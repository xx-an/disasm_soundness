LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 5EDE521B2863CFED2A0E30959BBC3AF76480E48384B252F6E667028C495C6755
LOAD:0000000000000000 ; Input MD5    : F8C3CAE453A6CA8E14BCFB4DFB344323
LOAD:0000000000000000 ; Input CRC32  : 2EA31B40
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/id
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'id.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'group-list.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'userspec.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetgroups.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'mgetgroups.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 2D8C0h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 8300h                ; Size in file image
LOAD:00000000000000D8                 dq 8300h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 8A50h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 208A50h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 650h                 ; Size in file image
LOAD:0000000000000110                 dq 848h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 8BF8h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 208BF8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 7378h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 7378h                ; Physical address
LOAD:00000000000001B0                 dq 28Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 28Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 8A50h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 208A50h              ; Physical address
LOAD:0000000000000220                 dq 5B0h                 ; Size in file image
LOAD:0000000000000228                 dq 5B0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 94h, 46h, 5, 0Ah, 53h, 48h, 88h, 89h, 0FFh, 0FCh, 9Fh ; Desc
LOAD:0000000000000284                 db 48h, 0D2h, 0FDh, 0A4h, 94h, 1Ch, 0B8h, 62h, 0F5h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 3Eh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 3Eh, 3Fh, 44h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aEndgrent - offset byte_950, 12h, 0, 0, \ ; "endgrent"
LOAD:00000000000002F0                            offset dword_0, 0>
LOAD:0000000000000308                 Elf64_Sym <offset aGetenv - offset byte_950, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000308                            offset dword_0, 0>
LOAD:0000000000000320                 Elf64_Sym <offset aFree - offset byte_950, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000320                            0>
LOAD:0000000000000338                 Elf64_Sym <offset aAbort - offset byte_950, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000338                            0>
LOAD:0000000000000350                 Elf64_Sym <offset aErrnoLocation - offset byte_950, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aStrncmp - offset byte_950, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aItmDeregistert - offset byte_950, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aExit - offset byte_950, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000398                            0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFpending - offset byte_950, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_950, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aFclose - offset byte_950, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aGetpwuid - offset byte_950, 12h, 0, 0, \ ; "getpwuid"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aBindtextdomain - offset byte_950, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aDcgettext - offset byte_950, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_950, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aStrlen - offset byte_950, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aStackChkFail - offset byte_950, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aGetuid - offset byte_950, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aGetoptLong - offset byte_950, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aMbrtowc - offset byte_950, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aStrchr - offset byte_950, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aGetgrgid - offset byte_950, 12h, 0, 0, \ ; "getgrgid"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aOverflow - offset byte_950, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aStrrchr - offset byte_950, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aLseek - offset byte_950, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000530                            0>
LOAD:0000000000000548                 Elf64_Sym <offset aAssertFail - offset byte_950, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMemset - offset byte_950, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aGeteuid - offset byte_950, 12h, 0, 0, \ ; "geteuid"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aLibcStartMain - offset byte_950, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aMemcmp - offset byte_950, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aFputsUnlocked - offset byte_950, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aCalloc - offset byte_950, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aGetpwnam - offset byte_950, 12h, 0, 0, \ ; "getpwnam"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aGmonStart - offset byte_950, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aMemcpy - offset byte_950, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aGetgrnam - offset byte_950, 12h, 0, 0, \ ; "getgrnam"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aFileno - offset byte_950, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aGetgid - offset byte_950, 12h, 0, 0, \ ; "getgid"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aGetgroups - offset byte_950, 12h, 0, 0, \ ; "getgroups"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aMalloc - offset byte_950, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aFflush - offset byte_950, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aNlLanginfo - offset byte_950, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aEndpwent - offset byte_950, 12h, 0, 0, \ ; "endpwent"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aGetegid - offset byte_950, 12h, 0, 0, \ ; "getegid"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aFreading - offset byte_950, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aRealloc - offset byte_950, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aSetlocale - offset byte_950, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aPrintfChk - offset byte_950, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aError - offset byte_950, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000770                            0>
LOAD:0000000000000788                 Elf64_Sym <offset aGetgrouplist - offset byte_950, 12h, 0, 0, \ ; "getgrouplist"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aFseeko - offset byte_950, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aStrtoul - offset byte_950, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aCxaAtexit - offset byte_950, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aExit+1 - offset byte_950, 12h, 0, 0, \ ; "exit"
LOAD:00000000000007E8                            offset dword_0, 0>
LOAD:0000000000000800                 Elf64_Sym <offset aFwrite - offset byte_950, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000800                            offset dword_0, 0>
LOAD:0000000000000818                 Elf64_Sym <offset aFprintfChk - offset byte_950, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000818                            offset dword_0, 0>
LOAD:0000000000000830                 Elf64_Sym <offset aItmRegistertmc - offset byte_950, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000830                            offset dword_0, 0>
LOAD:0000000000000848                 Elf64_Sym <offset aMbsinit - offset byte_950, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000848                            offset dword_0, 0>
LOAD:0000000000000860                 Elf64_Sym <offset aIswprint - offset byte_950, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000860                            offset dword_0, 0>
LOAD:0000000000000878                 Elf64_Sym <offset aCxaFinalize - offset byte_950, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000878                            offset dword_0, 0>
LOAD:0000000000000890                 Elf64_Sym <offset aCtypeBLoc - offset byte_950, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000890                            offset dword_0, 0>
LOAD:00000000000008A8                 Elf64_Sym <offset aStdout - offset byte_950, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000008A8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000008C0                 Elf64_Sym <offset aProgname - offset byte_950, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000008C0                            offset __bss_start, 8>
LOAD:00000000000008D8                 Elf64_Sym <offset aProgramInvocat - offset byte_950, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000008D8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000008F0                 Elf64_Sym <offset aPrognameFull - offset byte_950, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000008F0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000908                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_950, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000908                            offset __bss_start, 8>
LOAD:0000000000000920                 Elf64_Sym <offset aStderr - offset byte_950, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000920                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000938                 Elf64_Sym <offset aOptind - offset byte_950, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000938                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000950 ; ELF String Table
LOAD:0000000000000950 byte_950        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000950                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000951 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000CF0↓o
LOAD:000000000000095B aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000962 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000758↑o
LOAD:000000000000096F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000979 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000981 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000989 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000938↑o
LOAD:0000000000000990 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000998 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000428↑o
LOAD:00000000000009A2 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:00000000000009AB aGetgrgid       db 'getgrgid',0         ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000009B4 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000770↑o
LOAD:00000000000009BA aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000470↑o
LOAD:00000000000009CB aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000860↑o
LOAD:00000000000009D4 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000728↑o
LOAD:00000000000009DC aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000009E2 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000398↑o
LOAD:00000000000009E2                                         ; LOAD:00000000000007E8↑o
LOAD:00000000000009E8 aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000009E8                                         ; DATA XREF: LOAD:00000000000008D8↑o
LOAD:0000000000000A00 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000A0E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A0E                                         ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000A25 aEndpwent       db 'endpwent',0         ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A2E aGetpwnam       db 'getpwnam',0         ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000A37 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000A3E aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000A45 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000A4C aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000A5D aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000A64 aEndgrent       db 'endgrent',0         ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000A6D aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000A7B aGetgrnam       db 'getgrnam',0         ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000A84 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000008A8↑o
LOAD:0000000000000A8B aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000A91 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000A98 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000A9F aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000AA7 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000AAE aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000AB6 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000ABD aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000AC9 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000890↑o
LOAD:0000000000000AD7 aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000ADE aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000AE9 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000920↑o
LOAD:0000000000000AF0 aGetgroups      db 'getgroups',0        ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000AFA aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000B01 aGetegid        db 'getegid',0          ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000B09 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000B15 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000B1C aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000B23 aGeteuid        db 'geteuid',0          ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000B2B aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000B36 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000B3D aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000B3D                                         ; DATA XREF: LOAD:0000000000000908↑o
LOAD:0000000000000B5B aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000878↑o
LOAD:0000000000000B6A aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000B6A                                         ; LOAD:00000000000003C8↑o
LOAD:0000000000000B79 aGetgrouplist   db 'getgrouplist',0     ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000B86 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000B86                                         ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000B98 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000B9F aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000BAA aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000BB9 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000BBE aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000008C0↑o
LOAD:0000000000000BC9 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000008F0↑o
LOAD:0000000000000BD9 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000BE6 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000D00↓o
LOAD:0000000000000BF0 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000D10↓o
LOAD:0000000000000BFC aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000D20↓o
LOAD:0000000000000C07 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000D30↓o
LOAD:0000000000000C11 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000D40↓o
LOAD:0000000000000C1D aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000C1D                                         ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000C39 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000C48 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000C48                                         ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000C62 ; ELF GNU Symbol Version Table
LOAD:0000000000000C62                 dw 0
LOAD:0000000000000C64                 dw 2                    ; endgrent@@GLIBC_2.2.5
LOAD:0000000000000C66                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000C68                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000C6A                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000C6C                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000C6E                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000C70                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000C72                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000C74                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000C76                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000C78                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000C7A                 dw 2                    ; getpwuid@@GLIBC_2.2.5
LOAD:0000000000000C7C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000C7E                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000C80                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000C82                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000C84                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000C86                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000000C88                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000C8A                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000C8C                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000C8E                 dw 2                    ; getgrgid@@GLIBC_2.2.5
LOAD:0000000000000C90                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000C92                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000C94                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000C96                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000C98                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000C9A                 dw 2                    ; geteuid@@GLIBC_2.2.5
LOAD:0000000000000C9C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000C9E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000CA0                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000CA2                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000CA4                 dw 2                    ; getpwnam@@GLIBC_2.2.5
LOAD:0000000000000CA6                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000CA8                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000CAA                 dw 2                    ; getgrnam@@GLIBC_2.2.5
LOAD:0000000000000CAC                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000CAE                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:0000000000000CB0                 dw 2                    ; getgroups@@GLIBC_2.2.5
LOAD:0000000000000CB2                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000CB4                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000CB6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000CB8                 dw 2                    ; endpwent@@GLIBC_2.2.5
LOAD:0000000000000CBA                 dw 2                    ; getegid@@GLIBC_2.2.5
LOAD:0000000000000CBC                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000CBE                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000CC0                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000CC2                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000CC4                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000CC6                 dw 2                    ; getgrouplist@@GLIBC_2.2.5
LOAD:0000000000000CC8                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000CCA                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000CCC                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000CCE                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000CD0                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000CD2                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000CD4                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000CD6                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000CD8                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000CDA                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000CDC                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000CDE                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000CE0                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000CE2                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000CE4                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000CE6                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000CE8                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000CEA                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000CEC                 dw 0
LOAD:0000000000000CEE                 dw 0
LOAD:0000000000000CF0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000CF0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_950, 10h, 0> ; "libc.so.6"
LOAD:0000000000000D00                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_950, \ ; "GLIBC_2.3"
LOAD:0000000000000D00                                10h>
LOAD:0000000000000D10                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_950, \ ; "GLIBC_2.3.4"
LOAD:0000000000000D10                                10h>
LOAD:0000000000000D20                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_950, \ ; "GLIBC_2.14"
LOAD:0000000000000D20                                10h>
LOAD:0000000000000D30                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_950, \ ; "GLIBC_2.4"
LOAD:0000000000000D30                                10h>
LOAD:0000000000000D40                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_950, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000D50 ; ELF RELA Relocation Table
LOAD:0000000000000D50                 Elf64_Rela <208A50h, 8, 2040h> ; R_X86_64_RELATIVE +2040h
LOAD:0000000000000D68                 Elf64_Rela <208A58h, 8, 2000h> ; R_X86_64_RELATIVE +2000h
LOAD:0000000000000D80                 Elf64_Rela <208A60h, 8, 691Fh> ; R_X86_64_RELATIVE +691Fh
LOAD:0000000000000D98                 Elf64_Rela <208A80h, 8, 6ECAh> ; R_X86_64_RELATIVE +6ECAh
LOAD:0000000000000DB0                 Elf64_Rela <208AA0h, 8, 6927h> ; R_X86_64_RELATIVE +6927h
LOAD:0000000000000DC8                 Elf64_Rela <208AC0h, 8, 692Eh> ; R_X86_64_RELATIVE +692Eh
LOAD:0000000000000DE0                 Elf64_Rela <208AE0h, 8, 6933h> ; R_X86_64_RELATIVE +6933h
LOAD:0000000000000DF8                 Elf64_Rela <208B00h, 8, 6EB0h> ; R_X86_64_RELATIVE +6EB0h
LOAD:0000000000000E10                 Elf64_Rela <208B20h, 8, 6938h> ; R_X86_64_RELATIVE +6938h
LOAD:0000000000000E28                 Elf64_Rela <208B40h, 8, 693Dh> ; R_X86_64_RELATIVE +693Dh
LOAD:0000000000000E40                 Elf64_Rela <208B60h, 8, 6942h> ; R_X86_64_RELATIVE +6942h
LOAD:0000000000000E58                 Elf64_Rela <208BA0h, 8, 69E9h> ; R_X86_64_RELATIVE +69E9h
LOAD:0000000000000E70                 Elf64_Rela <208BA8h, 8, 69F1h> ; R_X86_64_RELATIVE +69F1h
LOAD:0000000000000E88                 Elf64_Rela <208BB0h, 8, 69F7h> ; R_X86_64_RELATIVE +69F7h
LOAD:0000000000000EA0                 Elf64_Rela <208BB8h, 8, 6A04h> ; R_X86_64_RELATIVE +6A04h
LOAD:0000000000000EB8                 Elf64_Rela <208BC0h, 8, 6A11h> ; R_X86_64_RELATIVE +6A11h
LOAD:0000000000000ED0                 Elf64_Rela <208BC8h, 8, 6EC0h> ; R_X86_64_RELATIVE +6EC0h
LOAD:0000000000000EE8                 Elf64_Rela <208BD0h, 8, 6A25h> ; R_X86_64_RELATIVE +6A25h
LOAD:0000000000000F00                 Elf64_Rela <208BD8h, 8, 6A0Ah> ; R_X86_64_RELATIVE +6A0Ah
LOAD:0000000000000F18                 Elf64_Rela <208BE0h, 8, 6875h> ; R_X86_64_RELATIVE +6875h
LOAD:0000000000000F30                 Elf64_Rela <208BE8h, 8, 6A2Dh> ; R_X86_64_RELATIVE +6A2Dh
LOAD:0000000000000F48                 Elf64_Rela <209008h, 8, 209008h> ; R_X86_64_RELATIVE +209008h
LOAD:0000000000000F60                 Elf64_Rela <209018h, 8, 6972h> ; R_X86_64_RELATIVE +6972h
LOAD:0000000000000F78                 Elf64_Rela <209080h, 8, 209090h> ; R_X86_64_RELATIVE +209090h
LOAD:0000000000000F90                 Elf64_Rela <209098h, 8, 209160h> ; R_X86_64_RELATIVE +209160h
LOAD:0000000000000FA8                 Elf64_Rela <208FC0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000FC0                 Elf64_Rela <208FC8h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000FD8                 Elf64_Rela <208FD0h, 2200000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000FF0                 Elf64_Rela <208FD8h, 3900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001008                 Elf64_Rela <208FE0h, 3C00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001020                 Elf64_Rela <2090A0h, 3F00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001038                 Elf64_Rela <2090A8h, 3E00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001050                 Elf64_Rela <2090B0h, 4400000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001068                 Elf64_Rela <2090B8h, 4100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001080                 Elf64_Rela <2090C0h, 4300000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001098 ; ELF JMPREL Relocation Table
LOAD:0000000000001098                 Elf64_Rela <208E00h, 100000007h, 0> ; R_X86_64_JUMP_SLOT endgrent
LOAD:00000000000010B0                 Elf64_Rela <208E08h, 200000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000010C8                 Elf64_Rela <208E10h, 300000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000010E0                 Elf64_Rela <208E18h, 400000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000010F8                 Elf64_Rela <208E20h, 500000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001110                 Elf64_Rela <208E28h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001128                 Elf64_Rela <208E30h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001140                 Elf64_Rela <208E38h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001158                 Elf64_Rela <208E40h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001170                 Elf64_Rela <208E48h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001188                 Elf64_Rela <208E50h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:00000000000011A0                 Elf64_Rela <208E58h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000011B8                 Elf64_Rela <208E60h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000011D0                 Elf64_Rela <208E68h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000011E8                 Elf64_Rela <208E70h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001200                 Elf64_Rela <208E78h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001218                 Elf64_Rela <208E80h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:0000000000001230                 Elf64_Rela <208E88h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001248                 Elf64_Rela <208E90h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001260                 Elf64_Rela <208E98h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001278                 Elf64_Rela <208EA0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getgrgid
LOAD:0000000000001290                 Elf64_Rela <208EA8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000012A8                 Elf64_Rela <208EB0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000012C0                 Elf64_Rela <208EB8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000012D8                 Elf64_Rela <208EC0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000012F0                 Elf64_Rela <208EC8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001308                 Elf64_Rela <208ED0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT geteuid
LOAD:0000000000001320                 Elf64_Rela <208ED8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001338                 Elf64_Rela <208EE0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001350                 Elf64_Rela <208EE8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001368                 Elf64_Rela <208EF0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT getpwnam
LOAD:0000000000001380                 Elf64_Rela <208EF8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001398                 Elf64_Rela <208F00h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT getgrnam
LOAD:00000000000013B0                 Elf64_Rela <208F08h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000013C8                 Elf64_Rela <208F10h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:00000000000013E0                 Elf64_Rela <208F18h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT getgroups
LOAD:00000000000013F8                 Elf64_Rela <208F20h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001410                 Elf64_Rela <208F28h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001428                 Elf64_Rela <208F30h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001440                 Elf64_Rela <208F38h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT endpwent
LOAD:0000000000001458                 Elf64_Rela <208F40h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT getegid
LOAD:0000000000001470                 Elf64_Rela <208F48h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001488                 Elf64_Rela <208F50h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000014A0                 Elf64_Rela <208F58h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000014B8                 Elf64_Rela <208F60h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000014D0                 Elf64_Rela <208F68h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000014E8                 Elf64_Rela <208F70h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT getgrouplist
LOAD:0000000000001500                 Elf64_Rela <208F78h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001518                 Elf64_Rela <208F80h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000001530                 Elf64_Rela <208F88h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001548                 Elf64_Rela <208F90h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001560                 Elf64_Rela <208F98h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001578                 Elf64_Rela <208FA0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001590                 Elf64_Rela <208FA8h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000015A8                 Elf64_Rela <208FB0h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000015C0                 Elf64_Rela <208FB8h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000015C0 LOAD            ends
LOAD:00000000000015C0
.init:00000000000015D8 ; ===========================================================================
.init:00000000000015D8
.init:00000000000015D8 ; Segment type: Pure code
.init:00000000000015D8 ; Segment permissions: Read/Execute
.init:00000000000015D8 _init           segment dword public 'CODE' use64
.init:00000000000015D8                 assume cs:_init
.init:00000000000015D8                 ;org 15D8h
.init:00000000000015D8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000015D8
.init:00000000000015D8 ; =============== S U B R O U T I N E =======================================
.init:00000000000015D8
.init:00000000000015D8
.init:00000000000015D8                 public _init_proc
.init:00000000000015D8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000015D8                 sub     rsp, 8          ; _init
.init:00000000000015DC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000015E3                 test    rax, rax
.init:00000000000015E6                 jz      short loc_15EA
.init:00000000000015E8                 call    rax ; __gmon_start__
.init:00000000000015EA
.init:00000000000015EA loc_15EA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000015EA                 add     rsp, 8
.init:00000000000015EE                 retn
.init:00000000000015EE _init_proc      endp
.init:00000000000015EE
.init:00000000000015EE _init           ends
.init:00000000000015EE
LOAD:00000000000015EF ; ===========================================================================
LOAD:00000000000015EF
LOAD:00000000000015EF ; Segment type: Pure code
LOAD:00000000000015EF ; Segment permissions: Read/Execute
LOAD:00000000000015EF LOAD            segment byte public 'CODE' use64
LOAD:00000000000015EF                 assume cs:LOAD
LOAD:00000000000015EF                 ;org 15EFh
LOAD:00000000000015EF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000015EF                 align 10h
LOAD:00000000000015EF LOAD            ends
LOAD:00000000000015EF
.plt:00000000000015F0 ; ===========================================================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Segment type: Pure code
.plt:00000000000015F0 ; Segment permissions: Read/Execute
.plt:00000000000015F0 _plt            segment para public 'CODE' use64
.plt:00000000000015F0                 assume cs:_plt
.plt:00000000000015F0                 ;org 15F0h
.plt:00000000000015F0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0
.plt:00000000000015F0 sub_15F0        proc near               ; CODE XREF: .plt:000000000000160B↓j
.plt:00000000000015F0                                         ; .plt:000000000000161B↓j ...
.plt:00000000000015F0 ; __unwind {
.plt:00000000000015F0                 push    cs:qword_208DF0
.plt:00000000000015F6                 jmp     cs:qword_208DF8
.plt:00000000000015F6 sub_15F0        endp
.plt:00000000000015F6
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015FC                 align 20h
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; void endgrent(void)
.plt:0000000000001600 _endgrent       proc near               ; CODE XREF: parse_with_separator:loc_4B47↓p
.plt:0000000000001600                                         ; parse_with_separator:loc_4CC1↓p ...
.plt:0000000000001600                 jmp     cs:endgrent_ptr
.plt:0000000000001600 _endgrent       endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    0
.plt:000000000000160B                 jmp     sub_15F0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; char *getenv(const char *name)
.plt:0000000000001610 _getenv         proc near               ; CODE XREF: main+378↓p
.plt:0000000000001610                 jmp     cs:getenv_ptr
.plt:0000000000001610 _getenv         endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    1
.plt:000000000000161B                 jmp     sub_15F0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; void free(void *ptr)
.plt:0000000000001620 _free           proc near               ; CODE XREF: main+2AB↓p
.plt:0000000000001620                                         ; print_stuff+2E8↓p ...
.plt:0000000000001620                 jmp     cs:free_ptr
.plt:0000000000001620 _free           endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    2
.plt:000000000000162B                 jmp     sub_15F0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: noreturn thunk
.plt:0000000000001630
.plt:0000000000001630 ; void __noreturn abort(void)
.plt:0000000000001630 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001630                                         ; quotearg_buffer_restyled:def_2F71↓p ...
.plt:0000000000001630                 jmp     cs:abort_ptr
.plt:0000000000001630 _abort          endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    3
.plt:000000000000163B                 jmp     sub_15F0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int *__errno_location(void)
.plt:0000000000001640 ___errno_location proc near             ; CODE XREF: main+20A↓p
.plt:0000000000001640                                         ; main+2C1↓p ...
.plt:0000000000001640                 jmp     cs:__errno_location_ptr
.plt:0000000000001640 ___errno_location endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    4
.plt:000000000000164B                 jmp     sub_15F0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001650 _strncmp        proc near               ; CODE XREF: usage+24C↓p
.plt:0000000000001650                                         ; usage+30D↓p
.plt:0000000000001650                 jmp     cs:strncmp_ptr
.plt:0000000000001650 _strncmp        endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    5
.plt:000000000000165B                 jmp     sub_15F0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: noreturn thunk
.plt:0000000000001660
.plt:0000000000001660 ; void __noreturn _exit(int status)
.plt:0000000000001660 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001660                 jmp     cs:_exit_ptr
.plt:0000000000001660 __exit          endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    6
.plt:000000000000166B                 jmp     sub_15F0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; size_t __fpending(FILE *fp)
.plt:0000000000001670 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001670                 jmp     cs:__fpending_ptr
.plt:0000000000001670 ___fpending     endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    7
.plt:000000000000167B                 jmp     sub_15F0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ; char *textdomain(const char *domainname)
.plt:0000000000001680 _textdomain     proc near               ; CODE XREF: main+47↓p
.plt:0000000000001680                 jmp     cs:textdomain_ptr
.plt:0000000000001680 _textdomain     endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    8
.plt:000000000000168B                 jmp     sub_15F0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int fclose(FILE *stream)
.plt:0000000000001690 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001690                                         ; rpl_fclose+6B↓j
.plt:0000000000001690                 jmp     cs:fclose_ptr
.plt:0000000000001690 _fclose         endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    9
.plt:000000000000169B                 jmp     sub_15F0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; struct passwd *getpwuid(__uid_t uid)
.plt:00000000000016A0 _getpwuid       proc near               ; CODE XREF: main+264↓p
.plt:00000000000016A0                                         ; print_stuff+112↓p ...
.plt:00000000000016A0                 jmp     cs:getpwuid_ptr
.plt:00000000000016A0 _getpwuid       endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    0Ah
.plt:00000000000016AB                 jmp     sub_15F0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000016B0 _bindtextdomain proc near               ; CODE XREF: main+3B↓p
.plt:00000000000016B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000016B0 _bindtextdomain endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    0Bh
.plt:00000000000016BB                 jmp     sub_15F0
.plt:00000000000016C0
.plt:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016C0
.plt:00000000000016C0 ; Attributes: thunk
.plt:00000000000016C0
.plt:00000000000016C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000016C0 _dcgettext      proc near               ; CODE XREF: main+202↓p
.plt:00000000000016C0                                         ; main+3BB↓p ...
.plt:00000000000016C0                 jmp     cs:dcgettext_ptr
.plt:00000000000016C0 _dcgettext      endp
.plt:00000000000016C0
.plt:00000000000016C6 ; ---------------------------------------------------------------------------
.plt:00000000000016C6                 push    0Ch
.plt:00000000000016CB                 jmp     sub_15F0
.plt:00000000000016D0
.plt:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016D0
.plt:00000000000016D0 ; Attributes: thunk
.plt:00000000000016D0
.plt:00000000000016D0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000016D0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000016D0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000016D0 ___ctype_get_mb_cur_max endp
.plt:00000000000016D0
.plt:00000000000016D6 ; ---------------------------------------------------------------------------
.plt:00000000000016D6                 push    0Dh
.plt:00000000000016DB                 jmp     sub_15F0
.plt:00000000000016E0
.plt:00000000000016E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016E0
.plt:00000000000016E0 ; Attributes: thunk
.plt:00000000000016E0
.plt:00000000000016E0 ; size_t strlen(const char *s)
.plt:00000000000016E0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000016E0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000016E0                 jmp     cs:strlen_ptr
.plt:00000000000016E0 _strlen         endp
.plt:00000000000016E0
.plt:00000000000016E6 ; ---------------------------------------------------------------------------
.plt:00000000000016E6                 push    0Eh
.plt:00000000000016EB                 jmp     sub_15F0
.plt:00000000000016F0
.plt:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016F0
.plt:00000000000016F0 ; Attributes: noreturn thunk
.plt:00000000000016F0
.plt:00000000000016F0 ___stack_chk_fail proc near             ; CODE XREF: print_stuff:loc_25DC↓p
.plt:00000000000016F0                                         ; print_group_list:loc_2C1E↓p ...
.plt:00000000000016F0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000016F0 ___stack_chk_fail endp
.plt:00000000000016F0
.plt:00000000000016F6 ; ---------------------------------------------------------------------------
.plt:00000000000016F6                 push    0Fh
.plt:00000000000016FB                 jmp     sub_15F0
.plt:0000000000001700
.plt:0000000000001700 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001700
.plt:0000000000001700 ; Attributes: thunk
.plt:0000000000001700
.plt:0000000000001700 ; __uid_t getuid(void)
.plt:0000000000001700 _getuid         proc near               ; CODE XREF: main+3E8↓p
.plt:0000000000001700                                         ; main+46E↓p ...
.plt:0000000000001700                 jmp     cs:getuid_ptr
.plt:0000000000001700 _getuid         endp
.plt:0000000000001700
.plt:0000000000001706 ; ---------------------------------------------------------------------------
.plt:0000000000001706                 push    10h
.plt:000000000000170B                 jmp     sub_15F0
.plt:0000000000001710
.plt:0000000000001710 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001710
.plt:0000000000001710 ; Attributes: thunk
.plt:0000000000001710
.plt:0000000000001710 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001710 _getopt_long    proc near               ; CODE XREF: main+72↓p
.plt:0000000000001710                 jmp     cs:getopt_long_ptr
.plt:0000000000001710 _getopt_long    endp
.plt:0000000000001710
.plt:0000000000001716 ; ---------------------------------------------------------------------------
.plt:0000000000001716                 push    11h
.plt:000000000000171B                 jmp     sub_15F0
.plt:0000000000001720
.plt:0000000000001720 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001720
.plt:0000000000001720 ; Attributes: thunk
.plt:0000000000001720
.plt:0000000000001720 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001720 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001720                 jmp     cs:mbrtowc_ptr
.plt:0000000000001720 _mbrtowc        endp
.plt:0000000000001720
.plt:0000000000001726 ; ---------------------------------------------------------------------------
.plt:0000000000001726                 push    12h
.plt:000000000000172B                 jmp     sub_15F0
.plt:0000000000001730
.plt:0000000000001730 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001730
.plt:0000000000001730 ; Attributes: thunk
.plt:0000000000001730
.plt:0000000000001730 ; char *strchr(const char *s, int c)
.plt:0000000000001730 _strchr         proc near               ; CODE XREF: parse_user_spec+2B↓p
.plt:0000000000001730                                         ; parse_user_spec+64↓p ...
.plt:0000000000001730                 jmp     cs:strchr_ptr
.plt:0000000000001730 _strchr         endp
.plt:0000000000001730
.plt:0000000000001736 ; ---------------------------------------------------------------------------
.plt:0000000000001736                 push    13h
.plt:000000000000173B                 jmp     sub_15F0
.plt:0000000000001740
.plt:0000000000001740 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001740
.plt:0000000000001740 ; Attributes: thunk
.plt:0000000000001740
.plt:0000000000001740 ; struct group *getgrgid(__gid_t gid)
.plt:0000000000001740 _getgrgid       proc near               ; CODE XREF: print_stuff+26F↓p
.plt:0000000000001740                                         ; print_stuff+342↓p ...
.plt:0000000000001740                 jmp     cs:getgrgid_ptr
.plt:0000000000001740 _getgrgid       endp
.plt:0000000000001740
.plt:0000000000001746 ; ---------------------------------------------------------------------------
.plt:0000000000001746                 push    14h
.plt:000000000000174B                 jmp     sub_15F0
.plt:0000000000001750
.plt:0000000000001750 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001750
.plt:0000000000001750 ; Attributes: thunk
.plt:0000000000001750
.plt:0000000000001750 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001750 ___overflow     proc near               ; CODE XREF: print_stuff:loc_2348↓p
.plt:0000000000001750                                         ; print_stuff+529↓p ...
.plt:0000000000001750                 jmp     cs:__overflow_ptr
.plt:0000000000001750 ___overflow     endp
.plt:0000000000001750
.plt:0000000000001756 ; ---------------------------------------------------------------------------
.plt:0000000000001756                 push    15h
.plt:000000000000175B                 jmp     sub_15F0
.plt:0000000000001760
.plt:0000000000001760 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001760
.plt:0000000000001760 ; Attributes: thunk
.plt:0000000000001760
.plt:0000000000001760 ; char *strrchr(const char *s, int c)
.plt:0000000000001760 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001760                 jmp     cs:strrchr_ptr
.plt:0000000000001760 _strrchr        endp
.plt:0000000000001760
.plt:0000000000001766 ; ---------------------------------------------------------------------------
.plt:0000000000001766                 push    16h
.plt:000000000000176B                 jmp     sub_15F0
.plt:0000000000001770
.plt:0000000000001770 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001770
.plt:0000000000001770 ; Attributes: thunk
.plt:0000000000001770
.plt:0000000000001770 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001770 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001770                                         ; rpl_fseeko+3B↓p
.plt:0000000000001770                 jmp     cs:lseek_ptr
.plt:0000000000001770 _lseek          endp
.plt:0000000000001770
.plt:0000000000001776 ; ---------------------------------------------------------------------------
.plt:0000000000001776                 push    17h
.plt:000000000000177B                 jmp     sub_15F0
.plt:0000000000001780
.plt:0000000000001780 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001780
.plt:0000000000001780 ; Attributes: noreturn thunk
.plt:0000000000001780
.plt:0000000000001780 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001780 ___assert_fail  proc near               ; CODE XREF: xstrtoul+39F↓p
.plt:0000000000001780                 jmp     cs:__assert_fail_ptr
.plt:0000000000001780 ___assert_fail  endp
.plt:0000000000001780
.plt:0000000000001786 ; ---------------------------------------------------------------------------
.plt:0000000000001786                 push    18h
.plt:000000000000178B                 jmp     sub_15F0
.plt:0000000000001790
.plt:0000000000001790 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001790
.plt:0000000000001790 ; Attributes: thunk
.plt:0000000000001790
.plt:0000000000001790 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001790 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001790                                         ; xzalloc+12↓j
.plt:0000000000001790                 jmp     cs:memset_ptr
.plt:0000000000001790 _memset         endp
.plt:0000000000001790
.plt:0000000000001796 ; ---------------------------------------------------------------------------
.plt:0000000000001796                 push    19h
.plt:000000000000179B                 jmp     sub_15F0
.plt:00000000000017A0
.plt:00000000000017A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017A0
.plt:00000000000017A0 ; Attributes: thunk
.plt:00000000000017A0
.plt:00000000000017A0 ; __uid_t geteuid(void)
.plt:00000000000017A0 _geteuid        proc near               ; CODE XREF: main+394↓p
.plt:00000000000017A0                                         ; main+446↓p
.plt:00000000000017A0                 jmp     cs:geteuid_ptr
.plt:00000000000017A0 _geteuid        endp
.plt:00000000000017A0
.plt:00000000000017A6 ; ---------------------------------------------------------------------------
.plt:00000000000017A6                 push    1Ah
.plt:00000000000017AB                 jmp     sub_15F0
.plt:00000000000017B0
.plt:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017B0
.plt:00000000000017B0 ; Attributes: thunk
.plt:00000000000017B0
.plt:00000000000017B0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000017B0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000017B0                 jmp     cs:memcmp_ptr
.plt:00000000000017B0 _memcmp         endp
.plt:00000000000017B0
.plt:00000000000017B6 ; ---------------------------------------------------------------------------
.plt:00000000000017B6                 push    1Bh
.plt:00000000000017BB                 jmp     sub_15F0
.plt:00000000000017C0
.plt:00000000000017C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017C0
.plt:00000000000017C0 ; Attributes: thunk
.plt:00000000000017C0
.plt:00000000000017C0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000017C0 _fputs_unlocked proc near               ; CODE XREF: print_stuff+64↓p
.plt:00000000000017C0                                         ; print_stuff+4A3↓p ...
.plt:00000000000017C0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000017C0 _fputs_unlocked endp
.plt:00000000000017C0
.plt:00000000000017C6 ; ---------------------------------------------------------------------------
.plt:00000000000017C6                 push    1Ch
.plt:00000000000017CB                 jmp     sub_15F0
.plt:00000000000017D0
.plt:00000000000017D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017D0
.plt:00000000000017D0 ; Attributes: thunk
.plt:00000000000017D0
.plt:00000000000017D0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000017D0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000017D0                 jmp     cs:calloc_ptr
.plt:00000000000017D0 _calloc         endp
.plt:00000000000017D0
.plt:00000000000017D6 ; ---------------------------------------------------------------------------
.plt:00000000000017D6                 push    1Dh
.plt:00000000000017DB                 jmp     sub_15F0
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Attributes: thunk
.plt:00000000000017E0
.plt:00000000000017E0 ; struct passwd *getpwnam(const char *name)
.plt:00000000000017E0 _getpwnam       proc near               ; CODE XREF: parse_with_separator+196↓p
.plt:00000000000017E0                 jmp     cs:getpwnam_ptr
.plt:00000000000017E0 _getpwnam       endp
.plt:00000000000017E0
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017E6                 push    1Eh
.plt:00000000000017EB                 jmp     sub_15F0
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000017F0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000017F0                 jmp     cs:memcpy_ptr
.plt:00000000000017F0 _memcpy         endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    1Fh
.plt:00000000000017FB                 jmp     sub_15F0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: thunk
.plt:0000000000001800
.plt:0000000000001800 ; struct group *getgrnam(const char *name)
.plt:0000000000001800 _getgrnam       proc near               ; CODE XREF: parse_with_separator+B5↓p
.plt:0000000000001800                 jmp     cs:getgrnam_ptr
.plt:0000000000001800 _getgrnam       endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    20h ; ' '
.plt:000000000000180B                 jmp     sub_15F0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int fileno(FILE *stream)
.plt:0000000000001810 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001810                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001810                 jmp     cs:fileno_ptr
.plt:0000000000001810 _fileno         endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    21h ; '!'
.plt:000000000000181B                 jmp     sub_15F0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; __gid_t getgid(void)
.plt:0000000000001820 _getgid         proc near               ; CODE XREF: main+310↓p
.plt:0000000000001820                 jmp     cs:getgid_ptr
.plt:0000000000001820 _getgid         endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    22h ; '"'
.plt:000000000000182B                 jmp     sub_15F0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: thunk
.plt:0000000000001830
.plt:0000000000001830 ; int getgroups(int size, __gid_t list[])
.plt:0000000000001830 _getgroups      proc near               ; CODE XREF: mgetgroups+FC↓p
.plt:0000000000001830                                         ; mgetgroups+157↓p ...
.plt:0000000000001830                 jmp     cs:getgroups_ptr
.plt:0000000000001830 _getgroups      endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    23h ; '#'
.plt:000000000000183B                 jmp     sub_15F0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; void *malloc(size_t size)
.plt:0000000000001840 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001840                 jmp     cs:malloc_ptr
.plt:0000000000001840 _malloc         endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    24h ; '$'
.plt:000000000000184B                 jmp     sub_15F0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; int fflush(FILE *stream)
.plt:0000000000001850 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001850                                         ; rpl_fflush+3B↓j
.plt:0000000000001850                 jmp     cs:fflush_ptr
.plt:0000000000001850 _fflush         endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    25h ; '%'
.plt:000000000000185B                 jmp     sub_15F0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; char *nl_langinfo(nl_item item)
.plt:0000000000001860 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001860                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001860 _nl_langinfo    endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    26h ; '&'
.plt:000000000000186B                 jmp     sub_15F0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; void endpwent(void)
.plt:0000000000001870 _endpwent       proc near               ; CODE XREF: parse_with_separator:loc_4C3F↓p
.plt:0000000000001870                                         ; parse_with_separator+1EB↓p ...
.plt:0000000000001870                 jmp     cs:endpwent_ptr
.plt:0000000000001870 _endpwent       endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    27h ; '''
.plt:000000000000187B                 jmp     sub_15F0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; __gid_t getegid(void)
.plt:0000000000001880 _getegid        proc near               ; CODE XREF: main+2F1↓p
.plt:0000000000001880                 jmp     cs:getegid_ptr
.plt:0000000000001880 _getegid        endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    28h ; '('
.plt:000000000000188B                 jmp     sub_15F0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int __freading(FILE *fp)
.plt:0000000000001890 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001890                                         ; rpl_fflush+9↓p
.plt:0000000000001890                 jmp     cs:__freading_ptr
.plt:0000000000001890 ___freading     endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    29h ; ')'
.plt:000000000000189B                 jmp     sub_15F0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000018A0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000018A0                                         ; realloc_groupbuf+1D↓j ...
.plt:00000000000018A0                 jmp     cs:realloc_ptr
.plt:00000000000018A0 _realloc        endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    2Ah ; '*'
.plt:00000000000018AB                 jmp     sub_15F0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; char *setlocale(int category, const char *locale)
.plt:00000000000018B0 _setlocale      proc near               ; CODE XREF: main+28↓p
.plt:00000000000018B0                                         ; usage+233↓p ...
.plt:00000000000018B0                 jmp     cs:setlocale_ptr
.plt:00000000000018B0 _setlocale      endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    2Bh ; '+'
.plt:00000000000018BB                 jmp     sub_15F0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ___printf_chk   proc near               ; CODE XREF: print_stuff+201↓p
.plt:00000000000018C0                                         ; print_stuff+22A↓p ...
.plt:00000000000018C0                 jmp     cs:__printf_chk_ptr
.plt:00000000000018C0 ___printf_chk   endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    2Ch ; ','
.plt:00000000000018CB                 jmp     sub_15F0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000018D0 _error          proc near               ; CODE XREF: main+21B↓p
.plt:00000000000018D0                                         ; main+3CC↓p ...
.plt:00000000000018D0                 jmp     cs:error_ptr
.plt:00000000000018D0 _error          endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    2Dh ; '-'
.plt:00000000000018DB                 jmp     sub_15F0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: thunk
.plt:00000000000018E0
.plt:00000000000018E0 ; int getgrouplist(const char *user, __gid_t group, __gid_t *groups, int *ngroups)
.plt:00000000000018E0 _getgrouplist   proc near               ; CODE XREF: mgetgroups+66↓p
.plt:00000000000018E0                 jmp     cs:getgrouplist_ptr
.plt:00000000000018E0 _getgrouplist   endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    2Eh ; '.'
.plt:00000000000018EB                 jmp     sub_15F0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000018F0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_612A↓j
.plt:00000000000018F0                 jmp     cs:fseeko_ptr
.plt:00000000000018F0 _fseeko         endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    2Fh ; '/'
.plt:00000000000018FB                 jmp     sub_15F0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001900 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000001900                 jmp     cs:strtoul_ptr
.plt:0000000000001900 _strtoul        endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    30h ; '0'
.plt:000000000000190B                 jmp     sub_15F0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001910 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001910                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001910 ___cxa_atexit   endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    31h ; '1'
.plt:000000000000191B                 jmp     sub_15F0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: noreturn thunk
.plt:0000000000001920
.plt:0000000000001920 ; void __noreturn exit(int status)
.plt:0000000000001920 _exit           proc near               ; CODE XREF: main+101↓p
.plt:0000000000001920                                         ; usage+58↓p
.plt:0000000000001920                 jmp     cs:exit_ptr
.plt:0000000000001920 _exit           endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    32h ; '2'
.plt:000000000000192B                 jmp     sub_15F0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001930 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001930                 jmp     cs:fwrite_ptr
.plt:0000000000001930 _fwrite         endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    33h ; '3'
.plt:000000000000193B                 jmp     sub_15F0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001940                                         ; version_etc_arn+37↓p ...
.plt:0000000000001940                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001940 ___fprintf_chk  endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    34h ; '4'
.plt:000000000000194B                 jmp     sub_15F0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: thunk
.plt:0000000000001950
.plt:0000000000001950 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001950 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001950                 jmp     cs:mbsinit_ptr
.plt:0000000000001950 _mbsinit        endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    35h ; '5'
.plt:000000000000195B                 jmp     sub_15F0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; int iswprint(wint_t wc)
.plt:0000000000001960 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001960                 jmp     cs:iswprint_ptr
.plt:0000000000001960 _iswprint       endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    36h ; '6'
.plt:000000000000196B                 jmp     sub_15F0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001970 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001970                                         ; xstrtoul+55↓p
.plt:0000000000001970                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001970 ___ctype_b_loc  endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    37h ; '7'
.plt:000000000000197B                 jmp     sub_15F0
.plt:000000000000197B ; } // starts at 15F0
.plt:000000000000197B _plt            ends
.plt:000000000000197B
.plt.got:0000000000001980 ; ===========================================================================
.plt.got:0000000000001980
.plt.got:0000000000001980 ; Segment type: Pure code
.plt.got:0000000000001980 ; Segment permissions: Read/Execute
.plt.got:0000000000001980 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001980                 assume cs:_plt_got
.plt.got:0000000000001980                 ;org 1980h
.plt.got:0000000000001980                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001980
.plt.got:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001980
.plt.got:0000000000001980 ; Attributes: thunk
.plt.got:0000000000001980
.plt.got:0000000000001980 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001980 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001980 ; __unwind {
.plt.got:0000000000001980                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001980 __cxa_finalize  endp
.plt.got:0000000000001980
.plt.got:0000000000001980 ; ---------------------------------------------------------------------------
.plt.got:0000000000001986                 align 8
.plt.got:0000000000001986 ; } // starts at 1980
.plt.got:0000000000001986 _plt_got        ends
.plt.got:0000000000001986
LOAD:0000000000001988 ; ===========================================================================
LOAD:0000000000001988
LOAD:0000000000001988 ; Segment type: Pure code
LOAD:0000000000001988 ; Segment permissions: Read/Execute
LOAD:0000000000001988 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001988                 assume cs:LOAD
LOAD:0000000000001988                 ;org 1988h
LOAD:0000000000001988                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001988                 align 10h
LOAD:0000000000001988 LOAD            ends
LOAD:0000000000001988
.text:0000000000001990 ; ===========================================================================
.text:0000000000001990
.text:0000000000001990 ; Segment type: Pure code
.text:0000000000001990 ; Segment permissions: Read/Execute
.text:0000000000001990 _text           segment para public 'CODE' use64
.text:0000000000001990                 assume cs:_text
.text:0000000000001990                 ;org 1990h
.text:0000000000001990                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001990
.text:0000000000001990 ; =============== S U B R O U T I N E =======================================
.text:0000000000001990
.text:0000000000001990
.text:0000000000001990 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001990                 public main
.text:0000000000001990 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001990 ; __unwind {
.text:0000000000001990                 push    r14
.text:0000000000001992                 push    r13
.text:0000000000001994                 push    r12
.text:0000000000001996                 push    rbp
.text:0000000000001997                 mov     ebp, edi
.text:0000000000001999                 push    rbx
.text:000000000000199A                 mov     rdi, [rsi]
.text:000000000000199D                 mov     rbx, rsi
.text:00000000000019A0                 lea     r12, longopts
.text:00000000000019A7                 call    set_program_name
.text:00000000000019AC                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000019B3                 mov     edi, 6          ; category
.text:00000000000019B8                 call    _setlocale
.text:00000000000019BD                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000019C4                 lea     rdi, domainname ; "coreutils"
.text:00000000000019CB                 call    _bindtextdomain
.text:00000000000019D0                 lea     rdi, domainname ; "coreutils"
.text:00000000000019D7                 call    _textdomain
.text:00000000000019DC                 lea     rdi, close_stdout
.text:00000000000019E3                 call    atexit
.text:00000000000019E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000019F0
.text:00000000000019F0 loc_19F0:                               ; CODE XREF: main+83↓j
.text:00000000000019F0                                         ; main+AB↓j ...
.text:00000000000019F0                 lea     rdx, shortopts  ; "agnruzGZ"
.text:00000000000019F7                 xor     r8d, r8d        ; longind
.text:00000000000019FA                 mov     rcx, r12        ; longopts
.text:00000000000019FD                 mov     rsi, rbx        ; argv
.text:0000000000001A00                 mov     edi, ebp        ; argc
.text:0000000000001A02                 call    _getopt_long
.text:0000000000001A07                 cmp     eax, 0FFFFFFFFh
.text:0000000000001A0A                 jz      loc_1B04
.text:0000000000001A10                 cmp     eax, 61h ; 'a'
.text:0000000000001A13                 jz      short loc_19F0
.text:0000000000001A15                 jle     short loc_1A40
.text:0000000000001A17                 cmp     eax, 72h ; 'r'
.text:0000000000001A1A                 jz      loc_1AE8
.text:0000000000001A20                 jg      short loc_1AA0
.text:0000000000001A22                 cmp     eax, 67h ; 'g'
.text:0000000000001A25                 jz      loc_1AD8
.text:0000000000001A2B                 cmp     eax, 6Eh ; 'n'
.text:0000000000001A2E                 jnz     loc_1E40
.text:0000000000001A34                 mov     cs:use_name, 1
.text:0000000000001A3B                 jmp     short loc_19F0
.text:0000000000001A3B ; ---------------------------------------------------------------------------
.text:0000000000001A3D                 align 20h
.text:0000000000001A40
.text:0000000000001A40 loc_1A40:                               ; CODE XREF: main+85↑j
.text:0000000000001A40                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001A45                 jz      loc_1E4A
.text:0000000000001A4B                 jg      short loc_1AC0
.text:0000000000001A4D                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001A52                 jnz     loc_1E40
.text:0000000000001A58                 sub     rsp, 8
.text:0000000000001A5C                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A63                 mov     rcx, cs:Version
.text:0000000000001A6A                 push    0
.text:0000000000001A6C                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001A73                 lea     r8, aArnoldRobbins ; "Arnold Robbins"
.text:0000000000001A7A                 lea     rdx, unk_6837
.text:0000000000001A81                 lea     rsi, aId        ; "id"
.text:0000000000001A88                 xor     eax, eax
.text:0000000000001A8A                 call    version_etc
.text:0000000000001A8F                 xor     edi, edi        ; status
.text:0000000000001A91                 call    _exit
.text:0000000000001A91 ; ---------------------------------------------------------------------------
.text:0000000000001A96                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 loc_1AA0:                               ; CODE XREF: main+90↑j
.text:0000000000001AA0                 cmp     eax, 75h ; 'u'
.text:0000000000001AA3                 jz      short loc_1AF8
.text:0000000000001AA5                 cmp     eax, 7Ah ; 'z'
.text:0000000000001AA8                 jnz     loc_1E40
.text:0000000000001AAE                 mov     cs:opt_zero, 1
.text:0000000000001AB5                 jmp     loc_19F0
.text:0000000000001AB5 ; ---------------------------------------------------------------------------
.text:0000000000001ABA                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 loc_1AC0:                               ; CODE XREF: main+BB↑j
.text:0000000000001AC0                 cmp     eax, 47h ; 'G'
.text:0000000000001AC3                 jnz     loc_1E17
.text:0000000000001AC9                 mov     cs:just_group_list, 1
.text:0000000000001AD0                 jmp     loc_19F0
.text:0000000000001AD0 ; ---------------------------------------------------------------------------
.text:0000000000001AD5                 align 8
.text:0000000000001AD8
.text:0000000000001AD8 loc_1AD8:                               ; CODE XREF: main+95↑j
.text:0000000000001AD8                 mov     cs:just_group, 1
.text:0000000000001ADF                 jmp     loc_19F0
.text:0000000000001ADF ; ---------------------------------------------------------------------------
.text:0000000000001AE4                 align 8
.text:0000000000001AE8
.text:0000000000001AE8 loc_1AE8:                               ; CODE XREF: main+8A↑j
.text:0000000000001AE8                 mov     cs:use_real, 1
.text:0000000000001AEF                 jmp     loc_19F0
.text:0000000000001AEF ; ---------------------------------------------------------------------------
.text:0000000000001AF4                 align 8
.text:0000000000001AF8
.text:0000000000001AF8 loc_1AF8:                               ; CODE XREF: main+113↑j
.text:0000000000001AF8                 mov     cs:just_user, 1
.text:0000000000001AFF                 jmp     loc_19F0
.text:0000000000001B04 ; ---------------------------------------------------------------------------
.text:0000000000001B04
.text:0000000000001B04 loc_1B04:                               ; CODE XREF: main+7A↑j
.text:0000000000001B04                 movzx   ecx, cs:just_group
.text:0000000000001B0B                 movzx   edx, cs:just_user
.text:0000000000001B12                 movzx   r14d, cs:just_group_list
.text:0000000000001B1A                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001B21                 mov     r12d, edx
.text:0000000000001B24                 mov     r13d, ecx
.text:0000000000001B27                 add     edx, ecx
.text:0000000000001B29                 movzx   ecx, r14b
.text:0000000000001B2D                 sub     ebp, eax
.text:0000000000001B2F                 add     edx, ecx
.text:0000000000001B31                 movsxd  rbp, ebp
.text:0000000000001B34                 sub     edx, 1
.text:0000000000001B37                 jg      loc_1E85
.text:0000000000001B3D                 mov     ecx, r12d
.text:0000000000001B40                 or      cl, r13b
.text:0000000000001B43                 jnz     short loc_1B4E
.text:0000000000001B45                 test    r14b, r14b
.text:0000000000001B48                 jz      loc_1CD1
.text:0000000000001B4E
.text:0000000000001B4E loc_1B4E:                               ; CODE XREF: main+1B3↑j
.text:0000000000001B4E                 test    rbp, rbp
.text:0000000000001B51                 jz      loc_1C45
.text:0000000000001B57
.text:0000000000001B57 loc_1B57:                               ; CODE XREF: main+36B↓j
.text:0000000000001B57                 cmp     rbp, 1
.text:0000000000001B5B                 movsxd  rdx, eax
.text:0000000000001B5E                 lea     r12, euid
.text:0000000000001B65                 setnbe  cs:multiple_users
.text:0000000000001B6C                 add     rbp, rdx
.text:0000000000001B6F                 jmp     short loc_1BC5
.text:0000000000001B71 ; ---------------------------------------------------------------------------
.text:0000000000001B71
.text:0000000000001B71 loc_1B71:                               ; CODE XREF: main+25C↓j
.text:0000000000001B71                                         ; main+26F↓j
.text:0000000000001B71                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001B78
.text:0000000000001B78 loc_1B78:                               ; CODE XREF: main+248↓j
.text:0000000000001B78                 mov     rdi, [rbx+rax*8]
.text:0000000000001B7C                 call    quote
.text:0000000000001B81                 lea     rsi, msgid      ; "%s: no such user"
.text:0000000000001B88                 mov     edx, 5          ; category
.text:0000000000001B8D                 xor     edi, edi        ; domainname
.text:0000000000001B8F                 mov     r14, rax
.text:0000000000001B92                 call    _dcgettext
.text:0000000000001B97                 mov     r13, rax
.text:0000000000001B9A                 call    ___errno_location
.text:0000000000001B9F                 mov     esi, [rax]      ; errnum
.text:0000000000001BA1                 mov     rcx, r14
.text:0000000000001BA4                 mov     rdx, r13        ; format
.text:0000000000001BA7                 xor     edi, edi        ; status
.text:0000000000001BA9                 xor     eax, eax
.text:0000000000001BAB                 call    _error
.text:0000000000001BB0                 mov     cs:ok, 0
.text:0000000000001BB7
.text:0000000000001BB7 loc_1BB7:                               ; CODE XREF: main+2B0↓j
.text:0000000000001BB7                 add     cs:optind@@GLIBC_2_2_5, 1
.text:0000000000001BBE                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001BC5
.text:0000000000001BC5 loc_1BC5:                               ; CODE XREF: main+1DF↑j
.text:0000000000001BC5                 movsxd  rdx, eax
.text:0000000000001BC8                 cmp     rdx, rbp
.text:0000000000001BCB                 jnb     loc_1CBB
.text:0000000000001BD1                 mov     rdi, [rbx+rdx*8] ; s
.text:0000000000001BD5                 cmp     byte ptr [rdi], 0
.text:0000000000001BD8                 jz      short loc_1B78
.text:0000000000001BDA                 xor     r8d, r8d
.text:0000000000001BDD                 xor     ecx, ecx
.text:0000000000001BDF                 xor     edx, edx
.text:0000000000001BE1                 mov     rsi, r12
.text:0000000000001BE4                 call    parse_user_spec
.text:0000000000001BE9                 test    rax, rax
.text:0000000000001BEC                 jnz     short loc_1B71
.text:0000000000001BEE                 mov     edi, cs:euid    ; uid
.text:0000000000001BF4                 call    _getpwuid
.text:0000000000001BF9                 test    rax, rax
.text:0000000000001BFC                 mov     r13, rax
.text:0000000000001BFF                 jz      loc_1B71
.text:0000000000001C05                 mov     rdi, [rax]      ; src
.text:0000000000001C08                 call    xstrdup
.text:0000000000001C0D                 mov     r14, rax
.text:0000000000001C10                 mov     eax, [r13+10h]
.text:0000000000001C14                 mov     rdi, r14
.text:0000000000001C17                 mov     cs:euid, eax
.text:0000000000001C1D                 mov     cs:ruid, eax
.text:0000000000001C23                 mov     eax, [r13+14h]
.text:0000000000001C27                 mov     cs:egid, eax
.text:0000000000001C2D                 mov     cs:rgid, eax
.text:0000000000001C33                 call    print_stuff
.text:0000000000001C38                 mov     rdi, r14        ; ptr
.text:0000000000001C3B                 call    _free
.text:0000000000001C40                 jmp     loc_1BB7
.text:0000000000001C45 ; ---------------------------------------------------------------------------
.text:0000000000001C45
.text:0000000000001C45 loc_1C45:                               ; CODE XREF: main+1C1↑j
.text:0000000000001C45                 test    r12b, r12b
.text:0000000000001C48                 jnz     loc_1D61
.text:0000000000001C4E
.text:0000000000001C4E loc_1C4E:                               ; CODE XREF: main+380↓j
.text:0000000000001C4E                 or      r14d, r13d
.text:0000000000001C51                 call    ___errno_location
.text:0000000000001C56                 test    r14b, r14b
.text:0000000000001C59                 mov     rbx, rax
.text:0000000000001C5C                 jz      loc_1DD0
.text:0000000000001C62
.text:0000000000001C62 loc_1C62:                               ; CODE XREF: main+454↓j
.text:0000000000001C62                                         ; main+45D↓j
.text:0000000000001C62                 call    ___errno_location
.text:0000000000001C67                 test    r13b, r13b
.text:0000000000001C6A                 mov     rbx, rax
.text:0000000000001C6D                 jz      loc_1DF8
.text:0000000000001C73
.text:0000000000001C73 loc_1C73:                               ; CODE XREF: main+408↓j
.text:0000000000001C73                                         ; main+47C↓j
.text:0000000000001C73                 call    ___errno_location
.text:0000000000001C78                 mov     dword ptr [rax], 0
.text:0000000000001C7E                 mov     rbx, rax
.text:0000000000001C81                 call    _getegid
.text:0000000000001C86                 mov     cs:egid, eax
.text:0000000000001C8C                 add     eax, 1
.text:0000000000001C8F                 jnz     short loc_1C9A
.text:0000000000001C91                 cmp     dword ptr [rbx], 0
.text:0000000000001C94                 jnz     loc_1F15
.text:0000000000001C9A
.text:0000000000001C9A loc_1C9A:                               ; CODE XREF: main+2FF↑j
.text:0000000000001C9A                 mov     dword ptr [rbx], 0
.text:0000000000001CA0                 call    _getgid
.text:0000000000001CA5                 mov     cs:rgid, eax
.text:0000000000001CAB                 add     eax, 1
.text:0000000000001CAE                 jz      loc_1DA3
.text:0000000000001CB4
.text:0000000000001CB4 loc_1CB4:                               ; CODE XREF: main+3A2↓j
.text:0000000000001CB4                                         ; main+3F6↓j ...
.text:0000000000001CB4                 xor     edi, edi
.text:0000000000001CB6                 call    print_stuff
.text:0000000000001CBB
.text:0000000000001CBB loc_1CBB:                               ; CODE XREF: main+23B↑j
.text:0000000000001CBB                 movzx   eax, cs:ok
.text:0000000000001CC2                 pop     rbx
.text:0000000000001CC3                 pop     rbp
.text:0000000000001CC4                 pop     r12
.text:0000000000001CC6                 xor     eax, 1
.text:0000000000001CC9                 movzx   eax, al
.text:0000000000001CCC                 pop     r13
.text:0000000000001CCE                 pop     r14
.text:0000000000001CD0                 retn
.text:0000000000001CD1 ; ---------------------------------------------------------------------------
.text:0000000000001CD1
.text:0000000000001CD1 loc_1CD1:                               ; CODE XREF: main+1B8↑j
.text:0000000000001CD1                 cmp     cs:use_real, 0
.text:0000000000001CD8                 jnz     loc_1ECD
.text:0000000000001CDE                 cmp     cs:use_name, 0
.text:0000000000001CE5                 jnz     loc_1ECD
.text:0000000000001CEB                 cmp     cs:opt_zero, 0
.text:0000000000001CF2                 jnz     loc_1EA9
.text:0000000000001CF8                 test    rbp, rbp
.text:0000000000001CFB                 jnz     loc_1B57
.text:0000000000001D01                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000001D08                 call    _getenv
.text:0000000000001D0D                 test    r12b, r12b
.text:0000000000001D10                 jz      loc_1C4E
.text:0000000000001D16
.text:0000000000001D16 loc_1D16:                               ; CODE XREF: main+3D8↓j
.text:0000000000001D16                 call    ___errno_location
.text:0000000000001D1B                 mov     dword ptr [rax], 0
.text:0000000000001D21                 mov     rbx, rax
.text:0000000000001D24                 call    _geteuid
.text:0000000000001D29                 mov     cs:euid, eax
.text:0000000000001D2F                 add     eax, 1
.text:0000000000001D32                 jnz     short loc_1CB4
.text:0000000000001D34                 cmp     dword ptr [rbx], 0
.text:0000000000001D37                 jz      loc_1E51
.text:0000000000001D3D
.text:0000000000001D3D loc_1D3D:                               ; CODE XREF: main+463↓j
.text:0000000000001D3D                 lea     rsi, aCannotGetEffec ; "cannot get effective UID"
.text:0000000000001D44                 mov     edx, 5          ; category
.text:0000000000001D49                 xor     edi, edi        ; domainname
.text:0000000000001D4B                 call    _dcgettext
.text:0000000000001D50                 mov     esi, [rbx]      ; errnum
.text:0000000000001D52                 mov     rdx, rax        ; format
.text:0000000000001D55                 mov     edi, 1          ; status
.text:0000000000001D5A                 xor     eax, eax
.text:0000000000001D5C                 call    _error
.text:0000000000001D61
.text:0000000000001D61 loc_1D61:                               ; CODE XREF: main+2B8↑j
.text:0000000000001D61                 cmp     cs:use_real, 0
.text:0000000000001D68                 jz      short loc_1D16
.text:0000000000001D6A                 call    ___errno_location
.text:0000000000001D6F                 mov     dword ptr [rax], 0
.text:0000000000001D75                 mov     rbx, rax
.text:0000000000001D78                 call    _getuid
.text:0000000000001D7D                 mov     cs:ruid, eax
.text:0000000000001D83                 add     eax, 1
.text:0000000000001D86                 jnz     loc_1CB4
.text:0000000000001D8C
.text:0000000000001D8C loc_1D8C:                               ; CODE XREF: main+482↓j
.text:0000000000001D8C                                         ; main+4F0↓j
.text:0000000000001D8C                 cmp     dword ptr [rbx], 0
.text:0000000000001D8F                 jnz     loc_1EF1
.text:0000000000001D95
.text:0000000000001D95 loc_1D95:                               ; CODE XREF: main+4EA↓j
.text:0000000000001D95                 test    r12b, r12b
.text:0000000000001D98                 jz      loc_1C73
.text:0000000000001D9E                 jmp     loc_1CB4
.text:0000000000001DA3 ; ---------------------------------------------------------------------------
.text:0000000000001DA3
.text:0000000000001DA3 loc_1DA3:                               ; CODE XREF: main+31E↑j
.text:0000000000001DA3                 cmp     dword ptr [rbx], 0
.text:0000000000001DA6                 jz      loc_1CB4
.text:0000000000001DAC                 lea     rsi, aCannotGetRealG ; "cannot get real GID"
.text:0000000000001DB3                 mov     edx, 5          ; category
.text:0000000000001DB8                 xor     edi, edi        ; domainname
.text:0000000000001DBA                 call    _dcgettext
.text:0000000000001DBF                 mov     esi, [rbx]      ; errnum
.text:0000000000001DC1                 mov     rdx, rax        ; format
.text:0000000000001DC4                 mov     edi, 1          ; status
.text:0000000000001DC9                 xor     eax, eax
.text:0000000000001DCB                 call    _error
.text:0000000000001DD0
.text:0000000000001DD0 loc_1DD0:                               ; CODE XREF: main+2CC↑j
.text:0000000000001DD0                 mov     dword ptr [rax], 0
.text:0000000000001DD6                 call    _geteuid
.text:0000000000001DDB                 mov     cs:euid, eax
.text:0000000000001DE1                 add     eax, 1
.text:0000000000001DE4                 jnz     loc_1C62
.text:0000000000001DEA                 cmp     dword ptr [rbx], 0
.text:0000000000001DED                 jz      loc_1C62
.text:0000000000001DF3                 jmp     loc_1D3D
.text:0000000000001DF8 ; ---------------------------------------------------------------------------
.text:0000000000001DF8
.text:0000000000001DF8 loc_1DF8:                               ; CODE XREF: main+2DD↑j
.text:0000000000001DF8                 mov     dword ptr [rax], 0
.text:0000000000001DFE                 call    _getuid
.text:0000000000001E03                 mov     cs:ruid, eax
.text:0000000000001E09                 add     eax, 1
.text:0000000000001E0C                 jnz     loc_1C73
.text:0000000000001E12                 jmp     loc_1D8C
.text:0000000000001E17 ; ---------------------------------------------------------------------------
.text:0000000000001E17
.text:0000000000001E17 loc_1E17:                               ; CODE XREF: main+133↑j
.text:0000000000001E17                 cmp     eax, 5Ah ; 'Z'
.text:0000000000001E1A                 jnz     short loc_1E40
.text:0000000000001E1C                 lea     rsi, aContextZWorksO ; "--context (-Z) works only on an SELinux"...
.text:0000000000001E23                 mov     edx, 5          ; category
.text:0000000000001E28                 xor     edi, edi        ; domainname
.text:0000000000001E2A                 call    _dcgettext
.text:0000000000001E2F                 xor     esi, esi        ; errnum
.text:0000000000001E31                 mov     rdx, rax        ; format
.text:0000000000001E34                 mov     edi, 1          ; status
.text:0000000000001E39                 xor     eax, eax
.text:0000000000001E3B                 call    _error
.text:0000000000001E40
.text:0000000000001E40 loc_1E40:                               ; CODE XREF: main+9E↑j
.text:0000000000001E40                                         ; main+C2↑j ...
.text:0000000000001E40                 mov     edi, 1          ; status
.text:0000000000001E45                 call    usage
.text:0000000000001E4A ; ---------------------------------------------------------------------------
.text:0000000000001E4A
.text:0000000000001E4A loc_1E4A:                               ; CODE XREF: main+B5↑j
.text:0000000000001E4A                 xor     edi, edi        ; status
.text:0000000000001E4C                 call    usage
.text:0000000000001E51 ; ---------------------------------------------------------------------------
.text:0000000000001E51
.text:0000000000001E51 loc_1E51:                               ; CODE XREF: main+3A7↑j
.text:0000000000001E51                 cmp     cs:use_real, 0
.text:0000000000001E58                 jz      loc_1CB4
.text:0000000000001E5E                 call    ___errno_location
.text:0000000000001E63                 mov     dword ptr [rax], 0
.text:0000000000001E69                 mov     rbx, rax
.text:0000000000001E6C                 call    _getuid
.text:0000000000001E71                 mov     cs:ruid, eax
.text:0000000000001E77                 add     eax, 1
.text:0000000000001E7A                 jnz     loc_1D95
.text:0000000000001E80                 jmp     loc_1D8C
.text:0000000000001E85 ; ---------------------------------------------------------------------------
.text:0000000000001E85
.text:0000000000001E85 loc_1E85:                               ; CODE XREF: main+1A7↑j
.text:0000000000001E85                 lea     rsi, aCannotPrintOnl ; "cannot print \"only\" of more than one "...
.text:0000000000001E8C                 mov     edx, 5          ; category
.text:0000000000001E91                 xor     edi, edi        ; domainname
.text:0000000000001E93                 call    _dcgettext
.text:0000000000001E98                 xor     esi, esi        ; errnum
.text:0000000000001E9A                 mov     rdx, rax        ; format
.text:0000000000001E9D                 mov     edi, 1          ; status
.text:0000000000001EA2                 xor     eax, eax
.text:0000000000001EA4                 call    _error
.text:0000000000001EA9
.text:0000000000001EA9 loc_1EA9:                               ; CODE XREF: main+362↑j
.text:0000000000001EA9                 lea     rsi, aOptionZeroNotP ; "option --zero not permitted in default "...
.text:0000000000001EB0                 mov     edx, 5          ; category
.text:0000000000001EB5                 xor     edi, edi        ; domainname
.text:0000000000001EB7                 call    _dcgettext
.text:0000000000001EBC                 xor     esi, esi        ; errnum
.text:0000000000001EBE                 mov     rdx, rax        ; format
.text:0000000000001EC1                 mov     edi, 1          ; status
.text:0000000000001EC6                 xor     eax, eax
.text:0000000000001EC8                 call    _error
.text:0000000000001ECD
.text:0000000000001ECD loc_1ECD:                               ; CODE XREF: main+348↑j
.text:0000000000001ECD                                         ; main+355↑j
.text:0000000000001ECD                 lea     rsi, aCannotPrintOnl_0 ; "cannot print only names or real IDs in "...
.text:0000000000001ED4                 mov     edx, 5          ; category
.text:0000000000001ED9                 xor     edi, edi        ; domainname
.text:0000000000001EDB                 call    _dcgettext
.text:0000000000001EE0                 xor     esi, esi        ; errnum
.text:0000000000001EE2                 mov     rdx, rax        ; format
.text:0000000000001EE5                 mov     edi, 1          ; status
.text:0000000000001EEA                 xor     eax, eax
.text:0000000000001EEC                 call    _error
.text:0000000000001EF1
.text:0000000000001EF1 loc_1EF1:                               ; CODE XREF: main+3FF↑j
.text:0000000000001EF1                 lea     rsi, aCannotGetRealU ; "cannot get real UID"
.text:0000000000001EF8                 mov     edx, 5          ; category
.text:0000000000001EFD                 xor     edi, edi        ; domainname
.text:0000000000001EFF                 call    _dcgettext
.text:0000000000001F04                 mov     esi, [rbx]      ; errnum
.text:0000000000001F06                 mov     rdx, rax        ; format
.text:0000000000001F09                 mov     edi, 1          ; status
.text:0000000000001F0E                 xor     eax, eax
.text:0000000000001F10                 call    _error
.text:0000000000001F15
.text:0000000000001F15 loc_1F15:                               ; CODE XREF: main+304↑j
.text:0000000000001F15                 lea     rsi, aCannotGetEffec_0 ; "cannot get effective GID"
.text:0000000000001F1C                 mov     edx, 5          ; category
.text:0000000000001F21                 xor     edi, edi        ; domainname
.text:0000000000001F23                 call    _dcgettext
.text:0000000000001F28                 mov     esi, [rbx]      ; errnum
.text:0000000000001F2A                 mov     rdx, rax        ; format
.text:0000000000001F2D                 mov     edi, 1          ; status
.text:0000000000001F32                 xor     eax, eax
.text:0000000000001F34                 call    _error
.text:0000000000001F34 ; } // starts at 1990
.text:0000000000001F39                 nop     dword ptr [rax+00000000h]
.text:0000000000001F39 main            endp ; sp-analysis failed
.text:0000000000001F39
.text:0000000000001F40
.text:0000000000001F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F40
.text:0000000000001F40 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001F40
.text:0000000000001F40 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001F40                 public start
.text:0000000000001F40 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001F40 ; __unwind {
.text:0000000000001F40                 xor     ebp, ebp
.text:0000000000001F42                 mov     r9, rdx         ; rtld_fini
.text:0000000000001F45                 pop     rsi             ; argc
.text:0000000000001F46                 mov     rdx, rsp        ; ubp_av
.text:0000000000001F49                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001F4D                 push    rax
.text:0000000000001F4E                 push    rsp             ; stack_end
.text:0000000000001F4F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001F56                 lea     rcx, __libc_csu_init ; init
.text:0000000000001F5D                 lea     rdi, main       ; main
.text:0000000000001F64                 call    cs:__libc_start_main_ptr
.text:0000000000001F6A                 hlt
.text:0000000000001F6A ; } // starts at 1F40
.text:0000000000001F6A start           endp
.text:0000000000001F6A
.text:0000000000001F6A ; ---------------------------------------------------------------------------
.text:0000000000001F6B                 align 10h
.text:0000000000001F70
.text:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F70
.text:0000000000001F70 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001F70
.text:0000000000001F70 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2023↓p
.text:0000000000001F70                 lea     rdi, __bss_start
.text:0000000000001F77                 push    rbp
.text:0000000000001F78                 lea     rax, __bss_start
.text:0000000000001F7F                 cmp     rax, rdi
.text:0000000000001F82                 mov     rbp, rsp
.text:0000000000001F85                 jz      short loc_1FA0
.text:0000000000001F87                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001F8E                 test    rax, rax
.text:0000000000001F91                 jz      short loc_1FA0
.text:0000000000001F93                 pop     rbp
.text:0000000000001F94                 jmp     rax
.text:0000000000001F94 ; ---------------------------------------------------------------------------
.text:0000000000001F96                 align 20h
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001FA0                                         ; deregister_tm_clones+21↑j
.text:0000000000001FA0                 pop     rbp
.text:0000000000001FA1                 retn
.text:0000000000001FA1 deregister_tm_clones endp
.text:0000000000001FA1
.text:0000000000001FA1 ; ---------------------------------------------------------------------------
.text:0000000000001FA2                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FB0
.text:0000000000001FB0 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001FB0
.text:0000000000001FB0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001FB0                 lea     rdi, __bss_start
.text:0000000000001FB7                 lea     rsi, __bss_start
.text:0000000000001FBE                 push    rbp
.text:0000000000001FBF                 sub     rsi, rdi
.text:0000000000001FC2                 mov     rbp, rsp
.text:0000000000001FC5                 sar     rsi, 3
.text:0000000000001FC9                 mov     rax, rsi
.text:0000000000001FCC                 shr     rax, 3Fh
.text:0000000000001FD0                 add     rsi, rax
.text:0000000000001FD3                 sar     rsi, 1
.text:0000000000001FD6                 jz      short loc_1FF0
.text:0000000000001FD8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001FDF                 test    rax, rax
.text:0000000000001FE2                 jz      short loc_1FF0
.text:0000000000001FE4                 pop     rbp
.text:0000000000001FE5                 jmp     rax
.text:0000000000001FE5 ; ---------------------------------------------------------------------------
.text:0000000000001FE7                 align 10h
.text:0000000000001FF0
.text:0000000000001FF0 loc_1FF0:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001FF0                                         ; register_tm_clones+32↑j
.text:0000000000001FF0                 pop     rbp
.text:0000000000001FF1                 retn
.text:0000000000001FF1 register_tm_clones endp
.text:0000000000001FF1
.text:0000000000001FF1 ; ---------------------------------------------------------------------------
.text:0000000000001FF2                 align 20h
.text:0000000000002000
.text:0000000000002000 ; =============== S U B R O U T I N E =======================================
.text:0000000000002000
.text:0000000000002000 ; Attributes: info_from_lumina
.text:0000000000002000
.text:0000000000002000 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002000                 cmp     cs:completed_7697, 0
.text:0000000000002007                 jnz     short locret_2038
.text:0000000000002009                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002011                 push    rbp
.text:0000000000002012                 mov     rbp, rsp
.text:0000000000002015                 jz      short loc_2023
.text:0000000000002017                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000201E                 call    __cxa_finalize
.text:0000000000002023
.text:0000000000002023 loc_2023:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002023                 call    deregister_tm_clones
.text:0000000000002028                 mov     cs:completed_7697, 1
.text:000000000000202F                 pop     rbp
.text:0000000000002030                 retn
.text:0000000000002030 ; ---------------------------------------------------------------------------
.text:0000000000002031                 align 8
.text:0000000000002038
.text:0000000000002038 locret_2038:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002038                 rep retn
.text:0000000000002038 __do_global_dtors_aux endp
.text:0000000000002038
.text:0000000000002038 ; ---------------------------------------------------------------------------
.text:000000000000203A                 align 20h
.text:0000000000002040
.text:0000000000002040 ; =============== S U B R O U T I N E =======================================
.text:0000000000002040
.text:0000000000002040 ; Attributes: bp-based frame
.text:0000000000002040
.text:0000000000002040 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002040                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002040                 push    rbp
.text:0000000000002041                 mov     rbp, rsp
.text:0000000000002044                 pop     rbp
.text:0000000000002045                 jmp     register_tm_clones
.text:0000000000002045 frame_dummy     endp
.text:0000000000002045
.text:0000000000002045 ; ---------------------------------------------------------------------------
.text:000000000000204A                 align 10h
.text:0000000000002050
.text:0000000000002050 ; =============== S U B R O U T I N E =======================================
.text:0000000000002050
.text:0000000000002050
.text:0000000000002050 print_stuff     proc near               ; CODE XREF: main+2A3↑p
.text:0000000000002050                                         ; main+326↑p
.text:0000000000002050
.text:0000000000002050 ptr             = qword ptr -38h
.text:0000000000002050 var_30          = qword ptr -30h
.text:0000000000002050
.text:0000000000002050 ; __unwind {
.text:0000000000002050                 push    r14
.text:0000000000002052                 push    r13
.text:0000000000002054                 push    r12
.text:0000000000002056                 push    rbp
.text:0000000000002057                 push    rbx
.text:0000000000002058                 sub     rsp, 10h
.text:000000000000205C                 mov     rax, fs:28h
.text:0000000000002065                 mov     [rsp+38h+var_30], rax
.text:000000000000206A                 xor     eax, eax
.text:000000000000206C                 cmp     cs:just_user, 0
.text:0000000000002073                 jz      loc_2128
.text:0000000000002079                 cmp     cs:use_real, 0
.text:0000000000002080                 mov     ebx, cs:euid
.text:0000000000002086                 jz      short loc_208E
.text:0000000000002088                 mov     ebx, cs:ruid
.text:000000000000208E
.text:000000000000208E loc_208E:                               ; CODE XREF: print_stuff+36↑j
.text:000000000000208E                 cmp     cs:use_name, 0
.text:0000000000002095                 jnz     loc_2160
.text:000000000000209B
.text:000000000000209B loc_209B:                               ; CODE XREF: print_stuff+46D↓j
.text:000000000000209B                 lea     rsi, buf_7126
.text:00000000000020A2                 mov     rdi, rbx
.text:00000000000020A5                 call    umaxtostr
.text:00000000000020AA                 mov     rdi, rax        ; s
.text:00000000000020AD
.text:00000000000020AD loc_20AD:                               ; CODE XREF: print_stuff+123↓j
.text:00000000000020AD                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000020B4                 call    _fputs_unlocked
.text:00000000000020B9
.text:00000000000020B9 loc_20B9:                               ; CODE XREF: print_stuff+108↓j
.text:00000000000020B9                                         ; print_stuff+177↓j ...
.text:00000000000020B9                 cmp     cs:opt_zero, 0
.text:00000000000020C0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000020C7                 mov     rax, [rdi+28h]
.text:00000000000020CB                 mov     rdx, [rdi+30h]
.text:00000000000020CF                 jz      loc_21D0
.text:00000000000020D5                 cmp     cs:just_group_list, 0
.text:00000000000020DC                 jz      short loc_20EB
.text:00000000000020DE                 cmp     cs:multiple_users, 0
.text:00000000000020E5                 jnz     loc_21E0
.text:00000000000020EB
.text:00000000000020EB loc_20EB:                               ; CODE XREF: print_stuff+8C↑j
.text:00000000000020EB                 xor     esi, esi        ; int
.text:00000000000020ED
.text:00000000000020ED loc_20ED:                               ; CODE XREF: print_stuff+185↓j
.text:00000000000020ED                 cmp     rax, rdx
.text:00000000000020F0                 jnb     loc_2348
.text:00000000000020F6                 lea     rdx, [rax+1]
.text:00000000000020FA                 mov     [rdi+28h], rdx
.text:00000000000020FE                 mov     [rax], sil
.text:0000000000002101
.text:0000000000002101 loc_2101:                               ; CODE XREF: print_stuff+1C4↓j
.text:0000000000002101                                         ; print_stuff+2FD↓j ...
.text:0000000000002101                 mov     rax, [rsp+38h+var_30]
.text:0000000000002106                 xor     rax, fs:28h
.text:000000000000210F                 jnz     loc_25DC
.text:0000000000002115                 add     rsp, 10h
.text:0000000000002119                 pop     rbx
.text:000000000000211A                 pop     rbp
.text:000000000000211B                 pop     r12
.text:000000000000211D                 pop     r13
.text:000000000000211F                 pop     r14
.text:0000000000002121                 retn
.text:0000000000002121 ; ---------------------------------------------------------------------------
.text:0000000000002122                 align 8
.text:0000000000002128
.text:0000000000002128 loc_2128:                               ; CODE XREF: print_stuff+23↑j
.text:0000000000002128                 cmp     cs:just_group, 0
.text:000000000000212F                 jz      short loc_2180
.text:0000000000002131                 cmp     cs:use_real, 0
.text:0000000000002138                 movzx   esi, cs:use_name
.text:000000000000213F                 mov     edi, cs:egid
.text:0000000000002145                 jz      short loc_214D
.text:0000000000002147                 mov     edi, cs:rgid    ; gid
.text:000000000000214D
.text:000000000000214D loc_214D:                               ; CODE XREF: print_stuff+F5↑j
.text:000000000000214D                 call    print_group
.text:0000000000002152                 and     cs:ok, al
.text:0000000000002158                 jmp     loc_20B9
.text:0000000000002158 ; ---------------------------------------------------------------------------
.text:000000000000215D                 align 20h
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: print_stuff+45↑j
.text:0000000000002160                 mov     edi, ebx        ; uid
.text:0000000000002162                 call    _getpwuid
.text:0000000000002167                 test    rax, rax
.text:000000000000216A                 jz      loc_2480
.text:0000000000002170                 mov     rdi, [rax]
.text:0000000000002173                 jmp     loc_20AD
.text:0000000000002173 ; ---------------------------------------------------------------------------
.text:0000000000002178                 align 20h
.text:0000000000002180
.text:0000000000002180 loc_2180:                               ; CODE XREF: print_stuff+DF↑j
.text:0000000000002180                 cmp     cs:just_group_list, 0
.text:0000000000002187                 mov     rbx, rdi
.text:000000000000218A                 mov     esi, cs:ruid
.text:0000000000002190                 jz      loc_2220
.text:0000000000002196                 xor     r9d, r9d
.text:0000000000002199                 cmp     cs:opt_zero, 0
.text:00000000000021A0                 movzx   r8d, cs:use_name
.text:00000000000021A8                 mov     ecx, cs:egid
.text:00000000000021AE                 mov     edx, cs:rgid
.text:00000000000021B4                 setz    r9b
.text:00000000000021B8                 shl     r9d, 5
.text:00000000000021BC                 call    print_group_list
.text:00000000000021C1                 and     cs:ok, al
.text:00000000000021C7                 jmp     loc_20B9
.text:00000000000021C7 ; ---------------------------------------------------------------------------
.text:00000000000021CC                 align 10h
.text:00000000000021D0
.text:00000000000021D0 loc_21D0:                               ; CODE XREF: print_stuff+7F↑j
.text:00000000000021D0                 mov     esi, 0Ah
.text:00000000000021D5                 jmp     loc_20ED
.text:00000000000021D5 ; ---------------------------------------------------------------------------
.text:00000000000021DA                 align 20h
.text:00000000000021E0
.text:00000000000021E0 loc_21E0:                               ; CODE XREF: print_stuff+95↑j
.text:00000000000021E0                 cmp     rax, rdx
.text:00000000000021E3                 jnb     loc_25D0
.text:00000000000021E9                 lea     rdx, [rax+1]
.text:00000000000021ED                 mov     [rdi+28h], rdx
.text:00000000000021F1                 mov     byte ptr [rax], 0
.text:00000000000021F4
.text:00000000000021F4 loc_21F4:                               ; CODE XREF: print_stuff+587↓j
.text:00000000000021F4                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000021FB                 mov     rax, [rdi+28h]
.text:00000000000021FF                 cmp     rax, [rdi+30h]
.text:0000000000002203                 jnb     loc_25C0
.text:0000000000002209                 lea     rdx, [rax+1]
.text:000000000000220D                 mov     [rdi+28h], rdx
.text:0000000000002211                 mov     byte ptr [rax], 0
.text:0000000000002214                 jmp     loc_2101
.text:0000000000002214 ; ---------------------------------------------------------------------------
.text:0000000000002219                 align 20h
.text:0000000000002220
.text:0000000000002220 loc_2220:                               ; CODE XREF: print_stuff+140↑j
.text:0000000000002220                 mov     edi, esi
.text:0000000000002222                 lea     rsi, buf_7126
.text:0000000000002229                 call    umaxtostr
.text:000000000000222E                 lea     rsi, aUidS      ; "uid=%s"
.text:0000000000002235                 mov     rbp, rax
.text:0000000000002238                 xor     edi, edi        ; domainname
.text:000000000000223A                 mov     edx, 5          ; category
.text:000000000000223F                 call    _dcgettext
.text:0000000000002244                 mov     rdx, rbp
.text:0000000000002247                 mov     rsi, rax
.text:000000000000224A                 mov     edi, 1
.text:000000000000224F                 xor     eax, eax
.text:0000000000002251                 call    ___printf_chk
.text:0000000000002256                 mov     edi, cs:ruid    ; uid
.text:000000000000225C                 call    _getpwuid
.text:0000000000002261                 test    rax, rax
.text:0000000000002264                 mov     rbp, rax
.text:0000000000002267                 jz      short loc_227F
.text:0000000000002269                 mov     rdx, [rax]
.text:000000000000226C                 lea     rsi, aS         ; "(%s)"
.text:0000000000002273                 mov     edi, 1
.text:0000000000002278                 xor     eax, eax
.text:000000000000227A                 call    ___printf_chk
.text:000000000000227F
.text:000000000000227F loc_227F:                               ; CODE XREF: print_stuff+217↑j
.text:000000000000227F                 mov     edi, cs:rgid
.text:0000000000002285                 lea     rsi, buf_7122
.text:000000000000228C                 call    umaxtostr
.text:0000000000002291                 lea     rsi, aGidS      ; " gid=%s"
.text:0000000000002298                 xor     edi, edi        ; domainname
.text:000000000000229A                 mov     r12, rax
.text:000000000000229D                 mov     edx, 5          ; category
.text:00000000000022A2                 call    _dcgettext
.text:00000000000022A7                 mov     rdx, r12
.text:00000000000022AA                 mov     rsi, rax
.text:00000000000022AD                 mov     edi, 1
.text:00000000000022B2                 xor     eax, eax
.text:00000000000022B4                 call    ___printf_chk
.text:00000000000022B9                 mov     edi, cs:rgid    ; gid
.text:00000000000022BF                 call    _getgrgid
.text:00000000000022C4                 test    rax, rax
.text:00000000000022C7                 jz      short loc_22DF
.text:00000000000022C9                 mov     rdx, [rax]
.text:00000000000022CC                 lea     rsi, aS         ; "(%s)"
.text:00000000000022D3                 mov     edi, 1
.text:00000000000022D8                 xor     eax, eax
.text:00000000000022DA                 call    ___printf_chk
.text:00000000000022DF
.text:00000000000022DF loc_22DF:                               ; CODE XREF: print_stuff+277↑j
.text:00000000000022DF                 mov     edi, cs:euid
.text:00000000000022E5                 cmp     edi, cs:ruid
.text:00000000000022EB                 jnz     loc_23C0
.text:00000000000022F1
.text:00000000000022F1 loc_22F1:                               ; CODE XREF: print_stuff+3B5↓j
.text:00000000000022F1                                         ; print_stuff+3D1↓j
.text:00000000000022F1                 mov     edi, cs:egid
.text:00000000000022F7                 cmp     edi, cs:rgid
.text:00000000000022FD                 jnz     short loc_2358
.text:00000000000022FF
.text:00000000000022FF loc_22FF:                               ; CODE XREF: print_stuff+34A↓j
.text:00000000000022FF                                         ; print_stuff+366↓j
.text:00000000000022FF                 test    rbx, rbx
.text:0000000000002302                 mov     rdx, rsp
.text:0000000000002305                 jz      loc_2430
.text:000000000000230B                 test    rbp, rbp
.text:000000000000230E                 mov     esi, 0FFFFFFFFh
.text:0000000000002313                 jz      short loc_2318
.text:0000000000002315                 mov     esi, [rbp+14h]
.text:0000000000002318
.text:0000000000002318 loc_2318:                               ; CODE XREF: print_stuff+2C3↑j
.text:0000000000002318                 mov     rdi, rbx
.text:000000000000231B                 call    xgetgroups
.text:0000000000002320                 test    eax, eax
.text:0000000000002322                 mov     r12d, eax
.text:0000000000002325                 js      loc_2580
.text:000000000000232B
.text:000000000000232B loc_232B:                               ; CODE XREF: print_stuff+3F2↓j
.text:000000000000232B                 test    r12d, r12d
.text:000000000000232E                 jnz     loc_24C8
.text:0000000000002334
.text:0000000000002334 loc_2334:                               ; CODE XREF: print_stuff+50D↓j
.text:0000000000002334                 mov     rdi, [rsp+38h+ptr] ; ptr
.text:0000000000002338                 call    _free
.text:000000000000233D                 jmp     loc_20B9
.text:000000000000233D ; ---------------------------------------------------------------------------
.text:0000000000002342                 align 8
.text:0000000000002348
.text:0000000000002348 loc_2348:                               ; CODE XREF: print_stuff+A0↑j
.text:0000000000002348                 call    ___overflow
.text:000000000000234D                 jmp     loc_2101
.text:000000000000234D ; ---------------------------------------------------------------------------
.text:0000000000002352                 align 8
.text:0000000000002358
.text:0000000000002358 loc_2358:                               ; CODE XREF: print_stuff+2AD↑j
.text:0000000000002358                 lea     rsi, buf_7122
.text:000000000000235F                 call    umaxtostr
.text:0000000000002364                 lea     rsi, aEgidS     ; " egid=%s"
.text:000000000000236B                 xor     edi, edi        ; domainname
.text:000000000000236D                 mov     r12, rax
.text:0000000000002370                 mov     edx, 5          ; category
.text:0000000000002375                 call    _dcgettext
.text:000000000000237A                 mov     rdx, r12
.text:000000000000237D                 mov     rsi, rax
.text:0000000000002380                 mov     edi, 1
.text:0000000000002385                 xor     eax, eax
.text:0000000000002387                 call    ___printf_chk
.text:000000000000238C                 mov     edi, cs:egid    ; gid
.text:0000000000002392                 call    _getgrgid
.text:0000000000002397                 test    rax, rax
.text:000000000000239A                 jz      loc_22FF
.text:00000000000023A0                 mov     rdx, [rax]
.text:00000000000023A3                 lea     rsi, aS         ; "(%s)"
.text:00000000000023AA                 mov     edi, 1
.text:00000000000023AF                 xor     eax, eax
.text:00000000000023B1                 call    ___printf_chk
.text:00000000000023B6                 jmp     loc_22FF
.text:00000000000023B6 ; ---------------------------------------------------------------------------
.text:00000000000023BB                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: print_stuff+29B↑j
.text:00000000000023C0                 lea     rsi, buf_7126
.text:00000000000023C7                 call    umaxtostr
.text:00000000000023CC                 lea     rsi, aE         ; " e"
.text:00000000000023D3                 mov     rbp, rax
.text:00000000000023D6                 xor     edi, edi        ; domainname
.text:00000000000023D8                 mov     edx, 5          ; category
.text:00000000000023DD                 call    _dcgettext
.text:00000000000023E2                 mov     rdx, rbp
.text:00000000000023E5                 mov     rsi, rax
.text:00000000000023E8                 mov     edi, 1
.text:00000000000023ED                 xor     eax, eax
.text:00000000000023EF                 call    ___printf_chk
.text:00000000000023F4                 mov     edi, cs:euid    ; uid
.text:00000000000023FA                 call    _getpwuid
.text:00000000000023FF                 test    rax, rax
.text:0000000000002402                 mov     rbp, rax
.text:0000000000002405                 jz      loc_22F1
.text:000000000000240B                 mov     rdx, [rax]
.text:000000000000240E                 lea     rsi, aS         ; "(%s)"
.text:0000000000002415                 mov     edi, 1
.text:000000000000241A                 xor     eax, eax
.text:000000000000241C                 call    ___printf_chk
.text:0000000000002421                 jmp     loc_22F1
.text:0000000000002421 ; ---------------------------------------------------------------------------
.text:0000000000002426                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: print_stuff+2B5↑j
.text:0000000000002430                 mov     esi, cs:egid
.text:0000000000002436                 xor     edi, edi
.text:0000000000002438                 call    xgetgroups
.text:000000000000243D                 test    eax, eax
.text:000000000000243F                 mov     r12d, eax
.text:0000000000002442                 jns     loc_232B
.text:0000000000002448                 lea     rsi, aFailedToGetGro ; "failed to get groups for the current pr"...
.text:000000000000244F                 mov     edx, 5          ; category
.text:0000000000002454                 xor     edi, edi        ; domainname
.text:0000000000002456                 call    _dcgettext
.text:000000000000245B                 mov     rbx, rax
.text:000000000000245E                 call    ___errno_location
.text:0000000000002463                 mov     esi, [rax]      ; errnum
.text:0000000000002465                 mov     rdx, rbx        ; format
.text:0000000000002468                 xor     edi, edi        ; status
.text:000000000000246A                 xor     eax, eax
.text:000000000000246C                 call    _error
.text:0000000000002471
.text:0000000000002471 loc_2471:                               ; CODE XREF: print_stuff+567↓j
.text:0000000000002471                 mov     cs:ok, 0
.text:0000000000002478                 jmp     loc_20B9
.text:0000000000002478 ; ---------------------------------------------------------------------------
.text:000000000000247D                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: print_stuff+11A↑j
.text:0000000000002480                 lea     rsi, buf_7126
.text:0000000000002487                 mov     rdi, rbx
.text:000000000000248A                 call    umaxtostr
.text:000000000000248F                 lea     rsi, aCannotFindName ; "cannot find name for user ID %s"
.text:0000000000002496                 mov     rbp, rax
.text:0000000000002499                 mov     edx, 5          ; category
.text:000000000000249E                 xor     edi, edi        ; domainname
.text:00000000000024A0                 call    _dcgettext
.text:00000000000024A5                 mov     rcx, rbp
.text:00000000000024A8                 mov     rdx, rax        ; format
.text:00000000000024AB                 xor     esi, esi        ; errnum
.text:00000000000024AD                 xor     edi, edi        ; status
.text:00000000000024AF                 xor     eax, eax
.text:00000000000024B1                 call    _error
.text:00000000000024B6                 mov     cs:ok, 0
.text:00000000000024BD                 jmp     loc_209B
.text:00000000000024BD ; ---------------------------------------------------------------------------
.text:00000000000024C2                 align 8
.text:00000000000024C8
.text:00000000000024C8 loc_24C8:                               ; CODE XREF: print_stuff+2DE↑j
.text:00000000000024C8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024CF                 lea     rsi, aGroups    ; " groups="
.text:00000000000024D6                 mov     edx, 5          ; category
.text:00000000000024DB                 xor     edi, edi        ; domainname
.text:00000000000024DD                 xor     ebp, ebp
.text:00000000000024DF                 lea     r13, buf_7122
.text:00000000000024E6                 call    _dcgettext
.text:00000000000024EB                 mov     rsi, rbx        ; stream
.text:00000000000024EE                 mov     rdi, rax        ; s
.text:00000000000024F1                 xor     ebx, ebx
.text:00000000000024F3                 call    _fputs_unlocked
.text:00000000000024F8                 jmp     short loc_250F
.text:00000000000024F8 ; ---------------------------------------------------------------------------
.text:00000000000024FA                 align 20h
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: print_stuff+522↓j
.text:0000000000002500                 lea     rdx, [rax+1]
.text:0000000000002504                 mov     [rdi+28h], rdx
.text:0000000000002508                 mov     byte ptr [rax], 2Ch ; ','
.text:000000000000250B
.text:000000000000250B loc_250B:                               ; CODE XREF: print_stuff+52E↓j
.text:000000000000250B                 add     rbx, 4
.text:000000000000250F
.text:000000000000250F loc_250F:                               ; CODE XREF: print_stuff+4A8↑j
.text:000000000000250F                 mov     rax, [rsp+38h+ptr]
.text:0000000000002513                 mov     r14, cs:stdout@@GLIBC_2_2_5
.text:000000000000251A                 mov     rsi, r13
.text:000000000000251D                 mov     edi, [rax+rbx]
.text:0000000000002520                 call    umaxtostr
.text:0000000000002525                 mov     rsi, r14        ; stream
.text:0000000000002528                 mov     rdi, rax        ; s
.text:000000000000252B                 call    _fputs_unlocked
.text:0000000000002530                 mov     rax, [rsp+38h+ptr]
.text:0000000000002534                 mov     edi, [rax+rbx]  ; gid
.text:0000000000002537                 call    _getgrgid
.text:000000000000253C                 test    rax, rax
.text:000000000000253F                 jz      short loc_2557
.text:0000000000002541                 mov     rdx, [rax]
.text:0000000000002544                 lea     rsi, aS         ; "(%s)"
.text:000000000000254B                 mov     edi, 1
.text:0000000000002550                 xor     eax, eax
.text:0000000000002552                 call    ___printf_chk
.text:0000000000002557
.text:0000000000002557 loc_2557:                               ; CODE XREF: print_stuff+4EF↑j
.text:0000000000002557                 add     ebp, 1
.text:000000000000255A                 cmp     ebp, r12d
.text:000000000000255D                 jz      loc_2334
.text:0000000000002563                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:000000000000256A                 mov     rax, [rdi+28h]
.text:000000000000256E                 cmp     rax, [rdi+30h]
.text:0000000000002572                 jb      short loc_2500
.text:0000000000002574                 mov     esi, 2Ch ; ','  ; int
.text:0000000000002579                 call    ___overflow
.text:000000000000257E                 jmp     short loc_250B
.text:0000000000002580 ; ---------------------------------------------------------------------------
.text:0000000000002580
.text:0000000000002580 loc_2580:                               ; CODE XREF: print_stuff+2D5↑j
.text:0000000000002580                 mov     rdi, rbx
.text:0000000000002583                 call    quote
.text:0000000000002588                 lea     rsi, aFailedToGetGro_0 ; "failed to get groups for user %s"
.text:000000000000258F                 xor     edi, edi        ; domainname
.text:0000000000002591                 mov     edx, 5          ; category
.text:0000000000002596                 mov     rbp, rax
.text:0000000000002599                 call    _dcgettext
.text:000000000000259E                 mov     rbx, rax
.text:00000000000025A1                 call    ___errno_location
.text:00000000000025A6                 mov     esi, [rax]      ; errnum
.text:00000000000025A8                 mov     rcx, rbp
.text:00000000000025AB                 mov     rdx, rbx        ; format
.text:00000000000025AE                 xor     edi, edi        ; status
.text:00000000000025B0                 xor     eax, eax
.text:00000000000025B2                 call    _error
.text:00000000000025B7                 jmp     loc_2471
.text:00000000000025B7 ; ---------------------------------------------------------------------------
.text:00000000000025BC                 align 20h
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: print_stuff+1B3↑j
.text:00000000000025C0                 xor     esi, esi        ; int
.text:00000000000025C2                 call    ___overflow
.text:00000000000025C7                 jmp     loc_2101
.text:00000000000025C7 ; ---------------------------------------------------------------------------
.text:00000000000025CC                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: print_stuff+193↑j
.text:00000000000025D0                 xor     esi, esi        ; int
.text:00000000000025D2                 call    ___overflow
.text:00000000000025D7                 jmp     loc_21F4
.text:00000000000025DC ; ---------------------------------------------------------------------------
.text:00000000000025DC
.text:00000000000025DC loc_25DC:                               ; CODE XREF: print_stuff+BF↑j
.text:00000000000025DC                 call    ___stack_chk_fail
.text:00000000000025DC ; } // starts at 2050
.text:00000000000025DC print_stuff     endp
.text:00000000000025DC
.text:00000000000025DC ; ---------------------------------------------------------------------------
.text:00000000000025E1                 align 10h
.text:00000000000025F0
.text:00000000000025F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000025F0
.text:00000000000025F0 ; Attributes: noreturn
.text:00000000000025F0
.text:00000000000025F0 ; void __fastcall __noreturn usage(int status)
.text:00000000000025F0                 public usage
.text:00000000000025F0 usage           proc near               ; CODE XREF: main+4B5↑p
.text:00000000000025F0                                         ; main+4BC↑p
.text:00000000000025F0
.text:00000000000025F0 var_A8          = qword ptr -0A8h
.text:00000000000025F0 var_A0          = qword ptr -0A0h
.text:00000000000025F0 var_98          = qword ptr -98h
.text:00000000000025F0 var_90          = qword ptr -90h
.text:00000000000025F0 var_88          = qword ptr -88h
.text:00000000000025F0 var_80          = qword ptr -80h
.text:00000000000025F0 var_78          = qword ptr -78h
.text:00000000000025F0 var_70          = qword ptr -70h
.text:00000000000025F0 var_68          = qword ptr -68h
.text:00000000000025F0 var_60          = qword ptr -60h
.text:00000000000025F0 var_58          = qword ptr -58h
.text:00000000000025F0 var_50          = qword ptr -50h
.text:00000000000025F0 var_48          = qword ptr -48h
.text:00000000000025F0 var_40          = qword ptr -40h
.text:00000000000025F0 var_30          = qword ptr -30h
.text:00000000000025F0
.text:00000000000025F0 ; __unwind {
.text:00000000000025F0                 push    r13
.text:00000000000025F2                 push    r12
.text:00000000000025F4                 mov     edx, 5          ; category
.text:00000000000025F9                 push    rbp
.text:00000000000025FA                 push    rbx
.text:00000000000025FB                 mov     ebp, edi
.text:00000000000025FD                 sub     rsp, 88h
.text:0000000000002604                 mov     rbx, cs:program_name
.text:000000000000260B                 mov     rax, fs:28h
.text:0000000000002614                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002619                 xor     eax, eax
.text:000000000000261B                 test    edi, edi
.text:000000000000261D                 jz      short loc_264D
.text:000000000000261F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002626                 xor     edi, edi        ; domainname
.text:0000000000002628                 call    _dcgettext
.text:000000000000262D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002634                 mov     rdx, rax
.text:0000000000002637                 mov     rcx, rbx
.text:000000000000263A                 mov     esi, 1
.text:000000000000263F                 xor     eax, eax
.text:0000000000002641                 call    ___fprintf_chk
.text:0000000000002646
.text:0000000000002646 loc_2646:                               ; CODE XREF: usage+2C6↓j
.text:0000000000002646                 mov     edi, ebp        ; status
.text:0000000000002648                 call    _exit
.text:000000000000264D ; ---------------------------------------------------------------------------
.text:000000000000264D
.text:000000000000264D loc_264D:                               ; CODE XREF: usage+2D↑j
.text:000000000000264D                 lea     rsi, aUsageSOptionUs ; "Usage: %s [OPTION]... [USER]...\n"
.text:0000000000002654                 xor     edi, edi        ; domainname
.text:0000000000002656                 call    _dcgettext
.text:000000000000265B                 mov     rdx, rbx
.text:000000000000265E                 mov     rsi, rax
.text:0000000000002661                 mov     edi, 1
.text:0000000000002666                 xor     eax, eax
.text:0000000000002668                 call    ___printf_chk
.text:000000000000266D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002674                 lea     rsi, aPrintUserAndGr ; "Print user and group information for ea"...
.text:000000000000267B                 mov     edx, 5          ; category
.text:0000000000002680                 xor     edi, edi        ; domainname
.text:0000000000002682                 call    _dcgettext
.text:0000000000002687                 mov     rsi, rbx        ; stream
.text:000000000000268A                 mov     rdi, rax        ; s
.text:000000000000268D                 call    _fputs_unlocked
.text:0000000000002692                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002699                 lea     rsi, aAIgnoreForComp ; "  -a             ignore, for compatibil"...
.text:00000000000026A0                 mov     edx, 5          ; category
.text:00000000000026A5                 xor     edi, edi        ; domainname
.text:00000000000026A7                 call    _dcgettext
.text:00000000000026AC                 mov     rsi, rbx        ; stream
.text:00000000000026AF                 mov     rdi, rax        ; s
.text:00000000000026B2                 call    _fputs_unlocked
.text:00000000000026B7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000026BE                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000026C5                 mov     edx, 5          ; category
.text:00000000000026CA                 xor     edi, edi        ; domainname
.text:00000000000026CC                 call    _dcgettext
.text:00000000000026D1                 mov     rsi, rbx        ; stream
.text:00000000000026D4                 mov     rdi, rax        ; s
.text:00000000000026D7                 call    _fputs_unlocked
.text:00000000000026DC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000026E3                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000026EA                 mov     edx, 5          ; category
.text:00000000000026EF                 xor     edi, edi        ; domainname
.text:00000000000026F1                 call    _dcgettext
.text:00000000000026F6                 mov     rsi, rbx        ; stream
.text:00000000000026F9                 mov     rdi, rax        ; s
.text:00000000000026FC                 call    _fputs_unlocked
.text:0000000000002701                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002708                 lea     rsi, aWithoutAnyOpti ; "\nWithout any OPTION, print some useful"...
.text:000000000000270F                 mov     edx, 5          ; category
.text:0000000000002714                 xor     edi, edi        ; domainname
.text:0000000000002716                 call    _dcgettext
.text:000000000000271B                 mov     rsi, rbx        ; stream
.text:000000000000271E                 mov     rdi, rax        ; s
.text:0000000000002721                 lea     rbx, aId        ; "id"
.text:0000000000002728                 call    _fputs_unlocked
.text:000000000000272D                 lea     rax, asc_67C1   ; "["
.text:0000000000002734                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000273B                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002744                 mov     [rsp+0A8h+var_40], 0
.text:000000000000274D                 mov     rdx, rsp
.text:0000000000002750                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002754                 lea     rax, aTestInvocation ; "test invocation"
.text:000000000000275B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000002760                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002767                 mov     [rsp+0A8h+var_A0], rax
.text:000000000000276C                 lea     rax, domainname ; "coreutils"
.text:0000000000002773                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002778                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000277F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000002784                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000278B                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000002790                 mov     [rsp+0A8h+var_90], rax
.text:0000000000002795                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000279C                 mov     [rsp+0A8h+var_88], rax
.text:00000000000027A1                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000027A8                 mov     [rsp+0A8h+var_80], rax
.text:00000000000027AD                 mov     [rsp+0A8h+var_70], rax
.text:00000000000027B2                 mov     [rsp+0A8h+var_60], rax
.text:00000000000027B7                 mov     [rsp+0A8h+var_50], rax
.text:00000000000027BC                 nop     dword ptr [rax+00h]
.text:00000000000027C0
.text:00000000000027C0 loc_27C0:                               ; CODE XREF: usage+1ED↓j
.text:00000000000027C0                 add     rdx, 10h
.text:00000000000027C4                 mov     rdi, [rdx]
.text:00000000000027C7                 test    rdi, rdi
.text:00000000000027CA                 jz      short loc_27DF
.text:00000000000027CC                 mov     ecx, 3
.text:00000000000027D1                 mov     rsi, rbx
.text:00000000000027D4                 repe cmpsb
.text:00000000000027D6                 setnbe  al
.text:00000000000027D9                 sbb     al, 0
.text:00000000000027DB                 test    al, al
.text:00000000000027DD                 jnz     short loc_27C0
.text:00000000000027DF
.text:00000000000027DF loc_27DF:                               ; CODE XREF: usage+1DA↑j
.text:00000000000027DF                 mov     r12, [rdx+8]
.text:00000000000027E3                 xor     edi, edi        ; domainname
.text:00000000000027E5                 mov     edx, 5          ; category
.text:00000000000027EA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000027F1                 test    r12, r12
.text:00000000000027F4                 jz      loc_28BB
.text:00000000000027FA                 call    _dcgettext
.text:00000000000027FF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002806                 lea     rdx, unk_6837
.text:000000000000280D                 mov     rsi, rax
.text:0000000000002810                 mov     edi, 1
.text:0000000000002815                 xor     eax, eax
.text:0000000000002817                 call    ___printf_chk
.text:000000000000281C                 xor     esi, esi        ; locale
.text:000000000000281E                 mov     edi, 5          ; category
.text:0000000000002823                 call    _setlocale
.text:0000000000002828                 test    rax, rax
.text:000000000000282B                 jz      short loc_2849
.text:000000000000282D                 lea     rsi, s2         ; "en_"
.text:0000000000002834                 mov     edx, 3          ; n
.text:0000000000002839                 mov     rdi, rax        ; s1
.text:000000000000283C                 call    _strncmp
.text:0000000000002841                 test    eax, eax
.text:0000000000002843                 jnz     loc_2950
.text:0000000000002849
.text:0000000000002849 loc_2849:                               ; CODE XREF: usage+23B↑j
.text:0000000000002849                                         ; usage+385↓j
.text:0000000000002849                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000002850                 xor     edi, edi        ; domainname
.text:0000000000002852                 mov     edx, 5          ; category
.text:0000000000002857                 call    _dcgettext
.text:000000000000285C                 lea     rcx, aId        ; "id"
.text:0000000000002863                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000286A                 mov     rsi, rax
.text:000000000000286D                 mov     edi, 1
.text:0000000000002872                 xor     eax, eax
.text:0000000000002874                 call    ___printf_chk
.text:0000000000002879                 cmp     r12, rbx
.text:000000000000287C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002883                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000288A                 cmovz   rbx, rcx
.text:000000000000288E
.text:000000000000288E loc_288E:                               ; CODE XREF: usage+354↓j
.text:000000000000288E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000002895                 xor     edi, edi        ; domainname
.text:0000000000002897                 mov     edx, 5          ; category
.text:000000000000289C                 call    _dcgettext
.text:00000000000028A1                 mov     rcx, rbx
.text:00000000000028A4                 mov     rsi, rax
.text:00000000000028A7                 mov     rdx, r12
.text:00000000000028AA                 mov     edi, 1
.text:00000000000028AF                 xor     eax, eax
.text:00000000000028B1                 call    ___printf_chk
.text:00000000000028B6                 jmp     loc_2646
.text:00000000000028BB ; ---------------------------------------------------------------------------
.text:00000000000028BB
.text:00000000000028BB loc_28BB:                               ; CODE XREF: usage+204↑j
.text:00000000000028BB                 call    _dcgettext
.text:00000000000028C0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000028C7                 lea     rdx, unk_6837
.text:00000000000028CE                 mov     rsi, rax
.text:00000000000028D1                 mov     edi, 1
.text:00000000000028D6                 xor     eax, eax
.text:00000000000028D8                 call    ___printf_chk
.text:00000000000028DD                 xor     esi, esi        ; locale
.text:00000000000028DF                 mov     edi, 5          ; category
.text:00000000000028E4                 call    _setlocale
.text:00000000000028E9                 test    rax, rax
.text:00000000000028EC                 jz      short loc_2906
.text:00000000000028EE                 lea     rsi, s2         ; "en_"
.text:00000000000028F5                 mov     edx, 3          ; n
.text:00000000000028FA                 mov     rdi, rax        ; s1
.text:00000000000028FD                 call    _strncmp
.text:0000000000002902                 test    eax, eax
.text:0000000000002904                 jnz     short loc_2949
.text:0000000000002906
.text:0000000000002906 loc_2906:                               ; CODE XREF: usage+2FC↑j
.text:0000000000002906                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000290D                 mov     edx, 5          ; category
.text:0000000000002912                 xor     edi, edi        ; domainname
.text:0000000000002914                 lea     r12, aId        ; "id"
.text:000000000000291B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002922                 call    _dcgettext
.text:0000000000002927                 lea     rcx, aId        ; "id"
.text:000000000000292E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002935                 mov     rsi, rax
.text:0000000000002938                 mov     edi, 1
.text:000000000000293D                 xor     eax, eax
.text:000000000000293F                 call    ___printf_chk
.text:0000000000002944                 jmp     loc_288E
.text:0000000000002949 ; ---------------------------------------------------------------------------
.text:0000000000002949
.text:0000000000002949 loc_2949:                               ; CODE XREF: usage+314↑j
.text:0000000000002949                 lea     r12, aId        ; "id"
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: usage+253↑j
.text:0000000000002950                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000002957                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000295E                 xor     edi, edi        ; domainname
.text:0000000000002960                 mov     edx, 5          ; category
.text:0000000000002965                 call    _dcgettext
.text:000000000000296A                 mov     rsi, r13        ; stream
.text:000000000000296D                 mov     rdi, rax        ; s
.text:0000000000002970                 call    _fputs_unlocked
.text:0000000000002975                 jmp     loc_2849
.text:0000000000002975 ; } // starts at 25F0
.text:0000000000002975 usage           endp
.text:0000000000002975
.text:0000000000002975 ; ---------------------------------------------------------------------------
.text:000000000000297A                 align 20h
.text:0000000000002980
.text:0000000000002980 ; =============== S U B R O U T I N E =======================================
.text:0000000000002980
.text:0000000000002980
.text:0000000000002980 ; __int64 __fastcall print_group(__gid_t gid)
.text:0000000000002980                 public print_group
.text:0000000000002980 print_group     proc near               ; CODE XREF: print_stuff:loc_214D↑p
.text:0000000000002980                                         ; print_group_list+61↓p ...
.text:0000000000002980 ; __unwind {
.text:0000000000002980                 push    rbp
.text:0000000000002981                 push    rbx
.text:0000000000002982                 mov     ebp, edi
.text:0000000000002984                 mov     ebx, 1
.text:0000000000002989                 sub     rsp, 8
.text:000000000000298D                 test    sil, sil
.text:0000000000002990                 jz      short loc_29D0
.text:0000000000002992                 mov     edi, ebp        ; gid
.text:0000000000002994                 mov     ebx, esi
.text:0000000000002996                 call    _getgrgid
.text:000000000000299B                 test    rax, rax
.text:000000000000299E                 jz      short loc_29A8
.text:00000000000029A0                 mov     rdi, [rax]
.text:00000000000029A3                 jmp     short loc_29E2
.text:00000000000029A3 ; ---------------------------------------------------------------------------
.text:00000000000029A5                 align 8
.text:00000000000029A8
.text:00000000000029A8 loc_29A8:                               ; CODE XREF: print_group+1E↑j
.text:00000000000029A8                 lea     rsi, aCannotFindName_0 ; "cannot find name for group ID %lu"
.text:00000000000029AF                 mov     edx, 5          ; category
.text:00000000000029B4                 xor     edi, edi        ; domainname
.text:00000000000029B6                 xor     ebx, ebx
.text:00000000000029B8                 call    _dcgettext
.text:00000000000029BD                 mov     rcx, rbp
.text:00000000000029C0                 mov     rdx, rax        ; format
.text:00000000000029C3                 xor     esi, esi        ; errnum
.text:00000000000029C5                 xor     edi, edi        ; status
.text:00000000000029C7                 xor     eax, eax
.text:00000000000029C9                 call    _error
.text:00000000000029CE                 xchg    ax, ax
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: print_group+10↑j
.text:00000000000029D0                 lea     rsi, buf_6964
.text:00000000000029D7                 mov     rdi, rbp
.text:00000000000029DA                 call    umaxtostr
.text:00000000000029DF                 mov     rdi, rax        ; s
.text:00000000000029E2
.text:00000000000029E2 loc_29E2:                               ; CODE XREF: print_group+23↑j
.text:00000000000029E2                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000029E9                 call    _fputs_unlocked
.text:00000000000029EE                 add     rsp, 8
.text:00000000000029F2                 mov     eax, ebx
.text:00000000000029F4                 pop     rbx
.text:00000000000029F5                 pop     rbp
.text:00000000000029F6                 retn
.text:00000000000029F6 ; } // starts at 2980
.text:00000000000029F6 print_group     endp
.text:00000000000029F6
.text:00000000000029F6 ; ---------------------------------------------------------------------------
.text:00000000000029F7                 align 20h
.text:0000000000002A00
.text:0000000000002A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002A00
.text:0000000000002A00
.text:0000000000002A00                 public print_group_list
.text:0000000000002A00 print_group_list proc near              ; CODE XREF: print_stuff+16C↑p
.text:0000000000002A00
.text:0000000000002A00 var_51          = byte ptr -51h
.text:0000000000002A00 var_50          = dword ptr -50h
.text:0000000000002A00 var_4C          = dword ptr -4Ch
.text:0000000000002A00 ptr             = qword ptr -48h
.text:0000000000002A00 var_40          = qword ptr -40h
.text:0000000000002A00
.text:0000000000002A00 ; __unwind {
.text:0000000000002A00                 push    r15
.text:0000000000002A02                 push    r14
.text:0000000000002A04                 mov     r14, rdi
.text:0000000000002A07                 push    r13
.text:0000000000002A09                 push    r12
.text:0000000000002A0B                 mov     r13d, r8d
.text:0000000000002A0E                 push    rbp
.text:0000000000002A0F                 push    rbx
.text:0000000000002A10                 mov     ebp, edx
.text:0000000000002A12                 mov     r12d, ecx
.text:0000000000002A15                 sub     rsp, 28h
.text:0000000000002A19                 mov     rax, fs:28h
.text:0000000000002A22                 mov     [rsp+58h+var_40], rax
.text:0000000000002A27                 xor     eax, eax
.text:0000000000002A29                 test    rdi, rdi
.text:0000000000002A2C                 mov     [rsp+58h+var_51], r9b
.text:0000000000002A31                 jz      loc_2B80
.text:0000000000002A37                 mov     edi, esi        ; uid
.text:0000000000002A39                 mov     [rsp+58h+var_4C], r9d
.text:0000000000002A3E                 call    _getpwuid
.text:0000000000002A43                 mov     r9d, [rsp+58h+var_4C]
.text:0000000000002A48                 test    rax, rax
.text:0000000000002A4B                 mov     r15, rax
.text:0000000000002A4E                 setnz   byte ptr [rsp+58h+var_50]
.text:0000000000002A53
.text:0000000000002A53 loc_2A53:                               ; CODE XREF: print_group_list+188↓j
.text:0000000000002A53                 movzx   r13d, r13b
.text:0000000000002A57                 mov     edi, ebp        ; gid
.text:0000000000002A59                 mov     [rsp+58h+var_4C], r9d
.text:0000000000002A5E                 mov     esi, r13d
.text:0000000000002A61                 call    print_group
.text:0000000000002A66                 mov     ebx, eax
.text:0000000000002A68                 test    al, al
.text:0000000000002A6A                 movzx   eax, byte ptr [rsp+58h+var_50]
.text:0000000000002A6F                 cmovz   eax, ebx
.text:0000000000002A72                 cmp     ebp, r12d
.text:0000000000002A75                 mov     ebx, eax
.text:0000000000002A77                 jz      short loc_2AB3
.text:0000000000002A79                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002A80                 mov     r9d, [rsp+58h+var_4C]
.text:0000000000002A85                 mov     rax, [rdi+28h]
.text:0000000000002A89                 cmp     rax, [rdi+30h]
.text:0000000000002A8D                 jnb     loc_2C10
.text:0000000000002A93                 lea     rdx, [rax+1]
.text:0000000000002A97                 mov     [rdi+28h], rdx
.text:0000000000002A9B                 mov     [rax], r9b
.text:0000000000002A9E
.text:0000000000002A9E loc_2A9E:                               ; CODE XREF: print_group_list+219↓j
.text:0000000000002A9E                 mov     esi, r13d
.text:0000000000002AA1                 mov     edi, r12d       ; gid
.text:0000000000002AA4                 call    print_group
.text:0000000000002AA9                 test    al, al
.text:0000000000002AAB                 mov     eax, 0
.text:0000000000002AB0                 cmovz   ebx, eax
.text:0000000000002AB3
.text:0000000000002AB3 loc_2AB3:                               ; CODE XREF: print_group_list+77↑j
.text:0000000000002AB3                 test    r15, r15
.text:0000000000002AB6                 mov     esi, r12d
.text:0000000000002AB9                 jz      short loc_2ABF
.text:0000000000002ABB                 mov     esi, [r15+14h]
.text:0000000000002ABF
.text:0000000000002ABF loc_2ABF:                               ; CODE XREF: print_group_list+B9↑j
.text:0000000000002ABF                 lea     rdx, [rsp+58h+ptr]
.text:0000000000002AC4                 mov     rdi, r14
.text:0000000000002AC7                 call    xgetgroups
.text:0000000000002ACC                 test    eax, eax
.text:0000000000002ACE                 js      loc_2B90
.text:0000000000002AD4                 mov     rdi, [rsp+58h+ptr]
.text:0000000000002AD9                 jz      short loc_2B4E
.text:0000000000002ADB                 sub     eax, 1
.text:0000000000002ADE                 xor     r15d, r15d
.text:0000000000002AE1                 lea     r14, ds:4[rax*4]
.text:0000000000002AE9                 movzx   eax, [rsp+58h+var_51]
.text:0000000000002AEE                 mov     [rsp+58h+var_50], eax
.text:0000000000002AF2                 nop     word ptr [rax+rax+00h]
.text:0000000000002AF8
.text:0000000000002AF8 loc_2AF8:                               ; CODE XREF: print_group_list+14C↓j
.text:0000000000002AF8                 mov     eax, [rdi+r15]
.text:0000000000002AFC                 cmp     eax, ebp
.text:0000000000002AFE                 jz      short loc_2B45
.text:0000000000002B00                 cmp     eax, r12d
.text:0000000000002B03                 jz      short loc_2B45
.text:0000000000002B05                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002B0C                 mov     rax, [rdi+28h]
.text:0000000000002B10                 cmp     rax, [rdi+30h]
.text:0000000000002B14                 jnb     loc_2BD0
.text:0000000000002B1A                 lea     rcx, [rax+1]
.text:0000000000002B1E                 mov     [rdi+28h], rcx
.text:0000000000002B22                 movzx   ecx, [rsp+58h+var_51]
.text:0000000000002B27                 mov     [rax], cl
.text:0000000000002B29
.text:0000000000002B29 loc_2B29:                               ; CODE XREF: print_group_list+1D9↓j
.text:0000000000002B29                 mov     rax, [rsp+58h+ptr]
.text:0000000000002B2E                 mov     esi, r13d
.text:0000000000002B31                 mov     edi, [rax+r15]  ; gid
.text:0000000000002B35                 call    print_group
.text:0000000000002B3A                 test    al, al
.text:0000000000002B3C                 mov     rdi, [rsp+58h+ptr] ; ptr
.text:0000000000002B41                 jnz     short loc_2B45
.text:0000000000002B43                 xor     ebx, ebx
.text:0000000000002B45
.text:0000000000002B45 loc_2B45:                               ; CODE XREF: print_group_list+FE↑j
.text:0000000000002B45                                         ; print_group_list+103↑j ...
.text:0000000000002B45                 add     r15, 4
.text:0000000000002B49                 cmp     r14, r15
.text:0000000000002B4C                 jnz     short loc_2AF8
.text:0000000000002B4E
.text:0000000000002B4E loc_2B4E:                               ; CODE XREF: print_group_list+D9↑j
.text:0000000000002B4E                 call    _free
.text:0000000000002B53
.text:0000000000002B53 loc_2B53:                               ; CODE XREF: print_group_list+1CE↓j
.text:0000000000002B53                                         ; print_group_list+203↓j
.text:0000000000002B53                 mov     rdx, [rsp+58h+var_40]
.text:0000000000002B58                 xor     rdx, fs:28h
.text:0000000000002B61                 mov     eax, ebx
.text:0000000000002B63                 jnz     loc_2C1E
.text:0000000000002B69                 add     rsp, 28h
.text:0000000000002B6D                 pop     rbx
.text:0000000000002B6E                 pop     rbp
.text:0000000000002B6F                 pop     r12
.text:0000000000002B71                 pop     r13
.text:0000000000002B73                 pop     r14
.text:0000000000002B75                 pop     r15
.text:0000000000002B77                 retn
.text:0000000000002B77 ; ---------------------------------------------------------------------------
.text:0000000000002B78                 align 20h
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: print_group_list+31↑j
.text:0000000000002B80                 xor     r15d, r15d
.text:0000000000002B83                 mov     byte ptr [rsp+58h+var_50], 1
.text:0000000000002B88                 jmp     loc_2A53
.text:0000000000002B88 ; ---------------------------------------------------------------------------
.text:0000000000002B8D                 align 10h
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: print_group_list+CE↑j
.text:0000000000002B90                 call    ___errno_location
.text:0000000000002B95                 test    r14, r14
.text:0000000000002B98                 mov     rbx, rax
.text:0000000000002B9B                 jz      short loc_2BE0
.text:0000000000002B9D                 mov     rdi, r14
.text:0000000000002BA0                 call    quote
.text:0000000000002BA5                 lea     rsi, aFailedToGetGro_0 ; "failed to get groups for user %s"
.text:0000000000002BAC                 mov     edx, 5          ; category
.text:0000000000002BB1                 xor     edi, edi        ; domainname
.text:0000000000002BB3                 mov     rbp, rax
.text:0000000000002BB6                 call    _dcgettext
.text:0000000000002BBB                 mov     esi, [rbx]      ; errnum
.text:0000000000002BBD                 mov     rdx, rax        ; format
.text:0000000000002BC0                 mov     rcx, rbp
.text:0000000000002BC3                 xor     edi, edi        ; status
.text:0000000000002BC5                 xor     eax, eax
.text:0000000000002BC7                 xor     ebx, ebx
.text:0000000000002BC9                 call    _error
.text:0000000000002BCE                 jmp     short loc_2B53
.text:0000000000002BD0 ; ---------------------------------------------------------------------------
.text:0000000000002BD0
.text:0000000000002BD0 loc_2BD0:                               ; CODE XREF: print_group_list+114↑j
.text:0000000000002BD0                 mov     esi, [rsp+58h+var_50] ; int
.text:0000000000002BD4                 call    ___overflow
.text:0000000000002BD9                 jmp     loc_2B29
.text:0000000000002BD9 ; ---------------------------------------------------------------------------
.text:0000000000002BDE                 align 20h
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: print_group_list+19B↑j
.text:0000000000002BE0                 lea     rsi, aFailedToGetGro ; "failed to get groups for the current pr"...
.text:0000000000002BE7                 mov     edx, 5          ; category
.text:0000000000002BEC                 xor     edi, edi        ; domainname
.text:0000000000002BEE                 call    _dcgettext
.text:0000000000002BF3                 mov     esi, [rbx]      ; errnum
.text:0000000000002BF5                 mov     rdx, rax        ; format
.text:0000000000002BF8                 xor     edi, edi        ; status
.text:0000000000002BFA                 xor     eax, eax
.text:0000000000002BFC                 xor     ebx, ebx
.text:0000000000002BFE                 call    _error
.text:0000000000002C03                 jmp     loc_2B53
.text:0000000000002C03 ; ---------------------------------------------------------------------------
.text:0000000000002C08                 align 10h
.text:0000000000002C10
.text:0000000000002C10 loc_2C10:                               ; CODE XREF: print_group_list+8D↑j
.text:0000000000002C10                 movzx   esi, r9b        ; int
.text:0000000000002C14                 call    ___overflow
.text:0000000000002C19                 jmp     loc_2A9E
.text:0000000000002C1E ; ---------------------------------------------------------------------------
.text:0000000000002C1E
.text:0000000000002C1E loc_2C1E:                               ; CODE XREF: print_group_list+163↑j
.text:0000000000002C1E                 call    ___stack_chk_fail
.text:0000000000002C1E ; } // starts at 2A00
.text:0000000000002C1E print_group_list endp
.text:0000000000002C1E
.text:0000000000002C1E ; ---------------------------------------------------------------------------
.text:0000000000002C23                 align 10h
.text:0000000000002C30
.text:0000000000002C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C30
.text:0000000000002C30
.text:0000000000002C30                 public close_stdout_set_file_name
.text:0000000000002C30 close_stdout_set_file_name proc near
.text:0000000000002C30 ; __unwind {
.text:0000000000002C30                 mov     cs:file_name, rdi
.text:0000000000002C37                 retn
.text:0000000000002C37 ; } // starts at 2C30
.text:0000000000002C37 close_stdout_set_file_name endp
.text:0000000000002C37
.text:0000000000002C37 ; ---------------------------------------------------------------------------
.text:0000000000002C38                 align 20h
.text:0000000000002C40
.text:0000000000002C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C40
.text:0000000000002C40
.text:0000000000002C40                 public close_stdout_set_ignore_EPIPE
.text:0000000000002C40 close_stdout_set_ignore_EPIPE proc near
.text:0000000000002C40 ; __unwind {
.text:0000000000002C40                 mov     cs:ignore_EPIPE, dil
.text:0000000000002C47                 retn
.text:0000000000002C47 ; } // starts at 2C40
.text:0000000000002C47 close_stdout_set_ignore_EPIPE endp
.text:0000000000002C47
.text:0000000000002C47 ; ---------------------------------------------------------------------------
.text:0000000000002C48                 align 10h
.text:0000000000002C50
.text:0000000000002C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C50
.text:0000000000002C50 ; Attributes: info_from_lumina
.text:0000000000002C50
.text:0000000000002C50 ; void __cdecl close_stdout()
.text:0000000000002C50                 public close_stdout
.text:0000000000002C50 close_stdout    proc near               ; DATA XREF: main+4C↑o
.text:0000000000002C50 ; __unwind {
.text:0000000000002C50                 push    rbp
.text:0000000000002C51                 push    rbx
.text:0000000000002C52                 sub     rsp, 8
.text:0000000000002C56                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002C5D                 call    close_stream
.text:0000000000002C62                 test    eax, eax
.text:0000000000002C64                 jz      short loc_2C7C
.text:0000000000002C66                 call    ___errno_location
.text:0000000000002C6B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002C72                 mov     rbx, rax
.text:0000000000002C75                 jz      short loc_2C93
.text:0000000000002C77                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000002C7A                 jnz     short loc_2C93
.text:0000000000002C7C
.text:0000000000002C7C loc_2C7C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000002C7C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002C83                 call    close_stream
.text:0000000000002C88                 test    eax, eax
.text:0000000000002C8A                 jnz     short loc_2CD2
.text:0000000000002C8C                 add     rsp, 8
.text:0000000000002C90                 pop     rbx
.text:0000000000002C91                 pop     rbp
.text:0000000000002C92                 retn
.text:0000000000002C93 ; ---------------------------------------------------------------------------
.text:0000000000002C93
.text:0000000000002C93 loc_2C93:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002C93                                         ; close_stdout+2A↑j
.text:0000000000002C93                 lea     rsi, aWriteError ; "write error"
.text:0000000000002C9A                 xor     edi, edi        ; domainname
.text:0000000000002C9C                 mov     edx, 5          ; category
.text:0000000000002CA1                 call    _dcgettext
.text:0000000000002CA6                 mov     rdi, cs:file_name
.text:0000000000002CAD                 mov     rbp, rax
.text:0000000000002CB0                 test    rdi, rdi
.text:0000000000002CB3                 jz      short loc_2CDD
.text:0000000000002CB5                 call    quotearg_colon
.text:0000000000002CBA                 mov     esi, [rbx]      ; errnum
.text:0000000000002CBC                 lea     rdx, format     ; "%s: %s"
.text:0000000000002CC3                 mov     rcx, rax
.text:0000000000002CC6                 mov     r8, rbp
.text:0000000000002CC9                 xor     edi, edi        ; status
.text:0000000000002CCB                 xor     eax, eax
.text:0000000000002CCD                 call    _error
.text:0000000000002CD2
.text:0000000000002CD2 loc_2CD2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002CD2                                         ; close_stdout+A2↓j
.text:0000000000002CD2                 mov     edi, cs:exit_failure ; status
.text:0000000000002CD8                 call    __exit
.text:0000000000002CDD ; ---------------------------------------------------------------------------
.text:0000000000002CDD
.text:0000000000002CDD loc_2CDD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000002CDD                 mov     esi, [rbx]      ; errnum
.text:0000000000002CDF                 lea     rdx, format+4   ; format
.text:0000000000002CE6                 mov     rcx, rax
.text:0000000000002CE9                 xor     edi, edi        ; status
.text:0000000000002CEB                 xor     eax, eax
.text:0000000000002CED                 call    _error
.text:0000000000002CF2                 jmp     short loc_2CD2
.text:0000000000002CF2 ; } // starts at 2C50
.text:0000000000002CF2 close_stdout    endp
.text:0000000000002CF2
.text:0000000000002CF2 ; ---------------------------------------------------------------------------
.text:0000000000002CF4                 align 20h
.text:0000000000002D00
.text:0000000000002D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D00
.text:0000000000002D00 ; Attributes: info_from_lumina
.text:0000000000002D00
.text:0000000000002D00 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000002D00                 public umaxtostr
.text:0000000000002D00 umaxtostr       proc near               ; CODE XREF: print_stuff+55↑p
.text:0000000000002D00                                         ; print_stuff+1D9↑p ...
.text:0000000000002D00 ; __unwind {
.text:0000000000002D00                 lea     rcx, [rsi+14h]
.text:0000000000002D04                 mov     byte ptr [rsi+14h], 0
.text:0000000000002D08                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000002D12                 nop     word ptr [rax+rax+00h]
.text:0000000000002D18
.text:0000000000002D18 loc_2D18:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000002D18                 mov     rax, rdi
.text:0000000000002D1B                 sub     rcx, 1
.text:0000000000002D1F                 mul     rsi
.text:0000000000002D22                 shr     rdx, 3
.text:0000000000002D26                 lea     rax, [rdx+rdx*4]
.text:0000000000002D2A                 add     rax, rax
.text:0000000000002D2D                 sub     rdi, rax
.text:0000000000002D30                 add     edi, 30h ; '0'
.text:0000000000002D33                 test    rdx, rdx
.text:0000000000002D36                 mov     [rcx], dil
.text:0000000000002D39                 mov     rdi, rdx
.text:0000000000002D3C                 jnz     short loc_2D18
.text:0000000000002D3E                 mov     rax, rcx
.text:0000000000002D41                 retn
.text:0000000000002D41 ; } // starts at 2D00
.text:0000000000002D41 umaxtostr       endp
.text:0000000000002D41
.text:0000000000002D41 ; ---------------------------------------------------------------------------
.text:0000000000002D42                 align 10h
.text:0000000000002D50
.text:0000000000002D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000002D50
.text:0000000000002D50
.text:0000000000002D50                 public set_program_name
.text:0000000000002D50 set_program_name proc near              ; CODE XREF: main+17↑p
.text:0000000000002D50 ; __unwind {
.text:0000000000002D50                 test    rdi, rdi
.text:0000000000002D53                 push    rbx
.text:0000000000002D54                 jz      short loc_2DCD
.text:0000000000002D56                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000002D5B                 mov     rbx, rdi
.text:0000000000002D5E                 call    _strrchr
.text:0000000000002D63                 test    rax, rax
.text:0000000000002D66                 jz      short loc_2DBD
.text:0000000000002D68                 lea     r8, [rax+1]
.text:0000000000002D6C                 mov     rdx, r8
.text:0000000000002D6F                 sub     rdx, rbx
.text:0000000000002D72                 cmp     rdx, 6
.text:0000000000002D76                 jle     short loc_2DBD
.text:0000000000002D78                 lea     rsi, [rax-6]
.text:0000000000002D7C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002D83                 mov     ecx, 7
.text:0000000000002D88                 repe cmpsb
.text:0000000000002D8A                 setnbe  dl
.text:0000000000002D8D                 sbb     dl, 0
.text:0000000000002D90                 test    dl, dl
.text:0000000000002D92                 jnz     short loc_2DBD
.text:0000000000002D94                 lea     rdi, aLt        ; "lt-"
.text:0000000000002D9B                 mov     ecx, 3
.text:0000000000002DA0                 mov     rsi, r8
.text:0000000000002DA3                 mov     rbx, r8
.text:0000000000002DA6                 repe cmpsb
.text:0000000000002DA8                 setnbe  dl
.text:0000000000002DAB                 sbb     dl, 0
.text:0000000000002DAE                 test    dl, dl
.text:0000000000002DB0                 jnz     short loc_2DBD
.text:0000000000002DB2                 lea     rbx, [rax+4]
.text:0000000000002DB6                 mov     cs:__bss_start, rbx
.text:0000000000002DBD
.text:0000000000002DBD loc_2DBD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000002DBD                                         ; set_program_name+26↑j ...
.text:0000000000002DBD                 mov     cs:program_name, rbx
.text:0000000000002DC4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000002DCB                 pop     rbx
.text:0000000000002DCC                 retn
.text:0000000000002DCD ; ---------------------------------------------------------------------------
.text:0000000000002DCD
.text:0000000000002DCD loc_2DCD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000002DCD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002DD4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000002DDB                 mov     edx, 37h ; '7'  ; n
.text:0000000000002DE0                 mov     esi, 1          ; size
.text:0000000000002DE5                 call    _fwrite
.text:0000000000002DEA                 call    _abort
.text:0000000000002DEA ; } // starts at 2D50
.text:0000000000002DEA set_program_name endp
.text:0000000000002DEA
.text:0000000000002DEA ; ---------------------------------------------------------------------------
.text:0000000000002DEF                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002DF0
.text:0000000000002DF0 ; Attributes: info_from_lumina
.text:0000000000002DF0
.text:0000000000002DF0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002DF0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002DF0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002DF0 ; __unwind {
.text:0000000000002DF0                 push    rbp
.text:0000000000002DF1                 push    rbx
.text:0000000000002DF2                 mov     rbp, rdi
.text:0000000000002DF5                 mov     ebx, esi
.text:0000000000002DF7                 sub     rsp, 8
.text:0000000000002DFB                 call    locale_charset
.text:0000000000002E00                 movzx   edx, byte ptr [rax]
.text:0000000000002E03                 and     edx, 0FFFFFFDFh
.text:0000000000002E06                 cmp     dl, 55h ; 'U'
.text:0000000000002E09                 jz      short loc_2E80
.text:0000000000002E0B                 cmp     dl, 47h ; 'G'
.text:0000000000002E0E                 jz      short loc_2E30
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002E10                                         ; gettext_quote+50↓j ...
.text:0000000000002E10                 lea     rax, unk_69E3
.text:0000000000002E17                 lea     rdx, asc_69E5   ; "'"
.text:0000000000002E1E                 cmp     ebx, 9
.text:0000000000002E21                 cmovnz  rax, rdx
.text:0000000000002E25                 add     rsp, 8
.text:0000000000002E29                 pop     rbx
.text:0000000000002E2A                 pop     rbp
.text:0000000000002E2B                 retn
.text:0000000000002E2B ; ---------------------------------------------------------------------------
.text:0000000000002E2C                 align 10h
.text:0000000000002E30
.text:0000000000002E30 loc_2E30:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002E30                 movzx   edx, byte ptr [rax+1]
.text:0000000000002E34                 and     edx, 0FFFFFFDFh
.text:0000000000002E37                 cmp     dl, 42h ; 'B'
.text:0000000000002E3A                 jnz     short loc_2E10
.text:0000000000002E3C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002E40                 jnz     short loc_2E10
.text:0000000000002E42                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002E46                 jnz     short loc_2E10
.text:0000000000002E48                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000002E4C                 jnz     short loc_2E10
.text:0000000000002E4E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002E52                 jnz     short loc_2E10
.text:0000000000002E54                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002E58                 jnz     short loc_2E10
.text:0000000000002E5A                 cmp     byte ptr [rax+7], 0
.text:0000000000002E5E                 jnz     short loc_2E10
.text:0000000000002E60                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002E64                 lea     rax, unk_69DC
.text:0000000000002E6B                 lea     rdx, unk_69E0
.text:0000000000002E72                 cmovnz  rax, rdx
.text:0000000000002E76                 add     rsp, 8
.text:0000000000002E7A                 pop     rbx
.text:0000000000002E7B                 pop     rbp
.text:0000000000002E7C                 retn
.text:0000000000002E7C ; ---------------------------------------------------------------------------
.text:0000000000002E7D                 align 20h
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002E80                 movzx   edx, byte ptr [rax+1]
.text:0000000000002E84                 and     edx, 0FFFFFFDFh
.text:0000000000002E87                 cmp     dl, 54h ; 'T'
.text:0000000000002E8A                 jnz     short loc_2E10
.text:0000000000002E8C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002E90                 and     edx, 0FFFFFFDFh
.text:0000000000002E93                 cmp     dl, 46h ; 'F'
.text:0000000000002E96                 jnz     loc_2E10
.text:0000000000002E9C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002EA0                 jnz     loc_2E10
.text:0000000000002EA6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000002EAA                 jnz     loc_2E10
.text:0000000000002EB0                 cmp     byte ptr [rax+5], 0
.text:0000000000002EB4                 jnz     loc_2E10
.text:0000000000002EBA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002EBE                 lea     rax, unk_69D4
.text:0000000000002EC5                 lea     rdx, unk_69D8
.text:0000000000002ECC                 cmovnz  rax, rdx
.text:0000000000002ED0                 add     rsp, 8
.text:0000000000002ED4                 pop     rbx
.text:0000000000002ED5                 pop     rbp
.text:0000000000002ED6                 retn
.text:0000000000002ED6 ; } // starts at 2DF0
.text:0000000000002ED6 gettext_quote   endp
.text:0000000000002ED6
.text:0000000000002ED6 ; ---------------------------------------------------------------------------
.text:0000000000002ED7                 align 20h
.text:0000000000002EE0
.text:0000000000002EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000002EE0
.text:0000000000002EE0 ; Attributes: info_from_lumina
.text:0000000000002EE0
.text:0000000000002EE0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002EE0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002EE0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002EE0
.text:0000000000002EE0 var_E0          = dword ptr -0E0h
.text:0000000000002EE0 var_DB          = byte ptr -0DBh
.text:0000000000002EE0 var_DA          = byte ptr -0DAh
.text:0000000000002EE0 var_D9          = byte ptr -0D9h
.text:0000000000002EE0 s               = qword ptr -0D8h
.text:0000000000002EE0 n               = qword ptr -0D0h
.text:0000000000002EE0 var_C8          = qword ptr -0C8h
.text:0000000000002EE0 ps              = qword ptr -0C0h
.text:0000000000002EE0 var_B8          = qword ptr -0B8h
.text:0000000000002EE0 var_B0          = qword ptr -0B0h
.text:0000000000002EE0 var_A8          = qword ptr -0A8h
.text:0000000000002EE0 s2              = qword ptr -0A0h
.text:0000000000002EE0 var_98          = qword ptr -98h
.text:0000000000002EE0 var_90          = qword ptr -90h
.text:0000000000002EE0 var_88          = qword ptr -88h
.text:0000000000002EE0 var_80          = qword ptr -80h
.text:0000000000002EE0 var_78          = qword ptr -78h
.text:0000000000002EE0 var_70          = dword ptr -70h
.text:0000000000002EE0 var_6C          = byte ptr -6Ch
.text:0000000000002EE0 var_6B          = byte ptr -6Bh
.text:0000000000002EE0 var_6A          = byte ptr -6Ah
.text:0000000000002EE0 var_69          = byte ptr -69h
.text:0000000000002EE0 var_68          = qword ptr -68h
.text:0000000000002EE0 var_60          = qword ptr -60h
.text:0000000000002EE0 wc              = dword ptr -4Ch
.text:0000000000002EE0 var_48          = qword ptr -48h
.text:0000000000002EE0 var_40          = qword ptr -40h
.text:0000000000002EE0 arg_0           = qword ptr  8
.text:0000000000002EE0 arg_8           = qword ptr  10h
.text:0000000000002EE0 arg_10          = qword ptr  18h
.text:0000000000002EE0
.text:0000000000002EE0 ; __unwind {
.text:0000000000002EE0                 push    r15
.text:0000000000002EE2                 push    r14
.text:0000000000002EE4                 mov     r15d, r8d
.text:0000000000002EE7                 push    r13
.text:0000000000002EE9                 push    r12
.text:0000000000002EEB                 mov     r14, rdi
.text:0000000000002EEE                 push    rbp
.text:0000000000002EEF                 push    rbx
.text:0000000000002EF0                 mov     ebx, r9d
.text:0000000000002EF3                 mov     r13, rsi
.text:0000000000002EF6                 mov     rbp, rcx
.text:0000000000002EF9                 and     ebx, 2
.text:0000000000002EFC                 sub     rsp, 0B8h
.text:0000000000002F03                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000002F0B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002F10                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002F15                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000002F1A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000002F1F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002F27                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002F2C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002F34                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002F39                 mov     rax, fs:28h
.text:0000000000002F42                 mov     [rsp+0E8h+var_40], rax
.text:0000000000002F4A                 xor     eax, eax
.text:0000000000002F4C                 call    ___ctype_get_mb_cur_max
.text:0000000000002F51                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002F55                 mov     [rsp+0E8h+var_90], rax
.text:0000000000002F5A                 ja      def_2F71        ; jumptable 00000000000121F1 default case
.text:0000000000002F60                 lea     rcx, jpt_2F71
.text:0000000000002F67                 mov     edx, r15d
.text:0000000000002F6A                 movsxd  rax, ds:(jpt_2F71 - 6A40h)[rcx+rdx*4]
.text:0000000000002F6E                 add     rax, rcx
.text:0000000000002F71                 jmp     rax             ; switch jump
.text:0000000000002F73 ; ---------------------------------------------------------------------------
.text:0000000000002F73
.text:0000000000002F73 loc_2F73:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F73                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002F73                                         ; DATA XREF: ...
.text:0000000000002F73                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002F78                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F7D                 xor     r12d, r12d
.text:0000000000002F80                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F89                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F8E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F93
.text:0000000000002F93 loc_2F93:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002F93                 lea     rax, asc_69E5   ; "'"
.text:0000000000002F9A                 mov     [rsp+0E8h+n], 1
.text:0000000000002FA3                 xor     r15d, r15d
.text:0000000000002FA6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002FAE                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FB3
.text:0000000000002FB3 loc_2FB3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002FB3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002FB3                 xor     r11d, r11d
.text:0000000000002FB6                 mov     rax, rbp
.text:0000000000002FB9                 mov     r8d, r12d
.text:0000000000002FBC                 mov     rbp, r11
.text:0000000000002FBF                 mov     r11, rax
.text:0000000000002FC2                 nop     word ptr [rax+rax+00h]
.text:0000000000002FC8
.text:0000000000002FC8 loc_2FC8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002FC8                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002FC8                 cmp     r11, rbp
.text:0000000000002FCB                 setnz   r12b
.text:0000000000002FCF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002FD3                 jnz     short loc_2FE2
.text:0000000000002FD5                 mov     rax, [rsp+0E8h+s]
.text:0000000000002FDA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000002FDE                 setnz   r12b
.text:0000000000002FE2
.text:0000000000002FE2 loc_2FE2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002FE2                 test    r12b, r12b
.text:0000000000002FE5                 jz      loc_3640
.text:0000000000002FEB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FF0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002FF5                 lea     r9, [rdi+rbp]
.text:0000000000002FF9                 setnz   al
.text:0000000000002FFC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003000                 mov     r10d, eax
.text:0000000000003003                 jz      loc_30B0
.text:0000000000003009                 mov     rax, [rsp+0E8h+n]
.text:000000000000300E                 test    rax, rax
.text:0000000000003011                 jz      loc_3440
.text:0000000000003017                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000301B                 lea     rbx, [rbp+rax+0]
.text:0000000000003020                 jnz     short loc_3050
.text:0000000000003022                 cmp     rax, 1
.text:0000000000003026                 jbe     short loc_3050
.text:0000000000003028                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000302D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000003032                 mov     [rsp+0E8h+ps], r9
.text:0000000000003037                 call    _strlen
.text:000000000000303C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000003042                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000003048                 mov     r11, rax
.text:000000000000304B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000003050
.text:0000000000003050 loc_3050:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000003050                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000003050                 cmp     rbx, r11
.text:0000000000003053                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000003058                 ja      loc_3610
.text:000000000000305E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000003063                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000003068                 mov     rdi, r9         ; s1
.text:000000000000306B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000003070                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000003075                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000307A                 call    _memcmp
.text:000000000000307F                 test    eax, eax
.text:0000000000003081                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000003086                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000308C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000003091                 jnz     loc_3610
.text:0000000000003097                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000309C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000030A2                 jnz     loc_4025
.text:00000000000030A8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000030B0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000030B0                 movzx   ebx, byte ptr [r9]
.text:00000000000030B4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000030B7                 ja      def_30CE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000030BD                 lea     rcx, jpt_30CE
.text:00000000000030C4                 movzx   edx, bl
.text:00000000000030C7                 movsxd  rax, ds:(jpt_30CE - 6A6Ch)[rcx+rdx*4]
.text:00000000000030CB                 add     rax, rcx
.text:00000000000030CE                 jmp     rax             ; switch jump
.text:00000000000030D0 ; ---------------------------------------------------------------------------
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000030D0                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000030D0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000030D3
.text:00000000000030D3 loc_30D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000030D3                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000030D3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000030D7                 setnz   al
.text:00000000000030DA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000030DE                 jnz     short loc_30EC
.text:00000000000030E0                 mov     rax, [rsp+0E8h+s]
.text:00000000000030E5                 cmp     byte ptr [rax+1], 0
.text:00000000000030E9                 setnz   al
.text:00000000000030EC
.text:00000000000030EC loc_30EC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000030EC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000030F1                 setz    dl
.text:00000000000030F4                 test    al, al
.text:00000000000030F6                 jz      loc_3348
.text:00000000000030FC
.text:00000000000030FC loc_30FC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000030FC                 xor     r12d, r12d
.text:00000000000030FF                 xor     eax, eax
.text:0000000000003101                 nop     dword ptr [rax+00000000h]
.text:0000000000003108
.text:0000000000003108 loc_3108:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000003108                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000003108                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000310D                 jnz     loc_3222
.text:0000000000003113                 test    dl, dl
.text:0000000000003115                 jnz     loc_3222
.text:000000000000311B
.text:000000000000311B loc_311B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000311B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000003120                 test    rsi, rsi
.text:0000000000003123                 jz      short loc_3139
.text:0000000000003125                 mov     edx, ebx
.text:0000000000003127                 shr     dl, 5
.text:000000000000312A                 movzx   edx, dl
.text:000000000000312D                 mov     edx, [rsi+rdx*4]
.text:0000000000003130                 bt      edx, ebx
.text:0000000000003133                 jb      loc_3283
.text:0000000000003139
.text:0000000000003139 loc_3139:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000003139                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000003139                 test    r10b, r10b
.text:000000000000313C                 jnz     loc_3283
.text:0000000000003142                 xor     eax, 1
.text:0000000000003145                 add     rbp, 1
.text:0000000000003149                 and     eax, r8d
.text:000000000000314C
.text:000000000000314C loc_314C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000314C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000314C                 test    al, al
.text:000000000000314E                 jz      short loc_3170
.text:0000000000003150                 cmp     r13, r15
.text:0000000000003153                 jbe     short loc_315A
.text:0000000000003155                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000315A
.text:000000000000315A loc_315A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000315A                 lea     rax, [r15+1]
.text:000000000000315E                 cmp     r13, rax
.text:0000000000003161                 jbe     short loc_3169
.text:0000000000003163                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000003169
.text:0000000000003169 loc_3169:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000003169                 add     r15, 2
.text:000000000000316D                 xor     r8d, r8d
.text:0000000000003170
.text:0000000000003170 loc_3170:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000003170                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000003170                 cmp     r15, r13
.text:0000000000003173                 jnb     short loc_3179
.text:0000000000003175                 mov     [r14+r15], bl
.text:0000000000003179
.text:0000000000003179 loc_3179:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000003179                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000317E                 add     r15, 1
.text:0000000000003182                 mov     eax, 0
.text:0000000000003187                 test    r12b, r12b
.text:000000000000318A                 cmovz   edi, eax
.text:000000000000318D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000003192                 jmp     loc_2FC8
.text:0000000000003192 ; ---------------------------------------------------------------------------
.text:0000000000003197                 align 20h
.text:00000000000031A0
.text:00000000000031A0 loc_31A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000031A0                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000031A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000031A3
.text:00000000000031A3 loc_31A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031A3                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000031A3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000031A7                 cmp     eax, 2
.text:00000000000031AA                 jz      loc_3768
.text:00000000000031B0                 cmp     eax, 5
.text:00000000000031B3                 jz      loc_3728
.text:00000000000031B9                 cmp     eax, 2
.text:00000000000031BC                 mov     ebx, 3Fh ; '?'
.text:00000000000031C1                 setz    dl
.text:00000000000031C4                 xor     r12d, r12d
.text:00000000000031C7                 xor     eax, eax
.text:00000000000031C9                 jmp     loc_3108
.text:00000000000031C9 ; ---------------------------------------------------------------------------
.text:00000000000031CE                 align 10h
.text:00000000000031D0
.text:00000000000031D0 loc_31D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000031D0                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000031D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000031D3
.text:00000000000031D3 loc_31D3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031D3                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000031D3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000031D8                 jz      loc_36E0
.text:00000000000031DE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000031E3                 xor     edx, edx
.text:00000000000031E5                 xor     eax, eax
.text:00000000000031E7                 mov     ebx, 27h ; '''
.text:00000000000031EC                 jmp     loc_3108
.text:00000000000031EC ; ---------------------------------------------------------------------------
.text:00000000000031F1                 align 8
.text:00000000000031F8
.text:00000000000031F8 loc_31F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000031F8                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000031F8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000031FD                 mov     ebx, 74h ; 't'
.text:0000000000003202
.text:0000000000003202 loc_3202:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000003202                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000003202                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003207                 setz    al
.text:000000000000320A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000320E                 jnz     loc_335E
.text:0000000000003214
.text:0000000000003214 loc_3214:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000003214                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000003214                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003219                 jnz     short loc_3280
.text:000000000000321B
.text:000000000000321B loc_321B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000321B                 mov     ebx, edx
.text:000000000000321D                 xor     r12d, r12d
.text:0000000000003220                 xor     eax, eax
.text:0000000000003222
.text:0000000000003222 loc_3222:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000003222                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000003222                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003227                 jnz     loc_311B
.text:000000000000322D                 jmp     loc_3139
.text:000000000000322D ; ---------------------------------------------------------------------------
.text:0000000000003232                 align 8
.text:0000000000003238
.text:0000000000003238 loc_3238:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003238                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003238                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000323D                 mov     ebx, 62h ; 'b'
.text:0000000000003242                 jmp     short loc_3214
.text:0000000000003242 ; ---------------------------------------------------------------------------
.text:0000000000003244                 align 8
.text:0000000000003248
.text:0000000000003248 loc_3248:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003248                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003248                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000324D                 jz      loc_3620
.text:0000000000003253                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003258                 jz      loc_3470
.text:000000000000325E
.text:000000000000325E loc_325E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000325E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003263                 jz      loc_3470
.text:0000000000003269                 cmp     [rsp+0E8h+n], 0
.text:000000000000326F                 jnz     loc_362B
.text:0000000000003275                 mov     ebx, 5Ch ; '\'
.text:000000000000327A                 nop     word ptr [rax+rax+00h]
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000003280                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000003280                 xor     r12d, r12d
.text:0000000000003283
.text:0000000000003283 loc_3283:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000003283                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000003283                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003288                 setz    dl
.text:000000000000328B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003290                 mov     eax, edx
.text:0000000000003292                 jnz     loc_3AE8
.text:0000000000003298                 mov     eax, r8d
.text:000000000000329B                 xor     eax, 1
.text:000000000000329E                 and     al, dl
.text:00000000000032A0                 jz      short loc_32D1
.text:00000000000032A2                 cmp     r13, r15
.text:00000000000032A5                 jbe     short loc_32AC
.text:00000000000032A7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000032AC
.text:00000000000032AC loc_32AC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000032AC                 lea     rdx, [r15+1]
.text:00000000000032B0                 cmp     r13, rdx
.text:00000000000032B3                 jbe     short loc_32BB
.text:00000000000032B5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000032BB
.text:00000000000032BB loc_32BB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000032BB                 lea     rdx, [r15+2]
.text:00000000000032BF                 cmp     r13, rdx
.text:00000000000032C2                 jbe     short loc_32CA
.text:00000000000032C4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000032CA
.text:00000000000032CA loc_32CA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000032CA                 add     r15, 3
.text:00000000000032CE                 mov     r8d, eax
.text:00000000000032D1
.text:00000000000032D1 loc_32D1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000032D1                 cmp     r13, r15
.text:00000000000032D4                 jbe     short loc_32DB
.text:00000000000032D6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000032DB
.text:00000000000032DB loc_32DB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000032DB                 add     r15, 1
.text:00000000000032DF                 add     rbp, 1
.text:00000000000032E3                 jmp     loc_3170
.text:00000000000032E3 ; ---------------------------------------------------------------------------
.text:00000000000032E8                 align 10h
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000032F0                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000032F0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000032F5                 jnz     loc_34C3
.text:00000000000032FB                 xor     edx, edx
.text:00000000000032FD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000003302                 jz      loc_321B
.text:0000000000003308                 add     rbp, 1
.text:000000000000330C                 jmp     loc_2FC8
.text:000000000000330C ; ---------------------------------------------------------------------------
.text:0000000000003311                 align 8
.text:0000000000003318
.text:0000000000003318 loc_3318:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003318                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003318                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000331D                 setz    dl
.text:0000000000003320                 xor     eax, eax
.text:0000000000003322                 jmp     loc_3108
.text:0000000000003322 ; ---------------------------------------------------------------------------
.text:0000000000003327                 align 10h
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003330                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003330                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000003335                 mov     ebx, 61h ; 'a'
.text:000000000000333A                 jmp     loc_3214
.text:000000000000333A ; ---------------------------------------------------------------------------
.text:000000000000333F                 align 20h
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003340                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003340                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000003345                 setz    dl
.text:0000000000003348
.text:0000000000003348 loc_3348:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000003348                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000003348                 test    rbp, rbp
.text:000000000000334B                 jnz     loc_30FC
.text:0000000000003351
.text:0000000000003351 loc_3351:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000003351                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000003351                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003356                 and     al, dl
.text:0000000000003358                 jz      loc_3108
.text:000000000000335E
.text:000000000000335E loc_335E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000335E                 mov     rbp, r11
.text:0000000000003361                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003369                 jmp     loc_3A69
.text:0000000000003369 ; ---------------------------------------------------------------------------
.text:000000000000336E                 align 10h
.text:0000000000003370
.text:0000000000003370 loc_3370:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003370                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003370                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003375                 setz    dl
.text:0000000000003378                 xor     r12d, r12d
.text:000000000000337B                 jmp     short loc_3351
.text:000000000000337B ; ---------------------------------------------------------------------------
.text:000000000000337D                 align 20h
.text:0000000000003380
.text:0000000000003380 loc_3380:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003380                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003380                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000003385                 mov     ebx, 20h ; ' '
.text:000000000000338A                 setz    dl
.text:000000000000338D                 jmp     short loc_3351
.text:000000000000338D ; ---------------------------------------------------------------------------
.text:000000000000338F                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000003390                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:0000000000003390                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000003395                 mov     ebx, 72h ; 'r'
.text:000000000000339A                 jmp     loc_3202
.text:000000000000339A ; ---------------------------------------------------------------------------
.text:000000000000339F                 align 20h
.text:00000000000033A0
.text:00000000000033A0 loc_33A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033A0                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000033A0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000033A5                 mov     ebx, 66h ; 'f'
.text:00000000000033AA                 jmp     loc_3214
.text:00000000000033AA ; ---------------------------------------------------------------------------
.text:00000000000033AF                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033B0                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000033B0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000033B5                 mov     ebx, 76h ; 'v'
.text:00000000000033BA                 jmp     loc_3214
.text:00000000000033BA ; ---------------------------------------------------------------------------
.text:00000000000033BF                 align 20h
.text:00000000000033C0
.text:00000000000033C0 loc_33C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000033C0                                         ; DATA XREF: .rodata:jpt_30CE↓o
.text:00000000000033C0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000033C5                 mov     ebx, 6Eh ; 'n'
.text:00000000000033CA                 jmp     loc_3202
.text:00000000000033CA ; ---------------------------------------------------------------------------
.text:00000000000033CF                 align 10h
.text:00000000000033D0
.text:00000000000033D0 def_345A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000033D0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000033D0                                         ; DATA XREF: ...
.text:00000000000033D0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000033D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000033D8
.text:00000000000033D8 def_30CE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000033D8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000033D8                                         ; DATA XREF: ...
.text:00000000000033D8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000033DE                 jnz     loc_3788
.text:00000000000033E4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000033E9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000033EE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000033F3                 call    ___ctype_b_loc
.text:00000000000033F8                 mov     rcx, [rax]
.text:00000000000033FB                 movzx   edx, bl
.text:00000000000033FE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000003404                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000340A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000340F                 mov     edi, 1
.text:0000000000003414                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000003418                 and     ax, 4000h
.text:000000000000341C                 setnz   r12b
.text:0000000000003420                 setz    al
.text:0000000000003423                 and     al, [rsp+0E8h+var_DB]
.text:0000000000003427
.text:0000000000003427 loc_3427:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000003427                 test    al, al
.text:0000000000003429                 jnz     loc_3DC1
.text:000000000000342F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003434                 setz    dl
.text:0000000000003437                 jmp     loc_3108
.text:0000000000003437 ; ---------------------------------------------------------------------------
.text:000000000000343C                 align 20h
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000003440                 movzx   ebx, byte ptr [r9]
.text:0000000000003444                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000003447                 ja      short def_345A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000003449                 lea     rcx, jpt_345A
.text:0000000000003450                 movzx   edx, bl
.text:0000000000003453                 movsxd  rax, ds:(jpt_345A - 6C68h)[rcx+rdx*4]
.text:0000000000003457                 add     rax, rcx
.text:000000000000345A                 jmp     rax             ; switch jump
.text:000000000000345A ; ---------------------------------------------------------------------------
.text:000000000000345C                 align 20h
.text:0000000000003460
.text:0000000000003460 loc_3460:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003460                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:0000000000003460                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000003463                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003468                 jnz     loc_325E
.text:000000000000346E                 xchg    ax, ax
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000003470                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000003470                 mov     edx, 5Ch ; '\'
.text:0000000000003475                 mov     ebx, 5Ch ; '\'
.text:000000000000347A                 jmp     loc_3214
.text:000000000000347A ; ---------------------------------------------------------------------------
.text:000000000000347F                 align 20h
.text:0000000000003480
.text:0000000000003480 loc_3480:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003480                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:0000000000003480                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000003485                 xor     r10d, r10d
.text:0000000000003488                 mov     ebx, 66h ; 'f'
.text:000000000000348D                 jmp     loc_3214
.text:000000000000348D ; ---------------------------------------------------------------------------
.text:0000000000003492                 align 8
.text:0000000000003498
.text:0000000000003498 loc_3498:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003498                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:0000000000003498                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000349D                 xor     r10d, r10d
.text:00000000000034A0                 mov     ebx, 6Eh ; 'n'
.text:00000000000034A5                 jmp     loc_3202
.text:00000000000034A5 ; ---------------------------------------------------------------------------
.text:00000000000034AA                 align 10h
.text:00000000000034B0
.text:00000000000034B0 loc_34B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034B0                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000034B0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000034B5                 jmp     loc_3280
.text:00000000000034B5 ; ---------------------------------------------------------------------------
.text:00000000000034BA                 align 20h
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000034C0                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000034C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000034C3
.text:00000000000034C3 loc_34C3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000034C3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034C8                 setz    dl
.text:00000000000034CB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000034D0                 jnz     loc_406A
.text:00000000000034D6                 mov     eax, r8d
.text:00000000000034D9                 mov     rcx, r15
.text:00000000000034DC                 xor     eax, 1
.text:00000000000034DF                 and     al, dl
.text:00000000000034E1                 jz      short loc_3510
.text:00000000000034E3                 cmp     r13, r15
.text:00000000000034E6                 jbe     short loc_34ED
.text:00000000000034E8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000034ED
.text:00000000000034ED loc_34ED:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000034ED                 lea     rcx, [r15+1]
.text:00000000000034F1                 cmp     r13, rcx
.text:00000000000034F4                 jbe     short loc_34FC
.text:00000000000034F6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000034FC
.text:00000000000034FC loc_34FC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000034FC                 lea     rcx, [r15+2]
.text:0000000000003500                 cmp     r13, rcx
.text:0000000000003503                 ja      loc_3B39
.text:0000000000003509
.text:0000000000003509 loc_3509:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000003509                 lea     rcx, [r15+3]
.text:000000000000350D                 mov     r8d, eax
.text:0000000000003510
.text:0000000000003510 loc_3510:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000003510                 cmp     r13, rcx
.text:0000000000003513                 jbe     short loc_351A
.text:0000000000003515                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000351A
.text:000000000000351A loc_351A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000351A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000351F                 lea     r15, [rcx+1]
.text:0000000000003523                 jz      loc_3B29
.text:0000000000003529                 lea     rax, [rbp+1]
.text:000000000000352D                 cmp     rax, r11
.text:0000000000003530                 jnb     short loc_354B
.text:0000000000003532                 mov     rax, [rsp+0E8h+s]
.text:0000000000003537                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000353C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000003540                 sub     eax, 30h ; '0'
.text:0000000000003543                 cmp     al, 9
.text:0000000000003545                 jbe     loc_3D79
.text:000000000000354B
.text:000000000000354B loc_354B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000354B                 mov     eax, r12d
.text:000000000000354E                 mov     ebx, 30h ; '0'
.text:0000000000003553                 xor     r12d, r12d
.text:0000000000003556                 jmp     loc_3108
.text:0000000000003556 ; ---------------------------------------------------------------------------
.text:000000000000355B                 align 20h
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003560                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:0000000000003560                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000003565                 mov     r12d, r10d
.text:0000000000003568                 setz    dl
.text:000000000000356B                 xor     r10d, r10d
.text:000000000000356E                 xor     eax, eax
.text:0000000000003570                 jmp     loc_3108
.text:0000000000003570 ; ---------------------------------------------------------------------------
.text:0000000000003575                 align 8
.text:0000000000003578
.text:0000000000003578 loc_3578:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003578                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:0000000000003578                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000357D                 setz    dl
.text:0000000000003580                 xor     r10d, r10d
.text:0000000000003583                 jmp     loc_3348
.text:0000000000003583 ; ---------------------------------------------------------------------------
.text:0000000000003588                 align 10h
.text:0000000000003590
.text:0000000000003590 loc_3590:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003590                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:0000000000003590                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000003595                 setz    dl
.text:0000000000003598                 xor     r10d, r10d
.text:000000000000359B                 xor     r12d, r12d
.text:000000000000359E                 jmp     loc_3351
.text:000000000000359E ; ---------------------------------------------------------------------------
.text:00000000000035A3                 align 8
.text:00000000000035A8
.text:00000000000035A8 loc_35A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000035A8                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000035A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000035AD                 mov     r12d, r10d
.text:00000000000035B0                 mov     ebx, 20h ; ' '
.text:00000000000035B5                 setz    dl
.text:00000000000035B8                 xor     r10d, r10d
.text:00000000000035BB                 jmp     loc_3351
.text:00000000000035C0 ; ---------------------------------------------------------------------------
.text:00000000000035C0
.text:00000000000035C0 loc_35C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000035C0                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000035C0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000035C5                 xor     r10d, r10d
.text:00000000000035C8                 mov     ebx, 72h ; 'r'
.text:00000000000035CD                 jmp     loc_3202
.text:00000000000035CD ; ---------------------------------------------------------------------------
.text:00000000000035D2                 align 8
.text:00000000000035D8
.text:00000000000035D8 loc_35D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000035D8                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000035D8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000035DD                 jmp     loc_3280
.text:00000000000035DD ; ---------------------------------------------------------------------------
.text:00000000000035E2                 align 8
.text:00000000000035E8
.text:00000000000035E8 loc_35E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000035E8                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:00000000000035E8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000035ED                 xor     r10d, r10d
.text:00000000000035F0                 mov     ebx, 74h ; 't'
.text:00000000000035F5                 jmp     loc_3202
.text:00000000000035F5 ; ---------------------------------------------------------------------------
.text:00000000000035FA                 align 20h
.text:0000000000003600
.text:0000000000003600 loc_3600:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000003600                                         ; DATA XREF: .rodata:jpt_345A↓o
.text:0000000000003600                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000003605                 jmp     loc_3280
.text:0000000000003605 ; ---------------------------------------------------------------------------
.text:000000000000360A                 align 10h
.text:0000000000003610
.text:0000000000003610 loc_3610:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000003610                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000003610                 xor     r10d, r10d
.text:0000000000003613                 jmp     loc_30B0
.text:0000000000003613 ; ---------------------------------------------------------------------------
.text:0000000000003618                 align 20h
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000003620                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003625                 jnz     loc_3F90
.text:000000000000362B
.text:000000000000362B loc_362B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000362B                 add     rbp, 1
.text:000000000000362F                 mov     eax, r8d
.text:0000000000003632                 xor     r12d, r12d
.text:0000000000003635                 mov     ebx, 5Ch ; '\'
.text:000000000000363A                 jmp     loc_314C
.text:000000000000363A ; ---------------------------------------------------------------------------
.text:000000000000363F                 align 20h
.text:0000000000003640
.text:0000000000003640 loc_3640:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000003640                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000003645                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000364A                 mov     r12d, r8d
.text:000000000000364D                 mov     rbp, r11
.text:0000000000003650                 setz    dl
.text:0000000000003653                 mov     eax, ebx
.text:0000000000003655                 test    r15, r15
.text:0000000000003658                 setz    cl
.text:000000000000365B                 and     eax, edx
.text:000000000000365D                 and     al, cl
.text:000000000000365F                 jnz     loc_40C6
.text:0000000000003665                 mov     eax, ebx
.text:0000000000003667                 xor     eax, 1
.text:000000000000366A                 and     dl, al
.text:000000000000366C                 jz      loc_3FDC
.text:0000000000003672                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000003677                 jz      loc_3FDA
.text:000000000000367D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000003682                 jnz     loc_407D
.text:0000000000003688                 test    r13, r13
.text:000000000000368B                 setz    al
.text:000000000000368E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000003694                 setnz   dl
.text:0000000000003697                 and     al, dl
.text:0000000000003699                 jz      loc_40BC
.text:000000000000369F                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000036A4
.text:00000000000036A4 loc_36A4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000036A4                 lea     rbx, asc_69E5   ; "'"
.text:00000000000036AB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000036AF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000036B7                 mov     r15d, 1
.text:00000000000036BD                 mov     [rsp+0E8h+n], 1
.text:00000000000036C6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000036CB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000036D0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000036D4                 jmp     loc_2FB3
.text:00000000000036D4 ; ---------------------------------------------------------------------------
.text:00000000000036D9                 align 20h
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000036E0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000036E5                 jnz     loc_3F90
.text:00000000000036EB                 test    r13, r13
.text:00000000000036EE                 jz      loc_3AF0
.text:00000000000036F4                 xor     edx, edx
.text:00000000000036F6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000036FC                 jnz     loc_3AF0
.text:0000000000003702
.text:0000000000003702 loc_3702:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000003702                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000003702                 mov     [rsp+0E8h+var_98], r13
.text:0000000000003707                 add     r15, 3
.text:000000000000370B                 xor     eax, eax
.text:000000000000370D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000003712                 xor     r8d, r8d
.text:0000000000003715                 mov     r13, rdx
.text:0000000000003718                 mov     ebx, 27h ; '''
.text:000000000000371D                 jmp     loc_3139
.text:000000000000371D ; ---------------------------------------------------------------------------
.text:0000000000003722                 align 8
.text:0000000000003728
.text:0000000000003728 loc_3728:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000003728                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000372D                 jz      short loc_3750
.text:000000000000372F                 lea     rcx, [rbp+2]
.text:0000000000003733                 cmp     rcx, r11
.text:0000000000003736                 jnb     short loc_3750
.text:0000000000003738                 mov     rax, [rsp+0E8h+s]
.text:000000000000373D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000003742                 jz      loc_3ED2
.text:0000000000003748                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000003750                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000003750                 xor     edx, edx
.text:0000000000003752                 xor     r12d, r12d
.text:0000000000003755                 xor     eax, eax
.text:0000000000003757                 mov     ebx, 3Fh ; '?'
.text:000000000000375C                 jmp     loc_3108
.text:000000000000375C ; ---------------------------------------------------------------------------
.text:0000000000003761                 align 8
.text:0000000000003768
.text:0000000000003768 loc_3768:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000003768                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000376D                 jnz     loc_3F90
.text:0000000000003773                 xor     r12d, r12d
.text:0000000000003776                 xor     eax, eax
.text:0000000000003778                 mov     ebx, 3Fh ; '?'
.text:000000000000377D                 jmp     loc_3139
.text:000000000000377D ; ---------------------------------------------------------------------------
.text:0000000000003782                 align 8
.text:0000000000003788
.text:0000000000003788 loc_3788:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000003788                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000003790                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000003794                 mov     [rsp+0E8h+var_48], 0
.text:00000000000037A0                 mov     [rsp+0E8h+ps], rax
.text:00000000000037A5                 jnz     short loc_37D4
.text:00000000000037A7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000037AC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000037B1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000037B6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000037BB                 call    _strlen
.text:00000000000037C0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000037C6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000037CC                 mov     r11, rax
.text:00000000000037CF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000037D4
.text:00000000000037D4 loc_37D4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000037D4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000037DC                 xor     ecx, ecx
.text:00000000000037DE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000037E2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000037E7                 mov     rbx, rcx
.text:00000000000037EA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000037F2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000037F7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000037FC                 mov     [rsp+0E8h+var_68], r15
.text:0000000000003804                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000003809                 mov     [rsp+0E8h+var_78], r13
.text:000000000000380E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000003813
.text:0000000000003813 loc_3813:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000003813                 mov     rax, [rsp+0E8h+s]
.text:0000000000003818                 lea     r14, [rbp+rbx+0]
.text:000000000000381D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000003822                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000003827                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000382C                 lea     r13, [rax+r14]
.text:0000000000003830                 sub     rdx, r14
.text:0000000000003833                 mov     rsi, r13
.text:0000000000003836                 call    rpl_mbrtowc
.text:000000000000383B                 test    rax, rax
.text:000000000000383E                 mov     r15, rax
.text:0000000000003841                 jz      short loc_3891
.text:0000000000003843                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003847                 jz      loc_3E65
.text:000000000000384D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003851                 jz      loc_3DF1
.text:0000000000003857                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000385C                 setz    al
.text:000000000000385F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000003863                 jnz     loc_3A00
.text:0000000000003869
.text:0000000000003869 loc_3869:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000003869                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000003869                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000003870                 call    _iswprint
.text:0000000000003875                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000387A                 test    eax, eax
.text:000000000000387C                 mov     eax, 0
.text:0000000000003881                 cmovz   r12d, eax
.text:0000000000003885                 add     rbx, r15
.text:0000000000003888                 call    _mbsinit
.text:000000000000388D                 test    eax, eax
.text:000000000000388F                 jz      short loc_3813
.text:0000000000003891
.text:0000000000003891 loc_3891:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000003891                 mov     edx, r12d
.text:0000000000003894                 mov     rdi, rbx
.text:0000000000003897                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000389D                 xor     edx, 1
.text:00000000000038A0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000038A5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000038AB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000038AF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000038B7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000038BC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000038C1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000038C6
.text:00000000000038C6 loc_38C6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000038C6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000038C6                 cmp     rdi, 1
.text:00000000000038CA                 jbe     loc_3ECB
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000038D0                 mov     rcx, rdi
.text:00000000000038D3                 xor     esi, esi
.text:00000000000038D5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000038DB                 add     rcx, rbp
.text:00000000000038DE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000038E3                 jmp     loc_399E
.text:00000000000038E3 ; ---------------------------------------------------------------------------
.text:00000000000038E8                 align 10h
.text:00000000000038F0
.text:00000000000038F0 loc_38F0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000038F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000038F5                 setz    al
.text:00000000000038F8                 test    r9b, r9b
.text:00000000000038FB                 jnz     loc_3DB0
.text:0000000000003901                 mov     esi, r8d
.text:0000000000003904                 xor     esi, 1
.text:0000000000003907                 and     al, sil
.text:000000000000390A                 jz      short loc_393B
.text:000000000000390C                 cmp     r13, r15
.text:000000000000390F                 jbe     short loc_3916
.text:0000000000003911                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003916
.text:0000000000003916 loc_3916:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000003916                 lea     rsi, [r15+1]
.text:000000000000391A                 cmp     r13, rsi
.text:000000000000391D                 jbe     short loc_3925
.text:000000000000391F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000003925
.text:0000000000003925 loc_3925:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000003925                 lea     rsi, [r15+2]
.text:0000000000003929                 cmp     r13, rsi
.text:000000000000392C                 jbe     short loc_3934
.text:000000000000392E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003934
.text:0000000000003934 loc_3934:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000003934                 add     r15, 3
.text:0000000000003938                 mov     r8d, eax
.text:000000000000393B
.text:000000000000393B loc_393B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000393B                 cmp     r13, r15
.text:000000000000393E                 jbe     short loc_3945
.text:0000000000003940                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000003945
.text:0000000000003945 loc_3945:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000003945                 lea     rax, [r15+1]
.text:0000000000003949                 cmp     r13, rax
.text:000000000000394C                 jbe     short loc_395B
.text:000000000000394E                 mov     eax, ebx
.text:0000000000003950                 shr     al, 6
.text:0000000000003953                 add     eax, 30h ; '0'
.text:0000000000003956                 mov     [r14+r15+1], al
.text:000000000000395B
.text:000000000000395B loc_395B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000395B                 lea     rax, [r15+2]
.text:000000000000395F                 cmp     r13, rax
.text:0000000000003962                 jbe     short loc_3974
.text:0000000000003964                 mov     eax, ebx
.text:0000000000003966                 shr     al, 3
.text:0000000000003969                 and     eax, 7
.text:000000000000396C                 add     eax, 30h ; '0'
.text:000000000000396F                 mov     [r14+r15+2], al
.text:0000000000003974
.text:0000000000003974 loc_3974:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000003974                 and     ebx, 7
.text:0000000000003977                 add     rbp, 1
.text:000000000000397B                 add     r15, 3
.text:000000000000397F                 add     ebx, 30h ; '0'
.text:0000000000003982                 cmp     rbp, rcx
.text:0000000000003985                 jnb     loc_3170
.text:000000000000398B                 mov     esi, edx
.text:000000000000398D
.text:000000000000398D loc_398D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000398D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000398D                 cmp     r13, r15
.text:0000000000003990                 jbe     short loc_3996
.text:0000000000003992                 mov     [r14+r15], bl
.text:0000000000003996
.text:0000000000003996 loc_3996:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000003996                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000399A                 add     r15, 1
.text:000000000000399E
.text:000000000000399E loc_399E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000399E                 test    dl, dl
.text:00000000000039A0                 jnz     loc_38F0
.text:00000000000039A6                 mov     eax, esi
.text:00000000000039A8                 xor     eax, 1
.text:00000000000039AB                 and     eax, r8d
.text:00000000000039AE                 test    r10b, r10b
.text:00000000000039B1                 jz      short loc_39C1
.text:00000000000039B3                 cmp     r13, r15
.text:00000000000039B6                 jbe     short loc_39BD
.text:00000000000039B8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000039BD
.text:00000000000039BD loc_39BD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000039BD                 add     r15, 1
.text:00000000000039C1
.text:00000000000039C1 loc_39C1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000039C1                 add     rbp, 1
.text:00000000000039C5                 cmp     rbp, rcx
.text:00000000000039C8                 jnb     loc_314C
.text:00000000000039CE                 test    al, al
.text:00000000000039D0                 jz      loc_3DCE
.text:00000000000039D6                 cmp     r13, r15
.text:00000000000039D9                 jbe     short loc_39E0
.text:00000000000039DB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000039E0
.text:00000000000039E0 loc_39E0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000039E0                 lea     rax, [r15+1]
.text:00000000000039E4                 cmp     r13, rax
.text:00000000000039E7                 jbe     short loc_39EF
.text:00000000000039E9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000039EF
.text:00000000000039EF loc_39EF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000039EF                 add     r15, 2
.text:00000000000039F3                 xor     r10d, r10d
.text:00000000000039F6                 xor     r8d, r8d
.text:00000000000039F9                 jmp     short loc_398D
.text:00000000000039F9 ; ---------------------------------------------------------------------------
.text:00000000000039FB                 align 20h
.text:0000000000003A00
.text:0000000000003A00 loc_3A00:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000003A00                 cmp     r15, 1
.text:0000000000003A04                 jz      loc_3869
.text:0000000000003A0A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000003A0F                 lea     rcx, [rdi+r15]
.text:0000000000003A13                 lea     rdx, [rdi+r14+1]
.text:0000000000003A18                 lea     r8, [rcx+r14]
.text:0000000000003A1C                 jmp     short loc_3A2D
.text:0000000000003A1C ; ---------------------------------------------------------------------------
.text:0000000000003A1E                 align 20h
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000003A20                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000003A20                 add     rdx, 1
.text:0000000000003A24                 cmp     r8, rdx
.text:0000000000003A27                 jz      loc_3869
.text:0000000000003A2D
.text:0000000000003A2D loc_3A2D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000003A2D                 movzx   ecx, byte ptr [rdx]
.text:0000000000003A30                 sub     ecx, 5Bh ; '['
.text:0000000000003A33                 cmp     cl, 21h ; '!'
.text:0000000000003A36                 ja      short loc_3A20
.text:0000000000003A38                 mov     esi, 1
.text:0000000000003A3D                 shl     rsi, cl
.text:0000000000003A40                 mov     rcx, rsi
.text:0000000000003A43                 mov     rsi, 20000002Bh
.text:0000000000003A4D                 test    rcx, rsi
.text:0000000000003A50                 jz      short loc_3A20
.text:0000000000003A52                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003A57                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003A5C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000003A61                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003A69
.text:0000000000003A69 loc_3A69:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000003A69                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000003A69                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000003A6E                 jz      short loc_3A80
.text:0000000000003A70                 test    al, al
.text:0000000000003A72                 mov     eax, 4
.text:0000000000003A77                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000003A7C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000003A80
.text:0000000000003A80 loc_3A80:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000003A80                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000003A80                 sub     rsp, 8
.text:0000000000003A84                 mov     rcx, rbp
.text:0000000000003A87                 mov     rsi, r13
.text:0000000000003A8A                 push    [rsp+0F0h+var_88]
.text:0000000000003A8E                 push    [rsp+0F8h+var_80]
.text:0000000000003A92                 mov     rdi, r14
.text:0000000000003A95                 push    0
.text:0000000000003A97                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003A9F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000003AA4                 mov     rdx, [rsp+108h+s]
.text:0000000000003AA9                 and     r9d, 0FFFFFFFDh
.text:0000000000003AAD                 call    quotearg_buffer_restyled
.text:0000000000003AB2                 add     rsp, 20h
.text:0000000000003AB6                 mov     r15, rax
.text:0000000000003AB9
.text:0000000000003AB9 loc_3AB9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000003AB9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000003AB9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000003AC1                 xor     rbx, fs:28h
.text:0000000000003ACA                 mov     rax, r15
.text:0000000000003ACD                 jnz     loc_40D3
.text:0000000000003AD3                 add     rsp, 0B8h
.text:0000000000003ADA                 pop     rbx
.text:0000000000003ADB                 pop     rbp
.text:0000000000003ADC                 pop     r12
.text:0000000000003ADE                 pop     r13
.text:0000000000003AE0                 pop     r14
.text:0000000000003AE2                 pop     r15
.text:0000000000003AE4                 retn
.text:0000000000003AE4 ; ---------------------------------------------------------------------------
.text:0000000000003AE5                 align 8
.text:0000000000003AE8
.text:0000000000003AE8 loc_3AE8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000003AE8                 mov     rbp, r11
.text:0000000000003AEB                 jmp     loc_3A69
.text:0000000000003AF0 ; ---------------------------------------------------------------------------
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000003AF0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000003AF0                 cmp     r13, r15
.text:0000000000003AF3                 jbe     short loc_3AFA
.text:0000000000003AF5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000003AFA
.text:0000000000003AFA loc_3AFA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000003AFA                 lea     rax, [r15+1]
.text:0000000000003AFE                 cmp     r13, rax
.text:0000000000003B01                 jbe     short loc_3B09
.text:0000000000003B03                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000003B09
.text:0000000000003B09 loc_3B09:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000003B09                 lea     rax, [r15+2]
.text:0000000000003B0D                 cmp     r13, rax
.text:0000000000003B10                 jbe     loc_4102
.text:0000000000003B16                 mov     rdx, r13
.text:0000000000003B19                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003B1F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000003B24                 jmp     loc_3702
.text:0000000000003B29 ; ---------------------------------------------------------------------------
.text:0000000000003B29
.text:0000000000003B29 loc_3B29:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000003B29                 mov     eax, r12d
.text:0000000000003B2C                 mov     ebx, 30h ; '0'
.text:0000000000003B31                 xor     r12d, r12d
.text:0000000000003B34                 jmp     loc_3139
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B39
.text:0000000000003B39 loc_3B39:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000003B39                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000003B3F                 jmp     loc_3509
.text:0000000000003B44 ; ---------------------------------------------------------------------------
.text:0000000000003B44
.text:0000000000003B44 loc_3B44:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003B44                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003B44                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000003B46                 jnz     loc_2F73        ; jumptable 00000000000121F1 case 1
.text:0000000000003B4C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003B51
.text:0000000000003B51 loc_3B51:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000003B51                 test    r13, r13
.text:0000000000003B54                 jnz     loc_40EA
.text:0000000000003B5A                 lea     rax, asc_69E5   ; "'"
.text:0000000000003B61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003B6A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003B6F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003B74                 xor     r12d, r12d
.text:0000000000003B77                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003B7C                 mov     [rsp+0E8h+n], 1
.text:0000000000003B85                 mov     [rsp+0E8h+s2], rax
.text:0000000000003B8A                 mov     r15d, 1
.text:0000000000003B90                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003B98                 jmp     loc_2FB3
.text:0000000000003B98 ; ---------------------------------------------------------------------------
.text:0000000000003B9D                 align 20h
.text:0000000000003BA0
.text:0000000000003BA0 loc_3BA0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BA0                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003BA0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003BA2                 jnz     loc_3F9D
.text:0000000000003BA8                 test    r13, r13
.text:0000000000003BAB                 jz      loc_3DD6
.text:0000000000003BB1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003BB5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003BBA                 xor     r12d, r12d
.text:0000000000003BBD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003BC2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003BCB
.text:0000000000003BCB loc_3BCB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000003BCB                 lea     rax, unk_69E3
.text:0000000000003BD2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003BD7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003BDC                 mov     [rsp+0E8h+n], 1
.text:0000000000003BE5                 mov     r15d, 1
.text:0000000000003BEB                 mov     [rsp+0E8h+s2], rax
.text:0000000000003BF0                 jmp     loc_2FB3
.text:0000000000003BF5 ; ---------------------------------------------------------------------------
.text:0000000000003BF5
.text:0000000000003BF5 loc_3BF5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003BF5                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003BF5                 lea     rax, unk_69E3   ; jumptable 00000000000121F1 case 6
.text:0000000000003BFC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003C01                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C06                 xor     r12d, r12d
.text:0000000000003C09                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C12                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003C17                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C1C                 mov     [rsp+0E8h+n], 1
.text:0000000000003C25                 xor     r15d, r15d
.text:0000000000003C28                 mov     [rsp+0E8h+s2], rax
.text:0000000000003C2D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003C35                 jmp     loc_2FB3
.text:0000000000003C3A ; ---------------------------------------------------------------------------
.text:0000000000003C3A
.text:0000000000003C3A loc_3C3A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C3A                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003C3A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000003C3F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003C44                 xor     r12d, r12d
.text:0000000000003C47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003C50                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003C55                 xor     r15d, r15d
.text:0000000000003C58                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003C5D                 mov     [rsp+0E8h+n], 0
.text:0000000000003C66                 mov     [rsp+0E8h+s2], 0
.text:0000000000003C6F                 jmp     loc_2FB3
.text:0000000000003C74 ; ---------------------------------------------------------------------------
.text:0000000000003C74
.text:0000000000003C74 loc_3C74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003C74                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003C74                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003C79                 jz      short loc_3CD1
.text:0000000000003C7B                 lea     rsi, asc_69E7   ; "`"
.text:0000000000003C82                 xor     edi, edi        ; domainname
.text:0000000000003C84                 mov     edx, 5          ; category
.text:0000000000003C89                 call    _dcgettext
.text:0000000000003C8E                 mov     rcx, rax
.text:0000000000003C91                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003C96                 lea     rax, asc_69E7   ; "`"
.text:0000000000003C9D                 cmp     rcx, rax
.text:0000000000003CA0                 jz      loc_403E
.text:0000000000003CA6
.text:0000000000003CA6 loc_3CA6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003CA6                 lea     rsi, asc_69E5   ; "'"
.text:0000000000003CAD                 xor     edi, edi        ; domainname
.text:0000000000003CAF                 mov     edx, 5          ; category
.text:0000000000003CB4                 call    _dcgettext
.text:0000000000003CB9                 mov     rcx, rax
.text:0000000000003CBC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003CC1                 lea     rax, asc_69E5   ; "'"
.text:0000000000003CC8                 cmp     rcx, rax
.text:0000000000003CCB                 jz      loc_4054
.text:0000000000003CD1
.text:0000000000003CD1 loc_3CD1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003CD1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003CD1                 xor     r15d, r15d
.text:0000000000003CD4                 test    ebx, ebx
.text:0000000000003CD6                 jz      loc_3E9D
.text:0000000000003CDC
.text:0000000000003CDC loc_3CDC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000003CDC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000003CDC                 test    ebx, ebx
.text:0000000000003CDE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003CE3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003CE8                 xor     r12d, r12d
.text:0000000000003CEB                 mov     rdi, rbx        ; s
.text:0000000000003CEE                 call    _strlen
.text:0000000000003CF3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003CF8                 mov     [rsp+0E8h+n], rax
.text:0000000000003CFD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003D02                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D07                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D10                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D15                 jmp     loc_2FB3
.text:0000000000003D1A ; ---------------------------------------------------------------------------
.text:0000000000003D1A
.text:0000000000003D1A loc_3D1A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003D1A                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003D1A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000003D1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D24                 xor     r12d, r12d
.text:0000000000003D27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D30                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003D35                 xor     r15d, r15d
.text:0000000000003D38                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003D3D                 mov     [rsp+0E8h+n], 0
.text:0000000000003D46                 mov     [rsp+0E8h+s2], 0
.text:0000000000003D4F                 jmp     loc_2FB3
.text:0000000000003D54 ; ---------------------------------------------------------------------------
.text:0000000000003D54
.text:0000000000003D54 loc_3D54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003D54                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003D54                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003D59                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003D5E                 xor     r12d, r12d
.text:0000000000003D61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003D6A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003D6F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003D74                 jmp     loc_2F93
.text:0000000000003D79 ; ---------------------------------------------------------------------------
.text:0000000000003D79
.text:0000000000003D79 loc_3D79:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003D79                 cmp     r13, r15
.text:0000000000003D7C                 jbe     short loc_3D83
.text:0000000000003D7E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003D83
.text:0000000000003D83 loc_3D83:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003D83                 lea     rax, [rcx+2]
.text:0000000000003D87                 cmp     r13, rax
.text:0000000000003D8A                 jbe     short loc_3D92
.text:0000000000003D8C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003D92
.text:0000000000003D92 loc_3D92:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003D92                 mov     eax, r12d
.text:0000000000003D95                 lea     r15, [rcx+3]
.text:0000000000003D99                 xor     r12d, r12d
.text:0000000000003D9C                 mov     ebx, 30h ; '0'
.text:0000000000003DA1                 jmp     loc_3108
.text:0000000000003DA1 ; ---------------------------------------------------------------------------
.text:0000000000003DA6                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003DB0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003DB5                 mov     rbp, r11
.text:0000000000003DB8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003DBC                 jmp     loc_3A69
.text:0000000000003DC1 ; ---------------------------------------------------------------------------
.text:0000000000003DC1
.text:0000000000003DC1 loc_3DC1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003DC1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003DC6                 xor     r12d, r12d
.text:0000000000003DC9                 jmp     loc_38D0
.text:0000000000003DCE ; ---------------------------------------------------------------------------
.text:0000000000003DCE
.text:0000000000003DCE loc_3DCE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000003DCE                 xor     r10d, r10d
.text:0000000000003DD1                 jmp     loc_398D
.text:0000000000003DD6 ; ---------------------------------------------------------------------------
.text:0000000000003DD6
.text:0000000000003DD6 loc_3DD6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003DD6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003DDF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003DE4                 xor     r12d, r12d
.text:0000000000003DE7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003DEC                 jmp     loc_3BCB
.text:0000000000003DF1 ; ---------------------------------------------------------------------------
.text:0000000000003DF1
.text:0000000000003DF1 loc_3DF1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003DF1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003DF6                 mov     rsi, r14
.text:0000000000003DF9                 mov     rcx, r13
.text:0000000000003DFC                 mov     rax, rbx
.text:0000000000003DFF                 mov     rdi, rbx
.text:0000000000003E02                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003E08                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003E0D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003E15                 cmp     rsi, r11
.text:0000000000003E18                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003E1E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003E26                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003E2B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003E30                 jnb     short loc_3E58
.text:0000000000003E32                 cmp     byte ptr [rcx], 0
.text:0000000000003E35                 jnz     short loc_3E47
.text:0000000000003E37                 jmp     short loc_3E58
.text:0000000000003E37 ; ---------------------------------------------------------------------------
.text:0000000000003E39                 align 20h
.text:0000000000003E40
.text:0000000000003E40 loc_3E40:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003E40                 cmp     byte ptr [r9+rax], 0
.text:0000000000003E45                 jz      short loc_3E55
.text:0000000000003E47
.text:0000000000003E47 loc_3E47:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003E47                 add     rax, 1
.text:0000000000003E4B                 lea     rdx, [rbp+rax+0]
.text:0000000000003E50                 cmp     r11, rdx
.text:0000000000003E53                 ja      short loc_3E40
.text:0000000000003E55
.text:0000000000003E55 loc_3E55:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003E55                 mov     rdi, rax
.text:0000000000003E58
.text:0000000000003E58 loc_3E58:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003E58                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003E58                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003E5D                 xor     r12d, r12d
.text:0000000000003E60                 jmp     loc_38C6
.text:0000000000003E65 ; ---------------------------------------------------------------------------
.text:0000000000003E65
.text:0000000000003E65 loc_3E65:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003E65                 mov     rdi, rbx
.text:0000000000003E68                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003E6E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003E73                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003E79                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003E81                 xor     r12d, r12d
.text:0000000000003E84                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003E89                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003E8E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003E93                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003E98                 jmp     loc_38C6
.text:0000000000003E9D ; ---------------------------------------------------------------------------
.text:0000000000003E9D
.text:0000000000003E9D loc_3E9D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000003E9D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003EA2                 movzx   eax, byte ptr [rdx]
.text:0000000000003EA5                 test    al, al
.text:0000000000003EA7                 jz      loc_3CDC
.text:0000000000003EAD                 nop     dword ptr [rax]
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003EB0                 cmp     r13, r15
.text:0000000000003EB3                 jbe     short loc_3EB9
.text:0000000000003EB5                 mov     [r14+r15], al
.text:0000000000003EB9
.text:0000000000003EB9 loc_3EB9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003EB9                 add     r15, 1
.text:0000000000003EBD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003EC2                 test    al, al
.text:0000000000003EC4                 jnz     short loc_3EB0
.text:0000000000003EC6                 jmp     loc_3CDC
.text:0000000000003ECB ; ---------------------------------------------------------------------------
.text:0000000000003ECB
.text:0000000000003ECB loc_3ECB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000003ECB                 mov     eax, edx
.text:0000000000003ECD                 jmp     loc_3427
.text:0000000000003ED2 ; ---------------------------------------------------------------------------
.text:0000000000003ED2
.text:0000000000003ED2 loc_3ED2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003ED2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003ED6                 cmp     bl, 3Eh ; '>'
.text:0000000000003ED9                 ja      loc_3750
.text:0000000000003EDF                 mov     rax, 7000A38200000000h
.text:0000000000003EE9                 bt      rax, rbx
.text:0000000000003EED                 jnb     loc_3750
.text:0000000000003EF3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003EF8                 jnz     loc_40E2
.text:0000000000003EFE                 cmp     r13, r15
.text:0000000000003F01                 jbe     short loc_3F08
.text:0000000000003F03                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003F08
.text:0000000000003F08 loc_3F08:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003F08                 lea     rax, [r15+1]
.text:0000000000003F0C                 cmp     r13, rax
.text:0000000000003F0F                 jbe     short loc_3F17
.text:0000000000003F11                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003F17
.text:0000000000003F17 loc_3F17:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003F17                 lea     rax, [r15+2]
.text:0000000000003F1B                 cmp     r13, rax
.text:0000000000003F1E                 jbe     short loc_3F26
.text:0000000000003F20                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003F26
.text:0000000000003F26 loc_3F26:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003F26                 lea     rax, [r15+3]
.text:0000000000003F2A                 cmp     r13, rax
.text:0000000000003F2D                 jbe     short loc_3F35
.text:0000000000003F2F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003F35
.text:0000000000003F35 loc_3F35:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003F35                 add     r15, 4
.text:0000000000003F39                 xor     edx, edx
.text:0000000000003F3B                 xor     r12d, r12d
.text:0000000000003F3E                 xor     eax, eax
.text:0000000000003F40                 mov     rbp, rcx
.text:0000000000003F43                 jmp     loc_3108
.text:0000000000003F48 ; ---------------------------------------------------------------------------
.text:0000000000003F48
.text:0000000000003F48 loc_3F48:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003F48                                         ; DATA XREF: .rodata:jpt_2F71↓o
.text:0000000000003F48                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000003F4A                 jz      loc_40D8
.text:0000000000003F50                 lea     rax, asc_69E5   ; "'"
.text:0000000000003F57                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003F5C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003F61                 xor     r12d, r12d
.text:0000000000003F64                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003F6D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003F72                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003F77                 mov     [rsp+0E8h+n], 1
.text:0000000000003F80                 xor     r15d, r15d
.text:0000000000003F83                 mov     [rsp+0E8h+s2], rax
.text:0000000000003F88                 jmp     loc_2FB3
.text:0000000000003F88 ; ---------------------------------------------------------------------------
.text:0000000000003F8D                 align 10h
.text:0000000000003F90
.text:0000000000003F90 loc_3F90:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003F90                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003F90                 mov     rbp, r11
.text:0000000000003F93                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003F98                 jmp     loc_3A69
.text:0000000000003F9D ; ---------------------------------------------------------------------------
.text:0000000000003F9D
.text:0000000000003F9D loc_3F9D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000003F9D                 lea     rax, unk_69E3
.text:0000000000003FA4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003FA9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003FAE                 xor     r12d, r12d
.text:0000000000003FB1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003FBA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003FBF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003FC4                 mov     [rsp+0E8h+n], 1
.text:0000000000003FCD                 xor     r15d, r15d
.text:0000000000003FD0                 mov     [rsp+0E8h+s2], rax
.text:0000000000003FD5                 jmp     loc_2FB3
.text:0000000000003FDA ; ---------------------------------------------------------------------------
.text:0000000000003FDA
.text:0000000000003FDA loc_3FDA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000003FDA                 mov     eax, edx
.text:0000000000003FDC
.text:0000000000003FDC loc_3FDC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000003FDC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000003FDC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003FE1                 test    rbx, rbx
.text:0000000000003FE4                 jz      short loc_4012
.text:0000000000003FE6                 test    al, al
.text:0000000000003FE8                 jz      short loc_4012
.text:0000000000003FEA                 movzx   ecx, byte ptr [rbx]
.text:0000000000003FED                 mov     rax, rbx
.text:0000000000003FF0                 test    cl, cl
.text:0000000000003FF2                 jz      short loc_4012
.text:0000000000003FF4                 mov     rdx, r15
.text:0000000000003FF7                 sub     rax, r15
.text:0000000000003FFA
.text:0000000000003FFA loc_3FFA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000003FFA                 cmp     r13, rdx
.text:0000000000003FFD                 jbe     short loc_4003
.text:0000000000003FFF                 mov     [r14+rdx], cl
.text:0000000000004003
.text:0000000000004003 loc_4003:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000004003                 add     rdx, 1
.text:0000000000004007                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000400B                 test    cl, cl
.text:000000000000400D                 jnz     short loc_3FFA
.text:000000000000400F                 mov     r15, rdx
.text:0000000000004012
.text:0000000000004012 loc_4012:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000004012                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000004012                 cmp     r13, r15
.text:0000000000004015                 jbe     loc_3AB9
.text:000000000000401B                 mov     byte ptr [r14+r15], 0
.text:0000000000004020                 jmp     loc_3AB9
.text:0000000000004025 ; ---------------------------------------------------------------------------
.text:0000000000004025
.text:0000000000004025 loc_4025:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000004025                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000402A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000402F                 mov     rbp, r11
.text:0000000000004032                 setz    al
.text:0000000000004035                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004039                 jmp     loc_3A69
.text:000000000000403E ; ---------------------------------------------------------------------------
.text:000000000000403E
.text:000000000000403E loc_403E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000403E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004042                 mov     rdi, rcx
.text:0000000000004045                 call    gettext_quote
.text:000000000000404A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000404F                 jmp     loc_3CA6
.text:0000000000004054 ; ---------------------------------------------------------------------------
.text:0000000000004054
.text:0000000000004054 loc_4054:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000004054                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000004058                 mov     rdi, rcx
.text:000000000000405B                 call    gettext_quote
.text:0000000000004060                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004065                 jmp     loc_3CD1
.text:000000000000406A ; ---------------------------------------------------------------------------
.text:000000000000406A
.text:000000000000406A loc_406A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000406A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000406F                 mov     rbp, r11
.text:0000000000004072                 mov     eax, edx
.text:0000000000004074                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004078                 jmp     loc_3A69
.text:000000000000407D ; ---------------------------------------------------------------------------
.text:000000000000407D
.text:000000000000407D loc_407D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000407D                 sub     rsp, 8
.text:0000000000004081                 mov     r8d, 5
.text:0000000000004087                 mov     rcx, r11
.text:000000000000408A                 push    [rsp+0F0h+var_88]
.text:000000000000408E                 push    [rsp+0F8h+var_80]
.text:0000000000004092                 mov     rdi, r14
.text:0000000000004095                 push    [rsp+100h+var_C8]
.text:0000000000004099                 mov     r9d, [rsp+108h+var_70]
.text:00000000000040A1                 mov     rdx, [rsp+108h+s]
.text:00000000000040A6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000040AB                 call    quotearg_buffer_restyled
.text:00000000000040B0                 add     rsp, 20h
.text:00000000000040B4                 mov     r15, rax
.text:00000000000040B7                 jmp     loc_3AB9
.text:00000000000040BC ; ---------------------------------------------------------------------------
.text:00000000000040BC
.text:00000000000040BC loc_40BC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000040BC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000040C1                 jmp     loc_3FDC
.text:00000000000040C6 ; ---------------------------------------------------------------------------
.text:00000000000040C6
.text:00000000000040C6 loc_40C6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000040C6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000040CE                 jmp     loc_3A69
.text:00000000000040D3 ; ---------------------------------------------------------------------------
.text:00000000000040D3
.text:00000000000040D3 loc_40D3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000040D3                 call    ___stack_chk_fail
.text:00000000000040D8 ; ---------------------------------------------------------------------------
.text:00000000000040D8
.text:00000000000040D8 loc_40D8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000040D8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000040DD                 jmp     loc_3B51
.text:00000000000040E2 ; ---------------------------------------------------------------------------
.text:00000000000040E2
.text:00000000000040E2 loc_40E2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000040E2                 mov     rbp, r11
.text:00000000000040E5                 jmp     loc_3A80
.text:00000000000040EA ; ---------------------------------------------------------------------------
.text:00000000000040EA
.text:00000000000040EA loc_40EA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000040EA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000040EF                 xor     eax, eax
.text:00000000000040F1                 xor     r12d, r12d
.text:00000000000040F4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000040FD                 jmp     loc_36A4
.text:0000000000004102 ; ---------------------------------------------------------------------------
.text:0000000000004102
.text:0000000000004102 loc_4102:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000004102                 mov     rdx, r13
.text:0000000000004105                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000410A                 jmp     loc_3702
.text:000000000000410F ; ---------------------------------------------------------------------------
.text:000000000000410F
.text:000000000000410F def_2F71:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000410F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000410F ; } // starts at 2EE0
.text:000000000000410F quotearg_buffer_restyled endp
.text:000000000000410F
.text:000000000000410F ; ---------------------------------------------------------------------------
.text:0000000000004114                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120
.text:0000000000004120 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000004120                                         ; quotearg_n_mem+7↓j ...
.text:0000000000004120
.text:0000000000004120 var_50          = qword ptr -50h
.text:0000000000004120 var_48          = qword ptr -48h
.text:0000000000004120 var_40          = dword ptr -40h
.text:0000000000004120 var_3C          = dword ptr -3Ch
.text:0000000000004120
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 push    r15
.text:0000000000004122                 push    r14
.text:0000000000004124                 movsxd  r15, edi
.text:0000000000004127                 push    r13
.text:0000000000004129                 push    r12
.text:000000000000412B                 mov     r14, rdx
.text:000000000000412E                 push    rbp
.text:000000000000412F                 push    rbx
.text:0000000000004130                 mov     rbp, rcx
.text:0000000000004133                 sub     rsp, 28h
.text:0000000000004137                 mov     [rsp+58h+var_50], rsi
.text:000000000000413C                 call    ___errno_location
.text:0000000000004141                 mov     r13, rax
.text:0000000000004144                 mov     eax, [rax]
.text:0000000000004146                 test    r15d, r15d
.text:0000000000004149                 mov     rbx, cs:slotvec
.text:0000000000004150                 mov     [rsp+58h+var_40], eax
.text:0000000000004154                 js      loc_42C1
.text:000000000000415A                 cmp     cs:nslots, r15d
.text:0000000000004161                 jg      short loc_41C5
.text:0000000000004163                 cmp     r15d, 7FFFFFFFh
.text:000000000000416A                 jz      loc_42C6
.text:0000000000004170                 lea     r12d, [r15+1]
.text:0000000000004174                 lea     rax, slotvec0
.text:000000000000417B                 movsxd  rsi, r12d
.text:000000000000417E                 shl     rsi, 4
.text:0000000000004182                 cmp     rbx, rax
.text:0000000000004185                 jz      loc_42A0
.text:000000000000418B                 mov     rdi, rbx
.text:000000000000418E                 call    xrealloc
.text:0000000000004193                 mov     rbx, rax
.text:0000000000004196                 mov     cs:slotvec, rax
.text:000000000000419D
.text:000000000000419D loc_419D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000419D                 movsxd  rdi, cs:nslots
.text:00000000000041A4                 mov     edx, r12d
.text:00000000000041A7                 xor     esi, esi        ; c
.text:00000000000041A9                 sub     edx, edi
.text:00000000000041AB                 shl     rdi, 4
.text:00000000000041AF                 movsxd  rdx, edx
.text:00000000000041B2                 add     rdi, rbx        ; s
.text:00000000000041B5                 shl     rdx, 4          ; n
.text:00000000000041B9                 call    _memset
.text:00000000000041BE                 mov     cs:nslots, r12d
.text:00000000000041C5
.text:00000000000041C5 loc_41C5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000041C5                 mov     eax, [rbp+4]
.text:00000000000041C8                 shl     r15, 4
.text:00000000000041CC                 sub     rsp, 8
.text:00000000000041D0                 add     rbx, r15
.text:00000000000041D3                 lea     r15, [rbp+8]
.text:00000000000041D7                 mov     r8d, [rbp+0]
.text:00000000000041DB                 mov     r11, [rbx]
.text:00000000000041DE                 mov     r12, [rbx+8]
.text:00000000000041E2                 mov     rcx, r14
.text:00000000000041E5                 or      eax, 1
.text:00000000000041E8                 mov     [rsp+60h+var_3C], eax
.text:00000000000041EC                 push    qword ptr [rbp+30h]
.text:00000000000041EF                 mov     r9d, eax
.text:00000000000041F2                 push    qword ptr [rbp+28h]
.text:00000000000041F5                 push    r15
.text:00000000000041F7                 mov     rsi, r11
.text:00000000000041FA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000041FF                 mov     rdi, r12
.text:0000000000004202                 mov     [rsp+78h+var_48], r11
.text:0000000000004207                 call    quotearg_buffer_restyled
.text:000000000000420C                 add     rsp, 20h
.text:0000000000004210                 mov     r11, [rsp+58h+var_48]
.text:0000000000004215                 cmp     r11, rax
.text:0000000000004218                 ja      short loc_4281
.text:000000000000421A                 lea     rsi, [rax+1]
.text:000000000000421E                 lea     rax, slot0
.text:0000000000004225                 cmp     r12, rax
.text:0000000000004228                 mov     [rbx], rsi
.text:000000000000422B                 jz      short loc_423F
.text:000000000000422D                 mov     rdi, r12        ; ptr
.text:0000000000004230                 mov     [rsp+58h+var_48], rsi
.text:0000000000004235                 call    _free
.text:000000000000423A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000423F
.text:000000000000423F loc_423F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000423F                 mov     rdi, rsi
.text:0000000000004242                 mov     [rsp+58h+var_48], rsi
.text:0000000000004247                 call    xmalloc
.text:000000000000424C                 sub     rsp, 8
.text:0000000000004250                 mov     [rbx+8], rax
.text:0000000000004254                 mov     r8d, [rbp+0]
.text:0000000000004258                 push    qword ptr [rbp+30h]
.text:000000000000425B                 push    qword ptr [rbp+28h]
.text:000000000000425E                 mov     rcx, r14
.text:0000000000004261                 push    r15
.text:0000000000004263                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000004268                 mov     rdi, rax
.text:000000000000426B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000004270                 mov     rsi, [rsp+78h+var_48]
.text:0000000000004275                 mov     r12, rax
.text:0000000000004278                 call    quotearg_buffer_restyled
.text:000000000000427D                 add     rsp, 20h
.text:0000000000004281
.text:0000000000004281 loc_4281:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000004281                 mov     eax, [rsp+58h+var_40]
.text:0000000000004285                 mov     [r13+0], eax
.text:0000000000004289                 add     rsp, 28h
.text:000000000000428D                 mov     rax, r12
.text:0000000000004290                 pop     rbx
.text:0000000000004291                 pop     rbp
.text:0000000000004292                 pop     r12
.text:0000000000004294                 pop     r13
.text:0000000000004296                 pop     r14
.text:0000000000004298                 pop     r15
.text:000000000000429A                 retn
.text:000000000000429A ; ---------------------------------------------------------------------------
.text:000000000000429B                 align 20h
.text:00000000000042A0
.text:00000000000042A0 loc_42A0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000042A0                 xor     edi, edi
.text:00000000000042A2                 call    xrealloc
.text:00000000000042A7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000042AF                 mov     rbx, rax
.text:00000000000042B2                 mov     cs:slotvec, rax
.text:00000000000042B9                 movups  xmmword ptr [rax], xmm0
.text:00000000000042BC                 jmp     loc_419D
.text:00000000000042C1 ; ---------------------------------------------------------------------------
.text:00000000000042C1
.text:00000000000042C1 loc_42C1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000042C1                 call    _abort
.text:00000000000042C6 ; ---------------------------------------------------------------------------
.text:00000000000042C6
.text:00000000000042C6 loc_42C6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000042C6                 call    xalloc_die
.text:00000000000042C6 ; } // starts at 4120
.text:00000000000042C6 quotearg_n_options endp
.text:00000000000042C6
.text:00000000000042C6 ; ---------------------------------------------------------------------------
.text:00000000000042CB                 align 10h
.text:00000000000042D0
.text:00000000000042D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042D0
.text:00000000000042D0 ; Attributes: info_from_lumina
.text:00000000000042D0
.text:00000000000042D0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000042D0                 public clone_quoting_options
.text:00000000000042D0 clone_quoting_options proc near
.text:00000000000042D0 ; __unwind {
.text:00000000000042D0                 push    r12
.text:00000000000042D2                 push    rbp
.text:00000000000042D3                 push    rbx
.text:00000000000042D4                 mov     rbx, rdi
.text:00000000000042D7                 call    ___errno_location
.text:00000000000042DC                 mov     r12d, [rax]
.text:00000000000042DF                 mov     rbp, rax
.text:00000000000042E2                 lea     rax, default_quoting_options
.text:00000000000042E9                 test    rbx, rbx
.text:00000000000042EC                 mov     esi, 38h ; '8'  ; n
.text:00000000000042F1                 cmovz   rbx, rax
.text:00000000000042F5                 mov     rdi, rbx        ; src
.text:00000000000042F8                 call    xmemdup
.text:00000000000042FD                 mov     [rbp+0], r12d
.text:0000000000004301                 pop     rbx
.text:0000000000004302                 pop     rbp
.text:0000000000004303                 pop     r12
.text:0000000000004305                 retn
.text:0000000000004305 ; } // starts at 42D0
.text:0000000000004305 clone_quoting_options endp
.text:0000000000004305
.text:0000000000004305 ; ---------------------------------------------------------------------------
.text:0000000000004306                 align 10h
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310
.text:0000000000004310                 public get_quoting_style
.text:0000000000004310 get_quoting_style proc near
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 lea     rax, default_quoting_options
.text:0000000000004317                 test    rdi, rdi
.text:000000000000431A                 cmovz   rdi, rax
.text:000000000000431E                 mov     eax, [rdi]
.text:0000000000004320                 retn
.text:0000000000004320 ; } // starts at 4310
.text:0000000000004320 get_quoting_style endp
.text:0000000000004320
.text:0000000000004320 ; ---------------------------------------------------------------------------
.text:0000000000004321                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330
.text:0000000000004330                 public set_quoting_style
.text:0000000000004330 set_quoting_style proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 lea     rax, default_quoting_options
.text:0000000000004337                 test    rdi, rdi
.text:000000000000433A                 cmovz   rdi, rax
.text:000000000000433E                 mov     [rdi], esi
.text:0000000000004340                 retn
.text:0000000000004340 ; } // starts at 4330
.text:0000000000004340 set_quoting_style endp
.text:0000000000004340
.text:0000000000004340 ; ---------------------------------------------------------------------------
.text:0000000000004341                 align 10h
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350 ; Attributes: info_from_lumina
.text:0000000000004350
.text:0000000000004350 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000004350                 public set_char_quoting
.text:0000000000004350 set_char_quoting proc near
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 lea     rax, default_quoting_options
.text:0000000000004357                 test    rdi, rdi
.text:000000000000435A                 mov     ecx, esi
.text:000000000000435C                 cmovz   rdi, rax
.text:0000000000004360                 mov     eax, esi
.text:0000000000004362                 and     ecx, 1Fh
.text:0000000000004365                 shr     al, 5
.text:0000000000004368                 movzx   eax, al
.text:000000000000436B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000004370                 mov     esi, [rdi]
.text:0000000000004372                 mov     eax, esi
.text:0000000000004374                 shr     eax, cl
.text:0000000000004376                 xor     edx, eax
.text:0000000000004378                 and     eax, 1
.text:000000000000437B                 and     edx, 1
.text:000000000000437E                 shl     edx, cl
.text:0000000000004380                 xor     edx, esi
.text:0000000000004382                 mov     [rdi], edx
.text:0000000000004384                 retn
.text:0000000000004384 ; } // starts at 4350
.text:0000000000004384 set_char_quoting endp
.text:0000000000004384
.text:0000000000004384 ; ---------------------------------------------------------------------------
.text:0000000000004385                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390
.text:0000000000004390                 public set_quoting_flags
.text:0000000000004390 set_quoting_flags proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 lea     rax, default_quoting_options
.text:0000000000004397                 test    rdi, rdi
.text:000000000000439A                 cmovz   rdi, rax
.text:000000000000439E                 mov     eax, [rdi+4]
.text:00000000000043A1                 mov     [rdi+4], esi
.text:00000000000043A4                 retn
.text:00000000000043A4 ; } // starts at 4390
.text:00000000000043A4 set_quoting_flags endp
.text:00000000000043A4
.text:00000000000043A4 ; ---------------------------------------------------------------------------
.text:00000000000043A5                 align 10h
.text:00000000000043B0
.text:00000000000043B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043B0
.text:00000000000043B0 ; Attributes: info_from_lumina
.text:00000000000043B0
.text:00000000000043B0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000043B0                 public set_custom_quoting
.text:00000000000043B0 set_custom_quoting proc near
.text:00000000000043B0 ; __unwind {
.text:00000000000043B0                 lea     rax, default_quoting_options
.text:00000000000043B7                 test    rdi, rdi
.text:00000000000043BA                 cmovz   rdi, rax
.text:00000000000043BE                 test    rsi, rsi
.text:00000000000043C1                 mov     dword ptr [rdi], 0Ah
.text:00000000000043C7                 jz      short loc_43D7
.text:00000000000043C9                 test    rdx, rdx
.text:00000000000043CC                 jz      short loc_43D7
.text:00000000000043CE                 mov     [rdi+28h], rsi
.text:00000000000043D2                 mov     [rdi+30h], rdx
.text:00000000000043D6                 retn
.text:00000000000043D7 ; ---------------------------------------------------------------------------
.text:00000000000043D7
.text:00000000000043D7 loc_43D7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000043D7                                         ; set_custom_quoting+1C↑j
.text:00000000000043D7                 sub     rsp, 8
.text:00000000000043DB                 call    _abort
.text:00000000000043DB ; } // starts at 43B0
.text:00000000000043DB set_custom_quoting endp
.text:00000000000043DB
.text:00000000000043E0
.text:00000000000043E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043E0
.text:00000000000043E0 ; Attributes: info_from_lumina
.text:00000000000043E0
.text:00000000000043E0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000043E0                 public quotearg_buffer
.text:00000000000043E0 quotearg_buffer proc near
.text:00000000000043E0
.text:00000000000043E0 var_40          = qword ptr -40h
.text:00000000000043E0
.text:00000000000043E0 ; __unwind {
.text:00000000000043E0                 push    r15
.text:00000000000043E2                 push    r14
.text:00000000000043E4                 lea     rax, default_quoting_options
.text:00000000000043EB                 push    r13
.text:00000000000043ED                 push    r12
.text:00000000000043EF                 mov     r13, rdi
.text:00000000000043F2                 push    rbp
.text:00000000000043F3                 push    rbx
.text:00000000000043F4                 mov     rbx, r8
.text:00000000000043F7                 mov     r14, rsi
.text:00000000000043FA                 mov     r15, rdx
.text:00000000000043FD                 sub     rsp, 18h
.text:0000000000004401                 test    r8, r8
.text:0000000000004404                 cmovz   rbx, rax
.text:0000000000004408                 mov     [rsp+48h+var_40], rcx
.text:000000000000440D                 call    ___errno_location
.text:0000000000004412                 mov     r12d, [rax]
.text:0000000000004415                 mov     rbp, rax
.text:0000000000004418                 lea     rax, [rbx+8]
.text:000000000000441C                 sub     rsp, 8
.text:0000000000004420                 mov     r9d, [rbx+4]
.text:0000000000004424                 push    qword ptr [rbx+30h]
.text:0000000000004427                 mov     r8d, [rbx]
.text:000000000000442A                 push    qword ptr [rbx+28h]
.text:000000000000442D                 mov     rdx, r15
.text:0000000000004430                 push    rax
.text:0000000000004431                 mov     rcx, [rsp+68h+var_40]
.text:0000000000004436                 mov     rsi, r14
.text:0000000000004439                 mov     rdi, r13
.text:000000000000443C                 call    quotearg_buffer_restyled
.text:0000000000004441                 mov     [rbp+0], r12d
.text:0000000000004445                 add     rsp, 38h
.text:0000000000004449                 pop     rbx
.text:000000000000444A                 pop     rbp
.text:000000000000444B                 pop     r12
.text:000000000000444D                 pop     r13
.text:000000000000444F                 pop     r14
.text:0000000000004451                 pop     r15
.text:0000000000004453                 retn
.text:0000000000004453 ; } // starts at 43E0
.text:0000000000004453 quotearg_buffer endp
.text:0000000000004453
.text:0000000000004453 ; ---------------------------------------------------------------------------
.text:0000000000004454                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460 ; Attributes: info_from_lumina
.text:0000000000004460
.text:0000000000004460 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000004460                 public quotearg_alloc_mem
.text:0000000000004460 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000004460
.text:0000000000004460 var_5C          = dword ptr -5Ch
.text:0000000000004460 var_58          = qword ptr -58h
.text:0000000000004460 var_50          = qword ptr -50h
.text:0000000000004460 var_48          = qword ptr -48h
.text:0000000000004460 var_40          = qword ptr -40h
.text:0000000000004460
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 push    r15
.text:0000000000004462                 push    r14
.text:0000000000004464                 lea     rax, default_quoting_options
.text:000000000000446B                 push    r13
.text:000000000000446D                 push    r12
.text:000000000000446F                 mov     r12, rdx
.text:0000000000004472                 push    rbp
.text:0000000000004473                 push    rbx
.text:0000000000004474                 mov     rbx, rcx
.text:0000000000004477                 mov     r14, rdi
.text:000000000000447A                 mov     r15, rsi
.text:000000000000447D                 sub     rsp, 38h
.text:0000000000004481                 test    rcx, rcx
.text:0000000000004484                 cmovz   rbx, rax
.text:0000000000004488                 xor     ebp, ebp
.text:000000000000448A                 call    ___errno_location
.text:000000000000448F                 test    r12, r12
.text:0000000000004492                 mov     r13, rax
.text:0000000000004495                 mov     eax, [rax]
.text:0000000000004497                 setz    bpl
.text:000000000000449B                 or      ebp, [rbx+4]
.text:000000000000449E                 lea     r10, [rbx+8]
.text:00000000000044A2                 sub     rsp, 8
.text:00000000000044A6                 mov     r8d, [rbx]
.text:00000000000044A9                 mov     rcx, r15
.text:00000000000044AC                 mov     [rsp+70h+var_5C], eax
.text:00000000000044B0                 push    qword ptr [rbx+30h]
.text:00000000000044B3                 mov     rdx, r14
.text:00000000000044B6                 push    qword ptr [rbx+28h]
.text:00000000000044B9                 push    r10
.text:00000000000044BB                 xor     esi, esi
.text:00000000000044BD                 mov     r9d, ebp
.text:00000000000044C0                 xor     edi, edi
.text:00000000000044C2                 mov     [rsp+88h+var_48], r10
.text:00000000000044C7                 call    quotearg_buffer_restyled
.text:00000000000044CC                 lea     rsi, [rax+1]
.text:00000000000044D0                 mov     [rsp+88h+var_40], rax
.text:00000000000044D5                 add     rsp, 20h
.text:00000000000044D9                 mov     rdi, rsi
.text:00000000000044DC                 mov     [rsp+68h+var_50], rsi
.text:00000000000044E1                 call    xmalloc
.text:00000000000044E6                 mov     [rsp+68h+var_58], rax
.text:00000000000044EB                 sub     rsp, 8
.text:00000000000044EF                 push    qword ptr [rbx+30h]
.text:00000000000044F2                 push    qword ptr [rbx+28h]
.text:00000000000044F5                 mov     r10, [rsp+80h+var_48]
.text:00000000000044FA                 mov     r9d, ebp
.text:00000000000044FD                 mov     r8d, [rbx]
.text:0000000000004500                 mov     rcx, r15
.text:0000000000004503                 mov     rdx, r14
.text:0000000000004506                 mov     rdi, rax
.text:0000000000004509                 push    r10
.text:000000000000450B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000004510                 call    quotearg_buffer_restyled
.text:0000000000004515                 mov     eax, [rsp+88h+var_5C]
.text:0000000000004519                 add     rsp, 20h
.text:000000000000451D                 test    r12, r12
.text:0000000000004520                 mov     [r13+0], eax
.text:0000000000004524                 jz      short loc_452F
.text:0000000000004526                 mov     r11, [rsp+68h+var_40]
.text:000000000000452B                 mov     [r12], r11
.text:000000000000452F
.text:000000000000452F loc_452F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000452F                 mov     rax, [rsp+68h+var_58]
.text:0000000000004534                 add     rsp, 38h
.text:0000000000004538                 pop     rbx
.text:0000000000004539                 pop     rbp
.text:000000000000453A                 pop     r12
.text:000000000000453C                 pop     r13
.text:000000000000453E                 pop     r14
.text:0000000000004540                 pop     r15
.text:0000000000004542                 retn
.text:0000000000004542 ; } // starts at 4460
.text:0000000000004542 quotearg_alloc_mem endp
.text:0000000000004542
.text:0000000000004542 ; ---------------------------------------------------------------------------
.text:0000000000004543                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550                 public quotearg_alloc
.text:0000000000004550 quotearg_alloc  proc near
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 mov     rcx, rdx
.text:0000000000004553                 xor     edx, edx
.text:0000000000004555                 jmp     quotearg_alloc_mem
.text:0000000000004555 ; } // starts at 4550
.text:0000000000004555 quotearg_alloc  endp
.text:0000000000004555
.text:0000000000004555 ; ---------------------------------------------------------------------------
.text:000000000000455A                 align 20h
.text:0000000000004560
.text:0000000000004560 ; =============== S U B R O U T I N E =======================================
.text:0000000000004560
.text:0000000000004560 ; Attributes: info_from_lumina
.text:0000000000004560
.text:0000000000004560 ; void __cdecl quotearg_free()
.text:0000000000004560                 public quotearg_free
.text:0000000000004560 quotearg_free   proc near
.text:0000000000004560 ; __unwind {
.text:0000000000004560                 mov     eax, cs:nslots
.text:0000000000004566                 push    r12
.text:0000000000004568                 mov     r12, cs:slotvec
.text:000000000000456F                 push    rbp
.text:0000000000004570                 push    rbx
.text:0000000000004571                 cmp     eax, 1
.text:0000000000004574                 jle     short loc_45A1
.text:0000000000004576                 sub     eax, 2
.text:0000000000004579                 lea     rbx, [r12+18h]
.text:000000000000457E                 shl     rax, 4
.text:0000000000004582                 lea     rbp, [r12+rax+28h]
.text:0000000000004587                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004590
.text:0000000000004590 loc_4590:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000004590                 mov     rdi, [rbx]      ; ptr
.text:0000000000004593                 add     rbx, 10h
.text:0000000000004597                 call    _free
.text:000000000000459C                 cmp     rbx, rbp
.text:000000000000459F                 jnz     short loc_4590
.text:00000000000045A1
.text:00000000000045A1 loc_45A1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000045A1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000045A6                 lea     rbx, slot0
.text:00000000000045AD                 cmp     rdi, rbx
.text:00000000000045B0                 jz      short loc_45C9
.text:00000000000045B2                 call    _free
.text:00000000000045B7                 mov     cs:slotvec0, 100h
.text:00000000000045C2                 mov     cs:off_209098, rbx
.text:00000000000045C9
.text:00000000000045C9 loc_45C9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000045C9                 lea     rbx, slotvec0
.text:00000000000045D0                 cmp     r12, rbx
.text:00000000000045D3                 jz      short loc_45E4
.text:00000000000045D5                 mov     rdi, r12        ; ptr
.text:00000000000045D8                 call    _free
.text:00000000000045DD                 mov     cs:slotvec, rbx
.text:00000000000045E4
.text:00000000000045E4 loc_45E4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000045E4                 pop     rbx
.text:00000000000045E5                 mov     cs:nslots, 1
.text:00000000000045EF                 pop     rbp
.text:00000000000045F0                 pop     r12
.text:00000000000045F2                 retn
.text:00000000000045F2 ; } // starts at 4560
.text:00000000000045F2 quotearg_free   endp
.text:00000000000045F2
.text:00000000000045F2 ; ---------------------------------------------------------------------------
.text:00000000000045F3                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600
.text:0000000000004600                 public quotearg_n
.text:0000000000004600 quotearg_n      proc near
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 lea     rcx, default_quoting_options
.text:0000000000004607                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000460E                 jmp     quotearg_n_options
.text:000000000000460E ; } // starts at 4600
.text:000000000000460E quotearg_n      endp
.text:000000000000460E
.text:000000000000460E ; ---------------------------------------------------------------------------
.text:0000000000004613                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620
.text:0000000000004620                 public quotearg_n_mem
.text:0000000000004620 quotearg_n_mem  proc near
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 lea     rcx, default_quoting_options
.text:0000000000004627                 jmp     quotearg_n_options
.text:0000000000004627 ; } // starts at 4620
.text:0000000000004627 quotearg_n_mem  endp
.text:0000000000004627
.text:0000000000004627 ; ---------------------------------------------------------------------------
.text:000000000000462C                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630
.text:0000000000004630                 public quotearg
.text:0000000000004630 quotearg        proc near
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 lea     rcx, default_quoting_options
.text:0000000000004637                 mov     rsi, rdi
.text:000000000000463A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004641                 xor     edi, edi
.text:0000000000004643                 jmp     quotearg_n_options
.text:0000000000004643 ; } // starts at 4630
.text:0000000000004643 quotearg        endp
.text:0000000000004643
.text:0000000000004643 ; ---------------------------------------------------------------------------
.text:0000000000004648                 align 10h
.text:0000000000004650
.text:0000000000004650 ; =============== S U B R O U T I N E =======================================
.text:0000000000004650
.text:0000000000004650
.text:0000000000004650                 public quotearg_mem
.text:0000000000004650 quotearg_mem    proc near
.text:0000000000004650 ; __unwind {
.text:0000000000004650                 lea     rcx, default_quoting_options
.text:0000000000004657                 mov     rdx, rsi
.text:000000000000465A                 mov     rsi, rdi
.text:000000000000465D                 xor     edi, edi
.text:000000000000465F                 jmp     quotearg_n_options
.text:000000000000465F ; } // starts at 4650
.text:000000000000465F quotearg_mem    endp
.text:000000000000465F
.text:000000000000465F ; ---------------------------------------------------------------------------
.text:0000000000004664                 align 10h
.text:0000000000004670
.text:0000000000004670 ; =============== S U B R O U T I N E =======================================
.text:0000000000004670
.text:0000000000004670 ; Attributes: info_from_lumina
.text:0000000000004670
.text:0000000000004670 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000004670                 public quotearg_n_style
.text:0000000000004670 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000004670
.text:0000000000004670 var_48          = dword ptr -48h
.text:0000000000004670 var_44          = qword ptr -44h
.text:0000000000004670 var_3C          = qword ptr -3Ch
.text:0000000000004670 var_34          = qword ptr -34h
.text:0000000000004670 var_2C          = qword ptr -2Ch
.text:0000000000004670 var_24          = qword ptr -24h
.text:0000000000004670 var_1C          = qword ptr -1Ch
.text:0000000000004670 var_14          = dword ptr -14h
.text:0000000000004670 var_10          = qword ptr -10h
.text:0000000000004670
.text:0000000000004670 ; __unwind {
.text:0000000000004670                 sub     rsp, 48h
.text:0000000000004674                 mov     rax, rdx
.text:0000000000004677                 mov     rdx, fs:28h
.text:0000000000004680                 mov     [rsp+48h+var_10], rdx
.text:0000000000004685                 xor     edx, edx
.text:0000000000004687                 cmp     esi, 0Ah
.text:000000000000468A                 jz      short loc_46F4
.text:000000000000468C                 mov     [rsp+48h+var_48], esi
.text:000000000000468F                 mov     rcx, rsp
.text:0000000000004692                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004699                 mov     rsi, rax
.text:000000000000469C                 mov     [rsp+48h+var_44], 0
.text:00000000000046A5                 mov     [rsp+48h+var_3C], 0
.text:00000000000046AE                 mov     [rsp+48h+var_34], 0
.text:00000000000046B7                 mov     [rsp+48h+var_2C], 0
.text:00000000000046C0                 mov     [rsp+48h+var_24], 0
.text:00000000000046C9                 mov     [rsp+48h+var_1C], 0
.text:00000000000046D2                 mov     [rsp+48h+var_14], 0
.text:00000000000046DA                 call    quotearg_n_options
.text:00000000000046DF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000046E4                 xor     rcx, fs:28h
.text:00000000000046ED                 jnz     short loc_46F9
.text:00000000000046EF                 add     rsp, 48h
.text:00000000000046F3                 retn
.text:00000000000046F4 ; ---------------------------------------------------------------------------
.text:00000000000046F4
.text:00000000000046F4 loc_46F4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000046F4                 call    _abort
.text:00000000000046F9 ; ---------------------------------------------------------------------------
.text:00000000000046F9
.text:00000000000046F9 loc_46F9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000046F9                 call    ___stack_chk_fail
.text:00000000000046F9 ; } // starts at 4670
.text:00000000000046F9 quotearg_n_style endp
.text:00000000000046F9
.text:00000000000046F9 ; ---------------------------------------------------------------------------
.text:00000000000046FE                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: info_from_lumina
.text:0000000000004700
.text:0000000000004700 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000004700                 public quotearg_n_style_mem
.text:0000000000004700 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000004700
.text:0000000000004700 var_48          = dword ptr -48h
.text:0000000000004700 var_44          = qword ptr -44h
.text:0000000000004700 var_3C          = qword ptr -3Ch
.text:0000000000004700 var_34          = qword ptr -34h
.text:0000000000004700 var_2C          = qword ptr -2Ch
.text:0000000000004700 var_24          = qword ptr -24h
.text:0000000000004700 var_1C          = qword ptr -1Ch
.text:0000000000004700 var_14          = dword ptr -14h
.text:0000000000004700 var_10          = qword ptr -10h
.text:0000000000004700
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 sub     rsp, 48h
.text:0000000000004704                 mov     rax, rdx
.text:0000000000004707                 mov     rdx, rcx
.text:000000000000470A                 mov     rcx, fs:28h
.text:0000000000004713                 mov     [rsp+48h+var_10], rcx
.text:0000000000004718                 xor     ecx, ecx
.text:000000000000471A                 cmp     esi, 0Ah
.text:000000000000471D                 jz      short loc_4780
.text:000000000000471F                 mov     [rsp+48h+var_48], esi
.text:0000000000004722                 mov     rcx, rsp
.text:0000000000004725                 mov     rsi, rax
.text:0000000000004728                 mov     [rsp+48h+var_44], 0
.text:0000000000004731                 mov     [rsp+48h+var_3C], 0
.text:000000000000473A                 mov     [rsp+48h+var_34], 0
.text:0000000000004743                 mov     [rsp+48h+var_2C], 0
.text:000000000000474C                 mov     [rsp+48h+var_24], 0
.text:0000000000004755                 mov     [rsp+48h+var_1C], 0
.text:000000000000475E                 mov     [rsp+48h+var_14], 0
.text:0000000000004766                 call    quotearg_n_options
.text:000000000000476B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000004770                 xor     rdx, fs:28h
.text:0000000000004779                 jnz     short loc_4785
.text:000000000000477B                 add     rsp, 48h
.text:000000000000477F                 retn
.text:0000000000004780 ; ---------------------------------------------------------------------------
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000004780                 call    _abort
.text:0000000000004785 ; ---------------------------------------------------------------------------
.text:0000000000004785
.text:0000000000004785 loc_4785:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000004785                 call    ___stack_chk_fail
.text:0000000000004785 ; } // starts at 4700
.text:0000000000004785 quotearg_n_style_mem endp
.text:0000000000004785
.text:0000000000004785 ; ---------------------------------------------------------------------------
.text:000000000000478A                 align 10h
.text:0000000000004790
.text:0000000000004790 ; =============== S U B R O U T I N E =======================================
.text:0000000000004790
.text:0000000000004790
.text:0000000000004790                 public quotearg_style
.text:0000000000004790 quotearg_style  proc near
.text:0000000000004790 ; __unwind {
.text:0000000000004790                 mov     rdx, rsi
.text:0000000000004793                 mov     esi, edi
.text:0000000000004795                 xor     edi, edi
.text:0000000000004797                 jmp     quotearg_n_style
.text:0000000000004797 ; } // starts at 4790
.text:0000000000004797 quotearg_style  endp
.text:0000000000004797
.text:0000000000004797 ; ---------------------------------------------------------------------------
.text:000000000000479C                 align 20h
.text:00000000000047A0
.text:00000000000047A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047A0
.text:00000000000047A0
.text:00000000000047A0                 public quotearg_style_mem
.text:00000000000047A0 quotearg_style_mem proc near
.text:00000000000047A0 ; __unwind {
.text:00000000000047A0                 mov     rcx, rdx
.text:00000000000047A3                 mov     rdx, rsi
.text:00000000000047A6                 mov     esi, edi
.text:00000000000047A8                 xor     edi, edi
.text:00000000000047AA                 jmp     quotearg_n_style_mem
.text:00000000000047AA ; } // starts at 47A0
.text:00000000000047AA quotearg_style_mem endp
.text:00000000000047AA
.text:00000000000047AA ; ---------------------------------------------------------------------------
.text:00000000000047AF                 align 10h
.text:00000000000047B0
.text:00000000000047B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047B0
.text:00000000000047B0 ; Attributes: info_from_lumina
.text:00000000000047B0
.text:00000000000047B0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000047B0                 public quotearg_char_mem
.text:00000000000047B0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000047B0                                         ; quotearg_colon+C↓j ...
.text:00000000000047B0
.text:00000000000047B0 var_48          = xmmword ptr -48h
.text:00000000000047B0 var_38          = xmmword ptr -38h
.text:00000000000047B0 var_28          = xmmword ptr -28h
.text:00000000000047B0 var_18          = qword ptr -18h
.text:00000000000047B0 var_10          = qword ptr -10h
.text:00000000000047B0
.text:00000000000047B0 ; __unwind {
.text:00000000000047B0                 sub     rsp, 48h
.text:00000000000047B4                 mov     ecx, edx
.text:00000000000047B6                 mov     rax, fs:28h
.text:00000000000047BF                 mov     [rsp+48h+var_10], rax
.text:00000000000047C4                 xor     eax, eax
.text:00000000000047C6                 mov     rax, cs:qword_209290
.text:00000000000047CD                 mov     r8, rsp
.text:00000000000047D0                 and     ecx, 1Fh
.text:00000000000047D3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000047DB                 mov     [rsp+48h+var_18], rax
.text:00000000000047E0                 mov     eax, edx
.text:00000000000047E2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000047E6                 shr     al, 5
.text:00000000000047E9                 movzx   eax, al
.text:00000000000047EC                 lea     r9, [r8+rax*4+8]
.text:00000000000047F1                 movdqa  xmm0, cs:xmmword_209270
.text:00000000000047F9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000047FE                 movdqa  xmm0, cs:xmmword_209280
.text:0000000000004806                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000480B                 mov     edx, [r9]
.text:000000000000480E                 mov     eax, edx
.text:0000000000004810                 shr     eax, cl
.text:0000000000004812                 not     eax
.text:0000000000004814                 and     eax, 1
.text:0000000000004817                 shl     eax, cl
.text:0000000000004819                 mov     rcx, r8
.text:000000000000481C                 xor     eax, edx
.text:000000000000481E                 mov     rdx, rsi
.text:0000000000004821                 mov     rsi, rdi
.text:0000000000004824                 mov     [r9], eax
.text:0000000000004827                 xor     edi, edi
.text:0000000000004829                 call    quotearg_n_options
.text:000000000000482E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000004833                 xor     rsi, fs:28h
.text:000000000000483C                 jnz     short loc_4843
.text:000000000000483E                 add     rsp, 48h
.text:0000000000004842                 retn
.text:0000000000004843 ; ---------------------------------------------------------------------------
.text:0000000000004843
.text:0000000000004843 loc_4843:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000004843                 call    ___stack_chk_fail
.text:0000000000004843 ; } // starts at 47B0
.text:0000000000004843 quotearg_char_mem endp
.text:0000000000004843
.text:0000000000004843 ; ---------------------------------------------------------------------------
.text:0000000000004848                 align 10h
.text:0000000000004850
.text:0000000000004850 ; =============== S U B R O U T I N E =======================================
.text:0000000000004850
.text:0000000000004850
.text:0000000000004850                 public quotearg_char
.text:0000000000004850 quotearg_char   proc near
.text:0000000000004850 ; __unwind {
.text:0000000000004850                 movsx   edx, sil
.text:0000000000004854                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000485B                 jmp     quotearg_char_mem
.text:000000000000485B ; } // starts at 4850
.text:000000000000485B quotearg_char   endp
.text:000000000000485B
.text:0000000000004860
.text:0000000000004860 ; =============== S U B R O U T I N E =======================================
.text:0000000000004860
.text:0000000000004860
.text:0000000000004860                 public quotearg_colon
.text:0000000000004860 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000004860 ; __unwind {
.text:0000000000004860                 mov     edx, 3Ah ; ':'
.text:0000000000004865                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000486C                 jmp     quotearg_char_mem
.text:000000000000486C ; } // starts at 4860
.text:000000000000486C quotearg_colon  endp
.text:000000000000486C
.text:000000000000486C ; ---------------------------------------------------------------------------
.text:0000000000004871                 align 20h
.text:0000000000004880
.text:0000000000004880 ; =============== S U B R O U T I N E =======================================
.text:0000000000004880
.text:0000000000004880
.text:0000000000004880                 public quotearg_colon_mem
.text:0000000000004880 quotearg_colon_mem proc near
.text:0000000000004880 ; __unwind {
.text:0000000000004880                 mov     edx, 3Ah ; ':'
.text:0000000000004885                 jmp     quotearg_char_mem
.text:0000000000004885 ; } // starts at 4880
.text:0000000000004885 quotearg_colon_mem endp
.text:0000000000004885
.text:0000000000004885 ; ---------------------------------------------------------------------------
.text:000000000000488A                 align 10h
.text:0000000000004890
.text:0000000000004890 ; =============== S U B R O U T I N E =======================================
.text:0000000000004890
.text:0000000000004890 ; Attributes: info_from_lumina
.text:0000000000004890
.text:0000000000004890 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000004890                 public quotearg_n_style_colon
.text:0000000000004890 quotearg_n_style_colon proc near
.text:0000000000004890
.text:0000000000004890 var_48          = dword ptr -48h
.text:0000000000004890 var_44          = qword ptr -44h
.text:0000000000004890 var_3C          = qword ptr -3Ch
.text:0000000000004890 var_34          = qword ptr -34h
.text:0000000000004890 var_2C          = qword ptr -2Ch
.text:0000000000004890 var_24          = qword ptr -24h
.text:0000000000004890 var_1C          = qword ptr -1Ch
.text:0000000000004890 var_14          = dword ptr -14h
.text:0000000000004890 var_10          = qword ptr -10h
.text:0000000000004890
.text:0000000000004890 ; __unwind {
.text:0000000000004890                 sub     rsp, 48h
.text:0000000000004894                 mov     rax, rdx
.text:0000000000004897                 mov     rdx, fs:28h
.text:00000000000048A0                 mov     [rsp+48h+var_10], rdx
.text:00000000000048A5                 xor     edx, edx
.text:00000000000048A7                 cmp     esi, 0Ah
.text:00000000000048AA                 jz      short loc_4914
.text:00000000000048AC                 mov     [rsp+48h+var_48], esi
.text:00000000000048AF                 mov     rcx, rsp
.text:00000000000048B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000048B9                 mov     rsi, rax
.text:00000000000048BC                 mov     [rsp+48h+var_44], 0
.text:00000000000048C5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000048CE                 mov     [rsp+48h+var_34], 0
.text:00000000000048D7                 mov     [rsp+48h+var_2C], 0
.text:00000000000048E0                 mov     [rsp+48h+var_24], 0
.text:00000000000048E9                 mov     [rsp+48h+var_1C], 0
.text:00000000000048F2                 mov     [rsp+48h+var_14], 0
.text:00000000000048FA                 call    quotearg_n_options
.text:00000000000048FF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000004904                 xor     rcx, fs:28h
.text:000000000000490D                 jnz     short loc_4919
.text:000000000000490F                 add     rsp, 48h
.text:0000000000004913                 retn
.text:0000000000004914 ; ---------------------------------------------------------------------------
.text:0000000000004914
.text:0000000000004914 loc_4914:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000004914                 call    _abort
.text:0000000000004919 ; ---------------------------------------------------------------------------
.text:0000000000004919
.text:0000000000004919 loc_4919:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000004919                 call    ___stack_chk_fail
.text:0000000000004919 ; } // starts at 4890
.text:0000000000004919 quotearg_n_style_colon endp
.text:0000000000004919
.text:0000000000004919 ; ---------------------------------------------------------------------------
.text:000000000000491E                 align 20h
.text:0000000000004920
.text:0000000000004920 ; =============== S U B R O U T I N E =======================================
.text:0000000000004920
.text:0000000000004920 ; Attributes: info_from_lumina
.text:0000000000004920
.text:0000000000004920 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000004920                 public quotearg_n_custom_mem
.text:0000000000004920 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000004920                                         ; quotearg_custom+12↓j ...
.text:0000000000004920
.text:0000000000004920 var_48          = xmmword ptr -48h
.text:0000000000004920 var_38          = xmmword ptr -38h
.text:0000000000004920 var_28          = xmmword ptr -28h
.text:0000000000004920 var_18          = qword ptr -18h
.text:0000000000004920 var_10          = qword ptr -10h
.text:0000000000004920
.text:0000000000004920 ; __unwind {
.text:0000000000004920                 sub     rsp, 48h
.text:0000000000004924                 mov     r9, rcx
.text:0000000000004927                 mov     rcx, cs:qword_209290
.text:000000000000492E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000004936                 mov     rax, fs:28h
.text:000000000000493F                 mov     [rsp+48h+var_10], rax
.text:0000000000004944                 xor     eax, eax
.text:0000000000004946                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000494A                 test    rsi, rsi
.text:000000000000494D                 mov     [rsp+48h+var_18], rcx
.text:0000000000004952                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000004959                 movdqa  xmm0, cs:xmmword_209270
.text:0000000000004961                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000004966                 movdqa  xmm0, cs:xmmword_209280
.text:000000000000496E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000004973                 jz      short loc_49A7
.text:0000000000004975                 test    rdx, rdx
.text:0000000000004978                 jz      short loc_49A7
.text:000000000000497A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000497F                 mov     [rsp+48h+var_18], rdx
.text:0000000000004984                 mov     rcx, rsp
.text:0000000000004987                 mov     rdx, r8
.text:000000000000498A                 mov     rsi, r9
.text:000000000000498D                 call    quotearg_n_options
.text:0000000000004992                 mov     rdi, [rsp+48h+var_10]
.text:0000000000004997                 xor     rdi, fs:28h
.text:00000000000049A0                 jnz     short loc_49AC
.text:00000000000049A2                 add     rsp, 48h
.text:00000000000049A6                 retn
.text:00000000000049A7 ; ---------------------------------------------------------------------------
.text:00000000000049A7
.text:00000000000049A7 loc_49A7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000049A7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000049A7                 call    _abort
.text:00000000000049AC ; ---------------------------------------------------------------------------
.text:00000000000049AC
.text:00000000000049AC loc_49AC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000049AC                 call    ___stack_chk_fail
.text:00000000000049AC ; } // starts at 4920
.text:00000000000049AC quotearg_n_custom_mem endp
.text:00000000000049AC
.text:00000000000049AC ; ---------------------------------------------------------------------------
.text:00000000000049B1                 align 20h
.text:00000000000049C0
.text:00000000000049C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049C0
.text:00000000000049C0
.text:00000000000049C0                 public quotearg_n_custom
.text:00000000000049C0 quotearg_n_custom proc near
.text:00000000000049C0 ; __unwind {
.text:00000000000049C0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000049C7                 jmp     quotearg_n_custom_mem
.text:00000000000049C7 ; } // starts at 49C0
.text:00000000000049C7 quotearg_n_custom endp
.text:00000000000049C7
.text:00000000000049C7 ; ---------------------------------------------------------------------------
.text:00000000000049CC                 align 10h
.text:00000000000049D0
.text:00000000000049D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049D0
.text:00000000000049D0
.text:00000000000049D0                 public quotearg_custom
.text:00000000000049D0 quotearg_custom proc near
.text:00000000000049D0 ; __unwind {
.text:00000000000049D0                 mov     rcx, rdx
.text:00000000000049D3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000049DA                 mov     rdx, rsi
.text:00000000000049DD                 mov     rsi, rdi
.text:00000000000049E0                 xor     edi, edi
.text:00000000000049E2                 jmp     quotearg_n_custom_mem
.text:00000000000049E2 ; } // starts at 49D0
.text:00000000000049E2 quotearg_custom endp
.text:00000000000049E2
.text:00000000000049E2 ; ---------------------------------------------------------------------------
.text:00000000000049E7                 align 10h
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0
.text:00000000000049F0                 public quotearg_custom_mem
.text:00000000000049F0 quotearg_custom_mem proc near
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 mov     r8, rcx
.text:00000000000049F3                 mov     rcx, rdx
.text:00000000000049F6                 mov     rdx, rsi
.text:00000000000049F9                 mov     rsi, rdi
.text:00000000000049FC                 xor     edi, edi
.text:00000000000049FE                 jmp     quotearg_n_custom_mem
.text:00000000000049FE ; } // starts at 49F0
.text:00000000000049FE quotearg_custom_mem endp
.text:00000000000049FE
.text:00000000000049FE ; ---------------------------------------------------------------------------
.text:0000000000004A03                 align 10h
.text:0000000000004A10
.text:0000000000004A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A10
.text:0000000000004A10
.text:0000000000004A10                 public quote_n_mem
.text:0000000000004A10 quote_n_mem     proc near
.text:0000000000004A10 ; __unwind {
.text:0000000000004A10                 lea     rcx, quote_quoting_options
.text:0000000000004A17                 jmp     quotearg_n_options
.text:0000000000004A17 ; } // starts at 4A10
.text:0000000000004A17 quote_n_mem     endp
.text:0000000000004A17
.text:0000000000004A17 ; ---------------------------------------------------------------------------
.text:0000000000004A1C                 align 20h
.text:0000000000004A20
.text:0000000000004A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A20
.text:0000000000004A20
.text:0000000000004A20                 public quote_mem
.text:0000000000004A20 quote_mem       proc near
.text:0000000000004A20 ; __unwind {
.text:0000000000004A20                 lea     rcx, quote_quoting_options
.text:0000000000004A27                 mov     rdx, rsi
.text:0000000000004A2A                 mov     rsi, rdi
.text:0000000000004A2D                 xor     edi, edi
.text:0000000000004A2F                 jmp     quotearg_n_options
.text:0000000000004A2F ; } // starts at 4A20
.text:0000000000004A2F quote_mem       endp
.text:0000000000004A2F
.text:0000000000004A2F ; ---------------------------------------------------------------------------
.text:0000000000004A34                 align 20h
.text:0000000000004A40
.text:0000000000004A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A40
.text:0000000000004A40
.text:0000000000004A40                 public quote_n
.text:0000000000004A40 quote_n         proc near
.text:0000000000004A40 ; __unwind {
.text:0000000000004A40                 lea     rcx, quote_quoting_options
.text:0000000000004A47                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A4E                 jmp     quotearg_n_options
.text:0000000000004A4E ; } // starts at 4A40
.text:0000000000004A4E quote_n         endp
.text:0000000000004A4E
.text:0000000000004A4E ; ---------------------------------------------------------------------------
.text:0000000000004A53                 align 20h
.text:0000000000004A60
.text:0000000000004A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A60
.text:0000000000004A60
.text:0000000000004A60                 public quote
.text:0000000000004A60 quote           proc near               ; CODE XREF: main+1EC↑p
.text:0000000000004A60                                         ; print_stuff+533↑p ...
.text:0000000000004A60 ; __unwind {
.text:0000000000004A60                 lea     rcx, quote_quoting_options
.text:0000000000004A67                 mov     rsi, rdi
.text:0000000000004A6A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A71                 xor     edi, edi
.text:0000000000004A73                 jmp     quotearg_n_options
.text:0000000000004A73 ; } // starts at 4A60
.text:0000000000004A73 quote           endp
.text:0000000000004A73
.text:0000000000004A73 ; ---------------------------------------------------------------------------
.text:0000000000004A78                 align 20h
.text:0000000000004A80
.text:0000000000004A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A80
.text:0000000000004A80
.text:0000000000004A80 parse_with_separator proc near          ; CODE XREF: parse_user_spec+45↓p
.text:0000000000004A80                                         ; parse_user_spec+85↓p ...
.text:0000000000004A80
.text:0000000000004A80 msgid           = qword ptr -88h
.text:0000000000004A80 name            = qword ptr -80h
.text:0000000000004A80 var_78          = qword ptr -78h
.text:0000000000004A80 var_70          = dword ptr -70h
.text:0000000000004A80 var_6A          = byte ptr -6Ah
.text:0000000000004A80 var_69          = byte ptr -69h
.text:0000000000004A80 var_60          = qword ptr -60h
.text:0000000000004A80 var_58          = byte ptr -58h
.text:0000000000004A80 var_40          = qword ptr -40h
.text:0000000000004A80
.text:0000000000004A80 ; __unwind {
.text:0000000000004A80                 push    r15
.text:0000000000004A82                 push    r14
.text:0000000000004A84                 mov     r10, rsi
.text:0000000000004A87                 push    r13
.text:0000000000004A89                 push    r12
.text:0000000000004A8B                 mov     r12, rcx
.text:0000000000004A8E                 push    rbp
.text:0000000000004A8F                 push    rbx
.text:0000000000004A90                 mov     r13, r8
.text:0000000000004A93                 mov     r14, r9
.text:0000000000004A96                 mov     r15d, 0FFFFFFFFh
.text:0000000000004A9C                 sub     rsp, 58h
.text:0000000000004AA0                 mov     eax, [rdx]
.text:0000000000004AA2                 mov     rcx, fs:28h
.text:0000000000004AAB                 mov     [rsp+88h+var_40], rcx
.text:0000000000004AB0                 xor     ecx, ecx
.text:0000000000004AB2                 test    r12, r12
.text:0000000000004AB5                 mov     [rsp+88h+var_78], rdx
.text:0000000000004ABA                 mov     [rsp+88h+var_70], eax
.text:0000000000004ABE                 jz      short loc_4AC4
.text:0000000000004AC0                 mov     r15d, [r12]
.text:0000000000004AC4
.text:0000000000004AC4 loc_4AC4:                               ; CODE XREF: parse_with_separator+3E↑j
.text:0000000000004AC4                 test    r13, r13
.text:0000000000004AC7                 jz      short loc_4AD1
.text:0000000000004AC9                 mov     qword ptr [r13+0], 0
.text:0000000000004AD1
.text:0000000000004AD1 loc_4AD1:                               ; CODE XREF: parse_with_separator+47↑j
.text:0000000000004AD1                 test    r14, r14
.text:0000000000004AD4                 jz      short loc_4ADD
.text:0000000000004AD6                 mov     qword ptr [r14], 0
.text:0000000000004ADD
.text:0000000000004ADD loc_4ADD:                               ; CODE XREF: parse_with_separator+54↑j
.text:0000000000004ADD                 test    r10, r10
.text:0000000000004AE0                 jz      loc_4C78
.text:0000000000004AE6                 mov     rbx, r10
.text:0000000000004AE9                 sub     rbx, rdi
.text:0000000000004AEC                 jnz     loc_4BC0
.text:0000000000004AF2                 cmp     byte ptr [r10+1], 0
.text:0000000000004AF7                 jz      loc_4D08
.text:0000000000004AFD                 add     r10, 1
.text:0000000000004B01                 mov     [rsp+88h+msgid], 0
.text:0000000000004B09                 setnz   [rsp+88h+var_6A]
.text:0000000000004B0E                 mov     [rsp+88h+name], r10
.text:0000000000004B13                 xor     ebp, ebp
.text:0000000000004B15                 xor     ebx, ebx
.text:0000000000004B17
.text:0000000000004B17 loc_4B17:                               ; CODE XREF: parse_with_separator+1C4↓j
.text:0000000000004B17                                         ; parse_with_separator+1F0↓j ...
.text:0000000000004B17                 cmp     [rsp+88h+var_6A], 0
.text:0000000000004B1C                 jz      loc_4E10
.text:0000000000004B22                 mov     rax, [rsp+88h+name]
.text:0000000000004B27                 cmp     byte ptr [rax], 2Bh ; '+'
.text:0000000000004B2A                 jz      loc_4CA0
.text:0000000000004B30                 mov     rdi, [rsp+88h+name] ; name
.text:0000000000004B35                 call    _getgrnam
.text:0000000000004B3A                 test    rax, rax
.text:0000000000004B3D                 jz      loc_4CA0
.text:0000000000004B43                 mov     r15d, [rax+10h]
.text:0000000000004B47
.text:0000000000004B47 loc_4B47:                               ; CODE XREF: parse_with_separator+2A8↓j
.text:0000000000004B47                 call    _endgrent
.text:0000000000004B4C                 mov     rdi, [rsp+88h+name] ; src
.text:0000000000004B51                 call    xstrdup
.text:0000000000004B56                 mov     rbx, rax
.text:0000000000004B59
.text:0000000000004B59 loc_4B59:                               ; CODE XREF: parse_with_separator+39B↓j
.text:0000000000004B59                 mov     r10, rbp
.text:0000000000004B5C
.text:0000000000004B5C loc_4B5C:                               ; CODE XREF: parse_with_separator+1FD↓j
.text:0000000000004B5C                                         ; parse_with_separator+28D↓j
.text:0000000000004B5C                 mov     rax, [rsp+88h+var_78]
.text:0000000000004B61                 mov     esi, [rsp+88h+var_70]
.text:0000000000004B65                 test    r12, r12
.text:0000000000004B68                 mov     [rax], esi
.text:0000000000004B6A                 jz      short loc_4B70
.text:0000000000004B6C                 mov     [r12], r15d
.text:0000000000004B70
.text:0000000000004B70 loc_4B70:                               ; CODE XREF: parse_with_separator+EA↑j
.text:0000000000004B70                 test    r13, r13
.text:0000000000004B73                 jz      short loc_4B7C
.text:0000000000004B75                 mov     [r13+0], r10
.text:0000000000004B79                 xor     r10d, r10d
.text:0000000000004B7C
.text:0000000000004B7C loc_4B7C:                               ; CODE XREF: parse_with_separator+F3↑j
.text:0000000000004B7C                 test    r14, r14
.text:0000000000004B7F                 jz      short loc_4B86
.text:0000000000004B81                 mov     [r14], rbx
.text:0000000000004B84                 xor     ebx, ebx
.text:0000000000004B86
.text:0000000000004B86 loc_4B86:                               ; CODE XREF: parse_with_separator+FF↑j
.text:0000000000004B86                 mov     rdi, r10        ; ptr
.text:0000000000004B89                 call    _free
.text:0000000000004B8E                 mov     rdi, rbx        ; src
.text:0000000000004B91                 call    _free
.text:0000000000004B96                 xor     eax, eax
.text:0000000000004B98
.text:0000000000004B98 loc_4B98:                               ; CODE XREF: parse_with_separator+27E↓j
.text:0000000000004B98                 mov     rdx, [rsp+88h+var_40]
.text:0000000000004B9D                 xor     rdx, fs:28h
.text:0000000000004BA6                 jnz     loc_4E35
.text:0000000000004BAC                 add     rsp, 58h
.text:0000000000004BB0                 pop     rbx
.text:0000000000004BB1                 pop     rbp
.text:0000000000004BB2                 pop     r12
.text:0000000000004BB4                 pop     r13
.text:0000000000004BB6                 pop     r14
.text:0000000000004BB8                 pop     r15
.text:0000000000004BBA                 retn
.text:0000000000004BBA ; ---------------------------------------------------------------------------
.text:0000000000004BBB                 align 20h
.text:0000000000004BC0
.text:0000000000004BC0 loc_4BC0:                               ; CODE XREF: parse_with_separator+6C↑j
.text:0000000000004BC0                 lea     rsi, [rbx+1]    ; n
.text:0000000000004BC4                 mov     [rsp+88h+msgid], r10
.text:0000000000004BC8                 call    xmemdup
.text:0000000000004BCD                 mov     r10, [rsp+88h+msgid]
.text:0000000000004BD1                 mov     byte ptr [rax+rbx], 0
.text:0000000000004BD5                 mov     rbp, rax
.text:0000000000004BD8                 cmp     byte ptr [r10+1], 0
.text:0000000000004BDD                 jnz     loc_4D30
.text:0000000000004BE3
.text:0000000000004BE3 loc_4BE3:                               ; CODE XREF: parse_with_separator+213↓j
.text:0000000000004BE3                 test    rbp, rbp
.text:0000000000004BE6                 jz      loc_4D08
.text:0000000000004BEC                 mov     [rsp+88h+var_6A], 0
.text:0000000000004BF1                 mov     eax, 1
.text:0000000000004BF6                 mov     [rsp+88h+name], 0
.text:0000000000004BFF
.text:0000000000004BFF loc_4BFF:                               ; CODE XREF: parse_with_separator+2D0↓j
.text:0000000000004BFF                 test    r10, r10
.text:0000000000004C02                 setnz   r9b
.text:0000000000004C06                 and     r9d, eax
.text:0000000000004C09                 cmp     byte ptr [rbp+0], 2Bh ; '+'
.text:0000000000004C0D                 jz      short loc_4C50
.text:0000000000004C0F                 mov     rdi, rbp        ; src
.text:0000000000004C12                 mov     byte ptr [rsp+88h+msgid], r9b
.text:0000000000004C16                 call    _getpwnam
.text:0000000000004C1B                 test    rax, rax
.text:0000000000004C1E                 movzx   r9d, byte ptr [rsp+88h+msgid]
.text:0000000000004C23                 jz      short loc_4C50
.text:0000000000004C25                 mov     ecx, [rax+10h]
.text:0000000000004C28                 xor     ebx, ebx
.text:0000000000004C2A                 test    r9b, r9b
.text:0000000000004C2D                 mov     [rsp+88h+msgid], 0
.text:0000000000004C35                 mov     [rsp+88h+var_70], ecx
.text:0000000000004C39                 jnz     loc_4D58
.text:0000000000004C3F
.text:0000000000004C3F loc_4C3F:                               ; CODE XREF: parse_with_separator+305↓j
.text:0000000000004C3F                 call    _endpwent
.text:0000000000004C44                 jmp     loc_4B17
.text:0000000000004C44 ; ---------------------------------------------------------------------------
.text:0000000000004C49                 align 10h
.text:0000000000004C50
.text:0000000000004C50 loc_4C50:                               ; CODE XREF: parse_with_separator+18D↑j
.text:0000000000004C50                                         ; parse_with_separator+1A3↑j
.text:0000000000004C50                 test    r9b, r9b
.text:0000000000004C53                 jz      loc_4D90
.text:0000000000004C59                 lea     rax, aInvalidSpec ; "invalid spec"
.text:0000000000004C60                 mov     [rsp+88h+var_6A], 0
.text:0000000000004C65                 xor     ebx, ebx
.text:0000000000004C67                 mov     [rsp+88h+msgid], rax
.text:0000000000004C6B                 call    _endpwent
.text:0000000000004C70                 jmp     loc_4B17
.text:0000000000004C70 ; ---------------------------------------------------------------------------
.text:0000000000004C75                 align 8
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: parse_with_separator+60↑j
.text:0000000000004C78                 xor     ebx, ebx
.text:0000000000004C7A                 cmp     byte ptr [rdi], 0
.text:0000000000004C7D                 jz      loc_4B5C
.text:0000000000004C83                 mov     [rsp+88h+msgid], r10
.text:0000000000004C87                 call    xstrdup
.text:0000000000004C8C                 mov     r10, [rsp+88h+msgid]
.text:0000000000004C90                 mov     rbp, rax
.text:0000000000004C93                 jmp     loc_4BE3
.text:0000000000004C93 ; ---------------------------------------------------------------------------
.text:0000000000004C98                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 loc_4CA0:                               ; CODE XREF: parse_with_separator+AA↑j
.text:0000000000004CA0                                         ; parse_with_separator+BD↑j
.text:0000000000004CA0                 mov     rdi, [rsp+88h+name] ; nptr
.text:0000000000004CA5                 lea     rcx, [rsp+88h+var_60]
.text:0000000000004CAA                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004CB1                 xor     esi, esi
.text:0000000000004CB3                 mov     edx, 0Ah
.text:0000000000004CB8                 call    xstrtoul
.text:0000000000004CBD                 test    eax, eax
.text:0000000000004CBF                 jz      short loc_4D18
.text:0000000000004CC1
.text:0000000000004CC1 loc_4CC1:                               ; CODE XREF: parse_with_separator+2AE↓j
.text:0000000000004CC1                 call    _endgrent
.text:0000000000004CC6                 mov     rdi, [rsp+88h+name] ; src
.text:0000000000004CCB                 call    xstrdup
.text:0000000000004CD0                 mov     rbx, rax
.text:0000000000004CD3                 lea     rax, aInvalidGroup ; "invalid group"
.text:0000000000004CDA                 mov     [rsp+88h+msgid], rax
.text:0000000000004CDE
.text:0000000000004CDE loc_4CDE:                               ; CODE XREF: parse_with_separator+395↓j
.text:0000000000004CDE                 mov     rdi, rbp        ; ptr
.text:0000000000004CE1                 call    _free
.text:0000000000004CE6                 mov     rdi, rbx        ; ptr
.text:0000000000004CE9                 call    _free
.text:0000000000004CEE                 mov     rsi, [rsp+88h+msgid] ; msgid
.text:0000000000004CF2                 mov     edx, 5          ; category
.text:0000000000004CF7                 xor     edi, edi        ; domainname
.text:0000000000004CF9                 call    _dcgettext
.text:0000000000004CFE                 jmp     loc_4B98
.text:0000000000004CFE ; ---------------------------------------------------------------------------
.text:0000000000004D03                 align 8
.text:0000000000004D08
.text:0000000000004D08 loc_4D08:                               ; CODE XREF: parse_with_separator+77↑j
.text:0000000000004D08                                         ; parse_with_separator+166↑j
.text:0000000000004D08                 xor     r10d, r10d
.text:0000000000004D0B                 xor     ebx, ebx
.text:0000000000004D0D                 jmp     loc_4B5C
.text:0000000000004D0D ; ---------------------------------------------------------------------------
.text:0000000000004D12                 align 8
.text:0000000000004D18
.text:0000000000004D18 loc_4D18:                               ; CODE XREF: parse_with_separator+23F↑j
.text:0000000000004D18                 mov     rax, [rsp+88h+var_60]
.text:0000000000004D1D                 mov     edx, 0FFFFFFFEh
.text:0000000000004D22                 cmp     rax, rdx
.text:0000000000004D25                 mov     r15d, eax
.text:0000000000004D28                 jbe     loc_4B47
.text:0000000000004D2E                 jmp     short loc_4CC1
.text:0000000000004D30 ; ---------------------------------------------------------------------------
.text:0000000000004D30
.text:0000000000004D30 loc_4D30:                               ; CODE XREF: parse_with_separator+15D↑j
.text:0000000000004D30                 mov     rax, r10
.text:0000000000004D33                 add     rax, 1
.text:0000000000004D37                 setnz   [rsp+88h+var_6A]
.text:0000000000004D3C                 test    rbp, rbp
.text:0000000000004D3F                 mov     [rsp+88h+name], rax
.text:0000000000004D44                 jz      loc_4E3A
.text:0000000000004D4A                 test    rax, rax
.text:0000000000004D4D                 setz    al
.text:0000000000004D50                 jmp     loc_4BFF
.text:0000000000004D50 ; ---------------------------------------------------------------------------
.text:0000000000004D55                 align 8
.text:0000000000004D58
.text:0000000000004D58 loc_4D58:                               ; CODE XREF: parse_with_separator+1B9↑j
.text:0000000000004D58                 mov     r15d, [rax+14h]
.text:0000000000004D5C                 mov     edi, r15d       ; gid
.text:0000000000004D5F                 call    _getgrgid
.text:0000000000004D64                 test    rax, rax
.text:0000000000004D67                 jz      loc_4E20
.text:0000000000004D6D                 mov     rdi, [rax]      ; src
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: parse_with_separator+3B0↓j
.text:0000000000004D70                 call    xstrdup
.text:0000000000004D75                 mov     rbx, rax
.text:0000000000004D78                 call    _endgrent
.text:0000000000004D7D                 mov     [rsp+88h+msgid], 0
.text:0000000000004D85                 jmp     loc_4C3F
.text:0000000000004D85 ; ---------------------------------------------------------------------------
.text:0000000000004D8A                 align 10h
.text:0000000000004D90
.text:0000000000004D90 loc_4D90:                               ; CODE XREF: parse_with_separator+1D3↑j
.text:0000000000004D90                 lea     rcx, [rsp+88h+var_60]
.text:0000000000004D95                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004D9C                 xor     esi, esi
.text:0000000000004D9E                 mov     edx, 0Ah
.text:0000000000004DA3                 mov     rdi, rbp        ; nptr
.text:0000000000004DA6                 mov     [rsp+88h+var_69], r9b
.text:0000000000004DAB                 call    xstrtoul
.text:0000000000004DB0                 lea     rsi, aInvalidUser ; "invalid user"
.text:0000000000004DB7                 test    eax, eax
.text:0000000000004DB9                 movzx   r9d, [rsp+88h+var_69]
.text:0000000000004DBF                 mov     [rsp+88h+msgid], rsi
.text:0000000000004DC3                 jnz     short loc_4DF6
.text:0000000000004DC5                 mov     rax, [rsp+88h+var_60]
.text:0000000000004DCA                 movzx   ecx, [rsp+88h+var_6A]
.text:0000000000004DCF                 mov     edx, 0FFFFFFFEh
.text:0000000000004DD4                 cmp     rax, rdx
.text:0000000000004DD7                 cmova   ecx, r9d
.text:0000000000004DDB                 mov     r9d, ecx
.text:0000000000004DDE                 mov     ecx, [rsp+88h+var_70]
.text:0000000000004DE2                 cmovbe  ecx, eax
.text:0000000000004DE5                 mov     eax, 0
.text:0000000000004DEA                 cmova   rax, rsi
.text:0000000000004DEE                 mov     [rsp+88h+var_70], ecx
.text:0000000000004DF2                 mov     [rsp+88h+msgid], rax
.text:0000000000004DF6
.text:0000000000004DF6 loc_4DF6:                               ; CODE XREF: parse_with_separator+343↑j
.text:0000000000004DF6                 mov     [rsp+88h+var_6A], r9b
.text:0000000000004DFB                 xor     ebx, ebx
.text:0000000000004DFD                 call    _endpwent
.text:0000000000004E02                 jmp     loc_4B17
.text:0000000000004E02 ; ---------------------------------------------------------------------------
.text:0000000000004E07                 align 10h
.text:0000000000004E10
.text:0000000000004E10 loc_4E10:                               ; CODE XREF: parse_with_separator+9C↑j
.text:0000000000004E10                 cmp     [rsp+88h+msgid], 0
.text:0000000000004E15                 jnz     loc_4CDE
.text:0000000000004E1B                 jmp     loc_4B59
.text:0000000000004E20 ; ---------------------------------------------------------------------------
.text:0000000000004E20
.text:0000000000004E20 loc_4E20:                               ; CODE XREF: parse_with_separator+2E7↑j
.text:0000000000004E20                 lea     rsi, [rsp+88h+var_58]
.text:0000000000004E25                 mov     edi, r15d
.text:0000000000004E28                 call    umaxtostr
.text:0000000000004E2D                 mov     rdi, rax
.text:0000000000004E30                 jmp     loc_4D70
.text:0000000000004E35 ; ---------------------------------------------------------------------------
.text:0000000000004E35
.text:0000000000004E35 loc_4E35:                               ; CODE XREF: parse_with_separator+126↑j
.text:0000000000004E35                 call    ___stack_chk_fail
.text:0000000000004E3A ; ---------------------------------------------------------------------------
.text:0000000000004E3A
.text:0000000000004E3A loc_4E3A:                               ; CODE XREF: parse_with_separator+2C4↑j
.text:0000000000004E3A                 xor     ebx, ebx
.text:0000000000004E3C                 mov     [rsp+88h+msgid], 0
.text:0000000000004E44                 jmp     loc_4B17
.text:0000000000004E44 ; } // starts at 4A80
.text:0000000000004E44 parse_with_separator endp
.text:0000000000004E44
.text:0000000000004E44 ; ---------------------------------------------------------------------------
.text:0000000000004E49                 align 10h
.text:0000000000004E50
.text:0000000000004E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E50
.text:0000000000004E50
.text:0000000000004E50 ; __int64 __fastcall parse_user_spec(char *s)
.text:0000000000004E50                 public parse_user_spec
.text:0000000000004E50 parse_user_spec proc near               ; CODE XREF: main+254↑p
.text:0000000000004E50
.text:0000000000004E50 var_40          = qword ptr -40h
.text:0000000000004E50
.text:0000000000004E50 ; __unwind {
.text:0000000000004E50                 test    rdx, rdx
.text:0000000000004E53                 jz      loc_4F00
.text:0000000000004E59                 push    r15
.text:0000000000004E5B                 push    r14
.text:0000000000004E5D                 mov     r14, rsi
.text:0000000000004E60                 push    r13
.text:0000000000004E62                 push    r12
.text:0000000000004E64                 mov     r13, r8
.text:0000000000004E67                 push    rbp
.text:0000000000004E68                 push    rbx
.text:0000000000004E69                 mov     r12, rcx
.text:0000000000004E6C                 mov     rbp, rdx
.text:0000000000004E6F                 mov     rbx, rdi
.text:0000000000004E72                 mov     esi, 3Ah ; ':'  ; c
.text:0000000000004E77                 sub     rsp, 18h
.text:0000000000004E7B                 call    _strchr
.text:0000000000004E80                 mov     r9, r13
.text:0000000000004E83                 mov     r15, rax
.text:0000000000004E86                 mov     r8, r12
.text:0000000000004E89                 mov     rcx, rbp
.text:0000000000004E8C                 mov     rdx, r14
.text:0000000000004E8F                 mov     rsi, rax
.text:0000000000004E92                 mov     rdi, rbx
.text:0000000000004E95                 call    parse_with_separator
.text:0000000000004E9A                 test    r15, r15
.text:0000000000004E9D                 mov     r10, rax
.text:0000000000004EA0                 jnz     short loc_4EE4
.text:0000000000004EA2                 test    rax, rax
.text:0000000000004EA5                 mov     [rsp+48h+var_40], rax
.text:0000000000004EAA                 jz      short loc_4F18
.text:0000000000004EAC                 mov     esi, 2Eh ; '.'  ; c
.text:0000000000004EB1                 mov     rdi, rbx        ; s
.text:0000000000004EB4                 call    _strchr
.text:0000000000004EB9                 test    rax, rax
.text:0000000000004EBC                 mov     r10, [rsp+48h+var_40]
.text:0000000000004EC1                 jz      short loc_4EE4
.text:0000000000004EC3                 mov     r9, r13
.text:0000000000004EC6                 mov     r8, r12
.text:0000000000004EC9                 mov     rcx, rbp
.text:0000000000004ECC                 mov     rdx, r14
.text:0000000000004ECF                 mov     rsi, rax
.text:0000000000004ED2                 mov     rdi, rbx
.text:0000000000004ED5                 call    parse_with_separator
.text:0000000000004EDA                 test    rax, rax
.text:0000000000004EDD                 mov     r10, [rsp+48h+var_40]
.text:0000000000004EE2                 jz      short loc_4F18
.text:0000000000004EE4
.text:0000000000004EE4 loc_4EE4:                               ; CODE XREF: parse_user_spec+50↑j
.text:0000000000004EE4                                         ; parse_user_spec+71↑j ...
.text:0000000000004EE4                 add     rsp, 18h
.text:0000000000004EE8                 mov     rax, r10
.text:0000000000004EEB                 pop     rbx
.text:0000000000004EEC                 pop     rbp
.text:0000000000004EED                 pop     r12
.text:0000000000004EEF                 pop     r13
.text:0000000000004EF1                 pop     r14
.text:0000000000004EF3                 pop     r15
.text:0000000000004EF5                 retn
.text:0000000000004EF5 ; ---------------------------------------------------------------------------
.text:0000000000004EF6                 align 20h
.text:0000000000004F00
.text:0000000000004F00 loc_4F00:                               ; CODE XREF: parse_user_spec+3↑j
.text:0000000000004F00                 mov     r9, r8
.text:0000000000004F03                 mov     rdx, rsi
.text:0000000000004F06                 mov     r8, rcx
.text:0000000000004F09                 xor     esi, esi
.text:0000000000004F0B                 xor     ecx, ecx
.text:0000000000004F0D                 jmp     parse_with_separator
.text:0000000000004F0D ; ---------------------------------------------------------------------------
.text:0000000000004F12                 align 8
.text:0000000000004F18
.text:0000000000004F18 loc_4F18:                               ; CODE XREF: parse_user_spec+5A↑j
.text:0000000000004F18                                         ; parse_user_spec+92↑j
.text:0000000000004F18                 xor     r10d, r10d
.text:0000000000004F1B                 jmp     short loc_4EE4
.text:0000000000004F1B ; } // starts at 4E50
.text:0000000000004F1B parse_user_spec endp
.text:0000000000004F1B
.text:0000000000004F1B ; ---------------------------------------------------------------------------
.text:0000000000004F1D                 align 20h
.text:0000000000004F20
.text:0000000000004F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F20
.text:0000000000004F20
.text:0000000000004F20 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000004F20                 public version_etc_arn
.text:0000000000004F20 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_535B↓j
.text:0000000000004F20                                         ; version_etc_va:loc_53AB↓p ...
.text:0000000000004F20
.text:0000000000004F20 var_58          = qword ptr -58h
.text:0000000000004F20 var_50          = qword ptr -50h
.text:0000000000004F20 var_48          = qword ptr -48h
.text:0000000000004F20 var_40          = qword ptr -40h
.text:0000000000004F20
.text:0000000000004F20 ; __unwind {
.text:0000000000004F20                 push    r15
.text:0000000000004F22                 push    r14
.text:0000000000004F24                 push    r13
.text:0000000000004F26                 push    r12
.text:0000000000004F28                 mov     r12, r9
.text:0000000000004F2B                 push    rbp
.text:0000000000004F2C                 push    rbx
.text:0000000000004F2D                 mov     rbp, rdi
.text:0000000000004F30                 mov     rbx, r8
.text:0000000000004F33                 sub     rsp, 28h
.text:0000000000004F37                 test    rsi, rsi
.text:0000000000004F3A                 jz      loc_5058
.text:0000000000004F40                 mov     r8, rdx
.text:0000000000004F43                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000004F4A                 mov     r9, rcx
.text:0000000000004F4D                 xor     eax, eax
.text:0000000000004F4F                 mov     rcx, rsi
.text:0000000000004F52                 mov     esi, 1
.text:0000000000004F57                 call    ___fprintf_chk
.text:0000000000004F5C
.text:0000000000004F5C loc_4F5C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000004F5C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000004F63                 xor     edi, edi        ; domainname
.text:0000000000004F65                 mov     edx, 5          ; category
.text:0000000000004F6A                 call    _dcgettext
.text:0000000000004F6F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000004F76                 mov     rcx, rax
.text:0000000000004F79                 mov     r8d, 7E3h
.text:0000000000004F7F                 mov     esi, 1
.text:0000000000004F84                 mov     rdi, rbp
.text:0000000000004F87                 xor     eax, eax
.text:0000000000004F89                 call    ___fprintf_chk
.text:0000000000004F8E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000004F95                 xor     edi, edi        ; domainname
.text:0000000000004F97                 mov     edx, 5          ; category
.text:0000000000004F9C                 call    _dcgettext
.text:0000000000004FA1                 mov     rsi, rbp        ; stream
.text:0000000000004FA4                 mov     rdi, rax        ; s
.text:0000000000004FA7                 call    _fputs_unlocked
.text:0000000000004FAC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000004FB0                 ja      def_4FC4        ; jumptable 0000000000004FC4 default case
.text:0000000000004FB6                 lea     rdx, jpt_4FC4
.text:0000000000004FBD                 movsxd  rax, ds:(jpt_4FC4 - 71CCh)[rdx+r12*4]
.text:0000000000004FC1                 add     rax, rdx
.text:0000000000004FC4                 jmp     rax             ; switch jump
.text:0000000000004FC4 ; ---------------------------------------------------------------------------
.text:0000000000004FC6                 align 10h
.text:0000000000004FD0
.text:0000000000004FD0 loc_4FD0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004FD0                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:0000000000004FD0                 mov     r9, [rbx+38h]   ; jumptable 0000000000004FC4 case 8
.text:0000000000004FD4                 mov     rax, [rbx+10h]
.text:0000000000004FD8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000004FDF                 mov     r8, [rbx+8]
.text:0000000000004FE3                 mov     edx, 5          ; category
.text:0000000000004FE8                 xor     edi, edi        ; domainname
.text:0000000000004FEA                 mov     r13, [rbx+30h]
.text:0000000000004FEE                 mov     r12, [rbx+28h]
.text:0000000000004FF2                 mov     [rsp+58h+var_48], r9
.text:0000000000004FF7                 mov     r15, [rbx+20h]
.text:0000000000004FFB                 mov     r14, [rbx+18h]
.text:0000000000004FFF                 mov     [rsp+58h+var_58], rax
.text:0000000000005003                 mov     [rsp+58h+var_50], r8
.text:0000000000005008                 mov     rbx, [rbx]
.text:000000000000500B                 call    _dcgettext
.text:0000000000005010                 sub     rsp, 8
.text:0000000000005014
.text:0000000000005014 loc_5014:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000005014                 mov     r9, [rsp+60h+var_48]
.text:0000000000005019                 mov     rdx, rax
.text:000000000000501C                 mov     rcx, rbx
.text:000000000000501F                 mov     esi, 1
.text:0000000000005024                 mov     rdi, rbp
.text:0000000000005027                 xor     eax, eax
.text:0000000000005029                 push    r9
.text:000000000000502B                 push    r13
.text:000000000000502D                 push    r12
.text:000000000000502F                 push    r15
.text:0000000000005031                 push    r14
.text:0000000000005033                 mov     r9, [rsp+88h+var_58]
.text:0000000000005038                 mov     r8, [rsp+88h+var_50]
.text:000000000000503D                 call    ___fprintf_chk
.text:0000000000005042                 add     rsp, 30h
.text:0000000000005046
.text:0000000000005046 loc_5046:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005046                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:0000000000005046                 add     rsp, 28h        ; jumptable 0000000000004FC4 case 0
.text:000000000000504A                 pop     rbx
.text:000000000000504B                 pop     rbp
.text:000000000000504C                 pop     r12
.text:000000000000504E                 pop     r13
.text:0000000000005050                 pop     r14
.text:0000000000005052                 pop     r15
.text:0000000000005054                 retn
.text:0000000000005054 ; ---------------------------------------------------------------------------
.text:0000000000005055                 align 8
.text:0000000000005058
.text:0000000000005058 loc_5058:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000005058                 mov     r8, rcx
.text:000000000000505B                 mov     rcx, rdx
.text:000000000000505E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000005065                 mov     esi, 1
.text:000000000000506A                 xor     eax, eax
.text:000000000000506C                 call    ___fprintf_chk
.text:0000000000005071                 jmp     loc_4F5C
.text:0000000000005071 ; ---------------------------------------------------------------------------
.text:0000000000005076                 align 20h
.text:0000000000005080
.text:0000000000005080 loc_5080:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005080                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:0000000000005080                 mov     r10, [rbx+40h]  ; jumptable 0000000000004FC4 case 9
.text:0000000000005084                 mov     r9, [rbx+38h]
.text:0000000000005088                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000508F                 mov     rax, [rbx+10h]
.text:0000000000005093                 mov     r8, [rbx+8]
.text:0000000000005097                 mov     edx, 5          ; category
.text:000000000000509C                 mov     r13, [rbx+30h]
.text:00000000000050A0                 mov     r12, [rbx+28h]
.text:00000000000050A4                 mov     r15, [rbx+20h]
.text:00000000000050A8                 mov     r14, [rbx+18h]
.text:00000000000050AC                 mov     rbx, [rbx]
.text:00000000000050AF                 mov     [rsp+58h+var_40], r10
.text:00000000000050B4                 mov     [rsp+58h+var_48], r9
.text:00000000000050B9                 mov     [rsp+58h+var_58], rax
.text:00000000000050BD                 mov     [rsp+58h+var_50], r8
.text:00000000000050C2
.text:00000000000050C2 loc_50C2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000050C2                 xor     edi, edi        ; domainname
.text:00000000000050C4                 call    _dcgettext
.text:00000000000050C9                 mov     r10, [rsp+58h+var_40]
.text:00000000000050CE                 push    r10
.text:00000000000050D0                 jmp     loc_5014
.text:00000000000050D0 ; ---------------------------------------------------------------------------
.text:00000000000050D5                 align 8
.text:00000000000050D8
.text:00000000000050D8 loc_50D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000050D8                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:00000000000050D8                 mov     rbx, [rbx]      ; jumptable 0000000000004FC4 case 1
.text:00000000000050DB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000050E2                 mov     edx, 5          ; category
.text:00000000000050E7                 xor     edi, edi        ; domainname
.text:00000000000050E9                 call    _dcgettext
.text:00000000000050EE                 add     rsp, 28h
.text:00000000000050F2                 mov     rcx, rbx
.text:00000000000050F5                 mov     rdi, rbp
.text:00000000000050F8                 pop     rbx
.text:00000000000050F9                 pop     rbp
.text:00000000000050FA                 pop     r12
.text:00000000000050FC                 pop     r13
.text:00000000000050FE                 pop     r14
.text:0000000000005100                 pop     r15
.text:0000000000005102                 mov     rdx, rax
.text:0000000000005105                 mov     esi, 1
.text:000000000000510A                 xor     eax, eax
.text:000000000000510C                 jmp     ___fprintf_chk
.text:000000000000510C ; ---------------------------------------------------------------------------
.text:0000000000005111                 align 8
.text:0000000000005118
.text:0000000000005118 loc_5118:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005118                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:0000000000005118                 mov     r12, [rbx+8]    ; jumptable 0000000000004FC4 case 2
.text:000000000000511C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000005123                 mov     rbx, [rbx]
.text:0000000000005126                 mov     edx, 5          ; category
.text:000000000000512B                 xor     edi, edi        ; domainname
.text:000000000000512D                 call    _dcgettext
.text:0000000000005132                 add     rsp, 28h
.text:0000000000005136                 mov     r8, r12
.text:0000000000005139                 mov     rcx, rbx
.text:000000000000513C                 mov     rdi, rbp
.text:000000000000513F                 mov     rdx, rax
.text:0000000000005142                 mov     esi, 1
.text:0000000000005147                 pop     rbx
.text:0000000000005148                 pop     rbp
.text:0000000000005149                 pop     r12
.text:000000000000514B                 pop     r13
.text:000000000000514D                 pop     r14
.text:000000000000514F                 pop     r15
.text:0000000000005151                 xor     eax, eax
.text:0000000000005153                 jmp     ___fprintf_chk
.text:0000000000005153 ; ---------------------------------------------------------------------------
.text:0000000000005158                 align 20h
.text:0000000000005160
.text:0000000000005160 loc_5160:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005160                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:0000000000005160                 mov     r13, [rbx+10h]  ; jumptable 0000000000004FC4 case 3
.text:0000000000005164                 mov     r12, [rbx+8]
.text:0000000000005168                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000516F                 mov     rbx, [rbx]
.text:0000000000005172                 mov     edx, 5          ; category
.text:0000000000005177                 xor     edi, edi        ; domainname
.text:0000000000005179                 call    _dcgettext
.text:000000000000517E                 add     rsp, 28h
.text:0000000000005182                 mov     r9, r13
.text:0000000000005185                 mov     r8, r12
.text:0000000000005188                 mov     rcx, rbx
.text:000000000000518B                 mov     rdi, rbp
.text:000000000000518E                 mov     rdx, rax
.text:0000000000005191                 pop     rbx
.text:0000000000005192                 pop     rbp
.text:0000000000005193                 pop     r12
.text:0000000000005195                 pop     r13
.text:0000000000005197                 pop     r14
.text:0000000000005199                 pop     r15
.text:000000000000519B                 mov     esi, 1
.text:00000000000051A0                 xor     eax, eax
.text:00000000000051A2                 jmp     ___fprintf_chk
.text:00000000000051A2 ; ---------------------------------------------------------------------------
.text:00000000000051A7                 align 10h
.text:00000000000051B0
.text:00000000000051B0 loc_51B0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000051B0                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:00000000000051B0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000004FC4 case 4
.text:00000000000051B7                 mov     edx, 5          ; category
.text:00000000000051BC                 xor     edi, edi        ; domainname
.text:00000000000051BE                 mov     r14, [rbx+18h]
.text:00000000000051C2                 mov     r13, [rbx+10h]
.text:00000000000051C6                 mov     r12, [rbx+8]
.text:00000000000051CA                 mov     rbx, [rbx]
.text:00000000000051CD                 call    _dcgettext
.text:00000000000051D2                 sub     rsp, 8
.text:00000000000051D6
.text:00000000000051D6 loc_51D6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000051D6                 push    r14
.text:00000000000051D8                 mov     rdx, rax
.text:00000000000051DB                 mov     r9, r13
.text:00000000000051DE                 mov     r8, r12
.text:00000000000051E1                 mov     rcx, rbx
.text:00000000000051E4                 mov     rdi, rbp
.text:00000000000051E7                 mov     esi, 1
.text:00000000000051EC                 xor     eax, eax
.text:00000000000051EE                 call    ___fprintf_chk
.text:00000000000051F3                 pop     rax
.text:00000000000051F4                 pop     rdx
.text:00000000000051F5                 add     rsp, 28h
.text:00000000000051F9                 pop     rbx
.text:00000000000051FA                 pop     rbp
.text:00000000000051FB                 pop     r12
.text:00000000000051FD                 pop     r13
.text:00000000000051FF                 pop     r14
.text:0000000000005201                 pop     r15
.text:0000000000005203                 retn
.text:0000000000005203 ; ---------------------------------------------------------------------------
.text:0000000000005204                 align 8
.text:0000000000005208
.text:0000000000005208 loc_5208:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005208                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:0000000000005208                 mov     r15, [rbx+20h]  ; jumptable 0000000000004FC4 case 5
.text:000000000000520C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000005213                 mov     edx, 5          ; category
.text:0000000000005218                 xor     edi, edi        ; domainname
.text:000000000000521A                 mov     r14, [rbx+18h]
.text:000000000000521E                 mov     r13, [rbx+10h]
.text:0000000000005222                 mov     r12, [rbx+8]
.text:0000000000005226                 mov     rbx, [rbx]
.text:0000000000005229                 call    _dcgettext
.text:000000000000522E                 push    r15
.text:0000000000005230                 jmp     short loc_51D6
.text:0000000000005230 ; ---------------------------------------------------------------------------
.text:0000000000005232                 align 8
.text:0000000000005238
.text:0000000000005238 loc_5238:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000005238                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:0000000000005238                 mov     r8, [rbx+8]     ; jumptable 0000000000004FC4 case 6
.text:000000000000523C                 mov     r12, [rbx+28h]
.text:0000000000005240                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000005247                 mov     r15, [rbx+20h]
.text:000000000000524B                 mov     r14, [rbx+18h]
.text:000000000000524F                 mov     edx, 5          ; category
.text:0000000000005254                 mov     r13, [rbx+10h]
.text:0000000000005258                 xor     edi, edi        ; domainname
.text:000000000000525A                 mov     rbx, [rbx]
.text:000000000000525D                 mov     [rsp+58h+var_58], r8
.text:0000000000005261                 call    _dcgettext
.text:0000000000005266                 sub     rsp, 8
.text:000000000000526A                 mov     r9, r13
.text:000000000000526D                 push    r12
.text:000000000000526F                 push    r15
.text:0000000000005271                 push    r14
.text:0000000000005273
.text:0000000000005273 loc_5273:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000005273                 mov     r8, [rsp+78h+var_58]
.text:0000000000005278                 mov     rcx, rbx
.text:000000000000527B                 mov     rdx, rax
.text:000000000000527E                 mov     rdi, rbp
.text:0000000000005281                 mov     esi, 1
.text:0000000000005286                 xor     eax, eax
.text:0000000000005288                 call    ___fprintf_chk
.text:000000000000528D                 add     rsp, 20h
.text:0000000000005291                 add     rsp, 28h
.text:0000000000005295                 pop     rbx
.text:0000000000005296                 pop     rbp
.text:0000000000005297                 pop     r12
.text:0000000000005299                 pop     r13
.text:000000000000529B                 pop     r14
.text:000000000000529D                 pop     r15
.text:000000000000529F                 retn
.text:00000000000052A0 ; ---------------------------------------------------------------------------
.text:00000000000052A0
.text:00000000000052A0 loc_52A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000052A0                                         ; DATA XREF: .rodata:jpt_4FC4↓o
.text:00000000000052A0                 mov     r9, [rbx+10h]   ; jumptable 0000000000004FC4 case 7
.text:00000000000052A4                 mov     r13, [rbx+30h]
.text:00000000000052A8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:00000000000052AF                 mov     r12, [rbx+28h]
.text:00000000000052B3                 mov     r15, [rbx+20h]
.text:00000000000052B7                 mov     edx, 5          ; category
.text:00000000000052BC                 mov     r14, [rbx+18h]
.text:00000000000052C0                 mov     r8, [rbx+8]
.text:00000000000052C4                 xor     edi, edi        ; domainname
.text:00000000000052C6                 mov     [rsp+58h+var_50], r9
.text:00000000000052CB                 mov     rbx, [rbx]
.text:00000000000052CE                 mov     [rsp+58h+var_58], r8
.text:00000000000052D2                 call    _dcgettext
.text:00000000000052D7                 push    r13
.text:00000000000052D9                 push    r12
.text:00000000000052DB                 push    r15
.text:00000000000052DD                 push    r14
.text:00000000000052DF                 mov     r9, [rsp+78h+var_50]
.text:00000000000052E4                 jmp     short loc_5273
.text:00000000000052E4 ; ---------------------------------------------------------------------------
.text:00000000000052E6                 align 10h
.text:00000000000052F0
.text:00000000000052F0 def_4FC4:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000052F0                 mov     r10, [rbx+40h]  ; jumptable 0000000000004FC4 default case
.text:00000000000052F4                 mov     r9, [rbx+38h]
.text:00000000000052F8                 mov     edx, 5
.text:00000000000052FD                 mov     rax, [rbx+10h]
.text:0000000000005301                 mov     r8, [rbx+8]
.text:0000000000005305                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000530C                 mov     r13, [rbx+30h]
.text:0000000000005310                 mov     r12, [rbx+28h]
.text:0000000000005314                 mov     r15, [rbx+20h]
.text:0000000000005318                 mov     r14, [rbx+18h]
.text:000000000000531C                 mov     [rsp+58h+var_40], r10
.text:0000000000005321                 mov     [rsp+58h+var_48], r9
.text:0000000000005326                 mov     [rsp+58h+var_58], rax
.text:000000000000532A                 mov     [rsp+58h+var_50], r8
.text:000000000000532F                 mov     rbx, [rbx]
.text:0000000000005332                 jmp     loc_50C2
.text:0000000000005332 ; } // starts at 4F20
.text:0000000000005332 version_etc_arn endp
.text:0000000000005332
.text:0000000000005332 ; ---------------------------------------------------------------------------
.text:0000000000005337                 align 20h
.text:0000000000005340
.text:0000000000005340 ; =============== S U B R O U T I N E =======================================
.text:0000000000005340
.text:0000000000005340 ; Attributes: info_from_lumina
.text:0000000000005340
.text:0000000000005340 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000005340                 public version_etc_ar
.text:0000000000005340 version_etc_ar  proc near
.text:0000000000005340 ; __unwind {
.text:0000000000005340                 xor     r9d, r9d
.text:0000000000005343                 cmp     qword ptr [r8], 0
.text:0000000000005347                 jz      short loc_535B
.text:0000000000005349                 nop     dword ptr [rax+00000000h]
.text:0000000000005350
.text:0000000000005350 loc_5350:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000005350                 add     r9, 1
.text:0000000000005354                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000005359                 jnz     short loc_5350
.text:000000000000535B
.text:000000000000535B loc_535B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000535B                 jmp     version_etc_arn
.text:000000000000535B ; } // starts at 5340
.text:000000000000535B version_etc_ar  endp
.text:000000000000535B
.text:0000000000005360
.text:0000000000005360 ; =============== S U B R O U T I N E =======================================
.text:0000000000005360
.text:0000000000005360 ; Attributes: info_from_lumina
.text:0000000000005360
.text:0000000000005360 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000005360                 public version_etc_va
.text:0000000000005360 version_etc_va  proc near
.text:0000000000005360
.text:0000000000005360 authtab         = qword ptr -68h
.text:0000000000005360 var_10          = qword ptr -10h
.text:0000000000005360
.text:0000000000005360 ; __unwind {
.text:0000000000005360                 sub     rsp, 68h
.text:0000000000005364                 mov     r10, r8
.text:0000000000005367                 xor     r9d, r9d
.text:000000000000536A                 mov     rax, fs:28h
.text:0000000000005373                 mov     [rsp+68h+var_10], rax
.text:0000000000005378                 xor     eax, eax
.text:000000000000537A                 mov     r8, rsp
.text:000000000000537D                 nop     dword ptr [rax]
.text:0000000000005380
.text:0000000000005380 loc_5380:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000005380                 mov     eax, [r10]
.text:0000000000005383                 cmp     eax, 2Fh ; '/'
.text:0000000000005386                 ja      short loc_53CA
.text:0000000000005388                 mov     r11d, eax
.text:000000000000538B                 add     r11, [r10+10h]
.text:000000000000538F                 add     eax, 8
.text:0000000000005392                 mov     [r10], eax
.text:0000000000005395
.text:0000000000005395 loc_5395:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000005395                 mov     rax, [r11]
.text:0000000000005398                 test    rax, rax
.text:000000000000539B                 mov     [r8+r9*8], rax
.text:000000000000539F                 jz      short loc_53AB
.text:00000000000053A1                 add     r9, 1
.text:00000000000053A5                 cmp     r9, 0Ah
.text:00000000000053A9                 jnz     short loc_5380
.text:00000000000053AB
.text:00000000000053AB loc_53AB:                               ; CODE XREF: version_etc_va+3F↑j
.text:00000000000053AB                 call    version_etc_arn
.text:00000000000053B0                 mov     rax, [rsp+68h+var_10]
.text:00000000000053B5                 xor     rax, fs:28h
.text:00000000000053BE                 jnz     short loc_53C5
.text:00000000000053C0                 add     rsp, 68h
.text:00000000000053C4                 retn
.text:00000000000053C5 ; ---------------------------------------------------------------------------
.text:00000000000053C5
.text:00000000000053C5 loc_53C5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000053C5                 call    ___stack_chk_fail
.text:00000000000053CA ; ---------------------------------------------------------------------------
.text:00000000000053CA
.text:00000000000053CA loc_53CA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000053CA                 mov     r11, [r10+8]
.text:00000000000053CE                 lea     rax, [r11+8]
.text:00000000000053D2                 mov     [r10+8], rax
.text:00000000000053D6                 jmp     short loc_5395
.text:00000000000053D6 ; } // starts at 5360
.text:00000000000053D6 version_etc_va  endp
.text:00000000000053D6
.text:00000000000053D6 ; ---------------------------------------------------------------------------
.text:00000000000053D8                 align 20h
.text:00000000000053E0
.text:00000000000053E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000053E0
.text:00000000000053E0 ; Attributes: info_from_lumina
.text:00000000000053E0
.text:00000000000053E0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000053E0                 public version_etc
.text:00000000000053E0 version_etc     proc near               ; CODE XREF: main+FA↑p
.text:00000000000053E0
.text:00000000000053E0 var_C0          = dword ptr -0C0h
.text:00000000000053E0 var_B8          = qword ptr -0B8h
.text:00000000000053E0 var_B0          = qword ptr -0B0h
.text:00000000000053E0 var_A8          = byte ptr -0A8h
.text:00000000000053E0 var_50          = qword ptr -50h
.text:00000000000053E0 var_48          = byte ptr -48h
.text:00000000000053E0 var_28          = qword ptr -28h
.text:00000000000053E0 var_20          = qword ptr -20h
.text:00000000000053E0 arg_0           = byte ptr  8
.text:00000000000053E0
.text:00000000000053E0 ; __unwind {
.text:00000000000053E0                 push    rbp
.text:00000000000053E1                 push    rbx
.text:00000000000053E2                 mov     r10d, 20h ; ' '
.text:00000000000053E8                 xor     r11d, r11d
.text:00000000000053EB                 sub     rsp, 0B8h
.text:00000000000053F2                 mov     rax, fs:28h
.text:00000000000053FB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000005400                 xor     eax, eax
.text:0000000000005402                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000540A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000005412                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000541A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000541F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000005427                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000542F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000005434                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000543C                 xor     r9d, r9d
.text:000000000000543F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000005444                 mov     rbp, rax
.text:0000000000005447                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005450
.text:0000000000005450 loc_5450:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000005450                 cmp     r10d, 2Fh ; '/'
.text:0000000000005454                 ja      short loc_54AC
.text:0000000000005456                 mov     eax, r10d
.text:0000000000005459                 mov     r11d, 1
.text:000000000000545F                 add     r10d, 8
.text:0000000000005463                 add     rax, rbp
.text:0000000000005466
.text:0000000000005466 loc_5466:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000005466                 mov     rax, [rax]
.text:0000000000005469                 test    rax, rax
.text:000000000000546C                 mov     [r8+r9*8], rax
.text:0000000000005470                 jz      short loc_547C
.text:0000000000005472                 add     r9, 1
.text:0000000000005476                 cmp     r9, 0Ah
.text:000000000000547A                 jnz     short loc_5450
.text:000000000000547C
.text:000000000000547C loc_547C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000547C                 test    r11b, r11b
.text:000000000000547F                 jnz     short loc_54A5
.text:0000000000005481
.text:0000000000005481 loc_5481:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000005481                 call    version_etc_arn
.text:0000000000005486                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000548B                 xor     rax, fs:28h
.text:0000000000005494                 jnz     short loc_54A0
.text:0000000000005496                 add     rsp, 0B8h
.text:000000000000549D                 pop     rbx
.text:000000000000549E                 pop     rbp
.text:000000000000549F                 retn
.text:00000000000054A0 ; ---------------------------------------------------------------------------
.text:00000000000054A0
.text:00000000000054A0 loc_54A0:                               ; CODE XREF: version_etc+B4↑j
.text:00000000000054A0                 call    ___stack_chk_fail
.text:00000000000054A5 ; ---------------------------------------------------------------------------
.text:00000000000054A5
.text:00000000000054A5 loc_54A5:                               ; CODE XREF: version_etc+9F↑j
.text:00000000000054A5                 mov     [rsp+0C8h+var_C0], r10d
.text:00000000000054AA                 jmp     short loc_5481
.text:00000000000054AC ; ---------------------------------------------------------------------------
.text:00000000000054AC
.text:00000000000054AC loc_54AC:                               ; CODE XREF: version_etc+74↑j
.text:00000000000054AC                 mov     rax, rbx
.text:00000000000054AF                 add     rbx, 8
.text:00000000000054B3                 jmp     short loc_5466
.text:00000000000054B3 ; } // starts at 53E0
.text:00000000000054B3 version_etc     endp
.text:00000000000054B3
.text:00000000000054B3 ; ---------------------------------------------------------------------------
.text:00000000000054B5                 align 20h
.text:00000000000054C0
.text:00000000000054C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054C0
.text:00000000000054C0 ; Attributes: info_from_lumina
.text:00000000000054C0
.text:00000000000054C0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000054C0                 public emit_bug_reporting_address
.text:00000000000054C0 emit_bug_reporting_address proc near
.text:00000000000054C0 ; __unwind {
.text:00000000000054C0                 push    rbx
.text:00000000000054C1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000054C8                 mov     edx, 5          ; category
.text:00000000000054CD                 xor     edi, edi        ; domainname
.text:00000000000054CF                 call    _dcgettext
.text:00000000000054D4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000054DB                 mov     rsi, rax
.text:00000000000054DE                 mov     edi, 1
.text:00000000000054E3                 xor     eax, eax
.text:00000000000054E5                 call    ___printf_chk
.text:00000000000054EA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000054F1                 mov     edx, 5          ; category
.text:00000000000054F6                 xor     edi, edi        ; domainname
.text:00000000000054F8                 call    _dcgettext
.text:00000000000054FD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000005504                 lea     rdx, unk_6837
.text:000000000000550B                 mov     rsi, rax
.text:000000000000550E                 mov     edi, 1
.text:0000000000005513                 xor     eax, eax
.text:0000000000005515                 call    ___printf_chk
.text:000000000000551A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000005521                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000005528                 xor     edi, edi        ; domainname
.text:000000000000552A                 mov     edx, 5          ; category
.text:000000000000552F                 call    _dcgettext
.text:0000000000005534                 mov     rsi, rbx        ; stream
.text:0000000000005537                 mov     rdi, rax        ; s
.text:000000000000553A                 pop     rbx
.text:000000000000553B                 jmp     _fputs_unlocked
.text:000000000000553B ; } // starts at 54C0
.text:000000000000553B emit_bug_reporting_address endp
.text:000000000000553B
.text:0000000000005540
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540
.text:0000000000005540
.text:0000000000005540                 public xmalloc
.text:0000000000005540 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000005540                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 push    rbx
.text:0000000000005541                 mov     rbx, rdi
.text:0000000000005544                 call    _malloc
.text:0000000000005549                 test    rax, rax
.text:000000000000554C                 jnz     short loc_5553
.text:000000000000554E                 test    rbx, rbx
.text:0000000000005551                 jnz     short loc_5555
.text:0000000000005553
.text:0000000000005553 loc_5553:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000005553                 pop     rbx
.text:0000000000005554                 retn
.text:0000000000005555 ; ---------------------------------------------------------------------------
.text:0000000000005555
.text:0000000000005555 loc_5555:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000005555                 call    xalloc_die
.text:0000000000005555 ; } // starts at 5540
.text:0000000000005555 xmalloc         endp
.text:0000000000005555
.text:0000000000005555 ; ---------------------------------------------------------------------------
.text:000000000000555A                 align 20h
.text:0000000000005560
.text:0000000000005560 ; =============== S U B R O U T I N E =======================================
.text:0000000000005560
.text:0000000000005560 ; Attributes: info_from_lumina
.text:0000000000005560
.text:0000000000005560 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000005560                 public xnmalloc
.text:0000000000005560 xnmalloc        proc near
.text:0000000000005560 ; __unwind {
.text:0000000000005560                 mov     rax, rdi
.text:0000000000005563                 mul     rsi
.text:0000000000005566                 mov     rdi, rax
.text:0000000000005569                 seto    al
.text:000000000000556C                 test    rdi, rdi
.text:000000000000556F                 js      short loc_557B
.text:0000000000005571                 movzx   eax, al
.text:0000000000005574                 test    rax, rax
.text:0000000000005577                 jnz     short loc_557B
.text:0000000000005579                 jmp     short xmalloc
.text:000000000000557B ; ---------------------------------------------------------------------------
.text:000000000000557B
.text:000000000000557B loc_557B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000557B                                         ; xnmalloc+17↑j
.text:000000000000557B                 sub     rsp, 8
.text:000000000000557F                 call    xalloc_die
.text:000000000000557F ; } // starts at 5560
.text:000000000000557F xnmalloc        endp
.text:000000000000557F
.text:000000000000557F ; ---------------------------------------------------------------------------
.text:0000000000005584                 align 10h
.text:0000000000005590
.text:0000000000005590 ; =============== S U B R O U T I N E =======================================
.text:0000000000005590
.text:0000000000005590
.text:0000000000005590                 public xcharalloc
.text:0000000000005590 xcharalloc      proc near
.text:0000000000005590 ; __unwind {
.text:0000000000005590                 jmp     short xmalloc
.text:0000000000005590 ; } // starts at 5590
.text:0000000000005590 xcharalloc      endp
.text:0000000000005590
.text:0000000000005590 ; ---------------------------------------------------------------------------
.text:0000000000005592                 align 20h
.text:00000000000055A0
.text:00000000000055A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055A0
.text:00000000000055A0 ; Attributes: info_from_lumina
.text:00000000000055A0
.text:00000000000055A0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000055A0                 public xrealloc
.text:00000000000055A0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000055A0                                         ; quotearg_n_options+182↑p ...
.text:00000000000055A0 ; __unwind {
.text:00000000000055A0                 test    rsi, rsi
.text:00000000000055A3                 push    rbx
.text:00000000000055A4                 mov     rbx, rsi
.text:00000000000055A7                 jnz     short loc_55AE
.text:00000000000055A9                 test    rdi, rdi
.text:00000000000055AC                 jnz     short loc_55C8
.text:00000000000055AE
.text:00000000000055AE loc_55AE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000055AE                 mov     rsi, rbx        ; size
.text:00000000000055B1                 call    _realloc
.text:00000000000055B6                 test    rax, rax
.text:00000000000055B9                 jnz     short loc_55C0
.text:00000000000055BB                 test    rbx, rbx
.text:00000000000055BE                 jnz     short loc_55D1
.text:00000000000055C0
.text:00000000000055C0 loc_55C0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000055C0                 pop     rbx
.text:00000000000055C1                 retn
.text:00000000000055C1 ; ---------------------------------------------------------------------------
.text:00000000000055C2                 align 8
.text:00000000000055C8
.text:00000000000055C8 loc_55C8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000055C8                 call    _free
.text:00000000000055CD                 xor     eax, eax
.text:00000000000055CF                 pop     rbx
.text:00000000000055D0                 retn
.text:00000000000055D1 ; ---------------------------------------------------------------------------
.text:00000000000055D1
.text:00000000000055D1 loc_55D1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000055D1                 call    xalloc_die
.text:00000000000055D1 ; } // starts at 55A0
.text:00000000000055D1 xrealloc        endp
.text:00000000000055D1
.text:00000000000055D1 ; ---------------------------------------------------------------------------
.text:00000000000055D6                 align 20h
.text:00000000000055E0
.text:00000000000055E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055E0
.text:00000000000055E0 ; Attributes: info_from_lumina
.text:00000000000055E0
.text:00000000000055E0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000055E0                 public xnrealloc
.text:00000000000055E0 xnrealloc       proc near
.text:00000000000055E0 ; __unwind {
.text:00000000000055E0                 mov     rax, rsi
.text:00000000000055E3                 mul     rdx
.text:00000000000055E6                 mov     rsi, rax
.text:00000000000055E9                 seto    al
.text:00000000000055EC                 test    rsi, rsi
.text:00000000000055EF                 js      short loc_55FB
.text:00000000000055F1                 movzx   eax, al
.text:00000000000055F4                 test    rax, rax
.text:00000000000055F7                 jnz     short loc_55FB
.text:00000000000055F9                 jmp     short xrealloc
.text:00000000000055FB ; ---------------------------------------------------------------------------
.text:00000000000055FB
.text:00000000000055FB loc_55FB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000055FB                                         ; xnrealloc+17↑j
.text:00000000000055FB                 sub     rsp, 8
.text:00000000000055FF                 call    xalloc_die
.text:00000000000055FF ; } // starts at 55E0
.text:00000000000055FF xnrealloc       endp
.text:00000000000055FF
.text:00000000000055FF ; ---------------------------------------------------------------------------
.text:0000000000005604                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610 ; Attributes: info_from_lumina
.text:0000000000005610
.text:0000000000005610 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000005610                 public x2nrealloc
.text:0000000000005610 x2nrealloc      proc near
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 test    rdi, rdi
.text:0000000000005613                 mov     r9, rdx
.text:0000000000005616                 mov     rcx, [rsi]
.text:0000000000005619                 jz      short loc_5650
.text:000000000000561B                 xor     edx, edx
.text:000000000000561D                 mov     rax, 5555555555555554h
.text:0000000000005627                 div     r9
.text:000000000000562A                 cmp     rax, rcx
.text:000000000000562D                 jbe     short loc_566B
.text:000000000000562F                 mov     rax, rcx
.text:0000000000005632                 shr     rax, 1
.text:0000000000005635                 lea     rcx, [rax+rcx+1]
.text:000000000000563A
.text:000000000000563A loc_563A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000563A                 mov     [rsi], rcx
.text:000000000000563D                 imul    rcx, r9
.text:0000000000005641                 mov     rsi, rcx
.text:0000000000005644                 jmp     xrealloc
.text:0000000000005644 ; ---------------------------------------------------------------------------
.text:0000000000005649                 align 10h
.text:0000000000005650
.text:0000000000005650 loc_5650:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000005650                 test    rcx, rcx
.text:0000000000005653                 jz      short loc_5678
.text:0000000000005655
.text:0000000000005655 loc_5655:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000005655                 mov     rax, rcx
.text:0000000000005658                 mul     r9
.text:000000000000565B                 seto    dl
.text:000000000000565E                 test    rax, rax
.text:0000000000005661                 movzx   edx, dl
.text:0000000000005664                 js      short loc_566B
.text:0000000000005666                 test    rdx, rdx
.text:0000000000005669                 jz      short loc_563A
.text:000000000000566B
.text:000000000000566B loc_566B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000566B                                         ; x2nrealloc+54↑j
.text:000000000000566B                 sub     rsp, 8
.text:000000000000566F                 call    xalloc_die
.text:000000000000566F ; ---------------------------------------------------------------------------
.text:0000000000005674                 align 8
.text:0000000000005678
.text:0000000000005678 loc_5678:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000005678                 xor     edx, edx
.text:000000000000567A                 mov     eax, 80h
.text:000000000000567F                 xor     r8d, r8d
.text:0000000000005682                 div     r9
.text:0000000000005685                 test    rax, rax
.text:0000000000005688                 setz    r8b
.text:000000000000568C                 lea     rcx, [r8+rax]
.text:0000000000005690                 jmp     short loc_5655
.text:0000000000005690 ; } // starts at 5610
.text:0000000000005690 x2nrealloc      endp
.text:0000000000005690
.text:0000000000005690 ; ---------------------------------------------------------------------------
.text:0000000000005692                 align 20h
.text:00000000000056A0
.text:00000000000056A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056A0
.text:00000000000056A0 ; Attributes: info_from_lumina
.text:00000000000056A0
.text:00000000000056A0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000056A0                 public x2realloc
.text:00000000000056A0 x2realloc       proc near
.text:00000000000056A0 ; __unwind {
.text:00000000000056A0                 test    rdi, rdi
.text:00000000000056A3                 mov     rax, [rsi]
.text:00000000000056A6                 jz      short loc_56D0
.text:00000000000056A8                 mov     rdx, 5555555555555553h
.text:00000000000056B2                 cmp     rax, rdx
.text:00000000000056B5                 ja      short loc_56E1
.text:00000000000056B7                 mov     rdx, rax
.text:00000000000056BA                 shr     rdx, 1
.text:00000000000056BD                 lea     rax, [rdx+rax+1]
.text:00000000000056C2
.text:00000000000056C2 loc_56C2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000056C2                 mov     [rsi], rax
.text:00000000000056C5                 mov     rsi, rax
.text:00000000000056C8                 jmp     xrealloc
.text:00000000000056C8 ; ---------------------------------------------------------------------------
.text:00000000000056CD                 align 10h
.text:00000000000056D0
.text:00000000000056D0 loc_56D0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000056D0                 test    rax, rax
.text:00000000000056D3                 mov     edx, 80h
.text:00000000000056D8                 cmovz   rax, rdx
.text:00000000000056DC                 test    rax, rax
.text:00000000000056DF                 jns     short loc_56C2
.text:00000000000056E1
.text:00000000000056E1 loc_56E1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000056E1                 sub     rsp, 8
.text:00000000000056E5                 call    xalloc_die
.text:00000000000056E5 ; } // starts at 56A0
.text:00000000000056E5 x2realloc       endp
.text:00000000000056E5
.text:00000000000056E5 ; ---------------------------------------------------------------------------
.text:00000000000056EA                 align 10h
.text:00000000000056F0
.text:00000000000056F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000056F0
.text:00000000000056F0
.text:00000000000056F0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000056F0                 public xzalloc
.text:00000000000056F0 xzalloc         proc near
.text:00000000000056F0 ; __unwind {
.text:00000000000056F0                 push    rbx
.text:00000000000056F1                 mov     rbx, rdi
.text:00000000000056F4                 call    xmalloc
.text:00000000000056F9                 mov     rdx, rbx        ; n
.text:00000000000056FC                 xor     esi, esi        ; c
.text:00000000000056FE                 mov     rdi, rax        ; s
.text:0000000000005701                 pop     rbx
.text:0000000000005702                 jmp     _memset
.text:0000000000005702 ; } // starts at 56F0
.text:0000000000005702 xzalloc         endp
.text:0000000000005702
.text:0000000000005702 ; ---------------------------------------------------------------------------
.text:0000000000005707                 align 10h
.text:0000000000005710
.text:0000000000005710 ; =============== S U B R O U T I N E =======================================
.text:0000000000005710
.text:0000000000005710 ; Attributes: info_from_lumina
.text:0000000000005710
.text:0000000000005710 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000005710                 public xcalloc
.text:0000000000005710 xcalloc         proc near
.text:0000000000005710 ; __unwind {
.text:0000000000005710                 mov     rax, rdi
.text:0000000000005713                 sub     rsp, 8
.text:0000000000005717                 mul     rsi
.text:000000000000571A                 seto    dl
.text:000000000000571D                 test    rax, rax
.text:0000000000005720                 js      short loc_5739
.text:0000000000005722                 movzx   edx, dl
.text:0000000000005725                 test    rdx, rdx
.text:0000000000005728                 jnz     short loc_5739
.text:000000000000572A                 call    _calloc
.text:000000000000572F                 test    rax, rax
.text:0000000000005732                 jz      short loc_5739
.text:0000000000005734                 add     rsp, 8
.text:0000000000005738                 retn
.text:0000000000005739 ; ---------------------------------------------------------------------------
.text:0000000000005739
.text:0000000000005739 loc_5739:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000005739                                         ; xcalloc+18↑j ...
.text:0000000000005739                 call    xalloc_die
.text:0000000000005739 ; } // starts at 5710
.text:0000000000005739 xcalloc         endp
.text:0000000000005739
.text:0000000000005739 ; ---------------------------------------------------------------------------
.text:000000000000573E                 align 20h
.text:0000000000005740
.text:0000000000005740 ; =============== S U B R O U T I N E =======================================
.text:0000000000005740
.text:0000000000005740 ; Attributes: info_from_lumina
.text:0000000000005740
.text:0000000000005740 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000005740                 public xmemdup
.text:0000000000005740 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000005740                                         ; parse_with_separator+148↑p ...
.text:0000000000005740 ; __unwind {
.text:0000000000005740                 push    rbp
.text:0000000000005741                 push    rbx
.text:0000000000005742                 mov     rbp, rdi
.text:0000000000005745                 mov     rdi, rsi
.text:0000000000005748                 mov     rbx, rsi
.text:000000000000574B                 sub     rsp, 8
.text:000000000000574F                 call    xmalloc
.text:0000000000005754                 add     rsp, 8
.text:0000000000005758                 mov     rdx, rbx        ; n
.text:000000000000575B                 mov     rsi, rbp        ; src
.text:000000000000575E                 pop     rbx
.text:000000000000575F                 pop     rbp
.text:0000000000005760                 mov     rdi, rax        ; dest
.text:0000000000005763                 jmp     _memcpy
.text:0000000000005763 ; } // starts at 5740
.text:0000000000005763 xmemdup         endp
.text:0000000000005763
.text:0000000000005763 ; ---------------------------------------------------------------------------
.text:0000000000005768                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770
.text:0000000000005770 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000005770                 public xstrdup
.text:0000000000005770 xstrdup         proc near               ; CODE XREF: main+278↑p
.text:0000000000005770                                         ; parse_with_separator+D1↑p ...
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 push    rbx
.text:0000000000005771                 mov     rbx, rdi
.text:0000000000005774                 call    _strlen
.text:0000000000005779                 mov     rdi, rbx        ; src
.text:000000000000577C                 lea     rsi, [rax+1]    ; n
.text:0000000000005780                 pop     rbx
.text:0000000000005781                 jmp     short xmemdup
.text:0000000000005781 ; } // starts at 5770
.text:0000000000005781 xstrdup         endp
.text:0000000000005781
.text:0000000000005781 ; ---------------------------------------------------------------------------
.text:0000000000005783                 align 10h
.text:0000000000005790
.text:0000000000005790 ; =============== S U B R O U T I N E =======================================
.text:0000000000005790
.text:0000000000005790 ; Attributes: noreturn info_from_lumina
.text:0000000000005790
.text:0000000000005790 ; void __cdecl xalloc_die()
.text:0000000000005790                 public xalloc_die
.text:0000000000005790 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_42C6↑p
.text:0000000000005790                                         ; xmalloc:loc_5555↑p ...
.text:0000000000005790 ; __unwind {
.text:0000000000005790                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000005797                 sub     rsp, 8
.text:000000000000579B                 mov     edx, 5          ; category
.text:00000000000057A0                 xor     edi, edi        ; domainname
.text:00000000000057A2                 call    _dcgettext
.text:00000000000057A7                 mov     edi, cs:exit_failure ; status
.text:00000000000057AD                 lea     rdx, format+4   ; format
.text:00000000000057B4                 mov     rcx, rax
.text:00000000000057B7                 xor     esi, esi        ; errnum
.text:00000000000057B9                 xor     eax, eax
.text:00000000000057BB                 call    _error
.text:00000000000057C0                 call    _abort
.text:00000000000057C0 ; } // starts at 5790
.text:00000000000057C0 xalloc_die      endp
.text:00000000000057C0
.text:00000000000057C0 ; ---------------------------------------------------------------------------
.text:00000000000057C5                 align 10h
.text:00000000000057D0
.text:00000000000057D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000057D0
.text:00000000000057D0
.text:00000000000057D0                 public xgetgroups
.text:00000000000057D0 xgetgroups      proc near               ; CODE XREF: print_stuff+2CB↑p
.text:00000000000057D0                                         ; print_stuff+3E8↑p ...
.text:00000000000057D0 ; __unwind {
.text:00000000000057D0                 push    rbx
.text:00000000000057D1                 call    mgetgroups
.text:00000000000057D6                 cmp     eax, 0FFFFFFFFh
.text:00000000000057D9                 mov     ebx, eax
.text:00000000000057DB                 jz      short loc_57E8
.text:00000000000057DD
.text:00000000000057DD loc_57DD:                               ; CODE XREF: xgetgroups+20↓j
.text:00000000000057DD                 mov     eax, ebx
.text:00000000000057DF                 pop     rbx
.text:00000000000057E0                 retn
.text:00000000000057E0 ; ---------------------------------------------------------------------------
.text:00000000000057E1                 align 8
.text:00000000000057E8
.text:00000000000057E8 loc_57E8:                               ; CODE XREF: xgetgroups+B↑j
.text:00000000000057E8                 call    ___errno_location
.text:00000000000057ED                 cmp     dword ptr [rax], 0Ch
.text:00000000000057F0                 jnz     short loc_57DD
.text:00000000000057F2                 call    xalloc_die
.text:00000000000057F2 ; } // starts at 57D0
.text:00000000000057F2 xgetgroups      endp
.text:00000000000057F2
.text:00000000000057F2 ; ---------------------------------------------------------------------------
.text:00000000000057F7                 align 20h
.text:0000000000005800
.text:0000000000005800 ; =============== S U B R O U T I N E =======================================
.text:0000000000005800
.text:0000000000005800
.text:0000000000005800 ; __int64 __fastcall xstrtoul(char *nptr)
.text:0000000000005800                 public xstrtoul
.text:0000000000005800 xstrtoul        proc near               ; CODE XREF: parse_with_separator+238↑p
.text:0000000000005800                                         ; parse_with_separator+32B↑p
.text:0000000000005800
.text:0000000000005800 base            = dword ptr -50h
.text:0000000000005800 endptr          = qword ptr -48h
.text:0000000000005800 var_40          = qword ptr -40h
.text:0000000000005800
.text:0000000000005800 ; __unwind {
.text:0000000000005800                 push    r15
.text:0000000000005802                 push    r14
.text:0000000000005804                 push    r13
.text:0000000000005806                 push    r12
.text:0000000000005808                 push    rbp
.text:0000000000005809                 push    rbx
.text:000000000000580A                 sub     rsp, 28h
.text:000000000000580E                 mov     rax, fs:28h
.text:0000000000005817                 mov     [rsp+58h+var_40], rax
.text:000000000000581C                 xor     eax, eax
.text:000000000000581E                 cmp     edx, 24h ; '$'
.text:0000000000005821                 ja      loc_5B85
.text:0000000000005827                 lea     rax, [rsp+58h+endptr]
.text:000000000000582C                 mov     r15, rsi
.text:000000000000582F                 test    rsi, rsi
.text:0000000000005832                 mov     rbp, rdi
.text:0000000000005835                 mov     [rsp+58h+base], edx
.text:0000000000005839                 mov     r14, rcx
.text:000000000000583C                 mov     r13, r8
.text:000000000000583F                 cmovz   r15, rax
.text:0000000000005843                 call    ___errno_location
.text:0000000000005848                 mov     dword ptr [rax], 0
.text:000000000000584E                 mov     r12, rax
.text:0000000000005851                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000005855                 call    ___ctype_b_loc
.text:000000000000585A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000585E                 mov     rsi, [rax]
.text:0000000000005861                 mov     rax, rbp
.text:0000000000005864                 jmp     short loc_5877
.text:0000000000005864 ; ---------------------------------------------------------------------------
.text:0000000000005866                 align 10h
.text:0000000000005870
.text:0000000000005870 loc_5870:                               ; CODE XREF: xstrtoul+7F↓j
.text:0000000000005870                 add     rax, 1
.text:0000000000005874                 movzx   ebx, byte ptr [rax]
.text:0000000000005877
.text:0000000000005877 loc_5877:                               ; CODE XREF: xstrtoul+64↑j
.text:0000000000005877                 movzx   ecx, bl
.text:000000000000587A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000587F                 jnz     short loc_5870
.text:0000000000005881                 cmp     bl, 2Dh ; '-'
.text:0000000000005884                 jz      short loc_58D8
.text:0000000000005886                 mov     rsi, r15        ; endptr
.text:0000000000005889                 mov     rdi, rbp        ; nptr
.text:000000000000588C                 call    _strtoul
.text:0000000000005891                 mov     rcx, [r15]
.text:0000000000005894                 mov     rbx, rax
.text:0000000000005897                 cmp     rcx, rbp
.text:000000000000589A                 jz      short loc_58C8
.text:000000000000589C                 mov     eax, [r12]
.text:00000000000058A0                 test    eax, eax
.text:00000000000058A2                 jz      short loc_5908
.text:00000000000058A4                 cmp     eax, 22h ; '"'
.text:00000000000058A7                 mov     ebp, 1
.text:00000000000058AC                 jnz     short loc_58D8
.text:00000000000058AE
.text:00000000000058AE loc_58AE:                               ; CODE XREF: xstrtoul+10A↓j
.text:00000000000058AE                 test    r13, r13
.text:00000000000058B1                 jz      short loc_58BC
.text:00000000000058B3                 movzx   r12d, byte ptr [rcx]
.text:00000000000058B7                 test    r12b, r12b
.text:00000000000058BA                 jnz     short loc_5937
.text:00000000000058BC
.text:00000000000058BC loc_58BC:                               ; CODE XREF: xstrtoul+B1↑j
.text:00000000000058BC                 mov     [r14], rbx
.text:00000000000058BF                 jmp     short loc_58DD
.text:00000000000058BF ; ---------------------------------------------------------------------------
.text:00000000000058C1                 align 8
.text:00000000000058C8
.text:00000000000058C8 loc_58C8:                               ; CODE XREF: xstrtoul+9A↑j
.text:00000000000058C8                 test    r13, r13
.text:00000000000058CB                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000058D0                 jnz     short loc_5910
.text:00000000000058D2                 nop     word ptr [rax+rax+00h]
.text:00000000000058D8
.text:00000000000058D8 loc_58D8:                               ; CODE XREF: xstrtoul+84↑j
.text:00000000000058D8                                         ; xstrtoul+AC↑j ...
.text:00000000000058D8                 mov     ebp, 4
.text:00000000000058DD
.text:00000000000058DD loc_58DD:                               ; CODE XREF: xstrtoul+BF↑j
.text:00000000000058DD                                         ; xstrtoul+217↓j ...
.text:00000000000058DD                 mov     rdi, [rsp+58h+var_40]
.text:00000000000058E2                 xor     rdi, fs:28h
.text:00000000000058EB                 mov     eax, ebp
.text:00000000000058ED                 jnz     loc_5B80
.text:00000000000058F3                 add     rsp, 28h
.text:00000000000058F7                 pop     rbx
.text:00000000000058F8                 pop     rbp
.text:00000000000058F9                 pop     r12
.text:00000000000058FB                 pop     r13
.text:00000000000058FD                 pop     r14
.text:00000000000058FF                 pop     r15
.text:0000000000005901                 retn
.text:0000000000005901 ; ---------------------------------------------------------------------------
.text:0000000000005902                 align 8
.text:0000000000005908
.text:0000000000005908 loc_5908:                               ; CODE XREF: xstrtoul+A2↑j
.text:0000000000005908                 xor     ebp, ebp
.text:000000000000590A                 jmp     short loc_58AE
.text:000000000000590A ; ---------------------------------------------------------------------------
.text:000000000000590C                 align 10h
.text:0000000000005910
.text:0000000000005910 loc_5910:                               ; CODE XREF: xstrtoul+D0↑j
.text:0000000000005910                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000005915                 test    r12b, r12b
.text:0000000000005918                 jz      short loc_58D8
.text:000000000000591A                 movsx   esi, r12b       ; c
.text:000000000000591E                 mov     rdi, r13        ; s
.text:0000000000005921                 xor     ebp, ebp
.text:0000000000005923                 call    _strchr
.text:0000000000005928                 test    rax, rax
.text:000000000000592B                 mov     ebx, 1
.text:0000000000005930                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005935                 jz      short loc_58D8
.text:0000000000005937
.text:0000000000005937 loc_5937:                               ; CODE XREF: xstrtoul+BA↑j
.text:0000000000005937                 movsx   esi, r12b       ; c
.text:000000000000593B                 mov     rdi, r13        ; s
.text:000000000000593E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000005943                 call    _strchr
.text:0000000000005948                 test    rax, rax
.text:000000000000594B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005950                 jz      def_59D6        ; jumptable 00000000000059D6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005956                 lea     eax, [r12-45h]
.text:000000000000595B                 cmp     al, 2Fh ; '/'
.text:000000000000595D                 ja      short loc_59B0
.text:000000000000595F                 mov     rdx, 814400308945h
.text:0000000000005969                 bt      rdx, rax
.text:000000000000596D                 jnb     short loc_59B0
.text:000000000000596F                 mov     esi, 30h ; '0'  ; c
.text:0000000000005974                 mov     rdi, r13        ; s
.text:0000000000005977                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000597C                 call    _strchr
.text:0000000000005981                 test    rax, rax
.text:0000000000005984                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000005989                 jz      short loc_59B0
.text:000000000000598B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000598F                 cmp     al, 44h ; 'D'
.text:0000000000005991                 jz      short loc_599F
.text:0000000000005993                 cmp     al, 69h ; 'i'
.text:0000000000005995                 jz      loc_5B68
.text:000000000000599B                 cmp     al, 42h ; 'B'
.text:000000000000599D                 jnz     short loc_59B0
.text:000000000000599F
.text:000000000000599F loc_599F:                               ; CODE XREF: xstrtoul+191↑j
.text:000000000000599F                 mov     edi, 2
.text:00000000000059A4                 mov     esi, 3E8h
.text:00000000000059A9                 jmp     short loc_59BA
.text:00000000000059A9 ; ---------------------------------------------------------------------------
.text:00000000000059AB                 align 10h
.text:00000000000059B0
.text:00000000000059B0 loc_59B0:                               ; CODE XREF: xstrtoul+15D↑j
.text:00000000000059B0                                         ; xstrtoul+16D↑j ...
.text:00000000000059B0                 mov     edi, 1
.text:00000000000059B5                 mov     esi, 400h
.text:00000000000059BA
.text:00000000000059BA loc_59BA:                               ; CODE XREF: xstrtoul+1A9↑j
.text:00000000000059BA                                         ; xstrtoul+37B↓j
.text:00000000000059BA                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:00000000000059BE                 cmp     r12b, 35h
.text:00000000000059C2                 ja      short def_59D6  ; jumptable 00000000000059D6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000059C4                 lea     rdx, jpt_59D6
.text:00000000000059CB                 movzx   r12d, r12b
.text:00000000000059CF                 movsxd  rax, ds:(jpt_59D6 - 7288h)[rdx+r12*4]
.text:00000000000059D3                 add     rax, rdx
.text:00000000000059D6                 jmp     rax             ; switch jump
.text:00000000000059D8 ; ---------------------------------------------------------------------------
.text:00000000000059D8
.text:00000000000059D8 loc_59D8:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000059D8                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:00000000000059D8                 mov     rax, rbx        ; jumptable 00000000000059D6 cases 77,109
.text:00000000000059DB                 mul     rsi
.text:00000000000059DE                 jo      loc_5BD1
.text:00000000000059E4                 xor     r8d, r8d
.text:00000000000059E7
.text:00000000000059E7 loc_59E7:                               ; CODE XREF: xstrtoul+34E↓j
.text:00000000000059E7                                         ; xstrtoul+35E↓j ...
.text:00000000000059E7                 mul     rsi
.text:00000000000059EA                 jo      loc_5BC2
.text:00000000000059F0                 mov     rbx, rax
.text:00000000000059F3
.text:00000000000059F3 loc_59F3:                               ; CODE XREF: xstrtoul+3CC↓j
.text:00000000000059F3                 or      ebp, r8d
.text:00000000000059F6                 db      2Eh
.text:00000000000059F6                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005A00
.text:0000000000005A00 loc_5A00:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005A00                                         ; xstrtoul+23B↓j ...
.text:0000000000005A00                 movsxd  rdi, edi        ; jumptable 00000000000059D6 case 99
.text:0000000000005A03                 mov     eax, ebp
.text:0000000000005A05                 add     rcx, rdi
.text:0000000000005A08                 or      eax, 2
.text:0000000000005A0B                 mov     [r15], rcx
.text:0000000000005A0E                 cmp     byte ptr [rcx], 0
.text:0000000000005A11                 mov     [r14], rbx
.text:0000000000005A14                 cmovnz  ebp, eax
.text:0000000000005A17                 jmp     loc_58DD
.text:0000000000005A1C ; ---------------------------------------------------------------------------
.text:0000000000005A1C
.text:0000000000005A1C def_59D6:                               ; CODE XREF: xstrtoul+150↑j
.text:0000000000005A1C                                         ; xstrtoul+1C2↑j ...
.text:0000000000005A1C                 mov     [r14], rbx      ; jumptable 00000000000059D6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000005A1F                 or      ebp, 2
.text:0000000000005A22                 jmp     loc_58DD
.text:0000000000005A27 ; ---------------------------------------------------------------------------
.text:0000000000005A27
.text:0000000000005A27 loc_5A27:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005A27                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005A27                 mov     edx, 2          ; jumptable 00000000000059D6 case 119
.text:0000000000005A2C                 mov     rax, rdx
.text:0000000000005A2F                 mul     rbx
.text:0000000000005A32                 jo      loc_5ACE
.text:0000000000005A38                 add     rbx, rbx
.text:0000000000005A3B                 jmp     short loc_5A00  ; jumptable 00000000000059D6 case 99
.text:0000000000005A3D ; ---------------------------------------------------------------------------
.text:0000000000005A3D
.text:0000000000005A3D loc_5A3D:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005A3D                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005A3D                 mov     edx, 200h       ; jumptable 00000000000059D6 case 98
.text:0000000000005A42                 mov     rax, rdx
.text:0000000000005A45                 mul     rbx
.text:0000000000005A48                 jo      loc_5ACE
.text:0000000000005A4E                 shl     rbx, 9
.text:0000000000005A52                 jmp     short loc_5A00  ; jumptable 00000000000059D6 case 99
.text:0000000000005A54 ; ---------------------------------------------------------------------------
.text:0000000000005A54
.text:0000000000005A54 loc_5A54:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005A54                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005A54                 mov     r8d, 7          ; jumptable 00000000000059D6 case 90
.text:0000000000005A5A                 xor     r9d, r9d
.text:0000000000005A5D                 nop     dword ptr [rax]
.text:0000000000005A60
.text:0000000000005A60 loc_5A60:                               ; CODE XREF: xstrtoul+273↓j
.text:0000000000005A60                 mov     rax, rbx
.text:0000000000005A63                 mul     rsi
.text:0000000000005A66                 mov     rbx, rax
.text:0000000000005A69                 jo      loc_5BFE
.text:0000000000005A6F
.text:0000000000005A6F loc_5A6F:                               ; CODE XREF: xstrtoul+408↓j
.text:0000000000005A6F                 sub     r8d, 1
.text:0000000000005A73                 jnz     short loc_5A60
.text:0000000000005A75
.text:0000000000005A75 loc_5A75:                               ; CODE XREF: xstrtoul+29D↓j
.text:0000000000005A75                                         ; xstrtoul+2BD↓j ...
.text:0000000000005A75                 or      ebp, r9d
.text:0000000000005A78                 jmp     short loc_5A00  ; jumptable 00000000000059D6 case 99
.text:0000000000005A7A ; ---------------------------------------------------------------------------
.text:0000000000005A7A
.text:0000000000005A7A loc_5A7A:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005A7A                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005A7A                 mov     r8d, 8          ; jumptable 00000000000059D6 case 89
.text:0000000000005A80                 xor     r9d, r9d
.text:0000000000005A83                 nop     dword ptr [rax+rax+00h]
.text:0000000000005A88
.text:0000000000005A88 loc_5A88:                               ; CODE XREF: xstrtoul+29B↓j
.text:0000000000005A88                 mov     rax, rbx
.text:0000000000005A8B                 mul     rsi
.text:0000000000005A8E                 mov     rbx, rax
.text:0000000000005A91                 jo      loc_5BE0
.text:0000000000005A97
.text:0000000000005A97 loc_5A97:                               ; CODE XREF: xstrtoul+3EA↓j
.text:0000000000005A97                 sub     r8d, 1
.text:0000000000005A9B                 jnz     short loc_5A88
.text:0000000000005A9D                 jmp     short loc_5A75
.text:0000000000005A9F ; ---------------------------------------------------------------------------
.text:0000000000005A9F
.text:0000000000005A9F loc_5A9F:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005A9F                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005A9F                 mov     r8d, 4          ; jumptable 00000000000059D6 cases 84,116
.text:0000000000005AA5                 xor     r9d, r9d
.text:0000000000005AA8
.text:0000000000005AA8 loc_5AA8:                               ; CODE XREF: xstrtoul+2BB↓j
.text:0000000000005AA8                 mov     rax, rbx
.text:0000000000005AAB                 mul     rsi
.text:0000000000005AAE                 mov     rbx, rax
.text:0000000000005AB1                 jo      loc_5BB3
.text:0000000000005AB7
.text:0000000000005AB7 loc_5AB7:                               ; CODE XREF: xstrtoul+3BD↓j
.text:0000000000005AB7                 sub     r8d, 1
.text:0000000000005ABB                 jnz     short loc_5AA8
.text:0000000000005ABD                 jmp     short loc_5A75
.text:0000000000005ABF ; ---------------------------------------------------------------------------
.text:0000000000005ABF
.text:0000000000005ABF loc_5ABF:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005ABF                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005ABF                 mov     rax, rbx        ; jumptable 00000000000059D6 cases 75,107
.text:0000000000005AC2                 mul     rsi
.text:0000000000005AC5                 mov     rbx, rax
.text:0000000000005AC8                 jno     loc_5A00        ; jumptable 00000000000059D6 case 99
.text:0000000000005ACE
.text:0000000000005ACE loc_5ACE:                               ; CODE XREF: xstrtoul+232↑j
.text:0000000000005ACE                                         ; xstrtoul+248↑j ...
.text:0000000000005ACE                 mov     ebp, 1
.text:0000000000005AD3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005AD7                 jmp     loc_5A00        ; jumptable 00000000000059D6 case 99
.text:0000000000005AD7 ; ---------------------------------------------------------------------------
.text:0000000000005ADC                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 loc_5AE0:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005AE0                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005AE0                 mov     r8d, 5          ; jumptable 00000000000059D6 case 80
.text:0000000000005AE6                 xor     r9d, r9d
.text:0000000000005AE9
.text:0000000000005AE9 loc_5AE9:                               ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000005AE9                 mov     rax, rbx
.text:0000000000005AEC                 mul     rsi
.text:0000000000005AEF                 mov     rbx, rax
.text:0000000000005AF2                 jo      loc_5BEF
.text:0000000000005AF8
.text:0000000000005AF8 loc_5AF8:                               ; CODE XREF: xstrtoul+3F9↓j
.text:0000000000005AF8                 sub     r8d, 1
.text:0000000000005AFC                 jnz     short loc_5AE9
.text:0000000000005AFE                 jmp     loc_5A75
.text:0000000000005B03 ; ---------------------------------------------------------------------------
.text:0000000000005B03
.text:0000000000005B03 loc_5B03:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005B03                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005B03                 mov     r8d, 6          ; jumptable 00000000000059D6 case 69
.text:0000000000005B09                 xor     r9d, r9d
.text:0000000000005B0C
.text:0000000000005B0C loc_5B0C:                               ; CODE XREF: xstrtoul+31F↓j
.text:0000000000005B0C                 mov     rax, rbx
.text:0000000000005B0F                 mul     rsi
.text:0000000000005B12                 mov     rbx, rax
.text:0000000000005B15                 jo      loc_5BA4
.text:0000000000005B1B
.text:0000000000005B1B loc_5B1B:                               ; CODE XREF: xstrtoul+3AE↓j
.text:0000000000005B1B                 sub     r8d, 1
.text:0000000000005B1F                 jnz     short loc_5B0C
.text:0000000000005B21                 jmp     loc_5A75
.text:0000000000005B26 ; ---------------------------------------------------------------------------
.text:0000000000005B26
.text:0000000000005B26 loc_5B26:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005B26                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005B26                 mov     edx, 400h       ; jumptable 00000000000059D6 case 66
.text:0000000000005B2B                 mov     rax, rdx
.text:0000000000005B2E                 mul     rbx
.text:0000000000005B31                 jo      short loc_5ACE
.text:0000000000005B33                 shl     rbx, 0Ah
.text:0000000000005B37                 jmp     loc_5A00        ; jumptable 00000000000059D6 case 99
.text:0000000000005B3C ; ---------------------------------------------------------------------------
.text:0000000000005B3C
.text:0000000000005B3C loc_5B3C:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000005B3C                                         ; DATA XREF: .rodata:jpt_59D6↓o
.text:0000000000005B3C                 mov     rax, rbx        ; jumptable 00000000000059D6 cases 71,103
.text:0000000000005B3F                 mul     rsi
.text:0000000000005B42                 jo      loc_5C0D
.text:0000000000005B48                 xor     r8d, r8d
.text:0000000000005B4B
.text:0000000000005B4B loc_5B4B:                               ; CODE XREF: xstrtoul+417↓j
.text:0000000000005B4B                 mul     rsi
.text:0000000000005B4E                 jno     loc_59E7
.text:0000000000005B54                 mov     r8d, 1
.text:0000000000005B5A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005B5E                 jmp     loc_59E7
.text:0000000000005B5E ; ---------------------------------------------------------------------------
.text:0000000000005B63                 align 8
.text:0000000000005B68
.text:0000000000005B68 loc_5B68:                               ; CODE XREF: xstrtoul+195↑j
.text:0000000000005B68                 xor     edi, edi
.text:0000000000005B6A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000005B6E                 mov     esi, 400h
.text:0000000000005B73                 setz    dil
.text:0000000000005B77                 lea     edi, [rdi+rdi+1]
.text:0000000000005B7B                 jmp     loc_59BA
.text:0000000000005B80 ; ---------------------------------------------------------------------------
.text:0000000000005B80
.text:0000000000005B80 loc_5B80:                               ; CODE XREF: xstrtoul+ED↑j
.text:0000000000005B80                 call    ___stack_chk_fail
.text:0000000000005B85 ; ---------------------------------------------------------------------------
.text:0000000000005B85
.text:0000000000005B85 loc_5B85:                               ; CODE XREF: xstrtoul+21↑j
.text:0000000000005B85                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:0000000000005B8C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000005B93                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000005B9A                 mov     edx, 54h ; 'T'  ; line
.text:0000000000005B9F                 call    ___assert_fail
.text:0000000000005BA4 ; ---------------------------------------------------------------------------
.text:0000000000005BA4
.text:0000000000005BA4 loc_5BA4:                               ; CODE XREF: xstrtoul+315↑j
.text:0000000000005BA4                 mov     r9d, 1
.text:0000000000005BAA                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BAE                 jmp     loc_5B1B
.text:0000000000005BB3 ; ---------------------------------------------------------------------------
.text:0000000000005BB3
.text:0000000000005BB3 loc_5BB3:                               ; CODE XREF: xstrtoul+2B1↑j
.text:0000000000005BB3                 mov     r9d, 1
.text:0000000000005BB9                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BBD                 jmp     loc_5AB7
.text:0000000000005BC2 ; ---------------------------------------------------------------------------
.text:0000000000005BC2
.text:0000000000005BC2 loc_5BC2:                               ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000005BC2                 mov     r8d, 1
.text:0000000000005BC8                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BCC                 jmp     loc_59F3
.text:0000000000005BD1 ; ---------------------------------------------------------------------------
.text:0000000000005BD1
.text:0000000000005BD1 loc_5BD1:                               ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000005BD1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BD5                 mov     r8d, 1
.text:0000000000005BDB                 jmp     loc_59E7
.text:0000000000005BE0 ; ---------------------------------------------------------------------------
.text:0000000000005BE0
.text:0000000000005BE0 loc_5BE0:                               ; CODE XREF: xstrtoul+291↑j
.text:0000000000005BE0                 mov     r9d, 1
.text:0000000000005BE6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BEA                 jmp     loc_5A97
.text:0000000000005BEF ; ---------------------------------------------------------------------------
.text:0000000000005BEF
.text:0000000000005BEF loc_5BEF:                               ; CODE XREF: xstrtoul+2F2↑j
.text:0000000000005BEF                 mov     r9d, 1
.text:0000000000005BF5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BF9                 jmp     loc_5AF8
.text:0000000000005BFE ; ---------------------------------------------------------------------------
.text:0000000000005BFE
.text:0000000000005BFE loc_5BFE:                               ; CODE XREF: xstrtoul+269↑j
.text:0000000000005BFE                 mov     r9d, 1
.text:0000000000005C04                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C08                 jmp     loc_5A6F
.text:0000000000005C0D ; ---------------------------------------------------------------------------
.text:0000000000005C0D
.text:0000000000005C0D loc_5C0D:                               ; CODE XREF: xstrtoul+342↑j
.text:0000000000005C0D                 mov     r8d, 1
.text:0000000000005C13                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C17                 jmp     loc_5B4B
.text:0000000000005C17 ; } // starts at 5800
.text:0000000000005C17 xstrtoul        endp
.text:0000000000005C17
.text:0000000000005C17 ; ---------------------------------------------------------------------------
.text:0000000000005C1C                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20 ; Attributes: info_from_lumina
.text:0000000000005C20
.text:0000000000005C20 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000005C20                 public rpl_mbrtowc
.text:0000000000005C20 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000005C20
.text:0000000000005C20 pwc             = dword ptr -34h
.text:0000000000005C20 var_30          = qword ptr -30h
.text:0000000000005C20
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 push    r13
.text:0000000000005C22                 push    r12
.text:0000000000005C24                 mov     r13, rsi
.text:0000000000005C27                 push    rbp
.text:0000000000005C28                 push    rbx
.text:0000000000005C29                 mov     rbx, rdi
.text:0000000000005C2C                 mov     r12, rdx
.text:0000000000005C2F                 sub     rsp, 18h
.text:0000000000005C33                 mov     rax, fs:28h
.text:0000000000005C3C                 mov     [rsp+38h+var_30], rax
.text:0000000000005C41                 xor     eax, eax
.text:0000000000005C43                 lea     rax, [rsp+38h+pwc]
.text:0000000000005C48                 test    rdi, rdi
.text:0000000000005C4B                 cmovz   rbx, rax
.text:0000000000005C4F                 mov     rdi, rbx        ; pwc
.text:0000000000005C52                 call    _mbrtowc
.text:0000000000005C57                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000005C5B                 mov     rbp, rax
.text:0000000000005C5E                 jbe     short loc_5C80
.text:0000000000005C60                 test    r12, r12
.text:0000000000005C63                 jz      short loc_5C80
.text:0000000000005C65                 xor     edi, edi
.text:0000000000005C67                 call    hard_locale
.text:0000000000005C6C                 test    al, al
.text:0000000000005C6E                 jnz     short loc_5C80
.text:0000000000005C70                 movzx   eax, byte ptr [r13+0]
.text:0000000000005C75                 mov     ebp, 1
.text:0000000000005C7A                 mov     [rbx], eax
.text:0000000000005C7C                 nop     dword ptr [rax+00h]
.text:0000000000005C80
.text:0000000000005C80 loc_5C80:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000005C80                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000005C80                 mov     rdx, [rsp+38h+var_30]
.text:0000000000005C85                 xor     rdx, fs:28h
.text:0000000000005C8E                 mov     rax, rbp
.text:0000000000005C91                 jnz     short loc_5C9E
.text:0000000000005C93                 add     rsp, 18h
.text:0000000000005C97                 pop     rbx
.text:0000000000005C98                 pop     rbp
.text:0000000000005C99                 pop     r12
.text:0000000000005C9B                 pop     r13
.text:0000000000005C9D                 retn
.text:0000000000005C9E ; ---------------------------------------------------------------------------
.text:0000000000005C9E
.text:0000000000005C9E loc_5C9E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000005C9E                 call    ___stack_chk_fail
.text:0000000000005C9E ; } // starts at 5C20
.text:0000000000005C9E rpl_mbrtowc     endp
.text:0000000000005C9E
.text:0000000000005C9E ; ---------------------------------------------------------------------------
.text:0000000000005CA3                 align 10h
.text:0000000000005CB0
.text:0000000000005CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005CB0
.text:0000000000005CB0 ; Attributes: info_from_lumina
.text:0000000000005CB0
.text:0000000000005CB0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000005CB0                 public close_stream
.text:0000000000005CB0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000005CB0                                         ; close_stdout+33↑p
.text:0000000000005CB0 ; __unwind {
.text:0000000000005CB0                 push    r12
.text:0000000000005CB2                 push    rbp
.text:0000000000005CB3                 mov     rbp, rdi
.text:0000000000005CB6                 push    rbx
.text:0000000000005CB7                 call    ___fpending
.text:0000000000005CBC                 mov     ebx, [rbp+0]
.text:0000000000005CBF                 mov     rdi, rbp        ; stream
.text:0000000000005CC2                 mov     r12, rax
.text:0000000000005CC5                 call    rpl_fclose
.text:0000000000005CCA                 and     ebx, 20h
.text:0000000000005CCD                 test    ebx, ebx
.text:0000000000005CCF                 jnz     short loc_5CE8
.text:0000000000005CD1                 test    eax, eax
.text:0000000000005CD3                 jz      short loc_5CDF
.text:0000000000005CD5                 test    r12, r12
.text:0000000000005CD8                 mov     eax, 0FFFFFFFFh
.text:0000000000005CDD                 jz      short loc_5D18
.text:0000000000005CDF
.text:0000000000005CDF loc_5CDF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000005CDF                 pop     rbx
.text:0000000000005CE0                 pop     rbp
.text:0000000000005CE1                 pop     r12
.text:0000000000005CE3                 retn
.text:0000000000005CE3 ; ---------------------------------------------------------------------------
.text:0000000000005CE4                 align 8
.text:0000000000005CE8
.text:0000000000005CE8 loc_5CE8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000005CE8                 test    eax, eax
.text:0000000000005CEA                 jnz     short loc_5D08
.text:0000000000005CEC                 call    ___errno_location
.text:0000000000005CF1                 mov     dword ptr [rax], 0
.text:0000000000005CF7                 mov     eax, 0FFFFFFFFh
.text:0000000000005CFC                 pop     rbx
.text:0000000000005CFD                 pop     rbp
.text:0000000000005CFE                 pop     r12
.text:0000000000005D00                 retn
.text:0000000000005D00 ; ---------------------------------------------------------------------------
.text:0000000000005D01                 align 8
.text:0000000000005D08
.text:0000000000005D08 loc_5D08:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000005D08                 pop     rbx
.text:0000000000005D09                 mov     eax, 0FFFFFFFFh
.text:0000000000005D0E                 pop     rbp
.text:0000000000005D0F                 pop     r12
.text:0000000000005D11                 retn
.text:0000000000005D11 ; ---------------------------------------------------------------------------
.text:0000000000005D12                 align 8
.text:0000000000005D18
.text:0000000000005D18 loc_5D18:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000005D18                 call    ___errno_location
.text:0000000000005D1D                 cmp     dword ptr [rax], 9
.text:0000000000005D20                 pop     rbx
.text:0000000000005D21                 pop     rbp
.text:0000000000005D22                 pop     r12
.text:0000000000005D24                 setnz   al
.text:0000000000005D27                 movzx   eax, al
.text:0000000000005D2A                 neg     eax
.text:0000000000005D2C                 retn
.text:0000000000005D2C ; } // starts at 5CB0
.text:0000000000005D2C close_stream    endp
.text:0000000000005D2C
.text:0000000000005D2C ; ---------------------------------------------------------------------------
.text:0000000000005D2D                 align 10h
.text:0000000000005D30
.text:0000000000005D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D30
.text:0000000000005D30
.text:0000000000005D30                 public hard_locale
.text:0000000000005D30 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000005D30 ; __unwind {
.text:0000000000005D30                 sub     rsp, 8
.text:0000000000005D34                 xor     esi, esi        ; locale
.text:0000000000005D36                 call    _setlocale
.text:0000000000005D3B                 mov     rdx, rax
.text:0000000000005D3E                 mov     eax, 1
.text:0000000000005D43                 test    rdx, rdx
.text:0000000000005D46                 jz      short loc_5D65
.text:0000000000005D48                 lea     rdi, aC         ; "C"
.text:0000000000005D4F                 mov     ecx, 2
.text:0000000000005D54                 mov     rsi, rdx
.text:0000000000005D57                 repe cmpsb
.text:0000000000005D59                 setnbe  cl
.text:0000000000005D5C                 sbb     cl, 0
.text:0000000000005D5F                 xor     eax, eax
.text:0000000000005D61                 test    cl, cl
.text:0000000000005D63                 jnz     short loc_5D70
.text:0000000000005D65
.text:0000000000005D65 loc_5D65:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000005D65                 add     rsp, 8
.text:0000000000005D69                 retn
.text:0000000000005D69 ; ---------------------------------------------------------------------------
.text:0000000000005D6A                 align 10h
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000005D70                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000005D77                 mov     ecx, 6
.text:0000000000005D7C                 mov     rsi, rdx
.text:0000000000005D7F                 repe cmpsb
.text:0000000000005D81                 setnbe  al
.text:0000000000005D84                 sbb     al, 0
.text:0000000000005D86                 test    al, al
.text:0000000000005D88                 setnz   al
.text:0000000000005D8B                 add     rsp, 8
.text:0000000000005D8F                 retn
.text:0000000000005D8F ; } // starts at 5D30
.text:0000000000005D8F hard_locale     endp
.text:0000000000005D8F
.text:0000000000005D90
.text:0000000000005D90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D90
.text:0000000000005D90
.text:0000000000005D90                 public locale_charset
.text:0000000000005D90 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000005D90 ; __unwind {
.text:0000000000005D90                 sub     rsp, 8
.text:0000000000005D94                 mov     edi, 0Eh        ; item
.text:0000000000005D99                 call    _nl_langinfo
.text:0000000000005D9E                 test    rax, rax
.text:0000000000005DA1                 jz      short loc_5DC0
.text:0000000000005DA3                 cmp     byte ptr [rax], 0
.text:0000000000005DA6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000005DAD                 cmovz   rax, rdx
.text:0000000000005DB1                 add     rsp, 8
.text:0000000000005DB5                 retn
.text:0000000000005DB5 ; ---------------------------------------------------------------------------
.text:0000000000005DB6                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000005DC0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000005DC7                 add     rsp, 8
.text:0000000000005DCB                 retn
.text:0000000000005DCB ; } // starts at 5D90
.text:0000000000005DCB locale_charset  endp
.text:0000000000005DCB
.text:0000000000005DCB ; ---------------------------------------------------------------------------
.text:0000000000005DCC                 align 10h
.text:0000000000005DD0
.text:0000000000005DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DD0
.text:0000000000005DD0
.text:0000000000005DD0 realloc_groupbuf proc near              ; CODE XREF: mgetgroups+3F↓p
.text:0000000000005DD0                                         ; mgetgroups+77↓p ...
.text:0000000000005DD0 ; __unwind {
.text:0000000000005DD0                 mov     edx, 4
.text:0000000000005DD5                 mov     rax, rdx
.text:0000000000005DD8                 mul     rsi
.text:0000000000005DDB                 jo      short loc_5E0E
.text:0000000000005DDD                 xor     ecx, ecx
.text:0000000000005DDF
.text:0000000000005DDF loc_5DDF:                               ; CODE XREF: realloc_groupbuf+43↓j
.text:0000000000005DDF                 test    rax, rax
.text:0000000000005DE2                 js      short loc_5DF8
.text:0000000000005DE4                 test    rcx, rcx
.text:0000000000005DE7                 jnz     short loc_5DF8
.text:0000000000005DE9                 shl     rsi, 2          ; size
.text:0000000000005DED                 jmp     _realloc
.text:0000000000005DED ; ---------------------------------------------------------------------------
.text:0000000000005DF2                 align 8
.text:0000000000005DF8
.text:0000000000005DF8 loc_5DF8:                               ; CODE XREF: realloc_groupbuf+12↑j
.text:0000000000005DF8                                         ; realloc_groupbuf+17↑j
.text:0000000000005DF8                 sub     rsp, 8
.text:0000000000005DFC                 call    ___errno_location
.text:0000000000005E01                 mov     dword ptr [rax], 0Ch
.text:0000000000005E07                 xor     eax, eax
.text:0000000000005E09                 add     rsp, 8
.text:0000000000005E0D                 retn
.text:0000000000005E0E ; ---------------------------------------------------------------------------
.text:0000000000005E0E
.text:0000000000005E0E loc_5E0E:                               ; CODE XREF: realloc_groupbuf+B↑j
.text:0000000000005E0E                 mov     ecx, 1
.text:0000000000005E13                 jmp     short loc_5DDF
.text:0000000000005E13 ; } // starts at 5DD0
.text:0000000000005E13 realloc_groupbuf endp
.text:0000000000005E13
.text:0000000000005E13 ; ---------------------------------------------------------------------------
.text:0000000000005E15                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20 ; Attributes: info_from_lumina
.text:0000000000005E20
.text:0000000000005E20 ; __int64 __fastcall mgetgroups(char *user, __gid_t group)
.text:0000000000005E20                 public mgetgroups
.text:0000000000005E20 mgetgroups      proc near               ; CODE XREF: xgetgroups+1↑p
.text:0000000000005E20
.text:0000000000005E20 ngroups         = dword ptr -44h
.text:0000000000005E20 var_40          = qword ptr -40h
.text:0000000000005E20
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 push    r15
.text:0000000000005E22                 push    r14
.text:0000000000005E24                 mov     r15, rdx
.text:0000000000005E27                 push    r13
.text:0000000000005E29                 push    r12
.text:0000000000005E2B                 mov     r13d, esi
.text:0000000000005E2E                 push    rbp
.text:0000000000005E2F                 push    rbx
.text:0000000000005E30                 sub     rsp, 18h
.text:0000000000005E34                 mov     rax, fs:28h
.text:0000000000005E3D                 mov     [rsp+48h+var_40], rax
.text:0000000000005E42                 xor     eax, eax
.text:0000000000005E44                 test    rdi, rdi
.text:0000000000005E47                 jz      loc_5F18
.text:0000000000005E4D                 mov     rbp, rdi
.text:0000000000005E50                 mov     esi, 0Ah
.text:0000000000005E55                 xor     edi, edi
.text:0000000000005E57                 mov     [rsp+48h+ngroups], 0Ah
.text:0000000000005E5F                 call    realloc_groupbuf
.text:0000000000005E64                 test    rax, rax
.text:0000000000005E67                 mov     rbx, rax
.text:0000000000005E6A                 jz      loc_6038
.text:0000000000005E70                 lea     r14, [rsp+48h+ngroups]
.text:0000000000005E75
.text:0000000000005E75 loc_5E75:                               ; CODE XREF: mgetgroups+DE↓j
.text:0000000000005E75                 mov     esi, r13d       ; group
.text:0000000000005E78                 mov     rcx, r14        ; ngroups
.text:0000000000005E7B                 mov     rdx, rbx        ; groups
.text:0000000000005E7E                 mov     rdi, rbp        ; user
.text:0000000000005E81                 mov     r12d, [rsp+48h+ngroups]
.text:0000000000005E86                 call    _getgrouplist
.text:0000000000005E8B                 test    eax, eax
.text:0000000000005E8D                 movsxd  rsi, [rsp+48h+ngroups]
.text:0000000000005E92                 js      short loc_5EE0
.text:0000000000005E94                 mov     rdi, rbx
.text:0000000000005E97                 call    realloc_groupbuf
.text:0000000000005E9C                 test    rax, rax
.text:0000000000005E9F                 jnz     short loc_5F08
.text:0000000000005EA1
.text:0000000000005EA1 loc_5EA1:                               ; CODE XREF: mgetgroups+D9↓j
.text:0000000000005EA1                                         ; mgetgroups+15E↓j ...
.text:0000000000005EA1                 call    ___errno_location
.text:0000000000005EA6                 mov     r12d, [rax]
.text:0000000000005EA9                 mov     rbp, rax
.text:0000000000005EAC                 mov     rdi, rbx        ; ptr
.text:0000000000005EAF                 call    _free
.text:0000000000005EB4                 mov     eax, 0FFFFFFFFh
.text:0000000000005EB9                 mov     [rbp+0], r12d
.text:0000000000005EBD
.text:0000000000005EBD loc_5EBD:                               ; CODE XREF: mgetgroups+EF↓j
.text:0000000000005EBD                                         ; mgetgroups+170↓j ...
.text:0000000000005EBD                 mov     rcx, [rsp+48h+var_40]
.text:0000000000005EC2                 xor     rcx, fs:28h
.text:0000000000005ECB                 jnz     loc_6057
.text:0000000000005ED1                 add     rsp, 18h
.text:0000000000005ED5                 pop     rbx
.text:0000000000005ED6                 pop     rbp
.text:0000000000005ED7                 pop     r12
.text:0000000000005ED9                 pop     r13
.text:0000000000005EDB                 pop     r14
.text:0000000000005EDD                 pop     r15
.text:0000000000005EDF                 retn
.text:0000000000005EE0 ; ---------------------------------------------------------------------------
.text:0000000000005EE0
.text:0000000000005EE0 loc_5EE0:                               ; CODE XREF: mgetgroups+72↑j
.text:0000000000005EE0                 cmp     esi, r12d
.text:0000000000005EE3                 jnz     short loc_5EEE
.text:0000000000005EE5                 add     esi, esi
.text:0000000000005EE7                 mov     [rsp+48h+ngroups], esi
.text:0000000000005EEB                 movsxd  rsi, esi
.text:0000000000005EEE
.text:0000000000005EEE loc_5EEE:                               ; CODE XREF: mgetgroups+C3↑j
.text:0000000000005EEE                 mov     rdi, rbx
.text:0000000000005EF1                 call    realloc_groupbuf
.text:0000000000005EF6                 test    rax, rax
.text:0000000000005EF9                 jz      short loc_5EA1
.text:0000000000005EFB                 mov     rbx, rax
.text:0000000000005EFE                 jmp     loc_5E75
.text:0000000000005EFE ; ---------------------------------------------------------------------------
.text:0000000000005F03                 align 8
.text:0000000000005F08
.text:0000000000005F08 loc_5F08:                               ; CODE XREF: mgetgroups+7F↑j
.text:0000000000005F08                 mov     [r15], rax
.text:0000000000005F0B                 mov     eax, [rsp+48h+ngroups]
.text:0000000000005F0F                 jmp     short loc_5EBD
.text:0000000000005F0F ; ---------------------------------------------------------------------------
.text:0000000000005F11                 align 8
.text:0000000000005F18
.text:0000000000005F18 loc_5F18:                               ; CODE XREF: mgetgroups+27↑j
.text:0000000000005F18                 xor     esi, esi        ; list
.text:0000000000005F1A                 xor     edi, edi        ; size
.text:0000000000005F1C                 call    _getgroups
.text:0000000000005F21                 test    eax, eax
.text:0000000000005F23                 mov     [rsp+48h+ngroups], eax
.text:0000000000005F27                 js      loc_5FD8
.text:0000000000005F2D                 cmp     r13d, 0FFFFFFFFh
.text:0000000000005F31                 setnz   bpl
.text:0000000000005F35                 test    eax, eax
.text:0000000000005F37                 jz      short loc_5F42
.text:0000000000005F39                 test    bpl, bpl
.text:0000000000005F3C                 jz      loc_6007
.text:0000000000005F42
.text:0000000000005F42 loc_5F42:                               ; CODE XREF: mgetgroups+117↑j
.text:0000000000005F42                 add     eax, 1
.text:0000000000005F45                 xor     edi, edi
.text:0000000000005F47                 movsxd  rsi, eax
.text:0000000000005F4A                 mov     [rsp+48h+ngroups], eax
.text:0000000000005F4E                 call    realloc_groupbuf
.text:0000000000005F53                 test    rax, rax
.text:0000000000005F56                 mov     rbx, rax
.text:0000000000005F59                 jz      loc_6038
.text:0000000000005F5F                 mov     edi, [rsp+48h+ngroups]
.text:0000000000005F63                 movzx   ebp, bpl
.text:0000000000005F67                 sub     edi, ebp        ; size
.text:0000000000005F69                 cmp     r13d, 0FFFFFFFFh
.text:0000000000005F6D                 jz      loc_6042
.text:0000000000005F73                 lea     rsi, [rax+4]    ; list
.text:0000000000005F77                 call    _getgroups
.text:0000000000005F7C                 test    eax, eax
.text:0000000000005F7E                 js      loc_5EA1
.text:0000000000005F84                 mov     [rbx], r13d
.text:0000000000005F87                 add     eax, 1
.text:0000000000005F8A
.text:0000000000005F8A loc_5F8A:                               ; CODE XREF: mgetgroups+207↓j
.text:0000000000005F8A                                         ; mgetgroups+22C↓j
.text:0000000000005F8A                 cmp     eax, 1
.text:0000000000005F8D                 mov     [r15], rbx
.text:0000000000005F90                 jle     loc_5EBD
.text:0000000000005F96                 movsxd  rdx, eax
.text:0000000000005F99                 mov     edi, [rbx]
.text:0000000000005F9B                 lea     rsi, [rbx+rdx*4]
.text:0000000000005F9F                 lea     rdx, [rbx+4]
.text:0000000000005FA3                 cmp     rsi, rdx
.text:0000000000005FA6                 ja      short loc_5FC8
.text:0000000000005FA8                 jmp     loc_5EBD
.text:0000000000005FA8 ; ---------------------------------------------------------------------------
.text:0000000000005FAD                 align 10h
.text:0000000000005FB0
.text:0000000000005FB0 loc_5FB0:                               ; CODE XREF: mgetgroups+1AC↓j
.text:0000000000005FB0                 cmp     ecx, [rbx]
.text:0000000000005FB2                 jz      short loc_5FCE
.text:0000000000005FB4                 mov     [rbx+4], ecx
.text:0000000000005FB7                 add     rbx, 4
.text:0000000000005FBB
.text:0000000000005FBB loc_5FBB:                               ; CODE XREF: mgetgroups+1B1↓j
.text:0000000000005FBB                 add     rdx, 4
.text:0000000000005FBF                 cmp     rsi, rdx
.text:0000000000005FC2                 jbe     loc_5EBD
.text:0000000000005FC8
.text:0000000000005FC8 loc_5FC8:                               ; CODE XREF: mgetgroups+186↑j
.text:0000000000005FC8                 mov     ecx, [rdx]
.text:0000000000005FCA                 cmp     ecx, edi
.text:0000000000005FCC                 jnz     short loc_5FB0
.text:0000000000005FCE
.text:0000000000005FCE loc_5FCE:                               ; CODE XREF: mgetgroups+192↑j
.text:0000000000005FCE                 sub     eax, 1
.text:0000000000005FD1                 jmp     short loc_5FBB
.text:0000000000005FD1 ; ---------------------------------------------------------------------------
.text:0000000000005FD3                 align 8
.text:0000000000005FD8
.text:0000000000005FD8 loc_5FD8:                               ; CODE XREF: mgetgroups+107↑j
.text:0000000000005FD8                 call    ___errno_location
.text:0000000000005FDD                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000005FE0                 jnz     short loc_6038
.text:0000000000005FE2                 xor     edi, edi        ; ptr
.text:0000000000005FE4                 mov     esi, 4          ; size
.text:0000000000005FE9                 call    _realloc
.text:0000000000005FEE                 test    rax, rax
.text:0000000000005FF1                 jz      short loc_6038
.text:0000000000005FF3                 mov     [r15], rax
.text:0000000000005FF6                 mov     [rax], r13d
.text:0000000000005FF9                 xor     eax, eax
.text:0000000000005FFB                 cmp     r13d, 0FFFFFFFFh
.text:0000000000005FFF                 setnz   al
.text:0000000000006002                 jmp     loc_5EBD
.text:0000000000006007 ; ---------------------------------------------------------------------------
.text:0000000000006007
.text:0000000000006007 loc_6007:                               ; CODE XREF: mgetgroups+11C↑j
.text:0000000000006007                 xor     edi, edi
.text:0000000000006009                 movsxd  rsi, eax
.text:000000000000600C                 call    realloc_groupbuf
.text:0000000000006011                 test    rax, rax
.text:0000000000006014                 mov     rbx, rax
.text:0000000000006017                 jz      short loc_6038
.text:0000000000006019                 mov     edi, [rsp+48h+ngroups] ; size
.text:000000000000601D                 mov     rsi, rbx        ; list
.text:0000000000006020                 call    _getgroups
.text:0000000000006025                 test    eax, eax
.text:0000000000006027                 jns     loc_5F8A
.text:000000000000602D                 jmp     loc_5EA1
.text:000000000000602D ; ---------------------------------------------------------------------------
.text:0000000000006032                 align 8
.text:0000000000006038
.text:0000000000006038 loc_6038:                               ; CODE XREF: mgetgroups+4A↑j
.text:0000000000006038                                         ; mgetgroups+139↑j ...
.text:0000000000006038                 mov     eax, 0FFFFFFFFh
.text:000000000000603D                 jmp     loc_5EBD
.text:0000000000006042 ; ---------------------------------------------------------------------------
.text:0000000000006042
.text:0000000000006042 loc_6042:                               ; CODE XREF: mgetgroups+14D↑j
.text:0000000000006042                 mov     rsi, rax        ; list
.text:0000000000006045                 call    _getgroups
.text:000000000000604A                 test    eax, eax
.text:000000000000604C                 jns     loc_5F8A
.text:0000000000006052                 jmp     loc_5EA1
.text:0000000000006057 ; ---------------------------------------------------------------------------
.text:0000000000006057
.text:0000000000006057 loc_6057:                               ; CODE XREF: mgetgroups+AB↑j
.text:0000000000006057                 call    ___stack_chk_fail
.text:0000000000006057 ; } // starts at 5E20
.text:0000000000006057 mgetgroups      endp
.text:0000000000006057
.text:0000000000006057 ; ---------------------------------------------------------------------------
.text:000000000000605C                 align 20h
.text:0000000000006060
.text:0000000000006060 ; =============== S U B R O U T I N E =======================================
.text:0000000000006060
.text:0000000000006060 ; Attributes: info_from_lumina
.text:0000000000006060
.text:0000000000006060 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006060                 public rpl_fclose
.text:0000000000006060 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000006060 ; __unwind {
.text:0000000000006060                 push    r12
.text:0000000000006062                 push    rbp
.text:0000000000006063                 push    rbx
.text:0000000000006064                 mov     rbx, rdi
.text:0000000000006067                 call    _fileno
.text:000000000000606C                 test    eax, eax
.text:000000000000606E                 mov     rdi, rbx        ; fp
.text:0000000000006071                 js      short loc_60C7
.text:0000000000006073                 call    ___freading
.text:0000000000006078                 test    eax, eax
.text:000000000000607A                 jnz     short loc_60A8
.text:000000000000607C
.text:000000000000607C loc_607C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000607C                 mov     rdi, rbx        ; stream
.text:000000000000607F                 call    rpl_fflush
.text:0000000000006084                 test    eax, eax
.text:0000000000006086                 jz      short loc_60C4
.text:0000000000006088                 call    ___errno_location
.text:000000000000608D                 mov     r12d, [rax]
.text:0000000000006090                 mov     rdi, rbx        ; stream
.text:0000000000006093                 mov     rbp, rax
.text:0000000000006096                 call    _fclose
.text:000000000000609B                 test    r12d, r12d
.text:000000000000609E                 jnz     short loc_60D0
.text:00000000000060A0
.text:00000000000060A0 loc_60A0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000060A0                 pop     rbx
.text:00000000000060A1                 pop     rbp
.text:00000000000060A2                 pop     r12
.text:00000000000060A4                 retn
.text:00000000000060A4 ; ---------------------------------------------------------------------------
.text:00000000000060A5                 align 8
.text:00000000000060A8
.text:00000000000060A8 loc_60A8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000060A8                 mov     rdi, rbx        ; stream
.text:00000000000060AB                 call    _fileno
.text:00000000000060B0                 xor     esi, esi        ; offset
.text:00000000000060B2                 mov     edx, 1          ; whence
.text:00000000000060B7                 mov     edi, eax        ; fd
.text:00000000000060B9                 call    _lseek
.text:00000000000060BE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000060C2                 jnz     short loc_607C
.text:00000000000060C4
.text:00000000000060C4 loc_60C4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000060C4                 mov     rdi, rbx        ; stream
.text:00000000000060C7
.text:00000000000060C7 loc_60C7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000060C7                 pop     rbx
.text:00000000000060C8                 pop     rbp
.text:00000000000060C9                 pop     r12
.text:00000000000060CB                 jmp     _fclose
.text:00000000000060D0 ; ---------------------------------------------------------------------------
.text:00000000000060D0
.text:00000000000060D0 loc_60D0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000060D0                 mov     [rbp+0], r12d
.text:00000000000060D4                 mov     eax, 0FFFFFFFFh
.text:00000000000060D9                 jmp     short loc_60A0
.text:00000000000060D9 ; } // starts at 6060
.text:00000000000060D9 rpl_fclose      endp
.text:00000000000060D9
.text:00000000000060D9 ; ---------------------------------------------------------------------------
.text:00000000000060DB                 align 20h
.text:00000000000060E0
.text:00000000000060E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060E0
.text:00000000000060E0 ; Attributes: info_from_lumina
.text:00000000000060E0
.text:00000000000060E0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000060E0                 public rpl_fflush
.text:00000000000060E0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000060E0 ; __unwind {
.text:00000000000060E0                 test    rdi, rdi
.text:00000000000060E3                 push    rbx
.text:00000000000060E4                 mov     rbx, rdi
.text:00000000000060E7                 jz      short loc_60FA
.text:00000000000060E9                 call    ___freading
.text:00000000000060EE                 test    eax, eax
.text:00000000000060F0                 jz      short loc_60FA
.text:00000000000060F2                 test    dword ptr [rbx], 100h
.text:00000000000060F8                 jnz     short loc_6108
.text:00000000000060FA
.text:00000000000060FA loc_60FA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000060FA                                         ; rpl_fflush+10↑j
.text:00000000000060FA                 mov     rdi, rbx        ; stream
.text:00000000000060FD                 pop     rbx
.text:00000000000060FE                 jmp     _fflush
.text:00000000000060FE ; ---------------------------------------------------------------------------
.text:0000000000006103                 align 8
.text:0000000000006108
.text:0000000000006108 loc_6108:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000006108                 mov     rdi, rbx
.text:000000000000610B                 mov     edx, 1
.text:0000000000006110                 xor     esi, esi
.text:0000000000006112                 call    rpl_fseeko
.text:0000000000006117                 mov     rdi, rbx        ; stream
.text:000000000000611A                 pop     rbx
.text:000000000000611B                 jmp     _fflush
.text:000000000000611B ; } // starts at 60E0
.text:000000000000611B rpl_fflush      endp
.text:000000000000611B
.text:0000000000006120
.text:0000000000006120 ; =============== S U B R O U T I N E =======================================
.text:0000000000006120
.text:0000000000006120 ; Attributes: info_from_lumina
.text:0000000000006120
.text:0000000000006120 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006120                 public rpl_fseeko
.text:0000000000006120 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006120 ; __unwind {
.text:0000000000006120                 mov     rax, [rdi+8]
.text:0000000000006124                 cmp     [rdi+10h], rax
.text:0000000000006128                 jz      short loc_6130
.text:000000000000612A
.text:000000000000612A loc_612A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000612A                                         ; rpl_fseeko+1F↓j
.text:000000000000612A                 jmp     _fseeko
.text:000000000000612A ; ---------------------------------------------------------------------------
.text:000000000000612F                 align 10h
.text:0000000000006130
.text:0000000000006130 loc_6130:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006130                 mov     rax, [rdi+20h]
.text:0000000000006134                 cmp     [rdi+28h], rax
.text:0000000000006138                 jnz     short loc_612A
.text:000000000000613A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000613F                 jnz     short loc_612A
.text:0000000000006141                 push    r12
.text:0000000000006143                 push    rbp
.text:0000000000006144                 mov     r12d, edx
.text:0000000000006147                 push    rbx
.text:0000000000006148                 mov     rbp, rsi
.text:000000000000614B                 mov     rbx, rdi
.text:000000000000614E                 call    _fileno
.text:0000000000006153                 mov     edx, r12d       ; whence
.text:0000000000006156                 mov     rsi, rbp        ; offset
.text:0000000000006159                 mov     edi, eax        ; fd
.text:000000000000615B                 call    _lseek
.text:0000000000006160                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006164                 jz      short loc_6172
.text:0000000000006166                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006169                 mov     [rbx+90h], rax
.text:0000000000006170                 xor     eax, eax
.text:0000000000006172
.text:0000000000006172 loc_6172:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006172                 pop     rbx
.text:0000000000006173                 pop     rbp
.text:0000000000006174                 pop     r12
.text:0000000000006176                 retn
.text:0000000000006176 ; } // starts at 6120
.text:0000000000006176 rpl_fseeko      endp
.text:0000000000006176
.text:0000000000006176 ; ---------------------------------------------------------------------------
.text:0000000000006177                 align 20h
.text:0000000000006180
.text:0000000000006180 ; =============== S U B R O U T I N E =======================================
.text:0000000000006180
.text:0000000000006180 ; Attributes: info_from_lumina
.text:0000000000006180
.text:0000000000006180 ; void _libc_csu_init(void)
.text:0000000000006180                 public __libc_csu_init
.text:0000000000006180 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006180 ; __unwind {
.text:0000000000006180                 push    r15
.text:0000000000006182                 push    r14
.text:0000000000006184                 mov     r15, rdx
.text:0000000000006187                 push    r13
.text:0000000000006189                 push    r12
.text:000000000000618B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006192                 push    rbp
.text:0000000000006193                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000619A                 push    rbx
.text:000000000000619B                 mov     r13d, edi
.text:000000000000619E                 mov     r14, rsi
.text:00000000000061A1                 sub     rbp, r12
.text:00000000000061A4                 sub     rsp, 8
.text:00000000000061A8                 sar     rbp, 3
.text:00000000000061AC                 call    _init_proc
.text:00000000000061B1                 test    rbp, rbp
.text:00000000000061B4                 jz      short loc_61D6
.text:00000000000061B6                 xor     ebx, ebx
.text:00000000000061B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000061C0                 mov     rdx, r15
.text:00000000000061C3                 mov     rsi, r14
.text:00000000000061C6                 mov     edi, r13d
.text:00000000000061C9                 call    ds:(__frame_dummy_init_array_entry - 208A50h)[r12+rbx*8]
.text:00000000000061CD                 add     rbx, 1
.text:00000000000061D1                 cmp     rbp, rbx
.text:00000000000061D4                 jnz     short loc_61C0
.text:00000000000061D6
.text:00000000000061D6 loc_61D6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000061D6                 add     rsp, 8
.text:00000000000061DA                 pop     rbx
.text:00000000000061DB                 pop     rbp
.text:00000000000061DC                 pop     r12
.text:00000000000061DE                 pop     r13
.text:00000000000061E0                 pop     r14
.text:00000000000061E2                 pop     r15
.text:00000000000061E4                 retn
.text:00000000000061E4 ; } // starts at 6180
.text:00000000000061E4 __libc_csu_init endp
.text:00000000000061E4
.text:00000000000061E4 ; ---------------------------------------------------------------------------
.text:00000000000061E5                 align 10h
.text:00000000000061F0
.text:00000000000061F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061F0
.text:00000000000061F0
.text:00000000000061F0 ; void _libc_csu_fini(void)
.text:00000000000061F0                 public __libc_csu_fini
.text:00000000000061F0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000061F0 ; __unwind {
.text:00000000000061F0                 rep retn
.text:00000000000061F0 ; } // starts at 61F0
.text:00000000000061F0 __libc_csu_fini endp
.text:00000000000061F0
.text:00000000000061F0 ; ---------------------------------------------------------------------------
.text:00000000000061F2                 align 20h
.text:0000000000006200
.text:0000000000006200 ; =============== S U B R O U T I N E =======================================
.text:0000000000006200
.text:0000000000006200
.text:0000000000006200 atexit          proc near               ; CODE XREF: main+53↑p
.text:0000000000006200 ; __unwind {
.text:0000000000006200                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006207                 xor     esi, esi        ; obj
.text:0000000000006209                 jmp     ___cxa_atexit
.text:0000000000006209 ; } // starts at 6200
.text:0000000000006209 atexit          endp
.text:0000000000006209
.text:0000000000006209 _text           ends
.text:0000000000006209
LOAD:000000000000620E ; ===========================================================================
LOAD:000000000000620E
LOAD:000000000000620E ; Segment type: Pure code
LOAD:000000000000620E ; Segment permissions: Read/Execute
LOAD:000000000000620E LOAD            segment byte public 'CODE' use64
LOAD:000000000000620E                 assume cs:LOAD
LOAD:000000000000620E                 ;org 620Eh
LOAD:000000000000620E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000620E                 align 10h
LOAD:000000000000620E LOAD            ends
LOAD:000000000000620E
.fini:0000000000006210 ; ===========================================================================
.fini:0000000000006210
.fini:0000000000006210 ; Segment type: Pure code
.fini:0000000000006210 ; Segment permissions: Read/Execute
.fini:0000000000006210 _fini           segment dword public 'CODE' use64
.fini:0000000000006210                 assume cs:_fini
.fini:0000000000006210                 ;org 6210h
.fini:0000000000006210                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006210
.fini:0000000000006210 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006210
.fini:0000000000006210
.fini:0000000000006210                 public _term_proc
.fini:0000000000006210 _term_proc      proc near
.fini:0000000000006210                 sub     rsp, 8          ; _fini
.fini:0000000000006214                 add     rsp, 8
.fini:0000000000006218                 retn
.fini:0000000000006218 _term_proc      endp
.fini:0000000000006218
.fini:0000000000006218 _fini           ends
.fini:0000000000006218
LOAD:0000000000006219 ; ===========================================================================
LOAD:0000000000006219
LOAD:0000000000006219 ; Segment type: Pure code
LOAD:0000000000006219 ; Segment permissions: Read/Execute
LOAD:0000000000006219 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006219                 assume cs:LOAD
LOAD:0000000000006219                 ;org 6219h
LOAD:0000000000006219                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006219                 align 20h
LOAD:0000000000006219 LOAD            ends
LOAD:0000000000006219
.rodata:0000000000006220 ; ===========================================================================
.rodata:0000000000006220
.rodata:0000000000006220 ; Segment type: Pure data
.rodata:0000000000006220 ; Segment permissions: Read
.rodata:0000000000006220 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006220                 assume cs:_rodata
.rodata:0000000000006220                 ;org 6220h
.rodata:0000000000006220                 public _IO_stdin_used
.rodata:0000000000006220 _IO_stdin_used  db    1
.rodata:0000000000006221                 db    0
.rodata:0000000000006222                 db    2
.rodata:0000000000006223                 db    0
.rodata:0000000000006224                 db    0
.rodata:0000000000006225                 db    0
.rodata:0000000000006226                 db    0
.rodata:0000000000006227                 db    0
.rodata:0000000000006228 ; const char aCannotFindName[]
.rodata:0000000000006228 aCannotFindName db 'cannot find name for user ID %s',0
.rodata:0000000000006228                                         ; DATA XREF: print_stuff+43F↑o
.rodata:0000000000006248 ; const char aFailedToGetGro_0[]
.rodata:0000000000006248 aFailedToGetGro_0 db 'failed to get groups for user %s',0
.rodata:0000000000006248                                         ; DATA XREF: print_stuff+538↑o
.rodata:0000000000006248                                         ; print_group_list+1A5↑o
.rodata:0000000000006269                 align 10h
.rodata:0000000000006270 ; const char aFailedToGetGro[]
.rodata:0000000000006270 aFailedToGetGro db 'failed to get groups for the current process',0
.rodata:0000000000006270                                         ; DATA XREF: print_stuff+3F8↑o
.rodata:0000000000006270                                         ; print_group_list:loc_2BE0↑o
.rodata:000000000000629D                 align 20h
.rodata:00000000000062A0 ; const char aTrySHelpForMor[]
.rodata:00000000000062A0 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000062A0                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000062C7                 align 8
.rodata:00000000000062C8 ; const char aUsageSOptionUs[]
.rodata:00000000000062C8 aUsageSOptionUs db 'Usage: %s [OPTION]... [USER]...',0Ah,0
.rodata:00000000000062C8                                         ; DATA XREF: usage:loc_264D↑o
.rodata:00000000000062E9                 align 10h
.rodata:00000000000062F0 ; const char aPrintUserAndGr[]
.rodata:00000000000062F0 aPrintUserAndGr db 'Print user and group information for each specified USER,',0Ah
.rodata:00000000000062F0                                         ; DATA XREF: usage+84↑o
.rodata:00000000000062F0                 db 'or (when USER omitted) for the current user.',0Ah
.rodata:00000000000062F0                 db 0Ah,0
.rodata:0000000000006359                 align 20h
.rodata:0000000000006360 ; const char aAIgnoreForComp[]
.rodata:0000000000006360 aAIgnoreForComp db '  -a             ignore, for compatibility with other versions',0Ah
.rodata:0000000000006360                                         ; DATA XREF: usage+A9↑o
.rodata:0000000000006360                 db '  -Z, --context  print only the security context of the process',0Ah
.rodata:0000000000006360                 db '  -g, --group    print only the effective group ID',0Ah
.rodata:0000000000006360                 db '  -G, --groups   print all group IDs',0Ah
.rodata:0000000000006360                 db '  -n, --name     print a name instead of a number, for -ugG',0Ah
.rodata:0000000000006360                 db '  -r, --real     print the real ID instead of the effective ID, w'
.rodata:0000000000006360                 db 'ith -ugG',0Ah
.rodata:0000000000006360                 db '  -u, --user     print only the effective user ID',0Ah
.rodata:0000000000006360                 db '  -z, --zero     delimit entries with NUL characters, not whitesp'
.rodata:0000000000006360                 db 'ace;',0Ah
.rodata:0000000000006360                 db '                   not permitted in default format',0Ah,0
.rodata:0000000000006569                 align 10h
.rodata:0000000000006570 ; const char aHelpDisplayThi[]
.rodata:0000000000006570 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000006570                                         ; DATA XREF: usage+CE↑o
.rodata:000000000000659D                 align 20h
.rodata:00000000000065A0 ; const char aVersionOutputV[]
.rodata:00000000000065A0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000065A0                                         ; DATA XREF: usage+F3↑o
.rodata:00000000000065D6                 align 8
.rodata:00000000000065D8 ; const char aWithoutAnyOpti[]
.rodata:00000000000065D8 aWithoutAnyOpti db 0Ah                  ; DATA XREF: usage+118↑o
.rodata:00000000000065D8                 db 'Without any OPTION, print some useful set of identified informati'
.rodata:00000000000065D8                 db 'on.',0Ah,0
.rodata:000000000000661F                 align 20h
.rodata:0000000000006620 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000006620                                         ; DATA XREF: usage+20F↑o
.rodata:0000000000006620                                         ; usage+273↑o ...
.rodata:0000000000006648 ; const char aReportAnyTrans[]
.rodata:0000000000006648 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000006648                                         ; DATA XREF: usage+367↑o
.rodata:0000000000006648                 db 'am/>',0Ah,0
.rodata:000000000000668F                 align 10h
.rodata:0000000000006690 ; const char aOrAvailableLoc[]
.rodata:0000000000006690 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000006690                                         ; DATA XREF: usage:loc_288E↑o
.rodata:00000000000066C3                 align 8
.rodata:00000000000066C8 ; const char aContextZWorksO[]
.rodata:00000000000066C8 aContextZWorksO db '--context (-Z) works only on an SELinux-enabled kernel',0
.rodata:00000000000066C8                                         ; DATA XREF: main+48C↑o
.rodata:00000000000066FF                 align 20h
.rodata:0000000000006700 ; const char aCannotPrintOnl[]
.rodata:0000000000006700 aCannotPrintOnl db 'cannot print "only" of more than one choice',0
.rodata:0000000000006700                                         ; DATA XREF: main:loc_1E85↑o
.rodata:000000000000672C                 align 10h
.rodata:0000000000006730 ; const char aCannotPrintOnl_0[]
.rodata:0000000000006730 aCannotPrintOnl_0 db 'cannot print only names or real IDs in default format',0
.rodata:0000000000006730                                         ; DATA XREF: main:loc_1ECD↑o
.rodata:0000000000006766                 align 8
.rodata:0000000000006768 ; const char aOptionZeroNotP[]
.rodata:0000000000006768 aOptionZeroNotP db 'option --zero not permitted in default format',0
.rodata:0000000000006768                                         ; DATA XREF: main:loc_1EA9↑o
.rodata:0000000000006796 aS              db '(%s)',0             ; DATA XREF: print_stuff+21C↑o
.rodata:0000000000006796                                         ; print_stuff+27C↑o ...
.rodata:000000000000679B ; const char aGidS[]
.rodata:000000000000679B aGidS           db ' gid=%s',0          ; DATA XREF: print_stuff+241↑o
.rodata:00000000000067A3 ; const char aE[2]
.rodata:00000000000067A3 aE              db ' e'                 ; DATA XREF: print_stuff+37C↑o
.rodata:00000000000067A5 ; const char aUidS[]
.rodata:00000000000067A5 aUidS           db 'uid=%s',0           ; DATA XREF: print_stuff+1DE↑o
.rodata:00000000000067AC ; const char aEgidS[]
.rodata:00000000000067AC aEgidS          db ' egid=%s',0         ; DATA XREF: print_stuff+314↑o
.rodata:00000000000067B5 ; const char aGroups[]
.rodata:00000000000067B5 aGroups         db ' groups=',0         ; DATA XREF: print_stuff+47F↑o
.rodata:00000000000067BE aId             db 'id',0               ; DATA XREF: main+F1↑o
.rodata:00000000000067BE                                         ; usage+131↑o ...
.rodata:00000000000067C1 asc_67C1        db '[',0                ; DATA XREF: usage+13D↑o
.rodata:00000000000067C3 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+164↑o
.rodata:00000000000067D3 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:00000000000067D3                                         ; DATA XREF: usage+194↑o
.rodata:00000000000067D3                                         ; usage+28C↑o ...
.rodata:00000000000067E9 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1A5↑o
.rodata:00000000000067F3 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B1↑o
.rodata:0000000000006802 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+144↑o
.rodata:000000000000680C aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+170↑o
.rodata:0000000000006816 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+188↑o
.rodata:0000000000006820 ; const char aSOnlineHelpS[]
.rodata:0000000000006820 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:0000000000006820                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000006837 unk_6837        db  47h ; G             ; DATA XREF: main+EA↑o
.rodata:0000000000006837                                         ; usage+216↑o ...
.rodata:0000000000006838                 db  4Eh ; N
.rodata:0000000000006839                 db  55h ; U
.rodata:000000000000683A                 db  20h
.rodata:000000000000683B ; const char domainname[]
.rodata:000000000000683B domainname      db 'coreutils',0        ; DATA XREF: main+34↑o
.rodata:000000000000683B                                         ; main+40↑o ...
.rodata:0000000000006845 ; const char s2[]
.rodata:0000000000006845 s2              db 'en_',0              ; DATA XREF: usage+23D↑o
.rodata:0000000000006845                                         ; usage+2FE↑o
.rodata:0000000000006849 ; const char aFullDocumentat[]
.rodata:0000000000006849 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000006849                                         ; DATA XREF: usage:loc_2849↑o
.rodata:0000000000006849                                         ; usage:loc_2906↑o
.rodata:0000000000006864 ; const char dirname[]
.rodata:0000000000006864 dirname         db '/usr/local/share/locale',0
.rodata:0000000000006864                                         ; DATA XREF: main+2D↑o
.rodata:000000000000687C aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+DC↑o
.rodata:000000000000688C aArnoldRobbins  db 'Arnold Robbins',0   ; DATA XREF: main+E3↑o
.rodata:000000000000689B ; const char shortopts[]
.rodata:000000000000689B shortopts       db 'agnruzGZ',0         ; DATA XREF: main:loc_19F0↑o
.rodata:00000000000068A4 ; const char name[]
.rodata:00000000000068A4 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+371↑o
.rodata:00000000000068B4 ; const char msgid[]
.rodata:00000000000068B4 msgid           db '%s: no such user',0 ; DATA XREF: main+1F1↑o
.rodata:00000000000068C5 ; const char aCannotGetEffec[]
.rodata:00000000000068C5 aCannotGetEffec db 'cannot get effective UID',0
.rodata:00000000000068C5                                         ; DATA XREF: main:loc_1D3D↑o
.rodata:00000000000068DE ; const char aCannotGetRealU[]
.rodata:00000000000068DE aCannotGetRealU db 'cannot get real UID',0
.rodata:00000000000068DE                                         ; DATA XREF: main:loc_1EF1↑o
.rodata:00000000000068F2 ; const char aCannotGetEffec_0[]
.rodata:00000000000068F2 aCannotGetEffec_0 db 'cannot get effective GID',0
.rodata:00000000000068F2                                         ; DATA XREF: main:loc_1F15↑o
.rodata:000000000000690B ; const char aCannotGetRealG[]
.rodata:000000000000690B aCannotGetRealG db 'cannot get real GID',0
.rodata:000000000000690B                                         ; DATA XREF: main+41C↑o
.rodata:000000000000691F aContext        db 'context',0          ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000006927 aGroups_0       db 'groups',0           ; DATA XREF: .data.rel.ro:0000000000208AA0↓o
.rodata:000000000000692E aName           db 'name',0             ; DATA XREF: .data.rel.ro:0000000000208AC0↓o
.rodata:0000000000006933 aReal           db 'real',0             ; DATA XREF: .data.rel.ro:0000000000208AE0↓o
.rodata:0000000000006938 aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:0000000000208B20↓o
.rodata:000000000000693D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000208B40↓o
.rodata:0000000000006942 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000208B60↓o
.rodata:000000000000694A                 align 10h
.rodata:0000000000006950 ; const char aCannotFindName_0[]
.rodata:0000000000006950 aCannotFindName_0 db 'cannot find name for group ID %lu',0
.rodata:0000000000006950                                         ; DATA XREF: print_group:loc_29A8↑o
.rodata:0000000000006972 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000006977 ; const char aWriteError[]
.rodata:0000000000006977 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2C93↑o
.rodata:0000000000006983 ; const char format[]
.rodata:0000000000006983 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000006983                                         ; close_stdout+8F↑o ...
.rodata:000000000000698A                 align 10h
.rodata:0000000000006990 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000006990                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000069C8 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000069D0 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000069D4 unk_69D4        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000069D5                 db  80h
.rodata:00000000000069D6                 db  98h
.rodata:00000000000069D7                 db    0
.rodata:00000000000069D8 unk_69D8        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000069D9                 db  80h
.rodata:00000000000069DA                 db  99h
.rodata:00000000000069DB                 db    0
.rodata:00000000000069DC unk_69DC        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000069DD                 db    7
.rodata:00000000000069DE                 db  65h ; e
.rodata:00000000000069DF                 db    0
.rodata:00000000000069E0 unk_69E0        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000069E1                 db 0AFh
.rodata:00000000000069E2                 db    0
.rodata:00000000000069E3 unk_69E3        db  22h ; "             ; DATA XREF: gettext_quote:loc_2E10↑o
.rodata:00000000000069E3                                         ; quotearg_buffer_restyled:loc_3BCB↑o ...
.rodata:00000000000069E4                 db    0
.rodata:00000000000069E5 ; const char asc_69E5[2]
.rodata:00000000000069E5 asc_69E5        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000069E5                                         ; quotearg_buffer_restyled:loc_2F93↑o ...
.rodata:00000000000069E7 ; const char asc_69E7[2]
.rodata:00000000000069E7 asc_69E7        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000069E7                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000069E9 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000069F1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000208BA8↓o
.rodata:00000000000069F7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000208BB0↓o
.rodata:0000000000006A04 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000208BB8↓o
.rodata:0000000000006A04                                         ; .data.rel.ro:0000000000208BD8↓o
.rodata:0000000000006A11 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000006A11                                         ; DATA XREF: .data.rel.ro:0000000000208BC0↓o
.rodata:0000000000006A25 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000208BD0↓o
.rodata:0000000000006A2D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000208BE8↓o
.rodata:0000000000006A35                 align 20h
.rodata:0000000000006A40 jpt_2F71        dd offset loc_3D1A - 6A40h
.rodata:0000000000006A40                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000006A40                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000006A40                 dd offset loc_2F73 - 6A40h ; jump table for switch statement
.rodata:0000000000006A40                 dd offset loc_3F48 - 6A40h
.rodata:0000000000006A40                 dd offset loc_3D54 - 6A40h
.rodata:0000000000006A40                 dd offset loc_3B44 - 6A40h
.rodata:0000000000006A40                 dd offset loc_3BA0 - 6A40h
.rodata:0000000000006A40                 dd offset loc_3BF5 - 6A40h
.rodata:0000000000006A40                 dd offset loc_3C3A - 6A40h
.rodata:0000000000006A40                 dd offset loc_3C74 - 6A40h
.rodata:0000000000006A40                 dd offset loc_3C74 - 6A40h
.rodata:0000000000006A40                 dd offset loc_3C74 - 6A40h
.rodata:0000000000006A6C jpt_30CE        dd offset loc_32F0 - 6A6Ch, offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch
.rodata:0000000000006A6C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000006A6C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch ; jump table for switch statement
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset loc_3330 - 6A6Ch, offset loc_3238 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_31F8 - 6A6Ch, offset loc_33C0 - 6A6Ch, offset loc_33B0 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_33A0 - 6A6Ch, offset loc_3390 - 6A6Ch, offset def_30CE - 6A6Ch
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch
.rodata:0000000000006A6C                 dd offset def_30CE - 6A6Ch, offset def_30CE - 6A6Ch, offset loc_3380 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3370 - 6A6Ch, offset loc_3370 - 6A6Ch, offset loc_3340 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3370 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3370 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_31D3 - 6A6Ch, offset loc_3370 - 6A6Ch, offset loc_3370 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3370 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3370 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3370 - 6A6Ch, offset loc_3370 - 6A6Ch, offset loc_3370 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_31A3 - 6A6Ch, offset def_30CE - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3370 - 6A6Ch, offset loc_3248 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3370 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3370 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch, offset loc_3318 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_30D3 - 6A6Ch, offset loc_3370 - 6A6Ch, offset loc_30D3 - 6A6Ch
.rodata:0000000000006A6C                 dd offset loc_3340 - 6A6Ch
.rodata:0000000000006C68 jpt_345A        dd offset loc_34C0 - 6C68h, offset def_345A - 6C68h, offset def_345A - 6C68h
.rodata:0000000000006C68                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000006C68                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset def_345A - 6C68h, offset def_345A - 6C68h ; jump table for switch statement
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset loc_34B0 - 6C68h, offset loc_3600 - 6C68h
.rodata:0000000000006C68                 dd offset loc_35E8 - 6C68h, offset loc_3498 - 6C68h, offset loc_35D8 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3480 - 6C68h, offset loc_35C0 - 6C68h, offset def_345A - 6C68h
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset def_345A - 6C68h, offset def_345A - 6C68h
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset def_345A - 6C68h, offset def_345A - 6C68h
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset def_345A - 6C68h, offset def_345A - 6C68h
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset def_345A - 6C68h, offset def_345A - 6C68h
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset def_345A - 6C68h, offset def_345A - 6C68h
.rodata:0000000000006C68                 dd offset def_345A - 6C68h, offset def_345A - 6C68h, offset loc_35A8 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3590 - 6C68h, offset loc_3590 - 6C68h, offset loc_3578 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3590 - 6C68h, offset loc_3560 - 6C68h, offset loc_3590 - 6C68h
.rodata:0000000000006C68                 dd offset loc_31D0 - 6C68h, offset loc_3590 - 6C68h, offset loc_3590 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3590 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3590 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3590 - 6C68h, offset loc_3590 - 6C68h, offset loc_3590 - 6C68h
.rodata:0000000000006C68                 dd offset loc_31A0 - 6C68h, offset def_345A - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3590 - 6C68h, offset loc_3460 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3590 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3590 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3560 - 6C68h, offset loc_3560 - 6C68h, offset loc_3560 - 6C68h
.rodata:0000000000006C68                 dd offset loc_30D0 - 6C68h, offset loc_3590 - 6C68h, offset loc_30D0 - 6C68h
.rodata:0000000000006C68                 dd offset loc_3578 - 6C68h
.rodata:0000000000006E64                 align 20h
.rodata:0000000000006E80                 public quoting_style_vals
.rodata:0000000000006E80 quoting_style_vals db    0
.rodata:0000000000006E81                 db    0
.rodata:0000000000006E82                 db    0
.rodata:0000000000006E83                 db    0
.rodata:0000000000006E84                 db    1
.rodata:0000000000006E85                 db    0
.rodata:0000000000006E86                 db    0
.rodata:0000000000006E87                 db    0
.rodata:0000000000006E88                 db    2
.rodata:0000000000006E89                 db    0
.rodata:0000000000006E8A                 db    0
.rodata:0000000000006E8B                 db    0
.rodata:0000000000006E8C                 db    3
.rodata:0000000000006E8D                 db    0
.rodata:0000000000006E8E                 db    0
.rodata:0000000000006E8F                 db    0
.rodata:0000000000006E90                 db    4
.rodata:0000000000006E91                 db    0
.rodata:0000000000006E92                 db    0
.rodata:0000000000006E93                 db    0
.rodata:0000000000006E94                 db    5
.rodata:0000000000006E95                 db    0
.rodata:0000000000006E96                 db    0
.rodata:0000000000006E97                 db    0
.rodata:0000000000006E98                 db    6
.rodata:0000000000006E99                 db    0
.rodata:0000000000006E9A                 db    0
.rodata:0000000000006E9B                 db    0
.rodata:0000000000006E9C                 db    7
.rodata:0000000000006E9D                 db    0
.rodata:0000000000006E9E                 db    0
.rodata:0000000000006E9F                 db    0
.rodata:0000000000006EA0                 db    8
.rodata:0000000000006EA1                 db    0
.rodata:0000000000006EA2                 db    0
.rodata:0000000000006EA3                 db    0
.rodata:0000000000006EA4                 db    9
.rodata:0000000000006EA5                 db    0
.rodata:0000000000006EA6                 db    0
.rodata:0000000000006EA7                 db    0
.rodata:0000000000006EA8 aInvalidUser    db 'invalid user',0     ; DATA XREF: parse_with_separator+330↑o
.rodata:0000000000006EA8                                         ; .data.rel.ro:0000000000208B00↓o
.rodata:0000000000006EB5 aInvalidSpec    db 'invalid spec',0     ; DATA XREF: parse_with_separator+1D9↑o
.rodata:0000000000006EB5                                         ; .data.rel.ro:0000000000208BC8↓o
.rodata:0000000000006EC2 aInvalidGroup   db 'invalid group',0    ; DATA XREF: parse_with_separator+253↑o
.rodata:0000000000006EC2                                         ; .data.rel.ro:0000000000208A80↓o
.rodata:0000000000006ED0 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000006EDC aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000006EE3 ; const char aC_0[]
.rodata:0000000000006EE3 aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_4F5C↑o
.rodata:0000000000006EE7 ; const char aWrittenByS[]
.rodata:0000000000006EE7 aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000006EE7                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000006EF7 ; const char aWrittenBySAndS[]
.rodata:0000000000006EF7 aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000006EF7                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000006F0E ; const char aWrittenBySSAnd[]
.rodata:0000000000006F0E aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000006F0E                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000006F2A ; const char aReportBugsToS[]
.rodata:0000000000006F2A aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000006F2A                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000006F3F aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000006F3F                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000006F55 ; const char aSHomePageS[]
.rodata:0000000000006F55 aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000006F55                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000006F69                 align 10h
.rodata:0000000000006F70 ; const char aLicenseGplv3Gn[]
.rodata:0000000000006F70 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000006F70                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000006F70                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000006F70                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000006F70                 db '.',0Ah
.rodata:0000000000006F70                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000006F70                 db 0Ah,0
.rodata:000000000000703C                 align 20h
.rodata:0000000000007040 ; const char aWrittenBySSSAn[]
.rodata:0000000000007040 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007040                                         ; DATA XREF: version_etc_arn:loc_51B0↑o
.rodata:0000000000007040                 db 'and %s.',0Ah,0
.rodata:0000000000007060 ; const char aWrittenBySSSSA[]
.rodata:0000000000007060 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007060                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000007060                 db '%s, and %s.',0Ah,0
.rodata:0000000000007084                 align 8
.rodata:0000000000007088 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007088 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007088                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007088                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000070B0 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000070B0 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000070B0                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000070B0                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:00000000000070DC                 align 20h
.rodata:00000000000070E0 ; const char aWrittenBySSSSS[]
.rodata:00000000000070E0 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000070E0                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:00000000000070E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000070E0                 db 'and %s.',0Ah,0
.rodata:0000000000007110 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000007110 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007110                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000007110                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007110                 db '%s, and %s.',0Ah,0
.rodata:0000000000007144                 align 8
.rodata:0000000000007148 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007148                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000007148                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007148                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000007184                 align 8
.rodata:0000000000007188 ; const char aGeneralHelpUsi[]
.rodata:0000000000007188 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000007188                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000007188                 db 0
.rodata:00000000000071C9                 align 4
.rodata:00000000000071CC jpt_4FC4        dd offset loc_5046 - 71CCh
.rodata:00000000000071CC                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000071CC                                         ; version_etc_arn+9D↑r
.rodata:00000000000071CC                 dd offset loc_50D8 - 71CCh ; jump table for switch statement
.rodata:00000000000071CC                 dd offset loc_5118 - 71CCh
.rodata:00000000000071CC                 dd offset loc_5160 - 71CCh
.rodata:00000000000071CC                 dd offset loc_51B0 - 71CCh
.rodata:00000000000071CC                 dd offset loc_5208 - 71CCh
.rodata:00000000000071CC                 dd offset loc_5238 - 71CCh
.rodata:00000000000071CC                 dd offset loc_52A0 - 71CCh
.rodata:00000000000071CC                 dd offset loc_4FD0 - 71CCh
.rodata:00000000000071CC                 dd offset loc_5080 - 71CCh
.rodata:00000000000071F4                 align 20h
.rodata:0000000000007200                 public version_etc_copyright
.rodata:0000000000007200 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000007200                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000722F ; const char aMemoryExhauste[]
.rodata:000000000000722F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000007240 ; const char file[]
.rodata:0000000000007240 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000007240                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:0000000000007260 ; const char assertion[]
.rodata:0000000000007260 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000007260                                         ; DATA XREF: xstrtoul+393↑o
.rodata:0000000000007286                 align 8
.rodata:0000000000007288 jpt_59D6        dd offset loc_5B26 - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:0000000000007288                                         ; xstrtoul+1CF↑r
.rodata:0000000000007288                 dd offset loc_5B03 - 7288h, offset def_59D6 - 7288h, offset loc_5B3C - 7288h ; jump table for switch statement
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset loc_5ABF - 7288h, offset def_59D6 - 7288h, offset loc_59D8 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset loc_5AE0 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset loc_5A9F - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset loc_5A7A - 7288h
.rodata:0000000000007288                 dd offset loc_5A54 - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset loc_5A3D - 7288h
.rodata:0000000000007288                 dd offset loc_5A00 - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset loc_5B3C - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset loc_5ABF - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset loc_59D8 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset def_59D6 - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset loc_5A9F - 7288h
.rodata:0000000000007288                 dd offset def_59D6 - 7288h, offset def_59D6 - 7288h, offset loc_5A27 - 7288h
.rodata:0000000000007360 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000007360 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:0000000000007360                                         ; DATA XREF: xstrtoul:loc_5B85↑o
.rodata:0000000000007369 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000736B aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_5D70↑o
.rodata:0000000000007371 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000007371                                         ; locale_charset:loc_5DC0↑o
.rodata:0000000000007371 _rodata         ends
.rodata:0000000000007371
LOAD:0000000000007377 ; ===========================================================================
LOAD:0000000000007377
LOAD:0000000000007377 ; Segment type: Pure code
LOAD:0000000000007377 ; Segment permissions: Read/Execute
LOAD:0000000000007377 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007377                 assume cs:LOAD
LOAD:0000000000007377                 ;org 7377h
LOAD:0000000000007377                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007377                 align 8
LOAD:0000000000007377 LOAD            ends
LOAD:0000000000007377
.eh_frame_hdr:0000000000007378 ; ===========================================================================
.eh_frame_hdr:0000000000007378
.eh_frame_hdr:0000000000007378 ; Segment type: Pure data
.eh_frame_hdr:0000000000007378 ; Segment permissions: Read
.eh_frame_hdr:0000000000007378 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000007378                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000007378                 ;org 7378h
.eh_frame_hdr:0000000000007378 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000007379                 db  1Bh
.eh_frame_hdr:000000000000737A                 db    3
.eh_frame_hdr:000000000000737B                 db  3Bh ; ;
.eh_frame_hdr:000000000000737C                 db  8Ch
.eh_frame_hdr:000000000000737D                 db    2
.eh_frame_hdr:000000000000737E                 db    0
.eh_frame_hdr:000000000000737F                 db    0
.eh_frame_hdr:0000000000007380                 db  50h ; P
.eh_frame_hdr:0000000000007381                 db    0
.eh_frame_hdr:0000000000007382                 db    0
.eh_frame_hdr:0000000000007383                 db    0
.eh_frame_hdr:0000000000007384                 db  78h ; x
.eh_frame_hdr:0000000000007385                 db 0A2h
.eh_frame_hdr:0000000000007386                 db 0FFh
.eh_frame_hdr:0000000000007387                 db 0FFh
.eh_frame_hdr:0000000000007388                 db 0D8h
.eh_frame_hdr:0000000000007389                 db    2
.eh_frame_hdr:000000000000738A                 db    0
.eh_frame_hdr:000000000000738B                 db    0
.eh_frame_hdr:000000000000738C                 db    8
.eh_frame_hdr:000000000000738D                 db 0A6h
.eh_frame_hdr:000000000000738E                 db 0FFh
.eh_frame_hdr:000000000000738F                 db 0FFh
.eh_frame_hdr:0000000000007390                 db    0
.eh_frame_hdr:0000000000007391                 db    3
.eh_frame_hdr:0000000000007392                 db    0
.eh_frame_hdr:0000000000007393                 db    0
.eh_frame_hdr:0000000000007394                 db  18h
.eh_frame_hdr:0000000000007395                 db 0A6h
.eh_frame_hdr:0000000000007396                 db 0FFh
.eh_frame_hdr:0000000000007397                 db 0FFh
.eh_frame_hdr:0000000000007398                 db  88h
.eh_frame_hdr:0000000000007399                 db    3
.eh_frame_hdr:000000000000739A                 db    0
.eh_frame_hdr:000000000000739B                 db    0
.eh_frame_hdr:000000000000739C                 db 0C8h
.eh_frame_hdr:000000000000739D                 db 0ABh
.eh_frame_hdr:000000000000739E                 db 0FFh
.eh_frame_hdr:000000000000739F                 db 0FFh
.eh_frame_hdr:00000000000073A0                 db 0A8h
.eh_frame_hdr:00000000000073A1                 db    2
.eh_frame_hdr:00000000000073A2                 db    0
.eh_frame_hdr:00000000000073A3                 db    0
.eh_frame_hdr:00000000000073A4                 db 0D8h
.eh_frame_hdr:00000000000073A5                 db 0ACh
.eh_frame_hdr:00000000000073A6                 db 0FFh
.eh_frame_hdr:00000000000073A7                 db 0FFh
.eh_frame_hdr:00000000000073A8                 db  18h
.eh_frame_hdr:00000000000073A9                 db    3
.eh_frame_hdr:00000000000073AA                 db    0
.eh_frame_hdr:00000000000073AB                 db    0
.eh_frame_hdr:00000000000073AC                 db  78h ; x
.eh_frame_hdr:00000000000073AD                 db 0B2h
.eh_frame_hdr:00000000000073AE                 db 0FFh
.eh_frame_hdr:00000000000073AF                 db 0FFh
.eh_frame_hdr:00000000000073B0                 db  5Ch ; \
.eh_frame_hdr:00000000000073B1                 db    3
.eh_frame_hdr:00000000000073B2                 db    0
.eh_frame_hdr:00000000000073B3                 db    0
.eh_frame_hdr:00000000000073B4                 db    8
.eh_frame_hdr:00000000000073B5                 db 0B6h
.eh_frame_hdr:00000000000073B6                 db 0FFh
.eh_frame_hdr:00000000000073B7                 db 0FFh
.eh_frame_hdr:00000000000073B8                 db 0D0h
.eh_frame_hdr:00000000000073B9                 db    3
.eh_frame_hdr:00000000000073BA                 db    0
.eh_frame_hdr:00000000000073BB                 db    0
.eh_frame_hdr:00000000000073BC                 db  88h
.eh_frame_hdr:00000000000073BD                 db 0B6h
.eh_frame_hdr:00000000000073BE                 db 0FFh
.eh_frame_hdr:00000000000073BF                 db 0FFh
.eh_frame_hdr:00000000000073C0                 db 0F8h
.eh_frame_hdr:00000000000073C1                 db    3
.eh_frame_hdr:00000000000073C2                 db    0
.eh_frame_hdr:00000000000073C3                 db    0
.eh_frame_hdr:00000000000073C4                 db 0B8h
.eh_frame_hdr:00000000000073C5                 db 0B8h
.eh_frame_hdr:00000000000073C6                 db 0FFh
.eh_frame_hdr:00000000000073C7                 db 0FFh
.eh_frame_hdr:00000000000073C8                 db  48h ; H
.eh_frame_hdr:00000000000073C9                 db    4
.eh_frame_hdr:00000000000073CA                 db    0
.eh_frame_hdr:00000000000073CB                 db    0
.eh_frame_hdr:00000000000073CC                 db 0C8h
.eh_frame_hdr:00000000000073CD                 db 0B8h
.eh_frame_hdr:00000000000073CE                 db 0FFh
.eh_frame_hdr:00000000000073CF                 db 0FFh
.eh_frame_hdr:00000000000073D0                 db  5Ch ; \
.eh_frame_hdr:00000000000073D1                 db    4
.eh_frame_hdr:00000000000073D2                 db    0
.eh_frame_hdr:00000000000073D3                 db    0
.eh_frame_hdr:00000000000073D4                 db 0D8h
.eh_frame_hdr:00000000000073D5                 db 0B8h
.eh_frame_hdr:00000000000073D6                 db 0FFh
.eh_frame_hdr:00000000000073D7                 db 0FFh
.eh_frame_hdr:00000000000073D8                 db  70h ; p
.eh_frame_hdr:00000000000073D9                 db    4
.eh_frame_hdr:00000000000073DA                 db    0
.eh_frame_hdr:00000000000073DB                 db    0
.eh_frame_hdr:00000000000073DC                 db  88h
.eh_frame_hdr:00000000000073DD                 db 0B9h
.eh_frame_hdr:00000000000073DE                 db 0FFh
.eh_frame_hdr:00000000000073DF                 db 0FFh
.eh_frame_hdr:00000000000073E0                 db 0A0h
.eh_frame_hdr:00000000000073E1                 db    4
.eh_frame_hdr:00000000000073E2                 db    0
.eh_frame_hdr:00000000000073E3                 db    0
.eh_frame_hdr:00000000000073E4                 db 0D8h
.eh_frame_hdr:00000000000073E5                 db 0B9h
.eh_frame_hdr:00000000000073E6                 db 0FFh
.eh_frame_hdr:00000000000073E7                 db 0FFh
.eh_frame_hdr:00000000000073E8                 db 0B8h
.eh_frame_hdr:00000000000073E9                 db    4
.eh_frame_hdr:00000000000073EA                 db    0
.eh_frame_hdr:00000000000073EB                 db    0
.eh_frame_hdr:00000000000073EC                 db  78h ; x
.eh_frame_hdr:00000000000073ED                 db 0BAh
.eh_frame_hdr:00000000000073EE                 db 0FFh
.eh_frame_hdr:00000000000073EF                 db 0FFh
.eh_frame_hdr:00000000000073F0                 db 0D8h
.eh_frame_hdr:00000000000073F1                 db    4
.eh_frame_hdr:00000000000073F2                 db    0
.eh_frame_hdr:00000000000073F3                 db    0
.eh_frame_hdr:00000000000073F4                 db  68h ; h
.eh_frame_hdr:00000000000073F5                 db 0BBh
.eh_frame_hdr:00000000000073F6                 db 0FFh
.eh_frame_hdr:00000000000073F7                 db 0FFh
.eh_frame_hdr:00000000000073F8                 db  1Ch
.eh_frame_hdr:00000000000073F9                 db    5
.eh_frame_hdr:00000000000073FA                 db    0
.eh_frame_hdr:00000000000073FB                 db    0
.eh_frame_hdr:00000000000073FC                 db 0A8h
.eh_frame_hdr:00000000000073FD                 db 0CDh
.eh_frame_hdr:00000000000073FE                 db 0FFh
.eh_frame_hdr:00000000000073FF                 db 0FFh
.eh_frame_hdr:0000000000007400                 db  94h
.eh_frame_hdr:0000000000007401                 db    5
.eh_frame_hdr:0000000000007402                 db    0
.eh_frame_hdr:0000000000007403                 db    0
.eh_frame_hdr:0000000000007404                 db  58h ; X
.eh_frame_hdr:0000000000007405                 db 0CFh
.eh_frame_hdr:0000000000007406                 db 0FFh
.eh_frame_hdr:0000000000007407                 db 0FFh
.eh_frame_hdr:0000000000007408                 db    0
.eh_frame_hdr:0000000000007409                 db    6
.eh_frame_hdr:000000000000740A                 db    0
.eh_frame_hdr:000000000000740B                 db    0
.eh_frame_hdr:000000000000740C                 db  98h
.eh_frame_hdr:000000000000740D                 db 0CFh
.eh_frame_hdr:000000000000740E                 db 0FFh
.eh_frame_hdr:000000000000740F                 db 0FFh
.eh_frame_hdr:0000000000007410                 db  2Ch ; ,
.eh_frame_hdr:0000000000007411                 db    6
.eh_frame_hdr:0000000000007412                 db    0
.eh_frame_hdr:0000000000007413                 db    0
.eh_frame_hdr:0000000000007414                 db 0B8h
.eh_frame_hdr:0000000000007415                 db 0CFh
.eh_frame_hdr:0000000000007416                 db 0FFh
.eh_frame_hdr:0000000000007417                 db 0FFh
.eh_frame_hdr:0000000000007418                 db  40h ; @
.eh_frame_hdr:0000000000007419                 db    6
.eh_frame_hdr:000000000000741A                 db    0
.eh_frame_hdr:000000000000741B                 db    0
.eh_frame_hdr:000000000000741C                 db 0D8h
.eh_frame_hdr:000000000000741D                 db 0CFh
.eh_frame_hdr:000000000000741E                 db 0FFh
.eh_frame_hdr:000000000000741F                 db 0FFh
.eh_frame_hdr:0000000000007420                 db  54h ; T
.eh_frame_hdr:0000000000007421                 db    6
.eh_frame_hdr:0000000000007422                 db    0
.eh_frame_hdr:0000000000007423                 db    0
.eh_frame_hdr:0000000000007424                 db  18h
.eh_frame_hdr:0000000000007425                 db 0D0h
.eh_frame_hdr:0000000000007426                 db 0FFh
.eh_frame_hdr:0000000000007427                 db 0FFh
.eh_frame_hdr:0000000000007428                 db  68h ; h
.eh_frame_hdr:0000000000007429                 db    6
.eh_frame_hdr:000000000000742A                 db    0
.eh_frame_hdr:000000000000742B                 db    0
.eh_frame_hdr:000000000000742C                 db  38h ; 8
.eh_frame_hdr:000000000000742D                 db 0D0h
.eh_frame_hdr:000000000000742E                 db 0FFh
.eh_frame_hdr:000000000000742F                 db 0FFh
.eh_frame_hdr:0000000000007430                 db  7Ch ; |
.eh_frame_hdr:0000000000007431                 db    6
.eh_frame_hdr:0000000000007432                 db    0
.eh_frame_hdr:0000000000007433                 db    0
.eh_frame_hdr:0000000000007434                 db  68h ; h
.eh_frame_hdr:0000000000007435                 db 0D0h
.eh_frame_hdr:0000000000007436                 db 0FFh
.eh_frame_hdr:0000000000007437                 db 0FFh
.eh_frame_hdr:0000000000007438                 db  90h
.eh_frame_hdr:0000000000007439                 db    6
.eh_frame_hdr:000000000000743A                 db    0
.eh_frame_hdr:000000000000743B                 db    0
.eh_frame_hdr:000000000000743C                 db 0E8h
.eh_frame_hdr:000000000000743D                 db 0D0h
.eh_frame_hdr:000000000000743E                 db 0FFh
.eh_frame_hdr:000000000000743F                 db 0FFh
.eh_frame_hdr:0000000000007440                 db 0E4h
.eh_frame_hdr:0000000000007441                 db    6
.eh_frame_hdr:0000000000007442                 db    0
.eh_frame_hdr:0000000000007443                 db    0
.eh_frame_hdr:0000000000007444                 db 0D8h
.eh_frame_hdr:0000000000007445                 db 0D1h
.eh_frame_hdr:0000000000007446                 db 0FFh
.eh_frame_hdr:0000000000007447                 db 0FFh
.eh_frame_hdr:0000000000007448                 db  50h ; P
.eh_frame_hdr:0000000000007449                 db    7
.eh_frame_hdr:000000000000744A                 db    0
.eh_frame_hdr:000000000000744B                 db    0
.eh_frame_hdr:000000000000744C                 db 0E8h
.eh_frame_hdr:000000000000744D                 db 0D1h
.eh_frame_hdr:000000000000744E                 db 0FFh
.eh_frame_hdr:000000000000744F                 db 0FFh
.eh_frame_hdr:0000000000007450                 db  64h ; d
.eh_frame_hdr:0000000000007451                 db    7
.eh_frame_hdr:0000000000007452                 db    0
.eh_frame_hdr:0000000000007453                 db    0
.eh_frame_hdr:0000000000007454                 db  88h
.eh_frame_hdr:0000000000007455                 db 0D2h
.eh_frame_hdr:0000000000007456                 db 0FFh
.eh_frame_hdr:0000000000007457                 db 0FFh
.eh_frame_hdr:0000000000007458                 db  90h
.eh_frame_hdr:0000000000007459                 db    7
.eh_frame_hdr:000000000000745A                 db    0
.eh_frame_hdr:000000000000745B                 db    0
.eh_frame_hdr:000000000000745C                 db 0A8h
.eh_frame_hdr:000000000000745D                 db 0D2h
.eh_frame_hdr:000000000000745E                 db 0FFh
.eh_frame_hdr:000000000000745F                 db 0FFh
.eh_frame_hdr:0000000000007460                 db 0A4h
.eh_frame_hdr:0000000000007461                 db    7
.eh_frame_hdr:0000000000007462                 db    0
.eh_frame_hdr:0000000000007463                 db    0
.eh_frame_hdr:0000000000007464                 db 0B8h
.eh_frame_hdr:0000000000007465                 db 0D2h
.eh_frame_hdr:0000000000007466                 db 0FFh
.eh_frame_hdr:0000000000007467                 db 0FFh
.eh_frame_hdr:0000000000007468                 db 0B8h
.eh_frame_hdr:0000000000007469                 db    7
.eh_frame_hdr:000000000000746A                 db    0
.eh_frame_hdr:000000000000746B                 db    0
.eh_frame_hdr:000000000000746C                 db 0D8h
.eh_frame_hdr:000000000000746D                 db 0D2h
.eh_frame_hdr:000000000000746E                 db 0FFh
.eh_frame_hdr:000000000000746F                 db 0FFh
.eh_frame_hdr:0000000000007470                 db 0CCh
.eh_frame_hdr:0000000000007471                 db    7
.eh_frame_hdr:0000000000007472                 db    0
.eh_frame_hdr:0000000000007473                 db    0
.eh_frame_hdr:0000000000007474                 db 0F8h
.eh_frame_hdr:0000000000007475                 db 0D2h
.eh_frame_hdr:0000000000007476                 db 0FFh
.eh_frame_hdr:0000000000007477                 db 0FFh
.eh_frame_hdr:0000000000007478                 db 0E0h
.eh_frame_hdr:0000000000007479                 db    7
.eh_frame_hdr:000000000000747A                 db    0
.eh_frame_hdr:000000000000747B                 db    0
.eh_frame_hdr:000000000000747C                 db  88h
.eh_frame_hdr:000000000000747D                 db 0D3h
.eh_frame_hdr:000000000000747E                 db 0FFh
.eh_frame_hdr:000000000000747F                 db 0FFh
.eh_frame_hdr:0000000000007480                 db 0FCh
.eh_frame_hdr:0000000000007481                 db    7
.eh_frame_hdr:0000000000007482                 db    0
.eh_frame_hdr:0000000000007483                 db    0
.eh_frame_hdr:0000000000007484                 db  18h
.eh_frame_hdr:0000000000007485                 db 0D4h
.eh_frame_hdr:0000000000007486                 db 0FFh
.eh_frame_hdr:0000000000007487                 db 0FFh
.eh_frame_hdr:0000000000007488                 db  18h
.eh_frame_hdr:0000000000007489                 db    8
.eh_frame_hdr:000000000000748A                 db    0
.eh_frame_hdr:000000000000748B                 db    0
.eh_frame_hdr:000000000000748C                 db  28h ; (
.eh_frame_hdr:000000000000748D                 db 0D4h
.eh_frame_hdr:000000000000748E                 db 0FFh
.eh_frame_hdr:000000000000748F                 db 0FFh
.eh_frame_hdr:0000000000007490                 db  2Ch ; ,
.eh_frame_hdr:0000000000007491                 db    8
.eh_frame_hdr:0000000000007492                 db    0
.eh_frame_hdr:0000000000007493                 db    0
.eh_frame_hdr:0000000000007494                 db  38h ; 8
.eh_frame_hdr:0000000000007495                 db 0D4h
.eh_frame_hdr:0000000000007496                 db 0FFh
.eh_frame_hdr:0000000000007497                 db 0FFh
.eh_frame_hdr:0000000000007498                 db  40h ; @
.eh_frame_hdr:0000000000007499                 db    8
.eh_frame_hdr:000000000000749A                 db    0
.eh_frame_hdr:000000000000749B                 db    0
.eh_frame_hdr:000000000000749C                 db 0D8h
.eh_frame_hdr:000000000000749D                 db 0D4h
.eh_frame_hdr:000000000000749E                 db 0FFh
.eh_frame_hdr:000000000000749F                 db 0FFh
.eh_frame_hdr:00000000000074A0                 db  5Ch ; \
.eh_frame_hdr:00000000000074A1                 db    8
.eh_frame_hdr:00000000000074A2                 db    0
.eh_frame_hdr:00000000000074A3                 db    0
.eh_frame_hdr:00000000000074A4                 db 0E8h
.eh_frame_hdr:00000000000074A5                 db 0D4h
.eh_frame_hdr:00000000000074A6                 db 0FFh
.eh_frame_hdr:00000000000074A7                 db 0FFh
.eh_frame_hdr:00000000000074A8                 db  70h ; p
.eh_frame_hdr:00000000000074A9                 db    8
.eh_frame_hdr:00000000000074AA                 db    0
.eh_frame_hdr:00000000000074AB                 db    0
.eh_frame_hdr:00000000000074AC                 db    8
.eh_frame_hdr:00000000000074AD                 db 0D5h
.eh_frame_hdr:00000000000074AE                 db 0FFh
.eh_frame_hdr:00000000000074AF                 db 0FFh
.eh_frame_hdr:00000000000074B0                 db  84h
.eh_frame_hdr:00000000000074B1                 db    8
.eh_frame_hdr:00000000000074B2                 db    0
.eh_frame_hdr:00000000000074B3                 db    0
.eh_frame_hdr:00000000000074B4                 db  18h
.eh_frame_hdr:00000000000074B5                 db 0D5h
.eh_frame_hdr:00000000000074B6                 db 0FFh
.eh_frame_hdr:00000000000074B7                 db 0FFh
.eh_frame_hdr:00000000000074B8                 db  98h
.eh_frame_hdr:00000000000074B9                 db    8
.eh_frame_hdr:00000000000074BA                 db    0
.eh_frame_hdr:00000000000074BB                 db    0
.eh_frame_hdr:00000000000074BC                 db 0A8h
.eh_frame_hdr:00000000000074BD                 db 0D5h
.eh_frame_hdr:00000000000074BE                 db 0FFh
.eh_frame_hdr:00000000000074BF                 db 0FFh
.eh_frame_hdr:00000000000074C0                 db 0B4h
.eh_frame_hdr:00000000000074C1                 db    8
.eh_frame_hdr:00000000000074C2                 db    0
.eh_frame_hdr:00000000000074C3                 db    0
.eh_frame_hdr:00000000000074C4                 db  48h ; H
.eh_frame_hdr:00000000000074C5                 db 0D6h
.eh_frame_hdr:00000000000074C6                 db 0FFh
.eh_frame_hdr:00000000000074C7                 db 0FFh
.eh_frame_hdr:00000000000074C8                 db 0D0h
.eh_frame_hdr:00000000000074C9                 db    8
.eh_frame_hdr:00000000000074CA                 db    0
.eh_frame_hdr:00000000000074CB                 db    0
.eh_frame_hdr:00000000000074CC                 db  58h ; X
.eh_frame_hdr:00000000000074CD                 db 0D6h
.eh_frame_hdr:00000000000074CE                 db 0FFh
.eh_frame_hdr:00000000000074CF                 db 0FFh
.eh_frame_hdr:00000000000074D0                 db 0E4h
.eh_frame_hdr:00000000000074D1                 db    8
.eh_frame_hdr:00000000000074D2                 db    0
.eh_frame_hdr:00000000000074D3                 db    0
.eh_frame_hdr:00000000000074D4                 db  78h ; x
.eh_frame_hdr:00000000000074D5                 db 0D6h
.eh_frame_hdr:00000000000074D6                 db 0FFh
.eh_frame_hdr:00000000000074D7                 db 0FFh
.eh_frame_hdr:00000000000074D8                 db 0F8h
.eh_frame_hdr:00000000000074D9                 db    8
.eh_frame_hdr:00000000000074DA                 db    0
.eh_frame_hdr:00000000000074DB                 db    0
.eh_frame_hdr:00000000000074DC                 db  98h
.eh_frame_hdr:00000000000074DD                 db 0D6h
.eh_frame_hdr:00000000000074DE                 db 0FFh
.eh_frame_hdr:00000000000074DF                 db 0FFh
.eh_frame_hdr:00000000000074E0                 db  0Ch
.eh_frame_hdr:00000000000074E1                 db    9
.eh_frame_hdr:00000000000074E2                 db    0
.eh_frame_hdr:00000000000074E3                 db    0
.eh_frame_hdr:00000000000074E4                 db 0A8h
.eh_frame_hdr:00000000000074E5                 db 0D6h
.eh_frame_hdr:00000000000074E6                 db 0FFh
.eh_frame_hdr:00000000000074E7                 db 0FFh
.eh_frame_hdr:00000000000074E8                 db  20h
.eh_frame_hdr:00000000000074E9                 db    9
.eh_frame_hdr:00000000000074EA                 db    0
.eh_frame_hdr:00000000000074EB                 db    0
.eh_frame_hdr:00000000000074EC                 db 0C8h
.eh_frame_hdr:00000000000074ED                 db 0D6h
.eh_frame_hdr:00000000000074EE                 db 0FFh
.eh_frame_hdr:00000000000074EF                 db 0FFh
.eh_frame_hdr:00000000000074F0                 db  34h ; 4
.eh_frame_hdr:00000000000074F1                 db    9
.eh_frame_hdr:00000000000074F2                 db    0
.eh_frame_hdr:00000000000074F3                 db    0
.eh_frame_hdr:00000000000074F4                 db 0E8h
.eh_frame_hdr:00000000000074F5                 db 0D6h
.eh_frame_hdr:00000000000074F6                 db 0FFh
.eh_frame_hdr:00000000000074F7                 db 0FFh
.eh_frame_hdr:00000000000074F8                 db  48h ; H
.eh_frame_hdr:00000000000074F9                 db    9
.eh_frame_hdr:00000000000074FA                 db    0
.eh_frame_hdr:00000000000074FB                 db    0
.eh_frame_hdr:00000000000074FC                 db    8
.eh_frame_hdr:00000000000074FD                 db 0D7h
.eh_frame_hdr:00000000000074FE                 db 0FFh
.eh_frame_hdr:00000000000074FF                 db 0FFh
.eh_frame_hdr:0000000000007500                 db  60h ; `
.eh_frame_hdr:0000000000007501                 db    9
.eh_frame_hdr:0000000000007502                 db    0
.eh_frame_hdr:0000000000007503                 db    0
.eh_frame_hdr:0000000000007504                 db 0D8h
.eh_frame_hdr:0000000000007505                 db 0DAh
.eh_frame_hdr:0000000000007506                 db 0FFh
.eh_frame_hdr:0000000000007507                 db 0FFh
.eh_frame_hdr:0000000000007508                 db 0B0h
.eh_frame_hdr:0000000000007509                 db    9
.eh_frame_hdr:000000000000750A                 db    0
.eh_frame_hdr:000000000000750B                 db    0
.eh_frame_hdr:000000000000750C                 db 0A8h
.eh_frame_hdr:000000000000750D                 db 0DBh
.eh_frame_hdr:000000000000750E                 db 0FFh
.eh_frame_hdr:000000000000750F                 db 0FFh
.eh_frame_hdr:0000000000007510                 db  10h
.eh_frame_hdr:0000000000007511                 db  0Ah
.eh_frame_hdr:0000000000007512                 db    0
.eh_frame_hdr:0000000000007513                 db    0
.eh_frame_hdr:0000000000007514                 db 0C8h
.eh_frame_hdr:0000000000007515                 db 0DFh
.eh_frame_hdr:0000000000007516                 db 0FFh
.eh_frame_hdr:0000000000007517                 db 0FFh
.eh_frame_hdr:0000000000007518                 db  24h ; $
.eh_frame_hdr:0000000000007519                 db  0Bh
.eh_frame_hdr:000000000000751A                 db    0
.eh_frame_hdr:000000000000751B                 db    0
.eh_frame_hdr:000000000000751C                 db 0E8h
.eh_frame_hdr:000000000000751D                 db 0DFh
.eh_frame_hdr:000000000000751E                 db 0FFh
.eh_frame_hdr:000000000000751F                 db 0FFh
.eh_frame_hdr:0000000000007520                 db  38h ; 8
.eh_frame_hdr:0000000000007521                 db  0Bh
.eh_frame_hdr:0000000000007522                 db    0
.eh_frame_hdr:0000000000007523                 db    0
.eh_frame_hdr:0000000000007524                 db  68h ; h
.eh_frame_hdr:0000000000007525                 db 0E0h
.eh_frame_hdr:0000000000007526                 db 0FFh
.eh_frame_hdr:0000000000007527                 db 0FFh
.eh_frame_hdr:0000000000007528                 db  54h ; T
.eh_frame_hdr:0000000000007529                 db  0Bh
.eh_frame_hdr:000000000000752A                 db    0
.eh_frame_hdr:000000000000752B                 db    0
.eh_frame_hdr:000000000000752C                 db  48h ; H
.eh_frame_hdr:000000000000752D                 db 0E1h
.eh_frame_hdr:000000000000752E                 db 0FFh
.eh_frame_hdr:000000000000752F                 db 0FFh
.eh_frame_hdr:0000000000007530                 db  80h
.eh_frame_hdr:0000000000007531                 db  0Bh
.eh_frame_hdr:0000000000007532                 db    0
.eh_frame_hdr:0000000000007533                 db    0
.eh_frame_hdr:0000000000007534                 db 0C8h
.eh_frame_hdr:0000000000007535                 db 0E1h
.eh_frame_hdr:0000000000007536                 db 0FFh
.eh_frame_hdr:0000000000007537                 db 0FFh
.eh_frame_hdr:0000000000007538                 db 0A0h
.eh_frame_hdr:0000000000007539                 db  0Bh
.eh_frame_hdr:000000000000753A                 db    0
.eh_frame_hdr:000000000000753B                 db    0
.eh_frame_hdr:000000000000753C                 db 0E8h
.eh_frame_hdr:000000000000753D                 db 0E1h
.eh_frame_hdr:000000000000753E                 db 0FFh
.eh_frame_hdr:000000000000753F                 db 0FFh
.eh_frame_hdr:0000000000007540                 db 0BCh
.eh_frame_hdr:0000000000007541                 db  0Bh
.eh_frame_hdr:0000000000007542                 db    0
.eh_frame_hdr:0000000000007543                 db    0
.eh_frame_hdr:0000000000007544                 db  18h
.eh_frame_hdr:0000000000007545                 db 0E2h
.eh_frame_hdr:0000000000007546                 db 0FFh
.eh_frame_hdr:0000000000007547                 db 0FFh
.eh_frame_hdr:0000000000007548                 db 0D0h
.eh_frame_hdr:0000000000007549                 db  0Bh
.eh_frame_hdr:000000000000754A                 db    0
.eh_frame_hdr:000000000000754B                 db    0
.eh_frame_hdr:000000000000754C                 db  28h ; (
.eh_frame_hdr:000000000000754D                 db 0E2h
.eh_frame_hdr:000000000000754E                 db 0FFh
.eh_frame_hdr:000000000000754F                 db 0FFh
.eh_frame_hdr:0000000000007550                 db 0E4h
.eh_frame_hdr:0000000000007551                 db  0Bh
.eh_frame_hdr:0000000000007552                 db    0
.eh_frame_hdr:0000000000007553                 db    0
.eh_frame_hdr:0000000000007554                 db  68h ; h
.eh_frame_hdr:0000000000007555                 db 0E2h
.eh_frame_hdr:0000000000007556                 db 0FFh
.eh_frame_hdr:0000000000007557                 db 0FFh
.eh_frame_hdr:0000000000007558                 db    8
.eh_frame_hdr:0000000000007559                 db  0Ch
.eh_frame_hdr:000000000000755A                 db    0
.eh_frame_hdr:000000000000755B                 db    0
.eh_frame_hdr:000000000000755C                 db  98h
.eh_frame_hdr:000000000000755D                 db 0E2h
.eh_frame_hdr:000000000000755E                 db 0FFh
.eh_frame_hdr:000000000000755F                 db 0FFh
.eh_frame_hdr:0000000000007560                 db  1Ch
.eh_frame_hdr:0000000000007561                 db  0Ch
.eh_frame_hdr:0000000000007562                 db    0
.eh_frame_hdr:0000000000007563                 db    0
.eh_frame_hdr:0000000000007564                 db  28h ; (
.eh_frame_hdr:0000000000007565                 db 0E3h
.eh_frame_hdr:0000000000007566                 db 0FFh
.eh_frame_hdr:0000000000007567                 db 0FFh
.eh_frame_hdr:0000000000007568                 db  34h ; 4
.eh_frame_hdr:0000000000007569                 db  0Ch
.eh_frame_hdr:000000000000756A                 db    0
.eh_frame_hdr:000000000000756B                 db    0
.eh_frame_hdr:000000000000756C                 db  78h ; x
.eh_frame_hdr:000000000000756D                 db 0E3h
.eh_frame_hdr:000000000000756E                 db 0FFh
.eh_frame_hdr:000000000000756F                 db 0FFh
.eh_frame_hdr:0000000000007570                 db  4Ch ; L
.eh_frame_hdr:0000000000007571                 db  0Ch
.eh_frame_hdr:0000000000007572                 db    0
.eh_frame_hdr:0000000000007573                 db    0
.eh_frame_hdr:0000000000007574                 db  98h
.eh_frame_hdr:0000000000007575                 db 0E3h
.eh_frame_hdr:0000000000007576                 db 0FFh
.eh_frame_hdr:0000000000007577                 db 0FFh
.eh_frame_hdr:0000000000007578                 db  68h ; h
.eh_frame_hdr:0000000000007579                 db  0Ch
.eh_frame_hdr:000000000000757A                 db    0
.eh_frame_hdr:000000000000757B                 db    0
.eh_frame_hdr:000000000000757C                 db 0C8h
.eh_frame_hdr:000000000000757D                 db 0E3h
.eh_frame_hdr:000000000000757E                 db 0FFh
.eh_frame_hdr:000000000000757F                 db 0FFh
.eh_frame_hdr:0000000000007580                 db  84h
.eh_frame_hdr:0000000000007581                 db  0Ch
.eh_frame_hdr:0000000000007582                 db    0
.eh_frame_hdr:0000000000007583                 db    0
.eh_frame_hdr:0000000000007584                 db 0F8h
.eh_frame_hdr:0000000000007585                 db 0E3h
.eh_frame_hdr:0000000000007586                 db 0FFh
.eh_frame_hdr:0000000000007587                 db 0FFh
.eh_frame_hdr:0000000000007588                 db 0ACh
.eh_frame_hdr:0000000000007589                 db  0Ch
.eh_frame_hdr:000000000000758A                 db    0
.eh_frame_hdr:000000000000758B                 db    0
.eh_frame_hdr:000000000000758C                 db  18h
.eh_frame_hdr:000000000000758D                 db 0E4h
.eh_frame_hdr:000000000000758E                 db 0FFh
.eh_frame_hdr:000000000000758F                 db 0FFh
.eh_frame_hdr:0000000000007590                 db 0C8h
.eh_frame_hdr:0000000000007591                 db  0Ch
.eh_frame_hdr:0000000000007592                 db    0
.eh_frame_hdr:0000000000007593                 db    0
.eh_frame_hdr:0000000000007594                 db  58h ; X
.eh_frame_hdr:0000000000007595                 db 0E4h
.eh_frame_hdr:0000000000007596                 db 0FFh
.eh_frame_hdr:0000000000007597                 db 0FFh
.eh_frame_hdr:0000000000007598                 db 0E0h
.eh_frame_hdr:0000000000007599                 db  0Ch
.eh_frame_hdr:000000000000759A                 db    0
.eh_frame_hdr:000000000000759B                 db    0
.eh_frame_hdr:000000000000759C                 db  88h
.eh_frame_hdr:000000000000759D                 db 0E4h
.eh_frame_hdr:000000000000759E                 db 0FFh
.eh_frame_hdr:000000000000759F                 db 0FFh
.eh_frame_hdr:00000000000075A0                 db    0
.eh_frame_hdr:00000000000075A1                 db  0Dh
.eh_frame_hdr:00000000000075A2                 db    0
.eh_frame_hdr:00000000000075A3                 db    0
.eh_frame_hdr:00000000000075A4                 db 0A8h
.eh_frame_hdr:00000000000075A5                 db 0E8h
.eh_frame_hdr:00000000000075A6                 db 0FFh
.eh_frame_hdr:00000000000075A7                 db 0FFh
.eh_frame_hdr:00000000000075A8                 db  50h ; P
.eh_frame_hdr:00000000000075A9                 db  0Dh
.eh_frame_hdr:00000000000075AA                 db    0
.eh_frame_hdr:00000000000075AB                 db    0
.eh_frame_hdr:00000000000075AC                 db  38h ; 8
.eh_frame_hdr:00000000000075AD                 db 0E9h
.eh_frame_hdr:00000000000075AE                 db 0FFh
.eh_frame_hdr:00000000000075AF                 db 0FFh
.eh_frame_hdr:00000000000075B0                 db  90h
.eh_frame_hdr:00000000000075B1                 db  0Dh
.eh_frame_hdr:00000000000075B2                 db    0
.eh_frame_hdr:00000000000075B3                 db    0
.eh_frame_hdr:00000000000075B4                 db 0B8h
.eh_frame_hdr:00000000000075B5                 db 0E9h
.eh_frame_hdr:00000000000075B6                 db 0FFh
.eh_frame_hdr:00000000000075B7                 db 0FFh
.eh_frame_hdr:00000000000075B8                 db 0E0h
.eh_frame_hdr:00000000000075B9                 db  0Dh
.eh_frame_hdr:00000000000075BA                 db    0
.eh_frame_hdr:00000000000075BB                 db    0
.eh_frame_hdr:00000000000075BC                 db  18h
.eh_frame_hdr:00000000000075BD                 db 0EAh
.eh_frame_hdr:00000000000075BE                 db 0FFh
.eh_frame_hdr:00000000000075BF                 db 0FFh
.eh_frame_hdr:00000000000075C0                 db    0
.eh_frame_hdr:00000000000075C1                 db  0Eh
.eh_frame_hdr:00000000000075C2                 db    0
.eh_frame_hdr:00000000000075C3                 db    0
.eh_frame_hdr:00000000000075C4                 db  58h ; X
.eh_frame_hdr:00000000000075C5                 db 0EAh
.eh_frame_hdr:00000000000075C6                 db 0FFh
.eh_frame_hdr:00000000000075C7                 db 0FFh
.eh_frame_hdr:00000000000075C8                 db  20h
.eh_frame_hdr:00000000000075C9                 db  0Eh
.eh_frame_hdr:00000000000075CA                 db    0
.eh_frame_hdr:00000000000075CB                 db    0
.eh_frame_hdr:00000000000075CC                 db 0A8h
.eh_frame_hdr:00000000000075CD                 db 0EAh
.eh_frame_hdr:00000000000075CE                 db 0FFh
.eh_frame_hdr:00000000000075CF                 db 0FFh
.eh_frame_hdr:00000000000075D0                 db  38h ; 8
.eh_frame_hdr:00000000000075D1                 db  0Eh
.eh_frame_hdr:00000000000075D2                 db    0
.eh_frame_hdr:00000000000075D3                 db    0
.eh_frame_hdr:00000000000075D4                 db 0E8h
.eh_frame_hdr:00000000000075D5                 db 0ECh
.eh_frame_hdr:00000000000075D6                 db 0FFh
.eh_frame_hdr:00000000000075D7                 db 0FFh
.eh_frame_hdr:00000000000075D8                 db  88h
.eh_frame_hdr:00000000000075D9                 db  0Eh
.eh_frame_hdr:00000000000075DA                 db    0
.eh_frame_hdr:00000000000075DB                 db    0
.eh_frame_hdr:00000000000075DC                 db  68h ; h
.eh_frame_hdr:00000000000075DD                 db 0EDh
.eh_frame_hdr:00000000000075DE                 db 0FFh
.eh_frame_hdr:00000000000075DF                 db 0FFh
.eh_frame_hdr:00000000000075E0                 db 0C0h
.eh_frame_hdr:00000000000075E1                 db  0Eh
.eh_frame_hdr:00000000000075E2                 db    0
.eh_frame_hdr:00000000000075E3                 db    0
.eh_frame_hdr:00000000000075E4                 db 0A8h
.eh_frame_hdr:00000000000075E5                 db 0EDh
.eh_frame_hdr:00000000000075E6                 db 0FFh
.eh_frame_hdr:00000000000075E7                 db 0FFh
.eh_frame_hdr:00000000000075E8                 db 0E0h
.eh_frame_hdr:00000000000075E9                 db  0Eh
.eh_frame_hdr:00000000000075EA                 db    0
.eh_frame_hdr:00000000000075EB                 db    0
.eh_frame_hdr:00000000000075EC                 db    8
.eh_frame_hdr:00000000000075ED                 db 0EEh
.eh_frame_hdr:00000000000075EE                 db 0FFh
.eh_frame_hdr:00000000000075EF                 db 0FFh
.eh_frame_hdr:00000000000075F0                 db  10h
.eh_frame_hdr:00000000000075F1                 db  0Fh
.eh_frame_hdr:00000000000075F2                 db    0
.eh_frame_hdr:00000000000075F3                 db    0
.eh_frame_hdr:00000000000075F4                 db  78h ; x
.eh_frame_hdr:00000000000075F5                 db 0EEh
.eh_frame_hdr:00000000000075F6                 db 0FFh
.eh_frame_hdr:00000000000075F7                 db 0FFh
.eh_frame_hdr:00000000000075F8                 db  58h ; X
.eh_frame_hdr:00000000000075F9                 db  0Fh
.eh_frame_hdr:00000000000075FA                 db    0
.eh_frame_hdr:00000000000075FB                 db    0
.eh_frame_hdr:00000000000075FC                 db  88h
.eh_frame_hdr:00000000000075FD                 db 0EEh
.eh_frame_hdr:00000000000075FE                 db 0FFh
.eh_frame_hdr:00000000000075FF                 db 0FFh
.eh_frame_hdr:0000000000007600                 db  70h ; p
.eh_frame_hdr:0000000000007601                 db  0Fh
.eh_frame_hdr:0000000000007602                 db    0
.eh_frame_hdr:0000000000007603                 db    0
.eh_frame_hdr:0000000000007603 _eh_frame_hdr   ends
.eh_frame_hdr:0000000000007603
LOAD:0000000000007604 ; ===========================================================================
LOAD:0000000000007604
LOAD:0000000000007604 ; Segment type: Pure code
LOAD:0000000000007604 ; Segment permissions: Read/Execute
LOAD:0000000000007604 LOAD            segment byte public 'CODE' use64
LOAD:0000000000007604                 assume cs:LOAD
LOAD:0000000000007604                 ;org 7604h
LOAD:0000000000007604                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000007604                 align 8
LOAD:0000000000007604 LOAD            ends
LOAD:0000000000007604
.eh_frame:0000000000007608 ; ===========================================================================
.eh_frame:0000000000007608
.eh_frame:0000000000007608 ; Segment type: Pure data
.eh_frame:0000000000007608 ; Segment permissions: Read
.eh_frame:0000000000007608 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000007608                 assume cs:_eh_frame
.eh_frame:0000000000007608                 ;org 7608h
.eh_frame:0000000000007608                 db  14h
.eh_frame:0000000000007609                 db    0
.eh_frame:000000000000760A                 db    0
.eh_frame:000000000000760B                 db    0
.eh_frame:000000000000760C                 db    0
.eh_frame:000000000000760D                 db    0
.eh_frame:000000000000760E                 db    0
.eh_frame:000000000000760F                 db    0
.eh_frame:0000000000007610                 db    1
.eh_frame:0000000000007611                 db  7Ah ; z
.eh_frame:0000000000007612                 db  52h ; R
.eh_frame:0000000000007613                 db    0
.eh_frame:0000000000007614                 db    1
.eh_frame:0000000000007615                 db  78h ; x
.eh_frame:0000000000007616                 db  10h
.eh_frame:0000000000007617                 db    1
.eh_frame:0000000000007618                 db  1Bh
.eh_frame:0000000000007619                 db  0Ch
.eh_frame:000000000000761A                 db    7
.eh_frame:000000000000761B                 db    8
.eh_frame:000000000000761C                 db  90h
.eh_frame:000000000000761D                 db    1
.eh_frame:000000000000761E                 db    7
.eh_frame:000000000000761F                 db  10h
.eh_frame:0000000000007620                 db  14h
.eh_frame:0000000000007621                 db    0
.eh_frame:0000000000007622                 db    0
.eh_frame:0000000000007623                 db    0
.eh_frame:0000000000007624                 db  1Ch
.eh_frame:0000000000007625                 db    0
.eh_frame:0000000000007626                 db    0
.eh_frame:0000000000007627                 db    0
.eh_frame:0000000000007628                 db  18h
.eh_frame:0000000000007629                 db 0A9h
.eh_frame:000000000000762A                 db 0FFh
.eh_frame:000000000000762B                 db 0FFh
.eh_frame:000000000000762C                 db  2Bh ; +
.eh_frame:000000000000762D                 db    0
.eh_frame:000000000000762E                 db    0
.eh_frame:000000000000762F                 db    0
.eh_frame:0000000000007630                 db    0
.eh_frame:0000000000007631                 db    0
.eh_frame:0000000000007632                 db    0
.eh_frame:0000000000007633                 db    0
.eh_frame:0000000000007634                 db    0
.eh_frame:0000000000007635                 db    0
.eh_frame:0000000000007636                 db    0
.eh_frame:0000000000007637                 db    0
.eh_frame:0000000000007638                 db  14h
.eh_frame:0000000000007639                 db    0
.eh_frame:000000000000763A                 db    0
.eh_frame:000000000000763B                 db    0
.eh_frame:000000000000763C                 db    0
.eh_frame:000000000000763D                 db    0
.eh_frame:000000000000763E                 db    0
.eh_frame:000000000000763F                 db    0
.eh_frame:0000000000007640                 db    1
.eh_frame:0000000000007641                 db  7Ah ; z
.eh_frame:0000000000007642                 db  52h ; R
.eh_frame:0000000000007643                 db    0
.eh_frame:0000000000007644                 db    1
.eh_frame:0000000000007645                 db  78h ; x
.eh_frame:0000000000007646                 db  10h
.eh_frame:0000000000007647                 db    1
.eh_frame:0000000000007648                 db  1Bh
.eh_frame:0000000000007649                 db  0Ch
.eh_frame:000000000000764A                 db    7
.eh_frame:000000000000764B                 db    8
.eh_frame:000000000000764C                 db  90h
.eh_frame:000000000000764D                 db    1
.eh_frame:000000000000764E                 db    0
.eh_frame:000000000000764F                 db    0
.eh_frame:0000000000007650                 db  24h ; $
.eh_frame:0000000000007651                 db    0
.eh_frame:0000000000007652                 db    0
.eh_frame:0000000000007653                 db    0
.eh_frame:0000000000007654                 db  1Ch
.eh_frame:0000000000007655                 db    0
.eh_frame:0000000000007656                 db    0
.eh_frame:0000000000007657                 db    0
.eh_frame:0000000000007658                 db  98h
.eh_frame:0000000000007659                 db  9Fh
.eh_frame:000000000000765A                 db 0FFh
.eh_frame:000000000000765B                 db 0FFh
.eh_frame:000000000000765C                 db  90h
.eh_frame:000000000000765D                 db    3
.eh_frame:000000000000765E                 db    0
.eh_frame:000000000000765F                 db    0
.eh_frame:0000000000007660                 db    0
.eh_frame:0000000000007661                 db  0Eh
.eh_frame:0000000000007662                 db  10h
.eh_frame:0000000000007663                 db  46h ; F
.eh_frame:0000000000007664                 db  0Eh
.eh_frame:0000000000007665                 db  18h
.eh_frame:0000000000007666                 db  4Ah ; J
.eh_frame:0000000000007667                 db  0Fh
.eh_frame:0000000000007668                 db  0Bh
.eh_frame:0000000000007669                 db  77h ; w
.eh_frame:000000000000766A                 db    8
.eh_frame:000000000000766B                 db  80h
.eh_frame:000000000000766C                 db    0
.eh_frame:000000000000766D                 db  3Fh ; ?
.eh_frame:000000000000766E                 db  1Ah
.eh_frame:000000000000766F                 db  3Bh ; ;
.eh_frame:0000000000007670                 db  2Ah ; *
.eh_frame:0000000000007671                 db  33h ; 3
.eh_frame:0000000000007672                 db  24h ; $
.eh_frame:0000000000007673                 db  22h ; "
.eh_frame:0000000000007674                 db    0
.eh_frame:0000000000007675                 db    0
.eh_frame:0000000000007676                 db    0
.eh_frame:0000000000007677                 db    0
.eh_frame:0000000000007678                 db  14h
.eh_frame:0000000000007679                 db    0
.eh_frame:000000000000767A                 db    0
.eh_frame:000000000000767B                 db    0
.eh_frame:000000000000767C                 db  44h ; D
.eh_frame:000000000000767D                 db    0
.eh_frame:000000000000767E                 db    0
.eh_frame:000000000000767F                 db    0
.eh_frame:0000000000007680                 db    0
.eh_frame:0000000000007681                 db 0A3h
.eh_frame:0000000000007682                 db 0FFh
.eh_frame:0000000000007683                 db 0FFh
.eh_frame:0000000000007684                 db    8
.eh_frame:0000000000007685                 db    0
.eh_frame:0000000000007686                 db    0
.eh_frame:0000000000007687                 db    0
.eh_frame:0000000000007688                 db    0
.eh_frame:0000000000007689                 db    0
.eh_frame:000000000000768A                 db    0
.eh_frame:000000000000768B                 db    0
.eh_frame:000000000000768C                 db    0
.eh_frame:000000000000768D                 db    0
.eh_frame:000000000000768E                 db    0
.eh_frame:000000000000768F                 db    0
.eh_frame:0000000000007690                 db  40h ; @
.eh_frame:0000000000007691                 db    0
.eh_frame:0000000000007692                 db    0
.eh_frame:0000000000007693                 db    0
.eh_frame:0000000000007694                 db  5Ch ; \
.eh_frame:0000000000007695                 db    0
.eh_frame:0000000000007696                 db    0
.eh_frame:0000000000007697                 db    0
.eh_frame:0000000000007698                 db 0B8h
.eh_frame:0000000000007699                 db 0A9h
.eh_frame:000000000000769A                 db 0FFh
.eh_frame:000000000000769B                 db 0FFh
.eh_frame:000000000000769C                 db  91h
.eh_frame:000000000000769D                 db    5
.eh_frame:000000000000769E                 db    0
.eh_frame:000000000000769F                 db    0
.eh_frame:00000000000076A0                 db    0
.eh_frame:00000000000076A1                 db  42h ; B
.eh_frame:00000000000076A2                 db  0Eh
.eh_frame:00000000000076A3                 db  10h
.eh_frame:00000000000076A4                 db  8Eh
.eh_frame:00000000000076A5                 db    2
.eh_frame:00000000000076A6                 db  42h ; B
.eh_frame:00000000000076A7                 db  0Eh
.eh_frame:00000000000076A8                 db  18h
.eh_frame:00000000000076A9                 db  8Dh
.eh_frame:00000000000076AA                 db    3
.eh_frame:00000000000076AB                 db  42h ; B
.eh_frame:00000000000076AC                 db  0Eh
.eh_frame:00000000000076AD                 db  20h
.eh_frame:00000000000076AE                 db  8Ch
.eh_frame:00000000000076AF                 db    4
.eh_frame:00000000000076B0                 db  41h ; A
.eh_frame:00000000000076B1                 db  0Eh
.eh_frame:00000000000076B2                 db  28h ; (
.eh_frame:00000000000076B3                 db  86h
.eh_frame:00000000000076B4                 db    5
.eh_frame:00000000000076B5                 db  41h ; A
.eh_frame:00000000000076B6                 db  0Eh
.eh_frame:00000000000076B7                 db  30h ; 0
.eh_frame:00000000000076B8                 db  83h
.eh_frame:00000000000076B9                 db    6
.eh_frame:00000000000076BA                 db  44h ; D
.eh_frame:00000000000076BB                 db  0Eh
.eh_frame:00000000000076BC                 db  40h ; @
.eh_frame:00000000000076BD                 db    2
.eh_frame:00000000000076BE                 db 0BDh
.eh_frame:00000000000076BF                 db  0Ah
.eh_frame:00000000000076C0                 db  0Eh
.eh_frame:00000000000076C1                 db  30h ; 0
.eh_frame:00000000000076C2                 db  41h ; A
.eh_frame:00000000000076C3                 db  0Eh
.eh_frame:00000000000076C4                 db  28h ; (
.eh_frame:00000000000076C5                 db  41h ; A
.eh_frame:00000000000076C6                 db  0Eh
.eh_frame:00000000000076C7                 db  20h
.eh_frame:00000000000076C8                 db  42h ; B
.eh_frame:00000000000076C9                 db  0Eh
.eh_frame:00000000000076CA                 db  18h
.eh_frame:00000000000076CB                 db  42h ; B
.eh_frame:00000000000076CC                 db  0Eh
.eh_frame:00000000000076CD                 db  10h
.eh_frame:00000000000076CE                 db  42h ; B
.eh_frame:00000000000076CF                 db  0Eh
.eh_frame:00000000000076D0                 db    8
.eh_frame:00000000000076D1                 db  47h ; G
.eh_frame:00000000000076D2                 db  0Bh
.eh_frame:00000000000076D3                 db    0
.eh_frame:00000000000076D4                 db  28h ; (
.eh_frame:00000000000076D5                 db    0
.eh_frame:00000000000076D6                 db    0
.eh_frame:00000000000076D7                 db    0
.eh_frame:00000000000076D8                 db 0A0h
.eh_frame:00000000000076D9                 db    0
.eh_frame:00000000000076DA                 db    0
.eh_frame:00000000000076DB                 db    0
.eh_frame:00000000000076DC                 db  14h
.eh_frame:00000000000076DD                 db 0AFh
.eh_frame:00000000000076DE                 db 0FFh
.eh_frame:00000000000076DF                 db 0FFh
.eh_frame:00000000000076E0                 db  8Ah
.eh_frame:00000000000076E1                 db    3
.eh_frame:00000000000076E2                 db    0
.eh_frame:00000000000076E3                 db    0
.eh_frame:00000000000076E4                 db    0
.eh_frame:00000000000076E5                 db  42h ; B
.eh_frame:00000000000076E6                 db  0Eh
.eh_frame:00000000000076E7                 db  10h
.eh_frame:00000000000076E8                 db  8Dh
.eh_frame:00000000000076E9                 db    2
.eh_frame:00000000000076EA                 db  42h ; B
.eh_frame:00000000000076EB                 db  0Eh
.eh_frame:00000000000076EC                 db  18h
.eh_frame:00000000000076ED                 db  8Ch
.eh_frame:00000000000076EE                 db    3
.eh_frame:00000000000076EF                 db  46h ; F
.eh_frame:00000000000076F0                 db  0Eh
.eh_frame:00000000000076F1                 db  20h
.eh_frame:00000000000076F2                 db  86h
.eh_frame:00000000000076F3                 db    4
.eh_frame:00000000000076F4                 db  41h ; A
.eh_frame:00000000000076F5                 db  0Eh
.eh_frame:00000000000076F6                 db  28h ; (
.eh_frame:00000000000076F7                 db  83h
.eh_frame:00000000000076F8                 db    5
.eh_frame:00000000000076F9                 db  49h ; I
.eh_frame:00000000000076FA                 db  0Eh
.eh_frame:00000000000076FB                 db 0B0h
.eh_frame:00000000000076FC                 db    1
.eh_frame:00000000000076FD                 db    0
.eh_frame:00000000000076FE                 db    0
.eh_frame:00000000000076FF                 db    0
.eh_frame:0000000000007700                 db  44h ; D
.eh_frame:0000000000007701                 db    0
.eh_frame:0000000000007702                 db    0
.eh_frame:0000000000007703                 db    0
.eh_frame:0000000000007704                 db 0CCh
.eh_frame:0000000000007705                 db    0
.eh_frame:0000000000007706                 db    0
.eh_frame:0000000000007707                 db    0
.eh_frame:0000000000007708                 db  88h
.eh_frame:0000000000007709                 db 0A2h
.eh_frame:000000000000770A                 db 0FFh
.eh_frame:000000000000770B                 db 0FFh
.eh_frame:000000000000770C                 db 0A9h
.eh_frame:000000000000770D                 db    5
.eh_frame:000000000000770E                 db    0
.eh_frame:000000000000770F                 db    0
.eh_frame:0000000000007710                 db    0
.eh_frame:0000000000007711                 db  42h ; B
.eh_frame:0000000000007712                 db  0Eh
.eh_frame:0000000000007713                 db  10h
.eh_frame:0000000000007714                 db  8Eh
.eh_frame:0000000000007715                 db    2
.eh_frame:0000000000007716                 db  42h ; B
.eh_frame:0000000000007717                 db  0Eh
.eh_frame:0000000000007718                 db  18h
.eh_frame:0000000000007719                 db  8Dh
.eh_frame:000000000000771A                 db    3
.eh_frame:000000000000771B                 db  42h ; B
.eh_frame:000000000000771C                 db  0Eh
.eh_frame:000000000000771D                 db  20h
.eh_frame:000000000000771E                 db  8Ch
.eh_frame:000000000000771F                 db    4
.eh_frame:0000000000007720                 db  41h ; A
.eh_frame:0000000000007721                 db  0Eh
.eh_frame:0000000000007722                 db  28h ; (
.eh_frame:0000000000007723                 db  86h
.eh_frame:0000000000007724                 db    5
.eh_frame:0000000000007725                 db  43h ; C
.eh_frame:0000000000007726                 db  0Eh
.eh_frame:0000000000007727                 db  30h ; 0
.eh_frame:0000000000007728                 db  83h
.eh_frame:0000000000007729                 db    6
.eh_frame:000000000000772A                 db    2
.eh_frame:000000000000772B                 db 0C2h
.eh_frame:000000000000772C                 db  0Ah
.eh_frame:000000000000772D                 db  0Eh
.eh_frame:000000000000772E                 db  38h ; 8
.eh_frame:000000000000772F                 db  50h ; P
.eh_frame:0000000000007730                 db  0Eh
.eh_frame:0000000000007731                 db  40h ; @
.eh_frame:0000000000007732                 db  74h ; t
.eh_frame:0000000000007733                 db  0Bh
.eh_frame:0000000000007734                 db    3
.eh_frame:0000000000007735                 db  23h ; #
.eh_frame:0000000000007736                 db    2
.eh_frame:0000000000007737                 db  0Ah
.eh_frame:0000000000007738                 db  0Eh
.eh_frame:0000000000007739                 db  28h ; (
.eh_frame:000000000000773A                 db  41h ; A
.eh_frame:000000000000773B                 db  0Eh
.eh_frame:000000000000773C                 db  20h
.eh_frame:000000000000773D                 db  42h ; B
.eh_frame:000000000000773E                 db  0Eh
.eh_frame:000000000000773F                 db  18h
.eh_frame:0000000000007740                 db  48h ; H
.eh_frame:0000000000007741                 db  0Eh
.eh_frame:0000000000007742                 db  10h
.eh_frame:0000000000007743                 db  42h ; B
.eh_frame:0000000000007744                 db  0Eh
.eh_frame:0000000000007745                 db    8
.eh_frame:0000000000007746                 db  41h ; A
.eh_frame:0000000000007747                 db  0Bh
.eh_frame:0000000000007748                 db  24h ; $
.eh_frame:0000000000007749                 db    0
.eh_frame:000000000000774A                 db    0
.eh_frame:000000000000774B                 db    0
.eh_frame:000000000000774C                 db  14h
.eh_frame:000000000000774D                 db    1
.eh_frame:000000000000774E                 db    0
.eh_frame:000000000000774F                 db    0
.eh_frame:0000000000007750                 db  30h ; 0
.eh_frame:0000000000007751                 db 0B2h
.eh_frame:0000000000007752                 db 0FFh
.eh_frame:0000000000007753                 db 0FFh
.eh_frame:0000000000007754                 db  77h ; w
.eh_frame:0000000000007755                 db    0
.eh_frame:0000000000007756                 db    0
.eh_frame:0000000000007757                 db    0
.eh_frame:0000000000007758                 db    0
.eh_frame:0000000000007759                 db  41h ; A
.eh_frame:000000000000775A                 db  0Eh
.eh_frame:000000000000775B                 db  10h
.eh_frame:000000000000775C                 db  86h
.eh_frame:000000000000775D                 db    2
.eh_frame:000000000000775E                 db  41h ; A
.eh_frame:000000000000775F                 db  0Eh
.eh_frame:0000000000007760                 db  18h
.eh_frame:0000000000007761                 db  83h
.eh_frame:0000000000007762                 db    3
.eh_frame:0000000000007763                 db  4Bh ; K
.eh_frame:0000000000007764                 db  0Eh
.eh_frame:0000000000007765                 db  20h
.eh_frame:0000000000007766                 db    2
.eh_frame:0000000000007767                 db  65h ; e
.eh_frame:0000000000007768                 db  0Eh
.eh_frame:0000000000007769                 db  18h
.eh_frame:000000000000776A                 db  43h ; C
.eh_frame:000000000000776B                 db  0Eh
.eh_frame:000000000000776C                 db  10h
.eh_frame:000000000000776D                 db  41h ; A
.eh_frame:000000000000776E                 db  0Eh
.eh_frame:000000000000776F                 db    8
.eh_frame:0000000000007770                 db  4Ch ; L
.eh_frame:0000000000007771                 db    0
.eh_frame:0000000000007772                 db    0
.eh_frame:0000000000007773                 db    0
.eh_frame:0000000000007774                 db  3Ch ; <
.eh_frame:0000000000007775                 db    1
.eh_frame:0000000000007776                 db    0
.eh_frame:0000000000007777                 db    0
.eh_frame:0000000000007778                 db  88h
.eh_frame:0000000000007779                 db 0B2h
.eh_frame:000000000000777A                 db 0FFh
.eh_frame:000000000000777B                 db 0FFh
.eh_frame:000000000000777C                 db  23h ; #
.eh_frame:000000000000777D                 db    2
.eh_frame:000000000000777E                 db    0
.eh_frame:000000000000777F                 db    0
.eh_frame:0000000000007780                 db    0
.eh_frame:0000000000007781                 db  42h ; B
.eh_frame:0000000000007782                 db  0Eh
.eh_frame:0000000000007783                 db  10h
.eh_frame:0000000000007784                 db  8Fh
.eh_frame:0000000000007785                 db    2
.eh_frame:0000000000007786                 db  42h ; B
.eh_frame:0000000000007787                 db  0Eh
.eh_frame:0000000000007788                 db  18h
.eh_frame:0000000000007789                 db  8Eh
.eh_frame:000000000000778A                 db    3
.eh_frame:000000000000778B                 db  45h ; E
.eh_frame:000000000000778C                 db  0Eh
.eh_frame:000000000000778D                 db  20h
.eh_frame:000000000000778E                 db  8Dh
.eh_frame:000000000000778F                 db    4
.eh_frame:0000000000007790                 db  42h ; B
.eh_frame:0000000000007791                 db  0Eh
.eh_frame:0000000000007792                 db  28h ; (
.eh_frame:0000000000007793                 db  8Ch
.eh_frame:0000000000007794                 db    5
.eh_frame:0000000000007795                 db  44h ; D
.eh_frame:0000000000007796                 db  0Eh
.eh_frame:0000000000007797                 db  30h ; 0
.eh_frame:0000000000007798                 db  86h
.eh_frame:0000000000007799                 db    6
.eh_frame:000000000000779A                 db  41h ; A
.eh_frame:000000000000779B                 db  0Eh
.eh_frame:000000000000779C                 db  38h ; 8
.eh_frame:000000000000779D                 db  83h
.eh_frame:000000000000779E                 db    7
.eh_frame:000000000000779F                 db  49h ; I
.eh_frame:00000000000077A0                 db  0Eh
.eh_frame:00000000000077A1                 db  60h ; `
.eh_frame:00000000000077A2                 db    3
.eh_frame:00000000000077A3                 db  54h ; T
.eh_frame:00000000000077A4                 db    1
.eh_frame:00000000000077A5                 db  0Ah
.eh_frame:00000000000077A6                 db  0Eh
.eh_frame:00000000000077A7                 db  38h ; 8
.eh_frame:00000000000077A8                 db  41h ; A
.eh_frame:00000000000077A9                 db  0Eh
.eh_frame:00000000000077AA                 db  30h ; 0
.eh_frame:00000000000077AB                 db  41h ; A
.eh_frame:00000000000077AC                 db  0Eh
.eh_frame:00000000000077AD                 db  28h ; (
.eh_frame:00000000000077AE                 db  42h ; B
.eh_frame:00000000000077AF                 db  0Eh
.eh_frame:00000000000077B0                 db  20h
.eh_frame:00000000000077B1                 db  42h ; B
.eh_frame:00000000000077B2                 db  0Eh
.eh_frame:00000000000077B3                 db  18h
.eh_frame:00000000000077B4                 db  42h ; B
.eh_frame:00000000000077B5                 db  0Eh
.eh_frame:00000000000077B6                 db  10h
.eh_frame:00000000000077B7                 db  42h ; B
.eh_frame:00000000000077B8                 db  0Eh
.eh_frame:00000000000077B9                 db    8
.eh_frame:00000000000077BA                 db  49h ; I
.eh_frame:00000000000077BB                 db  0Bh
.eh_frame:00000000000077BC                 db    0
.eh_frame:00000000000077BD                 db    0
.eh_frame:00000000000077BE                 db    0
.eh_frame:00000000000077BF                 db    0
.eh_frame:00000000000077C0                 db  10h
.eh_frame:00000000000077C1                 db    0
.eh_frame:00000000000077C2                 db    0
.eh_frame:00000000000077C3                 db    0
.eh_frame:00000000000077C4                 db  8Ch
.eh_frame:00000000000077C5                 db    1
.eh_frame:00000000000077C6                 db    0
.eh_frame:00000000000077C7                 db    0
.eh_frame:00000000000077C8                 db  68h ; h
.eh_frame:00000000000077C9                 db 0B4h
.eh_frame:00000000000077CA                 db 0FFh
.eh_frame:00000000000077CB                 db 0FFh
.eh_frame:00000000000077CC                 db    8
.eh_frame:00000000000077CD                 db    0
.eh_frame:00000000000077CE                 db    0
.eh_frame:00000000000077CF                 db    0
.eh_frame:00000000000077D0                 db    0
.eh_frame:00000000000077D1                 db    0
.eh_frame:00000000000077D2                 db    0
.eh_frame:00000000000077D3                 db    0
.eh_frame:00000000000077D4                 db  10h
.eh_frame:00000000000077D5                 db    0
.eh_frame:00000000000077D6                 db    0
.eh_frame:00000000000077D7                 db    0
.eh_frame:00000000000077D8                 db 0A0h
.eh_frame:00000000000077D9                 db    1
.eh_frame:00000000000077DA                 db    0
.eh_frame:00000000000077DB                 db    0
.eh_frame:00000000000077DC                 db  64h ; d
.eh_frame:00000000000077DD                 db 0B4h
.eh_frame:00000000000077DE                 db 0FFh
.eh_frame:00000000000077DF                 db 0FFh
.eh_frame:00000000000077E0                 db    8
.eh_frame:00000000000077E1                 db    0
.eh_frame:00000000000077E2                 db    0
.eh_frame:00000000000077E3                 db    0
.eh_frame:00000000000077E4                 db    0
.eh_frame:00000000000077E5                 db    0
.eh_frame:00000000000077E6                 db    0
.eh_frame:00000000000077E7                 db    0
.eh_frame:00000000000077E8                 db  2Ch ; ,
.eh_frame:00000000000077E9                 db    0
.eh_frame:00000000000077EA                 db    0
.eh_frame:00000000000077EB                 db    0
.eh_frame:00000000000077EC                 db 0B4h
.eh_frame:00000000000077ED                 db    1
.eh_frame:00000000000077EE                 db    0
.eh_frame:00000000000077EF                 db    0
.eh_frame:00000000000077F0                 db  60h ; `
.eh_frame:00000000000077F1                 db 0B4h
.eh_frame:00000000000077F2                 db 0FFh
.eh_frame:00000000000077F3                 db 0FFh
.eh_frame:00000000000077F4                 db 0A4h
.eh_frame:00000000000077F5                 db    0
.eh_frame:00000000000077F6                 db    0
.eh_frame:00000000000077F7                 db    0
.eh_frame:00000000000077F8                 db    0
.eh_frame:00000000000077F9                 db  41h ; A
.eh_frame:00000000000077FA                 db  0Eh
.eh_frame:00000000000077FB                 db  10h
.eh_frame:00000000000077FC                 db  86h
.eh_frame:00000000000077FD                 db    2
.eh_frame:00000000000077FE                 db  41h ; A
.eh_frame:00000000000077FF                 db  0Eh
.eh_frame:0000000000007800                 db  18h
.eh_frame:0000000000007801                 db  83h
.eh_frame:0000000000007802                 db    3
.eh_frame:0000000000007803                 db  44h ; D
.eh_frame:0000000000007804                 db  0Eh
.eh_frame:0000000000007805                 db  20h
.eh_frame:0000000000007806                 db  7Ah ; z
.eh_frame:0000000000007807                 db  0Ah
.eh_frame:0000000000007808                 db  0Eh
.eh_frame:0000000000007809                 db  18h
.eh_frame:000000000000780A                 db  41h ; A
.eh_frame:000000000000780B                 db  0Eh
.eh_frame:000000000000780C                 db  10h
.eh_frame:000000000000780D                 db  41h ; A
.eh_frame:000000000000780E                 db  0Eh
.eh_frame:000000000000780F                 db    8
.eh_frame:0000000000007810                 db  41h ; A
.eh_frame:0000000000007811                 db  0Bh
.eh_frame:0000000000007812                 db    0
.eh_frame:0000000000007813                 db    0
.eh_frame:0000000000007814                 db    0
.eh_frame:0000000000007815                 db    0
.eh_frame:0000000000007816                 db    0
.eh_frame:0000000000007817                 db    0
.eh_frame:0000000000007818                 db  14h
.eh_frame:0000000000007819                 db    0
.eh_frame:000000000000781A                 db    0
.eh_frame:000000000000781B                 db    0
.eh_frame:000000000000781C                 db 0E4h
.eh_frame:000000000000781D                 db    1
.eh_frame:000000000000781E                 db    0
.eh_frame:000000000000781F                 db    0
.eh_frame:0000000000007820                 db 0E0h
.eh_frame:0000000000007821                 db 0B4h
.eh_frame:0000000000007822                 db 0FFh
.eh_frame:0000000000007823                 db 0FFh
.eh_frame:0000000000007824                 db  42h ; B
.eh_frame:0000000000007825                 db    0
.eh_frame:0000000000007826                 db    0
.eh_frame:0000000000007827                 db    0
.eh_frame:0000000000007828                 db    0
.eh_frame:0000000000007829                 db    0
.eh_frame:000000000000782A                 db    0
.eh_frame:000000000000782B                 db    0
.eh_frame:000000000000782C                 db    0
.eh_frame:000000000000782D                 db    0
.eh_frame:000000000000782E                 db    0
.eh_frame:000000000000782F                 db    0
.eh_frame:0000000000007830                 db  1Ch
.eh_frame:0000000000007831                 db    0
.eh_frame:0000000000007832                 db    0
.eh_frame:0000000000007833                 db    0
.eh_frame:0000000000007834                 db 0FCh
.eh_frame:0000000000007835                 db    1
.eh_frame:0000000000007836                 db    0
.eh_frame:0000000000007837                 db    0
.eh_frame:0000000000007838                 db  18h
.eh_frame:0000000000007839                 db 0B5h
.eh_frame:000000000000783A                 db 0FFh
.eh_frame:000000000000783B                 db 0FFh
.eh_frame:000000000000783C                 db  9Fh
.eh_frame:000000000000783D                 db    0
.eh_frame:000000000000783E                 db    0
.eh_frame:000000000000783F                 db    0
.eh_frame:0000000000007840                 db    0
.eh_frame:0000000000007841                 db  44h ; D
.eh_frame:0000000000007842                 db  0Eh
.eh_frame:0000000000007843                 db  10h
.eh_frame:0000000000007844                 db  83h
.eh_frame:0000000000007845                 db    2
.eh_frame:0000000000007846                 db    2
.eh_frame:0000000000007847                 db  78h ; x
.eh_frame:0000000000007848                 db  0Ah
.eh_frame:0000000000007849                 db  0Eh
.eh_frame:000000000000784A                 db    8
.eh_frame:000000000000784B                 db  41h ; A
.eh_frame:000000000000784C                 db  0Bh
.eh_frame:000000000000784D                 db    0
.eh_frame:000000000000784E                 db    0
.eh_frame:000000000000784F                 db    0
.eh_frame:0000000000007850                 db  40h ; @
.eh_frame:0000000000007851                 db    0
.eh_frame:0000000000007852                 db    0
.eh_frame:0000000000007853                 db    0
.eh_frame:0000000000007854                 db  1Ch
.eh_frame:0000000000007855                 db    2
.eh_frame:0000000000007856                 db    0
.eh_frame:0000000000007857                 db    0
.eh_frame:0000000000007858                 db  98h
.eh_frame:0000000000007859                 db 0B5h
.eh_frame:000000000000785A                 db 0FFh
.eh_frame:000000000000785B                 db 0FFh
.eh_frame:000000000000785C                 db 0E7h
.eh_frame:000000000000785D                 db    0
.eh_frame:000000000000785E                 db    0
.eh_frame:000000000000785F                 db    0
.eh_frame:0000000000007860                 db    0
.eh_frame:0000000000007861                 db  41h ; A
.eh_frame:0000000000007862                 db  0Eh
.eh_frame:0000000000007863                 db  10h
.eh_frame:0000000000007864                 db  86h
.eh_frame:0000000000007865                 db    2
.eh_frame:0000000000007866                 db  41h ; A
.eh_frame:0000000000007867                 db  0Eh
.eh_frame:0000000000007868                 db  18h
.eh_frame:0000000000007869                 db  83h
.eh_frame:000000000000786A                 db    3
.eh_frame:000000000000786B                 db  49h ; I
.eh_frame:000000000000786C                 db  0Eh
.eh_frame:000000000000786D                 db  20h
.eh_frame:000000000000786E                 db  6Eh ; n
.eh_frame:000000000000786F                 db  0Ah
.eh_frame:0000000000007870                 db  0Eh
.eh_frame:0000000000007871                 db  18h
.eh_frame:0000000000007872                 db  41h ; A
.eh_frame:0000000000007873                 db  0Eh
.eh_frame:0000000000007874                 db  10h
.eh_frame:0000000000007875                 db  41h ; A
.eh_frame:0000000000007876                 db  0Eh
.eh_frame:0000000000007877                 db    8
.eh_frame:0000000000007878                 db  45h ; E
.eh_frame:0000000000007879                 db  0Bh
.eh_frame:000000000000787A                 db    2
.eh_frame:000000000000787B                 db  4Ah ; J
.eh_frame:000000000000787C                 db  0Ah
.eh_frame:000000000000787D                 db  0Eh
.eh_frame:000000000000787E                 db  18h
.eh_frame:000000000000787F                 db  41h ; A
.eh_frame:0000000000007880                 db  0Eh
.eh_frame:0000000000007881                 db  10h
.eh_frame:0000000000007882                 db  41h ; A
.eh_frame:0000000000007883                 db  0Eh
.eh_frame:0000000000007884                 db    8
.eh_frame:0000000000007885                 db  44h ; D
.eh_frame:0000000000007886                 db  0Bh
.eh_frame:0000000000007887                 db    2
.eh_frame:0000000000007888                 db  54h ; T
.eh_frame:0000000000007889                 db  0Eh
.eh_frame:000000000000788A                 db  18h
.eh_frame:000000000000788B                 db  41h ; A
.eh_frame:000000000000788C                 db  0Eh
.eh_frame:000000000000788D                 db  10h
.eh_frame:000000000000788E                 db  41h ; A
.eh_frame:000000000000788F                 db  0Eh
.eh_frame:0000000000007890                 db    8
.eh_frame:0000000000007891                 db    0
.eh_frame:0000000000007892                 db    0
.eh_frame:0000000000007893                 db    0
.eh_frame:0000000000007894                 db  74h ; t
.eh_frame:0000000000007895                 db    0
.eh_frame:0000000000007896                 db    0
.eh_frame:0000000000007897                 db    0
.eh_frame:0000000000007898                 db  60h ; `
.eh_frame:0000000000007899                 db    2
.eh_frame:000000000000789A                 db    0
.eh_frame:000000000000789B                 db    0
.eh_frame:000000000000789C                 db  44h ; D
.eh_frame:000000000000789D                 db 0B6h
.eh_frame:000000000000789E                 db 0FFh
.eh_frame:000000000000789F                 db 0FFh
.eh_frame:00000000000078A0                 db  34h ; 4
.eh_frame:00000000000078A1                 db  12h
.eh_frame:00000000000078A2                 db    0
.eh_frame:00000000000078A3                 db    0
.eh_frame:00000000000078A4                 db    0
.eh_frame:00000000000078A5                 db  42h ; B
.eh_frame:00000000000078A6                 db  0Eh
.eh_frame:00000000000078A7                 db  10h
.eh_frame:00000000000078A8                 db  8Fh
.eh_frame:00000000000078A9                 db    2
.eh_frame:00000000000078AA                 db  42h ; B
.eh_frame:00000000000078AB                 db  0Eh
.eh_frame:00000000000078AC                 db  18h
.eh_frame:00000000000078AD                 db  8Eh
.eh_frame:00000000000078AE                 db    3
.eh_frame:00000000000078AF                 db  45h ; E
.eh_frame:00000000000078B0                 db  0Eh
.eh_frame:00000000000078B1                 db  20h
.eh_frame:00000000000078B2                 db  8Dh
.eh_frame:00000000000078B3                 db    4
.eh_frame:00000000000078B4                 db  42h ; B
.eh_frame:00000000000078B5                 db  0Eh
.eh_frame:00000000000078B6                 db  28h ; (
.eh_frame:00000000000078B7                 db  8Ch
.eh_frame:00000000000078B8                 db    5
.eh_frame:00000000000078B9                 db  44h ; D
.eh_frame:00000000000078BA                 db  0Eh
.eh_frame:00000000000078BB                 db  30h ; 0
.eh_frame:00000000000078BC                 db  86h
.eh_frame:00000000000078BD                 db    6
.eh_frame:00000000000078BE                 db  41h ; A
.eh_frame:00000000000078BF                 db  0Eh
.eh_frame:00000000000078C0                 db  38h ; 8
.eh_frame:00000000000078C1                 db  83h
.eh_frame:00000000000078C2                 db    7
.eh_frame:00000000000078C3                 db  53h ; S
.eh_frame:00000000000078C4                 db  0Eh
.eh_frame:00000000000078C5                 db 0F0h
.eh_frame:00000000000078C6                 db    1
.eh_frame:00000000000078C7                 db    3
.eh_frame:00000000000078C8                 db  81h
.eh_frame:00000000000078C9                 db  0Bh
.eh_frame:00000000000078CA                 db  0Eh
.eh_frame:00000000000078CB                 db 0F8h
.eh_frame:00000000000078CC                 db    1
.eh_frame:00000000000078CD                 db  4Ah ; J
.eh_frame:00000000000078CE                 db  0Eh
.eh_frame:00000000000078CF                 db  80h
.eh_frame:00000000000078D0                 db    2
.eh_frame:00000000000078D1                 db  44h ; D
.eh_frame:00000000000078D2                 db  0Eh
.eh_frame:00000000000078D3                 db  88h
.eh_frame:00000000000078D4                 db    2
.eh_frame:00000000000078D5                 db  45h ; E
.eh_frame:00000000000078D6                 db  0Eh
.eh_frame:00000000000078D7                 db  90h
.eh_frame:00000000000078D8                 db    2
.eh_frame:00000000000078D9                 db  5Fh ; _
.eh_frame:00000000000078DA                 db  0Eh
.eh_frame:00000000000078DB                 db 0F0h
.eh_frame:00000000000078DC                 db    1
.eh_frame:00000000000078DD                 db  64h ; d
.eh_frame:00000000000078DE                 db  0Ah
.eh_frame:00000000000078DF                 db  0Eh
.eh_frame:00000000000078E0                 db  38h ; 8
.eh_frame:00000000000078E1                 db  41h ; A
.eh_frame:00000000000078E2                 db  0Eh
.eh_frame:00000000000078E3                 db  30h ; 0
.eh_frame:00000000000078E4                 db  41h ; A
.eh_frame:00000000000078E5                 db  0Eh
.eh_frame:00000000000078E6                 db  28h ; (
.eh_frame:00000000000078E7                 db  42h ; B
.eh_frame:00000000000078E8                 db  0Eh
.eh_frame:00000000000078E9                 db  20h
.eh_frame:00000000000078EA                 db  42h ; B
.eh_frame:00000000000078EB                 db  0Eh
.eh_frame:00000000000078EC                 db  18h
.eh_frame:00000000000078ED                 db  42h ; B
.eh_frame:00000000000078EE                 db  0Eh
.eh_frame:00000000000078EF                 db  10h
.eh_frame:00000000000078F0                 db  42h ; B
.eh_frame:00000000000078F1                 db  0Eh
.eh_frame:00000000000078F2                 db    8
.eh_frame:00000000000078F3                 db  44h ; D
.eh_frame:00000000000078F4                 db  0Bh
.eh_frame:00000000000078F5                 db    3
.eh_frame:00000000000078F6                 db  99h
.eh_frame:00000000000078F7                 db    5
.eh_frame:00000000000078F8                 db  0Eh
.eh_frame:00000000000078F9                 db 0F8h
.eh_frame:00000000000078FA                 db    1
.eh_frame:00000000000078FB                 db  4Dh ; M
.eh_frame:00000000000078FC                 db  0Eh
.eh_frame:00000000000078FD                 db  80h
.eh_frame:00000000000078FE                 db    2
.eh_frame:00000000000078FF                 db  44h ; D
.eh_frame:0000000000007900                 db  0Eh
.eh_frame:0000000000007901                 db  88h
.eh_frame:0000000000007902                 db    2
.eh_frame:0000000000007903                 db  47h ; G
.eh_frame:0000000000007904                 db  0Eh
.eh_frame:0000000000007905                 db  90h
.eh_frame:0000000000007906                 db    2
.eh_frame:0000000000007907                 db  5Bh ; [
.eh_frame:0000000000007908                 db  0Eh
.eh_frame:0000000000007909                 db 0F0h
.eh_frame:000000000000790A                 db    1
.eh_frame:000000000000790B                 db    0
.eh_frame:000000000000790C                 db  68h ; h
.eh_frame:000000000000790D                 db    0
.eh_frame:000000000000790E                 db    0
.eh_frame:000000000000790F                 db    0
.eh_frame:0000000000007910                 db 0D8h
.eh_frame:0000000000007911                 db    2
.eh_frame:0000000000007912                 db    0
.eh_frame:0000000000007913                 db    0
.eh_frame:0000000000007914                 db  0Ch
.eh_frame:0000000000007915                 db 0C8h
.eh_frame:0000000000007916                 db 0FFh
.eh_frame:0000000000007917                 db 0FFh
.eh_frame:0000000000007918                 db 0ABh
.eh_frame:0000000000007919                 db    1
.eh_frame:000000000000791A                 db    0
.eh_frame:000000000000791B                 db    0
.eh_frame:000000000000791C                 db    0
.eh_frame:000000000000791D                 db  42h ; B
.eh_frame:000000000000791E                 db  0Eh
.eh_frame:000000000000791F                 db  10h
.eh_frame:0000000000007920                 db  8Fh
.eh_frame:0000000000007921                 db    2
.eh_frame:0000000000007922                 db  42h ; B
.eh_frame:0000000000007923                 db  0Eh
.eh_frame:0000000000007924                 db  18h
.eh_frame:0000000000007925                 db  8Eh
.eh_frame:0000000000007926                 db    3
.eh_frame:0000000000007927                 db  45h ; E
.eh_frame:0000000000007928                 db  0Eh
.eh_frame:0000000000007929                 db  20h
.eh_frame:000000000000792A                 db  8Dh
.eh_frame:000000000000792B                 db    4
.eh_frame:000000000000792C                 db  42h ; B
.eh_frame:000000000000792D                 db  0Eh
.eh_frame:000000000000792E                 db  28h ; (
.eh_frame:000000000000792F                 db  8Ch
.eh_frame:0000000000007930                 db    5
.eh_frame:0000000000007931                 db  44h ; D
.eh_frame:0000000000007932                 db  0Eh
.eh_frame:0000000000007933                 db  30h ; 0
.eh_frame:0000000000007934                 db  86h
.eh_frame:0000000000007935                 db    6
.eh_frame:0000000000007936                 db  41h ; A
.eh_frame:0000000000007937                 db  0Eh
.eh_frame:0000000000007938                 db  38h ; 8
.eh_frame:0000000000007939                 db  83h
.eh_frame:000000000000793A                 db    7
.eh_frame:000000000000793B                 db  47h ; G
.eh_frame:000000000000793C                 db  0Eh
.eh_frame:000000000000793D                 db  60h ; `
.eh_frame:000000000000793E                 db    2
.eh_frame:000000000000793F                 db  99h
.eh_frame:0000000000007940                 db  0Eh
.eh_frame:0000000000007941                 db  68h ; h
.eh_frame:0000000000007942                 db  5Fh ; _
.eh_frame:0000000000007943                 db  0Eh
.eh_frame:0000000000007944                 db  70h ; p
.eh_frame:0000000000007945                 db  46h ; F
.eh_frame:0000000000007946                 db  0Eh
.eh_frame:0000000000007947                 db  78h ; x
.eh_frame:0000000000007948                 db  42h ; B
.eh_frame:0000000000007949                 db  0Eh
.eh_frame:000000000000794A                 db  80h
.eh_frame:000000000000794B                 db    1
.eh_frame:000000000000794C                 db  59h ; Y
.eh_frame:000000000000794D                 db  0Eh
.eh_frame:000000000000794E                 db  60h ; `
.eh_frame:000000000000794F                 db    2
.eh_frame:0000000000007950                 db  40h ; @
.eh_frame:0000000000007951                 db  0Eh
.eh_frame:0000000000007952                 db  68h ; h
.eh_frame:0000000000007953                 db  4Bh ; K
.eh_frame:0000000000007954                 db  0Eh
.eh_frame:0000000000007955                 db  70h ; p
.eh_frame:0000000000007956                 db  43h ; C
.eh_frame:0000000000007957                 db  0Eh
.eh_frame:0000000000007958                 db  78h ; x
.eh_frame:0000000000007959                 db  45h ; E
.eh_frame:000000000000795A                 db  0Eh
.eh_frame:000000000000795B                 db  80h
.eh_frame:000000000000795C                 db    1
.eh_frame:000000000000795D                 db  5Eh ; ^
.eh_frame:000000000000795E                 db  0Eh
.eh_frame:000000000000795F                 db  60h ; `
.eh_frame:0000000000007960                 db  4Ch ; L
.eh_frame:0000000000007961                 db  0Ah
.eh_frame:0000000000007962                 db  0Eh
.eh_frame:0000000000007963                 db  38h ; 8
.eh_frame:0000000000007964                 db  44h ; D
.eh_frame:0000000000007965                 db  0Eh
.eh_frame:0000000000007966                 db  30h ; 0
.eh_frame:0000000000007967                 db  41h ; A
.eh_frame:0000000000007968                 db  0Eh
.eh_frame:0000000000007969                 db  28h ; (
.eh_frame:000000000000796A                 db  42h ; B
.eh_frame:000000000000796B                 db  0Eh
.eh_frame:000000000000796C                 db  20h
.eh_frame:000000000000796D                 db  42h ; B
.eh_frame:000000000000796E                 db  0Eh
.eh_frame:000000000000796F                 db  18h
.eh_frame:0000000000007970                 db  42h ; B
.eh_frame:0000000000007971                 db  0Eh
.eh_frame:0000000000007972                 db  10h
.eh_frame:0000000000007973                 db  42h ; B
.eh_frame:0000000000007974                 db  0Eh
.eh_frame:0000000000007975                 db    8
.eh_frame:0000000000007976                 db  46h ; F
.eh_frame:0000000000007977                 db  0Bh
.eh_frame:0000000000007978                 db  28h ; (
.eh_frame:0000000000007979                 db    0
.eh_frame:000000000000797A                 db    0
.eh_frame:000000000000797B                 db    0
.eh_frame:000000000000797C                 db  44h ; D
.eh_frame:000000000000797D                 db    3
.eh_frame:000000000000797E                 db    0
.eh_frame:000000000000797F                 db    0
.eh_frame:0000000000007980                 db  50h ; P
.eh_frame:0000000000007981                 db 0C9h
.eh_frame:0000000000007982                 db 0FFh
.eh_frame:0000000000007983                 db 0FFh
.eh_frame:0000000000007984                 db  36h ; 6
.eh_frame:0000000000007985                 db    0
.eh_frame:0000000000007986                 db    0
.eh_frame:0000000000007987                 db    0
.eh_frame:0000000000007988                 db    0
.eh_frame:0000000000007989                 db  42h ; B
.eh_frame:000000000000798A                 db  0Eh
.eh_frame:000000000000798B                 db  10h
.eh_frame:000000000000798C                 db  8Ch
.eh_frame:000000000000798D                 db    2
.eh_frame:000000000000798E                 db  41h ; A
.eh_frame:000000000000798F                 db  0Eh
.eh_frame:0000000000007990                 db  18h
.eh_frame:0000000000007991                 db  86h
.eh_frame:0000000000007992                 db    3
.eh_frame:0000000000007993                 db  41h ; A
.eh_frame:0000000000007994                 db  0Eh
.eh_frame:0000000000007995                 db  20h
.eh_frame:0000000000007996                 db  83h
.eh_frame:0000000000007997                 db    4
.eh_frame:0000000000007998                 db  6Eh ; n
.eh_frame:0000000000007999                 db  0Eh
.eh_frame:000000000000799A                 db  18h
.eh_frame:000000000000799B                 db  41h ; A
.eh_frame:000000000000799C                 db  0Eh
.eh_frame:000000000000799D                 db  10h
.eh_frame:000000000000799E                 db  42h ; B
.eh_frame:000000000000799F                 db  0Eh
.eh_frame:00000000000079A0                 db    8
.eh_frame:00000000000079A1                 db    0
.eh_frame:00000000000079A2                 db    0
.eh_frame:00000000000079A3                 db    0
.eh_frame:00000000000079A4                 db  10h
.eh_frame:00000000000079A5                 db    0
.eh_frame:00000000000079A6                 db    0
.eh_frame:00000000000079A7                 db    0
.eh_frame:00000000000079A8                 db  70h ; p
.eh_frame:00000000000079A9                 db    3
.eh_frame:00000000000079AA                 db    0
.eh_frame:00000000000079AB                 db    0
.eh_frame:00000000000079AC                 db  64h ; d
.eh_frame:00000000000079AD                 db 0C9h
.eh_frame:00000000000079AE                 db 0FFh
.eh_frame:00000000000079AF                 db 0FFh
.eh_frame:00000000000079B0                 db  11h
.eh_frame:00000000000079B1                 db    0
.eh_frame:00000000000079B2                 db    0
.eh_frame:00000000000079B3                 db    0
.eh_frame:00000000000079B4                 db    0
.eh_frame:00000000000079B5                 db    0
.eh_frame:00000000000079B6                 db    0
.eh_frame:00000000000079B7                 db    0
.eh_frame:00000000000079B8                 db  10h
.eh_frame:00000000000079B9                 db    0
.eh_frame:00000000000079BA                 db    0
.eh_frame:00000000000079BB                 db    0
.eh_frame:00000000000079BC                 db  84h
.eh_frame:00000000000079BD                 db    3
.eh_frame:00000000000079BE                 db    0
.eh_frame:00000000000079BF                 db    0
.eh_frame:00000000000079C0                 db  70h ; p
.eh_frame:00000000000079C1                 db 0C9h
.eh_frame:00000000000079C2                 db 0FFh
.eh_frame:00000000000079C3                 db 0FFh
.eh_frame:00000000000079C4                 db  11h
.eh_frame:00000000000079C5                 db    0
.eh_frame:00000000000079C6                 db    0
.eh_frame:00000000000079C7                 db    0
.eh_frame:00000000000079C8                 db    0
.eh_frame:00000000000079C9                 db    0
.eh_frame:00000000000079CA                 db    0
.eh_frame:00000000000079CB                 db    0
.eh_frame:00000000000079CC                 db  10h
.eh_frame:00000000000079CD                 db    0
.eh_frame:00000000000079CE                 db    0
.eh_frame:00000000000079CF                 db    0
.eh_frame:00000000000079D0                 db  98h
.eh_frame:00000000000079D1                 db    3
.eh_frame:00000000000079D2                 db    0
.eh_frame:00000000000079D3                 db    0
.eh_frame:00000000000079D4                 db  7Ch ; |
.eh_frame:00000000000079D5                 db 0C9h
.eh_frame:00000000000079D6                 db 0FFh
.eh_frame:00000000000079D7                 db 0FFh
.eh_frame:00000000000079D8                 db  35h ; 5
.eh_frame:00000000000079D9                 db    0
.eh_frame:00000000000079DA                 db    0
.eh_frame:00000000000079DB                 db    0
.eh_frame:00000000000079DC                 db    0
.eh_frame:00000000000079DD                 db    0
.eh_frame:00000000000079DE                 db    0
.eh_frame:00000000000079DF                 db    0
.eh_frame:00000000000079E0                 db  10h
.eh_frame:00000000000079E1                 db    0
.eh_frame:00000000000079E2                 db    0
.eh_frame:00000000000079E3                 db    0
.eh_frame:00000000000079E4                 db 0ACh
.eh_frame:00000000000079E5                 db    3
.eh_frame:00000000000079E6                 db    0
.eh_frame:00000000000079E7                 db    0
.eh_frame:00000000000079E8                 db 0A8h
.eh_frame:00000000000079E9                 db 0C9h
.eh_frame:00000000000079EA                 db 0FFh
.eh_frame:00000000000079EB                 db 0FFh
.eh_frame:00000000000079EC                 db  15h
.eh_frame:00000000000079ED                 db    0
.eh_frame:00000000000079EE                 db    0
.eh_frame:00000000000079EF                 db    0
.eh_frame:00000000000079F0                 db    0
.eh_frame:00000000000079F1                 db    0
.eh_frame:00000000000079F2                 db    0
.eh_frame:00000000000079F3                 db    0
.eh_frame:00000000000079F4                 db  10h
.eh_frame:00000000000079F5                 db    0
.eh_frame:00000000000079F6                 db    0
.eh_frame:00000000000079F7                 db    0
.eh_frame:00000000000079F8                 db 0C0h
.eh_frame:00000000000079F9                 db    3
.eh_frame:00000000000079FA                 db    0
.eh_frame:00000000000079FB                 db    0
.eh_frame:00000000000079FC                 db 0B4h
.eh_frame:00000000000079FD                 db 0C9h
.eh_frame:00000000000079FE                 db 0FFh
.eh_frame:00000000000079FF                 db 0FFh
.eh_frame:0000000000007A00                 db  30h ; 0
.eh_frame:0000000000007A01                 db    0
.eh_frame:0000000000007A02                 db    0
.eh_frame:0000000000007A03                 db    0
.eh_frame:0000000000007A04                 db    0
.eh_frame:0000000000007A05                 db  6Bh ; k
.eh_frame:0000000000007A06                 db  0Eh
.eh_frame:0000000000007A07                 db  10h
.eh_frame:0000000000007A08                 db  50h ; P
.eh_frame:0000000000007A09                 db    0
.eh_frame:0000000000007A0A                 db    0
.eh_frame:0000000000007A0B                 db    0
.eh_frame:0000000000007A0C                 db 0D4h
.eh_frame:0000000000007A0D                 db    3
.eh_frame:0000000000007A0E                 db    0
.eh_frame:0000000000007A0F                 db    0
.eh_frame:0000000000007A10                 db 0D0h
.eh_frame:0000000000007A11                 db 0C9h
.eh_frame:0000000000007A12                 db 0FFh
.eh_frame:0000000000007A13                 db 0FFh
.eh_frame:0000000000007A14                 db  74h ; t
.eh_frame:0000000000007A15                 db    0
.eh_frame:0000000000007A16                 db    0
.eh_frame:0000000000007A17                 db    0
.eh_frame:0000000000007A18                 db    0
.eh_frame:0000000000007A19                 db  42h ; B
.eh_frame:0000000000007A1A                 db  0Eh
.eh_frame:0000000000007A1B                 db  10h
.eh_frame:0000000000007A1C                 db  8Fh
.eh_frame:0000000000007A1D                 db    2
.eh_frame:0000000000007A1E                 db  42h ; B
.eh_frame:0000000000007A1F                 db  0Eh
.eh_frame:0000000000007A20                 db  18h
.eh_frame:0000000000007A21                 db  8Eh
.eh_frame:0000000000007A22                 db    3
.eh_frame:0000000000007A23                 db  49h ; I
.eh_frame:0000000000007A24                 db  0Eh
.eh_frame:0000000000007A25                 db  20h
.eh_frame:0000000000007A26                 db  8Dh
.eh_frame:0000000000007A27                 db    4
.eh_frame:0000000000007A28                 db  42h ; B
.eh_frame:0000000000007A29                 db  0Eh
.eh_frame:0000000000007A2A                 db  28h ; (
.eh_frame:0000000000007A2B                 db  8Ch
.eh_frame:0000000000007A2C                 db    5
.eh_frame:0000000000007A2D                 db  44h ; D
.eh_frame:0000000000007A2E                 db  0Eh
.eh_frame:0000000000007A2F                 db  30h ; 0
.eh_frame:0000000000007A30                 db  86h
.eh_frame:0000000000007A31                 db    6
.eh_frame:0000000000007A32                 db  41h ; A
.eh_frame:0000000000007A33                 db  0Eh
.eh_frame:0000000000007A34                 db  38h ; 8
.eh_frame:0000000000007A35                 db  83h
.eh_frame:0000000000007A36                 db    7
.eh_frame:0000000000007A37                 db  4Dh ; M
.eh_frame:0000000000007A38                 db  0Eh
.eh_frame:0000000000007A39                 db  50h ; P
.eh_frame:0000000000007A3A                 db  5Fh ; _
.eh_frame:0000000000007A3B                 db  0Eh
.eh_frame:0000000000007A3C                 db  58h ; X
.eh_frame:0000000000007A3D                 db  47h ; G
.eh_frame:0000000000007A3E                 db  0Eh
.eh_frame:0000000000007A3F                 db  60h ; `
.eh_frame:0000000000007A40                 db  46h ; F
.eh_frame:0000000000007A41                 db  0Eh
.eh_frame:0000000000007A42                 db  68h ; h
.eh_frame:0000000000007A43                 db  44h ; D
.eh_frame:0000000000007A44                 db  0Eh
.eh_frame:0000000000007A45                 db  70h ; p
.eh_frame:0000000000007A46                 db  58h ; X
.eh_frame:0000000000007A47                 db  0Eh
.eh_frame:0000000000007A48                 db  38h ; 8
.eh_frame:0000000000007A49                 db  41h ; A
.eh_frame:0000000000007A4A                 db  0Eh
.eh_frame:0000000000007A4B                 db  30h ; 0
.eh_frame:0000000000007A4C                 db  41h ; A
.eh_frame:0000000000007A4D                 db  0Eh
.eh_frame:0000000000007A4E                 db  28h ; (
.eh_frame:0000000000007A4F                 db  42h ; B
.eh_frame:0000000000007A50                 db  0Eh
.eh_frame:0000000000007A51                 db  20h
.eh_frame:0000000000007A52                 db  42h ; B
.eh_frame:0000000000007A53                 db  0Eh
.eh_frame:0000000000007A54                 db  18h
.eh_frame:0000000000007A55                 db  42h ; B
.eh_frame:0000000000007A56                 db  0Eh
.eh_frame:0000000000007A57                 db  10h
.eh_frame:0000000000007A58                 db  42h ; B
.eh_frame:0000000000007A59                 db  0Eh
.eh_frame:0000000000007A5A                 db    8
.eh_frame:0000000000007A5B                 db    0
.eh_frame:0000000000007A5C                 db  68h ; h
.eh_frame:0000000000007A5D                 db    0
.eh_frame:0000000000007A5E                 db    0
.eh_frame:0000000000007A5F                 db    0
.eh_frame:0000000000007A60                 db  28h ; (
.eh_frame:0000000000007A61                 db    4
.eh_frame:0000000000007A62                 db    0
.eh_frame:0000000000007A63                 db    0
.eh_frame:0000000000007A64                 db 0FCh
.eh_frame:0000000000007A65                 db 0C9h
.eh_frame:0000000000007A66                 db 0FFh
.eh_frame:0000000000007A67                 db 0FFh
.eh_frame:0000000000007A68                 db 0E3h
.eh_frame:0000000000007A69                 db    0
.eh_frame:0000000000007A6A                 db    0
.eh_frame:0000000000007A6B                 db    0
.eh_frame:0000000000007A6C                 db    0
.eh_frame:0000000000007A6D                 db  42h ; B
.eh_frame:0000000000007A6E                 db  0Eh
.eh_frame:0000000000007A6F                 db  10h
.eh_frame:0000000000007A70                 db  8Fh
.eh_frame:0000000000007A71                 db    2
.eh_frame:0000000000007A72                 db  42h ; B
.eh_frame:0000000000007A73                 db  0Eh
.eh_frame:0000000000007A74                 db  18h
.eh_frame:0000000000007A75                 db  8Eh
.eh_frame:0000000000007A76                 db    3
.eh_frame:0000000000007A77                 db  49h ; I
.eh_frame:0000000000007A78                 db  0Eh
.eh_frame:0000000000007A79                 db  20h
.eh_frame:0000000000007A7A                 db  8Dh
.eh_frame:0000000000007A7B                 db    4
.eh_frame:0000000000007A7C                 db  42h ; B
.eh_frame:0000000000007A7D                 db  0Eh
.eh_frame:0000000000007A7E                 db  28h ; (
.eh_frame:0000000000007A7F                 db  8Ch
.eh_frame:0000000000007A80                 db    5
.eh_frame:0000000000007A81                 db  44h ; D
.eh_frame:0000000000007A82                 db  0Eh
.eh_frame:0000000000007A83                 db  30h ; 0
.eh_frame:0000000000007A84                 db  86h
.eh_frame:0000000000007A85                 db    6
.eh_frame:0000000000007A86                 db  41h ; A
.eh_frame:0000000000007A87                 db  0Eh
.eh_frame:0000000000007A88                 db  38h ; 8
.eh_frame:0000000000007A89                 db  83h
.eh_frame:0000000000007A8A                 db    7
.eh_frame:0000000000007A8B                 db  4Dh ; M
.eh_frame:0000000000007A8C                 db  0Eh
.eh_frame:0000000000007A8D                 db  70h ; p
.eh_frame:0000000000007A8E                 db  65h ; e
.eh_frame:0000000000007A8F                 db  0Eh
.eh_frame:0000000000007A90                 db  78h ; x
.eh_frame:0000000000007A91                 db  4Dh ; M
.eh_frame:0000000000007A92                 db  0Eh
.eh_frame:0000000000007A93                 db  80h
.eh_frame:0000000000007A94                 db    1
.eh_frame:0000000000007A95                 db  46h ; F
.eh_frame:0000000000007A96                 db  0Eh
.eh_frame:0000000000007A97                 db  88h
.eh_frame:0000000000007A98                 db    1
.eh_frame:0000000000007A99                 db  42h ; B
.eh_frame:0000000000007A9A                 db  0Eh
.eh_frame:0000000000007A9B                 db  90h
.eh_frame:0000000000007A9C                 db    1
.eh_frame:0000000000007A9D                 db  5Eh ; ^
.eh_frame:0000000000007A9E                 db  0Eh
.eh_frame:0000000000007A9F                 db  70h ; p
.eh_frame:0000000000007AA0                 db  56h ; V
.eh_frame:0000000000007AA1                 db  0Eh
.eh_frame:0000000000007AA2                 db  78h ; x
.eh_frame:0000000000007AA3                 db  43h ; C
.eh_frame:0000000000007AA4                 db  0Eh
.eh_frame:0000000000007AA5                 db  80h
.eh_frame:0000000000007AA6                 db    1
.eh_frame:0000000000007AA7                 db  43h ; C
.eh_frame:0000000000007AA8                 db  0Eh
.eh_frame:0000000000007AA9                 db  88h
.eh_frame:0000000000007AAA                 db    1
.eh_frame:0000000000007AAB                 db  56h ; V
.eh_frame:0000000000007AAC                 db  0Eh
.eh_frame:0000000000007AAD                 db  90h
.eh_frame:0000000000007AAE                 db    1
.eh_frame:0000000000007AAF                 db  52h ; R
.eh_frame:0000000000007AB0                 db  0Eh
.eh_frame:0000000000007AB1                 db  70h ; p
.eh_frame:0000000000007AB2                 db  5Bh ; [
.eh_frame:0000000000007AB3                 db  0Eh
.eh_frame:0000000000007AB4                 db  38h ; 8
.eh_frame:0000000000007AB5                 db  41h ; A
.eh_frame:0000000000007AB6                 db  0Eh
.eh_frame:0000000000007AB7                 db  30h ; 0
.eh_frame:0000000000007AB8                 db  41h ; A
.eh_frame:0000000000007AB9                 db  0Eh
.eh_frame:0000000000007ABA                 db  28h ; (
.eh_frame:0000000000007ABB                 db  42h ; B
.eh_frame:0000000000007ABC                 db  0Eh
.eh_frame:0000000000007ABD                 db  20h
.eh_frame:0000000000007ABE                 db  42h ; B
.eh_frame:0000000000007ABF                 db  0Eh
.eh_frame:0000000000007AC0                 db  18h
.eh_frame:0000000000007AC1                 db  42h ; B
.eh_frame:0000000000007AC2                 db  0Eh
.eh_frame:0000000000007AC3                 db  10h
.eh_frame:0000000000007AC4                 db  42h ; B
.eh_frame:0000000000007AC5                 db  0Eh
.eh_frame:0000000000007AC6                 db    8
.eh_frame:0000000000007AC7                 db    0
.eh_frame:0000000000007AC8                 db  10h
.eh_frame:0000000000007AC9                 db    0
.eh_frame:0000000000007ACA                 db    0
.eh_frame:0000000000007ACB                 db    0
.eh_frame:0000000000007ACC                 db  94h
.eh_frame:0000000000007ACD                 db    4
.eh_frame:0000000000007ACE                 db    0
.eh_frame:0000000000007ACF                 db    0
.eh_frame:0000000000007AD0                 db  80h
.eh_frame:0000000000007AD1                 db 0CAh
.eh_frame:0000000000007AD2                 db 0FFh
.eh_frame:0000000000007AD3                 db 0FFh
.eh_frame:0000000000007AD4                 db  0Ah
.eh_frame:0000000000007AD5                 db    0
.eh_frame:0000000000007AD6                 db    0
.eh_frame:0000000000007AD7                 db    0
.eh_frame:0000000000007AD8                 db    0
.eh_frame:0000000000007AD9                 db    0
.eh_frame:0000000000007ADA                 db    0
.eh_frame:0000000000007ADB                 db    0
.eh_frame:0000000000007ADC                 db  28h ; (
.eh_frame:0000000000007ADD                 db    0
.eh_frame:0000000000007ADE                 db    0
.eh_frame:0000000000007ADF                 db    0
.eh_frame:0000000000007AE0                 db 0A8h
.eh_frame:0000000000007AE1                 db    4
.eh_frame:0000000000007AE2                 db    0
.eh_frame:0000000000007AE3                 db    0
.eh_frame:0000000000007AE4                 db  7Ch ; |
.eh_frame:0000000000007AE5                 db 0CAh
.eh_frame:0000000000007AE6                 db 0FFh
.eh_frame:0000000000007AE7                 db 0FFh
.eh_frame:0000000000007AE8                 db  93h
.eh_frame:0000000000007AE9                 db    0
.eh_frame:0000000000007AEA                 db    0
.eh_frame:0000000000007AEB                 db    0
.eh_frame:0000000000007AEC                 db    0
.eh_frame:0000000000007AED                 db  48h ; H
.eh_frame:0000000000007AEE                 db  0Eh
.eh_frame:0000000000007AEF                 db  10h
.eh_frame:0000000000007AF0                 db  8Ch
.eh_frame:0000000000007AF1                 db    2
.eh_frame:0000000000007AF2                 db  48h ; H
.eh_frame:0000000000007AF3                 db  0Eh
.eh_frame:0000000000007AF4                 db  18h
.eh_frame:0000000000007AF5                 db  86h
.eh_frame:0000000000007AF6                 db    3
.eh_frame:0000000000007AF7                 db  41h ; A
.eh_frame:0000000000007AF8                 db  0Eh
.eh_frame:0000000000007AF9                 db  20h
.eh_frame:0000000000007AFA                 db  83h
.eh_frame:0000000000007AFB                 db    4
.eh_frame:0000000000007AFC                 db    2
.eh_frame:0000000000007AFD                 db  74h ; t
.eh_frame:0000000000007AFE                 db  0Eh
.eh_frame:0000000000007AFF                 db  18h
.eh_frame:0000000000007B00                 db  4Bh ; K
.eh_frame:0000000000007B01                 db  0Eh
.eh_frame:0000000000007B02                 db  10h
.eh_frame:0000000000007B03                 db  42h ; B
.eh_frame:0000000000007B04                 db  0Eh
.eh_frame:0000000000007B05                 db    8
.eh_frame:0000000000007B06                 db    0
.eh_frame:0000000000007B07                 db    0
.eh_frame:0000000000007B08                 db  10h
.eh_frame:0000000000007B09                 db    0
.eh_frame:0000000000007B0A                 db    0
.eh_frame:0000000000007B0B                 db    0
.eh_frame:0000000000007B0C                 db 0D4h
.eh_frame:0000000000007B0D                 db    4
.eh_frame:0000000000007B0E                 db    0
.eh_frame:0000000000007B0F                 db    0
.eh_frame:0000000000007B10                 db 0F0h
.eh_frame:0000000000007B11                 db 0CAh
.eh_frame:0000000000007B12                 db 0FFh
.eh_frame:0000000000007B13                 db 0FFh
.eh_frame:0000000000007B14                 db  13h
.eh_frame:0000000000007B15                 db    0
.eh_frame:0000000000007B16                 db    0
.eh_frame:0000000000007B17                 db    0
.eh_frame:0000000000007B18                 db    0
.eh_frame:0000000000007B19                 db    0
.eh_frame:0000000000007B1A                 db    0
.eh_frame:0000000000007B1B                 db    0
.eh_frame:0000000000007B1C                 db  10h
.eh_frame:0000000000007B1D                 db    0
.eh_frame:0000000000007B1E                 db    0
.eh_frame:0000000000007B1F                 db    0
.eh_frame:0000000000007B20                 db 0E8h
.eh_frame:0000000000007B21                 db    4
.eh_frame:0000000000007B22                 db    0
.eh_frame:0000000000007B23                 db    0
.eh_frame:0000000000007B24                 db 0FCh
.eh_frame:0000000000007B25                 db 0CAh
.eh_frame:0000000000007B26                 db 0FFh
.eh_frame:0000000000007B27                 db 0FFh
.eh_frame:0000000000007B28                 db  0Ch
.eh_frame:0000000000007B29                 db    0
.eh_frame:0000000000007B2A                 db    0
.eh_frame:0000000000007B2B                 db    0
.eh_frame:0000000000007B2C                 db    0
.eh_frame:0000000000007B2D                 db    0
.eh_frame:0000000000007B2E                 db    0
.eh_frame:0000000000007B2F                 db    0
.eh_frame:0000000000007B30                 db  10h
.eh_frame:0000000000007B31                 db    0
.eh_frame:0000000000007B32                 db    0
.eh_frame:0000000000007B33                 db    0
.eh_frame:0000000000007B34                 db 0FCh
.eh_frame:0000000000007B35                 db    4
.eh_frame:0000000000007B36                 db    0
.eh_frame:0000000000007B37                 db    0
.eh_frame:0000000000007B38                 db 0F8h
.eh_frame:0000000000007B39                 db 0CAh
.eh_frame:0000000000007B3A                 db 0FFh
.eh_frame:0000000000007B3B                 db 0FFh
.eh_frame:0000000000007B3C                 db  18h
.eh_frame:0000000000007B3D                 db    0
.eh_frame:0000000000007B3E                 db    0
.eh_frame:0000000000007B3F                 db    0
.eh_frame:0000000000007B40                 db    0
.eh_frame:0000000000007B41                 db    0
.eh_frame:0000000000007B42                 db    0
.eh_frame:0000000000007B43                 db    0
.eh_frame:0000000000007B44                 db  10h
.eh_frame:0000000000007B45                 db    0
.eh_frame:0000000000007B46                 db    0
.eh_frame:0000000000007B47                 db    0
.eh_frame:0000000000007B48                 db  10h
.eh_frame:0000000000007B49                 db    5
.eh_frame:0000000000007B4A                 db    0
.eh_frame:0000000000007B4B                 db    0
.eh_frame:0000000000007B4C                 db    4
.eh_frame:0000000000007B4D                 db 0CBh
.eh_frame:0000000000007B4E                 db 0FFh
.eh_frame:0000000000007B4F                 db 0FFh
.eh_frame:0000000000007B50                 db  14h
.eh_frame:0000000000007B51                 db    0
.eh_frame:0000000000007B52                 db    0
.eh_frame:0000000000007B53                 db    0
.eh_frame:0000000000007B54                 db    0
.eh_frame:0000000000007B55                 db    0
.eh_frame:0000000000007B56                 db    0
.eh_frame:0000000000007B57                 db    0
.eh_frame:0000000000007B58                 db  18h
.eh_frame:0000000000007B59                 db    0
.eh_frame:0000000000007B5A                 db    0
.eh_frame:0000000000007B5B                 db    0
.eh_frame:0000000000007B5C                 db  24h ; $
.eh_frame:0000000000007B5D                 db    5
.eh_frame:0000000000007B5E                 db    0
.eh_frame:0000000000007B5F                 db    0
.eh_frame:0000000000007B60                 db  10h
.eh_frame:0000000000007B61                 db 0CBh
.eh_frame:0000000000007B62                 db 0FFh
.eh_frame:0000000000007B63                 db 0FFh
.eh_frame:0000000000007B64                 db  8Eh
.eh_frame:0000000000007B65                 db    0
.eh_frame:0000000000007B66                 db    0
.eh_frame:0000000000007B67                 db    0
.eh_frame:0000000000007B68                 db    0
.eh_frame:0000000000007B69                 db  44h ; D
.eh_frame:0000000000007B6A                 db  0Eh
.eh_frame:0000000000007B6B                 db  50h ; P
.eh_frame:0000000000007B6C                 db    2
.eh_frame:0000000000007B6D                 db  7Fh ; 
.eh_frame:0000000000007B6E                 db  0Ah
.eh_frame:0000000000007B6F                 db  0Eh
.eh_frame:0000000000007B70                 db    8
.eh_frame:0000000000007B71                 db  41h ; A
.eh_frame:0000000000007B72                 db  0Bh
.eh_frame:0000000000007B73                 db    0
.eh_frame:0000000000007B74                 db  18h
.eh_frame:0000000000007B75                 db    0
.eh_frame:0000000000007B76                 db    0
.eh_frame:0000000000007B77                 db    0
.eh_frame:0000000000007B78                 db  40h ; @
.eh_frame:0000000000007B79                 db    5
.eh_frame:0000000000007B7A                 db    0
.eh_frame:0000000000007B7B                 db    0
.eh_frame:0000000000007B7C                 db  84h
.eh_frame:0000000000007B7D                 db 0CBh
.eh_frame:0000000000007B7E                 db 0FFh
.eh_frame:0000000000007B7F                 db 0FFh
.eh_frame:0000000000007B80                 db  8Ah
.eh_frame:0000000000007B81                 db    0
.eh_frame:0000000000007B82                 db    0
.eh_frame:0000000000007B83                 db    0
.eh_frame:0000000000007B84                 db    0
.eh_frame:0000000000007B85                 db  44h ; D
.eh_frame:0000000000007B86                 db  0Eh
.eh_frame:0000000000007B87                 db  50h ; P
.eh_frame:0000000000007B88                 db    2
.eh_frame:0000000000007B89                 db  7Bh ; {
.eh_frame:0000000000007B8A                 db  0Ah
.eh_frame:0000000000007B8B                 db  0Eh
.eh_frame:0000000000007B8C                 db    8
.eh_frame:0000000000007B8D                 db  41h ; A
.eh_frame:0000000000007B8E                 db  0Bh
.eh_frame:0000000000007B8F                 db    0
.eh_frame:0000000000007B90                 db  10h
.eh_frame:0000000000007B91                 db    0
.eh_frame:0000000000007B92                 db    0
.eh_frame:0000000000007B93                 db    0
.eh_frame:0000000000007B94                 db  5Ch ; \
.eh_frame:0000000000007B95                 db    5
.eh_frame:0000000000007B96                 db    0
.eh_frame:0000000000007B97                 db    0
.eh_frame:0000000000007B98                 db 0F8h
.eh_frame:0000000000007B99                 db 0CBh
.eh_frame:0000000000007B9A                 db 0FFh
.eh_frame:0000000000007B9B                 db 0FFh
.eh_frame:0000000000007B9C                 db  0Ch
.eh_frame:0000000000007B9D                 db    0
.eh_frame:0000000000007B9E                 db    0
.eh_frame:0000000000007B9F                 db    0
.eh_frame:0000000000007BA0                 db    0
.eh_frame:0000000000007BA1                 db    0
.eh_frame:0000000000007BA2                 db    0
.eh_frame:0000000000007BA3                 db    0
.eh_frame:0000000000007BA4                 db  10h
.eh_frame:0000000000007BA5                 db    0
.eh_frame:0000000000007BA6                 db    0
.eh_frame:0000000000007BA7                 db    0
.eh_frame:0000000000007BA8                 db  70h ; p
.eh_frame:0000000000007BA9                 db    5
.eh_frame:0000000000007BAA                 db    0
.eh_frame:0000000000007BAB                 db    0
.eh_frame:0000000000007BAC                 db 0F4h
.eh_frame:0000000000007BAD                 db 0CBh
.eh_frame:0000000000007BAE                 db 0FFh
.eh_frame:0000000000007BAF                 db 0FFh
.eh_frame:0000000000007BB0                 db  0Fh
.eh_frame:0000000000007BB1                 db    0
.eh_frame:0000000000007BB2                 db    0
.eh_frame:0000000000007BB3                 db    0
.eh_frame:0000000000007BB4                 db    0
.eh_frame:0000000000007BB5                 db    0
.eh_frame:0000000000007BB6                 db    0
.eh_frame:0000000000007BB7                 db    0
.eh_frame:0000000000007BB8                 db  18h
.eh_frame:0000000000007BB9                 db    0
.eh_frame:0000000000007BBA                 db    0
.eh_frame:0000000000007BBB                 db    0
.eh_frame:0000000000007BBC                 db  84h
.eh_frame:0000000000007BBD                 db    5
.eh_frame:0000000000007BBE                 db    0
.eh_frame:0000000000007BBF                 db    0
.eh_frame:0000000000007BC0                 db 0F0h
.eh_frame:0000000000007BC1                 db 0CBh
.eh_frame:0000000000007BC2                 db 0FFh
.eh_frame:0000000000007BC3                 db 0FFh
.eh_frame:0000000000007BC4                 db  98h
.eh_frame:0000000000007BC5                 db    0
.eh_frame:0000000000007BC6                 db    0
.eh_frame:0000000000007BC7                 db    0
.eh_frame:0000000000007BC8                 db    0
.eh_frame:0000000000007BC9                 db  44h ; D
.eh_frame:0000000000007BCA                 db  0Eh
.eh_frame:0000000000007BCB                 db  50h ; P
.eh_frame:0000000000007BCC                 db    2
.eh_frame:0000000000007BCD                 db  8Eh
.eh_frame:0000000000007BCE                 db  0Ah
.eh_frame:0000000000007BCF                 db  0Eh
.eh_frame:0000000000007BD0                 db    8
.eh_frame:0000000000007BD1                 db  41h ; A
.eh_frame:0000000000007BD2                 db  0Bh
.eh_frame:0000000000007BD3                 db    0
.eh_frame:0000000000007BD4                 db  10h
.eh_frame:0000000000007BD5                 db    0
.eh_frame:0000000000007BD6                 db    0
.eh_frame:0000000000007BD7                 db    0
.eh_frame:0000000000007BD8                 db 0A0h
.eh_frame:0000000000007BD9                 db    5
.eh_frame:0000000000007BDA                 db    0
.eh_frame:0000000000007BDB                 db    0
.eh_frame:0000000000007BDC                 db  74h ; t
.eh_frame:0000000000007BDD                 db 0CCh
.eh_frame:0000000000007BDE                 db 0FFh
.eh_frame:0000000000007BDF                 db 0FFh
.eh_frame:0000000000007BE0                 db  10h
.eh_frame:0000000000007BE1                 db    0
.eh_frame:0000000000007BE2                 db    0
.eh_frame:0000000000007BE3                 db    0
.eh_frame:0000000000007BE4                 db    0
.eh_frame:0000000000007BE5                 db    0
.eh_frame:0000000000007BE6                 db    0
.eh_frame:0000000000007BE7                 db    0
.eh_frame:0000000000007BE8                 db  10h
.eh_frame:0000000000007BE9                 db    0
.eh_frame:0000000000007BEA                 db    0
.eh_frame:0000000000007BEB                 db    0
.eh_frame:0000000000007BEC                 db 0B4h
.eh_frame:0000000000007BED                 db    5
.eh_frame:0000000000007BEE                 db    0
.eh_frame:0000000000007BEF                 db    0
.eh_frame:0000000000007BF0                 db  70h ; p
.eh_frame:0000000000007BF1                 db 0CCh
.eh_frame:0000000000007BF2                 db 0FFh
.eh_frame:0000000000007BF3                 db 0FFh
.eh_frame:0000000000007BF4                 db  11h
.eh_frame:0000000000007BF5                 db    0
.eh_frame:0000000000007BF6                 db    0
.eh_frame:0000000000007BF7                 db    0
.eh_frame:0000000000007BF8                 db    0
.eh_frame:0000000000007BF9                 db    0
.eh_frame:0000000000007BFA                 db    0
.eh_frame:0000000000007BFB                 db    0
.eh_frame:0000000000007BFC                 db  10h
.eh_frame:0000000000007BFD                 db    0
.eh_frame:0000000000007BFE                 db    0
.eh_frame:0000000000007BFF                 db    0
.eh_frame:0000000000007C00                 db 0C8h
.eh_frame:0000000000007C01                 db    5
.eh_frame:0000000000007C02                 db    0
.eh_frame:0000000000007C03                 db    0
.eh_frame:0000000000007C04                 db  7Ch ; |
.eh_frame:0000000000007C05                 db 0CCh
.eh_frame:0000000000007C06                 db 0FFh
.eh_frame:0000000000007C07                 db 0FFh
.eh_frame:0000000000007C08                 db  0Ah
.eh_frame:0000000000007C09                 db    0
.eh_frame:0000000000007C0A                 db    0
.eh_frame:0000000000007C0B                 db    0
.eh_frame:0000000000007C0C                 db    0
.eh_frame:0000000000007C0D                 db    0
.eh_frame:0000000000007C0E                 db    0
.eh_frame:0000000000007C0F                 db    0
.eh_frame:0000000000007C10                 db  18h
.eh_frame:0000000000007C11                 db    0
.eh_frame:0000000000007C12                 db    0
.eh_frame:0000000000007C13                 db    0
.eh_frame:0000000000007C14                 db 0DCh
.eh_frame:0000000000007C15                 db    5
.eh_frame:0000000000007C16                 db    0
.eh_frame:0000000000007C17                 db    0
.eh_frame:0000000000007C18                 db  78h ; x
.eh_frame:0000000000007C19                 db 0CCh
.eh_frame:0000000000007C1A                 db 0FFh
.eh_frame:0000000000007C1B                 db 0FFh
.eh_frame:0000000000007C1C                 db  8Eh
.eh_frame:0000000000007C1D                 db    0
.eh_frame:0000000000007C1E                 db    0
.eh_frame:0000000000007C1F                 db    0
.eh_frame:0000000000007C20                 db    0
.eh_frame:0000000000007C21                 db  44h ; D
.eh_frame:0000000000007C22                 db  0Eh
.eh_frame:0000000000007C23                 db  50h ; P
.eh_frame:0000000000007C24                 db    2
.eh_frame:0000000000007C25                 db  7Fh ; 
.eh_frame:0000000000007C26                 db  0Ah
.eh_frame:0000000000007C27                 db  0Eh
.eh_frame:0000000000007C28                 db    8
.eh_frame:0000000000007C29                 db  41h ; A
.eh_frame:0000000000007C2A                 db  0Bh
.eh_frame:0000000000007C2B                 db    0
.eh_frame:0000000000007C2C                 db  18h
.eh_frame:0000000000007C2D                 db    0
.eh_frame:0000000000007C2E                 db    0
.eh_frame:0000000000007C2F                 db    0
.eh_frame:0000000000007C30                 db 0F8h
.eh_frame:0000000000007C31                 db    5
.eh_frame:0000000000007C32                 db    0
.eh_frame:0000000000007C33                 db    0
.eh_frame:0000000000007C34                 db 0ECh
.eh_frame:0000000000007C35                 db 0CCh
.eh_frame:0000000000007C36                 db 0FFh
.eh_frame:0000000000007C37                 db 0FFh
.eh_frame:0000000000007C38                 db  91h
.eh_frame:0000000000007C39                 db    0
.eh_frame:0000000000007C3A                 db    0
.eh_frame:0000000000007C3B                 db    0
.eh_frame:0000000000007C3C                 db    0
.eh_frame:0000000000007C3D                 db  44h ; D
.eh_frame:0000000000007C3E                 db  0Eh
.eh_frame:0000000000007C3F                 db  50h ; P
.eh_frame:0000000000007C40                 db    2
.eh_frame:0000000000007C41                 db  82h
.eh_frame:0000000000007C42                 db  0Ah
.eh_frame:0000000000007C43                 db  0Eh
.eh_frame:0000000000007C44                 db    8
.eh_frame:0000000000007C45                 db  41h ; A
.eh_frame:0000000000007C46                 db  0Bh
.eh_frame:0000000000007C47                 db    0
.eh_frame:0000000000007C48                 db  10h
.eh_frame:0000000000007C49                 db    0
.eh_frame:0000000000007C4A                 db    0
.eh_frame:0000000000007C4B                 db    0
.eh_frame:0000000000007C4C                 db  14h
.eh_frame:0000000000007C4D                 db    6
.eh_frame:0000000000007C4E                 db    0
.eh_frame:0000000000007C4F                 db    0
.eh_frame:0000000000007C50                 db  70h ; p
.eh_frame:0000000000007C51                 db 0CDh
.eh_frame:0000000000007C52                 db 0FFh
.eh_frame:0000000000007C53                 db 0FFh
.eh_frame:0000000000007C54                 db  0Ch
.eh_frame:0000000000007C55                 db    0
.eh_frame:0000000000007C56                 db    0
.eh_frame:0000000000007C57                 db    0
.eh_frame:0000000000007C58                 db    0
.eh_frame:0000000000007C59                 db    0
.eh_frame:0000000000007C5A                 db    0
.eh_frame:0000000000007C5B                 db    0
.eh_frame:0000000000007C5C                 db  10h
.eh_frame:0000000000007C5D                 db    0
.eh_frame:0000000000007C5E                 db    0
.eh_frame:0000000000007C5F                 db    0
.eh_frame:0000000000007C60                 db  28h ; (
.eh_frame:0000000000007C61                 db    6
.eh_frame:0000000000007C62                 db    0
.eh_frame:0000000000007C63                 db    0
.eh_frame:0000000000007C64                 db  6Ch ; l
.eh_frame:0000000000007C65                 db 0CDh
.eh_frame:0000000000007C66                 db 0FFh
.eh_frame:0000000000007C67                 db 0FFh
.eh_frame:0000000000007C68                 db  17h
.eh_frame:0000000000007C69                 db    0
.eh_frame:0000000000007C6A                 db    0
.eh_frame:0000000000007C6B                 db    0
.eh_frame:0000000000007C6C                 db    0
.eh_frame:0000000000007C6D                 db    0
.eh_frame:0000000000007C6E                 db    0
.eh_frame:0000000000007C6F                 db    0
.eh_frame:0000000000007C70                 db  10h
.eh_frame:0000000000007C71                 db    0
.eh_frame:0000000000007C72                 db    0
.eh_frame:0000000000007C73                 db    0
.eh_frame:0000000000007C74                 db  3Ch ; <
.eh_frame:0000000000007C75                 db    6
.eh_frame:0000000000007C76                 db    0
.eh_frame:0000000000007C77                 db    0
.eh_frame:0000000000007C78                 db  78h ; x
.eh_frame:0000000000007C79                 db 0CDh
.eh_frame:0000000000007C7A                 db 0FFh
.eh_frame:0000000000007C7B                 db 0FFh
.eh_frame:0000000000007C7C                 db  13h
.eh_frame:0000000000007C7D                 db    0
.eh_frame:0000000000007C7E                 db    0
.eh_frame:0000000000007C7F                 db    0
.eh_frame:0000000000007C80                 db    0
.eh_frame:0000000000007C81                 db    0
.eh_frame:0000000000007C82                 db    0
.eh_frame:0000000000007C83                 db    0
.eh_frame:0000000000007C84                 db  10h
.eh_frame:0000000000007C85                 db    0
.eh_frame:0000000000007C86                 db    0
.eh_frame:0000000000007C87                 db    0
.eh_frame:0000000000007C88                 db  50h ; P
.eh_frame:0000000000007C89                 db    6
.eh_frame:0000000000007C8A                 db    0
.eh_frame:0000000000007C8B                 db    0
.eh_frame:0000000000007C8C                 db  84h
.eh_frame:0000000000007C8D                 db 0CDh
.eh_frame:0000000000007C8E                 db 0FFh
.eh_frame:0000000000007C8F                 db 0FFh
.eh_frame:0000000000007C90                 db  0Ch
.eh_frame:0000000000007C91                 db    0
.eh_frame:0000000000007C92                 db    0
.eh_frame:0000000000007C93                 db    0
.eh_frame:0000000000007C94                 db    0
.eh_frame:0000000000007C95                 db    0
.eh_frame:0000000000007C96                 db    0
.eh_frame:0000000000007C97                 db    0
.eh_frame:0000000000007C98                 db  10h
.eh_frame:0000000000007C99                 db    0
.eh_frame:0000000000007C9A                 db    0
.eh_frame:0000000000007C9B                 db    0
.eh_frame:0000000000007C9C                 db  64h ; d
.eh_frame:0000000000007C9D                 db    6
.eh_frame:0000000000007C9E                 db    0
.eh_frame:0000000000007C9F                 db    0
.eh_frame:0000000000007CA0                 db  80h
.eh_frame:0000000000007CA1                 db 0CDh
.eh_frame:0000000000007CA2                 db 0FFh
.eh_frame:0000000000007CA3                 db 0FFh
.eh_frame:0000000000007CA4                 db  14h
.eh_frame:0000000000007CA5                 db    0
.eh_frame:0000000000007CA6                 db    0
.eh_frame:0000000000007CA7                 db    0
.eh_frame:0000000000007CA8                 db    0
.eh_frame:0000000000007CA9                 db    0
.eh_frame:0000000000007CAA                 db    0
.eh_frame:0000000000007CAB                 db    0
.eh_frame:0000000000007CAC                 db  10h
.eh_frame:0000000000007CAD                 db    0
.eh_frame:0000000000007CAE                 db    0
.eh_frame:0000000000007CAF                 db    0
.eh_frame:0000000000007CB0                 db  78h ; x
.eh_frame:0000000000007CB1                 db    6
.eh_frame:0000000000007CB2                 db    0
.eh_frame:0000000000007CB3                 db    0
.eh_frame:0000000000007CB4                 db  8Ch
.eh_frame:0000000000007CB5                 db 0CDh
.eh_frame:0000000000007CB6                 db 0FFh
.eh_frame:0000000000007CB7                 db 0FFh
.eh_frame:0000000000007CB8                 db  13h
.eh_frame:0000000000007CB9                 db    0
.eh_frame:0000000000007CBA                 db    0
.eh_frame:0000000000007CBB                 db    0
.eh_frame:0000000000007CBC                 db    0
.eh_frame:0000000000007CBD                 db    0
.eh_frame:0000000000007CBE                 db    0
.eh_frame:0000000000007CBF                 db    0
.eh_frame:0000000000007CC0                 db  14h
.eh_frame:0000000000007CC1                 db    0
.eh_frame:0000000000007CC2                 db    0
.eh_frame:0000000000007CC3                 db    0
.eh_frame:0000000000007CC4                 db  8Ch
.eh_frame:0000000000007CC5                 db    6
.eh_frame:0000000000007CC6                 db    0
.eh_frame:0000000000007CC7                 db    0
.eh_frame:0000000000007CC8                 db  98h
.eh_frame:0000000000007CC9                 db 0CDh
.eh_frame:0000000000007CCA                 db 0FFh
.eh_frame:0000000000007CCB                 db 0FFh
.eh_frame:0000000000007CCC                 db  18h
.eh_frame:0000000000007CCD                 db    0
.eh_frame:0000000000007CCE                 db    0
.eh_frame:0000000000007CCF                 db    0
.eh_frame:0000000000007CD0                 db    0
.eh_frame:0000000000007CD1                 db    0
.eh_frame:0000000000007CD2                 db    0
.eh_frame:0000000000007CD3                 db    0
.eh_frame:0000000000007CD4                 db    0
.eh_frame:0000000000007CD5                 db    0
.eh_frame:0000000000007CD6                 db    0
.eh_frame:0000000000007CD7                 db    0
.eh_frame:0000000000007CD8                 db  4Ch ; L
.eh_frame:0000000000007CD9                 db    0
.eh_frame:0000000000007CDA                 db    0
.eh_frame:0000000000007CDB                 db    0
.eh_frame:0000000000007CDC                 db 0A4h
.eh_frame:0000000000007CDD                 db    6
.eh_frame:0000000000007CDE                 db    0
.eh_frame:0000000000007CDF                 db    0
.eh_frame:0000000000007CE0                 db 0A0h
.eh_frame:0000000000007CE1                 db 0CDh
.eh_frame:0000000000007CE2                 db 0FFh
.eh_frame:0000000000007CE3                 db 0FFh
.eh_frame:0000000000007CE4                 db 0C9h
.eh_frame:0000000000007CE5                 db    3
.eh_frame:0000000000007CE6                 db    0
.eh_frame:0000000000007CE7                 db    0
.eh_frame:0000000000007CE8                 db    0
.eh_frame:0000000000007CE9                 db  42h ; B
.eh_frame:0000000000007CEA                 db  0Eh
.eh_frame:0000000000007CEB                 db  10h
.eh_frame:0000000000007CEC                 db  8Fh
.eh_frame:0000000000007CED                 db    2
.eh_frame:0000000000007CEE                 db  42h ; B
.eh_frame:0000000000007CEF                 db  0Eh
.eh_frame:0000000000007CF0                 db  18h
.eh_frame:0000000000007CF1                 db  8Eh
.eh_frame:0000000000007CF2                 db    3
.eh_frame:0000000000007CF3                 db  45h ; E
.eh_frame:0000000000007CF4                 db  0Eh
.eh_frame:0000000000007CF5                 db  20h
.eh_frame:0000000000007CF6                 db  8Dh
.eh_frame:0000000000007CF7                 db    4
.eh_frame:0000000000007CF8                 db  42h ; B
.eh_frame:0000000000007CF9                 db  0Eh
.eh_frame:0000000000007CFA                 db  28h ; (
.eh_frame:0000000000007CFB                 db  8Ch
.eh_frame:0000000000007CFC                 db    5
.eh_frame:0000000000007CFD                 db  44h ; D
.eh_frame:0000000000007CFE                 db  0Eh
.eh_frame:0000000000007CFF                 db  30h ; 0
.eh_frame:0000000000007D00                 db  86h
.eh_frame:0000000000007D01                 db    6
.eh_frame:0000000000007D02                 db  41h ; A
.eh_frame:0000000000007D03                 db  0Eh
.eh_frame:0000000000007D04                 db  38h ; 8
.eh_frame:0000000000007D05                 db  83h
.eh_frame:0000000000007D06                 db    7
.eh_frame:0000000000007D07                 db  50h ; P
.eh_frame:0000000000007D08                 db  0Eh
.eh_frame:0000000000007D09                 db  90h
.eh_frame:0000000000007D0A                 db    1
.eh_frame:0000000000007D0B                 db    3
.eh_frame:0000000000007D0C                 db  10h
.eh_frame:0000000000007D0D                 db    1
.eh_frame:0000000000007D0E                 db  0Ah
.eh_frame:0000000000007D0F                 db  0Eh
.eh_frame:0000000000007D10                 db  38h ; 8
.eh_frame:0000000000007D11                 db  41h ; A
.eh_frame:0000000000007D12                 db  0Eh
.eh_frame:0000000000007D13                 db  30h ; 0
.eh_frame:0000000000007D14                 db  41h ; A
.eh_frame:0000000000007D15                 db  0Eh
.eh_frame:0000000000007D16                 db  28h ; (
.eh_frame:0000000000007D17                 db  42h ; B
.eh_frame:0000000000007D18                 db  0Eh
.eh_frame:0000000000007D19                 db  20h
.eh_frame:0000000000007D1A                 db  42h ; B
.eh_frame:0000000000007D1B                 db  0Eh
.eh_frame:0000000000007D1C                 db  18h
.eh_frame:0000000000007D1D                 db  42h ; B
.eh_frame:0000000000007D1E                 db  0Eh
.eh_frame:0000000000007D1F                 db  10h
.eh_frame:0000000000007D20                 db  42h ; B
.eh_frame:0000000000007D21                 db  0Eh
.eh_frame:0000000000007D22                 db    8
.eh_frame:0000000000007D23                 db  46h ; F
.eh_frame:0000000000007D24                 db  0Bh
.eh_frame:0000000000007D25                 db    0
.eh_frame:0000000000007D26                 db    0
.eh_frame:0000000000007D27                 db    0
.eh_frame:0000000000007D28                 db  5Ch ; \
.eh_frame:0000000000007D29                 db    0
.eh_frame:0000000000007D2A                 db    0
.eh_frame:0000000000007D2B                 db    0
.eh_frame:0000000000007D2C                 db 0F4h
.eh_frame:0000000000007D2D                 db    6
.eh_frame:0000000000007D2E                 db    0
.eh_frame:0000000000007D2F                 db    0
.eh_frame:0000000000007D30                 db  20h
.eh_frame:0000000000007D31                 db 0D1h
.eh_frame:0000000000007D32                 db 0FFh
.eh_frame:0000000000007D33                 db 0FFh
.eh_frame:0000000000007D34                 db 0CDh
.eh_frame:0000000000007D35                 db    0
.eh_frame:0000000000007D36                 db    0
.eh_frame:0000000000007D37                 db    0
.eh_frame:0000000000007D38                 db    0
.eh_frame:0000000000007D39                 db  4Bh ; K
.eh_frame:0000000000007D3A                 db  0Eh
.eh_frame:0000000000007D3B                 db  10h
.eh_frame:0000000000007D3C                 db  8Fh
.eh_frame:0000000000007D3D                 db    2
.eh_frame:0000000000007D3E                 db  42h ; B
.eh_frame:0000000000007D3F                 db  0Eh
.eh_frame:0000000000007D40                 db  18h
.eh_frame:0000000000007D41                 db  8Eh
.eh_frame:0000000000007D42                 db    3
.eh_frame:0000000000007D43                 db  45h ; E
.eh_frame:0000000000007D44                 db  0Eh
.eh_frame:0000000000007D45                 db  20h
.eh_frame:0000000000007D46                 db  8Dh
.eh_frame:0000000000007D47                 db    4
.eh_frame:0000000000007D48                 db  42h ; B
.eh_frame:0000000000007D49                 db  0Eh
.eh_frame:0000000000007D4A                 db  28h ; (
.eh_frame:0000000000007D4B                 db  8Ch
.eh_frame:0000000000007D4C                 db    5
.eh_frame:0000000000007D4D                 db  44h ; D
.eh_frame:0000000000007D4E                 db  0Eh
.eh_frame:0000000000007D4F                 db  30h ; 0
.eh_frame:0000000000007D50                 db  86h
.eh_frame:0000000000007D51                 db    6
.eh_frame:0000000000007D52                 db  41h ; A
.eh_frame:0000000000007D53                 db  0Eh
.eh_frame:0000000000007D54                 db  38h ; 8
.eh_frame:0000000000007D55                 db  83h
.eh_frame:0000000000007D56                 db    7
.eh_frame:0000000000007D57                 db  52h ; R
.eh_frame:0000000000007D58                 db  0Eh
.eh_frame:0000000000007D59                 db  50h ; P
.eh_frame:0000000000007D5A                 db    2
.eh_frame:0000000000007D5B                 db  6Dh ; m
.eh_frame:0000000000007D5C                 db  0Eh
.eh_frame:0000000000007D5D                 db  38h ; 8
.eh_frame:0000000000007D5E                 db  44h ; D
.eh_frame:0000000000007D5F                 db  0Eh
.eh_frame:0000000000007D60                 db  30h ; 0
.eh_frame:0000000000007D61                 db  41h ; A
.eh_frame:0000000000007D62                 db  0Eh
.eh_frame:0000000000007D63                 db  28h ; (
.eh_frame:0000000000007D64                 db  42h ; B
.eh_frame:0000000000007D65                 db  0Eh
.eh_frame:0000000000007D66                 db  20h
.eh_frame:0000000000007D67                 db  42h ; B
.eh_frame:0000000000007D68                 db  0Eh
.eh_frame:0000000000007D69                 db  18h
.eh_frame:0000000000007D6A                 db  42h ; B
.eh_frame:0000000000007D6B                 db  0Eh
.eh_frame:0000000000007D6C                 db  10h
.eh_frame:0000000000007D6D                 db  42h ; B
.eh_frame:0000000000007D6E                 db  0Eh
.eh_frame:0000000000007D6F                 db    8
.eh_frame:0000000000007D70                 db  4Bh ; K
.eh_frame:0000000000007D71                 db 0C3h
.eh_frame:0000000000007D72                 db 0C6h
.eh_frame:0000000000007D73                 db 0CCh
.eh_frame:0000000000007D74                 db 0CDh
.eh_frame:0000000000007D75                 db 0CEh
.eh_frame:0000000000007D76                 db 0CFh
.eh_frame:0000000000007D77                 db  58h ; X
.eh_frame:0000000000007D78                 db  0Eh
.eh_frame:0000000000007D79                 db  50h ; P
.eh_frame:0000000000007D7A                 db  83h
.eh_frame:0000000000007D7B                 db    7
.eh_frame:0000000000007D7C                 db  86h
.eh_frame:0000000000007D7D                 db    6
.eh_frame:0000000000007D7E                 db  8Ch
.eh_frame:0000000000007D7F                 db    5
.eh_frame:0000000000007D80                 db  8Dh
.eh_frame:0000000000007D81                 db    4
.eh_frame:0000000000007D82                 db  8Eh
.eh_frame:0000000000007D83                 db    3
.eh_frame:0000000000007D84                 db  8Fh
.eh_frame:0000000000007D85                 db    2
.eh_frame:0000000000007D86                 db    0
.eh_frame:0000000000007D87                 db    0
.eh_frame:0000000000007D88                 db  10h
.eh_frame:0000000000007D89                 db    1
.eh_frame:0000000000007D8A                 db    0
.eh_frame:0000000000007D8B                 db    0
.eh_frame:0000000000007D8C                 db  54h ; T
.eh_frame:0000000000007D8D                 db    7
.eh_frame:0000000000007D8E                 db    0
.eh_frame:0000000000007D8F                 db    0
.eh_frame:0000000000007D90                 db  90h
.eh_frame:0000000000007D91                 db 0D1h
.eh_frame:0000000000007D92                 db 0FFh
.eh_frame:0000000000007D93                 db 0FFh
.eh_frame:0000000000007D94                 db  17h
.eh_frame:0000000000007D95                 db    4
.eh_frame:0000000000007D96                 db    0
.eh_frame:0000000000007D97                 db    0
.eh_frame:0000000000007D98                 db    0
.eh_frame:0000000000007D99                 db  42h ; B
.eh_frame:0000000000007D9A                 db  0Eh
.eh_frame:0000000000007D9B                 db  10h
.eh_frame:0000000000007D9C                 db  8Fh
.eh_frame:0000000000007D9D                 db    2
.eh_frame:0000000000007D9E                 db  42h ; B
.eh_frame:0000000000007D9F                 db  0Eh
.eh_frame:0000000000007DA0                 db  18h
.eh_frame:0000000000007DA1                 db  8Eh
.eh_frame:0000000000007DA2                 db    3
.eh_frame:0000000000007DA3                 db  42h ; B
.eh_frame:0000000000007DA4                 db  0Eh
.eh_frame:0000000000007DA5                 db  20h
.eh_frame:0000000000007DA6                 db  8Dh
.eh_frame:0000000000007DA7                 db    4
.eh_frame:0000000000007DA8                 db  42h ; B
.eh_frame:0000000000007DA9                 db  0Eh
.eh_frame:0000000000007DAA                 db  28h ; (
.eh_frame:0000000000007DAB                 db  8Ch
.eh_frame:0000000000007DAC                 db    5
.eh_frame:0000000000007DAD                 db  44h ; D
.eh_frame:0000000000007DAE                 db  0Eh
.eh_frame:0000000000007DAF                 db  30h ; 0
.eh_frame:0000000000007DB0                 db  86h
.eh_frame:0000000000007DB1                 db    6
.eh_frame:0000000000007DB2                 db  41h ; A
.eh_frame:0000000000007DB3                 db  0Eh
.eh_frame:0000000000007DB4                 db  38h ; 8
.eh_frame:0000000000007DB5                 db  83h
.eh_frame:0000000000007DB6                 db    7
.eh_frame:0000000000007DB7                 db  4Ah ; J
.eh_frame:0000000000007DB8                 db  0Eh
.eh_frame:0000000000007DB9                 db  60h ; `
.eh_frame:0000000000007DBA                 db    2
.eh_frame:0000000000007DBB                 db 0DDh
.eh_frame:0000000000007DBC                 db  0Eh
.eh_frame:0000000000007DBD                 db  68h ; h
.eh_frame:0000000000007DBE                 db  57h ; W
.eh_frame:0000000000007DBF                 db  0Eh
.eh_frame:0000000000007DC0                 db  70h ; p
.eh_frame:0000000000007DC1                 db  42h ; B
.eh_frame:0000000000007DC2                 db  0Eh
.eh_frame:0000000000007DC3                 db  78h ; x
.eh_frame:0000000000007DC4                 db  42h ; B
.eh_frame:0000000000007DC5                 db  0Eh
.eh_frame:0000000000007DC6                 db  80h
.eh_frame:0000000000007DC7                 db    1
.eh_frame:0000000000007DC8                 db  42h ; B
.eh_frame:0000000000007DC9                 db  0Eh
.eh_frame:0000000000007DCA                 db  88h
.eh_frame:0000000000007DCB                 db    1
.eh_frame:0000000000007DCC                 db  42h ; B
.eh_frame:0000000000007DCD                 db  0Eh
.eh_frame:0000000000007DCE                 db  90h
.eh_frame:0000000000007DCF                 db    1
.eh_frame:0000000000007DD0                 db  53h ; S
.eh_frame:0000000000007DD1                 db  0Eh
.eh_frame:0000000000007DD2                 db  60h ; `
.eh_frame:0000000000007DD3                 db  44h ; D
.eh_frame:0000000000007DD4                 db  0Ah
.eh_frame:0000000000007DD5                 db  0Eh
.eh_frame:0000000000007DD6                 db  38h ; 8
.eh_frame:0000000000007DD7                 db  41h ; A
.eh_frame:0000000000007DD8                 db  0Eh
.eh_frame:0000000000007DD9                 db  30h ; 0
.eh_frame:0000000000007DDA                 db  41h ; A
.eh_frame:0000000000007DDB                 db  0Eh
.eh_frame:0000000000007DDC                 db  28h ; (
.eh_frame:0000000000007DDD                 db  42h ; B
.eh_frame:0000000000007DDE                 db  0Eh
.eh_frame:0000000000007DDF                 db  20h
.eh_frame:0000000000007DE0                 db  42h ; B
.eh_frame:0000000000007DE1                 db  0Eh
.eh_frame:0000000000007DE2                 db  18h
.eh_frame:0000000000007DE3                 db  42h ; B
.eh_frame:0000000000007DE4                 db  0Eh
.eh_frame:0000000000007DE5                 db  10h
.eh_frame:0000000000007DE6                 db  42h ; B
.eh_frame:0000000000007DE7                 db  0Eh
.eh_frame:0000000000007DE8                 db    8
.eh_frame:0000000000007DE9                 db  44h ; D
.eh_frame:0000000000007DEA                 db  0Bh
.eh_frame:0000000000007DEB                 db    2
.eh_frame:0000000000007DEC                 db  78h ; x
.eh_frame:0000000000007DED                 db  0Ah
.eh_frame:0000000000007DEE                 db  0Eh
.eh_frame:0000000000007DEF                 db  68h ; h
.eh_frame:0000000000007DF0                 db  48h ; H
.eh_frame:0000000000007DF1                 db  0Bh
.eh_frame:0000000000007DF2                 db  5Ah ; Z
.eh_frame:0000000000007DF3                 db  0Ah
.eh_frame:0000000000007DF4                 db  0Eh
.eh_frame:0000000000007DF5                 db  38h ; 8
.eh_frame:0000000000007DF6                 db  47h ; G
.eh_frame:0000000000007DF7                 db  0Eh
.eh_frame:0000000000007DF8                 db  30h ; 0
.eh_frame:0000000000007DF9                 db  41h ; A
.eh_frame:0000000000007DFA                 db  0Eh
.eh_frame:0000000000007DFB                 db  28h ; (
.eh_frame:0000000000007DFC                 db  42h ; B
.eh_frame:0000000000007DFD                 db  0Eh
.eh_frame:0000000000007DFE                 db  20h
.eh_frame:0000000000007DFF                 db  42h ; B
.eh_frame:0000000000007E00                 db  0Eh
.eh_frame:0000000000007E01                 db  18h
.eh_frame:0000000000007E02                 db  42h ; B
.eh_frame:0000000000007E03                 db  0Eh
.eh_frame:0000000000007E04                 db  10h
.eh_frame:0000000000007E05                 db  42h ; B
.eh_frame:0000000000007E06                 db  0Eh
.eh_frame:0000000000007E07                 db    8
.eh_frame:0000000000007E08                 db  56h ; V
.eh_frame:0000000000007E09                 db  0Bh
.eh_frame:0000000000007E0A                 db  5Eh ; ^
.eh_frame:0000000000007E0B                 db  0Ah
.eh_frame:0000000000007E0C                 db  0Eh
.eh_frame:0000000000007E0D                 db  38h ; 8
.eh_frame:0000000000007E0E                 db  52h ; R
.eh_frame:0000000000007E0F                 db  0Eh
.eh_frame:0000000000007E10                 db  30h ; 0
.eh_frame:0000000000007E11                 db  41h ; A
.eh_frame:0000000000007E12                 db  0Eh
.eh_frame:0000000000007E13                 db  28h ; (
.eh_frame:0000000000007E14                 db  42h ; B
.eh_frame:0000000000007E15                 db  0Eh
.eh_frame:0000000000007E16                 db  20h
.eh_frame:0000000000007E17                 db  42h ; B
.eh_frame:0000000000007E18                 db  0Eh
.eh_frame:0000000000007E19                 db  18h
.eh_frame:0000000000007E1A                 db  42h ; B
.eh_frame:0000000000007E1B                 db  0Eh
.eh_frame:0000000000007E1C                 db  10h
.eh_frame:0000000000007E1D                 db  42h ; B
.eh_frame:0000000000007E1E                 db  0Eh
.eh_frame:0000000000007E1F                 db    8
.eh_frame:0000000000007E20                 db  4Fh ; O
.eh_frame:0000000000007E21                 db  0Bh
.eh_frame:0000000000007E22                 db  62h ; b
.eh_frame:0000000000007E23                 db  0Ah
.eh_frame:0000000000007E24                 db  0Eh
.eh_frame:0000000000007E25                 db  38h ; 8
.eh_frame:0000000000007E26                 db  50h ; P
.eh_frame:0000000000007E27                 db  0Eh
.eh_frame:0000000000007E28                 db  30h ; 0
.eh_frame:0000000000007E29                 db  41h ; A
.eh_frame:0000000000007E2A                 db  0Eh
.eh_frame:0000000000007E2B                 db  28h ; (
.eh_frame:0000000000007E2C                 db  42h ; B
.eh_frame:0000000000007E2D                 db  0Eh
.eh_frame:0000000000007E2E                 db  20h
.eh_frame:0000000000007E2F                 db  42h ; B
.eh_frame:0000000000007E30                 db  0Eh
.eh_frame:0000000000007E31                 db  18h
.eh_frame:0000000000007E32                 db  42h ; B
.eh_frame:0000000000007E33                 db  0Eh
.eh_frame:0000000000007E34                 db  10h
.eh_frame:0000000000007E35                 db  42h ; B
.eh_frame:0000000000007E36                 db  0Eh
.eh_frame:0000000000007E37                 db    8
.eh_frame:0000000000007E38                 db  55h ; U
.eh_frame:0000000000007E39                 db  0Bh
.eh_frame:0000000000007E3A                 db  66h ; f
.eh_frame:0000000000007E3B                 db  0Eh
.eh_frame:0000000000007E3C                 db  68h ; h
.eh_frame:0000000000007E3D                 db  42h ; B
.eh_frame:0000000000007E3E                 db  0Eh
.eh_frame:0000000000007E3F                 db  70h ; p
.eh_frame:0000000000007E40                 db  5Ch ; \
.eh_frame:0000000000007E41                 db  0Eh
.eh_frame:0000000000007E42                 db  68h ; h
.eh_frame:0000000000007E43                 db  41h ; A
.eh_frame:0000000000007E44                 db  0Eh
.eh_frame:0000000000007E45                 db  60h ; `
.eh_frame:0000000000007E46                 db  44h ; D
.eh_frame:0000000000007E47                 db  0Ah
.eh_frame:0000000000007E48                 db  0Eh
.eh_frame:0000000000007E49                 db  38h ; 8
.eh_frame:0000000000007E4A                 db  41h ; A
.eh_frame:0000000000007E4B                 db  0Eh
.eh_frame:0000000000007E4C                 db  30h ; 0
.eh_frame:0000000000007E4D                 db  41h ; A
.eh_frame:0000000000007E4E                 db  0Eh
.eh_frame:0000000000007E4F                 db  28h ; (
.eh_frame:0000000000007E50                 db  42h ; B
.eh_frame:0000000000007E51                 db  0Eh
.eh_frame:0000000000007E52                 db  20h
.eh_frame:0000000000007E53                 db  42h ; B
.eh_frame:0000000000007E54                 db  0Eh
.eh_frame:0000000000007E55                 db  18h
.eh_frame:0000000000007E56                 db  42h ; B
.eh_frame:0000000000007E57                 db  0Eh
.eh_frame:0000000000007E58                 db  10h
.eh_frame:0000000000007E59                 db  42h ; B
.eh_frame:0000000000007E5A                 db  0Eh
.eh_frame:0000000000007E5B                 db    8
.eh_frame:0000000000007E5C                 db  45h ; E
.eh_frame:0000000000007E5D                 db  0Bh
.eh_frame:0000000000007E5E                 db  68h ; h
.eh_frame:0000000000007E5F                 db  0Ah
.eh_frame:0000000000007E60                 db  0Eh
.eh_frame:0000000000007E61                 db  68h ; h
.eh_frame:0000000000007E62                 db  48h ; H
.eh_frame:0000000000007E63                 db  0Bh
.eh_frame:0000000000007E64                 db  72h ; r
.eh_frame:0000000000007E65                 db  0Eh
.eh_frame:0000000000007E66                 db  68h ; h
.eh_frame:0000000000007E67                 db  45h ; E
.eh_frame:0000000000007E68                 db  0Eh
.eh_frame:0000000000007E69                 db  70h ; p
.eh_frame:0000000000007E6A                 db  42h ; B
.eh_frame:0000000000007E6B                 db  0Eh
.eh_frame:0000000000007E6C                 db  78h ; x
.eh_frame:0000000000007E6D                 db  42h ; B
.eh_frame:0000000000007E6E                 db  0Eh
.eh_frame:0000000000007E6F                 db  80h
.eh_frame:0000000000007E70                 db    1
.eh_frame:0000000000007E71                 db  5Eh ; ^
.eh_frame:0000000000007E72                 db  0Eh
.eh_frame:0000000000007E73                 db  60h ; `
.eh_frame:0000000000007E74                 db  44h ; D
.eh_frame:0000000000007E75                 db  0Ah
.eh_frame:0000000000007E76                 db  0Eh
.eh_frame:0000000000007E77                 db  38h ; 8
.eh_frame:0000000000007E78                 db  41h ; A
.eh_frame:0000000000007E79                 db  0Eh
.eh_frame:0000000000007E7A                 db  30h ; 0
.eh_frame:0000000000007E7B                 db  41h ; A
.eh_frame:0000000000007E7C                 db  0Eh
.eh_frame:0000000000007E7D                 db  28h ; (
.eh_frame:0000000000007E7E                 db  42h ; B
.eh_frame:0000000000007E7F                 db  0Eh
.eh_frame:0000000000007E80                 db  20h
.eh_frame:0000000000007E81                 db  42h ; B
.eh_frame:0000000000007E82                 db  0Eh
.eh_frame:0000000000007E83                 db  18h
.eh_frame:0000000000007E84                 db  42h ; B
.eh_frame:0000000000007E85                 db  0Eh
.eh_frame:0000000000007E86                 db  10h
.eh_frame:0000000000007E87                 db  42h ; B
.eh_frame:0000000000007E88                 db  0Eh
.eh_frame:0000000000007E89                 db    8
.eh_frame:0000000000007E8A                 db  41h ; A
.eh_frame:0000000000007E8B                 db  0Bh
.eh_frame:0000000000007E8C                 db  79h ; y
.eh_frame:0000000000007E8D                 db  0Ah
.eh_frame:0000000000007E8E                 db  0Eh
.eh_frame:0000000000007E8F                 db  68h ; h
.eh_frame:0000000000007E90                 db  42h ; B
.eh_frame:0000000000007E91                 db  0Eh
.eh_frame:0000000000007E92                 db  70h ; p
.eh_frame:0000000000007E93                 db  42h ; B
.eh_frame:0000000000007E94                 db  0Eh
.eh_frame:0000000000007E95                 db  78h ; x
.eh_frame:0000000000007E96                 db  42h ; B
.eh_frame:0000000000007E97                 db  0Eh
.eh_frame:0000000000007E98                 db  80h
.eh_frame:0000000000007E99                 db    1
.eh_frame:0000000000007E9A                 db  51h ; Q
.eh_frame:0000000000007E9B                 db  0Bh
.eh_frame:0000000000007E9C                 db  10h
.eh_frame:0000000000007E9D                 db    0
.eh_frame:0000000000007E9E                 db    0
.eh_frame:0000000000007E9F                 db    0
.eh_frame:0000000000007EA0                 db  68h ; h
.eh_frame:0000000000007EA1                 db    8
.eh_frame:0000000000007EA2                 db    0
.eh_frame:0000000000007EA3                 db    0
.eh_frame:0000000000007EA4                 db  9Ch
.eh_frame:0000000000007EA5                 db 0D4h
.eh_frame:0000000000007EA6                 db 0FFh
.eh_frame:0000000000007EA7                 db 0FFh
.eh_frame:0000000000007EA8                 db  20h
.eh_frame:0000000000007EA9                 db    0
.eh_frame:0000000000007EAA                 db    0
.eh_frame:0000000000007EAB                 db    0
.eh_frame:0000000000007EAC                 db    0
.eh_frame:0000000000007EAD                 db    0
.eh_frame:0000000000007EAE                 db    0
.eh_frame:0000000000007EAF                 db    0
.eh_frame:0000000000007EB0                 db  18h
.eh_frame:0000000000007EB1                 db    0
.eh_frame:0000000000007EB2                 db    0
.eh_frame:0000000000007EB3                 db    0
.eh_frame:0000000000007EB4                 db  7Ch ; |
.eh_frame:0000000000007EB5                 db    8
.eh_frame:0000000000007EB6                 db    0
.eh_frame:0000000000007EB7                 db    0
.eh_frame:0000000000007EB8                 db 0A8h
.eh_frame:0000000000007EB9                 db 0D4h
.eh_frame:0000000000007EBA                 db 0FFh
.eh_frame:0000000000007EBB                 db 0FFh
.eh_frame:0000000000007EBC                 db  78h ; x
.eh_frame:0000000000007EBD                 db    0
.eh_frame:0000000000007EBE                 db    0
.eh_frame:0000000000007EBF                 db    0
.eh_frame:0000000000007EC0                 db    0
.eh_frame:0000000000007EC1                 db  44h ; D
.eh_frame:0000000000007EC2                 db  0Eh
.eh_frame:0000000000007EC3                 db  70h ; p
.eh_frame:0000000000007EC4                 db    2
.eh_frame:0000000000007EC5                 db  60h ; `
.eh_frame:0000000000007EC6                 db  0Ah
.eh_frame:0000000000007EC7                 db  0Eh
.eh_frame:0000000000007EC8                 db    8
.eh_frame:0000000000007EC9                 db  41h ; A
.eh_frame:0000000000007ECA                 db  0Bh
.eh_frame:0000000000007ECB                 db    0
.eh_frame:0000000000007ECC                 db  28h ; (
.eh_frame:0000000000007ECD                 db    0
.eh_frame:0000000000007ECE                 db    0
.eh_frame:0000000000007ECF                 db    0
.eh_frame:0000000000007ED0                 db  98h
.eh_frame:0000000000007ED1                 db    8
.eh_frame:0000000000007ED2                 db    0
.eh_frame:0000000000007ED3                 db    0
.eh_frame:0000000000007ED4                 db  0Ch
.eh_frame:0000000000007ED5                 db 0D5h
.eh_frame:0000000000007ED6                 db 0FFh
.eh_frame:0000000000007ED7                 db 0FFh
.eh_frame:0000000000007ED8                 db 0D5h
.eh_frame:0000000000007ED9                 db    0
.eh_frame:0000000000007EDA                 db    0
.eh_frame:0000000000007EDB                 db    0
.eh_frame:0000000000007EDC                 db    0
.eh_frame:0000000000007EDD                 db  41h ; A
.eh_frame:0000000000007EDE                 db  0Eh
.eh_frame:0000000000007EDF                 db  10h
.eh_frame:0000000000007EE0                 db  86h
.eh_frame:0000000000007EE1                 db    2
.eh_frame:0000000000007EE2                 db  41h ; A
.eh_frame:0000000000007EE3                 db  0Eh
.eh_frame:0000000000007EE4                 db  18h
.eh_frame:0000000000007EE5                 db  83h
.eh_frame:0000000000007EE6                 db    3
.eh_frame:0000000000007EE7                 db  50h ; P
.eh_frame:0000000000007EE8                 db  0Eh
.eh_frame:0000000000007EE9                 db 0D0h
.eh_frame:0000000000007EEA                 db    1
.eh_frame:0000000000007EEB                 db    2
.eh_frame:0000000000007EEC                 db 0ABh
.eh_frame:0000000000007EED                 db  0Ah
.eh_frame:0000000000007EEE                 db  0Eh
.eh_frame:0000000000007EEF                 db  18h
.eh_frame:0000000000007EF0                 db  41h ; A
.eh_frame:0000000000007EF1                 db  0Eh
.eh_frame:0000000000007EF2                 db  10h
.eh_frame:0000000000007EF3                 db  41h ; A
.eh_frame:0000000000007EF4                 db  0Eh
.eh_frame:0000000000007EF5                 db    8
.eh_frame:0000000000007EF6                 db  41h ; A
.eh_frame:0000000000007EF7                 db  0Bh
.eh_frame:0000000000007EF8                 db  1Ch
.eh_frame:0000000000007EF9                 db    0
.eh_frame:0000000000007EFA                 db    0
.eh_frame:0000000000007EFB                 db    0
.eh_frame:0000000000007EFC                 db 0C4h
.eh_frame:0000000000007EFD                 db    8
.eh_frame:0000000000007EFE                 db    0
.eh_frame:0000000000007EFF                 db    0
.eh_frame:0000000000007F00                 db 0C0h
.eh_frame:0000000000007F01                 db 0D5h
.eh_frame:0000000000007F02                 db 0FFh
.eh_frame:0000000000007F03                 db 0FFh
.eh_frame:0000000000007F04                 db  80h
.eh_frame:0000000000007F05                 db    0
.eh_frame:0000000000007F06                 db    0
.eh_frame:0000000000007F07                 db    0
.eh_frame:0000000000007F08                 db    0
.eh_frame:0000000000007F09                 db  41h ; A
.eh_frame:0000000000007F0A                 db  0Eh
.eh_frame:0000000000007F0B                 db  10h
.eh_frame:0000000000007F0C                 db  83h
.eh_frame:0000000000007F0D                 db    2
.eh_frame:0000000000007F0E                 db    2
.eh_frame:0000000000007F0F                 db  7Ah ; z
.eh_frame:0000000000007F10                 db  0Eh
.eh_frame:0000000000007F11                 db    8
.eh_frame:0000000000007F12                 db    0
.eh_frame:0000000000007F13                 db    0
.eh_frame:0000000000007F14                 db    0
.eh_frame:0000000000007F15                 db    0
.eh_frame:0000000000007F16                 db    0
.eh_frame:0000000000007F17                 db    0
.eh_frame:0000000000007F18                 db  18h
.eh_frame:0000000000007F19                 db    0
.eh_frame:0000000000007F1A                 db    0
.eh_frame:0000000000007F1B                 db    0
.eh_frame:0000000000007F1C                 db 0E4h
.eh_frame:0000000000007F1D                 db    8
.eh_frame:0000000000007F1E                 db    0
.eh_frame:0000000000007F1F                 db    0
.eh_frame:0000000000007F20                 db  20h
.eh_frame:0000000000007F21                 db 0D6h
.eh_frame:0000000000007F22                 db 0FFh
.eh_frame:0000000000007F23                 db 0FFh
.eh_frame:0000000000007F24                 db  1Ah
.eh_frame:0000000000007F25                 db    0
.eh_frame:0000000000007F26                 db    0
.eh_frame:0000000000007F27                 db    0
.eh_frame:0000000000007F28                 db    0
.eh_frame:0000000000007F29                 db  41h ; A
.eh_frame:0000000000007F2A                 db  0Eh
.eh_frame:0000000000007F2B                 db  10h
.eh_frame:0000000000007F2C                 db  83h
.eh_frame:0000000000007F2D                 db    2
.eh_frame:0000000000007F2E                 db  53h ; S
.eh_frame:0000000000007F2F                 db  0Ah
.eh_frame:0000000000007F30                 db  0Eh
.eh_frame:0000000000007F31                 db    8
.eh_frame:0000000000007F32                 db  41h ; A
.eh_frame:0000000000007F33                 db  0Bh
.eh_frame:0000000000007F34                 db  10h
.eh_frame:0000000000007F35                 db    0
.eh_frame:0000000000007F36                 db    0
.eh_frame:0000000000007F37                 db    0
.eh_frame:0000000000007F38                 db    0
.eh_frame:0000000000007F39                 db    9
.eh_frame:0000000000007F3A                 db    0
.eh_frame:0000000000007F3B                 db    0
.eh_frame:0000000000007F3C                 db  24h ; $
.eh_frame:0000000000007F3D                 db 0D6h
.eh_frame:0000000000007F3E                 db 0FFh
.eh_frame:0000000000007F3F                 db 0FFh
.eh_frame:0000000000007F40                 db  24h ; $
.eh_frame:0000000000007F41                 db    0
.eh_frame:0000000000007F42                 db    0
.eh_frame:0000000000007F43                 db    0
.eh_frame:0000000000007F44                 db    0
.eh_frame:0000000000007F45                 db  5Fh ; _
.eh_frame:0000000000007F46                 db  0Eh
.eh_frame:0000000000007F47                 db  10h
.eh_frame:0000000000007F48                 db  10h
.eh_frame:0000000000007F49                 db    0
.eh_frame:0000000000007F4A                 db    0
.eh_frame:0000000000007F4B                 db    0
.eh_frame:0000000000007F4C                 db  14h
.eh_frame:0000000000007F4D                 db    9
.eh_frame:0000000000007F4E                 db    0
.eh_frame:0000000000007F4F                 db    0
.eh_frame:0000000000007F50                 db  40h ; @
.eh_frame:0000000000007F51                 db 0D6h
.eh_frame:0000000000007F52                 db 0FFh
.eh_frame:0000000000007F53                 db 0FFh
.eh_frame:0000000000007F54                 db    2
.eh_frame:0000000000007F55                 db    0
.eh_frame:0000000000007F56                 db    0
.eh_frame:0000000000007F57                 db    0
.eh_frame:0000000000007F58                 db    0
.eh_frame:0000000000007F59                 db    0
.eh_frame:0000000000007F5A                 db    0
.eh_frame:0000000000007F5B                 db    0
.eh_frame:0000000000007F5C                 db  20h
.eh_frame:0000000000007F5D                 db    0
.eh_frame:0000000000007F5E                 db    0
.eh_frame:0000000000007F5F                 db    0
.eh_frame:0000000000007F60                 db  28h ; (
.eh_frame:0000000000007F61                 db    9
.eh_frame:0000000000007F62                 db    0
.eh_frame:0000000000007F63                 db    0
.eh_frame:0000000000007F64                 db  3Ch ; <
.eh_frame:0000000000007F65                 db 0D6h
.eh_frame:0000000000007F66                 db 0FFh
.eh_frame:0000000000007F67                 db 0FFh
.eh_frame:0000000000007F68                 db  36h ; 6
.eh_frame:0000000000007F69                 db    0
.eh_frame:0000000000007F6A                 db    0
.eh_frame:0000000000007F6B                 db    0
.eh_frame:0000000000007F6C                 db    0
.eh_frame:0000000000007F6D                 db  44h ; D
.eh_frame:0000000000007F6E                 db  0Eh
.eh_frame:0000000000007F6F                 db  10h
.eh_frame:0000000000007F70                 db  83h
.eh_frame:0000000000007F71                 db    2
.eh_frame:0000000000007F72                 db  5Dh ; ]
.eh_frame:0000000000007F73                 db  0Ah
.eh_frame:0000000000007F74                 db  0Eh
.eh_frame:0000000000007F75                 db    8
.eh_frame:0000000000007F76                 db  47h ; G
.eh_frame:0000000000007F77                 db  0Bh
.eh_frame:0000000000007F78                 db  48h ; H
.eh_frame:0000000000007F79                 db  0Ah
.eh_frame:0000000000007F7A                 db  0Eh
.eh_frame:0000000000007F7B                 db    8
.eh_frame:0000000000007F7C                 db  41h ; A
.eh_frame:0000000000007F7D                 db  0Bh
.eh_frame:0000000000007F7E                 db    0
.eh_frame:0000000000007F7F                 db    0
.eh_frame:0000000000007F80                 db  10h
.eh_frame:0000000000007F81                 db    0
.eh_frame:0000000000007F82                 db    0
.eh_frame:0000000000007F83                 db    0
.eh_frame:0000000000007F84                 db  4Ch ; L
.eh_frame:0000000000007F85                 db    9
.eh_frame:0000000000007F86                 db    0
.eh_frame:0000000000007F87                 db    0
.eh_frame:0000000000007F88                 db  58h ; X
.eh_frame:0000000000007F89                 db 0D6h
.eh_frame:0000000000007F8A                 db 0FFh
.eh_frame:0000000000007F8B                 db 0FFh
.eh_frame:0000000000007F8C                 db  24h ; $
.eh_frame:0000000000007F8D                 db    0
.eh_frame:0000000000007F8E                 db    0
.eh_frame:0000000000007F8F                 db    0
.eh_frame:0000000000007F90                 db    0
.eh_frame:0000000000007F91                 db  5Fh ; _
.eh_frame:0000000000007F92                 db  0Eh
.eh_frame:0000000000007F93                 db  10h
.eh_frame:0000000000007F94                 db  14h
.eh_frame:0000000000007F95                 db    0
.eh_frame:0000000000007F96                 db    0
.eh_frame:0000000000007F97                 db    0
.eh_frame:0000000000007F98                 db  60h ; `
.eh_frame:0000000000007F99                 db    9
.eh_frame:0000000000007F9A                 db    0
.eh_frame:0000000000007F9B                 db    0
.eh_frame:0000000000007F9C                 db  74h ; t
.eh_frame:0000000000007F9D                 db 0D6h
.eh_frame:0000000000007F9E                 db 0FFh
.eh_frame:0000000000007F9F                 db 0FFh
.eh_frame:0000000000007FA0                 db  82h
.eh_frame:0000000000007FA1                 db    0
.eh_frame:0000000000007FA2                 db    0
.eh_frame:0000000000007FA3                 db    0
.eh_frame:0000000000007FA4                 db    0
.eh_frame:0000000000007FA5                 db    2
.eh_frame:0000000000007FA6                 db  5Fh ; _
.eh_frame:0000000000007FA7                 db  0Eh
.eh_frame:0000000000007FA8                 db  10h
.eh_frame:0000000000007FA9                 db  49h ; I
.eh_frame:0000000000007FAA                 db  0Eh
.eh_frame:0000000000007FAB                 db    8
.eh_frame:0000000000007FAC                 db  14h
.eh_frame:0000000000007FAD                 db    0
.eh_frame:0000000000007FAE                 db    0
.eh_frame:0000000000007FAF                 db    0
.eh_frame:0000000000007FB0                 db  78h ; x
.eh_frame:0000000000007FB1                 db    9
.eh_frame:0000000000007FB2                 db    0
.eh_frame:0000000000007FB3                 db    0
.eh_frame:0000000000007FB4                 db 0ECh
.eh_frame:0000000000007FB5                 db 0D6h
.eh_frame:0000000000007FB6                 db 0FFh
.eh_frame:0000000000007FB7                 db 0FFh
.eh_frame:0000000000007FB8                 db  4Ah ; J
.eh_frame:0000000000007FB9                 db    0
.eh_frame:0000000000007FBA                 db    0
.eh_frame:0000000000007FBB                 db    0
.eh_frame:0000000000007FBC                 db    0
.eh_frame:0000000000007FBD                 db    2
.eh_frame:0000000000007FBE                 db  45h ; E
.eh_frame:0000000000007FBF                 db  0Eh
.eh_frame:0000000000007FC0                 db  10h
.eh_frame:0000000000007FC1                 db    0
.eh_frame:0000000000007FC2                 db    0
.eh_frame:0000000000007FC3                 db    0
.eh_frame:0000000000007FC4                 db  18h
.eh_frame:0000000000007FC5                 db    0
.eh_frame:0000000000007FC6                 db    0
.eh_frame:0000000000007FC7                 db    0
.eh_frame:0000000000007FC8                 db  90h
.eh_frame:0000000000007FC9                 db    9
.eh_frame:0000000000007FCA                 db    0
.eh_frame:0000000000007FCB                 db    0
.eh_frame:0000000000007FCC                 db  24h ; $
.eh_frame:0000000000007FCD                 db 0D7h
.eh_frame:0000000000007FCE                 db 0FFh
.eh_frame:0000000000007FCF                 db 0FFh
.eh_frame:0000000000007FD0                 db  17h
.eh_frame:0000000000007FD1                 db    0
.eh_frame:0000000000007FD2                 db    0
.eh_frame:0000000000007FD3                 db    0
.eh_frame:0000000000007FD4                 db    0
.eh_frame:0000000000007FD5                 db  41h ; A
.eh_frame:0000000000007FD6                 db  0Eh
.eh_frame:0000000000007FD7                 db  10h
.eh_frame:0000000000007FD8                 db  83h
.eh_frame:0000000000007FD9                 db    2
.eh_frame:0000000000007FDA                 db  51h ; Q
.eh_frame:0000000000007FDB                 db  0Eh
.eh_frame:0000000000007FDC                 db    8
.eh_frame:0000000000007FDD                 db    0
.eh_frame:0000000000007FDE                 db    0
.eh_frame:0000000000007FDF                 db    0
.eh_frame:0000000000007FE0                 db  18h
.eh_frame:0000000000007FE1                 db    0
.eh_frame:0000000000007FE2                 db    0
.eh_frame:0000000000007FE3                 db    0
.eh_frame:0000000000007FE4                 db 0ACh
.eh_frame:0000000000007FE5                 db    9
.eh_frame:0000000000007FE6                 db    0
.eh_frame:0000000000007FE7                 db    0
.eh_frame:0000000000007FE8                 db  28h ; (
.eh_frame:0000000000007FE9                 db 0D7h
.eh_frame:0000000000007FEA                 db 0FFh
.eh_frame:0000000000007FEB                 db 0FFh
.eh_frame:0000000000007FEC                 db  2Eh ; .
.eh_frame:0000000000007FED                 db    0
.eh_frame:0000000000007FEE                 db    0
.eh_frame:0000000000007FEF                 db    0
.eh_frame:0000000000007FF0                 db    0
.eh_frame:0000000000007FF1                 db  47h ; G
.eh_frame:0000000000007FF2                 db  0Eh
.eh_frame:0000000000007FF3                 db  10h
.eh_frame:0000000000007FF4                 db  61h ; a
.eh_frame:0000000000007FF5                 db  0Ah
.eh_frame:0000000000007FF6                 db  0Eh
.eh_frame:0000000000007FF7                 db    8
.eh_frame:0000000000007FF8                 db  41h ; A
.eh_frame:0000000000007FF9                 db  0Bh
.eh_frame:0000000000007FFA                 db    0
.eh_frame:0000000000007FFB                 db    0
.eh_frame:0000000000007FFC                 db  24h ; $
.eh_frame:0000000000007FFD                 db    0
.eh_frame:0000000000007FFE                 db    0
.eh_frame:0000000000007FFF                 db    0
.eh_frame:0000000000008000                 db 0C8h
.eh_frame:0000000000008001                 db    9
.eh_frame:0000000000008002                 db    0
.eh_frame:0000000000008003                 db    0
.eh_frame:0000000000008004                 db  3Ch ; <
.eh_frame:0000000000008005                 db 0D7h
.eh_frame:0000000000008006                 db 0FFh
.eh_frame:0000000000008007                 db 0FFh
.eh_frame:0000000000008008                 db  28h ; (
.eh_frame:0000000000008009                 db    0
.eh_frame:000000000000800A                 db    0
.eh_frame:000000000000800B                 db    0
.eh_frame:000000000000800C                 db    0
.eh_frame:000000000000800D                 db  41h ; A
.eh_frame:000000000000800E                 db  0Eh
.eh_frame:000000000000800F                 db  10h
.eh_frame:0000000000008010                 db  86h
.eh_frame:0000000000008011                 db    2
.eh_frame:0000000000008012                 db  41h ; A
.eh_frame:0000000000008013                 db  0Eh
.eh_frame:0000000000008014                 db  18h
.eh_frame:0000000000008015                 db  83h
.eh_frame:0000000000008016                 db    3
.eh_frame:0000000000008017                 db  4Dh ; M
.eh_frame:0000000000008018                 db  0Eh
.eh_frame:0000000000008019                 db  20h
.eh_frame:000000000000801A                 db  49h ; I
.eh_frame:000000000000801B                 db  0Eh
.eh_frame:000000000000801C                 db  18h
.eh_frame:000000000000801D                 db  47h ; G
.eh_frame:000000000000801E                 db  0Eh
.eh_frame:000000000000801F                 db  10h
.eh_frame:0000000000008020                 db  41h ; A
.eh_frame:0000000000008021                 db  0Eh
.eh_frame:0000000000008022                 db    8
.eh_frame:0000000000008023                 db    0
.eh_frame:0000000000008024                 db  18h
.eh_frame:0000000000008025                 db    0
.eh_frame:0000000000008026                 db    0
.eh_frame:0000000000008027                 db    0
.eh_frame:0000000000008028                 db 0F0h
.eh_frame:0000000000008029                 db    9
.eh_frame:000000000000802A                 db    0
.eh_frame:000000000000802B                 db    0
.eh_frame:000000000000802C                 db  44h ; D
.eh_frame:000000000000802D                 db 0D7h
.eh_frame:000000000000802E                 db 0FFh
.eh_frame:000000000000802F                 db 0FFh
.eh_frame:0000000000008030                 db  13h
.eh_frame:0000000000008031                 db    0
.eh_frame:0000000000008032                 db    0
.eh_frame:0000000000008033                 db    0
.eh_frame:0000000000008034                 db    0
.eh_frame:0000000000008035                 db  41h ; A
.eh_frame:0000000000008036                 db  0Eh
.eh_frame:0000000000008037                 db  10h
.eh_frame:0000000000008038                 db  83h
.eh_frame:0000000000008039                 db    2
.eh_frame:000000000000803A                 db  50h ; P
.eh_frame:000000000000803B                 db  0Eh
.eh_frame:000000000000803C                 db    8
.eh_frame:000000000000803D                 db    0
.eh_frame:000000000000803E                 db    0
.eh_frame:000000000000803F                 db    0
.eh_frame:0000000000008040                 db  14h
.eh_frame:0000000000008041                 db    0
.eh_frame:0000000000008042                 db    0
.eh_frame:0000000000008043                 db    0
.eh_frame:0000000000008044                 db  0Ch
.eh_frame:0000000000008045                 db  0Ah
.eh_frame:0000000000008046                 db    0
.eh_frame:0000000000008047                 db    0
.eh_frame:0000000000008048                 db  48h ; H
.eh_frame:0000000000008049                 db 0D7h
.eh_frame:000000000000804A                 db 0FFh
.eh_frame:000000000000804B                 db 0FFh
.eh_frame:000000000000804C                 db  35h ; 5
.eh_frame:000000000000804D                 db    0
.eh_frame:000000000000804E                 db    0
.eh_frame:000000000000804F                 db    0
.eh_frame:0000000000008050                 db    0
.eh_frame:0000000000008051                 db  4Bh ; K
.eh_frame:0000000000008052                 db  0Eh
.eh_frame:0000000000008053                 db  10h
.eh_frame:0000000000008054                 db    0
.eh_frame:0000000000008055                 db    0
.eh_frame:0000000000008056                 db    0
.eh_frame:0000000000008057                 db    0
.eh_frame:0000000000008058                 db  1Ch
.eh_frame:0000000000008059                 db    0
.eh_frame:000000000000805A                 db    0
.eh_frame:000000000000805B                 db    0
.eh_frame:000000000000805C                 db  24h ; $
.eh_frame:000000000000805D                 db  0Ah
.eh_frame:000000000000805E                 db    0
.eh_frame:000000000000805F                 db    0
.eh_frame:0000000000008060                 db  70h ; p
.eh_frame:0000000000008061                 db 0D7h
.eh_frame:0000000000008062                 db 0FFh
.eh_frame:0000000000008063                 db 0FFh
.eh_frame:0000000000008064                 db  27h ; '
.eh_frame:0000000000008065                 db    0
.eh_frame:0000000000008066                 db    0
.eh_frame:0000000000008067                 db    0
.eh_frame:0000000000008068                 db    0
.eh_frame:0000000000008069                 db  41h ; A
.eh_frame:000000000000806A                 db  0Eh
.eh_frame:000000000000806B                 db  10h
.eh_frame:000000000000806C                 db  83h
.eh_frame:000000000000806D                 db    2
.eh_frame:000000000000806E                 db  4Fh ; O
.eh_frame:000000000000806F                 db  0Ah
.eh_frame:0000000000008070                 db  0Eh
.eh_frame:0000000000008071                 db    8
.eh_frame:0000000000008072                 db  48h ; H
.eh_frame:0000000000008073                 db  0Bh
.eh_frame:0000000000008074                 db    0
.eh_frame:0000000000008075                 db    0
.eh_frame:0000000000008076                 db    0
.eh_frame:0000000000008077                 db    0
.eh_frame:0000000000008078                 db  4Ch ; L
.eh_frame:0000000000008079                 db    0
.eh_frame:000000000000807A                 db    0
.eh_frame:000000000000807B                 db    0
.eh_frame:000000000000807C                 db  44h ; D
.eh_frame:000000000000807D                 db  0Ah
.eh_frame:000000000000807E                 db    0
.eh_frame:000000000000807F                 db    0
.eh_frame:0000000000008080                 db  80h
.eh_frame:0000000000008081                 db 0D7h
.eh_frame:0000000000008082                 db 0FFh
.eh_frame:0000000000008083                 db 0FFh
.eh_frame:0000000000008084                 db  1Ch
.eh_frame:0000000000008085                 db    4
.eh_frame:0000000000008086                 db    0
.eh_frame:0000000000008087                 db    0
.eh_frame:0000000000008088                 db    0
.eh_frame:0000000000008089                 db  42h ; B
.eh_frame:000000000000808A                 db  0Eh
.eh_frame:000000000000808B                 db  10h
.eh_frame:000000000000808C                 db  8Fh
.eh_frame:000000000000808D                 db    2
.eh_frame:000000000000808E                 db  42h ; B
.eh_frame:000000000000808F                 db  0Eh
.eh_frame:0000000000008090                 db  18h
.eh_frame:0000000000008091                 db  8Eh
.eh_frame:0000000000008092                 db    3
.eh_frame:0000000000008093                 db  42h ; B
.eh_frame:0000000000008094                 db  0Eh
.eh_frame:0000000000008095                 db  20h
.eh_frame:0000000000008096                 db  8Dh
.eh_frame:0000000000008097                 db    4
.eh_frame:0000000000008098                 db  42h ; B
.eh_frame:0000000000008099                 db  0Eh
.eh_frame:000000000000809A                 db  28h ; (
.eh_frame:000000000000809B                 db  8Ch
.eh_frame:000000000000809C                 db    5
.eh_frame:000000000000809D                 db  41h ; A
.eh_frame:000000000000809E                 db  0Eh
.eh_frame:000000000000809F                 db  30h ; 0
.eh_frame:00000000000080A0                 db  86h
.eh_frame:00000000000080A1                 db    6
.eh_frame:00000000000080A2                 db  41h ; A
.eh_frame:00000000000080A3                 db  0Eh
.eh_frame:00000000000080A4                 db  38h ; 8
.eh_frame:00000000000080A5                 db  83h
.eh_frame:00000000000080A6                 db    7
.eh_frame:00000000000080A7                 db  44h ; D
.eh_frame:00000000000080A8                 db  0Eh
.eh_frame:00000000000080A9                 db  60h ; `
.eh_frame:00000000000080AA                 db    2
.eh_frame:00000000000080AB                 db 0E9h
.eh_frame:00000000000080AC                 db  0Ah
.eh_frame:00000000000080AD                 db  0Eh
.eh_frame:00000000000080AE                 db  38h ; 8
.eh_frame:00000000000080AF                 db  41h ; A
.eh_frame:00000000000080B0                 db  0Eh
.eh_frame:00000000000080B1                 db  30h ; 0
.eh_frame:00000000000080B2                 db  41h ; A
.eh_frame:00000000000080B3                 db  0Eh
.eh_frame:00000000000080B4                 db  28h ; (
.eh_frame:00000000000080B5                 db  42h ; B
.eh_frame:00000000000080B6                 db  0Eh
.eh_frame:00000000000080B7                 db  20h
.eh_frame:00000000000080B8                 db  42h ; B
.eh_frame:00000000000080B9                 db  0Eh
.eh_frame:00000000000080BA                 db  18h
.eh_frame:00000000000080BB                 db  42h ; B
.eh_frame:00000000000080BC                 db  0Eh
.eh_frame:00000000000080BD                 db  10h
.eh_frame:00000000000080BE                 db  42h ; B
.eh_frame:00000000000080BF                 db  0Eh
.eh_frame:00000000000080C0                 db    8
.eh_frame:00000000000080C1                 db  47h ; G
.eh_frame:00000000000080C2                 db  0Bh
.eh_frame:00000000000080C3                 db    0
.eh_frame:00000000000080C4                 db    0
.eh_frame:00000000000080C5                 db    0
.eh_frame:00000000000080C6                 db    0
.eh_frame:00000000000080C7                 db    0
.eh_frame:00000000000080C8                 db  3Ch ; <
.eh_frame:00000000000080C9                 db    0
.eh_frame:00000000000080CA                 db    0
.eh_frame:00000000000080CB                 db    0
.eh_frame:00000000000080CC                 db  94h
.eh_frame:00000000000080CD                 db  0Ah
.eh_frame:00000000000080CE                 db    0
.eh_frame:00000000000080CF                 db    0
.eh_frame:00000000000080D0                 db  50h ; P
.eh_frame:00000000000080D1                 db 0DBh
.eh_frame:00000000000080D2                 db 0FFh
.eh_frame:00000000000080D3                 db 0FFh
.eh_frame:00000000000080D4                 db  83h
.eh_frame:00000000000080D5                 db    0
.eh_frame:00000000000080D6                 db    0
.eh_frame:00000000000080D7                 db    0
.eh_frame:00000000000080D8                 db    0
.eh_frame:00000000000080D9                 db  42h ; B
.eh_frame:00000000000080DA                 db  0Eh
.eh_frame:00000000000080DB                 db  10h
.eh_frame:00000000000080DC                 db  8Dh
.eh_frame:00000000000080DD                 db    2
.eh_frame:00000000000080DE                 db  42h ; B
.eh_frame:00000000000080DF                 db  0Eh
.eh_frame:00000000000080E0                 db  18h
.eh_frame:00000000000080E1                 db  8Ch
.eh_frame:00000000000080E2                 db    3
.eh_frame:00000000000080E3                 db  44h ; D
.eh_frame:00000000000080E4                 db  0Eh
.eh_frame:00000000000080E5                 db  20h
.eh_frame:00000000000080E6                 db  86h
.eh_frame:00000000000080E7                 db    4
.eh_frame:00000000000080E8                 db  41h ; A
.eh_frame:00000000000080E9                 db  0Eh
.eh_frame:00000000000080EA                 db  28h ; (
.eh_frame:00000000000080EB                 db  83h
.eh_frame:00000000000080EC                 db    5
.eh_frame:00000000000080ED                 db  4Ah ; J
.eh_frame:00000000000080EE                 db  0Eh
.eh_frame:00000000000080EF                 db  40h ; @
.eh_frame:00000000000080F0                 db    2
.eh_frame:00000000000080F1                 db  64h ; d
.eh_frame:00000000000080F2                 db  0Ah
.eh_frame:00000000000080F3                 db  0Eh
.eh_frame:00000000000080F4                 db  28h ; (
.eh_frame:00000000000080F5                 db  41h ; A
.eh_frame:00000000000080F6                 db  0Eh
.eh_frame:00000000000080F7                 db  20h
.eh_frame:00000000000080F8                 db  41h ; A
.eh_frame:00000000000080F9                 db  0Eh
.eh_frame:00000000000080FA                 db  18h
.eh_frame:00000000000080FB                 db  42h ; B
.eh_frame:00000000000080FC                 db  0Eh
.eh_frame:00000000000080FD                 db  10h
.eh_frame:00000000000080FE                 db  42h ; B
.eh_frame:00000000000080FF                 db  0Eh
.eh_frame:0000000000008100                 db    8
.eh_frame:0000000000008101                 db  41h ; A
.eh_frame:0000000000008102                 db  0Bh
.eh_frame:0000000000008103                 db    0
.eh_frame:0000000000008104                 db    0
.eh_frame:0000000000008105                 db    0
.eh_frame:0000000000008106                 db    0
.eh_frame:0000000000008107                 db    0
.eh_frame:0000000000008108                 db  4Ch ; L
.eh_frame:0000000000008109                 db    0
.eh_frame:000000000000810A                 db    0
.eh_frame:000000000000810B                 db    0
.eh_frame:000000000000810C                 db 0D4h
.eh_frame:000000000000810D                 db  0Ah
.eh_frame:000000000000810E                 db    0
.eh_frame:000000000000810F                 db    0
.eh_frame:0000000000008110                 db 0A0h
.eh_frame:0000000000008111                 db 0DBh
.eh_frame:0000000000008112                 db 0FFh
.eh_frame:0000000000008113                 db 0FFh
.eh_frame:0000000000008114                 db  7Dh ; }
.eh_frame:0000000000008115                 db    0
.eh_frame:0000000000008116                 db    0
.eh_frame:0000000000008117                 db    0
.eh_frame:0000000000008118                 db    0
.eh_frame:0000000000008119                 db  42h ; B
.eh_frame:000000000000811A                 db  0Eh
.eh_frame:000000000000811B                 db  10h
.eh_frame:000000000000811C                 db  8Ch
.eh_frame:000000000000811D                 db    2
.eh_frame:000000000000811E                 db  41h ; A
.eh_frame:000000000000811F                 db  0Eh
.eh_frame:0000000000008120                 db  18h
.eh_frame:0000000000008121                 db  86h
.eh_frame:0000000000008122                 db    3
.eh_frame:0000000000008123                 db  44h ; D
.eh_frame:0000000000008124                 db  0Eh
.eh_frame:0000000000008125                 db  20h
.eh_frame:0000000000008126                 db  83h
.eh_frame:0000000000008127                 db    4
.eh_frame:0000000000008128                 db  69h ; i
.eh_frame:0000000000008129                 db  0Ah
.eh_frame:000000000000812A                 db  0Eh
.eh_frame:000000000000812B                 db  18h
.eh_frame:000000000000812C                 db  41h ; A
.eh_frame:000000000000812D                 db  0Eh
.eh_frame:000000000000812E                 db  10h
.eh_frame:000000000000812F                 db  42h ; B
.eh_frame:0000000000008130                 db  0Eh
.eh_frame:0000000000008131                 db    8
.eh_frame:0000000000008132                 db  45h ; E
.eh_frame:0000000000008133                 db  0Bh
.eh_frame:0000000000008134                 db  55h ; U
.eh_frame:0000000000008135                 db  0Ah
.eh_frame:0000000000008136                 db  0Eh
.eh_frame:0000000000008137                 db  18h
.eh_frame:0000000000008138                 db  41h ; A
.eh_frame:0000000000008139                 db  0Eh
.eh_frame:000000000000813A                 db  10h
.eh_frame:000000000000813B                 db  42h ; B
.eh_frame:000000000000813C                 db  0Eh
.eh_frame:000000000000813D                 db    8
.eh_frame:000000000000813E                 db  48h ; H
.eh_frame:000000000000813F                 db  0Bh
.eh_frame:0000000000008140                 db  41h ; A
.eh_frame:0000000000008141                 db  0Ah
.eh_frame:0000000000008142                 db  0Eh
.eh_frame:0000000000008143                 db  18h
.eh_frame:0000000000008144                 db  46h ; F
.eh_frame:0000000000008145                 db  0Eh
.eh_frame:0000000000008146                 db  10h
.eh_frame:0000000000008147                 db  42h ; B
.eh_frame:0000000000008148                 db  0Eh
.eh_frame:0000000000008149                 db    8
.eh_frame:000000000000814A                 db  47h ; G
.eh_frame:000000000000814B                 db  0Bh
.eh_frame:000000000000814C                 db  49h ; I
.eh_frame:000000000000814D                 db  0Eh
.eh_frame:000000000000814E                 db  18h
.eh_frame:000000000000814F                 db  41h ; A
.eh_frame:0000000000008150                 db  0Eh
.eh_frame:0000000000008151                 db  10h
.eh_frame:0000000000008152                 db  42h ; B
.eh_frame:0000000000008153                 db  0Eh
.eh_frame:0000000000008154                 db    8
.eh_frame:0000000000008155                 db    0
.eh_frame:0000000000008156                 db    0
.eh_frame:0000000000008157                 db    0
.eh_frame:0000000000008158                 db  1Ch
.eh_frame:0000000000008159                 db    0
.eh_frame:000000000000815A                 db    0
.eh_frame:000000000000815B                 db    0
.eh_frame:000000000000815C                 db  24h ; $
.eh_frame:000000000000815D                 db  0Bh
.eh_frame:000000000000815E                 db    0
.eh_frame:000000000000815F                 db    0
.eh_frame:0000000000008160                 db 0D0h
.eh_frame:0000000000008161                 db 0DBh
.eh_frame:0000000000008162                 db 0FFh
.eh_frame:0000000000008163                 db 0FFh
.eh_frame:0000000000008164                 db  60h ; `
.eh_frame:0000000000008165                 db    0
.eh_frame:0000000000008166                 db    0
.eh_frame:0000000000008167                 db    0
.eh_frame:0000000000008168                 db    0
.eh_frame:0000000000008169                 db  44h ; D
.eh_frame:000000000000816A                 db  0Eh
.eh_frame:000000000000816B                 db  10h
.eh_frame:000000000000816C                 db  75h ; u
.eh_frame:000000000000816D                 db  0Ah
.eh_frame:000000000000816E                 db  0Eh
.eh_frame:000000000000816F                 db    8
.eh_frame:0000000000008170                 db  47h ; G
.eh_frame:0000000000008171                 db  0Bh
.eh_frame:0000000000008172                 db  5Fh ; _
.eh_frame:0000000000008173                 db  0Eh
.eh_frame:0000000000008174                 db    8
.eh_frame:0000000000008175                 db    0
.eh_frame:0000000000008176                 db    0
.eh_frame:0000000000008177                 db    0
.eh_frame:0000000000008178                 db  1Ch
.eh_frame:0000000000008179                 db    0
.eh_frame:000000000000817A                 db    0
.eh_frame:000000000000817B                 db    0
.eh_frame:000000000000817C                 db  44h ; D
.eh_frame:000000000000817D                 db  0Bh
.eh_frame:000000000000817E                 db    0
.eh_frame:000000000000817F                 db    0
.eh_frame:0000000000008180                 db  10h
.eh_frame:0000000000008181                 db 0DCh
.eh_frame:0000000000008182                 db 0FFh
.eh_frame:0000000000008183                 db 0FFh
.eh_frame:0000000000008184                 db  3Ch ; <
.eh_frame:0000000000008185                 db    0
.eh_frame:0000000000008186                 db    0
.eh_frame:0000000000008187                 db    0
.eh_frame:0000000000008188                 db    0
.eh_frame:0000000000008189                 db  44h ; D
.eh_frame:000000000000818A                 db  0Eh
.eh_frame:000000000000818B                 db  10h
.eh_frame:000000000000818C                 db  61h ; a
.eh_frame:000000000000818D                 db  0Ah
.eh_frame:000000000000818E                 db  0Eh
.eh_frame:000000000000818F                 db    8
.eh_frame:0000000000008190                 db  4Bh ; K
.eh_frame:0000000000008191                 db  0Bh
.eh_frame:0000000000008192                 db  4Bh ; K
.eh_frame:0000000000008193                 db  0Eh
.eh_frame:0000000000008194                 db    8
.eh_frame:0000000000008195                 db    0
.eh_frame:0000000000008196                 db    0
.eh_frame:0000000000008197                 db    0
.eh_frame:0000000000008198                 db  14h
.eh_frame:0000000000008199                 db    0
.eh_frame:000000000000819A                 db    0
.eh_frame:000000000000819B                 db    0
.eh_frame:000000000000819C                 db  64h ; d
.eh_frame:000000000000819D                 db  0Bh
.eh_frame:000000000000819E                 db    0
.eh_frame:000000000000819F                 db    0
.eh_frame:00000000000081A0                 db  30h ; 0
.eh_frame:00000000000081A1                 db 0DCh
.eh_frame:00000000000081A2                 db 0FFh
.eh_frame:00000000000081A3                 db 0FFh
.eh_frame:00000000000081A4                 db  45h ; E
.eh_frame:00000000000081A5                 db    0
.eh_frame:00000000000081A6                 db    0
.eh_frame:00000000000081A7                 db    0
.eh_frame:00000000000081A8                 db    0
.eh_frame:00000000000081A9                 db  6Ch ; l
.eh_frame:00000000000081AA                 db  0Eh
.eh_frame:00000000000081AB                 db  10h
.eh_frame:00000000000081AC                 db  51h ; Q
.eh_frame:00000000000081AD                 db  0Eh
.eh_frame:00000000000081AE                 db    8
.eh_frame:00000000000081AF                 db    0
.eh_frame:00000000000081B0                 db  4Ch ; L
.eh_frame:00000000000081B1                 db    0
.eh_frame:00000000000081B2                 db    0
.eh_frame:00000000000081B3                 db    0
.eh_frame:00000000000081B4                 db  7Ch ; |
.eh_frame:00000000000081B5                 db  0Bh
.eh_frame:00000000000081B6                 db    0
.eh_frame:00000000000081B7                 db    0
.eh_frame:00000000000081B8                 db  68h ; h
.eh_frame:00000000000081B9                 db 0DCh
.eh_frame:00000000000081BA                 db 0FFh
.eh_frame:00000000000081BB                 db 0FFh
.eh_frame:00000000000081BC                 db  3Ch ; <
.eh_frame:00000000000081BD                 db    2
.eh_frame:00000000000081BE                 db    0
.eh_frame:00000000000081BF                 db    0
.eh_frame:00000000000081C0                 db    0
.eh_frame:00000000000081C1                 db  42h ; B
.eh_frame:00000000000081C2                 db  0Eh
.eh_frame:00000000000081C3                 db  10h
.eh_frame:00000000000081C4                 db  8Fh
.eh_frame:00000000000081C5                 db    2
.eh_frame:00000000000081C6                 db  42h ; B
.eh_frame:00000000000081C7                 db  0Eh
.eh_frame:00000000000081C8                 db  18h
.eh_frame:00000000000081C9                 db  8Eh
.eh_frame:00000000000081CA                 db    3
.eh_frame:00000000000081CB                 db  45h ; E
.eh_frame:00000000000081CC                 db  0Eh
.eh_frame:00000000000081CD                 db  20h
.eh_frame:00000000000081CE                 db  8Dh
.eh_frame:00000000000081CF                 db    4
.eh_frame:00000000000081D0                 db  42h ; B
.eh_frame:00000000000081D1                 db  0Eh
.eh_frame:00000000000081D2                 db  28h ; (
.eh_frame:00000000000081D3                 db  8Ch
.eh_frame:00000000000081D4                 db    5
.eh_frame:00000000000081D5                 db  44h ; D
.eh_frame:00000000000081D6                 db  0Eh
.eh_frame:00000000000081D7                 db  30h ; 0
.eh_frame:00000000000081D8                 db  86h
.eh_frame:00000000000081D9                 db    6
.eh_frame:00000000000081DA                 db  41h ; A
.eh_frame:00000000000081DB                 db  0Eh
.eh_frame:00000000000081DC                 db  38h ; 8
.eh_frame:00000000000081DD                 db  83h
.eh_frame:00000000000081DE                 db    7
.eh_frame:00000000000081DF                 db  44h ; D
.eh_frame:00000000000081E0                 db  0Eh
.eh_frame:00000000000081E1                 db  50h ; P
.eh_frame:00000000000081E2                 db    2
.eh_frame:00000000000081E3                 db 0A1h
.eh_frame:00000000000081E4                 db  0Ah
.eh_frame:00000000000081E5                 db  0Eh
.eh_frame:00000000000081E6                 db  38h ; 8
.eh_frame:00000000000081E7                 db  41h ; A
.eh_frame:00000000000081E8                 db  0Eh
.eh_frame:00000000000081E9                 db  30h ; 0
.eh_frame:00000000000081EA                 db  41h ; A
.eh_frame:00000000000081EB                 db  0Eh
.eh_frame:00000000000081EC                 db  28h ; (
.eh_frame:00000000000081ED                 db  42h ; B
.eh_frame:00000000000081EE                 db  0Eh
.eh_frame:00000000000081EF                 db  20h
.eh_frame:00000000000081F0                 db  42h ; B
.eh_frame:00000000000081F1                 db  0Eh
.eh_frame:00000000000081F2                 db  18h
.eh_frame:00000000000081F3                 db  42h ; B
.eh_frame:00000000000081F4                 db  0Eh
.eh_frame:00000000000081F5                 db  10h
.eh_frame:00000000000081F6                 db  42h ; B
.eh_frame:00000000000081F7                 db  0Eh
.eh_frame:00000000000081F8                 db    8
.eh_frame:00000000000081F9                 db  41h ; A
.eh_frame:00000000000081FA                 db  0Bh
.eh_frame:00000000000081FB                 db    0
.eh_frame:00000000000081FC                 db    0
.eh_frame:00000000000081FD                 db    0
.eh_frame:00000000000081FE                 db    0
.eh_frame:00000000000081FF                 db    0
.eh_frame:0000000000008200                 db  34h ; 4
.eh_frame:0000000000008201                 db    0
.eh_frame:0000000000008202                 db    0
.eh_frame:0000000000008203                 db    0
.eh_frame:0000000000008204                 db 0CCh
.eh_frame:0000000000008205                 db  0Bh
.eh_frame:0000000000008206                 db    0
.eh_frame:0000000000008207                 db    0
.eh_frame:0000000000008208                 db  58h ; X
.eh_frame:0000000000008209                 db 0DEh
.eh_frame:000000000000820A                 db 0FFh
.eh_frame:000000000000820B                 db 0FFh
.eh_frame:000000000000820C                 db  7Bh ; {
.eh_frame:000000000000820D                 db    0
.eh_frame:000000000000820E                 db    0
.eh_frame:000000000000820F                 db    0
.eh_frame:0000000000008210                 db    0
.eh_frame:0000000000008211                 db  42h ; B
.eh_frame:0000000000008212                 db  0Eh
.eh_frame:0000000000008213                 db  10h
.eh_frame:0000000000008214                 db  8Ch
.eh_frame:0000000000008215                 db    2
.eh_frame:0000000000008216                 db  41h ; A
.eh_frame:0000000000008217                 db  0Eh
.eh_frame:0000000000008218                 db  18h
.eh_frame:0000000000008219                 db  86h
.eh_frame:000000000000821A                 db    3
.eh_frame:000000000000821B                 db  41h ; A
.eh_frame:000000000000821C                 db  0Eh
.eh_frame:000000000000821D                 db  20h
.eh_frame:000000000000821E                 db  83h
.eh_frame:000000000000821F                 db    4
.eh_frame:0000000000008220                 db  7Dh ; }
.eh_frame:0000000000008221                 db  0Ah
.eh_frame:0000000000008222                 db  0Eh
.eh_frame:0000000000008223                 db  18h
.eh_frame:0000000000008224                 db  41h ; A
.eh_frame:0000000000008225                 db  0Eh
.eh_frame:0000000000008226                 db  10h
.eh_frame:0000000000008227                 db  42h ; B
.eh_frame:0000000000008228                 db  0Eh
.eh_frame:0000000000008229                 db    8
.eh_frame:000000000000822A                 db  44h ; D
.eh_frame:000000000000822B                 db  0Bh
.eh_frame:000000000000822C                 db  60h ; `
.eh_frame:000000000000822D                 db  0Ah
.eh_frame:000000000000822E                 db  0Eh
.eh_frame:000000000000822F                 db  18h
.eh_frame:0000000000008230                 db  41h ; A
.eh_frame:0000000000008231                 db  0Eh
.eh_frame:0000000000008232                 db  10h
.eh_frame:0000000000008233                 db  42h ; B
.eh_frame:0000000000008234                 db  0Eh
.eh_frame:0000000000008235                 db    8
.eh_frame:0000000000008236                 db  45h ; E
.eh_frame:0000000000008237                 db  0Bh
.eh_frame:0000000000008238                 db  1Ch
.eh_frame:0000000000008239                 db    0
.eh_frame:000000000000823A                 db    0
.eh_frame:000000000000823B                 db    0
.eh_frame:000000000000823C                 db    4
.eh_frame:000000000000823D                 db  0Ch
.eh_frame:000000000000823E                 db    0
.eh_frame:000000000000823F                 db    0
.eh_frame:0000000000008240                 db 0A0h
.eh_frame:0000000000008241                 db 0DEh
.eh_frame:0000000000008242                 db 0FFh
.eh_frame:0000000000008243                 db 0FFh
.eh_frame:0000000000008244                 db  40h ; @
.eh_frame:0000000000008245                 db    0
.eh_frame:0000000000008246                 db    0
.eh_frame:0000000000008247                 db    0
.eh_frame:0000000000008248                 db    0
.eh_frame:0000000000008249                 db  44h ; D
.eh_frame:000000000000824A                 db  0Eh
.eh_frame:000000000000824B                 db  10h
.eh_frame:000000000000824C                 db  83h
.eh_frame:000000000000824D                 db    2
.eh_frame:000000000000824E                 db  5Ah ; Z
.eh_frame:000000000000824F                 db  0Ah
.eh_frame:0000000000008250                 db  0Eh
.eh_frame:0000000000008251                 db    8
.eh_frame:0000000000008252                 db  4Ah ; J
.eh_frame:0000000000008253                 db  0Bh
.eh_frame:0000000000008254                 db  53h ; S
.eh_frame:0000000000008255                 db  0Eh
.eh_frame:0000000000008256                 db    8
.eh_frame:0000000000008257                 db    0
.eh_frame:0000000000008258                 db  2Ch ; ,
.eh_frame:0000000000008259                 db    0
.eh_frame:000000000000825A                 db    0
.eh_frame:000000000000825B                 db    0
.eh_frame:000000000000825C                 db  24h ; $
.eh_frame:000000000000825D                 db  0Ch
.eh_frame:000000000000825E                 db    0
.eh_frame:000000000000825F                 db    0
.eh_frame:0000000000008260                 db 0C0h
.eh_frame:0000000000008261                 db 0DEh
.eh_frame:0000000000008262                 db 0FFh
.eh_frame:0000000000008263                 db 0FFh
.eh_frame:0000000000008264                 db  57h ; W
.eh_frame:0000000000008265                 db    0
.eh_frame:0000000000008266                 db    0
.eh_frame:0000000000008267                 db    0
.eh_frame:0000000000008268                 db    0
.eh_frame:0000000000008269                 db  63h ; c
.eh_frame:000000000000826A                 db  0Eh
.eh_frame:000000000000826B                 db  10h
.eh_frame:000000000000826C                 db  8Ch
.eh_frame:000000000000826D                 db    2
.eh_frame:000000000000826E                 db  41h ; A
.eh_frame:000000000000826F                 db  0Eh
.eh_frame:0000000000008270                 db  18h
.eh_frame:0000000000008271                 db  86h
.eh_frame:0000000000008272                 db    3
.eh_frame:0000000000008273                 db  44h ; D
.eh_frame:0000000000008274                 db  0Eh
.eh_frame:0000000000008275                 db  20h
.eh_frame:0000000000008276                 db  83h
.eh_frame:0000000000008277                 db    4
.eh_frame:0000000000008278                 db  6Bh ; k
.eh_frame:0000000000008279                 db  0Eh
.eh_frame:000000000000827A                 db  18h
.eh_frame:000000000000827B                 db  41h ; A
.eh_frame:000000000000827C                 db  0Eh
.eh_frame:000000000000827D                 db  10h
.eh_frame:000000000000827E                 db  42h ; B
.eh_frame:000000000000827F                 db  0Eh
.eh_frame:0000000000008280                 db    8
.eh_frame:0000000000008281                 db    0
.eh_frame:0000000000008282                 db    0
.eh_frame:0000000000008283                 db    0
.eh_frame:0000000000008284                 db    0
.eh_frame:0000000000008285                 db    0
.eh_frame:0000000000008286                 db    0
.eh_frame:0000000000008287                 db    0
.eh_frame:0000000000008288                 db  44h ; D
.eh_frame:0000000000008289                 db    0
.eh_frame:000000000000828A                 db    0
.eh_frame:000000000000828B                 db    0
.eh_frame:000000000000828C                 db  54h ; T
.eh_frame:000000000000828D                 db  0Ch
.eh_frame:000000000000828E                 db    0
.eh_frame:000000000000828F                 db    0
.eh_frame:0000000000008290                 db 0F0h
.eh_frame:0000000000008291                 db 0DEh
.eh_frame:0000000000008292                 db 0FFh
.eh_frame:0000000000008293                 db 0FFh
.eh_frame:0000000000008294                 db  65h ; e
.eh_frame:0000000000008295                 db    0
.eh_frame:0000000000008296                 db    0
.eh_frame:0000000000008297                 db    0
.eh_frame:0000000000008298                 db    0
.eh_frame:0000000000008299                 db  42h ; B
.eh_frame:000000000000829A                 db  0Eh
.eh_frame:000000000000829B                 db  10h
.eh_frame:000000000000829C                 db  8Fh
.eh_frame:000000000000829D                 db    2
.eh_frame:000000000000829E                 db  42h ; B
.eh_frame:000000000000829F                 db  0Eh
.eh_frame:00000000000082A0                 db  18h
.eh_frame:00000000000082A1                 db  8Eh
.eh_frame:00000000000082A2                 db    3
.eh_frame:00000000000082A3                 db  45h ; E
.eh_frame:00000000000082A4                 db  0Eh
.eh_frame:00000000000082A5                 db  20h
.eh_frame:00000000000082A6                 db  8Dh
.eh_frame:00000000000082A7                 db    4
.eh_frame:00000000000082A8                 db  42h ; B
.eh_frame:00000000000082A9                 db  0Eh
.eh_frame:00000000000082AA                 db  28h ; (
.eh_frame:00000000000082AB                 db  8Ch
.eh_frame:00000000000082AC                 db    5
.eh_frame:00000000000082AD                 db  48h ; H
.eh_frame:00000000000082AE                 db  0Eh
.eh_frame:00000000000082AF                 db  30h ; 0
.eh_frame:00000000000082B0                 db  86h
.eh_frame:00000000000082B1                 db    6
.eh_frame:00000000000082B2                 db  48h ; H
.eh_frame:00000000000082B3                 db  0Eh
.eh_frame:00000000000082B4                 db  38h ; 8
.eh_frame:00000000000082B5                 db  83h
.eh_frame:00000000000082B6                 db    7
.eh_frame:00000000000082B7                 db  4Dh ; M
.eh_frame:00000000000082B8                 db  0Eh
.eh_frame:00000000000082B9                 db  40h ; @
.eh_frame:00000000000082BA                 db  72h ; r
.eh_frame:00000000000082BB                 db  0Eh
.eh_frame:00000000000082BC                 db  38h ; 8
.eh_frame:00000000000082BD                 db  41h ; A
.eh_frame:00000000000082BE                 db  0Eh
.eh_frame:00000000000082BF                 db  30h ; 0
.eh_frame:00000000000082C0                 db  41h ; A
.eh_frame:00000000000082C1                 db  0Eh
.eh_frame:00000000000082C2                 db  28h ; (
.eh_frame:00000000000082C3                 db  42h ; B
.eh_frame:00000000000082C4                 db  0Eh
.eh_frame:00000000000082C5                 db  20h
.eh_frame:00000000000082C6                 db  42h ; B
.eh_frame:00000000000082C7                 db  0Eh
.eh_frame:00000000000082C8                 db  18h
.eh_frame:00000000000082C9                 db  42h ; B
.eh_frame:00000000000082CA                 db  0Eh
.eh_frame:00000000000082CB                 db  10h
.eh_frame:00000000000082CC                 db  42h ; B
.eh_frame:00000000000082CD                 db  0Eh
.eh_frame:00000000000082CE                 db    8
.eh_frame:00000000000082CF                 db    0
.eh_frame:00000000000082D0                 db  14h
.eh_frame:00000000000082D1                 db    0
.eh_frame:00000000000082D2                 db    0
.eh_frame:00000000000082D3                 db    0
.eh_frame:00000000000082D4                 db  9Ch
.eh_frame:00000000000082D5                 db  0Ch
.eh_frame:00000000000082D6                 db    0
.eh_frame:00000000000082D7                 db    0
.eh_frame:00000000000082D8                 db  18h
.eh_frame:00000000000082D9                 db 0DFh
.eh_frame:00000000000082DA                 db 0FFh
.eh_frame:00000000000082DB                 db 0FFh
.eh_frame:00000000000082DC                 db    2
.eh_frame:00000000000082DD                 db    0
.eh_frame:00000000000082DE                 db    0
.eh_frame:00000000000082DF                 db    0
.eh_frame:00000000000082E0                 db    0
.eh_frame:00000000000082E1                 db    0
.eh_frame:00000000000082E2                 db    0
.eh_frame:00000000000082E3                 db    0
.eh_frame:00000000000082E4                 db    0
.eh_frame:00000000000082E5                 db    0
.eh_frame:00000000000082E6                 db    0
.eh_frame:00000000000082E7                 db    0
.eh_frame:00000000000082E8                 db  10h
.eh_frame:00000000000082E9                 db    0
.eh_frame:00000000000082EA                 db    0
.eh_frame:00000000000082EB                 db    0
.eh_frame:00000000000082EC                 db 0B4h
.eh_frame:00000000000082ED                 db  0Ch
.eh_frame:00000000000082EE                 db    0
.eh_frame:00000000000082EF                 db    0
.eh_frame:00000000000082F0                 db  10h
.eh_frame:00000000000082F1                 db 0DFh
.eh_frame:00000000000082F2                 db 0FFh
.eh_frame:00000000000082F3                 db 0FFh
.eh_frame:00000000000082F4                 db  0Eh
.eh_frame:00000000000082F5                 db    0
.eh_frame:00000000000082F6                 db    0
.eh_frame:00000000000082F7                 db    0
.eh_frame:00000000000082F8                 db    0
.eh_frame:00000000000082F9                 db    0
.eh_frame:00000000000082FA                 db    0
.eh_frame:00000000000082FB                 db    0
.eh_frame:00000000000082FC __FRAME_END__   db    0
.eh_frame:00000000000082FD                 db    0
.eh_frame:00000000000082FE                 db    0
.eh_frame:00000000000082FF                 db    0
.eh_frame:00000000000082FF _eh_frame       ends
.eh_frame:00000000000082FF
.init_array:0000000000208A50 ; ELF Initialization Function Table
.init_array:0000000000208A50 ; ===========================================================================
.init_array:0000000000208A50
.init_array:0000000000208A50 ; Segment type: Pure data
.init_array:0000000000208A50 ; Segment permissions: Read/Write
.init_array:0000000000208A50 _init_array     segment qword public 'DATA' use64
.init_array:0000000000208A50                 assume cs:_init_array
.init_array:0000000000208A50                 ;org 208A50h
.init_array:0000000000208A50 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000208A50                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000208A50                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000208A50 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000208A50
.fini_array:0000000000208A58 ; ELF Termination Function Table
.fini_array:0000000000208A58 ; ===========================================================================
.fini_array:0000000000208A58
.fini_array:0000000000208A58 ; Segment type: Pure data
.fini_array:0000000000208A58 ; Segment permissions: Read/Write
.fini_array:0000000000208A58 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000208A58                 assume cs:_fini_array
.fini_array:0000000000208A58                 ;org 208A58h
.fini_array:0000000000208A58 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000208A58                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000208A58 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000208A58
.data.rel.ro:0000000000208A60 ; ===========================================================================
.data.rel.ro:0000000000208A60
.data.rel.ro:0000000000208A60 ; Segment type: Pure data
.data.rel.ro:0000000000208A60 ; Segment permissions: Read/Write
.data.rel.ro:0000000000208A60 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000208A60                 assume cs:_data_rel_ro
.data.rel.ro:0000000000208A60                 ;org 208A60h
.data.rel.ro:0000000000208A60 ; struct option longopts
.data.rel.ro:0000000000208A60 longopts        dq offset aContext      ; name
.data.rel.ro:0000000000208A60                                         ; DATA XREF: main+10↑o
.data.rel.ro:0000000000208A60                 dd 0                    ; has_arg ; "context"
.data.rel.ro:0000000000208A60                 db 4 dup(0)
.data.rel.ro:0000000000208A60                 dq 0                    ; flag
.data.rel.ro:0000000000208A60                 dd 5Ah                  ; val
.data.rel.ro:0000000000208A60                 db 4 dup(0)
.data.rel.ro:0000000000208A80                 dq offset aInvalidGroup+8 ; "group"
.data.rel.ro:0000000000208A88                 db    0
.data.rel.ro:0000000000208A89                 db    0
.data.rel.ro:0000000000208A8A                 db    0
.data.rel.ro:0000000000208A8B                 db    0
.data.rel.ro:0000000000208A8C                 db    0
.data.rel.ro:0000000000208A8D                 db    0
.data.rel.ro:0000000000208A8E                 db    0
.data.rel.ro:0000000000208A8F                 db    0
.data.rel.ro:0000000000208A90                 db    0
.data.rel.ro:0000000000208A91                 db    0
.data.rel.ro:0000000000208A92                 db    0
.data.rel.ro:0000000000208A93                 db    0
.data.rel.ro:0000000000208A94                 db    0
.data.rel.ro:0000000000208A95                 db    0
.data.rel.ro:0000000000208A96                 db    0
.data.rel.ro:0000000000208A97                 db    0
.data.rel.ro:0000000000208A98                 db  67h ; g
.data.rel.ro:0000000000208A99                 db    0
.data.rel.ro:0000000000208A9A                 db    0
.data.rel.ro:0000000000208A9B                 db    0
.data.rel.ro:0000000000208A9C                 db    0
.data.rel.ro:0000000000208A9D                 db    0
.data.rel.ro:0000000000208A9E                 db    0
.data.rel.ro:0000000000208A9F                 db    0
.data.rel.ro:0000000000208AA0                 dq offset aGroups_0     ; "groups"
.data.rel.ro:0000000000208AA8                 db    0
.data.rel.ro:0000000000208AA9                 db    0
.data.rel.ro:0000000000208AAA                 db    0
.data.rel.ro:0000000000208AAB                 db    0
.data.rel.ro:0000000000208AAC                 db    0
.data.rel.ro:0000000000208AAD                 db    0
.data.rel.ro:0000000000208AAE                 db    0
.data.rel.ro:0000000000208AAF                 db    0
.data.rel.ro:0000000000208AB0                 db    0
.data.rel.ro:0000000000208AB1                 db    0
.data.rel.ro:0000000000208AB2                 db    0
.data.rel.ro:0000000000208AB3                 db    0
.data.rel.ro:0000000000208AB4                 db    0
.data.rel.ro:0000000000208AB5                 db    0
.data.rel.ro:0000000000208AB6                 db    0
.data.rel.ro:0000000000208AB7                 db    0
.data.rel.ro:0000000000208AB8                 db  47h ; G
.data.rel.ro:0000000000208AB9                 db    0
.data.rel.ro:0000000000208ABA                 db    0
.data.rel.ro:0000000000208ABB                 db    0
.data.rel.ro:0000000000208ABC                 db    0
.data.rel.ro:0000000000208ABD                 db    0
.data.rel.ro:0000000000208ABE                 db    0
.data.rel.ro:0000000000208ABF                 db    0
.data.rel.ro:0000000000208AC0                 dq offset aName         ; "name"
.data.rel.ro:0000000000208AC8                 db    0
.data.rel.ro:0000000000208AC9                 db    0
.data.rel.ro:0000000000208ACA                 db    0
.data.rel.ro:0000000000208ACB                 db    0
.data.rel.ro:0000000000208ACC                 db    0
.data.rel.ro:0000000000208ACD                 db    0
.data.rel.ro:0000000000208ACE                 db    0
.data.rel.ro:0000000000208ACF                 db    0
.data.rel.ro:0000000000208AD0                 db    0
.data.rel.ro:0000000000208AD1                 db    0
.data.rel.ro:0000000000208AD2                 db    0
.data.rel.ro:0000000000208AD3                 db    0
.data.rel.ro:0000000000208AD4                 db    0
.data.rel.ro:0000000000208AD5                 db    0
.data.rel.ro:0000000000208AD6                 db    0
.data.rel.ro:0000000000208AD7                 db    0
.data.rel.ro:0000000000208AD8                 db  6Eh ; n
.data.rel.ro:0000000000208AD9                 db    0
.data.rel.ro:0000000000208ADA                 db    0
.data.rel.ro:0000000000208ADB                 db    0
.data.rel.ro:0000000000208ADC                 db    0
.data.rel.ro:0000000000208ADD                 db    0
.data.rel.ro:0000000000208ADE                 db    0
.data.rel.ro:0000000000208ADF                 db    0
.data.rel.ro:0000000000208AE0                 dq offset aReal         ; "real"
.data.rel.ro:0000000000208AE8                 db    0
.data.rel.ro:0000000000208AE9                 db    0
.data.rel.ro:0000000000208AEA                 db    0
.data.rel.ro:0000000000208AEB                 db    0
.data.rel.ro:0000000000208AEC                 db    0
.data.rel.ro:0000000000208AED                 db    0
.data.rel.ro:0000000000208AEE                 db    0
.data.rel.ro:0000000000208AEF                 db    0
.data.rel.ro:0000000000208AF0                 db    0
.data.rel.ro:0000000000208AF1                 db    0
.data.rel.ro:0000000000208AF2                 db    0
.data.rel.ro:0000000000208AF3                 db    0
.data.rel.ro:0000000000208AF4                 db    0
.data.rel.ro:0000000000208AF5                 db    0
.data.rel.ro:0000000000208AF6                 db    0
.data.rel.ro:0000000000208AF7                 db    0
.data.rel.ro:0000000000208AF8                 db  72h ; r
.data.rel.ro:0000000000208AF9                 db    0
.data.rel.ro:0000000000208AFA                 db    0
.data.rel.ro:0000000000208AFB                 db    0
.data.rel.ro:0000000000208AFC                 db    0
.data.rel.ro:0000000000208AFD                 db    0
.data.rel.ro:0000000000208AFE                 db    0
.data.rel.ro:0000000000208AFF                 db    0
.data.rel.ro:0000000000208B00                 dq offset aInvalidUser+8 ; "user"
.data.rel.ro:0000000000208B08                 db    0
.data.rel.ro:0000000000208B09                 db    0
.data.rel.ro:0000000000208B0A                 db    0
.data.rel.ro:0000000000208B0B                 db    0
.data.rel.ro:0000000000208B0C                 db    0
.data.rel.ro:0000000000208B0D                 db    0
.data.rel.ro:0000000000208B0E                 db    0
.data.rel.ro:0000000000208B0F                 db    0
.data.rel.ro:0000000000208B10                 db    0
.data.rel.ro:0000000000208B11                 db    0
.data.rel.ro:0000000000208B12                 db    0
.data.rel.ro:0000000000208B13                 db    0
.data.rel.ro:0000000000208B14                 db    0
.data.rel.ro:0000000000208B15                 db    0
.data.rel.ro:0000000000208B16                 db    0
.data.rel.ro:0000000000208B17                 db    0
.data.rel.ro:0000000000208B18                 db  75h ; u
.data.rel.ro:0000000000208B19                 db    0
.data.rel.ro:0000000000208B1A                 db    0
.data.rel.ro:0000000000208B1B                 db    0
.data.rel.ro:0000000000208B1C                 db    0
.data.rel.ro:0000000000208B1D                 db    0
.data.rel.ro:0000000000208B1E                 db    0
.data.rel.ro:0000000000208B1F                 db    0
.data.rel.ro:0000000000208B20                 dq offset aZero         ; "zero"
.data.rel.ro:0000000000208B28                 db    0
.data.rel.ro:0000000000208B29                 db    0
.data.rel.ro:0000000000208B2A                 db    0
.data.rel.ro:0000000000208B2B                 db    0
.data.rel.ro:0000000000208B2C                 db    0
.data.rel.ro:0000000000208B2D                 db    0
.data.rel.ro:0000000000208B2E                 db    0
.data.rel.ro:0000000000208B2F                 db    0
.data.rel.ro:0000000000208B30                 db    0
.data.rel.ro:0000000000208B31                 db    0
.data.rel.ro:0000000000208B32                 db    0
.data.rel.ro:0000000000208B33                 db    0
.data.rel.ro:0000000000208B34                 db    0
.data.rel.ro:0000000000208B35                 db    0
.data.rel.ro:0000000000208B36                 db    0
.data.rel.ro:0000000000208B37                 db    0
.data.rel.ro:0000000000208B38                 db  7Ah ; z
.data.rel.ro:0000000000208B39                 db    0
.data.rel.ro:0000000000208B3A                 db    0
.data.rel.ro:0000000000208B3B                 db    0
.data.rel.ro:0000000000208B3C                 db    0
.data.rel.ro:0000000000208B3D                 db    0
.data.rel.ro:0000000000208B3E                 db    0
.data.rel.ro:0000000000208B3F                 db    0
.data.rel.ro:0000000000208B40                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000208B48                 db    0
.data.rel.ro:0000000000208B49                 db    0
.data.rel.ro:0000000000208B4A                 db    0
.data.rel.ro:0000000000208B4B                 db    0
.data.rel.ro:0000000000208B4C                 db    0
.data.rel.ro:0000000000208B4D                 db    0
.data.rel.ro:0000000000208B4E                 db    0
.data.rel.ro:0000000000208B4F                 db    0
.data.rel.ro:0000000000208B50                 db    0
.data.rel.ro:0000000000208B51                 db    0
.data.rel.ro:0000000000208B52                 db    0
.data.rel.ro:0000000000208B53                 db    0
.data.rel.ro:0000000000208B54                 db    0
.data.rel.ro:0000000000208B55                 db    0
.data.rel.ro:0000000000208B56                 db    0
.data.rel.ro:0000000000208B57                 db    0
.data.rel.ro:0000000000208B58                 db  7Eh ; ~
.data.rel.ro:0000000000208B59                 db 0FFh
.data.rel.ro:0000000000208B5A                 db 0FFh
.data.rel.ro:0000000000208B5B                 db 0FFh
.data.rel.ro:0000000000208B5C                 db    0
.data.rel.ro:0000000000208B5D                 db    0
.data.rel.ro:0000000000208B5E                 db    0
.data.rel.ro:0000000000208B5F                 db    0
.data.rel.ro:0000000000208B60                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000208B68                 db    0
.data.rel.ro:0000000000208B69                 db    0
.data.rel.ro:0000000000208B6A                 db    0
.data.rel.ro:0000000000208B6B                 db    0
.data.rel.ro:0000000000208B6C                 db    0
.data.rel.ro:0000000000208B6D                 db    0
.data.rel.ro:0000000000208B6E                 db    0
.data.rel.ro:0000000000208B6F                 db    0
.data.rel.ro:0000000000208B70                 db    0
.data.rel.ro:0000000000208B71                 db    0
.data.rel.ro:0000000000208B72                 db    0
.data.rel.ro:0000000000208B73                 db    0
.data.rel.ro:0000000000208B74                 db    0
.data.rel.ro:0000000000208B75                 db    0
.data.rel.ro:0000000000208B76                 db    0
.data.rel.ro:0000000000208B77                 db    0
.data.rel.ro:0000000000208B78                 db  7Dh ; }
.data.rel.ro:0000000000208B79                 db 0FFh
.data.rel.ro:0000000000208B7A                 db 0FFh
.data.rel.ro:0000000000208B7B                 db 0FFh
.data.rel.ro:0000000000208B7C                 db    0
.data.rel.ro:0000000000208B7D                 db    0
.data.rel.ro:0000000000208B7E                 db    0
.data.rel.ro:0000000000208B7F                 db    0
.data.rel.ro:0000000000208B80                 db    0
.data.rel.ro:0000000000208B81                 db    0
.data.rel.ro:0000000000208B82                 db    0
.data.rel.ro:0000000000208B83                 db    0
.data.rel.ro:0000000000208B84                 db    0
.data.rel.ro:0000000000208B85                 db    0
.data.rel.ro:0000000000208B86                 db    0
.data.rel.ro:0000000000208B87                 db    0
.data.rel.ro:0000000000208B88                 db    0
.data.rel.ro:0000000000208B89                 db    0
.data.rel.ro:0000000000208B8A                 db    0
.data.rel.ro:0000000000208B8B                 db    0
.data.rel.ro:0000000000208B8C                 db    0
.data.rel.ro:0000000000208B8D                 db    0
.data.rel.ro:0000000000208B8E                 db    0
.data.rel.ro:0000000000208B8F                 db    0
.data.rel.ro:0000000000208B90                 db    0
.data.rel.ro:0000000000208B91                 db    0
.data.rel.ro:0000000000208B92                 db    0
.data.rel.ro:0000000000208B93                 db    0
.data.rel.ro:0000000000208B94                 db    0
.data.rel.ro:0000000000208B95                 db    0
.data.rel.ro:0000000000208B96                 db    0
.data.rel.ro:0000000000208B97                 db    0
.data.rel.ro:0000000000208B98                 db    0
.data.rel.ro:0000000000208B99                 db    0
.data.rel.ro:0000000000208B9A                 db    0
.data.rel.ro:0000000000208B9B                 db    0
.data.rel.ro:0000000000208B9C                 db    0
.data.rel.ro:0000000000208B9D                 db    0
.data.rel.ro:0000000000208B9E                 db    0
.data.rel.ro:0000000000208B9F                 db    0
.data.rel.ro:0000000000208BA0                 public quoting_style_args
.data.rel.ro:0000000000208BA0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000208BA8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000208BB0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000208BB8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000208BC0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000208BC8                 dq offset aInvalidSpec+0Bh ; "c"
.data.rel.ro:0000000000208BD0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000208BD8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000208BE0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000208BE8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000208BF0                 db    0
.data.rel.ro:0000000000208BF1                 db    0
.data.rel.ro:0000000000208BF2                 db    0
.data.rel.ro:0000000000208BF3                 db    0
.data.rel.ro:0000000000208BF4                 db    0
.data.rel.ro:0000000000208BF5                 db    0
.data.rel.ro:0000000000208BF6                 db    0
.data.rel.ro:0000000000208BF7                 db    0
.data.rel.ro:0000000000208BF7 _data_rel_ro    ends
.data.rel.ro:0000000000208BF7
LOAD:0000000000208BF8 ; ELF Dynamic Information
LOAD:0000000000208BF8 ; ===========================================================================
LOAD:0000000000208BF8
LOAD:0000000000208BF8 ; Segment type: Pure data
LOAD:0000000000208BF8 ; Segment permissions: Read/Write
LOAD:0000000000208BF8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208BF8                 assume cs:LOAD
LOAD:0000000000208BF8                 ;org 208BF8h
LOAD:0000000000208BF8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000208BF8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000208BF8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000208C08                 Elf64_Dyn <0Ch, 15D8h>  ; DT_INIT
LOAD:0000000000208C18                 Elf64_Dyn <0Dh, 6210h>  ; DT_FINI
LOAD:0000000000208C28                 Elf64_Dyn <19h, 208A50h> ; DT_INIT_ARRAY
LOAD:0000000000208C38                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000208C48                 Elf64_Dyn <1Ah, 208A58h> ; DT_FINI_ARRAY
LOAD:0000000000208C58                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000208C68                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000208C78                 Elf64_Dyn <5, 950h>     ; DT_STRTAB
LOAD:0000000000208C88                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000208C98                 Elf64_Dyn <0Ah, 312h>   ; DT_STRSZ
LOAD:0000000000208CA8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000208CB8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000208CC8                 Elf64_Dyn <3, 208DE8h>  ; DT_PLTGOT
LOAD:0000000000208CD8                 Elf64_Dyn <2, 540h>     ; DT_PLTRELSZ
LOAD:0000000000208CE8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000208CF8                 Elf64_Dyn <17h, 1098h>  ; DT_JMPREL
LOAD:0000000000208D08                 Elf64_Dyn <7, 0D50h>    ; DT_RELA
LOAD:0000000000208D18                 Elf64_Dyn <8, 348h>     ; DT_RELASZ
LOAD:0000000000208D28                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000208D38                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000208D48                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000208D58                 Elf64_Dyn <6FFFFFFEh, 0CF0h> ; DT_VERNEED
LOAD:0000000000208D68                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000208D78                 Elf64_Dyn <6FFFFFF0h, 0C62h> ; DT_VERSYM
LOAD:0000000000208D88                 Elf64_Dyn <6FFFFFF9h, 19h> ; DT_RELACOUNT
LOAD:0000000000208D98                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000208DA8                 db    0
LOAD:0000000000208DA9                 db    0
LOAD:0000000000208DAA                 db    0
LOAD:0000000000208DAB                 db    0
LOAD:0000000000208DAC                 db    0
LOAD:0000000000208DAD                 db    0
LOAD:0000000000208DAE                 db    0
LOAD:0000000000208DAF                 db    0
LOAD:0000000000208DB0                 db    0
LOAD:0000000000208DB1                 db    0
LOAD:0000000000208DB2                 db    0
LOAD:0000000000208DB3                 db    0
LOAD:0000000000208DB4                 db    0
LOAD:0000000000208DB5                 db    0
LOAD:0000000000208DB6                 db    0
LOAD:0000000000208DB7                 db    0
LOAD:0000000000208DB8                 db    0
LOAD:0000000000208DB9                 db    0
LOAD:0000000000208DBA                 db    0
LOAD:0000000000208DBB                 db    0
LOAD:0000000000208DBC                 db    0
LOAD:0000000000208DBD                 db    0
LOAD:0000000000208DBE                 db    0
LOAD:0000000000208DBF                 db    0
LOAD:0000000000208DC0                 db    0
LOAD:0000000000208DC1                 db    0
LOAD:0000000000208DC2                 db    0
LOAD:0000000000208DC3                 db    0
LOAD:0000000000208DC4                 db    0
LOAD:0000000000208DC5                 db    0
LOAD:0000000000208DC6                 db    0
LOAD:0000000000208DC7                 db    0
LOAD:0000000000208DC8                 db    0
LOAD:0000000000208DC9                 db    0
LOAD:0000000000208DCA                 db    0
LOAD:0000000000208DCB                 db    0
LOAD:0000000000208DCC                 db    0
LOAD:0000000000208DCD                 db    0
LOAD:0000000000208DCE                 db    0
LOAD:0000000000208DCF                 db    0
LOAD:0000000000208DD0                 db    0
LOAD:0000000000208DD1                 db    0
LOAD:0000000000208DD2                 db    0
LOAD:0000000000208DD3                 db    0
LOAD:0000000000208DD4                 db    0
LOAD:0000000000208DD5                 db    0
LOAD:0000000000208DD6                 db    0
LOAD:0000000000208DD7                 db    0
LOAD:0000000000208DD8                 db    0
LOAD:0000000000208DD9                 db    0
LOAD:0000000000208DDA                 db    0
LOAD:0000000000208DDB                 db    0
LOAD:0000000000208DDC                 db    0
LOAD:0000000000208DDD                 db    0
LOAD:0000000000208DDE                 db    0
LOAD:0000000000208DDF                 db    0
LOAD:0000000000208DE0                 db    0
LOAD:0000000000208DE1                 db    0
LOAD:0000000000208DE2                 db    0
LOAD:0000000000208DE3                 db    0
LOAD:0000000000208DE4                 db    0
LOAD:0000000000208DE5                 db    0
LOAD:0000000000208DE6                 db    0
LOAD:0000000000208DE7                 db    0
LOAD:0000000000208DE7 LOAD            ends
LOAD:0000000000208DE7
.got:0000000000208DE8 ; ===========================================================================
.got:0000000000208DE8
.got:0000000000208DE8 ; Segment type: Pure data
.got:0000000000208DE8 ; Segment permissions: Read/Write
.got:0000000000208DE8 _got            segment qword public 'DATA' use64
.got:0000000000208DE8                 assume cs:_got
.got:0000000000208DE8                 ;org 208DE8h
.got:0000000000208DE8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000208DF0 qword_208DF0    dq 0                    ; DATA XREF: sub_15F0↑r
.got:0000000000208DF8 qword_208DF8    dq 0                    ; DATA XREF: sub_15F0+6↑r
.got:0000000000208E00 endgrent_ptr    dq offset endgrent      ; DATA XREF: _endgrent↑r
.got:0000000000208E08 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000208E10 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000208E18 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000208E20 __errno_location_ptr dq offset __errno_location
.got:0000000000208E20                                         ; DATA XREF: ___errno_location↑r
.got:0000000000208E28 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000208E30 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000208E38 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000208E40 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000208E48 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000208E50 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:0000000000208E58 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000208E58                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000208E60 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000208E68 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000208E68                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000208E70 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000208E78 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000208E78                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000208E80 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:0000000000208E88 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000208E90 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000208E98 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000208EA0 getgrgid_ptr    dq offset getgrgid      ; DATA XREF: _getgrgid↑r
.got:0000000000208EA8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000208EB0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000208EB8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000208EC0 __assert_fail_ptr dq offset __assert_fail
.got:0000000000208EC0                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000208EC8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000208ED0 geteuid_ptr     dq offset geteuid       ; DATA XREF: _geteuid↑r
.got:0000000000208ED8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000208EE0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000208EE0                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000208EE8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000208EF0 getpwnam_ptr    dq offset getpwnam      ; DATA XREF: _getpwnam↑r
.got:0000000000208EF8 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000208F00 getgrnam_ptr    dq offset getgrnam      ; DATA XREF: _getgrnam↑r
.got:0000000000208F08 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000208F10 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:0000000000208F18 getgroups_ptr   dq offset getgroups     ; DATA XREF: _getgroups↑r
.got:0000000000208F20 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000208F28 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000208F30 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000208F38 endpwent_ptr    dq offset endpwent      ; DATA XREF: _endpwent↑r
.got:0000000000208F40 getegid_ptr     dq offset getegid       ; DATA XREF: _getegid↑r
.got:0000000000208F48 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000208F50 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000208F58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000208F60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000208F68 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000208F70 getgrouplist_ptr dq offset getgrouplist ; DATA XREF: _getgrouplist↑r
.got:0000000000208F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000208F80 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:0000000000208F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000208F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000208F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000208FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000208FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000208FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000208FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000208FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000208FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000208FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000208FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000208FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000208FC8                                         ; DATA XREF: start+24↑r
.got:0000000000208FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000208FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000208FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000208FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000208FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000208FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000208FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000208FE0 _got            ends
.got:0000000000208FE0
LOAD:0000000000208FE8 ; ===========================================================================
LOAD:0000000000208FE8
LOAD:0000000000208FE8 ; Segment type: Pure data
LOAD:0000000000208FE8 ; Segment permissions: Read/Write
LOAD:0000000000208FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000208FE8                 assume cs:LOAD
LOAD:0000000000208FE8                 ;org 208FE8h
LOAD:0000000000208FE8                 align 20h
LOAD:0000000000208FE8 LOAD            ends
LOAD:0000000000208FE8
.data:0000000000209000 ; ===========================================================================
.data:0000000000209000
.data:0000000000209000 ; Segment type: Pure data
.data:0000000000209000 ; Segment permissions: Read/Write
.data:0000000000209000 _data           segment align_32 public 'DATA' use64
.data:0000000000209000                 assume cs:_data
.data:0000000000209000                 ;org 209000h
.data:0000000000209000                 public __data_start ; weak
.data:0000000000209000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000209000                                         ; data_start
.data:0000000000209001                 db    0
.data:0000000000209002                 db    0
.data:0000000000209003                 db    0
.data:0000000000209004                 db    0
.data:0000000000209005                 db    0
.data:0000000000209006                 db    0
.data:0000000000209007                 db    0
.data:0000000000209008                 public __dso_handle
.data:0000000000209008 ; void *_dso_handle
.data:0000000000209008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000209008                                         ; atexit↑r ...
.data:0000000000209010 ok              db 1                    ; DATA XREF: main+220↑w
.data:0000000000209010                                         ; main:loc_1CBB↑r ...
.data:0000000000209011                 align 8
.data:0000000000209018                 public Version
.data:0000000000209018 Version         dq offset a831          ; DATA XREF: main+D3↑r
.data:0000000000209018                                         ; "8.31"
.data:0000000000209020                 public exit_failure
.data:0000000000209020 ; int exit_failure
.data:0000000000209020 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2CD2↑r
.data:0000000000209020                                         ; xalloc_die+17↑r
.data:0000000000209024                 align 20h
.data:0000000000209040                 public quote_quoting_options
.data:0000000000209040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000209040                                         ; quote_mem↑o ...
.data:0000000000209041                 db    0
.data:0000000000209042                 db    0
.data:0000000000209043                 db    0
.data:0000000000209044                 db    0
.data:0000000000209045                 db    0
.data:0000000000209046                 db    0
.data:0000000000209047                 db    0
.data:0000000000209048                 db    0
.data:0000000000209049                 db    0
.data:000000000020904A                 db    0
.data:000000000020904B                 db    0
.data:000000000020904C                 db    0
.data:000000000020904D                 db    0
.data:000000000020904E                 db    0
.data:000000000020904F                 db    0
.data:0000000000209050                 db    0
.data:0000000000209051                 db    0
.data:0000000000209052                 db    0
.data:0000000000209053                 db    0
.data:0000000000209054                 db    0
.data:0000000000209055                 db    0
.data:0000000000209056                 db    0
.data:0000000000209057                 db    0
.data:0000000000209058                 db    0
.data:0000000000209059                 db    0
.data:000000000020905A                 db    0
.data:000000000020905B                 db    0
.data:000000000020905C                 db    0
.data:000000000020905D                 db    0
.data:000000000020905E                 db    0
.data:000000000020905F                 db    0
.data:0000000000209060                 db    0
.data:0000000000209061                 db    0
.data:0000000000209062                 db    0
.data:0000000000209063                 db    0
.data:0000000000209064                 db    0
.data:0000000000209065                 db    0
.data:0000000000209066                 db    0
.data:0000000000209067                 db    0
.data:0000000000209068                 db    0
.data:0000000000209069                 db    0
.data:000000000020906A                 db    0
.data:000000000020906B                 db    0
.data:000000000020906C                 db    0
.data:000000000020906D                 db    0
.data:000000000020906E                 db    0
.data:000000000020906F                 db    0
.data:0000000000209070                 db    0
.data:0000000000209071                 db    0
.data:0000000000209072                 db    0
.data:0000000000209073                 db    0
.data:0000000000209074                 db    0
.data:0000000000209075                 db    0
.data:0000000000209076                 db    0
.data:0000000000209077                 db    0
.data:0000000000209078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000209078                                         ; quotearg_n_options:loc_419D↑r ...
.data:000000000020907C                 align 20h
.data:0000000000209080 ; void *slotvec
.data:0000000000209080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000209080                                         ; quotearg_n_options+76↑w ...
.data:0000000000209088                 align 10h
.data:0000000000209090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000209090                                         ; quotearg_n_options+187↑r ...
.data:0000000000209098 off_209098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000209098 _data           ends
.data:0000000000209098
.bss:00000000002090A0 ; ===========================================================================
.bss:00000000002090A0
.bss:00000000002090A0 ; Segment type: Uninitialized
.bss:00000000002090A0 ; Segment permissions: Read/Write
.bss:00000000002090A0 _bss            segment align_32 public 'BSS' use64
.bss:00000000002090A0                 assume cs:_bss
.bss:00000000002090A0                 ;org 2090A0h
.bss:00000000002090A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00000000002090A0                 public __bss_start ; weak
.bss:00000000002090A0 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000008C0↑o
.bss:00000000002090A0                                         ; LOAD:0000000000000908↑o ...
.bss:00000000002090A0                                         ; Alternative name is '__TMC_END__'
.bss:00000000002090A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:00000000002090A0                                         ; _edata
.bss:00000000002090A0                                         ; Copy of shared data
.bss:00000000002090A8                 public stdout@@GLIBC_2_2_5
.bss:00000000002090A8 ; FILE *stdout
.bss:00000000002090A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008A8↑o
.bss:00000000002090A8                                         ; main+CC↑r ...
.bss:00000000002090A8                                         ; Alternative name is 'stdout'
.bss:00000000002090A8                                         ; Copy of shared data
.bss:00000000002090B0                 public optind@@GLIBC_2_2_5
.bss:00000000002090B0 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000938↑o
.bss:00000000002090B0                                         ; main+18A↑r ...
.bss:00000000002090B0                                         ; Alternative name is 'optind'
.bss:00000000002090B0                                         ; Copy of shared data
.bss:00000000002090B4                 align 8
.bss:00000000002090B8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002090B8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002090B8                                         ; DATA XREF: LOAD:00000000000008D8↑o
.bss:00000000002090B8                                         ; LOAD:00000000000008F0↑o ...
.bss:00000000002090B8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002090B8                                         ; Copy of shared data
.bss:00000000002090C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002090C0 ; FILE *stderr
.bss:00000000002090C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000920↑o
.bss:00000000002090C0                                         ; usage+3D↑r ...
.bss:00000000002090C0                                         ; Alternative name is 'stderr'
.bss:00000000002090C0                                         ; Copy of shared data
.bss:00000000002090C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002090C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002090C9                 align 10h
.bss:00000000002090D0 buf_7122        db    ? ;               ; DATA XREF: print_stuff+235↑o
.bss:00000000002090D0                                         ; print_stuff:loc_2358↑o ...
.bss:00000000002090D1                 db    ? ;
.bss:00000000002090D2                 db    ? ;
.bss:00000000002090D3                 db    ? ;
.bss:00000000002090D4                 db    ? ;
.bss:00000000002090D5                 db    ? ;
.bss:00000000002090D6                 db    ? ;
.bss:00000000002090D7                 db    ? ;
.bss:00000000002090D8                 db    ? ;
.bss:00000000002090D9                 db    ? ;
.bss:00000000002090DA                 db    ? ;
.bss:00000000002090DB                 db    ? ;
.bss:00000000002090DC                 db    ? ;
.bss:00000000002090DD                 db    ? ;
.bss:00000000002090DE                 db    ? ;
.bss:00000000002090DF                 db    ? ;
.bss:00000000002090E0                 db    ? ;
.bss:00000000002090E1                 db    ? ;
.bss:00000000002090E2                 db    ? ;
.bss:00000000002090E3                 db    ? ;
.bss:00000000002090E4                 db    ? ;
.bss:00000000002090E5                 db    ? ;
.bss:00000000002090E6                 db    ? ;
.bss:00000000002090E7                 db    ? ;
.bss:00000000002090E8                 db    ? ;
.bss:00000000002090E9                 db    ? ;
.bss:00000000002090EA                 db    ? ;
.bss:00000000002090EB                 db    ? ;
.bss:00000000002090EC                 db    ? ;
.bss:00000000002090ED                 db    ? ;
.bss:00000000002090EE                 db    ? ;
.bss:00000000002090EF                 db    ? ;
.bss:00000000002090F0 buf_7126        db    ? ;               ; DATA XREF: print_stuff:loc_209B↑o
.bss:00000000002090F0                                         ; print_stuff+1D2↑o ...
.bss:00000000002090F1                 db    ? ;
.bss:00000000002090F2                 db    ? ;
.bss:00000000002090F3                 db    ? ;
.bss:00000000002090F4                 db    ? ;
.bss:00000000002090F5                 db    ? ;
.bss:00000000002090F6                 db    ? ;
.bss:00000000002090F7                 db    ? ;
.bss:00000000002090F8                 db    ? ;
.bss:00000000002090F9                 db    ? ;
.bss:00000000002090FA                 db    ? ;
.bss:00000000002090FB                 db    ? ;
.bss:00000000002090FC                 db    ? ;
.bss:00000000002090FD                 db    ? ;
.bss:00000000002090FE                 db    ? ;
.bss:00000000002090FF                 db    ? ;
.bss:0000000000209100                 db    ? ;
.bss:0000000000209101                 db    ? ;
.bss:0000000000209102                 db    ? ;
.bss:0000000000209103                 db    ? ;
.bss:0000000000209104                 db    ? ;
.bss:0000000000209105                 db    ? ;
.bss:0000000000209106                 db    ? ;
.bss:0000000000209107                 db    ? ;
.bss:0000000000209108 ; __gid_t egid
.bss:0000000000209108 egid            dd ?                    ; DATA XREF: main+297↑w
.bss:0000000000209108                                         ; main+2F6↑w ...
.bss:000000000020910C ; __gid_t rgid
.bss:000000000020910C rgid            dd ?                    ; DATA XREF: main+29D↑w
.bss:000000000020910C                                         ; main+315↑w ...
.bss:0000000000209110 ; __uid_t euid
.bss:0000000000209110 euid            dd ?                    ; DATA XREF: main+1CE↑o
.bss:0000000000209110                                         ; main+25E↑r ...
.bss:0000000000209114 ; __uid_t ruid
.bss:0000000000209114 ruid            dd ?                    ; DATA XREF: main+28D↑w
.bss:0000000000209114                                         ; main+3ED↑w ...
.bss:0000000000209118 use_name        db ?                    ; DATA XREF: main+A4↑w
.bss:0000000000209118                                         ; main+34E↑r ...
.bss:0000000000209119 multiple_users  db ?                    ; DATA XREF: main+1D5↑w
.bss:0000000000209119                                         ; print_stuff+8E↑r
.bss:000000000020911A just_user       db ?                    ; DATA XREF: main:loc_1AF8↑w
.bss:000000000020911A                                         ; main+17B↑r ...
.bss:000000000020911B use_real        db ?                    ; DATA XREF: main:loc_1AE8↑w
.bss:000000000020911B                                         ; main:loc_1CD1↑r ...
.bss:000000000020911C just_group      db ?                    ; DATA XREF: main:loc_1AD8↑w
.bss:000000000020911C                                         ; main:loc_1B04↑r ...
.bss:000000000020911D just_group_list db ?                    ; DATA XREF: main+139↑w
.bss:000000000020911D                                         ; main+182↑r ...
.bss:000000000020911E opt_zero        db ?                    ; DATA XREF: main+11E↑w
.bss:000000000020911E                                         ; main+35B↑r ...
.bss:000000000020911F                 align 20h
.bss:0000000000209120 buf_6964        db    ? ;               ; DATA XREF: print_group:loc_29D0↑o
.bss:0000000000209121                 db    ? ;
.bss:0000000000209122                 db    ? ;
.bss:0000000000209123                 db    ? ;
.bss:0000000000209124                 db    ? ;
.bss:0000000000209125                 db    ? ;
.bss:0000000000209126                 db    ? ;
.bss:0000000000209127                 db    ? ;
.bss:0000000000209128                 db    ? ;
.bss:0000000000209129                 db    ? ;
.bss:000000000020912A                 db    ? ;
.bss:000000000020912B                 db    ? ;
.bss:000000000020912C                 db    ? ;
.bss:000000000020912D                 db    ? ;
.bss:000000000020912E                 db    ? ;
.bss:000000000020912F                 db    ? ;
.bss:0000000000209130                 db    ? ;
.bss:0000000000209131                 db    ? ;
.bss:0000000000209132                 db    ? ;
.bss:0000000000209133                 db    ? ;
.bss:0000000000209134                 db    ? ;
.bss:0000000000209135                 db    ? ;
.bss:0000000000209136                 db    ? ;
.bss:0000000000209137                 db    ? ;
.bss:0000000000209138 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:0000000000209138                                         ; close_stdout+1B↑r
.bss:0000000000209139                 align 20h
.bss:0000000000209140 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:0000000000209140                                         ; close_stdout+56↑r
.bss:0000000000209148                 public program_name
.bss:0000000000209148 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:0000000000209148                                         ; set_program_name:loc_2DBD↑w
.bss:0000000000209150                 align 20h
.bss:0000000000209160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000209160                                         ; quotearg_free+46↑o ...
.bss:0000000000209161                 db    ? ;
.bss:0000000000209162                 db    ? ;
.bss:0000000000209163                 db    ? ;
.bss:0000000000209164                 db    ? ;
.bss:0000000000209165                 db    ? ;
.bss:0000000000209166                 db    ? ;
.bss:0000000000209167                 db    ? ;
.bss:0000000000209168                 db    ? ;
.bss:0000000000209169                 db    ? ;
.bss:000000000020916A                 db    ? ;
.bss:000000000020916B                 db    ? ;
.bss:000000000020916C                 db    ? ;
.bss:000000000020916D                 db    ? ;
.bss:000000000020916E                 db    ? ;
.bss:000000000020916F                 db    ? ;
.bss:0000000000209170                 db    ? ;
.bss:0000000000209171                 db    ? ;
.bss:0000000000209172                 db    ? ;
.bss:0000000000209173                 db    ? ;
.bss:0000000000209174                 db    ? ;
.bss:0000000000209175                 db    ? ;
.bss:0000000000209176                 db    ? ;
.bss:0000000000209177                 db    ? ;
.bss:0000000000209178                 db    ? ;
.bss:0000000000209179                 db    ? ;
.bss:000000000020917A                 db    ? ;
.bss:000000000020917B                 db    ? ;
.bss:000000000020917C                 db    ? ;
.bss:000000000020917D                 db    ? ;
.bss:000000000020917E                 db    ? ;
.bss:000000000020917F                 db    ? ;
.bss:0000000000209180                 db    ? ;
.bss:0000000000209181                 db    ? ;
.bss:0000000000209182                 db    ? ;
.bss:0000000000209183                 db    ? ;
.bss:0000000000209184                 db    ? ;
.bss:0000000000209185                 db    ? ;
.bss:0000000000209186                 db    ? ;
.bss:0000000000209187                 db    ? ;
.bss:0000000000209188                 db    ? ;
.bss:0000000000209189                 db    ? ;
.bss:000000000020918A                 db    ? ;
.bss:000000000020918B                 db    ? ;
.bss:000000000020918C                 db    ? ;
.bss:000000000020918D                 db    ? ;
.bss:000000000020918E                 db    ? ;
.bss:000000000020918F                 db    ? ;
.bss:0000000000209190                 db    ? ;
.bss:0000000000209191                 db    ? ;
.bss:0000000000209192                 db    ? ;
.bss:0000000000209193                 db    ? ;
.bss:0000000000209194                 db    ? ;
.bss:0000000000209195                 db    ? ;
.bss:0000000000209196                 db    ? ;
.bss:0000000000209197                 db    ? ;
.bss:0000000000209198                 db    ? ;
.bss:0000000000209199                 db    ? ;
.bss:000000000020919A                 db    ? ;
.bss:000000000020919B                 db    ? ;
.bss:000000000020919C                 db    ? ;
.bss:000000000020919D                 db    ? ;
.bss:000000000020919E                 db    ? ;
.bss:000000000020919F                 db    ? ;
.bss:00000000002091A0                 db    ? ;
.bss:00000000002091A1                 db    ? ;
.bss:00000000002091A2                 db    ? ;
.bss:00000000002091A3                 db    ? ;
.bss:00000000002091A4                 db    ? ;
.bss:00000000002091A5                 db    ? ;
.bss:00000000002091A6                 db    ? ;
.bss:00000000002091A7                 db    ? ;
.bss:00000000002091A8                 db    ? ;
.bss:00000000002091A9                 db    ? ;
.bss:00000000002091AA                 db    ? ;
.bss:00000000002091AB                 db    ? ;
.bss:00000000002091AC                 db    ? ;
.bss:00000000002091AD                 db    ? ;
.bss:00000000002091AE                 db    ? ;
.bss:00000000002091AF                 db    ? ;
.bss:00000000002091B0                 db    ? ;
.bss:00000000002091B1                 db    ? ;
.bss:00000000002091B2                 db    ? ;
.bss:00000000002091B3                 db    ? ;
.bss:00000000002091B4                 db    ? ;
.bss:00000000002091B5                 db    ? ;
.bss:00000000002091B6                 db    ? ;
.bss:00000000002091B7                 db    ? ;
.bss:00000000002091B8                 db    ? ;
.bss:00000000002091B9                 db    ? ;
.bss:00000000002091BA                 db    ? ;
.bss:00000000002091BB                 db    ? ;
.bss:00000000002091BC                 db    ? ;
.bss:00000000002091BD                 db    ? ;
.bss:00000000002091BE                 db    ? ;
.bss:00000000002091BF                 db    ? ;
.bss:00000000002091C0                 db    ? ;
.bss:00000000002091C1                 db    ? ;
.bss:00000000002091C2                 db    ? ;
.bss:00000000002091C3                 db    ? ;
.bss:00000000002091C4                 db    ? ;
.bss:00000000002091C5                 db    ? ;
.bss:00000000002091C6                 db    ? ;
.bss:00000000002091C7                 db    ? ;
.bss:00000000002091C8                 db    ? ;
.bss:00000000002091C9                 db    ? ;
.bss:00000000002091CA                 db    ? ;
.bss:00000000002091CB                 db    ? ;
.bss:00000000002091CC                 db    ? ;
.bss:00000000002091CD                 db    ? ;
.bss:00000000002091CE                 db    ? ;
.bss:00000000002091CF                 db    ? ;
.bss:00000000002091D0                 db    ? ;
.bss:00000000002091D1                 db    ? ;
.bss:00000000002091D2                 db    ? ;
.bss:00000000002091D3                 db    ? ;
.bss:00000000002091D4                 db    ? ;
.bss:00000000002091D5                 db    ? ;
.bss:00000000002091D6                 db    ? ;
.bss:00000000002091D7                 db    ? ;
.bss:00000000002091D8                 db    ? ;
.bss:00000000002091D9                 db    ? ;
.bss:00000000002091DA                 db    ? ;
.bss:00000000002091DB                 db    ? ;
.bss:00000000002091DC                 db    ? ;
.bss:00000000002091DD                 db    ? ;
.bss:00000000002091DE                 db    ? ;
.bss:00000000002091DF                 db    ? ;
.bss:00000000002091E0                 db    ? ;
.bss:00000000002091E1                 db    ? ;
.bss:00000000002091E2                 db    ? ;
.bss:00000000002091E3                 db    ? ;
.bss:00000000002091E4                 db    ? ;
.bss:00000000002091E5                 db    ? ;
.bss:00000000002091E6                 db    ? ;
.bss:00000000002091E7                 db    ? ;
.bss:00000000002091E8                 db    ? ;
.bss:00000000002091E9                 db    ? ;
.bss:00000000002091EA                 db    ? ;
.bss:00000000002091EB                 db    ? ;
.bss:00000000002091EC                 db    ? ;
.bss:00000000002091ED                 db    ? ;
.bss:00000000002091EE                 db    ? ;
.bss:00000000002091EF                 db    ? ;
.bss:00000000002091F0                 db    ? ;
.bss:00000000002091F1                 db    ? ;
.bss:00000000002091F2                 db    ? ;
.bss:00000000002091F3                 db    ? ;
.bss:00000000002091F4                 db    ? ;
.bss:00000000002091F5                 db    ? ;
.bss:00000000002091F6                 db    ? ;
.bss:00000000002091F7                 db    ? ;
.bss:00000000002091F8                 db    ? ;
.bss:00000000002091F9                 db    ? ;
.bss:00000000002091FA                 db    ? ;
.bss:00000000002091FB                 db    ? ;
.bss:00000000002091FC                 db    ? ;
.bss:00000000002091FD                 db    ? ;
.bss:00000000002091FE                 db    ? ;
.bss:00000000002091FF                 db    ? ;
.bss:0000000000209200                 db    ? ;
.bss:0000000000209201                 db    ? ;
.bss:0000000000209202                 db    ? ;
.bss:0000000000209203                 db    ? ;
.bss:0000000000209204                 db    ? ;
.bss:0000000000209205                 db    ? ;
.bss:0000000000209206                 db    ? ;
.bss:0000000000209207                 db    ? ;
.bss:0000000000209208                 db    ? ;
.bss:0000000000209209                 db    ? ;
.bss:000000000020920A                 db    ? ;
.bss:000000000020920B                 db    ? ;
.bss:000000000020920C                 db    ? ;
.bss:000000000020920D                 db    ? ;
.bss:000000000020920E                 db    ? ;
.bss:000000000020920F                 db    ? ;
.bss:0000000000209210                 db    ? ;
.bss:0000000000209211                 db    ? ;
.bss:0000000000209212                 db    ? ;
.bss:0000000000209213                 db    ? ;
.bss:0000000000209214                 db    ? ;
.bss:0000000000209215                 db    ? ;
.bss:0000000000209216                 db    ? ;
.bss:0000000000209217                 db    ? ;
.bss:0000000000209218                 db    ? ;
.bss:0000000000209219                 db    ? ;
.bss:000000000020921A                 db    ? ;
.bss:000000000020921B                 db    ? ;
.bss:000000000020921C                 db    ? ;
.bss:000000000020921D                 db    ? ;
.bss:000000000020921E                 db    ? ;
.bss:000000000020921F                 db    ? ;
.bss:0000000000209220                 db    ? ;
.bss:0000000000209221                 db    ? ;
.bss:0000000000209222                 db    ? ;
.bss:0000000000209223                 db    ? ;
.bss:0000000000209224                 db    ? ;
.bss:0000000000209225                 db    ? ;
.bss:0000000000209226                 db    ? ;
.bss:0000000000209227                 db    ? ;
.bss:0000000000209228                 db    ? ;
.bss:0000000000209229                 db    ? ;
.bss:000000000020922A                 db    ? ;
.bss:000000000020922B                 db    ? ;
.bss:000000000020922C                 db    ? ;
.bss:000000000020922D                 db    ? ;
.bss:000000000020922E                 db    ? ;
.bss:000000000020922F                 db    ? ;
.bss:0000000000209230                 db    ? ;
.bss:0000000000209231                 db    ? ;
.bss:0000000000209232                 db    ? ;
.bss:0000000000209233                 db    ? ;
.bss:0000000000209234                 db    ? ;
.bss:0000000000209235                 db    ? ;
.bss:0000000000209236                 db    ? ;
.bss:0000000000209237                 db    ? ;
.bss:0000000000209238                 db    ? ;
.bss:0000000000209239                 db    ? ;
.bss:000000000020923A                 db    ? ;
.bss:000000000020923B                 db    ? ;
.bss:000000000020923C                 db    ? ;
.bss:000000000020923D                 db    ? ;
.bss:000000000020923E                 db    ? ;
.bss:000000000020923F                 db    ? ;
.bss:0000000000209240                 db    ? ;
.bss:0000000000209241                 db    ? ;
.bss:0000000000209242                 db    ? ;
.bss:0000000000209243                 db    ? ;
.bss:0000000000209244                 db    ? ;
.bss:0000000000209245                 db    ? ;
.bss:0000000000209246                 db    ? ;
.bss:0000000000209247                 db    ? ;
.bss:0000000000209248                 db    ? ;
.bss:0000000000209249                 db    ? ;
.bss:000000000020924A                 db    ? ;
.bss:000000000020924B                 db    ? ;
.bss:000000000020924C                 db    ? ;
.bss:000000000020924D                 db    ? ;
.bss:000000000020924E                 db    ? ;
.bss:000000000020924F                 db    ? ;
.bss:0000000000209250                 db    ? ;
.bss:0000000000209251                 db    ? ;
.bss:0000000000209252                 db    ? ;
.bss:0000000000209253                 db    ? ;
.bss:0000000000209254                 db    ? ;
.bss:0000000000209255                 db    ? ;
.bss:0000000000209256                 db    ? ;
.bss:0000000000209257                 db    ? ;
.bss:0000000000209258                 db    ? ;
.bss:0000000000209259                 db    ? ;
.bss:000000000020925A                 db    ? ;
.bss:000000000020925B                 db    ? ;
.bss:000000000020925C                 db    ? ;
.bss:000000000020925D                 db    ? ;
.bss:000000000020925E                 db    ? ;
.bss:000000000020925F                 db    ? ;
.bss:0000000000209260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000209260                                         ; get_quoting_style↑o ...
.bss:0000000000209270 xmmword_209270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000209270                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000209280 xmmword_209280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000209280                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000209290 qword_209290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000209290                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000209290 _bss            ends
.bss:0000000000209290
.prgend:0000000000209298 ; ===========================================================================
.prgend:0000000000209298
.prgend:0000000000209298 ; Segment type: Zero-length
.prgend:0000000000209298 _prgend         segment byte public '' use64
.prgend:0000000000209298 _end            label byte
.prgend:0000000000209298 _prgend         ends
.prgend:0000000000209298
extern:00000000002092A0 ; ===========================================================================
extern:00000000002092A0
extern:00000000002092A0 ; Segment type: Externs
extern:00000000002092A0 ; extern
extern:00000000002092A0 ; void endgrent(void)
extern:00000000002092A0                 extrn endgrent:near     ; CODE XREF: _endgrent↑j
extern:00000000002092A0                                         ; DATA XREF: .got:endgrent_ptr↑o
extern:00000000002092A8 ; char *getenv(const char *name)
extern:00000000002092A8                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:00000000002092A8                                         ; DATA XREF: .got:getenv_ptr↑o
extern:00000000002092B0 ; void free(void *ptr)
extern:00000000002092B0                 extrn free:near         ; CODE XREF: _free↑j
extern:00000000002092B0                                         ; DATA XREF: .got:free_ptr↑o
extern:00000000002092B8 ; void __noreturn abort(void)
extern:00000000002092B8                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00000000002092B8                                         ; DATA XREF: .got:abort_ptr↑o
extern:00000000002092C0 ; int *_errno_location(void)
extern:00000000002092C0                 extrn __errno_location:near
extern:00000000002092C0                                         ; CODE XREF: ___errno_location↑j
extern:00000000002092C0                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:00000000002092C8 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:00000000002092C8                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:00000000002092C8                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:00000000002092D0 ; void __noreturn exit(int status)
extern:00000000002092D0                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:00000000002092D0                                         ; DATA XREF: .got:_exit_ptr↑o
extern:00000000002092D8 ; size_t _fpending(FILE *fp)
extern:00000000002092D8                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:00000000002092D8                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:00000000002092E0 ; char *textdomain(const char *domainname)
extern:00000000002092E0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:00000000002092E0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:00000000002092E8 ; int fclose(FILE *stream)
extern:00000000002092E8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:00000000002092E8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002092F0 ; struct passwd *getpwuid(__uid_t uid)
extern:00000000002092F0                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:00000000002092F0                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:00000000002092F8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002092F8                 extrn bindtextdomain:near
extern:00000000002092F8                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002092F8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000209300 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000209300                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000209300                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000209308 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000209308                 extrn __ctype_get_mb_cur_max:near
extern:0000000000209308                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000209308                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000209310 ; size_t strlen(const char *s)
extern:0000000000209310                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000209310                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000209318                 extrn __stack_chk_fail:near
extern:0000000000209318                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000209318                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000209320 ; __uid_t getuid(void)
extern:0000000000209320                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:0000000000209320                                         ; DATA XREF: .got:getuid_ptr↑o
extern:0000000000209328 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000209328                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000209328                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:0000000000209330 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:0000000000209330                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:0000000000209330                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:0000000000209338 ; char *strchr(const char *s, int c)
extern:0000000000209338                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:0000000000209338                                         ; DATA XREF: .got:strchr_ptr↑o
extern:0000000000209340 ; struct group *getgrgid(__gid_t gid)
extern:0000000000209340                 extrn getgrgid:near     ; CODE XREF: _getgrgid↑j
extern:0000000000209340                                         ; DATA XREF: .got:getgrgid_ptr↑o
extern:0000000000209348 ; int _overflow(_IO_FILE *, int)
extern:0000000000209348                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:0000000000209348                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:0000000000209350 ; char *strrchr(const char *s, int c)
extern:0000000000209350                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:0000000000209350                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:0000000000209358 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:0000000000209358                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:0000000000209358                                         ; DATA XREF: .got:lseek_ptr↑o
extern:0000000000209360 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0000000000209360                 extrn __assert_fail:near
extern:0000000000209360                                         ; CODE XREF: ___assert_fail↑j
extern:0000000000209360                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000000000209368 ; void *memset(void *s, int c, size_t n)
extern:0000000000209368                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000000000209368                                         ; DATA XREF: .got:memset_ptr↑o
extern:0000000000209370 ; __uid_t geteuid(void)
extern:0000000000209370                 extrn geteuid:near      ; CODE XREF: _geteuid↑j
extern:0000000000209370                                         ; DATA XREF: .got:geteuid_ptr↑o
extern:0000000000209378 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:0000000000209378                 extrn __libc_start_main:near
extern:0000000000209378                                         ; CODE XREF: start+24↑p
extern:0000000000209378                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000209380 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000209380                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000209380                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000209388 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000209388                 extrn fputs_unlocked:near
extern:0000000000209388                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000209388                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000209390 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000209390                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000209390                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000209398 ; struct passwd *getpwnam(const char *name)
extern:0000000000209398                 extrn getpwnam:near     ; CODE XREF: _getpwnam↑j
extern:0000000000209398                                         ; DATA XREF: .got:getpwnam_ptr↑o
extern:00000000002093A0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002093A0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002093A0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002093A8 ; struct group *getgrnam(const char *name)
extern:00000000002093A8                 extrn getgrnam:near     ; CODE XREF: _getgrnam↑j
extern:00000000002093A8                                         ; DATA XREF: .got:getgrnam_ptr↑o
extern:00000000002093B0 ; int fileno(FILE *stream)
extern:00000000002093B0                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002093B0                                         ; DATA XREF: .got:fileno_ptr↑o
extern:00000000002093B8 ; __gid_t getgid(void)
extern:00000000002093B8                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:00000000002093B8                                         ; DATA XREF: .got:getgid_ptr↑o
extern:00000000002093C0 ; int getgroups(int size, __gid_t list[])
extern:00000000002093C0                 extrn getgroups:near    ; CODE XREF: _getgroups↑j
extern:00000000002093C0                                         ; DATA XREF: .got:getgroups_ptr↑o
extern:00000000002093C8 ; void *malloc(size_t size)
extern:00000000002093C8                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00000000002093C8                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00000000002093D0 ; int fflush(FILE *stream)
extern:00000000002093D0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:00000000002093D0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:00000000002093D8 ; char *nl_langinfo(nl_item item)
extern:00000000002093D8                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:00000000002093D8                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:00000000002093E0 ; void endpwent(void)
extern:00000000002093E0                 extrn endpwent:near     ; CODE XREF: _endpwent↑j
extern:00000000002093E0                                         ; DATA XREF: .got:endpwent_ptr↑o
extern:00000000002093E8 ; __gid_t getegid(void)
extern:00000000002093E8                 extrn getegid:near      ; CODE XREF: _getegid↑j
extern:00000000002093E8                                         ; DATA XREF: .got:getegid_ptr↑o
extern:00000000002093F0 ; int _freading(FILE *fp)
extern:00000000002093F0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:00000000002093F0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:00000000002093F8 ; void *realloc(void *ptr, size_t size)
extern:00000000002093F8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:00000000002093F8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000209400 ; char *setlocale(int category, const char *locale)
extern:0000000000209400                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000209400                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000209408                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000209408                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000209410 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000209410                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000209410                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000209418 ; int getgrouplist(const char *user, __gid_t group, __gid_t *groups, int *ngroups)
extern:0000000000209418                 extrn getgrouplist:near ; CODE XREF: _getgrouplist↑j
extern:0000000000209418                                         ; DATA XREF: .got:getgrouplist_ptr↑o
extern:0000000000209420 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000209420                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000209420                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000209428 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:0000000000209428                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:0000000000209428                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:0000000000209430 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000209430                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000209430                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000209438 ; void __noreturn exit(int status)
extern:0000000000209438                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000209438                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000209440 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000209440                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000209440                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000209448                 extrn __fprintf_chk:near
extern:0000000000209448                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000209448                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000209450 ; int mbsinit(const mbstate_t *ps)
extern:0000000000209450                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000209450                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000209458 ; int iswprint(wint_t wc)
extern:0000000000209458                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000209458                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000209460 ; int __fastcall __cxa_finalize(void *)
extern:0000000000209460                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000209460                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000209460                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000209468 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000209468                 extrn __ctype_b_loc:near
extern:0000000000209468                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000209468                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000209470                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000209470                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000209478                 extrn __gmon_start__:near ; weak
extern:0000000000209478                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000209478                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000209480                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000209480                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000209480
extern:0000000000209480
extern:0000000000209480                 end start
