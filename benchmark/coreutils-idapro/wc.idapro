LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 71F41B02C7C2C39474E942CEA9F8A3D3A894F9FDA823BA3B0AD5C034A9949E02
LOAD:0000000000000000 ; Input MD5    : 070FB4C61F3496A2ABD8AACB6BBE28B3
LOAD:0000000000000000 ; Input CRC32  : 640C578F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/wc
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'wc.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argv-iter.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'mbchar.c'
LOAD:0000000000000000 ; Source File : 'physmem.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'readtokens0.c'
LOAD:0000000000000000 ; Source File : 'safe-read.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'obstack.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000320↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000338↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 34F68h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 9390h                ; Size in file image
LOAD:00000000000000D8                 dq 9390h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 9A30h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 209A30h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 658h                 ; Size in file image
LOAD:0000000000000110                 dq 868h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 9BB8h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 209BB8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 8170h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 8170h                ; Physical address
LOAD:00000000000001B0                 dq 32Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 32Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 9A30h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 209A30h              ; Physical address
LOAD:0000000000000220                 dq 5D0h                 ; Size in file image
LOAD:0000000000000228                 dq 5D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 87h, 2 dup(0FFh), 0E9h, 0E3h, 0F0h, 30h, 0E9h, 4Ch ; Desc
LOAD:0000000000000284                 db 89h, 0E6h, 0EEh, 9, 0EDh, 0ADh, 0C7h, 0E7h, 57h, 90h
LOAD:0000000000000284                 db 97h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 47h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 2
LOAD:00000000000002A4 elf_gnu_hash_shift dd 7
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 16AE01120048A126h, 900004A01210D020h
LOAD:00000000000002B8 elf_gnu_hash_bucket dd 47h, 4Ch, 54h
LOAD:00000000000002C4 elf_gnu_hash_chain dd 0EB01FAB6h, 60E0C78Ch, 1C8C1D28h, 759A6A7Eh, 5B7F3E03h
LOAD:00000000000002C4                 dd 9E7650BCh, 10615566h, 7FFD8E4Eh, 9789A096h, 0AD3C9892h
LOAD:00000000000002C4                 dd 72632CCEh, 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B2h
LOAD:00000000000002C4                 dd 0BA53E4Dh, 0
LOAD:0000000000000308 ; ELF Symbol Table
LOAD:0000000000000308                 Elf64_Sym <0>
LOAD:0000000000000320                 Elf64_Sym <offset aGetenv - offset byte_B30, 12h, 0, 0, \ ; "getenv"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aObstackFree+9 - offset byte_B30, 12h, 0, 0, \ ; "free"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aAbort - offset byte_B30, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000350                            0>
LOAD:0000000000000368                 Elf64_Sym <offset aErrnoLocation - offset byte_B30, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000368                            offset dword_0, 0>
LOAD:0000000000000380                 Elf64_Sym <offset aStrncmp - offset byte_B30, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aItmDeregistert - offset byte_B30, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aExit - offset byte_B30, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B0                            0>
LOAD:00000000000003C8                 Elf64_Sym <offset aFpending - offset byte_B30, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aFerror - offset byte_B30, 12h, 0, 0, \ ; "ferror"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aIswcntrl - offset byte_B30, 12h, 0, 0, \ ; "iswcntrl"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_B30, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aFclose - offset byte_B30, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aBindtextdomain - offset byte_B30, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aDcgettext - offset byte_B30, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_B30, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aStrlen - offset byte_B30, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aStackChkFail - offset byte_B30, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aGetoptLong - offset byte_B30, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aMbrtowc - offset byte_B30, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aStrchr - offset byte_B30, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004E8                            offset dword_0, 0>
LOAD:0000000000000500                 Elf64_Sym <offset aOverflow - offset byte_B30, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aStrrchr - offset byte_B30, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aLseek - offset byte_B30, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000530                            0>
LOAD:0000000000000548                 Elf64_Sym <offset aAssertFail - offset byte_B30, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aMemset - offset byte_B30, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aFgetc - offset byte_B30, 12h, 0, 0, offset dword_0,\ ; "fgetc"
LOAD:0000000000000578                            0>
LOAD:0000000000000590                 Elf64_Sym <offset aFclose+1 - offset byte_B30, 12h, 0, 0, \ ; "close"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aPosixFadvise - offset byte_B30, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aMemchr - offset byte_B30, 12h, 0, 0, \ ; "memchr"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aRead - offset byte_B30, 12h, 0, 0, offset dword_0, \ ; "read"
LOAD:00000000000005D8                            0>
LOAD:00000000000005F0                 Elf64_Sym <offset aLibcStartMain - offset byte_B30, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aMemcmp - offset byte_B30, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aFputsUnlocked - offset byte_B30, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aCalloc - offset byte_B30, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aStrcmp - offset byte_B30, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aMemmoveChk - offset byte_B30, 12h, 0, 0, \ ; "__memmove_chk"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aFeof - offset byte_B30, 12h, 0, 0, offset dword_0, \ ; "feof"
LOAD:0000000000000680                            0>
LOAD:0000000000000698                 Elf64_Sym <offset aGmonStart - offset byte_B30, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aMemcpy - offset byte_B30, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aFileno - offset byte_B30, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006C8                            offset dword_0, 0>
LOAD:00000000000006E0                 Elf64_Sym <offset aXstat - offset byte_B30, 12h, 0, 0, offset dword_0,\ ; "__xstat"
LOAD:00000000000006E0                            0>
LOAD:00000000000006F8                 Elf64_Sym <offset aWcwidth - offset byte_B30, 12h, 0, 0, \ ; "wcwidth"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aMalloc - offset byte_B30, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aFflush - offset byte_B30, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aNlLanginfo - offset byte_B30, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aFxstat - offset byte_B30, 12h, 0, 0, \ ; "__fxstat"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aFreading - offset byte_B30, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aRealloc - offset byte_B30, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aSetlocale - offset byte_B30, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aPrintfChk - offset byte_B30, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aSetvbuf - offset byte_B30, 12h, 0, 0, \ ; "setvbuf"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aIswspace - offset byte_B30, 12h, 0, 0, \ ; "iswspace"
LOAD:00000000000007E8                            offset dword_0, 0>
LOAD:0000000000000800                 Elf64_Sym <offset aBtowc - offset byte_B30, 12h, 0, 0, offset dword_0,\ ; "btowc"
LOAD:0000000000000800                            0>
LOAD:0000000000000818                 Elf64_Sym <offset aFerror+1 - offset byte_B30, 12h, 0, 0, \ ; "error"
LOAD:0000000000000818                            offset dword_0, 0>
LOAD:0000000000000830                 Elf64_Sym <offset aFopen+1 - offset byte_B30, 12h, 0, 0, \ ; "open"
LOAD:0000000000000830                            offset dword_0, 0>
LOAD:0000000000000848                 Elf64_Sym <offset aFseeko - offset byte_B30, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000848                            offset dword_0, 0>
LOAD:0000000000000860                 Elf64_Sym <offset aFopen - offset byte_B30, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:0000000000000860                            0>
LOAD:0000000000000878                 Elf64_Sym <offset aSysconf - offset byte_B30, 12h, 0, 0, \ ; "sysconf"
LOAD:0000000000000878                            offset dword_0, 0>
LOAD:0000000000000890                 Elf64_Sym <offset aCxaAtexit - offset byte_B30, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000890                            offset dword_0, 0>
LOAD:00000000000008A8                 Elf64_Sym <offset aSysinfo - offset byte_B30, 12h, 0, 0, \ ; "sysinfo"
LOAD:00000000000008A8                            offset dword_0, 0>
LOAD:00000000000008C0                 Elf64_Sym <offset aGetpagesize - offset byte_B30, 12h, 0, 0, \ ; "getpagesize"
LOAD:00000000000008C0                            offset dword_0, 0>
LOAD:00000000000008D8                 Elf64_Sym <offset aExit+1 - offset byte_B30, 12h, 0, 0, \ ; "exit"
LOAD:00000000000008D8                            offset dword_0, 0>
LOAD:00000000000008F0                 Elf64_Sym <offset aFwrite - offset byte_B30, 12h, 0, 0, \ ; "fwrite"
LOAD:00000000000008F0                            offset dword_0, 0>
LOAD:0000000000000908                 Elf64_Sym <offset aFprintfChk - offset byte_B30, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000908                            offset dword_0, 0>
LOAD:0000000000000920                 Elf64_Sym <offset aItmRegistertmc - offset byte_B30, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000920                            offset dword_0, 0>
LOAD:0000000000000938                 Elf64_Sym <offset aMbsinit - offset byte_B30, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000938                            offset dword_0, 0>
LOAD:0000000000000950                 Elf64_Sym <offset aIswprint - offset byte_B30, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000950                            offset dword_0, 0>
LOAD:0000000000000968                 Elf64_Sym <offset aCxaFinalize - offset byte_B30, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000968                            offset dword_0, 0>
LOAD:0000000000000980                 Elf64_Sym <offset aGetdelim - offset byte_B30, 12h, 0, 0, \ ; "getdelim"
LOAD:0000000000000980                            offset dword_0, 0>
LOAD:0000000000000998                 Elf64_Sym <offset aCtypeBLoc - offset byte_B30, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000998                            offset dword_0, 0>
LOAD:00000000000009B0                 Elf64_Sym <offset aObstackAllocFa - offset byte_B30, 11h, 0, 18h, \ ; "obstack_alloc_failed_handler"
LOAD:00000000000009B0                            offset obstack_alloc_failed_handler, 8>
LOAD:00000000000009C8                 Elf64_Sym <offset aObstackNewchun - offset byte_B30, 12h, 0, 0Eh, \ ; "_obstack_newchunk"
LOAD:00000000000009C8                            offset _obstack_newchunk, 0EBh>
LOAD:00000000000009E0                 Elf64_Sym <offset aStdout - offset byte_B30, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000009E0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000009F8                 Elf64_Sym <offset aObstackBegin1 - offset byte_B30, 12h, 0, 0Eh, \ ; "_obstack_begin_1"
LOAD:00000000000009F8                            offset _obstack_begin_1, 15h>
LOAD:0000000000000A10                 Elf64_Sym <offset aObstackAllocat - offset byte_B30, 12h, 0, 0Eh, \ ; "_obstack_allocated_p"
LOAD:0000000000000A10                            offset _obstack_allocated_p, 38h>
LOAD:0000000000000A28                 Elf64_Sym <offset aProgname - offset byte_B30, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A28                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A40                 Elf64_Sym <offset aStdin - offset byte_B30, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000A40                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000A58                 Elf64_Sym <offset aObstackBegin - offset byte_B30, 12h, 0, 0Eh, \ ; "_obstack_begin"
LOAD:0000000000000A58                            offset _obstack_begin, 11h>
LOAD:0000000000000A70                 Elf64_Sym <offset aProgramInvocat - offset byte_B30, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A70                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A88                 Elf64_Sym <offset aObstackMemoryU - offset byte_B30, 12h, 0, 0Eh, \ ; "_obstack_memory_used"
LOAD:0000000000000A88                            offset _obstack_memory_used, 2Ah>
LOAD:0000000000000AA0                 Elf64_Sym <offset aPrognameFull - offset byte_B30, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000AA0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AB8                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_B30, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000AB8                            offset program_invocation_short_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AD0                 Elf64_Sym <offset aStderr - offset byte_B30, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000AD0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000AE8                 Elf64_Sym <offset aOptind - offset byte_B30, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000AE8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000B00                 Elf64_Sym <offset aOptarg - offset byte_B30, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000B00                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000B18                 Elf64_Sym <offset aObstackFree - offset byte_B30, 12h, 0, 0Eh, \ ; "_obstack_free"
LOAD:0000000000000B18                            offset _obstack_free, 6Ah>
LOAD:0000000000000B30 ; ELF String Table
LOAD:0000000000000B30 byte_B30        db 0                    ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000B30                                         ; LOAD:0000000000000338↑o ...
LOAD:0000000000000B31 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000FB0↓o
LOAD:0000000000000B3B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000728↑o
LOAD:0000000000000B42 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000B4F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000B59 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:0000000000000B61 aFopen          db 'fopen',0            ; DATA XREF: LOAD:0000000000000860↑o
LOAD:0000000000000B61                                         ; LOAD:0000000000000830↑o
LOAD:0000000000000B67 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000B6F aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000AE8↑o
LOAD:0000000000000B76 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000B7E aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000B88 aIswspace       db 'iswspace',0         ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:0000000000000B91 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:0000000000000BA2 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000950↑o
LOAD:0000000000000BAB aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000788↑o
LOAD:0000000000000BB3 aBtowc          db 'btowc',0            ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000BB9 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000BBF aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000A40↑o
LOAD:0000000000000BC5 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:0000000000000BC5                                         ; LOAD:00000000000008D8↑o
LOAD:0000000000000BCB aMemchr         db 'memchr',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000BD2 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000BD2                                         ; DATA XREF: LOAD:0000000000000A70↑o
LOAD:0000000000000BEA aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000BF8 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000BF8                                         ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000C0F aFeof           db 'feof',0             ; DATA XREF: LOAD:0000000000000680↑o
LOAD:0000000000000C14 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:0000000000000C22 aFgetc          db 'fgetc',0            ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000C28 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000638↑o
LOAD:0000000000000C2F aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000488↑o
LOAD:0000000000000C36 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000C3D aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000C4E aRead           db 'read',0             ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:0000000000000C53 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:0000000000000C5A aGetpagesize    db 'getpagesize',0      ; DATA XREF: LOAD:00000000000008C0↑o
LOAD:0000000000000C66 aGetdelim       db 'getdelim',0         ; DATA XREF: LOAD:0000000000000980↑o
LOAD:0000000000000C6F aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000908↑o
LOAD:0000000000000C7D aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000009E0↑o
LOAD:0000000000000C84 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000530↑o
LOAD:0000000000000C8A aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:0000000000000C91 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000428↑o
LOAD:0000000000000C91                                         ; LOAD:0000000000000590↑o
LOAD:0000000000000C98 aMemmoveChk     db '__memmove_chk',0    ; DATA XREF: LOAD:0000000000000668↑o
LOAD:0000000000000CA6 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000CAD aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000938↑o
LOAD:0000000000000CB5 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000CC1 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000998↑o
LOAD:0000000000000CCF aGetenv         db 'getenv',0           ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000CD6 aObstackAllocat db '_obstack_allocated_p',0
LOAD:0000000000000CD6                                         ; DATA XREF: LOAD:0000000000000A10↑o
LOAD:0000000000000CEB aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000B00↑o
LOAD:0000000000000CF2 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000CFD aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000AD0↑o
LOAD:0000000000000D04 aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000D0C aObstackBegin1  db '_obstack_begin_1',0 ; DATA XREF: LOAD:00000000000009F8↑o
LOAD:0000000000000D1D aObstackNewchun db '_obstack_newchunk',0
LOAD:0000000000000D1D                                         ; DATA XREF: LOAD:00000000000009C8↑o
LOAD:0000000000000D2F aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000D3B aFxstat         db '__fxstat',0         ; DATA XREF: LOAD:0000000000000758↑o
LOAD:0000000000000D44 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:0000000000000D4B aObstackMemoryU db '_obstack_memory_used',0
LOAD:0000000000000D4B                                         ; DATA XREF: LOAD:0000000000000A88↑o
LOAD:0000000000000D60 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:00000000000008F0↑o
LOAD:0000000000000D67 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:0000000000000D72 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:0000000000000D79 aIswcntrl       db 'iswcntrl',0         ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:0000000000000D82 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000D82                                         ; DATA XREF: LOAD:0000000000000AB8↑o
LOAD:0000000000000DA0 aObstackAllocFa db 'obstack_alloc_failed_handler',0
LOAD:0000000000000DA0                                         ; DATA XREF: LOAD:00000000000009B0↑o
LOAD:0000000000000DBD aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000968↑o
LOAD:0000000000000DCC aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:0000000000000DD4 aXstat          db '__xstat',0          ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000DDC aObstackBegin   db '_obstack_begin',0   ; DATA XREF: LOAD:0000000000000A58↑o
LOAD:0000000000000DEB aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000440↑o
LOAD:0000000000000DEB                                         ; LOAD:0000000000000410↑o
LOAD:0000000000000DFA aSysinfo        db 'sysinfo',0          ; DATA XREF: LOAD:00000000000008A8↑o
LOAD:0000000000000E02 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000E09 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000E09                                         ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000E1B aFerror         db 'ferror',0           ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000E1B                                         ; LOAD:0000000000000818↑o
LOAD:0000000000000E22 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000E29 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000E34 aSysconf        db 'sysconf',0          ; DATA XREF: LOAD:0000000000000878↑o
LOAD:0000000000000E3C aObstackFree    db '_obstack_free',0    ; DATA XREF: LOAD:0000000000000B18↑o
LOAD:0000000000000E3C                                         ; LOAD:0000000000000338↑o
LOAD:0000000000000E4A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000620↑o
LOAD:0000000000000E59 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A28↑o
LOAD:0000000000000E64 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000AA0↑o
LOAD:0000000000000E74 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000890↑o
LOAD:0000000000000E81 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000FC0↓o
LOAD:0000000000000E8B aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000FD0↓o
LOAD:0000000000000E96 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000FE0↓o
LOAD:0000000000000EA2 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000FF0↓o
LOAD:0000000000000EAC aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001000↓o
LOAD:0000000000000EB8 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000EB8                                         ; DATA XREF: LOAD:0000000000000398↑o
LOAD:0000000000000ED4 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000698↑o
LOAD:0000000000000EE3 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000EE3                                         ; DATA XREF: LOAD:0000000000000920↑o
LOAD:0000000000000EFD                 align 2
LOAD:0000000000000EFE ; ELF GNU Symbol Version Table
LOAD:0000000000000EFE                 dw 0
LOAD:0000000000000F00                 dw 2                    ; getenv@@GLIBC_2.2.5
LOAD:0000000000000F02                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000F04                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000F06                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000F08                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000F0A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000F0C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000F0E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000F10                 dw 2                    ; ferror@@GLIBC_2.2.5
LOAD:0000000000000F12                 dw 2                    ; iswcntrl@@GLIBC_2.2.5
LOAD:0000000000000F14                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000F16                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000F18                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000F1A                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000F1C                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000F1E                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000F20                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000F22                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000F24                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000F26                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000F28                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000F2A                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000F2C                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000F2E                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000F30                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000F32                 dw 2                    ; fgetc@@GLIBC_2.2.5
LOAD:0000000000000F34                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000F36                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000F38                 dw 2                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000F3A                 dw 2                    ; read@@GLIBC_2.2.5
LOAD:0000000000000F3C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000F3E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000F40                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F42                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000F44                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000F46                 dw 4                    ; __memmove_chk@@GLIBC_2.3.4
LOAD:0000000000000F48                 dw 2                    ; feof@@GLIBC_2.2.5
LOAD:0000000000000F4A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000F4C                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000F4E                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000F50                 dw 2                    ; __xstat@@GLIBC_2.2.5
LOAD:0000000000000F52                 dw 2                    ; wcwidth@@GLIBC_2.2.5
LOAD:0000000000000F54                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000F56                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000F58                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000F5A                 dw 2                    ; __fxstat@@GLIBC_2.2.5
LOAD:0000000000000F5C                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000F5E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000F60                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000F62                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000F64                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000F66                 dw 2                    ; iswspace@@GLIBC_2.2.5
LOAD:0000000000000F68                 dw 2                    ; btowc@@GLIBC_2.2.5
LOAD:0000000000000F6A                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000F6C                 dw 2                    ; open@@GLIBC_2.2.5
LOAD:0000000000000F6E                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000F70                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000F72                 dw 2                    ; sysconf@@GLIBC_2.2.5
LOAD:0000000000000F74                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000F76                 dw 2                    ; sysinfo@@GLIBC_2.2.5
LOAD:0000000000000F78                 dw 2                    ; getpagesize@@GLIBC_2.2.5
LOAD:0000000000000F7A                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000F7C                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000F7E                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000F80                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000F82                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000F84                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000F86                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000F88                 dw 2                    ; getdelim@@GLIBC_2.2.5
LOAD:0000000000000F8A                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000F8C                 dw 1                    ; global symbol: obstack_alloc_failed_handler
LOAD:0000000000000F8E                 dw 1                    ; global symbol: _obstack_newchunk
LOAD:0000000000000F90                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000F92                 dw 1                    ; global symbol: _obstack_begin_1
LOAD:0000000000000F94                 dw 1                    ; global symbol: _obstack_allocated_p
LOAD:0000000000000F96                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000F98                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000F9A                 dw 1                    ; global symbol: _obstack_begin
LOAD:0000000000000F9C                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000F9E                 dw 1                    ; global symbol: _obstack_memory_used
LOAD:0000000000000FA0                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000FA2                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000FA4                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000FA6                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000FA8                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000FAA                 dw 1                    ; global symbol: _obstack_free
LOAD:0000000000000FAC                 dw 0
LOAD:0000000000000FAE                 dw 0
LOAD:0000000000000FB0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000FB0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_B30, 10h, 0> ; "libc.so.6"
LOAD:0000000000000FC0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_B30, \ ; "GLIBC_2.3"
LOAD:0000000000000FC0                                10h>
LOAD:0000000000000FD0                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_B30, \ ; "GLIBC_2.14"
LOAD:0000000000000FD0                                10h>
LOAD:0000000000000FE0                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_B30, \ ; "GLIBC_2.3.4"
LOAD:0000000000000FE0                                10h>
LOAD:0000000000000FF0                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_B30, \ ; "GLIBC_2.4"
LOAD:0000000000000FF0                                10h>
LOAD:0000000000001000                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_B30, 0> ; "GLIBC_2.2.5"
LOAD:0000000000001010 ; ELF RELA Relocation Table
LOAD:0000000000001010                 Elf64_Rela <209A30h, 8, 2940h> ; R_X86_64_RELATIVE +2940h
LOAD:0000000000001028                 Elf64_Rela <209A38h, 8, 2900h> ; R_X86_64_RELATIVE +2900h
LOAD:0000000000001040                 Elf64_Rela <209A40h, 8, 7167h> ; R_X86_64_RELATIVE +7167h
LOAD:0000000000001058                 Elf64_Rela <209A60h, 8, 716Dh> ; R_X86_64_RELATIVE +716Dh
LOAD:0000000000001070                 Elf64_Rela <209A80h, 8, 7173h> ; R_X86_64_RELATIVE +7173h
LOAD:0000000000001088                 Elf64_Rela <209AA0h, 8, 7179h> ; R_X86_64_RELATIVE +7179h
LOAD:00000000000010A0                 Elf64_Rela <209AC0h, 8, 717Fh> ; R_X86_64_RELATIVE +717Fh
LOAD:00000000000010B8                 Elf64_Rela <209AE0h, 8, 718Bh> ; R_X86_64_RELATIVE +718Bh
LOAD:00000000000010D0                 Elf64_Rela <209B00h, 8, 719Bh> ; R_X86_64_RELATIVE +719Bh
LOAD:00000000000010E8                 Elf64_Rela <209B20h, 8, 71A0h> ; R_X86_64_RELATIVE +71A0h
LOAD:0000000000001100                 Elf64_Rela <209B60h, 8, 7929h> ; R_X86_64_RELATIVE +7929h
LOAD:0000000000001118                 Elf64_Rela <209B68h, 8, 7931h> ; R_X86_64_RELATIVE +7931h
LOAD:0000000000001130                 Elf64_Rela <209B70h, 8, 7937h> ; R_X86_64_RELATIVE +7937h
LOAD:0000000000001148                 Elf64_Rela <209B78h, 8, 7944h> ; R_X86_64_RELATIVE +7944h
LOAD:0000000000001160                 Elf64_Rela <209B80h, 8, 7951h> ; R_X86_64_RELATIVE +7951h
LOAD:0000000000001178                 Elf64_Rela <209B88h, 8, 7136h> ; R_X86_64_RELATIVE +7136h
LOAD:0000000000001190                 Elf64_Rela <209B90h, 8, 7965h> ; R_X86_64_RELATIVE +7965h
LOAD:00000000000011A8                 Elf64_Rela <209B98h, 8, 794Ah> ; R_X86_64_RELATIVE +794Ah
LOAD:00000000000011C0                 Elf64_Rela <209BA0h, 8, 70AAh> ; R_X86_64_RELATIVE +70AAh
LOAD:00000000000011D8                 Elf64_Rela <209BA8h, 8, 796Dh> ; R_X86_64_RELATIVE +796Dh
LOAD:00000000000011F0                 Elf64_Rela <20A008h, 8, 20A008h> ; R_X86_64_RELATIVE +20A008h
LOAD:0000000000001208                 Elf64_Rela <20A010h, 8, 7878h> ; R_X86_64_RELATIVE +7878h
LOAD:0000000000001220                 Elf64_Rela <20A060h, 8, 20A070h> ; R_X86_64_RELATIVE +20A070h
LOAD:0000000000001238                 Elf64_Rela <20A078h, 8, 20A160h> ; R_X86_64_RELATIVE +20A160h
LOAD:0000000000001250                 Elf64_Rela <20A080h, 8, 6AF0h> ; R_X86_64_RELATIVE +6AF0h
LOAD:0000000000001268                 Elf64_Rela <209FB8h, 200000006h, 0> ; R_X86_64_GLOB_DAT free
LOAD:0000000000001280                 Elf64_Rela <209FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001298                 Elf64_Rela <209FC8h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:00000000000012B0                 Elf64_Rela <209FD0h, 2600000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:00000000000012C8                 Elf64_Rela <209FD8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT malloc
LOAD:00000000000012E0                 Elf64_Rela <209FE0h, 4100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000012F8                 Elf64_Rela <209FE8h, 4400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001310                 Elf64_Rela <20A0A0h, 4C00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001328                 Elf64_Rela <20A0A8h, 4900000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001340                 Elf64_Rela <20A0B0h, 4D00000005h, 0> ; R_X86_64_COPY stdin
LOAD:0000000000001358                 Elf64_Rela <20A0B8h, 5400000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001370                 Elf64_Rela <20A0C0h, 5500000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001388                 Elf64_Rela <20A0C8h, 5100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:00000000000013A0                 Elf64_Rela <20A0E0h, 5300000005h, 0> ; R_X86_64_COPY stderr
LOAD:00000000000013B8 ; ELF JMPREL Relocation Table
LOAD:00000000000013B8                 Elf64_Rela <209DC0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT getenv
LOAD:00000000000013D0                 Elf64_Rela <209DC8h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000013E8                 Elf64_Rela <209DD0h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001400                 Elf64_Rela <209DD8h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000001418                 Elf64_Rela <209DE0h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001430                 Elf64_Rela <209DE8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001448                 Elf64_Rela <209DF0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:0000000000001460                 Elf64_Rela <209DF8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT iswcntrl
LOAD:0000000000001478                 Elf64_Rela <209E00h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001490                 Elf64_Rela <209E08h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:00000000000014A8                 Elf64_Rela <209E10h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000014C0                 Elf64_Rela <209E18h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000014D8                 Elf64_Rela <209E20h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000014F0                 Elf64_Rela <209E28h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001508                 Elf64_Rela <209E30h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001520                 Elf64_Rela <209E38h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001538                 Elf64_Rela <209E40h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001550                 Elf64_Rela <209E48h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001568                 Elf64_Rela <209E50h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001580                 Elf64_Rela <209E58h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001598                 Elf64_Rela <209E60h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000015B0                 Elf64_Rela <209E68h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000015C8                 Elf64_Rela <209E70h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000015E0                 Elf64_Rela <209E78h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fgetc
LOAD:00000000000015F8                 Elf64_Rela <209E80h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:0000000000001610                 Elf64_Rela <209E88h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:0000000000001628                 Elf64_Rela <209E90h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001640                 Elf64_Rela <209E98h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT read
LOAD:0000000000001658                 Elf64_Rela <209EA0h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001670                 Elf64_Rela <209EA8h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001688                 Elf64_Rela <209EB0h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:00000000000016A0                 Elf64_Rela <209EB8h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000016B8                 Elf64_Rela <209EC0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __memmove_chk
LOAD:00000000000016D0                 Elf64_Rela <209EC8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT feof
LOAD:00000000000016E8                 Elf64_Rela <209ED0h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001700                 Elf64_Rela <209ED8h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001718                 Elf64_Rela <209EE0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __xstat
LOAD:0000000000001730                 Elf64_Rela <209EE8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:0000000000001748                 Elf64_Rela <209EF0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001760                 Elf64_Rela <209EF8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001778                 Elf64_Rela <209F00h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT __fxstat
LOAD:0000000000001790                 Elf64_Rela <209F08h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000017A8                 Elf64_Rela <209F10h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000017C0                 Elf64_Rela <209F18h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000017D8                 Elf64_Rela <209F20h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000017F0                 Elf64_Rela <209F28h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001808                 Elf64_Rela <209F30h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT iswspace
LOAD:0000000000001820                 Elf64_Rela <209F38h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT btowc
LOAD:0000000000001838                 Elf64_Rela <209F40h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001850                 Elf64_Rela <209F48h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT open
LOAD:0000000000001868                 Elf64_Rela <209F50h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001880                 Elf64_Rela <209F58h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:0000000000001898                 Elf64_Rela <209F60h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT sysconf
LOAD:00000000000018B0                 Elf64_Rela <209F68h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000018C8                 Elf64_Rela <209F70h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT sysinfo
LOAD:00000000000018E0                 Elf64_Rela <209F78h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT getpagesize
LOAD:00000000000018F8                 Elf64_Rela <209F80h, 3E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001910                 Elf64_Rela <209F88h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001928                 Elf64_Rela <209F90h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001940                 Elf64_Rela <209F98h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001958                 Elf64_Rela <209FA0h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001970                 Elf64_Rela <209FA8h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT getdelim
LOAD:0000000000001988                 Elf64_Rela <209FB0h, 4600000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001988 LOAD            ends
LOAD:0000000000001988
.init:00000000000019A0 ; ===========================================================================
.init:00000000000019A0
.init:00000000000019A0 ; Segment type: Pure code
.init:00000000000019A0 ; Segment permissions: Read/Execute
.init:00000000000019A0 _init           segment dword public 'CODE' use64
.init:00000000000019A0                 assume cs:_init
.init:00000000000019A0                 ;org 19A0h
.init:00000000000019A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000019A0
.init:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.init:00000000000019A0
.init:00000000000019A0
.init:00000000000019A0                 public _init_proc
.init:00000000000019A0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000019A0                 sub     rsp, 8          ; _init
.init:00000000000019A4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000019AB                 test    rax, rax
.init:00000000000019AE                 jz      short loc_19B2
.init:00000000000019B0                 call    rax ; __gmon_start__
.init:00000000000019B2
.init:00000000000019B2 loc_19B2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000019B2                 add     rsp, 8
.init:00000000000019B6                 retn
.init:00000000000019B6 _init_proc      endp
.init:00000000000019B6
.init:00000000000019B6 _init           ends
.init:00000000000019B6
LOAD:00000000000019B7 ; ===========================================================================
LOAD:00000000000019B7
LOAD:00000000000019B7 ; Segment type: Pure code
LOAD:00000000000019B7 ; Segment permissions: Read/Execute
LOAD:00000000000019B7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000019B7                 assume cs:LOAD
LOAD:00000000000019B7                 ;org 19B7h
LOAD:00000000000019B7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000019B7                 align 20h
LOAD:00000000000019B7 LOAD            ends
LOAD:00000000000019B7
.plt:00000000000019C0 ; ===========================================================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Segment type: Pure code
.plt:00000000000019C0 ; Segment permissions: Read/Execute
.plt:00000000000019C0 _plt            segment para public 'CODE' use64
.plt:00000000000019C0                 assume cs:_plt
.plt:00000000000019C0                 ;org 19C0h
.plt:00000000000019C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0
.plt:00000000000019C0 sub_19C0        proc near               ; CODE XREF: .plt:00000000000019DB↓j
.plt:00000000000019C0                                         ; .plt:00000000000019EB↓j ...
.plt:00000000000019C0 ; __unwind {
.plt:00000000000019C0                 push    cs:qword_209DB0
.plt:00000000000019C6                 jmp     cs:qword_209DB8
.plt:00000000000019C6 sub_19C0        endp
.plt:00000000000019C6
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019CC                 align 10h
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; char *getenv(const char *name)
.plt:00000000000019D0 _getenv         proc near               ; CODE XREF: main+9E↓p
.plt:00000000000019D0                 jmp     cs:getenv_ptr
.plt:00000000000019D0 _getenv         endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    0
.plt:00000000000019DB                 jmp     sub_19C0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: noreturn thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; void __noreturn abort(void)
.plt:00000000000019E0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000019E0                                         ; quotearg_buffer_restyled:def_4181↓p ...
.plt:00000000000019E0                 jmp     cs:abort_ptr
.plt:00000000000019E0 _abort          endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    1
.plt:00000000000019EB                 jmp     sub_19C0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; int *__errno_location(void)
.plt:00000000000019F0 ___errno_location proc near             ; CODE XREF: main+4F0↓p
.plt:00000000000019F0                                         ; main+757↓p ...
.plt:00000000000019F0                 jmp     cs:__errno_location_ptr
.plt:00000000000019F0 ___errno_location endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    2
.plt:00000000000019FB                 jmp     sub_19C0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001A00 _strncmp        proc near               ; CODE XREF: usage+274↓p
.plt:0000000000001A00                                         ; usage+335↓p
.plt:0000000000001A00                 jmp     cs:strncmp_ptr
.plt:0000000000001A00 _strncmp        endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    3
.plt:0000000000001A0B                 jmp     sub_19C0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: noreturn thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void __noreturn _exit(int status)
.plt:0000000000001A10 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001A10                 jmp     cs:_exit_ptr
.plt:0000000000001A10 __exit          endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    4
.plt:0000000000001A1B                 jmp     sub_19C0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; size_t __fpending(FILE *fp)
.plt:0000000000001A20 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001A20                 jmp     cs:__fpending_ptr
.plt:0000000000001A20 ___fpending     endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    5
.plt:0000000000001A2B                 jmp     sub_19C0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int ferror(FILE *stream)
.plt:0000000000001A30 _ferror         proc near               ; CODE XREF: readtokens0+19A↓p
.plt:0000000000001A30                 jmp     cs:ferror_ptr
.plt:0000000000001A30 _ferror         endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    6
.plt:0000000000001A3B                 jmp     sub_19C0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int iswcntrl(wint_t wc)
.plt:0000000000001A40 _iswcntrl       proc near               ; CODE XREF: mb_width_aux+12↓p
.plt:0000000000001A40                 jmp     cs:iswcntrl_ptr
.plt:0000000000001A40 _iswcntrl       endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    7
.plt:0000000000001A4B                 jmp     sub_19C0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; char *textdomain(const char *domainname)
.plt:0000000000001A50 _textdomain     proc near               ; CODE XREF: main+63↓p
.plt:0000000000001A50                 jmp     cs:textdomain_ptr
.plt:0000000000001A50 _textdomain     endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    8
.plt:0000000000001A5B                 jmp     sub_19C0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int fclose(FILE *stream)
.plt:0000000000001A60 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001A60                                         ; rpl_fclose+6B↓j
.plt:0000000000001A60                 jmp     cs:fclose_ptr
.plt:0000000000001A60 _fclose         endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    9
.plt:0000000000001A6B                 jmp     sub_19C0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001A70 _bindtextdomain proc near               ; CODE XREF: main+57↓p
.plt:0000000000001A70                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001A70 _bindtextdomain endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    0Ah
.plt:0000000000001A7B                 jmp     sub_19C0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001A80 _dcgettext      proc near               ; CODE XREF: main+52C↓p
.plt:0000000000001A80                                         ; main+565↓p ...
.plt:0000000000001A80                 jmp     cs:dcgettext_ptr
.plt:0000000000001A80 _dcgettext      endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    0Bh
.plt:0000000000001A8B                 jmp     sub_19C0
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001A90 ___ctype_get_mb_cur_max proc near       ; CODE XREF: wc:loc_2BA1↓p
.plt:0000000000001A90                                         ; wc:loc_2CF2↓p ...
.plt:0000000000001A90                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001A90 ___ctype_get_mb_cur_max endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    0Ch
.plt:0000000000001A9B                 jmp     sub_19C0
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; size_t strlen(const char *s)
.plt:0000000000001AA0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001AA0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001AA0                 jmp     cs:strlen_ptr
.plt:0000000000001AA0 _strlen         endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    0Dh
.plt:0000000000001AAB                 jmp     sub_19C0
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: noreturn thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2784↓p
.plt:0000000000001AB0                                         ; write_counts:loc_2B4F↓p ...
.plt:0000000000001AB0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001AB0 ___stack_chk_fail endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    0Eh
.plt:0000000000001ABB                 jmp     sub_19C0
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001AC0 _getopt_long    proc near               ; CODE XREF: main+122↓p
.plt:0000000000001AC0                 jmp     cs:getopt_long_ptr
.plt:0000000000001AC0 _getopt_long    endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    0Fh
.plt:0000000000001ACB                 jmp     sub_19C0
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001AD0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001AD0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001AD0 _mbrtowc        endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    10h
.plt:0000000000001ADB                 jmp     sub_19C0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; char *strchr(const char *s, int c)
.plt:0000000000001AE0 _strchr         proc near               ; CODE XREF: write_counts+82↓p
.plt:0000000000001AE0                 jmp     cs:strchr_ptr
.plt:0000000000001AE0 _strchr         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    11h
.plt:0000000000001AEB                 jmp     sub_19C0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001AF0 ___overflow     proc near               ; CODE XREF: write_counts+1F5↓p
.plt:0000000000001AF0                 jmp     cs:__overflow_ptr
.plt:0000000000001AF0 ___overflow     endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    12h
.plt:0000000000001AFB                 jmp     sub_19C0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; char *strrchr(const char *s, int c)
.plt:0000000000001B00 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001B00                 jmp     cs:strrchr_ptr
.plt:0000000000001B00 _strrchr        endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    13h
.plt:0000000000001B0B                 jmp     sub_19C0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001B10 _lseek          proc near               ; CODE XREF: wc+15F↓p
.plt:0000000000001B10                                         ; wc+A86↓p ...
.plt:0000000000001B10                 jmp     cs:lseek_ptr
.plt:0000000000001B10 _lseek          endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    14h
.plt:0000000000001B1B                 jmp     sub_19C0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: noreturn thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001B20 ___assert_fail  proc near               ; CODE XREF: main+65F↓p
.plt:0000000000001B20                 jmp     cs:__assert_fail_ptr
.plt:0000000000001B20 ___assert_fail  endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    15h
.plt:0000000000001B2B                 jmp     sub_19C0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001B30 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001B30                                         ; xzalloc+12↓j
.plt:0000000000001B30                 jmp     cs:memset_ptr
.plt:0000000000001B30 _memset         endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    16h
.plt:0000000000001B3B                 jmp     sub_19C0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; int fgetc(FILE *stream)
.plt:0000000000001B40 _fgetc          proc near               ; CODE XREF: readtokens0+29↓p
.plt:0000000000001B40                                         ; readtokens0+6F↓p
.plt:0000000000001B40                 jmp     cs:fgetc_ptr
.plt:0000000000001B40 _fgetc          endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    17h
.plt:0000000000001B4B                 jmp     sub_19C0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; int close(int fd)
.plt:0000000000001B50 _close          proc near               ; CODE XREF: main+4B4↓p
.plt:0000000000001B50                                         ; main+7EA↓p
.plt:0000000000001B50                 jmp     cs:close_ptr
.plt:0000000000001B50 _close          endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    18h
.plt:0000000000001B5B                 jmp     sub_19C0
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001B60 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001B60                                         ; fadvise+16↓j
.plt:0000000000001B60                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001B60 _posix_fadvise  endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    19h
.plt:0000000000001B6B                 jmp     sub_19C0
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001B70 _memchr         proc near               ; CODE XREF: wc+363↓p
.plt:0000000000001B70                 jmp     cs:memchr_ptr
.plt:0000000000001B70 _memchr         endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    1Ah
.plt:0000000000001B7B                 jmp     sub_19C0
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; ssize_t read(int fd, void *buf, size_t nbytes)
.plt:0000000000001B80 _read           proc near               ; CODE XREF: safe_read+21↓p
.plt:0000000000001B80                 jmp     cs:read_ptr
.plt:0000000000001B80 _read           endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    1Bh
.plt:0000000000001B8B                 jmp     sub_19C0
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001B90 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001B90                 jmp     cs:memcmp_ptr
.plt:0000000000001B90 _memcmp         endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    1Ch
.plt:0000000000001B9B                 jmp     sub_19C0
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001BA0 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001BA0                                         ; usage+C5↓p ...
.plt:0000000000001BA0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001BA0 _fputs_unlocked endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    1Dh
.plt:0000000000001BAB                 jmp     sub_19C0
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001BB0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001BB0                 jmp     cs:calloc_ptr
.plt:0000000000001BB0 _calloc         endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    1Eh
.plt:0000000000001BBB                 jmp     sub_19C0
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001BC0 _strcmp         proc near               ; CODE XREF: main+288↓p
.plt:0000000000001BC0                                         ; main+390↓p ...
.plt:0000000000001BC0                 jmp     cs:strcmp_ptr
.plt:0000000000001BC0 _strcmp         endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    1Fh
.plt:0000000000001BCB                 jmp     sub_19C0
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ___memmove_chk  proc near               ; CODE XREF: wc+916↓p
.plt:0000000000001BD0                 jmp     cs:__memmove_chk_ptr
.plt:0000000000001BD0 ___memmove_chk  endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    20h ; ' '
.plt:0000000000001BDB                 jmp     sub_19C0
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; int feof(FILE *stream)
.plt:0000000000001BE0 _feof           proc near               ; CODE XREF: argv_iter+73↓p
.plt:0000000000001BE0                 jmp     cs:feof_ptr
.plt:0000000000001BE0 _feof           endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    21h ; '!'
.plt:0000000000001BEB                 jmp     sub_19C0
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001BF0 _memcpy         proc near               ; CODE XREF: mb_copy+47↓p
.plt:0000000000001BF0                                         ; xmemdup+23↓j ...
.plt:0000000000001BF0                 jmp     cs:memcpy_ptr
.plt:0000000000001BF0 _memcpy         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    22h ; '"'
.plt:0000000000001BFB                 jmp     sub_19C0
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int fileno(FILE *stream)
.plt:0000000000001C00 _fileno         proc near               ; CODE XREF: main+29F↓p
.plt:0000000000001C00                                         ; fadvise+8↓p ...
.plt:0000000000001C00                 jmp     cs:fileno_ptr
.plt:0000000000001C00 _fileno         endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    23h ; '#'
.plt:0000000000001C0B                 jmp     sub_19C0
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; int __xstat(int ver, const char *filename, struct stat *stat_buf)
.plt:0000000000001C10 ___xstat        proc near               ; CODE XREF: main+3A4↓p
.plt:0000000000001C10                 jmp     cs:__xstat_ptr
.plt:0000000000001C10 ___xstat        endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    24h ; '$'
.plt:0000000000001C1B                 jmp     sub_19C0
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; int wcwidth(wchar_t c)
.plt:0000000000001C20 _wcwidth        proc near               ; CODE XREF: wc+948↓p
.plt:0000000000001C20                                         ; mb_width_aux+3↓p
.plt:0000000000001C20                 jmp     cs:wcwidth_ptr
.plt:0000000000001C20 _wcwidth        endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    25h ; '%'
.plt:0000000000001C2B                 jmp     sub_19C0
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; int fflush(FILE *stream)
.plt:0000000000001C30 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001C30                                         ; rpl_fflush+3B↓j
.plt:0000000000001C30                 jmp     cs:fflush_ptr
.plt:0000000000001C30 _fflush         endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    26h ; '&'
.plt:0000000000001C3B                 jmp     sub_19C0
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; char *nl_langinfo(nl_item item)
.plt:0000000000001C40 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001C40                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001C40 _nl_langinfo    endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    27h ; '''
.plt:0000000000001C4B                 jmp     sub_19C0
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ; int __fxstat(int ver, int fildes, struct stat *stat_buf)
.plt:0000000000001C50 ___fxstat       proc near               ; CODE XREF: main+2B3↓p
.plt:0000000000001C50                                         ; main+35F↓p ...
.plt:0000000000001C50                 jmp     cs:__fxstat_ptr
.plt:0000000000001C50 ___fxstat       endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    28h ; '('
.plt:0000000000001C5B                 jmp     sub_19C0
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; int __freading(FILE *fp)
.plt:0000000000001C60 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001C60                                         ; rpl_fflush+9↓p
.plt:0000000000001C60                 jmp     cs:__freading_ptr
.plt:0000000000001C60 ___freading     endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    29h ; ')'
.plt:0000000000001C6B                 jmp     sub_19C0
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001C70 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001C70                 jmp     cs:realloc_ptr
.plt:0000000000001C70 _realloc        endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    2Ah ; '*'
.plt:0000000000001C7B                 jmp     sub_19C0
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; char *setlocale(int category, const char *locale)
.plt:0000000000001C80 _setlocale      proc near               ; CODE XREF: main+44↓p
.plt:0000000000001C80                                         ; usage+25B↓p ...
.plt:0000000000001C80                 jmp     cs:setlocale_ptr
.plt:0000000000001C80 _setlocale      endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    2Bh ; '+'
.plt:0000000000001C8B                 jmp     sub_19C0
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ___printf_chk   proc near               ; CODE XREF: write_counts+AF↓p
.plt:0000000000001C90                                         ; write_counts+11E↓p ...
.plt:0000000000001C90                 jmp     cs:__printf_chk_ptr
.plt:0000000000001C90 ___printf_chk   endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    2Ch ; ','
.plt:0000000000001C9B                 jmp     sub_19C0
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001CA0 _setvbuf        proc near               ; CODE XREF: main+92↓p
.plt:0000000000001CA0                 jmp     cs:setvbuf_ptr
.plt:0000000000001CA0 _setvbuf        endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    2Dh ; '-'
.plt:0000000000001CAB                 jmp     sub_19C0
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ; int iswspace(wint_t wc)
.plt:0000000000001CB0 _iswspace       proc near               ; CODE XREF: wc+838↓p
.plt:0000000000001CB0                 jmp     cs:iswspace_ptr
.plt:0000000000001CB0 _iswspace       endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    2Eh ; '.'
.plt:0000000000001CBB                 jmp     sub_19C0
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ; wint_t btowc(int c)
.plt:0000000000001CC0 _btowc          proc near               ; CODE XREF: wc+6B4↓p
.plt:0000000000001CC0                 jmp     cs:btowc_ptr
.plt:0000000000001CC0 _btowc          endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    2Fh ; '/'
.plt:0000000000001CCB                 jmp     sub_19C0
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001CD0 _error          proc near               ; CODE XREF: main+505↓p
.plt:0000000000001CD0                                         ; main+53D↓p ...
.plt:0000000000001CD0                 jmp     cs:error_ptr
.plt:0000000000001CD0 _error          endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    30h ; '0'
.plt:0000000000001CDB                 jmp     sub_19C0
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; int open(const char *file, int oflag, ...)
.plt:0000000000001CE0 _open           proc near               ; CODE XREF: main+489↓p
.plt:0000000000001CE0                 jmp     cs:open_ptr
.plt:0000000000001CE0 _open           endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    31h ; '1'
.plt:0000000000001CEB                 jmp     sub_19C0
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001CF0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_6A0A↓j
.plt:0000000000001CF0                 jmp     cs:fseeko_ptr
.plt:0000000000001CF0 _fseeko         endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    32h ; '2'
.plt:0000000000001CFB                 jmp     sub_19C0
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001D00 _fopen          proc near               ; CODE XREF: main+82A↓p
.plt:0000000000001D00                 jmp     cs:fopen_ptr
.plt:0000000000001D00 _fopen          endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    33h ; '3'
.plt:0000000000001D0B                 jmp     sub_19C0
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; __int64 sysconf(int name)
.plt:0000000000001D10 _sysconf        proc near               ; CODE XREF: physmem_total+1F↓p
.plt:0000000000001D10                                         ; physmem_total+38↓p ...
.plt:0000000000001D10                 jmp     cs:sysconf_ptr
.plt:0000000000001D10 _sysconf        endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    34h ; '4'
.plt:0000000000001D1B                 jmp     sub_19C0
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001D20 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001D20                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001D20 ___cxa_atexit   endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    35h ; '5'
.plt:0000000000001D2B                 jmp     sub_19C0
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; int sysinfo(struct sysinfo *info)
.plt:0000000000001D30 _sysinfo        proc near               ; CODE XREF: physmem_total+85↓p
.plt:0000000000001D30                                         ; physmem_available+85↓p
.plt:0000000000001D30                 jmp     cs:sysinfo_ptr
.plt:0000000000001D30 _sysinfo        endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    36h ; '6'
.plt:0000000000001D3B                 jmp     sub_19C0
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ; int getpagesize(void)
.plt:0000000000001D40 _getpagesize    proc near               ; CODE XREF: main+74↓p
.plt:0000000000001D40                 jmp     cs:getpagesize_ptr
.plt:0000000000001D40 _getpagesize    endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    37h ; '7'
.plt:0000000000001D4B                 jmp     sub_19C0
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: noreturn thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; void __noreturn exit(int status)
.plt:0000000000001D50 _exit           proc near               ; CODE XREF: main+1C9↓p
.plt:0000000000001D50                                         ; usage+58↓p ...
.plt:0000000000001D50                 jmp     cs:exit_ptr
.plt:0000000000001D50 _exit           endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    38h ; '8'
.plt:0000000000001D5B                 jmp     sub_19C0
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001D60 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001D60                 jmp     cs:fwrite_ptr
.plt:0000000000001D60 _fwrite         endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    39h ; '9'
.plt:0000000000001D6B                 jmp     sub_19C0
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ___fprintf_chk  proc near               ; CODE XREF: main+A18↓p
.plt:0000000000001D70                                         ; usage+51↓p ...
.plt:0000000000001D70                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001D70 ___fprintf_chk  endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    3Ah ; ':'
.plt:0000000000001D7B                 jmp     sub_19C0
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001D80 _mbsinit        proc near               ; CODE XREF: wc+7D0↓p
.plt:0000000000001D80                                         ; quotearg_buffer_restyled+9A8↓p
.plt:0000000000001D80                 jmp     cs:mbsinit_ptr
.plt:0000000000001D80 _mbsinit        endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    3Bh ; ';'
.plt:0000000000001D8B                 jmp     sub_19C0
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; int iswprint(wint_t wc)
.plt:0000000000001D90 _iswprint       proc near               ; CODE XREF: wc+803↓p
.plt:0000000000001D90                                         ; quotearg_buffer_restyled+990↓p
.plt:0000000000001D90                 jmp     cs:iswprint_ptr
.plt:0000000000001D90 _iswprint       endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    3Ch ; '<'
.plt:0000000000001D9B                 jmp     sub_19C0
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; __ssize_t getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:0000000000001DA0 _getdelim       proc near               ; CODE XREF: argv_iter+1E↓p
.plt:0000000000001DA0                 jmp     cs:getdelim_ptr
.plt:0000000000001DA0 _getdelim       endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    3Dh ; '='
.plt:0000000000001DAB                 jmp     sub_19C0
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001DB0 ___ctype_b_loc  proc near               ; CODE XREF: wc+578↓p
.plt:0000000000001DB0                                         ; wc+68A↓p ...
.plt:0000000000001DB0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001DB0 ___ctype_b_loc  endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    3Eh ; '>'
.plt:0000000000001DBB                 jmp     sub_19C0
.plt:0000000000001DBB ; } // starts at 19C0
.plt:0000000000001DBB _plt            ends
.plt:0000000000001DBB
.plt.got:0000000000001DC0 ; ===========================================================================
.plt.got:0000000000001DC0
.plt.got:0000000000001DC0 ; Segment type: Pure code
.plt.got:0000000000001DC0 ; Segment permissions: Read/Execute
.plt.got:0000000000001DC0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001DC0                 assume cs:_plt_got
.plt.got:0000000000001DC0                 ;org 1DC0h
.plt.got:0000000000001DC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001DC0
.plt.got:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DC0
.plt.got:0000000000001DC0 ; Attributes: thunk
.plt.got:0000000000001DC0
.plt.got:0000000000001DC0 ; void free(void *ptr)
.plt.got:0000000000001DC0 free            proc near               ; CODE XREF: main+6E9↓p
.plt.got:0000000000001DC0                                         ; argv_iter_free+E↓p ...
.plt.got:0000000000001DC0 ; __unwind {
.plt.got:0000000000001DC0                 jmp     cs:free_ptr
.plt.got:0000000000001DC0 free            endp
.plt.got:0000000000001DC0
.plt.got:0000000000001DC0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DC6                 align 8
.plt.got:0000000000001DC8
.plt.got:0000000000001DC8 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DC8
.plt.got:0000000000001DC8 ; Attributes: thunk
.plt.got:0000000000001DC8
.plt.got:0000000000001DC8 ; void *malloc(size_t size)
.plt.got:0000000000001DC8 malloc          proc near               ; CODE XREF: argv_iter_init_argv+9↓p
.plt.got:0000000000001DC8                                         ; argv_iter_init_stream+9↓p ...
.plt.got:0000000000001DC8                 jmp     cs:malloc_ptr
.plt.got:0000000000001DC8 malloc          endp
.plt.got:0000000000001DC8
.plt.got:0000000000001DC8 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DCE                 align 10h
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; Attributes: thunk
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001DD0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001DD0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001DD0 __cxa_finalize  endp
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DD6                 align 8
.plt.got:0000000000001DD6 ; } // starts at 1DC0
.plt.got:0000000000001DD6 _plt_got        ends
.plt.got:0000000000001DD6
LOAD:0000000000001DD8 ; ===========================================================================
LOAD:0000000000001DD8
LOAD:0000000000001DD8 ; Segment type: Pure code
LOAD:0000000000001DD8 ; Segment permissions: Read/Execute
LOAD:0000000000001DD8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001DD8                 assume cs:LOAD
LOAD:0000000000001DD8                 ;org 1DD8h
LOAD:0000000000001DD8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001DD8                 align 20h
LOAD:0000000000001DD8 LOAD            ends
LOAD:0000000000001DD8
.text:0000000000001DE0 ; ===========================================================================
.text:0000000000001DE0
.text:0000000000001DE0 ; Segment type: Pure code
.text:0000000000001DE0 ; Segment permissions: Read/Execute
.text:0000000000001DE0 _text           segment para public 'CODE' use64
.text:0000000000001DE0                 assume cs:_text
.text:0000000000001DE0                 ;org 1DE0h
.text:0000000000001DE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001DE0
.text:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DE0
.text:0000000000001DE0
.text:0000000000001DE0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001DE0                 public main
.text:0000000000001DE0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001DE0
.text:0000000000001DE0 var_228         = qword ptr -228h
.text:0000000000001DE0 ptr             = qword ptr -220h
.text:0000000000001DE0 var_218         = qword ptr -218h
.text:0000000000001DE0 var_20D         = byte ptr -20Dh
.text:0000000000001DE0 fd              = dword ptr -20Ch
.text:0000000000001DE0 var_1FC         = dword ptr -1FCh
.text:0000000000001DE0 var_1F8         = qword ptr -1F8h
.text:0000000000001DE0 var_1F0         = qword ptr -1F0h
.text:0000000000001DE0 stat_buf        = stat ptr -0D8h
.text:0000000000001DE0 var_40          = qword ptr -40h
.text:0000000000001DE0
.text:0000000000001DE0 ; __unwind {
.text:0000000000001DE0                 push    r15
.text:0000000000001DE2                 push    r14
.text:0000000000001DE4                 push    r13
.text:0000000000001DE6                 push    r12
.text:0000000000001DE8                 mov     r12, rsi
.text:0000000000001DEB                 push    rbp
.text:0000000000001DEC                 push    rbx
.text:0000000000001DED                 mov     ebx, edi
.text:0000000000001DEF                 lea     r13, longopts
.text:0000000000001DF6                 sub     rsp, 1F8h
.text:0000000000001DFD                 mov     rdi, [rsi]
.text:0000000000001E00                 mov     rax, fs:28h
.text:0000000000001E09                 mov     [rsp+228h+var_40], rax
.text:0000000000001E11                 xor     eax, eax
.text:0000000000001E13                 call    set_program_name
.text:0000000000001E18                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001E1F                 mov     edi, 6          ; category
.text:0000000000001E24                 call    _setlocale
.text:0000000000001E29                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001E30                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E37                 call    _bindtextdomain
.text:0000000000001E3C                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E43                 call    _textdomain
.text:0000000000001E48                 lea     rdi, close_stdout
.text:0000000000001E4F                 call    atexit
.text:0000000000001E54                 call    _getpagesize
.text:0000000000001E59                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001E60                 xor     ecx, ecx        ; n
.text:0000000000001E62                 xor     esi, esi        ; buf
.text:0000000000001E64                 cdqe
.text:0000000000001E66                 mov     edx, 1          ; modes
.text:0000000000001E6B                 mov     cs:page_size, rax
.text:0000000000001E72                 call    _setvbuf
.text:0000000000001E77                 lea     rdi, name       ; "POSIXLY_CORRECT"
.text:0000000000001E7E                 call    _getenv
.text:0000000000001E83                 test    rax, rax
.text:0000000000001E86                 mov     cs:print_bytes, 0
.text:0000000000001E8D                 mov     cs:print_chars, 0
.text:0000000000001E94                 setnz   cs:posixly_correct
.text:0000000000001E9B                 mov     cs:print_words, 0
.text:0000000000001EA2                 xor     ebp, ebp
.text:0000000000001EA4                 mov     cs:print_lines, 0
.text:0000000000001EAB                 mov     cs:print_linelength, 0
.text:0000000000001EB2                 mov     cs:max_line_length, 0
.text:0000000000001EBD                 mov     cs:total_bytes, 0
.text:0000000000001EC8                 mov     cs:total_chars, 0
.text:0000000000001ED3                 mov     cs:total_words, 0
.text:0000000000001EDE                 mov     cs:total_lines, 0
.text:0000000000001EE9                 nop     dword ptr [rax+00000000h]
.text:0000000000001EF0
.text:0000000000001EF0 loc_1EF0:                               ; CODE XREF: main+15F↓j
.text:0000000000001EF0                                         ; main+1D7↓j ...
.text:0000000000001EF0                 lea     rdx, shortopts  ; "clLmw"
.text:0000000000001EF7                 xor     r8d, r8d        ; longind
.text:0000000000001EFA                 mov     rcx, r13        ; longopts
.text:0000000000001EFD                 mov     rsi, r12        ; argv
.text:0000000000001F00                 mov     edi, ebx        ; argc
.text:0000000000001F02                 call    _getopt_long
.text:0000000000001F07                 cmp     eax, 0FFFFFFFFh
.text:0000000000001F0A                 jz      loc_2004
.text:0000000000001F10                 cmp     eax, 63h ; 'c'
.text:0000000000001F13                 jz      loc_1FC0
.text:0000000000001F19                 jle     short loc_1F48
.text:0000000000001F1B                 cmp     eax, 6Dh ; 'm'
.text:0000000000001F1E                 jz      loc_1FF8
.text:0000000000001F24                 jle     loc_1FE0
.text:0000000000001F2A                 cmp     eax, 77h ; 'w'
.text:0000000000001F2D                 jz      loc_1FD0
.text:0000000000001F33                 add     eax, 0FFFFFF80h
.text:0000000000001F36                 jnz     short loc_1F5F
.text:0000000000001F38                 mov     rbp, cs:optarg@@GLIBC_2_2_5
.text:0000000000001F3F                 jmp     short loc_1EF0
.text:0000000000001F3F ; ---------------------------------------------------------------------------
.text:0000000000001F41                 align 8
.text:0000000000001F48
.text:0000000000001F48 loc_1F48:                               ; CODE XREF: main+139↑j
.text:0000000000001F48                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001F4D                 jz      loc_277D
.text:0000000000001F53                 cmp     eax, 4Ch ; 'L'
.text:0000000000001F56                 jz      short loc_1FB0
.text:0000000000001F58                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001F5D                 jz      short loc_1F70
.text:0000000000001F5F
.text:0000000000001F5F loc_1F5F:                               ; CODE XREF: main+156↑j
.text:0000000000001F5F                                         ; main+203↓j ...
.text:0000000000001F5F                 mov     edi, 1          ; status
.text:0000000000001F64                 call    usage
.text:0000000000001F64 ; ---------------------------------------------------------------------------
.text:0000000000001F69                 align 10h
.text:0000000000001F70
.text:0000000000001F70 loc_1F70:                               ; CODE XREF: main+17D↑j
.text:0000000000001F70                 sub     rsp, 8
.text:0000000000001F74                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F7B                 mov     rcx, cs:Version
.text:0000000000001F82                 push    0
.text:0000000000001F84                 lea     r9, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001F8B                 lea     r8, aPaulRubin  ; "Paul Rubin"
.text:0000000000001F92                 lea     rdx, unk_706C
.text:0000000000001F99                 lea     rsi, aWc        ; "wc"
.text:0000000000001FA0                 xor     eax, eax
.text:0000000000001FA2                 call    version_etc
.text:0000000000001FA7                 xor     edi, edi        ; status
.text:0000000000001FA9                 call    _exit
.text:0000000000001FA9 ; ---------------------------------------------------------------------------
.text:0000000000001FAE                 align 10h
.text:0000000000001FB0
.text:0000000000001FB0 loc_1FB0:                               ; CODE XREF: main+176↑j
.text:0000000000001FB0                 mov     cs:print_linelength, 1
.text:0000000000001FB7                 jmp     loc_1EF0
.text:0000000000001FB7 ; ---------------------------------------------------------------------------
.text:0000000000001FBC                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: main+133↑j
.text:0000000000001FC0                 mov     cs:print_bytes, 1
.text:0000000000001FC7                 jmp     loc_1EF0
.text:0000000000001FC7 ; ---------------------------------------------------------------------------
.text:0000000000001FCC                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 loc_1FD0:                               ; CODE XREF: main+14D↑j
.text:0000000000001FD0                 mov     cs:print_words, 1
.text:0000000000001FD7                 jmp     loc_1EF0
.text:0000000000001FD7 ; ---------------------------------------------------------------------------
.text:0000000000001FDC                 align 20h
.text:0000000000001FE0
.text:0000000000001FE0 loc_1FE0:                               ; CODE XREF: main+144↑j
.text:0000000000001FE0                 cmp     eax, 6Ch ; 'l'
.text:0000000000001FE3                 jnz     loc_1F5F
.text:0000000000001FE9                 mov     cs:print_lines, 1
.text:0000000000001FF0                 jmp     loc_1EF0
.text:0000000000001FF0 ; ---------------------------------------------------------------------------
.text:0000000000001FF5                 align 8
.text:0000000000001FF8
.text:0000000000001FF8 loc_1FF8:                               ; CODE XREF: main+13E↑j
.text:0000000000001FF8                 mov     cs:print_chars, 1
.text:0000000000001FFF                 jmp     loc_1EF0
.text:0000000000002004 ; ---------------------------------------------------------------------------
.text:0000000000002004
.text:0000000000002004 loc_2004:                               ; CODE XREF: main+12A↑j
.text:0000000000002004                 cmp     cs:print_lines, 0
.text:000000000000200B                 jnz     short loc_2046
.text:000000000000200D                 cmp     cs:print_words, 0
.text:0000000000002014                 jnz     short loc_2046
.text:0000000000002016                 cmp     cs:print_chars, 0
.text:000000000000201D                 jnz     short loc_2046
.text:000000000000201F                 cmp     cs:print_bytes, 0
.text:0000000000002026                 jnz     short loc_2046
.text:0000000000002028                 cmp     cs:print_linelength, 0
.text:000000000000202F                 jnz     short loc_2046
.text:0000000000002031                 mov     cs:print_bytes, 1
.text:0000000000002038                 mov     cs:print_words, 1
.text:000000000000203F                 mov     cs:print_lines, 1
.text:0000000000002046
.text:0000000000002046 loc_2046:                               ; CODE XREF: main+22B↑j
.text:0000000000002046                                         ; main+234↑j ...
.text:0000000000002046                 test    rbp, rbp
.text:0000000000002049                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000002050                 jz      loc_218B
.text:0000000000002056                 cmp     ebx, eax
.text:0000000000002058                 jg      loc_2798
.text:000000000000205E                 lea     rsi, aLt+2      ; s2
.text:0000000000002065                 mov     rdi, rbp        ; s1
.text:0000000000002068                 call    _strcmp
.text:000000000000206D                 test    eax, eax
.text:000000000000206F                 jnz     loc_2600
.text:0000000000002075                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:000000000000207C
.text:000000000000207C loc_207C:                               ; CODE XREF: main+835↓j
.text:000000000000207C                 mov     rdi, rbx        ; stream
.text:000000000000207F                 call    _fileno
.text:0000000000002084                 lea     rdx, [rsp+228h+stat_buf] ; stat_buf
.text:000000000000208C                 mov     esi, eax        ; fildes
.text:000000000000208E                 mov     edi, 1          ; ver
.text:0000000000002093                 call    ___fxstat
.text:0000000000002098                 test    eax, eax
.text:000000000000209A                 jnz     short loc_20B3
.text:000000000000209C                 mov     eax, [rsp+228h+stat_buf.st_mode]
.text:00000000000020A3                 and     eax, 0F000h
.text:00000000000020A8                 cmp     eax, 8000h
.text:00000000000020AD                 jz      loc_26D9
.text:00000000000020B3
.text:00000000000020B3 loc_20B3:                               ; CODE XREF: main+2BA↑j
.text:00000000000020B3                                         ; main+949↓j
.text:00000000000020B3                 mov     rdi, rbx
.text:00000000000020B6                 xor     r12d, r12d
.text:00000000000020B9                 xor     ebx, ebx
.text:00000000000020BB                 call    argv_iter_init_stream
.text:00000000000020C0                 mov     [rsp+228h+var_20D], 0
.text:00000000000020C5                 mov     r13, rax
.text:00000000000020C8
.text:00000000000020C8 loc_20C8:                               ; CODE XREF: main+3CF↓j
.text:00000000000020C8                                         ; main+998↓j
.text:00000000000020C8                 test    r13, r13
.text:00000000000020CB                 jz      loc_2793
.text:00000000000020D1                 test    rbx, rbx
.text:00000000000020D4                 jz      loc_21B4
.text:00000000000020DA                 mov     edx, 98h
.text:00000000000020DF                 xor     ecx, ecx
.text:00000000000020E1                 mov     rax, rdx
.text:00000000000020E4                 mul     rbx
.text:00000000000020E7                 jo      loc_2789
.text:00000000000020ED
.text:00000000000020ED loc_20ED:                               ; CODE XREF: main+9AE↓j
.text:00000000000020ED                 test    rax, rax
.text:00000000000020F0                 js      loc_2793
.text:00000000000020F6                 test    rcx, rcx
.text:00000000000020F9                 jnz     loc_2793
.text:00000000000020FF                 imul    rax, rbx, 98h
.text:0000000000002106                 mov     rdi, rax
.text:0000000000002109                 mov     [rsp+228h+var_218], rax
.text:000000000000210E                 call    xmalloc
.text:0000000000002113                 cmp     rbx, 1
.text:0000000000002117                 mov     [rsp+228h+ptr], rax
.text:000000000000211C                 jz      loc_2674
.text:0000000000002122
.text:0000000000002122 loc_2122:                               ; CODE XREF: main+8C2↓j
.text:0000000000002122                 mov     rax, [rsp+228h+ptr]
.text:0000000000002127                 lea     r14, [rax+8]
.text:000000000000212B                 lea     rax, [r12+rbx*8]
.text:000000000000212F                 mov     [rsp+228h+var_228], rax
.text:0000000000002133                 jmp     short loc_215D
.text:0000000000002135 ; ---------------------------------------------------------------------------
.text:0000000000002135
.text:0000000000002135 loc_2135:                               ; CODE XREF: main+384↓j
.text:0000000000002135                                         ; main+397↓j
.text:0000000000002135                 mov     rdx, r14        ; stat_buf
.text:0000000000002138                 xor     esi, esi        ; fildes
.text:000000000000213A                 mov     edi, 1          ; ver
.text:000000000000213F                 call    ___fxstat
.text:0000000000002144
.text:0000000000002144 loc_2144:                               ; CODE XREF: main+3A9↓j
.text:0000000000002144                 mov     [r14-8], eax
.text:0000000000002148                 add     r12, 8
.text:000000000000214C                 add     r14, 98h
.text:0000000000002153                 cmp     [rsp+228h+var_228], r12
.text:0000000000002157                 jz      loc_2552
.text:000000000000215D
.text:000000000000215D loc_215D:                               ; CODE XREF: main+353↑j
.text:000000000000215D                 mov     r15, [r12]
.text:0000000000002161                 test    r15, r15
.text:0000000000002164                 jz      short loc_2135
.text:0000000000002166                 lea     rsi, aLt+2      ; s2
.text:000000000000216D                 mov     rdi, r15        ; s1
.text:0000000000002170                 call    _strcmp
.text:0000000000002175                 test    eax, eax
.text:0000000000002177                 jz      short loc_2135
.text:0000000000002179                 mov     rdx, r14        ; stat_buf
.text:000000000000217C                 mov     rsi, r15        ; filename
.text:000000000000217F                 mov     edi, 1          ; ver
.text:0000000000002184                 call    ___xstat
.text:0000000000002189                 jmp     short loc_2144
.text:000000000000218B ; ---------------------------------------------------------------------------
.text:000000000000218B
.text:000000000000218B loc_218B:                               ; CODE XREF: main+270↑j
.text:000000000000218B                 cmp     ebx, eax
.text:000000000000218D                 jg      loc_265A
.text:0000000000002193                 lea     r12, stdin_only_8119
.text:000000000000219A                 mov     ebx, 1
.text:000000000000219F
.text:000000000000219F loc_219F:                               ; CODE XREF: main+886↓j
.text:000000000000219F                 mov     rdi, r12
.text:00000000000021A2                 call    argv_iter_init_argv
.text:00000000000021A7                 mov     [rsp+228h+var_20D], 0
.text:00000000000021AC                 mov     r13, rax
.text:00000000000021AF                 jmp     loc_20C8
.text:00000000000021B4 ; ---------------------------------------------------------------------------
.text:00000000000021B4
.text:00000000000021B4 loc_21B4:                               ; CODE XREF: main+2F4↑j
.text:00000000000021B4                 mov     edi, 98h
.text:00000000000021B9                 call    xmalloc
.text:00000000000021BE                 mov     ecx, 1
.text:00000000000021C3                 mov     [rsp+228h+ptr], rax
.text:00000000000021C8                 mov     dword ptr [rax], 1
.text:00000000000021CE
.text:00000000000021CE loc_21CE:                               ; CODE XREF: main+77F↓j
.text:00000000000021CE                                         ; main+7E3↓j ...
.text:00000000000021CE                 lea     rax, [rsp+228h+var_1FC]
.text:00000000000021D3                 mov     cs:number_width, ecx
.text:00000000000021D9                 xor     r14d, r14d
.text:00000000000021DC                 mov     r12d, 1
.text:00000000000021E2                 mov     [rsp+228h+var_228], rax
.text:00000000000021E6                 db      2Eh
.text:00000000000021E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000021F0
.text:00000000000021F0 loc_21F0:                               ; CODE XREF: main+4D9↓j
.text:00000000000021F0                 mov     rsi, [rsp+228h+var_228]
.text:00000000000021F4                 mov     rdi, r13
.text:00000000000021F7                 call    argv_iter
.text:00000000000021FC                 test    rax, rax
.text:00000000000021FF                 mov     r15, rax
.text:0000000000002202                 jz      loc_240A
.text:0000000000002208                 test    rbp, rbp
.text:000000000000220B                 jz      loc_23D5
.text:0000000000002211                 lea     rdx, aLt+2      ; "-"
.text:0000000000002218                 mov     ecx, 2
.text:000000000000221D                 mov     rsi, rbp
.text:0000000000002220                 mov     rdi, rdx
.text:0000000000002223                 repe cmpsb
.text:0000000000002225                 setnbe  al
.text:0000000000002228                 sbb     al, 0
.text:000000000000222A                 test    al, al
.text:000000000000222C                 jnz     loc_237F
.text:0000000000002232                 mov     rsi, rdx        ; s2
.text:0000000000002235                 mov     rdi, r15        ; s1
.text:0000000000002238                 call    _strcmp
.text:000000000000223D                 test    eax, eax
.text:000000000000223F                 jz      loc_22EE
.text:0000000000002245                 cmp     byte ptr [r15], 0
.text:0000000000002249                 jz      loc_232C
.text:000000000000224F                 test    rbx, rbx
.text:0000000000002252                 jnz     loc_238C
.text:0000000000002258                 mov     rdx, [rsp+228h+ptr]
.text:000000000000225D
.text:000000000000225D loc_225D:                               ; CODE XREF: main+5D3↓j
.text:000000000000225D                 xor     esi, esi        ; oflag
.text:000000000000225F                 xor     eax, eax
.text:0000000000002261                 mov     rdi, r15        ; file
.text:0000000000002264                 mov     [rsp+228h+var_218], rdx
.text:0000000000002269                 call    _open
.text:000000000000226E                 cmp     eax, 0FFFFFFFFh
.text:0000000000002271                 mov     rdx, [rsp+228h+var_218]
.text:0000000000002276                 jz      short loc_22BE
.text:0000000000002278                 xor     ecx, ecx
.text:000000000000227A                 mov     rsi, r15
.text:000000000000227D                 mov     edi, eax
.text:000000000000227F                 mov     [rsp+228h+fd], eax
.text:0000000000002283                 call    wc
.text:0000000000002288                 mov     r9d, [rsp+228h+fd]
.text:000000000000228D                 mov     byte ptr [rsp+228h+var_218], al
.text:0000000000002291                 mov     edi, r9d        ; fd
.text:0000000000002294                 call    _close
.text:0000000000002299                 test    eax, eax
.text:000000000000229B                 movzx   edx, byte ptr [rsp+228h+var_218]
.text:00000000000022A0                 jnz     short loc_22BE
.text:00000000000022A2
.text:00000000000022A2 loc_22A2:                               ; CODE XREF: main+50C↓j
.text:00000000000022A2                                         ; main+5F0↓j
.text:00000000000022A2                 and     r12d, edx
.text:00000000000022A5
.text:00000000000022A5 loc_22A5:                               ; CODE XREF: main+59A↓j
.text:00000000000022A5                                         ; main+625↓j
.text:00000000000022A5                 test    rbx, rbx
.text:00000000000022A8                 jnz     short loc_22B5
.text:00000000000022AA                 mov     rax, [rsp+228h+ptr]
.text:00000000000022AF                 mov     dword ptr [rax], 1
.text:00000000000022B5
.text:00000000000022B5 loc_22B5:                               ; CODE XREF: main+4C8↑j
.text:00000000000022B5                 add     r14, 1
.text:00000000000022B9                 jmp     loc_21F0
.text:00000000000022BE ; ---------------------------------------------------------------------------
.text:00000000000022BE
.text:00000000000022BE loc_22BE:                               ; CODE XREF: main+496↑j
.text:00000000000022BE                                         ; main+4C0↑j
.text:00000000000022BE                 mov     rdx, r15
.text:00000000000022C1                 mov     esi, 3
.text:00000000000022C6                 xor     edi, edi
.text:00000000000022C8                 call    quotearg_n_style_colon
.text:00000000000022CD                 mov     r15, rax
.text:00000000000022D0                 call    ___errno_location
.text:00000000000022D5                 mov     esi, [rax]      ; errnum
.text:00000000000022D7                 lea     rdx, format     ; format
.text:00000000000022DE                 mov     rcx, r15
.text:00000000000022E1                 xor     edi, edi        ; status
.text:00000000000022E3                 xor     eax, eax
.text:00000000000022E5                 call    _error
.text:00000000000022EA                 xor     edx, edx
.text:00000000000022EC                 jmp     short loc_22A2
.text:00000000000022EE ; ---------------------------------------------------------------------------
.text:00000000000022EE
.text:00000000000022EE loc_22EE:                               ; CODE XREF: main+45F↑j
.text:00000000000022EE                 mov     rsi, r15
.text:00000000000022F1                 mov     edi, 4
.text:00000000000022F6                 call    quotearg_style
.text:00000000000022FB                 lea     rsi, msgid      ; "when reading file names from stdin, no "...
.text:0000000000002302                 xor     edi, edi        ; domainname
.text:0000000000002304                 mov     r12, rax
.text:0000000000002307                 mov     edx, 5          ; category
.text:000000000000230C                 call    _dcgettext
.text:0000000000002311                 xor     esi, esi        ; errnum
.text:0000000000002313                 mov     rdx, rax        ; format
.text:0000000000002316                 xor     edi, edi        ; status
.text:0000000000002318                 xor     eax, eax
.text:000000000000231A                 mov     rcx, r12
.text:000000000000231D                 call    _error
.text:0000000000002322                 cmp     byte ptr [r15], 0
.text:0000000000002326                 jnz     loc_2402
.text:000000000000232C
.text:000000000000232C loc_232C:                               ; CODE XREF: main+469↑j
.text:000000000000232C                                         ; main+5A3↓j
.text:000000000000232C                 mov     rdi, r13
.text:000000000000232F                 call    argv_iter_n_args
.text:0000000000002334                 lea     rsi, aInvalidZeroLen ; "invalid zero-length file name"
.text:000000000000233B                 mov     edx, 5          ; category
.text:0000000000002340                 xor     edi, edi        ; domainname
.text:0000000000002342                 mov     r15, rax
.text:0000000000002345                 call    _dcgettext
.text:000000000000234A                 mov     rdx, rbp
.text:000000000000234D                 mov     esi, 3
.text:0000000000002352                 xor     edi, edi
.text:0000000000002354                 mov     r12, rax
.text:0000000000002357                 call    quotearg_n_style_colon
.text:000000000000235C                 lea     rdx, aSLuS      ; "%s:%lu: %s"
.text:0000000000002363                 mov     r9, r12
.text:0000000000002366                 mov     rcx, rax
.text:0000000000002369                 mov     r8, r15
.text:000000000000236C                 xor     esi, esi        ; errnum
.text:000000000000236E                 xor     edi, edi        ; status
.text:0000000000002370                 xor     eax, eax
.text:0000000000002372                 xor     r12d, r12d
.text:0000000000002375                 call    _error
.text:000000000000237A                 jmp     loc_22A5
.text:000000000000237F ; ---------------------------------------------------------------------------
.text:000000000000237F
.text:000000000000237F loc_237F:                               ; CODE XREF: main+44C↑j
.text:000000000000237F                 cmp     byte ptr [r15], 0
.text:0000000000002383                 jz      short loc_232C
.text:0000000000002385
.text:0000000000002385 loc_2385:                               ; CODE XREF: main+5F8↓j
.text:0000000000002385                 xor     edx, edx
.text:0000000000002387                 test    rbx, rbx
.text:000000000000238A                 jz      short loc_2393
.text:000000000000238C
.text:000000000000238C loc_238C:                               ; CODE XREF: main+472↑j
.text:000000000000238C                 imul    rdx, r14, 98h
.text:0000000000002393
.text:0000000000002393 loc_2393:                               ; CODE XREF: main+5AA↑j
.text:0000000000002393                 add     rdx, [rsp+228h+ptr]
.text:0000000000002398                 lea     rsi, aLt+2      ; s2
.text:000000000000239F                 mov     rdi, r15        ; s1
.text:00000000000023A2                 mov     [rsp+228h+var_218], rdx
.text:00000000000023A7                 call    _strcmp
.text:00000000000023AC                 test    eax, eax
.text:00000000000023AE                 mov     rdx, [rsp+228h+var_218]
.text:00000000000023B3                 jnz     loc_225D
.text:00000000000023B9                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000023BD                 mov     rsi, r15
.text:00000000000023C0                 xor     edi, edi
.text:00000000000023C2                 mov     cs:have_read_stdin, 1
.text:00000000000023C9                 call    wc
.text:00000000000023CE                 mov     edx, eax
.text:00000000000023D0                 jmp     loc_22A2
.text:00000000000023D5 ; ---------------------------------------------------------------------------
.text:00000000000023D5
.text:00000000000023D5 loc_23D5:                               ; CODE XREF: main+42B↑j
.text:00000000000023D5                 cmp     byte ptr [rax], 0
.text:00000000000023D8                 jnz     short loc_2385
.text:00000000000023DA                 lea     rsi, aInvalidZeroLen ; "invalid zero-length file name"
.text:00000000000023E1                 mov     edx, 5          ; category
.text:00000000000023E6                 xor     edi, edi        ; domainname
.text:00000000000023E8                 call    _dcgettext
.text:00000000000023ED                 lea     rdx, format     ; format
.text:00000000000023F4                 mov     rcx, rax
.text:00000000000023F7                 xor     esi, esi        ; errnum
.text:00000000000023F9                 xor     edi, edi        ; status
.text:00000000000023FB                 xor     eax, eax
.text:00000000000023FD                 call    _error
.text:0000000000002402
.text:0000000000002402 loc_2402:                               ; CODE XREF: main+546↑j
.text:0000000000002402                 xor     r12d, r12d
.text:0000000000002405                 jmp     loc_22A5
.text:000000000000240A ; ---------------------------------------------------------------------------
.text:000000000000240A
.text:000000000000240A loc_240A:                               ; CODE XREF: main+422↑j
.text:000000000000240A                 mov     eax, [rsp+228h+var_1FC]
.text:000000000000240E                 cmp     eax, 3
.text:0000000000002411                 jz      loc_2793
.text:0000000000002417                 cmp     eax, 4
.text:000000000000241A                 jz      loc_250C
.text:0000000000002420                 cmp     eax, 2
.text:0000000000002423                 jz      short loc_2444
.text:0000000000002425                 lea     rcx, __PRETTY_FUNCTION___8129 ; "main"
.text:000000000000242C                 lea     rsi, file       ; "../coreutils-8.31/src/wc.c"
.text:0000000000002433                 lea     rdi, assertion  ; "!\"unexpected error code from argv_iter"...
.text:000000000000243A                 mov     edx, 33Fh       ; line
.text:000000000000243F                 call    ___assert_fail
.text:0000000000002444 ; ---------------------------------------------------------------------------
.text:0000000000002444
.text:0000000000002444 loc_2444:                               ; CODE XREF: main+643↑j
.text:0000000000002444                 test    rbp, rbp
.text:0000000000002447                 setz    al
.text:000000000000244A                 and     al, r12b
.text:000000000000244D                 mov     ebx, eax
.text:000000000000244F                 jz      short loc_2465
.text:0000000000002451                 mov     rdi, r13
.text:0000000000002454                 mov     r12d, ebx
.text:0000000000002457                 call    argv_iter_n_args
.text:000000000000245C                 test    rax, rax
.text:000000000000245F                 jz      loc_26B8
.text:0000000000002465
.text:0000000000002465 loc_2465:                               ; CODE XREF: main+66F↑j
.text:0000000000002465                                         ; main+76D↓j ...
.text:0000000000002465                 cmp     [rsp+228h+var_20D], 0
.text:000000000000246A                 jnz     loc_25F1
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: main+81B↓j
.text:0000000000002470                 mov     rdi, r13
.text:0000000000002473                 call    argv_iter_n_args
.text:0000000000002478                 cmp     rax, 1
.text:000000000000247C                 jbe     short loc_24BC
.text:000000000000247E                 lea     rsi, aTotal     ; "total"
.text:0000000000002485                 mov     edx, 5          ; category
.text:000000000000248A                 xor     edi, edi        ; domainname
.text:000000000000248C                 call    _dcgettext
.text:0000000000002491                 mov     r8, cs:max_line_length
.text:0000000000002498                 mov     rcx, cs:total_bytes
.text:000000000000249F                 mov     r9, rax
.text:00000000000024A2                 mov     rdx, cs:total_chars
.text:00000000000024A9                 mov     rsi, cs:total_words
.text:00000000000024B0                 mov     rdi, cs:total_lines
.text:00000000000024B7                 call    write_counts
.text:00000000000024BC
.text:00000000000024BC loc_24BC:                               ; CODE XREF: main+69C↑j
.text:00000000000024BC                 mov     rdi, r13        ; ptr
.text:00000000000024BF                 call    argv_iter_free
.text:00000000000024C4                 mov     rdi, [rsp+228h+ptr] ; ptr
.text:00000000000024C9                 call    free
.text:00000000000024CE                 cmp     cs:have_read_stdin, 0
.text:00000000000024D5                 jnz     loc_25C8
.text:00000000000024DB
.text:00000000000024DB loc_24DB:                               ; CODE XREF: main+7F1↓j
.text:00000000000024DB                 xor     r12d, 1
.text:00000000000024DF                 mov     rbx, [rsp+228h+var_40]
.text:00000000000024E7                 xor     rbx, fs:28h
.text:00000000000024F0                 movzx   eax, r12b
.text:00000000000024F4                 jnz     loc_2784
.text:00000000000024FA                 add     rsp, 1F8h
.text:0000000000002501                 pop     rbx
.text:0000000000002502                 pop     rbp
.text:0000000000002503                 pop     r12
.text:0000000000002505                 pop     r13
.text:0000000000002507                 pop     r14
.text:0000000000002509                 pop     r15
.text:000000000000250B                 retn
.text:000000000000250C ; ---------------------------------------------------------------------------
.text:000000000000250C
.text:000000000000250C loc_250C:                               ; CODE XREF: main+63A↑j
.text:000000000000250C                 mov     rdx, rbp
.text:000000000000250F                 mov     esi, 3
.text:0000000000002514                 xor     edi, edi
.text:0000000000002516                 call    quotearg_n_style_colon
.text:000000000000251B                 lea     rsi, aSReadError ; "%s: read error"
.text:0000000000002522                 mov     edx, 5          ; category
.text:0000000000002527                 xor     edi, edi        ; domainname
.text:0000000000002529                 mov     rbp, rax
.text:000000000000252C                 xor     r12d, r12d
.text:000000000000252F                 call    _dcgettext
.text:0000000000002534                 mov     rbx, rax
.text:0000000000002537                 call    ___errno_location
.text:000000000000253C                 mov     esi, [rax]      ; errnum
.text:000000000000253E                 mov     rcx, rbp
.text:0000000000002541                 mov     rdx, rbx        ; format
.text:0000000000002544                 xor     edi, edi        ; status
.text:0000000000002546                 xor     eax, eax
.text:0000000000002548                 call    _error
.text:000000000000254D                 jmp     loc_2465
.text:0000000000002552 ; ---------------------------------------------------------------------------
.text:0000000000002552
.text:0000000000002552 loc_2552:                               ; CODE XREF: main+377↑j
.text:0000000000002552                 mov     rax, [rsp+228h+ptr]
.text:0000000000002557                 mov     ecx, 1
.text:000000000000255C                 cmp     dword ptr [rax], 0
.text:000000000000255F                 jg      loc_21CE
.text:0000000000002565                 mov     rsi, [rsp+228h+var_218]
.text:000000000000256A                 mov     rdx, rax
.text:000000000000256D                 mov     edi, 1
.text:0000000000002572                 add     rsi, rax
.text:0000000000002575                 xor     eax, eax
.text:0000000000002577                 jmp     short loc_259F
.text:0000000000002579 ; ---------------------------------------------------------------------------
.text:0000000000002579
.text:0000000000002579 loc_2579:                               ; CODE XREF: main+7C2↓j
.text:0000000000002579                 cmp     dword ptr [rdx], 0
.text:000000000000257C                 jnz     short loc_2598
.text:000000000000257E                 mov     ecx, [rdx+20h]
.text:0000000000002581                 and     ecx, 0F000h
.text:0000000000002587                 cmp     ecx, 8000h
.text:000000000000258D                 jz      loc_266B
.text:0000000000002593                 mov     edi, 7
.text:0000000000002598
.text:0000000000002598 loc_2598:                               ; CODE XREF: main+79C↑j
.text:0000000000002598                                         ; main+88F↓j
.text:0000000000002598                 add     rdx, 98h
.text:000000000000259F
.text:000000000000259F loc_259F:                               ; CODE XREF: main+797↑j
.text:000000000000259F                 cmp     rsi, rdx
.text:00000000000025A2                 jnz     short loc_2579
.text:00000000000025A4                 mov     ecx, 1
.text:00000000000025A9                 mov     esi, 0Ah
.text:00000000000025AE                 jmp     short loc_25B8
.text:00000000000025B0 ; ---------------------------------------------------------------------------
.text:00000000000025B0
.text:00000000000025B0 loc_25B0:                               ; CODE XREF: main+7DC↓j
.text:00000000000025B0                 xor     edx, edx
.text:00000000000025B2                 add     ecx, 1
.text:00000000000025B5                 div     rsi
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: main+7CE↑j
.text:00000000000025B8                 cmp     rax, 9
.text:00000000000025BC                 ja      short loc_25B0
.text:00000000000025BE                 cmp     ecx, edi
.text:00000000000025C0                 cmovl   ecx, edi
.text:00000000000025C3                 jmp     loc_21CE
.text:00000000000025C8 ; ---------------------------------------------------------------------------
.text:00000000000025C8
.text:00000000000025C8 loc_25C8:                               ; CODE XREF: main+6F5↑j
.text:00000000000025C8                 xor     edi, edi        ; fd
.text:00000000000025CA                 call    _close
.text:00000000000025CF                 test    eax, eax
.text:00000000000025D1                 jz      loc_24DB
.text:00000000000025D7                 call    ___errno_location
.text:00000000000025DC                 mov     esi, [rax]      ; errnum
.text:00000000000025DE                 lea     rdx, aLt+2      ; format
.text:00000000000025E5                 mov     edi, 1          ; status
.text:00000000000025EA                 xor     eax, eax
.text:00000000000025EC                 call    _error
.text:00000000000025F1
.text:00000000000025F1 loc_25F1:                               ; CODE XREF: main+68A↑j
.text:00000000000025F1                 lea     rdi, [rsp+228h+var_1F8]
.text:00000000000025F6                 call    readtokens0_free
.text:00000000000025FB                 jmp     loc_2470
.text:0000000000002600 ; ---------------------------------------------------------------------------
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: main+28F↑j
.text:0000000000002600                 lea     rsi, aSReadError+0Dh ; modes
.text:0000000000002607                 mov     rdi, rbp        ; filename
.text:000000000000260A                 call    _fopen
.text:000000000000260F                 test    rax, rax
.text:0000000000002612                 mov     rbx, rax
.text:0000000000002615                 jnz     loc_207C
.text:000000000000261B                 mov     rsi, rbp
.text:000000000000261E                 mov     edi, 4
.text:0000000000002623                 call    quotearg_style
.text:0000000000002628                 lea     rsi, aCannotOpenSFor ; "cannot open %s for reading"
.text:000000000000262F                 mov     edx, 5          ; category
.text:0000000000002634                 xor     edi, edi        ; domainname
.text:0000000000002636                 mov     rbp, rax
.text:0000000000002639                 call    _dcgettext
.text:000000000000263E                 mov     rbx, rax
.text:0000000000002641                 call    ___errno_location
.text:0000000000002646                 mov     esi, [rax]      ; errnum
.text:0000000000002648                 mov     rcx, rbp
.text:000000000000264B                 mov     rdx, rbx        ; format
.text:000000000000264E                 mov     edi, 1          ; status
.text:0000000000002653                 xor     eax, eax
.text:0000000000002655                 call    _error
.text:000000000000265A
.text:000000000000265A loc_265A:                               ; CODE XREF: main+3AD↑j
.text:000000000000265A                 movsxd  rdx, eax
.text:000000000000265D                 sub     ebx, eax
.text:000000000000265F                 lea     r12, [r12+rdx*8]
.text:0000000000002663                 movsxd  rbx, ebx
.text:0000000000002666                 jmp     loc_219F
.text:000000000000266B ; ---------------------------------------------------------------------------
.text:000000000000266B
.text:000000000000266B loc_266B:                               ; CODE XREF: main+7AD↑j
.text:000000000000266B                 add     rax, [rdx+38h]
.text:000000000000266F                 jmp     loc_2598
.text:0000000000002674 ; ---------------------------------------------------------------------------
.text:0000000000002674
.text:0000000000002674 loc_2674:                               ; CODE XREF: main+33C↑j
.text:0000000000002674                 movzx   eax, cs:print_words
.text:000000000000267B                 movzx   ecx, cs:print_lines
.text:0000000000002682                 add     ecx, eax
.text:0000000000002684                 movzx   eax, cs:print_chars
.text:000000000000268B                 add     ecx, eax
.text:000000000000268D                 movzx   eax, cs:print_bytes
.text:0000000000002694                 add     ecx, eax
.text:0000000000002696                 movzx   eax, cs:print_linelength
.text:000000000000269D                 add     ecx, eax
.text:000000000000269F                 cmp     ecx, 1
.text:00000000000026A2                 jnz     loc_2122
.text:00000000000026A8                 mov     rax, [rsp+228h+ptr]
.text:00000000000026AD                 mov     dword ptr [rax], 1
.text:00000000000026B3                 jmp     loc_21CE
.text:00000000000026B8 ; ---------------------------------------------------------------------------
.text:00000000000026B8
.text:00000000000026B8 loc_26B8:                               ; CODE XREF: main+67F↑j
.text:00000000000026B8                 mov     rdx, [rsp+228h+ptr]
.text:00000000000026BD                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000026C1                 xor     esi, esi
.text:00000000000026C3                 xor     edi, edi
.text:00000000000026C5                 mov     cs:have_read_stdin, 1
.text:00000000000026CC                 call    wc
.text:00000000000026D1                 mov     r12d, eax
.text:00000000000026D4                 jmp     loc_2465
.text:00000000000026D9 ; ---------------------------------------------------------------------------
.text:00000000000026D9
.text:00000000000026D9 loc_26D9:                               ; CODE XREF: main+2CD↑j
.text:00000000000026D9                 pxor    xmm3, xmm3
.text:00000000000026DD                 cvtsi2sd xmm3, [rsp+228h+stat_buf.st_size]
.text:00000000000026E7                 movsd   [rsp+228h+var_228], xmm3
.text:00000000000026EC                 call    physmem_available
.text:00000000000026F1                 movsd   xmm2, cs:qword_7870
.text:00000000000026F9                 movsd   xmm1, cs:qword_7868
.text:0000000000002701                 mulsd   xmm0, xmm2
.text:0000000000002705                 ucomisd xmm0, xmm1
.text:0000000000002709                 ja      short loc_2724
.text:000000000000270B                 movsd   [rsp+228h+ptr], xmm2
.text:0000000000002711                 call    physmem_available
.text:0000000000002716                 movsd   xmm2, [rsp+228h+ptr]
.text:000000000000271C                 movapd  xmm1, xmm0
.text:0000000000002720                 mulsd   xmm1, xmm2
.text:0000000000002724
.text:0000000000002724 loc_2724:                               ; CODE XREF: main+929↑j
.text:0000000000002724                 ucomisd xmm1, [rsp+228h+var_228]
.text:0000000000002729                 jb      loc_20B3
.text:000000000000272F                 lea     r12, [rsp+228h+var_1F8]
.text:0000000000002734                 mov     rdi, r12
.text:0000000000002737                 call    readtokens0_init
.text:000000000000273C                 mov     rsi, r12
.text:000000000000273F                 mov     rdi, rbx        ; stream
.text:0000000000002742                 call    readtokens0
.text:0000000000002747                 test    al, al
.text:0000000000002749                 mov     [rsp+228h+var_20D], al
.text:000000000000274D                 jz      loc_2802
.text:0000000000002753                 mov     rdi, rbx        ; stream
.text:0000000000002756                 call    rpl_fclose
.text:000000000000275B                 test    eax, eax
.text:000000000000275D                 jnz     loc_2802
.text:0000000000002763                 mov     r12, [rsp+228h+var_1F0]
.text:0000000000002768                 mov     rbx, [rsp+228h+var_1F8]
.text:000000000000276D                 mov     rdi, r12
.text:0000000000002770                 call    argv_iter_init_argv
.text:0000000000002775                 mov     r13, rax
.text:0000000000002778                 jmp     loc_20C8
.text:000000000000277D ; ---------------------------------------------------------------------------
.text:000000000000277D
.text:000000000000277D loc_277D:                               ; CODE XREF: main+16D↑j
.text:000000000000277D                 xor     edi, edi        ; status
.text:000000000000277F                 call    usage
.text:0000000000002784 ; ---------------------------------------------------------------------------
.text:0000000000002784
.text:0000000000002784 loc_2784:                               ; CODE XREF: main+714↑j
.text:0000000000002784                 call    ___stack_chk_fail
.text:0000000000002789 ; ---------------------------------------------------------------------------
.text:0000000000002789
.text:0000000000002789 loc_2789:                               ; CODE XREF: main+307↑j
.text:0000000000002789                 mov     ecx, 1
.text:000000000000278E                 jmp     loc_20ED
.text:0000000000002793 ; ---------------------------------------------------------------------------
.text:0000000000002793
.text:0000000000002793 loc_2793:                               ; CODE XREF: main+2EB↑j
.text:0000000000002793                                         ; main+310↑j ...
.text:0000000000002793                 call    xalloc_die
.text:0000000000002798 ; ---------------------------------------------------------------------------
.text:0000000000002798
.text:0000000000002798 loc_2798:                               ; CODE XREF: main+278↑j
.text:0000000000002798                 mov     rsi, [r12+rax*8]
.text:000000000000279C                 mov     edi, 4
.text:00000000000027A1                 call    quotearg_style
.text:00000000000027A6                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000027AD                 mov     rbx, rax
.text:00000000000027B0                 xor     edi, edi        ; domainname
.text:00000000000027B2                 mov     edx, 5          ; category
.text:00000000000027B7                 call    _dcgettext
.text:00000000000027BC                 mov     rcx, rbx
.text:00000000000027BF                 mov     rdx, rax        ; format
.text:00000000000027C2                 xor     esi, esi        ; errnum
.text:00000000000027C4                 xor     edi, edi        ; status
.text:00000000000027C6                 xor     eax, eax
.text:00000000000027C8                 call    _error
.text:00000000000027CD                 lea     rsi, aFileOperandsCa ; "file operands cannot be combined with -"...
.text:00000000000027D4                 xor     edi, edi        ; domainname
.text:00000000000027D6                 mov     edx, 5          ; category
.text:00000000000027DB                 call    _dcgettext
.text:00000000000027E0                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000027E7                 lea     rdx, aSSS+8     ; "%s\n"
.text:00000000000027EE                 mov     rcx, rax
.text:00000000000027F1                 mov     esi, 1
.text:00000000000027F6                 xor     eax, eax
.text:00000000000027F8                 call    ___fprintf_chk
.text:00000000000027FD                 jmp     loc_1F5F
.text:0000000000002802 ; ---------------------------------------------------------------------------
.text:0000000000002802
.text:0000000000002802 loc_2802:                               ; CODE XREF: main+96D↑j
.text:0000000000002802                                         ; main+97D↑j
.text:0000000000002802                 mov     rsi, rbp
.text:0000000000002805                 mov     edi, 4
.text:000000000000280A                 call    quotearg_style
.text:000000000000280F                 lea     rsi, aCannotReadFile ; "cannot read file names from %s"
.text:0000000000002816                 mov     rbx, rax
.text:0000000000002819                 mov     edx, 5          ; category
.text:000000000000281E                 xor     edi, edi        ; domainname
.text:0000000000002820                 call    _dcgettext
.text:0000000000002825                 mov     rcx, rbx
.text:0000000000002828                 mov     rdx, rax        ; format
.text:000000000000282B                 xor     esi, esi        ; errnum
.text:000000000000282D                 mov     edi, 1          ; status
.text:0000000000002832                 xor     eax, eax
.text:0000000000002834                 call    _error
.text:0000000000002834 ; } // starts at 1DE0
.text:0000000000002839                 nop     dword ptr [rax+00000000h]
.text:0000000000002839 main            endp ; sp-analysis failed
.text:0000000000002839
.text:0000000000002840
.text:0000000000002840 ; =============== S U B R O U T I N E =======================================
.text:0000000000002840
.text:0000000000002840 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000002840
.text:0000000000002840 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000002840                 public start
.text:0000000000002840 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000002840 ; __unwind {
.text:0000000000002840                 xor     ebp, ebp
.text:0000000000002842                 mov     r9, rdx         ; rtld_fini
.text:0000000000002845                 pop     rsi             ; argc
.text:0000000000002846                 mov     rdx, rsp        ; ubp_av
.text:0000000000002849                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000284D                 push    rax
.text:000000000000284E                 push    rsp             ; stack_end
.text:000000000000284F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000002856                 lea     rcx, __libc_csu_init ; init
.text:000000000000285D                 lea     rdi, main       ; main
.text:0000000000002864                 call    cs:__libc_start_main_ptr
.text:000000000000286A                 hlt
.text:000000000000286A ; } // starts at 2840
.text:000000000000286A start           endp
.text:000000000000286A
.text:000000000000286A ; ---------------------------------------------------------------------------
.text:000000000000286B                 align 10h
.text:0000000000002870
.text:0000000000002870 ; =============== S U B R O U T I N E =======================================
.text:0000000000002870
.text:0000000000002870 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002870
.text:0000000000002870 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_2923↓p
.text:0000000000002870                 lea     rdi, __bss_start
.text:0000000000002877                 push    rbp
.text:0000000000002878                 lea     rax, __bss_start
.text:000000000000287F                 cmp     rax, rdi
.text:0000000000002882                 mov     rbp, rsp
.text:0000000000002885                 jz      short loc_28A0
.text:0000000000002887                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000288E                 test    rax, rax
.text:0000000000002891                 jz      short loc_28A0
.text:0000000000002893                 pop     rbp
.text:0000000000002894                 jmp     rax
.text:0000000000002894 ; ---------------------------------------------------------------------------
.text:0000000000002896                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000028A0                                         ; deregister_tm_clones+21↑j
.text:00000000000028A0                 pop     rbp
.text:00000000000028A1                 retn
.text:00000000000028A1 deregister_tm_clones endp
.text:00000000000028A1
.text:00000000000028A1 ; ---------------------------------------------------------------------------
.text:00000000000028A2                 align 10h
.text:00000000000028B0
.text:00000000000028B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000028B0
.text:00000000000028B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000028B0
.text:00000000000028B0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000028B0                 lea     rdi, __bss_start
.text:00000000000028B7                 lea     rsi, __bss_start
.text:00000000000028BE                 push    rbp
.text:00000000000028BF                 sub     rsi, rdi
.text:00000000000028C2                 mov     rbp, rsp
.text:00000000000028C5                 sar     rsi, 3
.text:00000000000028C9                 mov     rax, rsi
.text:00000000000028CC                 shr     rax, 3Fh
.text:00000000000028D0                 add     rsi, rax
.text:00000000000028D3                 sar     rsi, 1
.text:00000000000028D6                 jz      short loc_28F0
.text:00000000000028D8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000028DF                 test    rax, rax
.text:00000000000028E2                 jz      short loc_28F0
.text:00000000000028E4                 pop     rbp
.text:00000000000028E5                 jmp     rax
.text:00000000000028E5 ; ---------------------------------------------------------------------------
.text:00000000000028E7                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000028F0                                         ; register_tm_clones+32↑j
.text:00000000000028F0                 pop     rbp
.text:00000000000028F1                 retn
.text:00000000000028F1 register_tm_clones endp
.text:00000000000028F1
.text:00000000000028F1 ; ---------------------------------------------------------------------------
.text:00000000000028F2                 align 20h
.text:0000000000002900
.text:0000000000002900 ; =============== S U B R O U T I N E =======================================
.text:0000000000002900
.text:0000000000002900 ; Attributes: info_from_lumina
.text:0000000000002900
.text:0000000000002900 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002900                 cmp     cs:completed_7697, 0
.text:0000000000002907                 jnz     short locret_2938
.text:0000000000002909                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000002911                 push    rbp
.text:0000000000002912                 mov     rbp, rsp
.text:0000000000002915                 jz      short loc_2923
.text:0000000000002917                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000291E                 call    __cxa_finalize
.text:0000000000002923
.text:0000000000002923 loc_2923:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000002923                 call    deregister_tm_clones
.text:0000000000002928                 mov     cs:completed_7697, 1
.text:000000000000292F                 pop     rbp
.text:0000000000002930                 retn
.text:0000000000002930 ; ---------------------------------------------------------------------------
.text:0000000000002931                 align 8
.text:0000000000002938
.text:0000000000002938 locret_2938:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000002938                 rep retn
.text:0000000000002938 __do_global_dtors_aux endp
.text:0000000000002938
.text:0000000000002938 ; ---------------------------------------------------------------------------
.text:000000000000293A                 align 20h
.text:0000000000002940
.text:0000000000002940 ; =============== S U B R O U T I N E =======================================
.text:0000000000002940
.text:0000000000002940 ; Attributes: bp-based frame
.text:0000000000002940
.text:0000000000002940 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000002940                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000002940                 push    rbp
.text:0000000000002941                 mov     rbp, rsp
.text:0000000000002944                 pop     rbp
.text:0000000000002945                 jmp     register_tm_clones
.text:0000000000002945 frame_dummy     endp
.text:0000000000002945
.text:0000000000002945 ; ---------------------------------------------------------------------------
.text:000000000000294A                 align 10h
.text:0000000000002950
.text:0000000000002950 ; =============== S U B R O U T I N E =======================================
.text:0000000000002950
.text:0000000000002950
.text:0000000000002950 write_counts    proc near               ; CODE XREF: main+6D7↑p
.text:0000000000002950                                         ; wc+42A↓p
.text:0000000000002950
.text:0000000000002950 var_40          = qword ptr -40h
.text:0000000000002950
.text:0000000000002950 ; __unwind {
.text:0000000000002950                 push    r15
.text:0000000000002952                 push    r14
.text:0000000000002954                 mov     r15, rsi
.text:0000000000002957                 push    r13
.text:0000000000002959                 push    r12
.text:000000000000295B                 mov     r14, rdx
.text:000000000000295E                 push    rbp
.text:000000000000295F                 push    rbx
.text:0000000000002960                 mov     r13, rcx
.text:0000000000002963                 mov     r12, r8
.text:0000000000002966                 mov     rbx, r9
.text:0000000000002969                 lea     rbp, format_sp_int_7975+1 ; "%*s"
.text:0000000000002970                 sub     rsp, 28h
.text:0000000000002974                 mov     rax, fs:28h
.text:000000000000297D                 mov     [rsp+58h+var_40], rax
.text:0000000000002982                 xor     eax, eax
.text:0000000000002984                 cmp     cs:print_lines, 0
.text:000000000000298B                 jnz     loc_2B10
.text:0000000000002991
.text:0000000000002991 loc_2991:                               ; CODE XREF: write_counts+1E4↓j
.text:0000000000002991                 cmp     cs:print_words, 0
.text:0000000000002998                 jnz     loc_2AE0
.text:000000000000299E
.text:000000000000299E loc_299E:                               ; CODE XREF: write_counts+1BA↓j
.text:000000000000299E                 cmp     cs:print_chars, 0
.text:00000000000029A5                 jnz     loc_2AB0
.text:00000000000029AB
.text:00000000000029AB loc_29AB:                               ; CODE XREF: write_counts+18A↓j
.text:00000000000029AB                 cmp     cs:print_bytes, 0
.text:00000000000029B2                 jnz     loc_2A80
.text:00000000000029B8
.text:00000000000029B8 loc_29B8:                               ; CODE XREF: write_counts+15A↓j
.text:00000000000029B8                 cmp     cs:print_linelength, 0
.text:00000000000029BF                 jnz     loc_2A50
.text:00000000000029C5
.text:00000000000029C5 loc_29C5:                               ; CODE XREF: write_counts+123↓j
.text:00000000000029C5                 test    rbx, rbx
.text:00000000000029C8                 jz      short loc_2A04
.text:00000000000029CA                 mov     esi, 0Ah        ; c
.text:00000000000029CF                 mov     rdi, rbx        ; s
.text:00000000000029D2                 call    _strchr
.text:00000000000029D7                 test    rax, rax
.text:00000000000029DA                 jz      short loc_29EE
.text:00000000000029DC                 mov     rdx, rbx
.text:00000000000029DF                 mov     esi, 3
.text:00000000000029E4                 xor     edi, edi
.text:00000000000029E6                 call    quotearg_n_style_colon
.text:00000000000029EB                 mov     rbx, rax
.text:00000000000029EE
.text:00000000000029EE loc_29EE:                               ; CODE XREF: write_counts+8A↑j
.text:00000000000029EE                 lea     rsi, aS+3       ; " "
.text:00000000000029F5                 mov     rdx, rbx
.text:00000000000029F8                 mov     edi, 1
.text:00000000000029FD                 xor     eax, eax
.text:00000000000029FF                 call    ___printf_chk
.text:0000000000002A04
.text:0000000000002A04 loc_2A04:                               ; CODE XREF: write_counts+78↑j
.text:0000000000002A04                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002A0B                 mov     rax, [rdi+28h]
.text:0000000000002A0F                 cmp     rax, [rdi+30h]
.text:0000000000002A13                 jnb     loc_2B40
.text:0000000000002A19                 lea     rdx, [rax+1]
.text:0000000000002A1D                 mov     [rdi+28h], rdx
.text:0000000000002A21                 mov     byte ptr [rax], 0Ah
.text:0000000000002A24
.text:0000000000002A24 loc_2A24:                               ; CODE XREF: write_counts+1FA↓j
.text:0000000000002A24                 mov     rax, [rsp+58h+var_40]
.text:0000000000002A29                 xor     rax, fs:28h
.text:0000000000002A32                 jnz     loc_2B4F
.text:0000000000002A38                 add     rsp, 28h
.text:0000000000002A3C                 pop     rbx
.text:0000000000002A3D                 pop     rbp
.text:0000000000002A3E                 pop     r12
.text:0000000000002A40                 pop     r13
.text:0000000000002A42                 pop     r14
.text:0000000000002A44                 pop     r15
.text:0000000000002A46                 retn
.text:0000000000002A46 ; ---------------------------------------------------------------------------
.text:0000000000002A47                 align 10h
.text:0000000000002A50
.text:0000000000002A50 loc_2A50:                               ; CODE XREF: write_counts+6F↑j
.text:0000000000002A50                 mov     rsi, rsp
.text:0000000000002A53                 mov     rdi, r12
.text:0000000000002A56                 call    umaxtostr
.text:0000000000002A5B                 mov     edx, cs:number_width
.text:0000000000002A61                 mov     rcx, rax
.text:0000000000002A64                 mov     rsi, rbp
.text:0000000000002A67                 mov     edi, 1
.text:0000000000002A6C                 xor     eax, eax
.text:0000000000002A6E                 call    ___printf_chk
.text:0000000000002A73                 jmp     loc_29C5
.text:0000000000002A73 ; ---------------------------------------------------------------------------
.text:0000000000002A78                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: write_counts+62↑j
.text:0000000000002A80                 mov     rsi, rsp
.text:0000000000002A83                 mov     rdi, r13
.text:0000000000002A86                 call    umaxtostr
.text:0000000000002A8B                 mov     edx, cs:number_width
.text:0000000000002A91                 mov     rcx, rax
.text:0000000000002A94                 mov     rsi, rbp
.text:0000000000002A97                 mov     edi, 1
.text:0000000000002A9C                 xor     eax, eax
.text:0000000000002A9E                 lea     rbp, format_sp_int_7975 ; " %*s"
.text:0000000000002AA5                 call    ___printf_chk
.text:0000000000002AAA                 jmp     loc_29B8
.text:0000000000002AAA ; ---------------------------------------------------------------------------
.text:0000000000002AAF                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: write_counts+55↑j
.text:0000000000002AB0                 mov     rsi, rsp
.text:0000000000002AB3                 mov     rdi, r14
.text:0000000000002AB6                 call    umaxtostr
.text:0000000000002ABB                 mov     edx, cs:number_width
.text:0000000000002AC1                 mov     rcx, rax
.text:0000000000002AC4                 mov     rsi, rbp
.text:0000000000002AC7                 mov     edi, 1
.text:0000000000002ACC                 xor     eax, eax
.text:0000000000002ACE                 lea     rbp, format_sp_int_7975 ; " %*s"
.text:0000000000002AD5                 call    ___printf_chk
.text:0000000000002ADA                 jmp     loc_29AB
.text:0000000000002ADA ; ---------------------------------------------------------------------------
.text:0000000000002ADF                 align 20h
.text:0000000000002AE0
.text:0000000000002AE0 loc_2AE0:                               ; CODE XREF: write_counts+48↑j
.text:0000000000002AE0                 mov     rsi, rsp
.text:0000000000002AE3                 mov     rdi, r15
.text:0000000000002AE6                 call    umaxtostr
.text:0000000000002AEB                 mov     edx, cs:number_width
.text:0000000000002AF1                 mov     rcx, rax
.text:0000000000002AF4                 mov     rsi, rbp
.text:0000000000002AF7                 mov     edi, 1
.text:0000000000002AFC                 xor     eax, eax
.text:0000000000002AFE                 lea     rbp, format_sp_int_7975 ; " %*s"
.text:0000000000002B05                 call    ___printf_chk
.text:0000000000002B0A                 jmp     loc_299E
.text:0000000000002B0A ; ---------------------------------------------------------------------------
.text:0000000000002B0F                 align 10h
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: write_counts+3B↑j
.text:0000000000002B10                 mov     rsi, rsp
.text:0000000000002B13                 call    umaxtostr
.text:0000000000002B18                 mov     edx, cs:number_width
.text:0000000000002B1E                 mov     rcx, rax
.text:0000000000002B21                 mov     rsi, rbp
.text:0000000000002B24                 mov     edi, 1
.text:0000000000002B29                 xor     eax, eax
.text:0000000000002B2B                 sub     rbp, 1
.text:0000000000002B2F                 call    ___printf_chk
.text:0000000000002B34                 jmp     loc_2991
.text:0000000000002B34 ; ---------------------------------------------------------------------------
.text:0000000000002B39                 align 20h
.text:0000000000002B40
.text:0000000000002B40 loc_2B40:                               ; CODE XREF: write_counts+C3↑j
.text:0000000000002B40                 mov     esi, 0Ah        ; int
.text:0000000000002B45                 call    ___overflow
.text:0000000000002B4A                 jmp     loc_2A24
.text:0000000000002B4F ; ---------------------------------------------------------------------------
.text:0000000000002B4F
.text:0000000000002B4F loc_2B4F:                               ; CODE XREF: write_counts+E2↑j
.text:0000000000002B4F                 call    ___stack_chk_fail
.text:0000000000002B4F ; } // starts at 2950
.text:0000000000002B4F write_counts    endp
.text:0000000000002B4F
.text:0000000000002B4F ; ---------------------------------------------------------------------------
.text:0000000000002B54                 align 20h
.text:0000000000002B60
.text:0000000000002B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002B60
.text:0000000000002B60
.text:0000000000002B60 wc              proc near               ; CODE XREF: main+4A3↑p
.text:0000000000002B60                                         ; main+5E9↑p ...
.text:0000000000002B60
.text:0000000000002B60 var_40A8        = qword ptr -40A8h
.text:0000000000002B60 ps              = qword ptr -40A0h
.text:0000000000002B60 var_4098        = qword ptr -4098h
.text:0000000000002B60 var_4090        = qword ptr -4090h
.text:0000000000002B60 var_4088        = qword ptr -4088h
.text:0000000000002B60 var_4080        = qword ptr -4080h
.text:0000000000002B60 var_4078        = qword ptr -4078h
.text:0000000000002B60 var_4070        = qword ptr -4070h
.text:0000000000002B60 var_4068        = qword ptr -4068h
.text:0000000000002B60 fd              = dword ptr -4060h
.text:0000000000002B60 var_405A        = byte ptr -405Ah
.text:0000000000002B60 var_4059        = byte ptr -4059h
.text:0000000000002B60 wc              = dword ptr -4054h
.text:0000000000002B60 var_4050        = qword ptr -4050h
.text:0000000000002B60 buf             = byte ptr -4048h
.text:0000000000002B60 var_40          = qword ptr -40h
.text:0000000000002B60
.text:0000000000002B60 ; __unwind {
.text:0000000000002B60                 push    r15
.text:0000000000002B62                 push    r14
.text:0000000000002B64                 push    r13
.text:0000000000002B66                 push    r12
.text:0000000000002B68                 push    rbp
.text:0000000000002B69                 push    rbx
.text:0000000000002B6A                 mov     rbp, rcx
.text:0000000000002B6D                 mov     rbx, rdx
.text:0000000000002B70                 sub     rsp, 4078h
.text:0000000000002B77                 mov     rcx, fs:28h
.text:0000000000002B80                 mov     [rsp+40A8h+var_40], rcx
.text:0000000000002B88                 xor     ecx, ecx
.text:0000000000002B8A                 test    rsi, rsi
.text:0000000000002B8D                 mov     [rsp+40A8h+fd], edi
.text:0000000000002B91                 mov     [rsp+40A8h+var_4070], rsi
.text:0000000000002B96                 mov     [rsp+40A8h+var_4068], rsi
.text:0000000000002B9B                 jz      loc_3488
.text:0000000000002BA1
.text:0000000000002BA1 loc_2BA1:                               ; CODE XREF: wc+940↓j
.text:0000000000002BA1                 call    ___ctype_get_mb_cur_max
.text:0000000000002BA6                 cmp     rax, 1
.text:0000000000002BAA                 movzx   edx, cs:print_bytes
.text:0000000000002BB1                 jbe     loc_2F30
.text:0000000000002BB7                 movzx   eax, cs:print_chars
.text:0000000000002BBE                 mov     r12d, eax
.text:0000000000002BC1                 mov     [rsp+40A8h+var_405A], al
.text:0000000000002BC5                 xor     r12d, 1
.text:0000000000002BC9                 and     r12d, edx
.text:0000000000002BCC
.text:0000000000002BCC loc_2BCC:                               ; CODE XREF: wc+3E4↓j
.text:0000000000002BCC                 cmp     cs:print_words, 0
.text:0000000000002BD3                 jnz     loc_2CE0
.text:0000000000002BD9                 movzx   r15d, cs:print_linelength
.text:0000000000002BE1                 test    r15b, r15b
.text:0000000000002BE4                 jnz     loc_2CE0
.text:0000000000002BEA                 cmp     dl, 1
.text:0000000000002BED                 jnz     loc_2DF9
.text:0000000000002BF3                 cmp     [rsp+40A8h+var_405A], 0
.text:0000000000002BF8                 jnz     loc_2DF9
.text:0000000000002BFE                 cmp     cs:print_lines, 0
.text:0000000000002C05                 jnz     loc_2DF9
.text:0000000000002C0B                 test    r12b, r12b
.text:0000000000002C0E                 jz      loc_2E28
.text:0000000000002C14
.text:0000000000002C14 loc_2C14:                               ; CODE XREF: wc+2B7↓j
.text:0000000000002C14                 mov     eax, [rbx]
.text:0000000000002C16                 test    eax, eax
.text:0000000000002C18                 jg      loc_3269
.text:0000000000002C1E
.text:0000000000002C1E loc_2C1E:                               ; CODE XREF: wc+71D↓j
.text:0000000000002C1E                 test    eax, eax
.text:0000000000002C20                 jnz     loc_3282
.text:0000000000002C26                 mov     eax, [rbx+20h]
.text:0000000000002C29                 and     eax, 0D000h
.text:0000000000002C2E                 cmp     eax, 8000h
.text:0000000000002C33                 jnz     loc_3282
.text:0000000000002C39                 mov     r12, [rbx+38h]
.text:0000000000002C3D                 test    r12, r12
.text:0000000000002C40                 js      loc_3282
.text:0000000000002C46                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C4A                 mov     [rsp+40A8h+var_4090], r12
.text:0000000000002C4F                 mov     r13, cs:page_size
.text:0000000000002C56                 jz      loc_35DB
.text:0000000000002C5C                 xor     edx, edx
.text:0000000000002C5E                 mov     rax, r12
.text:0000000000002C61                 div     r13
.text:0000000000002C64                 test    rdx, rdx
.text:0000000000002C67                 jnz     loc_32D6
.text:0000000000002C6D                 mov     esi, 1
.text:0000000000002C72                 xor     ebp, ebp
.text:0000000000002C74
.text:0000000000002C74 loc_2C74:                               ; CODE XREF: wc+ADF↓j
.text:0000000000002C74                 mov     rax, [rbx+40h]
.text:0000000000002C78                 mov     rdx, 1FFFFFFFFFFFFFFFh
.text:0000000000002C82                 lea     rcx, [rax-1]
.text:0000000000002C86                 add     rax, 1
.text:0000000000002C8A                 cmp     rcx, rdx
.text:0000000000002C8D                 mov     ecx, 201h
.text:0000000000002C92                 cmovbe  rcx, rax
.text:0000000000002C96                 mov     rax, r12
.text:0000000000002C99                 xor     edx, edx
.text:0000000000002C9B                 div     rcx
.text:0000000000002C9E                 sub     r12, rdx
.text:0000000000002CA1                 cmp     r12, rbp
.text:0000000000002CA4                 jle     loc_3282
.text:0000000000002CAA                 test    sil, sil
.text:0000000000002CAD                 jz      loc_3282
.text:0000000000002CB3                 mov     edi, [rsp+40A8h+fd] ; fd
.text:0000000000002CB7                 mov     edx, 1          ; whence
.text:0000000000002CBC                 mov     rsi, r12        ; offset
.text:0000000000002CBF                 call    _lseek
.text:0000000000002CC4                 test    rax, rax
.text:0000000000002CC7                 js      loc_3282
.text:0000000000002CCD                 sub     r12, rbp
.text:0000000000002CD0                 mov     [rsp+40A8h+var_4090], r12
.text:0000000000002CD5                 jmp     loc_328B
.text:0000000000002CD5 ; ---------------------------------------------------------------------------
.text:0000000000002CDA                 align 20h
.text:0000000000002CE0
.text:0000000000002CE0 loc_2CE0:                               ; CODE XREF: wc+73↑j
.text:0000000000002CE0                                         ; wc+84↑j
.text:0000000000002CE0                 mov     edi, [rsp+40A8h+fd] ; fd
.text:0000000000002CE4                 mov     ecx, 2          ; advise
.text:0000000000002CE9                 xor     edx, edx        ; len
.text:0000000000002CEB                 xor     esi, esi        ; offset
.text:0000000000002CED                 call    fdadvise
.text:0000000000002CF2
.text:0000000000002CF2 loc_2CF2:                               ; CODE XREF: wc+2C2↓j
.text:0000000000002CF2                 call    ___ctype_get_mb_cur_max
.text:0000000000002CF7                 cmp     rax, 1
.text:0000000000002CFB                 jbe     loc_310F
.text:0000000000002D01                 lea     rax, [rsp+40A8h+buf]
.text:0000000000002D06                 xor     r12d, r12d
.text:0000000000002D09                 mov     [rsp+40A8h+var_4050], 0
.text:0000000000002D12                 xor     ecx, ecx
.text:0000000000002D14                 xor     r14d, r14d
.text:0000000000002D17                 xor     ebx, ebx
.text:0000000000002D19                 mov     [rsp+40A8h+var_4080], 0
.text:0000000000002D22                 mov     [rsp+40A8h+var_4090], 0
.text:0000000000002D2B                 xor     ebp, ebp
.text:0000000000002D2D                 mov     [rsp+40A8h+var_4088], 0
.text:0000000000002D36                 mov     [rsp+40A8h+var_40A8], 0
.text:0000000000002D3E                 mov     r13, r12
.text:0000000000002D41                 mov     [rsp+40A8h+var_4078], rax
.text:0000000000002D46                 db      2Eh
.text:0000000000002D46                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002D50
.text:0000000000002D50 loc_2D50:                               ; CODE XREF: wc+515↓j
.text:0000000000002D50                                         ; wc+920↓j
.text:0000000000002D50                 mov     rax, [rsp+40A8h+var_4078]
.text:0000000000002D55                 mov     edi, [rsp+40A8h+fd] ; fd
.text:0000000000002D59                 mov     edx, 4000h
.text:0000000000002D5E                 sub     rdx, r13        ; nbytes
.text:0000000000002D61                 mov     byte ptr [rsp+40A8h+ps], cl
.text:0000000000002D65                 lea     rsi, [rax+r13]  ; buf
.text:0000000000002D69                 call    safe_read
.text:0000000000002D6E                 test    rax, rax
.text:0000000000002D71                 movzx   ecx, byte ptr [rsp+40A8h+ps]
.text:0000000000002D76                 jz      loc_34C8
.text:0000000000002D7C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002D80                 jz      loc_34E8
.text:0000000000002D86                 mov     r15, [rsp+40A8h+var_4078]
.text:0000000000002D8B                 add     r13, rax
.text:0000000000002D8E                 add     [rsp+40A8h+var_4090], rax
.text:0000000000002D93                 lea     rax, [rsp+40A8h+var_4050]
.text:0000000000002D98                 mov     r12, r15
.text:0000000000002D9B                 mov     [rsp+40A8h+ps], rax
.text:0000000000002DA0                 mov     r15, r13
.text:0000000000002DA3                 nop     dword ptr [rax+rax+00h]
.text:0000000000002DA8
.text:0000000000002DA8 loc_2DA8:                               ; CODE XREF: wc+50C↓j
.text:0000000000002DA8                 test    cl, cl
.text:0000000000002DAA                 jnz     loc_32F8
.text:0000000000002DB0                 movzx   r13d, byte ptr [r12]
.text:0000000000002DB5                 lea     rsi, is_basic_table
.text:0000000000002DBC                 mov     eax, r13d
.text:0000000000002DBF                 shr     al, 5
.text:0000000000002DC2                 and     eax, 7
.text:0000000000002DC5                 mov     eax, [rsi+rax*4]
.text:0000000000002DC8                 bt      eax, r13d
.text:0000000000002DCC                 jnb     loc_32F8
.text:0000000000002DD2                 movsx   eax, r13b
.text:0000000000002DD6                 mov     [rsp+40A8h+wc], eax
.text:0000000000002DDA                 lea     eax, [r13-9]    ; switch 24 cases
.text:0000000000002DDE                 cmp     al, 17h
.text:0000000000002DE0                 ja      def_2DF7        ; jumptable 0000000000002DF7 default case, cases 14-31
.text:0000000000002DE6                 lea     rsi, jpt_2DF7
.text:0000000000002DED                 movzx   eax, al
.text:0000000000002DF0                 movsxd  rax, ds:(jpt_2DF7 - 71A8h)[rsi+rax*4]
.text:0000000000002DF4                 add     rax, rsi
.text:0000000000002DF7                 jmp     rax             ; switch jump
.text:0000000000002DF9 ; ---------------------------------------------------------------------------
.text:0000000000002DF9
.text:0000000000002DF9 loc_2DF9:                               ; CODE XREF: wc+8D↑j
.text:0000000000002DF9                                         ; wc+98↑j ...
.text:0000000000002DF9                 mov     edi, [rsp+40A8h+fd] ; fd
.text:0000000000002DFD                 xor     edx, edx        ; len
.text:0000000000002DFF                 xor     esi, esi        ; offset
.text:0000000000002E01                 mov     ecx, 2          ; advise
.text:0000000000002E06                 call    fdadvise
.text:0000000000002E0B                 test    r12b, r12b
.text:0000000000002E0E                 jz      short loc_2E1D
.text:0000000000002E10                 cmp     cs:print_lines, 0
.text:0000000000002E17                 jz      loc_2C14
.text:0000000000002E1D
.text:0000000000002E1D loc_2E1D:                               ; CODE XREF: wc+2AE↑j
.text:0000000000002E1D                 cmp     [rsp+40A8h+var_405A], 0
.text:0000000000002E22                 jnz     loc_2CF2
.text:0000000000002E28
.text:0000000000002E28 loc_2E28:                               ; CODE XREF: wc+AE↑j
.text:0000000000002E28                 lea     rax, [rsp+40A8h+buf]
.text:0000000000002E2D                 xor     r13d, r13d
.text:0000000000002E30                 mov     byte ptr [rsp+40A8h+ps], r15b
.text:0000000000002E35                 mov     [rsp+40A8h+var_4090], 0
.text:0000000000002E3E                 mov     r15d, r13d
.text:0000000000002E41                 mov     [rsp+40A8h+var_40A8], 0
.text:0000000000002E49                 mov     r14, 8888888888888889h
.text:0000000000002E53                 mov     r13, rax
.text:0000000000002E56                 db      2Eh
.text:0000000000002E56                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: wc+37F↓j
.text:0000000000002E60                                         ; wc+3C7↓j ...
.text:0000000000002E60                 mov     edi, [rsp+40A8h+fd] ; fd
.text:0000000000002E64                 mov     edx, 4000h      ; nbytes
.text:0000000000002E69                 mov     rsi, r13        ; buf
.text:0000000000002E6C                 call    safe_read
.text:0000000000002E71                 test    rax, rax
.text:0000000000002E74                 jz      loc_2F50
.text:0000000000002E7A                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E7E                 jz      loc_2FF0
.text:0000000000002E84                 add     [rsp+40A8h+var_4090], rax
.text:0000000000002E89                 lea     rbp, [r13+rax+0]
.text:0000000000002E8E                 mul     r14
.text:0000000000002E91                 mov     rbx, rdx
.text:0000000000002E94                 shr     rbx, 3
.text:0000000000002E98                 test    r15b, r15b
.text:0000000000002E9B                 jz      short loc_2EE8
.text:0000000000002E9D                 mov     r12, [rsp+40A8h+var_40A8]
.text:0000000000002EA1                 mov     rdi, r13
.text:0000000000002EA4                 jmp     short loc_2EB8
.text:0000000000002EA4 ; ---------------------------------------------------------------------------
.text:0000000000002EA6                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: wc+36B↓j
.text:0000000000002EB0                 lea     rdi, [rax+1]    ; s
.text:0000000000002EB4                 add     r12, 1
.text:0000000000002EB8
.text:0000000000002EB8 loc_2EB8:                               ; CODE XREF: wc+344↑j
.text:0000000000002EB8                 mov     rdx, rbp
.text:0000000000002EBB                 mov     esi, 0Ah        ; c
.text:0000000000002EC0                 sub     rdx, rdi        ; n
.text:0000000000002EC3                 call    _memchr
.text:0000000000002EC8                 test    rax, rax
.text:0000000000002ECB                 jnz     short loc_2EB0
.text:0000000000002ECD                 mov     rax, r12
.text:0000000000002ED0                 sub     rax, [rsp+40A8h+var_40A8]
.text:0000000000002ED4                 mov     [rsp+40A8h+var_40A8], r12
.text:0000000000002ED8                 cmp     rax, rbx
.text:0000000000002EDB                 setbe   r15b
.text:0000000000002EDF                 jmp     loc_2E60
.text:0000000000002EDF ; ---------------------------------------------------------------------------
.text:0000000000002EE4                 align 8
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: wc+33B↑j
.text:0000000000002EE8                 cmp     rbp, r13
.text:0000000000002EEB                 jz      loc_3038
.text:0000000000002EF1                 mov     rdx, [rsp+40A8h+var_40A8]
.text:0000000000002EF5                 mov     rax, r13
.text:0000000000002EF8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: wc+3B3↓j
.text:0000000000002F00                 add     rax, 1
.text:0000000000002F04                 xor     ecx, ecx
.text:0000000000002F06                 cmp     byte ptr [rax-1], 0Ah
.text:0000000000002F0A                 setz    cl
.text:0000000000002F0D                 add     rdx, rcx
.text:0000000000002F10                 cmp     rbp, rax
.text:0000000000002F13                 jnz     short loc_2F00
.text:0000000000002F15                 mov     rax, rdx
.text:0000000000002F18                 sub     rax, [rsp+40A8h+var_40A8]
.text:0000000000002F1C                 mov     [rsp+40A8h+var_40A8], rdx
.text:0000000000002F20                 cmp     rax, rbx
.text:0000000000002F23                 setbe   r15b
.text:0000000000002F27                 jmp     loc_2E60
.text:0000000000002F27 ; ---------------------------------------------------------------------------
.text:0000000000002F2C                 align 10h
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: wc+51↑j
.text:0000000000002F30                 movzx   eax, cs:print_chars
.text:0000000000002F37                 test    dl, dl
.text:0000000000002F39                 mov     [rsp+40A8h+var_405A], 0
.text:0000000000002F3E                 cmovz   edx, eax
.text:0000000000002F41                 mov     r12d, edx
.text:0000000000002F44                 jmp     loc_2BCC
.text:0000000000002F44 ; ---------------------------------------------------------------------------
.text:0000000000002F49                 align 10h
.text:0000000000002F50
.text:0000000000002F50 loc_2F50:                               ; CODE XREF: wc+314↑j
.text:0000000000002F50                 xor     r14d, r14d
.text:0000000000002F53                 xor     ebp, ebp
.text:0000000000002F55                 xor     r12d, r12d
.text:0000000000002F58                 mov     r15d, 1
.text:0000000000002F5E
.text:0000000000002F5E loc_2F5E:                               ; CODE XREF: wc+4CC↓j
.text:0000000000002F5E                                         ; wc+78C↓j ...
.text:0000000000002F5E                 movzx   eax, [rsp+40A8h+var_405A]
.text:0000000000002F63                 mov     rbx, [rsp+40A8h+var_4090]
.text:0000000000002F68                 mov     r8, r14
.text:0000000000002F6B                 cmp     cs:print_chars, al
.text:0000000000002F71                 mov     r13, [rsp+40A8h+var_40A8]
.text:0000000000002F75                 mov     rsi, r12
.text:0000000000002F78                 mov     r9, [rsp+40A8h+var_4070]
.text:0000000000002F7D                 mov     rcx, rbx
.text:0000000000002F80                 mov     rdi, r13
.text:0000000000002F83                 cmova   rbp, rbx
.text:0000000000002F87                 mov     rdx, rbp
.text:0000000000002F8A                 call    write_counts
.text:0000000000002F8F                 add     cs:total_lines, r13
.text:0000000000002F96                 add     cs:total_words, r12
.text:0000000000002F9D                 add     cs:total_chars, rbp
.text:0000000000002FA4                 add     cs:total_bytes, rbx
.text:0000000000002FAB                 cmp     cs:max_line_length, r14
.text:0000000000002FB2                 jnb     short loc_2FBB
.text:0000000000002FB4                 mov     cs:max_line_length, r14
.text:0000000000002FBB
.text:0000000000002FBB loc_2FBB:                               ; CODE XREF: wc+452↑j
.text:0000000000002FBB                 mov     rcx, [rsp+40A8h+var_40]
.text:0000000000002FC3                 xor     rcx, fs:28h
.text:0000000000002FCC                 mov     eax, r15d
.text:0000000000002FCF                 jnz     loc_3626
.text:0000000000002FD5                 add     rsp, 4078h
.text:0000000000002FDC                 pop     rbx
.text:0000000000002FDD                 pop     rbp
.text:0000000000002FDE                 pop     r12
.text:0000000000002FE0                 pop     r13
.text:0000000000002FE2                 pop     r14
.text:0000000000002FE4                 pop     r15
.text:0000000000002FE6                 retn
.text:0000000000002FE6 ; ---------------------------------------------------------------------------
.text:0000000000002FE7                 align 10h
.text:0000000000002FF0
.text:0000000000002FF0 loc_2FF0:                               ; CODE XREF: wc+31E↑j
.text:0000000000002FF0                 mov     rdx, [rsp+40A8h+var_4068]
.text:0000000000002FF5                 mov     esi, 3
.text:0000000000002FFA                 xor     edi, edi
.text:0000000000002FFC                 movzx   r15d, byte ptr [rsp+40A8h+ps]
.text:0000000000003002                 xor     r14d, r14d
.text:0000000000003005                 xor     ebp, ebp
.text:0000000000003007                 xor     r12d, r12d
.text:000000000000300A                 call    quotearg_n_style_colon
.text:000000000000300F                 mov     rbx, rax
.text:0000000000003012                 call    ___errno_location
.text:0000000000003017                 mov     esi, [rax]      ; errnum
.text:0000000000003019                 lea     rdx, format     ; format
.text:0000000000003020                 mov     rcx, rbx
.text:0000000000003023                 xor     edi, edi        ; status
.text:0000000000003025                 xor     eax, eax
.text:0000000000003027                 call    _error
.text:000000000000302C                 jmp     loc_2F5E
.text:000000000000302C ; ---------------------------------------------------------------------------
.text:0000000000003031                 align 8
.text:0000000000003038
.text:0000000000003038 loc_3038:                               ; CODE XREF: wc+38B↑j
.text:0000000000003038                 mov     r15d, 1
.text:000000000000303E                 jmp     loc_2E60
.text:000000000000303E ; ---------------------------------------------------------------------------
.text:0000000000003043                 align 8
.text:0000000000003048
.text:0000000000003048 loc_3048:                               ; CODE XREF: wc+297↑j
.text:0000000000003048                                         ; DATA XREF: .rodata:jpt_2DF7↓o
.text:0000000000003048                 mov     edx, 1          ; jumptable 0000000000002DF7 case 32
.text:000000000000304D
.text:000000000000304D loc_304D:                               ; CODE XREF: wc+8C0↓j
.text:000000000000304D                                         ; DATA XREF: .rodata:jpt_3420↓o
.text:000000000000304D                 add     r14, 1          ; jumptable 0000000000003420 case 32
.text:0000000000003051                 nop     dword ptr [rax+00000000h]
.text:0000000000003058
.text:0000000000003058 loc_3058:                               ; CODE XREF: wc+539↓j
.text:0000000000003058                                         ; wc+545↓j ...
.text:0000000000003058                 add     [rsp+40A8h+var_4088], rbx ; jumptable 0000000000003420 case 11
.text:000000000000305D                 xor     ebx, ebx
.text:000000000000305F
.text:000000000000305F loc_305F:                               ; CODE XREF: wc+592↓j
.text:000000000000305F                                         ; wc+5AA↓j ...
.text:000000000000305F                 add     r12, rdx
.text:0000000000003062                 sub     r15, rdx
.text:0000000000003065                 add     rbp, 1
.text:0000000000003069
.text:0000000000003069 loc_3069:                               ; CODE XREF: wc+8D5↓j
.text:0000000000003069                 test    r15, r15
.text:000000000000306C                 jnz     loc_2DA8
.text:0000000000003072                 mov     r13, r15
.text:0000000000003075                 jmp     loc_2D50
.text:0000000000003075 ; ---------------------------------------------------------------------------
.text:000000000000307A                 align 20h
.text:0000000000003080
.text:0000000000003080 loc_3080:                               ; CODE XREF: wc+297↑j
.text:0000000000003080                                         ; DATA XREF: .rodata:jpt_2DF7↓o
.text:0000000000003080                 mov     edx, 1          ; jumptable 0000000000002DF7 cases 12,13
.text:0000000000003085
.text:0000000000003085 loc_3085:                               ; CODE XREF: wc+55A↓j
.text:0000000000003085                                         ; wc+8C0↓j
.text:0000000000003085                                         ; DATA XREF: ...
.text:0000000000003085                 mov     rax, [rsp+40A8h+var_4080] ; jumptable 0000000000003420 cases 12,13
.text:000000000000308A                 cmp     rax, r14
.text:000000000000308D                 cmovnb  r14, rax
.text:0000000000003091                 mov     [rsp+40A8h+var_4080], r14
.text:0000000000003096                 xor     r14d, r14d
.text:0000000000003099                 jmp     short loc_3058  ; jumptable 0000000000003420 case 11
.text:0000000000003099 ; ---------------------------------------------------------------------------
.text:000000000000309B                 align 20h
.text:00000000000030A0
.text:00000000000030A0 loc_30A0:                               ; CODE XREF: wc+297↑j
.text:00000000000030A0                                         ; DATA XREF: .rodata:jpt_2DF7↓o
.text:00000000000030A0                 mov     edx, 1          ; jumptable 0000000000002DF7 case 11
.text:00000000000030A5                 jmp     short loc_3058  ; jumptable 0000000000003420 case 11
.text:00000000000030A5 ; ---------------------------------------------------------------------------
.text:00000000000030A7                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: wc+297↑j
.text:00000000000030B0                                         ; DATA XREF: .rodata:jpt_2DF7↓o
.text:00000000000030B0                 mov     edx, 1          ; jumptable 0000000000002DF7 case 10
.text:00000000000030B5
.text:00000000000030B5 loc_30B5:                               ; CODE XREF: wc+8C0↓j
.text:00000000000030B5                                         ; DATA XREF: .rodata:jpt_3420↓o
.text:00000000000030B5                 add     [rsp+40A8h+var_40A8], 1 ; jumptable 0000000000003420 case 10
.text:00000000000030BA                 jmp     short loc_3085  ; jumptable 0000000000003420 cases 12,13
.text:00000000000030BA ; ---------------------------------------------------------------------------
.text:00000000000030BC                 align 20h
.text:00000000000030C0
.text:00000000000030C0 loc_30C0:                               ; CODE XREF: wc+297↑j
.text:00000000000030C0                                         ; DATA XREF: .rodata:jpt_2DF7↓o
.text:00000000000030C0                 mov     edx, 1          ; jumptable 0000000000002DF7 case 9
.text:00000000000030C5
.text:00000000000030C5 loc_30C5:                               ; CODE XREF: wc+8C0↓j
.text:00000000000030C5                                         ; DATA XREF: .rodata:jpt_3420↓o
.text:00000000000030C5                 and     r14, 0FFFFFFFFFFFFFFF8h ; jumptable 0000000000003420 case 9
.text:00000000000030C9                 add     r14, 8
.text:00000000000030CD                 jmp     short loc_3058  ; jumptable 0000000000003420 case 11
.text:00000000000030CD ; ---------------------------------------------------------------------------
.text:00000000000030CF                 align 10h
.text:00000000000030D0
.text:00000000000030D0 def_2DF7:                               ; CODE XREF: wc+280↑j
.text:00000000000030D0                                         ; wc+297↑j
.text:00000000000030D0                                         ; DATA XREF: ...
.text:00000000000030D0                 mov     byte ptr [rsp+40A8h+var_4098], cl ; jumptable 0000000000002DF7 default case, cases 14-31
.text:00000000000030D4                 movzx   r13d, r13b
.text:00000000000030D8                 call    ___ctype_b_loc
.text:00000000000030DD                 mov     rax, [rax]
.text:00000000000030E0                 mov     edx, 1
.text:00000000000030E5                 movzx   ecx, byte ptr [rsp+40A8h+var_4098]
.text:00000000000030EA                 movzx   eax, word ptr [rax+r13*2]
.text:00000000000030EF                 test    ah, 40h
.text:00000000000030F2                 jz      loc_305F
.text:00000000000030F8                 add     r14, 1
.text:00000000000030FC                 test    ah, 20h
.text:00000000000030FF                 jnz     loc_3058        ; jumptable 0000000000003420 case 11
.text:0000000000003105
.text:0000000000003105 loc_3105:                               ; CODE XREF: wc+88C↓j
.text:0000000000003105                 mov     ebx, 1
.text:000000000000310A                 jmp     loc_305F
.text:000000000000310F ; ---------------------------------------------------------------------------
.text:000000000000310F
.text:000000000000310F loc_310F:                               ; CODE XREF: wc+19B↑j
.text:000000000000310F                 lea     rax, [rsp+40A8h+buf]
.text:0000000000003114                 xor     ebx, ebx
.text:0000000000003116                 xor     ebp, ebp
.text:0000000000003118                 lea     r15, jpt_319A
.text:000000000000311F                 movzx   r13d, bl
.text:0000000000003123                 mov     [rsp+40A8h+var_4090], 0
.text:000000000000312C                 xor     r12d, r12d
.text:000000000000312F                 mov     [rsp+40A8h+var_40A8], 0
.text:0000000000003137                 mov     [rsp+40A8h+var_4078], rax
.text:000000000000313C                 mov     rbx, rbp
.text:000000000000313F                 nop
.text:0000000000003140
.text:0000000000003140 loc_3140:                               ; CODE XREF: wc+65F↓j
.text:0000000000003140                 mov     rsi, [rsp+40A8h+var_4078] ; buf
.text:0000000000003145                 mov     edi, [rsp+40A8h+fd] ; fd
.text:0000000000003149                 mov     edx, 4000h      ; nbytes
.text:000000000000314E                 call    safe_read
.text:0000000000003153                 test    rax, rax
.text:0000000000003156                 jz      loc_352C
.text:000000000000315C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003160                 jz      loc_3553
.text:0000000000003166                 mov     r14, [rsp+40A8h+var_4078]
.text:000000000000316B                 add     [rsp+40A8h+var_4090], rax
.text:0000000000003170                 mov     rdx, rbp
.text:0000000000003173                 mov     rbp, rbx
.text:0000000000003176                 lea     r10, [r14+rax]
.text:000000000000317A                 nop     word ptr [rax+rax+00h]
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: wc+657↓j
.text:0000000000003180                 add     r14, 1
.text:0000000000003184                 movzx   ebx, byte ptr [r14-1]
.text:0000000000003189                 lea     eax, [rbx-9]    ; switch 24 cases
.text:000000000000318C                 cmp     al, 17h
.text:000000000000318E                 ja      short def_319A  ; jumptable 000000000000319A default case, cases 14-31
.text:0000000000003190                 movzx   eax, al
.text:0000000000003193                 movsxd  rax, ds:(jpt_319A - 7208h)[r15+rax*4]
.text:0000000000003197                 add     rax, r15
.text:000000000000319A                 jmp     rax             ; switch jump
.text:000000000000319A ; ---------------------------------------------------------------------------
.text:000000000000319C                 align 20h
.text:00000000000031A0
.text:00000000000031A0 loc_31A0:                               ; CODE XREF: wc+63A↑j
.text:00000000000031A0                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031A0                 add     [rsp+40A8h+var_40A8], 1 ; jumptable 000000000000319A case 10
.text:00000000000031A5
.text:00000000000031A5 loc_31A5:                               ; CODE XREF: wc+63A↑j
.text:00000000000031A5                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031A5                 cmp     rdx, rbp        ; jumptable 000000000000319A cases 12,13
.text:00000000000031A8                 cmovb   rdx, rbp
.text:00000000000031AC                 xor     ebp, ebp
.text:00000000000031AE
.text:00000000000031AE loc_31AE:                               ; CODE XREF: wc+63A↑j
.text:00000000000031AE                                         ; wc+670↓j ...
.text:00000000000031AE                 add     r12, r13        ; jumptable 000000000000319A case 11
.text:00000000000031B1                 xor     r13d, r13d
.text:00000000000031B4
.text:00000000000031B4 loc_31B4:                               ; CODE XREF: wc+6A6↓j
.text:00000000000031B4                                         ; wc+704↓j ...
.text:00000000000031B4                 cmp     r10, r14
.text:00000000000031B7                 jnz     short loc_3180
.text:00000000000031B9                 mov     rbx, rbp
.text:00000000000031BC                 mov     rbp, rdx
.text:00000000000031BF                 jmp     loc_3140
.text:00000000000031BF ; ---------------------------------------------------------------------------
.text:00000000000031C4                 align 8
.text:00000000000031C8
.text:00000000000031C8 loc_31C8:                               ; CODE XREF: wc+63A↑j
.text:00000000000031C8                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031C8                 and     rbp, 0FFFFFFFFFFFFFFF8h ; jumptable 000000000000319A case 9
.text:00000000000031CC                 add     rbp, 8
.text:00000000000031D0                 jmp     short loc_31AE  ; jumptable 000000000000319A case 11
.text:00000000000031D0 ; ---------------------------------------------------------------------------
.text:00000000000031D2                 align 8
.text:00000000000031D8
.text:00000000000031D8 loc_31D8:                               ; CODE XREF: wc+63A↑j
.text:00000000000031D8                                         ; DATA XREF: .rodata:jpt_319A↓o
.text:00000000000031D8                 add     rbp, 1          ; jumptable 000000000000319A case 32
.text:00000000000031DC                 jmp     short loc_31AE  ; jumptable 000000000000319A case 11
.text:00000000000031DC ; ---------------------------------------------------------------------------
.text:00000000000031DE                 align 20h
.text:00000000000031E0
.text:00000000000031E0 def_319A:                               ; CODE XREF: wc+62E↑j
.text:00000000000031E0                                         ; wc+63A↑j
.text:00000000000031E0                                         ; DATA XREF: ...
.text:00000000000031E0                 mov     [rsp+40A8h+var_4098], rdx ; jumptable 000000000000319A default case, cases 14-31
.text:00000000000031E5                 mov     [rsp+40A8h+ps], r10
.text:00000000000031EA                 call    ___ctype_b_loc
.text:00000000000031EF                 mov     rsi, [rax]
.text:00000000000031F2                 movzx   ecx, bl
.text:00000000000031F5                 mov     r10, [rsp+40A8h+ps]
.text:00000000000031FA                 mov     rdx, [rsp+40A8h+var_4098]
.text:00000000000031FF                 movzx   eax, word ptr [rsi+rcx*2]
.text:0000000000003203                 test    ah, 40h
.text:0000000000003206                 jz      short loc_31B4
.text:0000000000003208                 add     rbp, 1
.text:000000000000320C                 test    ah, 20h
.text:000000000000320F                 jnz     short loc_31AE  ; jumptable 000000000000319A case 11
.text:0000000000003211                 movzx   edi, bl         ; c
.text:0000000000003214                 call    _btowc
.text:0000000000003219                 movzx   ecx, cs:posixly_correct
.text:0000000000003220                 mov     r10, [rsp+40A8h+ps]
.text:0000000000003225                 mov     rdx, [rsp+40A8h+var_4098]
.text:000000000000322A                 test    cl, cl
.text:000000000000322C                 jnz     loc_3523
.text:0000000000003232                 cmp     eax, 0A0h
.text:0000000000003237                 jz      loc_31AE        ; jumptable 000000000000319A case 11
.text:000000000000323D                 cmp     eax, 2007h
.text:0000000000003242                 jz      loc_31AE        ; jumptable 000000000000319A case 11
.text:0000000000003248                 cmp     eax, 202Fh
.text:000000000000324D                 jz      loc_31AE        ; jumptable 000000000000319A case 11
.text:0000000000003253                 cmp     eax, 2060h
.text:0000000000003258                 jz      loc_31AE        ; jumptable 000000000000319A case 11
.text:000000000000325E                 mov     r13d, 1
.text:0000000000003264                 jmp     loc_31B4
.text:0000000000003269 ; ---------------------------------------------------------------------------
.text:0000000000003269
.text:0000000000003269 loc_3269:                               ; CODE XREF: wc+B8↑j
.text:0000000000003269                 mov     esi, [rsp+40A8h+fd] ; fildes
.text:000000000000326D                 lea     rdx, [rbx+8]    ; stat_buf
.text:0000000000003271                 mov     edi, 1          ; ver
.text:0000000000003276                 call    ___fxstat
.text:000000000000327B                 mov     [rbx], eax
.text:000000000000327D                 jmp     loc_2C1E
.text:0000000000003282 ; ---------------------------------------------------------------------------
.text:0000000000003282
.text:0000000000003282 loc_3282:                               ; CODE XREF: wc+C0↑j
.text:0000000000003282                                         ; wc+D3↑j ...
.text:0000000000003282                 mov     [rsp+40A8h+var_4090], 0
.text:000000000000328B
.text:000000000000328B loc_328B:                               ; CODE XREF: wc+175↑j
.text:000000000000328B                 mov     ebp, [rsp+40A8h+fd]
.text:000000000000328F                 mov     ecx, 2          ; advise
.text:0000000000003294                 xor     edx, edx        ; len
.text:0000000000003296                 xor     esi, esi        ; offset
.text:0000000000003298                 lea     r12, [rsp+40A8h+buf]
.text:000000000000329D                 mov     edi, ebp        ; fd
.text:000000000000329F                 call    fdadvise
.text:00000000000032A4                 mov     rbx, [rsp+40A8h+var_4090]
.text:00000000000032A9                 jmp     short loc_32BD
.text:00000000000032A9 ; ---------------------------------------------------------------------------
.text:00000000000032AB                 align 10h
.text:00000000000032B0
.text:00000000000032B0 loc_32B0:                               ; CODE XREF: wc+76F↓j
.text:00000000000032B0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000032B4                 jz      loc_3593
.text:00000000000032BA                 add     rbx, rax
.text:00000000000032BD
.text:00000000000032BD loc_32BD:                               ; CODE XREF: wc+749↑j
.text:00000000000032BD                 mov     edx, 4000h      ; nbytes
.text:00000000000032C2                 mov     rsi, r12        ; buf
.text:00000000000032C5                 mov     edi, ebp        ; fd
.text:00000000000032C7                 call    safe_read
.text:00000000000032CC                 test    rax, rax
.text:00000000000032CF                 jnz     short loc_32B0
.text:00000000000032D1                 mov     [rsp+40A8h+var_4090], rbx
.text:00000000000032D6
.text:00000000000032D6 loc_32D6:                               ; CODE XREF: wc+107↑j
.text:00000000000032D6                                         ; wc+AD0↓j
.text:00000000000032D6                 xor     r14d, r14d
.text:00000000000032D9                 xor     ebp, ebp
.text:00000000000032DB                 xor     r12d, r12d
.text:00000000000032DE                 mov     [rsp+40A8h+var_40A8], 0
.text:00000000000032E6                 mov     r15d, 1
.text:00000000000032EC                 jmp     loc_2F5E
.text:00000000000032EC ; ---------------------------------------------------------------------------
.text:00000000000032F1                 align 8
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: wc+24A↑j
.text:00000000000032F8                                         ; wc+26C↑j
.text:00000000000032F8                 mov     rcx, [rsp+40A8h+ps]
.text:00000000000032FD                 lea     rdi, [rsp+40A8h+wc]
.text:0000000000003302                 mov     rdx, r15
.text:0000000000003305                 mov     rsi, r12
.text:0000000000003308                 mov     r13, [rsp+40A8h+var_4050]
.text:000000000000330D                 call    rpl_mbrtowc
.text:0000000000003312                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003316                 jz      loc_3440
.text:000000000000331C                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003320                 jz      loc_3428
.text:0000000000003326                 mov     rdi, [rsp+40A8h+ps] ; ps
.text:000000000000332B                 mov     [rsp+40A8h+var_4098], rax
.text:0000000000003330                 call    _mbsinit
.text:0000000000003335                 mov     rdx, [rsp+40A8h+var_4098]
.text:000000000000333A                 test    eax, eax
.text:000000000000333C                 setz    cl
.text:000000000000333F                 test    rdx, rdx
.text:0000000000003342                 jnz     loc_3400
.text:0000000000003348                 mov     [rsp+40A8h+wc], 0
.text:0000000000003350                 xor     edi, edi        ; wc
.text:0000000000003352                 xor     r13d, r13d
.text:0000000000003355                 mov     edx, 1
.text:000000000000335A
.text:000000000000335A loc_335A:                               ; CODE XREF: wc+AE7↓j
.text:000000000000335A                 mov     [rsp+40A8h+var_4059], cl
.text:000000000000335E                 mov     [rsp+40A8h+var_4098], rdx
.text:0000000000003363                 call    _iswprint
.text:0000000000003368                 test    eax, eax
.text:000000000000336A                 mov     rdx, [rsp+40A8h+var_4098]
.text:000000000000336F                 movzx   ecx, [rsp+40A8h+var_4059]
.text:0000000000003374                 jz      loc_305F
.text:000000000000337A                 cmp     cs:print_linelength, 0
.text:0000000000003381                 jnz     loc_34A5
.text:0000000000003387
.text:0000000000003387 loc_3387:                               ; CODE XREF: wc+963↓j
.text:0000000000003387                 mov     r13d, [rsp+40A8h+wc]
.text:000000000000338C                 mov     [rsp+40A8h+var_4059], cl
.text:0000000000003390                 mov     [rsp+40A8h+var_4098], rdx
.text:0000000000003395                 mov     edi, r13d       ; wc
.text:0000000000003398                 call    _iswspace
.text:000000000000339D                 test    eax, eax
.text:000000000000339F                 mov     rdx, [rsp+40A8h+var_4098]
.text:00000000000033A4                 movzx   ecx, [rsp+40A8h+var_4059]
.text:00000000000033A9                 jnz     loc_3058        ; jumptable 0000000000003420 case 11
.text:00000000000033AF                 movzx   eax, cs:posixly_correct
.text:00000000000033B6                 test    al, al
.text:00000000000033B8                 jnz     loc_351B
.text:00000000000033BE                 cmp     r13d, 0A0h
.text:00000000000033C5                 jz      loc_3058        ; jumptable 0000000000003420 case 11
.text:00000000000033CB                 cmp     r13d, 2007h
.text:00000000000033D2                 jz      loc_3058        ; jumptable 0000000000003420 case 11
.text:00000000000033D8                 cmp     r13d, 202Fh
.text:00000000000033DF                 jz      loc_3058        ; jumptable 0000000000003420 case 11
.text:00000000000033E5                 cmp     r13d, 2060h
.text:00000000000033EC                 jnz     loc_3105
.text:00000000000033F2                 jmp     loc_3058        ; jumptable 0000000000003420 case 11
.text:00000000000033F2 ; ---------------------------------------------------------------------------
.text:00000000000033F7                 align 20h
.text:0000000000003400
.text:0000000000003400 loc_3400:                               ; CODE XREF: wc+7E2↑j
.text:0000000000003400                 mov     r13d, [rsp+40A8h+wc]
.text:0000000000003405                 lea     eax, [r13-9]    ; switch 24 cases
.text:0000000000003409                 cmp     eax, 17h
.text:000000000000340C                 ja      def_3420        ; jumptable 0000000000003420 default case, cases 14-31
.text:0000000000003412                 lea     rsi, jpt_3420
.text:0000000000003419                 movsxd  rax, ds:(jpt_3420 - 7268h)[rsi+rax*4]
.text:000000000000341D                 add     rax, rsi
.text:0000000000003420                 jmp     rax             ; switch jump
.text:0000000000003420 ; ---------------------------------------------------------------------------
.text:0000000000003422                 align 8
.text:0000000000003428
.text:0000000000003428 loc_3428:                               ; CODE XREF: wc+7C0↑j
.text:0000000000003428                 add     r12, 1
.text:000000000000342C                 sub     r15, 1
.text:0000000000003430                 mov     ecx, 1
.text:0000000000003435                 jmp     loc_3069
.text:0000000000003435 ; ---------------------------------------------------------------------------
.text:000000000000343A                 align 20h
.text:0000000000003440
.text:0000000000003440 loc_3440:                               ; CODE XREF: wc+7B6↑j
.text:0000000000003440                 mov     rax, r13
.text:0000000000003443                 mov     r13, r15
.text:0000000000003446                 mov     r15, r12
.text:0000000000003449                 test    r13, r13
.text:000000000000344C                 mov     [rsp+40A8h+var_4050], rax
.text:0000000000003451                 jz      short loc_347B
.text:0000000000003453                 cmp     r13, 4000h
.text:000000000000345A                 jnz     short loc_3466
.text:000000000000345C                 add     r15, 1
.text:0000000000003460                 mov     r13d, 3FFFh
.text:0000000000003466
.text:0000000000003466 loc_3466:                               ; CODE XREF: wc+8FA↑j
.text:0000000000003466                 mov     rdi, [rsp+40A8h+var_4078]
.text:000000000000346B                 mov     ecx, 4001h
.text:0000000000003470                 mov     rdx, r13
.text:0000000000003473                 mov     rsi, r15
.text:0000000000003476                 call    ___memmove_chk
.text:000000000000347B
.text:000000000000347B loc_347B:                               ; CODE XREF: wc+8F1↑j
.text:000000000000347B                 mov     ecx, 1
.text:0000000000003480                 jmp     loc_2D50
.text:0000000000003480 ; ---------------------------------------------------------------------------
.text:0000000000003485                 align 8
.text:0000000000003488
.text:0000000000003488 loc_3488:                               ; CODE XREF: wc+3B↑j
.text:0000000000003488                 lea     rsi, aStandardInput ; "standard input"
.text:000000000000348F                 mov     edx, 5          ; category
.text:0000000000003494                 xor     edi, edi        ; domainname
.text:0000000000003496                 call    _dcgettext
.text:000000000000349B                 mov     [rsp+40A8h+var_4068], rax
.text:00000000000034A0                 jmp     loc_2BA1
.text:00000000000034A5 ; ---------------------------------------------------------------------------
.text:00000000000034A5
.text:00000000000034A5 loc_34A5:                               ; CODE XREF: wc+821↑j
.text:00000000000034A5                 mov     edi, r13d       ; c
.text:00000000000034A8                 call    _wcwidth
.text:00000000000034AD                 movsxd  rsi, eax
.text:00000000000034B0                 movzx   ecx, [rsp+40A8h+var_4059]
.text:00000000000034B5                 mov     rdx, [rsp+40A8h+var_4098]
.text:00000000000034BA                 add     rsi, r14
.text:00000000000034BD                 test    eax, eax
.text:00000000000034BF                 cmovg   r14, rsi
.text:00000000000034C3                 jmp     loc_3387
.text:00000000000034C8 ; ---------------------------------------------------------------------------
.text:00000000000034C8
.text:00000000000034C8 loc_34C8:                               ; CODE XREF: wc+216↑j
.text:00000000000034C8                 mov     r15d, 1
.text:00000000000034CE
.text:00000000000034CE loc_34CE:                               ; CODE XREF: wc+9B9↓j
.text:00000000000034CE                 mov     rax, [rsp+40A8h+var_4080]
.text:00000000000034D3                 movzx   r12d, bl
.text:00000000000034D7                 cmp     rax, r14
.text:00000000000034DA                 cmovnb  r14, rax
.text:00000000000034DE                 add     r12, [rsp+40A8h+var_4088]
.text:00000000000034E3                 jmp     loc_2F5E
.text:00000000000034E8 ; ---------------------------------------------------------------------------
.text:00000000000034E8
.text:00000000000034E8 loc_34E8:                               ; CODE XREF: wc+220↑j
.text:00000000000034E8                 mov     rdx, [rsp+40A8h+var_4068]
.text:00000000000034ED                 mov     esi, 3
.text:00000000000034F2                 xor     edi, edi
.text:00000000000034F4                 xor     r15d, r15d
.text:00000000000034F7                 call    quotearg_n_style_colon
.text:00000000000034FC                 mov     r12, rax
.text:00000000000034FF                 call    ___errno_location
.text:0000000000003504                 mov     esi, [rax]      ; errnum
.text:0000000000003506                 lea     rdx, format     ; format
.text:000000000000350D                 mov     rcx, r12
.text:0000000000003510                 xor     edi, edi        ; status
.text:0000000000003512                 xor     eax, eax
.text:0000000000003514                 call    _error
.text:0000000000003519                 jmp     short loc_34CE
.text:000000000000351B ; ---------------------------------------------------------------------------
.text:000000000000351B
.text:000000000000351B loc_351B:                               ; CODE XREF: wc+858↑j
.text:000000000000351B                 movzx   ebx, al
.text:000000000000351E                 jmp     loc_305F
.text:0000000000003523 ; ---------------------------------------------------------------------------
.text:0000000000003523
.text:0000000000003523 loc_3523:                               ; CODE XREF: wc+6CC↑j
.text:0000000000003523                 movzx   r13d, cl
.text:0000000000003527                 jmp     loc_31B4
.text:000000000000352C ; ---------------------------------------------------------------------------
.text:000000000000352C
.text:000000000000352C loc_352C:                               ; CODE XREF: wc+5F6↑j
.text:000000000000352C                 mov     rax, rbx
.text:000000000000352F                 mov     r15d, 1
.text:0000000000003535                 movzx   ebx, r13b
.text:0000000000003539                 mov     r13, rbp
.text:000000000000353C                 mov     rbp, rax
.text:000000000000353F
.text:000000000000353F loc_353F:                               ; CODE XREF: wc+A31↓j
.text:000000000000353F                 cmp     r13, rbp
.text:0000000000003542                 mov     r14, rbp
.text:0000000000003545                 cmovnb  r14, r13
.text:0000000000003549                 add     r12, rbx
.text:000000000000354C                 xor     ebp, ebp
.text:000000000000354E                 jmp     loc_2F5E
.text:0000000000003553 ; ---------------------------------------------------------------------------
.text:0000000000003553
.text:0000000000003553 loc_3553:                               ; CODE XREF: wc+600↑j
.text:0000000000003553                 mov     rdx, [rsp+40A8h+var_4068]
.text:0000000000003558                 mov     rax, rbx
.text:000000000000355B                 mov     esi, 3
.text:0000000000003560                 xor     edi, edi
.text:0000000000003562                 movzx   ebx, r13b
.text:0000000000003566                 mov     r13, rbp
.text:0000000000003569                 mov     rbp, rax
.text:000000000000356C                 xor     r15d, r15d
.text:000000000000356F                 call    quotearg_n_style_colon
.text:0000000000003574                 mov     r14, rax
.text:0000000000003577                 call    ___errno_location
.text:000000000000357C                 mov     esi, [rax]      ; errnum
.text:000000000000357E                 lea     rdx, format     ; format
.text:0000000000003585                 mov     rcx, r14
.text:0000000000003588                 xor     edi, edi        ; status
.text:000000000000358A                 xor     eax, eax
.text:000000000000358C                 call    _error
.text:0000000000003591                 jmp     short loc_353F
.text:0000000000003593 ; ---------------------------------------------------------------------------
.text:0000000000003593
.text:0000000000003593 loc_3593:                               ; CODE XREF: wc+754↑j
.text:0000000000003593                 mov     rdx, [rsp+40A8h+var_4068]
.text:0000000000003598                 mov     esi, 3
.text:000000000000359D                 xor     edi, edi
.text:000000000000359F                 mov     [rsp+40A8h+var_4090], rbx
.text:00000000000035A4                 xor     r14d, r14d
.text:00000000000035A7                 xor     ebp, ebp
.text:00000000000035A9                 xor     r12d, r12d
.text:00000000000035AC                 call    quotearg_n_style_colon
.text:00000000000035B1                 mov     rbx, rax
.text:00000000000035B4                 call    ___errno_location
.text:00000000000035B9                 mov     esi, [rax]      ; errnum
.text:00000000000035BB                 lea     rdx, format     ; format
.text:00000000000035C2                 mov     rcx, rbx
.text:00000000000035C5                 xor     edi, edi        ; status
.text:00000000000035C7                 xor     eax, eax
.text:00000000000035C9                 call    _error
.text:00000000000035CE                 mov     [rsp+40A8h+var_40A8], 0
.text:00000000000035D6                 jmp     loc_2F5E
.text:00000000000035DB ; ---------------------------------------------------------------------------
.text:00000000000035DB
.text:00000000000035DB loc_35DB:                               ; CODE XREF: wc+F6↑j
.text:00000000000035DB                 mov     edi, [rsp+40A8h+fd] ; fd
.text:00000000000035DF                 mov     edx, 1          ; whence
.text:00000000000035E4                 xor     esi, esi        ; offset
.text:00000000000035E6                 call    _lseek
.text:00000000000035EB                 xor     edx, edx
.text:00000000000035ED                 mov     rbp, rax
.text:00000000000035F0                 mov     rax, r12
.text:00000000000035F3                 div     r13
.text:00000000000035F6                 test    rdx, rdx
.text:00000000000035F9                 jz      short loc_3635
.text:00000000000035FB                 cmp     rbp, [rsp+40A8h+var_4090]
.text:0000000000003600                 jbe     short loc_362B
.text:0000000000003602                 xor     r14d, r14d
.text:0000000000003605                 mov     [rsp+40A8h+var_4090], 0
.text:000000000000360E                 xor     ebp, ebp
.text:0000000000003610                 xor     r12d, r12d
.text:0000000000003613                 mov     [rsp+40A8h+var_40A8], 0
.text:000000000000361B                 mov     r15d, 1
.text:0000000000003621                 jmp     loc_2F5E
.text:0000000000003626 ; ---------------------------------------------------------------------------
.text:0000000000003626
.text:0000000000003626 loc_3626:                               ; CODE XREF: wc+46F↑j
.text:0000000000003626                 call    ___stack_chk_fail
.text:000000000000362B ; ---------------------------------------------------------------------------
.text:000000000000362B
.text:000000000000362B loc_362B:                               ; CODE XREF: wc+AA0↑j
.text:000000000000362B                 sub     [rsp+40A8h+var_4090], rbp
.text:0000000000003630                 jmp     loc_32D6
.text:0000000000003635 ; ---------------------------------------------------------------------------
.text:0000000000003635
.text:0000000000003635 loc_3635:                               ; CODE XREF: wc+A99↑j
.text:0000000000003635                 mov     rsi, rbp
.text:0000000000003638                 not     rsi
.text:000000000000363B                 shr     rsi, 3Fh
.text:000000000000363F                 jmp     loc_2C74
.text:0000000000003644 ; ---------------------------------------------------------------------------
.text:0000000000003644
.text:0000000000003644 def_3420:                               ; CODE XREF: wc+8AC↑j
.text:0000000000003644                                         ; wc+8C0↑j
.text:0000000000003644                                         ; DATA XREF: ...
.text:0000000000003644                 mov     edi, r13d       ; jumptable 0000000000003420 default case, cases 14-31
.text:0000000000003647                 jmp     loc_335A
.text:0000000000003647 ; } // starts at 2B60
.text:0000000000003647 wc              endp
.text:0000000000003647
.text:0000000000003647 ; ---------------------------------------------------------------------------
.text:000000000000364C                 align 10h
.text:0000000000003650
.text:0000000000003650 ; =============== S U B R O U T I N E =======================================
.text:0000000000003650
.text:0000000000003650 ; Attributes: noreturn
.text:0000000000003650
.text:0000000000003650 ; void __fastcall __noreturn usage(int status)
.text:0000000000003650                 public usage
.text:0000000000003650 usage           proc near               ; CODE XREF: main+184↑p
.text:0000000000003650                                         ; main+99F↑p
.text:0000000000003650
.text:0000000000003650 var_A8          = qword ptr -0A8h
.text:0000000000003650 var_A0          = qword ptr -0A0h
.text:0000000000003650 var_98          = qword ptr -98h
.text:0000000000003650 var_90          = qword ptr -90h
.text:0000000000003650 var_88          = qword ptr -88h
.text:0000000000003650 var_80          = qword ptr -80h
.text:0000000000003650 var_78          = qword ptr -78h
.text:0000000000003650 var_70          = qword ptr -70h
.text:0000000000003650 var_68          = qword ptr -68h
.text:0000000000003650 var_60          = qword ptr -60h
.text:0000000000003650 var_58          = qword ptr -58h
.text:0000000000003650 var_50          = qword ptr -50h
.text:0000000000003650 var_48          = qword ptr -48h
.text:0000000000003650 var_40          = qword ptr -40h
.text:0000000000003650 var_30          = qword ptr -30h
.text:0000000000003650
.text:0000000000003650 ; __unwind {
.text:0000000000003650                 push    r13
.text:0000000000003652                 push    r12
.text:0000000000003654                 mov     edx, 5          ; category
.text:0000000000003659                 push    rbp
.text:000000000000365A                 push    rbx
.text:000000000000365B                 mov     ebp, edi
.text:000000000000365D                 sub     rsp, 88h
.text:0000000000003664                 mov     rbx, cs:program_name
.text:000000000000366B                 mov     rax, fs:28h
.text:0000000000003674                 mov     [rsp+0A8h+var_30], rax
.text:0000000000003679                 xor     eax, eax
.text:000000000000367B                 test    edi, edi
.text:000000000000367D                 jz      short loc_36AD
.text:000000000000367F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000003686                 xor     edi, edi        ; domainname
.text:0000000000003688                 call    _dcgettext
.text:000000000000368D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000003694                 mov     rdx, rax
.text:0000000000003697                 mov     rcx, rbx
.text:000000000000369A                 mov     esi, 1
.text:000000000000369F                 xor     eax, eax
.text:00000000000036A1                 call    ___fprintf_chk
.text:00000000000036A6
.text:00000000000036A6 loc_36A6:                               ; CODE XREF: usage+2EE↓j
.text:00000000000036A6                 mov     edi, ebp        ; status
.text:00000000000036A8                 call    _exit
.text:00000000000036AD ; ---------------------------------------------------------------------------
.text:00000000000036AD
.text:00000000000036AD loc_36AD:                               ; CODE XREF: usage+2D↑j
.text:00000000000036AD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\n  or: "...
.text:00000000000036B4                 xor     edi, edi        ; domainname
.text:00000000000036B6                 call    _dcgettext
.text:00000000000036BB                 mov     rcx, rbx
.text:00000000000036BE                 mov     rdx, rbx
.text:00000000000036C1                 mov     rsi, rax
.text:00000000000036C4                 mov     edi, 1
.text:00000000000036C9                 xor     eax, eax
.text:00000000000036CB                 call    ___printf_chk
.text:00000000000036D0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000036D7                 lea     rsi, aPrintNewlineWo ; "Print newline, word, and byte counts fo"...
.text:00000000000036DE                 mov     edx, 5          ; category
.text:00000000000036E3                 xor     edi, edi        ; domainname
.text:00000000000036E5                 call    _dcgettext
.text:00000000000036EA                 mov     rsi, rbx        ; stream
.text:00000000000036ED                 mov     rdi, rax        ; s
.text:00000000000036F0                 call    _fputs_unlocked
.text:00000000000036F5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000036FC                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000003703                 mov     edx, 5          ; category
.text:0000000000003708                 xor     edi, edi        ; domainname
.text:000000000000370A                 call    _dcgettext
.text:000000000000370F                 mov     rsi, rbx        ; stream
.text:0000000000003712                 mov     rdi, rax        ; s
.text:0000000000003715                 call    _fputs_unlocked
.text:000000000000371A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003721                 lea     rsi, aTheOptionsBelo ; "\nThe options below may be used to sele"...
.text:0000000000003728                 mov     edx, 5          ; category
.text:000000000000372D                 xor     edi, edi        ; domainname
.text:000000000000372F                 call    _dcgettext
.text:0000000000003734                 mov     rsi, rbx        ; stream
.text:0000000000003737                 mov     rdi, rax        ; s
.text:000000000000373A                 call    _fputs_unlocked
.text:000000000000373F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003746                 lea     rsi, aFiles0FromFRea ; "      --files0-from=F    read input fro"...
.text:000000000000374D                 mov     edx, 5          ; category
.text:0000000000003752                 xor     edi, edi        ; domainname
.text:0000000000003754                 call    _dcgettext
.text:0000000000003759                 mov     rsi, rbx        ; stream
.text:000000000000375C                 mov     rdi, rax        ; s
.text:000000000000375F                 call    _fputs_unlocked
.text:0000000000003764                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000376B                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000003772                 mov     edx, 5          ; category
.text:0000000000003777                 xor     edi, edi        ; domainname
.text:0000000000003779                 call    _dcgettext
.text:000000000000377E                 mov     rsi, rbx        ; stream
.text:0000000000003781                 mov     rdi, rax        ; s
.text:0000000000003784                 call    _fputs_unlocked
.text:0000000000003789                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003790                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003797                 mov     edx, 5          ; category
.text:000000000000379C                 xor     edi, edi        ; domainname
.text:000000000000379E                 call    _dcgettext
.text:00000000000037A3                 mov     rsi, rbx        ; stream
.text:00000000000037A6                 mov     rdi, rax        ; s
.text:00000000000037A9                 lea     rbx, aWc        ; "wc"
.text:00000000000037B0                 call    _fputs_unlocked
.text:00000000000037B5                 lea     rax, asc_6FF6   ; "["
.text:00000000000037BC                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000037C3                 mov     [rsp+0A8h+var_48], 0
.text:00000000000037CC                 mov     [rsp+0A8h+var_40], 0
.text:00000000000037D5                 mov     rdx, rsp
.text:00000000000037D8                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000037DC                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000037E3                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000037E8                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000037EF                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000037F4                 lea     rax, domainname ; "coreutils"
.text:00000000000037FB                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000003800                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000003807                 mov     [rsp+0A8h+var_98], rax
.text:000000000000380C                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000003813                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000003818                 mov     [rsp+0A8h+var_90], rax
.text:000000000000381D                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000003824                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003829                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000003830                 mov     [rsp+0A8h+var_80], rax
.text:0000000000003835                 mov     [rsp+0A8h+var_70], rax
.text:000000000000383A                 mov     [rsp+0A8h+var_60], rax
.text:000000000000383F                 mov     [rsp+0A8h+var_50], rax
.text:0000000000003844                 nop     dword ptr [rax+00h]
.text:0000000000003848
.text:0000000000003848 loc_3848:                               ; CODE XREF: usage+215↓j
.text:0000000000003848                 add     rdx, 10h
.text:000000000000384C                 mov     rdi, [rdx]
.text:000000000000384F                 test    rdi, rdi
.text:0000000000003852                 jz      short loc_3867
.text:0000000000003854                 mov     ecx, 3
.text:0000000000003859                 mov     rsi, rbx
.text:000000000000385C                 repe cmpsb
.text:000000000000385E                 setnbe  al
.text:0000000000003861                 sbb     al, 0
.text:0000000000003863                 test    al, al
.text:0000000000003865                 jnz     short loc_3848
.text:0000000000003867
.text:0000000000003867 loc_3867:                               ; CODE XREF: usage+202↑j
.text:0000000000003867                 mov     r12, [rdx+8]
.text:000000000000386B                 xor     edi, edi        ; domainname
.text:000000000000386D                 mov     edx, 5          ; category
.text:0000000000003872                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003879                 test    r12, r12
.text:000000000000387C                 jz      loc_3943
.text:0000000000003882                 call    _dcgettext
.text:0000000000003887                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000388E                 lea     rdx, unk_706C
.text:0000000000003895                 mov     rsi, rax
.text:0000000000003898                 mov     edi, 1
.text:000000000000389D                 xor     eax, eax
.text:000000000000389F                 call    ___printf_chk
.text:00000000000038A4                 xor     esi, esi        ; locale
.text:00000000000038A6                 mov     edi, 5          ; category
.text:00000000000038AB                 call    _setlocale
.text:00000000000038B0                 test    rax, rax
.text:00000000000038B3                 jz      short loc_38D1
.text:00000000000038B5                 lea     rsi, s2         ; "en_"
.text:00000000000038BC                 mov     edx, 3          ; n
.text:00000000000038C1                 mov     rdi, rax        ; s1
.text:00000000000038C4                 call    _strncmp
.text:00000000000038C9                 test    eax, eax
.text:00000000000038CB                 jnz     loc_39D8
.text:00000000000038D1
.text:00000000000038D1 loc_38D1:                               ; CODE XREF: usage+263↑j
.text:00000000000038D1                                         ; usage+3AD↓j
.text:00000000000038D1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000038D8                 xor     edi, edi        ; domainname
.text:00000000000038DA                 mov     edx, 5          ; category
.text:00000000000038DF                 call    _dcgettext
.text:00000000000038E4                 lea     rcx, aWc        ; "wc"
.text:00000000000038EB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000038F2                 mov     rsi, rax
.text:00000000000038F5                 mov     edi, 1
.text:00000000000038FA                 xor     eax, eax
.text:00000000000038FC                 call    ___printf_chk
.text:0000000000003901                 cmp     r12, rbx
.text:0000000000003904                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000390B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000003912                 cmovz   rbx, rcx
.text:0000000000003916
.text:0000000000003916 loc_3916:                               ; CODE XREF: usage+37C↓j
.text:0000000000003916                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000391D                 xor     edi, edi        ; domainname
.text:000000000000391F                 mov     edx, 5          ; category
.text:0000000000003924                 call    _dcgettext
.text:0000000000003929                 mov     rcx, rbx
.text:000000000000392C                 mov     rsi, rax
.text:000000000000392F                 mov     rdx, r12
.text:0000000000003932                 mov     edi, 1
.text:0000000000003937                 xor     eax, eax
.text:0000000000003939                 call    ___printf_chk
.text:000000000000393E                 jmp     loc_36A6
.text:0000000000003943 ; ---------------------------------------------------------------------------
.text:0000000000003943
.text:0000000000003943 loc_3943:                               ; CODE XREF: usage+22C↑j
.text:0000000000003943                 call    _dcgettext
.text:0000000000003948                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000394F                 lea     rdx, unk_706C
.text:0000000000003956                 mov     rsi, rax
.text:0000000000003959                 mov     edi, 1
.text:000000000000395E                 xor     eax, eax
.text:0000000000003960                 call    ___printf_chk
.text:0000000000003965                 xor     esi, esi        ; locale
.text:0000000000003967                 mov     edi, 5          ; category
.text:000000000000396C                 call    _setlocale
.text:0000000000003971                 test    rax, rax
.text:0000000000003974                 jz      short loc_398E
.text:0000000000003976                 lea     rsi, s2         ; "en_"
.text:000000000000397D                 mov     edx, 3          ; n
.text:0000000000003982                 mov     rdi, rax        ; s1
.text:0000000000003985                 call    _strncmp
.text:000000000000398A                 test    eax, eax
.text:000000000000398C                 jnz     short loc_39D1
.text:000000000000398E
.text:000000000000398E loc_398E:                               ; CODE XREF: usage+324↑j
.text:000000000000398E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000003995                 mov     edx, 5          ; category
.text:000000000000399A                 xor     edi, edi        ; domainname
.text:000000000000399C                 lea     r12, aWc        ; "wc"
.text:00000000000039A3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000039AA                 call    _dcgettext
.text:00000000000039AF                 lea     rcx, aWc        ; "wc"
.text:00000000000039B6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000039BD                 mov     rsi, rax
.text:00000000000039C0                 mov     edi, 1
.text:00000000000039C5                 xor     eax, eax
.text:00000000000039C7                 call    ___printf_chk
.text:00000000000039CC                 jmp     loc_3916
.text:00000000000039D1 ; ---------------------------------------------------------------------------
.text:00000000000039D1
.text:00000000000039D1 loc_39D1:                               ; CODE XREF: usage+33C↑j
.text:00000000000039D1                 lea     r12, aWc        ; "wc"
.text:00000000000039D8
.text:00000000000039D8 loc_39D8:                               ; CODE XREF: usage+27B↑j
.text:00000000000039D8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000039DF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000039E6                 xor     edi, edi        ; domainname
.text:00000000000039E8                 mov     edx, 5          ; category
.text:00000000000039ED                 call    _dcgettext
.text:00000000000039F2                 mov     rsi, r13        ; stream
.text:00000000000039F5                 mov     rdi, rax        ; s
.text:00000000000039F8                 call    _fputs_unlocked
.text:00000000000039FD                 jmp     loc_38D1
.text:00000000000039FD ; } // starts at 3650
.text:00000000000039FD usage           endp
.text:00000000000039FD
.text:00000000000039FD ; ---------------------------------------------------------------------------
.text:0000000000003A02                 align 10h
.text:0000000000003A10
.text:0000000000003A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A10
.text:0000000000003A10
.text:0000000000003A10                 public argv_iter_init_argv
.text:0000000000003A10 argv_iter_init_argv proc near           ; CODE XREF: main+3C2↑p
.text:0000000000003A10                                         ; main+990↑p
.text:0000000000003A10 ; __unwind {
.text:0000000000003A10                 push    rbx
.text:0000000000003A11                 mov     rbx, rdi
.text:0000000000003A14                 mov     edi, 30h ; '0'  ; size
.text:0000000000003A19                 call    malloc
.text:0000000000003A1E                 test    rax, rax
.text:0000000000003A21                 jz      short loc_3A32
.text:0000000000003A23                 mov     qword ptr [rax], 0
.text:0000000000003A2A                 mov     [rax+20h], rbx
.text:0000000000003A2E                 mov     [rax+28h], rbx
.text:0000000000003A32
.text:0000000000003A32 loc_3A32:                               ; CODE XREF: argv_iter_init_argv+11↑j
.text:0000000000003A32                 pop     rbx
.text:0000000000003A33                 retn
.text:0000000000003A33 ; } // starts at 3A10
.text:0000000000003A33 argv_iter_init_argv endp
.text:0000000000003A33
.text:0000000000003A33 ; ---------------------------------------------------------------------------
.text:0000000000003A34                 align 20h
.text:0000000000003A40
.text:0000000000003A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A40
.text:0000000000003A40
.text:0000000000003A40                 public argv_iter_init_stream
.text:0000000000003A40 argv_iter_init_stream proc near         ; CODE XREF: main+2DB↑p
.text:0000000000003A40 ; __unwind {
.text:0000000000003A40                 push    rbx
.text:0000000000003A41                 mov     rbx, rdi
.text:0000000000003A44                 mov     edi, 30h ; '0'  ; size
.text:0000000000003A49                 call    malloc
.text:0000000000003A4E                 test    rax, rax
.text:0000000000003A51                 jz      short loc_3A76
.text:0000000000003A53                 mov     [rax], rbx
.text:0000000000003A56                 mov     qword ptr [rax+10h], 0
.text:0000000000003A5E                 mov     qword ptr [rax+18h], 0
.text:0000000000003A66                 mov     qword ptr [rax+8], 0
.text:0000000000003A6E                 mov     qword ptr [rax+20h], 0
.text:0000000000003A76
.text:0000000000003A76 loc_3A76:                               ; CODE XREF: argv_iter_init_stream+11↑j
.text:0000000000003A76                 pop     rbx
.text:0000000000003A77                 retn
.text:0000000000003A77 ; } // starts at 3A40
.text:0000000000003A77 argv_iter_init_stream endp
.text:0000000000003A77
.text:0000000000003A77 ; ---------------------------------------------------------------------------
.text:0000000000003A78                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80                 public argv_iter
.text:0000000000003A80 argv_iter       proc near               ; CODE XREF: main+417↑p
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 mov     rcx, [rdi]      ; stream
.text:0000000000003A83                 test    rcx, rcx
.text:0000000000003A86                 jz      short loc_3AC0
.text:0000000000003A88                 push    rbp
.text:0000000000003A89                 push    rbx
.text:0000000000003A8A                 mov     rbp, rsi
.text:0000000000003A8D                 mov     rbx, rdi
.text:0000000000003A90                 lea     rsi, [rdi+18h]  ; n
.text:0000000000003A94                 lea     rdi, [rdi+10h]  ; lineptr
.text:0000000000003A98                 sub     rsp, 8
.text:0000000000003A9C                 xor     edx, edx        ; delimiter
.text:0000000000003A9E                 call    _getdelim
.text:0000000000003AA3                 test    rax, rax
.text:0000000000003AA6                 js      short loc_3AF0
.text:0000000000003AA8                 mov     dword ptr [rbp+0], 1
.text:0000000000003AAF                 add     qword ptr [rbx+8], 1
.text:0000000000003AB4                 mov     rax, [rbx+10h]
.text:0000000000003AB8
.text:0000000000003AB8 loc_3AB8:                               ; CODE XREF: argv_iter+88↓j
.text:0000000000003AB8                 add     rsp, 8
.text:0000000000003ABC                 pop     rbx
.text:0000000000003ABD                 pop     rbp
.text:0000000000003ABE                 retn
.text:0000000000003ABE ; ---------------------------------------------------------------------------
.text:0000000000003ABF                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 loc_3AC0:                               ; CODE XREF: argv_iter+6↑j
.text:0000000000003AC0                 mov     rdx, [rdi+28h]
.text:0000000000003AC4                 mov     rax, [rdx]
.text:0000000000003AC7                 test    rax, rax
.text:0000000000003ACA                 jz      short loc_3AE0
.text:0000000000003ACC                 add     rdx, 8
.text:0000000000003AD0                 mov     dword ptr [rsi], 1
.text:0000000000003AD6                 mov     [rdi+28h], rdx
.text:0000000000003ADA                 retn
.text:0000000000003ADA ; ---------------------------------------------------------------------------
.text:0000000000003ADB                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 loc_3AE0:                               ; CODE XREF: argv_iter+4A↑j
.text:0000000000003AE0                 mov     dword ptr [rsi], 2
.text:0000000000003AE6                 retn
.text:0000000000003AE6 ; ---------------------------------------------------------------------------
.text:0000000000003AE7                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 loc_3AF0:                               ; CODE XREF: argv_iter+26↑j
.text:0000000000003AF0                 mov     rdi, [rbx]      ; stream
.text:0000000000003AF3                 call    _feof
.text:0000000000003AF8                 cmp     eax, 1
.text:0000000000003AFB                 sbb     eax, eax
.text:0000000000003AFD                 and     eax, 2
.text:0000000000003B00                 add     eax, 2
.text:0000000000003B03                 mov     [rbp+0], eax
.text:0000000000003B06                 xor     eax, eax
.text:0000000000003B08                 jmp     short loc_3AB8
.text:0000000000003B08 ; } // starts at 3A80
.text:0000000000003B08 argv_iter       endp
.text:0000000000003B08
.text:0000000000003B08 ; ---------------------------------------------------------------------------
.text:0000000000003B0A                 align 10h
.text:0000000000003B10
.text:0000000000003B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B10
.text:0000000000003B10
.text:0000000000003B10                 public argv_iter_n_args
.text:0000000000003B10 argv_iter_n_args proc near              ; CODE XREF: main+54F↑p
.text:0000000000003B10                                         ; main+677↑p ...
.text:0000000000003B10 ; __unwind {
.text:0000000000003B10                 cmp     qword ptr [rdi], 0
.text:0000000000003B14                 jz      short loc_3B20
.text:0000000000003B16                 mov     rax, [rdi+8]
.text:0000000000003B1A                 retn
.text:0000000000003B1A ; ---------------------------------------------------------------------------
.text:0000000000003B1B                 align 20h
.text:0000000000003B20
.text:0000000000003B20 loc_3B20:                               ; CODE XREF: argv_iter_n_args+4↑j
.text:0000000000003B20                 mov     rax, [rdi+28h]
.text:0000000000003B24                 sub     rax, [rdi+20h]
.text:0000000000003B28                 sar     rax, 3
.text:0000000000003B2C                 retn
.text:0000000000003B2C ; } // starts at 3B10
.text:0000000000003B2C argv_iter_n_args endp
.text:0000000000003B2C
.text:0000000000003B2C ; ---------------------------------------------------------------------------
.text:0000000000003B2D                 align 10h
.text:0000000000003B30
.text:0000000000003B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B30
.text:0000000000003B30
.text:0000000000003B30 ; __int64 __fastcall argv_iter_free(void *ptr)
.text:0000000000003B30                 public argv_iter_free
.text:0000000000003B30 argv_iter_free  proc near               ; CODE XREF: main+6DF↑p
.text:0000000000003B30 ; __unwind {
.text:0000000000003B30                 push    rbx
.text:0000000000003B31                 cmp     qword ptr [rdi], 0
.text:0000000000003B35                 mov     rbx, rdi
.text:0000000000003B38                 jz      short loc_3B43
.text:0000000000003B3A                 mov     rdi, [rdi+10h]  ; ptr
.text:0000000000003B3E                 call    free
.text:0000000000003B43
.text:0000000000003B43 loc_3B43:                               ; CODE XREF: argv_iter_free+8↑j
.text:0000000000003B43                 mov     rdi, rbx        ; ptr
.text:0000000000003B46                 pop     rbx
.text:0000000000003B47                 jmp     free
.text:0000000000003B47 ; } // starts at 3B30
.text:0000000000003B47 argv_iter_free  endp
.text:0000000000003B47
.text:0000000000003B47 ; ---------------------------------------------------------------------------
.text:0000000000003B4C                 align 10h
.text:0000000000003B50
.text:0000000000003B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B50
.text:0000000000003B50
.text:0000000000003B50                 public close_stdout_set_file_name
.text:0000000000003B50 close_stdout_set_file_name proc near
.text:0000000000003B50 ; __unwind {
.text:0000000000003B50                 mov     cs:file_name, rdi
.text:0000000000003B57                 retn
.text:0000000000003B57 ; } // starts at 3B50
.text:0000000000003B57 close_stdout_set_file_name endp
.text:0000000000003B57
.text:0000000000003B57 ; ---------------------------------------------------------------------------
.text:0000000000003B58                 align 20h
.text:0000000000003B60
.text:0000000000003B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B60
.text:0000000000003B60
.text:0000000000003B60                 public close_stdout_set_ignore_EPIPE
.text:0000000000003B60 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003B60 ; __unwind {
.text:0000000000003B60                 mov     cs:ignore_EPIPE, dil
.text:0000000000003B67                 retn
.text:0000000000003B67 ; } // starts at 3B60
.text:0000000000003B67 close_stdout_set_ignore_EPIPE endp
.text:0000000000003B67
.text:0000000000003B67 ; ---------------------------------------------------------------------------
.text:0000000000003B68                 align 10h
.text:0000000000003B70
.text:0000000000003B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B70
.text:0000000000003B70 ; Attributes: info_from_lumina
.text:0000000000003B70
.text:0000000000003B70 ; void __cdecl close_stdout()
.text:0000000000003B70                 public close_stdout
.text:0000000000003B70 close_stdout    proc near               ; DATA XREF: main+68↑o
.text:0000000000003B70 ; __unwind {
.text:0000000000003B70                 push    rbp
.text:0000000000003B71                 push    rbx
.text:0000000000003B72                 sub     rsp, 8
.text:0000000000003B76                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003B7D                 call    close_stream
.text:0000000000003B82                 test    eax, eax
.text:0000000000003B84                 jz      short loc_3B9C
.text:0000000000003B86                 call    ___errno_location
.text:0000000000003B8B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003B92                 mov     rbx, rax
.text:0000000000003B95                 jz      short loc_3BB3
.text:0000000000003B97                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003B9A                 jnz     short loc_3BB3
.text:0000000000003B9C
.text:0000000000003B9C loc_3B9C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000003B9C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003BA3                 call    close_stream
.text:0000000000003BA8                 test    eax, eax
.text:0000000000003BAA                 jnz     short loc_3BF2
.text:0000000000003BAC                 add     rsp, 8
.text:0000000000003BB0                 pop     rbx
.text:0000000000003BB1                 pop     rbp
.text:0000000000003BB2                 retn
.text:0000000000003BB3 ; ---------------------------------------------------------------------------
.text:0000000000003BB3
.text:0000000000003BB3 loc_3BB3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003BB3                                         ; close_stdout+2A↑j
.text:0000000000003BB3                 lea     rsi, aWriteError ; "write error"
.text:0000000000003BBA                 xor     edi, edi        ; domainname
.text:0000000000003BBC                 mov     edx, 5          ; category
.text:0000000000003BC1                 call    _dcgettext
.text:0000000000003BC6                 mov     rdi, cs:file_name
.text:0000000000003BCD                 mov     rbp, rax
.text:0000000000003BD0                 test    rdi, rdi
.text:0000000000003BD3                 jz      short loc_3BFD
.text:0000000000003BD5                 call    quotearg_colon
.text:0000000000003BDA                 mov     esi, [rbx]      ; errnum
.text:0000000000003BDC                 lea     rdx, aS         ; "%s: "
.text:0000000000003BE3                 mov     rcx, rax
.text:0000000000003BE6                 mov     r8, rbp
.text:0000000000003BE9                 xor     edi, edi        ; status
.text:0000000000003BEB                 xor     eax, eax
.text:0000000000003BED                 call    _error
.text:0000000000003BF2
.text:0000000000003BF2 loc_3BF2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003BF2                                         ; close_stdout+A2↓j
.text:0000000000003BF2                 mov     edi, cs:exit_failure ; status
.text:0000000000003BF8                 call    __exit
.text:0000000000003BFD ; ---------------------------------------------------------------------------
.text:0000000000003BFD
.text:0000000000003BFD loc_3BFD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000003BFD                 mov     esi, [rbx]      ; errnum
.text:0000000000003BFF                 lea     rdx, format     ; format
.text:0000000000003C06                 mov     rcx, rax
.text:0000000000003C09                 xor     edi, edi        ; status
.text:0000000000003C0B                 xor     eax, eax
.text:0000000000003C0D                 call    _error
.text:0000000000003C12                 jmp     short loc_3BF2
.text:0000000000003C12 ; } // starts at 3B70
.text:0000000000003C12 close_stdout    endp
.text:0000000000003C12
.text:0000000000003C12 ; ---------------------------------------------------------------------------
.text:0000000000003C14                 align 20h
.text:0000000000003C20
.text:0000000000003C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C20
.text:0000000000003C20
.text:0000000000003C20 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000003C20                 public fdadvise
.text:0000000000003C20 fdadvise        proc near               ; CODE XREF: wc+18D↑p
.text:0000000000003C20                                         ; wc+2A6↑p ...
.text:0000000000003C20 ; __unwind {
.text:0000000000003C20                 jmp     _posix_fadvise
.text:0000000000003C20 ; } // starts at 3C20
.text:0000000000003C20 fdadvise        endp
.text:0000000000003C20
.text:0000000000003C20 ; ---------------------------------------------------------------------------
.text:0000000000003C25                 align 10h
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30
.text:0000000000003C30                 public fadvise
.text:0000000000003C30 fadvise         proc near
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 test    rdi, rdi
.text:0000000000003C33                 jz      short locret_3C50
.text:0000000000003C35                 push    rbx
.text:0000000000003C36                 mov     ebx, esi
.text:0000000000003C38                 call    _fileno
.text:0000000000003C3D                 mov     ecx, ebx        ; advise
.text:0000000000003C3F                 xor     edx, edx        ; len
.text:0000000000003C41                 xor     esi, esi        ; offset
.text:0000000000003C43                 pop     rbx
.text:0000000000003C44                 mov     edi, eax        ; fd
.text:0000000000003C46                 jmp     _posix_fadvise
.text:0000000000003C46 ; ---------------------------------------------------------------------------
.text:0000000000003C4B                 align 10h
.text:0000000000003C50
.text:0000000000003C50 locret_3C50:                            ; CODE XREF: fadvise+3↑j
.text:0000000000003C50                 rep retn
.text:0000000000003C50 ; } // starts at 3C30
.text:0000000000003C50 fadvise         endp
.text:0000000000003C50
.text:0000000000003C50 ; ---------------------------------------------------------------------------
.text:0000000000003C52                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60 ; Attributes: info_from_lumina
.text:0000000000003C60
.text:0000000000003C60 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000003C60                 public umaxtostr
.text:0000000000003C60 umaxtostr       proc near               ; CODE XREF: write_counts+106↑p
.text:0000000000003C60                                         ; write_counts+136↑p ...
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 lea     rcx, [rsi+14h]
.text:0000000000003C64                 mov     byte ptr [rsi+14h], 0
.text:0000000000003C68                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:0000000000003C72                 nop     word ptr [rax+rax+00h]
.text:0000000000003C78
.text:0000000000003C78 loc_3C78:                               ; CODE XREF: umaxtostr+3C↓j
.text:0000000000003C78                 mov     rax, rdi
.text:0000000000003C7B                 sub     rcx, 1
.text:0000000000003C7F                 mul     rsi
.text:0000000000003C82                 shr     rdx, 3
.text:0000000000003C86                 lea     rax, [rdx+rdx*4]
.text:0000000000003C8A                 add     rax, rax
.text:0000000000003C8D                 sub     rdi, rax
.text:0000000000003C90                 add     edi, 30h ; '0'
.text:0000000000003C93                 test    rdx, rdx
.text:0000000000003C96                 mov     [rcx], dil
.text:0000000000003C99                 mov     rdi, rdx
.text:0000000000003C9C                 jnz     short loc_3C78
.text:0000000000003C9E                 mov     rax, rcx
.text:0000000000003CA1                 retn
.text:0000000000003CA1 ; } // starts at 3C60
.text:0000000000003CA1 umaxtostr       endp
.text:0000000000003CA1
.text:0000000000003CA1 ; ---------------------------------------------------------------------------
.text:0000000000003CA2                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CB0
.text:0000000000003CB0 ; Attributes: info_from_lumina
.text:0000000000003CB0
.text:0000000000003CB0 ; __int64 __fastcall mb_width_aux(wint_t wc)
.text:0000000000003CB0                 public mb_width_aux
.text:0000000000003CB0 mb_width_aux    proc near
.text:0000000000003CB0 ; __unwind {
.text:0000000000003CB0                 push    rbx
.text:0000000000003CB1                 mov     ebx, edi
.text:0000000000003CB3                 call    _wcwidth
.text:0000000000003CB8                 test    eax, eax
.text:0000000000003CBA                 js      short loc_3CC0
.text:0000000000003CBC                 pop     rbx
.text:0000000000003CBD                 retn
.text:0000000000003CBD ; ---------------------------------------------------------------------------
.text:0000000000003CBE                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 loc_3CC0:                               ; CODE XREF: mb_width_aux+A↑j
.text:0000000000003CC0                 mov     edi, ebx        ; wc
.text:0000000000003CC2                 call    _iswcntrl
.text:0000000000003CC7                 test    eax, eax
.text:0000000000003CC9                 setz    al
.text:0000000000003CCC                 movzx   eax, al
.text:0000000000003CCF                 pop     rbx
.text:0000000000003CD0                 retn
.text:0000000000003CD0 ; } // starts at 3CB0
.text:0000000000003CD0 mb_width_aux    endp
.text:0000000000003CD0
.text:0000000000003CD0 ; ---------------------------------------------------------------------------
.text:0000000000003CD1                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0
.text:0000000000003CE0                 public mb_copy
.text:0000000000003CE0 mb_copy         proc near
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 push    rbp
.text:0000000000003CE1                 push    rbx
.text:0000000000003CE2                 mov     rbx, rsi
.text:0000000000003CE5                 lea     rax, [rbx+18h]
.text:0000000000003CE9                 mov     rbp, rdi
.text:0000000000003CEC                 sub     rsp, 8
.text:0000000000003CF0                 mov     rsi, [rsi]      ; src
.text:0000000000003CF3                 mov     rdx, [rbx+8]    ; n
.text:0000000000003CF7                 cmp     rsi, rax
.text:0000000000003CFA                 jz      short loc_3D20
.text:0000000000003CFC                 mov     [rdi], rsi
.text:0000000000003CFF
.text:0000000000003CFF loc_3CFF:                               ; CODE XREF: mb_copy+54↓j
.text:0000000000003CFF                 movzx   eax, byte ptr [rbx+10h]
.text:0000000000003D03                 mov     [rbp+8], rdx
.text:0000000000003D07                 test    al, al
.text:0000000000003D09                 mov     [rbp+10h], al
.text:0000000000003D0C                 jz      short loc_3D14
.text:0000000000003D0E                 mov     eax, [rbx+14h]
.text:0000000000003D11                 mov     [rbp+14h], eax
.text:0000000000003D14
.text:0000000000003D14 loc_3D14:                               ; CODE XREF: mb_copy+2C↑j
.text:0000000000003D14                 add     rsp, 8
.text:0000000000003D18                 pop     rbx
.text:0000000000003D19                 pop     rbp
.text:0000000000003D1A                 retn
.text:0000000000003D1A ; ---------------------------------------------------------------------------
.text:0000000000003D1B                 align 20h
.text:0000000000003D20
.text:0000000000003D20 loc_3D20:                               ; CODE XREF: mb_copy+1A↑j
.text:0000000000003D20                 lea     rcx, [rdi+18h]
.text:0000000000003D24                 mov     rdi, rcx        ; dest
.text:0000000000003D27                 call    _memcpy
.text:0000000000003D2C                 mov     rdx, [rbx+8]
.text:0000000000003D30                 mov     [rbp+0], rax
.text:0000000000003D34                 jmp     short loc_3CFF
.text:0000000000003D34 ; } // starts at 3CE0
.text:0000000000003D34 mb_copy         endp
.text:0000000000003D34
.text:0000000000003D34 ; ---------------------------------------------------------------------------
.text:0000000000003D36                 align 20h
.text:0000000000003D40
.text:0000000000003D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D40
.text:0000000000003D40
.text:0000000000003D40                 public is_basic
.text:0000000000003D40 is_basic        proc near
.text:0000000000003D40 ; __unwind {
.text:0000000000003D40                 mov     eax, edi
.text:0000000000003D42                 lea     rdx, is_basic_table
.text:0000000000003D49                 mov     ecx, edi
.text:0000000000003D4B                 shr     al, 5
.text:0000000000003D4E                 and     ecx, 1Fh
.text:0000000000003D51                 and     eax, 7
.text:0000000000003D54                 mov     eax, [rdx+rax*4]
.text:0000000000003D57                 shr     eax, cl
.text:0000000000003D59                 and     eax, 1
.text:0000000000003D5C                 retn
.text:0000000000003D5C ; } // starts at 3D40
.text:0000000000003D5C is_basic        endp
.text:0000000000003D5C
.text:0000000000003D5C ; ---------------------------------------------------------------------------
.text:0000000000003D5D                 align 20h
.text:0000000000003D60
.text:0000000000003D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D60
.text:0000000000003D60
.text:0000000000003D60                 public physmem_total
.text:0000000000003D60 physmem_total   proc near               ; CODE XREF: physmem_available:loc_3F10↓p
.text:0000000000003D60
.text:0000000000003D60 var_90          = qword ptr -90h
.text:0000000000003D60 var_88          = byte ptr -88h
.text:0000000000003D60 var_68          = qword ptr -68h
.text:0000000000003D60 var_20          = dword ptr -20h
.text:0000000000003D60 var_10          = qword ptr -10h
.text:0000000000003D60
.text:0000000000003D60 ; __unwind {
.text:0000000000003D60                 sub     rsp, 98h
.text:0000000000003D67                 mov     edi, 55h ; 'U'  ; name
.text:0000000000003D6C                 mov     rax, fs:28h
.text:0000000000003D75                 mov     [rsp+98h+var_10], rax
.text:0000000000003D7D                 xor     eax, eax
.text:0000000000003D7F                 call    _sysconf
.text:0000000000003D84                 pxor    xmm0, xmm0
.text:0000000000003D88                 mov     edi, 1Eh        ; name
.text:0000000000003D8D                 cvtsi2sd xmm0, rax
.text:0000000000003D92                 movsd   [rsp+98h+var_90], xmm0
.text:0000000000003D98                 call    _sysconf
.text:0000000000003D9D                 pxor    xmm2, xmm2
.text:0000000000003DA1                 movsd   xmm0, [rsp+98h+var_90]
.text:0000000000003DA7                 ucomisd xmm0, xmm2
.text:0000000000003DAB                 jb      short loc_3DE0
.text:0000000000003DAD                 pxor    xmm1, xmm1
.text:0000000000003DB1                 cvtsi2sd xmm1, rax
.text:0000000000003DB6                 ucomisd xmm1, xmm2
.text:0000000000003DBA                 jb      short loc_3DE0
.text:0000000000003DBC
.text:0000000000003DBC loc_3DBC:                               ; CODE XREF: physmem_total+B6↓j
.text:0000000000003DBC                 mulsd   xmm0, xmm1
.text:0000000000003DC0
.text:0000000000003DC0 loc_3DC0:                               ; CODE XREF: physmem_total+94↓j
.text:0000000000003DC0                 mov     rax, [rsp+98h+var_10]
.text:0000000000003DC8                 xor     rax, fs:28h
.text:0000000000003DD1                 jnz     short loc_3E3B
.text:0000000000003DD3                 add     rsp, 98h
.text:0000000000003DDA                 retn
.text:0000000000003DDA ; ---------------------------------------------------------------------------
.text:0000000000003DDB                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 loc_3DE0:                               ; CODE XREF: physmem_total+4B↑j
.text:0000000000003DE0                                         ; physmem_total+5A↑j
.text:0000000000003DE0                 lea     rdi, [rsp+98h+var_88] ; info
.text:0000000000003DE5                 call    _sysinfo
.text:0000000000003DEA                 test    eax, eax
.text:0000000000003DEC                 movsd   xmm0, cs:qword_78C0
.text:0000000000003DF4                 jnz     short loc_3DC0
.text:0000000000003DF6                 mov     rax, [rsp+98h+var_68]
.text:0000000000003DFB                 test    rax, rax
.text:0000000000003DFE                 js      short loc_3E20
.text:0000000000003E00                 pxor    xmm0, xmm0
.text:0000000000003E04                 cvtsi2sd xmm0, rax
.text:0000000000003E09
.text:0000000000003E09 loc_3E09:                               ; CODE XREF: physmem_total+D9↓j
.text:0000000000003E09                 mov     eax, [rsp+98h+var_20]
.text:0000000000003E0D                 pxor    xmm1, xmm1
.text:0000000000003E11                 cvtsi2sd xmm1, rax
.text:0000000000003E16                 jmp     short loc_3DBC
.text:0000000000003E16 ; ---------------------------------------------------------------------------
.text:0000000000003E18                 align 20h
.text:0000000000003E20
.text:0000000000003E20 loc_3E20:                               ; CODE XREF: physmem_total+9E↑j
.text:0000000000003E20                 mov     rdx, rax
.text:0000000000003E23                 pxor    xmm0, xmm0
.text:0000000000003E27                 shr     rdx, 1
.text:0000000000003E2A                 and     eax, 1
.text:0000000000003E2D                 or      rdx, rax
.text:0000000000003E30                 cvtsi2sd xmm0, rdx
.text:0000000000003E35                 addsd   xmm0, xmm0
.text:0000000000003E39                 jmp     short loc_3E09
.text:0000000000003E3B ; ---------------------------------------------------------------------------
.text:0000000000003E3B
.text:0000000000003E3B loc_3E3B:                               ; CODE XREF: physmem_total+71↑j
.text:0000000000003E3B                 call    ___stack_chk_fail
.text:0000000000003E3B ; } // starts at 3D60
.text:0000000000003E3B physmem_total   endp
.text:0000000000003E3B
.text:0000000000003E40
.text:0000000000003E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E40
.text:0000000000003E40
.text:0000000000003E40                 public physmem_available
.text:0000000000003E40 physmem_available proc near             ; CODE XREF: main+90C↑p
.text:0000000000003E40                                         ; main+931↑p
.text:0000000000003E40
.text:0000000000003E40 var_90          = qword ptr -90h
.text:0000000000003E40 var_88          = byte ptr -88h
.text:0000000000003E40 var_60          = qword ptr -60h
.text:0000000000003E40 var_50          = qword ptr -50h
.text:0000000000003E40 var_20          = dword ptr -20h
.text:0000000000003E40 var_10          = qword ptr -10h
.text:0000000000003E40
.text:0000000000003E40 ; __unwind {
.text:0000000000003E40                 sub     rsp, 98h
.text:0000000000003E47                 mov     edi, 56h ; 'V'  ; name
.text:0000000000003E4C                 mov     rax, fs:28h
.text:0000000000003E55                 mov     [rsp+98h+var_10], rax
.text:0000000000003E5D                 xor     eax, eax
.text:0000000000003E5F                 call    _sysconf
.text:0000000000003E64                 pxor    xmm0, xmm0
.text:0000000000003E68                 mov     edi, 1Eh        ; name
.text:0000000000003E6D                 cvtsi2sd xmm0, rax
.text:0000000000003E72                 movsd   [rsp+98h+var_90], xmm0
.text:0000000000003E78                 call    _sysconf
.text:0000000000003E7D                 pxor    xmm2, xmm2
.text:0000000000003E81                 movsd   xmm0, [rsp+98h+var_90]
.text:0000000000003E87                 ucomisd xmm0, xmm2
.text:0000000000003E8B                 jb      short loc_3EC0
.text:0000000000003E8D                 pxor    xmm1, xmm1
.text:0000000000003E91                 cvtsi2sd xmm1, rax
.text:0000000000003E96                 ucomisd xmm1, xmm2
.text:0000000000003E9A                 jb      short loc_3EC0
.text:0000000000003E9C
.text:0000000000003E9C loc_3E9C:                               ; CODE XREF: physmem_available+C5↓j
.text:0000000000003E9C                 mulsd   xmm0, xmm1
.text:0000000000003EA0
.text:0000000000003EA0 loc_3EA0:                               ; CODE XREF: physmem_available+DD↓j
.text:0000000000003EA0                 mov     rax, [rsp+98h+var_10]
.text:0000000000003EA8                 xor     rax, fs:28h
.text:0000000000003EB1                 jnz     loc_3F5B
.text:0000000000003EB7                 add     rsp, 98h
.text:0000000000003EBE                 retn
.text:0000000000003EBE ; ---------------------------------------------------------------------------
.text:0000000000003EBF                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 loc_3EC0:                               ; CODE XREF: physmem_available+4B↑j
.text:0000000000003EC0                                         ; physmem_available+5A↑j
.text:0000000000003EC0                 lea     rdi, [rsp+98h+var_88] ; info
.text:0000000000003EC5                 call    _sysinfo
.text:0000000000003ECA                 test    eax, eax
.text:0000000000003ECC                 jnz     short loc_3F10
.text:0000000000003ECE                 mov     rax, [rsp+98h+var_60]
.text:0000000000003ED3                 test    rax, rax
.text:0000000000003ED6                 js      short loc_3F40
.text:0000000000003ED8                 pxor    xmm0, xmm0
.text:0000000000003EDC                 cvtsi2sd xmm0, rax
.text:0000000000003EE1
.text:0000000000003EE1 loc_3EE1:                               ; CODE XREF: physmem_available+119↓j
.text:0000000000003EE1                 mov     rax, [rsp+98h+var_50]
.text:0000000000003EE6                 test    rax, rax
.text:0000000000003EE9                 js      short loc_3F20
.text:0000000000003EEB                 pxor    xmm1, xmm1
.text:0000000000003EEF                 cvtsi2sd xmm1, rax
.text:0000000000003EF4
.text:0000000000003EF4 loc_3EF4:                               ; CODE XREF: physmem_available+F9↓j
.text:0000000000003EF4                 mov     eax, [rsp+98h+var_20]
.text:0000000000003EF8                 addsd   xmm0, xmm1
.text:0000000000003EFC                 pxor    xmm1, xmm1
.text:0000000000003F00                 cvtsi2sd xmm1, rax
.text:0000000000003F05                 jmp     short loc_3E9C
.text:0000000000003F05 ; ---------------------------------------------------------------------------
.text:0000000000003F07                 align 10h
.text:0000000000003F10
.text:0000000000003F10 loc_3F10:                               ; CODE XREF: physmem_available+8C↑j
.text:0000000000003F10                 call    physmem_total
.text:0000000000003F15                 mulsd   xmm0, cs:qword_78C8
.text:0000000000003F1D                 jmp     short loc_3EA0
.text:0000000000003F1D ; ---------------------------------------------------------------------------
.text:0000000000003F1F                 align 20h
.text:0000000000003F20
.text:0000000000003F20 loc_3F20:                               ; CODE XREF: physmem_available+A9↑j
.text:0000000000003F20                 mov     rdx, rax
.text:0000000000003F23                 pxor    xmm1, xmm1
.text:0000000000003F27                 shr     rdx, 1
.text:0000000000003F2A                 and     eax, 1
.text:0000000000003F2D                 or      rdx, rax
.text:0000000000003F30                 cvtsi2sd xmm1, rdx
.text:0000000000003F35                 addsd   xmm1, xmm1
.text:0000000000003F39                 jmp     short loc_3EF4
.text:0000000000003F39 ; ---------------------------------------------------------------------------
.text:0000000000003F3B                 align 20h
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: physmem_available+96↑j
.text:0000000000003F40                 mov     rdx, rax
.text:0000000000003F43                 pxor    xmm0, xmm0
.text:0000000000003F47                 shr     rdx, 1
.text:0000000000003F4A                 and     eax, 1
.text:0000000000003F4D                 or      rdx, rax
.text:0000000000003F50                 cvtsi2sd xmm0, rdx
.text:0000000000003F55                 addsd   xmm0, xmm0
.text:0000000000003F59                 jmp     short loc_3EE1
.text:0000000000003F5B ; ---------------------------------------------------------------------------
.text:0000000000003F5B
.text:0000000000003F5B loc_3F5B:                               ; CODE XREF: physmem_available+71↑j
.text:0000000000003F5B                 call    ___stack_chk_fail
.text:0000000000003F5B ; } // starts at 3E40
.text:0000000000003F5B physmem_available endp
.text:0000000000003F5B
.text:0000000000003F60
.text:0000000000003F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F60
.text:0000000000003F60
.text:0000000000003F60                 public set_program_name
.text:0000000000003F60 set_program_name proc near              ; CODE XREF: main+33↑p
.text:0000000000003F60 ; __unwind {
.text:0000000000003F60                 test    rdi, rdi
.text:0000000000003F63                 push    rbx
.text:0000000000003F64                 jz      short loc_3FDD
.text:0000000000003F66                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000003F6B                 mov     rbx, rdi
.text:0000000000003F6E                 call    _strrchr
.text:0000000000003F73                 test    rax, rax
.text:0000000000003F76                 jz      short loc_3FCD
.text:0000000000003F78                 lea     r8, [rax+1]
.text:0000000000003F7C                 mov     rdx, r8
.text:0000000000003F7F                 sub     rdx, rbx
.text:0000000000003F82                 cmp     rdx, 6
.text:0000000000003F86                 jle     short loc_3FCD
.text:0000000000003F88                 lea     rsi, [rax-6]
.text:0000000000003F8C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000003F93                 mov     ecx, 7
.text:0000000000003F98                 repe cmpsb
.text:0000000000003F9A                 setnbe  dl
.text:0000000000003F9D                 sbb     dl, 0
.text:0000000000003FA0                 test    dl, dl
.text:0000000000003FA2                 jnz     short loc_3FCD
.text:0000000000003FA4                 lea     rdi, aLt        ; "lt-"
.text:0000000000003FAB                 mov     ecx, 3
.text:0000000000003FB0                 mov     rsi, r8
.text:0000000000003FB3                 mov     rbx, r8
.text:0000000000003FB6                 repe cmpsb
.text:0000000000003FB8                 setnbe  dl
.text:0000000000003FBB                 sbb     dl, 0
.text:0000000000003FBE                 test    dl, dl
.text:0000000000003FC0                 jnz     short loc_3FCD
.text:0000000000003FC2                 lea     rbx, [rax+4]
.text:0000000000003FC6                 mov     cs:program_invocation_short_name@@GLIBC_2_2_5, rbx
.text:0000000000003FCD
.text:0000000000003FCD loc_3FCD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000003FCD                                         ; set_program_name+26↑j ...
.text:0000000000003FCD                 mov     cs:program_name, rbx
.text:0000000000003FD4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000003FDB                 pop     rbx
.text:0000000000003FDC                 retn
.text:0000000000003FDD ; ---------------------------------------------------------------------------
.text:0000000000003FDD
.text:0000000000003FDD loc_3FDD:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000003FDD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000003FE4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000003FEB                 mov     edx, 37h ; '7'  ; n
.text:0000000000003FF0                 mov     esi, 1          ; size
.text:0000000000003FF5                 call    _fwrite
.text:0000000000003FFA                 call    _abort
.text:0000000000003FFA ; } // starts at 3F60
.text:0000000000003FFA set_program_name endp
.text:0000000000003FFA
.text:0000000000003FFA ; ---------------------------------------------------------------------------
.text:0000000000003FFF                 align 20h
.text:0000000000004000
.text:0000000000004000 ; =============== S U B R O U T I N E =======================================
.text:0000000000004000
.text:0000000000004000 ; Attributes: info_from_lumina
.text:0000000000004000
.text:0000000000004000 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000004000 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000004000                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000004000 ; __unwind {
.text:0000000000004000                 push    rbp
.text:0000000000004001                 push    rbx
.text:0000000000004002                 mov     rbp, rdi
.text:0000000000004005                 mov     ebx, esi
.text:0000000000004007                 sub     rsp, 8
.text:000000000000400B                 call    locale_charset
.text:0000000000004010                 movzx   edx, byte ptr [rax]
.text:0000000000004013                 and     edx, 0FFFFFFDFh
.text:0000000000004016                 cmp     dl, 55h ; 'U'
.text:0000000000004019                 jz      short loc_4090
.text:000000000000401B                 cmp     dl, 47h ; 'G'
.text:000000000000401E                 jz      short loc_4040
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000004020                                         ; gettext_quote+50↓j ...
.text:0000000000004020                 lea     rax, unk_7923
.text:0000000000004027                 lea     rdx, asc_7925   ; "'"
.text:000000000000402E                 cmp     ebx, 9
.text:0000000000004031                 cmovnz  rax, rdx
.text:0000000000004035                 add     rsp, 8
.text:0000000000004039                 pop     rbx
.text:000000000000403A                 pop     rbp
.text:000000000000403B                 retn
.text:000000000000403B ; ---------------------------------------------------------------------------
.text:000000000000403C                 align 20h
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004040                 movzx   edx, byte ptr [rax+1]
.text:0000000000004044                 and     edx, 0FFFFFFDFh
.text:0000000000004047                 cmp     dl, 42h ; 'B'
.text:000000000000404A                 jnz     short loc_4020
.text:000000000000404C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004050                 jnz     short loc_4020
.text:0000000000004052                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004056                 jnz     short loc_4020
.text:0000000000004058                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000405C                 jnz     short loc_4020
.text:000000000000405E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004062                 jnz     short loc_4020
.text:0000000000004064                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004068                 jnz     short loc_4020
.text:000000000000406A                 cmp     byte ptr [rax+7], 0
.text:000000000000406E                 jnz     short loc_4020
.text:0000000000004070                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004074                 lea     rax, unk_791C
.text:000000000000407B                 lea     rdx, unk_7920
.text:0000000000004082                 cmovnz  rax, rdx
.text:0000000000004086                 add     rsp, 8
.text:000000000000408A                 pop     rbx
.text:000000000000408B                 pop     rbp
.text:000000000000408C                 retn
.text:000000000000408C ; ---------------------------------------------------------------------------
.text:000000000000408D                 align 10h
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000004090                 movzx   edx, byte ptr [rax+1]
.text:0000000000004094                 and     edx, 0FFFFFFDFh
.text:0000000000004097                 cmp     dl, 54h ; 'T'
.text:000000000000409A                 jnz     short loc_4020
.text:000000000000409C                 movzx   edx, byte ptr [rax+2]
.text:00000000000040A0                 and     edx, 0FFFFFFDFh
.text:00000000000040A3                 cmp     dl, 46h ; 'F'
.text:00000000000040A6                 jnz     loc_4020
.text:00000000000040AC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000040B0                 jnz     loc_4020
.text:00000000000040B6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000040BA                 jnz     loc_4020
.text:00000000000040C0                 cmp     byte ptr [rax+5], 0
.text:00000000000040C4                 jnz     loc_4020
.text:00000000000040CA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000040CE                 lea     rax, unk_7914
.text:00000000000040D5                 lea     rdx, unk_7918
.text:00000000000040DC                 cmovnz  rax, rdx
.text:00000000000040E0                 add     rsp, 8
.text:00000000000040E4                 pop     rbx
.text:00000000000040E5                 pop     rbp
.text:00000000000040E6                 retn
.text:00000000000040E6 ; } // starts at 4000
.text:00000000000040E6 gettext_quote   endp
.text:00000000000040E6
.text:00000000000040E6 ; ---------------------------------------------------------------------------
.text:00000000000040E7                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0 ; Attributes: info_from_lumina
.text:00000000000040F0
.text:00000000000040F0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:00000000000040F0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:00000000000040F0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:00000000000040F0
.text:00000000000040F0 var_E0          = dword ptr -0E0h
.text:00000000000040F0 var_DB          = byte ptr -0DBh
.text:00000000000040F0 var_DA          = byte ptr -0DAh
.text:00000000000040F0 var_D9          = byte ptr -0D9h
.text:00000000000040F0 s               = qword ptr -0D8h
.text:00000000000040F0 n               = qword ptr -0D0h
.text:00000000000040F0 var_C8          = qword ptr -0C8h
.text:00000000000040F0 ps              = qword ptr -0C0h
.text:00000000000040F0 var_B8          = qword ptr -0B8h
.text:00000000000040F0 var_B0          = qword ptr -0B0h
.text:00000000000040F0 var_A8          = qword ptr -0A8h
.text:00000000000040F0 s2              = qword ptr -0A0h
.text:00000000000040F0 var_98          = qword ptr -98h
.text:00000000000040F0 var_90          = qword ptr -90h
.text:00000000000040F0 var_88          = qword ptr -88h
.text:00000000000040F0 var_80          = qword ptr -80h
.text:00000000000040F0 var_78          = qword ptr -78h
.text:00000000000040F0 var_70          = dword ptr -70h
.text:00000000000040F0 var_6C          = byte ptr -6Ch
.text:00000000000040F0 var_6B          = byte ptr -6Bh
.text:00000000000040F0 var_6A          = byte ptr -6Ah
.text:00000000000040F0 var_69          = byte ptr -69h
.text:00000000000040F0 var_68          = qword ptr -68h
.text:00000000000040F0 var_60          = qword ptr -60h
.text:00000000000040F0 wc              = dword ptr -4Ch
.text:00000000000040F0 var_48          = qword ptr -48h
.text:00000000000040F0 var_40          = qword ptr -40h
.text:00000000000040F0 arg_0           = qword ptr  8
.text:00000000000040F0 arg_8           = qword ptr  10h
.text:00000000000040F0 arg_10          = qword ptr  18h
.text:00000000000040F0
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 push    r15
.text:00000000000040F2                 push    r14
.text:00000000000040F4                 mov     r15d, r8d
.text:00000000000040F7                 push    r13
.text:00000000000040F9                 push    r12
.text:00000000000040FB                 mov     r14, rdi
.text:00000000000040FE                 push    rbp
.text:00000000000040FF                 push    rbx
.text:0000000000004100                 mov     ebx, r9d
.text:0000000000004103                 mov     r13, rsi
.text:0000000000004106                 mov     rbp, rcx
.text:0000000000004109                 and     ebx, 2
.text:000000000000410C                 sub     rsp, 0B8h
.text:0000000000004113                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000411B                 mov     [rsp+0E8h+s], rdx
.text:0000000000004120                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000004125                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000412A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000412F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004137                 mov     [rsp+0E8h+var_80], rax
.text:000000000000413C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004144                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004149                 mov     rax, fs:28h
.text:0000000000004152                 mov     [rsp+0E8h+var_40], rax
.text:000000000000415A                 xor     eax, eax
.text:000000000000415C                 call    ___ctype_get_mb_cur_max
.text:0000000000004161                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004165                 mov     [rsp+0E8h+var_90], rax
.text:000000000000416A                 ja      def_4181        ; jumptable 00000000000121F1 default case
.text:0000000000004170                 lea     rcx, jpt_4181
.text:0000000000004177                 mov     edx, r15d
.text:000000000000417A                 movsxd  rax, ds:(jpt_4181 - 7980h)[rcx+rdx*4]
.text:000000000000417E                 add     rax, rcx
.text:0000000000004181                 jmp     rax             ; switch jump
.text:0000000000004183 ; ---------------------------------------------------------------------------
.text:0000000000004183
.text:0000000000004183 loc_4183:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004183                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000004183                                         ; DATA XREF: ...
.text:0000000000004183                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000004188                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000418D                 xor     r12d, r12d
.text:0000000000004190                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004199                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000419E                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000041A3
.text:00000000000041A3 loc_41A3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000041A3                 lea     rax, asc_7925   ; "'"
.text:00000000000041AA                 mov     [rsp+0E8h+n], 1
.text:00000000000041B3                 xor     r15d, r15d
.text:00000000000041B6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000041BE                 mov     [rsp+0E8h+s2], rax
.text:00000000000041C3
.text:00000000000041C3 loc_41C3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000041C3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000041C3                 xor     r11d, r11d
.text:00000000000041C6                 mov     rax, rbp
.text:00000000000041C9                 mov     r8d, r12d
.text:00000000000041CC                 mov     rbp, r11
.text:00000000000041CF                 mov     r11, rax
.text:00000000000041D2                 nop     word ptr [rax+rax+00h]
.text:00000000000041D8
.text:00000000000041D8 loc_41D8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000041D8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000041D8                 cmp     r11, rbp
.text:00000000000041DB                 setnz   r12b
.text:00000000000041DF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000041E3                 jnz     short loc_41F2
.text:00000000000041E5                 mov     rax, [rsp+0E8h+s]
.text:00000000000041EA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000041EE                 setnz   r12b
.text:00000000000041F2
.text:00000000000041F2 loc_41F2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:00000000000041F2                 test    r12b, r12b
.text:00000000000041F5                 jz      loc_4850
.text:00000000000041FB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004200                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004205                 lea     r9, [rdi+rbp]
.text:0000000000004209                 setnz   al
.text:000000000000420C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004210                 mov     r10d, eax
.text:0000000000004213                 jz      loc_42C0
.text:0000000000004219                 mov     rax, [rsp+0E8h+n]
.text:000000000000421E                 test    rax, rax
.text:0000000000004221                 jz      loc_4650
.text:0000000000004227                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000422B                 lea     rbx, [rbp+rax+0]
.text:0000000000004230                 jnz     short loc_4260
.text:0000000000004232                 cmp     rax, 1
.text:0000000000004236                 jbe     short loc_4260
.text:0000000000004238                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000423D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004242                 mov     [rsp+0E8h+ps], r9
.text:0000000000004247                 call    _strlen
.text:000000000000424C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004252                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004258                 mov     r11, rax
.text:000000000000425B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004260                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004260                 cmp     rbx, r11
.text:0000000000004263                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004268                 ja      loc_4820
.text:000000000000426E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004273                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004278                 mov     rdi, r9         ; s1
.text:000000000000427B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004280                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004285                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000428A                 call    _memcmp
.text:000000000000428F                 test    eax, eax
.text:0000000000004291                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004296                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000429C                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000042A1                 jnz     loc_4820
.text:00000000000042A7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000042AC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000042B2                 jnz     loc_5235
.text:00000000000042B8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000042C0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000042C0                 movzx   ebx, byte ptr [r9]
.text:00000000000042C4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000042C7                 ja      def_42DE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000042CD                 lea     rcx, jpt_42DE
.text:00000000000042D4                 movzx   edx, bl
.text:00000000000042D7                 movsxd  rax, ds:(jpt_42DE - 79ACh)[rcx+rdx*4]
.text:00000000000042DB                 add     rax, rcx
.text:00000000000042DE                 jmp     rax             ; switch jump
.text:00000000000042E0 ; ---------------------------------------------------------------------------
.text:00000000000042E0
.text:00000000000042E0 loc_42E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000042E0                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000042E0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000042E3
.text:00000000000042E3 loc_42E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000042E3                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:00000000000042E3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000042E7                 setnz   al
.text:00000000000042EA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000042EE                 jnz     short loc_42FC
.text:00000000000042F0                 mov     rax, [rsp+0E8h+s]
.text:00000000000042F5                 cmp     byte ptr [rax+1], 0
.text:00000000000042F9                 setnz   al
.text:00000000000042FC
.text:00000000000042FC loc_42FC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000042FC                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004301                 setz    dl
.text:0000000000004304                 test    al, al
.text:0000000000004306                 jz      loc_4558
.text:000000000000430C
.text:000000000000430C loc_430C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000430C                 xor     r12d, r12d
.text:000000000000430F                 xor     eax, eax
.text:0000000000004311                 nop     dword ptr [rax+00000000h]
.text:0000000000004318
.text:0000000000004318 loc_4318:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000004318                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000004318                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000431D                 jnz     loc_4432
.text:0000000000004323                 test    dl, dl
.text:0000000000004325                 jnz     loc_4432
.text:000000000000432B
.text:000000000000432B loc_432B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000432B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004330                 test    rsi, rsi
.text:0000000000004333                 jz      short loc_4349
.text:0000000000004335                 mov     edx, ebx
.text:0000000000004337                 shr     dl, 5
.text:000000000000433A                 movzx   edx, dl
.text:000000000000433D                 mov     edx, [rsi+rdx*4]
.text:0000000000004340                 bt      edx, ebx
.text:0000000000004343                 jb      loc_4493
.text:0000000000004349
.text:0000000000004349 loc_4349:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004349                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004349                 test    r10b, r10b
.text:000000000000434C                 jnz     loc_4493
.text:0000000000004352                 xor     eax, 1
.text:0000000000004355                 add     rbp, 1
.text:0000000000004359                 and     eax, r8d
.text:000000000000435C
.text:000000000000435C loc_435C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000435C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000435C                 test    al, al
.text:000000000000435E                 jz      short loc_4380
.text:0000000000004360                 cmp     r13, r15
.text:0000000000004363                 jbe     short loc_436A
.text:0000000000004365                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000436A
.text:000000000000436A loc_436A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000436A                 lea     rax, [r15+1]
.text:000000000000436E                 cmp     r13, rax
.text:0000000000004371                 jbe     short loc_4379
.text:0000000000004373                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004379
.text:0000000000004379 loc_4379:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004379                 add     r15, 2
.text:000000000000437D                 xor     r8d, r8d
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004380                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004380                 cmp     r15, r13
.text:0000000000004383                 jnb     short loc_4389
.text:0000000000004385                 mov     [r14+r15], bl
.text:0000000000004389
.text:0000000000004389 loc_4389:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004389                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000438E                 add     r15, 1
.text:0000000000004392                 mov     eax, 0
.text:0000000000004397                 test    r12b, r12b
.text:000000000000439A                 cmovz   edi, eax
.text:000000000000439D                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000043A2                 jmp     loc_41D8
.text:00000000000043A2 ; ---------------------------------------------------------------------------
.text:00000000000043A7                 align 10h
.text:00000000000043B0
.text:00000000000043B0 loc_43B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000043B0                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000043B0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000043B3
.text:00000000000043B3 loc_43B3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000043B3                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:00000000000043B3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000043B7                 cmp     eax, 2
.text:00000000000043BA                 jz      loc_4978
.text:00000000000043C0                 cmp     eax, 5
.text:00000000000043C3                 jz      loc_4938
.text:00000000000043C9                 cmp     eax, 2
.text:00000000000043CC                 mov     ebx, 3Fh ; '?'
.text:00000000000043D1                 setz    dl
.text:00000000000043D4                 xor     r12d, r12d
.text:00000000000043D7                 xor     eax, eax
.text:00000000000043D9                 jmp     loc_4318
.text:00000000000043D9 ; ---------------------------------------------------------------------------
.text:00000000000043DE                 align 20h
.text:00000000000043E0
.text:00000000000043E0 loc_43E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000043E0                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000043E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000043E3
.text:00000000000043E3 loc_43E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000043E3                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:00000000000043E3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000043E8                 jz      loc_48F0
.text:00000000000043EE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000043F3                 xor     edx, edx
.text:00000000000043F5                 xor     eax, eax
.text:00000000000043F7                 mov     ebx, 27h ; '''
.text:00000000000043FC                 jmp     loc_4318
.text:00000000000043FC ; ---------------------------------------------------------------------------
.text:0000000000004401                 align 8
.text:0000000000004408
.text:0000000000004408 loc_4408:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004408                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004408                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000440D                 mov     ebx, 74h ; 't'
.text:0000000000004412
.text:0000000000004412 loc_4412:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000004412                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000004412                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004417                 setz    al
.text:000000000000441A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000441E                 jnz     loc_456E
.text:0000000000004424
.text:0000000000004424 loc_4424:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004424                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004424                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004429                 jnz     short loc_4490
.text:000000000000442B
.text:000000000000442B loc_442B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000442B                 mov     ebx, edx
.text:000000000000442D                 xor     r12d, r12d
.text:0000000000004430                 xor     eax, eax
.text:0000000000004432
.text:0000000000004432 loc_4432:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004432                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004432                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004437                 jnz     loc_432B
.text:000000000000443D                 jmp     loc_4349
.text:000000000000443D ; ---------------------------------------------------------------------------
.text:0000000000004442                 align 8
.text:0000000000004448
.text:0000000000004448 loc_4448:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004448                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004448                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000444D                 mov     ebx, 62h ; 'b'
.text:0000000000004452                 jmp     short loc_4424
.text:0000000000004452 ; ---------------------------------------------------------------------------
.text:0000000000004454                 align 8
.text:0000000000004458
.text:0000000000004458 loc_4458:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004458                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004458                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000445D                 jz      loc_4830
.text:0000000000004463                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004468                 jz      loc_4680
.text:000000000000446E
.text:000000000000446E loc_446E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000446E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004473                 jz      loc_4680
.text:0000000000004479                 cmp     [rsp+0E8h+n], 0
.text:000000000000447F                 jnz     loc_483B
.text:0000000000004485                 mov     ebx, 5Ch ; '\'
.text:000000000000448A                 nop     word ptr [rax+rax+00h]
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004490                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004490                 xor     r12d, r12d
.text:0000000000004493
.text:0000000000004493 loc_4493:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004493                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004493                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004498                 setz    dl
.text:000000000000449B                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000044A0                 mov     eax, edx
.text:00000000000044A2                 jnz     loc_4CF8
.text:00000000000044A8                 mov     eax, r8d
.text:00000000000044AB                 xor     eax, 1
.text:00000000000044AE                 and     al, dl
.text:00000000000044B0                 jz      short loc_44E1
.text:00000000000044B2                 cmp     r13, r15
.text:00000000000044B5                 jbe     short loc_44BC
.text:00000000000044B7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000044BC
.text:00000000000044BC loc_44BC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000044BC                 lea     rdx, [r15+1]
.text:00000000000044C0                 cmp     r13, rdx
.text:00000000000044C3                 jbe     short loc_44CB
.text:00000000000044C5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000044CB
.text:00000000000044CB loc_44CB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000044CB                 lea     rdx, [r15+2]
.text:00000000000044CF                 cmp     r13, rdx
.text:00000000000044D2                 jbe     short loc_44DA
.text:00000000000044D4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000044DA
.text:00000000000044DA loc_44DA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000044DA                 add     r15, 3
.text:00000000000044DE                 mov     r8d, eax
.text:00000000000044E1
.text:00000000000044E1 loc_44E1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000044E1                 cmp     r13, r15
.text:00000000000044E4                 jbe     short loc_44EB
.text:00000000000044E6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000044EB
.text:00000000000044EB loc_44EB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000044EB                 add     r15, 1
.text:00000000000044EF                 add     rbp, 1
.text:00000000000044F3                 jmp     loc_4380
.text:00000000000044F3 ; ---------------------------------------------------------------------------
.text:00000000000044F8                 align 20h
.text:0000000000004500
.text:0000000000004500 loc_4500:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004500                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004500                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004505                 jnz     loc_46D3
.text:000000000000450B                 xor     edx, edx
.text:000000000000450D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004512                 jz      loc_442B
.text:0000000000004518                 add     rbp, 1
.text:000000000000451C                 jmp     loc_41D8
.text:000000000000451C ; ---------------------------------------------------------------------------
.text:0000000000004521                 align 8
.text:0000000000004528
.text:0000000000004528 loc_4528:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004528                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004528                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000452D                 setz    dl
.text:0000000000004530                 xor     eax, eax
.text:0000000000004532                 jmp     loc_4318
.text:0000000000004532 ; ---------------------------------------------------------------------------
.text:0000000000004537                 align 20h
.text:0000000000004540
.text:0000000000004540 loc_4540:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004540                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004540                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004545                 mov     ebx, 61h ; 'a'
.text:000000000000454A                 jmp     loc_4424
.text:000000000000454A ; ---------------------------------------------------------------------------
.text:000000000000454F                 align 10h
.text:0000000000004550
.text:0000000000004550 loc_4550:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004550                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004550                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004555                 setz    dl
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004558                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004558                 test    rbp, rbp
.text:000000000000455B                 jnz     loc_430C
.text:0000000000004561
.text:0000000000004561 loc_4561:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004561                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004561                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004566                 and     al, dl
.text:0000000000004568                 jz      loc_4318
.text:000000000000456E
.text:000000000000456E loc_456E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000456E                 mov     rbp, r11
.text:0000000000004571                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004579                 jmp     loc_4C79
.text:0000000000004579 ; ---------------------------------------------------------------------------
.text:000000000000457E                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004580                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004580                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004585                 setz    dl
.text:0000000000004588                 xor     r12d, r12d
.text:000000000000458B                 jmp     short loc_4561
.text:000000000000458B ; ---------------------------------------------------------------------------
.text:000000000000458D                 align 10h
.text:0000000000004590
.text:0000000000004590 loc_4590:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004590                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:0000000000004590                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004595                 mov     ebx, 20h ; ' '
.text:000000000000459A                 setz    dl
.text:000000000000459D                 jmp     short loc_4561
.text:000000000000459D ; ---------------------------------------------------------------------------
.text:000000000000459F                 align 20h
.text:00000000000045A0
.text:00000000000045A0 loc_45A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045A0                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:00000000000045A0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000045A5                 mov     ebx, 72h ; 'r'
.text:00000000000045AA                 jmp     loc_4412
.text:00000000000045AA ; ---------------------------------------------------------------------------
.text:00000000000045AF                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045B0                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:00000000000045B0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000045B5                 mov     ebx, 66h ; 'f'
.text:00000000000045BA                 jmp     loc_4424
.text:00000000000045BA ; ---------------------------------------------------------------------------
.text:00000000000045BF                 align 20h
.text:00000000000045C0
.text:00000000000045C0 loc_45C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045C0                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:00000000000045C0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000045C5                 mov     ebx, 76h ; 'v'
.text:00000000000045CA                 jmp     loc_4424
.text:00000000000045CA ; ---------------------------------------------------------------------------
.text:00000000000045CF                 align 10h
.text:00000000000045D0
.text:00000000000045D0 loc_45D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000045D0                                         ; DATA XREF: .rodata:jpt_42DE↓o
.text:00000000000045D0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000045D5                 mov     ebx, 6Eh ; 'n'
.text:00000000000045DA                 jmp     loc_4412
.text:00000000000045DA ; ---------------------------------------------------------------------------
.text:00000000000045DF                 align 20h
.text:00000000000045E0
.text:00000000000045E0 def_466A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000045E0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000045E0                                         ; DATA XREF: ...
.text:00000000000045E0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000045E3                 nop     dword ptr [rax+rax+00h]
.text:00000000000045E8
.text:00000000000045E8 def_42DE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000045E8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000045E8                                         ; DATA XREF: ...
.text:00000000000045E8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000045EE                 jnz     loc_4998
.text:00000000000045F4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000045F9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000045FE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004603                 call    ___ctype_b_loc
.text:0000000000004608                 mov     rcx, [rax]
.text:000000000000460B                 movzx   edx, bl
.text:000000000000460E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004614                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000461A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000461F                 mov     edi, 1
.text:0000000000004624                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004628                 and     ax, 4000h
.text:000000000000462C                 setnz   r12b
.text:0000000000004630                 setz    al
.text:0000000000004633                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004637
.text:0000000000004637 loc_4637:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004637                 test    al, al
.text:0000000000004639                 jnz     loc_4FD1
.text:000000000000463F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004644                 setz    dl
.text:0000000000004647                 jmp     loc_4318
.text:0000000000004647 ; ---------------------------------------------------------------------------
.text:000000000000464C                 align 10h
.text:0000000000004650
.text:0000000000004650 loc_4650:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004650                 movzx   ebx, byte ptr [r9]
.text:0000000000004654                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004657                 ja      short def_466A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004659                 lea     rcx, jpt_466A
.text:0000000000004660                 movzx   edx, bl
.text:0000000000004663                 movsxd  rax, ds:(jpt_466A - 7BA8h)[rcx+rdx*4]
.text:0000000000004667                 add     rax, rcx
.text:000000000000466A                 jmp     rax             ; switch jump
.text:000000000000466A ; ---------------------------------------------------------------------------
.text:000000000000466C                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004670                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:0000000000004670                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004673                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004678                 jnz     loc_446E
.text:000000000000467E                 xchg    ax, ax
.text:0000000000004680
.text:0000000000004680 loc_4680:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004680                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004680                 mov     edx, 5Ch ; '\'
.text:0000000000004685                 mov     ebx, 5Ch ; '\'
.text:000000000000468A                 jmp     loc_4424
.text:000000000000468A ; ---------------------------------------------------------------------------
.text:000000000000468F                 align 10h
.text:0000000000004690
.text:0000000000004690 loc_4690:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004690                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:0000000000004690                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004695                 xor     r10d, r10d
.text:0000000000004698                 mov     ebx, 66h ; 'f'
.text:000000000000469D                 jmp     loc_4424
.text:000000000000469D ; ---------------------------------------------------------------------------
.text:00000000000046A2                 align 8
.text:00000000000046A8
.text:00000000000046A8 loc_46A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000046A8                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000046A8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000046AD                 xor     r10d, r10d
.text:00000000000046B0                 mov     ebx, 6Eh ; 'n'
.text:00000000000046B5                 jmp     loc_4412
.text:00000000000046B5 ; ---------------------------------------------------------------------------
.text:00000000000046BA                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000046C0                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000046C0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000046C5                 jmp     loc_4490
.text:00000000000046C5 ; ---------------------------------------------------------------------------
.text:00000000000046CA                 align 10h
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000046D0                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000046D0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000046D3
.text:00000000000046D3 loc_46D3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000046D3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000046D8                 setz    dl
.text:00000000000046DB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000046E0                 jnz     loc_527A
.text:00000000000046E6                 mov     eax, r8d
.text:00000000000046E9                 mov     rcx, r15
.text:00000000000046EC                 xor     eax, 1
.text:00000000000046EF                 and     al, dl
.text:00000000000046F1                 jz      short loc_4720
.text:00000000000046F3                 cmp     r13, r15
.text:00000000000046F6                 jbe     short loc_46FD
.text:00000000000046F8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000046FD
.text:00000000000046FD loc_46FD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000046FD                 lea     rcx, [r15+1]
.text:0000000000004701                 cmp     r13, rcx
.text:0000000000004704                 jbe     short loc_470C
.text:0000000000004706                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000470C
.text:000000000000470C loc_470C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000470C                 lea     rcx, [r15+2]
.text:0000000000004710                 cmp     r13, rcx
.text:0000000000004713                 ja      loc_4D49
.text:0000000000004719
.text:0000000000004719 loc_4719:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004719                 lea     rcx, [r15+3]
.text:000000000000471D                 mov     r8d, eax
.text:0000000000004720
.text:0000000000004720 loc_4720:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004720                 cmp     r13, rcx
.text:0000000000004723                 jbe     short loc_472A
.text:0000000000004725                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000472A
.text:000000000000472A loc_472A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000472A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000472F                 lea     r15, [rcx+1]
.text:0000000000004733                 jz      loc_4D39
.text:0000000000004739                 lea     rax, [rbp+1]
.text:000000000000473D                 cmp     rax, r11
.text:0000000000004740                 jnb     short loc_475B
.text:0000000000004742                 mov     rax, [rsp+0E8h+s]
.text:0000000000004747                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000474C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004750                 sub     eax, 30h ; '0'
.text:0000000000004753                 cmp     al, 9
.text:0000000000004755                 jbe     loc_4F89
.text:000000000000475B
.text:000000000000475B loc_475B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000475B                 mov     eax, r12d
.text:000000000000475E                 mov     ebx, 30h ; '0'
.text:0000000000004763                 xor     r12d, r12d
.text:0000000000004766                 jmp     loc_4318
.text:0000000000004766 ; ---------------------------------------------------------------------------
.text:000000000000476B                 align 10h
.text:0000000000004770
.text:0000000000004770 loc_4770:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004770                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:0000000000004770                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004775                 mov     r12d, r10d
.text:0000000000004778                 setz    dl
.text:000000000000477B                 xor     r10d, r10d
.text:000000000000477E                 xor     eax, eax
.text:0000000000004780                 jmp     loc_4318
.text:0000000000004780 ; ---------------------------------------------------------------------------
.text:0000000000004785                 align 8
.text:0000000000004788
.text:0000000000004788 loc_4788:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004788                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:0000000000004788                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000478D                 setz    dl
.text:0000000000004790                 xor     r10d, r10d
.text:0000000000004793                 jmp     loc_4558
.text:0000000000004793 ; ---------------------------------------------------------------------------
.text:0000000000004798                 align 20h
.text:00000000000047A0
.text:00000000000047A0 loc_47A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047A0                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000047A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000047A5                 setz    dl
.text:00000000000047A8                 xor     r10d, r10d
.text:00000000000047AB                 xor     r12d, r12d
.text:00000000000047AE                 jmp     loc_4561
.text:00000000000047AE ; ---------------------------------------------------------------------------
.text:00000000000047B3                 align 8
.text:00000000000047B8
.text:00000000000047B8 loc_47B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047B8                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000047B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000047BD                 mov     r12d, r10d
.text:00000000000047C0                 mov     ebx, 20h ; ' '
.text:00000000000047C5                 setz    dl
.text:00000000000047C8                 xor     r10d, r10d
.text:00000000000047CB                 jmp     loc_4561
.text:00000000000047D0 ; ---------------------------------------------------------------------------
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047D0                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000047D0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000047D5                 xor     r10d, r10d
.text:00000000000047D8                 mov     ebx, 72h ; 'r'
.text:00000000000047DD                 jmp     loc_4412
.text:00000000000047DD ; ---------------------------------------------------------------------------
.text:00000000000047E2                 align 8
.text:00000000000047E8
.text:00000000000047E8 loc_47E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047E8                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000047E8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000047ED                 jmp     loc_4490
.text:00000000000047ED ; ---------------------------------------------------------------------------
.text:00000000000047F2                 align 8
.text:00000000000047F8
.text:00000000000047F8 loc_47F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000047F8                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:00000000000047F8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000047FD                 xor     r10d, r10d
.text:0000000000004800                 mov     ebx, 74h ; 't'
.text:0000000000004805                 jmp     loc_4412
.text:0000000000004805 ; ---------------------------------------------------------------------------
.text:000000000000480A                 align 10h
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004810                                         ; DATA XREF: .rodata:jpt_466A↓o
.text:0000000000004810                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000004815                 jmp     loc_4490
.text:0000000000004815 ; ---------------------------------------------------------------------------
.text:000000000000481A                 align 20h
.text:0000000000004820
.text:0000000000004820 loc_4820:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000004820                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000004820                 xor     r10d, r10d
.text:0000000000004823                 jmp     loc_42C0
.text:0000000000004823 ; ---------------------------------------------------------------------------
.text:0000000000004828                 align 10h
.text:0000000000004830
.text:0000000000004830 loc_4830:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000004830                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004835                 jnz     loc_51A0
.text:000000000000483B
.text:000000000000483B loc_483B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000483B                 add     rbp, 1
.text:000000000000483F                 mov     eax, r8d
.text:0000000000004842                 xor     r12d, r12d
.text:0000000000004845                 mov     ebx, 5Ch ; '\'
.text:000000000000484A                 jmp     loc_435C
.text:000000000000484A ; ---------------------------------------------------------------------------
.text:000000000000484F                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000004850                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004855                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000485A                 mov     r12d, r8d
.text:000000000000485D                 mov     rbp, r11
.text:0000000000004860                 setz    dl
.text:0000000000004863                 mov     eax, ebx
.text:0000000000004865                 test    r15, r15
.text:0000000000004868                 setz    cl
.text:000000000000486B                 and     eax, edx
.text:000000000000486D                 and     al, cl
.text:000000000000486F                 jnz     loc_52D6
.text:0000000000004875                 mov     eax, ebx
.text:0000000000004877                 xor     eax, 1
.text:000000000000487A                 and     dl, al
.text:000000000000487C                 jz      loc_51EC
.text:0000000000004882                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000004887                 jz      loc_51EA
.text:000000000000488D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000004892                 jnz     loc_528D
.text:0000000000004898                 test    r13, r13
.text:000000000000489B                 setz    al
.text:000000000000489E                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000048A4                 setnz   dl
.text:00000000000048A7                 and     al, dl
.text:00000000000048A9                 jz      loc_52CC
.text:00000000000048AF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000048B4
.text:00000000000048B4 loc_48B4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000048B4                 lea     rbx, asc_7925   ; "'"
.text:00000000000048BB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000048BF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000048C7                 mov     r15d, 1
.text:00000000000048CD                 mov     [rsp+0E8h+n], 1
.text:00000000000048D6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000048DB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000048E0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000048E4                 jmp     loc_41C3
.text:00000000000048E4 ; ---------------------------------------------------------------------------
.text:00000000000048E9                 align 10h
.text:00000000000048F0
.text:00000000000048F0 loc_48F0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000048F0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000048F5                 jnz     loc_51A0
.text:00000000000048FB                 test    r13, r13
.text:00000000000048FE                 jz      loc_4D00
.text:0000000000004904                 xor     edx, edx
.text:0000000000004906                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000490C                 jnz     loc_4D00
.text:0000000000004912
.text:0000000000004912 loc_4912:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000004912                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000004912                 mov     [rsp+0E8h+var_98], r13
.text:0000000000004917                 add     r15, 3
.text:000000000000491B                 xor     eax, eax
.text:000000000000491D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004922                 xor     r8d, r8d
.text:0000000000004925                 mov     r13, rdx
.text:0000000000004928                 mov     ebx, 27h ; '''
.text:000000000000492D                 jmp     loc_4349
.text:000000000000492D ; ---------------------------------------------------------------------------
.text:0000000000004932                 align 8
.text:0000000000004938
.text:0000000000004938 loc_4938:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000004938                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000493D                 jz      short loc_4960
.text:000000000000493F                 lea     rcx, [rbp+2]
.text:0000000000004943                 cmp     rcx, r11
.text:0000000000004946                 jnb     short loc_4960
.text:0000000000004948                 mov     rax, [rsp+0E8h+s]
.text:000000000000494D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000004952                 jz      loc_50E2
.text:0000000000004958                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000004960                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000004960                 xor     edx, edx
.text:0000000000004962                 xor     r12d, r12d
.text:0000000000004965                 xor     eax, eax
.text:0000000000004967                 mov     ebx, 3Fh ; '?'
.text:000000000000496C                 jmp     loc_4318
.text:000000000000496C ; ---------------------------------------------------------------------------
.text:0000000000004971                 align 8
.text:0000000000004978
.text:0000000000004978 loc_4978:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000004978                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000497D                 jnz     loc_51A0
.text:0000000000004983                 xor     r12d, r12d
.text:0000000000004986                 xor     eax, eax
.text:0000000000004988                 mov     ebx, 3Fh ; '?'
.text:000000000000498D                 jmp     loc_4349
.text:000000000000498D ; ---------------------------------------------------------------------------
.text:0000000000004992                 align 8
.text:0000000000004998
.text:0000000000004998 loc_4998:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000004998                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000049A0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000049A4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000049B0                 mov     [rsp+0E8h+ps], rax
.text:00000000000049B5                 jnz     short loc_49E4
.text:00000000000049B7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000049BC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000049C1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000049C6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000049CB                 call    _strlen
.text:00000000000049D0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000049D6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000049DC                 mov     r11, rax
.text:00000000000049DF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000049E4
.text:00000000000049E4 loc_49E4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000049E4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000049EC                 xor     ecx, ecx
.text:00000000000049EE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000049F2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000049F7                 mov     rbx, rcx
.text:00000000000049FA                 mov     [rsp+0E8h+var_60], r9
.text:0000000000004A02                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000004A07                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000004A0C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000004A14                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000004A19                 mov     [rsp+0E8h+var_78], r13
.text:0000000000004A1E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000004A23
.text:0000000000004A23 loc_4A23:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000004A23                 mov     rax, [rsp+0E8h+s]
.text:0000000000004A28                 lea     r14, [rbp+rbx+0]
.text:0000000000004A2D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000004A32                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000004A37                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000004A3C                 lea     r13, [rax+r14]
.text:0000000000004A40                 sub     rdx, r14
.text:0000000000004A43                 mov     rsi, r13
.text:0000000000004A46                 call    rpl_mbrtowc
.text:0000000000004A4B                 test    rax, rax
.text:0000000000004A4E                 mov     r15, rax
.text:0000000000004A51                 jz      short loc_4AA1
.text:0000000000004A53                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A57                 jz      loc_5075
.text:0000000000004A5D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004A61                 jz      loc_5001
.text:0000000000004A67                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A6C                 setz    al
.text:0000000000004A6F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004A73                 jnz     loc_4C10
.text:0000000000004A79
.text:0000000000004A79 loc_4A79:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000004A79                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000004A79                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000004A80                 call    _iswprint
.text:0000000000004A85                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000004A8A                 test    eax, eax
.text:0000000000004A8C                 mov     eax, 0
.text:0000000000004A91                 cmovz   r12d, eax
.text:0000000000004A95                 add     rbx, r15
.text:0000000000004A98                 call    _mbsinit
.text:0000000000004A9D                 test    eax, eax
.text:0000000000004A9F                 jz      short loc_4A23
.text:0000000000004AA1
.text:0000000000004AA1 loc_4AA1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000004AA1                 mov     edx, r12d
.text:0000000000004AA4                 mov     rdi, rbx
.text:0000000000004AA7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000004AAD                 xor     edx, 1
.text:0000000000004AB0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000004AB5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000004ABB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000004ABF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000004AC7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004ACC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004AD1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000004AD6
.text:0000000000004AD6 loc_4AD6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000004AD6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000004AD6                 cmp     rdi, 1
.text:0000000000004ADA                 jbe     loc_50DB
.text:0000000000004AE0
.text:0000000000004AE0 loc_4AE0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000004AE0                 mov     rcx, rdi
.text:0000000000004AE3                 xor     esi, esi
.text:0000000000004AE5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000004AEB                 add     rcx, rbp
.text:0000000000004AEE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004AF3                 jmp     loc_4BAE
.text:0000000000004AF3 ; ---------------------------------------------------------------------------
.text:0000000000004AF8                 align 20h
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000004B00                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004B05                 setz    al
.text:0000000000004B08                 test    r9b, r9b
.text:0000000000004B0B                 jnz     loc_4FC0
.text:0000000000004B11                 mov     esi, r8d
.text:0000000000004B14                 xor     esi, 1
.text:0000000000004B17                 and     al, sil
.text:0000000000004B1A                 jz      short loc_4B4B
.text:0000000000004B1C                 cmp     r13, r15
.text:0000000000004B1F                 jbe     short loc_4B26
.text:0000000000004B21                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004B26
.text:0000000000004B26 loc_4B26:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000004B26                 lea     rsi, [r15+1]
.text:0000000000004B2A                 cmp     r13, rsi
.text:0000000000004B2D                 jbe     short loc_4B35
.text:0000000000004B2F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004B35
.text:0000000000004B35 loc_4B35:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000004B35                 lea     rsi, [r15+2]
.text:0000000000004B39                 cmp     r13, rsi
.text:0000000000004B3C                 jbe     short loc_4B44
.text:0000000000004B3E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004B44
.text:0000000000004B44 loc_4B44:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000004B44                 add     r15, 3
.text:0000000000004B48                 mov     r8d, eax
.text:0000000000004B4B
.text:0000000000004B4B loc_4B4B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000004B4B                 cmp     r13, r15
.text:0000000000004B4E                 jbe     short loc_4B55
.text:0000000000004B50                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004B55
.text:0000000000004B55 loc_4B55:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000004B55                 lea     rax, [r15+1]
.text:0000000000004B59                 cmp     r13, rax
.text:0000000000004B5C                 jbe     short loc_4B6B
.text:0000000000004B5E                 mov     eax, ebx
.text:0000000000004B60                 shr     al, 6
.text:0000000000004B63                 add     eax, 30h ; '0'
.text:0000000000004B66                 mov     [r14+r15+1], al
.text:0000000000004B6B
.text:0000000000004B6B loc_4B6B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000004B6B                 lea     rax, [r15+2]
.text:0000000000004B6F                 cmp     r13, rax
.text:0000000000004B72                 jbe     short loc_4B84
.text:0000000000004B74                 mov     eax, ebx
.text:0000000000004B76                 shr     al, 3
.text:0000000000004B79                 and     eax, 7
.text:0000000000004B7C                 add     eax, 30h ; '0'
.text:0000000000004B7F                 mov     [r14+r15+2], al
.text:0000000000004B84
.text:0000000000004B84 loc_4B84:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000004B84                 and     ebx, 7
.text:0000000000004B87                 add     rbp, 1
.text:0000000000004B8B                 add     r15, 3
.text:0000000000004B8F                 add     ebx, 30h ; '0'
.text:0000000000004B92                 cmp     rbp, rcx
.text:0000000000004B95                 jnb     loc_4380
.text:0000000000004B9B                 mov     esi, edx
.text:0000000000004B9D
.text:0000000000004B9D loc_4B9D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000004B9D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000004B9D                 cmp     r13, r15
.text:0000000000004BA0                 jbe     short loc_4BA6
.text:0000000000004BA2                 mov     [r14+r15], bl
.text:0000000000004BA6
.text:0000000000004BA6 loc_4BA6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000004BA6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000004BAA                 add     r15, 1
.text:0000000000004BAE
.text:0000000000004BAE loc_4BAE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000004BAE                 test    dl, dl
.text:0000000000004BB0                 jnz     loc_4B00
.text:0000000000004BB6                 mov     eax, esi
.text:0000000000004BB8                 xor     eax, 1
.text:0000000000004BBB                 and     eax, r8d
.text:0000000000004BBE                 test    r10b, r10b
.text:0000000000004BC1                 jz      short loc_4BD1
.text:0000000000004BC3                 cmp     r13, r15
.text:0000000000004BC6                 jbe     short loc_4BCD
.text:0000000000004BC8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004BCD
.text:0000000000004BCD loc_4BCD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000004BCD                 add     r15, 1
.text:0000000000004BD1
.text:0000000000004BD1 loc_4BD1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000004BD1                 add     rbp, 1
.text:0000000000004BD5                 cmp     rbp, rcx
.text:0000000000004BD8                 jnb     loc_435C
.text:0000000000004BDE                 test    al, al
.text:0000000000004BE0                 jz      loc_4FDE
.text:0000000000004BE6                 cmp     r13, r15
.text:0000000000004BE9                 jbe     short loc_4BF0
.text:0000000000004BEB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004BF0
.text:0000000000004BF0 loc_4BF0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000004BF0                 lea     rax, [r15+1]
.text:0000000000004BF4                 cmp     r13, rax
.text:0000000000004BF7                 jbe     short loc_4BFF
.text:0000000000004BF9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004BFF
.text:0000000000004BFF loc_4BFF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000004BFF                 add     r15, 2
.text:0000000000004C03                 xor     r10d, r10d
.text:0000000000004C06                 xor     r8d, r8d
.text:0000000000004C09                 jmp     short loc_4B9D
.text:0000000000004C09 ; ---------------------------------------------------------------------------
.text:0000000000004C0B                 align 10h
.text:0000000000004C10
.text:0000000000004C10 loc_4C10:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000004C10                 cmp     r15, 1
.text:0000000000004C14                 jz      loc_4A79
.text:0000000000004C1A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000004C1F                 lea     rcx, [rdi+r15]
.text:0000000000004C23                 lea     rdx, [rdi+r14+1]
.text:0000000000004C28                 lea     r8, [rcx+r14]
.text:0000000000004C2C                 jmp     short loc_4C3D
.text:0000000000004C2C ; ---------------------------------------------------------------------------
.text:0000000000004C2E                 align 10h
.text:0000000000004C30
.text:0000000000004C30 loc_4C30:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000004C30                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000004C30                 add     rdx, 1
.text:0000000000004C34                 cmp     r8, rdx
.text:0000000000004C37                 jz      loc_4A79
.text:0000000000004C3D
.text:0000000000004C3D loc_4C3D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000004C3D                 movzx   ecx, byte ptr [rdx]
.text:0000000000004C40                 sub     ecx, 5Bh ; '['
.text:0000000000004C43                 cmp     cl, 21h ; '!'
.text:0000000000004C46                 ja      short loc_4C30
.text:0000000000004C48                 mov     esi, 1
.text:0000000000004C4D                 shl     rsi, cl
.text:0000000000004C50                 mov     rcx, rsi
.text:0000000000004C53                 mov     rsi, 20000002Bh
.text:0000000000004C5D                 test    rcx, rsi
.text:0000000000004C60                 jz      short loc_4C30
.text:0000000000004C62                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000004C67                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000004C6C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000004C71                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004C79
.text:0000000000004C79 loc_4C79:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000004C79                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000004C79                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004C7E                 jz      short loc_4C90
.text:0000000000004C80                 test    al, al
.text:0000000000004C82                 mov     eax, 4
.text:0000000000004C87                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000004C8C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000004C90
.text:0000000000004C90 loc_4C90:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000004C90                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000004C90                 sub     rsp, 8
.text:0000000000004C94                 mov     rcx, rbp
.text:0000000000004C97                 mov     rsi, r13
.text:0000000000004C9A                 push    [rsp+0F0h+var_88]
.text:0000000000004C9E                 push    [rsp+0F8h+var_80]
.text:0000000000004CA2                 mov     rdi, r14
.text:0000000000004CA5                 push    0
.text:0000000000004CA7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000004CAF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000004CB4                 mov     rdx, [rsp+108h+s]
.text:0000000000004CB9                 and     r9d, 0FFFFFFFDh
.text:0000000000004CBD                 call    quotearg_buffer_restyled
.text:0000000000004CC2                 add     rsp, 20h
.text:0000000000004CC6                 mov     r15, rax
.text:0000000000004CC9
.text:0000000000004CC9 loc_4CC9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000004CC9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000004CC9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000004CD1                 xor     rbx, fs:28h
.text:0000000000004CDA                 mov     rax, r15
.text:0000000000004CDD                 jnz     loc_52E3
.text:0000000000004CE3                 add     rsp, 0B8h
.text:0000000000004CEA                 pop     rbx
.text:0000000000004CEB                 pop     rbp
.text:0000000000004CEC                 pop     r12
.text:0000000000004CEE                 pop     r13
.text:0000000000004CF0                 pop     r14
.text:0000000000004CF2                 pop     r15
.text:0000000000004CF4                 retn
.text:0000000000004CF4 ; ---------------------------------------------------------------------------
.text:0000000000004CF5                 align 8
.text:0000000000004CF8
.text:0000000000004CF8 loc_4CF8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000004CF8                 mov     rbp, r11
.text:0000000000004CFB                 jmp     loc_4C79
.text:0000000000004D00 ; ---------------------------------------------------------------------------
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000004D00                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000004D00                 cmp     r13, r15
.text:0000000000004D03                 jbe     short loc_4D0A
.text:0000000000004D05                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004D0A
.text:0000000000004D0A loc_4D0A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000004D0A                 lea     rax, [r15+1]
.text:0000000000004D0E                 cmp     r13, rax
.text:0000000000004D11                 jbe     short loc_4D19
.text:0000000000004D13                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000004D19
.text:0000000000004D19 loc_4D19:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000004D19                 lea     rax, [r15+2]
.text:0000000000004D1D                 cmp     r13, rax
.text:0000000000004D20                 jbe     loc_5312
.text:0000000000004D26                 mov     rdx, r13
.text:0000000000004D29                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004D2F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000004D34                 jmp     loc_4912
.text:0000000000004D39 ; ---------------------------------------------------------------------------
.text:0000000000004D39
.text:0000000000004D39 loc_4D39:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000004D39                 mov     eax, r12d
.text:0000000000004D3C                 mov     ebx, 30h ; '0'
.text:0000000000004D41                 xor     r12d, r12d
.text:0000000000004D44                 jmp     loc_4349
.text:0000000000004D49 ; ---------------------------------------------------------------------------
.text:0000000000004D49
.text:0000000000004D49 loc_4D49:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000004D49                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004D4F                 jmp     loc_4719
.text:0000000000004D54 ; ---------------------------------------------------------------------------
.text:0000000000004D54
.text:0000000000004D54 loc_4D54:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004D54                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000004D54                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000004D56                 jnz     loc_4183        ; jumptable 00000000000121F1 case 1
.text:0000000000004D5C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004D61
.text:0000000000004D61 loc_4D61:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000004D61                 test    r13, r13
.text:0000000000004D64                 jnz     loc_52FA
.text:0000000000004D6A                 lea     rax, asc_7925   ; "'"
.text:0000000000004D71                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004D7A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004D7F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004D84                 xor     r12d, r12d
.text:0000000000004D87                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004D8C                 mov     [rsp+0E8h+n], 1
.text:0000000000004D95                 mov     [rsp+0E8h+s2], rax
.text:0000000000004D9A                 mov     r15d, 1
.text:0000000000004DA0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004DA8                 jmp     loc_41C3
.text:0000000000004DA8 ; ---------------------------------------------------------------------------
.text:0000000000004DAD                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004DB0                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000004DB0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000004DB2                 jnz     loc_51AD
.text:0000000000004DB8                 test    r13, r13
.text:0000000000004DBB                 jz      loc_4FE6
.text:0000000000004DC1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000004DC5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004DCA                 xor     r12d, r12d
.text:0000000000004DCD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004DD2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004DDB
.text:0000000000004DDB loc_4DDB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000004DDB                 lea     rax, unk_7923
.text:0000000000004DE2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004DE7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004DEC                 mov     [rsp+0E8h+n], 1
.text:0000000000004DF5                 mov     r15d, 1
.text:0000000000004DFB                 mov     [rsp+0E8h+s2], rax
.text:0000000000004E00                 jmp     loc_41C3
.text:0000000000004E05 ; ---------------------------------------------------------------------------
.text:0000000000004E05
.text:0000000000004E05 loc_4E05:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004E05                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000004E05                 lea     rax, unk_7923   ; jumptable 00000000000121F1 case 6
.text:0000000000004E0C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004E11                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004E16                 xor     r12d, r12d
.text:0000000000004E19                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004E22                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004E27                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004E2C                 mov     [rsp+0E8h+n], 1
.text:0000000000004E35                 xor     r15d, r15d
.text:0000000000004E38                 mov     [rsp+0E8h+s2], rax
.text:0000000000004E3D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000004E45                 jmp     loc_41C3
.text:0000000000004E4A ; ---------------------------------------------------------------------------
.text:0000000000004E4A
.text:0000000000004E4A loc_4E4A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004E4A                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000004E4A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000004E4F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004E54                 xor     r12d, r12d
.text:0000000000004E57                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004E60                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004E65                 xor     r15d, r15d
.text:0000000000004E68                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004E6D                 mov     [rsp+0E8h+n], 0
.text:0000000000004E76                 mov     [rsp+0E8h+s2], 0
.text:0000000000004E7F                 jmp     loc_41C3
.text:0000000000004E84 ; ---------------------------------------------------------------------------
.text:0000000000004E84
.text:0000000000004E84 loc_4E84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004E84                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000004E84                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000004E89                 jz      short loc_4EE1
.text:0000000000004E8B                 lea     rsi, asc_7927   ; "`"
.text:0000000000004E92                 xor     edi, edi        ; domainname
.text:0000000000004E94                 mov     edx, 5          ; category
.text:0000000000004E99                 call    _dcgettext
.text:0000000000004E9E                 mov     rcx, rax
.text:0000000000004EA1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000004EA6                 lea     rax, asc_7927   ; "`"
.text:0000000000004EAD                 cmp     rcx, rax
.text:0000000000004EB0                 jz      loc_524E
.text:0000000000004EB6
.text:0000000000004EB6 loc_4EB6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000004EB6                 lea     rsi, asc_7925   ; "'"
.text:0000000000004EBD                 xor     edi, edi        ; domainname
.text:0000000000004EBF                 mov     edx, 5          ; category
.text:0000000000004EC4                 call    _dcgettext
.text:0000000000004EC9                 mov     rcx, rax
.text:0000000000004ECC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004ED1                 lea     rax, asc_7925   ; "'"
.text:0000000000004ED8                 cmp     rcx, rax
.text:0000000000004EDB                 jz      loc_5264
.text:0000000000004EE1
.text:0000000000004EE1 loc_4EE1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000004EE1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000004EE1                 xor     r15d, r15d
.text:0000000000004EE4                 test    ebx, ebx
.text:0000000000004EE6                 jz      loc_50AD
.text:0000000000004EEC
.text:0000000000004EEC loc_4EEC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000004EEC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000004EEC                 test    ebx, ebx
.text:0000000000004EEE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000004EF3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000004EF8                 xor     r12d, r12d
.text:0000000000004EFB                 mov     rdi, rbx        ; s
.text:0000000000004EFE                 call    _strlen
.text:0000000000004F03                 mov     [rsp+0E8h+s2], rbx
.text:0000000000004F08                 mov     [rsp+0E8h+n], rax
.text:0000000000004F0D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004F12                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F17                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F20                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F25                 jmp     loc_41C3
.text:0000000000004F2A ; ---------------------------------------------------------------------------
.text:0000000000004F2A
.text:0000000000004F2A loc_4F2A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F2A                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000004F2A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000004F2F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F34                 xor     r12d, r12d
.text:0000000000004F37                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F40                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000004F45                 xor     r15d, r15d
.text:0000000000004F48                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000004F4D                 mov     [rsp+0E8h+n], 0
.text:0000000000004F56                 mov     [rsp+0E8h+s2], 0
.text:0000000000004F5F                 jmp     loc_41C3
.text:0000000000004F64 ; ---------------------------------------------------------------------------
.text:0000000000004F64
.text:0000000000004F64 loc_4F64:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000004F64                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000004F64                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000004F69                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004F6E                 xor     r12d, r12d
.text:0000000000004F71                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004F7A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000004F7F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000004F84                 jmp     loc_41A3
.text:0000000000004F89 ; ---------------------------------------------------------------------------
.text:0000000000004F89
.text:0000000000004F89 loc_4F89:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000004F89                 cmp     r13, r15
.text:0000000000004F8C                 jbe     short loc_4F93
.text:0000000000004F8E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000004F93
.text:0000000000004F93 loc_4F93:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000004F93                 lea     rax, [rcx+2]
.text:0000000000004F97                 cmp     r13, rax
.text:0000000000004F9A                 jbe     short loc_4FA2
.text:0000000000004F9C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000004FA2
.text:0000000000004FA2 loc_4FA2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000004FA2                 mov     eax, r12d
.text:0000000000004FA5                 lea     r15, [rcx+3]
.text:0000000000004FA9                 xor     r12d, r12d
.text:0000000000004FAC                 mov     ebx, 30h ; '0'
.text:0000000000004FB1                 jmp     loc_4318
.text:0000000000004FB1 ; ---------------------------------------------------------------------------
.text:0000000000004FB6                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 loc_4FC0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000004FC0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000004FC5                 mov     rbp, r11
.text:0000000000004FC8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000004FCC                 jmp     loc_4C79
.text:0000000000004FD1 ; ---------------------------------------------------------------------------
.text:0000000000004FD1
.text:0000000000004FD1 loc_4FD1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000004FD1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000004FD6                 xor     r12d, r12d
.text:0000000000004FD9                 jmp     loc_4AE0
.text:0000000000004FDE ; ---------------------------------------------------------------------------
.text:0000000000004FDE
.text:0000000000004FDE loc_4FDE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000004FDE                 xor     r10d, r10d
.text:0000000000004FE1                 jmp     loc_4B9D
.text:0000000000004FE6 ; ---------------------------------------------------------------------------
.text:0000000000004FE6
.text:0000000000004FE6 loc_4FE6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000004FE6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000004FEF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000004FF4                 xor     r12d, r12d
.text:0000000000004FF7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000004FFC                 jmp     loc_4DDB
.text:0000000000005001 ; ---------------------------------------------------------------------------
.text:0000000000005001
.text:0000000000005001 loc_5001:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000005001                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005006                 mov     rsi, r14
.text:0000000000005009                 mov     rcx, r13
.text:000000000000500C                 mov     rax, rbx
.text:000000000000500F                 mov     rdi, rbx
.text:0000000000005012                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000005018                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000501D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000005025                 cmp     rsi, r11
.text:0000000000005028                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000502E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005036                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000503B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005040                 jnb     short loc_5068
.text:0000000000005042                 cmp     byte ptr [rcx], 0
.text:0000000000005045                 jnz     short loc_5057
.text:0000000000005047                 jmp     short loc_5068
.text:0000000000005047 ; ---------------------------------------------------------------------------
.text:0000000000005049                 align 10h
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005050                 cmp     byte ptr [r9+rax], 0
.text:0000000000005055                 jz      short loc_5065
.text:0000000000005057
.text:0000000000005057 loc_5057:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005057                 add     rax, 1
.text:000000000000505B                 lea     rdx, [rbp+rax+0]
.text:0000000000005060                 cmp     r11, rdx
.text:0000000000005063                 ja      short loc_5050
.text:0000000000005065
.text:0000000000005065 loc_5065:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005065                 mov     rdi, rax
.text:0000000000005068
.text:0000000000005068 loc_5068:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005068                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005068                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000506D                 xor     r12d, r12d
.text:0000000000005070                 jmp     loc_4AD6
.text:0000000000005075 ; ---------------------------------------------------------------------------
.text:0000000000005075
.text:0000000000005075 loc_5075:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005075                 mov     rdi, rbx
.text:0000000000005078                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000507E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000005083                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000005089                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005091                 xor     r12d, r12d
.text:0000000000005094                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005099                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000509E                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000050A3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000050A8                 jmp     loc_4AD6
.text:00000000000050AD ; ---------------------------------------------------------------------------
.text:00000000000050AD
.text:00000000000050AD loc_50AD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000050AD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000050B2                 movzx   eax, byte ptr [rdx]
.text:00000000000050B5                 test    al, al
.text:00000000000050B7                 jz      loc_4EEC
.text:00000000000050BD                 nop     dword ptr [rax]
.text:00000000000050C0
.text:00000000000050C0 loc_50C0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000050C0                 cmp     r13, r15
.text:00000000000050C3                 jbe     short loc_50C9
.text:00000000000050C5                 mov     [r14+r15], al
.text:00000000000050C9
.text:00000000000050C9 loc_50C9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000050C9                 add     r15, 1
.text:00000000000050CD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000050D2                 test    al, al
.text:00000000000050D4                 jnz     short loc_50C0
.text:00000000000050D6                 jmp     loc_4EEC
.text:00000000000050DB ; ---------------------------------------------------------------------------
.text:00000000000050DB
.text:00000000000050DB loc_50DB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000050DB                 mov     eax, edx
.text:00000000000050DD                 jmp     loc_4637
.text:00000000000050E2 ; ---------------------------------------------------------------------------
.text:00000000000050E2
.text:00000000000050E2 loc_50E2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000050E2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000050E6                 cmp     bl, 3Eh ; '>'
.text:00000000000050E9                 ja      loc_4960
.text:00000000000050EF                 mov     rax, 7000A38200000000h
.text:00000000000050F9                 bt      rax, rbx
.text:00000000000050FD                 jnb     loc_4960
.text:0000000000005103                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005108                 jnz     loc_52F2
.text:000000000000510E                 cmp     r13, r15
.text:0000000000005111                 jbe     short loc_5118
.text:0000000000005113                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000005118
.text:0000000000005118 loc_5118:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000005118                 lea     rax, [r15+1]
.text:000000000000511C                 cmp     r13, rax
.text:000000000000511F                 jbe     short loc_5127
.text:0000000000005121                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000005127
.text:0000000000005127 loc_5127:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000005127                 lea     rax, [r15+2]
.text:000000000000512B                 cmp     r13, rax
.text:000000000000512E                 jbe     short loc_5136
.text:0000000000005130                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005136
.text:0000000000005136 loc_5136:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005136                 lea     rax, [r15+3]
.text:000000000000513A                 cmp     r13, rax
.text:000000000000513D                 jbe     short loc_5145
.text:000000000000513F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005145
.text:0000000000005145 loc_5145:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005145                 add     r15, 4
.text:0000000000005149                 xor     edx, edx
.text:000000000000514B                 xor     r12d, r12d
.text:000000000000514E                 xor     eax, eax
.text:0000000000005150                 mov     rbp, rcx
.text:0000000000005153                 jmp     loc_4318
.text:0000000000005158 ; ---------------------------------------------------------------------------
.text:0000000000005158
.text:0000000000005158 loc_5158:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005158                                         ; DATA XREF: .rodata:jpt_4181↓o
.text:0000000000005158                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000515A                 jz      loc_52E8
.text:0000000000005160                 lea     rax, asc_7925   ; "'"
.text:0000000000005167                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000516C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005171                 xor     r12d, r12d
.text:0000000000005174                 mov     [rsp+0E8h+var_98], 0
.text:000000000000517D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005182                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005187                 mov     [rsp+0E8h+n], 1
.text:0000000000005190                 xor     r15d, r15d
.text:0000000000005193                 mov     [rsp+0E8h+s2], rax
.text:0000000000005198                 jmp     loc_41C3
.text:0000000000005198 ; ---------------------------------------------------------------------------
.text:000000000000519D                 align 20h
.text:00000000000051A0
.text:00000000000051A0 loc_51A0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000051A0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000051A0                 mov     rbp, r11
.text:00000000000051A3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000051A8                 jmp     loc_4C79
.text:00000000000051AD ; ---------------------------------------------------------------------------
.text:00000000000051AD
.text:00000000000051AD loc_51AD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000051AD                 lea     rax, unk_7923
.text:00000000000051B4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000051B9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000051BE                 xor     r12d, r12d
.text:00000000000051C1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000051CA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000051CF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000051D4                 mov     [rsp+0E8h+n], 1
.text:00000000000051DD                 xor     r15d, r15d
.text:00000000000051E0                 mov     [rsp+0E8h+s2], rax
.text:00000000000051E5                 jmp     loc_41C3
.text:00000000000051EA ; ---------------------------------------------------------------------------
.text:00000000000051EA
.text:00000000000051EA loc_51EA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000051EA                 mov     eax, edx
.text:00000000000051EC
.text:00000000000051EC loc_51EC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000051EC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000051EC                 mov     rbx, [rsp+0E8h+s2]
.text:00000000000051F1                 test    rbx, rbx
.text:00000000000051F4                 jz      short loc_5222
.text:00000000000051F6                 test    al, al
.text:00000000000051F8                 jz      short loc_5222
.text:00000000000051FA                 movzx   ecx, byte ptr [rbx]
.text:00000000000051FD                 mov     rax, rbx
.text:0000000000005200                 test    cl, cl
.text:0000000000005202                 jz      short loc_5222
.text:0000000000005204                 mov     rdx, r15
.text:0000000000005207                 sub     rax, r15
.text:000000000000520A
.text:000000000000520A loc_520A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000520A                 cmp     r13, rdx
.text:000000000000520D                 jbe     short loc_5213
.text:000000000000520F                 mov     [r14+rdx], cl
.text:0000000000005213
.text:0000000000005213 loc_5213:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000005213                 add     rdx, 1
.text:0000000000005217                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000521B                 test    cl, cl
.text:000000000000521D                 jnz     short loc_520A
.text:000000000000521F                 mov     r15, rdx
.text:0000000000005222
.text:0000000000005222 loc_5222:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005222                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005222                 cmp     r13, r15
.text:0000000000005225                 jbe     loc_4CC9
.text:000000000000522B                 mov     byte ptr [r14+r15], 0
.text:0000000000005230                 jmp     loc_4CC9
.text:0000000000005235 ; ---------------------------------------------------------------------------
.text:0000000000005235
.text:0000000000005235 loc_5235:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005235                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000523A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000523F                 mov     rbp, r11
.text:0000000000005242                 setz    al
.text:0000000000005245                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005249                 jmp     loc_4C79
.text:000000000000524E ; ---------------------------------------------------------------------------
.text:000000000000524E
.text:000000000000524E loc_524E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000524E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005252                 mov     rdi, rcx
.text:0000000000005255                 call    gettext_quote
.text:000000000000525A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000525F                 jmp     loc_4EB6
.text:0000000000005264 ; ---------------------------------------------------------------------------
.text:0000000000005264
.text:0000000000005264 loc_5264:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005264                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005268                 mov     rdi, rcx
.text:000000000000526B                 call    gettext_quote
.text:0000000000005270                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005275                 jmp     loc_4EE1
.text:000000000000527A ; ---------------------------------------------------------------------------
.text:000000000000527A
.text:000000000000527A loc_527A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000527A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000527F                 mov     rbp, r11
.text:0000000000005282                 mov     eax, edx
.text:0000000000005284                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005288                 jmp     loc_4C79
.text:000000000000528D ; ---------------------------------------------------------------------------
.text:000000000000528D
.text:000000000000528D loc_528D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000528D                 sub     rsp, 8
.text:0000000000005291                 mov     r8d, 5
.text:0000000000005297                 mov     rcx, r11
.text:000000000000529A                 push    [rsp+0F0h+var_88]
.text:000000000000529E                 push    [rsp+0F8h+var_80]
.text:00000000000052A2                 mov     rdi, r14
.text:00000000000052A5                 push    [rsp+100h+var_C8]
.text:00000000000052A9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000052B1                 mov     rdx, [rsp+108h+s]
.text:00000000000052B6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000052BB                 call    quotearg_buffer_restyled
.text:00000000000052C0                 add     rsp, 20h
.text:00000000000052C4                 mov     r15, rax
.text:00000000000052C7                 jmp     loc_4CC9
.text:00000000000052CC ; ---------------------------------------------------------------------------
.text:00000000000052CC
.text:00000000000052CC loc_52CC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000052CC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000052D1                 jmp     loc_51EC
.text:00000000000052D6 ; ---------------------------------------------------------------------------
.text:00000000000052D6
.text:00000000000052D6 loc_52D6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000052D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000052DE                 jmp     loc_4C79
.text:00000000000052E3 ; ---------------------------------------------------------------------------
.text:00000000000052E3
.text:00000000000052E3 loc_52E3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000052E3                 call    ___stack_chk_fail
.text:00000000000052E8 ; ---------------------------------------------------------------------------
.text:00000000000052E8
.text:00000000000052E8 loc_52E8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000052E8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000052ED                 jmp     loc_4D61
.text:00000000000052F2 ; ---------------------------------------------------------------------------
.text:00000000000052F2
.text:00000000000052F2 loc_52F2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000052F2                 mov     rbp, r11
.text:00000000000052F5                 jmp     loc_4C90
.text:00000000000052FA ; ---------------------------------------------------------------------------
.text:00000000000052FA
.text:00000000000052FA loc_52FA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000052FA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000052FF                 xor     eax, eax
.text:0000000000005301                 xor     r12d, r12d
.text:0000000000005304                 mov     [rsp+0E8h+var_98], 0
.text:000000000000530D                 jmp     loc_48B4
.text:0000000000005312 ; ---------------------------------------------------------------------------
.text:0000000000005312
.text:0000000000005312 loc_5312:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000005312                 mov     rdx, r13
.text:0000000000005315                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000531A                 jmp     loc_4912
.text:000000000000531F ; ---------------------------------------------------------------------------
.text:000000000000531F
.text:000000000000531F def_4181:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000531F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000531F ; } // starts at 40F0
.text:000000000000531F quotearg_buffer_restyled endp
.text:000000000000531F
.text:000000000000531F ; ---------------------------------------------------------------------------
.text:0000000000005324                 align 10h
.text:0000000000005330
.text:0000000000005330 ; =============== S U B R O U T I N E =======================================
.text:0000000000005330
.text:0000000000005330
.text:0000000000005330 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005330                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005330
.text:0000000000005330 var_50          = qword ptr -50h
.text:0000000000005330 var_48          = qword ptr -48h
.text:0000000000005330 var_40          = dword ptr -40h
.text:0000000000005330 var_3C          = dword ptr -3Ch
.text:0000000000005330
.text:0000000000005330 ; __unwind {
.text:0000000000005330                 push    r15
.text:0000000000005332                 push    r14
.text:0000000000005334                 movsxd  r15, edi
.text:0000000000005337                 push    r13
.text:0000000000005339                 push    r12
.text:000000000000533B                 mov     r14, rdx
.text:000000000000533E                 push    rbp
.text:000000000000533F                 push    rbx
.text:0000000000005340                 mov     rbp, rcx
.text:0000000000005343                 sub     rsp, 28h
.text:0000000000005347                 mov     [rsp+58h+var_50], rsi
.text:000000000000534C                 call    ___errno_location
.text:0000000000005351                 mov     r13, rax
.text:0000000000005354                 mov     eax, [rax]
.text:0000000000005356                 test    r15d, r15d
.text:0000000000005359                 mov     rbx, cs:slotvec
.text:0000000000005360                 mov     [rsp+58h+var_40], eax
.text:0000000000005364                 js      loc_54D1
.text:000000000000536A                 cmp     cs:nslots, r15d
.text:0000000000005371                 jg      short loc_53D5
.text:0000000000005373                 cmp     r15d, 7FFFFFFFh
.text:000000000000537A                 jz      loc_54D6
.text:0000000000005380                 lea     r12d, [r15+1]
.text:0000000000005384                 lea     rax, slotvec0
.text:000000000000538B                 movsxd  rsi, r12d
.text:000000000000538E                 shl     rsi, 4
.text:0000000000005392                 cmp     rbx, rax
.text:0000000000005395                 jz      loc_54B0
.text:000000000000539B                 mov     rdi, rbx
.text:000000000000539E                 call    xrealloc
.text:00000000000053A3                 mov     rbx, rax
.text:00000000000053A6                 mov     cs:slotvec, rax
.text:00000000000053AD
.text:00000000000053AD loc_53AD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000053AD                 movsxd  rdi, cs:nslots
.text:00000000000053B4                 mov     edx, r12d
.text:00000000000053B7                 xor     esi, esi        ; c
.text:00000000000053B9                 sub     edx, edi
.text:00000000000053BB                 shl     rdi, 4
.text:00000000000053BF                 movsxd  rdx, edx
.text:00000000000053C2                 add     rdi, rbx        ; s
.text:00000000000053C5                 shl     rdx, 4          ; n
.text:00000000000053C9                 call    _memset
.text:00000000000053CE                 mov     cs:nslots, r12d
.text:00000000000053D5
.text:00000000000053D5 loc_53D5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000053D5                 mov     eax, [rbp+4]
.text:00000000000053D8                 shl     r15, 4
.text:00000000000053DC                 sub     rsp, 8
.text:00000000000053E0                 add     rbx, r15
.text:00000000000053E3                 lea     r15, [rbp+8]
.text:00000000000053E7                 mov     r8d, [rbp+0]
.text:00000000000053EB                 mov     r11, [rbx]
.text:00000000000053EE                 mov     r12, [rbx+8]
.text:00000000000053F2                 mov     rcx, r14
.text:00000000000053F5                 or      eax, 1
.text:00000000000053F8                 mov     [rsp+60h+var_3C], eax
.text:00000000000053FC                 push    qword ptr [rbp+30h]
.text:00000000000053FF                 mov     r9d, eax
.text:0000000000005402                 push    qword ptr [rbp+28h]
.text:0000000000005405                 push    r15
.text:0000000000005407                 mov     rsi, r11
.text:000000000000540A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000540F                 mov     rdi, r12
.text:0000000000005412                 mov     [rsp+78h+var_48], r11
.text:0000000000005417                 call    quotearg_buffer_restyled
.text:000000000000541C                 add     rsp, 20h
.text:0000000000005420                 mov     r11, [rsp+58h+var_48]
.text:0000000000005425                 cmp     r11, rax
.text:0000000000005428                 ja      short loc_5491
.text:000000000000542A                 lea     rsi, [rax+1]
.text:000000000000542E                 lea     rax, slot0
.text:0000000000005435                 cmp     r12, rax
.text:0000000000005438                 mov     [rbx], rsi
.text:000000000000543B                 jz      short loc_544F
.text:000000000000543D                 mov     rdi, r12        ; ptr
.text:0000000000005440                 mov     [rsp+58h+var_48], rsi
.text:0000000000005445                 call    free
.text:000000000000544A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000544F
.text:000000000000544F loc_544F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000544F                 mov     rdi, rsi
.text:0000000000005452                 mov     [rsp+58h+var_48], rsi
.text:0000000000005457                 call    xmalloc
.text:000000000000545C                 sub     rsp, 8
.text:0000000000005460                 mov     [rbx+8], rax
.text:0000000000005464                 mov     r8d, [rbp+0]
.text:0000000000005468                 push    qword ptr [rbp+30h]
.text:000000000000546B                 push    qword ptr [rbp+28h]
.text:000000000000546E                 mov     rcx, r14
.text:0000000000005471                 push    r15
.text:0000000000005473                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005478                 mov     rdi, rax
.text:000000000000547B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005480                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005485                 mov     r12, rax
.text:0000000000005488                 call    quotearg_buffer_restyled
.text:000000000000548D                 add     rsp, 20h
.text:0000000000005491
.text:0000000000005491 loc_5491:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005491                 mov     eax, [rsp+58h+var_40]
.text:0000000000005495                 mov     [r13+0], eax
.text:0000000000005499                 add     rsp, 28h
.text:000000000000549D                 mov     rax, r12
.text:00000000000054A0                 pop     rbx
.text:00000000000054A1                 pop     rbp
.text:00000000000054A2                 pop     r12
.text:00000000000054A4                 pop     r13
.text:00000000000054A6                 pop     r14
.text:00000000000054A8                 pop     r15
.text:00000000000054AA                 retn
.text:00000000000054AA ; ---------------------------------------------------------------------------
.text:00000000000054AB                 align 10h
.text:00000000000054B0
.text:00000000000054B0 loc_54B0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000054B0                 xor     edi, edi
.text:00000000000054B2                 call    xrealloc
.text:00000000000054B7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000054BF                 mov     rbx, rax
.text:00000000000054C2                 mov     cs:slotvec, rax
.text:00000000000054C9                 movups  xmmword ptr [rax], xmm0
.text:00000000000054CC                 jmp     loc_53AD
.text:00000000000054D1 ; ---------------------------------------------------------------------------
.text:00000000000054D1
.text:00000000000054D1 loc_54D1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000054D1                 call    _abort
.text:00000000000054D6 ; ---------------------------------------------------------------------------
.text:00000000000054D6
.text:00000000000054D6 loc_54D6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000054D6                 call    xalloc_die
.text:00000000000054D6 ; } // starts at 5330
.text:00000000000054D6 quotearg_n_options endp
.text:00000000000054D6
.text:00000000000054D6 ; ---------------------------------------------------------------------------
.text:00000000000054DB                 align 20h
.text:00000000000054E0
.text:00000000000054E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000054E0
.text:00000000000054E0 ; Attributes: info_from_lumina
.text:00000000000054E0
.text:00000000000054E0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000054E0                 public clone_quoting_options
.text:00000000000054E0 clone_quoting_options proc near
.text:00000000000054E0 ; __unwind {
.text:00000000000054E0                 push    r12
.text:00000000000054E2                 push    rbp
.text:00000000000054E3                 push    rbx
.text:00000000000054E4                 mov     rbx, rdi
.text:00000000000054E7                 call    ___errno_location
.text:00000000000054EC                 mov     r12d, [rax]
.text:00000000000054EF                 mov     rbp, rax
.text:00000000000054F2                 lea     rax, default_quoting_options
.text:00000000000054F9                 test    rbx, rbx
.text:00000000000054FC                 mov     esi, 38h ; '8'  ; n
.text:0000000000005501                 cmovz   rbx, rax
.text:0000000000005505                 mov     rdi, rbx        ; src
.text:0000000000005508                 call    xmemdup
.text:000000000000550D                 mov     [rbp+0], r12d
.text:0000000000005511                 pop     rbx
.text:0000000000005512                 pop     rbp
.text:0000000000005513                 pop     r12
.text:0000000000005515                 retn
.text:0000000000005515 ; } // starts at 54E0
.text:0000000000005515 clone_quoting_options endp
.text:0000000000005515
.text:0000000000005515 ; ---------------------------------------------------------------------------
.text:0000000000005516                 align 20h
.text:0000000000005520
.text:0000000000005520 ; =============== S U B R O U T I N E =======================================
.text:0000000000005520
.text:0000000000005520
.text:0000000000005520                 public get_quoting_style
.text:0000000000005520 get_quoting_style proc near
.text:0000000000005520 ; __unwind {
.text:0000000000005520                 lea     rax, default_quoting_options
.text:0000000000005527                 test    rdi, rdi
.text:000000000000552A                 cmovz   rdi, rax
.text:000000000000552E                 mov     eax, [rdi]
.text:0000000000005530                 retn
.text:0000000000005530 ; } // starts at 5520
.text:0000000000005530 get_quoting_style endp
.text:0000000000005530
.text:0000000000005530 ; ---------------------------------------------------------------------------
.text:0000000000005531                 align 20h
.text:0000000000005540
.text:0000000000005540 ; =============== S U B R O U T I N E =======================================
.text:0000000000005540
.text:0000000000005540
.text:0000000000005540                 public set_quoting_style
.text:0000000000005540 set_quoting_style proc near
.text:0000000000005540 ; __unwind {
.text:0000000000005540                 lea     rax, default_quoting_options
.text:0000000000005547                 test    rdi, rdi
.text:000000000000554A                 cmovz   rdi, rax
.text:000000000000554E                 mov     [rdi], esi
.text:0000000000005550                 retn
.text:0000000000005550 ; } // starts at 5540
.text:0000000000005550 set_quoting_style endp
.text:0000000000005550
.text:0000000000005550 ; ---------------------------------------------------------------------------
.text:0000000000005551                 align 20h
.text:0000000000005560
.text:0000000000005560 ; =============== S U B R O U T I N E =======================================
.text:0000000000005560
.text:0000000000005560 ; Attributes: info_from_lumina
.text:0000000000005560
.text:0000000000005560 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005560                 public set_char_quoting
.text:0000000000005560 set_char_quoting proc near
.text:0000000000005560 ; __unwind {
.text:0000000000005560                 lea     rax, default_quoting_options
.text:0000000000005567                 test    rdi, rdi
.text:000000000000556A                 mov     ecx, esi
.text:000000000000556C                 cmovz   rdi, rax
.text:0000000000005570                 mov     eax, esi
.text:0000000000005572                 and     ecx, 1Fh
.text:0000000000005575                 shr     al, 5
.text:0000000000005578                 movzx   eax, al
.text:000000000000557B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005580                 mov     esi, [rdi]
.text:0000000000005582                 mov     eax, esi
.text:0000000000005584                 shr     eax, cl
.text:0000000000005586                 xor     edx, eax
.text:0000000000005588                 and     eax, 1
.text:000000000000558B                 and     edx, 1
.text:000000000000558E                 shl     edx, cl
.text:0000000000005590                 xor     edx, esi
.text:0000000000005592                 mov     [rdi], edx
.text:0000000000005594                 retn
.text:0000000000005594 ; } // starts at 5560
.text:0000000000005594 set_char_quoting endp
.text:0000000000005594
.text:0000000000005594 ; ---------------------------------------------------------------------------
.text:0000000000005595                 align 20h
.text:00000000000055A0
.text:00000000000055A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055A0
.text:00000000000055A0
.text:00000000000055A0                 public set_quoting_flags
.text:00000000000055A0 set_quoting_flags proc near
.text:00000000000055A0 ; __unwind {
.text:00000000000055A0                 lea     rax, default_quoting_options
.text:00000000000055A7                 test    rdi, rdi
.text:00000000000055AA                 cmovz   rdi, rax
.text:00000000000055AE                 mov     eax, [rdi+4]
.text:00000000000055B1                 mov     [rdi+4], esi
.text:00000000000055B4                 retn
.text:00000000000055B4 ; } // starts at 55A0
.text:00000000000055B4 set_quoting_flags endp
.text:00000000000055B4
.text:00000000000055B4 ; ---------------------------------------------------------------------------
.text:00000000000055B5                 align 20h
.text:00000000000055C0
.text:00000000000055C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055C0
.text:00000000000055C0 ; Attributes: info_from_lumina
.text:00000000000055C0
.text:00000000000055C0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000055C0                 public set_custom_quoting
.text:00000000000055C0 set_custom_quoting proc near
.text:00000000000055C0 ; __unwind {
.text:00000000000055C0                 lea     rax, default_quoting_options
.text:00000000000055C7                 test    rdi, rdi
.text:00000000000055CA                 cmovz   rdi, rax
.text:00000000000055CE                 test    rsi, rsi
.text:00000000000055D1                 mov     dword ptr [rdi], 0Ah
.text:00000000000055D7                 jz      short loc_55E7
.text:00000000000055D9                 test    rdx, rdx
.text:00000000000055DC                 jz      short loc_55E7
.text:00000000000055DE                 mov     [rdi+28h], rsi
.text:00000000000055E2                 mov     [rdi+30h], rdx
.text:00000000000055E6                 retn
.text:00000000000055E7 ; ---------------------------------------------------------------------------
.text:00000000000055E7
.text:00000000000055E7 loc_55E7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000055E7                                         ; set_custom_quoting+1C↑j
.text:00000000000055E7                 sub     rsp, 8
.text:00000000000055EB                 call    _abort
.text:00000000000055EB ; } // starts at 55C0
.text:00000000000055EB set_custom_quoting endp
.text:00000000000055EB
.text:00000000000055F0
.text:00000000000055F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000055F0
.text:00000000000055F0 ; Attributes: info_from_lumina
.text:00000000000055F0
.text:00000000000055F0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000055F0                 public quotearg_buffer
.text:00000000000055F0 quotearg_buffer proc near
.text:00000000000055F0
.text:00000000000055F0 var_40          = qword ptr -40h
.text:00000000000055F0
.text:00000000000055F0 ; __unwind {
.text:00000000000055F0                 push    r15
.text:00000000000055F2                 push    r14
.text:00000000000055F4                 lea     rax, default_quoting_options
.text:00000000000055FB                 push    r13
.text:00000000000055FD                 push    r12
.text:00000000000055FF                 mov     r13, rdi
.text:0000000000005602                 push    rbp
.text:0000000000005603                 push    rbx
.text:0000000000005604                 mov     rbx, r8
.text:0000000000005607                 mov     r14, rsi
.text:000000000000560A                 mov     r15, rdx
.text:000000000000560D                 sub     rsp, 18h
.text:0000000000005611                 test    r8, r8
.text:0000000000005614                 cmovz   rbx, rax
.text:0000000000005618                 mov     [rsp+48h+var_40], rcx
.text:000000000000561D                 call    ___errno_location
.text:0000000000005622                 mov     r12d, [rax]
.text:0000000000005625                 mov     rbp, rax
.text:0000000000005628                 lea     rax, [rbx+8]
.text:000000000000562C                 sub     rsp, 8
.text:0000000000005630                 mov     r9d, [rbx+4]
.text:0000000000005634                 push    qword ptr [rbx+30h]
.text:0000000000005637                 mov     r8d, [rbx]
.text:000000000000563A                 push    qword ptr [rbx+28h]
.text:000000000000563D                 mov     rdx, r15
.text:0000000000005640                 push    rax
.text:0000000000005641                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005646                 mov     rsi, r14
.text:0000000000005649                 mov     rdi, r13
.text:000000000000564C                 call    quotearg_buffer_restyled
.text:0000000000005651                 mov     [rbp+0], r12d
.text:0000000000005655                 add     rsp, 38h
.text:0000000000005659                 pop     rbx
.text:000000000000565A                 pop     rbp
.text:000000000000565B                 pop     r12
.text:000000000000565D                 pop     r13
.text:000000000000565F                 pop     r14
.text:0000000000005661                 pop     r15
.text:0000000000005663                 retn
.text:0000000000005663 ; } // starts at 55F0
.text:0000000000005663 quotearg_buffer endp
.text:0000000000005663
.text:0000000000005663 ; ---------------------------------------------------------------------------
.text:0000000000005664                 align 10h
.text:0000000000005670
.text:0000000000005670 ; =============== S U B R O U T I N E =======================================
.text:0000000000005670
.text:0000000000005670 ; Attributes: info_from_lumina
.text:0000000000005670
.text:0000000000005670 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005670                 public quotearg_alloc_mem
.text:0000000000005670 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005670
.text:0000000000005670 var_5C          = dword ptr -5Ch
.text:0000000000005670 var_58          = qword ptr -58h
.text:0000000000005670 var_50          = qword ptr -50h
.text:0000000000005670 var_48          = qword ptr -48h
.text:0000000000005670 var_40          = qword ptr -40h
.text:0000000000005670
.text:0000000000005670 ; __unwind {
.text:0000000000005670                 push    r15
.text:0000000000005672                 push    r14
.text:0000000000005674                 lea     rax, default_quoting_options
.text:000000000000567B                 push    r13
.text:000000000000567D                 push    r12
.text:000000000000567F                 mov     r12, rdx
.text:0000000000005682                 push    rbp
.text:0000000000005683                 push    rbx
.text:0000000000005684                 mov     rbx, rcx
.text:0000000000005687                 mov     r14, rdi
.text:000000000000568A                 mov     r15, rsi
.text:000000000000568D                 sub     rsp, 38h
.text:0000000000005691                 test    rcx, rcx
.text:0000000000005694                 cmovz   rbx, rax
.text:0000000000005698                 xor     ebp, ebp
.text:000000000000569A                 call    ___errno_location
.text:000000000000569F                 test    r12, r12
.text:00000000000056A2                 mov     r13, rax
.text:00000000000056A5                 mov     eax, [rax]
.text:00000000000056A7                 setz    bpl
.text:00000000000056AB                 or      ebp, [rbx+4]
.text:00000000000056AE                 lea     r10, [rbx+8]
.text:00000000000056B2                 sub     rsp, 8
.text:00000000000056B6                 mov     r8d, [rbx]
.text:00000000000056B9                 mov     rcx, r15
.text:00000000000056BC                 mov     [rsp+70h+var_5C], eax
.text:00000000000056C0                 push    qword ptr [rbx+30h]
.text:00000000000056C3                 mov     rdx, r14
.text:00000000000056C6                 push    qword ptr [rbx+28h]
.text:00000000000056C9                 push    r10
.text:00000000000056CB                 xor     esi, esi
.text:00000000000056CD                 mov     r9d, ebp
.text:00000000000056D0                 xor     edi, edi
.text:00000000000056D2                 mov     [rsp+88h+var_48], r10
.text:00000000000056D7                 call    quotearg_buffer_restyled
.text:00000000000056DC                 lea     rsi, [rax+1]
.text:00000000000056E0                 mov     [rsp+88h+var_40], rax
.text:00000000000056E5                 add     rsp, 20h
.text:00000000000056E9                 mov     rdi, rsi
.text:00000000000056EC                 mov     [rsp+68h+var_50], rsi
.text:00000000000056F1                 call    xmalloc
.text:00000000000056F6                 mov     [rsp+68h+var_58], rax
.text:00000000000056FB                 sub     rsp, 8
.text:00000000000056FF                 push    qword ptr [rbx+30h]
.text:0000000000005702                 push    qword ptr [rbx+28h]
.text:0000000000005705                 mov     r10, [rsp+80h+var_48]
.text:000000000000570A                 mov     r9d, ebp
.text:000000000000570D                 mov     r8d, [rbx]
.text:0000000000005710                 mov     rcx, r15
.text:0000000000005713                 mov     rdx, r14
.text:0000000000005716                 mov     rdi, rax
.text:0000000000005719                 push    r10
.text:000000000000571B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005720                 call    quotearg_buffer_restyled
.text:0000000000005725                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005729                 add     rsp, 20h
.text:000000000000572D                 test    r12, r12
.text:0000000000005730                 mov     [r13+0], eax
.text:0000000000005734                 jz      short loc_573F
.text:0000000000005736                 mov     r11, [rsp+68h+var_40]
.text:000000000000573B                 mov     [r12], r11
.text:000000000000573F
.text:000000000000573F loc_573F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000573F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005744                 add     rsp, 38h
.text:0000000000005748                 pop     rbx
.text:0000000000005749                 pop     rbp
.text:000000000000574A                 pop     r12
.text:000000000000574C                 pop     r13
.text:000000000000574E                 pop     r14
.text:0000000000005750                 pop     r15
.text:0000000000005752                 retn
.text:0000000000005752 ; } // starts at 5670
.text:0000000000005752 quotearg_alloc_mem endp
.text:0000000000005752
.text:0000000000005752 ; ---------------------------------------------------------------------------
.text:0000000000005753                 align 20h
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760
.text:0000000000005760                 public quotearg_alloc
.text:0000000000005760 quotearg_alloc  proc near
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 mov     rcx, rdx
.text:0000000000005763                 xor     edx, edx
.text:0000000000005765                 jmp     quotearg_alloc_mem
.text:0000000000005765 ; } // starts at 5760
.text:0000000000005765 quotearg_alloc  endp
.text:0000000000005765
.text:0000000000005765 ; ---------------------------------------------------------------------------
.text:000000000000576A                 align 10h
.text:0000000000005770
.text:0000000000005770 ; =============== S U B R O U T I N E =======================================
.text:0000000000005770
.text:0000000000005770 ; Attributes: info_from_lumina
.text:0000000000005770
.text:0000000000005770 ; void __cdecl quotearg_free()
.text:0000000000005770                 public quotearg_free
.text:0000000000005770 quotearg_free   proc near
.text:0000000000005770 ; __unwind {
.text:0000000000005770                 mov     eax, cs:nslots
.text:0000000000005776                 push    r12
.text:0000000000005778                 mov     r12, cs:slotvec
.text:000000000000577F                 push    rbp
.text:0000000000005780                 push    rbx
.text:0000000000005781                 cmp     eax, 1
.text:0000000000005784                 jle     short loc_57B1
.text:0000000000005786                 sub     eax, 2
.text:0000000000005789                 lea     rbx, [r12+18h]
.text:000000000000578E                 shl     rax, 4
.text:0000000000005792                 lea     rbp, [r12+rax+28h]
.text:0000000000005797                 nop     word ptr [rax+rax+00000000h]
.text:00000000000057A0
.text:00000000000057A0 loc_57A0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000057A0                 mov     rdi, [rbx]      ; ptr
.text:00000000000057A3                 add     rbx, 10h
.text:00000000000057A7                 call    free
.text:00000000000057AC                 cmp     rbx, rbp
.text:00000000000057AF                 jnz     short loc_57A0
.text:00000000000057B1
.text:00000000000057B1 loc_57B1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000057B1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000057B6                 lea     rbx, slot0
.text:00000000000057BD                 cmp     rdi, rbx
.text:00000000000057C0                 jz      short loc_57D9
.text:00000000000057C2                 call    free
.text:00000000000057C7                 mov     cs:slotvec0, 100h
.text:00000000000057D2                 mov     cs:off_20A078, rbx
.text:00000000000057D9
.text:00000000000057D9 loc_57D9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000057D9                 lea     rbx, slotvec0
.text:00000000000057E0                 cmp     r12, rbx
.text:00000000000057E3                 jz      short loc_57F4
.text:00000000000057E5                 mov     rdi, r12        ; ptr
.text:00000000000057E8                 call    free
.text:00000000000057ED                 mov     cs:slotvec, rbx
.text:00000000000057F4
.text:00000000000057F4 loc_57F4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000057F4                 pop     rbx
.text:00000000000057F5                 mov     cs:nslots, 1
.text:00000000000057FF                 pop     rbp
.text:0000000000005800                 pop     r12
.text:0000000000005802                 retn
.text:0000000000005802 ; } // starts at 5770
.text:0000000000005802 quotearg_free   endp
.text:0000000000005802
.text:0000000000005802 ; ---------------------------------------------------------------------------
.text:0000000000005803                 align 10h
.text:0000000000005810
.text:0000000000005810 ; =============== S U B R O U T I N E =======================================
.text:0000000000005810
.text:0000000000005810
.text:0000000000005810                 public quotearg_n
.text:0000000000005810 quotearg_n      proc near
.text:0000000000005810 ; __unwind {
.text:0000000000005810                 lea     rcx, default_quoting_options
.text:0000000000005817                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000581E                 jmp     quotearg_n_options
.text:000000000000581E ; } // starts at 5810
.text:000000000000581E quotearg_n      endp
.text:000000000000581E
.text:000000000000581E ; ---------------------------------------------------------------------------
.text:0000000000005823                 align 10h
.text:0000000000005830
.text:0000000000005830 ; =============== S U B R O U T I N E =======================================
.text:0000000000005830
.text:0000000000005830
.text:0000000000005830                 public quotearg_n_mem
.text:0000000000005830 quotearg_n_mem  proc near
.text:0000000000005830 ; __unwind {
.text:0000000000005830                 lea     rcx, default_quoting_options
.text:0000000000005837                 jmp     quotearg_n_options
.text:0000000000005837 ; } // starts at 5830
.text:0000000000005837 quotearg_n_mem  endp
.text:0000000000005837
.text:0000000000005837 ; ---------------------------------------------------------------------------
.text:000000000000583C                 align 20h
.text:0000000000005840
.text:0000000000005840 ; =============== S U B R O U T I N E =======================================
.text:0000000000005840
.text:0000000000005840
.text:0000000000005840                 public quotearg
.text:0000000000005840 quotearg        proc near
.text:0000000000005840 ; __unwind {
.text:0000000000005840                 lea     rcx, default_quoting_options
.text:0000000000005847                 mov     rsi, rdi
.text:000000000000584A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005851                 xor     edi, edi
.text:0000000000005853                 jmp     quotearg_n_options
.text:0000000000005853 ; } // starts at 5840
.text:0000000000005853 quotearg        endp
.text:0000000000005853
.text:0000000000005853 ; ---------------------------------------------------------------------------
.text:0000000000005858                 align 20h
.text:0000000000005860
.text:0000000000005860 ; =============== S U B R O U T I N E =======================================
.text:0000000000005860
.text:0000000000005860
.text:0000000000005860                 public quotearg_mem
.text:0000000000005860 quotearg_mem    proc near
.text:0000000000005860 ; __unwind {
.text:0000000000005860                 lea     rcx, default_quoting_options
.text:0000000000005867                 mov     rdx, rsi
.text:000000000000586A                 mov     rsi, rdi
.text:000000000000586D                 xor     edi, edi
.text:000000000000586F                 jmp     quotearg_n_options
.text:000000000000586F ; } // starts at 5860
.text:000000000000586F quotearg_mem    endp
.text:000000000000586F
.text:000000000000586F ; ---------------------------------------------------------------------------
.text:0000000000005874                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880 ; Attributes: info_from_lumina
.text:0000000000005880
.text:0000000000005880 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000005880                 public quotearg_n_style
.text:0000000000005880 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000005880
.text:0000000000005880 var_48          = dword ptr -48h
.text:0000000000005880 var_44          = qword ptr -44h
.text:0000000000005880 var_3C          = qword ptr -3Ch
.text:0000000000005880 var_34          = qword ptr -34h
.text:0000000000005880 var_2C          = qword ptr -2Ch
.text:0000000000005880 var_24          = qword ptr -24h
.text:0000000000005880 var_1C          = qword ptr -1Ch
.text:0000000000005880 var_14          = dword ptr -14h
.text:0000000000005880 var_10          = qword ptr -10h
.text:0000000000005880
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 sub     rsp, 48h
.text:0000000000005884                 mov     rax, rdx
.text:0000000000005887                 mov     rdx, fs:28h
.text:0000000000005890                 mov     [rsp+48h+var_10], rdx
.text:0000000000005895                 xor     edx, edx
.text:0000000000005897                 cmp     esi, 0Ah
.text:000000000000589A                 jz      short loc_5904
.text:000000000000589C                 mov     [rsp+48h+var_48], esi
.text:000000000000589F                 mov     rcx, rsp
.text:00000000000058A2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000058A9                 mov     rsi, rax
.text:00000000000058AC                 mov     [rsp+48h+var_44], 0
.text:00000000000058B5                 mov     [rsp+48h+var_3C], 0
.text:00000000000058BE                 mov     [rsp+48h+var_34], 0
.text:00000000000058C7                 mov     [rsp+48h+var_2C], 0
.text:00000000000058D0                 mov     [rsp+48h+var_24], 0
.text:00000000000058D9                 mov     [rsp+48h+var_1C], 0
.text:00000000000058E2                 mov     [rsp+48h+var_14], 0
.text:00000000000058EA                 call    quotearg_n_options
.text:00000000000058EF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000058F4                 xor     rcx, fs:28h
.text:00000000000058FD                 jnz     short loc_5909
.text:00000000000058FF                 add     rsp, 48h
.text:0000000000005903                 retn
.text:0000000000005904 ; ---------------------------------------------------------------------------
.text:0000000000005904
.text:0000000000005904 loc_5904:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000005904                 call    _abort
.text:0000000000005909 ; ---------------------------------------------------------------------------
.text:0000000000005909
.text:0000000000005909 loc_5909:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000005909                 call    ___stack_chk_fail
.text:0000000000005909 ; } // starts at 5880
.text:0000000000005909 quotearg_n_style endp
.text:0000000000005909
.text:0000000000005909 ; ---------------------------------------------------------------------------
.text:000000000000590E                 align 10h
.text:0000000000005910
.text:0000000000005910 ; =============== S U B R O U T I N E =======================================
.text:0000000000005910
.text:0000000000005910 ; Attributes: info_from_lumina
.text:0000000000005910
.text:0000000000005910 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000005910                 public quotearg_n_style_mem
.text:0000000000005910 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000005910
.text:0000000000005910 var_48          = dword ptr -48h
.text:0000000000005910 var_44          = qword ptr -44h
.text:0000000000005910 var_3C          = qword ptr -3Ch
.text:0000000000005910 var_34          = qword ptr -34h
.text:0000000000005910 var_2C          = qword ptr -2Ch
.text:0000000000005910 var_24          = qword ptr -24h
.text:0000000000005910 var_1C          = qword ptr -1Ch
.text:0000000000005910 var_14          = dword ptr -14h
.text:0000000000005910 var_10          = qword ptr -10h
.text:0000000000005910
.text:0000000000005910 ; __unwind {
.text:0000000000005910                 sub     rsp, 48h
.text:0000000000005914                 mov     rax, rdx
.text:0000000000005917                 mov     rdx, rcx
.text:000000000000591A                 mov     rcx, fs:28h
.text:0000000000005923                 mov     [rsp+48h+var_10], rcx
.text:0000000000005928                 xor     ecx, ecx
.text:000000000000592A                 cmp     esi, 0Ah
.text:000000000000592D                 jz      short loc_5990
.text:000000000000592F                 mov     [rsp+48h+var_48], esi
.text:0000000000005932                 mov     rcx, rsp
.text:0000000000005935                 mov     rsi, rax
.text:0000000000005938                 mov     [rsp+48h+var_44], 0
.text:0000000000005941                 mov     [rsp+48h+var_3C], 0
.text:000000000000594A                 mov     [rsp+48h+var_34], 0
.text:0000000000005953                 mov     [rsp+48h+var_2C], 0
.text:000000000000595C                 mov     [rsp+48h+var_24], 0
.text:0000000000005965                 mov     [rsp+48h+var_1C], 0
.text:000000000000596E                 mov     [rsp+48h+var_14], 0
.text:0000000000005976                 call    quotearg_n_options
.text:000000000000597B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000005980                 xor     rdx, fs:28h
.text:0000000000005989                 jnz     short loc_5995
.text:000000000000598B                 add     rsp, 48h
.text:000000000000598F                 retn
.text:0000000000005990 ; ---------------------------------------------------------------------------
.text:0000000000005990
.text:0000000000005990 loc_5990:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000005990                 call    _abort
.text:0000000000005995 ; ---------------------------------------------------------------------------
.text:0000000000005995
.text:0000000000005995 loc_5995:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000005995                 call    ___stack_chk_fail
.text:0000000000005995 ; } // starts at 5910
.text:0000000000005995 quotearg_n_style_mem endp
.text:0000000000005995
.text:0000000000005995 ; ---------------------------------------------------------------------------
.text:000000000000599A                 align 20h
.text:00000000000059A0
.text:00000000000059A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059A0
.text:00000000000059A0
.text:00000000000059A0                 public quotearg_style
.text:00000000000059A0 quotearg_style  proc near               ; CODE XREF: main+516↑p
.text:00000000000059A0                                         ; main+843↑p ...
.text:00000000000059A0 ; __unwind {
.text:00000000000059A0                 mov     rdx, rsi
.text:00000000000059A3                 mov     esi, edi
.text:00000000000059A5                 xor     edi, edi
.text:00000000000059A7                 jmp     quotearg_n_style
.text:00000000000059A7 ; } // starts at 59A0
.text:00000000000059A7 quotearg_style  endp
.text:00000000000059A7
.text:00000000000059A7 ; ---------------------------------------------------------------------------
.text:00000000000059AC                 align 10h
.text:00000000000059B0
.text:00000000000059B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059B0
.text:00000000000059B0
.text:00000000000059B0                 public quotearg_style_mem
.text:00000000000059B0 quotearg_style_mem proc near
.text:00000000000059B0 ; __unwind {
.text:00000000000059B0                 mov     rcx, rdx
.text:00000000000059B3                 mov     rdx, rsi
.text:00000000000059B6                 mov     esi, edi
.text:00000000000059B8                 xor     edi, edi
.text:00000000000059BA                 jmp     quotearg_n_style_mem
.text:00000000000059BA ; } // starts at 59B0
.text:00000000000059BA quotearg_style_mem endp
.text:00000000000059BA
.text:00000000000059BA ; ---------------------------------------------------------------------------
.text:00000000000059BF                 align 20h
.text:00000000000059C0
.text:00000000000059C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000059C0
.text:00000000000059C0 ; Attributes: info_from_lumina
.text:00000000000059C0
.text:00000000000059C0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000059C0                 public quotearg_char_mem
.text:00000000000059C0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000059C0                                         ; quotearg_colon+C↓j ...
.text:00000000000059C0
.text:00000000000059C0 var_48          = xmmword ptr -48h
.text:00000000000059C0 var_38          = xmmword ptr -38h
.text:00000000000059C0 var_28          = xmmword ptr -28h
.text:00000000000059C0 var_18          = qword ptr -18h
.text:00000000000059C0 var_10          = qword ptr -10h
.text:00000000000059C0
.text:00000000000059C0 ; __unwind {
.text:00000000000059C0                 sub     rsp, 48h
.text:00000000000059C4                 mov     ecx, edx
.text:00000000000059C6                 mov     rax, fs:28h
.text:00000000000059CF                 mov     [rsp+48h+var_10], rax
.text:00000000000059D4                 xor     eax, eax
.text:00000000000059D6                 mov     rax, cs:qword_20A290
.text:00000000000059DD                 mov     r8, rsp
.text:00000000000059E0                 and     ecx, 1Fh
.text:00000000000059E3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000059EB                 mov     [rsp+48h+var_18], rax
.text:00000000000059F0                 mov     eax, edx
.text:00000000000059F2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000059F6                 shr     al, 5
.text:00000000000059F9                 movzx   eax, al
.text:00000000000059FC                 lea     r9, [r8+rax*4+8]
.text:0000000000005A01                 movdqa  xmm0, cs:xmmword_20A270
.text:0000000000005A09                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005A0E                 movdqa  xmm0, cs:xmmword_20A280
.text:0000000000005A16                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005A1B                 mov     edx, [r9]
.text:0000000000005A1E                 mov     eax, edx
.text:0000000000005A20                 shr     eax, cl
.text:0000000000005A22                 not     eax
.text:0000000000005A24                 and     eax, 1
.text:0000000000005A27                 shl     eax, cl
.text:0000000000005A29                 mov     rcx, r8
.text:0000000000005A2C                 xor     eax, edx
.text:0000000000005A2E                 mov     rdx, rsi
.text:0000000000005A31                 mov     rsi, rdi
.text:0000000000005A34                 mov     [r9], eax
.text:0000000000005A37                 xor     edi, edi
.text:0000000000005A39                 call    quotearg_n_options
.text:0000000000005A3E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000005A43                 xor     rsi, fs:28h
.text:0000000000005A4C                 jnz     short loc_5A53
.text:0000000000005A4E                 add     rsp, 48h
.text:0000000000005A52                 retn
.text:0000000000005A53 ; ---------------------------------------------------------------------------
.text:0000000000005A53
.text:0000000000005A53 loc_5A53:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000005A53                 call    ___stack_chk_fail
.text:0000000000005A53 ; } // starts at 59C0
.text:0000000000005A53 quotearg_char_mem endp
.text:0000000000005A53
.text:0000000000005A53 ; ---------------------------------------------------------------------------
.text:0000000000005A58                 align 20h
.text:0000000000005A60
.text:0000000000005A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A60
.text:0000000000005A60
.text:0000000000005A60                 public quotearg_char
.text:0000000000005A60 quotearg_char   proc near
.text:0000000000005A60 ; __unwind {
.text:0000000000005A60                 movsx   edx, sil
.text:0000000000005A64                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A6B                 jmp     quotearg_char_mem
.text:0000000000005A6B ; } // starts at 5A60
.text:0000000000005A6B quotearg_char   endp
.text:0000000000005A6B
.text:0000000000005A70
.text:0000000000005A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A70
.text:0000000000005A70
.text:0000000000005A70                 public quotearg_colon
.text:0000000000005A70 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000005A70 ; __unwind {
.text:0000000000005A70                 mov     edx, 3Ah ; ':'
.text:0000000000005A75                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A7C                 jmp     quotearg_char_mem
.text:0000000000005A7C ; } // starts at 5A70
.text:0000000000005A7C quotearg_colon  endp
.text:0000000000005A7C
.text:0000000000005A7C ; ---------------------------------------------------------------------------
.text:0000000000005A81                 align 10h
.text:0000000000005A90
.text:0000000000005A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A90
.text:0000000000005A90
.text:0000000000005A90                 public quotearg_colon_mem
.text:0000000000005A90 quotearg_colon_mem proc near
.text:0000000000005A90 ; __unwind {
.text:0000000000005A90                 mov     edx, 3Ah ; ':'
.text:0000000000005A95                 jmp     quotearg_char_mem
.text:0000000000005A95 ; } // starts at 5A90
.text:0000000000005A95 quotearg_colon_mem endp
.text:0000000000005A95
.text:0000000000005A95 ; ---------------------------------------------------------------------------
.text:0000000000005A9A                 align 20h
.text:0000000000005AA0
.text:0000000000005AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AA0
.text:0000000000005AA0 ; Attributes: info_from_lumina
.text:0000000000005AA0
.text:0000000000005AA0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000005AA0                 public quotearg_n_style_colon
.text:0000000000005AA0 quotearg_n_style_colon proc near        ; CODE XREF: main+4E8↑p
.text:0000000000005AA0                                         ; main+577↑p ...
.text:0000000000005AA0
.text:0000000000005AA0 var_48          = dword ptr -48h
.text:0000000000005AA0 var_44          = qword ptr -44h
.text:0000000000005AA0 var_3C          = qword ptr -3Ch
.text:0000000000005AA0 var_34          = qword ptr -34h
.text:0000000000005AA0 var_2C          = qword ptr -2Ch
.text:0000000000005AA0 var_24          = qword ptr -24h
.text:0000000000005AA0 var_1C          = qword ptr -1Ch
.text:0000000000005AA0 var_14          = dword ptr -14h
.text:0000000000005AA0 var_10          = qword ptr -10h
.text:0000000000005AA0
.text:0000000000005AA0 ; __unwind {
.text:0000000000005AA0                 sub     rsp, 48h
.text:0000000000005AA4                 mov     rax, rdx
.text:0000000000005AA7                 mov     rdx, fs:28h
.text:0000000000005AB0                 mov     [rsp+48h+var_10], rdx
.text:0000000000005AB5                 xor     edx, edx
.text:0000000000005AB7                 cmp     esi, 0Ah
.text:0000000000005ABA                 jz      short loc_5B24
.text:0000000000005ABC                 mov     [rsp+48h+var_48], esi
.text:0000000000005ABF                 mov     rcx, rsp
.text:0000000000005AC2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005AC9                 mov     rsi, rax
.text:0000000000005ACC                 mov     [rsp+48h+var_44], 0
.text:0000000000005AD5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000005ADE                 mov     [rsp+48h+var_34], 0
.text:0000000000005AE7                 mov     [rsp+48h+var_2C], 0
.text:0000000000005AF0                 mov     [rsp+48h+var_24], 0
.text:0000000000005AF9                 mov     [rsp+48h+var_1C], 0
.text:0000000000005B02                 mov     [rsp+48h+var_14], 0
.text:0000000000005B0A                 call    quotearg_n_options
.text:0000000000005B0F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000005B14                 xor     rcx, fs:28h
.text:0000000000005B1D                 jnz     short loc_5B29
.text:0000000000005B1F                 add     rsp, 48h
.text:0000000000005B23                 retn
.text:0000000000005B24 ; ---------------------------------------------------------------------------
.text:0000000000005B24
.text:0000000000005B24 loc_5B24:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000005B24                 call    _abort
.text:0000000000005B29 ; ---------------------------------------------------------------------------
.text:0000000000005B29
.text:0000000000005B29 loc_5B29:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000005B29                 call    ___stack_chk_fail
.text:0000000000005B29 ; } // starts at 5AA0
.text:0000000000005B29 quotearg_n_style_colon endp
.text:0000000000005B29
.text:0000000000005B29 ; ---------------------------------------------------------------------------
.text:0000000000005B2E                 align 10h
.text:0000000000005B30
.text:0000000000005B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B30
.text:0000000000005B30 ; Attributes: info_from_lumina
.text:0000000000005B30
.text:0000000000005B30 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000005B30                 public quotearg_n_custom_mem
.text:0000000000005B30 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000005B30                                         ; quotearg_custom+12↓j ...
.text:0000000000005B30
.text:0000000000005B30 var_48          = xmmword ptr -48h
.text:0000000000005B30 var_38          = xmmword ptr -38h
.text:0000000000005B30 var_28          = xmmword ptr -28h
.text:0000000000005B30 var_18          = qword ptr -18h
.text:0000000000005B30 var_10          = qword ptr -10h
.text:0000000000005B30
.text:0000000000005B30 ; __unwind {
.text:0000000000005B30                 sub     rsp, 48h
.text:0000000000005B34                 mov     r9, rcx
.text:0000000000005B37                 mov     rcx, cs:qword_20A290
.text:0000000000005B3E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000005B46                 mov     rax, fs:28h
.text:0000000000005B4F                 mov     [rsp+48h+var_10], rax
.text:0000000000005B54                 xor     eax, eax
.text:0000000000005B56                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000005B5A                 test    rsi, rsi
.text:0000000000005B5D                 mov     [rsp+48h+var_18], rcx
.text:0000000000005B62                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000005B69                 movdqa  xmm0, cs:xmmword_20A270
.text:0000000000005B71                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000005B76                 movdqa  xmm0, cs:xmmword_20A280
.text:0000000000005B7E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000005B83                 jz      short loc_5BB7
.text:0000000000005B85                 test    rdx, rdx
.text:0000000000005B88                 jz      short loc_5BB7
.text:0000000000005B8A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000005B8F                 mov     [rsp+48h+var_18], rdx
.text:0000000000005B94                 mov     rcx, rsp
.text:0000000000005B97                 mov     rdx, r8
.text:0000000000005B9A                 mov     rsi, r9
.text:0000000000005B9D                 call    quotearg_n_options
.text:0000000000005BA2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000005BA7                 xor     rdi, fs:28h
.text:0000000000005BB0                 jnz     short loc_5BBC
.text:0000000000005BB2                 add     rsp, 48h
.text:0000000000005BB6                 retn
.text:0000000000005BB7 ; ---------------------------------------------------------------------------
.text:0000000000005BB7
.text:0000000000005BB7 loc_5BB7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000005BB7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000005BB7                 call    _abort
.text:0000000000005BBC ; ---------------------------------------------------------------------------
.text:0000000000005BBC
.text:0000000000005BBC loc_5BBC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000005BBC                 call    ___stack_chk_fail
.text:0000000000005BBC ; } // starts at 5B30
.text:0000000000005BBC quotearg_n_custom_mem endp
.text:0000000000005BBC
.text:0000000000005BBC ; ---------------------------------------------------------------------------
.text:0000000000005BC1                 align 10h
.text:0000000000005BD0
.text:0000000000005BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BD0
.text:0000000000005BD0
.text:0000000000005BD0                 public quotearg_n_custom
.text:0000000000005BD0 quotearg_n_custom proc near
.text:0000000000005BD0 ; __unwind {
.text:0000000000005BD0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BD7                 jmp     quotearg_n_custom_mem
.text:0000000000005BD7 ; } // starts at 5BD0
.text:0000000000005BD7 quotearg_n_custom endp
.text:0000000000005BD7
.text:0000000000005BD7 ; ---------------------------------------------------------------------------
.text:0000000000005BDC                 align 20h
.text:0000000000005BE0
.text:0000000000005BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BE0
.text:0000000000005BE0
.text:0000000000005BE0                 public quotearg_custom
.text:0000000000005BE0 quotearg_custom proc near
.text:0000000000005BE0 ; __unwind {
.text:0000000000005BE0                 mov     rcx, rdx
.text:0000000000005BE3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000005BEA                 mov     rdx, rsi
.text:0000000000005BED                 mov     rsi, rdi
.text:0000000000005BF0                 xor     edi, edi
.text:0000000000005BF2                 jmp     quotearg_n_custom_mem
.text:0000000000005BF2 ; } // starts at 5BE0
.text:0000000000005BF2 quotearg_custom endp
.text:0000000000005BF2
.text:0000000000005BF2 ; ---------------------------------------------------------------------------
.text:0000000000005BF7                 align 20h
.text:0000000000005C00
.text:0000000000005C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C00
.text:0000000000005C00
.text:0000000000005C00                 public quotearg_custom_mem
.text:0000000000005C00 quotearg_custom_mem proc near
.text:0000000000005C00 ; __unwind {
.text:0000000000005C00                 mov     r8, rcx
.text:0000000000005C03                 mov     rcx, rdx
.text:0000000000005C06                 mov     rdx, rsi
.text:0000000000005C09                 mov     rsi, rdi
.text:0000000000005C0C                 xor     edi, edi
.text:0000000000005C0E                 jmp     quotearg_n_custom_mem
.text:0000000000005C0E ; } // starts at 5C00
.text:0000000000005C0E quotearg_custom_mem endp
.text:0000000000005C0E
.text:0000000000005C0E ; ---------------------------------------------------------------------------
.text:0000000000005C13                 align 20h
.text:0000000000005C20
.text:0000000000005C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C20
.text:0000000000005C20
.text:0000000000005C20                 public quote_n_mem
.text:0000000000005C20 quote_n_mem     proc near
.text:0000000000005C20 ; __unwind {
.text:0000000000005C20                 lea     rcx, quote_quoting_options
.text:0000000000005C27                 jmp     quotearg_n_options
.text:0000000000005C27 ; } // starts at 5C20
.text:0000000000005C27 quote_n_mem     endp
.text:0000000000005C27
.text:0000000000005C27 ; ---------------------------------------------------------------------------
.text:0000000000005C2C                 align 10h
.text:0000000000005C30
.text:0000000000005C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C30
.text:0000000000005C30
.text:0000000000005C30                 public quote_mem
.text:0000000000005C30 quote_mem       proc near
.text:0000000000005C30 ; __unwind {
.text:0000000000005C30                 lea     rcx, quote_quoting_options
.text:0000000000005C37                 mov     rdx, rsi
.text:0000000000005C3A                 mov     rsi, rdi
.text:0000000000005C3D                 xor     edi, edi
.text:0000000000005C3F                 jmp     quotearg_n_options
.text:0000000000005C3F ; } // starts at 5C30
.text:0000000000005C3F quote_mem       endp
.text:0000000000005C3F
.text:0000000000005C3F ; ---------------------------------------------------------------------------
.text:0000000000005C44                 align 10h
.text:0000000000005C50
.text:0000000000005C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C50
.text:0000000000005C50
.text:0000000000005C50                 public quote_n
.text:0000000000005C50 quote_n         proc near
.text:0000000000005C50 ; __unwind {
.text:0000000000005C50                 lea     rcx, quote_quoting_options
.text:0000000000005C57                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C5E                 jmp     quotearg_n_options
.text:0000000000005C5E ; } // starts at 5C50
.text:0000000000005C5E quote_n         endp
.text:0000000000005C5E
.text:0000000000005C5E ; ---------------------------------------------------------------------------
.text:0000000000005C63                 align 10h
.text:0000000000005C70
.text:0000000000005C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C70
.text:0000000000005C70
.text:0000000000005C70                 public quote
.text:0000000000005C70 quote           proc near
.text:0000000000005C70 ; __unwind {
.text:0000000000005C70                 lea     rcx, quote_quoting_options
.text:0000000000005C77                 mov     rsi, rdi
.text:0000000000005C7A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005C81                 xor     edi, edi
.text:0000000000005C83                 jmp     quotearg_n_options
.text:0000000000005C83 ; } // starts at 5C70
.text:0000000000005C83 quote           endp
.text:0000000000005C83
.text:0000000000005C83 ; ---------------------------------------------------------------------------
.text:0000000000005C88                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90
.text:0000000000005C90 save_token      proc near               ; CODE XREF: readtokens0+67↓p
.text:0000000000005C90                                         ; readtokens0+A2↓p
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 push    r12
.text:0000000000005C92                 push    rbp
.text:0000000000005C93                 push    rbx
.text:0000000000005C94                 mov     rdx, [rdi+30h]
.text:0000000000005C98                 mov     rbx, rdi
.text:0000000000005C9B                 mov     r12, [rdi+28h]
.text:0000000000005C9F                 mov     rbp, rdx
.text:0000000000005CA2                 sub     rbp, r12
.text:0000000000005CA5                 sub     rbp, 1
.text:0000000000005CA9                 cmp     rdx, r12
.text:0000000000005CAC                 jz      loc_5D70
.text:0000000000005CB2
.text:0000000000005CB2 loc_5CB2:                               ; CODE XREF: save_token+E4↓j
.text:0000000000005CB2                 mov     rcx, [rbx+48h]
.text:0000000000005CB6                 lea     rax, [rdx+rcx]
.text:0000000000005CBA                 not     rcx
.text:0000000000005CBD                 mov     rdx, [rbx+38h]
.text:0000000000005CC1                 and     rax, rcx
.text:0000000000005CC4                 mov     rcx, [rbx+20h]
.text:0000000000005CC8                 mov     rsi, rax
.text:0000000000005CCB                 mov     rdi, rdx
.text:0000000000005CCE                 mov     [rbx+30h], rax
.text:0000000000005CD2                 sub     rsi, rcx
.text:0000000000005CD5                 sub     rdi, rcx
.text:0000000000005CD8                 cmp     rsi, rdi
.text:0000000000005CDB                 jbe     short loc_5CE4
.text:0000000000005CDD                 mov     [rbx+30h], rdx
.text:0000000000005CE1                 mov     rax, rdx
.text:0000000000005CE4
.text:0000000000005CE4 loc_5CE4:                               ; CODE XREF: save_token+4B↑j
.text:0000000000005CE4                 mov     [rbx+28h], rax
.text:0000000000005CE8                 mov     rdx, [rbx+88h]
.text:0000000000005CEF                 mov     rax, [rbx+90h]
.text:0000000000005CF6                 sub     rax, rdx
.text:0000000000005CF9                 cmp     rax, 7
.text:0000000000005CFD                 jbe     short loc_5D50
.text:0000000000005CFF
.text:0000000000005CFF loc_5CFF:                               ; CODE XREF: save_token+D5↓j
.text:0000000000005CFF                 mov     [rdx], r12
.text:0000000000005D02                 mov     rdx, [rbx+0E0h]
.text:0000000000005D09                 mov     rax, [rbx+0E8h]
.text:0000000000005D10                 add     qword ptr [rbx+88h], 8
.text:0000000000005D18                 sub     rax, rdx
.text:0000000000005D1B                 cmp     rax, 7
.text:0000000000005D1F                 ja      short loc_5D39
.text:0000000000005D21                 lea     rdi, [rbx+0C8h]
.text:0000000000005D28                 mov     esi, 8
.text:0000000000005D2D                 call    _obstack_newchunk
.text:0000000000005D32                 mov     rdx, [rbx+0E0h]
.text:0000000000005D39
.text:0000000000005D39 loc_5D39:                               ; CODE XREF: save_token+8F↑j
.text:0000000000005D39                 mov     [rdx], rbp
.text:0000000000005D3C                 add     qword ptr [rbx+0E0h], 8
.text:0000000000005D44                 add     qword ptr [rbx], 1
.text:0000000000005D48                 pop     rbx
.text:0000000000005D49                 pop     rbp
.text:0000000000005D4A                 pop     r12
.text:0000000000005D4C                 retn
.text:0000000000005D4C ; ---------------------------------------------------------------------------
.text:0000000000005D4D                 align 10h
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: save_token+6D↑j
.text:0000000000005D50                 lea     rdi, [rbx+70h]
.text:0000000000005D54                 mov     esi, 8
.text:0000000000005D59                 call    _obstack_newchunk
.text:0000000000005D5E                 mov     rdx, [rbx+88h]
.text:0000000000005D65                 jmp     short loc_5CFF
.text:0000000000005D65 ; ---------------------------------------------------------------------------
.text:0000000000005D67                 align 10h
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: save_token+1C↑j
.text:0000000000005D70                 or      byte ptr [rdi+68h], 2
.text:0000000000005D74                 jmp     loc_5CB2
.text:0000000000005D74 ; } // starts at 5C90
.text:0000000000005D74 save_token      endp
.text:0000000000005D74
.text:0000000000005D74 ; ---------------------------------------------------------------------------
.text:0000000000005D79                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80
.text:0000000000005D80                 public readtokens0_init
.text:0000000000005D80 readtokens0_init proc near              ; CODE XREF: main+957↑p
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 push    r12
.text:0000000000005D82                 mov     r12, cs:free_ptr
.text:0000000000005D89                 xor     edx, edx
.text:0000000000005D8B                 push    rbp
.text:0000000000005D8C                 mov     rbp, cs:malloc_ptr
.text:0000000000005D93                 xor     esi, esi
.text:0000000000005D95                 push    rbx
.text:0000000000005D96                 mov     rbx, rdi
.text:0000000000005D99                 mov     qword ptr [rdi], 0
.text:0000000000005DA0                 mov     qword ptr [rdi+8], 0
.text:0000000000005DA8                 mov     qword ptr [rdi+10h], 0
.text:0000000000005DB0                 lea     rdi, [rdi+18h]
.text:0000000000005DB4                 mov     r8, r12
.text:0000000000005DB7                 mov     rcx, rbp
.text:0000000000005DBA                 call    _obstack_begin
.text:0000000000005DBF                 lea     rdi, [rbx+70h]
.text:0000000000005DC3                 mov     r8, r12
.text:0000000000005DC6                 mov     rcx, rbp
.text:0000000000005DC9                 xor     edx, edx
.text:0000000000005DCB                 xor     esi, esi
.text:0000000000005DCD                 call    _obstack_begin
.text:0000000000005DD2                 lea     rdi, [rbx+0C8h]
.text:0000000000005DD9                 mov     r8, r12
.text:0000000000005DDC                 mov     rcx, rbp
.text:0000000000005DDF                 pop     rbx
.text:0000000000005DE0                 pop     rbp
.text:0000000000005DE1                 pop     r12
.text:0000000000005DE3                 xor     edx, edx
.text:0000000000005DE5                 xor     esi, esi
.text:0000000000005DE7                 jmp     _obstack_begin
.text:0000000000005DE7 ; } // starts at 5D80
.text:0000000000005DE7 readtokens0_init endp
.text:0000000000005DE7
.text:0000000000005DE7 ; ---------------------------------------------------------------------------
.text:0000000000005DEC                 align 10h
.text:0000000000005DF0
.text:0000000000005DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DF0
.text:0000000000005DF0
.text:0000000000005DF0                 public readtokens0_free
.text:0000000000005DF0 readtokens0_free proc near              ; CODE XREF: main+816↑p
.text:0000000000005DF0 ; __unwind {
.text:0000000000005DF0                 push    rbx
.text:0000000000005DF1                 mov     rbx, rdi
.text:0000000000005DF4                 lea     rdi, [rdi+18h]  ; obstack
.text:0000000000005DF8                 xor     esi, esi        ; block
.text:0000000000005DFA                 call    _obstack_free
.text:0000000000005DFF                 lea     rdi, [rbx+70h]  ; obstack
.text:0000000000005E03                 xor     esi, esi        ; block
.text:0000000000005E05                 call    _obstack_free
.text:0000000000005E0A                 lea     rdi, [rbx+0C8h] ; obstack
.text:0000000000005E11                 xor     esi, esi        ; block
.text:0000000000005E13                 pop     rbx
.text:0000000000005E14                 jmp     _obstack_free
.text:0000000000005E14 ; } // starts at 5DF0
.text:0000000000005E14 readtokens0_free endp
.text:0000000000005E14
.text:0000000000005E14 ; ---------------------------------------------------------------------------
.text:0000000000005E19                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20
.text:0000000000005E20 ; __int64 __fastcall readtokens0(FILE *stream)
.text:0000000000005E20                 public readtokens0
.text:0000000000005E20 readtokens0     proc near               ; CODE XREF: main+962↑p
.text:0000000000005E20
.text:0000000000005E20 var_1C          = dword ptr -1Ch
.text:0000000000005E20
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 push    r12
.text:0000000000005E22                 push    rbp
.text:0000000000005E23                 lea     r12, [rsi+18h]
.text:0000000000005E27                 push    rbx
.text:0000000000005E28                 mov     rbp, rdi
.text:0000000000005E2B                 mov     rbx, rsi
.text:0000000000005E2E                 sub     rsp, 10h
.text:0000000000005E32                 jmp     short loc_5E46
.text:0000000000005E32 ; ---------------------------------------------------------------------------
.text:0000000000005E34                 align 8
.text:0000000000005E38
.text:0000000000005E38 loc_5E38:                               ; CODE XREF: readtokens0+3B↓j
.text:0000000000005E38                 lea     rcx, [rdx+1]
.text:0000000000005E3C                 test    eax, eax
.text:0000000000005E3E                 mov     [rbx+30h], rcx
.text:0000000000005E42                 mov     [rdx], al
.text:0000000000005E44                 jz      short loc_5E84
.text:0000000000005E46
.text:0000000000005E46 loc_5E46:                               ; CODE XREF: readtokens0+12↑j
.text:0000000000005E46                                         ; readtokens0+62↓j
.text:0000000000005E46                 mov     rdi, rbp        ; stream
.text:0000000000005E49                 call    _fgetc
.text:0000000000005E4E                 cmp     eax, 0FFFFFFFFh
.text:0000000000005E51                 jz      short loc_5EA0
.text:0000000000005E53
.text:0000000000005E53 loc_5E53:                               ; CODE XREF: readtokens0+77↓j
.text:0000000000005E53                 mov     rdx, [rbx+30h]
.text:0000000000005E57                 cmp     [rbx+38h], rdx
.text:0000000000005E5B                 jnz     short loc_5E38
.text:0000000000005E5D                 mov     esi, 1
.text:0000000000005E62                 mov     rdi, r12
.text:0000000000005E65                 mov     [rsp+28h+var_1C], eax
.text:0000000000005E69                 call    _obstack_newchunk
.text:0000000000005E6E                 mov     rdx, [rbx+30h]
.text:0000000000005E72                 mov     eax, [rsp+28h+var_1C]
.text:0000000000005E76                 lea     rcx, [rdx+1]
.text:0000000000005E7A                 test    eax, eax
.text:0000000000005E7C                 mov     [rbx+30h], rcx
.text:0000000000005E80                 mov     [rdx], al
.text:0000000000005E82                 jnz     short loc_5E46
.text:0000000000005E84
.text:0000000000005E84 loc_5E84:                               ; CODE XREF: readtokens0+24↑j
.text:0000000000005E84                 mov     rdi, rbx
.text:0000000000005E87                 call    save_token
.text:0000000000005E8C                 mov     rdi, rbp        ; stream
.text:0000000000005E8F                 call    _fgetc
.text:0000000000005E94                 cmp     eax, 0FFFFFFFFh
.text:0000000000005E97                 jnz     short loc_5E53
.text:0000000000005E99                 nop     dword ptr [rax+00000000h]
.text:0000000000005EA0
.text:0000000000005EA0 loc_5EA0:                               ; CODE XREF: readtokens0+31↑j
.text:0000000000005EA0                 mov     rax, [rbx+30h]
.text:0000000000005EA4                 cmp     [rbx+28h], rax
.text:0000000000005EA8                 jz      short loc_5EC7
.text:0000000000005EAA                 cmp     [rbx+38h], rax
.text:0000000000005EAE                 jz      loc_6010
.text:0000000000005EB4
.text:0000000000005EB4 loc_5EB4:                               ; CODE XREF: readtokens0+202↓j
.text:0000000000005EB4                 lea     rdx, [rax+1]
.text:0000000000005EB8                 mov     rdi, rbx
.text:0000000000005EBB                 mov     [rbx+30h], rdx
.text:0000000000005EBF                 mov     byte ptr [rax], 0
.text:0000000000005EC2                 call    save_token
.text:0000000000005EC7
.text:0000000000005EC7 loc_5EC7:                               ; CODE XREF: readtokens0+88↑j
.text:0000000000005EC7                 mov     rdx, [rbx+88h]
.text:0000000000005ECE                 mov     rax, [rbx+90h]
.text:0000000000005ED5                 sub     rax, rdx
.text:0000000000005ED8                 cmp     rax, 7
.text:0000000000005EDC                 jbe     loc_5FD0
.text:0000000000005EE2
.text:0000000000005EE2 loc_5EE2:                               ; CODE XREF: readtokens0+1C5↓j
.text:0000000000005EE2                 mov     qword ptr [rdx], 0
.text:0000000000005EE9                 mov     rax, [rbx+88h]
.text:0000000000005EF0                 mov     rsi, [rbx+80h]
.text:0000000000005EF7                 lea     rdx, [rax+8]
.text:0000000000005EFB                 cmp     rdx, rsi
.text:0000000000005EFE                 mov     [rbx+88h], rdx
.text:0000000000005F05                 jz      loc_6000
.text:0000000000005F0B
.text:0000000000005F0B loc_5F0B:                               ; CODE XREF: readtokens0+1E7↓j
.text:0000000000005F0B                 mov     rcx, [rbx+0A0h]
.text:0000000000005F12                 lea     rax, [rdx+rcx]
.text:0000000000005F16                 not     rcx
.text:0000000000005F19                 mov     rdx, [rbx+78h]
.text:0000000000005F1D                 and     rax, rcx
.text:0000000000005F20                 mov     rcx, [rbx+90h]
.text:0000000000005F27                 mov     rdi, rax
.text:0000000000005F2A                 mov     [rbx+88h], rax
.text:0000000000005F31                 sub     rdi, rdx
.text:0000000000005F34                 mov     r8, rcx
.text:0000000000005F37                 sub     r8, rdx
.text:0000000000005F3A                 cmp     rdi, r8
.text:0000000000005F3D                 jbe     short loc_5F49
.text:0000000000005F3F                 mov     [rbx+88h], rcx
.text:0000000000005F46                 mov     rax, rcx
.text:0000000000005F49
.text:0000000000005F49 loc_5F49:                               ; CODE XREF: readtokens0+11D↑j
.text:0000000000005F49                 mov     [rbx+8], rsi
.text:0000000000005F4D                 mov     rdx, [rbx+0E0h]
.text:0000000000005F54                 mov     rsi, [rbx+0D8h]
.text:0000000000005F5B                 mov     [rbx+80h], rax
.text:0000000000005F62                 cmp     rdx, rsi
.text:0000000000005F65                 jz      loc_5FF0
.text:0000000000005F6B
.text:0000000000005F6B loc_5F6B:                               ; CODE XREF: readtokens0+1D7↓j
.text:0000000000005F6B                 mov     rcx, [rbx+0F8h]
.text:0000000000005F72                 lea     rax, [rdx+rcx]
.text:0000000000005F76                 not     rcx
.text:0000000000005F79                 mov     rdx, [rbx+0E8h]
.text:0000000000005F80                 and     rax, rcx
.text:0000000000005F83                 mov     rcx, [rbx+0D0h]
.text:0000000000005F8A                 mov     rdi, rax
.text:0000000000005F8D                 mov     r9, rdx
.text:0000000000005F90                 mov     [rbx+0E0h], rax
.text:0000000000005F97                 sub     rdi, rcx
.text:0000000000005F9A                 sub     r9, rcx
.text:0000000000005F9D                 cmp     rdi, r9
.text:0000000000005FA0                 jbe     short loc_5FAC
.text:0000000000005FA2                 mov     [rbx+0E0h], rdx
.text:0000000000005FA9                 mov     rax, rdx
.text:0000000000005FAC
.text:0000000000005FAC loc_5FAC:                               ; CODE XREF: readtokens0+180↑j
.text:0000000000005FAC                 mov     [rbx+0D8h], rax
.text:0000000000005FB3                 mov     [rbx+10h], rsi
.text:0000000000005FB7                 mov     rdi, rbp        ; stream
.text:0000000000005FBA                 call    _ferror
.text:0000000000005FBF                 test    eax, eax
.text:0000000000005FC1                 setz    al
.text:0000000000005FC4                 add     rsp, 10h
.text:0000000000005FC8                 pop     rbx
.text:0000000000005FC9                 pop     rbp
.text:0000000000005FCA                 pop     r12
.text:0000000000005FCC                 retn
.text:0000000000005FCC ; ---------------------------------------------------------------------------
.text:0000000000005FCD                 align 10h
.text:0000000000005FD0
.text:0000000000005FD0 loc_5FD0:                               ; CODE XREF: readtokens0+BC↑j
.text:0000000000005FD0                 lea     rdi, [rbx+70h]
.text:0000000000005FD4                 mov     esi, 8
.text:0000000000005FD9                 call    _obstack_newchunk
.text:0000000000005FDE                 mov     rdx, [rbx+88h]
.text:0000000000005FE5                 jmp     loc_5EE2
.text:0000000000005FE5 ; ---------------------------------------------------------------------------
.text:0000000000005FEA                 align 10h
.text:0000000000005FF0
.text:0000000000005FF0 loc_5FF0:                               ; CODE XREF: readtokens0+145↑j
.text:0000000000005FF0                 or      byte ptr [rbx+118h], 2
.text:0000000000005FF7                 jmp     loc_5F6B
.text:0000000000005FF7 ; ---------------------------------------------------------------------------
.text:0000000000005FFC                 align 20h
.text:0000000000006000
.text:0000000000006000 loc_6000:                               ; CODE XREF: readtokens0+E5↑j
.text:0000000000006000                 or      byte ptr [rbx+0C0h], 2
.text:0000000000006007                 jmp     loc_5F0B
.text:0000000000006007 ; ---------------------------------------------------------------------------
.text:000000000000600C                 align 10h
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: readtokens0+8E↑j
.text:0000000000006010                 lea     rdi, [rbx+18h]
.text:0000000000006014                 mov     esi, 1
.text:0000000000006019                 call    _obstack_newchunk
.text:000000000000601E                 mov     rax, [rbx+30h]
.text:0000000000006022                 jmp     loc_5EB4
.text:0000000000006022 ; } // starts at 5E20
.text:0000000000006022 readtokens0     endp
.text:0000000000006022
.text:0000000000006022 ; ---------------------------------------------------------------------------
.text:0000000000006027                 align 10h
.text:0000000000006030
.text:0000000000006030 ; =============== S U B R O U T I N E =======================================
.text:0000000000006030
.text:0000000000006030
.text:0000000000006030 ; __int64 __fastcall safe_read(int fd, void *buf, size_t nbytes)
.text:0000000000006030                 public safe_read
.text:0000000000006030 safe_read       proc near               ; CODE XREF: wc+209↑p
.text:0000000000006030                                         ; wc+30C↑p ...
.text:0000000000006030 ; __unwind {
.text:0000000000006030                 push    r13
.text:0000000000006032                 push    r12
.text:0000000000006034                 mov     r13d, edi
.text:0000000000006037                 push    rbp
.text:0000000000006038                 push    rbx
.text:0000000000006039                 mov     r12, rsi
.text:000000000000603C                 mov     rbx, rdx
.text:000000000000603F                 sub     rsp, 8
.text:0000000000006043                 nop     dword ptr [rax+rax+00h]
.text:0000000000006048
.text:0000000000006048 loc_6048:                               ; CODE XREF: safe_read+38↓j
.text:0000000000006048                                         ; safe_read+4D↓j
.text:0000000000006048                 mov     rdx, rbx        ; nbytes
.text:000000000000604B                 mov     rsi, r12        ; buf
.text:000000000000604E                 mov     edi, r13d       ; fd
.text:0000000000006051                 call    _read
.text:0000000000006056                 test    rax, rax
.text:0000000000006059                 mov     rbp, rax
.text:000000000000605C                 jns     short loc_6080
.text:000000000000605E                 call    ___errno_location
.text:0000000000006063                 mov     eax, [rax]
.text:0000000000006065                 cmp     eax, 4
.text:0000000000006068                 jz      short loc_6048
.text:000000000000606A                 cmp     rbx, 7FF00000h
.text:0000000000006071                 jbe     short loc_6080
.text:0000000000006073                 cmp     eax, 16h
.text:0000000000006076                 jnz     short loc_6080
.text:0000000000006078                 mov     ebx, 7FF00000h
.text:000000000000607D                 jmp     short loc_6048
.text:000000000000607D ; ---------------------------------------------------------------------------
.text:000000000000607F                 align 20h
.text:0000000000006080
.text:0000000000006080 loc_6080:                               ; CODE XREF: safe_read+2C↑j
.text:0000000000006080                                         ; safe_read+41↑j ...
.text:0000000000006080                 add     rsp, 8
.text:0000000000006084                 mov     rax, rbp
.text:0000000000006087                 pop     rbx
.text:0000000000006088                 pop     rbp
.text:0000000000006089                 pop     r12
.text:000000000000608B                 pop     r13
.text:000000000000608D                 retn
.text:000000000000608D ; } // starts at 6030
.text:000000000000608D safe_read       endp
.text:000000000000608D
.text:000000000000608D ; ---------------------------------------------------------------------------
.text:000000000000608E                 align 10h
.text:0000000000006090
.text:0000000000006090 ; =============== S U B R O U T I N E =======================================
.text:0000000000006090
.text:0000000000006090
.text:0000000000006090 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000006090                 public version_etc_arn
.text:0000000000006090 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_64CB↓j
.text:0000000000006090                                         ; version_etc_va:loc_651B↓p ...
.text:0000000000006090
.text:0000000000006090 var_58          = qword ptr -58h
.text:0000000000006090 var_50          = qword ptr -50h
.text:0000000000006090 var_48          = qword ptr -48h
.text:0000000000006090 var_40          = qword ptr -40h
.text:0000000000006090
.text:0000000000006090 ; __unwind {
.text:0000000000006090                 push    r15
.text:0000000000006092                 push    r14
.text:0000000000006094                 push    r13
.text:0000000000006096                 push    r12
.text:0000000000006098                 mov     r12, r9
.text:000000000000609B                 push    rbp
.text:000000000000609C                 push    rbx
.text:000000000000609D                 mov     rbp, rdi
.text:00000000000060A0                 mov     rbx, r8
.text:00000000000060A3                 sub     rsp, 28h
.text:00000000000060A7                 test    rsi, rsi
.text:00000000000060AA                 jz      loc_61C8
.text:00000000000060B0                 mov     r8, rdx
.text:00000000000060B3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000060BA                 mov     r9, rcx
.text:00000000000060BD                 xor     eax, eax
.text:00000000000060BF                 mov     rcx, rsi
.text:00000000000060C2                 mov     esi, 1
.text:00000000000060C7                 call    ___fprintf_chk
.text:00000000000060CC
.text:00000000000060CC loc_60CC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000060CC                 lea     rsi, aC_0       ; "(C)"
.text:00000000000060D3                 xor     edi, edi        ; domainname
.text:00000000000060D5                 mov     edx, 5          ; category
.text:00000000000060DA                 call    _dcgettext
.text:00000000000060DF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000060E6                 mov     rcx, rax
.text:00000000000060E9                 mov     r8d, 7E3h
.text:00000000000060EF                 mov     esi, 1
.text:00000000000060F4                 mov     rdi, rbp
.text:00000000000060F7                 xor     eax, eax
.text:00000000000060F9                 call    ___fprintf_chk
.text:00000000000060FE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000006105                 xor     edi, edi        ; domainname
.text:0000000000006107                 mov     edx, 5          ; category
.text:000000000000610C                 call    _dcgettext
.text:0000000000006111                 mov     rsi, rbp        ; stream
.text:0000000000006114                 mov     rdi, rax        ; s
.text:0000000000006117                 call    _fputs_unlocked
.text:000000000000611C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000006120                 ja      def_6134        ; jumptable 0000000000006134 default case
.text:0000000000006126                 lea     rdx, jpt_6134
.text:000000000000612D                 movsxd  rax, ds:(jpt_6134 - 80E8h)[rdx+r12*4]
.text:0000000000006131                 add     rax, rdx
.text:0000000000006134                 jmp     rax             ; switch jump
.text:0000000000006134 ; ---------------------------------------------------------------------------
.text:0000000000006136                 align 20h
.text:0000000000006140
.text:0000000000006140 loc_6140:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006140                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:0000000000006140                 mov     r9, [rbx+38h]   ; jumptable 0000000000006134 case 8
.text:0000000000006144                 mov     rax, [rbx+10h]
.text:0000000000006148                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000614F                 mov     r8, [rbx+8]
.text:0000000000006153                 mov     edx, 5          ; category
.text:0000000000006158                 xor     edi, edi        ; domainname
.text:000000000000615A                 mov     r13, [rbx+30h]
.text:000000000000615E                 mov     r12, [rbx+28h]
.text:0000000000006162                 mov     [rsp+58h+var_48], r9
.text:0000000000006167                 mov     r15, [rbx+20h]
.text:000000000000616B                 mov     r14, [rbx+18h]
.text:000000000000616F                 mov     [rsp+58h+var_58], rax
.text:0000000000006173                 mov     [rsp+58h+var_50], r8
.text:0000000000006178                 mov     rbx, [rbx]
.text:000000000000617B                 call    _dcgettext
.text:0000000000006180                 sub     rsp, 8
.text:0000000000006184
.text:0000000000006184 loc_6184:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000006184                 mov     r9, [rsp+60h+var_48]
.text:0000000000006189                 mov     rdx, rax
.text:000000000000618C                 mov     rcx, rbx
.text:000000000000618F                 mov     esi, 1
.text:0000000000006194                 mov     rdi, rbp
.text:0000000000006197                 xor     eax, eax
.text:0000000000006199                 push    r9
.text:000000000000619B                 push    r13
.text:000000000000619D                 push    r12
.text:000000000000619F                 push    r15
.text:00000000000061A1                 push    r14
.text:00000000000061A3                 mov     r9, [rsp+88h+var_58]
.text:00000000000061A8                 mov     r8, [rsp+88h+var_50]
.text:00000000000061AD                 call    ___fprintf_chk
.text:00000000000061B2                 add     rsp, 30h
.text:00000000000061B6
.text:00000000000061B6 loc_61B6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000061B6                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:00000000000061B6                 add     rsp, 28h        ; jumptable 0000000000006134 case 0
.text:00000000000061BA                 pop     rbx
.text:00000000000061BB                 pop     rbp
.text:00000000000061BC                 pop     r12
.text:00000000000061BE                 pop     r13
.text:00000000000061C0                 pop     r14
.text:00000000000061C2                 pop     r15
.text:00000000000061C4                 retn
.text:00000000000061C4 ; ---------------------------------------------------------------------------
.text:00000000000061C5                 align 8
.text:00000000000061C8
.text:00000000000061C8 loc_61C8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000061C8                 mov     r8, rcx
.text:00000000000061CB                 mov     rcx, rdx
.text:00000000000061CE                 lea     rdx, aSS        ; "%s %s\n"
.text:00000000000061D5                 mov     esi, 1
.text:00000000000061DA                 xor     eax, eax
.text:00000000000061DC                 call    ___fprintf_chk
.text:00000000000061E1                 jmp     loc_60CC
.text:00000000000061E1 ; ---------------------------------------------------------------------------
.text:00000000000061E6                 align 10h
.text:00000000000061F0
.text:00000000000061F0 loc_61F0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000061F0                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:00000000000061F0                 mov     r10, [rbx+40h]  ; jumptable 0000000000006134 case 9
.text:00000000000061F4                 mov     r9, [rbx+38h]
.text:00000000000061F8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000061FF                 mov     rax, [rbx+10h]
.text:0000000000006203                 mov     r8, [rbx+8]
.text:0000000000006207                 mov     edx, 5          ; category
.text:000000000000620C                 mov     r13, [rbx+30h]
.text:0000000000006210                 mov     r12, [rbx+28h]
.text:0000000000006214                 mov     r15, [rbx+20h]
.text:0000000000006218                 mov     r14, [rbx+18h]
.text:000000000000621C                 mov     rbx, [rbx]
.text:000000000000621F                 mov     [rsp+58h+var_40], r10
.text:0000000000006224                 mov     [rsp+58h+var_48], r9
.text:0000000000006229                 mov     [rsp+58h+var_58], rax
.text:000000000000622D                 mov     [rsp+58h+var_50], r8
.text:0000000000006232
.text:0000000000006232 loc_6232:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000006232                 xor     edi, edi        ; domainname
.text:0000000000006234                 call    _dcgettext
.text:0000000000006239                 mov     r10, [rsp+58h+var_40]
.text:000000000000623E                 push    r10
.text:0000000000006240                 jmp     loc_6184
.text:0000000000006240 ; ---------------------------------------------------------------------------
.text:0000000000006245                 align 8
.text:0000000000006248
.text:0000000000006248 loc_6248:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006248                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:0000000000006248                 mov     rbx, [rbx]      ; jumptable 0000000000006134 case 1
.text:000000000000624B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000006252                 mov     edx, 5          ; category
.text:0000000000006257                 xor     edi, edi        ; domainname
.text:0000000000006259                 call    _dcgettext
.text:000000000000625E                 add     rsp, 28h
.text:0000000000006262                 mov     rcx, rbx
.text:0000000000006265                 mov     rdi, rbp
.text:0000000000006268                 pop     rbx
.text:0000000000006269                 pop     rbp
.text:000000000000626A                 pop     r12
.text:000000000000626C                 pop     r13
.text:000000000000626E                 pop     r14
.text:0000000000006270                 pop     r15
.text:0000000000006272                 mov     rdx, rax
.text:0000000000006275                 mov     esi, 1
.text:000000000000627A                 xor     eax, eax
.text:000000000000627C                 jmp     ___fprintf_chk
.text:000000000000627C ; ---------------------------------------------------------------------------
.text:0000000000006281                 align 8
.text:0000000000006288
.text:0000000000006288 loc_6288:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006288                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:0000000000006288                 mov     r12, [rbx+8]    ; jumptable 0000000000006134 case 2
.text:000000000000628C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000006293                 mov     rbx, [rbx]
.text:0000000000006296                 mov     edx, 5          ; category
.text:000000000000629B                 xor     edi, edi        ; domainname
.text:000000000000629D                 call    _dcgettext
.text:00000000000062A2                 add     rsp, 28h
.text:00000000000062A6                 mov     r8, r12
.text:00000000000062A9                 mov     rcx, rbx
.text:00000000000062AC                 mov     rdi, rbp
.text:00000000000062AF                 mov     rdx, rax
.text:00000000000062B2                 mov     esi, 1
.text:00000000000062B7                 pop     rbx
.text:00000000000062B8                 pop     rbp
.text:00000000000062B9                 pop     r12
.text:00000000000062BB                 pop     r13
.text:00000000000062BD                 pop     r14
.text:00000000000062BF                 pop     r15
.text:00000000000062C1                 xor     eax, eax
.text:00000000000062C3                 jmp     ___fprintf_chk
.text:00000000000062C3 ; ---------------------------------------------------------------------------
.text:00000000000062C8                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000062D0                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:00000000000062D0                 mov     r13, [rbx+10h]  ; jumptable 0000000000006134 case 3
.text:00000000000062D4                 mov     r12, [rbx+8]
.text:00000000000062D8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000062DF                 mov     rbx, [rbx]
.text:00000000000062E2                 mov     edx, 5          ; category
.text:00000000000062E7                 xor     edi, edi        ; domainname
.text:00000000000062E9                 call    _dcgettext
.text:00000000000062EE                 add     rsp, 28h
.text:00000000000062F2                 mov     r9, r13
.text:00000000000062F5                 mov     r8, r12
.text:00000000000062F8                 mov     rcx, rbx
.text:00000000000062FB                 mov     rdi, rbp
.text:00000000000062FE                 mov     rdx, rax
.text:0000000000006301                 pop     rbx
.text:0000000000006302                 pop     rbp
.text:0000000000006303                 pop     r12
.text:0000000000006305                 pop     r13
.text:0000000000006307                 pop     r14
.text:0000000000006309                 pop     r15
.text:000000000000630B                 mov     esi, 1
.text:0000000000006310                 xor     eax, eax
.text:0000000000006312                 jmp     ___fprintf_chk
.text:0000000000006312 ; ---------------------------------------------------------------------------
.text:0000000000006317                 align 20h
.text:0000000000006320
.text:0000000000006320 loc_6320:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006320                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:0000000000006320                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000006134 case 4
.text:0000000000006327                 mov     edx, 5          ; category
.text:000000000000632C                 xor     edi, edi        ; domainname
.text:000000000000632E                 mov     r14, [rbx+18h]
.text:0000000000006332                 mov     r13, [rbx+10h]
.text:0000000000006336                 mov     r12, [rbx+8]
.text:000000000000633A                 mov     rbx, [rbx]
.text:000000000000633D                 call    _dcgettext
.text:0000000000006342                 sub     rsp, 8
.text:0000000000006346
.text:0000000000006346 loc_6346:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000006346                 push    r14
.text:0000000000006348                 mov     rdx, rax
.text:000000000000634B                 mov     r9, r13
.text:000000000000634E                 mov     r8, r12
.text:0000000000006351                 mov     rcx, rbx
.text:0000000000006354                 mov     rdi, rbp
.text:0000000000006357                 mov     esi, 1
.text:000000000000635C                 xor     eax, eax
.text:000000000000635E                 call    ___fprintf_chk
.text:0000000000006363                 pop     rax
.text:0000000000006364                 pop     rdx
.text:0000000000006365                 add     rsp, 28h
.text:0000000000006369                 pop     rbx
.text:000000000000636A                 pop     rbp
.text:000000000000636B                 pop     r12
.text:000000000000636D                 pop     r13
.text:000000000000636F                 pop     r14
.text:0000000000006371                 pop     r15
.text:0000000000006373                 retn
.text:0000000000006373 ; ---------------------------------------------------------------------------
.text:0000000000006374                 align 8
.text:0000000000006378
.text:0000000000006378 loc_6378:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006378                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:0000000000006378                 mov     r15, [rbx+20h]  ; jumptable 0000000000006134 case 5
.text:000000000000637C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006383                 mov     edx, 5          ; category
.text:0000000000006388                 xor     edi, edi        ; domainname
.text:000000000000638A                 mov     r14, [rbx+18h]
.text:000000000000638E                 mov     r13, [rbx+10h]
.text:0000000000006392                 mov     r12, [rbx+8]
.text:0000000000006396                 mov     rbx, [rbx]
.text:0000000000006399                 call    _dcgettext
.text:000000000000639E                 push    r15
.text:00000000000063A0                 jmp     short loc_6346
.text:00000000000063A0 ; ---------------------------------------------------------------------------
.text:00000000000063A2                 align 8
.text:00000000000063A8
.text:00000000000063A8 loc_63A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000063A8                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:00000000000063A8                 mov     r8, [rbx+8]     ; jumptable 0000000000006134 case 6
.text:00000000000063AC                 mov     r12, [rbx+28h]
.text:00000000000063B0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000063B7                 mov     r15, [rbx+20h]
.text:00000000000063BB                 mov     r14, [rbx+18h]
.text:00000000000063BF                 mov     edx, 5          ; category
.text:00000000000063C4                 mov     r13, [rbx+10h]
.text:00000000000063C8                 xor     edi, edi        ; domainname
.text:00000000000063CA                 mov     rbx, [rbx]
.text:00000000000063CD                 mov     [rsp+58h+var_58], r8
.text:00000000000063D1                 call    _dcgettext
.text:00000000000063D6                 sub     rsp, 8
.text:00000000000063DA                 mov     r9, r13
.text:00000000000063DD                 push    r12
.text:00000000000063DF                 push    r15
.text:00000000000063E1                 push    r14
.text:00000000000063E3
.text:00000000000063E3 loc_63E3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:00000000000063E3                 mov     r8, [rsp+78h+var_58]
.text:00000000000063E8                 mov     rcx, rbx
.text:00000000000063EB                 mov     rdx, rax
.text:00000000000063EE                 mov     rdi, rbp
.text:00000000000063F1                 mov     esi, 1
.text:00000000000063F6                 xor     eax, eax
.text:00000000000063F8                 call    ___fprintf_chk
.text:00000000000063FD                 add     rsp, 20h
.text:0000000000006401                 add     rsp, 28h
.text:0000000000006405                 pop     rbx
.text:0000000000006406                 pop     rbp
.text:0000000000006407                 pop     r12
.text:0000000000006409                 pop     r13
.text:000000000000640B                 pop     r14
.text:000000000000640D                 pop     r15
.text:000000000000640F                 retn
.text:0000000000006410 ; ---------------------------------------------------------------------------
.text:0000000000006410
.text:0000000000006410 loc_6410:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006410                                         ; DATA XREF: .rodata:jpt_6134↓o
.text:0000000000006410                 mov     r9, [rbx+10h]   ; jumptable 0000000000006134 case 7
.text:0000000000006414                 mov     r13, [rbx+30h]
.text:0000000000006418                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000641F                 mov     r12, [rbx+28h]
.text:0000000000006423                 mov     r15, [rbx+20h]
.text:0000000000006427                 mov     edx, 5          ; category
.text:000000000000642C                 mov     r14, [rbx+18h]
.text:0000000000006430                 mov     r8, [rbx+8]
.text:0000000000006434                 xor     edi, edi        ; domainname
.text:0000000000006436                 mov     [rsp+58h+var_50], r9
.text:000000000000643B                 mov     rbx, [rbx]
.text:000000000000643E                 mov     [rsp+58h+var_58], r8
.text:0000000000006442                 call    _dcgettext
.text:0000000000006447                 push    r13
.text:0000000000006449                 push    r12
.text:000000000000644B                 push    r15
.text:000000000000644D                 push    r14
.text:000000000000644F                 mov     r9, [rsp+78h+var_50]
.text:0000000000006454                 jmp     short loc_63E3
.text:0000000000006454 ; ---------------------------------------------------------------------------
.text:0000000000006456                 align 20h
.text:0000000000006460
.text:0000000000006460 def_6134:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006460                 mov     r10, [rbx+40h]  ; jumptable 0000000000006134 default case
.text:0000000000006464                 mov     r9, [rbx+38h]
.text:0000000000006468                 mov     edx, 5
.text:000000000000646D                 mov     rax, [rbx+10h]
.text:0000000000006471                 mov     r8, [rbx+8]
.text:0000000000006475                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000647C                 mov     r13, [rbx+30h]
.text:0000000000006480                 mov     r12, [rbx+28h]
.text:0000000000006484                 mov     r15, [rbx+20h]
.text:0000000000006488                 mov     r14, [rbx+18h]
.text:000000000000648C                 mov     [rsp+58h+var_40], r10
.text:0000000000006491                 mov     [rsp+58h+var_48], r9
.text:0000000000006496                 mov     [rsp+58h+var_58], rax
.text:000000000000649A                 mov     [rsp+58h+var_50], r8
.text:000000000000649F                 mov     rbx, [rbx]
.text:00000000000064A2                 jmp     loc_6232
.text:00000000000064A2 ; } // starts at 6090
.text:00000000000064A2 version_etc_arn endp
.text:00000000000064A2
.text:00000000000064A2 ; ---------------------------------------------------------------------------
.text:00000000000064A7                 align 10h
.text:00000000000064B0
.text:00000000000064B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064B0
.text:00000000000064B0 ; Attributes: info_from_lumina
.text:00000000000064B0
.text:00000000000064B0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000064B0                 public version_etc_ar
.text:00000000000064B0 version_etc_ar  proc near
.text:00000000000064B0 ; __unwind {
.text:00000000000064B0                 xor     r9d, r9d
.text:00000000000064B3                 cmp     qword ptr [r8], 0
.text:00000000000064B7                 jz      short loc_64CB
.text:00000000000064B9                 nop     dword ptr [rax+00000000h]
.text:00000000000064C0
.text:00000000000064C0 loc_64C0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000064C0                 add     r9, 1
.text:00000000000064C4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000064C9                 jnz     short loc_64C0
.text:00000000000064CB
.text:00000000000064CB loc_64CB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000064CB                 jmp     version_etc_arn
.text:00000000000064CB ; } // starts at 64B0
.text:00000000000064CB version_etc_ar  endp
.text:00000000000064CB
.text:00000000000064D0
.text:00000000000064D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064D0
.text:00000000000064D0 ; Attributes: info_from_lumina
.text:00000000000064D0
.text:00000000000064D0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000064D0                 public version_etc_va
.text:00000000000064D0 version_etc_va  proc near
.text:00000000000064D0
.text:00000000000064D0 authtab         = qword ptr -68h
.text:00000000000064D0 var_10          = qword ptr -10h
.text:00000000000064D0
.text:00000000000064D0 ; __unwind {
.text:00000000000064D0                 sub     rsp, 68h
.text:00000000000064D4                 mov     r10, r8
.text:00000000000064D7                 xor     r9d, r9d
.text:00000000000064DA                 mov     rax, fs:28h
.text:00000000000064E3                 mov     [rsp+68h+var_10], rax
.text:00000000000064E8                 xor     eax, eax
.text:00000000000064EA                 mov     r8, rsp
.text:00000000000064ED                 nop     dword ptr [rax]
.text:00000000000064F0
.text:00000000000064F0 loc_64F0:                               ; CODE XREF: version_etc_va+49↓j
.text:00000000000064F0                 mov     eax, [r10]
.text:00000000000064F3                 cmp     eax, 2Fh ; '/'
.text:00000000000064F6                 ja      short loc_653A
.text:00000000000064F8                 mov     r11d, eax
.text:00000000000064FB                 add     r11, [r10+10h]
.text:00000000000064FF                 add     eax, 8
.text:0000000000006502                 mov     [r10], eax
.text:0000000000006505
.text:0000000000006505 loc_6505:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006505                 mov     rax, [r11]
.text:0000000000006508                 test    rax, rax
.text:000000000000650B                 mov     [r8+r9*8], rax
.text:000000000000650F                 jz      short loc_651B
.text:0000000000006511                 add     r9, 1
.text:0000000000006515                 cmp     r9, 0Ah
.text:0000000000006519                 jnz     short loc_64F0
.text:000000000000651B
.text:000000000000651B loc_651B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000651B                 call    version_etc_arn
.text:0000000000006520                 mov     rax, [rsp+68h+var_10]
.text:0000000000006525                 xor     rax, fs:28h
.text:000000000000652E                 jnz     short loc_6535
.text:0000000000006530                 add     rsp, 68h
.text:0000000000006534                 retn
.text:0000000000006535 ; ---------------------------------------------------------------------------
.text:0000000000006535
.text:0000000000006535 loc_6535:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006535                 call    ___stack_chk_fail
.text:000000000000653A ; ---------------------------------------------------------------------------
.text:000000000000653A
.text:000000000000653A loc_653A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000653A                 mov     r11, [r10+8]
.text:000000000000653E                 lea     rax, [r11+8]
.text:0000000000006542                 mov     [r10+8], rax
.text:0000000000006546                 jmp     short loc_6505
.text:0000000000006546 ; } // starts at 64D0
.text:0000000000006546 version_etc_va  endp
.text:0000000000006546
.text:0000000000006546 ; ---------------------------------------------------------------------------
.text:0000000000006548                 align 10h
.text:0000000000006550
.text:0000000000006550 ; =============== S U B R O U T I N E =======================================
.text:0000000000006550
.text:0000000000006550 ; Attributes: info_from_lumina
.text:0000000000006550
.text:0000000000006550 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000006550                 public version_etc
.text:0000000000006550 version_etc     proc near               ; CODE XREF: main+1C2↑p
.text:0000000000006550
.text:0000000000006550 var_C0          = dword ptr -0C0h
.text:0000000000006550 var_B8          = qword ptr -0B8h
.text:0000000000006550 var_B0          = qword ptr -0B0h
.text:0000000000006550 var_A8          = byte ptr -0A8h
.text:0000000000006550 var_50          = qword ptr -50h
.text:0000000000006550 var_48          = byte ptr -48h
.text:0000000000006550 var_28          = qword ptr -28h
.text:0000000000006550 var_20          = qword ptr -20h
.text:0000000000006550 arg_0           = byte ptr  8
.text:0000000000006550
.text:0000000000006550 ; __unwind {
.text:0000000000006550                 push    rbp
.text:0000000000006551                 push    rbx
.text:0000000000006552                 mov     r10d, 20h ; ' '
.text:0000000000006558                 xor     r11d, r11d
.text:000000000000655B                 sub     rsp, 0B8h
.text:0000000000006562                 mov     rax, fs:28h
.text:000000000000656B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006570                 xor     eax, eax
.text:0000000000006572                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000657A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006582                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000658A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000658F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006597                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000659F                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000065A4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000065AC                 xor     r9d, r9d
.text:00000000000065AF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000065B4                 mov     rbp, rax
.text:00000000000065B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000065C0
.text:00000000000065C0 loc_65C0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000065C0                 cmp     r10d, 2Fh ; '/'
.text:00000000000065C4                 ja      short loc_661C
.text:00000000000065C6                 mov     eax, r10d
.text:00000000000065C9                 mov     r11d, 1
.text:00000000000065CF                 add     r10d, 8
.text:00000000000065D3                 add     rax, rbp
.text:00000000000065D6
.text:00000000000065D6 loc_65D6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000065D6                 mov     rax, [rax]
.text:00000000000065D9                 test    rax, rax
.text:00000000000065DC                 mov     [r8+r9*8], rax
.text:00000000000065E0                 jz      short loc_65EC
.text:00000000000065E2                 add     r9, 1
.text:00000000000065E6                 cmp     r9, 0Ah
.text:00000000000065EA                 jnz     short loc_65C0
.text:00000000000065EC
.text:00000000000065EC loc_65EC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000065EC                 test    r11b, r11b
.text:00000000000065EF                 jnz     short loc_6615
.text:00000000000065F1
.text:00000000000065F1 loc_65F1:                               ; CODE XREF: version_etc+CA↓j
.text:00000000000065F1                 call    version_etc_arn
.text:00000000000065F6                 mov     rax, [rsp+0C8h+var_50]
.text:00000000000065FB                 xor     rax, fs:28h
.text:0000000000006604                 jnz     short loc_6610
.text:0000000000006606                 add     rsp, 0B8h
.text:000000000000660D                 pop     rbx
.text:000000000000660E                 pop     rbp
.text:000000000000660F                 retn
.text:0000000000006610 ; ---------------------------------------------------------------------------
.text:0000000000006610
.text:0000000000006610 loc_6610:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006610                 call    ___stack_chk_fail
.text:0000000000006615 ; ---------------------------------------------------------------------------
.text:0000000000006615
.text:0000000000006615 loc_6615:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006615                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000661A                 jmp     short loc_65F1
.text:000000000000661C ; ---------------------------------------------------------------------------
.text:000000000000661C
.text:000000000000661C loc_661C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000661C                 mov     rax, rbx
.text:000000000000661F                 add     rbx, 8
.text:0000000000006623                 jmp     short loc_65D6
.text:0000000000006623 ; } // starts at 6550
.text:0000000000006623 version_etc     endp
.text:0000000000006623
.text:0000000000006623 ; ---------------------------------------------------------------------------
.text:0000000000006625                 align 10h
.text:0000000000006630
.text:0000000000006630 ; =============== S U B R O U T I N E =======================================
.text:0000000000006630
.text:0000000000006630 ; Attributes: info_from_lumina
.text:0000000000006630
.text:0000000000006630 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006630                 public emit_bug_reporting_address
.text:0000000000006630 emit_bug_reporting_address proc near
.text:0000000000006630 ; __unwind {
.text:0000000000006630                 push    rbx
.text:0000000000006631                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006638                 mov     edx, 5          ; category
.text:000000000000663D                 xor     edi, edi        ; domainname
.text:000000000000663F                 call    _dcgettext
.text:0000000000006644                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000664B                 mov     rsi, rax
.text:000000000000664E                 mov     edi, 1
.text:0000000000006653                 xor     eax, eax
.text:0000000000006655                 call    ___printf_chk
.text:000000000000665A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006661                 mov     edx, 5          ; category
.text:0000000000006666                 xor     edi, edi        ; domainname
.text:0000000000006668                 call    _dcgettext
.text:000000000000666D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006674                 lea     rdx, unk_706C
.text:000000000000667B                 mov     rsi, rax
.text:000000000000667E                 mov     edi, 1
.text:0000000000006683                 xor     eax, eax
.text:0000000000006685                 call    ___printf_chk
.text:000000000000668A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006691                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006698                 xor     edi, edi        ; domainname
.text:000000000000669A                 mov     edx, 5          ; category
.text:000000000000669F                 call    _dcgettext
.text:00000000000066A4                 mov     rsi, rbx        ; stream
.text:00000000000066A7                 mov     rdi, rax        ; s
.text:00000000000066AA                 pop     rbx
.text:00000000000066AB                 jmp     _fputs_unlocked
.text:00000000000066AB ; } // starts at 6630
.text:00000000000066AB emit_bug_reporting_address endp
.text:00000000000066AB
.text:00000000000066B0
.text:00000000000066B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066B0
.text:00000000000066B0
.text:00000000000066B0                 public xmalloc
.text:00000000000066B0 xmalloc         proc near               ; CODE XREF: main+32E↑p
.text:00000000000066B0                                         ; main+3D9↑p ...
.text:00000000000066B0 ; __unwind {
.text:00000000000066B0                 push    rbx
.text:00000000000066B1                 mov     rbx, rdi
.text:00000000000066B4                 call    malloc
.text:00000000000066B9                 test    rax, rax
.text:00000000000066BC                 jnz     short loc_66C3
.text:00000000000066BE                 test    rbx, rbx
.text:00000000000066C1                 jnz     short loc_66C5
.text:00000000000066C3
.text:00000000000066C3 loc_66C3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000066C3                 pop     rbx
.text:00000000000066C4                 retn
.text:00000000000066C5 ; ---------------------------------------------------------------------------
.text:00000000000066C5
.text:00000000000066C5 loc_66C5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000066C5                 call    xalloc_die
.text:00000000000066C5 ; } // starts at 66B0
.text:00000000000066C5 xmalloc         endp
.text:00000000000066C5
.text:00000000000066C5 ; ---------------------------------------------------------------------------
.text:00000000000066CA                 align 10h
.text:00000000000066D0
.text:00000000000066D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000066D0
.text:00000000000066D0 ; Attributes: info_from_lumina
.text:00000000000066D0
.text:00000000000066D0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000066D0                 public xnmalloc
.text:00000000000066D0 xnmalloc        proc near
.text:00000000000066D0 ; __unwind {
.text:00000000000066D0                 mov     rax, rdi
.text:00000000000066D3                 mul     rsi
.text:00000000000066D6                 mov     rdi, rax
.text:00000000000066D9                 seto    al
.text:00000000000066DC                 test    rdi, rdi
.text:00000000000066DF                 js      short loc_66EB
.text:00000000000066E1                 movzx   eax, al
.text:00000000000066E4                 test    rax, rax
.text:00000000000066E7                 jnz     short loc_66EB
.text:00000000000066E9                 jmp     short xmalloc
.text:00000000000066EB ; ---------------------------------------------------------------------------
.text:00000000000066EB
.text:00000000000066EB loc_66EB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000066EB                                         ; xnmalloc+17↑j
.text:00000000000066EB                 sub     rsp, 8
.text:00000000000066EF                 call    xalloc_die
.text:00000000000066EF ; } // starts at 66D0
.text:00000000000066EF xnmalloc        endp
.text:00000000000066EF
.text:00000000000066EF ; ---------------------------------------------------------------------------
.text:00000000000066F4                 align 20h
.text:0000000000006700
.text:0000000000006700 ; =============== S U B R O U T I N E =======================================
.text:0000000000006700
.text:0000000000006700
.text:0000000000006700                 public xcharalloc
.text:0000000000006700 xcharalloc      proc near
.text:0000000000006700 ; __unwind {
.text:0000000000006700                 jmp     short xmalloc
.text:0000000000006700 ; } // starts at 6700
.text:0000000000006700 xcharalloc      endp
.text:0000000000006700
.text:0000000000006700 ; ---------------------------------------------------------------------------
.text:0000000000006702                 align 10h
.text:0000000000006710
.text:0000000000006710 ; =============== S U B R O U T I N E =======================================
.text:0000000000006710
.text:0000000000006710 ; Attributes: info_from_lumina
.text:0000000000006710
.text:0000000000006710 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006710                 public xrealloc
.text:0000000000006710 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000006710                                         ; quotearg_n_options+182↑p ...
.text:0000000000006710 ; __unwind {
.text:0000000000006710                 test    rsi, rsi
.text:0000000000006713                 push    rbx
.text:0000000000006714                 mov     rbx, rsi
.text:0000000000006717                 jnz     short loc_671E
.text:0000000000006719                 test    rdi, rdi
.text:000000000000671C                 jnz     short loc_6738
.text:000000000000671E
.text:000000000000671E loc_671E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000671E                 mov     rsi, rbx        ; size
.text:0000000000006721                 call    _realloc
.text:0000000000006726                 test    rax, rax
.text:0000000000006729                 jnz     short loc_6730
.text:000000000000672B                 test    rbx, rbx
.text:000000000000672E                 jnz     short loc_6741
.text:0000000000006730
.text:0000000000006730 loc_6730:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006730                 pop     rbx
.text:0000000000006731                 retn
.text:0000000000006731 ; ---------------------------------------------------------------------------
.text:0000000000006732                 align 8
.text:0000000000006738
.text:0000000000006738 loc_6738:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006738                 call    free
.text:000000000000673D                 xor     eax, eax
.text:000000000000673F                 pop     rbx
.text:0000000000006740                 retn
.text:0000000000006741 ; ---------------------------------------------------------------------------
.text:0000000000006741
.text:0000000000006741 loc_6741:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006741                 call    xalloc_die
.text:0000000000006741 ; } // starts at 6710
.text:0000000000006741 xrealloc        endp
.text:0000000000006741
.text:0000000000006741 ; ---------------------------------------------------------------------------
.text:0000000000006746                 align 10h
.text:0000000000006750
.text:0000000000006750 ; =============== S U B R O U T I N E =======================================
.text:0000000000006750
.text:0000000000006750 ; Attributes: info_from_lumina
.text:0000000000006750
.text:0000000000006750 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006750                 public xnrealloc
.text:0000000000006750 xnrealloc       proc near
.text:0000000000006750 ; __unwind {
.text:0000000000006750                 mov     rax, rsi
.text:0000000000006753                 mul     rdx
.text:0000000000006756                 mov     rsi, rax
.text:0000000000006759                 seto    al
.text:000000000000675C                 test    rsi, rsi
.text:000000000000675F                 js      short loc_676B
.text:0000000000006761                 movzx   eax, al
.text:0000000000006764                 test    rax, rax
.text:0000000000006767                 jnz     short loc_676B
.text:0000000000006769                 jmp     short xrealloc
.text:000000000000676B ; ---------------------------------------------------------------------------
.text:000000000000676B
.text:000000000000676B loc_676B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000676B                                         ; xnrealloc+17↑j
.text:000000000000676B                 sub     rsp, 8
.text:000000000000676F                 call    xalloc_die
.text:000000000000676F ; } // starts at 6750
.text:000000000000676F xnrealloc       endp
.text:000000000000676F
.text:000000000000676F ; ---------------------------------------------------------------------------
.text:0000000000006774                 align 20h
.text:0000000000006780
.text:0000000000006780 ; =============== S U B R O U T I N E =======================================
.text:0000000000006780
.text:0000000000006780 ; Attributes: info_from_lumina
.text:0000000000006780
.text:0000000000006780 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006780                 public x2nrealloc
.text:0000000000006780 x2nrealloc      proc near
.text:0000000000006780 ; __unwind {
.text:0000000000006780                 test    rdi, rdi
.text:0000000000006783                 mov     r9, rdx
.text:0000000000006786                 mov     rcx, [rsi]
.text:0000000000006789                 jz      short loc_67C0
.text:000000000000678B                 xor     edx, edx
.text:000000000000678D                 mov     rax, 5555555555555554h
.text:0000000000006797                 div     r9
.text:000000000000679A                 cmp     rax, rcx
.text:000000000000679D                 jbe     short loc_67DB
.text:000000000000679F                 mov     rax, rcx
.text:00000000000067A2                 shr     rax, 1
.text:00000000000067A5                 lea     rcx, [rax+rcx+1]
.text:00000000000067AA
.text:00000000000067AA loc_67AA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000067AA                 mov     [rsi], rcx
.text:00000000000067AD                 imul    rcx, r9
.text:00000000000067B1                 mov     rsi, rcx
.text:00000000000067B4                 jmp     xrealloc
.text:00000000000067B4 ; ---------------------------------------------------------------------------
.text:00000000000067B9                 align 20h
.text:00000000000067C0
.text:00000000000067C0 loc_67C0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000067C0                 test    rcx, rcx
.text:00000000000067C3                 jz      short loc_67E8
.text:00000000000067C5
.text:00000000000067C5 loc_67C5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000067C5                 mov     rax, rcx
.text:00000000000067C8                 mul     r9
.text:00000000000067CB                 seto    dl
.text:00000000000067CE                 test    rax, rax
.text:00000000000067D1                 movzx   edx, dl
.text:00000000000067D4                 js      short loc_67DB
.text:00000000000067D6                 test    rdx, rdx
.text:00000000000067D9                 jz      short loc_67AA
.text:00000000000067DB
.text:00000000000067DB loc_67DB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000067DB                                         ; x2nrealloc+54↑j
.text:00000000000067DB                 sub     rsp, 8
.text:00000000000067DF                 call    xalloc_die
.text:00000000000067DF ; ---------------------------------------------------------------------------
.text:00000000000067E4                 align 8
.text:00000000000067E8
.text:00000000000067E8 loc_67E8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000067E8                 xor     edx, edx
.text:00000000000067EA                 mov     eax, 80h
.text:00000000000067EF                 xor     r8d, r8d
.text:00000000000067F2                 div     r9
.text:00000000000067F5                 test    rax, rax
.text:00000000000067F8                 setz    r8b
.text:00000000000067FC                 lea     rcx, [r8+rax]
.text:0000000000006800                 jmp     short loc_67C5
.text:0000000000006800 ; } // starts at 6780
.text:0000000000006800 x2nrealloc      endp
.text:0000000000006800
.text:0000000000006800 ; ---------------------------------------------------------------------------
.text:0000000000006802                 align 10h
.text:0000000000006810
.text:0000000000006810 ; =============== S U B R O U T I N E =======================================
.text:0000000000006810
.text:0000000000006810 ; Attributes: info_from_lumina
.text:0000000000006810
.text:0000000000006810 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006810                 public x2realloc
.text:0000000000006810 x2realloc       proc near
.text:0000000000006810 ; __unwind {
.text:0000000000006810                 test    rdi, rdi
.text:0000000000006813                 mov     rax, [rsi]
.text:0000000000006816                 jz      short loc_6840
.text:0000000000006818                 mov     rdx, 5555555555555553h
.text:0000000000006822                 cmp     rax, rdx
.text:0000000000006825                 ja      short loc_6851
.text:0000000000006827                 mov     rdx, rax
.text:000000000000682A                 shr     rdx, 1
.text:000000000000682D                 lea     rax, [rdx+rax+1]
.text:0000000000006832
.text:0000000000006832 loc_6832:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006832                 mov     [rsi], rax
.text:0000000000006835                 mov     rsi, rax
.text:0000000000006838                 jmp     xrealloc
.text:0000000000006838 ; ---------------------------------------------------------------------------
.text:000000000000683D                 align 20h
.text:0000000000006840
.text:0000000000006840 loc_6840:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006840                 test    rax, rax
.text:0000000000006843                 mov     edx, 80h
.text:0000000000006848                 cmovz   rax, rdx
.text:000000000000684C                 test    rax, rax
.text:000000000000684F                 jns     short loc_6832
.text:0000000000006851
.text:0000000000006851 loc_6851:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006851                 sub     rsp, 8
.text:0000000000006855                 call    xalloc_die
.text:0000000000006855 ; } // starts at 6810
.text:0000000000006855 x2realloc       endp
.text:0000000000006855
.text:0000000000006855 ; ---------------------------------------------------------------------------
.text:000000000000685A                 align 20h
.text:0000000000006860
.text:0000000000006860 ; =============== S U B R O U T I N E =======================================
.text:0000000000006860
.text:0000000000006860
.text:0000000000006860 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006860                 public xzalloc
.text:0000000000006860 xzalloc         proc near
.text:0000000000006860 ; __unwind {
.text:0000000000006860                 push    rbx
.text:0000000000006861                 mov     rbx, rdi
.text:0000000000006864                 call    xmalloc
.text:0000000000006869                 mov     rdx, rbx        ; n
.text:000000000000686C                 xor     esi, esi        ; c
.text:000000000000686E                 mov     rdi, rax        ; s
.text:0000000000006871                 pop     rbx
.text:0000000000006872                 jmp     _memset
.text:0000000000006872 ; } // starts at 6860
.text:0000000000006872 xzalloc         endp
.text:0000000000006872
.text:0000000000006872 ; ---------------------------------------------------------------------------
.text:0000000000006877                 align 20h
.text:0000000000006880
.text:0000000000006880 ; =============== S U B R O U T I N E =======================================
.text:0000000000006880
.text:0000000000006880 ; Attributes: info_from_lumina
.text:0000000000006880
.text:0000000000006880 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006880                 public xcalloc
.text:0000000000006880 xcalloc         proc near
.text:0000000000006880 ; __unwind {
.text:0000000000006880                 mov     rax, rdi
.text:0000000000006883                 sub     rsp, 8
.text:0000000000006887                 mul     rsi
.text:000000000000688A                 seto    dl
.text:000000000000688D                 test    rax, rax
.text:0000000000006890                 js      short loc_68A9
.text:0000000000006892                 movzx   edx, dl
.text:0000000000006895                 test    rdx, rdx
.text:0000000000006898                 jnz     short loc_68A9
.text:000000000000689A                 call    _calloc
.text:000000000000689F                 test    rax, rax
.text:00000000000068A2                 jz      short loc_68A9
.text:00000000000068A4                 add     rsp, 8
.text:00000000000068A8                 retn
.text:00000000000068A9 ; ---------------------------------------------------------------------------
.text:00000000000068A9
.text:00000000000068A9 loc_68A9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000068A9                                         ; xcalloc+18↑j ...
.text:00000000000068A9                 call    xalloc_die
.text:00000000000068A9 ; } // starts at 6880
.text:00000000000068A9 xcalloc         endp
.text:00000000000068A9
.text:00000000000068A9 ; ---------------------------------------------------------------------------
.text:00000000000068AE                 align 10h
.text:00000000000068B0
.text:00000000000068B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068B0
.text:00000000000068B0 ; Attributes: info_from_lumina
.text:00000000000068B0
.text:00000000000068B0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000068B0                 public xmemdup
.text:00000000000068B0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000068B0                                         ; xstrdup+11↓j
.text:00000000000068B0 ; __unwind {
.text:00000000000068B0                 push    rbp
.text:00000000000068B1                 push    rbx
.text:00000000000068B2                 mov     rbp, rdi
.text:00000000000068B5                 mov     rdi, rsi
.text:00000000000068B8                 mov     rbx, rsi
.text:00000000000068BB                 sub     rsp, 8
.text:00000000000068BF                 call    xmalloc
.text:00000000000068C4                 add     rsp, 8
.text:00000000000068C8                 mov     rdx, rbx        ; n
.text:00000000000068CB                 mov     rsi, rbp        ; src
.text:00000000000068CE                 pop     rbx
.text:00000000000068CF                 pop     rbp
.text:00000000000068D0                 mov     rdi, rax        ; dest
.text:00000000000068D3                 jmp     _memcpy
.text:00000000000068D3 ; } // starts at 68B0
.text:00000000000068D3 xmemdup         endp
.text:00000000000068D3
.text:00000000000068D3 ; ---------------------------------------------------------------------------
.text:00000000000068D8                 align 20h
.text:00000000000068E0
.text:00000000000068E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000068E0
.text:00000000000068E0
.text:00000000000068E0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000068E0                 public xstrdup
.text:00000000000068E0 xstrdup         proc near
.text:00000000000068E0 ; __unwind {
.text:00000000000068E0                 push    rbx
.text:00000000000068E1                 mov     rbx, rdi
.text:00000000000068E4                 call    _strlen
.text:00000000000068E9                 mov     rdi, rbx        ; src
.text:00000000000068EC                 lea     rsi, [rax+1]    ; n
.text:00000000000068F0                 pop     rbx
.text:00000000000068F1                 jmp     short xmemdup
.text:00000000000068F1 ; } // starts at 68E0
.text:00000000000068F1 xstrdup         endp
.text:00000000000068F1
.text:00000000000068F1 ; ---------------------------------------------------------------------------
.text:00000000000068F3                 align 20h
.text:0000000000006900
.text:0000000000006900 ; =============== S U B R O U T I N E =======================================
.text:0000000000006900
.text:0000000000006900 ; Attributes: noreturn info_from_lumina
.text:0000000000006900
.text:0000000000006900 ; void __cdecl xalloc_die()
.text:0000000000006900                 public xalloc_die
.text:0000000000006900 xalloc_die      proc near               ; CODE XREF: main:loc_2793↑p
.text:0000000000006900                                         ; quotearg_n_options:loc_54D6↑p ...
.text:0000000000006900 ; __unwind {
.text:0000000000006900                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006907                 sub     rsp, 8
.text:000000000000690B                 mov     edx, 5          ; category
.text:0000000000006910                 xor     edi, edi        ; domainname
.text:0000000000006912                 call    _dcgettext
.text:0000000000006917                 mov     edi, cs:exit_failure ; status
.text:000000000000691D                 lea     rdx, format     ; format
.text:0000000000006924                 mov     rcx, rax
.text:0000000000006927                 xor     esi, esi        ; errnum
.text:0000000000006929                 xor     eax, eax
.text:000000000000692B                 call    _error
.text:0000000000006930                 call    _abort
.text:0000000000006930 ; } // starts at 6900
.text:0000000000006930 xalloc_die      endp
.text:0000000000006930
.text:0000000000006930 ; ---------------------------------------------------------------------------
.text:0000000000006935                 align 20h
.text:0000000000006940
.text:0000000000006940 ; =============== S U B R O U T I N E =======================================
.text:0000000000006940
.text:0000000000006940 ; Attributes: info_from_lumina
.text:0000000000006940
.text:0000000000006940 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000006940                 public rpl_fclose
.text:0000000000006940 rpl_fclose      proc near               ; CODE XREF: main+976↑p
.text:0000000000006940                                         ; close_stream+15↓p
.text:0000000000006940 ; __unwind {
.text:0000000000006940                 push    r12
.text:0000000000006942                 push    rbp
.text:0000000000006943                 push    rbx
.text:0000000000006944                 mov     rbx, rdi
.text:0000000000006947                 call    _fileno
.text:000000000000694C                 test    eax, eax
.text:000000000000694E                 mov     rdi, rbx        ; fp
.text:0000000000006951                 js      short loc_69A7
.text:0000000000006953                 call    ___freading
.text:0000000000006958                 test    eax, eax
.text:000000000000695A                 jnz     short loc_6988
.text:000000000000695C
.text:000000000000695C loc_695C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000695C                 mov     rdi, rbx        ; stream
.text:000000000000695F                 call    rpl_fflush
.text:0000000000006964                 test    eax, eax
.text:0000000000006966                 jz      short loc_69A4
.text:0000000000006968                 call    ___errno_location
.text:000000000000696D                 mov     r12d, [rax]
.text:0000000000006970                 mov     rdi, rbx        ; stream
.text:0000000000006973                 mov     rbp, rax
.text:0000000000006976                 call    _fclose
.text:000000000000697B                 test    r12d, r12d
.text:000000000000697E                 jnz     short loc_69B0
.text:0000000000006980
.text:0000000000006980 loc_6980:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000006980                 pop     rbx
.text:0000000000006981                 pop     rbp
.text:0000000000006982                 pop     r12
.text:0000000000006984                 retn
.text:0000000000006984 ; ---------------------------------------------------------------------------
.text:0000000000006985                 align 8
.text:0000000000006988
.text:0000000000006988 loc_6988:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000006988                 mov     rdi, rbx        ; stream
.text:000000000000698B                 call    _fileno
.text:0000000000006990                 xor     esi, esi        ; offset
.text:0000000000006992                 mov     edx, 1          ; whence
.text:0000000000006997                 mov     edi, eax        ; fd
.text:0000000000006999                 call    _lseek
.text:000000000000699E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000069A2                 jnz     short loc_695C
.text:00000000000069A4
.text:00000000000069A4 loc_69A4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000069A4                 mov     rdi, rbx        ; stream
.text:00000000000069A7
.text:00000000000069A7 loc_69A7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000069A7                 pop     rbx
.text:00000000000069A8                 pop     rbp
.text:00000000000069A9                 pop     r12
.text:00000000000069AB                 jmp     _fclose
.text:00000000000069B0 ; ---------------------------------------------------------------------------
.text:00000000000069B0
.text:00000000000069B0 loc_69B0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000069B0                 mov     [rbp+0], r12d
.text:00000000000069B4                 mov     eax, 0FFFFFFFFh
.text:00000000000069B9                 jmp     short loc_6980
.text:00000000000069B9 ; } // starts at 6940
.text:00000000000069B9 rpl_fclose      endp
.text:00000000000069B9
.text:00000000000069B9 ; ---------------------------------------------------------------------------
.text:00000000000069BB                 align 20h
.text:00000000000069C0
.text:00000000000069C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000069C0
.text:00000000000069C0 ; Attributes: info_from_lumina
.text:00000000000069C0
.text:00000000000069C0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000069C0                 public rpl_fflush
.text:00000000000069C0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000069C0 ; __unwind {
.text:00000000000069C0                 test    rdi, rdi
.text:00000000000069C3                 push    rbx
.text:00000000000069C4                 mov     rbx, rdi
.text:00000000000069C7                 jz      short loc_69DA
.text:00000000000069C9                 call    ___freading
.text:00000000000069CE                 test    eax, eax
.text:00000000000069D0                 jz      short loc_69DA
.text:00000000000069D2                 test    dword ptr [rbx], 100h
.text:00000000000069D8                 jnz     short loc_69E8
.text:00000000000069DA
.text:00000000000069DA loc_69DA:                               ; CODE XREF: rpl_fflush+7↑j
.text:00000000000069DA                                         ; rpl_fflush+10↑j
.text:00000000000069DA                 mov     rdi, rbx        ; stream
.text:00000000000069DD                 pop     rbx
.text:00000000000069DE                 jmp     _fflush
.text:00000000000069DE ; ---------------------------------------------------------------------------
.text:00000000000069E3                 align 8
.text:00000000000069E8
.text:00000000000069E8 loc_69E8:                               ; CODE XREF: rpl_fflush+18↑j
.text:00000000000069E8                 mov     rdi, rbx
.text:00000000000069EB                 mov     edx, 1
.text:00000000000069F0                 xor     esi, esi
.text:00000000000069F2                 call    rpl_fseeko
.text:00000000000069F7                 mov     rdi, rbx        ; stream
.text:00000000000069FA                 pop     rbx
.text:00000000000069FB                 jmp     _fflush
.text:00000000000069FB ; } // starts at 69C0
.text:00000000000069FB rpl_fflush      endp
.text:00000000000069FB
.text:0000000000006A00
.text:0000000000006A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A00
.text:0000000000006A00 ; Attributes: info_from_lumina
.text:0000000000006A00
.text:0000000000006A00 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000006A00                 public rpl_fseeko
.text:0000000000006A00 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000006A00 ; __unwind {
.text:0000000000006A00                 mov     rax, [rdi+8]
.text:0000000000006A04                 cmp     [rdi+10h], rax
.text:0000000000006A08                 jz      short loc_6A10
.text:0000000000006A0A
.text:0000000000006A0A loc_6A0A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000006A0A                                         ; rpl_fseeko+1F↓j
.text:0000000000006A0A                 jmp     _fseeko
.text:0000000000006A0A ; ---------------------------------------------------------------------------
.text:0000000000006A0F                 align 10h
.text:0000000000006A10
.text:0000000000006A10 loc_6A10:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000006A10                 mov     rax, [rdi+20h]
.text:0000000000006A14                 cmp     [rdi+28h], rax
.text:0000000000006A18                 jnz     short loc_6A0A
.text:0000000000006A1A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000006A1F                 jnz     short loc_6A0A
.text:0000000000006A21                 push    r12
.text:0000000000006A23                 push    rbp
.text:0000000000006A24                 mov     r12d, edx
.text:0000000000006A27                 push    rbx
.text:0000000000006A28                 mov     rbp, rsi
.text:0000000000006A2B                 mov     rbx, rdi
.text:0000000000006A2E                 call    _fileno
.text:0000000000006A33                 mov     edx, r12d       ; whence
.text:0000000000006A36                 mov     rsi, rbp        ; offset
.text:0000000000006A39                 mov     edi, eax        ; fd
.text:0000000000006A3B                 call    _lseek
.text:0000000000006A40                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006A44                 jz      short loc_6A52
.text:0000000000006A46                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000006A49                 mov     [rbx+90h], rax
.text:0000000000006A50                 xor     eax, eax
.text:0000000000006A52
.text:0000000000006A52 loc_6A52:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000006A52                 pop     rbx
.text:0000000000006A53                 pop     rbp
.text:0000000000006A54                 pop     r12
.text:0000000000006A56                 retn
.text:0000000000006A56 ; } // starts at 6A00
.text:0000000000006A56 rpl_fseeko      endp
.text:0000000000006A56
.text:0000000000006A56 ; ---------------------------------------------------------------------------
.text:0000000000006A57                 align 20h
.text:0000000000006A60
.text:0000000000006A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006A60
.text:0000000000006A60 ; Attributes: info_from_lumina
.text:0000000000006A60
.text:0000000000006A60 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000006A60                 public rpl_mbrtowc
.text:0000000000006A60 rpl_mbrtowc     proc near               ; CODE XREF: wc+7AD↑p
.text:0000000000006A60                                         ; quotearg_buffer_restyled+956↑p
.text:0000000000006A60
.text:0000000000006A60 pwc             = dword ptr -34h
.text:0000000000006A60 var_30          = qword ptr -30h
.text:0000000000006A60
.text:0000000000006A60 ; __unwind {
.text:0000000000006A60                 push    r13
.text:0000000000006A62                 push    r12
.text:0000000000006A64                 mov     r13, rsi
.text:0000000000006A67                 push    rbp
.text:0000000000006A68                 push    rbx
.text:0000000000006A69                 mov     rbx, rdi
.text:0000000000006A6C                 mov     r12, rdx
.text:0000000000006A6F                 sub     rsp, 18h
.text:0000000000006A73                 mov     rax, fs:28h
.text:0000000000006A7C                 mov     [rsp+38h+var_30], rax
.text:0000000000006A81                 xor     eax, eax
.text:0000000000006A83                 lea     rax, [rsp+38h+pwc]
.text:0000000000006A88                 test    rdi, rdi
.text:0000000000006A8B                 cmovz   rbx, rax
.text:0000000000006A8F                 mov     rdi, rbx        ; pwc
.text:0000000000006A92                 call    _mbrtowc
.text:0000000000006A97                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000006A9B                 mov     rbp, rax
.text:0000000000006A9E                 jbe     short loc_6AC0
.text:0000000000006AA0                 test    r12, r12
.text:0000000000006AA3                 jz      short loc_6AC0
.text:0000000000006AA5                 xor     edi, edi
.text:0000000000006AA7                 call    hard_locale
.text:0000000000006AAC                 test    al, al
.text:0000000000006AAE                 jnz     short loc_6AC0
.text:0000000000006AB0                 movzx   eax, byte ptr [r13+0]
.text:0000000000006AB5                 mov     ebp, 1
.text:0000000000006ABA                 mov     [rbx], eax
.text:0000000000006ABC                 nop     dword ptr [rax+00h]
.text:0000000000006AC0
.text:0000000000006AC0 loc_6AC0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000006AC0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000006AC0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000006AC5                 xor     rdx, fs:28h
.text:0000000000006ACE                 mov     rax, rbp
.text:0000000000006AD1                 jnz     short loc_6ADE
.text:0000000000006AD3                 add     rsp, 18h
.text:0000000000006AD7                 pop     rbx
.text:0000000000006AD8                 pop     rbp
.text:0000000000006AD9                 pop     r12
.text:0000000000006ADB                 pop     r13
.text:0000000000006ADD                 retn
.text:0000000000006ADE ; ---------------------------------------------------------------------------
.text:0000000000006ADE
.text:0000000000006ADE loc_6ADE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000006ADE                 call    ___stack_chk_fail
.text:0000000000006ADE ; } // starts at 6A60
.text:0000000000006ADE rpl_mbrtowc     endp
.text:0000000000006ADE
.text:0000000000006ADE ; ---------------------------------------------------------------------------
.text:0000000000006AE3                 align 10h
.text:0000000000006AF0
.text:0000000000006AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006AF0
.text:0000000000006AF0 ; Attributes: noreturn info_from_lumina
.text:0000000000006AF0
.text:0000000000006AF0 ; void __cdecl print_and_abort()
.text:0000000000006AF0 print_and_abort proc near               ; CODE XREF: _obstack_begin_worker:loc_6BED↓p
.text:0000000000006AF0                                         ; _obstack_newchunk:loc_6D25↓p
.text:0000000000006AF0                                         ; DATA XREF: ...
.text:0000000000006AF0 ; __unwind {
.text:0000000000006AF0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000006AF7                 sub     rsp, 8
.text:0000000000006AFB                 mov     edx, 5          ; category
.text:0000000000006B00                 xor     edi, edi        ; domainname
.text:0000000000006B02                 call    _dcgettext
.text:0000000000006B07                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000006B0E                 lea     rdx, aSSS+8     ; "%s\n"
.text:0000000000006B15                 mov     rcx, rax
.text:0000000000006B18                 mov     esi, 1
.text:0000000000006B1D                 xor     eax, eax
.text:0000000000006B1F                 call    ___fprintf_chk
.text:0000000000006B24                 mov     edi, cs:exit_failure ; status
.text:0000000000006B2A                 call    _exit
.text:0000000000006B2A ; } // starts at 6AF0
.text:0000000000006B2A print_and_abort endp
.text:0000000000006B2A
.text:0000000000006B2A ; ---------------------------------------------------------------------------
.text:0000000000006B2F                 align 10h
.text:0000000000006B30
.text:0000000000006B30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B30
.text:0000000000006B30
.text:0000000000006B30 call_chunkfun   proc near               ; CODE XREF: _obstack_begin_worker+29↓p
.text:0000000000006B30                                         ; _obstack_newchunk+58↓p
.text:0000000000006B30 ; __unwind {
.text:0000000000006B30                 test    byte ptr [rdi+50h], 1
.text:0000000000006B34                 mov     rax, [rdi+38h]
.text:0000000000006B38                 jnz     short loc_6B40
.text:0000000000006B3A                 mov     rdi, rsi
.text:0000000000006B3D                 jmp     rax
.text:0000000000006B3D ; ---------------------------------------------------------------------------
.text:0000000000006B3F                 align 20h
.text:0000000000006B40
.text:0000000000006B40 loc_6B40:                               ; CODE XREF: call_chunkfun+8↑j
.text:0000000000006B40                 mov     rdi, [rdi+48h]
.text:0000000000006B44                 jmp     rax
.text:0000000000006B44 ; } // starts at 6B30
.text:0000000000006B44 call_chunkfun   endp
.text:0000000000006B44
.text:0000000000006B44 ; ---------------------------------------------------------------------------
.text:0000000000006B46                 align 10h
.text:0000000000006B50
.text:0000000000006B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B50
.text:0000000000006B50
.text:0000000000006B50 call_freefun    proc near               ; CODE XREF: _obstack_newchunk+DE↓p
.text:0000000000006B50                                         ; _obstack_free+2C↓p
.text:0000000000006B50 ; __unwind {
.text:0000000000006B50                 test    byte ptr [rdi+50h], 1
.text:0000000000006B54                 mov     rax, [rdi+40h]
.text:0000000000006B58                 jnz     short loc_6B60
.text:0000000000006B5A                 mov     rdi, rsi
.text:0000000000006B5D                 jmp     rax
.text:0000000000006B5D ; ---------------------------------------------------------------------------
.text:0000000000006B5F                 align 20h
.text:0000000000006B60
.text:0000000000006B60 loc_6B60:                               ; CODE XREF: call_freefun+8↑j
.text:0000000000006B60                 mov     rdi, [rdi+48h]
.text:0000000000006B64                 jmp     rax
.text:0000000000006B64 ; } // starts at 6B50
.text:0000000000006B64 call_freefun    endp
.text:0000000000006B64
.text:0000000000006B64 ; ---------------------------------------------------------------------------
.text:0000000000006B66                 align 10h
.text:0000000000006B70
.text:0000000000006B70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006B70
.text:0000000000006B70 ; Attributes: info_from_lumina
.text:0000000000006B70
.text:0000000000006B70 ; int __fastcall obstack_begin_worker(obstack *h, size_t size, size_t alignment)
.text:0000000000006B70 _obstack_begin_worker proc near         ; CODE XREF: _obstack_begin+C↓j
.text:0000000000006B70                                         ; _obstack_begin_1+10↓j
.text:0000000000006B70 ; __unwind {
.text:0000000000006B70                 test    rdx, rdx
.text:0000000000006B73                 push    r12
.text:0000000000006B75                 push    rbp
.text:0000000000006B76                 push    rbx
.text:0000000000006B77                 mov     rbx, rdi
.text:0000000000006B7A                 jz      short loc_6BE0
.text:0000000000006B7C                 lea     r12, [rdx-1]
.text:0000000000006B80                 mov     rbp, rdx
.text:0000000000006B83
.text:0000000000006B83 loc_6B83:                               ; CODE XREF: _obstack_begin_worker+7B↓j
.text:0000000000006B83                 test    rsi, rsi
.text:0000000000006B86                 mov     eax, 0FE0h
.text:0000000000006B8B                 mov     [rbx+30h], r12
.text:0000000000006B8F                 cmovz   rsi, rax
.text:0000000000006B93                 mov     rdi, rbx
.text:0000000000006B96                 mov     [rbx], rsi
.text:0000000000006B99                 call    call_chunkfun
.text:0000000000006B9E                 test    rax, rax
.text:0000000000006BA1                 mov     [rbx+8], rax
.text:0000000000006BA5                 jz      short loc_6BED
.text:0000000000006BA7                 lea     rdx, [rax+r12+10h]
.text:0000000000006BAC                 neg     rbp
.text:0000000000006BAF                 and     rbp, rdx
.text:0000000000006BB2                 mov     rdx, [rbx]
.text:0000000000006BB5                 mov     [rbx+10h], rbp
.text:0000000000006BB9                 mov     [rbx+18h], rbp
.text:0000000000006BBD                 add     rdx, rax
.text:0000000000006BC0                 mov     [rax], rdx
.text:0000000000006BC3                 mov     [rbx+20h], rdx
.text:0000000000006BC7                 mov     qword ptr [rax+8], 0
.text:0000000000006BCF                 mov     eax, 1
.text:0000000000006BD4                 and     byte ptr [rbx+50h], 0F9h
.text:0000000000006BD8                 pop     rbx
.text:0000000000006BD9                 pop     rbp
.text:0000000000006BDA                 pop     r12
.text:0000000000006BDC                 retn
.text:0000000000006BDC ; ---------------------------------------------------------------------------
.text:0000000000006BDD                 align 20h
.text:0000000000006BE0
.text:0000000000006BE0 loc_6BE0:                               ; CODE XREF: _obstack_begin_worker+A↑j
.text:0000000000006BE0                 mov     r12d, 0Fh
.text:0000000000006BE6                 mov     ebp, 10h
.text:0000000000006BEB                 jmp     short loc_6B83
.text:0000000000006BED ; ---------------------------------------------------------------------------
.text:0000000000006BED
.text:0000000000006BED loc_6BED:                               ; CODE XREF: _obstack_begin_worker+35↑j
.text:0000000000006BED                 call    cs:obstack_alloc_failed_handler
.text:0000000000006BED ; } // starts at 6B70
.text:0000000000006BED _obstack_begin_worker endp
.text:0000000000006BED
.text:0000000000006BED ; ---------------------------------------------------------------------------
.text:0000000000006BF3                 align 20h
.text:0000000000006C00
.text:0000000000006C00 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C00
.text:0000000000006C00
.text:0000000000006C00                 public _obstack_begin
.text:0000000000006C00 _obstack_begin  proc near               ; CODE XREF: readtokens0_init+3A↑p
.text:0000000000006C00                                         ; readtokens0_init+4D↑p ...
.text:0000000000006C00 ; __unwind {
.text:0000000000006C00                 and     byte ptr [rdi+50h], 0FEh
.text:0000000000006C04                 mov     [rdi+38h], rcx
.text:0000000000006C08                 mov     [rdi+40h], r8
.text:0000000000006C0C                 jmp     _obstack_begin_worker
.text:0000000000006C0C ; } // starts at 6C00
.text:0000000000006C0C _obstack_begin  endp
.text:0000000000006C0C
.text:0000000000006C0C ; ---------------------------------------------------------------------------
.text:0000000000006C11                 align 20h
.text:0000000000006C20
.text:0000000000006C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C20
.text:0000000000006C20
.text:0000000000006C20                 public _obstack_begin_1
.text:0000000000006C20 _obstack_begin_1 proc near              ; DATA XREF: LOAD:00000000000009F8↑o
.text:0000000000006C20 ; __unwind {
.text:0000000000006C20                 or      byte ptr [rdi+50h], 1
.text:0000000000006C24                 mov     [rdi+38h], rcx
.text:0000000000006C28                 mov     [rdi+40h], r8
.text:0000000000006C2C                 mov     [rdi+48h], r9
.text:0000000000006C30                 jmp     _obstack_begin_worker
.text:0000000000006C30 ; } // starts at 6C20
.text:0000000000006C30 _obstack_begin_1 endp
.text:0000000000006C30
.text:0000000000006C30 ; ---------------------------------------------------------------------------
.text:0000000000006C35                 align 20h
.text:0000000000006C40
.text:0000000000006C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C40
.text:0000000000006C40 ; Attributes: info_from_lumina
.text:0000000000006C40
.text:0000000000006C40 ; void __fastcall obstack_newchunk(obstack *h, size_t length)
.text:0000000000006C40                 public _obstack_newchunk
.text:0000000000006C40 _obstack_newchunk proc near             ; CODE XREF: save_token+9D↑p
.text:0000000000006C40                                         ; save_token+C9↑p ...
.text:0000000000006C40 ; __unwind {
.text:0000000000006C40                 push    r14
.text:0000000000006C42                 push    r13
.text:0000000000006C44                 xor     edx, edx
.text:0000000000006C46                 push    r12
.text:0000000000006C48                 push    rbp
.text:0000000000006C49                 push    rbx
.text:0000000000006C4A                 mov     rbx, [rdi+18h]
.text:0000000000006C4E                 sub     rbx, [rdi+10h]
.text:0000000000006C52                 mov     rbp, [rdi+8]
.text:0000000000006C56                 add     rsi, rbx
.text:0000000000006C59                 mov     rcx, rbx
.text:0000000000006C5C                 setb    dl
.text:0000000000006C5F                 add     rsi, [rdi+30h]
.text:0000000000006C63                 setb    al
.text:0000000000006C66                 shr     rcx, 3
.text:0000000000006C6A                 cmp     [rdi], rsi
.text:0000000000006C6D                 lea     r12, [rsi+rcx+64h]
.text:0000000000006C72                 cmovnb  rsi, [rdi]
.text:0000000000006C76                 cmp     rsi, r12
.text:0000000000006C79                 cmovnb  r12, rsi
.text:0000000000006C7D                 test    rdx, rdx
.text:0000000000006C80                 jnz     loc_6D25
.text:0000000000006C86                 movzx   eax, al
.text:0000000000006C89                 test    rax, rax
.text:0000000000006C8C                 jnz     loc_6D25
.text:0000000000006C92                 mov     rsi, r12
.text:0000000000006C95                 mov     r13, rdi
.text:0000000000006C98                 call    call_chunkfun
.text:0000000000006C9D                 test    rax, rax
.text:0000000000006CA0                 mov     r14, rax
.text:0000000000006CA3                 jz      loc_6D25
.text:0000000000006CA9                 lea     rsi, [rax+r12]
.text:0000000000006CAD                 mov     [r13+8], rax
.text:0000000000006CB1                 mov     [rax+8], rbp
.text:0000000000006CB5                 mov     rdx, rbx        ; n
.text:0000000000006CB8                 mov     [r13+20h], rsi
.text:0000000000006CBC                 mov     [rax], rsi
.text:0000000000006CBF                 mov     rax, [r13+30h]
.text:0000000000006CC3                 mov     rsi, [r13+10h]  ; src
.text:0000000000006CC7                 lea     r12, [r14+rax+10h]
.text:0000000000006CCC                 not     rax
.text:0000000000006CCF                 and     r12, rax
.text:0000000000006CD2                 mov     rdi, r12        ; dest
.text:0000000000006CD5                 call    _memcpy
.text:0000000000006CDA                 test    byte ptr [r13+50h], 2
.text:0000000000006CDF                 jnz     short loc_6CF6
.text:0000000000006CE1                 mov     rax, [r13+30h]
.text:0000000000006CE5                 lea     rdx, [rbp+rax+10h]
.text:0000000000006CEA                 not     rax
.text:0000000000006CED                 and     rax, rdx
.text:0000000000006CF0                 cmp     [r13+10h], rax
.text:0000000000006CF4                 jz      short loc_6D10
.text:0000000000006CF6
.text:0000000000006CF6 loc_6CF6:                               ; CODE XREF: _obstack_newchunk+9F↑j
.text:0000000000006CF6                                         ; _obstack_newchunk+E3↓j
.text:0000000000006CF6                 and     byte ptr [r13+50h], 0FDh
.text:0000000000006CFB                 add     rbx, r12
.text:0000000000006CFE                 mov     [r13+10h], r12
.text:0000000000006D02                 mov     [r13+18h], rbx
.text:0000000000006D06                 pop     rbx
.text:0000000000006D07                 pop     rbp
.text:0000000000006D08                 pop     r12
.text:0000000000006D0A                 pop     r13
.text:0000000000006D0C                 pop     r14
.text:0000000000006D0E                 retn
.text:0000000000006D0E ; ---------------------------------------------------------------------------
.text:0000000000006D0F                 align 10h
.text:0000000000006D10
.text:0000000000006D10 loc_6D10:                               ; CODE XREF: _obstack_newchunk+B4↑j
.text:0000000000006D10                 mov     rax, [rbp+8]
.text:0000000000006D14                 mov     rsi, rbp
.text:0000000000006D17                 mov     rdi, r13
.text:0000000000006D1A                 mov     [r14+8], rax
.text:0000000000006D1E                 call    call_freefun
.text:0000000000006D23                 jmp     short loc_6CF6
.text:0000000000006D25 ; ---------------------------------------------------------------------------
.text:0000000000006D25
.text:0000000000006D25 loc_6D25:                               ; CODE XREF: _obstack_newchunk+40↑j
.text:0000000000006D25                                         ; _obstack_newchunk+4C↑j ...
.text:0000000000006D25                 call    cs:obstack_alloc_failed_handler
.text:0000000000006D25 ; } // starts at 6C40
.text:0000000000006D25 _obstack_newchunk endp
.text:0000000000006D25
.text:0000000000006D25 ; ---------------------------------------------------------------------------
.text:0000000000006D2B                 align 10h
.text:0000000000006D30
.text:0000000000006D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D30
.text:0000000000006D30 ; Attributes: info_from_lumina
.text:0000000000006D30
.text:0000000000006D30 ; int __fastcall obstack_allocated_p(obstack_0 *h, void *obj)
.text:0000000000006D30                 public _obstack_allocated_p
.text:0000000000006D30 _obstack_allocated_p proc near          ; DATA XREF: LOAD:0000000000000A10↑o
.text:0000000000006D30 ; __unwind {
.text:0000000000006D30                 mov     rax, [rdi+8]
.text:0000000000006D34                 test    rax, rax
.text:0000000000006D37                 jz      short locret_6D66
.text:0000000000006D39                 nop     dword ptr [rax+00000000h]
.text:0000000000006D40
.text:0000000000006D40 loc_6D40:                               ; CODE XREF: _obstack_allocated_p+21↓j
.text:0000000000006D40                 cmp     rsi, rax
.text:0000000000006D43                 jbe     short loc_6D4A
.text:0000000000006D45                 cmp     [rax], rsi
.text:0000000000006D48                 jnb     short loc_6D60
.text:0000000000006D4A
.text:0000000000006D4A loc_6D4A:                               ; CODE XREF: _obstack_allocated_p+13↑j
.text:0000000000006D4A                 mov     rax, [rax+8]
.text:0000000000006D4E                 test    rax, rax
.text:0000000000006D51                 jnz     short loc_6D40
.text:0000000000006D53                 xor     eax, eax
.text:0000000000006D55                 retn
.text:0000000000006D55 ; ---------------------------------------------------------------------------
.text:0000000000006D56                 align 20h
.text:0000000000006D60
.text:0000000000006D60 loc_6D60:                               ; CODE XREF: _obstack_allocated_p+18↑j
.text:0000000000006D60                 mov     eax, 1
.text:0000000000006D65                 retn
.text:0000000000006D66 ; ---------------------------------------------------------------------------
.text:0000000000006D66
.text:0000000000006D66 locret_6D66:                            ; CODE XREF: _obstack_allocated_p+7↑j
.text:0000000000006D66                 rep retn
.text:0000000000006D66 ; } // starts at 6D30
.text:0000000000006D66 _obstack_allocated_p endp
.text:0000000000006D66
.text:0000000000006D66 ; ---------------------------------------------------------------------------
.text:0000000000006D68                 align 10h
.text:0000000000006D70
.text:0000000000006D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D70
.text:0000000000006D70 ; Attributes: info_from_lumina
.text:0000000000006D70
.text:0000000000006D70 ; void obstack_free(struct obstack *obstack, void *block)
.text:0000000000006D70                 public _obstack_free
.text:0000000000006D70 _obstack_free   proc near               ; CODE XREF: readtokens0_free+A↑p
.text:0000000000006D70                                         ; readtokens0_free+15↑p ...
.text:0000000000006D70 ; __unwind {
.text:0000000000006D70                 push    r12
.text:0000000000006D72                 push    rbp
.text:0000000000006D73                 mov     rbp, rsi
.text:0000000000006D76                 push    rbx
.text:0000000000006D77                 mov     rsi, [rdi+8]
.text:0000000000006D7B                 mov     rbx, rdi
.text:0000000000006D7E                 test    rsi, rsi
.text:0000000000006D81                 jz      short loc_6DAD
.text:0000000000006D83                 nop     dword ptr [rax+rax+00h]
.text:0000000000006D88
.text:0000000000006D88 loc_6D88:                               ; CODE XREF: _obstack_free+3B↓j
.text:0000000000006D88                 cmp     rsi, rbp
.text:0000000000006D8B                 jnb     short loc_6D95
.text:0000000000006D8D                 mov     rax, [rsi]
.text:0000000000006D90                 cmp     rax, rbp
.text:0000000000006D93                 jnb     short loc_6DC0
.text:0000000000006D95
.text:0000000000006D95 loc_6D95:                               ; CODE XREF: _obstack_free+1B↑j
.text:0000000000006D95                 mov     r12, [rsi+8]
.text:0000000000006D99                 mov     rdi, rbx
.text:0000000000006D9C                 call    call_freefun
.text:0000000000006DA1                 or      byte ptr [rbx+50h], 2
.text:0000000000006DA5                 test    r12, r12
.text:0000000000006DA8                 mov     rsi, r12
.text:0000000000006DAB                 jnz     short loc_6D88
.text:0000000000006DAD
.text:0000000000006DAD loc_6DAD:                               ; CODE XREF: _obstack_free+11↑j
.text:0000000000006DAD                 test    rbp, rbp
.text:0000000000006DB0                 jnz     short loc_6DD5
.text:0000000000006DB2                 pop     rbx
.text:0000000000006DB3                 pop     rbp
.text:0000000000006DB4                 pop     r12
.text:0000000000006DB6                 retn
.text:0000000000006DB6 ; ---------------------------------------------------------------------------
.text:0000000000006DB7                 align 20h
.text:0000000000006DC0
.text:0000000000006DC0 loc_6DC0:                               ; CODE XREF: _obstack_free+23↑j
.text:0000000000006DC0                 mov     [rbx+18h], rbp
.text:0000000000006DC4                 mov     [rbx+10h], rbp
.text:0000000000006DC8                 mov     [rbx+20h], rax
.text:0000000000006DCC                 mov     [rbx+8], rsi
.text:0000000000006DD0                 pop     rbx
.text:0000000000006DD1                 pop     rbp
.text:0000000000006DD2                 pop     r12
.text:0000000000006DD4                 retn
.text:0000000000006DD5 ; ---------------------------------------------------------------------------
.text:0000000000006DD5
.text:0000000000006DD5 loc_6DD5:                               ; CODE XREF: _obstack_free+40↑j
.text:0000000000006DD5                 call    _abort
.text:0000000000006DD5 ; } // starts at 6D70
.text:0000000000006DD5 _obstack_free   endp
.text:0000000000006DD5
.text:0000000000006DD5 ; ---------------------------------------------------------------------------
.text:0000000000006DDA                 align 20h
.text:0000000000006DE0
.text:0000000000006DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DE0
.text:0000000000006DE0 ; Attributes: info_from_lumina
.text:0000000000006DE0
.text:0000000000006DE0 ; size_t __fastcall obstack_memory_used(obstack_0 *h)
.text:0000000000006DE0                 public _obstack_memory_used
.text:0000000000006DE0 _obstack_memory_used proc near          ; DATA XREF: LOAD:0000000000000A88↑o
.text:0000000000006DE0 ; __unwind {
.text:0000000000006DE0                 mov     rdx, [rdi+8]
.text:0000000000006DE4                 xor     eax, eax
.text:0000000000006DE6                 test    rdx, rdx
.text:0000000000006DE9                 jz      short locret_6E08
.text:0000000000006DEB                 nop     dword ptr [rax+rax+00h]
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: _obstack_memory_used+20↓j
.text:0000000000006DF0                 mov     rcx, [rdx]
.text:0000000000006DF3                 sub     rcx, rdx
.text:0000000000006DF6                 mov     rdx, [rdx+8]
.text:0000000000006DFA                 add     rax, rcx
.text:0000000000006DFD                 test    rdx, rdx
.text:0000000000006E00                 jnz     short loc_6DF0
.text:0000000000006E02                 rep retn
.text:0000000000006E02 ; ---------------------------------------------------------------------------
.text:0000000000006E04                 align 8
.text:0000000000006E08
.text:0000000000006E08 locret_6E08:                            ; CODE XREF: _obstack_memory_used+9↑j
.text:0000000000006E08                 rep retn
.text:0000000000006E08 ; } // starts at 6DE0
.text:0000000000006E08 _obstack_memory_used endp
.text:0000000000006E08
.text:0000000000006E08 ; ---------------------------------------------------------------------------
.text:0000000000006E0A                 align 10h
.text:0000000000006E10
.text:0000000000006E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E10
.text:0000000000006E10 ; Attributes: info_from_lumina
.text:0000000000006E10
.text:0000000000006E10 ; int __fastcall close_stream(FILE *stream)
.text:0000000000006E10                 public close_stream
.text:0000000000006E10 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000006E10                                         ; close_stdout+33↑p
.text:0000000000006E10 ; __unwind {
.text:0000000000006E10                 push    r12
.text:0000000000006E12                 push    rbp
.text:0000000000006E13                 mov     rbp, rdi
.text:0000000000006E16                 push    rbx
.text:0000000000006E17                 call    ___fpending
.text:0000000000006E1C                 mov     ebx, [rbp+0]
.text:0000000000006E1F                 mov     rdi, rbp        ; stream
.text:0000000000006E22                 mov     r12, rax
.text:0000000000006E25                 call    rpl_fclose
.text:0000000000006E2A                 and     ebx, 20h
.text:0000000000006E2D                 test    ebx, ebx
.text:0000000000006E2F                 jnz     short loc_6E48
.text:0000000000006E31                 test    eax, eax
.text:0000000000006E33                 jz      short loc_6E3F
.text:0000000000006E35                 test    r12, r12
.text:0000000000006E38                 mov     eax, 0FFFFFFFFh
.text:0000000000006E3D                 jz      short loc_6E78
.text:0000000000006E3F
.text:0000000000006E3F loc_6E3F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000006E3F                 pop     rbx
.text:0000000000006E40                 pop     rbp
.text:0000000000006E41                 pop     r12
.text:0000000000006E43                 retn
.text:0000000000006E43 ; ---------------------------------------------------------------------------
.text:0000000000006E44                 align 8
.text:0000000000006E48
.text:0000000000006E48 loc_6E48:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000006E48                 test    eax, eax
.text:0000000000006E4A                 jnz     short loc_6E68
.text:0000000000006E4C                 call    ___errno_location
.text:0000000000006E51                 mov     dword ptr [rax], 0
.text:0000000000006E57                 mov     eax, 0FFFFFFFFh
.text:0000000000006E5C                 pop     rbx
.text:0000000000006E5D                 pop     rbp
.text:0000000000006E5E                 pop     r12
.text:0000000000006E60                 retn
.text:0000000000006E60 ; ---------------------------------------------------------------------------
.text:0000000000006E61                 align 8
.text:0000000000006E68
.text:0000000000006E68 loc_6E68:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000006E68                 pop     rbx
.text:0000000000006E69                 mov     eax, 0FFFFFFFFh
.text:0000000000006E6E                 pop     rbp
.text:0000000000006E6F                 pop     r12
.text:0000000000006E71                 retn
.text:0000000000006E71 ; ---------------------------------------------------------------------------
.text:0000000000006E72                 align 8
.text:0000000000006E78
.text:0000000000006E78 loc_6E78:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000006E78                 call    ___errno_location
.text:0000000000006E7D                 cmp     dword ptr [rax], 9
.text:0000000000006E80                 pop     rbx
.text:0000000000006E81                 pop     rbp
.text:0000000000006E82                 pop     r12
.text:0000000000006E84                 setnz   al
.text:0000000000006E87                 movzx   eax, al
.text:0000000000006E8A                 neg     eax
.text:0000000000006E8C                 retn
.text:0000000000006E8C ; } // starts at 6E10
.text:0000000000006E8C close_stream    endp
.text:0000000000006E8C
.text:0000000000006E8C ; ---------------------------------------------------------------------------
.text:0000000000006E8D                 align 10h
.text:0000000000006E90
.text:0000000000006E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E90
.text:0000000000006E90
.text:0000000000006E90                 public hard_locale
.text:0000000000006E90 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000006E90 ; __unwind {
.text:0000000000006E90                 sub     rsp, 8
.text:0000000000006E94                 xor     esi, esi        ; locale
.text:0000000000006E96                 call    _setlocale
.text:0000000000006E9B                 mov     rdx, rax
.text:0000000000006E9E                 mov     eax, 1
.text:0000000000006EA3                 test    rdx, rdx
.text:0000000000006EA6                 jz      short loc_6EC5
.text:0000000000006EA8                 lea     rdi, aC         ; "C"
.text:0000000000006EAF                 mov     ecx, 2
.text:0000000000006EB4                 mov     rsi, rdx
.text:0000000000006EB7                 repe cmpsb
.text:0000000000006EB9                 setnbe  cl
.text:0000000000006EBC                 sbb     cl, 0
.text:0000000000006EBF                 xor     eax, eax
.text:0000000000006EC1                 test    cl, cl
.text:0000000000006EC3                 jnz     short loc_6ED0
.text:0000000000006EC5
.text:0000000000006EC5 loc_6EC5:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000006EC5                 add     rsp, 8
.text:0000000000006EC9                 retn
.text:0000000000006EC9 ; ---------------------------------------------------------------------------
.text:0000000000006ECA                 align 10h
.text:0000000000006ED0
.text:0000000000006ED0 loc_6ED0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000006ED0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000006ED7                 mov     ecx, 6
.text:0000000000006EDC                 mov     rsi, rdx
.text:0000000000006EDF                 repe cmpsb
.text:0000000000006EE1                 setnbe  al
.text:0000000000006EE4                 sbb     al, 0
.text:0000000000006EE6                 test    al, al
.text:0000000000006EE8                 setnz   al
.text:0000000000006EEB                 add     rsp, 8
.text:0000000000006EEF                 retn
.text:0000000000006EEF ; } // starts at 6E90
.text:0000000000006EEF hard_locale     endp
.text:0000000000006EEF
.text:0000000000006EF0
.text:0000000000006EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006EF0
.text:0000000000006EF0
.text:0000000000006EF0                 public locale_charset
.text:0000000000006EF0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000006EF0 ; __unwind {
.text:0000000000006EF0                 sub     rsp, 8
.text:0000000000006EF4                 mov     edi, 0Eh        ; item
.text:0000000000006EF9                 call    _nl_langinfo
.text:0000000000006EFE                 test    rax, rax
.text:0000000000006F01                 jz      short loc_6F20
.text:0000000000006F03                 cmp     byte ptr [rax], 0
.text:0000000000006F06                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000006F0D                 cmovz   rax, rdx
.text:0000000000006F11                 add     rsp, 8
.text:0000000000006F15                 retn
.text:0000000000006F15 ; ---------------------------------------------------------------------------
.text:0000000000006F16                 align 20h
.text:0000000000006F20
.text:0000000000006F20 loc_6F20:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000006F20                 lea     rax, aAscii     ; "ASCII"
.text:0000000000006F27                 add     rsp, 8
.text:0000000000006F2B                 retn
.text:0000000000006F2B ; } // starts at 6EF0
.text:0000000000006F2B locale_charset  endp
.text:0000000000006F2B
.text:0000000000006F2B ; ---------------------------------------------------------------------------
.text:0000000000006F2C                 align 10h
.text:0000000000006F30
.text:0000000000006F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F30
.text:0000000000006F30 ; Attributes: info_from_lumina
.text:0000000000006F30
.text:0000000000006F30 ; void _libc_csu_init(void)
.text:0000000000006F30                 public __libc_csu_init
.text:0000000000006F30 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000006F30 ; __unwind {
.text:0000000000006F30                 push    r15
.text:0000000000006F32                 push    r14
.text:0000000000006F34                 mov     r15, rdx
.text:0000000000006F37                 push    r13
.text:0000000000006F39                 push    r12
.text:0000000000006F3B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000006F42                 push    rbp
.text:0000000000006F43                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000006F4A                 push    rbx
.text:0000000000006F4B                 mov     r13d, edi
.text:0000000000006F4E                 mov     r14, rsi
.text:0000000000006F51                 sub     rbp, r12
.text:0000000000006F54                 sub     rsp, 8
.text:0000000000006F58                 sar     rbp, 3
.text:0000000000006F5C                 call    _init_proc
.text:0000000000006F61                 test    rbp, rbp
.text:0000000000006F64                 jz      short loc_6F86
.text:0000000000006F66                 xor     ebx, ebx
.text:0000000000006F68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006F70
.text:0000000000006F70 loc_6F70:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000006F70                 mov     rdx, r15
.text:0000000000006F73                 mov     rsi, r14
.text:0000000000006F76                 mov     edi, r13d
.text:0000000000006F79                 call    ds:(__frame_dummy_init_array_entry - 209A30h)[r12+rbx*8]
.text:0000000000006F7D                 add     rbx, 1
.text:0000000000006F81                 cmp     rbp, rbx
.text:0000000000006F84                 jnz     short loc_6F70
.text:0000000000006F86
.text:0000000000006F86 loc_6F86:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000006F86                 add     rsp, 8
.text:0000000000006F8A                 pop     rbx
.text:0000000000006F8B                 pop     rbp
.text:0000000000006F8C                 pop     r12
.text:0000000000006F8E                 pop     r13
.text:0000000000006F90                 pop     r14
.text:0000000000006F92                 pop     r15
.text:0000000000006F94                 retn
.text:0000000000006F94 ; } // starts at 6F30
.text:0000000000006F94 __libc_csu_init endp
.text:0000000000006F94
.text:0000000000006F94 ; ---------------------------------------------------------------------------
.text:0000000000006F95                 align 20h
.text:0000000000006FA0
.text:0000000000006FA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FA0
.text:0000000000006FA0
.text:0000000000006FA0 ; void _libc_csu_fini(void)
.text:0000000000006FA0                 public __libc_csu_fini
.text:0000000000006FA0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000006FA0 ; __unwind {
.text:0000000000006FA0                 rep retn
.text:0000000000006FA0 ; } // starts at 6FA0
.text:0000000000006FA0 __libc_csu_fini endp
.text:0000000000006FA0
.text:0000000000006FA0 ; ---------------------------------------------------------------------------
.text:0000000000006FA2                 align 10h
.text:0000000000006FB0
.text:0000000000006FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FB0
.text:0000000000006FB0
.text:0000000000006FB0 atexit          proc near               ; CODE XREF: main+6F↑p
.text:0000000000006FB0 ; __unwind {
.text:0000000000006FB0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000006FB7                 xor     esi, esi        ; obj
.text:0000000000006FB9                 jmp     ___cxa_atexit
.text:0000000000006FB9 ; } // starts at 6FB0
.text:0000000000006FB9 atexit          endp
.text:0000000000006FB9
.text:0000000000006FB9 _text           ends
.text:0000000000006FB9
LOAD:0000000000006FBE ; ===========================================================================
LOAD:0000000000006FBE
LOAD:0000000000006FBE ; Segment type: Pure code
LOAD:0000000000006FBE ; Segment permissions: Read/Execute
LOAD:0000000000006FBE LOAD            segment byte public 'CODE' use64
LOAD:0000000000006FBE                 assume cs:LOAD
LOAD:0000000000006FBE                 ;org 6FBEh
LOAD:0000000000006FBE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006FBE                 align 20h
LOAD:0000000000006FBE LOAD            ends
LOAD:0000000000006FBE
.fini:0000000000006FC0 ; ===========================================================================
.fini:0000000000006FC0
.fini:0000000000006FC0 ; Segment type: Pure code
.fini:0000000000006FC0 ; Segment permissions: Read/Execute
.fini:0000000000006FC0 _fini           segment dword public 'CODE' use64
.fini:0000000000006FC0                 assume cs:_fini
.fini:0000000000006FC0                 ;org 6FC0h
.fini:0000000000006FC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000006FC0
.fini:0000000000006FC0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000006FC0
.fini:0000000000006FC0
.fini:0000000000006FC0                 public _term_proc
.fini:0000000000006FC0 _term_proc      proc near
.fini:0000000000006FC0                 sub     rsp, 8          ; _fini
.fini:0000000000006FC4                 add     rsp, 8
.fini:0000000000006FC8                 retn
.fini:0000000000006FC8 _term_proc      endp
.fini:0000000000006FC8
.fini:0000000000006FC8 _fini           ends
.fini:0000000000006FC8
LOAD:0000000000006FC9 ; ===========================================================================
LOAD:0000000000006FC9
LOAD:0000000000006FC9 ; Segment type: Pure code
LOAD:0000000000006FC9 ; Segment permissions: Read/Execute
LOAD:0000000000006FC9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000006FC9                 assume cs:LOAD
LOAD:0000000000006FC9                 ;org 6FC9h
LOAD:0000000000006FC9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000006FC9                 align 20h
LOAD:0000000000006FC9 LOAD            ends
LOAD:0000000000006FC9
.rodata:0000000000006FE0 ; ===========================================================================
.rodata:0000000000006FE0
.rodata:0000000000006FE0 ; Segment type: Pure data
.rodata:0000000000006FE0 ; Segment permissions: Read
.rodata:0000000000006FE0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000006FE0                 assume cs:_rodata
.rodata:0000000000006FE0                 ;org 6FE0h
.rodata:0000000000006FE0                 public _IO_stdin_used
.rodata:0000000000006FE0 _IO_stdin_used  db    1
.rodata:0000000000006FE1                 db    0
.rodata:0000000000006FE2                 db    2
.rodata:0000000000006FE3                 db    0
.rodata:0000000000006FE4 ; const char aStandardInput[]
.rodata:0000000000006FE4 aStandardInput  db 'standard input',0   ; DATA XREF: wc:loc_3488↑o
.rodata:0000000000006FF3 aWc             db 'wc',0               ; DATA XREF: main+1B9↑o
.rodata:0000000000006FF3                                         ; usage+159↑o ...
.rodata:0000000000006FF6 asc_6FF6        db '[',0                ; DATA XREF: usage+165↑o
.rodata:0000000000006FF8 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+18C↑o
.rodata:0000000000007008 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000007008                                         ; DATA XREF: usage+1BC↑o
.rodata:0000000000007008                                         ; usage+2B4↑o ...
.rodata:000000000000701E aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1CD↑o
.rodata:0000000000007028 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1D9↑o
.rodata:0000000000007037 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+16C↑o
.rodata:0000000000007041 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+198↑o
.rodata:000000000000704B aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1B0↑o
.rodata:0000000000007055 ; const char aSOnlineHelpS[]
.rodata:0000000000007055 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+222↑o
.rodata:0000000000007055                 db '%s online help: <%s>',0Ah,0
.rodata:000000000000706C unk_706C        db  47h ; G             ; DATA XREF: main+1B2↑o
.rodata:000000000000706C                                         ; usage+23E↑o ...
.rodata:000000000000706D                 db  4Eh ; N
.rodata:000000000000706E                 db  55h ; U
.rodata:000000000000706F                 db  20h
.rodata:0000000000007070 ; const char domainname[]
.rodata:0000000000007070 domainname      db 'coreutils',0        ; DATA XREF: main+50↑o
.rodata:0000000000007070                                         ; main+5C↑o ...
.rodata:000000000000707A ; const char s2[]
.rodata:000000000000707A s2              db 'en_',0              ; DATA XREF: usage+265↑o
.rodata:000000000000707A                                         ; usage+326↑o
.rodata:000000000000707E ; const char aFullDocumentat[]
.rodata:000000000000707E aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000000707E                                         ; DATA XREF: usage:loc_38D1↑o
.rodata:000000000000707E                                         ; usage:loc_398E↑o
.rodata:0000000000007099 ; const char dirname[]
.rodata:0000000000007099 dirname         db '/usr/local/share/locale',0
.rodata:0000000000007099                                         ; DATA XREF: main+49↑o
.rodata:00000000000070B1 ; const char name[]
.rodata:00000000000070B1 name            db 'POSIXLY_CORRECT',0  ; DATA XREF: main+97↑o
.rodata:00000000000070C1 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+1A4↑o
.rodata:00000000000070D1 aPaulRubin      db 'Paul Rubin',0       ; DATA XREF: main+1AB↑o
.rodata:00000000000070DC ; const char shortopts[]
.rodata:00000000000070DC shortopts       db 'clLmw',0            ; DATA XREF: main:loc_1EF0↑o
.rodata:00000000000070E2 ; const char aExtraOperandS[]
.rodata:00000000000070E2 aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+9C6↑o
.rodata:00000000000070F3 ; const char aCannotOpenSFor[]
.rodata:00000000000070F3 aCannotOpenSFor db 'cannot open %s for reading',0
.rodata:00000000000070F3                                         ; DATA XREF: main+848↑o
.rodata:000000000000710E ; const char aSReadError[]
.rodata:000000000000710E aSReadError     db '%s: read error',0   ; DATA XREF: main+73B↑o
.rodata:000000000000710E                                         ; main:loc_2600↑o
.rodata:000000000000711D ; const char file[]
.rodata:000000000000711D file            db '../coreutils-8.31/src/wc.c',0
.rodata:000000000000711D                                         ; DATA XREF: main+64C↑o
.rodata:0000000000007138 ; const char aTotal[]
.rodata:0000000000007138 aTotal          db 'total',0            ; DATA XREF: main+69E↑o
.rodata:000000000000713E ; const char aInvalidZeroLen[]
.rodata:000000000000713E aInvalidZeroLen db 'invalid zero-length file name',0
.rodata:000000000000713E                                         ; DATA XREF: main+554↑o
.rodata:000000000000713E                                         ; main+5FA↑o
.rodata:000000000000715C ; const char aSLuS[]
.rodata:000000000000715C aSLuS           db '%s:%lu: %s',0       ; DATA XREF: main+57C↑o
.rodata:0000000000007167 aBytes          db 'bytes',0            ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:000000000000716D aChars          db 'chars',0            ; DATA XREF: .data.rel.ro:0000000000209A60↓o
.rodata:0000000000007173 aLines          db 'lines',0            ; DATA XREF: .data.rel.ro:0000000000209A80↓o
.rodata:0000000000007179 aWords          db 'words',0            ; DATA XREF: .data.rel.ro:0000000000209AA0↓o
.rodata:000000000000717F aFiles0From     db 'files0-from',0      ; DATA XREF: .data.rel.ro:0000000000209AC0↓o
.rodata:000000000000718B aMaxLineLength  db 'max-line-length',0  ; DATA XREF: .data.rel.ro:0000000000209AE0↓o
.rodata:000000000000719B aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000209B00↓o
.rodata:00000000000071A0 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000209B20↓o
.rodata:00000000000071A8 jpt_2DF7        dd offset loc_30C0 - 71A8h
.rodata:00000000000071A8                                         ; DATA XREF: wc+286↑o
.rodata:00000000000071A8                                         ; wc+290↑r
.rodata:00000000000071A8                 dd offset loc_30B0 - 71A8h ; jump table for switch statement
.rodata:00000000000071A8                 dd offset loc_30A0 - 71A8h
.rodata:00000000000071A8                 dd offset loc_3080 - 71A8h
.rodata:00000000000071A8                 dd offset loc_3080 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset def_2DF7 - 71A8h
.rodata:00000000000071A8                 dd offset loc_3048 - 71A8h
.rodata:0000000000007208 jpt_319A        dd offset loc_31C8 - 7208h
.rodata:0000000000007208                                         ; DATA XREF: wc+5B8↑o
.rodata:0000000000007208                                         ; wc+633↑r
.rodata:0000000000007208                 dd offset loc_31A0 - 7208h ; jump table for switch statement
.rodata:0000000000007208                 dd offset loc_31AE - 7208h
.rodata:0000000000007208                 dd offset loc_31A5 - 7208h
.rodata:0000000000007208                 dd offset loc_31A5 - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset def_319A - 7208h
.rodata:0000000000007208                 dd offset loc_31D8 - 7208h
.rodata:0000000000007268 jpt_3420        dd offset loc_30C5 - 7268h
.rodata:0000000000007268                                         ; DATA XREF: wc+8B2↑o
.rodata:0000000000007268                                         ; wc+8B9↑r
.rodata:0000000000007268                 dd offset loc_30B5 - 7268h ; jump table for switch statement
.rodata:0000000000007268                 dd offset loc_3058 - 7268h
.rodata:0000000000007268                 dd offset loc_3085 - 7268h
.rodata:0000000000007268                 dd offset loc_3085 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset def_3420 - 7268h
.rodata:0000000000007268                 dd offset loc_304D - 7268h
.rodata:00000000000072C8 format_sp_int_7975 db ' %*s',0          ; DATA XREF: write_counts+14E↑o
.rodata:00000000000072C8                                         ; write_counts+17E↑o ...
.rodata:00000000000072CD ; const char _PRETTY_FUNCTION___8129[]
.rodata:00000000000072CD __PRETTY_FUNCTION___8129 db 'main',0    ; DATA XREF: main+645↑o
.rodata:00000000000072D2                 align 8
.rodata:00000000000072D8 ; const char aTrySHelpForMor[]
.rodata:00000000000072D8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000072D8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000072FF                 align 20h
.rodata:0000000000007300 ; const char aUsageSOptionFi[]
.rodata:0000000000007300 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah
.rodata:0000000000007300                                         ; DATA XREF: usage:loc_36AD↑o
.rodata:0000000000007300                 db '  or:  %s [OPTION]... --files0-from=F',0Ah,0
.rodata:0000000000007347                 align 8
.rodata:0000000000007348 ; const char aPrintNewlineWo[]
.rodata:0000000000007348 aPrintNewlineWo db 'Print newline, word, and byte counts for each FILE, and a total l'
.rodata:0000000000007348                                         ; DATA XREF: usage+87↑o
.rodata:0000000000007348                 db 'ine if',0Ah
.rodata:0000000000007348                 db 'more than one FILE is specified.  A word is a non-zero-length seq'
.rodata:0000000000007348                 db 'uence of',0Ah
.rodata:0000000000007348                 db 'characters delimited by white space.',0Ah,0
.rodata:0000000000007400 ; const char aWithNoFileOrWh[]
.rodata:0000000000007400 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+AC↑o
.rodata:0000000000007400                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:0000000000007438 ; const char aTheOptionsBelo[]
.rodata:0000000000007438 aTheOptionsBelo db 0Ah                  ; DATA XREF: usage+D1↑o
.rodata:0000000000007438                 db 'The options below may be used to select which counts are printed,'
.rodata:0000000000007438                 db ' always in',0Ah
.rodata:0000000000007438                 db 'the following order: newline, word, character, byte, maximum line'
.rodata:0000000000007438                 db ' length.',0Ah
.rodata:0000000000007438                 db '  -c, --bytes            print the byte counts',0Ah
.rodata:0000000000007438                 db '  -m, --chars            print the character counts',0Ah
.rodata:0000000000007438                 db '  -l, --lines            print the newline counts',0Ah,0
.rodata:0000000000007565                 align 8
.rodata:0000000000007568 ; const char aFiles0FromFRea[]
.rodata:0000000000007568 aFiles0FromFRea db '      --files0-from=F    read input from the files specified by',0Ah
.rodata:0000000000007568                                         ; DATA XREF: usage+F6↑o
.rodata:0000000000007568                 db '                           NUL-terminated names in file F;',0Ah
.rodata:0000000000007568                 db '                           If F is - then read names from standar'
.rodata:0000000000007568                 db 'd input',0Ah
.rodata:0000000000007568                 db '  -L, --max-line-length  print the maximum display width',0Ah
.rodata:0000000000007568                 db '  -w, --words            print the word counts',0Ah,0
.rodata:0000000000007695                 align 8
.rodata:0000000000007698 ; const char aHelpDisplayThi[]
.rodata:0000000000007698 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000007698                                         ; DATA XREF: usage+11B↑o
.rodata:00000000000076C5                 align 8
.rodata:00000000000076C8 ; const char aVersionOutputV[]
.rodata:00000000000076C8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000076C8                                         ; DATA XREF: usage+140↑o
.rodata:00000000000076FE                 align 20h
.rodata:0000000000007700 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000007700                                         ; DATA XREF: usage+237↑o
.rodata:0000000000007700                                         ; usage+29B↑o ...
.rodata:0000000000007728 ; const char aReportAnyTrans[]
.rodata:0000000000007728 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000007728                                         ; DATA XREF: usage+38F↑o
.rodata:0000000000007728                 db 'am/>',0Ah,0
.rodata:000000000000776F                 align 10h
.rodata:0000000000007770 ; const char aOrAvailableLoc[]
.rodata:0000000000007770 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000007770                                         ; DATA XREF: usage:loc_3916↑o
.rodata:00000000000077A3                 align 8
.rodata:00000000000077A8 ; const char aFileOperandsCa[]
.rodata:00000000000077A8 aFileOperandsCa db 'file operands cannot be combined with --files0-from',0
.rodata:00000000000077A8                                         ; DATA XREF: main+9ED↑o
.rodata:00000000000077DC                 align 20h
.rodata:00000000000077E0 ; const char aCannotReadFile[]
.rodata:00000000000077E0 aCannotReadFile db 'cannot read file names from %s',0
.rodata:00000000000077E0                                         ; DATA XREF: main+A2F↑o
.rodata:00000000000077FF                 align 20h
.rodata:0000000000007800 ; const char assertion[]
.rodata:0000000000007800 assertion       db '!"unexpected error code from argv_iter"',0
.rodata:0000000000007800                                         ; DATA XREF: main+653↑o
.rodata:0000000000007828 ; const char msgid[]
.rodata:0000000000007828 msgid           db 'when reading file names from stdin, no file name of %s allowed',0
.rodata:0000000000007828                                         ; DATA XREF: main+51B↑o
.rodata:0000000000007867                 align 8
.rodata:0000000000007868 qword_7868      dq 4164000000000000h    ; DATA XREF: main+919↑r
.rodata:0000000000007870 qword_7870      dq 3FE0000000000000h    ; DATA XREF: main+911↑r
.rodata:0000000000007878 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:000000000000787D ; const char aWriteError[]
.rodata:000000000000787D aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3BB3↑o
.rodata:0000000000007889 ; const char aS[4]
.rodata:0000000000007889 aS              db '%s: '               ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000007889                                         ; write_counts:loc_29EE↑o
.rodata:000000000000788D ; const char format[]
.rodata:000000000000788D format          dd offset aUsageSOptionFi+25h
.rodata:000000000000788D                                         ; DATA XREF: main+4F7↑o
.rodata:000000000000788D                                         ; main+60D↑o ...
.rodata:000000000000788D                                         ; "  %s [OPTION]... --files0-from=F\n"
.rodata:0000000000007891                 align 20h
.rodata:00000000000078A0                 public is_basic_table
.rodata:00000000000078A0 is_basic_table  dq 0FFFFFFEF00001A00h   ; DATA XREF: wc+255↑o
.rodata:00000000000078A0                                         ; is_basic+2↑o
.rodata:00000000000078A8                 db 0FEh
.rodata:00000000000078A9                 db 0FFh
.rodata:00000000000078AA                 db 0FFh
.rodata:00000000000078AB                 db 0FFh
.rodata:00000000000078AC                 db 0FEh
.rodata:00000000000078AD                 db 0FFh
.rodata:00000000000078AE                 db 0FFh
.rodata:00000000000078AF                 db  7Fh ; 
.rodata:00000000000078B0                 db    0
.rodata:00000000000078B1                 db    0
.rodata:00000000000078B2                 db    0
.rodata:00000000000078B3                 db    0
.rodata:00000000000078B4                 db    0
.rodata:00000000000078B5                 db    0
.rodata:00000000000078B6                 db    0
.rodata:00000000000078B7                 db    0
.rodata:00000000000078B8                 db    0
.rodata:00000000000078B9                 db    0
.rodata:00000000000078BA                 db    0
.rodata:00000000000078BB                 db    0
.rodata:00000000000078BC                 db    0
.rodata:00000000000078BD                 db    0
.rodata:00000000000078BE                 db    0
.rodata:00000000000078BF                 db    0
.rodata:00000000000078C0 qword_78C0      dq 4190000000000000h    ; DATA XREF: physmem_total+8C↑r
.rodata:00000000000078C8 qword_78C8      dq 3FD0000000000000h    ; DATA XREF: physmem_available+D5↑r
.rodata:00000000000078D0 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000078D0                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000007908 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000007910 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000007910                                         ; main+27E↑o ...
.rodata:0000000000007914 unk_7914        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000007915                 db  80h
.rodata:0000000000007916                 db  98h
.rodata:0000000000007917                 db    0
.rodata:0000000000007918 unk_7918        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000007919                 db  80h
.rodata:000000000000791A                 db  99h
.rodata:000000000000791B                 db    0
.rodata:000000000000791C unk_791C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000791D                 db    7
.rodata:000000000000791E                 db  65h ; e
.rodata:000000000000791F                 db    0
.rodata:0000000000007920 unk_7920        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000007921                 db 0AFh
.rodata:0000000000007922                 db    0
.rodata:0000000000007923 unk_7923        db  22h ; "             ; DATA XREF: gettext_quote:loc_4020↑o
.rodata:0000000000007923                                         ; quotearg_buffer_restyled:loc_4DDB↑o ...
.rodata:0000000000007924                 db    0
.rodata:0000000000007925 ; const char asc_7925[2]
.rodata:0000000000007925 asc_7925        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000007925                                         ; quotearg_buffer_restyled:loc_41A3↑o ...
.rodata:0000000000007927 ; const char asc_7927[2]
.rodata:0000000000007927 asc_7927        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000007927                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000007929 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000007931 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000209B68↓o
.rodata:0000000000007937 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000209B70↓o
.rodata:0000000000007944 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000209B78↓o
.rodata:0000000000007944                                         ; .data.rel.ro:0000000000209B98↓o
.rodata:0000000000007951 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000007951                                         ; DATA XREF: .data.rel.ro:0000000000209B80↓o
.rodata:0000000000007965 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000209B90↓o
.rodata:000000000000796D aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000209BA8↓o
.rodata:0000000000007975                 align 20h
.rodata:0000000000007980 jpt_4181        dd offset loc_4F2A - 7980h
.rodata:0000000000007980                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000007980                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000007980                 dd offset loc_4183 - 7980h ; jump table for switch statement
.rodata:0000000000007980                 dd offset loc_5158 - 7980h
.rodata:0000000000007980                 dd offset loc_4F64 - 7980h
.rodata:0000000000007980                 dd offset loc_4D54 - 7980h
.rodata:0000000000007980                 dd offset loc_4DB0 - 7980h
.rodata:0000000000007980                 dd offset loc_4E05 - 7980h
.rodata:0000000000007980                 dd offset loc_4E4A - 7980h
.rodata:0000000000007980                 dd offset loc_4E84 - 7980h
.rodata:0000000000007980                 dd offset loc_4E84 - 7980h
.rodata:0000000000007980                 dd offset loc_4E84 - 7980h
.rodata:00000000000079AC jpt_42DE        dd offset loc_4500 - 79ACh, offset def_42DE - 79ACh, offset def_42DE - 79ACh
.rodata:00000000000079AC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000079AC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset def_42DE - 79ACh, offset def_42DE - 79ACh ; jump table for switch statement
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset loc_4540 - 79ACh, offset loc_4448 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4408 - 79ACh, offset loc_45D0 - 79ACh, offset loc_45C0 - 79ACh
.rodata:00000000000079AC                 dd offset loc_45B0 - 79ACh, offset loc_45A0 - 79ACh, offset def_42DE - 79ACh
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset def_42DE - 79ACh, offset def_42DE - 79ACh
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset def_42DE - 79ACh, offset def_42DE - 79ACh
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset def_42DE - 79ACh, offset def_42DE - 79ACh
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset def_42DE - 79ACh, offset def_42DE - 79ACh
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset def_42DE - 79ACh, offset def_42DE - 79ACh
.rodata:00000000000079AC                 dd offset def_42DE - 79ACh, offset def_42DE - 79ACh, offset loc_4590 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4580 - 79ACh, offset loc_4580 - 79ACh, offset loc_4550 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4580 - 79ACh, offset loc_4528 - 79ACh, offset loc_4580 - 79ACh
.rodata:00000000000079AC                 dd offset loc_43E3 - 79ACh, offset loc_4580 - 79ACh, offset loc_4580 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4580 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4580 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4580 - 79ACh, offset loc_4580 - 79ACh, offset loc_4580 - 79ACh
.rodata:00000000000079AC                 dd offset loc_43B3 - 79ACh, offset def_42DE - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4580 - 79ACh, offset loc_4458 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4580 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4580 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4528 - 79ACh, offset loc_4528 - 79ACh, offset loc_4528 - 79ACh
.rodata:00000000000079AC                 dd offset loc_42E3 - 79ACh, offset loc_4580 - 79ACh, offset loc_42E3 - 79ACh
.rodata:00000000000079AC                 dd offset loc_4550 - 79ACh
.rodata:0000000000007BA8 jpt_466A        dd offset loc_46D0 - 7BA8h, offset def_466A - 7BA8h, offset def_466A - 7BA8h
.rodata:0000000000007BA8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000007BA8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset def_466A - 7BA8h, offset def_466A - 7BA8h ; jump table for switch statement
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset loc_46C0 - 7BA8h, offset loc_4810 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_47F8 - 7BA8h, offset loc_46A8 - 7BA8h, offset loc_47E8 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4690 - 7BA8h, offset loc_47D0 - 7BA8h, offset def_466A - 7BA8h
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset def_466A - 7BA8h, offset def_466A - 7BA8h
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset def_466A - 7BA8h, offset def_466A - 7BA8h
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset def_466A - 7BA8h, offset def_466A - 7BA8h
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset def_466A - 7BA8h, offset def_466A - 7BA8h
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset def_466A - 7BA8h, offset def_466A - 7BA8h
.rodata:0000000000007BA8                 dd offset def_466A - 7BA8h, offset def_466A - 7BA8h, offset loc_47B8 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_47A0 - 7BA8h, offset loc_47A0 - 7BA8h, offset loc_4788 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_47A0 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_47A0 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_43E0 - 7BA8h, offset loc_47A0 - 7BA8h, offset loc_47A0 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_47A0 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_47A0 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_47A0 - 7BA8h, offset loc_47A0 - 7BA8h, offset loc_47A0 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_43B0 - 7BA8h, offset def_466A - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_47A0 - 7BA8h, offset loc_4670 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_47A0 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_47A0 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h, offset loc_4770 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_42E0 - 7BA8h, offset loc_47A0 - 7BA8h, offset loc_42E0 - 7BA8h
.rodata:0000000000007BA8                 dd offset loc_4788 - 7BA8h
.rodata:0000000000007DA4                 align 20h
.rodata:0000000000007DC0                 public quoting_style_vals
.rodata:0000000000007DC0 quoting_style_vals db    0
.rodata:0000000000007DC1                 db    0
.rodata:0000000000007DC2                 db    0
.rodata:0000000000007DC3                 db    0
.rodata:0000000000007DC4                 db    1
.rodata:0000000000007DC5                 db    0
.rodata:0000000000007DC6                 db    0
.rodata:0000000000007DC7                 db    0
.rodata:0000000000007DC8                 db    2
.rodata:0000000000007DC9                 db    0
.rodata:0000000000007DCA                 db    0
.rodata:0000000000007DCB                 db    0
.rodata:0000000000007DCC                 db    3
.rodata:0000000000007DCD                 db    0
.rodata:0000000000007DCE                 db    0
.rodata:0000000000007DCF                 db    0
.rodata:0000000000007DD0                 db    4
.rodata:0000000000007DD1                 db    0
.rodata:0000000000007DD2                 db    0
.rodata:0000000000007DD3                 db    0
.rodata:0000000000007DD4                 db    5
.rodata:0000000000007DD5                 db    0
.rodata:0000000000007DD6                 db    0
.rodata:0000000000007DD7                 db    0
.rodata:0000000000007DD8                 db    6
.rodata:0000000000007DD9                 db    0
.rodata:0000000000007DDA                 db    0
.rodata:0000000000007DDB                 db    0
.rodata:0000000000007DDC                 db    7
.rodata:0000000000007DDD                 db    0
.rodata:0000000000007DDE                 db    0
.rodata:0000000000007DDF                 db    0
.rodata:0000000000007DE0                 db    8
.rodata:0000000000007DE1                 db    0
.rodata:0000000000007DE2                 db    0
.rodata:0000000000007DE3                 db    0
.rodata:0000000000007DE4                 db    9
.rodata:0000000000007DE5                 db    0
.rodata:0000000000007DE6                 db    0
.rodata:0000000000007DE7                 db    0
.rodata:0000000000007DE8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000007DE8                                         ; main+A07↑o ...
.rodata:0000000000007DF4 aSS             db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000007DFB ; const char aC_0[]
.rodata:0000000000007DFB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_60CC↑o
.rodata:0000000000007DFF ; const char aWrittenByS[]
.rodata:0000000000007DFF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000007DFF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000007E0F ; const char aWrittenBySAndS[]
.rodata:0000000000007E0F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000007E0F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000007E26 ; const char aWrittenBySSAnd[]
.rodata:0000000000007E26 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000007E26                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000007E42 ; const char aReportBugsToS[]
.rodata:0000000000007E42 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000007E42                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000007E57 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000007E57                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000007E6D ; const char aSHomePageS[]
.rodata:0000000000007E6D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000007E6D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000007E81                 align 8
.rodata:0000000000007E88 ; const char aLicenseGplv3Gn[]
.rodata:0000000000007E88 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000007E88                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000007E88                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000007E88                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000007E88                 db '.',0Ah
.rodata:0000000000007E88                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000007E88                 db 0Ah,0
.rodata:0000000000007F54                 align 8
.rodata:0000000000007F58 ; const char aWrittenBySSSAn[]
.rodata:0000000000007F58 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007F58                                         ; DATA XREF: version_etc_arn:loc_6320↑o
.rodata:0000000000007F58                 db 'and %s.',0Ah,0
.rodata:0000000000007F78 ; const char aWrittenBySSSSA[]
.rodata:0000000000007F78 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007F78                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000007F78                 db '%s, and %s.',0Ah,0
.rodata:0000000000007F9C                 align 20h
.rodata:0000000000007FA0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000007FA0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007FA0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000007FA0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000007FC8 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000007FC8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007FC8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000007FC8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000007FF4                 align 8
.rodata:0000000000007FF8 ; const char aWrittenBySSSSS[]
.rodata:0000000000007FF8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000007FF8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000007FF8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000007FF8                 db 'and %s.',0Ah,0
.rodata:0000000000008028 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000008028 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008028                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000008028                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008028                 db '%s, and %s.',0Ah,0
.rodata:000000000000805C                 align 20h
.rodata:0000000000008060 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000008060                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000008060                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000008060                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000809C                 align 20h
.rodata:00000000000080A0 ; const char aGeneralHelpUsi[]
.rodata:00000000000080A0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000080A0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000080A0                 db 0
.rodata:00000000000080E1                 align 8
.rodata:00000000000080E8 jpt_6134        dd offset loc_61B6 - 80E8h
.rodata:00000000000080E8                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:00000000000080E8                                         ; version_etc_arn+9D↑r
.rodata:00000000000080E8                 dd offset loc_6248 - 80E8h ; jump table for switch statement
.rodata:00000000000080E8                 dd offset loc_6288 - 80E8h
.rodata:00000000000080E8                 dd offset loc_62D0 - 80E8h
.rodata:00000000000080E8                 dd offset loc_6320 - 80E8h
.rodata:00000000000080E8                 dd offset loc_6378 - 80E8h
.rodata:00000000000080E8                 dd offset loc_63A8 - 80E8h
.rodata:00000000000080E8                 dd offset loc_6410 - 80E8h
.rodata:00000000000080E8                 dd offset loc_6140 - 80E8h
.rodata:00000000000080E8                 dd offset loc_61F0 - 80E8h
.rodata:0000000000008110                 align 20h
.rodata:0000000000008120                 public version_etc_copyright
.rodata:0000000000008120 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000008120                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000814F ; const char aMemoryExhauste[]
.rodata:000000000000814F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000814F                                         ; print_and_abort↑o
.rodata:0000000000008160 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000008162 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_6ED0↑o
.rodata:0000000000008168 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000008168                                         ; locale_charset:loc_6F20↑o
.rodata:0000000000008168 _rodata         ends
.rodata:0000000000008168
LOAD:000000000000816E ; ===========================================================================
LOAD:000000000000816E
LOAD:000000000000816E ; Segment type: Pure code
LOAD:000000000000816E ; Segment permissions: Read/Execute
LOAD:000000000000816E LOAD            segment byte public 'CODE' use64
LOAD:000000000000816E                 assume cs:LOAD
LOAD:000000000000816E                 ;org 816Eh
LOAD:000000000000816E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000816E                 align 10h
LOAD:000000000000816E LOAD            ends
LOAD:000000000000816E
.eh_frame_hdr:0000000000008170 ; ===========================================================================
.eh_frame_hdr:0000000000008170
.eh_frame_hdr:0000000000008170 ; Segment type: Pure data
.eh_frame_hdr:0000000000008170 ; Segment permissions: Read
.eh_frame_hdr:0000000000008170 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000008170                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000008170                 ;org 8170h
.eh_frame_hdr:0000000000008170 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000008171                 db  1Bh
.eh_frame_hdr:0000000000008172                 db    3
.eh_frame_hdr:0000000000008173                 db  3Bh ; ;
.eh_frame_hdr:0000000000008174                 db  2Ch ; ,
.eh_frame_hdr:0000000000008175                 db    3
.eh_frame_hdr:0000000000008176                 db    0
.eh_frame_hdr:0000000000008177                 db    0
.eh_frame_hdr:0000000000008178                 db  64h ; d
.eh_frame_hdr:0000000000008179                 db    0
.eh_frame_hdr:000000000000817A                 db    0
.eh_frame_hdr:000000000000817B                 db    0
.eh_frame_hdr:000000000000817C                 db  50h ; P
.eh_frame_hdr:000000000000817D                 db  98h
.eh_frame_hdr:000000000000817E                 db 0FFh
.eh_frame_hdr:000000000000817F                 db 0FFh
.eh_frame_hdr:0000000000008180                 db  78h ; x
.eh_frame_hdr:0000000000008181                 db    3
.eh_frame_hdr:0000000000008182                 db    0
.eh_frame_hdr:0000000000008183                 db    0
.eh_frame_hdr:0000000000008184                 db  50h ; P
.eh_frame_hdr:0000000000008185                 db  9Ch
.eh_frame_hdr:0000000000008186                 db 0FFh
.eh_frame_hdr:0000000000008187                 db 0FFh
.eh_frame_hdr:0000000000008188                 db 0A0h
.eh_frame_hdr:0000000000008189                 db    3
.eh_frame_hdr:000000000000818A                 db    0
.eh_frame_hdr:000000000000818B                 db    0
.eh_frame_hdr:000000000000818C                 db  70h ; p
.eh_frame_hdr:000000000000818D                 db  9Ch
.eh_frame_hdr:000000000000818E                 db 0FFh
.eh_frame_hdr:000000000000818F                 db 0FFh
.eh_frame_hdr:0000000000008190                 db  80h
.eh_frame_hdr:0000000000008191                 db    4
.eh_frame_hdr:0000000000008192                 db    0
.eh_frame_hdr:0000000000008193                 db    0
.eh_frame_hdr:0000000000008194                 db 0D0h
.eh_frame_hdr:0000000000008195                 db 0A6h
.eh_frame_hdr:0000000000008196                 db 0FFh
.eh_frame_hdr:0000000000008197                 db 0FFh
.eh_frame_hdr:0000000000008198                 db  48h ; H
.eh_frame_hdr:0000000000008199                 db    3
.eh_frame_hdr:000000000000819A                 db    0
.eh_frame_hdr:000000000000819B                 db    0
.eh_frame_hdr:000000000000819C                 db 0E0h
.eh_frame_hdr:000000000000819D                 db 0A7h
.eh_frame_hdr:000000000000819E                 db 0FFh
.eh_frame_hdr:000000000000819F                 db 0FFh
.eh_frame_hdr:00000000000081A0                 db 0B8h
.eh_frame_hdr:00000000000081A1                 db    3
.eh_frame_hdr:00000000000081A2                 db    0
.eh_frame_hdr:00000000000081A3                 db    0
.eh_frame_hdr:00000000000081A4                 db 0F0h
.eh_frame_hdr:00000000000081A5                 db 0A9h
.eh_frame_hdr:00000000000081A6                 db 0FFh
.eh_frame_hdr:00000000000081A7                 db 0FFh
.eh_frame_hdr:00000000000081A8                 db    4
.eh_frame_hdr:00000000000081A9                 db    4
.eh_frame_hdr:00000000000081AA                 db    0
.eh_frame_hdr:00000000000081AB                 db    0
.eh_frame_hdr:00000000000081AC                 db 0E0h
.eh_frame_hdr:00000000000081AD                 db 0B4h
.eh_frame_hdr:00000000000081AE                 db 0FFh
.eh_frame_hdr:00000000000081AF                 db 0FFh
.eh_frame_hdr:00000000000081B0                 db  54h ; T
.eh_frame_hdr:00000000000081B1                 db    4
.eh_frame_hdr:00000000000081B2                 db    0
.eh_frame_hdr:00000000000081B3                 db    0
.eh_frame_hdr:00000000000081B4                 db 0A0h
.eh_frame_hdr:00000000000081B5                 db 0B8h
.eh_frame_hdr:00000000000081B6                 db 0FFh
.eh_frame_hdr:00000000000081B7                 db 0FFh
.eh_frame_hdr:00000000000081B8                 db 0E0h
.eh_frame_hdr:00000000000081B9                 db    4
.eh_frame_hdr:00000000000081BA                 db    0
.eh_frame_hdr:00000000000081BB                 db    0
.eh_frame_hdr:00000000000081BC                 db 0D0h
.eh_frame_hdr:00000000000081BD                 db 0B8h
.eh_frame_hdr:00000000000081BE                 db 0FFh
.eh_frame_hdr:00000000000081BF                 db 0FFh
.eh_frame_hdr:00000000000081C0                 db 0FCh
.eh_frame_hdr:00000000000081C1                 db    4
.eh_frame_hdr:00000000000081C2                 db    0
.eh_frame_hdr:00000000000081C3                 db    0
.eh_frame_hdr:00000000000081C4                 db  10h
.eh_frame_hdr:00000000000081C5                 db 0B9h
.eh_frame_hdr:00000000000081C6                 db 0FFh
.eh_frame_hdr:00000000000081C7                 db 0FFh
.eh_frame_hdr:00000000000081C8                 db  18h
.eh_frame_hdr:00000000000081C9                 db    5
.eh_frame_hdr:00000000000081CA                 db    0
.eh_frame_hdr:00000000000081CB                 db    0
.eh_frame_hdr:00000000000081CC                 db 0A0h
.eh_frame_hdr:00000000000081CD                 db 0B9h
.eh_frame_hdr:00000000000081CE                 db 0FFh
.eh_frame_hdr:00000000000081CF                 db 0FFh
.eh_frame_hdr:00000000000081D0                 db  4Ch ; L
.eh_frame_hdr:00000000000081D1                 db    5
.eh_frame_hdr:00000000000081D2                 db    0
.eh_frame_hdr:00000000000081D3                 db    0
.eh_frame_hdr:00000000000081D4                 db 0C0h
.eh_frame_hdr:00000000000081D5                 db 0B9h
.eh_frame_hdr:00000000000081D6                 db 0FFh
.eh_frame_hdr:00000000000081D7                 db 0FFh
.eh_frame_hdr:00000000000081D8                 db  60h ; `
.eh_frame_hdr:00000000000081D9                 db    5
.eh_frame_hdr:00000000000081DA                 db    0
.eh_frame_hdr:00000000000081DB                 db    0
.eh_frame_hdr:00000000000081DC                 db 0E0h
.eh_frame_hdr:00000000000081DD                 db 0B9h
.eh_frame_hdr:00000000000081DE                 db 0FFh
.eh_frame_hdr:00000000000081DF                 db 0FFh
.eh_frame_hdr:00000000000081E0                 db  80h
.eh_frame_hdr:00000000000081E1                 db    5
.eh_frame_hdr:00000000000081E2                 db    0
.eh_frame_hdr:00000000000081E3                 db    0
.eh_frame_hdr:00000000000081E4                 db 0F0h
.eh_frame_hdr:00000000000081E5                 db 0B9h
.eh_frame_hdr:00000000000081E6                 db 0FFh
.eh_frame_hdr:00000000000081E7                 db 0FFh
.eh_frame_hdr:00000000000081E8                 db  94h
.eh_frame_hdr:00000000000081E9                 db    5
.eh_frame_hdr:00000000000081EA                 db    0
.eh_frame_hdr:00000000000081EB                 db    0
.eh_frame_hdr:00000000000081EC                 db    0
.eh_frame_hdr:00000000000081ED                 db 0BAh
.eh_frame_hdr:00000000000081EE                 db 0FFh
.eh_frame_hdr:00000000000081EF                 db 0FFh
.eh_frame_hdr:00000000000081F0                 db 0A8h
.eh_frame_hdr:00000000000081F1                 db    5
.eh_frame_hdr:00000000000081F2                 db    0
.eh_frame_hdr:00000000000081F3                 db    0
.eh_frame_hdr:00000000000081F4                 db 0B0h
.eh_frame_hdr:00000000000081F5                 db 0BAh
.eh_frame_hdr:00000000000081F6                 db 0FFh
.eh_frame_hdr:00000000000081F7                 db 0FFh
.eh_frame_hdr:00000000000081F8                 db 0D8h
.eh_frame_hdr:00000000000081F9                 db    5
.eh_frame_hdr:00000000000081FA                 db    0
.eh_frame_hdr:00000000000081FB                 db    0
.eh_frame_hdr:00000000000081FC                 db 0C0h
.eh_frame_hdr:00000000000081FD                 db 0BAh
.eh_frame_hdr:00000000000081FE                 db 0FFh
.eh_frame_hdr:00000000000081FF                 db 0FFh
.eh_frame_hdr:0000000000008200                 db 0ECh
.eh_frame_hdr:0000000000008201                 db    5
.eh_frame_hdr:0000000000008202                 db    0
.eh_frame_hdr:0000000000008203                 db    0
.eh_frame_hdr:0000000000008204                 db 0F0h
.eh_frame_hdr:0000000000008205                 db 0BAh
.eh_frame_hdr:0000000000008206                 db 0FFh
.eh_frame_hdr:0000000000008207                 db 0FFh
.eh_frame_hdr:0000000000008208                 db    8
.eh_frame_hdr:0000000000008209                 db    6
.eh_frame_hdr:000000000000820A                 db    0
.eh_frame_hdr:000000000000820B                 db    0
.eh_frame_hdr:000000000000820C                 db  40h ; @
.eh_frame_hdr:000000000000820D                 db 0BBh
.eh_frame_hdr:000000000000820E                 db 0FFh
.eh_frame_hdr:000000000000820F                 db 0FFh
.eh_frame_hdr:0000000000008210                 db  20h
.eh_frame_hdr:0000000000008211                 db    6
.eh_frame_hdr:0000000000008212                 db    0
.eh_frame_hdr:0000000000008213                 db    0
.eh_frame_hdr:0000000000008214                 db  70h ; p
.eh_frame_hdr:0000000000008215                 db 0BBh
.eh_frame_hdr:0000000000008216                 db 0FFh
.eh_frame_hdr:0000000000008217                 db 0FFh
.eh_frame_hdr:0000000000008218                 db  40h ; @
.eh_frame_hdr:0000000000008219                 db    6
.eh_frame_hdr:000000000000821A                 db    0
.eh_frame_hdr:000000000000821B                 db    0
.eh_frame_hdr:000000000000821C                 db 0D0h
.eh_frame_hdr:000000000000821D                 db 0BBh
.eh_frame_hdr:000000000000821E                 db 0FFh
.eh_frame_hdr:000000000000821F                 db 0FFh
.eh_frame_hdr:0000000000008220                 db  6Ch ; l
.eh_frame_hdr:0000000000008221                 db    6
.eh_frame_hdr:0000000000008222                 db    0
.eh_frame_hdr:0000000000008223                 db    0
.eh_frame_hdr:0000000000008224                 db 0F0h
.eh_frame_hdr:0000000000008225                 db 0BBh
.eh_frame_hdr:0000000000008226                 db 0FFh
.eh_frame_hdr:0000000000008227                 db 0FFh
.eh_frame_hdr:0000000000008228                 db  80h
.eh_frame_hdr:0000000000008229                 db    6
.eh_frame_hdr:000000000000822A                 db    0
.eh_frame_hdr:000000000000822B                 db    0
.eh_frame_hdr:000000000000822C                 db 0D0h
.eh_frame_hdr:000000000000822D                 db 0BCh
.eh_frame_hdr:000000000000822E                 db 0FFh
.eh_frame_hdr:000000000000822F                 db 0FFh
.eh_frame_hdr:0000000000008230                 db  9Ch
.eh_frame_hdr:0000000000008231                 db    6
.eh_frame_hdr:0000000000008232                 db    0
.eh_frame_hdr:0000000000008233                 db    0
.eh_frame_hdr:0000000000008234                 db 0F0h
.eh_frame_hdr:0000000000008235                 db 0BDh
.eh_frame_hdr:0000000000008236                 db 0FFh
.eh_frame_hdr:0000000000008237                 db 0FFh
.eh_frame_hdr:0000000000008238                 db 0B8h
.eh_frame_hdr:0000000000008239                 db    6
.eh_frame_hdr:000000000000823A                 db    0
.eh_frame_hdr:000000000000823B                 db    0
.eh_frame_hdr:000000000000823C                 db  90h
.eh_frame_hdr:000000000000823D                 db 0BEh
.eh_frame_hdr:000000000000823E                 db 0FFh
.eh_frame_hdr:000000000000823F                 db 0FFh
.eh_frame_hdr:0000000000008240                 db 0D8h
.eh_frame_hdr:0000000000008241                 db    6
.eh_frame_hdr:0000000000008242                 db    0
.eh_frame_hdr:0000000000008243                 db    0
.eh_frame_hdr:0000000000008244                 db  80h
.eh_frame_hdr:0000000000008245                 db 0BFh
.eh_frame_hdr:0000000000008246                 db 0FFh
.eh_frame_hdr:0000000000008247                 db 0FFh
.eh_frame_hdr:0000000000008248                 db  1Ch
.eh_frame_hdr:0000000000008249                 db    7
.eh_frame_hdr:000000000000824A                 db    0
.eh_frame_hdr:000000000000824B                 db    0
.eh_frame_hdr:000000000000824C                 db 0C0h
.eh_frame_hdr:000000000000824D                 db 0D1h
.eh_frame_hdr:000000000000824E                 db 0FFh
.eh_frame_hdr:000000000000824F                 db 0FFh
.eh_frame_hdr:0000000000008250                 db  94h
.eh_frame_hdr:0000000000008251                 db    7
.eh_frame_hdr:0000000000008252                 db    0
.eh_frame_hdr:0000000000008253                 db    0
.eh_frame_hdr:0000000000008254                 db  70h ; p
.eh_frame_hdr:0000000000008255                 db 0D3h
.eh_frame_hdr:0000000000008256                 db 0FFh
.eh_frame_hdr:0000000000008257                 db 0FFh
.eh_frame_hdr:0000000000008258                 db    0
.eh_frame_hdr:0000000000008259                 db    8
.eh_frame_hdr:000000000000825A                 db    0
.eh_frame_hdr:000000000000825B                 db    0
.eh_frame_hdr:000000000000825C                 db 0B0h
.eh_frame_hdr:000000000000825D                 db 0D3h
.eh_frame_hdr:000000000000825E                 db 0FFh
.eh_frame_hdr:000000000000825F                 db 0FFh
.eh_frame_hdr:0000000000008260                 db  2Ch ; ,
.eh_frame_hdr:0000000000008261                 db    8
.eh_frame_hdr:0000000000008262                 db    0
.eh_frame_hdr:0000000000008263                 db    0
.eh_frame_hdr:0000000000008264                 db 0D0h
.eh_frame_hdr:0000000000008265                 db 0D3h
.eh_frame_hdr:0000000000008266                 db 0FFh
.eh_frame_hdr:0000000000008267                 db 0FFh
.eh_frame_hdr:0000000000008268                 db  40h ; @
.eh_frame_hdr:0000000000008269                 db    8
.eh_frame_hdr:000000000000826A                 db    0
.eh_frame_hdr:000000000000826B                 db    0
.eh_frame_hdr:000000000000826C                 db 0F0h
.eh_frame_hdr:000000000000826D                 db 0D3h
.eh_frame_hdr:000000000000826E                 db 0FFh
.eh_frame_hdr:000000000000826F                 db 0FFh
.eh_frame_hdr:0000000000008270                 db  54h ; T
.eh_frame_hdr:0000000000008271                 db    8
.eh_frame_hdr:0000000000008272                 db    0
.eh_frame_hdr:0000000000008273                 db    0
.eh_frame_hdr:0000000000008274                 db  30h ; 0
.eh_frame_hdr:0000000000008275                 db 0D4h
.eh_frame_hdr:0000000000008276                 db 0FFh
.eh_frame_hdr:0000000000008277                 db 0FFh
.eh_frame_hdr:0000000000008278                 db  68h ; h
.eh_frame_hdr:0000000000008279                 db    8
.eh_frame_hdr:000000000000827A                 db    0
.eh_frame_hdr:000000000000827B                 db    0
.eh_frame_hdr:000000000000827C                 db  50h ; P
.eh_frame_hdr:000000000000827D                 db 0D4h
.eh_frame_hdr:000000000000827E                 db 0FFh
.eh_frame_hdr:000000000000827F                 db 0FFh
.eh_frame_hdr:0000000000008280                 db  7Ch ; |
.eh_frame_hdr:0000000000008281                 db    8
.eh_frame_hdr:0000000000008282                 db    0
.eh_frame_hdr:0000000000008283                 db    0
.eh_frame_hdr:0000000000008284                 db  80h
.eh_frame_hdr:0000000000008285                 db 0D4h
.eh_frame_hdr:0000000000008286                 db 0FFh
.eh_frame_hdr:0000000000008287                 db 0FFh
.eh_frame_hdr:0000000000008288                 db  90h
.eh_frame_hdr:0000000000008289                 db    8
.eh_frame_hdr:000000000000828A                 db    0
.eh_frame_hdr:000000000000828B                 db    0
.eh_frame_hdr:000000000000828C                 db    0
.eh_frame_hdr:000000000000828D                 db 0D5h
.eh_frame_hdr:000000000000828E                 db 0FFh
.eh_frame_hdr:000000000000828F                 db 0FFh
.eh_frame_hdr:0000000000008290                 db 0E4h
.eh_frame_hdr:0000000000008291                 db    8
.eh_frame_hdr:0000000000008292                 db    0
.eh_frame_hdr:0000000000008293                 db    0
.eh_frame_hdr:0000000000008294                 db 0F0h
.eh_frame_hdr:0000000000008295                 db 0D5h
.eh_frame_hdr:0000000000008296                 db 0FFh
.eh_frame_hdr:0000000000008297                 db 0FFh
.eh_frame_hdr:0000000000008298                 db  50h ; P
.eh_frame_hdr:0000000000008299                 db    9
.eh_frame_hdr:000000000000829A                 db    0
.eh_frame_hdr:000000000000829B                 db    0
.eh_frame_hdr:000000000000829C                 db    0
.eh_frame_hdr:000000000000829D                 db 0D6h
.eh_frame_hdr:000000000000829E                 db 0FFh
.eh_frame_hdr:000000000000829F                 db 0FFh
.eh_frame_hdr:00000000000082A0                 db  64h ; d
.eh_frame_hdr:00000000000082A1                 db    9
.eh_frame_hdr:00000000000082A2                 db    0
.eh_frame_hdr:00000000000082A3                 db    0
.eh_frame_hdr:00000000000082A4                 db 0A0h
.eh_frame_hdr:00000000000082A5                 db 0D6h
.eh_frame_hdr:00000000000082A6                 db 0FFh
.eh_frame_hdr:00000000000082A7                 db 0FFh
.eh_frame_hdr:00000000000082A8                 db  90h
.eh_frame_hdr:00000000000082A9                 db    9
.eh_frame_hdr:00000000000082AA                 db    0
.eh_frame_hdr:00000000000082AB                 db    0
.eh_frame_hdr:00000000000082AC                 db 0C0h
.eh_frame_hdr:00000000000082AD                 db 0D6h
.eh_frame_hdr:00000000000082AE                 db 0FFh
.eh_frame_hdr:00000000000082AF                 db 0FFh
.eh_frame_hdr:00000000000082B0                 db 0A4h
.eh_frame_hdr:00000000000082B1                 db    9
.eh_frame_hdr:00000000000082B2                 db    0
.eh_frame_hdr:00000000000082B3                 db    0
.eh_frame_hdr:00000000000082B4                 db 0D0h
.eh_frame_hdr:00000000000082B5                 db 0D6h
.eh_frame_hdr:00000000000082B6                 db 0FFh
.eh_frame_hdr:00000000000082B7                 db 0FFh
.eh_frame_hdr:00000000000082B8                 db 0B8h
.eh_frame_hdr:00000000000082B9                 db    9
.eh_frame_hdr:00000000000082BA                 db    0
.eh_frame_hdr:00000000000082BB                 db    0
.eh_frame_hdr:00000000000082BC                 db 0F0h
.eh_frame_hdr:00000000000082BD                 db 0D6h
.eh_frame_hdr:00000000000082BE                 db 0FFh
.eh_frame_hdr:00000000000082BF                 db 0FFh
.eh_frame_hdr:00000000000082C0                 db 0CCh
.eh_frame_hdr:00000000000082C1                 db    9
.eh_frame_hdr:00000000000082C2                 db    0
.eh_frame_hdr:00000000000082C3                 db    0
.eh_frame_hdr:00000000000082C4                 db  10h
.eh_frame_hdr:00000000000082C5                 db 0D7h
.eh_frame_hdr:00000000000082C6                 db 0FFh
.eh_frame_hdr:00000000000082C7                 db 0FFh
.eh_frame_hdr:00000000000082C8                 db 0E0h
.eh_frame_hdr:00000000000082C9                 db    9
.eh_frame_hdr:00000000000082CA                 db    0
.eh_frame_hdr:00000000000082CB                 db    0
.eh_frame_hdr:00000000000082CC                 db 0A0h
.eh_frame_hdr:00000000000082CD                 db 0D7h
.eh_frame_hdr:00000000000082CE                 db 0FFh
.eh_frame_hdr:00000000000082CF                 db 0FFh
.eh_frame_hdr:00000000000082D0                 db 0FCh
.eh_frame_hdr:00000000000082D1                 db    9
.eh_frame_hdr:00000000000082D2                 db    0
.eh_frame_hdr:00000000000082D3                 db    0
.eh_frame_hdr:00000000000082D4                 db  30h ; 0
.eh_frame_hdr:00000000000082D5                 db 0D8h
.eh_frame_hdr:00000000000082D6                 db 0FFh
.eh_frame_hdr:00000000000082D7                 db 0FFh
.eh_frame_hdr:00000000000082D8                 db  18h
.eh_frame_hdr:00000000000082D9                 db  0Ah
.eh_frame_hdr:00000000000082DA                 db    0
.eh_frame_hdr:00000000000082DB                 db    0
.eh_frame_hdr:00000000000082DC                 db  40h ; @
.eh_frame_hdr:00000000000082DD                 db 0D8h
.eh_frame_hdr:00000000000082DE                 db 0FFh
.eh_frame_hdr:00000000000082DF                 db 0FFh
.eh_frame_hdr:00000000000082E0                 db  2Ch ; ,
.eh_frame_hdr:00000000000082E1                 db  0Ah
.eh_frame_hdr:00000000000082E2                 db    0
.eh_frame_hdr:00000000000082E3                 db    0
.eh_frame_hdr:00000000000082E4                 db  50h ; P
.eh_frame_hdr:00000000000082E5                 db 0D8h
.eh_frame_hdr:00000000000082E6                 db 0FFh
.eh_frame_hdr:00000000000082E7                 db 0FFh
.eh_frame_hdr:00000000000082E8                 db  40h ; @
.eh_frame_hdr:00000000000082E9                 db  0Ah
.eh_frame_hdr:00000000000082EA                 db    0
.eh_frame_hdr:00000000000082EB                 db    0
.eh_frame_hdr:00000000000082EC                 db 0F0h
.eh_frame_hdr:00000000000082ED                 db 0D8h
.eh_frame_hdr:00000000000082EE                 db 0FFh
.eh_frame_hdr:00000000000082EF                 db 0FFh
.eh_frame_hdr:00000000000082F0                 db  5Ch ; \
.eh_frame_hdr:00000000000082F1                 db  0Ah
.eh_frame_hdr:00000000000082F2                 db    0
.eh_frame_hdr:00000000000082F3                 db    0
.eh_frame_hdr:00000000000082F4                 db    0
.eh_frame_hdr:00000000000082F5                 db 0D9h
.eh_frame_hdr:00000000000082F6                 db 0FFh
.eh_frame_hdr:00000000000082F7                 db 0FFh
.eh_frame_hdr:00000000000082F8                 db  70h ; p
.eh_frame_hdr:00000000000082F9                 db  0Ah
.eh_frame_hdr:00000000000082FA                 db    0
.eh_frame_hdr:00000000000082FB                 db    0
.eh_frame_hdr:00000000000082FC                 db  20h
.eh_frame_hdr:00000000000082FD                 db 0D9h
.eh_frame_hdr:00000000000082FE                 db 0FFh
.eh_frame_hdr:00000000000082FF                 db 0FFh
.eh_frame_hdr:0000000000008300                 db  84h
.eh_frame_hdr:0000000000008301                 db  0Ah
.eh_frame_hdr:0000000000008302                 db    0
.eh_frame_hdr:0000000000008303                 db    0
.eh_frame_hdr:0000000000008304                 db  30h ; 0
.eh_frame_hdr:0000000000008305                 db 0D9h
.eh_frame_hdr:0000000000008306                 db 0FFh
.eh_frame_hdr:0000000000008307                 db 0FFh
.eh_frame_hdr:0000000000008308                 db  98h
.eh_frame_hdr:0000000000008309                 db  0Ah
.eh_frame_hdr:000000000000830A                 db    0
.eh_frame_hdr:000000000000830B                 db    0
.eh_frame_hdr:000000000000830C                 db 0C0h
.eh_frame_hdr:000000000000830D                 db 0D9h
.eh_frame_hdr:000000000000830E                 db 0FFh
.eh_frame_hdr:000000000000830F                 db 0FFh
.eh_frame_hdr:0000000000008310                 db 0B4h
.eh_frame_hdr:0000000000008311                 db  0Ah
.eh_frame_hdr:0000000000008312                 db    0
.eh_frame_hdr:0000000000008313                 db    0
.eh_frame_hdr:0000000000008314                 db  60h ; `
.eh_frame_hdr:0000000000008315                 db 0DAh
.eh_frame_hdr:0000000000008316                 db 0FFh
.eh_frame_hdr:0000000000008317                 db 0FFh
.eh_frame_hdr:0000000000008318                 db 0D0h
.eh_frame_hdr:0000000000008319                 db  0Ah
.eh_frame_hdr:000000000000831A                 db    0
.eh_frame_hdr:000000000000831B                 db    0
.eh_frame_hdr:000000000000831C                 db  70h ; p
.eh_frame_hdr:000000000000831D                 db 0DAh
.eh_frame_hdr:000000000000831E                 db 0FFh
.eh_frame_hdr:000000000000831F                 db 0FFh
.eh_frame_hdr:0000000000008320                 db 0E4h
.eh_frame_hdr:0000000000008321                 db  0Ah
.eh_frame_hdr:0000000000008322                 db    0
.eh_frame_hdr:0000000000008323                 db    0
.eh_frame_hdr:0000000000008324                 db  90h
.eh_frame_hdr:0000000000008325                 db 0DAh
.eh_frame_hdr:0000000000008326                 db 0FFh
.eh_frame_hdr:0000000000008327                 db 0FFh
.eh_frame_hdr:0000000000008328                 db 0F8h
.eh_frame_hdr:0000000000008329                 db  0Ah
.eh_frame_hdr:000000000000832A                 db    0
.eh_frame_hdr:000000000000832B                 db    0
.eh_frame_hdr:000000000000832C                 db 0B0h
.eh_frame_hdr:000000000000832D                 db 0DAh
.eh_frame_hdr:000000000000832E                 db 0FFh
.eh_frame_hdr:000000000000832F                 db 0FFh
.eh_frame_hdr:0000000000008330                 db  0Ch
.eh_frame_hdr:0000000000008331                 db  0Bh
.eh_frame_hdr:0000000000008332                 db    0
.eh_frame_hdr:0000000000008333                 db    0
.eh_frame_hdr:0000000000008334                 db 0C0h
.eh_frame_hdr:0000000000008335                 db 0DAh
.eh_frame_hdr:0000000000008336                 db 0FFh
.eh_frame_hdr:0000000000008337                 db 0FFh
.eh_frame_hdr:0000000000008338                 db  20h
.eh_frame_hdr:0000000000008339                 db  0Bh
.eh_frame_hdr:000000000000833A                 db    0
.eh_frame_hdr:000000000000833B                 db    0
.eh_frame_hdr:000000000000833C                 db 0E0h
.eh_frame_hdr:000000000000833D                 db 0DAh
.eh_frame_hdr:000000000000833E                 db 0FFh
.eh_frame_hdr:000000000000833F                 db 0FFh
.eh_frame_hdr:0000000000008340                 db  34h ; 4
.eh_frame_hdr:0000000000008341                 db  0Bh
.eh_frame_hdr:0000000000008342                 db    0
.eh_frame_hdr:0000000000008343                 db    0
.eh_frame_hdr:0000000000008344                 db    0
.eh_frame_hdr:0000000000008345                 db 0DBh
.eh_frame_hdr:0000000000008346                 db 0FFh
.eh_frame_hdr:0000000000008347                 db 0FFh
.eh_frame_hdr:0000000000008348                 db  48h ; H
.eh_frame_hdr:0000000000008349                 db  0Bh
.eh_frame_hdr:000000000000834A                 db    0
.eh_frame_hdr:000000000000834B                 db    0
.eh_frame_hdr:000000000000834C                 db  20h
.eh_frame_hdr:000000000000834D                 db 0DBh
.eh_frame_hdr:000000000000834E                 db 0FFh
.eh_frame_hdr:000000000000834F                 db 0FFh
.eh_frame_hdr:0000000000008350                 db  60h ; `
.eh_frame_hdr:0000000000008351                 db  0Bh
.eh_frame_hdr:0000000000008352                 db    0
.eh_frame_hdr:0000000000008353                 db    0
.eh_frame_hdr:0000000000008354                 db  10h
.eh_frame_hdr:0000000000008355                 db 0DCh
.eh_frame_hdr:0000000000008356                 db 0FFh
.eh_frame_hdr:0000000000008357                 db 0FFh
.eh_frame_hdr:0000000000008358                 db  90h
.eh_frame_hdr:0000000000008359                 db  0Bh
.eh_frame_hdr:000000000000835A                 db    0
.eh_frame_hdr:000000000000835B                 db    0
.eh_frame_hdr:000000000000835C                 db  80h
.eh_frame_hdr:000000000000835D                 db 0DCh
.eh_frame_hdr:000000000000835E                 db 0FFh
.eh_frame_hdr:000000000000835F                 db 0FFh
.eh_frame_hdr:0000000000008360                 db 0BCh
.eh_frame_hdr:0000000000008361                 db  0Bh
.eh_frame_hdr:0000000000008362                 db    0
.eh_frame_hdr:0000000000008363                 db    0
.eh_frame_hdr:0000000000008364                 db 0B0h
.eh_frame_hdr:0000000000008365                 db 0DCh
.eh_frame_hdr:0000000000008366                 db 0FFh
.eh_frame_hdr:0000000000008367                 db 0FFh
.eh_frame_hdr:0000000000008368                 db 0D8h
.eh_frame_hdr:0000000000008369                 db  0Bh
.eh_frame_hdr:000000000000836A                 db    0
.eh_frame_hdr:000000000000836B                 db    0
.eh_frame_hdr:000000000000836C                 db 0C0h
.eh_frame_hdr:000000000000836D                 db 0DEh
.eh_frame_hdr:000000000000836E                 db 0FFh
.eh_frame_hdr:000000000000836F                 db 0FFh
.eh_frame_hdr:0000000000008370                 db  10h
.eh_frame_hdr:0000000000008371                 db  0Ch
.eh_frame_hdr:0000000000008372                 db    0
.eh_frame_hdr:0000000000008373                 db    0
.eh_frame_hdr:0000000000008374                 db  20h
.eh_frame_hdr:0000000000008375                 db 0DFh
.eh_frame_hdr:0000000000008376                 db 0FFh
.eh_frame_hdr:0000000000008377                 db 0FFh
.eh_frame_hdr:0000000000008378                 db  48h ; H
.eh_frame_hdr:0000000000008379                 db  0Ch
.eh_frame_hdr:000000000000837A                 db    0
.eh_frame_hdr:000000000000837B                 db    0
.eh_frame_hdr:000000000000837C                 db  40h ; @
.eh_frame_hdr:000000000000837D                 db 0E3h
.eh_frame_hdr:000000000000837E                 db 0FFh
.eh_frame_hdr:000000000000837F                 db 0FFh
.eh_frame_hdr:0000000000008380                 db  5Ch ; \
.eh_frame_hdr:0000000000008381                 db  0Dh
.eh_frame_hdr:0000000000008382                 db    0
.eh_frame_hdr:0000000000008383                 db    0
.eh_frame_hdr:0000000000008384                 db  60h ; `
.eh_frame_hdr:0000000000008385                 db 0E3h
.eh_frame_hdr:0000000000008386                 db 0FFh
.eh_frame_hdr:0000000000008387                 db 0FFh
.eh_frame_hdr:0000000000008388                 db  70h ; p
.eh_frame_hdr:0000000000008389                 db  0Dh
.eh_frame_hdr:000000000000838A                 db    0
.eh_frame_hdr:000000000000838B                 db    0
.eh_frame_hdr:000000000000838C                 db 0E0h
.eh_frame_hdr:000000000000838D                 db 0E3h
.eh_frame_hdr:000000000000838E                 db 0FFh
.eh_frame_hdr:000000000000838F                 db 0FFh
.eh_frame_hdr:0000000000008390                 db  8Ch
.eh_frame_hdr:0000000000008391                 db  0Dh
.eh_frame_hdr:0000000000008392                 db    0
.eh_frame_hdr:0000000000008393                 db    0
.eh_frame_hdr:0000000000008394                 db 0C0h
.eh_frame_hdr:0000000000008395                 db 0E4h
.eh_frame_hdr:0000000000008396                 db 0FFh
.eh_frame_hdr:0000000000008397                 db 0FFh
.eh_frame_hdr:0000000000008398                 db 0B8h
.eh_frame_hdr:0000000000008399                 db  0Dh
.eh_frame_hdr:000000000000839A                 db    0
.eh_frame_hdr:000000000000839B                 db    0
.eh_frame_hdr:000000000000839C                 db  40h ; @
.eh_frame_hdr:000000000000839D                 db 0E5h
.eh_frame_hdr:000000000000839E                 db 0FFh
.eh_frame_hdr:000000000000839F                 db 0FFh
.eh_frame_hdr:00000000000083A0                 db 0D8h
.eh_frame_hdr:00000000000083A1                 db  0Dh
.eh_frame_hdr:00000000000083A2                 db    0
.eh_frame_hdr:00000000000083A3                 db    0
.eh_frame_hdr:00000000000083A4                 db  60h ; `
.eh_frame_hdr:00000000000083A5                 db 0E5h
.eh_frame_hdr:00000000000083A6                 db 0FFh
.eh_frame_hdr:00000000000083A7                 db 0FFh
.eh_frame_hdr:00000000000083A8                 db 0F4h
.eh_frame_hdr:00000000000083A9                 db  0Dh
.eh_frame_hdr:00000000000083AA                 db    0
.eh_frame_hdr:00000000000083AB                 db    0
.eh_frame_hdr:00000000000083AC                 db  90h
.eh_frame_hdr:00000000000083AD                 db 0E5h
.eh_frame_hdr:00000000000083AE                 db 0FFh
.eh_frame_hdr:00000000000083AF                 db 0FFh
.eh_frame_hdr:00000000000083B0                 db    8
.eh_frame_hdr:00000000000083B1                 db  0Eh
.eh_frame_hdr:00000000000083B2                 db    0
.eh_frame_hdr:00000000000083B3                 db    0
.eh_frame_hdr:00000000000083B4                 db 0A0h
.eh_frame_hdr:00000000000083B5                 db 0E5h
.eh_frame_hdr:00000000000083B6                 db 0FFh
.eh_frame_hdr:00000000000083B7                 db 0FFh
.eh_frame_hdr:00000000000083B8                 db  1Ch
.eh_frame_hdr:00000000000083B9                 db  0Eh
.eh_frame_hdr:00000000000083BA                 db    0
.eh_frame_hdr:00000000000083BB                 db    0
.eh_frame_hdr:00000000000083BC                 db 0E0h
.eh_frame_hdr:00000000000083BD                 db 0E5h
.eh_frame_hdr:00000000000083BE                 db 0FFh
.eh_frame_hdr:00000000000083BF                 db 0FFh
.eh_frame_hdr:00000000000083C0                 db  40h ; @
.eh_frame_hdr:00000000000083C1                 db  0Eh
.eh_frame_hdr:00000000000083C2                 db    0
.eh_frame_hdr:00000000000083C3                 db    0
.eh_frame_hdr:00000000000083C4                 db  10h
.eh_frame_hdr:00000000000083C5                 db 0E6h
.eh_frame_hdr:00000000000083C6                 db 0FFh
.eh_frame_hdr:00000000000083C7                 db 0FFh
.eh_frame_hdr:00000000000083C8                 db  54h ; T
.eh_frame_hdr:00000000000083C9                 db  0Eh
.eh_frame_hdr:00000000000083CA                 db    0
.eh_frame_hdr:00000000000083CB                 db    0
.eh_frame_hdr:00000000000083CC                 db 0A0h
.eh_frame_hdr:00000000000083CD                 db 0E6h
.eh_frame_hdr:00000000000083CE                 db 0FFh
.eh_frame_hdr:00000000000083CF                 db 0FFh
.eh_frame_hdr:00000000000083D0                 db  6Ch ; l
.eh_frame_hdr:00000000000083D1                 db  0Eh
.eh_frame_hdr:00000000000083D2                 db    0
.eh_frame_hdr:00000000000083D3                 db    0
.eh_frame_hdr:00000000000083D4                 db 0F0h
.eh_frame_hdr:00000000000083D5                 db 0E6h
.eh_frame_hdr:00000000000083D6                 db 0FFh
.eh_frame_hdr:00000000000083D7                 db 0FFh
.eh_frame_hdr:00000000000083D8                 db  84h
.eh_frame_hdr:00000000000083D9                 db  0Eh
.eh_frame_hdr:00000000000083DA                 db    0
.eh_frame_hdr:00000000000083DB                 db    0
.eh_frame_hdr:00000000000083DC                 db  10h
.eh_frame_hdr:00000000000083DD                 db 0E7h
.eh_frame_hdr:00000000000083DE                 db 0FFh
.eh_frame_hdr:00000000000083DF                 db 0FFh
.eh_frame_hdr:00000000000083E0                 db 0A0h
.eh_frame_hdr:00000000000083E1                 db  0Eh
.eh_frame_hdr:00000000000083E2                 db    0
.eh_frame_hdr:00000000000083E3                 db    0
.eh_frame_hdr:00000000000083E4                 db  40h ; @
.eh_frame_hdr:00000000000083E5                 db 0E7h
.eh_frame_hdr:00000000000083E6                 db 0FFh
.eh_frame_hdr:00000000000083E7                 db 0FFh
.eh_frame_hdr:00000000000083E8                 db 0BCh
.eh_frame_hdr:00000000000083E9                 db  0Eh
.eh_frame_hdr:00000000000083EA                 db    0
.eh_frame_hdr:00000000000083EB                 db    0
.eh_frame_hdr:00000000000083EC                 db  70h ; p
.eh_frame_hdr:00000000000083ED                 db 0E7h
.eh_frame_hdr:00000000000083EE                 db 0FFh
.eh_frame_hdr:00000000000083EF                 db 0FFh
.eh_frame_hdr:00000000000083F0                 db 0E4h
.eh_frame_hdr:00000000000083F1                 db  0Eh
.eh_frame_hdr:00000000000083F2                 db    0
.eh_frame_hdr:00000000000083F3                 db    0
.eh_frame_hdr:00000000000083F4                 db  90h
.eh_frame_hdr:00000000000083F5                 db 0E7h
.eh_frame_hdr:00000000000083F6                 db 0FFh
.eh_frame_hdr:00000000000083F7                 db 0FFh
.eh_frame_hdr:00000000000083F8                 db    0
.eh_frame_hdr:00000000000083F9                 db  0Fh
.eh_frame_hdr:00000000000083FA                 db    0
.eh_frame_hdr:00000000000083FB                 db    0
.eh_frame_hdr:00000000000083FC                 db 0D0h
.eh_frame_hdr:00000000000083FD                 db 0E7h
.eh_frame_hdr:00000000000083FE                 db 0FFh
.eh_frame_hdr:00000000000083FF                 db 0FFh
.eh_frame_hdr:0000000000008400                 db  18h
.eh_frame_hdr:0000000000008401                 db  0Fh
.eh_frame_hdr:0000000000008402                 db    0
.eh_frame_hdr:0000000000008403                 db    0
.eh_frame_hdr:0000000000008404                 db  50h ; P
.eh_frame_hdr:0000000000008405                 db 0E8h
.eh_frame_hdr:0000000000008406                 db 0FFh
.eh_frame_hdr:0000000000008407                 db 0FFh
.eh_frame_hdr:0000000000008408                 db  50h ; P
.eh_frame_hdr:0000000000008409                 db  0Fh
.eh_frame_hdr:000000000000840A                 db    0
.eh_frame_hdr:000000000000840B                 db    0
.eh_frame_hdr:000000000000840C                 db  90h
.eh_frame_hdr:000000000000840D                 db 0E8h
.eh_frame_hdr:000000000000840E                 db 0FFh
.eh_frame_hdr:000000000000840F                 db 0FFh
.eh_frame_hdr:0000000000008410                 db  70h ; p
.eh_frame_hdr:0000000000008411                 db  0Fh
.eh_frame_hdr:0000000000008412                 db    0
.eh_frame_hdr:0000000000008413                 db    0
.eh_frame_hdr:0000000000008414                 db 0F0h
.eh_frame_hdr:0000000000008415                 db 0E8h
.eh_frame_hdr:0000000000008416                 db 0FFh
.eh_frame_hdr:0000000000008417                 db 0FFh
.eh_frame_hdr:0000000000008418                 db 0A0h
.eh_frame_hdr:0000000000008419                 db  0Fh
.eh_frame_hdr:000000000000841A                 db    0
.eh_frame_hdr:000000000000841B                 db    0
.eh_frame_hdr:000000000000841C                 db  80h
.eh_frame_hdr:000000000000841D                 db 0E9h
.eh_frame_hdr:000000000000841E                 db 0FFh
.eh_frame_hdr:000000000000841F                 db 0FFh
.eh_frame_hdr:0000000000008420                 db 0E0h
.eh_frame_hdr:0000000000008421                 db  0Fh
.eh_frame_hdr:0000000000008422                 db    0
.eh_frame_hdr:0000000000008423                 db    0
.eh_frame_hdr:0000000000008424                 db 0C0h
.eh_frame_hdr:0000000000008425                 db 0E9h
.eh_frame_hdr:0000000000008426                 db 0FFh
.eh_frame_hdr:0000000000008427                 db 0FFh
.eh_frame_hdr:0000000000008428                 db 0F4h
.eh_frame_hdr:0000000000008429                 db  0Fh
.eh_frame_hdr:000000000000842A                 db    0
.eh_frame_hdr:000000000000842B                 db    0
.eh_frame_hdr:000000000000842C                 db 0E0h
.eh_frame_hdr:000000000000842D                 db 0E9h
.eh_frame_hdr:000000000000842E                 db 0FFh
.eh_frame_hdr:000000000000842F                 db 0FFh
.eh_frame_hdr:0000000000008430                 db    8
.eh_frame_hdr:0000000000008431                 db  10h
.eh_frame_hdr:0000000000008432                 db    0
.eh_frame_hdr:0000000000008433                 db    0
.eh_frame_hdr:0000000000008434                 db    0
.eh_frame_hdr:0000000000008435                 db 0EAh
.eh_frame_hdr:0000000000008436                 db 0FFh
.eh_frame_hdr:0000000000008437                 db 0FFh
.eh_frame_hdr:0000000000008438                 db  1Ch
.eh_frame_hdr:0000000000008439                 db  10h
.eh_frame_hdr:000000000000843A                 db    0
.eh_frame_hdr:000000000000843B                 db    0
.eh_frame_hdr:000000000000843C                 db  90h
.eh_frame_hdr:000000000000843D                 db 0EAh
.eh_frame_hdr:000000000000843E                 db 0FFh
.eh_frame_hdr:000000000000843F                 db 0FFh
.eh_frame_hdr:0000000000008440                 db  4Ch ; L
.eh_frame_hdr:0000000000008441                 db  10h
.eh_frame_hdr:0000000000008442                 db    0
.eh_frame_hdr:0000000000008443                 db    0
.eh_frame_hdr:0000000000008444                 db 0B0h
.eh_frame_hdr:0000000000008445                 db 0EAh
.eh_frame_hdr:0000000000008446                 db 0FFh
.eh_frame_hdr:0000000000008447                 db 0FFh
.eh_frame_hdr:0000000000008448                 db  60h ; `
.eh_frame_hdr:0000000000008449                 db  10h
.eh_frame_hdr:000000000000844A                 db    0
.eh_frame_hdr:000000000000844B                 db    0
.eh_frame_hdr:000000000000844C                 db 0D0h
.eh_frame_hdr:000000000000844D                 db 0EAh
.eh_frame_hdr:000000000000844E                 db 0FFh
.eh_frame_hdr:000000000000844F                 db 0FFh
.eh_frame_hdr:0000000000008450                 db  74h ; t
.eh_frame_hdr:0000000000008451                 db  10h
.eh_frame_hdr:0000000000008452                 db    0
.eh_frame_hdr:0000000000008453                 db    0
.eh_frame_hdr:0000000000008454                 db 0C0h
.eh_frame_hdr:0000000000008455                 db 0EBh
.eh_frame_hdr:0000000000008456                 db 0FFh
.eh_frame_hdr:0000000000008457                 db 0FFh
.eh_frame_hdr:0000000000008458                 db 0B4h
.eh_frame_hdr:0000000000008459                 db  10h
.eh_frame_hdr:000000000000845A                 db    0
.eh_frame_hdr:000000000000845B                 db    0
.eh_frame_hdr:000000000000845C                 db    0
.eh_frame_hdr:000000000000845D                 db 0ECh
.eh_frame_hdr:000000000000845E                 db 0FFh
.eh_frame_hdr:000000000000845F                 db 0FFh
.eh_frame_hdr:0000000000008460                 db 0C8h
.eh_frame_hdr:0000000000008461                 db  10h
.eh_frame_hdr:0000000000008462                 db    0
.eh_frame_hdr:0000000000008463                 db    0
.eh_frame_hdr:0000000000008464                 db  70h ; p
.eh_frame_hdr:0000000000008465                 db 0ECh
.eh_frame_hdr:0000000000008466                 db 0FFh
.eh_frame_hdr:0000000000008467                 db 0FFh
.eh_frame_hdr:0000000000008468                 db    0
.eh_frame_hdr:0000000000008469                 db  11h
.eh_frame_hdr:000000000000846A                 db    0
.eh_frame_hdr:000000000000846B                 db    0
.eh_frame_hdr:000000000000846C                 db 0A0h
.eh_frame_hdr:000000000000846D                 db 0ECh
.eh_frame_hdr:000000000000846E                 db 0FFh
.eh_frame_hdr:000000000000846F                 db 0FFh
.eh_frame_hdr:0000000000008470                 db  18h
.eh_frame_hdr:0000000000008471                 db  11h
.eh_frame_hdr:0000000000008472                 db    0
.eh_frame_hdr:0000000000008473                 db    0
.eh_frame_hdr:0000000000008474                 db  20h
.eh_frame_hdr:0000000000008475                 db 0EDh
.eh_frame_hdr:0000000000008476                 db 0FFh
.eh_frame_hdr:0000000000008477                 db 0FFh
.eh_frame_hdr:0000000000008478                 db  68h ; h
.eh_frame_hdr:0000000000008479                 db  11h
.eh_frame_hdr:000000000000847A                 db    0
.eh_frame_hdr:000000000000847B                 db    0
.eh_frame_hdr:000000000000847C                 db  80h
.eh_frame_hdr:000000000000847D                 db 0EDh
.eh_frame_hdr:000000000000847E                 db 0FFh
.eh_frame_hdr:000000000000847F                 db 0FFh
.eh_frame_hdr:0000000000008480                 db  88h
.eh_frame_hdr:0000000000008481                 db  11h
.eh_frame_hdr:0000000000008482                 db    0
.eh_frame_hdr:0000000000008483                 db    0
.eh_frame_hdr:0000000000008484                 db 0C0h
.eh_frame_hdr:0000000000008485                 db 0EDh
.eh_frame_hdr:0000000000008486                 db 0FFh
.eh_frame_hdr:0000000000008487                 db 0FFh
.eh_frame_hdr:0000000000008488                 db 0A8h
.eh_frame_hdr:0000000000008489                 db  11h
.eh_frame_hdr:000000000000848A                 db    0
.eh_frame_hdr:000000000000848B                 db    0
.eh_frame_hdr:000000000000848C                 db  30h ; 0
.eh_frame_hdr:000000000000848D                 db 0EEh
.eh_frame_hdr:000000000000848E                 db 0FFh
.eh_frame_hdr:000000000000848F                 db 0FFh
.eh_frame_hdr:0000000000008490                 db 0F0h
.eh_frame_hdr:0000000000008491                 db  11h
.eh_frame_hdr:0000000000008492                 db    0
.eh_frame_hdr:0000000000008493                 db    0
.eh_frame_hdr:0000000000008494                 db  40h ; @
.eh_frame_hdr:0000000000008495                 db 0EEh
.eh_frame_hdr:0000000000008496                 db 0FFh
.eh_frame_hdr:0000000000008497                 db 0FFh
.eh_frame_hdr:0000000000008498                 db    8
.eh_frame_hdr:0000000000008499                 db  12h
.eh_frame_hdr:000000000000849A                 db    0
.eh_frame_hdr:000000000000849B                 db    0
.eh_frame_hdr:000000000000849B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000849B
LOAD:000000000000849C ; ===========================================================================
LOAD:000000000000849C
LOAD:000000000000849C ; Segment type: Pure code
LOAD:000000000000849C ; Segment permissions: Read/Execute
LOAD:000000000000849C LOAD            segment byte public 'CODE' use64
LOAD:000000000000849C                 assume cs:LOAD
LOAD:000000000000849C                 ;org 849Ch
LOAD:000000000000849C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000849C                 align 20h
LOAD:000000000000849C LOAD            ends
LOAD:000000000000849C
.eh_frame:00000000000084A0 ; ===========================================================================
.eh_frame:00000000000084A0
.eh_frame:00000000000084A0 ; Segment type: Pure data
.eh_frame:00000000000084A0 ; Segment permissions: Read
.eh_frame:00000000000084A0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000084A0                 assume cs:_eh_frame
.eh_frame:00000000000084A0                 ;org 84A0h
.eh_frame:00000000000084A0                 db  14h
.eh_frame:00000000000084A1                 db    0
.eh_frame:00000000000084A2                 db    0
.eh_frame:00000000000084A3                 db    0
.eh_frame:00000000000084A4                 db    0
.eh_frame:00000000000084A5                 db    0
.eh_frame:00000000000084A6                 db    0
.eh_frame:00000000000084A7                 db    0
.eh_frame:00000000000084A8                 db    1
.eh_frame:00000000000084A9                 db  7Ah ; z
.eh_frame:00000000000084AA                 db  52h ; R
.eh_frame:00000000000084AB                 db    0
.eh_frame:00000000000084AC                 db    1
.eh_frame:00000000000084AD                 db  78h ; x
.eh_frame:00000000000084AE                 db  10h
.eh_frame:00000000000084AF                 db    1
.eh_frame:00000000000084B0                 db  1Bh
.eh_frame:00000000000084B1                 db  0Ch
.eh_frame:00000000000084B2                 db    7
.eh_frame:00000000000084B3                 db    8
.eh_frame:00000000000084B4                 db  90h
.eh_frame:00000000000084B5                 db    1
.eh_frame:00000000000084B6                 db    7
.eh_frame:00000000000084B7                 db  10h
.eh_frame:00000000000084B8                 db  14h
.eh_frame:00000000000084B9                 db    0
.eh_frame:00000000000084BA                 db    0
.eh_frame:00000000000084BB                 db    0
.eh_frame:00000000000084BC                 db  1Ch
.eh_frame:00000000000084BD                 db    0
.eh_frame:00000000000084BE                 db    0
.eh_frame:00000000000084BF                 db    0
.eh_frame:00000000000084C0                 db  80h
.eh_frame:00000000000084C1                 db 0A3h
.eh_frame:00000000000084C2                 db 0FFh
.eh_frame:00000000000084C3                 db 0FFh
.eh_frame:00000000000084C4                 db  2Bh ; +
.eh_frame:00000000000084C5                 db    0
.eh_frame:00000000000084C6                 db    0
.eh_frame:00000000000084C7                 db    0
.eh_frame:00000000000084C8                 db    0
.eh_frame:00000000000084C9                 db    0
.eh_frame:00000000000084CA                 db    0
.eh_frame:00000000000084CB                 db    0
.eh_frame:00000000000084CC                 db    0
.eh_frame:00000000000084CD                 db    0
.eh_frame:00000000000084CE                 db    0
.eh_frame:00000000000084CF                 db    0
.eh_frame:00000000000084D0                 db  14h
.eh_frame:00000000000084D1                 db    0
.eh_frame:00000000000084D2                 db    0
.eh_frame:00000000000084D3                 db    0
.eh_frame:00000000000084D4                 db    0
.eh_frame:00000000000084D5                 db    0
.eh_frame:00000000000084D6                 db    0
.eh_frame:00000000000084D7                 db    0
.eh_frame:00000000000084D8                 db    1
.eh_frame:00000000000084D9                 db  7Ah ; z
.eh_frame:00000000000084DA                 db  52h ; R
.eh_frame:00000000000084DB                 db    0
.eh_frame:00000000000084DC                 db    1
.eh_frame:00000000000084DD                 db  78h ; x
.eh_frame:00000000000084DE                 db  10h
.eh_frame:00000000000084DF                 db    1
.eh_frame:00000000000084E0                 db  1Bh
.eh_frame:00000000000084E1                 db  0Ch
.eh_frame:00000000000084E2                 db    7
.eh_frame:00000000000084E3                 db    8
.eh_frame:00000000000084E4                 db  90h
.eh_frame:00000000000084E5                 db    1
.eh_frame:00000000000084E6                 db    0
.eh_frame:00000000000084E7                 db    0
.eh_frame:00000000000084E8                 db  24h ; $
.eh_frame:00000000000084E9                 db    0
.eh_frame:00000000000084EA                 db    0
.eh_frame:00000000000084EB                 db    0
.eh_frame:00000000000084EC                 db  1Ch
.eh_frame:00000000000084ED                 db    0
.eh_frame:00000000000084EE                 db    0
.eh_frame:00000000000084EF                 db    0
.eh_frame:00000000000084F0                 db 0D0h
.eh_frame:00000000000084F1                 db  94h
.eh_frame:00000000000084F2                 db 0FFh
.eh_frame:00000000000084F3                 db 0FFh
.eh_frame:00000000000084F4                 db    0
.eh_frame:00000000000084F5                 db    4
.eh_frame:00000000000084F6                 db    0
.eh_frame:00000000000084F7                 db    0
.eh_frame:00000000000084F8                 db    0
.eh_frame:00000000000084F9                 db  0Eh
.eh_frame:00000000000084FA                 db  10h
.eh_frame:00000000000084FB                 db  46h ; F
.eh_frame:00000000000084FC                 db  0Eh
.eh_frame:00000000000084FD                 db  18h
.eh_frame:00000000000084FE                 db  4Ah ; J
.eh_frame:00000000000084FF                 db  0Fh
.eh_frame:0000000000008500                 db  0Bh
.eh_frame:0000000000008501                 db  77h ; w
.eh_frame:0000000000008502                 db    8
.eh_frame:0000000000008503                 db  80h
.eh_frame:0000000000008504                 db    0
.eh_frame:0000000000008505                 db  3Fh ; ?
.eh_frame:0000000000008506                 db  1Ah
.eh_frame:0000000000008507                 db  3Bh ; ;
.eh_frame:0000000000008508                 db  2Ah ; *
.eh_frame:0000000000008509                 db  33h ; 3
.eh_frame:000000000000850A                 db  24h ; $
.eh_frame:000000000000850B                 db  22h ; "
.eh_frame:000000000000850C                 db    0
.eh_frame:000000000000850D                 db    0
.eh_frame:000000000000850E                 db    0
.eh_frame:000000000000850F                 db    0
.eh_frame:0000000000008510                 db  14h
.eh_frame:0000000000008511                 db    0
.eh_frame:0000000000008512                 db    0
.eh_frame:0000000000008513                 db    0
.eh_frame:0000000000008514                 db  44h ; D
.eh_frame:0000000000008515                 db    0
.eh_frame:0000000000008516                 db    0
.eh_frame:0000000000008517                 db    0
.eh_frame:0000000000008518                 db 0A8h
.eh_frame:0000000000008519                 db  98h
.eh_frame:000000000000851A                 db 0FFh
.eh_frame:000000000000851B                 db 0FFh
.eh_frame:000000000000851C                 db  18h
.eh_frame:000000000000851D                 db    0
.eh_frame:000000000000851E                 db    0
.eh_frame:000000000000851F                 db    0
.eh_frame:0000000000008520                 db    0
.eh_frame:0000000000008521                 db    0
.eh_frame:0000000000008522                 db    0
.eh_frame:0000000000008523                 db    0
.eh_frame:0000000000008524                 db    0
.eh_frame:0000000000008525                 db    0
.eh_frame:0000000000008526                 db    0
.eh_frame:0000000000008527                 db    0
.eh_frame:0000000000008528                 db  48h ; H
.eh_frame:0000000000008529                 db    0
.eh_frame:000000000000852A                 db    0
.eh_frame:000000000000852B                 db    0
.eh_frame:000000000000852C                 db  5Ch ; \
.eh_frame:000000000000852D                 db    0
.eh_frame:000000000000852E                 db    0
.eh_frame:000000000000852F                 db    0
.eh_frame:0000000000008530                 db  20h
.eh_frame:0000000000008531                 db 0A4h
.eh_frame:0000000000008532                 db 0FFh
.eh_frame:0000000000008533                 db 0FFh
.eh_frame:0000000000008534                 db    4
.eh_frame:0000000000008535                 db    2
.eh_frame:0000000000008536                 db    0
.eh_frame:0000000000008537                 db    0
.eh_frame:0000000000008538                 db    0
.eh_frame:0000000000008539                 db  42h ; B
.eh_frame:000000000000853A                 db  0Eh
.eh_frame:000000000000853B                 db  10h
.eh_frame:000000000000853C                 db  8Fh
.eh_frame:000000000000853D                 db    2
.eh_frame:000000000000853E                 db  42h ; B
.eh_frame:000000000000853F                 db  0Eh
.eh_frame:0000000000008540                 db  18h
.eh_frame:0000000000008541                 db  8Eh
.eh_frame:0000000000008542                 db    3
.eh_frame:0000000000008543                 db  45h ; E
.eh_frame:0000000000008544                 db  0Eh
.eh_frame:0000000000008545                 db  20h
.eh_frame:0000000000008546                 db  8Dh
.eh_frame:0000000000008547                 db    4
.eh_frame:0000000000008548                 db  42h ; B
.eh_frame:0000000000008549                 db  0Eh
.eh_frame:000000000000854A                 db  28h ; (
.eh_frame:000000000000854B                 db  8Ch
.eh_frame:000000000000854C                 db    5
.eh_frame:000000000000854D                 db  44h ; D
.eh_frame:000000000000854E                 db  0Eh
.eh_frame:000000000000854F                 db  30h ; 0
.eh_frame:0000000000008550                 db  86h
.eh_frame:0000000000008551                 db    6
.eh_frame:0000000000008552                 db  41h ; A
.eh_frame:0000000000008553                 db  0Eh
.eh_frame:0000000000008554                 db  38h ; 8
.eh_frame:0000000000008555                 db  83h
.eh_frame:0000000000008556                 db    7
.eh_frame:0000000000008557                 db  54h ; T
.eh_frame:0000000000008558                 db  0Eh
.eh_frame:0000000000008559                 db  60h ; `
.eh_frame:000000000000855A                 db    2
.eh_frame:000000000000855B                 db 0C8h
.eh_frame:000000000000855C                 db  0Ah
.eh_frame:000000000000855D                 db  0Eh
.eh_frame:000000000000855E                 db  38h ; 8
.eh_frame:000000000000855F                 db  41h ; A
.eh_frame:0000000000008560                 db  0Eh
.eh_frame:0000000000008561                 db  30h ; 0
.eh_frame:0000000000008562                 db  41h ; A
.eh_frame:0000000000008563                 db  0Eh
.eh_frame:0000000000008564                 db  28h ; (
.eh_frame:0000000000008565                 db  42h ; B
.eh_frame:0000000000008566                 db  0Eh
.eh_frame:0000000000008567                 db  20h
.eh_frame:0000000000008568                 db  42h ; B
.eh_frame:0000000000008569                 db  0Eh
.eh_frame:000000000000856A                 db  18h
.eh_frame:000000000000856B                 db  42h ; B
.eh_frame:000000000000856C                 db  0Eh
.eh_frame:000000000000856D                 db  10h
.eh_frame:000000000000856E                 db  42h ; B
.eh_frame:000000000000856F                 db  0Eh
.eh_frame:0000000000008570                 db    8
.eh_frame:0000000000008571                 db  4Ah ; J
.eh_frame:0000000000008572                 db  0Bh
.eh_frame:0000000000008573                 db    0
.eh_frame:0000000000008574                 db  4Ch ; L
.eh_frame:0000000000008575                 db    0
.eh_frame:0000000000008576                 db    0
.eh_frame:0000000000008577                 db    0
.eh_frame:0000000000008578                 db 0A8h
.eh_frame:0000000000008579                 db    0
.eh_frame:000000000000857A                 db    0
.eh_frame:000000000000857B                 db    0
.eh_frame:000000000000857C                 db 0E4h
.eh_frame:000000000000857D                 db 0A5h
.eh_frame:000000000000857E                 db 0FFh
.eh_frame:000000000000857F                 db 0FFh
.eh_frame:0000000000008580                 db 0ECh
.eh_frame:0000000000008581                 db  0Ah
.eh_frame:0000000000008582                 db    0
.eh_frame:0000000000008583                 db    0
.eh_frame:0000000000008584                 db    0
.eh_frame:0000000000008585                 db  42h ; B
.eh_frame:0000000000008586                 db  0Eh
.eh_frame:0000000000008587                 db  10h
.eh_frame:0000000000008588                 db  8Fh
.eh_frame:0000000000008589                 db    2
.eh_frame:000000000000858A                 db  42h ; B
.eh_frame:000000000000858B                 db  0Eh
.eh_frame:000000000000858C                 db  18h
.eh_frame:000000000000858D                 db  8Eh
.eh_frame:000000000000858E                 db    3
.eh_frame:000000000000858F                 db  42h ; B
.eh_frame:0000000000008590                 db  0Eh
.eh_frame:0000000000008591                 db  20h
.eh_frame:0000000000008592                 db  8Dh
.eh_frame:0000000000008593                 db    4
.eh_frame:0000000000008594                 db  42h ; B
.eh_frame:0000000000008595                 db  0Eh
.eh_frame:0000000000008596                 db  28h ; (
.eh_frame:0000000000008597                 db  8Ch
.eh_frame:0000000000008598                 db    5
.eh_frame:0000000000008599                 db  41h ; A
.eh_frame:000000000000859A                 db  0Eh
.eh_frame:000000000000859B                 db  30h ; 0
.eh_frame:000000000000859C                 db  86h
.eh_frame:000000000000859D                 db    6
.eh_frame:000000000000859E                 db  41h ; A
.eh_frame:000000000000859F                 db  0Eh
.eh_frame:00000000000085A0                 db  38h ; 8
.eh_frame:00000000000085A1                 db  83h
.eh_frame:00000000000085A2                 db    7
.eh_frame:00000000000085A3                 db  4Dh ; M
.eh_frame:00000000000085A4                 db  0Eh
.eh_frame:00000000000085A5                 db 0B0h
.eh_frame:00000000000085A6                 db  81h
.eh_frame:00000000000085A7                 db    1
.eh_frame:00000000000085A8                 db    3
.eh_frame:00000000000085A9                 db  65h ; e
.eh_frame:00000000000085AA                 db    4
.eh_frame:00000000000085AB                 db  0Ah
.eh_frame:00000000000085AC                 db  0Eh
.eh_frame:00000000000085AD                 db  38h ; 8
.eh_frame:00000000000085AE                 db  41h ; A
.eh_frame:00000000000085AF                 db  0Eh
.eh_frame:00000000000085B0                 db  30h ; 0
.eh_frame:00000000000085B1                 db  41h ; A
.eh_frame:00000000000085B2                 db  0Eh
.eh_frame:00000000000085B3                 db  28h ; (
.eh_frame:00000000000085B4                 db  42h ; B
.eh_frame:00000000000085B5                 db  0Eh
.eh_frame:00000000000085B6                 db  20h
.eh_frame:00000000000085B7                 db  42h ; B
.eh_frame:00000000000085B8                 db  0Eh
.eh_frame:00000000000085B9                 db  18h
.eh_frame:00000000000085BA                 db  42h ; B
.eh_frame:00000000000085BB                 db  0Eh
.eh_frame:00000000000085BC                 db  10h
.eh_frame:00000000000085BD                 db  42h ; B
.eh_frame:00000000000085BE                 db  0Eh
.eh_frame:00000000000085BF                 db    8
.eh_frame:00000000000085C0                 db  4Ah ; J
.eh_frame:00000000000085C1                 db  0Bh
.eh_frame:00000000000085C2                 db    0
.eh_frame:00000000000085C3                 db    0
.eh_frame:00000000000085C4                 db  28h ; (
.eh_frame:00000000000085C5                 db    0
.eh_frame:00000000000085C6                 db    0
.eh_frame:00000000000085C7                 db    0
.eh_frame:00000000000085C8                 db 0F8h
.eh_frame:00000000000085C9                 db    0
.eh_frame:00000000000085CA                 db    0
.eh_frame:00000000000085CB                 db    0
.eh_frame:00000000000085CC                 db  84h
.eh_frame:00000000000085CD                 db 0B0h
.eh_frame:00000000000085CE                 db 0FFh
.eh_frame:00000000000085CF                 db 0FFh
.eh_frame:00000000000085D0                 db 0B2h
.eh_frame:00000000000085D1                 db    3
.eh_frame:00000000000085D2                 db    0
.eh_frame:00000000000085D3                 db    0
.eh_frame:00000000000085D4                 db    0
.eh_frame:00000000000085D5                 db  42h ; B
.eh_frame:00000000000085D6                 db  0Eh
.eh_frame:00000000000085D7                 db  10h
.eh_frame:00000000000085D8                 db  8Dh
.eh_frame:00000000000085D9                 db    2
.eh_frame:00000000000085DA                 db  42h ; B
.eh_frame:00000000000085DB                 db  0Eh
.eh_frame:00000000000085DC                 db  18h
.eh_frame:00000000000085DD                 db  8Ch
.eh_frame:00000000000085DE                 db    3
.eh_frame:00000000000085DF                 db  46h ; F
.eh_frame:00000000000085E0                 db  0Eh
.eh_frame:00000000000085E1                 db  20h
.eh_frame:00000000000085E2                 db  86h
.eh_frame:00000000000085E3                 db    4
.eh_frame:00000000000085E4                 db  41h ; A
.eh_frame:00000000000085E5                 db  0Eh
.eh_frame:00000000000085E6                 db  28h ; (
.eh_frame:00000000000085E7                 db  83h
.eh_frame:00000000000085E8                 db    5
.eh_frame:00000000000085E9                 db  49h ; I
.eh_frame:00000000000085EA                 db  0Eh
.eh_frame:00000000000085EB                 db 0B0h
.eh_frame:00000000000085EC                 db    1
.eh_frame:00000000000085ED                 db    0
.eh_frame:00000000000085EE                 db    0
.eh_frame:00000000000085EF                 db    0
.eh_frame:00000000000085F0                 db  5Ch ; \
.eh_frame:00000000000085F1                 db    0
.eh_frame:00000000000085F2                 db    0
.eh_frame:00000000000085F3                 db    0
.eh_frame:00000000000085F4                 db  24h ; $
.eh_frame:00000000000085F5                 db    1
.eh_frame:00000000000085F6                 db    0
.eh_frame:00000000000085F7                 db    0
.eh_frame:00000000000085F8                 db 0E8h
.eh_frame:00000000000085F9                 db  97h
.eh_frame:00000000000085FA                 db 0FFh
.eh_frame:00000000000085FB                 db 0FFh
.eh_frame:00000000000085FC                 db  59h ; Y
.eh_frame:00000000000085FD                 db  0Ah
.eh_frame:00000000000085FE                 db    0
.eh_frame:00000000000085FF                 db    0
.eh_frame:0000000000008600                 db    0
.eh_frame:0000000000008601                 db  42h ; B
.eh_frame:0000000000008602                 db  0Eh
.eh_frame:0000000000008603                 db  10h
.eh_frame:0000000000008604                 db  8Fh
.eh_frame:0000000000008605                 db    2
.eh_frame:0000000000008606                 db  42h ; B
.eh_frame:0000000000008607                 db  0Eh
.eh_frame:0000000000008608                 db  18h
.eh_frame:0000000000008609                 db  8Eh
.eh_frame:000000000000860A                 db    3
.eh_frame:000000000000860B                 db  42h ; B
.eh_frame:000000000000860C                 db  0Eh
.eh_frame:000000000000860D                 db  20h
.eh_frame:000000000000860E                 db  8Dh
.eh_frame:000000000000860F                 db    4
.eh_frame:0000000000008610                 db  42h ; B
.eh_frame:0000000000008611                 db  0Eh
.eh_frame:0000000000008612                 db  28h ; (
.eh_frame:0000000000008613                 db  8Ch
.eh_frame:0000000000008614                 db    5
.eh_frame:0000000000008615                 db  44h ; D
.eh_frame:0000000000008616                 db  0Eh
.eh_frame:0000000000008617                 db  30h ; 0
.eh_frame:0000000000008618                 db  86h
.eh_frame:0000000000008619                 db    6
.eh_frame:000000000000861A                 db  41h ; A
.eh_frame:000000000000861B                 db  0Eh
.eh_frame:000000000000861C                 db  38h ; 8
.eh_frame:000000000000861D                 db  83h
.eh_frame:000000000000861E                 db    7
.eh_frame:000000000000861F                 db  50h ; P
.eh_frame:0000000000008620                 db  0Eh
.eh_frame:0000000000008621                 db 0B0h
.eh_frame:0000000000008622                 db    4
.eh_frame:0000000000008623                 db    3
.eh_frame:0000000000008624                 db  77h ; w
.eh_frame:0000000000008625                 db    1
.eh_frame:0000000000008626                 db  0Ah
.eh_frame:0000000000008627                 db  0Eh
.eh_frame:0000000000008628                 db 0B8h
.eh_frame:0000000000008629                 db    4
.eh_frame:000000000000862A                 db  50h ; P
.eh_frame:000000000000862B                 db  0Eh
.eh_frame:000000000000862C                 db 0C0h
.eh_frame:000000000000862D                 db    4
.eh_frame:000000000000862E                 db  6Ch ; l
.eh_frame:000000000000862F                 db  0Bh
.eh_frame:0000000000008630                 db    3
.eh_frame:0000000000008631                 db  51h ; Q
.eh_frame:0000000000008632                 db    5
.eh_frame:0000000000008633                 db  0Ah
.eh_frame:0000000000008634                 db  0Eh
.eh_frame:0000000000008635                 db  38h ; 8
.eh_frame:0000000000008636                 db  41h ; A
.eh_frame:0000000000008637                 db  0Eh
.eh_frame:0000000000008638                 db  30h ; 0
.eh_frame:0000000000008639                 db  41h ; A
.eh_frame:000000000000863A                 db  0Eh
.eh_frame:000000000000863B                 db  28h ; (
.eh_frame:000000000000863C                 db  42h ; B
.eh_frame:000000000000863D                 db  0Eh
.eh_frame:000000000000863E                 db  20h
.eh_frame:000000000000863F                 db  42h ; B
.eh_frame:0000000000008640                 db  0Eh
.eh_frame:0000000000008641                 db  18h
.eh_frame:0000000000008642                 db  42h ; B
.eh_frame:0000000000008643                 db  0Eh
.eh_frame:0000000000008644                 db  10h
.eh_frame:0000000000008645                 db  42h ; B
.eh_frame:0000000000008646                 db  0Eh
.eh_frame:0000000000008647                 db    8
.eh_frame:0000000000008648                 db  41h ; A
.eh_frame:0000000000008649                 db  0Bh
.eh_frame:000000000000864A                 db    0
.eh_frame:000000000000864B                 db    0
.eh_frame:000000000000864C                 db    0
.eh_frame:000000000000864D                 db    0
.eh_frame:000000000000864E                 db    0
.eh_frame:000000000000864F                 db    0
.eh_frame:0000000000008650                 db  18h
.eh_frame:0000000000008651                 db    0
.eh_frame:0000000000008652                 db    0
.eh_frame:0000000000008653                 db    0
.eh_frame:0000000000008654                 db  84h
.eh_frame:0000000000008655                 db    1
.eh_frame:0000000000008656                 db    0
.eh_frame:0000000000008657                 db    0
.eh_frame:0000000000008658                 db 0B8h
.eh_frame:0000000000008659                 db 0B3h
.eh_frame:000000000000865A                 db 0FFh
.eh_frame:000000000000865B                 db 0FFh
.eh_frame:000000000000865C                 db  24h ; $
.eh_frame:000000000000865D                 db    0
.eh_frame:000000000000865E                 db    0
.eh_frame:000000000000865F                 db    0
.eh_frame:0000000000008660                 db    0
.eh_frame:0000000000008661                 db  41h ; A
.eh_frame:0000000000008662                 db  0Eh
.eh_frame:0000000000008663                 db  10h
.eh_frame:0000000000008664                 db  83h
.eh_frame:0000000000008665                 db    2
.eh_frame:0000000000008666                 db  62h ; b
.eh_frame:0000000000008667                 db  0Eh
.eh_frame:0000000000008668                 db    8
.eh_frame:0000000000008669                 db    0
.eh_frame:000000000000866A                 db    0
.eh_frame:000000000000866B                 db    0
.eh_frame:000000000000866C                 db  18h
.eh_frame:000000000000866D                 db    0
.eh_frame:000000000000866E                 db    0
.eh_frame:000000000000866F                 db    0
.eh_frame:0000000000008670                 db 0A0h
.eh_frame:0000000000008671                 db    1
.eh_frame:0000000000008672                 db    0
.eh_frame:0000000000008673                 db    0
.eh_frame:0000000000008674                 db 0CCh
.eh_frame:0000000000008675                 db 0B3h
.eh_frame:0000000000008676                 db 0FFh
.eh_frame:0000000000008677                 db 0FFh
.eh_frame:0000000000008678                 db  38h ; 8
.eh_frame:0000000000008679                 db    0
.eh_frame:000000000000867A                 db    0
.eh_frame:000000000000867B                 db    0
.eh_frame:000000000000867C                 db    0
.eh_frame:000000000000867D                 db  41h ; A
.eh_frame:000000000000867E                 db  0Eh
.eh_frame:000000000000867F                 db  10h
.eh_frame:0000000000008680                 db  83h
.eh_frame:0000000000008681                 db    2
.eh_frame:0000000000008682                 db  76h ; v
.eh_frame:0000000000008683                 db  0Eh
.eh_frame:0000000000008684                 db    8
.eh_frame:0000000000008685                 db    0
.eh_frame:0000000000008686                 db    0
.eh_frame:0000000000008687                 db    0
.eh_frame:0000000000008688                 db  30h ; 0
.eh_frame:0000000000008689                 db    0
.eh_frame:000000000000868A                 db    0
.eh_frame:000000000000868B                 db    0
.eh_frame:000000000000868C                 db 0BCh
.eh_frame:000000000000868D                 db    1
.eh_frame:000000000000868E                 db    0
.eh_frame:000000000000868F                 db    0
.eh_frame:0000000000008690                 db 0F0h
.eh_frame:0000000000008691                 db 0B3h
.eh_frame:0000000000008692                 db 0FFh
.eh_frame:0000000000008693                 db 0FFh
.eh_frame:0000000000008694                 db  8Ah
.eh_frame:0000000000008695                 db    0
.eh_frame:0000000000008696                 db    0
.eh_frame:0000000000008697                 db    0
.eh_frame:0000000000008698                 db    0
.eh_frame:0000000000008699                 db  49h ; I
.eh_frame:000000000000869A                 db  0Eh
.eh_frame:000000000000869B                 db  10h
.eh_frame:000000000000869C                 db  86h
.eh_frame:000000000000869D                 db    2
.eh_frame:000000000000869E                 db  41h ; A
.eh_frame:000000000000869F                 db  0Eh
.eh_frame:00000000000086A0                 db  18h
.eh_frame:00000000000086A1                 db  83h
.eh_frame:00000000000086A2                 db    3
.eh_frame:00000000000086A3                 db  52h ; R
.eh_frame:00000000000086A4                 db  0Eh
.eh_frame:00000000000086A5                 db  20h
.eh_frame:00000000000086A6                 db  60h ; `
.eh_frame:00000000000086A7                 db  0Eh
.eh_frame:00000000000086A8                 db  18h
.eh_frame:00000000000086A9                 db  41h ; A
.eh_frame:00000000000086AA                 db  0Eh
.eh_frame:00000000000086AB                 db  10h
.eh_frame:00000000000086AC                 db  41h ; A
.eh_frame:00000000000086AD                 db  0Eh
.eh_frame:00000000000086AE                 db    8
.eh_frame:00000000000086AF                 db  42h ; B
.eh_frame:00000000000086B0                 db 0C3h
.eh_frame:00000000000086B1                 db 0C6h
.eh_frame:00000000000086B2                 db  70h ; p
.eh_frame:00000000000086B3                 db  0Eh
.eh_frame:00000000000086B4                 db  20h
.eh_frame:00000000000086B5                 db  83h
.eh_frame:00000000000086B6                 db    3
.eh_frame:00000000000086B7                 db  86h
.eh_frame:00000000000086B8                 db    2
.eh_frame:00000000000086B9                 db    0
.eh_frame:00000000000086BA                 db    0
.eh_frame:00000000000086BB                 db    0
.eh_frame:00000000000086BC                 db  10h
.eh_frame:00000000000086BD                 db    0
.eh_frame:00000000000086BE                 db    0
.eh_frame:00000000000086BF                 db    0
.eh_frame:00000000000086C0                 db 0F0h
.eh_frame:00000000000086C1                 db    1
.eh_frame:00000000000086C2                 db    0
.eh_frame:00000000000086C3                 db    0
.eh_frame:00000000000086C4                 db  4Ch ; L
.eh_frame:00000000000086C5                 db 0B4h
.eh_frame:00000000000086C6                 db 0FFh
.eh_frame:00000000000086C7                 db 0FFh
.eh_frame:00000000000086C8                 db  1Dh
.eh_frame:00000000000086C9                 db    0
.eh_frame:00000000000086CA                 db    0
.eh_frame:00000000000086CB                 db    0
.eh_frame:00000000000086CC                 db    0
.eh_frame:00000000000086CD                 db    0
.eh_frame:00000000000086CE                 db    0
.eh_frame:00000000000086CF                 db    0
.eh_frame:00000000000086D0                 db  1Ch
.eh_frame:00000000000086D1                 db    0
.eh_frame:00000000000086D2                 db    0
.eh_frame:00000000000086D3                 db    0
.eh_frame:00000000000086D4                 db    4
.eh_frame:00000000000086D5                 db    2
.eh_frame:00000000000086D6                 db    0
.eh_frame:00000000000086D7                 db    0
.eh_frame:00000000000086D8                 db  58h ; X
.eh_frame:00000000000086D9                 db 0B4h
.eh_frame:00000000000086DA                 db 0FFh
.eh_frame:00000000000086DB                 db 0FFh
.eh_frame:00000000000086DC                 db  1Ch
.eh_frame:00000000000086DD                 db    0
.eh_frame:00000000000086DE                 db    0
.eh_frame:00000000000086DF                 db    0
.eh_frame:00000000000086E0                 db    0
.eh_frame:00000000000086E1                 db  41h ; A
.eh_frame:00000000000086E2                 db  0Eh
.eh_frame:00000000000086E3                 db  10h
.eh_frame:00000000000086E4                 db  83h
.eh_frame:00000000000086E5                 db    2
.eh_frame:00000000000086E6                 db  56h ; V
.eh_frame:00000000000086E7                 db  0Eh
.eh_frame:00000000000086E8                 db    8
.eh_frame:00000000000086E9                 db    0
.eh_frame:00000000000086EA                 db    0
.eh_frame:00000000000086EB                 db    0
.eh_frame:00000000000086EC                 db    0
.eh_frame:00000000000086ED                 db    0
.eh_frame:00000000000086EE                 db    0
.eh_frame:00000000000086EF                 db    0
.eh_frame:00000000000086F0                 db  10h
.eh_frame:00000000000086F1                 db    0
.eh_frame:00000000000086F2                 db    0
.eh_frame:00000000000086F3                 db    0
.eh_frame:00000000000086F4                 db  24h ; $
.eh_frame:00000000000086F5                 db    2
.eh_frame:00000000000086F6                 db    0
.eh_frame:00000000000086F7                 db    0
.eh_frame:00000000000086F8                 db  58h ; X
.eh_frame:00000000000086F9                 db 0B4h
.eh_frame:00000000000086FA                 db 0FFh
.eh_frame:00000000000086FB                 db 0FFh
.eh_frame:00000000000086FC                 db    8
.eh_frame:00000000000086FD                 db    0
.eh_frame:00000000000086FE                 db    0
.eh_frame:00000000000086FF                 db    0
.eh_frame:0000000000008700                 db    0
.eh_frame:0000000000008701                 db    0
.eh_frame:0000000000008702                 db    0
.eh_frame:0000000000008703                 db    0
.eh_frame:0000000000008704                 db  10h
.eh_frame:0000000000008705                 db    0
.eh_frame:0000000000008706                 db    0
.eh_frame:0000000000008707                 db    0
.eh_frame:0000000000008708                 db  38h ; 8
.eh_frame:0000000000008709                 db    2
.eh_frame:000000000000870A                 db    0
.eh_frame:000000000000870B                 db    0
.eh_frame:000000000000870C                 db  54h ; T
.eh_frame:000000000000870D                 db 0B4h
.eh_frame:000000000000870E                 db 0FFh
.eh_frame:000000000000870F                 db 0FFh
.eh_frame:0000000000008710                 db    8
.eh_frame:0000000000008711                 db    0
.eh_frame:0000000000008712                 db    0
.eh_frame:0000000000008713                 db    0
.eh_frame:0000000000008714                 db    0
.eh_frame:0000000000008715                 db    0
.eh_frame:0000000000008716                 db    0
.eh_frame:0000000000008717                 db    0
.eh_frame:0000000000008718                 db  2Ch ; ,
.eh_frame:0000000000008719                 db    0
.eh_frame:000000000000871A                 db    0
.eh_frame:000000000000871B                 db    0
.eh_frame:000000000000871C                 db  4Ch ; L
.eh_frame:000000000000871D                 db    2
.eh_frame:000000000000871E                 db    0
.eh_frame:000000000000871F                 db    0
.eh_frame:0000000000008720                 db  50h ; P
.eh_frame:0000000000008721                 db 0B4h
.eh_frame:0000000000008722                 db 0FFh
.eh_frame:0000000000008723                 db 0FFh
.eh_frame:0000000000008724                 db 0A4h
.eh_frame:0000000000008725                 db    0
.eh_frame:0000000000008726                 db    0
.eh_frame:0000000000008727                 db    0
.eh_frame:0000000000008728                 db    0
.eh_frame:0000000000008729                 db  41h ; A
.eh_frame:000000000000872A                 db  0Eh
.eh_frame:000000000000872B                 db  10h
.eh_frame:000000000000872C                 db  86h
.eh_frame:000000000000872D                 db    2
.eh_frame:000000000000872E                 db  41h ; A
.eh_frame:000000000000872F                 db  0Eh
.eh_frame:0000000000008730                 db  18h
.eh_frame:0000000000008731                 db  83h
.eh_frame:0000000000008732                 db    3
.eh_frame:0000000000008733                 db  44h ; D
.eh_frame:0000000000008734                 db  0Eh
.eh_frame:0000000000008735                 db  20h
.eh_frame:0000000000008736                 db  7Ah ; z
.eh_frame:0000000000008737                 db  0Ah
.eh_frame:0000000000008738                 db  0Eh
.eh_frame:0000000000008739                 db  18h
.eh_frame:000000000000873A                 db  41h ; A
.eh_frame:000000000000873B                 db  0Eh
.eh_frame:000000000000873C                 db  10h
.eh_frame:000000000000873D                 db  41h ; A
.eh_frame:000000000000873E                 db  0Eh
.eh_frame:000000000000873F                 db    8
.eh_frame:0000000000008740                 db  41h ; A
.eh_frame:0000000000008741                 db  0Bh
.eh_frame:0000000000008742                 db    0
.eh_frame:0000000000008743                 db    0
.eh_frame:0000000000008744                 db    0
.eh_frame:0000000000008745                 db    0
.eh_frame:0000000000008746                 db    0
.eh_frame:0000000000008747                 db    0
.eh_frame:0000000000008748                 db  10h
.eh_frame:0000000000008749                 db    0
.eh_frame:000000000000874A                 db    0
.eh_frame:000000000000874B                 db    0
.eh_frame:000000000000874C                 db  7Ch ; |
.eh_frame:000000000000874D                 db    2
.eh_frame:000000000000874E                 db    0
.eh_frame:000000000000874F                 db    0
.eh_frame:0000000000008750                 db 0D0h
.eh_frame:0000000000008751                 db 0B4h
.eh_frame:0000000000008752                 db 0FFh
.eh_frame:0000000000008753                 db 0FFh
.eh_frame:0000000000008754                 db    5
.eh_frame:0000000000008755                 db    0
.eh_frame:0000000000008756                 db    0
.eh_frame:0000000000008757                 db    0
.eh_frame:0000000000008758                 db    0
.eh_frame:0000000000008759                 db    0
.eh_frame:000000000000875A                 db    0
.eh_frame:000000000000875B                 db    0
.eh_frame:000000000000875C                 db  18h
.eh_frame:000000000000875D                 db    0
.eh_frame:000000000000875E                 db    0
.eh_frame:000000000000875F                 db    0
.eh_frame:0000000000008760                 db  90h
.eh_frame:0000000000008761                 db    2
.eh_frame:0000000000008762                 db    0
.eh_frame:0000000000008763                 db    0
.eh_frame:0000000000008764                 db 0CCh
.eh_frame:0000000000008765                 db 0B4h
.eh_frame:0000000000008766                 db 0FFh
.eh_frame:0000000000008767                 db 0FFh
.eh_frame:0000000000008768                 db  22h ; "
.eh_frame:0000000000008769                 db    0
.eh_frame:000000000000876A                 db    0
.eh_frame:000000000000876B                 db    0
.eh_frame:000000000000876C                 db    0
.eh_frame:000000000000876D                 db  46h ; F
.eh_frame:000000000000876E                 db  0Eh
.eh_frame:000000000000876F                 db  10h
.eh_frame:0000000000008770                 db  83h
.eh_frame:0000000000008771                 db    2
.eh_frame:0000000000008772                 db  4Eh ; N
.eh_frame:0000000000008773                 db 0C3h
.eh_frame:0000000000008774                 db  0Eh
.eh_frame:0000000000008775                 db    8
.eh_frame:0000000000008776                 db    0
.eh_frame:0000000000008777                 db    0
.eh_frame:0000000000008778                 db  14h
.eh_frame:0000000000008779                 db    0
.eh_frame:000000000000877A                 db    0
.eh_frame:000000000000877B                 db    0
.eh_frame:000000000000877C                 db 0ACh
.eh_frame:000000000000877D                 db    2
.eh_frame:000000000000877E                 db    0
.eh_frame:000000000000877F                 db    0
.eh_frame:0000000000008780                 db 0E0h
.eh_frame:0000000000008781                 db 0B4h
.eh_frame:0000000000008782                 db 0FFh
.eh_frame:0000000000008783                 db 0FFh
.eh_frame:0000000000008784                 db  42h ; B
.eh_frame:0000000000008785                 db    0
.eh_frame:0000000000008786                 db    0
.eh_frame:0000000000008787                 db    0
.eh_frame:0000000000008788                 db    0
.eh_frame:0000000000008789                 db    0
.eh_frame:000000000000878A                 db    0
.eh_frame:000000000000878B                 db    0
.eh_frame:000000000000878C                 db    0
.eh_frame:000000000000878D                 db    0
.eh_frame:000000000000878E                 db    0
.eh_frame:000000000000878F                 db    0
.eh_frame:0000000000008790                 db  1Ch
.eh_frame:0000000000008791                 db    0
.eh_frame:0000000000008792                 db    0
.eh_frame:0000000000008793                 db    0
.eh_frame:0000000000008794                 db 0C4h
.eh_frame:0000000000008795                 db    2
.eh_frame:0000000000008796                 db    0
.eh_frame:0000000000008797                 db    0
.eh_frame:0000000000008798                 db  18h
.eh_frame:0000000000008799                 db 0B5h
.eh_frame:000000000000879A                 db 0FFh
.eh_frame:000000000000879B                 db 0FFh
.eh_frame:000000000000879C                 db  21h ; !
.eh_frame:000000000000879D                 db    0
.eh_frame:000000000000879E                 db    0
.eh_frame:000000000000879F                 db    0
.eh_frame:00000000000087A0                 db    0
.eh_frame:00000000000087A1                 db  41h ; A
.eh_frame:00000000000087A2                 db  0Eh
.eh_frame:00000000000087A3                 db  10h
.eh_frame:00000000000087A4                 db  83h
.eh_frame:00000000000087A5                 db    2
.eh_frame:00000000000087A6                 db  4Ch ; L
.eh_frame:00000000000087A7                 db  0Ah
.eh_frame:00000000000087A8                 db  0Eh
.eh_frame:00000000000087A9                 db    8
.eh_frame:00000000000087AA                 db  43h ; C
.eh_frame:00000000000087AB                 db  0Bh
.eh_frame:00000000000087AC                 db  50h ; P
.eh_frame:00000000000087AD                 db  0Eh
.eh_frame:00000000000087AE                 db    8
.eh_frame:00000000000087AF                 db    0
.eh_frame:00000000000087B0                 db  28h ; (
.eh_frame:00000000000087B1                 db    0
.eh_frame:00000000000087B2                 db    0
.eh_frame:00000000000087B3                 db    0
.eh_frame:00000000000087B4                 db 0E4h
.eh_frame:00000000000087B5                 db    2
.eh_frame:00000000000087B6                 db    0
.eh_frame:00000000000087B7                 db    0
.eh_frame:00000000000087B8                 db  28h ; (
.eh_frame:00000000000087B9                 db 0B5h
.eh_frame:00000000000087BA                 db 0FFh
.eh_frame:00000000000087BB                 db 0FFh
.eh_frame:00000000000087BC                 db  56h ; V
.eh_frame:00000000000087BD                 db    0
.eh_frame:00000000000087BE                 db    0
.eh_frame:00000000000087BF                 db    0
.eh_frame:00000000000087C0                 db    0
.eh_frame:00000000000087C1                 db  41h ; A
.eh_frame:00000000000087C2                 db  0Eh
.eh_frame:00000000000087C3                 db  10h
.eh_frame:00000000000087C4                 db  86h
.eh_frame:00000000000087C5                 db    2
.eh_frame:00000000000087C6                 db  41h ; A
.eh_frame:00000000000087C7                 db  0Eh
.eh_frame:00000000000087C8                 db  18h
.eh_frame:00000000000087C9                 db  83h
.eh_frame:00000000000087CA                 db    3
.eh_frame:00000000000087CB                 db  4Eh ; N
.eh_frame:00000000000087CC                 db  0Eh
.eh_frame:00000000000087CD                 db  20h
.eh_frame:00000000000087CE                 db  68h ; h
.eh_frame:00000000000087CF                 db  0Ah
.eh_frame:00000000000087D0                 db  0Eh
.eh_frame:00000000000087D1                 db  18h
.eh_frame:00000000000087D2                 db  41h ; A
.eh_frame:00000000000087D3                 db  0Eh
.eh_frame:00000000000087D4                 db  10h
.eh_frame:00000000000087D5                 db  41h ; A
.eh_frame:00000000000087D6                 db  0Eh
.eh_frame:00000000000087D7                 db    8
.eh_frame:00000000000087D8                 db  46h ; F
.eh_frame:00000000000087D9                 db  0Bh
.eh_frame:00000000000087DA                 db    0
.eh_frame:00000000000087DB                 db    0
.eh_frame:00000000000087DC                 db  10h
.eh_frame:00000000000087DD                 db    0
.eh_frame:00000000000087DE                 db    0
.eh_frame:00000000000087DF                 db    0
.eh_frame:00000000000087E0                 db  10h
.eh_frame:00000000000087E1                 db    3
.eh_frame:00000000000087E2                 db    0
.eh_frame:00000000000087E3                 db    0
.eh_frame:00000000000087E4                 db  5Ch ; \
.eh_frame:00000000000087E5                 db 0B5h
.eh_frame:00000000000087E6                 db 0FFh
.eh_frame:00000000000087E7                 db 0FFh
.eh_frame:00000000000087E8                 db  1Dh
.eh_frame:00000000000087E9                 db    0
.eh_frame:00000000000087EA                 db    0
.eh_frame:00000000000087EB                 db    0
.eh_frame:00000000000087EC                 db    0
.eh_frame:00000000000087ED                 db    0
.eh_frame:00000000000087EE                 db    0
.eh_frame:00000000000087EF                 db    0
.eh_frame:00000000000087F0                 db  18h
.eh_frame:00000000000087F1                 db    0
.eh_frame:00000000000087F2                 db    0
.eh_frame:00000000000087F3                 db    0
.eh_frame:00000000000087F4                 db  24h ; $
.eh_frame:00000000000087F5                 db    3
.eh_frame:00000000000087F6                 db    0
.eh_frame:00000000000087F7                 db    0
.eh_frame:00000000000087F8                 db  68h ; h
.eh_frame:00000000000087F9                 db 0B5h
.eh_frame:00000000000087FA                 db 0FFh
.eh_frame:00000000000087FB                 db 0FFh
.eh_frame:00000000000087FC                 db 0E0h
.eh_frame:00000000000087FD                 db    0
.eh_frame:00000000000087FE                 db    0
.eh_frame:00000000000087FF                 db    0
.eh_frame:0000000000008800                 db    0
.eh_frame:0000000000008801                 db  47h ; G
.eh_frame:0000000000008802                 db  0Eh
.eh_frame:0000000000008803                 db 0A0h
.eh_frame:0000000000008804                 db    1
.eh_frame:0000000000008805                 db    2
.eh_frame:0000000000008806                 db  73h ; s
.eh_frame:0000000000008807                 db  0Ah
.eh_frame:0000000000008808                 db  0Eh
.eh_frame:0000000000008809                 db    8
.eh_frame:000000000000880A                 db  46h ; F
.eh_frame:000000000000880B                 db  0Bh
.eh_frame:000000000000880C                 db  18h
.eh_frame:000000000000880D                 db    0
.eh_frame:000000000000880E                 db    0
.eh_frame:000000000000880F                 db    0
.eh_frame:0000000000008810                 db  40h ; @
.eh_frame:0000000000008811                 db    3
.eh_frame:0000000000008812                 db    0
.eh_frame:0000000000008813                 db    0
.eh_frame:0000000000008814                 db  2Ch ; ,
.eh_frame:0000000000008815                 db 0B6h
.eh_frame:0000000000008816                 db 0FFh
.eh_frame:0000000000008817                 db 0FFh
.eh_frame:0000000000008818                 db  20h
.eh_frame:0000000000008819                 db    1
.eh_frame:000000000000881A                 db    0
.eh_frame:000000000000881B                 db    0
.eh_frame:000000000000881C                 db    0
.eh_frame:000000000000881D                 db  47h ; G
.eh_frame:000000000000881E                 db  0Eh
.eh_frame:000000000000881F                 db 0A0h
.eh_frame:0000000000008820                 db    1
.eh_frame:0000000000008821                 db    2
.eh_frame:0000000000008822                 db  77h ; w
.eh_frame:0000000000008823                 db  0Ah
.eh_frame:0000000000008824                 db  0Eh
.eh_frame:0000000000008825                 db    8
.eh_frame:0000000000008826                 db  42h ; B
.eh_frame:0000000000008827                 db  0Bh
.eh_frame:0000000000008828                 db  1Ch
.eh_frame:0000000000008829                 db    0
.eh_frame:000000000000882A                 db    0
.eh_frame:000000000000882B                 db    0
.eh_frame:000000000000882C                 db  5Ch ; \
.eh_frame:000000000000882D                 db    3
.eh_frame:000000000000882E                 db    0
.eh_frame:000000000000882F                 db    0
.eh_frame:0000000000008830                 db  30h ; 0
.eh_frame:0000000000008831                 db 0B7h
.eh_frame:0000000000008832                 db 0FFh
.eh_frame:0000000000008833                 db 0FFh
.eh_frame:0000000000008834                 db  9Fh
.eh_frame:0000000000008835                 db    0
.eh_frame:0000000000008836                 db    0
.eh_frame:0000000000008837                 db    0
.eh_frame:0000000000008838                 db    0
.eh_frame:0000000000008839                 db  44h ; D
.eh_frame:000000000000883A                 db  0Eh
.eh_frame:000000000000883B                 db  10h
.eh_frame:000000000000883C                 db  83h
.eh_frame:000000000000883D                 db    2
.eh_frame:000000000000883E                 db    2
.eh_frame:000000000000883F                 db  78h ; x
.eh_frame:0000000000008840                 db  0Ah
.eh_frame:0000000000008841                 db  0Eh
.eh_frame:0000000000008842                 db    8
.eh_frame:0000000000008843                 db  41h ; A
.eh_frame:0000000000008844                 db  0Bh
.eh_frame:0000000000008845                 db    0
.eh_frame:0000000000008846                 db    0
.eh_frame:0000000000008847                 db    0
.eh_frame:0000000000008848                 db  40h ; @
.eh_frame:0000000000008849                 db    0
.eh_frame:000000000000884A                 db    0
.eh_frame:000000000000884B                 db    0
.eh_frame:000000000000884C                 db  7Ch ; |
.eh_frame:000000000000884D                 db    3
.eh_frame:000000000000884E                 db    0
.eh_frame:000000000000884F                 db    0
.eh_frame:0000000000008850                 db 0B0h
.eh_frame:0000000000008851                 db 0B7h
.eh_frame:0000000000008852                 db 0FFh
.eh_frame:0000000000008853                 db 0FFh
.eh_frame:0000000000008854                 db 0E7h
.eh_frame:0000000000008855                 db    0
.eh_frame:0000000000008856                 db    0
.eh_frame:0000000000008857                 db    0
.eh_frame:0000000000008858                 db    0
.eh_frame:0000000000008859                 db  41h ; A
.eh_frame:000000000000885A                 db  0Eh
.eh_frame:000000000000885B                 db  10h
.eh_frame:000000000000885C                 db  86h
.eh_frame:000000000000885D                 db    2
.eh_frame:000000000000885E                 db  41h ; A
.eh_frame:000000000000885F                 db  0Eh
.eh_frame:0000000000008860                 db  18h
.eh_frame:0000000000008861                 db  83h
.eh_frame:0000000000008862                 db    3
.eh_frame:0000000000008863                 db  49h ; I
.eh_frame:0000000000008864                 db  0Eh
.eh_frame:0000000000008865                 db  20h
.eh_frame:0000000000008866                 db  6Eh ; n
.eh_frame:0000000000008867                 db  0Ah
.eh_frame:0000000000008868                 db  0Eh
.eh_frame:0000000000008869                 db  18h
.eh_frame:000000000000886A                 db  41h ; A
.eh_frame:000000000000886B                 db  0Eh
.eh_frame:000000000000886C                 db  10h
.eh_frame:000000000000886D                 db  41h ; A
.eh_frame:000000000000886E                 db  0Eh
.eh_frame:000000000000886F                 db    8
.eh_frame:0000000000008870                 db  45h ; E
.eh_frame:0000000000008871                 db  0Bh
.eh_frame:0000000000008872                 db    2
.eh_frame:0000000000008873                 db  4Ah ; J
.eh_frame:0000000000008874                 db  0Ah
.eh_frame:0000000000008875                 db  0Eh
.eh_frame:0000000000008876                 db  18h
.eh_frame:0000000000008877                 db  41h ; A
.eh_frame:0000000000008878                 db  0Eh
.eh_frame:0000000000008879                 db  10h
.eh_frame:000000000000887A                 db  41h ; A
.eh_frame:000000000000887B                 db  0Eh
.eh_frame:000000000000887C                 db    8
.eh_frame:000000000000887D                 db  44h ; D
.eh_frame:000000000000887E                 db  0Bh
.eh_frame:000000000000887F                 db    2
.eh_frame:0000000000008880                 db  54h ; T
.eh_frame:0000000000008881                 db  0Eh
.eh_frame:0000000000008882                 db  18h
.eh_frame:0000000000008883                 db  41h ; A
.eh_frame:0000000000008884                 db  0Eh
.eh_frame:0000000000008885                 db  10h
.eh_frame:0000000000008886                 db  41h ; A
.eh_frame:0000000000008887                 db  0Eh
.eh_frame:0000000000008888                 db    8
.eh_frame:0000000000008889                 db    0
.eh_frame:000000000000888A                 db    0
.eh_frame:000000000000888B                 db    0
.eh_frame:000000000000888C                 db  74h ; t
.eh_frame:000000000000888D                 db    0
.eh_frame:000000000000888E                 db    0
.eh_frame:000000000000888F                 db    0
.eh_frame:0000000000008890                 db 0C0h
.eh_frame:0000000000008891                 db    3
.eh_frame:0000000000008892                 db    0
.eh_frame:0000000000008893                 db    0
.eh_frame:0000000000008894                 db  5Ch ; \
.eh_frame:0000000000008895                 db 0B8h
.eh_frame:0000000000008896                 db 0FFh
.eh_frame:0000000000008897                 db 0FFh
.eh_frame:0000000000008898                 db  34h ; 4
.eh_frame:0000000000008899                 db  12h
.eh_frame:000000000000889A                 db    0
.eh_frame:000000000000889B                 db    0
.eh_frame:000000000000889C                 db    0
.eh_frame:000000000000889D                 db  42h ; B
.eh_frame:000000000000889E                 db  0Eh
.eh_frame:000000000000889F                 db  10h
.eh_frame:00000000000088A0                 db  8Fh
.eh_frame:00000000000088A1                 db    2
.eh_frame:00000000000088A2                 db  42h ; B
.eh_frame:00000000000088A3                 db  0Eh
.eh_frame:00000000000088A4                 db  18h
.eh_frame:00000000000088A5                 db  8Eh
.eh_frame:00000000000088A6                 db    3
.eh_frame:00000000000088A7                 db  45h ; E
.eh_frame:00000000000088A8                 db  0Eh
.eh_frame:00000000000088A9                 db  20h
.eh_frame:00000000000088AA                 db  8Dh
.eh_frame:00000000000088AB                 db    4
.eh_frame:00000000000088AC                 db  42h ; B
.eh_frame:00000000000088AD                 db  0Eh
.eh_frame:00000000000088AE                 db  28h ; (
.eh_frame:00000000000088AF                 db  8Ch
.eh_frame:00000000000088B0                 db    5
.eh_frame:00000000000088B1                 db  44h ; D
.eh_frame:00000000000088B2                 db  0Eh
.eh_frame:00000000000088B3                 db  30h ; 0
.eh_frame:00000000000088B4                 db  86h
.eh_frame:00000000000088B5                 db    6
.eh_frame:00000000000088B6                 db  41h ; A
.eh_frame:00000000000088B7                 db  0Eh
.eh_frame:00000000000088B8                 db  38h ; 8
.eh_frame:00000000000088B9                 db  83h
.eh_frame:00000000000088BA                 db    7
.eh_frame:00000000000088BB                 db  53h ; S
.eh_frame:00000000000088BC                 db  0Eh
.eh_frame:00000000000088BD                 db 0F0h
.eh_frame:00000000000088BE                 db    1
.eh_frame:00000000000088BF                 db    3
.eh_frame:00000000000088C0                 db  81h
.eh_frame:00000000000088C1                 db  0Bh
.eh_frame:00000000000088C2                 db  0Eh
.eh_frame:00000000000088C3                 db 0F8h
.eh_frame:00000000000088C4                 db    1
.eh_frame:00000000000088C5                 db  4Ah ; J
.eh_frame:00000000000088C6                 db  0Eh
.eh_frame:00000000000088C7                 db  80h
.eh_frame:00000000000088C8                 db    2
.eh_frame:00000000000088C9                 db  44h ; D
.eh_frame:00000000000088CA                 db  0Eh
.eh_frame:00000000000088CB                 db  88h
.eh_frame:00000000000088CC                 db    2
.eh_frame:00000000000088CD                 db  45h ; E
.eh_frame:00000000000088CE                 db  0Eh
.eh_frame:00000000000088CF                 db  90h
.eh_frame:00000000000088D0                 db    2
.eh_frame:00000000000088D1                 db  5Fh ; _
.eh_frame:00000000000088D2                 db  0Eh
.eh_frame:00000000000088D3                 db 0F0h
.eh_frame:00000000000088D4                 db    1
.eh_frame:00000000000088D5                 db  64h ; d
.eh_frame:00000000000088D6                 db  0Ah
.eh_frame:00000000000088D7                 db  0Eh
.eh_frame:00000000000088D8                 db  38h ; 8
.eh_frame:00000000000088D9                 db  41h ; A
.eh_frame:00000000000088DA                 db  0Eh
.eh_frame:00000000000088DB                 db  30h ; 0
.eh_frame:00000000000088DC                 db  41h ; A
.eh_frame:00000000000088DD                 db  0Eh
.eh_frame:00000000000088DE                 db  28h ; (
.eh_frame:00000000000088DF                 db  42h ; B
.eh_frame:00000000000088E0                 db  0Eh
.eh_frame:00000000000088E1                 db  20h
.eh_frame:00000000000088E2                 db  42h ; B
.eh_frame:00000000000088E3                 db  0Eh
.eh_frame:00000000000088E4                 db  18h
.eh_frame:00000000000088E5                 db  42h ; B
.eh_frame:00000000000088E6                 db  0Eh
.eh_frame:00000000000088E7                 db  10h
.eh_frame:00000000000088E8                 db  42h ; B
.eh_frame:00000000000088E9                 db  0Eh
.eh_frame:00000000000088EA                 db    8
.eh_frame:00000000000088EB                 db  44h ; D
.eh_frame:00000000000088EC                 db  0Bh
.eh_frame:00000000000088ED                 db    3
.eh_frame:00000000000088EE                 db  99h
.eh_frame:00000000000088EF                 db    5
.eh_frame:00000000000088F0                 db  0Eh
.eh_frame:00000000000088F1                 db 0F8h
.eh_frame:00000000000088F2                 db    1
.eh_frame:00000000000088F3                 db  4Dh ; M
.eh_frame:00000000000088F4                 db  0Eh
.eh_frame:00000000000088F5                 db  80h
.eh_frame:00000000000088F6                 db    2
.eh_frame:00000000000088F7                 db  44h ; D
.eh_frame:00000000000088F8                 db  0Eh
.eh_frame:00000000000088F9                 db  88h
.eh_frame:00000000000088FA                 db    2
.eh_frame:00000000000088FB                 db  47h ; G
.eh_frame:00000000000088FC                 db  0Eh
.eh_frame:00000000000088FD                 db  90h
.eh_frame:00000000000088FE                 db    2
.eh_frame:00000000000088FF                 db  5Bh ; [
.eh_frame:0000000000008900                 db  0Eh
.eh_frame:0000000000008901                 db 0F0h
.eh_frame:0000000000008902                 db    1
.eh_frame:0000000000008903                 db    0
.eh_frame:0000000000008904                 db  68h ; h
.eh_frame:0000000000008905                 db    0
.eh_frame:0000000000008906                 db    0
.eh_frame:0000000000008907                 db    0
.eh_frame:0000000000008908                 db  38h ; 8
.eh_frame:0000000000008909                 db    4
.eh_frame:000000000000890A                 db    0
.eh_frame:000000000000890B                 db    0
.eh_frame:000000000000890C                 db  24h ; $
.eh_frame:000000000000890D                 db 0CAh
.eh_frame:000000000000890E                 db 0FFh
.eh_frame:000000000000890F                 db 0FFh
.eh_frame:0000000000008910                 db 0ABh
.eh_frame:0000000000008911                 db    1
.eh_frame:0000000000008912                 db    0
.eh_frame:0000000000008913                 db    0
.eh_frame:0000000000008914                 db    0
.eh_frame:0000000000008915                 db  42h ; B
.eh_frame:0000000000008916                 db  0Eh
.eh_frame:0000000000008917                 db  10h
.eh_frame:0000000000008918                 db  8Fh
.eh_frame:0000000000008919                 db    2
.eh_frame:000000000000891A                 db  42h ; B
.eh_frame:000000000000891B                 db  0Eh
.eh_frame:000000000000891C                 db  18h
.eh_frame:000000000000891D                 db  8Eh
.eh_frame:000000000000891E                 db    3
.eh_frame:000000000000891F                 db  45h ; E
.eh_frame:0000000000008920                 db  0Eh
.eh_frame:0000000000008921                 db  20h
.eh_frame:0000000000008922                 db  8Dh
.eh_frame:0000000000008923                 db    4
.eh_frame:0000000000008924                 db  42h ; B
.eh_frame:0000000000008925                 db  0Eh
.eh_frame:0000000000008926                 db  28h ; (
.eh_frame:0000000000008927                 db  8Ch
.eh_frame:0000000000008928                 db    5
.eh_frame:0000000000008929                 db  44h ; D
.eh_frame:000000000000892A                 db  0Eh
.eh_frame:000000000000892B                 db  30h ; 0
.eh_frame:000000000000892C                 db  86h
.eh_frame:000000000000892D                 db    6
.eh_frame:000000000000892E                 db  41h ; A
.eh_frame:000000000000892F                 db  0Eh
.eh_frame:0000000000008930                 db  38h ; 8
.eh_frame:0000000000008931                 db  83h
.eh_frame:0000000000008932                 db    7
.eh_frame:0000000000008933                 db  47h ; G
.eh_frame:0000000000008934                 db  0Eh
.eh_frame:0000000000008935                 db  60h ; `
.eh_frame:0000000000008936                 db    2
.eh_frame:0000000000008937                 db  99h
.eh_frame:0000000000008938                 db  0Eh
.eh_frame:0000000000008939                 db  68h ; h
.eh_frame:000000000000893A                 db  5Fh ; _
.eh_frame:000000000000893B                 db  0Eh
.eh_frame:000000000000893C                 db  70h ; p
.eh_frame:000000000000893D                 db  46h ; F
.eh_frame:000000000000893E                 db  0Eh
.eh_frame:000000000000893F                 db  78h ; x
.eh_frame:0000000000008940                 db  42h ; B
.eh_frame:0000000000008941                 db  0Eh
.eh_frame:0000000000008942                 db  80h
.eh_frame:0000000000008943                 db    1
.eh_frame:0000000000008944                 db  59h ; Y
.eh_frame:0000000000008945                 db  0Eh
.eh_frame:0000000000008946                 db  60h ; `
.eh_frame:0000000000008947                 db    2
.eh_frame:0000000000008948                 db  40h ; @
.eh_frame:0000000000008949                 db  0Eh
.eh_frame:000000000000894A                 db  68h ; h
.eh_frame:000000000000894B                 db  4Bh ; K
.eh_frame:000000000000894C                 db  0Eh
.eh_frame:000000000000894D                 db  70h ; p
.eh_frame:000000000000894E                 db  43h ; C
.eh_frame:000000000000894F                 db  0Eh
.eh_frame:0000000000008950                 db  78h ; x
.eh_frame:0000000000008951                 db  45h ; E
.eh_frame:0000000000008952                 db  0Eh
.eh_frame:0000000000008953                 db  80h
.eh_frame:0000000000008954                 db    1
.eh_frame:0000000000008955                 db  5Eh ; ^
.eh_frame:0000000000008956                 db  0Eh
.eh_frame:0000000000008957                 db  60h ; `
.eh_frame:0000000000008958                 db  4Ch ; L
.eh_frame:0000000000008959                 db  0Ah
.eh_frame:000000000000895A                 db  0Eh
.eh_frame:000000000000895B                 db  38h ; 8
.eh_frame:000000000000895C                 db  44h ; D
.eh_frame:000000000000895D                 db  0Eh
.eh_frame:000000000000895E                 db  30h ; 0
.eh_frame:000000000000895F                 db  41h ; A
.eh_frame:0000000000008960                 db  0Eh
.eh_frame:0000000000008961                 db  28h ; (
.eh_frame:0000000000008962                 db  42h ; B
.eh_frame:0000000000008963                 db  0Eh
.eh_frame:0000000000008964                 db  20h
.eh_frame:0000000000008965                 db  42h ; B
.eh_frame:0000000000008966                 db  0Eh
.eh_frame:0000000000008967                 db  18h
.eh_frame:0000000000008968                 db  42h ; B
.eh_frame:0000000000008969                 db  0Eh
.eh_frame:000000000000896A                 db  10h
.eh_frame:000000000000896B                 db  42h ; B
.eh_frame:000000000000896C                 db  0Eh
.eh_frame:000000000000896D                 db    8
.eh_frame:000000000000896E                 db  46h ; F
.eh_frame:000000000000896F                 db  0Bh
.eh_frame:0000000000008970                 db  28h ; (
.eh_frame:0000000000008971                 db    0
.eh_frame:0000000000008972                 db    0
.eh_frame:0000000000008973                 db    0
.eh_frame:0000000000008974                 db 0A4h
.eh_frame:0000000000008975                 db    4
.eh_frame:0000000000008976                 db    0
.eh_frame:0000000000008977                 db    0
.eh_frame:0000000000008978                 db  68h ; h
.eh_frame:0000000000008979                 db 0CBh
.eh_frame:000000000000897A                 db 0FFh
.eh_frame:000000000000897B                 db 0FFh
.eh_frame:000000000000897C                 db  36h ; 6
.eh_frame:000000000000897D                 db    0
.eh_frame:000000000000897E                 db    0
.eh_frame:000000000000897F                 db    0
.eh_frame:0000000000008980                 db    0
.eh_frame:0000000000008981                 db  42h ; B
.eh_frame:0000000000008982                 db  0Eh
.eh_frame:0000000000008983                 db  10h
.eh_frame:0000000000008984                 db  8Ch
.eh_frame:0000000000008985                 db    2
.eh_frame:0000000000008986                 db  41h ; A
.eh_frame:0000000000008987                 db  0Eh
.eh_frame:0000000000008988                 db  18h
.eh_frame:0000000000008989                 db  86h
.eh_frame:000000000000898A                 db    3
.eh_frame:000000000000898B                 db  41h ; A
.eh_frame:000000000000898C                 db  0Eh
.eh_frame:000000000000898D                 db  20h
.eh_frame:000000000000898E                 db  83h
.eh_frame:000000000000898F                 db    4
.eh_frame:0000000000008990                 db  6Eh ; n
.eh_frame:0000000000008991                 db  0Eh
.eh_frame:0000000000008992                 db  18h
.eh_frame:0000000000008993                 db  41h ; A
.eh_frame:0000000000008994                 db  0Eh
.eh_frame:0000000000008995                 db  10h
.eh_frame:0000000000008996                 db  42h ; B
.eh_frame:0000000000008997                 db  0Eh
.eh_frame:0000000000008998                 db    8
.eh_frame:0000000000008999                 db    0
.eh_frame:000000000000899A                 db    0
.eh_frame:000000000000899B                 db    0
.eh_frame:000000000000899C                 db  10h
.eh_frame:000000000000899D                 db    0
.eh_frame:000000000000899E                 db    0
.eh_frame:000000000000899F                 db    0
.eh_frame:00000000000089A0                 db 0D0h
.eh_frame:00000000000089A1                 db    4
.eh_frame:00000000000089A2                 db    0
.eh_frame:00000000000089A3                 db    0
.eh_frame:00000000000089A4                 db  7Ch ; |
.eh_frame:00000000000089A5                 db 0CBh
.eh_frame:00000000000089A6                 db 0FFh
.eh_frame:00000000000089A7                 db 0FFh
.eh_frame:00000000000089A8                 db  11h
.eh_frame:00000000000089A9                 db    0
.eh_frame:00000000000089AA                 db    0
.eh_frame:00000000000089AB                 db    0
.eh_frame:00000000000089AC                 db    0
.eh_frame:00000000000089AD                 db    0
.eh_frame:00000000000089AE                 db    0
.eh_frame:00000000000089AF                 db    0
.eh_frame:00000000000089B0                 db  10h
.eh_frame:00000000000089B1                 db    0
.eh_frame:00000000000089B2                 db    0
.eh_frame:00000000000089B3                 db    0
.eh_frame:00000000000089B4                 db 0E4h
.eh_frame:00000000000089B5                 db    4
.eh_frame:00000000000089B6                 db    0
.eh_frame:00000000000089B7                 db    0
.eh_frame:00000000000089B8                 db  88h
.eh_frame:00000000000089B9                 db 0CBh
.eh_frame:00000000000089BA                 db 0FFh
.eh_frame:00000000000089BB                 db 0FFh
.eh_frame:00000000000089BC                 db  11h
.eh_frame:00000000000089BD                 db    0
.eh_frame:00000000000089BE                 db    0
.eh_frame:00000000000089BF                 db    0
.eh_frame:00000000000089C0                 db    0
.eh_frame:00000000000089C1                 db    0
.eh_frame:00000000000089C2                 db    0
.eh_frame:00000000000089C3                 db    0
.eh_frame:00000000000089C4                 db  10h
.eh_frame:00000000000089C5                 db    0
.eh_frame:00000000000089C6                 db    0
.eh_frame:00000000000089C7                 db    0
.eh_frame:00000000000089C8                 db 0F8h
.eh_frame:00000000000089C9                 db    4
.eh_frame:00000000000089CA                 db    0
.eh_frame:00000000000089CB                 db    0
.eh_frame:00000000000089CC                 db  94h
.eh_frame:00000000000089CD                 db 0CBh
.eh_frame:00000000000089CE                 db 0FFh
.eh_frame:00000000000089CF                 db 0FFh
.eh_frame:00000000000089D0                 db  35h ; 5
.eh_frame:00000000000089D1                 db    0
.eh_frame:00000000000089D2                 db    0
.eh_frame:00000000000089D3                 db    0
.eh_frame:00000000000089D4                 db    0
.eh_frame:00000000000089D5                 db    0
.eh_frame:00000000000089D6                 db    0
.eh_frame:00000000000089D7                 db    0
.eh_frame:00000000000089D8                 db  10h
.eh_frame:00000000000089D9                 db    0
.eh_frame:00000000000089DA                 db    0
.eh_frame:00000000000089DB                 db    0
.eh_frame:00000000000089DC                 db  0Ch
.eh_frame:00000000000089DD                 db    5
.eh_frame:00000000000089DE                 db    0
.eh_frame:00000000000089DF                 db    0
.eh_frame:00000000000089E0                 db 0C0h
.eh_frame:00000000000089E1                 db 0CBh
.eh_frame:00000000000089E2                 db 0FFh
.eh_frame:00000000000089E3                 db 0FFh
.eh_frame:00000000000089E4                 db  15h
.eh_frame:00000000000089E5                 db    0
.eh_frame:00000000000089E6                 db    0
.eh_frame:00000000000089E7                 db    0
.eh_frame:00000000000089E8                 db    0
.eh_frame:00000000000089E9                 db    0
.eh_frame:00000000000089EA                 db    0
.eh_frame:00000000000089EB                 db    0
.eh_frame:00000000000089EC                 db  10h
.eh_frame:00000000000089ED                 db    0
.eh_frame:00000000000089EE                 db    0
.eh_frame:00000000000089EF                 db    0
.eh_frame:00000000000089F0                 db  20h
.eh_frame:00000000000089F1                 db    5
.eh_frame:00000000000089F2                 db    0
.eh_frame:00000000000089F3                 db    0
.eh_frame:00000000000089F4                 db 0CCh
.eh_frame:00000000000089F5                 db 0CBh
.eh_frame:00000000000089F6                 db 0FFh
.eh_frame:00000000000089F7                 db 0FFh
.eh_frame:00000000000089F8                 db  30h ; 0
.eh_frame:00000000000089F9                 db    0
.eh_frame:00000000000089FA                 db    0
.eh_frame:00000000000089FB                 db    0
.eh_frame:00000000000089FC                 db    0
.eh_frame:00000000000089FD                 db  6Bh ; k
.eh_frame:00000000000089FE                 db  0Eh
.eh_frame:00000000000089FF                 db  10h
.eh_frame:0000000000008A00                 db  50h ; P
.eh_frame:0000000000008A01                 db    0
.eh_frame:0000000000008A02                 db    0
.eh_frame:0000000000008A03                 db    0
.eh_frame:0000000000008A04                 db  34h ; 4
.eh_frame:0000000000008A05                 db    5
.eh_frame:0000000000008A06                 db    0
.eh_frame:0000000000008A07                 db    0
.eh_frame:0000000000008A08                 db 0E8h
.eh_frame:0000000000008A09                 db 0CBh
.eh_frame:0000000000008A0A                 db 0FFh
.eh_frame:0000000000008A0B                 db 0FFh
.eh_frame:0000000000008A0C                 db  74h ; t
.eh_frame:0000000000008A0D                 db    0
.eh_frame:0000000000008A0E                 db    0
.eh_frame:0000000000008A0F                 db    0
.eh_frame:0000000000008A10                 db    0
.eh_frame:0000000000008A11                 db  42h ; B
.eh_frame:0000000000008A12                 db  0Eh
.eh_frame:0000000000008A13                 db  10h
.eh_frame:0000000000008A14                 db  8Fh
.eh_frame:0000000000008A15                 db    2
.eh_frame:0000000000008A16                 db  42h ; B
.eh_frame:0000000000008A17                 db  0Eh
.eh_frame:0000000000008A18                 db  18h
.eh_frame:0000000000008A19                 db  8Eh
.eh_frame:0000000000008A1A                 db    3
.eh_frame:0000000000008A1B                 db  49h ; I
.eh_frame:0000000000008A1C                 db  0Eh
.eh_frame:0000000000008A1D                 db  20h
.eh_frame:0000000000008A1E                 db  8Dh
.eh_frame:0000000000008A1F                 db    4
.eh_frame:0000000000008A20                 db  42h ; B
.eh_frame:0000000000008A21                 db  0Eh
.eh_frame:0000000000008A22                 db  28h ; (
.eh_frame:0000000000008A23                 db  8Ch
.eh_frame:0000000000008A24                 db    5
.eh_frame:0000000000008A25                 db  44h ; D
.eh_frame:0000000000008A26                 db  0Eh
.eh_frame:0000000000008A27                 db  30h ; 0
.eh_frame:0000000000008A28                 db  86h
.eh_frame:0000000000008A29                 db    6
.eh_frame:0000000000008A2A                 db  41h ; A
.eh_frame:0000000000008A2B                 db  0Eh
.eh_frame:0000000000008A2C                 db  38h ; 8
.eh_frame:0000000000008A2D                 db  83h
.eh_frame:0000000000008A2E                 db    7
.eh_frame:0000000000008A2F                 db  4Dh ; M
.eh_frame:0000000000008A30                 db  0Eh
.eh_frame:0000000000008A31                 db  50h ; P
.eh_frame:0000000000008A32                 db  5Fh ; _
.eh_frame:0000000000008A33                 db  0Eh
.eh_frame:0000000000008A34                 db  58h ; X
.eh_frame:0000000000008A35                 db  47h ; G
.eh_frame:0000000000008A36                 db  0Eh
.eh_frame:0000000000008A37                 db  60h ; `
.eh_frame:0000000000008A38                 db  46h ; F
.eh_frame:0000000000008A39                 db  0Eh
.eh_frame:0000000000008A3A                 db  68h ; h
.eh_frame:0000000000008A3B                 db  44h ; D
.eh_frame:0000000000008A3C                 db  0Eh
.eh_frame:0000000000008A3D                 db  70h ; p
.eh_frame:0000000000008A3E                 db  58h ; X
.eh_frame:0000000000008A3F                 db  0Eh
.eh_frame:0000000000008A40                 db  38h ; 8
.eh_frame:0000000000008A41                 db  41h ; A
.eh_frame:0000000000008A42                 db  0Eh
.eh_frame:0000000000008A43                 db  30h ; 0
.eh_frame:0000000000008A44                 db  41h ; A
.eh_frame:0000000000008A45                 db  0Eh
.eh_frame:0000000000008A46                 db  28h ; (
.eh_frame:0000000000008A47                 db  42h ; B
.eh_frame:0000000000008A48                 db  0Eh
.eh_frame:0000000000008A49                 db  20h
.eh_frame:0000000000008A4A                 db  42h ; B
.eh_frame:0000000000008A4B                 db  0Eh
.eh_frame:0000000000008A4C                 db  18h
.eh_frame:0000000000008A4D                 db  42h ; B
.eh_frame:0000000000008A4E                 db  0Eh
.eh_frame:0000000000008A4F                 db  10h
.eh_frame:0000000000008A50                 db  42h ; B
.eh_frame:0000000000008A51                 db  0Eh
.eh_frame:0000000000008A52                 db    8
.eh_frame:0000000000008A53                 db    0
.eh_frame:0000000000008A54                 db  68h ; h
.eh_frame:0000000000008A55                 db    0
.eh_frame:0000000000008A56                 db    0
.eh_frame:0000000000008A57                 db    0
.eh_frame:0000000000008A58                 db  88h
.eh_frame:0000000000008A59                 db    5
.eh_frame:0000000000008A5A                 db    0
.eh_frame:0000000000008A5B                 db    0
.eh_frame:0000000000008A5C                 db  14h
.eh_frame:0000000000008A5D                 db 0CCh
.eh_frame:0000000000008A5E                 db 0FFh
.eh_frame:0000000000008A5F                 db 0FFh
.eh_frame:0000000000008A60                 db 0E3h
.eh_frame:0000000000008A61                 db    0
.eh_frame:0000000000008A62                 db    0
.eh_frame:0000000000008A63                 db    0
.eh_frame:0000000000008A64                 db    0
.eh_frame:0000000000008A65                 db  42h ; B
.eh_frame:0000000000008A66                 db  0Eh
.eh_frame:0000000000008A67                 db  10h
.eh_frame:0000000000008A68                 db  8Fh
.eh_frame:0000000000008A69                 db    2
.eh_frame:0000000000008A6A                 db  42h ; B
.eh_frame:0000000000008A6B                 db  0Eh
.eh_frame:0000000000008A6C                 db  18h
.eh_frame:0000000000008A6D                 db  8Eh
.eh_frame:0000000000008A6E                 db    3
.eh_frame:0000000000008A6F                 db  49h ; I
.eh_frame:0000000000008A70                 db  0Eh
.eh_frame:0000000000008A71                 db  20h
.eh_frame:0000000000008A72                 db  8Dh
.eh_frame:0000000000008A73                 db    4
.eh_frame:0000000000008A74                 db  42h ; B
.eh_frame:0000000000008A75                 db  0Eh
.eh_frame:0000000000008A76                 db  28h ; (
.eh_frame:0000000000008A77                 db  8Ch
.eh_frame:0000000000008A78                 db    5
.eh_frame:0000000000008A79                 db  44h ; D
.eh_frame:0000000000008A7A                 db  0Eh
.eh_frame:0000000000008A7B                 db  30h ; 0
.eh_frame:0000000000008A7C                 db  86h
.eh_frame:0000000000008A7D                 db    6
.eh_frame:0000000000008A7E                 db  41h ; A
.eh_frame:0000000000008A7F                 db  0Eh
.eh_frame:0000000000008A80                 db  38h ; 8
.eh_frame:0000000000008A81                 db  83h
.eh_frame:0000000000008A82                 db    7
.eh_frame:0000000000008A83                 db  4Dh ; M
.eh_frame:0000000000008A84                 db  0Eh
.eh_frame:0000000000008A85                 db  70h ; p
.eh_frame:0000000000008A86                 db  65h ; e
.eh_frame:0000000000008A87                 db  0Eh
.eh_frame:0000000000008A88                 db  78h ; x
.eh_frame:0000000000008A89                 db  4Dh ; M
.eh_frame:0000000000008A8A                 db  0Eh
.eh_frame:0000000000008A8B                 db  80h
.eh_frame:0000000000008A8C                 db    1
.eh_frame:0000000000008A8D                 db  46h ; F
.eh_frame:0000000000008A8E                 db  0Eh
.eh_frame:0000000000008A8F                 db  88h
.eh_frame:0000000000008A90                 db    1
.eh_frame:0000000000008A91                 db  42h ; B
.eh_frame:0000000000008A92                 db  0Eh
.eh_frame:0000000000008A93                 db  90h
.eh_frame:0000000000008A94                 db    1
.eh_frame:0000000000008A95                 db  5Eh ; ^
.eh_frame:0000000000008A96                 db  0Eh
.eh_frame:0000000000008A97                 db  70h ; p
.eh_frame:0000000000008A98                 db  56h ; V
.eh_frame:0000000000008A99                 db  0Eh
.eh_frame:0000000000008A9A                 db  78h ; x
.eh_frame:0000000000008A9B                 db  43h ; C
.eh_frame:0000000000008A9C                 db  0Eh
.eh_frame:0000000000008A9D                 db  80h
.eh_frame:0000000000008A9E                 db    1
.eh_frame:0000000000008A9F                 db  43h ; C
.eh_frame:0000000000008AA0                 db  0Eh
.eh_frame:0000000000008AA1                 db  88h
.eh_frame:0000000000008AA2                 db    1
.eh_frame:0000000000008AA3                 db  56h ; V
.eh_frame:0000000000008AA4                 db  0Eh
.eh_frame:0000000000008AA5                 db  90h
.eh_frame:0000000000008AA6                 db    1
.eh_frame:0000000000008AA7                 db  52h ; R
.eh_frame:0000000000008AA8                 db  0Eh
.eh_frame:0000000000008AA9                 db  70h ; p
.eh_frame:0000000000008AAA                 db  5Bh ; [
.eh_frame:0000000000008AAB                 db  0Eh
.eh_frame:0000000000008AAC                 db  38h ; 8
.eh_frame:0000000000008AAD                 db  41h ; A
.eh_frame:0000000000008AAE                 db  0Eh
.eh_frame:0000000000008AAF                 db  30h ; 0
.eh_frame:0000000000008AB0                 db  41h ; A
.eh_frame:0000000000008AB1                 db  0Eh
.eh_frame:0000000000008AB2                 db  28h ; (
.eh_frame:0000000000008AB3                 db  42h ; B
.eh_frame:0000000000008AB4                 db  0Eh
.eh_frame:0000000000008AB5                 db  20h
.eh_frame:0000000000008AB6                 db  42h ; B
.eh_frame:0000000000008AB7                 db  0Eh
.eh_frame:0000000000008AB8                 db  18h
.eh_frame:0000000000008AB9                 db  42h ; B
.eh_frame:0000000000008ABA                 db  0Eh
.eh_frame:0000000000008ABB                 db  10h
.eh_frame:0000000000008ABC                 db  42h ; B
.eh_frame:0000000000008ABD                 db  0Eh
.eh_frame:0000000000008ABE                 db    8
.eh_frame:0000000000008ABF                 db    0
.eh_frame:0000000000008AC0                 db  10h
.eh_frame:0000000000008AC1                 db    0
.eh_frame:0000000000008AC2                 db    0
.eh_frame:0000000000008AC3                 db    0
.eh_frame:0000000000008AC4                 db 0F4h
.eh_frame:0000000000008AC5                 db    5
.eh_frame:0000000000008AC6                 db    0
.eh_frame:0000000000008AC7                 db    0
.eh_frame:0000000000008AC8                 db  98h
.eh_frame:0000000000008AC9                 db 0CCh
.eh_frame:0000000000008ACA                 db 0FFh
.eh_frame:0000000000008ACB                 db 0FFh
.eh_frame:0000000000008ACC                 db  0Ah
.eh_frame:0000000000008ACD                 db    0
.eh_frame:0000000000008ACE                 db    0
.eh_frame:0000000000008ACF                 db    0
.eh_frame:0000000000008AD0                 db    0
.eh_frame:0000000000008AD1                 db    0
.eh_frame:0000000000008AD2                 db    0
.eh_frame:0000000000008AD3                 db    0
.eh_frame:0000000000008AD4                 db  28h ; (
.eh_frame:0000000000008AD5                 db    0
.eh_frame:0000000000008AD6                 db    0
.eh_frame:0000000000008AD7                 db    0
.eh_frame:0000000000008AD8                 db    8
.eh_frame:0000000000008AD9                 db    6
.eh_frame:0000000000008ADA                 db    0
.eh_frame:0000000000008ADB                 db    0
.eh_frame:0000000000008ADC                 db  94h
.eh_frame:0000000000008ADD                 db 0CCh
.eh_frame:0000000000008ADE                 db 0FFh
.eh_frame:0000000000008ADF                 db 0FFh
.eh_frame:0000000000008AE0                 db  93h
.eh_frame:0000000000008AE1                 db    0
.eh_frame:0000000000008AE2                 db    0
.eh_frame:0000000000008AE3                 db    0
.eh_frame:0000000000008AE4                 db    0
.eh_frame:0000000000008AE5                 db  48h ; H
.eh_frame:0000000000008AE6                 db  0Eh
.eh_frame:0000000000008AE7                 db  10h
.eh_frame:0000000000008AE8                 db  8Ch
.eh_frame:0000000000008AE9                 db    2
.eh_frame:0000000000008AEA                 db  48h ; H
.eh_frame:0000000000008AEB                 db  0Eh
.eh_frame:0000000000008AEC                 db  18h
.eh_frame:0000000000008AED                 db  86h
.eh_frame:0000000000008AEE                 db    3
.eh_frame:0000000000008AEF                 db  41h ; A
.eh_frame:0000000000008AF0                 db  0Eh
.eh_frame:0000000000008AF1                 db  20h
.eh_frame:0000000000008AF2                 db  83h
.eh_frame:0000000000008AF3                 db    4
.eh_frame:0000000000008AF4                 db    2
.eh_frame:0000000000008AF5                 db  74h ; t
.eh_frame:0000000000008AF6                 db  0Eh
.eh_frame:0000000000008AF7                 db  18h
.eh_frame:0000000000008AF8                 db  4Bh ; K
.eh_frame:0000000000008AF9                 db  0Eh
.eh_frame:0000000000008AFA                 db  10h
.eh_frame:0000000000008AFB                 db  42h ; B
.eh_frame:0000000000008AFC                 db  0Eh
.eh_frame:0000000000008AFD                 db    8
.eh_frame:0000000000008AFE                 db    0
.eh_frame:0000000000008AFF                 db    0
.eh_frame:0000000000008B00                 db  10h
.eh_frame:0000000000008B01                 db    0
.eh_frame:0000000000008B02                 db    0
.eh_frame:0000000000008B03                 db    0
.eh_frame:0000000000008B04                 db  34h ; 4
.eh_frame:0000000000008B05                 db    6
.eh_frame:0000000000008B06                 db    0
.eh_frame:0000000000008B07                 db    0
.eh_frame:0000000000008B08                 db    8
.eh_frame:0000000000008B09                 db 0CDh
.eh_frame:0000000000008B0A                 db 0FFh
.eh_frame:0000000000008B0B                 db 0FFh
.eh_frame:0000000000008B0C                 db  13h
.eh_frame:0000000000008B0D                 db    0
.eh_frame:0000000000008B0E                 db    0
.eh_frame:0000000000008B0F                 db    0
.eh_frame:0000000000008B10                 db    0
.eh_frame:0000000000008B11                 db    0
.eh_frame:0000000000008B12                 db    0
.eh_frame:0000000000008B13                 db    0
.eh_frame:0000000000008B14                 db  10h
.eh_frame:0000000000008B15                 db    0
.eh_frame:0000000000008B16                 db    0
.eh_frame:0000000000008B17                 db    0
.eh_frame:0000000000008B18                 db  48h ; H
.eh_frame:0000000000008B19                 db    6
.eh_frame:0000000000008B1A                 db    0
.eh_frame:0000000000008B1B                 db    0
.eh_frame:0000000000008B1C                 db  14h
.eh_frame:0000000000008B1D                 db 0CDh
.eh_frame:0000000000008B1E                 db 0FFh
.eh_frame:0000000000008B1F                 db 0FFh
.eh_frame:0000000000008B20                 db  0Ch
.eh_frame:0000000000008B21                 db    0
.eh_frame:0000000000008B22                 db    0
.eh_frame:0000000000008B23                 db    0
.eh_frame:0000000000008B24                 db    0
.eh_frame:0000000000008B25                 db    0
.eh_frame:0000000000008B26                 db    0
.eh_frame:0000000000008B27                 db    0
.eh_frame:0000000000008B28                 db  10h
.eh_frame:0000000000008B29                 db    0
.eh_frame:0000000000008B2A                 db    0
.eh_frame:0000000000008B2B                 db    0
.eh_frame:0000000000008B2C                 db  5Ch ; \
.eh_frame:0000000000008B2D                 db    6
.eh_frame:0000000000008B2E                 db    0
.eh_frame:0000000000008B2F                 db    0
.eh_frame:0000000000008B30                 db  10h
.eh_frame:0000000000008B31                 db 0CDh
.eh_frame:0000000000008B32                 db 0FFh
.eh_frame:0000000000008B33                 db 0FFh
.eh_frame:0000000000008B34                 db  18h
.eh_frame:0000000000008B35                 db    0
.eh_frame:0000000000008B36                 db    0
.eh_frame:0000000000008B37                 db    0
.eh_frame:0000000000008B38                 db    0
.eh_frame:0000000000008B39                 db    0
.eh_frame:0000000000008B3A                 db    0
.eh_frame:0000000000008B3B                 db    0
.eh_frame:0000000000008B3C                 db  10h
.eh_frame:0000000000008B3D                 db    0
.eh_frame:0000000000008B3E                 db    0
.eh_frame:0000000000008B3F                 db    0
.eh_frame:0000000000008B40                 db  70h ; p
.eh_frame:0000000000008B41                 db    6
.eh_frame:0000000000008B42                 db    0
.eh_frame:0000000000008B43                 db    0
.eh_frame:0000000000008B44                 db  1Ch
.eh_frame:0000000000008B45                 db 0CDh
.eh_frame:0000000000008B46                 db 0FFh
.eh_frame:0000000000008B47                 db 0FFh
.eh_frame:0000000000008B48                 db  14h
.eh_frame:0000000000008B49                 db    0
.eh_frame:0000000000008B4A                 db    0
.eh_frame:0000000000008B4B                 db    0
.eh_frame:0000000000008B4C                 db    0
.eh_frame:0000000000008B4D                 db    0
.eh_frame:0000000000008B4E                 db    0
.eh_frame:0000000000008B4F                 db    0
.eh_frame:0000000000008B50                 db  18h
.eh_frame:0000000000008B51                 db    0
.eh_frame:0000000000008B52                 db    0
.eh_frame:0000000000008B53                 db    0
.eh_frame:0000000000008B54                 db  84h
.eh_frame:0000000000008B55                 db    6
.eh_frame:0000000000008B56                 db    0
.eh_frame:0000000000008B57                 db    0
.eh_frame:0000000000008B58                 db  28h ; (
.eh_frame:0000000000008B59                 db 0CDh
.eh_frame:0000000000008B5A                 db 0FFh
.eh_frame:0000000000008B5B                 db 0FFh
.eh_frame:0000000000008B5C                 db  8Eh
.eh_frame:0000000000008B5D                 db    0
.eh_frame:0000000000008B5E                 db    0
.eh_frame:0000000000008B5F                 db    0
.eh_frame:0000000000008B60                 db    0
.eh_frame:0000000000008B61                 db  44h ; D
.eh_frame:0000000000008B62                 db  0Eh
.eh_frame:0000000000008B63                 db  50h ; P
.eh_frame:0000000000008B64                 db    2
.eh_frame:0000000000008B65                 db  7Fh ; 
.eh_frame:0000000000008B66                 db  0Ah
.eh_frame:0000000000008B67                 db  0Eh
.eh_frame:0000000000008B68                 db    8
.eh_frame:0000000000008B69                 db  41h ; A
.eh_frame:0000000000008B6A                 db  0Bh
.eh_frame:0000000000008B6B                 db    0
.eh_frame:0000000000008B6C                 db  18h
.eh_frame:0000000000008B6D                 db    0
.eh_frame:0000000000008B6E                 db    0
.eh_frame:0000000000008B6F                 db    0
.eh_frame:0000000000008B70                 db 0A0h
.eh_frame:0000000000008B71                 db    6
.eh_frame:0000000000008B72                 db    0
.eh_frame:0000000000008B73                 db    0
.eh_frame:0000000000008B74                 db  9Ch
.eh_frame:0000000000008B75                 db 0CDh
.eh_frame:0000000000008B76                 db 0FFh
.eh_frame:0000000000008B77                 db 0FFh
.eh_frame:0000000000008B78                 db  8Ah
.eh_frame:0000000000008B79                 db    0
.eh_frame:0000000000008B7A                 db    0
.eh_frame:0000000000008B7B                 db    0
.eh_frame:0000000000008B7C                 db    0
.eh_frame:0000000000008B7D                 db  44h ; D
.eh_frame:0000000000008B7E                 db  0Eh
.eh_frame:0000000000008B7F                 db  50h ; P
.eh_frame:0000000000008B80                 db    2
.eh_frame:0000000000008B81                 db  7Bh ; {
.eh_frame:0000000000008B82                 db  0Ah
.eh_frame:0000000000008B83                 db  0Eh
.eh_frame:0000000000008B84                 db    8
.eh_frame:0000000000008B85                 db  41h ; A
.eh_frame:0000000000008B86                 db  0Bh
.eh_frame:0000000000008B87                 db    0
.eh_frame:0000000000008B88                 db  10h
.eh_frame:0000000000008B89                 db    0
.eh_frame:0000000000008B8A                 db    0
.eh_frame:0000000000008B8B                 db    0
.eh_frame:0000000000008B8C                 db 0BCh
.eh_frame:0000000000008B8D                 db    6
.eh_frame:0000000000008B8E                 db    0
.eh_frame:0000000000008B8F                 db    0
.eh_frame:0000000000008B90                 db  10h
.eh_frame:0000000000008B91                 db 0CEh
.eh_frame:0000000000008B92                 db 0FFh
.eh_frame:0000000000008B93                 db 0FFh
.eh_frame:0000000000008B94                 db  0Ch
.eh_frame:0000000000008B95                 db    0
.eh_frame:0000000000008B96                 db    0
.eh_frame:0000000000008B97                 db    0
.eh_frame:0000000000008B98                 db    0
.eh_frame:0000000000008B99                 db    0
.eh_frame:0000000000008B9A                 db    0
.eh_frame:0000000000008B9B                 db    0
.eh_frame:0000000000008B9C                 db  10h
.eh_frame:0000000000008B9D                 db    0
.eh_frame:0000000000008B9E                 db    0
.eh_frame:0000000000008B9F                 db    0
.eh_frame:0000000000008BA0                 db 0D0h
.eh_frame:0000000000008BA1                 db    6
.eh_frame:0000000000008BA2                 db    0
.eh_frame:0000000000008BA3                 db    0
.eh_frame:0000000000008BA4                 db  0Ch
.eh_frame:0000000000008BA5                 db 0CEh
.eh_frame:0000000000008BA6                 db 0FFh
.eh_frame:0000000000008BA7                 db 0FFh
.eh_frame:0000000000008BA8                 db  0Fh
.eh_frame:0000000000008BA9                 db    0
.eh_frame:0000000000008BAA                 db    0
.eh_frame:0000000000008BAB                 db    0
.eh_frame:0000000000008BAC                 db    0
.eh_frame:0000000000008BAD                 db    0
.eh_frame:0000000000008BAE                 db    0
.eh_frame:0000000000008BAF                 db    0
.eh_frame:0000000000008BB0                 db  18h
.eh_frame:0000000000008BB1                 db    0
.eh_frame:0000000000008BB2                 db    0
.eh_frame:0000000000008BB3                 db    0
.eh_frame:0000000000008BB4                 db 0E4h
.eh_frame:0000000000008BB5                 db    6
.eh_frame:0000000000008BB6                 db    0
.eh_frame:0000000000008BB7                 db    0
.eh_frame:0000000000008BB8                 db    8
.eh_frame:0000000000008BB9                 db 0CEh
.eh_frame:0000000000008BBA                 db 0FFh
.eh_frame:0000000000008BBB                 db 0FFh
.eh_frame:0000000000008BBC                 db  98h
.eh_frame:0000000000008BBD                 db    0
.eh_frame:0000000000008BBE                 db    0
.eh_frame:0000000000008BBF                 db    0
.eh_frame:0000000000008BC0                 db    0
.eh_frame:0000000000008BC1                 db  44h ; D
.eh_frame:0000000000008BC2                 db  0Eh
.eh_frame:0000000000008BC3                 db  50h ; P
.eh_frame:0000000000008BC4                 db    2
.eh_frame:0000000000008BC5                 db  8Eh
.eh_frame:0000000000008BC6                 db  0Ah
.eh_frame:0000000000008BC7                 db  0Eh
.eh_frame:0000000000008BC8                 db    8
.eh_frame:0000000000008BC9                 db  41h ; A
.eh_frame:0000000000008BCA                 db  0Bh
.eh_frame:0000000000008BCB                 db    0
.eh_frame:0000000000008BCC                 db  10h
.eh_frame:0000000000008BCD                 db    0
.eh_frame:0000000000008BCE                 db    0
.eh_frame:0000000000008BCF                 db    0
.eh_frame:0000000000008BD0                 db    0
.eh_frame:0000000000008BD1                 db    7
.eh_frame:0000000000008BD2                 db    0
.eh_frame:0000000000008BD3                 db    0
.eh_frame:0000000000008BD4                 db  8Ch
.eh_frame:0000000000008BD5                 db 0CEh
.eh_frame:0000000000008BD6                 db 0FFh
.eh_frame:0000000000008BD7                 db 0FFh
.eh_frame:0000000000008BD8                 db  10h
.eh_frame:0000000000008BD9                 db    0
.eh_frame:0000000000008BDA                 db    0
.eh_frame:0000000000008BDB                 db    0
.eh_frame:0000000000008BDC                 db    0
.eh_frame:0000000000008BDD                 db    0
.eh_frame:0000000000008BDE                 db    0
.eh_frame:0000000000008BDF                 db    0
.eh_frame:0000000000008BE0                 db  10h
.eh_frame:0000000000008BE1                 db    0
.eh_frame:0000000000008BE2                 db    0
.eh_frame:0000000000008BE3                 db    0
.eh_frame:0000000000008BE4                 db  14h
.eh_frame:0000000000008BE5                 db    7
.eh_frame:0000000000008BE6                 db    0
.eh_frame:0000000000008BE7                 db    0
.eh_frame:0000000000008BE8                 db  88h
.eh_frame:0000000000008BE9                 db 0CEh
.eh_frame:0000000000008BEA                 db 0FFh
.eh_frame:0000000000008BEB                 db 0FFh
.eh_frame:0000000000008BEC                 db  11h
.eh_frame:0000000000008BED                 db    0
.eh_frame:0000000000008BEE                 db    0
.eh_frame:0000000000008BEF                 db    0
.eh_frame:0000000000008BF0                 db    0
.eh_frame:0000000000008BF1                 db    0
.eh_frame:0000000000008BF2                 db    0
.eh_frame:0000000000008BF3                 db    0
.eh_frame:0000000000008BF4                 db  10h
.eh_frame:0000000000008BF5                 db    0
.eh_frame:0000000000008BF6                 db    0
.eh_frame:0000000000008BF7                 db    0
.eh_frame:0000000000008BF8                 db  28h ; (
.eh_frame:0000000000008BF9                 db    7
.eh_frame:0000000000008BFA                 db    0
.eh_frame:0000000000008BFB                 db    0
.eh_frame:0000000000008BFC                 db  94h
.eh_frame:0000000000008BFD                 db 0CEh
.eh_frame:0000000000008BFE                 db 0FFh
.eh_frame:0000000000008BFF                 db 0FFh
.eh_frame:0000000000008C00                 db  0Ah
.eh_frame:0000000000008C01                 db    0
.eh_frame:0000000000008C02                 db    0
.eh_frame:0000000000008C03                 db    0
.eh_frame:0000000000008C04                 db    0
.eh_frame:0000000000008C05                 db    0
.eh_frame:0000000000008C06                 db    0
.eh_frame:0000000000008C07                 db    0
.eh_frame:0000000000008C08                 db  18h
.eh_frame:0000000000008C09                 db    0
.eh_frame:0000000000008C0A                 db    0
.eh_frame:0000000000008C0B                 db    0
.eh_frame:0000000000008C0C                 db  3Ch ; <
.eh_frame:0000000000008C0D                 db    7
.eh_frame:0000000000008C0E                 db    0
.eh_frame:0000000000008C0F                 db    0
.eh_frame:0000000000008C10                 db  90h
.eh_frame:0000000000008C11                 db 0CEh
.eh_frame:0000000000008C12                 db 0FFh
.eh_frame:0000000000008C13                 db 0FFh
.eh_frame:0000000000008C14                 db  8Eh
.eh_frame:0000000000008C15                 db    0
.eh_frame:0000000000008C16                 db    0
.eh_frame:0000000000008C17                 db    0
.eh_frame:0000000000008C18                 db    0
.eh_frame:0000000000008C19                 db  44h ; D
.eh_frame:0000000000008C1A                 db  0Eh
.eh_frame:0000000000008C1B                 db  50h ; P
.eh_frame:0000000000008C1C                 db    2
.eh_frame:0000000000008C1D                 db  7Fh ; 
.eh_frame:0000000000008C1E                 db  0Ah
.eh_frame:0000000000008C1F                 db  0Eh
.eh_frame:0000000000008C20                 db    8
.eh_frame:0000000000008C21                 db  41h ; A
.eh_frame:0000000000008C22                 db  0Bh
.eh_frame:0000000000008C23                 db    0
.eh_frame:0000000000008C24                 db  18h
.eh_frame:0000000000008C25                 db    0
.eh_frame:0000000000008C26                 db    0
.eh_frame:0000000000008C27                 db    0
.eh_frame:0000000000008C28                 db  58h ; X
.eh_frame:0000000000008C29                 db    7
.eh_frame:0000000000008C2A                 db    0
.eh_frame:0000000000008C2B                 db    0
.eh_frame:0000000000008C2C                 db    4
.eh_frame:0000000000008C2D                 db 0CFh
.eh_frame:0000000000008C2E                 db 0FFh
.eh_frame:0000000000008C2F                 db 0FFh
.eh_frame:0000000000008C30                 db  91h
.eh_frame:0000000000008C31                 db    0
.eh_frame:0000000000008C32                 db    0
.eh_frame:0000000000008C33                 db    0
.eh_frame:0000000000008C34                 db    0
.eh_frame:0000000000008C35                 db  44h ; D
.eh_frame:0000000000008C36                 db  0Eh
.eh_frame:0000000000008C37                 db  50h ; P
.eh_frame:0000000000008C38                 db    2
.eh_frame:0000000000008C39                 db  82h
.eh_frame:0000000000008C3A                 db  0Ah
.eh_frame:0000000000008C3B                 db  0Eh
.eh_frame:0000000000008C3C                 db    8
.eh_frame:0000000000008C3D                 db  41h ; A
.eh_frame:0000000000008C3E                 db  0Bh
.eh_frame:0000000000008C3F                 db    0
.eh_frame:0000000000008C40                 db  10h
.eh_frame:0000000000008C41                 db    0
.eh_frame:0000000000008C42                 db    0
.eh_frame:0000000000008C43                 db    0
.eh_frame:0000000000008C44                 db  74h ; t
.eh_frame:0000000000008C45                 db    7
.eh_frame:0000000000008C46                 db    0
.eh_frame:0000000000008C47                 db    0
.eh_frame:0000000000008C48                 db  88h
.eh_frame:0000000000008C49                 db 0CFh
.eh_frame:0000000000008C4A                 db 0FFh
.eh_frame:0000000000008C4B                 db 0FFh
.eh_frame:0000000000008C4C                 db  0Ch
.eh_frame:0000000000008C4D                 db    0
.eh_frame:0000000000008C4E                 db    0
.eh_frame:0000000000008C4F                 db    0
.eh_frame:0000000000008C50                 db    0
.eh_frame:0000000000008C51                 db    0
.eh_frame:0000000000008C52                 db    0
.eh_frame:0000000000008C53                 db    0
.eh_frame:0000000000008C54                 db  10h
.eh_frame:0000000000008C55                 db    0
.eh_frame:0000000000008C56                 db    0
.eh_frame:0000000000008C57                 db    0
.eh_frame:0000000000008C58                 db  88h
.eh_frame:0000000000008C59                 db    7
.eh_frame:0000000000008C5A                 db    0
.eh_frame:0000000000008C5B                 db    0
.eh_frame:0000000000008C5C                 db  84h
.eh_frame:0000000000008C5D                 db 0CFh
.eh_frame:0000000000008C5E                 db 0FFh
.eh_frame:0000000000008C5F                 db 0FFh
.eh_frame:0000000000008C60                 db  17h
.eh_frame:0000000000008C61                 db    0
.eh_frame:0000000000008C62                 db    0
.eh_frame:0000000000008C63                 db    0
.eh_frame:0000000000008C64                 db    0
.eh_frame:0000000000008C65                 db    0
.eh_frame:0000000000008C66                 db    0
.eh_frame:0000000000008C67                 db    0
.eh_frame:0000000000008C68                 db  10h
.eh_frame:0000000000008C69                 db    0
.eh_frame:0000000000008C6A                 db    0
.eh_frame:0000000000008C6B                 db    0
.eh_frame:0000000000008C6C                 db  9Ch
.eh_frame:0000000000008C6D                 db    7
.eh_frame:0000000000008C6E                 db    0
.eh_frame:0000000000008C6F                 db    0
.eh_frame:0000000000008C70                 db  90h
.eh_frame:0000000000008C71                 db 0CFh
.eh_frame:0000000000008C72                 db 0FFh
.eh_frame:0000000000008C73                 db 0FFh
.eh_frame:0000000000008C74                 db  13h
.eh_frame:0000000000008C75                 db    0
.eh_frame:0000000000008C76                 db    0
.eh_frame:0000000000008C77                 db    0
.eh_frame:0000000000008C78                 db    0
.eh_frame:0000000000008C79                 db    0
.eh_frame:0000000000008C7A                 db    0
.eh_frame:0000000000008C7B                 db    0
.eh_frame:0000000000008C7C                 db  10h
.eh_frame:0000000000008C7D                 db    0
.eh_frame:0000000000008C7E                 db    0
.eh_frame:0000000000008C7F                 db    0
.eh_frame:0000000000008C80                 db 0B0h
.eh_frame:0000000000008C81                 db    7
.eh_frame:0000000000008C82                 db    0
.eh_frame:0000000000008C83                 db    0
.eh_frame:0000000000008C84                 db  9Ch
.eh_frame:0000000000008C85                 db 0CFh
.eh_frame:0000000000008C86                 db 0FFh
.eh_frame:0000000000008C87                 db 0FFh
.eh_frame:0000000000008C88                 db  0Ch
.eh_frame:0000000000008C89                 db    0
.eh_frame:0000000000008C8A                 db    0
.eh_frame:0000000000008C8B                 db    0
.eh_frame:0000000000008C8C                 db    0
.eh_frame:0000000000008C8D                 db    0
.eh_frame:0000000000008C8E                 db    0
.eh_frame:0000000000008C8F                 db    0
.eh_frame:0000000000008C90                 db  10h
.eh_frame:0000000000008C91                 db    0
.eh_frame:0000000000008C92                 db    0
.eh_frame:0000000000008C93                 db    0
.eh_frame:0000000000008C94                 db 0C4h
.eh_frame:0000000000008C95                 db    7
.eh_frame:0000000000008C96                 db    0
.eh_frame:0000000000008C97                 db    0
.eh_frame:0000000000008C98                 db  98h
.eh_frame:0000000000008C99                 db 0CFh
.eh_frame:0000000000008C9A                 db 0FFh
.eh_frame:0000000000008C9B                 db 0FFh
.eh_frame:0000000000008C9C                 db  14h
.eh_frame:0000000000008C9D                 db    0
.eh_frame:0000000000008C9E                 db    0
.eh_frame:0000000000008C9F                 db    0
.eh_frame:0000000000008CA0                 db    0
.eh_frame:0000000000008CA1                 db    0
.eh_frame:0000000000008CA2                 db    0
.eh_frame:0000000000008CA3                 db    0
.eh_frame:0000000000008CA4                 db  10h
.eh_frame:0000000000008CA5                 db    0
.eh_frame:0000000000008CA6                 db    0
.eh_frame:0000000000008CA7                 db    0
.eh_frame:0000000000008CA8                 db 0D8h
.eh_frame:0000000000008CA9                 db    7
.eh_frame:0000000000008CAA                 db    0
.eh_frame:0000000000008CAB                 db    0
.eh_frame:0000000000008CAC                 db 0A4h
.eh_frame:0000000000008CAD                 db 0CFh
.eh_frame:0000000000008CAE                 db 0FFh
.eh_frame:0000000000008CAF                 db 0FFh
.eh_frame:0000000000008CB0                 db  13h
.eh_frame:0000000000008CB1                 db    0
.eh_frame:0000000000008CB2                 db    0
.eh_frame:0000000000008CB3                 db    0
.eh_frame:0000000000008CB4                 db    0
.eh_frame:0000000000008CB5                 db    0
.eh_frame:0000000000008CB6                 db    0
.eh_frame:0000000000008CB7                 db    0
.eh_frame:0000000000008CB8                 db  14h
.eh_frame:0000000000008CB9                 db    0
.eh_frame:0000000000008CBA                 db    0
.eh_frame:0000000000008CBB                 db    0
.eh_frame:0000000000008CBC                 db 0ECh
.eh_frame:0000000000008CBD                 db    7
.eh_frame:0000000000008CBE                 db    0
.eh_frame:0000000000008CBF                 db    0
.eh_frame:0000000000008CC0                 db 0B0h
.eh_frame:0000000000008CC1                 db 0CFh
.eh_frame:0000000000008CC2                 db 0FFh
.eh_frame:0000000000008CC3                 db 0FFh
.eh_frame:0000000000008CC4                 db  18h
.eh_frame:0000000000008CC5                 db    0
.eh_frame:0000000000008CC6                 db    0
.eh_frame:0000000000008CC7                 db    0
.eh_frame:0000000000008CC8                 db    0
.eh_frame:0000000000008CC9                 db    0
.eh_frame:0000000000008CCA                 db    0
.eh_frame:0000000000008CCB                 db    0
.eh_frame:0000000000008CCC                 db    0
.eh_frame:0000000000008CCD                 db    0
.eh_frame:0000000000008CCE                 db    0
.eh_frame:0000000000008CCF                 db    0
.eh_frame:0000000000008CD0                 db  2Ch ; ,
.eh_frame:0000000000008CD1                 db    0
.eh_frame:0000000000008CD2                 db    0
.eh_frame:0000000000008CD3                 db    0
.eh_frame:0000000000008CD4                 db    4
.eh_frame:0000000000008CD5                 db    8
.eh_frame:0000000000008CD6                 db    0
.eh_frame:0000000000008CD7                 db    0
.eh_frame:0000000000008CD8                 db 0B8h
.eh_frame:0000000000008CD9                 db 0CFh
.eh_frame:0000000000008CDA                 db 0FFh
.eh_frame:0000000000008CDB                 db 0FFh
.eh_frame:0000000000008CDC                 db 0E9h
.eh_frame:0000000000008CDD                 db    0
.eh_frame:0000000000008CDE                 db    0
.eh_frame:0000000000008CDF                 db    0
.eh_frame:0000000000008CE0                 db    0
.eh_frame:0000000000008CE1                 db  42h ; B
.eh_frame:0000000000008CE2                 db  0Eh
.eh_frame:0000000000008CE3                 db  10h
.eh_frame:0000000000008CE4                 db  8Ch
.eh_frame:0000000000008CE5                 db    2
.eh_frame:0000000000008CE6                 db  41h ; A
.eh_frame:0000000000008CE7                 db  0Eh
.eh_frame:0000000000008CE8                 db  18h
.eh_frame:0000000000008CE9                 db  86h
.eh_frame:0000000000008CEA                 db    3
.eh_frame:0000000000008CEB                 db  41h ; A
.eh_frame:0000000000008CEC                 db  0Eh
.eh_frame:0000000000008CED                 db  20h
.eh_frame:0000000000008CEE                 db  83h
.eh_frame:0000000000008CEF                 db    4
.eh_frame:0000000000008CF0                 db    2
.eh_frame:0000000000008CF1                 db 0B5h
.eh_frame:0000000000008CF2                 db  0Ah
.eh_frame:0000000000008CF3                 db  0Eh
.eh_frame:0000000000008CF4                 db  18h
.eh_frame:0000000000008CF5                 db  41h ; A
.eh_frame:0000000000008CF6                 db  0Eh
.eh_frame:0000000000008CF7                 db  10h
.eh_frame:0000000000008CF8                 db  42h ; B
.eh_frame:0000000000008CF9                 db  0Eh
.eh_frame:0000000000008CFA                 db    8
.eh_frame:0000000000008CFB                 db  44h ; D
.eh_frame:0000000000008CFC                 db  0Bh
.eh_frame:0000000000008CFD                 db    0
.eh_frame:0000000000008CFE                 db    0
.eh_frame:0000000000008CFF                 db    0
.eh_frame:0000000000008D00                 db  28h ; (
.eh_frame:0000000000008D01                 db    0
.eh_frame:0000000000008D02                 db    0
.eh_frame:0000000000008D03                 db    0
.eh_frame:0000000000008D04                 db  34h ; 4
.eh_frame:0000000000008D05                 db    8
.eh_frame:0000000000008D06                 db    0
.eh_frame:0000000000008D07                 db    0
.eh_frame:0000000000008D08                 db  78h ; x
.eh_frame:0000000000008D09                 db 0D0h
.eh_frame:0000000000008D0A                 db 0FFh
.eh_frame:0000000000008D0B                 db 0FFh
.eh_frame:0000000000008D0C                 db  6Ch ; l
.eh_frame:0000000000008D0D                 db    0
.eh_frame:0000000000008D0E                 db    0
.eh_frame:0000000000008D0F                 db    0
.eh_frame:0000000000008D10                 db    0
.eh_frame:0000000000008D11                 db  42h ; B
.eh_frame:0000000000008D12                 db  0Eh
.eh_frame:0000000000008D13                 db  10h
.eh_frame:0000000000008D14                 db  8Ch
.eh_frame:0000000000008D15                 db    2
.eh_frame:0000000000008D16                 db  4Ah ; J
.eh_frame:0000000000008D17                 db  0Eh
.eh_frame:0000000000008D18                 db  18h
.eh_frame:0000000000008D19                 db  86h
.eh_frame:0000000000008D1A                 db    3
.eh_frame:0000000000008D1B                 db  4Ah ; J
.eh_frame:0000000000008D1C                 db  0Eh
.eh_frame:0000000000008D1D                 db  20h
.eh_frame:0000000000008D1E                 db  83h
.eh_frame:0000000000008D1F                 db    4
.eh_frame:0000000000008D20                 db    2
.eh_frame:0000000000008D21                 db  4Ah ; J
.eh_frame:0000000000008D22                 db  0Eh
.eh_frame:0000000000008D23                 db  18h
.eh_frame:0000000000008D24                 db  41h ; A
.eh_frame:0000000000008D25                 db  0Eh
.eh_frame:0000000000008D26                 db  10h
.eh_frame:0000000000008D27                 db  42h ; B
.eh_frame:0000000000008D28                 db  0Eh
.eh_frame:0000000000008D29                 db    8
.eh_frame:0000000000008D2A                 db    0
.eh_frame:0000000000008D2B                 db    0
.eh_frame:0000000000008D2C                 db  18h
.eh_frame:0000000000008D2D                 db    0
.eh_frame:0000000000008D2E                 db    0
.eh_frame:0000000000008D2F                 db    0
.eh_frame:0000000000008D30                 db  60h ; `
.eh_frame:0000000000008D31                 db    8
.eh_frame:0000000000008D32                 db    0
.eh_frame:0000000000008D33                 db    0
.eh_frame:0000000000008D34                 db 0BCh
.eh_frame:0000000000008D35                 db 0D0h
.eh_frame:0000000000008D36                 db 0FFh
.eh_frame:0000000000008D37                 db 0FFh
.eh_frame:0000000000008D38                 db  29h ; )
.eh_frame:0000000000008D39                 db    0
.eh_frame:0000000000008D3A                 db    0
.eh_frame:0000000000008D3B                 db    0
.eh_frame:0000000000008D3C                 db    0
.eh_frame:0000000000008D3D                 db  41h ; A
.eh_frame:0000000000008D3E                 db  0Eh
.eh_frame:0000000000008D3F                 db  10h
.eh_frame:0000000000008D40                 db  83h
.eh_frame:0000000000008D41                 db    2
.eh_frame:0000000000008D42                 db  63h ; c
.eh_frame:0000000000008D43                 db  0Eh
.eh_frame:0000000000008D44                 db    8
.eh_frame:0000000000008D45                 db    0
.eh_frame:0000000000008D46                 db    0
.eh_frame:0000000000008D47                 db    0
.eh_frame:0000000000008D48                 db  34h ; 4
.eh_frame:0000000000008D49                 db    0
.eh_frame:0000000000008D4A                 db    0
.eh_frame:0000000000008D4B                 db    0
.eh_frame:0000000000008D4C                 db  7Ch ; |
.eh_frame:0000000000008D4D                 db    8
.eh_frame:0000000000008D4E                 db    0
.eh_frame:0000000000008D4F                 db    0
.eh_frame:0000000000008D50                 db 0D0h
.eh_frame:0000000000008D51                 db 0D0h
.eh_frame:0000000000008D52                 db 0FFh
.eh_frame:0000000000008D53                 db 0FFh
.eh_frame:0000000000008D54                 db    7
.eh_frame:0000000000008D55                 db    2
.eh_frame:0000000000008D56                 db    0
.eh_frame:0000000000008D57                 db    0
.eh_frame:0000000000008D58                 db    0
.eh_frame:0000000000008D59                 db  42h ; B
.eh_frame:0000000000008D5A                 db  0Eh
.eh_frame:0000000000008D5B                 db  10h
.eh_frame:0000000000008D5C                 db  8Ch
.eh_frame:0000000000008D5D                 db    2
.eh_frame:0000000000008D5E                 db  41h ; A
.eh_frame:0000000000008D5F                 db  0Eh
.eh_frame:0000000000008D60                 db  18h
.eh_frame:0000000000008D61                 db  86h
.eh_frame:0000000000008D62                 db    3
.eh_frame:0000000000008D63                 db  45h ; E
.eh_frame:0000000000008D64                 db  0Eh
.eh_frame:0000000000008D65                 db  20h
.eh_frame:0000000000008D66                 db  83h
.eh_frame:0000000000008D67                 db    4
.eh_frame:0000000000008D68                 db  4Ah ; J
.eh_frame:0000000000008D69                 db  0Eh
.eh_frame:0000000000008D6A                 db  30h ; 0
.eh_frame:0000000000008D6B                 db    3
.eh_frame:0000000000008D6C                 db  96h
.eh_frame:0000000000008D6D                 db    1
.eh_frame:0000000000008D6E                 db  0Ah
.eh_frame:0000000000008D6F                 db  0Eh
.eh_frame:0000000000008D70                 db  20h
.eh_frame:0000000000008D71                 db  41h ; A
.eh_frame:0000000000008D72                 db  0Eh
.eh_frame:0000000000008D73                 db  18h
.eh_frame:0000000000008D74                 db  41h ; A
.eh_frame:0000000000008D75                 db  0Eh
.eh_frame:0000000000008D76                 db  10h
.eh_frame:0000000000008D77                 db  42h ; B
.eh_frame:0000000000008D78                 db  0Eh
.eh_frame:0000000000008D79                 db    8
.eh_frame:0000000000008D7A                 db  44h ; D
.eh_frame:0000000000008D7B                 db  0Bh
.eh_frame:0000000000008D7C                 db    0
.eh_frame:0000000000008D7D                 db    0
.eh_frame:0000000000008D7E                 db    0
.eh_frame:0000000000008D7F                 db    0
.eh_frame:0000000000008D80                 db  34h ; 4
.eh_frame:0000000000008D81                 db    0
.eh_frame:0000000000008D82                 db    0
.eh_frame:0000000000008D83                 db    0
.eh_frame:0000000000008D84                 db 0B4h
.eh_frame:0000000000008D85                 db    8
.eh_frame:0000000000008D86                 db    0
.eh_frame:0000000000008D87                 db    0
.eh_frame:0000000000008D88                 db 0A8h
.eh_frame:0000000000008D89                 db 0D2h
.eh_frame:0000000000008D8A                 db 0FFh
.eh_frame:0000000000008D8B                 db 0FFh
.eh_frame:0000000000008D8C                 db  5Eh ; ^
.eh_frame:0000000000008D8D                 db    0
.eh_frame:0000000000008D8E                 db    0
.eh_frame:0000000000008D8F                 db    0
.eh_frame:0000000000008D90                 db    0
.eh_frame:0000000000008D91                 db  42h ; B
.eh_frame:0000000000008D92                 db  0Eh
.eh_frame:0000000000008D93                 db  10h
.eh_frame:0000000000008D94                 db  8Dh
.eh_frame:0000000000008D95                 db    2
.eh_frame:0000000000008D96                 db  42h ; B
.eh_frame:0000000000008D97                 db  0Eh
.eh_frame:0000000000008D98                 db  18h
.eh_frame:0000000000008D99                 db  8Ch
.eh_frame:0000000000008D9A                 db    3
.eh_frame:0000000000008D9B                 db  44h ; D
.eh_frame:0000000000008D9C                 db  0Eh
.eh_frame:0000000000008D9D                 db  20h
.eh_frame:0000000000008D9E                 db  86h
.eh_frame:0000000000008D9F                 db    4
.eh_frame:0000000000008DA0                 db  41h ; A
.eh_frame:0000000000008DA1                 db  0Eh
.eh_frame:0000000000008DA2                 db  28h ; (
.eh_frame:0000000000008DA3                 db  83h
.eh_frame:0000000000008DA4                 db    5
.eh_frame:0000000000008DA5                 db  4Ah ; J
.eh_frame:0000000000008DA6                 db  0Eh
.eh_frame:0000000000008DA7                 db  30h ; 0
.eh_frame:0000000000008DA8                 db    2
.eh_frame:0000000000008DA9                 db  41h ; A
.eh_frame:0000000000008DAA                 db  0Eh
.eh_frame:0000000000008DAB                 db  28h ; (
.eh_frame:0000000000008DAC                 db  44h ; D
.eh_frame:0000000000008DAD                 db  0Eh
.eh_frame:0000000000008DAE                 db  20h
.eh_frame:0000000000008DAF                 db  41h ; A
.eh_frame:0000000000008DB0                 db  0Eh
.eh_frame:0000000000008DB1                 db  18h
.eh_frame:0000000000008DB2                 db  42h ; B
.eh_frame:0000000000008DB3                 db  0Eh
.eh_frame:0000000000008DB4                 db  10h
.eh_frame:0000000000008DB5                 db  42h ; B
.eh_frame:0000000000008DB6                 db  0Eh
.eh_frame:0000000000008DB7                 db    8
.eh_frame:0000000000008DB8                 db  10h
.eh_frame:0000000000008DB9                 db    1
.eh_frame:0000000000008DBA                 db    0
.eh_frame:0000000000008DBB                 db    0
.eh_frame:0000000000008DBC                 db 0ECh
.eh_frame:0000000000008DBD                 db    8
.eh_frame:0000000000008DBE                 db    0
.eh_frame:0000000000008DBF                 db    0
.eh_frame:0000000000008DC0                 db 0D0h
.eh_frame:0000000000008DC1                 db 0D2h
.eh_frame:0000000000008DC2                 db 0FFh
.eh_frame:0000000000008DC3                 db 0FFh
.eh_frame:0000000000008DC4                 db  17h
.eh_frame:0000000000008DC5                 db    4
.eh_frame:0000000000008DC6                 db    0
.eh_frame:0000000000008DC7                 db    0
.eh_frame:0000000000008DC8                 db    0
.eh_frame:0000000000008DC9                 db  42h ; B
.eh_frame:0000000000008DCA                 db  0Eh
.eh_frame:0000000000008DCB                 db  10h
.eh_frame:0000000000008DCC                 db  8Fh
.eh_frame:0000000000008DCD                 db    2
.eh_frame:0000000000008DCE                 db  42h ; B
.eh_frame:0000000000008DCF                 db  0Eh
.eh_frame:0000000000008DD0                 db  18h
.eh_frame:0000000000008DD1                 db  8Eh
.eh_frame:0000000000008DD2                 db    3
.eh_frame:0000000000008DD3                 db  42h ; B
.eh_frame:0000000000008DD4                 db  0Eh
.eh_frame:0000000000008DD5                 db  20h
.eh_frame:0000000000008DD6                 db  8Dh
.eh_frame:0000000000008DD7                 db    4
.eh_frame:0000000000008DD8                 db  42h ; B
.eh_frame:0000000000008DD9                 db  0Eh
.eh_frame:0000000000008DDA                 db  28h ; (
.eh_frame:0000000000008DDB                 db  8Ch
.eh_frame:0000000000008DDC                 db    5
.eh_frame:0000000000008DDD                 db  44h ; D
.eh_frame:0000000000008DDE                 db  0Eh
.eh_frame:0000000000008DDF                 db  30h ; 0
.eh_frame:0000000000008DE0                 db  86h
.eh_frame:0000000000008DE1                 db    6
.eh_frame:0000000000008DE2                 db  41h ; A
.eh_frame:0000000000008DE3                 db  0Eh
.eh_frame:0000000000008DE4                 db  38h ; 8
.eh_frame:0000000000008DE5                 db  83h
.eh_frame:0000000000008DE6                 db    7
.eh_frame:0000000000008DE7                 db  4Ah ; J
.eh_frame:0000000000008DE8                 db  0Eh
.eh_frame:0000000000008DE9                 db  60h ; `
.eh_frame:0000000000008DEA                 db    2
.eh_frame:0000000000008DEB                 db 0DDh
.eh_frame:0000000000008DEC                 db  0Eh
.eh_frame:0000000000008DED                 db  68h ; h
.eh_frame:0000000000008DEE                 db  57h ; W
.eh_frame:0000000000008DEF                 db  0Eh
.eh_frame:0000000000008DF0                 db  70h ; p
.eh_frame:0000000000008DF1                 db  42h ; B
.eh_frame:0000000000008DF2                 db  0Eh
.eh_frame:0000000000008DF3                 db  78h ; x
.eh_frame:0000000000008DF4                 db  42h ; B
.eh_frame:0000000000008DF5                 db  0Eh
.eh_frame:0000000000008DF6                 db  80h
.eh_frame:0000000000008DF7                 db    1
.eh_frame:0000000000008DF8                 db  42h ; B
.eh_frame:0000000000008DF9                 db  0Eh
.eh_frame:0000000000008DFA                 db  88h
.eh_frame:0000000000008DFB                 db    1
.eh_frame:0000000000008DFC                 db  42h ; B
.eh_frame:0000000000008DFD                 db  0Eh
.eh_frame:0000000000008DFE                 db  90h
.eh_frame:0000000000008DFF                 db    1
.eh_frame:0000000000008E00                 db  53h ; S
.eh_frame:0000000000008E01                 db  0Eh
.eh_frame:0000000000008E02                 db  60h ; `
.eh_frame:0000000000008E03                 db  44h ; D
.eh_frame:0000000000008E04                 db  0Ah
.eh_frame:0000000000008E05                 db  0Eh
.eh_frame:0000000000008E06                 db  38h ; 8
.eh_frame:0000000000008E07                 db  41h ; A
.eh_frame:0000000000008E08                 db  0Eh
.eh_frame:0000000000008E09                 db  30h ; 0
.eh_frame:0000000000008E0A                 db  41h ; A
.eh_frame:0000000000008E0B                 db  0Eh
.eh_frame:0000000000008E0C                 db  28h ; (
.eh_frame:0000000000008E0D                 db  42h ; B
.eh_frame:0000000000008E0E                 db  0Eh
.eh_frame:0000000000008E0F                 db  20h
.eh_frame:0000000000008E10                 db  42h ; B
.eh_frame:0000000000008E11                 db  0Eh
.eh_frame:0000000000008E12                 db  18h
.eh_frame:0000000000008E13                 db  42h ; B
.eh_frame:0000000000008E14                 db  0Eh
.eh_frame:0000000000008E15                 db  10h
.eh_frame:0000000000008E16                 db  42h ; B
.eh_frame:0000000000008E17                 db  0Eh
.eh_frame:0000000000008E18                 db    8
.eh_frame:0000000000008E19                 db  44h ; D
.eh_frame:0000000000008E1A                 db  0Bh
.eh_frame:0000000000008E1B                 db    2
.eh_frame:0000000000008E1C                 db  78h ; x
.eh_frame:0000000000008E1D                 db  0Ah
.eh_frame:0000000000008E1E                 db  0Eh
.eh_frame:0000000000008E1F                 db  68h ; h
.eh_frame:0000000000008E20                 db  48h ; H
.eh_frame:0000000000008E21                 db  0Bh
.eh_frame:0000000000008E22                 db  5Ah ; Z
.eh_frame:0000000000008E23                 db  0Ah
.eh_frame:0000000000008E24                 db  0Eh
.eh_frame:0000000000008E25                 db  38h ; 8
.eh_frame:0000000000008E26                 db  47h ; G
.eh_frame:0000000000008E27                 db  0Eh
.eh_frame:0000000000008E28                 db  30h ; 0
.eh_frame:0000000000008E29                 db  41h ; A
.eh_frame:0000000000008E2A                 db  0Eh
.eh_frame:0000000000008E2B                 db  28h ; (
.eh_frame:0000000000008E2C                 db  42h ; B
.eh_frame:0000000000008E2D                 db  0Eh
.eh_frame:0000000000008E2E                 db  20h
.eh_frame:0000000000008E2F                 db  42h ; B
.eh_frame:0000000000008E30                 db  0Eh
.eh_frame:0000000000008E31                 db  18h
.eh_frame:0000000000008E32                 db  42h ; B
.eh_frame:0000000000008E33                 db  0Eh
.eh_frame:0000000000008E34                 db  10h
.eh_frame:0000000000008E35                 db  42h ; B
.eh_frame:0000000000008E36                 db  0Eh
.eh_frame:0000000000008E37                 db    8
.eh_frame:0000000000008E38                 db  56h ; V
.eh_frame:0000000000008E39                 db  0Bh
.eh_frame:0000000000008E3A                 db  5Eh ; ^
.eh_frame:0000000000008E3B                 db  0Ah
.eh_frame:0000000000008E3C                 db  0Eh
.eh_frame:0000000000008E3D                 db  38h ; 8
.eh_frame:0000000000008E3E                 db  52h ; R
.eh_frame:0000000000008E3F                 db  0Eh
.eh_frame:0000000000008E40                 db  30h ; 0
.eh_frame:0000000000008E41                 db  41h ; A
.eh_frame:0000000000008E42                 db  0Eh
.eh_frame:0000000000008E43                 db  28h ; (
.eh_frame:0000000000008E44                 db  42h ; B
.eh_frame:0000000000008E45                 db  0Eh
.eh_frame:0000000000008E46                 db  20h
.eh_frame:0000000000008E47                 db  42h ; B
.eh_frame:0000000000008E48                 db  0Eh
.eh_frame:0000000000008E49                 db  18h
.eh_frame:0000000000008E4A                 db  42h ; B
.eh_frame:0000000000008E4B                 db  0Eh
.eh_frame:0000000000008E4C                 db  10h
.eh_frame:0000000000008E4D                 db  42h ; B
.eh_frame:0000000000008E4E                 db  0Eh
.eh_frame:0000000000008E4F                 db    8
.eh_frame:0000000000008E50                 db  4Fh ; O
.eh_frame:0000000000008E51                 db  0Bh
.eh_frame:0000000000008E52                 db  62h ; b
.eh_frame:0000000000008E53                 db  0Ah
.eh_frame:0000000000008E54                 db  0Eh
.eh_frame:0000000000008E55                 db  38h ; 8
.eh_frame:0000000000008E56                 db  50h ; P
.eh_frame:0000000000008E57                 db  0Eh
.eh_frame:0000000000008E58                 db  30h ; 0
.eh_frame:0000000000008E59                 db  41h ; A
.eh_frame:0000000000008E5A                 db  0Eh
.eh_frame:0000000000008E5B                 db  28h ; (
.eh_frame:0000000000008E5C                 db  42h ; B
.eh_frame:0000000000008E5D                 db  0Eh
.eh_frame:0000000000008E5E                 db  20h
.eh_frame:0000000000008E5F                 db  42h ; B
.eh_frame:0000000000008E60                 db  0Eh
.eh_frame:0000000000008E61                 db  18h
.eh_frame:0000000000008E62                 db  42h ; B
.eh_frame:0000000000008E63                 db  0Eh
.eh_frame:0000000000008E64                 db  10h
.eh_frame:0000000000008E65                 db  42h ; B
.eh_frame:0000000000008E66                 db  0Eh
.eh_frame:0000000000008E67                 db    8
.eh_frame:0000000000008E68                 db  55h ; U
.eh_frame:0000000000008E69                 db  0Bh
.eh_frame:0000000000008E6A                 db  66h ; f
.eh_frame:0000000000008E6B                 db  0Eh
.eh_frame:0000000000008E6C                 db  68h ; h
.eh_frame:0000000000008E6D                 db  42h ; B
.eh_frame:0000000000008E6E                 db  0Eh
.eh_frame:0000000000008E6F                 db  70h ; p
.eh_frame:0000000000008E70                 db  5Ch ; \
.eh_frame:0000000000008E71                 db  0Eh
.eh_frame:0000000000008E72                 db  68h ; h
.eh_frame:0000000000008E73                 db  41h ; A
.eh_frame:0000000000008E74                 db  0Eh
.eh_frame:0000000000008E75                 db  60h ; `
.eh_frame:0000000000008E76                 db  44h ; D
.eh_frame:0000000000008E77                 db  0Ah
.eh_frame:0000000000008E78                 db  0Eh
.eh_frame:0000000000008E79                 db  38h ; 8
.eh_frame:0000000000008E7A                 db  41h ; A
.eh_frame:0000000000008E7B                 db  0Eh
.eh_frame:0000000000008E7C                 db  30h ; 0
.eh_frame:0000000000008E7D                 db  41h ; A
.eh_frame:0000000000008E7E                 db  0Eh
.eh_frame:0000000000008E7F                 db  28h ; (
.eh_frame:0000000000008E80                 db  42h ; B
.eh_frame:0000000000008E81                 db  0Eh
.eh_frame:0000000000008E82                 db  20h
.eh_frame:0000000000008E83                 db  42h ; B
.eh_frame:0000000000008E84                 db  0Eh
.eh_frame:0000000000008E85                 db  18h
.eh_frame:0000000000008E86                 db  42h ; B
.eh_frame:0000000000008E87                 db  0Eh
.eh_frame:0000000000008E88                 db  10h
.eh_frame:0000000000008E89                 db  42h ; B
.eh_frame:0000000000008E8A                 db  0Eh
.eh_frame:0000000000008E8B                 db    8
.eh_frame:0000000000008E8C                 db  45h ; E
.eh_frame:0000000000008E8D                 db  0Bh
.eh_frame:0000000000008E8E                 db  68h ; h
.eh_frame:0000000000008E8F                 db  0Ah
.eh_frame:0000000000008E90                 db  0Eh
.eh_frame:0000000000008E91                 db  68h ; h
.eh_frame:0000000000008E92                 db  48h ; H
.eh_frame:0000000000008E93                 db  0Bh
.eh_frame:0000000000008E94                 db  72h ; r
.eh_frame:0000000000008E95                 db  0Eh
.eh_frame:0000000000008E96                 db  68h ; h
.eh_frame:0000000000008E97                 db  45h ; E
.eh_frame:0000000000008E98                 db  0Eh
.eh_frame:0000000000008E99                 db  70h ; p
.eh_frame:0000000000008E9A                 db  42h ; B
.eh_frame:0000000000008E9B                 db  0Eh
.eh_frame:0000000000008E9C                 db  78h ; x
.eh_frame:0000000000008E9D                 db  42h ; B
.eh_frame:0000000000008E9E                 db  0Eh
.eh_frame:0000000000008E9F                 db  80h
.eh_frame:0000000000008EA0                 db    1
.eh_frame:0000000000008EA1                 db  5Eh ; ^
.eh_frame:0000000000008EA2                 db  0Eh
.eh_frame:0000000000008EA3                 db  60h ; `
.eh_frame:0000000000008EA4                 db  44h ; D
.eh_frame:0000000000008EA5                 db  0Ah
.eh_frame:0000000000008EA6                 db  0Eh
.eh_frame:0000000000008EA7                 db  38h ; 8
.eh_frame:0000000000008EA8                 db  41h ; A
.eh_frame:0000000000008EA9                 db  0Eh
.eh_frame:0000000000008EAA                 db  30h ; 0
.eh_frame:0000000000008EAB                 db  41h ; A
.eh_frame:0000000000008EAC                 db  0Eh
.eh_frame:0000000000008EAD                 db  28h ; (
.eh_frame:0000000000008EAE                 db  42h ; B
.eh_frame:0000000000008EAF                 db  0Eh
.eh_frame:0000000000008EB0                 db  20h
.eh_frame:0000000000008EB1                 db  42h ; B
.eh_frame:0000000000008EB2                 db  0Eh
.eh_frame:0000000000008EB3                 db  18h
.eh_frame:0000000000008EB4                 db  42h ; B
.eh_frame:0000000000008EB5                 db  0Eh
.eh_frame:0000000000008EB6                 db  10h
.eh_frame:0000000000008EB7                 db  42h ; B
.eh_frame:0000000000008EB8                 db  0Eh
.eh_frame:0000000000008EB9                 db    8
.eh_frame:0000000000008EBA                 db  41h ; A
.eh_frame:0000000000008EBB                 db  0Bh
.eh_frame:0000000000008EBC                 db  79h ; y
.eh_frame:0000000000008EBD                 db  0Ah
.eh_frame:0000000000008EBE                 db  0Eh
.eh_frame:0000000000008EBF                 db  68h ; h
.eh_frame:0000000000008EC0                 db  42h ; B
.eh_frame:0000000000008EC1                 db  0Eh
.eh_frame:0000000000008EC2                 db  70h ; p
.eh_frame:0000000000008EC3                 db  42h ; B
.eh_frame:0000000000008EC4                 db  0Eh
.eh_frame:0000000000008EC5                 db  78h ; x
.eh_frame:0000000000008EC6                 db  42h ; B
.eh_frame:0000000000008EC7                 db  0Eh
.eh_frame:0000000000008EC8                 db  80h
.eh_frame:0000000000008EC9                 db    1
.eh_frame:0000000000008ECA                 db  51h ; Q
.eh_frame:0000000000008ECB                 db  0Bh
.eh_frame:0000000000008ECC                 db  10h
.eh_frame:0000000000008ECD                 db    0
.eh_frame:0000000000008ECE                 db    0
.eh_frame:0000000000008ECF                 db    0
.eh_frame:0000000000008ED0                 db    0
.eh_frame:0000000000008ED1                 db  0Ah
.eh_frame:0000000000008ED2                 db    0
.eh_frame:0000000000008ED3                 db    0
.eh_frame:0000000000008ED4                 db 0DCh
.eh_frame:0000000000008ED5                 db 0D5h
.eh_frame:0000000000008ED6                 db 0FFh
.eh_frame:0000000000008ED7                 db 0FFh
.eh_frame:0000000000008ED8                 db  20h
.eh_frame:0000000000008ED9                 db    0
.eh_frame:0000000000008EDA                 db    0
.eh_frame:0000000000008EDB                 db    0
.eh_frame:0000000000008EDC                 db    0
.eh_frame:0000000000008EDD                 db    0
.eh_frame:0000000000008EDE                 db    0
.eh_frame:0000000000008EDF                 db    0
.eh_frame:0000000000008EE0                 db  18h
.eh_frame:0000000000008EE1                 db    0
.eh_frame:0000000000008EE2                 db    0
.eh_frame:0000000000008EE3                 db    0
.eh_frame:0000000000008EE4                 db  14h
.eh_frame:0000000000008EE5                 db  0Ah
.eh_frame:0000000000008EE6                 db    0
.eh_frame:0000000000008EE7                 db    0
.eh_frame:0000000000008EE8                 db 0E8h
.eh_frame:0000000000008EE9                 db 0D5h
.eh_frame:0000000000008EEA                 db 0FFh
.eh_frame:0000000000008EEB                 db 0FFh
.eh_frame:0000000000008EEC                 db  78h ; x
.eh_frame:0000000000008EED                 db    0
.eh_frame:0000000000008EEE                 db    0
.eh_frame:0000000000008EEF                 db    0
.eh_frame:0000000000008EF0                 db    0
.eh_frame:0000000000008EF1                 db  44h ; D
.eh_frame:0000000000008EF2                 db  0Eh
.eh_frame:0000000000008EF3                 db  70h ; p
.eh_frame:0000000000008EF4                 db    2
.eh_frame:0000000000008EF5                 db  60h ; `
.eh_frame:0000000000008EF6                 db  0Ah
.eh_frame:0000000000008EF7                 db  0Eh
.eh_frame:0000000000008EF8                 db    8
.eh_frame:0000000000008EF9                 db  41h ; A
.eh_frame:0000000000008EFA                 db  0Bh
.eh_frame:0000000000008EFB                 db    0
.eh_frame:0000000000008EFC                 db  28h ; (
.eh_frame:0000000000008EFD                 db    0
.eh_frame:0000000000008EFE                 db    0
.eh_frame:0000000000008EFF                 db    0
.eh_frame:0000000000008F00                 db  30h ; 0
.eh_frame:0000000000008F01                 db  0Ah
.eh_frame:0000000000008F02                 db    0
.eh_frame:0000000000008F03                 db    0
.eh_frame:0000000000008F04                 db  4Ch ; L
.eh_frame:0000000000008F05                 db 0D6h
.eh_frame:0000000000008F06                 db 0FFh
.eh_frame:0000000000008F07                 db 0FFh
.eh_frame:0000000000008F08                 db 0D5h
.eh_frame:0000000000008F09                 db    0
.eh_frame:0000000000008F0A                 db    0
.eh_frame:0000000000008F0B                 db    0
.eh_frame:0000000000008F0C                 db    0
.eh_frame:0000000000008F0D                 db  41h ; A
.eh_frame:0000000000008F0E                 db  0Eh
.eh_frame:0000000000008F0F                 db  10h
.eh_frame:0000000000008F10                 db  86h
.eh_frame:0000000000008F11                 db    2
.eh_frame:0000000000008F12                 db  41h ; A
.eh_frame:0000000000008F13                 db  0Eh
.eh_frame:0000000000008F14                 db  18h
.eh_frame:0000000000008F15                 db  83h
.eh_frame:0000000000008F16                 db    3
.eh_frame:0000000000008F17                 db  50h ; P
.eh_frame:0000000000008F18                 db  0Eh
.eh_frame:0000000000008F19                 db 0D0h
.eh_frame:0000000000008F1A                 db    1
.eh_frame:0000000000008F1B                 db    2
.eh_frame:0000000000008F1C                 db 0ABh
.eh_frame:0000000000008F1D                 db  0Ah
.eh_frame:0000000000008F1E                 db  0Eh
.eh_frame:0000000000008F1F                 db  18h
.eh_frame:0000000000008F20                 db  41h ; A
.eh_frame:0000000000008F21                 db  0Eh
.eh_frame:0000000000008F22                 db  10h
.eh_frame:0000000000008F23                 db  41h ; A
.eh_frame:0000000000008F24                 db  0Eh
.eh_frame:0000000000008F25                 db    8
.eh_frame:0000000000008F26                 db  41h ; A
.eh_frame:0000000000008F27                 db  0Bh
.eh_frame:0000000000008F28                 db  1Ch
.eh_frame:0000000000008F29                 db    0
.eh_frame:0000000000008F2A                 db    0
.eh_frame:0000000000008F2B                 db    0
.eh_frame:0000000000008F2C                 db  5Ch ; \
.eh_frame:0000000000008F2D                 db  0Ah
.eh_frame:0000000000008F2E                 db    0
.eh_frame:0000000000008F2F                 db    0
.eh_frame:0000000000008F30                 db    0
.eh_frame:0000000000008F31                 db 0D7h
.eh_frame:0000000000008F32                 db 0FFh
.eh_frame:0000000000008F33                 db 0FFh
.eh_frame:0000000000008F34                 db  80h
.eh_frame:0000000000008F35                 db    0
.eh_frame:0000000000008F36                 db    0
.eh_frame:0000000000008F37                 db    0
.eh_frame:0000000000008F38                 db    0
.eh_frame:0000000000008F39                 db  41h ; A
.eh_frame:0000000000008F3A                 db  0Eh
.eh_frame:0000000000008F3B                 db  10h
.eh_frame:0000000000008F3C                 db  83h
.eh_frame:0000000000008F3D                 db    2
.eh_frame:0000000000008F3E                 db    2
.eh_frame:0000000000008F3F                 db  7Ah ; z
.eh_frame:0000000000008F40                 db  0Eh
.eh_frame:0000000000008F41                 db    8
.eh_frame:0000000000008F42                 db    0
.eh_frame:0000000000008F43                 db    0
.eh_frame:0000000000008F44                 db    0
.eh_frame:0000000000008F45                 db    0
.eh_frame:0000000000008F46                 db    0
.eh_frame:0000000000008F47                 db    0
.eh_frame:0000000000008F48                 db  18h
.eh_frame:0000000000008F49                 db    0
.eh_frame:0000000000008F4A                 db    0
.eh_frame:0000000000008F4B                 db    0
.eh_frame:0000000000008F4C                 db  7Ch ; |
.eh_frame:0000000000008F4D                 db  0Ah
.eh_frame:0000000000008F4E                 db    0
.eh_frame:0000000000008F4F                 db    0
.eh_frame:0000000000008F50                 db  60h ; `
.eh_frame:0000000000008F51                 db 0D7h
.eh_frame:0000000000008F52                 db 0FFh
.eh_frame:0000000000008F53                 db 0FFh
.eh_frame:0000000000008F54                 db  1Ah
.eh_frame:0000000000008F55                 db    0
.eh_frame:0000000000008F56                 db    0
.eh_frame:0000000000008F57                 db    0
.eh_frame:0000000000008F58                 db    0
.eh_frame:0000000000008F59                 db  41h ; A
.eh_frame:0000000000008F5A                 db  0Eh
.eh_frame:0000000000008F5B                 db  10h
.eh_frame:0000000000008F5C                 db  83h
.eh_frame:0000000000008F5D                 db    2
.eh_frame:0000000000008F5E                 db  53h ; S
.eh_frame:0000000000008F5F                 db  0Ah
.eh_frame:0000000000008F60                 db  0Eh
.eh_frame:0000000000008F61                 db    8
.eh_frame:0000000000008F62                 db  41h ; A
.eh_frame:0000000000008F63                 db  0Bh
.eh_frame:0000000000008F64                 db  10h
.eh_frame:0000000000008F65                 db    0
.eh_frame:0000000000008F66                 db    0
.eh_frame:0000000000008F67                 db    0
.eh_frame:0000000000008F68                 db  98h
.eh_frame:0000000000008F69                 db  0Ah
.eh_frame:0000000000008F6A                 db    0
.eh_frame:0000000000008F6B                 db    0
.eh_frame:0000000000008F6C                 db  64h ; d
.eh_frame:0000000000008F6D                 db 0D7h
.eh_frame:0000000000008F6E                 db 0FFh
.eh_frame:0000000000008F6F                 db 0FFh
.eh_frame:0000000000008F70                 db  24h ; $
.eh_frame:0000000000008F71                 db    0
.eh_frame:0000000000008F72                 db    0
.eh_frame:0000000000008F73                 db    0
.eh_frame:0000000000008F74                 db    0
.eh_frame:0000000000008F75                 db  5Fh ; _
.eh_frame:0000000000008F76                 db  0Eh
.eh_frame:0000000000008F77                 db  10h
.eh_frame:0000000000008F78                 db  10h
.eh_frame:0000000000008F79                 db    0
.eh_frame:0000000000008F7A                 db    0
.eh_frame:0000000000008F7B                 db    0
.eh_frame:0000000000008F7C                 db 0ACh
.eh_frame:0000000000008F7D                 db  0Ah
.eh_frame:0000000000008F7E                 db    0
.eh_frame:0000000000008F7F                 db    0
.eh_frame:0000000000008F80                 db  80h
.eh_frame:0000000000008F81                 db 0D7h
.eh_frame:0000000000008F82                 db 0FFh
.eh_frame:0000000000008F83                 db 0FFh
.eh_frame:0000000000008F84                 db    2
.eh_frame:0000000000008F85                 db    0
.eh_frame:0000000000008F86                 db    0
.eh_frame:0000000000008F87                 db    0
.eh_frame:0000000000008F88                 db    0
.eh_frame:0000000000008F89                 db    0
.eh_frame:0000000000008F8A                 db    0
.eh_frame:0000000000008F8B                 db    0
.eh_frame:0000000000008F8C                 db  20h
.eh_frame:0000000000008F8D                 db    0
.eh_frame:0000000000008F8E                 db    0
.eh_frame:0000000000008F8F                 db    0
.eh_frame:0000000000008F90                 db 0C0h
.eh_frame:0000000000008F91                 db  0Ah
.eh_frame:0000000000008F92                 db    0
.eh_frame:0000000000008F93                 db    0
.eh_frame:0000000000008F94                 db  7Ch ; |
.eh_frame:0000000000008F95                 db 0D7h
.eh_frame:0000000000008F96                 db 0FFh
.eh_frame:0000000000008F97                 db 0FFh
.eh_frame:0000000000008F98                 db  36h ; 6
.eh_frame:0000000000008F99                 db    0
.eh_frame:0000000000008F9A                 db    0
.eh_frame:0000000000008F9B                 db    0
.eh_frame:0000000000008F9C                 db    0
.eh_frame:0000000000008F9D                 db  44h ; D
.eh_frame:0000000000008F9E                 db  0Eh
.eh_frame:0000000000008F9F                 db  10h
.eh_frame:0000000000008FA0                 db  83h
.eh_frame:0000000000008FA1                 db    2
.eh_frame:0000000000008FA2                 db  5Dh ; ]
.eh_frame:0000000000008FA3                 db  0Ah
.eh_frame:0000000000008FA4                 db  0Eh
.eh_frame:0000000000008FA5                 db    8
.eh_frame:0000000000008FA6                 db  47h ; G
.eh_frame:0000000000008FA7                 db  0Bh
.eh_frame:0000000000008FA8                 db  48h ; H
.eh_frame:0000000000008FA9                 db  0Ah
.eh_frame:0000000000008FAA                 db  0Eh
.eh_frame:0000000000008FAB                 db    8
.eh_frame:0000000000008FAC                 db  41h ; A
.eh_frame:0000000000008FAD                 db  0Bh
.eh_frame:0000000000008FAE                 db    0
.eh_frame:0000000000008FAF                 db    0
.eh_frame:0000000000008FB0                 db  10h
.eh_frame:0000000000008FB1                 db    0
.eh_frame:0000000000008FB2                 db    0
.eh_frame:0000000000008FB3                 db    0
.eh_frame:0000000000008FB4                 db 0E4h
.eh_frame:0000000000008FB5                 db  0Ah
.eh_frame:0000000000008FB6                 db    0
.eh_frame:0000000000008FB7                 db    0
.eh_frame:0000000000008FB8                 db  98h
.eh_frame:0000000000008FB9                 db 0D7h
.eh_frame:0000000000008FBA                 db 0FFh
.eh_frame:0000000000008FBB                 db 0FFh
.eh_frame:0000000000008FBC                 db  24h ; $
.eh_frame:0000000000008FBD                 db    0
.eh_frame:0000000000008FBE                 db    0
.eh_frame:0000000000008FBF                 db    0
.eh_frame:0000000000008FC0                 db    0
.eh_frame:0000000000008FC1                 db  5Fh ; _
.eh_frame:0000000000008FC2                 db  0Eh
.eh_frame:0000000000008FC3                 db  10h
.eh_frame:0000000000008FC4                 db  14h
.eh_frame:0000000000008FC5                 db    0
.eh_frame:0000000000008FC6                 db    0
.eh_frame:0000000000008FC7                 db    0
.eh_frame:0000000000008FC8                 db 0F8h
.eh_frame:0000000000008FC9                 db  0Ah
.eh_frame:0000000000008FCA                 db    0
.eh_frame:0000000000008FCB                 db    0
.eh_frame:0000000000008FCC                 db 0B4h
.eh_frame:0000000000008FCD                 db 0D7h
.eh_frame:0000000000008FCE                 db 0FFh
.eh_frame:0000000000008FCF                 db 0FFh
.eh_frame:0000000000008FD0                 db  82h
.eh_frame:0000000000008FD1                 db    0
.eh_frame:0000000000008FD2                 db    0
.eh_frame:0000000000008FD3                 db    0
.eh_frame:0000000000008FD4                 db    0
.eh_frame:0000000000008FD5                 db    2
.eh_frame:0000000000008FD6                 db  5Fh ; _
.eh_frame:0000000000008FD7                 db  0Eh
.eh_frame:0000000000008FD8                 db  10h
.eh_frame:0000000000008FD9                 db  49h ; I
.eh_frame:0000000000008FDA                 db  0Eh
.eh_frame:0000000000008FDB                 db    8
.eh_frame:0000000000008FDC                 db  14h
.eh_frame:0000000000008FDD                 db    0
.eh_frame:0000000000008FDE                 db    0
.eh_frame:0000000000008FDF                 db    0
.eh_frame:0000000000008FE0                 db  10h
.eh_frame:0000000000008FE1                 db  0Bh
.eh_frame:0000000000008FE2                 db    0
.eh_frame:0000000000008FE3                 db    0
.eh_frame:0000000000008FE4                 db  2Ch ; ,
.eh_frame:0000000000008FE5                 db 0D8h
.eh_frame:0000000000008FE6                 db 0FFh
.eh_frame:0000000000008FE7                 db 0FFh
.eh_frame:0000000000008FE8                 db  4Ah ; J
.eh_frame:0000000000008FE9                 db    0
.eh_frame:0000000000008FEA                 db    0
.eh_frame:0000000000008FEB                 db    0
.eh_frame:0000000000008FEC                 db    0
.eh_frame:0000000000008FED                 db    2
.eh_frame:0000000000008FEE                 db  45h ; E
.eh_frame:0000000000008FEF                 db  0Eh
.eh_frame:0000000000008FF0                 db  10h
.eh_frame:0000000000008FF1                 db    0
.eh_frame:0000000000008FF2                 db    0
.eh_frame:0000000000008FF3                 db    0
.eh_frame:0000000000008FF4                 db  18h
.eh_frame:0000000000008FF5                 db    0
.eh_frame:0000000000008FF6                 db    0
.eh_frame:0000000000008FF7                 db    0
.eh_frame:0000000000008FF8                 db  28h ; (
.eh_frame:0000000000008FF9                 db  0Bh
.eh_frame:0000000000008FFA                 db    0
.eh_frame:0000000000008FFB                 db    0
.eh_frame:0000000000008FFC                 db  64h ; d
.eh_frame:0000000000008FFD                 db 0D8h
.eh_frame:0000000000008FFE                 db 0FFh
.eh_frame:0000000000008FFF                 db 0FFh
.eh_frame:0000000000009000                 db  17h
.eh_frame:0000000000009001                 db    0
.eh_frame:0000000000009002                 db    0
.eh_frame:0000000000009003                 db    0
.eh_frame:0000000000009004                 db    0
.eh_frame:0000000000009005                 db  41h ; A
.eh_frame:0000000000009006                 db  0Eh
.eh_frame:0000000000009007                 db  10h
.eh_frame:0000000000009008                 db  83h
.eh_frame:0000000000009009                 db    2
.eh_frame:000000000000900A                 db  51h ; Q
.eh_frame:000000000000900B                 db  0Eh
.eh_frame:000000000000900C                 db    8
.eh_frame:000000000000900D                 db    0
.eh_frame:000000000000900E                 db    0
.eh_frame:000000000000900F                 db    0
.eh_frame:0000000000009010                 db  18h
.eh_frame:0000000000009011                 db    0
.eh_frame:0000000000009012                 db    0
.eh_frame:0000000000009013                 db    0
.eh_frame:0000000000009014                 db  44h ; D
.eh_frame:0000000000009015                 db  0Bh
.eh_frame:0000000000009016                 db    0
.eh_frame:0000000000009017                 db    0
.eh_frame:0000000000009018                 db  68h ; h
.eh_frame:0000000000009019                 db 0D8h
.eh_frame:000000000000901A                 db 0FFh
.eh_frame:000000000000901B                 db 0FFh
.eh_frame:000000000000901C                 db  2Eh ; .
.eh_frame:000000000000901D                 db    0
.eh_frame:000000000000901E                 db    0
.eh_frame:000000000000901F                 db    0
.eh_frame:0000000000009020                 db    0
.eh_frame:0000000000009021                 db  47h ; G
.eh_frame:0000000000009022                 db  0Eh
.eh_frame:0000000000009023                 db  10h
.eh_frame:0000000000009024                 db  61h ; a
.eh_frame:0000000000009025                 db  0Ah
.eh_frame:0000000000009026                 db  0Eh
.eh_frame:0000000000009027                 db    8
.eh_frame:0000000000009028                 db  41h ; A
.eh_frame:0000000000009029                 db  0Bh
.eh_frame:000000000000902A                 db    0
.eh_frame:000000000000902B                 db    0
.eh_frame:000000000000902C                 db  24h ; $
.eh_frame:000000000000902D                 db    0
.eh_frame:000000000000902E                 db    0
.eh_frame:000000000000902F                 db    0
.eh_frame:0000000000009030                 db  60h ; `
.eh_frame:0000000000009031                 db  0Bh
.eh_frame:0000000000009032                 db    0
.eh_frame:0000000000009033                 db    0
.eh_frame:0000000000009034                 db  7Ch ; |
.eh_frame:0000000000009035                 db 0D8h
.eh_frame:0000000000009036                 db 0FFh
.eh_frame:0000000000009037                 db 0FFh
.eh_frame:0000000000009038                 db  28h ; (
.eh_frame:0000000000009039                 db    0
.eh_frame:000000000000903A                 db    0
.eh_frame:000000000000903B                 db    0
.eh_frame:000000000000903C                 db    0
.eh_frame:000000000000903D                 db  41h ; A
.eh_frame:000000000000903E                 db  0Eh
.eh_frame:000000000000903F                 db  10h
.eh_frame:0000000000009040                 db  86h
.eh_frame:0000000000009041                 db    2
.eh_frame:0000000000009042                 db  41h ; A
.eh_frame:0000000000009043                 db  0Eh
.eh_frame:0000000000009044                 db  18h
.eh_frame:0000000000009045                 db  83h
.eh_frame:0000000000009046                 db    3
.eh_frame:0000000000009047                 db  4Dh ; M
.eh_frame:0000000000009048                 db  0Eh
.eh_frame:0000000000009049                 db  20h
.eh_frame:000000000000904A                 db  49h ; I
.eh_frame:000000000000904B                 db  0Eh
.eh_frame:000000000000904C                 db  18h
.eh_frame:000000000000904D                 db  47h ; G
.eh_frame:000000000000904E                 db  0Eh
.eh_frame:000000000000904F                 db  10h
.eh_frame:0000000000009050                 db  41h ; A
.eh_frame:0000000000009051                 db  0Eh
.eh_frame:0000000000009052                 db    8
.eh_frame:0000000000009053                 db    0
.eh_frame:0000000000009054                 db  18h
.eh_frame:0000000000009055                 db    0
.eh_frame:0000000000009056                 db    0
.eh_frame:0000000000009057                 db    0
.eh_frame:0000000000009058                 db  88h
.eh_frame:0000000000009059                 db  0Bh
.eh_frame:000000000000905A                 db    0
.eh_frame:000000000000905B                 db    0
.eh_frame:000000000000905C                 db  84h
.eh_frame:000000000000905D                 db 0D8h
.eh_frame:000000000000905E                 db 0FFh
.eh_frame:000000000000905F                 db 0FFh
.eh_frame:0000000000009060                 db  13h
.eh_frame:0000000000009061                 db    0
.eh_frame:0000000000009062                 db    0
.eh_frame:0000000000009063                 db    0
.eh_frame:0000000000009064                 db    0
.eh_frame:0000000000009065                 db  41h ; A
.eh_frame:0000000000009066                 db  0Eh
.eh_frame:0000000000009067                 db  10h
.eh_frame:0000000000009068                 db  83h
.eh_frame:0000000000009069                 db    2
.eh_frame:000000000000906A                 db  50h ; P
.eh_frame:000000000000906B                 db  0Eh
.eh_frame:000000000000906C                 db    8
.eh_frame:000000000000906D                 db    0
.eh_frame:000000000000906E                 db    0
.eh_frame:000000000000906F                 db    0
.eh_frame:0000000000009070                 db  14h
.eh_frame:0000000000009071                 db    0
.eh_frame:0000000000009072                 db    0
.eh_frame:0000000000009073                 db    0
.eh_frame:0000000000009074                 db 0A4h
.eh_frame:0000000000009075                 db  0Bh
.eh_frame:0000000000009076                 db    0
.eh_frame:0000000000009077                 db    0
.eh_frame:0000000000009078                 db  88h
.eh_frame:0000000000009079                 db 0D8h
.eh_frame:000000000000907A                 db 0FFh
.eh_frame:000000000000907B                 db 0FFh
.eh_frame:000000000000907C                 db  35h ; 5
.eh_frame:000000000000907D                 db    0
.eh_frame:000000000000907E                 db    0
.eh_frame:000000000000907F                 db    0
.eh_frame:0000000000009080                 db    0
.eh_frame:0000000000009081                 db  4Bh ; K
.eh_frame:0000000000009082                 db  0Eh
.eh_frame:0000000000009083                 db  10h
.eh_frame:0000000000009084                 db    0
.eh_frame:0000000000009085                 db    0
.eh_frame:0000000000009086                 db    0
.eh_frame:0000000000009087                 db    0
.eh_frame:0000000000009088                 db  34h ; 4
.eh_frame:0000000000009089                 db    0
.eh_frame:000000000000908A                 db    0
.eh_frame:000000000000908B                 db    0
.eh_frame:000000000000908C                 db 0BCh
.eh_frame:000000000000908D                 db  0Bh
.eh_frame:000000000000908E                 db    0
.eh_frame:000000000000908F                 db    0
.eh_frame:0000000000009090                 db 0B0h
.eh_frame:0000000000009091                 db 0D8h
.eh_frame:0000000000009092                 db 0FFh
.eh_frame:0000000000009093                 db 0FFh
.eh_frame:0000000000009094                 db  7Bh ; {
.eh_frame:0000000000009095                 db    0
.eh_frame:0000000000009096                 db    0
.eh_frame:0000000000009097                 db    0
.eh_frame:0000000000009098                 db    0
.eh_frame:0000000000009099                 db  42h ; B
.eh_frame:000000000000909A                 db  0Eh
.eh_frame:000000000000909B                 db  10h
.eh_frame:000000000000909C                 db  8Ch
.eh_frame:000000000000909D                 db    2
.eh_frame:000000000000909E                 db  41h ; A
.eh_frame:000000000000909F                 db  0Eh
.eh_frame:00000000000090A0                 db  18h
.eh_frame:00000000000090A1                 db  86h
.eh_frame:00000000000090A2                 db    3
.eh_frame:00000000000090A3                 db  41h ; A
.eh_frame:00000000000090A4                 db  0Eh
.eh_frame:00000000000090A5                 db  20h
.eh_frame:00000000000090A6                 db  83h
.eh_frame:00000000000090A7                 db    4
.eh_frame:00000000000090A8                 db  7Dh ; }
.eh_frame:00000000000090A9                 db  0Ah
.eh_frame:00000000000090AA                 db  0Eh
.eh_frame:00000000000090AB                 db  18h
.eh_frame:00000000000090AC                 db  41h ; A
.eh_frame:00000000000090AD                 db  0Eh
.eh_frame:00000000000090AE                 db  10h
.eh_frame:00000000000090AF                 db  42h ; B
.eh_frame:00000000000090B0                 db  0Eh
.eh_frame:00000000000090B1                 db    8
.eh_frame:00000000000090B2                 db  44h ; D
.eh_frame:00000000000090B3                 db  0Bh
.eh_frame:00000000000090B4                 db  60h ; `
.eh_frame:00000000000090B5                 db  0Ah
.eh_frame:00000000000090B6                 db  0Eh
.eh_frame:00000000000090B7                 db  18h
.eh_frame:00000000000090B8                 db  41h ; A
.eh_frame:00000000000090B9                 db  0Eh
.eh_frame:00000000000090BA                 db  10h
.eh_frame:00000000000090BB                 db  42h ; B
.eh_frame:00000000000090BC                 db  0Eh
.eh_frame:00000000000090BD                 db    8
.eh_frame:00000000000090BE                 db  45h ; E
.eh_frame:00000000000090BF                 db  0Bh
.eh_frame:00000000000090C0                 db  1Ch
.eh_frame:00000000000090C1                 db    0
.eh_frame:00000000000090C2                 db    0
.eh_frame:00000000000090C3                 db    0
.eh_frame:00000000000090C4                 db 0F4h
.eh_frame:00000000000090C5                 db  0Bh
.eh_frame:00000000000090C6                 db    0
.eh_frame:00000000000090C7                 db    0
.eh_frame:00000000000090C8                 db 0F8h
.eh_frame:00000000000090C9                 db 0D8h
.eh_frame:00000000000090CA                 db 0FFh
.eh_frame:00000000000090CB                 db 0FFh
.eh_frame:00000000000090CC                 db  40h ; @
.eh_frame:00000000000090CD                 db    0
.eh_frame:00000000000090CE                 db    0
.eh_frame:00000000000090CF                 db    0
.eh_frame:00000000000090D0                 db    0
.eh_frame:00000000000090D1                 db  44h ; D
.eh_frame:00000000000090D2                 db  0Eh
.eh_frame:00000000000090D3                 db  10h
.eh_frame:00000000000090D4                 db  83h
.eh_frame:00000000000090D5                 db    2
.eh_frame:00000000000090D6                 db  5Ah ; Z
.eh_frame:00000000000090D7                 db  0Ah
.eh_frame:00000000000090D8                 db  0Eh
.eh_frame:00000000000090D9                 db    8
.eh_frame:00000000000090DA                 db  4Ah ; J
.eh_frame:00000000000090DB                 db  0Bh
.eh_frame:00000000000090DC                 db  53h ; S
.eh_frame:00000000000090DD                 db  0Eh
.eh_frame:00000000000090DE                 db    8
.eh_frame:00000000000090DF                 db    0
.eh_frame:00000000000090E0                 db  2Ch ; ,
.eh_frame:00000000000090E1                 db    0
.eh_frame:00000000000090E2                 db    0
.eh_frame:00000000000090E3                 db    0
.eh_frame:00000000000090E4                 db  14h
.eh_frame:00000000000090E5                 db  0Ch
.eh_frame:00000000000090E6                 db    0
.eh_frame:00000000000090E7                 db    0
.eh_frame:00000000000090E8                 db  18h
.eh_frame:00000000000090E9                 db 0D9h
.eh_frame:00000000000090EA                 db 0FFh
.eh_frame:00000000000090EB                 db 0FFh
.eh_frame:00000000000090EC                 db  57h ; W
.eh_frame:00000000000090ED                 db    0
.eh_frame:00000000000090EE                 db    0
.eh_frame:00000000000090EF                 db    0
.eh_frame:00000000000090F0                 db    0
.eh_frame:00000000000090F1                 db  63h ; c
.eh_frame:00000000000090F2                 db  0Eh
.eh_frame:00000000000090F3                 db  10h
.eh_frame:00000000000090F4                 db  8Ch
.eh_frame:00000000000090F5                 db    2
.eh_frame:00000000000090F6                 db  41h ; A
.eh_frame:00000000000090F7                 db  0Eh
.eh_frame:00000000000090F8                 db  18h
.eh_frame:00000000000090F9                 db  86h
.eh_frame:00000000000090FA                 db    3
.eh_frame:00000000000090FB                 db  44h ; D
.eh_frame:00000000000090FC                 db  0Eh
.eh_frame:00000000000090FD                 db  20h
.eh_frame:00000000000090FE                 db  83h
.eh_frame:00000000000090FF                 db    4
.eh_frame:0000000000009100                 db  6Bh ; k
.eh_frame:0000000000009101                 db  0Eh
.eh_frame:0000000000009102                 db  18h
.eh_frame:0000000000009103                 db  41h ; A
.eh_frame:0000000000009104                 db  0Eh
.eh_frame:0000000000009105                 db  10h
.eh_frame:0000000000009106                 db  42h ; B
.eh_frame:0000000000009107                 db  0Eh
.eh_frame:0000000000009108                 db    8
.eh_frame:0000000000009109                 db    0
.eh_frame:000000000000910A                 db    0
.eh_frame:000000000000910B                 db    0
.eh_frame:000000000000910C                 db    0
.eh_frame:000000000000910D                 db    0
.eh_frame:000000000000910E                 db    0
.eh_frame:000000000000910F                 db    0
.eh_frame:0000000000009110                 db  3Ch ; <
.eh_frame:0000000000009111                 db    0
.eh_frame:0000000000009112                 db    0
.eh_frame:0000000000009113                 db    0
.eh_frame:0000000000009114                 db  44h ; D
.eh_frame:0000000000009115                 db  0Ch
.eh_frame:0000000000009116                 db    0
.eh_frame:0000000000009117                 db    0
.eh_frame:0000000000009118                 db  48h ; H
.eh_frame:0000000000009119                 db 0D9h
.eh_frame:000000000000911A                 db 0FFh
.eh_frame:000000000000911B                 db 0FFh
.eh_frame:000000000000911C                 db  83h
.eh_frame:000000000000911D                 db    0
.eh_frame:000000000000911E                 db    0
.eh_frame:000000000000911F                 db    0
.eh_frame:0000000000009120                 db    0
.eh_frame:0000000000009121                 db  42h ; B
.eh_frame:0000000000009122                 db  0Eh
.eh_frame:0000000000009123                 db  10h
.eh_frame:0000000000009124                 db  8Dh
.eh_frame:0000000000009125                 db    2
.eh_frame:0000000000009126                 db  42h ; B
.eh_frame:0000000000009127                 db  0Eh
.eh_frame:0000000000009128                 db  18h
.eh_frame:0000000000009129                 db  8Ch
.eh_frame:000000000000912A                 db    3
.eh_frame:000000000000912B                 db  44h ; D
.eh_frame:000000000000912C                 db  0Eh
.eh_frame:000000000000912D                 db  20h
.eh_frame:000000000000912E                 db  86h
.eh_frame:000000000000912F                 db    4
.eh_frame:0000000000009130                 db  41h ; A
.eh_frame:0000000000009131                 db  0Eh
.eh_frame:0000000000009132                 db  28h ; (
.eh_frame:0000000000009133                 db  83h
.eh_frame:0000000000009134                 db    5
.eh_frame:0000000000009135                 db  4Ah ; J
.eh_frame:0000000000009136                 db  0Eh
.eh_frame:0000000000009137                 db  40h ; @
.eh_frame:0000000000009138                 db    2
.eh_frame:0000000000009139                 db  64h ; d
.eh_frame:000000000000913A                 db  0Ah
.eh_frame:000000000000913B                 db  0Eh
.eh_frame:000000000000913C                 db  28h ; (
.eh_frame:000000000000913D                 db  41h ; A
.eh_frame:000000000000913E                 db  0Eh
.eh_frame:000000000000913F                 db  20h
.eh_frame:0000000000009140                 db  41h ; A
.eh_frame:0000000000009141                 db  0Eh
.eh_frame:0000000000009142                 db  18h
.eh_frame:0000000000009143                 db  42h ; B
.eh_frame:0000000000009144                 db  0Eh
.eh_frame:0000000000009145                 db  10h
.eh_frame:0000000000009146                 db  42h ; B
.eh_frame:0000000000009147                 db  0Eh
.eh_frame:0000000000009148                 db    8
.eh_frame:0000000000009149                 db  41h ; A
.eh_frame:000000000000914A                 db  0Bh
.eh_frame:000000000000914B                 db    0
.eh_frame:000000000000914C                 db    0
.eh_frame:000000000000914D                 db    0
.eh_frame:000000000000914E                 db    0
.eh_frame:000000000000914F                 db    0
.eh_frame:0000000000009150                 db  10h
.eh_frame:0000000000009151                 db    0
.eh_frame:0000000000009152                 db    0
.eh_frame:0000000000009153                 db    0
.eh_frame:0000000000009154                 db  84h
.eh_frame:0000000000009155                 db  0Ch
.eh_frame:0000000000009156                 db    0
.eh_frame:0000000000009157                 db    0
.eh_frame:0000000000009158                 db  98h
.eh_frame:0000000000009159                 db 0D9h
.eh_frame:000000000000915A                 db 0FFh
.eh_frame:000000000000915B                 db 0FFh
.eh_frame:000000000000915C                 db  3Fh ; ?
.eh_frame:000000000000915D                 db    0
.eh_frame:000000000000915E                 db    0
.eh_frame:000000000000915F                 db    0
.eh_frame:0000000000009160                 db    0
.eh_frame:0000000000009161                 db  4Bh ; K
.eh_frame:0000000000009162                 db  0Eh
.eh_frame:0000000000009163                 db  10h
.eh_frame:0000000000009164                 db  10h
.eh_frame:0000000000009165                 db    0
.eh_frame:0000000000009166                 db    0
.eh_frame:0000000000009167                 db    0
.eh_frame:0000000000009168                 db  98h
.eh_frame:0000000000009169                 db  0Ch
.eh_frame:000000000000916A                 db    0
.eh_frame:000000000000916B                 db    0
.eh_frame:000000000000916C                 db 0C4h
.eh_frame:000000000000916D                 db 0D9h
.eh_frame:000000000000916E                 db 0FFh
.eh_frame:000000000000916F                 db 0FFh
.eh_frame:0000000000009170                 db  16h
.eh_frame:0000000000009171                 db    0
.eh_frame:0000000000009172                 db    0
.eh_frame:0000000000009173                 db    0
.eh_frame:0000000000009174                 db    0
.eh_frame:0000000000009175                 db    0
.eh_frame:0000000000009176                 db    0
.eh_frame:0000000000009177                 db    0
.eh_frame:0000000000009178                 db  10h
.eh_frame:0000000000009179                 db    0
.eh_frame:000000000000917A                 db    0
.eh_frame:000000000000917B                 db    0
.eh_frame:000000000000917C                 db 0ACh
.eh_frame:000000000000917D                 db  0Ch
.eh_frame:000000000000917E                 db    0
.eh_frame:000000000000917F                 db    0
.eh_frame:0000000000009180                 db 0D0h
.eh_frame:0000000000009181                 db 0D9h
.eh_frame:0000000000009182                 db 0FFh
.eh_frame:0000000000009183                 db 0FFh
.eh_frame:0000000000009184                 db  16h
.eh_frame:0000000000009185                 db    0
.eh_frame:0000000000009186                 db    0
.eh_frame:0000000000009187                 db    0
.eh_frame:0000000000009188                 db    0
.eh_frame:0000000000009189                 db    0
.eh_frame:000000000000918A                 db    0
.eh_frame:000000000000918B                 db    0
.eh_frame:000000000000918C                 db  2Ch ; ,
.eh_frame:000000000000918D                 db    0
.eh_frame:000000000000918E                 db    0
.eh_frame:000000000000918F                 db    0
.eh_frame:0000000000009190                 db 0C0h
.eh_frame:0000000000009191                 db  0Ch
.eh_frame:0000000000009192                 db    0
.eh_frame:0000000000009193                 db    0
.eh_frame:0000000000009194                 db 0DCh
.eh_frame:0000000000009195                 db 0D9h
.eh_frame:0000000000009196                 db 0FFh
.eh_frame:0000000000009197                 db 0FFh
.eh_frame:0000000000009198                 db  83h
.eh_frame:0000000000009199                 db    0
.eh_frame:000000000000919A                 db    0
.eh_frame:000000000000919B                 db    0
.eh_frame:000000000000919C                 db    0
.eh_frame:000000000000919D                 db  45h ; E
.eh_frame:000000000000919E                 db  0Eh
.eh_frame:000000000000919F                 db  10h
.eh_frame:00000000000091A0                 db  8Ch
.eh_frame:00000000000091A1                 db    2
.eh_frame:00000000000091A2                 db  41h ; A
.eh_frame:00000000000091A3                 db  0Eh
.eh_frame:00000000000091A4                 db  18h
.eh_frame:00000000000091A5                 db  86h
.eh_frame:00000000000091A6                 db    3
.eh_frame:00000000000091A7                 db  41h ; A
.eh_frame:00000000000091A8                 db  0Eh
.eh_frame:00000000000091A9                 db  20h
.eh_frame:00000000000091AA                 db  83h
.eh_frame:00000000000091AB                 db    4
.eh_frame:00000000000091AC                 db    2
.eh_frame:00000000000091AD                 db  62h ; b
.eh_frame:00000000000091AE                 db  0Ah
.eh_frame:00000000000091AF                 db  0Eh
.eh_frame:00000000000091B0                 db  18h
.eh_frame:00000000000091B1                 db  41h ; A
.eh_frame:00000000000091B2                 db  0Eh
.eh_frame:00000000000091B3                 db  10h
.eh_frame:00000000000091B4                 db  42h ; B
.eh_frame:00000000000091B5                 db  0Eh
.eh_frame:00000000000091B6                 db    8
.eh_frame:00000000000091B7                 db  44h ; D
.eh_frame:00000000000091B8                 db  0Bh
.eh_frame:00000000000091B9                 db    0
.eh_frame:00000000000091BA                 db    0
.eh_frame:00000000000091BB                 db    0
.eh_frame:00000000000091BC                 db  10h
.eh_frame:00000000000091BD                 db    0
.eh_frame:00000000000091BE                 db    0
.eh_frame:00000000000091BF                 db    0
.eh_frame:00000000000091C0                 db 0F0h
.eh_frame:00000000000091C1                 db  0Ch
.eh_frame:00000000000091C2                 db    0
.eh_frame:00000000000091C3                 db    0
.eh_frame:00000000000091C4                 db  3Ch ; <
.eh_frame:00000000000091C5                 db 0DAh
.eh_frame:00000000000091C6                 db 0FFh
.eh_frame:00000000000091C7                 db 0FFh
.eh_frame:00000000000091C8                 db  11h
.eh_frame:00000000000091C9                 db    0
.eh_frame:00000000000091CA                 db    0
.eh_frame:00000000000091CB                 db    0
.eh_frame:00000000000091CC                 db    0
.eh_frame:00000000000091CD                 db    0
.eh_frame:00000000000091CE                 db    0
.eh_frame:00000000000091CF                 db    0
.eh_frame:00000000000091D0                 db  10h
.eh_frame:00000000000091D1                 db    0
.eh_frame:00000000000091D2                 db    0
.eh_frame:00000000000091D3                 db    0
.eh_frame:00000000000091D4                 db    4
.eh_frame:00000000000091D5                 db  0Dh
.eh_frame:00000000000091D6                 db    0
.eh_frame:00000000000091D7                 db    0
.eh_frame:00000000000091D8                 db  48h ; H
.eh_frame:00000000000091D9                 db 0DAh
.eh_frame:00000000000091DA                 db 0FFh
.eh_frame:00000000000091DB                 db 0FFh
.eh_frame:00000000000091DC                 db  15h
.eh_frame:00000000000091DD                 db    0
.eh_frame:00000000000091DE                 db    0
.eh_frame:00000000000091DF                 db    0
.eh_frame:00000000000091E0                 db    0
.eh_frame:00000000000091E1                 db    0
.eh_frame:00000000000091E2                 db    0
.eh_frame:00000000000091E3                 db    0
.eh_frame:00000000000091E4                 db  3Ch ; <
.eh_frame:00000000000091E5                 db    0
.eh_frame:00000000000091E6                 db    0
.eh_frame:00000000000091E7                 db    0
.eh_frame:00000000000091E8                 db  18h
.eh_frame:00000000000091E9                 db  0Dh
.eh_frame:00000000000091EA                 db    0
.eh_frame:00000000000091EB                 db    0
.eh_frame:00000000000091EC                 db  54h ; T
.eh_frame:00000000000091ED                 db 0DAh
.eh_frame:00000000000091EE                 db 0FFh
.eh_frame:00000000000091EF                 db 0FFh
.eh_frame:00000000000091F0                 db 0EBh
.eh_frame:00000000000091F1                 db    0
.eh_frame:00000000000091F2                 db    0
.eh_frame:00000000000091F3                 db    0
.eh_frame:00000000000091F4                 db    0
.eh_frame:00000000000091F5                 db  42h ; B
.eh_frame:00000000000091F6                 db  0Eh
.eh_frame:00000000000091F7                 db  10h
.eh_frame:00000000000091F8                 db  8Eh
.eh_frame:00000000000091F9                 db    2
.eh_frame:00000000000091FA                 db  42h ; B
.eh_frame:00000000000091FB                 db  0Eh
.eh_frame:00000000000091FC                 db  18h
.eh_frame:00000000000091FD                 db  8Dh
.eh_frame:00000000000091FE                 db    3
.eh_frame:00000000000091FF                 db  44h ; D
.eh_frame:0000000000009200                 db  0Eh
.eh_frame:0000000000009201                 db  20h
.eh_frame:0000000000009202                 db  8Ch
.eh_frame:0000000000009203                 db    4
.eh_frame:0000000000009204                 db  41h ; A
.eh_frame:0000000000009205                 db  0Eh
.eh_frame:0000000000009206                 db  28h ; (
.eh_frame:0000000000009207                 db  86h
.eh_frame:0000000000009208                 db    5
.eh_frame:0000000000009209                 db  41h ; A
.eh_frame:000000000000920A                 db  0Eh
.eh_frame:000000000000920B                 db  30h ; 0
.eh_frame:000000000000920C                 db  83h
.eh_frame:000000000000920D                 db    6
.eh_frame:000000000000920E                 db    2
.eh_frame:000000000000920F                 db 0BDh
.eh_frame:0000000000009210                 db  0Ah
.eh_frame:0000000000009211                 db  0Eh
.eh_frame:0000000000009212                 db  28h ; (
.eh_frame:0000000000009213                 db  41h ; A
.eh_frame:0000000000009214                 db  0Eh
.eh_frame:0000000000009215                 db  20h
.eh_frame:0000000000009216                 db  42h ; B
.eh_frame:0000000000009217                 db  0Eh
.eh_frame:0000000000009218                 db  18h
.eh_frame:0000000000009219                 db  42h ; B
.eh_frame:000000000000921A                 db  0Eh
.eh_frame:000000000000921B                 db  10h
.eh_frame:000000000000921C                 db  42h ; B
.eh_frame:000000000000921D                 db  0Eh
.eh_frame:000000000000921E                 db    8
.eh_frame:000000000000921F                 db  42h ; B
.eh_frame:0000000000009220                 db  0Bh
.eh_frame:0000000000009221                 db    0
.eh_frame:0000000000009222                 db    0
.eh_frame:0000000000009223                 db    0
.eh_frame:0000000000009224                 db  10h
.eh_frame:0000000000009225                 db    0
.eh_frame:0000000000009226                 db    0
.eh_frame:0000000000009227                 db    0
.eh_frame:0000000000009228                 db  58h ; X
.eh_frame:0000000000009229                 db  0Dh
.eh_frame:000000000000922A                 db    0
.eh_frame:000000000000922B                 db    0
.eh_frame:000000000000922C                 db    4
.eh_frame:000000000000922D                 db 0DBh
.eh_frame:000000000000922E                 db 0FFh
.eh_frame:000000000000922F                 db 0FFh
.eh_frame:0000000000009230                 db  38h ; 8
.eh_frame:0000000000009231                 db    0
.eh_frame:0000000000009232                 db    0
.eh_frame:0000000000009233                 db    0
.eh_frame:0000000000009234                 db    0
.eh_frame:0000000000009235                 db    0
.eh_frame:0000000000009236                 db    0
.eh_frame:0000000000009237                 db    0
.eh_frame:0000000000009238                 db  34h ; 4
.eh_frame:0000000000009239                 db    0
.eh_frame:000000000000923A                 db    0
.eh_frame:000000000000923B                 db    0
.eh_frame:000000000000923C                 db  6Ch ; l
.eh_frame:000000000000923D                 db  0Dh
.eh_frame:000000000000923E                 db    0
.eh_frame:000000000000923F                 db    0
.eh_frame:0000000000009240                 db  30h ; 0
.eh_frame:0000000000009241                 db 0DBh
.eh_frame:0000000000009242                 db 0FFh
.eh_frame:0000000000009243                 db 0FFh
.eh_frame:0000000000009244                 db  6Ah ; j
.eh_frame:0000000000009245                 db    0
.eh_frame:0000000000009246                 db    0
.eh_frame:0000000000009247                 db    0
.eh_frame:0000000000009248                 db    0
.eh_frame:0000000000009249                 db  42h ; B
.eh_frame:000000000000924A                 db  0Eh
.eh_frame:000000000000924B                 db  10h
.eh_frame:000000000000924C                 db  8Ch
.eh_frame:000000000000924D                 db    2
.eh_frame:000000000000924E                 db  41h ; A
.eh_frame:000000000000924F                 db  0Eh
.eh_frame:0000000000009250                 db  18h
.eh_frame:0000000000009251                 db  86h
.eh_frame:0000000000009252                 db    3
.eh_frame:0000000000009253                 db  44h ; D
.eh_frame:0000000000009254                 db  0Eh
.eh_frame:0000000000009255                 db  20h
.eh_frame:0000000000009256                 db  83h
.eh_frame:0000000000009257                 db    4
.eh_frame:0000000000009258                 db  7Ch ; |
.eh_frame:0000000000009259                 db  0Ah
.eh_frame:000000000000925A                 db  0Eh
.eh_frame:000000000000925B                 db  18h
.eh_frame:000000000000925C                 db  41h ; A
.eh_frame:000000000000925D                 db  0Eh
.eh_frame:000000000000925E                 db  10h
.eh_frame:000000000000925F                 db  42h ; B
.eh_frame:0000000000009260                 db  0Eh
.eh_frame:0000000000009261                 db    8
.eh_frame:0000000000009262                 db  4Ah ; J
.eh_frame:0000000000009263                 db  0Bh
.eh_frame:0000000000009264                 db  51h ; Q
.eh_frame:0000000000009265                 db  0Ah
.eh_frame:0000000000009266                 db  0Eh
.eh_frame:0000000000009267                 db  18h
.eh_frame:0000000000009268                 db  41h ; A
.eh_frame:0000000000009269                 db  0Eh
.eh_frame:000000000000926A                 db  10h
.eh_frame:000000000000926B                 db  42h ; B
.eh_frame:000000000000926C                 db  0Eh
.eh_frame:000000000000926D                 db    8
.eh_frame:000000000000926E                 db  41h ; A
.eh_frame:000000000000926F                 db  0Bh
.eh_frame:0000000000009270                 db  14h
.eh_frame:0000000000009271                 db    0
.eh_frame:0000000000009272                 db    0
.eh_frame:0000000000009273                 db    0
.eh_frame:0000000000009274                 db 0A4h
.eh_frame:0000000000009275                 db  0Dh
.eh_frame:0000000000009276                 db    0
.eh_frame:0000000000009277                 db    0
.eh_frame:0000000000009278                 db  68h ; h
.eh_frame:0000000000009279                 db 0DBh
.eh_frame:000000000000927A                 db 0FFh
.eh_frame:000000000000927B                 db 0FFh
.eh_frame:000000000000927C                 db  2Ah ; *
.eh_frame:000000000000927D                 db    0
.eh_frame:000000000000927E                 db    0
.eh_frame:000000000000927F                 db    0
.eh_frame:0000000000009280                 db    0
.eh_frame:0000000000009281                 db    0
.eh_frame:0000000000009282                 db    0
.eh_frame:0000000000009283                 db    0
.eh_frame:0000000000009284                 db    0
.eh_frame:0000000000009285                 db    0
.eh_frame:0000000000009286                 db    0
.eh_frame:0000000000009287                 db    0
.eh_frame:0000000000009288                 db  4Ch ; L
.eh_frame:0000000000009289                 db    0
.eh_frame:000000000000928A                 db    0
.eh_frame:000000000000928B                 db    0
.eh_frame:000000000000928C                 db 0BCh
.eh_frame:000000000000928D                 db  0Dh
.eh_frame:000000000000928E                 db    0
.eh_frame:000000000000928F                 db    0
.eh_frame:0000000000009290                 db  80h
.eh_frame:0000000000009291                 db 0DBh
.eh_frame:0000000000009292                 db 0FFh
.eh_frame:0000000000009293                 db 0FFh
.eh_frame:0000000000009294                 db  7Dh ; }
.eh_frame:0000000000009295                 db    0
.eh_frame:0000000000009296                 db    0
.eh_frame:0000000000009297                 db    0
.eh_frame:0000000000009298                 db    0
.eh_frame:0000000000009299                 db  42h ; B
.eh_frame:000000000000929A                 db  0Eh
.eh_frame:000000000000929B                 db  10h
.eh_frame:000000000000929C                 db  8Ch
.eh_frame:000000000000929D                 db    2
.eh_frame:000000000000929E                 db  41h ; A
.eh_frame:000000000000929F                 db  0Eh
.eh_frame:00000000000092A0                 db  18h
.eh_frame:00000000000092A1                 db  86h
.eh_frame:00000000000092A2                 db    3
.eh_frame:00000000000092A3                 db  44h ; D
.eh_frame:00000000000092A4                 db  0Eh
.eh_frame:00000000000092A5                 db  20h
.eh_frame:00000000000092A6                 db  83h
.eh_frame:00000000000092A7                 db    4
.eh_frame:00000000000092A8                 db  69h ; i
.eh_frame:00000000000092A9                 db  0Ah
.eh_frame:00000000000092AA                 db  0Eh
.eh_frame:00000000000092AB                 db  18h
.eh_frame:00000000000092AC                 db  41h ; A
.eh_frame:00000000000092AD                 db  0Eh
.eh_frame:00000000000092AE                 db  10h
.eh_frame:00000000000092AF                 db  42h ; B
.eh_frame:00000000000092B0                 db  0Eh
.eh_frame:00000000000092B1                 db    8
.eh_frame:00000000000092B2                 db  45h ; E
.eh_frame:00000000000092B3                 db  0Bh
.eh_frame:00000000000092B4                 db  55h ; U
.eh_frame:00000000000092B5                 db  0Ah
.eh_frame:00000000000092B6                 db  0Eh
.eh_frame:00000000000092B7                 db  18h
.eh_frame:00000000000092B8                 db  41h ; A
.eh_frame:00000000000092B9                 db  0Eh
.eh_frame:00000000000092BA                 db  10h
.eh_frame:00000000000092BB                 db  42h ; B
.eh_frame:00000000000092BC                 db  0Eh
.eh_frame:00000000000092BD                 db    8
.eh_frame:00000000000092BE                 db  48h ; H
.eh_frame:00000000000092BF                 db  0Bh
.eh_frame:00000000000092C0                 db  41h ; A
.eh_frame:00000000000092C1                 db  0Ah
.eh_frame:00000000000092C2                 db  0Eh
.eh_frame:00000000000092C3                 db  18h
.eh_frame:00000000000092C4                 db  46h ; F
.eh_frame:00000000000092C5                 db  0Eh
.eh_frame:00000000000092C6                 db  10h
.eh_frame:00000000000092C7                 db  42h ; B
.eh_frame:00000000000092C8                 db  0Eh
.eh_frame:00000000000092C9                 db    8
.eh_frame:00000000000092CA                 db  47h ; G
.eh_frame:00000000000092CB                 db  0Bh
.eh_frame:00000000000092CC                 db  49h ; I
.eh_frame:00000000000092CD                 db  0Eh
.eh_frame:00000000000092CE                 db  18h
.eh_frame:00000000000092CF                 db  41h ; A
.eh_frame:00000000000092D0                 db  0Eh
.eh_frame:00000000000092D1                 db  10h
.eh_frame:00000000000092D2                 db  42h ; B
.eh_frame:00000000000092D3                 db  0Eh
.eh_frame:00000000000092D4                 db    8
.eh_frame:00000000000092D5                 db    0
.eh_frame:00000000000092D6                 db    0
.eh_frame:00000000000092D7                 db    0
.eh_frame:00000000000092D8                 db  1Ch
.eh_frame:00000000000092D9                 db    0
.eh_frame:00000000000092DA                 db    0
.eh_frame:00000000000092DB                 db    0
.eh_frame:00000000000092DC                 db  0Ch
.eh_frame:00000000000092DD                 db  0Eh
.eh_frame:00000000000092DE                 db    0
.eh_frame:00000000000092DF                 db    0
.eh_frame:00000000000092E0                 db 0B0h
.eh_frame:00000000000092E1                 db 0DBh
.eh_frame:00000000000092E2                 db 0FFh
.eh_frame:00000000000092E3                 db 0FFh
.eh_frame:00000000000092E4                 db  60h ; `
.eh_frame:00000000000092E5                 db    0
.eh_frame:00000000000092E6                 db    0
.eh_frame:00000000000092E7                 db    0
.eh_frame:00000000000092E8                 db    0
.eh_frame:00000000000092E9                 db  44h ; D
.eh_frame:00000000000092EA                 db  0Eh
.eh_frame:00000000000092EB                 db  10h
.eh_frame:00000000000092EC                 db  75h ; u
.eh_frame:00000000000092ED                 db  0Ah
.eh_frame:00000000000092EE                 db  0Eh
.eh_frame:00000000000092EF                 db    8
.eh_frame:00000000000092F0                 db  47h ; G
.eh_frame:00000000000092F1                 db  0Bh
.eh_frame:00000000000092F2                 db  5Fh ; _
.eh_frame:00000000000092F3                 db  0Eh
.eh_frame:00000000000092F4                 db    8
.eh_frame:00000000000092F5                 db    0
.eh_frame:00000000000092F6                 db    0
.eh_frame:00000000000092F7                 db    0
.eh_frame:00000000000092F8                 db  1Ch
.eh_frame:00000000000092F9                 db    0
.eh_frame:00000000000092FA                 db    0
.eh_frame:00000000000092FB                 db    0
.eh_frame:00000000000092FC                 db  2Ch ; ,
.eh_frame:00000000000092FD                 db  0Eh
.eh_frame:00000000000092FE                 db    0
.eh_frame:00000000000092FF                 db    0
.eh_frame:0000000000009300                 db 0F0h
.eh_frame:0000000000009301                 db 0DBh
.eh_frame:0000000000009302                 db 0FFh
.eh_frame:0000000000009303                 db 0FFh
.eh_frame:0000000000009304                 db  3Ch ; <
.eh_frame:0000000000009305                 db    0
.eh_frame:0000000000009306                 db    0
.eh_frame:0000000000009307                 db    0
.eh_frame:0000000000009308                 db    0
.eh_frame:0000000000009309                 db  44h ; D
.eh_frame:000000000000930A                 db  0Eh
.eh_frame:000000000000930B                 db  10h
.eh_frame:000000000000930C                 db  61h ; a
.eh_frame:000000000000930D                 db  0Ah
.eh_frame:000000000000930E                 db  0Eh
.eh_frame:000000000000930F                 db    8
.eh_frame:0000000000009310                 db  4Bh ; K
.eh_frame:0000000000009311                 db  0Bh
.eh_frame:0000000000009312                 db  4Bh ; K
.eh_frame:0000000000009313                 db  0Eh
.eh_frame:0000000000009314                 db    8
.eh_frame:0000000000009315                 db    0
.eh_frame:0000000000009316                 db    0
.eh_frame:0000000000009317                 db    0
.eh_frame:0000000000009318                 db  44h ; D
.eh_frame:0000000000009319                 db    0
.eh_frame:000000000000931A                 db    0
.eh_frame:000000000000931B                 db    0
.eh_frame:000000000000931C                 db  4Ch ; L
.eh_frame:000000000000931D                 db  0Eh
.eh_frame:000000000000931E                 db    0
.eh_frame:000000000000931F                 db    0
.eh_frame:0000000000009320                 db  10h
.eh_frame:0000000000009321                 db 0DCh
.eh_frame:0000000000009322                 db 0FFh
.eh_frame:0000000000009323                 db 0FFh
.eh_frame:0000000000009324                 db  65h ; e
.eh_frame:0000000000009325                 db    0
.eh_frame:0000000000009326                 db    0
.eh_frame:0000000000009327                 db    0
.eh_frame:0000000000009328                 db    0
.eh_frame:0000000000009329                 db  42h ; B
.eh_frame:000000000000932A                 db  0Eh
.eh_frame:000000000000932B                 db  10h
.eh_frame:000000000000932C                 db  8Fh
.eh_frame:000000000000932D                 db    2
.eh_frame:000000000000932E                 db  42h ; B
.eh_frame:000000000000932F                 db  0Eh
.eh_frame:0000000000009330                 db  18h
.eh_frame:0000000000009331                 db  8Eh
.eh_frame:0000000000009332                 db    3
.eh_frame:0000000000009333                 db  45h ; E
.eh_frame:0000000000009334                 db  0Eh
.eh_frame:0000000000009335                 db  20h
.eh_frame:0000000000009336                 db  8Dh
.eh_frame:0000000000009337                 db    4
.eh_frame:0000000000009338                 db  42h ; B
.eh_frame:0000000000009339                 db  0Eh
.eh_frame:000000000000933A                 db  28h ; (
.eh_frame:000000000000933B                 db  8Ch
.eh_frame:000000000000933C                 db    5
.eh_frame:000000000000933D                 db  48h ; H
.eh_frame:000000000000933E                 db  0Eh
.eh_frame:000000000000933F                 db  30h ; 0
.eh_frame:0000000000009340                 db  86h
.eh_frame:0000000000009341                 db    6
.eh_frame:0000000000009342                 db  48h ; H
.eh_frame:0000000000009343                 db  0Eh
.eh_frame:0000000000009344                 db  38h ; 8
.eh_frame:0000000000009345                 db  83h
.eh_frame:0000000000009346                 db    7
.eh_frame:0000000000009347                 db  4Dh ; M
.eh_frame:0000000000009348                 db  0Eh
.eh_frame:0000000000009349                 db  40h ; @
.eh_frame:000000000000934A                 db  72h ; r
.eh_frame:000000000000934B                 db  0Eh
.eh_frame:000000000000934C                 db  38h ; 8
.eh_frame:000000000000934D                 db  41h ; A
.eh_frame:000000000000934E                 db  0Eh
.eh_frame:000000000000934F                 db  30h ; 0
.eh_frame:0000000000009350                 db  41h ; A
.eh_frame:0000000000009351                 db  0Eh
.eh_frame:0000000000009352                 db  28h ; (
.eh_frame:0000000000009353                 db  42h ; B
.eh_frame:0000000000009354                 db  0Eh
.eh_frame:0000000000009355                 db  20h
.eh_frame:0000000000009356                 db  42h ; B
.eh_frame:0000000000009357                 db  0Eh
.eh_frame:0000000000009358                 db  18h
.eh_frame:0000000000009359                 db  42h ; B
.eh_frame:000000000000935A                 db  0Eh
.eh_frame:000000000000935B                 db  10h
.eh_frame:000000000000935C                 db  42h ; B
.eh_frame:000000000000935D                 db  0Eh
.eh_frame:000000000000935E                 db    8
.eh_frame:000000000000935F                 db    0
.eh_frame:0000000000009360                 db  14h
.eh_frame:0000000000009361                 db    0
.eh_frame:0000000000009362                 db    0
.eh_frame:0000000000009363                 db    0
.eh_frame:0000000000009364                 db  94h
.eh_frame:0000000000009365                 db  0Eh
.eh_frame:0000000000009366                 db    0
.eh_frame:0000000000009367                 db    0
.eh_frame:0000000000009368                 db  38h ; 8
.eh_frame:0000000000009369                 db 0DCh
.eh_frame:000000000000936A                 db 0FFh
.eh_frame:000000000000936B                 db 0FFh
.eh_frame:000000000000936C                 db    2
.eh_frame:000000000000936D                 db    0
.eh_frame:000000000000936E                 db    0
.eh_frame:000000000000936F                 db    0
.eh_frame:0000000000009370                 db    0
.eh_frame:0000000000009371                 db    0
.eh_frame:0000000000009372                 db    0
.eh_frame:0000000000009373                 db    0
.eh_frame:0000000000009374                 db    0
.eh_frame:0000000000009375                 db    0
.eh_frame:0000000000009376                 db    0
.eh_frame:0000000000009377                 db    0
.eh_frame:0000000000009378                 db  10h
.eh_frame:0000000000009379                 db    0
.eh_frame:000000000000937A                 db    0
.eh_frame:000000000000937B                 db    0
.eh_frame:000000000000937C                 db 0ACh
.eh_frame:000000000000937D                 db  0Eh
.eh_frame:000000000000937E                 db    0
.eh_frame:000000000000937F                 db    0
.eh_frame:0000000000009380                 db  30h ; 0
.eh_frame:0000000000009381                 db 0DCh
.eh_frame:0000000000009382                 db 0FFh
.eh_frame:0000000000009383                 db 0FFh
.eh_frame:0000000000009384                 db  0Eh
.eh_frame:0000000000009385                 db    0
.eh_frame:0000000000009386                 db    0
.eh_frame:0000000000009387                 db    0
.eh_frame:0000000000009388                 db    0
.eh_frame:0000000000009389                 db    0
.eh_frame:000000000000938A                 db    0
.eh_frame:000000000000938B                 db    0
.eh_frame:000000000000938C __FRAME_END__   db    0
.eh_frame:000000000000938D                 db    0
.eh_frame:000000000000938E                 db    0
.eh_frame:000000000000938F                 db    0
.eh_frame:000000000000938F _eh_frame       ends
.eh_frame:000000000000938F
.init_array:0000000000209A30 ; ELF Initialization Function Table
.init_array:0000000000209A30 ; ===========================================================================
.init_array:0000000000209A30
.init_array:0000000000209A30 ; Segment type: Pure data
.init_array:0000000000209A30 ; Segment permissions: Read/Write
.init_array:0000000000209A30 _init_array     segment qword public 'DATA' use64
.init_array:0000000000209A30                 assume cs:_init_array
.init_array:0000000000209A30                 ;org 209A30h
.init_array:0000000000209A30 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000209A30                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000209A30                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000209A30 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000209A30
.fini_array:0000000000209A38 ; ELF Termination Function Table
.fini_array:0000000000209A38 ; ===========================================================================
.fini_array:0000000000209A38
.fini_array:0000000000209A38 ; Segment type: Pure data
.fini_array:0000000000209A38 ; Segment permissions: Read/Write
.fini_array:0000000000209A38 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000209A38                 assume cs:_fini_array
.fini_array:0000000000209A38                 ;org 209A38h
.fini_array:0000000000209A38 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000209A38                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000209A38 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000209A38
.data.rel.ro:0000000000209A40 ; ===========================================================================
.data.rel.ro:0000000000209A40
.data.rel.ro:0000000000209A40 ; Segment type: Pure data
.data.rel.ro:0000000000209A40 ; Segment permissions: Read/Write
.data.rel.ro:0000000000209A40 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000209A40                 assume cs:_data_rel_ro
.data.rel.ro:0000000000209A40                 ;org 209A40h
.data.rel.ro:0000000000209A40 ; struct option longopts
.data.rel.ro:0000000000209A40 longopts        dq offset aBytes        ; name
.data.rel.ro:0000000000209A40                                         ; DATA XREF: main+F↑o
.data.rel.ro:0000000000209A40                 dd 0                    ; has_arg ; "bytes"
.data.rel.ro:0000000000209A40                 db 4 dup(0)
.data.rel.ro:0000000000209A40                 dq 0                    ; flag
.data.rel.ro:0000000000209A40                 dd 63h                  ; val
.data.rel.ro:0000000000209A40                 db 4 dup(0)
.data.rel.ro:0000000000209A60                 dq offset aChars        ; "chars"
.data.rel.ro:0000000000209A68                 db    0
.data.rel.ro:0000000000209A69                 db    0
.data.rel.ro:0000000000209A6A                 db    0
.data.rel.ro:0000000000209A6B                 db    0
.data.rel.ro:0000000000209A6C                 db    0
.data.rel.ro:0000000000209A6D                 db    0
.data.rel.ro:0000000000209A6E                 db    0
.data.rel.ro:0000000000209A6F                 db    0
.data.rel.ro:0000000000209A70                 db    0
.data.rel.ro:0000000000209A71                 db    0
.data.rel.ro:0000000000209A72                 db    0
.data.rel.ro:0000000000209A73                 db    0
.data.rel.ro:0000000000209A74                 db    0
.data.rel.ro:0000000000209A75                 db    0
.data.rel.ro:0000000000209A76                 db    0
.data.rel.ro:0000000000209A77                 db    0
.data.rel.ro:0000000000209A78                 db  6Dh ; m
.data.rel.ro:0000000000209A79                 db    0
.data.rel.ro:0000000000209A7A                 db    0
.data.rel.ro:0000000000209A7B                 db    0
.data.rel.ro:0000000000209A7C                 db    0
.data.rel.ro:0000000000209A7D                 db    0
.data.rel.ro:0000000000209A7E                 db    0
.data.rel.ro:0000000000209A7F                 db    0
.data.rel.ro:0000000000209A80                 dq offset aLines        ; "lines"
.data.rel.ro:0000000000209A88                 db    0
.data.rel.ro:0000000000209A89                 db    0
.data.rel.ro:0000000000209A8A                 db    0
.data.rel.ro:0000000000209A8B                 db    0
.data.rel.ro:0000000000209A8C                 db    0
.data.rel.ro:0000000000209A8D                 db    0
.data.rel.ro:0000000000209A8E                 db    0
.data.rel.ro:0000000000209A8F                 db    0
.data.rel.ro:0000000000209A90                 db    0
.data.rel.ro:0000000000209A91                 db    0
.data.rel.ro:0000000000209A92                 db    0
.data.rel.ro:0000000000209A93                 db    0
.data.rel.ro:0000000000209A94                 db    0
.data.rel.ro:0000000000209A95                 db    0
.data.rel.ro:0000000000209A96                 db    0
.data.rel.ro:0000000000209A97                 db    0
.data.rel.ro:0000000000209A98                 db  6Ch ; l
.data.rel.ro:0000000000209A99                 db    0
.data.rel.ro:0000000000209A9A                 db    0
.data.rel.ro:0000000000209A9B                 db    0
.data.rel.ro:0000000000209A9C                 db    0
.data.rel.ro:0000000000209A9D                 db    0
.data.rel.ro:0000000000209A9E                 db    0
.data.rel.ro:0000000000209A9F                 db    0
.data.rel.ro:0000000000209AA0                 dq offset aWords        ; "words"
.data.rel.ro:0000000000209AA8                 db    0
.data.rel.ro:0000000000209AA9                 db    0
.data.rel.ro:0000000000209AAA                 db    0
.data.rel.ro:0000000000209AAB                 db    0
.data.rel.ro:0000000000209AAC                 db    0
.data.rel.ro:0000000000209AAD                 db    0
.data.rel.ro:0000000000209AAE                 db    0
.data.rel.ro:0000000000209AAF                 db    0
.data.rel.ro:0000000000209AB0                 db    0
.data.rel.ro:0000000000209AB1                 db    0
.data.rel.ro:0000000000209AB2                 db    0
.data.rel.ro:0000000000209AB3                 db    0
.data.rel.ro:0000000000209AB4                 db    0
.data.rel.ro:0000000000209AB5                 db    0
.data.rel.ro:0000000000209AB6                 db    0
.data.rel.ro:0000000000209AB7                 db    0
.data.rel.ro:0000000000209AB8                 db  77h ; w
.data.rel.ro:0000000000209AB9                 db    0
.data.rel.ro:0000000000209ABA                 db    0
.data.rel.ro:0000000000209ABB                 db    0
.data.rel.ro:0000000000209ABC                 db    0
.data.rel.ro:0000000000209ABD                 db    0
.data.rel.ro:0000000000209ABE                 db    0
.data.rel.ro:0000000000209ABF                 db    0
.data.rel.ro:0000000000209AC0                 dq offset aFiles0From   ; "files0-from"
.data.rel.ro:0000000000209AC8                 db    1
.data.rel.ro:0000000000209AC9                 db    0
.data.rel.ro:0000000000209ACA                 db    0
.data.rel.ro:0000000000209ACB                 db    0
.data.rel.ro:0000000000209ACC                 db    0
.data.rel.ro:0000000000209ACD                 db    0
.data.rel.ro:0000000000209ACE                 db    0
.data.rel.ro:0000000000209ACF                 db    0
.data.rel.ro:0000000000209AD0                 db    0
.data.rel.ro:0000000000209AD1                 db    0
.data.rel.ro:0000000000209AD2                 db    0
.data.rel.ro:0000000000209AD3                 db    0
.data.rel.ro:0000000000209AD4                 db    0
.data.rel.ro:0000000000209AD5                 db    0
.data.rel.ro:0000000000209AD6                 db    0
.data.rel.ro:0000000000209AD7                 db    0
.data.rel.ro:0000000000209AD8                 db  80h
.data.rel.ro:0000000000209AD9                 db    0
.data.rel.ro:0000000000209ADA                 db    0
.data.rel.ro:0000000000209ADB                 db    0
.data.rel.ro:0000000000209ADC                 db    0
.data.rel.ro:0000000000209ADD                 db    0
.data.rel.ro:0000000000209ADE                 db    0
.data.rel.ro:0000000000209ADF                 db    0
.data.rel.ro:0000000000209AE0                 dq offset aMaxLineLength ; "max-line-length"
.data.rel.ro:0000000000209AE8                 db    0
.data.rel.ro:0000000000209AE9                 db    0
.data.rel.ro:0000000000209AEA                 db    0
.data.rel.ro:0000000000209AEB                 db    0
.data.rel.ro:0000000000209AEC                 db    0
.data.rel.ro:0000000000209AED                 db    0
.data.rel.ro:0000000000209AEE                 db    0
.data.rel.ro:0000000000209AEF                 db    0
.data.rel.ro:0000000000209AF0                 db    0
.data.rel.ro:0000000000209AF1                 db    0
.data.rel.ro:0000000000209AF2                 db    0
.data.rel.ro:0000000000209AF3                 db    0
.data.rel.ro:0000000000209AF4                 db    0
.data.rel.ro:0000000000209AF5                 db    0
.data.rel.ro:0000000000209AF6                 db    0
.data.rel.ro:0000000000209AF7                 db    0
.data.rel.ro:0000000000209AF8                 db  4Ch ; L
.data.rel.ro:0000000000209AF9                 db    0
.data.rel.ro:0000000000209AFA                 db    0
.data.rel.ro:0000000000209AFB                 db    0
.data.rel.ro:0000000000209AFC                 db    0
.data.rel.ro:0000000000209AFD                 db    0
.data.rel.ro:0000000000209AFE                 db    0
.data.rel.ro:0000000000209AFF                 db    0
.data.rel.ro:0000000000209B00                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000209B08                 db    0
.data.rel.ro:0000000000209B09                 db    0
.data.rel.ro:0000000000209B0A                 db    0
.data.rel.ro:0000000000209B0B                 db    0
.data.rel.ro:0000000000209B0C                 db    0
.data.rel.ro:0000000000209B0D                 db    0
.data.rel.ro:0000000000209B0E                 db    0
.data.rel.ro:0000000000209B0F                 db    0
.data.rel.ro:0000000000209B10                 db    0
.data.rel.ro:0000000000209B11                 db    0
.data.rel.ro:0000000000209B12                 db    0
.data.rel.ro:0000000000209B13                 db    0
.data.rel.ro:0000000000209B14                 db    0
.data.rel.ro:0000000000209B15                 db    0
.data.rel.ro:0000000000209B16                 db    0
.data.rel.ro:0000000000209B17                 db    0
.data.rel.ro:0000000000209B18                 db  7Eh ; ~
.data.rel.ro:0000000000209B19                 db 0FFh
.data.rel.ro:0000000000209B1A                 db 0FFh
.data.rel.ro:0000000000209B1B                 db 0FFh
.data.rel.ro:0000000000209B1C                 db    0
.data.rel.ro:0000000000209B1D                 db    0
.data.rel.ro:0000000000209B1E                 db    0
.data.rel.ro:0000000000209B1F                 db    0
.data.rel.ro:0000000000209B20                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000209B28                 db    0
.data.rel.ro:0000000000209B29                 db    0
.data.rel.ro:0000000000209B2A                 db    0
.data.rel.ro:0000000000209B2B                 db    0
.data.rel.ro:0000000000209B2C                 db    0
.data.rel.ro:0000000000209B2D                 db    0
.data.rel.ro:0000000000209B2E                 db    0
.data.rel.ro:0000000000209B2F                 db    0
.data.rel.ro:0000000000209B30                 db    0
.data.rel.ro:0000000000209B31                 db    0
.data.rel.ro:0000000000209B32                 db    0
.data.rel.ro:0000000000209B33                 db    0
.data.rel.ro:0000000000209B34                 db    0
.data.rel.ro:0000000000209B35                 db    0
.data.rel.ro:0000000000209B36                 db    0
.data.rel.ro:0000000000209B37                 db    0
.data.rel.ro:0000000000209B38                 db  7Dh ; }
.data.rel.ro:0000000000209B39                 db 0FFh
.data.rel.ro:0000000000209B3A                 db 0FFh
.data.rel.ro:0000000000209B3B                 db 0FFh
.data.rel.ro:0000000000209B3C                 db    0
.data.rel.ro:0000000000209B3D                 db    0
.data.rel.ro:0000000000209B3E                 db    0
.data.rel.ro:0000000000209B3F                 db    0
.data.rel.ro:0000000000209B40                 db    0
.data.rel.ro:0000000000209B41                 db    0
.data.rel.ro:0000000000209B42                 db    0
.data.rel.ro:0000000000209B43                 db    0
.data.rel.ro:0000000000209B44                 db    0
.data.rel.ro:0000000000209B45                 db    0
.data.rel.ro:0000000000209B46                 db    0
.data.rel.ro:0000000000209B47                 db    0
.data.rel.ro:0000000000209B48                 db    0
.data.rel.ro:0000000000209B49                 db    0
.data.rel.ro:0000000000209B4A                 db    0
.data.rel.ro:0000000000209B4B                 db    0
.data.rel.ro:0000000000209B4C                 db    0
.data.rel.ro:0000000000209B4D                 db    0
.data.rel.ro:0000000000209B4E                 db    0
.data.rel.ro:0000000000209B4F                 db    0
.data.rel.ro:0000000000209B50                 db    0
.data.rel.ro:0000000000209B51                 db    0
.data.rel.ro:0000000000209B52                 db    0
.data.rel.ro:0000000000209B53                 db    0
.data.rel.ro:0000000000209B54                 db    0
.data.rel.ro:0000000000209B55                 db    0
.data.rel.ro:0000000000209B56                 db    0
.data.rel.ro:0000000000209B57                 db    0
.data.rel.ro:0000000000209B58                 db    0
.data.rel.ro:0000000000209B59                 db    0
.data.rel.ro:0000000000209B5A                 db    0
.data.rel.ro:0000000000209B5B                 db    0
.data.rel.ro:0000000000209B5C                 db    0
.data.rel.ro:0000000000209B5D                 db    0
.data.rel.ro:0000000000209B5E                 db    0
.data.rel.ro:0000000000209B5F                 db    0
.data.rel.ro:0000000000209B60                 public quoting_style_args
.data.rel.ro:0000000000209B60 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000209B68                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000209B70                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000209B78                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000209B80                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000209B88                 dq offset file+19h      ; "c"
.data.rel.ro:0000000000209B90                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000209B98                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000209BA0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000209BA8                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000209BB0                 db    0
.data.rel.ro:0000000000209BB1                 db    0
.data.rel.ro:0000000000209BB2                 db    0
.data.rel.ro:0000000000209BB3                 db    0
.data.rel.ro:0000000000209BB4                 db    0
.data.rel.ro:0000000000209BB5                 db    0
.data.rel.ro:0000000000209BB6                 db    0
.data.rel.ro:0000000000209BB7                 db    0
.data.rel.ro:0000000000209BB7 _data_rel_ro    ends
.data.rel.ro:0000000000209BB7
LOAD:0000000000209BB8 ; ELF Dynamic Information
LOAD:0000000000209BB8 ; ===========================================================================
LOAD:0000000000209BB8
LOAD:0000000000209BB8 ; Segment type: Pure data
LOAD:0000000000209BB8 ; Segment permissions: Read/Write
LOAD:0000000000209BB8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209BB8                 assume cs:LOAD
LOAD:0000000000209BB8                 ;org 209BB8h
LOAD:0000000000209BB8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000209BB8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000209BB8                                         ; DT_NEEDED libc.so.6
LOAD:0000000000209BC8                 Elf64_Dyn <0Ch, 19A0h>  ; DT_INIT
LOAD:0000000000209BD8                 Elf64_Dyn <0Dh, 6FC0h>  ; DT_FINI
LOAD:0000000000209BE8                 Elf64_Dyn <19h, 209A30h> ; DT_INIT_ARRAY
LOAD:0000000000209BF8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000209C08                 Elf64_Dyn <1Ah, 209A38h> ; DT_FINI_ARRAY
LOAD:0000000000209C18                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000209C28                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000209C38                 Elf64_Dyn <5, 0B30h>    ; DT_STRTAB
LOAD:0000000000209C48                 Elf64_Dyn <6, 308h>     ; DT_SYMTAB
LOAD:0000000000209C58                 Elf64_Dyn <0Ah, 3CDh>   ; DT_STRSZ
LOAD:0000000000209C68                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000209C78                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000209C88                 Elf64_Dyn <3, 209DA8h>  ; DT_PLTGOT
LOAD:0000000000209C98                 Elf64_Dyn <2, 5E8h>     ; DT_PLTRELSZ
LOAD:0000000000209CA8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000209CB8                 Elf64_Dyn <17h, 13B8h>  ; DT_JMPREL
LOAD:0000000000209CC8                 Elf64_Dyn <7, 1010h>    ; DT_RELA
LOAD:0000000000209CD8                 Elf64_Dyn <8, 3A8h>     ; DT_RELASZ
LOAD:0000000000209CE8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000209CF8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000209D08                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000209D18                 Elf64_Dyn <6FFFFFFEh, 0FB0h> ; DT_VERNEED
LOAD:0000000000209D28                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000209D38                 Elf64_Dyn <6FFFFFF0h, 0EFEh> ; DT_VERSYM
LOAD:0000000000209D48                 Elf64_Dyn <6FFFFFF9h, 19h> ; DT_RELACOUNT
LOAD:0000000000209D58                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000209D68                 db    0
LOAD:0000000000209D69                 db    0
LOAD:0000000000209D6A                 db    0
LOAD:0000000000209D6B                 db    0
LOAD:0000000000209D6C                 db    0
LOAD:0000000000209D6D                 db    0
LOAD:0000000000209D6E                 db    0
LOAD:0000000000209D6F                 db    0
LOAD:0000000000209D70                 db    0
LOAD:0000000000209D71                 db    0
LOAD:0000000000209D72                 db    0
LOAD:0000000000209D73                 db    0
LOAD:0000000000209D74                 db    0
LOAD:0000000000209D75                 db    0
LOAD:0000000000209D76                 db    0
LOAD:0000000000209D77                 db    0
LOAD:0000000000209D78                 db    0
LOAD:0000000000209D79                 db    0
LOAD:0000000000209D7A                 db    0
LOAD:0000000000209D7B                 db    0
LOAD:0000000000209D7C                 db    0
LOAD:0000000000209D7D                 db    0
LOAD:0000000000209D7E                 db    0
LOAD:0000000000209D7F                 db    0
LOAD:0000000000209D80                 db    0
LOAD:0000000000209D81                 db    0
LOAD:0000000000209D82                 db    0
LOAD:0000000000209D83                 db    0
LOAD:0000000000209D84                 db    0
LOAD:0000000000209D85                 db    0
LOAD:0000000000209D86                 db    0
LOAD:0000000000209D87                 db    0
LOAD:0000000000209D88                 db    0
LOAD:0000000000209D89                 db    0
LOAD:0000000000209D8A                 db    0
LOAD:0000000000209D8B                 db    0
LOAD:0000000000209D8C                 db    0
LOAD:0000000000209D8D                 db    0
LOAD:0000000000209D8E                 db    0
LOAD:0000000000209D8F                 db    0
LOAD:0000000000209D90                 db    0
LOAD:0000000000209D91                 db    0
LOAD:0000000000209D92                 db    0
LOAD:0000000000209D93                 db    0
LOAD:0000000000209D94                 db    0
LOAD:0000000000209D95                 db    0
LOAD:0000000000209D96                 db    0
LOAD:0000000000209D97                 db    0
LOAD:0000000000209D98                 db    0
LOAD:0000000000209D99                 db    0
LOAD:0000000000209D9A                 db    0
LOAD:0000000000209D9B                 db    0
LOAD:0000000000209D9C                 db    0
LOAD:0000000000209D9D                 db    0
LOAD:0000000000209D9E                 db    0
LOAD:0000000000209D9F                 db    0
LOAD:0000000000209DA0                 db    0
LOAD:0000000000209DA1                 db    0
LOAD:0000000000209DA2                 db    0
LOAD:0000000000209DA3                 db    0
LOAD:0000000000209DA4                 db    0
LOAD:0000000000209DA5                 db    0
LOAD:0000000000209DA6                 db    0
LOAD:0000000000209DA7                 db    0
LOAD:0000000000209DA7 LOAD            ends
LOAD:0000000000209DA7
.got:0000000000209DA8 ; ===========================================================================
.got:0000000000209DA8
.got:0000000000209DA8 ; Segment type: Pure data
.got:0000000000209DA8 ; Segment permissions: Read/Write
.got:0000000000209DA8 _got            segment qword public 'DATA' use64
.got:0000000000209DA8                 assume cs:_got
.got:0000000000209DA8                 ;org 209DA8h
.got:0000000000209DA8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000209DB0 qword_209DB0    dq 0                    ; DATA XREF: sub_19C0↑r
.got:0000000000209DB8 qword_209DB8    dq 0                    ; DATA XREF: sub_19C0+6↑r
.got:0000000000209DC0 getenv_ptr      dq offset getenv        ; DATA XREF: _getenv↑r
.got:0000000000209DC8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000209DD0 __errno_location_ptr dq offset __errno_location
.got:0000000000209DD0                                         ; DATA XREF: ___errno_location↑r
.got:0000000000209DD8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000209DE0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000209DE8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000209DF0 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:0000000000209DF8 iswcntrl_ptr    dq offset iswcntrl      ; DATA XREF: _iswcntrl↑r
.got:0000000000209E00 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000209E08 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000209E10 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000209E10                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000209E18 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000209E20 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000209E20                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000209E28 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000209E30 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000209E30                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000209E38 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000209E40 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000209E48 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000209E50 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000209E58 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000209E60 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000209E68 __assert_fail_ptr dq offset __assert_fail
.got:0000000000209E68                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000209E70 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000209E78 fgetc_ptr       dq offset fgetc         ; DATA XREF: _fgetc↑r
.got:0000000000209E80 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:0000000000209E88 posix_fadvise_ptr dq offset posix_fadvise
.got:0000000000209E88                                         ; DATA XREF: _posix_fadvise↑r
.got:0000000000209E90 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:0000000000209E98 read_ptr        dq offset read          ; DATA XREF: _read↑r
.got:0000000000209EA0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000209EA8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000209EA8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000209EB0 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000209EB8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000209EC0 __memmove_chk_ptr dq offset __memmove_chk
.got:0000000000209EC0                                         ; DATA XREF: ___memmove_chk↑r
.got:0000000000209EC8 feof_ptr        dq offset feof          ; DATA XREF: _feof↑r
.got:0000000000209ED0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000209ED8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000209EE0 __xstat_ptr     dq offset __xstat       ; DATA XREF: ___xstat↑r
.got:0000000000209EE8 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:0000000000209EF0 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000209EF8 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000209F00 __fxstat_ptr    dq offset __fxstat      ; DATA XREF: ___fxstat↑r
.got:0000000000209F08 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000209F10 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000209F18 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000209F20 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000209F28 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:0000000000209F30 iswspace_ptr    dq offset iswspace      ; DATA XREF: _iswspace↑r
.got:0000000000209F38 btowc_ptr       dq offset btowc         ; DATA XREF: _btowc↑r
.got:0000000000209F40 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000209F48 open_ptr        dq offset open          ; DATA XREF: _open↑r
.got:0000000000209F50 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000209F58 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:0000000000209F60 sysconf_ptr     dq offset sysconf       ; DATA XREF: _sysconf↑r
.got:0000000000209F68 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000209F70 sysinfo_ptr     dq offset sysinfo       ; DATA XREF: _sysinfo↑r
.got:0000000000209F78 getpagesize_ptr dq offset getpagesize   ; DATA XREF: _getpagesize↑r
.got:0000000000209F80 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000209F88 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000209F90 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000209F90                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000209F98 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000209FA0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000209FA8 getdelim_ptr    dq offset getdelim      ; DATA XREF: _getdelim↑r
.got:0000000000209FB0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000209FB0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000209FB8 free_ptr        dq offset __imp_free    ; DATA XREF: free↑r
.got:0000000000209FB8                                         ; readtokens0_init+2↑r
.got:0000000000209FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000209FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000209FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000209FC8                                         ; DATA XREF: start+24↑r
.got:0000000000209FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000209FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000209FD8 malloc_ptr      dq offset __imp_malloc  ; DATA XREF: malloc↑r
.got:0000000000209FD8                                         ; readtokens0_init+C↑r
.got:0000000000209FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000209FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000209FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000209FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000209FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000209FE8 _got            ends
.got:0000000000209FE8
LOAD:0000000000209FF0 ; ===========================================================================
LOAD:0000000000209FF0
LOAD:0000000000209FF0 ; Segment type: Pure data
LOAD:0000000000209FF0 ; Segment permissions: Read/Write
LOAD:0000000000209FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000209FF0                 assume cs:LOAD
LOAD:0000000000209FF0                 ;org 209FF0h
LOAD:0000000000209FF0                 align 20h
LOAD:0000000000209FF0 LOAD            ends
LOAD:0000000000209FF0
.data:000000000020A000 ; ===========================================================================
.data:000000000020A000
.data:000000000020A000 ; Segment type: Pure data
.data:000000000020A000 ; Segment permissions: Read/Write
.data:000000000020A000 _data           segment align_32 public 'DATA' use64
.data:000000000020A000                 assume cs:_data
.data:000000000020A000                 ;org 20A000h
.data:000000000020A000                 public __data_start ; weak
.data:000000000020A000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020A000                                         ; data_start
.data:000000000020A001                 db    0
.data:000000000020A002                 db    0
.data:000000000020A003                 db    0
.data:000000000020A004                 db    0
.data:000000000020A005                 db    0
.data:000000000020A006                 db    0
.data:000000000020A007                 db    0
.data:000000000020A008                 public __dso_handle
.data:000000000020A008 ; void *_dso_handle
.data:000000000020A008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020A008                                         ; atexit↑r ...
.data:000000000020A010                 public Version
.data:000000000020A010 Version         dq offset a831          ; DATA XREF: main+19B↑r
.data:000000000020A010                                         ; "8.31"
.data:000000000020A018                 public exit_failure
.data:000000000020A018 ; int exit_failure
.data:000000000020A018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_3BF2↑r
.data:000000000020A018                                         ; xalloc_die+17↑r ...
.data:000000000020A01C                 align 20h
.data:000000000020A020                 public quote_quoting_options
.data:000000000020A020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020A020                                         ; quote_mem↑o ...
.data:000000000020A021                 db    0
.data:000000000020A022                 db    0
.data:000000000020A023                 db    0
.data:000000000020A024                 db    0
.data:000000000020A025                 db    0
.data:000000000020A026                 db    0
.data:000000000020A027                 db    0
.data:000000000020A028                 db    0
.data:000000000020A029                 db    0
.data:000000000020A02A                 db    0
.data:000000000020A02B                 db    0
.data:000000000020A02C                 db    0
.data:000000000020A02D                 db    0
.data:000000000020A02E                 db    0
.data:000000000020A02F                 db    0
.data:000000000020A030                 db    0
.data:000000000020A031                 db    0
.data:000000000020A032                 db    0
.data:000000000020A033                 db    0
.data:000000000020A034                 db    0
.data:000000000020A035                 db    0
.data:000000000020A036                 db    0
.data:000000000020A037                 db    0
.data:000000000020A038                 db    0
.data:000000000020A039                 db    0
.data:000000000020A03A                 db    0
.data:000000000020A03B                 db    0
.data:000000000020A03C                 db    0
.data:000000000020A03D                 db    0
.data:000000000020A03E                 db    0
.data:000000000020A03F                 db    0
.data:000000000020A040                 db    0
.data:000000000020A041                 db    0
.data:000000000020A042                 db    0
.data:000000000020A043                 db    0
.data:000000000020A044                 db    0
.data:000000000020A045                 db    0
.data:000000000020A046                 db    0
.data:000000000020A047                 db    0
.data:000000000020A048                 db    0
.data:000000000020A049                 db    0
.data:000000000020A04A                 db    0
.data:000000000020A04B                 db    0
.data:000000000020A04C                 db    0
.data:000000000020A04D                 db    0
.data:000000000020A04E                 db    0
.data:000000000020A04F                 db    0
.data:000000000020A050                 db    0
.data:000000000020A051                 db    0
.data:000000000020A052                 db    0
.data:000000000020A053                 db    0
.data:000000000020A054                 db    0
.data:000000000020A055                 db    0
.data:000000000020A056                 db    0
.data:000000000020A057                 db    0
.data:000000000020A058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020A058                                         ; quotearg_n_options:loc_53AD↑r ...
.data:000000000020A05C                 align 20h
.data:000000000020A060 ; void *slotvec
.data:000000000020A060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020A060                                         ; quotearg_n_options+76↑w ...
.data:000000000020A068                 align 10h
.data:000000000020A070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020A070                                         ; quotearg_n_options+187↑r ...
.data:000000000020A078 off_20A078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020A080                 public obstack_alloc_failed_handler
.data:000000000020A080 obstack_alloc_failed_handler dq offset print_and_abort
.data:000000000020A080                                         ; DATA XREF: LOAD:00000000000009B0↑o
.data:000000000020A080                                         ; _obstack_begin_worker:loc_6BED↑r ...
.data:000000000020A080 _data           ends
.data:000000000020A080
LOAD:000000000020A088 ; ===========================================================================
LOAD:000000000020A088
LOAD:000000000020A088 ; Segment type: Pure data
LOAD:000000000020A088 ; Segment permissions: Read/Write
LOAD:000000000020A088 LOAD            segment byte public 'DATA' use64
LOAD:000000000020A088                 assume cs:LOAD
LOAD:000000000020A088                 ;org 20A088h
LOAD:000000000020A088                 public __bss_start
LOAD:000000000020A088 __bss_start     db    ? ;               ; DATA XREF: deregister_tm_clones↑o
LOAD:000000000020A088                                         ; deregister_tm_clones+8↑o ...
LOAD:000000000020A088                                         ; Alternative name is '_edata'
LOAD:000000000020A088                                         ; __TMC_END__
LOAD:000000000020A088                                         ; _edata
LOAD:000000000020A089                 db    ? ;
LOAD:000000000020A08A                 db    ? ;
LOAD:000000000020A08B                 db    ? ;
LOAD:000000000020A08C                 db    ? ;
LOAD:000000000020A08D                 db    ? ;
LOAD:000000000020A08E                 db    ? ;
LOAD:000000000020A08F                 db    ? ;
LOAD:000000000020A090                 db    ? ;
LOAD:000000000020A091                 db    ? ;
LOAD:000000000020A092                 db    ? ;
LOAD:000000000020A093                 db    ? ;
LOAD:000000000020A094                 db    ? ;
LOAD:000000000020A095                 db    ? ;
LOAD:000000000020A096                 db    ? ;
LOAD:000000000020A097                 db    ? ;
LOAD:000000000020A098                 db    ? ;
LOAD:000000000020A099                 db    ? ;
LOAD:000000000020A09A                 db    ? ;
LOAD:000000000020A09B                 db    ? ;
LOAD:000000000020A09C                 db    ? ;
LOAD:000000000020A09D                 db    ? ;
LOAD:000000000020A09E                 db    ? ;
LOAD:000000000020A09F                 db    ? ;
LOAD:000000000020A09F LOAD            ends
LOAD:000000000020A09F
.bss:000000000020A0A0 ; ===========================================================================
.bss:000000000020A0A0
.bss:000000000020A0A0 ; Segment type: Uninitialized
.bss:000000000020A0A0 ; Segment permissions: Read/Write
.bss:000000000020A0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020A0A0                 assume cs:_bss
.bss:000000000020A0A0                 ;org 20A0A0h
.bss:000000000020A0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020A0A0                 public program_invocation_short_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0A0 program_invocation_short_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0A0                                         ; DATA XREF: LOAD:0000000000000A28↑o
.bss:000000000020A0A0                                         ; LOAD:0000000000000AB8↑o ...
.bss:000000000020A0A0                                         ; Alternative name is '__progname'
.bss:000000000020A0A0                                         ; Copy of shared data
.bss:000000000020A0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020A0A8 ; FILE *stdout
.bss:000000000020A0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009E0↑o
.bss:000000000020A0A8                                         ; main+79↑r ...
.bss:000000000020A0A8                                         ; Alternative name is 'stdout'
.bss:000000000020A0A8                                         ; Copy of shared data
.bss:000000000020A0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000020A0B0 ; FILE *stdin
.bss:000000000020A0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000A40↑o
.bss:000000000020A0B0                                         ; main+295↑r
.bss:000000000020A0B0                                         ; Alternative name is 'stdin'
.bss:000000000020A0B0                                         ; Copy of shared data
.bss:000000000020A0B8                 public optind@@GLIBC_2_2_5
.bss:000000000020A0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000AE8↑o
.bss:000000000020A0B8                                         ; main+269↑r
.bss:000000000020A0B8                                         ; Alternative name is 'optind'
.bss:000000000020A0B8                                         ; Copy of shared data
.bss:000000000020A0BC                 align 20h
.bss:000000000020A0C0                 public optarg@@GLIBC_2_2_5
.bss:000000000020A0C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B00↑o
.bss:000000000020A0C0                                         ; main+158↑r
.bss:000000000020A0C0                                         ; Alternative name is 'optarg'
.bss:000000000020A0C0                                         ; Copy of shared data
.bss:000000000020A0C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020A0C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020A0C8                                         ; DATA XREF: LOAD:0000000000000A70↑o
.bss:000000000020A0C8                                         ; LOAD:0000000000000AA0↑o ...
.bss:000000000020A0C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020A0C8                                         ; Copy of shared data
.bss:000000000020A0D0                 align 20h
.bss:000000000020A0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020A0E0 ; FILE *stderr
.bss:000000000020A0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000AD0↑o
.bss:000000000020A0E0                                         ; main+A00↑r ...
.bss:000000000020A0E0                                         ; Alternative name is 'stderr'
.bss:000000000020A0E0                                         ; Copy of shared data
.bss:000000000020A0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020A0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020A0E9                 align 10h
.bss:000000000020A0F0 stdin_only_8119 db    ? ;               ; DATA XREF: main+3B3↑o
.bss:000000000020A0F1                 db    ? ;
.bss:000000000020A0F2                 db    ? ;
.bss:000000000020A0F3                 db    ? ;
.bss:000000000020A0F4                 db    ? ;
.bss:000000000020A0F5                 db    ? ;
.bss:000000000020A0F6                 db    ? ;
.bss:000000000020A0F7                 db    ? ;
.bss:000000000020A0F8 posixly_correct db ?                    ; DATA XREF: main+B4↑w
.bss:000000000020A0F8                                         ; wc+6B9↑r ...
.bss:000000000020A0F9                 align 20h
.bss:000000000020A100 page_size       dq ?                    ; DATA XREF: main+8B↑w
.bss:000000000020A100                                         ; wc+EF↑r
.bss:000000000020A108 have_read_stdin db ?                    ; DATA XREF: main+5E2↑w
.bss:000000000020A108                                         ; main+6EE↑r ...
.bss:000000000020A109                 align 4
.bss:000000000020A10C number_width    dd ?                    ; DATA XREF: main+3F3↑w
.bss:000000000020A10C                                         ; write_counts+10B↑r ...
.bss:000000000020A110 print_linelength db ?                   ; DATA XREF: main+CB↑w
.bss:000000000020A110                                         ; main:loc_1FB0↑w ...
.bss:000000000020A111 print_bytes     db ?                    ; DATA XREF: main+A6↑w
.bss:000000000020A111                                         ; main:loc_1FC0↑w ...
.bss:000000000020A112 print_chars     db ?                    ; DATA XREF: main+AD↑w
.bss:000000000020A112                                         ; main:loc_1FF8↑w ...
.bss:000000000020A113 print_words     db ?                    ; DATA XREF: main+BB↑w
.bss:000000000020A113                                         ; main:loc_1FD0↑w ...
.bss:000000000020A114 print_lines     db ?                    ; DATA XREF: main+C4↑w
.bss:000000000020A114                                         ; main+209↑w ...
.bss:000000000020A115                 align 8
.bss:000000000020A118 max_line_length dq ?                    ; DATA XREF: main+D2↑w
.bss:000000000020A118                                         ; main+6B1↑r ...
.bss:000000000020A120 total_bytes     dq ?                    ; DATA XREF: main+DD↑w
.bss:000000000020A120                                         ; main+6B8↑r ...
.bss:000000000020A128 total_chars     dq ?                    ; DATA XREF: main+E8↑w
.bss:000000000020A128                                         ; main+6C2↑r ...
.bss:000000000020A130 total_words     dq ?                    ; DATA XREF: main+F3↑w
.bss:000000000020A130                                         ; main+6C9↑r ...
.bss:000000000020A138 total_lines     dq ?                    ; DATA XREF: main+FE↑w
.bss:000000000020A138                                         ; main+6D0↑r ...
.bss:000000000020A140 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020A140                                         ; close_stdout+1B↑r
.bss:000000000020A141                 align 8
.bss:000000000020A148 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020A148                                         ; close_stdout+56↑r
.bss:000000000020A150                 public program_name
.bss:000000000020A150 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020A150                                         ; set_program_name:loc_3FCD↑w
.bss:000000000020A158                 align 20h
.bss:000000000020A160 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020A160                                         ; quotearg_free+46↑o ...
.bss:000000000020A161                 db    ? ;
.bss:000000000020A162                 db    ? ;
.bss:000000000020A163                 db    ? ;
.bss:000000000020A164                 db    ? ;
.bss:000000000020A165                 db    ? ;
.bss:000000000020A166                 db    ? ;
.bss:000000000020A167                 db    ? ;
.bss:000000000020A168                 db    ? ;
.bss:000000000020A169                 db    ? ;
.bss:000000000020A16A                 db    ? ;
.bss:000000000020A16B                 db    ? ;
.bss:000000000020A16C                 db    ? ;
.bss:000000000020A16D                 db    ? ;
.bss:000000000020A16E                 db    ? ;
.bss:000000000020A16F                 db    ? ;
.bss:000000000020A170                 db    ? ;
.bss:000000000020A171                 db    ? ;
.bss:000000000020A172                 db    ? ;
.bss:000000000020A173                 db    ? ;
.bss:000000000020A174                 db    ? ;
.bss:000000000020A175                 db    ? ;
.bss:000000000020A176                 db    ? ;
.bss:000000000020A177                 db    ? ;
.bss:000000000020A178                 db    ? ;
.bss:000000000020A179                 db    ? ;
.bss:000000000020A17A                 db    ? ;
.bss:000000000020A17B                 db    ? ;
.bss:000000000020A17C                 db    ? ;
.bss:000000000020A17D                 db    ? ;
.bss:000000000020A17E                 db    ? ;
.bss:000000000020A17F                 db    ? ;
.bss:000000000020A180                 db    ? ;
.bss:000000000020A181                 db    ? ;
.bss:000000000020A182                 db    ? ;
.bss:000000000020A183                 db    ? ;
.bss:000000000020A184                 db    ? ;
.bss:000000000020A185                 db    ? ;
.bss:000000000020A186                 db    ? ;
.bss:000000000020A187                 db    ? ;
.bss:000000000020A188                 db    ? ;
.bss:000000000020A189                 db    ? ;
.bss:000000000020A18A                 db    ? ;
.bss:000000000020A18B                 db    ? ;
.bss:000000000020A18C                 db    ? ;
.bss:000000000020A18D                 db    ? ;
.bss:000000000020A18E                 db    ? ;
.bss:000000000020A18F                 db    ? ;
.bss:000000000020A190                 db    ? ;
.bss:000000000020A191                 db    ? ;
.bss:000000000020A192                 db    ? ;
.bss:000000000020A193                 db    ? ;
.bss:000000000020A194                 db    ? ;
.bss:000000000020A195                 db    ? ;
.bss:000000000020A196                 db    ? ;
.bss:000000000020A197                 db    ? ;
.bss:000000000020A198                 db    ? ;
.bss:000000000020A199                 db    ? ;
.bss:000000000020A19A                 db    ? ;
.bss:000000000020A19B                 db    ? ;
.bss:000000000020A19C                 db    ? ;
.bss:000000000020A19D                 db    ? ;
.bss:000000000020A19E                 db    ? ;
.bss:000000000020A19F                 db    ? ;
.bss:000000000020A1A0                 db    ? ;
.bss:000000000020A1A1                 db    ? ;
.bss:000000000020A1A2                 db    ? ;
.bss:000000000020A1A3                 db    ? ;
.bss:000000000020A1A4                 db    ? ;
.bss:000000000020A1A5                 db    ? ;
.bss:000000000020A1A6                 db    ? ;
.bss:000000000020A1A7                 db    ? ;
.bss:000000000020A1A8                 db    ? ;
.bss:000000000020A1A9                 db    ? ;
.bss:000000000020A1AA                 db    ? ;
.bss:000000000020A1AB                 db    ? ;
.bss:000000000020A1AC                 db    ? ;
.bss:000000000020A1AD                 db    ? ;
.bss:000000000020A1AE                 db    ? ;
.bss:000000000020A1AF                 db    ? ;
.bss:000000000020A1B0                 db    ? ;
.bss:000000000020A1B1                 db    ? ;
.bss:000000000020A1B2                 db    ? ;
.bss:000000000020A1B3                 db    ? ;
.bss:000000000020A1B4                 db    ? ;
.bss:000000000020A1B5                 db    ? ;
.bss:000000000020A1B6                 db    ? ;
.bss:000000000020A1B7                 db    ? ;
.bss:000000000020A1B8                 db    ? ;
.bss:000000000020A1B9                 db    ? ;
.bss:000000000020A1BA                 db    ? ;
.bss:000000000020A1BB                 db    ? ;
.bss:000000000020A1BC                 db    ? ;
.bss:000000000020A1BD                 db    ? ;
.bss:000000000020A1BE                 db    ? ;
.bss:000000000020A1BF                 db    ? ;
.bss:000000000020A1C0                 db    ? ;
.bss:000000000020A1C1                 db    ? ;
.bss:000000000020A1C2                 db    ? ;
.bss:000000000020A1C3                 db    ? ;
.bss:000000000020A1C4                 db    ? ;
.bss:000000000020A1C5                 db    ? ;
.bss:000000000020A1C6                 db    ? ;
.bss:000000000020A1C7                 db    ? ;
.bss:000000000020A1C8                 db    ? ;
.bss:000000000020A1C9                 db    ? ;
.bss:000000000020A1CA                 db    ? ;
.bss:000000000020A1CB                 db    ? ;
.bss:000000000020A1CC                 db    ? ;
.bss:000000000020A1CD                 db    ? ;
.bss:000000000020A1CE                 db    ? ;
.bss:000000000020A1CF                 db    ? ;
.bss:000000000020A1D0                 db    ? ;
.bss:000000000020A1D1                 db    ? ;
.bss:000000000020A1D2                 db    ? ;
.bss:000000000020A1D3                 db    ? ;
.bss:000000000020A1D4                 db    ? ;
.bss:000000000020A1D5                 db    ? ;
.bss:000000000020A1D6                 db    ? ;
.bss:000000000020A1D7                 db    ? ;
.bss:000000000020A1D8                 db    ? ;
.bss:000000000020A1D9                 db    ? ;
.bss:000000000020A1DA                 db    ? ;
.bss:000000000020A1DB                 db    ? ;
.bss:000000000020A1DC                 db    ? ;
.bss:000000000020A1DD                 db    ? ;
.bss:000000000020A1DE                 db    ? ;
.bss:000000000020A1DF                 db    ? ;
.bss:000000000020A1E0                 db    ? ;
.bss:000000000020A1E1                 db    ? ;
.bss:000000000020A1E2                 db    ? ;
.bss:000000000020A1E3                 db    ? ;
.bss:000000000020A1E4                 db    ? ;
.bss:000000000020A1E5                 db    ? ;
.bss:000000000020A1E6                 db    ? ;
.bss:000000000020A1E7                 db    ? ;
.bss:000000000020A1E8                 db    ? ;
.bss:000000000020A1E9                 db    ? ;
.bss:000000000020A1EA                 db    ? ;
.bss:000000000020A1EB                 db    ? ;
.bss:000000000020A1EC                 db    ? ;
.bss:000000000020A1ED                 db    ? ;
.bss:000000000020A1EE                 db    ? ;
.bss:000000000020A1EF                 db    ? ;
.bss:000000000020A1F0                 db    ? ;
.bss:000000000020A1F1                 db    ? ;
.bss:000000000020A1F2                 db    ? ;
.bss:000000000020A1F3                 db    ? ;
.bss:000000000020A1F4                 db    ? ;
.bss:000000000020A1F5                 db    ? ;
.bss:000000000020A1F6                 db    ? ;
.bss:000000000020A1F7                 db    ? ;
.bss:000000000020A1F8                 db    ? ;
.bss:000000000020A1F9                 db    ? ;
.bss:000000000020A1FA                 db    ? ;
.bss:000000000020A1FB                 db    ? ;
.bss:000000000020A1FC                 db    ? ;
.bss:000000000020A1FD                 db    ? ;
.bss:000000000020A1FE                 db    ? ;
.bss:000000000020A1FF                 db    ? ;
.bss:000000000020A200                 db    ? ;
.bss:000000000020A201                 db    ? ;
.bss:000000000020A202                 db    ? ;
.bss:000000000020A203                 db    ? ;
.bss:000000000020A204                 db    ? ;
.bss:000000000020A205                 db    ? ;
.bss:000000000020A206                 db    ? ;
.bss:000000000020A207                 db    ? ;
.bss:000000000020A208                 db    ? ;
.bss:000000000020A209                 db    ? ;
.bss:000000000020A20A                 db    ? ;
.bss:000000000020A20B                 db    ? ;
.bss:000000000020A20C                 db    ? ;
.bss:000000000020A20D                 db    ? ;
.bss:000000000020A20E                 db    ? ;
.bss:000000000020A20F                 db    ? ;
.bss:000000000020A210                 db    ? ;
.bss:000000000020A211                 db    ? ;
.bss:000000000020A212                 db    ? ;
.bss:000000000020A213                 db    ? ;
.bss:000000000020A214                 db    ? ;
.bss:000000000020A215                 db    ? ;
.bss:000000000020A216                 db    ? ;
.bss:000000000020A217                 db    ? ;
.bss:000000000020A218                 db    ? ;
.bss:000000000020A219                 db    ? ;
.bss:000000000020A21A                 db    ? ;
.bss:000000000020A21B                 db    ? ;
.bss:000000000020A21C                 db    ? ;
.bss:000000000020A21D                 db    ? ;
.bss:000000000020A21E                 db    ? ;
.bss:000000000020A21F                 db    ? ;
.bss:000000000020A220                 db    ? ;
.bss:000000000020A221                 db    ? ;
.bss:000000000020A222                 db    ? ;
.bss:000000000020A223                 db    ? ;
.bss:000000000020A224                 db    ? ;
.bss:000000000020A225                 db    ? ;
.bss:000000000020A226                 db    ? ;
.bss:000000000020A227                 db    ? ;
.bss:000000000020A228                 db    ? ;
.bss:000000000020A229                 db    ? ;
.bss:000000000020A22A                 db    ? ;
.bss:000000000020A22B                 db    ? ;
.bss:000000000020A22C                 db    ? ;
.bss:000000000020A22D                 db    ? ;
.bss:000000000020A22E                 db    ? ;
.bss:000000000020A22F                 db    ? ;
.bss:000000000020A230                 db    ? ;
.bss:000000000020A231                 db    ? ;
.bss:000000000020A232                 db    ? ;
.bss:000000000020A233                 db    ? ;
.bss:000000000020A234                 db    ? ;
.bss:000000000020A235                 db    ? ;
.bss:000000000020A236                 db    ? ;
.bss:000000000020A237                 db    ? ;
.bss:000000000020A238                 db    ? ;
.bss:000000000020A239                 db    ? ;
.bss:000000000020A23A                 db    ? ;
.bss:000000000020A23B                 db    ? ;
.bss:000000000020A23C                 db    ? ;
.bss:000000000020A23D                 db    ? ;
.bss:000000000020A23E                 db    ? ;
.bss:000000000020A23F                 db    ? ;
.bss:000000000020A240                 db    ? ;
.bss:000000000020A241                 db    ? ;
.bss:000000000020A242                 db    ? ;
.bss:000000000020A243                 db    ? ;
.bss:000000000020A244                 db    ? ;
.bss:000000000020A245                 db    ? ;
.bss:000000000020A246                 db    ? ;
.bss:000000000020A247                 db    ? ;
.bss:000000000020A248                 db    ? ;
.bss:000000000020A249                 db    ? ;
.bss:000000000020A24A                 db    ? ;
.bss:000000000020A24B                 db    ? ;
.bss:000000000020A24C                 db    ? ;
.bss:000000000020A24D                 db    ? ;
.bss:000000000020A24E                 db    ? ;
.bss:000000000020A24F                 db    ? ;
.bss:000000000020A250                 db    ? ;
.bss:000000000020A251                 db    ? ;
.bss:000000000020A252                 db    ? ;
.bss:000000000020A253                 db    ? ;
.bss:000000000020A254                 db    ? ;
.bss:000000000020A255                 db    ? ;
.bss:000000000020A256                 db    ? ;
.bss:000000000020A257                 db    ? ;
.bss:000000000020A258                 db    ? ;
.bss:000000000020A259                 db    ? ;
.bss:000000000020A25A                 db    ? ;
.bss:000000000020A25B                 db    ? ;
.bss:000000000020A25C                 db    ? ;
.bss:000000000020A25D                 db    ? ;
.bss:000000000020A25E                 db    ? ;
.bss:000000000020A25F                 db    ? ;
.bss:000000000020A260 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020A260                                         ; get_quoting_style↑o ...
.bss:000000000020A270 xmmword_20A270  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020A270                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020A280 xmmword_20A280  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020A280                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020A290 qword_20A290    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020A290                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020A290 _bss            ends
.bss:000000000020A290
.prgend:000000000020A298 ; ===========================================================================
.prgend:000000000020A298
.prgend:000000000020A298 ; Segment type: Zero-length
.prgend:000000000020A298 _prgend         segment byte public '' use64
.prgend:000000000020A298 _end            label byte
.prgend:000000000020A298 _prgend         ends
.prgend:000000000020A298
extern:000000000020A2A0 ; ===========================================================================
extern:000000000020A2A0
extern:000000000020A2A0 ; Segment type: Externs
extern:000000000020A2A0 ; extern
extern:000000000020A2A0 ; char *getenv(const char *name)
extern:000000000020A2A0                 extrn getenv:near       ; CODE XREF: _getenv↑j
extern:000000000020A2A0                                         ; DATA XREF: .got:getenv_ptr↑o
extern:000000000020A2A8 ; void free(void *ptr)
extern:000000000020A2A8                 extrn __imp_free:near   ; CODE XREF: free↑j
extern:000000000020A2A8                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020A2B0 ; void __noreturn abort(void)
extern:000000000020A2B0                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020A2B0                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020A2B8 ; int *_errno_location(void)
extern:000000000020A2B8                 extrn __errno_location:near
extern:000000000020A2B8                                         ; CODE XREF: ___errno_location↑j
extern:000000000020A2B8                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020A2C0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020A2C0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020A2C0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020A2C8 ; void __noreturn exit(int status)
extern:000000000020A2C8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020A2C8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020A2D0 ; size_t _fpending(FILE *fp)
extern:000000000020A2D0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020A2D0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020A2D8 ; int ferror(FILE *stream)
extern:000000000020A2D8                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:000000000020A2D8                                         ; DATA XREF: .got:ferror_ptr↑o
extern:000000000020A2E0 ; int iswcntrl(wint_t wc)
extern:000000000020A2E0                 extrn iswcntrl:near     ; CODE XREF: _iswcntrl↑j
extern:000000000020A2E0                                         ; DATA XREF: .got:iswcntrl_ptr↑o
extern:000000000020A2E8 ; char *textdomain(const char *domainname)
extern:000000000020A2E8                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020A2E8                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020A2F0 ; int fclose(FILE *stream)
extern:000000000020A2F0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020A2F0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020A2F8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020A2F8                 extrn bindtextdomain:near
extern:000000000020A2F8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020A2F8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020A300 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020A300                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020A300                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020A308 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020A308                 extrn __ctype_get_mb_cur_max:near
extern:000000000020A308                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020A308                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020A310 ; size_t strlen(const char *s)
extern:000000000020A310                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020A310                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020A318                 extrn __stack_chk_fail:near
extern:000000000020A318                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020A318                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020A320 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020A320                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020A320                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020A328 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020A328                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020A328                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020A330 ; char *strchr(const char *s, int c)
extern:000000000020A330                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020A330                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020A338 ; int _overflow(_IO_FILE *, int)
extern:000000000020A338                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020A338                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020A340 ; char *strrchr(const char *s, int c)
extern:000000000020A340                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020A340                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020A348 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020A348                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020A348                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020A350 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020A350                 extrn __assert_fail:near
extern:000000000020A350                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020A350                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020A358 ; void *memset(void *s, int c, size_t n)
extern:000000000020A358                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020A358                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000020A360 ; int fgetc(FILE *stream)
extern:000000000020A360                 extrn fgetc:near        ; CODE XREF: _fgetc↑j
extern:000000000020A360                                         ; DATA XREF: .got:fgetc_ptr↑o
extern:000000000020A368 ; int close(int fd)
extern:000000000020A368                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020A368                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020A370 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000020A370                 extrn posix_fadvise:near
extern:000000000020A370                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000020A370                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000020A378 ; void *memchr(const void *s, int c, size_t n)
extern:000000000020A378                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000020A378                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000020A380 ; ssize_t read(int fd, void *buf, size_t nbytes)
extern:000000000020A380                 extrn read:near         ; CODE XREF: _read↑j
extern:000000000020A380                                         ; DATA XREF: .got:read_ptr↑o
extern:000000000020A388 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020A388                 extrn __libc_start_main:near
extern:000000000020A388                                         ; CODE XREF: start+24↑p
extern:000000000020A388                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020A390 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020A390                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020A390                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020A398 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020A398                 extrn fputs_unlocked:near
extern:000000000020A398                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020A398                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020A3A0 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020A3A0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020A3A0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020A3A8 ; int strcmp(const char *s1, const char *s2)
extern:000000000020A3A8                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020A3A8                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020A3B0                 extrn __memmove_chk:near
extern:000000000020A3B0                                         ; CODE XREF: ___memmove_chk↑j
extern:000000000020A3B0                                         ; DATA XREF: .got:__memmove_chk_ptr↑o
extern:000000000020A3B8 ; int feof(FILE *stream)
extern:000000000020A3B8                 extrn feof:near         ; CODE XREF: _feof↑j
extern:000000000020A3B8                                         ; DATA XREF: .got:feof_ptr↑o
extern:000000000020A3C0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020A3C0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020A3C0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020A3C8 ; int fileno(FILE *stream)
extern:000000000020A3C8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020A3C8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020A3D0 ; int _xstat(int ver, const char *filename, struct stat *stat_buf)
extern:000000000020A3D0                 extrn __xstat:near      ; CODE XREF: ___xstat↑j
extern:000000000020A3D0                                         ; DATA XREF: .got:__xstat_ptr↑o
extern:000000000020A3D8 ; int wcwidth(wchar_t c)
extern:000000000020A3D8                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:000000000020A3D8                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:000000000020A3E0 ; void *malloc(size_t size)
extern:000000000020A3E0                 extrn __imp_malloc:near ; CODE XREF: malloc↑j
extern:000000000020A3E0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020A3E8 ; int fflush(FILE *stream)
extern:000000000020A3E8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020A3E8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020A3F0 ; char *nl_langinfo(nl_item item)
extern:000000000020A3F0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020A3F0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020A3F8 ; int _fxstat(int ver, int fildes, struct stat *stat_buf)
extern:000000000020A3F8                 extrn __fxstat:near     ; CODE XREF: ___fxstat↑j
extern:000000000020A3F8                                         ; DATA XREF: .got:__fxstat_ptr↑o
extern:000000000020A400 ; int _freading(FILE *fp)
extern:000000000020A400                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020A400                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020A408 ; void *realloc(void *ptr, size_t size)
extern:000000000020A408                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020A408                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020A410 ; char *setlocale(int category, const char *locale)
extern:000000000020A410                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020A410                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020A418                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020A418                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020A420 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000020A420                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000020A420                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000020A428 ; int iswspace(wint_t wc)
extern:000000000020A428                 extrn iswspace:near     ; CODE XREF: _iswspace↑j
extern:000000000020A428                                         ; DATA XREF: .got:iswspace_ptr↑o
extern:000000000020A430 ; wint_t btowc(int c)
extern:000000000020A430                 extrn btowc:near        ; CODE XREF: _btowc↑j
extern:000000000020A430                                         ; DATA XREF: .got:btowc_ptr↑o
extern:000000000020A438 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020A438                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020A438                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020A440 ; int open(const char *file, int oflag, ...)
extern:000000000020A440                 extrn open:near         ; CODE XREF: _open↑j
extern:000000000020A440                                         ; DATA XREF: .got:open_ptr↑o
extern:000000000020A448 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020A448                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020A448                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020A450 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020A450                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020A450                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020A458 ; __int64 sysconf(int name)
extern:000000000020A458                 extrn sysconf:near      ; CODE XREF: _sysconf↑j
extern:000000000020A458                                         ; DATA XREF: .got:sysconf_ptr↑o
extern:000000000020A460 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020A460                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020A460                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020A468 ; int sysinfo(struct sysinfo *info)
extern:000000000020A468                 extrn sysinfo:near      ; CODE XREF: _sysinfo↑j
extern:000000000020A468                                         ; DATA XREF: .got:sysinfo_ptr↑o
extern:000000000020A470 ; int getpagesize(void)
extern:000000000020A470                 extrn getpagesize:near  ; CODE XREF: _getpagesize↑j
extern:000000000020A470                                         ; DATA XREF: .got:getpagesize_ptr↑o
extern:000000000020A478 ; void __noreturn exit(int status)
extern:000000000020A478                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020A478                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020A480 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020A480                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020A480                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020A488                 extrn __fprintf_chk:near
extern:000000000020A488                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020A488                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020A490 ; int mbsinit(const mbstate_t *ps)
extern:000000000020A490                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020A490                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020A498 ; int iswprint(wint_t wc)
extern:000000000020A498                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020A498                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020A4A0 ; int __fastcall __cxa_finalize(void *)
extern:000000000020A4A0                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020A4A0                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020A4A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020A4A8 ; __ssize_t getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000020A4A8                 extrn getdelim:near     ; CODE XREF: _getdelim↑j
extern:000000000020A4A8                                         ; DATA XREF: .got:getdelim_ptr↑o
extern:000000000020A4B0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020A4B0                 extrn __ctype_b_loc:near
extern:000000000020A4B0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020A4B0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020A4B8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020A4B8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020A4C0                 extrn __gmon_start__:near ; weak
extern:000000000020A4C0                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020A4C0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020A4C8                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020A4C8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020A4C8
extern:000000000020A4C8
extern:000000000020A4C8                 end start
