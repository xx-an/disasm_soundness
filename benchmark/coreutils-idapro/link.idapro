LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : B153D1F3668280E0C23DD5256BBBA3F6A70AF130D1CB6E06F4755714314A548E
LOAD:0000000000000000 ; Input MD5    : B69093F5EC9C8AE7945C477F9ED3FE71
LOAD:0000000000000000 ; Input CRC32  : E9DDF1B2
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/link
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'link.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 226F8h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6058h                ; Size in file image
LOAD:00000000000000D8                 dq 6058h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6BB0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206BB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4D0h                 ; Size in file image
LOAD:0000000000000110                 dq 688h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 52F0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 52F0h                ; Physical address
LOAD:00000000000001B0                 dq 24Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 24Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6BB0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206BB0h              ; Physical address
LOAD:0000000000000220                 dq 450h                 ; Size in file image
LOAD:0000000000000228                 dq 450h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 54h, 49h, 0D7h, 52h, 0A7h, 0E5h, 16h, 97h, 62h, 0Dh ; Desc
LOAD:0000000000000284                 db 0Bh, 54h, 8Bh, 57h, 56h, 8Fh, 0B7h, 72h, 7, 90h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Eh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Eh, 2Fh, 35h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_7F0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_7F0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_7F0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_7F0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_7F0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_7F0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_7F0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFclose - offset byte_7F0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain - offset byte_7F0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aDcgettext - offset byte_7F0, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_7F0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrlen - offset byte_7F0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStackChkFail - offset byte_7F0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aGetoptLong - offset byte_7F0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aMbrtowc - offset byte_7F0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrrchr - offset byte_7F0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aLseek - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000490                            0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMemset - offset byte_7F0, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLibcStartMain - offset byte_7F0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMemcmp - offset byte_7F0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aFputsUnlocked - offset byte_7F0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aCalloc - offset byte_7F0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aGmonStart - offset byte_7F0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcpy - offset byte_7F0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFileno - offset byte_7F0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMalloc - offset byte_7F0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFflush - offset byte_7F0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aNlLanginfo - offset byte_7F0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFreading - offset byte_7F0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aRealloc - offset byte_7F0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aSetlocale - offset byte_7F0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aPrintfChk - offset byte_7F0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aError - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000610                            0>
LOAD:0000000000000628                 Elf64_Sym <offset aFseeko - offset byte_7F0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aCxaAtexit - offset byte_7F0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aLink - offset byte_7F0, 12h, 0, 0, offset dword_0, \ ; "link"
LOAD:0000000000000658                            0>
LOAD:0000000000000670                 Elf64_Sym <offset aExit+1 - offset byte_7F0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFwrite - offset byte_7F0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFprintfChk - offset byte_7F0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aItmRegistertmc - offset byte_7F0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMbsinit - offset byte_7F0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aIswprint - offset byte_7F0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aCxaFinalize - offset byte_7F0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCtypeBLoc - offset byte_7F0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aStdout - offset byte_7F0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000730                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000748                 Elf64_Sym <offset aProgname - offset byte_7F0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000748                            offset __bss_start, 8>
LOAD:0000000000000760                 Elf64_Sym <offset aProgramInvocat - offset byte_7F0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000760                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000778                 Elf64_Sym <offset aPrognameFull - offset byte_7F0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000778                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_7F0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000790                            offset __bss_start, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aOpterr - offset byte_7F0, 11h, 0, 19h, \ ; "opterr"
LOAD:00000000000007A8                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:00000000000007C0                 Elf64_Sym <offset aStderr - offset byte_7F0, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007C0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aOptind - offset byte_7F0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007D8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000007F0 ; ELF String Table
LOAD:00000000000007F0 byte_7F0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000007F0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000007F1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000AE0↓o
LOAD:00000000000007FB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000802 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:000000000000080F aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000819 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000821 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000829 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000830 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000838 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000842 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000848 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000859 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000862 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:000000000000086A aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000870 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000870                                         ; LOAD:0000000000000670↑o
LOAD:0000000000000876 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000876                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:000000000000088E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:000000000000088E                                         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000008A5 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000008AC aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000008B3 aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000008BA aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000008CB aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000008D2 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008E0 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000008E7 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008ED aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000008F4 aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000008FB aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000902 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:000000000000090A aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000916 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000924 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:000000000000092F aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000936 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000942 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000949 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000950 aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:000000000000095B aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:000000000000095B                                         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000979 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000988 aLink           db 'link',0             ; DATA XREF: LOAD:0000000000000658↑o
LOAD:000000000000098D aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:000000000000098D                                         ; LOAD:00000000000003A0↑o
LOAD:000000000000099C aOpterr         db 'opterr',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000009A3 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009A3                                         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000009B5 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000009BC aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009CB aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009D0 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009DB aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009EB aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000009F8 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000AF0↓o
LOAD:0000000000000A02 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B00↓o
LOAD:0000000000000A0E aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B10↓o
LOAD:0000000000000A19 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B20↓o
LOAD:0000000000000A23 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B30↓o
LOAD:0000000000000A2F aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A2F                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A4B aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A5A aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A5A                                         ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000A74 ; ELF GNU Symbol Version Table
LOAD:0000000000000A74                 dw 0
LOAD:0000000000000A76                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A78                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A7A                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A7C                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A7E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A80                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A82                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A84                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000A86                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000A88                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000A8A                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000A8C                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000A8E                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000A90                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000A92                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000A94                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000A98                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000A9A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000A9C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AA6                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AA8                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AAE                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AB8                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; link@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AC6                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AC8                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000ACC                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000ACE                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AD0                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AD6                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000AE0 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000AE0                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_7F0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000AF0                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_7F0, \ ; "GLIBC_2.3"
LOAD:0000000000000AF0                                10h>
LOAD:0000000000000B00                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_7F0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B00                                10h>
LOAD:0000000000000B10                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_7F0, \ ; "GLIBC_2.14"
LOAD:0000000000000B10                                10h>
LOAD:0000000000000B20                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_7F0, \ ; "GLIBC_2.4"
LOAD:0000000000000B20                                10h>
LOAD:0000000000000B30                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_7F0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B40 ; ELF RELA Relocation Table
LOAD:0000000000000B40                 Elf64_Rela <206BB0h, 8, 1730h> ; R_X86_64_RELATIVE +1730h
LOAD:0000000000000B58                 Elf64_Rela <206BB8h, 8, 16F0h> ; R_X86_64_RELATIVE +16F0h
LOAD:0000000000000B70                 Elf64_Rela <206BC0h, 8, 4A2Dh> ; R_X86_64_RELATIVE +4A2Dh
LOAD:0000000000000B88                 Elf64_Rela <206BE0h, 8, 4A32h> ; R_X86_64_RELATIVE +4A32h
LOAD:0000000000000BA0                 Elf64_Rela <206C20h, 8, 4A99h> ; R_X86_64_RELATIVE +4A99h
LOAD:0000000000000BB8                 Elf64_Rela <206C28h, 8, 4AA1h> ; R_X86_64_RELATIVE +4AA1h
LOAD:0000000000000BD0                 Elf64_Rela <206C30h, 8, 4AA7h> ; R_X86_64_RELATIVE +4AA7h
LOAD:0000000000000BE8                 Elf64_Rela <206C38h, 8, 4AB4h> ; R_X86_64_RELATIVE +4AB4h
LOAD:0000000000000C00                 Elf64_Rela <206C40h, 8, 4AC1h> ; R_X86_64_RELATIVE +4AC1h
LOAD:0000000000000C18                 Elf64_Rela <206C48h, 8, 4AD5h> ; R_X86_64_RELATIVE +4AD5h
LOAD:0000000000000C30                 Elf64_Rela <206C50h, 8, 4AD7h> ; R_X86_64_RELATIVE +4AD7h
LOAD:0000000000000C48                 Elf64_Rela <206C58h, 8, 4ABAh> ; R_X86_64_RELATIVE +4ABAh
LOAD:0000000000000C60                 Elf64_Rela <206C60h, 8, 47FDh> ; R_X86_64_RELATIVE +47FDh
LOAD:0000000000000C78                 Elf64_Rela <206C68h, 8, 4ADFh> ; R_X86_64_RELATIVE +4ADFh
LOAD:0000000000000C90                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000CA8                 Elf64_Rela <207010h, 8, 4A13h> ; R_X86_64_RELATIVE +4A13h
LOAD:0000000000000CC0                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000CD8                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000CF0                 Elf64_Rela <206FC0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D08                 Elf64_Rela <206FC8h, 1400000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D20                 Elf64_Rela <206FD0h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D38                 Elf64_Rela <206FD8h, 2900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000D50                 Elf64_Rela <206FE0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000D68                 Elf64_Rela <207080h, 2F00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000D80                 Elf64_Rela <207088h, 2E00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000D98                 Elf64_Rela <207090h, 3500000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000DB0                 Elf64_Rela <207098h, 3100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000DC8                 Elf64_Rela <2070A0h, 3300000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000DE0                 Elf64_Rela <2070C0h, 3400000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000DF8 ; ELF JMPREL Relocation Table
LOAD:0000000000000DF8                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E10                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E28                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E40                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E58                 Elf64_Rela <206EA0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000E70                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000E88                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000EA0                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000EB8                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000ED0                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000EE8                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F00                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F18                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F30                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000F48                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000F60                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000F78                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000F90                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000FA8                 Elf64_Rela <206F10h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000000FC0                 Elf64_Rela <206F18h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000000FD8                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000000FF0                 Elf64_Rela <206F28h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001008                 Elf64_Rela <206F30h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001020                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001038                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001050                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001068                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001080                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001098                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000010B0                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000010C8                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000010E0                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000010F8                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001110                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT link
LOAD:0000000000001128                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001140                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001158                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001170                 Elf64_Rela <206FA8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001188                 Elf64_Rela <206FB0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000011A0                 Elf64_Rela <206FB8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000011A0 LOAD            ends
LOAD:00000000000011A0
.init:00000000000011B8 ; ===========================================================================
.init:00000000000011B8
.init:00000000000011B8 ; Segment type: Pure code
.init:00000000000011B8 ; Segment permissions: Read/Execute
.init:00000000000011B8 _init           segment dword public 'CODE' use64
.init:00000000000011B8                 assume cs:_init
.init:00000000000011B8                 ;org 11B8h
.init:00000000000011B8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000011B8
.init:00000000000011B8 ; =============== S U B R O U T I N E =======================================
.init:00000000000011B8
.init:00000000000011B8
.init:00000000000011B8                 public _init_proc
.init:00000000000011B8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000011B8                 sub     rsp, 8          ; _init
.init:00000000000011BC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000011C3                 test    rax, rax
.init:00000000000011C6                 jz      short loc_11CA
.init:00000000000011C8                 call    rax ; __gmon_start__
.init:00000000000011CA
.init:00000000000011CA loc_11CA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000011CA                 add     rsp, 8
.init:00000000000011CE                 retn
.init:00000000000011CE _init_proc      endp
.init:00000000000011CE
.init:00000000000011CE _init           ends
.init:00000000000011CE
LOAD:00000000000011CF ; ===========================================================================
LOAD:00000000000011CF
LOAD:00000000000011CF ; Segment type: Pure code
LOAD:00000000000011CF ; Segment permissions: Read/Execute
LOAD:00000000000011CF LOAD            segment byte public 'CODE' use64
LOAD:00000000000011CF                 assume cs:LOAD
LOAD:00000000000011CF                 ;org 11CFh
LOAD:00000000000011CF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000011CF                 align 10h
LOAD:00000000000011CF LOAD            ends
LOAD:00000000000011CF
.plt:00000000000011D0 ; ===========================================================================
.plt:00000000000011D0
.plt:00000000000011D0 ; Segment type: Pure code
.plt:00000000000011D0 ; Segment permissions: Read/Execute
.plt:00000000000011D0 _plt            segment para public 'CODE' use64
.plt:00000000000011D0                 assume cs:_plt
.plt:00000000000011D0                 ;org 11D0h
.plt:00000000000011D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000011D0
.plt:00000000000011D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011D0
.plt:00000000000011D0
.plt:00000000000011D0 sub_11D0        proc near               ; CODE XREF: .plt:00000000000011EB↓j
.plt:00000000000011D0                                         ; .plt:00000000000011FB↓j ...
.plt:00000000000011D0 ; __unwind {
.plt:00000000000011D0                 push    cs:qword_206E70
.plt:00000000000011D6                 jmp     cs:qword_206E78
.plt:00000000000011D6 sub_11D0        endp
.plt:00000000000011D6
.plt:00000000000011D6 ; ---------------------------------------------------------------------------
.plt:00000000000011DC                 align 20h
.plt:00000000000011E0
.plt:00000000000011E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011E0
.plt:00000000000011E0 ; Attributes: thunk
.plt:00000000000011E0
.plt:00000000000011E0 ; void free(void *ptr)
.plt:00000000000011E0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000011E0                                         ; quotearg_free+37↓p ...
.plt:00000000000011E0                 jmp     cs:free_ptr
.plt:00000000000011E0 _free           endp
.plt:00000000000011E0
.plt:00000000000011E6 ; ---------------------------------------------------------------------------
.plt:00000000000011E6                 push    0
.plt:00000000000011EB                 jmp     sub_11D0
.plt:00000000000011F0
.plt:00000000000011F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011F0
.plt:00000000000011F0 ; Attributes: noreturn thunk
.plt:00000000000011F0
.plt:00000000000011F0 ; void __noreturn abort(void)
.plt:00000000000011F0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000011F0                                         ; quotearg_buffer_restyled:def_2001↓p ...
.plt:00000000000011F0                 jmp     cs:abort_ptr
.plt:00000000000011F0 _abort          endp
.plt:00000000000011F0
.plt:00000000000011F6 ; ---------------------------------------------------------------------------
.plt:00000000000011F6                 push    1
.plt:00000000000011FB                 jmp     sub_11D0
.plt:0000000000001200
.plt:0000000000001200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001200
.plt:0000000000001200 ; Attributes: thunk
.plt:0000000000001200
.plt:0000000000001200 ; int *__errno_location(void)
.plt:0000000000001200 ___errno_location proc near             ; CODE XREF: main+148↓p
.plt:0000000000001200                                         ; close_stdout+16↓p ...
.plt:0000000000001200                 jmp     cs:__errno_location_ptr
.plt:0000000000001200 ___errno_location endp
.plt:0000000000001200
.plt:0000000000001206 ; ---------------------------------------------------------------------------
.plt:0000000000001206                 push    2
.plt:000000000000120B                 jmp     sub_11D0
.plt:0000000000001210
.plt:0000000000001210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001210
.plt:0000000000001210 ; Attributes: thunk
.plt:0000000000001210
.plt:0000000000001210 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001210 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:0000000000001210                                         ; usage+2C5↓p
.plt:0000000000001210                 jmp     cs:strncmp_ptr
.plt:0000000000001210 _strncmp        endp
.plt:0000000000001210
.plt:0000000000001216 ; ---------------------------------------------------------------------------
.plt:0000000000001216                 push    3
.plt:000000000000121B                 jmp     sub_11D0
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220 ; Attributes: noreturn thunk
.plt:0000000000001220
.plt:0000000000001220 ; void __noreturn _exit(int status)
.plt:0000000000001220 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001220                 jmp     cs:_exit_ptr
.plt:0000000000001220 __exit          endp
.plt:0000000000001220
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:0000000000001226                 push    4
.plt:000000000000122B                 jmp     sub_11D0
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: thunk
.plt:0000000000001230
.plt:0000000000001230 ; size_t __fpending(FILE *fp)
.plt:0000000000001230 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001230                 jmp     cs:__fpending_ptr
.plt:0000000000001230 ___fpending     endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    5
.plt:000000000000123B                 jmp     sub_11D0
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: thunk
.plt:0000000000001240
.plt:0000000000001240 ; char *textdomain(const char *domainname)
.plt:0000000000001240 _textdomain     proc near               ; CODE XREF: main+3C↓p
.plt:0000000000001240                 jmp     cs:textdomain_ptr
.plt:0000000000001240 _textdomain     endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    6
.plt:000000000000124B                 jmp     sub_11D0
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; int fclose(FILE *stream)
.plt:0000000000001250 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001250                                         ; rpl_fclose+6B↓j
.plt:0000000000001250                 jmp     cs:fclose_ptr
.plt:0000000000001250 _fclose         endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    7
.plt:000000000000125B                 jmp     sub_11D0
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001260 _bindtextdomain proc near               ; CODE XREF: main+30↓p
.plt:0000000000001260                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001260 _bindtextdomain endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    8
.plt:000000000000126B                 jmp     sub_11D0
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001270 _dcgettext      proc near               ; CODE XREF: main+DD↓p
.plt:0000000000001270                                         ; main+140↓p ...
.plt:0000000000001270                 jmp     cs:dcgettext_ptr
.plt:0000000000001270 _dcgettext      endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    9
.plt:000000000000127B                 jmp     sub_11D0
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001280 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001280                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001280 ___ctype_get_mb_cur_max endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    0Ah
.plt:000000000000128B                 jmp     sub_11D0
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; size_t strlen(const char *s)
.plt:0000000000001290 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001290                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001290                 jmp     cs:strlen_ptr
.plt:0000000000001290 _strlen         endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    0Bh
.plt:000000000000129B                 jmp     sub_11D0
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: noreturn thunk
.plt:00000000000012A0
.plt:00000000000012A0 ___stack_chk_fail proc near             ; CODE XREF: parse_long_options:loc_1C9A↓p
.plt:00000000000012A0                                         ; parse_gnu_standard_options_only:loc_1DD6↓p ...
.plt:00000000000012A0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000012A0 ___stack_chk_fail endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    0Ch
.plt:00000000000012AB                 jmp     sub_11D0
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000012B0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:00000000000012B0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:00000000000012B0                 jmp     cs:getopt_long_ptr
.plt:00000000000012B0 _getopt_long    endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    0Dh
.plt:00000000000012BB                 jmp     sub_11D0
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000012C0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000012C0                 jmp     cs:mbrtowc_ptr
.plt:00000000000012C0 _mbrtowc        endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    0Eh
.plt:00000000000012CB                 jmp     sub_11D0
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; char *strrchr(const char *s, int c)
.plt:00000000000012D0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000012D0                 jmp     cs:strrchr_ptr
.plt:00000000000012D0 _strrchr        endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    0Fh
.plt:00000000000012DB                 jmp     sub_11D0
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000012E0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000012E0                                         ; rpl_fseeko+3B↓p
.plt:00000000000012E0                 jmp     cs:lseek_ptr
.plt:00000000000012E0 _lseek          endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    10h
.plt:00000000000012EB                 jmp     sub_11D0
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000012F0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000012F0                                         ; xzalloc+12↓j
.plt:00000000000012F0                 jmp     cs:memset_ptr
.plt:00000000000012F0 _memset         endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    11h
.plt:00000000000012FB                 jmp     sub_11D0
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001300 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001300                 jmp     cs:memcmp_ptr
.plt:0000000000001300 _memcmp         endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    12h
.plt:000000000000130B                 jmp     sub_11D0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001310 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001310                                         ; usage+C5↓p ...
.plt:0000000000001310                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001310 _fputs_unlocked endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    13h
.plt:000000000000131B                 jmp     sub_11D0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001320 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001320                 jmp     cs:calloc_ptr
.plt:0000000000001320 _calloc         endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    14h
.plt:000000000000132B                 jmp     sub_11D0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001330 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001330                 jmp     cs:memcpy_ptr
.plt:0000000000001330 _memcpy         endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    15h
.plt:000000000000133B                 jmp     sub_11D0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; int fileno(FILE *stream)
.plt:0000000000001340 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001340                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001340                 jmp     cs:fileno_ptr
.plt:0000000000001340 _fileno         endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    16h
.plt:000000000000134B                 jmp     sub_11D0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; void *malloc(size_t size)
.plt:0000000000001350 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001350                 jmp     cs:malloc_ptr
.plt:0000000000001350 _malloc         endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    17h
.plt:000000000000135B                 jmp     sub_11D0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int fflush(FILE *stream)
.plt:0000000000001360 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001360                                         ; rpl_fflush+3B↓j
.plt:0000000000001360                 jmp     cs:fflush_ptr
.plt:0000000000001360 _fflush         endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    18h
.plt:000000000000136B                 jmp     sub_11D0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; char *nl_langinfo(nl_item item)
.plt:0000000000001370 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001370                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001370 _nl_langinfo    endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    19h
.plt:000000000000137B                 jmp     sub_11D0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; int __freading(FILE *fp)
.plt:0000000000001380 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001380                                         ; rpl_fflush+9↓p
.plt:0000000000001380                 jmp     cs:__freading_ptr
.plt:0000000000001380 ___freading     endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    1Ah
.plt:000000000000138B                 jmp     sub_11D0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001390 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001390                 jmp     cs:realloc_ptr
.plt:0000000000001390 _realloc        endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    1Bh
.plt:000000000000139B                 jmp     sub_11D0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; char *setlocale(int category, const char *locale)
.plt:00000000000013A0 _setlocale      proc near               ; CODE XREF: main+1D↓p
.plt:00000000000013A0                                         ; usage+1EB↓p ...
.plt:00000000000013A0                 jmp     cs:setlocale_ptr
.plt:00000000000013A0 _setlocale      endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    1Ch
.plt:00000000000013AB                 jmp     sub_11D0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:00000000000013B0                                         ; usage+1DF↓p ...
.plt:00000000000013B0                 jmp     cs:__printf_chk_ptr
.plt:00000000000013B0 ___printf_chk   endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    1Dh
.plt:00000000000013BB                 jmp     sub_11D0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000013C0 _error          proc near               ; CODE XREF: main+EB↓p
.plt:00000000000013C0                                         ; main+15F↓p ...
.plt:00000000000013C0                 jmp     cs:error_ptr
.plt:00000000000013C0 _error          endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    1Eh
.plt:00000000000013CB                 jmp     sub_11D0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000013D0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_463A↓j
.plt:00000000000013D0                 jmp     cs:fseeko_ptr
.plt:00000000000013D0 _fseeko         endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1Fh
.plt:00000000000013DB                 jmp     sub_11D0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:00000000000013E0 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:00000000000013E0                 jmp     cs:__cxa_atexit_ptr
.plt:00000000000013E0 ___cxa_atexit   endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    20h ; ' '
.plt:00000000000013EB                 jmp     sub_11D0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int link(const char *from, const char *to)
.plt:00000000000013F0 _link           proc near               ; CODE XREF: main+B7↓p
.plt:00000000000013F0                 jmp     cs:link_ptr
.plt:00000000000013F0 _link           endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    21h ; '!'
.plt:00000000000013FB                 jmp     sub_11D0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ; void __noreturn exit(int status)
.plt:0000000000001400 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001400                                         ; parse_long_options+122↓p ...
.plt:0000000000001400                 jmp     cs:exit_ptr
.plt:0000000000001400 _exit           endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    22h ; '"'
.plt:000000000000140B                 jmp     sub_11D0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001410 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001410                 jmp     cs:fwrite_ptr
.plt:0000000000001410 _fwrite         endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    23h ; '#'
.plt:000000000000141B                 jmp     sub_11D0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001420                                         ; version_etc_arn+37↓p ...
.plt:0000000000001420                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001420 ___fprintf_chk  endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    24h ; '$'
.plt:000000000000142B                 jmp     sub_11D0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001430 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001430                 jmp     cs:mbsinit_ptr
.plt:0000000000001430 _mbsinit        endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    25h ; '%'
.plt:000000000000143B                 jmp     sub_11D0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int iswprint(wint_t wc)
.plt:0000000000001440 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001440                 jmp     cs:iswprint_ptr
.plt:0000000000001440 _iswprint       endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    26h ; '&'
.plt:000000000000144B                 jmp     sub_11D0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001450 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001450                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001450 ___ctype_b_loc  endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    27h ; '''
.plt:000000000000145B                 jmp     sub_11D0
.plt:000000000000145B ; } // starts at 11D0
.plt:000000000000145B _plt            ends
.plt:000000000000145B
.plt.got:0000000000001460 ; ===========================================================================
.plt.got:0000000000001460
.plt.got:0000000000001460 ; Segment type: Pure code
.plt.got:0000000000001460 ; Segment permissions: Read/Execute
.plt.got:0000000000001460 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001460                 assume cs:_plt_got
.plt.got:0000000000001460                 ;org 1460h
.plt.got:0000000000001460                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001460
.plt.got:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001460
.plt.got:0000000000001460 ; Attributes: thunk
.plt.got:0000000000001460
.plt.got:0000000000001460 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001460 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001460 ; __unwind {
.plt.got:0000000000001460                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001460 __cxa_finalize  endp
.plt.got:0000000000001460
.plt.got:0000000000001460 ; ---------------------------------------------------------------------------
.plt.got:0000000000001466                 align 8
.plt.got:0000000000001466 ; } // starts at 1460
.plt.got:0000000000001466 _plt_got        ends
.plt.got:0000000000001466
LOAD:0000000000001468 ; ===========================================================================
LOAD:0000000000001468
LOAD:0000000000001468 ; Segment type: Pure code
LOAD:0000000000001468 ; Segment permissions: Read/Execute
LOAD:0000000000001468 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001468                 assume cs:LOAD
LOAD:0000000000001468                 ;org 1468h
LOAD:0000000000001468                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001468                 align 10h
LOAD:0000000000001468 LOAD            ends
LOAD:0000000000001468
.text:0000000000001470 ; ===========================================================================
.text:0000000000001470
.text:0000000000001470 ; Segment type: Pure code
.text:0000000000001470 ; Segment permissions: Read/Execute
.text:0000000000001470 _text           segment para public 'CODE' use64
.text:0000000000001470                 assume cs:_text
.text:0000000000001470                 ;org 1470h
.text:0000000000001470                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001470
.text:0000000000001470 ; =============== S U B R O U T I N E =======================================
.text:0000000000001470
.text:0000000000001470
.text:0000000000001470 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001470                 public main
.text:0000000000001470 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001470 ; __unwind {
.text:0000000000001470                 push    r12
.text:0000000000001472                 push    rbp
.text:0000000000001473                 mov     ebp, edi
.text:0000000000001475                 push    rbx
.text:0000000000001476                 mov     rdi, [rsi]
.text:0000000000001479                 mov     rbx, rsi
.text:000000000000147C                 call    set_program_name
.text:0000000000001481                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001488                 mov     edi, 6          ; category
.text:000000000000148D                 call    _setlocale
.text:0000000000001492                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001499                 lea     rdi, domainname ; "coreutils"
.text:00000000000014A0                 call    _bindtextdomain
.text:00000000000014A5                 lea     rdi, domainname ; "coreutils"
.text:00000000000014AC                 call    _textdomain
.text:00000000000014B1                 lea     rdi, close_stdout
.text:00000000000014B8                 call    atexit
.text:00000000000014BD                 lea     rax, aMichaelStone ; "Michael Stone"
.text:00000000000014C4                 sub     rsp, 8
.text:00000000000014C8                 mov     r8, cs:Version
.text:00000000000014CF                 push    0
.text:00000000000014D1                 lea     rdx, aLink_0    ; "link"
.text:00000000000014D8                 lea     rcx, unk_47BF
.text:00000000000014DF                 push    rax
.text:00000000000014E0                 lea     rax, usage
.text:00000000000014E7                 mov     r9d, 1
.text:00000000000014ED                 mov     rsi, rbx
.text:00000000000014F0                 mov     edi, ebp
.text:00000000000014F2                 push    rax
.text:00000000000014F3                 xor     eax, eax
.text:00000000000014F5                 call    parse_gnu_standard_options_only
.text:00000000000014FA                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001501                 add     rsp, 20h
.text:0000000000001505                 lea     edx, [rax+1]
.text:0000000000001508                 cmp     edx, ebp
.text:000000000000150A                 jge     short loc_1537
.text:000000000000150C                 movsxd  rdx, eax
.text:000000000000150F                 add     eax, 2
.text:0000000000001512                 cmp     eax, ebp
.text:0000000000001514                 jl      loc_15D4
.text:000000000000151A                 lea     rax, [rdx+1]
.text:000000000000151E                 mov     rsi, [rbx+rax*8] ; to
.text:0000000000001522                 mov     rdi, [rbx+rax*8-8] ; from
.text:0000000000001527                 call    _link
.text:000000000000152C                 test    eax, eax
.text:000000000000152E                 jnz     short loc_156A
.text:0000000000001530                 pop     rbx
.text:0000000000001531                 xor     eax, eax
.text:0000000000001533                 pop     rbp
.text:0000000000001534                 pop     r12
.text:0000000000001536                 retn
.text:0000000000001537 ; ---------------------------------------------------------------------------
.text:0000000000001537
.text:0000000000001537 loc_1537:                               ; CODE XREF: main+9A↑j
.text:0000000000001537                 cmp     eax, ebp
.text:0000000000001539                 jl      loc_160A
.text:000000000000153F                 lea     rsi, msgid      ; "missing operand"
.text:0000000000001546                 mov     edx, 5          ; category
.text:000000000000154B                 xor     edi, edi        ; domainname
.text:000000000000154D                 call    _dcgettext
.text:0000000000001552                 xor     esi, esi        ; errnum
.text:0000000000001554                 mov     rdx, rax        ; format
.text:0000000000001557                 xor     edi, edi        ; status
.text:0000000000001559                 xor     eax, eax
.text:000000000000155B                 call    _error
.text:0000000000001560
.text:0000000000001560 loc_1560:                               ; CODE XREF: main+195↓j
.text:0000000000001560                 mov     edi, 1          ; status
.text:0000000000001565                 call    usage
.text:000000000000156A ; ---------------------------------------------------------------------------
.text:000000000000156A
.text:000000000000156A loc_156A:                               ; CODE XREF: main+BE↑j
.text:000000000000156A                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001571                 mov     esi, 4
.text:0000000000001576                 mov     edi, 1
.text:000000000000157B                 mov     rdx, [rbx+rax*8]
.text:000000000000157F                 call    quotearg_n_style
.text:0000000000001584                 mov     r12, rax
.text:0000000000001587                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:000000000000158E                 mov     esi, 4
.text:0000000000001593                 xor     edi, edi
.text:0000000000001595                 mov     rdx, [rbx+rax*8+8]
.text:000000000000159A                 call    quotearg_n_style
.text:000000000000159F                 lea     rsi, aCannotCreateLi ; "cannot create link %s to %s"
.text:00000000000015A6                 mov     edx, 5          ; category
.text:00000000000015AB                 xor     edi, edi        ; domainname
.text:00000000000015AD                 mov     rbp, rax
.text:00000000000015B0                 call    _dcgettext
.text:00000000000015B5                 mov     rbx, rax
.text:00000000000015B8                 call    ___errno_location
.text:00000000000015BD                 mov     esi, [rax]      ; errnum
.text:00000000000015BF                 mov     r8, r12
.text:00000000000015C2                 mov     rcx, rbp
.text:00000000000015C5                 mov     rdx, rbx        ; format
.text:00000000000015C8                 mov     edi, 1          ; status
.text:00000000000015CD                 xor     eax, eax
.text:00000000000015CF                 call    _error
.text:00000000000015D4
.text:00000000000015D4 loc_15D4:                               ; CODE XREF: main+A4↑j
.text:00000000000015D4                 mov     rdi, [rbx+rdx*8+10h]
.text:00000000000015D9                 call    quote
.text:00000000000015DE                 lea     rsi, aExtraOperandS ; "extra operand %s"
.text:00000000000015E5                 mov     rbx, rax
.text:00000000000015E8                 mov     edx, 5          ; category
.text:00000000000015ED
.text:00000000000015ED loc_15ED:                               ; CODE XREF: main+1B2↓j
.text:00000000000015ED                 xor     edi, edi        ; domainname
.text:00000000000015EF                 call    _dcgettext
.text:00000000000015F4                 mov     rcx, rbx
.text:00000000000015F7                 mov     rdx, rax        ; format
.text:00000000000015FA                 xor     esi, esi        ; errnum
.text:00000000000015FC                 xor     edi, edi        ; status
.text:00000000000015FE                 xor     eax, eax
.text:0000000000001600                 call    _error
.text:0000000000001605                 jmp     loc_1560
.text:000000000000160A ; ---------------------------------------------------------------------------
.text:000000000000160A
.text:000000000000160A loc_160A:                               ; CODE XREF: main+C9↑j
.text:000000000000160A                 mov     rdi, [rbx+rax*8]
.text:000000000000160E                 call    quote
.text:0000000000001613                 mov     edx, 5
.text:0000000000001618                 mov     rbx, rax
.text:000000000000161B                 lea     rsi, aMissingOperand_0 ; "missing operand after %s"
.text:0000000000001622                 jmp     short loc_15ED
.text:0000000000001622 ; } // starts at 1470
.text:0000000000001622 main            endp
.text:0000000000001622
.text:0000000000001622 ; ---------------------------------------------------------------------------
.text:0000000000001624                 align 10h
.text:0000000000001630
.text:0000000000001630 ; =============== S U B R O U T I N E =======================================
.text:0000000000001630
.text:0000000000001630 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001630
.text:0000000000001630 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001630                 public start
.text:0000000000001630 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001630 ; __unwind {
.text:0000000000001630                 xor     ebp, ebp
.text:0000000000001632                 mov     r9, rdx         ; rtld_fini
.text:0000000000001635                 pop     rsi             ; argc
.text:0000000000001636                 mov     rdx, rsp        ; ubp_av
.text:0000000000001639                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000163D                 push    rax
.text:000000000000163E                 push    rsp             ; stack_end
.text:000000000000163F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001646                 lea     rcx, __libc_csu_init ; init
.text:000000000000164D                 lea     rdi, main       ; main
.text:0000000000001654                 call    cs:__libc_start_main_ptr
.text:000000000000165A                 hlt
.text:000000000000165A ; } // starts at 1630
.text:000000000000165A start           endp
.text:000000000000165A
.text:000000000000165A ; ---------------------------------------------------------------------------
.text:000000000000165B                 align 20h
.text:0000000000001660
.text:0000000000001660 ; =============== S U B R O U T I N E =======================================
.text:0000000000001660
.text:0000000000001660 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001660
.text:0000000000001660 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1713↓p
.text:0000000000001660                 lea     rdi, __bss_start
.text:0000000000001667                 push    rbp
.text:0000000000001668                 lea     rax, __bss_start
.text:000000000000166F                 cmp     rax, rdi
.text:0000000000001672                 mov     rbp, rsp
.text:0000000000001675                 jz      short loc_1690
.text:0000000000001677                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000167E                 test    rax, rax
.text:0000000000001681                 jz      short loc_1690
.text:0000000000001683                 pop     rbp
.text:0000000000001684                 jmp     rax
.text:0000000000001684 ; ---------------------------------------------------------------------------
.text:0000000000001686                 align 10h
.text:0000000000001690
.text:0000000000001690 loc_1690:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001690                                         ; deregister_tm_clones+21↑j
.text:0000000000001690                 pop     rbp
.text:0000000000001691                 retn
.text:0000000000001691 deregister_tm_clones endp
.text:0000000000001691
.text:0000000000001691 ; ---------------------------------------------------------------------------
.text:0000000000001692                 align 20h
.text:00000000000016A0
.text:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016A0
.text:00000000000016A0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000016A0
.text:00000000000016A0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000016A0                 lea     rdi, __bss_start
.text:00000000000016A7                 lea     rsi, __bss_start
.text:00000000000016AE                 push    rbp
.text:00000000000016AF                 sub     rsi, rdi
.text:00000000000016B2                 mov     rbp, rsp
.text:00000000000016B5                 sar     rsi, 3
.text:00000000000016B9                 mov     rax, rsi
.text:00000000000016BC                 shr     rax, 3Fh
.text:00000000000016C0                 add     rsi, rax
.text:00000000000016C3                 sar     rsi, 1
.text:00000000000016C6                 jz      short loc_16E0
.text:00000000000016C8                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:00000000000016CF                 test    rax, rax
.text:00000000000016D2                 jz      short loc_16E0
.text:00000000000016D4                 pop     rbp
.text:00000000000016D5                 jmp     rax
.text:00000000000016D5 ; ---------------------------------------------------------------------------
.text:00000000000016D7                 align 20h
.text:00000000000016E0
.text:00000000000016E0 loc_16E0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000016E0                                         ; register_tm_clones+32↑j
.text:00000000000016E0                 pop     rbp
.text:00000000000016E1                 retn
.text:00000000000016E1 register_tm_clones endp
.text:00000000000016E1
.text:00000000000016E1 ; ---------------------------------------------------------------------------
.text:00000000000016E2                 align 10h
.text:00000000000016F0
.text:00000000000016F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016F0
.text:00000000000016F0 ; Attributes: info_from_lumina
.text:00000000000016F0
.text:00000000000016F0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000016F0                 cmp     cs:completed_7697, 0
.text:00000000000016F7                 jnz     short locret_1728
.text:00000000000016F9                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001701                 push    rbp
.text:0000000000001702                 mov     rbp, rsp
.text:0000000000001705                 jz      short loc_1713
.text:0000000000001707                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000170E                 call    __cxa_finalize
.text:0000000000001713
.text:0000000000001713 loc_1713:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001713                 call    deregister_tm_clones
.text:0000000000001718                 mov     cs:completed_7697, 1
.text:000000000000171F                 pop     rbp
.text:0000000000001720                 retn
.text:0000000000001720 ; ---------------------------------------------------------------------------
.text:0000000000001721                 align 8
.text:0000000000001728
.text:0000000000001728 locret_1728:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001728                 rep retn
.text:0000000000001728 __do_global_dtors_aux endp
.text:0000000000001728
.text:0000000000001728 ; ---------------------------------------------------------------------------
.text:000000000000172A                 align 10h
.text:0000000000001730
.text:0000000000001730 ; =============== S U B R O U T I N E =======================================
.text:0000000000001730
.text:0000000000001730 ; Attributes: bp-based frame
.text:0000000000001730
.text:0000000000001730 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001730                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001730                 push    rbp
.text:0000000000001731                 mov     rbp, rsp
.text:0000000000001734                 pop     rbp
.text:0000000000001735                 jmp     register_tm_clones
.text:0000000000001735 frame_dummy     endp
.text:0000000000001735
.text:0000000000001735 ; ---------------------------------------------------------------------------
.text:000000000000173A                 align 20h
.text:0000000000001740
.text:0000000000001740 ; =============== S U B R O U T I N E =======================================
.text:0000000000001740
.text:0000000000001740 ; Attributes: noreturn
.text:0000000000001740
.text:0000000000001740 ; void __fastcall __noreturn usage(int status)
.text:0000000000001740                 public usage
.text:0000000000001740 usage           proc near               ; CODE XREF: main+F5↑p
.text:0000000000001740                                         ; DATA XREF: main+70↑o
.text:0000000000001740
.text:0000000000001740 var_A8          = qword ptr -0A8h
.text:0000000000001740 var_A0          = qword ptr -0A0h
.text:0000000000001740 var_98          = qword ptr -98h
.text:0000000000001740 var_90          = qword ptr -90h
.text:0000000000001740 var_88          = qword ptr -88h
.text:0000000000001740 var_80          = qword ptr -80h
.text:0000000000001740 var_78          = qword ptr -78h
.text:0000000000001740 var_70          = qword ptr -70h
.text:0000000000001740 var_68          = qword ptr -68h
.text:0000000000001740 var_60          = qword ptr -60h
.text:0000000000001740 var_58          = qword ptr -58h
.text:0000000000001740 var_50          = qword ptr -50h
.text:0000000000001740 var_48          = qword ptr -48h
.text:0000000000001740 var_40          = qword ptr -40h
.text:0000000000001740 var_30          = qword ptr -30h
.text:0000000000001740
.text:0000000000001740 ; __unwind {
.text:0000000000001740                 push    r13
.text:0000000000001742                 push    r12
.text:0000000000001744                 mov     edx, 5          ; category
.text:0000000000001749                 push    rbp
.text:000000000000174A                 push    rbx
.text:000000000000174B                 mov     ebp, edi
.text:000000000000174D                 sub     rsp, 88h
.text:0000000000001754                 mov     rbx, cs:program_name
.text:000000000000175B                 mov     rax, fs:28h
.text:0000000000001764                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001769                 xor     eax, eax
.text:000000000000176B                 test    edi, edi
.text:000000000000176D                 jz      short loc_179D
.text:000000000000176F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001776                 xor     edi, edi        ; domainname
.text:0000000000001778                 call    _dcgettext
.text:000000000000177D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001784                 mov     rdx, rax
.text:0000000000001787                 mov     rcx, rbx
.text:000000000000178A                 mov     esi, 1
.text:000000000000178F                 xor     eax, eax
.text:0000000000001791                 call    ___fprintf_chk
.text:0000000000001796
.text:0000000000001796 loc_1796:                               ; CODE XREF: usage+27E↓j
.text:0000000000001796                 mov     edi, ebp        ; status
.text:0000000000001798                 call    _exit
.text:000000000000179D ; ---------------------------------------------------------------------------
.text:000000000000179D
.text:000000000000179D loc_179D:                               ; CODE XREF: usage+2D↑j
.text:000000000000179D                 lea     rsi, aUsageSFile1Fil ; "Usage: %s FILE1 FILE2\n  or:  %s OPTION"...
.text:00000000000017A4                 xor     edi, edi        ; domainname
.text:00000000000017A6                 call    _dcgettext
.text:00000000000017AB                 mov     rcx, rbx
.text:00000000000017AE                 mov     rdx, rbx
.text:00000000000017B1                 mov     rsi, rax
.text:00000000000017B4                 mov     edi, 1
.text:00000000000017B9                 xor     eax, eax
.text:00000000000017BB                 call    ___printf_chk
.text:00000000000017C0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000017C7                 lea     rsi, aCallTheLinkFun ; "Call the link function to create a link"...
.text:00000000000017CE                 mov     edx, 5          ; category
.text:00000000000017D3                 xor     edi, edi        ; domainname
.text:00000000000017D5                 call    _dcgettext
.text:00000000000017DA                 mov     rsi, rbx        ; stream
.text:00000000000017DD                 mov     rdi, rax        ; s
.text:00000000000017E0                 call    _fputs_unlocked
.text:00000000000017E5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000017EC                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000017F3                 mov     edx, 5          ; category
.text:00000000000017F8                 xor     edi, edi        ; domainname
.text:00000000000017FA                 call    _dcgettext
.text:00000000000017FF                 mov     rsi, rbx        ; stream
.text:0000000000001802                 mov     rdi, rax        ; s
.text:0000000000001805                 call    _fputs_unlocked
.text:000000000000180A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001811                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001818                 mov     edx, 5          ; category
.text:000000000000181D                 xor     edi, edi        ; domainname
.text:000000000000181F                 call    _dcgettext
.text:0000000000001824                 mov     rsi, rbx        ; stream
.text:0000000000001827                 mov     rdi, rax        ; s
.text:000000000000182A                 lea     rbx, aLink_0    ; "link"
.text:0000000000001831                 call    _fputs_unlocked
.text:0000000000001836                 lea     rax, asc_4749   ; "["
.text:000000000000183D                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001844                 mov     [rsp+0A8h+var_48], 0
.text:000000000000184D                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001856                 mov     rdx, rsp
.text:0000000000001859                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000185D                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001864                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001869                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001870                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001875                 lea     rax, domainname ; "coreutils"
.text:000000000000187C                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001881                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001888                 mov     [rsp+0A8h+var_98], rax
.text:000000000000188D                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001894                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001899                 mov     [rsp+0A8h+var_90], rax
.text:000000000000189E                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000018A5                 mov     [rsp+0A8h+var_88], rax
.text:00000000000018AA                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000018B1                 mov     [rsp+0A8h+var_80], rax
.text:00000000000018B6                 mov     [rsp+0A8h+var_70], rax
.text:00000000000018BB                 mov     [rsp+0A8h+var_60], rax
.text:00000000000018C0                 mov     [rsp+0A8h+var_50], rax
.text:00000000000018C5                 nop     dword ptr [rax]
.text:00000000000018C8
.text:00000000000018C8 loc_18C8:                               ; CODE XREF: usage+1A5↓j
.text:00000000000018C8                 add     rdx, 10h
.text:00000000000018CC                 mov     rdi, [rdx]
.text:00000000000018CF                 test    rdi, rdi
.text:00000000000018D2                 jz      short loc_18E7
.text:00000000000018D4                 mov     ecx, 5
.text:00000000000018D9                 mov     rsi, rbx
.text:00000000000018DC                 repe cmpsb
.text:00000000000018DE                 setnbe  al
.text:00000000000018E1                 sbb     al, 0
.text:00000000000018E3                 test    al, al
.text:00000000000018E5                 jnz     short loc_18C8
.text:00000000000018E7
.text:00000000000018E7 loc_18E7:                               ; CODE XREF: usage+192↑j
.text:00000000000018E7                 mov     r12, [rdx+8]
.text:00000000000018EB                 xor     edi, edi        ; domainname
.text:00000000000018ED                 mov     edx, 5          ; category
.text:00000000000018F2                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:00000000000018F9                 test    r12, r12
.text:00000000000018FC                 jz      loc_19C3
.text:0000000000001902                 call    _dcgettext
.text:0000000000001907                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000190E                 lea     rdx, unk_47BF
.text:0000000000001915                 mov     rsi, rax
.text:0000000000001918                 mov     edi, 1
.text:000000000000191D                 xor     eax, eax
.text:000000000000191F                 call    ___printf_chk
.text:0000000000001924                 xor     esi, esi        ; locale
.text:0000000000001926                 mov     edi, 5          ; category
.text:000000000000192B                 call    _setlocale
.text:0000000000001930                 test    rax, rax
.text:0000000000001933                 jz      short loc_1951
.text:0000000000001935                 lea     rsi, s2         ; "en_"
.text:000000000000193C                 mov     edx, 3          ; n
.text:0000000000001941                 mov     rdi, rax        ; s1
.text:0000000000001944                 call    _strncmp
.text:0000000000001949                 test    eax, eax
.text:000000000000194B                 jnz     loc_1A58
.text:0000000000001951
.text:0000000000001951 loc_1951:                               ; CODE XREF: usage+1F3↑j
.text:0000000000001951                                         ; usage+33D↓j
.text:0000000000001951                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001958                 xor     edi, edi        ; domainname
.text:000000000000195A                 mov     edx, 5          ; category
.text:000000000000195F                 call    _dcgettext
.text:0000000000001964                 lea     rcx, aLink_0    ; "link"
.text:000000000000196B                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001972                 mov     rsi, rax
.text:0000000000001975                 mov     edi, 1
.text:000000000000197A                 xor     eax, eax
.text:000000000000197C                 call    ___printf_chk
.text:0000000000001981                 cmp     r12, rbx
.text:0000000000001984                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000198B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001992                 cmovz   rbx, rcx
.text:0000000000001996
.text:0000000000001996 loc_1996:                               ; CODE XREF: usage+30C↓j
.text:0000000000001996                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:000000000000199D                 xor     edi, edi        ; domainname
.text:000000000000199F                 mov     edx, 5          ; category
.text:00000000000019A4                 call    _dcgettext
.text:00000000000019A9                 mov     rcx, rbx
.text:00000000000019AC                 mov     rsi, rax
.text:00000000000019AF                 mov     rdx, r12
.text:00000000000019B2                 mov     edi, 1
.text:00000000000019B7                 xor     eax, eax
.text:00000000000019B9                 call    ___printf_chk
.text:00000000000019BE                 jmp     loc_1796
.text:00000000000019C3 ; ---------------------------------------------------------------------------
.text:00000000000019C3
.text:00000000000019C3 loc_19C3:                               ; CODE XREF: usage+1BC↑j
.text:00000000000019C3                 call    _dcgettext
.text:00000000000019C8                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000019CF                 lea     rdx, unk_47BF
.text:00000000000019D6                 mov     rsi, rax
.text:00000000000019D9                 mov     edi, 1
.text:00000000000019DE                 xor     eax, eax
.text:00000000000019E0                 call    ___printf_chk
.text:00000000000019E5                 xor     esi, esi        ; locale
.text:00000000000019E7                 mov     edi, 5          ; category
.text:00000000000019EC                 call    _setlocale
.text:00000000000019F1                 test    rax, rax
.text:00000000000019F4                 jz      short loc_1A0E
.text:00000000000019F6                 lea     rsi, s2         ; "en_"
.text:00000000000019FD                 mov     edx, 3          ; n
.text:0000000000001A02                 mov     rdi, rax        ; s1
.text:0000000000001A05                 call    _strncmp
.text:0000000000001A0A                 test    eax, eax
.text:0000000000001A0C                 jnz     short loc_1A51
.text:0000000000001A0E
.text:0000000000001A0E loc_1A0E:                               ; CODE XREF: usage+2B4↑j
.text:0000000000001A0E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001A15                 mov     edx, 5          ; category
.text:0000000000001A1A                 xor     edi, edi        ; domainname
.text:0000000000001A1C                 lea     r12, aLink_0    ; "link"
.text:0000000000001A23                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001A2A                 call    _dcgettext
.text:0000000000001A2F                 lea     rcx, aLink_0    ; "link"
.text:0000000000001A36                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001A3D                 mov     rsi, rax
.text:0000000000001A40                 mov     edi, 1
.text:0000000000001A45                 xor     eax, eax
.text:0000000000001A47                 call    ___printf_chk
.text:0000000000001A4C                 jmp     loc_1996
.text:0000000000001A51 ; ---------------------------------------------------------------------------
.text:0000000000001A51
.text:0000000000001A51 loc_1A51:                               ; CODE XREF: usage+2CC↑j
.text:0000000000001A51                 lea     r12, aLink_0    ; "link"
.text:0000000000001A58
.text:0000000000001A58 loc_1A58:                               ; CODE XREF: usage+20B↑j
.text:0000000000001A58                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001A5F                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001A66                 xor     edi, edi        ; domainname
.text:0000000000001A68                 mov     edx, 5          ; category
.text:0000000000001A6D                 call    _dcgettext
.text:0000000000001A72                 mov     rsi, r13        ; stream
.text:0000000000001A75                 mov     rdi, rax        ; s
.text:0000000000001A78                 call    _fputs_unlocked
.text:0000000000001A7D                 jmp     loc_1951
.text:0000000000001A7D ; } // starts at 1740
.text:0000000000001A7D usage           endp
.text:0000000000001A7D
.text:0000000000001A7D ; ---------------------------------------------------------------------------
.text:0000000000001A82                 align 10h
.text:0000000000001A90
.text:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A90
.text:0000000000001A90
.text:0000000000001A90                 public close_stdout_set_file_name
.text:0000000000001A90 close_stdout_set_file_name proc near
.text:0000000000001A90 ; __unwind {
.text:0000000000001A90                 mov     cs:file_name, rdi
.text:0000000000001A97                 retn
.text:0000000000001A97 ; } // starts at 1A90
.text:0000000000001A97 close_stdout_set_file_name endp
.text:0000000000001A97
.text:0000000000001A97 ; ---------------------------------------------------------------------------
.text:0000000000001A98                 align 20h
.text:0000000000001AA0
.text:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AA0
.text:0000000000001AA0
.text:0000000000001AA0                 public close_stdout_set_ignore_EPIPE
.text:0000000000001AA0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001AA0 ; __unwind {
.text:0000000000001AA0                 mov     cs:ignore_EPIPE, dil
.text:0000000000001AA7                 retn
.text:0000000000001AA7 ; } // starts at 1AA0
.text:0000000000001AA7 close_stdout_set_ignore_EPIPE endp
.text:0000000000001AA7
.text:0000000000001AA7 ; ---------------------------------------------------------------------------
.text:0000000000001AA8                 align 10h
.text:0000000000001AB0
.text:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AB0
.text:0000000000001AB0 ; Attributes: info_from_lumina
.text:0000000000001AB0
.text:0000000000001AB0 ; void __cdecl close_stdout()
.text:0000000000001AB0                 public close_stdout
.text:0000000000001AB0 close_stdout    proc near               ; DATA XREF: main+41↑o
.text:0000000000001AB0 ; __unwind {
.text:0000000000001AB0                 push    rbp
.text:0000000000001AB1                 push    rbx
.text:0000000000001AB2                 sub     rsp, 8
.text:0000000000001AB6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001ABD                 call    close_stream
.text:0000000000001AC2                 test    eax, eax
.text:0000000000001AC4                 jz      short loc_1ADC
.text:0000000000001AC6                 call    ___errno_location
.text:0000000000001ACB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001AD2                 mov     rbx, rax
.text:0000000000001AD5                 jz      short loc_1AF3
.text:0000000000001AD7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001ADA                 jnz     short loc_1AF3
.text:0000000000001ADC
.text:0000000000001ADC loc_1ADC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001ADC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001AE3                 call    close_stream
.text:0000000000001AE8                 test    eax, eax
.text:0000000000001AEA                 jnz     short loc_1B32
.text:0000000000001AEC                 add     rsp, 8
.text:0000000000001AF0                 pop     rbx
.text:0000000000001AF1                 pop     rbp
.text:0000000000001AF2                 retn
.text:0000000000001AF3 ; ---------------------------------------------------------------------------
.text:0000000000001AF3
.text:0000000000001AF3 loc_1AF3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001AF3                                         ; close_stdout+2A↑j
.text:0000000000001AF3                 lea     rsi, aWriteError ; "write error"
.text:0000000000001AFA                 xor     edi, edi        ; domainname
.text:0000000000001AFC                 mov     edx, 5          ; category
.text:0000000000001B01                 call    _dcgettext
.text:0000000000001B06                 mov     rdi, cs:file_name
.text:0000000000001B0D                 mov     rbp, rax
.text:0000000000001B10                 test    rdi, rdi
.text:0000000000001B13                 jz      short loc_1B3D
.text:0000000000001B15                 call    quotearg_colon
.text:0000000000001B1A                 mov     esi, [rbx]      ; errnum
.text:0000000000001B1C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001B23                 mov     rcx, rax
.text:0000000000001B26                 mov     r8, rbp
.text:0000000000001B29                 xor     edi, edi        ; status
.text:0000000000001B2B                 xor     eax, eax
.text:0000000000001B2D                 call    _error
.text:0000000000001B32
.text:0000000000001B32 loc_1B32:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001B32                                         ; close_stdout+A2↓j
.text:0000000000001B32                 mov     edi, cs:exit_failure ; status
.text:0000000000001B38                 call    __exit
.text:0000000000001B3D ; ---------------------------------------------------------------------------
.text:0000000000001B3D
.text:0000000000001B3D loc_1B3D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001B3D                 mov     esi, [rbx]      ; errnum
.text:0000000000001B3F                 lea     rdx, format+4   ; format
.text:0000000000001B46                 mov     rcx, rax
.text:0000000000001B49                 xor     edi, edi        ; status
.text:0000000000001B4B                 xor     eax, eax
.text:0000000000001B4D                 call    _error
.text:0000000000001B52                 jmp     short loc_1B32
.text:0000000000001B52 ; } // starts at 1AB0
.text:0000000000001B52 close_stdout    endp
.text:0000000000001B52
.text:0000000000001B52 ; ---------------------------------------------------------------------------
.text:0000000000001B54                 align 20h
.text:0000000000001B60
.text:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001B60
.text:0000000000001B60
.text:0000000000001B60                 public parse_long_options
.text:0000000000001B60 parse_long_options proc near
.text:0000000000001B60
.text:0000000000001B60 var_100         = qword ptr -100h
.text:0000000000001B60 var_F8          = dword ptr -0F8h
.text:0000000000001B60 var_F4          = dword ptr -0F4h
.text:0000000000001B60 var_F0          = qword ptr -0F0h
.text:0000000000001B60 var_E8          = qword ptr -0E8h
.text:0000000000001B60 var_E0          = qword ptr -0E0h
.text:0000000000001B60 var_D8          = byte ptr -0D8h
.text:0000000000001B60 var_A8          = xmmword ptr -0A8h
.text:0000000000001B60 var_98          = xmmword ptr -98h
.text:0000000000001B60 var_88          = xmmword ptr -88h
.text:0000000000001B60 var_78          = xmmword ptr -78h
.text:0000000000001B60 var_68          = xmmword ptr -68h
.text:0000000000001B60 var_58          = xmmword ptr -58h
.text:0000000000001B60 var_48          = xmmword ptr -48h
.text:0000000000001B60 var_38          = xmmword ptr -38h
.text:0000000000001B60 arg_0           = byte ptr  8
.text:0000000000001B60
.text:0000000000001B60 ; __unwind {
.text:0000000000001B60                 push    r13
.text:0000000000001B62                 push    r12
.text:0000000000001B64                 mov     r13, r8
.text:0000000000001B67                 push    rbp
.text:0000000000001B68                 push    rbx
.text:0000000000001B69                 mov     rbp, rdx
.text:0000000000001B6C                 mov     r12, rcx
.text:0000000000001B6F                 sub     rsp, 0E8h
.text:0000000000001B76                 test    al, al
.text:0000000000001B78                 jz      short loc_1BB4
.text:0000000000001B7A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000001B7F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000001B84                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000001B8C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000001B94                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000001B9C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000001BA4                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000001BAC                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000001BB4
.text:0000000000001BB4 loc_1BB4:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000001BB4                 mov     rax, fs:28h
.text:0000000000001BBD                 mov     [rsp+108h+var_E0], rax
.text:0000000000001BC2                 xor     eax, eax
.text:0000000000001BC4                 cmp     edi, 2
.text:0000000000001BC7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001BCD                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000001BD7                 jz      short loc_1C10
.text:0000000000001BD9
.text:0000000000001BD9 loc_1BD9:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000001BD9                                         ; parse_long_options+DD↓j ...
.text:0000000000001BD9                 mov     rax, [rsp+108h+var_E0]
.text:0000000000001BDE                 xor     rax, fs:28h
.text:0000000000001BE7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001BED                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001BF7                 jnz     loc_1C9A
.text:0000000000001BFD                 add     rsp, 0E8h
.text:0000000000001C04                 pop     rbx
.text:0000000000001C05                 pop     rbp
.text:0000000000001C06                 pop     r12
.text:0000000000001C08                 pop     r13
.text:0000000000001C0A                 retn
.text:0000000000001C0A ; ---------------------------------------------------------------------------
.text:0000000000001C0B                 align 10h
.text:0000000000001C10
.text:0000000000001C10 loc_1C10:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000001C10                 lea     rcx, long_options ; longopts
.text:0000000000001C17                 lea     rdx, shortopts  ; "+"
.text:0000000000001C1E                 xor     r8d, r8d        ; longind
.text:0000000000001C21                 mov     [rsp+108h+var_100], r9
.text:0000000000001C26                 call    _getopt_long
.text:0000000000001C2B                 cmp     eax, 0FFFFFFFFh
.text:0000000000001C2E                 jz      short loc_1BD9
.text:0000000000001C30                 cmp     eax, 68h ; 'h'
.text:0000000000001C33                 mov     r9, [rsp+108h+var_100]
.text:0000000000001C38                 jz      short loc_1C90
.text:0000000000001C3A                 cmp     eax, 76h ; 'v'
.text:0000000000001C3D                 jnz     short loc_1BD9
.text:0000000000001C3F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000001C47                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C4E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000001C53                 mov     rcx, r13
.text:0000000000001C56                 mov     rdx, r12
.text:0000000000001C59                 mov     rsi, rbp
.text:0000000000001C5C                 mov     [rsp+108h+var_F0], rax
.text:0000000000001C61                 lea     rax, [rsp+108h+var_D8]
.text:0000000000001C66                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000001C6E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000001C76                 mov     [rsp+108h+var_E8], rax
.text:0000000000001C7B                 call    version_etc_va
.text:0000000000001C80                 xor     edi, edi        ; status
.text:0000000000001C82                 call    _exit
.text:0000000000001C82 ; ---------------------------------------------------------------------------
.text:0000000000001C87                 align 10h
.text:0000000000001C90
.text:0000000000001C90 loc_1C90:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000001C90                 xor     edi, edi
.text:0000000000001C92                 call    r9
.text:0000000000001C95                 jmp     loc_1BD9
.text:0000000000001C9A ; ---------------------------------------------------------------------------
.text:0000000000001C9A
.text:0000000000001C9A loc_1C9A:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000001C9A                 call    ___stack_chk_fail
.text:0000000000001C9A ; } // starts at 1B60
.text:0000000000001C9A parse_long_options endp
.text:0000000000001C9A
.text:0000000000001C9A ; ---------------------------------------------------------------------------
.text:0000000000001C9F                 align 20h
.text:0000000000001CA0
.text:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001CA0
.text:0000000000001CA0
.text:0000000000001CA0                 public parse_gnu_standard_options_only
.text:0000000000001CA0 parse_gnu_standard_options_only proc near
.text:0000000000001CA0                                         ; CODE XREF: main+85↑p
.text:0000000000001CA0
.text:0000000000001CA0 var_F8          = dword ptr -0F8h
.text:0000000000001CA0 var_F4          = dword ptr -0F4h
.text:0000000000001CA0 var_F0          = qword ptr -0F0h
.text:0000000000001CA0 var_E8          = qword ptr -0E8h
.text:0000000000001CA0 var_E0          = qword ptr -0E0h
.text:0000000000001CA0 var_D8          = byte ptr -0D8h
.text:0000000000001CA0 var_A8          = xmmword ptr -0A8h
.text:0000000000001CA0 var_98          = xmmword ptr -98h
.text:0000000000001CA0 var_88          = xmmword ptr -88h
.text:0000000000001CA0 var_78          = xmmword ptr -78h
.text:0000000000001CA0 var_68          = xmmword ptr -68h
.text:0000000000001CA0 var_58          = xmmword ptr -58h
.text:0000000000001CA0 var_48          = xmmword ptr -48h
.text:0000000000001CA0 var_38          = xmmword ptr -38h
.text:0000000000001CA0 arg_0           = qword ptr  8
.text:0000000000001CA0 arg_8           = byte ptr  10h
.text:0000000000001CA0
.text:0000000000001CA0 ; __unwind {
.text:0000000000001CA0                 push    r14
.text:0000000000001CA2                 push    r13
.text:0000000000001CA4                 mov     r14, r8
.text:0000000000001CA7                 push    r12
.text:0000000000001CA9                 push    rbp
.text:0000000000001CAA                 mov     r12, rdx
.text:0000000000001CAD                 push    rbx
.text:0000000000001CAE                 mov     r13, rcx
.text:0000000000001CB1                 sub     rsp, 0D0h
.text:0000000000001CB8                 test    al, al
.text:0000000000001CBA                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000001CC2                 jz      short loc_1CFB
.text:0000000000001CC4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000001CC9                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000001CCE                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000001CD3                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000001CDB                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000001CE3                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000001CEB                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000001CF3                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000001CFB
.text:0000000000001CFB loc_1CFB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000001CFB                 mov     rax, fs:28h
.text:0000000000001D04                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000001D09                 xor     eax, eax
.text:0000000000001D0B                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001D12                 lea     rax, shortopts  ; "+"
.text:0000000000001D19                 test    r9b, r9b
.text:0000000000001D1C                 lea     rcx, long_options ; longopts
.text:0000000000001D23                 cmovz   rdx, rax        ; shortopts
.text:0000000000001D27                 xor     r8d, r8d        ; longind
.text:0000000000001D2A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001D30                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000001D3A                 call    _getopt_long
.text:0000000000001D3F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001D42                 jz      short loc_1DA8
.text:0000000000001D44                 cmp     eax, 68h ; 'h'
.text:0000000000001D47                 jz      loc_1DD0
.text:0000000000001D4D                 cmp     eax, 76h ; 'v'
.text:0000000000001D50                 jnz     short loc_1DA0
.text:0000000000001D52                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000001D5A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D61                 mov     r8, rsp
.text:0000000000001D64                 mov     rcx, r14
.text:0000000000001D67                 mov     rdx, r13
.text:0000000000001D6A                 mov     rsi, r12
.text:0000000000001D6D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000001D72                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000001D77                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000001D7E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000001D86                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000001D8B                 call    version_etc_va
.text:0000000000001D90                 xor     edi, edi        ; status
.text:0000000000001D92                 call    _exit
.text:0000000000001D92 ; ---------------------------------------------------------------------------
.text:0000000000001D97                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 loc_1DA0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000001DA0                 mov     edi, cs:exit_failure
.text:0000000000001DA6                 call    rbp
.text:0000000000001DA8
.text:0000000000001DA8 loc_1DA8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000001DA8                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000001DA8                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000001DAD                 xor     rax, fs:28h
.text:0000000000001DB6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001DBC                 jnz     short loc_1DD6
.text:0000000000001DBE                 add     rsp, 0D0h
.text:0000000000001DC5                 pop     rbx
.text:0000000000001DC6                 pop     rbp
.text:0000000000001DC7                 pop     r12
.text:0000000000001DC9                 pop     r13
.text:0000000000001DCB                 pop     r14
.text:0000000000001DCD                 retn
.text:0000000000001DCD ; ---------------------------------------------------------------------------
.text:0000000000001DCE                 align 10h
.text:0000000000001DD0
.text:0000000000001DD0 loc_1DD0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000001DD0                 xor     edi, edi
.text:0000000000001DD2                 call    rbp
.text:0000000000001DD4                 jmp     short loc_1DA8
.text:0000000000001DD6 ; ---------------------------------------------------------------------------
.text:0000000000001DD6
.text:0000000000001DD6 loc_1DD6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000001DD6                 call    ___stack_chk_fail
.text:0000000000001DD6 ; } // starts at 1CA0
.text:0000000000001DD6 parse_gnu_standard_options_only endp
.text:0000000000001DD6
.text:0000000000001DD6 ; ---------------------------------------------------------------------------
.text:0000000000001DDB                 align 20h
.text:0000000000001DE0
.text:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DE0
.text:0000000000001DE0
.text:0000000000001DE0                 public set_program_name
.text:0000000000001DE0 set_program_name proc near              ; CODE XREF: main+C↑p
.text:0000000000001DE0 ; __unwind {
.text:0000000000001DE0                 test    rdi, rdi
.text:0000000000001DE3                 push    rbx
.text:0000000000001DE4                 jz      short loc_1E5D
.text:0000000000001DE6                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001DEB                 mov     rbx, rdi
.text:0000000000001DEE                 call    _strrchr
.text:0000000000001DF3                 test    rax, rax
.text:0000000000001DF6                 jz      short loc_1E4D
.text:0000000000001DF8                 lea     r8, [rax+1]
.text:0000000000001DFC                 mov     rdx, r8
.text:0000000000001DFF                 sub     rdx, rbx
.text:0000000000001E02                 cmp     rdx, 6
.text:0000000000001E06                 jle     short loc_1E4D
.text:0000000000001E08                 lea     rsi, [rax-6]
.text:0000000000001E0C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001E13                 mov     ecx, 7
.text:0000000000001E18                 repe cmpsb
.text:0000000000001E1A                 setnbe  dl
.text:0000000000001E1D                 sbb     dl, 0
.text:0000000000001E20                 test    dl, dl
.text:0000000000001E22                 jnz     short loc_1E4D
.text:0000000000001E24                 lea     rdi, aLt        ; "lt-"
.text:0000000000001E2B                 mov     ecx, 3
.text:0000000000001E30                 mov     rsi, r8
.text:0000000000001E33                 mov     rbx, r8
.text:0000000000001E36                 repe cmpsb
.text:0000000000001E38                 setnbe  dl
.text:0000000000001E3B                 sbb     dl, 0
.text:0000000000001E3E                 test    dl, dl
.text:0000000000001E40                 jnz     short loc_1E4D
.text:0000000000001E42                 lea     rbx, [rax+4]
.text:0000000000001E46                 mov     cs:__bss_start, rbx
.text:0000000000001E4D
.text:0000000000001E4D loc_1E4D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001E4D                                         ; set_program_name+26↑j ...
.text:0000000000001E4D                 mov     cs:program_name, rbx
.text:0000000000001E54                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001E5B                 pop     rbx
.text:0000000000001E5C                 retn
.text:0000000000001E5D ; ---------------------------------------------------------------------------
.text:0000000000001E5D
.text:0000000000001E5D loc_1E5D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001E5D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001E64                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001E6B                 mov     edx, 37h ; '7'  ; n
.text:0000000000001E70                 mov     esi, 1          ; size
.text:0000000000001E75                 call    _fwrite
.text:0000000000001E7A                 call    _abort
.text:0000000000001E7A ; } // starts at 1DE0
.text:0000000000001E7A set_program_name endp
.text:0000000000001E7A
.text:0000000000001E7A ; ---------------------------------------------------------------------------
.text:0000000000001E7F                 align 20h
.text:0000000000001E80
.text:0000000000001E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E80
.text:0000000000001E80 ; Attributes: info_from_lumina
.text:0000000000001E80
.text:0000000000001E80 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001E80 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001E80                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001E80 ; __unwind {
.text:0000000000001E80                 push    rbp
.text:0000000000001E81                 push    rbx
.text:0000000000001E82                 mov     rbp, rdi
.text:0000000000001E85                 mov     ebx, esi
.text:0000000000001E87                 sub     rsp, 8
.text:0000000000001E8B                 call    locale_charset
.text:0000000000001E90                 movzx   edx, byte ptr [rax]
.text:0000000000001E93                 and     edx, 0FFFFFFDFh
.text:0000000000001E96                 cmp     dl, 55h ; 'U'
.text:0000000000001E99                 jz      short loc_1F10
.text:0000000000001E9B                 cmp     dl, 47h ; 'G'
.text:0000000000001E9E                 jz      short loc_1EC0
.text:0000000000001EA0
.text:0000000000001EA0 loc_1EA0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001EA0                                         ; gettext_quote+50↓j ...
.text:0000000000001EA0                 lea     rax, unk_4A93
.text:0000000000001EA7                 lea     rdx, asc_4A95   ; "'"
.text:0000000000001EAE                 cmp     ebx, 9
.text:0000000000001EB1                 cmovnz  rax, rdx
.text:0000000000001EB5                 add     rsp, 8
.text:0000000000001EB9                 pop     rbx
.text:0000000000001EBA                 pop     rbp
.text:0000000000001EBB                 retn
.text:0000000000001EBB ; ---------------------------------------------------------------------------
.text:0000000000001EBC                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 loc_1EC0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001EC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001EC4                 and     edx, 0FFFFFFDFh
.text:0000000000001EC7                 cmp     dl, 42h ; 'B'
.text:0000000000001ECA                 jnz     short loc_1EA0
.text:0000000000001ECC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001ED0                 jnz     short loc_1EA0
.text:0000000000001ED2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001ED6                 jnz     short loc_1EA0
.text:0000000000001ED8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001EDC                 jnz     short loc_1EA0
.text:0000000000001EDE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001EE2                 jnz     short loc_1EA0
.text:0000000000001EE4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001EE8                 jnz     short loc_1EA0
.text:0000000000001EEA                 cmp     byte ptr [rax+7], 0
.text:0000000000001EEE                 jnz     short loc_1EA0
.text:0000000000001EF0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001EF4                 lea     rax, unk_4A8C
.text:0000000000001EFB                 lea     rdx, unk_4A90
.text:0000000000001F02                 cmovnz  rax, rdx
.text:0000000000001F06                 add     rsp, 8
.text:0000000000001F0A                 pop     rbx
.text:0000000000001F0B                 pop     rbp
.text:0000000000001F0C                 retn
.text:0000000000001F0C ; ---------------------------------------------------------------------------
.text:0000000000001F0D                 align 10h
.text:0000000000001F10
.text:0000000000001F10 loc_1F10:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001F10                 movzx   edx, byte ptr [rax+1]
.text:0000000000001F14                 and     edx, 0FFFFFFDFh
.text:0000000000001F17                 cmp     dl, 54h ; 'T'
.text:0000000000001F1A                 jnz     short loc_1EA0
.text:0000000000001F1C                 movzx   edx, byte ptr [rax+2]
.text:0000000000001F20                 and     edx, 0FFFFFFDFh
.text:0000000000001F23                 cmp     dl, 46h ; 'F'
.text:0000000000001F26                 jnz     loc_1EA0
.text:0000000000001F2C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001F30                 jnz     loc_1EA0
.text:0000000000001F36                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001F3A                 jnz     loc_1EA0
.text:0000000000001F40                 cmp     byte ptr [rax+5], 0
.text:0000000000001F44                 jnz     loc_1EA0
.text:0000000000001F4A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001F4E                 lea     rax, unk_4A84
.text:0000000000001F55                 lea     rdx, unk_4A88
.text:0000000000001F5C                 cmovnz  rax, rdx
.text:0000000000001F60                 add     rsp, 8
.text:0000000000001F64                 pop     rbx
.text:0000000000001F65                 pop     rbp
.text:0000000000001F66                 retn
.text:0000000000001F66 ; } // starts at 1E80
.text:0000000000001F66 gettext_quote   endp
.text:0000000000001F66
.text:0000000000001F66 ; ---------------------------------------------------------------------------
.text:0000000000001F67                 align 10h
.text:0000000000001F70
.text:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F70
.text:0000000000001F70 ; Attributes: info_from_lumina
.text:0000000000001F70
.text:0000000000001F70 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001F70 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001F70                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001F70
.text:0000000000001F70 var_E0          = dword ptr -0E0h
.text:0000000000001F70 var_DB          = byte ptr -0DBh
.text:0000000000001F70 var_DA          = byte ptr -0DAh
.text:0000000000001F70 var_D9          = byte ptr -0D9h
.text:0000000000001F70 s               = qword ptr -0D8h
.text:0000000000001F70 n               = qword ptr -0D0h
.text:0000000000001F70 var_C8          = qword ptr -0C8h
.text:0000000000001F70 ps              = qword ptr -0C0h
.text:0000000000001F70 var_B8          = qword ptr -0B8h
.text:0000000000001F70 var_B0          = qword ptr -0B0h
.text:0000000000001F70 var_A8          = qword ptr -0A8h
.text:0000000000001F70 s2              = qword ptr -0A0h
.text:0000000000001F70 var_98          = qword ptr -98h
.text:0000000000001F70 var_90          = qword ptr -90h
.text:0000000000001F70 var_88          = qword ptr -88h
.text:0000000000001F70 var_80          = qword ptr -80h
.text:0000000000001F70 var_78          = qword ptr -78h
.text:0000000000001F70 var_70          = dword ptr -70h
.text:0000000000001F70 var_6C          = byte ptr -6Ch
.text:0000000000001F70 var_6B          = byte ptr -6Bh
.text:0000000000001F70 var_6A          = byte ptr -6Ah
.text:0000000000001F70 var_69          = byte ptr -69h
.text:0000000000001F70 var_68          = qword ptr -68h
.text:0000000000001F70 var_60          = qword ptr -60h
.text:0000000000001F70 wc              = dword ptr -4Ch
.text:0000000000001F70 var_48          = qword ptr -48h
.text:0000000000001F70 var_40          = qword ptr -40h
.text:0000000000001F70 arg_0           = qword ptr  8
.text:0000000000001F70 arg_8           = qword ptr  10h
.text:0000000000001F70 arg_10          = qword ptr  18h
.text:0000000000001F70
.text:0000000000001F70 ; __unwind {
.text:0000000000001F70                 push    r15
.text:0000000000001F72                 push    r14
.text:0000000000001F74                 mov     r15d, r8d
.text:0000000000001F77                 push    r13
.text:0000000000001F79                 push    r12
.text:0000000000001F7B                 mov     r14, rdi
.text:0000000000001F7E                 push    rbp
.text:0000000000001F7F                 push    rbx
.text:0000000000001F80                 mov     ebx, r9d
.text:0000000000001F83                 mov     r13, rsi
.text:0000000000001F86                 mov     rbp, rcx
.text:0000000000001F89                 and     ebx, 2
.text:0000000000001F8C                 sub     rsp, 0B8h
.text:0000000000001F93                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001F9B                 mov     [rsp+0E8h+s], rdx
.text:0000000000001FA0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001FA5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001FAA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001FAF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001FB7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001FBC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001FC4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001FC9                 mov     rax, fs:28h
.text:0000000000001FD2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001FDA                 xor     eax, eax
.text:0000000000001FDC                 call    ___ctype_get_mb_cur_max
.text:0000000000001FE1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001FE5                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001FEA                 ja      def_2001        ; jumptable 00000000000121F1 default case
.text:0000000000001FF0                 lea     rcx, jpt_2001
.text:0000000000001FF7                 mov     edx, r15d
.text:0000000000001FFA                 movsxd  rax, ds:(jpt_2001 - 4B00h)[rcx+rdx*4]
.text:0000000000001FFE                 add     rax, rcx
.text:0000000000002001                 jmp     rax             ; switch jump
.text:0000000000002003 ; ---------------------------------------------------------------------------
.text:0000000000002003
.text:0000000000002003 loc_2003:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002003                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002003                                         ; DATA XREF: ...
.text:0000000000002003                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002008                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000200D                 xor     r12d, r12d
.text:0000000000002010                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002019                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000201E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002023
.text:0000000000002023 loc_2023:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002023                 lea     rax, asc_4A95   ; "'"
.text:000000000000202A                 mov     [rsp+0E8h+n], 1
.text:0000000000002033                 xor     r15d, r15d
.text:0000000000002036                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000203E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002043
.text:0000000000002043 loc_2043:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002043                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002043                 xor     r11d, r11d
.text:0000000000002046                 mov     rax, rbp
.text:0000000000002049                 mov     r8d, r12d
.text:000000000000204C                 mov     rbp, r11
.text:000000000000204F                 mov     r11, rax
.text:0000000000002052                 nop     word ptr [rax+rax+00h]
.text:0000000000002058
.text:0000000000002058 loc_2058:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002058                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002058                 cmp     r11, rbp
.text:000000000000205B                 setnz   r12b
.text:000000000000205F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002063                 jnz     short loc_2072
.text:0000000000002065                 mov     rax, [rsp+0E8h+s]
.text:000000000000206A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000206E                 setnz   r12b
.text:0000000000002072
.text:0000000000002072 loc_2072:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002072                 test    r12b, r12b
.text:0000000000002075                 jz      loc_26D0
.text:000000000000207B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002080                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002085                 lea     r9, [rdi+rbp]
.text:0000000000002089                 setnz   al
.text:000000000000208C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002090                 mov     r10d, eax
.text:0000000000002093                 jz      loc_2140
.text:0000000000002099                 mov     rax, [rsp+0E8h+n]
.text:000000000000209E                 test    rax, rax
.text:00000000000020A1                 jz      loc_24D0
.text:00000000000020A7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000020AB                 lea     rbx, [rbp+rax+0]
.text:00000000000020B0                 jnz     short loc_20E0
.text:00000000000020B2                 cmp     rax, 1
.text:00000000000020B6                 jbe     short loc_20E0
.text:00000000000020B8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000020BD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000020C2                 mov     [rsp+0E8h+ps], r9
.text:00000000000020C7                 call    _strlen
.text:00000000000020CC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000020D2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000020D8                 mov     r11, rax
.text:00000000000020DB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000020E0
.text:00000000000020E0 loc_20E0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000020E0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000020E0                 cmp     rbx, r11
.text:00000000000020E3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000020E8                 ja      loc_26A0
.text:00000000000020EE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000020F3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000020F8                 mov     rdi, r9         ; s1
.text:00000000000020FB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002100                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002105                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000210A                 call    _memcmp
.text:000000000000210F                 test    eax, eax
.text:0000000000002111                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002116                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000211C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002121                 jnz     loc_26A0
.text:0000000000002127                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000212C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002132                 jnz     loc_30B5
.text:0000000000002138                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002140
.text:0000000000002140 loc_2140:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002140                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002140                 movzx   ebx, byte ptr [r9]
.text:0000000000002144                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002147                 ja      def_215E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000214D                 lea     rcx, jpt_215E
.text:0000000000002154                 movzx   edx, bl
.text:0000000000002157                 movsxd  rax, ds:(jpt_215E - 4B2Ch)[rcx+rdx*4]
.text:000000000000215B                 add     rax, rcx
.text:000000000000215E                 jmp     rax             ; switch jump
.text:0000000000002160 ; ---------------------------------------------------------------------------
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002160                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002160                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002163
.text:0000000000002163 loc_2163:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002163                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002163                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002167                 setnz   al
.text:000000000000216A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000216E                 jnz     short loc_217C
.text:0000000000002170                 mov     rax, [rsp+0E8h+s]
.text:0000000000002175                 cmp     byte ptr [rax+1], 0
.text:0000000000002179                 setnz   al
.text:000000000000217C
.text:000000000000217C loc_217C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000217C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002181                 setz    dl
.text:0000000000002184                 test    al, al
.text:0000000000002186                 jz      loc_23D8
.text:000000000000218C
.text:000000000000218C loc_218C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000218C                 xor     r12d, r12d
.text:000000000000218F                 xor     eax, eax
.text:0000000000002191                 nop     dword ptr [rax+00000000h]
.text:0000000000002198
.text:0000000000002198 loc_2198:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002198                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002198                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000219D                 jnz     loc_22B2
.text:00000000000021A3                 test    dl, dl
.text:00000000000021A5                 jnz     loc_22B2
.text:00000000000021AB
.text:00000000000021AB loc_21AB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000021AB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000021B0                 test    rsi, rsi
.text:00000000000021B3                 jz      short loc_21C9
.text:00000000000021B5                 mov     edx, ebx
.text:00000000000021B7                 shr     dl, 5
.text:00000000000021BA                 movzx   edx, dl
.text:00000000000021BD                 mov     edx, [rsi+rdx*4]
.text:00000000000021C0                 bt      edx, ebx
.text:00000000000021C3                 jb      loc_2313
.text:00000000000021C9
.text:00000000000021C9 loc_21C9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000021C9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000021C9                 test    r10b, r10b
.text:00000000000021CC                 jnz     loc_2313
.text:00000000000021D2                 xor     eax, 1
.text:00000000000021D5                 add     rbp, 1
.text:00000000000021D9                 and     eax, r8d
.text:00000000000021DC
.text:00000000000021DC loc_21DC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000021DC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000021DC                 test    al, al
.text:00000000000021DE                 jz      short loc_2200
.text:00000000000021E0                 cmp     r13, r15
.text:00000000000021E3                 jbe     short loc_21EA
.text:00000000000021E5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000021EA
.text:00000000000021EA loc_21EA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000021EA                 lea     rax, [r15+1]
.text:00000000000021EE                 cmp     r13, rax
.text:00000000000021F1                 jbe     short loc_21F9
.text:00000000000021F3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000021F9
.text:00000000000021F9 loc_21F9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000021F9                 add     r15, 2
.text:00000000000021FD                 xor     r8d, r8d
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002200                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002200                 cmp     r15, r13
.text:0000000000002203                 jnb     short loc_2209
.text:0000000000002205                 mov     [r14+r15], bl
.text:0000000000002209
.text:0000000000002209 loc_2209:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002209                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000220E                 add     r15, 1
.text:0000000000002212                 mov     eax, 0
.text:0000000000002217                 test    r12b, r12b
.text:000000000000221A                 cmovz   edi, eax
.text:000000000000221D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002222                 jmp     loc_2058
.text:0000000000002222 ; ---------------------------------------------------------------------------
.text:0000000000002227                 align 10h
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002230                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002230                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002233
.text:0000000000002233 loc_2233:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002233                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002233                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002237                 cmp     eax, 2
.text:000000000000223A                 jz      loc_27F8
.text:0000000000002240                 cmp     eax, 5
.text:0000000000002243                 jz      loc_27B8
.text:0000000000002249                 cmp     eax, 2
.text:000000000000224C                 mov     ebx, 3Fh ; '?'
.text:0000000000002251                 setz    dl
.text:0000000000002254                 xor     r12d, r12d
.text:0000000000002257                 xor     eax, eax
.text:0000000000002259                 jmp     loc_2198
.text:0000000000002259 ; ---------------------------------------------------------------------------
.text:000000000000225E                 align 20h
.text:0000000000002260
.text:0000000000002260 loc_2260:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002260                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002260                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002263
.text:0000000000002263 loc_2263:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002263                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002263                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002268                 jz      loc_2770
.text:000000000000226E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002273                 xor     edx, edx
.text:0000000000002275                 xor     eax, eax
.text:0000000000002277                 mov     ebx, 27h ; '''
.text:000000000000227C                 jmp     loc_2198
.text:000000000000227C ; ---------------------------------------------------------------------------
.text:0000000000002281                 align 8
.text:0000000000002288
.text:0000000000002288 loc_2288:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002288                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002288                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000228D                 mov     ebx, 74h ; 't'
.text:0000000000002292
.text:0000000000002292 loc_2292:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002292                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002292                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002297                 setz    al
.text:000000000000229A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000229E                 jnz     loc_23EE
.text:00000000000022A4
.text:00000000000022A4 loc_22A4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000022A4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000022A4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000022A9                 jnz     short loc_2310
.text:00000000000022AB
.text:00000000000022AB loc_22AB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000022AB                 mov     ebx, edx
.text:00000000000022AD                 xor     r12d, r12d
.text:00000000000022B0                 xor     eax, eax
.text:00000000000022B2
.text:00000000000022B2 loc_22B2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000022B2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000022B2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000022B7                 jnz     loc_21AB
.text:00000000000022BD                 jmp     loc_21C9
.text:00000000000022BD ; ---------------------------------------------------------------------------
.text:00000000000022C2                 align 8
.text:00000000000022C8
.text:00000000000022C8 loc_22C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022C8                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:00000000000022C8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000022CD                 mov     ebx, 62h ; 'b'
.text:00000000000022D2                 jmp     short loc_22A4
.text:00000000000022D2 ; ---------------------------------------------------------------------------
.text:00000000000022D4                 align 8
.text:00000000000022D8
.text:00000000000022D8 loc_22D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022D8                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:00000000000022D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000022DD                 jz      loc_26B0
.text:00000000000022E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000022E8                 jz      loc_2500
.text:00000000000022EE
.text:00000000000022EE loc_22EE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000022EE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000022F3                 jz      loc_2500
.text:00000000000022F9                 cmp     [rsp+0E8h+n], 0
.text:00000000000022FF                 jnz     loc_26BB
.text:0000000000002305                 mov     ebx, 5Ch ; '\'
.text:000000000000230A                 nop     word ptr [rax+rax+00h]
.text:0000000000002310
.text:0000000000002310 loc_2310:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002310                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002310                 xor     r12d, r12d
.text:0000000000002313
.text:0000000000002313 loc_2313:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002313                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002313                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002318                 setz    dl
.text:000000000000231B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002320                 mov     eax, edx
.text:0000000000002322                 jnz     loc_2B78
.text:0000000000002328                 mov     eax, r8d
.text:000000000000232B                 xor     eax, 1
.text:000000000000232E                 and     al, dl
.text:0000000000002330                 jz      short loc_2361
.text:0000000000002332                 cmp     r13, r15
.text:0000000000002335                 jbe     short loc_233C
.text:0000000000002337                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000233C
.text:000000000000233C loc_233C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000233C                 lea     rdx, [r15+1]
.text:0000000000002340                 cmp     r13, rdx
.text:0000000000002343                 jbe     short loc_234B
.text:0000000000002345                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000234B
.text:000000000000234B loc_234B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000234B                 lea     rdx, [r15+2]
.text:000000000000234F                 cmp     r13, rdx
.text:0000000000002352                 jbe     short loc_235A
.text:0000000000002354                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000235A
.text:000000000000235A loc_235A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000235A                 add     r15, 3
.text:000000000000235E                 mov     r8d, eax
.text:0000000000002361
.text:0000000000002361 loc_2361:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002361                 cmp     r13, r15
.text:0000000000002364                 jbe     short loc_236B
.text:0000000000002366                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000236B
.text:000000000000236B loc_236B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000236B                 add     r15, 1
.text:000000000000236F                 add     rbp, 1
.text:0000000000002373                 jmp     loc_2200
.text:0000000000002373 ; ---------------------------------------------------------------------------
.text:0000000000002378                 align 20h
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002380                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002380                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002385                 jnz     loc_2553
.text:000000000000238B                 xor     edx, edx
.text:000000000000238D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002392                 jz      loc_22AB
.text:0000000000002398                 add     rbp, 1
.text:000000000000239C                 jmp     loc_2058
.text:000000000000239C ; ---------------------------------------------------------------------------
.text:00000000000023A1                 align 8
.text:00000000000023A8
.text:00000000000023A8 loc_23A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023A8                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:00000000000023A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000023AD                 setz    dl
.text:00000000000023B0                 xor     eax, eax
.text:00000000000023B2                 jmp     loc_2198
.text:00000000000023B2 ; ---------------------------------------------------------------------------
.text:00000000000023B7                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023C0                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:00000000000023C0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000023C5                 mov     ebx, 61h ; 'a'
.text:00000000000023CA                 jmp     loc_22A4
.text:00000000000023CA ; ---------------------------------------------------------------------------
.text:00000000000023CF                 align 10h
.text:00000000000023D0
.text:00000000000023D0 loc_23D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023D0                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:00000000000023D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000023D5                 setz    dl
.text:00000000000023D8
.text:00000000000023D8 loc_23D8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000023D8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000023D8                 test    rbp, rbp
.text:00000000000023DB                 jnz     loc_218C
.text:00000000000023E1
.text:00000000000023E1 loc_23E1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000023E1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000023E1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000023E6                 and     al, dl
.text:00000000000023E8                 jz      loc_2198
.text:00000000000023EE
.text:00000000000023EE loc_23EE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000023EE                 mov     rbp, r11
.text:00000000000023F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000023F9                 jmp     loc_2AF9
.text:00000000000023F9 ; ---------------------------------------------------------------------------
.text:00000000000023FE                 align 20h
.text:0000000000002400
.text:0000000000002400 loc_2400:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002400                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002400                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002405                 setz    dl
.text:0000000000002408                 xor     r12d, r12d
.text:000000000000240B                 jmp     short loc_23E1
.text:000000000000240B ; ---------------------------------------------------------------------------
.text:000000000000240D                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002410                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002410                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002415                 mov     ebx, 20h ; ' '
.text:000000000000241A                 setz    dl
.text:000000000000241D                 jmp     short loc_23E1
.text:000000000000241D ; ---------------------------------------------------------------------------
.text:000000000000241F                 align 20h
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002420                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002420                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002425                 mov     ebx, 72h ; 'r'
.text:000000000000242A                 jmp     loc_2292
.text:000000000000242A ; ---------------------------------------------------------------------------
.text:000000000000242F                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002430                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002430                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002435                 mov     ebx, 66h ; 'f'
.text:000000000000243A                 jmp     loc_22A4
.text:000000000000243A ; ---------------------------------------------------------------------------
.text:000000000000243F                 align 20h
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002440                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002440                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002445                 mov     ebx, 76h ; 'v'
.text:000000000000244A                 jmp     loc_22A4
.text:000000000000244A ; ---------------------------------------------------------------------------
.text:000000000000244F                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002450                                         ; DATA XREF: .rodata:jpt_215E↓o
.text:0000000000002450                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002455                 mov     ebx, 6Eh ; 'n'
.text:000000000000245A                 jmp     loc_2292
.text:000000000000245A ; ---------------------------------------------------------------------------
.text:000000000000245F                 align 20h
.text:0000000000002460
.text:0000000000002460 def_24EA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002460                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002460                                         ; DATA XREF: ...
.text:0000000000002460                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002463                 nop     dword ptr [rax+rax+00h]
.text:0000000000002468
.text:0000000000002468 def_215E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002468                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002468                                         ; DATA XREF: ...
.text:0000000000002468                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000246E                 jnz     loc_2818
.text:0000000000002474                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002479                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000247E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002483                 call    ___ctype_b_loc
.text:0000000000002488                 mov     rcx, [rax]
.text:000000000000248B                 movzx   edx, bl
.text:000000000000248E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002494                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000249A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000249F                 mov     edi, 1
.text:00000000000024A4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000024A8                 and     ax, 4000h
.text:00000000000024AC                 setnz   r12b
.text:00000000000024B0                 setz    al
.text:00000000000024B3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000024B7
.text:00000000000024B7 loc_24B7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000024B7                 test    al, al
.text:00000000000024B9                 jnz     loc_2E51
.text:00000000000024BF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024C4                 setz    dl
.text:00000000000024C7                 jmp     loc_2198
.text:00000000000024C7 ; ---------------------------------------------------------------------------
.text:00000000000024CC                 align 10h
.text:00000000000024D0
.text:00000000000024D0 loc_24D0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000024D0                 movzx   ebx, byte ptr [r9]
.text:00000000000024D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000024D7                 ja      short def_24EA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000024D9                 lea     rcx, jpt_24EA
.text:00000000000024E0                 movzx   edx, bl
.text:00000000000024E3                 movsxd  rax, ds:(jpt_24EA - 4D28h)[rcx+rdx*4]
.text:00000000000024E7                 add     rax, rcx
.text:00000000000024EA                 jmp     rax             ; switch jump
.text:00000000000024EA ; ---------------------------------------------------------------------------
.text:00000000000024EC                 align 10h
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000024F0                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:00000000000024F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000024F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000024F8                 jnz     loc_22EE
.text:00000000000024FE                 xchg    ax, ax
.text:0000000000002500
.text:0000000000002500 loc_2500:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002500                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002500                 mov     edx, 5Ch ; '\'
.text:0000000000002505                 mov     ebx, 5Ch ; '\'
.text:000000000000250A                 jmp     loc_22A4
.text:000000000000250A ; ---------------------------------------------------------------------------
.text:000000000000250F                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002510                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002515                 xor     r10d, r10d
.text:0000000000002518                 mov     ebx, 66h ; 'f'
.text:000000000000251D                 jmp     loc_22A4
.text:000000000000251D ; ---------------------------------------------------------------------------
.text:0000000000002522                 align 8
.text:0000000000002528
.text:0000000000002528 loc_2528:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002528                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002528                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000252D                 xor     r10d, r10d
.text:0000000000002530                 mov     ebx, 6Eh ; 'n'
.text:0000000000002535                 jmp     loc_2292
.text:0000000000002535 ; ---------------------------------------------------------------------------
.text:000000000000253A                 align 20h
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002540                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002540                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002545                 jmp     loc_2310
.text:0000000000002545 ; ---------------------------------------------------------------------------
.text:000000000000254A                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002550                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002550                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002553
.text:0000000000002553 loc_2553:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002553                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002558                 setz    dl
.text:000000000000255B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002560                 jnz     loc_30FA
.text:0000000000002566                 mov     eax, r8d
.text:0000000000002569                 mov     rcx, r15
.text:000000000000256C                 xor     eax, 1
.text:000000000000256F                 and     al, dl
.text:0000000000002571                 jz      short loc_25A0
.text:0000000000002573                 cmp     r13, r15
.text:0000000000002576                 jbe     short loc_257D
.text:0000000000002578                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000257D
.text:000000000000257D loc_257D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000257D                 lea     rcx, [r15+1]
.text:0000000000002581                 cmp     r13, rcx
.text:0000000000002584                 jbe     short loc_258C
.text:0000000000002586                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000258C
.text:000000000000258C loc_258C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000258C                 lea     rcx, [r15+2]
.text:0000000000002590                 cmp     r13, rcx
.text:0000000000002593                 ja      loc_2BC9
.text:0000000000002599
.text:0000000000002599 loc_2599:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002599                 lea     rcx, [r15+3]
.text:000000000000259D                 mov     r8d, eax
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000025A0                 cmp     r13, rcx
.text:00000000000025A3                 jbe     short loc_25AA
.text:00000000000025A5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000025AA
.text:00000000000025AA loc_25AA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000025AA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000025AF                 lea     r15, [rcx+1]
.text:00000000000025B3                 jz      loc_2BB9
.text:00000000000025B9                 lea     rax, [rbp+1]
.text:00000000000025BD                 cmp     rax, r11
.text:00000000000025C0                 jnb     short loc_25DB
.text:00000000000025C2                 mov     rax, [rsp+0E8h+s]
.text:00000000000025C7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000025CC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000025D0                 sub     eax, 30h ; '0'
.text:00000000000025D3                 cmp     al, 9
.text:00000000000025D5                 jbe     loc_2E09
.text:00000000000025DB
.text:00000000000025DB loc_25DB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000025DB                 mov     eax, r12d
.text:00000000000025DE                 mov     ebx, 30h ; '0'
.text:00000000000025E3                 xor     r12d, r12d
.text:00000000000025E6                 jmp     loc_2198
.text:00000000000025E6 ; ---------------------------------------------------------------------------
.text:00000000000025EB                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025F0                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:00000000000025F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000025F5                 mov     r12d, r10d
.text:00000000000025F8                 setz    dl
.text:00000000000025FB                 xor     r10d, r10d
.text:00000000000025FE                 xor     eax, eax
.text:0000000000002600                 jmp     loc_2198
.text:0000000000002600 ; ---------------------------------------------------------------------------
.text:0000000000002605                 align 8
.text:0000000000002608
.text:0000000000002608 loc_2608:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002608                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002608                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000260D                 setz    dl
.text:0000000000002610                 xor     r10d, r10d
.text:0000000000002613                 jmp     loc_23D8
.text:0000000000002613 ; ---------------------------------------------------------------------------
.text:0000000000002618                 align 20h
.text:0000000000002620
.text:0000000000002620 loc_2620:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002620                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002620                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002625                 setz    dl
.text:0000000000002628                 xor     r10d, r10d
.text:000000000000262B                 xor     r12d, r12d
.text:000000000000262E                 jmp     loc_23E1
.text:000000000000262E ; ---------------------------------------------------------------------------
.text:0000000000002633                 align 8
.text:0000000000002638
.text:0000000000002638 loc_2638:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002638                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002638                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000263D                 mov     r12d, r10d
.text:0000000000002640                 mov     ebx, 20h ; ' '
.text:0000000000002645                 setz    dl
.text:0000000000002648                 xor     r10d, r10d
.text:000000000000264B                 jmp     loc_23E1
.text:0000000000002650 ; ---------------------------------------------------------------------------
.text:0000000000002650
.text:0000000000002650 loc_2650:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002650                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002650                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002655                 xor     r10d, r10d
.text:0000000000002658                 mov     ebx, 72h ; 'r'
.text:000000000000265D                 jmp     loc_2292
.text:000000000000265D ; ---------------------------------------------------------------------------
.text:0000000000002662                 align 8
.text:0000000000002668
.text:0000000000002668 loc_2668:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002668                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002668                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000266D                 jmp     loc_2310
.text:000000000000266D ; ---------------------------------------------------------------------------
.text:0000000000002672                 align 8
.text:0000000000002678
.text:0000000000002678 loc_2678:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002678                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002678                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000267D                 xor     r10d, r10d
.text:0000000000002680                 mov     ebx, 74h ; 't'
.text:0000000000002685                 jmp     loc_2292
.text:0000000000002685 ; ---------------------------------------------------------------------------
.text:000000000000268A                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002690                                         ; DATA XREF: .rodata:jpt_24EA↓o
.text:0000000000002690                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002695                 jmp     loc_2310
.text:0000000000002695 ; ---------------------------------------------------------------------------
.text:000000000000269A                 align 20h
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000026A0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000026A0                 xor     r10d, r10d
.text:00000000000026A3                 jmp     loc_2140
.text:00000000000026A3 ; ---------------------------------------------------------------------------
.text:00000000000026A8                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000026B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026B5                 jnz     loc_3020
.text:00000000000026BB
.text:00000000000026BB loc_26BB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000026BB                 add     rbp, 1
.text:00000000000026BF                 mov     eax, r8d
.text:00000000000026C2                 xor     r12d, r12d
.text:00000000000026C5                 mov     ebx, 5Ch ; '\'
.text:00000000000026CA                 jmp     loc_21DC
.text:00000000000026CA ; ---------------------------------------------------------------------------
.text:00000000000026CF                 align 10h
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000026D0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026D5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000026DA                 mov     r12d, r8d
.text:00000000000026DD                 mov     rbp, r11
.text:00000000000026E0                 setz    dl
.text:00000000000026E3                 mov     eax, ebx
.text:00000000000026E5                 test    r15, r15
.text:00000000000026E8                 setz    cl
.text:00000000000026EB                 and     eax, edx
.text:00000000000026ED                 and     al, cl
.text:00000000000026EF                 jnz     loc_3156
.text:00000000000026F5                 mov     eax, ebx
.text:00000000000026F7                 xor     eax, 1
.text:00000000000026FA                 and     dl, al
.text:00000000000026FC                 jz      loc_306C
.text:0000000000002702                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002707                 jz      loc_306A
.text:000000000000270D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002712                 jnz     loc_310D
.text:0000000000002718                 test    r13, r13
.text:000000000000271B                 setz    al
.text:000000000000271E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002724                 setnz   dl
.text:0000000000002727                 and     al, dl
.text:0000000000002729                 jz      loc_314C
.text:000000000000272F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002734
.text:0000000000002734 loc_2734:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002734                 lea     rbx, asc_4A95   ; "'"
.text:000000000000273B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000273F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002747                 mov     r15d, 1
.text:000000000000274D                 mov     [rsp+0E8h+n], 1
.text:0000000000002756                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000275B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002760                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002764                 jmp     loc_2043
.text:0000000000002764 ; ---------------------------------------------------------------------------
.text:0000000000002769                 align 10h
.text:0000000000002770
.text:0000000000002770 loc_2770:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002770                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002775                 jnz     loc_3020
.text:000000000000277B                 test    r13, r13
.text:000000000000277E                 jz      loc_2B80
.text:0000000000002784                 xor     edx, edx
.text:0000000000002786                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000278C                 jnz     loc_2B80
.text:0000000000002792
.text:0000000000002792 loc_2792:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002792                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002792                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002797                 add     r15, 3
.text:000000000000279B                 xor     eax, eax
.text:000000000000279D                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000027A2                 xor     r8d, r8d
.text:00000000000027A5                 mov     r13, rdx
.text:00000000000027A8                 mov     ebx, 27h ; '''
.text:00000000000027AD                 jmp     loc_21C9
.text:00000000000027AD ; ---------------------------------------------------------------------------
.text:00000000000027B2                 align 8
.text:00000000000027B8
.text:00000000000027B8 loc_27B8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000027B8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000027BD                 jz      short loc_27E0
.text:00000000000027BF                 lea     rcx, [rbp+2]
.text:00000000000027C3                 cmp     rcx, r11
.text:00000000000027C6                 jnb     short loc_27E0
.text:00000000000027C8                 mov     rax, [rsp+0E8h+s]
.text:00000000000027CD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000027D2                 jz      loc_2F62
.text:00000000000027D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:00000000000027E0                                         ; quotearg_buffer_restyled+856↑j ...
.text:00000000000027E0                 xor     edx, edx
.text:00000000000027E2                 xor     r12d, r12d
.text:00000000000027E5                 xor     eax, eax
.text:00000000000027E7                 mov     ebx, 3Fh ; '?'
.text:00000000000027EC                 jmp     loc_2198
.text:00000000000027EC ; ---------------------------------------------------------------------------
.text:00000000000027F1                 align 8
.text:00000000000027F8
.text:00000000000027F8 loc_27F8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000027F8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000027FD                 jnz     loc_3020
.text:0000000000002803                 xor     r12d, r12d
.text:0000000000002806                 xor     eax, eax
.text:0000000000002808                 mov     ebx, 3Fh ; '?'
.text:000000000000280D                 jmp     loc_21C9
.text:000000000000280D ; ---------------------------------------------------------------------------
.text:0000000000002812                 align 8
.text:0000000000002818
.text:0000000000002818 loc_2818:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002818                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002820                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002824                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002830                 mov     [rsp+0E8h+ps], rax
.text:0000000000002835                 jnz     short loc_2864
.text:0000000000002837                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000283C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002841                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002846                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000284B                 call    _strlen
.text:0000000000002850                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002856                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000285C                 mov     r11, rax
.text:000000000000285F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002864
.text:0000000000002864 loc_2864:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002864                 lea     rax, [rsp+0E8h+wc]
.text:000000000000286C                 xor     ecx, ecx
.text:000000000000286E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002872                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002877                 mov     rbx, rcx
.text:000000000000287A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002882                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002887                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000288C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002894                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002899                 mov     [rsp+0E8h+var_78], r13
.text:000000000000289E                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000028A3
.text:00000000000028A3 loc_28A3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000028A3                 mov     rax, [rsp+0E8h+s]
.text:00000000000028A8                 lea     r14, [rbp+rbx+0]
.text:00000000000028AD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000028B2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000028B7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000028BC                 lea     r13, [rax+r14]
.text:00000000000028C0                 sub     rdx, r14
.text:00000000000028C3                 mov     rsi, r13
.text:00000000000028C6                 call    rpl_mbrtowc
.text:00000000000028CB                 test    rax, rax
.text:00000000000028CE                 mov     r15, rax
.text:00000000000028D1                 jz      short loc_2921
.text:00000000000028D3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000028D7                 jz      loc_2EF5
.text:00000000000028DD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000028E1                 jz      loc_2E81
.text:00000000000028E7                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028EC                 setz    al
.text:00000000000028EF                 and     al, [rsp+0E8h+var_D9]
.text:00000000000028F3                 jnz     loc_2A90
.text:00000000000028F9
.text:00000000000028F9 loc_28F9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000028F9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000028F9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002900                 call    _iswprint
.text:0000000000002905                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000290A                 test    eax, eax
.text:000000000000290C                 mov     eax, 0
.text:0000000000002911                 cmovz   r12d, eax
.text:0000000000002915                 add     rbx, r15
.text:0000000000002918                 call    _mbsinit
.text:000000000000291D                 test    eax, eax
.text:000000000000291F                 jz      short loc_28A3
.text:0000000000002921
.text:0000000000002921 loc_2921:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002921                 mov     edx, r12d
.text:0000000000002924                 mov     rdi, rbx
.text:0000000000002927                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000292D                 xor     edx, 1
.text:0000000000002930                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002935                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000293B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000293F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002947                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000294C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002951                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002956
.text:0000000000002956 loc_2956:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002956                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002956                 cmp     rdi, 1
.text:000000000000295A                 jbe     loc_2F5B
.text:0000000000002960
.text:0000000000002960 loc_2960:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002960                 mov     rcx, rdi
.text:0000000000002963                 xor     esi, esi
.text:0000000000002965                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000296B                 add     rcx, rbp
.text:000000000000296E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002973                 jmp     loc_2A2E
.text:0000000000002973 ; ---------------------------------------------------------------------------
.text:0000000000002978                 align 20h
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002980                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002985                 setz    al
.text:0000000000002988                 test    r9b, r9b
.text:000000000000298B                 jnz     loc_2E40
.text:0000000000002991                 mov     esi, r8d
.text:0000000000002994                 xor     esi, 1
.text:0000000000002997                 and     al, sil
.text:000000000000299A                 jz      short loc_29CB
.text:000000000000299C                 cmp     r13, r15
.text:000000000000299F                 jbe     short loc_29A6
.text:00000000000029A1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000029A6
.text:00000000000029A6 loc_29A6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000029A6                 lea     rsi, [r15+1]
.text:00000000000029AA                 cmp     r13, rsi
.text:00000000000029AD                 jbe     short loc_29B5
.text:00000000000029AF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000029B5
.text:00000000000029B5 loc_29B5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000029B5                 lea     rsi, [r15+2]
.text:00000000000029B9                 cmp     r13, rsi
.text:00000000000029BC                 jbe     short loc_29C4
.text:00000000000029BE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000029C4
.text:00000000000029C4 loc_29C4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000029C4                 add     r15, 3
.text:00000000000029C8                 mov     r8d, eax
.text:00000000000029CB
.text:00000000000029CB loc_29CB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000029CB                 cmp     r13, r15
.text:00000000000029CE                 jbe     short loc_29D5
.text:00000000000029D0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000029D5
.text:00000000000029D5 loc_29D5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000029D5                 lea     rax, [r15+1]
.text:00000000000029D9                 cmp     r13, rax
.text:00000000000029DC                 jbe     short loc_29EB
.text:00000000000029DE                 mov     eax, ebx
.text:00000000000029E0                 shr     al, 6
.text:00000000000029E3                 add     eax, 30h ; '0'
.text:00000000000029E6                 mov     [r14+r15+1], al
.text:00000000000029EB
.text:00000000000029EB loc_29EB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:00000000000029EB                 lea     rax, [r15+2]
.text:00000000000029EF                 cmp     r13, rax
.text:00000000000029F2                 jbe     short loc_2A04
.text:00000000000029F4                 mov     eax, ebx
.text:00000000000029F6                 shr     al, 3
.text:00000000000029F9                 and     eax, 7
.text:00000000000029FC                 add     eax, 30h ; '0'
.text:00000000000029FF                 mov     [r14+r15+2], al
.text:0000000000002A04
.text:0000000000002A04 loc_2A04:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002A04                 and     ebx, 7
.text:0000000000002A07                 add     rbp, 1
.text:0000000000002A0B                 add     r15, 3
.text:0000000000002A0F                 add     ebx, 30h ; '0'
.text:0000000000002A12                 cmp     rbp, rcx
.text:0000000000002A15                 jnb     loc_2200
.text:0000000000002A1B                 mov     esi, edx
.text:0000000000002A1D
.text:0000000000002A1D loc_2A1D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002A1D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002A1D                 cmp     r13, r15
.text:0000000000002A20                 jbe     short loc_2A26
.text:0000000000002A22                 mov     [r14+r15], bl
.text:0000000000002A26
.text:0000000000002A26 loc_2A26:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002A26                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002A2A                 add     r15, 1
.text:0000000000002A2E
.text:0000000000002A2E loc_2A2E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002A2E                 test    dl, dl
.text:0000000000002A30                 jnz     loc_2980
.text:0000000000002A36                 mov     eax, esi
.text:0000000000002A38                 xor     eax, 1
.text:0000000000002A3B                 and     eax, r8d
.text:0000000000002A3E                 test    r10b, r10b
.text:0000000000002A41                 jz      short loc_2A51
.text:0000000000002A43                 cmp     r13, r15
.text:0000000000002A46                 jbe     short loc_2A4D
.text:0000000000002A48                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002A4D
.text:0000000000002A4D loc_2A4D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002A4D                 add     r15, 1
.text:0000000000002A51
.text:0000000000002A51 loc_2A51:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002A51                 add     rbp, 1
.text:0000000000002A55                 cmp     rbp, rcx
.text:0000000000002A58                 jnb     loc_21DC
.text:0000000000002A5E                 test    al, al
.text:0000000000002A60                 jz      loc_2E5E
.text:0000000000002A66                 cmp     r13, r15
.text:0000000000002A69                 jbe     short loc_2A70
.text:0000000000002A6B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002A70
.text:0000000000002A70 loc_2A70:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002A70                 lea     rax, [r15+1]
.text:0000000000002A74                 cmp     r13, rax
.text:0000000000002A77                 jbe     short loc_2A7F
.text:0000000000002A79                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002A7F
.text:0000000000002A7F loc_2A7F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002A7F                 add     r15, 2
.text:0000000000002A83                 xor     r10d, r10d
.text:0000000000002A86                 xor     r8d, r8d
.text:0000000000002A89                 jmp     short loc_2A1D
.text:0000000000002A89 ; ---------------------------------------------------------------------------
.text:0000000000002A8B                 align 10h
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002A90                 cmp     r15, 1
.text:0000000000002A94                 jz      loc_28F9
.text:0000000000002A9A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002A9F                 lea     rcx, [rdi+r15]
.text:0000000000002AA3                 lea     rdx, [rdi+r14+1]
.text:0000000000002AA8                 lea     r8, [rcx+r14]
.text:0000000000002AAC                 jmp     short loc_2ABD
.text:0000000000002AAC ; ---------------------------------------------------------------------------
.text:0000000000002AAE                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002AB0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002AB0                 add     rdx, 1
.text:0000000000002AB4                 cmp     r8, rdx
.text:0000000000002AB7                 jz      loc_28F9
.text:0000000000002ABD
.text:0000000000002ABD loc_2ABD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002ABD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002AC0                 sub     ecx, 5Bh ; '['
.text:0000000000002AC3                 cmp     cl, 21h ; '!'
.text:0000000000002AC6                 ja      short loc_2AB0
.text:0000000000002AC8                 mov     esi, 1
.text:0000000000002ACD                 shl     rsi, cl
.text:0000000000002AD0                 mov     rcx, rsi
.text:0000000000002AD3                 mov     rsi, 20000002Bh
.text:0000000000002ADD                 test    rcx, rsi
.text:0000000000002AE0                 jz      short loc_2AB0
.text:0000000000002AE2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002AE7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002AEC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002AF1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002AF9
.text:0000000000002AF9 loc_2AF9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002AF9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002AF9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002AFE                 jz      short loc_2B10
.text:0000000000002B00                 test    al, al
.text:0000000000002B02                 mov     eax, 4
.text:0000000000002B07                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002B0C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002B10                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002B10                 sub     rsp, 8
.text:0000000000002B14                 mov     rcx, rbp
.text:0000000000002B17                 mov     rsi, r13
.text:0000000000002B1A                 push    [rsp+0F0h+var_88]
.text:0000000000002B1E                 push    [rsp+0F8h+var_80]
.text:0000000000002B22                 mov     rdi, r14
.text:0000000000002B25                 push    0
.text:0000000000002B27                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002B2F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002B34                 mov     rdx, [rsp+108h+s]
.text:0000000000002B39                 and     r9d, 0FFFFFFFDh
.text:0000000000002B3D                 call    quotearg_buffer_restyled
.text:0000000000002B42                 add     rsp, 20h
.text:0000000000002B46                 mov     r15, rax
.text:0000000000002B49
.text:0000000000002B49 loc_2B49:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002B49                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002B49                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002B51                 xor     rbx, fs:28h
.text:0000000000002B5A                 mov     rax, r15
.text:0000000000002B5D                 jnz     loc_3163
.text:0000000000002B63                 add     rsp, 0B8h
.text:0000000000002B6A                 pop     rbx
.text:0000000000002B6B                 pop     rbp
.text:0000000000002B6C                 pop     r12
.text:0000000000002B6E                 pop     r13
.text:0000000000002B70                 pop     r14
.text:0000000000002B72                 pop     r15
.text:0000000000002B74                 retn
.text:0000000000002B74 ; ---------------------------------------------------------------------------
.text:0000000000002B75                 align 8
.text:0000000000002B78
.text:0000000000002B78 loc_2B78:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002B78                 mov     rbp, r11
.text:0000000000002B7B                 jmp     loc_2AF9
.text:0000000000002B80 ; ---------------------------------------------------------------------------
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002B80                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002B80                 cmp     r13, r15
.text:0000000000002B83                 jbe     short loc_2B8A
.text:0000000000002B85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B8A
.text:0000000000002B8A loc_2B8A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002B8A                 lea     rax, [r15+1]
.text:0000000000002B8E                 cmp     r13, rax
.text:0000000000002B91                 jbe     short loc_2B99
.text:0000000000002B93                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002B99
.text:0000000000002B99 loc_2B99:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002B99                 lea     rax, [r15+2]
.text:0000000000002B9D                 cmp     r13, rax
.text:0000000000002BA0                 jbe     loc_3192
.text:0000000000002BA6                 mov     rdx, r13
.text:0000000000002BA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002BAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002BB4                 jmp     loc_2792
.text:0000000000002BB9 ; ---------------------------------------------------------------------------
.text:0000000000002BB9
.text:0000000000002BB9 loc_2BB9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002BB9                 mov     eax, r12d
.text:0000000000002BBC                 mov     ebx, 30h ; '0'
.text:0000000000002BC1                 xor     r12d, r12d
.text:0000000000002BC4                 jmp     loc_21C9
.text:0000000000002BC9 ; ---------------------------------------------------------------------------
.text:0000000000002BC9
.text:0000000000002BC9 loc_2BC9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002BC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002BCF                 jmp     loc_2599
.text:0000000000002BD4 ; ---------------------------------------------------------------------------
.text:0000000000002BD4
.text:0000000000002BD4 loc_2BD4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BD4                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002BD4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002BD6                 jnz     loc_2003        ; jumptable 00000000000121F1 case 1
.text:0000000000002BDC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BE1
.text:0000000000002BE1 loc_2BE1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002BE1                 test    r13, r13
.text:0000000000002BE4                 jnz     loc_317A
.text:0000000000002BEA                 lea     rax, asc_4A95   ; "'"
.text:0000000000002BF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C04                 xor     r12d, r12d
.text:0000000000002C07                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C0C                 mov     [rsp+0E8h+n], 1
.text:0000000000002C15                 mov     [rsp+0E8h+s2], rax
.text:0000000000002C1A                 mov     r15d, 1
.text:0000000000002C20                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002C28                 jmp     loc_2043
.text:0000000000002C28 ; ---------------------------------------------------------------------------
.text:0000000000002C2D                 align 10h
.text:0000000000002C30
.text:0000000000002C30 loc_2C30:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C30                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002C30                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002C32                 jnz     loc_302D
.text:0000000000002C38                 test    r13, r13
.text:0000000000002C3B                 jz      loc_2E66
.text:0000000000002C41                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002C45                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002C4A                 xor     r12d, r12d
.text:0000000000002C4D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C52                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C5B
.text:0000000000002C5B loc_2C5B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002C5B                 lea     rax, unk_4A93
.text:0000000000002C62                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C67                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C6C                 mov     [rsp+0E8h+n], 1
.text:0000000000002C75                 mov     r15d, 1
.text:0000000000002C7B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002C80                 jmp     loc_2043
.text:0000000000002C85 ; ---------------------------------------------------------------------------
.text:0000000000002C85
.text:0000000000002C85 loc_2C85:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C85                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002C85                 lea     rax, unk_4A93   ; jumptable 00000000000121F1 case 6
.text:0000000000002C8C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002C91                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C96                 xor     r12d, r12d
.text:0000000000002C99                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CA2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002CA7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002CAC                 mov     [rsp+0E8h+n], 1
.text:0000000000002CB5                 xor     r15d, r15d
.text:0000000000002CB8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002CBD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002CC5                 jmp     loc_2043
.text:0000000000002CCA ; ---------------------------------------------------------------------------
.text:0000000000002CCA
.text:0000000000002CCA loc_2CCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CCA                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002CCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002CCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CD4                 xor     r12d, r12d
.text:0000000000002CD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002CE5                 xor     r15d, r15d
.text:0000000000002CE8                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002CED                 mov     [rsp+0E8h+n], 0
.text:0000000000002CF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002CFF                 jmp     loc_2043
.text:0000000000002D04 ; ---------------------------------------------------------------------------
.text:0000000000002D04
.text:0000000000002D04 loc_2D04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D04                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002D04                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002D09                 jz      short loc_2D61
.text:0000000000002D0B                 lea     rsi, asc_4A97   ; "`"
.text:0000000000002D12                 xor     edi, edi        ; domainname
.text:0000000000002D14                 mov     edx, 5          ; category
.text:0000000000002D19                 call    _dcgettext
.text:0000000000002D1E                 mov     rcx, rax
.text:0000000000002D21                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002D26                 lea     rax, asc_4A97   ; "`"
.text:0000000000002D2D                 cmp     rcx, rax
.text:0000000000002D30                 jz      loc_30CE
.text:0000000000002D36
.text:0000000000002D36 loc_2D36:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002D36                 lea     rsi, asc_4A95   ; "'"
.text:0000000000002D3D                 xor     edi, edi        ; domainname
.text:0000000000002D3F                 mov     edx, 5          ; category
.text:0000000000002D44                 call    _dcgettext
.text:0000000000002D49                 mov     rcx, rax
.text:0000000000002D4C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002D51                 lea     rax, asc_4A95   ; "'"
.text:0000000000002D58                 cmp     rcx, rax
.text:0000000000002D5B                 jz      loc_30E4
.text:0000000000002D61
.text:0000000000002D61 loc_2D61:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002D61                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002D61                 xor     r15d, r15d
.text:0000000000002D64                 test    ebx, ebx
.text:0000000000002D66                 jz      loc_2F2D
.text:0000000000002D6C
.text:0000000000002D6C loc_2D6C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002D6C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002D6C                 test    ebx, ebx
.text:0000000000002D6E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002D73                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002D78                 xor     r12d, r12d
.text:0000000000002D7B                 mov     rdi, rbx        ; s
.text:0000000000002D7E                 call    _strlen
.text:0000000000002D83                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002D88                 mov     [rsp+0E8h+n], rax
.text:0000000000002D8D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D92                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D97                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DA0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DA5                 jmp     loc_2043
.text:0000000000002DAA ; ---------------------------------------------------------------------------
.text:0000000000002DAA
.text:0000000000002DAA loc_2DAA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DAA                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002DAA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002DAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DB4                 xor     r12d, r12d
.text:0000000000002DB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DC0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002DC5                 xor     r15d, r15d
.text:0000000000002DC8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002DCD                 mov     [rsp+0E8h+n], 0
.text:0000000000002DD6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002DDF                 jmp     loc_2043
.text:0000000000002DE4 ; ---------------------------------------------------------------------------
.text:0000000000002DE4
.text:0000000000002DE4 loc_2DE4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DE4                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002DE4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002DE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DEE                 xor     r12d, r12d
.text:0000000000002DF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002DFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E04                 jmp     loc_2023
.text:0000000000002E09 ; ---------------------------------------------------------------------------
.text:0000000000002E09
.text:0000000000002E09 loc_2E09:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002E09                 cmp     r13, r15
.text:0000000000002E0C                 jbe     short loc_2E13
.text:0000000000002E0E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002E13
.text:0000000000002E13 loc_2E13:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002E13                 lea     rax, [rcx+2]
.text:0000000000002E17                 cmp     r13, rax
.text:0000000000002E1A                 jbe     short loc_2E22
.text:0000000000002E1C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002E22
.text:0000000000002E22 loc_2E22:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002E22                 mov     eax, r12d
.text:0000000000002E25                 lea     r15, [rcx+3]
.text:0000000000002E29                 xor     r12d, r12d
.text:0000000000002E2C                 mov     ebx, 30h ; '0'
.text:0000000000002E31                 jmp     loc_2198
.text:0000000000002E31 ; ---------------------------------------------------------------------------
.text:0000000000002E36                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002E40                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002E45                 mov     rbp, r11
.text:0000000000002E48                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002E4C                 jmp     loc_2AF9
.text:0000000000002E51 ; ---------------------------------------------------------------------------
.text:0000000000002E51
.text:0000000000002E51 loc_2E51:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002E51                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E56                 xor     r12d, r12d
.text:0000000000002E59                 jmp     loc_2960
.text:0000000000002E5E ; ---------------------------------------------------------------------------
.text:0000000000002E5E
.text:0000000000002E5E loc_2E5E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002E5E                 xor     r10d, r10d
.text:0000000000002E61                 jmp     loc_2A1D
.text:0000000000002E66 ; ---------------------------------------------------------------------------
.text:0000000000002E66
.text:0000000000002E66 loc_2E66:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002E66                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E6F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E74                 xor     r12d, r12d
.text:0000000000002E77                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E7C                 jmp     loc_2C5B
.text:0000000000002E81 ; ---------------------------------------------------------------------------
.text:0000000000002E81
.text:0000000000002E81 loc_2E81:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002E81                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002E86                 mov     rsi, r14
.text:0000000000002E89                 mov     rcx, r13
.text:0000000000002E8C                 mov     rax, rbx
.text:0000000000002E8F                 mov     rdi, rbx
.text:0000000000002E92                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002E98                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002E9D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002EA5                 cmp     rsi, r11
.text:0000000000002EA8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002EAE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002EB6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002EBB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002EC0                 jnb     short loc_2EE8
.text:0000000000002EC2                 cmp     byte ptr [rcx], 0
.text:0000000000002EC5                 jnz     short loc_2ED7
.text:0000000000002EC7                 jmp     short loc_2EE8
.text:0000000000002EC7 ; ---------------------------------------------------------------------------
.text:0000000000002EC9                 align 10h
.text:0000000000002ED0
.text:0000000000002ED0 loc_2ED0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002ED0                 cmp     byte ptr [r9+rax], 0
.text:0000000000002ED5                 jz      short loc_2EE5
.text:0000000000002ED7
.text:0000000000002ED7 loc_2ED7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002ED7                 add     rax, 1
.text:0000000000002EDB                 lea     rdx, [rbp+rax+0]
.text:0000000000002EE0                 cmp     r11, rdx
.text:0000000000002EE3                 ja      short loc_2ED0
.text:0000000000002EE5
.text:0000000000002EE5 loc_2EE5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002EE5                 mov     rdi, rax
.text:0000000000002EE8
.text:0000000000002EE8 loc_2EE8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002EE8                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002EE8                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002EED                 xor     r12d, r12d
.text:0000000000002EF0                 jmp     loc_2956
.text:0000000000002EF5 ; ---------------------------------------------------------------------------
.text:0000000000002EF5
.text:0000000000002EF5 loc_2EF5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002EF5                 mov     rdi, rbx
.text:0000000000002EF8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002EFE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002F03                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002F09                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002F11                 xor     r12d, r12d
.text:0000000000002F14                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002F19                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002F1E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002F23                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002F28                 jmp     loc_2956
.text:0000000000002F2D ; ---------------------------------------------------------------------------
.text:0000000000002F2D
.text:0000000000002F2D loc_2F2D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002F2D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002F32                 movzx   eax, byte ptr [rdx]
.text:0000000000002F35                 test    al, al
.text:0000000000002F37                 jz      loc_2D6C
.text:0000000000002F3D                 nop     dword ptr [rax]
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002F40                 cmp     r13, r15
.text:0000000000002F43                 jbe     short loc_2F49
.text:0000000000002F45                 mov     [r14+r15], al
.text:0000000000002F49
.text:0000000000002F49 loc_2F49:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002F49                 add     r15, 1
.text:0000000000002F4D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002F52                 test    al, al
.text:0000000000002F54                 jnz     short loc_2F40
.text:0000000000002F56                 jmp     loc_2D6C
.text:0000000000002F5B ; ---------------------------------------------------------------------------
.text:0000000000002F5B
.text:0000000000002F5B loc_2F5B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002F5B                 mov     eax, edx
.text:0000000000002F5D                 jmp     loc_24B7
.text:0000000000002F62 ; ---------------------------------------------------------------------------
.text:0000000000002F62
.text:0000000000002F62 loc_2F62:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002F62                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002F66                 cmp     bl, 3Eh ; '>'
.text:0000000000002F69                 ja      loc_27E0
.text:0000000000002F6F                 mov     rax, 7000A38200000000h
.text:0000000000002F79                 bt      rax, rbx
.text:0000000000002F7D                 jnb     loc_27E0
.text:0000000000002F83                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002F88                 jnz     loc_3172
.text:0000000000002F8E                 cmp     r13, r15
.text:0000000000002F91                 jbe     short loc_2F98
.text:0000000000002F93                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002F98
.text:0000000000002F98 loc_2F98:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002F98                 lea     rax, [r15+1]
.text:0000000000002F9C                 cmp     r13, rax
.text:0000000000002F9F                 jbe     short loc_2FA7
.text:0000000000002FA1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002FA7
.text:0000000000002FA7 loc_2FA7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002FA7                 lea     rax, [r15+2]
.text:0000000000002FAB                 cmp     r13, rax
.text:0000000000002FAE                 jbe     short loc_2FB6
.text:0000000000002FB0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002FB6
.text:0000000000002FB6 loc_2FB6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002FB6                 lea     rax, [r15+3]
.text:0000000000002FBA                 cmp     r13, rax
.text:0000000000002FBD                 jbe     short loc_2FC5
.text:0000000000002FBF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002FC5
.text:0000000000002FC5 loc_2FC5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002FC5                 add     r15, 4
.text:0000000000002FC9                 xor     edx, edx
.text:0000000000002FCB                 xor     r12d, r12d
.text:0000000000002FCE                 xor     eax, eax
.text:0000000000002FD0                 mov     rbp, rcx
.text:0000000000002FD3                 jmp     loc_2198
.text:0000000000002FD8 ; ---------------------------------------------------------------------------
.text:0000000000002FD8
.text:0000000000002FD8 loc_2FD8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FD8                                         ; DATA XREF: .rodata:jpt_2001↓o
.text:0000000000002FD8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002FDA                 jz      loc_3168
.text:0000000000002FE0                 lea     rax, asc_4A95   ; "'"
.text:0000000000002FE7                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FEC                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FF1                 xor     r12d, r12d
.text:0000000000002FF4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FFD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003002                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003007                 mov     [rsp+0E8h+n], 1
.text:0000000000003010                 xor     r15d, r15d
.text:0000000000003013                 mov     [rsp+0E8h+s2], rax
.text:0000000000003018                 jmp     loc_2043
.text:0000000000003018 ; ---------------------------------------------------------------------------
.text:000000000000301D                 align 20h
.text:0000000000003020
.text:0000000000003020 loc_3020:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003020                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003020                 mov     rbp, r11
.text:0000000000003023                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003028                 jmp     loc_2AF9
.text:000000000000302D ; ---------------------------------------------------------------------------
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000302D                 lea     rax, unk_4A93
.text:0000000000003034                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003039                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000303E                 xor     r12d, r12d
.text:0000000000003041                 mov     [rsp+0E8h+var_98], 0
.text:000000000000304A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000304F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003054                 mov     [rsp+0E8h+n], 1
.text:000000000000305D                 xor     r15d, r15d
.text:0000000000003060                 mov     [rsp+0E8h+s2], rax
.text:0000000000003065                 jmp     loc_2043
.text:000000000000306A ; ---------------------------------------------------------------------------
.text:000000000000306A
.text:000000000000306A loc_306A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000306A                 mov     eax, edx
.text:000000000000306C
.text:000000000000306C loc_306C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000306C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000306C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003071                 test    rbx, rbx
.text:0000000000003074                 jz      short loc_30A2
.text:0000000000003076                 test    al, al
.text:0000000000003078                 jz      short loc_30A2
.text:000000000000307A                 movzx   ecx, byte ptr [rbx]
.text:000000000000307D                 mov     rax, rbx
.text:0000000000003080                 test    cl, cl
.text:0000000000003082                 jz      short loc_30A2
.text:0000000000003084                 mov     rdx, r15
.text:0000000000003087                 sub     rax, r15
.text:000000000000308A
.text:000000000000308A loc_308A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000308A                 cmp     r13, rdx
.text:000000000000308D                 jbe     short loc_3093
.text:000000000000308F                 mov     [r14+rdx], cl
.text:0000000000003093
.text:0000000000003093 loc_3093:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003093                 add     rdx, 1
.text:0000000000003097                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000309B                 test    cl, cl
.text:000000000000309D                 jnz     short loc_308A
.text:000000000000309F                 mov     r15, rdx
.text:00000000000030A2
.text:00000000000030A2 loc_30A2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000030A2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000030A2                 cmp     r13, r15
.text:00000000000030A5                 jbe     loc_2B49
.text:00000000000030AB                 mov     byte ptr [r14+r15], 0
.text:00000000000030B0                 jmp     loc_2B49
.text:00000000000030B5 ; ---------------------------------------------------------------------------
.text:00000000000030B5
.text:00000000000030B5 loc_30B5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000030B5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000030BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000030BF                 mov     rbp, r11
.text:00000000000030C2                 setz    al
.text:00000000000030C5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000030C9                 jmp     loc_2AF9
.text:00000000000030CE ; ---------------------------------------------------------------------------
.text:00000000000030CE
.text:00000000000030CE loc_30CE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000030CE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000030D2                 mov     rdi, rcx
.text:00000000000030D5                 call    gettext_quote
.text:00000000000030DA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000030DF                 jmp     loc_2D36
.text:00000000000030E4 ; ---------------------------------------------------------------------------
.text:00000000000030E4
.text:00000000000030E4 loc_30E4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000030E4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000030E8                 mov     rdi, rcx
.text:00000000000030EB                 call    gettext_quote
.text:00000000000030F0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000030F5                 jmp     loc_2D61
.text:00000000000030FA ; ---------------------------------------------------------------------------
.text:00000000000030FA
.text:00000000000030FA loc_30FA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000030FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000030FF                 mov     rbp, r11
.text:0000000000003102                 mov     eax, edx
.text:0000000000003104                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003108                 jmp     loc_2AF9
.text:000000000000310D ; ---------------------------------------------------------------------------
.text:000000000000310D
.text:000000000000310D loc_310D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000310D                 sub     rsp, 8
.text:0000000000003111                 mov     r8d, 5
.text:0000000000003117                 mov     rcx, r11
.text:000000000000311A                 push    [rsp+0F0h+var_88]
.text:000000000000311E                 push    [rsp+0F8h+var_80]
.text:0000000000003122                 mov     rdi, r14
.text:0000000000003125                 push    [rsp+100h+var_C8]
.text:0000000000003129                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003131                 mov     rdx, [rsp+108h+s]
.text:0000000000003136                 mov     rsi, [rsp+108h+var_98]
.text:000000000000313B                 call    quotearg_buffer_restyled
.text:0000000000003140                 add     rsp, 20h
.text:0000000000003144                 mov     r15, rax
.text:0000000000003147                 jmp     loc_2B49
.text:000000000000314C ; ---------------------------------------------------------------------------
.text:000000000000314C
.text:000000000000314C loc_314C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000314C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003151                 jmp     loc_306C
.text:0000000000003156 ; ---------------------------------------------------------------------------
.text:0000000000003156
.text:0000000000003156 loc_3156:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003156                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000315E                 jmp     loc_2AF9
.text:0000000000003163 ; ---------------------------------------------------------------------------
.text:0000000000003163
.text:0000000000003163 loc_3163:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003163                 call    ___stack_chk_fail
.text:0000000000003168 ; ---------------------------------------------------------------------------
.text:0000000000003168
.text:0000000000003168 loc_3168:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003168                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000316D                 jmp     loc_2BE1
.text:0000000000003172 ; ---------------------------------------------------------------------------
.text:0000000000003172
.text:0000000000003172 loc_3172:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003172                 mov     rbp, r11
.text:0000000000003175                 jmp     loc_2B10
.text:000000000000317A ; ---------------------------------------------------------------------------
.text:000000000000317A
.text:000000000000317A loc_317A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000317A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000317F                 xor     eax, eax
.text:0000000000003181                 xor     r12d, r12d
.text:0000000000003184                 mov     [rsp+0E8h+var_98], 0
.text:000000000000318D                 jmp     loc_2734
.text:0000000000003192 ; ---------------------------------------------------------------------------
.text:0000000000003192
.text:0000000000003192 loc_3192:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003192                 mov     rdx, r13
.text:0000000000003195                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000319A                 jmp     loc_2792
.text:000000000000319F ; ---------------------------------------------------------------------------
.text:000000000000319F
.text:000000000000319F def_2001:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000319F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000319F ; } // starts at 1F70
.text:000000000000319F quotearg_buffer_restyled endp
.text:000000000000319F
.text:000000000000319F ; ---------------------------------------------------------------------------
.text:00000000000031A4                 align 10h
.text:00000000000031B0
.text:00000000000031B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031B0
.text:00000000000031B0
.text:00000000000031B0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000031B0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000031B0
.text:00000000000031B0 var_50          = qword ptr -50h
.text:00000000000031B0 var_48          = qword ptr -48h
.text:00000000000031B0 var_40          = dword ptr -40h
.text:00000000000031B0 var_3C          = dword ptr -3Ch
.text:00000000000031B0
.text:00000000000031B0 ; __unwind {
.text:00000000000031B0                 push    r15
.text:00000000000031B2                 push    r14
.text:00000000000031B4                 movsxd  r15, edi
.text:00000000000031B7                 push    r13
.text:00000000000031B9                 push    r12
.text:00000000000031BB                 mov     r14, rdx
.text:00000000000031BE                 push    rbp
.text:00000000000031BF                 push    rbx
.text:00000000000031C0                 mov     rbp, rcx
.text:00000000000031C3                 sub     rsp, 28h
.text:00000000000031C7                 mov     [rsp+58h+var_50], rsi
.text:00000000000031CC                 call    ___errno_location
.text:00000000000031D1                 mov     r13, rax
.text:00000000000031D4                 mov     eax, [rax]
.text:00000000000031D6                 test    r15d, r15d
.text:00000000000031D9                 mov     rbx, cs:slotvec
.text:00000000000031E0                 mov     [rsp+58h+var_40], eax
.text:00000000000031E4                 js      loc_3351
.text:00000000000031EA                 cmp     cs:nslots, r15d
.text:00000000000031F1                 jg      short loc_3255
.text:00000000000031F3                 cmp     r15d, 7FFFFFFFh
.text:00000000000031FA                 jz      loc_3356
.text:0000000000003200                 lea     r12d, [r15+1]
.text:0000000000003204                 lea     rax, slotvec0
.text:000000000000320B                 movsxd  rsi, r12d
.text:000000000000320E                 shl     rsi, 4
.text:0000000000003212                 cmp     rbx, rax
.text:0000000000003215                 jz      loc_3330
.text:000000000000321B                 mov     rdi, rbx
.text:000000000000321E                 call    xrealloc
.text:0000000000003223                 mov     rbx, rax
.text:0000000000003226                 mov     cs:slotvec, rax
.text:000000000000322D
.text:000000000000322D loc_322D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000322D                 movsxd  rdi, cs:nslots
.text:0000000000003234                 mov     edx, r12d
.text:0000000000003237                 xor     esi, esi        ; c
.text:0000000000003239                 sub     edx, edi
.text:000000000000323B                 shl     rdi, 4
.text:000000000000323F                 movsxd  rdx, edx
.text:0000000000003242                 add     rdi, rbx        ; s
.text:0000000000003245                 shl     rdx, 4          ; n
.text:0000000000003249                 call    _memset
.text:000000000000324E                 mov     cs:nslots, r12d
.text:0000000000003255
.text:0000000000003255 loc_3255:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003255                 mov     eax, [rbp+4]
.text:0000000000003258                 shl     r15, 4
.text:000000000000325C                 sub     rsp, 8
.text:0000000000003260                 add     rbx, r15
.text:0000000000003263                 lea     r15, [rbp+8]
.text:0000000000003267                 mov     r8d, [rbp+0]
.text:000000000000326B                 mov     r11, [rbx]
.text:000000000000326E                 mov     r12, [rbx+8]
.text:0000000000003272                 mov     rcx, r14
.text:0000000000003275                 or      eax, 1
.text:0000000000003278                 mov     [rsp+60h+var_3C], eax
.text:000000000000327C                 push    qword ptr [rbp+30h]
.text:000000000000327F                 mov     r9d, eax
.text:0000000000003282                 push    qword ptr [rbp+28h]
.text:0000000000003285                 push    r15
.text:0000000000003287                 mov     rsi, r11
.text:000000000000328A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000328F                 mov     rdi, r12
.text:0000000000003292                 mov     [rsp+78h+var_48], r11
.text:0000000000003297                 call    quotearg_buffer_restyled
.text:000000000000329C                 add     rsp, 20h
.text:00000000000032A0                 mov     r11, [rsp+58h+var_48]
.text:00000000000032A5                 cmp     r11, rax
.text:00000000000032A8                 ja      short loc_3311
.text:00000000000032AA                 lea     rsi, [rax+1]
.text:00000000000032AE                 lea     rax, slot0
.text:00000000000032B5                 cmp     r12, rax
.text:00000000000032B8                 mov     [rbx], rsi
.text:00000000000032BB                 jz      short loc_32CF
.text:00000000000032BD                 mov     rdi, r12        ; ptr
.text:00000000000032C0                 mov     [rsp+58h+var_48], rsi
.text:00000000000032C5                 call    _free
.text:00000000000032CA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000032CF
.text:00000000000032CF loc_32CF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000032CF                 mov     rdi, rsi
.text:00000000000032D2                 mov     [rsp+58h+var_48], rsi
.text:00000000000032D7                 call    xmalloc
.text:00000000000032DC                 sub     rsp, 8
.text:00000000000032E0                 mov     [rbx+8], rax
.text:00000000000032E4                 mov     r8d, [rbp+0]
.text:00000000000032E8                 push    qword ptr [rbp+30h]
.text:00000000000032EB                 push    qword ptr [rbp+28h]
.text:00000000000032EE                 mov     rcx, r14
.text:00000000000032F1                 push    r15
.text:00000000000032F3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000032F8                 mov     rdi, rax
.text:00000000000032FB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003300                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003305                 mov     r12, rax
.text:0000000000003308                 call    quotearg_buffer_restyled
.text:000000000000330D                 add     rsp, 20h
.text:0000000000003311
.text:0000000000003311 loc_3311:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003311                 mov     eax, [rsp+58h+var_40]
.text:0000000000003315                 mov     [r13+0], eax
.text:0000000000003319                 add     rsp, 28h
.text:000000000000331D                 mov     rax, r12
.text:0000000000003320                 pop     rbx
.text:0000000000003321                 pop     rbp
.text:0000000000003322                 pop     r12
.text:0000000000003324                 pop     r13
.text:0000000000003326                 pop     r14
.text:0000000000003328                 pop     r15
.text:000000000000332A                 retn
.text:000000000000332A ; ---------------------------------------------------------------------------
.text:000000000000332B                 align 10h
.text:0000000000003330
.text:0000000000003330 loc_3330:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003330                 xor     edi, edi
.text:0000000000003332                 call    xrealloc
.text:0000000000003337                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000333F                 mov     rbx, rax
.text:0000000000003342                 mov     cs:slotvec, rax
.text:0000000000003349                 movups  xmmword ptr [rax], xmm0
.text:000000000000334C                 jmp     loc_322D
.text:0000000000003351 ; ---------------------------------------------------------------------------
.text:0000000000003351
.text:0000000000003351 loc_3351:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003351                 call    _abort
.text:0000000000003356 ; ---------------------------------------------------------------------------
.text:0000000000003356
.text:0000000000003356 loc_3356:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003356                 call    xalloc_die
.text:0000000000003356 ; } // starts at 31B0
.text:0000000000003356 quotearg_n_options endp
.text:0000000000003356
.text:0000000000003356 ; ---------------------------------------------------------------------------
.text:000000000000335B                 align 20h
.text:0000000000003360
.text:0000000000003360 ; =============== S U B R O U T I N E =======================================
.text:0000000000003360
.text:0000000000003360 ; Attributes: info_from_lumina
.text:0000000000003360
.text:0000000000003360 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003360                 public clone_quoting_options
.text:0000000000003360 clone_quoting_options proc near
.text:0000000000003360 ; __unwind {
.text:0000000000003360                 push    r12
.text:0000000000003362                 push    rbp
.text:0000000000003363                 push    rbx
.text:0000000000003364                 mov     rbx, rdi
.text:0000000000003367                 call    ___errno_location
.text:000000000000336C                 mov     r12d, [rax]
.text:000000000000336F                 mov     rbp, rax
.text:0000000000003372                 lea     rax, default_quoting_options
.text:0000000000003379                 test    rbx, rbx
.text:000000000000337C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003381                 cmovz   rbx, rax
.text:0000000000003385                 mov     rdi, rbx        ; src
.text:0000000000003388                 call    xmemdup
.text:000000000000338D                 mov     [rbp+0], r12d
.text:0000000000003391                 pop     rbx
.text:0000000000003392                 pop     rbp
.text:0000000000003393                 pop     r12
.text:0000000000003395                 retn
.text:0000000000003395 ; } // starts at 3360
.text:0000000000003395 clone_quoting_options endp
.text:0000000000003395
.text:0000000000003395 ; ---------------------------------------------------------------------------
.text:0000000000003396                 align 20h
.text:00000000000033A0
.text:00000000000033A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033A0
.text:00000000000033A0
.text:00000000000033A0                 public get_quoting_style
.text:00000000000033A0 get_quoting_style proc near
.text:00000000000033A0 ; __unwind {
.text:00000000000033A0                 lea     rax, default_quoting_options
.text:00000000000033A7                 test    rdi, rdi
.text:00000000000033AA                 cmovz   rdi, rax
.text:00000000000033AE                 mov     eax, [rdi]
.text:00000000000033B0                 retn
.text:00000000000033B0 ; } // starts at 33A0
.text:00000000000033B0 get_quoting_style endp
.text:00000000000033B0
.text:00000000000033B0 ; ---------------------------------------------------------------------------
.text:00000000000033B1                 align 20h
.text:00000000000033C0
.text:00000000000033C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033C0
.text:00000000000033C0
.text:00000000000033C0                 public set_quoting_style
.text:00000000000033C0 set_quoting_style proc near
.text:00000000000033C0 ; __unwind {
.text:00000000000033C0                 lea     rax, default_quoting_options
.text:00000000000033C7                 test    rdi, rdi
.text:00000000000033CA                 cmovz   rdi, rax
.text:00000000000033CE                 mov     [rdi], esi
.text:00000000000033D0                 retn
.text:00000000000033D0 ; } // starts at 33C0
.text:00000000000033D0 set_quoting_style endp
.text:00000000000033D0
.text:00000000000033D0 ; ---------------------------------------------------------------------------
.text:00000000000033D1                 align 20h
.text:00000000000033E0
.text:00000000000033E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033E0
.text:00000000000033E0 ; Attributes: info_from_lumina
.text:00000000000033E0
.text:00000000000033E0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000033E0                 public set_char_quoting
.text:00000000000033E0 set_char_quoting proc near
.text:00000000000033E0 ; __unwind {
.text:00000000000033E0                 lea     rax, default_quoting_options
.text:00000000000033E7                 test    rdi, rdi
.text:00000000000033EA                 mov     ecx, esi
.text:00000000000033EC                 cmovz   rdi, rax
.text:00000000000033F0                 mov     eax, esi
.text:00000000000033F2                 and     ecx, 1Fh
.text:00000000000033F5                 shr     al, 5
.text:00000000000033F8                 movzx   eax, al
.text:00000000000033FB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003400                 mov     esi, [rdi]
.text:0000000000003402                 mov     eax, esi
.text:0000000000003404                 shr     eax, cl
.text:0000000000003406                 xor     edx, eax
.text:0000000000003408                 and     eax, 1
.text:000000000000340B                 and     edx, 1
.text:000000000000340E                 shl     edx, cl
.text:0000000000003410                 xor     edx, esi
.text:0000000000003412                 mov     [rdi], edx
.text:0000000000003414                 retn
.text:0000000000003414 ; } // starts at 33E0
.text:0000000000003414 set_char_quoting endp
.text:0000000000003414
.text:0000000000003414 ; ---------------------------------------------------------------------------
.text:0000000000003415                 align 20h
.text:0000000000003420
.text:0000000000003420 ; =============== S U B R O U T I N E =======================================
.text:0000000000003420
.text:0000000000003420
.text:0000000000003420                 public set_quoting_flags
.text:0000000000003420 set_quoting_flags proc near
.text:0000000000003420 ; __unwind {
.text:0000000000003420                 lea     rax, default_quoting_options
.text:0000000000003427                 test    rdi, rdi
.text:000000000000342A                 cmovz   rdi, rax
.text:000000000000342E                 mov     eax, [rdi+4]
.text:0000000000003431                 mov     [rdi+4], esi
.text:0000000000003434                 retn
.text:0000000000003434 ; } // starts at 3420
.text:0000000000003434 set_quoting_flags endp
.text:0000000000003434
.text:0000000000003434 ; ---------------------------------------------------------------------------
.text:0000000000003435                 align 20h
.text:0000000000003440
.text:0000000000003440 ; =============== S U B R O U T I N E =======================================
.text:0000000000003440
.text:0000000000003440 ; Attributes: info_from_lumina
.text:0000000000003440
.text:0000000000003440 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003440                 public set_custom_quoting
.text:0000000000003440 set_custom_quoting proc near
.text:0000000000003440 ; __unwind {
.text:0000000000003440                 lea     rax, default_quoting_options
.text:0000000000003447                 test    rdi, rdi
.text:000000000000344A                 cmovz   rdi, rax
.text:000000000000344E                 test    rsi, rsi
.text:0000000000003451                 mov     dword ptr [rdi], 0Ah
.text:0000000000003457                 jz      short loc_3467
.text:0000000000003459                 test    rdx, rdx
.text:000000000000345C                 jz      short loc_3467
.text:000000000000345E                 mov     [rdi+28h], rsi
.text:0000000000003462                 mov     [rdi+30h], rdx
.text:0000000000003466                 retn
.text:0000000000003467 ; ---------------------------------------------------------------------------
.text:0000000000003467
.text:0000000000003467 loc_3467:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003467                                         ; set_custom_quoting+1C↑j
.text:0000000000003467                 sub     rsp, 8
.text:000000000000346B                 call    _abort
.text:000000000000346B ; } // starts at 3440
.text:000000000000346B set_custom_quoting endp
.text:000000000000346B
.text:0000000000003470
.text:0000000000003470 ; =============== S U B R O U T I N E =======================================
.text:0000000000003470
.text:0000000000003470 ; Attributes: info_from_lumina
.text:0000000000003470
.text:0000000000003470 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003470                 public quotearg_buffer
.text:0000000000003470 quotearg_buffer proc near
.text:0000000000003470
.text:0000000000003470 var_40          = qword ptr -40h
.text:0000000000003470
.text:0000000000003470 ; __unwind {
.text:0000000000003470                 push    r15
.text:0000000000003472                 push    r14
.text:0000000000003474                 lea     rax, default_quoting_options
.text:000000000000347B                 push    r13
.text:000000000000347D                 push    r12
.text:000000000000347F                 mov     r13, rdi
.text:0000000000003482                 push    rbp
.text:0000000000003483                 push    rbx
.text:0000000000003484                 mov     rbx, r8
.text:0000000000003487                 mov     r14, rsi
.text:000000000000348A                 mov     r15, rdx
.text:000000000000348D                 sub     rsp, 18h
.text:0000000000003491                 test    r8, r8
.text:0000000000003494                 cmovz   rbx, rax
.text:0000000000003498                 mov     [rsp+48h+var_40], rcx
.text:000000000000349D                 call    ___errno_location
.text:00000000000034A2                 mov     r12d, [rax]
.text:00000000000034A5                 mov     rbp, rax
.text:00000000000034A8                 lea     rax, [rbx+8]
.text:00000000000034AC                 sub     rsp, 8
.text:00000000000034B0                 mov     r9d, [rbx+4]
.text:00000000000034B4                 push    qword ptr [rbx+30h]
.text:00000000000034B7                 mov     r8d, [rbx]
.text:00000000000034BA                 push    qword ptr [rbx+28h]
.text:00000000000034BD                 mov     rdx, r15
.text:00000000000034C0                 push    rax
.text:00000000000034C1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000034C6                 mov     rsi, r14
.text:00000000000034C9                 mov     rdi, r13
.text:00000000000034CC                 call    quotearg_buffer_restyled
.text:00000000000034D1                 mov     [rbp+0], r12d
.text:00000000000034D5                 add     rsp, 38h
.text:00000000000034D9                 pop     rbx
.text:00000000000034DA                 pop     rbp
.text:00000000000034DB                 pop     r12
.text:00000000000034DD                 pop     r13
.text:00000000000034DF                 pop     r14
.text:00000000000034E1                 pop     r15
.text:00000000000034E3                 retn
.text:00000000000034E3 ; } // starts at 3470
.text:00000000000034E3 quotearg_buffer endp
.text:00000000000034E3
.text:00000000000034E3 ; ---------------------------------------------------------------------------
.text:00000000000034E4                 align 10h
.text:00000000000034F0
.text:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034F0
.text:00000000000034F0 ; Attributes: info_from_lumina
.text:00000000000034F0
.text:00000000000034F0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000034F0                 public quotearg_alloc_mem
.text:00000000000034F0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000034F0
.text:00000000000034F0 var_5C          = dword ptr -5Ch
.text:00000000000034F0 var_58          = qword ptr -58h
.text:00000000000034F0 var_50          = qword ptr -50h
.text:00000000000034F0 var_48          = qword ptr -48h
.text:00000000000034F0 var_40          = qword ptr -40h
.text:00000000000034F0
.text:00000000000034F0 ; __unwind {
.text:00000000000034F0                 push    r15
.text:00000000000034F2                 push    r14
.text:00000000000034F4                 lea     rax, default_quoting_options
.text:00000000000034FB                 push    r13
.text:00000000000034FD                 push    r12
.text:00000000000034FF                 mov     r12, rdx
.text:0000000000003502                 push    rbp
.text:0000000000003503                 push    rbx
.text:0000000000003504                 mov     rbx, rcx
.text:0000000000003507                 mov     r14, rdi
.text:000000000000350A                 mov     r15, rsi
.text:000000000000350D                 sub     rsp, 38h
.text:0000000000003511                 test    rcx, rcx
.text:0000000000003514                 cmovz   rbx, rax
.text:0000000000003518                 xor     ebp, ebp
.text:000000000000351A                 call    ___errno_location
.text:000000000000351F                 test    r12, r12
.text:0000000000003522                 mov     r13, rax
.text:0000000000003525                 mov     eax, [rax]
.text:0000000000003527                 setz    bpl
.text:000000000000352B                 or      ebp, [rbx+4]
.text:000000000000352E                 lea     r10, [rbx+8]
.text:0000000000003532                 sub     rsp, 8
.text:0000000000003536                 mov     r8d, [rbx]
.text:0000000000003539                 mov     rcx, r15
.text:000000000000353C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003540                 push    qword ptr [rbx+30h]
.text:0000000000003543                 mov     rdx, r14
.text:0000000000003546                 push    qword ptr [rbx+28h]
.text:0000000000003549                 push    r10
.text:000000000000354B                 xor     esi, esi
.text:000000000000354D                 mov     r9d, ebp
.text:0000000000003550                 xor     edi, edi
.text:0000000000003552                 mov     [rsp+88h+var_48], r10
.text:0000000000003557                 call    quotearg_buffer_restyled
.text:000000000000355C                 lea     rsi, [rax+1]
.text:0000000000003560                 mov     [rsp+88h+var_40], rax
.text:0000000000003565                 add     rsp, 20h
.text:0000000000003569                 mov     rdi, rsi
.text:000000000000356C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003571                 call    xmalloc
.text:0000000000003576                 mov     [rsp+68h+var_58], rax
.text:000000000000357B                 sub     rsp, 8
.text:000000000000357F                 push    qword ptr [rbx+30h]
.text:0000000000003582                 push    qword ptr [rbx+28h]
.text:0000000000003585                 mov     r10, [rsp+80h+var_48]
.text:000000000000358A                 mov     r9d, ebp
.text:000000000000358D                 mov     r8d, [rbx]
.text:0000000000003590                 mov     rcx, r15
.text:0000000000003593                 mov     rdx, r14
.text:0000000000003596                 mov     rdi, rax
.text:0000000000003599                 push    r10
.text:000000000000359B                 mov     rsi, [rsp+88h+var_50]
.text:00000000000035A0                 call    quotearg_buffer_restyled
.text:00000000000035A5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000035A9                 add     rsp, 20h
.text:00000000000035AD                 test    r12, r12
.text:00000000000035B0                 mov     [r13+0], eax
.text:00000000000035B4                 jz      short loc_35BF
.text:00000000000035B6                 mov     r11, [rsp+68h+var_40]
.text:00000000000035BB                 mov     [r12], r11
.text:00000000000035BF
.text:00000000000035BF loc_35BF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000035BF                 mov     rax, [rsp+68h+var_58]
.text:00000000000035C4                 add     rsp, 38h
.text:00000000000035C8                 pop     rbx
.text:00000000000035C9                 pop     rbp
.text:00000000000035CA                 pop     r12
.text:00000000000035CC                 pop     r13
.text:00000000000035CE                 pop     r14
.text:00000000000035D0                 pop     r15
.text:00000000000035D2                 retn
.text:00000000000035D2 ; } // starts at 34F0
.text:00000000000035D2 quotearg_alloc_mem endp
.text:00000000000035D2
.text:00000000000035D2 ; ---------------------------------------------------------------------------
.text:00000000000035D3                 align 20h
.text:00000000000035E0
.text:00000000000035E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035E0
.text:00000000000035E0
.text:00000000000035E0                 public quotearg_alloc
.text:00000000000035E0 quotearg_alloc  proc near
.text:00000000000035E0 ; __unwind {
.text:00000000000035E0                 mov     rcx, rdx
.text:00000000000035E3                 xor     edx, edx
.text:00000000000035E5                 jmp     quotearg_alloc_mem
.text:00000000000035E5 ; } // starts at 35E0
.text:00000000000035E5 quotearg_alloc  endp
.text:00000000000035E5
.text:00000000000035E5 ; ---------------------------------------------------------------------------
.text:00000000000035EA                 align 10h
.text:00000000000035F0
.text:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035F0
.text:00000000000035F0 ; Attributes: info_from_lumina
.text:00000000000035F0
.text:00000000000035F0 ; void __cdecl quotearg_free()
.text:00000000000035F0                 public quotearg_free
.text:00000000000035F0 quotearg_free   proc near
.text:00000000000035F0 ; __unwind {
.text:00000000000035F0                 mov     eax, cs:nslots
.text:00000000000035F6                 push    r12
.text:00000000000035F8                 mov     r12, cs:slotvec
.text:00000000000035FF                 push    rbp
.text:0000000000003600                 push    rbx
.text:0000000000003601                 cmp     eax, 1
.text:0000000000003604                 jle     short loc_3631
.text:0000000000003606                 sub     eax, 2
.text:0000000000003609                 lea     rbx, [r12+18h]
.text:000000000000360E                 shl     rax, 4
.text:0000000000003612                 lea     rbp, [r12+rax+28h]
.text:0000000000003617                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003620
.text:0000000000003620 loc_3620:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003620                 mov     rdi, [rbx]      ; ptr
.text:0000000000003623                 add     rbx, 10h
.text:0000000000003627                 call    _free
.text:000000000000362C                 cmp     rbx, rbp
.text:000000000000362F                 jnz     short loc_3620
.text:0000000000003631
.text:0000000000003631 loc_3631:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003631                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003636                 lea     rbx, slot0
.text:000000000000363D                 cmp     rdi, rbx
.text:0000000000003640                 jz      short loc_3659
.text:0000000000003642                 call    _free
.text:0000000000003647                 mov     cs:slotvec0, 100h
.text:0000000000003652                 mov     cs:off_207078, rbx
.text:0000000000003659
.text:0000000000003659 loc_3659:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003659                 lea     rbx, slotvec0
.text:0000000000003660                 cmp     r12, rbx
.text:0000000000003663                 jz      short loc_3674
.text:0000000000003665                 mov     rdi, r12        ; ptr
.text:0000000000003668                 call    _free
.text:000000000000366D                 mov     cs:slotvec, rbx
.text:0000000000003674
.text:0000000000003674 loc_3674:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003674                 pop     rbx
.text:0000000000003675                 mov     cs:nslots, 1
.text:000000000000367F                 pop     rbp
.text:0000000000003680                 pop     r12
.text:0000000000003682                 retn
.text:0000000000003682 ; } // starts at 35F0
.text:0000000000003682 quotearg_free   endp
.text:0000000000003682
.text:0000000000003682 ; ---------------------------------------------------------------------------
.text:0000000000003683                 align 10h
.text:0000000000003690
.text:0000000000003690 ; =============== S U B R O U T I N E =======================================
.text:0000000000003690
.text:0000000000003690
.text:0000000000003690                 public quotearg_n
.text:0000000000003690 quotearg_n      proc near
.text:0000000000003690 ; __unwind {
.text:0000000000003690                 lea     rcx, default_quoting_options
.text:0000000000003697                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000369E                 jmp     quotearg_n_options
.text:000000000000369E ; } // starts at 3690
.text:000000000000369E quotearg_n      endp
.text:000000000000369E
.text:000000000000369E ; ---------------------------------------------------------------------------
.text:00000000000036A3                 align 10h
.text:00000000000036B0
.text:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036B0
.text:00000000000036B0
.text:00000000000036B0                 public quotearg_n_mem
.text:00000000000036B0 quotearg_n_mem  proc near
.text:00000000000036B0 ; __unwind {
.text:00000000000036B0                 lea     rcx, default_quoting_options
.text:00000000000036B7                 jmp     quotearg_n_options
.text:00000000000036B7 ; } // starts at 36B0
.text:00000000000036B7 quotearg_n_mem  endp
.text:00000000000036B7
.text:00000000000036B7 ; ---------------------------------------------------------------------------
.text:00000000000036BC                 align 20h
.text:00000000000036C0
.text:00000000000036C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036C0
.text:00000000000036C0
.text:00000000000036C0                 public quotearg
.text:00000000000036C0 quotearg        proc near
.text:00000000000036C0 ; __unwind {
.text:00000000000036C0                 lea     rcx, default_quoting_options
.text:00000000000036C7                 mov     rsi, rdi
.text:00000000000036CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000036D1                 xor     edi, edi
.text:00000000000036D3                 jmp     quotearg_n_options
.text:00000000000036D3 ; } // starts at 36C0
.text:00000000000036D3 quotearg        endp
.text:00000000000036D3
.text:00000000000036D3 ; ---------------------------------------------------------------------------
.text:00000000000036D8                 align 20h
.text:00000000000036E0
.text:00000000000036E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036E0
.text:00000000000036E0
.text:00000000000036E0                 public quotearg_mem
.text:00000000000036E0 quotearg_mem    proc near
.text:00000000000036E0 ; __unwind {
.text:00000000000036E0                 lea     rcx, default_quoting_options
.text:00000000000036E7                 mov     rdx, rsi
.text:00000000000036EA                 mov     rsi, rdi
.text:00000000000036ED                 xor     edi, edi
.text:00000000000036EF                 jmp     quotearg_n_options
.text:00000000000036EF ; } // starts at 36E0
.text:00000000000036EF quotearg_mem    endp
.text:00000000000036EF
.text:00000000000036EF ; ---------------------------------------------------------------------------
.text:00000000000036F4                 align 20h
.text:0000000000003700
.text:0000000000003700 ; =============== S U B R O U T I N E =======================================
.text:0000000000003700
.text:0000000000003700 ; Attributes: info_from_lumina
.text:0000000000003700
.text:0000000000003700 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003700                 public quotearg_n_style
.text:0000000000003700 quotearg_n_style proc near              ; CODE XREF: main+10F↑p
.text:0000000000003700                                         ; main+12A↑p ...
.text:0000000000003700
.text:0000000000003700 var_48          = dword ptr -48h
.text:0000000000003700 var_44          = qword ptr -44h
.text:0000000000003700 var_3C          = qword ptr -3Ch
.text:0000000000003700 var_34          = qword ptr -34h
.text:0000000000003700 var_2C          = qword ptr -2Ch
.text:0000000000003700 var_24          = qword ptr -24h
.text:0000000000003700 var_1C          = qword ptr -1Ch
.text:0000000000003700 var_14          = dword ptr -14h
.text:0000000000003700 var_10          = qword ptr -10h
.text:0000000000003700
.text:0000000000003700 ; __unwind {
.text:0000000000003700                 sub     rsp, 48h
.text:0000000000003704                 mov     rax, rdx
.text:0000000000003707                 mov     rdx, fs:28h
.text:0000000000003710                 mov     [rsp+48h+var_10], rdx
.text:0000000000003715                 xor     edx, edx
.text:0000000000003717                 cmp     esi, 0Ah
.text:000000000000371A                 jz      short loc_3784
.text:000000000000371C                 mov     [rsp+48h+var_48], esi
.text:000000000000371F                 mov     rcx, rsp
.text:0000000000003722                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003729                 mov     rsi, rax
.text:000000000000372C                 mov     [rsp+48h+var_44], 0
.text:0000000000003735                 mov     [rsp+48h+var_3C], 0
.text:000000000000373E                 mov     [rsp+48h+var_34], 0
.text:0000000000003747                 mov     [rsp+48h+var_2C], 0
.text:0000000000003750                 mov     [rsp+48h+var_24], 0
.text:0000000000003759                 mov     [rsp+48h+var_1C], 0
.text:0000000000003762                 mov     [rsp+48h+var_14], 0
.text:000000000000376A                 call    quotearg_n_options
.text:000000000000376F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003774                 xor     rcx, fs:28h
.text:000000000000377D                 jnz     short loc_3789
.text:000000000000377F                 add     rsp, 48h
.text:0000000000003783                 retn
.text:0000000000003784 ; ---------------------------------------------------------------------------
.text:0000000000003784
.text:0000000000003784 loc_3784:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003784                 call    _abort
.text:0000000000003789 ; ---------------------------------------------------------------------------
.text:0000000000003789
.text:0000000000003789 loc_3789:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003789                 call    ___stack_chk_fail
.text:0000000000003789 ; } // starts at 3700
.text:0000000000003789 quotearg_n_style endp
.text:0000000000003789
.text:0000000000003789 ; ---------------------------------------------------------------------------
.text:000000000000378E                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790 ; Attributes: info_from_lumina
.text:0000000000003790
.text:0000000000003790 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003790                 public quotearg_n_style_mem
.text:0000000000003790 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003790
.text:0000000000003790 var_48          = dword ptr -48h
.text:0000000000003790 var_44          = qword ptr -44h
.text:0000000000003790 var_3C          = qword ptr -3Ch
.text:0000000000003790 var_34          = qword ptr -34h
.text:0000000000003790 var_2C          = qword ptr -2Ch
.text:0000000000003790 var_24          = qword ptr -24h
.text:0000000000003790 var_1C          = qword ptr -1Ch
.text:0000000000003790 var_14          = dword ptr -14h
.text:0000000000003790 var_10          = qword ptr -10h
.text:0000000000003790
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 sub     rsp, 48h
.text:0000000000003794                 mov     rax, rdx
.text:0000000000003797                 mov     rdx, rcx
.text:000000000000379A                 mov     rcx, fs:28h
.text:00000000000037A3                 mov     [rsp+48h+var_10], rcx
.text:00000000000037A8                 xor     ecx, ecx
.text:00000000000037AA                 cmp     esi, 0Ah
.text:00000000000037AD                 jz      short loc_3810
.text:00000000000037AF                 mov     [rsp+48h+var_48], esi
.text:00000000000037B2                 mov     rcx, rsp
.text:00000000000037B5                 mov     rsi, rax
.text:00000000000037B8                 mov     [rsp+48h+var_44], 0
.text:00000000000037C1                 mov     [rsp+48h+var_3C], 0
.text:00000000000037CA                 mov     [rsp+48h+var_34], 0
.text:00000000000037D3                 mov     [rsp+48h+var_2C], 0
.text:00000000000037DC                 mov     [rsp+48h+var_24], 0
.text:00000000000037E5                 mov     [rsp+48h+var_1C], 0
.text:00000000000037EE                 mov     [rsp+48h+var_14], 0
.text:00000000000037F6                 call    quotearg_n_options
.text:00000000000037FB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003800                 xor     rdx, fs:28h
.text:0000000000003809                 jnz     short loc_3815
.text:000000000000380B                 add     rsp, 48h
.text:000000000000380F                 retn
.text:0000000000003810 ; ---------------------------------------------------------------------------
.text:0000000000003810
.text:0000000000003810 loc_3810:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003810                 call    _abort
.text:0000000000003815 ; ---------------------------------------------------------------------------
.text:0000000000003815
.text:0000000000003815 loc_3815:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003815                 call    ___stack_chk_fail
.text:0000000000003815 ; } // starts at 3790
.text:0000000000003815 quotearg_n_style_mem endp
.text:0000000000003815
.text:0000000000003815 ; ---------------------------------------------------------------------------
.text:000000000000381A                 align 20h
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820
.text:0000000000003820                 public quotearg_style
.text:0000000000003820 quotearg_style  proc near
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 mov     rdx, rsi
.text:0000000000003823                 mov     esi, edi
.text:0000000000003825                 xor     edi, edi
.text:0000000000003827                 jmp     quotearg_n_style
.text:0000000000003827 ; } // starts at 3820
.text:0000000000003827 quotearg_style  endp
.text:0000000000003827
.text:0000000000003827 ; ---------------------------------------------------------------------------
.text:000000000000382C                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830
.text:0000000000003830                 public quotearg_style_mem
.text:0000000000003830 quotearg_style_mem proc near
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 mov     rcx, rdx
.text:0000000000003833                 mov     rdx, rsi
.text:0000000000003836                 mov     esi, edi
.text:0000000000003838                 xor     edi, edi
.text:000000000000383A                 jmp     quotearg_n_style_mem
.text:000000000000383A ; } // starts at 3830
.text:000000000000383A quotearg_style_mem endp
.text:000000000000383A
.text:000000000000383A ; ---------------------------------------------------------------------------
.text:000000000000383F                 align 20h
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840 ; Attributes: info_from_lumina
.text:0000000000003840
.text:0000000000003840 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003840                 public quotearg_char_mem
.text:0000000000003840 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003840                                         ; quotearg_colon+C↓j ...
.text:0000000000003840
.text:0000000000003840 var_48          = xmmword ptr -48h
.text:0000000000003840 var_38          = xmmword ptr -38h
.text:0000000000003840 var_28          = xmmword ptr -28h
.text:0000000000003840 var_18          = qword ptr -18h
.text:0000000000003840 var_10          = qword ptr -10h
.text:0000000000003840
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 sub     rsp, 48h
.text:0000000000003844                 mov     ecx, edx
.text:0000000000003846                 mov     rax, fs:28h
.text:000000000000384F                 mov     [rsp+48h+var_10], rax
.text:0000000000003854                 xor     eax, eax
.text:0000000000003856                 mov     rax, cs:qword_207230
.text:000000000000385D                 mov     r8, rsp
.text:0000000000003860                 and     ecx, 1Fh
.text:0000000000003863                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000386B                 mov     [rsp+48h+var_18], rax
.text:0000000000003870                 mov     eax, edx
.text:0000000000003872                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003876                 shr     al, 5
.text:0000000000003879                 movzx   eax, al
.text:000000000000387C                 lea     r9, [r8+rax*4+8]
.text:0000000000003881                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003889                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000388E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003896                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000389B                 mov     edx, [r9]
.text:000000000000389E                 mov     eax, edx
.text:00000000000038A0                 shr     eax, cl
.text:00000000000038A2                 not     eax
.text:00000000000038A4                 and     eax, 1
.text:00000000000038A7                 shl     eax, cl
.text:00000000000038A9                 mov     rcx, r8
.text:00000000000038AC                 xor     eax, edx
.text:00000000000038AE                 mov     rdx, rsi
.text:00000000000038B1                 mov     rsi, rdi
.text:00000000000038B4                 mov     [r9], eax
.text:00000000000038B7                 xor     edi, edi
.text:00000000000038B9                 call    quotearg_n_options
.text:00000000000038BE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000038C3                 xor     rsi, fs:28h
.text:00000000000038CC                 jnz     short loc_38D3
.text:00000000000038CE                 add     rsp, 48h
.text:00000000000038D2                 retn
.text:00000000000038D3 ; ---------------------------------------------------------------------------
.text:00000000000038D3
.text:00000000000038D3 loc_38D3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000038D3                 call    ___stack_chk_fail
.text:00000000000038D3 ; } // starts at 3840
.text:00000000000038D3 quotearg_char_mem endp
.text:00000000000038D3
.text:00000000000038D3 ; ---------------------------------------------------------------------------
.text:00000000000038D8                 align 20h
.text:00000000000038E0
.text:00000000000038E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038E0
.text:00000000000038E0
.text:00000000000038E0                 public quotearg_char
.text:00000000000038E0 quotearg_char   proc near
.text:00000000000038E0 ; __unwind {
.text:00000000000038E0                 movsx   edx, sil
.text:00000000000038E4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000038EB                 jmp     quotearg_char_mem
.text:00000000000038EB ; } // starts at 38E0
.text:00000000000038EB quotearg_char   endp
.text:00000000000038EB
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0
.text:00000000000038F0                 public quotearg_colon
.text:00000000000038F0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 mov     edx, 3Ah ; ':'
.text:00000000000038F5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000038FC                 jmp     quotearg_char_mem
.text:00000000000038FC ; } // starts at 38F0
.text:00000000000038FC quotearg_colon  endp
.text:00000000000038FC
.text:00000000000038FC ; ---------------------------------------------------------------------------
.text:0000000000003901                 align 10h
.text:0000000000003910
.text:0000000000003910 ; =============== S U B R O U T I N E =======================================
.text:0000000000003910
.text:0000000000003910
.text:0000000000003910                 public quotearg_colon_mem
.text:0000000000003910 quotearg_colon_mem proc near
.text:0000000000003910 ; __unwind {
.text:0000000000003910                 mov     edx, 3Ah ; ':'
.text:0000000000003915                 jmp     quotearg_char_mem
.text:0000000000003915 ; } // starts at 3910
.text:0000000000003915 quotearg_colon_mem endp
.text:0000000000003915
.text:0000000000003915 ; ---------------------------------------------------------------------------
.text:000000000000391A                 align 20h
.text:0000000000003920
.text:0000000000003920 ; =============== S U B R O U T I N E =======================================
.text:0000000000003920
.text:0000000000003920 ; Attributes: info_from_lumina
.text:0000000000003920
.text:0000000000003920 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003920                 public quotearg_n_style_colon
.text:0000000000003920 quotearg_n_style_colon proc near
.text:0000000000003920
.text:0000000000003920 var_48          = dword ptr -48h
.text:0000000000003920 var_44          = qword ptr -44h
.text:0000000000003920 var_3C          = qword ptr -3Ch
.text:0000000000003920 var_34          = qword ptr -34h
.text:0000000000003920 var_2C          = qword ptr -2Ch
.text:0000000000003920 var_24          = qword ptr -24h
.text:0000000000003920 var_1C          = qword ptr -1Ch
.text:0000000000003920 var_14          = dword ptr -14h
.text:0000000000003920 var_10          = qword ptr -10h
.text:0000000000003920
.text:0000000000003920 ; __unwind {
.text:0000000000003920                 sub     rsp, 48h
.text:0000000000003924                 mov     rax, rdx
.text:0000000000003927                 mov     rdx, fs:28h
.text:0000000000003930                 mov     [rsp+48h+var_10], rdx
.text:0000000000003935                 xor     edx, edx
.text:0000000000003937                 cmp     esi, 0Ah
.text:000000000000393A                 jz      short loc_39A4
.text:000000000000393C                 mov     [rsp+48h+var_48], esi
.text:000000000000393F                 mov     rcx, rsp
.text:0000000000003942                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003949                 mov     rsi, rax
.text:000000000000394C                 mov     [rsp+48h+var_44], 0
.text:0000000000003955                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000395E                 mov     [rsp+48h+var_34], 0
.text:0000000000003967                 mov     [rsp+48h+var_2C], 0
.text:0000000000003970                 mov     [rsp+48h+var_24], 0
.text:0000000000003979                 mov     [rsp+48h+var_1C], 0
.text:0000000000003982                 mov     [rsp+48h+var_14], 0
.text:000000000000398A                 call    quotearg_n_options
.text:000000000000398F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003994                 xor     rcx, fs:28h
.text:000000000000399D                 jnz     short loc_39A9
.text:000000000000399F                 add     rsp, 48h
.text:00000000000039A3                 retn
.text:00000000000039A4 ; ---------------------------------------------------------------------------
.text:00000000000039A4
.text:00000000000039A4 loc_39A4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000039A4                 call    _abort
.text:00000000000039A9 ; ---------------------------------------------------------------------------
.text:00000000000039A9
.text:00000000000039A9 loc_39A9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000039A9                 call    ___stack_chk_fail
.text:00000000000039A9 ; } // starts at 3920
.text:00000000000039A9 quotearg_n_style_colon endp
.text:00000000000039A9
.text:00000000000039A9 ; ---------------------------------------------------------------------------
.text:00000000000039AE                 align 10h
.text:00000000000039B0
.text:00000000000039B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039B0
.text:00000000000039B0 ; Attributes: info_from_lumina
.text:00000000000039B0
.text:00000000000039B0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000039B0                 public quotearg_n_custom_mem
.text:00000000000039B0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000039B0                                         ; quotearg_custom+12↓j ...
.text:00000000000039B0
.text:00000000000039B0 var_48          = xmmword ptr -48h
.text:00000000000039B0 var_38          = xmmword ptr -38h
.text:00000000000039B0 var_28          = xmmword ptr -28h
.text:00000000000039B0 var_18          = qword ptr -18h
.text:00000000000039B0 var_10          = qword ptr -10h
.text:00000000000039B0
.text:00000000000039B0 ; __unwind {
.text:00000000000039B0                 sub     rsp, 48h
.text:00000000000039B4                 mov     r9, rcx
.text:00000000000039B7                 mov     rcx, cs:qword_207230
.text:00000000000039BE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000039C6                 mov     rax, fs:28h
.text:00000000000039CF                 mov     [rsp+48h+var_10], rax
.text:00000000000039D4                 xor     eax, eax
.text:00000000000039D6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000039DA                 test    rsi, rsi
.text:00000000000039DD                 mov     [rsp+48h+var_18], rcx
.text:00000000000039E2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:00000000000039E9                 movdqa  xmm0, cs:xmmword_207210
.text:00000000000039F1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000039F6                 movdqa  xmm0, cs:xmmword_207220
.text:00000000000039FE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003A03                 jz      short loc_3A37
.text:0000000000003A05                 test    rdx, rdx
.text:0000000000003A08                 jz      short loc_3A37
.text:0000000000003A0A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003A0F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003A14                 mov     rcx, rsp
.text:0000000000003A17                 mov     rdx, r8
.text:0000000000003A1A                 mov     rsi, r9
.text:0000000000003A1D                 call    quotearg_n_options
.text:0000000000003A22                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003A27                 xor     rdi, fs:28h
.text:0000000000003A30                 jnz     short loc_3A3C
.text:0000000000003A32                 add     rsp, 48h
.text:0000000000003A36                 retn
.text:0000000000003A37 ; ---------------------------------------------------------------------------
.text:0000000000003A37
.text:0000000000003A37 loc_3A37:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003A37                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003A37                 call    _abort
.text:0000000000003A3C ; ---------------------------------------------------------------------------
.text:0000000000003A3C
.text:0000000000003A3C loc_3A3C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003A3C                 call    ___stack_chk_fail
.text:0000000000003A3C ; } // starts at 39B0
.text:0000000000003A3C quotearg_n_custom_mem endp
.text:0000000000003A3C
.text:0000000000003A3C ; ---------------------------------------------------------------------------
.text:0000000000003A41                 align 10h
.text:0000000000003A50
.text:0000000000003A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A50
.text:0000000000003A50
.text:0000000000003A50                 public quotearg_n_custom
.text:0000000000003A50 quotearg_n_custom proc near
.text:0000000000003A50 ; __unwind {
.text:0000000000003A50                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A57                 jmp     quotearg_n_custom_mem
.text:0000000000003A57 ; } // starts at 3A50
.text:0000000000003A57 quotearg_n_custom endp
.text:0000000000003A57
.text:0000000000003A57 ; ---------------------------------------------------------------------------
.text:0000000000003A5C                 align 20h
.text:0000000000003A60
.text:0000000000003A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A60
.text:0000000000003A60
.text:0000000000003A60                 public quotearg_custom
.text:0000000000003A60 quotearg_custom proc near
.text:0000000000003A60 ; __unwind {
.text:0000000000003A60                 mov     rcx, rdx
.text:0000000000003A63                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A6A                 mov     rdx, rsi
.text:0000000000003A6D                 mov     rsi, rdi
.text:0000000000003A70                 xor     edi, edi
.text:0000000000003A72                 jmp     quotearg_n_custom_mem
.text:0000000000003A72 ; } // starts at 3A60
.text:0000000000003A72 quotearg_custom endp
.text:0000000000003A72
.text:0000000000003A72 ; ---------------------------------------------------------------------------
.text:0000000000003A77                 align 20h
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80                 public quotearg_custom_mem
.text:0000000000003A80 quotearg_custom_mem proc near
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 mov     r8, rcx
.text:0000000000003A83                 mov     rcx, rdx
.text:0000000000003A86                 mov     rdx, rsi
.text:0000000000003A89                 mov     rsi, rdi
.text:0000000000003A8C                 xor     edi, edi
.text:0000000000003A8E                 jmp     quotearg_n_custom_mem
.text:0000000000003A8E ; } // starts at 3A80
.text:0000000000003A8E quotearg_custom_mem endp
.text:0000000000003A8E
.text:0000000000003A8E ; ---------------------------------------------------------------------------
.text:0000000000003A93                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AA0
.text:0000000000003AA0
.text:0000000000003AA0                 public quote_n_mem
.text:0000000000003AA0 quote_n_mem     proc near
.text:0000000000003AA0 ; __unwind {
.text:0000000000003AA0                 lea     rcx, quote_quoting_options
.text:0000000000003AA7                 jmp     quotearg_n_options
.text:0000000000003AA7 ; } // starts at 3AA0
.text:0000000000003AA7 quote_n_mem     endp
.text:0000000000003AA7
.text:0000000000003AA7 ; ---------------------------------------------------------------------------
.text:0000000000003AAC                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AB0
.text:0000000000003AB0
.text:0000000000003AB0                 public quote_mem
.text:0000000000003AB0 quote_mem       proc near
.text:0000000000003AB0 ; __unwind {
.text:0000000000003AB0                 lea     rcx, quote_quoting_options
.text:0000000000003AB7                 mov     rdx, rsi
.text:0000000000003ABA                 mov     rsi, rdi
.text:0000000000003ABD                 xor     edi, edi
.text:0000000000003ABF                 jmp     quotearg_n_options
.text:0000000000003ABF ; } // starts at 3AB0
.text:0000000000003ABF quote_mem       endp
.text:0000000000003ABF
.text:0000000000003ABF ; ---------------------------------------------------------------------------
.text:0000000000003AC4                 align 10h
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0
.text:0000000000003AD0                 public quote_n
.text:0000000000003AD0 quote_n         proc near
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 lea     rcx, quote_quoting_options
.text:0000000000003AD7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003ADE                 jmp     quotearg_n_options
.text:0000000000003ADE ; } // starts at 3AD0
.text:0000000000003ADE quote_n         endp
.text:0000000000003ADE
.text:0000000000003ADE ; ---------------------------------------------------------------------------
.text:0000000000003AE3                 align 10h
.text:0000000000003AF0
.text:0000000000003AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AF0
.text:0000000000003AF0
.text:0000000000003AF0                 public quote
.text:0000000000003AF0 quote           proc near               ; CODE XREF: main+169↑p
.text:0000000000003AF0                                         ; main+19E↑p
.text:0000000000003AF0 ; __unwind {
.text:0000000000003AF0                 lea     rcx, quote_quoting_options
.text:0000000000003AF7                 mov     rsi, rdi
.text:0000000000003AFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B01                 xor     edi, edi
.text:0000000000003B03                 jmp     quotearg_n_options
.text:0000000000003B03 ; } // starts at 3AF0
.text:0000000000003B03 quote           endp
.text:0000000000003B03
.text:0000000000003B03 ; ---------------------------------------------------------------------------
.text:0000000000003B08                 align 10h
.text:0000000000003B10
.text:0000000000003B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B10
.text:0000000000003B10
.text:0000000000003B10 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003B10                 public version_etc_arn
.text:0000000000003B10 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3F4B↓j
.text:0000000000003B10                                         ; version_etc_va:loc_3F9B↓p ...
.text:0000000000003B10
.text:0000000000003B10 var_58          = qword ptr -58h
.text:0000000000003B10 var_50          = qword ptr -50h
.text:0000000000003B10 var_48          = qword ptr -48h
.text:0000000000003B10 var_40          = qword ptr -40h
.text:0000000000003B10
.text:0000000000003B10 ; __unwind {
.text:0000000000003B10                 push    r15
.text:0000000000003B12                 push    r14
.text:0000000000003B14                 push    r13
.text:0000000000003B16                 push    r12
.text:0000000000003B18                 mov     r12, r9
.text:0000000000003B1B                 push    rbp
.text:0000000000003B1C                 push    rbx
.text:0000000000003B1D                 mov     rbp, rdi
.text:0000000000003B20                 mov     rbx, r8
.text:0000000000003B23                 sub     rsp, 28h
.text:0000000000003B27                 test    rsi, rsi
.text:0000000000003B2A                 jz      loc_3C48
.text:0000000000003B30                 mov     r8, rdx
.text:0000000000003B33                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003B3A                 mov     r9, rcx
.text:0000000000003B3D                 xor     eax, eax
.text:0000000000003B3F                 mov     rcx, rsi
.text:0000000000003B42                 mov     esi, 1
.text:0000000000003B47                 call    ___fprintf_chk
.text:0000000000003B4C
.text:0000000000003B4C loc_3B4C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003B4C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003B53                 xor     edi, edi        ; domainname
.text:0000000000003B55                 mov     edx, 5          ; category
.text:0000000000003B5A                 call    _dcgettext
.text:0000000000003B5F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003B66                 mov     rcx, rax
.text:0000000000003B69                 mov     r8d, 7E3h
.text:0000000000003B6F                 mov     esi, 1
.text:0000000000003B74                 mov     rdi, rbp
.text:0000000000003B77                 xor     eax, eax
.text:0000000000003B79                 call    ___fprintf_chk
.text:0000000000003B7E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003B85                 xor     edi, edi        ; domainname
.text:0000000000003B87                 mov     edx, 5          ; category
.text:0000000000003B8C                 call    _dcgettext
.text:0000000000003B91                 mov     rsi, rbp        ; stream
.text:0000000000003B94                 mov     rdi, rax        ; s
.text:0000000000003B97                 call    _fputs_unlocked
.text:0000000000003B9C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003BA0                 ja      def_3BB4        ; jumptable 0000000000003BB4 default case
.text:0000000000003BA6                 lea     rdx, jpt_3BB4
.text:0000000000003BAD                 movsxd  rax, ds:(jpt_3BB4 - 5268h)[rdx+r12*4]
.text:0000000000003BB1                 add     rax, rdx
.text:0000000000003BB4                 jmp     rax             ; switch jump
.text:0000000000003BB4 ; ---------------------------------------------------------------------------
.text:0000000000003BB6                 align 20h
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BC0                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003BC0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003BB4 case 8
.text:0000000000003BC4                 mov     rax, [rbx+10h]
.text:0000000000003BC8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003BCF                 mov     r8, [rbx+8]
.text:0000000000003BD3                 mov     edx, 5          ; category
.text:0000000000003BD8                 xor     edi, edi        ; domainname
.text:0000000000003BDA                 mov     r13, [rbx+30h]
.text:0000000000003BDE                 mov     r12, [rbx+28h]
.text:0000000000003BE2                 mov     [rsp+58h+var_48], r9
.text:0000000000003BE7                 mov     r15, [rbx+20h]
.text:0000000000003BEB                 mov     r14, [rbx+18h]
.text:0000000000003BEF                 mov     [rsp+58h+var_58], rax
.text:0000000000003BF3                 mov     [rsp+58h+var_50], r8
.text:0000000000003BF8                 mov     rbx, [rbx]
.text:0000000000003BFB                 call    _dcgettext
.text:0000000000003C00                 sub     rsp, 8
.text:0000000000003C04
.text:0000000000003C04 loc_3C04:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003C04                 mov     r9, [rsp+60h+var_48]
.text:0000000000003C09                 mov     rdx, rax
.text:0000000000003C0C                 mov     rcx, rbx
.text:0000000000003C0F                 mov     esi, 1
.text:0000000000003C14                 mov     rdi, rbp
.text:0000000000003C17                 xor     eax, eax
.text:0000000000003C19                 push    r9
.text:0000000000003C1B                 push    r13
.text:0000000000003C1D                 push    r12
.text:0000000000003C1F                 push    r15
.text:0000000000003C21                 push    r14
.text:0000000000003C23                 mov     r9, [rsp+88h+var_58]
.text:0000000000003C28                 mov     r8, [rsp+88h+var_50]
.text:0000000000003C2D                 call    ___fprintf_chk
.text:0000000000003C32                 add     rsp, 30h
.text:0000000000003C36
.text:0000000000003C36 loc_3C36:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C36                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003C36                 add     rsp, 28h        ; jumptable 0000000000003BB4 case 0
.text:0000000000003C3A                 pop     rbx
.text:0000000000003C3B                 pop     rbp
.text:0000000000003C3C                 pop     r12
.text:0000000000003C3E                 pop     r13
.text:0000000000003C40                 pop     r14
.text:0000000000003C42                 pop     r15
.text:0000000000003C44                 retn
.text:0000000000003C44 ; ---------------------------------------------------------------------------
.text:0000000000003C45                 align 8
.text:0000000000003C48
.text:0000000000003C48 loc_3C48:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003C48                 mov     r8, rcx
.text:0000000000003C4B                 mov     rcx, rdx
.text:0000000000003C4E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003C55                 mov     esi, 1
.text:0000000000003C5A                 xor     eax, eax
.text:0000000000003C5C                 call    ___fprintf_chk
.text:0000000000003C61                 jmp     loc_3B4C
.text:0000000000003C61 ; ---------------------------------------------------------------------------
.text:0000000000003C66                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C70                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003C70                 mov     r10, [rbx+40h]  ; jumptable 0000000000003BB4 case 9
.text:0000000000003C74                 mov     r9, [rbx+38h]
.text:0000000000003C78                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003C7F                 mov     rax, [rbx+10h]
.text:0000000000003C83                 mov     r8, [rbx+8]
.text:0000000000003C87                 mov     edx, 5          ; category
.text:0000000000003C8C                 mov     r13, [rbx+30h]
.text:0000000000003C90                 mov     r12, [rbx+28h]
.text:0000000000003C94                 mov     r15, [rbx+20h]
.text:0000000000003C98                 mov     r14, [rbx+18h]
.text:0000000000003C9C                 mov     rbx, [rbx]
.text:0000000000003C9F                 mov     [rsp+58h+var_40], r10
.text:0000000000003CA4                 mov     [rsp+58h+var_48], r9
.text:0000000000003CA9                 mov     [rsp+58h+var_58], rax
.text:0000000000003CAD                 mov     [rsp+58h+var_50], r8
.text:0000000000003CB2
.text:0000000000003CB2 loc_3CB2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003CB2                 xor     edi, edi        ; domainname
.text:0000000000003CB4                 call    _dcgettext
.text:0000000000003CB9                 mov     r10, [rsp+58h+var_40]
.text:0000000000003CBE                 push    r10
.text:0000000000003CC0                 jmp     loc_3C04
.text:0000000000003CC0 ; ---------------------------------------------------------------------------
.text:0000000000003CC5                 align 8
.text:0000000000003CC8
.text:0000000000003CC8 loc_3CC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CC8                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003CC8                 mov     rbx, [rbx]      ; jumptable 0000000000003BB4 case 1
.text:0000000000003CCB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003CD2                 mov     edx, 5          ; category
.text:0000000000003CD7                 xor     edi, edi        ; domainname
.text:0000000000003CD9                 call    _dcgettext
.text:0000000000003CDE                 add     rsp, 28h
.text:0000000000003CE2                 mov     rcx, rbx
.text:0000000000003CE5                 mov     rdi, rbp
.text:0000000000003CE8                 pop     rbx
.text:0000000000003CE9                 pop     rbp
.text:0000000000003CEA                 pop     r12
.text:0000000000003CEC                 pop     r13
.text:0000000000003CEE                 pop     r14
.text:0000000000003CF0                 pop     r15
.text:0000000000003CF2                 mov     rdx, rax
.text:0000000000003CF5                 mov     esi, 1
.text:0000000000003CFA                 xor     eax, eax
.text:0000000000003CFC                 jmp     ___fprintf_chk
.text:0000000000003CFC ; ---------------------------------------------------------------------------
.text:0000000000003D01                 align 8
.text:0000000000003D08
.text:0000000000003D08 loc_3D08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D08                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003D08                 mov     r12, [rbx+8]    ; jumptable 0000000000003BB4 case 2
.text:0000000000003D0C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003D13                 mov     rbx, [rbx]
.text:0000000000003D16                 mov     edx, 5          ; category
.text:0000000000003D1B                 xor     edi, edi        ; domainname
.text:0000000000003D1D                 call    _dcgettext
.text:0000000000003D22                 add     rsp, 28h
.text:0000000000003D26                 mov     r8, r12
.text:0000000000003D29                 mov     rcx, rbx
.text:0000000000003D2C                 mov     rdi, rbp
.text:0000000000003D2F                 mov     rdx, rax
.text:0000000000003D32                 mov     esi, 1
.text:0000000000003D37                 pop     rbx
.text:0000000000003D38                 pop     rbp
.text:0000000000003D39                 pop     r12
.text:0000000000003D3B                 pop     r13
.text:0000000000003D3D                 pop     r14
.text:0000000000003D3F                 pop     r15
.text:0000000000003D41                 xor     eax, eax
.text:0000000000003D43                 jmp     ___fprintf_chk
.text:0000000000003D43 ; ---------------------------------------------------------------------------
.text:0000000000003D48                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D50                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003D50                 mov     r13, [rbx+10h]  ; jumptable 0000000000003BB4 case 3
.text:0000000000003D54                 mov     r12, [rbx+8]
.text:0000000000003D58                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003D5F                 mov     rbx, [rbx]
.text:0000000000003D62                 mov     edx, 5          ; category
.text:0000000000003D67                 xor     edi, edi        ; domainname
.text:0000000000003D69                 call    _dcgettext
.text:0000000000003D6E                 add     rsp, 28h
.text:0000000000003D72                 mov     r9, r13
.text:0000000000003D75                 mov     r8, r12
.text:0000000000003D78                 mov     rcx, rbx
.text:0000000000003D7B                 mov     rdi, rbp
.text:0000000000003D7E                 mov     rdx, rax
.text:0000000000003D81                 pop     rbx
.text:0000000000003D82                 pop     rbp
.text:0000000000003D83                 pop     r12
.text:0000000000003D85                 pop     r13
.text:0000000000003D87                 pop     r14
.text:0000000000003D89                 pop     r15
.text:0000000000003D8B                 mov     esi, 1
.text:0000000000003D90                 xor     eax, eax
.text:0000000000003D92                 jmp     ___fprintf_chk
.text:0000000000003D92 ; ---------------------------------------------------------------------------
.text:0000000000003D97                 align 20h
.text:0000000000003DA0
.text:0000000000003DA0 loc_3DA0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DA0                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003DA0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003BB4 case 4
.text:0000000000003DA7                 mov     edx, 5          ; category
.text:0000000000003DAC                 xor     edi, edi        ; domainname
.text:0000000000003DAE                 mov     r14, [rbx+18h]
.text:0000000000003DB2                 mov     r13, [rbx+10h]
.text:0000000000003DB6                 mov     r12, [rbx+8]
.text:0000000000003DBA                 mov     rbx, [rbx]
.text:0000000000003DBD                 call    _dcgettext
.text:0000000000003DC2                 sub     rsp, 8
.text:0000000000003DC6
.text:0000000000003DC6 loc_3DC6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003DC6                 push    r14
.text:0000000000003DC8                 mov     rdx, rax
.text:0000000000003DCB                 mov     r9, r13
.text:0000000000003DCE                 mov     r8, r12
.text:0000000000003DD1                 mov     rcx, rbx
.text:0000000000003DD4                 mov     rdi, rbp
.text:0000000000003DD7                 mov     esi, 1
.text:0000000000003DDC                 xor     eax, eax
.text:0000000000003DDE                 call    ___fprintf_chk
.text:0000000000003DE3                 pop     rax
.text:0000000000003DE4                 pop     rdx
.text:0000000000003DE5                 add     rsp, 28h
.text:0000000000003DE9                 pop     rbx
.text:0000000000003DEA                 pop     rbp
.text:0000000000003DEB                 pop     r12
.text:0000000000003DED                 pop     r13
.text:0000000000003DEF                 pop     r14
.text:0000000000003DF1                 pop     r15
.text:0000000000003DF3                 retn
.text:0000000000003DF3 ; ---------------------------------------------------------------------------
.text:0000000000003DF4                 align 8
.text:0000000000003DF8
.text:0000000000003DF8 loc_3DF8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DF8                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003DF8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003BB4 case 5
.text:0000000000003DFC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003E03                 mov     edx, 5          ; category
.text:0000000000003E08                 xor     edi, edi        ; domainname
.text:0000000000003E0A                 mov     r14, [rbx+18h]
.text:0000000000003E0E                 mov     r13, [rbx+10h]
.text:0000000000003E12                 mov     r12, [rbx+8]
.text:0000000000003E16                 mov     rbx, [rbx]
.text:0000000000003E19                 call    _dcgettext
.text:0000000000003E1E                 push    r15
.text:0000000000003E20                 jmp     short loc_3DC6
.text:0000000000003E20 ; ---------------------------------------------------------------------------
.text:0000000000003E22                 align 8
.text:0000000000003E28
.text:0000000000003E28 loc_3E28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E28                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003E28                 mov     r8, [rbx+8]     ; jumptable 0000000000003BB4 case 6
.text:0000000000003E2C                 mov     r12, [rbx+28h]
.text:0000000000003E30                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003E37                 mov     r15, [rbx+20h]
.text:0000000000003E3B                 mov     r14, [rbx+18h]
.text:0000000000003E3F                 mov     edx, 5          ; category
.text:0000000000003E44                 mov     r13, [rbx+10h]
.text:0000000000003E48                 xor     edi, edi        ; domainname
.text:0000000000003E4A                 mov     rbx, [rbx]
.text:0000000000003E4D                 mov     [rsp+58h+var_58], r8
.text:0000000000003E51                 call    _dcgettext
.text:0000000000003E56                 sub     rsp, 8
.text:0000000000003E5A                 mov     r9, r13
.text:0000000000003E5D                 push    r12
.text:0000000000003E5F                 push    r15
.text:0000000000003E61                 push    r14
.text:0000000000003E63
.text:0000000000003E63 loc_3E63:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003E63                 mov     r8, [rsp+78h+var_58]
.text:0000000000003E68                 mov     rcx, rbx
.text:0000000000003E6B                 mov     rdx, rax
.text:0000000000003E6E                 mov     rdi, rbp
.text:0000000000003E71                 mov     esi, 1
.text:0000000000003E76                 xor     eax, eax
.text:0000000000003E78                 call    ___fprintf_chk
.text:0000000000003E7D                 add     rsp, 20h
.text:0000000000003E81                 add     rsp, 28h
.text:0000000000003E85                 pop     rbx
.text:0000000000003E86                 pop     rbp
.text:0000000000003E87                 pop     r12
.text:0000000000003E89                 pop     r13
.text:0000000000003E8B                 pop     r14
.text:0000000000003E8D                 pop     r15
.text:0000000000003E8F                 retn
.text:0000000000003E90 ; ---------------------------------------------------------------------------
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E90                                         ; DATA XREF: .rodata:jpt_3BB4↓o
.text:0000000000003E90                 mov     r9, [rbx+10h]   ; jumptable 0000000000003BB4 case 7
.text:0000000000003E94                 mov     r13, [rbx+30h]
.text:0000000000003E98                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003E9F                 mov     r12, [rbx+28h]
.text:0000000000003EA3                 mov     r15, [rbx+20h]
.text:0000000000003EA7                 mov     edx, 5          ; category
.text:0000000000003EAC                 mov     r14, [rbx+18h]
.text:0000000000003EB0                 mov     r8, [rbx+8]
.text:0000000000003EB4                 xor     edi, edi        ; domainname
.text:0000000000003EB6                 mov     [rsp+58h+var_50], r9
.text:0000000000003EBB                 mov     rbx, [rbx]
.text:0000000000003EBE                 mov     [rsp+58h+var_58], r8
.text:0000000000003EC2                 call    _dcgettext
.text:0000000000003EC7                 push    r13
.text:0000000000003EC9                 push    r12
.text:0000000000003ECB                 push    r15
.text:0000000000003ECD                 push    r14
.text:0000000000003ECF                 mov     r9, [rsp+78h+var_50]
.text:0000000000003ED4                 jmp     short loc_3E63
.text:0000000000003ED4 ; ---------------------------------------------------------------------------
.text:0000000000003ED6                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 def_3BB4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003EE0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003BB4 default case
.text:0000000000003EE4                 mov     r9, [rbx+38h]
.text:0000000000003EE8                 mov     edx, 5
.text:0000000000003EED                 mov     rax, [rbx+10h]
.text:0000000000003EF1                 mov     r8, [rbx+8]
.text:0000000000003EF5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003EFC                 mov     r13, [rbx+30h]
.text:0000000000003F00                 mov     r12, [rbx+28h]
.text:0000000000003F04                 mov     r15, [rbx+20h]
.text:0000000000003F08                 mov     r14, [rbx+18h]
.text:0000000000003F0C                 mov     [rsp+58h+var_40], r10
.text:0000000000003F11                 mov     [rsp+58h+var_48], r9
.text:0000000000003F16                 mov     [rsp+58h+var_58], rax
.text:0000000000003F1A                 mov     [rsp+58h+var_50], r8
.text:0000000000003F1F                 mov     rbx, [rbx]
.text:0000000000003F22                 jmp     loc_3CB2
.text:0000000000003F22 ; } // starts at 3B10
.text:0000000000003F22 version_etc_arn endp
.text:0000000000003F22
.text:0000000000003F22 ; ---------------------------------------------------------------------------
.text:0000000000003F27                 align 10h
.text:0000000000003F30
.text:0000000000003F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F30
.text:0000000000003F30 ; Attributes: info_from_lumina
.text:0000000000003F30
.text:0000000000003F30 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003F30                 public version_etc_ar
.text:0000000000003F30 version_etc_ar  proc near
.text:0000000000003F30 ; __unwind {
.text:0000000000003F30                 xor     r9d, r9d
.text:0000000000003F33                 cmp     qword ptr [r8], 0
.text:0000000000003F37                 jz      short loc_3F4B
.text:0000000000003F39                 nop     dword ptr [rax+00000000h]
.text:0000000000003F40
.text:0000000000003F40 loc_3F40:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003F40                 add     r9, 1
.text:0000000000003F44                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003F49                 jnz     short loc_3F40
.text:0000000000003F4B
.text:0000000000003F4B loc_3F4B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003F4B                 jmp     version_etc_arn
.text:0000000000003F4B ; } // starts at 3F30
.text:0000000000003F4B version_etc_ar  endp
.text:0000000000003F4B
.text:0000000000003F50
.text:0000000000003F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F50
.text:0000000000003F50 ; Attributes: info_from_lumina
.text:0000000000003F50
.text:0000000000003F50 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003F50                 public version_etc_va
.text:0000000000003F50 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000003F50                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000003F50
.text:0000000000003F50 authtab         = qword ptr -68h
.text:0000000000003F50 var_10          = qword ptr -10h
.text:0000000000003F50
.text:0000000000003F50 ; __unwind {
.text:0000000000003F50                 sub     rsp, 68h
.text:0000000000003F54                 mov     r10, r8
.text:0000000000003F57                 xor     r9d, r9d
.text:0000000000003F5A                 mov     rax, fs:28h
.text:0000000000003F63                 mov     [rsp+68h+var_10], rax
.text:0000000000003F68                 xor     eax, eax
.text:0000000000003F6A                 mov     r8, rsp
.text:0000000000003F6D                 nop     dword ptr [rax]
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003F70                 mov     eax, [r10]
.text:0000000000003F73                 cmp     eax, 2Fh ; '/'
.text:0000000000003F76                 ja      short loc_3FBA
.text:0000000000003F78                 mov     r11d, eax
.text:0000000000003F7B                 add     r11, [r10+10h]
.text:0000000000003F7F                 add     eax, 8
.text:0000000000003F82                 mov     [r10], eax
.text:0000000000003F85
.text:0000000000003F85 loc_3F85:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003F85                 mov     rax, [r11]
.text:0000000000003F88                 test    rax, rax
.text:0000000000003F8B                 mov     [r8+r9*8], rax
.text:0000000000003F8F                 jz      short loc_3F9B
.text:0000000000003F91                 add     r9, 1
.text:0000000000003F95                 cmp     r9, 0Ah
.text:0000000000003F99                 jnz     short loc_3F70
.text:0000000000003F9B
.text:0000000000003F9B loc_3F9B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003F9B                 call    version_etc_arn
.text:0000000000003FA0                 mov     rax, [rsp+68h+var_10]
.text:0000000000003FA5                 xor     rax, fs:28h
.text:0000000000003FAE                 jnz     short loc_3FB5
.text:0000000000003FB0                 add     rsp, 68h
.text:0000000000003FB4                 retn
.text:0000000000003FB5 ; ---------------------------------------------------------------------------
.text:0000000000003FB5
.text:0000000000003FB5 loc_3FB5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003FB5                 call    ___stack_chk_fail
.text:0000000000003FBA ; ---------------------------------------------------------------------------
.text:0000000000003FBA
.text:0000000000003FBA loc_3FBA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003FBA                 mov     r11, [r10+8]
.text:0000000000003FBE                 lea     rax, [r11+8]
.text:0000000000003FC2                 mov     [r10+8], rax
.text:0000000000003FC6                 jmp     short loc_3F85
.text:0000000000003FC6 ; } // starts at 3F50
.text:0000000000003FC6 version_etc_va  endp
.text:0000000000003FC6
.text:0000000000003FC6 ; ---------------------------------------------------------------------------
.text:0000000000003FC8                 align 10h
.text:0000000000003FD0
.text:0000000000003FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FD0
.text:0000000000003FD0 ; Attributes: info_from_lumina
.text:0000000000003FD0
.text:0000000000003FD0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003FD0                 public version_etc
.text:0000000000003FD0 version_etc     proc near
.text:0000000000003FD0
.text:0000000000003FD0 var_C0          = dword ptr -0C0h
.text:0000000000003FD0 var_B8          = qword ptr -0B8h
.text:0000000000003FD0 var_B0          = qword ptr -0B0h
.text:0000000000003FD0 var_A8          = byte ptr -0A8h
.text:0000000000003FD0 var_50          = qword ptr -50h
.text:0000000000003FD0 var_48          = byte ptr -48h
.text:0000000000003FD0 var_28          = qword ptr -28h
.text:0000000000003FD0 var_20          = qword ptr -20h
.text:0000000000003FD0 arg_0           = byte ptr  8
.text:0000000000003FD0
.text:0000000000003FD0 ; __unwind {
.text:0000000000003FD0                 push    rbp
.text:0000000000003FD1                 push    rbx
.text:0000000000003FD2                 mov     r10d, 20h ; ' '
.text:0000000000003FD8                 xor     r11d, r11d
.text:0000000000003FDB                 sub     rsp, 0B8h
.text:0000000000003FE2                 mov     rax, fs:28h
.text:0000000000003FEB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003FF0                 xor     eax, eax
.text:0000000000003FF2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003FFA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004002                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000400A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000400F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004017                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000401F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004024                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000402C                 xor     r9d, r9d
.text:000000000000402F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004034                 mov     rbp, rax
.text:0000000000004037                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004040
.text:0000000000004040 loc_4040:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004040                 cmp     r10d, 2Fh ; '/'
.text:0000000000004044                 ja      short loc_409C
.text:0000000000004046                 mov     eax, r10d
.text:0000000000004049                 mov     r11d, 1
.text:000000000000404F                 add     r10d, 8
.text:0000000000004053                 add     rax, rbp
.text:0000000000004056
.text:0000000000004056 loc_4056:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004056                 mov     rax, [rax]
.text:0000000000004059                 test    rax, rax
.text:000000000000405C                 mov     [r8+r9*8], rax
.text:0000000000004060                 jz      short loc_406C
.text:0000000000004062                 add     r9, 1
.text:0000000000004066                 cmp     r9, 0Ah
.text:000000000000406A                 jnz     short loc_4040
.text:000000000000406C
.text:000000000000406C loc_406C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000406C                 test    r11b, r11b
.text:000000000000406F                 jnz     short loc_4095
.text:0000000000004071
.text:0000000000004071 loc_4071:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004071                 call    version_etc_arn
.text:0000000000004076                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000407B                 xor     rax, fs:28h
.text:0000000000004084                 jnz     short loc_4090
.text:0000000000004086                 add     rsp, 0B8h
.text:000000000000408D                 pop     rbx
.text:000000000000408E                 pop     rbp
.text:000000000000408F                 retn
.text:0000000000004090 ; ---------------------------------------------------------------------------
.text:0000000000004090
.text:0000000000004090 loc_4090:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004090                 call    ___stack_chk_fail
.text:0000000000004095 ; ---------------------------------------------------------------------------
.text:0000000000004095
.text:0000000000004095 loc_4095:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004095                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000409A                 jmp     short loc_4071
.text:000000000000409C ; ---------------------------------------------------------------------------
.text:000000000000409C
.text:000000000000409C loc_409C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000409C                 mov     rax, rbx
.text:000000000000409F                 add     rbx, 8
.text:00000000000040A3                 jmp     short loc_4056
.text:00000000000040A3 ; } // starts at 3FD0
.text:00000000000040A3 version_etc     endp
.text:00000000000040A3
.text:00000000000040A3 ; ---------------------------------------------------------------------------
.text:00000000000040A5                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0 ; Attributes: info_from_lumina
.text:00000000000040B0
.text:00000000000040B0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000040B0                 public emit_bug_reporting_address
.text:00000000000040B0 emit_bug_reporting_address proc near
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 push    rbx
.text:00000000000040B1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000040B8                 mov     edx, 5          ; category
.text:00000000000040BD                 xor     edi, edi        ; domainname
.text:00000000000040BF                 call    _dcgettext
.text:00000000000040C4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000040CB                 mov     rsi, rax
.text:00000000000040CE                 mov     edi, 1
.text:00000000000040D3                 xor     eax, eax
.text:00000000000040D5                 call    ___printf_chk
.text:00000000000040DA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000040E1                 mov     edx, 5          ; category
.text:00000000000040E6                 xor     edi, edi        ; domainname
.text:00000000000040E8                 call    _dcgettext
.text:00000000000040ED                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000040F4                 lea     rdx, unk_47BF
.text:00000000000040FB                 mov     rsi, rax
.text:00000000000040FE                 mov     edi, 1
.text:0000000000004103                 xor     eax, eax
.text:0000000000004105                 call    ___printf_chk
.text:000000000000410A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004111                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004118                 xor     edi, edi        ; domainname
.text:000000000000411A                 mov     edx, 5          ; category
.text:000000000000411F                 call    _dcgettext
.text:0000000000004124                 mov     rsi, rbx        ; stream
.text:0000000000004127                 mov     rdi, rax        ; s
.text:000000000000412A                 pop     rbx
.text:000000000000412B                 jmp     _fputs_unlocked
.text:000000000000412B ; } // starts at 40B0
.text:000000000000412B emit_bug_reporting_address endp
.text:000000000000412B
.text:0000000000004130
.text:0000000000004130 ; =============== S U B R O U T I N E =======================================
.text:0000000000004130
.text:0000000000004130
.text:0000000000004130                 public xmalloc
.text:0000000000004130 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004130                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004130 ; __unwind {
.text:0000000000004130                 push    rbx
.text:0000000000004131                 mov     rbx, rdi
.text:0000000000004134                 call    _malloc
.text:0000000000004139                 test    rax, rax
.text:000000000000413C                 jnz     short loc_4143
.text:000000000000413E                 test    rbx, rbx
.text:0000000000004141                 jnz     short loc_4145
.text:0000000000004143
.text:0000000000004143 loc_4143:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004143                 pop     rbx
.text:0000000000004144                 retn
.text:0000000000004145 ; ---------------------------------------------------------------------------
.text:0000000000004145
.text:0000000000004145 loc_4145:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004145                 call    xalloc_die
.text:0000000000004145 ; } // starts at 4130
.text:0000000000004145 xmalloc         endp
.text:0000000000004145
.text:0000000000004145 ; ---------------------------------------------------------------------------
.text:000000000000414A                 align 10h
.text:0000000000004150
.text:0000000000004150 ; =============== S U B R O U T I N E =======================================
.text:0000000000004150
.text:0000000000004150 ; Attributes: info_from_lumina
.text:0000000000004150
.text:0000000000004150 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004150                 public xnmalloc
.text:0000000000004150 xnmalloc        proc near
.text:0000000000004150 ; __unwind {
.text:0000000000004150                 mov     rax, rdi
.text:0000000000004153                 mul     rsi
.text:0000000000004156                 mov     rdi, rax
.text:0000000000004159                 seto    al
.text:000000000000415C                 test    rdi, rdi
.text:000000000000415F                 js      short loc_416B
.text:0000000000004161                 movzx   eax, al
.text:0000000000004164                 test    rax, rax
.text:0000000000004167                 jnz     short loc_416B
.text:0000000000004169                 jmp     short xmalloc
.text:000000000000416B ; ---------------------------------------------------------------------------
.text:000000000000416B
.text:000000000000416B loc_416B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000416B                                         ; xnmalloc+17↑j
.text:000000000000416B                 sub     rsp, 8
.text:000000000000416F                 call    xalloc_die
.text:000000000000416F ; } // starts at 4150
.text:000000000000416F xnmalloc        endp
.text:000000000000416F
.text:000000000000416F ; ---------------------------------------------------------------------------
.text:0000000000004174                 align 20h
.text:0000000000004180
.text:0000000000004180 ; =============== S U B R O U T I N E =======================================
.text:0000000000004180
.text:0000000000004180
.text:0000000000004180                 public xcharalloc
.text:0000000000004180 xcharalloc      proc near
.text:0000000000004180 ; __unwind {
.text:0000000000004180                 jmp     short xmalloc
.text:0000000000004180 ; } // starts at 4180
.text:0000000000004180 xcharalloc      endp
.text:0000000000004180
.text:0000000000004180 ; ---------------------------------------------------------------------------
.text:0000000000004182                 align 10h
.text:0000000000004190
.text:0000000000004190 ; =============== S U B R O U T I N E =======================================
.text:0000000000004190
.text:0000000000004190 ; Attributes: info_from_lumina
.text:0000000000004190
.text:0000000000004190 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004190                 public xrealloc
.text:0000000000004190 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004190                                         ; quotearg_n_options+182↑p ...
.text:0000000000004190 ; __unwind {
.text:0000000000004190                 test    rsi, rsi
.text:0000000000004193                 push    rbx
.text:0000000000004194                 mov     rbx, rsi
.text:0000000000004197                 jnz     short loc_419E
.text:0000000000004199                 test    rdi, rdi
.text:000000000000419C                 jnz     short loc_41B8
.text:000000000000419E
.text:000000000000419E loc_419E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000419E                 mov     rsi, rbx        ; size
.text:00000000000041A1                 call    _realloc
.text:00000000000041A6                 test    rax, rax
.text:00000000000041A9                 jnz     short loc_41B0
.text:00000000000041AB                 test    rbx, rbx
.text:00000000000041AE                 jnz     short loc_41C1
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000041B0                 pop     rbx
.text:00000000000041B1                 retn
.text:00000000000041B1 ; ---------------------------------------------------------------------------
.text:00000000000041B2                 align 8
.text:00000000000041B8
.text:00000000000041B8 loc_41B8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000041B8                 call    _free
.text:00000000000041BD                 xor     eax, eax
.text:00000000000041BF                 pop     rbx
.text:00000000000041C0                 retn
.text:00000000000041C1 ; ---------------------------------------------------------------------------
.text:00000000000041C1
.text:00000000000041C1 loc_41C1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000041C1                 call    xalloc_die
.text:00000000000041C1 ; } // starts at 4190
.text:00000000000041C1 xrealloc        endp
.text:00000000000041C1
.text:00000000000041C1 ; ---------------------------------------------------------------------------
.text:00000000000041C6                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0 ; Attributes: info_from_lumina
.text:00000000000041D0
.text:00000000000041D0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000041D0                 public xnrealloc
.text:00000000000041D0 xnrealloc       proc near
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 mov     rax, rsi
.text:00000000000041D3                 mul     rdx
.text:00000000000041D6                 mov     rsi, rax
.text:00000000000041D9                 seto    al
.text:00000000000041DC                 test    rsi, rsi
.text:00000000000041DF                 js      short loc_41EB
.text:00000000000041E1                 movzx   eax, al
.text:00000000000041E4                 test    rax, rax
.text:00000000000041E7                 jnz     short loc_41EB
.text:00000000000041E9                 jmp     short xrealloc
.text:00000000000041EB ; ---------------------------------------------------------------------------
.text:00000000000041EB
.text:00000000000041EB loc_41EB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000041EB                                         ; xnrealloc+17↑j
.text:00000000000041EB                 sub     rsp, 8
.text:00000000000041EF                 call    xalloc_die
.text:00000000000041EF ; } // starts at 41D0
.text:00000000000041EF xnrealloc       endp
.text:00000000000041EF
.text:00000000000041EF ; ---------------------------------------------------------------------------
.text:00000000000041F4                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200 ; Attributes: info_from_lumina
.text:0000000000004200
.text:0000000000004200 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004200                 public x2nrealloc
.text:0000000000004200 x2nrealloc      proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 test    rdi, rdi
.text:0000000000004203                 mov     r9, rdx
.text:0000000000004206                 mov     rcx, [rsi]
.text:0000000000004209                 jz      short loc_4240
.text:000000000000420B                 xor     edx, edx
.text:000000000000420D                 mov     rax, 5555555555555554h
.text:0000000000004217                 div     r9
.text:000000000000421A                 cmp     rax, rcx
.text:000000000000421D                 jbe     short loc_425B
.text:000000000000421F                 mov     rax, rcx
.text:0000000000004222                 shr     rax, 1
.text:0000000000004225                 lea     rcx, [rax+rcx+1]
.text:000000000000422A
.text:000000000000422A loc_422A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000422A                 mov     [rsi], rcx
.text:000000000000422D                 imul    rcx, r9
.text:0000000000004231                 mov     rsi, rcx
.text:0000000000004234                 jmp     xrealloc
.text:0000000000004234 ; ---------------------------------------------------------------------------
.text:0000000000004239                 align 20h
.text:0000000000004240
.text:0000000000004240 loc_4240:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004240                 test    rcx, rcx
.text:0000000000004243                 jz      short loc_4268
.text:0000000000004245
.text:0000000000004245 loc_4245:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004245                 mov     rax, rcx
.text:0000000000004248                 mul     r9
.text:000000000000424B                 seto    dl
.text:000000000000424E                 test    rax, rax
.text:0000000000004251                 movzx   edx, dl
.text:0000000000004254                 js      short loc_425B
.text:0000000000004256                 test    rdx, rdx
.text:0000000000004259                 jz      short loc_422A
.text:000000000000425B
.text:000000000000425B loc_425B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000425B                                         ; x2nrealloc+54↑j
.text:000000000000425B                 sub     rsp, 8
.text:000000000000425F                 call    xalloc_die
.text:000000000000425F ; ---------------------------------------------------------------------------
.text:0000000000004264                 align 8
.text:0000000000004268
.text:0000000000004268 loc_4268:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004268                 xor     edx, edx
.text:000000000000426A                 mov     eax, 80h
.text:000000000000426F                 xor     r8d, r8d
.text:0000000000004272                 div     r9
.text:0000000000004275                 test    rax, rax
.text:0000000000004278                 setz    r8b
.text:000000000000427C                 lea     rcx, [r8+rax]
.text:0000000000004280                 jmp     short loc_4245
.text:0000000000004280 ; } // starts at 4200
.text:0000000000004280 x2nrealloc      endp
.text:0000000000004280
.text:0000000000004280 ; ---------------------------------------------------------------------------
.text:0000000000004282                 align 10h
.text:0000000000004290
.text:0000000000004290 ; =============== S U B R O U T I N E =======================================
.text:0000000000004290
.text:0000000000004290 ; Attributes: info_from_lumina
.text:0000000000004290
.text:0000000000004290 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004290                 public x2realloc
.text:0000000000004290 x2realloc       proc near
.text:0000000000004290 ; __unwind {
.text:0000000000004290                 test    rdi, rdi
.text:0000000000004293                 mov     rax, [rsi]
.text:0000000000004296                 jz      short loc_42C0
.text:0000000000004298                 mov     rdx, 5555555555555553h
.text:00000000000042A2                 cmp     rax, rdx
.text:00000000000042A5                 ja      short loc_42D1
.text:00000000000042A7                 mov     rdx, rax
.text:00000000000042AA                 shr     rdx, 1
.text:00000000000042AD                 lea     rax, [rdx+rax+1]
.text:00000000000042B2
.text:00000000000042B2 loc_42B2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000042B2                 mov     [rsi], rax
.text:00000000000042B5                 mov     rsi, rax
.text:00000000000042B8                 jmp     xrealloc
.text:00000000000042B8 ; ---------------------------------------------------------------------------
.text:00000000000042BD                 align 20h
.text:00000000000042C0
.text:00000000000042C0 loc_42C0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000042C0                 test    rax, rax
.text:00000000000042C3                 mov     edx, 80h
.text:00000000000042C8                 cmovz   rax, rdx
.text:00000000000042CC                 test    rax, rax
.text:00000000000042CF                 jns     short loc_42B2
.text:00000000000042D1
.text:00000000000042D1 loc_42D1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000042D1                 sub     rsp, 8
.text:00000000000042D5                 call    xalloc_die
.text:00000000000042D5 ; } // starts at 4290
.text:00000000000042D5 x2realloc       endp
.text:00000000000042D5
.text:00000000000042D5 ; ---------------------------------------------------------------------------
.text:00000000000042DA                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0
.text:00000000000042E0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000042E0                 public xzalloc
.text:00000000000042E0 xzalloc         proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 push    rbx
.text:00000000000042E1                 mov     rbx, rdi
.text:00000000000042E4                 call    xmalloc
.text:00000000000042E9                 mov     rdx, rbx        ; n
.text:00000000000042EC                 xor     esi, esi        ; c
.text:00000000000042EE                 mov     rdi, rax        ; s
.text:00000000000042F1                 pop     rbx
.text:00000000000042F2                 jmp     _memset
.text:00000000000042F2 ; } // starts at 42E0
.text:00000000000042F2 xzalloc         endp
.text:00000000000042F2
.text:00000000000042F2 ; ---------------------------------------------------------------------------
.text:00000000000042F7                 align 20h
.text:0000000000004300
.text:0000000000004300 ; =============== S U B R O U T I N E =======================================
.text:0000000000004300
.text:0000000000004300 ; Attributes: info_from_lumina
.text:0000000000004300
.text:0000000000004300 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004300                 public xcalloc
.text:0000000000004300 xcalloc         proc near
.text:0000000000004300 ; __unwind {
.text:0000000000004300                 mov     rax, rdi
.text:0000000000004303                 sub     rsp, 8
.text:0000000000004307                 mul     rsi
.text:000000000000430A                 seto    dl
.text:000000000000430D                 test    rax, rax
.text:0000000000004310                 js      short loc_4329
.text:0000000000004312                 movzx   edx, dl
.text:0000000000004315                 test    rdx, rdx
.text:0000000000004318                 jnz     short loc_4329
.text:000000000000431A                 call    _calloc
.text:000000000000431F                 test    rax, rax
.text:0000000000004322                 jz      short loc_4329
.text:0000000000004324                 add     rsp, 8
.text:0000000000004328                 retn
.text:0000000000004329 ; ---------------------------------------------------------------------------
.text:0000000000004329
.text:0000000000004329 loc_4329:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004329                                         ; xcalloc+18↑j ...
.text:0000000000004329                 call    xalloc_die
.text:0000000000004329 ; } // starts at 4300
.text:0000000000004329 xcalloc         endp
.text:0000000000004329
.text:0000000000004329 ; ---------------------------------------------------------------------------
.text:000000000000432E                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330 ; Attributes: info_from_lumina
.text:0000000000004330
.text:0000000000004330 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004330                 public xmemdup
.text:0000000000004330 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004330                                         ; xstrdup+11↓j
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 push    rbp
.text:0000000000004331                 push    rbx
.text:0000000000004332                 mov     rbp, rdi
.text:0000000000004335                 mov     rdi, rsi
.text:0000000000004338                 mov     rbx, rsi
.text:000000000000433B                 sub     rsp, 8
.text:000000000000433F                 call    xmalloc
.text:0000000000004344                 add     rsp, 8
.text:0000000000004348                 mov     rdx, rbx        ; n
.text:000000000000434B                 mov     rsi, rbp        ; src
.text:000000000000434E                 pop     rbx
.text:000000000000434F                 pop     rbp
.text:0000000000004350                 mov     rdi, rax        ; dest
.text:0000000000004353                 jmp     _memcpy
.text:0000000000004353 ; } // starts at 4330
.text:0000000000004353 xmemdup         endp
.text:0000000000004353
.text:0000000000004353 ; ---------------------------------------------------------------------------
.text:0000000000004358                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360
.text:0000000000004360 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004360                 public xstrdup
.text:0000000000004360 xstrdup         proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 push    rbx
.text:0000000000004361                 mov     rbx, rdi
.text:0000000000004364                 call    _strlen
.text:0000000000004369                 mov     rdi, rbx        ; src
.text:000000000000436C                 lea     rsi, [rax+1]    ; n
.text:0000000000004370                 pop     rbx
.text:0000000000004371                 jmp     short xmemdup
.text:0000000000004371 ; } // starts at 4360
.text:0000000000004371 xstrdup         endp
.text:0000000000004371
.text:0000000000004371 ; ---------------------------------------------------------------------------
.text:0000000000004373                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380 ; Attributes: noreturn info_from_lumina
.text:0000000000004380
.text:0000000000004380 ; void __cdecl xalloc_die()
.text:0000000000004380                 public xalloc_die
.text:0000000000004380 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3356↑p
.text:0000000000004380                                         ; xmalloc:loc_4145↑p ...
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004387                 sub     rsp, 8
.text:000000000000438B                 mov     edx, 5          ; category
.text:0000000000004390                 xor     edi, edi        ; domainname
.text:0000000000004392                 call    _dcgettext
.text:0000000000004397                 mov     edi, cs:exit_failure ; status
.text:000000000000439D                 lea     rdx, format+4   ; format
.text:00000000000043A4                 mov     rcx, rax
.text:00000000000043A7                 xor     esi, esi        ; errnum
.text:00000000000043A9                 xor     eax, eax
.text:00000000000043AB                 call    _error
.text:00000000000043B0                 call    _abort
.text:00000000000043B0 ; } // starts at 4380
.text:00000000000043B0 xalloc_die      endp
.text:00000000000043B0
.text:00000000000043B0 ; ---------------------------------------------------------------------------
.text:00000000000043B5                 align 20h
.text:00000000000043C0
.text:00000000000043C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043C0
.text:00000000000043C0 ; Attributes: info_from_lumina
.text:00000000000043C0
.text:00000000000043C0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000043C0                 public rpl_mbrtowc
.text:00000000000043C0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000043C0
.text:00000000000043C0 pwc             = dword ptr -34h
.text:00000000000043C0 var_30          = qword ptr -30h
.text:00000000000043C0
.text:00000000000043C0 ; __unwind {
.text:00000000000043C0                 push    r13
.text:00000000000043C2                 push    r12
.text:00000000000043C4                 mov     r13, rsi
.text:00000000000043C7                 push    rbp
.text:00000000000043C8                 push    rbx
.text:00000000000043C9                 mov     rbx, rdi
.text:00000000000043CC                 mov     r12, rdx
.text:00000000000043CF                 sub     rsp, 18h
.text:00000000000043D3                 mov     rax, fs:28h
.text:00000000000043DC                 mov     [rsp+38h+var_30], rax
.text:00000000000043E1                 xor     eax, eax
.text:00000000000043E3                 lea     rax, [rsp+38h+pwc]
.text:00000000000043E8                 test    rdi, rdi
.text:00000000000043EB                 cmovz   rbx, rax
.text:00000000000043EF                 mov     rdi, rbx        ; pwc
.text:00000000000043F2                 call    _mbrtowc
.text:00000000000043F7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000043FB                 mov     rbp, rax
.text:00000000000043FE                 jbe     short loc_4420
.text:0000000000004400                 test    r12, r12
.text:0000000000004403                 jz      short loc_4420
.text:0000000000004405                 xor     edi, edi
.text:0000000000004407                 call    hard_locale
.text:000000000000440C                 test    al, al
.text:000000000000440E                 jnz     short loc_4420
.text:0000000000004410                 movzx   eax, byte ptr [r13+0]
.text:0000000000004415                 mov     ebp, 1
.text:000000000000441A                 mov     [rbx], eax
.text:000000000000441C                 nop     dword ptr [rax+00h]
.text:0000000000004420
.text:0000000000004420 loc_4420:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004420                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004420                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004425                 xor     rdx, fs:28h
.text:000000000000442E                 mov     rax, rbp
.text:0000000000004431                 jnz     short loc_443E
.text:0000000000004433                 add     rsp, 18h
.text:0000000000004437                 pop     rbx
.text:0000000000004438                 pop     rbp
.text:0000000000004439                 pop     r12
.text:000000000000443B                 pop     r13
.text:000000000000443D                 retn
.text:000000000000443E ; ---------------------------------------------------------------------------
.text:000000000000443E
.text:000000000000443E loc_443E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000443E                 call    ___stack_chk_fail
.text:000000000000443E ; } // starts at 43C0
.text:000000000000443E rpl_mbrtowc     endp
.text:000000000000443E
.text:000000000000443E ; ---------------------------------------------------------------------------
.text:0000000000004443                 align 10h
.text:0000000000004450
.text:0000000000004450 ; =============== S U B R O U T I N E =======================================
.text:0000000000004450
.text:0000000000004450 ; Attributes: info_from_lumina
.text:0000000000004450
.text:0000000000004450 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004450                 public close_stream
.text:0000000000004450 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004450                                         ; close_stdout+33↑p
.text:0000000000004450 ; __unwind {
.text:0000000000004450                 push    r12
.text:0000000000004452                 push    rbp
.text:0000000000004453                 mov     rbp, rdi
.text:0000000000004456                 push    rbx
.text:0000000000004457                 call    ___fpending
.text:000000000000445C                 mov     ebx, [rbp+0]
.text:000000000000445F                 mov     rdi, rbp        ; stream
.text:0000000000004462                 mov     r12, rax
.text:0000000000004465                 call    rpl_fclose
.text:000000000000446A                 and     ebx, 20h
.text:000000000000446D                 test    ebx, ebx
.text:000000000000446F                 jnz     short loc_4488
.text:0000000000004471                 test    eax, eax
.text:0000000000004473                 jz      short loc_447F
.text:0000000000004475                 test    r12, r12
.text:0000000000004478                 mov     eax, 0FFFFFFFFh
.text:000000000000447D                 jz      short loc_44B8
.text:000000000000447F
.text:000000000000447F loc_447F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000447F                 pop     rbx
.text:0000000000004480                 pop     rbp
.text:0000000000004481                 pop     r12
.text:0000000000004483                 retn
.text:0000000000004483 ; ---------------------------------------------------------------------------
.text:0000000000004484                 align 8
.text:0000000000004488
.text:0000000000004488 loc_4488:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004488                 test    eax, eax
.text:000000000000448A                 jnz     short loc_44A8
.text:000000000000448C                 call    ___errno_location
.text:0000000000004491                 mov     dword ptr [rax], 0
.text:0000000000004497                 mov     eax, 0FFFFFFFFh
.text:000000000000449C                 pop     rbx
.text:000000000000449D                 pop     rbp
.text:000000000000449E                 pop     r12
.text:00000000000044A0                 retn
.text:00000000000044A0 ; ---------------------------------------------------------------------------
.text:00000000000044A1                 align 8
.text:00000000000044A8
.text:00000000000044A8 loc_44A8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000044A8                 pop     rbx
.text:00000000000044A9                 mov     eax, 0FFFFFFFFh
.text:00000000000044AE                 pop     rbp
.text:00000000000044AF                 pop     r12
.text:00000000000044B1                 retn
.text:00000000000044B1 ; ---------------------------------------------------------------------------
.text:00000000000044B2                 align 8
.text:00000000000044B8
.text:00000000000044B8 loc_44B8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000044B8                 call    ___errno_location
.text:00000000000044BD                 cmp     dword ptr [rax], 9
.text:00000000000044C0                 pop     rbx
.text:00000000000044C1                 pop     rbp
.text:00000000000044C2                 pop     r12
.text:00000000000044C4                 setnz   al
.text:00000000000044C7                 movzx   eax, al
.text:00000000000044CA                 neg     eax
.text:00000000000044CC                 retn
.text:00000000000044CC ; } // starts at 4450
.text:00000000000044CC close_stream    endp
.text:00000000000044CC
.text:00000000000044CC ; ---------------------------------------------------------------------------
.text:00000000000044CD                 align 10h
.text:00000000000044D0
.text:00000000000044D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044D0
.text:00000000000044D0
.text:00000000000044D0                 public hard_locale
.text:00000000000044D0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000044D0 ; __unwind {
.text:00000000000044D0                 sub     rsp, 8
.text:00000000000044D4                 xor     esi, esi        ; locale
.text:00000000000044D6                 call    _setlocale
.text:00000000000044DB                 mov     rdx, rax
.text:00000000000044DE                 mov     eax, 1
.text:00000000000044E3                 test    rdx, rdx
.text:00000000000044E6                 jz      short loc_4505
.text:00000000000044E8                 lea     rdi, aC         ; "C"
.text:00000000000044EF                 mov     ecx, 2
.text:00000000000044F4                 mov     rsi, rdx
.text:00000000000044F7                 repe cmpsb
.text:00000000000044F9                 setnbe  cl
.text:00000000000044FC                 sbb     cl, 0
.text:00000000000044FF                 xor     eax, eax
.text:0000000000004501                 test    cl, cl
.text:0000000000004503                 jnz     short loc_4510
.text:0000000000004505
.text:0000000000004505 loc_4505:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004505                 add     rsp, 8
.text:0000000000004509                 retn
.text:0000000000004509 ; ---------------------------------------------------------------------------
.text:000000000000450A                 align 10h
.text:0000000000004510
.text:0000000000004510 loc_4510:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004510                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004517                 mov     ecx, 6
.text:000000000000451C                 mov     rsi, rdx
.text:000000000000451F                 repe cmpsb
.text:0000000000004521                 setnbe  al
.text:0000000000004524                 sbb     al, 0
.text:0000000000004526                 test    al, al
.text:0000000000004528                 setnz   al
.text:000000000000452B                 add     rsp, 8
.text:000000000000452F                 retn
.text:000000000000452F ; } // starts at 44D0
.text:000000000000452F hard_locale     endp
.text:000000000000452F
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public locale_charset
.text:0000000000004530 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 sub     rsp, 8
.text:0000000000004534                 mov     edi, 0Eh        ; item
.text:0000000000004539                 call    _nl_langinfo
.text:000000000000453E                 test    rax, rax
.text:0000000000004541                 jz      short loc_4560
.text:0000000000004543                 cmp     byte ptr [rax], 0
.text:0000000000004546                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000454D                 cmovz   rax, rdx
.text:0000000000004551                 add     rsp, 8
.text:0000000000004555                 retn
.text:0000000000004555 ; ---------------------------------------------------------------------------
.text:0000000000004556                 align 20h
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004560                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004567                 add     rsp, 8
.text:000000000000456B                 retn
.text:000000000000456B ; } // starts at 4530
.text:000000000000456B locale_charset  endp
.text:000000000000456B
.text:000000000000456B ; ---------------------------------------------------------------------------
.text:000000000000456C                 align 10h
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570 ; Attributes: info_from_lumina
.text:0000000000004570
.text:0000000000004570 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004570                 public rpl_fclose
.text:0000000000004570 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 push    r12
.text:0000000000004572                 push    rbp
.text:0000000000004573                 push    rbx
.text:0000000000004574                 mov     rbx, rdi
.text:0000000000004577                 call    _fileno
.text:000000000000457C                 test    eax, eax
.text:000000000000457E                 mov     rdi, rbx        ; fp
.text:0000000000004581                 js      short loc_45D7
.text:0000000000004583                 call    ___freading
.text:0000000000004588                 test    eax, eax
.text:000000000000458A                 jnz     short loc_45B8
.text:000000000000458C
.text:000000000000458C loc_458C:                               ; CODE XREF: rpl_fclose+62↓j
.text:000000000000458C                 mov     rdi, rbx        ; stream
.text:000000000000458F                 call    rpl_fflush
.text:0000000000004594                 test    eax, eax
.text:0000000000004596                 jz      short loc_45D4
.text:0000000000004598                 call    ___errno_location
.text:000000000000459D                 mov     r12d, [rax]
.text:00000000000045A0                 mov     rdi, rbx        ; stream
.text:00000000000045A3                 mov     rbp, rax
.text:00000000000045A6                 call    _fclose
.text:00000000000045AB                 test    r12d, r12d
.text:00000000000045AE                 jnz     short loc_45E0
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000045B0                 pop     rbx
.text:00000000000045B1                 pop     rbp
.text:00000000000045B2                 pop     r12
.text:00000000000045B4                 retn
.text:00000000000045B4 ; ---------------------------------------------------------------------------
.text:00000000000045B5                 align 8
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000045B8                 mov     rdi, rbx        ; stream
.text:00000000000045BB                 call    _fileno
.text:00000000000045C0                 xor     esi, esi        ; offset
.text:00000000000045C2                 mov     edx, 1          ; whence
.text:00000000000045C7                 mov     edi, eax        ; fd
.text:00000000000045C9                 call    _lseek
.text:00000000000045CE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000045D2                 jnz     short loc_458C
.text:00000000000045D4
.text:00000000000045D4 loc_45D4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000045D4                 mov     rdi, rbx        ; stream
.text:00000000000045D7
.text:00000000000045D7 loc_45D7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000045D7                 pop     rbx
.text:00000000000045D8                 pop     rbp
.text:00000000000045D9                 pop     r12
.text:00000000000045DB                 jmp     _fclose
.text:00000000000045E0 ; ---------------------------------------------------------------------------
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:00000000000045E0                 mov     [rbp+0], r12d
.text:00000000000045E4                 mov     eax, 0FFFFFFFFh
.text:00000000000045E9                 jmp     short loc_45B0
.text:00000000000045E9 ; } // starts at 4570
.text:00000000000045E9 rpl_fclose      endp
.text:00000000000045E9
.text:00000000000045E9 ; ---------------------------------------------------------------------------
.text:00000000000045EB                 align 10h
.text:00000000000045F0
.text:00000000000045F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045F0
.text:00000000000045F0 ; Attributes: info_from_lumina
.text:00000000000045F0
.text:00000000000045F0 ; int __fastcall rpl_fflush(FILE *stream)
.text:00000000000045F0                 public rpl_fflush
.text:00000000000045F0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:00000000000045F0 ; __unwind {
.text:00000000000045F0                 test    rdi, rdi
.text:00000000000045F3                 push    rbx
.text:00000000000045F4                 mov     rbx, rdi
.text:00000000000045F7                 jz      short loc_460A
.text:00000000000045F9                 call    ___freading
.text:00000000000045FE                 test    eax, eax
.text:0000000000004600                 jz      short loc_460A
.text:0000000000004602                 test    dword ptr [rbx], 100h
.text:0000000000004608                 jnz     short loc_4618
.text:000000000000460A
.text:000000000000460A loc_460A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000460A                                         ; rpl_fflush+10↑j
.text:000000000000460A                 mov     rdi, rbx        ; stream
.text:000000000000460D                 pop     rbx
.text:000000000000460E                 jmp     _fflush
.text:000000000000460E ; ---------------------------------------------------------------------------
.text:0000000000004613                 align 8
.text:0000000000004618
.text:0000000000004618 loc_4618:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004618                 mov     rdi, rbx
.text:000000000000461B                 mov     edx, 1
.text:0000000000004620                 xor     esi, esi
.text:0000000000004622                 call    rpl_fseeko
.text:0000000000004627                 mov     rdi, rbx        ; stream
.text:000000000000462A                 pop     rbx
.text:000000000000462B                 jmp     _fflush
.text:000000000000462B ; } // starts at 45F0
.text:000000000000462B rpl_fflush      endp
.text:000000000000462B
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630 ; Attributes: info_from_lumina
.text:0000000000004630
.text:0000000000004630 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004630                 public rpl_fseeko
.text:0000000000004630 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 mov     rax, [rdi+8]
.text:0000000000004634                 cmp     [rdi+10h], rax
.text:0000000000004638                 jz      short loc_4640
.text:000000000000463A
.text:000000000000463A loc_463A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000463A                                         ; rpl_fseeko+1F↓j
.text:000000000000463A                 jmp     _fseeko
.text:000000000000463A ; ---------------------------------------------------------------------------
.text:000000000000463F                 align 20h
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004640                 mov     rax, [rdi+20h]
.text:0000000000004644                 cmp     [rdi+28h], rax
.text:0000000000004648                 jnz     short loc_463A
.text:000000000000464A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000464F                 jnz     short loc_463A
.text:0000000000004651                 push    r12
.text:0000000000004653                 push    rbp
.text:0000000000004654                 mov     r12d, edx
.text:0000000000004657                 push    rbx
.text:0000000000004658                 mov     rbp, rsi
.text:000000000000465B                 mov     rbx, rdi
.text:000000000000465E                 call    _fileno
.text:0000000000004663                 mov     edx, r12d       ; whence
.text:0000000000004666                 mov     rsi, rbp        ; offset
.text:0000000000004669                 mov     edi, eax        ; fd
.text:000000000000466B                 call    _lseek
.text:0000000000004670                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004674                 jz      short loc_4682
.text:0000000000004676                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004679                 mov     [rbx+90h], rax
.text:0000000000004680                 xor     eax, eax
.text:0000000000004682
.text:0000000000004682 loc_4682:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004682                 pop     rbx
.text:0000000000004683                 pop     rbp
.text:0000000000004684                 pop     r12
.text:0000000000004686                 retn
.text:0000000000004686 ; } // starts at 4630
.text:0000000000004686 rpl_fseeko      endp
.text:0000000000004686
.text:0000000000004686 ; ---------------------------------------------------------------------------
.text:0000000000004687                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690 ; Attributes: info_from_lumina
.text:0000000000004690
.text:0000000000004690 ; void _libc_csu_init(void)
.text:0000000000004690                 public __libc_csu_init
.text:0000000000004690 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 push    r15
.text:0000000000004692                 push    r14
.text:0000000000004694                 mov     r15, rdx
.text:0000000000004697                 push    r13
.text:0000000000004699                 push    r12
.text:000000000000469B                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000046A2                 push    rbp
.text:00000000000046A3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000046AA                 push    rbx
.text:00000000000046AB                 mov     r13d, edi
.text:00000000000046AE                 mov     r14, rsi
.text:00000000000046B1                 sub     rbp, r12
.text:00000000000046B4                 sub     rsp, 8
.text:00000000000046B8                 sar     rbp, 3
.text:00000000000046BC                 call    _init_proc
.text:00000000000046C1                 test    rbp, rbp
.text:00000000000046C4                 jz      short loc_46E6
.text:00000000000046C6                 xor     ebx, ebx
.text:00000000000046C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000046D0
.text:00000000000046D0 loc_46D0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000046D0                 mov     rdx, r15
.text:00000000000046D3                 mov     rsi, r14
.text:00000000000046D6                 mov     edi, r13d
.text:00000000000046D9                 call    ds:(__frame_dummy_init_array_entry - 206BB0h)[r12+rbx*8]
.text:00000000000046DD                 add     rbx, 1
.text:00000000000046E1                 cmp     rbp, rbx
.text:00000000000046E4                 jnz     short loc_46D0
.text:00000000000046E6
.text:00000000000046E6 loc_46E6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:00000000000046E6                 add     rsp, 8
.text:00000000000046EA                 pop     rbx
.text:00000000000046EB                 pop     rbp
.text:00000000000046EC                 pop     r12
.text:00000000000046EE                 pop     r13
.text:00000000000046F0                 pop     r14
.text:00000000000046F2                 pop     r15
.text:00000000000046F4                 retn
.text:00000000000046F4 ; } // starts at 4690
.text:00000000000046F4 __libc_csu_init endp
.text:00000000000046F4
.text:00000000000046F4 ; ---------------------------------------------------------------------------
.text:00000000000046F5                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700
.text:0000000000004700 ; void _libc_csu_fini(void)
.text:0000000000004700                 public __libc_csu_fini
.text:0000000000004700 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 rep retn
.text:0000000000004700 ; } // starts at 4700
.text:0000000000004700 __libc_csu_fini endp
.text:0000000000004700
.text:0000000000004700 ; ---------------------------------------------------------------------------
.text:0000000000004702                 align 10h
.text:0000000000004710
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710
.text:0000000000004710
.text:0000000000004710 atexit          proc near               ; CODE XREF: main+48↑p
.text:0000000000004710 ; __unwind {
.text:0000000000004710                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004717                 xor     esi, esi        ; obj
.text:0000000000004719                 jmp     ___cxa_atexit
.text:0000000000004719 ; } // starts at 4710
.text:0000000000004719 atexit          endp
.text:0000000000004719
.text:0000000000004719 _text           ends
.text:0000000000004719
LOAD:000000000000471E ; ===========================================================================
LOAD:000000000000471E
LOAD:000000000000471E ; Segment type: Pure code
LOAD:000000000000471E ; Segment permissions: Read/Execute
LOAD:000000000000471E LOAD            segment byte public 'CODE' use64
LOAD:000000000000471E                 assume cs:LOAD
LOAD:000000000000471E                 ;org 471Eh
LOAD:000000000000471E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000471E                 align 20h
LOAD:000000000000471E LOAD            ends
LOAD:000000000000471E
.fini:0000000000004720 ; ===========================================================================
.fini:0000000000004720
.fini:0000000000004720 ; Segment type: Pure code
.fini:0000000000004720 ; Segment permissions: Read/Execute
.fini:0000000000004720 _fini           segment dword public 'CODE' use64
.fini:0000000000004720                 assume cs:_fini
.fini:0000000000004720                 ;org 4720h
.fini:0000000000004720                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004720
.fini:0000000000004720 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004720
.fini:0000000000004720
.fini:0000000000004720                 public _term_proc
.fini:0000000000004720 _term_proc      proc near
.fini:0000000000004720                 sub     rsp, 8          ; _fini
.fini:0000000000004724                 add     rsp, 8
.fini:0000000000004728                 retn
.fini:0000000000004728 _term_proc      endp
.fini:0000000000004728
.fini:0000000000004728 _fini           ends
.fini:0000000000004728
LOAD:0000000000004729 ; ===========================================================================
LOAD:0000000000004729
LOAD:0000000000004729 ; Segment type: Pure code
LOAD:0000000000004729 ; Segment permissions: Read/Execute
LOAD:0000000000004729 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004729                 assume cs:LOAD
LOAD:0000000000004729                 ;org 4729h
LOAD:0000000000004729                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004729                 align 20h
LOAD:0000000000004729 LOAD            ends
LOAD:0000000000004729
.rodata:0000000000004740 ; ===========================================================================
.rodata:0000000000004740
.rodata:0000000000004740 ; Segment type: Pure data
.rodata:0000000000004740 ; Segment permissions: Read
.rodata:0000000000004740 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004740                 assume cs:_rodata
.rodata:0000000000004740                 ;org 4740h
.rodata:0000000000004740                 public _IO_stdin_used
.rodata:0000000000004740 _IO_stdin_used  db    1
.rodata:0000000000004741                 db    0
.rodata:0000000000004742                 db    2
.rodata:0000000000004743                 db    0
.rodata:0000000000004744 aLink_0         db 'link',0             ; DATA XREF: main+61↑o
.rodata:0000000000004744                                         ; usage+EA↑o ...
.rodata:0000000000004749 asc_4749        db '[',0                ; DATA XREF: usage+F6↑o
.rodata:000000000000474B aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11D↑o
.rodata:000000000000475B aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000475B                                         ; DATA XREF: usage+14D↑o
.rodata:000000000000475B                                         ; usage+244↑o ...
.rodata:0000000000004771 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15E↑o
.rodata:000000000000477B aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+16A↑o
.rodata:000000000000478A aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FD↑o
.rodata:0000000000004794 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+129↑o
.rodata:000000000000479E aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+141↑o
.rodata:00000000000047A8 ; const char aSOnlineHelpS[]
.rodata:00000000000047A8 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:00000000000047A8                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000047BF unk_47BF        db  47h ; G             ; DATA XREF: main+68↑o
.rodata:00000000000047BF                                         ; usage+1CE↑o ...
.rodata:00000000000047C0                 db  4Eh ; N
.rodata:00000000000047C1                 db  55h ; U
.rodata:00000000000047C2                 db  20h
.rodata:00000000000047C3 ; const char domainname[]
.rodata:00000000000047C3 domainname      db 'coreutils',0        ; DATA XREF: main+29↑o
.rodata:00000000000047C3                                         ; main+35↑o ...
.rodata:00000000000047CD ; const char s2[]
.rodata:00000000000047CD s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:00000000000047CD                                         ; usage+2B6↑o
.rodata:00000000000047D1 ; const char aFullDocumentat[]
.rodata:00000000000047D1 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000047D1                                         ; DATA XREF: usage:loc_1951↑o
.rodata:00000000000047D1                                         ; usage:loc_1A0E↑o
.rodata:00000000000047EC ; const char dirname[]
.rodata:00000000000047EC dirname         db '/usr/local/share/locale',0
.rodata:00000000000047EC                                         ; DATA XREF: main+22↑o
.rodata:0000000000004804 aMichaelStone   db 'Michael Stone',0    ; DATA XREF: main+4D↑o
.rodata:0000000000004812 ; const char msgid[]
.rodata:0000000000004812 msgid           db 'missing operand',0  ; DATA XREF: main+CF↑o
.rodata:0000000000004822 aMissingOperand_0 db 'missing operand after %s',0
.rodata:0000000000004822                                         ; DATA XREF: main+1AB↑o
.rodata:000000000000483B ; const char aExtraOperandS[]
.rodata:000000000000483B aExtraOperandS  db 'extra operand %s',0 ; DATA XREF: main+16E↑o
.rodata:000000000000484C ; const char aCannotCreateLi[]
.rodata:000000000000484C aCannotCreateLi db 'cannot create link %s to %s',0
.rodata:000000000000484C                                         ; DATA XREF: main+12F↑o
.rodata:0000000000004868 ; const char aTrySHelpForMor[]
.rodata:0000000000004868 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004868                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000488F                 align 10h
.rodata:0000000000004890 ; const char aUsageSFile1Fil[]
.rodata:0000000000004890 aUsageSFile1Fil db 'Usage: %s FILE1 FILE2',0Ah
.rodata:0000000000004890                                         ; DATA XREF: usage:loc_179D↑o
.rodata:0000000000004890                 db '  or:  %s OPTION',0Ah,0
.rodata:00000000000048B8 ; const char aCallTheLinkFun[]
.rodata:00000000000048B8 aCallTheLinkFun db 'Call the link function to create a link named FILE2 to an existin'
.rodata:00000000000048B8                                         ; DATA XREF: usage+87↑o
.rodata:00000000000048B8                 db 'g FILE1.',0Ah
.rodata:00000000000048B8                 db 0Ah,0
.rodata:0000000000004904                 align 8
.rodata:0000000000004908 ; const char aHelpDisplayThi[]
.rodata:0000000000004908 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004908                                         ; DATA XREF: usage+AC↑o
.rodata:0000000000004935                 align 8
.rodata:0000000000004938 ; const char aVersionOutputV[]
.rodata:0000000000004938 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004938                                         ; DATA XREF: usage+D1↑o
.rodata:000000000000496E                 align 10h
.rodata:0000000000004970 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004970                                         ; DATA XREF: usage+1C7↑o
.rodata:0000000000004970                                         ; usage+22B↑o ...
.rodata:0000000000004998 ; const char aReportAnyTrans[]
.rodata:0000000000004998 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004998                                         ; DATA XREF: usage+31F↑o
.rodata:0000000000004998                 db 'am/>',0Ah,0
.rodata:00000000000049DF                 align 20h
.rodata:00000000000049E0 ; const char aOrAvailableLoc[]
.rodata:00000000000049E0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000049E0                                         ; DATA XREF: usage:loc_1996↑o
.rodata:0000000000004A13 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004A18 ; const char aWriteError[]
.rodata:0000000000004A18 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1AF3↑o
.rodata:0000000000004A24 ; const char format[]
.rodata:0000000000004A24 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004A24                                         ; close_stdout+8F↑o ...
.rodata:0000000000004A2B ; const char shortopts[]
.rodata:0000000000004A2B shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000004A2B                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000004A2D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000004A32 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:0000000000004A3A                 align 20h
.rodata:0000000000004A40 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004A40                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004A78 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004A80 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004A84 unk_4A84        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004A85                 db  80h
.rodata:0000000000004A86                 db  98h
.rodata:0000000000004A87                 db    0
.rodata:0000000000004A88 unk_4A88        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004A89                 db  80h
.rodata:0000000000004A8A                 db  99h
.rodata:0000000000004A8B                 db    0
.rodata:0000000000004A8C unk_4A8C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004A8D                 db    7
.rodata:0000000000004A8E                 db  65h ; e
.rodata:0000000000004A8F                 db    0
.rodata:0000000000004A90 unk_4A90        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004A91                 db 0AFh
.rodata:0000000000004A92                 db    0
.rodata:0000000000004A93 unk_4A93        db  22h ; "             ; DATA XREF: gettext_quote:loc_1EA0↑o
.rodata:0000000000004A93                                         ; quotearg_buffer_restyled:loc_2C5B↑o ...
.rodata:0000000000004A94                 db    0
.rodata:0000000000004A95 ; const char asc_4A95[2]
.rodata:0000000000004A95 asc_4A95        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004A95                                         ; quotearg_buffer_restyled:loc_2023↑o ...
.rodata:0000000000004A97 ; const char asc_4A97[2]
.rodata:0000000000004A97 asc_4A97        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004A97                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004A99 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004AA1 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004AA7 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004AB4 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004AB4                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004AC1 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004AC1                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:0000000000004AD5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004AD7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004ADF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004AE7                 align 20h
.rodata:0000000000004B00 jpt_2001        dd offset loc_2DAA - 4B00h
.rodata:0000000000004B00                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004B00                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004B00                 dd offset loc_2003 - 4B00h ; jump table for switch statement
.rodata:0000000000004B00                 dd offset loc_2FD8 - 4B00h
.rodata:0000000000004B00                 dd offset loc_2DE4 - 4B00h
.rodata:0000000000004B00                 dd offset loc_2BD4 - 4B00h
.rodata:0000000000004B00                 dd offset loc_2C30 - 4B00h
.rodata:0000000000004B00                 dd offset loc_2C85 - 4B00h
.rodata:0000000000004B00                 dd offset loc_2CCA - 4B00h
.rodata:0000000000004B00                 dd offset loc_2D04 - 4B00h
.rodata:0000000000004B00                 dd offset loc_2D04 - 4B00h
.rodata:0000000000004B00                 dd offset loc_2D04 - 4B00h
.rodata:0000000000004B2C jpt_215E        dd offset loc_2380 - 4B2Ch, offset def_215E - 4B2Ch, offset def_215E - 4B2Ch
.rodata:0000000000004B2C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004B2C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset def_215E - 4B2Ch, offset def_215E - 4B2Ch ; jump table for switch statement
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset loc_23C0 - 4B2Ch, offset loc_22C8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2288 - 4B2Ch, offset loc_2450 - 4B2Ch, offset loc_2440 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2430 - 4B2Ch, offset loc_2420 - 4B2Ch, offset def_215E - 4B2Ch
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset def_215E - 4B2Ch, offset def_215E - 4B2Ch
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset def_215E - 4B2Ch, offset def_215E - 4B2Ch
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset def_215E - 4B2Ch, offset def_215E - 4B2Ch
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset def_215E - 4B2Ch, offset def_215E - 4B2Ch
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset def_215E - 4B2Ch, offset def_215E - 4B2Ch
.rodata:0000000000004B2C                 dd offset def_215E - 4B2Ch, offset def_215E - 4B2Ch, offset loc_2410 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2400 - 4B2Ch, offset loc_2400 - 4B2Ch, offset loc_23D0 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2400 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_2400 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2263 - 4B2Ch, offset loc_2400 - 4B2Ch, offset loc_2400 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2400 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_2400 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2400 - 4B2Ch, offset loc_2400 - 4B2Ch, offset loc_2400 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2233 - 4B2Ch, offset def_215E - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_2400 - 4B2Ch, offset loc_22D8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_2400 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2400 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch, offset loc_23A8 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_2163 - 4B2Ch, offset loc_2400 - 4B2Ch, offset loc_2163 - 4B2Ch
.rodata:0000000000004B2C                 dd offset loc_23D0 - 4B2Ch
.rodata:0000000000004D28 jpt_24EA        dd offset loc_2550 - 4D28h, offset def_24EA - 4D28h, offset def_24EA - 4D28h
.rodata:0000000000004D28                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004D28                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset def_24EA - 4D28h, offset def_24EA - 4D28h ; jump table for switch statement
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset loc_2540 - 4D28h, offset loc_2690 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2678 - 4D28h, offset loc_2528 - 4D28h, offset loc_2668 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2510 - 4D28h, offset loc_2650 - 4D28h, offset def_24EA - 4D28h
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset def_24EA - 4D28h, offset def_24EA - 4D28h
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset def_24EA - 4D28h, offset def_24EA - 4D28h
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset def_24EA - 4D28h, offset def_24EA - 4D28h
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset def_24EA - 4D28h, offset def_24EA - 4D28h
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset def_24EA - 4D28h, offset def_24EA - 4D28h
.rodata:0000000000004D28                 dd offset def_24EA - 4D28h, offset def_24EA - 4D28h, offset loc_2638 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2620 - 4D28h, offset loc_2620 - 4D28h, offset loc_2608 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2620 - 4D28h, offset loc_25F0 - 4D28h, offset loc_2620 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2260 - 4D28h, offset loc_2620 - 4D28h, offset loc_2620 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2620 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_2620 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2620 - 4D28h, offset loc_2620 - 4D28h, offset loc_2620 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2230 - 4D28h, offset def_24EA - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_2620 - 4D28h, offset loc_24F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_2620 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2620 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h, offset loc_25F0 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2160 - 4D28h, offset loc_2620 - 4D28h, offset loc_2160 - 4D28h
.rodata:0000000000004D28                 dd offset loc_2608 - 4D28h
.rodata:0000000000004F24                 align 20h
.rodata:0000000000004F40                 public quoting_style_vals
.rodata:0000000000004F40 quoting_style_vals db    0
.rodata:0000000000004F41                 db    0
.rodata:0000000000004F42                 db    0
.rodata:0000000000004F43                 db    0
.rodata:0000000000004F44                 db    1
.rodata:0000000000004F45                 db    0
.rodata:0000000000004F46                 db    0
.rodata:0000000000004F47                 db    0
.rodata:0000000000004F48                 db    2
.rodata:0000000000004F49                 db    0
.rodata:0000000000004F4A                 db    0
.rodata:0000000000004F4B                 db    0
.rodata:0000000000004F4C                 db    3
.rodata:0000000000004F4D                 db    0
.rodata:0000000000004F4E                 db    0
.rodata:0000000000004F4F                 db    0
.rodata:0000000000004F50                 db    4
.rodata:0000000000004F51                 db    0
.rodata:0000000000004F52                 db    0
.rodata:0000000000004F53                 db    0
.rodata:0000000000004F54                 db    5
.rodata:0000000000004F55                 db    0
.rodata:0000000000004F56                 db    0
.rodata:0000000000004F57                 db    0
.rodata:0000000000004F58                 db    6
.rodata:0000000000004F59                 db    0
.rodata:0000000000004F5A                 db    0
.rodata:0000000000004F5B                 db    0
.rodata:0000000000004F5C                 db    7
.rodata:0000000000004F5D                 db    0
.rodata:0000000000004F5E                 db    0
.rodata:0000000000004F5F                 db    0
.rodata:0000000000004F60                 db    8
.rodata:0000000000004F61                 db    0
.rodata:0000000000004F62                 db    0
.rodata:0000000000004F63                 db    0
.rodata:0000000000004F64                 db    9
.rodata:0000000000004F65                 db    0
.rodata:0000000000004F66                 db    0
.rodata:0000000000004F67                 db    0
.rodata:0000000000004F68 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004F74 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004F7B ; const char aC_0[]
.rodata:0000000000004F7B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3B4C↑o
.rodata:0000000000004F7F ; const char aWrittenByS[]
.rodata:0000000000004F7F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004F7F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004F8F ; const char aWrittenBySAndS[]
.rodata:0000000000004F8F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004F8F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004FA6 ; const char aWrittenBySSAnd[]
.rodata:0000000000004FA6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004FA6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004FC2 ; const char aReportBugsToS[]
.rodata:0000000000004FC2 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004FC2                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004FD7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004FD7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000004FED ; const char aSHomePageS[]
.rodata:0000000000004FED aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000004FED                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005001                 align 8
.rodata:0000000000005008 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005008 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005008                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005008                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005008                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005008                 db '.',0Ah
.rodata:0000000000005008                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005008                 db 0Ah,0
.rodata:00000000000050D4                 align 8
.rodata:00000000000050D8 ; const char aWrittenBySSSAn[]
.rodata:00000000000050D8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050D8                                         ; DATA XREF: version_etc_arn:loc_3DA0↑o
.rodata:00000000000050D8                 db 'and %s.',0Ah,0
.rodata:00000000000050F8 ; const char aWrittenBySSSSA[]
.rodata:00000000000050F8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050F8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:00000000000050F8                 db '%s, and %s.',0Ah,0
.rodata:000000000000511C                 align 20h
.rodata:0000000000005120 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005120 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005120                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005120                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005148 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005148 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005148                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005148                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005174                 align 8
.rodata:0000000000005178 ; const char aWrittenBySSSSS[]
.rodata:0000000000005178 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005178                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005178                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005178                 db 'and %s.',0Ah,0
.rodata:00000000000051A8 ; const char aWrittenBySSSSS_0[]
.rodata:00000000000051A8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000051A8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:00000000000051A8                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000051A8                 db '%s, and %s.',0Ah,0
.rodata:00000000000051DC                 align 20h
.rodata:00000000000051E0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000051E0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000051E0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000051E0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000521C                 align 20h
.rodata:0000000000005220 ; const char aGeneralHelpUsi[]
.rodata:0000000000005220 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005220                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005220                 db 0
.rodata:0000000000005261                 align 8
.rodata:0000000000005268 jpt_3BB4        dd offset loc_3C36 - 5268h
.rodata:0000000000005268                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005268                                         ; version_etc_arn+9D↑r
.rodata:0000000000005268                 dd offset loc_3CC8 - 5268h ; jump table for switch statement
.rodata:0000000000005268                 dd offset loc_3D08 - 5268h
.rodata:0000000000005268                 dd offset loc_3D50 - 5268h
.rodata:0000000000005268                 dd offset loc_3DA0 - 5268h
.rodata:0000000000005268                 dd offset loc_3DF8 - 5268h
.rodata:0000000000005268                 dd offset loc_3E28 - 5268h
.rodata:0000000000005268                 dd offset loc_3E90 - 5268h
.rodata:0000000000005268                 dd offset loc_3BC0 - 5268h
.rodata:0000000000005268                 dd offset loc_3C70 - 5268h
.rodata:0000000000005290                 align 20h
.rodata:00000000000052A0                 public version_etc_copyright
.rodata:00000000000052A0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:00000000000052A0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:00000000000052CF ; const char aMemoryExhauste[]
.rodata:00000000000052CF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000052E0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000052E2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4510↑o
.rodata:00000000000052E8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000052E8                                         ; locale_charset:loc_4560↑o
.rodata:00000000000052E8 _rodata         ends
.rodata:00000000000052E8
LOAD:00000000000052EE ; ===========================================================================
LOAD:00000000000052EE
LOAD:00000000000052EE ; Segment type: Pure code
LOAD:00000000000052EE ; Segment permissions: Read/Execute
LOAD:00000000000052EE LOAD            segment byte public 'CODE' use64
LOAD:00000000000052EE                 assume cs:LOAD
LOAD:00000000000052EE                 ;org 52EEh
LOAD:00000000000052EE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000052EE                 align 10h
LOAD:00000000000052EE LOAD            ends
LOAD:00000000000052EE
.eh_frame_hdr:00000000000052F0 ; ===========================================================================
.eh_frame_hdr:00000000000052F0
.eh_frame_hdr:00000000000052F0 ; Segment type: Pure data
.eh_frame_hdr:00000000000052F0 ; Segment permissions: Read
.eh_frame_hdr:00000000000052F0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000052F0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000052F0                 ;org 52F0h
.eh_frame_hdr:00000000000052F0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000052F1                 db  1Bh
.eh_frame_hdr:00000000000052F2                 db    3
.eh_frame_hdr:00000000000052F3                 db  3Bh ; ;
.eh_frame_hdr:00000000000052F4                 db  4Ch ; L
.eh_frame_hdr:00000000000052F5                 db    2
.eh_frame_hdr:00000000000052F6                 db    0
.eh_frame_hdr:00000000000052F7                 db    0
.eh_frame_hdr:00000000000052F8                 db  48h ; H
.eh_frame_hdr:00000000000052F9                 db    0
.eh_frame_hdr:00000000000052FA                 db    0
.eh_frame_hdr:00000000000052FB                 db    0
.eh_frame_hdr:00000000000052FC                 db 0E0h
.eh_frame_hdr:00000000000052FD                 db 0BEh
.eh_frame_hdr:00000000000052FE                 db 0FFh
.eh_frame_hdr:00000000000052FF                 db 0FFh
.eh_frame_hdr:0000000000005300                 db  98h
.eh_frame_hdr:0000000000005301                 db    2
.eh_frame_hdr:0000000000005302                 db    0
.eh_frame_hdr:0000000000005303                 db    0
.eh_frame_hdr:0000000000005304                 db  70h ; p
.eh_frame_hdr:0000000000005305                 db 0C1h
.eh_frame_hdr:0000000000005306                 db 0FFh
.eh_frame_hdr:0000000000005307                 db 0FFh
.eh_frame_hdr:0000000000005308                 db 0C0h
.eh_frame_hdr:0000000000005309                 db    2
.eh_frame_hdr:000000000000530A                 db    0
.eh_frame_hdr:000000000000530B                 db    0
.eh_frame_hdr:000000000000530C                 db  80h
.eh_frame_hdr:000000000000530D                 db 0C1h
.eh_frame_hdr:000000000000530E                 db 0FFh
.eh_frame_hdr:000000000000530F                 db 0FFh
.eh_frame_hdr:0000000000005310                 db    4
.eh_frame_hdr:0000000000005311                 db    3
.eh_frame_hdr:0000000000005312                 db    0
.eh_frame_hdr:0000000000005313                 db    0
.eh_frame_hdr:0000000000005314                 db  40h ; @
.eh_frame_hdr:0000000000005315                 db 0C3h
.eh_frame_hdr:0000000000005316                 db 0FFh
.eh_frame_hdr:0000000000005317                 db 0FFh
.eh_frame_hdr:0000000000005318                 db  68h ; h
.eh_frame_hdr:0000000000005319                 db    2
.eh_frame_hdr:000000000000531A                 db    0
.eh_frame_hdr:000000000000531B                 db    0
.eh_frame_hdr:000000000000531C                 db  50h ; P
.eh_frame_hdr:000000000000531D                 db 0C4h
.eh_frame_hdr:000000000000531E                 db 0FFh
.eh_frame_hdr:000000000000531F                 db 0FFh
.eh_frame_hdr:0000000000005320                 db 0D8h
.eh_frame_hdr:0000000000005321                 db    2
.eh_frame_hdr:0000000000005322                 db    0
.eh_frame_hdr:0000000000005323                 db    0
.eh_frame_hdr:0000000000005324                 db 0A0h
.eh_frame_hdr:0000000000005325                 db 0C7h
.eh_frame_hdr:0000000000005326                 db 0FFh
.eh_frame_hdr:0000000000005327                 db 0FFh
.eh_frame_hdr:0000000000005328                 db  40h ; @
.eh_frame_hdr:0000000000005329                 db    3
.eh_frame_hdr:000000000000532A                 db    0
.eh_frame_hdr:000000000000532B                 db    0
.eh_frame_hdr:000000000000532C                 db 0B0h
.eh_frame_hdr:000000000000532D                 db 0C7h
.eh_frame_hdr:000000000000532E                 db 0FFh
.eh_frame_hdr:000000000000532F                 db 0FFh
.eh_frame_hdr:0000000000005330                 db  54h ; T
.eh_frame_hdr:0000000000005331                 db    3
.eh_frame_hdr:0000000000005332                 db    0
.eh_frame_hdr:0000000000005333                 db    0
.eh_frame_hdr:0000000000005334                 db 0C0h
.eh_frame_hdr:0000000000005335                 db 0C7h
.eh_frame_hdr:0000000000005336                 db 0FFh
.eh_frame_hdr:0000000000005337                 db 0FFh
.eh_frame_hdr:0000000000005338                 db  68h ; h
.eh_frame_hdr:0000000000005339                 db    3
.eh_frame_hdr:000000000000533A                 db    0
.eh_frame_hdr:000000000000533B                 db    0
.eh_frame_hdr:000000000000533C                 db  70h ; p
.eh_frame_hdr:000000000000533D                 db 0C8h
.eh_frame_hdr:000000000000533E                 db 0FFh
.eh_frame_hdr:000000000000533F                 db 0FFh
.eh_frame_hdr:0000000000005340                 db  98h
.eh_frame_hdr:0000000000005341                 db    3
.eh_frame_hdr:0000000000005342                 db    0
.eh_frame_hdr:0000000000005343                 db    0
.eh_frame_hdr:0000000000005344                 db 0B0h
.eh_frame_hdr:0000000000005345                 db 0C9h
.eh_frame_hdr:0000000000005346                 db 0FFh
.eh_frame_hdr:0000000000005347                 db 0FFh
.eh_frame_hdr:0000000000005348                 db 0D4h
.eh_frame_hdr:0000000000005349                 db    3
.eh_frame_hdr:000000000000534A                 db    0
.eh_frame_hdr:000000000000534B                 db    0
.eh_frame_hdr:000000000000534C                 db 0F0h
.eh_frame_hdr:000000000000534D                 db 0CAh
.eh_frame_hdr:000000000000534E                 db 0FFh
.eh_frame_hdr:000000000000534F                 db 0FFh
.eh_frame_hdr:0000000000005350                 db  20h
.eh_frame_hdr:0000000000005351                 db    4
.eh_frame_hdr:0000000000005352                 db    0
.eh_frame_hdr:0000000000005353                 db    0
.eh_frame_hdr:0000000000005354                 db  90h
.eh_frame_hdr:0000000000005355                 db 0CBh
.eh_frame_hdr:0000000000005356                 db 0FFh
.eh_frame_hdr:0000000000005357                 db 0FFh
.eh_frame_hdr:0000000000005358                 db  40h ; @
.eh_frame_hdr:0000000000005359                 db    4
.eh_frame_hdr:000000000000535A                 db    0
.eh_frame_hdr:000000000000535B                 db    0
.eh_frame_hdr:000000000000535C                 db  80h
.eh_frame_hdr:000000000000535D                 db 0CCh
.eh_frame_hdr:000000000000535E                 db 0FFh
.eh_frame_hdr:000000000000535F                 db 0FFh
.eh_frame_hdr:0000000000005360                 db  84h
.eh_frame_hdr:0000000000005361                 db    4
.eh_frame_hdr:0000000000005362                 db    0
.eh_frame_hdr:0000000000005363                 db    0
.eh_frame_hdr:0000000000005364                 db 0C0h
.eh_frame_hdr:0000000000005365                 db 0DEh
.eh_frame_hdr:0000000000005366                 db 0FFh
.eh_frame_hdr:0000000000005367                 db 0FFh
.eh_frame_hdr:0000000000005368                 db 0FCh
.eh_frame_hdr:0000000000005369                 db    4
.eh_frame_hdr:000000000000536A                 db    0
.eh_frame_hdr:000000000000536B                 db    0
.eh_frame_hdr:000000000000536C                 db  70h ; p
.eh_frame_hdr:000000000000536D                 db 0E0h
.eh_frame_hdr:000000000000536E                 db 0FFh
.eh_frame_hdr:000000000000536F                 db 0FFh
.eh_frame_hdr:0000000000005370                 db  68h ; h
.eh_frame_hdr:0000000000005371                 db    5
.eh_frame_hdr:0000000000005372                 db    0
.eh_frame_hdr:0000000000005373                 db    0
.eh_frame_hdr:0000000000005374                 db 0B0h
.eh_frame_hdr:0000000000005375                 db 0E0h
.eh_frame_hdr:0000000000005376                 db 0FFh
.eh_frame_hdr:0000000000005377                 db 0FFh
.eh_frame_hdr:0000000000005378                 db  94h
.eh_frame_hdr:0000000000005379                 db    5
.eh_frame_hdr:000000000000537A                 db    0
.eh_frame_hdr:000000000000537B                 db    0
.eh_frame_hdr:000000000000537C                 db 0D0h
.eh_frame_hdr:000000000000537D                 db 0E0h
.eh_frame_hdr:000000000000537E                 db 0FFh
.eh_frame_hdr:000000000000537F                 db 0FFh
.eh_frame_hdr:0000000000005380                 db 0A8h
.eh_frame_hdr:0000000000005381                 db    5
.eh_frame_hdr:0000000000005382                 db    0
.eh_frame_hdr:0000000000005383                 db    0
.eh_frame_hdr:0000000000005384                 db 0F0h
.eh_frame_hdr:0000000000005385                 db 0E0h
.eh_frame_hdr:0000000000005386                 db 0FFh
.eh_frame_hdr:0000000000005387                 db 0FFh
.eh_frame_hdr:0000000000005388                 db 0BCh
.eh_frame_hdr:0000000000005389                 db    5
.eh_frame_hdr:000000000000538A                 db    0
.eh_frame_hdr:000000000000538B                 db    0
.eh_frame_hdr:000000000000538C                 db  30h ; 0
.eh_frame_hdr:000000000000538D                 db 0E1h
.eh_frame_hdr:000000000000538E                 db 0FFh
.eh_frame_hdr:000000000000538F                 db 0FFh
.eh_frame_hdr:0000000000005390                 db 0D0h
.eh_frame_hdr:0000000000005391                 db    5
.eh_frame_hdr:0000000000005392                 db    0
.eh_frame_hdr:0000000000005393                 db    0
.eh_frame_hdr:0000000000005394                 db  50h ; P
.eh_frame_hdr:0000000000005395                 db 0E1h
.eh_frame_hdr:0000000000005396                 db 0FFh
.eh_frame_hdr:0000000000005397                 db 0FFh
.eh_frame_hdr:0000000000005398                 db 0E4h
.eh_frame_hdr:0000000000005399                 db    5
.eh_frame_hdr:000000000000539A                 db    0
.eh_frame_hdr:000000000000539B                 db    0
.eh_frame_hdr:000000000000539C                 db  80h
.eh_frame_hdr:000000000000539D                 db 0E1h
.eh_frame_hdr:000000000000539E                 db 0FFh
.eh_frame_hdr:000000000000539F                 db 0FFh
.eh_frame_hdr:00000000000053A0                 db 0F8h
.eh_frame_hdr:00000000000053A1                 db    5
.eh_frame_hdr:00000000000053A2                 db    0
.eh_frame_hdr:00000000000053A3                 db    0
.eh_frame_hdr:00000000000053A4                 db    0
.eh_frame_hdr:00000000000053A5                 db 0E2h
.eh_frame_hdr:00000000000053A6                 db 0FFh
.eh_frame_hdr:00000000000053A7                 db 0FFh
.eh_frame_hdr:00000000000053A8                 db  4Ch ; L
.eh_frame_hdr:00000000000053A9                 db    6
.eh_frame_hdr:00000000000053AA                 db    0
.eh_frame_hdr:00000000000053AB                 db    0
.eh_frame_hdr:00000000000053AC                 db 0F0h
.eh_frame_hdr:00000000000053AD                 db 0E2h
.eh_frame_hdr:00000000000053AE                 db 0FFh
.eh_frame_hdr:00000000000053AF                 db 0FFh
.eh_frame_hdr:00000000000053B0                 db 0B8h
.eh_frame_hdr:00000000000053B1                 db    6
.eh_frame_hdr:00000000000053B2                 db    0
.eh_frame_hdr:00000000000053B3                 db    0
.eh_frame_hdr:00000000000053B4                 db    0
.eh_frame_hdr:00000000000053B5                 db 0E3h
.eh_frame_hdr:00000000000053B6                 db 0FFh
.eh_frame_hdr:00000000000053B7                 db 0FFh
.eh_frame_hdr:00000000000053B8                 db 0CCh
.eh_frame_hdr:00000000000053B9                 db    6
.eh_frame_hdr:00000000000053BA                 db    0
.eh_frame_hdr:00000000000053BB                 db    0
.eh_frame_hdr:00000000000053BC                 db 0A0h
.eh_frame_hdr:00000000000053BD                 db 0E3h
.eh_frame_hdr:00000000000053BE                 db 0FFh
.eh_frame_hdr:00000000000053BF                 db 0FFh
.eh_frame_hdr:00000000000053C0                 db 0F8h
.eh_frame_hdr:00000000000053C1                 db    6
.eh_frame_hdr:00000000000053C2                 db    0
.eh_frame_hdr:00000000000053C3                 db    0
.eh_frame_hdr:00000000000053C4                 db 0C0h
.eh_frame_hdr:00000000000053C5                 db 0E3h
.eh_frame_hdr:00000000000053C6                 db 0FFh
.eh_frame_hdr:00000000000053C7                 db 0FFh
.eh_frame_hdr:00000000000053C8                 db  0Ch
.eh_frame_hdr:00000000000053C9                 db    7
.eh_frame_hdr:00000000000053CA                 db    0
.eh_frame_hdr:00000000000053CB                 db    0
.eh_frame_hdr:00000000000053CC                 db 0D0h
.eh_frame_hdr:00000000000053CD                 db 0E3h
.eh_frame_hdr:00000000000053CE                 db 0FFh
.eh_frame_hdr:00000000000053CF                 db 0FFh
.eh_frame_hdr:00000000000053D0                 db  20h
.eh_frame_hdr:00000000000053D1                 db    7
.eh_frame_hdr:00000000000053D2                 db    0
.eh_frame_hdr:00000000000053D3                 db    0
.eh_frame_hdr:00000000000053D4                 db 0F0h
.eh_frame_hdr:00000000000053D5                 db 0E3h
.eh_frame_hdr:00000000000053D6                 db 0FFh
.eh_frame_hdr:00000000000053D7                 db 0FFh
.eh_frame_hdr:00000000000053D8                 db  34h ; 4
.eh_frame_hdr:00000000000053D9                 db    7
.eh_frame_hdr:00000000000053DA                 db    0
.eh_frame_hdr:00000000000053DB                 db    0
.eh_frame_hdr:00000000000053DC                 db  10h
.eh_frame_hdr:00000000000053DD                 db 0E4h
.eh_frame_hdr:00000000000053DE                 db 0FFh
.eh_frame_hdr:00000000000053DF                 db 0FFh
.eh_frame_hdr:00000000000053E0                 db  48h ; H
.eh_frame_hdr:00000000000053E1                 db    7
.eh_frame_hdr:00000000000053E2                 db    0
.eh_frame_hdr:00000000000053E3                 db    0
.eh_frame_hdr:00000000000053E4                 db 0A0h
.eh_frame_hdr:00000000000053E5                 db 0E4h
.eh_frame_hdr:00000000000053E6                 db 0FFh
.eh_frame_hdr:00000000000053E7                 db 0FFh
.eh_frame_hdr:00000000000053E8                 db  64h ; d
.eh_frame_hdr:00000000000053E9                 db    7
.eh_frame_hdr:00000000000053EA                 db    0
.eh_frame_hdr:00000000000053EB                 db    0
.eh_frame_hdr:00000000000053EC                 db  30h ; 0
.eh_frame_hdr:00000000000053ED                 db 0E5h
.eh_frame_hdr:00000000000053EE                 db 0FFh
.eh_frame_hdr:00000000000053EF                 db 0FFh
.eh_frame_hdr:00000000000053F0                 db  80h
.eh_frame_hdr:00000000000053F1                 db    7
.eh_frame_hdr:00000000000053F2                 db    0
.eh_frame_hdr:00000000000053F3                 db    0
.eh_frame_hdr:00000000000053F4                 db  40h ; @
.eh_frame_hdr:00000000000053F5                 db 0E5h
.eh_frame_hdr:00000000000053F6                 db 0FFh
.eh_frame_hdr:00000000000053F7                 db 0FFh
.eh_frame_hdr:00000000000053F8                 db  94h
.eh_frame_hdr:00000000000053F9                 db    7
.eh_frame_hdr:00000000000053FA                 db    0
.eh_frame_hdr:00000000000053FB                 db    0
.eh_frame_hdr:00000000000053FC                 db  50h ; P
.eh_frame_hdr:00000000000053FD                 db 0E5h
.eh_frame_hdr:00000000000053FE                 db 0FFh
.eh_frame_hdr:00000000000053FF                 db 0FFh
.eh_frame_hdr:0000000000005400                 db 0A8h
.eh_frame_hdr:0000000000005401                 db    7
.eh_frame_hdr:0000000000005402                 db    0
.eh_frame_hdr:0000000000005403                 db    0
.eh_frame_hdr:0000000000005404                 db 0F0h
.eh_frame_hdr:0000000000005405                 db 0E5h
.eh_frame_hdr:0000000000005406                 db 0FFh
.eh_frame_hdr:0000000000005407                 db 0FFh
.eh_frame_hdr:0000000000005408                 db 0C4h
.eh_frame_hdr:0000000000005409                 db    7
.eh_frame_hdr:000000000000540A                 db    0
.eh_frame_hdr:000000000000540B                 db    0
.eh_frame_hdr:000000000000540C                 db    0
.eh_frame_hdr:000000000000540D                 db 0E6h
.eh_frame_hdr:000000000000540E                 db 0FFh
.eh_frame_hdr:000000000000540F                 db 0FFh
.eh_frame_hdr:0000000000005410                 db 0D8h
.eh_frame_hdr:0000000000005411                 db    7
.eh_frame_hdr:0000000000005412                 db    0
.eh_frame_hdr:0000000000005413                 db    0
.eh_frame_hdr:0000000000005414                 db  20h
.eh_frame_hdr:0000000000005415                 db 0E6h
.eh_frame_hdr:0000000000005416                 db 0FFh
.eh_frame_hdr:0000000000005417                 db 0FFh
.eh_frame_hdr:0000000000005418                 db 0ECh
.eh_frame_hdr:0000000000005419                 db    7
.eh_frame_hdr:000000000000541A                 db    0
.eh_frame_hdr:000000000000541B                 db    0
.eh_frame_hdr:000000000000541C                 db  30h ; 0
.eh_frame_hdr:000000000000541D                 db 0E6h
.eh_frame_hdr:000000000000541E                 db 0FFh
.eh_frame_hdr:000000000000541F                 db 0FFh
.eh_frame_hdr:0000000000005420                 db    0
.eh_frame_hdr:0000000000005421                 db    8
.eh_frame_hdr:0000000000005422                 db    0
.eh_frame_hdr:0000000000005423                 db    0
.eh_frame_hdr:0000000000005424                 db 0C0h
.eh_frame_hdr:0000000000005425                 db 0E6h
.eh_frame_hdr:0000000000005426                 db 0FFh
.eh_frame_hdr:0000000000005427                 db 0FFh
.eh_frame_hdr:0000000000005428                 db  1Ch
.eh_frame_hdr:0000000000005429                 db    8
.eh_frame_hdr:000000000000542A                 db    0
.eh_frame_hdr:000000000000542B                 db    0
.eh_frame_hdr:000000000000542C                 db  60h ; `
.eh_frame_hdr:000000000000542D                 db 0E7h
.eh_frame_hdr:000000000000542E                 db 0FFh
.eh_frame_hdr:000000000000542F                 db 0FFh
.eh_frame_hdr:0000000000005430                 db  38h ; 8
.eh_frame_hdr:0000000000005431                 db    8
.eh_frame_hdr:0000000000005432                 db    0
.eh_frame_hdr:0000000000005433                 db    0
.eh_frame_hdr:0000000000005434                 db  70h ; p
.eh_frame_hdr:0000000000005435                 db 0E7h
.eh_frame_hdr:0000000000005436                 db 0FFh
.eh_frame_hdr:0000000000005437                 db 0FFh
.eh_frame_hdr:0000000000005438                 db  4Ch ; L
.eh_frame_hdr:0000000000005439                 db    8
.eh_frame_hdr:000000000000543A                 db    0
.eh_frame_hdr:000000000000543B                 db    0
.eh_frame_hdr:000000000000543C                 db  90h
.eh_frame_hdr:000000000000543D                 db 0E7h
.eh_frame_hdr:000000000000543E                 db 0FFh
.eh_frame_hdr:000000000000543F                 db 0FFh
.eh_frame_hdr:0000000000005440                 db  60h ; `
.eh_frame_hdr:0000000000005441                 db    8
.eh_frame_hdr:0000000000005442                 db    0
.eh_frame_hdr:0000000000005443                 db    0
.eh_frame_hdr:0000000000005444                 db 0B0h
.eh_frame_hdr:0000000000005445                 db 0E7h
.eh_frame_hdr:0000000000005446                 db 0FFh
.eh_frame_hdr:0000000000005447                 db 0FFh
.eh_frame_hdr:0000000000005448                 db  74h ; t
.eh_frame_hdr:0000000000005449                 db    8
.eh_frame_hdr:000000000000544A                 db    0
.eh_frame_hdr:000000000000544B                 db    0
.eh_frame_hdr:000000000000544C                 db 0C0h
.eh_frame_hdr:000000000000544D                 db 0E7h
.eh_frame_hdr:000000000000544E                 db 0FFh
.eh_frame_hdr:000000000000544F                 db 0FFh
.eh_frame_hdr:0000000000005450                 db  88h
.eh_frame_hdr:0000000000005451                 db    8
.eh_frame_hdr:0000000000005452                 db    0
.eh_frame_hdr:0000000000005453                 db    0
.eh_frame_hdr:0000000000005454                 db 0E0h
.eh_frame_hdr:0000000000005455                 db 0E7h
.eh_frame_hdr:0000000000005456                 db 0FFh
.eh_frame_hdr:0000000000005457                 db 0FFh
.eh_frame_hdr:0000000000005458                 db  9Ch
.eh_frame_hdr:0000000000005459                 db    8
.eh_frame_hdr:000000000000545A                 db    0
.eh_frame_hdr:000000000000545B                 db    0
.eh_frame_hdr:000000000000545C                 db    0
.eh_frame_hdr:000000000000545D                 db 0E8h
.eh_frame_hdr:000000000000545E                 db 0FFh
.eh_frame_hdr:000000000000545F                 db 0FFh
.eh_frame_hdr:0000000000005460                 db 0B0h
.eh_frame_hdr:0000000000005461                 db    8
.eh_frame_hdr:0000000000005462                 db    0
.eh_frame_hdr:0000000000005463                 db    0
.eh_frame_hdr:0000000000005464                 db  20h
.eh_frame_hdr:0000000000005465                 db 0E8h
.eh_frame_hdr:0000000000005466                 db 0FFh
.eh_frame_hdr:0000000000005467                 db 0FFh
.eh_frame_hdr:0000000000005468                 db 0C8h
.eh_frame_hdr:0000000000005469                 db    8
.eh_frame_hdr:000000000000546A                 db    0
.eh_frame_hdr:000000000000546B                 db    0
.eh_frame_hdr:000000000000546C                 db  40h ; @
.eh_frame_hdr:000000000000546D                 db 0ECh
.eh_frame_hdr:000000000000546E                 db 0FFh
.eh_frame_hdr:000000000000546F                 db 0FFh
.eh_frame_hdr:0000000000005470                 db 0DCh
.eh_frame_hdr:0000000000005471                 db    9
.eh_frame_hdr:0000000000005472                 db    0
.eh_frame_hdr:0000000000005473                 db    0
.eh_frame_hdr:0000000000005474                 db  60h ; `
.eh_frame_hdr:0000000000005475                 db 0ECh
.eh_frame_hdr:0000000000005476                 db 0FFh
.eh_frame_hdr:0000000000005477                 db 0FFh
.eh_frame_hdr:0000000000005478                 db 0F0h
.eh_frame_hdr:0000000000005479                 db    9
.eh_frame_hdr:000000000000547A                 db    0
.eh_frame_hdr:000000000000547B                 db    0
.eh_frame_hdr:000000000000547C                 db 0E0h
.eh_frame_hdr:000000000000547D                 db 0ECh
.eh_frame_hdr:000000000000547E                 db 0FFh
.eh_frame_hdr:000000000000547F                 db 0FFh
.eh_frame_hdr:0000000000005480                 db  0Ch
.eh_frame_hdr:0000000000005481                 db  0Ah
.eh_frame_hdr:0000000000005482                 db    0
.eh_frame_hdr:0000000000005483                 db    0
.eh_frame_hdr:0000000000005484                 db 0C0h
.eh_frame_hdr:0000000000005485                 db 0EDh
.eh_frame_hdr:0000000000005486                 db 0FFh
.eh_frame_hdr:0000000000005487                 db 0FFh
.eh_frame_hdr:0000000000005488                 db  38h ; 8
.eh_frame_hdr:0000000000005489                 db  0Ah
.eh_frame_hdr:000000000000548A                 db    0
.eh_frame_hdr:000000000000548B                 db    0
.eh_frame_hdr:000000000000548C                 db  40h ; @
.eh_frame_hdr:000000000000548D                 db 0EEh
.eh_frame_hdr:000000000000548E                 db 0FFh
.eh_frame_hdr:000000000000548F                 db 0FFh
.eh_frame_hdr:0000000000005490                 db  58h ; X
.eh_frame_hdr:0000000000005491                 db  0Ah
.eh_frame_hdr:0000000000005492                 db    0
.eh_frame_hdr:0000000000005493                 db    0
.eh_frame_hdr:0000000000005494                 db  60h ; `
.eh_frame_hdr:0000000000005495                 db 0EEh
.eh_frame_hdr:0000000000005496                 db 0FFh
.eh_frame_hdr:0000000000005497                 db 0FFh
.eh_frame_hdr:0000000000005498                 db  74h ; t
.eh_frame_hdr:0000000000005499                 db  0Ah
.eh_frame_hdr:000000000000549A                 db    0
.eh_frame_hdr:000000000000549B                 db    0
.eh_frame_hdr:000000000000549C                 db  90h
.eh_frame_hdr:000000000000549D                 db 0EEh
.eh_frame_hdr:000000000000549E                 db 0FFh
.eh_frame_hdr:000000000000549F                 db 0FFh
.eh_frame_hdr:00000000000054A0                 db  88h
.eh_frame_hdr:00000000000054A1                 db  0Ah
.eh_frame_hdr:00000000000054A2                 db    0
.eh_frame_hdr:00000000000054A3                 db    0
.eh_frame_hdr:00000000000054A4                 db 0A0h
.eh_frame_hdr:00000000000054A5                 db 0EEh
.eh_frame_hdr:00000000000054A6                 db 0FFh
.eh_frame_hdr:00000000000054A7                 db 0FFh
.eh_frame_hdr:00000000000054A8                 db  9Ch
.eh_frame_hdr:00000000000054A9                 db  0Ah
.eh_frame_hdr:00000000000054AA                 db    0
.eh_frame_hdr:00000000000054AB                 db    0
.eh_frame_hdr:00000000000054AC                 db 0E0h
.eh_frame_hdr:00000000000054AD                 db 0EEh
.eh_frame_hdr:00000000000054AE                 db 0FFh
.eh_frame_hdr:00000000000054AF                 db 0FFh
.eh_frame_hdr:00000000000054B0                 db 0C0h
.eh_frame_hdr:00000000000054B1                 db  0Ah
.eh_frame_hdr:00000000000054B2                 db    0
.eh_frame_hdr:00000000000054B3                 db    0
.eh_frame_hdr:00000000000054B4                 db  10h
.eh_frame_hdr:00000000000054B5                 db 0EFh
.eh_frame_hdr:00000000000054B6                 db 0FFh
.eh_frame_hdr:00000000000054B7                 db 0FFh
.eh_frame_hdr:00000000000054B8                 db 0D4h
.eh_frame_hdr:00000000000054B9                 db  0Ah
.eh_frame_hdr:00000000000054BA                 db    0
.eh_frame_hdr:00000000000054BB                 db    0
.eh_frame_hdr:00000000000054BC                 db 0A0h
.eh_frame_hdr:00000000000054BD                 db 0EFh
.eh_frame_hdr:00000000000054BE                 db 0FFh
.eh_frame_hdr:00000000000054BF                 db 0FFh
.eh_frame_hdr:00000000000054C0                 db 0ECh
.eh_frame_hdr:00000000000054C1                 db  0Ah
.eh_frame_hdr:00000000000054C2                 db    0
.eh_frame_hdr:00000000000054C3                 db    0
.eh_frame_hdr:00000000000054C4                 db 0F0h
.eh_frame_hdr:00000000000054C5                 db 0EFh
.eh_frame_hdr:00000000000054C6                 db 0FFh
.eh_frame_hdr:00000000000054C7                 db 0FFh
.eh_frame_hdr:00000000000054C8                 db    4
.eh_frame_hdr:00000000000054C9                 db  0Bh
.eh_frame_hdr:00000000000054CA                 db    0
.eh_frame_hdr:00000000000054CB                 db    0
.eh_frame_hdr:00000000000054CC                 db  10h
.eh_frame_hdr:00000000000054CD                 db 0F0h
.eh_frame_hdr:00000000000054CE                 db 0FFh
.eh_frame_hdr:00000000000054CF                 db 0FFh
.eh_frame_hdr:00000000000054D0                 db  20h
.eh_frame_hdr:00000000000054D1                 db  0Bh
.eh_frame_hdr:00000000000054D2                 db    0
.eh_frame_hdr:00000000000054D3                 db    0
.eh_frame_hdr:00000000000054D4                 db  40h ; @
.eh_frame_hdr:00000000000054D5                 db 0F0h
.eh_frame_hdr:00000000000054D6                 db 0FFh
.eh_frame_hdr:00000000000054D7                 db 0FFh
.eh_frame_hdr:00000000000054D8                 db  3Ch ; <
.eh_frame_hdr:00000000000054D9                 db  0Bh
.eh_frame_hdr:00000000000054DA                 db    0
.eh_frame_hdr:00000000000054DB                 db    0
.eh_frame_hdr:00000000000054DC                 db  70h ; p
.eh_frame_hdr:00000000000054DD                 db 0F0h
.eh_frame_hdr:00000000000054DE                 db 0FFh
.eh_frame_hdr:00000000000054DF                 db 0FFh
.eh_frame_hdr:00000000000054E0                 db  64h ; d
.eh_frame_hdr:00000000000054E1                 db  0Bh
.eh_frame_hdr:00000000000054E2                 db    0
.eh_frame_hdr:00000000000054E3                 db    0
.eh_frame_hdr:00000000000054E4                 db  90h
.eh_frame_hdr:00000000000054E5                 db 0F0h
.eh_frame_hdr:00000000000054E6                 db 0FFh
.eh_frame_hdr:00000000000054E7                 db 0FFh
.eh_frame_hdr:00000000000054E8                 db  80h
.eh_frame_hdr:00000000000054E9                 db  0Bh
.eh_frame_hdr:00000000000054EA                 db    0
.eh_frame_hdr:00000000000054EB                 db    0
.eh_frame_hdr:00000000000054EC                 db 0D0h
.eh_frame_hdr:00000000000054ED                 db 0F0h
.eh_frame_hdr:00000000000054EE                 db 0FFh
.eh_frame_hdr:00000000000054EF                 db 0FFh
.eh_frame_hdr:00000000000054F0                 db  98h
.eh_frame_hdr:00000000000054F1                 db  0Bh
.eh_frame_hdr:00000000000054F2                 db    0
.eh_frame_hdr:00000000000054F3                 db    0
.eh_frame_hdr:00000000000054F4                 db  60h ; `
.eh_frame_hdr:00000000000054F5                 db 0F1h
.eh_frame_hdr:00000000000054F6                 db 0FFh
.eh_frame_hdr:00000000000054F7                 db 0FFh
.eh_frame_hdr:00000000000054F8                 db 0D8h
.eh_frame_hdr:00000000000054F9                 db  0Bh
.eh_frame_hdr:00000000000054FA                 db    0
.eh_frame_hdr:00000000000054FB                 db    0
.eh_frame_hdr:00000000000054FC                 db 0E0h
.eh_frame_hdr:00000000000054FD                 db 0F1h
.eh_frame_hdr:00000000000054FE                 db 0FFh
.eh_frame_hdr:00000000000054FF                 db 0FFh
.eh_frame_hdr:0000000000005500                 db  28h ; (
.eh_frame_hdr:0000000000005501                 db  0Ch
.eh_frame_hdr:0000000000005502                 db    0
.eh_frame_hdr:0000000000005503                 db    0
.eh_frame_hdr:0000000000005504                 db  40h ; @
.eh_frame_hdr:0000000000005505                 db 0F2h
.eh_frame_hdr:0000000000005506                 db 0FFh
.eh_frame_hdr:0000000000005507                 db 0FFh
.eh_frame_hdr:0000000000005508                 db  48h ; H
.eh_frame_hdr:0000000000005509                 db  0Ch
.eh_frame_hdr:000000000000550A                 db    0
.eh_frame_hdr:000000000000550B                 db    0
.eh_frame_hdr:000000000000550C                 db  80h
.eh_frame_hdr:000000000000550D                 db 0F2h
.eh_frame_hdr:000000000000550E                 db 0FFh
.eh_frame_hdr:000000000000550F                 db 0FFh
.eh_frame_hdr:0000000000005510                 db  68h ; h
.eh_frame_hdr:0000000000005511                 db  0Ch
.eh_frame_hdr:0000000000005512                 db    0
.eh_frame_hdr:0000000000005513                 db    0
.eh_frame_hdr:0000000000005514                 db    0
.eh_frame_hdr:0000000000005515                 db 0F3h
.eh_frame_hdr:0000000000005516                 db 0FFh
.eh_frame_hdr:0000000000005517                 db 0FFh
.eh_frame_hdr:0000000000005518                 db 0A0h
.eh_frame_hdr:0000000000005519                 db  0Ch
.eh_frame_hdr:000000000000551A                 db    0
.eh_frame_hdr:000000000000551B                 db    0
.eh_frame_hdr:000000000000551C                 db  40h ; @
.eh_frame_hdr:000000000000551D                 db 0F3h
.eh_frame_hdr:000000000000551E                 db 0FFh
.eh_frame_hdr:000000000000551F                 db 0FFh
.eh_frame_hdr:0000000000005520                 db 0C0h
.eh_frame_hdr:0000000000005521                 db  0Ch
.eh_frame_hdr:0000000000005522                 db    0
.eh_frame_hdr:0000000000005523                 db    0
.eh_frame_hdr:0000000000005524                 db 0A0h
.eh_frame_hdr:0000000000005525                 db 0F3h
.eh_frame_hdr:0000000000005526                 db 0FFh
.eh_frame_hdr:0000000000005527                 db 0FFh
.eh_frame_hdr:0000000000005528                 db 0F0h
.eh_frame_hdr:0000000000005529                 db  0Ch
.eh_frame_hdr:000000000000552A                 db    0
.eh_frame_hdr:000000000000552B                 db    0
.eh_frame_hdr:000000000000552C                 db  10h
.eh_frame_hdr:000000000000552D                 db 0F4h
.eh_frame_hdr:000000000000552E                 db 0FFh
.eh_frame_hdr:000000000000552F                 db 0FFh
.eh_frame_hdr:0000000000005530                 db  38h ; 8
.eh_frame_hdr:0000000000005531                 db  0Dh
.eh_frame_hdr:0000000000005532                 db    0
.eh_frame_hdr:0000000000005533                 db    0
.eh_frame_hdr:0000000000005534                 db  20h
.eh_frame_hdr:0000000000005535                 db 0F4h
.eh_frame_hdr:0000000000005536                 db 0FFh
.eh_frame_hdr:0000000000005537                 db 0FFh
.eh_frame_hdr:0000000000005538                 db  50h ; P
.eh_frame_hdr:0000000000005539                 db  0Dh
.eh_frame_hdr:000000000000553A                 db    0
.eh_frame_hdr:000000000000553B                 db    0
.eh_frame_hdr:000000000000553B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000553B
LOAD:000000000000553C ; ===========================================================================
LOAD:000000000000553C
LOAD:000000000000553C ; Segment type: Pure code
LOAD:000000000000553C ; Segment permissions: Read/Execute
LOAD:000000000000553C LOAD            segment byte public 'CODE' use64
LOAD:000000000000553C                 assume cs:LOAD
LOAD:000000000000553C                 ;org 553Ch
LOAD:000000000000553C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000553C                 align 20h
LOAD:000000000000553C LOAD            ends
LOAD:000000000000553C
.eh_frame:0000000000005540 ; ===========================================================================
.eh_frame:0000000000005540
.eh_frame:0000000000005540 ; Segment type: Pure data
.eh_frame:0000000000005540 ; Segment permissions: Read
.eh_frame:0000000000005540 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005540                 assume cs:_eh_frame
.eh_frame:0000000000005540                 ;org 5540h
.eh_frame:0000000000005540                 db  14h
.eh_frame:0000000000005541                 db    0
.eh_frame:0000000000005542                 db    0
.eh_frame:0000000000005543                 db    0
.eh_frame:0000000000005544                 db    0
.eh_frame:0000000000005545                 db    0
.eh_frame:0000000000005546                 db    0
.eh_frame:0000000000005547                 db    0
.eh_frame:0000000000005548                 db    1
.eh_frame:0000000000005549                 db  7Ah ; z
.eh_frame:000000000000554A                 db  52h ; R
.eh_frame:000000000000554B                 db    0
.eh_frame:000000000000554C                 db    1
.eh_frame:000000000000554D                 db  78h ; x
.eh_frame:000000000000554E                 db  10h
.eh_frame:000000000000554F                 db    1
.eh_frame:0000000000005550                 db  1Bh
.eh_frame:0000000000005551                 db  0Ch
.eh_frame:0000000000005552                 db    7
.eh_frame:0000000000005553                 db    8
.eh_frame:0000000000005554                 db  90h
.eh_frame:0000000000005555                 db    1
.eh_frame:0000000000005556                 db    7
.eh_frame:0000000000005557                 db  10h
.eh_frame:0000000000005558                 db  14h
.eh_frame:0000000000005559                 db    0
.eh_frame:000000000000555A                 db    0
.eh_frame:000000000000555B                 db    0
.eh_frame:000000000000555C                 db  1Ch
.eh_frame:000000000000555D                 db    0
.eh_frame:000000000000555E                 db    0
.eh_frame:000000000000555F                 db    0
.eh_frame:0000000000005560                 db 0D0h
.eh_frame:0000000000005561                 db 0C0h
.eh_frame:0000000000005562                 db 0FFh
.eh_frame:0000000000005563                 db 0FFh
.eh_frame:0000000000005564                 db  2Bh ; +
.eh_frame:0000000000005565                 db    0
.eh_frame:0000000000005566                 db    0
.eh_frame:0000000000005567                 db    0
.eh_frame:0000000000005568                 db    0
.eh_frame:0000000000005569                 db    0
.eh_frame:000000000000556A                 db    0
.eh_frame:000000000000556B                 db    0
.eh_frame:000000000000556C                 db    0
.eh_frame:000000000000556D                 db    0
.eh_frame:000000000000556E                 db    0
.eh_frame:000000000000556F                 db    0
.eh_frame:0000000000005570                 db  14h
.eh_frame:0000000000005571                 db    0
.eh_frame:0000000000005572                 db    0
.eh_frame:0000000000005573                 db    0
.eh_frame:0000000000005574                 db    0
.eh_frame:0000000000005575                 db    0
.eh_frame:0000000000005576                 db    0
.eh_frame:0000000000005577                 db    0
.eh_frame:0000000000005578                 db    1
.eh_frame:0000000000005579                 db  7Ah ; z
.eh_frame:000000000000557A                 db  52h ; R
.eh_frame:000000000000557B                 db    0
.eh_frame:000000000000557C                 db    1
.eh_frame:000000000000557D                 db  78h ; x
.eh_frame:000000000000557E                 db  10h
.eh_frame:000000000000557F                 db    1
.eh_frame:0000000000005580                 db  1Bh
.eh_frame:0000000000005581                 db  0Ch
.eh_frame:0000000000005582                 db    7
.eh_frame:0000000000005583                 db    8
.eh_frame:0000000000005584                 db  90h
.eh_frame:0000000000005585                 db    1
.eh_frame:0000000000005586                 db    0
.eh_frame:0000000000005587                 db    0
.eh_frame:0000000000005588                 db  24h ; $
.eh_frame:0000000000005589                 db    0
.eh_frame:000000000000558A                 db    0
.eh_frame:000000000000558B                 db    0
.eh_frame:000000000000558C                 db  1Ch
.eh_frame:000000000000558D                 db    0
.eh_frame:000000000000558E                 db    0
.eh_frame:000000000000558F                 db    0
.eh_frame:0000000000005590                 db  40h ; @
.eh_frame:0000000000005591                 db 0BCh
.eh_frame:0000000000005592                 db 0FFh
.eh_frame:0000000000005593                 db 0FFh
.eh_frame:0000000000005594                 db  90h
.eh_frame:0000000000005595                 db    2
.eh_frame:0000000000005596                 db    0
.eh_frame:0000000000005597                 db    0
.eh_frame:0000000000005598                 db    0
.eh_frame:0000000000005599                 db  0Eh
.eh_frame:000000000000559A                 db  10h
.eh_frame:000000000000559B                 db  46h ; F
.eh_frame:000000000000559C                 db  0Eh
.eh_frame:000000000000559D                 db  18h
.eh_frame:000000000000559E                 db  4Ah ; J
.eh_frame:000000000000559F                 db  0Fh
.eh_frame:00000000000055A0                 db  0Bh
.eh_frame:00000000000055A1                 db  77h ; w
.eh_frame:00000000000055A2                 db    8
.eh_frame:00000000000055A3                 db  80h
.eh_frame:00000000000055A4                 db    0
.eh_frame:00000000000055A5                 db  3Fh ; ?
.eh_frame:00000000000055A6                 db  1Ah
.eh_frame:00000000000055A7                 db  3Bh ; ;
.eh_frame:00000000000055A8                 db  2Ah ; *
.eh_frame:00000000000055A9                 db  33h ; 3
.eh_frame:00000000000055AA                 db  24h ; $
.eh_frame:00000000000055AB                 db  22h ; "
.eh_frame:00000000000055AC                 db    0
.eh_frame:00000000000055AD                 db    0
.eh_frame:00000000000055AE                 db    0
.eh_frame:00000000000055AF                 db    0
.eh_frame:00000000000055B0                 db  14h
.eh_frame:00000000000055B1                 db    0
.eh_frame:00000000000055B2                 db    0
.eh_frame:00000000000055B3                 db    0
.eh_frame:00000000000055B4                 db  44h ; D
.eh_frame:00000000000055B5                 db    0
.eh_frame:00000000000055B6                 db    0
.eh_frame:00000000000055B7                 db    0
.eh_frame:00000000000055B8                 db 0A8h
.eh_frame:00000000000055B9                 db 0BEh
.eh_frame:00000000000055BA                 db 0FFh
.eh_frame:00000000000055BB                 db 0FFh
.eh_frame:00000000000055BC                 db    8
.eh_frame:00000000000055BD                 db    0
.eh_frame:00000000000055BE                 db    0
.eh_frame:00000000000055BF                 db    0
.eh_frame:00000000000055C0                 db    0
.eh_frame:00000000000055C1                 db    0
.eh_frame:00000000000055C2                 db    0
.eh_frame:00000000000055C3                 db    0
.eh_frame:00000000000055C4                 db    0
.eh_frame:00000000000055C5                 db    0
.eh_frame:00000000000055C6                 db    0
.eh_frame:00000000000055C7                 db    0
.eh_frame:00000000000055C8                 db  28h ; (
.eh_frame:00000000000055C9                 db    0
.eh_frame:00000000000055CA                 db    0
.eh_frame:00000000000055CB                 db    0
.eh_frame:00000000000055CC                 db  5Ch ; \
.eh_frame:00000000000055CD                 db    0
.eh_frame:00000000000055CE                 db    0
.eh_frame:00000000000055CF                 db    0
.eh_frame:00000000000055D0                 db  70h ; p
.eh_frame:00000000000055D1                 db 0C1h
.eh_frame:00000000000055D2                 db 0FFh
.eh_frame:00000000000055D3                 db 0FFh
.eh_frame:00000000000055D4                 db  42h ; B
.eh_frame:00000000000055D5                 db    3
.eh_frame:00000000000055D6                 db    0
.eh_frame:00000000000055D7                 db    0
.eh_frame:00000000000055D8                 db    0
.eh_frame:00000000000055D9                 db  42h ; B
.eh_frame:00000000000055DA                 db  0Eh
.eh_frame:00000000000055DB                 db  10h
.eh_frame:00000000000055DC                 db  8Dh
.eh_frame:00000000000055DD                 db    2
.eh_frame:00000000000055DE                 db  42h ; B
.eh_frame:00000000000055DF                 db  0Eh
.eh_frame:00000000000055E0                 db  18h
.eh_frame:00000000000055E1                 db  8Ch
.eh_frame:00000000000055E2                 db    3
.eh_frame:00000000000055E3                 db  46h ; F
.eh_frame:00000000000055E4                 db  0Eh
.eh_frame:00000000000055E5                 db  20h
.eh_frame:00000000000055E6                 db  86h
.eh_frame:00000000000055E7                 db    4
.eh_frame:00000000000055E8                 db  41h ; A
.eh_frame:00000000000055E9                 db  0Eh
.eh_frame:00000000000055EA                 db  28h ; (
.eh_frame:00000000000055EB                 db  83h
.eh_frame:00000000000055EC                 db    5
.eh_frame:00000000000055ED                 db  49h ; I
.eh_frame:00000000000055EE                 db  0Eh
.eh_frame:00000000000055EF                 db 0B0h
.eh_frame:00000000000055F0                 db    1
.eh_frame:00000000000055F1                 db    0
.eh_frame:00000000000055F2                 db    0
.eh_frame:00000000000055F3                 db    0
.eh_frame:00000000000055F4                 db  38h ; 8
.eh_frame:00000000000055F5                 db    0
.eh_frame:00000000000055F6                 db    0
.eh_frame:00000000000055F7                 db    0
.eh_frame:00000000000055F8                 db  88h
.eh_frame:00000000000055F9                 db    0
.eh_frame:00000000000055FA                 db    0
.eh_frame:00000000000055FB                 db    0
.eh_frame:00000000000055FC                 db  74h ; t
.eh_frame:00000000000055FD                 db 0BEh
.eh_frame:00000000000055FE                 db 0FFh
.eh_frame:00000000000055FF                 db 0FFh
.eh_frame:0000000000005600                 db 0B4h
.eh_frame:0000000000005601                 db    1
.eh_frame:0000000000005602                 db    0
.eh_frame:0000000000005603                 db    0
.eh_frame:0000000000005604                 db    0
.eh_frame:0000000000005605                 db  42h ; B
.eh_frame:0000000000005606                 db  0Eh
.eh_frame:0000000000005607                 db  10h
.eh_frame:0000000000005608                 db  8Ch
.eh_frame:0000000000005609                 db    2
.eh_frame:000000000000560A                 db  41h ; A
.eh_frame:000000000000560B                 db  0Eh
.eh_frame:000000000000560C                 db  18h
.eh_frame:000000000000560D                 db  86h
.eh_frame:000000000000560E                 db    3
.eh_frame:000000000000560F                 db  43h ; C
.eh_frame:0000000000005610                 db  0Eh
.eh_frame:0000000000005611                 db  20h
.eh_frame:0000000000005612                 db  83h
.eh_frame:0000000000005613                 db    4
.eh_frame:0000000000005614                 db    2
.eh_frame:0000000000005615                 db  52h ; R
.eh_frame:0000000000005616                 db  0Eh
.eh_frame:0000000000005617                 db  28h ; (
.eh_frame:0000000000005618                 db  49h ; I
.eh_frame:0000000000005619                 db  0Eh
.eh_frame:000000000000561A                 db  30h ; 0
.eh_frame:000000000000561B                 db  4Fh ; O
.eh_frame:000000000000561C                 db  0Eh
.eh_frame:000000000000561D                 db  38h ; 8
.eh_frame:000000000000561E                 db  53h ; S
.eh_frame:000000000000561F                 db  0Eh
.eh_frame:0000000000005620                 db  40h ; @
.eh_frame:0000000000005621                 db  52h ; R
.eh_frame:0000000000005622                 db  0Eh
.eh_frame:0000000000005623                 db  20h
.eh_frame:0000000000005624                 db  6Ch ; l
.eh_frame:0000000000005625                 db  0Ah
.eh_frame:0000000000005626                 db  0Eh
.eh_frame:0000000000005627                 db  18h
.eh_frame:0000000000005628                 db  43h ; C
.eh_frame:0000000000005629                 db  0Eh
.eh_frame:000000000000562A                 db  10h
.eh_frame:000000000000562B                 db  42h ; B
.eh_frame:000000000000562C                 db  0Eh
.eh_frame:000000000000562D                 db    8
.eh_frame:000000000000562E                 db  41h ; A
.eh_frame:000000000000562F                 db  0Bh
.eh_frame:0000000000005630                 db  10h
.eh_frame:0000000000005631                 db    0
.eh_frame:0000000000005632                 db    0
.eh_frame:0000000000005633                 db    0
.eh_frame:0000000000005634                 db 0C4h
.eh_frame:0000000000005635                 db    0
.eh_frame:0000000000005636                 db    0
.eh_frame:0000000000005637                 db    0
.eh_frame:0000000000005638                 db  58h ; X
.eh_frame:0000000000005639                 db 0C4h
.eh_frame:000000000000563A                 db 0FFh
.eh_frame:000000000000563B                 db 0FFh
.eh_frame:000000000000563C                 db    8
.eh_frame:000000000000563D                 db    0
.eh_frame:000000000000563E                 db    0
.eh_frame:000000000000563F                 db    0
.eh_frame:0000000000005640                 db    0
.eh_frame:0000000000005641                 db    0
.eh_frame:0000000000005642                 db    0
.eh_frame:0000000000005643                 db    0
.eh_frame:0000000000005644                 db  10h
.eh_frame:0000000000005645                 db    0
.eh_frame:0000000000005646                 db    0
.eh_frame:0000000000005647                 db    0
.eh_frame:0000000000005648                 db 0D8h
.eh_frame:0000000000005649                 db    0
.eh_frame:000000000000564A                 db    0
.eh_frame:000000000000564B                 db    0
.eh_frame:000000000000564C                 db  54h ; T
.eh_frame:000000000000564D                 db 0C4h
.eh_frame:000000000000564E                 db 0FFh
.eh_frame:000000000000564F                 db 0FFh
.eh_frame:0000000000005650                 db    8
.eh_frame:0000000000005651                 db    0
.eh_frame:0000000000005652                 db    0
.eh_frame:0000000000005653                 db    0
.eh_frame:0000000000005654                 db    0
.eh_frame:0000000000005655                 db    0
.eh_frame:0000000000005656                 db    0
.eh_frame:0000000000005657                 db    0
.eh_frame:0000000000005658                 db  2Ch ; ,
.eh_frame:0000000000005659                 db    0
.eh_frame:000000000000565A                 db    0
.eh_frame:000000000000565B                 db    0
.eh_frame:000000000000565C                 db 0ECh
.eh_frame:000000000000565D                 db    0
.eh_frame:000000000000565E                 db    0
.eh_frame:000000000000565F                 db    0
.eh_frame:0000000000005660                 db  50h ; P
.eh_frame:0000000000005661                 db 0C4h
.eh_frame:0000000000005662                 db 0FFh
.eh_frame:0000000000005663                 db 0FFh
.eh_frame:0000000000005664                 db 0A4h
.eh_frame:0000000000005665                 db    0
.eh_frame:0000000000005666                 db    0
.eh_frame:0000000000005667                 db    0
.eh_frame:0000000000005668                 db    0
.eh_frame:0000000000005669                 db  41h ; A
.eh_frame:000000000000566A                 db  0Eh
.eh_frame:000000000000566B                 db  10h
.eh_frame:000000000000566C                 db  86h
.eh_frame:000000000000566D                 db    2
.eh_frame:000000000000566E                 db  41h ; A
.eh_frame:000000000000566F                 db  0Eh
.eh_frame:0000000000005670                 db  18h
.eh_frame:0000000000005671                 db  83h
.eh_frame:0000000000005672                 db    3
.eh_frame:0000000000005673                 db  44h ; D
.eh_frame:0000000000005674                 db  0Eh
.eh_frame:0000000000005675                 db  20h
.eh_frame:0000000000005676                 db  7Ah ; z
.eh_frame:0000000000005677                 db  0Ah
.eh_frame:0000000000005678                 db  0Eh
.eh_frame:0000000000005679                 db  18h
.eh_frame:000000000000567A                 db  41h ; A
.eh_frame:000000000000567B                 db  0Eh
.eh_frame:000000000000567C                 db  10h
.eh_frame:000000000000567D                 db  41h ; A
.eh_frame:000000000000567E                 db  0Eh
.eh_frame:000000000000567F                 db    8
.eh_frame:0000000000005680                 db  41h ; A
.eh_frame:0000000000005681                 db  0Bh
.eh_frame:0000000000005682                 db    0
.eh_frame:0000000000005683                 db    0
.eh_frame:0000000000005684                 db    0
.eh_frame:0000000000005685                 db    0
.eh_frame:0000000000005686                 db    0
.eh_frame:0000000000005687                 db    0
.eh_frame:0000000000005688                 db  38h ; 8
.eh_frame:0000000000005689                 db    0
.eh_frame:000000000000568A                 db    0
.eh_frame:000000000000568B                 db    0
.eh_frame:000000000000568C                 db  1Ch
.eh_frame:000000000000568D                 db    1
.eh_frame:000000000000568E                 db    0
.eh_frame:000000000000568F                 db    0
.eh_frame:0000000000005690                 db 0D0h
.eh_frame:0000000000005691                 db 0C4h
.eh_frame:0000000000005692                 db 0FFh
.eh_frame:0000000000005693                 db 0FFh
.eh_frame:0000000000005694                 db  3Fh ; ?
.eh_frame:0000000000005695                 db    1
.eh_frame:0000000000005696                 db    0
.eh_frame:0000000000005697                 db    0
.eh_frame:0000000000005698                 db    0
.eh_frame:0000000000005699                 db  42h ; B
.eh_frame:000000000000569A                 db  0Eh
.eh_frame:000000000000569B                 db  10h
.eh_frame:000000000000569C                 db  8Dh
.eh_frame:000000000000569D                 db    2
.eh_frame:000000000000569E                 db  42h ; B
.eh_frame:000000000000569F                 db  0Eh
.eh_frame:00000000000056A0                 db  18h
.eh_frame:00000000000056A1                 db  8Ch
.eh_frame:00000000000056A2                 db    3
.eh_frame:00000000000056A3                 db  44h ; D
.eh_frame:00000000000056A4                 db  0Eh
.eh_frame:00000000000056A5                 db  20h
.eh_frame:00000000000056A6                 db  86h
.eh_frame:00000000000056A7                 db    4
.eh_frame:00000000000056A8                 db  41h ; A
.eh_frame:00000000000056A9                 db  0Eh
.eh_frame:00000000000056AA                 db  28h ; (
.eh_frame:00000000000056AB                 db  83h
.eh_frame:00000000000056AC                 db    5
.eh_frame:00000000000056AD                 db  4Dh ; M
.eh_frame:00000000000056AE                 db  0Eh
.eh_frame:00000000000056AF                 db  90h
.eh_frame:00000000000056B0                 db    2
.eh_frame:00000000000056B1                 db    2
.eh_frame:00000000000056B2                 db  8Eh
.eh_frame:00000000000056B3                 db  0Ah
.eh_frame:00000000000056B4                 db  0Eh
.eh_frame:00000000000056B5                 db  28h ; (
.eh_frame:00000000000056B6                 db  41h ; A
.eh_frame:00000000000056B7                 db  0Eh
.eh_frame:00000000000056B8                 db  20h
.eh_frame:00000000000056B9                 db  41h ; A
.eh_frame:00000000000056BA                 db  0Eh
.eh_frame:00000000000056BB                 db  18h
.eh_frame:00000000000056BC                 db  42h ; B
.eh_frame:00000000000056BD                 db  0Eh
.eh_frame:00000000000056BE                 db  10h
.eh_frame:00000000000056BF                 db  42h ; B
.eh_frame:00000000000056C0                 db  0Eh
.eh_frame:00000000000056C1                 db    8
.eh_frame:00000000000056C2                 db  46h ; F
.eh_frame:00000000000056C3                 db  0Bh
.eh_frame:00000000000056C4                 db  48h ; H
.eh_frame:00000000000056C5                 db    0
.eh_frame:00000000000056C6                 db    0
.eh_frame:00000000000056C7                 db    0
.eh_frame:00000000000056C8                 db  58h ; X
.eh_frame:00000000000056C9                 db    1
.eh_frame:00000000000056CA                 db    0
.eh_frame:00000000000056CB                 db    0
.eh_frame:00000000000056CC                 db 0D4h
.eh_frame:00000000000056CD                 db 0C5h
.eh_frame:00000000000056CE                 db 0FFh
.eh_frame:00000000000056CF                 db 0FFh
.eh_frame:00000000000056D0                 db  3Bh ; ;
.eh_frame:00000000000056D1                 db    1
.eh_frame:00000000000056D2                 db    0
.eh_frame:00000000000056D3                 db    0
.eh_frame:00000000000056D4                 db    0
.eh_frame:00000000000056D5                 db  42h ; B
.eh_frame:00000000000056D6                 db  0Eh
.eh_frame:00000000000056D7                 db  10h
.eh_frame:00000000000056D8                 db  8Eh
.eh_frame:00000000000056D9                 db    2
.eh_frame:00000000000056DA                 db  42h ; B
.eh_frame:00000000000056DB                 db  0Eh
.eh_frame:00000000000056DC                 db  18h
.eh_frame:00000000000056DD                 db  8Dh
.eh_frame:00000000000056DE                 db    3
.eh_frame:00000000000056DF                 db  45h ; E
.eh_frame:00000000000056E0                 db  0Eh
.eh_frame:00000000000056E1                 db  20h
.eh_frame:00000000000056E2                 db  8Ch
.eh_frame:00000000000056E3                 db    4
.eh_frame:00000000000056E4                 db  41h ; A
.eh_frame:00000000000056E5                 db  0Eh
.eh_frame:00000000000056E6                 db  28h ; (
.eh_frame:00000000000056E7                 db  86h
.eh_frame:00000000000056E8                 db    5
.eh_frame:00000000000056E9                 db  44h ; D
.eh_frame:00000000000056EA                 db  0Eh
.eh_frame:00000000000056EB                 db  30h ; 0
.eh_frame:00000000000056EC                 db  83h
.eh_frame:00000000000056ED                 db    6
.eh_frame:00000000000056EE                 db  4Ah ; J
.eh_frame:00000000000056EF                 db  0Eh
.eh_frame:00000000000056F0                 db  80h
.eh_frame:00000000000056F1                 db    2
.eh_frame:00000000000056F2                 db    3
.eh_frame:00000000000056F3                 db  0Dh
.eh_frame:00000000000056F4                 db    1
.eh_frame:00000000000056F5                 db  0Ah
.eh_frame:00000000000056F6                 db  0Eh
.eh_frame:00000000000056F7                 db  30h ; 0
.eh_frame:00000000000056F8                 db  41h ; A
.eh_frame:00000000000056F9                 db  0Eh
.eh_frame:00000000000056FA                 db  28h ; (
.eh_frame:00000000000056FB                 db  41h ; A
.eh_frame:00000000000056FC                 db  0Eh
.eh_frame:00000000000056FD                 db  20h
.eh_frame:00000000000056FE                 db  42h ; B
.eh_frame:00000000000056FF                 db  0Eh
.eh_frame:0000000000005700                 db  18h
.eh_frame:0000000000005701                 db  42h ; B
.eh_frame:0000000000005702                 db  0Eh
.eh_frame:0000000000005703                 db  10h
.eh_frame:0000000000005704                 db  42h ; B
.eh_frame:0000000000005705                 db  0Eh
.eh_frame:0000000000005706                 db    8
.eh_frame:0000000000005707                 db  43h ; C
.eh_frame:0000000000005708                 db  0Bh
.eh_frame:0000000000005709                 db    0
.eh_frame:000000000000570A                 db    0
.eh_frame:000000000000570B                 db    0
.eh_frame:000000000000570C                 db    0
.eh_frame:000000000000570D                 db    0
.eh_frame:000000000000570E                 db    0
.eh_frame:000000000000570F                 db    0
.eh_frame:0000000000005710                 db  1Ch
.eh_frame:0000000000005711                 db    0
.eh_frame:0000000000005712                 db    0
.eh_frame:0000000000005713                 db    0
.eh_frame:0000000000005714                 db 0A4h
.eh_frame:0000000000005715                 db    1
.eh_frame:0000000000005716                 db    0
.eh_frame:0000000000005717                 db    0
.eh_frame:0000000000005718                 db 0C8h
.eh_frame:0000000000005719                 db 0C6h
.eh_frame:000000000000571A                 db 0FFh
.eh_frame:000000000000571B                 db 0FFh
.eh_frame:000000000000571C                 db  9Fh
.eh_frame:000000000000571D                 db    0
.eh_frame:000000000000571E                 db    0
.eh_frame:000000000000571F                 db    0
.eh_frame:0000000000005720                 db    0
.eh_frame:0000000000005721                 db  44h ; D
.eh_frame:0000000000005722                 db  0Eh
.eh_frame:0000000000005723                 db  10h
.eh_frame:0000000000005724                 db  83h
.eh_frame:0000000000005725                 db    2
.eh_frame:0000000000005726                 db    2
.eh_frame:0000000000005727                 db  78h ; x
.eh_frame:0000000000005728                 db  0Ah
.eh_frame:0000000000005729                 db  0Eh
.eh_frame:000000000000572A                 db    8
.eh_frame:000000000000572B                 db  41h ; A
.eh_frame:000000000000572C                 db  0Bh
.eh_frame:000000000000572D                 db    0
.eh_frame:000000000000572E                 db    0
.eh_frame:000000000000572F                 db    0
.eh_frame:0000000000005730                 db  40h ; @
.eh_frame:0000000000005731                 db    0
.eh_frame:0000000000005732                 db    0
.eh_frame:0000000000005733                 db    0
.eh_frame:0000000000005734                 db 0C4h
.eh_frame:0000000000005735                 db    1
.eh_frame:0000000000005736                 db    0
.eh_frame:0000000000005737                 db    0
.eh_frame:0000000000005738                 db  48h ; H
.eh_frame:0000000000005739                 db 0C7h
.eh_frame:000000000000573A                 db 0FFh
.eh_frame:000000000000573B                 db 0FFh
.eh_frame:000000000000573C                 db 0E7h
.eh_frame:000000000000573D                 db    0
.eh_frame:000000000000573E                 db    0
.eh_frame:000000000000573F                 db    0
.eh_frame:0000000000005740                 db    0
.eh_frame:0000000000005741                 db  41h ; A
.eh_frame:0000000000005742                 db  0Eh
.eh_frame:0000000000005743                 db  10h
.eh_frame:0000000000005744                 db  86h
.eh_frame:0000000000005745                 db    2
.eh_frame:0000000000005746                 db  41h ; A
.eh_frame:0000000000005747                 db  0Eh
.eh_frame:0000000000005748                 db  18h
.eh_frame:0000000000005749                 db  83h
.eh_frame:000000000000574A                 db    3
.eh_frame:000000000000574B                 db  49h ; I
.eh_frame:000000000000574C                 db  0Eh
.eh_frame:000000000000574D                 db  20h
.eh_frame:000000000000574E                 db  6Eh ; n
.eh_frame:000000000000574F                 db  0Ah
.eh_frame:0000000000005750                 db  0Eh
.eh_frame:0000000000005751                 db  18h
.eh_frame:0000000000005752                 db  41h ; A
.eh_frame:0000000000005753                 db  0Eh
.eh_frame:0000000000005754                 db  10h
.eh_frame:0000000000005755                 db  41h ; A
.eh_frame:0000000000005756                 db  0Eh
.eh_frame:0000000000005757                 db    8
.eh_frame:0000000000005758                 db  45h ; E
.eh_frame:0000000000005759                 db  0Bh
.eh_frame:000000000000575A                 db    2
.eh_frame:000000000000575B                 db  4Ah ; J
.eh_frame:000000000000575C                 db  0Ah
.eh_frame:000000000000575D                 db  0Eh
.eh_frame:000000000000575E                 db  18h
.eh_frame:000000000000575F                 db  41h ; A
.eh_frame:0000000000005760                 db  0Eh
.eh_frame:0000000000005761                 db  10h
.eh_frame:0000000000005762                 db  41h ; A
.eh_frame:0000000000005763                 db  0Eh
.eh_frame:0000000000005764                 db    8
.eh_frame:0000000000005765                 db  44h ; D
.eh_frame:0000000000005766                 db  0Bh
.eh_frame:0000000000005767                 db    2
.eh_frame:0000000000005768                 db  54h ; T
.eh_frame:0000000000005769                 db  0Eh
.eh_frame:000000000000576A                 db  18h
.eh_frame:000000000000576B                 db  41h ; A
.eh_frame:000000000000576C                 db  0Eh
.eh_frame:000000000000576D                 db  10h
.eh_frame:000000000000576E                 db  41h ; A
.eh_frame:000000000000576F                 db  0Eh
.eh_frame:0000000000005770                 db    8
.eh_frame:0000000000005771                 db    0
.eh_frame:0000000000005772                 db    0
.eh_frame:0000000000005773                 db    0
.eh_frame:0000000000005774                 db  74h ; t
.eh_frame:0000000000005775                 db    0
.eh_frame:0000000000005776                 db    0
.eh_frame:0000000000005777                 db    0
.eh_frame:0000000000005778                 db    8
.eh_frame:0000000000005779                 db    2
.eh_frame:000000000000577A                 db    0
.eh_frame:000000000000577B                 db    0
.eh_frame:000000000000577C                 db 0F4h
.eh_frame:000000000000577D                 db 0C7h
.eh_frame:000000000000577E                 db 0FFh
.eh_frame:000000000000577F                 db 0FFh
.eh_frame:0000000000005780                 db  34h ; 4
.eh_frame:0000000000005781                 db  12h
.eh_frame:0000000000005782                 db    0
.eh_frame:0000000000005783                 db    0
.eh_frame:0000000000005784                 db    0
.eh_frame:0000000000005785                 db  42h ; B
.eh_frame:0000000000005786                 db  0Eh
.eh_frame:0000000000005787                 db  10h
.eh_frame:0000000000005788                 db  8Fh
.eh_frame:0000000000005789                 db    2
.eh_frame:000000000000578A                 db  42h ; B
.eh_frame:000000000000578B                 db  0Eh
.eh_frame:000000000000578C                 db  18h
.eh_frame:000000000000578D                 db  8Eh
.eh_frame:000000000000578E                 db    3
.eh_frame:000000000000578F                 db  45h ; E
.eh_frame:0000000000005790                 db  0Eh
.eh_frame:0000000000005791                 db  20h
.eh_frame:0000000000005792                 db  8Dh
.eh_frame:0000000000005793                 db    4
.eh_frame:0000000000005794                 db  42h ; B
.eh_frame:0000000000005795                 db  0Eh
.eh_frame:0000000000005796                 db  28h ; (
.eh_frame:0000000000005797                 db  8Ch
.eh_frame:0000000000005798                 db    5
.eh_frame:0000000000005799                 db  44h ; D
.eh_frame:000000000000579A                 db  0Eh
.eh_frame:000000000000579B                 db  30h ; 0
.eh_frame:000000000000579C                 db  86h
.eh_frame:000000000000579D                 db    6
.eh_frame:000000000000579E                 db  41h ; A
.eh_frame:000000000000579F                 db  0Eh
.eh_frame:00000000000057A0                 db  38h ; 8
.eh_frame:00000000000057A1                 db  83h
.eh_frame:00000000000057A2                 db    7
.eh_frame:00000000000057A3                 db  53h ; S
.eh_frame:00000000000057A4                 db  0Eh
.eh_frame:00000000000057A5                 db 0F0h
.eh_frame:00000000000057A6                 db    1
.eh_frame:00000000000057A7                 db    3
.eh_frame:00000000000057A8                 db  81h
.eh_frame:00000000000057A9                 db  0Bh
.eh_frame:00000000000057AA                 db  0Eh
.eh_frame:00000000000057AB                 db 0F8h
.eh_frame:00000000000057AC                 db    1
.eh_frame:00000000000057AD                 db  4Ah ; J
.eh_frame:00000000000057AE                 db  0Eh
.eh_frame:00000000000057AF                 db  80h
.eh_frame:00000000000057B0                 db    2
.eh_frame:00000000000057B1                 db  44h ; D
.eh_frame:00000000000057B2                 db  0Eh
.eh_frame:00000000000057B3                 db  88h
.eh_frame:00000000000057B4                 db    2
.eh_frame:00000000000057B5                 db  45h ; E
.eh_frame:00000000000057B6                 db  0Eh
.eh_frame:00000000000057B7                 db  90h
.eh_frame:00000000000057B8                 db    2
.eh_frame:00000000000057B9                 db  5Fh ; _
.eh_frame:00000000000057BA                 db  0Eh
.eh_frame:00000000000057BB                 db 0F0h
.eh_frame:00000000000057BC                 db    1
.eh_frame:00000000000057BD                 db  64h ; d
.eh_frame:00000000000057BE                 db  0Ah
.eh_frame:00000000000057BF                 db  0Eh
.eh_frame:00000000000057C0                 db  38h ; 8
.eh_frame:00000000000057C1                 db  41h ; A
.eh_frame:00000000000057C2                 db  0Eh
.eh_frame:00000000000057C3                 db  30h ; 0
.eh_frame:00000000000057C4                 db  41h ; A
.eh_frame:00000000000057C5                 db  0Eh
.eh_frame:00000000000057C6                 db  28h ; (
.eh_frame:00000000000057C7                 db  42h ; B
.eh_frame:00000000000057C8                 db  0Eh
.eh_frame:00000000000057C9                 db  20h
.eh_frame:00000000000057CA                 db  42h ; B
.eh_frame:00000000000057CB                 db  0Eh
.eh_frame:00000000000057CC                 db  18h
.eh_frame:00000000000057CD                 db  42h ; B
.eh_frame:00000000000057CE                 db  0Eh
.eh_frame:00000000000057CF                 db  10h
.eh_frame:00000000000057D0                 db  42h ; B
.eh_frame:00000000000057D1                 db  0Eh
.eh_frame:00000000000057D2                 db    8
.eh_frame:00000000000057D3                 db  44h ; D
.eh_frame:00000000000057D4                 db  0Bh
.eh_frame:00000000000057D5                 db    3
.eh_frame:00000000000057D6                 db  99h
.eh_frame:00000000000057D7                 db    5
.eh_frame:00000000000057D8                 db  0Eh
.eh_frame:00000000000057D9                 db 0F8h
.eh_frame:00000000000057DA                 db    1
.eh_frame:00000000000057DB                 db  4Dh ; M
.eh_frame:00000000000057DC                 db  0Eh
.eh_frame:00000000000057DD                 db  80h
.eh_frame:00000000000057DE                 db    2
.eh_frame:00000000000057DF                 db  44h ; D
.eh_frame:00000000000057E0                 db  0Eh
.eh_frame:00000000000057E1                 db  88h
.eh_frame:00000000000057E2                 db    2
.eh_frame:00000000000057E3                 db  47h ; G
.eh_frame:00000000000057E4                 db  0Eh
.eh_frame:00000000000057E5                 db  90h
.eh_frame:00000000000057E6                 db    2
.eh_frame:00000000000057E7                 db  5Bh ; [
.eh_frame:00000000000057E8                 db  0Eh
.eh_frame:00000000000057E9                 db 0F0h
.eh_frame:00000000000057EA                 db    1
.eh_frame:00000000000057EB                 db    0
.eh_frame:00000000000057EC                 db  68h ; h
.eh_frame:00000000000057ED                 db    0
.eh_frame:00000000000057EE                 db    0
.eh_frame:00000000000057EF                 db    0
.eh_frame:00000000000057F0                 db  80h
.eh_frame:00000000000057F1                 db    2
.eh_frame:00000000000057F2                 db    0
.eh_frame:00000000000057F3                 db    0
.eh_frame:00000000000057F4                 db 0BCh
.eh_frame:00000000000057F5                 db 0D9h
.eh_frame:00000000000057F6                 db 0FFh
.eh_frame:00000000000057F7                 db 0FFh
.eh_frame:00000000000057F8                 db 0ABh
.eh_frame:00000000000057F9                 db    1
.eh_frame:00000000000057FA                 db    0
.eh_frame:00000000000057FB                 db    0
.eh_frame:00000000000057FC                 db    0
.eh_frame:00000000000057FD                 db  42h ; B
.eh_frame:00000000000057FE                 db  0Eh
.eh_frame:00000000000057FF                 db  10h
.eh_frame:0000000000005800                 db  8Fh
.eh_frame:0000000000005801                 db    2
.eh_frame:0000000000005802                 db  42h ; B
.eh_frame:0000000000005803                 db  0Eh
.eh_frame:0000000000005804                 db  18h
.eh_frame:0000000000005805                 db  8Eh
.eh_frame:0000000000005806                 db    3
.eh_frame:0000000000005807                 db  45h ; E
.eh_frame:0000000000005808                 db  0Eh
.eh_frame:0000000000005809                 db  20h
.eh_frame:000000000000580A                 db  8Dh
.eh_frame:000000000000580B                 db    4
.eh_frame:000000000000580C                 db  42h ; B
.eh_frame:000000000000580D                 db  0Eh
.eh_frame:000000000000580E                 db  28h ; (
.eh_frame:000000000000580F                 db  8Ch
.eh_frame:0000000000005810                 db    5
.eh_frame:0000000000005811                 db  44h ; D
.eh_frame:0000000000005812                 db  0Eh
.eh_frame:0000000000005813                 db  30h ; 0
.eh_frame:0000000000005814                 db  86h
.eh_frame:0000000000005815                 db    6
.eh_frame:0000000000005816                 db  41h ; A
.eh_frame:0000000000005817                 db  0Eh
.eh_frame:0000000000005818                 db  38h ; 8
.eh_frame:0000000000005819                 db  83h
.eh_frame:000000000000581A                 db    7
.eh_frame:000000000000581B                 db  47h ; G
.eh_frame:000000000000581C                 db  0Eh
.eh_frame:000000000000581D                 db  60h ; `
.eh_frame:000000000000581E                 db    2
.eh_frame:000000000000581F                 db  99h
.eh_frame:0000000000005820                 db  0Eh
.eh_frame:0000000000005821                 db  68h ; h
.eh_frame:0000000000005822                 db  5Fh ; _
.eh_frame:0000000000005823                 db  0Eh
.eh_frame:0000000000005824                 db  70h ; p
.eh_frame:0000000000005825                 db  46h ; F
.eh_frame:0000000000005826                 db  0Eh
.eh_frame:0000000000005827                 db  78h ; x
.eh_frame:0000000000005828                 db  42h ; B
.eh_frame:0000000000005829                 db  0Eh
.eh_frame:000000000000582A                 db  80h
.eh_frame:000000000000582B                 db    1
.eh_frame:000000000000582C                 db  59h ; Y
.eh_frame:000000000000582D                 db  0Eh
.eh_frame:000000000000582E                 db  60h ; `
.eh_frame:000000000000582F                 db    2
.eh_frame:0000000000005830                 db  40h ; @
.eh_frame:0000000000005831                 db  0Eh
.eh_frame:0000000000005832                 db  68h ; h
.eh_frame:0000000000005833                 db  4Bh ; K
.eh_frame:0000000000005834                 db  0Eh
.eh_frame:0000000000005835                 db  70h ; p
.eh_frame:0000000000005836                 db  43h ; C
.eh_frame:0000000000005837                 db  0Eh
.eh_frame:0000000000005838                 db  78h ; x
.eh_frame:0000000000005839                 db  45h ; E
.eh_frame:000000000000583A                 db  0Eh
.eh_frame:000000000000583B                 db  80h
.eh_frame:000000000000583C                 db    1
.eh_frame:000000000000583D                 db  5Eh ; ^
.eh_frame:000000000000583E                 db  0Eh
.eh_frame:000000000000583F                 db  60h ; `
.eh_frame:0000000000005840                 db  4Ch ; L
.eh_frame:0000000000005841                 db  0Ah
.eh_frame:0000000000005842                 db  0Eh
.eh_frame:0000000000005843                 db  38h ; 8
.eh_frame:0000000000005844                 db  44h ; D
.eh_frame:0000000000005845                 db  0Eh
.eh_frame:0000000000005846                 db  30h ; 0
.eh_frame:0000000000005847                 db  41h ; A
.eh_frame:0000000000005848                 db  0Eh
.eh_frame:0000000000005849                 db  28h ; (
.eh_frame:000000000000584A                 db  42h ; B
.eh_frame:000000000000584B                 db  0Eh
.eh_frame:000000000000584C                 db  20h
.eh_frame:000000000000584D                 db  42h ; B
.eh_frame:000000000000584E                 db  0Eh
.eh_frame:000000000000584F                 db  18h
.eh_frame:0000000000005850                 db  42h ; B
.eh_frame:0000000000005851                 db  0Eh
.eh_frame:0000000000005852                 db  10h
.eh_frame:0000000000005853                 db  42h ; B
.eh_frame:0000000000005854                 db  0Eh
.eh_frame:0000000000005855                 db    8
.eh_frame:0000000000005856                 db  46h ; F
.eh_frame:0000000000005857                 db  0Bh
.eh_frame:0000000000005858                 db  28h ; (
.eh_frame:0000000000005859                 db    0
.eh_frame:000000000000585A                 db    0
.eh_frame:000000000000585B                 db    0
.eh_frame:000000000000585C                 db 0ECh
.eh_frame:000000000000585D                 db    2
.eh_frame:000000000000585E                 db    0
.eh_frame:000000000000585F                 db    0
.eh_frame:0000000000005860                 db    0
.eh_frame:0000000000005861                 db 0DBh
.eh_frame:0000000000005862                 db 0FFh
.eh_frame:0000000000005863                 db 0FFh
.eh_frame:0000000000005864                 db  36h ; 6
.eh_frame:0000000000005865                 db    0
.eh_frame:0000000000005866                 db    0
.eh_frame:0000000000005867                 db    0
.eh_frame:0000000000005868                 db    0
.eh_frame:0000000000005869                 db  42h ; B
.eh_frame:000000000000586A                 db  0Eh
.eh_frame:000000000000586B                 db  10h
.eh_frame:000000000000586C                 db  8Ch
.eh_frame:000000000000586D                 db    2
.eh_frame:000000000000586E                 db  41h ; A
.eh_frame:000000000000586F                 db  0Eh
.eh_frame:0000000000005870                 db  18h
.eh_frame:0000000000005871                 db  86h
.eh_frame:0000000000005872                 db    3
.eh_frame:0000000000005873                 db  41h ; A
.eh_frame:0000000000005874                 db  0Eh
.eh_frame:0000000000005875                 db  20h
.eh_frame:0000000000005876                 db  83h
.eh_frame:0000000000005877                 db    4
.eh_frame:0000000000005878                 db  6Eh ; n
.eh_frame:0000000000005879                 db  0Eh
.eh_frame:000000000000587A                 db  18h
.eh_frame:000000000000587B                 db  41h ; A
.eh_frame:000000000000587C                 db  0Eh
.eh_frame:000000000000587D                 db  10h
.eh_frame:000000000000587E                 db  42h ; B
.eh_frame:000000000000587F                 db  0Eh
.eh_frame:0000000000005880                 db    8
.eh_frame:0000000000005881                 db    0
.eh_frame:0000000000005882                 db    0
.eh_frame:0000000000005883                 db    0
.eh_frame:0000000000005884                 db  10h
.eh_frame:0000000000005885                 db    0
.eh_frame:0000000000005886                 db    0
.eh_frame:0000000000005887                 db    0
.eh_frame:0000000000005888                 db  18h
.eh_frame:0000000000005889                 db    3
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db  14h
.eh_frame:000000000000588D                 db 0DBh
.eh_frame:000000000000588E                 db 0FFh
.eh_frame:000000000000588F                 db 0FFh
.eh_frame:0000000000005890                 db  11h
.eh_frame:0000000000005891                 db    0
.eh_frame:0000000000005892                 db    0
.eh_frame:0000000000005893                 db    0
.eh_frame:0000000000005894                 db    0
.eh_frame:0000000000005895                 db    0
.eh_frame:0000000000005896                 db    0
.eh_frame:0000000000005897                 db    0
.eh_frame:0000000000005898                 db  10h
.eh_frame:0000000000005899                 db    0
.eh_frame:000000000000589A                 db    0
.eh_frame:000000000000589B                 db    0
.eh_frame:000000000000589C                 db  2Ch ; ,
.eh_frame:000000000000589D                 db    3
.eh_frame:000000000000589E                 db    0
.eh_frame:000000000000589F                 db    0
.eh_frame:00000000000058A0                 db  20h
.eh_frame:00000000000058A1                 db 0DBh
.eh_frame:00000000000058A2                 db 0FFh
.eh_frame:00000000000058A3                 db 0FFh
.eh_frame:00000000000058A4                 db  11h
.eh_frame:00000000000058A5                 db    0
.eh_frame:00000000000058A6                 db    0
.eh_frame:00000000000058A7                 db    0
.eh_frame:00000000000058A8                 db    0
.eh_frame:00000000000058A9                 db    0
.eh_frame:00000000000058AA                 db    0
.eh_frame:00000000000058AB                 db    0
.eh_frame:00000000000058AC                 db  10h
.eh_frame:00000000000058AD                 db    0
.eh_frame:00000000000058AE                 db    0
.eh_frame:00000000000058AF                 db    0
.eh_frame:00000000000058B0                 db  40h ; @
.eh_frame:00000000000058B1                 db    3
.eh_frame:00000000000058B2                 db    0
.eh_frame:00000000000058B3                 db    0
.eh_frame:00000000000058B4                 db  2Ch ; ,
.eh_frame:00000000000058B5                 db 0DBh
.eh_frame:00000000000058B6                 db 0FFh
.eh_frame:00000000000058B7                 db 0FFh
.eh_frame:00000000000058B8                 db  35h ; 5
.eh_frame:00000000000058B9                 db    0
.eh_frame:00000000000058BA                 db    0
.eh_frame:00000000000058BB                 db    0
.eh_frame:00000000000058BC                 db    0
.eh_frame:00000000000058BD                 db    0
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db  10h
.eh_frame:00000000000058C1                 db    0
.eh_frame:00000000000058C2                 db    0
.eh_frame:00000000000058C3                 db    0
.eh_frame:00000000000058C4                 db  54h ; T
.eh_frame:00000000000058C5                 db    3
.eh_frame:00000000000058C6                 db    0
.eh_frame:00000000000058C7                 db    0
.eh_frame:00000000000058C8                 db  58h ; X
.eh_frame:00000000000058C9                 db 0DBh
.eh_frame:00000000000058CA                 db 0FFh
.eh_frame:00000000000058CB                 db 0FFh
.eh_frame:00000000000058CC                 db  15h
.eh_frame:00000000000058CD                 db    0
.eh_frame:00000000000058CE                 db    0
.eh_frame:00000000000058CF                 db    0
.eh_frame:00000000000058D0                 db    0
.eh_frame:00000000000058D1                 db    0
.eh_frame:00000000000058D2                 db    0
.eh_frame:00000000000058D3                 db    0
.eh_frame:00000000000058D4                 db  10h
.eh_frame:00000000000058D5                 db    0
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db  68h ; h
.eh_frame:00000000000058D9                 db    3
.eh_frame:00000000000058DA                 db    0
.eh_frame:00000000000058DB                 db    0
.eh_frame:00000000000058DC                 db  64h ; d
.eh_frame:00000000000058DD                 db 0DBh
.eh_frame:00000000000058DE                 db 0FFh
.eh_frame:00000000000058DF                 db 0FFh
.eh_frame:00000000000058E0                 db  30h ; 0
.eh_frame:00000000000058E1                 db    0
.eh_frame:00000000000058E2                 db    0
.eh_frame:00000000000058E3                 db    0
.eh_frame:00000000000058E4                 db    0
.eh_frame:00000000000058E5                 db  6Bh ; k
.eh_frame:00000000000058E6                 db  0Eh
.eh_frame:00000000000058E7                 db  10h
.eh_frame:00000000000058E8                 db  50h ; P
.eh_frame:00000000000058E9                 db    0
.eh_frame:00000000000058EA                 db    0
.eh_frame:00000000000058EB                 db    0
.eh_frame:00000000000058EC                 db  7Ch ; |
.eh_frame:00000000000058ED                 db    3
.eh_frame:00000000000058EE                 db    0
.eh_frame:00000000000058EF                 db    0
.eh_frame:00000000000058F0                 db  80h
.eh_frame:00000000000058F1                 db 0DBh
.eh_frame:00000000000058F2                 db 0FFh
.eh_frame:00000000000058F3                 db 0FFh
.eh_frame:00000000000058F4                 db  74h ; t
.eh_frame:00000000000058F5                 db    0
.eh_frame:00000000000058F6                 db    0
.eh_frame:00000000000058F7                 db    0
.eh_frame:00000000000058F8                 db    0
.eh_frame:00000000000058F9                 db  42h ; B
.eh_frame:00000000000058FA                 db  0Eh
.eh_frame:00000000000058FB                 db  10h
.eh_frame:00000000000058FC                 db  8Fh
.eh_frame:00000000000058FD                 db    2
.eh_frame:00000000000058FE                 db  42h ; B
.eh_frame:00000000000058FF                 db  0Eh
.eh_frame:0000000000005900                 db  18h
.eh_frame:0000000000005901                 db  8Eh
.eh_frame:0000000000005902                 db    3
.eh_frame:0000000000005903                 db  49h ; I
.eh_frame:0000000000005904                 db  0Eh
.eh_frame:0000000000005905                 db  20h
.eh_frame:0000000000005906                 db  8Dh
.eh_frame:0000000000005907                 db    4
.eh_frame:0000000000005908                 db  42h ; B
.eh_frame:0000000000005909                 db  0Eh
.eh_frame:000000000000590A                 db  28h ; (
.eh_frame:000000000000590B                 db  8Ch
.eh_frame:000000000000590C                 db    5
.eh_frame:000000000000590D                 db  44h ; D
.eh_frame:000000000000590E                 db  0Eh
.eh_frame:000000000000590F                 db  30h ; 0
.eh_frame:0000000000005910                 db  86h
.eh_frame:0000000000005911                 db    6
.eh_frame:0000000000005912                 db  41h ; A
.eh_frame:0000000000005913                 db  0Eh
.eh_frame:0000000000005914                 db  38h ; 8
.eh_frame:0000000000005915                 db  83h
.eh_frame:0000000000005916                 db    7
.eh_frame:0000000000005917                 db  4Dh ; M
.eh_frame:0000000000005918                 db  0Eh
.eh_frame:0000000000005919                 db  50h ; P
.eh_frame:000000000000591A                 db  5Fh ; _
.eh_frame:000000000000591B                 db  0Eh
.eh_frame:000000000000591C                 db  58h ; X
.eh_frame:000000000000591D                 db  47h ; G
.eh_frame:000000000000591E                 db  0Eh
.eh_frame:000000000000591F                 db  60h ; `
.eh_frame:0000000000005920                 db  46h ; F
.eh_frame:0000000000005921                 db  0Eh
.eh_frame:0000000000005922                 db  68h ; h
.eh_frame:0000000000005923                 db  44h ; D
.eh_frame:0000000000005924                 db  0Eh
.eh_frame:0000000000005925                 db  70h ; p
.eh_frame:0000000000005926                 db  58h ; X
.eh_frame:0000000000005927                 db  0Eh
.eh_frame:0000000000005928                 db  38h ; 8
.eh_frame:0000000000005929                 db  41h ; A
.eh_frame:000000000000592A                 db  0Eh
.eh_frame:000000000000592B                 db  30h ; 0
.eh_frame:000000000000592C                 db  41h ; A
.eh_frame:000000000000592D                 db  0Eh
.eh_frame:000000000000592E                 db  28h ; (
.eh_frame:000000000000592F                 db  42h ; B
.eh_frame:0000000000005930                 db  0Eh
.eh_frame:0000000000005931                 db  20h
.eh_frame:0000000000005932                 db  42h ; B
.eh_frame:0000000000005933                 db  0Eh
.eh_frame:0000000000005934                 db  18h
.eh_frame:0000000000005935                 db  42h ; B
.eh_frame:0000000000005936                 db  0Eh
.eh_frame:0000000000005937                 db  10h
.eh_frame:0000000000005938                 db  42h ; B
.eh_frame:0000000000005939                 db  0Eh
.eh_frame:000000000000593A                 db    8
.eh_frame:000000000000593B                 db    0
.eh_frame:000000000000593C                 db  68h ; h
.eh_frame:000000000000593D                 db    0
.eh_frame:000000000000593E                 db    0
.eh_frame:000000000000593F                 db    0
.eh_frame:0000000000005940                 db 0D0h
.eh_frame:0000000000005941                 db    3
.eh_frame:0000000000005942                 db    0
.eh_frame:0000000000005943                 db    0
.eh_frame:0000000000005944                 db 0ACh
.eh_frame:0000000000005945                 db 0DBh
.eh_frame:0000000000005946                 db 0FFh
.eh_frame:0000000000005947                 db 0FFh
.eh_frame:0000000000005948                 db 0E3h
.eh_frame:0000000000005949                 db    0
.eh_frame:000000000000594A                 db    0
.eh_frame:000000000000594B                 db    0
.eh_frame:000000000000594C                 db    0
.eh_frame:000000000000594D                 db  42h ; B
.eh_frame:000000000000594E                 db  0Eh
.eh_frame:000000000000594F                 db  10h
.eh_frame:0000000000005950                 db  8Fh
.eh_frame:0000000000005951                 db    2
.eh_frame:0000000000005952                 db  42h ; B
.eh_frame:0000000000005953                 db  0Eh
.eh_frame:0000000000005954                 db  18h
.eh_frame:0000000000005955                 db  8Eh
.eh_frame:0000000000005956                 db    3
.eh_frame:0000000000005957                 db  49h ; I
.eh_frame:0000000000005958                 db  0Eh
.eh_frame:0000000000005959                 db  20h
.eh_frame:000000000000595A                 db  8Dh
.eh_frame:000000000000595B                 db    4
.eh_frame:000000000000595C                 db  42h ; B
.eh_frame:000000000000595D                 db  0Eh
.eh_frame:000000000000595E                 db  28h ; (
.eh_frame:000000000000595F                 db  8Ch
.eh_frame:0000000000005960                 db    5
.eh_frame:0000000000005961                 db  44h ; D
.eh_frame:0000000000005962                 db  0Eh
.eh_frame:0000000000005963                 db  30h ; 0
.eh_frame:0000000000005964                 db  86h
.eh_frame:0000000000005965                 db    6
.eh_frame:0000000000005966                 db  41h ; A
.eh_frame:0000000000005967                 db  0Eh
.eh_frame:0000000000005968                 db  38h ; 8
.eh_frame:0000000000005969                 db  83h
.eh_frame:000000000000596A                 db    7
.eh_frame:000000000000596B                 db  4Dh ; M
.eh_frame:000000000000596C                 db  0Eh
.eh_frame:000000000000596D                 db  70h ; p
.eh_frame:000000000000596E                 db  65h ; e
.eh_frame:000000000000596F                 db  0Eh
.eh_frame:0000000000005970                 db  78h ; x
.eh_frame:0000000000005971                 db  4Dh ; M
.eh_frame:0000000000005972                 db  0Eh
.eh_frame:0000000000005973                 db  80h
.eh_frame:0000000000005974                 db    1
.eh_frame:0000000000005975                 db  46h ; F
.eh_frame:0000000000005976                 db  0Eh
.eh_frame:0000000000005977                 db  88h
.eh_frame:0000000000005978                 db    1
.eh_frame:0000000000005979                 db  42h ; B
.eh_frame:000000000000597A                 db  0Eh
.eh_frame:000000000000597B                 db  90h
.eh_frame:000000000000597C                 db    1
.eh_frame:000000000000597D                 db  5Eh ; ^
.eh_frame:000000000000597E                 db  0Eh
.eh_frame:000000000000597F                 db  70h ; p
.eh_frame:0000000000005980                 db  56h ; V
.eh_frame:0000000000005981                 db  0Eh
.eh_frame:0000000000005982                 db  78h ; x
.eh_frame:0000000000005983                 db  43h ; C
.eh_frame:0000000000005984                 db  0Eh
.eh_frame:0000000000005985                 db  80h
.eh_frame:0000000000005986                 db    1
.eh_frame:0000000000005987                 db  43h ; C
.eh_frame:0000000000005988                 db  0Eh
.eh_frame:0000000000005989                 db  88h
.eh_frame:000000000000598A                 db    1
.eh_frame:000000000000598B                 db  56h ; V
.eh_frame:000000000000598C                 db  0Eh
.eh_frame:000000000000598D                 db  90h
.eh_frame:000000000000598E                 db    1
.eh_frame:000000000000598F                 db  52h ; R
.eh_frame:0000000000005990                 db  0Eh
.eh_frame:0000000000005991                 db  70h ; p
.eh_frame:0000000000005992                 db  5Bh ; [
.eh_frame:0000000000005993                 db  0Eh
.eh_frame:0000000000005994                 db  38h ; 8
.eh_frame:0000000000005995                 db  41h ; A
.eh_frame:0000000000005996                 db  0Eh
.eh_frame:0000000000005997                 db  30h ; 0
.eh_frame:0000000000005998                 db  41h ; A
.eh_frame:0000000000005999                 db  0Eh
.eh_frame:000000000000599A                 db  28h ; (
.eh_frame:000000000000599B                 db  42h ; B
.eh_frame:000000000000599C                 db  0Eh
.eh_frame:000000000000599D                 db  20h
.eh_frame:000000000000599E                 db  42h ; B
.eh_frame:000000000000599F                 db  0Eh
.eh_frame:00000000000059A0                 db  18h
.eh_frame:00000000000059A1                 db  42h ; B
.eh_frame:00000000000059A2                 db  0Eh
.eh_frame:00000000000059A3                 db  10h
.eh_frame:00000000000059A4                 db  42h ; B
.eh_frame:00000000000059A5                 db  0Eh
.eh_frame:00000000000059A6                 db    8
.eh_frame:00000000000059A7                 db    0
.eh_frame:00000000000059A8                 db  10h
.eh_frame:00000000000059A9                 db    0
.eh_frame:00000000000059AA                 db    0
.eh_frame:00000000000059AB                 db    0
.eh_frame:00000000000059AC                 db  3Ch ; <
.eh_frame:00000000000059AD                 db    4
.eh_frame:00000000000059AE                 db    0
.eh_frame:00000000000059AF                 db    0
.eh_frame:00000000000059B0                 db  30h ; 0
.eh_frame:00000000000059B1                 db 0DCh
.eh_frame:00000000000059B2                 db 0FFh
.eh_frame:00000000000059B3                 db 0FFh
.eh_frame:00000000000059B4                 db  0Ah
.eh_frame:00000000000059B5                 db    0
.eh_frame:00000000000059B6                 db    0
.eh_frame:00000000000059B7                 db    0
.eh_frame:00000000000059B8                 db    0
.eh_frame:00000000000059B9                 db    0
.eh_frame:00000000000059BA                 db    0
.eh_frame:00000000000059BB                 db    0
.eh_frame:00000000000059BC                 db  28h ; (
.eh_frame:00000000000059BD                 db    0
.eh_frame:00000000000059BE                 db    0
.eh_frame:00000000000059BF                 db    0
.eh_frame:00000000000059C0                 db  50h ; P
.eh_frame:00000000000059C1                 db    4
.eh_frame:00000000000059C2                 db    0
.eh_frame:00000000000059C3                 db    0
.eh_frame:00000000000059C4                 db  2Ch ; ,
.eh_frame:00000000000059C5                 db 0DCh
.eh_frame:00000000000059C6                 db 0FFh
.eh_frame:00000000000059C7                 db 0FFh
.eh_frame:00000000000059C8                 db  93h
.eh_frame:00000000000059C9                 db    0
.eh_frame:00000000000059CA                 db    0
.eh_frame:00000000000059CB                 db    0
.eh_frame:00000000000059CC                 db    0
.eh_frame:00000000000059CD                 db  48h ; H
.eh_frame:00000000000059CE                 db  0Eh
.eh_frame:00000000000059CF                 db  10h
.eh_frame:00000000000059D0                 db  8Ch
.eh_frame:00000000000059D1                 db    2
.eh_frame:00000000000059D2                 db  48h ; H
.eh_frame:00000000000059D3                 db  0Eh
.eh_frame:00000000000059D4                 db  18h
.eh_frame:00000000000059D5                 db  86h
.eh_frame:00000000000059D6                 db    3
.eh_frame:00000000000059D7                 db  41h ; A
.eh_frame:00000000000059D8                 db  0Eh
.eh_frame:00000000000059D9                 db  20h
.eh_frame:00000000000059DA                 db  83h
.eh_frame:00000000000059DB                 db    4
.eh_frame:00000000000059DC                 db    2
.eh_frame:00000000000059DD                 db  74h ; t
.eh_frame:00000000000059DE                 db  0Eh
.eh_frame:00000000000059DF                 db  18h
.eh_frame:00000000000059E0                 db  4Bh ; K
.eh_frame:00000000000059E1                 db  0Eh
.eh_frame:00000000000059E2                 db  10h
.eh_frame:00000000000059E3                 db  42h ; B
.eh_frame:00000000000059E4                 db  0Eh
.eh_frame:00000000000059E5                 db    8
.eh_frame:00000000000059E6                 db    0
.eh_frame:00000000000059E7                 db    0
.eh_frame:00000000000059E8                 db  10h
.eh_frame:00000000000059E9                 db    0
.eh_frame:00000000000059EA                 db    0
.eh_frame:00000000000059EB                 db    0
.eh_frame:00000000000059EC                 db  7Ch ; |
.eh_frame:00000000000059ED                 db    4
.eh_frame:00000000000059EE                 db    0
.eh_frame:00000000000059EF                 db    0
.eh_frame:00000000000059F0                 db 0A0h
.eh_frame:00000000000059F1                 db 0DCh
.eh_frame:00000000000059F2                 db 0FFh
.eh_frame:00000000000059F3                 db 0FFh
.eh_frame:00000000000059F4                 db  13h
.eh_frame:00000000000059F5                 db    0
.eh_frame:00000000000059F6                 db    0
.eh_frame:00000000000059F7                 db    0
.eh_frame:00000000000059F8                 db    0
.eh_frame:00000000000059F9                 db    0
.eh_frame:00000000000059FA                 db    0
.eh_frame:00000000000059FB                 db    0
.eh_frame:00000000000059FC                 db  10h
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db  90h
.eh_frame:0000000000005A01                 db    4
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db 0ACh
.eh_frame:0000000000005A05                 db 0DCh
.eh_frame:0000000000005A06                 db 0FFh
.eh_frame:0000000000005A07                 db 0FFh
.eh_frame:0000000000005A08                 db  0Ch
.eh_frame:0000000000005A09                 db    0
.eh_frame:0000000000005A0A                 db    0
.eh_frame:0000000000005A0B                 db    0
.eh_frame:0000000000005A0C                 db    0
.eh_frame:0000000000005A0D                 db    0
.eh_frame:0000000000005A0E                 db    0
.eh_frame:0000000000005A0F                 db    0
.eh_frame:0000000000005A10                 db  10h
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db 0A4h
.eh_frame:0000000000005A15                 db    4
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db 0A8h
.eh_frame:0000000000005A19                 db 0DCh
.eh_frame:0000000000005A1A                 db 0FFh
.eh_frame:0000000000005A1B                 db 0FFh
.eh_frame:0000000000005A1C                 db  18h
.eh_frame:0000000000005A1D                 db    0
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db    0
.eh_frame:0000000000005A21                 db    0
.eh_frame:0000000000005A22                 db    0
.eh_frame:0000000000005A23                 db    0
.eh_frame:0000000000005A24                 db  10h
.eh_frame:0000000000005A25                 db    0
.eh_frame:0000000000005A26                 db    0
.eh_frame:0000000000005A27                 db    0
.eh_frame:0000000000005A28                 db 0B8h
.eh_frame:0000000000005A29                 db    4
.eh_frame:0000000000005A2A                 db    0
.eh_frame:0000000000005A2B                 db    0
.eh_frame:0000000000005A2C                 db 0B4h
.eh_frame:0000000000005A2D                 db 0DCh
.eh_frame:0000000000005A2E                 db 0FFh
.eh_frame:0000000000005A2F                 db 0FFh
.eh_frame:0000000000005A30                 db  14h
.eh_frame:0000000000005A31                 db    0
.eh_frame:0000000000005A32                 db    0
.eh_frame:0000000000005A33                 db    0
.eh_frame:0000000000005A34                 db    0
.eh_frame:0000000000005A35                 db    0
.eh_frame:0000000000005A36                 db    0
.eh_frame:0000000000005A37                 db    0
.eh_frame:0000000000005A38                 db  18h
.eh_frame:0000000000005A39                 db    0
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db 0CCh
.eh_frame:0000000000005A3D                 db    4
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db 0C0h
.eh_frame:0000000000005A41                 db 0DCh
.eh_frame:0000000000005A42                 db 0FFh
.eh_frame:0000000000005A43                 db 0FFh
.eh_frame:0000000000005A44                 db  8Eh
.eh_frame:0000000000005A45                 db    0
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db    0
.eh_frame:0000000000005A49                 db  44h ; D
.eh_frame:0000000000005A4A                 db  0Eh
.eh_frame:0000000000005A4B                 db  50h ; P
.eh_frame:0000000000005A4C                 db    2
.eh_frame:0000000000005A4D                 db  7Fh ; 
.eh_frame:0000000000005A4E                 db  0Ah
.eh_frame:0000000000005A4F                 db  0Eh
.eh_frame:0000000000005A50                 db    8
.eh_frame:0000000000005A51                 db  41h ; A
.eh_frame:0000000000005A52                 db  0Bh
.eh_frame:0000000000005A53                 db    0
.eh_frame:0000000000005A54                 db  18h
.eh_frame:0000000000005A55                 db    0
.eh_frame:0000000000005A56                 db    0
.eh_frame:0000000000005A57                 db    0
.eh_frame:0000000000005A58                 db 0E8h
.eh_frame:0000000000005A59                 db    4
.eh_frame:0000000000005A5A                 db    0
.eh_frame:0000000000005A5B                 db    0
.eh_frame:0000000000005A5C                 db  34h ; 4
.eh_frame:0000000000005A5D                 db 0DDh
.eh_frame:0000000000005A5E                 db 0FFh
.eh_frame:0000000000005A5F                 db 0FFh
.eh_frame:0000000000005A60                 db  8Ah
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db    0
.eh_frame:0000000000005A65                 db  44h ; D
.eh_frame:0000000000005A66                 db  0Eh
.eh_frame:0000000000005A67                 db  50h ; P
.eh_frame:0000000000005A68                 db    2
.eh_frame:0000000000005A69                 db  7Bh ; {
.eh_frame:0000000000005A6A                 db  0Ah
.eh_frame:0000000000005A6B                 db  0Eh
.eh_frame:0000000000005A6C                 db    8
.eh_frame:0000000000005A6D                 db  41h ; A
.eh_frame:0000000000005A6E                 db  0Bh
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db  10h
.eh_frame:0000000000005A71                 db    0
.eh_frame:0000000000005A72                 db    0
.eh_frame:0000000000005A73                 db    0
.eh_frame:0000000000005A74                 db    4
.eh_frame:0000000000005A75                 db    5
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db 0A8h
.eh_frame:0000000000005A79                 db 0DDh
.eh_frame:0000000000005A7A                 db 0FFh
.eh_frame:0000000000005A7B                 db 0FFh
.eh_frame:0000000000005A7C                 db  0Ch
.eh_frame:0000000000005A7D                 db    0
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db    0
.eh_frame:0000000000005A81                 db    0
.eh_frame:0000000000005A82                 db    0
.eh_frame:0000000000005A83                 db    0
.eh_frame:0000000000005A84                 db  10h
.eh_frame:0000000000005A85                 db    0
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db  18h
.eh_frame:0000000000005A89                 db    5
.eh_frame:0000000000005A8A                 db    0
.eh_frame:0000000000005A8B                 db    0
.eh_frame:0000000000005A8C                 db 0A4h
.eh_frame:0000000000005A8D                 db 0DDh
.eh_frame:0000000000005A8E                 db 0FFh
.eh_frame:0000000000005A8F                 db 0FFh
.eh_frame:0000000000005A90                 db  0Fh
.eh_frame:0000000000005A91                 db    0
.eh_frame:0000000000005A92                 db    0
.eh_frame:0000000000005A93                 db    0
.eh_frame:0000000000005A94                 db    0
.eh_frame:0000000000005A95                 db    0
.eh_frame:0000000000005A96                 db    0
.eh_frame:0000000000005A97                 db    0
.eh_frame:0000000000005A98                 db  18h
.eh_frame:0000000000005A99                 db    0
.eh_frame:0000000000005A9A                 db    0
.eh_frame:0000000000005A9B                 db    0
.eh_frame:0000000000005A9C                 db  2Ch ; ,
.eh_frame:0000000000005A9D                 db    5
.eh_frame:0000000000005A9E                 db    0
.eh_frame:0000000000005A9F                 db    0
.eh_frame:0000000000005AA0                 db 0A0h
.eh_frame:0000000000005AA1                 db 0DDh
.eh_frame:0000000000005AA2                 db 0FFh
.eh_frame:0000000000005AA3                 db 0FFh
.eh_frame:0000000000005AA4                 db  98h
.eh_frame:0000000000005AA5                 db    0
.eh_frame:0000000000005AA6                 db    0
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db    0
.eh_frame:0000000000005AA9                 db  44h ; D
.eh_frame:0000000000005AAA                 db  0Eh
.eh_frame:0000000000005AAB                 db  50h ; P
.eh_frame:0000000000005AAC                 db    2
.eh_frame:0000000000005AAD                 db  8Eh
.eh_frame:0000000000005AAE                 db  0Ah
.eh_frame:0000000000005AAF                 db  0Eh
.eh_frame:0000000000005AB0                 db    8
.eh_frame:0000000000005AB1                 db  41h ; A
.eh_frame:0000000000005AB2                 db  0Bh
.eh_frame:0000000000005AB3                 db    0
.eh_frame:0000000000005AB4                 db  10h
.eh_frame:0000000000005AB5                 db    0
.eh_frame:0000000000005AB6                 db    0
.eh_frame:0000000000005AB7                 db    0
.eh_frame:0000000000005AB8                 db  48h ; H
.eh_frame:0000000000005AB9                 db    5
.eh_frame:0000000000005ABA                 db    0
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db  24h ; $
.eh_frame:0000000000005ABD                 db 0DEh
.eh_frame:0000000000005ABE                 db 0FFh
.eh_frame:0000000000005ABF                 db 0FFh
.eh_frame:0000000000005AC0                 db  10h
.eh_frame:0000000000005AC1                 db    0
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db    0
.eh_frame:0000000000005AC5                 db    0
.eh_frame:0000000000005AC6                 db    0
.eh_frame:0000000000005AC7                 db    0
.eh_frame:0000000000005AC8                 db  10h
.eh_frame:0000000000005AC9                 db    0
.eh_frame:0000000000005ACA                 db    0
.eh_frame:0000000000005ACB                 db    0
.eh_frame:0000000000005ACC                 db  5Ch ; \
.eh_frame:0000000000005ACD                 db    5
.eh_frame:0000000000005ACE                 db    0
.eh_frame:0000000000005ACF                 db    0
.eh_frame:0000000000005AD0                 db  20h
.eh_frame:0000000000005AD1                 db 0DEh
.eh_frame:0000000000005AD2                 db 0FFh
.eh_frame:0000000000005AD3                 db 0FFh
.eh_frame:0000000000005AD4                 db  11h
.eh_frame:0000000000005AD5                 db    0
.eh_frame:0000000000005AD6                 db    0
.eh_frame:0000000000005AD7                 db    0
.eh_frame:0000000000005AD8                 db    0
.eh_frame:0000000000005AD9                 db    0
.eh_frame:0000000000005ADA                 db    0
.eh_frame:0000000000005ADB                 db    0
.eh_frame:0000000000005ADC                 db  10h
.eh_frame:0000000000005ADD                 db    0
.eh_frame:0000000000005ADE                 db    0
.eh_frame:0000000000005ADF                 db    0
.eh_frame:0000000000005AE0                 db  70h ; p
.eh_frame:0000000000005AE1                 db    5
.eh_frame:0000000000005AE2                 db    0
.eh_frame:0000000000005AE3                 db    0
.eh_frame:0000000000005AE4                 db  2Ch ; ,
.eh_frame:0000000000005AE5                 db 0DEh
.eh_frame:0000000000005AE6                 db 0FFh
.eh_frame:0000000000005AE7                 db 0FFh
.eh_frame:0000000000005AE8                 db  0Ah
.eh_frame:0000000000005AE9                 db    0
.eh_frame:0000000000005AEA                 db    0
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db    0
.eh_frame:0000000000005AED                 db    0
.eh_frame:0000000000005AEE                 db    0
.eh_frame:0000000000005AEF                 db    0
.eh_frame:0000000000005AF0                 db  18h
.eh_frame:0000000000005AF1                 db    0
.eh_frame:0000000000005AF2                 db    0
.eh_frame:0000000000005AF3                 db    0
.eh_frame:0000000000005AF4                 db  84h
.eh_frame:0000000000005AF5                 db    5
.eh_frame:0000000000005AF6                 db    0
.eh_frame:0000000000005AF7                 db    0
.eh_frame:0000000000005AF8                 db  28h ; (
.eh_frame:0000000000005AF9                 db 0DEh
.eh_frame:0000000000005AFA                 db 0FFh
.eh_frame:0000000000005AFB                 db 0FFh
.eh_frame:0000000000005AFC                 db  8Eh
.eh_frame:0000000000005AFD                 db    0
.eh_frame:0000000000005AFE                 db    0
.eh_frame:0000000000005AFF                 db    0
.eh_frame:0000000000005B00                 db    0
.eh_frame:0000000000005B01                 db  44h ; D
.eh_frame:0000000000005B02                 db  0Eh
.eh_frame:0000000000005B03                 db  50h ; P
.eh_frame:0000000000005B04                 db    2
.eh_frame:0000000000005B05                 db  7Fh ; 
.eh_frame:0000000000005B06                 db  0Ah
.eh_frame:0000000000005B07                 db  0Eh
.eh_frame:0000000000005B08                 db    8
.eh_frame:0000000000005B09                 db  41h ; A
.eh_frame:0000000000005B0A                 db  0Bh
.eh_frame:0000000000005B0B                 db    0
.eh_frame:0000000000005B0C                 db  18h
.eh_frame:0000000000005B0D                 db    0
.eh_frame:0000000000005B0E                 db    0
.eh_frame:0000000000005B0F                 db    0
.eh_frame:0000000000005B10                 db 0A0h
.eh_frame:0000000000005B11                 db    5
.eh_frame:0000000000005B12                 db    0
.eh_frame:0000000000005B13                 db    0
.eh_frame:0000000000005B14                 db  9Ch
.eh_frame:0000000000005B15                 db 0DEh
.eh_frame:0000000000005B16                 db 0FFh
.eh_frame:0000000000005B17                 db 0FFh
.eh_frame:0000000000005B18                 db  91h
.eh_frame:0000000000005B19                 db    0
.eh_frame:0000000000005B1A                 db    0
.eh_frame:0000000000005B1B                 db    0
.eh_frame:0000000000005B1C                 db    0
.eh_frame:0000000000005B1D                 db  44h ; D
.eh_frame:0000000000005B1E                 db  0Eh
.eh_frame:0000000000005B1F                 db  50h ; P
.eh_frame:0000000000005B20                 db    2
.eh_frame:0000000000005B21                 db  82h
.eh_frame:0000000000005B22                 db  0Ah
.eh_frame:0000000000005B23                 db  0Eh
.eh_frame:0000000000005B24                 db    8
.eh_frame:0000000000005B25                 db  41h ; A
.eh_frame:0000000000005B26                 db  0Bh
.eh_frame:0000000000005B27                 db    0
.eh_frame:0000000000005B28                 db  10h
.eh_frame:0000000000005B29                 db    0
.eh_frame:0000000000005B2A                 db    0
.eh_frame:0000000000005B2B                 db    0
.eh_frame:0000000000005B2C                 db 0BCh
.eh_frame:0000000000005B2D                 db    5
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db  20h
.eh_frame:0000000000005B31                 db 0DFh
.eh_frame:0000000000005B32                 db 0FFh
.eh_frame:0000000000005B33                 db 0FFh
.eh_frame:0000000000005B34                 db  0Ch
.eh_frame:0000000000005B35                 db    0
.eh_frame:0000000000005B36                 db    0
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db    0
.eh_frame:0000000000005B39                 db    0
.eh_frame:0000000000005B3A                 db    0
.eh_frame:0000000000005B3B                 db    0
.eh_frame:0000000000005B3C                 db  10h
.eh_frame:0000000000005B3D                 db    0
.eh_frame:0000000000005B3E                 db    0
.eh_frame:0000000000005B3F                 db    0
.eh_frame:0000000000005B40                 db 0D0h
.eh_frame:0000000000005B41                 db    5
.eh_frame:0000000000005B42                 db    0
.eh_frame:0000000000005B43                 db    0
.eh_frame:0000000000005B44                 db  1Ch
.eh_frame:0000000000005B45                 db 0DFh
.eh_frame:0000000000005B46                 db 0FFh
.eh_frame:0000000000005B47                 db 0FFh
.eh_frame:0000000000005B48                 db  17h
.eh_frame:0000000000005B49                 db    0
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db    0
.eh_frame:0000000000005B4D                 db    0
.eh_frame:0000000000005B4E                 db    0
.eh_frame:0000000000005B4F                 db    0
.eh_frame:0000000000005B50                 db  10h
.eh_frame:0000000000005B51                 db    0
.eh_frame:0000000000005B52                 db    0
.eh_frame:0000000000005B53                 db    0
.eh_frame:0000000000005B54                 db 0E4h
.eh_frame:0000000000005B55                 db    5
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db  28h ; (
.eh_frame:0000000000005B59                 db 0DFh
.eh_frame:0000000000005B5A                 db 0FFh
.eh_frame:0000000000005B5B                 db 0FFh
.eh_frame:0000000000005B5C                 db  13h
.eh_frame:0000000000005B5D                 db    0
.eh_frame:0000000000005B5E                 db    0
.eh_frame:0000000000005B5F                 db    0
.eh_frame:0000000000005B60                 db    0
.eh_frame:0000000000005B61                 db    0
.eh_frame:0000000000005B62                 db    0
.eh_frame:0000000000005B63                 db    0
.eh_frame:0000000000005B64                 db  10h
.eh_frame:0000000000005B65                 db    0
.eh_frame:0000000000005B66                 db    0
.eh_frame:0000000000005B67                 db    0
.eh_frame:0000000000005B68                 db 0F8h
.eh_frame:0000000000005B69                 db    5
.eh_frame:0000000000005B6A                 db    0
.eh_frame:0000000000005B6B                 db    0
.eh_frame:0000000000005B6C                 db  34h ; 4
.eh_frame:0000000000005B6D                 db 0DFh
.eh_frame:0000000000005B6E                 db 0FFh
.eh_frame:0000000000005B6F                 db 0FFh
.eh_frame:0000000000005B70                 db  0Ch
.eh_frame:0000000000005B71                 db    0
.eh_frame:0000000000005B72                 db    0
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db    0
.eh_frame:0000000000005B75                 db    0
.eh_frame:0000000000005B76                 db    0
.eh_frame:0000000000005B77                 db    0
.eh_frame:0000000000005B78                 db  10h
.eh_frame:0000000000005B79                 db    0
.eh_frame:0000000000005B7A                 db    0
.eh_frame:0000000000005B7B                 db    0
.eh_frame:0000000000005B7C                 db  0Ch
.eh_frame:0000000000005B7D                 db    6
.eh_frame:0000000000005B7E                 db    0
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db  30h ; 0
.eh_frame:0000000000005B81                 db 0DFh
.eh_frame:0000000000005B82                 db 0FFh
.eh_frame:0000000000005B83                 db 0FFh
.eh_frame:0000000000005B84                 db  14h
.eh_frame:0000000000005B85                 db    0
.eh_frame:0000000000005B86                 db    0
.eh_frame:0000000000005B87                 db    0
.eh_frame:0000000000005B88                 db    0
.eh_frame:0000000000005B89                 db    0
.eh_frame:0000000000005B8A                 db    0
.eh_frame:0000000000005B8B                 db    0
.eh_frame:0000000000005B8C                 db  10h
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db  20h
.eh_frame:0000000000005B91                 db    6
.eh_frame:0000000000005B92                 db    0
.eh_frame:0000000000005B93                 db    0
.eh_frame:0000000000005B94                 db  3Ch ; <
.eh_frame:0000000000005B95                 db 0DFh
.eh_frame:0000000000005B96                 db 0FFh
.eh_frame:0000000000005B97                 db 0FFh
.eh_frame:0000000000005B98                 db  13h
.eh_frame:0000000000005B99                 db    0
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db    0
.eh_frame:0000000000005B9D                 db    0
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db  14h
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db  34h ; 4
.eh_frame:0000000000005BA5                 db    6
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db  48h ; H
.eh_frame:0000000000005BA9                 db 0DFh
.eh_frame:0000000000005BAA                 db 0FFh
.eh_frame:0000000000005BAB                 db 0FFh
.eh_frame:0000000000005BAC                 db  18h
.eh_frame:0000000000005BAD                 db    0
.eh_frame:0000000000005BAE                 db    0
.eh_frame:0000000000005BAF                 db    0
.eh_frame:0000000000005BB0                 db    0
.eh_frame:0000000000005BB1                 db    0
.eh_frame:0000000000005BB2                 db    0
.eh_frame:0000000000005BB3                 db    0
.eh_frame:0000000000005BB4                 db    0
.eh_frame:0000000000005BB5                 db    0
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db  10h
.eh_frame:0000000000005BB9                 db    1
.eh_frame:0000000000005BBA                 db    0
.eh_frame:0000000000005BBB                 db    0
.eh_frame:0000000000005BBC                 db  4Ch ; L
.eh_frame:0000000000005BBD                 db    6
.eh_frame:0000000000005BBE                 db    0
.eh_frame:0000000000005BBF                 db    0
.eh_frame:0000000000005BC0                 db  50h ; P
.eh_frame:0000000000005BC1                 db 0DFh
.eh_frame:0000000000005BC2                 db 0FFh
.eh_frame:0000000000005BC3                 db 0FFh
.eh_frame:0000000000005BC4                 db  17h
.eh_frame:0000000000005BC5                 db    4
.eh_frame:0000000000005BC6                 db    0
.eh_frame:0000000000005BC7                 db    0
.eh_frame:0000000000005BC8                 db    0
.eh_frame:0000000000005BC9                 db  42h ; B
.eh_frame:0000000000005BCA                 db  0Eh
.eh_frame:0000000000005BCB                 db  10h
.eh_frame:0000000000005BCC                 db  8Fh
.eh_frame:0000000000005BCD                 db    2
.eh_frame:0000000000005BCE                 db  42h ; B
.eh_frame:0000000000005BCF                 db  0Eh
.eh_frame:0000000000005BD0                 db  18h
.eh_frame:0000000000005BD1                 db  8Eh
.eh_frame:0000000000005BD2                 db    3
.eh_frame:0000000000005BD3                 db  42h ; B
.eh_frame:0000000000005BD4                 db  0Eh
.eh_frame:0000000000005BD5                 db  20h
.eh_frame:0000000000005BD6                 db  8Dh
.eh_frame:0000000000005BD7                 db    4
.eh_frame:0000000000005BD8                 db  42h ; B
.eh_frame:0000000000005BD9                 db  0Eh
.eh_frame:0000000000005BDA                 db  28h ; (
.eh_frame:0000000000005BDB                 db  8Ch
.eh_frame:0000000000005BDC                 db    5
.eh_frame:0000000000005BDD                 db  44h ; D
.eh_frame:0000000000005BDE                 db  0Eh
.eh_frame:0000000000005BDF                 db  30h ; 0
.eh_frame:0000000000005BE0                 db  86h
.eh_frame:0000000000005BE1                 db    6
.eh_frame:0000000000005BE2                 db  41h ; A
.eh_frame:0000000000005BE3                 db  0Eh
.eh_frame:0000000000005BE4                 db  38h ; 8
.eh_frame:0000000000005BE5                 db  83h
.eh_frame:0000000000005BE6                 db    7
.eh_frame:0000000000005BE7                 db  4Ah ; J
.eh_frame:0000000000005BE8                 db  0Eh
.eh_frame:0000000000005BE9                 db  60h ; `
.eh_frame:0000000000005BEA                 db    2
.eh_frame:0000000000005BEB                 db 0DDh
.eh_frame:0000000000005BEC                 db  0Eh
.eh_frame:0000000000005BED                 db  68h ; h
.eh_frame:0000000000005BEE                 db  57h ; W
.eh_frame:0000000000005BEF                 db  0Eh
.eh_frame:0000000000005BF0                 db  70h ; p
.eh_frame:0000000000005BF1                 db  42h ; B
.eh_frame:0000000000005BF2                 db  0Eh
.eh_frame:0000000000005BF3                 db  78h ; x
.eh_frame:0000000000005BF4                 db  42h ; B
.eh_frame:0000000000005BF5                 db  0Eh
.eh_frame:0000000000005BF6                 db  80h
.eh_frame:0000000000005BF7                 db    1
.eh_frame:0000000000005BF8                 db  42h ; B
.eh_frame:0000000000005BF9                 db  0Eh
.eh_frame:0000000000005BFA                 db  88h
.eh_frame:0000000000005BFB                 db    1
.eh_frame:0000000000005BFC                 db  42h ; B
.eh_frame:0000000000005BFD                 db  0Eh
.eh_frame:0000000000005BFE                 db  90h
.eh_frame:0000000000005BFF                 db    1
.eh_frame:0000000000005C00                 db  53h ; S
.eh_frame:0000000000005C01                 db  0Eh
.eh_frame:0000000000005C02                 db  60h ; `
.eh_frame:0000000000005C03                 db  44h ; D
.eh_frame:0000000000005C04                 db  0Ah
.eh_frame:0000000000005C05                 db  0Eh
.eh_frame:0000000000005C06                 db  38h ; 8
.eh_frame:0000000000005C07                 db  41h ; A
.eh_frame:0000000000005C08                 db  0Eh
.eh_frame:0000000000005C09                 db  30h ; 0
.eh_frame:0000000000005C0A                 db  41h ; A
.eh_frame:0000000000005C0B                 db  0Eh
.eh_frame:0000000000005C0C                 db  28h ; (
.eh_frame:0000000000005C0D                 db  42h ; B
.eh_frame:0000000000005C0E                 db  0Eh
.eh_frame:0000000000005C0F                 db  20h
.eh_frame:0000000000005C10                 db  42h ; B
.eh_frame:0000000000005C11                 db  0Eh
.eh_frame:0000000000005C12                 db  18h
.eh_frame:0000000000005C13                 db  42h ; B
.eh_frame:0000000000005C14                 db  0Eh
.eh_frame:0000000000005C15                 db  10h
.eh_frame:0000000000005C16                 db  42h ; B
.eh_frame:0000000000005C17                 db  0Eh
.eh_frame:0000000000005C18                 db    8
.eh_frame:0000000000005C19                 db  44h ; D
.eh_frame:0000000000005C1A                 db  0Bh
.eh_frame:0000000000005C1B                 db    2
.eh_frame:0000000000005C1C                 db  78h ; x
.eh_frame:0000000000005C1D                 db  0Ah
.eh_frame:0000000000005C1E                 db  0Eh
.eh_frame:0000000000005C1F                 db  68h ; h
.eh_frame:0000000000005C20                 db  48h ; H
.eh_frame:0000000000005C21                 db  0Bh
.eh_frame:0000000000005C22                 db  5Ah ; Z
.eh_frame:0000000000005C23                 db  0Ah
.eh_frame:0000000000005C24                 db  0Eh
.eh_frame:0000000000005C25                 db  38h ; 8
.eh_frame:0000000000005C26                 db  47h ; G
.eh_frame:0000000000005C27                 db  0Eh
.eh_frame:0000000000005C28                 db  30h ; 0
.eh_frame:0000000000005C29                 db  41h ; A
.eh_frame:0000000000005C2A                 db  0Eh
.eh_frame:0000000000005C2B                 db  28h ; (
.eh_frame:0000000000005C2C                 db  42h ; B
.eh_frame:0000000000005C2D                 db  0Eh
.eh_frame:0000000000005C2E                 db  20h
.eh_frame:0000000000005C2F                 db  42h ; B
.eh_frame:0000000000005C30                 db  0Eh
.eh_frame:0000000000005C31                 db  18h
.eh_frame:0000000000005C32                 db  42h ; B
.eh_frame:0000000000005C33                 db  0Eh
.eh_frame:0000000000005C34                 db  10h
.eh_frame:0000000000005C35                 db  42h ; B
.eh_frame:0000000000005C36                 db  0Eh
.eh_frame:0000000000005C37                 db    8
.eh_frame:0000000000005C38                 db  56h ; V
.eh_frame:0000000000005C39                 db  0Bh
.eh_frame:0000000000005C3A                 db  5Eh ; ^
.eh_frame:0000000000005C3B                 db  0Ah
.eh_frame:0000000000005C3C                 db  0Eh
.eh_frame:0000000000005C3D                 db  38h ; 8
.eh_frame:0000000000005C3E                 db  52h ; R
.eh_frame:0000000000005C3F                 db  0Eh
.eh_frame:0000000000005C40                 db  30h ; 0
.eh_frame:0000000000005C41                 db  41h ; A
.eh_frame:0000000000005C42                 db  0Eh
.eh_frame:0000000000005C43                 db  28h ; (
.eh_frame:0000000000005C44                 db  42h ; B
.eh_frame:0000000000005C45                 db  0Eh
.eh_frame:0000000000005C46                 db  20h
.eh_frame:0000000000005C47                 db  42h ; B
.eh_frame:0000000000005C48                 db  0Eh
.eh_frame:0000000000005C49                 db  18h
.eh_frame:0000000000005C4A                 db  42h ; B
.eh_frame:0000000000005C4B                 db  0Eh
.eh_frame:0000000000005C4C                 db  10h
.eh_frame:0000000000005C4D                 db  42h ; B
.eh_frame:0000000000005C4E                 db  0Eh
.eh_frame:0000000000005C4F                 db    8
.eh_frame:0000000000005C50                 db  4Fh ; O
.eh_frame:0000000000005C51                 db  0Bh
.eh_frame:0000000000005C52                 db  62h ; b
.eh_frame:0000000000005C53                 db  0Ah
.eh_frame:0000000000005C54                 db  0Eh
.eh_frame:0000000000005C55                 db  38h ; 8
.eh_frame:0000000000005C56                 db  50h ; P
.eh_frame:0000000000005C57                 db  0Eh
.eh_frame:0000000000005C58                 db  30h ; 0
.eh_frame:0000000000005C59                 db  41h ; A
.eh_frame:0000000000005C5A                 db  0Eh
.eh_frame:0000000000005C5B                 db  28h ; (
.eh_frame:0000000000005C5C                 db  42h ; B
.eh_frame:0000000000005C5D                 db  0Eh
.eh_frame:0000000000005C5E                 db  20h
.eh_frame:0000000000005C5F                 db  42h ; B
.eh_frame:0000000000005C60                 db  0Eh
.eh_frame:0000000000005C61                 db  18h
.eh_frame:0000000000005C62                 db  42h ; B
.eh_frame:0000000000005C63                 db  0Eh
.eh_frame:0000000000005C64                 db  10h
.eh_frame:0000000000005C65                 db  42h ; B
.eh_frame:0000000000005C66                 db  0Eh
.eh_frame:0000000000005C67                 db    8
.eh_frame:0000000000005C68                 db  55h ; U
.eh_frame:0000000000005C69                 db  0Bh
.eh_frame:0000000000005C6A                 db  66h ; f
.eh_frame:0000000000005C6B                 db  0Eh
.eh_frame:0000000000005C6C                 db  68h ; h
.eh_frame:0000000000005C6D                 db  42h ; B
.eh_frame:0000000000005C6E                 db  0Eh
.eh_frame:0000000000005C6F                 db  70h ; p
.eh_frame:0000000000005C70                 db  5Ch ; \
.eh_frame:0000000000005C71                 db  0Eh
.eh_frame:0000000000005C72                 db  68h ; h
.eh_frame:0000000000005C73                 db  41h ; A
.eh_frame:0000000000005C74                 db  0Eh
.eh_frame:0000000000005C75                 db  60h ; `
.eh_frame:0000000000005C76                 db  44h ; D
.eh_frame:0000000000005C77                 db  0Ah
.eh_frame:0000000000005C78                 db  0Eh
.eh_frame:0000000000005C79                 db  38h ; 8
.eh_frame:0000000000005C7A                 db  41h ; A
.eh_frame:0000000000005C7B                 db  0Eh
.eh_frame:0000000000005C7C                 db  30h ; 0
.eh_frame:0000000000005C7D                 db  41h ; A
.eh_frame:0000000000005C7E                 db  0Eh
.eh_frame:0000000000005C7F                 db  28h ; (
.eh_frame:0000000000005C80                 db  42h ; B
.eh_frame:0000000000005C81                 db  0Eh
.eh_frame:0000000000005C82                 db  20h
.eh_frame:0000000000005C83                 db  42h ; B
.eh_frame:0000000000005C84                 db  0Eh
.eh_frame:0000000000005C85                 db  18h
.eh_frame:0000000000005C86                 db  42h ; B
.eh_frame:0000000000005C87                 db  0Eh
.eh_frame:0000000000005C88                 db  10h
.eh_frame:0000000000005C89                 db  42h ; B
.eh_frame:0000000000005C8A                 db  0Eh
.eh_frame:0000000000005C8B                 db    8
.eh_frame:0000000000005C8C                 db  45h ; E
.eh_frame:0000000000005C8D                 db  0Bh
.eh_frame:0000000000005C8E                 db  68h ; h
.eh_frame:0000000000005C8F                 db  0Ah
.eh_frame:0000000000005C90                 db  0Eh
.eh_frame:0000000000005C91                 db  68h ; h
.eh_frame:0000000000005C92                 db  48h ; H
.eh_frame:0000000000005C93                 db  0Bh
.eh_frame:0000000000005C94                 db  72h ; r
.eh_frame:0000000000005C95                 db  0Eh
.eh_frame:0000000000005C96                 db  68h ; h
.eh_frame:0000000000005C97                 db  45h ; E
.eh_frame:0000000000005C98                 db  0Eh
.eh_frame:0000000000005C99                 db  70h ; p
.eh_frame:0000000000005C9A                 db  42h ; B
.eh_frame:0000000000005C9B                 db  0Eh
.eh_frame:0000000000005C9C                 db  78h ; x
.eh_frame:0000000000005C9D                 db  42h ; B
.eh_frame:0000000000005C9E                 db  0Eh
.eh_frame:0000000000005C9F                 db  80h
.eh_frame:0000000000005CA0                 db    1
.eh_frame:0000000000005CA1                 db  5Eh ; ^
.eh_frame:0000000000005CA2                 db  0Eh
.eh_frame:0000000000005CA3                 db  60h ; `
.eh_frame:0000000000005CA4                 db  44h ; D
.eh_frame:0000000000005CA5                 db  0Ah
.eh_frame:0000000000005CA6                 db  0Eh
.eh_frame:0000000000005CA7                 db  38h ; 8
.eh_frame:0000000000005CA8                 db  41h ; A
.eh_frame:0000000000005CA9                 db  0Eh
.eh_frame:0000000000005CAA                 db  30h ; 0
.eh_frame:0000000000005CAB                 db  41h ; A
.eh_frame:0000000000005CAC                 db  0Eh
.eh_frame:0000000000005CAD                 db  28h ; (
.eh_frame:0000000000005CAE                 db  42h ; B
.eh_frame:0000000000005CAF                 db  0Eh
.eh_frame:0000000000005CB0                 db  20h
.eh_frame:0000000000005CB1                 db  42h ; B
.eh_frame:0000000000005CB2                 db  0Eh
.eh_frame:0000000000005CB3                 db  18h
.eh_frame:0000000000005CB4                 db  42h ; B
.eh_frame:0000000000005CB5                 db  0Eh
.eh_frame:0000000000005CB6                 db  10h
.eh_frame:0000000000005CB7                 db  42h ; B
.eh_frame:0000000000005CB8                 db  0Eh
.eh_frame:0000000000005CB9                 db    8
.eh_frame:0000000000005CBA                 db  41h ; A
.eh_frame:0000000000005CBB                 db  0Bh
.eh_frame:0000000000005CBC                 db  79h ; y
.eh_frame:0000000000005CBD                 db  0Ah
.eh_frame:0000000000005CBE                 db  0Eh
.eh_frame:0000000000005CBF                 db  68h ; h
.eh_frame:0000000000005CC0                 db  42h ; B
.eh_frame:0000000000005CC1                 db  0Eh
.eh_frame:0000000000005CC2                 db  70h ; p
.eh_frame:0000000000005CC3                 db  42h ; B
.eh_frame:0000000000005CC4                 db  0Eh
.eh_frame:0000000000005CC5                 db  78h ; x
.eh_frame:0000000000005CC6                 db  42h ; B
.eh_frame:0000000000005CC7                 db  0Eh
.eh_frame:0000000000005CC8                 db  80h
.eh_frame:0000000000005CC9                 db    1
.eh_frame:0000000000005CCA                 db  51h ; Q
.eh_frame:0000000000005CCB                 db  0Bh
.eh_frame:0000000000005CCC                 db  10h
.eh_frame:0000000000005CCD                 db    0
.eh_frame:0000000000005CCE                 db    0
.eh_frame:0000000000005CCF                 db    0
.eh_frame:0000000000005CD0                 db  60h ; `
.eh_frame:0000000000005CD1                 db    7
.eh_frame:0000000000005CD2                 db    0
.eh_frame:0000000000005CD3                 db    0
.eh_frame:0000000000005CD4                 db  5Ch ; \
.eh_frame:0000000000005CD5                 db 0E2h
.eh_frame:0000000000005CD6                 db 0FFh
.eh_frame:0000000000005CD7                 db 0FFh
.eh_frame:0000000000005CD8                 db  20h
.eh_frame:0000000000005CD9                 db    0
.eh_frame:0000000000005CDA                 db    0
.eh_frame:0000000000005CDB                 db    0
.eh_frame:0000000000005CDC                 db    0
.eh_frame:0000000000005CDD                 db    0
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db  18h
.eh_frame:0000000000005CE1                 db    0
.eh_frame:0000000000005CE2                 db    0
.eh_frame:0000000000005CE3                 db    0
.eh_frame:0000000000005CE4                 db  74h ; t
.eh_frame:0000000000005CE5                 db    7
.eh_frame:0000000000005CE6                 db    0
.eh_frame:0000000000005CE7                 db    0
.eh_frame:0000000000005CE8                 db  68h ; h
.eh_frame:0000000000005CE9                 db 0E2h
.eh_frame:0000000000005CEA                 db 0FFh
.eh_frame:0000000000005CEB                 db 0FFh
.eh_frame:0000000000005CEC                 db  78h ; x
.eh_frame:0000000000005CED                 db    0
.eh_frame:0000000000005CEE                 db    0
.eh_frame:0000000000005CEF                 db    0
.eh_frame:0000000000005CF0                 db    0
.eh_frame:0000000000005CF1                 db  44h ; D
.eh_frame:0000000000005CF2                 db  0Eh
.eh_frame:0000000000005CF3                 db  70h ; p
.eh_frame:0000000000005CF4                 db    2
.eh_frame:0000000000005CF5                 db  60h ; `
.eh_frame:0000000000005CF6                 db  0Ah
.eh_frame:0000000000005CF7                 db  0Eh
.eh_frame:0000000000005CF8                 db    8
.eh_frame:0000000000005CF9                 db  41h ; A
.eh_frame:0000000000005CFA                 db  0Bh
.eh_frame:0000000000005CFB                 db    0
.eh_frame:0000000000005CFC                 db  28h ; (
.eh_frame:0000000000005CFD                 db    0
.eh_frame:0000000000005CFE                 db    0
.eh_frame:0000000000005CFF                 db    0
.eh_frame:0000000000005D00                 db  90h
.eh_frame:0000000000005D01                 db    7
.eh_frame:0000000000005D02                 db    0
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db 0CCh
.eh_frame:0000000000005D05                 db 0E2h
.eh_frame:0000000000005D06                 db 0FFh
.eh_frame:0000000000005D07                 db 0FFh
.eh_frame:0000000000005D08                 db 0D5h
.eh_frame:0000000000005D09                 db    0
.eh_frame:0000000000005D0A                 db    0
.eh_frame:0000000000005D0B                 db    0
.eh_frame:0000000000005D0C                 db    0
.eh_frame:0000000000005D0D                 db  41h ; A
.eh_frame:0000000000005D0E                 db  0Eh
.eh_frame:0000000000005D0F                 db  10h
.eh_frame:0000000000005D10                 db  86h
.eh_frame:0000000000005D11                 db    2
.eh_frame:0000000000005D12                 db  41h ; A
.eh_frame:0000000000005D13                 db  0Eh
.eh_frame:0000000000005D14                 db  18h
.eh_frame:0000000000005D15                 db  83h
.eh_frame:0000000000005D16                 db    3
.eh_frame:0000000000005D17                 db  50h ; P
.eh_frame:0000000000005D18                 db  0Eh
.eh_frame:0000000000005D19                 db 0D0h
.eh_frame:0000000000005D1A                 db    1
.eh_frame:0000000000005D1B                 db    2
.eh_frame:0000000000005D1C                 db 0ABh
.eh_frame:0000000000005D1D                 db  0Ah
.eh_frame:0000000000005D1E                 db  0Eh
.eh_frame:0000000000005D1F                 db  18h
.eh_frame:0000000000005D20                 db  41h ; A
.eh_frame:0000000000005D21                 db  0Eh
.eh_frame:0000000000005D22                 db  10h
.eh_frame:0000000000005D23                 db  41h ; A
.eh_frame:0000000000005D24                 db  0Eh
.eh_frame:0000000000005D25                 db    8
.eh_frame:0000000000005D26                 db  41h ; A
.eh_frame:0000000000005D27                 db  0Bh
.eh_frame:0000000000005D28                 db  1Ch
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db 0BCh
.eh_frame:0000000000005D2D                 db    7
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  80h
.eh_frame:0000000000005D31                 db 0E3h
.eh_frame:0000000000005D32                 db 0FFh
.eh_frame:0000000000005D33                 db 0FFh
.eh_frame:0000000000005D34                 db  80h
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db    0
.eh_frame:0000000000005D39                 db  41h ; A
.eh_frame:0000000000005D3A                 db  0Eh
.eh_frame:0000000000005D3B                 db  10h
.eh_frame:0000000000005D3C                 db  83h
.eh_frame:0000000000005D3D                 db    2
.eh_frame:0000000000005D3E                 db    2
.eh_frame:0000000000005D3F                 db  7Ah ; z
.eh_frame:0000000000005D40                 db  0Eh
.eh_frame:0000000000005D41                 db    8
.eh_frame:0000000000005D42                 db    0
.eh_frame:0000000000005D43                 db    0
.eh_frame:0000000000005D44                 db    0
.eh_frame:0000000000005D45                 db    0
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db  18h
.eh_frame:0000000000005D49                 db    0
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db 0DCh
.eh_frame:0000000000005D4D                 db    7
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db 0E0h
.eh_frame:0000000000005D51                 db 0E3h
.eh_frame:0000000000005D52                 db 0FFh
.eh_frame:0000000000005D53                 db 0FFh
.eh_frame:0000000000005D54                 db  1Ah
.eh_frame:0000000000005D55                 db    0
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db    0
.eh_frame:0000000000005D59                 db  41h ; A
.eh_frame:0000000000005D5A                 db  0Eh
.eh_frame:0000000000005D5B                 db  10h
.eh_frame:0000000000005D5C                 db  83h
.eh_frame:0000000000005D5D                 db    2
.eh_frame:0000000000005D5E                 db  53h ; S
.eh_frame:0000000000005D5F                 db  0Ah
.eh_frame:0000000000005D60                 db  0Eh
.eh_frame:0000000000005D61                 db    8
.eh_frame:0000000000005D62                 db  41h ; A
.eh_frame:0000000000005D63                 db  0Bh
.eh_frame:0000000000005D64                 db  10h
.eh_frame:0000000000005D65                 db    0
.eh_frame:0000000000005D66                 db    0
.eh_frame:0000000000005D67                 db    0
.eh_frame:0000000000005D68                 db 0F8h
.eh_frame:0000000000005D69                 db    7
.eh_frame:0000000000005D6A                 db    0
.eh_frame:0000000000005D6B                 db    0
.eh_frame:0000000000005D6C                 db 0E4h
.eh_frame:0000000000005D6D                 db 0E3h
.eh_frame:0000000000005D6E                 db 0FFh
.eh_frame:0000000000005D6F                 db 0FFh
.eh_frame:0000000000005D70                 db  24h ; $
.eh_frame:0000000000005D71                 db    0
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db    0
.eh_frame:0000000000005D75                 db  5Fh ; _
.eh_frame:0000000000005D76                 db  0Eh
.eh_frame:0000000000005D77                 db  10h
.eh_frame:0000000000005D78                 db  10h
.eh_frame:0000000000005D79                 db    0
.eh_frame:0000000000005D7A                 db    0
.eh_frame:0000000000005D7B                 db    0
.eh_frame:0000000000005D7C                 db  0Ch
.eh_frame:0000000000005D7D                 db    8
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db    0
.eh_frame:0000000000005D81                 db 0E4h
.eh_frame:0000000000005D82                 db 0FFh
.eh_frame:0000000000005D83                 db 0FFh
.eh_frame:0000000000005D84                 db    2
.eh_frame:0000000000005D85                 db    0
.eh_frame:0000000000005D86                 db    0
.eh_frame:0000000000005D87                 db    0
.eh_frame:0000000000005D88                 db    0
.eh_frame:0000000000005D89                 db    0
.eh_frame:0000000000005D8A                 db    0
.eh_frame:0000000000005D8B                 db    0
.eh_frame:0000000000005D8C                 db  20h
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db  20h
.eh_frame:0000000000005D91                 db    8
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db 0FCh
.eh_frame:0000000000005D95                 db 0E3h
.eh_frame:0000000000005D96                 db 0FFh
.eh_frame:0000000000005D97                 db 0FFh
.eh_frame:0000000000005D98                 db  36h ; 6
.eh_frame:0000000000005D99                 db    0
.eh_frame:0000000000005D9A                 db    0
.eh_frame:0000000000005D9B                 db    0
.eh_frame:0000000000005D9C                 db    0
.eh_frame:0000000000005D9D                 db  44h ; D
.eh_frame:0000000000005D9E                 db  0Eh
.eh_frame:0000000000005D9F                 db  10h
.eh_frame:0000000000005DA0                 db  83h
.eh_frame:0000000000005DA1                 db    2
.eh_frame:0000000000005DA2                 db  5Dh ; ]
.eh_frame:0000000000005DA3                 db  0Ah
.eh_frame:0000000000005DA4                 db  0Eh
.eh_frame:0000000000005DA5                 db    8
.eh_frame:0000000000005DA6                 db  47h ; G
.eh_frame:0000000000005DA7                 db  0Bh
.eh_frame:0000000000005DA8                 db  48h ; H
.eh_frame:0000000000005DA9                 db  0Ah
.eh_frame:0000000000005DAA                 db  0Eh
.eh_frame:0000000000005DAB                 db    8
.eh_frame:0000000000005DAC                 db  41h ; A
.eh_frame:0000000000005DAD                 db  0Bh
.eh_frame:0000000000005DAE                 db    0
.eh_frame:0000000000005DAF                 db    0
.eh_frame:0000000000005DB0                 db  10h
.eh_frame:0000000000005DB1                 db    0
.eh_frame:0000000000005DB2                 db    0
.eh_frame:0000000000005DB3                 db    0
.eh_frame:0000000000005DB4                 db  44h ; D
.eh_frame:0000000000005DB5                 db    8
.eh_frame:0000000000005DB6                 db    0
.eh_frame:0000000000005DB7                 db    0
.eh_frame:0000000000005DB8                 db  18h
.eh_frame:0000000000005DB9                 db 0E4h
.eh_frame:0000000000005DBA                 db 0FFh
.eh_frame:0000000000005DBB                 db 0FFh
.eh_frame:0000000000005DBC                 db  24h ; $
.eh_frame:0000000000005DBD                 db    0
.eh_frame:0000000000005DBE                 db    0
.eh_frame:0000000000005DBF                 db    0
.eh_frame:0000000000005DC0                 db    0
.eh_frame:0000000000005DC1                 db  5Fh ; _
.eh_frame:0000000000005DC2                 db  0Eh
.eh_frame:0000000000005DC3                 db  10h
.eh_frame:0000000000005DC4                 db  14h
.eh_frame:0000000000005DC5                 db    0
.eh_frame:0000000000005DC6                 db    0
.eh_frame:0000000000005DC7                 db    0
.eh_frame:0000000000005DC8                 db  58h ; X
.eh_frame:0000000000005DC9                 db    8
.eh_frame:0000000000005DCA                 db    0
.eh_frame:0000000000005DCB                 db    0
.eh_frame:0000000000005DCC                 db  34h ; 4
.eh_frame:0000000000005DCD                 db 0E4h
.eh_frame:0000000000005DCE                 db 0FFh
.eh_frame:0000000000005DCF                 db 0FFh
.eh_frame:0000000000005DD0                 db  82h
.eh_frame:0000000000005DD1                 db    0
.eh_frame:0000000000005DD2                 db    0
.eh_frame:0000000000005DD3                 db    0
.eh_frame:0000000000005DD4                 db    0
.eh_frame:0000000000005DD5                 db    2
.eh_frame:0000000000005DD6                 db  5Fh ; _
.eh_frame:0000000000005DD7                 db  0Eh
.eh_frame:0000000000005DD8                 db  10h
.eh_frame:0000000000005DD9                 db  49h ; I
.eh_frame:0000000000005DDA                 db  0Eh
.eh_frame:0000000000005DDB                 db    8
.eh_frame:0000000000005DDC                 db  14h
.eh_frame:0000000000005DDD                 db    0
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db  70h ; p
.eh_frame:0000000000005DE1                 db    8
.eh_frame:0000000000005DE2                 db    0
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db 0ACh
.eh_frame:0000000000005DE5                 db 0E4h
.eh_frame:0000000000005DE6                 db 0FFh
.eh_frame:0000000000005DE7                 db 0FFh
.eh_frame:0000000000005DE8                 db  4Ah ; J
.eh_frame:0000000000005DE9                 db    0
.eh_frame:0000000000005DEA                 db    0
.eh_frame:0000000000005DEB                 db    0
.eh_frame:0000000000005DEC                 db    0
.eh_frame:0000000000005DED                 db    2
.eh_frame:0000000000005DEE                 db  45h ; E
.eh_frame:0000000000005DEF                 db  0Eh
.eh_frame:0000000000005DF0                 db  10h
.eh_frame:0000000000005DF1                 db    0
.eh_frame:0000000000005DF2                 db    0
.eh_frame:0000000000005DF3                 db    0
.eh_frame:0000000000005DF4                 db  18h
.eh_frame:0000000000005DF5                 db    0
.eh_frame:0000000000005DF6                 db    0
.eh_frame:0000000000005DF7                 db    0
.eh_frame:0000000000005DF8                 db  88h
.eh_frame:0000000000005DF9                 db    8
.eh_frame:0000000000005DFA                 db    0
.eh_frame:0000000000005DFB                 db    0
.eh_frame:0000000000005DFC                 db 0E4h
.eh_frame:0000000000005DFD                 db 0E4h
.eh_frame:0000000000005DFE                 db 0FFh
.eh_frame:0000000000005DFF                 db 0FFh
.eh_frame:0000000000005E00                 db  17h
.eh_frame:0000000000005E01                 db    0
.eh_frame:0000000000005E02                 db    0
.eh_frame:0000000000005E03                 db    0
.eh_frame:0000000000005E04                 db    0
.eh_frame:0000000000005E05                 db  41h ; A
.eh_frame:0000000000005E06                 db  0Eh
.eh_frame:0000000000005E07                 db  10h
.eh_frame:0000000000005E08                 db  83h
.eh_frame:0000000000005E09                 db    2
.eh_frame:0000000000005E0A                 db  51h ; Q
.eh_frame:0000000000005E0B                 db  0Eh
.eh_frame:0000000000005E0C                 db    8
.eh_frame:0000000000005E0D                 db    0
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db  18h
.eh_frame:0000000000005E11                 db    0
.eh_frame:0000000000005E12                 db    0
.eh_frame:0000000000005E13                 db    0
.eh_frame:0000000000005E14                 db 0A4h
.eh_frame:0000000000005E15                 db    8
.eh_frame:0000000000005E16                 db    0
.eh_frame:0000000000005E17                 db    0
.eh_frame:0000000000005E18                 db 0E8h
.eh_frame:0000000000005E19                 db 0E4h
.eh_frame:0000000000005E1A                 db 0FFh
.eh_frame:0000000000005E1B                 db 0FFh
.eh_frame:0000000000005E1C                 db  2Eh ; .
.eh_frame:0000000000005E1D                 db    0
.eh_frame:0000000000005E1E                 db    0
.eh_frame:0000000000005E1F                 db    0
.eh_frame:0000000000005E20                 db    0
.eh_frame:0000000000005E21                 db  47h ; G
.eh_frame:0000000000005E22                 db  0Eh
.eh_frame:0000000000005E23                 db  10h
.eh_frame:0000000000005E24                 db  61h ; a
.eh_frame:0000000000005E25                 db  0Ah
.eh_frame:0000000000005E26                 db  0Eh
.eh_frame:0000000000005E27                 db    8
.eh_frame:0000000000005E28                 db  41h ; A
.eh_frame:0000000000005E29                 db  0Bh
.eh_frame:0000000000005E2A                 db    0
.eh_frame:0000000000005E2B                 db    0
.eh_frame:0000000000005E2C                 db  24h ; $
.eh_frame:0000000000005E2D                 db    0
.eh_frame:0000000000005E2E                 db    0
.eh_frame:0000000000005E2F                 db    0
.eh_frame:0000000000005E30                 db 0C0h
.eh_frame:0000000000005E31                 db    8
.eh_frame:0000000000005E32                 db    0
.eh_frame:0000000000005E33                 db    0
.eh_frame:0000000000005E34                 db 0FCh
.eh_frame:0000000000005E35                 db 0E4h
.eh_frame:0000000000005E36                 db 0FFh
.eh_frame:0000000000005E37                 db 0FFh
.eh_frame:0000000000005E38                 db  28h ; (
.eh_frame:0000000000005E39                 db    0
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db    0
.eh_frame:0000000000005E3D                 db  41h ; A
.eh_frame:0000000000005E3E                 db  0Eh
.eh_frame:0000000000005E3F                 db  10h
.eh_frame:0000000000005E40                 db  86h
.eh_frame:0000000000005E41                 db    2
.eh_frame:0000000000005E42                 db  41h ; A
.eh_frame:0000000000005E43                 db  0Eh
.eh_frame:0000000000005E44                 db  18h
.eh_frame:0000000000005E45                 db  83h
.eh_frame:0000000000005E46                 db    3
.eh_frame:0000000000005E47                 db  4Dh ; M
.eh_frame:0000000000005E48                 db  0Eh
.eh_frame:0000000000005E49                 db  20h
.eh_frame:0000000000005E4A                 db  49h ; I
.eh_frame:0000000000005E4B                 db  0Eh
.eh_frame:0000000000005E4C                 db  18h
.eh_frame:0000000000005E4D                 db  47h ; G
.eh_frame:0000000000005E4E                 db  0Eh
.eh_frame:0000000000005E4F                 db  10h
.eh_frame:0000000000005E50                 db  41h ; A
.eh_frame:0000000000005E51                 db  0Eh
.eh_frame:0000000000005E52                 db    8
.eh_frame:0000000000005E53                 db    0
.eh_frame:0000000000005E54                 db  18h
.eh_frame:0000000000005E55                 db    0
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db 0E8h
.eh_frame:0000000000005E59                 db    8
.eh_frame:0000000000005E5A                 db    0
.eh_frame:0000000000005E5B                 db    0
.eh_frame:0000000000005E5C                 db    4
.eh_frame:0000000000005E5D                 db 0E5h
.eh_frame:0000000000005E5E                 db 0FFh
.eh_frame:0000000000005E5F                 db 0FFh
.eh_frame:0000000000005E60                 db  13h
.eh_frame:0000000000005E61                 db    0
.eh_frame:0000000000005E62                 db    0
.eh_frame:0000000000005E63                 db    0
.eh_frame:0000000000005E64                 db    0
.eh_frame:0000000000005E65                 db  41h ; A
.eh_frame:0000000000005E66                 db  0Eh
.eh_frame:0000000000005E67                 db  10h
.eh_frame:0000000000005E68                 db  83h
.eh_frame:0000000000005E69                 db    2
.eh_frame:0000000000005E6A                 db  50h ; P
.eh_frame:0000000000005E6B                 db  0Eh
.eh_frame:0000000000005E6C                 db    8
.eh_frame:0000000000005E6D                 db    0
.eh_frame:0000000000005E6E                 db    0
.eh_frame:0000000000005E6F                 db    0
.eh_frame:0000000000005E70                 db  14h
.eh_frame:0000000000005E71                 db    0
.eh_frame:0000000000005E72                 db    0
.eh_frame:0000000000005E73                 db    0
.eh_frame:0000000000005E74                 db    4
.eh_frame:0000000000005E75                 db    9
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db    8
.eh_frame:0000000000005E79                 db 0E5h
.eh_frame:0000000000005E7A                 db 0FFh
.eh_frame:0000000000005E7B                 db 0FFh
.eh_frame:0000000000005E7C                 db  35h ; 5
.eh_frame:0000000000005E7D                 db    0
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db    0
.eh_frame:0000000000005E81                 db  4Bh ; K
.eh_frame:0000000000005E82                 db  0Eh
.eh_frame:0000000000005E83                 db  10h
.eh_frame:0000000000005E84                 db    0
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db  3Ch ; <
.eh_frame:0000000000005E89                 db    0
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db  1Ch
.eh_frame:0000000000005E8D                 db    9
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db  30h ; 0
.eh_frame:0000000000005E91                 db 0E5h
.eh_frame:0000000000005E92                 db 0FFh
.eh_frame:0000000000005E93                 db 0FFh
.eh_frame:0000000000005E94                 db  83h
.eh_frame:0000000000005E95                 db    0
.eh_frame:0000000000005E96                 db    0
.eh_frame:0000000000005E97                 db    0
.eh_frame:0000000000005E98                 db    0
.eh_frame:0000000000005E99                 db  42h ; B
.eh_frame:0000000000005E9A                 db  0Eh
.eh_frame:0000000000005E9B                 db  10h
.eh_frame:0000000000005E9C                 db  8Dh
.eh_frame:0000000000005E9D                 db    2
.eh_frame:0000000000005E9E                 db  42h ; B
.eh_frame:0000000000005E9F                 db  0Eh
.eh_frame:0000000000005EA0                 db  18h
.eh_frame:0000000000005EA1                 db  8Ch
.eh_frame:0000000000005EA2                 db    3
.eh_frame:0000000000005EA3                 db  44h ; D
.eh_frame:0000000000005EA4                 db  0Eh
.eh_frame:0000000000005EA5                 db  20h
.eh_frame:0000000000005EA6                 db  86h
.eh_frame:0000000000005EA7                 db    4
.eh_frame:0000000000005EA8                 db  41h ; A
.eh_frame:0000000000005EA9                 db  0Eh
.eh_frame:0000000000005EAA                 db  28h ; (
.eh_frame:0000000000005EAB                 db  83h
.eh_frame:0000000000005EAC                 db    5
.eh_frame:0000000000005EAD                 db  4Ah ; J
.eh_frame:0000000000005EAE                 db  0Eh
.eh_frame:0000000000005EAF                 db  40h ; @
.eh_frame:0000000000005EB0                 db    2
.eh_frame:0000000000005EB1                 db  64h ; d
.eh_frame:0000000000005EB2                 db  0Ah
.eh_frame:0000000000005EB3                 db  0Eh
.eh_frame:0000000000005EB4                 db  28h ; (
.eh_frame:0000000000005EB5                 db  41h ; A
.eh_frame:0000000000005EB6                 db  0Eh
.eh_frame:0000000000005EB7                 db  20h
.eh_frame:0000000000005EB8                 db  41h ; A
.eh_frame:0000000000005EB9                 db  0Eh
.eh_frame:0000000000005EBA                 db  18h
.eh_frame:0000000000005EBB                 db  42h ; B
.eh_frame:0000000000005EBC                 db  0Eh
.eh_frame:0000000000005EBD                 db  10h
.eh_frame:0000000000005EBE                 db  42h ; B
.eh_frame:0000000000005EBF                 db  0Eh
.eh_frame:0000000000005EC0                 db    8
.eh_frame:0000000000005EC1                 db  41h ; A
.eh_frame:0000000000005EC2                 db  0Bh
.eh_frame:0000000000005EC3                 db    0
.eh_frame:0000000000005EC4                 db    0
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db  4Ch ; L
.eh_frame:0000000000005EC9                 db    0
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db  5Ch ; \
.eh_frame:0000000000005ECD                 db    9
.eh_frame:0000000000005ECE                 db    0
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db  80h
.eh_frame:0000000000005ED1                 db 0E5h
.eh_frame:0000000000005ED2                 db 0FFh
.eh_frame:0000000000005ED3                 db 0FFh
.eh_frame:0000000000005ED4                 db  7Dh ; }
.eh_frame:0000000000005ED5                 db    0
.eh_frame:0000000000005ED6                 db    0
.eh_frame:0000000000005ED7                 db    0
.eh_frame:0000000000005ED8                 db    0
.eh_frame:0000000000005ED9                 db  42h ; B
.eh_frame:0000000000005EDA                 db  0Eh
.eh_frame:0000000000005EDB                 db  10h
.eh_frame:0000000000005EDC                 db  8Ch
.eh_frame:0000000000005EDD                 db    2
.eh_frame:0000000000005EDE                 db  41h ; A
.eh_frame:0000000000005EDF                 db  0Eh
.eh_frame:0000000000005EE0                 db  18h
.eh_frame:0000000000005EE1                 db  86h
.eh_frame:0000000000005EE2                 db    3
.eh_frame:0000000000005EE3                 db  44h ; D
.eh_frame:0000000000005EE4                 db  0Eh
.eh_frame:0000000000005EE5                 db  20h
.eh_frame:0000000000005EE6                 db  83h
.eh_frame:0000000000005EE7                 db    4
.eh_frame:0000000000005EE8                 db  69h ; i
.eh_frame:0000000000005EE9                 db  0Ah
.eh_frame:0000000000005EEA                 db  0Eh
.eh_frame:0000000000005EEB                 db  18h
.eh_frame:0000000000005EEC                 db  41h ; A
.eh_frame:0000000000005EED                 db  0Eh
.eh_frame:0000000000005EEE                 db  10h
.eh_frame:0000000000005EEF                 db  42h ; B
.eh_frame:0000000000005EF0                 db  0Eh
.eh_frame:0000000000005EF1                 db    8
.eh_frame:0000000000005EF2                 db  45h ; E
.eh_frame:0000000000005EF3                 db  0Bh
.eh_frame:0000000000005EF4                 db  55h ; U
.eh_frame:0000000000005EF5                 db  0Ah
.eh_frame:0000000000005EF6                 db  0Eh
.eh_frame:0000000000005EF7                 db  18h
.eh_frame:0000000000005EF8                 db  41h ; A
.eh_frame:0000000000005EF9                 db  0Eh
.eh_frame:0000000000005EFA                 db  10h
.eh_frame:0000000000005EFB                 db  42h ; B
.eh_frame:0000000000005EFC                 db  0Eh
.eh_frame:0000000000005EFD                 db    8
.eh_frame:0000000000005EFE                 db  48h ; H
.eh_frame:0000000000005EFF                 db  0Bh
.eh_frame:0000000000005F00                 db  41h ; A
.eh_frame:0000000000005F01                 db  0Ah
.eh_frame:0000000000005F02                 db  0Eh
.eh_frame:0000000000005F03                 db  18h
.eh_frame:0000000000005F04                 db  46h ; F
.eh_frame:0000000000005F05                 db  0Eh
.eh_frame:0000000000005F06                 db  10h
.eh_frame:0000000000005F07                 db  42h ; B
.eh_frame:0000000000005F08                 db  0Eh
.eh_frame:0000000000005F09                 db    8
.eh_frame:0000000000005F0A                 db  47h ; G
.eh_frame:0000000000005F0B                 db  0Bh
.eh_frame:0000000000005F0C                 db  49h ; I
.eh_frame:0000000000005F0D                 db  0Eh
.eh_frame:0000000000005F0E                 db  18h
.eh_frame:0000000000005F0F                 db  41h ; A
.eh_frame:0000000000005F10                 db  0Eh
.eh_frame:0000000000005F11                 db  10h
.eh_frame:0000000000005F12                 db  42h ; B
.eh_frame:0000000000005F13                 db  0Eh
.eh_frame:0000000000005F14                 db    8
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db  1Ch
.eh_frame:0000000000005F19                 db    0
.eh_frame:0000000000005F1A                 db    0
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C                 db 0ACh
.eh_frame:0000000000005F1D                 db    9
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db 0B0h
.eh_frame:0000000000005F21                 db 0E5h
.eh_frame:0000000000005F22                 db 0FFh
.eh_frame:0000000000005F23                 db 0FFh
.eh_frame:0000000000005F24                 db  60h ; `
.eh_frame:0000000000005F25                 db    0
.eh_frame:0000000000005F26                 db    0
.eh_frame:0000000000005F27                 db    0
.eh_frame:0000000000005F28                 db    0
.eh_frame:0000000000005F29                 db  44h ; D
.eh_frame:0000000000005F2A                 db  0Eh
.eh_frame:0000000000005F2B                 db  10h
.eh_frame:0000000000005F2C                 db  75h ; u
.eh_frame:0000000000005F2D                 db  0Ah
.eh_frame:0000000000005F2E                 db  0Eh
.eh_frame:0000000000005F2F                 db    8
.eh_frame:0000000000005F30                 db  47h ; G
.eh_frame:0000000000005F31                 db  0Bh
.eh_frame:0000000000005F32                 db  5Fh ; _
.eh_frame:0000000000005F33                 db  0Eh
.eh_frame:0000000000005F34                 db    8
.eh_frame:0000000000005F35                 db    0
.eh_frame:0000000000005F36                 db    0
.eh_frame:0000000000005F37                 db    0
.eh_frame:0000000000005F38                 db  1Ch
.eh_frame:0000000000005F39                 db    0
.eh_frame:0000000000005F3A                 db    0
.eh_frame:0000000000005F3B                 db    0
.eh_frame:0000000000005F3C                 db 0CCh
.eh_frame:0000000000005F3D                 db    9
.eh_frame:0000000000005F3E                 db    0
.eh_frame:0000000000005F3F                 db    0
.eh_frame:0000000000005F40                 db 0F0h
.eh_frame:0000000000005F41                 db 0E5h
.eh_frame:0000000000005F42                 db 0FFh
.eh_frame:0000000000005F43                 db 0FFh
.eh_frame:0000000000005F44                 db  3Ch ; <
.eh_frame:0000000000005F45                 db    0
.eh_frame:0000000000005F46                 db    0
.eh_frame:0000000000005F47                 db    0
.eh_frame:0000000000005F48                 db    0
.eh_frame:0000000000005F49                 db  44h ; D
.eh_frame:0000000000005F4A                 db  0Eh
.eh_frame:0000000000005F4B                 db  10h
.eh_frame:0000000000005F4C                 db  61h ; a
.eh_frame:0000000000005F4D                 db  0Ah
.eh_frame:0000000000005F4E                 db  0Eh
.eh_frame:0000000000005F4F                 db    8
.eh_frame:0000000000005F50                 db  4Bh ; K
.eh_frame:0000000000005F51                 db  0Bh
.eh_frame:0000000000005F52                 db  4Bh ; K
.eh_frame:0000000000005F53                 db  0Eh
.eh_frame:0000000000005F54                 db    8
.eh_frame:0000000000005F55                 db    0
.eh_frame:0000000000005F56                 db    0
.eh_frame:0000000000005F57                 db    0
.eh_frame:0000000000005F58                 db  34h ; 4
.eh_frame:0000000000005F59                 db    0
.eh_frame:0000000000005F5A                 db    0
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db 0ECh
.eh_frame:0000000000005F5D                 db    9
.eh_frame:0000000000005F5E                 db    0
.eh_frame:0000000000005F5F                 db    0
.eh_frame:0000000000005F60                 db  10h
.eh_frame:0000000000005F61                 db 0E6h
.eh_frame:0000000000005F62                 db 0FFh
.eh_frame:0000000000005F63                 db 0FFh
.eh_frame:0000000000005F64                 db  7Bh ; {
.eh_frame:0000000000005F65                 db    0
.eh_frame:0000000000005F66                 db    0
.eh_frame:0000000000005F67                 db    0
.eh_frame:0000000000005F68                 db    0
.eh_frame:0000000000005F69                 db  42h ; B
.eh_frame:0000000000005F6A                 db  0Eh
.eh_frame:0000000000005F6B                 db  10h
.eh_frame:0000000000005F6C                 db  8Ch
.eh_frame:0000000000005F6D                 db    2
.eh_frame:0000000000005F6E                 db  41h ; A
.eh_frame:0000000000005F6F                 db  0Eh
.eh_frame:0000000000005F70                 db  18h
.eh_frame:0000000000005F71                 db  86h
.eh_frame:0000000000005F72                 db    3
.eh_frame:0000000000005F73                 db  41h ; A
.eh_frame:0000000000005F74                 db  0Eh
.eh_frame:0000000000005F75                 db  20h
.eh_frame:0000000000005F76                 db  83h
.eh_frame:0000000000005F77                 db    4
.eh_frame:0000000000005F78                 db  7Dh ; }
.eh_frame:0000000000005F79                 db  0Ah
.eh_frame:0000000000005F7A                 db  0Eh
.eh_frame:0000000000005F7B                 db  18h
.eh_frame:0000000000005F7C                 db  41h ; A
.eh_frame:0000000000005F7D                 db  0Eh
.eh_frame:0000000000005F7E                 db  10h
.eh_frame:0000000000005F7F                 db  42h ; B
.eh_frame:0000000000005F80                 db  0Eh
.eh_frame:0000000000005F81                 db    8
.eh_frame:0000000000005F82                 db  44h ; D
.eh_frame:0000000000005F83                 db  0Bh
.eh_frame:0000000000005F84                 db  60h ; `
.eh_frame:0000000000005F85                 db  0Ah
.eh_frame:0000000000005F86                 db  0Eh
.eh_frame:0000000000005F87                 db  18h
.eh_frame:0000000000005F88                 db  41h ; A
.eh_frame:0000000000005F89                 db  0Eh
.eh_frame:0000000000005F8A                 db  10h
.eh_frame:0000000000005F8B                 db  42h ; B
.eh_frame:0000000000005F8C                 db  0Eh
.eh_frame:0000000000005F8D                 db    8
.eh_frame:0000000000005F8E                 db  45h ; E
.eh_frame:0000000000005F8F                 db  0Bh
.eh_frame:0000000000005F90                 db  1Ch
.eh_frame:0000000000005F91                 db    0
.eh_frame:0000000000005F92                 db    0
.eh_frame:0000000000005F93                 db    0
.eh_frame:0000000000005F94                 db  24h ; $
.eh_frame:0000000000005F95                 db  0Ah
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db  58h ; X
.eh_frame:0000000000005F99                 db 0E6h
.eh_frame:0000000000005F9A                 db 0FFh
.eh_frame:0000000000005F9B                 db 0FFh
.eh_frame:0000000000005F9C                 db  40h ; @
.eh_frame:0000000000005F9D                 db    0
.eh_frame:0000000000005F9E                 db    0
.eh_frame:0000000000005F9F                 db    0
.eh_frame:0000000000005FA0                 db    0
.eh_frame:0000000000005FA1                 db  44h ; D
.eh_frame:0000000000005FA2                 db  0Eh
.eh_frame:0000000000005FA3                 db  10h
.eh_frame:0000000000005FA4                 db  83h
.eh_frame:0000000000005FA5                 db    2
.eh_frame:0000000000005FA6                 db  5Ah ; Z
.eh_frame:0000000000005FA7                 db  0Ah
.eh_frame:0000000000005FA8                 db  0Eh
.eh_frame:0000000000005FA9                 db    8
.eh_frame:0000000000005FAA                 db  4Ah ; J
.eh_frame:0000000000005FAB                 db  0Bh
.eh_frame:0000000000005FAC                 db  53h ; S
.eh_frame:0000000000005FAD                 db  0Eh
.eh_frame:0000000000005FAE                 db    8
.eh_frame:0000000000005FAF                 db    0
.eh_frame:0000000000005FB0                 db  2Ch ; ,
.eh_frame:0000000000005FB1                 db    0
.eh_frame:0000000000005FB2                 db    0
.eh_frame:0000000000005FB3                 db    0
.eh_frame:0000000000005FB4                 db  44h ; D
.eh_frame:0000000000005FB5                 db  0Ah
.eh_frame:0000000000005FB6                 db    0
.eh_frame:0000000000005FB7                 db    0
.eh_frame:0000000000005FB8                 db  78h ; x
.eh_frame:0000000000005FB9                 db 0E6h
.eh_frame:0000000000005FBA                 db 0FFh
.eh_frame:0000000000005FBB                 db 0FFh
.eh_frame:0000000000005FBC                 db  57h ; W
.eh_frame:0000000000005FBD                 db    0
.eh_frame:0000000000005FBE                 db    0
.eh_frame:0000000000005FBF                 db    0
.eh_frame:0000000000005FC0                 db    0
.eh_frame:0000000000005FC1                 db  63h ; c
.eh_frame:0000000000005FC2                 db  0Eh
.eh_frame:0000000000005FC3                 db  10h
.eh_frame:0000000000005FC4                 db  8Ch
.eh_frame:0000000000005FC5                 db    2
.eh_frame:0000000000005FC6                 db  41h ; A
.eh_frame:0000000000005FC7                 db  0Eh
.eh_frame:0000000000005FC8                 db  18h
.eh_frame:0000000000005FC9                 db  86h
.eh_frame:0000000000005FCA                 db    3
.eh_frame:0000000000005FCB                 db  44h ; D
.eh_frame:0000000000005FCC                 db  0Eh
.eh_frame:0000000000005FCD                 db  20h
.eh_frame:0000000000005FCE                 db  83h
.eh_frame:0000000000005FCF                 db    4
.eh_frame:0000000000005FD0                 db  6Bh ; k
.eh_frame:0000000000005FD1                 db  0Eh
.eh_frame:0000000000005FD2                 db  18h
.eh_frame:0000000000005FD3                 db  41h ; A
.eh_frame:0000000000005FD4                 db  0Eh
.eh_frame:0000000000005FD5                 db  10h
.eh_frame:0000000000005FD6                 db  42h ; B
.eh_frame:0000000000005FD7                 db  0Eh
.eh_frame:0000000000005FD8                 db    8
.eh_frame:0000000000005FD9                 db    0
.eh_frame:0000000000005FDA                 db    0
.eh_frame:0000000000005FDB                 db    0
.eh_frame:0000000000005FDC                 db    0
.eh_frame:0000000000005FDD                 db    0
.eh_frame:0000000000005FDE                 db    0
.eh_frame:0000000000005FDF                 db    0
.eh_frame:0000000000005FE0                 db  44h ; D
.eh_frame:0000000000005FE1                 db    0
.eh_frame:0000000000005FE2                 db    0
.eh_frame:0000000000005FE3                 db    0
.eh_frame:0000000000005FE4                 db  74h ; t
.eh_frame:0000000000005FE5                 db  0Ah
.eh_frame:0000000000005FE6                 db    0
.eh_frame:0000000000005FE7                 db    0
.eh_frame:0000000000005FE8                 db 0A8h
.eh_frame:0000000000005FE9                 db 0E6h
.eh_frame:0000000000005FEA                 db 0FFh
.eh_frame:0000000000005FEB                 db 0FFh
.eh_frame:0000000000005FEC                 db  65h ; e
.eh_frame:0000000000005FED                 db    0
.eh_frame:0000000000005FEE                 db    0
.eh_frame:0000000000005FEF                 db    0
.eh_frame:0000000000005FF0                 db    0
.eh_frame:0000000000005FF1                 db  42h ; B
.eh_frame:0000000000005FF2                 db  0Eh
.eh_frame:0000000000005FF3                 db  10h
.eh_frame:0000000000005FF4                 db  8Fh
.eh_frame:0000000000005FF5                 db    2
.eh_frame:0000000000005FF6                 db  42h ; B
.eh_frame:0000000000005FF7                 db  0Eh
.eh_frame:0000000000005FF8                 db  18h
.eh_frame:0000000000005FF9                 db  8Eh
.eh_frame:0000000000005FFA                 db    3
.eh_frame:0000000000005FFB                 db  45h ; E
.eh_frame:0000000000005FFC                 db  0Eh
.eh_frame:0000000000005FFD                 db  20h
.eh_frame:0000000000005FFE                 db  8Dh
.eh_frame:0000000000005FFF                 db    4
.eh_frame:0000000000006000                 db  42h ; B
.eh_frame:0000000000006001                 db  0Eh
.eh_frame:0000000000006002                 db  28h ; (
.eh_frame:0000000000006003                 db  8Ch
.eh_frame:0000000000006004                 db    5
.eh_frame:0000000000006005                 db  48h ; H
.eh_frame:0000000000006006                 db  0Eh
.eh_frame:0000000000006007                 db  30h ; 0
.eh_frame:0000000000006008                 db  86h
.eh_frame:0000000000006009                 db    6
.eh_frame:000000000000600A                 db  48h ; H
.eh_frame:000000000000600B                 db  0Eh
.eh_frame:000000000000600C                 db  38h ; 8
.eh_frame:000000000000600D                 db  83h
.eh_frame:000000000000600E                 db    7
.eh_frame:000000000000600F                 db  4Dh ; M
.eh_frame:0000000000006010                 db  0Eh
.eh_frame:0000000000006011                 db  40h ; @
.eh_frame:0000000000006012                 db  72h ; r
.eh_frame:0000000000006013                 db  0Eh
.eh_frame:0000000000006014                 db  38h ; 8
.eh_frame:0000000000006015                 db  41h ; A
.eh_frame:0000000000006016                 db  0Eh
.eh_frame:0000000000006017                 db  30h ; 0
.eh_frame:0000000000006018                 db  41h ; A
.eh_frame:0000000000006019                 db  0Eh
.eh_frame:000000000000601A                 db  28h ; (
.eh_frame:000000000000601B                 db  42h ; B
.eh_frame:000000000000601C                 db  0Eh
.eh_frame:000000000000601D                 db  20h
.eh_frame:000000000000601E                 db  42h ; B
.eh_frame:000000000000601F                 db  0Eh
.eh_frame:0000000000006020                 db  18h
.eh_frame:0000000000006021                 db  42h ; B
.eh_frame:0000000000006022                 db  0Eh
.eh_frame:0000000000006023                 db  10h
.eh_frame:0000000000006024                 db  42h ; B
.eh_frame:0000000000006025                 db  0Eh
.eh_frame:0000000000006026                 db    8
.eh_frame:0000000000006027                 db    0
.eh_frame:0000000000006028                 db  14h
.eh_frame:0000000000006029                 db    0
.eh_frame:000000000000602A                 db    0
.eh_frame:000000000000602B                 db    0
.eh_frame:000000000000602C                 db 0BCh
.eh_frame:000000000000602D                 db  0Ah
.eh_frame:000000000000602E                 db    0
.eh_frame:000000000000602F                 db    0
.eh_frame:0000000000006030                 db 0D0h
.eh_frame:0000000000006031                 db 0E6h
.eh_frame:0000000000006032                 db 0FFh
.eh_frame:0000000000006033                 db 0FFh
.eh_frame:0000000000006034                 db    2
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db    0
.eh_frame:0000000000006039                 db    0
.eh_frame:000000000000603A                 db    0
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db    0
.eh_frame:000000000000603D                 db    0
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db  10h
.eh_frame:0000000000006041                 db    0
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db 0D4h
.eh_frame:0000000000006045                 db  0Ah
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db 0C8h
.eh_frame:0000000000006049                 db 0E6h
.eh_frame:000000000000604A                 db 0FFh
.eh_frame:000000000000604B                 db 0FFh
.eh_frame:000000000000604C                 db  0Eh
.eh_frame:000000000000604D                 db    0
.eh_frame:000000000000604E                 db    0
.eh_frame:000000000000604F                 db    0
.eh_frame:0000000000006050                 db    0
.eh_frame:0000000000006051                 db    0
.eh_frame:0000000000006052                 db    0
.eh_frame:0000000000006053                 db    0
.eh_frame:0000000000006054 __FRAME_END__   db    0
.eh_frame:0000000000006055                 db    0
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006057 _eh_frame       ends
.eh_frame:0000000000006057
.init_array:0000000000206BB0 ; ELF Initialization Function Table
.init_array:0000000000206BB0 ; ===========================================================================
.init_array:0000000000206BB0
.init_array:0000000000206BB0 ; Segment type: Pure data
.init_array:0000000000206BB0 ; Segment permissions: Read/Write
.init_array:0000000000206BB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206BB0                 assume cs:_init_array
.init_array:0000000000206BB0                 ;org 206BB0h
.init_array:0000000000206BB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206BB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206BB0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206BB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206BB0
.fini_array:0000000000206BB8 ; ELF Termination Function Table
.fini_array:0000000000206BB8 ; ===========================================================================
.fini_array:0000000000206BB8
.fini_array:0000000000206BB8 ; Segment type: Pure data
.fini_array:0000000000206BB8 ; Segment permissions: Read/Write
.fini_array:0000000000206BB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206BB8                 assume cs:_fini_array
.fini_array:0000000000206BB8                 ;org 206BB8h
.fini_array:0000000000206BB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206BB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206BB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206BB8
.data.rel.ro:0000000000206BC0 ; ===========================================================================
.data.rel.ro:0000000000206BC0
.data.rel.ro:0000000000206BC0 ; Segment type: Pure data
.data.rel.ro:0000000000206BC0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BC0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BC0                 ;org 206BC0h
.data.rel.ro:0000000000206BC0 ; struct option long_options
.data.rel.ro:0000000000206BC0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000206BC0                                         ; DATA XREF: parse_long_options:loc_1C10↑o
.data.rel.ro:0000000000206BC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000206BC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq 0                    ; flag
.data.rel.ro:0000000000206BC0                 dd 68h                  ; val
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  76h ; v
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 11B8h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4720h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206BB0h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206BB8h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 7F0h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 284h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3C0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0DF8h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B40h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0AE0h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A74h> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_11D0↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_11D0+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EA8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EB8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EC8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206ED8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EE8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EF8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F00 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F08 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F10 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F18 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F18                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F20 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F28 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F80 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F88 link_ptr        dq offset link          ; DATA XREF: _link↑r
.got:0000000000206F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FC8                                         ; DATA XREF: start+24↑r
.got:0000000000206FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE0 _got            ends
.got:0000000000206FE0
LOAD:0000000000206FE8 ; ===========================================================================
LOAD:0000000000206FE8
LOAD:0000000000206FE8 ; Segment type: Pure data
LOAD:0000000000206FE8 ; Segment permissions: Read/Write
LOAD:0000000000206FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FE8                 assume cs:LOAD
LOAD:0000000000206FE8                 ;org 206FE8h
LOAD:0000000000206FE8                 align 20h
LOAD:0000000000206FE8 LOAD            ends
LOAD:0000000000206FE8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+58↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1B32↑r
.data:0000000000207018                                         ; parse_gnu_standard_options_only:loc_1DA0↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_322D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000748↑o
.bss:0000000000207080                                         ; LOAD:0000000000000790↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000730↑o
.bss:0000000000207088                                         ; usage+80↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000207090                                         ; main+8A↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000760↑o
.bss:0000000000207098                                         ; LOAD:0000000000000778↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002070A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007A8↑o
.bss:00000000002070A0                                         ; parse_long_options+67↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'opterr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A4                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007C0↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_1E4D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; char *textdomain(const char *domainname)
extern:0000000000207270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207278 ; int fclose(FILE *stream)
extern:0000000000207278                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207278                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207280 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207280                 extrn bindtextdomain:near
extern:0000000000207280                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207280                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207288 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207288                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207288                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207290 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207290                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207290                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207290                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207298 ; size_t strlen(const char *s)
extern:0000000000207298                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207298                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A0                 extrn __stack_chk_fail:near
extern:00000000002072A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B8 ; char *strrchr(const char *s, int c)
extern:00000000002072B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072C8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D0                 extrn __libc_start_main:near
extern:00000000002072D0                                         ; CODE XREF: start+24↑p
extern:00000000002072D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E0                 extrn fputs_unlocked:near
extern:00000000002072E0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072E8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072E8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072E8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002072F8 ; int fileno(FILE *stream)
extern:00000000002072F8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002072F8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207300 ; void *malloc(size_t size)
extern:0000000000207300                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207300                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207308 ; int fflush(FILE *stream)
extern:0000000000207308                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207308                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207310 ; char *nl_langinfo(nl_item item)
extern:0000000000207310                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207310                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207318 ; int _freading(FILE *fp)
extern:0000000000207318                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207318                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207320 ; void *realloc(void *ptr, size_t size)
extern:0000000000207320                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207320                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207328 ; char *setlocale(int category, const char *locale)
extern:0000000000207328                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207328                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207330                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207330                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207338 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207338                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207338                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207340 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207340                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207340                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207348 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207348                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207348                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207350 ; int link(const char *from, const char *to)
extern:0000000000207350                 extrn link:near         ; CODE XREF: _link↑j
extern:0000000000207350                                         ; DATA XREF: .got:link_ptr↑o
extern:0000000000207358 ; void __noreturn exit(int status)
extern:0000000000207358                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207358                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207360 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207360                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207360                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207368                 extrn __fprintf_chk:near
extern:0000000000207368                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207368                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207370 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207370                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207370                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207378 ; int iswprint(wint_t wc)
extern:0000000000207378                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207378                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207380 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207380                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207380                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207380                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207388 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207388                 extrn __ctype_b_loc:near
extern:0000000000207388                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207388                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207390                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207390                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207398                 extrn __gmon_start__:near ; weak
extern:0000000000207398                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207398                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073A0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073A0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073A0
extern:00000000002073A0
extern:00000000002073A0                 end start
