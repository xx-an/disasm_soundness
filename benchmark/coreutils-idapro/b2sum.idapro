LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 7EEB8920A151F788B9C0AAB530FA4830FF079E27F624A0B7DF7BA94FB72BB8AC
LOAD:0000000000000000 ; Input MD5    : 4FCB354FCF3F3F528B96F5C558CF39FF
LOAD:0000000000000000 ; Input CRC32  : C3BA083D
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/b2sum
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'md5sum.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'blake2b-ref.c'
LOAD:0000000000000000 ; Source File : 'b2sum.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'argmatch.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'fadvise.c'
LOAD:0000000000000000 ; Source File : 'fopen-safer.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'dup-safer.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xdectoumax.c'
LOAD:0000000000000000 ; Source File : 'xstrtoul.c'
LOAD:0000000000000000 ; Source File : 'xstrtoumax.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fcntl.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 46538h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 0BDA8h               ; Size in file image
LOAD:00000000000000D8                 dq 0BDA8h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 0C9B0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 20C9B0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 6F0h                 ; Size in file image
LOAD:0000000000000110                 dq 8D0h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 0CBF8h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 20CBF8h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 0A9E4h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 0A9E4h               ; Physical address
LOAD:00000000000001B0                 dq 324h                 ; Size in file image
LOAD:00000000000001B8                 dq 324h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 0C9B0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 20C9B0h              ; Physical address
LOAD:0000000000000220                 dq 650h                 ; Size in file image
LOAD:0000000000000228                 dq 650h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 88h, 9, 6Ch, 4Dh, 23h, 0EDh, 8Ch, 8, 62h, 2Fh, 3Dh ; Desc
LOAD:0000000000000284                 db 3, 27h, 0C8h, 73h, 89h, 21h, 6Fh, 76h, 0EEh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 41h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C01A000614D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 41h, 42h, 48h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 10615566h, 9789A096h, 72632CCEh
LOAD:00000000000002BC                 dd 0F54162E4h, 1C8BF239h, 12F7C432h, 12F7A2B3h
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_9D0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_9D0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_9D0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_9D0, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFerror - offset byte_9D0, 12h, 0, 0, \ ; "ferror"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFread - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "fread"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFcntl - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "fcntl"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_9D0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aFclose - offset byte_9D0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aBindtextdomain - offset byte_9D0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aDcgettext - offset byte_9D0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_9D0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aStrlen - offset byte_9D0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStackChkFail - offset byte_9D0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aGetoptLong - offset byte_9D0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMbrtowc - offset byte_9D0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrchr - offset byte_9D0, 12h, 0, 0, \ ; "strchr"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aOverflow - offset byte_9D0, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_9D0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aAssertFail - offset byte_9D0, 12h, 0, 0, \ ; "__assert_fail"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrtoulInterna - offset byte_9D0, 12h, 0, 0, \ ; "__strtoul_internal"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemset - offset byte_9D0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFclose+1 - offset byte_9D0, 12h, 0, 0, \ ; "close"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aPosixFadvise - offset byte_9D0, 12h, 0, 0, \ ; "posix_fadvise"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLibcStartMain - offset byte_9D0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcmp - offset byte_9D0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFputsUnlocked - offset byte_9D0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aCalloc - offset byte_9D0, 12h, 0, 0, \ ; "calloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aGetdelim - offset byte_9D0, 12h, 0, 0, \ ; "__getdelim"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aStrcmp - offset byte_9D0, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMemcpyChk - offset byte_9D0, 12h, 0, 0, \ ; "__memcpy_chk"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFeof - offset byte_9D0, 12h, 0, 0, offset dword_0, \ ; "feof"
LOAD:0000000000000640                            0>
LOAD:0000000000000658                 Elf64_Sym <offset aGmonStart - offset byte_9D0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aMemcpy - offset byte_9D0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFileno - offset byte_9D0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aMalloc - offset byte_9D0, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aFflush - offset byte_9D0, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aNlLanginfo - offset byte_9D0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFreading - offset byte_9D0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFwriteUnlocked - offset byte_9D0, 12h, 0, 0, \ ; "fwrite_unlocked"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aRealloc - offset byte_9D0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aFdopen - offset byte_9D0, 12h, 0, 0, \ ; "fdopen"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aSetlocale - offset byte_9D0, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aPrintfChk - offset byte_9D0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aSetvbuf - offset byte_9D0, 12h, 0, 0, \ ; "setvbuf"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aFerror+1 - offset byte_9D0, 12h, 0, 0, \ ; "error"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aFseeko - offset byte_9D0, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aFopen - offset byte_9D0, 12h, 0, 0, offset dword_0,\ ; "fopen"
LOAD:00000000000007C0                            0>
LOAD:00000000000007D8                 Elf64_Sym <offset aDcngettext - offset byte_9D0, 12h, 0, 0, \ ; "dcngettext"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStrtoul - offset byte_9D0, 12h, 0, 0, \ ; "strtoul"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aCxaAtexit - offset byte_9D0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aExit+1 - offset byte_9D0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aFwrite - offset byte_9D0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aFprintfChk - offset byte_9D0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000850                            offset dword_0, 0>
LOAD:0000000000000868                 Elf64_Sym <offset aItmRegistertmc - offset byte_9D0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aMbsinit - offset byte_9D0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aIswprint - offset byte_9D0, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000898                            offset dword_0, 0>
LOAD:00000000000008B0                 Elf64_Sym <offset aCxaFinalize - offset byte_9D0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_9D0, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aCtypeBLoc - offset byte_9D0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aStdout - offset byte_9D0, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000008F8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000910                 Elf64_Sym <offset aProgname - offset byte_9D0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000910                            offset __bss_start, 8>
LOAD:0000000000000928                 Elf64_Sym <offset aStdin - offset byte_9D0, 11h, 0, 19h, \ ; "stdin"
LOAD:0000000000000928                            offset stdin@@GLIBC_2_2_5, 8>
LOAD:0000000000000940                 Elf64_Sym <offset aProgramInvocat - offset byte_9D0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000940                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000958                 Elf64_Sym <offset aPrognameFull - offset byte_9D0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000958                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000970                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_9D0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000970                            offset __bss_start, 8>
LOAD:0000000000000988                 Elf64_Sym <offset aStderr - offset byte_9D0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000988                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000009A0                 Elf64_Sym <offset aOptind - offset byte_9D0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000009A0                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000009B8                 Elf64_Sym <offset aOptarg - offset byte_9D0, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000009B8                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000009D0 ; ELF String Table
LOAD:00000000000009D0 byte_9D0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009D0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000009D1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000DA8↓o
LOAD:00000000000009DB aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000009E2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009EF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009F9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A01 aFopen          db 'fopen',0            ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A07 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000A0F aDcngettext     db 'dcngettext',0       ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000A1A aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000A21 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A29 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000A33 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000A44 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000A4D aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000A55 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000A5B aStdin          db 'stdin',0            ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000A61 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A61                                         ; LOAD:0000000000000820↑o
LOAD:0000000000000A67 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000A67                                         ; DATA XREF: LOAD:0000000000000940↑o
LOAD:0000000000000A7F aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A8D aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000A8D                                         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000AA4 aFeof           db 'feof',0             ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000AA9 aPosixFadvise   db 'posix_fadvise',0    ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000AB7 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000ABE aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000AC5 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000ACC aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000ADD aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000AE4 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000AF2 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000AF9 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000AFF aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000B06 aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000B06                                         ; LOAD:0000000000000568↑o
LOAD:0000000000000B0D aStrtoul        db 'strtoul',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000B15 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000B1C aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000B24 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000B30 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000B3E aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000B45 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000B50 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000B57 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000B63 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000B6A aGetdelim       db '__getdelim',0       ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000B75 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000B7C aFread          db 'fread',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000B82 aMemcpyChk      db '__memcpy_chk',0     ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000B8F aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B9A aStrchr         db 'strchr',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000BA1 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000BA1                                         ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000BBF aFdopen         db 'fdopen',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000BC6 aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000BC6                                         ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000BDA aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000BE9 aSetvbuf        db 'setvbuf',0          ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000BF1 aFcntl          db 'fcntl',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000BF7 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000BF7                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000C06 aFwriteUnlocked db 'fwrite_unlocked',0  ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000C16 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000C1D aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000C1D                                         ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000C2F aFerror         db 'ferror',0           ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000C2F                                         ; LOAD:0000000000000790↑o
LOAD:0000000000000C36 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000C3D aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000C48 aStrtoulInterna db '__strtoul_internal',0
LOAD:0000000000000C48                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000C5B aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000C6A aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000C6F aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000C7A aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000C8A aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000C97 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000DB8↓o
LOAD:0000000000000CA1 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000DC8↓o
LOAD:0000000000000CAC aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000DD8↓o
LOAD:0000000000000CB8 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000DE8↓o
LOAD:0000000000000CC2 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000DF8↓o
LOAD:0000000000000CCE aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000CCE                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000CEA aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000CF9 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000CF9                                         ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000D13                 align 4
LOAD:0000000000000D14 ; ELF GNU Symbol Version Table
LOAD:0000000000000D14                 dw 0
LOAD:0000000000000D16                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000D18                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000D1A                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000D1C                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000D1E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000D20                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000D22                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000D24                 dw 2                    ; ferror@@GLIBC_2.2.5
LOAD:0000000000000D26                 dw 2                    ; fread@@GLIBC_2.2.5
LOAD:0000000000000D28                 dw 2                    ; fcntl@@GLIBC_2.2.5
LOAD:0000000000000D2A                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000D2C                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000D2E                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000D30                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000D32                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000D34                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000D36                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000D38                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000D3A                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000D3C                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000D3E                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000D40                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000D42                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000D44                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000D46                 dw 2                    ; __strtoul_internal@@GLIBC_2.2.5
LOAD:0000000000000D48                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000D4A                 dw 2                    ; close@@GLIBC_2.2.5
LOAD:0000000000000D4C                 dw 2                    ; posix_fadvise@@GLIBC_2.2.5
LOAD:0000000000000D4E                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000D50                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000D52                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D54                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000D56                 dw 2                    ; __getdelim@@GLIBC_2.2.5
LOAD:0000000000000D58                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000D5A                 dw 4                    ; __memcpy_chk@@GLIBC_2.3.4
LOAD:0000000000000D5C                 dw 2                    ; feof@@GLIBC_2.2.5
LOAD:0000000000000D5E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000D60                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000D62                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000D64                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000D66                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000D68                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000D6A                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000D6C                 dw 2                    ; fwrite_unlocked@@GLIBC_2.2.5
LOAD:0000000000000D6E                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000D70                 dw 2                    ; fdopen@@GLIBC_2.2.5
LOAD:0000000000000D72                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000D74                 dw 4                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000D76                 dw 2                    ; setvbuf@@GLIBC_2.2.5
LOAD:0000000000000D78                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000D7A                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000D7C                 dw 2                    ; fopen@@GLIBC_2.2.5
LOAD:0000000000000D7E                 dw 2                    ; dcngettext@@GLIBC_2.2.5
LOAD:0000000000000D80                 dw 2                    ; strtoul@@GLIBC_2.2.5
LOAD:0000000000000D82                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000D84                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000D86                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000D88                 dw 4                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000D8A                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000D8C                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000D8E                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000D90                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000D92                 dw 6                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000D94                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000D96                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000D98                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000D9A                 dw 2                    ; stdin@@GLIBC_2.2.5
LOAD:0000000000000D9C                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000D9E                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000DA0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000DA2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000DA4                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000DA6                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000DA8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000DA8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_9D0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000DB8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_9D0, \ ; "GLIBC_2.3"
LOAD:0000000000000DB8                                10h>
LOAD:0000000000000DC8                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_9D0, \ ; "GLIBC_2.14"
LOAD:0000000000000DC8                                10h>
LOAD:0000000000000DD8                 Elf64_Vernaux <9691974h, 0, 4, offset aGlibc234 - offset byte_9D0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000DD8                                10h>
LOAD:0000000000000DE8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_9D0, \ ; "GLIBC_2.4"
LOAD:0000000000000DE8                                10h>
LOAD:0000000000000DF8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_9D0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000E08 ; ELF RELA Relocation Table
LOAD:0000000000000E08                 Elf64_Rela <20C9B0h, 8, 3100h> ; R_X86_64_RELATIVE +3100h
LOAD:0000000000000E20                 Elf64_Rela <20C9B8h, 8, 30C0h> ; R_X86_64_RELATIVE +30C0h
LOAD:0000000000000E38                 Elf64_Rela <20C9C0h, 8, 92C3h> ; R_X86_64_RELATIVE +92C3h
LOAD:0000000000000E50                 Elf64_Rela <20C9E0h, 8, 93A1h> ; R_X86_64_RELATIVE +93A1h
LOAD:0000000000000E68                 Elf64_Rela <20CA00h, 8, 93A8h> ; R_X86_64_RELATIVE +93A8h
LOAD:0000000000000E80                 Elf64_Rela <20CA20h, 8, 93AEh> ; R_X86_64_RELATIVE +93AEh
LOAD:0000000000000E98                 Elf64_Rela <20CA40h, 8, 93BDh> ; R_X86_64_RELATIVE +93BDh
LOAD:0000000000000EB0                 Elf64_Rela <20CA60h, 8, 93C3h> ; R_X86_64_RELATIVE +93C3h
LOAD:0000000000000EC8                 Elf64_Rela <20CA80h, 8, 93CAh> ; R_X86_64_RELATIVE +93CAh
LOAD:0000000000000EE0                 Elf64_Rela <20CAA0h, 8, 93CFh> ; R_X86_64_RELATIVE +93CFh
LOAD:0000000000000EF8                 Elf64_Rela <20CAC0h, 8, 93D4h> ; R_X86_64_RELATIVE +93D4h
LOAD:0000000000000F10                 Elf64_Rela <20CAE0h, 8, 93DBh> ; R_X86_64_RELATIVE +93DBh
LOAD:0000000000000F28                 Elf64_Rela <20CB00h, 8, 93DFh> ; R_X86_64_RELATIVE +93DFh
LOAD:0000000000000F40                 Elf64_Rela <20CB20h, 8, 93E4h> ; R_X86_64_RELATIVE +93E4h
LOAD:0000000000000F58                 Elf64_Rela <20CB40h, 8, 93E9h> ; R_X86_64_RELATIVE +93E9h
LOAD:0000000000000F70                 Elf64_Rela <20CB80h, 8, 93F1h> ; R_X86_64_RELATIVE +93F1h
LOAD:0000000000000F88                 Elf64_Rela <20CB90h, 8, 93F9h> ; R_X86_64_RELATIVE +93F9h
LOAD:0000000000000FA0                 Elf64_Rela <20CBA0h, 8, 9F81h> ; R_X86_64_RELATIVE +9F81h
LOAD:0000000000000FB8                 Elf64_Rela <20CBA8h, 8, 9F89h> ; R_X86_64_RELATIVE +9F89h
LOAD:0000000000000FD0                 Elf64_Rela <20CBB0h, 8, 9F8Fh> ; R_X86_64_RELATIVE +9F8Fh
LOAD:0000000000000FE8                 Elf64_Rela <20CBB8h, 8, 9F9Ch> ; R_X86_64_RELATIVE +9F9Ch
LOAD:0000000000001000                 Elf64_Rela <20CBC0h, 8, 9FA9h> ; R_X86_64_RELATIVE +9FA9h
LOAD:0000000000001018                 Elf64_Rela <20CBC8h, 8, 9FBDh> ; R_X86_64_RELATIVE +9FBDh
LOAD:0000000000001030                 Elf64_Rela <20CBD0h, 8, 9FBFh> ; R_X86_64_RELATIVE +9FBFh
LOAD:0000000000001048                 Elf64_Rela <20CBD8h, 8, 9FA2h> ; R_X86_64_RELATIVE +9FA2h
LOAD:0000000000001060                 Elf64_Rela <20CBE0h, 8, 92B4h> ; R_X86_64_RELATIVE +92B4h
LOAD:0000000000001078                 Elf64_Rela <20CBE8h, 8, 9FC7h> ; R_X86_64_RELATIVE +9FC7h
LOAD:0000000000001090                 Elf64_Rela <20D008h, 8, 20D008h> ; R_X86_64_RELATIVE +20D008h
LOAD:00000000000010A8                 Elf64_Rela <20D020h, 8, 9EB0h> ; R_X86_64_RELATIVE +9EB0h
LOAD:00000000000010C0                 Elf64_Rela <20D028h, 8, 5750h> ; R_X86_64_RELATIVE +5750h
LOAD:00000000000010D8                 Elf64_Rela <20D080h, 8, 20D090h> ; R_X86_64_RELATIVE +20D090h
LOAD:00000000000010F0                 Elf64_Rela <20D098h, 8, 20D140h> ; R_X86_64_RELATIVE +20D140h
LOAD:0000000000001108                 Elf64_Rela <20CFD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001120                 Elf64_Rela <20CFE0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001138                 Elf64_Rela <20CFE8h, 2500000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001150                 Elf64_Rela <20CFF0h, 3B00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000001168                 Elf64_Rela <20CFF8h, 3E00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000001180                 Elf64_Rela <20D018h, 1A00000001h, 0> ; R_X86_64_64 memset
LOAD:0000000000001198                 Elf64_Rela <20D0A0h, 4200000005h, 0> ; R_X86_64_COPY __progname
LOAD:00000000000011B0                 Elf64_Rela <20D0A8h, 4100000005h, 0> ; R_X86_64_COPY stdout
LOAD:00000000000011C8                 Elf64_Rela <20D0B0h, 4300000005h, 0> ; R_X86_64_COPY stdin
LOAD:00000000000011E0                 Elf64_Rela <20D0B8h, 4800000005h, 0> ; R_X86_64_COPY optind
LOAD:00000000000011F8                 Elf64_Rela <20D0C0h, 4900000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000001210                 Elf64_Rela <20D0C8h, 4500000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001228                 Elf64_Rela <20D0E0h, 4700000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001240 ; ELF JMPREL Relocation Table
LOAD:0000000000001240                 Elf64_Rela <20CE00h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000001258                 Elf64_Rela <20CE08h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000001270                 Elf64_Rela <20CE10h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000001288                 Elf64_Rela <20CE18h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000012A0                 Elf64_Rela <20CE20h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:00000000000012B8                 Elf64_Rela <20CE28h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:00000000000012D0                 Elf64_Rela <20CE30h, 800000007h, 0> ; R_X86_64_JUMP_SLOT ferror
LOAD:00000000000012E8                 Elf64_Rela <20CE38h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fread
LOAD:0000000000001300                 Elf64_Rela <20CE40h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fcntl
LOAD:0000000000001318                 Elf64_Rela <20CE48h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001330                 Elf64_Rela <20CE50h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001348                 Elf64_Rela <20CE58h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001360                 Elf64_Rela <20CE60h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001378                 Elf64_Rela <20CE68h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001390                 Elf64_Rela <20CE70h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000013A8                 Elf64_Rela <20CE78h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000013C0                 Elf64_Rela <20CE80h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000013D8                 Elf64_Rela <20CE88h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000013F0                 Elf64_Rela <20CE90h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001408                 Elf64_Rela <20CE98h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001420                 Elf64_Rela <20CEA0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001438                 Elf64_Rela <20CEA8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001450                 Elf64_Rela <20CEB0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:0000000000001468                 Elf64_Rela <20CEB8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT __strtoul_internal
LOAD:0000000000001480                 Elf64_Rela <20CEC0h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001498                 Elf64_Rela <20CEC8h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT close
LOAD:00000000000014B0                 Elf64_Rela <20CED0h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT posix_fadvise
LOAD:00000000000014C8                 Elf64_Rela <20CED8h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000014E0                 Elf64_Rela <20CEE0h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:00000000000014F8                 Elf64_Rela <20CEE8h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001510                 Elf64_Rela <20CEF0h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __getdelim
LOAD:0000000000001528                 Elf64_Rela <20CEF8h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001540                 Elf64_Rela <20CF00h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __memcpy_chk
LOAD:0000000000001558                 Elf64_Rela <20CF08h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT feof
LOAD:0000000000001570                 Elf64_Rela <20CF10h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001588                 Elf64_Rela <20CF18h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000015A0                 Elf64_Rela <20CF20h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000015B8                 Elf64_Rela <20CF28h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000015D0                 Elf64_Rela <20CF30h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000015E8                 Elf64_Rela <20CF38h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001600                 Elf64_Rela <20CF40h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite_unlocked
LOAD:0000000000001618                 Elf64_Rela <20CF48h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001630                 Elf64_Rela <20CF50h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT fdopen
LOAD:0000000000001648                 Elf64_Rela <20CF58h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001660                 Elf64_Rela <20CF60h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001678                 Elf64_Rela <20CF68h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT setvbuf
LOAD:0000000000001690                 Elf64_Rela <20CF70h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000016A8                 Elf64_Rela <20CF78h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000016C0                 Elf64_Rela <20CF80h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT fopen
LOAD:00000000000016D8                 Elf64_Rela <20CF88h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT dcngettext
LOAD:00000000000016F0                 Elf64_Rela <20CF90h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT strtoul
LOAD:0000000000001708                 Elf64_Rela <20CF98h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001720                 Elf64_Rela <20CFA0h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001738                 Elf64_Rela <20CFA8h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001750                 Elf64_Rela <20CFB0h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001768                 Elf64_Rela <20CFB8h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001780                 Elf64_Rela <20CFC0h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001798                 Elf64_Rela <20CFC8h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:00000000000017B0                 Elf64_Rela <20CFD0h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000017B0 LOAD            ends
LOAD:00000000000017B0
.init:00000000000017C8 ; ===========================================================================
.init:00000000000017C8
.init:00000000000017C8 ; Segment type: Pure code
.init:00000000000017C8 ; Segment permissions: Read/Execute
.init:00000000000017C8 _init           segment dword public 'CODE' use64
.init:00000000000017C8                 assume cs:_init
.init:00000000000017C8                 ;org 17C8h
.init:00000000000017C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000017C8
.init:00000000000017C8 ; =============== S U B R O U T I N E =======================================
.init:00000000000017C8
.init:00000000000017C8
.init:00000000000017C8                 public _init_proc
.init:00000000000017C8 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000017C8                 sub     rsp, 8          ; _init
.init:00000000000017CC                 mov     rax, cs:__gmon_start___ptr
.init:00000000000017D3                 test    rax, rax
.init:00000000000017D6                 jz      short loc_17DA
.init:00000000000017D8                 call    rax ; __gmon_start__
.init:00000000000017DA
.init:00000000000017DA loc_17DA:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000017DA                 add     rsp, 8
.init:00000000000017DE                 retn
.init:00000000000017DE _init_proc      endp
.init:00000000000017DE
.init:00000000000017DE _init           ends
.init:00000000000017DE
LOAD:00000000000017DF ; ===========================================================================
LOAD:00000000000017DF
LOAD:00000000000017DF ; Segment type: Pure code
LOAD:00000000000017DF ; Segment permissions: Read/Execute
LOAD:00000000000017DF LOAD            segment byte public 'CODE' use64
LOAD:00000000000017DF                 assume cs:LOAD
LOAD:00000000000017DF                 ;org 17DFh
LOAD:00000000000017DF                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000017DF                 align 20h
LOAD:00000000000017DF LOAD            ends
LOAD:00000000000017DF
.plt:00000000000017E0 ; ===========================================================================
.plt:00000000000017E0
.plt:00000000000017E0 ; Segment type: Pure code
.plt:00000000000017E0 ; Segment permissions: Read/Execute
.plt:00000000000017E0 _plt            segment para public 'CODE' use64
.plt:00000000000017E0                 assume cs:_plt
.plt:00000000000017E0                 ;org 17E0h
.plt:00000000000017E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000017E0
.plt:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017E0
.plt:00000000000017E0
.plt:00000000000017E0 sub_17E0        proc near               ; CODE XREF: .plt:00000000000017FB↓j
.plt:00000000000017E0                                         ; .plt:000000000000180B↓j ...
.plt:00000000000017E0 ; __unwind {
.plt:00000000000017E0                 push    cs:qword_20CDF0
.plt:00000000000017E6                 jmp     cs:qword_20CDF8
.plt:00000000000017E6 sub_17E0        endp
.plt:00000000000017E6
.plt:00000000000017E6 ; ---------------------------------------------------------------------------
.plt:00000000000017EC                 align 10h
.plt:00000000000017F0
.plt:00000000000017F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000017F0
.plt:00000000000017F0 ; Attributes: thunk
.plt:00000000000017F0
.plt:00000000000017F0 ; void free(void *ptr)
.plt:00000000000017F0 _free           proc near               ; CODE XREF: main+905↓p
.plt:00000000000017F0                                         ; blake2b_stream+D8↓p ...
.plt:00000000000017F0                 jmp     cs:free_ptr
.plt:00000000000017F0 _free           endp
.plt:00000000000017F0
.plt:00000000000017F6 ; ---------------------------------------------------------------------------
.plt:00000000000017F6                 push    0
.plt:00000000000017FB                 jmp     sub_17E0
.plt:0000000000001800
.plt:0000000000001800 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001800
.plt:0000000000001800 ; Attributes: noreturn thunk
.plt:0000000000001800
.plt:0000000000001800 ; void __noreturn abort(void)
.plt:0000000000001800 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001800                                         ; quotearg_buffer_restyled:def_5EB1↓p ...
.plt:0000000000001800                 jmp     cs:abort_ptr
.plt:0000000000001800 _abort          endp
.plt:0000000000001800
.plt:0000000000001806 ; ---------------------------------------------------------------------------
.plt:0000000000001806                 push    1
.plt:000000000000180B                 jmp     sub_17E0
.plt:0000000000001810
.plt:0000000000001810 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001810
.plt:0000000000001810 ; Attributes: thunk
.plt:0000000000001810
.plt:0000000000001810 ; int *__errno_location(void)
.plt:0000000000001810 ___errno_location proc near             ; CODE XREF: main+B71↓p
.plt:0000000000001810                                         ; main+EF9↓p ...
.plt:0000000000001810                 jmp     cs:__errno_location_ptr
.plt:0000000000001810 ___errno_location endp
.plt:0000000000001810
.plt:0000000000001816 ; ---------------------------------------------------------------------------
.plt:0000000000001816                 push    2
.plt:000000000000181B                 jmp     sub_17E0
.plt:0000000000001820
.plt:0000000000001820 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001820
.plt:0000000000001820 ; Attributes: thunk
.plt:0000000000001820
.plt:0000000000001820 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001820 _strncmp        proc near               ; CODE XREF: usage+33C↓p
.plt:0000000000001820                                         ; usage+3FD↓p ...
.plt:0000000000001820                 jmp     cs:strncmp_ptr
.plt:0000000000001820 _strncmp        endp
.plt:0000000000001820
.plt:0000000000001826 ; ---------------------------------------------------------------------------
.plt:0000000000001826                 push    3
.plt:000000000000182B                 jmp     sub_17E0
.plt:0000000000001830
.plt:0000000000001830 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001830
.plt:0000000000001830 ; Attributes: noreturn thunk
.plt:0000000000001830
.plt:0000000000001830 ; void __noreturn _exit(int status)
.plt:0000000000001830 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001830                 jmp     cs:_exit_ptr
.plt:0000000000001830 __exit          endp
.plt:0000000000001830
.plt:0000000000001836 ; ---------------------------------------------------------------------------
.plt:0000000000001836                 push    4
.plt:000000000000183B                 jmp     sub_17E0
.plt:0000000000001840
.plt:0000000000001840 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001840
.plt:0000000000001840 ; Attributes: thunk
.plt:0000000000001840
.plt:0000000000001840 ; size_t __fpending(FILE *fp)
.plt:0000000000001840 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001840                 jmp     cs:__fpending_ptr
.plt:0000000000001840 ___fpending     endp
.plt:0000000000001840
.plt:0000000000001846 ; ---------------------------------------------------------------------------
.plt:0000000000001846                 push    5
.plt:000000000000184B                 jmp     sub_17E0
.plt:0000000000001850
.plt:0000000000001850 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001850
.plt:0000000000001850 ; Attributes: thunk
.plt:0000000000001850
.plt:0000000000001850 ; int ferror(FILE *stream)
.plt:0000000000001850 _ferror         proc near               ; CODE XREF: blake2b_stream:loc_56D0↓p
.plt:0000000000001850                 jmp     cs:ferror_ptr
.plt:0000000000001850 _ferror         endp
.plt:0000000000001850
.plt:0000000000001856 ; ---------------------------------------------------------------------------
.plt:0000000000001856                 push    6
.plt:000000000000185B                 jmp     sub_17E0
.plt:0000000000001860
.plt:0000000000001860 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001860
.plt:0000000000001860 ; Attributes: thunk
.plt:0000000000001860
.plt:0000000000001860 ; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001860 _fread          proc near               ; CODE XREF: blake2b_stream+84↓p
.plt:0000000000001860                 jmp     cs:fread_ptr
.plt:0000000000001860 _fread          endp
.plt:0000000000001860
.plt:0000000000001866 ; ---------------------------------------------------------------------------
.plt:0000000000001866                 push    7
.plt:000000000000186B                 jmp     sub_17E0
.plt:0000000000001870
.plt:0000000000001870 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001870
.plt:0000000000001870 ; Attributes: thunk
.plt:0000000000001870
.plt:0000000000001870 ; int fcntl(int fd, int cmd, ...)
.plt:0000000000001870 _fcntl          proc near               ; CODE XREF: rpl_fcntl+80↓p
.plt:0000000000001870                                         ; rpl_fcntl+D4↓p ...
.plt:0000000000001870                 jmp     cs:fcntl_ptr
.plt:0000000000001870 _fcntl          endp
.plt:0000000000001870
.plt:0000000000001876 ; ---------------------------------------------------------------------------
.plt:0000000000001876                 push    8
.plt:000000000000187B                 jmp     sub_17E0
.plt:0000000000001880
.plt:0000000000001880 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001880
.plt:0000000000001880 ; Attributes: thunk
.plt:0000000000001880
.plt:0000000000001880 ; char *textdomain(const char *domainname)
.plt:0000000000001880 _textdomain     proc near               ; CODE XREF: main+6C↓p
.plt:0000000000001880                 jmp     cs:textdomain_ptr
.plt:0000000000001880 _textdomain     endp
.plt:0000000000001880
.plt:0000000000001886 ; ---------------------------------------------------------------------------
.plt:0000000000001886                 push    9
.plt:000000000000188B                 jmp     sub_17E0
.plt:0000000000001890
.plt:0000000000001890 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001890
.plt:0000000000001890 ; Attributes: thunk
.plt:0000000000001890
.plt:0000000000001890 ; int fclose(FILE *stream)
.plt:0000000000001890 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001890                                         ; rpl_fclose+6B↓j
.plt:0000000000001890                 jmp     cs:fclose_ptr
.plt:0000000000001890 _fclose         endp
.plt:0000000000001890
.plt:0000000000001896 ; ---------------------------------------------------------------------------
.plt:0000000000001896                 push    0Ah
.plt:000000000000189B                 jmp     sub_17E0
.plt:00000000000018A0
.plt:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018A0
.plt:00000000000018A0 ; Attributes: thunk
.plt:00000000000018A0
.plt:00000000000018A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000018A0 _bindtextdomain proc near               ; CODE XREF: main+60↓p
.plt:00000000000018A0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000018A0 _bindtextdomain endp
.plt:00000000000018A0
.plt:00000000000018A6 ; ---------------------------------------------------------------------------
.plt:00000000000018A6                 push    0Bh
.plt:00000000000018AB                 jmp     sub_17E0
.plt:00000000000018B0
.plt:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018B0
.plt:00000000000018B0 ; Attributes: thunk
.plt:00000000000018B0
.plt:00000000000018B0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000018B0 _dcgettext      proc near               ; CODE XREF: main+24E↓p
.plt:00000000000018B0                                         ; main+2A4↓p ...
.plt:00000000000018B0                 jmp     cs:dcgettext_ptr
.plt:00000000000018B0 _dcgettext      endp
.plt:00000000000018B0
.plt:00000000000018B6 ; ---------------------------------------------------------------------------
.plt:00000000000018B6                 push    0Ch
.plt:00000000000018BB                 jmp     sub_17E0
.plt:00000000000018C0
.plt:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018C0
.plt:00000000000018C0 ; Attributes: thunk
.plt:00000000000018C0
.plt:00000000000018C0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000018C0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000018C0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000018C0 ___ctype_get_mb_cur_max endp
.plt:00000000000018C0
.plt:00000000000018C6 ; ---------------------------------------------------------------------------
.plt:00000000000018C6                 push    0Dh
.plt:00000000000018CB                 jmp     sub_17E0
.plt:00000000000018D0
.plt:00000000000018D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018D0
.plt:00000000000018D0 ; Attributes: thunk
.plt:00000000000018D0
.plt:00000000000018D0 ; size_t strlen(const char *s)
.plt:00000000000018D0 _strlen         proc near               ; CODE XREF: argmatch+21↓p
.plt:00000000000018D0                                         ; argmatch+AE↓p ...
.plt:00000000000018D0                 jmp     cs:strlen_ptr
.plt:00000000000018D0 _strlen         endp
.plt:00000000000018D0
.plt:00000000000018D6 ; ---------------------------------------------------------------------------
.plt:00000000000018D6                 push    0Eh
.plt:00000000000018DB                 jmp     sub_17E0
.plt:00000000000018E0
.plt:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018E0
.plt:00000000000018E0 ; Attributes: noreturn thunk
.plt:00000000000018E0
.plt:00000000000018E0 ___stack_chk_fail proc near             ; CODE XREF: main:loc_2F82↓p
.plt:00000000000018E0                                         ; blake2b_compress:loc_4FE7↓p ...
.plt:00000000000018E0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000018E0 ___stack_chk_fail endp
.plt:00000000000018E0
.plt:00000000000018E6 ; ---------------------------------------------------------------------------
.plt:00000000000018E6                 push    0Fh
.plt:00000000000018EB                 jmp     sub_17E0
.plt:00000000000018F0
.plt:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000018F0
.plt:00000000000018F0 ; Attributes: thunk
.plt:00000000000018F0
.plt:00000000000018F0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000018F0 _getopt_long    proc near               ; CODE XREF: main+B7↓p
.plt:00000000000018F0                 jmp     cs:getopt_long_ptr
.plt:00000000000018F0 _getopt_long    endp
.plt:00000000000018F0
.plt:00000000000018F6 ; ---------------------------------------------------------------------------
.plt:00000000000018F6                 push    10h
.plt:00000000000018FB                 jmp     sub_17E0
.plt:0000000000001900
.plt:0000000000001900 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001900
.plt:0000000000001900 ; Attributes: thunk
.plt:0000000000001900
.plt:0000000000001900 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001900 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001900                 jmp     cs:mbrtowc_ptr
.plt:0000000000001900 _mbrtowc        endp
.plt:0000000000001900
.plt:0000000000001906 ; ---------------------------------------------------------------------------
.plt:0000000000001906                 push    11h
.plt:000000000000190B                 jmp     sub_17E0
.plt:0000000000001910
.plt:0000000000001910 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001910
.plt:0000000000001910 ; Attributes: thunk
.plt:0000000000001910
.plt:0000000000001910 ; char *strchr(const char *s, int c)
.plt:0000000000001910 _strchr         proc near               ; CODE XREF: main+C09↓p
.plt:0000000000001910                                         ; main+F59↓p ...
.plt:0000000000001910                 jmp     cs:strchr_ptr
.plt:0000000000001910 _strchr         endp
.plt:0000000000001910
.plt:0000000000001916 ; ---------------------------------------------------------------------------
.plt:0000000000001916                 push    12h
.plt:000000000000191B                 jmp     sub_17E0
.plt:0000000000001920
.plt:0000000000001920 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001920
.plt:0000000000001920 ; Attributes: thunk
.plt:0000000000001920
.plt:0000000000001920 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001920 ___overflow     proc near               ; CODE XREF: main+1128↓p
.plt:0000000000001920                                         ; main+114C↓p ...
.plt:0000000000001920                 jmp     cs:__overflow_ptr
.plt:0000000000001920 ___overflow     endp
.plt:0000000000001920
.plt:0000000000001926 ; ---------------------------------------------------------------------------
.plt:0000000000001926                 push    13h
.plt:000000000000192B                 jmp     sub_17E0
.plt:0000000000001930
.plt:0000000000001930 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001930
.plt:0000000000001930 ; Attributes: thunk
.plt:0000000000001930
.plt:0000000000001930 ; char *strrchr(const char *s, int c)
.plt:0000000000001930 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001930                 jmp     cs:strrchr_ptr
.plt:0000000000001930 _strrchr        endp
.plt:0000000000001930
.plt:0000000000001936 ; ---------------------------------------------------------------------------
.plt:0000000000001936                 push    14h
.plt:000000000000193B                 jmp     sub_17E0
.plt:0000000000001940
.plt:0000000000001940 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001940
.plt:0000000000001940 ; Attributes: thunk
.plt:0000000000001940
.plt:0000000000001940 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001940 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001940                                         ; rpl_fseeko+3B↓p
.plt:0000000000001940                 jmp     cs:lseek_ptr
.plt:0000000000001940 _lseek          endp
.plt:0000000000001940
.plt:0000000000001946 ; ---------------------------------------------------------------------------
.plt:0000000000001946                 push    15h
.plt:000000000000194B                 jmp     sub_17E0
.plt:0000000000001950
.plt:0000000000001950 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001950
.plt:0000000000001950 ; Attributes: noreturn thunk
.plt:0000000000001950
.plt:0000000000001950 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001950 ___assert_fail  proc near               ; CODE XREF: xstrtoul+39F↓p
.plt:0000000000001950                                         ; xstrtoumax+39F↓p
.plt:0000000000001950                 jmp     cs:__assert_fail_ptr
.plt:0000000000001950 ___assert_fail  endp
.plt:0000000000001950
.plt:0000000000001956 ; ---------------------------------------------------------------------------
.plt:0000000000001956                 push    16h
.plt:000000000000195B                 jmp     sub_17E0
.plt:0000000000001960
.plt:0000000000001960 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001960
.plt:0000000000001960 ; Attributes: thunk
.plt:0000000000001960
.plt:0000000000001960 ; unsigned __int64 __strtoul_internal(const char *nptr, char **endptr, int base, int group)
.plt:0000000000001960 ___strtoul_internal proc near           ; CODE XREF: xstrtoumax+8E↓p
.plt:0000000000001960                 jmp     cs:__strtoul_internal_ptr
.plt:0000000000001960 ___strtoul_internal endp
.plt:0000000000001960
.plt:0000000000001966 ; ---------------------------------------------------------------------------
.plt:0000000000001966                 push    17h
.plt:000000000000196B                 jmp     sub_17E0
.plt:0000000000001970
.plt:0000000000001970 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001970
.plt:0000000000001970 ; Attributes: thunk
.plt:0000000000001970
.plt:0000000000001970 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001970 _memset         proc near               ; CODE XREF: blake2b_final+97↓p
.plt:0000000000001970                                         ; quotearg_n_options+99↓p ...
.plt:0000000000001970                 jmp     cs:memset_ptr
.plt:0000000000001970 _memset         endp
.plt:0000000000001970
.plt:0000000000001976 ; ---------------------------------------------------------------------------
.plt:0000000000001976                 push    18h
.plt:000000000000197B                 jmp     sub_17E0
.plt:0000000000001980
.plt:0000000000001980 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001980
.plt:0000000000001980 ; Attributes: thunk
.plt:0000000000001980
.plt:0000000000001980 ; int close(int fd)
.plt:0000000000001980 _close          proc near               ; CODE XREF: fopen_safer+6A↓p
.plt:0000000000001980                                         ; rpl_fcntl+1FE↓p
.plt:0000000000001980                 jmp     cs:close_ptr
.plt:0000000000001980 _close          endp
.plt:0000000000001980
.plt:0000000000001986 ; ---------------------------------------------------------------------------
.plt:0000000000001986                 push    19h
.plt:000000000000198B                 jmp     sub_17E0
.plt:0000000000001990
.plt:0000000000001990 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001990
.plt:0000000000001990 ; Attributes: thunk
.plt:0000000000001990
.plt:0000000000001990 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
.plt:0000000000001990 _posix_fadvise  proc near               ; CODE XREF: fdadvise↓j
.plt:0000000000001990                                         ; fadvise+16↓j
.plt:0000000000001990                 jmp     cs:posix_fadvise_ptr
.plt:0000000000001990 _posix_fadvise  endp
.plt:0000000000001990
.plt:0000000000001996 ; ---------------------------------------------------------------------------
.plt:0000000000001996                 push    1Ah
.plt:000000000000199B                 jmp     sub_17E0
.plt:00000000000019A0
.plt:00000000000019A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019A0
.plt:00000000000019A0 ; Attributes: thunk
.plt:00000000000019A0
.plt:00000000000019A0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000019A0 _memcmp         proc near               ; CODE XREF: argmatch+6F↓p
.plt:00000000000019A0                                         ; argmatch_valid+96↓p ...
.plt:00000000000019A0                 jmp     cs:memcmp_ptr
.plt:00000000000019A0 _memcmp         endp
.plt:00000000000019A0
.plt:00000000000019A6 ; ---------------------------------------------------------------------------
.plt:00000000000019A6                 push    1Bh
.plt:00000000000019AB                 jmp     sub_17E0
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Attributes: thunk
.plt:00000000000019B0
.plt:00000000000019B0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000019B0 _fputs_unlocked proc near               ; CODE XREF: main+DD5↓p
.plt:00000000000019B0                                         ; print_filename+AD↓j ...
.plt:00000000000019B0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000019B0 _fputs_unlocked endp
.plt:00000000000019B0
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019B6                 push    1Ch
.plt:00000000000019BB                 jmp     sub_17E0
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000019C0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000019C0                 jmp     cs:calloc_ptr
.plt:00000000000019C0 _calloc         endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    1Dh
.plt:00000000000019CB                 jmp     sub_17E0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; __ssize_t __getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
.plt:00000000000019D0 ___getdelim     proc near               ; CODE XREF: main+4D2↓p
.plt:00000000000019D0                 jmp     cs:__getdelim_ptr
.plt:00000000000019D0 ___getdelim     endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    1Eh
.plt:00000000000019DB                 jmp     sub_17E0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; int strcmp(const char *s1, const char *s2)
.plt:00000000000019E0 _strcmp         proc near               ; CODE XREF: main+41D↓p
.plt:00000000000019E0                 jmp     cs:strcmp_ptr
.plt:00000000000019E0 _strcmp         endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    1Fh
.plt:00000000000019EB                 jmp     sub_17E0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ___memcpy_chk   proc near               ; CODE XREF: blake2b_init_key+B4↓p
.plt:00000000000019F0                 jmp     cs:__memcpy_chk_ptr
.plt:00000000000019F0 ___memcpy_chk   endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    20h ; ' '
.plt:00000000000019FB                 jmp     sub_17E0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int feof(FILE *stream)
.plt:0000000000001A00 _feof           proc near               ; CODE XREF: blake2b_stream+68↓p
.plt:0000000000001A00                 jmp     cs:feof_ptr
.plt:0000000000001A00 _feof           endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    21h ; '!'
.plt:0000000000001A0B                 jmp     sub_17E0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001A10 _memcpy         proc near               ; CODE XREF: blake2b_update_part_3+39↓p
.plt:0000000000001A10                                         ; blake2b_update_part_3+66↓p ...
.plt:0000000000001A10                 jmp     cs:memcpy_ptr
.plt:0000000000001A10 _memcpy         endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    22h ; '"'
.plt:0000000000001A1B                 jmp     sub_17E0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; int fileno(FILE *stream)
.plt:0000000000001A20 _fileno         proc near               ; CODE XREF: fadvise+8↓p
.plt:0000000000001A20                                         ; fopen_safer+17↓p ...
.plt:0000000000001A20                 jmp     cs:fileno_ptr
.plt:0000000000001A20 _fileno         endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    23h ; '#'
.plt:0000000000001A2B                 jmp     sub_17E0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; void *malloc(size_t size)
.plt:0000000000001A30 _malloc         proc near               ; CODE XREF: blake2b_stream+34↓p
.plt:0000000000001A30                                         ; xmalloc+4↓p
.plt:0000000000001A30                 jmp     cs:malloc_ptr
.plt:0000000000001A30 _malloc         endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    24h ; '$'
.plt:0000000000001A3B                 jmp     sub_17E0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int fflush(FILE *stream)
.plt:0000000000001A40 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001A40                                         ; rpl_fflush+3B↓j
.plt:0000000000001A40                 jmp     cs:fflush_ptr
.plt:0000000000001A40 _fflush         endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    25h ; '%'
.plt:0000000000001A4B                 jmp     sub_17E0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; char *nl_langinfo(nl_item item)
.plt:0000000000001A50 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001A50                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001A50 _nl_langinfo    endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    26h ; '&'
.plt:0000000000001A5B                 jmp     sub_17E0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int __freading(FILE *fp)
.plt:0000000000001A60 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001A60                                         ; rpl_fflush+9↓p
.plt:0000000000001A60                 jmp     cs:__freading_ptr
.plt:0000000000001A60 ___freading     endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    27h ; '''
.plt:0000000000001A6B                 jmp     sub_17E0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
.plt:0000000000001A70 _fwrite_unlocked proc near              ; CODE XREF: main+E06↓p
.plt:0000000000001A70                                         ; main+E2F↓p ...
.plt:0000000000001A70                 jmp     cs:fwrite_unlocked_ptr
.plt:0000000000001A70 _fwrite_unlocked endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    28h ; '('
.plt:0000000000001A7B                 jmp     sub_17E0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001A80 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001A80                 jmp     cs:realloc_ptr
.plt:0000000000001A80 _realloc        endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    29h ; ')'
.plt:0000000000001A8B                 jmp     sub_17E0
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; FILE *fdopen(int fd, const char *modes)
.plt:0000000000001A90 _fdopen         proc near               ; CODE XREF: fopen_safer+50↓p
.plt:0000000000001A90                 jmp     cs:fdopen_ptr
.plt:0000000000001A90 _fdopen         endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    2Ah ; '*'
.plt:0000000000001A9B                 jmp     sub_17E0
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001AA0 _setlocale      proc near               ; CODE XREF: main+4D↓p
.plt:0000000000001AA0                                         ; usage+323↓p ...
.plt:0000000000001AA0                 jmp     cs:setlocale_ptr
.plt:0000000000001AA0 _setlocale      endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    2Bh ; '+'
.plt:0000000000001AAB                 jmp     sub_17E0
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ___printf_chk   proc near               ; CODE XREF: main+C5F↓p
.plt:0000000000001AB0                                         ; main+10BE↓p ...
.plt:0000000000001AB0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001AB0 ___printf_chk   endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    2Ch ; ','
.plt:0000000000001ABB                 jmp     sub_17E0
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
.plt:0000000000001AC0 _setvbuf        proc near               ; CODE XREF: main+8D↓p
.plt:0000000000001AC0                 jmp     cs:setvbuf_ptr
.plt:0000000000001AC0 _setvbuf        endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    2Dh ; '-'
.plt:0000000000001ACB                 jmp     sub_17E0
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001AD0 _error          proc near               ; CODE XREF: main+2B5↓p
.plt:0000000000001AD0                                         ; main+2D9↓p ...
.plt:0000000000001AD0                 jmp     cs:error_ptr
.plt:0000000000001AD0 _error          endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    2Eh ; '.'
.plt:0000000000001ADB                 jmp     sub_17E0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001AE0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_8F3A↓j
.plt:0000000000001AE0                 jmp     cs:fseeko_ptr
.plt:0000000000001AE0 _fseeko         endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    2Fh ; '/'
.plt:0000000000001AEB                 jmp     sub_17E0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; FILE *fopen(const char *filename, const char *modes)
.plt:0000000000001AF0 _fopen          proc near               ; CODE XREF: fopen_safer+7↓p
.plt:0000000000001AF0                 jmp     cs:fopen_ptr
.plt:0000000000001AF0 _fopen          endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    30h ; '0'
.plt:0000000000001AFB                 jmp     sub_17E0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
.plt:0000000000001B00 _dcngettext     proc near               ; CODE XREF: main+960↓p
.plt:0000000000001B00                                         ; main+99C↓p ...
.plt:0000000000001B00                 jmp     cs:dcngettext_ptr
.plt:0000000000001B00 _dcngettext     endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    31h ; '1'
.plt:0000000000001B0B                 jmp     sub_17E0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
.plt:0000000000001B10 _strtoul        proc near               ; CODE XREF: xstrtoul+8C↓p
.plt:0000000000001B10                 jmp     cs:strtoul_ptr
.plt:0000000000001B10 _strtoul        endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    32h ; '2'
.plt:0000000000001B1B                 jmp     sub_17E0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001B20 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001B20                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001B20 ___cxa_atexit   endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    33h ; '3'
.plt:0000000000001B2B                 jmp     sub_17E0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: noreturn thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; void __noreturn exit(int status)
.plt:0000000000001B30 _exit           proc near               ; CODE XREF: main+1AC↓p
.plt:0000000000001B30                                         ; usage+58↓p
.plt:0000000000001B30                 jmp     cs:exit_ptr
.plt:0000000000001B30 _exit           endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    34h ; '4'
.plt:0000000000001B3B                 jmp     sub_17E0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001B40 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001B40                 jmp     cs:fwrite_ptr
.plt:0000000000001B40 _fwrite         endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    35h ; '5'
.plt:0000000000001B4B                 jmp     sub_17E0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: thunk
.plt:0000000000001B50
.plt:0000000000001B50 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001B50                                         ; argmatch_valid+7A↓p ...
.plt:0000000000001B50                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001B50 ___fprintf_chk  endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    36h ; '6'
.plt:0000000000001B5B                 jmp     sub_17E0
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001B60 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001B60                 jmp     cs:mbsinit_ptr
.plt:0000000000001B60 _mbsinit        endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    37h ; '7'
.plt:0000000000001B6B                 jmp     sub_17E0
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; int iswprint(wint_t wc)
.plt:0000000000001B70 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001B70                 jmp     cs:iswprint_ptr
.plt:0000000000001B70 _iswprint       endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    38h ; '8'
.plt:0000000000001B7B                 jmp     sub_17E0
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001B80 ___ctype_tolower_loc proc near          ; CODE XREF: main+1199↓p
.plt:0000000000001B80                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001B80 ___ctype_tolower_loc endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    39h ; '9'
.plt:0000000000001B8B                 jmp     sub_17E0
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001B90 ___ctype_b_loc  proc near               ; CODE XREF: main+7A5↓p
.plt:0000000000001B90                                         ; hex_digits+15↓p ...
.plt:0000000000001B90                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001B90 ___ctype_b_loc  endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    3Ah ; ':'
.plt:0000000000001B9B                 jmp     sub_17E0
.plt:0000000000001B9B ; } // starts at 17E0
.plt:0000000000001B9B _plt            ends
.plt:0000000000001B9B
.plt.got:0000000000001BA0 ; ===========================================================================
.plt.got:0000000000001BA0
.plt.got:0000000000001BA0 ; Segment type: Pure code
.plt.got:0000000000001BA0 ; Segment permissions: Read/Execute
.plt.got:0000000000001BA0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001BA0                 assume cs:_plt_got
.plt.got:0000000000001BA0                 ;org 1BA0h
.plt.got:0000000000001BA0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001BA0
.plt.got:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001BA0
.plt.got:0000000000001BA0 ; Attributes: thunk
.plt.got:0000000000001BA0
.plt.got:0000000000001BA0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001BA0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001BA0 ; __unwind {
.plt.got:0000000000001BA0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001BA0 __cxa_finalize  endp
.plt.got:0000000000001BA0
.plt.got:0000000000001BA0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001BA6                 align 8
.plt.got:0000000000001BA6 ; } // starts at 1BA0
.plt.got:0000000000001BA6 _plt_got        ends
.plt.got:0000000000001BA6
LOAD:0000000000001BA8 ; ===========================================================================
LOAD:0000000000001BA8
LOAD:0000000000001BA8 ; Segment type: Pure code
LOAD:0000000000001BA8 ; Segment permissions: Read/Execute
LOAD:0000000000001BA8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001BA8                 assume cs:LOAD
LOAD:0000000000001BA8                 ;org 1BA8h
LOAD:0000000000001BA8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001BA8                 align 10h
LOAD:0000000000001BA8 LOAD            ends
LOAD:0000000000001BA8
.text:0000000000001BB0 ; ===========================================================================
.text:0000000000001BB0
.text:0000000000001BB0 ; Segment type: Pure code
.text:0000000000001BB0 ; Segment permissions: Read/Execute
.text:0000000000001BB0 _text           segment para public 'CODE' use64
.text:0000000000001BB0                 assume cs:_text
.text:0000000000001BB0                 ;org 1BB0h
.text:0000000000001BB0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001BB0
.text:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BB0
.text:0000000000001BB0
.text:0000000000001BB0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001BB0                 public main
.text:0000000000001BB0 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001BB0
.text:0000000000001BB0 lineptr         = qword ptr -170h
.text:0000000000001BB0 n               = qword ptr -168h
.text:0000000000001BB0 var_160         = qword ptr -160h
.text:0000000000001BB0 var_158         = qword ptr -158h
.text:0000000000001BB0 s               = qword ptr -150h
.text:0000000000001BB0 var_148         = qword ptr -148h
.text:0000000000001BB0 var_140         = qword ptr -140h
.text:0000000000001BB0 var_138         = qword ptr -138h
.text:0000000000001BB0 var_12C         = dword ptr -12Ch
.text:0000000000001BB0 var_128         = qword ptr -128h
.text:0000000000001BB0 var_120         = qword ptr -120h
.text:0000000000001BB0 var_118         = qword ptr -118h
.text:0000000000001BB0 var_110         = qword ptr -110h
.text:0000000000001BB0 var_108         = qword ptr -108h
.text:0000000000001BB0 var_100         = byte ptr -100h
.text:0000000000001BB0 var_FF          = byte ptr -0FFh
.text:0000000000001BB0 var_FE          = byte ptr -0FEh
.text:0000000000001BB0 var_FD          = byte ptr -0FDh
.text:0000000000001BB0 var_FC          = dword ptr -0FCh
.text:0000000000001BB0 ptr             = qword ptr -0F0h
.text:0000000000001BB0 var_E8          = qword ptr -0E8h
.text:0000000000001BB0 var_E0          = qword ptr -0E0h
.text:0000000000001BB0 var_D8          = byte ptr -0D8h
.text:0000000000001BB0 var_88          = byte ptr -88h
.text:0000000000001BB0 var_40          = qword ptr -40h
.text:0000000000001BB0
.text:0000000000001BB0 ; __unwind {
.text:0000000000001BB0                 push    r15
.text:0000000000001BB2                 push    r14
.text:0000000000001BB4                 xor     r14d, r14d
.text:0000000000001BB7                 push    r13
.text:0000000000001BB9                 push    r12
.text:0000000000001BBB                 mov     r12d, edi
.text:0000000000001BBE                 push    rbp
.text:0000000000001BBF                 push    rbx
.text:0000000000001BC0                 mov     rbx, rsi
.text:0000000000001BC3                 lea     r13, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001BCA                 mov     ebp, 0FFFFFFFFh
.text:0000000000001BCF                 sub     rsp, 148h
.text:0000000000001BD6                 mov     rdi, [rsi]
.text:0000000000001BD9                 mov     rax, fs:28h
.text:0000000000001BE2                 mov     [rsp+178h+var_40], rax
.text:0000000000001BEA                 xor     eax, eax
.text:0000000000001BEC                 call    set_program_name
.text:0000000000001BF1                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001BF8                 mov     edi, 6          ; category
.text:0000000000001BFD                 call    _setlocale
.text:0000000000001C02                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001C09                 lea     rdi, domainname ; "coreutils"
.text:0000000000001C10                 call    _bindtextdomain
.text:0000000000001C15                 lea     rdi, domainname ; "coreutils"
.text:0000000000001C1C                 call    _textdomain
.text:0000000000001C21                 lea     rdi, close_stdout
.text:0000000000001C28                 call    atexit
.text:0000000000001C2D                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001C34                 xor     ecx, ecx        ; n
.text:0000000000001C36                 mov     edx, 1          ; modes
.text:0000000000001C3B                 xor     esi, esi        ; buf
.text:0000000000001C3D                 call    _setvbuf
.text:0000000000001C42                 mov     [rsp+178h+var_100], 0
.text:0000000000001C47                 nop     word ptr [rax+rax+00000000h]
.text:0000000000001C50
.text:0000000000001C50 loc_1C50:                               ; CODE XREF: main+FF↓j
.text:0000000000001C50                                         ; main+13E↓j ...
.text:0000000000001C50                 lea     rcx, long_options ; longopts
.text:0000000000001C57                 lea     rdx, shortopts  ; "l:bctwz"
.text:0000000000001C5E                 xor     r8d, r8d        ; longind
.text:0000000000001C61                 mov     rsi, rbx        ; argv
.text:0000000000001C64                 mov     edi, r12d       ; argc
.text:0000000000001C67                 call    _getopt_long
.text:0000000000001C6C                 cmp     eax, 0FFFFFFFFh
.text:0000000000001C6F                 jz      loc_1E9C
.text:0000000000001C75                 cmp     eax, 77h ; 'w'
.text:0000000000001C78                 jz      loc_1DD0
.text:0000000000001C7E                 jle     short loc_1CB8
.text:0000000000001C80                 cmp     eax, 81h
.text:0000000000001C85                 jz      loc_1D70
.text:0000000000001C8B                 jle     short loc_1CF8
.text:0000000000001C8D                 cmp     eax, 83h
.text:0000000000001C92                 jz      loc_1DB0
.text:0000000000001C98                 jl      loc_1D90
.text:0000000000001C9E                 cmp     eax, 84h
.text:0000000000001CA3                 jnz     short loc_1CDA
.text:0000000000001CA5                 mov     [rsp+178h+var_100], 1
.text:0000000000001CAA                 mov     ebp, 1
.text:0000000000001CAF                 jmp     short loc_1C50
.text:0000000000001CAF ; ---------------------------------------------------------------------------
.text:0000000000001CB1                 align 8
.text:0000000000001CB8
.text:0000000000001CB8 loc_1CB8:                               ; CODE XREF: main+CE↑j
.text:0000000000001CB8                 cmp     eax, 62h ; 'b'
.text:0000000000001CBB                 jz      loc_1DC0
.text:0000000000001CC1                 jle     short loc_1D18
.text:0000000000001CC3                 cmp     eax, 6Ch ; 'l'
.text:0000000000001CC6                 jz      loc_1DF0
.text:0000000000001CCC                 cmp     eax, 74h ; 't'
.text:0000000000001CCF                 jz      loc_1D68
.text:0000000000001CD5                 cmp     eax, 63h ; 'c'
.text:0000000000001CD8                 jz      short loc_1CE8
.text:0000000000001CDA
.text:0000000000001CDA loc_1CDA:                               ; CODE XREF: main+F3↑j
.text:0000000000001CDA                                         ; main+154↓j ...
.text:0000000000001CDA                 mov     edi, 1          ; status
.text:0000000000001CDF                 call    usage
.text:0000000000001CDF ; ---------------------------------------------------------------------------
.text:0000000000001CE4                 align 8
.text:0000000000001CE8
.text:0000000000001CE8 loc_1CE8:                               ; CODE XREF: main+128↑j
.text:0000000000001CE8                 mov     r14d, 1
.text:0000000000001CEE                 jmp     loc_1C50
.text:0000000000001CEE ; ---------------------------------------------------------------------------
.text:0000000000001CF3                 align 8
.text:0000000000001CF8
.text:0000000000001CF8 loc_1CF8:                               ; CODE XREF: main+DB↑j
.text:0000000000001CF8                 cmp     eax, 7Ah ; 'z'
.text:0000000000001CFB                 jz      loc_1E90
.text:0000000000001D01                 add     eax, 0FFFFFF80h
.text:0000000000001D04                 jnz     short loc_1CDA
.text:0000000000001D06                 mov     cs:ignore_missing, 1
.text:0000000000001D0D                 jmp     loc_1C50
.text:0000000000001D0D ; ---------------------------------------------------------------------------
.text:0000000000001D12                 align 8
.text:0000000000001D18
.text:0000000000001D18 loc_1D18:                               ; CODE XREF: main+111↑j
.text:0000000000001D18                 cmp     eax, 0FFFFFF7Dh
.text:0000000000001D1D                 jnz     loc_2EFB
.text:0000000000001D23                 sub     rsp, 8
.text:0000000000001D27                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001D2E                 mov     rcx, cs:Version
.text:0000000000001D35                 push    0
.text:0000000000001D37                 lea     r9, aSamuelNeves ; "Samuel Neves"
.text:0000000000001D3E                 lea     r8, aPadraigBrady ; "Padraig Brady"
.text:0000000000001D45                 lea     rdx, unk_9276
.text:0000000000001D4C                 lea     rsi, aB2sum     ; "b2sum"
.text:0000000000001D53                 xor     eax, eax
.text:0000000000001D55                 call    version_etc
.text:0000000000001D5A                 xor     edi, edi        ; status
.text:0000000000001D5C                 call    _exit
.text:0000000000001D5C ; ---------------------------------------------------------------------------
.text:0000000000001D61                 align 8
.text:0000000000001D68
.text:0000000000001D68 loc_1D68:                               ; CODE XREF: main+11F↑j
.text:0000000000001D68                 xor     ebp, ebp
.text:0000000000001D6A                 jmp     loc_1C50
.text:0000000000001D6A ; ---------------------------------------------------------------------------
.text:0000000000001D6F                 align 10h
.text:0000000000001D70
.text:0000000000001D70 loc_1D70:                               ; CODE XREF: main+D5↑j
.text:0000000000001D70                 mov     cs:status_only, 1
.text:0000000000001D77                 mov     cs:warn, 0
.text:0000000000001D7E                 mov     cs:quiet, 0
.text:0000000000001D85                 jmp     loc_1C50
.text:0000000000001D85 ; ---------------------------------------------------------------------------
.text:0000000000001D8A                 align 10h
.text:0000000000001D90
.text:0000000000001D90 loc_1D90:                               ; CODE XREF: main+E8↑j
.text:0000000000001D90                 mov     cs:status_only, 0
.text:0000000000001D97                 mov     cs:warn, 0
.text:0000000000001D9E                 mov     cs:quiet, 1
.text:0000000000001DA5                 jmp     loc_1C50
.text:0000000000001DA5 ; ---------------------------------------------------------------------------
.text:0000000000001DAA                 align 10h
.text:0000000000001DB0
.text:0000000000001DB0 loc_1DB0:                               ; CODE XREF: main+E2↑j
.text:0000000000001DB0                 mov     cs:strict, 1
.text:0000000000001DB7                 jmp     loc_1C50
.text:0000000000001DB7 ; ---------------------------------------------------------------------------
.text:0000000000001DBC                 align 20h
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: main+10B↑j
.text:0000000000001DC0                 mov     ebp, 1
.text:0000000000001DC5                 jmp     loc_1C50
.text:0000000000001DC5 ; ---------------------------------------------------------------------------
.text:0000000000001DCA                 align 10h
.text:0000000000001DD0
.text:0000000000001DD0 loc_1DD0:                               ; CODE XREF: main+C8↑j
.text:0000000000001DD0                 mov     cs:status_only, 0
.text:0000000000001DD7                 mov     cs:warn, 1
.text:0000000000001DDE                 mov     cs:quiet, 0
.text:0000000000001DE5                 jmp     loc_1C50
.text:0000000000001DE5 ; ---------------------------------------------------------------------------
.text:0000000000001DEA                 align 10h
.text:0000000000001DF0
.text:0000000000001DF0 loc_1DF0:                               ; CODE XREF: main+116↑j
.text:0000000000001DF0                 lea     rsi, msgid      ; "invalid length"
.text:0000000000001DF7                 xor     edi, edi        ; domainname
.text:0000000000001DF9                 mov     edx, 5          ; category
.text:0000000000001DFE                 call    _dcgettext
.text:0000000000001E03                 mov     rdi, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E0A                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001E11                 xor     r9d, r9d
.text:0000000000001E14                 xor     esi, esi
.text:0000000000001E16                 mov     r8, rax
.text:0000000000001E19                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000001E20                 call    xdectoumax
.text:0000000000001E25                 test    al, 7
.text:0000000000001E27                 mov     cs:b2_length, rax
.text:0000000000001E2E                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:0000000000001E35                 jz      loc_1C50
.text:0000000000001E3B                 mov     rdi, r13
.text:0000000000001E3E                 call    quote
.text:0000000000001E43                 lea     rsi, aInvalidLengthS ; "invalid length: %s"
.text:0000000000001E4A                 mov     rbx, rax
.text:0000000000001E4D                 mov     edx, 5          ; category
.text:0000000000001E52                 xor     edi, edi        ; domainname
.text:0000000000001E54                 call    _dcgettext
.text:0000000000001E59                 mov     rcx, rbx
.text:0000000000001E5C                 mov     rdx, rax        ; format
.text:0000000000001E5F                 xor     esi, esi        ; errnum
.text:0000000000001E61                 xor     edi, edi        ; status
.text:0000000000001E63                 xor     eax, eax
.text:0000000000001E65                 call    _error
.text:0000000000001E6A                 lea     rsi, aLengthIsNotAMu ; "length is not a multiple of 8"
.text:0000000000001E71                 mov     edx, 5          ; category
.text:0000000000001E76                 xor     edi, edi        ; domainname
.text:0000000000001E78                 call    _dcgettext
.text:0000000000001E7D                 xor     esi, esi        ; errnum
.text:0000000000001E7F                 mov     rdx, rax        ; format
.text:0000000000001E82                 mov     edi, 1          ; status
.text:0000000000001E87                 xor     eax, eax
.text:0000000000001E89                 call    _error
.text:0000000000001E8E                 xchg    ax, ax
.text:0000000000001E90
.text:0000000000001E90 loc_1E90:                               ; CODE XREF: main+14B↑j
.text:0000000000001E90                 mov     cs:delim, 0
.text:0000000000001E97                 jmp     loc_1C50
.text:0000000000001E9C ; ---------------------------------------------------------------------------
.text:0000000000001E9C
.text:0000000000001E9C loc_1E9C:                               ; CODE XREF: main+BF↑j
.text:0000000000001E9C                 mov     rax, cs:b2_length
.text:0000000000001EA3                 mov     cs:min_digest_line_length, 3
.text:0000000000001EAE                 cmp     rax, 200h
.text:0000000000001EB4                 ja      loc_2F0D
.text:0000000000001EBA                 test    rax, rax
.text:0000000000001EBD                 jnz     short loc_1ED4
.text:0000000000001EBF                 test    r14b, r14b
.text:0000000000001EC2                 jnz     short loc_1ED4
.text:0000000000001EC4                 mov     cs:b2_length, 200h
.text:0000000000001ECF                 mov     eax, 200h
.text:0000000000001ED4
.text:0000000000001ED4 loc_1ED4:                               ; CODE XREF: main+30D↑j
.text:0000000000001ED4                                         ; main+312↑j
.text:0000000000001ED4                 shr     rax, 2
.text:0000000000001ED8                 test    ebp, ebp
.text:0000000000001EDA                 mov     cs:digest_hex_bytes, rax
.text:0000000000001EE1                 setz    al
.text:0000000000001EE4                 test    [rsp+178h+var_100], al
.text:0000000000001EE8                 jnz     loc_2FEA
.text:0000000000001EEE                 cmp     cs:delim, 0Ah
.text:0000000000001EF5                 jz      loc_2263
.text:0000000000001EFB                 test    r14b, r14b
.text:0000000000001EFE                 mov     edx, 5
.text:0000000000001F03                 lea     rsi, aTheZeroOptionI ; "the --zero option is not supported when"...
.text:0000000000001F0A                 jnz     loc_2290
.text:0000000000001F10                 cmp     cs:ignore_missing, 0
.text:0000000000001F17                 jnz     loc_2FD9
.text:0000000000001F1D                 cmp     cs:status_only, 0
.text:0000000000001F24                 jnz     loc_2FC8
.text:0000000000001F2A
.text:0000000000001F2A loc_1F2A:                               ; CODE XREF: main+1409↓j
.text:0000000000001F2A                 cmp     cs:warn, 0
.text:0000000000001F31                 jz      loc_22DA
.text:0000000000001F37                 test    r14b, r14b
.text:0000000000001F3A                 mov     edx, 5
.text:0000000000001F3F                 lea     rsi, aTheWarnOptionI ; "the --warn option is meaningful only wh"...
.text:0000000000001F46                 jz      loc_2290
.text:0000000000001F4C
.text:0000000000001F4C loc_1F4C:                               ; CODE XREF: main+724↓j
.text:0000000000001F4C                                         ; main+74B↓j ...
.text:0000000000001F4C                 cmp     ebp, 0FFFFFFFFh
.text:0000000000001F4F                 jnz     short loc_1F53
.text:0000000000001F51                 xor     ebp, ebp
.text:0000000000001F53
.text:0000000000001F53 loc_1F53:                               ; CODE XREF: main+39F↑j
.text:0000000000001F53                 movsxd  rax, r12d
.text:0000000000001F56                 lea     rax, [rbx+rax*8]
.text:0000000000001F5A                 mov     [rsp+178h+var_118], rax
.text:0000000000001F5F                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001F66                 cmp     eax, r12d
.text:0000000000001F69                 jnz     short loc_1F84
.text:0000000000001F6B                 mov     rsi, [rsp+178h+var_118]
.text:0000000000001F70                 lea     rdi, aLt+2      ; "-"
.text:0000000000001F77                 add     rsi, 8
.text:0000000000001F7B                 mov     [rsi-8], rdi
.text:0000000000001F7F                 mov     [rsp+178h+var_118], rsi
.text:0000000000001F84
.text:0000000000001F84 loc_1F84:                               ; CODE XREF: main+3B9↑j
.text:0000000000001F84                 lea     rax, [rbx+rax*8]
.text:0000000000001F88                 cmp     [rsp+178h+var_118], rax
.text:0000000000001F8D                 mov     [rsp+178h+var_160], rax
.text:0000000000001F92                 jbe     loc_2E7A
.text:0000000000001F98                 cmp     ebp, 1
.text:0000000000001F9B                 mov     [rsp+178h+var_FF], 1
.text:0000000000001FA0                 sbb     eax, eax
.text:0000000000001FA2                 and     eax, 0FFFFFFF6h
.text:0000000000001FA5                 add     eax, 2Ah ; '*'
.text:0000000000001FA8                 mov     [rsp+178h+var_FC], eax
.text:0000000000001FAC                 mov     [rsp+178h+var_FD], al
.text:0000000000001FB0
.text:0000000000001FB0 loc_1FB0:                               ; CODE XREF: main+A6E↓j
.text:0000000000001FB0                 mov     rax, [rsp+178h+var_160]
.text:0000000000001FB5                 test    r14b, r14b
.text:0000000000001FB8                 mov     rdi, [rax]      ; s1
.text:0000000000001FBB                 mov     [rsp+178h+s], rdi
.text:0000000000001FC0                 jz      loc_25E5
.text:0000000000001FC6                 lea     rsi, aLt+2      ; s2
.text:0000000000001FCD                 call    _strcmp
.text:0000000000001FD2                 test    eax, eax
.text:0000000000001FD4                 mov     [rsp+178h+var_12C], eax
.text:0000000000001FD8                 jnz     loc_26F0
.text:0000000000001FDE                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000001FE5                 mov     edx, 5          ; category
.text:0000000000001FEA                 xor     edi, edi        ; domainname
.text:0000000000001FEC                 mov     cs:have_read_stdin, 1
.text:0000000000001FF3                 call    _dcgettext
.text:0000000000001FF8                 mov     r13, cs:stdin@@GLIBC_2_2_5
.text:0000000000001FFF                 mov     [rsp+178h+s], rax
.text:0000000000002004
.text:0000000000002004 loc_2004:                               ; CODE XREF: main+B57↓j
.text:0000000000002004                 lea     rax, [rsp+178h+var_E8]
.text:000000000000200C                 mov     [rsp+178h+ptr], 0
.text:0000000000002018                 mov     [rsp+178h+var_E8], 0
.text:0000000000002024                 mov     [rsp+178h+var_FE], 0
.text:0000000000002029                 mov     byte ptr [rsp+178h+var_128], 0
.text:000000000000202E                 mov     r12d, 1
.text:0000000000002034                 mov     [rsp+178h+n], rax
.text:0000000000002039                 lea     rax, [rsp+178h+ptr]
.text:0000000000002041                 mov     [rsp+178h+var_108], 0
.text:000000000000204A                 mov     [rsp+178h+var_110], 0
.text:0000000000002053                 mov     [rsp+178h+var_148], 0
.text:000000000000205C                 mov     [rsp+178h+lineptr], rax
.text:0000000000002061                 lea     rax, [rsp+178h+var_E0]
.text:0000000000002069                 mov     [rsp+178h+var_120], rax
.text:000000000000206E                 xchg    ax, ax
.text:0000000000002070
.text:0000000000002070 loc_2070:                               ; CODE XREF: main+672↓j
.text:0000000000002070                 mov     rsi, [rsp+178h+n] ; n
.text:0000000000002075                 mov     rdi, [rsp+178h+lineptr] ; lineptr
.text:000000000000207A                 mov     rcx, r13        ; stream
.text:000000000000207D                 mov     edx, 0Ah        ; delimiter
.text:0000000000002082                 call    ___getdelim
.text:0000000000002087                 test    rax, rax
.text:000000000000208A                 jle     loc_24AD
.text:0000000000002090                 mov     rbp, [rsp+178h+ptr]
.text:0000000000002098                 movzx   ecx, byte ptr [rbp+0]
.text:000000000000209C                 cmp     cl, 23h ; '#'
.text:000000000000209F                 jz      loc_2213
.text:00000000000020A5                 cmp     byte ptr [rbp+rax-1], 0Ah
.text:00000000000020AA                 mov     r15, rax
.text:00000000000020AD                 jnz     short loc_20C5
.text:00000000000020AF                 sub     r15, 1
.text:00000000000020B3                 mov     byte ptr [rbp+r15+0], 0
.text:00000000000020B9                 mov     rbp, [rsp+178h+ptr]
.text:00000000000020C1                 movzx   ecx, byte ptr [rbp+0]
.text:00000000000020C5
.text:00000000000020C5 loc_20C5:                               ; CODE XREF: main+4FD↑j
.text:00000000000020C5                 cmp     cl, 20h ; ' '
.text:00000000000020C8                 jz      short loc_20D1
.text:00000000000020CA                 xor     edx, edx
.text:00000000000020CC                 cmp     cl, 9
.text:00000000000020CF                 jnz     short loc_20EB
.text:00000000000020D1
.text:00000000000020D1 loc_20D1:                               ; CODE XREF: main+518↑j
.text:00000000000020D1                 xor     edx, edx
.text:00000000000020D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000020D8
.text:00000000000020D8 loc_20D8:                               ; CODE XREF: main+534↓j
.text:00000000000020D8                                         ; main+539↓j
.text:00000000000020D8                 add     rdx, 1
.text:00000000000020DC                 movzx   ecx, byte ptr [rbp+rdx+0]
.text:00000000000020E1                 cmp     cl, 20h ; ' '
.text:00000000000020E4                 jz      short loc_20D8
.text:00000000000020E6                 cmp     cl, 9
.text:00000000000020E9                 jz      short loc_20D8
.text:00000000000020EB
.text:00000000000020EB loc_20EB:                               ; CODE XREF: main+51F↑j
.text:00000000000020EB                 cmp     cl, 5Ch ; '\'
.text:00000000000020EE                 mov     byte ptr [rsp+178h+var_158], 0
.text:00000000000020F3                 jnz     short loc_20FE
.text:00000000000020F5                 add     rdx, 1
.text:00000000000020F9                 mov     byte ptr [rsp+178h+var_158], r14b
.text:00000000000020FE
.text:00000000000020FE loc_20FE:                               ; CODE XREF: main+543↑j
.text:00000000000020FE                 lea     r8, [rbp+rdx+0]
.text:0000000000002103                 lea     rdi, aBlake2    ; "BLAKE2"
.text:000000000000210A                 mov     ecx, 6
.text:000000000000210F                 mov     rsi, r8
.text:0000000000002112                 repe cmpsb
.text:0000000000002114                 setnbe  al
.text:0000000000002117                 sbb     al, 0
.text:0000000000002119                 test    al, al
.text:000000000000211B                 jnz     loc_2320
.text:0000000000002121                 lea     r9, [rdx+6]
.text:0000000000002125                 lea     r11, [rbp+r9+0]
.text:000000000000212A                 movzx   ebx, byte ptr [r11]
.text:000000000000212E                 test    bl, bl
.text:0000000000002130                 jz      short loc_2192
.text:0000000000002132                 cmp     bl, 20h ; ' '
.text:0000000000002135                 jz      loc_2665
.text:000000000000213B                 cmp     bl, 9
.text:000000000000213E                 jz      loc_2665
.text:0000000000002144                 cmp     bl, 2Dh ; '-'
.text:0000000000002147                 jz      short loc_2192
.text:0000000000002149                 cmp     bl, 28h ; '('
.text:000000000000214C                 jz      loc_26AD
.text:0000000000002152                 lea     rax, [rbp+rdx+7]
.text:0000000000002157                 jmp     short loc_2184
.text:0000000000002157 ; ---------------------------------------------------------------------------
.text:0000000000002159                 align 20h
.text:0000000000002160
.text:0000000000002160 loc_2160:                               ; CODE XREF: main+5E0↓j
.text:0000000000002160                 cmp     bl, 20h ; ' '
.text:0000000000002163                 jz      loc_2665
.text:0000000000002169                 cmp     bl, 9
.text:000000000000216C                 jz      loc_2665
.text:0000000000002172                 cmp     bl, 2Dh ; '-'
.text:0000000000002175                 jz      short loc_2192
.text:0000000000002177                 add     rax, 1
.text:000000000000217B                 cmp     bl, 28h ; '('
.text:000000000000217E                 jz      loc_26AD
.text:0000000000002184
.text:0000000000002184 loc_2184:                               ; CODE XREF: main+5A7↑j
.text:0000000000002184                 movzx   ebx, byte ptr [rax]
.text:0000000000002187                 add     r9, 1
.text:000000000000218B                 mov     r11, rax
.text:000000000000218E                 test    bl, bl
.text:0000000000002190                 jnz     short loc_2160
.text:0000000000002192
.text:0000000000002192 loc_2192:                               ; CODE XREF: main+580↑j
.text:0000000000002192                                         ; main+597↑j ...
.text:0000000000002192                 lea     rsi, algorithm_out_string
.text:0000000000002199                 xor     ecx, ecx
.text:000000000000219B                 xor     edx, edx
.text:000000000000219D                 mov     byte ptr [r11], 0
.text:00000000000021A1                 mov     rdi, r8
.text:00000000000021A4                 mov     [rsp+178h+var_140], r9
.text:00000000000021A9                 call    argmatch
.text:00000000000021AE                 test    rax, rax
.text:00000000000021B1                 mov     r9, [rsp+178h+var_140]
.text:00000000000021B6                 js      short loc_2200
.text:00000000000021B8                 add     r9, 1
.text:00000000000021BC                 mov     cs:b2_algorithm, eax
.text:00000000000021C2
.text:00000000000021C2 loc_21C2:                               ; CODE XREF: main+AF8↓j
.text:00000000000021C2                 cmp     bl, 2Dh ; '-'
.text:00000000000021C5                 jz      loc_2742
.text:00000000000021CB
.text:00000000000021CB loc_21CB:                               ; CODE XREF: main+B3B↓j
.text:00000000000021CB                 mov     cs:b2_length, 200h
.text:00000000000021D6                 mov     eax, 80h
.text:00000000000021DB
.text:00000000000021DB loc_21DB:                               ; CODE XREF: main+BFA↓j
.text:00000000000021DB                 mov     cs:digest_hex_bytes, rax
.text:00000000000021E2                 movzx   eax, byte ptr [rbp+r9+0]
.text:00000000000021E8                 cmp     al, 20h ; ' '
.text:00000000000021EA                 jnz     short loc_21F6
.text:00000000000021EC                 movzx   eax, byte ptr [rbp+r9+1]
.text:00000000000021F2                 add     r9, 1
.text:00000000000021F6
.text:00000000000021F6 loc_21F6:                               ; CODE XREF: main+63A↑j
.text:00000000000021F6                 cmp     al, 28h ; '('
.text:00000000000021F8                 jz      loc_285E
.text:00000000000021FE                 xchg    ax, ax
.text:0000000000002200
.text:0000000000002200 loc_2200:                               ; CODE XREF: main+606↑j
.text:0000000000002200                                         ; main+794↓j ...
.text:0000000000002200                 add     [rsp+178h+var_148], 1
.text:0000000000002206                 cmp     cs:warn, 0
.text:000000000000220D                 jnz     loc_2460
.text:0000000000002213
.text:0000000000002213 loc_2213:                               ; CODE XREF: main+4EF↑j
.text:0000000000002213                                         ; main+10C8↓j
.text:0000000000002213                 test    byte ptr [r13+0], 30h
.text:0000000000002218                 jnz     loc_24AD
.text:000000000000221E
.text:000000000000221E loc_221E:                               ; CODE XREF: main+8F7↓j
.text:000000000000221E                 add     r12, 1
.text:0000000000002222                 jnz     loc_2070
.text:0000000000002228                 mov     rdx, [rsp+178h+s]
.text:000000000000222D                 mov     esi, 3
.text:0000000000002232                 xor     edi, edi
.text:0000000000002234                 call    quotearg_n_style_colon
.text:0000000000002239                 lea     rsi, aSTooManyChecks ; "%s: too many checksum lines"
.text:0000000000002240                 mov     rbx, rax
.text:0000000000002243                 mov     edx, 5          ; category
.text:0000000000002248                 xor     edi, edi        ; domainname
.text:000000000000224A                 call    _dcgettext
.text:000000000000224F                 mov     rcx, rbx
.text:0000000000002252                 mov     rdx, rax        ; format
.text:0000000000002255                 xor     esi, esi        ; errnum
.text:0000000000002257                 mov     edi, 1          ; status
.text:000000000000225C                 xor     eax, eax
.text:000000000000225E                 call    _error
.text:0000000000002263
.text:0000000000002263 loc_2263:                               ; CODE XREF: main+345↑j
.text:0000000000002263                 test    r14b, r14b
.text:0000000000002266                 jz      short loc_227B
.text:0000000000002268                 cmp     [rsp+178h+var_100], 0
.text:000000000000226D                 mov     edx, 5
.text:0000000000002272                 lea     rsi, aTheTagOptionIs ; "the --tag option is meaningless when ve"...
.text:0000000000002279                 jnz     short loc_2290
.text:000000000000227B
.text:000000000000227B loc_227B:                               ; CODE XREF: main+6B6↑j
.text:000000000000227B                 test    ebp, ebp
.text:000000000000227D                 js      short loc_22AA
.text:000000000000227F                 test    r14b, r14b
.text:0000000000002282                 mov     edx, 5          ; category
.text:0000000000002287                 lea     rsi, aTheBinaryAndTe ; "the --binary and --text options are mea"...
.text:000000000000228E                 jz      short loc_22AA
.text:0000000000002290
.text:0000000000002290 loc_2290:                               ; CODE XREF: main+35A↑j
.text:0000000000002290                                         ; main+396↑j ...
.text:0000000000002290                 xor     edi, edi        ; domainname
.text:0000000000002292                 call    _dcgettext
.text:0000000000002297                 xor     esi, esi        ; errnum
.text:0000000000002299                 mov     rdx, rax        ; format
.text:000000000000229C                 xor     edi, edi        ; status
.text:000000000000229E                 xor     eax, eax
.text:00000000000022A0                 call    _error
.text:00000000000022A5                 jmp     loc_1CDA
.text:00000000000022AA ; ---------------------------------------------------------------------------
.text:00000000000022AA
.text:00000000000022AA loc_22AA:                               ; CODE XREF: main+6CD↑j
.text:00000000000022AA                                         ; main+6DE↑j
.text:00000000000022AA                 cmp     cs:ignore_missing, 0
.text:00000000000022B1                 jz      loc_2FB2
.text:00000000000022B7                 test    r14b, r14b
.text:00000000000022BA                 jz      loc_2FD9
.text:00000000000022C0                 cmp     cs:status_only, 0
.text:00000000000022C7                 jz      loc_28FD
.text:00000000000022CD                 cmp     cs:warn, 0
.text:00000000000022D4                 jnz     loc_1F4C
.text:00000000000022DA
.text:00000000000022DA loc_22DA:                               ; CODE XREF: main+381↑j
.text:00000000000022DA                 cmp     cs:quiet, 1
.text:00000000000022E1                 jnz     short loc_22F4
.text:00000000000022E3                 test    r14b, r14b
.text:00000000000022E6                 mov     edx, 5
.text:00000000000022EB                 lea     rsi, aTheQuietOption ; "the --quiet option is meaningful only w"...
.text:00000000000022F2                 jz      short loc_2290
.text:00000000000022F4
.text:00000000000022F4 loc_22F4:                               ; CODE XREF: main+731↑j
.text:00000000000022F4                                         ; main+D5A↓j
.text:00000000000022F4                 cmp     cs:strict, 0
.text:00000000000022FB                 jz      loc_1F4C
.text:0000000000002301                 test    r14b, r14b
.text:0000000000002304                 mov     edx, 5
.text:0000000000002309                 lea     rsi, aTheStrictOptio ; "the --strict option is meaningful only "...
.text:0000000000002310                 jnz     loc_1F4C
.text:0000000000002316                 jmp     loc_2290
.text:0000000000002316 ; ---------------------------------------------------------------------------
.text:000000000000231B                 align 20h
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: main+56B↑j
.text:0000000000002320                 mov     rcx, r15
.text:0000000000002323                 mov     [rsp+178h+var_138], rdx
.text:0000000000002328                 mov     [rsp+178h+var_140], r8
.text:000000000000232D                 sub     rcx, rdx
.text:0000000000002330                 cmp     byte ptr [r8], 5Ch ; '\'
.text:0000000000002334                 setz    al
.text:0000000000002337                 movzx   eax, al
.text:000000000000233A                 add     rax, cs:min_digest_line_length
.text:0000000000002341                 cmp     rcx, rax
.text:0000000000002344                 jb      loc_2200
.text:000000000000234A                 mov     cs:digest_hex_bytes, 0
.text:0000000000002355                 call    ___ctype_b_loc
.text:000000000000235A                 xor     r9d, r9d
.text:000000000000235D                 mov     rdi, [rax]
.text:0000000000002360                 mov     rdx, [rsp+178h+var_138]
.text:0000000000002365                 xor     eax, eax
.text:0000000000002367                 mov     r8, [rsp+178h+var_140]
.text:000000000000236C                 jmp     short loc_2376
.text:000000000000236C ; ---------------------------------------------------------------------------
.text:000000000000236E                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: main+7D4↓j
.text:0000000000002370                 mov     rax, rsi
.text:0000000000002373                 mov     r9d, r14d
.text:0000000000002376
.text:0000000000002376 loc_2376:                               ; CODE XREF: main+7BC↑j
.text:0000000000002376                 movzx   ecx, byte ptr [r8+rax]
.text:000000000000237B                 lea     rsi, [rax+1]
.text:000000000000237F                 test    byte ptr [rdi+rcx*2+1], 10h
.text:0000000000002384                 jnz     short loc_2370
.text:0000000000002386                 test    r9b, r9b
.text:0000000000002389                 jz      loc_2200
.text:000000000000238F                 lea     rcx, [rax-2]
.text:0000000000002393                 mov     cs:digest_hex_bytes, rax
.text:000000000000239A                 cmp     rcx, 7Eh ; '~'
.text:000000000000239E                 ja      loc_2200
.text:00000000000023A4                 test    al, 1
.text:00000000000023A6                 jnz     loc_2200
.text:00000000000023AC                 lea     rbx, [rdx+rax]
.text:00000000000023B0                 lea     rcx, ds:0[rax*4]
.text:00000000000023B8                 lea     rdx, [rbp+rbx+0]
.text:00000000000023BD                 mov     cs:b2_length, rcx
.text:00000000000023C4                 movzx   eax, byte ptr [rdx]
.text:00000000000023C7                 cmp     al, 20h ; ' '
.text:00000000000023C9                 jz      short loc_23D3
.text:00000000000023CB                 cmp     al, 9
.text:00000000000023CD                 jnz     loc_2200
.text:00000000000023D3
.text:00000000000023D3 loc_23D3:                               ; CODE XREF: main+819↑j
.text:00000000000023D3                 mov     byte ptr [rdx], 0
.text:00000000000023D6                 mov     rdi, r8
.text:00000000000023D9                 mov     [rsp+178h+var_140], r8
.text:00000000000023DE                 call    hex_digits
.text:00000000000023E3                 test    al, al
.text:00000000000023E5                 jz      loc_2200
.text:00000000000023EB                 lea     rax, [rbx+1]
.text:00000000000023EF                 mov     rcx, r15
.text:00000000000023F2                 mov     edx, cs:bsd_reversed
.text:00000000000023F8                 mov     r8, [rsp+178h+var_140]
.text:00000000000023FD                 sub     rcx, rax
.text:0000000000002400                 sub     rcx, 1
.text:0000000000002404                 jz      short loc_241D
.text:0000000000002406                 movzx   ecx, byte ptr [rbp+rbx+1]
.text:000000000000240B                 cmp     cl, 20h ; ' '
.text:000000000000240E                 jz      loc_2F87
.text:0000000000002414                 cmp     cl, 2Ah ; '*'
.text:0000000000002417                 jz      loc_2F87
.text:000000000000241D
.text:000000000000241D loc_241D:                               ; CODE XREF: main+854↑j
.text:000000000000241D                 test    edx, edx
.text:000000000000241F                 jz      loc_2200
.text:0000000000002425                 mov     cs:bsd_reversed, 1
.text:000000000000242F
.text:000000000000242F loc_242F:                               ; CODE XREF: main+13DA↓j
.text:000000000000242F                                         ; main+13EE↓j
.text:000000000000242F                 add     rbp, rax
.text:0000000000002432                 cmp     byte ptr [rsp+178h+var_158], 0
.text:0000000000002437                 jz      loc_2B81
.text:000000000000243D                 mov     rsi, r15
.text:0000000000002440                 mov     rdi, rbp
.text:0000000000002443                 mov     [rsp+178h+var_158], r8
.text:0000000000002448                 sub     rsi, rax
.text:000000000000244B                 call    filename_unescape
.text:0000000000002450                 test    rax, rax
.text:0000000000002453                 mov     r8, [rsp+178h+var_158]
.text:0000000000002458                 setnz   al
.text:000000000000245B                 jmp     loc_2B79
.text:0000000000002460 ; ---------------------------------------------------------------------------
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: main+65D↑j
.text:0000000000002460                 mov     rdx, [rsp+178h+s]
.text:0000000000002465                 xor     edi, edi
.text:0000000000002467                 mov     esi, 3
.text:000000000000246C                 call    quotearg_n_style_colon
.text:0000000000002471                 lea     rsi, aSLuImproperlyF ; "%s: %lu: improperly formatted %s checks"...
.text:0000000000002478                 xor     edi, edi        ; domainname
.text:000000000000247A                 mov     edx, 5          ; category
.text:000000000000247F                 mov     rbx, rax
.text:0000000000002482                 call    _dcgettext
.text:0000000000002487                 lea     r9, aBlake2     ; "BLAKE2"
.text:000000000000248E                 mov     rdx, rax        ; format
.text:0000000000002491                 xor     esi, esi        ; errnum
.text:0000000000002493                 xor     edi, edi        ; status
.text:0000000000002495                 xor     eax, eax
.text:0000000000002497                 mov     r8, r12
.text:000000000000249A                 mov     rcx, rbx
.text:000000000000249D                 call    _error
.text:00000000000024A2                 test    byte ptr [r13+0], 30h
.text:00000000000024A7                 jz      loc_221E
.text:00000000000024AD
.text:00000000000024AD loc_24AD:                               ; CODE XREF: main+4DA↑j
.text:00000000000024AD                                         ; main+668↑j
.text:00000000000024AD                 mov     rdi, [rsp+178h+ptr] ; ptr
.text:00000000000024B5                 call    _free
.text:00000000000024BA                 mov     ebx, [r13+0]
.text:00000000000024BE                 and     ebx, 20h
.text:00000000000024C1                 jnz     loc_28BE
.text:00000000000024C7                 cmp     [rsp+178h+var_12C], 0
.text:00000000000024CC                 jnz     loc_290F
.text:00000000000024D2
.text:00000000000024D2 loc_24D2:                               ; CODE XREF: main+D69↓j
.text:00000000000024D2                 cmp     byte ptr [rsp+178h+var_128], 0
.text:00000000000024D7                 jz      loc_2924
.text:00000000000024DD                 cmp     cs:status_only, 0
.text:00000000000024E4                 jnz     loc_28AE
.text:00000000000024EA                 cmp     [rsp+178h+var_148], 0
.text:00000000000024F0                 jz      short loc_2526
.text:00000000000024F2                 mov     r15, [rsp+178h+var_148]
.text:00000000000024F7                 lea     rdx, msgid2     ; "WARNING: %lu lines are improperly forma"...
.text:00000000000024FE                 lea     rsi, msgid1     ; "WARNING: %lu line is improperly formatt"...
.text:0000000000002505                 xor     edi, edi        ; domainname
.text:0000000000002507                 mov     r8d, 5          ; category
.text:000000000000250D                 mov     rcx, r15        ; n
.text:0000000000002510                 call    _dcngettext
.text:0000000000002515                 mov     rcx, r15
.text:0000000000002518                 mov     rdx, rax        ; format
.text:000000000000251B                 xor     esi, esi        ; errnum
.text:000000000000251D                 xor     edi, edi        ; status
.text:000000000000251F                 xor     eax, eax
.text:0000000000002521                 call    _error
.text:0000000000002526
.text:0000000000002526 loc_2526:                               ; CODE XREF: main+940↑j
.text:0000000000002526                 cmp     [rsp+178h+var_110], 0
.text:000000000000252C                 jz      short loc_2562
.text:000000000000252E                 mov     r15, [rsp+178h+var_110]
.text:0000000000002533                 lea     rdx, aWarningLuListe ; "WARNING: %lu listed files could not be "...
.text:000000000000253A                 lea     rsi, aWarningLuListe_0 ; "WARNING: %lu listed file could not be r"...
.text:0000000000002541                 xor     edi, edi        ; domainname
.text:0000000000002543                 mov     r8d, 5          ; category
.text:0000000000002549                 mov     rcx, r15        ; n
.text:000000000000254C                 call    _dcngettext
.text:0000000000002551                 mov     rcx, r15
.text:0000000000002554                 mov     rdx, rax        ; format
.text:0000000000002557                 xor     esi, esi        ; errnum
.text:0000000000002559                 xor     edi, edi        ; status
.text:000000000000255B                 xor     eax, eax
.text:000000000000255D                 call    _error
.text:0000000000002562
.text:0000000000002562 loc_2562:                               ; CODE XREF: main+97C↑j
.text:0000000000002562                 cmp     [rsp+178h+var_108], 0
.text:0000000000002568                 jz      short loc_259E
.text:000000000000256A                 mov     r15, [rsp+178h+var_108]
.text:000000000000256F                 lea     rdx, aWarningLuCompu ; "WARNING: %lu computed checksums did NOT"...
.text:0000000000002576                 lea     rsi, aWarningLuCompu_0 ; "WARNING: %lu computed checksum did NOT "...
.text:000000000000257D                 xor     edi, edi        ; domainname
.text:000000000000257F                 mov     r8d, 5          ; category
.text:0000000000002585                 mov     rcx, r15        ; n
.text:0000000000002588                 call    _dcngettext
.text:000000000000258D                 mov     rcx, r15
.text:0000000000002590                 mov     rdx, rax        ; format
.text:0000000000002593                 xor     esi, esi        ; errnum
.text:0000000000002595                 xor     edi, edi        ; status
.text:0000000000002597                 xor     eax, eax
.text:0000000000002599                 call    _error
.text:000000000000259E
.text:000000000000259E loc_259E:                               ; CODE XREF: main+9B8↑j
.text:000000000000259E                 cmp     cs:ignore_missing, 0
.text:00000000000025A5                 jz      loc_28AE
.text:00000000000025AB                 cmp     [rsp+178h+var_FE], 0
.text:00000000000025B0                 jz      loc_2C7D
.text:00000000000025B6
.text:00000000000025B6 loc_25B6:                               ; CODE XREF: main+D03↓j
.text:00000000000025B6                 mov     rax, [rsp+178h+var_110]
.text:00000000000025BB                 or      rax, [rsp+178h+var_108]
.text:00000000000025C0                 jnz     short loc_25DA
.text:00000000000025C2                 movzx   eax, cs:strict
.text:00000000000025C9                 xor     eax, 1
.text:00000000000025CC                 cmp     [rsp+178h+var_148], 0
.text:00000000000025D2                 setz    bl
.text:00000000000025D5                 or      eax, ebx
.text:00000000000025D7                 movzx   ebx, al
.text:00000000000025DA
.text:00000000000025DA loc_25DA:                               ; CODE XREF: main+A10↑j
.text:00000000000025DA                                         ; main+D09↓j ...
.text:00000000000025DA                 mov     eax, ebx
.text:00000000000025DC                 and     eax, 1
.text:00000000000025DF
.text:00000000000025DF loc_25DF:                               ; CODE XREF: main+B8D↓j
.text:00000000000025DF                                         ; main+D48↓j
.text:00000000000025DF                 and     [rsp+178h+var_FF], al
.text:00000000000025E3                 jmp     short loc_260E
.text:00000000000025E5 ; ---------------------------------------------------------------------------
.text:00000000000025E5
.text:00000000000025E5 loc_25E5:                               ; CODE XREF: main+410↑j
.text:00000000000025E5                 lea     rbx, [rsp+178h+var_D8]
.text:00000000000025ED                 mov     rdi, [rsp+178h+s]
.text:00000000000025F2                 lea     rdx, [rsp+178h+var_E0]
.text:00000000000025FA                 mov     rsi, rbx
.text:00000000000025FD                 call    digest_file_isra_1
.text:0000000000002602                 test    al, al
.text:0000000000002604                 jnz     loc_27AF
.text:000000000000260A
.text:000000000000260A loc_260A:                               ; CODE XREF: main+CA9↓j
.text:000000000000260A                                         ; main+12F9↓j
.text:000000000000260A                 mov     [rsp+178h+var_FF], al
.text:000000000000260E
.text:000000000000260E loc_260E:                               ; CODE XREF: main+A33↑j
.text:000000000000260E                 add     [rsp+178h+var_160], 8
.text:0000000000002614                 mov     rax, [rsp+178h+var_160]
.text:0000000000002619                 cmp     [rsp+178h+var_118], rax
.text:000000000000261E                 ja      loc_1FB0
.text:0000000000002624
.text:0000000000002624 loc_2624:                               ; CODE XREF: main+12CF↓j
.text:0000000000002624                 cmp     cs:have_read_stdin, 0
.text:000000000000262B                 jnz     loc_2A7E
.text:0000000000002631
.text:0000000000002631 loc_2631:                               ; CODE XREF: main+EDD↓j
.text:0000000000002631                 movzx   eax, [rsp+178h+var_FF]
.text:0000000000002636                 xor     eax, 1
.text:0000000000002639                 mov     rsi, [rsp+178h+var_40]
.text:0000000000002641                 xor     rsi, fs:28h
.text:000000000000264A                 movzx   eax, al
.text:000000000000264D                 jnz     loc_2F82
.text:0000000000002653                 add     rsp, 148h
.text:000000000000265A                 pop     rbx
.text:000000000000265B                 pop     rbp
.text:000000000000265C                 pop     r12
.text:000000000000265E                 pop     r13
.text:0000000000002660                 pop     r14
.text:0000000000002662                 pop     r15
.text:0000000000002664                 retn
.text:0000000000002665 ; ---------------------------------------------------------------------------
.text:0000000000002665
.text:0000000000002665 loc_2665:                               ; CODE XREF: main+585↑j
.text:0000000000002665                                         ; main+58E↑j ...
.text:0000000000002665                 lea     rsi, algorithm_out_string
.text:000000000000266C                 xor     ecx, ecx
.text:000000000000266E                 xor     edx, edx
.text:0000000000002670                 mov     byte ptr [r11], 0
.text:0000000000002674                 mov     rdi, r8
.text:0000000000002677                 mov     [rsp+178h+var_138], r9
.text:000000000000267C                 mov     [rsp+178h+var_140], r11
.text:0000000000002681                 call    argmatch
.text:0000000000002686                 test    rax, rax
.text:0000000000002689                 js      loc_2200
.text:000000000000268F                 cmp     bl, 28h ; '('
.text:0000000000002692                 mov     cs:b2_algorithm, eax
.text:0000000000002698                 mov     r11, [rsp+178h+var_140]
.text:000000000000269D                 mov     r9, [rsp+178h+var_138]
.text:00000000000026A2                 jz      short loc_26E7
.text:00000000000026A4                 add     r9, 1
.text:00000000000026A8                 jmp     loc_21C2
.text:00000000000026AD ; ---------------------------------------------------------------------------
.text:00000000000026AD
.text:00000000000026AD loc_26AD:                               ; CODE XREF: main+59C↑j
.text:00000000000026AD                                         ; main+5CE↑j
.text:00000000000026AD                 lea     rsi, algorithm_out_string
.text:00000000000026B4                 mov     byte ptr [r11], 0
.text:00000000000026B8                 xor     ecx, ecx
.text:00000000000026BA                 xor     edx, edx
.text:00000000000026BC                 mov     rdi, r8
.text:00000000000026BF                 mov     [rsp+178h+var_138], r9
.text:00000000000026C4                 mov     [rsp+178h+var_140], r11
.text:00000000000026C9                 call    argmatch
.text:00000000000026CE                 test    rax, rax
.text:00000000000026D1                 mov     r11, [rsp+178h+var_140]
.text:00000000000026D6                 mov     r9, [rsp+178h+var_138]
.text:00000000000026DB                 js      loc_2200
.text:00000000000026E1                 mov     cs:b2_algorithm, eax
.text:00000000000026E7
.text:00000000000026E7 loc_26E7:                               ; CODE XREF: main+AF2↑j
.text:00000000000026E7                 mov     byte ptr [r11], 28h ; '('
.text:00000000000026EB                 jmp     loc_21CB
.text:00000000000026F0 ; ---------------------------------------------------------------------------
.text:00000000000026F0
.text:00000000000026F0 loc_26F0:                               ; CODE XREF: main+428↑j
.text:00000000000026F0                 mov     rdi, [rsp+178h+s]
.text:00000000000026F5                 lea     rsi, aSReadError+0Dh ; "r"
.text:00000000000026FC                 call    fopen_safer
.text:0000000000002701                 test    rax, rax
.text:0000000000002704                 mov     r13, rax
.text:0000000000002707                 jnz     loc_2004
.text:000000000000270D
.text:000000000000270D loc_270D:                               ; CODE XREF: main+D6F↓j
.text:000000000000270D                 mov     rdx, [rsp+178h+s]
.text:0000000000002712                 mov     esi, 3
.text:0000000000002717                 xor     edi, edi
.text:0000000000002719                 call    quotearg_n_style_colon
.text:000000000000271E                 mov     rbx, rax
.text:0000000000002721                 call    ___errno_location
.text:0000000000002726                 mov     esi, [rax]      ; errnum
.text:0000000000002728                 lea     rdx, aS_1+2     ; format
.text:000000000000272F                 xor     eax, eax
.text:0000000000002731                 mov     rcx, rbx
.text:0000000000002734                 xor     edi, edi        ; status
.text:0000000000002736                 call    _error
.text:000000000000273B                 xor     eax, eax
.text:000000000000273D                 jmp     loc_25DF
.text:0000000000002742 ; ---------------------------------------------------------------------------
.text:0000000000002742
.text:0000000000002742 loc_2742:                               ; CODE XREF: main+615↑j
.text:0000000000002742                 mov     rcx, [rsp+178h+var_120]
.text:0000000000002747                 lea     rdi, [rbp+r9+0] ; nptr
.text:000000000000274C                 xor     r8d, r8d
.text:000000000000274F                 xor     edx, edx
.text:0000000000002751                 xor     esi, esi
.text:0000000000002753                 mov     [rsp+178h+var_140], r9
.text:0000000000002758                 call    xstrtoul
.text:000000000000275D                 test    eax, eax
.text:000000000000275F                 jnz     loc_2200
.text:0000000000002765                 mov     rax, [rsp+178h+var_E0]
.text:000000000000276D                 mov     r9, [rsp+178h+var_140]
.text:0000000000002772                 lea     rdx, [rax-1]
.text:0000000000002776                 cmp     rdx, 1FFh
.text:000000000000277D                 ja      loc_2200
.text:0000000000002783                 test    al, 7
.text:0000000000002785                 jnz     loc_2200
.text:000000000000278B                 mov     cs:b2_length, rax
.text:0000000000002792                 jmp     short loc_2798
.text:0000000000002794 ; ---------------------------------------------------------------------------
.text:0000000000002794
.text:0000000000002794 loc_2794:                               ; CODE XREF: main+BF4↓j
.text:0000000000002794                 add     r9, 1
.text:0000000000002798
.text:0000000000002798 loc_2798:                               ; CODE XREF: main+BE2↑j
.text:0000000000002798                 movsx   edx, byte ptr [rbp+r9+0]
.text:000000000000279E                 sub     edx, 30h ; '0'
.text:00000000000027A1                 cmp     edx, 9
.text:00000000000027A4                 jbe     short loc_2794
.text:00000000000027A6                 shr     rax, 2
.text:00000000000027AA                 jmp     loc_21DB
.text:00000000000027AF ; ---------------------------------------------------------------------------
.text:00000000000027AF
.text:00000000000027AF loc_27AF:                               ; CODE XREF: main+A54↑j
.text:00000000000027AF                 mov     rdi, [rsp+178h+s] ; s
.text:00000000000027B4                 mov     esi, 5Ch ; '\'  ; c
.text:00000000000027B9                 call    _strchr
.text:00000000000027BE                 test    rax, rax
.text:00000000000027C1                 jz      loc_2AFF
.text:00000000000027C7
.text:00000000000027C7 loc_27C7:                               ; CODE XREF: main+F61↓j
.text:00000000000027C7                 cmp     cs:delim, 0Ah
.text:00000000000027CE                 jz      loc_2ABF
.text:00000000000027D4
.text:00000000000027D4 loc_27D4:                               ; CODE XREF: main+F67↓j
.text:00000000000027D4                 cmp     [rsp+178h+var_100], 0
.text:00000000000027D9                 jnz     loc_2968
.text:00000000000027DF                 mov     rax, cs:digest_hex_bytes
.text:00000000000027E6                 xor     ebp, ebp
.text:00000000000027E8                 shr     rax, 1
.text:00000000000027EB                 jz      loc_2A28
.text:00000000000027F1
.text:00000000000027F1 loc_27F1:                               ; CODE XREF: main+E72↓j
.text:00000000000027F1                                         ; main+1137↓j
.text:00000000000027F1                 xor     r12d, r12d
.text:00000000000027F4                 nop     dword ptr [rax+00h]
.text:00000000000027F8
.text:00000000000027F8 loc_27F8:                               ; CODE XREF: main+C71↓j
.text:00000000000027F8                 movzx   edx, byte ptr [rbx+r12]
.text:00000000000027FD                 lea     rsi, a02x       ; "%02x"
.text:0000000000002804                 xor     eax, eax
.text:0000000000002806                 mov     edi, 1
.text:000000000000280B                 add     r12, 1
.text:000000000000280F                 call    ___printf_chk
.text:0000000000002814                 mov     rax, cs:digest_hex_bytes
.text:000000000000281B                 shr     rax, 1
.text:000000000000281E                 cmp     rax, r12
.text:0000000000002821                 ja      short loc_27F8
.text:0000000000002823
.text:0000000000002823 loc_2823:                               ; CODE XREF: main+113D↓j
.text:0000000000002823                 cmp     [rsp+178h+var_100], 0
.text:0000000000002828                 jz      loc_2A28
.text:000000000000282E
.text:000000000000282E loc_282E:                               ; CODE XREF: main+EC9↓j
.text:000000000000282E                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002835                 movzx   edx, cs:delim
.text:000000000000283C                 mov     rax, [rdi+28h]
.text:0000000000002840                 cmp     rax, [rdi+30h]
.text:0000000000002844                 jnb     loc_2E9C
.text:000000000000284A                 lea     rcx, [rax+1]
.text:000000000000284E                 mov     [rdi+28h], rcx
.text:0000000000002852                 mov     [rax], dl
.text:0000000000002854                 movzx   eax, [rsp+178h+var_FF]
.text:0000000000002859                 jmp     loc_260A
.text:000000000000285E ; ---------------------------------------------------------------------------
.text:000000000000285E
.text:000000000000285E loc_285E:                               ; CODE XREF: main+648↑j
.text:000000000000285E                 add     r9, 1
.text:0000000000002862                 mov     r10, r15
.text:0000000000002865                 sub     r10, r9
.text:0000000000002868                 jz      loc_2200
.text:000000000000286E                 mov     r11, r10
.text:0000000000002871                 add     rbp, r9
.text:0000000000002874                 sub     r11, 1
.text:0000000000002878                 jz      short loc_2899
.text:000000000000287A                 cmp     byte ptr [rbp+r10-1], 29h ; ')'
.text:0000000000002880                 jnz     short loc_2893
.text:0000000000002882                 jmp     loc_2B1C
.text:0000000000002887 ; ---------------------------------------------------------------------------
.text:0000000000002887
.text:0000000000002887 loc_2887:                               ; CODE XREF: main+CE7↓j
.text:0000000000002887                 cmp     byte ptr [rbp+r11+0], 29h ; ')'
.text:000000000000288D                 jz      loc_2B1C
.text:0000000000002893
.text:0000000000002893 loc_2893:                               ; CODE XREF: main+CD0↑j
.text:0000000000002893                 sub     r11, 1
.text:0000000000002897                 jnz     short loc_2887
.text:0000000000002899
.text:0000000000002899 loc_2899:                               ; CODE XREF: main+CC8↑j
.text:0000000000002899                 cmp     byte ptr [rbp+0], 29h ; ')'
.text:000000000000289D                 jnz     loc_2200
.text:00000000000028A3                 mov     r10, rbp
.text:00000000000028A6                 xor     r11d, r11d
.text:00000000000028A9                 jmp     loc_2B21
.text:00000000000028AE ; ---------------------------------------------------------------------------
.text:00000000000028AE
.text:00000000000028AE loc_28AE:                               ; CODE XREF: main+934↑j
.text:00000000000028AE                                         ; main+9F5↑j
.text:00000000000028AE                 cmp     [rsp+178h+var_FE], 0
.text:00000000000028B3                 jnz     loc_25B6
.text:00000000000028B9                 jmp     loc_25DA
.text:00000000000028BE ; ---------------------------------------------------------------------------
.text:00000000000028BE
.text:00000000000028BE loc_28BE:                               ; CODE XREF: main+911↑j
.text:00000000000028BE                 mov     rdx, [rsp+178h+s]
.text:00000000000028C3                 mov     esi, 3
.text:00000000000028C8                 xor     edi, edi
.text:00000000000028CA                 call    quotearg_n_style_colon
.text:00000000000028CF                 lea     rsi, aSReadError ; "%s: read error"
.text:00000000000028D6                 mov     rbx, rax
.text:00000000000028D9                 mov     edx, 5          ; category
.text:00000000000028DE                 xor     edi, edi        ; domainname
.text:00000000000028E0                 call    _dcgettext
.text:00000000000028E5                 mov     rcx, rbx
.text:00000000000028E8                 mov     rdx, rax        ; format
.text:00000000000028EB                 xor     esi, esi        ; errnum
.text:00000000000028ED                 xor     eax, eax
.text:00000000000028EF                 xor     edi, edi        ; status
.text:00000000000028F1                 call    _error
.text:00000000000028F6                 xor     eax, eax
.text:00000000000028F8                 jmp     loc_25DF
.text:00000000000028FD ; ---------------------------------------------------------------------------
.text:00000000000028FD
.text:00000000000028FD loc_28FD:                               ; CODE XREF: main+717↑j
.text:00000000000028FD                                         ; main+1412↓j
.text:00000000000028FD                 cmp     cs:warn, 0
.text:0000000000002904                 jnz     loc_1F4C
.text:000000000000290A                 jmp     loc_22F4
.text:000000000000290F ; ---------------------------------------------------------------------------
.text:000000000000290F
.text:000000000000290F loc_290F:                               ; CODE XREF: main+91C↑j
.text:000000000000290F                 mov     rdi, r13        ; stream
.text:0000000000002912                 call    rpl_fclose
.text:0000000000002917                 test    eax, eax
.text:0000000000002919                 jz      loc_24D2
.text:000000000000291F                 jmp     loc_270D
.text:0000000000002924 ; ---------------------------------------------------------------------------
.text:0000000000002924
.text:0000000000002924 loc_2924:                               ; CODE XREF: main+927↑j
.text:0000000000002924                 mov     rdx, [rsp+178h+s]
.text:0000000000002929                 xor     edi, edi
.text:000000000000292B                 mov     esi, 3
.text:0000000000002930                 call    quotearg_n_style_colon
.text:0000000000002935                 lea     rsi, aSNoProperlyFor ; "%s: no properly formatted %s checksum l"...
.text:000000000000293C                 xor     edi, edi        ; domainname
.text:000000000000293E                 mov     edx, 5          ; category
.text:0000000000002943                 mov     rbp, rax
.text:0000000000002946                 call    _dcgettext
.text:000000000000294B                 lea     r8, aBlake2     ; "BLAKE2"
.text:0000000000002952                 mov     rdx, rax        ; format
.text:0000000000002955                 mov     rcx, rbp
.text:0000000000002958                 xor     esi, esi        ; errnum
.text:000000000000295A                 xor     edi, edi        ; status
.text:000000000000295C                 xor     eax, eax
.text:000000000000295E                 call    _error
.text:0000000000002963                 jmp     loc_25DA
.text:0000000000002968 ; ---------------------------------------------------------------------------
.text:0000000000002968
.text:0000000000002968 loc_2968:                               ; CODE XREF: main+C29↑j
.text:0000000000002968                 xor     r12d, r12d
.text:000000000000296B                 xor     ebp, ebp
.text:000000000000296D
.text:000000000000296D loc_296D:                               ; CODE XREF: main+F4A↓j
.text:000000000000296D                                         ; main+1157↓j
.text:000000000000296D                 mov     eax, cs:b2_algorithm
.text:0000000000002973                 lea     rsi, algorithm_out_string
.text:000000000000297A                 mov     rdi, [rsi+rax*8] ; s
.text:000000000000297E                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000002985                 call    _fputs_unlocked
.text:000000000000298A                 mov     rdx, cs:b2_length
.text:0000000000002991                 cmp     rdx, 1FFh
.text:0000000000002998                 jbe     loc_2E84
.text:000000000000299E
.text:000000000000299E loc_299E:                               ; CODE XREF: main+12E7↓j
.text:000000000000299E                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000029A5                 lea     rdi, asc_9394   ; " ("
.text:00000000000029AC                 mov     edx, 2          ; n
.text:00000000000029B1                 mov     esi, 1          ; size
.text:00000000000029B6                 call    _fwrite_unlocked
.text:00000000000029BB                 mov     rdi, [rsp+178h+s]
.text:00000000000029C0                 mov     esi, ebp
.text:00000000000029C2                 call    print_filename
.text:00000000000029C7                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000029CE                 lea     rdi, asc_9397   ; ") = "
.text:00000000000029D5                 mov     edx, 4          ; n
.text:00000000000029DA                 mov     esi, 1          ; size
.text:00000000000029DF                 call    _fwrite_unlocked
.text:00000000000029E4                 cmp     [rsp+178h+var_100], 0
.text:00000000000029E9                 jnz     loc_2CDD
.text:00000000000029EF                 test    r12b, r12b
.text:00000000000029F2                 jz      loc_2CDD
.text:00000000000029F8
.text:00000000000029F8 loc_29F8:                               ; CODE XREF: main+F19↓j
.text:00000000000029F8                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000029FF                 mov     rax, [rdi+28h]
.text:0000000000002A03                 cmp     rax, [rdi+30h]
.text:0000000000002A07                 jnb     loc_2CD3
.text:0000000000002A0D                 lea     rdx, [rax+1]
.text:0000000000002A11                 mov     [rdi+28h], rdx
.text:0000000000002A15                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000002A18                 mov     rax, cs:digest_hex_bytes
.text:0000000000002A1F                 shr     rax, 1
.text:0000000000002A22                 jnz     loc_27F1
.text:0000000000002A28
.text:0000000000002A28 loc_2A28:                               ; CODE XREF: main+C3B↑j
.text:0000000000002A28                                         ; main+C78↑j
.text:0000000000002A28                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002A2F                 mov     rax, [rdi+28h]
.text:0000000000002A33                 cmp     [rdi+30h], rax
.text:0000000000002A37                 jbe     loc_2ED3
.text:0000000000002A3D                 lea     rdx, [rax+1]
.text:0000000000002A41                 mov     [rdi+28h], rdx
.text:0000000000002A45                 mov     byte ptr [rax], 20h ; ' '
.text:0000000000002A48
.text:0000000000002A48 loc_2A48:                               ; CODE XREF: main+132D↓j
.text:0000000000002A48                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002A4F                 mov     rax, [rdi+28h]
.text:0000000000002A53                 cmp     rax, [rdi+30h]
.text:0000000000002A57                 jnb     loc_2EC5
.text:0000000000002A5D                 movzx   esi, [rsp+178h+var_FD]
.text:0000000000002A62                 lea     rdx, [rax+1]
.text:0000000000002A66                 mov     [rdi+28h], rdx
.text:0000000000002A6A                 mov     [rax], sil
.text:0000000000002A6D
.text:0000000000002A6D loc_2A6D:                               ; CODE XREF: main+131E↓j
.text:0000000000002A6D                 mov     rdi, [rsp+178h+s]
.text:0000000000002A72                 mov     esi, ebp
.text:0000000000002A74                 call    print_filename
.text:0000000000002A79                 jmp     loc_282E
.text:0000000000002A7E ; ---------------------------------------------------------------------------
.text:0000000000002A7E
.text:0000000000002A7E loc_2A7E:                               ; CODE XREF: main+A7B↑j
.text:0000000000002A7E                 mov     rdi, cs:stdin@@GLIBC_2_2_5 ; stream
.text:0000000000002A85                 call    rpl_fclose
.text:0000000000002A8A                 add     eax, 1
.text:0000000000002A8D                 jnz     loc_2631
.text:0000000000002A93                 lea     rsi, aStandardInput ; "standard input"
.text:0000000000002A9A                 mov     edx, 5          ; category
.text:0000000000002A9F                 xor     edi, edi        ; domainname
.text:0000000000002AA1                 call    _dcgettext
.text:0000000000002AA6                 mov     rbx, rax
.text:0000000000002AA9                 call    ___errno_location
.text:0000000000002AAE                 mov     esi, [rax]      ; errnum
.text:0000000000002AB0                 mov     rdx, rbx        ; format
.text:0000000000002AB3                 mov     edi, 1          ; status
.text:0000000000002AB8                 xor     eax, eax
.text:0000000000002ABA                 call    _error
.text:0000000000002ABF
.text:0000000000002ABF loc_2ABF:                               ; CODE XREF: main+C1E↑j
.text:0000000000002ABF                 cmp     [rsp+178h+var_100], 0
.text:0000000000002AC4                 mov     ebp, 1
.text:0000000000002AC9                 jz      loc_29F8
.text:0000000000002ACF                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002AD6                 mov     rax, [rdi+28h]
.text:0000000000002ADA                 cmp     rax, [rdi+30h]
.text:0000000000002ADE                 jnb     loc_2CF2
.text:0000000000002AE4                 lea     rdx, [rax+1]
.text:0000000000002AE8                 movzx   r12d, [rsp+178h+var_100]
.text:0000000000002AEE                 mov     ebp, 1
.text:0000000000002AF3                 mov     [rdi+28h], rdx
.text:0000000000002AF7                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000002AFA                 jmp     loc_296D
.text:0000000000002AFF ; ---------------------------------------------------------------------------
.text:0000000000002AFF
.text:0000000000002AFF loc_2AFF:                               ; CODE XREF: main+C11↑j
.text:0000000000002AFF                 mov     rdi, [rsp+178h+s] ; s
.text:0000000000002B04                 mov     esi, 0Ah        ; c
.text:0000000000002B09                 call    _strchr
.text:0000000000002B0E                 test    rax, rax
.text:0000000000002B11                 jnz     loc_27C7
.text:0000000000002B17                 jmp     loc_27D4
.text:0000000000002B1C ; ---------------------------------------------------------------------------
.text:0000000000002B1C
.text:0000000000002B1C loc_2B1C:                               ; CODE XREF: main+CD2↑j
.text:0000000000002B1C                                         ; main+CDD↑j
.text:0000000000002B1C                 lea     r10, [rbp+r11+0]
.text:0000000000002B21
.text:0000000000002B21 loc_2B21:                               ; CODE XREF: main+CF9↑j
.text:0000000000002B21                 cmp     byte ptr [rsp+178h+var_158], 0
.text:0000000000002B26                 jnz     loc_2CBA
.text:0000000000002B2C
.text:0000000000002B2C loc_2B2C:                               ; CODE XREF: main+1118↓j
.text:0000000000002B2C                 add     r11, 1
.text:0000000000002B30                 mov     byte ptr [r10], 0
.text:0000000000002B34                 jmp     short loc_2B3A
.text:0000000000002B36 ; ---------------------------------------------------------------------------
.text:0000000000002B36
.text:0000000000002B36 loc_2B36:                               ; CODE XREF: main+F92↓j
.text:0000000000002B36                                         ; main+F96↓j
.text:0000000000002B36                 add     r11, 1
.text:0000000000002B3A
.text:0000000000002B3A loc_2B3A:                               ; CODE XREF: main+F84↑j
.text:0000000000002B3A                 movzx   eax, byte ptr [rbp+r11+0]
.text:0000000000002B40                 cmp     al, 20h ; ' '
.text:0000000000002B42                 jz      short loc_2B36
.text:0000000000002B44                 cmp     al, 9
.text:0000000000002B46                 jz      short loc_2B36
.text:0000000000002B48                 cmp     al, 3Dh ; '='
.text:0000000000002B4A                 jnz     loc_2200
.text:0000000000002B50                 lea     rdx, [rbp+r11+1]
.text:0000000000002B55
.text:0000000000002B55 loc_2B55:                               ; CODE XREF: main+FB1↓j
.text:0000000000002B55                                         ; main+FB5↓j
.text:0000000000002B55                 movzx   eax, byte ptr [rdx]
.text:0000000000002B58                 mov     r8, rdx
.text:0000000000002B5B                 lea     rdx, [rdx+1]
.text:0000000000002B5F                 cmp     al, 20h ; ' '
.text:0000000000002B61                 jz      short loc_2B55
.text:0000000000002B63                 cmp     al, 9
.text:0000000000002B65                 jz      short loc_2B55
.text:0000000000002B67                 mov     rdi, r8
.text:0000000000002B6A                 mov     [rsp+178h+var_158], r8
.text:0000000000002B6F                 call    hex_digits
.text:0000000000002B74                 mov     r8, [rsp+178h+var_158]
.text:0000000000002B79
.text:0000000000002B79 loc_2B79:                               ; CODE XREF: main+8AB↑j
.text:0000000000002B79                 test    al, al
.text:0000000000002B7B                 jz      loc_2200
.text:0000000000002B81
.text:0000000000002B81 loc_2B81:                               ; CODE XREF: main+887↑j
.text:0000000000002B81                 mov     eax, [rsp+178h+var_12C]
.text:0000000000002B85                 test    eax, eax
.text:0000000000002B87                 jnz     short loc_2BA7
.text:0000000000002B89                 lea     rdi, aLt+2      ; "-"
.text:0000000000002B90                 mov     ecx, 2
.text:0000000000002B95                 mov     rsi, rbp
.text:0000000000002B98                 repe cmpsb
.text:0000000000002B9A                 setnbe  al
.text:0000000000002B9D                 sbb     al, 0
.text:0000000000002B9F                 test    al, al
.text:0000000000002BA1                 jz      loc_2200
.text:0000000000002BA7
.text:0000000000002BA7 loc_2BA7:                               ; CODE XREF: main+FD7↑j
.text:0000000000002BA7                 cmp     cs:status_only, 0
.text:0000000000002BAE                 mov     dword ptr [rsp+178h+var_158], 0
.text:0000000000002BB6                 jnz     short loc_2BDC
.text:0000000000002BB8                 mov     esi, 0Ah        ; c
.text:0000000000002BBD                 mov     rdi, rbp        ; s
.text:0000000000002BC0                 mov     [rsp+178h+var_140], r8
.text:0000000000002BC5                 call    _strchr
.text:0000000000002BCA                 test    rax, rax
.text:0000000000002BCD                 mov     r8, [rsp+178h+var_140]
.text:0000000000002BD2                 setnz   al
.text:0000000000002BD5                 movzx   eax, al
.text:0000000000002BD8                 mov     dword ptr [rsp+178h+var_158], eax
.text:0000000000002BDC
.text:0000000000002BDC loc_2BDC:                               ; CODE XREF: main+1006↑j
.text:0000000000002BDC                 lea     rbx, [rsp+178h+var_88]
.text:0000000000002BE4                 mov     rdx, [rsp+178h+var_120]
.text:0000000000002BE9                 mov     rdi, rbp
.text:0000000000002BEC                 mov     [rsp+178h+var_140], r8
.text:0000000000002BF1                 mov     rsi, rbx
.text:0000000000002BF4                 call    digest_file_isra_1
.text:0000000000002BF9                 test    al, al
.text:0000000000002BFB                 mov     edi, eax
.text:0000000000002BFD                 mov     r8, [rsp+178h+var_140]
.text:0000000000002C02                 jnz     loc_2D10
.text:0000000000002C08                 add     [rsp+178h+var_110], 1
.text:0000000000002C0E                 cmp     cs:status_only, 0
.text:0000000000002C15                 jnz     short loc_2C73
.text:0000000000002C17                 cmp     dword ptr [rsp+178h+var_158], 0
.text:0000000000002C1C                 jz      short loc_2C3E
.text:0000000000002C1E                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002C25                 mov     rax, [rdi+28h]
.text:0000000000002C29                 cmp     rax, [rdi+30h]
.text:0000000000002C2D                 jnb     loc_2EB6
.text:0000000000002C33                 lea     rdx, [rax+1]
.text:0000000000002C37                 mov     [rdi+28h], rdx
.text:0000000000002C3B                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000002C3E
.text:0000000000002C3E loc_2C3E:                               ; CODE XREF: main+106C↑j
.text:0000000000002C3E                                         ; main+1310↓j
.text:0000000000002C3E                 mov     esi, dword ptr [rsp+178h+var_158]
.text:0000000000002C42                 mov     rdi, rbp
.text:0000000000002C45                 call    print_filename
.text:0000000000002C4A                 lea     rsi, aFailedOpenOrRe ; "FAILED open or read"
.text:0000000000002C51                 mov     edx, 5          ; category
.text:0000000000002C56
.text:0000000000002C56 loc_2C56:                               ; CODE XREF: main+122E↓j
.text:0000000000002C56                                         ; main+12C5↓j
.text:0000000000002C56                 xor     edi, edi        ; domainname
.text:0000000000002C58                 call    _dcgettext
.text:0000000000002C5D                 lea     rsi, aS         ; ": %s\n"
.text:0000000000002C64                 mov     rdx, rax
.text:0000000000002C67                 mov     edi, 1
.text:0000000000002C6C                 xor     eax, eax
.text:0000000000002C6E                 call    ___printf_chk
.text:0000000000002C73
.text:0000000000002C73 loc_2C73:                               ; CODE XREF: main+1065↑j
.text:0000000000002C73                                         ; main+1171↓j ...
.text:0000000000002C73                 mov     byte ptr [rsp+178h+var_128], r14b
.text:0000000000002C78                 jmp     loc_2213
.text:0000000000002C7D ; ---------------------------------------------------------------------------
.text:0000000000002C7D
.text:0000000000002C7D loc_2C7D:                               ; CODE XREF: main+A00↑j
.text:0000000000002C7D                 mov     rdx, [rsp+178h+s]
.text:0000000000002C82                 xor     edi, edi
.text:0000000000002C84                 mov     esi, 3
.text:0000000000002C89                 call    quotearg_n_style_colon
.text:0000000000002C8E                 lea     rsi, aSNoFileWasVeri ; "%s: no file was verified"
.text:0000000000002C95                 mov     rbp, rax
.text:0000000000002C98                 xor     edi, edi        ; domainname
.text:0000000000002C9A                 mov     edx, 5          ; category
.text:0000000000002C9F                 call    _dcgettext
.text:0000000000002CA4                 mov     rcx, rbp
.text:0000000000002CA7                 mov     rdx, rax        ; format
.text:0000000000002CAA                 xor     esi, esi        ; errnum
.text:0000000000002CAC                 xor     edi, edi        ; status
.text:0000000000002CAE                 xor     eax, eax
.text:0000000000002CB0                 call    _error
.text:0000000000002CB5                 jmp     loc_25DA
.text:0000000000002CBA ; ---------------------------------------------------------------------------
.text:0000000000002CBA
.text:0000000000002CBA loc_2CBA:                               ; CODE XREF: main+F76↑j
.text:0000000000002CBA                 mov     rsi, r11
.text:0000000000002CBD                 mov     rdi, rbp
.text:0000000000002CC0                 call    filename_unescape
.text:0000000000002CC5                 test    rax, rax
.text:0000000000002CC8                 jnz     loc_2B2C
.text:0000000000002CCE                 jmp     loc_2200
.text:0000000000002CD3 ; ---------------------------------------------------------------------------
.text:0000000000002CD3
.text:0000000000002CD3 loc_2CD3:                               ; CODE XREF: main+E57↑j
.text:0000000000002CD3                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000002CD8                 call    ___overflow
.text:0000000000002CDD
.text:0000000000002CDD loc_2CDD:                               ; CODE XREF: main+E39↑j
.text:0000000000002CDD                                         ; main+E42↑j
.text:0000000000002CDD                 mov     rax, cs:digest_hex_bytes
.text:0000000000002CE4                 shr     rax, 1
.text:0000000000002CE7                 jnz     loc_27F1
.text:0000000000002CED                 jmp     loc_2823
.text:0000000000002CF2 ; ---------------------------------------------------------------------------
.text:0000000000002CF2
.text:0000000000002CF2 loc_2CF2:                               ; CODE XREF: main+F2E↑j
.text:0000000000002CF2                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000002CF7                 mov     ebp, 1
.text:0000000000002CFC                 call    ___overflow
.text:0000000000002D01                 movzx   r12d, [rsp+178h+var_100]
.text:0000000000002D07                 jmp     loc_296D
.text:0000000000002D07 ; ---------------------------------------------------------------------------
.text:0000000000002D0C                 align 10h
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: main+1052↑j
.text:0000000000002D10                 cmp     cs:ignore_missing, 0
.text:0000000000002D17                 jz      short loc_2D27
.text:0000000000002D19                 cmp     byte ptr [rsp+178h+var_E0], 0
.text:0000000000002D21                 jnz     loc_2C73
.text:0000000000002D27
.text:0000000000002D27 loc_2D27:                               ; CODE XREF: main+1167↑j
.text:0000000000002D27                 mov     rdx, cs:digest_hex_bytes
.text:0000000000002D2E                 mov     [rsp+178h+var_128], r8
.text:0000000000002D33                 shr     rdx, 1
.text:0000000000002D36                 jz      loc_2EAE
.text:0000000000002D3C                 mov     [rsp+178h+var_138], rdx
.text:0000000000002D41                 mov     byte ptr [rsp+178h+var_140], dil
.text:0000000000002D46                 xor     r15d, r15d
.text:0000000000002D49                 call    ___ctype_tolower_loc
.text:0000000000002D4E                 movzx   edi, byte ptr [rsp+178h+var_140]
.text:0000000000002D53                 mov     r9, [rax]
.text:0000000000002D56                 mov     rdx, [rsp+178h+var_138]
.text:0000000000002D5B                 mov     r8, [rsp+178h+var_128]
.text:0000000000002D60                 jmp     short loc_2D85
.text:0000000000002D60 ; ---------------------------------------------------------------------------
.text:0000000000002D62                 align 8
.text:0000000000002D68
.text:0000000000002D68 loc_2D68:                               ; CODE XREF: main+11F7↓j
.text:0000000000002D68                 movzx   ecx, byte ptr [r8+r15*2+1]
.text:0000000000002D6E                 and     eax, 0Fh
.text:0000000000002D71                 movsx   eax, byte ptr [r10+rax]
.text:0000000000002D76                 cmp     [r9+rcx*4], eax
.text:0000000000002D7A                 jnz     short loc_2DA9
.text:0000000000002D7C                 add     r15, 1
.text:0000000000002D80                 cmp     rdx, r15
.text:0000000000002D83                 jz      short loc_2DE3
.text:0000000000002D85
.text:0000000000002D85 loc_2D85:                               ; CODE XREF: main+11B0↑j
.text:0000000000002D85                 movzx   eax, byte ptr [rbx+r15]
.text:0000000000002D8A                 movzx   esi, byte ptr [r8+r15*2]
.text:0000000000002D8F                 lea     r10, bin2hex_7139 ; "0123456789abcdef8.31"
.text:0000000000002D96                 mov     ecx, eax
.text:0000000000002D98                 shr     cl, 4
.text:0000000000002D9B                 and     ecx, 0Fh
.text:0000000000002D9E                 movsx   ecx, byte ptr [r10+rcx]
.text:0000000000002DA3                 cmp     [r9+rsi*4], ecx
.text:0000000000002DA7                 jz      short loc_2D68
.text:0000000000002DA9
.text:0000000000002DA9 loc_2DA9:                               ; CODE XREF: main+11CA↑j
.text:0000000000002DA9                 cmp     rdx, r15
.text:0000000000002DAC                 jz      short loc_2DE3
.text:0000000000002DAE                 add     [rsp+178h+var_108], 1
.text:0000000000002DB4                 cmp     cs:status_only, 0
.text:0000000000002DBB                 jnz     loc_2C73
.text:0000000000002DC1                 cmp     dword ptr [rsp+178h+var_158], 0
.text:0000000000002DC6                 jnz     short loc_2E1C
.text:0000000000002DC8                 xor     esi, esi
.text:0000000000002DCA                 mov     rdi, rbp
.text:0000000000002DCD                 call    print_filename
.text:0000000000002DD2
.text:0000000000002DD2 loc_2DD2:                               ; CODE XREF: main+12A6↓j
.text:0000000000002DD2                 mov     edx, 5
.text:0000000000002DD7                 lea     rsi, aFailed    ; "FAILED"
.text:0000000000002DDE                 jmp     loc_2C56
.text:0000000000002DE3 ; ---------------------------------------------------------------------------
.text:0000000000002DE3
.text:0000000000002DE3 loc_2DE3:                               ; CODE XREF: main+11D3↑j
.text:0000000000002DE3                                         ; main+11FC↑j
.text:0000000000002DE3                 mov     r15, rdx
.text:0000000000002DE6
.text:0000000000002DE6 loc_2DE6:                               ; CODE XREF: main+1301↓j
.text:0000000000002DE6                 movzx   eax, cs:status_only
.text:0000000000002DED                 test    al, al
.text:0000000000002DEF                 mov     [rsp+178h+var_FE], al
.text:0000000000002DF3                 jnz     loc_2C73
.text:0000000000002DF9                 movzx   eax, cs:quiet
.text:0000000000002E00                 test    al, al
.text:0000000000002E02                 mov     [rsp+178h+var_FE], al
.text:0000000000002E06                 jnz     loc_2C73
.text:0000000000002E0C                 cmp     dword ptr [rsp+178h+var_158], 0
.text:0000000000002E11                 mov     [rsp+178h+var_FE], dil
.text:0000000000002E16                 jz      loc_2FA3
.text:0000000000002E1C
.text:0000000000002E1C loc_2E1C:                               ; CODE XREF: main+1216↑j
.text:0000000000002E1C                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000002E23                 mov     rax, [rdi+28h]
.text:0000000000002E27                 cmp     rax, [rdi+30h]
.text:0000000000002E2B                 jnb     loc_2EE2
.text:0000000000002E31                 lea     rcx, [rax+1]
.text:0000000000002E35                 mov     [rdi+28h], rcx
.text:0000000000002E39                 mov     byte ptr [rax], 5Ch ; '\'
.text:0000000000002E3C
.text:0000000000002E3C loc_2E3C:                               ; CODE XREF: main+1346↓j
.text:0000000000002E3C                 mov     esi, 1
.text:0000000000002E41                 mov     rdi, rbp
.text:0000000000002E44                 mov     [rsp+178h+var_158], rdx
.text:0000000000002E49                 call    print_filename
.text:0000000000002E4E                 mov     rdx, [rsp+178h+var_158]
.text:0000000000002E53                 cmp     rdx, r15
.text:0000000000002E56                 jnz     loc_2DD2
.text:0000000000002E5C
.text:0000000000002E5C loc_2E5C:                               ; CODE XREF: main+13FD↓j
.text:0000000000002E5C                 cmp     cs:quiet, 0
.text:0000000000002E63                 jnz     loc_2C73
.text:0000000000002E69                 mov     edx, 5
.text:0000000000002E6E                 lea     rsi, aOk        ; "OK"
.text:0000000000002E75                 jmp     loc_2C56
.text:0000000000002E7A ; ---------------------------------------------------------------------------
.text:0000000000002E7A
.text:0000000000002E7A loc_2E7A:                               ; CODE XREF: main+3E2↑j
.text:0000000000002E7A                 mov     [rsp+178h+var_FF], 1
.text:0000000000002E7F                 jmp     loc_2624
.text:0000000000002E84 ; ---------------------------------------------------------------------------
.text:0000000000002E84
.text:0000000000002E84 loc_2E84:                               ; CODE XREF: main+DE8↑j
.text:0000000000002E84                 lea     rsi, aLu        ; "-%lu"
.text:0000000000002E8B                 mov     edi, 1
.text:0000000000002E90                 xor     eax, eax
.text:0000000000002E92                 call    ___printf_chk
.text:0000000000002E97                 jmp     loc_299E
.text:0000000000002E9C ; ---------------------------------------------------------------------------
.text:0000000000002E9C
.text:0000000000002E9C loc_2E9C:                               ; CODE XREF: main+C94↑j
.text:0000000000002E9C                 movzx   esi, dl         ; int
.text:0000000000002E9F                 call    ___overflow
.text:0000000000002EA4                 movzx   eax, [rsp+178h+var_FF]
.text:0000000000002EA9                 jmp     loc_260A
.text:0000000000002EAE ; ---------------------------------------------------------------------------
.text:0000000000002EAE
.text:0000000000002EAE loc_2EAE:                               ; CODE XREF: main+1186↑j
.text:0000000000002EAE                 xor     r15d, r15d
.text:0000000000002EB1                 jmp     loc_2DE6
.text:0000000000002EB6 ; ---------------------------------------------------------------------------
.text:0000000000002EB6
.text:0000000000002EB6 loc_2EB6:                               ; CODE XREF: main+107D↑j
.text:0000000000002EB6                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000002EBB                 call    ___overflow
.text:0000000000002EC0                 jmp     loc_2C3E
.text:0000000000002EC5 ; ---------------------------------------------------------------------------
.text:0000000000002EC5
.text:0000000000002EC5 loc_2EC5:                               ; CODE XREF: main+EA7↑j
.text:0000000000002EC5                 mov     esi, [rsp+178h+var_FC] ; int
.text:0000000000002EC9                 call    ___overflow
.text:0000000000002ECE                 jmp     loc_2A6D
.text:0000000000002ED3 ; ---------------------------------------------------------------------------
.text:0000000000002ED3
.text:0000000000002ED3 loc_2ED3:                               ; CODE XREF: main+E87↑j
.text:0000000000002ED3                 mov     esi, 20h ; ' '  ; int
.text:0000000000002ED8                 call    ___overflow
.text:0000000000002EDD                 jmp     loc_2A48
.text:0000000000002EE2 ; ---------------------------------------------------------------------------
.text:0000000000002EE2
.text:0000000000002EE2 loc_2EE2:                               ; CODE XREF: main+127B↑j
.text:0000000000002EE2                 mov     esi, 5Ch ; '\'  ; int
.text:0000000000002EE7                 mov     [rsp+178h+var_158], rdx
.text:0000000000002EEC                 call    ___overflow
.text:0000000000002EF1                 mov     rdx, [rsp+178h+var_158]
.text:0000000000002EF6                 jmp     loc_2E3C
.text:0000000000002EFB ; ---------------------------------------------------------------------------
.text:0000000000002EFB
.text:0000000000002EFB loc_2EFB:                               ; CODE XREF: main+16D↑j
.text:0000000000002EFB                 cmp     eax, 0FFFFFF7Eh
.text:0000000000002F00                 jnz     loc_1CDA
.text:0000000000002F06                 xor     edi, edi        ; status
.text:0000000000002F08                 call    usage
.text:0000000000002F0D ; ---------------------------------------------------------------------------
.text:0000000000002F0D
.text:0000000000002F0D loc_2F0D:                               ; CODE XREF: main+304↑j
.text:0000000000002F0D                 mov     rdi, r13
.text:0000000000002F10                 call    quote
.text:0000000000002F15                 lea     rsi, aInvalidLengthS ; "invalid length: %s"
.text:0000000000002F1C                 mov     rbx, rax
.text:0000000000002F1F                 mov     edx, 5          ; category
.text:0000000000002F24                 xor     edi, edi        ; domainname
.text:0000000000002F26                 call    _dcgettext
.text:0000000000002F2B                 mov     rcx, rbx
.text:0000000000002F2E                 mov     rdx, rax        ; format
.text:0000000000002F31                 xor     esi, esi        ; errnum
.text:0000000000002F33                 xor     edi, edi        ; status
.text:0000000000002F35                 xor     eax, eax
.text:0000000000002F37                 call    _error
.text:0000000000002F3C                 mov     edx, cs:b2_algorithm
.text:0000000000002F42                 lea     rax, algorithm_in_string
.text:0000000000002F49                 mov     rdi, [rax+rdx*8]
.text:0000000000002F4D                 call    quote
.text:0000000000002F52                 lea     rsi, aMaximumDigestL ; "maximum digest length for %s is %lu bit"...
.text:0000000000002F59                 mov     rbx, rax
.text:0000000000002F5C                 mov     edx, 5          ; category
.text:0000000000002F61                 xor     edi, edi        ; domainname
.text:0000000000002F63                 call    _dcgettext
.text:0000000000002F68                 mov     r8d, 200h
.text:0000000000002F6E                 mov     rdx, rax        ; format
.text:0000000000002F71                 mov     rcx, rbx
.text:0000000000002F74                 xor     esi, esi        ; errnum
.text:0000000000002F76                 mov     edi, 1          ; status
.text:0000000000002F7B                 xor     eax, eax
.text:0000000000002F7D                 call    _error
.text:0000000000002F82
.text:0000000000002F82 loc_2F82:                               ; CODE XREF: main+A9D↑j
.text:0000000000002F82                 call    ___stack_chk_fail
.text:0000000000002F87 ; ---------------------------------------------------------------------------
.text:0000000000002F87
.text:0000000000002F87 loc_2F87:                               ; CODE XREF: main+85E↑j
.text:0000000000002F87                                         ; main+867↑j
.text:0000000000002F87                 sub     edx, 1
.text:0000000000002F8A                 jz      loc_242F
.text:0000000000002F90                 mov     cs:bsd_reversed, 0
.text:0000000000002F9A                 lea     rax, [rbx+2]
.text:0000000000002F9E                 jmp     loc_242F
.text:0000000000002FA3 ; ---------------------------------------------------------------------------
.text:0000000000002FA3
.text:0000000000002FA3 loc_2FA3:                               ; CODE XREF: main+1266↑j
.text:0000000000002FA3                 xor     esi, esi
.text:0000000000002FA5                 mov     rdi, rbp
.text:0000000000002FA8                 call    print_filename
.text:0000000000002FAD                 jmp     loc_2E5C
.text:0000000000002FB2 ; ---------------------------------------------------------------------------
.text:0000000000002FB2
.text:0000000000002FB2 loc_2FB2:                               ; CODE XREF: main+701↑j
.text:0000000000002FB2                 cmp     cs:status_only, 0
.text:0000000000002FB9                 jz      loc_1F2A
.text:0000000000002FBF                 test    r14b, r14b
.text:0000000000002FC2                 jnz     loc_28FD
.text:0000000000002FC8
.text:0000000000002FC8 loc_2FC8:                               ; CODE XREF: main+374↑j
.text:0000000000002FC8                 mov     edx, 5
.text:0000000000002FCD                 lea     rsi, aTheStatusOptio ; "the --status option is meaningful only "...
.text:0000000000002FD4                 jmp     loc_2290
.text:0000000000002FD9 ; ---------------------------------------------------------------------------
.text:0000000000002FD9
.text:0000000000002FD9 loc_2FD9:                               ; CODE XREF: main+367↑j
.text:0000000000002FD9                                         ; main+70A↑j
.text:0000000000002FD9                 mov     edx, 5
.text:0000000000002FDE                 lea     rsi, aTheIgnoreMissi ; "the --ignore-missing option is meaningf"...
.text:0000000000002FE5                 jmp     loc_2290
.text:0000000000002FEA ; ---------------------------------------------------------------------------
.text:0000000000002FEA
.text:0000000000002FEA loc_2FEA:                               ; CODE XREF: main+338↑j
.text:0000000000002FEA                 mov     edx, 5
.text:0000000000002FEF                 lea     rsi, aTagDoesNotSupp ; "--tag does not support --text mode"
.text:0000000000002FF6                 jmp     loc_2290
.text:0000000000002FF6 ; } // starts at 1BB0
.text:0000000000002FF6 main            endp
.text:0000000000002FF6
.text:0000000000002FF6 ; ---------------------------------------------------------------------------
.text:0000000000002FFB                 align 20h
.text:0000000000003000
.text:0000000000003000 ; =============== S U B R O U T I N E =======================================
.text:0000000000003000
.text:0000000000003000 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000003000
.text:0000000000003000 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000003000                 public start
.text:0000000000003000 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000003000 ; __unwind {
.text:0000000000003000                 xor     ebp, ebp
.text:0000000000003002                 mov     r9, rdx         ; rtld_fini
.text:0000000000003005                 pop     rsi             ; argc
.text:0000000000003006                 mov     rdx, rsp        ; ubp_av
.text:0000000000003009                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000300D                 push    rax
.text:000000000000300E                 push    rsp             ; stack_end
.text:000000000000300F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000003016                 lea     rcx, __libc_csu_init ; init
.text:000000000000301D                 lea     rdi, main       ; main
.text:0000000000003024                 call    cs:__libc_start_main_ptr
.text:000000000000302A                 hlt
.text:000000000000302A ; } // starts at 3000
.text:000000000000302A start           endp
.text:000000000000302A
.text:000000000000302A ; ---------------------------------------------------------------------------
.text:000000000000302B                 align 10h
.text:0000000000003030
.text:0000000000003030 ; =============== S U B R O U T I N E =======================================
.text:0000000000003030
.text:0000000000003030 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003030
.text:0000000000003030 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_30E3↓p
.text:0000000000003030                 lea     rdi, __bss_start
.text:0000000000003037                 push    rbp
.text:0000000000003038                 lea     rax, __bss_start
.text:000000000000303F                 cmp     rax, rdi
.text:0000000000003042                 mov     rbp, rsp
.text:0000000000003045                 jz      short loc_3060
.text:0000000000003047                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000304E                 test    rax, rax
.text:0000000000003051                 jz      short loc_3060
.text:0000000000003053                 pop     rbp
.text:0000000000003054                 jmp     rax
.text:0000000000003054 ; ---------------------------------------------------------------------------
.text:0000000000003056                 align 20h
.text:0000000000003060
.text:0000000000003060 loc_3060:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000003060                                         ; deregister_tm_clones+21↑j
.text:0000000000003060                 pop     rbp
.text:0000000000003061                 retn
.text:0000000000003061 deregister_tm_clones endp
.text:0000000000003061
.text:0000000000003061 ; ---------------------------------------------------------------------------
.text:0000000000003062                 align 10h
.text:0000000000003070
.text:0000000000003070 ; =============== S U B R O U T I N E =======================================
.text:0000000000003070
.text:0000000000003070 ; Attributes: bp-based frame info_from_lumina
.text:0000000000003070
.text:0000000000003070 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000003070                 lea     rdi, __bss_start
.text:0000000000003077                 lea     rsi, __bss_start
.text:000000000000307E                 push    rbp
.text:000000000000307F                 sub     rsi, rdi
.text:0000000000003082                 mov     rbp, rsp
.text:0000000000003085                 sar     rsi, 3
.text:0000000000003089                 mov     rax, rsi
.text:000000000000308C                 shr     rax, 3Fh
.text:0000000000003090                 add     rsi, rax
.text:0000000000003093                 sar     rsi, 1
.text:0000000000003096                 jz      short loc_30B0
.text:0000000000003098                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000309F                 test    rax, rax
.text:00000000000030A2                 jz      short loc_30B0
.text:00000000000030A4                 pop     rbp
.text:00000000000030A5                 jmp     rax
.text:00000000000030A5 ; ---------------------------------------------------------------------------
.text:00000000000030A7                 align 10h
.text:00000000000030B0
.text:00000000000030B0 loc_30B0:                               ; CODE XREF: register_tm_clones+26↑j
.text:00000000000030B0                                         ; register_tm_clones+32↑j
.text:00000000000030B0                 pop     rbp
.text:00000000000030B1                 retn
.text:00000000000030B1 register_tm_clones endp
.text:00000000000030B1
.text:00000000000030B1 ; ---------------------------------------------------------------------------
.text:00000000000030B2                 align 20h
.text:00000000000030C0
.text:00000000000030C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030C0
.text:00000000000030C0 ; Attributes: info_from_lumina
.text:00000000000030C0
.text:00000000000030C0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000030C0                 cmp     cs:completed_7697, 0
.text:00000000000030C7                 jnz     short locret_30F8
.text:00000000000030C9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000030D1                 push    rbp
.text:00000000000030D2                 mov     rbp, rsp
.text:00000000000030D5                 jz      short loc_30E3
.text:00000000000030D7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000030DE                 call    __cxa_finalize
.text:00000000000030E3
.text:00000000000030E3 loc_30E3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000030E3                 call    deregister_tm_clones
.text:00000000000030E8                 mov     cs:completed_7697, 1
.text:00000000000030EF                 pop     rbp
.text:00000000000030F0                 retn
.text:00000000000030F0 ; ---------------------------------------------------------------------------
.text:00000000000030F1                 align 8
.text:00000000000030F8
.text:00000000000030F8 locret_30F8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000030F8                 rep retn
.text:00000000000030F8 __do_global_dtors_aux endp
.text:00000000000030F8
.text:00000000000030F8 ; ---------------------------------------------------------------------------
.text:00000000000030FA                 align 20h
.text:0000000000003100
.text:0000000000003100 ; =============== S U B R O U T I N E =======================================
.text:0000000000003100
.text:0000000000003100 ; Attributes: bp-based frame
.text:0000000000003100
.text:0000000000003100 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000003100                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000003100                 push    rbp
.text:0000000000003101                 mov     rbp, rsp
.text:0000000000003104                 pop     rbp
.text:0000000000003105                 jmp     register_tm_clones
.text:0000000000003105 frame_dummy     endp
.text:0000000000003105
.text:0000000000003105 ; ---------------------------------------------------------------------------
.text:000000000000310A                 align 10h
.text:0000000000003110
.text:0000000000003110 ; =============== S U B R O U T I N E =======================================
.text:0000000000003110
.text:0000000000003110
.text:0000000000003110 filename_unescape proc near             ; CODE XREF: main+89B↑p
.text:0000000000003110                                         ; main+1110↑p
.text:0000000000003110 ; __unwind {
.text:0000000000003110                 xor     edx, edx
.text:0000000000003112                 test    rsi, rsi
.text:0000000000003115                 lea     rcx, [rdi+1]
.text:0000000000003119                 lea     r8, [rsi-1]
.text:000000000000311D                 jz      short loc_3177
.text:000000000000311F
.text:000000000000311F loc_311F:                               ; CODE XREF: filename_unescape+59↓j
.text:000000000000311F                 movzx   eax, byte ptr [rdi+rdx]
.text:0000000000003123                 test    al, al
.text:0000000000003125                 jz      short loc_3150
.text:0000000000003127                 cmp     al, 5Ch ; '\'
.text:0000000000003129                 jnz     short loc_3158
.text:000000000000312B                 cmp     r8, rdx
.text:000000000000312E                 jz      short loc_3150
.text:0000000000003130                 add     rdx, 1
.text:0000000000003134                 movzx   eax, byte ptr [rdi+rdx]
.text:0000000000003138                 cmp     al, 5Ch ; '\'
.text:000000000000313A                 jz      short loc_3180
.text:000000000000313C                 cmp     al, 6Eh ; 'n'
.text:000000000000313E                 jnz     short loc_3150
.text:0000000000003140                 mov     r9, rcx
.text:0000000000003143                 mov     byte ptr [rcx-1], 0Ah
.text:0000000000003147                 jmp     short loc_315E
.text:0000000000003147 ; ---------------------------------------------------------------------------
.text:0000000000003149                 align 10h
.text:0000000000003150
.text:0000000000003150 loc_3150:                               ; CODE XREF: filename_unescape+15↑j
.text:0000000000003150                                         ; filename_unescape+1E↑j ...
.text:0000000000003150                 xor     eax, eax
.text:0000000000003152                 retn
.text:0000000000003152 ; ---------------------------------------------------------------------------
.text:0000000000003153                 align 8
.text:0000000000003158
.text:0000000000003158 loc_3158:                               ; CODE XREF: filename_unescape+19↑j
.text:0000000000003158                 mov     r9, rcx
.text:000000000000315B                 mov     [rcx-1], al
.text:000000000000315E
.text:000000000000315E loc_315E:                               ; CODE XREF: filename_unescape+37↑j
.text:000000000000315E                                         ; filename_unescape+77↓j
.text:000000000000315E                 add     rdx, 1
.text:0000000000003162                 add     rcx, 1
.text:0000000000003166                 cmp     rsi, rdx
.text:0000000000003169                 ja      short loc_311F
.text:000000000000316B                 add     rsi, rdi
.text:000000000000316E                 cmp     r9, rsi
.text:0000000000003171                 jnb     short loc_3177
.text:0000000000003173                 mov     byte ptr [r9], 0
.text:0000000000003177
.text:0000000000003177 loc_3177:                               ; CODE XREF: filename_unescape+D↑j
.text:0000000000003177                                         ; filename_unescape+61↑j
.text:0000000000003177                 mov     rax, rdi
.text:000000000000317A                 retn
.text:000000000000317A ; ---------------------------------------------------------------------------
.text:000000000000317B                 align 20h
.text:0000000000003180
.text:0000000000003180 loc_3180:                               ; CODE XREF: filename_unescape+2A↑j
.text:0000000000003180                 mov     r9, rcx
.text:0000000000003183                 mov     byte ptr [rcx-1], 5Ch ; '\'
.text:0000000000003187                 jmp     short loc_315E
.text:0000000000003187 ; } // starts at 3110
.text:0000000000003187 filename_unescape endp
.text:0000000000003187
.text:0000000000003187 ; ---------------------------------------------------------------------------
.text:0000000000003189                 align 10h
.text:0000000000003190
.text:0000000000003190 ; =============== S U B R O U T I N E =======================================
.text:0000000000003190
.text:0000000000003190
.text:0000000000003190 hex_digits      proc near               ; CODE XREF: main+82E↑p
.text:0000000000003190                                         ; main+FBF↑p
.text:0000000000003190 ; __unwind {
.text:0000000000003190                 push    rbp
.text:0000000000003191                 push    rbx
.text:0000000000003192                 sub     rsp, 8
.text:0000000000003196                 mov     rbp, cs:digest_hex_bytes
.text:000000000000319D                 test    rbp, rbp
.text:00000000000031A0                 jz      short loc_31E0
.text:00000000000031A2                 mov     rbx, rdi
.text:00000000000031A5                 call    ___ctype_b_loc
.text:00000000000031AA                 mov     rcx, [rax]
.text:00000000000031AD                 mov     rax, rbx
.text:00000000000031B0                 jmp     short loc_31C5
.text:00000000000031B0 ; ---------------------------------------------------------------------------
.text:00000000000031B2                 align 8
.text:00000000000031B8
.text:00000000000031B8 loc_31B8:                               ; CODE XREF: hex_digits+3D↓j
.text:00000000000031B8                 add     rax, 1
.text:00000000000031BC                 mov     edx, eax
.text:00000000000031BE                 sub     edx, ebx
.text:00000000000031C0                 cmp     rdx, rbp
.text:00000000000031C3                 jnb     short loc_31E3
.text:00000000000031C5
.text:00000000000031C5 loc_31C5:                               ; CODE XREF: hex_digits+20↑j
.text:00000000000031C5                 movzx   edx, byte ptr [rax]
.text:00000000000031C8                 test    byte ptr [rcx+rdx*2+1], 10h
.text:00000000000031CD                 jnz     short loc_31B8
.text:00000000000031CF                 add     rsp, 8
.text:00000000000031D3                 xor     eax, eax
.text:00000000000031D5                 pop     rbx
.text:00000000000031D6                 pop     rbp
.text:00000000000031D7                 retn
.text:00000000000031D7 ; ---------------------------------------------------------------------------
.text:00000000000031D8                 align 20h
.text:00000000000031E0
.text:00000000000031E0 loc_31E0:                               ; CODE XREF: hex_digits+10↑j
.text:00000000000031E0                 mov     rax, rdi
.text:00000000000031E3
.text:00000000000031E3 loc_31E3:                               ; CODE XREF: hex_digits+33↑j
.text:00000000000031E3                 cmp     byte ptr [rax], 0
.text:00000000000031E6                 setz    al
.text:00000000000031E9                 add     rsp, 8
.text:00000000000031ED                 pop     rbx
.text:00000000000031EE                 pop     rbp
.text:00000000000031EF                 retn
.text:00000000000031EF ; } // starts at 3190
.text:00000000000031EF hex_digits      endp
.text:00000000000031EF
.text:00000000000031F0
.text:00000000000031F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000031F0
.text:00000000000031F0
.text:00000000000031F0 print_filename  proc near               ; CODE XREF: main+E12↑p
.text:00000000000031F0                                         ; main+EC4↑p ...
.text:00000000000031F0 ; __unwind {
.text:00000000000031F0                 push    rbp
.text:00000000000031F1                 push    rbx
.text:00000000000031F2                 mov     rbx, rdi
.text:00000000000031F5                 sub     rsp, 8
.text:00000000000031F9                 test    sil, sil
.text:00000000000031FC                 jz      loc_3290
.text:0000000000003202                 movzx   esi, byte ptr [rdi]
.text:0000000000003205                 lea     rbp, s          ; "\\n"
.text:000000000000320C                 test    sil, sil
.text:000000000000320F                 jnz     short loc_323A
.text:0000000000003211                 jmp     short loc_326E
.text:0000000000003211 ; ---------------------------------------------------------------------------
.text:0000000000003213                 align 8
.text:0000000000003218
.text:0000000000003218 loc_3218:                               ; CODE XREF: print_filename+5B↓j
.text:0000000000003218                 lea     rdi, asc_91E7   ; ptr
.text:000000000000321F                 mov     edx, 2          ; n
.text:0000000000003224                 mov     esi, 1          ; size
.text:0000000000003229                 call    _fwrite_unlocked
.text:000000000000322E
.text:000000000000322E loc_322E:                               ; CODE XREF: print_filename+9A↓j
.text:000000000000322E                                         ; print_filename+C0↓j
.text:000000000000322E                 add     rbx, 1
.text:0000000000003232                 movzx   esi, byte ptr [rbx] ; int
.text:0000000000003235                 test    sil, sil
.text:0000000000003238                 jz      short loc_326E
.text:000000000000323A
.text:000000000000323A loc_323A:                               ; CODE XREF: print_filename+1F↑j
.text:000000000000323A                                         ; print_filename+7C↓j
.text:000000000000323A                 cmp     sil, 0Ah
.text:000000000000323E                 mov     rcx, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003245                 jz      short loc_3278
.text:0000000000003247                 cmp     sil, 5Ch ; '\'
.text:000000000000324B                 jz      short loc_3218
.text:000000000000324D                 mov     rax, [rcx+28h]
.text:0000000000003251                 cmp     rax, [rcx+30h]
.text:0000000000003255                 jnb     short loc_32A8
.text:0000000000003257                 lea     rdx, [rax+1]
.text:000000000000325B                 add     rbx, 1
.text:000000000000325F                 mov     [rcx+28h], rdx
.text:0000000000003263                 mov     [rax], sil
.text:0000000000003266                 movzx   esi, byte ptr [rbx]
.text:0000000000003269                 test    sil, sil
.text:000000000000326C                 jnz     short loc_323A
.text:000000000000326E
.text:000000000000326E loc_326E:                               ; CODE XREF: print_filename+21↑j
.text:000000000000326E                                         ; print_filename+48↑j
.text:000000000000326E                 add     rsp, 8
.text:0000000000003272                 pop     rbx
.text:0000000000003273                 pop     rbp
.text:0000000000003274                 retn
.text:0000000000003274 ; ---------------------------------------------------------------------------
.text:0000000000003275                 align 8
.text:0000000000003278
.text:0000000000003278 loc_3278:                               ; CODE XREF: print_filename+55↑j
.text:0000000000003278                 mov     edx, 2          ; n
.text:000000000000327D                 mov     esi, 1          ; size
.text:0000000000003282                 mov     rdi, rbp        ; s
.text:0000000000003285                 call    _fwrite_unlocked
.text:000000000000328A                 jmp     short loc_322E
.text:000000000000328A ; ---------------------------------------------------------------------------
.text:000000000000328C                 align 10h
.text:0000000000003290
.text:0000000000003290 loc_3290:                               ; CODE XREF: print_filename+C↑j
.text:0000000000003290                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003297                 add     rsp, 8
.text:000000000000329B                 pop     rbx
.text:000000000000329C                 pop     rbp
.text:000000000000329D                 jmp     _fputs_unlocked
.text:000000000000329D ; ---------------------------------------------------------------------------
.text:00000000000032A2                 align 8
.text:00000000000032A8
.text:00000000000032A8 loc_32A8:                               ; CODE XREF: print_filename+65↑j
.text:00000000000032A8                 mov     rdi, rcx        ; _IO_FILE *
.text:00000000000032AB                 call    ___overflow
.text:00000000000032B0                 jmp     loc_322E
.text:00000000000032B0 ; } // starts at 31F0
.text:00000000000032B0 print_filename  endp
.text:00000000000032B0
.text:00000000000032B0 ; ---------------------------------------------------------------------------
.text:00000000000032B5                 align 20h
.text:00000000000032C0
.text:00000000000032C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032C0
.text:00000000000032C0
.text:00000000000032C0 digest_file_isra_1 proc near            ; CODE XREF: main+A4D↑p
.text:00000000000032C0                                         ; main+1044↑p
.text:00000000000032C0 ; __unwind {
.text:00000000000032C0                 push    r13
.text:00000000000032C2                 push    r12
.text:00000000000032C4                 mov     ecx, 2
.text:00000000000032C9                 push    rbp
.text:00000000000032CA                 push    rbx
.text:00000000000032CB                 mov     rbp, rdi
.text:00000000000032CE                 lea     rdi, aLt+2      ; "-"
.text:00000000000032D5                 mov     r12, rsi
.text:00000000000032D8                 mov     rsi, rbp
.text:00000000000032DB                 sub     rsp, 8
.text:00000000000032DF                 repe cmpsb
.text:00000000000032E1                 mov     byte ptr [rdx], 0
.text:00000000000032E4                 setnbe  al
.text:00000000000032E7                 sbb     al, 0
.text:00000000000032E9                 test    al, al
.text:00000000000032EB                 jnz     loc_3390
.text:00000000000032F1                 mov     rbx, cs:stdin@@GLIBC_2_2_5
.text:00000000000032F8                 mov     esi, 2
.text:00000000000032FD                 mov     cs:have_read_stdin, 1
.text:0000000000003304                 mov     rdi, rbx
.text:0000000000003307                 call    fadvise
.text:000000000000330C                 mov     rdx, cs:b2_length
.text:0000000000003313                 mov     rsi, r12
.text:0000000000003316                 mov     rdi, rbx        ; stream
.text:0000000000003319                 shr     rdx, 3
.text:000000000000331D                 call    blake2b_stream
.text:0000000000003322                 test    eax, eax
.text:0000000000003324                 jnz     short loc_3340
.text:0000000000003326
.text:0000000000003326 loc_3326:                               ; CODE XREF: digest_file_isra_1+11F↓j
.text:0000000000003326                 mov     r12d, 1
.text:000000000000332C
.text:000000000000332C loc_332C:                               ; CODE XREF: digest_file_isra_1+B6↓j
.text:000000000000332C                                         ; digest_file_isra_1+154↓j ...
.text:000000000000332C                 add     rsp, 8
.text:0000000000003330                 mov     eax, r12d
.text:0000000000003333                 pop     rbx
.text:0000000000003334                 pop     rbp
.text:0000000000003335                 pop     r12
.text:0000000000003337                 pop     r13
.text:0000000000003339                 retn
.text:0000000000003339 ; ---------------------------------------------------------------------------
.text:000000000000333A                 align 20h
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: digest_file_isra_1+64↑j
.text:0000000000003340                                         ; digest_file_isra_1+10F↓j
.text:0000000000003340                 mov     rdx, rbp
.text:0000000000003343                 xor     edi, edi
.text:0000000000003345                 mov     esi, 3
.text:000000000000334A                 call    quotearg_n_style_colon
.text:000000000000334F                 mov     rbp, rax
.text:0000000000003352                 xor     r12d, r12d
.text:0000000000003355                 call    ___errno_location
.text:000000000000335A                 mov     esi, [rax]      ; errnum
.text:000000000000335C                 lea     rdx, aS_1+2     ; format
.text:0000000000003363                 xor     edi, edi        ; status
.text:0000000000003365                 xor     eax, eax
.text:0000000000003367                 mov     rcx, rbp
.text:000000000000336A                 call    _error
.text:000000000000336F                 cmp     cs:stdin@@GLIBC_2_2_5, rbx
.text:0000000000003376                 jz      short loc_332C
.text:0000000000003378                 mov     rdi, rbx        ; stream
.text:000000000000337B                 call    rpl_fclose
.text:0000000000003380                 add     rsp, 8
.text:0000000000003384                 mov     eax, r12d
.text:0000000000003387                 pop     rbx
.text:0000000000003388                 pop     rbp
.text:0000000000003389                 pop     r12
.text:000000000000338B                 pop     r13
.text:000000000000338D                 retn
.text:000000000000338D ; ---------------------------------------------------------------------------
.text:000000000000338E                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: digest_file_isra_1+2B↑j
.text:0000000000003390                 lea     rsi, aSReadError+0Dh ; "r"
.text:0000000000003397                 mov     rdi, rbp
.text:000000000000339A                 mov     r13, rdx
.text:000000000000339D                 call    fopen_safer
.text:00000000000033A2                 test    rax, rax
.text:00000000000033A5                 mov     rbx, rax
.text:00000000000033A8                 jz      short loc_3420
.text:00000000000033AA                 mov     rdi, rax
.text:00000000000033AD                 mov     esi, 2
.text:00000000000033B2                 call    fadvise
.text:00000000000033B7                 mov     rdx, cs:b2_length
.text:00000000000033BE                 mov     rsi, r12
.text:00000000000033C1                 mov     rdi, rbx        ; stream
.text:00000000000033C4                 shr     rdx, 3
.text:00000000000033C8                 call    blake2b_stream
.text:00000000000033CD                 test    eax, eax
.text:00000000000033CF                 jnz     loc_3340
.text:00000000000033D5                 mov     rdi, rbx        ; stream
.text:00000000000033D8                 call    rpl_fclose
.text:00000000000033DD                 test    eax, eax
.text:00000000000033DF                 jz      loc_3326
.text:00000000000033E5                 mov     rdx, rbp
.text:00000000000033E8                 mov     esi, 3
.text:00000000000033ED                 xor     edi, edi
.text:00000000000033EF                 call    quotearg_n_style_colon
.text:00000000000033F4                 mov     rbx, rax
.text:00000000000033F7                 xor     r12d, r12d
.text:00000000000033FA                 call    ___errno_location
.text:00000000000033FF                 mov     esi, [rax]      ; errnum
.text:0000000000003401                 lea     rdx, aS_1+2     ; format
.text:0000000000003408                 mov     rcx, rbx
.text:000000000000340B                 xor     edi, edi        ; status
.text:000000000000340D                 xor     eax, eax
.text:000000000000340F                 call    _error
.text:0000000000003414                 jmp     loc_332C
.text:0000000000003414 ; ---------------------------------------------------------------------------
.text:0000000000003419                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: digest_file_isra_1+E8↑j
.text:0000000000003420                 movzx   r12d, cs:ignore_missing
.text:0000000000003428                 call    ___errno_location
.text:000000000000342D                 mov     rbx, rax
.text:0000000000003430                 test    r12b, r12b
.text:0000000000003433                 jz      short loc_343A
.text:0000000000003435                 cmp     dword ptr [rax], 2
.text:0000000000003438                 jz      short loc_3470
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: digest_file_isra_1+173↑j
.text:000000000000343A                 mov     rdx, rbp
.text:000000000000343D                 mov     esi, 3
.text:0000000000003442                 xor     edi, edi
.text:0000000000003444                 call    quotearg_n_style_colon
.text:0000000000003449                 mov     esi, [rbx]      ; errnum
.text:000000000000344B                 lea     rdx, aS_1+2     ; format
.text:0000000000003452                 mov     rcx, rax
.text:0000000000003455                 xor     edi, edi        ; status
.text:0000000000003457                 xor     eax, eax
.text:0000000000003459                 xor     r12d, r12d
.text:000000000000345C                 call    _error
.text:0000000000003461                 jmp     loc_332C
.text:0000000000003461 ; ---------------------------------------------------------------------------
.text:0000000000003466                 align 10h
.text:0000000000003470
.text:0000000000003470 loc_3470:                               ; CODE XREF: digest_file_isra_1+178↑j
.text:0000000000003470                 mov     byte ptr [r13+0], 1
.text:0000000000003475                 jmp     loc_332C
.text:0000000000003475 ; } // starts at 32C0
.text:0000000000003475 digest_file_isra_1 endp
.text:0000000000003475
.text:0000000000003475 ; ---------------------------------------------------------------------------
.text:000000000000347A                 align 20h
.text:0000000000003480
.text:0000000000003480 ; =============== S U B R O U T I N E =======================================
.text:0000000000003480
.text:0000000000003480 ; Attributes: noreturn
.text:0000000000003480
.text:0000000000003480 ; void __fastcall __noreturn usage(int status)
.text:0000000000003480                 public usage
.text:0000000000003480 usage           proc near               ; CODE XREF: main+12F↑p
.text:0000000000003480                                         ; main+1358↑p ...
.text:0000000000003480
.text:0000000000003480 var_A8          = qword ptr -0A8h
.text:0000000000003480 var_A0          = qword ptr -0A0h
.text:0000000000003480 var_98          = qword ptr -98h
.text:0000000000003480 var_90          = qword ptr -90h
.text:0000000000003480 var_88          = qword ptr -88h
.text:0000000000003480 var_80          = qword ptr -80h
.text:0000000000003480 var_78          = qword ptr -78h
.text:0000000000003480 var_70          = qword ptr -70h
.text:0000000000003480 var_68          = qword ptr -68h
.text:0000000000003480 var_60          = qword ptr -60h
.text:0000000000003480 var_58          = qword ptr -58h
.text:0000000000003480 var_50          = qword ptr -50h
.text:0000000000003480 var_48          = qword ptr -48h
.text:0000000000003480 var_40          = qword ptr -40h
.text:0000000000003480 var_30          = qword ptr -30h
.text:0000000000003480
.text:0000000000003480 ; __unwind {
.text:0000000000003480                 push    r13
.text:0000000000003482                 push    r12
.text:0000000000003484                 mov     edx, 5          ; category
.text:0000000000003489                 push    rbp
.text:000000000000348A                 push    rbx
.text:000000000000348B                 mov     ebp, edi
.text:000000000000348D                 sub     rsp, 88h
.text:0000000000003494                 mov     rbx, cs:program_name
.text:000000000000349B                 mov     rax, fs:28h
.text:00000000000034A4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000034A9                 xor     eax, eax
.text:00000000000034AB                 test    edi, edi
.text:00000000000034AD                 jz      short loc_34DD
.text:00000000000034AF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000034B6                 xor     edi, edi        ; domainname
.text:00000000000034B8                 call    _dcgettext
.text:00000000000034BD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000034C4                 mov     rdx, rax
.text:00000000000034C7                 mov     rcx, rbx
.text:00000000000034CA                 mov     esi, 1
.text:00000000000034CF                 xor     eax, eax
.text:00000000000034D1                 call    ___fprintf_chk
.text:00000000000034D6
.text:00000000000034D6 loc_34D6:                               ; CODE XREF: usage+3B6↓j
.text:00000000000034D6                 mov     edi, ebp        ; status
.text:00000000000034D8                 call    _exit
.text:00000000000034DD ; ---------------------------------------------------------------------------
.text:00000000000034DD
.text:00000000000034DD loc_34DD:                               ; CODE XREF: usage+2D↑j
.text:00000000000034DD                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]...\nPrint "...
.text:00000000000034E4                 xor     edi, edi        ; domainname
.text:00000000000034E6                 call    _dcgettext
.text:00000000000034EB                 lea     rcx, aBlake2    ; "BLAKE2"
.text:00000000000034F2                 mov     r8d, 200h
.text:00000000000034F8                 mov     rdx, rbx
.text:00000000000034FB                 mov     rsi, rax
.text:00000000000034FE                 mov     edi, 1
.text:0000000000003503                 xor     eax, eax
.text:0000000000003505                 call    ___printf_chk
.text:000000000000350A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003511                 lea     rsi, aWithNoFileOrWh ; "\nWith no FILE, or when FILE is -, read"...
.text:0000000000003518                 mov     edx, 5          ; category
.text:000000000000351D                 xor     edi, edi        ; domainname
.text:000000000000351F                 call    _dcgettext
.text:0000000000003524                 mov     rsi, rbx        ; stream
.text:0000000000003527                 mov     rdi, rax        ; s
.text:000000000000352A                 call    _fputs_unlocked
.text:000000000000352F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003536                 lea     rsi, aBBinaryReadInB ; "\n  -b, --binary         read in binary"...
.text:000000000000353D                 mov     edx, 5          ; category
.text:0000000000003542                 xor     edi, edi        ; domainname
.text:0000000000003544                 call    _dcgettext
.text:0000000000003549                 mov     rsi, rbx        ; stream
.text:000000000000354C                 mov     rdi, rax        ; s
.text:000000000000354F                 call    _fputs_unlocked
.text:0000000000003554                 lea     rsi, aCCheckReadSSum ; "  -c, --check          read %s sums fro"...
.text:000000000000355B                 xor     edi, edi        ; domainname
.text:000000000000355D                 mov     edx, 5          ; category
.text:0000000000003562                 call    _dcgettext
.text:0000000000003567                 lea     rdx, aBlake2    ; "BLAKE2"
.text:000000000000356E                 mov     rsi, rax
.text:0000000000003571                 mov     edi, 1
.text:0000000000003576                 xor     eax, eax
.text:0000000000003578                 call    ___printf_chk
.text:000000000000357D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003584                 lea     rsi, aLLengthDigestL ; "  -l, --length         digest length in"...
.text:000000000000358B                 mov     edx, 5          ; category
.text:0000000000003590                 xor     edi, edi        ; domainname
.text:0000000000003592                 call    _dcgettext
.text:0000000000003597                 mov     rsi, rbx        ; stream
.text:000000000000359A                 mov     rdi, rax        ; s
.text:000000000000359D                 call    _fputs_unlocked
.text:00000000000035A2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000035A9                 lea     rsi, aTagCreateABsdS ; "      --tag            create a BSD-sty"...
.text:00000000000035B0                 mov     edx, 5          ; category
.text:00000000000035B5                 xor     edi, edi        ; domainname
.text:00000000000035B7                 call    _dcgettext
.text:00000000000035BC                 mov     rsi, rbx        ; stream
.text:00000000000035BF                 mov     rdi, rax        ; s
.text:00000000000035C2                 call    _fputs_unlocked
.text:00000000000035C7                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000035CE                 lea     rsi, aTTextReadInTex ; "  -t, --text           read in text mod"...
.text:00000000000035D5                 mov     edx, 5          ; category
.text:00000000000035DA                 xor     edi, edi        ; domainname
.text:00000000000035DC                 call    _dcgettext
.text:00000000000035E1                 mov     rsi, rbx        ; stream
.text:00000000000035E4                 mov     rdi, rax        ; s
.text:00000000000035E7                 call    _fputs_unlocked
.text:00000000000035EC                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000035F3                 lea     rsi, aZZeroEndEachOu ; "  -z, --zero           end each output "...
.text:00000000000035FA                 mov     edx, 5          ; category
.text:00000000000035FF                 xor     edi, edi        ; domainname
.text:0000000000003601                 call    _dcgettext
.text:0000000000003606                 mov     rsi, rbx        ; stream
.text:0000000000003609                 mov     rdi, rax        ; s
.text:000000000000360C                 call    _fputs_unlocked
.text:0000000000003611                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003618                 lea     rsi, aTheFollowingFi ; "\nThe following five options are useful"...
.text:000000000000361F                 mov     edx, 5          ; category
.text:0000000000003624                 xor     edi, edi        ; domainname
.text:0000000000003626                 call    _dcgettext
.text:000000000000362B                 mov     rsi, rbx        ; stream
.text:000000000000362E                 mov     rdi, rax        ; s
.text:0000000000003631                 call    _fputs_unlocked
.text:0000000000003636                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000363D                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000003644                 mov     edx, 5          ; category
.text:0000000000003649                 xor     edi, edi        ; domainname
.text:000000000000364B                 call    _dcgettext
.text:0000000000003650                 mov     rsi, rbx        ; stream
.text:0000000000003653                 mov     rdi, rax        ; s
.text:0000000000003656                 call    _fputs_unlocked
.text:000000000000365B                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000003662                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000003669                 xor     edi, edi        ; domainname
.text:000000000000366B                 mov     edx, 5          ; category
.text:0000000000003670                 call    _dcgettext
.text:0000000000003675                 mov     rsi, rbx        ; stream
.text:0000000000003678                 mov     rdi, rax        ; s
.text:000000000000367B                 lea     rbx, aB2sum     ; "b2sum"
.text:0000000000003682                 call    _fputs_unlocked
.text:0000000000003687                 lea     rsi, aTheSumsAreComp ; "\nThe sums are computed as described in"...
.text:000000000000368E                 mov     edx, 5          ; category
.text:0000000000003693                 xor     edi, edi        ; domainname
.text:0000000000003695                 call    _dcgettext
.text:000000000000369A                 lea     rdx, aRfc7693   ; "RFC 7693"
.text:00000000000036A1                 mov     rsi, rax
.text:00000000000036A4                 mov     edi, 1
.text:00000000000036A9                 xor     eax, eax
.text:00000000000036AB                 call    ___printf_chk
.text:00000000000036B0                 lea     rax, asc_9200   ; "["
.text:00000000000036B7                 lea     rcx, aSha256sum ; "sha256sum"
.text:00000000000036BE                 mov     [rsp+0A8h+var_48], 0
.text:00000000000036C7                 mov     [rsp+0A8h+var_40], 0
.text:00000000000036D0                 mov     rdx, rsp
.text:00000000000036D3                 mov     [rsp+0A8h+var_A8], rax
.text:00000000000036D7                 lea     rax, aTestInvocation ; "test invocation"
.text:00000000000036DE                 mov     [rsp+0A8h+var_78], rcx
.text:00000000000036E3                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000036EA                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000036EF                 lea     rax, domainname ; "coreutils"
.text:00000000000036F6                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000036FB                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000003702                 mov     [rsp+0A8h+var_98], rax
.text:0000000000003707                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:000000000000370E                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000003713                 mov     [rsp+0A8h+var_90], rax
.text:0000000000003718                 lea     rax, aSha224sum ; "sha224sum"
.text:000000000000371F                 mov     [rsp+0A8h+var_88], rax
.text:0000000000003724                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:000000000000372B                 mov     [rsp+0A8h+var_80], rax
.text:0000000000003730                 mov     [rsp+0A8h+var_70], rax
.text:0000000000003735                 mov     [rsp+0A8h+var_60], rax
.text:000000000000373A                 mov     [rsp+0A8h+var_50], rax
.text:000000000000373F                 nop
.text:0000000000003740
.text:0000000000003740 loc_3740:                               ; CODE XREF: usage+2DD↓j
.text:0000000000003740                 add     rdx, 10h
.text:0000000000003744                 mov     rdi, [rdx]
.text:0000000000003747                 test    rdi, rdi
.text:000000000000374A                 jz      short loc_375F
.text:000000000000374C                 mov     ecx, 6
.text:0000000000003751                 mov     rsi, rbx
.text:0000000000003754                 repe cmpsb
.text:0000000000003756                 setnbe  al
.text:0000000000003759                 sbb     al, 0
.text:000000000000375B                 test    al, al
.text:000000000000375D                 jnz     short loc_3740
.text:000000000000375F
.text:000000000000375F loc_375F:                               ; CODE XREF: usage+2CA↑j
.text:000000000000375F                 mov     r12, [rdx+8]
.text:0000000000003763                 xor     edi, edi        ; domainname
.text:0000000000003765                 mov     edx, 5          ; category
.text:000000000000376A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000003771                 test    r12, r12
.text:0000000000003774                 jz      loc_383B
.text:000000000000377A                 call    _dcgettext
.text:000000000000377F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003786                 lea     rdx, unk_9276
.text:000000000000378D                 mov     rsi, rax
.text:0000000000003790                 mov     edi, 1
.text:0000000000003795                 xor     eax, eax
.text:0000000000003797                 call    ___printf_chk
.text:000000000000379C                 xor     esi, esi        ; locale
.text:000000000000379E                 mov     edi, 5          ; category
.text:00000000000037A3                 call    _setlocale
.text:00000000000037A8                 test    rax, rax
.text:00000000000037AB                 jz      short loc_37C9
.text:00000000000037AD                 lea     rsi, s2         ; "en_"
.text:00000000000037B4                 mov     edx, 3          ; n
.text:00000000000037B9                 mov     rdi, rax        ; s1
.text:00000000000037BC                 call    _strncmp
.text:00000000000037C1                 test    eax, eax
.text:00000000000037C3                 jnz     loc_38D0
.text:00000000000037C9
.text:00000000000037C9 loc_37C9:                               ; CODE XREF: usage+32B↑j
.text:00000000000037C9                                         ; usage+475↓j
.text:00000000000037C9                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:00000000000037D0                 xor     edi, edi        ; domainname
.text:00000000000037D2                 mov     edx, 5          ; category
.text:00000000000037D7                 call    _dcgettext
.text:00000000000037DC                 lea     rcx, aB2sum     ; "b2sum"
.text:00000000000037E3                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000037EA                 mov     rsi, rax
.text:00000000000037ED                 mov     edi, 1
.text:00000000000037F2                 xor     eax, eax
.text:00000000000037F4                 call    ___printf_chk
.text:00000000000037F9                 cmp     r12, rbx
.text:00000000000037FC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000003803                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:000000000000380A                 cmovz   rbx, rcx
.text:000000000000380E
.text:000000000000380E loc_380E:                               ; CODE XREF: usage+444↓j
.text:000000000000380E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000003815                 xor     edi, edi        ; domainname
.text:0000000000003817                 mov     edx, 5          ; category
.text:000000000000381C                 call    _dcgettext
.text:0000000000003821                 mov     rcx, rbx
.text:0000000000003824                 mov     rsi, rax
.text:0000000000003827                 mov     rdx, r12
.text:000000000000382A                 mov     edi, 1
.text:000000000000382F                 xor     eax, eax
.text:0000000000003831                 call    ___printf_chk
.text:0000000000003836                 jmp     loc_34D6
.text:000000000000383B ; ---------------------------------------------------------------------------
.text:000000000000383B
.text:000000000000383B loc_383B:                               ; CODE XREF: usage+2F4↑j
.text:000000000000383B                 call    _dcgettext
.text:0000000000003840                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000003847                 lea     rdx, unk_9276
.text:000000000000384E                 mov     rsi, rax
.text:0000000000003851                 mov     edi, 1
.text:0000000000003856                 xor     eax, eax
.text:0000000000003858                 call    ___printf_chk
.text:000000000000385D                 xor     esi, esi        ; locale
.text:000000000000385F                 mov     edi, 5          ; category
.text:0000000000003864                 call    _setlocale
.text:0000000000003869                 test    rax, rax
.text:000000000000386C                 jz      short loc_3886
.text:000000000000386E                 lea     rsi, s2         ; "en_"
.text:0000000000003875                 mov     edx, 3          ; n
.text:000000000000387A                 mov     rdi, rax        ; s1
.text:000000000000387D                 call    _strncmp
.text:0000000000003882                 test    eax, eax
.text:0000000000003884                 jnz     short loc_38C9
.text:0000000000003886
.text:0000000000003886 loc_3886:                               ; CODE XREF: usage+3EC↑j
.text:0000000000003886                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000388D                 mov     edx, 5          ; category
.text:0000000000003892                 xor     edi, edi        ; domainname
.text:0000000000003894                 lea     r12, aB2sum     ; "b2sum"
.text:000000000000389B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000038A2                 call    _dcgettext
.text:00000000000038A7                 lea     rcx, aB2sum     ; "b2sum"
.text:00000000000038AE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000038B5                 mov     rsi, rax
.text:00000000000038B8                 mov     edi, 1
.text:00000000000038BD                 xor     eax, eax
.text:00000000000038BF                 call    ___printf_chk
.text:00000000000038C4                 jmp     loc_380E
.text:00000000000038C9 ; ---------------------------------------------------------------------------
.text:00000000000038C9
.text:00000000000038C9 loc_38C9:                               ; CODE XREF: usage+404↑j
.text:00000000000038C9                 lea     r12, aB2sum     ; "b2sum"
.text:00000000000038D0
.text:00000000000038D0 loc_38D0:                               ; CODE XREF: usage+343↑j
.text:00000000000038D0                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000038D7                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000038DE                 xor     edi, edi        ; domainname
.text:00000000000038E0                 mov     edx, 5          ; category
.text:00000000000038E5                 call    _dcgettext
.text:00000000000038EA                 mov     rsi, r13        ; stream
.text:00000000000038ED                 mov     rdi, rax        ; s
.text:00000000000038F0                 call    _fputs_unlocked
.text:00000000000038F5                 jmp     loc_37C9
.text:00000000000038F5 ; } // starts at 3480
.text:00000000000038F5 usage           endp
.text:00000000000038F5
.text:00000000000038F5 ; ---------------------------------------------------------------------------
.text:00000000000038FA                 align 20h
.text:0000000000003900
.text:0000000000003900 ; =============== S U B R O U T I N E =======================================
.text:0000000000003900
.text:0000000000003900
.text:0000000000003900 blake2b_compress proc near              ; CODE XREF: blake2b_update_part_3+91↓p
.text:0000000000003900                                         ; blake2b_update_part_3+E4↓p ...
.text:0000000000003900
.text:0000000000003900 var_170         = qword ptr -170h
.text:0000000000003900 var_168         = qword ptr -168h
.text:0000000000003900 var_160         = qword ptr -160h
.text:0000000000003900 var_158         = qword ptr -158h
.text:0000000000003900 var_150         = qword ptr -150h
.text:0000000000003900 var_148         = qword ptr -148h
.text:0000000000003900 var_140         = qword ptr -140h
.text:0000000000003900 var_138         = qword ptr -138h
.text:0000000000003900 var_130         = qword ptr -130h
.text:0000000000003900 var_128         = qword ptr -128h
.text:0000000000003900 var_120         = qword ptr -120h
.text:0000000000003900 var_118         = qword ptr -118h
.text:0000000000003900 var_110         = qword ptr -110h
.text:0000000000003900 var_108         = qword ptr -108h
.text:0000000000003900 var_100         = qword ptr -100h
.text:0000000000003900 var_F8          = qword ptr -0F8h
.text:0000000000003900 var_F0          = qword ptr -0F0h
.text:0000000000003900 var_E8          = qword ptr -0E8h
.text:0000000000003900 var_E0          = qword ptr -0E0h
.text:0000000000003900 var_D8          = qword ptr -0D8h
.text:0000000000003900 var_D0          = qword ptr -0D0h
.text:0000000000003900 var_C8          = qword ptr -0C8h
.text:0000000000003900 var_C0          = qword ptr -0C0h
.text:0000000000003900 var_B8          = qword ptr -0B8h
.text:0000000000003900 var_B0          = qword ptr -0B0h
.text:0000000000003900 var_A8          = qword ptr -0A8h
.text:0000000000003900 var_A0          = qword ptr -0A0h
.text:0000000000003900 var_98          = qword ptr -98h
.text:0000000000003900 var_90          = qword ptr -90h
.text:0000000000003900 var_88          = qword ptr -88h
.text:0000000000003900 var_80          = qword ptr -80h
.text:0000000000003900 var_78          = qword ptr -78h
.text:0000000000003900 var_70          = qword ptr -70h
.text:0000000000003900 var_68          = qword ptr -68h
.text:0000000000003900 var_60          = qword ptr -60h
.text:0000000000003900 var_58          = qword ptr -58h
.text:0000000000003900 var_50          = qword ptr -50h
.text:0000000000003900 var_40          = qword ptr -40h
.text:0000000000003900
.text:0000000000003900 ; __unwind {
.text:0000000000003900                 push    r15
.text:0000000000003902                 push    r14
.text:0000000000003904                 push    r13
.text:0000000000003906                 push    r12
.text:0000000000003908                 push    rbp
.text:0000000000003909                 push    rbx
.text:000000000000390A                 sub     rsp, 148h
.text:0000000000003911                 mov     rax, fs:28h
.text:000000000000391A                 mov     [rsp+178h+var_40], rax
.text:0000000000003922                 xor     eax, eax
.text:0000000000003924                 lea     rcx, [rsp+178h+var_148]
.text:0000000000003929                 nop     dword ptr [rax+00000000h]
.text:0000000000003930
.text:0000000000003930 loc_3930:                               ; CODE XREF: blake2b_compress+40↓j
.text:0000000000003930                 mov     rdx, [rsi+rax*8]
.text:0000000000003934                 mov     [rcx+rax*8], rdx
.text:0000000000003938                 add     rax, 1
.text:000000000000393C                 cmp     rax, 10h
.text:0000000000003940                 jnz     short loc_3930
.text:0000000000003942                 lea     rcx, [rsp+178h+var_C8]
.text:000000000000394A                 xor     eax, eax
.text:000000000000394C                 mov     [rsp+178h+var_150], rcx
.text:0000000000003951                 nop     dword ptr [rax+00000000h]
.text:0000000000003958
.text:0000000000003958 loc_3958:                               ; CODE XREF: blake2b_compress+68↓j
.text:0000000000003958                 mov     rdx, [rdi+rax*8]
.text:000000000000395C                 mov     [rcx+rax*8], rdx
.text:0000000000003960                 add     rax, 1
.text:0000000000003964                 cmp     rax, 8
.text:0000000000003968                 jnz     short loc_3958
.text:000000000000396A                 mov     r8, [rsp+178h+var_A0]
.text:0000000000003972                 mov     rbx, [rsp+178h+var_C0]
.text:000000000000397A                 mov     rcx, 9B05688C2B3E6C1Fh
.text:0000000000003984                 mov     r13, [rsp+178h+var_A8]
.text:000000000000398C                 mov     rbp, [rsp+178h+var_C8]
.text:0000000000003994                 mov     r9, 510E527FADE682D1h
.text:000000000000399E                 mov     r15, 0BB67AE8584CAA73Bh
.text:00000000000039A8                 mov     r14, 6A09E667F3BCC908h
.text:00000000000039B2                 mov     rsi, [rsp+178h+var_98]
.text:00000000000039BA                 add     rbx, r8
.text:00000000000039BD                 add     rbx, [rsp+178h+var_138]
.text:00000000000039C2                 mov     r11, [rsp+178h+var_B8]
.text:00000000000039CA                 add     rbp, r13
.text:00000000000039CD                 add     rbp, [rsp+178h+var_148]
.text:00000000000039D2                 mov     r10, [rsp+178h+var_B0]
.text:00000000000039DA                 mov     rdx, 1F83D9ABFB41BD6Bh
.text:00000000000039E4                 mov     r12, 3C6EF372FE94F82Bh
.text:00000000000039EE                 add     r11, rsi
.text:00000000000039F1                 add     r11, [rsp+178h+var_128]
.text:00000000000039F6                 xor     rcx, rbx
.text:00000000000039F9                 xor     rcx, [rdi+48h]
.text:00000000000039FD                 add     rbx, [rsp+178h+var_130]
.text:0000000000003A02                 xor     r9, rbp
.text:0000000000003A05                 xor     r9, [rdi+40h]
.text:0000000000003A09                 add     rbp, [rsp+178h+var_140]
.text:0000000000003A0E                 xor     rdx, r11
.text:0000000000003A11                 rol     rcx, 20h
.text:0000000000003A15                 add     r15, rcx
.text:0000000000003A18                 rol     r9, 20h
.text:0000000000003A1C                 xor     r8, r15
.text:0000000000003A1F                 add     r14, r9
.text:0000000000003A22                 ror     r8, 18h
.text:0000000000003A26                 xor     r13, r14
.text:0000000000003A29                 add     rbx, r8
.text:0000000000003A2C                 ror     r13, 18h
.text:0000000000003A30                 xor     rcx, rbx
.text:0000000000003A33                 add     rbp, r13
.text:0000000000003A36                 ror     rcx, 10h
.text:0000000000003A3A                 xor     r9, rbp
.text:0000000000003A3D                 lea     rax, [r15+rcx]
.text:0000000000003A41                 ror     r9, 10h
.text:0000000000003A45                 mov     r15, 0A54FF53A5F1D36F1h
.text:0000000000003A4F                 add     r14, r9
.text:0000000000003A52                 xor     r8, rax
.text:0000000000003A55                 mov     [rsp+178h+var_170], rax
.text:0000000000003A5A                 mov     rax, [rsp+178h+var_90]
.text:0000000000003A62                 xor     r13, r14
.text:0000000000003A65                 rol     r8, 1
.text:0000000000003A68                 rol     r13, 1
.text:0000000000003A6B                 xor     rdx, [rdi+50h]
.text:0000000000003A6F                 add     r11, [rsp+178h+var_120]
.text:0000000000003A74                 add     r10, rax
.text:0000000000003A77                 add     r10, [rsp+178h+var_118]
.text:0000000000003A7C                 mov     [rsp+178h+var_160], r13
.text:0000000000003A81                 mov     r13, 5BE0CD19137E2179h
.text:0000000000003A8B                 add     rbp, [rsp+178h+var_108]
.text:0000000000003A90                 rol     rdx, 20h
.text:0000000000003A94                 xor     r13, r10
.text:0000000000003A97                 xor     r13, [rdi+58h]
.text:0000000000003A9B                 add     r10, [rsp+178h+var_110]
.text:0000000000003AA0                 add     r12, rdx
.text:0000000000003AA3                 add     rbp, r8
.text:0000000000003AA6                 xor     rsi, r12
.text:0000000000003AA9                 ror     rsi, 18h
.text:0000000000003AAD                 rol     r13, 20h
.text:0000000000003AB1                 add     r11, rsi
.text:0000000000003AB4                 add     r15, r13
.text:0000000000003AB7                 xor     rdx, r11
.text:0000000000003ABA                 xor     rax, r15
.text:0000000000003ABD                 ror     rdx, 10h
.text:0000000000003AC1                 ror     rax, 18h
.text:0000000000003AC5                 add     r12, rdx
.text:0000000000003AC8                 add     r10, rax
.text:0000000000003ACB                 xor     rsi, r12
.text:0000000000003ACE                 xor     r13, r10
.text:0000000000003AD1                 rol     rsi, 1
.text:0000000000003AD4                 ror     r13, 10h
.text:0000000000003AD8                 add     r15, r13
.text:0000000000003ADB                 xor     r13, rbp
.text:0000000000003ADE                 rol     r13, 20h
.text:0000000000003AE2                 xor     rax, r15
.text:0000000000003AE5                 add     r12, r13
.text:0000000000003AE8                 rol     rax, 1
.text:0000000000003AEB                 xor     r8, r12
.text:0000000000003AEE                 add     rbp, [rsp+178h+var_100]
.text:0000000000003AF3                 add     rbx, [rsp+178h+var_F8]
.text:0000000000003AFB                 ror     r8, 18h
.text:0000000000003AFF                 add     r11, [rsp+178h+var_E8]
.text:0000000000003B07                 add     rbp, r8
.text:0000000000003B0A                 add     rbx, rsi
.text:0000000000003B0D                 xor     r13, rbp
.text:0000000000003B10                 xor     r9, rbx
.text:0000000000003B13                 add     rbx, [rsp+178h+var_F0]
.text:0000000000003B1B                 ror     r13, 10h
.text:0000000000003B1F                 rol     r9, 20h
.text:0000000000003B23                 add     r11, rax
.text:0000000000003B26                 add     r12, r13
.text:0000000000003B29                 mov     [rsp+178h+var_158], r13
.text:0000000000003B2E                 lea     r13, [r15+r9]
.text:0000000000003B32                 xor     rcx, r11
.text:0000000000003B35                 add     r11, [rsp+178h+var_E0]
.text:0000000000003B3D                 xor     r8, r12
.text:0000000000003B40                 xor     rsi, r13
.text:0000000000003B43                 rol     rcx, 20h
.text:0000000000003B47                 rol     r8, 1
.text:0000000000003B4A                 ror     rsi, 18h
.text:0000000000003B4E                 add     r14, rcx
.text:0000000000003B51                 add     rbx, rsi
.text:0000000000003B54                 xor     rax, r14
.text:0000000000003B57                 xor     r9, rbx
.text:0000000000003B5A                 ror     rax, 18h
.text:0000000000003B5E                 ror     r9, 10h
.text:0000000000003B62                 add     r11, rax
.text:0000000000003B65                 lea     r15, [r13+r9+0]
.text:0000000000003B6A                 xor     rcx, r11
.text:0000000000003B6D                 mov     r13, [rsp+178h+var_160]
.text:0000000000003B72                 ror     rcx, 10h
.text:0000000000003B76                 xor     rsi, r15
.text:0000000000003B79                 mov     [rsp+178h+var_168], r15
.text:0000000000003B7E                 rol     rsi, 1
.text:0000000000003B81                 add     r14, rcx
.text:0000000000003B84                 add     r10, [rsp+178h+var_D8]
.text:0000000000003B8C                 mov     r15, [rsp+178h+var_170]
.text:0000000000003B91                 add     rbp, [rsp+178h+var_D8]
.text:0000000000003B99                 xor     rax, r14
.text:0000000000003B9C                 add     rbx, [rsp+178h+var_128]
.text:0000000000003BA1                 rol     rax, 1
.text:0000000000003BA4                 add     r10, r13
.text:0000000000003BA7                 xor     rdx, r10
.text:0000000000003BAA                 add     r10, [rsp+178h+var_D0]
.text:0000000000003BB2                 rol     rdx, 20h
.text:0000000000003BB6                 add     r15, rdx
.text:0000000000003BB9                 xor     r13, r15
.text:0000000000003BBC                 ror     r13, 18h
.text:0000000000003BC0                 add     r10, r13
.text:0000000000003BC3                 xor     rdx, r10
.text:0000000000003BC6                 ror     rdx, 10h
.text:0000000000003BCA                 add     r15, rdx
.text:0000000000003BCD                 xor     r13, r15
.text:0000000000003BD0                 rol     r13, 1
.text:0000000000003BD3                 add     rbp, r13
.text:0000000000003BD6                 xor     r9, rbp
.text:0000000000003BD9                 add     rbp, [rsp+178h+var_F8]
.text:0000000000003BE1                 rol     r9, 20h
.text:0000000000003BE5                 add     r14, r9
.text:0000000000003BE8                 xor     r13, r14
.text:0000000000003BEB                 ror     r13, 18h
.text:0000000000003BEF                 add     rbp, r13
.text:0000000000003BF2                 xor     r9, rbp
.text:0000000000003BF5                 ror     r9, 10h
.text:0000000000003BF9                 add     r14, r9
.text:0000000000003BFC                 xor     r13, r14
.text:0000000000003BFF                 rol     r13, 1
.text:0000000000003C02                 add     rbx, r8
.text:0000000000003C05                 add     r11, [rsp+178h+var_100]
.text:0000000000003C0A                 xor     rcx, rbx
.text:0000000000003C0D                 add     rbx, [rsp+178h+var_108]
.text:0000000000003C12                 add     r10, [rsp+178h+var_E0]
.text:0000000000003C1A                 rol     rcx, 20h
.text:0000000000003C1E                 mov     [rsp+178h+var_160], r13
.text:0000000000003C23                 mov     r13, [rsp+178h+var_158]
.text:0000000000003C28                 add     r15, rcx
.text:0000000000003C2B                 add     r11, rsi
.text:0000000000003C2E                 xor     r8, r15
.text:0000000000003C31                 xor     rdx, r11
.text:0000000000003C34                 ror     r8, 18h
.text:0000000000003C38                 add     r11, [rsp+178h+var_D0]
.text:0000000000003C40                 rol     rdx, 20h
.text:0000000000003C44                 add     rbx, r8
.text:0000000000003C47                 add     r10, rax
.text:0000000000003C4A                 add     r12, rdx
.text:0000000000003C4D                 xor     rcx, rbx
.text:0000000000003C50                 xor     r13, r10
.text:0000000000003C53                 xor     rsi, r12
.text:0000000000003C56                 ror     rcx, 10h
.text:0000000000003C5A                 rol     r13, 20h
.text:0000000000003C5E                 ror     rsi, 18h
.text:0000000000003C62                 add     r15, rcx
.text:0000000000003C65                 add     r11, rsi
.text:0000000000003C68                 mov     [rsp+178h+var_170], r15
.text:0000000000003C6D                 xor     r8, r15
.text:0000000000003C70                 xor     rdx, r11
.text:0000000000003C73                 mov     r15, [rsp+178h+var_168]
.text:0000000000003C78                 rol     r8, 1
.text:0000000000003C7B                 ror     rdx, 10h
.text:0000000000003C7F                 add     r12, rdx
.text:0000000000003C82                 xor     rsi, r12
.text:0000000000003C85                 add     r15, r13
.text:0000000000003C88                 rol     rsi, 1
.text:0000000000003C8B                 xor     rax, r15
.text:0000000000003C8E                 add     r10, [rsp+178h+var_118]
.text:0000000000003C93                 add     rbp, [rsp+178h+var_140]
.text:0000000000003C98                 ror     rax, 18h
.text:0000000000003C9C                 add     rbx, [rsp+178h+var_148]
.text:0000000000003CA1                 add     r10, rax
.text:0000000000003CA4                 xor     r13, r10
.text:0000000000003CA7                 add     rbp, r8
.text:0000000000003CAA                 add     rbx, rsi
.text:0000000000003CAD                 ror     r13, 10h
.text:0000000000003CB1                 xor     r9, rbx
.text:0000000000003CB4                 add     rbx, [rsp+178h+var_138]
.text:0000000000003CB9                 add     r15, r13
.text:0000000000003CBC                 xor     r13, rbp
.text:0000000000003CBF                 add     rbp, [rsp+178h+var_E8]
.text:0000000000003CC7                 rol     r13, 20h
.text:0000000000003CCB                 rol     r9, 20h
.text:0000000000003CCF                 xor     rax, r15
.text:0000000000003CD2                 add     r12, r13
.text:0000000000003CD5                 add     r15, r9
.text:0000000000003CD8                 rol     rax, 1
.text:0000000000003CDB                 xor     r8, r12
.text:0000000000003CDE                 xor     rsi, r15
.text:0000000000003CE1                 ror     r8, 18h
.text:0000000000003CE5                 ror     rsi, 18h
.text:0000000000003CE9                 add     rbp, r8
.text:0000000000003CEC                 add     rbx, rsi
.text:0000000000003CEF                 xor     r13, rbp
.text:0000000000003CF2                 ror     r13, 10h
.text:0000000000003CF6                 add     r12, r13
.text:0000000000003CF9                 mov     [rsp+178h+var_158], r13
.text:0000000000003CFE                 mov     r13, [rsp+178h+var_160]
.text:0000000000003D03                 xor     r8, r12
.text:0000000000003D06                 rol     r8, 1
.text:0000000000003D09                 xor     r9, rbx
.text:0000000000003D0C                 add     r11, [rsp+178h+var_F0]
.text:0000000000003D14                 add     r10, [rsp+178h+var_120]
.text:0000000000003D19                 ror     r9, 10h
.text:0000000000003D1D                 add     r15, r9
.text:0000000000003D20                 xor     rsi, r15
.text:0000000000003D23                 mov     [rsp+178h+var_168], r15
.text:0000000000003D28                 mov     r15, [rsp+178h+var_170]
.text:0000000000003D2D                 add     r11, rax
.text:0000000000003D30                 rol     rsi, 1
.text:0000000000003D33                 add     r10, r13
.text:0000000000003D36                 xor     rcx, r11
.text:0000000000003D39                 add     r11, [rsp+178h+var_110]
.text:0000000000003D3E                 xor     rdx, r10
.text:0000000000003D41                 rol     rcx, 20h
.text:0000000000003D45                 add     r10, [rsp+178h+var_130]
.text:0000000000003D4A                 rol     rdx, 20h
.text:0000000000003D4E                 add     r14, rcx
.text:0000000000003D51                 add     r15, rdx
.text:0000000000003D54                 xor     rax, r14
.text:0000000000003D57                 xor     r13, r15
.text:0000000000003D5A                 ror     rax, 18h
.text:0000000000003D5E                 ror     r13, 18h
.text:0000000000003D62                 add     r11, rax
.text:0000000000003D65                 add     r10, r13
.text:0000000000003D68                 xor     rcx, r11
.text:0000000000003D6B                 xor     rdx, r10
.text:0000000000003D6E                 ror     rcx, 10h
.text:0000000000003D72                 ror     rdx, 10h
.text:0000000000003D76                 add     r14, rcx
.text:0000000000003D79                 add     r15, rdx
.text:0000000000003D7C                 xor     rax, r14
.text:0000000000003D7F                 xor     r13, r15
.text:0000000000003D82                 rol     rax, 1
.text:0000000000003D85                 rol     r13, 1
.text:0000000000003D88                 add     rbp, [rsp+178h+var_F0]
.text:0000000000003D90                 add     rbx, [rsp+178h+var_E8]
.text:0000000000003D98                 add     rbp, r13
.text:0000000000003D9B                 add     rbx, r8
.text:0000000000003D9E                 xor     r9, rbp
.text:0000000000003DA1                 add     rbp, [rsp+178h+var_108]
.text:0000000000003DA6                 xor     rcx, rbx
.text:0000000000003DA9                 rol     r9, 20h
.text:0000000000003DAD                 rol     rcx, 20h
.text:0000000000003DB1                 add     rbx, [rsp+178h+var_148]
.text:0000000000003DB6                 add     r14, r9
.text:0000000000003DB9                 add     r15, rcx
.text:0000000000003DBC                 xor     r13, r14
.text:0000000000003DBF                 xor     r8, r15
.text:0000000000003DC2                 ror     r13, 18h
.text:0000000000003DC6                 ror     r8, 18h
.text:0000000000003DCA                 add     rbp, r13
.text:0000000000003DCD                 add     rbx, r8
.text:0000000000003DD0                 xor     r9, rbp
.text:0000000000003DD3                 xor     rcx, rbx
.text:0000000000003DD6                 ror     r9, 10h
.text:0000000000003DDA                 ror     rcx, 10h
.text:0000000000003DDE                 add     r14, r9
.text:0000000000003DE1                 add     r15, rcx
.text:0000000000003DE4                 xor     r13, r14
.text:0000000000003DE7                 mov     [rsp+178h+var_170], r15
.text:0000000000003DEC                 xor     r8, r15
.text:0000000000003DEF                 rol     r13, 1
.text:0000000000003DF2                 rol     r8, 1
.text:0000000000003DF5                 mov     [rsp+178h+var_160], r13
.text:0000000000003DFA                 add     r11, [rsp+178h+var_120]
.text:0000000000003DFF                 mov     r13, [rsp+178h+var_158]
.text:0000000000003E04                 mov     r15, [rsp+178h+var_168]
.text:0000000000003E09                 add     r11, rsi
.text:0000000000003E0C                 xor     rdx, r11
.text:0000000000003E0F                 rol     rdx, 20h
.text:0000000000003E13                 add     r10, [rsp+178h+var_D0]
.text:0000000000003E1B                 add     r11, [rsp+178h+var_138]
.text:0000000000003E20                 add     r12, rdx
.text:0000000000003E23                 add     rbp, [rsp+178h+var_F8]
.text:0000000000003E2B                 xor     rsi, r12
.text:0000000000003E2E                 ror     rsi, 18h
.text:0000000000003E32                 add     r10, rax
.text:0000000000003E35                 add     r11, rsi
.text:0000000000003E38                 xor     r13, r10
.text:0000000000003E3B                 add     r10, [rsp+178h+var_E0]
.text:0000000000003E43                 xor     rdx, r11
.text:0000000000003E46                 rol     r13, 20h
.text:0000000000003E4A                 add     rbp, r8
.text:0000000000003E4D                 ror     rdx, 10h
.text:0000000000003E51                 add     r15, r13
.text:0000000000003E54                 add     r12, rdx
.text:0000000000003E57                 xor     rax, r15
.text:0000000000003E5A                 xor     rsi, r12
.text:0000000000003E5D                 ror     rax, 18h
.text:0000000000003E61                 rol     rsi, 1
.text:0000000000003E64                 add     r10, rax
.text:0000000000003E67                 xor     r13, r10
.text:0000000000003E6A                 ror     r13, 10h
.text:0000000000003E6E                 add     r15, r13
.text:0000000000003E71                 xor     r13, rbp
.text:0000000000003E74                 rol     r13, 20h
.text:0000000000003E78                 xor     rax, r15
.text:0000000000003E7B                 add     r12, r13
.text:0000000000003E7E                 rol     rax, 1
.text:0000000000003E81                 xor     r8, r12
.text:0000000000003E84                 ror     r8, 18h
.text:0000000000003E88                 add     rbp, [rsp+178h+var_D8]
.text:0000000000003E90                 add     rbx, [rsp+178h+var_130]
.text:0000000000003E95                 add     r11, [rsp+178h+var_110]
.text:0000000000003E9A                 add     rbx, rsi
.text:0000000000003E9D                 add     rbp, r8
.text:0000000000003EA0                 xor     r9, rbx
.text:0000000000003EA3                 add     r11, rax
.text:0000000000003EA6                 add     rbx, [rsp+178h+var_118]
.text:0000000000003EAB                 rol     r9, 20h
.text:0000000000003EAF                 xor     rcx, r11
.text:0000000000003EB2                 add     r11, [rsp+178h+var_140]
.text:0000000000003EB7                 add     r15, r9
.text:0000000000003EBA                 rol     rcx, 20h
.text:0000000000003EBE                 xor     r13, rbp
.text:0000000000003EC1                 xor     rsi, r15
.text:0000000000003EC4                 add     r14, rcx
.text:0000000000003EC7                 ror     r13, 10h
.text:0000000000003ECB                 ror     rsi, 18h
.text:0000000000003ECF                 xor     rax, r14
.text:0000000000003ED2                 add     r12, r13
.text:0000000000003ED5                 add     rbx, rsi
.text:0000000000003ED8                 ror     rax, 18h
.text:0000000000003EDC                 xor     r8, r12
.text:0000000000003EDF                 xor     r9, rbx
.text:0000000000003EE2                 add     r11, rax
.text:0000000000003EE5                 rol     r8, 1
.text:0000000000003EE8                 ror     r9, 10h
.text:0000000000003EEC                 xor     rcx, r11
.text:0000000000003EEF                 mov     [rsp+178h+var_158], r13
.text:0000000000003EF4                 add     r15, r9
.text:0000000000003EF7                 ror     rcx, 10h
.text:0000000000003EFB                 mov     r13, [rsp+178h+var_160]
.text:0000000000003F00                 xor     rsi, r15
.text:0000000000003F03                 mov     [rsp+178h+var_168], r15
.text:0000000000003F08                 mov     r15, [rsp+178h+var_170]
.text:0000000000003F0D                 rol     rsi, 1
.text:0000000000003F10                 add     r14, rcx
.text:0000000000003F13                 add     r10, [rsp+178h+var_100]
.text:0000000000003F18                 add     rbp, [rsp+178h+var_110]
.text:0000000000003F1D                 xor     rax, r14
.text:0000000000003F20                 add     rbx, [rsp+178h+var_130]
.text:0000000000003F25                 rol     rax, 1
.text:0000000000003F28                 add     r10, r13
.text:0000000000003F2B                 xor     rdx, r10
.text:0000000000003F2E                 add     r10, [rsp+178h+var_128]
.text:0000000000003F33                 rol     rdx, 20h
.text:0000000000003F37                 add     r15, rdx
.text:0000000000003F3A                 xor     r13, r15
.text:0000000000003F3D                 ror     r13, 18h
.text:0000000000003F41                 add     r10, r13
.text:0000000000003F44                 xor     rdx, r10
.text:0000000000003F47                 ror     rdx, 10h
.text:0000000000003F4B                 add     r15, rdx
.text:0000000000003F4E                 xor     r13, r15
.text:0000000000003F51                 rol     r13, 1
.text:0000000000003F54                 add     rbp, r13
.text:0000000000003F57                 xor     r9, rbp
.text:0000000000003F5A                 add     rbp, [rsp+178h+var_100]
.text:0000000000003F5F                 rol     r9, 20h
.text:0000000000003F63                 add     r14, r9
.text:0000000000003F66                 xor     r13, r14
.text:0000000000003F69                 ror     r13, 18h
.text:0000000000003F6D                 add     rbp, r13
.text:0000000000003F70                 xor     r9, rbp
.text:0000000000003F73                 ror     r9, 10h
.text:0000000000003F77                 add     r14, r9
.text:0000000000003F7A                 xor     r13, r14
.text:0000000000003F7D                 rol     r13, 1
.text:0000000000003F80                 add     rbx, r8
.text:0000000000003F83                 add     r11, [rsp+178h+var_E0]
.text:0000000000003F8B                 xor     rcx, rbx
.text:0000000000003F8E                 add     rbx, [rsp+178h+var_140]
.text:0000000000003F93                 add     r10, [rsp+178h+var_F0]
.text:0000000000003F9B                 rol     rcx, 20h
.text:0000000000003F9F                 mov     [rsp+178h+var_160], r13
.text:0000000000003FA4                 mov     r13, [rsp+178h+var_158]
.text:0000000000003FA9                 add     r15, rcx
.text:0000000000003FAC                 add     r11, rsi
.text:0000000000003FAF                 xor     r8, r15
.text:0000000000003FB2                 xor     rdx, r11
.text:0000000000003FB5                 ror     r8, 18h
.text:0000000000003FB9                 add     r11, [rsp+178h+var_E8]
.text:0000000000003FC1                 rol     rdx, 20h
.text:0000000000003FC5                 add     rbx, r8
.text:0000000000003FC8                 add     r10, rax
.text:0000000000003FCB                 add     r12, rdx
.text:0000000000003FCE                 xor     rcx, rbx
.text:0000000000003FD1                 xor     r13, r10
.text:0000000000003FD4                 xor     rsi, r12
.text:0000000000003FD7                 ror     rcx, 10h
.text:0000000000003FDB                 rol     r13, 20h
.text:0000000000003FDF                 ror     rsi, 18h
.text:0000000000003FE3                 add     r15, rcx
.text:0000000000003FE6                 add     r11, rsi
.text:0000000000003FE9                 xor     r8, r15
.text:0000000000003FEC                 mov     [rsp+178h+var_170], r15
.text:0000000000003FF1                 xor     rdx, r11
.text:0000000000003FF4                 mov     r15, [rsp+178h+var_168]
.text:0000000000003FF9                 rol     r8, 1
.text:0000000000003FFC                 ror     rdx, 10h
.text:0000000000004000                 add     r12, rdx
.text:0000000000004003                 xor     rsi, r12
.text:0000000000004006                 add     r15, r13
.text:0000000000004009                 rol     rsi, 1
.text:000000000000400C                 xor     rax, r15
.text:000000000000400F                 add     r10, [rsp+178h+var_D8]
.text:0000000000004017                 add     rbp, [rsp+178h+var_138]
.text:000000000000401C                 ror     rax, 18h
.text:0000000000004020                 add     r10, rax
.text:0000000000004023                 xor     r13, r10
.text:0000000000004026                 add     rbp, r8
.text:0000000000004029                 ror     r13, 10h
.text:000000000000402D                 add     r15, r13
.text:0000000000004030                 xor     r13, rbp
.text:0000000000004033                 add     rbp, [rsp+178h+var_118]
.text:0000000000004038                 rol     r13, 20h
.text:000000000000403C                 xor     rax, r15
.text:000000000000403F                 add     r12, r13
.text:0000000000004042                 rol     rax, 1
.text:0000000000004045                 xor     r8, r12
.text:0000000000004048                 ror     r8, 18h
.text:000000000000404C                 add     rbp, r8
.text:000000000000404F                 xor     r13, rbp
.text:0000000000004052                 ror     r13, 10h
.text:0000000000004056                 mov     [rsp+178h+var_158], r13
.text:000000000000405B                 add     rbx, [rsp+178h+var_120]
.text:0000000000004060                 add     r12, r13
.text:0000000000004063                 xor     r8, r12
.text:0000000000004066                 mov     r13, [rsp+178h+var_160]
.text:000000000000406B                 rol     r8, 1
.text:000000000000406E                 add     rbx, rsi
.text:0000000000004071                 xor     r9, rbx
.text:0000000000004074                 add     rbx, [rsp+178h+var_F8]
.text:000000000000407C                 rol     r9, 20h
.text:0000000000004080                 add     r15, r9
.text:0000000000004083                 xor     rsi, r15
.text:0000000000004086                 ror     rsi, 18h
.text:000000000000408A                 add     rbx, rsi
.text:000000000000408D                 xor     r9, rbx
.text:0000000000004090                 add     r11, [rsp+178h+var_128]
.text:0000000000004095                 add     r10, [rsp+178h+var_D0]
.text:000000000000409D                 ror     r9, 10h
.text:00000000000040A1                 add     r15, r9
.text:00000000000040A4                 mov     [rsp+178h+var_168], r15
.text:00000000000040A9                 xor     rsi, r15
.text:00000000000040AC                 mov     r15, [rsp+178h+var_170]
.text:00000000000040B1                 add     r11, rax
.text:00000000000040B4                 add     r10, r13
.text:00000000000040B7                 rol     rsi, 1
.text:00000000000040BA                 xor     rcx, r11
.text:00000000000040BD                 xor     rdx, r10
.text:00000000000040C0                 add     r11, [rsp+178h+var_148]
.text:00000000000040C5                 rol     rcx, 20h
.text:00000000000040C9                 rol     rdx, 20h
.text:00000000000040CD                 add     r10, [rsp+178h+var_108]
.text:00000000000040D2                 add     r14, rcx
.text:00000000000040D5                 add     r15, rdx
.text:00000000000040D8                 xor     rax, r14
.text:00000000000040DB                 xor     r13, r15
.text:00000000000040DE                 ror     rax, 18h
.text:00000000000040E2                 ror     r13, 18h
.text:00000000000040E6                 add     r11, rax
.text:00000000000040E9                 add     r10, r13
.text:00000000000040EC                 xor     rcx, r11
.text:00000000000040EF                 xor     rdx, r10
.text:00000000000040F2                 ror     rcx, 10h
.text:00000000000040F6                 ror     rdx, 10h
.text:00000000000040FA                 add     r14, rcx
.text:00000000000040FD                 add     r15, rdx
.text:0000000000004100                 xor     rax, r14
.text:0000000000004103                 xor     r13, r15
.text:0000000000004106                 rol     rax, 1
.text:0000000000004109                 rol     r13, 1
.text:000000000000410C                 add     rbp, [rsp+178h+var_100]
.text:0000000000004111                 add     rbx, [rsp+178h+var_120]
.text:0000000000004116                 add     r11, [rsp+178h+var_138]
.text:000000000000411B                 add     rbp, r13
.text:000000000000411E                 add     rbx, r8
.text:0000000000004121                 xor     r9, rbp
.text:0000000000004124                 add     rbp, [rsp+178h+var_148]
.text:0000000000004129                 xor     rcx, rbx
.text:000000000000412C                 rol     r9, 20h
.text:0000000000004130                 add     rbx, [rsp+178h+var_110]
.text:0000000000004135                 rol     rcx, 20h
.text:0000000000004139                 add     r14, r9
.text:000000000000413C                 add     r11, rsi
.text:000000000000413F                 add     r15, rcx
.text:0000000000004142                 xor     r13, r14
.text:0000000000004145                 xor     rdx, r11
.text:0000000000004148                 xor     r8, r15
.text:000000000000414B                 ror     r13, 18h
.text:000000000000414F                 ror     r8, 18h
.text:0000000000004153                 add     rbp, r13
.text:0000000000004156                 add     rbx, r8
.text:0000000000004159                 xor     r9, rbp
.text:000000000000415C                 xor     rcx, rbx
.text:000000000000415F                 ror     r9, 10h
.text:0000000000004163                 ror     rcx, 10h
.text:0000000000004167                 add     r14, r9
.text:000000000000416A                 add     r15, rcx
.text:000000000000416D                 xor     r13, r14
.text:0000000000004170                 xor     r8, r15
.text:0000000000004173                 rol     r13, 1
.text:0000000000004176                 mov     [rsp+178h+var_170], r15
.text:000000000000417B                 rol     r8, 1
.text:000000000000417E                 rol     rdx, 20h
.text:0000000000004182                 add     r10, [rsp+178h+var_F8]
.text:000000000000418A                 mov     [rsp+178h+var_160], r13
.text:000000000000418F                 mov     r13, [rsp+178h+var_158]
.text:0000000000004194                 add     r12, rdx
.text:0000000000004197                 mov     r15, [rsp+178h+var_168]
.text:000000000000419C                 add     r11, [rsp+178h+var_128]
.text:00000000000041A1                 xor     rsi, r12
.text:00000000000041A4                 add     rbp, [rsp+178h+var_D8]
.text:00000000000041AC                 ror     rsi, 18h
.text:00000000000041B0                 add     r10, rax
.text:00000000000041B3                 xor     r13, r10
.text:00000000000041B6                 add     r10, [rsp+178h+var_D0]
.text:00000000000041BE                 rol     r13, 20h
.text:00000000000041C2                 add     r11, rsi
.text:00000000000041C5                 add     r15, r13
.text:00000000000041C8                 xor     rdx, r11
.text:00000000000041CB                 add     rbp, r8
.text:00000000000041CE                 xor     rax, r15
.text:00000000000041D1                 ror     rdx, 10h
.text:00000000000041D5                 ror     rax, 18h
.text:00000000000041D9                 add     r12, rdx
.text:00000000000041DC                 add     r10, rax
.text:00000000000041DF                 xor     rsi, r12
.text:00000000000041E2                 xor     r13, r10
.text:00000000000041E5                 rol     rsi, 1
.text:00000000000041E8                 ror     r13, 10h
.text:00000000000041EC                 add     r15, r13
.text:00000000000041EF                 xor     r13, rbp
.text:00000000000041F2                 rol     r13, 20h
.text:00000000000041F6                 xor     rax, r15
.text:00000000000041F9                 add     r12, r13
.text:00000000000041FC                 rol     rax, 1
.text:00000000000041FF                 xor     r8, r12
.text:0000000000004202                 ror     r8, 18h
.text:0000000000004206                 add     rbp, [rsp+178h+var_140]
.text:000000000000420B                 add     rbx, [rsp+178h+var_F0]
.text:0000000000004213                 add     r11, [rsp+178h+var_118]
.text:0000000000004218                 add     rbx, rsi
.text:000000000000421B                 add     rbp, r8
.text:000000000000421E                 xor     r9, rbx
.text:0000000000004221                 add     r11, rax
.text:0000000000004224                 add     rbx, [rsp+178h+var_E8]
.text:000000000000422C                 rol     r9, 20h
.text:0000000000004230                 xor     rcx, r11
.text:0000000000004233                 add     r11, [rsp+178h+var_108]
.text:0000000000004238                 add     r15, r9
.text:000000000000423B                 rol     rcx, 20h
.text:000000000000423F                 xor     r13, rbp
.text:0000000000004242                 xor     rsi, r15
.text:0000000000004245                 add     r14, rcx
.text:0000000000004248                 ror     r13, 10h
.text:000000000000424C                 ror     rsi, 18h
.text:0000000000004250                 xor     rax, r14
.text:0000000000004253                 add     r12, r13
.text:0000000000004256                 add     rbx, rsi
.text:0000000000004259                 ror     rax, 18h
.text:000000000000425D                 xor     r8, r12
.text:0000000000004260                 xor     r9, rbx
.text:0000000000004263                 add     r11, rax
.text:0000000000004266                 rol     r8, 1
.text:0000000000004269                 ror     r9, 10h
.text:000000000000426D                 xor     rcx, r11
.text:0000000000004270                 mov     [rsp+178h+var_158], r13
.text:0000000000004275                 add     r15, r9
.text:0000000000004278                 ror     rcx, 10h
.text:000000000000427C                 mov     r13, [rsp+178h+var_160]
.text:0000000000004281                 xor     rsi, r15
.text:0000000000004284                 mov     [rsp+178h+var_168], r15
.text:0000000000004289                 mov     r15, [rsp+178h+var_170]
.text:000000000000428E                 rol     rsi, 1
.text:0000000000004291                 add     r14, rcx
.text:0000000000004294                 add     r10, [rsp+178h+var_130]
.text:0000000000004299                 xor     rax, r14
.text:000000000000429C                 rol     rax, 1
.text:000000000000429F                 add     r10, r13
.text:00000000000042A2                 xor     rdx, r10
.text:00000000000042A5                 add     r10, [rsp+178h+var_E0]
.text:00000000000042AD                 add     rbp, [rsp+178h+var_138]
.text:00000000000042B2                 rol     rdx, 20h
.text:00000000000042B6                 add     rbx, [rsp+178h+var_118]
.text:00000000000042BB                 add     r15, rdx
.text:00000000000042BE                 xor     r13, r15
.text:00000000000042C1                 ror     r13, 18h
.text:00000000000042C5                 add     r10, r13
.text:00000000000042C8                 xor     rdx, r10
.text:00000000000042CB                 ror     rdx, 10h
.text:00000000000042CF                 add     r15, rdx
.text:00000000000042D2                 xor     r13, r15
.text:00000000000042D5                 rol     r13, 1
.text:00000000000042D8                 add     rbp, r13
.text:00000000000042DB                 xor     r9, rbp
.text:00000000000042DE                 add     rbp, [rsp+178h+var_E8]
.text:00000000000042E6                 rol     r9, 20h
.text:00000000000042EA                 add     r14, r9
.text:00000000000042ED                 xor     r13, r14
.text:00000000000042F0                 ror     r13, 18h
.text:00000000000042F4                 add     rbp, r13
.text:00000000000042F7                 xor     r9, rbp
.text:00000000000042FA                 ror     r9, 10h
.text:00000000000042FE                 add     r14, r9
.text:0000000000004301                 xor     r13, r14
.text:0000000000004304                 rol     r13, 1
.text:0000000000004307                 add     rbx, r8
.text:000000000000430A                 add     r11, [rsp+178h+var_148]
.text:000000000000430F                 xor     rcx, rbx
.text:0000000000004312                 add     rbx, [rsp+178h+var_F8]
.text:000000000000431A                 add     r10, [rsp+178h+var_108]
.text:000000000000431F                 rol     rcx, 20h
.text:0000000000004323                 mov     [rsp+178h+var_160], r13
.text:0000000000004328                 mov     r13, [rsp+178h+var_158]
.text:000000000000432D                 add     r15, rcx
.text:0000000000004330                 add     r11, rsi
.text:0000000000004333                 xor     r8, r15
.text:0000000000004336                 xor     rdx, r11
.text:0000000000004339                 ror     r8, 18h
.text:000000000000433D                 add     r11, [rsp+178h+var_F0]
.text:0000000000004345                 rol     rdx, 20h
.text:0000000000004349                 add     rbx, r8
.text:000000000000434C                 add     r10, rax
.text:000000000000434F                 add     r12, rdx
.text:0000000000004352                 xor     rcx, rbx
.text:0000000000004355                 xor     r13, r10
.text:0000000000004358                 xor     rsi, r12
.text:000000000000435B                 ror     rcx, 10h
.text:000000000000435F                 rol     r13, 20h
.text:0000000000004363                 ror     rsi, 18h
.text:0000000000004367                 add     r15, rcx
.text:000000000000436A                 add     r11, rsi
.text:000000000000436D                 mov     [rsp+178h+var_170], r15
.text:0000000000004372                 xor     r8, r15
.text:0000000000004375                 xor     rdx, r11
.text:0000000000004378                 mov     r15, [rsp+178h+var_168]
.text:000000000000437D                 rol     r8, 1
.text:0000000000004380                 ror     rdx, 10h
.text:0000000000004384                 add     r12, rdx
.text:0000000000004387                 xor     rsi, r12
.text:000000000000438A                 add     r15, r13
.text:000000000000438D                 rol     rsi, 1
.text:0000000000004390                 xor     rax, r15
.text:0000000000004393                 add     r10, [rsp+178h+var_130]
.text:0000000000004398                 add     rbp, [rsp+178h+var_128]
.text:000000000000439D                 ror     rax, 18h
.text:00000000000043A1                 add     rbx, [rsp+178h+var_110]
.text:00000000000043A6                 add     r10, rax
.text:00000000000043A9                 xor     r13, r10
.text:00000000000043AC                 add     rbp, r8
.text:00000000000043AF                 add     rbx, rsi
.text:00000000000043B2                 ror     r13, 10h
.text:00000000000043B6                 xor     r9, rbx
.text:00000000000043B9                 add     rbx, [rsp+178h+var_120]
.text:00000000000043BE                 add     r15, r13
.text:00000000000043C1                 xor     r13, rbp
.text:00000000000043C4                 add     rbp, [rsp+178h+var_E0]
.text:00000000000043CC                 rol     r13, 20h
.text:00000000000043D0                 rol     r9, 20h
.text:00000000000043D4                 xor     rax, r15
.text:00000000000043D7                 add     r12, r13
.text:00000000000043DA                 add     r15, r9
.text:00000000000043DD                 rol     rax, 1
.text:00000000000043E0                 xor     r8, r12
.text:00000000000043E3                 xor     rsi, r15
.text:00000000000043E6                 ror     r8, 18h
.text:00000000000043EA                 ror     rsi, 18h
.text:00000000000043EE                 add     rbp, r8
.text:00000000000043F1                 add     rbx, rsi
.text:00000000000043F4                 xor     r13, rbp
.text:00000000000043F7                 ror     r13, 10h
.text:00000000000043FB                 add     r12, r13
.text:00000000000043FE                 mov     [rsp+178h+var_158], r13
.text:0000000000004403                 mov     r13, [rsp+178h+var_160]
.text:0000000000004408                 xor     r8, r12
.text:000000000000440B                 rol     r8, 1
.text:000000000000440E                 xor     r9, rbx
.text:0000000000004411                 add     r11, [rsp+178h+var_D0]
.text:0000000000004419                 add     r10, [rsp+178h+var_140]
.text:000000000000441E                 ror     r9, 10h
.text:0000000000004422                 add     r15, r9
.text:0000000000004425                 xor     rsi, r15
.text:0000000000004428                 mov     [rsp+178h+var_168], r15
.text:000000000000442D                 mov     r15, [rsp+178h+var_170]
.text:0000000000004432                 add     r11, rax
.text:0000000000004435                 rol     rsi, 1
.text:0000000000004438                 add     r10, r13
.text:000000000000443B                 xor     rcx, r11
.text:000000000000443E                 add     r11, [rsp+178h+var_D8]
.text:0000000000004446                 xor     rdx, r10
.text:0000000000004449                 rol     rcx, 20h
.text:000000000000444D                 add     r10, [rsp+178h+var_100]
.text:0000000000004452                 rol     rdx, 20h
.text:0000000000004456                 add     r14, rcx
.text:0000000000004459                 add     r15, rdx
.text:000000000000445C                 xor     rax, r14
.text:000000000000445F                 xor     r13, r15
.text:0000000000004462                 ror     rax, 18h
.text:0000000000004466                 ror     r13, 18h
.text:000000000000446A                 add     r11, rax
.text:000000000000446D                 add     r10, r13
.text:0000000000004470                 xor     rcx, r11
.text:0000000000004473                 xor     rdx, r10
.text:0000000000004476                 ror     rcx, 10h
.text:000000000000447A                 ror     rdx, 10h
.text:000000000000447E                 add     r14, rcx
.text:0000000000004481                 add     r15, rdx
.text:0000000000004484                 xor     rax, r14
.text:0000000000004487                 xor     r13, r15
.text:000000000000448A                 rol     rax, 1
.text:000000000000448D                 rol     r13, 1
.text:0000000000004490                 add     rbp, [rsp+178h+var_E8]
.text:0000000000004498                 add     rbx, [rsp+178h+var_140]
.text:000000000000449D                 add     r11, [rsp+178h+var_D8]
.text:00000000000044A5                 add     rbp, r13
.text:00000000000044A8                 add     rbx, r8
.text:00000000000044AB                 xor     r9, rbp
.text:00000000000044AE                 xor     rcx, rbx
.text:00000000000044B1                 add     rbp, [rsp+178h+var_120]
.text:00000000000044B6                 rol     r9, 20h
.text:00000000000044BA                 rol     rcx, 20h
.text:00000000000044BE                 add     rbx, [rsp+178h+var_D0]
.text:00000000000044C6                 add     r14, r9
.text:00000000000044C9                 add     r15, rcx
.text:00000000000044CC                 add     r11, rsi
.text:00000000000044CF                 xor     r13, r14
.text:00000000000044D2                 xor     r8, r15
.text:00000000000044D5                 xor     rdx, r11
.text:00000000000044D8                 ror     r13, 18h
.text:00000000000044DC                 ror     r8, 18h
.text:00000000000044E0                 add     rbp, r13
.text:00000000000044E3                 add     rbx, r8
.text:00000000000044E6                 xor     r9, rbp
.text:00000000000044E9                 xor     rcx, rbx
.text:00000000000044EC                 ror     r9, 10h
.text:00000000000044F0                 ror     rcx, 10h
.text:00000000000044F4                 add     r14, r9
.text:00000000000044F7                 add     r15, rcx
.text:00000000000044FA                 xor     r13, r14
.text:00000000000044FD                 xor     r8, r15
.text:0000000000004500                 mov     [rsp+178h+var_170], r15
.text:0000000000004505                 rol     r13, 1
.text:0000000000004508                 rol     r8, 1
.text:000000000000450B                 rol     rdx, 20h
.text:000000000000450F                 mov     [rsp+178h+var_160], r13
.text:0000000000004514                 add     r11, [rsp+178h+var_E0]
.text:000000000000451C                 add     r12, rdx
.text:000000000000451F                 add     r10, [rsp+178h+var_128]
.text:0000000000004524                 mov     r13, [rsp+178h+var_158]
.text:0000000000004529                 xor     rsi, r12
.text:000000000000452C                 mov     r15, [rsp+178h+var_168]
.text:0000000000004531                 add     rbp, [rsp+178h+var_148]
.text:0000000000004536                 ror     rsi, 18h
.text:000000000000453A                 add     r11, rsi
.text:000000000000453D                 add     r10, rax
.text:0000000000004540                 xor     rdx, r11
.text:0000000000004543                 xor     r13, r10
.text:0000000000004546                 add     r10, [rsp+178h+var_F8]
.text:000000000000454E                 add     rbp, r8
.text:0000000000004551                 rol     r13, 20h
.text:0000000000004555                 ror     rdx, 10h
.text:0000000000004559                 add     r15, r13
.text:000000000000455C                 add     r12, rdx
.text:000000000000455F                 xor     rax, r15
.text:0000000000004562                 xor     rsi, r12
.text:0000000000004565                 ror     rax, 18h
.text:0000000000004569                 rol     rsi, 1
.text:000000000000456C                 add     r10, rax
.text:000000000000456F                 xor     r13, r10
.text:0000000000004572                 ror     r13, 10h
.text:0000000000004576                 add     r15, r13
.text:0000000000004579                 xor     r13, rbp
.text:000000000000457C                 rol     r13, 20h
.text:0000000000004580                 xor     rax, r15
.text:0000000000004583                 add     r12, r13
.text:0000000000004586                 rol     rax, 1
.text:0000000000004589                 xor     r8, r12
.text:000000000000458C                 ror     r8, 18h
.text:0000000000004590                 add     rbp, [rsp+178h+var_110]
.text:0000000000004595                 add     rbx, [rsp+178h+var_118]
.text:000000000000459A                 add     r11, [rsp+178h+var_100]
.text:000000000000459F                 add     rbx, rsi
.text:00000000000045A2                 add     rbp, r8
.text:00000000000045A5                 xor     r9, rbx
.text:00000000000045A8                 add     r11, rax
.text:00000000000045AB                 add     rbx, [rsp+178h+var_130]
.text:00000000000045B0                 rol     r9, 20h
.text:00000000000045B4                 xor     rcx, r11
.text:00000000000045B7                 add     r11, [rsp+178h+var_138]
.text:00000000000045BC                 add     r15, r9
.text:00000000000045BF                 rol     rcx, 20h
.text:00000000000045C3                 xor     r13, rbp
.text:00000000000045C6                 xor     rsi, r15
.text:00000000000045C9                 add     r14, rcx
.text:00000000000045CC                 ror     r13, 10h
.text:00000000000045D0                 ror     rsi, 18h
.text:00000000000045D4                 xor     rax, r14
.text:00000000000045D7                 add     r12, r13
.text:00000000000045DA                 add     rbx, rsi
.text:00000000000045DD                 ror     rax, 18h
.text:00000000000045E1                 xor     r8, r12
.text:00000000000045E4                 xor     r9, rbx
.text:00000000000045E7                 add     r11, rax
.text:00000000000045EA                 rol     r8, 1
.text:00000000000045ED                 ror     r9, 10h
.text:00000000000045F1                 xor     rcx, r11
.text:00000000000045F4                 mov     [rsp+178h+var_158], r13
.text:00000000000045F9                 add     r15, r9
.text:00000000000045FC                 ror     rcx, 10h
.text:0000000000004600                 mov     r13, [rsp+178h+var_160]
.text:0000000000004605                 xor     rsi, r15
.text:0000000000004608                 mov     [rsp+178h+var_168], r15
.text:000000000000460D                 mov     r15, [rsp+178h+var_170]
.text:0000000000004612                 rol     rsi, 1
.text:0000000000004615                 add     r14, rcx
.text:0000000000004618                 add     r10, [rsp+178h+var_108]
.text:000000000000461D                 add     rbp, [rsp+178h+var_E0]
.text:0000000000004625                 xor     rax, r14
.text:0000000000004628                 add     rbx, [rsp+178h+var_110]
.text:000000000000462D                 rol     rax, 1
.text:0000000000004630                 add     r10, r13
.text:0000000000004633                 xor     rdx, r10
.text:0000000000004636                 add     r10, [rsp+178h+var_F0]
.text:000000000000463E                 rol     rdx, 20h
.text:0000000000004642                 add     r15, rdx
.text:0000000000004645                 xor     r13, r15
.text:0000000000004648                 ror     r13, 18h
.text:000000000000464C                 add     r10, r13
.text:000000000000464F                 xor     rdx, r10
.text:0000000000004652                 ror     rdx, 10h
.text:0000000000004656                 add     r15, rdx
.text:0000000000004659                 xor     r13, r15
.text:000000000000465C                 rol     r13, 1
.text:000000000000465F                 add     rbp, r13
.text:0000000000004662                 xor     r9, rbp
.text:0000000000004665                 add     rbp, [rsp+178h+var_F0]
.text:000000000000466D                 rol     r9, 20h
.text:0000000000004671                 add     r14, r9
.text:0000000000004674                 xor     r13, r14
.text:0000000000004677                 ror     r13, 18h
.text:000000000000467B                 add     rbp, r13
.text:000000000000467E                 xor     r9, rbp
.text:0000000000004681                 ror     r9, 10h
.text:0000000000004685                 add     r14, r9
.text:0000000000004688                 xor     r13, r14
.text:000000000000468B                 rol     r13, 1
.text:000000000000468E                 add     rbx, r8
.text:0000000000004691                 add     r11, [rsp+178h+var_E8]
.text:0000000000004699                 xor     rcx, rbx
.text:000000000000469C                 add     rbx, [rsp+178h+var_D8]
.text:00000000000046A4                 add     r10, [rsp+178h+var_130]
.text:00000000000046A9                 rol     rcx, 20h
.text:00000000000046AD                 mov     [rsp+178h+var_160], r13
.text:00000000000046B2                 mov     r13, [rsp+178h+var_158]
.text:00000000000046B7                 add     r15, rcx
.text:00000000000046BA                 add     r11, rsi
.text:00000000000046BD                 xor     r8, r15
.text:00000000000046C0                 xor     rdx, r11
.text:00000000000046C3                 ror     r8, 18h
.text:00000000000046C7                 add     r11, [rsp+178h+var_140]
.text:00000000000046CC                 rol     rdx, 20h
.text:00000000000046D0                 add     rbx, r8
.text:00000000000046D3                 add     r10, rax
.text:00000000000046D6                 add     r12, rdx
.text:00000000000046D9                 xor     rcx, rbx
.text:00000000000046DC                 xor     r13, r10
.text:00000000000046DF                 xor     rsi, r12
.text:00000000000046E2                 ror     rcx, 10h
.text:00000000000046E6                 rol     r13, 20h
.text:00000000000046EA                 ror     rsi, 18h
.text:00000000000046EE                 add     r15, rcx
.text:00000000000046F1                 add     r11, rsi
.text:00000000000046F4                 xor     r8, r15
.text:00000000000046F7                 mov     [rsp+178h+var_170], r15
.text:00000000000046FC                 xor     rdx, r11
.text:00000000000046FF                 mov     r15, [rsp+178h+var_168]
.text:0000000000004704                 rol     r8, 1
.text:0000000000004707                 ror     rdx, 10h
.text:000000000000470B                 add     r12, rdx
.text:000000000000470E                 xor     rsi, r12
.text:0000000000004711                 add     r15, r13
.text:0000000000004714                 rol     rsi, 1
.text:0000000000004717                 xor     rax, r15
.text:000000000000471A                 add     r10, [rsp+178h+var_100]
.text:000000000000471F                 add     rbp, [rsp+178h+var_120]
.text:0000000000004724                 ror     rax, 18h
.text:0000000000004728                 add     r10, rax
.text:000000000000472B                 xor     r13, r10
.text:000000000000472E                 add     rbp, r8
.text:0000000000004731                 ror     r13, 10h
.text:0000000000004735                 add     r15, r13
.text:0000000000004738                 xor     r13, rbp
.text:000000000000473B                 add     rbp, [rsp+178h+var_148]
.text:0000000000004740                 rol     r13, 20h
.text:0000000000004744                 xor     rax, r15
.text:0000000000004747                 add     r12, r13
.text:000000000000474A                 rol     rax, 1
.text:000000000000474D                 xor     r8, r12
.text:0000000000004750                 ror     r8, 18h
.text:0000000000004754                 add     rbp, r8
.text:0000000000004757                 xor     r13, rbp
.text:000000000000475A                 ror     r13, 10h
.text:000000000000475E                 mov     [rsp+178h+var_158], r13
.text:0000000000004763                 add     rbx, [rsp+178h+var_D0]
.text:000000000000476B                 add     r12, r13
.text:000000000000476E                 xor     r8, r12
.text:0000000000004771                 mov     r13, [rsp+178h+var_160]
.text:0000000000004776                 rol     r8, 1
.text:0000000000004779                 add     rbx, rsi
.text:000000000000477C                 xor     r9, rbx
.text:000000000000477F                 add     rbx, [rsp+178h+var_128]
.text:0000000000004784                 rol     r9, 20h
.text:0000000000004788                 add     r15, r9
.text:000000000000478B                 xor     rsi, r15
.text:000000000000478E                 ror     rsi, 18h
.text:0000000000004792                 add     rbx, rsi
.text:0000000000004795                 xor     r9, rbx
.text:0000000000004798                 add     r11, [rsp+178h+var_108]
.text:000000000000479D                 add     r10, [rsp+178h+var_138]
.text:00000000000047A2                 ror     r9, 10h
.text:00000000000047A6                 add     r15, r9
.text:00000000000047A9                 mov     [rsp+178h+var_168], r15
.text:00000000000047AE                 xor     rsi, r15
.text:00000000000047B1                 mov     r15, [rsp+178h+var_170]
.text:00000000000047B6                 add     r11, rax
.text:00000000000047B9                 add     r10, r13
.text:00000000000047BC                 rol     rsi, 1
.text:00000000000047BF                 xor     rcx, r11
.text:00000000000047C2                 xor     rdx, r10
.text:00000000000047C5                 add     r11, [rsp+178h+var_118]
.text:00000000000047CA                 rol     rcx, 20h
.text:00000000000047CE                 rol     rdx, 20h
.text:00000000000047D2                 add     r10, [rsp+178h+var_F8]
.text:00000000000047DA                 add     r14, rcx
.text:00000000000047DD                 add     r15, rdx
.text:00000000000047E0                 xor     rax, r14
.text:00000000000047E3                 xor     r13, r15
.text:00000000000047E6                 ror     rax, 18h
.text:00000000000047EA                 ror     r13, 18h
.text:00000000000047EE                 add     r11, rax
.text:00000000000047F1                 add     r10, r13
.text:00000000000047F4                 xor     rcx, r11
.text:00000000000047F7                 xor     rdx, r10
.text:00000000000047FA                 ror     rcx, 10h
.text:00000000000047FE                 ror     rdx, 10h
.text:0000000000004802                 add     r14, rcx
.text:0000000000004805                 add     r15, rdx
.text:0000000000004808                 xor     rax, r14
.text:000000000000480B                 xor     r13, r15
.text:000000000000480E                 rol     rax, 1
.text:0000000000004811                 rol     r13, 1
.text:0000000000004814                 add     rbp, [rsp+178h+var_118]
.text:0000000000004819                 add     rbx, [rsp+178h+var_D8]
.text:0000000000004821                 add     r11, [rsp+178h+var_F0]
.text:0000000000004829                 add     rbp, r13
.text:000000000000482C                 add     rbx, r8
.text:000000000000482F                 xor     r9, rbp
.text:0000000000004832                 add     rbp, [rsp+178h+var_D0]
.text:000000000000483A                 xor     rcx, rbx
.text:000000000000483D                 rol     r9, 20h
.text:0000000000004841                 add     rbx, [rsp+178h+var_100]
.text:0000000000004846                 rol     rcx, 20h
.text:000000000000484A                 add     r14, r9
.text:000000000000484D                 add     r11, rsi
.text:0000000000004850                 add     r15, rcx
.text:0000000000004853                 xor     r13, r14
.text:0000000000004856                 xor     rdx, r11
.text:0000000000004859                 xor     r8, r15
.text:000000000000485C                 ror     r13, 18h
.text:0000000000004860                 ror     r8, 18h
.text:0000000000004864                 add     rbp, r13
.text:0000000000004867                 add     rbx, r8
.text:000000000000486A                 xor     r9, rbp
.text:000000000000486D                 xor     rcx, rbx
.text:0000000000004870                 ror     r9, 10h
.text:0000000000004874                 ror     rcx, 10h
.text:0000000000004878                 add     r14, r9
.text:000000000000487B                 add     r15, rcx
.text:000000000000487E                 xor     r13, r14
.text:0000000000004881                 xor     r8, r15
.text:0000000000004884                 rol     r13, 1
.text:0000000000004887                 mov     [rsp+178h+var_170], r15
.text:000000000000488C                 rol     r8, 1
.text:000000000000488F                 rol     rdx, 20h
.text:0000000000004893                 add     r10, [rsp+178h+var_148]
.text:0000000000004898                 mov     [rsp+178h+var_160], r13
.text:000000000000489D                 mov     r13, [rsp+178h+var_158]
.text:00000000000048A2                 add     r12, rdx
.text:00000000000048A5                 mov     r15, [rsp+178h+var_168]
.text:00000000000048AA                 add     r11, [rsp+178h+var_130]
.text:00000000000048AF                 xor     rsi, r12
.text:00000000000048B2                 add     rbp, [rsp+178h+var_E8]
.text:00000000000048BA                 ror     rsi, 18h
.text:00000000000048BE                 add     r10, rax
.text:00000000000048C1                 xor     r13, r10
.text:00000000000048C4                 add     r10, [rsp+178h+var_108]
.text:00000000000048C9                 rol     r13, 20h
.text:00000000000048CD                 add     r11, rsi
.text:00000000000048D0                 add     r15, r13
.text:00000000000048D3                 xor     rdx, r11
.text:00000000000048D6                 add     rbp, r8
.text:00000000000048D9                 xor     rax, r15
.text:00000000000048DC                 ror     rdx, 10h
.text:00000000000048E0                 ror     rax, 18h
.text:00000000000048E4                 add     r12, rdx
.text:00000000000048E7                 add     r10, rax
.text:00000000000048EA                 xor     rsi, r12
.text:00000000000048ED                 xor     r13, r10
.text:00000000000048F0                 rol     rsi, 1
.text:00000000000048F3                 ror     r13, 10h
.text:00000000000048F7                 add     r15, r13
.text:00000000000048FA                 xor     r13, rbp
.text:00000000000048FD                 rol     r13, 20h
.text:0000000000004901                 xor     rax, r15
.text:0000000000004904                 add     r12, r13
.text:0000000000004907                 rol     rax, 1
.text:000000000000490A                 xor     r8, r12
.text:000000000000490D                 ror     r8, 18h
.text:0000000000004911                 add     rbp, [rsp+178h+var_138]
.text:0000000000004916                 add     rbx, [rsp+178h+var_E0]
.text:000000000000491E                 add     r11, [rsp+178h+var_140]
.text:0000000000004923                 add     rbx, rsi
.text:0000000000004926                 add     rbp, r8
.text:0000000000004929                 xor     r9, rbx
.text:000000000000492C                 add     r11, rax
.text:000000000000492F                 add     rbx, [rsp+178h+var_110]
.text:0000000000004934                 rol     r9, 20h
.text:0000000000004938                 xor     rcx, r11
.text:000000000000493B                 add     r11, [rsp+178h+var_128]
.text:0000000000004940                 add     r15, r9
.text:0000000000004943                 rol     rcx, 20h
.text:0000000000004947                 xor     r13, rbp
.text:000000000000494A                 xor     rsi, r15
.text:000000000000494D                 add     r14, rcx
.text:0000000000004950                 ror     r13, 10h
.text:0000000000004954                 ror     rsi, 18h
.text:0000000000004958                 xor     rax, r14
.text:000000000000495B                 add     r12, r13
.text:000000000000495E                 add     rbx, rsi
.text:0000000000004961                 ror     rax, 18h
.text:0000000000004965                 xor     r8, r12
.text:0000000000004968                 xor     r9, rbx
.text:000000000000496B                 add     r11, rax
.text:000000000000496E                 rol     r8, 1
.text:0000000000004971                 ror     r9, 10h
.text:0000000000004975                 xor     rcx, r11
.text:0000000000004978                 mov     [rsp+178h+var_158], r13
.text:000000000000497D                 add     r15, r9
.text:0000000000004980                 ror     rcx, 10h
.text:0000000000004984                 mov     r13, [rsp+178h+var_160]
.text:0000000000004989                 xor     rsi, r15
.text:000000000000498C                 mov     [rsp+178h+var_168], r15
.text:0000000000004991                 mov     r15, [rsp+178h+var_170]
.text:0000000000004996                 rol     rsi, 1
.text:0000000000004999                 add     r14, rcx
.text:000000000000499C                 add     r10, [rsp+178h+var_F8]
.text:00000000000049A4                 xor     rax, r14
.text:00000000000049A7                 rol     rax, 1
.text:00000000000049AA                 add     r10, r13
.text:00000000000049AD                 xor     rdx, r10
.text:00000000000049B0                 add     r10, [rsp+178h+var_120]
.text:00000000000049B5                 add     rbp, [rsp+178h+var_F8]
.text:00000000000049BD                 rol     rdx, 20h
.text:00000000000049C1                 add     rbx, [rsp+178h+var_108]
.text:00000000000049C6                 add     r15, rdx
.text:00000000000049C9                 xor     r13, r15
.text:00000000000049CC                 ror     r13, 18h
.text:00000000000049D0                 add     r10, r13
.text:00000000000049D3                 xor     rdx, r10
.text:00000000000049D6                 ror     rdx, 10h
.text:00000000000049DA                 add     r15, rdx
.text:00000000000049DD                 xor     r13, r15
.text:00000000000049E0                 rol     r13, 1
.text:00000000000049E3                 add     rbp, r13
.text:00000000000049E6                 xor     r9, rbp
.text:00000000000049E9                 add     rbp, [rsp+178h+var_138]
.text:00000000000049EE                 rol     r9, 20h
.text:00000000000049F2                 add     r14, r9
.text:00000000000049F5                 xor     r13, r14
.text:00000000000049F8                 ror     r13, 18h
.text:00000000000049FC                 add     rbp, r13
.text:00000000000049FF                 xor     r9, rbp
.text:0000000000004A02                 ror     r9, 10h
.text:0000000000004A06                 add     r14, r9
.text:0000000000004A09                 xor     r13, r14
.text:0000000000004A0C                 rol     r13, 1
.text:0000000000004A0F                 add     rbx, r8
.text:0000000000004A12                 add     r11, [rsp+178h+var_110]
.text:0000000000004A17                 xor     rcx, rbx
.text:0000000000004A1A                 add     rbx, [rsp+178h+var_128]
.text:0000000000004A1F                 add     r10, [rsp+178h+var_140]
.text:0000000000004A24                 rol     rcx, 20h
.text:0000000000004A28                 mov     [rsp+178h+var_160], r13
.text:0000000000004A2D                 mov     r13, [rsp+178h+var_158]
.text:0000000000004A32                 add     r15, rcx
.text:0000000000004A35                 add     r11, rsi
.text:0000000000004A38                 xor     r8, r15
.text:0000000000004A3B                 xor     rdx, r11
.text:0000000000004A3E                 ror     r8, 18h
.text:0000000000004A42                 add     r11, [rsp+178h+var_118]
.text:0000000000004A47                 rol     rdx, 20h
.text:0000000000004A4B                 add     rbx, r8
.text:0000000000004A4E                 add     r10, rax
.text:0000000000004A51                 add     r12, rdx
.text:0000000000004A54                 xor     rcx, rbx
.text:0000000000004A57                 xor     r13, r10
.text:0000000000004A5A                 xor     rsi, r12
.text:0000000000004A5D                 ror     rcx, 10h
.text:0000000000004A61                 rol     r13, 20h
.text:0000000000004A65                 ror     rsi, 18h
.text:0000000000004A69                 add     r15, rcx
.text:0000000000004A6C                 add     r11, rsi
.text:0000000000004A6F                 mov     [rsp+178h+var_170], r15
.text:0000000000004A74                 xor     r8, r15
.text:0000000000004A77                 xor     rdx, r11
.text:0000000000004A7A                 mov     r15, [rsp+178h+var_168]
.text:0000000000004A7F                 rol     r8, 1
.text:0000000000004A82                 ror     rdx, 10h
.text:0000000000004A86                 add     r12, rdx
.text:0000000000004A89                 xor     rsi, r12
.text:0000000000004A8C                 add     r15, r13
.text:0000000000004A8F                 rol     rsi, 1
.text:0000000000004A92                 xor     rax, r15
.text:0000000000004A95                 add     r10, [rsp+178h+var_120]
.text:0000000000004A9A                 add     rbp, [rsp+178h+var_D0]
.text:0000000000004AA2                 ror     rax, 18h
.text:0000000000004AA6                 add     rbx, [rsp+178h+var_100]
.text:0000000000004AAB                 add     r10, rax
.text:0000000000004AAE                 xor     r13, r10
.text:0000000000004AB1                 add     rbp, r8
.text:0000000000004AB4                 add     rbx, rsi
.text:0000000000004AB7                 ror     r13, 10h
.text:0000000000004ABB                 xor     r9, rbx
.text:0000000000004ABE                 add     rbx, [rsp+178h+var_D8]
.text:0000000000004AC6                 add     r15, r13
.text:0000000000004AC9                 xor     r13, rbp
.text:0000000000004ACC                 add     rbp, [rsp+178h+var_F0]
.text:0000000000004AD4                 rol     r13, 20h
.text:0000000000004AD8                 rol     r9, 20h
.text:0000000000004ADC                 xor     rax, r15
.text:0000000000004ADF                 add     r12, r13
.text:0000000000004AE2                 add     r15, r9
.text:0000000000004AE5                 rol     rax, 1
.text:0000000000004AE8                 xor     r8, r12
.text:0000000000004AEB                 xor     rsi, r15
.text:0000000000004AEE                 ror     r8, 18h
.text:0000000000004AF2                 ror     rsi, 18h
.text:0000000000004AF6                 add     rbp, r8
.text:0000000000004AF9                 add     rbx, rsi
.text:0000000000004AFC                 xor     r13, rbp
.text:0000000000004AFF                 ror     r13, 10h
.text:0000000000004B03                 add     r12, r13
.text:0000000000004B06                 mov     [rsp+178h+var_158], r13
.text:0000000000004B0B                 mov     r13, [rsp+178h+var_160]
.text:0000000000004B10                 xor     r8, r12
.text:0000000000004B13                 rol     r8, 1
.text:0000000000004B16                 xor     r9, rbx
.text:0000000000004B19                 add     r11, [rsp+178h+var_130]
.text:0000000000004B1E                 add     r10, [rsp+178h+var_E0]
.text:0000000000004B26                 ror     r9, 10h
.text:0000000000004B2A                 add     r15, r9
.text:0000000000004B2D                 xor     rsi, r15
.text:0000000000004B30                 mov     [rsp+178h+var_168], r15
.text:0000000000004B35                 mov     r15, [rsp+178h+var_170]
.text:0000000000004B3A                 add     r11, rax
.text:0000000000004B3D                 rol     rsi, 1
.text:0000000000004B40                 add     r10, r13
.text:0000000000004B43                 xor     rcx, r11
.text:0000000000004B46                 add     r11, [rsp+178h+var_E8]
.text:0000000000004B4E                 xor     rdx, r10
.text:0000000000004B51                 rol     rcx, 20h
.text:0000000000004B55                 add     r10, [rsp+178h+var_148]
.text:0000000000004B5A                 rol     rdx, 20h
.text:0000000000004B5E                 add     r14, rcx
.text:0000000000004B61                 add     r15, rdx
.text:0000000000004B64                 xor     rax, r14
.text:0000000000004B67                 xor     r13, r15
.text:0000000000004B6A                 ror     rax, 18h
.text:0000000000004B6E                 ror     r13, 18h
.text:0000000000004B72                 add     r11, rax
.text:0000000000004B75                 add     r10, r13
.text:0000000000004B78                 xor     rcx, r11
.text:0000000000004B7B                 xor     rdx, r10
.text:0000000000004B7E                 ror     rcx, 10h
.text:0000000000004B82                 ror     rdx, 10h
.text:0000000000004B86                 add     r14, rcx
.text:0000000000004B89                 add     r15, rdx
.text:0000000000004B8C                 xor     rax, r14
.text:0000000000004B8F                 xor     r13, r15
.text:0000000000004B92                 rol     rax, 1
.text:0000000000004B95                 rol     r13, 1
.text:0000000000004B98                 add     rbp, [rsp+178h+var_148]
.text:0000000000004B9D                 add     rbx, [rsp+178h+var_138]
.text:0000000000004BA2                 add     r11, [rsp+178h+var_128]
.text:0000000000004BA7                 add     rbp, r13
.text:0000000000004BAA                 add     rbx, r8
.text:0000000000004BAD                 xor     r9, rbp
.text:0000000000004BB0                 xor     rcx, rbx
.text:0000000000004BB3                 add     rbp, [rsp+178h+var_140]
.text:0000000000004BB8                 rol     r9, 20h
.text:0000000000004BBC                 rol     rcx, 20h
.text:0000000000004BC0                 add     rbx, [rsp+178h+var_130]
.text:0000000000004BC5                 add     r14, r9
.text:0000000000004BC8                 add     r15, rcx
.text:0000000000004BCB                 add     r11, rsi
.text:0000000000004BCE                 xor     r13, r14
.text:0000000000004BD1                 xor     r8, r15
.text:0000000000004BD4                 xor     rdx, r11
.text:0000000000004BD7                 ror     r13, 18h
.text:0000000000004BDB                 ror     r8, 18h
.text:0000000000004BDF                 add     rbp, r13
.text:0000000000004BE2                 add     rbx, r8
.text:0000000000004BE5                 xor     r9, rbp
.text:0000000000004BE8                 xor     rcx, rbx
.text:0000000000004BEB                 ror     r9, 10h
.text:0000000000004BEF                 ror     rcx, 10h
.text:0000000000004BF3                 add     r14, r9
.text:0000000000004BF6                 add     r15, rcx
.text:0000000000004BF9                 xor     r13, r14
.text:0000000000004BFC                 xor     r8, r15
.text:0000000000004BFF                 mov     [rsp+178h+var_170], r15
.text:0000000000004C04                 rol     r13, 1
.text:0000000000004C07                 rol     r8, 1
.text:0000000000004C0A                 rol     rdx, 20h
.text:0000000000004C0E                 mov     [rsp+178h+var_160], r13
.text:0000000000004C13                 add     r11, [rsp+178h+var_120]
.text:0000000000004C18                 add     r12, rdx
.text:0000000000004C1B                 add     r10, [rsp+178h+var_118]
.text:0000000000004C20                 mov     r13, [rsp+178h+var_158]
.text:0000000000004C25                 xor     rsi, r12
.text:0000000000004C28                 mov     r15, [rsp+178h+var_168]
.text:0000000000004C2D                 add     rbp, [rsp+178h+var_108]
.text:0000000000004C32                 ror     rsi, 18h
.text:0000000000004C36                 add     r11, rsi
.text:0000000000004C39                 add     r10, rax
.text:0000000000004C3C                 xor     rdx, r11
.text:0000000000004C3F                 xor     r13, r10
.text:0000000000004C42                 add     r10, [rsp+178h+var_110]
.text:0000000000004C47                 add     rbp, r8
.text:0000000000004C4A                 rol     r13, 20h
.text:0000000000004C4E                 ror     rdx, 10h
.text:0000000000004C52                 add     r15, r13
.text:0000000000004C55                 add     r12, rdx
.text:0000000000004C58                 xor     rax, r15
.text:0000000000004C5B                 xor     rsi, r12
.text:0000000000004C5E                 ror     rax, 18h
.text:0000000000004C62                 rol     rsi, 1
.text:0000000000004C65                 add     r10, rax
.text:0000000000004C68                 xor     r13, r10
.text:0000000000004C6B                 ror     r13, 10h
.text:0000000000004C6F                 add     r15, r13
.text:0000000000004C72                 xor     r13, rbp
.text:0000000000004C75                 rol     r13, 20h
.text:0000000000004C79                 xor     rax, r15
.text:0000000000004C7C                 add     r12, r13
.text:0000000000004C7F                 rol     rax, 1
.text:0000000000004C82                 xor     r8, r12
.text:0000000000004C85                 ror     r8, 18h
.text:0000000000004C89                 add     rbp, [rsp+178h+var_100]
.text:0000000000004C8E                 add     rbx, [rsp+178h+var_F8]
.text:0000000000004C96                 add     r11, [rsp+178h+var_E8]
.text:0000000000004C9E                 add     rbx, rsi
.text:0000000000004CA1                 add     rbp, r8
.text:0000000000004CA4                 xor     r9, rbx
.text:0000000000004CA7                 add     r11, rax
.text:0000000000004CAA                 add     rbx, [rsp+178h+var_F0]
.text:0000000000004CB2                 rol     r9, 20h
.text:0000000000004CB6                 xor     rcx, r11
.text:0000000000004CB9                 add     r11, [rsp+178h+var_E0]
.text:0000000000004CC1                 add     r15, r9
.text:0000000000004CC4                 rol     rcx, 20h
.text:0000000000004CC8                 xor     r13, rbp
.text:0000000000004CCB                 xor     rsi, r15
.text:0000000000004CCE                 add     r14, rcx
.text:0000000000004CD1                 ror     r13, 10h
.text:0000000000004CD5                 ror     rsi, 18h
.text:0000000000004CD9                 xor     rax, r14
.text:0000000000004CDC                 add     r12, r13
.text:0000000000004CDF                 add     rbx, rsi
.text:0000000000004CE2                 ror     rax, 18h
.text:0000000000004CE6                 xor     r8, r12
.text:0000000000004CE9                 xor     r9, rbx
.text:0000000000004CEC                 add     r11, rax
.text:0000000000004CEF                 rol     r8, 1
.text:0000000000004CF2                 ror     r9, 10h
.text:0000000000004CF6                 xor     rcx, r11
.text:0000000000004CF9                 mov     [rsp+178h+var_158], r13
.text:0000000000004CFE                 add     r15, r9
.text:0000000000004D01                 ror     rcx, 10h
.text:0000000000004D05                 mov     r13, [rsp+178h+var_160]
.text:0000000000004D0A                 xor     rsi, r15
.text:0000000000004D0D                 mov     [rsp+178h+var_168], r15
.text:0000000000004D12                 mov     r15, [rsp+178h+var_170]
.text:0000000000004D17                 rol     rsi, 1
.text:0000000000004D1A                 add     r14, rcx
.text:0000000000004D1D                 add     r10, [rsp+178h+var_D8]
.text:0000000000004D25                 add     rbp, [rsp+178h+var_D8]
.text:0000000000004D2D                 xor     rax, r14
.text:0000000000004D30                 add     rbx, [rsp+178h+var_128]
.text:0000000000004D35                 rol     rax, 1
.text:0000000000004D38                 add     r10, r13
.text:0000000000004D3B                 xor     rdx, r10
.text:0000000000004D3E                 add     r10, [rsp+178h+var_D0]
.text:0000000000004D46                 rol     rdx, 20h
.text:0000000000004D4A                 add     r15, rdx
.text:0000000000004D4D                 xor     r13, r15
.text:0000000000004D50                 ror     r13, 18h
.text:0000000000004D54                 add     r10, r13
.text:0000000000004D57                 xor     rdx, r10
.text:0000000000004D5A                 ror     rdx, 10h
.text:0000000000004D5E                 add     r15, rdx
.text:0000000000004D61                 xor     r13, r15
.text:0000000000004D64                 rol     r13, 1
.text:0000000000004D67                 add     rbp, r13
.text:0000000000004D6A                 xor     r9, rbp
.text:0000000000004D6D                 add     rbp, [rsp+178h+var_F8]
.text:0000000000004D75                 rol     r9, 20h
.text:0000000000004D79                 add     r14, r9
.text:0000000000004D7C                 xor     r13, r14
.text:0000000000004D7F                 ror     r13, 18h
.text:0000000000004D83                 add     rbp, r13
.text:0000000000004D86                 xor     r9, rbp
.text:0000000000004D89                 ror     r9, 10h
.text:0000000000004D8D                 add     r14, r9
.text:0000000000004D90                 xor     r13, r14
.text:0000000000004D93                 rol     r13, 1
.text:0000000000004D96                 add     rbx, r8
.text:0000000000004D99                 add     r11, [rsp+178h+var_100]
.text:0000000000004D9E                 xor     rcx, rbx
.text:0000000000004DA1                 add     rbx, [rsp+178h+var_108]
.text:0000000000004DA6                 add     r10, [rsp+178h+var_E0]
.text:0000000000004DAE                 rol     rcx, 20h
.text:0000000000004DB2                 mov     [rsp+178h+var_160], r13
.text:0000000000004DB7                 mov     r13, [rsp+178h+var_158]
.text:0000000000004DBC                 add     r15, rcx
.text:0000000000004DBF                 add     r11, rsi
.text:0000000000004DC2                 xor     r8, r15
.text:0000000000004DC5                 xor     rdx, r11
.text:0000000000004DC8                 ror     r8, 18h
.text:0000000000004DCC                 add     r11, [rsp+178h+var_D0]
.text:0000000000004DD4                 rol     rdx, 20h
.text:0000000000004DD8                 add     rbx, r8
.text:0000000000004DDB                 add     r10, rax
.text:0000000000004DDE                 add     r12, rdx
.text:0000000000004DE1                 xor     rcx, rbx
.text:0000000000004DE4                 xor     r13, r10
.text:0000000000004DE7                 xor     rsi, r12
.text:0000000000004DEA                 ror     rcx, 10h
.text:0000000000004DEE                 rol     r13, 20h
.text:0000000000004DF2                 ror     rsi, 18h
.text:0000000000004DF6                 add     r15, rcx
.text:0000000000004DF9                 add     r11, rsi
.text:0000000000004DFC                 xor     r8, r15
.text:0000000000004DFF                 mov     [rsp+178h+var_170], r15
.text:0000000000004E04                 xor     rdx, r11
.text:0000000000004E07                 mov     r15, [rsp+178h+var_168]
.text:0000000000004E0C                 rol     r8, 1
.text:0000000000004E0F                 ror     rdx, 10h
.text:0000000000004E13                 add     r12, rdx
.text:0000000000004E16                 xor     rsi, r12
.text:0000000000004E19                 add     r15, r13
.text:0000000000004E1C                 rol     rsi, 1
.text:0000000000004E1F                 xor     rax, r15
.text:0000000000004E22                 add     r10, [rsp+178h+var_118]
.text:0000000000004E27                 add     rbp, [rsp+178h+var_140]
.text:0000000000004E2C                 ror     rax, 18h
.text:0000000000004E30                 add     r10, rax
.text:0000000000004E33                 xor     r13, r10
.text:0000000000004E36                 add     rbp, r8
.text:0000000000004E39                 ror     r13, 10h
.text:0000000000004E3D                 add     r15, r13
.text:0000000000004E40                 xor     r13, rbp
.text:0000000000004E43                 add     rbp, [rsp+178h+var_E8]
.text:0000000000004E4B                 rol     r13, 20h
.text:0000000000004E4F                 xor     rax, r15
.text:0000000000004E52                 add     r12, r13
.text:0000000000004E55                 rol     rax, 1
.text:0000000000004E58                 xor     r8, r12
.text:0000000000004E5B                 ror     r8, 18h
.text:0000000000004E5F                 add     rbp, r8
.text:0000000000004E62                 xor     r13, rbp
.text:0000000000004E65                 mov     [rsp+178h+var_C8], rbp
.text:0000000000004E6D                 ror     r13, 10h
.text:0000000000004E71                 mov     [rsp+178h+var_50], r13
.text:0000000000004E79                 add     rbx, [rsp+178h+var_148]
.text:0000000000004E7E                 add     r12, r13
.text:0000000000004E81                 mov     [rsp+178h+var_78], r12
.text:0000000000004E89                 xor     r12, r8
.text:0000000000004E8C                 rol     r12, 1
.text:0000000000004E8F                 mov     [rsp+178h+var_A0], r12
.text:0000000000004E97                 add     rbx, rsi
.text:0000000000004E9A                 xor     r9, rbx
.text:0000000000004E9D                 add     rbx, [rsp+178h+var_138]
.text:0000000000004EA2                 rol     r9, 20h
.text:0000000000004EA6                 add     r15, r9
.text:0000000000004EA9                 xor     rsi, r15
.text:0000000000004EAC                 ror     rsi, 18h
.text:0000000000004EB0                 add     rbx, rsi
.text:0000000000004EB3                 mov     [rsp+178h+var_C0], rbx
.text:0000000000004EBB                 xor     rbx, r9
.text:0000000000004EBE                 add     r11, [rsp+178h+var_F0]
.text:0000000000004EC6                 ror     rbx, 10h
.text:0000000000004ECA                 add     r15, rbx
.text:0000000000004ECD                 mov     [rsp+178h+var_68], rbx
.text:0000000000004ED5                 mov     [rsp+178h+var_70], r15
.text:0000000000004EDD                 xor     r15, rsi
.text:0000000000004EE0                 add     r11, rax
.text:0000000000004EE3                 rol     r15, 1
.text:0000000000004EE6                 xor     rcx, r11
.text:0000000000004EE9                 add     r11, [rsp+178h+var_110]
.text:0000000000004EEE                 mov     [rsp+178h+var_98], r15
.text:0000000000004EF6                 rol     rcx, 20h
.text:0000000000004EFA                 mov     r15, [rsp+178h+var_170]
.text:0000000000004EFF                 add     r14, rcx
.text:0000000000004F02                 xor     rax, r14
.text:0000000000004F05                 ror     rax, 18h
.text:0000000000004F09                 add     r11, rax
.text:0000000000004F0C                 xor     rcx, r11
.text:0000000000004F0F                 mov     [rsp+178h+var_B8], r11
.text:0000000000004F17                 ror     rcx, 10h
.text:0000000000004F1B                 add     r14, rcx
.text:0000000000004F1E                 mov     [rsp+178h+var_60], rcx
.text:0000000000004F26                 mov     rcx, [rsp+178h+var_120]
.text:0000000000004F2B                 xor     rax, r14
.text:0000000000004F2E                 mov     [rsp+178h+var_88], r14
.text:0000000000004F36                 rol     rax, 1
.text:0000000000004F39                 mov     [rsp+178h+var_90], rax
.text:0000000000004F41                 mov     rax, [rsp+178h+var_160]
.text:0000000000004F46                 add     rcx, r10
.text:0000000000004F49                 add     rcx, rax
.text:0000000000004F4C                 xor     rdx, rcx
.text:0000000000004F4F                 add     rcx, [rsp+178h+var_130]
.text:0000000000004F54                 rol     rdx, 20h
.text:0000000000004F58                 add     r15, rdx
.text:0000000000004F5B                 xor     rax, r15
.text:0000000000004F5E                 mov     r13, rax
.text:0000000000004F61                 ror     r13, 18h
.text:0000000000004F65                 lea     rax, [rcx+r13]
.text:0000000000004F69                 xor     rdx, rax
.text:0000000000004F6C                 mov     [rsp+178h+var_B0], rax
.text:0000000000004F74                 ror     rdx, 10h
.text:0000000000004F78                 mov     [rsp+178h+var_58], rdx
.text:0000000000004F80                 add     rdx, r15
.text:0000000000004F83                 mov     [rsp+178h+var_80], rdx
.text:0000000000004F8B                 xor     rdx, r13
.text:0000000000004F8E                 rol     rdx, 1
.text:0000000000004F91                 xor     eax, eax
.text:0000000000004F93                 mov     [rsp+178h+var_A8], rdx
.text:0000000000004F9B                 mov     rdx, [rsp+178h+var_150]
.text:0000000000004FA0                 jmp     short loc_4FB1
.text:0000000000004FA0 ; ---------------------------------------------------------------------------
.text:0000000000004FA2                 align 8
.text:0000000000004FA8
.text:0000000000004FA8 loc_4FA8:                               ; CODE XREF: blake2b_compress+16C0↓j
.text:0000000000004FA8                 mov     rbp, [rdx+rax*8]
.text:0000000000004FAC                 mov     r14, [rdx+rax*8+40h]
.text:0000000000004FB1
.text:0000000000004FB1 loc_4FB1:                               ; CODE XREF: blake2b_compress+16A0↑j
.text:0000000000004FB1                 xor     rbp, r14
.text:0000000000004FB4                 xor     [rdi+rax*8], rbp
.text:0000000000004FB8                 add     rax, 1
.text:0000000000004FBC                 cmp     rax, 8
.text:0000000000004FC0                 jnz     short loc_4FA8
.text:0000000000004FC2                 mov     rax, [rsp+178h+var_40]
.text:0000000000004FCA                 xor     rax, fs:28h
.text:0000000000004FD3                 jnz     short loc_4FE7
.text:0000000000004FD5                 add     rsp, 148h
.text:0000000000004FDC                 pop     rbx
.text:0000000000004FDD                 pop     rbp
.text:0000000000004FDE                 pop     r12
.text:0000000000004FE0                 pop     r13
.text:0000000000004FE2                 pop     r14
.text:0000000000004FE4                 pop     r15
.text:0000000000004FE6                 retn
.text:0000000000004FE7 ; ---------------------------------------------------------------------------
.text:0000000000004FE7
.text:0000000000004FE7 loc_4FE7:                               ; CODE XREF: blake2b_compress+16D3↑j
.text:0000000000004FE7                 call    ___stack_chk_fail
.text:0000000000004FE7 ; } // starts at 3900
.text:0000000000004FE7 blake2b_compress endp
.text:0000000000004FE7
.text:0000000000004FE7 ; ---------------------------------------------------------------------------
.text:0000000000004FEC                 align 10h
.text:0000000000004FF0
.text:0000000000004FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004FF0
.text:0000000000004FF0
.text:0000000000004FF0 blake2b_update_part_3 proc near         ; CODE XREF: blake2b_init_key+C4↓p
.text:0000000000004FF0                                         ; blake2b_update+9↓p ...
.text:0000000000004FF0 ; __unwind {
.text:0000000000004FF0                 push    r15
.text:0000000000004FF2                 push    r14
.text:0000000000004FF4                 push    r13
.text:0000000000004FF6                 push    r12
.text:0000000000004FF8                 mov     r13d, 80h
.text:0000000000004FFE                 push    rbp
.text:0000000000004FFF                 push    rbx
.text:0000000000005000                 mov     rbx, rdi
.text:0000000000005003                 lea     r14, [rbx+60h]
.text:0000000000005007                 mov     rbp, rsi
.text:000000000000500A                 mov     r12, rdx
.text:000000000000500D                 sub     rsp, 8
.text:0000000000005011                 mov     rdi, [rdi+0E0h]
.text:0000000000005018                 sub     r13, rdi
.text:000000000000501B                 add     rdi, r14        ; dest
.text:000000000000501E                 cmp     r13, rdx
.text:0000000000005021                 jb      short loc_5048
.text:0000000000005023
.text:0000000000005023 loc_5023:                               ; CODE XREF: blake2b_update_part_3+104↓j
.text:0000000000005023                 mov     rdx, r12        ; n
.text:0000000000005026                 mov     rsi, rbp        ; src
.text:0000000000005029                 call    _memcpy
.text:000000000000502E                 add     [rbx+0E0h], r12
.text:0000000000005035                 add     rsp, 8
.text:0000000000005039                 pop     rbx
.text:000000000000503A                 pop     rbp
.text:000000000000503B                 pop     r12
.text:000000000000503D                 pop     r13
.text:000000000000503F                 pop     r14
.text:0000000000005041                 pop     r15
.text:0000000000005043                 retn
.text:0000000000005043 ; ---------------------------------------------------------------------------
.text:0000000000005044                 align 8
.text:0000000000005048
.text:0000000000005048 loc_5048:                               ; CODE XREF: blake2b_update_part_3+31↑j
.text:0000000000005048                 mov     rdx, r13        ; n
.text:000000000000504B                 mov     qword ptr [rbx+0E0h], 0
.text:0000000000005056                 call    _memcpy
.text:000000000000505B                 mov     rax, [rbx+40h]
.text:000000000000505F                 mov     rsi, r14
.text:0000000000005062                 mov     rdi, rbx
.text:0000000000005065                 sub     rax, 0FFFFFFFFFFFFFF80h
.text:0000000000005069                 cmp     rax, 7Fh
.text:000000000000506D                 mov     [rbx+40h], rax
.text:0000000000005071                 setbe   al
.text:0000000000005074                 sub     r12, r13
.text:0000000000005077                 add     rbp, r13
.text:000000000000507A                 movzx   eax, al
.text:000000000000507D                 add     [rbx+48h], rax
.text:0000000000005081                 call    blake2b_compress
.text:0000000000005086                 cmp     r12, 80h
.text:000000000000508D                 jbe     short loc_50EA
.text:000000000000508F                 lea     r15, [r12-81h]
.text:0000000000005097                 shr     r15, 7
.text:000000000000509B                 lea     r13, [r15+1]
.text:000000000000509F                 shl     r13, 7
.text:00000000000050A3                 add     r13, rbp
.text:00000000000050A6                 db      2Eh
.text:00000000000050A6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000050B0
.text:00000000000050B0 loc_50B0:                               ; CODE XREF: blake2b_update_part_3+EC↓j
.text:00000000000050B0                 mov     rax, [rbx+40h]
.text:00000000000050B4                 mov     rsi, rbp
.text:00000000000050B7                 mov     rdi, rbx
.text:00000000000050BA                 sub     rax, 0FFFFFFFFFFFFFF80h
.text:00000000000050BE                 cmp     rax, 7Fh
.text:00000000000050C2                 mov     [rbx+40h], rax
.text:00000000000050C6                 setbe   al
.text:00000000000050C9                 sub     rbp, 0FFFFFFFFFFFFFF80h
.text:00000000000050CD                 movzx   eax, al
.text:00000000000050D0                 add     [rbx+48h], rax
.text:00000000000050D4                 call    blake2b_compress
.text:00000000000050D9                 cmp     r13, rbp
.text:00000000000050DC                 jnz     short loc_50B0
.text:00000000000050DE                 neg     r15
.text:00000000000050E1                 shl     r15, 7
.text:00000000000050E5                 lea     r12, [r12+r15-80h]
.text:00000000000050EA
.text:00000000000050EA loc_50EA:                               ; CODE XREF: blake2b_update_part_3+9D↑j
.text:00000000000050EA                 mov     rdi, [rbx+0E0h]
.text:00000000000050F1                 add     rdi, r14
.text:00000000000050F4                 jmp     loc_5023
.text:00000000000050F4 ; } // starts at 4FF0
.text:00000000000050F4 blake2b_update_part_3 endp
.text:00000000000050F4
.text:00000000000050F4 ; ---------------------------------------------------------------------------
.text:00000000000050F9                 align 20h
.text:0000000000005100
.text:0000000000005100 ; =============== S U B R O U T I N E =======================================
.text:0000000000005100
.text:0000000000005100
.text:0000000000005100                 public blake2b_init_param
.text:0000000000005100 blake2b_init_param proc near            ; CODE XREF: blake2b_init+60↓p
.text:0000000000005100                                         ; blake2b_init_key+8B↓p
.text:0000000000005100 ; __unwind {
.text:0000000000005100                 mov     qword ptr [rdi+40h], 0
.text:0000000000005108                 mov     qword ptr [rdi+0F0h], 0
.text:0000000000005113                 mov     r8, rdi
.text:0000000000005116                 lea     rdi, [rdi+48h]
.text:000000000000511A                 mov     eax, r8d
.text:000000000000511D                 mov     rdx, 6A09E667F3BCC908h
.text:0000000000005127                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000000512B                 sub     eax, edi
.text:000000000000512D                 lea     ecx, [rax+0F8h]
.text:0000000000005133                 xor     eax, eax
.text:0000000000005135                 shr     ecx, 3
.text:0000000000005138                 rep stosq
.text:000000000000513B                 mov     rax, 0BB67AE8584CAA73Bh
.text:0000000000005145                 mov     [r8], rdx
.text:0000000000005148                 mov     [r8+8], rax
.text:000000000000514C                 mov     rax, 3C6EF372FE94F82Bh
.text:0000000000005156                 mov     [r8+10h], rax
.text:000000000000515A                 mov     rax, 0A54FF53A5F1D36F1h
.text:0000000000005164                 mov     [r8+18h], rax
.text:0000000000005168                 mov     rax, 510E527FADE682D1h
.text:0000000000005172                 mov     [r8+20h], rax
.text:0000000000005176                 mov     rax, 9B05688C2B3E6C1Fh
.text:0000000000005180                 mov     [r8+28h], rax
.text:0000000000005184                 mov     rax, 1F83D9ABFB41BD6Bh
.text:000000000000518E                 mov     [r8+30h], rax
.text:0000000000005192                 mov     rax, 5BE0CD19137E2179h
.text:000000000000519C                 mov     [r8+38h], rax
.text:00000000000051A0                 xor     eax, eax
.text:00000000000051A2                 jmp     short loc_51AC
.text:00000000000051A2 ; ---------------------------------------------------------------------------
.text:00000000000051A4                 align 8
.text:00000000000051A8
.text:00000000000051A8 loc_51A8:                               ; CODE XREF: blake2b_init_param+BC↓j
.text:00000000000051A8                 mov     rdx, [r8+rax*8]
.text:00000000000051AC
.text:00000000000051AC loc_51AC:                               ; CODE XREF: blake2b_init_param+A2↑j
.text:00000000000051AC                 xor     rdx, [rsi+rax*8]
.text:00000000000051B0                 mov     [r8+rax*8], rdx
.text:00000000000051B4                 add     rax, 1
.text:00000000000051B8                 cmp     rax, 8
.text:00000000000051BC                 jnz     short loc_51A8
.text:00000000000051BE                 movzx   eax, byte ptr [rsi]
.text:00000000000051C1                 mov     [r8+0E8h], rax
.text:00000000000051C8                 xor     eax, eax
.text:00000000000051CA                 retn
.text:00000000000051CA ; } // starts at 5100
.text:00000000000051CA blake2b_init_param endp
.text:00000000000051CA
.text:00000000000051CA ; ---------------------------------------------------------------------------
.text:00000000000051CB                 align 10h
.text:00000000000051D0
.text:00000000000051D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000051D0
.text:00000000000051D0
.text:00000000000051D0                 public blake2b_init
.text:00000000000051D0 blake2b_init    proc near               ; CODE XREF: blake2b+73↓p
.text:00000000000051D0                                         ; blake2b_stream+56↓p
.text:00000000000051D0
.text:00000000000051D0 var_58          = byte ptr -58h
.text:00000000000051D0 var_57          = qword ptr -57h
.text:00000000000051D0 var_4F          = qword ptr -4Fh
.text:00000000000051D0 var_47          = byte ptr -47h
.text:00000000000051D0 var_46          = qword ptr -46h
.text:00000000000051D0 var_38          = xmmword ptr -38h
.text:00000000000051D0 var_28          = xmmword ptr -28h
.text:00000000000051D0 var_10          = qword ptr -10h
.text:00000000000051D0
.text:00000000000051D0 ; __unwind {
.text:00000000000051D0                 sub     rsp, 58h
.text:00000000000051D4                 mov     rax, fs:28h
.text:00000000000051DD                 mov     [rsp+58h+var_10], rax
.text:00000000000051E2                 xor     eax, eax
.text:00000000000051E4                 lea     rax, [rsi-1]
.text:00000000000051E8                 cmp     rax, 3Fh ; '?'
.text:00000000000051EC                 ja      short loc_5250
.text:00000000000051EE                 pxor    xmm0, xmm0
.text:00000000000051F2                 mov     [rsp+58h+var_58], sil
.text:00000000000051F6                 xor     eax, eax
.text:00000000000051F8                 mov     rsi, rsp
.text:00000000000051FB                 mov     [rsp+58h+var_46], 0
.text:0000000000005204                 mov     [rsp+58h+var_57], 10100h
.text:000000000000520D                 mov     dword ptr [rsi+1Ah], 0
.text:0000000000005214                 mov     [rsi+1Eh], ax
.text:0000000000005218                 mov     [rsp+58h+var_4F], 0
.text:0000000000005221                 mov     [rsp+58h+var_47], 0
.text:0000000000005226                 movaps  [rsp+58h+var_38], xmm0
.text:000000000000522B                 movaps  [rsp+58h+var_28], xmm0
.text:0000000000005230                 call    blake2b_init_param
.text:0000000000005235
.text:0000000000005235 loc_5235:                               ; CODE XREF: blake2b_init+85↓j
.text:0000000000005235                 mov     rdx, [rsp+58h+var_10]
.text:000000000000523A                 xor     rdx, fs:28h
.text:0000000000005243                 jnz     short loc_5257
.text:0000000000005245                 add     rsp, 58h
.text:0000000000005249                 retn
.text:0000000000005249 ; ---------------------------------------------------------------------------
.text:000000000000524A                 align 10h
.text:0000000000005250
.text:0000000000005250 loc_5250:                               ; CODE XREF: blake2b_init+1C↑j
.text:0000000000005250                 mov     eax, 0FFFFFFFFh
.text:0000000000005255                 jmp     short loc_5235
.text:0000000000005257 ; ---------------------------------------------------------------------------
.text:0000000000005257
.text:0000000000005257 loc_5257:                               ; CODE XREF: blake2b_init+73↑j
.text:0000000000005257                 call    ___stack_chk_fail
.text:0000000000005257 ; } // starts at 51D0
.text:0000000000005257 blake2b_init    endp
.text:0000000000005257
.text:0000000000005257 ; ---------------------------------------------------------------------------
.text:000000000000525C                 align 20h
.text:0000000000005260
.text:0000000000005260 ; =============== S U B R O U T I N E =======================================
.text:0000000000005260
.text:0000000000005260
.text:0000000000005260                 public blake2b_init_key
.text:0000000000005260 blake2b_init_key proc near              ; CODE XREF: blake2b+C4↓p
.text:0000000000005260
.text:0000000000005260 var_E8          = byte ptr -0E8h
.text:0000000000005260 var_E7          = byte ptr -0E7h
.text:0000000000005260 var_E6          = qword ptr -0E6h
.text:0000000000005260 var_DE          = qword ptr -0DEh
.text:0000000000005260 var_D6          = qword ptr -0D6h
.text:0000000000005260 var_C8          = xmmword ptr -0C8h
.text:0000000000005260 var_B8          = xmmword ptr -0B8h
.text:0000000000005260 s               = byte ptr -0A8h
.text:0000000000005260 var_20          = qword ptr -20h
.text:0000000000005260
.text:0000000000005260 ; __unwind {
.text:0000000000005260                 push    rbp
.text:0000000000005261                 push    rbx
.text:0000000000005262                 sub     rsp, 0D8h
.text:0000000000005269                 mov     rax, fs:28h
.text:0000000000005272                 mov     [rsp+0E8h+var_20], rax
.text:000000000000527A                 xor     eax, eax
.text:000000000000527C                 lea     rax, [rsi-1]
.text:0000000000005280                 cmp     rax, 3Fh ; '?'
.text:0000000000005284                 ja      loc_5360
.text:000000000000528A                 lea     rax, [rcx-1]
.text:000000000000528E                 mov     r9, rcx
.text:0000000000005291                 cmp     rax, 3Fh ; '?'
.text:0000000000005295                 ja      loc_5360
.text:000000000000529B                 test    rdx, rdx
.text:000000000000529E                 mov     r10, rdx
.text:00000000000052A1                 jz      loc_5360
.text:00000000000052A7                 pxor    xmm0, xmm0
.text:00000000000052AB                 xor     eax, eax
.text:00000000000052AD                 mov     [rsp+0E8h+var_E8], sil
.text:00000000000052B1                 mov     rsi, rsp
.text:00000000000052B4                 mov     [rsp+0E8h+var_D6], 0
.text:00000000000052BD                 mov     rbp, rdi
.text:00000000000052C0                 mov     dword ptr [rsi+1Ah], 0
.text:00000000000052C7                 mov     [rsi+1Eh], ax
.text:00000000000052CB                 mov     [rsp+0E8h+var_E7], cl
.text:00000000000052CF                 mov     [rsp+0E8h+var_E6], 101h
.text:00000000000052D8                 mov     [rsp+0E8h+var_DE], 0
.text:00000000000052E1                 movaps  [rsp+0E8h+var_C8], xmm0
.text:00000000000052E6                 movaps  [rsp+0E8h+var_B8], xmm0
.text:00000000000052EB                 call    blake2b_init_param
.text:00000000000052F0                 test    eax, eax
.text:00000000000052F2                 js      short loc_5360
.text:00000000000052F4                 lea     rbx, [rsp+0E8h+s]
.text:00000000000052F9                 xor     eax, eax
.text:00000000000052FB                 mov     ecx, 10h
.text:0000000000005300                 mov     rdx, r9
.text:0000000000005303                 mov     rsi, r10
.text:0000000000005306                 mov     rdi, rbx
.text:0000000000005309                 rep stosq
.text:000000000000530C                 mov     ecx, 80h
.text:0000000000005311                 mov     rdi, rbx
.text:0000000000005314                 call    ___memcpy_chk
.text:0000000000005319                 mov     edx, 80h
.text:000000000000531E                 mov     rsi, rbx
.text:0000000000005321                 mov     rdi, rbp
.text:0000000000005324                 call    blake2b_update_part_3
.text:0000000000005329                 mov     rax, cs:memset_v_3512
.text:0000000000005330                 mov     edx, 80h        ; n
.text:0000000000005335                 xor     esi, esi        ; c
.text:0000000000005337                 mov     rdi, rbx        ; s
.text:000000000000533A                 call    rax ; memset
.text:000000000000533C                 xor     eax, eax
.text:000000000000533E
.text:000000000000533E loc_533E:                               ; CODE XREF: blake2b_init_key+105↓j
.text:000000000000533E                 mov     rdx, [rsp+0E8h+var_20]
.text:0000000000005346                 xor     rdx, fs:28h
.text:000000000000534F                 jnz     short loc_5367
.text:0000000000005351                 add     rsp, 0D8h
.text:0000000000005358                 pop     rbx
.text:0000000000005359                 pop     rbp
.text:000000000000535A                 retn
.text:000000000000535A ; ---------------------------------------------------------------------------
.text:000000000000535B                 align 20h
.text:0000000000005360
.text:0000000000005360 loc_5360:                               ; CODE XREF: blake2b_init_key+24↑j
.text:0000000000005360                                         ; blake2b_init_key+35↑j ...
.text:0000000000005360                 mov     eax, 0FFFFFFFFh
.text:0000000000005365                 jmp     short loc_533E
.text:0000000000005367 ; ---------------------------------------------------------------------------
.text:0000000000005367
.text:0000000000005367 loc_5367:                               ; CODE XREF: blake2b_init_key+EF↑j
.text:0000000000005367                 call    ___stack_chk_fail
.text:0000000000005367 ; } // starts at 5260
.text:0000000000005367 blake2b_init_key endp
.text:0000000000005367
.text:0000000000005367 ; ---------------------------------------------------------------------------
.text:000000000000536C                 align 10h
.text:0000000000005370
.text:0000000000005370 ; =============== S U B R O U T I N E =======================================
.text:0000000000005370
.text:0000000000005370
.text:0000000000005370                 public blake2b_update
.text:0000000000005370 blake2b_update  proc near               ; CODE XREF: blake2b_stream+A0↓p
.text:0000000000005370                                         ; blake2b_stream+111↓p
.text:0000000000005370 ; __unwind {
.text:0000000000005370                 test    rdx, rdx
.text:0000000000005373                 jz      short loc_5388
.text:0000000000005375                 sub     rsp, 8
.text:0000000000005379                 call    blake2b_update_part_3
.text:000000000000537E                 xor     eax, eax
.text:0000000000005380                 add     rsp, 8
.text:0000000000005384                 retn
.text:0000000000005384 ; ---------------------------------------------------------------------------
.text:0000000000005385                 align 8
.text:0000000000005388
.text:0000000000005388 loc_5388:                               ; CODE XREF: blake2b_update+3↑j
.text:0000000000005388                 xor     eax, eax
.text:000000000000538A                 retn
.text:000000000000538A ; } // starts at 5370
.text:000000000000538A blake2b_update  endp
.text:000000000000538A
.text:000000000000538A ; ---------------------------------------------------------------------------
.text:000000000000538B                 align 10h
.text:0000000000005390
.text:0000000000005390 ; =============== S U B R O U T I N E =======================================
.text:0000000000005390
.text:0000000000005390
.text:0000000000005390                 public blake2b_final
.text:0000000000005390 blake2b_final   proc near               ; CODE XREF: blake2b+8A↓p
.text:0000000000005390                                         ; blake2b_stream+D0↓p
.text:0000000000005390
.text:0000000000005390 var_68          = xmmword ptr -68h
.text:0000000000005390 var_58          = xmmword ptr -58h
.text:0000000000005390 var_48          = xmmword ptr -48h
.text:0000000000005390 var_38          = xmmword ptr -38h
.text:0000000000005390 var_20          = qword ptr -20h
.text:0000000000005390
.text:0000000000005390 ; __unwind {
.text:0000000000005390                 push    r12
.text:0000000000005392                 push    rbp
.text:0000000000005393                 push    rbx
.text:0000000000005394                 pxor    xmm0, xmm0
.text:0000000000005398                 sub     rsp, 50h
.text:000000000000539C                 mov     rax, fs:28h
.text:00000000000053A5                 mov     [rsp+68h+var_20], rax
.text:00000000000053AA                 xor     eax, eax
.text:00000000000053AC                 test    rsi, rsi
.text:00000000000053AF                 movaps  [rsp+68h+var_68], xmm0
.text:00000000000053B3                 movaps  [rsp+68h+var_58], xmm0
.text:00000000000053B8                 movaps  [rsp+68h+var_48], xmm0
.text:00000000000053BD                 movaps  [rsp+68h+var_38], xmm0
.text:00000000000053C2                 jz      loc_54F5
.text:00000000000053C8                 mov     rbx, rdi
.text:00000000000053CB                 cmp     [rdi+0E8h], rdx
.text:00000000000053D2                 ja      loc_54F5
.text:00000000000053D8                 cmp     qword ptr [rdi+50h], 0
.text:00000000000053DD                 jnz     loc_54F5
.text:00000000000053E3                 mov     rdi, [rdi+0E0h]
.text:00000000000053EA                 xor     eax, eax
.text:00000000000053EC                 mov     r12, rsi
.text:00000000000053EF                 mov     rdx, rdi
.text:00000000000053F2                 add     rdx, [rbx+40h]
.text:00000000000053F6                 setb    al
.text:00000000000053F9                 add     [rbx+48h], rax
.text:00000000000053FD                 cmp     byte ptr [rbx+0F0h], 0
.text:0000000000005404                 mov     [rbx+40h], rdx
.text:0000000000005408                 jnz     loc_54E8
.text:000000000000540E
.text:000000000000540E loc_540E:                               ; CODE XREF: blake2b_final+160↓j
.text:000000000000540E                 lea     rbp, [rbx+60h]
.text:0000000000005412                 mov     edx, 80h
.text:0000000000005417                 xor     esi, esi        ; c
.text:0000000000005419                 sub     rdx, rdi        ; n
.text:000000000000541C                 mov     qword ptr [rbx+50h], 0FFFFFFFFFFFFFFFFh
.text:0000000000005424                 add     rdi, rbp        ; s
.text:0000000000005427                 call    _memset
.text:000000000000542C                 mov     rsi, rbp
.text:000000000000542F                 mov     rdi, rbx
.text:0000000000005432                 mov     rbp, rsp
.text:0000000000005435                 call    blake2b_compress
.text:000000000000543A                 lea     rdi, [rbp+40h]
.text:000000000000543E                 mov     rcx, rbx
.text:0000000000005441                 mov     rax, rbp
.text:0000000000005444                 nop     dword ptr [rax+00h]
.text:0000000000005448
.text:0000000000005448 loc_5448:                               ; CODE XREF: blake2b_final+112↓j
.text:0000000000005448                 mov     rdx, [rcx]
.text:000000000000544B                 add     rax, 8
.text:000000000000544F                 add     rcx, 8
.text:0000000000005453                 mov     rsi, rdx
.text:0000000000005456                 mov     [rax-8], dl
.text:0000000000005459                 shr     rsi, 8
.text:000000000000545D                 mov     [rax-7], sil
.text:0000000000005461                 mov     rsi, rdx
.text:0000000000005464                 shr     rsi, 10h
.text:0000000000005468                 mov     [rax-6], sil
.text:000000000000546C                 mov     rsi, rdx
.text:000000000000546F                 shr     rsi, 18h
.text:0000000000005473                 mov     [rax-5], sil
.text:0000000000005477                 mov     rsi, rdx
.text:000000000000547A                 shr     rsi, 20h
.text:000000000000547E                 mov     [rax-4], sil
.text:0000000000005482                 mov     rsi, rdx
.text:0000000000005485                 shr     rsi, 28h
.text:0000000000005489                 mov     [rax-3], sil
.text:000000000000548D                 mov     rsi, rdx
.text:0000000000005490                 shr     rdx, 38h
.text:0000000000005494                 shr     rsi, 30h
.text:0000000000005498                 mov     [rax-1], dl
.text:000000000000549B                 mov     [rax-2], sil
.text:000000000000549F                 cmp     rax, rdi
.text:00000000000054A2                 jnz     short loc_5448
.text:00000000000054A4                 mov     rdx, [rbx+0E8h] ; n
.text:00000000000054AB                 mov     rsi, rbp        ; src
.text:00000000000054AE                 mov     rdi, r12        ; dest
.text:00000000000054B1                 call    _memcpy
.text:00000000000054B6                 mov     rax, cs:memset_v_3512
.text:00000000000054BD                 mov     edx, 40h ; '@'  ; n
.text:00000000000054C2                 xor     esi, esi        ; c
.text:00000000000054C4                 mov     rdi, rbp        ; s
.text:00000000000054C7                 call    rax ; memset
.text:00000000000054C9                 xor     eax, eax
.text:00000000000054CB
.text:00000000000054CB loc_54CB:                               ; CODE XREF: blake2b_final+16A↓j
.text:00000000000054CB                 mov     rbx, [rsp+68h+var_20]
.text:00000000000054D0                 xor     rbx, fs:28h
.text:00000000000054D9                 jnz     short loc_54FC
.text:00000000000054DB                 add     rsp, 50h
.text:00000000000054DF                 pop     rbx
.text:00000000000054E0                 pop     rbp
.text:00000000000054E1                 pop     r12
.text:00000000000054E3                 retn
.text:00000000000054E3 ; ---------------------------------------------------------------------------
.text:00000000000054E4                 align 8
.text:00000000000054E8
.text:00000000000054E8 loc_54E8:                               ; CODE XREF: blake2b_final+78↑j
.text:00000000000054E8                 mov     qword ptr [rbx+58h], 0FFFFFFFFFFFFFFFFh
.text:00000000000054F0                 jmp     loc_540E
.text:00000000000054F5 ; ---------------------------------------------------------------------------
.text:00000000000054F5
.text:00000000000054F5 loc_54F5:                               ; CODE XREF: blake2b_final+32↑j
.text:00000000000054F5                                         ; blake2b_final+42↑j ...
.text:00000000000054F5                 mov     eax, 0FFFFFFFFh
.text:00000000000054FA                 jmp     short loc_54CB
.text:00000000000054FC ; ---------------------------------------------------------------------------
.text:00000000000054FC
.text:00000000000054FC loc_54FC:                               ; CODE XREF: blake2b_final+149↑j
.text:00000000000054FC                 call    ___stack_chk_fail
.text:00000000000054FC ; } // starts at 5390
.text:00000000000054FC blake2b_final   endp
.text:00000000000054FC
.text:00000000000054FC ; ---------------------------------------------------------------------------
.text:0000000000005501                 align 10h
.text:0000000000005510
.text:0000000000005510 ; =============== S U B R O U T I N E =======================================
.text:0000000000005510
.text:0000000000005510
.text:0000000000005510                 public blake2b
.text:0000000000005510 blake2b         proc near               ; CODE XREF: blake2↓j
.text:0000000000005510
.text:0000000000005510 var_30          = qword ptr -30h
.text:0000000000005510
.text:0000000000005510 ; __unwind {
.text:0000000000005510                 push    r14
.text:0000000000005512                 push    r13
.text:0000000000005514                 mov     r14, rdx
.text:0000000000005517                 push    r12
.text:0000000000005519                 push    rbp
.text:000000000000551A                 push    rbx
.text:000000000000551B                 sub     rsp, 100h
.text:0000000000005522                 mov     rax, fs:28h
.text:000000000000552B                 mov     [rsp+128h+var_30], rax
.text:0000000000005533                 xor     eax, eax
.text:0000000000005535                 test    rdx, rdx
.text:0000000000005538                 setz    dl
.text:000000000000553B                 test    rcx, rcx
.text:000000000000553E                 setnz   al
.text:0000000000005541                 test    dl, al
.text:0000000000005543                 jnz     loc_55E0
.text:0000000000005549                 test    rdi, rdi
.text:000000000000554C                 mov     r13, rdi
.text:000000000000554F                 jz      loc_55E0
.text:0000000000005555                 test    r8, r8
.text:0000000000005558                 mov     rbx, rsi
.text:000000000000555B                 mov     rbp, rcx
.text:000000000000555E                 jnz     short loc_5565
.text:0000000000005560                 test    r9, r9
.text:0000000000005563                 jnz     short loc_55E0
.text:0000000000005565
.text:0000000000005565 loc_5565:                               ; CODE XREF: blake2b+4E↑j
.text:0000000000005565                 lea     rax, [rbx-1]
.text:0000000000005569                 cmp     rax, 3Fh ; '?'
.text:000000000000556D                 ja      short loc_55E0
.text:000000000000556F                 cmp     r9, 40h ; '@'
.text:0000000000005573                 ja      short loc_55E0
.text:0000000000005575                 test    r9, r9
.text:0000000000005578                 mov     r12, rsp
.text:000000000000557B                 jnz     short loc_55C8
.text:000000000000557D                 mov     rsi, rbx
.text:0000000000005580                 mov     rdi, r12
.text:0000000000005583                 call    blake2b_init
.text:0000000000005588                 test    eax, eax
.text:000000000000558A                 js      short loc_55E0
.text:000000000000558C
.text:000000000000558C loc_558C:                               ; CODE XREF: blake2b+CB↓j
.text:000000000000558C                 test    rbp, rbp
.text:000000000000558F                 jnz     short loc_55F0
.text:0000000000005591
.text:0000000000005591 loc_5591:                               ; CODE XREF: blake2b+EE↓j
.text:0000000000005591                 mov     rdx, rbx
.text:0000000000005594                 mov     rsi, r13
.text:0000000000005597                 mov     rdi, r12
.text:000000000000559A                 call    blake2b_final
.text:000000000000559F                 xor     eax, eax
.text:00000000000055A1
.text:00000000000055A1 loc_55A1:                               ; CODE XREF: blake2b+D5↓j
.text:00000000000055A1                 mov     rcx, [rsp+128h+var_30]
.text:00000000000055A9                 xor     rcx, fs:28h
.text:00000000000055B2                 jnz     short loc_5600
.text:00000000000055B4                 add     rsp, 100h
.text:00000000000055BB                 pop     rbx
.text:00000000000055BC                 pop     rbp
.text:00000000000055BD                 pop     r12
.text:00000000000055BF                 pop     r13
.text:00000000000055C1                 pop     r14
.text:00000000000055C3                 retn
.text:00000000000055C3 ; ---------------------------------------------------------------------------
.text:00000000000055C4                 align 8
.text:00000000000055C8
.text:00000000000055C8 loc_55C8:                               ; CODE XREF: blake2b+6B↑j
.text:00000000000055C8                 mov     rcx, r9
.text:00000000000055CB                 mov     rdx, r8
.text:00000000000055CE                 mov     rsi, rbx
.text:00000000000055D1                 mov     rdi, r12
.text:00000000000055D4                 call    blake2b_init_key
.text:00000000000055D9                 test    eax, eax
.text:00000000000055DB                 jns     short loc_558C
.text:00000000000055DD                 nop     dword ptr [rax]
.text:00000000000055E0
.text:00000000000055E0 loc_55E0:                               ; CODE XREF: blake2b+33↑j
.text:00000000000055E0                                         ; blake2b+3F↑j ...
.text:00000000000055E0                 mov     eax, 0FFFFFFFFh
.text:00000000000055E5                 jmp     short loc_55A1
.text:00000000000055E5 ; ---------------------------------------------------------------------------
.text:00000000000055E7                 align 10h
.text:00000000000055F0
.text:00000000000055F0 loc_55F0:                               ; CODE XREF: blake2b+7F↑j
.text:00000000000055F0                 mov     rdx, rbp
.text:00000000000055F3                 mov     rsi, r14
.text:00000000000055F6                 mov     rdi, r12
.text:00000000000055F9                 call    blake2b_update_part_3
.text:00000000000055FE                 jmp     short loc_5591
.text:0000000000005600 ; ---------------------------------------------------------------------------
.text:0000000000005600
.text:0000000000005600 loc_5600:                               ; CODE XREF: blake2b+A2↑j
.text:0000000000005600                 call    ___stack_chk_fail
.text:0000000000005600 ; } // starts at 5510
.text:0000000000005600 blake2b         endp
.text:0000000000005600
.text:0000000000005600 ; ---------------------------------------------------------------------------
.text:0000000000005605                 align 10h
.text:0000000000005610
.text:0000000000005610 ; =============== S U B R O U T I N E =======================================
.text:0000000000005610
.text:0000000000005610
.text:0000000000005610                 public blake2
.text:0000000000005610 blake2          proc near
.text:0000000000005610 ; __unwind {
.text:0000000000005610                 jmp     blake2b
.text:0000000000005610 ; } // starts at 5610
.text:0000000000005610 blake2          endp
.text:0000000000005610
.text:0000000000005610 ; ---------------------------------------------------------------------------
.text:0000000000005615                 align 20h
.text:0000000000005620
.text:0000000000005620 ; =============== S U B R O U T I N E =======================================
.text:0000000000005620
.text:0000000000005620
.text:0000000000005620 ; __int64 __fastcall blake2b_stream(FILE *stream)
.text:0000000000005620                 public blake2b_stream
.text:0000000000005620 blake2b_stream  proc near               ; CODE XREF: digest_file_isra_1+5D↑p
.text:0000000000005620                                         ; digest_file_isra_1+108↑p
.text:0000000000005620
.text:0000000000005620 var_140         = qword ptr -140h
.text:0000000000005620 var_138         = byte ptr -138h
.text:0000000000005620 var_40          = qword ptr -40h
.text:0000000000005620
.text:0000000000005620 ; __unwind {
.text:0000000000005620                 push    r15
.text:0000000000005622                 push    r14
.text:0000000000005624                 mov     r14, rdx
.text:0000000000005627                 push    r13
.text:0000000000005629                 push    r12
.text:000000000000562B                 push    rbp
.text:000000000000562C                 push    rbx
.text:000000000000562D                 mov     rbx, rdi
.text:0000000000005630                 mov     edi, 8000h      ; size
.text:0000000000005635                 sub     rsp, 118h
.text:000000000000563C                 mov     rax, fs:28h
.text:0000000000005645                 mov     [rsp+148h+var_40], rax
.text:000000000000564D                 xor     eax, eax
.text:000000000000564F                 mov     [rsp+148h+var_140], rsi
.text:0000000000005654                 call    _malloc
.text:0000000000005659                 test    rax, rax
.text:000000000000565C                 jz      loc_5738
.text:0000000000005662                 lea     r13, [rsp+148h+var_138]
.text:0000000000005667                 mov     rsi, r14
.text:000000000000566A                 mov     r12d, 8000h
.text:0000000000005670                 mov     rbp, rax
.text:0000000000005673                 mov     rdi, r13
.text:0000000000005676                 call    blake2b_init
.text:000000000000567B
.text:000000000000567B loc_567B:                               ; CODE XREF: blake2b_stream+A5↓j
.text:000000000000567B                 xor     r15d, r15d
.text:000000000000567E                 jmp     short loc_5691
.text:0000000000005680 ; ---------------------------------------------------------------------------
.text:0000000000005680
.text:0000000000005680 loc_5680:                               ; CODE XREF: blake2b_stream+93↓j
.text:0000000000005680                 test    rax, rax
.text:0000000000005683                 mov     rdi, rbx        ; stream
.text:0000000000005686                 jz      short loc_56D0
.text:0000000000005688                 call    _feof
.text:000000000000568D                 test    eax, eax
.text:000000000000568F                 jnz     short loc_56DE
.text:0000000000005691
.text:0000000000005691 loc_5691:                               ; CODE XREF: blake2b_stream+5E↑j
.text:0000000000005691                 lea     rdi, [rbp+r15+0] ; ptr
.text:0000000000005696                 mov     rdx, r12
.text:0000000000005699                 mov     rcx, rbx        ; stream
.text:000000000000569C                 sub     rdx, r15        ; n
.text:000000000000569F                 mov     esi, 1          ; size
.text:00000000000056A4                 call    _fread
.text:00000000000056A9                 add     r15, rax
.text:00000000000056AC                 cmp     r15, 8000h
.text:00000000000056B3                 jnz     short loc_5680
.text:00000000000056B5                 mov     edx, 8000h
.text:00000000000056BA                 mov     rsi, rbp
.text:00000000000056BD                 mov     rdi, r13
.text:00000000000056C0                 call    blake2b_update
.text:00000000000056C5                 jmp     short loc_567B
.text:00000000000056C5 ; ---------------------------------------------------------------------------
.text:00000000000056C7                 align 10h
.text:00000000000056D0
.text:00000000000056D0 loc_56D0:                               ; CODE XREF: blake2b_stream+66↑j
.text:00000000000056D0                 call    _ferror
.text:00000000000056D5                 test    eax, eax
.text:00000000000056D7                 mov     ebx, 0FFFFFFFFh
.text:00000000000056DC                 jnz     short loc_56F5
.text:00000000000056DE
.text:00000000000056DE loc_56DE:                               ; CODE XREF: blake2b_stream+6F↑j
.text:00000000000056DE                 test    r15, r15
.text:00000000000056E1                 jnz     short loc_5728
.text:00000000000056E3
.text:00000000000056E3 loc_56E3:                               ; CODE XREF: blake2b_stream+116↓j
.text:00000000000056E3                 mov     rsi, [rsp+148h+var_140]
.text:00000000000056E8                 mov     rdx, r14
.text:00000000000056EB                 mov     rdi, r13
.text:00000000000056EE                 xor     ebx, ebx
.text:00000000000056F0                 call    blake2b_final
.text:00000000000056F5
.text:00000000000056F5 loc_56F5:                               ; CODE XREF: blake2b_stream+BC↑j
.text:00000000000056F5                 mov     rdi, rbp        ; ptr
.text:00000000000056F8                 call    _free
.text:00000000000056FD
.text:00000000000056FD loc_56FD:                               ; CODE XREF: blake2b_stream+11D↓j
.text:00000000000056FD                 mov     rcx, [rsp+148h+var_40]
.text:0000000000005705                 xor     rcx, fs:28h
.text:000000000000570E                 mov     eax, ebx
.text:0000000000005710                 jnz     short loc_573F
.text:0000000000005712                 add     rsp, 118h
.text:0000000000005719                 pop     rbx
.text:000000000000571A                 pop     rbp
.text:000000000000571B                 pop     r12
.text:000000000000571D                 pop     r13
.text:000000000000571F                 pop     r14
.text:0000000000005721                 pop     r15
.text:0000000000005723                 retn
.text:0000000000005723 ; ---------------------------------------------------------------------------
.text:0000000000005724                 align 8
.text:0000000000005728
.text:0000000000005728 loc_5728:                               ; CODE XREF: blake2b_stream+C1↑j
.text:0000000000005728                 mov     rdx, r15
.text:000000000000572B                 mov     rsi, rbp
.text:000000000000572E                 mov     rdi, r13
.text:0000000000005731                 call    blake2b_update
.text:0000000000005736                 jmp     short loc_56E3
.text:0000000000005738 ; ---------------------------------------------------------------------------
.text:0000000000005738
.text:0000000000005738 loc_5738:                               ; CODE XREF: blake2b_stream+3C↑j
.text:0000000000005738                 mov     ebx, 0FFFFFFFFh
.text:000000000000573D                 jmp     short loc_56FD
.text:000000000000573F ; ---------------------------------------------------------------------------
.text:000000000000573F
.text:000000000000573F loc_573F:                               ; CODE XREF: blake2b_stream+F0↑j
.text:000000000000573F                 call    ___stack_chk_fail
.text:000000000000573F ; } // starts at 5620
.text:000000000000573F blake2b_stream  endp
.text:000000000000573F
.text:000000000000573F ; ---------------------------------------------------------------------------
.text:0000000000005744                 align 10h
.text:0000000000005750
.text:0000000000005750 ; =============== S U B R O U T I N E =======================================
.text:0000000000005750
.text:0000000000005750 ; Attributes: noreturn
.text:0000000000005750
.text:0000000000005750 __argmatch_die  proc near               ; DATA XREF: .data:argmatch_die↓o
.text:0000000000005750 ; __unwind {
.text:0000000000005750                 mov     edi, 1          ; status
.text:0000000000005755                 jmp     usage
.text:0000000000005755 ; } // starts at 5750
.text:0000000000005755 __argmatch_die  endp
.text:0000000000005755
.text:0000000000005755 ; ---------------------------------------------------------------------------
.text:000000000000575A                 align 20h
.text:0000000000005760
.text:0000000000005760 ; =============== S U B R O U T I N E =======================================
.text:0000000000005760
.text:0000000000005760 ; Attributes: info_from_lumina
.text:0000000000005760
.text:0000000000005760 ; ptrdiff_t __fastcall argmatch(const char *arg, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005760                 public argmatch
.text:0000000000005760 argmatch        proc near               ; CODE XREF: main+5F9↑p
.text:0000000000005760                                         ; main+AD1↑p ...
.text:0000000000005760
.text:0000000000005760 var_58          = qword ptr -58h
.text:0000000000005760 s2              = qword ptr -50h
.text:0000000000005760 var_41          = byte ptr -41h
.text:0000000000005760 var_40          = qword ptr -40h
.text:0000000000005760
.text:0000000000005760 ; __unwind {
.text:0000000000005760                 push    r15
.text:0000000000005762                 push    r14
.text:0000000000005764                 mov     r15, rsi
.text:0000000000005767                 push    r13
.text:0000000000005769                 push    r12
.text:000000000000576B                 mov     r13, rcx
.text:000000000000576E                 push    rbp
.text:000000000000576F                 push    rbx
.text:0000000000005770                 mov     rbp, rdx
.text:0000000000005773                 sub     rsp, 28h
.text:0000000000005777                 mov     [rsp+58h+s2], rdi
.text:000000000000577C                 mov     [rsp+58h+var_40], rdx
.text:0000000000005781                 call    _strlen
.text:0000000000005786                 mov     r14, [r15]
.text:0000000000005789                 mov     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:0000000000005791                 test    r14, r14
.text:0000000000005794                 jz      loc_584D
.text:000000000000579A                 mov     r12, rax
.text:000000000000579D                 mov     [rsp+58h+var_41], 0
.text:00000000000057A2                 xor     ebx, ebx
.text:00000000000057A4                 jmp     short loc_57F7
.text:00000000000057A4 ; ---------------------------------------------------------------------------
.text:00000000000057A6                 align 10h
.text:00000000000057B0
.text:00000000000057B0 loc_57B0:                               ; CODE XREF: argmatch+BD↓j
.text:00000000000057B0                 mov     rax, [rsp+58h+var_40]
.text:00000000000057B5                 test    rax, rax
.text:00000000000057B8                 jz      loc_5860
.text:00000000000057BE                 mov     rdi, [rsp+58h+var_58]
.text:00000000000057C2                 mov     rdx, r13        ; n
.text:00000000000057C5                 mov     rsi, rbp        ; s2
.text:00000000000057C8                 imul    rdi, r13
.text:00000000000057CC                 add     rdi, rax        ; s1
.text:00000000000057CF                 call    _memcmp
.text:00000000000057D4                 test    eax, eax
.text:00000000000057D6                 movzx   eax, [rsp+58h+var_41]
.text:00000000000057DB                 mov     ecx, 1
.text:00000000000057E0                 cmovnz  eax, ecx
.text:00000000000057E3                 mov     [rsp+58h+var_41], al
.text:00000000000057E7
.text:00000000000057E7 loc_57E7:                               ; CODE XREF: argmatch+A9↓j
.text:00000000000057E7                                         ; argmatch+105↓j
.text:00000000000057E7                 add     rbx, 1
.text:00000000000057EB                 add     rbp, r13
.text:00000000000057EE                 mov     r14, [r15+rbx*8]
.text:00000000000057F2                 test    r14, r14
.text:00000000000057F5                 jz      short loc_5838
.text:00000000000057F7
.text:00000000000057F7 loc_57F7:                               ; CODE XREF: argmatch+44↑j
.text:00000000000057F7                                         ; argmatch+D1↓j
.text:00000000000057F7                 mov     rsi, [rsp+58h+s2] ; s2
.text:00000000000057FC                 mov     rdx, r12        ; n
.text:00000000000057FF                 mov     rdi, r14        ; s1
.text:0000000000005802                 call    _strncmp
.text:0000000000005807                 test    eax, eax
.text:0000000000005809                 jnz     short loc_57E7
.text:000000000000580B                 mov     rdi, r14        ; s
.text:000000000000580E                 call    _strlen
.text:0000000000005813                 cmp     rax, r12
.text:0000000000005816                 jz      short loc_5870
.text:0000000000005818                 cmp     [rsp+58h+var_58], 0FFFFFFFFFFFFFFFFh
.text:000000000000581D                 jnz     short loc_57B0
.text:000000000000581F                 mov     [rsp+58h+var_58], rbx
.text:0000000000005823                 add     rbx, 1
.text:0000000000005827                 add     rbp, r13
.text:000000000000582A                 mov     r14, [r15+rbx*8]
.text:000000000000582E                 test    r14, r14
.text:0000000000005831                 jnz     short loc_57F7
.text:0000000000005833                 nop     dword ptr [rax+rax+00h]
.text:0000000000005838
.text:0000000000005838 loc_5838:                               ; CODE XREF: argmatch+95↑j
.text:0000000000005838                 cmp     [rsp+58h+var_41], 0
.text:000000000000583D                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005844                 cmovz   rax, [rsp+58h+var_58]
.text:0000000000005849                 mov     [rsp+58h+var_58], rax
.text:000000000000584D
.text:000000000000584D loc_584D:                               ; CODE XREF: argmatch+34↑j
.text:000000000000584D                                         ; argmatch+114↓j
.text:000000000000584D                 mov     rax, [rsp+58h+var_58]
.text:0000000000005851                 add     rsp, 28h
.text:0000000000005855                 pop     rbx
.text:0000000000005856                 pop     rbp
.text:0000000000005857                 pop     r12
.text:0000000000005859                 pop     r13
.text:000000000000585B                 pop     r14
.text:000000000000585D                 pop     r15
.text:000000000000585F                 retn
.text:0000000000005860 ; ---------------------------------------------------------------------------
.text:0000000000005860
.text:0000000000005860 loc_5860:                               ; CODE XREF: argmatch+58↑j
.text:0000000000005860                 mov     [rsp+58h+var_41], 1
.text:0000000000005865                 jmp     short loc_57E7
.text:0000000000005865 ; ---------------------------------------------------------------------------
.text:0000000000005867                 align 10h
.text:0000000000005870
.text:0000000000005870 loc_5870:                               ; CODE XREF: argmatch+B6↑j
.text:0000000000005870                 mov     [rsp+58h+var_58], rbx
.text:0000000000005874                 jmp     short loc_584D
.text:0000000000005874 ; } // starts at 5760
.text:0000000000005874 argmatch        endp
.text:0000000000005874
.text:0000000000005874 ; ---------------------------------------------------------------------------
.text:0000000000005876                 align 20h
.text:0000000000005880
.text:0000000000005880 ; =============== S U B R O U T I N E =======================================
.text:0000000000005880
.text:0000000000005880 ; Attributes: info_from_lumina
.text:0000000000005880
.text:0000000000005880 ; void __fastcall argmatch_invalid(const char *context, const char *value, ptrdiff_t problem)
.text:0000000000005880                 public argmatch_invalid
.text:0000000000005880 argmatch_invalid proc near              ; CODE XREF: __xargmatch_internal+4E↓p
.text:0000000000005880 ; __unwind {
.text:0000000000005880                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000005884                 push    r12
.text:0000000000005886                 mov     edx, 5          ; category
.text:000000000000588B                 push    rbp
.text:000000000000588C                 mov     r12, rsi
.text:000000000000588F                 push    rbx
.text:0000000000005890                 mov     rbp, rdi
.text:0000000000005893                 jz      short loc_58E0
.text:0000000000005895                 lea     rsi, aAmbiguousArgum ; "ambiguous argument %s for %s"
.text:000000000000589C                 xor     edi, edi        ; domainname
.text:000000000000589E                 call    _dcgettext
.text:00000000000058A3                 mov     rbx, rax
.text:00000000000058A6
.text:00000000000058A6 loc_58A6:                               ; CODE XREF: argmatch_invalid+71↓j
.text:00000000000058A6                 mov     rsi, rbp
.text:00000000000058A9                 mov     edi, 1
.text:00000000000058AE                 call    quote_n
.text:00000000000058B3                 mov     rdx, r12
.text:00000000000058B6                 mov     rbp, rax
.text:00000000000058B9                 mov     esi, 8
.text:00000000000058BE                 xor     edi, edi
.text:00000000000058C0                 call    quotearg_n_style
.text:00000000000058C5                 mov     r8, rbp
.text:00000000000058C8                 mov     rdx, rbx        ; format
.text:00000000000058CB                 mov     rcx, rax
.text:00000000000058CE                 pop     rbx
.text:00000000000058CF                 pop     rbp
.text:00000000000058D0                 pop     r12
.text:00000000000058D2                 xor     esi, esi        ; errnum
.text:00000000000058D4                 xor     edi, edi        ; status
.text:00000000000058D6                 xor     eax, eax
.text:00000000000058D8                 jmp     _error
.text:00000000000058D8 ; ---------------------------------------------------------------------------
.text:00000000000058DD                 align 20h
.text:00000000000058E0
.text:00000000000058E0 loc_58E0:                               ; CODE XREF: argmatch_invalid+13↑j
.text:00000000000058E0                 lea     rsi, aInvalidArgumen ; "invalid argument %s for %s"
.text:00000000000058E7                 xor     edi, edi        ; domainname
.text:00000000000058E9                 call    _dcgettext
.text:00000000000058EE                 mov     rbx, rax
.text:00000000000058F1                 jmp     short loc_58A6
.text:00000000000058F1 ; } // starts at 5880
.text:00000000000058F1 argmatch_invalid endp
.text:00000000000058F1
.text:00000000000058F1 ; ---------------------------------------------------------------------------
.text:00000000000058F3                 align 20h
.text:0000000000005900
.text:0000000000005900 ; =============== S U B R O U T I N E =======================================
.text:0000000000005900
.text:0000000000005900 ; Attributes: info_from_lumina
.text:0000000000005900
.text:0000000000005900 ; void __fastcall argmatch_valid(const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005900                 public argmatch_valid
.text:0000000000005900 argmatch_valid  proc near               ; CODE XREF: __xargmatch_internal+5C↓p
.text:0000000000005900 ; __unwind {
.text:0000000000005900                 push    r15
.text:0000000000005902                 push    r14
.text:0000000000005904                 mov     r14, rdi
.text:0000000000005907                 push    r13
.text:0000000000005909                 push    r12
.text:000000000000590B                 xor     edi, edi        ; domainname
.text:000000000000590D                 push    rbp
.text:000000000000590E                 push    rbx
.text:000000000000590F                 mov     rbp, rsi
.text:0000000000005912                 lea     rsi, aValidArguments ; "Valid arguments are:"
.text:0000000000005919                 mov     r12, rdx
.text:000000000000591C                 mov     edx, 5          ; category
.text:0000000000005921                 sub     rsp, 8
.text:0000000000005925                 mov     rbx, cs:stderr@@GLIBC_2_2_5
.text:000000000000592C                 call    _dcgettext
.text:0000000000005931                 mov     rdi, rax        ; s
.text:0000000000005934                 mov     rsi, rbx        ; stream
.text:0000000000005937                 call    _fputs_unlocked
.text:000000000000593C                 mov     r15, [r14]
.text:000000000000593F                 test    r15, r15
.text:0000000000005942                 jz      loc_59D8
.text:0000000000005948                 xor     r13d, r13d
.text:000000000000594B                 xor     ebx, ebx
.text:000000000000594D                 jmp     short loc_5988
.text:000000000000594D ; ---------------------------------------------------------------------------
.text:000000000000594F                 align 10h
.text:0000000000005950
.text:0000000000005950 loc_5950:                               ; CODE XREF: argmatch_valid+8B↓j
.text:0000000000005950                                         ; argmatch_valid+9D↓j
.text:0000000000005950                 mov     rdi, r15
.text:0000000000005953                 add     rbx, 1
.text:0000000000005957                 mov     r13, rbp
.text:000000000000595A                 call    quote
.text:000000000000595F                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000005966                 lea     rdx, aS_0       ; "\n  - %s"
.text:000000000000596D                 mov     rcx, rax
.text:0000000000005970                 mov     esi, 1
.text:0000000000005975                 xor     eax, eax
.text:0000000000005977                 add     rbp, r12
.text:000000000000597A                 call    ___fprintf_chk
.text:000000000000597F                 mov     r15, [r14+rbx*8]
.text:0000000000005983                 test    r15, r15
.text:0000000000005986                 jz      short loc_59D8
.text:0000000000005988
.text:0000000000005988 loc_5988:                               ; CODE XREF: argmatch_valid+4D↑j
.text:0000000000005988                                         ; argmatch_valid+D2↓j
.text:0000000000005988                 test    rbx, rbx
.text:000000000000598B                 jz      short loc_5950
.text:000000000000598D                 mov     rdx, r12        ; n
.text:0000000000005990                 mov     rsi, rbp        ; s2
.text:0000000000005993                 mov     rdi, r13        ; s1
.text:0000000000005996                 call    _memcmp
.text:000000000000599B                 test    eax, eax
.text:000000000000599D                 jnz     short loc_5950
.text:000000000000599F                 mov     rdi, r15
.text:00000000000059A2                 add     rbx, 1
.text:00000000000059A6                 add     rbp, r12
.text:00000000000059A9                 call    quote
.text:00000000000059AE                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000059B5                 lea     rdx, aS_1       ; ", %s"
.text:00000000000059BC                 mov     rcx, rax
.text:00000000000059BF                 mov     esi, 1
.text:00000000000059C4                 xor     eax, eax
.text:00000000000059C6                 call    ___fprintf_chk
.text:00000000000059CB                 mov     r15, [r14+rbx*8]
.text:00000000000059CF                 test    r15, r15
.text:00000000000059D2                 jnz     short loc_5988
.text:00000000000059D4                 nop     dword ptr [rax+00h]
.text:00000000000059D8
.text:00000000000059D8 loc_59D8:                               ; CODE XREF: argmatch_valid+42↑j
.text:00000000000059D8                                         ; argmatch_valid+86↑j
.text:00000000000059D8                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000059DF                 mov     rax, [rdi+28h]
.text:00000000000059E3                 cmp     rax, [rdi+30h]
.text:00000000000059E7                 jnb     short loc_5A08
.text:00000000000059E9                 lea     rdx, [rax+1]
.text:00000000000059ED                 mov     [rdi+28h], rdx
.text:00000000000059F1                 mov     byte ptr [rax], 0Ah
.text:00000000000059F4                 add     rsp, 8
.text:00000000000059F8                 pop     rbx
.text:00000000000059F9                 pop     rbp
.text:00000000000059FA                 pop     r12
.text:00000000000059FC                 pop     r13
.text:00000000000059FE                 pop     r14
.text:0000000000005A00                 pop     r15
.text:0000000000005A02                 retn
.text:0000000000005A02 ; ---------------------------------------------------------------------------
.text:0000000000005A03                 align 8
.text:0000000000005A08
.text:0000000000005A08 loc_5A08:                               ; CODE XREF: argmatch_valid+E7↑j
.text:0000000000005A08                 add     rsp, 8
.text:0000000000005A0C                 mov     esi, 0Ah        ; int
.text:0000000000005A11                 pop     rbx
.text:0000000000005A12                 pop     rbp
.text:0000000000005A13                 pop     r12
.text:0000000000005A15                 pop     r13
.text:0000000000005A17                 pop     r14
.text:0000000000005A19                 pop     r15
.text:0000000000005A1B                 jmp     ___overflow
.text:0000000000005A1B ; } // starts at 5900
.text:0000000000005A1B argmatch_valid  endp
.text:0000000000005A1B
.text:0000000000005A20
.text:0000000000005A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A20
.text:0000000000005A20 ; Attributes: info_from_lumina
.text:0000000000005A20
.text:0000000000005A20 ; ptrdiff_t __fastcall _xargmatch_internal(const char *context, const char *arg, const char *const *arglist, const char *vallist, size_t valsize, argmatch_exit_fn exit_fn)
.text:0000000000005A20                 public __xargmatch_internal
.text:0000000000005A20 __xargmatch_internal proc near
.text:0000000000005A20 ; __unwind {
.text:0000000000005A20                 push    r15
.text:0000000000005A22                 push    r14
.text:0000000000005A24                 mov     r14, rdi
.text:0000000000005A27                 push    r13
.text:0000000000005A29                 push    r12
.text:0000000000005A2B                 mov     r12, rsi
.text:0000000000005A2E                 push    rbp
.text:0000000000005A2F                 push    rbx
.text:0000000000005A30                 mov     rbp, rcx
.text:0000000000005A33                 mov     rbx, rdx
.text:0000000000005A36                 mov     rcx, r8
.text:0000000000005A39                 mov     rdx, rbp
.text:0000000000005A3C                 sub     rsp, 8
.text:0000000000005A40                 mov     rsi, rbx
.text:0000000000005A43                 mov     rdi, r12
.text:0000000000005A46                 mov     r15, r8
.text:0000000000005A49                 mov     r13, r9
.text:0000000000005A4C                 call    argmatch
.text:0000000000005A51                 test    rax, rax
.text:0000000000005A54                 js      short loc_5A65
.text:0000000000005A56
.text:0000000000005A56 loc_5A56:                               ; CODE XREF: __xargmatch_internal+6B↓j
.text:0000000000005A56                 add     rsp, 8
.text:0000000000005A5A                 pop     rbx
.text:0000000000005A5B                 pop     rbp
.text:0000000000005A5C                 pop     r12
.text:0000000000005A5E                 pop     r13
.text:0000000000005A60                 pop     r14
.text:0000000000005A62                 pop     r15
.text:0000000000005A64                 retn
.text:0000000000005A65 ; ---------------------------------------------------------------------------
.text:0000000000005A65
.text:0000000000005A65 loc_5A65:                               ; CODE XREF: __xargmatch_internal+34↑j
.text:0000000000005A65                 mov     rdx, rax
.text:0000000000005A68                 mov     rsi, r12
.text:0000000000005A6B                 mov     rdi, r14
.text:0000000000005A6E                 call    argmatch_invalid
.text:0000000000005A73                 mov     rdx, r15
.text:0000000000005A76                 mov     rsi, rbp
.text:0000000000005A79                 mov     rdi, rbx
.text:0000000000005A7C                 call    argmatch_valid
.text:0000000000005A81                 call    r13
.text:0000000000005A84                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005A8B                 jmp     short loc_5A56
.text:0000000000005A8B ; } // starts at 5A20
.text:0000000000005A8B __xargmatch_internal endp
.text:0000000000005A8B
.text:0000000000005A8B ; ---------------------------------------------------------------------------
.text:0000000000005A8D                 align 10h
.text:0000000000005A90
.text:0000000000005A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005A90
.text:0000000000005A90 ; Attributes: info_from_lumina
.text:0000000000005A90
.text:0000000000005A90 ; const char *__fastcall argmatch_to_argument(const char *value, const char *const *arglist, const char *vallist, size_t valsize)
.text:0000000000005A90                 public argmatch_to_argument
.text:0000000000005A90 argmatch_to_argument proc near
.text:0000000000005A90 ; __unwind {
.text:0000000000005A90                 push    r14
.text:0000000000005A92                 push    r13
.text:0000000000005A94                 push    r12
.text:0000000000005A96                 push    rbp
.text:0000000000005A97                 push    rbx
.text:0000000000005A98                 mov     r14, [rsi]
.text:0000000000005A9B                 test    r14, r14
.text:0000000000005A9E                 jz      short loc_5AD1
.text:0000000000005AA0                 mov     r12, rcx
.text:0000000000005AA3                 mov     r13, rdi
.text:0000000000005AA6                 mov     rbp, rdx
.text:0000000000005AA9                 lea     rbx, [rsi+8]
.text:0000000000005AAD                 jmp     short loc_5ABF
.text:0000000000005AAD ; ---------------------------------------------------------------------------
.text:0000000000005AAF                 align 10h
.text:0000000000005AB0
.text:0000000000005AB0 loc_5AB0:                               ; CODE XREF: argmatch_to_argument+3F↓j
.text:0000000000005AB0                 mov     r14, [rbx]
.text:0000000000005AB3                 add     rbp, r12
.text:0000000000005AB6                 add     rbx, 8
.text:0000000000005ABA                 test    r14, r14
.text:0000000000005ABD                 jz      short loc_5AD1
.text:0000000000005ABF
.text:0000000000005ABF loc_5ABF:                               ; CODE XREF: argmatch_to_argument+1D↑j
.text:0000000000005ABF                 mov     rdx, r12        ; n
.text:0000000000005AC2                 mov     rsi, rbp        ; s2
.text:0000000000005AC5                 mov     rdi, r13        ; s1
.text:0000000000005AC8                 call    _memcmp
.text:0000000000005ACD                 test    eax, eax
.text:0000000000005ACF                 jnz     short loc_5AB0
.text:0000000000005AD1
.text:0000000000005AD1 loc_5AD1:                               ; CODE XREF: argmatch_to_argument+E↑j
.text:0000000000005AD1                                         ; argmatch_to_argument+2D↑j
.text:0000000000005AD1                 pop     rbx
.text:0000000000005AD2                 mov     rax, r14
.text:0000000000005AD5                 pop     rbp
.text:0000000000005AD6                 pop     r12
.text:0000000000005AD8                 pop     r13
.text:0000000000005ADA                 pop     r14
.text:0000000000005ADC                 retn
.text:0000000000005ADC ; } // starts at 5A90
.text:0000000000005ADC argmatch_to_argument endp
.text:0000000000005ADC
.text:0000000000005ADC ; ---------------------------------------------------------------------------
.text:0000000000005ADD                 align 20h
.text:0000000000005AE0
.text:0000000000005AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AE0
.text:0000000000005AE0
.text:0000000000005AE0                 public close_stdout_set_file_name
.text:0000000000005AE0 close_stdout_set_file_name proc near
.text:0000000000005AE0 ; __unwind {
.text:0000000000005AE0                 mov     cs:file_name, rdi
.text:0000000000005AE7                 retn
.text:0000000000005AE7 ; } // starts at 5AE0
.text:0000000000005AE7 close_stdout_set_file_name endp
.text:0000000000005AE7
.text:0000000000005AE7 ; ---------------------------------------------------------------------------
.text:0000000000005AE8                 align 10h
.text:0000000000005AF0
.text:0000000000005AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005AF0
.text:0000000000005AF0
.text:0000000000005AF0                 public close_stdout_set_ignore_EPIPE
.text:0000000000005AF0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000005AF0 ; __unwind {
.text:0000000000005AF0                 mov     cs:ignore_EPIPE, dil
.text:0000000000005AF7                 retn
.text:0000000000005AF7 ; } // starts at 5AF0
.text:0000000000005AF7 close_stdout_set_ignore_EPIPE endp
.text:0000000000005AF7
.text:0000000000005AF7 ; ---------------------------------------------------------------------------
.text:0000000000005AF8                 align 20h
.text:0000000000005B00
.text:0000000000005B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B00
.text:0000000000005B00 ; Attributes: info_from_lumina
.text:0000000000005B00
.text:0000000000005B00 ; void __cdecl close_stdout()
.text:0000000000005B00                 public close_stdout
.text:0000000000005B00 close_stdout    proc near               ; DATA XREF: main+71↑o
.text:0000000000005B00 ; __unwind {
.text:0000000000005B00                 push    rbp
.text:0000000000005B01                 push    rbx
.text:0000000000005B02                 sub     rsp, 8
.text:0000000000005B06                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000005B0D                 call    close_stream
.text:0000000000005B12                 test    eax, eax
.text:0000000000005B14                 jz      short loc_5B2C
.text:0000000000005B16                 call    ___errno_location
.text:0000000000005B1B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000005B22                 mov     rbx, rax
.text:0000000000005B25                 jz      short loc_5B43
.text:0000000000005B27                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000005B2A                 jnz     short loc_5B43
.text:0000000000005B2C
.text:0000000000005B2C loc_5B2C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000005B2C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000005B33                 call    close_stream
.text:0000000000005B38                 test    eax, eax
.text:0000000000005B3A                 jnz     short loc_5B82
.text:0000000000005B3C                 add     rsp, 8
.text:0000000000005B40                 pop     rbx
.text:0000000000005B41                 pop     rbp
.text:0000000000005B42                 retn
.text:0000000000005B43 ; ---------------------------------------------------------------------------
.text:0000000000005B43
.text:0000000000005B43 loc_5B43:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000005B43                                         ; close_stdout+2A↑j
.text:0000000000005B43                 lea     rsi, aWriteError ; "write error"
.text:0000000000005B4A                 xor     edi, edi        ; domainname
.text:0000000000005B4C                 mov     edx, 5          ; category
.text:0000000000005B51                 call    _dcgettext
.text:0000000000005B56                 mov     rdi, cs:file_name
.text:0000000000005B5D                 mov     rbp, rax
.text:0000000000005B60                 test    rdi, rdi
.text:0000000000005B63                 jz      short loc_5B8D
.text:0000000000005B65                 call    quotearg_colon
.text:0000000000005B6A                 mov     esi, [rbx]      ; errnum
.text:0000000000005B6C                 lea     rdx, format     ; "%s: %s"
.text:0000000000005B73                 mov     rcx, rax
.text:0000000000005B76                 mov     r8, rbp
.text:0000000000005B79                 xor     edi, edi        ; status
.text:0000000000005B7B                 xor     eax, eax
.text:0000000000005B7D                 call    _error
.text:0000000000005B82
.text:0000000000005B82 loc_5B82:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000005B82                                         ; close_stdout+A2↓j
.text:0000000000005B82                 mov     edi, cs:exit_failure ; status
.text:0000000000005B88                 call    __exit
.text:0000000000005B8D ; ---------------------------------------------------------------------------
.text:0000000000005B8D
.text:0000000000005B8D loc_5B8D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000005B8D                 mov     esi, [rbx]      ; errnum
.text:0000000000005B8F                 lea     rdx, aS_1+2     ; format
.text:0000000000005B96                 mov     rcx, rax
.text:0000000000005B99                 xor     edi, edi        ; status
.text:0000000000005B9B                 xor     eax, eax
.text:0000000000005B9D                 call    _error
.text:0000000000005BA2                 jmp     short loc_5B82
.text:0000000000005BA2 ; } // starts at 5B00
.text:0000000000005BA2 close_stdout    endp
.text:0000000000005BA2
.text:0000000000005BA2 ; ---------------------------------------------------------------------------
.text:0000000000005BA4                 align 10h
.text:0000000000005BB0
.text:0000000000005BB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BB0
.text:0000000000005BB0
.text:0000000000005BB0 ; int fdadvise(int fd, off_t offset, off_t len, int advise)
.text:0000000000005BB0                 public fdadvise
.text:0000000000005BB0 fdadvise        proc near
.text:0000000000005BB0 ; __unwind {
.text:0000000000005BB0                 jmp     _posix_fadvise
.text:0000000000005BB0 ; } // starts at 5BB0
.text:0000000000005BB0 fdadvise        endp
.text:0000000000005BB0
.text:0000000000005BB0 ; ---------------------------------------------------------------------------
.text:0000000000005BB5                 align 20h
.text:0000000000005BC0
.text:0000000000005BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BC0
.text:0000000000005BC0
.text:0000000000005BC0                 public fadvise
.text:0000000000005BC0 fadvise         proc near               ; CODE XREF: digest_file_isra_1+47↑p
.text:0000000000005BC0                                         ; digest_file_isra_1+F2↑p
.text:0000000000005BC0 ; __unwind {
.text:0000000000005BC0                 test    rdi, rdi
.text:0000000000005BC3                 jz      short locret_5BE0
.text:0000000000005BC5                 push    rbx
.text:0000000000005BC6                 mov     ebx, esi
.text:0000000000005BC8                 call    _fileno
.text:0000000000005BCD                 mov     ecx, ebx        ; advise
.text:0000000000005BCF                 xor     edx, edx        ; len
.text:0000000000005BD1                 xor     esi, esi        ; offset
.text:0000000000005BD3                 pop     rbx
.text:0000000000005BD4                 mov     edi, eax        ; fd
.text:0000000000005BD6                 jmp     _posix_fadvise
.text:0000000000005BD6 ; ---------------------------------------------------------------------------
.text:0000000000005BDB                 align 20h
.text:0000000000005BE0
.text:0000000000005BE0 locret_5BE0:                            ; CODE XREF: fadvise+3↑j
.text:0000000000005BE0                 rep retn
.text:0000000000005BE0 ; } // starts at 5BC0
.text:0000000000005BE0 fadvise         endp
.text:0000000000005BE0
.text:0000000000005BE0 ; ---------------------------------------------------------------------------
.text:0000000000005BE2                 align 10h
.text:0000000000005BF0
.text:0000000000005BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005BF0
.text:0000000000005BF0
.text:0000000000005BF0                 public fopen_safer
.text:0000000000005BF0 fopen_safer     proc near               ; CODE XREF: main+B4C↑p
.text:0000000000005BF0                                         ; digest_file_isra_1+DD↑p
.text:0000000000005BF0 ; __unwind {
.text:0000000000005BF0                 push    r12
.text:0000000000005BF2                 push    rbp
.text:0000000000005BF3                 mov     rbp, rsi
.text:0000000000005BF6                 push    rbx
.text:0000000000005BF7                 call    _fopen
.text:0000000000005BFC                 test    rax, rax
.text:0000000000005BFF                 mov     rbx, rax
.text:0000000000005C02                 jz      short loc_5C11
.text:0000000000005C04                 mov     rdi, rax        ; stream
.text:0000000000005C07                 call    _fileno
.text:0000000000005C0C                 cmp     eax, 2
.text:0000000000005C0F                 jbe     short loc_5C20
.text:0000000000005C11
.text:0000000000005C11 loc_5C11:                               ; CODE XREF: fopen_safer+12↑j
.text:0000000000005C11                                         ; fopen_safer+5B↓j ...
.text:0000000000005C11                 mov     rax, rbx
.text:0000000000005C14                 pop     rbx
.text:0000000000005C15                 pop     rbp
.text:0000000000005C16                 pop     r12
.text:0000000000005C18                 retn
.text:0000000000005C18 ; ---------------------------------------------------------------------------
.text:0000000000005C19                 align 20h
.text:0000000000005C20
.text:0000000000005C20 loc_5C20:                               ; CODE XREF: fopen_safer+1F↑j
.text:0000000000005C20                 mov     edi, eax
.text:0000000000005C22                 call    dup_safer
.text:0000000000005C27                 test    eax, eax
.text:0000000000005C29                 mov     r12d, eax
.text:0000000000005C2C                 js      short loc_5C68
.text:0000000000005C2E                 mov     rdi, rbx        ; stream
.text:0000000000005C31                 call    rpl_fclose
.text:0000000000005C36                 test    eax, eax
.text:0000000000005C38                 jnz     short loc_5C4D
.text:0000000000005C3A                 mov     rsi, rbp        ; modes
.text:0000000000005C3D                 mov     edi, r12d       ; fd
.text:0000000000005C40                 call    _fdopen
.text:0000000000005C45                 test    rax, rax
.text:0000000000005C48                 mov     rbx, rax
.text:0000000000005C4B                 jnz     short loc_5C11
.text:0000000000005C4D
.text:0000000000005C4D loc_5C4D:                               ; CODE XREF: fopen_safer+48↑j
.text:0000000000005C4D                 call    ___errno_location
.text:0000000000005C52                 mov     ebp, [rax]
.text:0000000000005C54                 mov     rbx, rax
.text:0000000000005C57                 mov     edi, r12d       ; fd
.text:0000000000005C5A                 call    _close
.text:0000000000005C5F                 mov     [rbx], ebp
.text:0000000000005C61                 xor     ebx, ebx
.text:0000000000005C63                 jmp     short loc_5C11
.text:0000000000005C63 ; ---------------------------------------------------------------------------
.text:0000000000005C65                 align 8
.text:0000000000005C68
.text:0000000000005C68 loc_5C68:                               ; CODE XREF: fopen_safer+3C↑j
.text:0000000000005C68                 call    ___errno_location
.text:0000000000005C6D                 mov     r12d, [rax]
.text:0000000000005C70                 mov     rbp, rax
.text:0000000000005C73                 mov     rdi, rbx        ; stream
.text:0000000000005C76                 call    rpl_fclose
.text:0000000000005C7B                 xor     ebx, ebx
.text:0000000000005C7D                 mov     [rbp+0], r12d
.text:0000000000005C81                 jmp     short loc_5C11
.text:0000000000005C81 ; } // starts at 5BF0
.text:0000000000005C81 fopen_safer     endp
.text:0000000000005C81
.text:0000000000005C81 ; ---------------------------------------------------------------------------
.text:0000000000005C83                 align 10h
.text:0000000000005C90
.text:0000000000005C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005C90
.text:0000000000005C90
.text:0000000000005C90                 public set_program_name
.text:0000000000005C90 set_program_name proc near              ; CODE XREF: main+3C↑p
.text:0000000000005C90 ; __unwind {
.text:0000000000005C90                 test    rdi, rdi
.text:0000000000005C93                 push    rbx
.text:0000000000005C94                 jz      short loc_5D0D
.text:0000000000005C96                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000005C9B                 mov     rbx, rdi
.text:0000000000005C9E                 call    _strrchr
.text:0000000000005CA3                 test    rax, rax
.text:0000000000005CA6                 jz      short loc_5CFD
.text:0000000000005CA8                 lea     r8, [rax+1]
.text:0000000000005CAC                 mov     rdx, r8
.text:0000000000005CAF                 sub     rdx, rbx
.text:0000000000005CB2                 cmp     rdx, 6
.text:0000000000005CB6                 jle     short loc_5CFD
.text:0000000000005CB8                 lea     rsi, [rax-6]
.text:0000000000005CBC                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000005CC3                 mov     ecx, 7
.text:0000000000005CC8                 repe cmpsb
.text:0000000000005CCA                 setnbe  dl
.text:0000000000005CCD                 sbb     dl, 0
.text:0000000000005CD0                 test    dl, dl
.text:0000000000005CD2                 jnz     short loc_5CFD
.text:0000000000005CD4                 lea     rdi, aLt        ; "lt-"
.text:0000000000005CDB                 mov     ecx, 3
.text:0000000000005CE0                 mov     rsi, r8
.text:0000000000005CE3                 mov     rbx, r8
.text:0000000000005CE6                 repe cmpsb
.text:0000000000005CE8                 setnbe  dl
.text:0000000000005CEB                 sbb     dl, 0
.text:0000000000005CEE                 test    dl, dl
.text:0000000000005CF0                 jnz     short loc_5CFD
.text:0000000000005CF2                 lea     rbx, [rax+4]
.text:0000000000005CF6                 mov     cs:__bss_start, rbx
.text:0000000000005CFD
.text:0000000000005CFD loc_5CFD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000005CFD                                         ; set_program_name+26↑j ...
.text:0000000000005CFD                 mov     cs:program_name, rbx
.text:0000000000005D04                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000005D0B                 pop     rbx
.text:0000000000005D0C                 retn
.text:0000000000005D0D ; ---------------------------------------------------------------------------
.text:0000000000005D0D
.text:0000000000005D0D loc_5D0D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000005D0D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000005D14                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000005D1B                 mov     edx, 37h ; '7'  ; n
.text:0000000000005D20                 mov     esi, 1          ; size
.text:0000000000005D25                 call    _fwrite
.text:0000000000005D2A                 call    _abort
.text:0000000000005D2A ; } // starts at 5C90
.text:0000000000005D2A set_program_name endp
.text:0000000000005D2A
.text:0000000000005D2A ; ---------------------------------------------------------------------------
.text:0000000000005D2F                 align 10h
.text:0000000000005D30
.text:0000000000005D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D30
.text:0000000000005D30 ; Attributes: info_from_lumina
.text:0000000000005D30
.text:0000000000005D30 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000005D30 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000005D30                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000005D30 ; __unwind {
.text:0000000000005D30                 push    rbp
.text:0000000000005D31                 push    rbx
.text:0000000000005D32                 mov     rbp, rdi
.text:0000000000005D35                 mov     ebx, esi
.text:0000000000005D37                 sub     rsp, 8
.text:0000000000005D3B                 call    locale_charset
.text:0000000000005D40                 movzx   edx, byte ptr [rax]
.text:0000000000005D43                 and     edx, 0FFFFFFDFh
.text:0000000000005D46                 cmp     dl, 55h ; 'U'
.text:0000000000005D49                 jz      short loc_5DC0
.text:0000000000005D4B                 cmp     dl, 47h ; 'G'
.text:0000000000005D4E                 jz      short loc_5D70
.text:0000000000005D50
.text:0000000000005D50 loc_5D50:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000005D50                                         ; gettext_quote+50↓j ...
.text:0000000000005D50                 lea     rax, unk_9F7B
.text:0000000000005D57                 lea     rdx, asc_9F7D   ; "'"
.text:0000000000005D5E                 cmp     ebx, 9
.text:0000000000005D61                 cmovnz  rax, rdx
.text:0000000000005D65                 add     rsp, 8
.text:0000000000005D69                 pop     rbx
.text:0000000000005D6A                 pop     rbp
.text:0000000000005D6B                 retn
.text:0000000000005D6B ; ---------------------------------------------------------------------------
.text:0000000000005D6C                 align 10h
.text:0000000000005D70
.text:0000000000005D70 loc_5D70:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000005D70                 movzx   edx, byte ptr [rax+1]
.text:0000000000005D74                 and     edx, 0FFFFFFDFh
.text:0000000000005D77                 cmp     dl, 42h ; 'B'
.text:0000000000005D7A                 jnz     short loc_5D50
.text:0000000000005D7C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000005D80                 jnz     short loc_5D50
.text:0000000000005D82                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000005D86                 jnz     short loc_5D50
.text:0000000000005D88                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000005D8C                 jnz     short loc_5D50
.text:0000000000005D8E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000005D92                 jnz     short loc_5D50
.text:0000000000005D94                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000005D98                 jnz     short loc_5D50
.text:0000000000005D9A                 cmp     byte ptr [rax+7], 0
.text:0000000000005D9E                 jnz     short loc_5D50
.text:0000000000005DA0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005DA4                 lea     rax, unk_9F74
.text:0000000000005DAB                 lea     rdx, unk_9F78
.text:0000000000005DB2                 cmovnz  rax, rdx
.text:0000000000005DB6                 add     rsp, 8
.text:0000000000005DBA                 pop     rbx
.text:0000000000005DBB                 pop     rbp
.text:0000000000005DBC                 retn
.text:0000000000005DBC ; ---------------------------------------------------------------------------
.text:0000000000005DBD                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 loc_5DC0:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000005DC0                 movzx   edx, byte ptr [rax+1]
.text:0000000000005DC4                 and     edx, 0FFFFFFDFh
.text:0000000000005DC7                 cmp     dl, 54h ; 'T'
.text:0000000000005DCA                 jnz     short loc_5D50
.text:0000000000005DCC                 movzx   edx, byte ptr [rax+2]
.text:0000000000005DD0                 and     edx, 0FFFFFFDFh
.text:0000000000005DD3                 cmp     dl, 46h ; 'F'
.text:0000000000005DD6                 jnz     loc_5D50
.text:0000000000005DDC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000005DE0                 jnz     loc_5D50
.text:0000000000005DE6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000005DEA                 jnz     loc_5D50
.text:0000000000005DF0                 cmp     byte ptr [rax+5], 0
.text:0000000000005DF4                 jnz     loc_5D50
.text:0000000000005DFA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000005DFE                 lea     rax, unk_9F6C
.text:0000000000005E05                 lea     rdx, unk_9F70
.text:0000000000005E0C                 cmovnz  rax, rdx
.text:0000000000005E10                 add     rsp, 8
.text:0000000000005E14                 pop     rbx
.text:0000000000005E15                 pop     rbp
.text:0000000000005E16                 retn
.text:0000000000005E16 ; } // starts at 5D30
.text:0000000000005E16 gettext_quote   endp
.text:0000000000005E16
.text:0000000000005E16 ; ---------------------------------------------------------------------------
.text:0000000000005E17                 align 20h
.text:0000000000005E20
.text:0000000000005E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E20
.text:0000000000005E20 ; Attributes: info_from_lumina
.text:0000000000005E20
.text:0000000000005E20 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000005E20 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000005E20                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000005E20
.text:0000000000005E20 var_E0          = dword ptr -0E0h
.text:0000000000005E20 var_DB          = byte ptr -0DBh
.text:0000000000005E20 var_DA          = byte ptr -0DAh
.text:0000000000005E20 var_D9          = byte ptr -0D9h
.text:0000000000005E20 s               = qword ptr -0D8h
.text:0000000000005E20 n               = qword ptr -0D0h
.text:0000000000005E20 var_C8          = qword ptr -0C8h
.text:0000000000005E20 ps              = qword ptr -0C0h
.text:0000000000005E20 var_B8          = qword ptr -0B8h
.text:0000000000005E20 var_B0          = qword ptr -0B0h
.text:0000000000005E20 var_A8          = qword ptr -0A8h
.text:0000000000005E20 s2              = qword ptr -0A0h
.text:0000000000005E20 var_98          = qword ptr -98h
.text:0000000000005E20 var_90          = qword ptr -90h
.text:0000000000005E20 var_88          = qword ptr -88h
.text:0000000000005E20 var_80          = qword ptr -80h
.text:0000000000005E20 var_78          = qword ptr -78h
.text:0000000000005E20 var_70          = dword ptr -70h
.text:0000000000005E20 var_6C          = byte ptr -6Ch
.text:0000000000005E20 var_6B          = byte ptr -6Bh
.text:0000000000005E20 var_6A          = byte ptr -6Ah
.text:0000000000005E20 var_69          = byte ptr -69h
.text:0000000000005E20 var_68          = qword ptr -68h
.text:0000000000005E20 var_60          = qword ptr -60h
.text:0000000000005E20 wc              = dword ptr -4Ch
.text:0000000000005E20 var_48          = qword ptr -48h
.text:0000000000005E20 var_40          = qword ptr -40h
.text:0000000000005E20 arg_0           = qword ptr  8
.text:0000000000005E20 arg_8           = qword ptr  10h
.text:0000000000005E20 arg_10          = qword ptr  18h
.text:0000000000005E20
.text:0000000000005E20 ; __unwind {
.text:0000000000005E20                 push    r15
.text:0000000000005E22                 push    r14
.text:0000000000005E24                 mov     r15d, r8d
.text:0000000000005E27                 push    r13
.text:0000000000005E29                 push    r12
.text:0000000000005E2B                 mov     r14, rdi
.text:0000000000005E2E                 push    rbp
.text:0000000000005E2F                 push    rbx
.text:0000000000005E30                 mov     ebx, r9d
.text:0000000000005E33                 mov     r13, rsi
.text:0000000000005E36                 mov     rbp, rcx
.text:0000000000005E39                 and     ebx, 2
.text:0000000000005E3C                 sub     rsp, 0B8h
.text:0000000000005E43                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000005E4B                 mov     [rsp+0E8h+s], rdx
.text:0000000000005E50                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000005E55                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000005E5A                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000005E5F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000005E67                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005E6C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000005E74                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005E79                 mov     rax, fs:28h
.text:0000000000005E82                 mov     [rsp+0E8h+var_40], rax
.text:0000000000005E8A                 xor     eax, eax
.text:0000000000005E8C                 call    ___ctype_get_mb_cur_max
.text:0000000000005E91                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000005E95                 mov     [rsp+0E8h+var_90], rax
.text:0000000000005E9A                 ja      def_5EB1        ; jumptable 00000000000121F1 default case
.text:0000000000005EA0                 lea     rcx, jpt_5EB1
.text:0000000000005EA7                 mov     edx, r15d
.text:0000000000005EAA                 movsxd  rax, ds:(jpt_5EB1 - 9FE0h)[rcx+rdx*4]
.text:0000000000005EAE                 add     rax, rcx
.text:0000000000005EB1                 jmp     rax             ; switch jump
.text:0000000000005EB3 ; ---------------------------------------------------------------------------
.text:0000000000005EB3
.text:0000000000005EB3 loc_5EB3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005EB3                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000005EB3                                         ; DATA XREF: ...
.text:0000000000005EB3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000005EB8                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005EBD                 xor     r12d, r12d
.text:0000000000005EC0                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005EC9                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005ECE                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005ED3
.text:0000000000005ED3 loc_5ED3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000005ED3                 lea     rax, asc_9F7D   ; "'"
.text:0000000000005EDA                 mov     [rsp+0E8h+n], 1
.text:0000000000005EE3                 xor     r15d, r15d
.text:0000000000005EE6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005EEE                 mov     [rsp+0E8h+s2], rax
.text:0000000000005EF3
.text:0000000000005EF3 loc_5EF3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000005EF3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000005EF3                 xor     r11d, r11d
.text:0000000000005EF6                 mov     rax, rbp
.text:0000000000005EF9                 mov     r8d, r12d
.text:0000000000005EFC                 mov     rbp, r11
.text:0000000000005EFF                 mov     r11, rax
.text:0000000000005F02                 nop     word ptr [rax+rax+00h]
.text:0000000000005F08
.text:0000000000005F08 loc_5F08:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000005F08                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000005F08                 cmp     r11, rbp
.text:0000000000005F0B                 setnz   r12b
.text:0000000000005F0F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F13                 jnz     short loc_5F22
.text:0000000000005F15                 mov     rax, [rsp+0E8h+s]
.text:0000000000005F1A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000005F1E                 setnz   r12b
.text:0000000000005F22
.text:0000000000005F22 loc_5F22:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000005F22                 test    r12b, r12b
.text:0000000000005F25                 jz      loc_6580
.text:0000000000005F2B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005F30                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000005F35                 lea     r9, [rdi+rbp]
.text:0000000000005F39                 setnz   al
.text:0000000000005F3C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000005F40                 mov     r10d, eax
.text:0000000000005F43                 jz      loc_5FF0
.text:0000000000005F49                 mov     rax, [rsp+0E8h+n]
.text:0000000000005F4E                 test    rax, rax
.text:0000000000005F51                 jz      loc_6380
.text:0000000000005F57                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000005F5B                 lea     rbx, [rbp+rax+0]
.text:0000000000005F60                 jnz     short loc_5F90
.text:0000000000005F62                 cmp     rax, 1
.text:0000000000005F66                 jbe     short loc_5F90
.text:0000000000005F68                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005F6D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000005F72                 mov     [rsp+0E8h+ps], r9
.text:0000000000005F77                 call    _strlen
.text:0000000000005F7C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005F82                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000005F88                 mov     r11, rax
.text:0000000000005F8B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000005F90
.text:0000000000005F90 loc_5F90:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000005F90                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000005F90                 cmp     rbx, r11
.text:0000000000005F93                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000005F98                 ja      loc_6550
.text:0000000000005F9E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000005FA3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000005FA8                 mov     rdi, r9         ; s1
.text:0000000000005FAB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000005FB0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000005FB5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000005FBA                 call    _memcmp
.text:0000000000005FBF                 test    eax, eax
.text:0000000000005FC1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005FC6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000005FCC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000005FD1                 jnz     loc_6550
.text:0000000000005FD7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005FDC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000005FE2                 jnz     loc_6F65
.text:0000000000005FE8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005FF0
.text:0000000000005FF0 loc_5FF0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000005FF0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000005FF0                 movzx   ebx, byte ptr [r9]
.text:0000000000005FF4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000005FF7                 ja      def_600E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000005FFD                 lea     rcx, jpt_600E
.text:0000000000006004                 movzx   edx, bl
.text:0000000000006007                 movsxd  rax, ds:(jpt_600E - 0A00Ch)[rcx+rdx*4]
.text:000000000000600B                 add     rax, rcx
.text:000000000000600E                 jmp     rax             ; switch jump
.text:0000000000006010 ; ---------------------------------------------------------------------------
.text:0000000000006010
.text:0000000000006010 loc_6010:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000006010                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:0000000000006010                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000006013
.text:0000000000006013 loc_6013:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006013                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006013                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000006017                 setnz   al
.text:000000000000601A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000601E                 jnz     short loc_602C
.text:0000000000006020                 mov     rax, [rsp+0E8h+s]
.text:0000000000006025                 cmp     byte ptr [rax+1], 0
.text:0000000000006029                 setnz   al
.text:000000000000602C
.text:000000000000602C loc_602C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000602C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006031                 setz    dl
.text:0000000000006034                 test    al, al
.text:0000000000006036                 jz      loc_6288
.text:000000000000603C
.text:000000000000603C loc_603C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000603C                 xor     r12d, r12d
.text:000000000000603F                 xor     eax, eax
.text:0000000000006041                 nop     dword ptr [rax+00000000h]
.text:0000000000006048
.text:0000000000006048 loc_6048:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000006048                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000006048                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000604D                 jnz     loc_6162
.text:0000000000006053                 test    dl, dl
.text:0000000000006055                 jnz     loc_6162
.text:000000000000605B
.text:000000000000605B loc_605B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000605B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000006060                 test    rsi, rsi
.text:0000000000006063                 jz      short loc_6079
.text:0000000000006065                 mov     edx, ebx
.text:0000000000006067                 shr     dl, 5
.text:000000000000606A                 movzx   edx, dl
.text:000000000000606D                 mov     edx, [rsi+rdx*4]
.text:0000000000006070                 bt      edx, ebx
.text:0000000000006073                 jb      loc_61C3
.text:0000000000006079
.text:0000000000006079 loc_6079:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000006079                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000006079                 test    r10b, r10b
.text:000000000000607C                 jnz     loc_61C3
.text:0000000000006082                 xor     eax, 1
.text:0000000000006085                 add     rbp, 1
.text:0000000000006089                 and     eax, r8d
.text:000000000000608C
.text:000000000000608C loc_608C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000608C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000608C                 test    al, al
.text:000000000000608E                 jz      short loc_60B0
.text:0000000000006090                 cmp     r13, r15
.text:0000000000006093                 jbe     short loc_609A
.text:0000000000006095                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000609A
.text:000000000000609A loc_609A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000609A                 lea     rax, [r15+1]
.text:000000000000609E                 cmp     r13, rax
.text:00000000000060A1                 jbe     short loc_60A9
.text:00000000000060A3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000060A9
.text:00000000000060A9 loc_60A9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000060A9                 add     r15, 2
.text:00000000000060AD                 xor     r8d, r8d
.text:00000000000060B0
.text:00000000000060B0 loc_60B0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000060B0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000060B0                 cmp     r15, r13
.text:00000000000060B3                 jnb     short loc_60B9
.text:00000000000060B5                 mov     [r14+r15], bl
.text:00000000000060B9
.text:00000000000060B9 loc_60B9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000060B9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000060BE                 add     r15, 1
.text:00000000000060C2                 mov     eax, 0
.text:00000000000060C7                 test    r12b, r12b
.text:00000000000060CA                 cmovz   edi, eax
.text:00000000000060CD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000060D2                 jmp     loc_5F08
.text:00000000000060D2 ; ---------------------------------------------------------------------------
.text:00000000000060D7                 align 20h
.text:00000000000060E0
.text:00000000000060E0 loc_60E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000060E0                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000060E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000060E3
.text:00000000000060E3 loc_60E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000060E3                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:00000000000060E3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000060E7                 cmp     eax, 2
.text:00000000000060EA                 jz      loc_66A8
.text:00000000000060F0                 cmp     eax, 5
.text:00000000000060F3                 jz      loc_6668
.text:00000000000060F9                 cmp     eax, 2
.text:00000000000060FC                 mov     ebx, 3Fh ; '?'
.text:0000000000006101                 setz    dl
.text:0000000000006104                 xor     r12d, r12d
.text:0000000000006107                 xor     eax, eax
.text:0000000000006109                 jmp     loc_6048
.text:0000000000006109 ; ---------------------------------------------------------------------------
.text:000000000000610E                 align 10h
.text:0000000000006110
.text:0000000000006110 loc_6110:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000006110                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:0000000000006110                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000006113
.text:0000000000006113 loc_6113:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006113                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006113                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000006118                 jz      loc_6620
.text:000000000000611E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000006123                 xor     edx, edx
.text:0000000000006125                 xor     eax, eax
.text:0000000000006127                 mov     ebx, 27h ; '''
.text:000000000000612C                 jmp     loc_6048
.text:000000000000612C ; ---------------------------------------------------------------------------
.text:0000000000006131                 align 8
.text:0000000000006138
.text:0000000000006138 loc_6138:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006138                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006138                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000613D                 mov     ebx, 74h ; 't'
.text:0000000000006142
.text:0000000000006142 loc_6142:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000006142                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000006142                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006147                 setz    al
.text:000000000000614A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000614E                 jnz     loc_629E
.text:0000000000006154
.text:0000000000006154 loc_6154:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000006154                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000006154                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006159                 jnz     short loc_61C0
.text:000000000000615B
.text:000000000000615B loc_615B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000615B                 mov     ebx, edx
.text:000000000000615D                 xor     r12d, r12d
.text:0000000000006160                 xor     eax, eax
.text:0000000000006162
.text:0000000000006162 loc_6162:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000006162                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000006162                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006167                 jnz     loc_605B
.text:000000000000616D                 jmp     loc_6079
.text:000000000000616D ; ---------------------------------------------------------------------------
.text:0000000000006172                 align 8
.text:0000000000006178
.text:0000000000006178 loc_6178:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006178                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006178                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000617D                 mov     ebx, 62h ; 'b'
.text:0000000000006182                 jmp     short loc_6154
.text:0000000000006182 ; ---------------------------------------------------------------------------
.text:0000000000006184                 align 8
.text:0000000000006188
.text:0000000000006188 loc_6188:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006188                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006188                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000618D                 jz      loc_6560
.text:0000000000006193                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000006198                 jz      loc_63B0
.text:000000000000619E
.text:000000000000619E loc_619E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000619E                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000061A3                 jz      loc_63B0
.text:00000000000061A9                 cmp     [rsp+0E8h+n], 0
.text:00000000000061AF                 jnz     loc_656B
.text:00000000000061B5                 mov     ebx, 5Ch ; '\'
.text:00000000000061BA                 nop     word ptr [rax+rax+00h]
.text:00000000000061C0
.text:00000000000061C0 loc_61C0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000061C0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000061C0                 xor     r12d, r12d
.text:00000000000061C3
.text:00000000000061C3 loc_61C3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000061C3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000061C3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000061C8                 setz    dl
.text:00000000000061CB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000061D0                 mov     eax, edx
.text:00000000000061D2                 jnz     loc_6A28
.text:00000000000061D8                 mov     eax, r8d
.text:00000000000061DB                 xor     eax, 1
.text:00000000000061DE                 and     al, dl
.text:00000000000061E0                 jz      short loc_6211
.text:00000000000061E2                 cmp     r13, r15
.text:00000000000061E5                 jbe     short loc_61EC
.text:00000000000061E7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000061EC
.text:00000000000061EC loc_61EC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000061EC                 lea     rdx, [r15+1]
.text:00000000000061F0                 cmp     r13, rdx
.text:00000000000061F3                 jbe     short loc_61FB
.text:00000000000061F5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000061FB
.text:00000000000061FB loc_61FB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000061FB                 lea     rdx, [r15+2]
.text:00000000000061FF                 cmp     r13, rdx
.text:0000000000006202                 jbe     short loc_620A
.text:0000000000006204                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000620A
.text:000000000000620A loc_620A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000620A                 add     r15, 3
.text:000000000000620E                 mov     r8d, eax
.text:0000000000006211
.text:0000000000006211 loc_6211:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000006211                 cmp     r13, r15
.text:0000000000006214                 jbe     short loc_621B
.text:0000000000006216                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000621B
.text:000000000000621B loc_621B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000621B                 add     r15, 1
.text:000000000000621F                 add     rbp, 1
.text:0000000000006223                 jmp     loc_60B0
.text:0000000000006223 ; ---------------------------------------------------------------------------
.text:0000000000006228                 align 10h
.text:0000000000006230
.text:0000000000006230 loc_6230:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006230                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006230                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000006235                 jnz     loc_6403
.text:000000000000623B                 xor     edx, edx
.text:000000000000623D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000006242                 jz      loc_615B
.text:0000000000006248                 add     rbp, 1
.text:000000000000624C                 jmp     loc_5F08
.text:000000000000624C ; ---------------------------------------------------------------------------
.text:0000000000006251                 align 8
.text:0000000000006258
.text:0000000000006258 loc_6258:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006258                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006258                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000625D                 setz    dl
.text:0000000000006260                 xor     eax, eax
.text:0000000000006262                 jmp     loc_6048
.text:0000000000006262 ; ---------------------------------------------------------------------------
.text:0000000000006267                 align 10h
.text:0000000000006270
.text:0000000000006270 loc_6270:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006270                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006270                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000006275                 mov     ebx, 61h ; 'a'
.text:000000000000627A                 jmp     loc_6154
.text:000000000000627A ; ---------------------------------------------------------------------------
.text:000000000000627F                 align 20h
.text:0000000000006280
.text:0000000000006280 loc_6280:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006280                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006280                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000006285                 setz    dl
.text:0000000000006288
.text:0000000000006288 loc_6288:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000006288                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000006288                 test    rbp, rbp
.text:000000000000628B                 jnz     loc_603C
.text:0000000000006291
.text:0000000000006291 loc_6291:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000006291                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000006291                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006296                 and     al, dl
.text:0000000000006298                 jz      loc_6048
.text:000000000000629E
.text:000000000000629E loc_629E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000629E                 mov     rbp, r11
.text:00000000000062A1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000062A9                 jmp     loc_69A9
.text:00000000000062A9 ; ---------------------------------------------------------------------------
.text:00000000000062AE                 align 10h
.text:00000000000062B0
.text:00000000000062B0 loc_62B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000062B0                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:00000000000062B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000062B5                 setz    dl
.text:00000000000062B8                 xor     r12d, r12d
.text:00000000000062BB                 jmp     short loc_6291
.text:00000000000062BB ; ---------------------------------------------------------------------------
.text:00000000000062BD                 align 20h
.text:00000000000062C0
.text:00000000000062C0 loc_62C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000062C0                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:00000000000062C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000062C5                 mov     ebx, 20h ; ' '
.text:00000000000062CA                 setz    dl
.text:00000000000062CD                 jmp     short loc_6291
.text:00000000000062CD ; ---------------------------------------------------------------------------
.text:00000000000062CF                 align 10h
.text:00000000000062D0
.text:00000000000062D0 loc_62D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000062D0                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:00000000000062D0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000062D5                 mov     ebx, 72h ; 'r'
.text:00000000000062DA                 jmp     loc_6142
.text:00000000000062DA ; ---------------------------------------------------------------------------
.text:00000000000062DF                 align 20h
.text:00000000000062E0
.text:00000000000062E0 loc_62E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000062E0                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:00000000000062E0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000062E5                 mov     ebx, 66h ; 'f'
.text:00000000000062EA                 jmp     loc_6154
.text:00000000000062EA ; ---------------------------------------------------------------------------
.text:00000000000062EF                 align 10h
.text:00000000000062F0
.text:00000000000062F0 loc_62F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000062F0                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:00000000000062F0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000062F5                 mov     ebx, 76h ; 'v'
.text:00000000000062FA                 jmp     loc_6154
.text:00000000000062FA ; ---------------------------------------------------------------------------
.text:00000000000062FF                 align 20h
.text:0000000000006300
.text:0000000000006300 loc_6300:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000006300                                         ; DATA XREF: .rodata:jpt_600E↓o
.text:0000000000006300                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000006305                 mov     ebx, 6Eh ; 'n'
.text:000000000000630A                 jmp     loc_6142
.text:000000000000630A ; ---------------------------------------------------------------------------
.text:000000000000630F                 align 10h
.text:0000000000006310
.text:0000000000006310 def_639A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000006310                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000006310                                         ; DATA XREF: ...
.text:0000000000006310                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000006313                 nop     dword ptr [rax+rax+00h]
.text:0000000000006318
.text:0000000000006318 def_600E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000006318                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000006318                                         ; DATA XREF: ...
.text:0000000000006318                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000631E                 jnz     loc_66C8
.text:0000000000006324                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000006329                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000632E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000006333                 call    ___ctype_b_loc
.text:0000000000006338                 mov     rcx, [rax]
.text:000000000000633B                 movzx   edx, bl
.text:000000000000633E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000006344                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000634A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000634F                 mov     edi, 1
.text:0000000000006354                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000006358                 and     ax, 4000h
.text:000000000000635C                 setnz   r12b
.text:0000000000006360                 setz    al
.text:0000000000006363                 and     al, [rsp+0E8h+var_DB]
.text:0000000000006367
.text:0000000000006367 loc_6367:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000006367                 test    al, al
.text:0000000000006369                 jnz     loc_6D01
.text:000000000000636F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006374                 setz    dl
.text:0000000000006377                 jmp     loc_6048
.text:0000000000006377 ; ---------------------------------------------------------------------------
.text:000000000000637C                 align 20h
.text:0000000000006380
.text:0000000000006380 loc_6380:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000006380                 movzx   ebx, byte ptr [r9]
.text:0000000000006384                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000006387                 ja      short def_639A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000006389                 lea     rcx, jpt_639A
.text:0000000000006390                 movzx   edx, bl
.text:0000000000006393                 movsxd  rax, ds:(jpt_639A - 0A208h)[rcx+rdx*4]
.text:0000000000006397                 add     rax, rcx
.text:000000000000639A                 jmp     rax             ; switch jump
.text:000000000000639A ; ---------------------------------------------------------------------------
.text:000000000000639C                 align 20h
.text:00000000000063A0
.text:00000000000063A0 loc_63A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000063A0                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000063A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000063A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000063A8                 jnz     loc_619E
.text:00000000000063AE                 xchg    ax, ax
.text:00000000000063B0
.text:00000000000063B0 loc_63B0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000063B0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000063B0                 mov     edx, 5Ch ; '\'
.text:00000000000063B5                 mov     ebx, 5Ch ; '\'
.text:00000000000063BA                 jmp     loc_6154
.text:00000000000063BA ; ---------------------------------------------------------------------------
.text:00000000000063BF                 align 20h
.text:00000000000063C0
.text:00000000000063C0 loc_63C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000063C0                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000063C0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000063C5                 xor     r10d, r10d
.text:00000000000063C8                 mov     ebx, 66h ; 'f'
.text:00000000000063CD                 jmp     loc_6154
.text:00000000000063CD ; ---------------------------------------------------------------------------
.text:00000000000063D2                 align 8
.text:00000000000063D8
.text:00000000000063D8 loc_63D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000063D8                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000063D8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000063DD                 xor     r10d, r10d
.text:00000000000063E0                 mov     ebx, 6Eh ; 'n'
.text:00000000000063E5                 jmp     loc_6142
.text:00000000000063E5 ; ---------------------------------------------------------------------------
.text:00000000000063EA                 align 10h
.text:00000000000063F0
.text:00000000000063F0 loc_63F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000063F0                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000063F0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000063F5                 jmp     loc_61C0
.text:00000000000063F5 ; ---------------------------------------------------------------------------
.text:00000000000063FA                 align 20h
.text:0000000000006400
.text:0000000000006400 loc_6400:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006400                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:0000000000006400                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000006403
.text:0000000000006403 loc_6403:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000006403                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006408                 setz    dl
.text:000000000000640B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006410                 jnz     loc_6FAA
.text:0000000000006416                 mov     eax, r8d
.text:0000000000006419                 mov     rcx, r15
.text:000000000000641C                 xor     eax, 1
.text:000000000000641F                 and     al, dl
.text:0000000000006421                 jz      short loc_6450
.text:0000000000006423                 cmp     r13, r15
.text:0000000000006426                 jbe     short loc_642D
.text:0000000000006428                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000642D
.text:000000000000642D loc_642D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000642D                 lea     rcx, [r15+1]
.text:0000000000006431                 cmp     r13, rcx
.text:0000000000006434                 jbe     short loc_643C
.text:0000000000006436                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000643C
.text:000000000000643C loc_643C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000643C                 lea     rcx, [r15+2]
.text:0000000000006440                 cmp     r13, rcx
.text:0000000000006443                 ja      loc_6A79
.text:0000000000006449
.text:0000000000006449 loc_6449:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000006449                 lea     rcx, [r15+3]
.text:000000000000644D                 mov     r8d, eax
.text:0000000000006450
.text:0000000000006450 loc_6450:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000006450                 cmp     r13, rcx
.text:0000000000006453                 jbe     short loc_645A
.text:0000000000006455                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000645A
.text:000000000000645A loc_645A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000645A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000645F                 lea     r15, [rcx+1]
.text:0000000000006463                 jz      loc_6A69
.text:0000000000006469                 lea     rax, [rbp+1]
.text:000000000000646D                 cmp     rax, r11
.text:0000000000006470                 jnb     short loc_648B
.text:0000000000006472                 mov     rax, [rsp+0E8h+s]
.text:0000000000006477                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000647C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000006480                 sub     eax, 30h ; '0'
.text:0000000000006483                 cmp     al, 9
.text:0000000000006485                 jbe     loc_6CB9
.text:000000000000648B
.text:000000000000648B loc_648B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000648B                 mov     eax, r12d
.text:000000000000648E                 mov     ebx, 30h ; '0'
.text:0000000000006493                 xor     r12d, r12d
.text:0000000000006496                 jmp     loc_6048
.text:0000000000006496 ; ---------------------------------------------------------------------------
.text:000000000000649B                 align 20h
.text:00000000000064A0
.text:00000000000064A0 loc_64A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000064A0                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000064A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000064A5                 mov     r12d, r10d
.text:00000000000064A8                 setz    dl
.text:00000000000064AB                 xor     r10d, r10d
.text:00000000000064AE                 xor     eax, eax
.text:00000000000064B0                 jmp     loc_6048
.text:00000000000064B0 ; ---------------------------------------------------------------------------
.text:00000000000064B5                 align 8
.text:00000000000064B8
.text:00000000000064B8 loc_64B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000064B8                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000064B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000064BD                 setz    dl
.text:00000000000064C0                 xor     r10d, r10d
.text:00000000000064C3                 jmp     loc_6288
.text:00000000000064C3 ; ---------------------------------------------------------------------------
.text:00000000000064C8                 align 10h
.text:00000000000064D0
.text:00000000000064D0 loc_64D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000064D0                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000064D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000064D5                 setz    dl
.text:00000000000064D8                 xor     r10d, r10d
.text:00000000000064DB                 xor     r12d, r12d
.text:00000000000064DE                 jmp     loc_6291
.text:00000000000064DE ; ---------------------------------------------------------------------------
.text:00000000000064E3                 align 8
.text:00000000000064E8
.text:00000000000064E8 loc_64E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000064E8                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:00000000000064E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000064ED                 mov     r12d, r10d
.text:00000000000064F0                 mov     ebx, 20h ; ' '
.text:00000000000064F5                 setz    dl
.text:00000000000064F8                 xor     r10d, r10d
.text:00000000000064FB                 jmp     loc_6291
.text:0000000000006500 ; ---------------------------------------------------------------------------
.text:0000000000006500
.text:0000000000006500 loc_6500:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006500                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:0000000000006500                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000006505                 xor     r10d, r10d
.text:0000000000006508                 mov     ebx, 72h ; 'r'
.text:000000000000650D                 jmp     loc_6142
.text:000000000000650D ; ---------------------------------------------------------------------------
.text:0000000000006512                 align 8
.text:0000000000006518
.text:0000000000006518 loc_6518:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006518                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:0000000000006518                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000651D                 jmp     loc_61C0
.text:000000000000651D ; ---------------------------------------------------------------------------
.text:0000000000006522                 align 8
.text:0000000000006528
.text:0000000000006528 loc_6528:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006528                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:0000000000006528                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000652D                 xor     r10d, r10d
.text:0000000000006530                 mov     ebx, 74h ; 't'
.text:0000000000006535                 jmp     loc_6142
.text:0000000000006535 ; ---------------------------------------------------------------------------
.text:000000000000653A                 align 20h
.text:0000000000006540
.text:0000000000006540 loc_6540:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000006540                                         ; DATA XREF: .rodata:jpt_639A↓o
.text:0000000000006540                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000006545                 jmp     loc_61C0
.text:0000000000006545 ; ---------------------------------------------------------------------------
.text:000000000000654A                 align 10h
.text:0000000000006550
.text:0000000000006550 loc_6550:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000006550                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000006550                 xor     r10d, r10d
.text:0000000000006553                 jmp     loc_5FF0
.text:0000000000006553 ; ---------------------------------------------------------------------------
.text:0000000000006558                 align 20h
.text:0000000000006560
.text:0000000000006560 loc_6560:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000006560                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006565                 jnz     loc_6ED0
.text:000000000000656B
.text:000000000000656B loc_656B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000656B                 add     rbp, 1
.text:000000000000656F                 mov     eax, r8d
.text:0000000000006572                 xor     r12d, r12d
.text:0000000000006575                 mov     ebx, 5Ch ; '\'
.text:000000000000657A                 jmp     loc_608C
.text:000000000000657A ; ---------------------------------------------------------------------------
.text:000000000000657F                 align 20h
.text:0000000000006580
.text:0000000000006580 loc_6580:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000006580                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006585                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000658A                 mov     r12d, r8d
.text:000000000000658D                 mov     rbp, r11
.text:0000000000006590                 setz    dl
.text:0000000000006593                 mov     eax, ebx
.text:0000000000006595                 test    r15, r15
.text:0000000000006598                 setz    cl
.text:000000000000659B                 and     eax, edx
.text:000000000000659D                 and     al, cl
.text:000000000000659F                 jnz     loc_7006
.text:00000000000065A5                 mov     eax, ebx
.text:00000000000065A7                 xor     eax, 1
.text:00000000000065AA                 and     dl, al
.text:00000000000065AC                 jz      loc_6F1C
.text:00000000000065B2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000065B7                 jz      loc_6F1A
.text:00000000000065BD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000065C2                 jnz     loc_6FBD
.text:00000000000065C8                 test    r13, r13
.text:00000000000065CB                 setz    al
.text:00000000000065CE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000065D4                 setnz   dl
.text:00000000000065D7                 and     al, dl
.text:00000000000065D9                 jz      loc_6FFC
.text:00000000000065DF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000065E4
.text:00000000000065E4 loc_65E4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000065E4                 lea     rbx, asc_9F7D   ; "'"
.text:00000000000065EB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000065EF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000065F7                 mov     r15d, 1
.text:00000000000065FD                 mov     [rsp+0E8h+n], 1
.text:0000000000006606                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000660B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000006610                 mov     [rsp+0E8h+var_6C], al
.text:0000000000006614                 jmp     loc_5EF3
.text:0000000000006614 ; ---------------------------------------------------------------------------
.text:0000000000006619                 align 20h
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000006620                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006625                 jnz     loc_6ED0
.text:000000000000662B                 test    r13, r13
.text:000000000000662E                 jz      loc_6A30
.text:0000000000006634                 xor     edx, edx
.text:0000000000006636                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000663C                 jnz     loc_6A30
.text:0000000000006642
.text:0000000000006642 loc_6642:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000006642                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000006642                 mov     [rsp+0E8h+var_98], r13
.text:0000000000006647                 add     r15, 3
.text:000000000000664B                 xor     eax, eax
.text:000000000000664D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000006652                 xor     r8d, r8d
.text:0000000000006655                 mov     r13, rdx
.text:0000000000006658                 mov     ebx, 27h ; '''
.text:000000000000665D                 jmp     loc_6079
.text:000000000000665D ; ---------------------------------------------------------------------------
.text:0000000000006662                 align 8
.text:0000000000006668
.text:0000000000006668 loc_6668:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000006668                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000666D                 jz      short loc_6690
.text:000000000000666F                 lea     rcx, [rbp+2]
.text:0000000000006673                 cmp     rcx, r11
.text:0000000000006676                 jnb     short loc_6690
.text:0000000000006678                 mov     rax, [rsp+0E8h+s]
.text:000000000000667D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000006682                 jz      loc_6E12
.text:0000000000006688                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000006690
.text:0000000000006690 loc_6690:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000006690                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000006690                 xor     edx, edx
.text:0000000000006692                 xor     r12d, r12d
.text:0000000000006695                 xor     eax, eax
.text:0000000000006697                 mov     ebx, 3Fh ; '?'
.text:000000000000669C                 jmp     loc_6048
.text:000000000000669C ; ---------------------------------------------------------------------------
.text:00000000000066A1                 align 8
.text:00000000000066A8
.text:00000000000066A8 loc_66A8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:00000000000066A8                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000066AD                 jnz     loc_6ED0
.text:00000000000066B3                 xor     r12d, r12d
.text:00000000000066B6                 xor     eax, eax
.text:00000000000066B8                 mov     ebx, 3Fh ; '?'
.text:00000000000066BD                 jmp     loc_6079
.text:00000000000066BD ; ---------------------------------------------------------------------------
.text:00000000000066C2                 align 8
.text:00000000000066C8
.text:00000000000066C8 loc_66C8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000066C8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000066D0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000066D4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000066E0                 mov     [rsp+0E8h+ps], rax
.text:00000000000066E5                 jnz     short loc_6714
.text:00000000000066E7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000066EC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000066F1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000066F6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000066FB                 call    _strlen
.text:0000000000006700                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000006706                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000670C                 mov     r11, rax
.text:000000000000670F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000006714
.text:0000000000006714 loc_6714:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000006714                 lea     rax, [rsp+0E8h+wc]
.text:000000000000671C                 xor     ecx, ecx
.text:000000000000671E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000006722                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000006727                 mov     rbx, rcx
.text:000000000000672A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000006732                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000006737                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000673C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000006744                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000006749                 mov     [rsp+0E8h+var_78], r13
.text:000000000000674E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000006753
.text:0000000000006753 loc_6753:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000006753                 mov     rax, [rsp+0E8h+s]
.text:0000000000006758                 lea     r14, [rbp+rbx+0]
.text:000000000000675D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000006762                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000006767                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000676C                 lea     r13, [rax+r14]
.text:0000000000006770                 sub     rdx, r14
.text:0000000000006773                 mov     rsi, r13
.text:0000000000006776                 call    rpl_mbrtowc
.text:000000000000677B                 test    rax, rax
.text:000000000000677E                 mov     r15, rax
.text:0000000000006781                 jz      short loc_67D1
.text:0000000000006783                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000006787                 jz      loc_6DA5
.text:000000000000678D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000006791                 jz      loc_6D31
.text:0000000000006797                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000679C                 setz    al
.text:000000000000679F                 and     al, [rsp+0E8h+var_D9]
.text:00000000000067A3                 jnz     loc_6940
.text:00000000000067A9
.text:00000000000067A9 loc_67A9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:00000000000067A9                                         ; quotearg_buffer_restyled+B47↓j
.text:00000000000067A9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000067B0                 call    _iswprint
.text:00000000000067B5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000067BA                 test    eax, eax
.text:00000000000067BC                 mov     eax, 0
.text:00000000000067C1                 cmovz   r12d, eax
.text:00000000000067C5                 add     rbx, r15
.text:00000000000067C8                 call    _mbsinit
.text:00000000000067CD                 test    eax, eax
.text:00000000000067CF                 jz      short loc_6753
.text:00000000000067D1
.text:00000000000067D1 loc_67D1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000067D1                 mov     edx, r12d
.text:00000000000067D4                 mov     rdi, rbx
.text:00000000000067D7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000067DD                 xor     edx, 1
.text:00000000000067E0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000067E5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000067EB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000067EF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000067F7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000067FC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006801                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006806
.text:0000000000006806 loc_6806:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000006806                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000006806                 cmp     rdi, 1
.text:000000000000680A                 jbe     loc_6E0B
.text:0000000000006810
.text:0000000000006810 loc_6810:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000006810                 mov     rcx, rdi
.text:0000000000006813                 xor     esi, esi
.text:0000000000006815                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000681B                 add     rcx, rbp
.text:000000000000681E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000006823                 jmp     loc_68DE
.text:0000000000006823 ; ---------------------------------------------------------------------------
.text:0000000000006828                 align 10h
.text:0000000000006830
.text:0000000000006830 loc_6830:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000006830                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006835                 setz    al
.text:0000000000006838                 test    r9b, r9b
.text:000000000000683B                 jnz     loc_6CF0
.text:0000000000006841                 mov     esi, r8d
.text:0000000000006844                 xor     esi, 1
.text:0000000000006847                 and     al, sil
.text:000000000000684A                 jz      short loc_687B
.text:000000000000684C                 cmp     r13, r15
.text:000000000000684F                 jbe     short loc_6856
.text:0000000000006851                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006856
.text:0000000000006856 loc_6856:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000006856                 lea     rsi, [r15+1]
.text:000000000000685A                 cmp     r13, rsi
.text:000000000000685D                 jbe     short loc_6865
.text:000000000000685F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000006865
.text:0000000000006865 loc_6865:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000006865                 lea     rsi, [r15+2]
.text:0000000000006869                 cmp     r13, rsi
.text:000000000000686C                 jbe     short loc_6874
.text:000000000000686E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006874
.text:0000000000006874 loc_6874:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000006874                 add     r15, 3
.text:0000000000006878                 mov     r8d, eax
.text:000000000000687B
.text:000000000000687B loc_687B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000687B                 cmp     r13, r15
.text:000000000000687E                 jbe     short loc_6885
.text:0000000000006880                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000006885
.text:0000000000006885 loc_6885:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000006885                 lea     rax, [r15+1]
.text:0000000000006889                 cmp     r13, rax
.text:000000000000688C                 jbe     short loc_689B
.text:000000000000688E                 mov     eax, ebx
.text:0000000000006890                 shr     al, 6
.text:0000000000006893                 add     eax, 30h ; '0'
.text:0000000000006896                 mov     [r14+r15+1], al
.text:000000000000689B
.text:000000000000689B loc_689B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000689B                 lea     rax, [r15+2]
.text:000000000000689F                 cmp     r13, rax
.text:00000000000068A2                 jbe     short loc_68B4
.text:00000000000068A4                 mov     eax, ebx
.text:00000000000068A6                 shr     al, 3
.text:00000000000068A9                 and     eax, 7
.text:00000000000068AC                 add     eax, 30h ; '0'
.text:00000000000068AF                 mov     [r14+r15+2], al
.text:00000000000068B4
.text:00000000000068B4 loc_68B4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000068B4                 and     ebx, 7
.text:00000000000068B7                 add     rbp, 1
.text:00000000000068BB                 add     r15, 3
.text:00000000000068BF                 add     ebx, 30h ; '0'
.text:00000000000068C2                 cmp     rbp, rcx
.text:00000000000068C5                 jnb     loc_60B0
.text:00000000000068CB                 mov     esi, edx
.text:00000000000068CD
.text:00000000000068CD loc_68CD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000068CD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000068CD                 cmp     r13, r15
.text:00000000000068D0                 jbe     short loc_68D6
.text:00000000000068D2                 mov     [r14+r15], bl
.text:00000000000068D6
.text:00000000000068D6 loc_68D6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000068D6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000068DA                 add     r15, 1
.text:00000000000068DE
.text:00000000000068DE loc_68DE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000068DE                 test    dl, dl
.text:00000000000068E0                 jnz     loc_6830
.text:00000000000068E6                 mov     eax, esi
.text:00000000000068E8                 xor     eax, 1
.text:00000000000068EB                 and     eax, r8d
.text:00000000000068EE                 test    r10b, r10b
.text:00000000000068F1                 jz      short loc_6901
.text:00000000000068F3                 cmp     r13, r15
.text:00000000000068F6                 jbe     short loc_68FD
.text:00000000000068F8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000068FD
.text:00000000000068FD loc_68FD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000068FD                 add     r15, 1
.text:0000000000006901
.text:0000000000006901 loc_6901:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000006901                 add     rbp, 1
.text:0000000000006905                 cmp     rbp, rcx
.text:0000000000006908                 jnb     loc_608C
.text:000000000000690E                 test    al, al
.text:0000000000006910                 jz      loc_6D0E
.text:0000000000006916                 cmp     r13, r15
.text:0000000000006919                 jbe     short loc_6920
.text:000000000000691B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006920
.text:0000000000006920 loc_6920:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000006920                 lea     rax, [r15+1]
.text:0000000000006924                 cmp     r13, rax
.text:0000000000006927                 jbe     short loc_692F
.text:0000000000006929                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000692F
.text:000000000000692F loc_692F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000692F                 add     r15, 2
.text:0000000000006933                 xor     r10d, r10d
.text:0000000000006936                 xor     r8d, r8d
.text:0000000000006939                 jmp     short loc_68CD
.text:0000000000006939 ; ---------------------------------------------------------------------------
.text:000000000000693B                 align 20h
.text:0000000000006940
.text:0000000000006940 loc_6940:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000006940                 cmp     r15, 1
.text:0000000000006944                 jz      loc_67A9
.text:000000000000694A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000694F                 lea     rcx, [rdi+r15]
.text:0000000000006953                 lea     rdx, [rdi+r14+1]
.text:0000000000006958                 lea     r8, [rcx+r14]
.text:000000000000695C                 jmp     short loc_696D
.text:000000000000695C ; ---------------------------------------------------------------------------
.text:000000000000695E                 align 20h
.text:0000000000006960
.text:0000000000006960 loc_6960:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000006960                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000006960                 add     rdx, 1
.text:0000000000006964                 cmp     r8, rdx
.text:0000000000006967                 jz      loc_67A9
.text:000000000000696D
.text:000000000000696D loc_696D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000696D                 movzx   ecx, byte ptr [rdx]
.text:0000000000006970                 sub     ecx, 5Bh ; '['
.text:0000000000006973                 cmp     cl, 21h ; '!'
.text:0000000000006976                 ja      short loc_6960
.text:0000000000006978                 mov     esi, 1
.text:000000000000697D                 shl     rsi, cl
.text:0000000000006980                 mov     rcx, rsi
.text:0000000000006983                 mov     rsi, 20000002Bh
.text:000000000000698D                 test    rcx, rsi
.text:0000000000006990                 jz      short loc_6960
.text:0000000000006992                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006997                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000699C                 mov     rbp, [rsp+0E8h+var_B8]
.text:00000000000069A1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000069A9
.text:00000000000069A9 loc_69A9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:00000000000069A9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:00000000000069A9                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000069AE                 jz      short loc_69C0
.text:00000000000069B0                 test    al, al
.text:00000000000069B2                 mov     eax, 4
.text:00000000000069B7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000069BC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000069C0
.text:00000000000069C0 loc_69C0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000069C0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000069C0                 sub     rsp, 8
.text:00000000000069C4                 mov     rcx, rbp
.text:00000000000069C7                 mov     rsi, r13
.text:00000000000069CA                 push    [rsp+0F0h+var_88]
.text:00000000000069CE                 push    [rsp+0F8h+var_80]
.text:00000000000069D2                 mov     rdi, r14
.text:00000000000069D5                 push    0
.text:00000000000069D7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000069DF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000069E4                 mov     rdx, [rsp+108h+s]
.text:00000000000069E9                 and     r9d, 0FFFFFFFDh
.text:00000000000069ED                 call    quotearg_buffer_restyled
.text:00000000000069F2                 add     rsp, 20h
.text:00000000000069F6                 mov     r15, rax
.text:00000000000069F9
.text:00000000000069F9 loc_69F9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000069F9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000069F9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000006A01                 xor     rbx, fs:28h
.text:0000000000006A0A                 mov     rax, r15
.text:0000000000006A0D                 jnz     loc_7013
.text:0000000000006A13                 add     rsp, 0B8h
.text:0000000000006A1A                 pop     rbx
.text:0000000000006A1B                 pop     rbp
.text:0000000000006A1C                 pop     r12
.text:0000000000006A1E                 pop     r13
.text:0000000000006A20                 pop     r14
.text:0000000000006A22                 pop     r15
.text:0000000000006A24                 retn
.text:0000000000006A24 ; ---------------------------------------------------------------------------
.text:0000000000006A25                 align 8
.text:0000000000006A28
.text:0000000000006A28 loc_6A28:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000006A28                 mov     rbp, r11
.text:0000000000006A2B                 jmp     loc_69A9
.text:0000000000006A30 ; ---------------------------------------------------------------------------
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000006A30                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000006A30                 cmp     r13, r15
.text:0000000000006A33                 jbe     short loc_6A3A
.text:0000000000006A35                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000006A3A
.text:0000000000006A3A loc_6A3A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000006A3A                 lea     rax, [r15+1]
.text:0000000000006A3E                 cmp     r13, rax
.text:0000000000006A41                 jbe     short loc_6A49
.text:0000000000006A43                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000006A49
.text:0000000000006A49 loc_6A49:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000006A49                 lea     rax, [r15+2]
.text:0000000000006A4D                 cmp     r13, rax
.text:0000000000006A50                 jbe     loc_7042
.text:0000000000006A56                 mov     rdx, r13
.text:0000000000006A59                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006A5F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000006A64                 jmp     loc_6642
.text:0000000000006A69 ; ---------------------------------------------------------------------------
.text:0000000000006A69
.text:0000000000006A69 loc_6A69:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000006A69                 mov     eax, r12d
.text:0000000000006A6C                 mov     ebx, 30h ; '0'
.text:0000000000006A71                 xor     r12d, r12d
.text:0000000000006A74                 jmp     loc_6079
.text:0000000000006A79 ; ---------------------------------------------------------------------------
.text:0000000000006A79
.text:0000000000006A79 loc_6A79:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000006A79                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000006A7F                 jmp     loc_6449
.text:0000000000006A84 ; ---------------------------------------------------------------------------
.text:0000000000006A84
.text:0000000000006A84 loc_6A84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006A84                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006A84                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000006A86                 jnz     loc_5EB3        ; jumptable 00000000000121F1 case 1
.text:0000000000006A8C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006A91
.text:0000000000006A91 loc_6A91:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000006A91                 test    r13, r13
.text:0000000000006A94                 jnz     loc_702A
.text:0000000000006A9A                 lea     rax, asc_9F7D   ; "'"
.text:0000000000006AA1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006AAA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006AAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006AB4                 xor     r12d, r12d
.text:0000000000006AB7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006ABC                 mov     [rsp+0E8h+n], 1
.text:0000000000006AC5                 mov     [rsp+0E8h+s2], rax
.text:0000000000006ACA                 mov     r15d, 1
.text:0000000000006AD0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000006AD8                 jmp     loc_5EF3
.text:0000000000006AD8 ; ---------------------------------------------------------------------------
.text:0000000000006ADD                 align 20h
.text:0000000000006AE0
.text:0000000000006AE0 loc_6AE0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006AE0                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006AE0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000006AE2                 jnz     loc_6EDD
.text:0000000000006AE8                 test    r13, r13
.text:0000000000006AEB                 jz      loc_6D16
.text:0000000000006AF1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000006AF5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006AFA                 xor     r12d, r12d
.text:0000000000006AFD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006B02                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006B0B
.text:0000000000006B0B loc_6B0B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000006B0B                 lea     rax, unk_9F7B
.text:0000000000006B12                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006B17                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006B1C                 mov     [rsp+0E8h+n], 1
.text:0000000000006B25                 mov     r15d, 1
.text:0000000000006B2B                 mov     [rsp+0E8h+s2], rax
.text:0000000000006B30                 jmp     loc_5EF3
.text:0000000000006B35 ; ---------------------------------------------------------------------------
.text:0000000000006B35
.text:0000000000006B35 loc_6B35:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006B35                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006B35                 lea     rax, unk_9F7B   ; jumptable 00000000000121F1 case 6
.text:0000000000006B3C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006B41                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006B46                 xor     r12d, r12d
.text:0000000000006B49                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006B52                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006B57                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006B5C                 mov     [rsp+0E8h+n], 1
.text:0000000000006B65                 xor     r15d, r15d
.text:0000000000006B68                 mov     [rsp+0E8h+s2], rax
.text:0000000000006B6D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000006B75                 jmp     loc_5EF3
.text:0000000000006B7A ; ---------------------------------------------------------------------------
.text:0000000000006B7A
.text:0000000000006B7A loc_6B7A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006B7A                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006B7A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000006B7F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006B84                 xor     r12d, r12d
.text:0000000000006B87                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006B90                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006B95                 xor     r15d, r15d
.text:0000000000006B98                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006B9D                 mov     [rsp+0E8h+n], 0
.text:0000000000006BA6                 mov     [rsp+0E8h+s2], 0
.text:0000000000006BAF                 jmp     loc_5EF3
.text:0000000000006BB4 ; ---------------------------------------------------------------------------
.text:0000000000006BB4
.text:0000000000006BB4 loc_6BB4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006BB4                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006BB4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000006BB9                 jz      short loc_6C11
.text:0000000000006BBB                 lea     rsi, asc_9F7F   ; "`"
.text:0000000000006BC2                 xor     edi, edi        ; domainname
.text:0000000000006BC4                 mov     edx, 5          ; category
.text:0000000000006BC9                 call    _dcgettext
.text:0000000000006BCE                 mov     rcx, rax
.text:0000000000006BD1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006BD6                 lea     rax, asc_9F7F   ; "`"
.text:0000000000006BDD                 cmp     rcx, rax
.text:0000000000006BE0                 jz      loc_6F7E
.text:0000000000006BE6
.text:0000000000006BE6 loc_6BE6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000006BE6                 lea     rsi, asc_9F7D   ; "'"
.text:0000000000006BED                 xor     edi, edi        ; domainname
.text:0000000000006BEF                 mov     edx, 5          ; category
.text:0000000000006BF4                 call    _dcgettext
.text:0000000000006BF9                 mov     rcx, rax
.text:0000000000006BFC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006C01                 lea     rax, asc_9F7D   ; "'"
.text:0000000000006C08                 cmp     rcx, rax
.text:0000000000006C0B                 jz      loc_6F94
.text:0000000000006C11
.text:0000000000006C11 loc_6C11:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000006C11                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000006C11                 xor     r15d, r15d
.text:0000000000006C14                 test    ebx, ebx
.text:0000000000006C16                 jz      loc_6DDD
.text:0000000000006C1C
.text:0000000000006C1C loc_6C1C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000006C1C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000006C1C                 test    ebx, ebx
.text:0000000000006C1E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000006C23                 setnz   [rsp+0E8h+var_D9]
.text:0000000000006C28                 xor     r12d, r12d
.text:0000000000006C2B                 mov     rdi, rbx        ; s
.text:0000000000006C2E                 call    _strlen
.text:0000000000006C33                 mov     [rsp+0E8h+s2], rbx
.text:0000000000006C38                 mov     [rsp+0E8h+n], rax
.text:0000000000006C3D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006C42                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006C47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006C50                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006C55                 jmp     loc_5EF3
.text:0000000000006C5A ; ---------------------------------------------------------------------------
.text:0000000000006C5A
.text:0000000000006C5A loc_6C5A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006C5A                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006C5A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000006C5F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006C64                 xor     r12d, r12d
.text:0000000000006C67                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006C70                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000006C75                 xor     r15d, r15d
.text:0000000000006C78                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006C7D                 mov     [rsp+0E8h+n], 0
.text:0000000000006C86                 mov     [rsp+0E8h+s2], 0
.text:0000000000006C8F                 jmp     loc_5EF3
.text:0000000000006C94 ; ---------------------------------------------------------------------------
.text:0000000000006C94
.text:0000000000006C94 loc_6C94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006C94                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006C94                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000006C99                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006C9E                 xor     r12d, r12d
.text:0000000000006CA1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006CAA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006CAF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006CB4                 jmp     loc_5ED3
.text:0000000000006CB9 ; ---------------------------------------------------------------------------
.text:0000000000006CB9
.text:0000000000006CB9 loc_6CB9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000006CB9                 cmp     r13, r15
.text:0000000000006CBC                 jbe     short loc_6CC3
.text:0000000000006CBE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000006CC3
.text:0000000000006CC3 loc_6CC3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000006CC3                 lea     rax, [rcx+2]
.text:0000000000006CC7                 cmp     r13, rax
.text:0000000000006CCA                 jbe     short loc_6CD2
.text:0000000000006CCC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000006CD2
.text:0000000000006CD2 loc_6CD2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000006CD2                 mov     eax, r12d
.text:0000000000006CD5                 lea     r15, [rcx+3]
.text:0000000000006CD9                 xor     r12d, r12d
.text:0000000000006CDC                 mov     ebx, 30h ; '0'
.text:0000000000006CE1                 jmp     loc_6048
.text:0000000000006CE1 ; ---------------------------------------------------------------------------
.text:0000000000006CE6                 align 10h
.text:0000000000006CF0
.text:0000000000006CF0 loc_6CF0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000006CF0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006CF5                 mov     rbp, r11
.text:0000000000006CF8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006CFC                 jmp     loc_69A9
.text:0000000000006D01 ; ---------------------------------------------------------------------------
.text:0000000000006D01
.text:0000000000006D01 loc_6D01:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000006D01                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006D06                 xor     r12d, r12d
.text:0000000000006D09                 jmp     loc_6810
.text:0000000000006D0E ; ---------------------------------------------------------------------------
.text:0000000000006D0E
.text:0000000000006D0E loc_6D0E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000006D0E                 xor     r10d, r10d
.text:0000000000006D11                 jmp     loc_68CD
.text:0000000000006D16 ; ---------------------------------------------------------------------------
.text:0000000000006D16
.text:0000000000006D16 loc_6D16:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000006D16                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006D1F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006D24                 xor     r12d, r12d
.text:0000000000006D27                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006D2C                 jmp     loc_6B0B
.text:0000000000006D31 ; ---------------------------------------------------------------------------
.text:0000000000006D31
.text:0000000000006D31 loc_6D31:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000006D31                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006D36                 mov     rsi, r14
.text:0000000000006D39                 mov     rcx, r13
.text:0000000000006D3C                 mov     rax, rbx
.text:0000000000006D3F                 mov     rdi, rbx
.text:0000000000006D42                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006D48                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006D4D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000006D55                 cmp     rsi, r11
.text:0000000000006D58                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006D5E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006D66                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006D6B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006D70                 jnb     short loc_6D98
.text:0000000000006D72                 cmp     byte ptr [rcx], 0
.text:0000000000006D75                 jnz     short loc_6D87
.text:0000000000006D77                 jmp     short loc_6D98
.text:0000000000006D77 ; ---------------------------------------------------------------------------
.text:0000000000006D79                 align 20h
.text:0000000000006D80
.text:0000000000006D80 loc_6D80:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000006D80                 cmp     byte ptr [r9+rax], 0
.text:0000000000006D85                 jz      short loc_6D95
.text:0000000000006D87
.text:0000000000006D87 loc_6D87:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000006D87                 add     rax, 1
.text:0000000000006D8B                 lea     rdx, [rbp+rax+0]
.text:0000000000006D90                 cmp     r11, rdx
.text:0000000000006D93                 ja      short loc_6D80
.text:0000000000006D95
.text:0000000000006D95 loc_6D95:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000006D95                 mov     rdi, rax
.text:0000000000006D98
.text:0000000000006D98 loc_6D98:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000006D98                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000006D98                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006D9D                 xor     r12d, r12d
.text:0000000000006DA0                 jmp     loc_6806
.text:0000000000006DA5 ; ---------------------------------------------------------------------------
.text:0000000000006DA5
.text:0000000000006DA5 loc_6DA5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000006DA5                 mov     rdi, rbx
.text:0000000000006DA8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000006DAE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000006DB3                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000006DB9                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000006DC1                 xor     r12d, r12d
.text:0000000000006DC4                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000006DC9                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000006DCE                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000006DD3                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000006DD8                 jmp     loc_6806
.text:0000000000006DDD ; ---------------------------------------------------------------------------
.text:0000000000006DDD
.text:0000000000006DDD loc_6DDD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000006DDD                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000006DE2                 movzx   eax, byte ptr [rdx]
.text:0000000000006DE5                 test    al, al
.text:0000000000006DE7                 jz      loc_6C1C
.text:0000000000006DED                 nop     dword ptr [rax]
.text:0000000000006DF0
.text:0000000000006DF0 loc_6DF0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000006DF0                 cmp     r13, r15
.text:0000000000006DF3                 jbe     short loc_6DF9
.text:0000000000006DF5                 mov     [r14+r15], al
.text:0000000000006DF9
.text:0000000000006DF9 loc_6DF9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000006DF9                 add     r15, 1
.text:0000000000006DFD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000006E02                 test    al, al
.text:0000000000006E04                 jnz     short loc_6DF0
.text:0000000000006E06                 jmp     loc_6C1C
.text:0000000000006E0B ; ---------------------------------------------------------------------------
.text:0000000000006E0B
.text:0000000000006E0B loc_6E0B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000006E0B                 mov     eax, edx
.text:0000000000006E0D                 jmp     loc_6367
.text:0000000000006E12 ; ---------------------------------------------------------------------------
.text:0000000000006E12
.text:0000000000006E12 loc_6E12:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000006E12                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000006E16                 cmp     bl, 3Eh ; '>'
.text:0000000000006E19                 ja      loc_6690
.text:0000000000006E1F                 mov     rax, 7000A38200000000h
.text:0000000000006E29                 bt      rax, rbx
.text:0000000000006E2D                 jnb     loc_6690
.text:0000000000006E33                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000006E38                 jnz     loc_7022
.text:0000000000006E3E                 cmp     r13, r15
.text:0000000000006E41                 jbe     short loc_6E48
.text:0000000000006E43                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000006E48
.text:0000000000006E48 loc_6E48:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000006E48                 lea     rax, [r15+1]
.text:0000000000006E4C                 cmp     r13, rax
.text:0000000000006E4F                 jbe     short loc_6E57
.text:0000000000006E51                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000006E57
.text:0000000000006E57 loc_6E57:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000006E57                 lea     rax, [r15+2]
.text:0000000000006E5B                 cmp     r13, rax
.text:0000000000006E5E                 jbe     short loc_6E66
.text:0000000000006E60                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000006E66
.text:0000000000006E66 loc_6E66:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000006E66                 lea     rax, [r15+3]
.text:0000000000006E6A                 cmp     r13, rax
.text:0000000000006E6D                 jbe     short loc_6E75
.text:0000000000006E6F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000006E75
.text:0000000000006E75 loc_6E75:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000006E75                 add     r15, 4
.text:0000000000006E79                 xor     edx, edx
.text:0000000000006E7B                 xor     r12d, r12d
.text:0000000000006E7E                 xor     eax, eax
.text:0000000000006E80                 mov     rbp, rcx
.text:0000000000006E83                 jmp     loc_6048
.text:0000000000006E88 ; ---------------------------------------------------------------------------
.text:0000000000006E88
.text:0000000000006E88 loc_6E88:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000006E88                                         ; DATA XREF: .rodata:jpt_5EB1↓o
.text:0000000000006E88                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000006E8A                 jz      loc_7018
.text:0000000000006E90                 lea     rax, asc_9F7D   ; "'"
.text:0000000000006E97                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006E9C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006EA1                 xor     r12d, r12d
.text:0000000000006EA4                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006EAD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006EB2                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000006EB7                 mov     [rsp+0E8h+n], 1
.text:0000000000006EC0                 xor     r15d, r15d
.text:0000000000006EC3                 mov     [rsp+0E8h+s2], rax
.text:0000000000006EC8                 jmp     loc_5EF3
.text:0000000000006EC8 ; ---------------------------------------------------------------------------
.text:0000000000006ECD                 align 10h
.text:0000000000006ED0
.text:0000000000006ED0 loc_6ED0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000006ED0                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000006ED0                 mov     rbp, r11
.text:0000000000006ED3                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000006ED8                 jmp     loc_69A9
.text:0000000000006EDD ; ---------------------------------------------------------------------------
.text:0000000000006EDD
.text:0000000000006EDD loc_6EDD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000006EDD                 lea     rax, unk_9F7B
.text:0000000000006EE4                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000006EE9                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000006EEE                 xor     r12d, r12d
.text:0000000000006EF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000006EFA                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000006EFF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000006F04                 mov     [rsp+0E8h+n], 1
.text:0000000000006F0D                 xor     r15d, r15d
.text:0000000000006F10                 mov     [rsp+0E8h+s2], rax
.text:0000000000006F15                 jmp     loc_5EF3
.text:0000000000006F1A ; ---------------------------------------------------------------------------
.text:0000000000006F1A
.text:0000000000006F1A loc_6F1A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000006F1A                 mov     eax, edx
.text:0000000000006F1C
.text:0000000000006F1C loc_6F1C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000006F1C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000006F1C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000006F21                 test    rbx, rbx
.text:0000000000006F24                 jz      short loc_6F52
.text:0000000000006F26                 test    al, al
.text:0000000000006F28                 jz      short loc_6F52
.text:0000000000006F2A                 movzx   ecx, byte ptr [rbx]
.text:0000000000006F2D                 mov     rax, rbx
.text:0000000000006F30                 test    cl, cl
.text:0000000000006F32                 jz      short loc_6F52
.text:0000000000006F34                 mov     rdx, r15
.text:0000000000006F37                 sub     rax, r15
.text:0000000000006F3A
.text:0000000000006F3A loc_6F3A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000006F3A                 cmp     r13, rdx
.text:0000000000006F3D                 jbe     short loc_6F43
.text:0000000000006F3F                 mov     [r14+rdx], cl
.text:0000000000006F43
.text:0000000000006F43 loc_6F43:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000006F43                 add     rdx, 1
.text:0000000000006F47                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000006F4B                 test    cl, cl
.text:0000000000006F4D                 jnz     short loc_6F3A
.text:0000000000006F4F                 mov     r15, rdx
.text:0000000000006F52
.text:0000000000006F52 loc_6F52:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000006F52                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000006F52                 cmp     r13, r15
.text:0000000000006F55                 jbe     loc_69F9
.text:0000000000006F5B                 mov     byte ptr [r14+r15], 0
.text:0000000000006F60                 jmp     loc_69F9
.text:0000000000006F65 ; ---------------------------------------------------------------------------
.text:0000000000006F65
.text:0000000000006F65 loc_6F65:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000006F65                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000006F6A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006F6F                 mov     rbp, r11
.text:0000000000006F72                 setz    al
.text:0000000000006F75                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006F79                 jmp     loc_69A9
.text:0000000000006F7E ; ---------------------------------------------------------------------------
.text:0000000000006F7E
.text:0000000000006F7E loc_6F7E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000006F7E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006F82                 mov     rdi, rcx
.text:0000000000006F85                 call    gettext_quote
.text:0000000000006F8A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000006F8F                 jmp     loc_6BE6
.text:0000000000006F94 ; ---------------------------------------------------------------------------
.text:0000000000006F94
.text:0000000000006F94 loc_6F94:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000006F94                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000006F98                 mov     rdi, rcx
.text:0000000000006F9B                 call    gettext_quote
.text:0000000000006FA0                 mov     [rsp+0E8h+var_88], rax
.text:0000000000006FA5                 jmp     loc_6C11
.text:0000000000006FAA ; ---------------------------------------------------------------------------
.text:0000000000006FAA
.text:0000000000006FAA loc_6FAA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000006FAA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000006FAF                 mov     rbp, r11
.text:0000000000006FB2                 mov     eax, edx
.text:0000000000006FB4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000006FB8                 jmp     loc_69A9
.text:0000000000006FBD ; ---------------------------------------------------------------------------
.text:0000000000006FBD
.text:0000000000006FBD loc_6FBD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000006FBD                 sub     rsp, 8
.text:0000000000006FC1                 mov     r8d, 5
.text:0000000000006FC7                 mov     rcx, r11
.text:0000000000006FCA                 push    [rsp+0F0h+var_88]
.text:0000000000006FCE                 push    [rsp+0F8h+var_80]
.text:0000000000006FD2                 mov     rdi, r14
.text:0000000000006FD5                 push    [rsp+100h+var_C8]
.text:0000000000006FD9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000006FE1                 mov     rdx, [rsp+108h+s]
.text:0000000000006FE6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000006FEB                 call    quotearg_buffer_restyled
.text:0000000000006FF0                 add     rsp, 20h
.text:0000000000006FF4                 mov     r15, rax
.text:0000000000006FF7                 jmp     loc_69F9
.text:0000000000006FFC ; ---------------------------------------------------------------------------
.text:0000000000006FFC
.text:0000000000006FFC loc_6FFC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000006FFC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000007001                 jmp     loc_6F1C
.text:0000000000007006 ; ---------------------------------------------------------------------------
.text:0000000000007006
.text:0000000000007006 loc_7006:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000007006                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000700E                 jmp     loc_69A9
.text:0000000000007013 ; ---------------------------------------------------------------------------
.text:0000000000007013
.text:0000000000007013 loc_7013:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000007013                 call    ___stack_chk_fail
.text:0000000000007018 ; ---------------------------------------------------------------------------
.text:0000000000007018
.text:0000000000007018 loc_7018:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000007018                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000701D                 jmp     loc_6A91
.text:0000000000007022 ; ---------------------------------------------------------------------------
.text:0000000000007022
.text:0000000000007022 loc_7022:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000007022                 mov     rbp, r11
.text:0000000000007025                 jmp     loc_69C0
.text:000000000000702A ; ---------------------------------------------------------------------------
.text:000000000000702A
.text:000000000000702A loc_702A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000702A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000702F                 xor     eax, eax
.text:0000000000007031                 xor     r12d, r12d
.text:0000000000007034                 mov     [rsp+0E8h+var_98], 0
.text:000000000000703D                 jmp     loc_65E4
.text:0000000000007042 ; ---------------------------------------------------------------------------
.text:0000000000007042
.text:0000000000007042 loc_7042:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000007042                 mov     rdx, r13
.text:0000000000007045                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000704A                 jmp     loc_6642
.text:000000000000704F ; ---------------------------------------------------------------------------
.text:000000000000704F
.text:000000000000704F def_5EB1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000704F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000704F ; } // starts at 5E20
.text:000000000000704F quotearg_buffer_restyled endp
.text:000000000000704F
.text:000000000000704F ; ---------------------------------------------------------------------------
.text:0000000000007054                 align 20h
.text:0000000000007060
.text:0000000000007060 ; =============== S U B R O U T I N E =======================================
.text:0000000000007060
.text:0000000000007060
.text:0000000000007060 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000007060                                         ; quotearg_n_mem+7↓j ...
.text:0000000000007060
.text:0000000000007060 var_50          = qword ptr -50h
.text:0000000000007060 var_48          = qword ptr -48h
.text:0000000000007060 var_40          = dword ptr -40h
.text:0000000000007060 var_3C          = dword ptr -3Ch
.text:0000000000007060
.text:0000000000007060 ; __unwind {
.text:0000000000007060                 push    r15
.text:0000000000007062                 push    r14
.text:0000000000007064                 movsxd  r15, edi
.text:0000000000007067                 push    r13
.text:0000000000007069                 push    r12
.text:000000000000706B                 mov     r14, rdx
.text:000000000000706E                 push    rbp
.text:000000000000706F                 push    rbx
.text:0000000000007070                 mov     rbp, rcx
.text:0000000000007073                 sub     rsp, 28h
.text:0000000000007077                 mov     [rsp+58h+var_50], rsi
.text:000000000000707C                 call    ___errno_location
.text:0000000000007081                 mov     r13, rax
.text:0000000000007084                 mov     eax, [rax]
.text:0000000000007086                 test    r15d, r15d
.text:0000000000007089                 mov     rbx, cs:slotvec
.text:0000000000007090                 mov     [rsp+58h+var_40], eax
.text:0000000000007094                 js      loc_7201
.text:000000000000709A                 cmp     cs:nslots, r15d
.text:00000000000070A1                 jg      short loc_7105
.text:00000000000070A3                 cmp     r15d, 7FFFFFFFh
.text:00000000000070AA                 jz      loc_7206
.text:00000000000070B0                 lea     r12d, [r15+1]
.text:00000000000070B4                 lea     rax, slotvec0
.text:00000000000070BB                 movsxd  rsi, r12d
.text:00000000000070BE                 shl     rsi, 4
.text:00000000000070C2                 cmp     rbx, rax
.text:00000000000070C5                 jz      loc_71E0
.text:00000000000070CB                 mov     rdi, rbx
.text:00000000000070CE                 call    xrealloc
.text:00000000000070D3                 mov     rbx, rax
.text:00000000000070D6                 mov     cs:slotvec, rax
.text:00000000000070DD
.text:00000000000070DD loc_70DD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000070DD                 movsxd  rdi, cs:nslots
.text:00000000000070E4                 mov     edx, r12d
.text:00000000000070E7                 xor     esi, esi        ; c
.text:00000000000070E9                 sub     edx, edi
.text:00000000000070EB                 shl     rdi, 4
.text:00000000000070EF                 movsxd  rdx, edx
.text:00000000000070F2                 add     rdi, rbx        ; s
.text:00000000000070F5                 shl     rdx, 4          ; n
.text:00000000000070F9                 call    _memset
.text:00000000000070FE                 mov     cs:nslots, r12d
.text:0000000000007105
.text:0000000000007105 loc_7105:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000007105                 mov     eax, [rbp+4]
.text:0000000000007108                 shl     r15, 4
.text:000000000000710C                 sub     rsp, 8
.text:0000000000007110                 add     rbx, r15
.text:0000000000007113                 lea     r15, [rbp+8]
.text:0000000000007117                 mov     r8d, [rbp+0]
.text:000000000000711B                 mov     r11, [rbx]
.text:000000000000711E                 mov     r12, [rbx+8]
.text:0000000000007122                 mov     rcx, r14
.text:0000000000007125                 or      eax, 1
.text:0000000000007128                 mov     [rsp+60h+var_3C], eax
.text:000000000000712C                 push    qword ptr [rbp+30h]
.text:000000000000712F                 mov     r9d, eax
.text:0000000000007132                 push    qword ptr [rbp+28h]
.text:0000000000007135                 push    r15
.text:0000000000007137                 mov     rsi, r11
.text:000000000000713A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000713F                 mov     rdi, r12
.text:0000000000007142                 mov     [rsp+78h+var_48], r11
.text:0000000000007147                 call    quotearg_buffer_restyled
.text:000000000000714C                 add     rsp, 20h
.text:0000000000007150                 mov     r11, [rsp+58h+var_48]
.text:0000000000007155                 cmp     r11, rax
.text:0000000000007158                 ja      short loc_71C1
.text:000000000000715A                 lea     rsi, [rax+1]
.text:000000000000715E                 lea     rax, slot0
.text:0000000000007165                 cmp     r12, rax
.text:0000000000007168                 mov     [rbx], rsi
.text:000000000000716B                 jz      short loc_717F
.text:000000000000716D                 mov     rdi, r12        ; ptr
.text:0000000000007170                 mov     [rsp+58h+var_48], rsi
.text:0000000000007175                 call    _free
.text:000000000000717A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000717F
.text:000000000000717F loc_717F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000717F                 mov     rdi, rsi
.text:0000000000007182                 mov     [rsp+58h+var_48], rsi
.text:0000000000007187                 call    xmalloc
.text:000000000000718C                 sub     rsp, 8
.text:0000000000007190                 mov     [rbx+8], rax
.text:0000000000007194                 mov     r8d, [rbp+0]
.text:0000000000007198                 push    qword ptr [rbp+30h]
.text:000000000000719B                 push    qword ptr [rbp+28h]
.text:000000000000719E                 mov     rcx, r14
.text:00000000000071A1                 push    r15
.text:00000000000071A3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000071A8                 mov     rdi, rax
.text:00000000000071AB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000071B0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000071B5                 mov     r12, rax
.text:00000000000071B8                 call    quotearg_buffer_restyled
.text:00000000000071BD                 add     rsp, 20h
.text:00000000000071C1
.text:00000000000071C1 loc_71C1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000071C1                 mov     eax, [rsp+58h+var_40]
.text:00000000000071C5                 mov     [r13+0], eax
.text:00000000000071C9                 add     rsp, 28h
.text:00000000000071CD                 mov     rax, r12
.text:00000000000071D0                 pop     rbx
.text:00000000000071D1                 pop     rbp
.text:00000000000071D2                 pop     r12
.text:00000000000071D4                 pop     r13
.text:00000000000071D6                 pop     r14
.text:00000000000071D8                 pop     r15
.text:00000000000071DA                 retn
.text:00000000000071DA ; ---------------------------------------------------------------------------
.text:00000000000071DB                 align 20h
.text:00000000000071E0
.text:00000000000071E0 loc_71E0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000071E0                 xor     edi, edi
.text:00000000000071E2                 call    xrealloc
.text:00000000000071E7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000071EF                 mov     rbx, rax
.text:00000000000071F2                 mov     cs:slotvec, rax
.text:00000000000071F9                 movups  xmmword ptr [rax], xmm0
.text:00000000000071FC                 jmp     loc_70DD
.text:0000000000007201 ; ---------------------------------------------------------------------------
.text:0000000000007201
.text:0000000000007201 loc_7201:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000007201                 call    _abort
.text:0000000000007206 ; ---------------------------------------------------------------------------
.text:0000000000007206
.text:0000000000007206 loc_7206:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000007206                 call    xalloc_die
.text:0000000000007206 ; } // starts at 7060
.text:0000000000007206 quotearg_n_options endp
.text:0000000000007206
.text:0000000000007206 ; ---------------------------------------------------------------------------
.text:000000000000720B                 align 10h
.text:0000000000007210
.text:0000000000007210 ; =============== S U B R O U T I N E =======================================
.text:0000000000007210
.text:0000000000007210 ; Attributes: info_from_lumina
.text:0000000000007210
.text:0000000000007210 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000007210                 public clone_quoting_options
.text:0000000000007210 clone_quoting_options proc near
.text:0000000000007210 ; __unwind {
.text:0000000000007210                 push    r12
.text:0000000000007212                 push    rbp
.text:0000000000007213                 push    rbx
.text:0000000000007214                 mov     rbx, rdi
.text:0000000000007217                 call    ___errno_location
.text:000000000000721C                 mov     r12d, [rax]
.text:000000000000721F                 mov     rbp, rax
.text:0000000000007222                 lea     rax, default_quoting_options
.text:0000000000007229                 test    rbx, rbx
.text:000000000000722C                 mov     esi, 38h ; '8'  ; n
.text:0000000000007231                 cmovz   rbx, rax
.text:0000000000007235                 mov     rdi, rbx        ; src
.text:0000000000007238                 call    xmemdup
.text:000000000000723D                 mov     [rbp+0], r12d
.text:0000000000007241                 pop     rbx
.text:0000000000007242                 pop     rbp
.text:0000000000007243                 pop     r12
.text:0000000000007245                 retn
.text:0000000000007245 ; } // starts at 7210
.text:0000000000007245 clone_quoting_options endp
.text:0000000000007245
.text:0000000000007245 ; ---------------------------------------------------------------------------
.text:0000000000007246                 align 10h
.text:0000000000007250
.text:0000000000007250 ; =============== S U B R O U T I N E =======================================
.text:0000000000007250
.text:0000000000007250
.text:0000000000007250                 public get_quoting_style
.text:0000000000007250 get_quoting_style proc near
.text:0000000000007250 ; __unwind {
.text:0000000000007250                 lea     rax, default_quoting_options
.text:0000000000007257                 test    rdi, rdi
.text:000000000000725A                 cmovz   rdi, rax
.text:000000000000725E                 mov     eax, [rdi]
.text:0000000000007260                 retn
.text:0000000000007260 ; } // starts at 7250
.text:0000000000007260 get_quoting_style endp
.text:0000000000007260
.text:0000000000007260 ; ---------------------------------------------------------------------------
.text:0000000000007261                 align 10h
.text:0000000000007270
.text:0000000000007270 ; =============== S U B R O U T I N E =======================================
.text:0000000000007270
.text:0000000000007270
.text:0000000000007270                 public set_quoting_style
.text:0000000000007270 set_quoting_style proc near
.text:0000000000007270 ; __unwind {
.text:0000000000007270                 lea     rax, default_quoting_options
.text:0000000000007277                 test    rdi, rdi
.text:000000000000727A                 cmovz   rdi, rax
.text:000000000000727E                 mov     [rdi], esi
.text:0000000000007280                 retn
.text:0000000000007280 ; } // starts at 7270
.text:0000000000007280 set_quoting_style endp
.text:0000000000007280
.text:0000000000007280 ; ---------------------------------------------------------------------------
.text:0000000000007281                 align 10h
.text:0000000000007290
.text:0000000000007290 ; =============== S U B R O U T I N E =======================================
.text:0000000000007290
.text:0000000000007290 ; Attributes: info_from_lumina
.text:0000000000007290
.text:0000000000007290 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000007290                 public set_char_quoting
.text:0000000000007290 set_char_quoting proc near
.text:0000000000007290 ; __unwind {
.text:0000000000007290                 lea     rax, default_quoting_options
.text:0000000000007297                 test    rdi, rdi
.text:000000000000729A                 mov     ecx, esi
.text:000000000000729C                 cmovz   rdi, rax
.text:00000000000072A0                 mov     eax, esi
.text:00000000000072A2                 and     ecx, 1Fh
.text:00000000000072A5                 shr     al, 5
.text:00000000000072A8                 movzx   eax, al
.text:00000000000072AB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000072B0                 mov     esi, [rdi]
.text:00000000000072B2                 mov     eax, esi
.text:00000000000072B4                 shr     eax, cl
.text:00000000000072B6                 xor     edx, eax
.text:00000000000072B8                 and     eax, 1
.text:00000000000072BB                 and     edx, 1
.text:00000000000072BE                 shl     edx, cl
.text:00000000000072C0                 xor     edx, esi
.text:00000000000072C2                 mov     [rdi], edx
.text:00000000000072C4                 retn
.text:00000000000072C4 ; } // starts at 7290
.text:00000000000072C4 set_char_quoting endp
.text:00000000000072C4
.text:00000000000072C4 ; ---------------------------------------------------------------------------
.text:00000000000072C5                 align 10h
.text:00000000000072D0
.text:00000000000072D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072D0
.text:00000000000072D0
.text:00000000000072D0                 public set_quoting_flags
.text:00000000000072D0 set_quoting_flags proc near
.text:00000000000072D0 ; __unwind {
.text:00000000000072D0                 lea     rax, default_quoting_options
.text:00000000000072D7                 test    rdi, rdi
.text:00000000000072DA                 cmovz   rdi, rax
.text:00000000000072DE                 mov     eax, [rdi+4]
.text:00000000000072E1                 mov     [rdi+4], esi
.text:00000000000072E4                 retn
.text:00000000000072E4 ; } // starts at 72D0
.text:00000000000072E4 set_quoting_flags endp
.text:00000000000072E4
.text:00000000000072E4 ; ---------------------------------------------------------------------------
.text:00000000000072E5                 align 10h
.text:00000000000072F0
.text:00000000000072F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000072F0
.text:00000000000072F0 ; Attributes: info_from_lumina
.text:00000000000072F0
.text:00000000000072F0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000072F0                 public set_custom_quoting
.text:00000000000072F0 set_custom_quoting proc near
.text:00000000000072F0 ; __unwind {
.text:00000000000072F0                 lea     rax, default_quoting_options
.text:00000000000072F7                 test    rdi, rdi
.text:00000000000072FA                 cmovz   rdi, rax
.text:00000000000072FE                 test    rsi, rsi
.text:0000000000007301                 mov     dword ptr [rdi], 0Ah
.text:0000000000007307                 jz      short loc_7317
.text:0000000000007309                 test    rdx, rdx
.text:000000000000730C                 jz      short loc_7317
.text:000000000000730E                 mov     [rdi+28h], rsi
.text:0000000000007312                 mov     [rdi+30h], rdx
.text:0000000000007316                 retn
.text:0000000000007317 ; ---------------------------------------------------------------------------
.text:0000000000007317
.text:0000000000007317 loc_7317:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000007317                                         ; set_custom_quoting+1C↑j
.text:0000000000007317                 sub     rsp, 8
.text:000000000000731B                 call    _abort
.text:000000000000731B ; } // starts at 72F0
.text:000000000000731B set_custom_quoting endp
.text:000000000000731B
.text:0000000000007320
.text:0000000000007320 ; =============== S U B R O U T I N E =======================================
.text:0000000000007320
.text:0000000000007320 ; Attributes: info_from_lumina
.text:0000000000007320
.text:0000000000007320 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000007320                 public quotearg_buffer
.text:0000000000007320 quotearg_buffer proc near
.text:0000000000007320
.text:0000000000007320 var_40          = qword ptr -40h
.text:0000000000007320
.text:0000000000007320 ; __unwind {
.text:0000000000007320                 push    r15
.text:0000000000007322                 push    r14
.text:0000000000007324                 lea     rax, default_quoting_options
.text:000000000000732B                 push    r13
.text:000000000000732D                 push    r12
.text:000000000000732F                 mov     r13, rdi
.text:0000000000007332                 push    rbp
.text:0000000000007333                 push    rbx
.text:0000000000007334                 mov     rbx, r8
.text:0000000000007337                 mov     r14, rsi
.text:000000000000733A                 mov     r15, rdx
.text:000000000000733D                 sub     rsp, 18h
.text:0000000000007341                 test    r8, r8
.text:0000000000007344                 cmovz   rbx, rax
.text:0000000000007348                 mov     [rsp+48h+var_40], rcx
.text:000000000000734D                 call    ___errno_location
.text:0000000000007352                 mov     r12d, [rax]
.text:0000000000007355                 mov     rbp, rax
.text:0000000000007358                 lea     rax, [rbx+8]
.text:000000000000735C                 sub     rsp, 8
.text:0000000000007360                 mov     r9d, [rbx+4]
.text:0000000000007364                 push    qword ptr [rbx+30h]
.text:0000000000007367                 mov     r8d, [rbx]
.text:000000000000736A                 push    qword ptr [rbx+28h]
.text:000000000000736D                 mov     rdx, r15
.text:0000000000007370                 push    rax
.text:0000000000007371                 mov     rcx, [rsp+68h+var_40]
.text:0000000000007376                 mov     rsi, r14
.text:0000000000007379                 mov     rdi, r13
.text:000000000000737C                 call    quotearg_buffer_restyled
.text:0000000000007381                 mov     [rbp+0], r12d
.text:0000000000007385                 add     rsp, 38h
.text:0000000000007389                 pop     rbx
.text:000000000000738A                 pop     rbp
.text:000000000000738B                 pop     r12
.text:000000000000738D                 pop     r13
.text:000000000000738F                 pop     r14
.text:0000000000007391                 pop     r15
.text:0000000000007393                 retn
.text:0000000000007393 ; } // starts at 7320
.text:0000000000007393 quotearg_buffer endp
.text:0000000000007393
.text:0000000000007393 ; ---------------------------------------------------------------------------
.text:0000000000007394                 align 20h
.text:00000000000073A0
.text:00000000000073A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000073A0
.text:00000000000073A0 ; Attributes: info_from_lumina
.text:00000000000073A0
.text:00000000000073A0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000073A0                 public quotearg_alloc_mem
.text:00000000000073A0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000073A0
.text:00000000000073A0 var_5C          = dword ptr -5Ch
.text:00000000000073A0 var_58          = qword ptr -58h
.text:00000000000073A0 var_50          = qword ptr -50h
.text:00000000000073A0 var_48          = qword ptr -48h
.text:00000000000073A0 var_40          = qword ptr -40h
.text:00000000000073A0
.text:00000000000073A0 ; __unwind {
.text:00000000000073A0                 push    r15
.text:00000000000073A2                 push    r14
.text:00000000000073A4                 lea     rax, default_quoting_options
.text:00000000000073AB                 push    r13
.text:00000000000073AD                 push    r12
.text:00000000000073AF                 mov     r12, rdx
.text:00000000000073B2                 push    rbp
.text:00000000000073B3                 push    rbx
.text:00000000000073B4                 mov     rbx, rcx
.text:00000000000073B7                 mov     r14, rdi
.text:00000000000073BA                 mov     r15, rsi
.text:00000000000073BD                 sub     rsp, 38h
.text:00000000000073C1                 test    rcx, rcx
.text:00000000000073C4                 cmovz   rbx, rax
.text:00000000000073C8                 xor     ebp, ebp
.text:00000000000073CA                 call    ___errno_location
.text:00000000000073CF                 test    r12, r12
.text:00000000000073D2                 mov     r13, rax
.text:00000000000073D5                 mov     eax, [rax]
.text:00000000000073D7                 setz    bpl
.text:00000000000073DB                 or      ebp, [rbx+4]
.text:00000000000073DE                 lea     r10, [rbx+8]
.text:00000000000073E2                 sub     rsp, 8
.text:00000000000073E6                 mov     r8d, [rbx]
.text:00000000000073E9                 mov     rcx, r15
.text:00000000000073EC                 mov     [rsp+70h+var_5C], eax
.text:00000000000073F0                 push    qword ptr [rbx+30h]
.text:00000000000073F3                 mov     rdx, r14
.text:00000000000073F6                 push    qword ptr [rbx+28h]
.text:00000000000073F9                 push    r10
.text:00000000000073FB                 xor     esi, esi
.text:00000000000073FD                 mov     r9d, ebp
.text:0000000000007400                 xor     edi, edi
.text:0000000000007402                 mov     [rsp+88h+var_48], r10
.text:0000000000007407                 call    quotearg_buffer_restyled
.text:000000000000740C                 lea     rsi, [rax+1]
.text:0000000000007410                 mov     [rsp+88h+var_40], rax
.text:0000000000007415                 add     rsp, 20h
.text:0000000000007419                 mov     rdi, rsi
.text:000000000000741C                 mov     [rsp+68h+var_50], rsi
.text:0000000000007421                 call    xmalloc
.text:0000000000007426                 mov     [rsp+68h+var_58], rax
.text:000000000000742B                 sub     rsp, 8
.text:000000000000742F                 push    qword ptr [rbx+30h]
.text:0000000000007432                 push    qword ptr [rbx+28h]
.text:0000000000007435                 mov     r10, [rsp+80h+var_48]
.text:000000000000743A                 mov     r9d, ebp
.text:000000000000743D                 mov     r8d, [rbx]
.text:0000000000007440                 mov     rcx, r15
.text:0000000000007443                 mov     rdx, r14
.text:0000000000007446                 mov     rdi, rax
.text:0000000000007449                 push    r10
.text:000000000000744B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000007450                 call    quotearg_buffer_restyled
.text:0000000000007455                 mov     eax, [rsp+88h+var_5C]
.text:0000000000007459                 add     rsp, 20h
.text:000000000000745D                 test    r12, r12
.text:0000000000007460                 mov     [r13+0], eax
.text:0000000000007464                 jz      short loc_746F
.text:0000000000007466                 mov     r11, [rsp+68h+var_40]
.text:000000000000746B                 mov     [r12], r11
.text:000000000000746F
.text:000000000000746F loc_746F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000746F                 mov     rax, [rsp+68h+var_58]
.text:0000000000007474                 add     rsp, 38h
.text:0000000000007478                 pop     rbx
.text:0000000000007479                 pop     rbp
.text:000000000000747A                 pop     r12
.text:000000000000747C                 pop     r13
.text:000000000000747E                 pop     r14
.text:0000000000007480                 pop     r15
.text:0000000000007482                 retn
.text:0000000000007482 ; } // starts at 73A0
.text:0000000000007482 quotearg_alloc_mem endp
.text:0000000000007482
.text:0000000000007482 ; ---------------------------------------------------------------------------
.text:0000000000007483                 align 10h
.text:0000000000007490
.text:0000000000007490 ; =============== S U B R O U T I N E =======================================
.text:0000000000007490
.text:0000000000007490
.text:0000000000007490                 public quotearg_alloc
.text:0000000000007490 quotearg_alloc  proc near
.text:0000000000007490 ; __unwind {
.text:0000000000007490                 mov     rcx, rdx
.text:0000000000007493                 xor     edx, edx
.text:0000000000007495                 jmp     quotearg_alloc_mem
.text:0000000000007495 ; } // starts at 7490
.text:0000000000007495 quotearg_alloc  endp
.text:0000000000007495
.text:0000000000007495 ; ---------------------------------------------------------------------------
.text:000000000000749A                 align 20h
.text:00000000000074A0
.text:00000000000074A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074A0
.text:00000000000074A0 ; Attributes: info_from_lumina
.text:00000000000074A0
.text:00000000000074A0 ; void __cdecl quotearg_free()
.text:00000000000074A0                 public quotearg_free
.text:00000000000074A0 quotearg_free   proc near
.text:00000000000074A0 ; __unwind {
.text:00000000000074A0                 mov     eax, cs:nslots
.text:00000000000074A6                 push    r12
.text:00000000000074A8                 mov     r12, cs:slotvec
.text:00000000000074AF                 push    rbp
.text:00000000000074B0                 push    rbx
.text:00000000000074B1                 cmp     eax, 1
.text:00000000000074B4                 jle     short loc_74E1
.text:00000000000074B6                 sub     eax, 2
.text:00000000000074B9                 lea     rbx, [r12+18h]
.text:00000000000074BE                 shl     rax, 4
.text:00000000000074C2                 lea     rbp, [r12+rax+28h]
.text:00000000000074C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000074D0
.text:00000000000074D0 loc_74D0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000074D0                 mov     rdi, [rbx]      ; ptr
.text:00000000000074D3                 add     rbx, 10h
.text:00000000000074D7                 call    _free
.text:00000000000074DC                 cmp     rbx, rbp
.text:00000000000074DF                 jnz     short loc_74D0
.text:00000000000074E1
.text:00000000000074E1 loc_74E1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000074E1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000074E6                 lea     rbx, slot0
.text:00000000000074ED                 cmp     rdi, rbx
.text:00000000000074F0                 jz      short loc_7509
.text:00000000000074F2                 call    _free
.text:00000000000074F7                 mov     cs:slotvec0, 100h
.text:0000000000007502                 mov     cs:off_20D098, rbx
.text:0000000000007509
.text:0000000000007509 loc_7509:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000007509                 lea     rbx, slotvec0
.text:0000000000007510                 cmp     r12, rbx
.text:0000000000007513                 jz      short loc_7524
.text:0000000000007515                 mov     rdi, r12        ; ptr
.text:0000000000007518                 call    _free
.text:000000000000751D                 mov     cs:slotvec, rbx
.text:0000000000007524
.text:0000000000007524 loc_7524:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000007524                 pop     rbx
.text:0000000000007525                 mov     cs:nslots, 1
.text:000000000000752F                 pop     rbp
.text:0000000000007530                 pop     r12
.text:0000000000007532                 retn
.text:0000000000007532 ; } // starts at 74A0
.text:0000000000007532 quotearg_free   endp
.text:0000000000007532
.text:0000000000007532 ; ---------------------------------------------------------------------------
.text:0000000000007533                 align 20h
.text:0000000000007540
.text:0000000000007540 ; =============== S U B R O U T I N E =======================================
.text:0000000000007540
.text:0000000000007540
.text:0000000000007540                 public quotearg_n
.text:0000000000007540 quotearg_n      proc near
.text:0000000000007540 ; __unwind {
.text:0000000000007540                 lea     rcx, default_quoting_options
.text:0000000000007547                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000754E                 jmp     quotearg_n_options
.text:000000000000754E ; } // starts at 7540
.text:000000000000754E quotearg_n      endp
.text:000000000000754E
.text:000000000000754E ; ---------------------------------------------------------------------------
.text:0000000000007553                 align 20h
.text:0000000000007560
.text:0000000000007560 ; =============== S U B R O U T I N E =======================================
.text:0000000000007560
.text:0000000000007560
.text:0000000000007560                 public quotearg_n_mem
.text:0000000000007560 quotearg_n_mem  proc near
.text:0000000000007560 ; __unwind {
.text:0000000000007560                 lea     rcx, default_quoting_options
.text:0000000000007567                 jmp     quotearg_n_options
.text:0000000000007567 ; } // starts at 7560
.text:0000000000007567 quotearg_n_mem  endp
.text:0000000000007567
.text:0000000000007567 ; ---------------------------------------------------------------------------
.text:000000000000756C                 align 10h
.text:0000000000007570
.text:0000000000007570 ; =============== S U B R O U T I N E =======================================
.text:0000000000007570
.text:0000000000007570
.text:0000000000007570                 public quotearg
.text:0000000000007570 quotearg        proc near
.text:0000000000007570 ; __unwind {
.text:0000000000007570                 lea     rcx, default_quoting_options
.text:0000000000007577                 mov     rsi, rdi
.text:000000000000757A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000007581                 xor     edi, edi
.text:0000000000007583                 jmp     quotearg_n_options
.text:0000000000007583 ; } // starts at 7570
.text:0000000000007583 quotearg        endp
.text:0000000000007583
.text:0000000000007583 ; ---------------------------------------------------------------------------
.text:0000000000007588                 align 10h
.text:0000000000007590
.text:0000000000007590 ; =============== S U B R O U T I N E =======================================
.text:0000000000007590
.text:0000000000007590
.text:0000000000007590                 public quotearg_mem
.text:0000000000007590 quotearg_mem    proc near
.text:0000000000007590 ; __unwind {
.text:0000000000007590                 lea     rcx, default_quoting_options
.text:0000000000007597                 mov     rdx, rsi
.text:000000000000759A                 mov     rsi, rdi
.text:000000000000759D                 xor     edi, edi
.text:000000000000759F                 jmp     quotearg_n_options
.text:000000000000759F ; } // starts at 7590
.text:000000000000759F quotearg_mem    endp
.text:000000000000759F
.text:000000000000759F ; ---------------------------------------------------------------------------
.text:00000000000075A4                 align 10h
.text:00000000000075B0
.text:00000000000075B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075B0
.text:00000000000075B0 ; Attributes: info_from_lumina
.text:00000000000075B0
.text:00000000000075B0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000075B0                 public quotearg_n_style
.text:00000000000075B0 quotearg_n_style proc near              ; CODE XREF: argmatch_invalid+40↑p
.text:00000000000075B0                                         ; quotearg_style+7↓j
.text:00000000000075B0
.text:00000000000075B0 var_48          = dword ptr -48h
.text:00000000000075B0 var_44          = qword ptr -44h
.text:00000000000075B0 var_3C          = qword ptr -3Ch
.text:00000000000075B0 var_34          = qword ptr -34h
.text:00000000000075B0 var_2C          = qword ptr -2Ch
.text:00000000000075B0 var_24          = qword ptr -24h
.text:00000000000075B0 var_1C          = qword ptr -1Ch
.text:00000000000075B0 var_14          = dword ptr -14h
.text:00000000000075B0 var_10          = qword ptr -10h
.text:00000000000075B0
.text:00000000000075B0 ; __unwind {
.text:00000000000075B0                 sub     rsp, 48h
.text:00000000000075B4                 mov     rax, rdx
.text:00000000000075B7                 mov     rdx, fs:28h
.text:00000000000075C0                 mov     [rsp+48h+var_10], rdx
.text:00000000000075C5                 xor     edx, edx
.text:00000000000075C7                 cmp     esi, 0Ah
.text:00000000000075CA                 jz      short loc_7634
.text:00000000000075CC                 mov     [rsp+48h+var_48], esi
.text:00000000000075CF                 mov     rcx, rsp
.text:00000000000075D2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000075D9                 mov     rsi, rax
.text:00000000000075DC                 mov     [rsp+48h+var_44], 0
.text:00000000000075E5                 mov     [rsp+48h+var_3C], 0
.text:00000000000075EE                 mov     [rsp+48h+var_34], 0
.text:00000000000075F7                 mov     [rsp+48h+var_2C], 0
.text:0000000000007600                 mov     [rsp+48h+var_24], 0
.text:0000000000007609                 mov     [rsp+48h+var_1C], 0
.text:0000000000007612                 mov     [rsp+48h+var_14], 0
.text:000000000000761A                 call    quotearg_n_options
.text:000000000000761F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000007624                 xor     rcx, fs:28h
.text:000000000000762D                 jnz     short loc_7639
.text:000000000000762F                 add     rsp, 48h
.text:0000000000007633                 retn
.text:0000000000007634 ; ---------------------------------------------------------------------------
.text:0000000000007634
.text:0000000000007634 loc_7634:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000007634                 call    _abort
.text:0000000000007639 ; ---------------------------------------------------------------------------
.text:0000000000007639
.text:0000000000007639 loc_7639:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000007639                 call    ___stack_chk_fail
.text:0000000000007639 ; } // starts at 75B0
.text:0000000000007639 quotearg_n_style endp
.text:0000000000007639
.text:0000000000007639 ; ---------------------------------------------------------------------------
.text:000000000000763E                 align 20h
.text:0000000000007640
.text:0000000000007640 ; =============== S U B R O U T I N E =======================================
.text:0000000000007640
.text:0000000000007640 ; Attributes: info_from_lumina
.text:0000000000007640
.text:0000000000007640 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000007640                 public quotearg_n_style_mem
.text:0000000000007640 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000007640
.text:0000000000007640 var_48          = dword ptr -48h
.text:0000000000007640 var_44          = qword ptr -44h
.text:0000000000007640 var_3C          = qword ptr -3Ch
.text:0000000000007640 var_34          = qword ptr -34h
.text:0000000000007640 var_2C          = qword ptr -2Ch
.text:0000000000007640 var_24          = qword ptr -24h
.text:0000000000007640 var_1C          = qword ptr -1Ch
.text:0000000000007640 var_14          = dword ptr -14h
.text:0000000000007640 var_10          = qword ptr -10h
.text:0000000000007640
.text:0000000000007640 ; __unwind {
.text:0000000000007640                 sub     rsp, 48h
.text:0000000000007644                 mov     rax, rdx
.text:0000000000007647                 mov     rdx, rcx
.text:000000000000764A                 mov     rcx, fs:28h
.text:0000000000007653                 mov     [rsp+48h+var_10], rcx
.text:0000000000007658                 xor     ecx, ecx
.text:000000000000765A                 cmp     esi, 0Ah
.text:000000000000765D                 jz      short loc_76C0
.text:000000000000765F                 mov     [rsp+48h+var_48], esi
.text:0000000000007662                 mov     rcx, rsp
.text:0000000000007665                 mov     rsi, rax
.text:0000000000007668                 mov     [rsp+48h+var_44], 0
.text:0000000000007671                 mov     [rsp+48h+var_3C], 0
.text:000000000000767A                 mov     [rsp+48h+var_34], 0
.text:0000000000007683                 mov     [rsp+48h+var_2C], 0
.text:000000000000768C                 mov     [rsp+48h+var_24], 0
.text:0000000000007695                 mov     [rsp+48h+var_1C], 0
.text:000000000000769E                 mov     [rsp+48h+var_14], 0
.text:00000000000076A6                 call    quotearg_n_options
.text:00000000000076AB                 mov     rdx, [rsp+48h+var_10]
.text:00000000000076B0                 xor     rdx, fs:28h
.text:00000000000076B9                 jnz     short loc_76C5
.text:00000000000076BB                 add     rsp, 48h
.text:00000000000076BF                 retn
.text:00000000000076C0 ; ---------------------------------------------------------------------------
.text:00000000000076C0
.text:00000000000076C0 loc_76C0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000076C0                 call    _abort
.text:00000000000076C5 ; ---------------------------------------------------------------------------
.text:00000000000076C5
.text:00000000000076C5 loc_76C5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000076C5                 call    ___stack_chk_fail
.text:00000000000076C5 ; } // starts at 7640
.text:00000000000076C5 quotearg_n_style_mem endp
.text:00000000000076C5
.text:00000000000076C5 ; ---------------------------------------------------------------------------
.text:00000000000076CA                 align 10h
.text:00000000000076D0
.text:00000000000076D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076D0
.text:00000000000076D0
.text:00000000000076D0                 public quotearg_style
.text:00000000000076D0 quotearg_style  proc near
.text:00000000000076D0 ; __unwind {
.text:00000000000076D0                 mov     rdx, rsi
.text:00000000000076D3                 mov     esi, edi
.text:00000000000076D5                 xor     edi, edi
.text:00000000000076D7                 jmp     quotearg_n_style
.text:00000000000076D7 ; } // starts at 76D0
.text:00000000000076D7 quotearg_style  endp
.text:00000000000076D7
.text:00000000000076D7 ; ---------------------------------------------------------------------------
.text:00000000000076DC                 align 20h
.text:00000000000076E0
.text:00000000000076E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076E0
.text:00000000000076E0
.text:00000000000076E0                 public quotearg_style_mem
.text:00000000000076E0 quotearg_style_mem proc near
.text:00000000000076E0 ; __unwind {
.text:00000000000076E0                 mov     rcx, rdx
.text:00000000000076E3                 mov     rdx, rsi
.text:00000000000076E6                 mov     esi, edi
.text:00000000000076E8                 xor     edi, edi
.text:00000000000076EA                 jmp     quotearg_n_style_mem
.text:00000000000076EA ; } // starts at 76E0
.text:00000000000076EA quotearg_style_mem endp
.text:00000000000076EA
.text:00000000000076EA ; ---------------------------------------------------------------------------
.text:00000000000076EF                 align 10h
.text:00000000000076F0
.text:00000000000076F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076F0
.text:00000000000076F0 ; Attributes: info_from_lumina
.text:00000000000076F0
.text:00000000000076F0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000076F0                 public quotearg_char_mem
.text:00000000000076F0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000076F0                                         ; quotearg_colon+C↓j ...
.text:00000000000076F0
.text:00000000000076F0 var_48          = xmmword ptr -48h
.text:00000000000076F0 var_38          = xmmword ptr -38h
.text:00000000000076F0 var_28          = xmmword ptr -28h
.text:00000000000076F0 var_18          = qword ptr -18h
.text:00000000000076F0 var_10          = qword ptr -10h
.text:00000000000076F0
.text:00000000000076F0 ; __unwind {
.text:00000000000076F0                 sub     rsp, 48h
.text:00000000000076F4                 mov     ecx, edx
.text:00000000000076F6                 mov     rax, fs:28h
.text:00000000000076FF                 mov     [rsp+48h+var_10], rax
.text:0000000000007704                 xor     eax, eax
.text:0000000000007706                 mov     rax, cs:qword_20D270
.text:000000000000770D                 mov     r8, rsp
.text:0000000000007710                 and     ecx, 1Fh
.text:0000000000007713                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000771B                 mov     [rsp+48h+var_18], rax
.text:0000000000007720                 mov     eax, edx
.text:0000000000007722                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000007726                 shr     al, 5
.text:0000000000007729                 movzx   eax, al
.text:000000000000772C                 lea     r9, [r8+rax*4+8]
.text:0000000000007731                 movdqa  xmm0, cs:xmmword_20D250
.text:0000000000007739                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000773E                 movdqa  xmm0, cs:xmmword_20D260
.text:0000000000007746                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000774B                 mov     edx, [r9]
.text:000000000000774E                 mov     eax, edx
.text:0000000000007750                 shr     eax, cl
.text:0000000000007752                 not     eax
.text:0000000000007754                 and     eax, 1
.text:0000000000007757                 shl     eax, cl
.text:0000000000007759                 mov     rcx, r8
.text:000000000000775C                 xor     eax, edx
.text:000000000000775E                 mov     rdx, rsi
.text:0000000000007761                 mov     rsi, rdi
.text:0000000000007764                 mov     [r9], eax
.text:0000000000007767                 xor     edi, edi
.text:0000000000007769                 call    quotearg_n_options
.text:000000000000776E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000007773                 xor     rsi, fs:28h
.text:000000000000777C                 jnz     short loc_7783
.text:000000000000777E                 add     rsp, 48h
.text:0000000000007782                 retn
.text:0000000000007783 ; ---------------------------------------------------------------------------
.text:0000000000007783
.text:0000000000007783 loc_7783:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000007783                 call    ___stack_chk_fail
.text:0000000000007783 ; } // starts at 76F0
.text:0000000000007783 quotearg_char_mem endp
.text:0000000000007783
.text:0000000000007783 ; ---------------------------------------------------------------------------
.text:0000000000007788                 align 10h
.text:0000000000007790
.text:0000000000007790 ; =============== S U B R O U T I N E =======================================
.text:0000000000007790
.text:0000000000007790
.text:0000000000007790                 public quotearg_char
.text:0000000000007790 quotearg_char   proc near
.text:0000000000007790 ; __unwind {
.text:0000000000007790                 movsx   edx, sil
.text:0000000000007794                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000779B                 jmp     quotearg_char_mem
.text:000000000000779B ; } // starts at 7790
.text:000000000000779B quotearg_char   endp
.text:000000000000779B
.text:00000000000077A0
.text:00000000000077A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077A0
.text:00000000000077A0
.text:00000000000077A0                 public quotearg_colon
.text:00000000000077A0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:00000000000077A0 ; __unwind {
.text:00000000000077A0                 mov     edx, 3Ah ; ':'
.text:00000000000077A5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:00000000000077AC                 jmp     quotearg_char_mem
.text:00000000000077AC ; } // starts at 77A0
.text:00000000000077AC quotearg_colon  endp
.text:00000000000077AC
.text:00000000000077AC ; ---------------------------------------------------------------------------
.text:00000000000077B1                 align 20h
.text:00000000000077C0
.text:00000000000077C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077C0
.text:00000000000077C0
.text:00000000000077C0                 public quotearg_colon_mem
.text:00000000000077C0 quotearg_colon_mem proc near
.text:00000000000077C0 ; __unwind {
.text:00000000000077C0                 mov     edx, 3Ah ; ':'
.text:00000000000077C5                 jmp     quotearg_char_mem
.text:00000000000077C5 ; } // starts at 77C0
.text:00000000000077C5 quotearg_colon_mem endp
.text:00000000000077C5
.text:00000000000077C5 ; ---------------------------------------------------------------------------
.text:00000000000077CA                 align 10h
.text:00000000000077D0
.text:00000000000077D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077D0
.text:00000000000077D0 ; Attributes: info_from_lumina
.text:00000000000077D0
.text:00000000000077D0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000077D0                 public quotearg_n_style_colon
.text:00000000000077D0 quotearg_n_style_colon proc near        ; CODE XREF: main+684↑p
.text:00000000000077D0                                         ; main+8BC↑p ...
.text:00000000000077D0
.text:00000000000077D0 var_48          = dword ptr -48h
.text:00000000000077D0 var_44          = qword ptr -44h
.text:00000000000077D0 var_3C          = qword ptr -3Ch
.text:00000000000077D0 var_34          = qword ptr -34h
.text:00000000000077D0 var_2C          = qword ptr -2Ch
.text:00000000000077D0 var_24          = qword ptr -24h
.text:00000000000077D0 var_1C          = qword ptr -1Ch
.text:00000000000077D0 var_14          = dword ptr -14h
.text:00000000000077D0 var_10          = qword ptr -10h
.text:00000000000077D0
.text:00000000000077D0 ; __unwind {
.text:00000000000077D0                 sub     rsp, 48h
.text:00000000000077D4                 mov     rax, rdx
.text:00000000000077D7                 mov     rdx, fs:28h
.text:00000000000077E0                 mov     [rsp+48h+var_10], rdx
.text:00000000000077E5                 xor     edx, edx
.text:00000000000077E7                 cmp     esi, 0Ah
.text:00000000000077EA                 jz      short loc_7854
.text:00000000000077EC                 mov     [rsp+48h+var_48], esi
.text:00000000000077EF                 mov     rcx, rsp
.text:00000000000077F2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000077F9                 mov     rsi, rax
.text:00000000000077FC                 mov     [rsp+48h+var_44], 0
.text:0000000000007805                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000780E                 mov     [rsp+48h+var_34], 0
.text:0000000000007817                 mov     [rsp+48h+var_2C], 0
.text:0000000000007820                 mov     [rsp+48h+var_24], 0
.text:0000000000007829                 mov     [rsp+48h+var_1C], 0
.text:0000000000007832                 mov     [rsp+48h+var_14], 0
.text:000000000000783A                 call    quotearg_n_options
.text:000000000000783F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000007844                 xor     rcx, fs:28h
.text:000000000000784D                 jnz     short loc_7859
.text:000000000000784F                 add     rsp, 48h
.text:0000000000007853                 retn
.text:0000000000007854 ; ---------------------------------------------------------------------------
.text:0000000000007854
.text:0000000000007854 loc_7854:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000007854                 call    _abort
.text:0000000000007859 ; ---------------------------------------------------------------------------
.text:0000000000007859
.text:0000000000007859 loc_7859:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000007859                 call    ___stack_chk_fail
.text:0000000000007859 ; } // starts at 77D0
.text:0000000000007859 quotearg_n_style_colon endp
.text:0000000000007859
.text:0000000000007859 ; ---------------------------------------------------------------------------
.text:000000000000785E                 align 20h
.text:0000000000007860
.text:0000000000007860 ; =============== S U B R O U T I N E =======================================
.text:0000000000007860
.text:0000000000007860 ; Attributes: info_from_lumina
.text:0000000000007860
.text:0000000000007860 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000007860                 public quotearg_n_custom_mem
.text:0000000000007860 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000007860                                         ; quotearg_custom+12↓j ...
.text:0000000000007860
.text:0000000000007860 var_48          = xmmword ptr -48h
.text:0000000000007860 var_38          = xmmword ptr -38h
.text:0000000000007860 var_28          = xmmword ptr -28h
.text:0000000000007860 var_18          = qword ptr -18h
.text:0000000000007860 var_10          = qword ptr -10h
.text:0000000000007860
.text:0000000000007860 ; __unwind {
.text:0000000000007860                 sub     rsp, 48h
.text:0000000000007864                 mov     r9, rcx
.text:0000000000007867                 mov     rcx, cs:qword_20D270
.text:000000000000786E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000007876                 mov     rax, fs:28h
.text:000000000000787F                 mov     [rsp+48h+var_10], rax
.text:0000000000007884                 xor     eax, eax
.text:0000000000007886                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000788A                 test    rsi, rsi
.text:000000000000788D                 mov     [rsp+48h+var_18], rcx
.text:0000000000007892                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000007899                 movdqa  xmm0, cs:xmmword_20D250
.text:00000000000078A1                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000078A6                 movdqa  xmm0, cs:xmmword_20D260
.text:00000000000078AE                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000078B3                 jz      short loc_78E7
.text:00000000000078B5                 test    rdx, rdx
.text:00000000000078B8                 jz      short loc_78E7
.text:00000000000078BA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000078BF                 mov     [rsp+48h+var_18], rdx
.text:00000000000078C4                 mov     rcx, rsp
.text:00000000000078C7                 mov     rdx, r8
.text:00000000000078CA                 mov     rsi, r9
.text:00000000000078CD                 call    quotearg_n_options
.text:00000000000078D2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000078D7                 xor     rdi, fs:28h
.text:00000000000078E0                 jnz     short loc_78EC
.text:00000000000078E2                 add     rsp, 48h
.text:00000000000078E6                 retn
.text:00000000000078E7 ; ---------------------------------------------------------------------------
.text:00000000000078E7
.text:00000000000078E7 loc_78E7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000078E7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000078E7                 call    _abort
.text:00000000000078EC ; ---------------------------------------------------------------------------
.text:00000000000078EC
.text:00000000000078EC loc_78EC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000078EC                 call    ___stack_chk_fail
.text:00000000000078EC ; } // starts at 7860
.text:00000000000078EC quotearg_n_custom_mem endp
.text:00000000000078EC
.text:00000000000078EC ; ---------------------------------------------------------------------------
.text:00000000000078F1                 align 20h
.text:0000000000007900
.text:0000000000007900 ; =============== S U B R O U T I N E =======================================
.text:0000000000007900
.text:0000000000007900
.text:0000000000007900                 public quotearg_n_custom
.text:0000000000007900 quotearg_n_custom proc near
.text:0000000000007900 ; __unwind {
.text:0000000000007900                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000007907                 jmp     quotearg_n_custom_mem
.text:0000000000007907 ; } // starts at 7900
.text:0000000000007907 quotearg_n_custom endp
.text:0000000000007907
.text:0000000000007907 ; ---------------------------------------------------------------------------
.text:000000000000790C                 align 10h
.text:0000000000007910
.text:0000000000007910 ; =============== S U B R O U T I N E =======================================
.text:0000000000007910
.text:0000000000007910
.text:0000000000007910                 public quotearg_custom
.text:0000000000007910 quotearg_custom proc near
.text:0000000000007910 ; __unwind {
.text:0000000000007910                 mov     rcx, rdx
.text:0000000000007913                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000791A                 mov     rdx, rsi
.text:000000000000791D                 mov     rsi, rdi
.text:0000000000007920                 xor     edi, edi
.text:0000000000007922                 jmp     quotearg_n_custom_mem
.text:0000000000007922 ; } // starts at 7910
.text:0000000000007922 quotearg_custom endp
.text:0000000000007922
.text:0000000000007922 ; ---------------------------------------------------------------------------
.text:0000000000007927                 align 10h
.text:0000000000007930
.text:0000000000007930 ; =============== S U B R O U T I N E =======================================
.text:0000000000007930
.text:0000000000007930
.text:0000000000007930                 public quotearg_custom_mem
.text:0000000000007930 quotearg_custom_mem proc near
.text:0000000000007930 ; __unwind {
.text:0000000000007930                 mov     r8, rcx
.text:0000000000007933                 mov     rcx, rdx
.text:0000000000007936                 mov     rdx, rsi
.text:0000000000007939                 mov     rsi, rdi
.text:000000000000793C                 xor     edi, edi
.text:000000000000793E                 jmp     quotearg_n_custom_mem
.text:000000000000793E ; } // starts at 7930
.text:000000000000793E quotearg_custom_mem endp
.text:000000000000793E
.text:000000000000793E ; ---------------------------------------------------------------------------
.text:0000000000007943                 align 10h
.text:0000000000007950
.text:0000000000007950 ; =============== S U B R O U T I N E =======================================
.text:0000000000007950
.text:0000000000007950
.text:0000000000007950                 public quote_n_mem
.text:0000000000007950 quote_n_mem     proc near
.text:0000000000007950 ; __unwind {
.text:0000000000007950                 lea     rcx, quote_quoting_options
.text:0000000000007957                 jmp     quotearg_n_options
.text:0000000000007957 ; } // starts at 7950
.text:0000000000007957 quote_n_mem     endp
.text:0000000000007957
.text:0000000000007957 ; ---------------------------------------------------------------------------
.text:000000000000795C                 align 20h
.text:0000000000007960
.text:0000000000007960 ; =============== S U B R O U T I N E =======================================
.text:0000000000007960
.text:0000000000007960
.text:0000000000007960                 public quote_mem
.text:0000000000007960 quote_mem       proc near
.text:0000000000007960 ; __unwind {
.text:0000000000007960                 lea     rcx, quote_quoting_options
.text:0000000000007967                 mov     rdx, rsi
.text:000000000000796A                 mov     rsi, rdi
.text:000000000000796D                 xor     edi, edi
.text:000000000000796F                 jmp     quotearg_n_options
.text:000000000000796F ; } // starts at 7960
.text:000000000000796F quote_mem       endp
.text:000000000000796F
.text:000000000000796F ; ---------------------------------------------------------------------------
.text:0000000000007974                 align 20h
.text:0000000000007980
.text:0000000000007980 ; =============== S U B R O U T I N E =======================================
.text:0000000000007980
.text:0000000000007980
.text:0000000000007980                 public quote_n
.text:0000000000007980 quote_n         proc near               ; CODE XREF: argmatch_invalid+2E↑p
.text:0000000000007980 ; __unwind {
.text:0000000000007980                 lea     rcx, quote_quoting_options
.text:0000000000007987                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000798E                 jmp     quotearg_n_options
.text:000000000000798E ; } // starts at 7980
.text:000000000000798E quote_n         endp
.text:000000000000798E
.text:000000000000798E ; ---------------------------------------------------------------------------
.text:0000000000007993                 align 20h
.text:00000000000079A0
.text:00000000000079A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079A0
.text:00000000000079A0
.text:00000000000079A0                 public quote
.text:00000000000079A0 quote           proc near               ; CODE XREF: main+28E↑p
.text:00000000000079A0                                         ; main+1360↑p ...
.text:00000000000079A0 ; __unwind {
.text:00000000000079A0                 lea     rcx, quote_quoting_options
.text:00000000000079A7                 mov     rsi, rdi
.text:00000000000079AA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000079B1                 xor     edi, edi
.text:00000000000079B3                 jmp     quotearg_n_options
.text:00000000000079B3 ; } // starts at 79A0
.text:00000000000079B3 quote           endp
.text:00000000000079B3
.text:00000000000079B3 ; ---------------------------------------------------------------------------
.text:00000000000079B8                 align 20h
.text:00000000000079C0
.text:00000000000079C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079C0
.text:00000000000079C0
.text:00000000000079C0                 public dup_safer
.text:00000000000079C0 dup_safer       proc near               ; CODE XREF: fopen_safer+32↑p
.text:00000000000079C0 ; __unwind {
.text:00000000000079C0                 mov     edx, 3
.text:00000000000079C5                 xor     esi, esi
.text:00000000000079C7                 xor     eax, eax
.text:00000000000079C9                 jmp     rpl_fcntl
.text:00000000000079C9 ; } // starts at 79C0
.text:00000000000079C9 dup_safer       endp
.text:00000000000079C9
.text:00000000000079C9 ; ---------------------------------------------------------------------------
.text:00000000000079CE                 align 10h
.text:00000000000079D0
.text:00000000000079D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000079D0
.text:00000000000079D0
.text:00000000000079D0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000079D0                 public version_etc_arn
.text:00000000000079D0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_7E0B↓j
.text:00000000000079D0                                         ; version_etc_va:loc_7E5B↓p ...
.text:00000000000079D0
.text:00000000000079D0 var_58          = qword ptr -58h
.text:00000000000079D0 var_50          = qword ptr -50h
.text:00000000000079D0 var_48          = qword ptr -48h
.text:00000000000079D0 var_40          = qword ptr -40h
.text:00000000000079D0
.text:00000000000079D0 ; __unwind {
.text:00000000000079D0                 push    r15
.text:00000000000079D2                 push    r14
.text:00000000000079D4                 push    r13
.text:00000000000079D6                 push    r12
.text:00000000000079D8                 mov     r12, r9
.text:00000000000079DB                 push    rbp
.text:00000000000079DC                 push    rbx
.text:00000000000079DD                 mov     rbp, rdi
.text:00000000000079E0                 mov     rbx, r8
.text:00000000000079E3                 sub     rsp, 28h
.text:00000000000079E7                 test    rsi, rsi
.text:00000000000079EA                 jz      loc_7B08
.text:00000000000079F0                 mov     r8, rdx
.text:00000000000079F3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000079FA                 mov     r9, rcx
.text:00000000000079FD                 xor     eax, eax
.text:00000000000079FF                 mov     rcx, rsi
.text:0000000000007A02                 mov     esi, 1
.text:0000000000007A07                 call    ___fprintf_chk
.text:0000000000007A0C
.text:0000000000007A0C loc_7A0C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000007A0C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000007A13                 xor     edi, edi        ; domainname
.text:0000000000007A15                 mov     edx, 5          ; category
.text:0000000000007A1A                 call    _dcgettext
.text:0000000000007A1F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000007A26                 mov     rcx, rax
.text:0000000000007A29                 mov     r8d, 7E3h
.text:0000000000007A2F                 mov     esi, 1
.text:0000000000007A34                 mov     rdi, rbp
.text:0000000000007A37                 xor     eax, eax
.text:0000000000007A39                 call    ___fprintf_chk
.text:0000000000007A3E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000007A45                 xor     edi, edi        ; domainname
.text:0000000000007A47                 mov     edx, 5          ; category
.text:0000000000007A4C                 call    _dcgettext
.text:0000000000007A51                 mov     rsi, rbp        ; stream
.text:0000000000007A54                 mov     rdi, rax        ; s
.text:0000000000007A57                 call    _fputs_unlocked
.text:0000000000007A5C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000007A60                 ja      def_7A74        ; jumptable 0000000000007A74 default case
.text:0000000000007A66                 lea     rdx, jpt_7A74
.text:0000000000007A6D                 movsxd  rax, ds:(jpt_7A74 - 0A744h)[rdx+r12*4]
.text:0000000000007A71                 add     rax, rdx
.text:0000000000007A74                 jmp     rax             ; switch jump
.text:0000000000007A74 ; ---------------------------------------------------------------------------
.text:0000000000007A76                 align 20h
.text:0000000000007A80
.text:0000000000007A80 loc_7A80:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007A80                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007A80                 mov     r9, [rbx+38h]   ; jumptable 0000000000007A74 case 8
.text:0000000000007A84                 mov     rax, [rbx+10h]
.text:0000000000007A88                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000007A8F                 mov     r8, [rbx+8]
.text:0000000000007A93                 mov     edx, 5          ; category
.text:0000000000007A98                 xor     edi, edi        ; domainname
.text:0000000000007A9A                 mov     r13, [rbx+30h]
.text:0000000000007A9E                 mov     r12, [rbx+28h]
.text:0000000000007AA2                 mov     [rsp+58h+var_48], r9
.text:0000000000007AA7                 mov     r15, [rbx+20h]
.text:0000000000007AAB                 mov     r14, [rbx+18h]
.text:0000000000007AAF                 mov     [rsp+58h+var_58], rax
.text:0000000000007AB3                 mov     [rsp+58h+var_50], r8
.text:0000000000007AB8                 mov     rbx, [rbx]
.text:0000000000007ABB                 call    _dcgettext
.text:0000000000007AC0                 sub     rsp, 8
.text:0000000000007AC4
.text:0000000000007AC4 loc_7AC4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000007AC4                 mov     r9, [rsp+60h+var_48]
.text:0000000000007AC9                 mov     rdx, rax
.text:0000000000007ACC                 mov     rcx, rbx
.text:0000000000007ACF                 mov     esi, 1
.text:0000000000007AD4                 mov     rdi, rbp
.text:0000000000007AD7                 xor     eax, eax
.text:0000000000007AD9                 push    r9
.text:0000000000007ADB                 push    r13
.text:0000000000007ADD                 push    r12
.text:0000000000007ADF                 push    r15
.text:0000000000007AE1                 push    r14
.text:0000000000007AE3                 mov     r9, [rsp+88h+var_58]
.text:0000000000007AE8                 mov     r8, [rsp+88h+var_50]
.text:0000000000007AED                 call    ___fprintf_chk
.text:0000000000007AF2                 add     rsp, 30h
.text:0000000000007AF6
.text:0000000000007AF6 loc_7AF6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007AF6                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007AF6                 add     rsp, 28h        ; jumptable 0000000000007A74 case 0
.text:0000000000007AFA                 pop     rbx
.text:0000000000007AFB                 pop     rbp
.text:0000000000007AFC                 pop     r12
.text:0000000000007AFE                 pop     r13
.text:0000000000007B00                 pop     r14
.text:0000000000007B02                 pop     r15
.text:0000000000007B04                 retn
.text:0000000000007B04 ; ---------------------------------------------------------------------------
.text:0000000000007B05                 align 8
.text:0000000000007B08
.text:0000000000007B08 loc_7B08:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000007B08                 mov     r8, rcx
.text:0000000000007B0B                 mov     rcx, rdx
.text:0000000000007B0E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000007B15                 mov     esi, 1
.text:0000000000007B1A                 xor     eax, eax
.text:0000000000007B1C                 call    ___fprintf_chk
.text:0000000000007B21                 jmp     loc_7A0C
.text:0000000000007B21 ; ---------------------------------------------------------------------------
.text:0000000000007B26                 align 10h
.text:0000000000007B30
.text:0000000000007B30 loc_7B30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007B30                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007B30                 mov     r10, [rbx+40h]  ; jumptable 0000000000007A74 case 9
.text:0000000000007B34                 mov     r9, [rbx+38h]
.text:0000000000007B38                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000007B3F                 mov     rax, [rbx+10h]
.text:0000000000007B43                 mov     r8, [rbx+8]
.text:0000000000007B47                 mov     edx, 5          ; category
.text:0000000000007B4C                 mov     r13, [rbx+30h]
.text:0000000000007B50                 mov     r12, [rbx+28h]
.text:0000000000007B54                 mov     r15, [rbx+20h]
.text:0000000000007B58                 mov     r14, [rbx+18h]
.text:0000000000007B5C                 mov     rbx, [rbx]
.text:0000000000007B5F                 mov     [rsp+58h+var_40], r10
.text:0000000000007B64                 mov     [rsp+58h+var_48], r9
.text:0000000000007B69                 mov     [rsp+58h+var_58], rax
.text:0000000000007B6D                 mov     [rsp+58h+var_50], r8
.text:0000000000007B72
.text:0000000000007B72 loc_7B72:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000007B72                 xor     edi, edi        ; domainname
.text:0000000000007B74                 call    _dcgettext
.text:0000000000007B79                 mov     r10, [rsp+58h+var_40]
.text:0000000000007B7E                 push    r10
.text:0000000000007B80                 jmp     loc_7AC4
.text:0000000000007B80 ; ---------------------------------------------------------------------------
.text:0000000000007B85                 align 8
.text:0000000000007B88
.text:0000000000007B88 loc_7B88:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007B88                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007B88                 mov     rbx, [rbx]      ; jumptable 0000000000007A74 case 1
.text:0000000000007B8B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000007B92                 mov     edx, 5          ; category
.text:0000000000007B97                 xor     edi, edi        ; domainname
.text:0000000000007B99                 call    _dcgettext
.text:0000000000007B9E                 add     rsp, 28h
.text:0000000000007BA2                 mov     rcx, rbx
.text:0000000000007BA5                 mov     rdi, rbp
.text:0000000000007BA8                 pop     rbx
.text:0000000000007BA9                 pop     rbp
.text:0000000000007BAA                 pop     r12
.text:0000000000007BAC                 pop     r13
.text:0000000000007BAE                 pop     r14
.text:0000000000007BB0                 pop     r15
.text:0000000000007BB2                 mov     rdx, rax
.text:0000000000007BB5                 mov     esi, 1
.text:0000000000007BBA                 xor     eax, eax
.text:0000000000007BBC                 jmp     ___fprintf_chk
.text:0000000000007BBC ; ---------------------------------------------------------------------------
.text:0000000000007BC1                 align 8
.text:0000000000007BC8
.text:0000000000007BC8 loc_7BC8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007BC8                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007BC8                 mov     r12, [rbx+8]    ; jumptable 0000000000007A74 case 2
.text:0000000000007BCC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000007BD3                 mov     rbx, [rbx]
.text:0000000000007BD6                 mov     edx, 5          ; category
.text:0000000000007BDB                 xor     edi, edi        ; domainname
.text:0000000000007BDD                 call    _dcgettext
.text:0000000000007BE2                 add     rsp, 28h
.text:0000000000007BE6                 mov     r8, r12
.text:0000000000007BE9                 mov     rcx, rbx
.text:0000000000007BEC                 mov     rdi, rbp
.text:0000000000007BEF                 mov     rdx, rax
.text:0000000000007BF2                 mov     esi, 1
.text:0000000000007BF7                 pop     rbx
.text:0000000000007BF8                 pop     rbp
.text:0000000000007BF9                 pop     r12
.text:0000000000007BFB                 pop     r13
.text:0000000000007BFD                 pop     r14
.text:0000000000007BFF                 pop     r15
.text:0000000000007C01                 xor     eax, eax
.text:0000000000007C03                 jmp     ___fprintf_chk
.text:0000000000007C03 ; ---------------------------------------------------------------------------
.text:0000000000007C08                 align 10h
.text:0000000000007C10
.text:0000000000007C10 loc_7C10:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007C10                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007C10                 mov     r13, [rbx+10h]  ; jumptable 0000000000007A74 case 3
.text:0000000000007C14                 mov     r12, [rbx+8]
.text:0000000000007C18                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000007C1F                 mov     rbx, [rbx]
.text:0000000000007C22                 mov     edx, 5          ; category
.text:0000000000007C27                 xor     edi, edi        ; domainname
.text:0000000000007C29                 call    _dcgettext
.text:0000000000007C2E                 add     rsp, 28h
.text:0000000000007C32                 mov     r9, r13
.text:0000000000007C35                 mov     r8, r12
.text:0000000000007C38                 mov     rcx, rbx
.text:0000000000007C3B                 mov     rdi, rbp
.text:0000000000007C3E                 mov     rdx, rax
.text:0000000000007C41                 pop     rbx
.text:0000000000007C42                 pop     rbp
.text:0000000000007C43                 pop     r12
.text:0000000000007C45                 pop     r13
.text:0000000000007C47                 pop     r14
.text:0000000000007C49                 pop     r15
.text:0000000000007C4B                 mov     esi, 1
.text:0000000000007C50                 xor     eax, eax
.text:0000000000007C52                 jmp     ___fprintf_chk
.text:0000000000007C52 ; ---------------------------------------------------------------------------
.text:0000000000007C57                 align 20h
.text:0000000000007C60
.text:0000000000007C60 loc_7C60:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007C60                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007C60                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000007A74 case 4
.text:0000000000007C67                 mov     edx, 5          ; category
.text:0000000000007C6C                 xor     edi, edi        ; domainname
.text:0000000000007C6E                 mov     r14, [rbx+18h]
.text:0000000000007C72                 mov     r13, [rbx+10h]
.text:0000000000007C76                 mov     r12, [rbx+8]
.text:0000000000007C7A                 mov     rbx, [rbx]
.text:0000000000007C7D                 call    _dcgettext
.text:0000000000007C82                 sub     rsp, 8
.text:0000000000007C86
.text:0000000000007C86 loc_7C86:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000007C86                 push    r14
.text:0000000000007C88                 mov     rdx, rax
.text:0000000000007C8B                 mov     r9, r13
.text:0000000000007C8E                 mov     r8, r12
.text:0000000000007C91                 mov     rcx, rbx
.text:0000000000007C94                 mov     rdi, rbp
.text:0000000000007C97                 mov     esi, 1
.text:0000000000007C9C                 xor     eax, eax
.text:0000000000007C9E                 call    ___fprintf_chk
.text:0000000000007CA3                 pop     rax
.text:0000000000007CA4                 pop     rdx
.text:0000000000007CA5                 add     rsp, 28h
.text:0000000000007CA9                 pop     rbx
.text:0000000000007CAA                 pop     rbp
.text:0000000000007CAB                 pop     r12
.text:0000000000007CAD                 pop     r13
.text:0000000000007CAF                 pop     r14
.text:0000000000007CB1                 pop     r15
.text:0000000000007CB3                 retn
.text:0000000000007CB3 ; ---------------------------------------------------------------------------
.text:0000000000007CB4                 align 8
.text:0000000000007CB8
.text:0000000000007CB8 loc_7CB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007CB8                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007CB8                 mov     r15, [rbx+20h]  ; jumptable 0000000000007A74 case 5
.text:0000000000007CBC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000007CC3                 mov     edx, 5          ; category
.text:0000000000007CC8                 xor     edi, edi        ; domainname
.text:0000000000007CCA                 mov     r14, [rbx+18h]
.text:0000000000007CCE                 mov     r13, [rbx+10h]
.text:0000000000007CD2                 mov     r12, [rbx+8]
.text:0000000000007CD6                 mov     rbx, [rbx]
.text:0000000000007CD9                 call    _dcgettext
.text:0000000000007CDE                 push    r15
.text:0000000000007CE0                 jmp     short loc_7C86
.text:0000000000007CE0 ; ---------------------------------------------------------------------------
.text:0000000000007CE2                 align 8
.text:0000000000007CE8
.text:0000000000007CE8 loc_7CE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007CE8                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007CE8                 mov     r8, [rbx+8]     ; jumptable 0000000000007A74 case 6
.text:0000000000007CEC                 mov     r12, [rbx+28h]
.text:0000000000007CF0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000007CF7                 mov     r15, [rbx+20h]
.text:0000000000007CFB                 mov     r14, [rbx+18h]
.text:0000000000007CFF                 mov     edx, 5          ; category
.text:0000000000007D04                 mov     r13, [rbx+10h]
.text:0000000000007D08                 xor     edi, edi        ; domainname
.text:0000000000007D0A                 mov     rbx, [rbx]
.text:0000000000007D0D                 mov     [rsp+58h+var_58], r8
.text:0000000000007D11                 call    _dcgettext
.text:0000000000007D16                 sub     rsp, 8
.text:0000000000007D1A                 mov     r9, r13
.text:0000000000007D1D                 push    r12
.text:0000000000007D1F                 push    r15
.text:0000000000007D21                 push    r14
.text:0000000000007D23
.text:0000000000007D23 loc_7D23:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000007D23                 mov     r8, [rsp+78h+var_58]
.text:0000000000007D28                 mov     rcx, rbx
.text:0000000000007D2B                 mov     rdx, rax
.text:0000000000007D2E                 mov     rdi, rbp
.text:0000000000007D31                 mov     esi, 1
.text:0000000000007D36                 xor     eax, eax
.text:0000000000007D38                 call    ___fprintf_chk
.text:0000000000007D3D                 add     rsp, 20h
.text:0000000000007D41                 add     rsp, 28h
.text:0000000000007D45                 pop     rbx
.text:0000000000007D46                 pop     rbp
.text:0000000000007D47                 pop     r12
.text:0000000000007D49                 pop     r13
.text:0000000000007D4B                 pop     r14
.text:0000000000007D4D                 pop     r15
.text:0000000000007D4F                 retn
.text:0000000000007D50 ; ---------------------------------------------------------------------------
.text:0000000000007D50
.text:0000000000007D50 loc_7D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000007D50                                         ; DATA XREF: .rodata:jpt_7A74↓o
.text:0000000000007D50                 mov     r9, [rbx+10h]   ; jumptable 0000000000007A74 case 7
.text:0000000000007D54                 mov     r13, [rbx+30h]
.text:0000000000007D58                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000007D5F                 mov     r12, [rbx+28h]
.text:0000000000007D63                 mov     r15, [rbx+20h]
.text:0000000000007D67                 mov     edx, 5          ; category
.text:0000000000007D6C                 mov     r14, [rbx+18h]
.text:0000000000007D70                 mov     r8, [rbx+8]
.text:0000000000007D74                 xor     edi, edi        ; domainname
.text:0000000000007D76                 mov     [rsp+58h+var_50], r9
.text:0000000000007D7B                 mov     rbx, [rbx]
.text:0000000000007D7E                 mov     [rsp+58h+var_58], r8
.text:0000000000007D82                 call    _dcgettext
.text:0000000000007D87                 push    r13
.text:0000000000007D89                 push    r12
.text:0000000000007D8B                 push    r15
.text:0000000000007D8D                 push    r14
.text:0000000000007D8F                 mov     r9, [rsp+78h+var_50]
.text:0000000000007D94                 jmp     short loc_7D23
.text:0000000000007D94 ; ---------------------------------------------------------------------------
.text:0000000000007D96                 align 20h
.text:0000000000007DA0
.text:0000000000007DA0 def_7A74:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000007DA0                 mov     r10, [rbx+40h]  ; jumptable 0000000000007A74 default case
.text:0000000000007DA4                 mov     r9, [rbx+38h]
.text:0000000000007DA8                 mov     edx, 5
.text:0000000000007DAD                 mov     rax, [rbx+10h]
.text:0000000000007DB1                 mov     r8, [rbx+8]
.text:0000000000007DB5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000007DBC                 mov     r13, [rbx+30h]
.text:0000000000007DC0                 mov     r12, [rbx+28h]
.text:0000000000007DC4                 mov     r15, [rbx+20h]
.text:0000000000007DC8                 mov     r14, [rbx+18h]
.text:0000000000007DCC                 mov     [rsp+58h+var_40], r10
.text:0000000000007DD1                 mov     [rsp+58h+var_48], r9
.text:0000000000007DD6                 mov     [rsp+58h+var_58], rax
.text:0000000000007DDA                 mov     [rsp+58h+var_50], r8
.text:0000000000007DDF                 mov     rbx, [rbx]
.text:0000000000007DE2                 jmp     loc_7B72
.text:0000000000007DE2 ; } // starts at 79D0
.text:0000000000007DE2 version_etc_arn endp
.text:0000000000007DE2
.text:0000000000007DE2 ; ---------------------------------------------------------------------------
.text:0000000000007DE7                 align 10h
.text:0000000000007DF0
.text:0000000000007DF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007DF0
.text:0000000000007DF0 ; Attributes: info_from_lumina
.text:0000000000007DF0
.text:0000000000007DF0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000007DF0                 public version_etc_ar
.text:0000000000007DF0 version_etc_ar  proc near
.text:0000000000007DF0 ; __unwind {
.text:0000000000007DF0                 xor     r9d, r9d
.text:0000000000007DF3                 cmp     qword ptr [r8], 0
.text:0000000000007DF7                 jz      short loc_7E0B
.text:0000000000007DF9                 nop     dword ptr [rax+00000000h]
.text:0000000000007E00
.text:0000000000007E00 loc_7E00:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000007E00                 add     r9, 1
.text:0000000000007E04                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000007E09                 jnz     short loc_7E00
.text:0000000000007E0B
.text:0000000000007E0B loc_7E0B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000007E0B                 jmp     version_etc_arn
.text:0000000000007E0B ; } // starts at 7DF0
.text:0000000000007E0B version_etc_ar  endp
.text:0000000000007E0B
.text:0000000000007E10
.text:0000000000007E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E10
.text:0000000000007E10 ; Attributes: info_from_lumina
.text:0000000000007E10
.text:0000000000007E10 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000007E10                 public version_etc_va
.text:0000000000007E10 version_etc_va  proc near
.text:0000000000007E10
.text:0000000000007E10 authtab         = qword ptr -68h
.text:0000000000007E10 var_10          = qword ptr -10h
.text:0000000000007E10
.text:0000000000007E10 ; __unwind {
.text:0000000000007E10                 sub     rsp, 68h
.text:0000000000007E14                 mov     r10, r8
.text:0000000000007E17                 xor     r9d, r9d
.text:0000000000007E1A                 mov     rax, fs:28h
.text:0000000000007E23                 mov     [rsp+68h+var_10], rax
.text:0000000000007E28                 xor     eax, eax
.text:0000000000007E2A                 mov     r8, rsp
.text:0000000000007E2D                 nop     dword ptr [rax]
.text:0000000000007E30
.text:0000000000007E30 loc_7E30:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000007E30                 mov     eax, [r10]
.text:0000000000007E33                 cmp     eax, 2Fh ; '/'
.text:0000000000007E36                 ja      short loc_7E7A
.text:0000000000007E38                 mov     r11d, eax
.text:0000000000007E3B                 add     r11, [r10+10h]
.text:0000000000007E3F                 add     eax, 8
.text:0000000000007E42                 mov     [r10], eax
.text:0000000000007E45
.text:0000000000007E45 loc_7E45:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000007E45                 mov     rax, [r11]
.text:0000000000007E48                 test    rax, rax
.text:0000000000007E4B                 mov     [r8+r9*8], rax
.text:0000000000007E4F                 jz      short loc_7E5B
.text:0000000000007E51                 add     r9, 1
.text:0000000000007E55                 cmp     r9, 0Ah
.text:0000000000007E59                 jnz     short loc_7E30
.text:0000000000007E5B
.text:0000000000007E5B loc_7E5B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000007E5B                 call    version_etc_arn
.text:0000000000007E60                 mov     rax, [rsp+68h+var_10]
.text:0000000000007E65                 xor     rax, fs:28h
.text:0000000000007E6E                 jnz     short loc_7E75
.text:0000000000007E70                 add     rsp, 68h
.text:0000000000007E74                 retn
.text:0000000000007E75 ; ---------------------------------------------------------------------------
.text:0000000000007E75
.text:0000000000007E75 loc_7E75:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000007E75                 call    ___stack_chk_fail
.text:0000000000007E7A ; ---------------------------------------------------------------------------
.text:0000000000007E7A
.text:0000000000007E7A loc_7E7A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000007E7A                 mov     r11, [r10+8]
.text:0000000000007E7E                 lea     rax, [r11+8]
.text:0000000000007E82                 mov     [r10+8], rax
.text:0000000000007E86                 jmp     short loc_7E45
.text:0000000000007E86 ; } // starts at 7E10
.text:0000000000007E86 version_etc_va  endp
.text:0000000000007E86
.text:0000000000007E86 ; ---------------------------------------------------------------------------
.text:0000000000007E88                 align 10h
.text:0000000000007E90
.text:0000000000007E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000007E90
.text:0000000000007E90 ; Attributes: info_from_lumina
.text:0000000000007E90
.text:0000000000007E90 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000007E90                 public version_etc
.text:0000000000007E90 version_etc     proc near               ; CODE XREF: main+1A5↑p
.text:0000000000007E90
.text:0000000000007E90 var_C0          = dword ptr -0C0h
.text:0000000000007E90 var_B8          = qword ptr -0B8h
.text:0000000000007E90 var_B0          = qword ptr -0B0h
.text:0000000000007E90 var_A8          = byte ptr -0A8h
.text:0000000000007E90 var_50          = qword ptr -50h
.text:0000000000007E90 var_48          = byte ptr -48h
.text:0000000000007E90 var_28          = qword ptr -28h
.text:0000000000007E90 var_20          = qword ptr -20h
.text:0000000000007E90 arg_0           = byte ptr  8
.text:0000000000007E90
.text:0000000000007E90 ; __unwind {
.text:0000000000007E90                 push    rbp
.text:0000000000007E91                 push    rbx
.text:0000000000007E92                 mov     r10d, 20h ; ' '
.text:0000000000007E98                 xor     r11d, r11d
.text:0000000000007E9B                 sub     rsp, 0B8h
.text:0000000000007EA2                 mov     rax, fs:28h
.text:0000000000007EAB                 mov     [rsp+0C8h+var_50], rax
.text:0000000000007EB0                 xor     eax, eax
.text:0000000000007EB2                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000007EBA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000007EC2                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000007ECA                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000007ECF                 mov     [rsp+0C8h+var_20], r9
.text:0000000000007ED7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000007EDF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000007EE4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000007EEC                 xor     r9d, r9d
.text:0000000000007EEF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000007EF4                 mov     rbp, rax
.text:0000000000007EF7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007F00
.text:0000000000007F00 loc_7F00:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000007F00                 cmp     r10d, 2Fh ; '/'
.text:0000000000007F04                 ja      short loc_7F5C
.text:0000000000007F06                 mov     eax, r10d
.text:0000000000007F09                 mov     r11d, 1
.text:0000000000007F0F                 add     r10d, 8
.text:0000000000007F13                 add     rax, rbp
.text:0000000000007F16
.text:0000000000007F16 loc_7F16:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000007F16                 mov     rax, [rax]
.text:0000000000007F19                 test    rax, rax
.text:0000000000007F1C                 mov     [r8+r9*8], rax
.text:0000000000007F20                 jz      short loc_7F2C
.text:0000000000007F22                 add     r9, 1
.text:0000000000007F26                 cmp     r9, 0Ah
.text:0000000000007F2A                 jnz     short loc_7F00
.text:0000000000007F2C
.text:0000000000007F2C loc_7F2C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000007F2C                 test    r11b, r11b
.text:0000000000007F2F                 jnz     short loc_7F55
.text:0000000000007F31
.text:0000000000007F31 loc_7F31:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000007F31                 call    version_etc_arn
.text:0000000000007F36                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000007F3B                 xor     rax, fs:28h
.text:0000000000007F44                 jnz     short loc_7F50
.text:0000000000007F46                 add     rsp, 0B8h
.text:0000000000007F4D                 pop     rbx
.text:0000000000007F4E                 pop     rbp
.text:0000000000007F4F                 retn
.text:0000000000007F50 ; ---------------------------------------------------------------------------
.text:0000000000007F50
.text:0000000000007F50 loc_7F50:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000007F50                 call    ___stack_chk_fail
.text:0000000000007F55 ; ---------------------------------------------------------------------------
.text:0000000000007F55
.text:0000000000007F55 loc_7F55:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000007F55                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000007F5A                 jmp     short loc_7F31
.text:0000000000007F5C ; ---------------------------------------------------------------------------
.text:0000000000007F5C
.text:0000000000007F5C loc_7F5C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000007F5C                 mov     rax, rbx
.text:0000000000007F5F                 add     rbx, 8
.text:0000000000007F63                 jmp     short loc_7F16
.text:0000000000007F63 ; } // starts at 7E90
.text:0000000000007F63 version_etc     endp
.text:0000000000007F63
.text:0000000000007F63 ; ---------------------------------------------------------------------------
.text:0000000000007F65                 align 10h
.text:0000000000007F70
.text:0000000000007F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000007F70
.text:0000000000007F70 ; Attributes: info_from_lumina
.text:0000000000007F70
.text:0000000000007F70 ; void __cdecl emit_bug_reporting_address()
.text:0000000000007F70                 public emit_bug_reporting_address
.text:0000000000007F70 emit_bug_reporting_address proc near
.text:0000000000007F70 ; __unwind {
.text:0000000000007F70                 push    rbx
.text:0000000000007F71                 lea     rsi, aReportBugsTo ; "\nReport bugs to"
.text:0000000000007F78                 mov     edx, 5          ; category
.text:0000000000007F7D                 xor     edi, edi        ; domainname
.text:0000000000007F7F                 call    _dcgettext
.text:0000000000007F84                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000007F8B                 mov     rsi, rax
.text:0000000000007F8E                 mov     edi, 1
.text:0000000000007F93                 xor     eax, eax
.text:0000000000007F95                 call    ___printf_chk
.text:0000000000007F9A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000007FA1                 mov     edx, 5          ; category
.text:0000000000007FA6                 xor     edi, edi        ; domainname
.text:0000000000007FA8                 call    _dcgettext
.text:0000000000007FAD                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000007FB4                 lea     rdx, unk_9276
.text:0000000000007FBB                 mov     rsi, rax
.text:0000000000007FBE                 mov     edi, 1
.text:0000000000007FC3                 xor     eax, eax
.text:0000000000007FC5                 call    ___printf_chk
.text:0000000000007FCA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000007FD1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000007FD8                 xor     edi, edi        ; domainname
.text:0000000000007FDA                 mov     edx, 5          ; category
.text:0000000000007FDF                 call    _dcgettext
.text:0000000000007FE4                 mov     rsi, rbx        ; stream
.text:0000000000007FE7                 mov     rdi, rax        ; s
.text:0000000000007FEA                 pop     rbx
.text:0000000000007FEB                 jmp     _fputs_unlocked
.text:0000000000007FEB ; } // starts at 7F70
.text:0000000000007FEB emit_bug_reporting_address endp
.text:0000000000007FEB
.text:0000000000007FF0
.text:0000000000007FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000007FF0
.text:0000000000007FF0
.text:0000000000007FF0                 public xmalloc
.text:0000000000007FF0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000007FF0                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000007FF0 ; __unwind {
.text:0000000000007FF0                 push    rbx
.text:0000000000007FF1                 mov     rbx, rdi
.text:0000000000007FF4                 call    _malloc
.text:0000000000007FF9                 test    rax, rax
.text:0000000000007FFC                 jnz     short loc_8003
.text:0000000000007FFE                 test    rbx, rbx
.text:0000000000008001                 jnz     short loc_8005
.text:0000000000008003
.text:0000000000008003 loc_8003:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000008003                 pop     rbx
.text:0000000000008004                 retn
.text:0000000000008005 ; ---------------------------------------------------------------------------
.text:0000000000008005
.text:0000000000008005 loc_8005:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000008005                 call    xalloc_die
.text:0000000000008005 ; } // starts at 7FF0
.text:0000000000008005 xmalloc         endp
.text:0000000000008005
.text:0000000000008005 ; ---------------------------------------------------------------------------
.text:000000000000800A                 align 10h
.text:0000000000008010
.text:0000000000008010 ; =============== S U B R O U T I N E =======================================
.text:0000000000008010
.text:0000000000008010 ; Attributes: info_from_lumina
.text:0000000000008010
.text:0000000000008010 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000008010                 public xnmalloc
.text:0000000000008010 xnmalloc        proc near
.text:0000000000008010 ; __unwind {
.text:0000000000008010                 mov     rax, rdi
.text:0000000000008013                 mul     rsi
.text:0000000000008016                 mov     rdi, rax
.text:0000000000008019                 seto    al
.text:000000000000801C                 test    rdi, rdi
.text:000000000000801F                 js      short loc_802B
.text:0000000000008021                 movzx   eax, al
.text:0000000000008024                 test    rax, rax
.text:0000000000008027                 jnz     short loc_802B
.text:0000000000008029                 jmp     short xmalloc
.text:000000000000802B ; ---------------------------------------------------------------------------
.text:000000000000802B
.text:000000000000802B loc_802B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000802B                                         ; xnmalloc+17↑j
.text:000000000000802B                 sub     rsp, 8
.text:000000000000802F                 call    xalloc_die
.text:000000000000802F ; } // starts at 8010
.text:000000000000802F xnmalloc        endp
.text:000000000000802F
.text:000000000000802F ; ---------------------------------------------------------------------------
.text:0000000000008034                 align 20h
.text:0000000000008040
.text:0000000000008040 ; =============== S U B R O U T I N E =======================================
.text:0000000000008040
.text:0000000000008040
.text:0000000000008040                 public xcharalloc
.text:0000000000008040 xcharalloc      proc near
.text:0000000000008040 ; __unwind {
.text:0000000000008040                 jmp     short xmalloc
.text:0000000000008040 ; } // starts at 8040
.text:0000000000008040 xcharalloc      endp
.text:0000000000008040
.text:0000000000008040 ; ---------------------------------------------------------------------------
.text:0000000000008042                 align 10h
.text:0000000000008050
.text:0000000000008050 ; =============== S U B R O U T I N E =======================================
.text:0000000000008050
.text:0000000000008050 ; Attributes: info_from_lumina
.text:0000000000008050
.text:0000000000008050 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000008050                 public xrealloc
.text:0000000000008050 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000008050                                         ; quotearg_n_options+182↑p ...
.text:0000000000008050 ; __unwind {
.text:0000000000008050                 test    rsi, rsi
.text:0000000000008053                 push    rbx
.text:0000000000008054                 mov     rbx, rsi
.text:0000000000008057                 jnz     short loc_805E
.text:0000000000008059                 test    rdi, rdi
.text:000000000000805C                 jnz     short loc_8078
.text:000000000000805E
.text:000000000000805E loc_805E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000805E                 mov     rsi, rbx        ; size
.text:0000000000008061                 call    _realloc
.text:0000000000008066                 test    rax, rax
.text:0000000000008069                 jnz     short loc_8070
.text:000000000000806B                 test    rbx, rbx
.text:000000000000806E                 jnz     short loc_8081
.text:0000000000008070
.text:0000000000008070 loc_8070:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000008070                 pop     rbx
.text:0000000000008071                 retn
.text:0000000000008071 ; ---------------------------------------------------------------------------
.text:0000000000008072                 align 8
.text:0000000000008078
.text:0000000000008078 loc_8078:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000008078                 call    _free
.text:000000000000807D                 xor     eax, eax
.text:000000000000807F                 pop     rbx
.text:0000000000008080                 retn
.text:0000000000008081 ; ---------------------------------------------------------------------------
.text:0000000000008081
.text:0000000000008081 loc_8081:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000008081                 call    xalloc_die
.text:0000000000008081 ; } // starts at 8050
.text:0000000000008081 xrealloc        endp
.text:0000000000008081
.text:0000000000008081 ; ---------------------------------------------------------------------------
.text:0000000000008086                 align 10h
.text:0000000000008090
.text:0000000000008090 ; =============== S U B R O U T I N E =======================================
.text:0000000000008090
.text:0000000000008090 ; Attributes: info_from_lumina
.text:0000000000008090
.text:0000000000008090 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000008090                 public xnrealloc
.text:0000000000008090 xnrealloc       proc near
.text:0000000000008090 ; __unwind {
.text:0000000000008090                 mov     rax, rsi
.text:0000000000008093                 mul     rdx
.text:0000000000008096                 mov     rsi, rax
.text:0000000000008099                 seto    al
.text:000000000000809C                 test    rsi, rsi
.text:000000000000809F                 js      short loc_80AB
.text:00000000000080A1                 movzx   eax, al
.text:00000000000080A4                 test    rax, rax
.text:00000000000080A7                 jnz     short loc_80AB
.text:00000000000080A9                 jmp     short xrealloc
.text:00000000000080AB ; ---------------------------------------------------------------------------
.text:00000000000080AB
.text:00000000000080AB loc_80AB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000080AB                                         ; xnrealloc+17↑j
.text:00000000000080AB                 sub     rsp, 8
.text:00000000000080AF                 call    xalloc_die
.text:00000000000080AF ; } // starts at 8090
.text:00000000000080AF xnrealloc       endp
.text:00000000000080AF
.text:00000000000080AF ; ---------------------------------------------------------------------------
.text:00000000000080B4                 align 20h
.text:00000000000080C0
.text:00000000000080C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000080C0
.text:00000000000080C0 ; Attributes: info_from_lumina
.text:00000000000080C0
.text:00000000000080C0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000080C0                 public x2nrealloc
.text:00000000000080C0 x2nrealloc      proc near
.text:00000000000080C0 ; __unwind {
.text:00000000000080C0                 test    rdi, rdi
.text:00000000000080C3                 mov     r9, rdx
.text:00000000000080C6                 mov     rcx, [rsi]
.text:00000000000080C9                 jz      short loc_8100
.text:00000000000080CB                 xor     edx, edx
.text:00000000000080CD                 mov     rax, 5555555555555554h
.text:00000000000080D7                 div     r9
.text:00000000000080DA                 cmp     rax, rcx
.text:00000000000080DD                 jbe     short loc_811B
.text:00000000000080DF                 mov     rax, rcx
.text:00000000000080E2                 shr     rax, 1
.text:00000000000080E5                 lea     rcx, [rax+rcx+1]
.text:00000000000080EA
.text:00000000000080EA loc_80EA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000080EA                 mov     [rsi], rcx
.text:00000000000080ED                 imul    rcx, r9
.text:00000000000080F1                 mov     rsi, rcx
.text:00000000000080F4                 jmp     xrealloc
.text:00000000000080F4 ; ---------------------------------------------------------------------------
.text:00000000000080F9                 align 20h
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000008100                 test    rcx, rcx
.text:0000000000008103                 jz      short loc_8128
.text:0000000000008105
.text:0000000000008105 loc_8105:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000008105                 mov     rax, rcx
.text:0000000000008108                 mul     r9
.text:000000000000810B                 seto    dl
.text:000000000000810E                 test    rax, rax
.text:0000000000008111                 movzx   edx, dl
.text:0000000000008114                 js      short loc_811B
.text:0000000000008116                 test    rdx, rdx
.text:0000000000008119                 jz      short loc_80EA
.text:000000000000811B
.text:000000000000811B loc_811B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000811B                                         ; x2nrealloc+54↑j
.text:000000000000811B                 sub     rsp, 8
.text:000000000000811F                 call    xalloc_die
.text:000000000000811F ; ---------------------------------------------------------------------------
.text:0000000000008124                 align 8
.text:0000000000008128
.text:0000000000008128 loc_8128:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000008128                 xor     edx, edx
.text:000000000000812A                 mov     eax, 80h
.text:000000000000812F                 xor     r8d, r8d
.text:0000000000008132                 div     r9
.text:0000000000008135                 test    rax, rax
.text:0000000000008138                 setz    r8b
.text:000000000000813C                 lea     rcx, [r8+rax]
.text:0000000000008140                 jmp     short loc_8105
.text:0000000000008140 ; } // starts at 80C0
.text:0000000000008140 x2nrealloc      endp
.text:0000000000008140
.text:0000000000008140 ; ---------------------------------------------------------------------------
.text:0000000000008142                 align 10h
.text:0000000000008150
.text:0000000000008150 ; =============== S U B R O U T I N E =======================================
.text:0000000000008150
.text:0000000000008150 ; Attributes: info_from_lumina
.text:0000000000008150
.text:0000000000008150 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000008150                 public x2realloc
.text:0000000000008150 x2realloc       proc near
.text:0000000000008150 ; __unwind {
.text:0000000000008150                 test    rdi, rdi
.text:0000000000008153                 mov     rax, [rsi]
.text:0000000000008156                 jz      short loc_8180
.text:0000000000008158                 mov     rdx, 5555555555555553h
.text:0000000000008162                 cmp     rax, rdx
.text:0000000000008165                 ja      short loc_8191
.text:0000000000008167                 mov     rdx, rax
.text:000000000000816A                 shr     rdx, 1
.text:000000000000816D                 lea     rax, [rdx+rax+1]
.text:0000000000008172
.text:0000000000008172 loc_8172:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000008172                 mov     [rsi], rax
.text:0000000000008175                 mov     rsi, rax
.text:0000000000008178                 jmp     xrealloc
.text:0000000000008178 ; ---------------------------------------------------------------------------
.text:000000000000817D                 align 20h
.text:0000000000008180
.text:0000000000008180 loc_8180:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000008180                 test    rax, rax
.text:0000000000008183                 mov     edx, 80h
.text:0000000000008188                 cmovz   rax, rdx
.text:000000000000818C                 test    rax, rax
.text:000000000000818F                 jns     short loc_8172
.text:0000000000008191
.text:0000000000008191 loc_8191:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000008191                 sub     rsp, 8
.text:0000000000008195                 call    xalloc_die
.text:0000000000008195 ; } // starts at 8150
.text:0000000000008195 x2realloc       endp
.text:0000000000008195
.text:0000000000008195 ; ---------------------------------------------------------------------------
.text:000000000000819A                 align 20h
.text:00000000000081A0
.text:00000000000081A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081A0
.text:00000000000081A0
.text:00000000000081A0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000081A0                 public xzalloc
.text:00000000000081A0 xzalloc         proc near
.text:00000000000081A0 ; __unwind {
.text:00000000000081A0                 push    rbx
.text:00000000000081A1                 mov     rbx, rdi
.text:00000000000081A4                 call    xmalloc
.text:00000000000081A9                 mov     rdx, rbx        ; n
.text:00000000000081AC                 xor     esi, esi        ; c
.text:00000000000081AE                 mov     rdi, rax        ; s
.text:00000000000081B1                 pop     rbx
.text:00000000000081B2                 jmp     _memset
.text:00000000000081B2 ; } // starts at 81A0
.text:00000000000081B2 xzalloc         endp
.text:00000000000081B2
.text:00000000000081B2 ; ---------------------------------------------------------------------------
.text:00000000000081B7                 align 20h
.text:00000000000081C0
.text:00000000000081C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081C0
.text:00000000000081C0 ; Attributes: info_from_lumina
.text:00000000000081C0
.text:00000000000081C0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000081C0                 public xcalloc
.text:00000000000081C0 xcalloc         proc near
.text:00000000000081C0 ; __unwind {
.text:00000000000081C0                 mov     rax, rdi
.text:00000000000081C3                 sub     rsp, 8
.text:00000000000081C7                 mul     rsi
.text:00000000000081CA                 seto    dl
.text:00000000000081CD                 test    rax, rax
.text:00000000000081D0                 js      short loc_81E9
.text:00000000000081D2                 movzx   edx, dl
.text:00000000000081D5                 test    rdx, rdx
.text:00000000000081D8                 jnz     short loc_81E9
.text:00000000000081DA                 call    _calloc
.text:00000000000081DF                 test    rax, rax
.text:00000000000081E2                 jz      short loc_81E9
.text:00000000000081E4                 add     rsp, 8
.text:00000000000081E8                 retn
.text:00000000000081E9 ; ---------------------------------------------------------------------------
.text:00000000000081E9
.text:00000000000081E9 loc_81E9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000081E9                                         ; xcalloc+18↑j ...
.text:00000000000081E9                 call    xalloc_die
.text:00000000000081E9 ; } // starts at 81C0
.text:00000000000081E9 xcalloc         endp
.text:00000000000081E9
.text:00000000000081E9 ; ---------------------------------------------------------------------------
.text:00000000000081EE                 align 10h
.text:00000000000081F0
.text:00000000000081F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000081F0
.text:00000000000081F0 ; Attributes: info_from_lumina
.text:00000000000081F0
.text:00000000000081F0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000081F0                 public xmemdup
.text:00000000000081F0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000081F0                                         ; xstrdup+11↓j
.text:00000000000081F0 ; __unwind {
.text:00000000000081F0                 push    rbp
.text:00000000000081F1                 push    rbx
.text:00000000000081F2                 mov     rbp, rdi
.text:00000000000081F5                 mov     rdi, rsi
.text:00000000000081F8                 mov     rbx, rsi
.text:00000000000081FB                 sub     rsp, 8
.text:00000000000081FF                 call    xmalloc
.text:0000000000008204                 add     rsp, 8
.text:0000000000008208                 mov     rdx, rbx        ; n
.text:000000000000820B                 mov     rsi, rbp        ; src
.text:000000000000820E                 pop     rbx
.text:000000000000820F                 pop     rbp
.text:0000000000008210                 mov     rdi, rax        ; dest
.text:0000000000008213                 jmp     _memcpy
.text:0000000000008213 ; } // starts at 81F0
.text:0000000000008213 xmemdup         endp
.text:0000000000008213
.text:0000000000008213 ; ---------------------------------------------------------------------------
.text:0000000000008218                 align 20h
.text:0000000000008220
.text:0000000000008220 ; =============== S U B R O U T I N E =======================================
.text:0000000000008220
.text:0000000000008220
.text:0000000000008220 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000008220                 public xstrdup
.text:0000000000008220 xstrdup         proc near
.text:0000000000008220 ; __unwind {
.text:0000000000008220                 push    rbx
.text:0000000000008221                 mov     rbx, rdi
.text:0000000000008224                 call    _strlen
.text:0000000000008229                 mov     rdi, rbx        ; src
.text:000000000000822C                 lea     rsi, [rax+1]    ; n
.text:0000000000008230                 pop     rbx
.text:0000000000008231                 jmp     short xmemdup
.text:0000000000008231 ; } // starts at 8220
.text:0000000000008231 xstrdup         endp
.text:0000000000008231
.text:0000000000008231 ; ---------------------------------------------------------------------------
.text:0000000000008233                 align 20h
.text:0000000000008240
.text:0000000000008240 ; =============== S U B R O U T I N E =======================================
.text:0000000000008240
.text:0000000000008240 ; Attributes: noreturn info_from_lumina
.text:0000000000008240
.text:0000000000008240 ; void __cdecl xalloc_die()
.text:0000000000008240                 public xalloc_die
.text:0000000000008240 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_7206↑p
.text:0000000000008240                                         ; xmalloc:loc_8005↑p ...
.text:0000000000008240 ; __unwind {
.text:0000000000008240                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000008247                 sub     rsp, 8
.text:000000000000824B                 mov     edx, 5          ; category
.text:0000000000008250                 xor     edi, edi        ; domainname
.text:0000000000008252                 call    _dcgettext
.text:0000000000008257                 mov     edi, cs:exit_failure ; status
.text:000000000000825D                 lea     rdx, aS_1+2     ; format
.text:0000000000008264                 mov     rcx, rax
.text:0000000000008267                 xor     esi, esi        ; errnum
.text:0000000000008269                 xor     eax, eax
.text:000000000000826B                 call    _error
.text:0000000000008270                 call    _abort
.text:0000000000008270 ; } // starts at 8240
.text:0000000000008270 xalloc_die      endp
.text:0000000000008270
.text:0000000000008270 ; ---------------------------------------------------------------------------
.text:0000000000008275                 align 20h
.text:0000000000008280
.text:0000000000008280 ; =============== S U B R O U T I N E =======================================
.text:0000000000008280
.text:0000000000008280 ; Attributes: info_from_lumina
.text:0000000000008280
.text:0000000000008280 ; uintmax_t __fastcall xnumtoumax(const char *n_str, int base, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000008280                 public xnumtoumax
.text:0000000000008280 xnumtoumax      proc near               ; CODE XREF: xdectoumax+17↓p
.text:0000000000008280
.text:0000000000008280 var_48          = qword ptr -48h
.text:0000000000008280 var_40          = qword ptr -40h
.text:0000000000008280 arg_0           = dword ptr  8
.text:0000000000008280
.text:0000000000008280 ; __unwind {
.text:0000000000008280                 push    r15
.text:0000000000008282                 push    r14
.text:0000000000008284                 mov     r15, rcx
.text:0000000000008287                 push    r13
.text:0000000000008289                 push    r12
.text:000000000000828B                 mov     r14, rdx
.text:000000000000828E                 push    rbp
.text:000000000000828F                 push    rbx
.text:0000000000008290                 mov     edx, esi
.text:0000000000008292                 xor     esi, esi
.text:0000000000008294                 mov     r12, rdi
.text:0000000000008297                 mov     r13, r9
.text:000000000000829A                 sub     rsp, 18h
.text:000000000000829E                 mov     rcx, rsp
.text:00000000000082A1                 mov     ebx, [rsp+48h+arg_0]
.text:00000000000082A5                 mov     rax, fs:28h
.text:00000000000082AE                 mov     [rsp+48h+var_40], rax
.text:00000000000082B3                 xor     eax, eax
.text:00000000000082B5                 call    xstrtoumax
.text:00000000000082BA                 test    eax, eax
.text:00000000000082BC                 jnz     loc_8350
.text:00000000000082C2                 mov     rbp, [rsp+48h+var_48]
.text:00000000000082C6                 cmp     rbp, r14
.text:00000000000082C9                 jb      short loc_82D0
.text:00000000000082CB                 cmp     rbp, r15
.text:00000000000082CE                 jbe     short loc_8324
.text:00000000000082D0
.text:00000000000082D0 loc_82D0:                               ; CODE XREF: xnumtoumax+49↑j
.text:00000000000082D0                 call    ___errno_location
.text:00000000000082D5                 cmp     rbp, 40000000h
.text:00000000000082DC                 mov     r14, rax
.text:00000000000082DF                 sbb     eax, eax
.text:00000000000082E1                 and     eax, 0FFFFFFD7h
.text:00000000000082E4                 add     eax, 4Bh ; 'K'
.text:00000000000082E7                 mov     [r14], eax
.text:00000000000082EA
.text:00000000000082EA loc_82EA:                               ; CODE XREF: xnumtoumax+E2↓j
.text:00000000000082EA                                         ; xnumtoumax+EA↓j ...
.text:00000000000082EA                 mov     rdi, r12
.text:00000000000082ED                 call    quote
.text:00000000000082F2                 mov     esi, [r14]
.text:00000000000082F5                 mov     r8, rax
.text:00000000000082F8                 mov     eax, 0
.text:00000000000082FD                 lea     rdx, format     ; "%s: %s"
.text:0000000000008304                 mov     rcx, r13
.text:0000000000008307                 cmp     esi, 16h
.text:000000000000830A                 cmovz   esi, eax        ; errnum
.text:000000000000830D                 test    ebx, ebx
.text:000000000000830F                 mov     eax, 1
.text:0000000000008314                 cmovz   ebx, eax
.text:0000000000008317                 xor     eax, eax
.text:0000000000008319                 mov     edi, ebx        ; status
.text:000000000000831B                 call    _error
.text:0000000000008320                 mov     rbp, [rsp+48h+var_48]
.text:0000000000008324
.text:0000000000008324 loc_8324:                               ; CODE XREF: xnumtoumax+4E↑j
.text:0000000000008324                 mov     rdx, [rsp+48h+var_40]
.text:0000000000008329                 xor     rdx, fs:28h
.text:0000000000008332                 mov     rax, rbp
.text:0000000000008335                 jnz     short loc_837B
.text:0000000000008337                 add     rsp, 18h
.text:000000000000833B                 pop     rbx
.text:000000000000833C                 pop     rbp
.text:000000000000833D                 pop     r12
.text:000000000000833F                 pop     r13
.text:0000000000008341                 pop     r14
.text:0000000000008343                 pop     r15
.text:0000000000008345                 retn
.text:0000000000008345 ; ---------------------------------------------------------------------------
.text:0000000000008346                 align 10h
.text:0000000000008350
.text:0000000000008350 loc_8350:                               ; CODE XREF: xnumtoumax+3C↑j
.text:0000000000008350                 mov     ebp, eax
.text:0000000000008352                 call    ___errno_location
.text:0000000000008357                 cmp     ebp, 1
.text:000000000000835A                 mov     r14, rax
.text:000000000000835D                 jz      short loc_8370
.text:000000000000835F                 cmp     ebp, 3
.text:0000000000008362                 jnz     short loc_82EA
.text:0000000000008364                 mov     dword ptr [rax], 0
.text:000000000000836A                 jmp     loc_82EA
.text:000000000000836A ; ---------------------------------------------------------------------------
.text:000000000000836F                 align 10h
.text:0000000000008370
.text:0000000000008370 loc_8370:                               ; CODE XREF: xnumtoumax+DD↑j
.text:0000000000008370                 mov     dword ptr [rax], 4Bh ; 'K'
.text:0000000000008376                 jmp     loc_82EA
.text:000000000000837B ; ---------------------------------------------------------------------------
.text:000000000000837B
.text:000000000000837B loc_837B:                               ; CODE XREF: xnumtoumax+B5↑j
.text:000000000000837B                 call    ___stack_chk_fail
.text:000000000000837B ; } // starts at 8280
.text:000000000000837B xnumtoumax      endp
.text:000000000000837B
.text:0000000000008380
.text:0000000000008380 ; =============== S U B R O U T I N E =======================================
.text:0000000000008380
.text:0000000000008380 ; Attributes: info_from_lumina
.text:0000000000008380
.text:0000000000008380 ; uintmax_t __fastcall xdectoumax(const char *n_str, uintmax_t min, uintmax_t max, const char *suffixes, const char *err, int err_exit)
.text:0000000000008380                 public xdectoumax
.text:0000000000008380 xdectoumax      proc near               ; CODE XREF: main+270↑p
.text:0000000000008380 ; __unwind {
.text:0000000000008380                 sub     rsp, 10h
.text:0000000000008384                 push    r9
.text:0000000000008386                 mov     r9, r8
.text:0000000000008389                 mov     r8, rcx
.text:000000000000838C                 mov     rcx, rdx
.text:000000000000838F                 mov     rdx, rsi
.text:0000000000008392                 mov     esi, 0Ah
.text:0000000000008397                 call    xnumtoumax
.text:000000000000839C                 add     rsp, 18h
.text:00000000000083A0                 retn
.text:00000000000083A0 ; } // starts at 8380
.text:00000000000083A0 xdectoumax      endp
.text:00000000000083A0
.text:00000000000083A0 ; ---------------------------------------------------------------------------
.text:00000000000083A1                 align 10h
.text:00000000000083B0
.text:00000000000083B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000083B0
.text:00000000000083B0
.text:00000000000083B0 ; __int64 __fastcall xstrtoul(char *nptr)
.text:00000000000083B0                 public xstrtoul
.text:00000000000083B0 xstrtoul        proc near               ; CODE XREF: main+BA8↑p
.text:00000000000083B0
.text:00000000000083B0 base            = dword ptr -50h
.text:00000000000083B0 endptr          = qword ptr -48h
.text:00000000000083B0 var_40          = qword ptr -40h
.text:00000000000083B0
.text:00000000000083B0 ; __unwind {
.text:00000000000083B0                 push    r15
.text:00000000000083B2                 push    r14
.text:00000000000083B4                 push    r13
.text:00000000000083B6                 push    r12
.text:00000000000083B8                 push    rbp
.text:00000000000083B9                 push    rbx
.text:00000000000083BA                 sub     rsp, 28h
.text:00000000000083BE                 mov     rax, fs:28h
.text:00000000000083C7                 mov     [rsp+58h+var_40], rax
.text:00000000000083CC                 xor     eax, eax
.text:00000000000083CE                 cmp     edx, 24h ; '$'
.text:00000000000083D1                 ja      loc_8735
.text:00000000000083D7                 lea     rax, [rsp+58h+endptr]
.text:00000000000083DC                 mov     r15, rsi
.text:00000000000083DF                 test    rsi, rsi
.text:00000000000083E2                 mov     rbp, rdi
.text:00000000000083E5                 mov     [rsp+58h+base], edx
.text:00000000000083E9                 mov     r14, rcx
.text:00000000000083EC                 mov     r13, r8
.text:00000000000083EF                 cmovz   r15, rax
.text:00000000000083F3                 call    ___errno_location
.text:00000000000083F8                 mov     dword ptr [rax], 0
.text:00000000000083FE                 mov     r12, rax
.text:0000000000008401                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008405                 call    ___ctype_b_loc
.text:000000000000840A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000840E                 mov     rsi, [rax]
.text:0000000000008411                 mov     rax, rbp
.text:0000000000008414                 jmp     short loc_8427
.text:0000000000008414 ; ---------------------------------------------------------------------------
.text:0000000000008416                 align 20h
.text:0000000000008420
.text:0000000000008420 loc_8420:                               ; CODE XREF: xstrtoul+7F↓j
.text:0000000000008420                 add     rax, 1
.text:0000000000008424                 movzx   ebx, byte ptr [rax]
.text:0000000000008427
.text:0000000000008427 loc_8427:                               ; CODE XREF: xstrtoul+64↑j
.text:0000000000008427                 movzx   ecx, bl
.text:000000000000842A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000842F                 jnz     short loc_8420
.text:0000000000008431                 cmp     bl, 2Dh ; '-'
.text:0000000000008434                 jz      short loc_8488
.text:0000000000008436                 mov     rsi, r15        ; endptr
.text:0000000000008439                 mov     rdi, rbp        ; nptr
.text:000000000000843C                 call    _strtoul
.text:0000000000008441                 mov     rcx, [r15]
.text:0000000000008444                 mov     rbx, rax
.text:0000000000008447                 cmp     rcx, rbp
.text:000000000000844A                 jz      short loc_8478
.text:000000000000844C                 mov     eax, [r12]
.text:0000000000008450                 test    eax, eax
.text:0000000000008452                 jz      short loc_84B8
.text:0000000000008454                 cmp     eax, 22h ; '"'
.text:0000000000008457                 mov     ebp, 1
.text:000000000000845C                 jnz     short loc_8488
.text:000000000000845E
.text:000000000000845E loc_845E:                               ; CODE XREF: xstrtoul+10A↓j
.text:000000000000845E                 test    r13, r13
.text:0000000000008461                 jz      short loc_846C
.text:0000000000008463                 movzx   r12d, byte ptr [rcx]
.text:0000000000008467                 test    r12b, r12b
.text:000000000000846A                 jnz     short loc_84E7
.text:000000000000846C
.text:000000000000846C loc_846C:                               ; CODE XREF: xstrtoul+B1↑j
.text:000000000000846C                 mov     [r14], rbx
.text:000000000000846F                 jmp     short loc_848D
.text:000000000000846F ; ---------------------------------------------------------------------------
.text:0000000000008471                 align 8
.text:0000000000008478
.text:0000000000008478 loc_8478:                               ; CODE XREF: xstrtoul+9A↑j
.text:0000000000008478                 test    r13, r13
.text:000000000000847B                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008480                 jnz     short loc_84C0
.text:0000000000008482                 nop     word ptr [rax+rax+00h]
.text:0000000000008488
.text:0000000000008488 loc_8488:                               ; CODE XREF: xstrtoul+84↑j
.text:0000000000008488                                         ; xstrtoul+AC↑j ...
.text:0000000000008488                 mov     ebp, 4
.text:000000000000848D
.text:000000000000848D loc_848D:                               ; CODE XREF: xstrtoul+BF↑j
.text:000000000000848D                                         ; xstrtoul+217↓j ...
.text:000000000000848D                 mov     rdi, [rsp+58h+var_40]
.text:0000000000008492                 xor     rdi, fs:28h
.text:000000000000849B                 mov     eax, ebp
.text:000000000000849D                 jnz     loc_8730
.text:00000000000084A3                 add     rsp, 28h
.text:00000000000084A7                 pop     rbx
.text:00000000000084A8                 pop     rbp
.text:00000000000084A9                 pop     r12
.text:00000000000084AB                 pop     r13
.text:00000000000084AD                 pop     r14
.text:00000000000084AF                 pop     r15
.text:00000000000084B1                 retn
.text:00000000000084B1 ; ---------------------------------------------------------------------------
.text:00000000000084B2                 align 8
.text:00000000000084B8
.text:00000000000084B8 loc_84B8:                               ; CODE XREF: xstrtoul+A2↑j
.text:00000000000084B8                 xor     ebp, ebp
.text:00000000000084BA                 jmp     short loc_845E
.text:00000000000084BA ; ---------------------------------------------------------------------------
.text:00000000000084BC                 align 20h
.text:00000000000084C0
.text:00000000000084C0 loc_84C0:                               ; CODE XREF: xstrtoul+D0↑j
.text:00000000000084C0                 movzx   r12d, byte ptr [rbp+0]
.text:00000000000084C5                 test    r12b, r12b
.text:00000000000084C8                 jz      short loc_8488
.text:00000000000084CA                 movsx   esi, r12b       ; c
.text:00000000000084CE                 mov     rdi, r13        ; s
.text:00000000000084D1                 xor     ebp, ebp
.text:00000000000084D3                 call    _strchr
.text:00000000000084D8                 test    rax, rax
.text:00000000000084DB                 mov     ebx, 1
.text:00000000000084E0                 mov     rcx, qword ptr [rsp+58h+base]
.text:00000000000084E5                 jz      short loc_8488
.text:00000000000084E7
.text:00000000000084E7 loc_84E7:                               ; CODE XREF: xstrtoul+BA↑j
.text:00000000000084E7                 movsx   esi, r12b       ; c
.text:00000000000084EB                 mov     rdi, r13        ; s
.text:00000000000084EE                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000084F3                 call    _strchr
.text:00000000000084F8                 test    rax, rax
.text:00000000000084FB                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008500                 jz      def_8586        ; jumptable 0000000000008586 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008506                 lea     eax, [r12-45h]
.text:000000000000850B                 cmp     al, 2Fh ; '/'
.text:000000000000850D                 ja      short loc_8560
.text:000000000000850F                 mov     rdx, 814400308945h
.text:0000000000008519                 bt      rdx, rax
.text:000000000000851D                 jnb     short loc_8560
.text:000000000000851F                 mov     esi, 30h ; '0'  ; c
.text:0000000000008524                 mov     rdi, r13        ; s
.text:0000000000008527                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000852C                 call    _strchr
.text:0000000000008531                 test    rax, rax
.text:0000000000008534                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008539                 jz      short loc_8560
.text:000000000000853B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000853F                 cmp     al, 44h ; 'D'
.text:0000000000008541                 jz      short loc_854F
.text:0000000000008543                 cmp     al, 69h ; 'i'
.text:0000000000008545                 jz      loc_8718
.text:000000000000854B                 cmp     al, 42h ; 'B'
.text:000000000000854D                 jnz     short loc_8560
.text:000000000000854F
.text:000000000000854F loc_854F:                               ; CODE XREF: xstrtoul+191↑j
.text:000000000000854F                 mov     edi, 2
.text:0000000000008554                 mov     esi, 3E8h
.text:0000000000008559                 jmp     short loc_856A
.text:0000000000008559 ; ---------------------------------------------------------------------------
.text:000000000000855B                 align 20h
.text:0000000000008560
.text:0000000000008560 loc_8560:                               ; CODE XREF: xstrtoul+15D↑j
.text:0000000000008560                                         ; xstrtoul+16D↑j ...
.text:0000000000008560                 mov     edi, 1
.text:0000000000008565                 mov     esi, 400h
.text:000000000000856A
.text:000000000000856A loc_856A:                               ; CODE XREF: xstrtoul+1A9↑j
.text:000000000000856A                                         ; xstrtoul+37B↓j
.text:000000000000856A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000856E                 cmp     r12b, 35h
.text:0000000000008572                 ja      short def_8586  ; jumptable 0000000000008586 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008574                 lea     rdx, jpt_8586
.text:000000000000857B                 movzx   r12d, r12b
.text:000000000000857F                 movsxd  rax, ds:(jpt_8586 - 0A808h)[rdx+r12*4]
.text:0000000000008583                 add     rax, rdx
.text:0000000000008586                 jmp     rax             ; switch jump
.text:0000000000008588 ; ---------------------------------------------------------------------------
.text:0000000000008588
.text:0000000000008588 loc_8588:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000008588                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:0000000000008588                 mov     rax, rbx        ; jumptable 0000000000008586 cases 77,109
.text:000000000000858B                 mul     rsi
.text:000000000000858E                 jo      loc_8781
.text:0000000000008594                 xor     r8d, r8d
.text:0000000000008597
.text:0000000000008597 loc_8597:                               ; CODE XREF: xstrtoul+34E↓j
.text:0000000000008597                                         ; xstrtoul+35E↓j ...
.text:0000000000008597                 mul     rsi
.text:000000000000859A                 jo      loc_8772
.text:00000000000085A0                 mov     rbx, rax
.text:00000000000085A3
.text:00000000000085A3 loc_85A3:                               ; CODE XREF: xstrtoul+3CC↓j
.text:00000000000085A3                 or      ebp, r8d
.text:00000000000085A6                 db      2Eh
.text:00000000000085A6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000085B0
.text:00000000000085B0 loc_85B0:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000085B0                                         ; xstrtoul+23B↓j ...
.text:00000000000085B0                 movsxd  rdi, edi        ; jumptable 0000000000008586 case 99
.text:00000000000085B3                 mov     eax, ebp
.text:00000000000085B5                 add     rcx, rdi
.text:00000000000085B8                 or      eax, 2
.text:00000000000085BB                 mov     [r15], rcx
.text:00000000000085BE                 cmp     byte ptr [rcx], 0
.text:00000000000085C1                 mov     [r14], rbx
.text:00000000000085C4                 cmovnz  ebp, eax
.text:00000000000085C7                 jmp     loc_848D
.text:00000000000085CC ; ---------------------------------------------------------------------------
.text:00000000000085CC
.text:00000000000085CC def_8586:                               ; CODE XREF: xstrtoul+150↑j
.text:00000000000085CC                                         ; xstrtoul+1C2↑j ...
.text:00000000000085CC                 mov     [r14], rbx      ; jumptable 0000000000008586 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000085CF                 or      ebp, 2
.text:00000000000085D2                 jmp     loc_848D
.text:00000000000085D7 ; ---------------------------------------------------------------------------
.text:00000000000085D7
.text:00000000000085D7 loc_85D7:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000085D7                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:00000000000085D7                 mov     edx, 2          ; jumptable 0000000000008586 case 119
.text:00000000000085DC                 mov     rax, rdx
.text:00000000000085DF                 mul     rbx
.text:00000000000085E2                 jo      loc_867E
.text:00000000000085E8                 add     rbx, rbx
.text:00000000000085EB                 jmp     short loc_85B0  ; jumptable 0000000000008586 case 99
.text:00000000000085ED ; ---------------------------------------------------------------------------
.text:00000000000085ED
.text:00000000000085ED loc_85ED:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000085ED                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:00000000000085ED                 mov     edx, 200h       ; jumptable 0000000000008586 case 98
.text:00000000000085F2                 mov     rax, rdx
.text:00000000000085F5                 mul     rbx
.text:00000000000085F8                 jo      loc_867E
.text:00000000000085FE                 shl     rbx, 9
.text:0000000000008602                 jmp     short loc_85B0  ; jumptable 0000000000008586 case 99
.text:0000000000008604 ; ---------------------------------------------------------------------------
.text:0000000000008604
.text:0000000000008604 loc_8604:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000008604                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:0000000000008604                 mov     r8d, 7          ; jumptable 0000000000008586 case 90
.text:000000000000860A                 xor     r9d, r9d
.text:000000000000860D                 nop     dword ptr [rax]
.text:0000000000008610
.text:0000000000008610 loc_8610:                               ; CODE XREF: xstrtoul+273↓j
.text:0000000000008610                 mov     rax, rbx
.text:0000000000008613                 mul     rsi
.text:0000000000008616                 mov     rbx, rax
.text:0000000000008619                 jo      loc_87AE
.text:000000000000861F
.text:000000000000861F loc_861F:                               ; CODE XREF: xstrtoul+408↓j
.text:000000000000861F                 sub     r8d, 1
.text:0000000000008623                 jnz     short loc_8610
.text:0000000000008625
.text:0000000000008625 loc_8625:                               ; CODE XREF: xstrtoul+29D↓j
.text:0000000000008625                                         ; xstrtoul+2BD↓j ...
.text:0000000000008625                 or      ebp, r9d
.text:0000000000008628                 jmp     short loc_85B0  ; jumptable 0000000000008586 case 99
.text:000000000000862A ; ---------------------------------------------------------------------------
.text:000000000000862A
.text:000000000000862A loc_862A:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000862A                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:000000000000862A                 mov     r8d, 8          ; jumptable 0000000000008586 case 89
.text:0000000000008630                 xor     r9d, r9d
.text:0000000000008633                 nop     dword ptr [rax+rax+00h]
.text:0000000000008638
.text:0000000000008638 loc_8638:                               ; CODE XREF: xstrtoul+29B↓j
.text:0000000000008638                 mov     rax, rbx
.text:000000000000863B                 mul     rsi
.text:000000000000863E                 mov     rbx, rax
.text:0000000000008641                 jo      loc_8790
.text:0000000000008647
.text:0000000000008647 loc_8647:                               ; CODE XREF: xstrtoul+3EA↓j
.text:0000000000008647                 sub     r8d, 1
.text:000000000000864B                 jnz     short loc_8638
.text:000000000000864D                 jmp     short loc_8625
.text:000000000000864F ; ---------------------------------------------------------------------------
.text:000000000000864F
.text:000000000000864F loc_864F:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000864F                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:000000000000864F                 mov     r8d, 4          ; jumptable 0000000000008586 cases 84,116
.text:0000000000008655                 xor     r9d, r9d
.text:0000000000008658
.text:0000000000008658 loc_8658:                               ; CODE XREF: xstrtoul+2BB↓j
.text:0000000000008658                 mov     rax, rbx
.text:000000000000865B                 mul     rsi
.text:000000000000865E                 mov     rbx, rax
.text:0000000000008661                 jo      loc_8763
.text:0000000000008667
.text:0000000000008667 loc_8667:                               ; CODE XREF: xstrtoul+3BD↓j
.text:0000000000008667                 sub     r8d, 1
.text:000000000000866B                 jnz     short loc_8658
.text:000000000000866D                 jmp     short loc_8625
.text:000000000000866F ; ---------------------------------------------------------------------------
.text:000000000000866F
.text:000000000000866F loc_866F:                               ; CODE XREF: xstrtoul+1D6↑j
.text:000000000000866F                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:000000000000866F                 mov     rax, rbx        ; jumptable 0000000000008586 cases 75,107
.text:0000000000008672                 mul     rsi
.text:0000000000008675                 mov     rbx, rax
.text:0000000000008678                 jno     loc_85B0        ; jumptable 0000000000008586 case 99
.text:000000000000867E
.text:000000000000867E loc_867E:                               ; CODE XREF: xstrtoul+232↑j
.text:000000000000867E                                         ; xstrtoul+248↑j ...
.text:000000000000867E                 mov     ebp, 1
.text:0000000000008683                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008687                 jmp     loc_85B0        ; jumptable 0000000000008586 case 99
.text:0000000000008687 ; ---------------------------------------------------------------------------
.text:000000000000868C                 align 10h
.text:0000000000008690
.text:0000000000008690 loc_8690:                               ; CODE XREF: xstrtoul+1D6↑j
.text:0000000000008690                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:0000000000008690                 mov     r8d, 5          ; jumptable 0000000000008586 case 80
.text:0000000000008696                 xor     r9d, r9d
.text:0000000000008699
.text:0000000000008699 loc_8699:                               ; CODE XREF: xstrtoul+2FC↓j
.text:0000000000008699                 mov     rax, rbx
.text:000000000000869C                 mul     rsi
.text:000000000000869F                 mov     rbx, rax
.text:00000000000086A2                 jo      loc_879F
.text:00000000000086A8
.text:00000000000086A8 loc_86A8:                               ; CODE XREF: xstrtoul+3F9↓j
.text:00000000000086A8                 sub     r8d, 1
.text:00000000000086AC                 jnz     short loc_8699
.text:00000000000086AE                 jmp     loc_8625
.text:00000000000086B3 ; ---------------------------------------------------------------------------
.text:00000000000086B3
.text:00000000000086B3 loc_86B3:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000086B3                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:00000000000086B3                 mov     r8d, 6          ; jumptable 0000000000008586 case 69
.text:00000000000086B9                 xor     r9d, r9d
.text:00000000000086BC
.text:00000000000086BC loc_86BC:                               ; CODE XREF: xstrtoul+31F↓j
.text:00000000000086BC                 mov     rax, rbx
.text:00000000000086BF                 mul     rsi
.text:00000000000086C2                 mov     rbx, rax
.text:00000000000086C5                 jo      loc_8754
.text:00000000000086CB
.text:00000000000086CB loc_86CB:                               ; CODE XREF: xstrtoul+3AE↓j
.text:00000000000086CB                 sub     r8d, 1
.text:00000000000086CF                 jnz     short loc_86BC
.text:00000000000086D1                 jmp     loc_8625
.text:00000000000086D6 ; ---------------------------------------------------------------------------
.text:00000000000086D6
.text:00000000000086D6 loc_86D6:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000086D6                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:00000000000086D6                 mov     edx, 400h       ; jumptable 0000000000008586 case 66
.text:00000000000086DB                 mov     rax, rdx
.text:00000000000086DE                 mul     rbx
.text:00000000000086E1                 jo      short loc_867E
.text:00000000000086E3                 shl     rbx, 0Ah
.text:00000000000086E7                 jmp     loc_85B0        ; jumptable 0000000000008586 case 99
.text:00000000000086EC ; ---------------------------------------------------------------------------
.text:00000000000086EC
.text:00000000000086EC loc_86EC:                               ; CODE XREF: xstrtoul+1D6↑j
.text:00000000000086EC                                         ; DATA XREF: .rodata:jpt_8586↓o
.text:00000000000086EC                 mov     rax, rbx        ; jumptable 0000000000008586 cases 71,103
.text:00000000000086EF                 mul     rsi
.text:00000000000086F2                 jo      loc_87BD
.text:00000000000086F8                 xor     r8d, r8d
.text:00000000000086FB
.text:00000000000086FB loc_86FB:                               ; CODE XREF: xstrtoul+417↓j
.text:00000000000086FB                 mul     rsi
.text:00000000000086FE                 jno     loc_8597
.text:0000000000008704                 mov     r8d, 1
.text:000000000000870A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000870E                 jmp     loc_8597
.text:000000000000870E ; ---------------------------------------------------------------------------
.text:0000000000008713                 align 8
.text:0000000000008718
.text:0000000000008718 loc_8718:                               ; CODE XREF: xstrtoul+195↑j
.text:0000000000008718                 xor     edi, edi
.text:000000000000871A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:000000000000871E                 mov     esi, 400h
.text:0000000000008723                 setz    dil
.text:0000000000008727                 lea     edi, [rdi+rdi+1]
.text:000000000000872B                 jmp     loc_856A
.text:0000000000008730 ; ---------------------------------------------------------------------------
.text:0000000000008730
.text:0000000000008730 loc_8730:                               ; CODE XREF: xstrtoul+ED↑j
.text:0000000000008730                 call    ___stack_chk_fail
.text:0000000000008735 ; ---------------------------------------------------------------------------
.text:0000000000008735
.text:0000000000008735 loc_8735:                               ; CODE XREF: xstrtoul+21↑j
.text:0000000000008735                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtoul"
.text:000000000000873C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000008743                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:000000000000874A                 mov     edx, 54h ; 'T'  ; line
.text:000000000000874F                 call    ___assert_fail
.text:0000000000008754 ; ---------------------------------------------------------------------------
.text:0000000000008754
.text:0000000000008754 loc_8754:                               ; CODE XREF: xstrtoul+315↑j
.text:0000000000008754                 mov     r9d, 1
.text:000000000000875A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000875E                 jmp     loc_86CB
.text:0000000000008763 ; ---------------------------------------------------------------------------
.text:0000000000008763
.text:0000000000008763 loc_8763:                               ; CODE XREF: xstrtoul+2B1↑j
.text:0000000000008763                 mov     r9d, 1
.text:0000000000008769                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000876D                 jmp     loc_8667
.text:0000000000008772 ; ---------------------------------------------------------------------------
.text:0000000000008772
.text:0000000000008772 loc_8772:                               ; CODE XREF: xstrtoul+1EA↑j
.text:0000000000008772                 mov     r8d, 1
.text:0000000000008778                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000877C                 jmp     loc_85A3
.text:0000000000008781 ; ---------------------------------------------------------------------------
.text:0000000000008781
.text:0000000000008781 loc_8781:                               ; CODE XREF: xstrtoul+1DE↑j
.text:0000000000008781                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008785                 mov     r8d, 1
.text:000000000000878B                 jmp     loc_8597
.text:0000000000008790 ; ---------------------------------------------------------------------------
.text:0000000000008790
.text:0000000000008790 loc_8790:                               ; CODE XREF: xstrtoul+291↑j
.text:0000000000008790                 mov     r9d, 1
.text:0000000000008796                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000879A                 jmp     loc_8647
.text:000000000000879F ; ---------------------------------------------------------------------------
.text:000000000000879F
.text:000000000000879F loc_879F:                               ; CODE XREF: xstrtoul+2F2↑j
.text:000000000000879F                 mov     r9d, 1
.text:00000000000087A5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000087A9                 jmp     loc_86A8
.text:00000000000087AE ; ---------------------------------------------------------------------------
.text:00000000000087AE
.text:00000000000087AE loc_87AE:                               ; CODE XREF: xstrtoul+269↑j
.text:00000000000087AE                 mov     r9d, 1
.text:00000000000087B4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000087B8                 jmp     loc_861F
.text:00000000000087BD ; ---------------------------------------------------------------------------
.text:00000000000087BD
.text:00000000000087BD loc_87BD:                               ; CODE XREF: xstrtoul+342↑j
.text:00000000000087BD                 mov     r8d, 1
.text:00000000000087C3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000087C7                 jmp     loc_86FB
.text:00000000000087C7 ; } // starts at 83B0
.text:00000000000087C7 xstrtoul        endp
.text:00000000000087C7
.text:00000000000087C7 ; ---------------------------------------------------------------------------
.text:00000000000087CC                 align 10h
.text:00000000000087D0
.text:00000000000087D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000087D0
.text:00000000000087D0
.text:00000000000087D0 ; __int64 __fastcall xstrtoumax(char *nptr)
.text:00000000000087D0                 public xstrtoumax
.text:00000000000087D0 xstrtoumax      proc near               ; CODE XREF: xnumtoumax+35↑p
.text:00000000000087D0
.text:00000000000087D0 base            = dword ptr -50h
.text:00000000000087D0 endptr          = qword ptr -48h
.text:00000000000087D0 var_40          = qword ptr -40h
.text:00000000000087D0
.text:00000000000087D0 ; __unwind {
.text:00000000000087D0                 push    r15
.text:00000000000087D2                 push    r14
.text:00000000000087D4                 push    r13
.text:00000000000087D6                 push    r12
.text:00000000000087D8                 push    rbp
.text:00000000000087D9                 push    rbx
.text:00000000000087DA                 sub     rsp, 28h
.text:00000000000087DE                 mov     rax, fs:28h
.text:00000000000087E7                 mov     [rsp+58h+var_40], rax
.text:00000000000087EC                 xor     eax, eax
.text:00000000000087EE                 cmp     edx, 24h ; '$'
.text:00000000000087F1                 ja      loc_8B55
.text:00000000000087F7                 lea     rax, [rsp+58h+endptr]
.text:00000000000087FC                 mov     r15, rsi
.text:00000000000087FF                 test    rsi, rsi
.text:0000000000008802                 mov     rbp, rdi
.text:0000000000008805                 mov     [rsp+58h+base], edx
.text:0000000000008809                 mov     r14, rcx
.text:000000000000880C                 mov     r13, r8
.text:000000000000880F                 cmovz   r15, rax
.text:0000000000008813                 call    ___errno_location
.text:0000000000008818                 mov     dword ptr [rax], 0
.text:000000000000881E                 mov     r12, rax
.text:0000000000008821                 movzx   ebx, byte ptr [rbp+0]
.text:0000000000008825                 call    ___ctype_b_loc
.text:000000000000882A                 mov     edx, [rsp+58h+base] ; base
.text:000000000000882E                 mov     rsi, [rax]
.text:0000000000008831                 mov     rax, rbp
.text:0000000000008834                 jmp     short loc_8847
.text:0000000000008834 ; ---------------------------------------------------------------------------
.text:0000000000008836                 align 20h
.text:0000000000008840
.text:0000000000008840 loc_8840:                               ; CODE XREF: xstrtoumax+7F↓j
.text:0000000000008840                 add     rax, 1
.text:0000000000008844                 movzx   ebx, byte ptr [rax]
.text:0000000000008847
.text:0000000000008847 loc_8847:                               ; CODE XREF: xstrtoumax+64↑j
.text:0000000000008847                 movzx   ecx, bl
.text:000000000000884A                 test    byte ptr [rsi+rcx*2+1], 20h
.text:000000000000884F                 jnz     short loc_8840
.text:0000000000008851                 cmp     bl, 2Dh ; '-'
.text:0000000000008854                 jz      short loc_88A8
.text:0000000000008856                 xor     ecx, ecx        ; group
.text:0000000000008858                 mov     rsi, r15        ; endptr
.text:000000000000885B                 mov     rdi, rbp        ; nptr
.text:000000000000885E                 call    ___strtoul_internal
.text:0000000000008863                 mov     rcx, [r15]
.text:0000000000008866                 mov     rbx, rax
.text:0000000000008869                 cmp     rcx, rbp
.text:000000000000886C                 jz      short loc_8898
.text:000000000000886E                 mov     eax, [r12]
.text:0000000000008872                 test    eax, eax
.text:0000000000008874                 jz      short loc_88D8
.text:0000000000008876                 cmp     eax, 22h ; '"'
.text:0000000000008879                 mov     ebp, 1
.text:000000000000887E                 jnz     short loc_88A8
.text:0000000000008880
.text:0000000000008880 loc_8880:                               ; CODE XREF: xstrtoumax+10A↓j
.text:0000000000008880                 test    r13, r13
.text:0000000000008883                 jz      short loc_888E
.text:0000000000008885                 movzx   r12d, byte ptr [rcx]
.text:0000000000008889                 test    r12b, r12b
.text:000000000000888C                 jnz     short loc_8907
.text:000000000000888E
.text:000000000000888E loc_888E:                               ; CODE XREF: xstrtoumax+B3↑j
.text:000000000000888E                 mov     [r14], rbx
.text:0000000000008891                 jmp     short loc_88AD
.text:0000000000008891 ; ---------------------------------------------------------------------------
.text:0000000000008893                 align 8
.text:0000000000008898
.text:0000000000008898 loc_8898:                               ; CODE XREF: xstrtoumax+9C↑j
.text:0000000000008898                 test    r13, r13
.text:000000000000889B                 mov     qword ptr [rsp+58h+base], rcx
.text:00000000000088A0                 jnz     short loc_88E0
.text:00000000000088A2                 nop     word ptr [rax+rax+00h]
.text:00000000000088A8
.text:00000000000088A8 loc_88A8:                               ; CODE XREF: xstrtoumax+84↑j
.text:00000000000088A8                                         ; xstrtoumax+AE↑j ...
.text:00000000000088A8                 mov     ebp, 4
.text:00000000000088AD
.text:00000000000088AD loc_88AD:                               ; CODE XREF: xstrtoumax+C1↑j
.text:00000000000088AD                                         ; xstrtoumax+217↓j ...
.text:00000000000088AD                 mov     rdi, [rsp+58h+var_40]
.text:00000000000088B2                 xor     rdi, fs:28h
.text:00000000000088BB                 mov     eax, ebp
.text:00000000000088BD                 jnz     loc_8B50
.text:00000000000088C3                 add     rsp, 28h
.text:00000000000088C7                 pop     rbx
.text:00000000000088C8                 pop     rbp
.text:00000000000088C9                 pop     r12
.text:00000000000088CB                 pop     r13
.text:00000000000088CD                 pop     r14
.text:00000000000088CF                 pop     r15
.text:00000000000088D1                 retn
.text:00000000000088D1 ; ---------------------------------------------------------------------------
.text:00000000000088D2                 align 8
.text:00000000000088D8
.text:00000000000088D8 loc_88D8:                               ; CODE XREF: xstrtoumax+A4↑j
.text:00000000000088D8                 xor     ebp, ebp
.text:00000000000088DA                 jmp     short loc_8880
.text:00000000000088DA ; ---------------------------------------------------------------------------
.text:00000000000088DC                 align 20h
.text:00000000000088E0
.text:00000000000088E0 loc_88E0:                               ; CODE XREF: xstrtoumax+D0↑j
.text:00000000000088E0                 movzx   r12d, byte ptr [rbp+0]
.text:00000000000088E5                 test    r12b, r12b
.text:00000000000088E8                 jz      short loc_88A8
.text:00000000000088EA                 movsx   esi, r12b       ; c
.text:00000000000088EE                 mov     rdi, r13        ; s
.text:00000000000088F1                 xor     ebp, ebp
.text:00000000000088F3                 call    _strchr
.text:00000000000088F8                 test    rax, rax
.text:00000000000088FB                 mov     ebx, 1
.text:0000000000008900                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008905                 jz      short loc_88A8
.text:0000000000008907
.text:0000000000008907 loc_8907:                               ; CODE XREF: xstrtoumax+BC↑j
.text:0000000000008907                 movsx   esi, r12b       ; c
.text:000000000000890B                 mov     rdi, r13        ; s
.text:000000000000890E                 mov     qword ptr [rsp+58h+base], rcx
.text:0000000000008913                 call    _strchr
.text:0000000000008918                 test    rax, rax
.text:000000000000891B                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008920                 jz      def_89A6        ; jumptable 00000000000089A6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008926                 lea     eax, [r12-45h]
.text:000000000000892B                 cmp     al, 2Fh ; '/'
.text:000000000000892D                 ja      short loc_8980
.text:000000000000892F                 mov     rdx, 814400308945h
.text:0000000000008939                 bt      rdx, rax
.text:000000000000893D                 jnb     short loc_8980
.text:000000000000893F                 mov     esi, 30h ; '0'  ; c
.text:0000000000008944                 mov     rdi, r13        ; s
.text:0000000000008947                 mov     qword ptr [rsp+58h+base], rcx
.text:000000000000894C                 call    _strchr
.text:0000000000008951                 test    rax, rax
.text:0000000000008954                 mov     rcx, qword ptr [rsp+58h+base]
.text:0000000000008959                 jz      short loc_8980
.text:000000000000895B                 movzx   eax, byte ptr [rcx+1]
.text:000000000000895F                 cmp     al, 44h ; 'D'
.text:0000000000008961                 jz      short loc_896F
.text:0000000000008963                 cmp     al, 69h ; 'i'
.text:0000000000008965                 jz      loc_8B38
.text:000000000000896B                 cmp     al, 42h ; 'B'
.text:000000000000896D                 jnz     short loc_8980
.text:000000000000896F
.text:000000000000896F loc_896F:                               ; CODE XREF: xstrtoumax+191↑j
.text:000000000000896F                 mov     edi, 2
.text:0000000000008974                 mov     esi, 3E8h
.text:0000000000008979                 jmp     short loc_898A
.text:0000000000008979 ; ---------------------------------------------------------------------------
.text:000000000000897B                 align 20h
.text:0000000000008980
.text:0000000000008980 loc_8980:                               ; CODE XREF: xstrtoumax+15D↑j
.text:0000000000008980                                         ; xstrtoumax+16D↑j ...
.text:0000000000008980                 mov     edi, 1
.text:0000000000008985                 mov     esi, 400h
.text:000000000000898A
.text:000000000000898A loc_898A:                               ; CODE XREF: xstrtoumax+1A9↑j
.text:000000000000898A                                         ; xstrtoumax+37B↓j
.text:000000000000898A                 sub     r12d, 42h ; 'B' ; switch 54 cases
.text:000000000000898E                 cmp     r12b, 35h
.text:0000000000008992                 ja      short def_89A6  ; jumptable 00000000000089A6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:0000000000008994                 lea     rdx, jpt_89A6
.text:000000000000899B                 movzx   r12d, r12b
.text:000000000000899F                 movsxd  rax, ds:(jpt_89A6 - 0A8F0h)[rdx+r12*4]
.text:00000000000089A3                 add     rax, rdx
.text:00000000000089A6                 jmp     rax             ; switch jump
.text:00000000000089A8 ; ---------------------------------------------------------------------------
.text:00000000000089A8
.text:00000000000089A8 loc_89A8:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000089A8                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:00000000000089A8                 mov     rax, rbx        ; jumptable 00000000000089A6 cases 77,109
.text:00000000000089AB                 mul     rsi
.text:00000000000089AE                 jo      loc_8BA1
.text:00000000000089B4                 xor     r8d, r8d
.text:00000000000089B7
.text:00000000000089B7 loc_89B7:                               ; CODE XREF: xstrtoumax+34E↓j
.text:00000000000089B7                                         ; xstrtoumax+35E↓j ...
.text:00000000000089B7                 mul     rsi
.text:00000000000089BA                 jo      loc_8B92
.text:00000000000089C0                 mov     rbx, rax
.text:00000000000089C3
.text:00000000000089C3 loc_89C3:                               ; CODE XREF: xstrtoumax+3CC↓j
.text:00000000000089C3                 or      ebp, r8d
.text:00000000000089C6                 db      2Eh
.text:00000000000089C6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000089D0
.text:00000000000089D0 loc_89D0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000089D0                                         ; xstrtoumax+23B↓j ...
.text:00000000000089D0                 movsxd  rdi, edi        ; jumptable 00000000000089A6 case 99
.text:00000000000089D3                 mov     eax, ebp
.text:00000000000089D5                 add     rcx, rdi
.text:00000000000089D8                 or      eax, 2
.text:00000000000089DB                 mov     [r15], rcx
.text:00000000000089DE                 cmp     byte ptr [rcx], 0
.text:00000000000089E1                 mov     [r14], rbx
.text:00000000000089E4                 cmovnz  ebp, eax
.text:00000000000089E7                 jmp     loc_88AD
.text:00000000000089EC ; ---------------------------------------------------------------------------
.text:00000000000089EC
.text:00000000000089EC def_89A6:                               ; CODE XREF: xstrtoumax+150↑j
.text:00000000000089EC                                         ; xstrtoumax+1C2↑j ...
.text:00000000000089EC                 mov     [r14], rbx      ; jumptable 00000000000089A6 default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000089EF                 or      ebp, 2
.text:00000000000089F2                 jmp     loc_88AD
.text:00000000000089F7 ; ---------------------------------------------------------------------------
.text:00000000000089F7
.text:00000000000089F7 loc_89F7:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:00000000000089F7                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:00000000000089F7                 mov     edx, 2          ; jumptable 00000000000089A6 case 119
.text:00000000000089FC                 mov     rax, rdx
.text:00000000000089FF                 mul     rbx
.text:0000000000008A02                 jo      loc_8A9E
.text:0000000000008A08                 add     rbx, rbx
.text:0000000000008A0B                 jmp     short loc_89D0  ; jumptable 00000000000089A6 case 99
.text:0000000000008A0D ; ---------------------------------------------------------------------------
.text:0000000000008A0D
.text:0000000000008A0D loc_8A0D:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A0D                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008A0D                 mov     edx, 200h       ; jumptable 00000000000089A6 case 98
.text:0000000000008A12                 mov     rax, rdx
.text:0000000000008A15                 mul     rbx
.text:0000000000008A18                 jo      loc_8A9E
.text:0000000000008A1E                 shl     rbx, 9
.text:0000000000008A22                 jmp     short loc_89D0  ; jumptable 00000000000089A6 case 99
.text:0000000000008A24 ; ---------------------------------------------------------------------------
.text:0000000000008A24
.text:0000000000008A24 loc_8A24:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A24                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008A24                 mov     r8d, 7          ; jumptable 00000000000089A6 case 90
.text:0000000000008A2A                 xor     r9d, r9d
.text:0000000000008A2D                 nop     dword ptr [rax]
.text:0000000000008A30
.text:0000000000008A30 loc_8A30:                               ; CODE XREF: xstrtoumax+273↓j
.text:0000000000008A30                 mov     rax, rbx
.text:0000000000008A33                 mul     rsi
.text:0000000000008A36                 mov     rbx, rax
.text:0000000000008A39                 jo      loc_8BCE
.text:0000000000008A3F
.text:0000000000008A3F loc_8A3F:                               ; CODE XREF: xstrtoumax+408↓j
.text:0000000000008A3F                 sub     r8d, 1
.text:0000000000008A43                 jnz     short loc_8A30
.text:0000000000008A45
.text:0000000000008A45 loc_8A45:                               ; CODE XREF: xstrtoumax+29D↓j
.text:0000000000008A45                                         ; xstrtoumax+2BD↓j ...
.text:0000000000008A45                 or      ebp, r9d
.text:0000000000008A48                 jmp     short loc_89D0  ; jumptable 00000000000089A6 case 99
.text:0000000000008A4A ; ---------------------------------------------------------------------------
.text:0000000000008A4A
.text:0000000000008A4A loc_8A4A:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A4A                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008A4A                 mov     r8d, 8          ; jumptable 00000000000089A6 case 89
.text:0000000000008A50                 xor     r9d, r9d
.text:0000000000008A53                 nop     dword ptr [rax+rax+00h]
.text:0000000000008A58
.text:0000000000008A58 loc_8A58:                               ; CODE XREF: xstrtoumax+29B↓j
.text:0000000000008A58                 mov     rax, rbx
.text:0000000000008A5B                 mul     rsi
.text:0000000000008A5E                 mov     rbx, rax
.text:0000000000008A61                 jo      loc_8BB0
.text:0000000000008A67
.text:0000000000008A67 loc_8A67:                               ; CODE XREF: xstrtoumax+3EA↓j
.text:0000000000008A67                 sub     r8d, 1
.text:0000000000008A6B                 jnz     short loc_8A58
.text:0000000000008A6D                 jmp     short loc_8A45
.text:0000000000008A6F ; ---------------------------------------------------------------------------
.text:0000000000008A6F
.text:0000000000008A6F loc_8A6F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A6F                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008A6F                 mov     r8d, 4          ; jumptable 00000000000089A6 cases 84,116
.text:0000000000008A75                 xor     r9d, r9d
.text:0000000000008A78
.text:0000000000008A78 loc_8A78:                               ; CODE XREF: xstrtoumax+2BB↓j
.text:0000000000008A78                 mov     rax, rbx
.text:0000000000008A7B                 mul     rsi
.text:0000000000008A7E                 mov     rbx, rax
.text:0000000000008A81                 jo      loc_8B83
.text:0000000000008A87
.text:0000000000008A87 loc_8A87:                               ; CODE XREF: xstrtoumax+3BD↓j
.text:0000000000008A87                 sub     r8d, 1
.text:0000000000008A8B                 jnz     short loc_8A78
.text:0000000000008A8D                 jmp     short loc_8A45
.text:0000000000008A8F ; ---------------------------------------------------------------------------
.text:0000000000008A8F
.text:0000000000008A8F loc_8A8F:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008A8F                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008A8F                 mov     rax, rbx        ; jumptable 00000000000089A6 cases 75,107
.text:0000000000008A92                 mul     rsi
.text:0000000000008A95                 mov     rbx, rax
.text:0000000000008A98                 jno     loc_89D0        ; jumptable 00000000000089A6 case 99
.text:0000000000008A9E
.text:0000000000008A9E loc_8A9E:                               ; CODE XREF: xstrtoumax+232↑j
.text:0000000000008A9E                                         ; xstrtoumax+248↑j ...
.text:0000000000008A9E                 mov     ebp, 1
.text:0000000000008AA3                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008AA7                 jmp     loc_89D0        ; jumptable 00000000000089A6 case 99
.text:0000000000008AA7 ; ---------------------------------------------------------------------------
.text:0000000000008AAC                 align 10h
.text:0000000000008AB0
.text:0000000000008AB0 loc_8AB0:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008AB0                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008AB0                 mov     r8d, 5          ; jumptable 00000000000089A6 case 80
.text:0000000000008AB6                 xor     r9d, r9d
.text:0000000000008AB9
.text:0000000000008AB9 loc_8AB9:                               ; CODE XREF: xstrtoumax+2FC↓j
.text:0000000000008AB9                 mov     rax, rbx
.text:0000000000008ABC                 mul     rsi
.text:0000000000008ABF                 mov     rbx, rax
.text:0000000000008AC2                 jo      loc_8BBF
.text:0000000000008AC8
.text:0000000000008AC8 loc_8AC8:                               ; CODE XREF: xstrtoumax+3F9↓j
.text:0000000000008AC8                 sub     r8d, 1
.text:0000000000008ACC                 jnz     short loc_8AB9
.text:0000000000008ACE                 jmp     loc_8A45
.text:0000000000008AD3 ; ---------------------------------------------------------------------------
.text:0000000000008AD3
.text:0000000000008AD3 loc_8AD3:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008AD3                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008AD3                 mov     r8d, 6          ; jumptable 00000000000089A6 case 69
.text:0000000000008AD9                 xor     r9d, r9d
.text:0000000000008ADC
.text:0000000000008ADC loc_8ADC:                               ; CODE XREF: xstrtoumax+31F↓j
.text:0000000000008ADC                 mov     rax, rbx
.text:0000000000008ADF                 mul     rsi
.text:0000000000008AE2                 mov     rbx, rax
.text:0000000000008AE5                 jo      loc_8B74
.text:0000000000008AEB
.text:0000000000008AEB loc_8AEB:                               ; CODE XREF: xstrtoumax+3AE↓j
.text:0000000000008AEB                 sub     r8d, 1
.text:0000000000008AEF                 jnz     short loc_8ADC
.text:0000000000008AF1                 jmp     loc_8A45
.text:0000000000008AF6 ; ---------------------------------------------------------------------------
.text:0000000000008AF6
.text:0000000000008AF6 loc_8AF6:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008AF6                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008AF6                 mov     edx, 400h       ; jumptable 00000000000089A6 case 66
.text:0000000000008AFB                 mov     rax, rdx
.text:0000000000008AFE                 mul     rbx
.text:0000000000008B01                 jo      short loc_8A9E
.text:0000000000008B03                 shl     rbx, 0Ah
.text:0000000000008B07                 jmp     loc_89D0        ; jumptable 00000000000089A6 case 99
.text:0000000000008B0C ; ---------------------------------------------------------------------------
.text:0000000000008B0C
.text:0000000000008B0C loc_8B0C:                               ; CODE XREF: xstrtoumax+1D6↑j
.text:0000000000008B0C                                         ; DATA XREF: .rodata:jpt_89A6↓o
.text:0000000000008B0C                 mov     rax, rbx        ; jumptable 00000000000089A6 cases 71,103
.text:0000000000008B0F                 mul     rsi
.text:0000000000008B12                 jo      loc_8BDD
.text:0000000000008B18                 xor     r8d, r8d
.text:0000000000008B1B
.text:0000000000008B1B loc_8B1B:                               ; CODE XREF: xstrtoumax+417↓j
.text:0000000000008B1B                 mul     rsi
.text:0000000000008B1E                 jno     loc_89B7
.text:0000000000008B24                 mov     r8d, 1
.text:0000000000008B2A                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B2E                 jmp     loc_89B7
.text:0000000000008B2E ; ---------------------------------------------------------------------------
.text:0000000000008B33                 align 8
.text:0000000000008B38
.text:0000000000008B38 loc_8B38:                               ; CODE XREF: xstrtoumax+195↑j
.text:0000000000008B38                 xor     edi, edi
.text:0000000000008B3A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000008B3E                 mov     esi, 400h
.text:0000000000008B43                 setz    dil
.text:0000000000008B47                 lea     edi, [rdi+rdi+1]
.text:0000000000008B4B                 jmp     loc_898A
.text:0000000000008B50 ; ---------------------------------------------------------------------------
.text:0000000000008B50
.text:0000000000008B50 loc_8B50:                               ; CODE XREF: xstrtoumax+ED↑j
.text:0000000000008B50                 call    ___stack_chk_fail
.text:0000000000008B55 ; ---------------------------------------------------------------------------
.text:0000000000008B55
.text:0000000000008B55 loc_8B55:                               ; CODE XREF: xstrtoumax+21↑j
.text:0000000000008B55                 lea     rcx, __PRETTY_FUNCTION___4162_0 ; "xstrtoumax"
.text:0000000000008B5C                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000008B63                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000008B6A                 mov     edx, 54h ; 'T'  ; line
.text:0000000000008B6F                 call    ___assert_fail
.text:0000000000008B74 ; ---------------------------------------------------------------------------
.text:0000000000008B74
.text:0000000000008B74 loc_8B74:                               ; CODE XREF: xstrtoumax+315↑j
.text:0000000000008B74                 mov     r9d, 1
.text:0000000000008B7A                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B7E                 jmp     loc_8AEB
.text:0000000000008B83 ; ---------------------------------------------------------------------------
.text:0000000000008B83
.text:0000000000008B83 loc_8B83:                               ; CODE XREF: xstrtoumax+2B1↑j
.text:0000000000008B83                 mov     r9d, 1
.text:0000000000008B89                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B8D                 jmp     loc_8A87
.text:0000000000008B92 ; ---------------------------------------------------------------------------
.text:0000000000008B92
.text:0000000000008B92 loc_8B92:                               ; CODE XREF: xstrtoumax+1EA↑j
.text:0000000000008B92                 mov     r8d, 1
.text:0000000000008B98                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008B9C                 jmp     loc_89C3
.text:0000000000008BA1 ; ---------------------------------------------------------------------------
.text:0000000000008BA1
.text:0000000000008BA1 loc_8BA1:                               ; CODE XREF: xstrtoumax+1DE↑j
.text:0000000000008BA1                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BA5                 mov     r8d, 1
.text:0000000000008BAB                 jmp     loc_89B7
.text:0000000000008BB0 ; ---------------------------------------------------------------------------
.text:0000000000008BB0
.text:0000000000008BB0 loc_8BB0:                               ; CODE XREF: xstrtoumax+291↑j
.text:0000000000008BB0                 mov     r9d, 1
.text:0000000000008BB6                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BBA                 jmp     loc_8A67
.text:0000000000008BBF ; ---------------------------------------------------------------------------
.text:0000000000008BBF
.text:0000000000008BBF loc_8BBF:                               ; CODE XREF: xstrtoumax+2F2↑j
.text:0000000000008BBF                 mov     r9d, 1
.text:0000000000008BC5                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BC9                 jmp     loc_8AC8
.text:0000000000008BCE ; ---------------------------------------------------------------------------
.text:0000000000008BCE
.text:0000000000008BCE loc_8BCE:                               ; CODE XREF: xstrtoumax+269↑j
.text:0000000000008BCE                 mov     r9d, 1
.text:0000000000008BD4                 or      rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BD8                 jmp     loc_8A3F
.text:0000000000008BDD ; ---------------------------------------------------------------------------
.text:0000000000008BDD
.text:0000000000008BDD loc_8BDD:                               ; CODE XREF: xstrtoumax+342↑j
.text:0000000000008BDD                 mov     r8d, 1
.text:0000000000008BE3                 or      rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008BE7                 jmp     loc_8B1B
.text:0000000000008BE7 ; } // starts at 87D0
.text:0000000000008BE7 xstrtoumax      endp
.text:0000000000008BE7
.text:0000000000008BE7 ; ---------------------------------------------------------------------------
.text:0000000000008BEC                 align 10h
.text:0000000000008BF0
.text:0000000000008BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BF0
.text:0000000000008BF0 ; Attributes: info_from_lumina
.text:0000000000008BF0
.text:0000000000008BF0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000008BF0                 public rpl_fclose
.text:0000000000008BF0 rpl_fclose      proc near               ; CODE XREF: main+D62↑p
.text:0000000000008BF0                                         ; main+ED5↑p ...
.text:0000000000008BF0 ; __unwind {
.text:0000000000008BF0                 push    r12
.text:0000000000008BF2                 push    rbp
.text:0000000000008BF3                 push    rbx
.text:0000000000008BF4                 mov     rbx, rdi
.text:0000000000008BF7                 call    _fileno
.text:0000000000008BFC                 test    eax, eax
.text:0000000000008BFE                 mov     rdi, rbx        ; fp
.text:0000000000008C01                 js      short loc_8C57
.text:0000000000008C03                 call    ___freading
.text:0000000000008C08                 test    eax, eax
.text:0000000000008C0A                 jnz     short loc_8C38
.text:0000000000008C0C
.text:0000000000008C0C loc_8C0C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000008C0C                 mov     rdi, rbx        ; stream
.text:0000000000008C0F                 call    rpl_fflush
.text:0000000000008C14                 test    eax, eax
.text:0000000000008C16                 jz      short loc_8C54
.text:0000000000008C18                 call    ___errno_location
.text:0000000000008C1D                 mov     r12d, [rax]
.text:0000000000008C20                 mov     rdi, rbx        ; stream
.text:0000000000008C23                 mov     rbp, rax
.text:0000000000008C26                 call    _fclose
.text:0000000000008C2B                 test    r12d, r12d
.text:0000000000008C2E                 jnz     short loc_8C60
.text:0000000000008C30
.text:0000000000008C30 loc_8C30:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000008C30                 pop     rbx
.text:0000000000008C31                 pop     rbp
.text:0000000000008C32                 pop     r12
.text:0000000000008C34                 retn
.text:0000000000008C34 ; ---------------------------------------------------------------------------
.text:0000000000008C35                 align 8
.text:0000000000008C38
.text:0000000000008C38 loc_8C38:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000008C38                 mov     rdi, rbx        ; stream
.text:0000000000008C3B                 call    _fileno
.text:0000000000008C40                 xor     esi, esi        ; offset
.text:0000000000008C42                 mov     edx, 1          ; whence
.text:0000000000008C47                 mov     edi, eax        ; fd
.text:0000000000008C49                 call    _lseek
.text:0000000000008C4E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008C52                 jnz     short loc_8C0C
.text:0000000000008C54
.text:0000000000008C54 loc_8C54:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000008C54                 mov     rdi, rbx        ; stream
.text:0000000000008C57
.text:0000000000008C57 loc_8C57:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000008C57                 pop     rbx
.text:0000000000008C58                 pop     rbp
.text:0000000000008C59                 pop     r12
.text:0000000000008C5B                 jmp     _fclose
.text:0000000000008C60 ; ---------------------------------------------------------------------------
.text:0000000000008C60
.text:0000000000008C60 loc_8C60:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000008C60                 mov     [rbp+0], r12d
.text:0000000000008C64                 mov     eax, 0FFFFFFFFh
.text:0000000000008C69                 jmp     short loc_8C30
.text:0000000000008C69 ; } // starts at 8BF0
.text:0000000000008C69 rpl_fclose      endp
.text:0000000000008C69
.text:0000000000008C69 ; ---------------------------------------------------------------------------
.text:0000000000008C6B                 align 10h
.text:0000000000008C70
.text:0000000000008C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C70
.text:0000000000008C70
.text:0000000000008C70 ; __int64 __usercall rpl_fcntl@<rax>(int fd@<edi>, char)
.text:0000000000008C70                 public rpl_fcntl
.text:0000000000008C70 rpl_fcntl       proc near               ; CODE XREF: dup_safer+9↑j
.text:0000000000008C70
.text:0000000000008C70 var_68          = dword ptr -68h
.text:0000000000008C70 var_60          = qword ptr -60h
.text:0000000000008C70 var_58          = qword ptr -58h
.text:0000000000008C70 var_50          = qword ptr -50h
.text:0000000000008C70 var_48          = byte ptr -48h
.text:0000000000008C70 var_38          = qword ptr -38h
.text:0000000000008C70 var_30          = qword ptr -30h
.text:0000000000008C70 var_28          = qword ptr -28h
.text:0000000000008C70 var_20          = qword ptr -20h
.text:0000000000008C70 arg_0           = byte ptr  8
.text:0000000000008C70
.text:0000000000008C70 ; __unwind {
.text:0000000000008C70                 push    r12
.text:0000000000008C72                 push    rbp
.text:0000000000008C73                 mov     ebp, edi
.text:0000000000008C75                 push    rbx
.text:0000000000008C76                 sub     rsp, 50h
.text:0000000000008C7A                 mov     rax, fs:28h
.text:0000000000008C83                 mov     [rsp+68h+var_50], rax
.text:0000000000008C88                 xor     eax, eax
.text:0000000000008C8A                 lea     rax, [rsp+68h+arg_0]
.text:0000000000008C8F                 test    esi, esi
.text:0000000000008C91                 mov     [rsp+68h+var_38], rdx
.text:0000000000008C96                 mov     [rsp+68h+var_30], rcx
.text:0000000000008C9B                 mov     [rsp+68h+var_28], r8
.text:0000000000008CA0                 mov     [rsp+68h+var_60], rax
.text:0000000000008CA5                 lea     rax, [rsp+68h+var_48]
.text:0000000000008CAA                 mov     [rsp+68h+var_20], r9
.text:0000000000008CAF                 mov     [rsp+68h+var_68], 10h
.text:0000000000008CB6                 mov     [rsp+68h+var_58], rax
.text:0000000000008CBB                 jz      loc_8EC2
.text:0000000000008CC1                 cmp     esi, 406h
.text:0000000000008CC7                 jnz     short loc_8D10
.text:0000000000008CC9                 mov     rax, [rsp+68h+var_58]
.text:0000000000008CCE                 cmp     cs:have_dupfd_cloexec_3326, 0
.text:0000000000008CD5                 mov     [rsp+68h+var_68], 18h
.text:0000000000008CDC                 mov     r12d, [rax+10h]
.text:0000000000008CE0                 mov     edx, r12d
.text:0000000000008CE3                 js      loc_8E13
.text:0000000000008CE9                 xor     eax, eax
.text:0000000000008CEB                 mov     esi, 406h       ; cmd
.text:0000000000008CF0                 call    _fcntl
.text:0000000000008CF5                 test    eax, eax
.text:0000000000008CF7                 mov     ebx, eax
.text:0000000000008CF9                 js      loc_8E88
.text:0000000000008CFF
.text:0000000000008CFF loc_8CFF:                               ; CODE XREF: rpl_fcntl+220↓j
.text:0000000000008CFF                 mov     cs:have_dupfd_cloexec_3326, 1
.text:0000000000008D09                 jmp     short loc_8D50
.text:0000000000008D09 ; ---------------------------------------------------------------------------
.text:0000000000008D0B                 align 10h
.text:0000000000008D10
.text:0000000000008D10 loc_8D10:                               ; CODE XREF: rpl_fcntl+57↑j
.text:0000000000008D10                 cmp     esi, 0Bh
.text:0000000000008D13                 jz      short loc_8D40
.text:0000000000008D15                 jg      short loc_8D70
.text:0000000000008D17                 cmp     esi, 4
.text:0000000000008D1A                 jz      loc_8DF0
.text:0000000000008D20                 jg      loc_8DE0
.text:0000000000008D26                 cmp     esi, 2
.text:0000000000008D29                 jz      loc_8DF0
.text:0000000000008D2F                 jg      short loc_8D40
.text:0000000000008D31                 cmp     esi, 1
.text:0000000000008D34                 jnz     short loc_8D98
.text:0000000000008D36                 db      2Eh
.text:0000000000008D36                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008D40
.text:0000000000008D40 loc_8D40:                               ; CODE XREF: rpl_fcntl+A3↑j
.text:0000000000008D40                                         ; rpl_fcntl+BF↑j ...
.text:0000000000008D40                 mov     edi, ebp        ; fd
.text:0000000000008D42                 xor     eax, eax
.text:0000000000008D44                 call    _fcntl
.text:0000000000008D49                 mov     ebx, eax
.text:0000000000008D4B                 nop     dword ptr [rax+rax+00h]
.text:0000000000008D50
.text:0000000000008D50 loc_8D50:                               ; CODE XREF: rpl_fcntl+99↑j
.text:0000000000008D50                                         ; rpl_fcntl+147↓j ...
.text:0000000000008D50                 mov     rcx, [rsp+68h+var_50]
.text:0000000000008D55                 xor     rcx, fs:28h
.text:0000000000008D5E                 mov     eax, ebx
.text:0000000000008D60                 jnz     loc_8EBD
.text:0000000000008D66                 add     rsp, 50h
.text:0000000000008D6A                 pop     rbx
.text:0000000000008D6B                 pop     rbp
.text:0000000000008D6C                 pop     r12
.text:0000000000008D6E                 retn
.text:0000000000008D6E ; ---------------------------------------------------------------------------
.text:0000000000008D6F                 align 10h
.text:0000000000008D70
.text:0000000000008D70 loc_8D70:                               ; CODE XREF: rpl_fcntl+A5↑j
.text:0000000000008D70                 cmp     esi, 407h
.text:0000000000008D76                 jg      short loc_8DC0
.text:0000000000008D78                 cmp     esi, 406h
.text:0000000000008D7E                 jge     short loc_8DF0
.text:0000000000008D80                 cmp     esi, 401h
.text:0000000000008D86                 jz      short loc_8D40
.text:0000000000008D88                 cmp     esi, 402h
.text:0000000000008D8E                 jz      short loc_8DF0
.text:0000000000008D90                 cmp     esi, 400h
.text:0000000000008D96                 jz      short loc_8DF0
.text:0000000000008D98
.text:0000000000008D98 loc_8D98:                               ; CODE XREF: rpl_fcntl+C4↑j
.text:0000000000008D98                                         ; rpl_fcntl+164↓j ...
.text:0000000000008D98                 mov     eax, [rsp+68h+var_68]
.text:0000000000008D9B                 cmp     eax, 2Fh ; '/'
.text:0000000000008D9E                 ja      loc_8EDA
.text:0000000000008DA4                 add     rax, [rsp+68h+var_58]
.text:0000000000008DA9
.text:0000000000008DA9 loc_8DA9:                               ; CODE XREF: rpl_fcntl+26F↓j
.text:0000000000008DA9                 mov     rdx, [rax]
.text:0000000000008DAC                 mov     edi, ebp        ; fd
.text:0000000000008DAE                 xor     eax, eax
.text:0000000000008DB0                 call    _fcntl
.text:0000000000008DB5                 mov     ebx, eax
.text:0000000000008DB7                 jmp     short loc_8D50
.text:0000000000008DB7 ; ---------------------------------------------------------------------------
.text:0000000000008DB9                 align 20h
.text:0000000000008DC0
.text:0000000000008DC0 loc_8DC0:                               ; CODE XREF: rpl_fcntl+106↑j
.text:0000000000008DC0                 cmp     esi, 409h
.text:0000000000008DC6                 jz      short loc_8DF0
.text:0000000000008DC8                 jl      loc_8D40
.text:0000000000008DCE                 cmp     esi, 40Ah
.text:0000000000008DD4                 jnz     short loc_8D98
.text:0000000000008DD6                 jmp     loc_8D40
.text:0000000000008DD6 ; ---------------------------------------------------------------------------
.text:0000000000008DDB                 align 20h
.text:0000000000008DE0
.text:0000000000008DE0 loc_8DE0:                               ; CODE XREF: rpl_fcntl+B0↑j
.text:0000000000008DE0                 cmp     esi, 9
.text:0000000000008DE3                 jz      loc_8D40
.text:0000000000008DE9                 jg      short loc_8DF0
.text:0000000000008DEB                 cmp     esi, 8
.text:0000000000008DEE                 jnz     short loc_8D98
.text:0000000000008DF0
.text:0000000000008DF0 loc_8DF0:                               ; CODE XREF: rpl_fcntl+AA↑j
.text:0000000000008DF0                                         ; rpl_fcntl+B9↑j ...
.text:0000000000008DF0                 mov     eax, [rsp+68h+var_68]
.text:0000000000008DF3                 cmp     eax, 2Fh ; '/'
.text:0000000000008DF6                 ja      loc_8EE4
.text:0000000000008DFC                 add     rax, [rsp+68h+var_58]
.text:0000000000008E01
.text:0000000000008E01 loc_8E01:                               ; CODE XREF: rpl_fcntl+279↓j
.text:0000000000008E01                 mov     edx, [rax]
.text:0000000000008E03                 mov     edi, ebp        ; fd
.text:0000000000008E05                 xor     eax, eax
.text:0000000000008E07                 call    _fcntl
.text:0000000000008E0C                 mov     ebx, eax
.text:0000000000008E0E                 jmp     loc_8D50
.text:0000000000008E13 ; ---------------------------------------------------------------------------
.text:0000000000008E13
.text:0000000000008E13 loc_8E13:                               ; CODE XREF: rpl_fcntl+73↑j
.text:0000000000008E13                 xor     esi, esi        ; cmd
.text:0000000000008E15                 xor     eax, eax
.text:0000000000008E17                 call    _fcntl
.text:0000000000008E1C                 test    eax, eax
.text:0000000000008E1E                 mov     ebx, eax
.text:0000000000008E20                 js      loc_8D50
.text:0000000000008E26                 cmp     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000008E2D                 jnz     loc_8D50
.text:0000000000008E33
.text:0000000000008E33 loc_8E33:                               ; CODE XREF: rpl_fcntl+248↓j
.text:0000000000008E33                 xor     eax, eax
.text:0000000000008E35                 mov     esi, 1          ; cmd
.text:0000000000008E3A                 mov     edi, ebx        ; fd
.text:0000000000008E3C                 call    _fcntl
.text:0000000000008E41                 test    eax, eax
.text:0000000000008E43                 js      short loc_8E61
.text:0000000000008E45                 or      eax, 1
.text:0000000000008E48                 mov     esi, 2          ; cmd
.text:0000000000008E4D                 mov     edi, ebx        ; fd
.text:0000000000008E4F                 mov     edx, eax
.text:0000000000008E51                 xor     eax, eax
.text:0000000000008E53                 call    _fcntl
.text:0000000000008E58                 cmp     eax, 0FFFFFFFFh
.text:0000000000008E5B                 jnz     loc_8D50
.text:0000000000008E61
.text:0000000000008E61 loc_8E61:                               ; CODE XREF: rpl_fcntl+1D3↑j
.text:0000000000008E61                 call    ___errno_location
.text:0000000000008E66                 mov     r12d, [rax]
.text:0000000000008E69                 mov     rbp, rax
.text:0000000000008E6C                 mov     edi, ebx        ; fd
.text:0000000000008E6E                 call    _close
.text:0000000000008E73                 mov     ebx, 0FFFFFFFFh
.text:0000000000008E78                 mov     [rbp+0], r12d
.text:0000000000008E7C                 jmp     loc_8D50
.text:0000000000008E7C ; ---------------------------------------------------------------------------
.text:0000000000008E81                 align 8
.text:0000000000008E88
.text:0000000000008E88 loc_8E88:                               ; CODE XREF: rpl_fcntl+89↑j
.text:0000000000008E88                 call    ___errno_location
.text:0000000000008E8D                 cmp     dword ptr [rax], 16h
.text:0000000000008E90                 jnz     loc_8CFF
.text:0000000000008E96                 xor     esi, esi        ; cmd
.text:0000000000008E98                 xor     eax, eax
.text:0000000000008E9A                 mov     edx, r12d
.text:0000000000008E9D                 mov     edi, ebp        ; fd
.text:0000000000008E9F                 call    _fcntl
.text:0000000000008EA4                 test    eax, eax
.text:0000000000008EA6                 mov     ebx, eax
.text:0000000000008EA8                 js      loc_8D50
.text:0000000000008EAE                 mov     cs:have_dupfd_cloexec_3326, 0FFFFFFFFh
.text:0000000000008EB8                 jmp     loc_8E33
.text:0000000000008EBD ; ---------------------------------------------------------------------------
.text:0000000000008EBD
.text:0000000000008EBD loc_8EBD:                               ; CODE XREF: rpl_fcntl+F0↑j
.text:0000000000008EBD                 call    ___stack_chk_fail
.text:0000000000008EC2 ; ---------------------------------------------------------------------------
.text:0000000000008EC2
.text:0000000000008EC2 loc_8EC2:                               ; CODE XREF: rpl_fcntl+4B↑j
.text:0000000000008EC2                 mov     rax, [rsp+68h+var_58]
.text:0000000000008EC7                 xor     esi, esi        ; cmd
.text:0000000000008EC9                 mov     edx, [rax+10h]
.text:0000000000008ECC                 xor     eax, eax
.text:0000000000008ECE                 call    _fcntl
.text:0000000000008ED3                 mov     ebx, eax
.text:0000000000008ED5                 jmp     loc_8D50
.text:0000000000008EDA ; ---------------------------------------------------------------------------
.text:0000000000008EDA
.text:0000000000008EDA loc_8EDA:                               ; CODE XREF: rpl_fcntl+12E↑j
.text:0000000000008EDA                 mov     rax, [rsp+68h+var_60]
.text:0000000000008EDF                 jmp     loc_8DA9
.text:0000000000008EE4 ; ---------------------------------------------------------------------------
.text:0000000000008EE4
.text:0000000000008EE4 loc_8EE4:                               ; CODE XREF: rpl_fcntl+186↑j
.text:0000000000008EE4                 mov     rax, [rsp+68h+var_60]
.text:0000000000008EE9                 jmp     loc_8E01
.text:0000000000008EE9 ; } // starts at 8C70
.text:0000000000008EE9 rpl_fcntl       endp
.text:0000000000008EE9
.text:0000000000008EE9 ; ---------------------------------------------------------------------------
.text:0000000000008EEE                 align 10h
.text:0000000000008EF0
.text:0000000000008EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008EF0
.text:0000000000008EF0 ; Attributes: info_from_lumina
.text:0000000000008EF0
.text:0000000000008EF0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000008EF0                 public rpl_fflush
.text:0000000000008EF0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000008EF0 ; __unwind {
.text:0000000000008EF0                 test    rdi, rdi
.text:0000000000008EF3                 push    rbx
.text:0000000000008EF4                 mov     rbx, rdi
.text:0000000000008EF7                 jz      short loc_8F0A
.text:0000000000008EF9                 call    ___freading
.text:0000000000008EFE                 test    eax, eax
.text:0000000000008F00                 jz      short loc_8F0A
.text:0000000000008F02                 test    dword ptr [rbx], 100h
.text:0000000000008F08                 jnz     short loc_8F18
.text:0000000000008F0A
.text:0000000000008F0A loc_8F0A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000008F0A                                         ; rpl_fflush+10↑j
.text:0000000000008F0A                 mov     rdi, rbx        ; stream
.text:0000000000008F0D                 pop     rbx
.text:0000000000008F0E                 jmp     _fflush
.text:0000000000008F0E ; ---------------------------------------------------------------------------
.text:0000000000008F13                 align 8
.text:0000000000008F18
.text:0000000000008F18 loc_8F18:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000008F18                 mov     rdi, rbx
.text:0000000000008F1B                 mov     edx, 1
.text:0000000000008F20                 xor     esi, esi
.text:0000000000008F22                 call    rpl_fseeko
.text:0000000000008F27                 mov     rdi, rbx        ; stream
.text:0000000000008F2A                 pop     rbx
.text:0000000000008F2B                 jmp     _fflush
.text:0000000000008F2B ; } // starts at 8EF0
.text:0000000000008F2B rpl_fflush      endp
.text:0000000000008F2B
.text:0000000000008F30
.text:0000000000008F30 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F30
.text:0000000000008F30 ; Attributes: info_from_lumina
.text:0000000000008F30
.text:0000000000008F30 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000008F30                 public rpl_fseeko
.text:0000000000008F30 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000008F30 ; __unwind {
.text:0000000000008F30                 mov     rax, [rdi+8]
.text:0000000000008F34                 cmp     [rdi+10h], rax
.text:0000000000008F38                 jz      short loc_8F40
.text:0000000000008F3A
.text:0000000000008F3A loc_8F3A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000008F3A                                         ; rpl_fseeko+1F↓j
.text:0000000000008F3A                 jmp     _fseeko
.text:0000000000008F3A ; ---------------------------------------------------------------------------
.text:0000000000008F3F                 align 20h
.text:0000000000008F40
.text:0000000000008F40 loc_8F40:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000008F40                 mov     rax, [rdi+20h]
.text:0000000000008F44                 cmp     [rdi+28h], rax
.text:0000000000008F48                 jnz     short loc_8F3A
.text:0000000000008F4A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000008F4F                 jnz     short loc_8F3A
.text:0000000000008F51                 push    r12
.text:0000000000008F53                 push    rbp
.text:0000000000008F54                 mov     r12d, edx
.text:0000000000008F57                 push    rbx
.text:0000000000008F58                 mov     rbp, rsi
.text:0000000000008F5B                 mov     rbx, rdi
.text:0000000000008F5E                 call    _fileno
.text:0000000000008F63                 mov     edx, r12d       ; whence
.text:0000000000008F66                 mov     rsi, rbp        ; offset
.text:0000000000008F69                 mov     edi, eax        ; fd
.text:0000000000008F6B                 call    _lseek
.text:0000000000008F70                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008F74                 jz      short loc_8F82
.text:0000000000008F76                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000008F79                 mov     [rbx+90h], rax
.text:0000000000008F80                 xor     eax, eax
.text:0000000000008F82
.text:0000000000008F82 loc_8F82:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000008F82                 pop     rbx
.text:0000000000008F83                 pop     rbp
.text:0000000000008F84                 pop     r12
.text:0000000000008F86                 retn
.text:0000000000008F86 ; } // starts at 8F30
.text:0000000000008F86 rpl_fseeko      endp
.text:0000000000008F86
.text:0000000000008F86 ; ---------------------------------------------------------------------------
.text:0000000000008F87                 align 10h
.text:0000000000008F90
.text:0000000000008F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008F90
.text:0000000000008F90 ; Attributes: info_from_lumina
.text:0000000000008F90
.text:0000000000008F90 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000008F90                 public rpl_mbrtowc
.text:0000000000008F90 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000008F90
.text:0000000000008F90 pwc             = dword ptr -34h
.text:0000000000008F90 var_30          = qword ptr -30h
.text:0000000000008F90
.text:0000000000008F90 ; __unwind {
.text:0000000000008F90                 push    r13
.text:0000000000008F92                 push    r12
.text:0000000000008F94                 mov     r13, rsi
.text:0000000000008F97                 push    rbp
.text:0000000000008F98                 push    rbx
.text:0000000000008F99                 mov     rbx, rdi
.text:0000000000008F9C                 mov     r12, rdx
.text:0000000000008F9F                 sub     rsp, 18h
.text:0000000000008FA3                 mov     rax, fs:28h
.text:0000000000008FAC                 mov     [rsp+38h+var_30], rax
.text:0000000000008FB1                 xor     eax, eax
.text:0000000000008FB3                 lea     rax, [rsp+38h+pwc]
.text:0000000000008FB8                 test    rdi, rdi
.text:0000000000008FBB                 cmovz   rbx, rax
.text:0000000000008FBF                 mov     rdi, rbx        ; pwc
.text:0000000000008FC2                 call    _mbrtowc
.text:0000000000008FC7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000008FCB                 mov     rbp, rax
.text:0000000000008FCE                 jbe     short loc_8FF0
.text:0000000000008FD0                 test    r12, r12
.text:0000000000008FD3                 jz      short loc_8FF0
.text:0000000000008FD5                 xor     edi, edi
.text:0000000000008FD7                 call    hard_locale
.text:0000000000008FDC                 test    al, al
.text:0000000000008FDE                 jnz     short loc_8FF0
.text:0000000000008FE0                 movzx   eax, byte ptr [r13+0]
.text:0000000000008FE5                 mov     ebp, 1
.text:0000000000008FEA                 mov     [rbx], eax
.text:0000000000008FEC                 nop     dword ptr [rax+00h]
.text:0000000000008FF0
.text:0000000000008FF0 loc_8FF0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000008FF0                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000008FF0                 mov     rdx, [rsp+38h+var_30]
.text:0000000000008FF5                 xor     rdx, fs:28h
.text:0000000000008FFE                 mov     rax, rbp
.text:0000000000009001                 jnz     short loc_900E
.text:0000000000009003                 add     rsp, 18h
.text:0000000000009007                 pop     rbx
.text:0000000000009008                 pop     rbp
.text:0000000000009009                 pop     r12
.text:000000000000900B                 pop     r13
.text:000000000000900D                 retn
.text:000000000000900E ; ---------------------------------------------------------------------------
.text:000000000000900E
.text:000000000000900E loc_900E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000900E                 call    ___stack_chk_fail
.text:000000000000900E ; } // starts at 8F90
.text:000000000000900E rpl_mbrtowc     endp
.text:000000000000900E
.text:000000000000900E ; ---------------------------------------------------------------------------
.text:0000000000009013                 align 20h
.text:0000000000009020
.text:0000000000009020 ; =============== S U B R O U T I N E =======================================
.text:0000000000009020
.text:0000000000009020 ; Attributes: info_from_lumina
.text:0000000000009020
.text:0000000000009020 ; int __fastcall close_stream(FILE *stream)
.text:0000000000009020                 public close_stream
.text:0000000000009020 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000009020                                         ; close_stdout+33↑p
.text:0000000000009020 ; __unwind {
.text:0000000000009020                 push    r12
.text:0000000000009022                 push    rbp
.text:0000000000009023                 mov     rbp, rdi
.text:0000000000009026                 push    rbx
.text:0000000000009027                 call    ___fpending
.text:000000000000902C                 mov     ebx, [rbp+0]
.text:000000000000902F                 mov     rdi, rbp        ; stream
.text:0000000000009032                 mov     r12, rax
.text:0000000000009035                 call    rpl_fclose
.text:000000000000903A                 and     ebx, 20h
.text:000000000000903D                 test    ebx, ebx
.text:000000000000903F                 jnz     short loc_9058
.text:0000000000009041                 test    eax, eax
.text:0000000000009043                 jz      short loc_904F
.text:0000000000009045                 test    r12, r12
.text:0000000000009048                 mov     eax, 0FFFFFFFFh
.text:000000000000904D                 jz      short loc_9088
.text:000000000000904F
.text:000000000000904F loc_904F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000904F                 pop     rbx
.text:0000000000009050                 pop     rbp
.text:0000000000009051                 pop     r12
.text:0000000000009053                 retn
.text:0000000000009053 ; ---------------------------------------------------------------------------
.text:0000000000009054                 align 8
.text:0000000000009058
.text:0000000000009058 loc_9058:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000009058                 test    eax, eax
.text:000000000000905A                 jnz     short loc_9078
.text:000000000000905C                 call    ___errno_location
.text:0000000000009061                 mov     dword ptr [rax], 0
.text:0000000000009067                 mov     eax, 0FFFFFFFFh
.text:000000000000906C                 pop     rbx
.text:000000000000906D                 pop     rbp
.text:000000000000906E                 pop     r12
.text:0000000000009070                 retn
.text:0000000000009070 ; ---------------------------------------------------------------------------
.text:0000000000009071                 align 8
.text:0000000000009078
.text:0000000000009078 loc_9078:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000009078                 pop     rbx
.text:0000000000009079                 mov     eax, 0FFFFFFFFh
.text:000000000000907E                 pop     rbp
.text:000000000000907F                 pop     r12
.text:0000000000009081                 retn
.text:0000000000009081 ; ---------------------------------------------------------------------------
.text:0000000000009082                 align 8
.text:0000000000009088
.text:0000000000009088 loc_9088:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000009088                 call    ___errno_location
.text:000000000000908D                 cmp     dword ptr [rax], 9
.text:0000000000009090                 pop     rbx
.text:0000000000009091                 pop     rbp
.text:0000000000009092                 pop     r12
.text:0000000000009094                 setnz   al
.text:0000000000009097                 movzx   eax, al
.text:000000000000909A                 neg     eax
.text:000000000000909C                 retn
.text:000000000000909C ; } // starts at 9020
.text:000000000000909C close_stream    endp
.text:000000000000909C
.text:000000000000909C ; ---------------------------------------------------------------------------
.text:000000000000909D                 align 20h
.text:00000000000090A0
.text:00000000000090A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000090A0
.text:00000000000090A0
.text:00000000000090A0                 public hard_locale
.text:00000000000090A0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000090A0 ; __unwind {
.text:00000000000090A0                 sub     rsp, 8
.text:00000000000090A4                 xor     esi, esi        ; locale
.text:00000000000090A6                 call    _setlocale
.text:00000000000090AB                 mov     rdx, rax
.text:00000000000090AE                 mov     eax, 1
.text:00000000000090B3                 test    rdx, rdx
.text:00000000000090B6                 jz      short loc_90D5
.text:00000000000090B8                 lea     rdi, aC         ; "C"
.text:00000000000090BF                 mov     ecx, 2
.text:00000000000090C4                 mov     rsi, rdx
.text:00000000000090C7                 repe cmpsb
.text:00000000000090C9                 setnbe  cl
.text:00000000000090CC                 sbb     cl, 0
.text:00000000000090CF                 xor     eax, eax
.text:00000000000090D1                 test    cl, cl
.text:00000000000090D3                 jnz     short loc_90E0
.text:00000000000090D5
.text:00000000000090D5 loc_90D5:                               ; CODE XREF: hard_locale+16↑j
.text:00000000000090D5                 add     rsp, 8
.text:00000000000090D9                 retn
.text:00000000000090D9 ; ---------------------------------------------------------------------------
.text:00000000000090DA                 align 20h
.text:00000000000090E0
.text:00000000000090E0 loc_90E0:                               ; CODE XREF: hard_locale+33↑j
.text:00000000000090E0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000090E7                 mov     ecx, 6
.text:00000000000090EC                 mov     rsi, rdx
.text:00000000000090EF                 repe cmpsb
.text:00000000000090F1                 setnbe  al
.text:00000000000090F4                 sbb     al, 0
.text:00000000000090F6                 test    al, al
.text:00000000000090F8                 setnz   al
.text:00000000000090FB                 add     rsp, 8
.text:00000000000090FF                 retn
.text:00000000000090FF ; } // starts at 90A0
.text:00000000000090FF hard_locale     endp
.text:00000000000090FF
.text:0000000000009100
.text:0000000000009100 ; =============== S U B R O U T I N E =======================================
.text:0000000000009100
.text:0000000000009100
.text:0000000000009100                 public locale_charset
.text:0000000000009100 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000009100 ; __unwind {
.text:0000000000009100                 sub     rsp, 8
.text:0000000000009104                 mov     edi, 0Eh        ; item
.text:0000000000009109                 call    _nl_langinfo
.text:000000000000910E                 test    rax, rax
.text:0000000000009111                 jz      short loc_9130
.text:0000000000009113                 cmp     byte ptr [rax], 0
.text:0000000000009116                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000911D                 cmovz   rax, rdx
.text:0000000000009121                 add     rsp, 8
.text:0000000000009125                 retn
.text:0000000000009125 ; ---------------------------------------------------------------------------
.text:0000000000009126                 align 10h
.text:0000000000009130
.text:0000000000009130 loc_9130:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000009130                 lea     rax, aAscii     ; "ASCII"
.text:0000000000009137                 add     rsp, 8
.text:000000000000913B                 retn
.text:000000000000913B ; } // starts at 9100
.text:000000000000913B locale_charset  endp
.text:000000000000913B
.text:000000000000913B ; ---------------------------------------------------------------------------
.text:000000000000913C                 align 20h
.text:0000000000009140
.text:0000000000009140 ; =============== S U B R O U T I N E =======================================
.text:0000000000009140
.text:0000000000009140 ; Attributes: info_from_lumina
.text:0000000000009140
.text:0000000000009140 ; void _libc_csu_init(void)
.text:0000000000009140                 public __libc_csu_init
.text:0000000000009140 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000009140 ; __unwind {
.text:0000000000009140                 push    r15
.text:0000000000009142                 push    r14
.text:0000000000009144                 mov     r15, rdx
.text:0000000000009147                 push    r13
.text:0000000000009149                 push    r12
.text:000000000000914B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000009152                 push    rbp
.text:0000000000009153                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000000915A                 push    rbx
.text:000000000000915B                 mov     r13d, edi
.text:000000000000915E                 mov     r14, rsi
.text:0000000000009161                 sub     rbp, r12
.text:0000000000009164                 sub     rsp, 8
.text:0000000000009168                 sar     rbp, 3
.text:000000000000916C                 call    _init_proc
.text:0000000000009171                 test    rbp, rbp
.text:0000000000009174                 jz      short loc_9196
.text:0000000000009176                 xor     ebx, ebx
.text:0000000000009178                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000009180
.text:0000000000009180 loc_9180:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000009180                 mov     rdx, r15
.text:0000000000009183                 mov     rsi, r14
.text:0000000000009186                 mov     edi, r13d
.text:0000000000009189                 call    ds:(__frame_dummy_init_array_entry - 20C9B0h)[r12+rbx*8]
.text:000000000000918D                 add     rbx, 1
.text:0000000000009191                 cmp     rbp, rbx
.text:0000000000009194                 jnz     short loc_9180
.text:0000000000009196
.text:0000000000009196 loc_9196:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000009196                 add     rsp, 8
.text:000000000000919A                 pop     rbx
.text:000000000000919B                 pop     rbp
.text:000000000000919C                 pop     r12
.text:000000000000919E                 pop     r13
.text:00000000000091A0                 pop     r14
.text:00000000000091A2                 pop     r15
.text:00000000000091A4                 retn
.text:00000000000091A4 ; } // starts at 9140
.text:00000000000091A4 __libc_csu_init endp
.text:00000000000091A4
.text:00000000000091A4 ; ---------------------------------------------------------------------------
.text:00000000000091A5                 align 10h
.text:00000000000091B0
.text:00000000000091B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091B0
.text:00000000000091B0
.text:00000000000091B0 ; void _libc_csu_fini(void)
.text:00000000000091B0                 public __libc_csu_fini
.text:00000000000091B0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000091B0 ; __unwind {
.text:00000000000091B0                 rep retn
.text:00000000000091B0 ; } // starts at 91B0
.text:00000000000091B0 __libc_csu_fini endp
.text:00000000000091B0
.text:00000000000091B0 ; ---------------------------------------------------------------------------
.text:00000000000091B2                 align 20h
.text:00000000000091C0
.text:00000000000091C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000091C0
.text:00000000000091C0
.text:00000000000091C0 atexit          proc near               ; CODE XREF: main+78↑p
.text:00000000000091C0 ; __unwind {
.text:00000000000091C0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000091C7                 xor     esi, esi        ; obj
.text:00000000000091C9                 jmp     ___cxa_atexit
.text:00000000000091C9 ; } // starts at 91C0
.text:00000000000091C9 atexit          endp
.text:00000000000091C9
.text:00000000000091C9 _text           ends
.text:00000000000091C9
LOAD:00000000000091CE ; ===========================================================================
LOAD:00000000000091CE
LOAD:00000000000091CE ; Segment type: Pure code
LOAD:00000000000091CE ; Segment permissions: Read/Execute
LOAD:00000000000091CE LOAD            segment byte public 'CODE' use64
LOAD:00000000000091CE                 assume cs:LOAD
LOAD:00000000000091CE                 ;org 91CEh
LOAD:00000000000091CE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000091CE                 align 10h
LOAD:00000000000091CE LOAD            ends
LOAD:00000000000091CE
.fini:00000000000091D0 ; ===========================================================================
.fini:00000000000091D0
.fini:00000000000091D0 ; Segment type: Pure code
.fini:00000000000091D0 ; Segment permissions: Read/Execute
.fini:00000000000091D0 _fini           segment dword public 'CODE' use64
.fini:00000000000091D0                 assume cs:_fini
.fini:00000000000091D0                 ;org 91D0h
.fini:00000000000091D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000091D0
.fini:00000000000091D0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000091D0
.fini:00000000000091D0
.fini:00000000000091D0                 public _term_proc
.fini:00000000000091D0 _term_proc      proc near
.fini:00000000000091D0                 sub     rsp, 8          ; _fini
.fini:00000000000091D4                 add     rsp, 8
.fini:00000000000091D8                 retn
.fini:00000000000091D8 _term_proc      endp
.fini:00000000000091D8
.fini:00000000000091D8 _fini           ends
.fini:00000000000091D8
LOAD:00000000000091D9 ; ===========================================================================
LOAD:00000000000091D9
LOAD:00000000000091D9 ; Segment type: Pure code
LOAD:00000000000091D9 ; Segment permissions: Read/Execute
LOAD:00000000000091D9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000091D9                 assume cs:LOAD
LOAD:00000000000091D9                 ;org 91D9h
LOAD:00000000000091D9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000091D9                 align 20h
LOAD:00000000000091D9 LOAD            ends
LOAD:00000000000091D9
.rodata:00000000000091E0 ; ===========================================================================
.rodata:00000000000091E0
.rodata:00000000000091E0 ; Segment type: Pure data
.rodata:00000000000091E0 ; Segment permissions: Read
.rodata:00000000000091E0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000091E0                 assume cs:_rodata
.rodata:00000000000091E0                 ;org 91E0h
.rodata:00000000000091E0                 public _IO_stdin_used
.rodata:00000000000091E0 _IO_stdin_used  db    1
.rodata:00000000000091E1                 db    0
.rodata:00000000000091E2                 db    2
.rodata:00000000000091E3                 db    0
.rodata:00000000000091E4 ; const char s[3]
.rodata:00000000000091E4 s               db '\n',0               ; DATA XREF: print_filename+15↑o
.rodata:00000000000091E7 asc_91E7        db '\\',0               ; DATA XREF: print_filename:loc_3218↑o
.rodata:00000000000091EA aB2sum          db 'b2sum',0            ; DATA XREF: main+19C↑o
.rodata:00000000000091EA                                         ; usage+1FB↑o ...
.rodata:00000000000091F0 aBlake2         db 'BLAKE2',0           ; DATA XREF: main+553↑o
.rodata:00000000000091F0                                         ; main+8D7↑o ...
.rodata:00000000000091F7 aRfc7693        db 'RFC 7693',0         ; DATA XREF: usage+21A↑o
.rodata:0000000000009200 asc_9200        db '[',0                ; DATA XREF: usage+230↑o
.rodata:0000000000009202 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+257↑o
.rodata:0000000000009212 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000009212                                         ; DATA XREF: usage+287↑o
.rodata:0000000000009212                                         ; usage+37C↑o ...
.rodata:0000000000009228 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+298↑o
.rodata:0000000000009232 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+2A4↑o
.rodata:0000000000009241 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+237↑o
.rodata:000000000000924B aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+263↑o
.rodata:0000000000009255 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+27B↑o
.rodata:000000000000925F ; const char aSOnlineHelpS[]
.rodata:000000000000925F aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2EA↑o
.rodata:000000000000925F                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000009276 unk_9276        db  47h ; G             ; DATA XREF: main+195↑o
.rodata:0000000000009276                                         ; usage+306↑o ...
.rodata:0000000000009277                 db  4Eh ; N
.rodata:0000000000009278                 db  55h ; U
.rodata:0000000000009279                 db  20h
.rodata:000000000000927A ; const char domainname[]
.rodata:000000000000927A domainname      db 'coreutils',0        ; DATA XREF: main+59↑o
.rodata:000000000000927A                                         ; main+65↑o ...
.rodata:0000000000009284 ; const char s2[]
.rodata:0000000000009284 s2              db 'en_',0              ; DATA XREF: usage+32D↑o
.rodata:0000000000009284                                         ; usage+3EE↑o
.rodata:0000000000009288 ; const char aFullDocumentat[]
.rodata:0000000000009288 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000009288                                         ; DATA XREF: usage:loc_37C9↑o
.rodata:0000000000009288                                         ; usage:loc_3886↑o
.rodata:00000000000092A3 ; const char dirname[]
.rodata:00000000000092A3 dirname         db '/usr/local/share/locale',0
.rodata:00000000000092A3                                         ; DATA XREF: main+52↑o
.rodata:00000000000092BB ; const char msgid[]
.rodata:00000000000092BB msgid           db 'invalid length',0   ; DATA XREF: main:loc_1DF0↑o
.rodata:00000000000092BB                                         ; .data.rel.ro:long_options↓o
.rodata:00000000000092CA ; const char aInvalidLengthS[]
.rodata:00000000000092CA aInvalidLengthS db 'invalid length: %s',0
.rodata:00000000000092CA                                         ; DATA XREF: main+293↑o
.rodata:00000000000092CA                                         ; main+1365↑o
.rodata:00000000000092DD ; const char aLengthIsNotAMu[]
.rodata:00000000000092DD aLengthIsNotAMu db 'length is not a multiple of 8',0
.rodata:00000000000092DD                                         ; DATA XREF: main+2BA↑o
.rodata:00000000000092FB aSamuelNeves    db 'Samuel Neves',0     ; DATA XREF: main+187↑o
.rodata:0000000000009308 aPadraigBrady   db 'Padraig Brady',0    ; DATA XREF: main+18E↑o
.rodata:0000000000009316 ; const char shortopts[]
.rodata:0000000000009316 shortopts       db 'l:bctwz',0          ; DATA XREF: main+A7↑o
.rodata:000000000000931E ; const char aStandardInput[]
.rodata:000000000000931E aStandardInput  db 'standard input',0   ; DATA XREF: main+42E↑o
.rodata:000000000000931E                                         ; main+EE3↑o
.rodata:000000000000932D ; const char aSTooManyChecks[]
.rodata:000000000000932D aSTooManyChecks db '%s: too many checksum lines',0
.rodata:000000000000932D                                         ; DATA XREF: main+689↑o
.rodata:0000000000009349 ; const char aFailedOpenOrRe[]
.rodata:0000000000009349 aFailedOpenOrRe db 'FAILED open or read',0
.rodata:0000000000009349                                         ; DATA XREF: main+109A↑o
.rodata:000000000000935D aFailed         db 'FAILED',0           ; DATA XREF: main+1227↑o
.rodata:0000000000009364 aOk             db 'OK',0               ; DATA XREF: main+12BE↑o
.rodata:0000000000009367 ; const char aSReadError[]
.rodata:0000000000009367 aSReadError     db '%s: read error',0   ; DATA XREF: main+D1F↑o
.rodata:0000000000009367                                         ; main+B45↑o ...
.rodata:0000000000009376 ; const char aSNoFileWasVeri[]
.rodata:0000000000009376 aSNoFileWasVeri db '%s: no file was verified',0
.rodata:0000000000009376                                         ; DATA XREF: main+10DE↑o
.rodata:000000000000938F aLu             db '-%lu',0             ; DATA XREF: main:loc_2E84↑o
.rodata:0000000000009394 asc_9394        db ' (',0               ; DATA XREF: main+DF5↑o
.rodata:0000000000009397 asc_9397        db ') = ',0             ; DATA XREF: main+E1E↑o
.rodata:000000000000939C a02x            db '%02x',0             ; DATA XREF: main+C4D↑o
.rodata:00000000000093A1 aBinary         db 'binary',0           ; DATA XREF: .data.rel.ro:000000000020C9E0↓o
.rodata:00000000000093A8 aCheck          db 'check',0            ; DATA XREF: .data.rel.ro:000000000020CA00↓o
.rodata:00000000000093AE aIgnoreMissing  db 'ignore-missing',0   ; DATA XREF: .data.rel.ro:000000000020CA20↓o
.rodata:00000000000093BD aQuiet          db 'quiet',0            ; DATA XREF: .data.rel.ro:000000000020CA40↓o
.rodata:00000000000093C3 aStatus         db 'status',0           ; DATA XREF: .data.rel.ro:000000000020CA60↓o
.rodata:00000000000093CA aText           db 'text',0             ; DATA XREF: .data.rel.ro:000000000020CA80↓o
.rodata:00000000000093CF aWarn           db 'warn',0             ; DATA XREF: .data.rel.ro:000000000020CAA0↓o
.rodata:00000000000093D4 aStrict         db 'strict',0           ; DATA XREF: .data.rel.ro:000000000020CAC0↓o
.rodata:00000000000093DB aTag            db 'tag',0              ; DATA XREF: .data.rel.ro:000000000020CAE0↓o
.rodata:00000000000093DF aZero           db 'zero',0             ; DATA XREF: .data.rel.ro:000000000020CB00↓o
.rodata:00000000000093E4 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:000000000020CB20↓o
.rodata:00000000000093E9 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000020CB40↓o
.rodata:00000000000093F1 aBlake2b        db 'BLAKE2b',0          ; DATA XREF: .data.rel.ro:algorithm_out_string↓o
.rodata:00000000000093F9 aBlake2b_0      db 'blake2b',0          ; DATA XREF: .data.rel.ro:algorithm_in_string↓o
.rodata:0000000000009401                 align 8
.rodata:0000000000009408 ; const char aTrySHelpForMor[]
.rodata:0000000000009408 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000009408                                         ; DATA XREF: usage+2F↑o
.rodata:000000000000942F                 align 10h
.rodata:0000000000009430 ; const char aUsageSOptionFi[]
.rodata:0000000000009430 aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]...',0Ah
.rodata:0000000000009430                                         ; DATA XREF: usage:loc_34DD↑o
.rodata:0000000000009430                 db 'Print or check %s (%d-bit) checksums.',0Ah,0
.rodata:0000000000009477                 align 8
.rodata:0000000000009478 ; const char aWithNoFileOrWh[]
.rodata:0000000000009478 aWithNoFileOrWh db 0Ah                  ; DATA XREF: usage+91↑o
.rodata:0000000000009478                 db 'With no FILE, or when FILE is -, read standard input.',0Ah,0
.rodata:00000000000094B0 ; const char aBBinaryReadInB[]
.rodata:00000000000094B0 aBBinaryReadInB db 0Ah                  ; DATA XREF: usage+B6↑o
.rodata:00000000000094B0                 db '  -b, --binary         read in binary mode',0Ah,0
.rodata:00000000000094DD                 align 20h
.rodata:00000000000094E0 ; const char aCCheckReadSSum[]
.rodata:00000000000094E0 aCCheckReadSSum db '  -c, --check          read %s sums from the FILEs and check them'
.rodata:00000000000094E0                                         ; DATA XREF: usage+D4↑o
.rodata:00000000000094E0                 db 0Ah,0
.rodata:0000000000009523                 align 8
.rodata:0000000000009528 ; const char aLLengthDigestL[]
.rodata:0000000000009528 aLLengthDigestL db '  -l, --length         digest length in bits; must not exceed the'
.rodata:0000000000009528                                         ; DATA XREF: usage+104↑o
.rodata:0000000000009528                 db ' maximum for',0Ah
.rodata:0000000000009528                 db '                       the blake2 algorithm and must be a multipl'
.rodata:0000000000009528                 db 'e of 8',0Ah,0
.rodata:00000000000095BF                 align 20h
.rodata:00000000000095C0 ; const char aTagCreateABsdS[]
.rodata:00000000000095C0 aTagCreateABsdS db '      --tag            create a BSD-style checksum',0Ah,0
.rodata:00000000000095C0                                         ; DATA XREF: usage+129↑o
.rodata:00000000000095F4                 align 8
.rodata:00000000000095F8 ; const char aTTextReadInTex[]
.rodata:00000000000095F8 aTTextReadInTex db '  -t, --text           read in text mode (default)',0Ah,0
.rodata:00000000000095F8                                         ; DATA XREF: usage+14E↑o
.rodata:000000000000962C                 align 10h
.rodata:0000000000009630 ; const char aZZeroEndEachOu[]
.rodata:0000000000009630 aZZeroEndEachOu db '  -z, --zero           end each output line with NUL, not newline'
.rodata:0000000000009630                                         ; DATA XREF: usage+173↑o
.rodata:0000000000009630                 db ',',0Ah
.rodata:0000000000009630                 db '                       and disable file name escaping',0Ah,0
.rodata:00000000000096AA                 align 10h
.rodata:00000000000096B0 ; const char aTheFollowingFi[]
.rodata:00000000000096B0 aTheFollowingFi db 0Ah                  ; DATA XREF: usage+198↑o
.rodata:00000000000096B0                 db 'The following five options are useful only when verifying checksu'
.rodata:00000000000096B0                 db 'ms:',0Ah
.rodata:00000000000096B0                 db '      --ignore-missing  don',27h,'t fail or report status for mis'
.rodata:00000000000096B0                 db 'sing files',0Ah
.rodata:00000000000096B0                 db '      --quiet          don',27h,'t print OK for each successfully'
.rodata:00000000000096B0                 db ' verified file',0Ah
.rodata:00000000000096B0                 db '      --status         don',27h,'t output anything, status code s'
.rodata:00000000000096B0                 db 'hows success',0Ah
.rodata:00000000000096B0                 db '      --strict         exit non-zero for improperly formatted che'
.rodata:00000000000096B0                 db 'cksum lines',0Ah
.rodata:00000000000096B0                 db '  -w, --warn           warn about improperly formatted checksum l'
.rodata:00000000000096B0                 db 'ines',0Ah
.rodata:00000000000096B0                 db 0Ah,0
.rodata:0000000000009863                 align 8
.rodata:0000000000009868 ; const char aHelpDisplayThi[]
.rodata:0000000000009868 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000009868                                         ; DATA XREF: usage+1BD↑o
.rodata:0000000000009895                 align 8
.rodata:0000000000009898 ; const char aVersionOutputV[]
.rodata:0000000000009898 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000009898                                         ; DATA XREF: usage+1E2↑o
.rodata:00000000000098CE                 align 10h
.rodata:00000000000098D0 ; const char aTheSumsAreComp[]
.rodata:00000000000098D0 aTheSumsAreComp db 0Ah                  ; DATA XREF: usage+207↑o
.rodata:00000000000098D0                 db 'The sums are computed as described in %s.  When checking, the inp'
.rodata:00000000000098D0                 db 'ut',0Ah
.rodata:00000000000098D0                 db 'should be a former output of this program.  The default mode is t'
.rodata:00000000000098D0                 db 'o print a',0Ah
.rodata:00000000000098D0                 db 'line with checksum, a space, a character indicating input mode (',27h
.rodata:00000000000098D0                 db '*',27h,' for binary,',0Ah
.rodata:00000000000098D0                 db 27h,' ',27h,' for text or where binary is insignificant), and name'
.rodata:00000000000098D0                 db ' for each FILE.',0Ah,0
.rodata:00000000000099F9                 align 20h
.rodata:0000000000009A00 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000009A00                                         ; DATA XREF: usage+2FF↑o
.rodata:0000000000009A00                                         ; usage+363↑o ...
.rodata:0000000000009A28 ; const char aReportAnyTrans[]
.rodata:0000000000009A28 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000009A28                                         ; DATA XREF: usage+457↑o
.rodata:0000000000009A28                 db 'am/>',0Ah,0
.rodata:0000000000009A6F                 align 10h
.rodata:0000000000009A70 ; const char aOrAvailableLoc[]
.rodata:0000000000009A70 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000009A70                                         ; DATA XREF: usage:loc_380E↑o
.rodata:0000000000009AA3                 align 8
.rodata:0000000000009AA8 ; const char aMaximumDigestL[]
.rodata:0000000000009AA8 aMaximumDigestL db 'maximum digest length for %s is %lu bits',0
.rodata:0000000000009AA8                                         ; DATA XREF: main+13A2↑o
.rodata:0000000000009AD1                 align 8
.rodata:0000000000009AD8 aTagDoesNotSupp db '--tag does not support --text mode',0
.rodata:0000000000009AD8                                         ; DATA XREF: main+143F↑o
.rodata:0000000000009AFB                 align 20h
.rodata:0000000000009B00 aTheZeroOptionI db 'the --zero option is not supported when verifying checksums',0
.rodata:0000000000009B00                                         ; DATA XREF: main+353↑o
.rodata:0000000000009B3C                 align 20h
.rodata:0000000000009B40 aTheTagOptionIs db 'the --tag option is meaningless when verifying checksums',0
.rodata:0000000000009B40                                         ; DATA XREF: main+6C2↑o
.rodata:0000000000009B79                 align 20h
.rodata:0000000000009B80 ; const char aTheBinaryAndTe[]
.rodata:0000000000009B80 aTheBinaryAndTe db 'the --binary and --text options are meaningless when verifying ch'
.rodata:0000000000009B80                                         ; DATA XREF: main+6D7↑o
.rodata:0000000000009B80                 db 'ecksums',0
.rodata:0000000000009BC9                 align 10h
.rodata:0000000000009BD0 aTheIgnoreMissi db 'the --ignore-missing option is meaningful only when verifying che'
.rodata:0000000000009BD0                                         ; DATA XREF: main+142E↑o
.rodata:0000000000009BD0                 db 'cksums',0
.rodata:0000000000009C18 aTheStatusOptio db 'the --status option is meaningful only when verifying checksums',0
.rodata:0000000000009C18                                         ; DATA XREF: main+141D↑o
.rodata:0000000000009C58 aTheWarnOptionI db 'the --warn option is meaningful only when verifying checksums',0
.rodata:0000000000009C58                                         ; DATA XREF: main+38F↑o
.rodata:0000000000009C96                 align 8
.rodata:0000000000009C98 aTheQuietOption db 'the --quiet option is meaningful only when verifying checksums',0
.rodata:0000000000009C98                                         ; DATA XREF: main+73B↑o
.rodata:0000000000009CD7                 align 8
.rodata:0000000000009CD8 aTheStrictOptio db 'the --strict option is meaningful only when verifying checksums',0
.rodata:0000000000009CD8                                         ; DATA XREF: main+759↑o
.rodata:0000000000009D18 ; const char aSLuImproperlyF[]
.rodata:0000000000009D18 aSLuImproperlyF db '%s: %lu: improperly formatted %s checksum line',0
.rodata:0000000000009D18                                         ; DATA XREF: main+8C1↑o
.rodata:0000000000009D47                 align 8
.rodata:0000000000009D48 ; const char aSNoProperlyFor[]
.rodata:0000000000009D48 aSNoProperlyFor db '%s: no properly formatted %s checksum lines found',0
.rodata:0000000000009D48                                         ; DATA XREF: main+D85↑o
.rodata:0000000000009D7A                 align 20h
.rodata:0000000000009D80 ; const char msgid2[]
.rodata:0000000000009D80 msgid2          db 'WARNING: %lu lines are improperly formatted',0
.rodata:0000000000009D80                                         ; DATA XREF: main+947↑o
.rodata:0000000000009DAC                 align 10h
.rodata:0000000000009DB0 ; const char msgid1[]
.rodata:0000000000009DB0 msgid1          db 'WARNING: %lu line is improperly formatted',0
.rodata:0000000000009DB0                                         ; DATA XREF: main+94E↑o
.rodata:0000000000009DDA                 align 20h
.rodata:0000000000009DE0 ; const char aWarningLuListe[]
.rodata:0000000000009DE0 aWarningLuListe db 'WARNING: %lu listed files could not be read',0
.rodata:0000000000009DE0                                         ; DATA XREF: main+983↑o
.rodata:0000000000009E0C                 align 10h
.rodata:0000000000009E10 ; const char aWarningLuListe_0[]
.rodata:0000000000009E10 aWarningLuListe_0 db 'WARNING: %lu listed file could not be read',0
.rodata:0000000000009E10                                         ; DATA XREF: main+98A↑o
.rodata:0000000000009E3B                 align 20h
.rodata:0000000000009E40 ; const char aWarningLuCompu[]
.rodata:0000000000009E40 aWarningLuCompu db 'WARNING: %lu computed checksums did NOT match',0
.rodata:0000000000009E40                                         ; DATA XREF: main+9BF↑o
.rodata:0000000000009E6E                 align 10h
.rodata:0000000000009E70 ; const char aWarningLuCompu_0[]
.rodata:0000000000009E70 aWarningLuCompu_0 db 'WARNING: %lu computed checksum did NOT match',0
.rodata:0000000000009E70                                         ; DATA XREF: main+9C6↑o
.rodata:0000000000009E9D                 align 20h
.rodata:0000000000009EA0 bin2hex_7139    db '0123456789abcdef8.31',0
.rodata:0000000000009EA0                                         ; DATA XREF: main+11DF↑o
.rodata:0000000000009EB5 ; const char aInvalidArgumen[]
.rodata:0000000000009EB5 aInvalidArgumen db 'invalid argument %s for %s',0
.rodata:0000000000009EB5                                         ; DATA XREF: argmatch_invalid:loc_58E0↑o
.rodata:0000000000009ED0 ; const char aAmbiguousArgum[]
.rodata:0000000000009ED0 aAmbiguousArgum db 'ambiguous argument %s for %s',0
.rodata:0000000000009ED0                                         ; DATA XREF: argmatch_invalid+15↑o
.rodata:0000000000009EED ; const char aValidArguments[]
.rodata:0000000000009EED aValidArguments db 'Valid arguments are:',0
.rodata:0000000000009EED                                         ; DATA XREF: argmatch_valid+12↑o
.rodata:0000000000009F02 aS_0            db 0Ah                  ; DATA XREF: argmatch_valid+66↑o
.rodata:0000000000009F02                 db '  - %s',0
.rodata:0000000000009F0A aS_1            db ', %s',0             ; DATA XREF: argmatch_valid+B5↑o
.rodata:0000000000009F0A                                         ; main+B78↑o ...
.rodata:0000000000009F0F ; const char aWriteError[]
.rodata:0000000000009F0F aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_5B43↑o
.rodata:0000000000009F1B ; const char format[]
.rodata:0000000000009F1B format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000009F1B                                         ; xnumtoumax+7D↑o
.rodata:0000000000009F22                 align 8
.rodata:0000000000009F28 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000009F28                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000009F60 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000009F68 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000009F68                                         ; main+3C0↑o ...
.rodata:0000000000009F6C unk_9F6C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000009F6D                 db  80h
.rodata:0000000000009F6E                 db  98h
.rodata:0000000000009F6F                 db    0
.rodata:0000000000009F70 unk_9F70        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000009F71                 db  80h
.rodata:0000000000009F72                 db  99h
.rodata:0000000000009F73                 db    0
.rodata:0000000000009F74 unk_9F74        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000009F75                 db    7
.rodata:0000000000009F76                 db  65h ; e
.rodata:0000000000009F77                 db    0
.rodata:0000000000009F78 unk_9F78        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000009F79                 db 0AFh
.rodata:0000000000009F7A                 db    0
.rodata:0000000000009F7B unk_9F7B        db  22h ; "             ; DATA XREF: gettext_quote:loc_5D50↑o
.rodata:0000000000009F7B                                         ; quotearg_buffer_restyled:loc_6B0B↑o ...
.rodata:0000000000009F7C                 db    0
.rodata:0000000000009F7D ; const char asc_9F7D[2]
.rodata:0000000000009F7D asc_9F7D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000009F7D                                         ; quotearg_buffer_restyled:loc_5ED3↑o ...
.rodata:0000000000009F7F ; const char asc_9F7F[2]
.rodata:0000000000009F7F asc_9F7F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000009F7F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000009F81 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000009F89 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000020CBA8↓o
.rodata:0000000000009F8F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000020CBB0↓o
.rodata:0000000000009F9C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000020CBB8↓o
.rodata:0000000000009F9C                                         ; .data.rel.ro:000000000020CBD8↓o
.rodata:0000000000009FA9 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000009FA9                                         ; DATA XREF: .data.rel.ro:000000000020CBC0↓o
.rodata:0000000000009FBD aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:000000000020CBC8↓o
.rodata:0000000000009FBF aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000020CBD0↓o
.rodata:0000000000009FC7 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000020CBE8↓o
.rodata:0000000000009FCF                 align 20h
.rodata:0000000000009FE0 jpt_5EB1        dd offset loc_6C5A - 9FE0h
.rodata:0000000000009FE0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000009FE0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000009FE0                 dd offset loc_5EB3 - 9FE0h ; jump table for switch statement
.rodata:0000000000009FE0                 dd offset loc_6E88 - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6C94 - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6A84 - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6AE0 - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6B35 - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6B7A - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6BB4 - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6BB4 - 9FE0h
.rodata:0000000000009FE0                 dd offset loc_6BB4 - 9FE0h
.rodata:000000000000A00C jpt_600E        dd offset loc_6230 - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000A00C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch ; jump table for switch statement
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset loc_6270 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6178 - 0A00Ch, offset loc_6138 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6300 - 0A00Ch, offset loc_62F0 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62E0 - 0A00Ch, offset loc_62D0 - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset def_600E - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62C0 - 0A00Ch, offset loc_62B0 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_6280 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_6113 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_62B0 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_62B0 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_62B0 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_60E3 - 0A00Ch
.rodata:000000000000A00C                 dd offset def_600E - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_62B0 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6188 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6258 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6258 - 0A00Ch, offset loc_6013 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_62B0 - 0A00Ch, offset loc_6013 - 0A00Ch
.rodata:000000000000A00C                 dd offset loc_6280 - 0A00Ch
.rodata:000000000000A208 jpt_639A        dd offset loc_6400 - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:000000000000A208                                         ; quotearg_buffer_restyled+573↑r
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h ; jump table for switch statement
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset loc_63F0 - 0A208h
.rodata:000000000000A208                 dd offset loc_6540 - 0A208h, offset loc_6528 - 0A208h
.rodata:000000000000A208                 dd offset loc_63D8 - 0A208h, offset loc_6518 - 0A208h
.rodata:000000000000A208                 dd offset loc_63C0 - 0A208h, offset loc_6500 - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset def_639A - 0A208h
.rodata:000000000000A208                 dd offset loc_64E8 - 0A208h, offset loc_64D0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_64B8 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_6110 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_64D0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64D0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_64D0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_60E0 - 0A208h
.rodata:000000000000A208                 dd offset def_639A - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64D0 - 0A208h
.rodata:000000000000A208                 dd offset loc_63A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_64A0 - 0A208h
.rodata:000000000000A208                 dd offset loc_64A0 - 0A208h, offset loc_6010 - 0A208h
.rodata:000000000000A208                 dd offset loc_64D0 - 0A208h, offset loc_6010 - 0A208h
.rodata:000000000000A208                 dd offset loc_64B8 - 0A208h
.rodata:000000000000A404                 align 20h
.rodata:000000000000A420                 public quoting_style_vals
.rodata:000000000000A420 quoting_style_vals db    0
.rodata:000000000000A421                 db    0
.rodata:000000000000A422                 db    0
.rodata:000000000000A423                 db    0
.rodata:000000000000A424                 db    1
.rodata:000000000000A425                 db    0
.rodata:000000000000A426                 db    0
.rodata:000000000000A427                 db    0
.rodata:000000000000A428                 db    2
.rodata:000000000000A429                 db    0
.rodata:000000000000A42A                 db    0
.rodata:000000000000A42B                 db    0
.rodata:000000000000A42C                 db    3
.rodata:000000000000A42D                 db    0
.rodata:000000000000A42E                 db    0
.rodata:000000000000A42F                 db    0
.rodata:000000000000A430                 db    4
.rodata:000000000000A431                 db    0
.rodata:000000000000A432                 db    0
.rodata:000000000000A433                 db    0
.rodata:000000000000A434                 db    5
.rodata:000000000000A435                 db    0
.rodata:000000000000A436                 db    0
.rodata:000000000000A437                 db    0
.rodata:000000000000A438                 db    6
.rodata:000000000000A439                 db    0
.rodata:000000000000A43A                 db    0
.rodata:000000000000A43B                 db    0
.rodata:000000000000A43C                 db    7
.rodata:000000000000A43D                 db    0
.rodata:000000000000A43E                 db    0
.rodata:000000000000A43F                 db    0
.rodata:000000000000A440                 db    8
.rodata:000000000000A441                 db    0
.rodata:000000000000A442                 db    0
.rodata:000000000000A443                 db    0
.rodata:000000000000A444                 db    9
.rodata:000000000000A445                 db    0
.rodata:000000000000A446                 db    0
.rodata:000000000000A447                 db    0
.rodata:000000000000A448 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:000000000000A454 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000A45B ; const char aC_0[]
.rodata:000000000000A45B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_7A0C↑o
.rodata:000000000000A45F ; const char aWrittenByS[]
.rodata:000000000000A45F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000A45F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000A46F ; const char aWrittenBySAndS[]
.rodata:000000000000A46F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000A46F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:000000000000A486 ; const char aWrittenBySSAnd[]
.rodata:000000000000A486 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:000000000000A486                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:000000000000A4A2 ; const char aReportBugsTo[15]
.rodata:000000000000A4A2 aReportBugsTo   db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:000000000000A4A2                 db 'Report bugs to'
.rodata:000000000000A4B1 aS              db ': %s',0Ah,0         ; DATA XREF: main+10AD↑o
.rodata:000000000000A4B7 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:000000000000A4B7                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000A4CD ; const char aSHomePageS[]
.rodata:000000000000A4CD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000A4CD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:000000000000A4E1                 align 8
.rodata:000000000000A4E8 ; const char aLicenseGplv3Gn[]
.rodata:000000000000A4E8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:000000000000A4E8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:000000000000A4E8                 db 'ses/gpl.html>.',0Ah
.rodata:000000000000A4E8                 db 'This is free software: you are free to change and redistribute it'
.rodata:000000000000A4E8                 db '.',0Ah
.rodata:000000000000A4E8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:000000000000A4E8                 db 0Ah,0
.rodata:000000000000A5B4                 align 8
.rodata:000000000000A5B8 ; const char aWrittenBySSSAn[]
.rodata:000000000000A5B8 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A5B8                                         ; DATA XREF: version_etc_arn:loc_7C60↑o
.rodata:000000000000A5B8                 db 'and %s.',0Ah,0
.rodata:000000000000A5D8 ; const char aWrittenBySSSSA[]
.rodata:000000000000A5D8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A5D8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:000000000000A5D8                 db '%s, and %s.',0Ah,0
.rodata:000000000000A5FC                 align 20h
.rodata:000000000000A600 ; const char aWrittenBySSSSS_1[]
.rodata:000000000000A600 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A600                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:000000000000A600                 db '%s, %s, and %s.',0Ah,0
.rodata:000000000000A628 ; const char aWrittenBySSSSS_2[]
.rodata:000000000000A628 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A628                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:000000000000A628                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:000000000000A654                 align 8
.rodata:000000000000A658 ; const char aWrittenBySSSSS[]
.rodata:000000000000A658 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A658                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:000000000000A658                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000A658                 db 'and %s.',0Ah,0
.rodata:000000000000A688 ; const char aWrittenBySSSSS_0[]
.rodata:000000000000A688 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A688                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:000000000000A688                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000A688                 db '%s, and %s.',0Ah,0
.rodata:000000000000A6BC                 align 20h
.rodata:000000000000A6C0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:000000000000A6C0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:000000000000A6C0                 db '%s, %s, %s, %s,',0Ah
.rodata:000000000000A6C0                 db '%s, %s, and others.',0Ah,0
.rodata:000000000000A6FC                 align 20h
.rodata:000000000000A700 ; const char aGeneralHelpUsi[]
.rodata:000000000000A700 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:000000000000A700                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:000000000000A700                 db 0
.rodata:000000000000A741                 align 4
.rodata:000000000000A744 jpt_7A74        dd offset loc_7AF6 - 0A744h
.rodata:000000000000A744                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:000000000000A744                                         ; version_etc_arn+9D↑r
.rodata:000000000000A744                 dd offset loc_7B88 - 0A744h ; jump table for switch statement
.rodata:000000000000A744                 dd offset loc_7BC8 - 0A744h
.rodata:000000000000A744                 dd offset loc_7C10 - 0A744h
.rodata:000000000000A744                 dd offset loc_7C60 - 0A744h
.rodata:000000000000A744                 dd offset loc_7CB8 - 0A744h
.rodata:000000000000A744                 dd offset loc_7CE8 - 0A744h
.rodata:000000000000A744                 dd offset loc_7D50 - 0A744h
.rodata:000000000000A744                 dd offset loc_7A80 - 0A744h
.rodata:000000000000A744                 dd offset loc_7B30 - 0A744h
.rodata:000000000000A76C                 align 20h
.rodata:000000000000A780                 public version_etc_copyright
.rodata:000000000000A780 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:000000000000A780                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000A7AF ; const char aMemoryExhauste[]
.rodata:000000000000A7AF aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:000000000000A7C0 ; const char file[]
.rodata:000000000000A7C0 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:000000000000A7C0                                         ; DATA XREF: xstrtoul+38C↑o
.rodata:000000000000A7C0                                         ; xstrtoumax+38C↑o
.rodata:000000000000A7E0 ; const char assertion[]
.rodata:000000000000A7E0 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:000000000000A7E0                                         ; DATA XREF: xstrtoul+393↑o
.rodata:000000000000A7E0                                         ; xstrtoumax+393↑o
.rodata:000000000000A806                 align 8
.rodata:000000000000A808 jpt_8586        dd offset loc_86D6 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                                         ; DATA XREF: xstrtoul+1C4↑o
.rodata:000000000000A808                                         ; xstrtoul+1CF↑r
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_86B3 - 0A808h ; jump table for switch statement
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_86EC - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_866F - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_8588 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset loc_8690 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset loc_864F - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_862A - 0A808h
.rodata:000000000000A808                 dd offset loc_8604 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset loc_85ED - 0A808h, offset loc_85B0 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_86EC - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_866F - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_8588 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset loc_864F - 0A808h, offset def_8586 - 0A808h
.rodata:000000000000A808                 dd offset def_8586 - 0A808h, offset loc_85D7 - 0A808h
.rodata:000000000000A8E0 ; const char _PRETTY_FUNCTION___4162[]
.rodata:000000000000A8E0 __PRETTY_FUNCTION___4162 db 'xstrtoul',0
.rodata:000000000000A8E0                                         ; DATA XREF: xstrtoul:loc_8735↑o
.rodata:000000000000A8E9                 align 10h
.rodata:000000000000A8F0 jpt_89A6        dd offset loc_8AF6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                                         ; DATA XREF: xstrtoumax+1C4↑o
.rodata:000000000000A8F0                                         ; xstrtoumax+1CF↑r
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_8AD3 - 0A8F0h ; jump table for switch statement
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_8B0C - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_8A8F - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_89A8 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset loc_8AB0 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset loc_8A6F - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_8A4A - 0A8F0h
.rodata:000000000000A8F0                 dd offset loc_8A24 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset loc_8A0D - 0A8F0h, offset loc_89D0 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_8B0C - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_8A8F - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_89A8 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset loc_8A6F - 0A8F0h, offset def_89A6 - 0A8F0h
.rodata:000000000000A8F0                 dd offset def_89A6 - 0A8F0h, offset loc_89F7 - 0A8F0h
.rodata:000000000000A9C8 ; const char _PRETTY_FUNCTION___4162_0[]
.rodata:000000000000A9C8 __PRETTY_FUNCTION___4162_0 db 'xstrtoumax',0
.rodata:000000000000A9C8                                         ; DATA XREF: xstrtoumax:loc_8B55↑o
.rodata:000000000000A9D3 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:000000000000A9D5 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_90E0↑o
.rodata:000000000000A9DB aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:000000000000A9DB                                         ; locale_charset:loc_9130↑o
.rodata:000000000000A9DB _rodata         ends
.rodata:000000000000A9DB
LOAD:000000000000A9E1 ; ===========================================================================
LOAD:000000000000A9E1
LOAD:000000000000A9E1 ; Segment type: Pure code
LOAD:000000000000A9E1 ; Segment permissions: Read/Execute
LOAD:000000000000A9E1 LOAD            segment byte public 'CODE' use64
LOAD:000000000000A9E1                 assume cs:LOAD
LOAD:000000000000A9E1                 ;org 0A9E1h
LOAD:000000000000A9E1                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000A9E1                 align 4
LOAD:000000000000A9E1 LOAD            ends
LOAD:000000000000A9E1
.eh_frame_hdr:000000000000A9E4 ; ===========================================================================
.eh_frame_hdr:000000000000A9E4
.eh_frame_hdr:000000000000A9E4 ; Segment type: Pure data
.eh_frame_hdr:000000000000A9E4 ; Segment permissions: Read
.eh_frame_hdr:000000000000A9E4 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:000000000000A9E4                 assume cs:_eh_frame_hdr
.eh_frame_hdr:000000000000A9E4                 ;org 0A9E4h
.eh_frame_hdr:000000000000A9E4 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:000000000000A9E5                 db  1Bh
.eh_frame_hdr:000000000000A9E6                 db    3
.eh_frame_hdr:000000000000A9E7                 db  3Bh ; ;
.eh_frame_hdr:000000000000A9E8                 db  20h
.eh_frame_hdr:000000000000A9E9                 db    3
.eh_frame_hdr:000000000000A9EA                 db    0
.eh_frame_hdr:000000000000A9EB                 db    0
.eh_frame_hdr:000000000000A9EC                 db  63h ; c
.eh_frame_hdr:000000000000A9ED                 db    0
.eh_frame_hdr:000000000000A9EE                 db    0
.eh_frame_hdr:000000000000A9EF                 db    0
.eh_frame_hdr:000000000000A9F0                 db 0FCh
.eh_frame_hdr:000000000000A9F1                 db  6Dh ; m
.eh_frame_hdr:000000000000A9F2                 db 0FFh
.eh_frame_hdr:000000000000A9F3                 db 0FFh
.eh_frame_hdr:000000000000A9F4                 db  6Ch ; l
.eh_frame_hdr:000000000000A9F5                 db    3
.eh_frame_hdr:000000000000A9F6                 db    0
.eh_frame_hdr:000000000000A9F7                 db    0
.eh_frame_hdr:000000000000A9F8                 db 0BCh
.eh_frame_hdr:000000000000A9F9                 db  71h ; q
.eh_frame_hdr:000000000000A9FA                 db 0FFh
.eh_frame_hdr:000000000000A9FB                 db 0FFh
.eh_frame_hdr:000000000000A9FC                 db  94h
.eh_frame_hdr:000000000000A9FD                 db    3
.eh_frame_hdr:000000000000A9FE                 db    0
.eh_frame_hdr:000000000000A9FF                 db    0
.eh_frame_hdr:000000000000AA00                 db 0CCh
.eh_frame_hdr:000000000000AA01                 db  71h ; q
.eh_frame_hdr:000000000000AA02                 db 0FFh
.eh_frame_hdr:000000000000AA03                 db 0FFh
.eh_frame_hdr:000000000000AA04                 db 0A8h
.eh_frame_hdr:000000000000AA05                 db    4
.eh_frame_hdr:000000000000AA06                 db    0
.eh_frame_hdr:000000000000AA07                 db    0
.eh_frame_hdr:000000000000AA08                 db  1Ch
.eh_frame_hdr:000000000000AA09                 db  86h
.eh_frame_hdr:000000000000AA0A                 db 0FFh
.eh_frame_hdr:000000000000AA0B                 db 0FFh
.eh_frame_hdr:000000000000AA0C                 db  3Ch ; <
.eh_frame_hdr:000000000000AA0D                 db    3
.eh_frame_hdr:000000000000AA0E                 db    0
.eh_frame_hdr:000000000000AA0F                 db    0
.eh_frame_hdr:000000000000AA10                 db  2Ch ; ,
.eh_frame_hdr:000000000000AA11                 db  87h
.eh_frame_hdr:000000000000AA12                 db 0FFh
.eh_frame_hdr:000000000000AA13                 db 0FFh
.eh_frame_hdr:000000000000AA14                 db 0ACh
.eh_frame_hdr:000000000000AA15                 db    3
.eh_frame_hdr:000000000000AA16                 db    0
.eh_frame_hdr:000000000000AA17                 db    0
.eh_frame_hdr:000000000000AA18                 db 0ACh
.eh_frame_hdr:000000000000AA19                 db  87h
.eh_frame_hdr:000000000000AA1A                 db 0FFh
.eh_frame_hdr:000000000000AA1B                 db 0FFh
.eh_frame_hdr:000000000000AA1C                 db 0C0h
.eh_frame_hdr:000000000000AA1D                 db    3
.eh_frame_hdr:000000000000AA1E                 db    0
.eh_frame_hdr:000000000000AA1F                 db    0
.eh_frame_hdr:000000000000AA20                 db  0Ch
.eh_frame_hdr:000000000000AA21                 db  88h
.eh_frame_hdr:000000000000AA22                 db 0FFh
.eh_frame_hdr:000000000000AA23                 db 0FFh
.eh_frame_hdr:000000000000AA24                 db 0F4h
.eh_frame_hdr:000000000000AA25                 db    3
.eh_frame_hdr:000000000000AA26                 db    0
.eh_frame_hdr:000000000000AA27                 db    0
.eh_frame_hdr:000000000000AA28                 db 0DCh
.eh_frame_hdr:000000000000AA29                 db  88h
.eh_frame_hdr:000000000000AA2A                 db 0FFh
.eh_frame_hdr:000000000000AA2B                 db 0FFh
.eh_frame_hdr:000000000000AA2C                 db  2Ch ; ,
.eh_frame_hdr:000000000000AA2D                 db    4
.eh_frame_hdr:000000000000AA2E                 db    0
.eh_frame_hdr:000000000000AA2F                 db    0
.eh_frame_hdr:000000000000AA30                 db  9Ch
.eh_frame_hdr:000000000000AA31                 db  8Ah
.eh_frame_hdr:000000000000AA32                 db 0FFh
.eh_frame_hdr:000000000000AA33                 db 0FFh
.eh_frame_hdr:000000000000AA34                 db  7Ch ; |
.eh_frame_hdr:000000000000AA35                 db    4
.eh_frame_hdr:000000000000AA36                 db    0
.eh_frame_hdr:000000000000AA37                 db    0
.eh_frame_hdr:000000000000AA38                 db  1Ch
.eh_frame_hdr:000000000000AA39                 db  8Fh
.eh_frame_hdr:000000000000AA3A                 db 0FFh
.eh_frame_hdr:000000000000AA3B                 db 0FFh
.eh_frame_hdr:000000000000AA3C                 db    4
.eh_frame_hdr:000000000000AA3D                 db    5
.eh_frame_hdr:000000000000AA3E                 db    0
.eh_frame_hdr:000000000000AA3F                 db    0
.eh_frame_hdr:000000000000AA40                 db  0Ch
.eh_frame_hdr:000000000000AA41                 db 0A6h
.eh_frame_hdr:000000000000AA42                 db 0FFh
.eh_frame_hdr:000000000000AA43                 db 0FFh
.eh_frame_hdr:000000000000AA44                 db  54h ; T
.eh_frame_hdr:000000000000AA45                 db    5
.eh_frame_hdr:000000000000AA46                 db    0
.eh_frame_hdr:000000000000AA47                 db    0
.eh_frame_hdr:000000000000AA48                 db  1Ch
.eh_frame_hdr:000000000000AA49                 db 0A7h
.eh_frame_hdr:000000000000AA4A                 db 0FFh
.eh_frame_hdr:000000000000AA4B                 db 0FFh
.eh_frame_hdr:000000000000AA4C                 db 0A0h
.eh_frame_hdr:000000000000AA4D                 db    5
.eh_frame_hdr:000000000000AA4E                 db    0
.eh_frame_hdr:000000000000AA4F                 db    0
.eh_frame_hdr:000000000000AA50                 db 0ECh
.eh_frame_hdr:000000000000AA51                 db 0A7h
.eh_frame_hdr:000000000000AA52                 db 0FFh
.eh_frame_hdr:000000000000AA53                 db 0FFh
.eh_frame_hdr:000000000000AA54                 db 0B4h
.eh_frame_hdr:000000000000AA55                 db    5
.eh_frame_hdr:000000000000AA56                 db    0
.eh_frame_hdr:000000000000AA57                 db    0
.eh_frame_hdr:000000000000AA58                 db  7Ch ; |
.eh_frame_hdr:000000000000AA59                 db 0A8h
.eh_frame_hdr:000000000000AA5A                 db 0FFh
.eh_frame_hdr:000000000000AA5B                 db 0FFh
.eh_frame_hdr:000000000000AA5C                 db 0D0h
.eh_frame_hdr:000000000000AA5D                 db    5
.eh_frame_hdr:000000000000AA5E                 db    0
.eh_frame_hdr:000000000000AA5F                 db    0
.eh_frame_hdr:000000000000AA60                 db  8Ch
.eh_frame_hdr:000000000000AA61                 db 0A9h
.eh_frame_hdr:000000000000AA62                 db 0FFh
.eh_frame_hdr:000000000000AA63                 db 0FFh
.eh_frame_hdr:000000000000AA64                 db 0FCh
.eh_frame_hdr:000000000000AA65                 db    5
.eh_frame_hdr:000000000000AA66                 db    0
.eh_frame_hdr:000000000000AA67                 db    0
.eh_frame_hdr:000000000000AA68                 db 0ACh
.eh_frame_hdr:000000000000AA69                 db 0A9h
.eh_frame_hdr:000000000000AA6A                 db 0FFh
.eh_frame_hdr:000000000000AA6B                 db 0FFh
.eh_frame_hdr:000000000000AA6C                 db  14h
.eh_frame_hdr:000000000000AA6D                 db    6
.eh_frame_hdr:000000000000AA6E                 db    0
.eh_frame_hdr:000000000000AA6F                 db    0
.eh_frame_hdr:000000000000AA70                 db  2Ch ; ,
.eh_frame_hdr:000000000000AA71                 db 0ABh
.eh_frame_hdr:000000000000AA72                 db 0FFh
.eh_frame_hdr:000000000000AA73                 db 0FFh
.eh_frame_hdr:000000000000AA74                 db  48h ; H
.eh_frame_hdr:000000000000AA75                 db    6
.eh_frame_hdr:000000000000AA76                 db    0
.eh_frame_hdr:000000000000AA77                 db    0
.eh_frame_hdr:000000000000AA78                 db  2Ch ; ,
.eh_frame_hdr:000000000000AA79                 db 0ACh
.eh_frame_hdr:000000000000AA7A                 db 0FFh
.eh_frame_hdr:000000000000AA7B                 db 0FFh
.eh_frame_hdr:000000000000AA7C                 db  8Ch
.eh_frame_hdr:000000000000AA7D                 db    6
.eh_frame_hdr:000000000000AA7E                 db    0
.eh_frame_hdr:000000000000AA7F                 db    0
.eh_frame_hdr:000000000000AA80                 db  3Ch ; <
.eh_frame_hdr:000000000000AA81                 db 0ACh
.eh_frame_hdr:000000000000AA82                 db 0FFh
.eh_frame_hdr:000000000000AA83                 db 0FFh
.eh_frame_hdr:000000000000AA84                 db 0A4h
.eh_frame_hdr:000000000000AA85                 db    6
.eh_frame_hdr:000000000000AA86                 db    0
.eh_frame_hdr:000000000000AA87                 db    0
.eh_frame_hdr:000000000000AA88                 db  6Ch ; l
.eh_frame_hdr:000000000000AA89                 db 0ADh
.eh_frame_hdr:000000000000AA8A                 db 0FFh
.eh_frame_hdr:000000000000AA8B                 db 0FFh
.eh_frame_hdr:000000000000AA8C                 db 0F4h
.eh_frame_hdr:000000000000AA8D                 db    6
.eh_frame_hdr:000000000000AA8E                 db    0
.eh_frame_hdr:000000000000AA8F                 db    0
.eh_frame_hdr:000000000000AA90                 db  7Ch ; |
.eh_frame_hdr:000000000000AA91                 db 0ADh
.eh_frame_hdr:000000000000AA92                 db 0FFh
.eh_frame_hdr:000000000000AA93                 db 0FFh
.eh_frame_hdr:000000000000AA94                 db    8
.eh_frame_hdr:000000000000AA95                 db    7
.eh_frame_hdr:000000000000AA96                 db    0
.eh_frame_hdr:000000000000AA97                 db    0
.eh_frame_hdr:000000000000AA98                 db  9Ch
.eh_frame_hdr:000000000000AA99                 db 0AEh
.eh_frame_hdr:000000000000AA9A                 db 0FFh
.eh_frame_hdr:000000000000AA9B                 db 0FFh
.eh_frame_hdr:000000000000AA9C                 db  54h ; T
.eh_frame_hdr:000000000000AA9D                 db    7
.eh_frame_hdr:000000000000AA9E                 db    0
.eh_frame_hdr:000000000000AA9F                 db    0
.eh_frame_hdr:000000000000AAA0                 db  1Ch
.eh_frame_hdr:000000000000AAA1                 db 0AFh
.eh_frame_hdr:000000000000AAA2                 db 0FFh
.eh_frame_hdr:000000000000AAA3                 db 0FFh
.eh_frame_hdr:000000000000AAA4                 db  80h
.eh_frame_hdr:000000000000AAA5                 db    7
.eh_frame_hdr:000000000000AAA6                 db    0
.eh_frame_hdr:000000000000AAA7                 db    0
.eh_frame_hdr:000000000000AAA8                 db  3Ch ; <
.eh_frame_hdr:000000000000AAA9                 db 0B0h
.eh_frame_hdr:000000000000AAAA                 db 0FFh
.eh_frame_hdr:000000000000AAAB                 db 0FFh
.eh_frame_hdr:000000000000AAAC                 db 0E0h
.eh_frame_hdr:000000000000AAAD                 db    7
.eh_frame_hdr:000000000000AAAE                 db    0
.eh_frame_hdr:000000000000AAAF                 db    0
.eh_frame_hdr:000000000000AAB0                 db 0ACh
.eh_frame_hdr:000000000000AAB1                 db 0B0h
.eh_frame_hdr:000000000000AAB2                 db 0FFh
.eh_frame_hdr:000000000000AAB3                 db 0FFh
.eh_frame_hdr:000000000000AAB4                 db  2Ch ; ,
.eh_frame_hdr:000000000000AAB5                 db    8
.eh_frame_hdr:000000000000AAB6                 db    0
.eh_frame_hdr:000000000000AAB7                 db    0
.eh_frame_hdr:000000000000AAB8                 db 0FCh
.eh_frame_hdr:000000000000AAB9                 db 0B0h
.eh_frame_hdr:000000000000AABA                 db 0FFh
.eh_frame_hdr:000000000000AABB                 db 0FFh
.eh_frame_hdr:000000000000AABC                 db  6Ch ; l
.eh_frame_hdr:000000000000AABD                 db    8
.eh_frame_hdr:000000000000AABE                 db    0
.eh_frame_hdr:000000000000AABF                 db    0
.eh_frame_hdr:000000000000AAC0                 db  0Ch
.eh_frame_hdr:000000000000AAC1                 db 0B1h
.eh_frame_hdr:000000000000AAC2                 db 0FFh
.eh_frame_hdr:000000000000AAC3                 db 0FFh
.eh_frame_hdr:000000000000AAC4                 db  80h
.eh_frame_hdr:000000000000AAC5                 db    8
.eh_frame_hdr:000000000000AAC6                 db    0
.eh_frame_hdr:000000000000AAC7                 db    0
.eh_frame_hdr:000000000000AAC8                 db  1Ch
.eh_frame_hdr:000000000000AAC9                 db 0B1h
.eh_frame_hdr:000000000000AACA                 db 0FFh
.eh_frame_hdr:000000000000AACB                 db 0FFh
.eh_frame_hdr:000000000000AACC                 db  94h
.eh_frame_hdr:000000000000AACD                 db    8
.eh_frame_hdr:000000000000AACE                 db    0
.eh_frame_hdr:000000000000AACF                 db    0
.eh_frame_hdr:000000000000AAD0                 db 0CCh
.eh_frame_hdr:000000000000AAD1                 db 0B1h
.eh_frame_hdr:000000000000AAD2                 db 0FFh
.eh_frame_hdr:000000000000AAD3                 db 0FFh
.eh_frame_hdr:000000000000AAD4                 db 0C4h
.eh_frame_hdr:000000000000AAD5                 db    8
.eh_frame_hdr:000000000000AAD6                 db    0
.eh_frame_hdr:000000000000AAD7                 db    0
.eh_frame_hdr:000000000000AAD8                 db 0DCh
.eh_frame_hdr:000000000000AAD9                 db 0B1h
.eh_frame_hdr:000000000000AADA                 db 0FFh
.eh_frame_hdr:000000000000AADB                 db 0FFh
.eh_frame_hdr:000000000000AADC                 db 0D8h
.eh_frame_hdr:000000000000AADD                 db    8
.eh_frame_hdr:000000000000AADE                 db    0
.eh_frame_hdr:000000000000AADF                 db    0
.eh_frame_hdr:000000000000AAE0                 db  0Ch
.eh_frame_hdr:000000000000AAE1                 db 0B2h
.eh_frame_hdr:000000000000AAE2                 db 0FFh
.eh_frame_hdr:000000000000AAE3                 db 0FFh
.eh_frame_hdr:000000000000AAE4                 db 0F4h
.eh_frame_hdr:000000000000AAE5                 db    8
.eh_frame_hdr:000000000000AAE6                 db    0
.eh_frame_hdr:000000000000AAE7                 db    0
.eh_frame_hdr:000000000000AAE8                 db 0ACh
.eh_frame_hdr:000000000000AAE9                 db 0B2h
.eh_frame_hdr:000000000000AAEA                 db 0FFh
.eh_frame_hdr:000000000000AAEB                 db 0FFh
.eh_frame_hdr:000000000000AAEC                 db  24h ; $
.eh_frame_hdr:000000000000AAED                 db    9
.eh_frame_hdr:000000000000AAEE                 db    0
.eh_frame_hdr:000000000000AAEF                 db    0
.eh_frame_hdr:000000000000AAF0                 db  4Ch ; L
.eh_frame_hdr:000000000000AAF1                 db 0B3h
.eh_frame_hdr:000000000000AAF2                 db 0FFh
.eh_frame_hdr:000000000000AAF3                 db 0FFh
.eh_frame_hdr:000000000000AAF4                 db  44h ; D
.eh_frame_hdr:000000000000AAF5                 db    9
.eh_frame_hdr:000000000000AAF6                 db    0
.eh_frame_hdr:000000000000AAF7                 db    0
.eh_frame_hdr:000000000000AAF8                 db  3Ch ; <
.eh_frame_hdr:000000000000AAF9                 db 0B4h
.eh_frame_hdr:000000000000AAFA                 db 0FFh
.eh_frame_hdr:000000000000AAFB                 db 0FFh
.eh_frame_hdr:000000000000AAFC                 db  88h
.eh_frame_hdr:000000000000AAFD                 db    9
.eh_frame_hdr:000000000000AAFE                 db    0
.eh_frame_hdr:000000000000AAFF                 db    0
.eh_frame_hdr:000000000000AB00                 db  7Ch ; |
.eh_frame_hdr:000000000000AB01                 db 0C6h
.eh_frame_hdr:000000000000AB02                 db 0FFh
.eh_frame_hdr:000000000000AB03                 db 0FFh
.eh_frame_hdr:000000000000AB04                 db    0
.eh_frame_hdr:000000000000AB05                 db  0Ah
.eh_frame_hdr:000000000000AB06                 db    0
.eh_frame_hdr:000000000000AB07                 db    0
.eh_frame_hdr:000000000000AB08                 db  2Ch ; ,
.eh_frame_hdr:000000000000AB09                 db 0C8h
.eh_frame_hdr:000000000000AB0A                 db 0FFh
.eh_frame_hdr:000000000000AB0B                 db 0FFh
.eh_frame_hdr:000000000000AB0C                 db  6Ch ; l
.eh_frame_hdr:000000000000AB0D                 db  0Ah
.eh_frame_hdr:000000000000AB0E                 db    0
.eh_frame_hdr:000000000000AB0F                 db    0
.eh_frame_hdr:000000000000AB10                 db  6Ch ; l
.eh_frame_hdr:000000000000AB11                 db 0C8h
.eh_frame_hdr:000000000000AB12                 db 0FFh
.eh_frame_hdr:000000000000AB13                 db 0FFh
.eh_frame_hdr:000000000000AB14                 db  98h
.eh_frame_hdr:000000000000AB15                 db  0Ah
.eh_frame_hdr:000000000000AB16                 db    0
.eh_frame_hdr:000000000000AB17                 db    0
.eh_frame_hdr:000000000000AB18                 db  8Ch
.eh_frame_hdr:000000000000AB19                 db 0C8h
.eh_frame_hdr:000000000000AB1A                 db 0FFh
.eh_frame_hdr:000000000000AB1B                 db 0FFh
.eh_frame_hdr:000000000000AB1C                 db 0ACh
.eh_frame_hdr:000000000000AB1D                 db  0Ah
.eh_frame_hdr:000000000000AB1E                 db    0
.eh_frame_hdr:000000000000AB1F                 db    0
.eh_frame_hdr:000000000000AB20                 db 0ACh
.eh_frame_hdr:000000000000AB21                 db 0C8h
.eh_frame_hdr:000000000000AB22                 db 0FFh
.eh_frame_hdr:000000000000AB23                 db 0FFh
.eh_frame_hdr:000000000000AB24                 db 0C0h
.eh_frame_hdr:000000000000AB25                 db  0Ah
.eh_frame_hdr:000000000000AB26                 db    0
.eh_frame_hdr:000000000000AB27                 db    0
.eh_frame_hdr:000000000000AB28                 db 0ECh
.eh_frame_hdr:000000000000AB29                 db 0C8h
.eh_frame_hdr:000000000000AB2A                 db 0FFh
.eh_frame_hdr:000000000000AB2B                 db 0FFh
.eh_frame_hdr:000000000000AB2C                 db 0D4h
.eh_frame_hdr:000000000000AB2D                 db  0Ah
.eh_frame_hdr:000000000000AB2E                 db    0
.eh_frame_hdr:000000000000AB2F                 db    0
.eh_frame_hdr:000000000000AB30                 db  0Ch
.eh_frame_hdr:000000000000AB31                 db 0C9h
.eh_frame_hdr:000000000000AB32                 db 0FFh
.eh_frame_hdr:000000000000AB33                 db 0FFh
.eh_frame_hdr:000000000000AB34                 db 0E8h
.eh_frame_hdr:000000000000AB35                 db  0Ah
.eh_frame_hdr:000000000000AB36                 db    0
.eh_frame_hdr:000000000000AB37                 db    0
.eh_frame_hdr:000000000000AB38                 db  3Ch ; <
.eh_frame_hdr:000000000000AB39                 db 0C9h
.eh_frame_hdr:000000000000AB3A                 db 0FFh
.eh_frame_hdr:000000000000AB3B                 db 0FFh
.eh_frame_hdr:000000000000AB3C                 db 0FCh
.eh_frame_hdr:000000000000AB3D                 db  0Ah
.eh_frame_hdr:000000000000AB3E                 db    0
.eh_frame_hdr:000000000000AB3F                 db    0
.eh_frame_hdr:000000000000AB40                 db 0BCh
.eh_frame_hdr:000000000000AB41                 db 0C9h
.eh_frame_hdr:000000000000AB42                 db 0FFh
.eh_frame_hdr:000000000000AB43                 db 0FFh
.eh_frame_hdr:000000000000AB44                 db  50h ; P
.eh_frame_hdr:000000000000AB45                 db  0Bh
.eh_frame_hdr:000000000000AB46                 db    0
.eh_frame_hdr:000000000000AB47                 db    0
.eh_frame_hdr:000000000000AB48                 db 0ACh
.eh_frame_hdr:000000000000AB49                 db 0CAh
.eh_frame_hdr:000000000000AB4A                 db 0FFh
.eh_frame_hdr:000000000000AB4B                 db 0FFh
.eh_frame_hdr:000000000000AB4C                 db 0BCh
.eh_frame_hdr:000000000000AB4D                 db  0Bh
.eh_frame_hdr:000000000000AB4E                 db    0
.eh_frame_hdr:000000000000AB4F                 db    0
.eh_frame_hdr:000000000000AB50                 db 0BCh
.eh_frame_hdr:000000000000AB51                 db 0CAh
.eh_frame_hdr:000000000000AB52                 db 0FFh
.eh_frame_hdr:000000000000AB53                 db 0FFh
.eh_frame_hdr:000000000000AB54                 db 0D0h
.eh_frame_hdr:000000000000AB55                 db  0Bh
.eh_frame_hdr:000000000000AB56                 db    0
.eh_frame_hdr:000000000000AB57                 db    0
.eh_frame_hdr:000000000000AB58                 db  5Ch ; \
.eh_frame_hdr:000000000000AB59                 db 0CBh
.eh_frame_hdr:000000000000AB5A                 db 0FFh
.eh_frame_hdr:000000000000AB5B                 db 0FFh
.eh_frame_hdr:000000000000AB5C                 db 0FCh
.eh_frame_hdr:000000000000AB5D                 db  0Bh
.eh_frame_hdr:000000000000AB5E                 db    0
.eh_frame_hdr:000000000000AB5F                 db    0
.eh_frame_hdr:000000000000AB60                 db  7Ch ; |
.eh_frame_hdr:000000000000AB61                 db 0CBh
.eh_frame_hdr:000000000000AB62                 db 0FFh
.eh_frame_hdr:000000000000AB63                 db 0FFh
.eh_frame_hdr:000000000000AB64                 db  10h
.eh_frame_hdr:000000000000AB65                 db  0Ch
.eh_frame_hdr:000000000000AB66                 db    0
.eh_frame_hdr:000000000000AB67                 db    0
.eh_frame_hdr:000000000000AB68                 db  8Ch
.eh_frame_hdr:000000000000AB69                 db 0CBh
.eh_frame_hdr:000000000000AB6A                 db 0FFh
.eh_frame_hdr:000000000000AB6B                 db 0FFh
.eh_frame_hdr:000000000000AB6C                 db  24h ; $
.eh_frame_hdr:000000000000AB6D                 db  0Ch
.eh_frame_hdr:000000000000AB6E                 db    0
.eh_frame_hdr:000000000000AB6F                 db    0
.eh_frame_hdr:000000000000AB70                 db 0ACh
.eh_frame_hdr:000000000000AB71                 db 0CBh
.eh_frame_hdr:000000000000AB72                 db 0FFh
.eh_frame_hdr:000000000000AB73                 db 0FFh
.eh_frame_hdr:000000000000AB74                 db  38h ; 8
.eh_frame_hdr:000000000000AB75                 db  0Ch
.eh_frame_hdr:000000000000AB76                 db    0
.eh_frame_hdr:000000000000AB77                 db    0
.eh_frame_hdr:000000000000AB78                 db 0CCh
.eh_frame_hdr:000000000000AB79                 db 0CBh
.eh_frame_hdr:000000000000AB7A                 db 0FFh
.eh_frame_hdr:000000000000AB7B                 db 0FFh
.eh_frame_hdr:000000000000AB7C                 db  4Ch ; L
.eh_frame_hdr:000000000000AB7D                 db  0Ch
.eh_frame_hdr:000000000000AB7E                 db    0
.eh_frame_hdr:000000000000AB7F                 db    0
.eh_frame_hdr:000000000000AB80                 db  5Ch ; \
.eh_frame_hdr:000000000000AB81                 db 0CCh
.eh_frame_hdr:000000000000AB82                 db 0FFh
.eh_frame_hdr:000000000000AB83                 db 0FFh
.eh_frame_hdr:000000000000AB84                 db  68h ; h
.eh_frame_hdr:000000000000AB85                 db  0Ch
.eh_frame_hdr:000000000000AB86                 db    0
.eh_frame_hdr:000000000000AB87                 db    0
.eh_frame_hdr:000000000000AB88                 db 0ECh
.eh_frame_hdr:000000000000AB89                 db 0CCh
.eh_frame_hdr:000000000000AB8A                 db 0FFh
.eh_frame_hdr:000000000000AB8B                 db 0FFh
.eh_frame_hdr:000000000000AB8C                 db  84h
.eh_frame_hdr:000000000000AB8D                 db  0Ch
.eh_frame_hdr:000000000000AB8E                 db    0
.eh_frame_hdr:000000000000AB8F                 db    0
.eh_frame_hdr:000000000000AB90                 db 0FCh
.eh_frame_hdr:000000000000AB91                 db 0CCh
.eh_frame_hdr:000000000000AB92                 db 0FFh
.eh_frame_hdr:000000000000AB93                 db 0FFh
.eh_frame_hdr:000000000000AB94                 db  98h
.eh_frame_hdr:000000000000AB95                 db  0Ch
.eh_frame_hdr:000000000000AB96                 db    0
.eh_frame_hdr:000000000000AB97                 db    0
.eh_frame_hdr:000000000000AB98                 db  0Ch
.eh_frame_hdr:000000000000AB99                 db 0CDh
.eh_frame_hdr:000000000000AB9A                 db 0FFh
.eh_frame_hdr:000000000000AB9B                 db 0FFh
.eh_frame_hdr:000000000000AB9C                 db 0ACh
.eh_frame_hdr:000000000000AB9D                 db  0Ch
.eh_frame_hdr:000000000000AB9E                 db    0
.eh_frame_hdr:000000000000AB9F                 db    0
.eh_frame_hdr:000000000000ABA0                 db 0ACh
.eh_frame_hdr:000000000000ABA1                 db 0CDh
.eh_frame_hdr:000000000000ABA2                 db 0FFh
.eh_frame_hdr:000000000000ABA3                 db 0FFh
.eh_frame_hdr:000000000000ABA4                 db 0C8h
.eh_frame_hdr:000000000000ABA5                 db  0Ch
.eh_frame_hdr:000000000000ABA6                 db    0
.eh_frame_hdr:000000000000ABA7                 db    0
.eh_frame_hdr:000000000000ABA8                 db 0BCh
.eh_frame_hdr:000000000000ABA9                 db 0CDh
.eh_frame_hdr:000000000000ABAA                 db 0FFh
.eh_frame_hdr:000000000000ABAB                 db 0FFh
.eh_frame_hdr:000000000000ABAC                 db 0DCh
.eh_frame_hdr:000000000000ABAD                 db  0Ch
.eh_frame_hdr:000000000000ABAE                 db    0
.eh_frame_hdr:000000000000ABAF                 db    0
.eh_frame_hdr:000000000000ABB0                 db 0DCh
.eh_frame_hdr:000000000000ABB1                 db 0CDh
.eh_frame_hdr:000000000000ABB2                 db 0FFh
.eh_frame_hdr:000000000000ABB3                 db 0FFh
.eh_frame_hdr:000000000000ABB4                 db 0F0h
.eh_frame_hdr:000000000000ABB5                 db  0Ch
.eh_frame_hdr:000000000000ABB6                 db    0
.eh_frame_hdr:000000000000ABB7                 db    0
.eh_frame_hdr:000000000000ABB8                 db 0ECh
.eh_frame_hdr:000000000000ABB9                 db 0CDh
.eh_frame_hdr:000000000000ABBA                 db 0FFh
.eh_frame_hdr:000000000000ABBB                 db 0FFh
.eh_frame_hdr:000000000000ABBC                 db    4
.eh_frame_hdr:000000000000ABBD                 db  0Dh
.eh_frame_hdr:000000000000ABBE                 db    0
.eh_frame_hdr:000000000000ABBF                 db    0
.eh_frame_hdr:000000000000ABC0                 db  7Ch ; |
.eh_frame_hdr:000000000000ABC1                 db 0CEh
.eh_frame_hdr:000000000000ABC2                 db 0FFh
.eh_frame_hdr:000000000000ABC3                 db 0FFh
.eh_frame_hdr:000000000000ABC4                 db  20h
.eh_frame_hdr:000000000000ABC5                 db  0Dh
.eh_frame_hdr:000000000000ABC6                 db    0
.eh_frame_hdr:000000000000ABC7                 db    0
.eh_frame_hdr:000000000000ABC8                 db  1Ch
.eh_frame_hdr:000000000000ABC9                 db 0CFh
.eh_frame_hdr:000000000000ABCA                 db 0FFh
.eh_frame_hdr:000000000000ABCB                 db 0FFh
.eh_frame_hdr:000000000000ABCC                 db  3Ch ; <
.eh_frame_hdr:000000000000ABCD                 db  0Dh
.eh_frame_hdr:000000000000ABCE                 db    0
.eh_frame_hdr:000000000000ABCF                 db    0
.eh_frame_hdr:000000000000ABD0                 db  2Ch ; ,
.eh_frame_hdr:000000000000ABD1                 db 0CFh
.eh_frame_hdr:000000000000ABD2                 db 0FFh
.eh_frame_hdr:000000000000ABD3                 db 0FFh
.eh_frame_hdr:000000000000ABD4                 db  50h ; P
.eh_frame_hdr:000000000000ABD5                 db  0Dh
.eh_frame_hdr:000000000000ABD6                 db    0
.eh_frame_hdr:000000000000ABD7                 db    0
.eh_frame_hdr:000000000000ABD8                 db  4Ch ; L
.eh_frame_hdr:000000000000ABD9                 db 0CFh
.eh_frame_hdr:000000000000ABDA                 db 0FFh
.eh_frame_hdr:000000000000ABDB                 db 0FFh
.eh_frame_hdr:000000000000ABDC                 db  64h ; d
.eh_frame_hdr:000000000000ABDD                 db  0Dh
.eh_frame_hdr:000000000000ABDE                 db    0
.eh_frame_hdr:000000000000ABDF                 db    0
.eh_frame_hdr:000000000000ABE0                 db  6Ch ; l
.eh_frame_hdr:000000000000ABE1                 db 0CFh
.eh_frame_hdr:000000000000ABE2                 db 0FFh
.eh_frame_hdr:000000000000ABE3                 db 0FFh
.eh_frame_hdr:000000000000ABE4                 db  78h ; x
.eh_frame_hdr:000000000000ABE5                 db  0Dh
.eh_frame_hdr:000000000000ABE6                 db    0
.eh_frame_hdr:000000000000ABE7                 db    0
.eh_frame_hdr:000000000000ABE8                 db  7Ch ; |
.eh_frame_hdr:000000000000ABE9                 db 0CFh
.eh_frame_hdr:000000000000ABEA                 db 0FFh
.eh_frame_hdr:000000000000ABEB                 db 0FFh
.eh_frame_hdr:000000000000ABEC                 db  8Ch
.eh_frame_hdr:000000000000ABED                 db  0Dh
.eh_frame_hdr:000000000000ABEE                 db    0
.eh_frame_hdr:000000000000ABEF                 db    0
.eh_frame_hdr:000000000000ABF0                 db  9Ch
.eh_frame_hdr:000000000000ABF1                 db 0CFh
.eh_frame_hdr:000000000000ABF2                 db 0FFh
.eh_frame_hdr:000000000000ABF3                 db 0FFh
.eh_frame_hdr:000000000000ABF4                 db 0A0h
.eh_frame_hdr:000000000000ABF5                 db  0Dh
.eh_frame_hdr:000000000000ABF6                 db    0
.eh_frame_hdr:000000000000ABF7                 db    0
.eh_frame_hdr:000000000000ABF8                 db 0BCh
.eh_frame_hdr:000000000000ABF9                 db 0CFh
.eh_frame_hdr:000000000000ABFA                 db 0FFh
.eh_frame_hdr:000000000000ABFB                 db 0FFh
.eh_frame_hdr:000000000000ABFC                 db 0B4h
.eh_frame_hdr:000000000000ABFD                 db  0Dh
.eh_frame_hdr:000000000000ABFE                 db    0
.eh_frame_hdr:000000000000ABFF                 db    0
.eh_frame_hdr:000000000000AC00                 db 0DCh
.eh_frame_hdr:000000000000AC01                 db 0CFh
.eh_frame_hdr:000000000000AC02                 db 0FFh
.eh_frame_hdr:000000000000AC03                 db 0FFh
.eh_frame_hdr:000000000000AC04                 db 0CCh
.eh_frame_hdr:000000000000AC05                 db  0Dh
.eh_frame_hdr:000000000000AC06                 db    0
.eh_frame_hdr:000000000000AC07                 db    0
.eh_frame_hdr:000000000000AC08                 db 0ECh
.eh_frame_hdr:000000000000AC09                 db 0CFh
.eh_frame_hdr:000000000000AC0A                 db 0FFh
.eh_frame_hdr:000000000000AC0B                 db 0FFh
.eh_frame_hdr:000000000000AC0C                 db 0E4h
.eh_frame_hdr:000000000000AC0D                 db  0Dh
.eh_frame_hdr:000000000000AC0E                 db    0
.eh_frame_hdr:000000000000AC0F                 db    0
.eh_frame_hdr:000000000000AC10                 db  0Ch
.eh_frame_hdr:000000000000AC11                 db 0D4h
.eh_frame_hdr:000000000000AC12                 db 0FFh
.eh_frame_hdr:000000000000AC13                 db 0FFh
.eh_frame_hdr:000000000000AC14                 db 0F8h
.eh_frame_hdr:000000000000AC15                 db  0Eh
.eh_frame_hdr:000000000000AC16                 db    0
.eh_frame_hdr:000000000000AC17                 db    0
.eh_frame_hdr:000000000000AC18                 db  2Ch ; ,
.eh_frame_hdr:000000000000AC19                 db 0D4h
.eh_frame_hdr:000000000000AC1A                 db 0FFh
.eh_frame_hdr:000000000000AC1B                 db 0FFh
.eh_frame_hdr:000000000000AC1C                 db  0Ch
.eh_frame_hdr:000000000000AC1D                 db  0Fh
.eh_frame_hdr:000000000000AC1E                 db    0
.eh_frame_hdr:000000000000AC1F                 db    0
.eh_frame_hdr:000000000000AC20                 db 0ACh
.eh_frame_hdr:000000000000AC21                 db 0D4h
.eh_frame_hdr:000000000000AC22                 db 0FFh
.eh_frame_hdr:000000000000AC23                 db 0FFh
.eh_frame_hdr:000000000000AC24                 db  28h ; (
.eh_frame_hdr:000000000000AC25                 db  0Fh
.eh_frame_hdr:000000000000AC26                 db    0
.eh_frame_hdr:000000000000AC27                 db    0
.eh_frame_hdr:000000000000AC28                 db  8Ch
.eh_frame_hdr:000000000000AC29                 db 0D5h
.eh_frame_hdr:000000000000AC2A                 db 0FFh
.eh_frame_hdr:000000000000AC2B                 db 0FFh
.eh_frame_hdr:000000000000AC2C                 db  54h ; T
.eh_frame_hdr:000000000000AC2D                 db  0Fh
.eh_frame_hdr:000000000000AC2E                 db    0
.eh_frame_hdr:000000000000AC2F                 db    0
.eh_frame_hdr:000000000000AC30                 db  0Ch
.eh_frame_hdr:000000000000AC31                 db 0D6h
.eh_frame_hdr:000000000000AC32                 db 0FFh
.eh_frame_hdr:000000000000AC33                 db 0FFh
.eh_frame_hdr:000000000000AC34                 db  74h ; t
.eh_frame_hdr:000000000000AC35                 db  0Fh
.eh_frame_hdr:000000000000AC36                 db    0
.eh_frame_hdr:000000000000AC37                 db    0
.eh_frame_hdr:000000000000AC38                 db  2Ch ; ,
.eh_frame_hdr:000000000000AC39                 db 0D6h
.eh_frame_hdr:000000000000AC3A                 db 0FFh
.eh_frame_hdr:000000000000AC3B                 db 0FFh
.eh_frame_hdr:000000000000AC3C                 db  90h
.eh_frame_hdr:000000000000AC3D                 db  0Fh
.eh_frame_hdr:000000000000AC3E                 db    0
.eh_frame_hdr:000000000000AC3F                 db    0
.eh_frame_hdr:000000000000AC40                 db  5Ch ; \
.eh_frame_hdr:000000000000AC41                 db 0D6h
.eh_frame_hdr:000000000000AC42                 db 0FFh
.eh_frame_hdr:000000000000AC43                 db 0FFh
.eh_frame_hdr:000000000000AC44                 db 0A4h
.eh_frame_hdr:000000000000AC45                 db  0Fh
.eh_frame_hdr:000000000000AC46                 db    0
.eh_frame_hdr:000000000000AC47                 db    0
.eh_frame_hdr:000000000000AC48                 db  6Ch ; l
.eh_frame_hdr:000000000000AC49                 db 0D6h
.eh_frame_hdr:000000000000AC4A                 db 0FFh
.eh_frame_hdr:000000000000AC4B                 db 0FFh
.eh_frame_hdr:000000000000AC4C                 db 0B8h
.eh_frame_hdr:000000000000AC4D                 db  0Fh
.eh_frame_hdr:000000000000AC4E                 db    0
.eh_frame_hdr:000000000000AC4F                 db    0
.eh_frame_hdr:000000000000AC50                 db 0ACh
.eh_frame_hdr:000000000000AC51                 db 0D6h
.eh_frame_hdr:000000000000AC52                 db 0FFh
.eh_frame_hdr:000000000000AC53                 db 0FFh
.eh_frame_hdr:000000000000AC54                 db 0DCh
.eh_frame_hdr:000000000000AC55                 db  0Fh
.eh_frame_hdr:000000000000AC56                 db    0
.eh_frame_hdr:000000000000AC57                 db    0
.eh_frame_hdr:000000000000AC58                 db 0DCh
.eh_frame_hdr:000000000000AC59                 db 0D6h
.eh_frame_hdr:000000000000AC5A                 db 0FFh
.eh_frame_hdr:000000000000AC5B                 db 0FFh
.eh_frame_hdr:000000000000AC5C                 db 0F0h
.eh_frame_hdr:000000000000AC5D                 db  0Fh
.eh_frame_hdr:000000000000AC5E                 db    0
.eh_frame_hdr:000000000000AC5F                 db    0
.eh_frame_hdr:000000000000AC60                 db  6Ch ; l
.eh_frame_hdr:000000000000AC61                 db 0D7h
.eh_frame_hdr:000000000000AC62                 db 0FFh
.eh_frame_hdr:000000000000AC63                 db 0FFh
.eh_frame_hdr:000000000000AC64                 db    8
.eh_frame_hdr:000000000000AC65                 db  10h
.eh_frame_hdr:000000000000AC66                 db    0
.eh_frame_hdr:000000000000AC67                 db    0
.eh_frame_hdr:000000000000AC68                 db 0BCh
.eh_frame_hdr:000000000000AC69                 db 0D7h
.eh_frame_hdr:000000000000AC6A                 db 0FFh
.eh_frame_hdr:000000000000AC6B                 db 0FFh
.eh_frame_hdr:000000000000AC6C                 db  20h
.eh_frame_hdr:000000000000AC6D                 db  10h
.eh_frame_hdr:000000000000AC6E                 db    0
.eh_frame_hdr:000000000000AC6F                 db    0
.eh_frame_hdr:000000000000AC70                 db 0DCh
.eh_frame_hdr:000000000000AC71                 db 0D7h
.eh_frame_hdr:000000000000AC72                 db 0FFh
.eh_frame_hdr:000000000000AC73                 db 0FFh
.eh_frame_hdr:000000000000AC74                 db  3Ch ; <
.eh_frame_hdr:000000000000AC75                 db  10h
.eh_frame_hdr:000000000000AC76                 db    0
.eh_frame_hdr:000000000000AC77                 db    0
.eh_frame_hdr:000000000000AC78                 db  0Ch
.eh_frame_hdr:000000000000AC79                 db 0D8h
.eh_frame_hdr:000000000000AC7A                 db 0FFh
.eh_frame_hdr:000000000000AC7B                 db 0FFh
.eh_frame_hdr:000000000000AC7C                 db  58h ; X
.eh_frame_hdr:000000000000AC7D                 db  10h
.eh_frame_hdr:000000000000AC7E                 db    0
.eh_frame_hdr:000000000000AC7F                 db    0
.eh_frame_hdr:000000000000AC80                 db  3Ch ; <
.eh_frame_hdr:000000000000AC81                 db 0D8h
.eh_frame_hdr:000000000000AC82                 db 0FFh
.eh_frame_hdr:000000000000AC83                 db 0FFh
.eh_frame_hdr:000000000000AC84                 db  80h
.eh_frame_hdr:000000000000AC85                 db  10h
.eh_frame_hdr:000000000000AC86                 db    0
.eh_frame_hdr:000000000000AC87                 db    0
.eh_frame_hdr:000000000000AC88                 db  5Ch ; \
.eh_frame_hdr:000000000000AC89                 db 0D8h
.eh_frame_hdr:000000000000AC8A                 db 0FFh
.eh_frame_hdr:000000000000AC8B                 db 0FFh
.eh_frame_hdr:000000000000AC8C                 db  9Ch
.eh_frame_hdr:000000000000AC8D                 db  10h
.eh_frame_hdr:000000000000AC8E                 db    0
.eh_frame_hdr:000000000000AC8F                 db    0
.eh_frame_hdr:000000000000AC90                 db  9Ch
.eh_frame_hdr:000000000000AC91                 db 0D8h
.eh_frame_hdr:000000000000AC92                 db 0FFh
.eh_frame_hdr:000000000000AC93                 db 0FFh
.eh_frame_hdr:000000000000AC94                 db 0B4h
.eh_frame_hdr:000000000000AC95                 db  10h
.eh_frame_hdr:000000000000AC96                 db    0
.eh_frame_hdr:000000000000AC97                 db    0
.eh_frame_hdr:000000000000AC98                 db  9Ch
.eh_frame_hdr:000000000000AC99                 db 0D9h
.eh_frame_hdr:000000000000AC9A                 db 0FFh
.eh_frame_hdr:000000000000AC9B                 db 0FFh
.eh_frame_hdr:000000000000AC9C                 db    0
.eh_frame_hdr:000000000000AC9D                 db  11h
.eh_frame_hdr:000000000000AC9E                 db    0
.eh_frame_hdr:000000000000AC9F                 db    0
.eh_frame_hdr:000000000000ACA0                 db 0CCh
.eh_frame_hdr:000000000000ACA1                 db 0D9h
.eh_frame_hdr:000000000000ACA2                 db 0FFh
.eh_frame_hdr:000000000000ACA3                 db 0FFh
.eh_frame_hdr:000000000000ACA4                 db  1Ch
.eh_frame_hdr:000000000000ACA5                 db  11h
.eh_frame_hdr:000000000000ACA6                 db    0
.eh_frame_hdr:000000000000ACA7                 db    0
.eh_frame_hdr:000000000000ACA8                 db 0ECh
.eh_frame_hdr:000000000000ACA9                 db 0DDh
.eh_frame_hdr:000000000000ACAA                 db 0FFh
.eh_frame_hdr:000000000000ACAB                 db 0FFh
.eh_frame_hdr:000000000000ACAC                 db  6Ch ; l
.eh_frame_hdr:000000000000ACAD                 db  11h
.eh_frame_hdr:000000000000ACAE                 db    0
.eh_frame_hdr:000000000000ACAF                 db    0
.eh_frame_hdr:000000000000ACB0                 db  0Ch
.eh_frame_hdr:000000000000ACB1                 db 0E2h
.eh_frame_hdr:000000000000ACB2                 db 0FFh
.eh_frame_hdr:000000000000ACB3                 db 0FFh
.eh_frame_hdr:000000000000ACB4                 db 0BCh
.eh_frame_hdr:000000000000ACB5                 db  11h
.eh_frame_hdr:000000000000ACB6                 db    0
.eh_frame_hdr:000000000000ACB7                 db    0
.eh_frame_hdr:000000000000ACB8                 db  8Ch
.eh_frame_hdr:000000000000ACB9                 db 0E2h
.eh_frame_hdr:000000000000ACBA                 db 0FFh
.eh_frame_hdr:000000000000ACBB                 db 0FFh
.eh_frame_hdr:000000000000ACBC                 db 0F4h
.eh_frame_hdr:000000000000ACBD                 db  11h
.eh_frame_hdr:000000000000ACBE                 db    0
.eh_frame_hdr:000000000000ACBF                 db    0
.eh_frame_hdr:000000000000ACC0                 db  0Ch
.eh_frame_hdr:000000000000ACC1                 db 0E5h
.eh_frame_hdr:000000000000ACC2                 db 0FFh
.eh_frame_hdr:000000000000ACC3                 db 0FFh
.eh_frame_hdr:000000000000ACC4                 db  2Ch ; ,
.eh_frame_hdr:000000000000ACC5                 db  12h
.eh_frame_hdr:000000000000ACC6                 db    0
.eh_frame_hdr:000000000000ACC7                 db    0
.eh_frame_hdr:000000000000ACC8                 db  4Ch ; L
.eh_frame_hdr:000000000000ACC9                 db 0E5h
.eh_frame_hdr:000000000000ACCA                 db 0FFh
.eh_frame_hdr:000000000000ACCB                 db 0FFh
.eh_frame_hdr:000000000000ACCC                 db  4Ch ; L
.eh_frame_hdr:000000000000ACCD                 db  12h
.eh_frame_hdr:000000000000ACCE                 db    0
.eh_frame_hdr:000000000000ACCF                 db    0
.eh_frame_hdr:000000000000ACD0                 db 0ACh
.eh_frame_hdr:000000000000ACD1                 db 0E5h
.eh_frame_hdr:000000000000ACD2                 db 0FFh
.eh_frame_hdr:000000000000ACD3                 db 0FFh
.eh_frame_hdr:000000000000ACD4                 db  7Ch ; |
.eh_frame_hdr:000000000000ACD5                 db  12h
.eh_frame_hdr:000000000000ACD6                 db    0
.eh_frame_hdr:000000000000ACD7                 db    0
.eh_frame_hdr:000000000000ACD8                 db  3Ch ; <
.eh_frame_hdr:000000000000ACD9                 db 0E6h
.eh_frame_hdr:000000000000ACDA                 db 0FFh
.eh_frame_hdr:000000000000ACDB                 db 0FFh
.eh_frame_hdr:000000000000ACDC                 db 0BCh
.eh_frame_hdr:000000000000ACDD                 db  12h
.eh_frame_hdr:000000000000ACDE                 db    0
.eh_frame_hdr:000000000000ACDF                 db    0
.eh_frame_hdr:000000000000ACE0                 db 0BCh
.eh_frame_hdr:000000000000ACE1                 db 0E6h
.eh_frame_hdr:000000000000ACE2                 db 0FFh
.eh_frame_hdr:000000000000ACE3                 db 0FFh
.eh_frame_hdr:000000000000ACE4                 db  0Ch
.eh_frame_hdr:000000000000ACE5                 db  13h
.eh_frame_hdr:000000000000ACE6                 db    0
.eh_frame_hdr:000000000000ACE7                 db    0
.eh_frame_hdr:000000000000ACE8                 db  1Ch
.eh_frame_hdr:000000000000ACE9                 db 0E7h
.eh_frame_hdr:000000000000ACEA                 db 0FFh
.eh_frame_hdr:000000000000ACEB                 db 0FFh
.eh_frame_hdr:000000000000ACEC                 db  2Ch ; ,
.eh_frame_hdr:000000000000ACED                 db  13h
.eh_frame_hdr:000000000000ACEE                 db    0
.eh_frame_hdr:000000000000ACEF                 db    0
.eh_frame_hdr:000000000000ACF0                 db  5Ch ; \
.eh_frame_hdr:000000000000ACF1                 db 0E7h
.eh_frame_hdr:000000000000ACF2                 db 0FFh
.eh_frame_hdr:000000000000ACF3                 db 0FFh
.eh_frame_hdr:000000000000ACF4                 db  4Ch ; L
.eh_frame_hdr:000000000000ACF5                 db  13h
.eh_frame_hdr:000000000000ACF6                 db    0
.eh_frame_hdr:000000000000ACF7                 db    0
.eh_frame_hdr:000000000000ACF8                 db 0CCh
.eh_frame_hdr:000000000000ACF9                 db 0E7h
.eh_frame_hdr:000000000000ACFA                 db 0FFh
.eh_frame_hdr:000000000000ACFB                 db 0FFh
.eh_frame_hdr:000000000000ACFC                 db  94h
.eh_frame_hdr:000000000000ACFD                 db  13h
.eh_frame_hdr:000000000000ACFE                 db    0
.eh_frame_hdr:000000000000ACFF                 db    0
.eh_frame_hdr:000000000000AD00                 db 0DCh
.eh_frame_hdr:000000000000AD01                 db 0E7h
.eh_frame_hdr:000000000000AD02                 db 0FFh
.eh_frame_hdr:000000000000AD03                 db 0FFh
.eh_frame_hdr:000000000000AD04                 db 0ACh
.eh_frame_hdr:000000000000AD05                 db  13h
.eh_frame_hdr:000000000000AD06                 db    0
.eh_frame_hdr:000000000000AD07                 db    0
.eh_frame_hdr:000000000000AD07 _eh_frame_hdr   ends
.eh_frame_hdr:000000000000AD07
.eh_frame:000000000000AD08 ; ===========================================================================
.eh_frame:000000000000AD08
.eh_frame:000000000000AD08 ; Segment type: Pure data
.eh_frame:000000000000AD08 ; Segment permissions: Read
.eh_frame:000000000000AD08 _eh_frame       segment qword public 'CONST' use64
.eh_frame:000000000000AD08                 assume cs:_eh_frame
.eh_frame:000000000000AD08                 ;org 0AD08h
.eh_frame:000000000000AD08                 db  14h
.eh_frame:000000000000AD09                 db    0
.eh_frame:000000000000AD0A                 db    0
.eh_frame:000000000000AD0B                 db    0
.eh_frame:000000000000AD0C                 db    0
.eh_frame:000000000000AD0D                 db    0
.eh_frame:000000000000AD0E                 db    0
.eh_frame:000000000000AD0F                 db    0
.eh_frame:000000000000AD10                 db    1
.eh_frame:000000000000AD11                 db  7Ah ; z
.eh_frame:000000000000AD12                 db  52h ; R
.eh_frame:000000000000AD13                 db    0
.eh_frame:000000000000AD14                 db    1
.eh_frame:000000000000AD15                 db  78h ; x
.eh_frame:000000000000AD16                 db  10h
.eh_frame:000000000000AD17                 db    1
.eh_frame:000000000000AD18                 db  1Bh
.eh_frame:000000000000AD19                 db  0Ch
.eh_frame:000000000000AD1A                 db    7
.eh_frame:000000000000AD1B                 db    8
.eh_frame:000000000000AD1C                 db  90h
.eh_frame:000000000000AD1D                 db    1
.eh_frame:000000000000AD1E                 db    7
.eh_frame:000000000000AD1F                 db  10h
.eh_frame:000000000000AD20                 db  14h
.eh_frame:000000000000AD21                 db    0
.eh_frame:000000000000AD22                 db    0
.eh_frame:000000000000AD23                 db    0
.eh_frame:000000000000AD24                 db  1Ch
.eh_frame:000000000000AD25                 db    0
.eh_frame:000000000000AD26                 db    0
.eh_frame:000000000000AD27                 db    0
.eh_frame:000000000000AD28                 db 0D8h
.eh_frame:000000000000AD29                 db  82h
.eh_frame:000000000000AD2A                 db 0FFh
.eh_frame:000000000000AD2B                 db 0FFh
.eh_frame:000000000000AD2C                 db  2Bh ; +
.eh_frame:000000000000AD2D                 db    0
.eh_frame:000000000000AD2E                 db    0
.eh_frame:000000000000AD2F                 db    0
.eh_frame:000000000000AD30                 db    0
.eh_frame:000000000000AD31                 db    0
.eh_frame:000000000000AD32                 db    0
.eh_frame:000000000000AD33                 db    0
.eh_frame:000000000000AD34                 db    0
.eh_frame:000000000000AD35                 db    0
.eh_frame:000000000000AD36                 db    0
.eh_frame:000000000000AD37                 db    0
.eh_frame:000000000000AD38                 db  14h
.eh_frame:000000000000AD39                 db    0
.eh_frame:000000000000AD3A                 db    0
.eh_frame:000000000000AD3B                 db    0
.eh_frame:000000000000AD3C                 db    0
.eh_frame:000000000000AD3D                 db    0
.eh_frame:000000000000AD3E                 db    0
.eh_frame:000000000000AD3F                 db    0
.eh_frame:000000000000AD40                 db    1
.eh_frame:000000000000AD41                 db  7Ah ; z
.eh_frame:000000000000AD42                 db  52h ; R
.eh_frame:000000000000AD43                 db    0
.eh_frame:000000000000AD44                 db    1
.eh_frame:000000000000AD45                 db  78h ; x
.eh_frame:000000000000AD46                 db  10h
.eh_frame:000000000000AD47                 db    1
.eh_frame:000000000000AD48                 db  1Bh
.eh_frame:000000000000AD49                 db  0Ch
.eh_frame:000000000000AD4A                 db    7
.eh_frame:000000000000AD4B                 db    8
.eh_frame:000000000000AD4C                 db  90h
.eh_frame:000000000000AD4D                 db    1
.eh_frame:000000000000AD4E                 db    0
.eh_frame:000000000000AD4F                 db    0
.eh_frame:000000000000AD50                 db  24h ; $
.eh_frame:000000000000AD51                 db    0
.eh_frame:000000000000AD52                 db    0
.eh_frame:000000000000AD53                 db    0
.eh_frame:000000000000AD54                 db  1Ch
.eh_frame:000000000000AD55                 db    0
.eh_frame:000000000000AD56                 db    0
.eh_frame:000000000000AD57                 db    0
.eh_frame:000000000000AD58                 db  88h
.eh_frame:000000000000AD59                 db  6Ah ; j
.eh_frame:000000000000AD5A                 db 0FFh
.eh_frame:000000000000AD5B                 db 0FFh
.eh_frame:000000000000AD5C                 db 0C0h
.eh_frame:000000000000AD5D                 db    3
.eh_frame:000000000000AD5E                 db    0
.eh_frame:000000000000AD5F                 db    0
.eh_frame:000000000000AD60                 db    0
.eh_frame:000000000000AD61                 db  0Eh
.eh_frame:000000000000AD62                 db  10h
.eh_frame:000000000000AD63                 db  46h ; F
.eh_frame:000000000000AD64                 db  0Eh
.eh_frame:000000000000AD65                 db  18h
.eh_frame:000000000000AD66                 db  4Ah ; J
.eh_frame:000000000000AD67                 db  0Fh
.eh_frame:000000000000AD68                 db  0Bh
.eh_frame:000000000000AD69                 db  77h ; w
.eh_frame:000000000000AD6A                 db    8
.eh_frame:000000000000AD6B                 db  80h
.eh_frame:000000000000AD6C                 db    0
.eh_frame:000000000000AD6D                 db  3Fh ; ?
.eh_frame:000000000000AD6E                 db  1Ah
.eh_frame:000000000000AD6F                 db  3Bh ; ;
.eh_frame:000000000000AD70                 db  2Ah ; *
.eh_frame:000000000000AD71                 db  33h ; 3
.eh_frame:000000000000AD72                 db  24h ; $
.eh_frame:000000000000AD73                 db  22h ; "
.eh_frame:000000000000AD74                 db    0
.eh_frame:000000000000AD75                 db    0
.eh_frame:000000000000AD76                 db    0
.eh_frame:000000000000AD77                 db    0
.eh_frame:000000000000AD78                 db  14h
.eh_frame:000000000000AD79                 db    0
.eh_frame:000000000000AD7A                 db    0
.eh_frame:000000000000AD7B                 db    0
.eh_frame:000000000000AD7C                 db  44h ; D
.eh_frame:000000000000AD7D                 db    0
.eh_frame:000000000000AD7E                 db    0
.eh_frame:000000000000AD7F                 db    0
.eh_frame:000000000000AD80                 db  20h
.eh_frame:000000000000AD81                 db  6Eh ; n
.eh_frame:000000000000AD82                 db 0FFh
.eh_frame:000000000000AD83                 db 0FFh
.eh_frame:000000000000AD84                 db    8
.eh_frame:000000000000AD85                 db    0
.eh_frame:000000000000AD86                 db    0
.eh_frame:000000000000AD87                 db    0
.eh_frame:000000000000AD88                 db    0
.eh_frame:000000000000AD89                 db    0
.eh_frame:000000000000AD8A                 db    0
.eh_frame:000000000000AD8B                 db    0
.eh_frame:000000000000AD8C                 db    0
.eh_frame:000000000000AD8D                 db    0
.eh_frame:000000000000AD8E                 db    0
.eh_frame:000000000000AD8F                 db    0
.eh_frame:000000000000AD90                 db  10h
.eh_frame:000000000000AD91                 db    0
.eh_frame:000000000000AD92                 db    0
.eh_frame:000000000000AD93                 db    0
.eh_frame:000000000000AD94                 db  5Ch ; \
.eh_frame:000000000000AD95                 db    0
.eh_frame:000000000000AD96                 db    0
.eh_frame:000000000000AD97                 db    0
.eh_frame:000000000000AD98                 db  78h ; x
.eh_frame:000000000000AD99                 db  83h
.eh_frame:000000000000AD9A                 db 0FFh
.eh_frame:000000000000AD9B                 db 0FFh
.eh_frame:000000000000AD9C                 db  79h ; y
.eh_frame:000000000000AD9D                 db    0
.eh_frame:000000000000AD9E                 db    0
.eh_frame:000000000000AD9F                 db    0
.eh_frame:000000000000ADA0                 db    0
.eh_frame:000000000000ADA1                 db    0
.eh_frame:000000000000ADA2                 db    0
.eh_frame:000000000000ADA3                 db    0
.eh_frame:000000000000ADA4                 db  30h ; 0
.eh_frame:000000000000ADA5                 db    0
.eh_frame:000000000000ADA6                 db    0
.eh_frame:000000000000ADA7                 db    0
.eh_frame:000000000000ADA8                 db  70h ; p
.eh_frame:000000000000ADA9                 db    0
.eh_frame:000000000000ADAA                 db    0
.eh_frame:000000000000ADAB                 db    0
.eh_frame:000000000000ADAC                 db 0E4h
.eh_frame:000000000000ADAD                 db  83h
.eh_frame:000000000000ADAE                 db 0FFh
.eh_frame:000000000000ADAF                 db 0FFh
.eh_frame:000000000000ADB0                 db  60h ; `
.eh_frame:000000000000ADB1                 db    0
.eh_frame:000000000000ADB2                 db    0
.eh_frame:000000000000ADB3                 db    0
.eh_frame:000000000000ADB4                 db    0
.eh_frame:000000000000ADB5                 db  41h ; A
.eh_frame:000000000000ADB6                 db  0Eh
.eh_frame:000000000000ADB7                 db  10h
.eh_frame:000000000000ADB8                 db  86h
.eh_frame:000000000000ADB9                 db    2
.eh_frame:000000000000ADBA                 db  41h ; A
.eh_frame:000000000000ADBB                 db  0Eh
.eh_frame:000000000000ADBC                 db  18h
.eh_frame:000000000000ADBD                 db  83h
.eh_frame:000000000000ADBE                 db    3
.eh_frame:000000000000ADBF                 db  44h ; D
.eh_frame:000000000000ADC0                 db  0Eh
.eh_frame:000000000000ADC1                 db  20h
.eh_frame:000000000000ADC2                 db  7Dh ; }
.eh_frame:000000000000ADC3                 db  0Ah
.eh_frame:000000000000ADC4                 db  0Eh
.eh_frame:000000000000ADC5                 db  18h
.eh_frame:000000000000ADC6                 db  43h ; C
.eh_frame:000000000000ADC7                 db  0Eh
.eh_frame:000000000000ADC8                 db  10h
.eh_frame:000000000000ADC9                 db  41h ; A
.eh_frame:000000000000ADCA                 db  0Eh
.eh_frame:000000000000ADCB                 db    8
.eh_frame:000000000000ADCC                 db  49h ; I
.eh_frame:000000000000ADCD                 db  0Bh
.eh_frame:000000000000ADCE                 db  4Dh ; M
.eh_frame:000000000000ADCF                 db  0Eh
.eh_frame:000000000000ADD0                 db  18h
.eh_frame:000000000000ADD1                 db  41h ; A
.eh_frame:000000000000ADD2                 db  0Eh
.eh_frame:000000000000ADD3                 db  10h
.eh_frame:000000000000ADD4                 db  41h ; A
.eh_frame:000000000000ADD5                 db  0Eh
.eh_frame:000000000000ADD6                 db    8
.eh_frame:000000000000ADD7                 db    0
.eh_frame:000000000000ADD8                 db  34h ; 4
.eh_frame:000000000000ADD9                 db    0
.eh_frame:000000000000ADDA                 db    0
.eh_frame:000000000000ADDB                 db    0
.eh_frame:000000000000ADDC                 db 0A4h
.eh_frame:000000000000ADDD                 db    0
.eh_frame:000000000000ADDE                 db    0
.eh_frame:000000000000ADDF                 db    0
.eh_frame:000000000000ADE0                 db  10h
.eh_frame:000000000000ADE1                 db  84h
.eh_frame:000000000000ADE2                 db 0FFh
.eh_frame:000000000000ADE3                 db 0FFh
.eh_frame:000000000000ADE4                 db 0C5h
.eh_frame:000000000000ADE5                 db    0
.eh_frame:000000000000ADE6                 db    0
.eh_frame:000000000000ADE7                 db    0
.eh_frame:000000000000ADE8                 db    0
.eh_frame:000000000000ADE9                 db  41h ; A
.eh_frame:000000000000ADEA                 db  0Eh
.eh_frame:000000000000ADEB                 db  10h
.eh_frame:000000000000ADEC                 db  86h
.eh_frame:000000000000ADED                 db    2
.eh_frame:000000000000ADEE                 db  41h ; A
.eh_frame:000000000000ADEF                 db  0Eh
.eh_frame:000000000000ADF0                 db  18h
.eh_frame:000000000000ADF1                 db  83h
.eh_frame:000000000000ADF2                 db    3
.eh_frame:000000000000ADF3                 db  47h ; G
.eh_frame:000000000000ADF4                 db  0Eh
.eh_frame:000000000000ADF5                 db  20h
.eh_frame:000000000000ADF6                 db    2
.eh_frame:000000000000ADF7                 db  79h ; y
.eh_frame:000000000000ADF8                 db  0Ah
.eh_frame:000000000000ADF9                 db  0Eh
.eh_frame:000000000000ADFA                 db  18h
.eh_frame:000000000000ADFB                 db  41h ; A
.eh_frame:000000000000ADFC                 db  0Eh
.eh_frame:000000000000ADFD                 db  10h
.eh_frame:000000000000ADFE                 db  41h ; A
.eh_frame:000000000000ADFF                 db  0Eh
.eh_frame:000000000000AE00                 db    8
.eh_frame:000000000000AE01                 db  44h ; D
.eh_frame:000000000000AE02                 db  0Bh
.eh_frame:000000000000AE03                 db  63h ; c
.eh_frame:000000000000AE04                 db  0Ah
.eh_frame:000000000000AE05                 db  0Eh
.eh_frame:000000000000AE06                 db  18h
.eh_frame:000000000000AE07                 db  41h ; A
.eh_frame:000000000000AE08                 db  0Eh
.eh_frame:000000000000AE09                 db  10h
.eh_frame:000000000000AE0A                 db  41h ; A
.eh_frame:000000000000AE0B                 db  0Eh
.eh_frame:000000000000AE0C                 db    8
.eh_frame:000000000000AE0D                 db  4Bh ; K
.eh_frame:000000000000AE0E                 db  0Bh
.eh_frame:000000000000AE0F                 db    0
.eh_frame:000000000000AE10                 db  4Ch ; L
.eh_frame:000000000000AE11                 db    0
.eh_frame:000000000000AE12                 db    0
.eh_frame:000000000000AE13                 db    0
.eh_frame:000000000000AE14                 db 0DCh
.eh_frame:000000000000AE15                 db    0
.eh_frame:000000000000AE16                 db    0
.eh_frame:000000000000AE17                 db    0
.eh_frame:000000000000AE18                 db 0A8h
.eh_frame:000000000000AE19                 db  84h
.eh_frame:000000000000AE1A                 db 0FFh
.eh_frame:000000000000AE1B                 db 0FFh
.eh_frame:000000000000AE1C                 db 0BAh
.eh_frame:000000000000AE1D                 db    1
.eh_frame:000000000000AE1E                 db    0
.eh_frame:000000000000AE1F                 db    0
.eh_frame:000000000000AE20                 db    0
.eh_frame:000000000000AE21                 db  42h ; B
.eh_frame:000000000000AE22                 db  0Eh
.eh_frame:000000000000AE23                 db  10h
.eh_frame:000000000000AE24                 db  8Dh
.eh_frame:000000000000AE25                 db    2
.eh_frame:000000000000AE26                 db  42h ; B
.eh_frame:000000000000AE27                 db  0Eh
.eh_frame:000000000000AE28                 db  18h
.eh_frame:000000000000AE29                 db  8Ch
.eh_frame:000000000000AE2A                 db    3
.eh_frame:000000000000AE2B                 db  46h ; F
.eh_frame:000000000000AE2C                 db  0Eh
.eh_frame:000000000000AE2D                 db  20h
.eh_frame:000000000000AE2E                 db  86h
.eh_frame:000000000000AE2F                 db    4
.eh_frame:000000000000AE30                 db  41h ; A
.eh_frame:000000000000AE31                 db  0Eh
.eh_frame:000000000000AE32                 db  28h ; (
.eh_frame:000000000000AE33                 db  83h
.eh_frame:000000000000AE34                 db    5
.eh_frame:000000000000AE35                 db  54h ; T
.eh_frame:000000000000AE36                 db  0Eh
.eh_frame:000000000000AE37                 db  30h ; 0
.eh_frame:000000000000AE38                 db    2
.eh_frame:000000000000AE39                 db  51h ; Q
.eh_frame:000000000000AE3A                 db  0Ah
.eh_frame:000000000000AE3B                 db  0Eh
.eh_frame:000000000000AE3C                 db  28h ; (
.eh_frame:000000000000AE3D                 db  44h ; D
.eh_frame:000000000000AE3E                 db  0Eh
.eh_frame:000000000000AE3F                 db  20h
.eh_frame:000000000000AE40                 db  41h ; A
.eh_frame:000000000000AE41                 db  0Eh
.eh_frame:000000000000AE42                 db  18h
.eh_frame:000000000000AE43                 db  42h ; B
.eh_frame:000000000000AE44                 db  0Eh
.eh_frame:000000000000AE45                 db  10h
.eh_frame:000000000000AE46                 db  42h ; B
.eh_frame:000000000000AE47                 db  0Eh
.eh_frame:000000000000AE48                 db    8
.eh_frame:000000000000AE49                 db  47h ; G
.eh_frame:000000000000AE4A                 db  0Bh
.eh_frame:000000000000AE4B                 db    2
.eh_frame:000000000000AE4C                 db  44h ; D
.eh_frame:000000000000AE4D                 db  0Ah
.eh_frame:000000000000AE4E                 db  0Eh
.eh_frame:000000000000AE4F                 db  28h ; (
.eh_frame:000000000000AE50                 db  44h ; D
.eh_frame:000000000000AE51                 db  0Eh
.eh_frame:000000000000AE52                 db  20h
.eh_frame:000000000000AE53                 db  41h ; A
.eh_frame:000000000000AE54                 db  0Eh
.eh_frame:000000000000AE55                 db  18h
.eh_frame:000000000000AE56                 db  42h ; B
.eh_frame:000000000000AE57                 db  0Eh
.eh_frame:000000000000AE58                 db  10h
.eh_frame:000000000000AE59                 db  42h ; B
.eh_frame:000000000000AE5A                 db  0Eh
.eh_frame:000000000000AE5B                 db    8
.eh_frame:000000000000AE5C                 db  43h ; C
.eh_frame:000000000000AE5D                 db  0Bh
.eh_frame:000000000000AE5E                 db    0
.eh_frame:000000000000AE5F                 db    0
.eh_frame:000000000000AE60                 db  28h ; (
.eh_frame:000000000000AE61                 db    0
.eh_frame:000000000000AE62                 db    0
.eh_frame:000000000000AE63                 db    0
.eh_frame:000000000000AE64                 db  2Ch ; ,
.eh_frame:000000000000AE65                 db    1
.eh_frame:000000000000AE66                 db    0
.eh_frame:000000000000AE67                 db    0
.eh_frame:000000000000AE68                 db  18h
.eh_frame:000000000000AE69                 db  86h
.eh_frame:000000000000AE6A                 db 0FFh
.eh_frame:000000000000AE6B                 db 0FFh
.eh_frame:000000000000AE6C                 db  7Ah ; z
.eh_frame:000000000000AE6D                 db    4
.eh_frame:000000000000AE6E                 db    0
.eh_frame:000000000000AE6F                 db    0
.eh_frame:000000000000AE70                 db    0
.eh_frame:000000000000AE71                 db  42h ; B
.eh_frame:000000000000AE72                 db  0Eh
.eh_frame:000000000000AE73                 db  10h
.eh_frame:000000000000AE74                 db  8Dh
.eh_frame:000000000000AE75                 db    2
.eh_frame:000000000000AE76                 db  42h ; B
.eh_frame:000000000000AE77                 db  0Eh
.eh_frame:000000000000AE78                 db  18h
.eh_frame:000000000000AE79                 db  8Ch
.eh_frame:000000000000AE7A                 db    3
.eh_frame:000000000000AE7B                 db  46h ; F
.eh_frame:000000000000AE7C                 db  0Eh
.eh_frame:000000000000AE7D                 db  20h
.eh_frame:000000000000AE7E                 db  86h
.eh_frame:000000000000AE7F                 db    4
.eh_frame:000000000000AE80                 db  41h ; A
.eh_frame:000000000000AE81                 db  0Eh
.eh_frame:000000000000AE82                 db  28h ; (
.eh_frame:000000000000AE83                 db  83h
.eh_frame:000000000000AE84                 db    5
.eh_frame:000000000000AE85                 db  49h ; I
.eh_frame:000000000000AE86                 db  0Eh
.eh_frame:000000000000AE87                 db 0B0h
.eh_frame:000000000000AE88                 db    1
.eh_frame:000000000000AE89                 db    0
.eh_frame:000000000000AE8A                 db    0
.eh_frame:000000000000AE8B                 db    0
.eh_frame:000000000000AE8C                 db  58h ; X
.eh_frame:000000000000AE8D                 db    0
.eh_frame:000000000000AE8E                 db    0
.eh_frame:000000000000AE8F                 db    0
.eh_frame:000000000000AE90                 db  58h ; X
.eh_frame:000000000000AE91                 db    1
.eh_frame:000000000000AE92                 db    0
.eh_frame:000000000000AE93                 db    0
.eh_frame:000000000000AE94                 db  1Ch
.eh_frame:000000000000AE95                 db  6Dh ; m
.eh_frame:000000000000AE96                 db 0FFh
.eh_frame:000000000000AE97                 db 0FFh
.eh_frame:000000000000AE98                 db  4Bh ; K
.eh_frame:000000000000AE99                 db  14h
.eh_frame:000000000000AE9A                 db    0
.eh_frame:000000000000AE9B                 db    0
.eh_frame:000000000000AE9C                 db    0
.eh_frame:000000000000AE9D                 db  42h ; B
.eh_frame:000000000000AE9E                 db  0Eh
.eh_frame:000000000000AE9F                 db  10h
.eh_frame:000000000000AEA0                 db  8Fh
.eh_frame:000000000000AEA1                 db    2
.eh_frame:000000000000AEA2                 db  42h ; B
.eh_frame:000000000000AEA3                 db  0Eh
.eh_frame:000000000000AEA4                 db  18h
.eh_frame:000000000000AEA5                 db  8Eh
.eh_frame:000000000000AEA6                 db    3
.eh_frame:000000000000AEA7                 db  45h ; E
.eh_frame:000000000000AEA8                 db  0Eh
.eh_frame:000000000000AEA9                 db  20h
.eh_frame:000000000000AEAA                 db  8Dh
.eh_frame:000000000000AEAB                 db    4
.eh_frame:000000000000AEAC                 db  42h ; B
.eh_frame:000000000000AEAD                 db  0Eh
.eh_frame:000000000000AEAE                 db  28h ; (
.eh_frame:000000000000AEAF                 db  8Ch
.eh_frame:000000000000AEB0                 db    5
.eh_frame:000000000000AEB1                 db  44h ; D
.eh_frame:000000000000AEB2                 db  0Eh
.eh_frame:000000000000AEB3                 db  30h ; 0
.eh_frame:000000000000AEB4                 db  86h
.eh_frame:000000000000AEB5                 db    6
.eh_frame:000000000000AEB6                 db  41h ; A
.eh_frame:000000000000AEB7                 db  0Eh
.eh_frame:000000000000AEB8                 db  38h ; 8
.eh_frame:000000000000AEB9                 db  83h
.eh_frame:000000000000AEBA                 db    7
.eh_frame:000000000000AEBB                 db  56h ; V
.eh_frame:000000000000AEBC                 db  0Eh
.eh_frame:000000000000AEBD                 db  80h
.eh_frame:000000000000AEBE                 db    3
.eh_frame:000000000000AEBF                 db    3
.eh_frame:000000000000AEC0                 db  51h ; Q
.eh_frame:000000000000AEC1                 db    1
.eh_frame:000000000000AEC2                 db  0Ah
.eh_frame:000000000000AEC3                 db  0Eh
.eh_frame:000000000000AEC4                 db  88h
.eh_frame:000000000000AEC5                 db    3
.eh_frame:000000000000AEC6                 db  50h ; P
.eh_frame:000000000000AEC7                 db  0Eh
.eh_frame:000000000000AEC8                 db  90h
.eh_frame:000000000000AEC9                 db    3
.eh_frame:000000000000AECA                 db  71h ; q
.eh_frame:000000000000AECB                 db  0Bh
.eh_frame:000000000000AECC                 db    3
.eh_frame:000000000000AECD                 db 0F2h
.eh_frame:000000000000AECE                 db    8
.eh_frame:000000000000AECF                 db  0Ah
.eh_frame:000000000000AED0                 db  0Eh
.eh_frame:000000000000AED1                 db  38h ; 8
.eh_frame:000000000000AED2                 db  41h ; A
.eh_frame:000000000000AED3                 db  0Eh
.eh_frame:000000000000AED4                 db  30h ; 0
.eh_frame:000000000000AED5                 db  41h ; A
.eh_frame:000000000000AED6                 db  0Eh
.eh_frame:000000000000AED7                 db  28h ; (
.eh_frame:000000000000AED8                 db  42h ; B
.eh_frame:000000000000AED9                 db  0Eh
.eh_frame:000000000000AEDA                 db  20h
.eh_frame:000000000000AEDB                 db  42h ; B
.eh_frame:000000000000AEDC                 db  0Eh
.eh_frame:000000000000AEDD                 db  18h
.eh_frame:000000000000AEDE                 db  42h ; B
.eh_frame:000000000000AEDF                 db  0Eh
.eh_frame:000000000000AEE0                 db  10h
.eh_frame:000000000000AEE1                 db  42h ; B
.eh_frame:000000000000AEE2                 db  0Eh
.eh_frame:000000000000AEE3                 db    8
.eh_frame:000000000000AEE4                 db  41h ; A
.eh_frame:000000000000AEE5                 db  0Bh
.eh_frame:000000000000AEE6                 db    0
.eh_frame:000000000000AEE7                 db    0
.eh_frame:000000000000AEE8                 db  4Ch ; L
.eh_frame:000000000000AEE9                 db    0
.eh_frame:000000000000AEEA                 db    0
.eh_frame:000000000000AEEB                 db    0
.eh_frame:000000000000AEEC                 db 0B4h
.eh_frame:000000000000AEED                 db    1
.eh_frame:000000000000AEEE                 db    0
.eh_frame:000000000000AEEF                 db    0
.eh_frame:000000000000AEF0                 db  10h
.eh_frame:000000000000AEF1                 db  8Ah
.eh_frame:000000000000AEF2                 db 0FFh
.eh_frame:000000000000AEF3                 db 0FFh
.eh_frame:000000000000AEF4                 db 0ECh
.eh_frame:000000000000AEF5                 db  16h
.eh_frame:000000000000AEF6                 db    0
.eh_frame:000000000000AEF7                 db    0
.eh_frame:000000000000AEF8                 db    0
.eh_frame:000000000000AEF9                 db  42h ; B
.eh_frame:000000000000AEFA                 db  0Eh
.eh_frame:000000000000AEFB                 db  10h
.eh_frame:000000000000AEFC                 db  8Fh
.eh_frame:000000000000AEFD                 db    2
.eh_frame:000000000000AEFE                 db  42h ; B
.eh_frame:000000000000AEFF                 db  0Eh
.eh_frame:000000000000AF00                 db  18h
.eh_frame:000000000000AF01                 db  8Eh
.eh_frame:000000000000AF02                 db    3
.eh_frame:000000000000AF03                 db  42h ; B
.eh_frame:000000000000AF04                 db  0Eh
.eh_frame:000000000000AF05                 db  20h
.eh_frame:000000000000AF06                 db  8Dh
.eh_frame:000000000000AF07                 db    4
.eh_frame:000000000000AF08                 db  42h ; B
.eh_frame:000000000000AF09                 db  0Eh
.eh_frame:000000000000AF0A                 db  28h ; (
.eh_frame:000000000000AF0B                 db  8Ch
.eh_frame:000000000000AF0C                 db    5
.eh_frame:000000000000AF0D                 db  41h ; A
.eh_frame:000000000000AF0E                 db  0Eh
.eh_frame:000000000000AF0F                 db  30h ; 0
.eh_frame:000000000000AF10                 db  86h
.eh_frame:000000000000AF11                 db    6
.eh_frame:000000000000AF12                 db  41h ; A
.eh_frame:000000000000AF13                 db  0Eh
.eh_frame:000000000000AF14                 db  38h ; 8
.eh_frame:000000000000AF15                 db  83h
.eh_frame:000000000000AF16                 db    7
.eh_frame:000000000000AF17                 db  47h ; G
.eh_frame:000000000000AF18                 db  0Eh
.eh_frame:000000000000AF19                 db  80h
.eh_frame:000000000000AF1A                 db    3
.eh_frame:000000000000AF1B                 db    3
.eh_frame:000000000000AF1C                 db 0CBh
.eh_frame:000000000000AF1D                 db  16h
.eh_frame:000000000000AF1E                 db  0Ah
.eh_frame:000000000000AF1F                 db  0Eh
.eh_frame:000000000000AF20                 db  38h ; 8
.eh_frame:000000000000AF21                 db  41h ; A
.eh_frame:000000000000AF22                 db  0Eh
.eh_frame:000000000000AF23                 db  30h ; 0
.eh_frame:000000000000AF24                 db  41h ; A
.eh_frame:000000000000AF25                 db  0Eh
.eh_frame:000000000000AF26                 db  28h ; (
.eh_frame:000000000000AF27                 db  42h ; B
.eh_frame:000000000000AF28                 db  0Eh
.eh_frame:000000000000AF29                 db  20h
.eh_frame:000000000000AF2A                 db  42h ; B
.eh_frame:000000000000AF2B                 db  0Eh
.eh_frame:000000000000AF2C                 db  18h
.eh_frame:000000000000AF2D                 db  42h ; B
.eh_frame:000000000000AF2E                 db  0Eh
.eh_frame:000000000000AF2F                 db  10h
.eh_frame:000000000000AF30                 db  42h ; B
.eh_frame:000000000000AF31                 db  0Eh
.eh_frame:000000000000AF32                 db    8
.eh_frame:000000000000AF33                 db  41h ; A
.eh_frame:000000000000AF34                 db  0Bh
.eh_frame:000000000000AF35                 db    0
.eh_frame:000000000000AF36                 db    0
.eh_frame:000000000000AF37                 db    0
.eh_frame:000000000000AF38                 db  48h ; H
.eh_frame:000000000000AF39                 db    0
.eh_frame:000000000000AF3A                 db    0
.eh_frame:000000000000AF3B                 db    0
.eh_frame:000000000000AF3C                 db    4
.eh_frame:000000000000AF3D                 db    2
.eh_frame:000000000000AF3E                 db    0
.eh_frame:000000000000AF3F                 db    0
.eh_frame:000000000000AF40                 db 0B0h
.eh_frame:000000000000AF41                 db 0A0h
.eh_frame:000000000000AF42                 db 0FFh
.eh_frame:000000000000AF43                 db 0FFh
.eh_frame:000000000000AF44                 db    9
.eh_frame:000000000000AF45                 db    1
.eh_frame:000000000000AF46                 db    0
.eh_frame:000000000000AF47                 db    0
.eh_frame:000000000000AF48                 db    0
.eh_frame:000000000000AF49                 db  42h ; B
.eh_frame:000000000000AF4A                 db  0Eh
.eh_frame:000000000000AF4B                 db  10h
.eh_frame:000000000000AF4C                 db  8Fh
.eh_frame:000000000000AF4D                 db    2
.eh_frame:000000000000AF4E                 db  42h ; B
.eh_frame:000000000000AF4F                 db  0Eh
.eh_frame:000000000000AF50                 db  18h
.eh_frame:000000000000AF51                 db  8Eh
.eh_frame:000000000000AF52                 db    3
.eh_frame:000000000000AF53                 db  42h ; B
.eh_frame:000000000000AF54                 db  0Eh
.eh_frame:000000000000AF55                 db  20h
.eh_frame:000000000000AF56                 db  8Dh
.eh_frame:000000000000AF57                 db    4
.eh_frame:000000000000AF58                 db  42h ; B
.eh_frame:000000000000AF59                 db  0Eh
.eh_frame:000000000000AF5A                 db  28h ; (
.eh_frame:000000000000AF5B                 db  8Ch
.eh_frame:000000000000AF5C                 db    5
.eh_frame:000000000000AF5D                 db  47h ; G
.eh_frame:000000000000AF5E                 db  0Eh
.eh_frame:000000000000AF5F                 db  30h ; 0
.eh_frame:000000000000AF60                 db  86h
.eh_frame:000000000000AF61                 db    6
.eh_frame:000000000000AF62                 db  41h ; A
.eh_frame:000000000000AF63                 db  0Eh
.eh_frame:000000000000AF64                 db  38h ; 8
.eh_frame:000000000000AF65                 db  83h
.eh_frame:000000000000AF66                 db    7
.eh_frame:000000000000AF67                 db  51h ; Q
.eh_frame:000000000000AF68                 db  0Eh
.eh_frame:000000000000AF69                 db  40h ; @
.eh_frame:000000000000AF6A                 db  68h ; h
.eh_frame:000000000000AF6B                 db  0Ah
.eh_frame:000000000000AF6C                 db  0Eh
.eh_frame:000000000000AF6D                 db  38h ; 8
.eh_frame:000000000000AF6E                 db  41h ; A
.eh_frame:000000000000AF6F                 db  0Eh
.eh_frame:000000000000AF70                 db  30h ; 0
.eh_frame:000000000000AF71                 db  41h ; A
.eh_frame:000000000000AF72                 db  0Eh
.eh_frame:000000000000AF73                 db  28h ; (
.eh_frame:000000000000AF74                 db  42h ; B
.eh_frame:000000000000AF75                 db  0Eh
.eh_frame:000000000000AF76                 db  20h
.eh_frame:000000000000AF77                 db  42h ; B
.eh_frame:000000000000AF78                 db  0Eh
.eh_frame:000000000000AF79                 db  18h
.eh_frame:000000000000AF7A                 db  42h ; B
.eh_frame:000000000000AF7B                 db  0Eh
.eh_frame:000000000000AF7C                 db  10h
.eh_frame:000000000000AF7D                 db  42h ; B
.eh_frame:000000000000AF7E                 db  0Eh
.eh_frame:000000000000AF7F                 db    8
.eh_frame:000000000000AF80                 db  45h ; E
.eh_frame:000000000000AF81                 db  0Bh
.eh_frame:000000000000AF82                 db    0
.eh_frame:000000000000AF83                 db    0
.eh_frame:000000000000AF84                 db  10h
.eh_frame:000000000000AF85                 db    0
.eh_frame:000000000000AF86                 db    0
.eh_frame:000000000000AF87                 db    0
.eh_frame:000000000000AF88                 db  50h ; P
.eh_frame:000000000000AF89                 db    2
.eh_frame:000000000000AF8A                 db    0
.eh_frame:000000000000AF8B                 db    0
.eh_frame:000000000000AF8C                 db  74h ; t
.eh_frame:000000000000AF8D                 db 0A1h
.eh_frame:000000000000AF8E                 db 0FFh
.eh_frame:000000000000AF8F                 db 0FFh
.eh_frame:000000000000AF90                 db 0CBh
.eh_frame:000000000000AF91                 db    0
.eh_frame:000000000000AF92                 db    0
.eh_frame:000000000000AF93                 db    0
.eh_frame:000000000000AF94                 db    0
.eh_frame:000000000000AF95                 db    0
.eh_frame:000000000000AF96                 db    0
.eh_frame:000000000000AF97                 db    0
.eh_frame:000000000000AF98                 db  18h
.eh_frame:000000000000AF99                 db    0
.eh_frame:000000000000AF9A                 db    0
.eh_frame:000000000000AF9B                 db    0
.eh_frame:000000000000AF9C                 db  64h ; d
.eh_frame:000000000000AF9D                 db    2
.eh_frame:000000000000AF9E                 db    0
.eh_frame:000000000000AF9F                 db    0
.eh_frame:000000000000AFA0                 db  30h ; 0
.eh_frame:000000000000AFA1                 db 0A2h
.eh_frame:000000000000AFA2                 db 0FFh
.eh_frame:000000000000AFA3                 db 0FFh
.eh_frame:000000000000AFA4                 db  8Ch
.eh_frame:000000000000AFA5                 db    0
.eh_frame:000000000000AFA6                 db    0
.eh_frame:000000000000AFA7                 db    0
.eh_frame:000000000000AFA8                 db    0
.eh_frame:000000000000AFA9                 db  44h ; D
.eh_frame:000000000000AFAA                 db  0Eh
.eh_frame:000000000000AFAB                 db  60h ; `
.eh_frame:000000000000AFAC                 db    2
.eh_frame:000000000000AFAD                 db  75h ; u
.eh_frame:000000000000AFAE                 db  0Ah
.eh_frame:000000000000AFAF                 db  0Eh
.eh_frame:000000000000AFB0                 db    8
.eh_frame:000000000000AFB1                 db  47h ; G
.eh_frame:000000000000AFB2                 db  0Bh
.eh_frame:000000000000AFB3                 db    0
.eh_frame:000000000000AFB4                 db  28h ; (
.eh_frame:000000000000AFB5                 db    0
.eh_frame:000000000000AFB6                 db    0
.eh_frame:000000000000AFB7                 db    0
.eh_frame:000000000000AFB8                 db  80h
.eh_frame:000000000000AFB9                 db    2
.eh_frame:000000000000AFBA                 db    0
.eh_frame:000000000000AFBB                 db    0
.eh_frame:000000000000AFBC                 db 0A4h
.eh_frame:000000000000AFBD                 db 0A2h
.eh_frame:000000000000AFBE                 db 0FFh
.eh_frame:000000000000AFBF                 db 0FFh
.eh_frame:000000000000AFC0                 db  0Ch
.eh_frame:000000000000AFC1                 db    1
.eh_frame:000000000000AFC2                 db    0
.eh_frame:000000000000AFC3                 db    0
.eh_frame:000000000000AFC4                 db    0
.eh_frame:000000000000AFC5                 db  41h ; A
.eh_frame:000000000000AFC6                 db  0Eh
.eh_frame:000000000000AFC7                 db  10h
.eh_frame:000000000000AFC8                 db  86h
.eh_frame:000000000000AFC9                 db    2
.eh_frame:000000000000AFCA                 db  41h ; A
.eh_frame:000000000000AFCB                 db  0Eh
.eh_frame:000000000000AFCC                 db  18h
.eh_frame:000000000000AFCD                 db  83h
.eh_frame:000000000000AFCE                 db    3
.eh_frame:000000000000AFCF                 db  47h ; G
.eh_frame:000000000000AFD0                 db  0Eh
.eh_frame:000000000000AFD1                 db 0F0h
.eh_frame:000000000000AFD2                 db    1
.eh_frame:000000000000AFD3                 db    2
.eh_frame:000000000000AFD4                 db 0EFh
.eh_frame:000000000000AFD5                 db  0Ah
.eh_frame:000000000000AFD6                 db  0Eh
.eh_frame:000000000000AFD7                 db  18h
.eh_frame:000000000000AFD8                 db  41h ; A
.eh_frame:000000000000AFD9                 db  0Eh
.eh_frame:000000000000AFDA                 db  10h
.eh_frame:000000000000AFDB                 db  41h ; A
.eh_frame:000000000000AFDC                 db  0Eh
.eh_frame:000000000000AFDD                 db    8
.eh_frame:000000000000AFDE                 db  46h ; F
.eh_frame:000000000000AFDF                 db  0Bh
.eh_frame:000000000000AFE0                 db  14h
.eh_frame:000000000000AFE1                 db    0
.eh_frame:000000000000AFE2                 db    0
.eh_frame:000000000000AFE3                 db    0
.eh_frame:000000000000AFE4                 db 0ACh
.eh_frame:000000000000AFE5                 db    2
.eh_frame:000000000000AFE6                 db    0
.eh_frame:000000000000AFE7                 db    0
.eh_frame:000000000000AFE8                 db  88h
.eh_frame:000000000000AFE9                 db 0A3h
.eh_frame:000000000000AFEA                 db 0FFh
.eh_frame:000000000000AFEB                 db 0FFh
.eh_frame:000000000000AFEC                 db  1Bh
.eh_frame:000000000000AFED                 db    0
.eh_frame:000000000000AFEE                 db    0
.eh_frame:000000000000AFEF                 db    0
.eh_frame:000000000000AFF0                 db    0
.eh_frame:000000000000AFF1                 db  49h ; I
.eh_frame:000000000000AFF2                 db  0Eh
.eh_frame:000000000000AFF3                 db  10h
.eh_frame:000000000000AFF4                 db  4Bh ; K
.eh_frame:000000000000AFF5                 db  0Eh
.eh_frame:000000000000AFF6                 db    8
.eh_frame:000000000000AFF7                 db    0
.eh_frame:000000000000AFF8                 db  30h ; 0
.eh_frame:000000000000AFF9                 db    0
.eh_frame:000000000000AFFA                 db    0
.eh_frame:000000000000AFFB                 db    0
.eh_frame:000000000000AFFC                 db 0C4h
.eh_frame:000000000000AFFD                 db    2
.eh_frame:000000000000AFFE                 db    0
.eh_frame:000000000000AFFF                 db    0
.eh_frame:000000000000B000                 db  90h
.eh_frame:000000000000B001                 db 0A3h
.eh_frame:000000000000B002                 db 0FFh
.eh_frame:000000000000B003                 db 0FFh
.eh_frame:000000000000B004                 db  71h ; q
.eh_frame:000000000000B005                 db    1
.eh_frame:000000000000B006                 db    0
.eh_frame:000000000000B007                 db    0
.eh_frame:000000000000B008                 db    0
.eh_frame:000000000000B009                 db  42h ; B
.eh_frame:000000000000B00A                 db  0Eh
.eh_frame:000000000000B00B                 db  10h
.eh_frame:000000000000B00C                 db  8Ch
.eh_frame:000000000000B00D                 db    2
.eh_frame:000000000000B00E                 db  41h ; A
.eh_frame:000000000000B00F                 db  0Eh
.eh_frame:000000000000B010                 db  18h
.eh_frame:000000000000B011                 db  86h
.eh_frame:000000000000B012                 db    3
.eh_frame:000000000000B013                 db  41h ; A
.eh_frame:000000000000B014                 db  0Eh
.eh_frame:000000000000B015                 db  20h
.eh_frame:000000000000B016                 db  83h
.eh_frame:000000000000B017                 db    4
.eh_frame:000000000000B018                 db  48h ; H
.eh_frame:000000000000B019                 db  0Eh
.eh_frame:000000000000B01A                 db  70h ; p
.eh_frame:000000000000B01B                 db    3
.eh_frame:000000000000B01C                 db  43h ; C
.eh_frame:000000000000B01D                 db    1
.eh_frame:000000000000B01E                 db  0Ah
.eh_frame:000000000000B01F                 db  0Eh
.eh_frame:000000000000B020                 db  20h
.eh_frame:000000000000B021                 db  41h ; A
.eh_frame:000000000000B022                 db  0Eh
.eh_frame:000000000000B023                 db  18h
.eh_frame:000000000000B024                 db  41h ; A
.eh_frame:000000000000B025                 db  0Eh
.eh_frame:000000000000B026                 db  10h
.eh_frame:000000000000B027                 db  42h ; B
.eh_frame:000000000000B028                 db  0Eh
.eh_frame:000000000000B029                 db    8
.eh_frame:000000000000B02A                 db  45h ; E
.eh_frame:000000000000B02B                 db  0Bh
.eh_frame:000000000000B02C                 db  40h ; @
.eh_frame:000000000000B02D                 db    0
.eh_frame:000000000000B02E                 db    0
.eh_frame:000000000000B02F                 db    0
.eh_frame:000000000000B030                 db 0F8h
.eh_frame:000000000000B031                 db    2
.eh_frame:000000000000B032                 db    0
.eh_frame:000000000000B033                 db    0
.eh_frame:000000000000B034                 db 0DCh
.eh_frame:000000000000B035                 db 0A4h
.eh_frame:000000000000B036                 db 0FFh
.eh_frame:000000000000B037                 db 0FFh
.eh_frame:000000000000B038                 db 0F5h
.eh_frame:000000000000B039                 db    0
.eh_frame:000000000000B03A                 db    0
.eh_frame:000000000000B03B                 db    0
.eh_frame:000000000000B03C                 db    0
.eh_frame:000000000000B03D                 db  42h ; B
.eh_frame:000000000000B03E                 db  0Eh
.eh_frame:000000000000B03F                 db  10h
.eh_frame:000000000000B040                 db  8Eh
.eh_frame:000000000000B041                 db    2
.eh_frame:000000000000B042                 db  42h ; B
.eh_frame:000000000000B043                 db  0Eh
.eh_frame:000000000000B044                 db  18h
.eh_frame:000000000000B045                 db  8Dh
.eh_frame:000000000000B046                 db    3
.eh_frame:000000000000B047                 db  45h ; E
.eh_frame:000000000000B048                 db  0Eh
.eh_frame:000000000000B049                 db  20h
.eh_frame:000000000000B04A                 db  8Ch
.eh_frame:000000000000B04B                 db    4
.eh_frame:000000000000B04C                 db  41h ; A
.eh_frame:000000000000B04D                 db  0Eh
.eh_frame:000000000000B04E                 db  28h ; (
.eh_frame:000000000000B04F                 db  86h
.eh_frame:000000000000B050                 db    5
.eh_frame:000000000000B051                 db  41h ; A
.eh_frame:000000000000B052                 db  0Eh
.eh_frame:000000000000B053                 db  30h ; 0
.eh_frame:000000000000B054                 db  83h
.eh_frame:000000000000B055                 db    6
.eh_frame:000000000000B056                 db  47h ; G
.eh_frame:000000000000B057                 db  0Eh
.eh_frame:000000000000B058                 db 0B0h
.eh_frame:000000000000B059                 db    2
.eh_frame:000000000000B05A                 db    2
.eh_frame:000000000000B05B                 db  99h
.eh_frame:000000000000B05C                 db  0Ah
.eh_frame:000000000000B05D                 db  0Eh
.eh_frame:000000000000B05E                 db  30h ; 0
.eh_frame:000000000000B05F                 db  41h ; A
.eh_frame:000000000000B060                 db  0Eh
.eh_frame:000000000000B061                 db  28h ; (
.eh_frame:000000000000B062                 db  41h ; A
.eh_frame:000000000000B063                 db  0Eh
.eh_frame:000000000000B064                 db  20h
.eh_frame:000000000000B065                 db  42h ; B
.eh_frame:000000000000B066                 db  0Eh
.eh_frame:000000000000B067                 db  18h
.eh_frame:000000000000B068                 db  42h ; B
.eh_frame:000000000000B069                 db  0Eh
.eh_frame:000000000000B06A                 db  10h
.eh_frame:000000000000B06B                 db  42h ; B
.eh_frame:000000000000B06C                 db  0Eh
.eh_frame:000000000000B06D                 db    8
.eh_frame:000000000000B06E                 db  45h ; E
.eh_frame:000000000000B06F                 db  0Bh
.eh_frame:000000000000B070                 db  14h
.eh_frame:000000000000B071                 db    0
.eh_frame:000000000000B072                 db    0
.eh_frame:000000000000B073                 db    0
.eh_frame:000000000000B074                 db  3Ch ; <
.eh_frame:000000000000B075                 db    3
.eh_frame:000000000000B076                 db    0
.eh_frame:000000000000B077                 db    0
.eh_frame:000000000000B078                 db  98h
.eh_frame:000000000000B079                 db 0A5h
.eh_frame:000000000000B07A                 db 0FFh
.eh_frame:000000000000B07B                 db 0FFh
.eh_frame:000000000000B07C                 db    5
.eh_frame:000000000000B07D                 db    0
.eh_frame:000000000000B07E                 db    0
.eh_frame:000000000000B07F                 db    0
.eh_frame:000000000000B080                 db    0
.eh_frame:000000000000B081                 db    0
.eh_frame:000000000000B082                 db    0
.eh_frame:000000000000B083                 db    0
.eh_frame:000000000000B084                 db    0
.eh_frame:000000000000B085                 db    0
.eh_frame:000000000000B086                 db    0
.eh_frame:000000000000B087                 db    0
.eh_frame:000000000000B088                 db  4Ch ; L
.eh_frame:000000000000B089                 db    0
.eh_frame:000000000000B08A                 db    0
.eh_frame:000000000000B08B                 db    0
.eh_frame:000000000000B08C                 db  54h ; T
.eh_frame:000000000000B08D                 db    3
.eh_frame:000000000000B08E                 db    0
.eh_frame:000000000000B08F                 db    0
.eh_frame:000000000000B090                 db  90h
.eh_frame:000000000000B091                 db 0A5h
.eh_frame:000000000000B092                 db 0FFh
.eh_frame:000000000000B093                 db 0FFh
.eh_frame:000000000000B094                 db  24h ; $
.eh_frame:000000000000B095                 db    1
.eh_frame:000000000000B096                 db    0
.eh_frame:000000000000B097                 db    0
.eh_frame:000000000000B098                 db    0
.eh_frame:000000000000B099                 db  42h ; B
.eh_frame:000000000000B09A                 db  0Eh
.eh_frame:000000000000B09B                 db  10h
.eh_frame:000000000000B09C                 db  8Fh
.eh_frame:000000000000B09D                 db    2
.eh_frame:000000000000B09E                 db  42h ; B
.eh_frame:000000000000B09F                 db  0Eh
.eh_frame:000000000000B0A0                 db  18h
.eh_frame:000000000000B0A1                 db  8Eh
.eh_frame:000000000000B0A2                 db    3
.eh_frame:000000000000B0A3                 db  45h ; E
.eh_frame:000000000000B0A4                 db  0Eh
.eh_frame:000000000000B0A5                 db  20h
.eh_frame:000000000000B0A6                 db  8Dh
.eh_frame:000000000000B0A7                 db    4
.eh_frame:000000000000B0A8                 db  42h ; B
.eh_frame:000000000000B0A9                 db  0Eh
.eh_frame:000000000000B0AA                 db  28h ; (
.eh_frame:000000000000B0AB                 db  8Ch
.eh_frame:000000000000B0AC                 db    5
.eh_frame:000000000000B0AD                 db  41h ; A
.eh_frame:000000000000B0AE                 db  0Eh
.eh_frame:000000000000B0AF                 db  30h ; 0
.eh_frame:000000000000B0B0                 db  86h
.eh_frame:000000000000B0B1                 db    6
.eh_frame:000000000000B0B2                 db  41h ; A
.eh_frame:000000000000B0B3                 db  0Eh
.eh_frame:000000000000B0B4                 db  38h ; 8
.eh_frame:000000000000B0B5                 db  83h
.eh_frame:000000000000B0B6                 db    7
.eh_frame:000000000000B0B7                 db  4Fh ; O
.eh_frame:000000000000B0B8                 db  0Eh
.eh_frame:000000000000B0B9                 db 0D0h
.eh_frame:000000000000B0BA                 db    2
.eh_frame:000000000000B0BB                 db    2
.eh_frame:000000000000B0BC                 db 0DDh
.eh_frame:000000000000B0BD                 db  0Ah
.eh_frame:000000000000B0BE                 db  0Eh
.eh_frame:000000000000B0BF                 db  38h ; 8
.eh_frame:000000000000B0C0                 db  41h ; A
.eh_frame:000000000000B0C1                 db  0Eh
.eh_frame:000000000000B0C2                 db  30h ; 0
.eh_frame:000000000000B0C3                 db  41h ; A
.eh_frame:000000000000B0C4                 db  0Eh
.eh_frame:000000000000B0C5                 db  28h ; (
.eh_frame:000000000000B0C6                 db  42h ; B
.eh_frame:000000000000B0C7                 db  0Eh
.eh_frame:000000000000B0C8                 db  20h
.eh_frame:000000000000B0C9                 db  42h ; B
.eh_frame:000000000000B0CA                 db  0Eh
.eh_frame:000000000000B0CB                 db  18h
.eh_frame:000000000000B0CC                 db  42h ; B
.eh_frame:000000000000B0CD                 db  0Eh
.eh_frame:000000000000B0CE                 db  10h
.eh_frame:000000000000B0CF                 db  42h ; B
.eh_frame:000000000000B0D0                 db  0Eh
.eh_frame:000000000000B0D1                 db    8
.eh_frame:000000000000B0D2                 db  45h ; E
.eh_frame:000000000000B0D3                 db  0Bh
.eh_frame:000000000000B0D4                 db    0
.eh_frame:000000000000B0D5                 db    0
.eh_frame:000000000000B0D6                 db    0
.eh_frame:000000000000B0D7                 db    0
.eh_frame:000000000000B0D8                 db  10h
.eh_frame:000000000000B0D9                 db    0
.eh_frame:000000000000B0DA                 db    0
.eh_frame:000000000000B0DB                 db    0
.eh_frame:000000000000B0DC                 db 0A4h
.eh_frame:000000000000B0DD                 db    3
.eh_frame:000000000000B0DE                 db    0
.eh_frame:000000000000B0DF                 db    0
.eh_frame:000000000000B0E0                 db  70h ; p
.eh_frame:000000000000B0E1                 db 0A6h
.eh_frame:000000000000B0E2                 db 0FFh
.eh_frame:000000000000B0E3                 db 0FFh
.eh_frame:000000000000B0E4                 db  0Ah
.eh_frame:000000000000B0E5                 db    0
.eh_frame:000000000000B0E6                 db    0
.eh_frame:000000000000B0E7                 db    0
.eh_frame:000000000000B0E8                 db    0
.eh_frame:000000000000B0E9                 db    0
.eh_frame:000000000000B0EA                 db    0
.eh_frame:000000000000B0EB                 db    0
.eh_frame:000000000000B0EC                 db  48h ; H
.eh_frame:000000000000B0ED                 db    0
.eh_frame:000000000000B0EE                 db    0
.eh_frame:000000000000B0EF                 db    0
.eh_frame:000000000000B0F0                 db 0B8h
.eh_frame:000000000000B0F1                 db    3
.eh_frame:000000000000B0F2                 db    0
.eh_frame:000000000000B0F3                 db    0
.eh_frame:000000000000B0F4                 db  6Ch ; l
.eh_frame:000000000000B0F5                 db 0A6h
.eh_frame:000000000000B0F6                 db 0FFh
.eh_frame:000000000000B0F7                 db 0FFh
.eh_frame:000000000000B0F8                 db  16h
.eh_frame:000000000000B0F9                 db    1
.eh_frame:000000000000B0FA                 db    0
.eh_frame:000000000000B0FB                 db    0
.eh_frame:000000000000B0FC                 db    0
.eh_frame:000000000000B0FD                 db  42h ; B
.eh_frame:000000000000B0FE                 db  0Eh
.eh_frame:000000000000B0FF                 db  10h
.eh_frame:000000000000B100                 db  8Fh
.eh_frame:000000000000B101                 db    2
.eh_frame:000000000000B102                 db  42h ; B
.eh_frame:000000000000B103                 db  0Eh
.eh_frame:000000000000B104                 db  18h
.eh_frame:000000000000B105                 db  8Eh
.eh_frame:000000000000B106                 db    3
.eh_frame:000000000000B107                 db  45h ; E
.eh_frame:000000000000B108                 db  0Eh
.eh_frame:000000000000B109                 db  20h
.eh_frame:000000000000B10A                 db  8Dh
.eh_frame:000000000000B10B                 db    4
.eh_frame:000000000000B10C                 db  42h ; B
.eh_frame:000000000000B10D                 db  0Eh
.eh_frame:000000000000B10E                 db  28h ; (
.eh_frame:000000000000B10F                 db  8Ch
.eh_frame:000000000000B110                 db    5
.eh_frame:000000000000B111                 db  44h ; D
.eh_frame:000000000000B112                 db  0Eh
.eh_frame:000000000000B113                 db  30h ; 0
.eh_frame:000000000000B114                 db  86h
.eh_frame:000000000000B115                 db    6
.eh_frame:000000000000B116                 db  41h ; A
.eh_frame:000000000000B117                 db  0Eh
.eh_frame:000000000000B118                 db  38h ; 8
.eh_frame:000000000000B119                 db  83h
.eh_frame:000000000000B11A                 db    7
.eh_frame:000000000000B11B                 db  47h ; G
.eh_frame:000000000000B11C                 db  0Eh
.eh_frame:000000000000B11D                 db  60h ; `
.eh_frame:000000000000B11E                 db    2
.eh_frame:000000000000B11F                 db 0DEh
.eh_frame:000000000000B120                 db  0Ah
.eh_frame:000000000000B121                 db  0Eh
.eh_frame:000000000000B122                 db  38h ; 8
.eh_frame:000000000000B123                 db  41h ; A
.eh_frame:000000000000B124                 db  0Eh
.eh_frame:000000000000B125                 db  30h ; 0
.eh_frame:000000000000B126                 db  41h ; A
.eh_frame:000000000000B127                 db  0Eh
.eh_frame:000000000000B128                 db  28h ; (
.eh_frame:000000000000B129                 db  42h ; B
.eh_frame:000000000000B12A                 db  0Eh
.eh_frame:000000000000B12B                 db  20h
.eh_frame:000000000000B12C                 db  42h ; B
.eh_frame:000000000000B12D                 db  0Eh
.eh_frame:000000000000B12E                 db  18h
.eh_frame:000000000000B12F                 db  42h ; B
.eh_frame:000000000000B130                 db  0Eh
.eh_frame:000000000000B131                 db  10h
.eh_frame:000000000000B132                 db  42h ; B
.eh_frame:000000000000B133                 db  0Eh
.eh_frame:000000000000B134                 db    8
.eh_frame:000000000000B135                 db  41h ; A
.eh_frame:000000000000B136                 db  0Bh
.eh_frame:000000000000B137                 db    0
.eh_frame:000000000000B138                 db  28h ; (
.eh_frame:000000000000B139                 db    0
.eh_frame:000000000000B13A                 db    0
.eh_frame:000000000000B13B                 db    0
.eh_frame:000000000000B13C                 db    4
.eh_frame:000000000000B13D                 db    4
.eh_frame:000000000000B13E                 db    0
.eh_frame:000000000000B13F                 db    0
.eh_frame:000000000000B140                 db  40h ; @
.eh_frame:000000000000B141                 db 0A7h
.eh_frame:000000000000B142                 db 0FFh
.eh_frame:000000000000B143                 db 0FFh
.eh_frame:000000000000B144                 db  73h ; s
.eh_frame:000000000000B145                 db    0
.eh_frame:000000000000B146                 db    0
.eh_frame:000000000000B147                 db    0
.eh_frame:000000000000B148                 db    0
.eh_frame:000000000000B149                 db  46h ; F
.eh_frame:000000000000B14A                 db  0Eh
.eh_frame:000000000000B14B                 db  10h
.eh_frame:000000000000B14C                 db  8Ch
.eh_frame:000000000000B14D                 db    2
.eh_frame:000000000000B14E                 db  46h ; F
.eh_frame:000000000000B14F                 db  0Eh
.eh_frame:000000000000B150                 db  18h
.eh_frame:000000000000B151                 db  86h
.eh_frame:000000000000B152                 db    3
.eh_frame:000000000000B153                 db  44h ; D
.eh_frame:000000000000B154                 db  0Eh
.eh_frame:000000000000B155                 db  20h
.eh_frame:000000000000B156                 db  83h
.eh_frame:000000000000B157                 db    4
.eh_frame:000000000000B158                 db  7Fh ; 
.eh_frame:000000000000B159                 db  0Ah
.eh_frame:000000000000B15A                 db  0Eh
.eh_frame:000000000000B15B                 db  18h
.eh_frame:000000000000B15C                 db  41h ; A
.eh_frame:000000000000B15D                 db  0Eh
.eh_frame:000000000000B15E                 db  10h
.eh_frame:000000000000B15F                 db  42h ; B
.eh_frame:000000000000B160                 db  0Eh
.eh_frame:000000000000B161                 db    8
.eh_frame:000000000000B162                 db  4Eh ; N
.eh_frame:000000000000B163                 db  0Bh
.eh_frame:000000000000B164                 db  5Ch ; \
.eh_frame:000000000000B165                 db    0
.eh_frame:000000000000B166                 db    0
.eh_frame:000000000000B167                 db    0
.eh_frame:000000000000B168                 db  30h ; 0
.eh_frame:000000000000B169                 db    4
.eh_frame:000000000000B16A                 db    0
.eh_frame:000000000000B16B                 db    0
.eh_frame:000000000000B16C                 db  94h
.eh_frame:000000000000B16D                 db 0A7h
.eh_frame:000000000000B16E                 db 0FFh
.eh_frame:000000000000B16F                 db 0FFh
.eh_frame:000000000000B170                 db  20h
.eh_frame:000000000000B171                 db    1
.eh_frame:000000000000B172                 db    0
.eh_frame:000000000000B173                 db    0
.eh_frame:000000000000B174                 db    0
.eh_frame:000000000000B175                 db  42h ; B
.eh_frame:000000000000B176                 db  0Eh
.eh_frame:000000000000B177                 db  10h
.eh_frame:000000000000B178                 db  8Fh
.eh_frame:000000000000B179                 db    2
.eh_frame:000000000000B17A                 db  42h ; B
.eh_frame:000000000000B17B                 db  0Eh
.eh_frame:000000000000B17C                 db  18h
.eh_frame:000000000000B17D                 db  8Eh
.eh_frame:000000000000B17E                 db    3
.eh_frame:000000000000B17F                 db  45h ; E
.eh_frame:000000000000B180                 db  0Eh
.eh_frame:000000000000B181                 db  20h
.eh_frame:000000000000B182                 db  8Dh
.eh_frame:000000000000B183                 db    4
.eh_frame:000000000000B184                 db  42h ; B
.eh_frame:000000000000B185                 db  0Eh
.eh_frame:000000000000B186                 db  28h ; (
.eh_frame:000000000000B187                 db  8Ch
.eh_frame:000000000000B188                 db    5
.eh_frame:000000000000B189                 db  43h ; C
.eh_frame:000000000000B18A                 db  0Eh
.eh_frame:000000000000B18B                 db  30h ; 0
.eh_frame:000000000000B18C                 db  86h
.eh_frame:000000000000B18D                 db    6
.eh_frame:000000000000B18E                 db  41h ; A
.eh_frame:000000000000B18F                 db  0Eh
.eh_frame:000000000000B190                 db  38h ; 8
.eh_frame:000000000000B191                 db  83h
.eh_frame:000000000000B192                 db    7
.eh_frame:000000000000B193                 db  56h ; V
.eh_frame:000000000000B194                 db  0Eh
.eh_frame:000000000000B195                 db  40h ; @
.eh_frame:000000000000B196                 db    2
.eh_frame:000000000000B197                 db 0D3h
.eh_frame:000000000000B198                 db  0Ah
.eh_frame:000000000000B199                 db  0Eh
.eh_frame:000000000000B19A                 db  38h ; 8
.eh_frame:000000000000B19B                 db  41h ; A
.eh_frame:000000000000B19C                 db  0Eh
.eh_frame:000000000000B19D                 db  30h ; 0
.eh_frame:000000000000B19E                 db  41h ; A
.eh_frame:000000000000B19F                 db  0Eh
.eh_frame:000000000000B1A0                 db  28h ; (
.eh_frame:000000000000B1A1                 db  42h ; B
.eh_frame:000000000000B1A2                 db  0Eh
.eh_frame:000000000000B1A3                 db  20h
.eh_frame:000000000000B1A4                 db  42h ; B
.eh_frame:000000000000B1A5                 db  0Eh
.eh_frame:000000000000B1A6                 db  18h
.eh_frame:000000000000B1A7                 db  42h ; B
.eh_frame:000000000000B1A8                 db  0Eh
.eh_frame:000000000000B1A9                 db  10h
.eh_frame:000000000000B1AA                 db  42h ; B
.eh_frame:000000000000B1AB                 db  0Eh
.eh_frame:000000000000B1AC                 db    8
.eh_frame:000000000000B1AD                 db  46h ; F
.eh_frame:000000000000B1AE                 db  0Bh
.eh_frame:000000000000B1AF                 db  44h ; D
.eh_frame:000000000000B1B0                 db  0Eh
.eh_frame:000000000000B1B1                 db  38h ; 8
.eh_frame:000000000000B1B2                 db  46h ; F
.eh_frame:000000000000B1B3                 db  0Eh
.eh_frame:000000000000B1B4                 db  30h ; 0
.eh_frame:000000000000B1B5                 db  41h ; A
.eh_frame:000000000000B1B6                 db  0Eh
.eh_frame:000000000000B1B7                 db  28h ; (
.eh_frame:000000000000B1B8                 db  42h ; B
.eh_frame:000000000000B1B9                 db  0Eh
.eh_frame:000000000000B1BA                 db  20h
.eh_frame:000000000000B1BB                 db  42h ; B
.eh_frame:000000000000B1BC                 db  0Eh
.eh_frame:000000000000B1BD                 db  18h
.eh_frame:000000000000B1BE                 db  42h ; B
.eh_frame:000000000000B1BF                 db  0Eh
.eh_frame:000000000000B1C0                 db  10h
.eh_frame:000000000000B1C1                 db  42h ; B
.eh_frame:000000000000B1C2                 db  0Eh
.eh_frame:000000000000B1C3                 db    8
.eh_frame:000000000000B1C4                 db  48h ; H
.eh_frame:000000000000B1C5                 db    0
.eh_frame:000000000000B1C6                 db    0
.eh_frame:000000000000B1C7                 db    0
.eh_frame:000000000000B1C8                 db  90h
.eh_frame:000000000000B1C9                 db    4
.eh_frame:000000000000B1CA                 db    0
.eh_frame:000000000000B1CB                 db    0
.eh_frame:000000000000B1CC                 db  54h ; T
.eh_frame:000000000000B1CD                 db 0A8h
.eh_frame:000000000000B1CE                 db 0FFh
.eh_frame:000000000000B1CF                 db 0FFh
.eh_frame:000000000000B1D0                 db  6Dh ; m
.eh_frame:000000000000B1D1                 db    0
.eh_frame:000000000000B1D2                 db    0
.eh_frame:000000000000B1D3                 db    0
.eh_frame:000000000000B1D4                 db    0
.eh_frame:000000000000B1D5                 db  42h ; B
.eh_frame:000000000000B1D6                 db  0Eh
.eh_frame:000000000000B1D7                 db  10h
.eh_frame:000000000000B1D8                 db  8Fh
.eh_frame:000000000000B1D9                 db    2
.eh_frame:000000000000B1DA                 db  42h ; B
.eh_frame:000000000000B1DB                 db  0Eh
.eh_frame:000000000000B1DC                 db  18h
.eh_frame:000000000000B1DD                 db  8Eh
.eh_frame:000000000000B1DE                 db    3
.eh_frame:000000000000B1DF                 db  45h ; E
.eh_frame:000000000000B1E0                 db  0Eh
.eh_frame:000000000000B1E1                 db  20h
.eh_frame:000000000000B1E2                 db  8Dh
.eh_frame:000000000000B1E3                 db    4
.eh_frame:000000000000B1E4                 db  42h ; B
.eh_frame:000000000000B1E5                 db  0Eh
.eh_frame:000000000000B1E6                 db  28h ; (
.eh_frame:000000000000B1E7                 db  8Ch
.eh_frame:000000000000B1E8                 db    5
.eh_frame:000000000000B1E9                 db  44h ; D
.eh_frame:000000000000B1EA                 db  0Eh
.eh_frame:000000000000B1EB                 db  30h ; 0
.eh_frame:000000000000B1EC                 db  86h
.eh_frame:000000000000B1ED                 db    6
.eh_frame:000000000000B1EE                 db  41h ; A
.eh_frame:000000000000B1EF                 db  0Eh
.eh_frame:000000000000B1F0                 db  38h ; 8
.eh_frame:000000000000B1F1                 db  83h
.eh_frame:000000000000B1F2                 db    7
.eh_frame:000000000000B1F3                 db  50h ; P
.eh_frame:000000000000B1F4                 db  0Eh
.eh_frame:000000000000B1F5                 db  40h ; @
.eh_frame:000000000000B1F6                 db  5Ah ; Z
.eh_frame:000000000000B1F7                 db  0Ah
.eh_frame:000000000000B1F8                 db  0Eh
.eh_frame:000000000000B1F9                 db  38h ; 8
.eh_frame:000000000000B1FA                 db  41h ; A
.eh_frame:000000000000B1FB                 db  0Eh
.eh_frame:000000000000B1FC                 db  30h ; 0
.eh_frame:000000000000B1FD                 db  41h ; A
.eh_frame:000000000000B1FE                 db  0Eh
.eh_frame:000000000000B1FF                 db  28h ; (
.eh_frame:000000000000B200                 db  42h ; B
.eh_frame:000000000000B201                 db  0Eh
.eh_frame:000000000000B202                 db  20h
.eh_frame:000000000000B203                 db  42h ; B
.eh_frame:000000000000B204                 db  0Eh
.eh_frame:000000000000B205                 db  18h
.eh_frame:000000000000B206                 db  42h ; B
.eh_frame:000000000000B207                 db  0Eh
.eh_frame:000000000000B208                 db  10h
.eh_frame:000000000000B209                 db  42h ; B
.eh_frame:000000000000B20A                 db  0Eh
.eh_frame:000000000000B20B                 db    8
.eh_frame:000000000000B20C                 db  41h ; A
.eh_frame:000000000000B20D                 db  0Bh
.eh_frame:000000000000B20E                 db    0
.eh_frame:000000000000B20F                 db    0
.eh_frame:000000000000B210                 db  3Ch ; <
.eh_frame:000000000000B211                 db    0
.eh_frame:000000000000B212                 db    0
.eh_frame:000000000000B213                 db    0
.eh_frame:000000000000B214                 db 0DCh
.eh_frame:000000000000B215                 db    4
.eh_frame:000000000000B216                 db    0
.eh_frame:000000000000B217                 db    0
.eh_frame:000000000000B218                 db  78h ; x
.eh_frame:000000000000B219                 db 0A8h
.eh_frame:000000000000B21A                 db 0FFh
.eh_frame:000000000000B21B                 db 0FFh
.eh_frame:000000000000B21C                 db  4Dh ; M
.eh_frame:000000000000B21D                 db    0
.eh_frame:000000000000B21E                 db    0
.eh_frame:000000000000B21F                 db    0
.eh_frame:000000000000B220                 db    0
.eh_frame:000000000000B221                 db  42h ; B
.eh_frame:000000000000B222                 db  0Eh
.eh_frame:000000000000B223                 db  10h
.eh_frame:000000000000B224                 db  8Eh
.eh_frame:000000000000B225                 db    2
.eh_frame:000000000000B226                 db  42h ; B
.eh_frame:000000000000B227                 db  0Eh
.eh_frame:000000000000B228                 db  18h
.eh_frame:000000000000B229                 db  8Dh
.eh_frame:000000000000B22A                 db    3
.eh_frame:000000000000B22B                 db  42h ; B
.eh_frame:000000000000B22C                 db  0Eh
.eh_frame:000000000000B22D                 db  20h
.eh_frame:000000000000B22E                 db  8Ch
.eh_frame:000000000000B22F                 db    4
.eh_frame:000000000000B230                 db  41h ; A
.eh_frame:000000000000B231                 db  0Eh
.eh_frame:000000000000B232                 db  28h ; (
.eh_frame:000000000000B233                 db  86h
.eh_frame:000000000000B234                 db    5
.eh_frame:000000000000B235                 db  41h ; A
.eh_frame:000000000000B236                 db  0Eh
.eh_frame:000000000000B237                 db  30h ; 0
.eh_frame:000000000000B238                 db  83h
.eh_frame:000000000000B239                 db    6
.eh_frame:000000000000B23A                 db  7Ah ; z
.eh_frame:000000000000B23B                 db  0Eh
.eh_frame:000000000000B23C                 db  28h ; (
.eh_frame:000000000000B23D                 db  44h ; D
.eh_frame:000000000000B23E                 db  0Eh
.eh_frame:000000000000B23F                 db  20h
.eh_frame:000000000000B240                 db  42h ; B
.eh_frame:000000000000B241                 db  0Eh
.eh_frame:000000000000B242                 db  18h
.eh_frame:000000000000B243                 db  42h ; B
.eh_frame:000000000000B244                 db  0Eh
.eh_frame:000000000000B245                 db  10h
.eh_frame:000000000000B246                 db  42h ; B
.eh_frame:000000000000B247                 db  0Eh
.eh_frame:000000000000B248                 db    8
.eh_frame:000000000000B249                 db    0
.eh_frame:000000000000B24A                 db    0
.eh_frame:000000000000B24B                 db    0
.eh_frame:000000000000B24C                 db    0
.eh_frame:000000000000B24D                 db    0
.eh_frame:000000000000B24E                 db    0
.eh_frame:000000000000B24F                 db    0
.eh_frame:000000000000B250                 db  10h
.eh_frame:000000000000B251                 db    0
.eh_frame:000000000000B252                 db    0
.eh_frame:000000000000B253                 db    0
.eh_frame:000000000000B254                 db  1Ch
.eh_frame:000000000000B255                 db    5
.eh_frame:000000000000B256                 db    0
.eh_frame:000000000000B257                 db    0
.eh_frame:000000000000B258                 db  88h
.eh_frame:000000000000B259                 db 0A8h
.eh_frame:000000000000B25A                 db 0FFh
.eh_frame:000000000000B25B                 db 0FFh
.eh_frame:000000000000B25C                 db    8
.eh_frame:000000000000B25D                 db    0
.eh_frame:000000000000B25E                 db    0
.eh_frame:000000000000B25F                 db    0
.eh_frame:000000000000B260                 db    0
.eh_frame:000000000000B261                 db    0
.eh_frame:000000000000B262                 db    0
.eh_frame:000000000000B263                 db    0
.eh_frame:000000000000B264                 db  10h
.eh_frame:000000000000B265                 db    0
.eh_frame:000000000000B266                 db    0
.eh_frame:000000000000B267                 db    0
.eh_frame:000000000000B268                 db  30h ; 0
.eh_frame:000000000000B269                 db    5
.eh_frame:000000000000B26A                 db    0
.eh_frame:000000000000B26B                 db    0
.eh_frame:000000000000B26C                 db  84h
.eh_frame:000000000000B26D                 db 0A8h
.eh_frame:000000000000B26E                 db 0FFh
.eh_frame:000000000000B26F                 db 0FFh
.eh_frame:000000000000B270                 db    8
.eh_frame:000000000000B271                 db    0
.eh_frame:000000000000B272                 db    0
.eh_frame:000000000000B273                 db    0
.eh_frame:000000000000B274                 db    0
.eh_frame:000000000000B275                 db    0
.eh_frame:000000000000B276                 db    0
.eh_frame:000000000000B277                 db    0
.eh_frame:000000000000B278                 db  2Ch ; ,
.eh_frame:000000000000B279                 db    0
.eh_frame:000000000000B27A                 db    0
.eh_frame:000000000000B27B                 db    0
.eh_frame:000000000000B27C                 db  44h ; D
.eh_frame:000000000000B27D                 db    5
.eh_frame:000000000000B27E                 db    0
.eh_frame:000000000000B27F                 db    0
.eh_frame:000000000000B280                 db  80h
.eh_frame:000000000000B281                 db 0A8h
.eh_frame:000000000000B282                 db 0FFh
.eh_frame:000000000000B283                 db 0FFh
.eh_frame:000000000000B284                 db 0A4h
.eh_frame:000000000000B285                 db    0
.eh_frame:000000000000B286                 db    0
.eh_frame:000000000000B287                 db    0
.eh_frame:000000000000B288                 db    0
.eh_frame:000000000000B289                 db  41h ; A
.eh_frame:000000000000B28A                 db  0Eh
.eh_frame:000000000000B28B                 db  10h
.eh_frame:000000000000B28C                 db  86h
.eh_frame:000000000000B28D                 db    2
.eh_frame:000000000000B28E                 db  41h ; A
.eh_frame:000000000000B28F                 db  0Eh
.eh_frame:000000000000B290                 db  18h
.eh_frame:000000000000B291                 db  83h
.eh_frame:000000000000B292                 db    3
.eh_frame:000000000000B293                 db  44h ; D
.eh_frame:000000000000B294                 db  0Eh
.eh_frame:000000000000B295                 db  20h
.eh_frame:000000000000B296                 db  7Ah ; z
.eh_frame:000000000000B297                 db  0Ah
.eh_frame:000000000000B298                 db  0Eh
.eh_frame:000000000000B299                 db  18h
.eh_frame:000000000000B29A                 db  41h ; A
.eh_frame:000000000000B29B                 db  0Eh
.eh_frame:000000000000B29C                 db  10h
.eh_frame:000000000000B29D                 db  41h ; A
.eh_frame:000000000000B29E                 db  0Eh
.eh_frame:000000000000B29F                 db    8
.eh_frame:000000000000B2A0                 db  41h ; A
.eh_frame:000000000000B2A1                 db  0Bh
.eh_frame:000000000000B2A2                 db    0
.eh_frame:000000000000B2A3                 db    0
.eh_frame:000000000000B2A4                 db    0
.eh_frame:000000000000B2A5                 db    0
.eh_frame:000000000000B2A6                 db    0
.eh_frame:000000000000B2A7                 db    0
.eh_frame:000000000000B2A8                 db  10h
.eh_frame:000000000000B2A9                 db    0
.eh_frame:000000000000B2AA                 db    0
.eh_frame:000000000000B2AB                 db    0
.eh_frame:000000000000B2AC                 db  74h ; t
.eh_frame:000000000000B2AD                 db    5
.eh_frame:000000000000B2AE                 db    0
.eh_frame:000000000000B2AF                 db    0
.eh_frame:000000000000B2B0                 db    0
.eh_frame:000000000000B2B1                 db 0A9h
.eh_frame:000000000000B2B2                 db 0FFh
.eh_frame:000000000000B2B3                 db 0FFh
.eh_frame:000000000000B2B4                 db    5
.eh_frame:000000000000B2B5                 db    0
.eh_frame:000000000000B2B6                 db    0
.eh_frame:000000000000B2B7                 db    0
.eh_frame:000000000000B2B8                 db    0
.eh_frame:000000000000B2B9                 db    0
.eh_frame:000000000000B2BA                 db    0
.eh_frame:000000000000B2BB                 db    0
.eh_frame:000000000000B2BC                 db  18h
.eh_frame:000000000000B2BD                 db    0
.eh_frame:000000000000B2BE                 db    0
.eh_frame:000000000000B2BF                 db    0
.eh_frame:000000000000B2C0                 db  88h
.eh_frame:000000000000B2C1                 db    5
.eh_frame:000000000000B2C2                 db    0
.eh_frame:000000000000B2C3                 db    0
.eh_frame:000000000000B2C4                 db 0FCh
.eh_frame:000000000000B2C5                 db 0A8h
.eh_frame:000000000000B2C6                 db 0FFh
.eh_frame:000000000000B2C7                 db 0FFh
.eh_frame:000000000000B2C8                 db  22h ; "
.eh_frame:000000000000B2C9                 db    0
.eh_frame:000000000000B2CA                 db    0
.eh_frame:000000000000B2CB                 db    0
.eh_frame:000000000000B2CC                 db    0
.eh_frame:000000000000B2CD                 db  46h ; F
.eh_frame:000000000000B2CE                 db  0Eh
.eh_frame:000000000000B2CF                 db  10h
.eh_frame:000000000000B2D0                 db  83h
.eh_frame:000000000000B2D1                 db    2
.eh_frame:000000000000B2D2                 db  4Eh ; N
.eh_frame:000000000000B2D3                 db 0C3h
.eh_frame:000000000000B2D4                 db  0Eh
.eh_frame:000000000000B2D5                 db    8
.eh_frame:000000000000B2D6                 db    0
.eh_frame:000000000000B2D7                 db    0
.eh_frame:000000000000B2D8                 db  2Ch ; ,
.eh_frame:000000000000B2D9                 db    0
.eh_frame:000000000000B2DA                 db    0
.eh_frame:000000000000B2DB                 db    0
.eh_frame:000000000000B2DC                 db 0A4h
.eh_frame:000000000000B2DD                 db    5
.eh_frame:000000000000B2DE                 db    0
.eh_frame:000000000000B2DF                 db    0
.eh_frame:000000000000B2E0                 db  10h
.eh_frame:000000000000B2E1                 db 0A9h
.eh_frame:000000000000B2E2                 db 0FFh
.eh_frame:000000000000B2E3                 db 0FFh
.eh_frame:000000000000B2E4                 db  93h
.eh_frame:000000000000B2E5                 db    0
.eh_frame:000000000000B2E6                 db    0
.eh_frame:000000000000B2E7                 db    0
.eh_frame:000000000000B2E8                 db    0
.eh_frame:000000000000B2E9                 db  42h ; B
.eh_frame:000000000000B2EA                 db  0Eh
.eh_frame:000000000000B2EB                 db  10h
.eh_frame:000000000000B2EC                 db  8Ch
.eh_frame:000000000000B2ED                 db    2
.eh_frame:000000000000B2EE                 db  41h ; A
.eh_frame:000000000000B2EF                 db  0Eh
.eh_frame:000000000000B2F0                 db  18h
.eh_frame:000000000000B2F1                 db  86h
.eh_frame:000000000000B2F2                 db    3
.eh_frame:000000000000B2F3                 db  44h ; D
.eh_frame:000000000000B2F4                 db  0Eh
.eh_frame:000000000000B2F5                 db  20h
.eh_frame:000000000000B2F6                 db  83h
.eh_frame:000000000000B2F7                 db    4
.eh_frame:000000000000B2F8                 db  5Eh ; ^
.eh_frame:000000000000B2F9                 db  0Ah
.eh_frame:000000000000B2FA                 db  0Eh
.eh_frame:000000000000B2FB                 db  18h
.eh_frame:000000000000B2FC                 db  41h ; A
.eh_frame:000000000000B2FD                 db  0Eh
.eh_frame:000000000000B2FE                 db  10h
.eh_frame:000000000000B2FF                 db  42h ; B
.eh_frame:000000000000B300                 db  0Eh
.eh_frame:000000000000B301                 db    8
.eh_frame:000000000000B302                 db  48h ; H
.eh_frame:000000000000B303                 db  0Bh
.eh_frame:000000000000B304                 db    0
.eh_frame:000000000000B305                 db    0
.eh_frame:000000000000B306                 db    0
.eh_frame:000000000000B307                 db    0
.eh_frame:000000000000B308                 db  1Ch
.eh_frame:000000000000B309                 db    0
.eh_frame:000000000000B30A                 db    0
.eh_frame:000000000000B30B                 db    0
.eh_frame:000000000000B30C                 db 0D4h
.eh_frame:000000000000B30D                 db    5
.eh_frame:000000000000B30E                 db    0
.eh_frame:000000000000B30F                 db    0
.eh_frame:000000000000B310                 db  80h
.eh_frame:000000000000B311                 db 0A9h
.eh_frame:000000000000B312                 db 0FFh
.eh_frame:000000000000B313                 db 0FFh
.eh_frame:000000000000B314                 db  9Fh
.eh_frame:000000000000B315                 db    0
.eh_frame:000000000000B316                 db    0
.eh_frame:000000000000B317                 db    0
.eh_frame:000000000000B318                 db    0
.eh_frame:000000000000B319                 db  44h ; D
.eh_frame:000000000000B31A                 db  0Eh
.eh_frame:000000000000B31B                 db  10h
.eh_frame:000000000000B31C                 db  83h
.eh_frame:000000000000B31D                 db    2
.eh_frame:000000000000B31E                 db    2
.eh_frame:000000000000B31F                 db  78h ; x
.eh_frame:000000000000B320                 db  0Ah
.eh_frame:000000000000B321                 db  0Eh
.eh_frame:000000000000B322                 db    8
.eh_frame:000000000000B323                 db  41h ; A
.eh_frame:000000000000B324                 db  0Bh
.eh_frame:000000000000B325                 db    0
.eh_frame:000000000000B326                 db    0
.eh_frame:000000000000B327                 db    0
.eh_frame:000000000000B328                 db  40h ; @
.eh_frame:000000000000B329                 db    0
.eh_frame:000000000000B32A                 db    0
.eh_frame:000000000000B32B                 db    0
.eh_frame:000000000000B32C                 db 0F4h
.eh_frame:000000000000B32D                 db    5
.eh_frame:000000000000B32E                 db    0
.eh_frame:000000000000B32F                 db    0
.eh_frame:000000000000B330                 db    0
.eh_frame:000000000000B331                 db 0AAh
.eh_frame:000000000000B332                 db 0FFh
.eh_frame:000000000000B333                 db 0FFh
.eh_frame:000000000000B334                 db 0E7h
.eh_frame:000000000000B335                 db    0
.eh_frame:000000000000B336                 db    0
.eh_frame:000000000000B337                 db    0
.eh_frame:000000000000B338                 db    0
.eh_frame:000000000000B339                 db  41h ; A
.eh_frame:000000000000B33A                 db  0Eh
.eh_frame:000000000000B33B                 db  10h
.eh_frame:000000000000B33C                 db  86h
.eh_frame:000000000000B33D                 db    2
.eh_frame:000000000000B33E                 db  41h ; A
.eh_frame:000000000000B33F                 db  0Eh
.eh_frame:000000000000B340                 db  18h
.eh_frame:000000000000B341                 db  83h
.eh_frame:000000000000B342                 db    3
.eh_frame:000000000000B343                 db  49h ; I
.eh_frame:000000000000B344                 db  0Eh
.eh_frame:000000000000B345                 db  20h
.eh_frame:000000000000B346                 db  6Eh ; n
.eh_frame:000000000000B347                 db  0Ah
.eh_frame:000000000000B348                 db  0Eh
.eh_frame:000000000000B349                 db  18h
.eh_frame:000000000000B34A                 db  41h ; A
.eh_frame:000000000000B34B                 db  0Eh
.eh_frame:000000000000B34C                 db  10h
.eh_frame:000000000000B34D                 db  41h ; A
.eh_frame:000000000000B34E                 db  0Eh
.eh_frame:000000000000B34F                 db    8
.eh_frame:000000000000B350                 db  45h ; E
.eh_frame:000000000000B351                 db  0Bh
.eh_frame:000000000000B352                 db    2
.eh_frame:000000000000B353                 db  4Ah ; J
.eh_frame:000000000000B354                 db  0Ah
.eh_frame:000000000000B355                 db  0Eh
.eh_frame:000000000000B356                 db  18h
.eh_frame:000000000000B357                 db  41h ; A
.eh_frame:000000000000B358                 db  0Eh
.eh_frame:000000000000B359                 db  10h
.eh_frame:000000000000B35A                 db  41h ; A
.eh_frame:000000000000B35B                 db  0Eh
.eh_frame:000000000000B35C                 db    8
.eh_frame:000000000000B35D                 db  44h ; D
.eh_frame:000000000000B35E                 db  0Bh
.eh_frame:000000000000B35F                 db    2
.eh_frame:000000000000B360                 db  54h ; T
.eh_frame:000000000000B361                 db  0Eh
.eh_frame:000000000000B362                 db  18h
.eh_frame:000000000000B363                 db  41h ; A
.eh_frame:000000000000B364                 db  0Eh
.eh_frame:000000000000B365                 db  10h
.eh_frame:000000000000B366                 db  41h ; A
.eh_frame:000000000000B367                 db  0Eh
.eh_frame:000000000000B368                 db    8
.eh_frame:000000000000B369                 db    0
.eh_frame:000000000000B36A                 db    0
.eh_frame:000000000000B36B                 db    0
.eh_frame:000000000000B36C                 db  74h ; t
.eh_frame:000000000000B36D                 db    0
.eh_frame:000000000000B36E                 db    0
.eh_frame:000000000000B36F                 db    0
.eh_frame:000000000000B370                 db  38h ; 8
.eh_frame:000000000000B371                 db    6
.eh_frame:000000000000B372                 db    0
.eh_frame:000000000000B373                 db    0
.eh_frame:000000000000B374                 db 0ACh
.eh_frame:000000000000B375                 db 0AAh
.eh_frame:000000000000B376                 db 0FFh
.eh_frame:000000000000B377                 db 0FFh
.eh_frame:000000000000B378                 db  34h ; 4
.eh_frame:000000000000B379                 db  12h
.eh_frame:000000000000B37A                 db    0
.eh_frame:000000000000B37B                 db    0
.eh_frame:000000000000B37C                 db    0
.eh_frame:000000000000B37D                 db  42h ; B
.eh_frame:000000000000B37E                 db  0Eh
.eh_frame:000000000000B37F                 db  10h
.eh_frame:000000000000B380                 db  8Fh
.eh_frame:000000000000B381                 db    2
.eh_frame:000000000000B382                 db  42h ; B
.eh_frame:000000000000B383                 db  0Eh
.eh_frame:000000000000B384                 db  18h
.eh_frame:000000000000B385                 db  8Eh
.eh_frame:000000000000B386                 db    3
.eh_frame:000000000000B387                 db  45h ; E
.eh_frame:000000000000B388                 db  0Eh
.eh_frame:000000000000B389                 db  20h
.eh_frame:000000000000B38A                 db  8Dh
.eh_frame:000000000000B38B                 db    4
.eh_frame:000000000000B38C                 db  42h ; B
.eh_frame:000000000000B38D                 db  0Eh
.eh_frame:000000000000B38E                 db  28h ; (
.eh_frame:000000000000B38F                 db  8Ch
.eh_frame:000000000000B390                 db    5
.eh_frame:000000000000B391                 db  44h ; D
.eh_frame:000000000000B392                 db  0Eh
.eh_frame:000000000000B393                 db  30h ; 0
.eh_frame:000000000000B394                 db  86h
.eh_frame:000000000000B395                 db    6
.eh_frame:000000000000B396                 db  41h ; A
.eh_frame:000000000000B397                 db  0Eh
.eh_frame:000000000000B398                 db  38h ; 8
.eh_frame:000000000000B399                 db  83h
.eh_frame:000000000000B39A                 db    7
.eh_frame:000000000000B39B                 db  53h ; S
.eh_frame:000000000000B39C                 db  0Eh
.eh_frame:000000000000B39D                 db 0F0h
.eh_frame:000000000000B39E                 db    1
.eh_frame:000000000000B39F                 db    3
.eh_frame:000000000000B3A0                 db  81h
.eh_frame:000000000000B3A1                 db  0Bh
.eh_frame:000000000000B3A2                 db  0Eh
.eh_frame:000000000000B3A3                 db 0F8h
.eh_frame:000000000000B3A4                 db    1
.eh_frame:000000000000B3A5                 db  4Ah ; J
.eh_frame:000000000000B3A6                 db  0Eh
.eh_frame:000000000000B3A7                 db  80h
.eh_frame:000000000000B3A8                 db    2
.eh_frame:000000000000B3A9                 db  44h ; D
.eh_frame:000000000000B3AA                 db  0Eh
.eh_frame:000000000000B3AB                 db  88h
.eh_frame:000000000000B3AC                 db    2
.eh_frame:000000000000B3AD                 db  45h ; E
.eh_frame:000000000000B3AE                 db  0Eh
.eh_frame:000000000000B3AF                 db  90h
.eh_frame:000000000000B3B0                 db    2
.eh_frame:000000000000B3B1                 db  5Fh ; _
.eh_frame:000000000000B3B2                 db  0Eh
.eh_frame:000000000000B3B3                 db 0F0h
.eh_frame:000000000000B3B4                 db    1
.eh_frame:000000000000B3B5                 db  64h ; d
.eh_frame:000000000000B3B6                 db  0Ah
.eh_frame:000000000000B3B7                 db  0Eh
.eh_frame:000000000000B3B8                 db  38h ; 8
.eh_frame:000000000000B3B9                 db  41h ; A
.eh_frame:000000000000B3BA                 db  0Eh
.eh_frame:000000000000B3BB                 db  30h ; 0
.eh_frame:000000000000B3BC                 db  41h ; A
.eh_frame:000000000000B3BD                 db  0Eh
.eh_frame:000000000000B3BE                 db  28h ; (
.eh_frame:000000000000B3BF                 db  42h ; B
.eh_frame:000000000000B3C0                 db  0Eh
.eh_frame:000000000000B3C1                 db  20h
.eh_frame:000000000000B3C2                 db  42h ; B
.eh_frame:000000000000B3C3                 db  0Eh
.eh_frame:000000000000B3C4                 db  18h
.eh_frame:000000000000B3C5                 db  42h ; B
.eh_frame:000000000000B3C6                 db  0Eh
.eh_frame:000000000000B3C7                 db  10h
.eh_frame:000000000000B3C8                 db  42h ; B
.eh_frame:000000000000B3C9                 db  0Eh
.eh_frame:000000000000B3CA                 db    8
.eh_frame:000000000000B3CB                 db  44h ; D
.eh_frame:000000000000B3CC                 db  0Bh
.eh_frame:000000000000B3CD                 db    3
.eh_frame:000000000000B3CE                 db  99h
.eh_frame:000000000000B3CF                 db    5
.eh_frame:000000000000B3D0                 db  0Eh
.eh_frame:000000000000B3D1                 db 0F8h
.eh_frame:000000000000B3D2                 db    1
.eh_frame:000000000000B3D3                 db  4Dh ; M
.eh_frame:000000000000B3D4                 db  0Eh
.eh_frame:000000000000B3D5                 db  80h
.eh_frame:000000000000B3D6                 db    2
.eh_frame:000000000000B3D7                 db  44h ; D
.eh_frame:000000000000B3D8                 db  0Eh
.eh_frame:000000000000B3D9                 db  88h
.eh_frame:000000000000B3DA                 db    2
.eh_frame:000000000000B3DB                 db  47h ; G
.eh_frame:000000000000B3DC                 db  0Eh
.eh_frame:000000000000B3DD                 db  90h
.eh_frame:000000000000B3DE                 db    2
.eh_frame:000000000000B3DF                 db  5Bh ; [
.eh_frame:000000000000B3E0                 db  0Eh
.eh_frame:000000000000B3E1                 db 0F0h
.eh_frame:000000000000B3E2                 db    1
.eh_frame:000000000000B3E3                 db    0
.eh_frame:000000000000B3E4                 db  68h ; h
.eh_frame:000000000000B3E5                 db    0
.eh_frame:000000000000B3E6                 db    0
.eh_frame:000000000000B3E7                 db    0
.eh_frame:000000000000B3E8                 db 0B0h
.eh_frame:000000000000B3E9                 db    6
.eh_frame:000000000000B3EA                 db    0
.eh_frame:000000000000B3EB                 db    0
.eh_frame:000000000000B3EC                 db  74h ; t
.eh_frame:000000000000B3ED                 db 0BCh
.eh_frame:000000000000B3EE                 db 0FFh
.eh_frame:000000000000B3EF                 db 0FFh
.eh_frame:000000000000B3F0                 db 0ABh
.eh_frame:000000000000B3F1                 db    1
.eh_frame:000000000000B3F2                 db    0
.eh_frame:000000000000B3F3                 db    0
.eh_frame:000000000000B3F4                 db    0
.eh_frame:000000000000B3F5                 db  42h ; B
.eh_frame:000000000000B3F6                 db  0Eh
.eh_frame:000000000000B3F7                 db  10h
.eh_frame:000000000000B3F8                 db  8Fh
.eh_frame:000000000000B3F9                 db    2
.eh_frame:000000000000B3FA                 db  42h ; B
.eh_frame:000000000000B3FB                 db  0Eh
.eh_frame:000000000000B3FC                 db  18h
.eh_frame:000000000000B3FD                 db  8Eh
.eh_frame:000000000000B3FE                 db    3
.eh_frame:000000000000B3FF                 db  45h ; E
.eh_frame:000000000000B400                 db  0Eh
.eh_frame:000000000000B401                 db  20h
.eh_frame:000000000000B402                 db  8Dh
.eh_frame:000000000000B403                 db    4
.eh_frame:000000000000B404                 db  42h ; B
.eh_frame:000000000000B405                 db  0Eh
.eh_frame:000000000000B406                 db  28h ; (
.eh_frame:000000000000B407                 db  8Ch
.eh_frame:000000000000B408                 db    5
.eh_frame:000000000000B409                 db  44h ; D
.eh_frame:000000000000B40A                 db  0Eh
.eh_frame:000000000000B40B                 db  30h ; 0
.eh_frame:000000000000B40C                 db  86h
.eh_frame:000000000000B40D                 db    6
.eh_frame:000000000000B40E                 db  41h ; A
.eh_frame:000000000000B40F                 db  0Eh
.eh_frame:000000000000B410                 db  38h ; 8
.eh_frame:000000000000B411                 db  83h
.eh_frame:000000000000B412                 db    7
.eh_frame:000000000000B413                 db  47h ; G
.eh_frame:000000000000B414                 db  0Eh
.eh_frame:000000000000B415                 db  60h ; `
.eh_frame:000000000000B416                 db    2
.eh_frame:000000000000B417                 db  99h
.eh_frame:000000000000B418                 db  0Eh
.eh_frame:000000000000B419                 db  68h ; h
.eh_frame:000000000000B41A                 db  5Fh ; _
.eh_frame:000000000000B41B                 db  0Eh
.eh_frame:000000000000B41C                 db  70h ; p
.eh_frame:000000000000B41D                 db  46h ; F
.eh_frame:000000000000B41E                 db  0Eh
.eh_frame:000000000000B41F                 db  78h ; x
.eh_frame:000000000000B420                 db  42h ; B
.eh_frame:000000000000B421                 db  0Eh
.eh_frame:000000000000B422                 db  80h
.eh_frame:000000000000B423                 db    1
.eh_frame:000000000000B424                 db  59h ; Y
.eh_frame:000000000000B425                 db  0Eh
.eh_frame:000000000000B426                 db  60h ; `
.eh_frame:000000000000B427                 db    2
.eh_frame:000000000000B428                 db  40h ; @
.eh_frame:000000000000B429                 db  0Eh
.eh_frame:000000000000B42A                 db  68h ; h
.eh_frame:000000000000B42B                 db  4Bh ; K
.eh_frame:000000000000B42C                 db  0Eh
.eh_frame:000000000000B42D                 db  70h ; p
.eh_frame:000000000000B42E                 db  43h ; C
.eh_frame:000000000000B42F                 db  0Eh
.eh_frame:000000000000B430                 db  78h ; x
.eh_frame:000000000000B431                 db  45h ; E
.eh_frame:000000000000B432                 db  0Eh
.eh_frame:000000000000B433                 db  80h
.eh_frame:000000000000B434                 db    1
.eh_frame:000000000000B435                 db  5Eh ; ^
.eh_frame:000000000000B436                 db  0Eh
.eh_frame:000000000000B437                 db  60h ; `
.eh_frame:000000000000B438                 db  4Ch ; L
.eh_frame:000000000000B439                 db  0Ah
.eh_frame:000000000000B43A                 db  0Eh
.eh_frame:000000000000B43B                 db  38h ; 8
.eh_frame:000000000000B43C                 db  44h ; D
.eh_frame:000000000000B43D                 db  0Eh
.eh_frame:000000000000B43E                 db  30h ; 0
.eh_frame:000000000000B43F                 db  41h ; A
.eh_frame:000000000000B440                 db  0Eh
.eh_frame:000000000000B441                 db  28h ; (
.eh_frame:000000000000B442                 db  42h ; B
.eh_frame:000000000000B443                 db  0Eh
.eh_frame:000000000000B444                 db  20h
.eh_frame:000000000000B445                 db  42h ; B
.eh_frame:000000000000B446                 db  0Eh
.eh_frame:000000000000B447                 db  18h
.eh_frame:000000000000B448                 db  42h ; B
.eh_frame:000000000000B449                 db  0Eh
.eh_frame:000000000000B44A                 db  10h
.eh_frame:000000000000B44B                 db  42h ; B
.eh_frame:000000000000B44C                 db  0Eh
.eh_frame:000000000000B44D                 db    8
.eh_frame:000000000000B44E                 db  46h ; F
.eh_frame:000000000000B44F                 db  0Bh
.eh_frame:000000000000B450                 db  28h ; (
.eh_frame:000000000000B451                 db    0
.eh_frame:000000000000B452                 db    0
.eh_frame:000000000000B453                 db    0
.eh_frame:000000000000B454                 db  1Ch
.eh_frame:000000000000B455                 db    7
.eh_frame:000000000000B456                 db    0
.eh_frame:000000000000B457                 db    0
.eh_frame:000000000000B458                 db 0B8h
.eh_frame:000000000000B459                 db 0BDh
.eh_frame:000000000000B45A                 db 0FFh
.eh_frame:000000000000B45B                 db 0FFh
.eh_frame:000000000000B45C                 db  36h ; 6
.eh_frame:000000000000B45D                 db    0
.eh_frame:000000000000B45E                 db    0
.eh_frame:000000000000B45F                 db    0
.eh_frame:000000000000B460                 db    0
.eh_frame:000000000000B461                 db  42h ; B
.eh_frame:000000000000B462                 db  0Eh
.eh_frame:000000000000B463                 db  10h
.eh_frame:000000000000B464                 db  8Ch
.eh_frame:000000000000B465                 db    2
.eh_frame:000000000000B466                 db  41h ; A
.eh_frame:000000000000B467                 db  0Eh
.eh_frame:000000000000B468                 db  18h
.eh_frame:000000000000B469                 db  86h
.eh_frame:000000000000B46A                 db    3
.eh_frame:000000000000B46B                 db  41h ; A
.eh_frame:000000000000B46C                 db  0Eh
.eh_frame:000000000000B46D                 db  20h
.eh_frame:000000000000B46E                 db  83h
.eh_frame:000000000000B46F                 db    4
.eh_frame:000000000000B470                 db  6Eh ; n
.eh_frame:000000000000B471                 db  0Eh
.eh_frame:000000000000B472                 db  18h
.eh_frame:000000000000B473                 db  41h ; A
.eh_frame:000000000000B474                 db  0Eh
.eh_frame:000000000000B475                 db  10h
.eh_frame:000000000000B476                 db  42h ; B
.eh_frame:000000000000B477                 db  0Eh
.eh_frame:000000000000B478                 db    8
.eh_frame:000000000000B479                 db    0
.eh_frame:000000000000B47A                 db    0
.eh_frame:000000000000B47B                 db    0
.eh_frame:000000000000B47C                 db  10h
.eh_frame:000000000000B47D                 db    0
.eh_frame:000000000000B47E                 db    0
.eh_frame:000000000000B47F                 db    0
.eh_frame:000000000000B480                 db  48h ; H
.eh_frame:000000000000B481                 db    7
.eh_frame:000000000000B482                 db    0
.eh_frame:000000000000B483                 db    0
.eh_frame:000000000000B484                 db 0CCh
.eh_frame:000000000000B485                 db 0BDh
.eh_frame:000000000000B486                 db 0FFh
.eh_frame:000000000000B487                 db 0FFh
.eh_frame:000000000000B488                 db  11h
.eh_frame:000000000000B489                 db    0
.eh_frame:000000000000B48A                 db    0
.eh_frame:000000000000B48B                 db    0
.eh_frame:000000000000B48C                 db    0
.eh_frame:000000000000B48D                 db    0
.eh_frame:000000000000B48E                 db    0
.eh_frame:000000000000B48F                 db    0
.eh_frame:000000000000B490                 db  10h
.eh_frame:000000000000B491                 db    0
.eh_frame:000000000000B492                 db    0
.eh_frame:000000000000B493                 db    0
.eh_frame:000000000000B494                 db  5Ch ; \
.eh_frame:000000000000B495                 db    7
.eh_frame:000000000000B496                 db    0
.eh_frame:000000000000B497                 db    0
.eh_frame:000000000000B498                 db 0D8h
.eh_frame:000000000000B499                 db 0BDh
.eh_frame:000000000000B49A                 db 0FFh
.eh_frame:000000000000B49B                 db 0FFh
.eh_frame:000000000000B49C                 db  11h
.eh_frame:000000000000B49D                 db    0
.eh_frame:000000000000B49E                 db    0
.eh_frame:000000000000B49F                 db    0
.eh_frame:000000000000B4A0                 db    0
.eh_frame:000000000000B4A1                 db    0
.eh_frame:000000000000B4A2                 db    0
.eh_frame:000000000000B4A3                 db    0
.eh_frame:000000000000B4A4                 db  10h
.eh_frame:000000000000B4A5                 db    0
.eh_frame:000000000000B4A6                 db    0
.eh_frame:000000000000B4A7                 db    0
.eh_frame:000000000000B4A8                 db  70h ; p
.eh_frame:000000000000B4A9                 db    7
.eh_frame:000000000000B4AA                 db    0
.eh_frame:000000000000B4AB                 db    0
.eh_frame:000000000000B4AC                 db 0E4h
.eh_frame:000000000000B4AD                 db 0BDh
.eh_frame:000000000000B4AE                 db 0FFh
.eh_frame:000000000000B4AF                 db 0FFh
.eh_frame:000000000000B4B0                 db  35h ; 5
.eh_frame:000000000000B4B1                 db    0
.eh_frame:000000000000B4B2                 db    0
.eh_frame:000000000000B4B3                 db    0
.eh_frame:000000000000B4B4                 db    0
.eh_frame:000000000000B4B5                 db    0
.eh_frame:000000000000B4B6                 db    0
.eh_frame:000000000000B4B7                 db    0
.eh_frame:000000000000B4B8                 db  10h
.eh_frame:000000000000B4B9                 db    0
.eh_frame:000000000000B4BA                 db    0
.eh_frame:000000000000B4BB                 db    0
.eh_frame:000000000000B4BC                 db  84h
.eh_frame:000000000000B4BD                 db    7
.eh_frame:000000000000B4BE                 db    0
.eh_frame:000000000000B4BF                 db    0
.eh_frame:000000000000B4C0                 db  10h
.eh_frame:000000000000B4C1                 db 0BEh
.eh_frame:000000000000B4C2                 db 0FFh
.eh_frame:000000000000B4C3                 db 0FFh
.eh_frame:000000000000B4C4                 db  15h
.eh_frame:000000000000B4C5                 db    0
.eh_frame:000000000000B4C6                 db    0
.eh_frame:000000000000B4C7                 db    0
.eh_frame:000000000000B4C8                 db    0
.eh_frame:000000000000B4C9                 db    0
.eh_frame:000000000000B4CA                 db    0
.eh_frame:000000000000B4CB                 db    0
.eh_frame:000000000000B4CC                 db  10h
.eh_frame:000000000000B4CD                 db    0
.eh_frame:000000000000B4CE                 db    0
.eh_frame:000000000000B4CF                 db    0
.eh_frame:000000000000B4D0                 db  98h
.eh_frame:000000000000B4D1                 db    7
.eh_frame:000000000000B4D2                 db    0
.eh_frame:000000000000B4D3                 db    0
.eh_frame:000000000000B4D4                 db  1Ch
.eh_frame:000000000000B4D5                 db 0BEh
.eh_frame:000000000000B4D6                 db 0FFh
.eh_frame:000000000000B4D7                 db 0FFh
.eh_frame:000000000000B4D8                 db  30h ; 0
.eh_frame:000000000000B4D9                 db    0
.eh_frame:000000000000B4DA                 db    0
.eh_frame:000000000000B4DB                 db    0
.eh_frame:000000000000B4DC                 db    0
.eh_frame:000000000000B4DD                 db  6Bh ; k
.eh_frame:000000000000B4DE                 db  0Eh
.eh_frame:000000000000B4DF                 db  10h
.eh_frame:000000000000B4E0                 db  50h ; P
.eh_frame:000000000000B4E1                 db    0
.eh_frame:000000000000B4E2                 db    0
.eh_frame:000000000000B4E3                 db    0
.eh_frame:000000000000B4E4                 db 0ACh
.eh_frame:000000000000B4E5                 db    7
.eh_frame:000000000000B4E6                 db    0
.eh_frame:000000000000B4E7                 db    0
.eh_frame:000000000000B4E8                 db  38h ; 8
.eh_frame:000000000000B4E9                 db 0BEh
.eh_frame:000000000000B4EA                 db 0FFh
.eh_frame:000000000000B4EB                 db 0FFh
.eh_frame:000000000000B4EC                 db  74h ; t
.eh_frame:000000000000B4ED                 db    0
.eh_frame:000000000000B4EE                 db    0
.eh_frame:000000000000B4EF                 db    0
.eh_frame:000000000000B4F0                 db    0
.eh_frame:000000000000B4F1                 db  42h ; B
.eh_frame:000000000000B4F2                 db  0Eh
.eh_frame:000000000000B4F3                 db  10h
.eh_frame:000000000000B4F4                 db  8Fh
.eh_frame:000000000000B4F5                 db    2
.eh_frame:000000000000B4F6                 db  42h ; B
.eh_frame:000000000000B4F7                 db  0Eh
.eh_frame:000000000000B4F8                 db  18h
.eh_frame:000000000000B4F9                 db  8Eh
.eh_frame:000000000000B4FA                 db    3
.eh_frame:000000000000B4FB                 db  49h ; I
.eh_frame:000000000000B4FC                 db  0Eh
.eh_frame:000000000000B4FD                 db  20h
.eh_frame:000000000000B4FE                 db  8Dh
.eh_frame:000000000000B4FF                 db    4
.eh_frame:000000000000B500                 db  42h ; B
.eh_frame:000000000000B501                 db  0Eh
.eh_frame:000000000000B502                 db  28h ; (
.eh_frame:000000000000B503                 db  8Ch
.eh_frame:000000000000B504                 db    5
.eh_frame:000000000000B505                 db  44h ; D
.eh_frame:000000000000B506                 db  0Eh
.eh_frame:000000000000B507                 db  30h ; 0
.eh_frame:000000000000B508                 db  86h
.eh_frame:000000000000B509                 db    6
.eh_frame:000000000000B50A                 db  41h ; A
.eh_frame:000000000000B50B                 db  0Eh
.eh_frame:000000000000B50C                 db  38h ; 8
.eh_frame:000000000000B50D                 db  83h
.eh_frame:000000000000B50E                 db    7
.eh_frame:000000000000B50F                 db  4Dh ; M
.eh_frame:000000000000B510                 db  0Eh
.eh_frame:000000000000B511                 db  50h ; P
.eh_frame:000000000000B512                 db  5Fh ; _
.eh_frame:000000000000B513                 db  0Eh
.eh_frame:000000000000B514                 db  58h ; X
.eh_frame:000000000000B515                 db  47h ; G
.eh_frame:000000000000B516                 db  0Eh
.eh_frame:000000000000B517                 db  60h ; `
.eh_frame:000000000000B518                 db  46h ; F
.eh_frame:000000000000B519                 db  0Eh
.eh_frame:000000000000B51A                 db  68h ; h
.eh_frame:000000000000B51B                 db  44h ; D
.eh_frame:000000000000B51C                 db  0Eh
.eh_frame:000000000000B51D                 db  70h ; p
.eh_frame:000000000000B51E                 db  58h ; X
.eh_frame:000000000000B51F                 db  0Eh
.eh_frame:000000000000B520                 db  38h ; 8
.eh_frame:000000000000B521                 db  41h ; A
.eh_frame:000000000000B522                 db  0Eh
.eh_frame:000000000000B523                 db  30h ; 0
.eh_frame:000000000000B524                 db  41h ; A
.eh_frame:000000000000B525                 db  0Eh
.eh_frame:000000000000B526                 db  28h ; (
.eh_frame:000000000000B527                 db  42h ; B
.eh_frame:000000000000B528                 db  0Eh
.eh_frame:000000000000B529                 db  20h
.eh_frame:000000000000B52A                 db  42h ; B
.eh_frame:000000000000B52B                 db  0Eh
.eh_frame:000000000000B52C                 db  18h
.eh_frame:000000000000B52D                 db  42h ; B
.eh_frame:000000000000B52E                 db  0Eh
.eh_frame:000000000000B52F                 db  10h
.eh_frame:000000000000B530                 db  42h ; B
.eh_frame:000000000000B531                 db  0Eh
.eh_frame:000000000000B532                 db    8
.eh_frame:000000000000B533                 db    0
.eh_frame:000000000000B534                 db  68h ; h
.eh_frame:000000000000B535                 db    0
.eh_frame:000000000000B536                 db    0
.eh_frame:000000000000B537                 db    0
.eh_frame:000000000000B538                 db    0
.eh_frame:000000000000B539                 db    8
.eh_frame:000000000000B53A                 db    0
.eh_frame:000000000000B53B                 db    0
.eh_frame:000000000000B53C                 db  64h ; d
.eh_frame:000000000000B53D                 db 0BEh
.eh_frame:000000000000B53E                 db 0FFh
.eh_frame:000000000000B53F                 db 0FFh
.eh_frame:000000000000B540                 db 0E3h
.eh_frame:000000000000B541                 db    0
.eh_frame:000000000000B542                 db    0
.eh_frame:000000000000B543                 db    0
.eh_frame:000000000000B544                 db    0
.eh_frame:000000000000B545                 db  42h ; B
.eh_frame:000000000000B546                 db  0Eh
.eh_frame:000000000000B547                 db  10h
.eh_frame:000000000000B548                 db  8Fh
.eh_frame:000000000000B549                 db    2
.eh_frame:000000000000B54A                 db  42h ; B
.eh_frame:000000000000B54B                 db  0Eh
.eh_frame:000000000000B54C                 db  18h
.eh_frame:000000000000B54D                 db  8Eh
.eh_frame:000000000000B54E                 db    3
.eh_frame:000000000000B54F                 db  49h ; I
.eh_frame:000000000000B550                 db  0Eh
.eh_frame:000000000000B551                 db  20h
.eh_frame:000000000000B552                 db  8Dh
.eh_frame:000000000000B553                 db    4
.eh_frame:000000000000B554                 db  42h ; B
.eh_frame:000000000000B555                 db  0Eh
.eh_frame:000000000000B556                 db  28h ; (
.eh_frame:000000000000B557                 db  8Ch
.eh_frame:000000000000B558                 db    5
.eh_frame:000000000000B559                 db  44h ; D
.eh_frame:000000000000B55A                 db  0Eh
.eh_frame:000000000000B55B                 db  30h ; 0
.eh_frame:000000000000B55C                 db  86h
.eh_frame:000000000000B55D                 db    6
.eh_frame:000000000000B55E                 db  41h ; A
.eh_frame:000000000000B55F                 db  0Eh
.eh_frame:000000000000B560                 db  38h ; 8
.eh_frame:000000000000B561                 db  83h
.eh_frame:000000000000B562                 db    7
.eh_frame:000000000000B563                 db  4Dh ; M
.eh_frame:000000000000B564                 db  0Eh
.eh_frame:000000000000B565                 db  70h ; p
.eh_frame:000000000000B566                 db  65h ; e
.eh_frame:000000000000B567                 db  0Eh
.eh_frame:000000000000B568                 db  78h ; x
.eh_frame:000000000000B569                 db  4Dh ; M
.eh_frame:000000000000B56A                 db  0Eh
.eh_frame:000000000000B56B                 db  80h
.eh_frame:000000000000B56C                 db    1
.eh_frame:000000000000B56D                 db  46h ; F
.eh_frame:000000000000B56E                 db  0Eh
.eh_frame:000000000000B56F                 db  88h
.eh_frame:000000000000B570                 db    1
.eh_frame:000000000000B571                 db  42h ; B
.eh_frame:000000000000B572                 db  0Eh
.eh_frame:000000000000B573                 db  90h
.eh_frame:000000000000B574                 db    1
.eh_frame:000000000000B575                 db  5Eh ; ^
.eh_frame:000000000000B576                 db  0Eh
.eh_frame:000000000000B577                 db  70h ; p
.eh_frame:000000000000B578                 db  56h ; V
.eh_frame:000000000000B579                 db  0Eh
.eh_frame:000000000000B57A                 db  78h ; x
.eh_frame:000000000000B57B                 db  43h ; C
.eh_frame:000000000000B57C                 db  0Eh
.eh_frame:000000000000B57D                 db  80h
.eh_frame:000000000000B57E                 db    1
.eh_frame:000000000000B57F                 db  43h ; C
.eh_frame:000000000000B580                 db  0Eh
.eh_frame:000000000000B581                 db  88h
.eh_frame:000000000000B582                 db    1
.eh_frame:000000000000B583                 db  56h ; V
.eh_frame:000000000000B584                 db  0Eh
.eh_frame:000000000000B585                 db  90h
.eh_frame:000000000000B586                 db    1
.eh_frame:000000000000B587                 db  52h ; R
.eh_frame:000000000000B588                 db  0Eh
.eh_frame:000000000000B589                 db  70h ; p
.eh_frame:000000000000B58A                 db  5Bh ; [
.eh_frame:000000000000B58B                 db  0Eh
.eh_frame:000000000000B58C                 db  38h ; 8
.eh_frame:000000000000B58D                 db  41h ; A
.eh_frame:000000000000B58E                 db  0Eh
.eh_frame:000000000000B58F                 db  30h ; 0
.eh_frame:000000000000B590                 db  41h ; A
.eh_frame:000000000000B591                 db  0Eh
.eh_frame:000000000000B592                 db  28h ; (
.eh_frame:000000000000B593                 db  42h ; B
.eh_frame:000000000000B594                 db  0Eh
.eh_frame:000000000000B595                 db  20h
.eh_frame:000000000000B596                 db  42h ; B
.eh_frame:000000000000B597                 db  0Eh
.eh_frame:000000000000B598                 db  18h
.eh_frame:000000000000B599                 db  42h ; B
.eh_frame:000000000000B59A                 db  0Eh
.eh_frame:000000000000B59B                 db  10h
.eh_frame:000000000000B59C                 db  42h ; B
.eh_frame:000000000000B59D                 db  0Eh
.eh_frame:000000000000B59E                 db    8
.eh_frame:000000000000B59F                 db    0
.eh_frame:000000000000B5A0                 db  10h
.eh_frame:000000000000B5A1                 db    0
.eh_frame:000000000000B5A2                 db    0
.eh_frame:000000000000B5A3                 db    0
.eh_frame:000000000000B5A4                 db  6Ch ; l
.eh_frame:000000000000B5A5                 db    8
.eh_frame:000000000000B5A6                 db    0
.eh_frame:000000000000B5A7                 db    0
.eh_frame:000000000000B5A8                 db 0E8h
.eh_frame:000000000000B5A9                 db 0BEh
.eh_frame:000000000000B5AA                 db 0FFh
.eh_frame:000000000000B5AB                 db 0FFh
.eh_frame:000000000000B5AC                 db  0Ah
.eh_frame:000000000000B5AD                 db    0
.eh_frame:000000000000B5AE                 db    0
.eh_frame:000000000000B5AF                 db    0
.eh_frame:000000000000B5B0                 db    0
.eh_frame:000000000000B5B1                 db    0
.eh_frame:000000000000B5B2                 db    0
.eh_frame:000000000000B5B3                 db    0
.eh_frame:000000000000B5B4                 db  28h ; (
.eh_frame:000000000000B5B5                 db    0
.eh_frame:000000000000B5B6                 db    0
.eh_frame:000000000000B5B7                 db    0
.eh_frame:000000000000B5B8                 db  80h
.eh_frame:000000000000B5B9                 db    8
.eh_frame:000000000000B5BA                 db    0
.eh_frame:000000000000B5BB                 db    0
.eh_frame:000000000000B5BC                 db 0E4h
.eh_frame:000000000000B5BD                 db 0BEh
.eh_frame:000000000000B5BE                 db 0FFh
.eh_frame:000000000000B5BF                 db 0FFh
.eh_frame:000000000000B5C0                 db  93h
.eh_frame:000000000000B5C1                 db    0
.eh_frame:000000000000B5C2                 db    0
.eh_frame:000000000000B5C3                 db    0
.eh_frame:000000000000B5C4                 db    0
.eh_frame:000000000000B5C5                 db  48h ; H
.eh_frame:000000000000B5C6                 db  0Eh
.eh_frame:000000000000B5C7                 db  10h
.eh_frame:000000000000B5C8                 db  8Ch
.eh_frame:000000000000B5C9                 db    2
.eh_frame:000000000000B5CA                 db  48h ; H
.eh_frame:000000000000B5CB                 db  0Eh
.eh_frame:000000000000B5CC                 db  18h
.eh_frame:000000000000B5CD                 db  86h
.eh_frame:000000000000B5CE                 db    3
.eh_frame:000000000000B5CF                 db  41h ; A
.eh_frame:000000000000B5D0                 db  0Eh
.eh_frame:000000000000B5D1                 db  20h
.eh_frame:000000000000B5D2                 db  83h
.eh_frame:000000000000B5D3                 db    4
.eh_frame:000000000000B5D4                 db    2
.eh_frame:000000000000B5D5                 db  74h ; t
.eh_frame:000000000000B5D6                 db  0Eh
.eh_frame:000000000000B5D7                 db  18h
.eh_frame:000000000000B5D8                 db  4Bh ; K
.eh_frame:000000000000B5D9                 db  0Eh
.eh_frame:000000000000B5DA                 db  10h
.eh_frame:000000000000B5DB                 db  42h ; B
.eh_frame:000000000000B5DC                 db  0Eh
.eh_frame:000000000000B5DD                 db    8
.eh_frame:000000000000B5DE                 db    0
.eh_frame:000000000000B5DF                 db    0
.eh_frame:000000000000B5E0                 db  10h
.eh_frame:000000000000B5E1                 db    0
.eh_frame:000000000000B5E2                 db    0
.eh_frame:000000000000B5E3                 db    0
.eh_frame:000000000000B5E4                 db 0ACh
.eh_frame:000000000000B5E5                 db    8
.eh_frame:000000000000B5E6                 db    0
.eh_frame:000000000000B5E7                 db    0
.eh_frame:000000000000B5E8                 db  58h ; X
.eh_frame:000000000000B5E9                 db 0BFh
.eh_frame:000000000000B5EA                 db 0FFh
.eh_frame:000000000000B5EB                 db 0FFh
.eh_frame:000000000000B5EC                 db  13h
.eh_frame:000000000000B5ED                 db    0
.eh_frame:000000000000B5EE                 db    0
.eh_frame:000000000000B5EF                 db    0
.eh_frame:000000000000B5F0                 db    0
.eh_frame:000000000000B5F1                 db    0
.eh_frame:000000000000B5F2                 db    0
.eh_frame:000000000000B5F3                 db    0
.eh_frame:000000000000B5F4                 db  10h
.eh_frame:000000000000B5F5                 db    0
.eh_frame:000000000000B5F6                 db    0
.eh_frame:000000000000B5F7                 db    0
.eh_frame:000000000000B5F8                 db 0C0h
.eh_frame:000000000000B5F9                 db    8
.eh_frame:000000000000B5FA                 db    0
.eh_frame:000000000000B5FB                 db    0
.eh_frame:000000000000B5FC                 db  64h ; d
.eh_frame:000000000000B5FD                 db 0BFh
.eh_frame:000000000000B5FE                 db 0FFh
.eh_frame:000000000000B5FF                 db 0FFh
.eh_frame:000000000000B600                 db  0Ch
.eh_frame:000000000000B601                 db    0
.eh_frame:000000000000B602                 db    0
.eh_frame:000000000000B603                 db    0
.eh_frame:000000000000B604                 db    0
.eh_frame:000000000000B605                 db    0
.eh_frame:000000000000B606                 db    0
.eh_frame:000000000000B607                 db    0
.eh_frame:000000000000B608                 db  10h
.eh_frame:000000000000B609                 db    0
.eh_frame:000000000000B60A                 db    0
.eh_frame:000000000000B60B                 db    0
.eh_frame:000000000000B60C                 db 0D4h
.eh_frame:000000000000B60D                 db    8
.eh_frame:000000000000B60E                 db    0
.eh_frame:000000000000B60F                 db    0
.eh_frame:000000000000B610                 db  60h ; `
.eh_frame:000000000000B611                 db 0BFh
.eh_frame:000000000000B612                 db 0FFh
.eh_frame:000000000000B613                 db 0FFh
.eh_frame:000000000000B614                 db  18h
.eh_frame:000000000000B615                 db    0
.eh_frame:000000000000B616                 db    0
.eh_frame:000000000000B617                 db    0
.eh_frame:000000000000B618                 db    0
.eh_frame:000000000000B619                 db    0
.eh_frame:000000000000B61A                 db    0
.eh_frame:000000000000B61B                 db    0
.eh_frame:000000000000B61C                 db  10h
.eh_frame:000000000000B61D                 db    0
.eh_frame:000000000000B61E                 db    0
.eh_frame:000000000000B61F                 db    0
.eh_frame:000000000000B620                 db 0E8h
.eh_frame:000000000000B621                 db    8
.eh_frame:000000000000B622                 db    0
.eh_frame:000000000000B623                 db    0
.eh_frame:000000000000B624                 db  6Ch ; l
.eh_frame:000000000000B625                 db 0BFh
.eh_frame:000000000000B626                 db 0FFh
.eh_frame:000000000000B627                 db 0FFh
.eh_frame:000000000000B628                 db  14h
.eh_frame:000000000000B629                 db    0
.eh_frame:000000000000B62A                 db    0
.eh_frame:000000000000B62B                 db    0
.eh_frame:000000000000B62C                 db    0
.eh_frame:000000000000B62D                 db    0
.eh_frame:000000000000B62E                 db    0
.eh_frame:000000000000B62F                 db    0
.eh_frame:000000000000B630                 db  18h
.eh_frame:000000000000B631                 db    0
.eh_frame:000000000000B632                 db    0
.eh_frame:000000000000B633                 db    0
.eh_frame:000000000000B634                 db 0FCh
.eh_frame:000000000000B635                 db    8
.eh_frame:000000000000B636                 db    0
.eh_frame:000000000000B637                 db    0
.eh_frame:000000000000B638                 db  78h ; x
.eh_frame:000000000000B639                 db 0BFh
.eh_frame:000000000000B63A                 db 0FFh
.eh_frame:000000000000B63B                 db 0FFh
.eh_frame:000000000000B63C                 db  8Eh
.eh_frame:000000000000B63D                 db    0
.eh_frame:000000000000B63E                 db    0
.eh_frame:000000000000B63F                 db    0
.eh_frame:000000000000B640                 db    0
.eh_frame:000000000000B641                 db  44h ; D
.eh_frame:000000000000B642                 db  0Eh
.eh_frame:000000000000B643                 db  50h ; P
.eh_frame:000000000000B644                 db    2
.eh_frame:000000000000B645                 db  7Fh ; 
.eh_frame:000000000000B646                 db  0Ah
.eh_frame:000000000000B647                 db  0Eh
.eh_frame:000000000000B648                 db    8
.eh_frame:000000000000B649                 db  41h ; A
.eh_frame:000000000000B64A                 db  0Bh
.eh_frame:000000000000B64B                 db    0
.eh_frame:000000000000B64C                 db  18h
.eh_frame:000000000000B64D                 db    0
.eh_frame:000000000000B64E                 db    0
.eh_frame:000000000000B64F                 db    0
.eh_frame:000000000000B650                 db  18h
.eh_frame:000000000000B651                 db    9
.eh_frame:000000000000B652                 db    0
.eh_frame:000000000000B653                 db    0
.eh_frame:000000000000B654                 db 0ECh
.eh_frame:000000000000B655                 db 0BFh
.eh_frame:000000000000B656                 db 0FFh
.eh_frame:000000000000B657                 db 0FFh
.eh_frame:000000000000B658                 db  8Ah
.eh_frame:000000000000B659                 db    0
.eh_frame:000000000000B65A                 db    0
.eh_frame:000000000000B65B                 db    0
.eh_frame:000000000000B65C                 db    0
.eh_frame:000000000000B65D                 db  44h ; D
.eh_frame:000000000000B65E                 db  0Eh
.eh_frame:000000000000B65F                 db  50h ; P
.eh_frame:000000000000B660                 db    2
.eh_frame:000000000000B661                 db  7Bh ; {
.eh_frame:000000000000B662                 db  0Ah
.eh_frame:000000000000B663                 db  0Eh
.eh_frame:000000000000B664                 db    8
.eh_frame:000000000000B665                 db  41h ; A
.eh_frame:000000000000B666                 db  0Bh
.eh_frame:000000000000B667                 db    0
.eh_frame:000000000000B668                 db  10h
.eh_frame:000000000000B669                 db    0
.eh_frame:000000000000B66A                 db    0
.eh_frame:000000000000B66B                 db    0
.eh_frame:000000000000B66C                 db  34h ; 4
.eh_frame:000000000000B66D                 db    9
.eh_frame:000000000000B66E                 db    0
.eh_frame:000000000000B66F                 db    0
.eh_frame:000000000000B670                 db  60h ; `
.eh_frame:000000000000B671                 db 0C0h
.eh_frame:000000000000B672                 db 0FFh
.eh_frame:000000000000B673                 db 0FFh
.eh_frame:000000000000B674                 db  0Ch
.eh_frame:000000000000B675                 db    0
.eh_frame:000000000000B676                 db    0
.eh_frame:000000000000B677                 db    0
.eh_frame:000000000000B678                 db    0
.eh_frame:000000000000B679                 db    0
.eh_frame:000000000000B67A                 db    0
.eh_frame:000000000000B67B                 db    0
.eh_frame:000000000000B67C                 db  10h
.eh_frame:000000000000B67D                 db    0
.eh_frame:000000000000B67E                 db    0
.eh_frame:000000000000B67F                 db    0
.eh_frame:000000000000B680                 db  48h ; H
.eh_frame:000000000000B681                 db    9
.eh_frame:000000000000B682                 db    0
.eh_frame:000000000000B683                 db    0
.eh_frame:000000000000B684                 db  5Ch ; \
.eh_frame:000000000000B685                 db 0C0h
.eh_frame:000000000000B686                 db 0FFh
.eh_frame:000000000000B687                 db 0FFh
.eh_frame:000000000000B688                 db  0Fh
.eh_frame:000000000000B689                 db    0
.eh_frame:000000000000B68A                 db    0
.eh_frame:000000000000B68B                 db    0
.eh_frame:000000000000B68C                 db    0
.eh_frame:000000000000B68D                 db    0
.eh_frame:000000000000B68E                 db    0
.eh_frame:000000000000B68F                 db    0
.eh_frame:000000000000B690                 db  18h
.eh_frame:000000000000B691                 db    0
.eh_frame:000000000000B692                 db    0
.eh_frame:000000000000B693                 db    0
.eh_frame:000000000000B694                 db  5Ch ; \
.eh_frame:000000000000B695                 db    9
.eh_frame:000000000000B696                 db    0
.eh_frame:000000000000B697                 db    0
.eh_frame:000000000000B698                 db  58h ; X
.eh_frame:000000000000B699                 db 0C0h
.eh_frame:000000000000B69A                 db 0FFh
.eh_frame:000000000000B69B                 db 0FFh
.eh_frame:000000000000B69C                 db  98h
.eh_frame:000000000000B69D                 db    0
.eh_frame:000000000000B69E                 db    0
.eh_frame:000000000000B69F                 db    0
.eh_frame:000000000000B6A0                 db    0
.eh_frame:000000000000B6A1                 db  44h ; D
.eh_frame:000000000000B6A2                 db  0Eh
.eh_frame:000000000000B6A3                 db  50h ; P
.eh_frame:000000000000B6A4                 db    2
.eh_frame:000000000000B6A5                 db  8Eh
.eh_frame:000000000000B6A6                 db  0Ah
.eh_frame:000000000000B6A7                 db  0Eh
.eh_frame:000000000000B6A8                 db    8
.eh_frame:000000000000B6A9                 db  41h ; A
.eh_frame:000000000000B6AA                 db  0Bh
.eh_frame:000000000000B6AB                 db    0
.eh_frame:000000000000B6AC                 db  10h
.eh_frame:000000000000B6AD                 db    0
.eh_frame:000000000000B6AE                 db    0
.eh_frame:000000000000B6AF                 db    0
.eh_frame:000000000000B6B0                 db  78h ; x
.eh_frame:000000000000B6B1                 db    9
.eh_frame:000000000000B6B2                 db    0
.eh_frame:000000000000B6B3                 db    0
.eh_frame:000000000000B6B4                 db 0DCh
.eh_frame:000000000000B6B5                 db 0C0h
.eh_frame:000000000000B6B6                 db 0FFh
.eh_frame:000000000000B6B7                 db 0FFh
.eh_frame:000000000000B6B8                 db  10h
.eh_frame:000000000000B6B9                 db    0
.eh_frame:000000000000B6BA                 db    0
.eh_frame:000000000000B6BB                 db    0
.eh_frame:000000000000B6BC                 db    0
.eh_frame:000000000000B6BD                 db    0
.eh_frame:000000000000B6BE                 db    0
.eh_frame:000000000000B6BF                 db    0
.eh_frame:000000000000B6C0                 db  10h
.eh_frame:000000000000B6C1                 db    0
.eh_frame:000000000000B6C2                 db    0
.eh_frame:000000000000B6C3                 db    0
.eh_frame:000000000000B6C4                 db  8Ch
.eh_frame:000000000000B6C5                 db    9
.eh_frame:000000000000B6C6                 db    0
.eh_frame:000000000000B6C7                 db    0
.eh_frame:000000000000B6C8                 db 0D8h
.eh_frame:000000000000B6C9                 db 0C0h
.eh_frame:000000000000B6CA                 db 0FFh
.eh_frame:000000000000B6CB                 db 0FFh
.eh_frame:000000000000B6CC                 db  11h
.eh_frame:000000000000B6CD                 db    0
.eh_frame:000000000000B6CE                 db    0
.eh_frame:000000000000B6CF                 db    0
.eh_frame:000000000000B6D0                 db    0
.eh_frame:000000000000B6D1                 db    0
.eh_frame:000000000000B6D2                 db    0
.eh_frame:000000000000B6D3                 db    0
.eh_frame:000000000000B6D4                 db  10h
.eh_frame:000000000000B6D5                 db    0
.eh_frame:000000000000B6D6                 db    0
.eh_frame:000000000000B6D7                 db    0
.eh_frame:000000000000B6D8                 db 0A0h
.eh_frame:000000000000B6D9                 db    9
.eh_frame:000000000000B6DA                 db    0
.eh_frame:000000000000B6DB                 db    0
.eh_frame:000000000000B6DC                 db 0E4h
.eh_frame:000000000000B6DD                 db 0C0h
.eh_frame:000000000000B6DE                 db 0FFh
.eh_frame:000000000000B6DF                 db 0FFh
.eh_frame:000000000000B6E0                 db  0Ah
.eh_frame:000000000000B6E1                 db    0
.eh_frame:000000000000B6E2                 db    0
.eh_frame:000000000000B6E3                 db    0
.eh_frame:000000000000B6E4                 db    0
.eh_frame:000000000000B6E5                 db    0
.eh_frame:000000000000B6E6                 db    0
.eh_frame:000000000000B6E7                 db    0
.eh_frame:000000000000B6E8                 db  18h
.eh_frame:000000000000B6E9                 db    0
.eh_frame:000000000000B6EA                 db    0
.eh_frame:000000000000B6EB                 db    0
.eh_frame:000000000000B6EC                 db 0B4h
.eh_frame:000000000000B6ED                 db    9
.eh_frame:000000000000B6EE                 db    0
.eh_frame:000000000000B6EF                 db    0
.eh_frame:000000000000B6F0                 db 0E0h
.eh_frame:000000000000B6F1                 db 0C0h
.eh_frame:000000000000B6F2                 db 0FFh
.eh_frame:000000000000B6F3                 db 0FFh
.eh_frame:000000000000B6F4                 db  8Eh
.eh_frame:000000000000B6F5                 db    0
.eh_frame:000000000000B6F6                 db    0
.eh_frame:000000000000B6F7                 db    0
.eh_frame:000000000000B6F8                 db    0
.eh_frame:000000000000B6F9                 db  44h ; D
.eh_frame:000000000000B6FA                 db  0Eh
.eh_frame:000000000000B6FB                 db  50h ; P
.eh_frame:000000000000B6FC                 db    2
.eh_frame:000000000000B6FD                 db  7Fh ; 
.eh_frame:000000000000B6FE                 db  0Ah
.eh_frame:000000000000B6FF                 db  0Eh
.eh_frame:000000000000B700                 db    8
.eh_frame:000000000000B701                 db  41h ; A
.eh_frame:000000000000B702                 db  0Bh
.eh_frame:000000000000B703                 db    0
.eh_frame:000000000000B704                 db  18h
.eh_frame:000000000000B705                 db    0
.eh_frame:000000000000B706                 db    0
.eh_frame:000000000000B707                 db    0
.eh_frame:000000000000B708                 db 0D0h
.eh_frame:000000000000B709                 db    9
.eh_frame:000000000000B70A                 db    0
.eh_frame:000000000000B70B                 db    0
.eh_frame:000000000000B70C                 db  54h ; T
.eh_frame:000000000000B70D                 db 0C1h
.eh_frame:000000000000B70E                 db 0FFh
.eh_frame:000000000000B70F                 db 0FFh
.eh_frame:000000000000B710                 db  91h
.eh_frame:000000000000B711                 db    0
.eh_frame:000000000000B712                 db    0
.eh_frame:000000000000B713                 db    0
.eh_frame:000000000000B714                 db    0
.eh_frame:000000000000B715                 db  44h ; D
.eh_frame:000000000000B716                 db  0Eh
.eh_frame:000000000000B717                 db  50h ; P
.eh_frame:000000000000B718                 db    2
.eh_frame:000000000000B719                 db  82h
.eh_frame:000000000000B71A                 db  0Ah
.eh_frame:000000000000B71B                 db  0Eh
.eh_frame:000000000000B71C                 db    8
.eh_frame:000000000000B71D                 db  41h ; A
.eh_frame:000000000000B71E                 db  0Bh
.eh_frame:000000000000B71F                 db    0
.eh_frame:000000000000B720                 db  10h
.eh_frame:000000000000B721                 db    0
.eh_frame:000000000000B722                 db    0
.eh_frame:000000000000B723                 db    0
.eh_frame:000000000000B724                 db 0ECh
.eh_frame:000000000000B725                 db    9
.eh_frame:000000000000B726                 db    0
.eh_frame:000000000000B727                 db    0
.eh_frame:000000000000B728                 db 0D8h
.eh_frame:000000000000B729                 db 0C1h
.eh_frame:000000000000B72A                 db 0FFh
.eh_frame:000000000000B72B                 db 0FFh
.eh_frame:000000000000B72C                 db  0Ch
.eh_frame:000000000000B72D                 db    0
.eh_frame:000000000000B72E                 db    0
.eh_frame:000000000000B72F                 db    0
.eh_frame:000000000000B730                 db    0
.eh_frame:000000000000B731                 db    0
.eh_frame:000000000000B732                 db    0
.eh_frame:000000000000B733                 db    0
.eh_frame:000000000000B734                 db  10h
.eh_frame:000000000000B735                 db    0
.eh_frame:000000000000B736                 db    0
.eh_frame:000000000000B737                 db    0
.eh_frame:000000000000B738                 db    0
.eh_frame:000000000000B739                 db  0Ah
.eh_frame:000000000000B73A                 db    0
.eh_frame:000000000000B73B                 db    0
.eh_frame:000000000000B73C                 db 0D4h
.eh_frame:000000000000B73D                 db 0C1h
.eh_frame:000000000000B73E                 db 0FFh
.eh_frame:000000000000B73F                 db 0FFh
.eh_frame:000000000000B740                 db  17h
.eh_frame:000000000000B741                 db    0
.eh_frame:000000000000B742                 db    0
.eh_frame:000000000000B743                 db    0
.eh_frame:000000000000B744                 db    0
.eh_frame:000000000000B745                 db    0
.eh_frame:000000000000B746                 db    0
.eh_frame:000000000000B747                 db    0
.eh_frame:000000000000B748                 db  10h
.eh_frame:000000000000B749                 db    0
.eh_frame:000000000000B74A                 db    0
.eh_frame:000000000000B74B                 db    0
.eh_frame:000000000000B74C                 db  14h
.eh_frame:000000000000B74D                 db  0Ah
.eh_frame:000000000000B74E                 db    0
.eh_frame:000000000000B74F                 db    0
.eh_frame:000000000000B750                 db 0E0h
.eh_frame:000000000000B751                 db 0C1h
.eh_frame:000000000000B752                 db 0FFh
.eh_frame:000000000000B753                 db 0FFh
.eh_frame:000000000000B754                 db  13h
.eh_frame:000000000000B755                 db    0
.eh_frame:000000000000B756                 db    0
.eh_frame:000000000000B757                 db    0
.eh_frame:000000000000B758                 db    0
.eh_frame:000000000000B759                 db    0
.eh_frame:000000000000B75A                 db    0
.eh_frame:000000000000B75B                 db    0
.eh_frame:000000000000B75C                 db  10h
.eh_frame:000000000000B75D                 db    0
.eh_frame:000000000000B75E                 db    0
.eh_frame:000000000000B75F                 db    0
.eh_frame:000000000000B760                 db  28h ; (
.eh_frame:000000000000B761                 db  0Ah
.eh_frame:000000000000B762                 db    0
.eh_frame:000000000000B763                 db    0
.eh_frame:000000000000B764                 db 0ECh
.eh_frame:000000000000B765                 db 0C1h
.eh_frame:000000000000B766                 db 0FFh
.eh_frame:000000000000B767                 db 0FFh
.eh_frame:000000000000B768                 db  0Ch
.eh_frame:000000000000B769                 db    0
.eh_frame:000000000000B76A                 db    0
.eh_frame:000000000000B76B                 db    0
.eh_frame:000000000000B76C                 db    0
.eh_frame:000000000000B76D                 db    0
.eh_frame:000000000000B76E                 db    0
.eh_frame:000000000000B76F                 db    0
.eh_frame:000000000000B770                 db  10h
.eh_frame:000000000000B771                 db    0
.eh_frame:000000000000B772                 db    0
.eh_frame:000000000000B773                 db    0
.eh_frame:000000000000B774                 db  3Ch ; <
.eh_frame:000000000000B775                 db  0Ah
.eh_frame:000000000000B776                 db    0
.eh_frame:000000000000B777                 db    0
.eh_frame:000000000000B778                 db 0E8h
.eh_frame:000000000000B779                 db 0C1h
.eh_frame:000000000000B77A                 db 0FFh
.eh_frame:000000000000B77B                 db 0FFh
.eh_frame:000000000000B77C                 db  14h
.eh_frame:000000000000B77D                 db    0
.eh_frame:000000000000B77E                 db    0
.eh_frame:000000000000B77F                 db    0
.eh_frame:000000000000B780                 db    0
.eh_frame:000000000000B781                 db    0
.eh_frame:000000000000B782                 db    0
.eh_frame:000000000000B783                 db    0
.eh_frame:000000000000B784                 db  10h
.eh_frame:000000000000B785                 db    0
.eh_frame:000000000000B786                 db    0
.eh_frame:000000000000B787                 db    0
.eh_frame:000000000000B788                 db  50h ; P
.eh_frame:000000000000B789                 db  0Ah
.eh_frame:000000000000B78A                 db    0
.eh_frame:000000000000B78B                 db    0
.eh_frame:000000000000B78C                 db 0F4h
.eh_frame:000000000000B78D                 db 0C1h
.eh_frame:000000000000B78E                 db 0FFh
.eh_frame:000000000000B78F                 db 0FFh
.eh_frame:000000000000B790                 db  13h
.eh_frame:000000000000B791                 db    0
.eh_frame:000000000000B792                 db    0
.eh_frame:000000000000B793                 db    0
.eh_frame:000000000000B794                 db    0
.eh_frame:000000000000B795                 db    0
.eh_frame:000000000000B796                 db    0
.eh_frame:000000000000B797                 db    0
.eh_frame:000000000000B798                 db  14h
.eh_frame:000000000000B799                 db    0
.eh_frame:000000000000B79A                 db    0
.eh_frame:000000000000B79B                 db    0
.eh_frame:000000000000B79C                 db  64h ; d
.eh_frame:000000000000B79D                 db  0Ah
.eh_frame:000000000000B79E                 db    0
.eh_frame:000000000000B79F                 db    0
.eh_frame:000000000000B7A0                 db    0
.eh_frame:000000000000B7A1                 db 0C2h
.eh_frame:000000000000B7A2                 db 0FFh
.eh_frame:000000000000B7A3                 db 0FFh
.eh_frame:000000000000B7A4                 db  18h
.eh_frame:000000000000B7A5                 db    0
.eh_frame:000000000000B7A6                 db    0
.eh_frame:000000000000B7A7                 db    0
.eh_frame:000000000000B7A8                 db    0
.eh_frame:000000000000B7A9                 db    0
.eh_frame:000000000000B7AA                 db    0
.eh_frame:000000000000B7AB                 db    0
.eh_frame:000000000000B7AC                 db    0
.eh_frame:000000000000B7AD                 db    0
.eh_frame:000000000000B7AE                 db    0
.eh_frame:000000000000B7AF                 db    0
.eh_frame:000000000000B7B0                 db  14h
.eh_frame:000000000000B7B1                 db    0
.eh_frame:000000000000B7B2                 db    0
.eh_frame:000000000000B7B3                 db    0
.eh_frame:000000000000B7B4                 db  7Ch ; |
.eh_frame:000000000000B7B5                 db  0Ah
.eh_frame:000000000000B7B6                 db    0
.eh_frame:000000000000B7B7                 db    0
.eh_frame:000000000000B7B8                 db    8
.eh_frame:000000000000B7B9                 db 0C2h
.eh_frame:000000000000B7BA                 db 0FFh
.eh_frame:000000000000B7BB                 db 0FFh
.eh_frame:000000000000B7BC                 db  0Eh
.eh_frame:000000000000B7BD                 db    0
.eh_frame:000000000000B7BE                 db    0
.eh_frame:000000000000B7BF                 db    0
.eh_frame:000000000000B7C0                 db    0
.eh_frame:000000000000B7C1                 db    0
.eh_frame:000000000000B7C2                 db    0
.eh_frame:000000000000B7C3                 db    0
.eh_frame:000000000000B7C4                 db    0
.eh_frame:000000000000B7C5                 db    0
.eh_frame:000000000000B7C6                 db    0
.eh_frame:000000000000B7C7                 db    0
.eh_frame:000000000000B7C8                 db  10h
.eh_frame:000000000000B7C9                 db    1
.eh_frame:000000000000B7CA                 db    0
.eh_frame:000000000000B7CB                 db    0
.eh_frame:000000000000B7CC                 db  94h
.eh_frame:000000000000B7CD                 db  0Ah
.eh_frame:000000000000B7CE                 db    0
.eh_frame:000000000000B7CF                 db    0
.eh_frame:000000000000B7D0                 db    0
.eh_frame:000000000000B7D1                 db 0C2h
.eh_frame:000000000000B7D2                 db 0FFh
.eh_frame:000000000000B7D3                 db 0FFh
.eh_frame:000000000000B7D4                 db  17h
.eh_frame:000000000000B7D5                 db    4
.eh_frame:000000000000B7D6                 db    0
.eh_frame:000000000000B7D7                 db    0
.eh_frame:000000000000B7D8                 db    0
.eh_frame:000000000000B7D9                 db  42h ; B
.eh_frame:000000000000B7DA                 db  0Eh
.eh_frame:000000000000B7DB                 db  10h
.eh_frame:000000000000B7DC                 db  8Fh
.eh_frame:000000000000B7DD                 db    2
.eh_frame:000000000000B7DE                 db  42h ; B
.eh_frame:000000000000B7DF                 db  0Eh
.eh_frame:000000000000B7E0                 db  18h
.eh_frame:000000000000B7E1                 db  8Eh
.eh_frame:000000000000B7E2                 db    3
.eh_frame:000000000000B7E3                 db  42h ; B
.eh_frame:000000000000B7E4                 db  0Eh
.eh_frame:000000000000B7E5                 db  20h
.eh_frame:000000000000B7E6                 db  8Dh
.eh_frame:000000000000B7E7                 db    4
.eh_frame:000000000000B7E8                 db  42h ; B
.eh_frame:000000000000B7E9                 db  0Eh
.eh_frame:000000000000B7EA                 db  28h ; (
.eh_frame:000000000000B7EB                 db  8Ch
.eh_frame:000000000000B7EC                 db    5
.eh_frame:000000000000B7ED                 db  44h ; D
.eh_frame:000000000000B7EE                 db  0Eh
.eh_frame:000000000000B7EF                 db  30h ; 0
.eh_frame:000000000000B7F0                 db  86h
.eh_frame:000000000000B7F1                 db    6
.eh_frame:000000000000B7F2                 db  41h ; A
.eh_frame:000000000000B7F3                 db  0Eh
.eh_frame:000000000000B7F4                 db  38h ; 8
.eh_frame:000000000000B7F5                 db  83h
.eh_frame:000000000000B7F6                 db    7
.eh_frame:000000000000B7F7                 db  4Ah ; J
.eh_frame:000000000000B7F8                 db  0Eh
.eh_frame:000000000000B7F9                 db  60h ; `
.eh_frame:000000000000B7FA                 db    2
.eh_frame:000000000000B7FB                 db 0DDh
.eh_frame:000000000000B7FC                 db  0Eh
.eh_frame:000000000000B7FD                 db  68h ; h
.eh_frame:000000000000B7FE                 db  57h ; W
.eh_frame:000000000000B7FF                 db  0Eh
.eh_frame:000000000000B800                 db  70h ; p
.eh_frame:000000000000B801                 db  42h ; B
.eh_frame:000000000000B802                 db  0Eh
.eh_frame:000000000000B803                 db  78h ; x
.eh_frame:000000000000B804                 db  42h ; B
.eh_frame:000000000000B805                 db  0Eh
.eh_frame:000000000000B806                 db  80h
.eh_frame:000000000000B807                 db    1
.eh_frame:000000000000B808                 db  42h ; B
.eh_frame:000000000000B809                 db  0Eh
.eh_frame:000000000000B80A                 db  88h
.eh_frame:000000000000B80B                 db    1
.eh_frame:000000000000B80C                 db  42h ; B
.eh_frame:000000000000B80D                 db  0Eh
.eh_frame:000000000000B80E                 db  90h
.eh_frame:000000000000B80F                 db    1
.eh_frame:000000000000B810                 db  53h ; S
.eh_frame:000000000000B811                 db  0Eh
.eh_frame:000000000000B812                 db  60h ; `
.eh_frame:000000000000B813                 db  44h ; D
.eh_frame:000000000000B814                 db  0Ah
.eh_frame:000000000000B815                 db  0Eh
.eh_frame:000000000000B816                 db  38h ; 8
.eh_frame:000000000000B817                 db  41h ; A
.eh_frame:000000000000B818                 db  0Eh
.eh_frame:000000000000B819                 db  30h ; 0
.eh_frame:000000000000B81A                 db  41h ; A
.eh_frame:000000000000B81B                 db  0Eh
.eh_frame:000000000000B81C                 db  28h ; (
.eh_frame:000000000000B81D                 db  42h ; B
.eh_frame:000000000000B81E                 db  0Eh
.eh_frame:000000000000B81F                 db  20h
.eh_frame:000000000000B820                 db  42h ; B
.eh_frame:000000000000B821                 db  0Eh
.eh_frame:000000000000B822                 db  18h
.eh_frame:000000000000B823                 db  42h ; B
.eh_frame:000000000000B824                 db  0Eh
.eh_frame:000000000000B825                 db  10h
.eh_frame:000000000000B826                 db  42h ; B
.eh_frame:000000000000B827                 db  0Eh
.eh_frame:000000000000B828                 db    8
.eh_frame:000000000000B829                 db  44h ; D
.eh_frame:000000000000B82A                 db  0Bh
.eh_frame:000000000000B82B                 db    2
.eh_frame:000000000000B82C                 db  78h ; x
.eh_frame:000000000000B82D                 db  0Ah
.eh_frame:000000000000B82E                 db  0Eh
.eh_frame:000000000000B82F                 db  68h ; h
.eh_frame:000000000000B830                 db  48h ; H
.eh_frame:000000000000B831                 db  0Bh
.eh_frame:000000000000B832                 db  5Ah ; Z
.eh_frame:000000000000B833                 db  0Ah
.eh_frame:000000000000B834                 db  0Eh
.eh_frame:000000000000B835                 db  38h ; 8
.eh_frame:000000000000B836                 db  47h ; G
.eh_frame:000000000000B837                 db  0Eh
.eh_frame:000000000000B838                 db  30h ; 0
.eh_frame:000000000000B839                 db  41h ; A
.eh_frame:000000000000B83A                 db  0Eh
.eh_frame:000000000000B83B                 db  28h ; (
.eh_frame:000000000000B83C                 db  42h ; B
.eh_frame:000000000000B83D                 db  0Eh
.eh_frame:000000000000B83E                 db  20h
.eh_frame:000000000000B83F                 db  42h ; B
.eh_frame:000000000000B840                 db  0Eh
.eh_frame:000000000000B841                 db  18h
.eh_frame:000000000000B842                 db  42h ; B
.eh_frame:000000000000B843                 db  0Eh
.eh_frame:000000000000B844                 db  10h
.eh_frame:000000000000B845                 db  42h ; B
.eh_frame:000000000000B846                 db  0Eh
.eh_frame:000000000000B847                 db    8
.eh_frame:000000000000B848                 db  56h ; V
.eh_frame:000000000000B849                 db  0Bh
.eh_frame:000000000000B84A                 db  5Eh ; ^
.eh_frame:000000000000B84B                 db  0Ah
.eh_frame:000000000000B84C                 db  0Eh
.eh_frame:000000000000B84D                 db  38h ; 8
.eh_frame:000000000000B84E                 db  52h ; R
.eh_frame:000000000000B84F                 db  0Eh
.eh_frame:000000000000B850                 db  30h ; 0
.eh_frame:000000000000B851                 db  41h ; A
.eh_frame:000000000000B852                 db  0Eh
.eh_frame:000000000000B853                 db  28h ; (
.eh_frame:000000000000B854                 db  42h ; B
.eh_frame:000000000000B855                 db  0Eh
.eh_frame:000000000000B856                 db  20h
.eh_frame:000000000000B857                 db  42h ; B
.eh_frame:000000000000B858                 db  0Eh
.eh_frame:000000000000B859                 db  18h
.eh_frame:000000000000B85A                 db  42h ; B
.eh_frame:000000000000B85B                 db  0Eh
.eh_frame:000000000000B85C                 db  10h
.eh_frame:000000000000B85D                 db  42h ; B
.eh_frame:000000000000B85E                 db  0Eh
.eh_frame:000000000000B85F                 db    8
.eh_frame:000000000000B860                 db  4Fh ; O
.eh_frame:000000000000B861                 db  0Bh
.eh_frame:000000000000B862                 db  62h ; b
.eh_frame:000000000000B863                 db  0Ah
.eh_frame:000000000000B864                 db  0Eh
.eh_frame:000000000000B865                 db  38h ; 8
.eh_frame:000000000000B866                 db  50h ; P
.eh_frame:000000000000B867                 db  0Eh
.eh_frame:000000000000B868                 db  30h ; 0
.eh_frame:000000000000B869                 db  41h ; A
.eh_frame:000000000000B86A                 db  0Eh
.eh_frame:000000000000B86B                 db  28h ; (
.eh_frame:000000000000B86C                 db  42h ; B
.eh_frame:000000000000B86D                 db  0Eh
.eh_frame:000000000000B86E                 db  20h
.eh_frame:000000000000B86F                 db  42h ; B
.eh_frame:000000000000B870                 db  0Eh
.eh_frame:000000000000B871                 db  18h
.eh_frame:000000000000B872                 db  42h ; B
.eh_frame:000000000000B873                 db  0Eh
.eh_frame:000000000000B874                 db  10h
.eh_frame:000000000000B875                 db  42h ; B
.eh_frame:000000000000B876                 db  0Eh
.eh_frame:000000000000B877                 db    8
.eh_frame:000000000000B878                 db  55h ; U
.eh_frame:000000000000B879                 db  0Bh
.eh_frame:000000000000B87A                 db  66h ; f
.eh_frame:000000000000B87B                 db  0Eh
.eh_frame:000000000000B87C                 db  68h ; h
.eh_frame:000000000000B87D                 db  42h ; B
.eh_frame:000000000000B87E                 db  0Eh
.eh_frame:000000000000B87F                 db  70h ; p
.eh_frame:000000000000B880                 db  5Ch ; \
.eh_frame:000000000000B881                 db  0Eh
.eh_frame:000000000000B882                 db  68h ; h
.eh_frame:000000000000B883                 db  41h ; A
.eh_frame:000000000000B884                 db  0Eh
.eh_frame:000000000000B885                 db  60h ; `
.eh_frame:000000000000B886                 db  44h ; D
.eh_frame:000000000000B887                 db  0Ah
.eh_frame:000000000000B888                 db  0Eh
.eh_frame:000000000000B889                 db  38h ; 8
.eh_frame:000000000000B88A                 db  41h ; A
.eh_frame:000000000000B88B                 db  0Eh
.eh_frame:000000000000B88C                 db  30h ; 0
.eh_frame:000000000000B88D                 db  41h ; A
.eh_frame:000000000000B88E                 db  0Eh
.eh_frame:000000000000B88F                 db  28h ; (
.eh_frame:000000000000B890                 db  42h ; B
.eh_frame:000000000000B891                 db  0Eh
.eh_frame:000000000000B892                 db  20h
.eh_frame:000000000000B893                 db  42h ; B
.eh_frame:000000000000B894                 db  0Eh
.eh_frame:000000000000B895                 db  18h
.eh_frame:000000000000B896                 db  42h ; B
.eh_frame:000000000000B897                 db  0Eh
.eh_frame:000000000000B898                 db  10h
.eh_frame:000000000000B899                 db  42h ; B
.eh_frame:000000000000B89A                 db  0Eh
.eh_frame:000000000000B89B                 db    8
.eh_frame:000000000000B89C                 db  45h ; E
.eh_frame:000000000000B89D                 db  0Bh
.eh_frame:000000000000B89E                 db  68h ; h
.eh_frame:000000000000B89F                 db  0Ah
.eh_frame:000000000000B8A0                 db  0Eh
.eh_frame:000000000000B8A1                 db  68h ; h
.eh_frame:000000000000B8A2                 db  48h ; H
.eh_frame:000000000000B8A3                 db  0Bh
.eh_frame:000000000000B8A4                 db  72h ; r
.eh_frame:000000000000B8A5                 db  0Eh
.eh_frame:000000000000B8A6                 db  68h ; h
.eh_frame:000000000000B8A7                 db  45h ; E
.eh_frame:000000000000B8A8                 db  0Eh
.eh_frame:000000000000B8A9                 db  70h ; p
.eh_frame:000000000000B8AA                 db  42h ; B
.eh_frame:000000000000B8AB                 db  0Eh
.eh_frame:000000000000B8AC                 db  78h ; x
.eh_frame:000000000000B8AD                 db  42h ; B
.eh_frame:000000000000B8AE                 db  0Eh
.eh_frame:000000000000B8AF                 db  80h
.eh_frame:000000000000B8B0                 db    1
.eh_frame:000000000000B8B1                 db  5Eh ; ^
.eh_frame:000000000000B8B2                 db  0Eh
.eh_frame:000000000000B8B3                 db  60h ; `
.eh_frame:000000000000B8B4                 db  44h ; D
.eh_frame:000000000000B8B5                 db  0Ah
.eh_frame:000000000000B8B6                 db  0Eh
.eh_frame:000000000000B8B7                 db  38h ; 8
.eh_frame:000000000000B8B8                 db  41h ; A
.eh_frame:000000000000B8B9                 db  0Eh
.eh_frame:000000000000B8BA                 db  30h ; 0
.eh_frame:000000000000B8BB                 db  41h ; A
.eh_frame:000000000000B8BC                 db  0Eh
.eh_frame:000000000000B8BD                 db  28h ; (
.eh_frame:000000000000B8BE                 db  42h ; B
.eh_frame:000000000000B8BF                 db  0Eh
.eh_frame:000000000000B8C0                 db  20h
.eh_frame:000000000000B8C1                 db  42h ; B
.eh_frame:000000000000B8C2                 db  0Eh
.eh_frame:000000000000B8C3                 db  18h
.eh_frame:000000000000B8C4                 db  42h ; B
.eh_frame:000000000000B8C5                 db  0Eh
.eh_frame:000000000000B8C6                 db  10h
.eh_frame:000000000000B8C7                 db  42h ; B
.eh_frame:000000000000B8C8                 db  0Eh
.eh_frame:000000000000B8C9                 db    8
.eh_frame:000000000000B8CA                 db  41h ; A
.eh_frame:000000000000B8CB                 db  0Bh
.eh_frame:000000000000B8CC                 db  79h ; y
.eh_frame:000000000000B8CD                 db  0Ah
.eh_frame:000000000000B8CE                 db  0Eh
.eh_frame:000000000000B8CF                 db  68h ; h
.eh_frame:000000000000B8D0                 db  42h ; B
.eh_frame:000000000000B8D1                 db  0Eh
.eh_frame:000000000000B8D2                 db  70h ; p
.eh_frame:000000000000B8D3                 db  42h ; B
.eh_frame:000000000000B8D4                 db  0Eh
.eh_frame:000000000000B8D5                 db  78h ; x
.eh_frame:000000000000B8D6                 db  42h ; B
.eh_frame:000000000000B8D7                 db  0Eh
.eh_frame:000000000000B8D8                 db  80h
.eh_frame:000000000000B8D9                 db    1
.eh_frame:000000000000B8DA                 db  51h ; Q
.eh_frame:000000000000B8DB                 db  0Bh
.eh_frame:000000000000B8DC                 db  10h
.eh_frame:000000000000B8DD                 db    0
.eh_frame:000000000000B8DE                 db    0
.eh_frame:000000000000B8DF                 db    0
.eh_frame:000000000000B8E0                 db 0A8h
.eh_frame:000000000000B8E1                 db  0Bh
.eh_frame:000000000000B8E2                 db    0
.eh_frame:000000000000B8E3                 db    0
.eh_frame:000000000000B8E4                 db  0Ch
.eh_frame:000000000000B8E5                 db 0C5h
.eh_frame:000000000000B8E6                 db 0FFh
.eh_frame:000000000000B8E7                 db 0FFh
.eh_frame:000000000000B8E8                 db  20h
.eh_frame:000000000000B8E9                 db    0
.eh_frame:000000000000B8EA                 db    0
.eh_frame:000000000000B8EB                 db    0
.eh_frame:000000000000B8EC                 db    0
.eh_frame:000000000000B8ED                 db    0
.eh_frame:000000000000B8EE                 db    0
.eh_frame:000000000000B8EF                 db    0
.eh_frame:000000000000B8F0                 db  18h
.eh_frame:000000000000B8F1                 db    0
.eh_frame:000000000000B8F2                 db    0
.eh_frame:000000000000B8F3                 db    0
.eh_frame:000000000000B8F4                 db 0BCh
.eh_frame:000000000000B8F5                 db  0Bh
.eh_frame:000000000000B8F6                 db    0
.eh_frame:000000000000B8F7                 db    0
.eh_frame:000000000000B8F8                 db  18h
.eh_frame:000000000000B8F9                 db 0C5h
.eh_frame:000000000000B8FA                 db 0FFh
.eh_frame:000000000000B8FB                 db 0FFh
.eh_frame:000000000000B8FC                 db  78h ; x
.eh_frame:000000000000B8FD                 db    0
.eh_frame:000000000000B8FE                 db    0
.eh_frame:000000000000B8FF                 db    0
.eh_frame:000000000000B900                 db    0
.eh_frame:000000000000B901                 db  44h ; D
.eh_frame:000000000000B902                 db  0Eh
.eh_frame:000000000000B903                 db  70h ; p
.eh_frame:000000000000B904                 db    2
.eh_frame:000000000000B905                 db  60h ; `
.eh_frame:000000000000B906                 db  0Ah
.eh_frame:000000000000B907                 db  0Eh
.eh_frame:000000000000B908                 db    8
.eh_frame:000000000000B909                 db  41h ; A
.eh_frame:000000000000B90A                 db  0Bh
.eh_frame:000000000000B90B                 db    0
.eh_frame:000000000000B90C                 db  28h ; (
.eh_frame:000000000000B90D                 db    0
.eh_frame:000000000000B90E                 db    0
.eh_frame:000000000000B90F                 db    0
.eh_frame:000000000000B910                 db 0D8h
.eh_frame:000000000000B911                 db  0Bh
.eh_frame:000000000000B912                 db    0
.eh_frame:000000000000B913                 db    0
.eh_frame:000000000000B914                 db  7Ch ; |
.eh_frame:000000000000B915                 db 0C5h
.eh_frame:000000000000B916                 db 0FFh
.eh_frame:000000000000B917                 db 0FFh
.eh_frame:000000000000B918                 db 0D5h
.eh_frame:000000000000B919                 db    0
.eh_frame:000000000000B91A                 db    0
.eh_frame:000000000000B91B                 db    0
.eh_frame:000000000000B91C                 db    0
.eh_frame:000000000000B91D                 db  41h ; A
.eh_frame:000000000000B91E                 db  0Eh
.eh_frame:000000000000B91F                 db  10h
.eh_frame:000000000000B920                 db  86h
.eh_frame:000000000000B921                 db    2
.eh_frame:000000000000B922                 db  41h ; A
.eh_frame:000000000000B923                 db  0Eh
.eh_frame:000000000000B924                 db  18h
.eh_frame:000000000000B925                 db  83h
.eh_frame:000000000000B926                 db    3
.eh_frame:000000000000B927                 db  50h ; P
.eh_frame:000000000000B928                 db  0Eh
.eh_frame:000000000000B929                 db 0D0h
.eh_frame:000000000000B92A                 db    1
.eh_frame:000000000000B92B                 db    2
.eh_frame:000000000000B92C                 db 0ABh
.eh_frame:000000000000B92D                 db  0Ah
.eh_frame:000000000000B92E                 db  0Eh
.eh_frame:000000000000B92F                 db  18h
.eh_frame:000000000000B930                 db  41h ; A
.eh_frame:000000000000B931                 db  0Eh
.eh_frame:000000000000B932                 db  10h
.eh_frame:000000000000B933                 db  41h ; A
.eh_frame:000000000000B934                 db  0Eh
.eh_frame:000000000000B935                 db    8
.eh_frame:000000000000B936                 db  41h ; A
.eh_frame:000000000000B937                 db  0Bh
.eh_frame:000000000000B938                 db  1Ch
.eh_frame:000000000000B939                 db    0
.eh_frame:000000000000B93A                 db    0
.eh_frame:000000000000B93B                 db    0
.eh_frame:000000000000B93C                 db    4
.eh_frame:000000000000B93D                 db  0Ch
.eh_frame:000000000000B93E                 db    0
.eh_frame:000000000000B93F                 db    0
.eh_frame:000000000000B940                 db  30h ; 0
.eh_frame:000000000000B941                 db 0C6h
.eh_frame:000000000000B942                 db 0FFh
.eh_frame:000000000000B943                 db 0FFh
.eh_frame:000000000000B944                 db  80h
.eh_frame:000000000000B945                 db    0
.eh_frame:000000000000B946                 db    0
.eh_frame:000000000000B947                 db    0
.eh_frame:000000000000B948                 db    0
.eh_frame:000000000000B949                 db  41h ; A
.eh_frame:000000000000B94A                 db  0Eh
.eh_frame:000000000000B94B                 db  10h
.eh_frame:000000000000B94C                 db  83h
.eh_frame:000000000000B94D                 db    2
.eh_frame:000000000000B94E                 db    2
.eh_frame:000000000000B94F                 db  7Ah ; z
.eh_frame:000000000000B950                 db  0Eh
.eh_frame:000000000000B951                 db    8
.eh_frame:000000000000B952                 db    0
.eh_frame:000000000000B953                 db    0
.eh_frame:000000000000B954                 db    0
.eh_frame:000000000000B955                 db    0
.eh_frame:000000000000B956                 db    0
.eh_frame:000000000000B957                 db    0
.eh_frame:000000000000B958                 db  18h
.eh_frame:000000000000B959                 db    0
.eh_frame:000000000000B95A                 db    0
.eh_frame:000000000000B95B                 db    0
.eh_frame:000000000000B95C                 db  24h ; $
.eh_frame:000000000000B95D                 db  0Ch
.eh_frame:000000000000B95E                 db    0
.eh_frame:000000000000B95F                 db    0
.eh_frame:000000000000B960                 db  90h
.eh_frame:000000000000B961                 db 0C6h
.eh_frame:000000000000B962                 db 0FFh
.eh_frame:000000000000B963                 db 0FFh
.eh_frame:000000000000B964                 db  1Ah
.eh_frame:000000000000B965                 db    0
.eh_frame:000000000000B966                 db    0
.eh_frame:000000000000B967                 db    0
.eh_frame:000000000000B968                 db    0
.eh_frame:000000000000B969                 db  41h ; A
.eh_frame:000000000000B96A                 db  0Eh
.eh_frame:000000000000B96B                 db  10h
.eh_frame:000000000000B96C                 db  83h
.eh_frame:000000000000B96D                 db    2
.eh_frame:000000000000B96E                 db  53h ; S
.eh_frame:000000000000B96F                 db  0Ah
.eh_frame:000000000000B970                 db  0Eh
.eh_frame:000000000000B971                 db    8
.eh_frame:000000000000B972                 db  41h ; A
.eh_frame:000000000000B973                 db  0Bh
.eh_frame:000000000000B974                 db  10h
.eh_frame:000000000000B975                 db    0
.eh_frame:000000000000B976                 db    0
.eh_frame:000000000000B977                 db    0
.eh_frame:000000000000B978                 db  40h ; @
.eh_frame:000000000000B979                 db  0Ch
.eh_frame:000000000000B97A                 db    0
.eh_frame:000000000000B97B                 db    0
.eh_frame:000000000000B97C                 db  94h
.eh_frame:000000000000B97D                 db 0C6h
.eh_frame:000000000000B97E                 db 0FFh
.eh_frame:000000000000B97F                 db 0FFh
.eh_frame:000000000000B980                 db  24h ; $
.eh_frame:000000000000B981                 db    0
.eh_frame:000000000000B982                 db    0
.eh_frame:000000000000B983                 db    0
.eh_frame:000000000000B984                 db    0
.eh_frame:000000000000B985                 db  5Fh ; _
.eh_frame:000000000000B986                 db  0Eh
.eh_frame:000000000000B987                 db  10h
.eh_frame:000000000000B988                 db  10h
.eh_frame:000000000000B989                 db    0
.eh_frame:000000000000B98A                 db    0
.eh_frame:000000000000B98B                 db    0
.eh_frame:000000000000B98C                 db  54h ; T
.eh_frame:000000000000B98D                 db  0Ch
.eh_frame:000000000000B98E                 db    0
.eh_frame:000000000000B98F                 db    0
.eh_frame:000000000000B990                 db 0B0h
.eh_frame:000000000000B991                 db 0C6h
.eh_frame:000000000000B992                 db 0FFh
.eh_frame:000000000000B993                 db 0FFh
.eh_frame:000000000000B994                 db    2
.eh_frame:000000000000B995                 db    0
.eh_frame:000000000000B996                 db    0
.eh_frame:000000000000B997                 db    0
.eh_frame:000000000000B998                 db    0
.eh_frame:000000000000B999                 db    0
.eh_frame:000000000000B99A                 db    0
.eh_frame:000000000000B99B                 db    0
.eh_frame:000000000000B99C                 db  20h
.eh_frame:000000000000B99D                 db    0
.eh_frame:000000000000B99E                 db    0
.eh_frame:000000000000B99F                 db    0
.eh_frame:000000000000B9A0                 db  68h ; h
.eh_frame:000000000000B9A1                 db  0Ch
.eh_frame:000000000000B9A2                 db    0
.eh_frame:000000000000B9A3                 db    0
.eh_frame:000000000000B9A4                 db 0ACh
.eh_frame:000000000000B9A5                 db 0C6h
.eh_frame:000000000000B9A6                 db 0FFh
.eh_frame:000000000000B9A7                 db 0FFh
.eh_frame:000000000000B9A8                 db  36h ; 6
.eh_frame:000000000000B9A9                 db    0
.eh_frame:000000000000B9AA                 db    0
.eh_frame:000000000000B9AB                 db    0
.eh_frame:000000000000B9AC                 db    0
.eh_frame:000000000000B9AD                 db  44h ; D
.eh_frame:000000000000B9AE                 db  0Eh
.eh_frame:000000000000B9AF                 db  10h
.eh_frame:000000000000B9B0                 db  83h
.eh_frame:000000000000B9B1                 db    2
.eh_frame:000000000000B9B2                 db  5Dh ; ]
.eh_frame:000000000000B9B3                 db  0Ah
.eh_frame:000000000000B9B4                 db  0Eh
.eh_frame:000000000000B9B5                 db    8
.eh_frame:000000000000B9B6                 db  47h ; G
.eh_frame:000000000000B9B7                 db  0Bh
.eh_frame:000000000000B9B8                 db  48h ; H
.eh_frame:000000000000B9B9                 db  0Ah
.eh_frame:000000000000B9BA                 db  0Eh
.eh_frame:000000000000B9BB                 db    8
.eh_frame:000000000000B9BC                 db  41h ; A
.eh_frame:000000000000B9BD                 db  0Bh
.eh_frame:000000000000B9BE                 db    0
.eh_frame:000000000000B9BF                 db    0
.eh_frame:000000000000B9C0                 db  10h
.eh_frame:000000000000B9C1                 db    0
.eh_frame:000000000000B9C2                 db    0
.eh_frame:000000000000B9C3                 db    0
.eh_frame:000000000000B9C4                 db  8Ch
.eh_frame:000000000000B9C5                 db  0Ch
.eh_frame:000000000000B9C6                 db    0
.eh_frame:000000000000B9C7                 db    0
.eh_frame:000000000000B9C8                 db 0C8h
.eh_frame:000000000000B9C9                 db 0C6h
.eh_frame:000000000000B9CA                 db 0FFh
.eh_frame:000000000000B9CB                 db 0FFh
.eh_frame:000000000000B9CC                 db  24h ; $
.eh_frame:000000000000B9CD                 db    0
.eh_frame:000000000000B9CE                 db    0
.eh_frame:000000000000B9CF                 db    0
.eh_frame:000000000000B9D0                 db    0
.eh_frame:000000000000B9D1                 db  5Fh ; _
.eh_frame:000000000000B9D2                 db  0Eh
.eh_frame:000000000000B9D3                 db  10h
.eh_frame:000000000000B9D4                 db  14h
.eh_frame:000000000000B9D5                 db    0
.eh_frame:000000000000B9D6                 db    0
.eh_frame:000000000000B9D7                 db    0
.eh_frame:000000000000B9D8                 db 0A0h
.eh_frame:000000000000B9D9                 db  0Ch
.eh_frame:000000000000B9DA                 db    0
.eh_frame:000000000000B9DB                 db    0
.eh_frame:000000000000B9DC                 db 0E4h
.eh_frame:000000000000B9DD                 db 0C6h
.eh_frame:000000000000B9DE                 db 0FFh
.eh_frame:000000000000B9DF                 db 0FFh
.eh_frame:000000000000B9E0                 db  82h
.eh_frame:000000000000B9E1                 db    0
.eh_frame:000000000000B9E2                 db    0
.eh_frame:000000000000B9E3                 db    0
.eh_frame:000000000000B9E4                 db    0
.eh_frame:000000000000B9E5                 db    2
.eh_frame:000000000000B9E6                 db  5Fh ; _
.eh_frame:000000000000B9E7                 db  0Eh
.eh_frame:000000000000B9E8                 db  10h
.eh_frame:000000000000B9E9                 db  49h ; I
.eh_frame:000000000000B9EA                 db  0Eh
.eh_frame:000000000000B9EB                 db    8
.eh_frame:000000000000B9EC                 db  14h
.eh_frame:000000000000B9ED                 db    0
.eh_frame:000000000000B9EE                 db    0
.eh_frame:000000000000B9EF                 db    0
.eh_frame:000000000000B9F0                 db 0B8h
.eh_frame:000000000000B9F1                 db  0Ch
.eh_frame:000000000000B9F2                 db    0
.eh_frame:000000000000B9F3                 db    0
.eh_frame:000000000000B9F4                 db  5Ch ; \
.eh_frame:000000000000B9F5                 db 0C7h
.eh_frame:000000000000B9F6                 db 0FFh
.eh_frame:000000000000B9F7                 db 0FFh
.eh_frame:000000000000B9F8                 db  4Ah ; J
.eh_frame:000000000000B9F9                 db    0
.eh_frame:000000000000B9FA                 db    0
.eh_frame:000000000000B9FB                 db    0
.eh_frame:000000000000B9FC                 db    0
.eh_frame:000000000000B9FD                 db    2
.eh_frame:000000000000B9FE                 db  45h ; E
.eh_frame:000000000000B9FF                 db  0Eh
.eh_frame:000000000000BA00                 db  10h
.eh_frame:000000000000BA01                 db    0
.eh_frame:000000000000BA02                 db    0
.eh_frame:000000000000BA03                 db    0
.eh_frame:000000000000BA04                 db  18h
.eh_frame:000000000000BA05                 db    0
.eh_frame:000000000000BA06                 db    0
.eh_frame:000000000000BA07                 db    0
.eh_frame:000000000000BA08                 db 0D0h
.eh_frame:000000000000BA09                 db  0Ch
.eh_frame:000000000000BA0A                 db    0
.eh_frame:000000000000BA0B                 db    0
.eh_frame:000000000000BA0C                 db  94h
.eh_frame:000000000000BA0D                 db 0C7h
.eh_frame:000000000000BA0E                 db 0FFh
.eh_frame:000000000000BA0F                 db 0FFh
.eh_frame:000000000000BA10                 db  17h
.eh_frame:000000000000BA11                 db    0
.eh_frame:000000000000BA12                 db    0
.eh_frame:000000000000BA13                 db    0
.eh_frame:000000000000BA14                 db    0
.eh_frame:000000000000BA15                 db  41h ; A
.eh_frame:000000000000BA16                 db  0Eh
.eh_frame:000000000000BA17                 db  10h
.eh_frame:000000000000BA18                 db  83h
.eh_frame:000000000000BA19                 db    2
.eh_frame:000000000000BA1A                 db  51h ; Q
.eh_frame:000000000000BA1B                 db  0Eh
.eh_frame:000000000000BA1C                 db    8
.eh_frame:000000000000BA1D                 db    0
.eh_frame:000000000000BA1E                 db    0
.eh_frame:000000000000BA1F                 db    0
.eh_frame:000000000000BA20                 db  18h
.eh_frame:000000000000BA21                 db    0
.eh_frame:000000000000BA22                 db    0
.eh_frame:000000000000BA23                 db    0
.eh_frame:000000000000BA24                 db 0ECh
.eh_frame:000000000000BA25                 db  0Ch
.eh_frame:000000000000BA26                 db    0
.eh_frame:000000000000BA27                 db    0
.eh_frame:000000000000BA28                 db  98h
.eh_frame:000000000000BA29                 db 0C7h
.eh_frame:000000000000BA2A                 db 0FFh
.eh_frame:000000000000BA2B                 db 0FFh
.eh_frame:000000000000BA2C                 db  2Eh ; .
.eh_frame:000000000000BA2D                 db    0
.eh_frame:000000000000BA2E                 db    0
.eh_frame:000000000000BA2F                 db    0
.eh_frame:000000000000BA30                 db    0
.eh_frame:000000000000BA31                 db  47h ; G
.eh_frame:000000000000BA32                 db  0Eh
.eh_frame:000000000000BA33                 db  10h
.eh_frame:000000000000BA34                 db  61h ; a
.eh_frame:000000000000BA35                 db  0Ah
.eh_frame:000000000000BA36                 db  0Eh
.eh_frame:000000000000BA37                 db    8
.eh_frame:000000000000BA38                 db  41h ; A
.eh_frame:000000000000BA39                 db  0Bh
.eh_frame:000000000000BA3A                 db    0
.eh_frame:000000000000BA3B                 db    0
.eh_frame:000000000000BA3C                 db  24h ; $
.eh_frame:000000000000BA3D                 db    0
.eh_frame:000000000000BA3E                 db    0
.eh_frame:000000000000BA3F                 db    0
.eh_frame:000000000000BA40                 db    8
.eh_frame:000000000000BA41                 db  0Dh
.eh_frame:000000000000BA42                 db    0
.eh_frame:000000000000BA43                 db    0
.eh_frame:000000000000BA44                 db 0ACh
.eh_frame:000000000000BA45                 db 0C7h
.eh_frame:000000000000BA46                 db 0FFh
.eh_frame:000000000000BA47                 db 0FFh
.eh_frame:000000000000BA48                 db  28h ; (
.eh_frame:000000000000BA49                 db    0
.eh_frame:000000000000BA4A                 db    0
.eh_frame:000000000000BA4B                 db    0
.eh_frame:000000000000BA4C                 db    0
.eh_frame:000000000000BA4D                 db  41h ; A
.eh_frame:000000000000BA4E                 db  0Eh
.eh_frame:000000000000BA4F                 db  10h
.eh_frame:000000000000BA50                 db  86h
.eh_frame:000000000000BA51                 db    2
.eh_frame:000000000000BA52                 db  41h ; A
.eh_frame:000000000000BA53                 db  0Eh
.eh_frame:000000000000BA54                 db  18h
.eh_frame:000000000000BA55                 db  83h
.eh_frame:000000000000BA56                 db    3
.eh_frame:000000000000BA57                 db  4Dh ; M
.eh_frame:000000000000BA58                 db  0Eh
.eh_frame:000000000000BA59                 db  20h
.eh_frame:000000000000BA5A                 db  49h ; I
.eh_frame:000000000000BA5B                 db  0Eh
.eh_frame:000000000000BA5C                 db  18h
.eh_frame:000000000000BA5D                 db  47h ; G
.eh_frame:000000000000BA5E                 db  0Eh
.eh_frame:000000000000BA5F                 db  10h
.eh_frame:000000000000BA60                 db  41h ; A
.eh_frame:000000000000BA61                 db  0Eh
.eh_frame:000000000000BA62                 db    8
.eh_frame:000000000000BA63                 db    0
.eh_frame:000000000000BA64                 db  18h
.eh_frame:000000000000BA65                 db    0
.eh_frame:000000000000BA66                 db    0
.eh_frame:000000000000BA67                 db    0
.eh_frame:000000000000BA68                 db  30h ; 0
.eh_frame:000000000000BA69                 db  0Dh
.eh_frame:000000000000BA6A                 db    0
.eh_frame:000000000000BA6B                 db    0
.eh_frame:000000000000BA6C                 db 0B4h
.eh_frame:000000000000BA6D                 db 0C7h
.eh_frame:000000000000BA6E                 db 0FFh
.eh_frame:000000000000BA6F                 db 0FFh
.eh_frame:000000000000BA70                 db  13h
.eh_frame:000000000000BA71                 db    0
.eh_frame:000000000000BA72                 db    0
.eh_frame:000000000000BA73                 db    0
.eh_frame:000000000000BA74                 db    0
.eh_frame:000000000000BA75                 db  41h ; A
.eh_frame:000000000000BA76                 db  0Eh
.eh_frame:000000000000BA77                 db  10h
.eh_frame:000000000000BA78                 db  83h
.eh_frame:000000000000BA79                 db    2
.eh_frame:000000000000BA7A                 db  50h ; P
.eh_frame:000000000000BA7B                 db  0Eh
.eh_frame:000000000000BA7C                 db    8
.eh_frame:000000000000BA7D                 db    0
.eh_frame:000000000000BA7E                 db    0
.eh_frame:000000000000BA7F                 db    0
.eh_frame:000000000000BA80                 db  14h
.eh_frame:000000000000BA81                 db    0
.eh_frame:000000000000BA82                 db    0
.eh_frame:000000000000BA83                 db    0
.eh_frame:000000000000BA84                 db  4Ch ; L
.eh_frame:000000000000BA85                 db  0Dh
.eh_frame:000000000000BA86                 db    0
.eh_frame:000000000000BA87                 db    0
.eh_frame:000000000000BA88                 db 0B8h
.eh_frame:000000000000BA89                 db 0C7h
.eh_frame:000000000000BA8A                 db 0FFh
.eh_frame:000000000000BA8B                 db 0FFh
.eh_frame:000000000000BA8C                 db  35h ; 5
.eh_frame:000000000000BA8D                 db    0
.eh_frame:000000000000BA8E                 db    0
.eh_frame:000000000000BA8F                 db    0
.eh_frame:000000000000BA90                 db    0
.eh_frame:000000000000BA91                 db  4Bh ; K
.eh_frame:000000000000BA92                 db  0Eh
.eh_frame:000000000000BA93                 db  10h
.eh_frame:000000000000BA94                 db    0
.eh_frame:000000000000BA95                 db    0
.eh_frame:000000000000BA96                 db    0
.eh_frame:000000000000BA97                 db    0
.eh_frame:000000000000BA98                 db  48h ; H
.eh_frame:000000000000BA99                 db    0
.eh_frame:000000000000BA9A                 db    0
.eh_frame:000000000000BA9B                 db    0
.eh_frame:000000000000BA9C                 db  64h ; d
.eh_frame:000000000000BA9D                 db  0Dh
.eh_frame:000000000000BA9E                 db    0
.eh_frame:000000000000BA9F                 db    0
.eh_frame:000000000000BAA0                 db 0E0h
.eh_frame:000000000000BAA1                 db 0C7h
.eh_frame:000000000000BAA2                 db 0FFh
.eh_frame:000000000000BAA3                 db 0FFh
.eh_frame:000000000000BAA4                 db    0
.eh_frame:000000000000BAA5                 db    1
.eh_frame:000000000000BAA6                 db    0
.eh_frame:000000000000BAA7                 db    0
.eh_frame:000000000000BAA8                 db    0
.eh_frame:000000000000BAA9                 db  42h ; B
.eh_frame:000000000000BAAA                 db  0Eh
.eh_frame:000000000000BAAB                 db  10h
.eh_frame:000000000000BAAC                 db  8Fh
.eh_frame:000000000000BAAD                 db    2
.eh_frame:000000000000BAAE                 db  42h ; B
.eh_frame:000000000000BAAF                 db  0Eh
.eh_frame:000000000000BAB0                 db  18h
.eh_frame:000000000000BAB1                 db  8Eh
.eh_frame:000000000000BAB2                 db    3
.eh_frame:000000000000BAB3                 db  45h ; E
.eh_frame:000000000000BAB4                 db  0Eh
.eh_frame:000000000000BAB5                 db  20h
.eh_frame:000000000000BAB6                 db  8Dh
.eh_frame:000000000000BAB7                 db    4
.eh_frame:000000000000BAB8                 db  42h ; B
.eh_frame:000000000000BAB9                 db  0Eh
.eh_frame:000000000000BABA                 db  28h ; (
.eh_frame:000000000000BABB                 db  8Ch
.eh_frame:000000000000BABC                 db    5
.eh_frame:000000000000BABD                 db  44h ; D
.eh_frame:000000000000BABE                 db  0Eh
.eh_frame:000000000000BABF                 db  30h ; 0
.eh_frame:000000000000BAC0                 db  86h
.eh_frame:000000000000BAC1                 db    6
.eh_frame:000000000000BAC2                 db  41h ; A
.eh_frame:000000000000BAC3                 db  0Eh
.eh_frame:000000000000BAC4                 db  38h ; 8
.eh_frame:000000000000BAC5                 db  83h
.eh_frame:000000000000BAC6                 db    7
.eh_frame:000000000000BAC7                 db  4Eh ; N
.eh_frame:000000000000BAC8                 db  0Eh
.eh_frame:000000000000BAC9                 db  50h ; P
.eh_frame:000000000000BACA                 db    2
.eh_frame:000000000000BACB                 db  9Dh
.eh_frame:000000000000BACC                 db  0Ah
.eh_frame:000000000000BACD                 db  0Eh
.eh_frame:000000000000BACE                 db  38h ; 8
.eh_frame:000000000000BACF                 db  41h ; A
.eh_frame:000000000000BAD0                 db  0Eh
.eh_frame:000000000000BAD1                 db  30h ; 0
.eh_frame:000000000000BAD2                 db  41h ; A
.eh_frame:000000000000BAD3                 db  0Eh
.eh_frame:000000000000BAD4                 db  28h ; (
.eh_frame:000000000000BAD5                 db  42h ; B
.eh_frame:000000000000BAD6                 db  0Eh
.eh_frame:000000000000BAD7                 db  20h
.eh_frame:000000000000BAD8                 db  42h ; B
.eh_frame:000000000000BAD9                 db  0Eh
.eh_frame:000000000000BADA                 db  18h
.eh_frame:000000000000BADB                 db  42h ; B
.eh_frame:000000000000BADC                 db  0Eh
.eh_frame:000000000000BADD                 db  10h
.eh_frame:000000000000BADE                 db  42h ; B
.eh_frame:000000000000BADF                 db  0Eh
.eh_frame:000000000000BAE0                 db    8
.eh_frame:000000000000BAE1                 db  4Bh ; K
.eh_frame:000000000000BAE2                 db  0Bh
.eh_frame:000000000000BAE3                 db    0
.eh_frame:000000000000BAE4                 db  18h
.eh_frame:000000000000BAE5                 db    0
.eh_frame:000000000000BAE6                 db    0
.eh_frame:000000000000BAE7                 db    0
.eh_frame:000000000000BAE8                 db 0B0h
.eh_frame:000000000000BAE9                 db  0Dh
.eh_frame:000000000000BAEA                 db    0
.eh_frame:000000000000BAEB                 db    0
.eh_frame:000000000000BAEC                 db  94h
.eh_frame:000000000000BAED                 db 0C8h
.eh_frame:000000000000BAEE                 db 0FFh
.eh_frame:000000000000BAEF                 db 0FFh
.eh_frame:000000000000BAF0                 db  21h ; !
.eh_frame:000000000000BAF1                 db    0
.eh_frame:000000000000BAF2                 db    0
.eh_frame:000000000000BAF3                 db    0
.eh_frame:000000000000BAF4                 db    0
.eh_frame:000000000000BAF5                 db  44h ; D
.eh_frame:000000000000BAF6                 db  0Eh
.eh_frame:000000000000BAF7                 db  18h
.eh_frame:000000000000BAF8                 db  42h ; B
.eh_frame:000000000000BAF9                 db  0Eh
.eh_frame:000000000000BAFA                 db  20h
.eh_frame:000000000000BAFB                 db  5Ah ; Z
.eh_frame:000000000000BAFC                 db  0Eh
.eh_frame:000000000000BAFD                 db    8
.eh_frame:000000000000BAFE                 db    0
.eh_frame:000000000000BAFF                 db    0
.eh_frame:000000000000BB00                 db  4Ch ; L
.eh_frame:000000000000BB01                 db    0
.eh_frame:000000000000BB02                 db    0
.eh_frame:000000000000BB03                 db    0
.eh_frame:000000000000BB04                 db 0CCh
.eh_frame:000000000000BB05                 db  0Dh
.eh_frame:000000000000BB06                 db    0
.eh_frame:000000000000BB07                 db    0
.eh_frame:000000000000BB08                 db 0A8h
.eh_frame:000000000000BB09                 db 0C8h
.eh_frame:000000000000BB0A                 db 0FFh
.eh_frame:000000000000BB0B                 db 0FFh
.eh_frame:000000000000BB0C                 db  1Ch
.eh_frame:000000000000BB0D                 db    4
.eh_frame:000000000000BB0E                 db    0
.eh_frame:000000000000BB0F                 db    0
.eh_frame:000000000000BB10                 db    0
.eh_frame:000000000000BB11                 db  42h ; B
.eh_frame:000000000000BB12                 db  0Eh
.eh_frame:000000000000BB13                 db  10h
.eh_frame:000000000000BB14                 db  8Fh
.eh_frame:000000000000BB15                 db    2
.eh_frame:000000000000BB16                 db  42h ; B
.eh_frame:000000000000BB17                 db  0Eh
.eh_frame:000000000000BB18                 db  18h
.eh_frame:000000000000BB19                 db  8Eh
.eh_frame:000000000000BB1A                 db    3
.eh_frame:000000000000BB1B                 db  42h ; B
.eh_frame:000000000000BB1C                 db  0Eh
.eh_frame:000000000000BB1D                 db  20h
.eh_frame:000000000000BB1E                 db  8Dh
.eh_frame:000000000000BB1F                 db    4
.eh_frame:000000000000BB20                 db  42h ; B
.eh_frame:000000000000BB21                 db  0Eh
.eh_frame:000000000000BB22                 db  28h ; (
.eh_frame:000000000000BB23                 db  8Ch
.eh_frame:000000000000BB24                 db    5
.eh_frame:000000000000BB25                 db  41h ; A
.eh_frame:000000000000BB26                 db  0Eh
.eh_frame:000000000000BB27                 db  30h ; 0
.eh_frame:000000000000BB28                 db  86h
.eh_frame:000000000000BB29                 db    6
.eh_frame:000000000000BB2A                 db  41h ; A
.eh_frame:000000000000BB2B                 db  0Eh
.eh_frame:000000000000BB2C                 db  38h ; 8
.eh_frame:000000000000BB2D                 db  83h
.eh_frame:000000000000BB2E                 db    7
.eh_frame:000000000000BB2F                 db  44h ; D
.eh_frame:000000000000BB30                 db  0Eh
.eh_frame:000000000000BB31                 db  60h ; `
.eh_frame:000000000000BB32                 db    2
.eh_frame:000000000000BB33                 db 0E9h
.eh_frame:000000000000BB34                 db  0Ah
.eh_frame:000000000000BB35                 db  0Eh
.eh_frame:000000000000BB36                 db  38h ; 8
.eh_frame:000000000000BB37                 db  41h ; A
.eh_frame:000000000000BB38                 db  0Eh
.eh_frame:000000000000BB39                 db  30h ; 0
.eh_frame:000000000000BB3A                 db  41h ; A
.eh_frame:000000000000BB3B                 db  0Eh
.eh_frame:000000000000BB3C                 db  28h ; (
.eh_frame:000000000000BB3D                 db  42h ; B
.eh_frame:000000000000BB3E                 db  0Eh
.eh_frame:000000000000BB3F                 db  20h
.eh_frame:000000000000BB40                 db  42h ; B
.eh_frame:000000000000BB41                 db  0Eh
.eh_frame:000000000000BB42                 db  18h
.eh_frame:000000000000BB43                 db  42h ; B
.eh_frame:000000000000BB44                 db  0Eh
.eh_frame:000000000000BB45                 db  10h
.eh_frame:000000000000BB46                 db  42h ; B
.eh_frame:000000000000BB47                 db  0Eh
.eh_frame:000000000000BB48                 db    8
.eh_frame:000000000000BB49                 db  47h ; G
.eh_frame:000000000000BB4A                 db  0Bh
.eh_frame:000000000000BB4B                 db    0
.eh_frame:000000000000BB4C                 db    0
.eh_frame:000000000000BB4D                 db    0
.eh_frame:000000000000BB4E                 db    0
.eh_frame:000000000000BB4F                 db    0
.eh_frame:000000000000BB50                 db  4Ch ; L
.eh_frame:000000000000BB51                 db    0
.eh_frame:000000000000BB52                 db    0
.eh_frame:000000000000BB53                 db    0
.eh_frame:000000000000BB54                 db  1Ch
.eh_frame:000000000000BB55                 db  0Eh
.eh_frame:000000000000BB56                 db    0
.eh_frame:000000000000BB57                 db    0
.eh_frame:000000000000BB58                 db  78h ; x
.eh_frame:000000000000BB59                 db 0CCh
.eh_frame:000000000000BB5A                 db 0FFh
.eh_frame:000000000000BB5B                 db 0FFh
.eh_frame:000000000000BB5C                 db  1Ch
.eh_frame:000000000000BB5D                 db    4
.eh_frame:000000000000BB5E                 db    0
.eh_frame:000000000000BB5F                 db    0
.eh_frame:000000000000BB60                 db    0
.eh_frame:000000000000BB61                 db  42h ; B
.eh_frame:000000000000BB62                 db  0Eh
.eh_frame:000000000000BB63                 db  10h
.eh_frame:000000000000BB64                 db  8Fh
.eh_frame:000000000000BB65                 db    2
.eh_frame:000000000000BB66                 db  42h ; B
.eh_frame:000000000000BB67                 db  0Eh
.eh_frame:000000000000BB68                 db  18h
.eh_frame:000000000000BB69                 db  8Eh
.eh_frame:000000000000BB6A                 db    3
.eh_frame:000000000000BB6B                 db  42h ; B
.eh_frame:000000000000BB6C                 db  0Eh
.eh_frame:000000000000BB6D                 db  20h
.eh_frame:000000000000BB6E                 db  8Dh
.eh_frame:000000000000BB6F                 db    4
.eh_frame:000000000000BB70                 db  42h ; B
.eh_frame:000000000000BB71                 db  0Eh
.eh_frame:000000000000BB72                 db  28h ; (
.eh_frame:000000000000BB73                 db  8Ch
.eh_frame:000000000000BB74                 db    5
.eh_frame:000000000000BB75                 db  41h ; A
.eh_frame:000000000000BB76                 db  0Eh
.eh_frame:000000000000BB77                 db  30h ; 0
.eh_frame:000000000000BB78                 db  86h
.eh_frame:000000000000BB79                 db    6
.eh_frame:000000000000BB7A                 db  41h ; A
.eh_frame:000000000000BB7B                 db  0Eh
.eh_frame:000000000000BB7C                 db  38h ; 8
.eh_frame:000000000000BB7D                 db  83h
.eh_frame:000000000000BB7E                 db    7
.eh_frame:000000000000BB7F                 db  44h ; D
.eh_frame:000000000000BB80                 db  0Eh
.eh_frame:000000000000BB81                 db  60h ; `
.eh_frame:000000000000BB82                 db    2
.eh_frame:000000000000BB83                 db 0E9h
.eh_frame:000000000000BB84                 db  0Ah
.eh_frame:000000000000BB85                 db  0Eh
.eh_frame:000000000000BB86                 db  38h ; 8
.eh_frame:000000000000BB87                 db  41h ; A
.eh_frame:000000000000BB88                 db  0Eh
.eh_frame:000000000000BB89                 db  30h ; 0
.eh_frame:000000000000BB8A                 db  41h ; A
.eh_frame:000000000000BB8B                 db  0Eh
.eh_frame:000000000000BB8C                 db  28h ; (
.eh_frame:000000000000BB8D                 db  42h ; B
.eh_frame:000000000000BB8E                 db  0Eh
.eh_frame:000000000000BB8F                 db  20h
.eh_frame:000000000000BB90                 db  42h ; B
.eh_frame:000000000000BB91                 db  0Eh
.eh_frame:000000000000BB92                 db  18h
.eh_frame:000000000000BB93                 db  42h ; B
.eh_frame:000000000000BB94                 db  0Eh
.eh_frame:000000000000BB95                 db  10h
.eh_frame:000000000000BB96                 db  42h ; B
.eh_frame:000000000000BB97                 db  0Eh
.eh_frame:000000000000BB98                 db    8
.eh_frame:000000000000BB99                 db  47h ; G
.eh_frame:000000000000BB9A                 db  0Bh
.eh_frame:000000000000BB9B                 db    0
.eh_frame:000000000000BB9C                 db    0
.eh_frame:000000000000BB9D                 db    0
.eh_frame:000000000000BB9E                 db    0
.eh_frame:000000000000BB9F                 db    0
.eh_frame:000000000000BBA0                 db  34h ; 4
.eh_frame:000000000000BBA1                 db    0
.eh_frame:000000000000BBA2                 db    0
.eh_frame:000000000000BBA3                 db    0
.eh_frame:000000000000BBA4                 db  6Ch ; l
.eh_frame:000000000000BBA5                 db  0Eh
.eh_frame:000000000000BBA6                 db    0
.eh_frame:000000000000BBA7                 db    0
.eh_frame:000000000000BBA8                 db  48h ; H
.eh_frame:000000000000BBA9                 db 0D0h
.eh_frame:000000000000BBAA                 db 0FFh
.eh_frame:000000000000BBAB                 db 0FFh
.eh_frame:000000000000BBAC                 db  7Bh ; {
.eh_frame:000000000000BBAD                 db    0
.eh_frame:000000000000BBAE                 db    0
.eh_frame:000000000000BBAF                 db    0
.eh_frame:000000000000BBB0                 db    0
.eh_frame:000000000000BBB1                 db  42h ; B
.eh_frame:000000000000BBB2                 db  0Eh
.eh_frame:000000000000BBB3                 db  10h
.eh_frame:000000000000BBB4                 db  8Ch
.eh_frame:000000000000BBB5                 db    2
.eh_frame:000000000000BBB6                 db  41h ; A
.eh_frame:000000000000BBB7                 db  0Eh
.eh_frame:000000000000BBB8                 db  18h
.eh_frame:000000000000BBB9                 db  86h
.eh_frame:000000000000BBBA                 db    3
.eh_frame:000000000000BBBB                 db  41h ; A
.eh_frame:000000000000BBBC                 db  0Eh
.eh_frame:000000000000BBBD                 db  20h
.eh_frame:000000000000BBBE                 db  83h
.eh_frame:000000000000BBBF                 db    4
.eh_frame:000000000000BBC0                 db  7Dh ; }
.eh_frame:000000000000BBC1                 db  0Ah
.eh_frame:000000000000BBC2                 db  0Eh
.eh_frame:000000000000BBC3                 db  18h
.eh_frame:000000000000BBC4                 db  41h ; A
.eh_frame:000000000000BBC5                 db  0Eh
.eh_frame:000000000000BBC6                 db  10h
.eh_frame:000000000000BBC7                 db  42h ; B
.eh_frame:000000000000BBC8                 db  0Eh
.eh_frame:000000000000BBC9                 db    8
.eh_frame:000000000000BBCA                 db  44h ; D
.eh_frame:000000000000BBCB                 db  0Bh
.eh_frame:000000000000BBCC                 db  60h ; `
.eh_frame:000000000000BBCD                 db  0Ah
.eh_frame:000000000000BBCE                 db  0Eh
.eh_frame:000000000000BBCF                 db  18h
.eh_frame:000000000000BBD0                 db  41h ; A
.eh_frame:000000000000BBD1                 db  0Eh
.eh_frame:000000000000BBD2                 db  10h
.eh_frame:000000000000BBD3                 db  42h ; B
.eh_frame:000000000000BBD4                 db  0Eh
.eh_frame:000000000000BBD5                 db    8
.eh_frame:000000000000BBD6                 db  45h ; E
.eh_frame:000000000000BBD7                 db  0Bh
.eh_frame:000000000000BBD8                 db  34h ; 4
.eh_frame:000000000000BBD9                 db    0
.eh_frame:000000000000BBDA                 db    0
.eh_frame:000000000000BBDB                 db    0
.eh_frame:000000000000BBDC                 db 0A4h
.eh_frame:000000000000BBDD                 db  0Eh
.eh_frame:000000000000BBDE                 db    0
.eh_frame:000000000000BBDF                 db    0
.eh_frame:000000000000BBE0                 db  90h
.eh_frame:000000000000BBE1                 db 0D0h
.eh_frame:000000000000BBE2                 db 0FFh
.eh_frame:000000000000BBE3                 db 0FFh
.eh_frame:000000000000BBE4                 db  7Eh ; ~
.eh_frame:000000000000BBE5                 db    2
.eh_frame:000000000000BBE6                 db    0
.eh_frame:000000000000BBE7                 db    0
.eh_frame:000000000000BBE8                 db    0
.eh_frame:000000000000BBE9                 db  42h ; B
.eh_frame:000000000000BBEA                 db  0Eh
.eh_frame:000000000000BBEB                 db  10h
.eh_frame:000000000000BBEC                 db  8Ch
.eh_frame:000000000000BBED                 db    2
.eh_frame:000000000000BBEE                 db  41h ; A
.eh_frame:000000000000BBEF                 db  0Eh
.eh_frame:000000000000BBF0                 db  18h
.eh_frame:000000000000BBF1                 db  86h
.eh_frame:000000000000BBF2                 db    3
.eh_frame:000000000000BBF3                 db  43h ; C
.eh_frame:000000000000BBF4                 db  0Eh
.eh_frame:000000000000BBF5                 db  20h
.eh_frame:000000000000BBF6                 db  83h
.eh_frame:000000000000BBF7                 db    4
.eh_frame:000000000000BBF8                 db  44h ; D
.eh_frame:000000000000BBF9                 db  0Eh
.eh_frame:000000000000BBFA                 db  70h ; p
.eh_frame:000000000000BBFB                 db    2
.eh_frame:000000000000BBFC                 db 0F0h
.eh_frame:000000000000BBFD                 db  0Ah
.eh_frame:000000000000BBFE                 db  0Eh
.eh_frame:000000000000BBFF                 db  20h
.eh_frame:000000000000BC00                 db  41h ; A
.eh_frame:000000000000BC01                 db  0Eh
.eh_frame:000000000000BC02                 db  18h
.eh_frame:000000000000BC03                 db  41h ; A
.eh_frame:000000000000BC04                 db  0Eh
.eh_frame:000000000000BC05                 db  10h
.eh_frame:000000000000BC06                 db  42h ; B
.eh_frame:000000000000BC07                 db  0Eh
.eh_frame:000000000000BC08                 db    8
.eh_frame:000000000000BC09                 db  42h ; B
.eh_frame:000000000000BC0A                 db  0Bh
.eh_frame:000000000000BC0B                 db    0
.eh_frame:000000000000BC0C                 db    0
.eh_frame:000000000000BC0D                 db    0
.eh_frame:000000000000BC0E                 db    0
.eh_frame:000000000000BC0F                 db    0
.eh_frame:000000000000BC10                 db  1Ch
.eh_frame:000000000000BC11                 db    0
.eh_frame:000000000000BC12                 db    0
.eh_frame:000000000000BC13                 db    0
.eh_frame:000000000000BC14                 db 0DCh
.eh_frame:000000000000BC15                 db  0Eh
.eh_frame:000000000000BC16                 db    0
.eh_frame:000000000000BC17                 db    0
.eh_frame:000000000000BC18                 db 0D8h
.eh_frame:000000000000BC19                 db 0D2h
.eh_frame:000000000000BC1A                 db 0FFh
.eh_frame:000000000000BC1B                 db 0FFh
.eh_frame:000000000000BC1C                 db  40h ; @
.eh_frame:000000000000BC1D                 db    0
.eh_frame:000000000000BC1E                 db    0
.eh_frame:000000000000BC1F                 db    0
.eh_frame:000000000000BC20                 db    0
.eh_frame:000000000000BC21                 db  44h ; D
.eh_frame:000000000000BC22                 db  0Eh
.eh_frame:000000000000BC23                 db  10h
.eh_frame:000000000000BC24                 db  83h
.eh_frame:000000000000BC25                 db    2
.eh_frame:000000000000BC26                 db  5Ah ; Z
.eh_frame:000000000000BC27                 db  0Ah
.eh_frame:000000000000BC28                 db  0Eh
.eh_frame:000000000000BC29                 db    8
.eh_frame:000000000000BC2A                 db  4Ah ; J
.eh_frame:000000000000BC2B                 db  0Bh
.eh_frame:000000000000BC2C                 db  53h ; S
.eh_frame:000000000000BC2D                 db  0Eh
.eh_frame:000000000000BC2E                 db    8
.eh_frame:000000000000BC2F                 db    0
.eh_frame:000000000000BC30                 db  2Ch ; ,
.eh_frame:000000000000BC31                 db    0
.eh_frame:000000000000BC32                 db    0
.eh_frame:000000000000BC33                 db    0
.eh_frame:000000000000BC34                 db 0FCh
.eh_frame:000000000000BC35                 db  0Eh
.eh_frame:000000000000BC36                 db    0
.eh_frame:000000000000BC37                 db    0
.eh_frame:000000000000BC38                 db 0F8h
.eh_frame:000000000000BC39                 db 0D2h
.eh_frame:000000000000BC3A                 db 0FFh
.eh_frame:000000000000BC3B                 db 0FFh
.eh_frame:000000000000BC3C                 db  57h ; W
.eh_frame:000000000000BC3D                 db    0
.eh_frame:000000000000BC3E                 db    0
.eh_frame:000000000000BC3F                 db    0
.eh_frame:000000000000BC40                 db    0
.eh_frame:000000000000BC41                 db  63h ; c
.eh_frame:000000000000BC42                 db  0Eh
.eh_frame:000000000000BC43                 db  10h
.eh_frame:000000000000BC44                 db  8Ch
.eh_frame:000000000000BC45                 db    2
.eh_frame:000000000000BC46                 db  41h ; A
.eh_frame:000000000000BC47                 db  0Eh
.eh_frame:000000000000BC48                 db  18h
.eh_frame:000000000000BC49                 db  86h
.eh_frame:000000000000BC4A                 db    3
.eh_frame:000000000000BC4B                 db  44h ; D
.eh_frame:000000000000BC4C                 db  0Eh
.eh_frame:000000000000BC4D                 db  20h
.eh_frame:000000000000BC4E                 db  83h
.eh_frame:000000000000BC4F                 db    4
.eh_frame:000000000000BC50                 db  6Bh ; k
.eh_frame:000000000000BC51                 db  0Eh
.eh_frame:000000000000BC52                 db  18h
.eh_frame:000000000000BC53                 db  41h ; A
.eh_frame:000000000000BC54                 db  0Eh
.eh_frame:000000000000BC55                 db  10h
.eh_frame:000000000000BC56                 db  42h ; B
.eh_frame:000000000000BC57                 db  0Eh
.eh_frame:000000000000BC58                 db    8
.eh_frame:000000000000BC59                 db    0
.eh_frame:000000000000BC5A                 db    0
.eh_frame:000000000000BC5B                 db    0
.eh_frame:000000000000BC5C                 db    0
.eh_frame:000000000000BC5D                 db    0
.eh_frame:000000000000BC5E                 db    0
.eh_frame:000000000000BC5F                 db    0
.eh_frame:000000000000BC60                 db  3Ch ; <
.eh_frame:000000000000BC61                 db    0
.eh_frame:000000000000BC62                 db    0
.eh_frame:000000000000BC63                 db    0
.eh_frame:000000000000BC64                 db  2Ch ; ,
.eh_frame:000000000000BC65                 db  0Fh
.eh_frame:000000000000BC66                 db    0
.eh_frame:000000000000BC67                 db    0
.eh_frame:000000000000BC68                 db  28h ; (
.eh_frame:000000000000BC69                 db 0D3h
.eh_frame:000000000000BC6A                 db 0FFh
.eh_frame:000000000000BC6B                 db 0FFh
.eh_frame:000000000000BC6C                 db  83h
.eh_frame:000000000000BC6D                 db    0
.eh_frame:000000000000BC6E                 db    0
.eh_frame:000000000000BC6F                 db    0
.eh_frame:000000000000BC70                 db    0
.eh_frame:000000000000BC71                 db  42h ; B
.eh_frame:000000000000BC72                 db  0Eh
.eh_frame:000000000000BC73                 db  10h
.eh_frame:000000000000BC74                 db  8Dh
.eh_frame:000000000000BC75                 db    2
.eh_frame:000000000000BC76                 db  42h ; B
.eh_frame:000000000000BC77                 db  0Eh
.eh_frame:000000000000BC78                 db  18h
.eh_frame:000000000000BC79                 db  8Ch
.eh_frame:000000000000BC7A                 db    3
.eh_frame:000000000000BC7B                 db  44h ; D
.eh_frame:000000000000BC7C                 db  0Eh
.eh_frame:000000000000BC7D                 db  20h
.eh_frame:000000000000BC7E                 db  86h
.eh_frame:000000000000BC7F                 db    4
.eh_frame:000000000000BC80                 db  41h ; A
.eh_frame:000000000000BC81                 db  0Eh
.eh_frame:000000000000BC82                 db  28h ; (
.eh_frame:000000000000BC83                 db  83h
.eh_frame:000000000000BC84                 db    5
.eh_frame:000000000000BC85                 db  4Ah ; J
.eh_frame:000000000000BC86                 db  0Eh
.eh_frame:000000000000BC87                 db  40h ; @
.eh_frame:000000000000BC88                 db    2
.eh_frame:000000000000BC89                 db  64h ; d
.eh_frame:000000000000BC8A                 db  0Ah
.eh_frame:000000000000BC8B                 db  0Eh
.eh_frame:000000000000BC8C                 db  28h ; (
.eh_frame:000000000000BC8D                 db  41h ; A
.eh_frame:000000000000BC8E                 db  0Eh
.eh_frame:000000000000BC8F                 db  20h
.eh_frame:000000000000BC90                 db  41h ; A
.eh_frame:000000000000BC91                 db  0Eh
.eh_frame:000000000000BC92                 db  18h
.eh_frame:000000000000BC93                 db  42h ; B
.eh_frame:000000000000BC94                 db  0Eh
.eh_frame:000000000000BC95                 db  10h
.eh_frame:000000000000BC96                 db  42h ; B
.eh_frame:000000000000BC97                 db  0Eh
.eh_frame:000000000000BC98                 db    8
.eh_frame:000000000000BC99                 db  41h ; A
.eh_frame:000000000000BC9A                 db  0Bh
.eh_frame:000000000000BC9B                 db    0
.eh_frame:000000000000BC9C                 db    0
.eh_frame:000000000000BC9D                 db    0
.eh_frame:000000000000BC9E                 db    0
.eh_frame:000000000000BC9F                 db    0
.eh_frame:000000000000BCA0                 db  4Ch ; L
.eh_frame:000000000000BCA1                 db    0
.eh_frame:000000000000BCA2                 db    0
.eh_frame:000000000000BCA3                 db    0
.eh_frame:000000000000BCA4                 db  6Ch ; l
.eh_frame:000000000000BCA5                 db  0Fh
.eh_frame:000000000000BCA6                 db    0
.eh_frame:000000000000BCA7                 db    0
.eh_frame:000000000000BCA8                 db  78h ; x
.eh_frame:000000000000BCA9                 db 0D3h
.eh_frame:000000000000BCAA                 db 0FFh
.eh_frame:000000000000BCAB                 db 0FFh
.eh_frame:000000000000BCAC                 db  7Dh ; }
.eh_frame:000000000000BCAD                 db    0
.eh_frame:000000000000BCAE                 db    0
.eh_frame:000000000000BCAF                 db    0
.eh_frame:000000000000BCB0                 db    0
.eh_frame:000000000000BCB1                 db  42h ; B
.eh_frame:000000000000BCB2                 db  0Eh
.eh_frame:000000000000BCB3                 db  10h
.eh_frame:000000000000BCB4                 db  8Ch
.eh_frame:000000000000BCB5                 db    2
.eh_frame:000000000000BCB6                 db  41h ; A
.eh_frame:000000000000BCB7                 db  0Eh
.eh_frame:000000000000BCB8                 db  18h
.eh_frame:000000000000BCB9                 db  86h
.eh_frame:000000000000BCBA                 db    3
.eh_frame:000000000000BCBB                 db  44h ; D
.eh_frame:000000000000BCBC                 db  0Eh
.eh_frame:000000000000BCBD                 db  20h
.eh_frame:000000000000BCBE                 db  83h
.eh_frame:000000000000BCBF                 db    4
.eh_frame:000000000000BCC0                 db  69h ; i
.eh_frame:000000000000BCC1                 db  0Ah
.eh_frame:000000000000BCC2                 db  0Eh
.eh_frame:000000000000BCC3                 db  18h
.eh_frame:000000000000BCC4                 db  41h ; A
.eh_frame:000000000000BCC5                 db  0Eh
.eh_frame:000000000000BCC6                 db  10h
.eh_frame:000000000000BCC7                 db  42h ; B
.eh_frame:000000000000BCC8                 db  0Eh
.eh_frame:000000000000BCC9                 db    8
.eh_frame:000000000000BCCA                 db  45h ; E
.eh_frame:000000000000BCCB                 db  0Bh
.eh_frame:000000000000BCCC                 db  55h ; U
.eh_frame:000000000000BCCD                 db  0Ah
.eh_frame:000000000000BCCE                 db  0Eh
.eh_frame:000000000000BCCF                 db  18h
.eh_frame:000000000000BCD0                 db  41h ; A
.eh_frame:000000000000BCD1                 db  0Eh
.eh_frame:000000000000BCD2                 db  10h
.eh_frame:000000000000BCD3                 db  42h ; B
.eh_frame:000000000000BCD4                 db  0Eh
.eh_frame:000000000000BCD5                 db    8
.eh_frame:000000000000BCD6                 db  48h ; H
.eh_frame:000000000000BCD7                 db  0Bh
.eh_frame:000000000000BCD8                 db  41h ; A
.eh_frame:000000000000BCD9                 db  0Ah
.eh_frame:000000000000BCDA                 db  0Eh
.eh_frame:000000000000BCDB                 db  18h
.eh_frame:000000000000BCDC                 db  46h ; F
.eh_frame:000000000000BCDD                 db  0Eh
.eh_frame:000000000000BCDE                 db  10h
.eh_frame:000000000000BCDF                 db  42h ; B
.eh_frame:000000000000BCE0                 db  0Eh
.eh_frame:000000000000BCE1                 db    8
.eh_frame:000000000000BCE2                 db  47h ; G
.eh_frame:000000000000BCE3                 db  0Bh
.eh_frame:000000000000BCE4                 db  49h ; I
.eh_frame:000000000000BCE5                 db  0Eh
.eh_frame:000000000000BCE6                 db  18h
.eh_frame:000000000000BCE7                 db  41h ; A
.eh_frame:000000000000BCE8                 db  0Eh
.eh_frame:000000000000BCE9                 db  10h
.eh_frame:000000000000BCEA                 db  42h ; B
.eh_frame:000000000000BCEB                 db  0Eh
.eh_frame:000000000000BCEC                 db    8
.eh_frame:000000000000BCED                 db    0
.eh_frame:000000000000BCEE                 db    0
.eh_frame:000000000000BCEF                 db    0
.eh_frame:000000000000BCF0                 db  1Ch
.eh_frame:000000000000BCF1                 db    0
.eh_frame:000000000000BCF2                 db    0
.eh_frame:000000000000BCF3                 db    0
.eh_frame:000000000000BCF4                 db 0BCh
.eh_frame:000000000000BCF5                 db  0Fh
.eh_frame:000000000000BCF6                 db    0
.eh_frame:000000000000BCF7                 db    0
.eh_frame:000000000000BCF8                 db 0A8h
.eh_frame:000000000000BCF9                 db 0D3h
.eh_frame:000000000000BCFA                 db 0FFh
.eh_frame:000000000000BCFB                 db 0FFh
.eh_frame:000000000000BCFC                 db  60h ; `
.eh_frame:000000000000BCFD                 db    0
.eh_frame:000000000000BCFE                 db    0
.eh_frame:000000000000BCFF                 db    0
.eh_frame:000000000000BD00                 db    0
.eh_frame:000000000000BD01                 db  44h ; D
.eh_frame:000000000000BD02                 db  0Eh
.eh_frame:000000000000BD03                 db  10h
.eh_frame:000000000000BD04                 db  75h ; u
.eh_frame:000000000000BD05                 db  0Ah
.eh_frame:000000000000BD06                 db  0Eh
.eh_frame:000000000000BD07                 db    8
.eh_frame:000000000000BD08                 db  47h ; G
.eh_frame:000000000000BD09                 db  0Bh
.eh_frame:000000000000BD0A                 db  5Fh ; _
.eh_frame:000000000000BD0B                 db  0Eh
.eh_frame:000000000000BD0C                 db    8
.eh_frame:000000000000BD0D                 db    0
.eh_frame:000000000000BD0E                 db    0
.eh_frame:000000000000BD0F                 db    0
.eh_frame:000000000000BD10                 db  1Ch
.eh_frame:000000000000BD11                 db    0
.eh_frame:000000000000BD12                 db    0
.eh_frame:000000000000BD13                 db    0
.eh_frame:000000000000BD14                 db 0DCh
.eh_frame:000000000000BD15                 db  0Fh
.eh_frame:000000000000BD16                 db    0
.eh_frame:000000000000BD17                 db    0
.eh_frame:000000000000BD18                 db 0E8h
.eh_frame:000000000000BD19                 db 0D3h
.eh_frame:000000000000BD1A                 db 0FFh
.eh_frame:000000000000BD1B                 db 0FFh
.eh_frame:000000000000BD1C                 db  3Ch ; <
.eh_frame:000000000000BD1D                 db    0
.eh_frame:000000000000BD1E                 db    0
.eh_frame:000000000000BD1F                 db    0
.eh_frame:000000000000BD20                 db    0
.eh_frame:000000000000BD21                 db  44h ; D
.eh_frame:000000000000BD22                 db  0Eh
.eh_frame:000000000000BD23                 db  10h
.eh_frame:000000000000BD24                 db  61h ; a
.eh_frame:000000000000BD25                 db  0Ah
.eh_frame:000000000000BD26                 db  0Eh
.eh_frame:000000000000BD27                 db    8
.eh_frame:000000000000BD28                 db  4Bh ; K
.eh_frame:000000000000BD29                 db  0Bh
.eh_frame:000000000000BD2A                 db  4Bh ; K
.eh_frame:000000000000BD2B                 db  0Eh
.eh_frame:000000000000BD2C                 db    8
.eh_frame:000000000000BD2D                 db    0
.eh_frame:000000000000BD2E                 db    0
.eh_frame:000000000000BD2F                 db    0
.eh_frame:000000000000BD30                 db  44h ; D
.eh_frame:000000000000BD31                 db    0
.eh_frame:000000000000BD32                 db    0
.eh_frame:000000000000BD33                 db    0
.eh_frame:000000000000BD34                 db 0FCh
.eh_frame:000000000000BD35                 db  0Fh
.eh_frame:000000000000BD36                 db    0
.eh_frame:000000000000BD37                 db    0
.eh_frame:000000000000BD38                 db    8
.eh_frame:000000000000BD39                 db 0D4h
.eh_frame:000000000000BD3A                 db 0FFh
.eh_frame:000000000000BD3B                 db 0FFh
.eh_frame:000000000000BD3C                 db  65h ; e
.eh_frame:000000000000BD3D                 db    0
.eh_frame:000000000000BD3E                 db    0
.eh_frame:000000000000BD3F                 db    0
.eh_frame:000000000000BD40                 db    0
.eh_frame:000000000000BD41                 db  42h ; B
.eh_frame:000000000000BD42                 db  0Eh
.eh_frame:000000000000BD43                 db  10h
.eh_frame:000000000000BD44                 db  8Fh
.eh_frame:000000000000BD45                 db    2
.eh_frame:000000000000BD46                 db  42h ; B
.eh_frame:000000000000BD47                 db  0Eh
.eh_frame:000000000000BD48                 db  18h
.eh_frame:000000000000BD49                 db  8Eh
.eh_frame:000000000000BD4A                 db    3
.eh_frame:000000000000BD4B                 db  45h ; E
.eh_frame:000000000000BD4C                 db  0Eh
.eh_frame:000000000000BD4D                 db  20h
.eh_frame:000000000000BD4E                 db  8Dh
.eh_frame:000000000000BD4F                 db    4
.eh_frame:000000000000BD50                 db  42h ; B
.eh_frame:000000000000BD51                 db  0Eh
.eh_frame:000000000000BD52                 db  28h ; (
.eh_frame:000000000000BD53                 db  8Ch
.eh_frame:000000000000BD54                 db    5
.eh_frame:000000000000BD55                 db  48h ; H
.eh_frame:000000000000BD56                 db  0Eh
.eh_frame:000000000000BD57                 db  30h ; 0
.eh_frame:000000000000BD58                 db  86h
.eh_frame:000000000000BD59                 db    6
.eh_frame:000000000000BD5A                 db  48h ; H
.eh_frame:000000000000BD5B                 db  0Eh
.eh_frame:000000000000BD5C                 db  38h ; 8
.eh_frame:000000000000BD5D                 db  83h
.eh_frame:000000000000BD5E                 db    7
.eh_frame:000000000000BD5F                 db  4Dh ; M
.eh_frame:000000000000BD60                 db  0Eh
.eh_frame:000000000000BD61                 db  40h ; @
.eh_frame:000000000000BD62                 db  72h ; r
.eh_frame:000000000000BD63                 db  0Eh
.eh_frame:000000000000BD64                 db  38h ; 8
.eh_frame:000000000000BD65                 db  41h ; A
.eh_frame:000000000000BD66                 db  0Eh
.eh_frame:000000000000BD67                 db  30h ; 0
.eh_frame:000000000000BD68                 db  41h ; A
.eh_frame:000000000000BD69                 db  0Eh
.eh_frame:000000000000BD6A                 db  28h ; (
.eh_frame:000000000000BD6B                 db  42h ; B
.eh_frame:000000000000BD6C                 db  0Eh
.eh_frame:000000000000BD6D                 db  20h
.eh_frame:000000000000BD6E                 db  42h ; B
.eh_frame:000000000000BD6F                 db  0Eh
.eh_frame:000000000000BD70                 db  18h
.eh_frame:000000000000BD71                 db  42h ; B
.eh_frame:000000000000BD72                 db  0Eh
.eh_frame:000000000000BD73                 db  10h
.eh_frame:000000000000BD74                 db  42h ; B
.eh_frame:000000000000BD75                 db  0Eh
.eh_frame:000000000000BD76                 db    8
.eh_frame:000000000000BD77                 db    0
.eh_frame:000000000000BD78                 db  14h
.eh_frame:000000000000BD79                 db    0
.eh_frame:000000000000BD7A                 db    0
.eh_frame:000000000000BD7B                 db    0
.eh_frame:000000000000BD7C                 db  44h ; D
.eh_frame:000000000000BD7D                 db  10h
.eh_frame:000000000000BD7E                 db    0
.eh_frame:000000000000BD7F                 db    0
.eh_frame:000000000000BD80                 db  30h ; 0
.eh_frame:000000000000BD81                 db 0D4h
.eh_frame:000000000000BD82                 db 0FFh
.eh_frame:000000000000BD83                 db 0FFh
.eh_frame:000000000000BD84                 db    2
.eh_frame:000000000000BD85                 db    0
.eh_frame:000000000000BD86                 db    0
.eh_frame:000000000000BD87                 db    0
.eh_frame:000000000000BD88                 db    0
.eh_frame:000000000000BD89                 db    0
.eh_frame:000000000000BD8A                 db    0
.eh_frame:000000000000BD8B                 db    0
.eh_frame:000000000000BD8C                 db    0
.eh_frame:000000000000BD8D                 db    0
.eh_frame:000000000000BD8E                 db    0
.eh_frame:000000000000BD8F                 db    0
.eh_frame:000000000000BD90                 db  10h
.eh_frame:000000000000BD91                 db    0
.eh_frame:000000000000BD92                 db    0
.eh_frame:000000000000BD93                 db    0
.eh_frame:000000000000BD94                 db  5Ch ; \
.eh_frame:000000000000BD95                 db  10h
.eh_frame:000000000000BD96                 db    0
.eh_frame:000000000000BD97                 db    0
.eh_frame:000000000000BD98                 db  28h ; (
.eh_frame:000000000000BD99                 db 0D4h
.eh_frame:000000000000BD9A                 db 0FFh
.eh_frame:000000000000BD9B                 db 0FFh
.eh_frame:000000000000BD9C                 db  0Eh
.eh_frame:000000000000BD9D                 db    0
.eh_frame:000000000000BD9E                 db    0
.eh_frame:000000000000BD9F                 db    0
.eh_frame:000000000000BDA0                 db    0
.eh_frame:000000000000BDA1                 db    0
.eh_frame:000000000000BDA2                 db    0
.eh_frame:000000000000BDA3                 db    0
.eh_frame:000000000000BDA4 __FRAME_END__   db    0
.eh_frame:000000000000BDA5                 db    0
.eh_frame:000000000000BDA6                 db    0
.eh_frame:000000000000BDA7                 db    0
.eh_frame:000000000000BDA7 _eh_frame       ends
.eh_frame:000000000000BDA7
.init_array:000000000020C9B0 ; ELF Initialization Function Table
.init_array:000000000020C9B0 ; ===========================================================================
.init_array:000000000020C9B0
.init_array:000000000020C9B0 ; Segment type: Pure data
.init_array:000000000020C9B0 ; Segment permissions: Read/Write
.init_array:000000000020C9B0 _init_array     segment qword public 'DATA' use64
.init_array:000000000020C9B0                 assume cs:_init_array
.init_array:000000000020C9B0                 ;org 20C9B0h
.init_array:000000000020C9B0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000020C9B0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000020C9B0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000020C9B0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000020C9B0
.fini_array:000000000020C9B8 ; ELF Termination Function Table
.fini_array:000000000020C9B8 ; ===========================================================================
.fini_array:000000000020C9B8
.fini_array:000000000020C9B8 ; Segment type: Pure data
.fini_array:000000000020C9B8 ; Segment permissions: Read/Write
.fini_array:000000000020C9B8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000020C9B8                 assume cs:_fini_array
.fini_array:000000000020C9B8                 ;org 20C9B8h
.fini_array:000000000020C9B8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000020C9B8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000020C9B8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000020C9B8
.data.rel.ro:000000000020C9C0 ; ===========================================================================
.data.rel.ro:000000000020C9C0
.data.rel.ro:000000000020C9C0 ; Segment type: Pure data
.data.rel.ro:000000000020C9C0 ; Segment permissions: Read/Write
.data.rel.ro:000000000020C9C0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000020C9C0                 assume cs:_data_rel_ro
.data.rel.ro:000000000020C9C0                 ;org 20C9C0h
.data.rel.ro:000000000020C9C0 ; struct option long_options
.data.rel.ro:000000000020C9C0 long_options    dq offset msgid+8       ; name
.data.rel.ro:000000000020C9C0                                         ; DATA XREF: main:loc_1C50↑o
.data.rel.ro:000000000020C9C0                 dd 1                    ; has_arg ; "length"
.data.rel.ro:000000000020C9C0                 db 4 dup(0)
.data.rel.ro:000000000020C9C0                 dq 0                    ; flag
.data.rel.ro:000000000020C9C0                 dd 6Ch                  ; val
.data.rel.ro:000000000020C9C0                 db 4 dup(0)
.data.rel.ro:000000000020C9E0                 dq offset aBinary       ; "binary"
.data.rel.ro:000000000020C9E8                 db    0
.data.rel.ro:000000000020C9E9                 db    0
.data.rel.ro:000000000020C9EA                 db    0
.data.rel.ro:000000000020C9EB                 db    0
.data.rel.ro:000000000020C9EC                 db    0
.data.rel.ro:000000000020C9ED                 db    0
.data.rel.ro:000000000020C9EE                 db    0
.data.rel.ro:000000000020C9EF                 db    0
.data.rel.ro:000000000020C9F0                 db    0
.data.rel.ro:000000000020C9F1                 db    0
.data.rel.ro:000000000020C9F2                 db    0
.data.rel.ro:000000000020C9F3                 db    0
.data.rel.ro:000000000020C9F4                 db    0
.data.rel.ro:000000000020C9F5                 db    0
.data.rel.ro:000000000020C9F6                 db    0
.data.rel.ro:000000000020C9F7                 db    0
.data.rel.ro:000000000020C9F8                 db  62h ; b
.data.rel.ro:000000000020C9F9                 db    0
.data.rel.ro:000000000020C9FA                 db    0
.data.rel.ro:000000000020C9FB                 db    0
.data.rel.ro:000000000020C9FC                 db    0
.data.rel.ro:000000000020C9FD                 db    0
.data.rel.ro:000000000020C9FE                 db    0
.data.rel.ro:000000000020C9FF                 db    0
.data.rel.ro:000000000020CA00                 dq offset aCheck        ; "check"
.data.rel.ro:000000000020CA08                 db    0
.data.rel.ro:000000000020CA09                 db    0
.data.rel.ro:000000000020CA0A                 db    0
.data.rel.ro:000000000020CA0B                 db    0
.data.rel.ro:000000000020CA0C                 db    0
.data.rel.ro:000000000020CA0D                 db    0
.data.rel.ro:000000000020CA0E                 db    0
.data.rel.ro:000000000020CA0F                 db    0
.data.rel.ro:000000000020CA10                 db    0
.data.rel.ro:000000000020CA11                 db    0
.data.rel.ro:000000000020CA12                 db    0
.data.rel.ro:000000000020CA13                 db    0
.data.rel.ro:000000000020CA14                 db    0
.data.rel.ro:000000000020CA15                 db    0
.data.rel.ro:000000000020CA16                 db    0
.data.rel.ro:000000000020CA17                 db    0
.data.rel.ro:000000000020CA18                 db  63h ; c
.data.rel.ro:000000000020CA19                 db    0
.data.rel.ro:000000000020CA1A                 db    0
.data.rel.ro:000000000020CA1B                 db    0
.data.rel.ro:000000000020CA1C                 db    0
.data.rel.ro:000000000020CA1D                 db    0
.data.rel.ro:000000000020CA1E                 db    0
.data.rel.ro:000000000020CA1F                 db    0
.data.rel.ro:000000000020CA20                 dq offset aIgnoreMissing ; "ignore-missing"
.data.rel.ro:000000000020CA28                 db    0
.data.rel.ro:000000000020CA29                 db    0
.data.rel.ro:000000000020CA2A                 db    0
.data.rel.ro:000000000020CA2B                 db    0
.data.rel.ro:000000000020CA2C                 db    0
.data.rel.ro:000000000020CA2D                 db    0
.data.rel.ro:000000000020CA2E                 db    0
.data.rel.ro:000000000020CA2F                 db    0
.data.rel.ro:000000000020CA30                 db    0
.data.rel.ro:000000000020CA31                 db    0
.data.rel.ro:000000000020CA32                 db    0
.data.rel.ro:000000000020CA33                 db    0
.data.rel.ro:000000000020CA34                 db    0
.data.rel.ro:000000000020CA35                 db    0
.data.rel.ro:000000000020CA36                 db    0
.data.rel.ro:000000000020CA37                 db    0
.data.rel.ro:000000000020CA38                 db  80h
.data.rel.ro:000000000020CA39                 db    0
.data.rel.ro:000000000020CA3A                 db    0
.data.rel.ro:000000000020CA3B                 db    0
.data.rel.ro:000000000020CA3C                 db    0
.data.rel.ro:000000000020CA3D                 db    0
.data.rel.ro:000000000020CA3E                 db    0
.data.rel.ro:000000000020CA3F                 db    0
.data.rel.ro:000000000020CA40                 dq offset aQuiet        ; "quiet"
.data.rel.ro:000000000020CA48                 db    0
.data.rel.ro:000000000020CA49                 db    0
.data.rel.ro:000000000020CA4A                 db    0
.data.rel.ro:000000000020CA4B                 db    0
.data.rel.ro:000000000020CA4C                 db    0
.data.rel.ro:000000000020CA4D                 db    0
.data.rel.ro:000000000020CA4E                 db    0
.data.rel.ro:000000000020CA4F                 db    0
.data.rel.ro:000000000020CA50                 db    0
.data.rel.ro:000000000020CA51                 db    0
.data.rel.ro:000000000020CA52                 db    0
.data.rel.ro:000000000020CA53                 db    0
.data.rel.ro:000000000020CA54                 db    0
.data.rel.ro:000000000020CA55                 db    0
.data.rel.ro:000000000020CA56                 db    0
.data.rel.ro:000000000020CA57                 db    0
.data.rel.ro:000000000020CA58                 db  82h
.data.rel.ro:000000000020CA59                 db    0
.data.rel.ro:000000000020CA5A                 db    0
.data.rel.ro:000000000020CA5B                 db    0
.data.rel.ro:000000000020CA5C                 db    0
.data.rel.ro:000000000020CA5D                 db    0
.data.rel.ro:000000000020CA5E                 db    0
.data.rel.ro:000000000020CA5F                 db    0
.data.rel.ro:000000000020CA60                 dq offset aStatus       ; "status"
.data.rel.ro:000000000020CA68                 db    0
.data.rel.ro:000000000020CA69                 db    0
.data.rel.ro:000000000020CA6A                 db    0
.data.rel.ro:000000000020CA6B                 db    0
.data.rel.ro:000000000020CA6C                 db    0
.data.rel.ro:000000000020CA6D                 db    0
.data.rel.ro:000000000020CA6E                 db    0
.data.rel.ro:000000000020CA6F                 db    0
.data.rel.ro:000000000020CA70                 db    0
.data.rel.ro:000000000020CA71                 db    0
.data.rel.ro:000000000020CA72                 db    0
.data.rel.ro:000000000020CA73                 db    0
.data.rel.ro:000000000020CA74                 db    0
.data.rel.ro:000000000020CA75                 db    0
.data.rel.ro:000000000020CA76                 db    0
.data.rel.ro:000000000020CA77                 db    0
.data.rel.ro:000000000020CA78                 db  81h
.data.rel.ro:000000000020CA79                 db    0
.data.rel.ro:000000000020CA7A                 db    0
.data.rel.ro:000000000020CA7B                 db    0
.data.rel.ro:000000000020CA7C                 db    0
.data.rel.ro:000000000020CA7D                 db    0
.data.rel.ro:000000000020CA7E                 db    0
.data.rel.ro:000000000020CA7F                 db    0
.data.rel.ro:000000000020CA80                 dq offset aText         ; "text"
.data.rel.ro:000000000020CA88                 db    0
.data.rel.ro:000000000020CA89                 db    0
.data.rel.ro:000000000020CA8A                 db    0
.data.rel.ro:000000000020CA8B                 db    0
.data.rel.ro:000000000020CA8C                 db    0
.data.rel.ro:000000000020CA8D                 db    0
.data.rel.ro:000000000020CA8E                 db    0
.data.rel.ro:000000000020CA8F                 db    0
.data.rel.ro:000000000020CA90                 db    0
.data.rel.ro:000000000020CA91                 db    0
.data.rel.ro:000000000020CA92                 db    0
.data.rel.ro:000000000020CA93                 db    0
.data.rel.ro:000000000020CA94                 db    0
.data.rel.ro:000000000020CA95                 db    0
.data.rel.ro:000000000020CA96                 db    0
.data.rel.ro:000000000020CA97                 db    0
.data.rel.ro:000000000020CA98                 db  74h ; t
.data.rel.ro:000000000020CA99                 db    0
.data.rel.ro:000000000020CA9A                 db    0
.data.rel.ro:000000000020CA9B                 db    0
.data.rel.ro:000000000020CA9C                 db    0
.data.rel.ro:000000000020CA9D                 db    0
.data.rel.ro:000000000020CA9E                 db    0
.data.rel.ro:000000000020CA9F                 db    0
.data.rel.ro:000000000020CAA0                 dq offset aWarn         ; "warn"
.data.rel.ro:000000000020CAA8                 db    0
.data.rel.ro:000000000020CAA9                 db    0
.data.rel.ro:000000000020CAAA                 db    0
.data.rel.ro:000000000020CAAB                 db    0
.data.rel.ro:000000000020CAAC                 db    0
.data.rel.ro:000000000020CAAD                 db    0
.data.rel.ro:000000000020CAAE                 db    0
.data.rel.ro:000000000020CAAF                 db    0
.data.rel.ro:000000000020CAB0                 db    0
.data.rel.ro:000000000020CAB1                 db    0
.data.rel.ro:000000000020CAB2                 db    0
.data.rel.ro:000000000020CAB3                 db    0
.data.rel.ro:000000000020CAB4                 db    0
.data.rel.ro:000000000020CAB5                 db    0
.data.rel.ro:000000000020CAB6                 db    0
.data.rel.ro:000000000020CAB7                 db    0
.data.rel.ro:000000000020CAB8                 db  77h ; w
.data.rel.ro:000000000020CAB9                 db    0
.data.rel.ro:000000000020CABA                 db    0
.data.rel.ro:000000000020CABB                 db    0
.data.rel.ro:000000000020CABC                 db    0
.data.rel.ro:000000000020CABD                 db    0
.data.rel.ro:000000000020CABE                 db    0
.data.rel.ro:000000000020CABF                 db    0
.data.rel.ro:000000000020CAC0                 dq offset aStrict       ; "strict"
.data.rel.ro:000000000020CAC8                 db    0
.data.rel.ro:000000000020CAC9                 db    0
.data.rel.ro:000000000020CACA                 db    0
.data.rel.ro:000000000020CACB                 db    0
.data.rel.ro:000000000020CACC                 db    0
.data.rel.ro:000000000020CACD                 db    0
.data.rel.ro:000000000020CACE                 db    0
.data.rel.ro:000000000020CACF                 db    0
.data.rel.ro:000000000020CAD0                 db    0
.data.rel.ro:000000000020CAD1                 db    0
.data.rel.ro:000000000020CAD2                 db    0
.data.rel.ro:000000000020CAD3                 db    0
.data.rel.ro:000000000020CAD4                 db    0
.data.rel.ro:000000000020CAD5                 db    0
.data.rel.ro:000000000020CAD6                 db    0
.data.rel.ro:000000000020CAD7                 db    0
.data.rel.ro:000000000020CAD8                 db  83h
.data.rel.ro:000000000020CAD9                 db    0
.data.rel.ro:000000000020CADA                 db    0
.data.rel.ro:000000000020CADB                 db    0
.data.rel.ro:000000000020CADC                 db    0
.data.rel.ro:000000000020CADD                 db    0
.data.rel.ro:000000000020CADE                 db    0
.data.rel.ro:000000000020CADF                 db    0
.data.rel.ro:000000000020CAE0                 dq offset aTag          ; "tag"
.data.rel.ro:000000000020CAE8                 db    0
.data.rel.ro:000000000020CAE9                 db    0
.data.rel.ro:000000000020CAEA                 db    0
.data.rel.ro:000000000020CAEB                 db    0
.data.rel.ro:000000000020CAEC                 db    0
.data.rel.ro:000000000020CAED                 db    0
.data.rel.ro:000000000020CAEE                 db    0
.data.rel.ro:000000000020CAEF                 db    0
.data.rel.ro:000000000020CAF0                 db    0
.data.rel.ro:000000000020CAF1                 db    0
.data.rel.ro:000000000020CAF2                 db    0
.data.rel.ro:000000000020CAF3                 db    0
.data.rel.ro:000000000020CAF4                 db    0
.data.rel.ro:000000000020CAF5                 db    0
.data.rel.ro:000000000020CAF6                 db    0
.data.rel.ro:000000000020CAF7                 db    0
.data.rel.ro:000000000020CAF8                 db  84h
.data.rel.ro:000000000020CAF9                 db    0
.data.rel.ro:000000000020CAFA                 db    0
.data.rel.ro:000000000020CAFB                 db    0
.data.rel.ro:000000000020CAFC                 db    0
.data.rel.ro:000000000020CAFD                 db    0
.data.rel.ro:000000000020CAFE                 db    0
.data.rel.ro:000000000020CAFF                 db    0
.data.rel.ro:000000000020CB00                 dq offset aZero         ; "zero"
.data.rel.ro:000000000020CB08                 db    0
.data.rel.ro:000000000020CB09                 db    0
.data.rel.ro:000000000020CB0A                 db    0
.data.rel.ro:000000000020CB0B                 db    0
.data.rel.ro:000000000020CB0C                 db    0
.data.rel.ro:000000000020CB0D                 db    0
.data.rel.ro:000000000020CB0E                 db    0
.data.rel.ro:000000000020CB0F                 db    0
.data.rel.ro:000000000020CB10                 db    0
.data.rel.ro:000000000020CB11                 db    0
.data.rel.ro:000000000020CB12                 db    0
.data.rel.ro:000000000020CB13                 db    0
.data.rel.ro:000000000020CB14                 db    0
.data.rel.ro:000000000020CB15                 db    0
.data.rel.ro:000000000020CB16                 db    0
.data.rel.ro:000000000020CB17                 db    0
.data.rel.ro:000000000020CB18                 db  7Ah ; z
.data.rel.ro:000000000020CB19                 db    0
.data.rel.ro:000000000020CB1A                 db    0
.data.rel.ro:000000000020CB1B                 db    0
.data.rel.ro:000000000020CB1C                 db    0
.data.rel.ro:000000000020CB1D                 db    0
.data.rel.ro:000000000020CB1E                 db    0
.data.rel.ro:000000000020CB1F                 db    0
.data.rel.ro:000000000020CB20                 dq offset aHelp         ; "help"
.data.rel.ro:000000000020CB28                 db    0
.data.rel.ro:000000000020CB29                 db    0
.data.rel.ro:000000000020CB2A                 db    0
.data.rel.ro:000000000020CB2B                 db    0
.data.rel.ro:000000000020CB2C                 db    0
.data.rel.ro:000000000020CB2D                 db    0
.data.rel.ro:000000000020CB2E                 db    0
.data.rel.ro:000000000020CB2F                 db    0
.data.rel.ro:000000000020CB30                 db    0
.data.rel.ro:000000000020CB31                 db    0
.data.rel.ro:000000000020CB32                 db    0
.data.rel.ro:000000000020CB33                 db    0
.data.rel.ro:000000000020CB34                 db    0
.data.rel.ro:000000000020CB35                 db    0
.data.rel.ro:000000000020CB36                 db    0
.data.rel.ro:000000000020CB37                 db    0
.data.rel.ro:000000000020CB38                 db  7Eh ; ~
.data.rel.ro:000000000020CB39                 db 0FFh
.data.rel.ro:000000000020CB3A                 db 0FFh
.data.rel.ro:000000000020CB3B                 db 0FFh
.data.rel.ro:000000000020CB3C                 db    0
.data.rel.ro:000000000020CB3D                 db    0
.data.rel.ro:000000000020CB3E                 db    0
.data.rel.ro:000000000020CB3F                 db    0
.data.rel.ro:000000000020CB40                 dq offset aVersion      ; "version"
.data.rel.ro:000000000020CB48                 db    0
.data.rel.ro:000000000020CB49                 db    0
.data.rel.ro:000000000020CB4A                 db    0
.data.rel.ro:000000000020CB4B                 db    0
.data.rel.ro:000000000020CB4C                 db    0
.data.rel.ro:000000000020CB4D                 db    0
.data.rel.ro:000000000020CB4E                 db    0
.data.rel.ro:000000000020CB4F                 db    0
.data.rel.ro:000000000020CB50                 db    0
.data.rel.ro:000000000020CB51                 db    0
.data.rel.ro:000000000020CB52                 db    0
.data.rel.ro:000000000020CB53                 db    0
.data.rel.ro:000000000020CB54                 db    0
.data.rel.ro:000000000020CB55                 db    0
.data.rel.ro:000000000020CB56                 db    0
.data.rel.ro:000000000020CB57                 db    0
.data.rel.ro:000000000020CB58                 db  7Dh ; }
.data.rel.ro:000000000020CB59                 db 0FFh
.data.rel.ro:000000000020CB5A                 db 0FFh
.data.rel.ro:000000000020CB5B                 db 0FFh
.data.rel.ro:000000000020CB5C                 db    0
.data.rel.ro:000000000020CB5D                 db    0
.data.rel.ro:000000000020CB5E                 db    0
.data.rel.ro:000000000020CB5F                 db    0
.data.rel.ro:000000000020CB60                 db    0
.data.rel.ro:000000000020CB61                 db    0
.data.rel.ro:000000000020CB62                 db    0
.data.rel.ro:000000000020CB63                 db    0
.data.rel.ro:000000000020CB64                 db    0
.data.rel.ro:000000000020CB65                 db    0
.data.rel.ro:000000000020CB66                 db    0
.data.rel.ro:000000000020CB67                 db    0
.data.rel.ro:000000000020CB68                 db    0
.data.rel.ro:000000000020CB69                 db    0
.data.rel.ro:000000000020CB6A                 db    0
.data.rel.ro:000000000020CB6B                 db    0
.data.rel.ro:000000000020CB6C                 db    0
.data.rel.ro:000000000020CB6D                 db    0
.data.rel.ro:000000000020CB6E                 db    0
.data.rel.ro:000000000020CB6F                 db    0
.data.rel.ro:000000000020CB70                 db    0
.data.rel.ro:000000000020CB71                 db    0
.data.rel.ro:000000000020CB72                 db    0
.data.rel.ro:000000000020CB73                 db    0
.data.rel.ro:000000000020CB74                 db    0
.data.rel.ro:000000000020CB75                 db    0
.data.rel.ro:000000000020CB76                 db    0
.data.rel.ro:000000000020CB77                 db    0
.data.rel.ro:000000000020CB78                 db    0
.data.rel.ro:000000000020CB79                 db    0
.data.rel.ro:000000000020CB7A                 db    0
.data.rel.ro:000000000020CB7B                 db    0
.data.rel.ro:000000000020CB7C                 db    0
.data.rel.ro:000000000020CB7D                 db    0
.data.rel.ro:000000000020CB7E                 db    0
.data.rel.ro:000000000020CB7F                 db    0
.data.rel.ro:000000000020CB80 algorithm_out_string dq offset aBlake2b ; DATA XREF: main:loc_2192↑o
.data.rel.ro:000000000020CB80                                         ; main:loc_2665↑o ...
.data.rel.ro:000000000020CB80                                         ; "BLAKE2b"
.data.rel.ro:000000000020CB88                 align 10h
.data.rel.ro:000000000020CB90 algorithm_in_string dq offset aBlake2b_0
.data.rel.ro:000000000020CB90                                         ; DATA XREF: main+1392↑o
.data.rel.ro:000000000020CB90                                         ; "blake2b"
.data.rel.ro:000000000020CB98                 align 20h
.data.rel.ro:000000000020CBA0                 public quoting_style_args
.data.rel.ro:000000000020CBA0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000020CBA8                 dq offset aShell        ; "shell"
.data.rel.ro:000000000020CBB0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000020CBB8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000020CBC0                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000020CBC8                 dq offset aC_1          ; "c"
.data.rel.ro:000000000020CBD0                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000020CBD8                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000020CBE0                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000020CBE8                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000020CBF0                 db    0
.data.rel.ro:000000000020CBF1                 db    0
.data.rel.ro:000000000020CBF2                 db    0
.data.rel.ro:000000000020CBF3                 db    0
.data.rel.ro:000000000020CBF4                 db    0
.data.rel.ro:000000000020CBF5                 db    0
.data.rel.ro:000000000020CBF6                 db    0
.data.rel.ro:000000000020CBF7                 db    0
.data.rel.ro:000000000020CBF7 _data_rel_ro    ends
.data.rel.ro:000000000020CBF7
LOAD:000000000020CBF8 ; ELF Dynamic Information
LOAD:000000000020CBF8 ; ===========================================================================
LOAD:000000000020CBF8
LOAD:000000000020CBF8 ; Segment type: Pure data
LOAD:000000000020CBF8 ; Segment permissions: Read/Write
LOAD:000000000020CBF8 LOAD            segment byte public 'DATA' use64
LOAD:000000000020CBF8                 assume cs:LOAD
LOAD:000000000020CBF8                 ;org 20CBF8h
LOAD:000000000020CBF8 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000020CBF8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000020CBF8                                         ; DT_NEEDED libc.so.6
LOAD:000000000020CC08                 Elf64_Dyn <0Ch, 17C8h>  ; DT_INIT
LOAD:000000000020CC18                 Elf64_Dyn <0Dh, 91D0h>  ; DT_FINI
LOAD:000000000020CC28                 Elf64_Dyn <19h, 20C9B0h> ; DT_INIT_ARRAY
LOAD:000000000020CC38                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000020CC48                 Elf64_Dyn <1Ah, 20C9B8h> ; DT_FINI_ARRAY
LOAD:000000000020CC58                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000020CC68                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000020CC78                 Elf64_Dyn <5, 9D0h>     ; DT_STRTAB
LOAD:000000000020CC88                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:000000000020CC98                 Elf64_Dyn <0Ah, 343h>   ; DT_STRSZ
LOAD:000000000020CCA8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000020CCB8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000020CCC8                 Elf64_Dyn <3, 20CDE8h>  ; DT_PLTGOT
LOAD:000000000020CCD8                 Elf64_Dyn <2, 588h>     ; DT_PLTRELSZ
LOAD:000000000020CCE8                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000020CCF8                 Elf64_Dyn <17h, 1240h>  ; DT_JMPREL
LOAD:000000000020CD08                 Elf64_Dyn <7, 0E08h>    ; DT_RELA
LOAD:000000000020CD18                 Elf64_Dyn <8, 438h>     ; DT_RELASZ
LOAD:000000000020CD28                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000020CD38                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000020CD48                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000020CD58                 Elf64_Dyn <6FFFFFFEh, 0DA8h> ; DT_VERNEED
LOAD:000000000020CD68                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000020CD78                 Elf64_Dyn <6FFFFFF0h, 0D14h> ; DT_VERSYM
LOAD:000000000020CD88                 Elf64_Dyn <6FFFFFF9h, 20h> ; DT_RELACOUNT
LOAD:000000000020CD98                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000020CDA8                 db    0
LOAD:000000000020CDA9                 db    0
LOAD:000000000020CDAA                 db    0
LOAD:000000000020CDAB                 db    0
LOAD:000000000020CDAC                 db    0
LOAD:000000000020CDAD                 db    0
LOAD:000000000020CDAE                 db    0
LOAD:000000000020CDAF                 db    0
LOAD:000000000020CDB0                 db    0
LOAD:000000000020CDB1                 db    0
LOAD:000000000020CDB2                 db    0
LOAD:000000000020CDB3                 db    0
LOAD:000000000020CDB4                 db    0
LOAD:000000000020CDB5                 db    0
LOAD:000000000020CDB6                 db    0
LOAD:000000000020CDB7                 db    0
LOAD:000000000020CDB8                 db    0
LOAD:000000000020CDB9                 db    0
LOAD:000000000020CDBA                 db    0
LOAD:000000000020CDBB                 db    0
LOAD:000000000020CDBC                 db    0
LOAD:000000000020CDBD                 db    0
LOAD:000000000020CDBE                 db    0
LOAD:000000000020CDBF                 db    0
LOAD:000000000020CDC0                 db    0
LOAD:000000000020CDC1                 db    0
LOAD:000000000020CDC2                 db    0
LOAD:000000000020CDC3                 db    0
LOAD:000000000020CDC4                 db    0
LOAD:000000000020CDC5                 db    0
LOAD:000000000020CDC6                 db    0
LOAD:000000000020CDC7                 db    0
LOAD:000000000020CDC8                 db    0
LOAD:000000000020CDC9                 db    0
LOAD:000000000020CDCA                 db    0
LOAD:000000000020CDCB                 db    0
LOAD:000000000020CDCC                 db    0
LOAD:000000000020CDCD                 db    0
LOAD:000000000020CDCE                 db    0
LOAD:000000000020CDCF                 db    0
LOAD:000000000020CDD0                 db    0
LOAD:000000000020CDD1                 db    0
LOAD:000000000020CDD2                 db    0
LOAD:000000000020CDD3                 db    0
LOAD:000000000020CDD4                 db    0
LOAD:000000000020CDD5                 db    0
LOAD:000000000020CDD6                 db    0
LOAD:000000000020CDD7                 db    0
LOAD:000000000020CDD8                 db    0
LOAD:000000000020CDD9                 db    0
LOAD:000000000020CDDA                 db    0
LOAD:000000000020CDDB                 db    0
LOAD:000000000020CDDC                 db    0
LOAD:000000000020CDDD                 db    0
LOAD:000000000020CDDE                 db    0
LOAD:000000000020CDDF                 db    0
LOAD:000000000020CDE0                 db    0
LOAD:000000000020CDE1                 db    0
LOAD:000000000020CDE2                 db    0
LOAD:000000000020CDE3                 db    0
LOAD:000000000020CDE4                 db    0
LOAD:000000000020CDE5                 db    0
LOAD:000000000020CDE6                 db    0
LOAD:000000000020CDE7                 db    0
LOAD:000000000020CDE7 LOAD            ends
LOAD:000000000020CDE7
.got:000000000020CDE8 ; ===========================================================================
.got:000000000020CDE8
.got:000000000020CDE8 ; Segment type: Pure data
.got:000000000020CDE8 ; Segment permissions: Read/Write
.got:000000000020CDE8 _got            segment qword public 'DATA' use64
.got:000000000020CDE8                 assume cs:_got
.got:000000000020CDE8                 ;org 20CDE8h
.got:000000000020CDE8 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000020CDF0 qword_20CDF0    dq 0                    ; DATA XREF: sub_17E0↑r
.got:000000000020CDF8 qword_20CDF8    dq 0                    ; DATA XREF: sub_17E0+6↑r
.got:000000000020CE00 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000020CE08 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000020CE10 __errno_location_ptr dq offset __errno_location
.got:000000000020CE10                                         ; DATA XREF: ___errno_location↑r
.got:000000000020CE18 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000020CE20 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000020CE28 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000020CE30 ferror_ptr      dq offset ferror        ; DATA XREF: _ferror↑r
.got:000000000020CE38 fread_ptr       dq offset fread         ; DATA XREF: _fread↑r
.got:000000000020CE40 fcntl_ptr       dq offset fcntl         ; DATA XREF: _fcntl↑r
.got:000000000020CE48 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000020CE50 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000020CE58 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000020CE58                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000020CE60 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000020CE68 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000020CE68                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000020CE70 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000020CE78 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000020CE78                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000020CE80 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000020CE88 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000020CE90 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000020CE98 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000020CEA0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000020CEA8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000020CEB0 __assert_fail_ptr dq offset __assert_fail
.got:000000000020CEB0                                         ; DATA XREF: ___assert_fail↑r
.got:000000000020CEB8 __strtoul_internal_ptr dq offset __strtoul_internal
.got:000000000020CEB8                                         ; DATA XREF: ___strtoul_internal↑r
.got:000000000020CEC0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000020CEC8 close_ptr       dq offset close         ; DATA XREF: _close↑r
.got:000000000020CED0 posix_fadvise_ptr dq offset posix_fadvise
.got:000000000020CED0                                         ; DATA XREF: _posix_fadvise↑r
.got:000000000020CED8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000020CEE0 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000020CEE0                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000020CEE8 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000020CEF0 __getdelim_ptr  dq offset __getdelim    ; DATA XREF: ___getdelim↑r
.got:000000000020CEF8 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000020CF00 __memcpy_chk_ptr dq offset __memcpy_chk ; DATA XREF: ___memcpy_chk↑r
.got:000000000020CF08 feof_ptr        dq offset feof          ; DATA XREF: _feof↑r
.got:000000000020CF10 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000020CF18 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000020CF20 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000020CF28 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000020CF30 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000020CF38 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000020CF40 fwrite_unlocked_ptr dq offset fwrite_unlocked
.got:000000000020CF40                                         ; DATA XREF: _fwrite_unlocked↑r
.got:000000000020CF48 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000020CF50 fdopen_ptr      dq offset fdopen        ; DATA XREF: _fdopen↑r
.got:000000000020CF58 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000020CF60 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000020CF68 setvbuf_ptr     dq offset setvbuf       ; DATA XREF: _setvbuf↑r
.got:000000000020CF70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000020CF78 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000020CF80 fopen_ptr       dq offset fopen         ; DATA XREF: _fopen↑r
.got:000000000020CF88 dcngettext_ptr  dq offset dcngettext    ; DATA XREF: _dcngettext↑r
.got:000000000020CF90 strtoul_ptr     dq offset strtoul       ; DATA XREF: _strtoul↑r
.got:000000000020CF98 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000020CFA0 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000020CFA8 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000020CFB0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000020CFB0                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000020CFB8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000020CFC0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000020CFC8 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:000000000020CFC8                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:000000000020CFD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000020CFD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000020CFD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000020CFD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000020CFE0 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000020CFE0                                         ; DATA XREF: start+24↑r
.got:000000000020CFE8 __gmon_start___ptr dq offset __gmon_start__
.got:000000000020CFE8                                         ; DATA XREF: _init_proc+4↑r
.got:000000000020CFF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000020CFF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000020CFF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000020CFF8                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000020CFF8                                         ; __do_global_dtors_aux+9↑r
.got:000000000020CFF8 _got            ends
.got:000000000020CFF8
.data:000000000020D000 ; ===========================================================================
.data:000000000020D000
.data:000000000020D000 ; Segment type: Pure data
.data:000000000020D000 ; Segment permissions: Read/Write
.data:000000000020D000 _data           segment align_32 public 'DATA' use64
.data:000000000020D000                 assume cs:_data
.data:000000000020D000                 ;org 20D000h
.data:000000000020D000                 public __data_start ; weak
.data:000000000020D000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000020D000                                         ; data_start
.data:000000000020D001                 db    0
.data:000000000020D002                 db    0
.data:000000000020D003                 db    0
.data:000000000020D004                 db    0
.data:000000000020D005                 db    0
.data:000000000020D006                 db    0
.data:000000000020D007                 db    0
.data:000000000020D008                 public __dso_handle
.data:000000000020D008 ; void *_dso_handle
.data:000000000020D008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000020D008                                         ; atexit↑r ...
.data:000000000020D010 delim           db 0Ah                  ; DATA XREF: main:loc_1E90↑w
.data:000000000020D010                                         ; main+33E↑r ...
.data:000000000020D011                 align 4
.data:000000000020D014 bsd_reversed    dd 0FFFFFFFFh           ; DATA XREF: main+842↑r
.data:000000000020D014                                         ; main+875↑w ...
.data:000000000020D018 memset_v_3512   dq offset memset        ; DATA XREF: blake2b_init_key+C9↑r
.data:000000000020D018                                         ; blake2b_final+126↑r
.data:000000000020D020                 public Version
.data:000000000020D020 Version         dq offset bin2hex_7139+10h
.data:000000000020D020                                         ; DATA XREF: main+17E↑r
.data:000000000020D020                                         ; "8.31"
.data:000000000020D028                 public argmatch_die
.data:000000000020D028 argmatch_die    dq offset __argmatch_die
.data:000000000020D030                 public exit_failure
.data:000000000020D030 ; int exit_failure
.data:000000000020D030 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_5B82↑r
.data:000000000020D030                                         ; xalloc_die+17↑r
.data:000000000020D034                 align 20h
.data:000000000020D040                 public quote_quoting_options
.data:000000000020D040 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000020D040                                         ; quote_mem↑o ...
.data:000000000020D041                 db    0
.data:000000000020D042                 db    0
.data:000000000020D043                 db    0
.data:000000000020D044                 db    0
.data:000000000020D045                 db    0
.data:000000000020D046                 db    0
.data:000000000020D047                 db    0
.data:000000000020D048                 db    0
.data:000000000020D049                 db    0
.data:000000000020D04A                 db    0
.data:000000000020D04B                 db    0
.data:000000000020D04C                 db    0
.data:000000000020D04D                 db    0
.data:000000000020D04E                 db    0
.data:000000000020D04F                 db    0
.data:000000000020D050                 db    0
.data:000000000020D051                 db    0
.data:000000000020D052                 db    0
.data:000000000020D053                 db    0
.data:000000000020D054                 db    0
.data:000000000020D055                 db    0
.data:000000000020D056                 db    0
.data:000000000020D057                 db    0
.data:000000000020D058                 db    0
.data:000000000020D059                 db    0
.data:000000000020D05A                 db    0
.data:000000000020D05B                 db    0
.data:000000000020D05C                 db    0
.data:000000000020D05D                 db    0
.data:000000000020D05E                 db    0
.data:000000000020D05F                 db    0
.data:000000000020D060                 db    0
.data:000000000020D061                 db    0
.data:000000000020D062                 db    0
.data:000000000020D063                 db    0
.data:000000000020D064                 db    0
.data:000000000020D065                 db    0
.data:000000000020D066                 db    0
.data:000000000020D067                 db    0
.data:000000000020D068                 db    0
.data:000000000020D069                 db    0
.data:000000000020D06A                 db    0
.data:000000000020D06B                 db    0
.data:000000000020D06C                 db    0
.data:000000000020D06D                 db    0
.data:000000000020D06E                 db    0
.data:000000000020D06F                 db    0
.data:000000000020D070                 db    0
.data:000000000020D071                 db    0
.data:000000000020D072                 db    0
.data:000000000020D073                 db    0
.data:000000000020D074                 db    0
.data:000000000020D075                 db    0
.data:000000000020D076                 db    0
.data:000000000020D077                 db    0
.data:000000000020D078 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000020D078                                         ; quotearg_n_options:loc_70DD↑r ...
.data:000000000020D07C                 align 20h
.data:000000000020D080 ; void *slotvec
.data:000000000020D080 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000020D080                                         ; quotearg_n_options+76↑w ...
.data:000000000020D088                 align 10h
.data:000000000020D090 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000020D090                                         ; quotearg_n_options+187↑r ...
.data:000000000020D098 off_20D098      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000020D098 _data           ends
.data:000000000020D098
.bss:000000000020D0A0 ; ===========================================================================
.bss:000000000020D0A0
.bss:000000000020D0A0 ; Segment type: Uninitialized
.bss:000000000020D0A0 ; Segment permissions: Read/Write
.bss:000000000020D0A0 _bss            segment align_32 public 'BSS' use64
.bss:000000000020D0A0                 assume cs:_bss
.bss:000000000020D0A0                 ;org 20D0A0h
.bss:000000000020D0A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000020D0A0                 public __bss_start ; weak
.bss:000000000020D0A0 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000910↑o
.bss:000000000020D0A0                                         ; LOAD:0000000000000970↑o ...
.bss:000000000020D0A0                                         ; Alternative name is '__TMC_END__'
.bss:000000000020D0A0                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000020D0A0                                         ; _edata
.bss:000000000020D0A0                                         ; Copy of shared data
.bss:000000000020D0A8                 public stdout@@GLIBC_2_2_5
.bss:000000000020D0A8 ; FILE *stdout
.bss:000000000020D0A8 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000008F8↑o
.bss:000000000020D0A8                                         ; main+7D↑r ...
.bss:000000000020D0A8                                         ; Alternative name is 'stdout'
.bss:000000000020D0A8                                         ; Copy of shared data
.bss:000000000020D0B0                 public stdin@@GLIBC_2_2_5
.bss:000000000020D0B0 ; FILE *stdin
.bss:000000000020D0B0 stdin@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:0000000000000928↑o
.bss:000000000020D0B0                                         ; main+448↑r ...
.bss:000000000020D0B0                                         ; Alternative name is 'stdin'
.bss:000000000020D0B0                                         ; Copy of shared data
.bss:000000000020D0B8                 public optind@@GLIBC_2_2_5
.bss:000000000020D0B8 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000009A0↑o
.bss:000000000020D0B8                                         ; main+3AF↑r
.bss:000000000020D0B8                                         ; Alternative name is 'optind'
.bss:000000000020D0B8                                         ; Copy of shared data
.bss:000000000020D0BC                 align 20h
.bss:000000000020D0C0                 public optarg@@GLIBC_2_2_5
.bss:000000000020D0C0 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000009B8↑o
.bss:000000000020D0C0                                         ; main+253↑r ...
.bss:000000000020D0C0                                         ; Alternative name is 'optarg'
.bss:000000000020D0C0                                         ; Copy of shared data
.bss:000000000020D0C8                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000020D0C8 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000020D0C8                                         ; DATA XREF: LOAD:0000000000000940↑o
.bss:000000000020D0C8                                         ; LOAD:0000000000000958↑o ...
.bss:000000000020D0C8                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000020D0C8                                         ; Copy of shared data
.bss:000000000020D0D0                 align 20h
.bss:000000000020D0E0                 public stderr@@GLIBC_2_2_5
.bss:000000000020D0E0 ; FILE *stderr
.bss:000000000020D0E0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000988↑o
.bss:000000000020D0E0                                         ; usage+3D↑r ...
.bss:000000000020D0E0                                         ; Alternative name is 'stderr'
.bss:000000000020D0E0                                         ; Copy of shared data
.bss:000000000020D0E8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000020D0E8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000020D0E9                 align 10h
.bss:000000000020D0F0 b2_length       dq ?                    ; DATA XREF: main+277↑w
.bss:000000000020D0F0                                         ; main:loc_1E9C↑r ...
.bss:000000000020D0F8 b2_algorithm    dd ?                    ; DATA XREF: main+60C↑w
.bss:000000000020D0F8                                         ; main+AE2↑w ...
.bss:000000000020D0FC strict          db ?                    ; DATA XREF: main:loc_1DB0↑w
.bss:000000000020D0FC                                         ; main:loc_22F4↑r ...
.bss:000000000020D0FD quiet           db ?                    ; DATA XREF: main+1CE↑w
.bss:000000000020D0FD                                         ; main+1EE↑w ...
.bss:000000000020D0FE ignore_missing  db ?                    ; DATA XREF: main+156↑w
.bss:000000000020D0FE                                         ; main+360↑r ...
.bss:000000000020D0FF warn            db ?                    ; DATA XREF: main+1C7↑w
.bss:000000000020D0FF                                         ; main+1E7↑w ...
.bss:000000000020D100 status_only     db ?                    ; DATA XREF: main:loc_1D70↑w
.bss:000000000020D100                                         ; main:loc_1D90↑w ...
.bss:000000000020D101                 align 8
.bss:000000000020D108 digest_hex_bytes dq ?                   ; DATA XREF: main+32A↑w
.bss:000000000020D108                                         ; main:loc_21DB↑w ...
.bss:000000000020D110 min_digest_line_length dq ?             ; DATA XREF: main+2F3↑w
.bss:000000000020D110                                         ; main+78A↑r
.bss:000000000020D118 have_read_stdin db ?                    ; DATA XREF: main+43C↑w
.bss:000000000020D118                                         ; main:loc_2624↑r ...
.bss:000000000020D119                 align 20h
.bss:000000000020D120 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000020D120                                         ; close_stdout+1B↑r
.bss:000000000020D121                 align 8
.bss:000000000020D128 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000020D128                                         ; close_stdout+56↑r
.bss:000000000020D130                 public program_name
.bss:000000000020D130 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000020D130                                         ; set_program_name:loc_5CFD↑w
.bss:000000000020D138                 align 20h
.bss:000000000020D140 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000020D140                                         ; quotearg_free+46↑o ...
.bss:000000000020D141                 db    ? ;
.bss:000000000020D142                 db    ? ;
.bss:000000000020D143                 db    ? ;
.bss:000000000020D144                 db    ? ;
.bss:000000000020D145                 db    ? ;
.bss:000000000020D146                 db    ? ;
.bss:000000000020D147                 db    ? ;
.bss:000000000020D148                 db    ? ;
.bss:000000000020D149                 db    ? ;
.bss:000000000020D14A                 db    ? ;
.bss:000000000020D14B                 db    ? ;
.bss:000000000020D14C                 db    ? ;
.bss:000000000020D14D                 db    ? ;
.bss:000000000020D14E                 db    ? ;
.bss:000000000020D14F                 db    ? ;
.bss:000000000020D150                 db    ? ;
.bss:000000000020D151                 db    ? ;
.bss:000000000020D152                 db    ? ;
.bss:000000000020D153                 db    ? ;
.bss:000000000020D154                 db    ? ;
.bss:000000000020D155                 db    ? ;
.bss:000000000020D156                 db    ? ;
.bss:000000000020D157                 db    ? ;
.bss:000000000020D158                 db    ? ;
.bss:000000000020D159                 db    ? ;
.bss:000000000020D15A                 db    ? ;
.bss:000000000020D15B                 db    ? ;
.bss:000000000020D15C                 db    ? ;
.bss:000000000020D15D                 db    ? ;
.bss:000000000020D15E                 db    ? ;
.bss:000000000020D15F                 db    ? ;
.bss:000000000020D160                 db    ? ;
.bss:000000000020D161                 db    ? ;
.bss:000000000020D162                 db    ? ;
.bss:000000000020D163                 db    ? ;
.bss:000000000020D164                 db    ? ;
.bss:000000000020D165                 db    ? ;
.bss:000000000020D166                 db    ? ;
.bss:000000000020D167                 db    ? ;
.bss:000000000020D168                 db    ? ;
.bss:000000000020D169                 db    ? ;
.bss:000000000020D16A                 db    ? ;
.bss:000000000020D16B                 db    ? ;
.bss:000000000020D16C                 db    ? ;
.bss:000000000020D16D                 db    ? ;
.bss:000000000020D16E                 db    ? ;
.bss:000000000020D16F                 db    ? ;
.bss:000000000020D170                 db    ? ;
.bss:000000000020D171                 db    ? ;
.bss:000000000020D172                 db    ? ;
.bss:000000000020D173                 db    ? ;
.bss:000000000020D174                 db    ? ;
.bss:000000000020D175                 db    ? ;
.bss:000000000020D176                 db    ? ;
.bss:000000000020D177                 db    ? ;
.bss:000000000020D178                 db    ? ;
.bss:000000000020D179                 db    ? ;
.bss:000000000020D17A                 db    ? ;
.bss:000000000020D17B                 db    ? ;
.bss:000000000020D17C                 db    ? ;
.bss:000000000020D17D                 db    ? ;
.bss:000000000020D17E                 db    ? ;
.bss:000000000020D17F                 db    ? ;
.bss:000000000020D180                 db    ? ;
.bss:000000000020D181                 db    ? ;
.bss:000000000020D182                 db    ? ;
.bss:000000000020D183                 db    ? ;
.bss:000000000020D184                 db    ? ;
.bss:000000000020D185                 db    ? ;
.bss:000000000020D186                 db    ? ;
.bss:000000000020D187                 db    ? ;
.bss:000000000020D188                 db    ? ;
.bss:000000000020D189                 db    ? ;
.bss:000000000020D18A                 db    ? ;
.bss:000000000020D18B                 db    ? ;
.bss:000000000020D18C                 db    ? ;
.bss:000000000020D18D                 db    ? ;
.bss:000000000020D18E                 db    ? ;
.bss:000000000020D18F                 db    ? ;
.bss:000000000020D190                 db    ? ;
.bss:000000000020D191                 db    ? ;
.bss:000000000020D192                 db    ? ;
.bss:000000000020D193                 db    ? ;
.bss:000000000020D194                 db    ? ;
.bss:000000000020D195                 db    ? ;
.bss:000000000020D196                 db    ? ;
.bss:000000000020D197                 db    ? ;
.bss:000000000020D198                 db    ? ;
.bss:000000000020D199                 db    ? ;
.bss:000000000020D19A                 db    ? ;
.bss:000000000020D19B                 db    ? ;
.bss:000000000020D19C                 db    ? ;
.bss:000000000020D19D                 db    ? ;
.bss:000000000020D19E                 db    ? ;
.bss:000000000020D19F                 db    ? ;
.bss:000000000020D1A0                 db    ? ;
.bss:000000000020D1A1                 db    ? ;
.bss:000000000020D1A2                 db    ? ;
.bss:000000000020D1A3                 db    ? ;
.bss:000000000020D1A4                 db    ? ;
.bss:000000000020D1A5                 db    ? ;
.bss:000000000020D1A6                 db    ? ;
.bss:000000000020D1A7                 db    ? ;
.bss:000000000020D1A8                 db    ? ;
.bss:000000000020D1A9                 db    ? ;
.bss:000000000020D1AA                 db    ? ;
.bss:000000000020D1AB                 db    ? ;
.bss:000000000020D1AC                 db    ? ;
.bss:000000000020D1AD                 db    ? ;
.bss:000000000020D1AE                 db    ? ;
.bss:000000000020D1AF                 db    ? ;
.bss:000000000020D1B0                 db    ? ;
.bss:000000000020D1B1                 db    ? ;
.bss:000000000020D1B2                 db    ? ;
.bss:000000000020D1B3                 db    ? ;
.bss:000000000020D1B4                 db    ? ;
.bss:000000000020D1B5                 db    ? ;
.bss:000000000020D1B6                 db    ? ;
.bss:000000000020D1B7                 db    ? ;
.bss:000000000020D1B8                 db    ? ;
.bss:000000000020D1B9                 db    ? ;
.bss:000000000020D1BA                 db    ? ;
.bss:000000000020D1BB                 db    ? ;
.bss:000000000020D1BC                 db    ? ;
.bss:000000000020D1BD                 db    ? ;
.bss:000000000020D1BE                 db    ? ;
.bss:000000000020D1BF                 db    ? ;
.bss:000000000020D1C0                 db    ? ;
.bss:000000000020D1C1                 db    ? ;
.bss:000000000020D1C2                 db    ? ;
.bss:000000000020D1C3                 db    ? ;
.bss:000000000020D1C4                 db    ? ;
.bss:000000000020D1C5                 db    ? ;
.bss:000000000020D1C6                 db    ? ;
.bss:000000000020D1C7                 db    ? ;
.bss:000000000020D1C8                 db    ? ;
.bss:000000000020D1C9                 db    ? ;
.bss:000000000020D1CA                 db    ? ;
.bss:000000000020D1CB                 db    ? ;
.bss:000000000020D1CC                 db    ? ;
.bss:000000000020D1CD                 db    ? ;
.bss:000000000020D1CE                 db    ? ;
.bss:000000000020D1CF                 db    ? ;
.bss:000000000020D1D0                 db    ? ;
.bss:000000000020D1D1                 db    ? ;
.bss:000000000020D1D2                 db    ? ;
.bss:000000000020D1D3                 db    ? ;
.bss:000000000020D1D4                 db    ? ;
.bss:000000000020D1D5                 db    ? ;
.bss:000000000020D1D6                 db    ? ;
.bss:000000000020D1D7                 db    ? ;
.bss:000000000020D1D8                 db    ? ;
.bss:000000000020D1D9                 db    ? ;
.bss:000000000020D1DA                 db    ? ;
.bss:000000000020D1DB                 db    ? ;
.bss:000000000020D1DC                 db    ? ;
.bss:000000000020D1DD                 db    ? ;
.bss:000000000020D1DE                 db    ? ;
.bss:000000000020D1DF                 db    ? ;
.bss:000000000020D1E0                 db    ? ;
.bss:000000000020D1E1                 db    ? ;
.bss:000000000020D1E2                 db    ? ;
.bss:000000000020D1E3                 db    ? ;
.bss:000000000020D1E4                 db    ? ;
.bss:000000000020D1E5                 db    ? ;
.bss:000000000020D1E6                 db    ? ;
.bss:000000000020D1E7                 db    ? ;
.bss:000000000020D1E8                 db    ? ;
.bss:000000000020D1E9                 db    ? ;
.bss:000000000020D1EA                 db    ? ;
.bss:000000000020D1EB                 db    ? ;
.bss:000000000020D1EC                 db    ? ;
.bss:000000000020D1ED                 db    ? ;
.bss:000000000020D1EE                 db    ? ;
.bss:000000000020D1EF                 db    ? ;
.bss:000000000020D1F0                 db    ? ;
.bss:000000000020D1F1                 db    ? ;
.bss:000000000020D1F2                 db    ? ;
.bss:000000000020D1F3                 db    ? ;
.bss:000000000020D1F4                 db    ? ;
.bss:000000000020D1F5                 db    ? ;
.bss:000000000020D1F6                 db    ? ;
.bss:000000000020D1F7                 db    ? ;
.bss:000000000020D1F8                 db    ? ;
.bss:000000000020D1F9                 db    ? ;
.bss:000000000020D1FA                 db    ? ;
.bss:000000000020D1FB                 db    ? ;
.bss:000000000020D1FC                 db    ? ;
.bss:000000000020D1FD                 db    ? ;
.bss:000000000020D1FE                 db    ? ;
.bss:000000000020D1FF                 db    ? ;
.bss:000000000020D200                 db    ? ;
.bss:000000000020D201                 db    ? ;
.bss:000000000020D202                 db    ? ;
.bss:000000000020D203                 db    ? ;
.bss:000000000020D204                 db    ? ;
.bss:000000000020D205                 db    ? ;
.bss:000000000020D206                 db    ? ;
.bss:000000000020D207                 db    ? ;
.bss:000000000020D208                 db    ? ;
.bss:000000000020D209                 db    ? ;
.bss:000000000020D20A                 db    ? ;
.bss:000000000020D20B                 db    ? ;
.bss:000000000020D20C                 db    ? ;
.bss:000000000020D20D                 db    ? ;
.bss:000000000020D20E                 db    ? ;
.bss:000000000020D20F                 db    ? ;
.bss:000000000020D210                 db    ? ;
.bss:000000000020D211                 db    ? ;
.bss:000000000020D212                 db    ? ;
.bss:000000000020D213                 db    ? ;
.bss:000000000020D214                 db    ? ;
.bss:000000000020D215                 db    ? ;
.bss:000000000020D216                 db    ? ;
.bss:000000000020D217                 db    ? ;
.bss:000000000020D218                 db    ? ;
.bss:000000000020D219                 db    ? ;
.bss:000000000020D21A                 db    ? ;
.bss:000000000020D21B                 db    ? ;
.bss:000000000020D21C                 db    ? ;
.bss:000000000020D21D                 db    ? ;
.bss:000000000020D21E                 db    ? ;
.bss:000000000020D21F                 db    ? ;
.bss:000000000020D220                 db    ? ;
.bss:000000000020D221                 db    ? ;
.bss:000000000020D222                 db    ? ;
.bss:000000000020D223                 db    ? ;
.bss:000000000020D224                 db    ? ;
.bss:000000000020D225                 db    ? ;
.bss:000000000020D226                 db    ? ;
.bss:000000000020D227                 db    ? ;
.bss:000000000020D228                 db    ? ;
.bss:000000000020D229                 db    ? ;
.bss:000000000020D22A                 db    ? ;
.bss:000000000020D22B                 db    ? ;
.bss:000000000020D22C                 db    ? ;
.bss:000000000020D22D                 db    ? ;
.bss:000000000020D22E                 db    ? ;
.bss:000000000020D22F                 db    ? ;
.bss:000000000020D230                 db    ? ;
.bss:000000000020D231                 db    ? ;
.bss:000000000020D232                 db    ? ;
.bss:000000000020D233                 db    ? ;
.bss:000000000020D234                 db    ? ;
.bss:000000000020D235                 db    ? ;
.bss:000000000020D236                 db    ? ;
.bss:000000000020D237                 db    ? ;
.bss:000000000020D238                 db    ? ;
.bss:000000000020D239                 db    ? ;
.bss:000000000020D23A                 db    ? ;
.bss:000000000020D23B                 db    ? ;
.bss:000000000020D23C                 db    ? ;
.bss:000000000020D23D                 db    ? ;
.bss:000000000020D23E                 db    ? ;
.bss:000000000020D23F                 db    ? ;
.bss:000000000020D240 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000020D240                                         ; get_quoting_style↑o ...
.bss:000000000020D250 xmmword_20D250  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000020D250                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000020D260 xmmword_20D260  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000020D260                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000020D270 qword_20D270    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000020D270                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000020D278 have_dupfd_cloexec_3326 dd ?            ; DATA XREF: rpl_fcntl+5E↑r
.bss:000000000020D278                                         ; rpl_fcntl:loc_8CFF↑w ...
.bss:000000000020D27C                 align 20h
.bss:000000000020D27C _bss            ends
.bss:000000000020D27C
.prgend:000000000020D280 ; ===========================================================================
.prgend:000000000020D280
.prgend:000000000020D280 ; Segment type: Zero-length
.prgend:000000000020D280 _prgend         segment byte public '' use64
.prgend:000000000020D280 _end            label byte
.prgend:000000000020D280 _prgend         ends
.prgend:000000000020D280
extern:000000000020D288 ; ===========================================================================
extern:000000000020D288
extern:000000000020D288 ; Segment type: Externs
extern:000000000020D288 ; extern
extern:000000000020D288 ; void free(void *ptr)
extern:000000000020D288                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000020D288                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000020D290 ; void __noreturn abort(void)
extern:000000000020D290                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000020D290                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000020D298 ; int *_errno_location(void)
extern:000000000020D298                 extrn __errno_location:near
extern:000000000020D298                                         ; CODE XREF: ___errno_location↑j
extern:000000000020D298                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000020D2A0 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000020D2A0                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000020D2A0                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000020D2A8 ; void __noreturn exit(int status)
extern:000000000020D2A8                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000020D2A8                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000020D2B0 ; size_t _fpending(FILE *fp)
extern:000000000020D2B0                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000020D2B0                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000020D2B8 ; int ferror(FILE *stream)
extern:000000000020D2B8                 extrn ferror:near       ; CODE XREF: _ferror↑j
extern:000000000020D2B8                                         ; DATA XREF: .got:ferror_ptr↑o
extern:000000000020D2C0 ; size_t fread(void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020D2C0                 extrn fread:near        ; CODE XREF: _fread↑j
extern:000000000020D2C0                                         ; DATA XREF: .got:fread_ptr↑o
extern:000000000020D2C8 ; int fcntl(int fd, int cmd, ...)
extern:000000000020D2C8                 extrn fcntl:near        ; CODE XREF: _fcntl↑j
extern:000000000020D2C8                                         ; DATA XREF: .got:fcntl_ptr↑o
extern:000000000020D2D0 ; char *textdomain(const char *domainname)
extern:000000000020D2D0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000020D2D0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000020D2D8 ; int fclose(FILE *stream)
extern:000000000020D2D8                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000020D2D8                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000020D2E0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000020D2E0                 extrn bindtextdomain:near
extern:000000000020D2E0                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000020D2E0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000020D2E8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000020D2E8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000020D2E8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000020D2F0 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000020D2F0                 extrn __ctype_get_mb_cur_max:near
extern:000000000020D2F0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000020D2F0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000020D2F8 ; size_t strlen(const char *s)
extern:000000000020D2F8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000020D2F8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000020D300                 extrn __stack_chk_fail:near
extern:000000000020D300                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000020D300                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000020D308 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000020D308                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000020D308                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000020D310 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000020D310                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000020D310                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000020D318 ; char *strchr(const char *s, int c)
extern:000000000020D318                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000020D318                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000020D320 ; int _overflow(_IO_FILE *, int)
extern:000000000020D320                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000020D320                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000020D328 ; char *strrchr(const char *s, int c)
extern:000000000020D328                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000020D328                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000020D330 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000020D330                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000020D330                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000020D338 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000020D338                 extrn __assert_fail:near
extern:000000000020D338                                         ; CODE XREF: ___assert_fail↑j
extern:000000000020D338                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000020D340 ; unsigned __int64 _strtoul_internal(const char *nptr, char **endptr, int base, int group)
extern:000000000020D340                 extrn __strtoul_internal:near
extern:000000000020D340                                         ; CODE XREF: ___strtoul_internal↑j
extern:000000000020D340                                         ; DATA XREF: .got:__strtoul_internal_ptr↑o
extern:000000000020D348 ; void *memset(void *s, int c, size_t n)
extern:000000000020D348                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000020D348                                         ; blake2b_init_key+DA↑p ...
extern:000000000020D350 ; int close(int fd)
extern:000000000020D350                 extrn close:near        ; CODE XREF: _close↑j
extern:000000000020D350                                         ; DATA XREF: .got:close_ptr↑o
extern:000000000020D358 ; int posix_fadvise(int fd, off_t offset, off_t len, int advise)
extern:000000000020D358                 extrn posix_fadvise:near
extern:000000000020D358                                         ; CODE XREF: _posix_fadvise↑j
extern:000000000020D358                                         ; DATA XREF: .got:posix_fadvise_ptr↑o
extern:000000000020D360 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000020D360                 extrn __libc_start_main:near
extern:000000000020D360                                         ; CODE XREF: start+24↑p
extern:000000000020D360                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000020D368 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000020D368                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000020D368                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000020D370 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000020D370                 extrn fputs_unlocked:near
extern:000000000020D370                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000020D370                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000020D378 ; void *calloc(size_t nmemb, size_t size)
extern:000000000020D378                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000020D378                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000020D380 ; __ssize_t _getdelim(char **lineptr, size_t *n, int delimiter, FILE *stream)
extern:000000000020D380                 extrn __getdelim:near   ; CODE XREF: ___getdelim↑j
extern:000000000020D380                                         ; DATA XREF: .got:__getdelim_ptr↑o
extern:000000000020D388 ; int strcmp(const char *s1, const char *s2)
extern:000000000020D388                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000020D388                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000020D390                 extrn __memcpy_chk:near ; CODE XREF: ___memcpy_chk↑j
extern:000000000020D390                                         ; DATA XREF: .got:__memcpy_chk_ptr↑o
extern:000000000020D398 ; int feof(FILE *stream)
extern:000000000020D398                 extrn feof:near         ; CODE XREF: _feof↑j
extern:000000000020D398                                         ; DATA XREF: .got:feof_ptr↑o
extern:000000000020D3A0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000020D3A0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000020D3A0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000020D3A8 ; int fileno(FILE *stream)
extern:000000000020D3A8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000020D3A8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000020D3B0 ; void *malloc(size_t size)
extern:000000000020D3B0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000020D3B0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000020D3B8 ; int fflush(FILE *stream)
extern:000000000020D3B8                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000020D3B8                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000020D3C0 ; char *nl_langinfo(nl_item item)
extern:000000000020D3C0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000020D3C0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000020D3C8 ; int _freading(FILE *fp)
extern:000000000020D3C8                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000020D3C8                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000020D3D0 ; size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream)
extern:000000000020D3D0                 extrn fwrite_unlocked:near
extern:000000000020D3D0                                         ; CODE XREF: _fwrite_unlocked↑j
extern:000000000020D3D0                                         ; DATA XREF: .got:fwrite_unlocked_ptr↑o
extern:000000000020D3D8 ; void *realloc(void *ptr, size_t size)
extern:000000000020D3D8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000020D3D8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000020D3E0 ; FILE *fdopen(int fd, const char *modes)
extern:000000000020D3E0                 extrn fdopen:near       ; CODE XREF: _fdopen↑j
extern:000000000020D3E0                                         ; DATA XREF: .got:fdopen_ptr↑o
extern:000000000020D3E8 ; char *setlocale(int category, const char *locale)
extern:000000000020D3E8                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000020D3E8                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000020D3F0                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000020D3F0                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000020D3F8 ; int setvbuf(FILE *stream, char *buf, int modes, size_t n)
extern:000000000020D3F8                 extrn setvbuf:near      ; CODE XREF: _setvbuf↑j
extern:000000000020D3F8                                         ; DATA XREF: .got:setvbuf_ptr↑o
extern:000000000020D400 ; void error(int status, int errnum, const char *format, ...)
extern:000000000020D400                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000020D400                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000020D408 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000020D408                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000020D408                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000020D410 ; FILE *fopen(const char *filename, const char *modes)
extern:000000000020D410                 extrn fopen:near        ; CODE XREF: _fopen↑j
extern:000000000020D410                                         ; DATA XREF: .got:fopen_ptr↑o
extern:000000000020D418 ; char *dcngettext(const char *domainname, const char *msgid1, const char *msgid2, unsigned __int64 n, int category)
extern:000000000020D418                 extrn dcngettext:near   ; CODE XREF: _dcngettext↑j
extern:000000000020D418                                         ; DATA XREF: .got:dcngettext_ptr↑o
extern:000000000020D420 ; unsigned __int64 strtoul(const char *nptr, char **endptr, int base)
extern:000000000020D420                 extrn strtoul:near      ; CODE XREF: _strtoul↑j
extern:000000000020D420                                         ; DATA XREF: .got:strtoul_ptr↑o
extern:000000000020D428 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000020D428                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000020D428                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000020D430 ; void __noreturn exit(int status)
extern:000000000020D430                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000020D430                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000020D438 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000020D438                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000020D438                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000020D440                 extrn __fprintf_chk:near
extern:000000000020D440                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000020D440                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000020D448 ; int mbsinit(const mbstate_t *ps)
extern:000000000020D448                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000020D448                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000020D450 ; int iswprint(wint_t wc)
extern:000000000020D450                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000020D450                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000020D458 ; int __fastcall __cxa_finalize(void *)
extern:000000000020D458                 extrn __imp___cxa_finalize:near ; weak
extern:000000000020D458                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000020D458                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000020D460 ; const __int32_t **_ctype_tolower_loc(void)
extern:000000000020D460                 extrn __ctype_tolower_loc:near
extern:000000000020D460                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:000000000020D460                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:000000000020D468 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000020D468                 extrn __ctype_b_loc:near
extern:000000000020D468                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000020D468                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000020D470                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000020D470                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000020D478                 extrn __gmon_start__:near ; weak
extern:000000000020D478                                         ; CODE XREF: _init_proc+10↑p
extern:000000000020D478                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000020D480                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000020D480                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000020D480
extern:000000000020D480
extern:000000000020D480                 end start
