LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 16AFF05C4918AF817BEFE3099B00DA62BCE989D921144D2583E8F13AB1BF97CF
LOAD:0000000000000000 ; Input MD5    : 4F5A17CD5A6315E51801DE6867478E59
LOAD:0000000000000000 ; Input CRC32  : 7A5EE291
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/hostid
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'hostid.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 22608h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 5F18h                ; Size in file image
LOAD:00000000000000D8                 dq 5F18h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6BB0h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206BB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 4D0h                 ; Size in file image
LOAD:0000000000000110                 dq 688h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C78h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C78h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 51B0h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 51B0h                ; Physical address
LOAD:00000000000001B0                 dq 24Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 24Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6BB0h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206BB0h              ; Physical address
LOAD:0000000000000220                 dq 450h                 ; Size in file image
LOAD:0000000000000228                 dq 450h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 17h, 83h, 0B5h, 0F3h, 0BEh, 0AFh, 0A9h, 41h, 13h, 0CCh ; Desc
LOAD:0000000000000284                 db 50h, 0C4h, 0F3h, 33h, 94h, 39h, 1Dh, 5Fh, 0CDh, 3Ah
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Eh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Eh, 2Fh, 35h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_7F0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_7F0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aGethostid - offset byte_7F0, 12h, 0, 0, \ ; "gethostid"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_7F0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_7F0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_7F0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_7F0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_7F0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_7F0, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_7F0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_7F0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_7F0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_7F0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_7F0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_7F0, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_7F0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrrchr - offset byte_7F0, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aLseek - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004A8                            0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMemset - offset byte_7F0, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aLibcStartMain - offset byte_7F0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aMemcmp - offset byte_7F0, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aFputsUnlocked - offset byte_7F0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aCalloc - offset byte_7F0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aGmonStart - offset byte_7F0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemcpy - offset byte_7F0, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFileno - offset byte_7F0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aMalloc - offset byte_7F0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aFflush - offset byte_7F0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aNlLanginfo - offset byte_7F0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFreading - offset byte_7F0, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aRealloc - offset byte_7F0, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aSetlocale - offset byte_7F0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aPrintfChk - offset byte_7F0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aError - offset byte_7F0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000628                            0>
LOAD:0000000000000640                 Elf64_Sym <offset aFseeko - offset byte_7F0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aCxaAtexit - offset byte_7F0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aExit+1 - offset byte_7F0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFwrite - offset byte_7F0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFprintfChk - offset byte_7F0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aItmRegistertmc - offset byte_7F0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMbsinit - offset byte_7F0, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aIswprint - offset byte_7F0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aCxaFinalize - offset byte_7F0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCtypeBLoc - offset byte_7F0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aStdout - offset byte_7F0, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000730                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000748                 Elf64_Sym <offset aProgname - offset byte_7F0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000748                            offset __bss_start, 8>
LOAD:0000000000000760                 Elf64_Sym <offset aProgramInvocat - offset byte_7F0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000760                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000778                 Elf64_Sym <offset aPrognameFull - offset byte_7F0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000778                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_7F0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000790                            offset __bss_start, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aOpterr - offset byte_7F0, 11h, 0, 19h, \ ; "opterr"
LOAD:00000000000007A8                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:00000000000007C0                 Elf64_Sym <offset aStderr - offset byte_7F0, 11h, 0, 19h, \ ; "stderr"
LOAD:00000000000007C0                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aOptind - offset byte_7F0, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007D8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000007F0 ; ELF String Table
LOAD:00000000000007F0 byte_7F0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000007F0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000007F1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000AE8↓o
LOAD:00000000000007FB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000802 aGethostid      db 'gethostid',0        ; DATA XREF: LOAD:0000000000000340↑o
LOAD:000000000000080C aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000819 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000823 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:000000000000082B aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000833 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:000000000000083A aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000842 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:000000000000084C aError          db 'error',0            ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000852 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000863 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:000000000000086C aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000874 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:000000000000087A aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:000000000000087A                                         ; LOAD:0000000000000670↑o
LOAD:0000000000000880 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000880                                         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000898 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000898                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000008AF aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:00000000000008B6 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:00000000000008BD aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008C4 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000008D5 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000008DC aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008EA aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000008F1 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000008F7 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000008FE aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000905 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:000000000000090C aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000914 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000920 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000718↑o
LOAD:000000000000092E aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000939 aStderr         db 'stderr',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000940 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:000000000000094C aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000953 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:000000000000095A aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000965 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000965                                         ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000983 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000992 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000992                                         ; LOAD:00000000000003B8↑o
LOAD:00000000000009A1 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:00000000000009A8 aLibcStartMain  db '__libc_start_main',0
LOAD:00000000000009A8                                         ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000009BA aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000009C1 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009D0 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009D5 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009E0 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000778↑o
LOAD:00000000000009F0 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000009FD aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000AF8↓o
LOAD:0000000000000A07 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000B08↓o
LOAD:0000000000000A13 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000B18↓o
LOAD:0000000000000A1E aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B28↓o
LOAD:0000000000000A28 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B38↓o
LOAD:0000000000000A34 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A34                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000A50 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000A5F aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A5F                                         ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000A79                 align 2
LOAD:0000000000000A7A ; ELF GNU Symbol Version Table
LOAD:0000000000000A7A                 dw 0
LOAD:0000000000000A7C                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A7E                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A80                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A82                 dw 2                    ; gethostid@@GLIBC_2.2.5
LOAD:0000000000000A84                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A86                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A88                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A8A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A8C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000A8E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000A90                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000A92                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000A94                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000A98                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000A9A                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000A9C                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000AA6                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000AA8                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000AAA                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000AAE                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000AB0                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000AB2                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000AC0                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000AC4                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000AC6                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000AC8                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000ACA                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000ACC                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000ACE                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AD0                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AD2                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AD4                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AD6                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AD8                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000ADA                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000ADC                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000ADE                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000AE0                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000AE2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000AE4                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000AE6                 dw 0
LOAD:0000000000000AE8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000AE8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_7F0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000AF8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_7F0, \ ; "GLIBC_2.3"
LOAD:0000000000000AF8                                10h>
LOAD:0000000000000B08                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_7F0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000B08                                10h>
LOAD:0000000000000B18                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_7F0, \ ; "GLIBC_2.14"
LOAD:0000000000000B18                                10h>
LOAD:0000000000000B28                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_7F0, \ ; "GLIBC_2.4"
LOAD:0000000000000B28                                10h>
LOAD:0000000000000B38                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_7F0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B48 ; ELF RELA Relocation Table
LOAD:0000000000000B48                 Elf64_Rela <206BB0h, 8, 1680h> ; R_X86_64_RELATIVE +1680h
LOAD:0000000000000B60                 Elf64_Rela <206BB8h, 8, 1640h> ; R_X86_64_RELATIVE +1640h
LOAD:0000000000000B78                 Elf64_Rela <206BC0h, 8, 48FDh> ; R_X86_64_RELATIVE +48FDh
LOAD:0000000000000B90                 Elf64_Rela <206BE0h, 8, 4902h> ; R_X86_64_RELATIVE +4902h
LOAD:0000000000000BA8                 Elf64_Rela <206C20h, 8, 4969h> ; R_X86_64_RELATIVE +4969h
LOAD:0000000000000BC0                 Elf64_Rela <206C28h, 8, 4971h> ; R_X86_64_RELATIVE +4971h
LOAD:0000000000000BD8                 Elf64_Rela <206C30h, 8, 4977h> ; R_X86_64_RELATIVE +4977h
LOAD:0000000000000BF0                 Elf64_Rela <206C38h, 8, 4984h> ; R_X86_64_RELATIVE +4984h
LOAD:0000000000000C08                 Elf64_Rela <206C40h, 8, 4991h> ; R_X86_64_RELATIVE +4991h
LOAD:0000000000000C20                 Elf64_Rela <206C48h, 8, 49A5h> ; R_X86_64_RELATIVE +49A5h
LOAD:0000000000000C38                 Elf64_Rela <206C50h, 8, 49A7h> ; R_X86_64_RELATIVE +49A7h
LOAD:0000000000000C50                 Elf64_Rela <206C58h, 8, 498Ah> ; R_X86_64_RELATIVE +498Ah
LOAD:0000000000000C68                 Elf64_Rela <206C60h, 8, 471Fh> ; R_X86_64_RELATIVE +471Fh
LOAD:0000000000000C80                 Elf64_Rela <206C68h, 8, 49AFh> ; R_X86_64_RELATIVE +49AFh
LOAD:0000000000000C98                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000CB0                 Elf64_Rela <207010h, 8, 48E3h> ; R_X86_64_RELATIVE +48E3h
LOAD:0000000000000CC8                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000CE0                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000CF8                 Elf64_Rela <206FC0h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D10                 Elf64_Rela <206FC8h, 1500000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D28                 Elf64_Rela <206FD0h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D40                 Elf64_Rela <206FD8h, 2900000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000D58                 Elf64_Rela <206FE0h, 2C00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000D70                 Elf64_Rela <207080h, 2F00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000D88                 Elf64_Rela <207088h, 2E00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DA0                 Elf64_Rela <207090h, 3500000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000DB8                 Elf64_Rela <207098h, 3100000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000DD0                 Elf64_Rela <2070A0h, 3300000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000DE8                 Elf64_Rela <2070C0h, 3400000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E00 ; ELF JMPREL Relocation Table
LOAD:0000000000000E00                 Elf64_Rela <206E80h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E18                 Elf64_Rela <206E88h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E30                 Elf64_Rela <206E90h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000E48                 Elf64_Rela <206E98h, 400000007h, 0> ; R_X86_64_JUMP_SLOT gethostid
LOAD:0000000000000E60                 Elf64_Rela <206EA0h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000E78                 Elf64_Rela <206EA8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000E90                 Elf64_Rela <206EB0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EA8                 Elf64_Rela <206EB8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000EC0                 Elf64_Rela <206EC0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000ED8                 Elf64_Rela <206EC8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000EF0                 Elf64_Rela <206ED0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F08                 Elf64_Rela <206ED8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F20                 Elf64_Rela <206EE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F38                 Elf64_Rela <206EE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F50                 Elf64_Rela <206EF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000F68                 Elf64_Rela <206EF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000F80                 Elf64_Rela <206F00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000F98                 Elf64_Rela <206F08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000FB0                 Elf64_Rela <206F10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000000FC8                 Elf64_Rela <206F18h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000000FE0                 Elf64_Rela <206F20h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000000FF8                 Elf64_Rela <206F28h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001010                 Elf64_Rela <206F30h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001028                 Elf64_Rela <206F38h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001040                 Elf64_Rela <206F40h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001058                 Elf64_Rela <206F48h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001070                 Elf64_Rela <206F50h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001088                 Elf64_Rela <206F58h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000010A0                 Elf64_Rela <206F60h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000010B8                 Elf64_Rela <206F68h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000010D0                 Elf64_Rela <206F70h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000010E8                 Elf64_Rela <206F78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001100                 Elf64_Rela <206F80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001118                 Elf64_Rela <206F88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001130                 Elf64_Rela <206F90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001148                 Elf64_Rela <206F98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001160                 Elf64_Rela <206FA0h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001178                 Elf64_Rela <206FA8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001190                 Elf64_Rela <206FB0h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000011A8                 Elf64_Rela <206FB8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000011A8 LOAD            ends
LOAD:00000000000011A8
.init:00000000000011C0 ; ===========================================================================
.init:00000000000011C0
.init:00000000000011C0 ; Segment type: Pure code
.init:00000000000011C0 ; Segment permissions: Read/Execute
.init:00000000000011C0 _init           segment dword public 'CODE' use64
.init:00000000000011C0                 assume cs:_init
.init:00000000000011C0                 ;org 11C0h
.init:00000000000011C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00000000000011C0
.init:00000000000011C0 ; =============== S U B R O U T I N E =======================================
.init:00000000000011C0
.init:00000000000011C0
.init:00000000000011C0                 public _init_proc
.init:00000000000011C0 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:00000000000011C0                 sub     rsp, 8          ; _init
.init:00000000000011C4                 mov     rax, cs:__gmon_start___ptr
.init:00000000000011CB                 test    rax, rax
.init:00000000000011CE                 jz      short loc_11D2
.init:00000000000011D0                 call    rax ; __gmon_start__
.init:00000000000011D2
.init:00000000000011D2 loc_11D2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000011D2                 add     rsp, 8
.init:00000000000011D6                 retn
.init:00000000000011D6 _init_proc      endp
.init:00000000000011D6
.init:00000000000011D6 _init           ends
.init:00000000000011D6
LOAD:00000000000011D7 ; ===========================================================================
LOAD:00000000000011D7
LOAD:00000000000011D7 ; Segment type: Pure code
LOAD:00000000000011D7 ; Segment permissions: Read/Execute
LOAD:00000000000011D7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000011D7                 assume cs:LOAD
LOAD:00000000000011D7                 ;org 11D7h
LOAD:00000000000011D7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000011D7                 align 20h
LOAD:00000000000011D7 LOAD            ends
LOAD:00000000000011D7
.plt:00000000000011E0 ; ===========================================================================
.plt:00000000000011E0
.plt:00000000000011E0 ; Segment type: Pure code
.plt:00000000000011E0 ; Segment permissions: Read/Execute
.plt:00000000000011E0 _plt            segment para public 'CODE' use64
.plt:00000000000011E0                 assume cs:_plt
.plt:00000000000011E0                 ;org 11E0h
.plt:00000000000011E0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000011E0
.plt:00000000000011E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011E0
.plt:00000000000011E0
.plt:00000000000011E0 sub_11E0        proc near               ; CODE XREF: .plt:00000000000011FB↓j
.plt:00000000000011E0                                         ; .plt:000000000000120B↓j ...
.plt:00000000000011E0 ; __unwind {
.plt:00000000000011E0                 push    cs:qword_206E70
.plt:00000000000011E6                 jmp     cs:qword_206E78
.plt:00000000000011E6 sub_11E0        endp
.plt:00000000000011E6
.plt:00000000000011E6 ; ---------------------------------------------------------------------------
.plt:00000000000011EC                 align 10h
.plt:00000000000011F0
.plt:00000000000011F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000011F0
.plt:00000000000011F0 ; Attributes: thunk
.plt:00000000000011F0
.plt:00000000000011F0 ; void free(void *ptr)
.plt:00000000000011F0 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:00000000000011F0                                         ; quotearg_free+37↓p ...
.plt:00000000000011F0                 jmp     cs:free_ptr
.plt:00000000000011F0 _free           endp
.plt:00000000000011F0
.plt:00000000000011F6 ; ---------------------------------------------------------------------------
.plt:00000000000011F6                 push    0
.plt:00000000000011FB                 jmp     sub_11E0
.plt:0000000000001200
.plt:0000000000001200 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001200
.plt:0000000000001200 ; Attributes: noreturn thunk
.plt:0000000000001200
.plt:0000000000001200 ; void __noreturn abort(void)
.plt:0000000000001200 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001200                                         ; quotearg_buffer_restyled:def_1F21↓p ...
.plt:0000000000001200                 jmp     cs:abort_ptr
.plt:0000000000001200 _abort          endp
.plt:0000000000001200
.plt:0000000000001206 ; ---------------------------------------------------------------------------
.plt:0000000000001206                 push    1
.plt:000000000000120B                 jmp     sub_11E0
.plt:0000000000001210
.plt:0000000000001210 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001210
.plt:0000000000001210 ; Attributes: thunk
.plt:0000000000001210
.plt:0000000000001210 ; int *__errno_location(void)
.plt:0000000000001210 ___errno_location proc near             ; CODE XREF: close_stdout+16↓p
.plt:0000000000001210                                         ; quotearg_n_options+1C↓p ...
.plt:0000000000001210                 jmp     cs:__errno_location_ptr
.plt:0000000000001210 ___errno_location endp
.plt:0000000000001210
.plt:0000000000001216 ; ---------------------------------------------------------------------------
.plt:0000000000001216                 push    2
.plt:000000000000121B                 jmp     sub_11E0
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220 ; Attributes: thunk
.plt:0000000000001220
.plt:0000000000001220 ; __int64 gethostid(void)
.plt:0000000000001220 _gethostid      proc near               ; CODE XREF: main+9B↓p
.plt:0000000000001220                 jmp     cs:gethostid_ptr
.plt:0000000000001220 _gethostid      endp
.plt:0000000000001220
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:0000000000001226                 push    3
.plt:000000000000122B                 jmp     sub_11E0
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: thunk
.plt:0000000000001230
.plt:0000000000001230 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001230 _strncmp        proc near               ; CODE XREF: usage+1DC↓p
.plt:0000000000001230                                         ; usage+29D↓p
.plt:0000000000001230                 jmp     cs:strncmp_ptr
.plt:0000000000001230 _strncmp        endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    4
.plt:000000000000123B                 jmp     sub_11E0
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: noreturn thunk
.plt:0000000000001240
.plt:0000000000001240 ; void __noreturn _exit(int status)
.plt:0000000000001240 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001240                 jmp     cs:_exit_ptr
.plt:0000000000001240 __exit          endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    5
.plt:000000000000124B                 jmp     sub_11E0
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; size_t __fpending(FILE *fp)
.plt:0000000000001250 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001250                 jmp     cs:__fpending_ptr
.plt:0000000000001250 ___fpending     endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    6
.plt:000000000000125B                 jmp     sub_11E0
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; char *textdomain(const char *domainname)
.plt:0000000000001260 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001260                 jmp     cs:textdomain_ptr
.plt:0000000000001260 _textdomain     endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    7
.plt:000000000000126B                 jmp     sub_11E0
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: thunk
.plt:0000000000001270
.plt:0000000000001270 ; int fclose(FILE *stream)
.plt:0000000000001270 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001270                                         ; rpl_fclose+6B↓j
.plt:0000000000001270                 jmp     cs:fclose_ptr
.plt:0000000000001270 _fclose         endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    8
.plt:000000000000127B                 jmp     sub_11E0
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001280 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:0000000000001280                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001280 _bindtextdomain endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    9
.plt:000000000000128B                 jmp     sub_11E0
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001290 _dcgettext      proc near               ; CODE XREF: main+D8↓p
.plt:0000000000001290                                         ; usage+38↓p ...
.plt:0000000000001290                 jmp     cs:dcgettext_ptr
.plt:0000000000001290 _dcgettext      endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    0Ah
.plt:000000000000129B                 jmp     sub_11E0
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000012A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000012A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000012A0 ___ctype_get_mb_cur_max endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    0Bh
.plt:00000000000012AB                 jmp     sub_11E0
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; size_t strlen(const char *s)
.plt:00000000000012B0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000012B0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000012B0                 jmp     cs:strlen_ptr
.plt:00000000000012B0 _strlen         endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    0Ch
.plt:00000000000012BB                 jmp     sub_11E0
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: noreturn thunk
.plt:00000000000012C0
.plt:00000000000012C0 ___stack_chk_fail proc near             ; CODE XREF: parse_long_options:loc_1BBA↓p
.plt:00000000000012C0                                         ; parse_gnu_standard_options_only:loc_1CF6↓p ...
.plt:00000000000012C0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000012C0 ___stack_chk_fail endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    0Dh
.plt:00000000000012CB                 jmp     sub_11E0
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000012D0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:00000000000012D0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:00000000000012D0                 jmp     cs:getopt_long_ptr
.plt:00000000000012D0 _getopt_long    endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    0Eh
.plt:00000000000012DB                 jmp     sub_11E0
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000012E0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000012E0                 jmp     cs:mbrtowc_ptr
.plt:00000000000012E0 _mbrtowc        endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    0Fh
.plt:00000000000012EB                 jmp     sub_11E0
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: thunk
.plt:00000000000012F0
.plt:00000000000012F0 ; char *strrchr(const char *s, int c)
.plt:00000000000012F0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000012F0                 jmp     cs:strrchr_ptr
.plt:00000000000012F0 _strrchr        endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    10h
.plt:00000000000012FB                 jmp     sub_11E0
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001300 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001300                                         ; rpl_fseeko+3B↓p
.plt:0000000000001300                 jmp     cs:lseek_ptr
.plt:0000000000001300 _lseek          endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    11h
.plt:000000000000130B                 jmp     sub_11E0
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001310 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001310                                         ; xzalloc+12↓j
.plt:0000000000001310                 jmp     cs:memset_ptr
.plt:0000000000001310 _memset         endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    12h
.plt:000000000000131B                 jmp     sub_11E0
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001320 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001320                 jmp     cs:memcmp_ptr
.plt:0000000000001320 _memcmp         endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    13h
.plt:000000000000132B                 jmp     sub_11E0
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001330 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:0000000000001330                                         ; usage+C9↓p ...
.plt:0000000000001330                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001330 _fputs_unlocked endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    14h
.plt:000000000000133B                 jmp     sub_11E0
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001340 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001340                 jmp     cs:calloc_ptr
.plt:0000000000001340 _calloc         endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    15h
.plt:000000000000134B                 jmp     sub_11E0
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001350 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001350                 jmp     cs:memcpy_ptr
.plt:0000000000001350 _memcpy         endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    16h
.plt:000000000000135B                 jmp     sub_11E0
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int fileno(FILE *stream)
.plt:0000000000001360 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001360                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001360                 jmp     cs:fileno_ptr
.plt:0000000000001360 _fileno         endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    17h
.plt:000000000000136B                 jmp     sub_11E0
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; void *malloc(size_t size)
.plt:0000000000001370 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001370                 jmp     cs:malloc_ptr
.plt:0000000000001370 _malloc         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    18h
.plt:000000000000137B                 jmp     sub_11E0
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; int fflush(FILE *stream)
.plt:0000000000001380 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001380                                         ; rpl_fflush+3B↓j
.plt:0000000000001380                 jmp     cs:fflush_ptr
.plt:0000000000001380 _fflush         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    19h
.plt:000000000000138B                 jmp     sub_11E0
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; char *nl_langinfo(nl_item item)
.plt:0000000000001390 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001390                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001390 _nl_langinfo    endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    1Ah
.plt:000000000000139B                 jmp     sub_11E0
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; int __freading(FILE *fp)
.plt:00000000000013A0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000013A0                                         ; rpl_fflush+9↓p
.plt:00000000000013A0                 jmp     cs:__freading_ptr
.plt:00000000000013A0 ___freading     endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    1Bh
.plt:00000000000013AB                 jmp     sub_11E0
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000013B0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000013B0                 jmp     cs:realloc_ptr
.plt:00000000000013B0 _realloc        endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    1Ch
.plt:00000000000013BB                 jmp     sub_11E0
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; char *setlocale(int category, const char *locale)
.plt:00000000000013C0 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:00000000000013C0                                         ; usage+1C3↓p ...
.plt:00000000000013C0                 jmp     cs:setlocale_ptr
.plt:00000000000013C0 _setlocale      endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    1Dh
.plt:00000000000013CB                 jmp     sub_11E0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ___printf_chk   proc near               ; CODE XREF: main+B0↓p
.plt:00000000000013D0                                         ; usage+78↓p ...
.plt:00000000000013D0                 jmp     cs:__printf_chk_ptr
.plt:00000000000013D0 ___printf_chk   endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1Eh
.plt:00000000000013DB                 jmp     sub_11E0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000013E0 _error          proc near               ; CODE XREF: main+E9↓p
.plt:00000000000013E0                                         ; close_stdout+7D↓p ...
.plt:00000000000013E0                 jmp     cs:error_ptr
.plt:00000000000013E0 _error          endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    1Fh
.plt:00000000000013EB                 jmp     sub_11E0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:00000000000013F0 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_455A↓j
.plt:00000000000013F0                 jmp     cs:fseeko_ptr
.plt:00000000000013F0 _fseeko         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    20h ; ' '
.plt:00000000000013FB                 jmp     sub_11E0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001400 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001400                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001400 ___cxa_atexit   endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    21h ; '!'
.plt:000000000000140B                 jmp     sub_11E0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: noreturn thunk
.plt:0000000000001410
.plt:0000000000001410 ; void __noreturn exit(int status)
.plt:0000000000001410 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001410                                         ; parse_long_options+122↓p ...
.plt:0000000000001410                 jmp     cs:exit_ptr
.plt:0000000000001410 _exit           endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    22h ; '"'
.plt:000000000000141B                 jmp     sub_11E0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001420 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001420                 jmp     cs:fwrite_ptr
.plt:0000000000001420 _fwrite         endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    23h ; '#'
.plt:000000000000142B                 jmp     sub_11E0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001430                                         ; version_etc_arn+37↓p ...
.plt:0000000000001430                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001430 ___fprintf_chk  endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    24h ; '$'
.plt:000000000000143B                 jmp     sub_11E0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001440 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001440                 jmp     cs:mbsinit_ptr
.plt:0000000000001440 _mbsinit        endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    25h ; '%'
.plt:000000000000144B                 jmp     sub_11E0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; int iswprint(wint_t wc)
.plt:0000000000001450 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001450                 jmp     cs:iswprint_ptr
.plt:0000000000001450 _iswprint       endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    26h ; '&'
.plt:000000000000145B                 jmp     sub_11E0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001460 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001460                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001460 ___ctype_b_loc  endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    27h ; '''
.plt:000000000000146B                 jmp     sub_11E0
.plt:000000000000146B ; } // starts at 11E0
.plt:000000000000146B _plt            ends
.plt:000000000000146B
.plt.got:0000000000001470 ; ===========================================================================
.plt.got:0000000000001470
.plt.got:0000000000001470 ; Segment type: Pure code
.plt.got:0000000000001470 ; Segment permissions: Read/Execute
.plt.got:0000000000001470 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001470                 assume cs:_plt_got
.plt.got:0000000000001470                 ;org 1470h
.plt.got:0000000000001470                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001470
.plt.got:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001470
.plt.got:0000000000001470 ; Attributes: thunk
.plt.got:0000000000001470
.plt.got:0000000000001470 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001470 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001470 ; __unwind {
.plt.got:0000000000001470                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001470 __cxa_finalize  endp
.plt.got:0000000000001470
.plt.got:0000000000001470 ; ---------------------------------------------------------------------------
.plt.got:0000000000001476                 align 8
.plt.got:0000000000001476 ; } // starts at 1470
.plt.got:0000000000001476 _plt_got        ends
.plt.got:0000000000001476
LOAD:0000000000001478 ; ===========================================================================
LOAD:0000000000001478
LOAD:0000000000001478 ; Segment type: Pure code
LOAD:0000000000001478 ; Segment permissions: Read/Execute
LOAD:0000000000001478 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001478                 assume cs:LOAD
LOAD:0000000000001478                 ;org 1478h
LOAD:0000000000001478                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001478                 align 20h
LOAD:0000000000001478 LOAD            ends
LOAD:0000000000001478
.text:0000000000001480 ; ===========================================================================
.text:0000000000001480
.text:0000000000001480 ; Segment type: Pure code
.text:0000000000001480 ; Segment permissions: Read/Execute
.text:0000000000001480 _text           segment para public 'CODE' use64
.text:0000000000001480                 assume cs:_text
.text:0000000000001480                 ;org 1480h
.text:0000000000001480                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001480
.text:0000000000001480 ; =============== S U B R O U T I N E =======================================
.text:0000000000001480
.text:0000000000001480
.text:0000000000001480 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001480                 public main
.text:0000000000001480 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001480 ; __unwind {
.text:0000000000001480                 push    rbp
.text:0000000000001481                 push    rbx
.text:0000000000001482                 mov     ebp, edi
.text:0000000000001484                 mov     rbx, rsi
.text:0000000000001487                 sub     rsp, 8
.text:000000000000148B                 mov     rdi, [rsi]
.text:000000000000148E                 call    set_program_name
.text:0000000000001493                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:000000000000149A                 mov     edi, 6          ; category
.text:000000000000149F                 call    _setlocale
.text:00000000000014A4                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000014AB                 lea     rdi, domainname ; "coreutils"
.text:00000000000014B2                 call    _bindtextdomain
.text:00000000000014B7                 lea     rdi, domainname ; "coreutils"
.text:00000000000014BE                 call    _textdomain
.text:00000000000014C3                 lea     rdi, close_stdout
.text:00000000000014CA                 call    atexit
.text:00000000000014CF                 lea     rax, aJimMeyering ; "Jim Meyering"
.text:00000000000014D6                 sub     rsp, 8
.text:00000000000014DA                 mov     r8, cs:Version
.text:00000000000014E1                 push    0
.text:00000000000014E3                 lea     rcx, unk_46E1
.text:00000000000014EA                 lea     rdx, aHostid    ; "hostid"
.text:00000000000014F1                 push    rax
.text:00000000000014F2                 lea     rax, usage
.text:00000000000014F9                 mov     r9d, 1
.text:00000000000014FF                 mov     rsi, rbx
.text:0000000000001502                 mov     edi, ebp
.text:0000000000001504                 push    rax
.text:0000000000001505                 xor     eax, eax
.text:0000000000001507                 call    parse_gnu_standard_options_only
.text:000000000000150C                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001513                 add     rsp, 20h
.text:0000000000001517                 cmp     eax, ebp
.text:0000000000001519                 jl      short loc_153E
.text:000000000000151B                 call    _gethostid
.text:0000000000001520                 lea     rsi, a08x       ; "%08x\n"
.text:0000000000001527                 mov     edx, eax
.text:0000000000001529                 mov     edi, 1
.text:000000000000152E                 xor     eax, eax
.text:0000000000001530                 call    ___printf_chk
.text:0000000000001535                 add     rsp, 8
.text:0000000000001539                 xor     eax, eax
.text:000000000000153B                 pop     rbx
.text:000000000000153C                 pop     rbp
.text:000000000000153D                 retn
.text:000000000000153E ; ---------------------------------------------------------------------------
.text:000000000000153E
.text:000000000000153E loc_153E:                               ; CODE XREF: main+99↑j
.text:000000000000153E                 mov     rdi, [rbx+rax*8]
.text:0000000000001542                 call    quote
.text:0000000000001547                 lea     rsi, msgid      ; "extra operand %s"
.text:000000000000154E                 mov     rbx, rax
.text:0000000000001551                 mov     edx, 5          ; category
.text:0000000000001556                 xor     edi, edi        ; domainname
.text:0000000000001558                 call    _dcgettext
.text:000000000000155D                 xor     edi, edi        ; status
.text:000000000000155F                 mov     rdx, rax        ; format
.text:0000000000001562                 mov     rcx, rbx
.text:0000000000001565                 xor     esi, esi        ; errnum
.text:0000000000001567                 xor     eax, eax
.text:0000000000001569                 call    _error
.text:000000000000156E                 mov     edi, 1          ; status
.text:0000000000001573                 call    usage
.text:0000000000001573 ; } // starts at 1480
.text:0000000000001573 main            endp
.text:0000000000001573
.text:0000000000001573 ; ---------------------------------------------------------------------------
.text:0000000000001578                 align 20h
.text:0000000000001580
.text:0000000000001580 ; =============== S U B R O U T I N E =======================================
.text:0000000000001580
.text:0000000000001580 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001580
.text:0000000000001580 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001580                 public start
.text:0000000000001580 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001580 ; __unwind {
.text:0000000000001580                 xor     ebp, ebp
.text:0000000000001582                 mov     r9, rdx         ; rtld_fini
.text:0000000000001585                 pop     rsi             ; argc
.text:0000000000001586                 mov     rdx, rsp        ; ubp_av
.text:0000000000001589                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:000000000000158D                 push    rax
.text:000000000000158E                 push    rsp             ; stack_end
.text:000000000000158F                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001596                 lea     rcx, __libc_csu_init ; init
.text:000000000000159D                 lea     rdi, main       ; main
.text:00000000000015A4                 call    cs:__libc_start_main_ptr
.text:00000000000015AA                 hlt
.text:00000000000015AA ; } // starts at 1580
.text:00000000000015AA start           endp
.text:00000000000015AA
.text:00000000000015AA ; ---------------------------------------------------------------------------
.text:00000000000015AB                 align 10h
.text:00000000000015B0
.text:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000015B0
.text:00000000000015B0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000015B0
.text:00000000000015B0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1663↓p
.text:00000000000015B0                 lea     rdi, __bss_start
.text:00000000000015B7                 push    rbp
.text:00000000000015B8                 lea     rax, __bss_start
.text:00000000000015BF                 cmp     rax, rdi
.text:00000000000015C2                 mov     rbp, rsp
.text:00000000000015C5                 jz      short loc_15E0
.text:00000000000015C7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000015CE                 test    rax, rax
.text:00000000000015D1                 jz      short loc_15E0
.text:00000000000015D3                 pop     rbp
.text:00000000000015D4                 jmp     rax
.text:00000000000015D4 ; ---------------------------------------------------------------------------
.text:00000000000015D6                 align 20h
.text:00000000000015E0
.text:00000000000015E0 loc_15E0:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:00000000000015E0                                         ; deregister_tm_clones+21↑j
.text:00000000000015E0                 pop     rbp
.text:00000000000015E1                 retn
.text:00000000000015E1 deregister_tm_clones endp
.text:00000000000015E1
.text:00000000000015E1 ; ---------------------------------------------------------------------------
.text:00000000000015E2                 align 10h
.text:00000000000015F0
.text:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000015F0
.text:00000000000015F0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000015F0
.text:00000000000015F0 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:00000000000015F0                 lea     rdi, __bss_start
.text:00000000000015F7                 lea     rsi, __bss_start
.text:00000000000015FE                 push    rbp
.text:00000000000015FF                 sub     rsi, rdi
.text:0000000000001602                 mov     rbp, rsp
.text:0000000000001605                 sar     rsi, 3
.text:0000000000001609                 mov     rax, rsi
.text:000000000000160C                 shr     rax, 3Fh
.text:0000000000001610                 add     rsi, rax
.text:0000000000001613                 sar     rsi, 1
.text:0000000000001616                 jz      short loc_1630
.text:0000000000001618                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000161F                 test    rax, rax
.text:0000000000001622                 jz      short loc_1630
.text:0000000000001624                 pop     rbp
.text:0000000000001625                 jmp     rax
.text:0000000000001625 ; ---------------------------------------------------------------------------
.text:0000000000001627                 align 10h
.text:0000000000001630
.text:0000000000001630 loc_1630:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001630                                         ; register_tm_clones+32↑j
.text:0000000000001630                 pop     rbp
.text:0000000000001631                 retn
.text:0000000000001631 register_tm_clones endp
.text:0000000000001631
.text:0000000000001631 ; ---------------------------------------------------------------------------
.text:0000000000001632                 align 20h
.text:0000000000001640
.text:0000000000001640 ; =============== S U B R O U T I N E =======================================
.text:0000000000001640
.text:0000000000001640 ; Attributes: info_from_lumina
.text:0000000000001640
.text:0000000000001640 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001640                 cmp     cs:completed_7697, 0
.text:0000000000001647                 jnz     short locret_1678
.text:0000000000001649                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001651                 push    rbp
.text:0000000000001652                 mov     rbp, rsp
.text:0000000000001655                 jz      short loc_1663
.text:0000000000001657                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000165E                 call    __cxa_finalize
.text:0000000000001663
.text:0000000000001663 loc_1663:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001663                 call    deregister_tm_clones
.text:0000000000001668                 mov     cs:completed_7697, 1
.text:000000000000166F                 pop     rbp
.text:0000000000001670                 retn
.text:0000000000001670 ; ---------------------------------------------------------------------------
.text:0000000000001671                 align 8
.text:0000000000001678
.text:0000000000001678 locret_1678:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001678                 rep retn
.text:0000000000001678 __do_global_dtors_aux endp
.text:0000000000001678
.text:0000000000001678 ; ---------------------------------------------------------------------------
.text:000000000000167A                 align 20h
.text:0000000000001680
.text:0000000000001680 ; =============== S U B R O U T I N E =======================================
.text:0000000000001680
.text:0000000000001680 ; Attributes: bp-based frame
.text:0000000000001680
.text:0000000000001680 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001680                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001680                 push    rbp
.text:0000000000001681                 mov     rbp, rsp
.text:0000000000001684                 pop     rbp
.text:0000000000001685                 jmp     register_tm_clones
.text:0000000000001685 frame_dummy     endp
.text:0000000000001685
.text:0000000000001685 ; ---------------------------------------------------------------------------
.text:000000000000168A                 align 10h
.text:0000000000001690
.text:0000000000001690 ; =============== S U B R O U T I N E =======================================
.text:0000000000001690
.text:0000000000001690 ; Attributes: noreturn
.text:0000000000001690
.text:0000000000001690 ; void __fastcall __noreturn usage(int status)
.text:0000000000001690                 public usage
.text:0000000000001690 usage           proc near               ; CODE XREF: main+F3↑p
.text:0000000000001690                                         ; DATA XREF: main+72↑o
.text:0000000000001690
.text:0000000000001690 var_A8          = qword ptr -0A8h
.text:0000000000001690 var_A0          = qword ptr -0A0h
.text:0000000000001690 var_98          = qword ptr -98h
.text:0000000000001690 var_90          = qword ptr -90h
.text:0000000000001690 var_88          = qword ptr -88h
.text:0000000000001690 var_80          = qword ptr -80h
.text:0000000000001690 var_78          = qword ptr -78h
.text:0000000000001690 var_70          = qword ptr -70h
.text:0000000000001690 var_68          = qword ptr -68h
.text:0000000000001690 var_60          = qword ptr -60h
.text:0000000000001690 var_58          = qword ptr -58h
.text:0000000000001690 var_50          = qword ptr -50h
.text:0000000000001690 var_48          = qword ptr -48h
.text:0000000000001690 var_40          = qword ptr -40h
.text:0000000000001690 var_30          = qword ptr -30h
.text:0000000000001690
.text:0000000000001690 ; __unwind {
.text:0000000000001690                 push    r13
.text:0000000000001692                 push    r12
.text:0000000000001694                 mov     edx, 5          ; category
.text:0000000000001699                 push    rbp
.text:000000000000169A                 push    rbx
.text:000000000000169B                 mov     ebp, edi
.text:000000000000169D                 sub     rsp, 88h
.text:00000000000016A4                 mov     rbx, cs:program_name
.text:00000000000016AB                 mov     rax, fs:28h
.text:00000000000016B4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000016B9                 xor     eax, eax
.text:00000000000016BB                 test    edi, edi
.text:00000000000016BD                 jz      short loc_16ED
.text:00000000000016BF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000016C6                 xor     edi, edi        ; domainname
.text:00000000000016C8                 call    _dcgettext
.text:00000000000016CD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:00000000000016D4                 mov     rdx, rax
.text:00000000000016D7                 mov     rcx, rbx
.text:00000000000016DA                 mov     esi, 1
.text:00000000000016DF                 xor     eax, eax
.text:00000000000016E1                 call    ___fprintf_chk
.text:00000000000016E6
.text:00000000000016E6 loc_16E6:                               ; CODE XREF: usage+256↓j
.text:00000000000016E6                 mov     edi, ebp        ; status
.text:00000000000016E8                 call    _exit
.text:00000000000016ED ; ---------------------------------------------------------------------------
.text:00000000000016ED
.text:00000000000016ED loc_16ED:                               ; CODE XREF: usage+2D↑j
.text:00000000000016ED                 lea     rsi, aUsageSOptionPr ; "Usage: %s [OPTION]\nPrint the numeric i"...
.text:00000000000016F4                 xor     edi, edi        ; domainname
.text:00000000000016F6                 call    _dcgettext
.text:00000000000016FB                 mov     rdx, rbx
.text:00000000000016FE                 mov     rsi, rax
.text:0000000000001701                 mov     edi, 1
.text:0000000000001706                 xor     eax, eax
.text:0000000000001708                 call    ___printf_chk
.text:000000000000170D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001714                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:000000000000171B                 mov     edx, 5          ; category
.text:0000000000001720                 xor     edi, edi        ; domainname
.text:0000000000001722                 call    _dcgettext
.text:0000000000001727                 mov     rsi, rbx        ; stream
.text:000000000000172A                 mov     rdi, rax        ; s
.text:000000000000172D                 call    _fputs_unlocked
.text:0000000000001732                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001739                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001740                 mov     edx, 5          ; category
.text:0000000000001745                 xor     edi, edi        ; domainname
.text:0000000000001747                 call    _dcgettext
.text:000000000000174C                 mov     rsi, rbx        ; stream
.text:000000000000174F                 mov     rdi, rax        ; s
.text:0000000000001752                 lea     rbx, aSha512sum ; "sha512sum"
.text:0000000000001759                 call    _fputs_unlocked
.text:000000000000175E                 lea     rax, asc_466B   ; "["
.text:0000000000001765                 lea     rcx, aSha256sum ; "sha256sum"
.text:000000000000176C                 mov     [rsp+0A8h+var_58], rbx
.text:0000000000001771                 lea     rbx, aHostid    ; "hostid"
.text:0000000000001778                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001781                 mov     [rsp+0A8h+var_40], 0
.text:000000000000178A                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000178E                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001795                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000179A                 lea     rcx, aSha384sum ; "sha384sum"
.text:00000000000017A1                 mov     rdx, rsp
.text:00000000000017A4                 mov     [rsp+0A8h+var_A0], rax
.text:00000000000017A9                 lea     rax, domainname ; "coreutils"
.text:00000000000017B0                 mov     [rsp+0A8h+var_68], rcx
.text:00000000000017B5                 mov     [rsp+0A8h+var_98], rax
.text:00000000000017BA                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000017C1                 mov     [rsp+0A8h+var_90], rax
.text:00000000000017C6                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000017CD                 mov     [rsp+0A8h+var_88], rax
.text:00000000000017D2                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000017D9                 mov     [rsp+0A8h+var_80], rax
.text:00000000000017DE                 mov     [rsp+0A8h+var_70], rax
.text:00000000000017E3                 mov     [rsp+0A8h+var_60], rax
.text:00000000000017E8                 mov     [rsp+0A8h+var_50], rax
.text:00000000000017ED                 nop     dword ptr [rax]
.text:00000000000017F0
.text:00000000000017F0 loc_17F0:                               ; CODE XREF: usage+17D↓j
.text:00000000000017F0                 add     rdx, 10h
.text:00000000000017F4                 mov     rdi, [rdx]
.text:00000000000017F7                 test    rdi, rdi
.text:00000000000017FA                 jz      short loc_180F
.text:00000000000017FC                 mov     ecx, 7
.text:0000000000001801                 mov     rsi, rbx
.text:0000000000001804                 repe cmpsb
.text:0000000000001806                 setnbe  al
.text:0000000000001809                 sbb     al, 0
.text:000000000000180B                 test    al, al
.text:000000000000180D                 jnz     short loc_17F0
.text:000000000000180F
.text:000000000000180F loc_180F:                               ; CODE XREF: usage+16A↑j
.text:000000000000180F                 mov     r12, [rdx+8]
.text:0000000000001813                 xor     edi, edi        ; domainname
.text:0000000000001815                 mov     edx, 5          ; category
.text:000000000000181A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001821                 test    r12, r12
.text:0000000000001824                 jz      loc_18EB
.text:000000000000182A                 call    _dcgettext
.text:000000000000182F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001836                 lea     rdx, unk_46E1
.text:000000000000183D                 mov     rsi, rax
.text:0000000000001840                 mov     edi, 1
.text:0000000000001845                 xor     eax, eax
.text:0000000000001847                 call    ___printf_chk
.text:000000000000184C                 xor     esi, esi        ; locale
.text:000000000000184E                 mov     edi, 5          ; category
.text:0000000000001853                 call    _setlocale
.text:0000000000001858                 test    rax, rax
.text:000000000000185B                 jz      short loc_1879
.text:000000000000185D                 lea     rsi, s2         ; "en_"
.text:0000000000001864                 mov     edx, 3          ; n
.text:0000000000001869                 mov     rdi, rax        ; s1
.text:000000000000186C                 call    _strncmp
.text:0000000000001871                 test    eax, eax
.text:0000000000001873                 jnz     loc_1980
.text:0000000000001879
.text:0000000000001879 loc_1879:                               ; CODE XREF: usage+1CB↑j
.text:0000000000001879                                         ; usage+315↓j
.text:0000000000001879                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001880                 xor     edi, edi        ; domainname
.text:0000000000001882                 mov     edx, 5          ; category
.text:0000000000001887                 call    _dcgettext
.text:000000000000188C                 lea     rcx, aHostid    ; "hostid"
.text:0000000000001893                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:000000000000189A                 mov     rsi, rax
.text:000000000000189D                 mov     edi, 1
.text:00000000000018A2                 xor     eax, eax
.text:00000000000018A4                 call    ___printf_chk
.text:00000000000018A9                 cmp     r12, rbx
.text:00000000000018AC                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:00000000000018B3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000018BA                 cmovz   rbx, rcx
.text:00000000000018BE
.text:00000000000018BE loc_18BE:                               ; CODE XREF: usage+2E4↓j
.text:00000000000018BE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000018C5                 xor     edi, edi        ; domainname
.text:00000000000018C7                 mov     edx, 5          ; category
.text:00000000000018CC                 call    _dcgettext
.text:00000000000018D1                 mov     rcx, rbx
.text:00000000000018D4                 mov     rsi, rax
.text:00000000000018D7                 mov     rdx, r12
.text:00000000000018DA                 mov     edi, 1
.text:00000000000018DF                 xor     eax, eax
.text:00000000000018E1                 call    ___printf_chk
.text:00000000000018E6                 jmp     loc_16E6
.text:00000000000018EB ; ---------------------------------------------------------------------------
.text:00000000000018EB
.text:00000000000018EB loc_18EB:                               ; CODE XREF: usage+194↑j
.text:00000000000018EB                 call    _dcgettext
.text:00000000000018F0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000018F7                 lea     rdx, unk_46E1
.text:00000000000018FE                 mov     rsi, rax
.text:0000000000001901                 mov     edi, 1
.text:0000000000001906                 xor     eax, eax
.text:0000000000001908                 call    ___printf_chk
.text:000000000000190D                 xor     esi, esi        ; locale
.text:000000000000190F                 mov     edi, 5          ; category
.text:0000000000001914                 call    _setlocale
.text:0000000000001919                 test    rax, rax
.text:000000000000191C                 jz      short loc_1936
.text:000000000000191E                 lea     rsi, s2         ; "en_"
.text:0000000000001925                 mov     edx, 3          ; n
.text:000000000000192A                 mov     rdi, rax        ; s1
.text:000000000000192D                 call    _strncmp
.text:0000000000001932                 test    eax, eax
.text:0000000000001934                 jnz     short loc_1979
.text:0000000000001936
.text:0000000000001936 loc_1936:                               ; CODE XREF: usage+28C↑j
.text:0000000000001936                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000193D                 mov     edx, 5          ; category
.text:0000000000001942                 xor     edi, edi        ; domainname
.text:0000000000001944                 lea     r12, aHostid    ; "hostid"
.text:000000000000194B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001952                 call    _dcgettext
.text:0000000000001957                 lea     rcx, aHostid    ; "hostid"
.text:000000000000195E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001965                 mov     rsi, rax
.text:0000000000001968                 mov     edi, 1
.text:000000000000196D                 xor     eax, eax
.text:000000000000196F                 call    ___printf_chk
.text:0000000000001974                 jmp     loc_18BE
.text:0000000000001979 ; ---------------------------------------------------------------------------
.text:0000000000001979
.text:0000000000001979 loc_1979:                               ; CODE XREF: usage+2A4↑j
.text:0000000000001979                 lea     r12, aHostid    ; "hostid"
.text:0000000000001980
.text:0000000000001980 loc_1980:                               ; CODE XREF: usage+1E3↑j
.text:0000000000001980                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001987                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:000000000000198E                 xor     edi, edi        ; domainname
.text:0000000000001990                 mov     edx, 5          ; category
.text:0000000000001995                 call    _dcgettext
.text:000000000000199A                 mov     rsi, r13        ; stream
.text:000000000000199D                 mov     rdi, rax        ; s
.text:00000000000019A0                 call    _fputs_unlocked
.text:00000000000019A5                 jmp     loc_1879
.text:00000000000019A5 ; } // starts at 1690
.text:00000000000019A5 usage           endp
.text:00000000000019A5
.text:00000000000019A5 ; ---------------------------------------------------------------------------
.text:00000000000019AA                 align 10h
.text:00000000000019B0
.text:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019B0
.text:00000000000019B0
.text:00000000000019B0                 public close_stdout_set_file_name
.text:00000000000019B0 close_stdout_set_file_name proc near
.text:00000000000019B0 ; __unwind {
.text:00000000000019B0                 mov     cs:file_name, rdi
.text:00000000000019B7                 retn
.text:00000000000019B7 ; } // starts at 19B0
.text:00000000000019B7 close_stdout_set_file_name endp
.text:00000000000019B7
.text:00000000000019B7 ; ---------------------------------------------------------------------------
.text:00000000000019B8                 align 20h
.text:00000000000019C0
.text:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019C0
.text:00000000000019C0
.text:00000000000019C0                 public close_stdout_set_ignore_EPIPE
.text:00000000000019C0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000019C0 ; __unwind {
.text:00000000000019C0                 mov     cs:ignore_EPIPE, dil
.text:00000000000019C7                 retn
.text:00000000000019C7 ; } // starts at 19C0
.text:00000000000019C7 close_stdout_set_ignore_EPIPE endp
.text:00000000000019C7
.text:00000000000019C7 ; ---------------------------------------------------------------------------
.text:00000000000019C8                 align 10h
.text:00000000000019D0
.text:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019D0
.text:00000000000019D0 ; Attributes: info_from_lumina
.text:00000000000019D0
.text:00000000000019D0 ; void __cdecl close_stdout()
.text:00000000000019D0                 public close_stdout
.text:00000000000019D0 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:00000000000019D0 ; __unwind {
.text:00000000000019D0                 push    rbp
.text:00000000000019D1                 push    rbx
.text:00000000000019D2                 sub     rsp, 8
.text:00000000000019D6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000019DD                 call    close_stream
.text:00000000000019E2                 test    eax, eax
.text:00000000000019E4                 jz      short loc_19FC
.text:00000000000019E6                 call    ___errno_location
.text:00000000000019EB                 cmp     cs:ignore_EPIPE, 0
.text:00000000000019F2                 mov     rbx, rax
.text:00000000000019F5                 jz      short loc_1A13
.text:00000000000019F7                 cmp     dword ptr [rax], 20h ; ' '
.text:00000000000019FA                 jnz     short loc_1A13
.text:00000000000019FC
.text:00000000000019FC loc_19FC:                               ; CODE XREF: close_stdout+14↑j
.text:00000000000019FC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001A03                 call    close_stream
.text:0000000000001A08                 test    eax, eax
.text:0000000000001A0A                 jnz     short loc_1A52
.text:0000000000001A0C                 add     rsp, 8
.text:0000000000001A10                 pop     rbx
.text:0000000000001A11                 pop     rbp
.text:0000000000001A12                 retn
.text:0000000000001A13 ; ---------------------------------------------------------------------------
.text:0000000000001A13
.text:0000000000001A13 loc_1A13:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001A13                                         ; close_stdout+2A↑j
.text:0000000000001A13                 lea     rsi, aWriteError ; "write error"
.text:0000000000001A1A                 xor     edi, edi        ; domainname
.text:0000000000001A1C                 mov     edx, 5          ; category
.text:0000000000001A21                 call    _dcgettext
.text:0000000000001A26                 mov     rdi, cs:file_name
.text:0000000000001A2D                 mov     rbp, rax
.text:0000000000001A30                 test    rdi, rdi
.text:0000000000001A33                 jz      short loc_1A5D
.text:0000000000001A35                 call    quotearg_colon
.text:0000000000001A3A                 mov     esi, [rbx]      ; errnum
.text:0000000000001A3C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001A43                 mov     rcx, rax
.text:0000000000001A46                 mov     r8, rbp
.text:0000000000001A49                 xor     edi, edi        ; status
.text:0000000000001A4B                 xor     eax, eax
.text:0000000000001A4D                 call    _error
.text:0000000000001A52
.text:0000000000001A52 loc_1A52:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001A52                                         ; close_stdout+A2↓j
.text:0000000000001A52                 mov     edi, cs:exit_failure ; status
.text:0000000000001A58                 call    __exit
.text:0000000000001A5D ; ---------------------------------------------------------------------------
.text:0000000000001A5D
.text:0000000000001A5D loc_1A5D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001A5D                 mov     esi, [rbx]      ; errnum
.text:0000000000001A5F                 lea     rdx, format+4   ; format
.text:0000000000001A66                 mov     rcx, rax
.text:0000000000001A69                 xor     edi, edi        ; status
.text:0000000000001A6B                 xor     eax, eax
.text:0000000000001A6D                 call    _error
.text:0000000000001A72                 jmp     short loc_1A52
.text:0000000000001A72 ; } // starts at 19D0
.text:0000000000001A72 close_stdout    endp
.text:0000000000001A72
.text:0000000000001A72 ; ---------------------------------------------------------------------------
.text:0000000000001A74                 align 20h
.text:0000000000001A80
.text:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A80
.text:0000000000001A80
.text:0000000000001A80                 public parse_long_options
.text:0000000000001A80 parse_long_options proc near
.text:0000000000001A80
.text:0000000000001A80 var_100         = qword ptr -100h
.text:0000000000001A80 var_F8          = dword ptr -0F8h
.text:0000000000001A80 var_F4          = dword ptr -0F4h
.text:0000000000001A80 var_F0          = qword ptr -0F0h
.text:0000000000001A80 var_E8          = qword ptr -0E8h
.text:0000000000001A80 var_E0          = qword ptr -0E0h
.text:0000000000001A80 var_D8          = byte ptr -0D8h
.text:0000000000001A80 var_A8          = xmmword ptr -0A8h
.text:0000000000001A80 var_98          = xmmword ptr -98h
.text:0000000000001A80 var_88          = xmmword ptr -88h
.text:0000000000001A80 var_78          = xmmword ptr -78h
.text:0000000000001A80 var_68          = xmmword ptr -68h
.text:0000000000001A80 var_58          = xmmword ptr -58h
.text:0000000000001A80 var_48          = xmmword ptr -48h
.text:0000000000001A80 var_38          = xmmword ptr -38h
.text:0000000000001A80 arg_0           = byte ptr  8
.text:0000000000001A80
.text:0000000000001A80 ; __unwind {
.text:0000000000001A80                 push    r13
.text:0000000000001A82                 push    r12
.text:0000000000001A84                 mov     r13, r8
.text:0000000000001A87                 push    rbp
.text:0000000000001A88                 push    rbx
.text:0000000000001A89                 mov     rbp, rdx
.text:0000000000001A8C                 mov     r12, rcx
.text:0000000000001A8F                 sub     rsp, 0E8h
.text:0000000000001A96                 test    al, al
.text:0000000000001A98                 jz      short loc_1AD4
.text:0000000000001A9A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000001A9F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000001AA4                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000001AAC                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000001AB4                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000001ABC                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000001AC4                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000001ACC                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000001AD4
.text:0000000000001AD4 loc_1AD4:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000001AD4                 mov     rax, fs:28h
.text:0000000000001ADD                 mov     [rsp+108h+var_E0], rax
.text:0000000000001AE2                 xor     eax, eax
.text:0000000000001AE4                 cmp     edi, 2
.text:0000000000001AE7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001AED                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000001AF7                 jz      short loc_1B30
.text:0000000000001AF9
.text:0000000000001AF9 loc_1AF9:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000001AF9                                         ; parse_long_options+DD↓j ...
.text:0000000000001AF9                 mov     rax, [rsp+108h+var_E0]
.text:0000000000001AFE                 xor     rax, fs:28h
.text:0000000000001B07                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001B0D                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001B17                 jnz     loc_1BBA
.text:0000000000001B1D                 add     rsp, 0E8h
.text:0000000000001B24                 pop     rbx
.text:0000000000001B25                 pop     rbp
.text:0000000000001B26                 pop     r12
.text:0000000000001B28                 pop     r13
.text:0000000000001B2A                 retn
.text:0000000000001B2A ; ---------------------------------------------------------------------------
.text:0000000000001B2B                 align 10h
.text:0000000000001B30
.text:0000000000001B30 loc_1B30:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000001B30                 lea     rcx, long_options ; longopts
.text:0000000000001B37                 lea     rdx, shortopts  ; "+"
.text:0000000000001B3E                 xor     r8d, r8d        ; longind
.text:0000000000001B41                 mov     [rsp+108h+var_100], r9
.text:0000000000001B46                 call    _getopt_long
.text:0000000000001B4B                 cmp     eax, 0FFFFFFFFh
.text:0000000000001B4E                 jz      short loc_1AF9
.text:0000000000001B50                 cmp     eax, 68h ; 'h'
.text:0000000000001B53                 mov     r9, [rsp+108h+var_100]
.text:0000000000001B58                 jz      short loc_1BB0
.text:0000000000001B5A                 cmp     eax, 76h ; 'v'
.text:0000000000001B5D                 jnz     short loc_1AF9
.text:0000000000001B5F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000001B67                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B6E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000001B73                 mov     rcx, r13
.text:0000000000001B76                 mov     rdx, r12
.text:0000000000001B79                 mov     rsi, rbp
.text:0000000000001B7C                 mov     [rsp+108h+var_F0], rax
.text:0000000000001B81                 lea     rax, [rsp+108h+var_D8]
.text:0000000000001B86                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:0000000000001B8E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000001B96                 mov     [rsp+108h+var_E8], rax
.text:0000000000001B9B                 call    version_etc_va
.text:0000000000001BA0                 xor     edi, edi        ; status
.text:0000000000001BA2                 call    _exit
.text:0000000000001BA2 ; ---------------------------------------------------------------------------
.text:0000000000001BA7                 align 10h
.text:0000000000001BB0
.text:0000000000001BB0 loc_1BB0:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000001BB0                 xor     edi, edi
.text:0000000000001BB2                 call    r9
.text:0000000000001BB5                 jmp     loc_1AF9
.text:0000000000001BBA ; ---------------------------------------------------------------------------
.text:0000000000001BBA
.text:0000000000001BBA loc_1BBA:                               ; CODE XREF: parse_long_options+97↑j
.text:0000000000001BBA                 call    ___stack_chk_fail
.text:0000000000001BBA ; } // starts at 1A80
.text:0000000000001BBA parse_long_options endp
.text:0000000000001BBA
.text:0000000000001BBA ; ---------------------------------------------------------------------------
.text:0000000000001BBF                 align 20h
.text:0000000000001BC0
.text:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001BC0
.text:0000000000001BC0
.text:0000000000001BC0                 public parse_gnu_standard_options_only
.text:0000000000001BC0 parse_gnu_standard_options_only proc near
.text:0000000000001BC0                                         ; CODE XREF: main+87↑p
.text:0000000000001BC0
.text:0000000000001BC0 var_F8          = dword ptr -0F8h
.text:0000000000001BC0 var_F4          = dword ptr -0F4h
.text:0000000000001BC0 var_F0          = qword ptr -0F0h
.text:0000000000001BC0 var_E8          = qword ptr -0E8h
.text:0000000000001BC0 var_E0          = qword ptr -0E0h
.text:0000000000001BC0 var_D8          = byte ptr -0D8h
.text:0000000000001BC0 var_A8          = xmmword ptr -0A8h
.text:0000000000001BC0 var_98          = xmmword ptr -98h
.text:0000000000001BC0 var_88          = xmmword ptr -88h
.text:0000000000001BC0 var_78          = xmmword ptr -78h
.text:0000000000001BC0 var_68          = xmmword ptr -68h
.text:0000000000001BC0 var_58          = xmmword ptr -58h
.text:0000000000001BC0 var_48          = xmmword ptr -48h
.text:0000000000001BC0 var_38          = xmmword ptr -38h
.text:0000000000001BC0 arg_0           = qword ptr  8
.text:0000000000001BC0 arg_8           = byte ptr  10h
.text:0000000000001BC0
.text:0000000000001BC0 ; __unwind {
.text:0000000000001BC0                 push    r14
.text:0000000000001BC2                 push    r13
.text:0000000000001BC4                 mov     r14, r8
.text:0000000000001BC7                 push    r12
.text:0000000000001BC9                 push    rbp
.text:0000000000001BCA                 mov     r12, rdx
.text:0000000000001BCD                 push    rbx
.text:0000000000001BCE                 mov     r13, rcx
.text:0000000000001BD1                 sub     rsp, 0D0h
.text:0000000000001BD8                 test    al, al
.text:0000000000001BDA                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000001BE2                 jz      short loc_1C1B
.text:0000000000001BE4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000001BE9                 movaps  [rsp+0F8h+var_98], xmm1
.text:0000000000001BEE                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000001BF3                 movaps  [rsp+0F8h+var_78], xmm3
.text:0000000000001BFB                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000001C03                 movaps  [rsp+0F8h+var_58], xmm5
.text:0000000000001C0B                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000001C13                 movaps  [rsp+0F8h+var_38], xmm7
.text:0000000000001C1B
.text:0000000000001C1B loc_1C1B:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:0000000000001C1B                 mov     rax, fs:28h
.text:0000000000001C24                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000001C29                 xor     eax, eax
.text:0000000000001C2B                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001C32                 lea     rax, shortopts  ; "+"
.text:0000000000001C39                 test    r9b, r9b
.text:0000000000001C3C                 lea     rcx, long_options ; longopts
.text:0000000000001C43                 cmovz   rdx, rax        ; shortopts
.text:0000000000001C47                 xor     r8d, r8d        ; longind
.text:0000000000001C4A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001C50                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:0000000000001C5A                 call    _getopt_long
.text:0000000000001C5F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001C62                 jz      short loc_1CC8
.text:0000000000001C64                 cmp     eax, 68h ; 'h'
.text:0000000000001C67                 jz      loc_1CF0
.text:0000000000001C6D                 cmp     eax, 76h ; 'v'
.text:0000000000001C70                 jnz     short loc_1CC0
.text:0000000000001C72                 lea     rax, [rsp+0F8h+arg_8]
.text:0000000000001C7A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C81                 mov     r8, rsp
.text:0000000000001C84                 mov     rcx, r14
.text:0000000000001C87                 mov     rdx, r13
.text:0000000000001C8A                 mov     rsi, r12
.text:0000000000001C8D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000001C92                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000001C97                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:0000000000001C9E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000001CA6                 mov     [rsp+0F8h+var_E8], rax
.text:0000000000001CAB                 call    version_etc_va
.text:0000000000001CB0                 xor     edi, edi        ; status
.text:0000000000001CB2                 call    _exit
.text:0000000000001CB2 ; ---------------------------------------------------------------------------
.text:0000000000001CB7                 align 20h
.text:0000000000001CC0
.text:0000000000001CC0 loc_1CC0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000001CC0                 mov     edi, cs:exit_failure
.text:0000000000001CC6                 call    rbp
.text:0000000000001CC8
.text:0000000000001CC8 loc_1CC8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000001CC8                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000001CC8                 mov     rax, [rsp+0F8h+var_E0]
.text:0000000000001CCD                 xor     rax, fs:28h
.text:0000000000001CD6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001CDC                 jnz     short loc_1CF6
.text:0000000000001CDE                 add     rsp, 0D0h
.text:0000000000001CE5                 pop     rbx
.text:0000000000001CE6                 pop     rbp
.text:0000000000001CE7                 pop     r12
.text:0000000000001CE9                 pop     r13
.text:0000000000001CEB                 pop     r14
.text:0000000000001CED                 retn
.text:0000000000001CED ; ---------------------------------------------------------------------------
.text:0000000000001CEE                 align 10h
.text:0000000000001CF0
.text:0000000000001CF0 loc_1CF0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000001CF0                 xor     edi, edi
.text:0000000000001CF2                 call    rbp
.text:0000000000001CF4                 jmp     short loc_1CC8
.text:0000000000001CF6 ; ---------------------------------------------------------------------------
.text:0000000000001CF6
.text:0000000000001CF6 loc_1CF6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000001CF6                 call    ___stack_chk_fail
.text:0000000000001CF6 ; } // starts at 1BC0
.text:0000000000001CF6 parse_gnu_standard_options_only endp
.text:0000000000001CF6
.text:0000000000001CF6 ; ---------------------------------------------------------------------------
.text:0000000000001CFB                 align 20h
.text:0000000000001D00
.text:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D00
.text:0000000000001D00
.text:0000000000001D00                 public set_program_name
.text:0000000000001D00 set_program_name proc near              ; CODE XREF: main+E↑p
.text:0000000000001D00 ; __unwind {
.text:0000000000001D00                 test    rdi, rdi
.text:0000000000001D03                 push    rbx
.text:0000000000001D04                 jz      short loc_1D7D
.text:0000000000001D06                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001D0B                 mov     rbx, rdi
.text:0000000000001D0E                 call    _strrchr
.text:0000000000001D13                 test    rax, rax
.text:0000000000001D16                 jz      short loc_1D6D
.text:0000000000001D18                 lea     r8, [rax+1]
.text:0000000000001D1C                 mov     rdx, r8
.text:0000000000001D1F                 sub     rdx, rbx
.text:0000000000001D22                 cmp     rdx, 6
.text:0000000000001D26                 jle     short loc_1D6D
.text:0000000000001D28                 lea     rsi, [rax-6]
.text:0000000000001D2C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001D33                 mov     ecx, 7
.text:0000000000001D38                 repe cmpsb
.text:0000000000001D3A                 setnbe  dl
.text:0000000000001D3D                 sbb     dl, 0
.text:0000000000001D40                 test    dl, dl
.text:0000000000001D42                 jnz     short loc_1D6D
.text:0000000000001D44                 lea     rdi, aLt        ; "lt-"
.text:0000000000001D4B                 mov     ecx, 3
.text:0000000000001D50                 mov     rsi, r8
.text:0000000000001D53                 mov     rbx, r8
.text:0000000000001D56                 repe cmpsb
.text:0000000000001D58                 setnbe  dl
.text:0000000000001D5B                 sbb     dl, 0
.text:0000000000001D5E                 test    dl, dl
.text:0000000000001D60                 jnz     short loc_1D6D
.text:0000000000001D62                 lea     rbx, [rax+4]
.text:0000000000001D66                 mov     cs:__bss_start, rbx
.text:0000000000001D6D
.text:0000000000001D6D loc_1D6D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001D6D                                         ; set_program_name+26↑j ...
.text:0000000000001D6D                 mov     cs:program_name, rbx
.text:0000000000001D74                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001D7B                 pop     rbx
.text:0000000000001D7C                 retn
.text:0000000000001D7D ; ---------------------------------------------------------------------------
.text:0000000000001D7D
.text:0000000000001D7D loc_1D7D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001D7D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001D84                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001D8B                 mov     edx, 37h ; '7'  ; n
.text:0000000000001D90                 mov     esi, 1          ; size
.text:0000000000001D95                 call    _fwrite
.text:0000000000001D9A                 call    _abort
.text:0000000000001D9A ; } // starts at 1D00
.text:0000000000001D9A set_program_name endp
.text:0000000000001D9A
.text:0000000000001D9A ; ---------------------------------------------------------------------------
.text:0000000000001D9F                 align 20h
.text:0000000000001DA0
.text:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DA0
.text:0000000000001DA0 ; Attributes: info_from_lumina
.text:0000000000001DA0
.text:0000000000001DA0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001DA0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001DA0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001DA0 ; __unwind {
.text:0000000000001DA0                 push    rbp
.text:0000000000001DA1                 push    rbx
.text:0000000000001DA2                 mov     rbp, rdi
.text:0000000000001DA5                 mov     ebx, esi
.text:0000000000001DA7                 sub     rsp, 8
.text:0000000000001DAB                 call    locale_charset
.text:0000000000001DB0                 movzx   edx, byte ptr [rax]
.text:0000000000001DB3                 and     edx, 0FFFFFFDFh
.text:0000000000001DB6                 cmp     dl, 55h ; 'U'
.text:0000000000001DB9                 jz      short loc_1E30
.text:0000000000001DBB                 cmp     dl, 47h ; 'G'
.text:0000000000001DBE                 jz      short loc_1DE0
.text:0000000000001DC0
.text:0000000000001DC0 loc_1DC0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001DC0                                         ; gettext_quote+50↓j ...
.text:0000000000001DC0                 lea     rax, unk_4963
.text:0000000000001DC7                 lea     rdx, asc_4965   ; "'"
.text:0000000000001DCE                 cmp     ebx, 9
.text:0000000000001DD1                 cmovnz  rax, rdx
.text:0000000000001DD5                 add     rsp, 8
.text:0000000000001DD9                 pop     rbx
.text:0000000000001DDA                 pop     rbp
.text:0000000000001DDB                 retn
.text:0000000000001DDB ; ---------------------------------------------------------------------------
.text:0000000000001DDC                 align 20h
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001DE0                 movzx   edx, byte ptr [rax+1]
.text:0000000000001DE4                 and     edx, 0FFFFFFDFh
.text:0000000000001DE7                 cmp     dl, 42h ; 'B'
.text:0000000000001DEA                 jnz     short loc_1DC0
.text:0000000000001DEC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001DF0                 jnz     short loc_1DC0
.text:0000000000001DF2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001DF6                 jnz     short loc_1DC0
.text:0000000000001DF8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001DFC                 jnz     short loc_1DC0
.text:0000000000001DFE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001E02                 jnz     short loc_1DC0
.text:0000000000001E04                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001E08                 jnz     short loc_1DC0
.text:0000000000001E0A                 cmp     byte ptr [rax+7], 0
.text:0000000000001E0E                 jnz     short loc_1DC0
.text:0000000000001E10                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001E14                 lea     rax, unk_495C
.text:0000000000001E1B                 lea     rdx, unk_4960
.text:0000000000001E22                 cmovnz  rax, rdx
.text:0000000000001E26                 add     rsp, 8
.text:0000000000001E2A                 pop     rbx
.text:0000000000001E2B                 pop     rbp
.text:0000000000001E2C                 retn
.text:0000000000001E2C ; ---------------------------------------------------------------------------
.text:0000000000001E2D                 align 10h
.text:0000000000001E30
.text:0000000000001E30 loc_1E30:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001E30                 movzx   edx, byte ptr [rax+1]
.text:0000000000001E34                 and     edx, 0FFFFFFDFh
.text:0000000000001E37                 cmp     dl, 54h ; 'T'
.text:0000000000001E3A                 jnz     short loc_1DC0
.text:0000000000001E3C                 movzx   edx, byte ptr [rax+2]
.text:0000000000001E40                 and     edx, 0FFFFFFDFh
.text:0000000000001E43                 cmp     dl, 46h ; 'F'
.text:0000000000001E46                 jnz     loc_1DC0
.text:0000000000001E4C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001E50                 jnz     loc_1DC0
.text:0000000000001E56                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001E5A                 jnz     loc_1DC0
.text:0000000000001E60                 cmp     byte ptr [rax+5], 0
.text:0000000000001E64                 jnz     loc_1DC0
.text:0000000000001E6A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001E6E                 lea     rax, unk_4954
.text:0000000000001E75                 lea     rdx, unk_4958
.text:0000000000001E7C                 cmovnz  rax, rdx
.text:0000000000001E80                 add     rsp, 8
.text:0000000000001E84                 pop     rbx
.text:0000000000001E85                 pop     rbp
.text:0000000000001E86                 retn
.text:0000000000001E86 ; } // starts at 1DA0
.text:0000000000001E86 gettext_quote   endp
.text:0000000000001E86
.text:0000000000001E86 ; ---------------------------------------------------------------------------
.text:0000000000001E87                 align 10h
.text:0000000000001E90
.text:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E90
.text:0000000000001E90 ; Attributes: info_from_lumina
.text:0000000000001E90
.text:0000000000001E90 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001E90 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001E90                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001E90
.text:0000000000001E90 var_E0          = dword ptr -0E0h
.text:0000000000001E90 var_DB          = byte ptr -0DBh
.text:0000000000001E90 var_DA          = byte ptr -0DAh
.text:0000000000001E90 var_D9          = byte ptr -0D9h
.text:0000000000001E90 s               = qword ptr -0D8h
.text:0000000000001E90 n               = qword ptr -0D0h
.text:0000000000001E90 var_C8          = qword ptr -0C8h
.text:0000000000001E90 ps              = qword ptr -0C0h
.text:0000000000001E90 var_B8          = qword ptr -0B8h
.text:0000000000001E90 var_B0          = qword ptr -0B0h
.text:0000000000001E90 var_A8          = qword ptr -0A8h
.text:0000000000001E90 s2              = qword ptr -0A0h
.text:0000000000001E90 var_98          = qword ptr -98h
.text:0000000000001E90 var_90          = qword ptr -90h
.text:0000000000001E90 var_88          = qword ptr -88h
.text:0000000000001E90 var_80          = qword ptr -80h
.text:0000000000001E90 var_78          = qword ptr -78h
.text:0000000000001E90 var_70          = dword ptr -70h
.text:0000000000001E90 var_6C          = byte ptr -6Ch
.text:0000000000001E90 var_6B          = byte ptr -6Bh
.text:0000000000001E90 var_6A          = byte ptr -6Ah
.text:0000000000001E90 var_69          = byte ptr -69h
.text:0000000000001E90 var_68          = qword ptr -68h
.text:0000000000001E90 var_60          = qword ptr -60h
.text:0000000000001E90 wc              = dword ptr -4Ch
.text:0000000000001E90 var_48          = qword ptr -48h
.text:0000000000001E90 var_40          = qword ptr -40h
.text:0000000000001E90 arg_0           = qword ptr  8
.text:0000000000001E90 arg_8           = qword ptr  10h
.text:0000000000001E90 arg_10          = qword ptr  18h
.text:0000000000001E90
.text:0000000000001E90 ; __unwind {
.text:0000000000001E90                 push    r15
.text:0000000000001E92                 push    r14
.text:0000000000001E94                 mov     r15d, r8d
.text:0000000000001E97                 push    r13
.text:0000000000001E99                 push    r12
.text:0000000000001E9B                 mov     r14, rdi
.text:0000000000001E9E                 push    rbp
.text:0000000000001E9F                 push    rbx
.text:0000000000001EA0                 mov     ebx, r9d
.text:0000000000001EA3                 mov     r13, rsi
.text:0000000000001EA6                 mov     rbp, rcx
.text:0000000000001EA9                 and     ebx, 2
.text:0000000000001EAC                 sub     rsp, 0B8h
.text:0000000000001EB3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001EBB                 mov     [rsp+0E8h+s], rdx
.text:0000000000001EC0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001EC5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001ECA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001ECF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001ED7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001EDC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001EE4                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001EE9                 mov     rax, fs:28h
.text:0000000000001EF2                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001EFA                 xor     eax, eax
.text:0000000000001EFC                 call    ___ctype_get_mb_cur_max
.text:0000000000001F01                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001F05                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001F0A                 ja      def_1F21        ; jumptable 00000000000121F1 default case
.text:0000000000001F10                 lea     rcx, jpt_1F21
.text:0000000000001F17                 mov     edx, r15d
.text:0000000000001F1A                 movsxd  rax, ds:(jpt_1F21 - 49C0h)[rcx+rdx*4]
.text:0000000000001F1E                 add     rax, rcx
.text:0000000000001F21                 jmp     rax             ; switch jump
.text:0000000000001F23 ; ---------------------------------------------------------------------------
.text:0000000000001F23
.text:0000000000001F23 loc_1F23:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000001F23                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000001F23                                         ; DATA XREF: ...
.text:0000000000001F23                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000001F28                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000001F2D                 xor     r12d, r12d
.text:0000000000001F30                 mov     [rsp+0E8h+var_98], 0
.text:0000000000001F39                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000001F3E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000001F43
.text:0000000000001F43 loc_1F43:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000001F43                 lea     rax, asc_4965   ; "'"
.text:0000000000001F4A                 mov     [rsp+0E8h+n], 1
.text:0000000000001F53                 xor     r15d, r15d
.text:0000000000001F56                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001F5E                 mov     [rsp+0E8h+s2], rax
.text:0000000000001F63
.text:0000000000001F63 loc_1F63:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000001F63                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000001F63                 xor     r11d, r11d
.text:0000000000001F66                 mov     rax, rbp
.text:0000000000001F69                 mov     r8d, r12d
.text:0000000000001F6C                 mov     rbp, r11
.text:0000000000001F6F                 mov     r11, rax
.text:0000000000001F72                 nop     word ptr [rax+rax+00h]
.text:0000000000001F78
.text:0000000000001F78 loc_1F78:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000001F78                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000001F78                 cmp     r11, rbp
.text:0000000000001F7B                 setnz   r12b
.text:0000000000001F7F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001F83                 jnz     short loc_1F92
.text:0000000000001F85                 mov     rax, [rsp+0E8h+s]
.text:0000000000001F8A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000001F8E                 setnz   r12b
.text:0000000000001F92
.text:0000000000001F92 loc_1F92:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000001F92                 test    r12b, r12b
.text:0000000000001F95                 jz      loc_25F0
.text:0000000000001F9B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001FA0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000001FA5                 lea     r9, [rdi+rbp]
.text:0000000000001FA9                 setnz   al
.text:0000000000001FAC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000001FB0                 mov     r10d, eax
.text:0000000000001FB3                 jz      loc_2060
.text:0000000000001FB9                 mov     rax, [rsp+0E8h+n]
.text:0000000000001FBE                 test    rax, rax
.text:0000000000001FC1                 jz      loc_23F0
.text:0000000000001FC7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001FCB                 lea     rbx, [rbp+rax+0]
.text:0000000000001FD0                 jnz     short loc_2000
.text:0000000000001FD2                 cmp     rax, 1
.text:0000000000001FD6                 jbe     short loc_2000
.text:0000000000001FD8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001FDD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000001FE2                 mov     [rsp+0E8h+ps], r9
.text:0000000000001FE7                 call    _strlen
.text:0000000000001FEC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000001FF2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000001FF8                 mov     r11, rax
.text:0000000000001FFB                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002000
.text:0000000000002000 loc_2000:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002000                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002000                 cmp     rbx, r11
.text:0000000000002003                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002008                 ja      loc_25C0
.text:000000000000200E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002013                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002018                 mov     rdi, r9         ; s1
.text:000000000000201B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002020                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002025                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000202A                 call    _memcmp
.text:000000000000202F                 test    eax, eax
.text:0000000000002031                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002036                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000203C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002041                 jnz     loc_25C0
.text:0000000000002047                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000204C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002052                 jnz     loc_2FD5
.text:0000000000002058                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002060                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002060                 movzx   ebx, byte ptr [r9]
.text:0000000000002064                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002067                 ja      def_207E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000206D                 lea     rcx, jpt_207E
.text:0000000000002074                 movzx   edx, bl
.text:0000000000002077                 movsxd  rax, ds:(jpt_207E - 49ECh)[rcx+rdx*4]
.text:000000000000207B                 add     rax, rcx
.text:000000000000207E                 jmp     rax             ; switch jump
.text:0000000000002080 ; ---------------------------------------------------------------------------
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002080                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002080                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002083
.text:0000000000002083 loc_2083:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002083                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002083                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002087                 setnz   al
.text:000000000000208A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000208E                 jnz     short loc_209C
.text:0000000000002090                 mov     rax, [rsp+0E8h+s]
.text:0000000000002095                 cmp     byte ptr [rax+1], 0
.text:0000000000002099                 setnz   al
.text:000000000000209C
.text:000000000000209C loc_209C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000209C                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000020A1                 setz    dl
.text:00000000000020A4                 test    al, al
.text:00000000000020A6                 jz      loc_22F8
.text:00000000000020AC
.text:00000000000020AC loc_20AC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000020AC                 xor     r12d, r12d
.text:00000000000020AF                 xor     eax, eax
.text:00000000000020B1                 nop     dword ptr [rax+00000000h]
.text:00000000000020B8
.text:00000000000020B8 loc_20B8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000020B8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000020B8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000020BD                 jnz     loc_21D2
.text:00000000000020C3                 test    dl, dl
.text:00000000000020C5                 jnz     loc_21D2
.text:00000000000020CB
.text:00000000000020CB loc_20CB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000020CB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000020D0                 test    rsi, rsi
.text:00000000000020D3                 jz      short loc_20E9
.text:00000000000020D5                 mov     edx, ebx
.text:00000000000020D7                 shr     dl, 5
.text:00000000000020DA                 movzx   edx, dl
.text:00000000000020DD                 mov     edx, [rsi+rdx*4]
.text:00000000000020E0                 bt      edx, ebx
.text:00000000000020E3                 jb      loc_2233
.text:00000000000020E9
.text:00000000000020E9 loc_20E9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000020E9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000020E9                 test    r10b, r10b
.text:00000000000020EC                 jnz     loc_2233
.text:00000000000020F2                 xor     eax, 1
.text:00000000000020F5                 add     rbp, 1
.text:00000000000020F9                 and     eax, r8d
.text:00000000000020FC
.text:00000000000020FC loc_20FC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000020FC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000020FC                 test    al, al
.text:00000000000020FE                 jz      short loc_2120
.text:0000000000002100                 cmp     r13, r15
.text:0000000000002103                 jbe     short loc_210A
.text:0000000000002105                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000210A
.text:000000000000210A loc_210A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000210A                 lea     rax, [r15+1]
.text:000000000000210E                 cmp     r13, rax
.text:0000000000002111                 jbe     short loc_2119
.text:0000000000002113                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002119
.text:0000000000002119 loc_2119:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002119                 add     r15, 2
.text:000000000000211D                 xor     r8d, r8d
.text:0000000000002120
.text:0000000000002120 loc_2120:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002120                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002120                 cmp     r15, r13
.text:0000000000002123                 jnb     short loc_2129
.text:0000000000002125                 mov     [r14+r15], bl
.text:0000000000002129
.text:0000000000002129 loc_2129:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002129                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000212E                 add     r15, 1
.text:0000000000002132                 mov     eax, 0
.text:0000000000002137                 test    r12b, r12b
.text:000000000000213A                 cmovz   edi, eax
.text:000000000000213D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002142                 jmp     loc_1F78
.text:0000000000002142 ; ---------------------------------------------------------------------------
.text:0000000000002147                 align 10h
.text:0000000000002150
.text:0000000000002150 loc_2150:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002150                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002150                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002153
.text:0000000000002153 loc_2153:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002153                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002153                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002157                 cmp     eax, 2
.text:000000000000215A                 jz      loc_2718
.text:0000000000002160                 cmp     eax, 5
.text:0000000000002163                 jz      loc_26D8
.text:0000000000002169                 cmp     eax, 2
.text:000000000000216C                 mov     ebx, 3Fh ; '?'
.text:0000000000002171                 setz    dl
.text:0000000000002174                 xor     r12d, r12d
.text:0000000000002177                 xor     eax, eax
.text:0000000000002179                 jmp     loc_20B8
.text:0000000000002179 ; ---------------------------------------------------------------------------
.text:000000000000217E                 align 20h
.text:0000000000002180
.text:0000000000002180 loc_2180:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002180                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002180                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002183
.text:0000000000002183 loc_2183:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002183                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002183                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002188                 jz      loc_2690
.text:000000000000218E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002193                 xor     edx, edx
.text:0000000000002195                 xor     eax, eax
.text:0000000000002197                 mov     ebx, 27h ; '''
.text:000000000000219C                 jmp     loc_20B8
.text:000000000000219C ; ---------------------------------------------------------------------------
.text:00000000000021A1                 align 8
.text:00000000000021A8
.text:00000000000021A8 loc_21A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021A8                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:00000000000021A8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000021AD                 mov     ebx, 74h ; 't'
.text:00000000000021B2
.text:00000000000021B2 loc_21B2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000021B2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000021B2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000021B7                 setz    al
.text:00000000000021BA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000021BE                 jnz     loc_230E
.text:00000000000021C4
.text:00000000000021C4 loc_21C4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000021C4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000021C4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000021C9                 jnz     short loc_2230
.text:00000000000021CB
.text:00000000000021CB loc_21CB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000021CB                 mov     ebx, edx
.text:00000000000021CD                 xor     r12d, r12d
.text:00000000000021D0                 xor     eax, eax
.text:00000000000021D2
.text:00000000000021D2 loc_21D2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000021D2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000021D2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000021D7                 jnz     loc_20CB
.text:00000000000021DD                 jmp     loc_20E9
.text:00000000000021DD ; ---------------------------------------------------------------------------
.text:00000000000021E2                 align 8
.text:00000000000021E8
.text:00000000000021E8 loc_21E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021E8                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:00000000000021E8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000021ED                 mov     ebx, 62h ; 'b'
.text:00000000000021F2                 jmp     short loc_21C4
.text:00000000000021F2 ; ---------------------------------------------------------------------------
.text:00000000000021F4                 align 8
.text:00000000000021F8
.text:00000000000021F8 loc_21F8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021F8                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:00000000000021F8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000021FD                 jz      loc_25D0
.text:0000000000002203                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002208                 jz      loc_2420
.text:000000000000220E
.text:000000000000220E loc_220E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000220E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002213                 jz      loc_2420
.text:0000000000002219                 cmp     [rsp+0E8h+n], 0
.text:000000000000221F                 jnz     loc_25DB
.text:0000000000002225                 mov     ebx, 5Ch ; '\'
.text:000000000000222A                 nop     word ptr [rax+rax+00h]
.text:0000000000002230
.text:0000000000002230 loc_2230:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002230                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002230                 xor     r12d, r12d
.text:0000000000002233
.text:0000000000002233 loc_2233:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002233                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002233                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002238                 setz    dl
.text:000000000000223B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002240                 mov     eax, edx
.text:0000000000002242                 jnz     loc_2A98
.text:0000000000002248                 mov     eax, r8d
.text:000000000000224B                 xor     eax, 1
.text:000000000000224E                 and     al, dl
.text:0000000000002250                 jz      short loc_2281
.text:0000000000002252                 cmp     r13, r15
.text:0000000000002255                 jbe     short loc_225C
.text:0000000000002257                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000225C
.text:000000000000225C loc_225C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000225C                 lea     rdx, [r15+1]
.text:0000000000002260                 cmp     r13, rdx
.text:0000000000002263                 jbe     short loc_226B
.text:0000000000002265                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000226B
.text:000000000000226B loc_226B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000226B                 lea     rdx, [r15+2]
.text:000000000000226F                 cmp     r13, rdx
.text:0000000000002272                 jbe     short loc_227A
.text:0000000000002274                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000227A
.text:000000000000227A loc_227A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000227A                 add     r15, 3
.text:000000000000227E                 mov     r8d, eax
.text:0000000000002281
.text:0000000000002281 loc_2281:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002281                 cmp     r13, r15
.text:0000000000002284                 jbe     short loc_228B
.text:0000000000002286                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000228B
.text:000000000000228B loc_228B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000228B                 add     r15, 1
.text:000000000000228F                 add     rbp, 1
.text:0000000000002293                 jmp     loc_2120
.text:0000000000002293 ; ---------------------------------------------------------------------------
.text:0000000000002298                 align 20h
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022A0                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:00000000000022A0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000022A5                 jnz     loc_2473
.text:00000000000022AB                 xor     edx, edx
.text:00000000000022AD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000022B2                 jz      loc_21CB
.text:00000000000022B8                 add     rbp, 1
.text:00000000000022BC                 jmp     loc_1F78
.text:00000000000022BC ; ---------------------------------------------------------------------------
.text:00000000000022C1                 align 8
.text:00000000000022C8
.text:00000000000022C8 loc_22C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022C8                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:00000000000022C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000022CD                 setz    dl
.text:00000000000022D0                 xor     eax, eax
.text:00000000000022D2                 jmp     loc_20B8
.text:00000000000022D2 ; ---------------------------------------------------------------------------
.text:00000000000022D7                 align 20h
.text:00000000000022E0
.text:00000000000022E0 loc_22E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022E0                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:00000000000022E0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000022E5                 mov     ebx, 61h ; 'a'
.text:00000000000022EA                 jmp     loc_21C4
.text:00000000000022EA ; ---------------------------------------------------------------------------
.text:00000000000022EF                 align 10h
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022F0                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:00000000000022F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000022F5                 setz    dl
.text:00000000000022F8
.text:00000000000022F8 loc_22F8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000022F8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000022F8                 test    rbp, rbp
.text:00000000000022FB                 jnz     loc_20AC
.text:0000000000002301
.text:0000000000002301 loc_2301:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002301                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002301                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002306                 and     al, dl
.text:0000000000002308                 jz      loc_20B8
.text:000000000000230E
.text:000000000000230E loc_230E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000230E                 mov     rbp, r11
.text:0000000000002311                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002319                 jmp     loc_2A19
.text:0000000000002319 ; ---------------------------------------------------------------------------
.text:000000000000231E                 align 20h
.text:0000000000002320
.text:0000000000002320 loc_2320:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002320                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002320                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002325                 setz    dl
.text:0000000000002328                 xor     r12d, r12d
.text:000000000000232B                 jmp     short loc_2301
.text:000000000000232B ; ---------------------------------------------------------------------------
.text:000000000000232D                 align 10h
.text:0000000000002330
.text:0000000000002330 loc_2330:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002330                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002330                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002335                 mov     ebx, 20h ; ' '
.text:000000000000233A                 setz    dl
.text:000000000000233D                 jmp     short loc_2301
.text:000000000000233D ; ---------------------------------------------------------------------------
.text:000000000000233F                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002340                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002340                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002345                 mov     ebx, 72h ; 'r'
.text:000000000000234A                 jmp     loc_21B2
.text:000000000000234A ; ---------------------------------------------------------------------------
.text:000000000000234F                 align 10h
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002350                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002350                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002355                 mov     ebx, 66h ; 'f'
.text:000000000000235A                 jmp     loc_21C4
.text:000000000000235A ; ---------------------------------------------------------------------------
.text:000000000000235F                 align 20h
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002360                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002360                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002365                 mov     ebx, 76h ; 'v'
.text:000000000000236A                 jmp     loc_21C4
.text:000000000000236A ; ---------------------------------------------------------------------------
.text:000000000000236F                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002370                                         ; DATA XREF: .rodata:jpt_207E↓o
.text:0000000000002370                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002375                 mov     ebx, 6Eh ; 'n'
.text:000000000000237A                 jmp     loc_21B2
.text:000000000000237A ; ---------------------------------------------------------------------------
.text:000000000000237F                 align 20h
.text:0000000000002380
.text:0000000000002380 def_240A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002380                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002380                                         ; DATA XREF: ...
.text:0000000000002380                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002383                 nop     dword ptr [rax+rax+00h]
.text:0000000000002388
.text:0000000000002388 def_207E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002388                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002388                                         ; DATA XREF: ...
.text:0000000000002388                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000238E                 jnz     loc_2738
.text:0000000000002394                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002399                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000239E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000023A3                 call    ___ctype_b_loc
.text:00000000000023A8                 mov     rcx, [rax]
.text:00000000000023AB                 movzx   edx, bl
.text:00000000000023AE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000023B4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000023BA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000023BF                 mov     edi, 1
.text:00000000000023C4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000023C8                 and     ax, 4000h
.text:00000000000023CC                 setnz   r12b
.text:00000000000023D0                 setz    al
.text:00000000000023D3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000023D7
.text:00000000000023D7 loc_23D7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000023D7                 test    al, al
.text:00000000000023D9                 jnz     loc_2D71
.text:00000000000023DF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000023E4                 setz    dl
.text:00000000000023E7                 jmp     loc_20B8
.text:00000000000023E7 ; ---------------------------------------------------------------------------
.text:00000000000023EC                 align 10h
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000023F0                 movzx   ebx, byte ptr [r9]
.text:00000000000023F4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000023F7                 ja      short def_240A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000023F9                 lea     rcx, jpt_240A
.text:0000000000002400                 movzx   edx, bl
.text:0000000000002403                 movsxd  rax, ds:(jpt_240A - 4BE8h)[rcx+rdx*4]
.text:0000000000002407                 add     rax, rcx
.text:000000000000240A                 jmp     rax             ; switch jump
.text:000000000000240A ; ---------------------------------------------------------------------------
.text:000000000000240C                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002410                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002410                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002413                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002418                 jnz     loc_220E
.text:000000000000241E                 xchg    ax, ax
.text:0000000000002420
.text:0000000000002420 loc_2420:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002420                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002420                 mov     edx, 5Ch ; '\'
.text:0000000000002425                 mov     ebx, 5Ch ; '\'
.text:000000000000242A                 jmp     loc_21C4
.text:000000000000242A ; ---------------------------------------------------------------------------
.text:000000000000242F                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002430                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002430                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002435                 xor     r10d, r10d
.text:0000000000002438                 mov     ebx, 66h ; 'f'
.text:000000000000243D                 jmp     loc_21C4
.text:000000000000243D ; ---------------------------------------------------------------------------
.text:0000000000002442                 align 8
.text:0000000000002448
.text:0000000000002448 loc_2448:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002448                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002448                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000244D                 xor     r10d, r10d
.text:0000000000002450                 mov     ebx, 6Eh ; 'n'
.text:0000000000002455                 jmp     loc_21B2
.text:0000000000002455 ; ---------------------------------------------------------------------------
.text:000000000000245A                 align 20h
.text:0000000000002460
.text:0000000000002460 loc_2460:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002460                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002460                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002465                 jmp     loc_2230
.text:0000000000002465 ; ---------------------------------------------------------------------------
.text:000000000000246A                 align 10h
.text:0000000000002470
.text:0000000000002470 loc_2470:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002470                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002470                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002473
.text:0000000000002473 loc_2473:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002473                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002478                 setz    dl
.text:000000000000247B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002480                 jnz     loc_301A
.text:0000000000002486                 mov     eax, r8d
.text:0000000000002489                 mov     rcx, r15
.text:000000000000248C                 xor     eax, 1
.text:000000000000248F                 and     al, dl
.text:0000000000002491                 jz      short loc_24C0
.text:0000000000002493                 cmp     r13, r15
.text:0000000000002496                 jbe     short loc_249D
.text:0000000000002498                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000249D
.text:000000000000249D loc_249D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000249D                 lea     rcx, [r15+1]
.text:00000000000024A1                 cmp     r13, rcx
.text:00000000000024A4                 jbe     short loc_24AC
.text:00000000000024A6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000024AC
.text:00000000000024AC loc_24AC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000024AC                 lea     rcx, [r15+2]
.text:00000000000024B0                 cmp     r13, rcx
.text:00000000000024B3                 ja      loc_2AE9
.text:00000000000024B9
.text:00000000000024B9 loc_24B9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000024B9                 lea     rcx, [r15+3]
.text:00000000000024BD                 mov     r8d, eax
.text:00000000000024C0
.text:00000000000024C0 loc_24C0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000024C0                 cmp     r13, rcx
.text:00000000000024C3                 jbe     short loc_24CA
.text:00000000000024C5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000024CA
.text:00000000000024CA loc_24CA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000024CA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024CF                 lea     r15, [rcx+1]
.text:00000000000024D3                 jz      loc_2AD9
.text:00000000000024D9                 lea     rax, [rbp+1]
.text:00000000000024DD                 cmp     rax, r11
.text:00000000000024E0                 jnb     short loc_24FB
.text:00000000000024E2                 mov     rax, [rsp+0E8h+s]
.text:00000000000024E7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000024EC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000024F0                 sub     eax, 30h ; '0'
.text:00000000000024F3                 cmp     al, 9
.text:00000000000024F5                 jbe     loc_2D29
.text:00000000000024FB
.text:00000000000024FB loc_24FB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000024FB                 mov     eax, r12d
.text:00000000000024FE                 mov     ebx, 30h ; '0'
.text:0000000000002503                 xor     r12d, r12d
.text:0000000000002506                 jmp     loc_20B8
.text:0000000000002506 ; ---------------------------------------------------------------------------
.text:000000000000250B                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002510                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002515                 mov     r12d, r10d
.text:0000000000002518                 setz    dl
.text:000000000000251B                 xor     r10d, r10d
.text:000000000000251E                 xor     eax, eax
.text:0000000000002520                 jmp     loc_20B8
.text:0000000000002520 ; ---------------------------------------------------------------------------
.text:0000000000002525                 align 8
.text:0000000000002528
.text:0000000000002528 loc_2528:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002528                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002528                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000252D                 setz    dl
.text:0000000000002530                 xor     r10d, r10d
.text:0000000000002533                 jmp     loc_22F8
.text:0000000000002533 ; ---------------------------------------------------------------------------
.text:0000000000002538                 align 20h
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002540                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002540                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002545                 setz    dl
.text:0000000000002548                 xor     r10d, r10d
.text:000000000000254B                 xor     r12d, r12d
.text:000000000000254E                 jmp     loc_2301
.text:000000000000254E ; ---------------------------------------------------------------------------
.text:0000000000002553                 align 8
.text:0000000000002558
.text:0000000000002558 loc_2558:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002558                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002558                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000255D                 mov     r12d, r10d
.text:0000000000002560                 mov     ebx, 20h ; ' '
.text:0000000000002565                 setz    dl
.text:0000000000002568                 xor     r10d, r10d
.text:000000000000256B                 jmp     loc_2301
.text:0000000000002570 ; ---------------------------------------------------------------------------
.text:0000000000002570
.text:0000000000002570 loc_2570:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002570                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002570                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002575                 xor     r10d, r10d
.text:0000000000002578                 mov     ebx, 72h ; 'r'
.text:000000000000257D                 jmp     loc_21B2
.text:000000000000257D ; ---------------------------------------------------------------------------
.text:0000000000002582                 align 8
.text:0000000000002588
.text:0000000000002588 loc_2588:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002588                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002588                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000258D                 jmp     loc_2230
.text:000000000000258D ; ---------------------------------------------------------------------------
.text:0000000000002592                 align 8
.text:0000000000002598
.text:0000000000002598 loc_2598:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002598                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:0000000000002598                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000259D                 xor     r10d, r10d
.text:00000000000025A0                 mov     ebx, 74h ; 't'
.text:00000000000025A5                 jmp     loc_21B2
.text:00000000000025A5 ; ---------------------------------------------------------------------------
.text:00000000000025AA                 align 10h
.text:00000000000025B0
.text:00000000000025B0 loc_25B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025B0                                         ; DATA XREF: .rodata:jpt_240A↓o
.text:00000000000025B0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000025B5                 jmp     loc_2230
.text:00000000000025B5 ; ---------------------------------------------------------------------------
.text:00000000000025BA                 align 20h
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000025C0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000025C0                 xor     r10d, r10d
.text:00000000000025C3                 jmp     loc_2060
.text:00000000000025C3 ; ---------------------------------------------------------------------------
.text:00000000000025C8                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000025D0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000025D5                 jnz     loc_2F40
.text:00000000000025DB
.text:00000000000025DB loc_25DB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000025DB                 add     rbp, 1
.text:00000000000025DF                 mov     eax, r8d
.text:00000000000025E2                 xor     r12d, r12d
.text:00000000000025E5                 mov     ebx, 5Ch ; '\'
.text:00000000000025EA                 jmp     loc_20FC
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EF                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:00000000000025F0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000025F5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000025FA                 mov     r12d, r8d
.text:00000000000025FD                 mov     rbp, r11
.text:0000000000002600                 setz    dl
.text:0000000000002603                 mov     eax, ebx
.text:0000000000002605                 test    r15, r15
.text:0000000000002608                 setz    cl
.text:000000000000260B                 and     eax, edx
.text:000000000000260D                 and     al, cl
.text:000000000000260F                 jnz     loc_3076
.text:0000000000002615                 mov     eax, ebx
.text:0000000000002617                 xor     eax, 1
.text:000000000000261A                 and     dl, al
.text:000000000000261C                 jz      loc_2F8C
.text:0000000000002622                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002627                 jz      loc_2F8A
.text:000000000000262D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002632                 jnz     loc_302D
.text:0000000000002638                 test    r13, r13
.text:000000000000263B                 setz    al
.text:000000000000263E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002644                 setnz   dl
.text:0000000000002647                 and     al, dl
.text:0000000000002649                 jz      loc_306C
.text:000000000000264F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002654
.text:0000000000002654 loc_2654:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002654                 lea     rbx, asc_4965   ; "'"
.text:000000000000265B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000265F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002667                 mov     r15d, 1
.text:000000000000266D                 mov     [rsp+0E8h+n], 1
.text:0000000000002676                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000267B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002680                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002684                 jmp     loc_1F63
.text:0000000000002684 ; ---------------------------------------------------------------------------
.text:0000000000002689                 align 10h
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002690                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002695                 jnz     loc_2F40
.text:000000000000269B                 test    r13, r13
.text:000000000000269E                 jz      loc_2AA0
.text:00000000000026A4                 xor     edx, edx
.text:00000000000026A6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000026AC                 jnz     loc_2AA0
.text:00000000000026B2
.text:00000000000026B2 loc_26B2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000026B2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000026B2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000026B7                 add     r15, 3
.text:00000000000026BB                 xor     eax, eax
.text:00000000000026BD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000026C2                 xor     r8d, r8d
.text:00000000000026C5                 mov     r13, rdx
.text:00000000000026C8                 mov     ebx, 27h ; '''
.text:00000000000026CD                 jmp     loc_20E9
.text:00000000000026CD ; ---------------------------------------------------------------------------
.text:00000000000026D2                 align 8
.text:00000000000026D8
.text:00000000000026D8 loc_26D8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000026D8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000026DD                 jz      short loc_2700
.text:00000000000026DF                 lea     rcx, [rbp+2]
.text:00000000000026E3                 cmp     rcx, r11
.text:00000000000026E6                 jnb     short loc_2700
.text:00000000000026E8                 mov     rax, [rsp+0E8h+s]
.text:00000000000026ED                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:00000000000026F2                 jz      loc_2E82
.text:00000000000026F8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002700
.text:0000000000002700 loc_2700:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002700                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002700                 xor     edx, edx
.text:0000000000002702                 xor     r12d, r12d
.text:0000000000002705                 xor     eax, eax
.text:0000000000002707                 mov     ebx, 3Fh ; '?'
.text:000000000000270C                 jmp     loc_20B8
.text:000000000000270C ; ---------------------------------------------------------------------------
.text:0000000000002711                 align 8
.text:0000000000002718
.text:0000000000002718 loc_2718:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002718                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000271D                 jnz     loc_2F40
.text:0000000000002723                 xor     r12d, r12d
.text:0000000000002726                 xor     eax, eax
.text:0000000000002728                 mov     ebx, 3Fh ; '?'
.text:000000000000272D                 jmp     loc_20E9
.text:000000000000272D ; ---------------------------------------------------------------------------
.text:0000000000002732                 align 8
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002738                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002740                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002744                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002750                 mov     [rsp+0E8h+ps], rax
.text:0000000000002755                 jnz     short loc_2784
.text:0000000000002757                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000275C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002761                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002766                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000276B                 call    _strlen
.text:0000000000002770                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002776                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000277C                 mov     r11, rax
.text:000000000000277F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002784
.text:0000000000002784 loc_2784:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002784                 lea     rax, [rsp+0E8h+wc]
.text:000000000000278C                 xor     ecx, ecx
.text:000000000000278E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002792                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002797                 mov     rbx, rcx
.text:000000000000279A                 mov     [rsp+0E8h+var_60], r9
.text:00000000000027A2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000027A7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000027AC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000027B4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000027B9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000027BE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000027C3
.text:00000000000027C3 loc_27C3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000027C3                 mov     rax, [rsp+0E8h+s]
.text:00000000000027C8                 lea     r14, [rbp+rbx+0]
.text:00000000000027CD                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000027D2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000027D7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000027DC                 lea     r13, [rax+r14]
.text:00000000000027E0                 sub     rdx, r14
.text:00000000000027E3                 mov     rsi, r13
.text:00000000000027E6                 call    rpl_mbrtowc
.text:00000000000027EB                 test    rax, rax
.text:00000000000027EE                 mov     r15, rax
.text:00000000000027F1                 jz      short loc_2841
.text:00000000000027F3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000027F7                 jz      loc_2E15
.text:00000000000027FD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002801                 jz      loc_2DA1
.text:0000000000002807                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000280C                 setz    al
.text:000000000000280F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002813                 jnz     loc_29B0
.text:0000000000002819
.text:0000000000002819 loc_2819:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002819                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002819                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002820                 call    _iswprint
.text:0000000000002825                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000282A                 test    eax, eax
.text:000000000000282C                 mov     eax, 0
.text:0000000000002831                 cmovz   r12d, eax
.text:0000000000002835                 add     rbx, r15
.text:0000000000002838                 call    _mbsinit
.text:000000000000283D                 test    eax, eax
.text:000000000000283F                 jz      short loc_27C3
.text:0000000000002841
.text:0000000000002841 loc_2841:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002841                 mov     edx, r12d
.text:0000000000002844                 mov     rdi, rbx
.text:0000000000002847                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000284D                 xor     edx, 1
.text:0000000000002850                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002855                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000285B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000285F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002867                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000286C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002871                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002876
.text:0000000000002876 loc_2876:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002876                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002876                 cmp     rdi, 1
.text:000000000000287A                 jbe     loc_2E7B
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002880                 mov     rcx, rdi
.text:0000000000002883                 xor     esi, esi
.text:0000000000002885                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000288B                 add     rcx, rbp
.text:000000000000288E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002893                 jmp     loc_294E
.text:0000000000002893 ; ---------------------------------------------------------------------------
.text:0000000000002898                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000028A0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028A5                 setz    al
.text:00000000000028A8                 test    r9b, r9b
.text:00000000000028AB                 jnz     loc_2D60
.text:00000000000028B1                 mov     esi, r8d
.text:00000000000028B4                 xor     esi, 1
.text:00000000000028B7                 and     al, sil
.text:00000000000028BA                 jz      short loc_28EB
.text:00000000000028BC                 cmp     r13, r15
.text:00000000000028BF                 jbe     short loc_28C6
.text:00000000000028C1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000028C6
.text:00000000000028C6 loc_28C6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000028C6                 lea     rsi, [r15+1]
.text:00000000000028CA                 cmp     r13, rsi
.text:00000000000028CD                 jbe     short loc_28D5
.text:00000000000028CF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000028D5
.text:00000000000028D5 loc_28D5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000028D5                 lea     rsi, [r15+2]
.text:00000000000028D9                 cmp     r13, rsi
.text:00000000000028DC                 jbe     short loc_28E4
.text:00000000000028DE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000028E4
.text:00000000000028E4 loc_28E4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:00000000000028E4                 add     r15, 3
.text:00000000000028E8                 mov     r8d, eax
.text:00000000000028EB
.text:00000000000028EB loc_28EB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:00000000000028EB                 cmp     r13, r15
.text:00000000000028EE                 jbe     short loc_28F5
.text:00000000000028F0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000028F5
.text:00000000000028F5 loc_28F5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:00000000000028F5                 lea     rax, [r15+1]
.text:00000000000028F9                 cmp     r13, rax
.text:00000000000028FC                 jbe     short loc_290B
.text:00000000000028FE                 mov     eax, ebx
.text:0000000000002900                 shr     al, 6
.text:0000000000002903                 add     eax, 30h ; '0'
.text:0000000000002906                 mov     [r14+r15+1], al
.text:000000000000290B
.text:000000000000290B loc_290B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000290B                 lea     rax, [r15+2]
.text:000000000000290F                 cmp     r13, rax
.text:0000000000002912                 jbe     short loc_2924
.text:0000000000002914                 mov     eax, ebx
.text:0000000000002916                 shr     al, 3
.text:0000000000002919                 and     eax, 7
.text:000000000000291C                 add     eax, 30h ; '0'
.text:000000000000291F                 mov     [r14+r15+2], al
.text:0000000000002924
.text:0000000000002924 loc_2924:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002924                 and     ebx, 7
.text:0000000000002927                 add     rbp, 1
.text:000000000000292B                 add     r15, 3
.text:000000000000292F                 add     ebx, 30h ; '0'
.text:0000000000002932                 cmp     rbp, rcx
.text:0000000000002935                 jnb     loc_2120
.text:000000000000293B                 mov     esi, edx
.text:000000000000293D
.text:000000000000293D loc_293D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000293D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000293D                 cmp     r13, r15
.text:0000000000002940                 jbe     short loc_2946
.text:0000000000002942                 mov     [r14+r15], bl
.text:0000000000002946
.text:0000000000002946 loc_2946:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002946                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000294A                 add     r15, 1
.text:000000000000294E
.text:000000000000294E loc_294E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000294E                 test    dl, dl
.text:0000000000002950                 jnz     loc_28A0
.text:0000000000002956                 mov     eax, esi
.text:0000000000002958                 xor     eax, 1
.text:000000000000295B                 and     eax, r8d
.text:000000000000295E                 test    r10b, r10b
.text:0000000000002961                 jz      short loc_2971
.text:0000000000002963                 cmp     r13, r15
.text:0000000000002966                 jbe     short loc_296D
.text:0000000000002968                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000296D
.text:000000000000296D loc_296D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000296D                 add     r15, 1
.text:0000000000002971
.text:0000000000002971 loc_2971:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002971                 add     rbp, 1
.text:0000000000002975                 cmp     rbp, rcx
.text:0000000000002978                 jnb     loc_20FC
.text:000000000000297E                 test    al, al
.text:0000000000002980                 jz      loc_2D7E
.text:0000000000002986                 cmp     r13, r15
.text:0000000000002989                 jbe     short loc_2990
.text:000000000000298B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002990
.text:0000000000002990 loc_2990:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002990                 lea     rax, [r15+1]
.text:0000000000002994                 cmp     r13, rax
.text:0000000000002997                 jbe     short loc_299F
.text:0000000000002999                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000299F
.text:000000000000299F loc_299F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000299F                 add     r15, 2
.text:00000000000029A3                 xor     r10d, r10d
.text:00000000000029A6                 xor     r8d, r8d
.text:00000000000029A9                 jmp     short loc_293D
.text:00000000000029A9 ; ---------------------------------------------------------------------------
.text:00000000000029AB                 align 10h
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000029B0                 cmp     r15, 1
.text:00000000000029B4                 jz      loc_2819
.text:00000000000029BA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000029BF                 lea     rcx, [rdi+r15]
.text:00000000000029C3                 lea     rdx, [rdi+r14+1]
.text:00000000000029C8                 lea     r8, [rcx+r14]
.text:00000000000029CC                 jmp     short loc_29DD
.text:00000000000029CC ; ---------------------------------------------------------------------------
.text:00000000000029CE                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000029D0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000029D0                 add     rdx, 1
.text:00000000000029D4                 cmp     r8, rdx
.text:00000000000029D7                 jz      loc_2819
.text:00000000000029DD
.text:00000000000029DD loc_29DD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000029DD                 movzx   ecx, byte ptr [rdx]
.text:00000000000029E0                 sub     ecx, 5Bh ; '['
.text:00000000000029E3                 cmp     cl, 21h ; '!'
.text:00000000000029E6                 ja      short loc_29D0
.text:00000000000029E8                 mov     esi, 1
.text:00000000000029ED                 shl     rsi, cl
.text:00000000000029F0                 mov     rcx, rsi
.text:00000000000029F3                 mov     rsi, 20000002Bh
.text:00000000000029FD                 test    rcx, rsi
.text:0000000000002A00                 jz      short loc_29D0
.text:0000000000002A02                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A07                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002A0C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002A11                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002A19
.text:0000000000002A19 loc_2A19:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002A19                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002A19                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002A1E                 jz      short loc_2A30
.text:0000000000002A20                 test    al, al
.text:0000000000002A22                 mov     eax, 4
.text:0000000000002A27                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002A2C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002A30
.text:0000000000002A30 loc_2A30:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002A30                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002A30                 sub     rsp, 8
.text:0000000000002A34                 mov     rcx, rbp
.text:0000000000002A37                 mov     rsi, r13
.text:0000000000002A3A                 push    [rsp+0F0h+var_88]
.text:0000000000002A3E                 push    [rsp+0F8h+var_80]
.text:0000000000002A42                 mov     rdi, r14
.text:0000000000002A45                 push    0
.text:0000000000002A47                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002A4F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002A54                 mov     rdx, [rsp+108h+s]
.text:0000000000002A59                 and     r9d, 0FFFFFFFDh
.text:0000000000002A5D                 call    quotearg_buffer_restyled
.text:0000000000002A62                 add     rsp, 20h
.text:0000000000002A66                 mov     r15, rax
.text:0000000000002A69
.text:0000000000002A69 loc_2A69:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002A69                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002A69                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002A71                 xor     rbx, fs:28h
.text:0000000000002A7A                 mov     rax, r15
.text:0000000000002A7D                 jnz     loc_3083
.text:0000000000002A83                 add     rsp, 0B8h
.text:0000000000002A8A                 pop     rbx
.text:0000000000002A8B                 pop     rbp
.text:0000000000002A8C                 pop     r12
.text:0000000000002A8E                 pop     r13
.text:0000000000002A90                 pop     r14
.text:0000000000002A92                 pop     r15
.text:0000000000002A94                 retn
.text:0000000000002A94 ; ---------------------------------------------------------------------------
.text:0000000000002A95                 align 8
.text:0000000000002A98
.text:0000000000002A98 loc_2A98:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002A98                 mov     rbp, r11
.text:0000000000002A9B                 jmp     loc_2A19
.text:0000000000002AA0 ; ---------------------------------------------------------------------------
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002AA0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002AA0                 cmp     r13, r15
.text:0000000000002AA3                 jbe     short loc_2AAA
.text:0000000000002AA5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002AAA
.text:0000000000002AAA loc_2AAA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002AAA                 lea     rax, [r15+1]
.text:0000000000002AAE                 cmp     r13, rax
.text:0000000000002AB1                 jbe     short loc_2AB9
.text:0000000000002AB3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002AB9
.text:0000000000002AB9 loc_2AB9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002AB9                 lea     rax, [r15+2]
.text:0000000000002ABD                 cmp     r13, rax
.text:0000000000002AC0                 jbe     loc_30B2
.text:0000000000002AC6                 mov     rdx, r13
.text:0000000000002AC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002ACF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002AD4                 jmp     loc_26B2
.text:0000000000002AD9 ; ---------------------------------------------------------------------------
.text:0000000000002AD9
.text:0000000000002AD9 loc_2AD9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002AD9                 mov     eax, r12d
.text:0000000000002ADC                 mov     ebx, 30h ; '0'
.text:0000000000002AE1                 xor     r12d, r12d
.text:0000000000002AE4                 jmp     loc_20E9
.text:0000000000002AE9 ; ---------------------------------------------------------------------------
.text:0000000000002AE9
.text:0000000000002AE9 loc_2AE9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002AE9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002AEF                 jmp     loc_24B9
.text:0000000000002AF4 ; ---------------------------------------------------------------------------
.text:0000000000002AF4
.text:0000000000002AF4 loc_2AF4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002AF4                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002AF4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002AF6                 jnz     loc_1F23        ; jumptable 00000000000121F1 case 1
.text:0000000000002AFC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002B01
.text:0000000000002B01 loc_2B01:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002B01                 test    r13, r13
.text:0000000000002B04                 jnz     loc_309A
.text:0000000000002B0A                 lea     rax, asc_4965   ; "'"
.text:0000000000002B11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B1A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002B1F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B24                 xor     r12d, r12d
.text:0000000000002B27                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B2C                 mov     [rsp+0E8h+n], 1
.text:0000000000002B35                 mov     [rsp+0E8h+s2], rax
.text:0000000000002B3A                 mov     r15d, 1
.text:0000000000002B40                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B48                 jmp     loc_1F63
.text:0000000000002B48 ; ---------------------------------------------------------------------------
.text:0000000000002B4D                 align 10h
.text:0000000000002B50
.text:0000000000002B50 loc_2B50:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B50                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002B50                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002B52                 jnz     loc_2F4D
.text:0000000000002B58                 test    r13, r13
.text:0000000000002B5B                 jz      loc_2D86
.text:0000000000002B61                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002B65                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002B6A                 xor     r12d, r12d
.text:0000000000002B6D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B72                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B7B
.text:0000000000002B7B loc_2B7B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002B7B                 lea     rax, unk_4963
.text:0000000000002B82                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B87                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002B8C                 mov     [rsp+0E8h+n], 1
.text:0000000000002B95                 mov     r15d, 1
.text:0000000000002B9B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BA0                 jmp     loc_1F63
.text:0000000000002BA5 ; ---------------------------------------------------------------------------
.text:0000000000002BA5
.text:0000000000002BA5 loc_2BA5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BA5                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002BA5                 lea     rax, unk_4963   ; jumptable 00000000000121F1 case 6
.text:0000000000002BAC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BB1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BB6                 xor     r12d, r12d
.text:0000000000002BB9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BC2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002BC7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BCC                 mov     [rsp+0E8h+n], 1
.text:0000000000002BD5                 xor     r15d, r15d
.text:0000000000002BD8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BDD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002BE5                 jmp     loc_1F63
.text:0000000000002BEA ; ---------------------------------------------------------------------------
.text:0000000000002BEA
.text:0000000000002BEA loc_2BEA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BEA                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002BEA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002BEF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BF4                 xor     r12d, r12d
.text:0000000000002BF7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C00                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C05                 xor     r15d, r15d
.text:0000000000002C08                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C0D                 mov     [rsp+0E8h+n], 0
.text:0000000000002C16                 mov     [rsp+0E8h+s2], 0
.text:0000000000002C1F                 jmp     loc_1F63
.text:0000000000002C24 ; ---------------------------------------------------------------------------
.text:0000000000002C24
.text:0000000000002C24 loc_2C24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C24                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002C24                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002C29                 jz      short loc_2C81
.text:0000000000002C2B                 lea     rsi, asc_4967   ; "`"
.text:0000000000002C32                 xor     edi, edi        ; domainname
.text:0000000000002C34                 mov     edx, 5          ; category
.text:0000000000002C39                 call    _dcgettext
.text:0000000000002C3E                 mov     rcx, rax
.text:0000000000002C41                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002C46                 lea     rax, asc_4967   ; "`"
.text:0000000000002C4D                 cmp     rcx, rax
.text:0000000000002C50                 jz      loc_2FEE
.text:0000000000002C56
.text:0000000000002C56 loc_2C56:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002C56                 lea     rsi, asc_4965   ; "'"
.text:0000000000002C5D                 xor     edi, edi        ; domainname
.text:0000000000002C5F                 mov     edx, 5          ; category
.text:0000000000002C64                 call    _dcgettext
.text:0000000000002C69                 mov     rcx, rax
.text:0000000000002C6C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002C71                 lea     rax, asc_4965   ; "'"
.text:0000000000002C78                 cmp     rcx, rax
.text:0000000000002C7B                 jz      loc_3004
.text:0000000000002C81
.text:0000000000002C81 loc_2C81:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002C81                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002C81                 xor     r15d, r15d
.text:0000000000002C84                 test    ebx, ebx
.text:0000000000002C86                 jz      loc_2E4D
.text:0000000000002C8C
.text:0000000000002C8C loc_2C8C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002C8C                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002C8C                 test    ebx, ebx
.text:0000000000002C8E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002C93                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002C98                 xor     r12d, r12d
.text:0000000000002C9B                 mov     rdi, rbx        ; s
.text:0000000000002C9E                 call    _strlen
.text:0000000000002CA3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002CA8                 mov     [rsp+0E8h+n], rax
.text:0000000000002CAD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002CB2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CB7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CC0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002CC5                 jmp     loc_1F63
.text:0000000000002CCA ; ---------------------------------------------------------------------------
.text:0000000000002CCA
.text:0000000000002CCA loc_2CCA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CCA                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002CCA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002CCF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CD4                 xor     r12d, r12d
.text:0000000000002CD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CE0                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002CE5                 xor     r15d, r15d
.text:0000000000002CE8                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002CED                 mov     [rsp+0E8h+n], 0
.text:0000000000002CF6                 mov     [rsp+0E8h+s2], 0
.text:0000000000002CFF                 jmp     loc_1F63
.text:0000000000002D04 ; ---------------------------------------------------------------------------
.text:0000000000002D04
.text:0000000000002D04 loc_2D04:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D04                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002D04                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002D09                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D0E                 xor     r12d, r12d
.text:0000000000002D11                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D1A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002D1F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D24                 jmp     loc_1F43
.text:0000000000002D29 ; ---------------------------------------------------------------------------
.text:0000000000002D29
.text:0000000000002D29 loc_2D29:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002D29                 cmp     r13, r15
.text:0000000000002D2C                 jbe     short loc_2D33
.text:0000000000002D2E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002D33
.text:0000000000002D33 loc_2D33:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002D33                 lea     rax, [rcx+2]
.text:0000000000002D37                 cmp     r13, rax
.text:0000000000002D3A                 jbe     short loc_2D42
.text:0000000000002D3C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002D42
.text:0000000000002D42 loc_2D42:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002D42                 mov     eax, r12d
.text:0000000000002D45                 lea     r15, [rcx+3]
.text:0000000000002D49                 xor     r12d, r12d
.text:0000000000002D4C                 mov     ebx, 30h ; '0'
.text:0000000000002D51                 jmp     loc_20B8
.text:0000000000002D51 ; ---------------------------------------------------------------------------
.text:0000000000002D56                 align 20h
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002D60                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002D65                 mov     rbp, r11
.text:0000000000002D68                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002D6C                 jmp     loc_2A19
.text:0000000000002D71 ; ---------------------------------------------------------------------------
.text:0000000000002D71
.text:0000000000002D71 loc_2D71:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002D71                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002D76                 xor     r12d, r12d
.text:0000000000002D79                 jmp     loc_2880
.text:0000000000002D7E ; ---------------------------------------------------------------------------
.text:0000000000002D7E
.text:0000000000002D7E loc_2D7E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002D7E                 xor     r10d, r10d
.text:0000000000002D81                 jmp     loc_293D
.text:0000000000002D86 ; ---------------------------------------------------------------------------
.text:0000000000002D86
.text:0000000000002D86 loc_2D86:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002D86                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D8F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D94                 xor     r12d, r12d
.text:0000000000002D97                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D9C                 jmp     loc_2B7B
.text:0000000000002DA1 ; ---------------------------------------------------------------------------
.text:0000000000002DA1
.text:0000000000002DA1 loc_2DA1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002DA1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002DA6                 mov     rsi, r14
.text:0000000000002DA9                 mov     rcx, r13
.text:0000000000002DAC                 mov     rax, rbx
.text:0000000000002DAF                 mov     rdi, rbx
.text:0000000000002DB2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002DB8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002DBD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002DC5                 cmp     rsi, r11
.text:0000000000002DC8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002DCE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002DD6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002DDB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002DE0                 jnb     short loc_2E08
.text:0000000000002DE2                 cmp     byte ptr [rcx], 0
.text:0000000000002DE5                 jnz     short loc_2DF7
.text:0000000000002DE7                 jmp     short loc_2E08
.text:0000000000002DE7 ; ---------------------------------------------------------------------------
.text:0000000000002DE9                 align 10h
.text:0000000000002DF0
.text:0000000000002DF0 loc_2DF0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002DF0                 cmp     byte ptr [r9+rax], 0
.text:0000000000002DF5                 jz      short loc_2E05
.text:0000000000002DF7
.text:0000000000002DF7 loc_2DF7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002DF7                 add     rax, 1
.text:0000000000002DFB                 lea     rdx, [rbp+rax+0]
.text:0000000000002E00                 cmp     r11, rdx
.text:0000000000002E03                 ja      short loc_2DF0
.text:0000000000002E05
.text:0000000000002E05 loc_2E05:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002E05                 mov     rdi, rax
.text:0000000000002E08
.text:0000000000002E08 loc_2E08:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002E08                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002E08                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E0D                 xor     r12d, r12d
.text:0000000000002E10                 jmp     loc_2876
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E15
.text:0000000000002E15 loc_2E15:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002E15                 mov     rdi, rbx
.text:0000000000002E18                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002E1E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002E23                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002E29                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002E31                 xor     r12d, r12d
.text:0000000000002E34                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002E39                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E3E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002E43                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E48                 jmp     loc_2876
.text:0000000000002E4D ; ---------------------------------------------------------------------------
.text:0000000000002E4D
.text:0000000000002E4D loc_2E4D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002E4D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002E52                 movzx   eax, byte ptr [rdx]
.text:0000000000002E55                 test    al, al
.text:0000000000002E57                 jz      loc_2C8C
.text:0000000000002E5D                 nop     dword ptr [rax]
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002E60                 cmp     r13, r15
.text:0000000000002E63                 jbe     short loc_2E69
.text:0000000000002E65                 mov     [r14+r15], al
.text:0000000000002E69
.text:0000000000002E69 loc_2E69:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002E69                 add     r15, 1
.text:0000000000002E6D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002E72                 test    al, al
.text:0000000000002E74                 jnz     short loc_2E60
.text:0000000000002E76                 jmp     loc_2C8C
.text:0000000000002E7B ; ---------------------------------------------------------------------------
.text:0000000000002E7B
.text:0000000000002E7B loc_2E7B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002E7B                 mov     eax, edx
.text:0000000000002E7D                 jmp     loc_23D7
.text:0000000000002E82 ; ---------------------------------------------------------------------------
.text:0000000000002E82
.text:0000000000002E82 loc_2E82:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002E82                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002E86                 cmp     bl, 3Eh ; '>'
.text:0000000000002E89                 ja      loc_2700
.text:0000000000002E8F                 mov     rax, 7000A38200000000h
.text:0000000000002E99                 bt      rax, rbx
.text:0000000000002E9D                 jnb     loc_2700
.text:0000000000002EA3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002EA8                 jnz     loc_3092
.text:0000000000002EAE                 cmp     r13, r15
.text:0000000000002EB1                 jbe     short loc_2EB8
.text:0000000000002EB3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002EB8
.text:0000000000002EB8 loc_2EB8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002EB8                 lea     rax, [r15+1]
.text:0000000000002EBC                 cmp     r13, rax
.text:0000000000002EBF                 jbe     short loc_2EC7
.text:0000000000002EC1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002EC7
.text:0000000000002EC7 loc_2EC7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002EC7                 lea     rax, [r15+2]
.text:0000000000002ECB                 cmp     r13, rax
.text:0000000000002ECE                 jbe     short loc_2ED6
.text:0000000000002ED0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002ED6
.text:0000000000002ED6 loc_2ED6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002ED6                 lea     rax, [r15+3]
.text:0000000000002EDA                 cmp     r13, rax
.text:0000000000002EDD                 jbe     short loc_2EE5
.text:0000000000002EDF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002EE5
.text:0000000000002EE5 loc_2EE5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002EE5                 add     r15, 4
.text:0000000000002EE9                 xor     edx, edx
.text:0000000000002EEB                 xor     r12d, r12d
.text:0000000000002EEE                 xor     eax, eax
.text:0000000000002EF0                 mov     rbp, rcx
.text:0000000000002EF3                 jmp     loc_20B8
.text:0000000000002EF8 ; ---------------------------------------------------------------------------
.text:0000000000002EF8
.text:0000000000002EF8 loc_2EF8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002EF8                                         ; DATA XREF: .rodata:jpt_1F21↓o
.text:0000000000002EF8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002EFA                 jz      loc_3088
.text:0000000000002F00                 lea     rax, asc_4965   ; "'"
.text:0000000000002F07                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F0C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F11                 xor     r12d, r12d
.text:0000000000002F14                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F1D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F22                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F27                 mov     [rsp+0E8h+n], 1
.text:0000000000002F30                 xor     r15d, r15d
.text:0000000000002F33                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F38                 jmp     loc_1F63
.text:0000000000002F38 ; ---------------------------------------------------------------------------
.text:0000000000002F3D                 align 20h
.text:0000000000002F40
.text:0000000000002F40 loc_2F40:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000002F40                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000002F40                 mov     rbp, r11
.text:0000000000002F43                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002F48                 jmp     loc_2A19
.text:0000000000002F4D ; ---------------------------------------------------------------------------
.text:0000000000002F4D
.text:0000000000002F4D loc_2F4D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000002F4D                 lea     rax, unk_4963
.text:0000000000002F54                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F59                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F5E                 xor     r12d, r12d
.text:0000000000002F61                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F6A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F6F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F74                 mov     [rsp+0E8h+n], 1
.text:0000000000002F7D                 xor     r15d, r15d
.text:0000000000002F80                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F85                 jmp     loc_1F63
.text:0000000000002F8A ; ---------------------------------------------------------------------------
.text:0000000000002F8A
.text:0000000000002F8A loc_2F8A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000002F8A                 mov     eax, edx
.text:0000000000002F8C
.text:0000000000002F8C loc_2F8C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000002F8C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000002F8C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000002F91                 test    rbx, rbx
.text:0000000000002F94                 jz      short loc_2FC2
.text:0000000000002F96                 test    al, al
.text:0000000000002F98                 jz      short loc_2FC2
.text:0000000000002F9A                 movzx   ecx, byte ptr [rbx]
.text:0000000000002F9D                 mov     rax, rbx
.text:0000000000002FA0                 test    cl, cl
.text:0000000000002FA2                 jz      short loc_2FC2
.text:0000000000002FA4                 mov     rdx, r15
.text:0000000000002FA7                 sub     rax, r15
.text:0000000000002FAA
.text:0000000000002FAA loc_2FAA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000002FAA                 cmp     r13, rdx
.text:0000000000002FAD                 jbe     short loc_2FB3
.text:0000000000002FAF                 mov     [r14+rdx], cl
.text:0000000000002FB3
.text:0000000000002FB3 loc_2FB3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000002FB3                 add     rdx, 1
.text:0000000000002FB7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000002FBB                 test    cl, cl
.text:0000000000002FBD                 jnz     short loc_2FAA
.text:0000000000002FBF                 mov     r15, rdx
.text:0000000000002FC2
.text:0000000000002FC2 loc_2FC2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000002FC2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000002FC2                 cmp     r13, r15
.text:0000000000002FC5                 jbe     loc_2A69
.text:0000000000002FCB                 mov     byte ptr [r14+r15], 0
.text:0000000000002FD0                 jmp     loc_2A69
.text:0000000000002FD5 ; ---------------------------------------------------------------------------
.text:0000000000002FD5
.text:0000000000002FD5 loc_2FD5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000002FD5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FDA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002FDF                 mov     rbp, r11
.text:0000000000002FE2                 setz    al
.text:0000000000002FE5                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002FE9                 jmp     loc_2A19
.text:0000000000002FEE ; ---------------------------------------------------------------------------
.text:0000000000002FEE
.text:0000000000002FEE loc_2FEE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000002FEE                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000002FF2                 mov     rdi, rcx
.text:0000000000002FF5                 call    gettext_quote
.text:0000000000002FFA                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002FFF                 jmp     loc_2C56
.text:0000000000003004 ; ---------------------------------------------------------------------------
.text:0000000000003004
.text:0000000000003004 loc_3004:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003004                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003008                 mov     rdi, rcx
.text:000000000000300B                 call    gettext_quote
.text:0000000000003010                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003015                 jmp     loc_2C81
.text:000000000000301A ; ---------------------------------------------------------------------------
.text:000000000000301A
.text:000000000000301A loc_301A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000301A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000301F                 mov     rbp, r11
.text:0000000000003022                 mov     eax, edx
.text:0000000000003024                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003028                 jmp     loc_2A19
.text:000000000000302D ; ---------------------------------------------------------------------------
.text:000000000000302D
.text:000000000000302D loc_302D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000302D                 sub     rsp, 8
.text:0000000000003031                 mov     r8d, 5
.text:0000000000003037                 mov     rcx, r11
.text:000000000000303A                 push    [rsp+0F0h+var_88]
.text:000000000000303E                 push    [rsp+0F8h+var_80]
.text:0000000000003042                 mov     rdi, r14
.text:0000000000003045                 push    [rsp+100h+var_C8]
.text:0000000000003049                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003051                 mov     rdx, [rsp+108h+s]
.text:0000000000003056                 mov     rsi, [rsp+108h+var_98]
.text:000000000000305B                 call    quotearg_buffer_restyled
.text:0000000000003060                 add     rsp, 20h
.text:0000000000003064                 mov     r15, rax
.text:0000000000003067                 jmp     loc_2A69
.text:000000000000306C ; ---------------------------------------------------------------------------
.text:000000000000306C
.text:000000000000306C loc_306C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000306C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003071                 jmp     loc_2F8C
.text:0000000000003076 ; ---------------------------------------------------------------------------
.text:0000000000003076
.text:0000000000003076 loc_3076:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003076                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000307E                 jmp     loc_2A19
.text:0000000000003083 ; ---------------------------------------------------------------------------
.text:0000000000003083
.text:0000000000003083 loc_3083:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003083                 call    ___stack_chk_fail
.text:0000000000003088 ; ---------------------------------------------------------------------------
.text:0000000000003088
.text:0000000000003088 loc_3088:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003088                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000308D                 jmp     loc_2B01
.text:0000000000003092 ; ---------------------------------------------------------------------------
.text:0000000000003092
.text:0000000000003092 loc_3092:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003092                 mov     rbp, r11
.text:0000000000003095                 jmp     loc_2A30
.text:000000000000309A ; ---------------------------------------------------------------------------
.text:000000000000309A
.text:000000000000309A loc_309A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000309A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000309F                 xor     eax, eax
.text:00000000000030A1                 xor     r12d, r12d
.text:00000000000030A4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030AD                 jmp     loc_2654
.text:00000000000030B2 ; ---------------------------------------------------------------------------
.text:00000000000030B2
.text:00000000000030B2 loc_30B2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000030B2                 mov     rdx, r13
.text:00000000000030B5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000030BA                 jmp     loc_26B2
.text:00000000000030BF ; ---------------------------------------------------------------------------
.text:00000000000030BF
.text:00000000000030BF def_1F21:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000030BF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000030BF ; } // starts at 1E90
.text:00000000000030BF quotearg_buffer_restyled endp
.text:00000000000030BF
.text:00000000000030BF ; ---------------------------------------------------------------------------
.text:00000000000030C4                 align 10h
.text:00000000000030D0
.text:00000000000030D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030D0
.text:00000000000030D0
.text:00000000000030D0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000030D0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000030D0
.text:00000000000030D0 var_50          = qword ptr -50h
.text:00000000000030D0 var_48          = qword ptr -48h
.text:00000000000030D0 var_40          = dword ptr -40h
.text:00000000000030D0 var_3C          = dword ptr -3Ch
.text:00000000000030D0
.text:00000000000030D0 ; __unwind {
.text:00000000000030D0                 push    r15
.text:00000000000030D2                 push    r14
.text:00000000000030D4                 movsxd  r15, edi
.text:00000000000030D7                 push    r13
.text:00000000000030D9                 push    r12
.text:00000000000030DB                 mov     r14, rdx
.text:00000000000030DE                 push    rbp
.text:00000000000030DF                 push    rbx
.text:00000000000030E0                 mov     rbp, rcx
.text:00000000000030E3                 sub     rsp, 28h
.text:00000000000030E7                 mov     [rsp+58h+var_50], rsi
.text:00000000000030EC                 call    ___errno_location
.text:00000000000030F1                 mov     r13, rax
.text:00000000000030F4                 mov     eax, [rax]
.text:00000000000030F6                 test    r15d, r15d
.text:00000000000030F9                 mov     rbx, cs:slotvec
.text:0000000000003100                 mov     [rsp+58h+var_40], eax
.text:0000000000003104                 js      loc_3271
.text:000000000000310A                 cmp     cs:nslots, r15d
.text:0000000000003111                 jg      short loc_3175
.text:0000000000003113                 cmp     r15d, 7FFFFFFFh
.text:000000000000311A                 jz      loc_3276
.text:0000000000003120                 lea     r12d, [r15+1]
.text:0000000000003124                 lea     rax, slotvec0
.text:000000000000312B                 movsxd  rsi, r12d
.text:000000000000312E                 shl     rsi, 4
.text:0000000000003132                 cmp     rbx, rax
.text:0000000000003135                 jz      loc_3250
.text:000000000000313B                 mov     rdi, rbx
.text:000000000000313E                 call    xrealloc
.text:0000000000003143                 mov     rbx, rax
.text:0000000000003146                 mov     cs:slotvec, rax
.text:000000000000314D
.text:000000000000314D loc_314D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000314D                 movsxd  rdi, cs:nslots
.text:0000000000003154                 mov     edx, r12d
.text:0000000000003157                 xor     esi, esi        ; c
.text:0000000000003159                 sub     edx, edi
.text:000000000000315B                 shl     rdi, 4
.text:000000000000315F                 movsxd  rdx, edx
.text:0000000000003162                 add     rdi, rbx        ; s
.text:0000000000003165                 shl     rdx, 4          ; n
.text:0000000000003169                 call    _memset
.text:000000000000316E                 mov     cs:nslots, r12d
.text:0000000000003175
.text:0000000000003175 loc_3175:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003175                 mov     eax, [rbp+4]
.text:0000000000003178                 shl     r15, 4
.text:000000000000317C                 sub     rsp, 8
.text:0000000000003180                 add     rbx, r15
.text:0000000000003183                 lea     r15, [rbp+8]
.text:0000000000003187                 mov     r8d, [rbp+0]
.text:000000000000318B                 mov     r11, [rbx]
.text:000000000000318E                 mov     r12, [rbx+8]
.text:0000000000003192                 mov     rcx, r14
.text:0000000000003195                 or      eax, 1
.text:0000000000003198                 mov     [rsp+60h+var_3C], eax
.text:000000000000319C                 push    qword ptr [rbp+30h]
.text:000000000000319F                 mov     r9d, eax
.text:00000000000031A2                 push    qword ptr [rbp+28h]
.text:00000000000031A5                 push    r15
.text:00000000000031A7                 mov     rsi, r11
.text:00000000000031AA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000031AF                 mov     rdi, r12
.text:00000000000031B2                 mov     [rsp+78h+var_48], r11
.text:00000000000031B7                 call    quotearg_buffer_restyled
.text:00000000000031BC                 add     rsp, 20h
.text:00000000000031C0                 mov     r11, [rsp+58h+var_48]
.text:00000000000031C5                 cmp     r11, rax
.text:00000000000031C8                 ja      short loc_3231
.text:00000000000031CA                 lea     rsi, [rax+1]
.text:00000000000031CE                 lea     rax, slot0
.text:00000000000031D5                 cmp     r12, rax
.text:00000000000031D8                 mov     [rbx], rsi
.text:00000000000031DB                 jz      short loc_31EF
.text:00000000000031DD                 mov     rdi, r12        ; ptr
.text:00000000000031E0                 mov     [rsp+58h+var_48], rsi
.text:00000000000031E5                 call    _free
.text:00000000000031EA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000031EF
.text:00000000000031EF loc_31EF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000031EF                 mov     rdi, rsi
.text:00000000000031F2                 mov     [rsp+58h+var_48], rsi
.text:00000000000031F7                 call    xmalloc
.text:00000000000031FC                 sub     rsp, 8
.text:0000000000003200                 mov     [rbx+8], rax
.text:0000000000003204                 mov     r8d, [rbp+0]
.text:0000000000003208                 push    qword ptr [rbp+30h]
.text:000000000000320B                 push    qword ptr [rbp+28h]
.text:000000000000320E                 mov     rcx, r14
.text:0000000000003211                 push    r15
.text:0000000000003213                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003218                 mov     rdi, rax
.text:000000000000321B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003220                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003225                 mov     r12, rax
.text:0000000000003228                 call    quotearg_buffer_restyled
.text:000000000000322D                 add     rsp, 20h
.text:0000000000003231
.text:0000000000003231 loc_3231:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003231                 mov     eax, [rsp+58h+var_40]
.text:0000000000003235                 mov     [r13+0], eax
.text:0000000000003239                 add     rsp, 28h
.text:000000000000323D                 mov     rax, r12
.text:0000000000003240                 pop     rbx
.text:0000000000003241                 pop     rbp
.text:0000000000003242                 pop     r12
.text:0000000000003244                 pop     r13
.text:0000000000003246                 pop     r14
.text:0000000000003248                 pop     r15
.text:000000000000324A                 retn
.text:000000000000324A ; ---------------------------------------------------------------------------
.text:000000000000324B                 align 10h
.text:0000000000003250
.text:0000000000003250 loc_3250:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003250                 xor     edi, edi
.text:0000000000003252                 call    xrealloc
.text:0000000000003257                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000325F                 mov     rbx, rax
.text:0000000000003262                 mov     cs:slotvec, rax
.text:0000000000003269                 movups  xmmword ptr [rax], xmm0
.text:000000000000326C                 jmp     loc_314D
.text:0000000000003271 ; ---------------------------------------------------------------------------
.text:0000000000003271
.text:0000000000003271 loc_3271:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003271                 call    _abort
.text:0000000000003276 ; ---------------------------------------------------------------------------
.text:0000000000003276
.text:0000000000003276 loc_3276:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003276                 call    xalloc_die
.text:0000000000003276 ; } // starts at 30D0
.text:0000000000003276 quotearg_n_options endp
.text:0000000000003276
.text:0000000000003276 ; ---------------------------------------------------------------------------
.text:000000000000327B                 align 20h
.text:0000000000003280
.text:0000000000003280 ; =============== S U B R O U T I N E =======================================
.text:0000000000003280
.text:0000000000003280 ; Attributes: info_from_lumina
.text:0000000000003280
.text:0000000000003280 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003280                 public clone_quoting_options
.text:0000000000003280 clone_quoting_options proc near
.text:0000000000003280 ; __unwind {
.text:0000000000003280                 push    r12
.text:0000000000003282                 push    rbp
.text:0000000000003283                 push    rbx
.text:0000000000003284                 mov     rbx, rdi
.text:0000000000003287                 call    ___errno_location
.text:000000000000328C                 mov     r12d, [rax]
.text:000000000000328F                 mov     rbp, rax
.text:0000000000003292                 lea     rax, default_quoting_options
.text:0000000000003299                 test    rbx, rbx
.text:000000000000329C                 mov     esi, 38h ; '8'  ; n
.text:00000000000032A1                 cmovz   rbx, rax
.text:00000000000032A5                 mov     rdi, rbx        ; src
.text:00000000000032A8                 call    xmemdup
.text:00000000000032AD                 mov     [rbp+0], r12d
.text:00000000000032B1                 pop     rbx
.text:00000000000032B2                 pop     rbp
.text:00000000000032B3                 pop     r12
.text:00000000000032B5                 retn
.text:00000000000032B5 ; } // starts at 3280
.text:00000000000032B5 clone_quoting_options endp
.text:00000000000032B5
.text:00000000000032B5 ; ---------------------------------------------------------------------------
.text:00000000000032B6                 align 20h
.text:00000000000032C0
.text:00000000000032C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032C0
.text:00000000000032C0
.text:00000000000032C0                 public get_quoting_style
.text:00000000000032C0 get_quoting_style proc near
.text:00000000000032C0 ; __unwind {
.text:00000000000032C0                 lea     rax, default_quoting_options
.text:00000000000032C7                 test    rdi, rdi
.text:00000000000032CA                 cmovz   rdi, rax
.text:00000000000032CE                 mov     eax, [rdi]
.text:00000000000032D0                 retn
.text:00000000000032D0 ; } // starts at 32C0
.text:00000000000032D0 get_quoting_style endp
.text:00000000000032D0
.text:00000000000032D0 ; ---------------------------------------------------------------------------
.text:00000000000032D1                 align 20h
.text:00000000000032E0
.text:00000000000032E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032E0
.text:00000000000032E0
.text:00000000000032E0                 public set_quoting_style
.text:00000000000032E0 set_quoting_style proc near
.text:00000000000032E0 ; __unwind {
.text:00000000000032E0                 lea     rax, default_quoting_options
.text:00000000000032E7                 test    rdi, rdi
.text:00000000000032EA                 cmovz   rdi, rax
.text:00000000000032EE                 mov     [rdi], esi
.text:00000000000032F0                 retn
.text:00000000000032F0 ; } // starts at 32E0
.text:00000000000032F0 set_quoting_style endp
.text:00000000000032F0
.text:00000000000032F0 ; ---------------------------------------------------------------------------
.text:00000000000032F1                 align 20h
.text:0000000000003300
.text:0000000000003300 ; =============== S U B R O U T I N E =======================================
.text:0000000000003300
.text:0000000000003300 ; Attributes: info_from_lumina
.text:0000000000003300
.text:0000000000003300 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003300                 public set_char_quoting
.text:0000000000003300 set_char_quoting proc near
.text:0000000000003300 ; __unwind {
.text:0000000000003300                 lea     rax, default_quoting_options
.text:0000000000003307                 test    rdi, rdi
.text:000000000000330A                 mov     ecx, esi
.text:000000000000330C                 cmovz   rdi, rax
.text:0000000000003310                 mov     eax, esi
.text:0000000000003312                 and     ecx, 1Fh
.text:0000000000003315                 shr     al, 5
.text:0000000000003318                 movzx   eax, al
.text:000000000000331B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003320                 mov     esi, [rdi]
.text:0000000000003322                 mov     eax, esi
.text:0000000000003324                 shr     eax, cl
.text:0000000000003326                 xor     edx, eax
.text:0000000000003328                 and     eax, 1
.text:000000000000332B                 and     edx, 1
.text:000000000000332E                 shl     edx, cl
.text:0000000000003330                 xor     edx, esi
.text:0000000000003332                 mov     [rdi], edx
.text:0000000000003334                 retn
.text:0000000000003334 ; } // starts at 3300
.text:0000000000003334 set_char_quoting endp
.text:0000000000003334
.text:0000000000003334 ; ---------------------------------------------------------------------------
.text:0000000000003335                 align 20h
.text:0000000000003340
.text:0000000000003340 ; =============== S U B R O U T I N E =======================================
.text:0000000000003340
.text:0000000000003340
.text:0000000000003340                 public set_quoting_flags
.text:0000000000003340 set_quoting_flags proc near
.text:0000000000003340 ; __unwind {
.text:0000000000003340                 lea     rax, default_quoting_options
.text:0000000000003347                 test    rdi, rdi
.text:000000000000334A                 cmovz   rdi, rax
.text:000000000000334E                 mov     eax, [rdi+4]
.text:0000000000003351                 mov     [rdi+4], esi
.text:0000000000003354                 retn
.text:0000000000003354 ; } // starts at 3340
.text:0000000000003354 set_quoting_flags endp
.text:0000000000003354
.text:0000000000003354 ; ---------------------------------------------------------------------------
.text:0000000000003355                 align 20h
.text:0000000000003360
.text:0000000000003360 ; =============== S U B R O U T I N E =======================================
.text:0000000000003360
.text:0000000000003360 ; Attributes: info_from_lumina
.text:0000000000003360
.text:0000000000003360 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003360                 public set_custom_quoting
.text:0000000000003360 set_custom_quoting proc near
.text:0000000000003360 ; __unwind {
.text:0000000000003360                 lea     rax, default_quoting_options
.text:0000000000003367                 test    rdi, rdi
.text:000000000000336A                 cmovz   rdi, rax
.text:000000000000336E                 test    rsi, rsi
.text:0000000000003371                 mov     dword ptr [rdi], 0Ah
.text:0000000000003377                 jz      short loc_3387
.text:0000000000003379                 test    rdx, rdx
.text:000000000000337C                 jz      short loc_3387
.text:000000000000337E                 mov     [rdi+28h], rsi
.text:0000000000003382                 mov     [rdi+30h], rdx
.text:0000000000003386                 retn
.text:0000000000003387 ; ---------------------------------------------------------------------------
.text:0000000000003387
.text:0000000000003387 loc_3387:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003387                                         ; set_custom_quoting+1C↑j
.text:0000000000003387                 sub     rsp, 8
.text:000000000000338B                 call    _abort
.text:000000000000338B ; } // starts at 3360
.text:000000000000338B set_custom_quoting endp
.text:000000000000338B
.text:0000000000003390
.text:0000000000003390 ; =============== S U B R O U T I N E =======================================
.text:0000000000003390
.text:0000000000003390 ; Attributes: info_from_lumina
.text:0000000000003390
.text:0000000000003390 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003390                 public quotearg_buffer
.text:0000000000003390 quotearg_buffer proc near
.text:0000000000003390
.text:0000000000003390 var_40          = qword ptr -40h
.text:0000000000003390
.text:0000000000003390 ; __unwind {
.text:0000000000003390                 push    r15
.text:0000000000003392                 push    r14
.text:0000000000003394                 lea     rax, default_quoting_options
.text:000000000000339B                 push    r13
.text:000000000000339D                 push    r12
.text:000000000000339F                 mov     r13, rdi
.text:00000000000033A2                 push    rbp
.text:00000000000033A3                 push    rbx
.text:00000000000033A4                 mov     rbx, r8
.text:00000000000033A7                 mov     r14, rsi
.text:00000000000033AA                 mov     r15, rdx
.text:00000000000033AD                 sub     rsp, 18h
.text:00000000000033B1                 test    r8, r8
.text:00000000000033B4                 cmovz   rbx, rax
.text:00000000000033B8                 mov     [rsp+48h+var_40], rcx
.text:00000000000033BD                 call    ___errno_location
.text:00000000000033C2                 mov     r12d, [rax]
.text:00000000000033C5                 mov     rbp, rax
.text:00000000000033C8                 lea     rax, [rbx+8]
.text:00000000000033CC                 sub     rsp, 8
.text:00000000000033D0                 mov     r9d, [rbx+4]
.text:00000000000033D4                 push    qword ptr [rbx+30h]
.text:00000000000033D7                 mov     r8d, [rbx]
.text:00000000000033DA                 push    qword ptr [rbx+28h]
.text:00000000000033DD                 mov     rdx, r15
.text:00000000000033E0                 push    rax
.text:00000000000033E1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000033E6                 mov     rsi, r14
.text:00000000000033E9                 mov     rdi, r13
.text:00000000000033EC                 call    quotearg_buffer_restyled
.text:00000000000033F1                 mov     [rbp+0], r12d
.text:00000000000033F5                 add     rsp, 38h
.text:00000000000033F9                 pop     rbx
.text:00000000000033FA                 pop     rbp
.text:00000000000033FB                 pop     r12
.text:00000000000033FD                 pop     r13
.text:00000000000033FF                 pop     r14
.text:0000000000003401                 pop     r15
.text:0000000000003403                 retn
.text:0000000000003403 ; } // starts at 3390
.text:0000000000003403 quotearg_buffer endp
.text:0000000000003403
.text:0000000000003403 ; ---------------------------------------------------------------------------
.text:0000000000003404                 align 10h
.text:0000000000003410
.text:0000000000003410 ; =============== S U B R O U T I N E =======================================
.text:0000000000003410
.text:0000000000003410 ; Attributes: info_from_lumina
.text:0000000000003410
.text:0000000000003410 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003410                 public quotearg_alloc_mem
.text:0000000000003410 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003410
.text:0000000000003410 var_5C          = dword ptr -5Ch
.text:0000000000003410 var_58          = qword ptr -58h
.text:0000000000003410 var_50          = qword ptr -50h
.text:0000000000003410 var_48          = qword ptr -48h
.text:0000000000003410 var_40          = qword ptr -40h
.text:0000000000003410
.text:0000000000003410 ; __unwind {
.text:0000000000003410                 push    r15
.text:0000000000003412                 push    r14
.text:0000000000003414                 lea     rax, default_quoting_options
.text:000000000000341B                 push    r13
.text:000000000000341D                 push    r12
.text:000000000000341F                 mov     r12, rdx
.text:0000000000003422                 push    rbp
.text:0000000000003423                 push    rbx
.text:0000000000003424                 mov     rbx, rcx
.text:0000000000003427                 mov     r14, rdi
.text:000000000000342A                 mov     r15, rsi
.text:000000000000342D                 sub     rsp, 38h
.text:0000000000003431                 test    rcx, rcx
.text:0000000000003434                 cmovz   rbx, rax
.text:0000000000003438                 xor     ebp, ebp
.text:000000000000343A                 call    ___errno_location
.text:000000000000343F                 test    r12, r12
.text:0000000000003442                 mov     r13, rax
.text:0000000000003445                 mov     eax, [rax]
.text:0000000000003447                 setz    bpl
.text:000000000000344B                 or      ebp, [rbx+4]
.text:000000000000344E                 lea     r10, [rbx+8]
.text:0000000000003452                 sub     rsp, 8
.text:0000000000003456                 mov     r8d, [rbx]
.text:0000000000003459                 mov     rcx, r15
.text:000000000000345C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003460                 push    qword ptr [rbx+30h]
.text:0000000000003463                 mov     rdx, r14
.text:0000000000003466                 push    qword ptr [rbx+28h]
.text:0000000000003469                 push    r10
.text:000000000000346B                 xor     esi, esi
.text:000000000000346D                 mov     r9d, ebp
.text:0000000000003470                 xor     edi, edi
.text:0000000000003472                 mov     [rsp+88h+var_48], r10
.text:0000000000003477                 call    quotearg_buffer_restyled
.text:000000000000347C                 lea     rsi, [rax+1]
.text:0000000000003480                 mov     [rsp+88h+var_40], rax
.text:0000000000003485                 add     rsp, 20h
.text:0000000000003489                 mov     rdi, rsi
.text:000000000000348C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003491                 call    xmalloc
.text:0000000000003496                 mov     [rsp+68h+var_58], rax
.text:000000000000349B                 sub     rsp, 8
.text:000000000000349F                 push    qword ptr [rbx+30h]
.text:00000000000034A2                 push    qword ptr [rbx+28h]
.text:00000000000034A5                 mov     r10, [rsp+80h+var_48]
.text:00000000000034AA                 mov     r9d, ebp
.text:00000000000034AD                 mov     r8d, [rbx]
.text:00000000000034B0                 mov     rcx, r15
.text:00000000000034B3                 mov     rdx, r14
.text:00000000000034B6                 mov     rdi, rax
.text:00000000000034B9                 push    r10
.text:00000000000034BB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000034C0                 call    quotearg_buffer_restyled
.text:00000000000034C5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000034C9                 add     rsp, 20h
.text:00000000000034CD                 test    r12, r12
.text:00000000000034D0                 mov     [r13+0], eax
.text:00000000000034D4                 jz      short loc_34DF
.text:00000000000034D6                 mov     r11, [rsp+68h+var_40]
.text:00000000000034DB                 mov     [r12], r11
.text:00000000000034DF
.text:00000000000034DF loc_34DF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000034DF                 mov     rax, [rsp+68h+var_58]
.text:00000000000034E4                 add     rsp, 38h
.text:00000000000034E8                 pop     rbx
.text:00000000000034E9                 pop     rbp
.text:00000000000034EA                 pop     r12
.text:00000000000034EC                 pop     r13
.text:00000000000034EE                 pop     r14
.text:00000000000034F0                 pop     r15
.text:00000000000034F2                 retn
.text:00000000000034F2 ; } // starts at 3410
.text:00000000000034F2 quotearg_alloc_mem endp
.text:00000000000034F2
.text:00000000000034F2 ; ---------------------------------------------------------------------------
.text:00000000000034F3                 align 20h
.text:0000000000003500
.text:0000000000003500 ; =============== S U B R O U T I N E =======================================
.text:0000000000003500
.text:0000000000003500
.text:0000000000003500                 public quotearg_alloc
.text:0000000000003500 quotearg_alloc  proc near
.text:0000000000003500 ; __unwind {
.text:0000000000003500                 mov     rcx, rdx
.text:0000000000003503                 xor     edx, edx
.text:0000000000003505                 jmp     quotearg_alloc_mem
.text:0000000000003505 ; } // starts at 3500
.text:0000000000003505 quotearg_alloc  endp
.text:0000000000003505
.text:0000000000003505 ; ---------------------------------------------------------------------------
.text:000000000000350A                 align 10h
.text:0000000000003510
.text:0000000000003510 ; =============== S U B R O U T I N E =======================================
.text:0000000000003510
.text:0000000000003510 ; Attributes: info_from_lumina
.text:0000000000003510
.text:0000000000003510 ; void __cdecl quotearg_free()
.text:0000000000003510                 public quotearg_free
.text:0000000000003510 quotearg_free   proc near
.text:0000000000003510 ; __unwind {
.text:0000000000003510                 mov     eax, cs:nslots
.text:0000000000003516                 push    r12
.text:0000000000003518                 mov     r12, cs:slotvec
.text:000000000000351F                 push    rbp
.text:0000000000003520                 push    rbx
.text:0000000000003521                 cmp     eax, 1
.text:0000000000003524                 jle     short loc_3551
.text:0000000000003526                 sub     eax, 2
.text:0000000000003529                 lea     rbx, [r12+18h]
.text:000000000000352E                 shl     rax, 4
.text:0000000000003532                 lea     rbp, [r12+rax+28h]
.text:0000000000003537                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003540
.text:0000000000003540 loc_3540:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003540                 mov     rdi, [rbx]      ; ptr
.text:0000000000003543                 add     rbx, 10h
.text:0000000000003547                 call    _free
.text:000000000000354C                 cmp     rbx, rbp
.text:000000000000354F                 jnz     short loc_3540
.text:0000000000003551
.text:0000000000003551 loc_3551:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003551                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003556                 lea     rbx, slot0
.text:000000000000355D                 cmp     rdi, rbx
.text:0000000000003560                 jz      short loc_3579
.text:0000000000003562                 call    _free
.text:0000000000003567                 mov     cs:slotvec0, 100h
.text:0000000000003572                 mov     cs:off_207078, rbx
.text:0000000000003579
.text:0000000000003579 loc_3579:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003579                 lea     rbx, slotvec0
.text:0000000000003580                 cmp     r12, rbx
.text:0000000000003583                 jz      short loc_3594
.text:0000000000003585                 mov     rdi, r12        ; ptr
.text:0000000000003588                 call    _free
.text:000000000000358D                 mov     cs:slotvec, rbx
.text:0000000000003594
.text:0000000000003594 loc_3594:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003594                 pop     rbx
.text:0000000000003595                 mov     cs:nslots, 1
.text:000000000000359F                 pop     rbp
.text:00000000000035A0                 pop     r12
.text:00000000000035A2                 retn
.text:00000000000035A2 ; } // starts at 3510
.text:00000000000035A2 quotearg_free   endp
.text:00000000000035A2
.text:00000000000035A2 ; ---------------------------------------------------------------------------
.text:00000000000035A3                 align 10h
.text:00000000000035B0
.text:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035B0
.text:00000000000035B0
.text:00000000000035B0                 public quotearg_n
.text:00000000000035B0 quotearg_n      proc near
.text:00000000000035B0 ; __unwind {
.text:00000000000035B0                 lea     rcx, default_quoting_options
.text:00000000000035B7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000035BE                 jmp     quotearg_n_options
.text:00000000000035BE ; } // starts at 35B0
.text:00000000000035BE quotearg_n      endp
.text:00000000000035BE
.text:00000000000035BE ; ---------------------------------------------------------------------------
.text:00000000000035C3                 align 10h
.text:00000000000035D0
.text:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035D0
.text:00000000000035D0
.text:00000000000035D0                 public quotearg_n_mem
.text:00000000000035D0 quotearg_n_mem  proc near
.text:00000000000035D0 ; __unwind {
.text:00000000000035D0                 lea     rcx, default_quoting_options
.text:00000000000035D7                 jmp     quotearg_n_options
.text:00000000000035D7 ; } // starts at 35D0
.text:00000000000035D7 quotearg_n_mem  endp
.text:00000000000035D7
.text:00000000000035D7 ; ---------------------------------------------------------------------------
.text:00000000000035DC                 align 20h
.text:00000000000035E0
.text:00000000000035E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035E0
.text:00000000000035E0
.text:00000000000035E0                 public quotearg
.text:00000000000035E0 quotearg        proc near
.text:00000000000035E0 ; __unwind {
.text:00000000000035E0                 lea     rcx, default_quoting_options
.text:00000000000035E7                 mov     rsi, rdi
.text:00000000000035EA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000035F1                 xor     edi, edi
.text:00000000000035F3                 jmp     quotearg_n_options
.text:00000000000035F3 ; } // starts at 35E0
.text:00000000000035F3 quotearg        endp
.text:00000000000035F3
.text:00000000000035F3 ; ---------------------------------------------------------------------------
.text:00000000000035F8                 align 20h
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600
.text:0000000000003600                 public quotearg_mem
.text:0000000000003600 quotearg_mem    proc near
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 lea     rcx, default_quoting_options
.text:0000000000003607                 mov     rdx, rsi
.text:000000000000360A                 mov     rsi, rdi
.text:000000000000360D                 xor     edi, edi
.text:000000000000360F                 jmp     quotearg_n_options
.text:000000000000360F ; } // starts at 3600
.text:000000000000360F quotearg_mem    endp
.text:000000000000360F
.text:000000000000360F ; ---------------------------------------------------------------------------
.text:0000000000003614                 align 20h
.text:0000000000003620
.text:0000000000003620 ; =============== S U B R O U T I N E =======================================
.text:0000000000003620
.text:0000000000003620 ; Attributes: info_from_lumina
.text:0000000000003620
.text:0000000000003620 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003620                 public quotearg_n_style
.text:0000000000003620 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003620
.text:0000000000003620 var_48          = dword ptr -48h
.text:0000000000003620 var_44          = qword ptr -44h
.text:0000000000003620 var_3C          = qword ptr -3Ch
.text:0000000000003620 var_34          = qword ptr -34h
.text:0000000000003620 var_2C          = qword ptr -2Ch
.text:0000000000003620 var_24          = qword ptr -24h
.text:0000000000003620 var_1C          = qword ptr -1Ch
.text:0000000000003620 var_14          = dword ptr -14h
.text:0000000000003620 var_10          = qword ptr -10h
.text:0000000000003620
.text:0000000000003620 ; __unwind {
.text:0000000000003620                 sub     rsp, 48h
.text:0000000000003624                 mov     rax, rdx
.text:0000000000003627                 mov     rdx, fs:28h
.text:0000000000003630                 mov     [rsp+48h+var_10], rdx
.text:0000000000003635                 xor     edx, edx
.text:0000000000003637                 cmp     esi, 0Ah
.text:000000000000363A                 jz      short loc_36A4
.text:000000000000363C                 mov     [rsp+48h+var_48], esi
.text:000000000000363F                 mov     rcx, rsp
.text:0000000000003642                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003649                 mov     rsi, rax
.text:000000000000364C                 mov     [rsp+48h+var_44], 0
.text:0000000000003655                 mov     [rsp+48h+var_3C], 0
.text:000000000000365E                 mov     [rsp+48h+var_34], 0
.text:0000000000003667                 mov     [rsp+48h+var_2C], 0
.text:0000000000003670                 mov     [rsp+48h+var_24], 0
.text:0000000000003679                 mov     [rsp+48h+var_1C], 0
.text:0000000000003682                 mov     [rsp+48h+var_14], 0
.text:000000000000368A                 call    quotearg_n_options
.text:000000000000368F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003694                 xor     rcx, fs:28h
.text:000000000000369D                 jnz     short loc_36A9
.text:000000000000369F                 add     rsp, 48h
.text:00000000000036A3                 retn
.text:00000000000036A4 ; ---------------------------------------------------------------------------
.text:00000000000036A4
.text:00000000000036A4 loc_36A4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000036A4                 call    _abort
.text:00000000000036A9 ; ---------------------------------------------------------------------------
.text:00000000000036A9
.text:00000000000036A9 loc_36A9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000036A9                 call    ___stack_chk_fail
.text:00000000000036A9 ; } // starts at 3620
.text:00000000000036A9 quotearg_n_style endp
.text:00000000000036A9
.text:00000000000036A9 ; ---------------------------------------------------------------------------
.text:00000000000036AE                 align 10h
.text:00000000000036B0
.text:00000000000036B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036B0
.text:00000000000036B0 ; Attributes: info_from_lumina
.text:00000000000036B0
.text:00000000000036B0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000036B0                 public quotearg_n_style_mem
.text:00000000000036B0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000036B0
.text:00000000000036B0 var_48          = dword ptr -48h
.text:00000000000036B0 var_44          = qword ptr -44h
.text:00000000000036B0 var_3C          = qword ptr -3Ch
.text:00000000000036B0 var_34          = qword ptr -34h
.text:00000000000036B0 var_2C          = qword ptr -2Ch
.text:00000000000036B0 var_24          = qword ptr -24h
.text:00000000000036B0 var_1C          = qword ptr -1Ch
.text:00000000000036B0 var_14          = dword ptr -14h
.text:00000000000036B0 var_10          = qword ptr -10h
.text:00000000000036B0
.text:00000000000036B0 ; __unwind {
.text:00000000000036B0                 sub     rsp, 48h
.text:00000000000036B4                 mov     rax, rdx
.text:00000000000036B7                 mov     rdx, rcx
.text:00000000000036BA                 mov     rcx, fs:28h
.text:00000000000036C3                 mov     [rsp+48h+var_10], rcx
.text:00000000000036C8                 xor     ecx, ecx
.text:00000000000036CA                 cmp     esi, 0Ah
.text:00000000000036CD                 jz      short loc_3730
.text:00000000000036CF                 mov     [rsp+48h+var_48], esi
.text:00000000000036D2                 mov     rcx, rsp
.text:00000000000036D5                 mov     rsi, rax
.text:00000000000036D8                 mov     [rsp+48h+var_44], 0
.text:00000000000036E1                 mov     [rsp+48h+var_3C], 0
.text:00000000000036EA                 mov     [rsp+48h+var_34], 0
.text:00000000000036F3                 mov     [rsp+48h+var_2C], 0
.text:00000000000036FC                 mov     [rsp+48h+var_24], 0
.text:0000000000003705                 mov     [rsp+48h+var_1C], 0
.text:000000000000370E                 mov     [rsp+48h+var_14], 0
.text:0000000000003716                 call    quotearg_n_options
.text:000000000000371B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003720                 xor     rdx, fs:28h
.text:0000000000003729                 jnz     short loc_3735
.text:000000000000372B                 add     rsp, 48h
.text:000000000000372F                 retn
.text:0000000000003730 ; ---------------------------------------------------------------------------
.text:0000000000003730
.text:0000000000003730 loc_3730:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003730                 call    _abort
.text:0000000000003735 ; ---------------------------------------------------------------------------
.text:0000000000003735
.text:0000000000003735 loc_3735:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003735                 call    ___stack_chk_fail
.text:0000000000003735 ; } // starts at 36B0
.text:0000000000003735 quotearg_n_style_mem endp
.text:0000000000003735
.text:0000000000003735 ; ---------------------------------------------------------------------------
.text:000000000000373A                 align 20h
.text:0000000000003740
.text:0000000000003740 ; =============== S U B R O U T I N E =======================================
.text:0000000000003740
.text:0000000000003740
.text:0000000000003740                 public quotearg_style
.text:0000000000003740 quotearg_style  proc near
.text:0000000000003740 ; __unwind {
.text:0000000000003740                 mov     rdx, rsi
.text:0000000000003743                 mov     esi, edi
.text:0000000000003745                 xor     edi, edi
.text:0000000000003747                 jmp     quotearg_n_style
.text:0000000000003747 ; } // starts at 3740
.text:0000000000003747 quotearg_style  endp
.text:0000000000003747
.text:0000000000003747 ; ---------------------------------------------------------------------------
.text:000000000000374C                 align 10h
.text:0000000000003750
.text:0000000000003750 ; =============== S U B R O U T I N E =======================================
.text:0000000000003750
.text:0000000000003750
.text:0000000000003750                 public quotearg_style_mem
.text:0000000000003750 quotearg_style_mem proc near
.text:0000000000003750 ; __unwind {
.text:0000000000003750                 mov     rcx, rdx
.text:0000000000003753                 mov     rdx, rsi
.text:0000000000003756                 mov     esi, edi
.text:0000000000003758                 xor     edi, edi
.text:000000000000375A                 jmp     quotearg_n_style_mem
.text:000000000000375A ; } // starts at 3750
.text:000000000000375A quotearg_style_mem endp
.text:000000000000375A
.text:000000000000375A ; ---------------------------------------------------------------------------
.text:000000000000375F                 align 20h
.text:0000000000003760
.text:0000000000003760 ; =============== S U B R O U T I N E =======================================
.text:0000000000003760
.text:0000000000003760 ; Attributes: info_from_lumina
.text:0000000000003760
.text:0000000000003760 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003760                 public quotearg_char_mem
.text:0000000000003760 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003760                                         ; quotearg_colon+C↓j ...
.text:0000000000003760
.text:0000000000003760 var_48          = xmmword ptr -48h
.text:0000000000003760 var_38          = xmmword ptr -38h
.text:0000000000003760 var_28          = xmmword ptr -28h
.text:0000000000003760 var_18          = qword ptr -18h
.text:0000000000003760 var_10          = qword ptr -10h
.text:0000000000003760
.text:0000000000003760 ; __unwind {
.text:0000000000003760                 sub     rsp, 48h
.text:0000000000003764                 mov     ecx, edx
.text:0000000000003766                 mov     rax, fs:28h
.text:000000000000376F                 mov     [rsp+48h+var_10], rax
.text:0000000000003774                 xor     eax, eax
.text:0000000000003776                 mov     rax, cs:qword_207230
.text:000000000000377D                 mov     r8, rsp
.text:0000000000003780                 and     ecx, 1Fh
.text:0000000000003783                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000378B                 mov     [rsp+48h+var_18], rax
.text:0000000000003790                 mov     eax, edx
.text:0000000000003792                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003796                 shr     al, 5
.text:0000000000003799                 movzx   eax, al
.text:000000000000379C                 lea     r9, [r8+rax*4+8]
.text:00000000000037A1                 movdqa  xmm0, cs:xmmword_207210
.text:00000000000037A9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000037AE                 movdqa  xmm0, cs:xmmword_207220
.text:00000000000037B6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000037BB                 mov     edx, [r9]
.text:00000000000037BE                 mov     eax, edx
.text:00000000000037C0                 shr     eax, cl
.text:00000000000037C2                 not     eax
.text:00000000000037C4                 and     eax, 1
.text:00000000000037C7                 shl     eax, cl
.text:00000000000037C9                 mov     rcx, r8
.text:00000000000037CC                 xor     eax, edx
.text:00000000000037CE                 mov     rdx, rsi
.text:00000000000037D1                 mov     rsi, rdi
.text:00000000000037D4                 mov     [r9], eax
.text:00000000000037D7                 xor     edi, edi
.text:00000000000037D9                 call    quotearg_n_options
.text:00000000000037DE                 mov     rsi, [rsp+48h+var_10]
.text:00000000000037E3                 xor     rsi, fs:28h
.text:00000000000037EC                 jnz     short loc_37F3
.text:00000000000037EE                 add     rsp, 48h
.text:00000000000037F2                 retn
.text:00000000000037F3 ; ---------------------------------------------------------------------------
.text:00000000000037F3
.text:00000000000037F3 loc_37F3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:00000000000037F3                 call    ___stack_chk_fail
.text:00000000000037F3 ; } // starts at 3760
.text:00000000000037F3 quotearg_char_mem endp
.text:00000000000037F3
.text:00000000000037F3 ; ---------------------------------------------------------------------------
.text:00000000000037F8                 align 20h
.text:0000000000003800
.text:0000000000003800 ; =============== S U B R O U T I N E =======================================
.text:0000000000003800
.text:0000000000003800
.text:0000000000003800                 public quotearg_char
.text:0000000000003800 quotearg_char   proc near
.text:0000000000003800 ; __unwind {
.text:0000000000003800                 movsx   edx, sil
.text:0000000000003804                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000380B                 jmp     quotearg_char_mem
.text:000000000000380B ; } // starts at 3800
.text:000000000000380B quotearg_char   endp
.text:000000000000380B
.text:0000000000003810
.text:0000000000003810 ; =============== S U B R O U T I N E =======================================
.text:0000000000003810
.text:0000000000003810
.text:0000000000003810                 public quotearg_colon
.text:0000000000003810 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003810 ; __unwind {
.text:0000000000003810                 mov     edx, 3Ah ; ':'
.text:0000000000003815                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000381C                 jmp     quotearg_char_mem
.text:000000000000381C ; } // starts at 3810
.text:000000000000381C quotearg_colon  endp
.text:000000000000381C
.text:000000000000381C ; ---------------------------------------------------------------------------
.text:0000000000003821                 align 10h
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830
.text:0000000000003830                 public quotearg_colon_mem
.text:0000000000003830 quotearg_colon_mem proc near
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 mov     edx, 3Ah ; ':'
.text:0000000000003835                 jmp     quotearg_char_mem
.text:0000000000003835 ; } // starts at 3830
.text:0000000000003835 quotearg_colon_mem endp
.text:0000000000003835
.text:0000000000003835 ; ---------------------------------------------------------------------------
.text:000000000000383A                 align 20h
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840 ; Attributes: info_from_lumina
.text:0000000000003840
.text:0000000000003840 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003840                 public quotearg_n_style_colon
.text:0000000000003840 quotearg_n_style_colon proc near
.text:0000000000003840
.text:0000000000003840 var_48          = dword ptr -48h
.text:0000000000003840 var_44          = qword ptr -44h
.text:0000000000003840 var_3C          = qword ptr -3Ch
.text:0000000000003840 var_34          = qword ptr -34h
.text:0000000000003840 var_2C          = qword ptr -2Ch
.text:0000000000003840 var_24          = qword ptr -24h
.text:0000000000003840 var_1C          = qword ptr -1Ch
.text:0000000000003840 var_14          = dword ptr -14h
.text:0000000000003840 var_10          = qword ptr -10h
.text:0000000000003840
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 sub     rsp, 48h
.text:0000000000003844                 mov     rax, rdx
.text:0000000000003847                 mov     rdx, fs:28h
.text:0000000000003850                 mov     [rsp+48h+var_10], rdx
.text:0000000000003855                 xor     edx, edx
.text:0000000000003857                 cmp     esi, 0Ah
.text:000000000000385A                 jz      short loc_38C4
.text:000000000000385C                 mov     [rsp+48h+var_48], esi
.text:000000000000385F                 mov     rcx, rsp
.text:0000000000003862                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003869                 mov     rsi, rax
.text:000000000000386C                 mov     [rsp+48h+var_44], 0
.text:0000000000003875                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000387E                 mov     [rsp+48h+var_34], 0
.text:0000000000003887                 mov     [rsp+48h+var_2C], 0
.text:0000000000003890                 mov     [rsp+48h+var_24], 0
.text:0000000000003899                 mov     [rsp+48h+var_1C], 0
.text:00000000000038A2                 mov     [rsp+48h+var_14], 0
.text:00000000000038AA                 call    quotearg_n_options
.text:00000000000038AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000038B4                 xor     rcx, fs:28h
.text:00000000000038BD                 jnz     short loc_38C9
.text:00000000000038BF                 add     rsp, 48h
.text:00000000000038C3                 retn
.text:00000000000038C4 ; ---------------------------------------------------------------------------
.text:00000000000038C4
.text:00000000000038C4 loc_38C4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000038C4                 call    _abort
.text:00000000000038C9 ; ---------------------------------------------------------------------------
.text:00000000000038C9
.text:00000000000038C9 loc_38C9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000038C9                 call    ___stack_chk_fail
.text:00000000000038C9 ; } // starts at 3840
.text:00000000000038C9 quotearg_n_style_colon endp
.text:00000000000038C9
.text:00000000000038C9 ; ---------------------------------------------------------------------------
.text:00000000000038CE                 align 10h
.text:00000000000038D0
.text:00000000000038D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038D0
.text:00000000000038D0 ; Attributes: info_from_lumina
.text:00000000000038D0
.text:00000000000038D0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000038D0                 public quotearg_n_custom_mem
.text:00000000000038D0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000038D0                                         ; quotearg_custom+12↓j ...
.text:00000000000038D0
.text:00000000000038D0 var_48          = xmmword ptr -48h
.text:00000000000038D0 var_38          = xmmword ptr -38h
.text:00000000000038D0 var_28          = xmmword ptr -28h
.text:00000000000038D0 var_18          = qword ptr -18h
.text:00000000000038D0 var_10          = qword ptr -10h
.text:00000000000038D0
.text:00000000000038D0 ; __unwind {
.text:00000000000038D0                 sub     rsp, 48h
.text:00000000000038D4                 mov     r9, rcx
.text:00000000000038D7                 mov     rcx, cs:qword_207230
.text:00000000000038DE                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000038E6                 mov     rax, fs:28h
.text:00000000000038EF                 mov     [rsp+48h+var_10], rax
.text:00000000000038F4                 xor     eax, eax
.text:00000000000038F6                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000038FA                 test    rsi, rsi
.text:00000000000038FD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003902                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003909                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003911                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003916                 movdqa  xmm0, cs:xmmword_207220
.text:000000000000391E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003923                 jz      short loc_3957
.text:0000000000003925                 test    rdx, rdx
.text:0000000000003928                 jz      short loc_3957
.text:000000000000392A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000392F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003934                 mov     rcx, rsp
.text:0000000000003937                 mov     rdx, r8
.text:000000000000393A                 mov     rsi, r9
.text:000000000000393D                 call    quotearg_n_options
.text:0000000000003942                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003947                 xor     rdi, fs:28h
.text:0000000000003950                 jnz     short loc_395C
.text:0000000000003952                 add     rsp, 48h
.text:0000000000003956                 retn
.text:0000000000003957 ; ---------------------------------------------------------------------------
.text:0000000000003957
.text:0000000000003957 loc_3957:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003957                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003957                 call    _abort
.text:000000000000395C ; ---------------------------------------------------------------------------
.text:000000000000395C
.text:000000000000395C loc_395C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000395C                 call    ___stack_chk_fail
.text:000000000000395C ; } // starts at 38D0
.text:000000000000395C quotearg_n_custom_mem endp
.text:000000000000395C
.text:000000000000395C ; ---------------------------------------------------------------------------
.text:0000000000003961                 align 10h
.text:0000000000003970
.text:0000000000003970 ; =============== S U B R O U T I N E =======================================
.text:0000000000003970
.text:0000000000003970
.text:0000000000003970                 public quotearg_n_custom
.text:0000000000003970 quotearg_n_custom proc near
.text:0000000000003970 ; __unwind {
.text:0000000000003970                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003977                 jmp     quotearg_n_custom_mem
.text:0000000000003977 ; } // starts at 3970
.text:0000000000003977 quotearg_n_custom endp
.text:0000000000003977
.text:0000000000003977 ; ---------------------------------------------------------------------------
.text:000000000000397C                 align 20h
.text:0000000000003980
.text:0000000000003980 ; =============== S U B R O U T I N E =======================================
.text:0000000000003980
.text:0000000000003980
.text:0000000000003980                 public quotearg_custom
.text:0000000000003980 quotearg_custom proc near
.text:0000000000003980 ; __unwind {
.text:0000000000003980                 mov     rcx, rdx
.text:0000000000003983                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000398A                 mov     rdx, rsi
.text:000000000000398D                 mov     rsi, rdi
.text:0000000000003990                 xor     edi, edi
.text:0000000000003992                 jmp     quotearg_n_custom_mem
.text:0000000000003992 ; } // starts at 3980
.text:0000000000003992 quotearg_custom endp
.text:0000000000003992
.text:0000000000003992 ; ---------------------------------------------------------------------------
.text:0000000000003997                 align 20h
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0
.text:00000000000039A0                 public quotearg_custom_mem
.text:00000000000039A0 quotearg_custom_mem proc near
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 mov     r8, rcx
.text:00000000000039A3                 mov     rcx, rdx
.text:00000000000039A6                 mov     rdx, rsi
.text:00000000000039A9                 mov     rsi, rdi
.text:00000000000039AC                 xor     edi, edi
.text:00000000000039AE                 jmp     quotearg_n_custom_mem
.text:00000000000039AE ; } // starts at 39A0
.text:00000000000039AE quotearg_custom_mem endp
.text:00000000000039AE
.text:00000000000039AE ; ---------------------------------------------------------------------------
.text:00000000000039B3                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0
.text:00000000000039C0                 public quote_n_mem
.text:00000000000039C0 quote_n_mem     proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 lea     rcx, quote_quoting_options
.text:00000000000039C7                 jmp     quotearg_n_options
.text:00000000000039C7 ; } // starts at 39C0
.text:00000000000039C7 quote_n_mem     endp
.text:00000000000039C7
.text:00000000000039C7 ; ---------------------------------------------------------------------------
.text:00000000000039CC                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0
.text:00000000000039D0                 public quote_mem
.text:00000000000039D0 quote_mem       proc near
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 lea     rcx, quote_quoting_options
.text:00000000000039D7                 mov     rdx, rsi
.text:00000000000039DA                 mov     rsi, rdi
.text:00000000000039DD                 xor     edi, edi
.text:00000000000039DF                 jmp     quotearg_n_options
.text:00000000000039DF ; } // starts at 39D0
.text:00000000000039DF quote_mem       endp
.text:00000000000039DF
.text:00000000000039DF ; ---------------------------------------------------------------------------
.text:00000000000039E4                 align 10h
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0
.text:00000000000039F0                 public quote_n
.text:00000000000039F0 quote_n         proc near
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 lea     rcx, quote_quoting_options
.text:00000000000039F7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000039FE                 jmp     quotearg_n_options
.text:00000000000039FE ; } // starts at 39F0
.text:00000000000039FE quote_n         endp
.text:00000000000039FE
.text:00000000000039FE ; ---------------------------------------------------------------------------
.text:0000000000003A03                 align 10h
.text:0000000000003A10
.text:0000000000003A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A10
.text:0000000000003A10
.text:0000000000003A10                 public quote
.text:0000000000003A10 quote           proc near               ; CODE XREF: main+C2↑p
.text:0000000000003A10 ; __unwind {
.text:0000000000003A10                 lea     rcx, quote_quoting_options
.text:0000000000003A17                 mov     rsi, rdi
.text:0000000000003A1A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A21                 xor     edi, edi
.text:0000000000003A23                 jmp     quotearg_n_options
.text:0000000000003A23 ; } // starts at 3A10
.text:0000000000003A23 quote           endp
.text:0000000000003A23
.text:0000000000003A23 ; ---------------------------------------------------------------------------
.text:0000000000003A28                 align 10h
.text:0000000000003A30
.text:0000000000003A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A30
.text:0000000000003A30
.text:0000000000003A30 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003A30                 public version_etc_arn
.text:0000000000003A30 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3E6B↓j
.text:0000000000003A30                                         ; version_etc_va:loc_3EBB↓p ...
.text:0000000000003A30
.text:0000000000003A30 var_58          = qword ptr -58h
.text:0000000000003A30 var_50          = qword ptr -50h
.text:0000000000003A30 var_48          = qword ptr -48h
.text:0000000000003A30 var_40          = qword ptr -40h
.text:0000000000003A30
.text:0000000000003A30 ; __unwind {
.text:0000000000003A30                 push    r15
.text:0000000000003A32                 push    r14
.text:0000000000003A34                 push    r13
.text:0000000000003A36                 push    r12
.text:0000000000003A38                 mov     r12, r9
.text:0000000000003A3B                 push    rbp
.text:0000000000003A3C                 push    rbx
.text:0000000000003A3D                 mov     rbp, rdi
.text:0000000000003A40                 mov     rbx, r8
.text:0000000000003A43                 sub     rsp, 28h
.text:0000000000003A47                 test    rsi, rsi
.text:0000000000003A4A                 jz      loc_3B68
.text:0000000000003A50                 mov     r8, rdx
.text:0000000000003A53                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003A5A                 mov     r9, rcx
.text:0000000000003A5D                 xor     eax, eax
.text:0000000000003A5F                 mov     rcx, rsi
.text:0000000000003A62                 mov     esi, 1
.text:0000000000003A67                 call    ___fprintf_chk
.text:0000000000003A6C
.text:0000000000003A6C loc_3A6C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003A6C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003A73                 xor     edi, edi        ; domainname
.text:0000000000003A75                 mov     edx, 5          ; category
.text:0000000000003A7A                 call    _dcgettext
.text:0000000000003A7F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003A86                 mov     rcx, rax
.text:0000000000003A89                 mov     r8d, 7E3h
.text:0000000000003A8F                 mov     esi, 1
.text:0000000000003A94                 mov     rdi, rbp
.text:0000000000003A97                 xor     eax, eax
.text:0000000000003A99                 call    ___fprintf_chk
.text:0000000000003A9E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003AA5                 xor     edi, edi        ; domainname
.text:0000000000003AA7                 mov     edx, 5          ; category
.text:0000000000003AAC                 call    _dcgettext
.text:0000000000003AB1                 mov     rsi, rbp        ; stream
.text:0000000000003AB4                 mov     rdi, rax        ; s
.text:0000000000003AB7                 call    _fputs_unlocked
.text:0000000000003ABC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003AC0                 ja      def_3AD4        ; jumptable 0000000000003AD4 default case
.text:0000000000003AC6                 lea     rdx, jpt_3AD4
.text:0000000000003ACD                 movsxd  rax, ds:(jpt_3AD4 - 5128h)[rdx+r12*4]
.text:0000000000003AD1                 add     rax, rdx
.text:0000000000003AD4                 jmp     rax             ; switch jump
.text:0000000000003AD4 ; ---------------------------------------------------------------------------
.text:0000000000003AD6                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 loc_3AE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003AE0                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003AE0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003AD4 case 8
.text:0000000000003AE4                 mov     rax, [rbx+10h]
.text:0000000000003AE8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003AEF                 mov     r8, [rbx+8]
.text:0000000000003AF3                 mov     edx, 5          ; category
.text:0000000000003AF8                 xor     edi, edi        ; domainname
.text:0000000000003AFA                 mov     r13, [rbx+30h]
.text:0000000000003AFE                 mov     r12, [rbx+28h]
.text:0000000000003B02                 mov     [rsp+58h+var_48], r9
.text:0000000000003B07                 mov     r15, [rbx+20h]
.text:0000000000003B0B                 mov     r14, [rbx+18h]
.text:0000000000003B0F                 mov     [rsp+58h+var_58], rax
.text:0000000000003B13                 mov     [rsp+58h+var_50], r8
.text:0000000000003B18                 mov     rbx, [rbx]
.text:0000000000003B1B                 call    _dcgettext
.text:0000000000003B20                 sub     rsp, 8
.text:0000000000003B24
.text:0000000000003B24 loc_3B24:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003B24                 mov     r9, [rsp+60h+var_48]
.text:0000000000003B29                 mov     rdx, rax
.text:0000000000003B2C                 mov     rcx, rbx
.text:0000000000003B2F                 mov     esi, 1
.text:0000000000003B34                 mov     rdi, rbp
.text:0000000000003B37                 xor     eax, eax
.text:0000000000003B39                 push    r9
.text:0000000000003B3B                 push    r13
.text:0000000000003B3D                 push    r12
.text:0000000000003B3F                 push    r15
.text:0000000000003B41                 push    r14
.text:0000000000003B43                 mov     r9, [rsp+88h+var_58]
.text:0000000000003B48                 mov     r8, [rsp+88h+var_50]
.text:0000000000003B4D                 call    ___fprintf_chk
.text:0000000000003B52                 add     rsp, 30h
.text:0000000000003B56
.text:0000000000003B56 loc_3B56:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B56                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003B56                 add     rsp, 28h        ; jumptable 0000000000003AD4 case 0
.text:0000000000003B5A                 pop     rbx
.text:0000000000003B5B                 pop     rbp
.text:0000000000003B5C                 pop     r12
.text:0000000000003B5E                 pop     r13
.text:0000000000003B60                 pop     r14
.text:0000000000003B62                 pop     r15
.text:0000000000003B64                 retn
.text:0000000000003B64 ; ---------------------------------------------------------------------------
.text:0000000000003B65                 align 8
.text:0000000000003B68
.text:0000000000003B68 loc_3B68:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003B68                 mov     r8, rcx
.text:0000000000003B6B                 mov     rcx, rdx
.text:0000000000003B6E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003B75                 mov     esi, 1
.text:0000000000003B7A                 xor     eax, eax
.text:0000000000003B7C                 call    ___fprintf_chk
.text:0000000000003B81                 jmp     loc_3A6C
.text:0000000000003B81 ; ---------------------------------------------------------------------------
.text:0000000000003B86                 align 10h
.text:0000000000003B90
.text:0000000000003B90 loc_3B90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B90                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003B90                 mov     r10, [rbx+40h]  ; jumptable 0000000000003AD4 case 9
.text:0000000000003B94                 mov     r9, [rbx+38h]
.text:0000000000003B98                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003B9F                 mov     rax, [rbx+10h]
.text:0000000000003BA3                 mov     r8, [rbx+8]
.text:0000000000003BA7                 mov     edx, 5          ; category
.text:0000000000003BAC                 mov     r13, [rbx+30h]
.text:0000000000003BB0                 mov     r12, [rbx+28h]
.text:0000000000003BB4                 mov     r15, [rbx+20h]
.text:0000000000003BB8                 mov     r14, [rbx+18h]
.text:0000000000003BBC                 mov     rbx, [rbx]
.text:0000000000003BBF                 mov     [rsp+58h+var_40], r10
.text:0000000000003BC4                 mov     [rsp+58h+var_48], r9
.text:0000000000003BC9                 mov     [rsp+58h+var_58], rax
.text:0000000000003BCD                 mov     [rsp+58h+var_50], r8
.text:0000000000003BD2
.text:0000000000003BD2 loc_3BD2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003BD2                 xor     edi, edi        ; domainname
.text:0000000000003BD4                 call    _dcgettext
.text:0000000000003BD9                 mov     r10, [rsp+58h+var_40]
.text:0000000000003BDE                 push    r10
.text:0000000000003BE0                 jmp     loc_3B24
.text:0000000000003BE0 ; ---------------------------------------------------------------------------
.text:0000000000003BE5                 align 8
.text:0000000000003BE8
.text:0000000000003BE8 loc_3BE8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BE8                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003BE8                 mov     rbx, [rbx]      ; jumptable 0000000000003AD4 case 1
.text:0000000000003BEB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003BF2                 mov     edx, 5          ; category
.text:0000000000003BF7                 xor     edi, edi        ; domainname
.text:0000000000003BF9                 call    _dcgettext
.text:0000000000003BFE                 add     rsp, 28h
.text:0000000000003C02                 mov     rcx, rbx
.text:0000000000003C05                 mov     rdi, rbp
.text:0000000000003C08                 pop     rbx
.text:0000000000003C09                 pop     rbp
.text:0000000000003C0A                 pop     r12
.text:0000000000003C0C                 pop     r13
.text:0000000000003C0E                 pop     r14
.text:0000000000003C10                 pop     r15
.text:0000000000003C12                 mov     rdx, rax
.text:0000000000003C15                 mov     esi, 1
.text:0000000000003C1A                 xor     eax, eax
.text:0000000000003C1C                 jmp     ___fprintf_chk
.text:0000000000003C1C ; ---------------------------------------------------------------------------
.text:0000000000003C21                 align 8
.text:0000000000003C28
.text:0000000000003C28 loc_3C28:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C28                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003C28                 mov     r12, [rbx+8]    ; jumptable 0000000000003AD4 case 2
.text:0000000000003C2C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003C33                 mov     rbx, [rbx]
.text:0000000000003C36                 mov     edx, 5          ; category
.text:0000000000003C3B                 xor     edi, edi        ; domainname
.text:0000000000003C3D                 call    _dcgettext
.text:0000000000003C42                 add     rsp, 28h
.text:0000000000003C46                 mov     r8, r12
.text:0000000000003C49                 mov     rcx, rbx
.text:0000000000003C4C                 mov     rdi, rbp
.text:0000000000003C4F                 mov     rdx, rax
.text:0000000000003C52                 mov     esi, 1
.text:0000000000003C57                 pop     rbx
.text:0000000000003C58                 pop     rbp
.text:0000000000003C59                 pop     r12
.text:0000000000003C5B                 pop     r13
.text:0000000000003C5D                 pop     r14
.text:0000000000003C5F                 pop     r15
.text:0000000000003C61                 xor     eax, eax
.text:0000000000003C63                 jmp     ___fprintf_chk
.text:0000000000003C63 ; ---------------------------------------------------------------------------
.text:0000000000003C68                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C70                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003C70                 mov     r13, [rbx+10h]  ; jumptable 0000000000003AD4 case 3
.text:0000000000003C74                 mov     r12, [rbx+8]
.text:0000000000003C78                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003C7F                 mov     rbx, [rbx]
.text:0000000000003C82                 mov     edx, 5          ; category
.text:0000000000003C87                 xor     edi, edi        ; domainname
.text:0000000000003C89                 call    _dcgettext
.text:0000000000003C8E                 add     rsp, 28h
.text:0000000000003C92                 mov     r9, r13
.text:0000000000003C95                 mov     r8, r12
.text:0000000000003C98                 mov     rcx, rbx
.text:0000000000003C9B                 mov     rdi, rbp
.text:0000000000003C9E                 mov     rdx, rax
.text:0000000000003CA1                 pop     rbx
.text:0000000000003CA2                 pop     rbp
.text:0000000000003CA3                 pop     r12
.text:0000000000003CA5                 pop     r13
.text:0000000000003CA7                 pop     r14
.text:0000000000003CA9                 pop     r15
.text:0000000000003CAB                 mov     esi, 1
.text:0000000000003CB0                 xor     eax, eax
.text:0000000000003CB2                 jmp     ___fprintf_chk
.text:0000000000003CB2 ; ---------------------------------------------------------------------------
.text:0000000000003CB7                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 loc_3CC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CC0                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003CC0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003AD4 case 4
.text:0000000000003CC7                 mov     edx, 5          ; category
.text:0000000000003CCC                 xor     edi, edi        ; domainname
.text:0000000000003CCE                 mov     r14, [rbx+18h]
.text:0000000000003CD2                 mov     r13, [rbx+10h]
.text:0000000000003CD6                 mov     r12, [rbx+8]
.text:0000000000003CDA                 mov     rbx, [rbx]
.text:0000000000003CDD                 call    _dcgettext
.text:0000000000003CE2                 sub     rsp, 8
.text:0000000000003CE6
.text:0000000000003CE6 loc_3CE6:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003CE6                 push    r14
.text:0000000000003CE8                 mov     rdx, rax
.text:0000000000003CEB                 mov     r9, r13
.text:0000000000003CEE                 mov     r8, r12
.text:0000000000003CF1                 mov     rcx, rbx
.text:0000000000003CF4                 mov     rdi, rbp
.text:0000000000003CF7                 mov     esi, 1
.text:0000000000003CFC                 xor     eax, eax
.text:0000000000003CFE                 call    ___fprintf_chk
.text:0000000000003D03                 pop     rax
.text:0000000000003D04                 pop     rdx
.text:0000000000003D05                 add     rsp, 28h
.text:0000000000003D09                 pop     rbx
.text:0000000000003D0A                 pop     rbp
.text:0000000000003D0B                 pop     r12
.text:0000000000003D0D                 pop     r13
.text:0000000000003D0F                 pop     r14
.text:0000000000003D11                 pop     r15
.text:0000000000003D13                 retn
.text:0000000000003D13 ; ---------------------------------------------------------------------------
.text:0000000000003D14                 align 8
.text:0000000000003D18
.text:0000000000003D18 loc_3D18:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D18                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003D18                 mov     r15, [rbx+20h]  ; jumptable 0000000000003AD4 case 5
.text:0000000000003D1C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003D23                 mov     edx, 5          ; category
.text:0000000000003D28                 xor     edi, edi        ; domainname
.text:0000000000003D2A                 mov     r14, [rbx+18h]
.text:0000000000003D2E                 mov     r13, [rbx+10h]
.text:0000000000003D32                 mov     r12, [rbx+8]
.text:0000000000003D36                 mov     rbx, [rbx]
.text:0000000000003D39                 call    _dcgettext
.text:0000000000003D3E                 push    r15
.text:0000000000003D40                 jmp     short loc_3CE6
.text:0000000000003D40 ; ---------------------------------------------------------------------------
.text:0000000000003D42                 align 8
.text:0000000000003D48
.text:0000000000003D48 loc_3D48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D48                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003D48                 mov     r8, [rbx+8]     ; jumptable 0000000000003AD4 case 6
.text:0000000000003D4C                 mov     r12, [rbx+28h]
.text:0000000000003D50                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003D57                 mov     r15, [rbx+20h]
.text:0000000000003D5B                 mov     r14, [rbx+18h]
.text:0000000000003D5F                 mov     edx, 5          ; category
.text:0000000000003D64                 mov     r13, [rbx+10h]
.text:0000000000003D68                 xor     edi, edi        ; domainname
.text:0000000000003D6A                 mov     rbx, [rbx]
.text:0000000000003D6D                 mov     [rsp+58h+var_58], r8
.text:0000000000003D71                 call    _dcgettext
.text:0000000000003D76                 sub     rsp, 8
.text:0000000000003D7A                 mov     r9, r13
.text:0000000000003D7D                 push    r12
.text:0000000000003D7F                 push    r15
.text:0000000000003D81                 push    r14
.text:0000000000003D83
.text:0000000000003D83 loc_3D83:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003D83                 mov     r8, [rsp+78h+var_58]
.text:0000000000003D88                 mov     rcx, rbx
.text:0000000000003D8B                 mov     rdx, rax
.text:0000000000003D8E                 mov     rdi, rbp
.text:0000000000003D91                 mov     esi, 1
.text:0000000000003D96                 xor     eax, eax
.text:0000000000003D98                 call    ___fprintf_chk
.text:0000000000003D9D                 add     rsp, 20h
.text:0000000000003DA1                 add     rsp, 28h
.text:0000000000003DA5                 pop     rbx
.text:0000000000003DA6                 pop     rbp
.text:0000000000003DA7                 pop     r12
.text:0000000000003DA9                 pop     r13
.text:0000000000003DAB                 pop     r14
.text:0000000000003DAD                 pop     r15
.text:0000000000003DAF                 retn
.text:0000000000003DB0 ; ---------------------------------------------------------------------------
.text:0000000000003DB0
.text:0000000000003DB0 loc_3DB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DB0                                         ; DATA XREF: .rodata:jpt_3AD4↓o
.text:0000000000003DB0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003AD4 case 7
.text:0000000000003DB4                 mov     r13, [rbx+30h]
.text:0000000000003DB8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003DBF                 mov     r12, [rbx+28h]
.text:0000000000003DC3                 mov     r15, [rbx+20h]
.text:0000000000003DC7                 mov     edx, 5          ; category
.text:0000000000003DCC                 mov     r14, [rbx+18h]
.text:0000000000003DD0                 mov     r8, [rbx+8]
.text:0000000000003DD4                 xor     edi, edi        ; domainname
.text:0000000000003DD6                 mov     [rsp+58h+var_50], r9
.text:0000000000003DDB                 mov     rbx, [rbx]
.text:0000000000003DDE                 mov     [rsp+58h+var_58], r8
.text:0000000000003DE2                 call    _dcgettext
.text:0000000000003DE7                 push    r13
.text:0000000000003DE9                 push    r12
.text:0000000000003DEB                 push    r15
.text:0000000000003DED                 push    r14
.text:0000000000003DEF                 mov     r9, [rsp+78h+var_50]
.text:0000000000003DF4                 jmp     short loc_3D83
.text:0000000000003DF4 ; ---------------------------------------------------------------------------
.text:0000000000003DF6                 align 20h
.text:0000000000003E00
.text:0000000000003E00 def_3AD4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003E00                 mov     r10, [rbx+40h]  ; jumptable 0000000000003AD4 default case
.text:0000000000003E04                 mov     r9, [rbx+38h]
.text:0000000000003E08                 mov     edx, 5
.text:0000000000003E0D                 mov     rax, [rbx+10h]
.text:0000000000003E11                 mov     r8, [rbx+8]
.text:0000000000003E15                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003E1C                 mov     r13, [rbx+30h]
.text:0000000000003E20                 mov     r12, [rbx+28h]
.text:0000000000003E24                 mov     r15, [rbx+20h]
.text:0000000000003E28                 mov     r14, [rbx+18h]
.text:0000000000003E2C                 mov     [rsp+58h+var_40], r10
.text:0000000000003E31                 mov     [rsp+58h+var_48], r9
.text:0000000000003E36                 mov     [rsp+58h+var_58], rax
.text:0000000000003E3A                 mov     [rsp+58h+var_50], r8
.text:0000000000003E3F                 mov     rbx, [rbx]
.text:0000000000003E42                 jmp     loc_3BD2
.text:0000000000003E42 ; } // starts at 3A30
.text:0000000000003E42 version_etc_arn endp
.text:0000000000003E42
.text:0000000000003E42 ; ---------------------------------------------------------------------------
.text:0000000000003E47                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50 ; Attributes: info_from_lumina
.text:0000000000003E50
.text:0000000000003E50 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003E50                 public version_etc_ar
.text:0000000000003E50 version_etc_ar  proc near
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 xor     r9d, r9d
.text:0000000000003E53                 cmp     qword ptr [r8], 0
.text:0000000000003E57                 jz      short loc_3E6B
.text:0000000000003E59                 nop     dword ptr [rax+00000000h]
.text:0000000000003E60
.text:0000000000003E60 loc_3E60:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003E60                 add     r9, 1
.text:0000000000003E64                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003E69                 jnz     short loc_3E60
.text:0000000000003E6B
.text:0000000000003E6B loc_3E6B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003E6B                 jmp     version_etc_arn
.text:0000000000003E6B ; } // starts at 3E50
.text:0000000000003E6B version_etc_ar  endp
.text:0000000000003E6B
.text:0000000000003E70
.text:0000000000003E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E70
.text:0000000000003E70 ; Attributes: info_from_lumina
.text:0000000000003E70
.text:0000000000003E70 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003E70                 public version_etc_va
.text:0000000000003E70 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000003E70                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000003E70
.text:0000000000003E70 authtab         = qword ptr -68h
.text:0000000000003E70 var_10          = qword ptr -10h
.text:0000000000003E70
.text:0000000000003E70 ; __unwind {
.text:0000000000003E70                 sub     rsp, 68h
.text:0000000000003E74                 mov     r10, r8
.text:0000000000003E77                 xor     r9d, r9d
.text:0000000000003E7A                 mov     rax, fs:28h
.text:0000000000003E83                 mov     [rsp+68h+var_10], rax
.text:0000000000003E88                 xor     eax, eax
.text:0000000000003E8A                 mov     r8, rsp
.text:0000000000003E8D                 nop     dword ptr [rax]
.text:0000000000003E90
.text:0000000000003E90 loc_3E90:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003E90                 mov     eax, [r10]
.text:0000000000003E93                 cmp     eax, 2Fh ; '/'
.text:0000000000003E96                 ja      short loc_3EDA
.text:0000000000003E98                 mov     r11d, eax
.text:0000000000003E9B                 add     r11, [r10+10h]
.text:0000000000003E9F                 add     eax, 8
.text:0000000000003EA2                 mov     [r10], eax
.text:0000000000003EA5
.text:0000000000003EA5 loc_3EA5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003EA5                 mov     rax, [r11]
.text:0000000000003EA8                 test    rax, rax
.text:0000000000003EAB                 mov     [r8+r9*8], rax
.text:0000000000003EAF                 jz      short loc_3EBB
.text:0000000000003EB1                 add     r9, 1
.text:0000000000003EB5                 cmp     r9, 0Ah
.text:0000000000003EB9                 jnz     short loc_3E90
.text:0000000000003EBB
.text:0000000000003EBB loc_3EBB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003EBB                 call    version_etc_arn
.text:0000000000003EC0                 mov     rax, [rsp+68h+var_10]
.text:0000000000003EC5                 xor     rax, fs:28h
.text:0000000000003ECE                 jnz     short loc_3ED5
.text:0000000000003ED0                 add     rsp, 68h
.text:0000000000003ED4                 retn
.text:0000000000003ED5 ; ---------------------------------------------------------------------------
.text:0000000000003ED5
.text:0000000000003ED5 loc_3ED5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003ED5                 call    ___stack_chk_fail
.text:0000000000003EDA ; ---------------------------------------------------------------------------
.text:0000000000003EDA
.text:0000000000003EDA loc_3EDA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003EDA                 mov     r11, [r10+8]
.text:0000000000003EDE                 lea     rax, [r11+8]
.text:0000000000003EE2                 mov     [r10+8], rax
.text:0000000000003EE6                 jmp     short loc_3EA5
.text:0000000000003EE6 ; } // starts at 3E70
.text:0000000000003EE6 version_etc_va  endp
.text:0000000000003EE6
.text:0000000000003EE6 ; ---------------------------------------------------------------------------
.text:0000000000003EE8                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0 ; Attributes: info_from_lumina
.text:0000000000003EF0
.text:0000000000003EF0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003EF0                 public version_etc
.text:0000000000003EF0 version_etc     proc near
.text:0000000000003EF0
.text:0000000000003EF0 var_C0          = dword ptr -0C0h
.text:0000000000003EF0 var_B8          = qword ptr -0B8h
.text:0000000000003EF0 var_B0          = qword ptr -0B0h
.text:0000000000003EF0 var_A8          = byte ptr -0A8h
.text:0000000000003EF0 var_50          = qword ptr -50h
.text:0000000000003EF0 var_48          = byte ptr -48h
.text:0000000000003EF0 var_28          = qword ptr -28h
.text:0000000000003EF0 var_20          = qword ptr -20h
.text:0000000000003EF0 arg_0           = byte ptr  8
.text:0000000000003EF0
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 push    rbp
.text:0000000000003EF1                 push    rbx
.text:0000000000003EF2                 mov     r10d, 20h ; ' '
.text:0000000000003EF8                 xor     r11d, r11d
.text:0000000000003EFB                 sub     rsp, 0B8h
.text:0000000000003F02                 mov     rax, fs:28h
.text:0000000000003F0B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003F10                 xor     eax, eax
.text:0000000000003F12                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003F1A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000003F22                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000003F2A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000003F2F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000003F37                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000003F3F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000003F44                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000003F4C                 xor     r9d, r9d
.text:0000000000003F4F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000003F54                 mov     rbp, rax
.text:0000000000003F57                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003F60
.text:0000000000003F60 loc_3F60:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000003F60                 cmp     r10d, 2Fh ; '/'
.text:0000000000003F64                 ja      short loc_3FBC
.text:0000000000003F66                 mov     eax, r10d
.text:0000000000003F69                 mov     r11d, 1
.text:0000000000003F6F                 add     r10d, 8
.text:0000000000003F73                 add     rax, rbp
.text:0000000000003F76
.text:0000000000003F76 loc_3F76:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000003F76                 mov     rax, [rax]
.text:0000000000003F79                 test    rax, rax
.text:0000000000003F7C                 mov     [r8+r9*8], rax
.text:0000000000003F80                 jz      short loc_3F8C
.text:0000000000003F82                 add     r9, 1
.text:0000000000003F86                 cmp     r9, 0Ah
.text:0000000000003F8A                 jnz     short loc_3F60
.text:0000000000003F8C
.text:0000000000003F8C loc_3F8C:                               ; CODE XREF: version_etc+90↑j
.text:0000000000003F8C                 test    r11b, r11b
.text:0000000000003F8F                 jnz     short loc_3FB5
.text:0000000000003F91
.text:0000000000003F91 loc_3F91:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000003F91                 call    version_etc_arn
.text:0000000000003F96                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000003F9B                 xor     rax, fs:28h
.text:0000000000003FA4                 jnz     short loc_3FB0
.text:0000000000003FA6                 add     rsp, 0B8h
.text:0000000000003FAD                 pop     rbx
.text:0000000000003FAE                 pop     rbp
.text:0000000000003FAF                 retn
.text:0000000000003FB0 ; ---------------------------------------------------------------------------
.text:0000000000003FB0
.text:0000000000003FB0 loc_3FB0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000003FB0                 call    ___stack_chk_fail
.text:0000000000003FB5 ; ---------------------------------------------------------------------------
.text:0000000000003FB5
.text:0000000000003FB5 loc_3FB5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000003FB5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000003FBA                 jmp     short loc_3F91
.text:0000000000003FBC ; ---------------------------------------------------------------------------
.text:0000000000003FBC
.text:0000000000003FBC loc_3FBC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000003FBC                 mov     rax, rbx
.text:0000000000003FBF                 add     rbx, 8
.text:0000000000003FC3                 jmp     short loc_3F76
.text:0000000000003FC3 ; } // starts at 3EF0
.text:0000000000003FC3 version_etc     endp
.text:0000000000003FC3
.text:0000000000003FC3 ; ---------------------------------------------------------------------------
.text:0000000000003FC5                 align 10h
.text:0000000000003FD0
.text:0000000000003FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FD0
.text:0000000000003FD0 ; Attributes: info_from_lumina
.text:0000000000003FD0
.text:0000000000003FD0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000003FD0                 public emit_bug_reporting_address
.text:0000000000003FD0 emit_bug_reporting_address proc near
.text:0000000000003FD0 ; __unwind {
.text:0000000000003FD0                 push    rbx
.text:0000000000003FD1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000003FD8                 mov     edx, 5          ; category
.text:0000000000003FDD                 xor     edi, edi        ; domainname
.text:0000000000003FDF                 call    _dcgettext
.text:0000000000003FE4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000003FEB                 mov     rsi, rax
.text:0000000000003FEE                 mov     edi, 1
.text:0000000000003FF3                 xor     eax, eax
.text:0000000000003FF5                 call    ___printf_chk
.text:0000000000003FFA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004001                 mov     edx, 5          ; category
.text:0000000000004006                 xor     edi, edi        ; domainname
.text:0000000000004008                 call    _dcgettext
.text:000000000000400D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004014                 lea     rdx, unk_46E1
.text:000000000000401B                 mov     rsi, rax
.text:000000000000401E                 mov     edi, 1
.text:0000000000004023                 xor     eax, eax
.text:0000000000004025                 call    ___printf_chk
.text:000000000000402A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004031                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004038                 xor     edi, edi        ; domainname
.text:000000000000403A                 mov     edx, 5          ; category
.text:000000000000403F                 call    _dcgettext
.text:0000000000004044                 mov     rsi, rbx        ; stream
.text:0000000000004047                 mov     rdi, rax        ; s
.text:000000000000404A                 pop     rbx
.text:000000000000404B                 jmp     _fputs_unlocked
.text:000000000000404B ; } // starts at 3FD0
.text:000000000000404B emit_bug_reporting_address endp
.text:000000000000404B
.text:0000000000004050
.text:0000000000004050 ; =============== S U B R O U T I N E =======================================
.text:0000000000004050
.text:0000000000004050
.text:0000000000004050                 public xmalloc
.text:0000000000004050 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004050                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004050 ; __unwind {
.text:0000000000004050                 push    rbx
.text:0000000000004051                 mov     rbx, rdi
.text:0000000000004054                 call    _malloc
.text:0000000000004059                 test    rax, rax
.text:000000000000405C                 jnz     short loc_4063
.text:000000000000405E                 test    rbx, rbx
.text:0000000000004061                 jnz     short loc_4065
.text:0000000000004063
.text:0000000000004063 loc_4063:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004063                 pop     rbx
.text:0000000000004064                 retn
.text:0000000000004065 ; ---------------------------------------------------------------------------
.text:0000000000004065
.text:0000000000004065 loc_4065:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004065                 call    xalloc_die
.text:0000000000004065 ; } // starts at 4050
.text:0000000000004065 xmalloc         endp
.text:0000000000004065
.text:0000000000004065 ; ---------------------------------------------------------------------------
.text:000000000000406A                 align 10h
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070 ; Attributes: info_from_lumina
.text:0000000000004070
.text:0000000000004070 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004070                 public xnmalloc
.text:0000000000004070 xnmalloc        proc near
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 mov     rax, rdi
.text:0000000000004073                 mul     rsi
.text:0000000000004076                 mov     rdi, rax
.text:0000000000004079                 seto    al
.text:000000000000407C                 test    rdi, rdi
.text:000000000000407F                 js      short loc_408B
.text:0000000000004081                 movzx   eax, al
.text:0000000000004084                 test    rax, rax
.text:0000000000004087                 jnz     short loc_408B
.text:0000000000004089                 jmp     short xmalloc
.text:000000000000408B ; ---------------------------------------------------------------------------
.text:000000000000408B
.text:000000000000408B loc_408B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000408B                                         ; xnmalloc+17↑j
.text:000000000000408B                 sub     rsp, 8
.text:000000000000408F                 call    xalloc_die
.text:000000000000408F ; } // starts at 4070
.text:000000000000408F xnmalloc        endp
.text:000000000000408F
.text:000000000000408F ; ---------------------------------------------------------------------------
.text:0000000000004094                 align 20h
.text:00000000000040A0
.text:00000000000040A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040A0
.text:00000000000040A0
.text:00000000000040A0                 public xcharalloc
.text:00000000000040A0 xcharalloc      proc near
.text:00000000000040A0 ; __unwind {
.text:00000000000040A0                 jmp     short xmalloc
.text:00000000000040A0 ; } // starts at 40A0
.text:00000000000040A0 xcharalloc      endp
.text:00000000000040A0
.text:00000000000040A0 ; ---------------------------------------------------------------------------
.text:00000000000040A2                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0 ; Attributes: info_from_lumina
.text:00000000000040B0
.text:00000000000040B0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000040B0                 public xrealloc
.text:00000000000040B0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000040B0                                         ; quotearg_n_options+182↑p ...
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 test    rsi, rsi
.text:00000000000040B3                 push    rbx
.text:00000000000040B4                 mov     rbx, rsi
.text:00000000000040B7                 jnz     short loc_40BE
.text:00000000000040B9                 test    rdi, rdi
.text:00000000000040BC                 jnz     short loc_40D8
.text:00000000000040BE
.text:00000000000040BE loc_40BE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000040BE                 mov     rsi, rbx        ; size
.text:00000000000040C1                 call    _realloc
.text:00000000000040C6                 test    rax, rax
.text:00000000000040C9                 jnz     short loc_40D0
.text:00000000000040CB                 test    rbx, rbx
.text:00000000000040CE                 jnz     short loc_40E1
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000040D0                 pop     rbx
.text:00000000000040D1                 retn
.text:00000000000040D1 ; ---------------------------------------------------------------------------
.text:00000000000040D2                 align 8
.text:00000000000040D8
.text:00000000000040D8 loc_40D8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000040D8                 call    _free
.text:00000000000040DD                 xor     eax, eax
.text:00000000000040DF                 pop     rbx
.text:00000000000040E0                 retn
.text:00000000000040E1 ; ---------------------------------------------------------------------------
.text:00000000000040E1
.text:00000000000040E1 loc_40E1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000040E1                 call    xalloc_die
.text:00000000000040E1 ; } // starts at 40B0
.text:00000000000040E1 xrealloc        endp
.text:00000000000040E1
.text:00000000000040E1 ; ---------------------------------------------------------------------------
.text:00000000000040E6                 align 10h
.text:00000000000040F0
.text:00000000000040F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040F0
.text:00000000000040F0 ; Attributes: info_from_lumina
.text:00000000000040F0
.text:00000000000040F0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000040F0                 public xnrealloc
.text:00000000000040F0 xnrealloc       proc near
.text:00000000000040F0 ; __unwind {
.text:00000000000040F0                 mov     rax, rsi
.text:00000000000040F3                 mul     rdx
.text:00000000000040F6                 mov     rsi, rax
.text:00000000000040F9                 seto    al
.text:00000000000040FC                 test    rsi, rsi
.text:00000000000040FF                 js      short loc_410B
.text:0000000000004101                 movzx   eax, al
.text:0000000000004104                 test    rax, rax
.text:0000000000004107                 jnz     short loc_410B
.text:0000000000004109                 jmp     short xrealloc
.text:000000000000410B ; ---------------------------------------------------------------------------
.text:000000000000410B
.text:000000000000410B loc_410B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000410B                                         ; xnrealloc+17↑j
.text:000000000000410B                 sub     rsp, 8
.text:000000000000410F                 call    xalloc_die
.text:000000000000410F ; } // starts at 40F0
.text:000000000000410F xnrealloc       endp
.text:000000000000410F
.text:000000000000410F ; ---------------------------------------------------------------------------
.text:0000000000004114                 align 20h
.text:0000000000004120
.text:0000000000004120 ; =============== S U B R O U T I N E =======================================
.text:0000000000004120
.text:0000000000004120 ; Attributes: info_from_lumina
.text:0000000000004120
.text:0000000000004120 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004120                 public x2nrealloc
.text:0000000000004120 x2nrealloc      proc near
.text:0000000000004120 ; __unwind {
.text:0000000000004120                 test    rdi, rdi
.text:0000000000004123                 mov     r9, rdx
.text:0000000000004126                 mov     rcx, [rsi]
.text:0000000000004129                 jz      short loc_4160
.text:000000000000412B                 xor     edx, edx
.text:000000000000412D                 mov     rax, 5555555555555554h
.text:0000000000004137                 div     r9
.text:000000000000413A                 cmp     rax, rcx
.text:000000000000413D                 jbe     short loc_417B
.text:000000000000413F                 mov     rax, rcx
.text:0000000000004142                 shr     rax, 1
.text:0000000000004145                 lea     rcx, [rax+rcx+1]
.text:000000000000414A
.text:000000000000414A loc_414A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000414A                 mov     [rsi], rcx
.text:000000000000414D                 imul    rcx, r9
.text:0000000000004151                 mov     rsi, rcx
.text:0000000000004154                 jmp     xrealloc
.text:0000000000004154 ; ---------------------------------------------------------------------------
.text:0000000000004159                 align 20h
.text:0000000000004160
.text:0000000000004160 loc_4160:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004160                 test    rcx, rcx
.text:0000000000004163                 jz      short loc_4188
.text:0000000000004165
.text:0000000000004165 loc_4165:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004165                 mov     rax, rcx
.text:0000000000004168                 mul     r9
.text:000000000000416B                 seto    dl
.text:000000000000416E                 test    rax, rax
.text:0000000000004171                 movzx   edx, dl
.text:0000000000004174                 js      short loc_417B
.text:0000000000004176                 test    rdx, rdx
.text:0000000000004179                 jz      short loc_414A
.text:000000000000417B
.text:000000000000417B loc_417B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000417B                                         ; x2nrealloc+54↑j
.text:000000000000417B                 sub     rsp, 8
.text:000000000000417F                 call    xalloc_die
.text:000000000000417F ; ---------------------------------------------------------------------------
.text:0000000000004184                 align 8
.text:0000000000004188
.text:0000000000004188 loc_4188:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004188                 xor     edx, edx
.text:000000000000418A                 mov     eax, 80h
.text:000000000000418F                 xor     r8d, r8d
.text:0000000000004192                 div     r9
.text:0000000000004195                 test    rax, rax
.text:0000000000004198                 setz    r8b
.text:000000000000419C                 lea     rcx, [r8+rax]
.text:00000000000041A0                 jmp     short loc_4165
.text:00000000000041A0 ; } // starts at 4120
.text:00000000000041A0 x2nrealloc      endp
.text:00000000000041A0
.text:00000000000041A0 ; ---------------------------------------------------------------------------
.text:00000000000041A2                 align 10h
.text:00000000000041B0
.text:00000000000041B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041B0
.text:00000000000041B0 ; Attributes: info_from_lumina
.text:00000000000041B0
.text:00000000000041B0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000041B0                 public x2realloc
.text:00000000000041B0 x2realloc       proc near
.text:00000000000041B0 ; __unwind {
.text:00000000000041B0                 test    rdi, rdi
.text:00000000000041B3                 mov     rax, [rsi]
.text:00000000000041B6                 jz      short loc_41E0
.text:00000000000041B8                 mov     rdx, 5555555555555553h
.text:00000000000041C2                 cmp     rax, rdx
.text:00000000000041C5                 ja      short loc_41F1
.text:00000000000041C7                 mov     rdx, rax
.text:00000000000041CA                 shr     rdx, 1
.text:00000000000041CD                 lea     rax, [rdx+rax+1]
.text:00000000000041D2
.text:00000000000041D2 loc_41D2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000041D2                 mov     [rsi], rax
.text:00000000000041D5                 mov     rsi, rax
.text:00000000000041D8                 jmp     xrealloc
.text:00000000000041D8 ; ---------------------------------------------------------------------------
.text:00000000000041DD                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000041E0                 test    rax, rax
.text:00000000000041E3                 mov     edx, 80h
.text:00000000000041E8                 cmovz   rax, rdx
.text:00000000000041EC                 test    rax, rax
.text:00000000000041EF                 jns     short loc_41D2
.text:00000000000041F1
.text:00000000000041F1 loc_41F1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000041F1                 sub     rsp, 8
.text:00000000000041F5                 call    xalloc_die
.text:00000000000041F5 ; } // starts at 41B0
.text:00000000000041F5 x2realloc       endp
.text:00000000000041F5
.text:00000000000041F5 ; ---------------------------------------------------------------------------
.text:00000000000041FA                 align 20h
.text:0000000000004200
.text:0000000000004200 ; =============== S U B R O U T I N E =======================================
.text:0000000000004200
.text:0000000000004200
.text:0000000000004200 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004200                 public xzalloc
.text:0000000000004200 xzalloc         proc near
.text:0000000000004200 ; __unwind {
.text:0000000000004200                 push    rbx
.text:0000000000004201                 mov     rbx, rdi
.text:0000000000004204                 call    xmalloc
.text:0000000000004209                 mov     rdx, rbx        ; n
.text:000000000000420C                 xor     esi, esi        ; c
.text:000000000000420E                 mov     rdi, rax        ; s
.text:0000000000004211                 pop     rbx
.text:0000000000004212                 jmp     _memset
.text:0000000000004212 ; } // starts at 4200
.text:0000000000004212 xzalloc         endp
.text:0000000000004212
.text:0000000000004212 ; ---------------------------------------------------------------------------
.text:0000000000004217                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220 ; Attributes: info_from_lumina
.text:0000000000004220
.text:0000000000004220 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004220                 public xcalloc
.text:0000000000004220 xcalloc         proc near
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 mov     rax, rdi
.text:0000000000004223                 sub     rsp, 8
.text:0000000000004227                 mul     rsi
.text:000000000000422A                 seto    dl
.text:000000000000422D                 test    rax, rax
.text:0000000000004230                 js      short loc_4249
.text:0000000000004232                 movzx   edx, dl
.text:0000000000004235                 test    rdx, rdx
.text:0000000000004238                 jnz     short loc_4249
.text:000000000000423A                 call    _calloc
.text:000000000000423F                 test    rax, rax
.text:0000000000004242                 jz      short loc_4249
.text:0000000000004244                 add     rsp, 8
.text:0000000000004248                 retn
.text:0000000000004249 ; ---------------------------------------------------------------------------
.text:0000000000004249
.text:0000000000004249 loc_4249:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004249                                         ; xcalloc+18↑j ...
.text:0000000000004249                 call    xalloc_die
.text:0000000000004249 ; } // starts at 4220
.text:0000000000004249 xcalloc         endp
.text:0000000000004249
.text:0000000000004249 ; ---------------------------------------------------------------------------
.text:000000000000424E                 align 10h
.text:0000000000004250
.text:0000000000004250 ; =============== S U B R O U T I N E =======================================
.text:0000000000004250
.text:0000000000004250 ; Attributes: info_from_lumina
.text:0000000000004250
.text:0000000000004250 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004250                 public xmemdup
.text:0000000000004250 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004250                                         ; xstrdup+11↓j
.text:0000000000004250 ; __unwind {
.text:0000000000004250                 push    rbp
.text:0000000000004251                 push    rbx
.text:0000000000004252                 mov     rbp, rdi
.text:0000000000004255                 mov     rdi, rsi
.text:0000000000004258                 mov     rbx, rsi
.text:000000000000425B                 sub     rsp, 8
.text:000000000000425F                 call    xmalloc
.text:0000000000004264                 add     rsp, 8
.text:0000000000004268                 mov     rdx, rbx        ; n
.text:000000000000426B                 mov     rsi, rbp        ; src
.text:000000000000426E                 pop     rbx
.text:000000000000426F                 pop     rbp
.text:0000000000004270                 mov     rdi, rax        ; dest
.text:0000000000004273                 jmp     _memcpy
.text:0000000000004273 ; } // starts at 4250
.text:0000000000004273 xmemdup         endp
.text:0000000000004273
.text:0000000000004273 ; ---------------------------------------------------------------------------
.text:0000000000004278                 align 20h
.text:0000000000004280
.text:0000000000004280 ; =============== S U B R O U T I N E =======================================
.text:0000000000004280
.text:0000000000004280
.text:0000000000004280 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004280                 public xstrdup
.text:0000000000004280 xstrdup         proc near
.text:0000000000004280 ; __unwind {
.text:0000000000004280                 push    rbx
.text:0000000000004281                 mov     rbx, rdi
.text:0000000000004284                 call    _strlen
.text:0000000000004289                 mov     rdi, rbx        ; src
.text:000000000000428C                 lea     rsi, [rax+1]    ; n
.text:0000000000004290                 pop     rbx
.text:0000000000004291                 jmp     short xmemdup
.text:0000000000004291 ; } // starts at 4280
.text:0000000000004291 xstrdup         endp
.text:0000000000004291
.text:0000000000004291 ; ---------------------------------------------------------------------------
.text:0000000000004293                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0 ; Attributes: noreturn info_from_lumina
.text:00000000000042A0
.text:00000000000042A0 ; void __cdecl xalloc_die()
.text:00000000000042A0                 public xalloc_die
.text:00000000000042A0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3276↑p
.text:00000000000042A0                                         ; xmalloc:loc_4065↑p ...
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000042A7                 sub     rsp, 8
.text:00000000000042AB                 mov     edx, 5          ; category
.text:00000000000042B0                 xor     edi, edi        ; domainname
.text:00000000000042B2                 call    _dcgettext
.text:00000000000042B7                 mov     edi, cs:exit_failure ; status
.text:00000000000042BD                 lea     rdx, format+4   ; format
.text:00000000000042C4                 mov     rcx, rax
.text:00000000000042C7                 xor     esi, esi        ; errnum
.text:00000000000042C9                 xor     eax, eax
.text:00000000000042CB                 call    _error
.text:00000000000042D0                 call    _abort
.text:00000000000042D0 ; } // starts at 42A0
.text:00000000000042D0 xalloc_die      endp
.text:00000000000042D0
.text:00000000000042D0 ; ---------------------------------------------------------------------------
.text:00000000000042D5                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000042E0                 public rpl_mbrtowc
.text:00000000000042E0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000042E0
.text:00000000000042E0 pwc             = dword ptr -34h
.text:00000000000042E0 var_30          = qword ptr -30h
.text:00000000000042E0
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 push    r13
.text:00000000000042E2                 push    r12
.text:00000000000042E4                 mov     r13, rsi
.text:00000000000042E7                 push    rbp
.text:00000000000042E8                 push    rbx
.text:00000000000042E9                 mov     rbx, rdi
.text:00000000000042EC                 mov     r12, rdx
.text:00000000000042EF                 sub     rsp, 18h
.text:00000000000042F3                 mov     rax, fs:28h
.text:00000000000042FC                 mov     [rsp+38h+var_30], rax
.text:0000000000004301                 xor     eax, eax
.text:0000000000004303                 lea     rax, [rsp+38h+pwc]
.text:0000000000004308                 test    rdi, rdi
.text:000000000000430B                 cmovz   rbx, rax
.text:000000000000430F                 mov     rdi, rbx        ; pwc
.text:0000000000004312                 call    _mbrtowc
.text:0000000000004317                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000431B                 mov     rbp, rax
.text:000000000000431E                 jbe     short loc_4340
.text:0000000000004320                 test    r12, r12
.text:0000000000004323                 jz      short loc_4340
.text:0000000000004325                 xor     edi, edi
.text:0000000000004327                 call    hard_locale
.text:000000000000432C                 test    al, al
.text:000000000000432E                 jnz     short loc_4340
.text:0000000000004330                 movzx   eax, byte ptr [r13+0]
.text:0000000000004335                 mov     ebp, 1
.text:000000000000433A                 mov     [rbx], eax
.text:000000000000433C                 nop     dword ptr [rax+00h]
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004340                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004340                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004345                 xor     rdx, fs:28h
.text:000000000000434E                 mov     rax, rbp
.text:0000000000004351                 jnz     short loc_435E
.text:0000000000004353                 add     rsp, 18h
.text:0000000000004357                 pop     rbx
.text:0000000000004358                 pop     rbp
.text:0000000000004359                 pop     r12
.text:000000000000435B                 pop     r13
.text:000000000000435D                 retn
.text:000000000000435E ; ---------------------------------------------------------------------------
.text:000000000000435E
.text:000000000000435E loc_435E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000435E                 call    ___stack_chk_fail
.text:000000000000435E ; } // starts at 42E0
.text:000000000000435E rpl_mbrtowc     endp
.text:000000000000435E
.text:000000000000435E ; ---------------------------------------------------------------------------
.text:0000000000004363                 align 10h
.text:0000000000004370
.text:0000000000004370 ; =============== S U B R O U T I N E =======================================
.text:0000000000004370
.text:0000000000004370 ; Attributes: info_from_lumina
.text:0000000000004370
.text:0000000000004370 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004370                 public close_stream
.text:0000000000004370 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004370                                         ; close_stdout+33↑p
.text:0000000000004370 ; __unwind {
.text:0000000000004370                 push    r12
.text:0000000000004372                 push    rbp
.text:0000000000004373                 mov     rbp, rdi
.text:0000000000004376                 push    rbx
.text:0000000000004377                 call    ___fpending
.text:000000000000437C                 mov     ebx, [rbp+0]
.text:000000000000437F                 mov     rdi, rbp        ; stream
.text:0000000000004382                 mov     r12, rax
.text:0000000000004385                 call    rpl_fclose
.text:000000000000438A                 and     ebx, 20h
.text:000000000000438D                 test    ebx, ebx
.text:000000000000438F                 jnz     short loc_43A8
.text:0000000000004391                 test    eax, eax
.text:0000000000004393                 jz      short loc_439F
.text:0000000000004395                 test    r12, r12
.text:0000000000004398                 mov     eax, 0FFFFFFFFh
.text:000000000000439D                 jz      short loc_43D8
.text:000000000000439F
.text:000000000000439F loc_439F:                               ; CODE XREF: close_stream+23↑j
.text:000000000000439F                 pop     rbx
.text:00000000000043A0                 pop     rbp
.text:00000000000043A1                 pop     r12
.text:00000000000043A3                 retn
.text:00000000000043A3 ; ---------------------------------------------------------------------------
.text:00000000000043A4                 align 8
.text:00000000000043A8
.text:00000000000043A8 loc_43A8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000043A8                 test    eax, eax
.text:00000000000043AA                 jnz     short loc_43C8
.text:00000000000043AC                 call    ___errno_location
.text:00000000000043B1                 mov     dword ptr [rax], 0
.text:00000000000043B7                 mov     eax, 0FFFFFFFFh
.text:00000000000043BC                 pop     rbx
.text:00000000000043BD                 pop     rbp
.text:00000000000043BE                 pop     r12
.text:00000000000043C0                 retn
.text:00000000000043C0 ; ---------------------------------------------------------------------------
.text:00000000000043C1                 align 8
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000043C8                 pop     rbx
.text:00000000000043C9                 mov     eax, 0FFFFFFFFh
.text:00000000000043CE                 pop     rbp
.text:00000000000043CF                 pop     r12
.text:00000000000043D1                 retn
.text:00000000000043D1 ; ---------------------------------------------------------------------------
.text:00000000000043D2                 align 8
.text:00000000000043D8
.text:00000000000043D8 loc_43D8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000043D8                 call    ___errno_location
.text:00000000000043DD                 cmp     dword ptr [rax], 9
.text:00000000000043E0                 pop     rbx
.text:00000000000043E1                 pop     rbp
.text:00000000000043E2                 pop     r12
.text:00000000000043E4                 setnz   al
.text:00000000000043E7                 movzx   eax, al
.text:00000000000043EA                 neg     eax
.text:00000000000043EC                 retn
.text:00000000000043EC ; } // starts at 4370
.text:00000000000043EC close_stream    endp
.text:00000000000043EC
.text:00000000000043EC ; ---------------------------------------------------------------------------
.text:00000000000043ED                 align 10h
.text:00000000000043F0
.text:00000000000043F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043F0
.text:00000000000043F0
.text:00000000000043F0                 public hard_locale
.text:00000000000043F0 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:00000000000043F0 ; __unwind {
.text:00000000000043F0                 sub     rsp, 8
.text:00000000000043F4                 xor     esi, esi        ; locale
.text:00000000000043F6                 call    _setlocale
.text:00000000000043FB                 mov     rdx, rax
.text:00000000000043FE                 mov     eax, 1
.text:0000000000004403                 test    rdx, rdx
.text:0000000000004406                 jz      short loc_4425
.text:0000000000004408                 lea     rdi, aC         ; "C"
.text:000000000000440F                 mov     ecx, 2
.text:0000000000004414                 mov     rsi, rdx
.text:0000000000004417                 repe cmpsb
.text:0000000000004419                 setnbe  cl
.text:000000000000441C                 sbb     cl, 0
.text:000000000000441F                 xor     eax, eax
.text:0000000000004421                 test    cl, cl
.text:0000000000004423                 jnz     short loc_4430
.text:0000000000004425
.text:0000000000004425 loc_4425:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004425                 add     rsp, 8
.text:0000000000004429                 retn
.text:0000000000004429 ; ---------------------------------------------------------------------------
.text:000000000000442A                 align 10h
.text:0000000000004430
.text:0000000000004430 loc_4430:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004430                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004437                 mov     ecx, 6
.text:000000000000443C                 mov     rsi, rdx
.text:000000000000443F                 repe cmpsb
.text:0000000000004441                 setnbe  al
.text:0000000000004444                 sbb     al, 0
.text:0000000000004446                 test    al, al
.text:0000000000004448                 setnz   al
.text:000000000000444B                 add     rsp, 8
.text:000000000000444F                 retn
.text:000000000000444F ; } // starts at 43F0
.text:000000000000444F hard_locale     endp
.text:000000000000444F
.text:0000000000004450
.text:0000000000004450 ; =============== S U B R O U T I N E =======================================
.text:0000000000004450
.text:0000000000004450
.text:0000000000004450                 public locale_charset
.text:0000000000004450 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004450 ; __unwind {
.text:0000000000004450                 sub     rsp, 8
.text:0000000000004454                 mov     edi, 0Eh        ; item
.text:0000000000004459                 call    _nl_langinfo
.text:000000000000445E                 test    rax, rax
.text:0000000000004461                 jz      short loc_4480
.text:0000000000004463                 cmp     byte ptr [rax], 0
.text:0000000000004466                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000446D                 cmovz   rax, rdx
.text:0000000000004471                 add     rsp, 8
.text:0000000000004475                 retn
.text:0000000000004475 ; ---------------------------------------------------------------------------
.text:0000000000004476                 align 20h
.text:0000000000004480
.text:0000000000004480 loc_4480:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004480                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004487                 add     rsp, 8
.text:000000000000448B                 retn
.text:000000000000448B ; } // starts at 4450
.text:000000000000448B locale_charset  endp
.text:000000000000448B
.text:000000000000448B ; ---------------------------------------------------------------------------
.text:000000000000448C                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004490                 public rpl_fclose
.text:0000000000004490 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 push    r12
.text:0000000000004492                 push    rbp
.text:0000000000004493                 push    rbx
.text:0000000000004494                 mov     rbx, rdi
.text:0000000000004497                 call    _fileno
.text:000000000000449C                 test    eax, eax
.text:000000000000449E                 mov     rdi, rbx        ; fp
.text:00000000000044A1                 js      short loc_44F7
.text:00000000000044A3                 call    ___freading
.text:00000000000044A8                 test    eax, eax
.text:00000000000044AA                 jnz     short loc_44D8
.text:00000000000044AC
.text:00000000000044AC loc_44AC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000044AC                 mov     rdi, rbx        ; stream
.text:00000000000044AF                 call    rpl_fflush
.text:00000000000044B4                 test    eax, eax
.text:00000000000044B6                 jz      short loc_44F4
.text:00000000000044B8                 call    ___errno_location
.text:00000000000044BD                 mov     r12d, [rax]
.text:00000000000044C0                 mov     rdi, rbx        ; stream
.text:00000000000044C3                 mov     rbp, rax
.text:00000000000044C6                 call    _fclose
.text:00000000000044CB                 test    r12d, r12d
.text:00000000000044CE                 jnz     short loc_4500
.text:00000000000044D0
.text:00000000000044D0 loc_44D0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000044D0                 pop     rbx
.text:00000000000044D1                 pop     rbp
.text:00000000000044D2                 pop     r12
.text:00000000000044D4                 retn
.text:00000000000044D4 ; ---------------------------------------------------------------------------
.text:00000000000044D5                 align 8
.text:00000000000044D8
.text:00000000000044D8 loc_44D8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000044D8                 mov     rdi, rbx        ; stream
.text:00000000000044DB                 call    _fileno
.text:00000000000044E0                 xor     esi, esi        ; offset
.text:00000000000044E2                 mov     edx, 1          ; whence
.text:00000000000044E7                 mov     edi, eax        ; fd
.text:00000000000044E9                 call    _lseek
.text:00000000000044EE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000044F2                 jnz     short loc_44AC
.text:00000000000044F4
.text:00000000000044F4 loc_44F4:                               ; CODE XREF: rpl_fclose+26↑j
.text:00000000000044F4                 mov     rdi, rbx        ; stream
.text:00000000000044F7
.text:00000000000044F7 loc_44F7:                               ; CODE XREF: rpl_fclose+11↑j
.text:00000000000044F7                 pop     rbx
.text:00000000000044F8                 pop     rbp
.text:00000000000044F9                 pop     r12
.text:00000000000044FB                 jmp     _fclose
.text:0000000000004500 ; ---------------------------------------------------------------------------
.text:0000000000004500
.text:0000000000004500 loc_4500:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004500                 mov     [rbp+0], r12d
.text:0000000000004504                 mov     eax, 0FFFFFFFFh
.text:0000000000004509                 jmp     short loc_44D0
.text:0000000000004509 ; } // starts at 4490
.text:0000000000004509 rpl_fclose      endp
.text:0000000000004509
.text:0000000000004509 ; ---------------------------------------------------------------------------
.text:000000000000450B                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004510                 public rpl_fflush
.text:0000000000004510 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 test    rdi, rdi
.text:0000000000004513                 push    rbx
.text:0000000000004514                 mov     rbx, rdi
.text:0000000000004517                 jz      short loc_452A
.text:0000000000004519                 call    ___freading
.text:000000000000451E                 test    eax, eax
.text:0000000000004520                 jz      short loc_452A
.text:0000000000004522                 test    dword ptr [rbx], 100h
.text:0000000000004528                 jnz     short loc_4538
.text:000000000000452A
.text:000000000000452A loc_452A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000452A                                         ; rpl_fflush+10↑j
.text:000000000000452A                 mov     rdi, rbx        ; stream
.text:000000000000452D                 pop     rbx
.text:000000000000452E                 jmp     _fflush
.text:000000000000452E ; ---------------------------------------------------------------------------
.text:0000000000004533                 align 8
.text:0000000000004538
.text:0000000000004538 loc_4538:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004538                 mov     rdi, rbx
.text:000000000000453B                 mov     edx, 1
.text:0000000000004540                 xor     esi, esi
.text:0000000000004542                 call    rpl_fseeko
.text:0000000000004547                 mov     rdi, rbx        ; stream
.text:000000000000454A                 pop     rbx
.text:000000000000454B                 jmp     _fflush
.text:000000000000454B ; } // starts at 4510
.text:000000000000454B rpl_fflush      endp
.text:000000000000454B
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550 ; Attributes: info_from_lumina
.text:0000000000004550
.text:0000000000004550 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004550                 public rpl_fseeko
.text:0000000000004550 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 mov     rax, [rdi+8]
.text:0000000000004554                 cmp     [rdi+10h], rax
.text:0000000000004558                 jz      short loc_4560
.text:000000000000455A
.text:000000000000455A loc_455A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000455A                                         ; rpl_fseeko+1F↓j
.text:000000000000455A                 jmp     _fseeko
.text:000000000000455A ; ---------------------------------------------------------------------------
.text:000000000000455F                 align 20h
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004560                 mov     rax, [rdi+20h]
.text:0000000000004564                 cmp     [rdi+28h], rax
.text:0000000000004568                 jnz     short loc_455A
.text:000000000000456A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000456F                 jnz     short loc_455A
.text:0000000000004571                 push    r12
.text:0000000000004573                 push    rbp
.text:0000000000004574                 mov     r12d, edx
.text:0000000000004577                 push    rbx
.text:0000000000004578                 mov     rbp, rsi
.text:000000000000457B                 mov     rbx, rdi
.text:000000000000457E                 call    _fileno
.text:0000000000004583                 mov     edx, r12d       ; whence
.text:0000000000004586                 mov     rsi, rbp        ; offset
.text:0000000000004589                 mov     edi, eax        ; fd
.text:000000000000458B                 call    _lseek
.text:0000000000004590                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004594                 jz      short loc_45A2
.text:0000000000004596                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004599                 mov     [rbx+90h], rax
.text:00000000000045A0                 xor     eax, eax
.text:00000000000045A2
.text:00000000000045A2 loc_45A2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000045A2                 pop     rbx
.text:00000000000045A3                 pop     rbp
.text:00000000000045A4                 pop     r12
.text:00000000000045A6                 retn
.text:00000000000045A6 ; } // starts at 4550
.text:00000000000045A6 rpl_fseeko      endp
.text:00000000000045A6
.text:00000000000045A6 ; ---------------------------------------------------------------------------
.text:00000000000045A7                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0 ; Attributes: info_from_lumina
.text:00000000000045B0
.text:00000000000045B0 ; void _libc_csu_init(void)
.text:00000000000045B0                 public __libc_csu_init
.text:00000000000045B0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 push    r15
.text:00000000000045B2                 push    r14
.text:00000000000045B4                 mov     r15, rdx
.text:00000000000045B7                 push    r13
.text:00000000000045B9                 push    r12
.text:00000000000045BB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000045C2                 push    rbp
.text:00000000000045C3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000045CA                 push    rbx
.text:00000000000045CB                 mov     r13d, edi
.text:00000000000045CE                 mov     r14, rsi
.text:00000000000045D1                 sub     rbp, r12
.text:00000000000045D4                 sub     rsp, 8
.text:00000000000045D8                 sar     rbp, 3
.text:00000000000045DC                 call    _init_proc
.text:00000000000045E1                 test    rbp, rbp
.text:00000000000045E4                 jz      short loc_4606
.text:00000000000045E6                 xor     ebx, ebx
.text:00000000000045E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000045F0
.text:00000000000045F0 loc_45F0:                               ; CODE XREF: __libc_csu_init+54↓j
.text:00000000000045F0                 mov     rdx, r15
.text:00000000000045F3                 mov     rsi, r14
.text:00000000000045F6                 mov     edi, r13d
.text:00000000000045F9                 call    ds:(__frame_dummy_init_array_entry - 206BB0h)[r12+rbx*8]
.text:00000000000045FD                 add     rbx, 1
.text:0000000000004601                 cmp     rbp, rbx
.text:0000000000004604                 jnz     short loc_45F0
.text:0000000000004606
.text:0000000000004606 loc_4606:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004606                 add     rsp, 8
.text:000000000000460A                 pop     rbx
.text:000000000000460B                 pop     rbp
.text:000000000000460C                 pop     r12
.text:000000000000460E                 pop     r13
.text:0000000000004610                 pop     r14
.text:0000000000004612                 pop     r15
.text:0000000000004614                 retn
.text:0000000000004614 ; } // starts at 45B0
.text:0000000000004614 __libc_csu_init endp
.text:0000000000004614
.text:0000000000004614 ; ---------------------------------------------------------------------------
.text:0000000000004615                 align 20h
.text:0000000000004620
.text:0000000000004620 ; =============== S U B R O U T I N E =======================================
.text:0000000000004620
.text:0000000000004620
.text:0000000000004620 ; void _libc_csu_fini(void)
.text:0000000000004620                 public __libc_csu_fini
.text:0000000000004620 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004620 ; __unwind {
.text:0000000000004620                 rep retn
.text:0000000000004620 ; } // starts at 4620
.text:0000000000004620 __libc_csu_fini endp
.text:0000000000004620
.text:0000000000004620 ; ---------------------------------------------------------------------------
.text:0000000000004622                 align 10h
.text:0000000000004630
.text:0000000000004630 ; =============== S U B R O U T I N E =======================================
.text:0000000000004630
.text:0000000000004630
.text:0000000000004630 atexit          proc near               ; CODE XREF: main+4A↑p
.text:0000000000004630 ; __unwind {
.text:0000000000004630                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004637                 xor     esi, esi        ; obj
.text:0000000000004639                 jmp     ___cxa_atexit
.text:0000000000004639 ; } // starts at 4630
.text:0000000000004639 atexit          endp
.text:0000000000004639
.text:0000000000004639 _text           ends
.text:0000000000004639
LOAD:000000000000463E ; ===========================================================================
LOAD:000000000000463E
LOAD:000000000000463E ; Segment type: Pure code
LOAD:000000000000463E ; Segment permissions: Read/Execute
LOAD:000000000000463E LOAD            segment byte public 'CODE' use64
LOAD:000000000000463E                 assume cs:LOAD
LOAD:000000000000463E                 ;org 463Eh
LOAD:000000000000463E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000463E                 align 20h
LOAD:000000000000463E LOAD            ends
LOAD:000000000000463E
.fini:0000000000004640 ; ===========================================================================
.fini:0000000000004640
.fini:0000000000004640 ; Segment type: Pure code
.fini:0000000000004640 ; Segment permissions: Read/Execute
.fini:0000000000004640 _fini           segment dword public 'CODE' use64
.fini:0000000000004640                 assume cs:_fini
.fini:0000000000004640                 ;org 4640h
.fini:0000000000004640                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004640
.fini:0000000000004640 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004640
.fini:0000000000004640
.fini:0000000000004640                 public _term_proc
.fini:0000000000004640 _term_proc      proc near
.fini:0000000000004640                 sub     rsp, 8          ; _fini
.fini:0000000000004644                 add     rsp, 8
.fini:0000000000004648                 retn
.fini:0000000000004648 _term_proc      endp
.fini:0000000000004648
.fini:0000000000004648 _fini           ends
.fini:0000000000004648
LOAD:0000000000004649 ; ===========================================================================
LOAD:0000000000004649
LOAD:0000000000004649 ; Segment type: Pure code
LOAD:0000000000004649 ; Segment permissions: Read/Execute
LOAD:0000000000004649 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004649                 assume cs:LOAD
LOAD:0000000000004649                 ;org 4649h
LOAD:0000000000004649                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004649                 align 20h
LOAD:0000000000004649 LOAD            ends
LOAD:0000000000004649
.rodata:0000000000004660 ; ===========================================================================
.rodata:0000000000004660
.rodata:0000000000004660 ; Segment type: Pure data
.rodata:0000000000004660 ; Segment permissions: Read
.rodata:0000000000004660 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004660                 assume cs:_rodata
.rodata:0000000000004660                 ;org 4660h
.rodata:0000000000004660                 public _IO_stdin_used
.rodata:0000000000004660 _IO_stdin_used  db    1
.rodata:0000000000004661                 db    0
.rodata:0000000000004662                 db    2
.rodata:0000000000004663                 db    0
.rodata:0000000000004664 aHostid         db 'hostid',0           ; DATA XREF: main+6A↑o
.rodata:0000000000004664                                         ; usage+E1↑o ...
.rodata:000000000000466B asc_466B        db '[',0                ; DATA XREF: usage+CE↑o
.rodata:000000000000466D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+FE↑o
.rodata:000000000000467D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000467D                                         ; DATA XREF: usage+12A↑o
.rodata:000000000000467D                                         ; usage+21C↑o ...
.rodata:0000000000004693 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+136↑o
.rodata:000000000000469D aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+142↑o
.rodata:00000000000046AC aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+D5↑o
.rodata:00000000000046B6 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+10A↑o
.rodata:00000000000046C0 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+C2↑o
.rodata:00000000000046CA ; const char aSOnlineHelpS[]
.rodata:00000000000046CA aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+18A↑o
.rodata:00000000000046CA                 db '%s online help: <%s>',0Ah,0
.rodata:00000000000046E1 unk_46E1        db  47h ; G             ; DATA XREF: main+63↑o
.rodata:00000000000046E1                                         ; usage+1A6↑o ...
.rodata:00000000000046E2                 db  4Eh ; N
.rodata:00000000000046E3                 db  55h ; U
.rodata:00000000000046E4                 db  20h
.rodata:00000000000046E5 ; const char domainname[]
.rodata:00000000000046E5 domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:00000000000046E5                                         ; main+37↑o ...
.rodata:00000000000046EF ; const char s2[]
.rodata:00000000000046EF s2              db 'en_',0              ; DATA XREF: usage+1CD↑o
.rodata:00000000000046EF                                         ; usage+28E↑o
.rodata:00000000000046F3 ; const char aFullDocumentat[]
.rodata:00000000000046F3 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:00000000000046F3                                         ; DATA XREF: usage:loc_1879↑o
.rodata:00000000000046F3                                         ; usage:loc_1936↑o
.rodata:000000000000470E ; const char dirname[]
.rodata:000000000000470E dirname         db '/usr/local/share/locale',0
.rodata:000000000000470E                                         ; DATA XREF: main+24↑o
.rodata:0000000000004726 aJimMeyering    db 'Jim Meyering',0     ; DATA XREF: main+4F↑o
.rodata:0000000000004733 ; const char msgid[]
.rodata:0000000000004733 msgid           db 'extra operand %s',0 ; DATA XREF: main+C7↑o
.rodata:0000000000004744 a08x            db '%08x',0Ah,0         ; DATA XREF: main+A0↑o
.rodata:000000000000474A                 align 10h
.rodata:0000000000004750 ; const char aTrySHelpForMor[]
.rodata:0000000000004750 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004750                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004777                 align 8
.rodata:0000000000004778 ; const char aUsageSOptionPr[]
.rodata:0000000000004778 aUsageSOptionPr db 'Usage: %s [OPTION]',0Ah
.rodata:0000000000004778                                         ; DATA XREF: usage:loc_16ED↑o
.rodata:0000000000004778                 db 'Print the numeric identifier (in hexadecimal) for the current hos'
.rodata:0000000000004778                 db 't.',0Ah
.rodata:0000000000004778                 db 0Ah,0
.rodata:00000000000047D1                 align 8
.rodata:00000000000047D8 ; const char aHelpDisplayThi[]
.rodata:00000000000047D8 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:00000000000047D8                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004805                 align 8
.rodata:0000000000004808 ; const char aVersionOutputV[]
.rodata:0000000000004808 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004808                                         ; DATA XREF: usage+A9↑o
.rodata:000000000000483E                 align 20h
.rodata:0000000000004840 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004840                                         ; DATA XREF: usage+19F↑o
.rodata:0000000000004840                                         ; usage+203↑o ...
.rodata:0000000000004868 ; const char aReportAnyTrans[]
.rodata:0000000000004868 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004868                                         ; DATA XREF: usage+2F7↑o
.rodata:0000000000004868                 db 'am/>',0Ah,0
.rodata:00000000000048AF                 align 10h
.rodata:00000000000048B0 ; const char aOrAvailableLoc[]
.rodata:00000000000048B0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:00000000000048B0                                         ; DATA XREF: usage:loc_18BE↑o
.rodata:00000000000048E3 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000048E8 ; const char aWriteError[]
.rodata:00000000000048E8 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1A13↑o
.rodata:00000000000048F4 ; const char format[]
.rodata:00000000000048F4 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000048F4                                         ; close_stdout+8F↑o ...
.rodata:00000000000048FB ; const char shortopts[]
.rodata:00000000000048FB shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:00000000000048FB                                         ; parse_gnu_standard_options_only+72↑o
.rodata:00000000000048FD aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000004902 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:000000000000490A                 align 10h
.rodata:0000000000004910 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004910                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004948 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004950 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004954 unk_4954        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004955                 db  80h
.rodata:0000000000004956                 db  98h
.rodata:0000000000004957                 db    0
.rodata:0000000000004958 unk_4958        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004959                 db  80h
.rodata:000000000000495A                 db  99h
.rodata:000000000000495B                 db    0
.rodata:000000000000495C unk_495C        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:000000000000495D                 db    7
.rodata:000000000000495E                 db  65h ; e
.rodata:000000000000495F                 db    0
.rodata:0000000000004960 unk_4960        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004961                 db 0AFh
.rodata:0000000000004962                 db    0
.rodata:0000000000004963 unk_4963        db  22h ; "             ; DATA XREF: gettext_quote:loc_1DC0↑o
.rodata:0000000000004963                                         ; quotearg_buffer_restyled:loc_2B7B↑o ...
.rodata:0000000000004964                 db    0
.rodata:0000000000004965 ; const char asc_4965[2]
.rodata:0000000000004965 asc_4965        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004965                                         ; quotearg_buffer_restyled:loc_1F43↑o ...
.rodata:0000000000004967 ; const char asc_4967[2]
.rodata:0000000000004967 asc_4967        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004967                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004969 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004971 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:0000000000004977 aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C30↓o
.rodata:0000000000004984 aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C38↓o
.rodata:0000000000004984                                         ; .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004991 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004991                                         ; DATA XREF: .data.rel.ro:0000000000206C40↓o
.rodata:00000000000049A5 aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:00000000000049A7 aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:00000000000049AF aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C68↓o
.rodata:00000000000049B7                 align 20h
.rodata:00000000000049C0 jpt_1F21        dd offset loc_2CCA - 49C0h
.rodata:00000000000049C0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000049C0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000049C0                 dd offset loc_1F23 - 49C0h ; jump table for switch statement
.rodata:00000000000049C0                 dd offset loc_2EF8 - 49C0h
.rodata:00000000000049C0                 dd offset loc_2D04 - 49C0h
.rodata:00000000000049C0                 dd offset loc_2AF4 - 49C0h
.rodata:00000000000049C0                 dd offset loc_2B50 - 49C0h
.rodata:00000000000049C0                 dd offset loc_2BA5 - 49C0h
.rodata:00000000000049C0                 dd offset loc_2BEA - 49C0h
.rodata:00000000000049C0                 dd offset loc_2C24 - 49C0h
.rodata:00000000000049C0                 dd offset loc_2C24 - 49C0h
.rodata:00000000000049C0                 dd offset loc_2C24 - 49C0h
.rodata:00000000000049EC jpt_207E        dd offset loc_22A0 - 49ECh, offset def_207E - 49ECh, offset def_207E - 49ECh
.rodata:00000000000049EC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000049EC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset def_207E - 49ECh, offset def_207E - 49ECh ; jump table for switch statement
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset loc_22E0 - 49ECh, offset loc_21E8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_21A8 - 49ECh, offset loc_2370 - 49ECh, offset loc_2360 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2350 - 49ECh, offset loc_2340 - 49ECh, offset def_207E - 49ECh
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset def_207E - 49ECh, offset def_207E - 49ECh
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset def_207E - 49ECh, offset def_207E - 49ECh
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset def_207E - 49ECh, offset def_207E - 49ECh
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset def_207E - 49ECh, offset def_207E - 49ECh
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset def_207E - 49ECh, offset def_207E - 49ECh
.rodata:00000000000049EC                 dd offset def_207E - 49ECh, offset def_207E - 49ECh, offset loc_2330 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2320 - 49ECh, offset loc_2320 - 49ECh, offset loc_22F0 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2320 - 49ECh, offset loc_22C8 - 49ECh, offset loc_2320 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2183 - 49ECh, offset loc_2320 - 49ECh, offset loc_2320 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2320 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_2320 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2320 - 49ECh, offset loc_2320 - 49ECh, offset loc_2320 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2153 - 49ECh, offset def_207E - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_2320 - 49ECh, offset loc_21F8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_2320 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2320 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh, offset loc_22C8 - 49ECh
.rodata:00000000000049EC                 dd offset loc_2083 - 49ECh, offset loc_2320 - 49ECh, offset loc_2083 - 49ECh
.rodata:00000000000049EC                 dd offset loc_22F0 - 49ECh
.rodata:0000000000004BE8 jpt_240A        dd offset loc_2470 - 4BE8h, offset def_240A - 4BE8h, offset def_240A - 4BE8h
.rodata:0000000000004BE8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004BE8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset def_240A - 4BE8h, offset def_240A - 4BE8h ; jump table for switch statement
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset loc_2460 - 4BE8h, offset loc_25B0 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2598 - 4BE8h, offset loc_2448 - 4BE8h, offset loc_2588 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2430 - 4BE8h, offset loc_2570 - 4BE8h, offset def_240A - 4BE8h
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset def_240A - 4BE8h, offset def_240A - 4BE8h
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset def_240A - 4BE8h, offset def_240A - 4BE8h
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset def_240A - 4BE8h, offset def_240A - 4BE8h
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset def_240A - 4BE8h, offset def_240A - 4BE8h
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset def_240A - 4BE8h, offset def_240A - 4BE8h
.rodata:0000000000004BE8                 dd offset def_240A - 4BE8h, offset def_240A - 4BE8h, offset loc_2558 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2540 - 4BE8h, offset loc_2540 - 4BE8h, offset loc_2528 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2540 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2540 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2180 - 4BE8h, offset loc_2540 - 4BE8h, offset loc_2540 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2540 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2540 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2540 - 4BE8h, offset loc_2540 - 4BE8h, offset loc_2540 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2150 - 4BE8h, offset def_240A - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2540 - 4BE8h, offset loc_2410 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2540 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2540 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h, offset loc_2510 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2080 - 4BE8h, offset loc_2540 - 4BE8h, offset loc_2080 - 4BE8h
.rodata:0000000000004BE8                 dd offset loc_2528 - 4BE8h
.rodata:0000000000004DE4                 align 20h
.rodata:0000000000004E00                 public quoting_style_vals
.rodata:0000000000004E00 quoting_style_vals db    0
.rodata:0000000000004E01                 db    0
.rodata:0000000000004E02                 db    0
.rodata:0000000000004E03                 db    0
.rodata:0000000000004E04                 db    1
.rodata:0000000000004E05                 db    0
.rodata:0000000000004E06                 db    0
.rodata:0000000000004E07                 db    0
.rodata:0000000000004E08                 db    2
.rodata:0000000000004E09                 db    0
.rodata:0000000000004E0A                 db    0
.rodata:0000000000004E0B                 db    0
.rodata:0000000000004E0C                 db    3
.rodata:0000000000004E0D                 db    0
.rodata:0000000000004E0E                 db    0
.rodata:0000000000004E0F                 db    0
.rodata:0000000000004E10                 db    4
.rodata:0000000000004E11                 db    0
.rodata:0000000000004E12                 db    0
.rodata:0000000000004E13                 db    0
.rodata:0000000000004E14                 db    5
.rodata:0000000000004E15                 db    0
.rodata:0000000000004E16                 db    0
.rodata:0000000000004E17                 db    0
.rodata:0000000000004E18                 db    6
.rodata:0000000000004E19                 db    0
.rodata:0000000000004E1A                 db    0
.rodata:0000000000004E1B                 db    0
.rodata:0000000000004E1C                 db    7
.rodata:0000000000004E1D                 db    0
.rodata:0000000000004E1E                 db    0
.rodata:0000000000004E1F                 db    0
.rodata:0000000000004E20                 db    8
.rodata:0000000000004E21                 db    0
.rodata:0000000000004E22                 db    0
.rodata:0000000000004E23                 db    0
.rodata:0000000000004E24                 db    9
.rodata:0000000000004E25                 db    0
.rodata:0000000000004E26                 db    0
.rodata:0000000000004E27                 db    0
.rodata:0000000000004E28 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000004E34 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:0000000000004E3B ; const char aC_0[]
.rodata:0000000000004E3B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3A6C↑o
.rodata:0000000000004E3F ; const char aWrittenByS[]
.rodata:0000000000004E3F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:0000000000004E3F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:0000000000004E4F ; const char aWrittenBySAndS[]
.rodata:0000000000004E4F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:0000000000004E4F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000004E66 ; const char aWrittenBySSAnd[]
.rodata:0000000000004E66 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000004E66                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000004E82 ; const char aReportBugsToS[]
.rodata:0000000000004E82 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000004E82                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000004E97 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000004E97                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000004EAD ; const char aSHomePageS[]
.rodata:0000000000004EAD aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000004EAD                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000004EC1                 align 8
.rodata:0000000000004EC8 ; const char aLicenseGplv3Gn[]
.rodata:0000000000004EC8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000004EC8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000004EC8                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000004EC8                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000004EC8                 db '.',0Ah
.rodata:0000000000004EC8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000004EC8                 db 0Ah,0
.rodata:0000000000004F94                 align 8
.rodata:0000000000004F98 ; const char aWrittenBySSSAn[]
.rodata:0000000000004F98 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004F98                                         ; DATA XREF: version_etc_arn:loc_3CC0↑o
.rodata:0000000000004F98                 db 'and %s.',0Ah,0
.rodata:0000000000004FB8 ; const char aWrittenBySSSSA[]
.rodata:0000000000004FB8 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004FB8                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000004FB8                 db '%s, and %s.',0Ah,0
.rodata:0000000000004FDC                 align 20h
.rodata:0000000000004FE0 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000004FE0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000004FE0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000004FE0                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005008 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005008 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005008                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005008                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005034                 align 8
.rodata:0000000000005038 ; const char aWrittenBySSSSS[]
.rodata:0000000000005038 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005038                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005038                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005038                 db 'and %s.',0Ah,0
.rodata:0000000000005068 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005068 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005068                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005068                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005068                 db '%s, and %s.',0Ah,0
.rodata:000000000000509C                 align 20h
.rodata:00000000000050A0 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000050A0                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:00000000000050A0                 db '%s, %s, %s, %s,',0Ah
.rodata:00000000000050A0                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000050DC                 align 20h
.rodata:00000000000050E0 ; const char aGeneralHelpUsi[]
.rodata:00000000000050E0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000050E0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000050E0                 db 0
.rodata:0000000000005121                 align 8
.rodata:0000000000005128 jpt_3AD4        dd offset loc_3B56 - 5128h
.rodata:0000000000005128                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005128                                         ; version_etc_arn+9D↑r
.rodata:0000000000005128                 dd offset loc_3BE8 - 5128h ; jump table for switch statement
.rodata:0000000000005128                 dd offset loc_3C28 - 5128h
.rodata:0000000000005128                 dd offset loc_3C70 - 5128h
.rodata:0000000000005128                 dd offset loc_3CC0 - 5128h
.rodata:0000000000005128                 dd offset loc_3D18 - 5128h
.rodata:0000000000005128                 dd offset loc_3D48 - 5128h
.rodata:0000000000005128                 dd offset loc_3DB0 - 5128h
.rodata:0000000000005128                 dd offset loc_3AE0 - 5128h
.rodata:0000000000005128                 dd offset loc_3B90 - 5128h
.rodata:0000000000005150                 align 20h
.rodata:0000000000005160                 public version_etc_copyright
.rodata:0000000000005160 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005160                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000518F ; const char aMemoryExhauste[]
.rodata:000000000000518F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:00000000000051A0 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:00000000000051A2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4430↑o
.rodata:00000000000051A8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000051A8                                         ; locale_charset:loc_4480↑o
.rodata:00000000000051A8 _rodata         ends
.rodata:00000000000051A8
LOAD:00000000000051AE ; ===========================================================================
LOAD:00000000000051AE
LOAD:00000000000051AE ; Segment type: Pure code
LOAD:00000000000051AE ; Segment permissions: Read/Execute
LOAD:00000000000051AE LOAD            segment byte public 'CODE' use64
LOAD:00000000000051AE                 assume cs:LOAD
LOAD:00000000000051AE                 ;org 51AEh
LOAD:00000000000051AE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000051AE                 align 10h
LOAD:00000000000051AE LOAD            ends
LOAD:00000000000051AE
.eh_frame_hdr:00000000000051B0 ; ===========================================================================
.eh_frame_hdr:00000000000051B0
.eh_frame_hdr:00000000000051B0 ; Segment type: Pure data
.eh_frame_hdr:00000000000051B0 ; Segment permissions: Read
.eh_frame_hdr:00000000000051B0 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:00000000000051B0                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00000000000051B0                 ;org 51B0h
.eh_frame_hdr:00000000000051B0 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:00000000000051B1                 db  1Bh
.eh_frame_hdr:00000000000051B2                 db    3
.eh_frame_hdr:00000000000051B3                 db  3Bh ; ;
.eh_frame_hdr:00000000000051B4                 db  4Ch ; L
.eh_frame_hdr:00000000000051B5                 db    2
.eh_frame_hdr:00000000000051B6                 db    0
.eh_frame_hdr:00000000000051B7                 db    0
.eh_frame_hdr:00000000000051B8                 db  48h ; H
.eh_frame_hdr:00000000000051B9                 db    0
.eh_frame_hdr:00000000000051BA                 db    0
.eh_frame_hdr:00000000000051BB                 db    0
.eh_frame_hdr:00000000000051BC                 db  30h ; 0
.eh_frame_hdr:00000000000051BD                 db 0C0h
.eh_frame_hdr:00000000000051BE                 db 0FFh
.eh_frame_hdr:00000000000051BF                 db 0FFh
.eh_frame_hdr:00000000000051C0                 db  98h
.eh_frame_hdr:00000000000051C1                 db    2
.eh_frame_hdr:00000000000051C2                 db    0
.eh_frame_hdr:00000000000051C3                 db    0
.eh_frame_hdr:00000000000051C4                 db 0C0h
.eh_frame_hdr:00000000000051C5                 db 0C2h
.eh_frame_hdr:00000000000051C6                 db 0FFh
.eh_frame_hdr:00000000000051C7                 db 0FFh
.eh_frame_hdr:00000000000051C8                 db 0C0h
.eh_frame_hdr:00000000000051C9                 db    2
.eh_frame_hdr:00000000000051CA                 db    0
.eh_frame_hdr:00000000000051CB                 db    0
.eh_frame_hdr:00000000000051CC                 db 0D0h
.eh_frame_hdr:00000000000051CD                 db 0C2h
.eh_frame_hdr:00000000000051CE                 db 0FFh
.eh_frame_hdr:00000000000051CF                 db 0FFh
.eh_frame_hdr:00000000000051D0                 db    4
.eh_frame_hdr:00000000000051D1                 db    3
.eh_frame_hdr:00000000000051D2                 db    0
.eh_frame_hdr:00000000000051D3                 db    0
.eh_frame_hdr:00000000000051D4                 db 0D0h
.eh_frame_hdr:00000000000051D5                 db 0C3h
.eh_frame_hdr:00000000000051D6                 db 0FFh
.eh_frame_hdr:00000000000051D7                 db 0FFh
.eh_frame_hdr:00000000000051D8                 db  68h ; h
.eh_frame_hdr:00000000000051D9                 db    2
.eh_frame_hdr:00000000000051DA                 db    0
.eh_frame_hdr:00000000000051DB                 db    0
.eh_frame_hdr:00000000000051DC                 db 0E0h
.eh_frame_hdr:00000000000051DD                 db 0C4h
.eh_frame_hdr:00000000000051DE                 db 0FFh
.eh_frame_hdr:00000000000051DF                 db 0FFh
.eh_frame_hdr:00000000000051E0                 db 0D8h
.eh_frame_hdr:00000000000051E1                 db    2
.eh_frame_hdr:00000000000051E2                 db    0
.eh_frame_hdr:00000000000051E3                 db    0
.eh_frame_hdr:00000000000051E4                 db    0
.eh_frame_hdr:00000000000051E5                 db 0C8h
.eh_frame_hdr:00000000000051E6                 db 0FFh
.eh_frame_hdr:00000000000051E7                 db 0FFh
.eh_frame_hdr:00000000000051E8                 db  40h ; @
.eh_frame_hdr:00000000000051E9                 db    3
.eh_frame_hdr:00000000000051EA                 db    0
.eh_frame_hdr:00000000000051EB                 db    0
.eh_frame_hdr:00000000000051EC                 db  10h
.eh_frame_hdr:00000000000051ED                 db 0C8h
.eh_frame_hdr:00000000000051EE                 db 0FFh
.eh_frame_hdr:00000000000051EF                 db 0FFh
.eh_frame_hdr:00000000000051F0                 db  54h ; T
.eh_frame_hdr:00000000000051F1                 db    3
.eh_frame_hdr:00000000000051F2                 db    0
.eh_frame_hdr:00000000000051F3                 db    0
.eh_frame_hdr:00000000000051F4                 db  20h
.eh_frame_hdr:00000000000051F5                 db 0C8h
.eh_frame_hdr:00000000000051F6                 db 0FFh
.eh_frame_hdr:00000000000051F7                 db 0FFh
.eh_frame_hdr:00000000000051F8                 db  68h ; h
.eh_frame_hdr:00000000000051F9                 db    3
.eh_frame_hdr:00000000000051FA                 db    0
.eh_frame_hdr:00000000000051FB                 db    0
.eh_frame_hdr:00000000000051FC                 db 0D0h
.eh_frame_hdr:00000000000051FD                 db 0C8h
.eh_frame_hdr:00000000000051FE                 db 0FFh
.eh_frame_hdr:00000000000051FF                 db 0FFh
.eh_frame_hdr:0000000000005200                 db  98h
.eh_frame_hdr:0000000000005201                 db    3
.eh_frame_hdr:0000000000005202                 db    0
.eh_frame_hdr:0000000000005203                 db    0
.eh_frame_hdr:0000000000005204                 db  10h
.eh_frame_hdr:0000000000005205                 db 0CAh
.eh_frame_hdr:0000000000005206                 db 0FFh
.eh_frame_hdr:0000000000005207                 db 0FFh
.eh_frame_hdr:0000000000005208                 db 0D4h
.eh_frame_hdr:0000000000005209                 db    3
.eh_frame_hdr:000000000000520A                 db    0
.eh_frame_hdr:000000000000520B                 db    0
.eh_frame_hdr:000000000000520C                 db  50h ; P
.eh_frame_hdr:000000000000520D                 db 0CBh
.eh_frame_hdr:000000000000520E                 db 0FFh
.eh_frame_hdr:000000000000520F                 db 0FFh
.eh_frame_hdr:0000000000005210                 db  20h
.eh_frame_hdr:0000000000005211                 db    4
.eh_frame_hdr:0000000000005212                 db    0
.eh_frame_hdr:0000000000005213                 db    0
.eh_frame_hdr:0000000000005214                 db 0F0h
.eh_frame_hdr:0000000000005215                 db 0CBh
.eh_frame_hdr:0000000000005216                 db 0FFh
.eh_frame_hdr:0000000000005217                 db 0FFh
.eh_frame_hdr:0000000000005218                 db  40h ; @
.eh_frame_hdr:0000000000005219                 db    4
.eh_frame_hdr:000000000000521A                 db    0
.eh_frame_hdr:000000000000521B                 db    0
.eh_frame_hdr:000000000000521C                 db 0E0h
.eh_frame_hdr:000000000000521D                 db 0CCh
.eh_frame_hdr:000000000000521E                 db 0FFh
.eh_frame_hdr:000000000000521F                 db 0FFh
.eh_frame_hdr:0000000000005220                 db  84h
.eh_frame_hdr:0000000000005221                 db    4
.eh_frame_hdr:0000000000005222                 db    0
.eh_frame_hdr:0000000000005223                 db    0
.eh_frame_hdr:0000000000005224                 db  20h
.eh_frame_hdr:0000000000005225                 db 0DFh
.eh_frame_hdr:0000000000005226                 db 0FFh
.eh_frame_hdr:0000000000005227                 db 0FFh
.eh_frame_hdr:0000000000005228                 db 0FCh
.eh_frame_hdr:0000000000005229                 db    4
.eh_frame_hdr:000000000000522A                 db    0
.eh_frame_hdr:000000000000522B                 db    0
.eh_frame_hdr:000000000000522C                 db 0D0h
.eh_frame_hdr:000000000000522D                 db 0E0h
.eh_frame_hdr:000000000000522E                 db 0FFh
.eh_frame_hdr:000000000000522F                 db 0FFh
.eh_frame_hdr:0000000000005230                 db  68h ; h
.eh_frame_hdr:0000000000005231                 db    5
.eh_frame_hdr:0000000000005232                 db    0
.eh_frame_hdr:0000000000005233                 db    0
.eh_frame_hdr:0000000000005234                 db  10h
.eh_frame_hdr:0000000000005235                 db 0E1h
.eh_frame_hdr:0000000000005236                 db 0FFh
.eh_frame_hdr:0000000000005237                 db 0FFh
.eh_frame_hdr:0000000000005238                 db  94h
.eh_frame_hdr:0000000000005239                 db    5
.eh_frame_hdr:000000000000523A                 db    0
.eh_frame_hdr:000000000000523B                 db    0
.eh_frame_hdr:000000000000523C                 db  30h ; 0
.eh_frame_hdr:000000000000523D                 db 0E1h
.eh_frame_hdr:000000000000523E                 db 0FFh
.eh_frame_hdr:000000000000523F                 db 0FFh
.eh_frame_hdr:0000000000005240                 db 0A8h
.eh_frame_hdr:0000000000005241                 db    5
.eh_frame_hdr:0000000000005242                 db    0
.eh_frame_hdr:0000000000005243                 db    0
.eh_frame_hdr:0000000000005244                 db  50h ; P
.eh_frame_hdr:0000000000005245                 db 0E1h
.eh_frame_hdr:0000000000005246                 db 0FFh
.eh_frame_hdr:0000000000005247                 db 0FFh
.eh_frame_hdr:0000000000005248                 db 0BCh
.eh_frame_hdr:0000000000005249                 db    5
.eh_frame_hdr:000000000000524A                 db    0
.eh_frame_hdr:000000000000524B                 db    0
.eh_frame_hdr:000000000000524C                 db  90h
.eh_frame_hdr:000000000000524D                 db 0E1h
.eh_frame_hdr:000000000000524E                 db 0FFh
.eh_frame_hdr:000000000000524F                 db 0FFh
.eh_frame_hdr:0000000000005250                 db 0D0h
.eh_frame_hdr:0000000000005251                 db    5
.eh_frame_hdr:0000000000005252                 db    0
.eh_frame_hdr:0000000000005253                 db    0
.eh_frame_hdr:0000000000005254                 db 0B0h
.eh_frame_hdr:0000000000005255                 db 0E1h
.eh_frame_hdr:0000000000005256                 db 0FFh
.eh_frame_hdr:0000000000005257                 db 0FFh
.eh_frame_hdr:0000000000005258                 db 0E4h
.eh_frame_hdr:0000000000005259                 db    5
.eh_frame_hdr:000000000000525A                 db    0
.eh_frame_hdr:000000000000525B                 db    0
.eh_frame_hdr:000000000000525C                 db 0E0h
.eh_frame_hdr:000000000000525D                 db 0E1h
.eh_frame_hdr:000000000000525E                 db 0FFh
.eh_frame_hdr:000000000000525F                 db 0FFh
.eh_frame_hdr:0000000000005260                 db 0F8h
.eh_frame_hdr:0000000000005261                 db    5
.eh_frame_hdr:0000000000005262                 db    0
.eh_frame_hdr:0000000000005263                 db    0
.eh_frame_hdr:0000000000005264                 db  60h ; `
.eh_frame_hdr:0000000000005265                 db 0E2h
.eh_frame_hdr:0000000000005266                 db 0FFh
.eh_frame_hdr:0000000000005267                 db 0FFh
.eh_frame_hdr:0000000000005268                 db  4Ch ; L
.eh_frame_hdr:0000000000005269                 db    6
.eh_frame_hdr:000000000000526A                 db    0
.eh_frame_hdr:000000000000526B                 db    0
.eh_frame_hdr:000000000000526C                 db  50h ; P
.eh_frame_hdr:000000000000526D                 db 0E3h
.eh_frame_hdr:000000000000526E                 db 0FFh
.eh_frame_hdr:000000000000526F                 db 0FFh
.eh_frame_hdr:0000000000005270                 db 0B8h
.eh_frame_hdr:0000000000005271                 db    6
.eh_frame_hdr:0000000000005272                 db    0
.eh_frame_hdr:0000000000005273                 db    0
.eh_frame_hdr:0000000000005274                 db  60h ; `
.eh_frame_hdr:0000000000005275                 db 0E3h
.eh_frame_hdr:0000000000005276                 db 0FFh
.eh_frame_hdr:0000000000005277                 db 0FFh
.eh_frame_hdr:0000000000005278                 db 0CCh
.eh_frame_hdr:0000000000005279                 db    6
.eh_frame_hdr:000000000000527A                 db    0
.eh_frame_hdr:000000000000527B                 db    0
.eh_frame_hdr:000000000000527C                 db    0
.eh_frame_hdr:000000000000527D                 db 0E4h
.eh_frame_hdr:000000000000527E                 db 0FFh
.eh_frame_hdr:000000000000527F                 db 0FFh
.eh_frame_hdr:0000000000005280                 db 0F8h
.eh_frame_hdr:0000000000005281                 db    6
.eh_frame_hdr:0000000000005282                 db    0
.eh_frame_hdr:0000000000005283                 db    0
.eh_frame_hdr:0000000000005284                 db  20h
.eh_frame_hdr:0000000000005285                 db 0E4h
.eh_frame_hdr:0000000000005286                 db 0FFh
.eh_frame_hdr:0000000000005287                 db 0FFh
.eh_frame_hdr:0000000000005288                 db  0Ch
.eh_frame_hdr:0000000000005289                 db    7
.eh_frame_hdr:000000000000528A                 db    0
.eh_frame_hdr:000000000000528B                 db    0
.eh_frame_hdr:000000000000528C                 db  30h ; 0
.eh_frame_hdr:000000000000528D                 db 0E4h
.eh_frame_hdr:000000000000528E                 db 0FFh
.eh_frame_hdr:000000000000528F                 db 0FFh
.eh_frame_hdr:0000000000005290                 db  20h
.eh_frame_hdr:0000000000005291                 db    7
.eh_frame_hdr:0000000000005292                 db    0
.eh_frame_hdr:0000000000005293                 db    0
.eh_frame_hdr:0000000000005294                 db  50h ; P
.eh_frame_hdr:0000000000005295                 db 0E4h
.eh_frame_hdr:0000000000005296                 db 0FFh
.eh_frame_hdr:0000000000005297                 db 0FFh
.eh_frame_hdr:0000000000005298                 db  34h ; 4
.eh_frame_hdr:0000000000005299                 db    7
.eh_frame_hdr:000000000000529A                 db    0
.eh_frame_hdr:000000000000529B                 db    0
.eh_frame_hdr:000000000000529C                 db  70h ; p
.eh_frame_hdr:000000000000529D                 db 0E4h
.eh_frame_hdr:000000000000529E                 db 0FFh
.eh_frame_hdr:000000000000529F                 db 0FFh
.eh_frame_hdr:00000000000052A0                 db  48h ; H
.eh_frame_hdr:00000000000052A1                 db    7
.eh_frame_hdr:00000000000052A2                 db    0
.eh_frame_hdr:00000000000052A3                 db    0
.eh_frame_hdr:00000000000052A4                 db    0
.eh_frame_hdr:00000000000052A5                 db 0E5h
.eh_frame_hdr:00000000000052A6                 db 0FFh
.eh_frame_hdr:00000000000052A7                 db 0FFh
.eh_frame_hdr:00000000000052A8                 db  64h ; d
.eh_frame_hdr:00000000000052A9                 db    7
.eh_frame_hdr:00000000000052AA                 db    0
.eh_frame_hdr:00000000000052AB                 db    0
.eh_frame_hdr:00000000000052AC                 db  90h
.eh_frame_hdr:00000000000052AD                 db 0E5h
.eh_frame_hdr:00000000000052AE                 db 0FFh
.eh_frame_hdr:00000000000052AF                 db 0FFh
.eh_frame_hdr:00000000000052B0                 db  80h
.eh_frame_hdr:00000000000052B1                 db    7
.eh_frame_hdr:00000000000052B2                 db    0
.eh_frame_hdr:00000000000052B3                 db    0
.eh_frame_hdr:00000000000052B4                 db 0A0h
.eh_frame_hdr:00000000000052B5                 db 0E5h
.eh_frame_hdr:00000000000052B6                 db 0FFh
.eh_frame_hdr:00000000000052B7                 db 0FFh
.eh_frame_hdr:00000000000052B8                 db  94h
.eh_frame_hdr:00000000000052B9                 db    7
.eh_frame_hdr:00000000000052BA                 db    0
.eh_frame_hdr:00000000000052BB                 db    0
.eh_frame_hdr:00000000000052BC                 db 0B0h
.eh_frame_hdr:00000000000052BD                 db 0E5h
.eh_frame_hdr:00000000000052BE                 db 0FFh
.eh_frame_hdr:00000000000052BF                 db 0FFh
.eh_frame_hdr:00000000000052C0                 db 0A8h
.eh_frame_hdr:00000000000052C1                 db    7
.eh_frame_hdr:00000000000052C2                 db    0
.eh_frame_hdr:00000000000052C3                 db    0
.eh_frame_hdr:00000000000052C4                 db  50h ; P
.eh_frame_hdr:00000000000052C5                 db 0E6h
.eh_frame_hdr:00000000000052C6                 db 0FFh
.eh_frame_hdr:00000000000052C7                 db 0FFh
.eh_frame_hdr:00000000000052C8                 db 0C4h
.eh_frame_hdr:00000000000052C9                 db    7
.eh_frame_hdr:00000000000052CA                 db    0
.eh_frame_hdr:00000000000052CB                 db    0
.eh_frame_hdr:00000000000052CC                 db  60h ; `
.eh_frame_hdr:00000000000052CD                 db 0E6h
.eh_frame_hdr:00000000000052CE                 db 0FFh
.eh_frame_hdr:00000000000052CF                 db 0FFh
.eh_frame_hdr:00000000000052D0                 db 0D8h
.eh_frame_hdr:00000000000052D1                 db    7
.eh_frame_hdr:00000000000052D2                 db    0
.eh_frame_hdr:00000000000052D3                 db    0
.eh_frame_hdr:00000000000052D4                 db  80h
.eh_frame_hdr:00000000000052D5                 db 0E6h
.eh_frame_hdr:00000000000052D6                 db 0FFh
.eh_frame_hdr:00000000000052D7                 db 0FFh
.eh_frame_hdr:00000000000052D8                 db 0ECh
.eh_frame_hdr:00000000000052D9                 db    7
.eh_frame_hdr:00000000000052DA                 db    0
.eh_frame_hdr:00000000000052DB                 db    0
.eh_frame_hdr:00000000000052DC                 db  90h
.eh_frame_hdr:00000000000052DD                 db 0E6h
.eh_frame_hdr:00000000000052DE                 db 0FFh
.eh_frame_hdr:00000000000052DF                 db 0FFh
.eh_frame_hdr:00000000000052E0                 db    0
.eh_frame_hdr:00000000000052E1                 db    8
.eh_frame_hdr:00000000000052E2                 db    0
.eh_frame_hdr:00000000000052E3                 db    0
.eh_frame_hdr:00000000000052E4                 db  20h
.eh_frame_hdr:00000000000052E5                 db 0E7h
.eh_frame_hdr:00000000000052E6                 db 0FFh
.eh_frame_hdr:00000000000052E7                 db 0FFh
.eh_frame_hdr:00000000000052E8                 db  1Ch
.eh_frame_hdr:00000000000052E9                 db    8
.eh_frame_hdr:00000000000052EA                 db    0
.eh_frame_hdr:00000000000052EB                 db    0
.eh_frame_hdr:00000000000052EC                 db 0C0h
.eh_frame_hdr:00000000000052ED                 db 0E7h
.eh_frame_hdr:00000000000052EE                 db 0FFh
.eh_frame_hdr:00000000000052EF                 db 0FFh
.eh_frame_hdr:00000000000052F0                 db  38h ; 8
.eh_frame_hdr:00000000000052F1                 db    8
.eh_frame_hdr:00000000000052F2                 db    0
.eh_frame_hdr:00000000000052F3                 db    0
.eh_frame_hdr:00000000000052F4                 db 0D0h
.eh_frame_hdr:00000000000052F5                 db 0E7h
.eh_frame_hdr:00000000000052F6                 db 0FFh
.eh_frame_hdr:00000000000052F7                 db 0FFh
.eh_frame_hdr:00000000000052F8                 db  4Ch ; L
.eh_frame_hdr:00000000000052F9                 db    8
.eh_frame_hdr:00000000000052FA                 db    0
.eh_frame_hdr:00000000000052FB                 db    0
.eh_frame_hdr:00000000000052FC                 db 0F0h
.eh_frame_hdr:00000000000052FD                 db 0E7h
.eh_frame_hdr:00000000000052FE                 db 0FFh
.eh_frame_hdr:00000000000052FF                 db 0FFh
.eh_frame_hdr:0000000000005300                 db  60h ; `
.eh_frame_hdr:0000000000005301                 db    8
.eh_frame_hdr:0000000000005302                 db    0
.eh_frame_hdr:0000000000005303                 db    0
.eh_frame_hdr:0000000000005304                 db  10h
.eh_frame_hdr:0000000000005305                 db 0E8h
.eh_frame_hdr:0000000000005306                 db 0FFh
.eh_frame_hdr:0000000000005307                 db 0FFh
.eh_frame_hdr:0000000000005308                 db  74h ; t
.eh_frame_hdr:0000000000005309                 db    8
.eh_frame_hdr:000000000000530A                 db    0
.eh_frame_hdr:000000000000530B                 db    0
.eh_frame_hdr:000000000000530C                 db  20h
.eh_frame_hdr:000000000000530D                 db 0E8h
.eh_frame_hdr:000000000000530E                 db 0FFh
.eh_frame_hdr:000000000000530F                 db 0FFh
.eh_frame_hdr:0000000000005310                 db  88h
.eh_frame_hdr:0000000000005311                 db    8
.eh_frame_hdr:0000000000005312                 db    0
.eh_frame_hdr:0000000000005313                 db    0
.eh_frame_hdr:0000000000005314                 db  40h ; @
.eh_frame_hdr:0000000000005315                 db 0E8h
.eh_frame_hdr:0000000000005316                 db 0FFh
.eh_frame_hdr:0000000000005317                 db 0FFh
.eh_frame_hdr:0000000000005318                 db  9Ch
.eh_frame_hdr:0000000000005319                 db    8
.eh_frame_hdr:000000000000531A                 db    0
.eh_frame_hdr:000000000000531B                 db    0
.eh_frame_hdr:000000000000531C                 db  60h ; `
.eh_frame_hdr:000000000000531D                 db 0E8h
.eh_frame_hdr:000000000000531E                 db 0FFh
.eh_frame_hdr:000000000000531F                 db 0FFh
.eh_frame_hdr:0000000000005320                 db 0B0h
.eh_frame_hdr:0000000000005321                 db    8
.eh_frame_hdr:0000000000005322                 db    0
.eh_frame_hdr:0000000000005323                 db    0
.eh_frame_hdr:0000000000005324                 db  80h
.eh_frame_hdr:0000000000005325                 db 0E8h
.eh_frame_hdr:0000000000005326                 db 0FFh
.eh_frame_hdr:0000000000005327                 db 0FFh
.eh_frame_hdr:0000000000005328                 db 0C8h
.eh_frame_hdr:0000000000005329                 db    8
.eh_frame_hdr:000000000000532A                 db    0
.eh_frame_hdr:000000000000532B                 db    0
.eh_frame_hdr:000000000000532C                 db 0A0h
.eh_frame_hdr:000000000000532D                 db 0ECh
.eh_frame_hdr:000000000000532E                 db 0FFh
.eh_frame_hdr:000000000000532F                 db 0FFh
.eh_frame_hdr:0000000000005330                 db 0DCh
.eh_frame_hdr:0000000000005331                 db    9
.eh_frame_hdr:0000000000005332                 db    0
.eh_frame_hdr:0000000000005333                 db    0
.eh_frame_hdr:0000000000005334                 db 0C0h
.eh_frame_hdr:0000000000005335                 db 0ECh
.eh_frame_hdr:0000000000005336                 db 0FFh
.eh_frame_hdr:0000000000005337                 db 0FFh
.eh_frame_hdr:0000000000005338                 db 0F0h
.eh_frame_hdr:0000000000005339                 db    9
.eh_frame_hdr:000000000000533A                 db    0
.eh_frame_hdr:000000000000533B                 db    0
.eh_frame_hdr:000000000000533C                 db  40h ; @
.eh_frame_hdr:000000000000533D                 db 0EDh
.eh_frame_hdr:000000000000533E                 db 0FFh
.eh_frame_hdr:000000000000533F                 db 0FFh
.eh_frame_hdr:0000000000005340                 db  0Ch
.eh_frame_hdr:0000000000005341                 db  0Ah
.eh_frame_hdr:0000000000005342                 db    0
.eh_frame_hdr:0000000000005343                 db    0
.eh_frame_hdr:0000000000005344                 db  20h
.eh_frame_hdr:0000000000005345                 db 0EEh
.eh_frame_hdr:0000000000005346                 db 0FFh
.eh_frame_hdr:0000000000005347                 db 0FFh
.eh_frame_hdr:0000000000005348                 db  38h ; 8
.eh_frame_hdr:0000000000005349                 db  0Ah
.eh_frame_hdr:000000000000534A                 db    0
.eh_frame_hdr:000000000000534B                 db    0
.eh_frame_hdr:000000000000534C                 db 0A0h
.eh_frame_hdr:000000000000534D                 db 0EEh
.eh_frame_hdr:000000000000534E                 db 0FFh
.eh_frame_hdr:000000000000534F                 db 0FFh
.eh_frame_hdr:0000000000005350                 db  58h ; X
.eh_frame_hdr:0000000000005351                 db  0Ah
.eh_frame_hdr:0000000000005352                 db    0
.eh_frame_hdr:0000000000005353                 db    0
.eh_frame_hdr:0000000000005354                 db 0C0h
.eh_frame_hdr:0000000000005355                 db 0EEh
.eh_frame_hdr:0000000000005356                 db 0FFh
.eh_frame_hdr:0000000000005357                 db 0FFh
.eh_frame_hdr:0000000000005358                 db  74h ; t
.eh_frame_hdr:0000000000005359                 db  0Ah
.eh_frame_hdr:000000000000535A                 db    0
.eh_frame_hdr:000000000000535B                 db    0
.eh_frame_hdr:000000000000535C                 db 0F0h
.eh_frame_hdr:000000000000535D                 db 0EEh
.eh_frame_hdr:000000000000535E                 db 0FFh
.eh_frame_hdr:000000000000535F                 db 0FFh
.eh_frame_hdr:0000000000005360                 db  88h
.eh_frame_hdr:0000000000005361                 db  0Ah
.eh_frame_hdr:0000000000005362                 db    0
.eh_frame_hdr:0000000000005363                 db    0
.eh_frame_hdr:0000000000005364                 db    0
.eh_frame_hdr:0000000000005365                 db 0EFh
.eh_frame_hdr:0000000000005366                 db 0FFh
.eh_frame_hdr:0000000000005367                 db 0FFh
.eh_frame_hdr:0000000000005368                 db  9Ch
.eh_frame_hdr:0000000000005369                 db  0Ah
.eh_frame_hdr:000000000000536A                 db    0
.eh_frame_hdr:000000000000536B                 db    0
.eh_frame_hdr:000000000000536C                 db  40h ; @
.eh_frame_hdr:000000000000536D                 db 0EFh
.eh_frame_hdr:000000000000536E                 db 0FFh
.eh_frame_hdr:000000000000536F                 db 0FFh
.eh_frame_hdr:0000000000005370                 db 0C0h
.eh_frame_hdr:0000000000005371                 db  0Ah
.eh_frame_hdr:0000000000005372                 db    0
.eh_frame_hdr:0000000000005373                 db    0
.eh_frame_hdr:0000000000005374                 db  70h ; p
.eh_frame_hdr:0000000000005375                 db 0EFh
.eh_frame_hdr:0000000000005376                 db 0FFh
.eh_frame_hdr:0000000000005377                 db 0FFh
.eh_frame_hdr:0000000000005378                 db 0D4h
.eh_frame_hdr:0000000000005379                 db  0Ah
.eh_frame_hdr:000000000000537A                 db    0
.eh_frame_hdr:000000000000537B                 db    0
.eh_frame_hdr:000000000000537C                 db    0
.eh_frame_hdr:000000000000537D                 db 0F0h
.eh_frame_hdr:000000000000537E                 db 0FFh
.eh_frame_hdr:000000000000537F                 db 0FFh
.eh_frame_hdr:0000000000005380                 db 0ECh
.eh_frame_hdr:0000000000005381                 db  0Ah
.eh_frame_hdr:0000000000005382                 db    0
.eh_frame_hdr:0000000000005383                 db    0
.eh_frame_hdr:0000000000005384                 db  50h ; P
.eh_frame_hdr:0000000000005385                 db 0F0h
.eh_frame_hdr:0000000000005386                 db 0FFh
.eh_frame_hdr:0000000000005387                 db 0FFh
.eh_frame_hdr:0000000000005388                 db    4
.eh_frame_hdr:0000000000005389                 db  0Bh
.eh_frame_hdr:000000000000538A                 db    0
.eh_frame_hdr:000000000000538B                 db    0
.eh_frame_hdr:000000000000538C                 db  70h ; p
.eh_frame_hdr:000000000000538D                 db 0F0h
.eh_frame_hdr:000000000000538E                 db 0FFh
.eh_frame_hdr:000000000000538F                 db 0FFh
.eh_frame_hdr:0000000000005390                 db  20h
.eh_frame_hdr:0000000000005391                 db  0Bh
.eh_frame_hdr:0000000000005392                 db    0
.eh_frame_hdr:0000000000005393                 db    0
.eh_frame_hdr:0000000000005394                 db 0A0h
.eh_frame_hdr:0000000000005395                 db 0F0h
.eh_frame_hdr:0000000000005396                 db 0FFh
.eh_frame_hdr:0000000000005397                 db 0FFh
.eh_frame_hdr:0000000000005398                 db  3Ch ; <
.eh_frame_hdr:0000000000005399                 db  0Bh
.eh_frame_hdr:000000000000539A                 db    0
.eh_frame_hdr:000000000000539B                 db    0
.eh_frame_hdr:000000000000539C                 db 0D0h
.eh_frame_hdr:000000000000539D                 db 0F0h
.eh_frame_hdr:000000000000539E                 db 0FFh
.eh_frame_hdr:000000000000539F                 db 0FFh
.eh_frame_hdr:00000000000053A0                 db  64h ; d
.eh_frame_hdr:00000000000053A1                 db  0Bh
.eh_frame_hdr:00000000000053A2                 db    0
.eh_frame_hdr:00000000000053A3                 db    0
.eh_frame_hdr:00000000000053A4                 db 0F0h
.eh_frame_hdr:00000000000053A5                 db 0F0h
.eh_frame_hdr:00000000000053A6                 db 0FFh
.eh_frame_hdr:00000000000053A7                 db 0FFh
.eh_frame_hdr:00000000000053A8                 db  80h
.eh_frame_hdr:00000000000053A9                 db  0Bh
.eh_frame_hdr:00000000000053AA                 db    0
.eh_frame_hdr:00000000000053AB                 db    0
.eh_frame_hdr:00000000000053AC                 db  30h ; 0
.eh_frame_hdr:00000000000053AD                 db 0F1h
.eh_frame_hdr:00000000000053AE                 db 0FFh
.eh_frame_hdr:00000000000053AF                 db 0FFh
.eh_frame_hdr:00000000000053B0                 db  98h
.eh_frame_hdr:00000000000053B1                 db  0Bh
.eh_frame_hdr:00000000000053B2                 db    0
.eh_frame_hdr:00000000000053B3                 db    0
.eh_frame_hdr:00000000000053B4                 db 0C0h
.eh_frame_hdr:00000000000053B5                 db 0F1h
.eh_frame_hdr:00000000000053B6                 db 0FFh
.eh_frame_hdr:00000000000053B7                 db 0FFh
.eh_frame_hdr:00000000000053B8                 db 0D8h
.eh_frame_hdr:00000000000053B9                 db  0Bh
.eh_frame_hdr:00000000000053BA                 db    0
.eh_frame_hdr:00000000000053BB                 db    0
.eh_frame_hdr:00000000000053BC                 db  40h ; @
.eh_frame_hdr:00000000000053BD                 db 0F2h
.eh_frame_hdr:00000000000053BE                 db 0FFh
.eh_frame_hdr:00000000000053BF                 db 0FFh
.eh_frame_hdr:00000000000053C0                 db  28h ; (
.eh_frame_hdr:00000000000053C1                 db  0Ch
.eh_frame_hdr:00000000000053C2                 db    0
.eh_frame_hdr:00000000000053C3                 db    0
.eh_frame_hdr:00000000000053C4                 db 0A0h
.eh_frame_hdr:00000000000053C5                 db 0F2h
.eh_frame_hdr:00000000000053C6                 db 0FFh
.eh_frame_hdr:00000000000053C7                 db 0FFh
.eh_frame_hdr:00000000000053C8                 db  48h ; H
.eh_frame_hdr:00000000000053C9                 db  0Ch
.eh_frame_hdr:00000000000053CA                 db    0
.eh_frame_hdr:00000000000053CB                 db    0
.eh_frame_hdr:00000000000053CC                 db 0E0h
.eh_frame_hdr:00000000000053CD                 db 0F2h
.eh_frame_hdr:00000000000053CE                 db 0FFh
.eh_frame_hdr:00000000000053CF                 db 0FFh
.eh_frame_hdr:00000000000053D0                 db  68h ; h
.eh_frame_hdr:00000000000053D1                 db  0Ch
.eh_frame_hdr:00000000000053D2                 db    0
.eh_frame_hdr:00000000000053D3                 db    0
.eh_frame_hdr:00000000000053D4                 db  60h ; `
.eh_frame_hdr:00000000000053D5                 db 0F3h
.eh_frame_hdr:00000000000053D6                 db 0FFh
.eh_frame_hdr:00000000000053D7                 db 0FFh
.eh_frame_hdr:00000000000053D8                 db 0A0h
.eh_frame_hdr:00000000000053D9                 db  0Ch
.eh_frame_hdr:00000000000053DA                 db    0
.eh_frame_hdr:00000000000053DB                 db    0
.eh_frame_hdr:00000000000053DC                 db 0A0h
.eh_frame_hdr:00000000000053DD                 db 0F3h
.eh_frame_hdr:00000000000053DE                 db 0FFh
.eh_frame_hdr:00000000000053DF                 db 0FFh
.eh_frame_hdr:00000000000053E0                 db 0C0h
.eh_frame_hdr:00000000000053E1                 db  0Ch
.eh_frame_hdr:00000000000053E2                 db    0
.eh_frame_hdr:00000000000053E3                 db    0
.eh_frame_hdr:00000000000053E4                 db    0
.eh_frame_hdr:00000000000053E5                 db 0F4h
.eh_frame_hdr:00000000000053E6                 db 0FFh
.eh_frame_hdr:00000000000053E7                 db 0FFh
.eh_frame_hdr:00000000000053E8                 db 0F0h
.eh_frame_hdr:00000000000053E9                 db  0Ch
.eh_frame_hdr:00000000000053EA                 db    0
.eh_frame_hdr:00000000000053EB                 db    0
.eh_frame_hdr:00000000000053EC                 db  70h ; p
.eh_frame_hdr:00000000000053ED                 db 0F4h
.eh_frame_hdr:00000000000053EE                 db 0FFh
.eh_frame_hdr:00000000000053EF                 db 0FFh
.eh_frame_hdr:00000000000053F0                 db  38h ; 8
.eh_frame_hdr:00000000000053F1                 db  0Dh
.eh_frame_hdr:00000000000053F2                 db    0
.eh_frame_hdr:00000000000053F3                 db    0
.eh_frame_hdr:00000000000053F4                 db  80h
.eh_frame_hdr:00000000000053F5                 db 0F4h
.eh_frame_hdr:00000000000053F6                 db 0FFh
.eh_frame_hdr:00000000000053F7                 db 0FFh
.eh_frame_hdr:00000000000053F8                 db  50h ; P
.eh_frame_hdr:00000000000053F9                 db  0Dh
.eh_frame_hdr:00000000000053FA                 db    0
.eh_frame_hdr:00000000000053FB                 db    0
.eh_frame_hdr:00000000000053FB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000053FB
LOAD:00000000000053FC ; ===========================================================================
LOAD:00000000000053FC
LOAD:00000000000053FC ; Segment type: Pure code
LOAD:00000000000053FC ; Segment permissions: Read/Execute
LOAD:00000000000053FC LOAD            segment byte public 'CODE' use64
LOAD:00000000000053FC                 assume cs:LOAD
LOAD:00000000000053FC                 ;org 53FCh
LOAD:00000000000053FC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000053FC                 align 20h
LOAD:00000000000053FC LOAD            ends
LOAD:00000000000053FC
.eh_frame:0000000000005400 ; ===========================================================================
.eh_frame:0000000000005400
.eh_frame:0000000000005400 ; Segment type: Pure data
.eh_frame:0000000000005400 ; Segment permissions: Read
.eh_frame:0000000000005400 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005400                 assume cs:_eh_frame
.eh_frame:0000000000005400                 ;org 5400h
.eh_frame:0000000000005400                 db  14h
.eh_frame:0000000000005401                 db    0
.eh_frame:0000000000005402                 db    0
.eh_frame:0000000000005403                 db    0
.eh_frame:0000000000005404                 db    0
.eh_frame:0000000000005405                 db    0
.eh_frame:0000000000005406                 db    0
.eh_frame:0000000000005407                 db    0
.eh_frame:0000000000005408                 db    1
.eh_frame:0000000000005409                 db  7Ah ; z
.eh_frame:000000000000540A                 db  52h ; R
.eh_frame:000000000000540B                 db    0
.eh_frame:000000000000540C                 db    1
.eh_frame:000000000000540D                 db  78h ; x
.eh_frame:000000000000540E                 db  10h
.eh_frame:000000000000540F                 db    1
.eh_frame:0000000000005410                 db  1Bh
.eh_frame:0000000000005411                 db  0Ch
.eh_frame:0000000000005412                 db    7
.eh_frame:0000000000005413                 db    8
.eh_frame:0000000000005414                 db  90h
.eh_frame:0000000000005415                 db    1
.eh_frame:0000000000005416                 db    7
.eh_frame:0000000000005417                 db  10h
.eh_frame:0000000000005418                 db  14h
.eh_frame:0000000000005419                 db    0
.eh_frame:000000000000541A                 db    0
.eh_frame:000000000000541B                 db    0
.eh_frame:000000000000541C                 db  1Ch
.eh_frame:000000000000541D                 db    0
.eh_frame:000000000000541E                 db    0
.eh_frame:000000000000541F                 db    0
.eh_frame:0000000000005420                 db  60h ; `
.eh_frame:0000000000005421                 db 0C1h
.eh_frame:0000000000005422                 db 0FFh
.eh_frame:0000000000005423                 db 0FFh
.eh_frame:0000000000005424                 db  2Bh ; +
.eh_frame:0000000000005425                 db    0
.eh_frame:0000000000005426                 db    0
.eh_frame:0000000000005427                 db    0
.eh_frame:0000000000005428                 db    0
.eh_frame:0000000000005429                 db    0
.eh_frame:000000000000542A                 db    0
.eh_frame:000000000000542B                 db    0
.eh_frame:000000000000542C                 db    0
.eh_frame:000000000000542D                 db    0
.eh_frame:000000000000542E                 db    0
.eh_frame:000000000000542F                 db    0
.eh_frame:0000000000005430                 db  14h
.eh_frame:0000000000005431                 db    0
.eh_frame:0000000000005432                 db    0
.eh_frame:0000000000005433                 db    0
.eh_frame:0000000000005434                 db    0
.eh_frame:0000000000005435                 db    0
.eh_frame:0000000000005436                 db    0
.eh_frame:0000000000005437                 db    0
.eh_frame:0000000000005438                 db    1
.eh_frame:0000000000005439                 db  7Ah ; z
.eh_frame:000000000000543A                 db  52h ; R
.eh_frame:000000000000543B                 db    0
.eh_frame:000000000000543C                 db    1
.eh_frame:000000000000543D                 db  78h ; x
.eh_frame:000000000000543E                 db  10h
.eh_frame:000000000000543F                 db    1
.eh_frame:0000000000005440                 db  1Bh
.eh_frame:0000000000005441                 db  0Ch
.eh_frame:0000000000005442                 db    7
.eh_frame:0000000000005443                 db    8
.eh_frame:0000000000005444                 db  90h
.eh_frame:0000000000005445                 db    1
.eh_frame:0000000000005446                 db    0
.eh_frame:0000000000005447                 db    0
.eh_frame:0000000000005448                 db  24h ; $
.eh_frame:0000000000005449                 db    0
.eh_frame:000000000000544A                 db    0
.eh_frame:000000000000544B                 db    0
.eh_frame:000000000000544C                 db  1Ch
.eh_frame:000000000000544D                 db    0
.eh_frame:000000000000544E                 db    0
.eh_frame:000000000000544F                 db    0
.eh_frame:0000000000005450                 db  90h
.eh_frame:0000000000005451                 db 0BDh
.eh_frame:0000000000005452                 db 0FFh
.eh_frame:0000000000005453                 db 0FFh
.eh_frame:0000000000005454                 db  90h
.eh_frame:0000000000005455                 db    2
.eh_frame:0000000000005456                 db    0
.eh_frame:0000000000005457                 db    0
.eh_frame:0000000000005458                 db    0
.eh_frame:0000000000005459                 db  0Eh
.eh_frame:000000000000545A                 db  10h
.eh_frame:000000000000545B                 db  46h ; F
.eh_frame:000000000000545C                 db  0Eh
.eh_frame:000000000000545D                 db  18h
.eh_frame:000000000000545E                 db  4Ah ; J
.eh_frame:000000000000545F                 db  0Fh
.eh_frame:0000000000005460                 db  0Bh
.eh_frame:0000000000005461                 db  77h ; w
.eh_frame:0000000000005462                 db    8
.eh_frame:0000000000005463                 db  80h
.eh_frame:0000000000005464                 db    0
.eh_frame:0000000000005465                 db  3Fh ; ?
.eh_frame:0000000000005466                 db  1Ah
.eh_frame:0000000000005467                 db  3Bh ; ;
.eh_frame:0000000000005468                 db  2Ah ; *
.eh_frame:0000000000005469                 db  33h ; 3
.eh_frame:000000000000546A                 db  24h ; $
.eh_frame:000000000000546B                 db  22h ; "
.eh_frame:000000000000546C                 db    0
.eh_frame:000000000000546D                 db    0
.eh_frame:000000000000546E                 db    0
.eh_frame:000000000000546F                 db    0
.eh_frame:0000000000005470                 db  14h
.eh_frame:0000000000005471                 db    0
.eh_frame:0000000000005472                 db    0
.eh_frame:0000000000005473                 db    0
.eh_frame:0000000000005474                 db  44h ; D
.eh_frame:0000000000005475                 db    0
.eh_frame:0000000000005476                 db    0
.eh_frame:0000000000005477                 db    0
.eh_frame:0000000000005478                 db 0F8h
.eh_frame:0000000000005479                 db 0BFh
.eh_frame:000000000000547A                 db 0FFh
.eh_frame:000000000000547B                 db 0FFh
.eh_frame:000000000000547C                 db    8
.eh_frame:000000000000547D                 db    0
.eh_frame:000000000000547E                 db    0
.eh_frame:000000000000547F                 db    0
.eh_frame:0000000000005480                 db    0
.eh_frame:0000000000005481                 db    0
.eh_frame:0000000000005482                 db    0
.eh_frame:0000000000005483                 db    0
.eh_frame:0000000000005484                 db    0
.eh_frame:0000000000005485                 db    0
.eh_frame:0000000000005486                 db    0
.eh_frame:0000000000005487                 db    0
.eh_frame:0000000000005488                 db  28h ; (
.eh_frame:0000000000005489                 db    0
.eh_frame:000000000000548A                 db    0
.eh_frame:000000000000548B                 db    0
.eh_frame:000000000000548C                 db  5Ch ; \
.eh_frame:000000000000548D                 db    0
.eh_frame:000000000000548E                 db    0
.eh_frame:000000000000548F                 db    0
.eh_frame:0000000000005490                 db    0
.eh_frame:0000000000005491                 db 0C2h
.eh_frame:0000000000005492                 db 0FFh
.eh_frame:0000000000005493                 db 0FFh
.eh_frame:0000000000005494                 db  1Ah
.eh_frame:0000000000005495                 db    3
.eh_frame:0000000000005496                 db    0
.eh_frame:0000000000005497                 db    0
.eh_frame:0000000000005498                 db    0
.eh_frame:0000000000005499                 db  42h ; B
.eh_frame:000000000000549A                 db  0Eh
.eh_frame:000000000000549B                 db  10h
.eh_frame:000000000000549C                 db  8Dh
.eh_frame:000000000000549D                 db    2
.eh_frame:000000000000549E                 db  42h ; B
.eh_frame:000000000000549F                 db  0Eh
.eh_frame:00000000000054A0                 db  18h
.eh_frame:00000000000054A1                 db  8Ch
.eh_frame:00000000000054A2                 db    3
.eh_frame:00000000000054A3                 db  46h ; F
.eh_frame:00000000000054A4                 db  0Eh
.eh_frame:00000000000054A5                 db  20h
.eh_frame:00000000000054A6                 db  86h
.eh_frame:00000000000054A7                 db    4
.eh_frame:00000000000054A8                 db  41h ; A
.eh_frame:00000000000054A9                 db  0Eh
.eh_frame:00000000000054AA                 db  28h ; (
.eh_frame:00000000000054AB                 db  83h
.eh_frame:00000000000054AC                 db    5
.eh_frame:00000000000054AD                 db  49h ; I
.eh_frame:00000000000054AE                 db  0Eh
.eh_frame:00000000000054AF                 db 0B0h
.eh_frame:00000000000054B0                 db    1
.eh_frame:00000000000054B1                 db    0
.eh_frame:00000000000054B2                 db    0
.eh_frame:00000000000054B3                 db    0
.eh_frame:00000000000054B4                 db  38h ; 8
.eh_frame:00000000000054B5                 db    0
.eh_frame:00000000000054B6                 db    0
.eh_frame:00000000000054B7                 db    0
.eh_frame:00000000000054B8                 db  88h
.eh_frame:00000000000054B9                 db    0
.eh_frame:00000000000054BA                 db    0
.eh_frame:00000000000054BB                 db    0
.eh_frame:00000000000054BC                 db 0C4h
.eh_frame:00000000000054BD                 db 0BFh
.eh_frame:00000000000054BE                 db 0FFh
.eh_frame:00000000000054BF                 db 0FFh
.eh_frame:00000000000054C0                 db 0F8h
.eh_frame:00000000000054C1                 db    0
.eh_frame:00000000000054C2                 db    0
.eh_frame:00000000000054C3                 db    0
.eh_frame:00000000000054C4                 db    0
.eh_frame:00000000000054C5                 db  41h ; A
.eh_frame:00000000000054C6                 db  0Eh
.eh_frame:00000000000054C7                 db  10h
.eh_frame:00000000000054C8                 db  86h
.eh_frame:00000000000054C9                 db    2
.eh_frame:00000000000054CA                 db  41h ; A
.eh_frame:00000000000054CB                 db  0Eh
.eh_frame:00000000000054CC                 db  18h
.eh_frame:00000000000054CD                 db  83h
.eh_frame:00000000000054CE                 db    3
.eh_frame:00000000000054CF                 db  49h ; I
.eh_frame:00000000000054D0                 db  0Eh
.eh_frame:00000000000054D1                 db  20h
.eh_frame:00000000000054D2                 db    2
.eh_frame:00000000000054D3                 db  4Fh ; O
.eh_frame:00000000000054D4                 db  0Eh
.eh_frame:00000000000054D5                 db  28h ; (
.eh_frame:00000000000054D6                 db  49h ; I
.eh_frame:00000000000054D7                 db  0Eh
.eh_frame:00000000000054D8                 db  30h ; 0
.eh_frame:00000000000054D9                 db  4Fh ; O
.eh_frame:00000000000054DA                 db  0Eh
.eh_frame:00000000000054DB                 db  38h ; 8
.eh_frame:00000000000054DC                 db  53h ; S
.eh_frame:00000000000054DD                 db  0Eh
.eh_frame:00000000000054DE                 db  40h ; @
.eh_frame:00000000000054DF                 db  52h ; R
.eh_frame:00000000000054E0                 db  0Eh
.eh_frame:00000000000054E1                 db  20h
.eh_frame:00000000000054E2                 db  62h ; b
.eh_frame:00000000000054E3                 db  0Ah
.eh_frame:00000000000054E4                 db  0Eh
.eh_frame:00000000000054E5                 db  18h
.eh_frame:00000000000054E6                 db  43h ; C
.eh_frame:00000000000054E7                 db  0Eh
.eh_frame:00000000000054E8                 db  10h
.eh_frame:00000000000054E9                 db  41h ; A
.eh_frame:00000000000054EA                 db  0Eh
.eh_frame:00000000000054EB                 db    8
.eh_frame:00000000000054EC                 db  41h ; A
.eh_frame:00000000000054ED                 db  0Bh
.eh_frame:00000000000054EE                 db    0
.eh_frame:00000000000054EF                 db    0
.eh_frame:00000000000054F0                 db  10h
.eh_frame:00000000000054F1                 db    0
.eh_frame:00000000000054F2                 db    0
.eh_frame:00000000000054F3                 db    0
.eh_frame:00000000000054F4                 db 0C4h
.eh_frame:00000000000054F5                 db    0
.eh_frame:00000000000054F6                 db    0
.eh_frame:00000000000054F7                 db    0
.eh_frame:00000000000054F8                 db 0B8h
.eh_frame:00000000000054F9                 db 0C4h
.eh_frame:00000000000054FA                 db 0FFh
.eh_frame:00000000000054FB                 db 0FFh
.eh_frame:00000000000054FC                 db    8
.eh_frame:00000000000054FD                 db    0
.eh_frame:00000000000054FE                 db    0
.eh_frame:00000000000054FF                 db    0
.eh_frame:0000000000005500                 db    0
.eh_frame:0000000000005501                 db    0
.eh_frame:0000000000005502                 db    0
.eh_frame:0000000000005503                 db    0
.eh_frame:0000000000005504                 db  10h
.eh_frame:0000000000005505                 db    0
.eh_frame:0000000000005506                 db    0
.eh_frame:0000000000005507                 db    0
.eh_frame:0000000000005508                 db 0D8h
.eh_frame:0000000000005509                 db    0
.eh_frame:000000000000550A                 db    0
.eh_frame:000000000000550B                 db    0
.eh_frame:000000000000550C                 db 0B4h
.eh_frame:000000000000550D                 db 0C4h
.eh_frame:000000000000550E                 db 0FFh
.eh_frame:000000000000550F                 db 0FFh
.eh_frame:0000000000005510                 db    8
.eh_frame:0000000000005511                 db    0
.eh_frame:0000000000005512                 db    0
.eh_frame:0000000000005513                 db    0
.eh_frame:0000000000005514                 db    0
.eh_frame:0000000000005515                 db    0
.eh_frame:0000000000005516                 db    0
.eh_frame:0000000000005517                 db    0
.eh_frame:0000000000005518                 db  2Ch ; ,
.eh_frame:0000000000005519                 db    0
.eh_frame:000000000000551A                 db    0
.eh_frame:000000000000551B                 db    0
.eh_frame:000000000000551C                 db 0ECh
.eh_frame:000000000000551D                 db    0
.eh_frame:000000000000551E                 db    0
.eh_frame:000000000000551F                 db    0
.eh_frame:0000000000005520                 db 0B0h
.eh_frame:0000000000005521                 db 0C4h
.eh_frame:0000000000005522                 db 0FFh
.eh_frame:0000000000005523                 db 0FFh
.eh_frame:0000000000005524                 db 0A4h
.eh_frame:0000000000005525                 db    0
.eh_frame:0000000000005526                 db    0
.eh_frame:0000000000005527                 db    0
.eh_frame:0000000000005528                 db    0
.eh_frame:0000000000005529                 db  41h ; A
.eh_frame:000000000000552A                 db  0Eh
.eh_frame:000000000000552B                 db  10h
.eh_frame:000000000000552C                 db  86h
.eh_frame:000000000000552D                 db    2
.eh_frame:000000000000552E                 db  41h ; A
.eh_frame:000000000000552F                 db  0Eh
.eh_frame:0000000000005530                 db  18h
.eh_frame:0000000000005531                 db  83h
.eh_frame:0000000000005532                 db    3
.eh_frame:0000000000005533                 db  44h ; D
.eh_frame:0000000000005534                 db  0Eh
.eh_frame:0000000000005535                 db  20h
.eh_frame:0000000000005536                 db  7Ah ; z
.eh_frame:0000000000005537                 db  0Ah
.eh_frame:0000000000005538                 db  0Eh
.eh_frame:0000000000005539                 db  18h
.eh_frame:000000000000553A                 db  41h ; A
.eh_frame:000000000000553B                 db  0Eh
.eh_frame:000000000000553C                 db  10h
.eh_frame:000000000000553D                 db  41h ; A
.eh_frame:000000000000553E                 db  0Eh
.eh_frame:000000000000553F                 db    8
.eh_frame:0000000000005540                 db  41h ; A
.eh_frame:0000000000005541                 db  0Bh
.eh_frame:0000000000005542                 db    0
.eh_frame:0000000000005543                 db    0
.eh_frame:0000000000005544                 db    0
.eh_frame:0000000000005545                 db    0
.eh_frame:0000000000005546                 db    0
.eh_frame:0000000000005547                 db    0
.eh_frame:0000000000005548                 db  38h ; 8
.eh_frame:0000000000005549                 db    0
.eh_frame:000000000000554A                 db    0
.eh_frame:000000000000554B                 db    0
.eh_frame:000000000000554C                 db  1Ch
.eh_frame:000000000000554D                 db    1
.eh_frame:000000000000554E                 db    0
.eh_frame:000000000000554F                 db    0
.eh_frame:0000000000005550                 db  30h ; 0
.eh_frame:0000000000005551                 db 0C5h
.eh_frame:0000000000005552                 db 0FFh
.eh_frame:0000000000005553                 db 0FFh
.eh_frame:0000000000005554                 db  3Fh ; ?
.eh_frame:0000000000005555                 db    1
.eh_frame:0000000000005556                 db    0
.eh_frame:0000000000005557                 db    0
.eh_frame:0000000000005558                 db    0
.eh_frame:0000000000005559                 db  42h ; B
.eh_frame:000000000000555A                 db  0Eh
.eh_frame:000000000000555B                 db  10h
.eh_frame:000000000000555C                 db  8Dh
.eh_frame:000000000000555D                 db    2
.eh_frame:000000000000555E                 db  42h ; B
.eh_frame:000000000000555F                 db  0Eh
.eh_frame:0000000000005560                 db  18h
.eh_frame:0000000000005561                 db  8Ch
.eh_frame:0000000000005562                 db    3
.eh_frame:0000000000005563                 db  44h ; D
.eh_frame:0000000000005564                 db  0Eh
.eh_frame:0000000000005565                 db  20h
.eh_frame:0000000000005566                 db  86h
.eh_frame:0000000000005567                 db    4
.eh_frame:0000000000005568                 db  41h ; A
.eh_frame:0000000000005569                 db  0Eh
.eh_frame:000000000000556A                 db  28h ; (
.eh_frame:000000000000556B                 db  83h
.eh_frame:000000000000556C                 db    5
.eh_frame:000000000000556D                 db  4Dh ; M
.eh_frame:000000000000556E                 db  0Eh
.eh_frame:000000000000556F                 db  90h
.eh_frame:0000000000005570                 db    2
.eh_frame:0000000000005571                 db    2
.eh_frame:0000000000005572                 db  8Eh
.eh_frame:0000000000005573                 db  0Ah
.eh_frame:0000000000005574                 db  0Eh
.eh_frame:0000000000005575                 db  28h ; (
.eh_frame:0000000000005576                 db  41h ; A
.eh_frame:0000000000005577                 db  0Eh
.eh_frame:0000000000005578                 db  20h
.eh_frame:0000000000005579                 db  41h ; A
.eh_frame:000000000000557A                 db  0Eh
.eh_frame:000000000000557B                 db  18h
.eh_frame:000000000000557C                 db  42h ; B
.eh_frame:000000000000557D                 db  0Eh
.eh_frame:000000000000557E                 db  10h
.eh_frame:000000000000557F                 db  42h ; B
.eh_frame:0000000000005580                 db  0Eh
.eh_frame:0000000000005581                 db    8
.eh_frame:0000000000005582                 db  46h ; F
.eh_frame:0000000000005583                 db  0Bh
.eh_frame:0000000000005584                 db  48h ; H
.eh_frame:0000000000005585                 db    0
.eh_frame:0000000000005586                 db    0
.eh_frame:0000000000005587                 db    0
.eh_frame:0000000000005588                 db  58h ; X
.eh_frame:0000000000005589                 db    1
.eh_frame:000000000000558A                 db    0
.eh_frame:000000000000558B                 db    0
.eh_frame:000000000000558C                 db  34h ; 4
.eh_frame:000000000000558D                 db 0C6h
.eh_frame:000000000000558E                 db 0FFh
.eh_frame:000000000000558F                 db 0FFh
.eh_frame:0000000000005590                 db  3Bh ; ;
.eh_frame:0000000000005591                 db    1
.eh_frame:0000000000005592                 db    0
.eh_frame:0000000000005593                 db    0
.eh_frame:0000000000005594                 db    0
.eh_frame:0000000000005595                 db  42h ; B
.eh_frame:0000000000005596                 db  0Eh
.eh_frame:0000000000005597                 db  10h
.eh_frame:0000000000005598                 db  8Eh
.eh_frame:0000000000005599                 db    2
.eh_frame:000000000000559A                 db  42h ; B
.eh_frame:000000000000559B                 db  0Eh
.eh_frame:000000000000559C                 db  18h
.eh_frame:000000000000559D                 db  8Dh
.eh_frame:000000000000559E                 db    3
.eh_frame:000000000000559F                 db  45h ; E
.eh_frame:00000000000055A0                 db  0Eh
.eh_frame:00000000000055A1                 db  20h
.eh_frame:00000000000055A2                 db  8Ch
.eh_frame:00000000000055A3                 db    4
.eh_frame:00000000000055A4                 db  41h ; A
.eh_frame:00000000000055A5                 db  0Eh
.eh_frame:00000000000055A6                 db  28h ; (
.eh_frame:00000000000055A7                 db  86h
.eh_frame:00000000000055A8                 db    5
.eh_frame:00000000000055A9                 db  44h ; D
.eh_frame:00000000000055AA                 db  0Eh
.eh_frame:00000000000055AB                 db  30h ; 0
.eh_frame:00000000000055AC                 db  83h
.eh_frame:00000000000055AD                 db    6
.eh_frame:00000000000055AE                 db  4Ah ; J
.eh_frame:00000000000055AF                 db  0Eh
.eh_frame:00000000000055B0                 db  80h
.eh_frame:00000000000055B1                 db    2
.eh_frame:00000000000055B2                 db    3
.eh_frame:00000000000055B3                 db  0Dh
.eh_frame:00000000000055B4                 db    1
.eh_frame:00000000000055B5                 db  0Ah
.eh_frame:00000000000055B6                 db  0Eh
.eh_frame:00000000000055B7                 db  30h ; 0
.eh_frame:00000000000055B8                 db  41h ; A
.eh_frame:00000000000055B9                 db  0Eh
.eh_frame:00000000000055BA                 db  28h ; (
.eh_frame:00000000000055BB                 db  41h ; A
.eh_frame:00000000000055BC                 db  0Eh
.eh_frame:00000000000055BD                 db  20h
.eh_frame:00000000000055BE                 db  42h ; B
.eh_frame:00000000000055BF                 db  0Eh
.eh_frame:00000000000055C0                 db  18h
.eh_frame:00000000000055C1                 db  42h ; B
.eh_frame:00000000000055C2                 db  0Eh
.eh_frame:00000000000055C3                 db  10h
.eh_frame:00000000000055C4                 db  42h ; B
.eh_frame:00000000000055C5                 db  0Eh
.eh_frame:00000000000055C6                 db    8
.eh_frame:00000000000055C7                 db  43h ; C
.eh_frame:00000000000055C8                 db  0Bh
.eh_frame:00000000000055C9                 db    0
.eh_frame:00000000000055CA                 db    0
.eh_frame:00000000000055CB                 db    0
.eh_frame:00000000000055CC                 db    0
.eh_frame:00000000000055CD                 db    0
.eh_frame:00000000000055CE                 db    0
.eh_frame:00000000000055CF                 db    0
.eh_frame:00000000000055D0                 db  1Ch
.eh_frame:00000000000055D1                 db    0
.eh_frame:00000000000055D2                 db    0
.eh_frame:00000000000055D3                 db    0
.eh_frame:00000000000055D4                 db 0A4h
.eh_frame:00000000000055D5                 db    1
.eh_frame:00000000000055D6                 db    0
.eh_frame:00000000000055D7                 db    0
.eh_frame:00000000000055D8                 db  28h ; (
.eh_frame:00000000000055D9                 db 0C7h
.eh_frame:00000000000055DA                 db 0FFh
.eh_frame:00000000000055DB                 db 0FFh
.eh_frame:00000000000055DC                 db  9Fh
.eh_frame:00000000000055DD                 db    0
.eh_frame:00000000000055DE                 db    0
.eh_frame:00000000000055DF                 db    0
.eh_frame:00000000000055E0                 db    0
.eh_frame:00000000000055E1                 db  44h ; D
.eh_frame:00000000000055E2                 db  0Eh
.eh_frame:00000000000055E3                 db  10h
.eh_frame:00000000000055E4                 db  83h
.eh_frame:00000000000055E5                 db    2
.eh_frame:00000000000055E6                 db    2
.eh_frame:00000000000055E7                 db  78h ; x
.eh_frame:00000000000055E8                 db  0Ah
.eh_frame:00000000000055E9                 db  0Eh
.eh_frame:00000000000055EA                 db    8
.eh_frame:00000000000055EB                 db  41h ; A
.eh_frame:00000000000055EC                 db  0Bh
.eh_frame:00000000000055ED                 db    0
.eh_frame:00000000000055EE                 db    0
.eh_frame:00000000000055EF                 db    0
.eh_frame:00000000000055F0                 db  40h ; @
.eh_frame:00000000000055F1                 db    0
.eh_frame:00000000000055F2                 db    0
.eh_frame:00000000000055F3                 db    0
.eh_frame:00000000000055F4                 db 0C4h
.eh_frame:00000000000055F5                 db    1
.eh_frame:00000000000055F6                 db    0
.eh_frame:00000000000055F7                 db    0
.eh_frame:00000000000055F8                 db 0A8h
.eh_frame:00000000000055F9                 db 0C7h
.eh_frame:00000000000055FA                 db 0FFh
.eh_frame:00000000000055FB                 db 0FFh
.eh_frame:00000000000055FC                 db 0E7h
.eh_frame:00000000000055FD                 db    0
.eh_frame:00000000000055FE                 db    0
.eh_frame:00000000000055FF                 db    0
.eh_frame:0000000000005600                 db    0
.eh_frame:0000000000005601                 db  41h ; A
.eh_frame:0000000000005602                 db  0Eh
.eh_frame:0000000000005603                 db  10h
.eh_frame:0000000000005604                 db  86h
.eh_frame:0000000000005605                 db    2
.eh_frame:0000000000005606                 db  41h ; A
.eh_frame:0000000000005607                 db  0Eh
.eh_frame:0000000000005608                 db  18h
.eh_frame:0000000000005609                 db  83h
.eh_frame:000000000000560A                 db    3
.eh_frame:000000000000560B                 db  49h ; I
.eh_frame:000000000000560C                 db  0Eh
.eh_frame:000000000000560D                 db  20h
.eh_frame:000000000000560E                 db  6Eh ; n
.eh_frame:000000000000560F                 db  0Ah
.eh_frame:0000000000005610                 db  0Eh
.eh_frame:0000000000005611                 db  18h
.eh_frame:0000000000005612                 db  41h ; A
.eh_frame:0000000000005613                 db  0Eh
.eh_frame:0000000000005614                 db  10h
.eh_frame:0000000000005615                 db  41h ; A
.eh_frame:0000000000005616                 db  0Eh
.eh_frame:0000000000005617                 db    8
.eh_frame:0000000000005618                 db  45h ; E
.eh_frame:0000000000005619                 db  0Bh
.eh_frame:000000000000561A                 db    2
.eh_frame:000000000000561B                 db  4Ah ; J
.eh_frame:000000000000561C                 db  0Ah
.eh_frame:000000000000561D                 db  0Eh
.eh_frame:000000000000561E                 db  18h
.eh_frame:000000000000561F                 db  41h ; A
.eh_frame:0000000000005620                 db  0Eh
.eh_frame:0000000000005621                 db  10h
.eh_frame:0000000000005622                 db  41h ; A
.eh_frame:0000000000005623                 db  0Eh
.eh_frame:0000000000005624                 db    8
.eh_frame:0000000000005625                 db  44h ; D
.eh_frame:0000000000005626                 db  0Bh
.eh_frame:0000000000005627                 db    2
.eh_frame:0000000000005628                 db  54h ; T
.eh_frame:0000000000005629                 db  0Eh
.eh_frame:000000000000562A                 db  18h
.eh_frame:000000000000562B                 db  41h ; A
.eh_frame:000000000000562C                 db  0Eh
.eh_frame:000000000000562D                 db  10h
.eh_frame:000000000000562E                 db  41h ; A
.eh_frame:000000000000562F                 db  0Eh
.eh_frame:0000000000005630                 db    8
.eh_frame:0000000000005631                 db    0
.eh_frame:0000000000005632                 db    0
.eh_frame:0000000000005633                 db    0
.eh_frame:0000000000005634                 db  74h ; t
.eh_frame:0000000000005635                 db    0
.eh_frame:0000000000005636                 db    0
.eh_frame:0000000000005637                 db    0
.eh_frame:0000000000005638                 db    8
.eh_frame:0000000000005639                 db    2
.eh_frame:000000000000563A                 db    0
.eh_frame:000000000000563B                 db    0
.eh_frame:000000000000563C                 db  54h ; T
.eh_frame:000000000000563D                 db 0C8h
.eh_frame:000000000000563E                 db 0FFh
.eh_frame:000000000000563F                 db 0FFh
.eh_frame:0000000000005640                 db  34h ; 4
.eh_frame:0000000000005641                 db  12h
.eh_frame:0000000000005642                 db    0
.eh_frame:0000000000005643                 db    0
.eh_frame:0000000000005644                 db    0
.eh_frame:0000000000005645                 db  42h ; B
.eh_frame:0000000000005646                 db  0Eh
.eh_frame:0000000000005647                 db  10h
.eh_frame:0000000000005648                 db  8Fh
.eh_frame:0000000000005649                 db    2
.eh_frame:000000000000564A                 db  42h ; B
.eh_frame:000000000000564B                 db  0Eh
.eh_frame:000000000000564C                 db  18h
.eh_frame:000000000000564D                 db  8Eh
.eh_frame:000000000000564E                 db    3
.eh_frame:000000000000564F                 db  45h ; E
.eh_frame:0000000000005650                 db  0Eh
.eh_frame:0000000000005651                 db  20h
.eh_frame:0000000000005652                 db  8Dh
.eh_frame:0000000000005653                 db    4
.eh_frame:0000000000005654                 db  42h ; B
.eh_frame:0000000000005655                 db  0Eh
.eh_frame:0000000000005656                 db  28h ; (
.eh_frame:0000000000005657                 db  8Ch
.eh_frame:0000000000005658                 db    5
.eh_frame:0000000000005659                 db  44h ; D
.eh_frame:000000000000565A                 db  0Eh
.eh_frame:000000000000565B                 db  30h ; 0
.eh_frame:000000000000565C                 db  86h
.eh_frame:000000000000565D                 db    6
.eh_frame:000000000000565E                 db  41h ; A
.eh_frame:000000000000565F                 db  0Eh
.eh_frame:0000000000005660                 db  38h ; 8
.eh_frame:0000000000005661                 db  83h
.eh_frame:0000000000005662                 db    7
.eh_frame:0000000000005663                 db  53h ; S
.eh_frame:0000000000005664                 db  0Eh
.eh_frame:0000000000005665                 db 0F0h
.eh_frame:0000000000005666                 db    1
.eh_frame:0000000000005667                 db    3
.eh_frame:0000000000005668                 db  81h
.eh_frame:0000000000005669                 db  0Bh
.eh_frame:000000000000566A                 db  0Eh
.eh_frame:000000000000566B                 db 0F8h
.eh_frame:000000000000566C                 db    1
.eh_frame:000000000000566D                 db  4Ah ; J
.eh_frame:000000000000566E                 db  0Eh
.eh_frame:000000000000566F                 db  80h
.eh_frame:0000000000005670                 db    2
.eh_frame:0000000000005671                 db  44h ; D
.eh_frame:0000000000005672                 db  0Eh
.eh_frame:0000000000005673                 db  88h
.eh_frame:0000000000005674                 db    2
.eh_frame:0000000000005675                 db  45h ; E
.eh_frame:0000000000005676                 db  0Eh
.eh_frame:0000000000005677                 db  90h
.eh_frame:0000000000005678                 db    2
.eh_frame:0000000000005679                 db  5Fh ; _
.eh_frame:000000000000567A                 db  0Eh
.eh_frame:000000000000567B                 db 0F0h
.eh_frame:000000000000567C                 db    1
.eh_frame:000000000000567D                 db  64h ; d
.eh_frame:000000000000567E                 db  0Ah
.eh_frame:000000000000567F                 db  0Eh
.eh_frame:0000000000005680                 db  38h ; 8
.eh_frame:0000000000005681                 db  41h ; A
.eh_frame:0000000000005682                 db  0Eh
.eh_frame:0000000000005683                 db  30h ; 0
.eh_frame:0000000000005684                 db  41h ; A
.eh_frame:0000000000005685                 db  0Eh
.eh_frame:0000000000005686                 db  28h ; (
.eh_frame:0000000000005687                 db  42h ; B
.eh_frame:0000000000005688                 db  0Eh
.eh_frame:0000000000005689                 db  20h
.eh_frame:000000000000568A                 db  42h ; B
.eh_frame:000000000000568B                 db  0Eh
.eh_frame:000000000000568C                 db  18h
.eh_frame:000000000000568D                 db  42h ; B
.eh_frame:000000000000568E                 db  0Eh
.eh_frame:000000000000568F                 db  10h
.eh_frame:0000000000005690                 db  42h ; B
.eh_frame:0000000000005691                 db  0Eh
.eh_frame:0000000000005692                 db    8
.eh_frame:0000000000005693                 db  44h ; D
.eh_frame:0000000000005694                 db  0Bh
.eh_frame:0000000000005695                 db    3
.eh_frame:0000000000005696                 db  99h
.eh_frame:0000000000005697                 db    5
.eh_frame:0000000000005698                 db  0Eh
.eh_frame:0000000000005699                 db 0F8h
.eh_frame:000000000000569A                 db    1
.eh_frame:000000000000569B                 db  4Dh ; M
.eh_frame:000000000000569C                 db  0Eh
.eh_frame:000000000000569D                 db  80h
.eh_frame:000000000000569E                 db    2
.eh_frame:000000000000569F                 db  44h ; D
.eh_frame:00000000000056A0                 db  0Eh
.eh_frame:00000000000056A1                 db  88h
.eh_frame:00000000000056A2                 db    2
.eh_frame:00000000000056A3                 db  47h ; G
.eh_frame:00000000000056A4                 db  0Eh
.eh_frame:00000000000056A5                 db  90h
.eh_frame:00000000000056A6                 db    2
.eh_frame:00000000000056A7                 db  5Bh ; [
.eh_frame:00000000000056A8                 db  0Eh
.eh_frame:00000000000056A9                 db 0F0h
.eh_frame:00000000000056AA                 db    1
.eh_frame:00000000000056AB                 db    0
.eh_frame:00000000000056AC                 db  68h ; h
.eh_frame:00000000000056AD                 db    0
.eh_frame:00000000000056AE                 db    0
.eh_frame:00000000000056AF                 db    0
.eh_frame:00000000000056B0                 db  80h
.eh_frame:00000000000056B1                 db    2
.eh_frame:00000000000056B2                 db    0
.eh_frame:00000000000056B3                 db    0
.eh_frame:00000000000056B4                 db  1Ch
.eh_frame:00000000000056B5                 db 0DAh
.eh_frame:00000000000056B6                 db 0FFh
.eh_frame:00000000000056B7                 db 0FFh
.eh_frame:00000000000056B8                 db 0ABh
.eh_frame:00000000000056B9                 db    1
.eh_frame:00000000000056BA                 db    0
.eh_frame:00000000000056BB                 db    0
.eh_frame:00000000000056BC                 db    0
.eh_frame:00000000000056BD                 db  42h ; B
.eh_frame:00000000000056BE                 db  0Eh
.eh_frame:00000000000056BF                 db  10h
.eh_frame:00000000000056C0                 db  8Fh
.eh_frame:00000000000056C1                 db    2
.eh_frame:00000000000056C2                 db  42h ; B
.eh_frame:00000000000056C3                 db  0Eh
.eh_frame:00000000000056C4                 db  18h
.eh_frame:00000000000056C5                 db  8Eh
.eh_frame:00000000000056C6                 db    3
.eh_frame:00000000000056C7                 db  45h ; E
.eh_frame:00000000000056C8                 db  0Eh
.eh_frame:00000000000056C9                 db  20h
.eh_frame:00000000000056CA                 db  8Dh
.eh_frame:00000000000056CB                 db    4
.eh_frame:00000000000056CC                 db  42h ; B
.eh_frame:00000000000056CD                 db  0Eh
.eh_frame:00000000000056CE                 db  28h ; (
.eh_frame:00000000000056CF                 db  8Ch
.eh_frame:00000000000056D0                 db    5
.eh_frame:00000000000056D1                 db  44h ; D
.eh_frame:00000000000056D2                 db  0Eh
.eh_frame:00000000000056D3                 db  30h ; 0
.eh_frame:00000000000056D4                 db  86h
.eh_frame:00000000000056D5                 db    6
.eh_frame:00000000000056D6                 db  41h ; A
.eh_frame:00000000000056D7                 db  0Eh
.eh_frame:00000000000056D8                 db  38h ; 8
.eh_frame:00000000000056D9                 db  83h
.eh_frame:00000000000056DA                 db    7
.eh_frame:00000000000056DB                 db  47h ; G
.eh_frame:00000000000056DC                 db  0Eh
.eh_frame:00000000000056DD                 db  60h ; `
.eh_frame:00000000000056DE                 db    2
.eh_frame:00000000000056DF                 db  99h
.eh_frame:00000000000056E0                 db  0Eh
.eh_frame:00000000000056E1                 db  68h ; h
.eh_frame:00000000000056E2                 db  5Fh ; _
.eh_frame:00000000000056E3                 db  0Eh
.eh_frame:00000000000056E4                 db  70h ; p
.eh_frame:00000000000056E5                 db  46h ; F
.eh_frame:00000000000056E6                 db  0Eh
.eh_frame:00000000000056E7                 db  78h ; x
.eh_frame:00000000000056E8                 db  42h ; B
.eh_frame:00000000000056E9                 db  0Eh
.eh_frame:00000000000056EA                 db  80h
.eh_frame:00000000000056EB                 db    1
.eh_frame:00000000000056EC                 db  59h ; Y
.eh_frame:00000000000056ED                 db  0Eh
.eh_frame:00000000000056EE                 db  60h ; `
.eh_frame:00000000000056EF                 db    2
.eh_frame:00000000000056F0                 db  40h ; @
.eh_frame:00000000000056F1                 db  0Eh
.eh_frame:00000000000056F2                 db  68h ; h
.eh_frame:00000000000056F3                 db  4Bh ; K
.eh_frame:00000000000056F4                 db  0Eh
.eh_frame:00000000000056F5                 db  70h ; p
.eh_frame:00000000000056F6                 db  43h ; C
.eh_frame:00000000000056F7                 db  0Eh
.eh_frame:00000000000056F8                 db  78h ; x
.eh_frame:00000000000056F9                 db  45h ; E
.eh_frame:00000000000056FA                 db  0Eh
.eh_frame:00000000000056FB                 db  80h
.eh_frame:00000000000056FC                 db    1
.eh_frame:00000000000056FD                 db  5Eh ; ^
.eh_frame:00000000000056FE                 db  0Eh
.eh_frame:00000000000056FF                 db  60h ; `
.eh_frame:0000000000005700                 db  4Ch ; L
.eh_frame:0000000000005701                 db  0Ah
.eh_frame:0000000000005702                 db  0Eh
.eh_frame:0000000000005703                 db  38h ; 8
.eh_frame:0000000000005704                 db  44h ; D
.eh_frame:0000000000005705                 db  0Eh
.eh_frame:0000000000005706                 db  30h ; 0
.eh_frame:0000000000005707                 db  41h ; A
.eh_frame:0000000000005708                 db  0Eh
.eh_frame:0000000000005709                 db  28h ; (
.eh_frame:000000000000570A                 db  42h ; B
.eh_frame:000000000000570B                 db  0Eh
.eh_frame:000000000000570C                 db  20h
.eh_frame:000000000000570D                 db  42h ; B
.eh_frame:000000000000570E                 db  0Eh
.eh_frame:000000000000570F                 db  18h
.eh_frame:0000000000005710                 db  42h ; B
.eh_frame:0000000000005711                 db  0Eh
.eh_frame:0000000000005712                 db  10h
.eh_frame:0000000000005713                 db  42h ; B
.eh_frame:0000000000005714                 db  0Eh
.eh_frame:0000000000005715                 db    8
.eh_frame:0000000000005716                 db  46h ; F
.eh_frame:0000000000005717                 db  0Bh
.eh_frame:0000000000005718                 db  28h ; (
.eh_frame:0000000000005719                 db    0
.eh_frame:000000000000571A                 db    0
.eh_frame:000000000000571B                 db    0
.eh_frame:000000000000571C                 db 0ECh
.eh_frame:000000000000571D                 db    2
.eh_frame:000000000000571E                 db    0
.eh_frame:000000000000571F                 db    0
.eh_frame:0000000000005720                 db  60h ; `
.eh_frame:0000000000005721                 db 0DBh
.eh_frame:0000000000005722                 db 0FFh
.eh_frame:0000000000005723                 db 0FFh
.eh_frame:0000000000005724                 db  36h ; 6
.eh_frame:0000000000005725                 db    0
.eh_frame:0000000000005726                 db    0
.eh_frame:0000000000005727                 db    0
.eh_frame:0000000000005728                 db    0
.eh_frame:0000000000005729                 db  42h ; B
.eh_frame:000000000000572A                 db  0Eh
.eh_frame:000000000000572B                 db  10h
.eh_frame:000000000000572C                 db  8Ch
.eh_frame:000000000000572D                 db    2
.eh_frame:000000000000572E                 db  41h ; A
.eh_frame:000000000000572F                 db  0Eh
.eh_frame:0000000000005730                 db  18h
.eh_frame:0000000000005731                 db  86h
.eh_frame:0000000000005732                 db    3
.eh_frame:0000000000005733                 db  41h ; A
.eh_frame:0000000000005734                 db  0Eh
.eh_frame:0000000000005735                 db  20h
.eh_frame:0000000000005736                 db  83h
.eh_frame:0000000000005737                 db    4
.eh_frame:0000000000005738                 db  6Eh ; n
.eh_frame:0000000000005739                 db  0Eh
.eh_frame:000000000000573A                 db  18h
.eh_frame:000000000000573B                 db  41h ; A
.eh_frame:000000000000573C                 db  0Eh
.eh_frame:000000000000573D                 db  10h
.eh_frame:000000000000573E                 db  42h ; B
.eh_frame:000000000000573F                 db  0Eh
.eh_frame:0000000000005740                 db    8
.eh_frame:0000000000005741                 db    0
.eh_frame:0000000000005742                 db    0
.eh_frame:0000000000005743                 db    0
.eh_frame:0000000000005744                 db  10h
.eh_frame:0000000000005745                 db    0
.eh_frame:0000000000005746                 db    0
.eh_frame:0000000000005747                 db    0
.eh_frame:0000000000005748                 db  18h
.eh_frame:0000000000005749                 db    3
.eh_frame:000000000000574A                 db    0
.eh_frame:000000000000574B                 db    0
.eh_frame:000000000000574C                 db  74h ; t
.eh_frame:000000000000574D                 db 0DBh
.eh_frame:000000000000574E                 db 0FFh
.eh_frame:000000000000574F                 db 0FFh
.eh_frame:0000000000005750                 db  11h
.eh_frame:0000000000005751                 db    0
.eh_frame:0000000000005752                 db    0
.eh_frame:0000000000005753                 db    0
.eh_frame:0000000000005754                 db    0
.eh_frame:0000000000005755                 db    0
.eh_frame:0000000000005756                 db    0
.eh_frame:0000000000005757                 db    0
.eh_frame:0000000000005758                 db  10h
.eh_frame:0000000000005759                 db    0
.eh_frame:000000000000575A                 db    0
.eh_frame:000000000000575B                 db    0
.eh_frame:000000000000575C                 db  2Ch ; ,
.eh_frame:000000000000575D                 db    3
.eh_frame:000000000000575E                 db    0
.eh_frame:000000000000575F                 db    0
.eh_frame:0000000000005760                 db  80h
.eh_frame:0000000000005761                 db 0DBh
.eh_frame:0000000000005762                 db 0FFh
.eh_frame:0000000000005763                 db 0FFh
.eh_frame:0000000000005764                 db  11h
.eh_frame:0000000000005765                 db    0
.eh_frame:0000000000005766                 db    0
.eh_frame:0000000000005767                 db    0
.eh_frame:0000000000005768                 db    0
.eh_frame:0000000000005769                 db    0
.eh_frame:000000000000576A                 db    0
.eh_frame:000000000000576B                 db    0
.eh_frame:000000000000576C                 db  10h
.eh_frame:000000000000576D                 db    0
.eh_frame:000000000000576E                 db    0
.eh_frame:000000000000576F                 db    0
.eh_frame:0000000000005770                 db  40h ; @
.eh_frame:0000000000005771                 db    3
.eh_frame:0000000000005772                 db    0
.eh_frame:0000000000005773                 db    0
.eh_frame:0000000000005774                 db  8Ch
.eh_frame:0000000000005775                 db 0DBh
.eh_frame:0000000000005776                 db 0FFh
.eh_frame:0000000000005777                 db 0FFh
.eh_frame:0000000000005778                 db  35h ; 5
.eh_frame:0000000000005779                 db    0
.eh_frame:000000000000577A                 db    0
.eh_frame:000000000000577B                 db    0
.eh_frame:000000000000577C                 db    0
.eh_frame:000000000000577D                 db    0
.eh_frame:000000000000577E                 db    0
.eh_frame:000000000000577F                 db    0
.eh_frame:0000000000005780                 db  10h
.eh_frame:0000000000005781                 db    0
.eh_frame:0000000000005782                 db    0
.eh_frame:0000000000005783                 db    0
.eh_frame:0000000000005784                 db  54h ; T
.eh_frame:0000000000005785                 db    3
.eh_frame:0000000000005786                 db    0
.eh_frame:0000000000005787                 db    0
.eh_frame:0000000000005788                 db 0B8h
.eh_frame:0000000000005789                 db 0DBh
.eh_frame:000000000000578A                 db 0FFh
.eh_frame:000000000000578B                 db 0FFh
.eh_frame:000000000000578C                 db  15h
.eh_frame:000000000000578D                 db    0
.eh_frame:000000000000578E                 db    0
.eh_frame:000000000000578F                 db    0
.eh_frame:0000000000005790                 db    0
.eh_frame:0000000000005791                 db    0
.eh_frame:0000000000005792                 db    0
.eh_frame:0000000000005793                 db    0
.eh_frame:0000000000005794                 db  10h
.eh_frame:0000000000005795                 db    0
.eh_frame:0000000000005796                 db    0
.eh_frame:0000000000005797                 db    0
.eh_frame:0000000000005798                 db  68h ; h
.eh_frame:0000000000005799                 db    3
.eh_frame:000000000000579A                 db    0
.eh_frame:000000000000579B                 db    0
.eh_frame:000000000000579C                 db 0C4h
.eh_frame:000000000000579D                 db 0DBh
.eh_frame:000000000000579E                 db 0FFh
.eh_frame:000000000000579F                 db 0FFh
.eh_frame:00000000000057A0                 db  30h ; 0
.eh_frame:00000000000057A1                 db    0
.eh_frame:00000000000057A2                 db    0
.eh_frame:00000000000057A3                 db    0
.eh_frame:00000000000057A4                 db    0
.eh_frame:00000000000057A5                 db  6Bh ; k
.eh_frame:00000000000057A6                 db  0Eh
.eh_frame:00000000000057A7                 db  10h
.eh_frame:00000000000057A8                 db  50h ; P
.eh_frame:00000000000057A9                 db    0
.eh_frame:00000000000057AA                 db    0
.eh_frame:00000000000057AB                 db    0
.eh_frame:00000000000057AC                 db  7Ch ; |
.eh_frame:00000000000057AD                 db    3
.eh_frame:00000000000057AE                 db    0
.eh_frame:00000000000057AF                 db    0
.eh_frame:00000000000057B0                 db 0E0h
.eh_frame:00000000000057B1                 db 0DBh
.eh_frame:00000000000057B2                 db 0FFh
.eh_frame:00000000000057B3                 db 0FFh
.eh_frame:00000000000057B4                 db  74h ; t
.eh_frame:00000000000057B5                 db    0
.eh_frame:00000000000057B6                 db    0
.eh_frame:00000000000057B7                 db    0
.eh_frame:00000000000057B8                 db    0
.eh_frame:00000000000057B9                 db  42h ; B
.eh_frame:00000000000057BA                 db  0Eh
.eh_frame:00000000000057BB                 db  10h
.eh_frame:00000000000057BC                 db  8Fh
.eh_frame:00000000000057BD                 db    2
.eh_frame:00000000000057BE                 db  42h ; B
.eh_frame:00000000000057BF                 db  0Eh
.eh_frame:00000000000057C0                 db  18h
.eh_frame:00000000000057C1                 db  8Eh
.eh_frame:00000000000057C2                 db    3
.eh_frame:00000000000057C3                 db  49h ; I
.eh_frame:00000000000057C4                 db  0Eh
.eh_frame:00000000000057C5                 db  20h
.eh_frame:00000000000057C6                 db  8Dh
.eh_frame:00000000000057C7                 db    4
.eh_frame:00000000000057C8                 db  42h ; B
.eh_frame:00000000000057C9                 db  0Eh
.eh_frame:00000000000057CA                 db  28h ; (
.eh_frame:00000000000057CB                 db  8Ch
.eh_frame:00000000000057CC                 db    5
.eh_frame:00000000000057CD                 db  44h ; D
.eh_frame:00000000000057CE                 db  0Eh
.eh_frame:00000000000057CF                 db  30h ; 0
.eh_frame:00000000000057D0                 db  86h
.eh_frame:00000000000057D1                 db    6
.eh_frame:00000000000057D2                 db  41h ; A
.eh_frame:00000000000057D3                 db  0Eh
.eh_frame:00000000000057D4                 db  38h ; 8
.eh_frame:00000000000057D5                 db  83h
.eh_frame:00000000000057D6                 db    7
.eh_frame:00000000000057D7                 db  4Dh ; M
.eh_frame:00000000000057D8                 db  0Eh
.eh_frame:00000000000057D9                 db  50h ; P
.eh_frame:00000000000057DA                 db  5Fh ; _
.eh_frame:00000000000057DB                 db  0Eh
.eh_frame:00000000000057DC                 db  58h ; X
.eh_frame:00000000000057DD                 db  47h ; G
.eh_frame:00000000000057DE                 db  0Eh
.eh_frame:00000000000057DF                 db  60h ; `
.eh_frame:00000000000057E0                 db  46h ; F
.eh_frame:00000000000057E1                 db  0Eh
.eh_frame:00000000000057E2                 db  68h ; h
.eh_frame:00000000000057E3                 db  44h ; D
.eh_frame:00000000000057E4                 db  0Eh
.eh_frame:00000000000057E5                 db  70h ; p
.eh_frame:00000000000057E6                 db  58h ; X
.eh_frame:00000000000057E7                 db  0Eh
.eh_frame:00000000000057E8                 db  38h ; 8
.eh_frame:00000000000057E9                 db  41h ; A
.eh_frame:00000000000057EA                 db  0Eh
.eh_frame:00000000000057EB                 db  30h ; 0
.eh_frame:00000000000057EC                 db  41h ; A
.eh_frame:00000000000057ED                 db  0Eh
.eh_frame:00000000000057EE                 db  28h ; (
.eh_frame:00000000000057EF                 db  42h ; B
.eh_frame:00000000000057F0                 db  0Eh
.eh_frame:00000000000057F1                 db  20h
.eh_frame:00000000000057F2                 db  42h ; B
.eh_frame:00000000000057F3                 db  0Eh
.eh_frame:00000000000057F4                 db  18h
.eh_frame:00000000000057F5                 db  42h ; B
.eh_frame:00000000000057F6                 db  0Eh
.eh_frame:00000000000057F7                 db  10h
.eh_frame:00000000000057F8                 db  42h ; B
.eh_frame:00000000000057F9                 db  0Eh
.eh_frame:00000000000057FA                 db    8
.eh_frame:00000000000057FB                 db    0
.eh_frame:00000000000057FC                 db  68h ; h
.eh_frame:00000000000057FD                 db    0
.eh_frame:00000000000057FE                 db    0
.eh_frame:00000000000057FF                 db    0
.eh_frame:0000000000005800                 db 0D0h
.eh_frame:0000000000005801                 db    3
.eh_frame:0000000000005802                 db    0
.eh_frame:0000000000005803                 db    0
.eh_frame:0000000000005804                 db  0Ch
.eh_frame:0000000000005805                 db 0DCh
.eh_frame:0000000000005806                 db 0FFh
.eh_frame:0000000000005807                 db 0FFh
.eh_frame:0000000000005808                 db 0E3h
.eh_frame:0000000000005809                 db    0
.eh_frame:000000000000580A                 db    0
.eh_frame:000000000000580B                 db    0
.eh_frame:000000000000580C                 db    0
.eh_frame:000000000000580D                 db  42h ; B
.eh_frame:000000000000580E                 db  0Eh
.eh_frame:000000000000580F                 db  10h
.eh_frame:0000000000005810                 db  8Fh
.eh_frame:0000000000005811                 db    2
.eh_frame:0000000000005812                 db  42h ; B
.eh_frame:0000000000005813                 db  0Eh
.eh_frame:0000000000005814                 db  18h
.eh_frame:0000000000005815                 db  8Eh
.eh_frame:0000000000005816                 db    3
.eh_frame:0000000000005817                 db  49h ; I
.eh_frame:0000000000005818                 db  0Eh
.eh_frame:0000000000005819                 db  20h
.eh_frame:000000000000581A                 db  8Dh
.eh_frame:000000000000581B                 db    4
.eh_frame:000000000000581C                 db  42h ; B
.eh_frame:000000000000581D                 db  0Eh
.eh_frame:000000000000581E                 db  28h ; (
.eh_frame:000000000000581F                 db  8Ch
.eh_frame:0000000000005820                 db    5
.eh_frame:0000000000005821                 db  44h ; D
.eh_frame:0000000000005822                 db  0Eh
.eh_frame:0000000000005823                 db  30h ; 0
.eh_frame:0000000000005824                 db  86h
.eh_frame:0000000000005825                 db    6
.eh_frame:0000000000005826                 db  41h ; A
.eh_frame:0000000000005827                 db  0Eh
.eh_frame:0000000000005828                 db  38h ; 8
.eh_frame:0000000000005829                 db  83h
.eh_frame:000000000000582A                 db    7
.eh_frame:000000000000582B                 db  4Dh ; M
.eh_frame:000000000000582C                 db  0Eh
.eh_frame:000000000000582D                 db  70h ; p
.eh_frame:000000000000582E                 db  65h ; e
.eh_frame:000000000000582F                 db  0Eh
.eh_frame:0000000000005830                 db  78h ; x
.eh_frame:0000000000005831                 db  4Dh ; M
.eh_frame:0000000000005832                 db  0Eh
.eh_frame:0000000000005833                 db  80h
.eh_frame:0000000000005834                 db    1
.eh_frame:0000000000005835                 db  46h ; F
.eh_frame:0000000000005836                 db  0Eh
.eh_frame:0000000000005837                 db  88h
.eh_frame:0000000000005838                 db    1
.eh_frame:0000000000005839                 db  42h ; B
.eh_frame:000000000000583A                 db  0Eh
.eh_frame:000000000000583B                 db  90h
.eh_frame:000000000000583C                 db    1
.eh_frame:000000000000583D                 db  5Eh ; ^
.eh_frame:000000000000583E                 db  0Eh
.eh_frame:000000000000583F                 db  70h ; p
.eh_frame:0000000000005840                 db  56h ; V
.eh_frame:0000000000005841                 db  0Eh
.eh_frame:0000000000005842                 db  78h ; x
.eh_frame:0000000000005843                 db  43h ; C
.eh_frame:0000000000005844                 db  0Eh
.eh_frame:0000000000005845                 db  80h
.eh_frame:0000000000005846                 db    1
.eh_frame:0000000000005847                 db  43h ; C
.eh_frame:0000000000005848                 db  0Eh
.eh_frame:0000000000005849                 db  88h
.eh_frame:000000000000584A                 db    1
.eh_frame:000000000000584B                 db  56h ; V
.eh_frame:000000000000584C                 db  0Eh
.eh_frame:000000000000584D                 db  90h
.eh_frame:000000000000584E                 db    1
.eh_frame:000000000000584F                 db  52h ; R
.eh_frame:0000000000005850                 db  0Eh
.eh_frame:0000000000005851                 db  70h ; p
.eh_frame:0000000000005852                 db  5Bh ; [
.eh_frame:0000000000005853                 db  0Eh
.eh_frame:0000000000005854                 db  38h ; 8
.eh_frame:0000000000005855                 db  41h ; A
.eh_frame:0000000000005856                 db  0Eh
.eh_frame:0000000000005857                 db  30h ; 0
.eh_frame:0000000000005858                 db  41h ; A
.eh_frame:0000000000005859                 db  0Eh
.eh_frame:000000000000585A                 db  28h ; (
.eh_frame:000000000000585B                 db  42h ; B
.eh_frame:000000000000585C                 db  0Eh
.eh_frame:000000000000585D                 db  20h
.eh_frame:000000000000585E                 db  42h ; B
.eh_frame:000000000000585F                 db  0Eh
.eh_frame:0000000000005860                 db  18h
.eh_frame:0000000000005861                 db  42h ; B
.eh_frame:0000000000005862                 db  0Eh
.eh_frame:0000000000005863                 db  10h
.eh_frame:0000000000005864                 db  42h ; B
.eh_frame:0000000000005865                 db  0Eh
.eh_frame:0000000000005866                 db    8
.eh_frame:0000000000005867                 db    0
.eh_frame:0000000000005868                 db  10h
.eh_frame:0000000000005869                 db    0
.eh_frame:000000000000586A                 db    0
.eh_frame:000000000000586B                 db    0
.eh_frame:000000000000586C                 db  3Ch ; <
.eh_frame:000000000000586D                 db    4
.eh_frame:000000000000586E                 db    0
.eh_frame:000000000000586F                 db    0
.eh_frame:0000000000005870                 db  90h
.eh_frame:0000000000005871                 db 0DCh
.eh_frame:0000000000005872                 db 0FFh
.eh_frame:0000000000005873                 db 0FFh
.eh_frame:0000000000005874                 db  0Ah
.eh_frame:0000000000005875                 db    0
.eh_frame:0000000000005876                 db    0
.eh_frame:0000000000005877                 db    0
.eh_frame:0000000000005878                 db    0
.eh_frame:0000000000005879                 db    0
.eh_frame:000000000000587A                 db    0
.eh_frame:000000000000587B                 db    0
.eh_frame:000000000000587C                 db  28h ; (
.eh_frame:000000000000587D                 db    0
.eh_frame:000000000000587E                 db    0
.eh_frame:000000000000587F                 db    0
.eh_frame:0000000000005880                 db  50h ; P
.eh_frame:0000000000005881                 db    4
.eh_frame:0000000000005882                 db    0
.eh_frame:0000000000005883                 db    0
.eh_frame:0000000000005884                 db  8Ch
.eh_frame:0000000000005885                 db 0DCh
.eh_frame:0000000000005886                 db 0FFh
.eh_frame:0000000000005887                 db 0FFh
.eh_frame:0000000000005888                 db  93h
.eh_frame:0000000000005889                 db    0
.eh_frame:000000000000588A                 db    0
.eh_frame:000000000000588B                 db    0
.eh_frame:000000000000588C                 db    0
.eh_frame:000000000000588D                 db  48h ; H
.eh_frame:000000000000588E                 db  0Eh
.eh_frame:000000000000588F                 db  10h
.eh_frame:0000000000005890                 db  8Ch
.eh_frame:0000000000005891                 db    2
.eh_frame:0000000000005892                 db  48h ; H
.eh_frame:0000000000005893                 db  0Eh
.eh_frame:0000000000005894                 db  18h
.eh_frame:0000000000005895                 db  86h
.eh_frame:0000000000005896                 db    3
.eh_frame:0000000000005897                 db  41h ; A
.eh_frame:0000000000005898                 db  0Eh
.eh_frame:0000000000005899                 db  20h
.eh_frame:000000000000589A                 db  83h
.eh_frame:000000000000589B                 db    4
.eh_frame:000000000000589C                 db    2
.eh_frame:000000000000589D                 db  74h ; t
.eh_frame:000000000000589E                 db  0Eh
.eh_frame:000000000000589F                 db  18h
.eh_frame:00000000000058A0                 db  4Bh ; K
.eh_frame:00000000000058A1                 db  0Eh
.eh_frame:00000000000058A2                 db  10h
.eh_frame:00000000000058A3                 db  42h ; B
.eh_frame:00000000000058A4                 db  0Eh
.eh_frame:00000000000058A5                 db    8
.eh_frame:00000000000058A6                 db    0
.eh_frame:00000000000058A7                 db    0
.eh_frame:00000000000058A8                 db  10h
.eh_frame:00000000000058A9                 db    0
.eh_frame:00000000000058AA                 db    0
.eh_frame:00000000000058AB                 db    0
.eh_frame:00000000000058AC                 db  7Ch ; |
.eh_frame:00000000000058AD                 db    4
.eh_frame:00000000000058AE                 db    0
.eh_frame:00000000000058AF                 db    0
.eh_frame:00000000000058B0                 db    0
.eh_frame:00000000000058B1                 db 0DDh
.eh_frame:00000000000058B2                 db 0FFh
.eh_frame:00000000000058B3                 db 0FFh
.eh_frame:00000000000058B4                 db  13h
.eh_frame:00000000000058B5                 db    0
.eh_frame:00000000000058B6                 db    0
.eh_frame:00000000000058B7                 db    0
.eh_frame:00000000000058B8                 db    0
.eh_frame:00000000000058B9                 db    0
.eh_frame:00000000000058BA                 db    0
.eh_frame:00000000000058BB                 db    0
.eh_frame:00000000000058BC                 db  10h
.eh_frame:00000000000058BD                 db    0
.eh_frame:00000000000058BE                 db    0
.eh_frame:00000000000058BF                 db    0
.eh_frame:00000000000058C0                 db  90h
.eh_frame:00000000000058C1                 db    4
.eh_frame:00000000000058C2                 db    0
.eh_frame:00000000000058C3                 db    0
.eh_frame:00000000000058C4                 db  0Ch
.eh_frame:00000000000058C5                 db 0DDh
.eh_frame:00000000000058C6                 db 0FFh
.eh_frame:00000000000058C7                 db 0FFh
.eh_frame:00000000000058C8                 db  0Ch
.eh_frame:00000000000058C9                 db    0
.eh_frame:00000000000058CA                 db    0
.eh_frame:00000000000058CB                 db    0
.eh_frame:00000000000058CC                 db    0
.eh_frame:00000000000058CD                 db    0
.eh_frame:00000000000058CE                 db    0
.eh_frame:00000000000058CF                 db    0
.eh_frame:00000000000058D0                 db  10h
.eh_frame:00000000000058D1                 db    0
.eh_frame:00000000000058D2                 db    0
.eh_frame:00000000000058D3                 db    0
.eh_frame:00000000000058D4                 db 0A4h
.eh_frame:00000000000058D5                 db    4
.eh_frame:00000000000058D6                 db    0
.eh_frame:00000000000058D7                 db    0
.eh_frame:00000000000058D8                 db    8
.eh_frame:00000000000058D9                 db 0DDh
.eh_frame:00000000000058DA                 db 0FFh
.eh_frame:00000000000058DB                 db 0FFh
.eh_frame:00000000000058DC                 db  18h
.eh_frame:00000000000058DD                 db    0
.eh_frame:00000000000058DE                 db    0
.eh_frame:00000000000058DF                 db    0
.eh_frame:00000000000058E0                 db    0
.eh_frame:00000000000058E1                 db    0
.eh_frame:00000000000058E2                 db    0
.eh_frame:00000000000058E3                 db    0
.eh_frame:00000000000058E4                 db  10h
.eh_frame:00000000000058E5                 db    0
.eh_frame:00000000000058E6                 db    0
.eh_frame:00000000000058E7                 db    0
.eh_frame:00000000000058E8                 db 0B8h
.eh_frame:00000000000058E9                 db    4
.eh_frame:00000000000058EA                 db    0
.eh_frame:00000000000058EB                 db    0
.eh_frame:00000000000058EC                 db  14h
.eh_frame:00000000000058ED                 db 0DDh
.eh_frame:00000000000058EE                 db 0FFh
.eh_frame:00000000000058EF                 db 0FFh
.eh_frame:00000000000058F0                 db  14h
.eh_frame:00000000000058F1                 db    0
.eh_frame:00000000000058F2                 db    0
.eh_frame:00000000000058F3                 db    0
.eh_frame:00000000000058F4                 db    0
.eh_frame:00000000000058F5                 db    0
.eh_frame:00000000000058F6                 db    0
.eh_frame:00000000000058F7                 db    0
.eh_frame:00000000000058F8                 db  18h
.eh_frame:00000000000058F9                 db    0
.eh_frame:00000000000058FA                 db    0
.eh_frame:00000000000058FB                 db    0
.eh_frame:00000000000058FC                 db 0CCh
.eh_frame:00000000000058FD                 db    4
.eh_frame:00000000000058FE                 db    0
.eh_frame:00000000000058FF                 db    0
.eh_frame:0000000000005900                 db  20h
.eh_frame:0000000000005901                 db 0DDh
.eh_frame:0000000000005902                 db 0FFh
.eh_frame:0000000000005903                 db 0FFh
.eh_frame:0000000000005904                 db  8Eh
.eh_frame:0000000000005905                 db    0
.eh_frame:0000000000005906                 db    0
.eh_frame:0000000000005907                 db    0
.eh_frame:0000000000005908                 db    0
.eh_frame:0000000000005909                 db  44h ; D
.eh_frame:000000000000590A                 db  0Eh
.eh_frame:000000000000590B                 db  50h ; P
.eh_frame:000000000000590C                 db    2
.eh_frame:000000000000590D                 db  7Fh ; 
.eh_frame:000000000000590E                 db  0Ah
.eh_frame:000000000000590F                 db  0Eh
.eh_frame:0000000000005910                 db    8
.eh_frame:0000000000005911                 db  41h ; A
.eh_frame:0000000000005912                 db  0Bh
.eh_frame:0000000000005913                 db    0
.eh_frame:0000000000005914                 db  18h
.eh_frame:0000000000005915                 db    0
.eh_frame:0000000000005916                 db    0
.eh_frame:0000000000005917                 db    0
.eh_frame:0000000000005918                 db 0E8h
.eh_frame:0000000000005919                 db    4
.eh_frame:000000000000591A                 db    0
.eh_frame:000000000000591B                 db    0
.eh_frame:000000000000591C                 db  94h
.eh_frame:000000000000591D                 db 0DDh
.eh_frame:000000000000591E                 db 0FFh
.eh_frame:000000000000591F                 db 0FFh
.eh_frame:0000000000005920                 db  8Ah
.eh_frame:0000000000005921                 db    0
.eh_frame:0000000000005922                 db    0
.eh_frame:0000000000005923                 db    0
.eh_frame:0000000000005924                 db    0
.eh_frame:0000000000005925                 db  44h ; D
.eh_frame:0000000000005926                 db  0Eh
.eh_frame:0000000000005927                 db  50h ; P
.eh_frame:0000000000005928                 db    2
.eh_frame:0000000000005929                 db  7Bh ; {
.eh_frame:000000000000592A                 db  0Ah
.eh_frame:000000000000592B                 db  0Eh
.eh_frame:000000000000592C                 db    8
.eh_frame:000000000000592D                 db  41h ; A
.eh_frame:000000000000592E                 db  0Bh
.eh_frame:000000000000592F                 db    0
.eh_frame:0000000000005930                 db  10h
.eh_frame:0000000000005931                 db    0
.eh_frame:0000000000005932                 db    0
.eh_frame:0000000000005933                 db    0
.eh_frame:0000000000005934                 db    4
.eh_frame:0000000000005935                 db    5
.eh_frame:0000000000005936                 db    0
.eh_frame:0000000000005937                 db    0
.eh_frame:0000000000005938                 db    8
.eh_frame:0000000000005939                 db 0DEh
.eh_frame:000000000000593A                 db 0FFh
.eh_frame:000000000000593B                 db 0FFh
.eh_frame:000000000000593C                 db  0Ch
.eh_frame:000000000000593D                 db    0
.eh_frame:000000000000593E                 db    0
.eh_frame:000000000000593F                 db    0
.eh_frame:0000000000005940                 db    0
.eh_frame:0000000000005941                 db    0
.eh_frame:0000000000005942                 db    0
.eh_frame:0000000000005943                 db    0
.eh_frame:0000000000005944                 db  10h
.eh_frame:0000000000005945                 db    0
.eh_frame:0000000000005946                 db    0
.eh_frame:0000000000005947                 db    0
.eh_frame:0000000000005948                 db  18h
.eh_frame:0000000000005949                 db    5
.eh_frame:000000000000594A                 db    0
.eh_frame:000000000000594B                 db    0
.eh_frame:000000000000594C                 db    4
.eh_frame:000000000000594D                 db 0DEh
.eh_frame:000000000000594E                 db 0FFh
.eh_frame:000000000000594F                 db 0FFh
.eh_frame:0000000000005950                 db  0Fh
.eh_frame:0000000000005951                 db    0
.eh_frame:0000000000005952                 db    0
.eh_frame:0000000000005953                 db    0
.eh_frame:0000000000005954                 db    0
.eh_frame:0000000000005955                 db    0
.eh_frame:0000000000005956                 db    0
.eh_frame:0000000000005957                 db    0
.eh_frame:0000000000005958                 db  18h
.eh_frame:0000000000005959                 db    0
.eh_frame:000000000000595A                 db    0
.eh_frame:000000000000595B                 db    0
.eh_frame:000000000000595C                 db  2Ch ; ,
.eh_frame:000000000000595D                 db    5
.eh_frame:000000000000595E                 db    0
.eh_frame:000000000000595F                 db    0
.eh_frame:0000000000005960                 db    0
.eh_frame:0000000000005961                 db 0DEh
.eh_frame:0000000000005962                 db 0FFh
.eh_frame:0000000000005963                 db 0FFh
.eh_frame:0000000000005964                 db  98h
.eh_frame:0000000000005965                 db    0
.eh_frame:0000000000005966                 db    0
.eh_frame:0000000000005967                 db    0
.eh_frame:0000000000005968                 db    0
.eh_frame:0000000000005969                 db  44h ; D
.eh_frame:000000000000596A                 db  0Eh
.eh_frame:000000000000596B                 db  50h ; P
.eh_frame:000000000000596C                 db    2
.eh_frame:000000000000596D                 db  8Eh
.eh_frame:000000000000596E                 db  0Ah
.eh_frame:000000000000596F                 db  0Eh
.eh_frame:0000000000005970                 db    8
.eh_frame:0000000000005971                 db  41h ; A
.eh_frame:0000000000005972                 db  0Bh
.eh_frame:0000000000005973                 db    0
.eh_frame:0000000000005974                 db  10h
.eh_frame:0000000000005975                 db    0
.eh_frame:0000000000005976                 db    0
.eh_frame:0000000000005977                 db    0
.eh_frame:0000000000005978                 db  48h ; H
.eh_frame:0000000000005979                 db    5
.eh_frame:000000000000597A                 db    0
.eh_frame:000000000000597B                 db    0
.eh_frame:000000000000597C                 db  84h
.eh_frame:000000000000597D                 db 0DEh
.eh_frame:000000000000597E                 db 0FFh
.eh_frame:000000000000597F                 db 0FFh
.eh_frame:0000000000005980                 db  10h
.eh_frame:0000000000005981                 db    0
.eh_frame:0000000000005982                 db    0
.eh_frame:0000000000005983                 db    0
.eh_frame:0000000000005984                 db    0
.eh_frame:0000000000005985                 db    0
.eh_frame:0000000000005986                 db    0
.eh_frame:0000000000005987                 db    0
.eh_frame:0000000000005988                 db  10h
.eh_frame:0000000000005989                 db    0
.eh_frame:000000000000598A                 db    0
.eh_frame:000000000000598B                 db    0
.eh_frame:000000000000598C                 db  5Ch ; \
.eh_frame:000000000000598D                 db    5
.eh_frame:000000000000598E                 db    0
.eh_frame:000000000000598F                 db    0
.eh_frame:0000000000005990                 db  80h
.eh_frame:0000000000005991                 db 0DEh
.eh_frame:0000000000005992                 db 0FFh
.eh_frame:0000000000005993                 db 0FFh
.eh_frame:0000000000005994                 db  11h
.eh_frame:0000000000005995                 db    0
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db    0
.eh_frame:0000000000005999                 db    0
.eh_frame:000000000000599A                 db    0
.eh_frame:000000000000599B                 db    0
.eh_frame:000000000000599C                 db  10h
.eh_frame:000000000000599D                 db    0
.eh_frame:000000000000599E                 db    0
.eh_frame:000000000000599F                 db    0
.eh_frame:00000000000059A0                 db  70h ; p
.eh_frame:00000000000059A1                 db    5
.eh_frame:00000000000059A2                 db    0
.eh_frame:00000000000059A3                 db    0
.eh_frame:00000000000059A4                 db  8Ch
.eh_frame:00000000000059A5                 db 0DEh
.eh_frame:00000000000059A6                 db 0FFh
.eh_frame:00000000000059A7                 db 0FFh
.eh_frame:00000000000059A8                 db  0Ah
.eh_frame:00000000000059A9                 db    0
.eh_frame:00000000000059AA                 db    0
.eh_frame:00000000000059AB                 db    0
.eh_frame:00000000000059AC                 db    0
.eh_frame:00000000000059AD                 db    0
.eh_frame:00000000000059AE                 db    0
.eh_frame:00000000000059AF                 db    0
.eh_frame:00000000000059B0                 db  18h
.eh_frame:00000000000059B1                 db    0
.eh_frame:00000000000059B2                 db    0
.eh_frame:00000000000059B3                 db    0
.eh_frame:00000000000059B4                 db  84h
.eh_frame:00000000000059B5                 db    5
.eh_frame:00000000000059B6                 db    0
.eh_frame:00000000000059B7                 db    0
.eh_frame:00000000000059B8                 db  88h
.eh_frame:00000000000059B9                 db 0DEh
.eh_frame:00000000000059BA                 db 0FFh
.eh_frame:00000000000059BB                 db 0FFh
.eh_frame:00000000000059BC                 db  8Eh
.eh_frame:00000000000059BD                 db    0
.eh_frame:00000000000059BE                 db    0
.eh_frame:00000000000059BF                 db    0
.eh_frame:00000000000059C0                 db    0
.eh_frame:00000000000059C1                 db  44h ; D
.eh_frame:00000000000059C2                 db  0Eh
.eh_frame:00000000000059C3                 db  50h ; P
.eh_frame:00000000000059C4                 db    2
.eh_frame:00000000000059C5                 db  7Fh ; 
.eh_frame:00000000000059C6                 db  0Ah
.eh_frame:00000000000059C7                 db  0Eh
.eh_frame:00000000000059C8                 db    8
.eh_frame:00000000000059C9                 db  41h ; A
.eh_frame:00000000000059CA                 db  0Bh
.eh_frame:00000000000059CB                 db    0
.eh_frame:00000000000059CC                 db  18h
.eh_frame:00000000000059CD                 db    0
.eh_frame:00000000000059CE                 db    0
.eh_frame:00000000000059CF                 db    0
.eh_frame:00000000000059D0                 db 0A0h
.eh_frame:00000000000059D1                 db    5
.eh_frame:00000000000059D2                 db    0
.eh_frame:00000000000059D3                 db    0
.eh_frame:00000000000059D4                 db 0FCh
.eh_frame:00000000000059D5                 db 0DEh
.eh_frame:00000000000059D6                 db 0FFh
.eh_frame:00000000000059D7                 db 0FFh
.eh_frame:00000000000059D8                 db  91h
.eh_frame:00000000000059D9                 db    0
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db    0
.eh_frame:00000000000059DD                 db  44h ; D
.eh_frame:00000000000059DE                 db  0Eh
.eh_frame:00000000000059DF                 db  50h ; P
.eh_frame:00000000000059E0                 db    2
.eh_frame:00000000000059E1                 db  82h
.eh_frame:00000000000059E2                 db  0Ah
.eh_frame:00000000000059E3                 db  0Eh
.eh_frame:00000000000059E4                 db    8
.eh_frame:00000000000059E5                 db  41h ; A
.eh_frame:00000000000059E6                 db  0Bh
.eh_frame:00000000000059E7                 db    0
.eh_frame:00000000000059E8                 db  10h
.eh_frame:00000000000059E9                 db    0
.eh_frame:00000000000059EA                 db    0
.eh_frame:00000000000059EB                 db    0
.eh_frame:00000000000059EC                 db 0BCh
.eh_frame:00000000000059ED                 db    5
.eh_frame:00000000000059EE                 db    0
.eh_frame:00000000000059EF                 db    0
.eh_frame:00000000000059F0                 db  80h
.eh_frame:00000000000059F1                 db 0DFh
.eh_frame:00000000000059F2                 db 0FFh
.eh_frame:00000000000059F3                 db 0FFh
.eh_frame:00000000000059F4                 db  0Ch
.eh_frame:00000000000059F5                 db    0
.eh_frame:00000000000059F6                 db    0
.eh_frame:00000000000059F7                 db    0
.eh_frame:00000000000059F8                 db    0
.eh_frame:00000000000059F9                 db    0
.eh_frame:00000000000059FA                 db    0
.eh_frame:00000000000059FB                 db    0
.eh_frame:00000000000059FC                 db  10h
.eh_frame:00000000000059FD                 db    0
.eh_frame:00000000000059FE                 db    0
.eh_frame:00000000000059FF                 db    0
.eh_frame:0000000000005A00                 db 0D0h
.eh_frame:0000000000005A01                 db    5
.eh_frame:0000000000005A02                 db    0
.eh_frame:0000000000005A03                 db    0
.eh_frame:0000000000005A04                 db  7Ch ; |
.eh_frame:0000000000005A05                 db 0DFh
.eh_frame:0000000000005A06                 db 0FFh
.eh_frame:0000000000005A07                 db 0FFh
.eh_frame:0000000000005A08                 db  17h
.eh_frame:0000000000005A09                 db    0
.eh_frame:0000000000005A0A                 db    0
.eh_frame:0000000000005A0B                 db    0
.eh_frame:0000000000005A0C                 db    0
.eh_frame:0000000000005A0D                 db    0
.eh_frame:0000000000005A0E                 db    0
.eh_frame:0000000000005A0F                 db    0
.eh_frame:0000000000005A10                 db  10h
.eh_frame:0000000000005A11                 db    0
.eh_frame:0000000000005A12                 db    0
.eh_frame:0000000000005A13                 db    0
.eh_frame:0000000000005A14                 db 0E4h
.eh_frame:0000000000005A15                 db    5
.eh_frame:0000000000005A16                 db    0
.eh_frame:0000000000005A17                 db    0
.eh_frame:0000000000005A18                 db  88h
.eh_frame:0000000000005A19                 db 0DFh
.eh_frame:0000000000005A1A                 db 0FFh
.eh_frame:0000000000005A1B                 db 0FFh
.eh_frame:0000000000005A1C                 db  13h
.eh_frame:0000000000005A1D                 db    0
.eh_frame:0000000000005A1E                 db    0
.eh_frame:0000000000005A1F                 db    0
.eh_frame:0000000000005A20                 db    0
.eh_frame:0000000000005A21                 db    0
.eh_frame:0000000000005A22                 db    0
.eh_frame:0000000000005A23                 db    0
.eh_frame:0000000000005A24                 db  10h
.eh_frame:0000000000005A25                 db    0
.eh_frame:0000000000005A26                 db    0
.eh_frame:0000000000005A27                 db    0
.eh_frame:0000000000005A28                 db 0F8h
.eh_frame:0000000000005A29                 db    5
.eh_frame:0000000000005A2A                 db    0
.eh_frame:0000000000005A2B                 db    0
.eh_frame:0000000000005A2C                 db  94h
.eh_frame:0000000000005A2D                 db 0DFh
.eh_frame:0000000000005A2E                 db 0FFh
.eh_frame:0000000000005A2F                 db 0FFh
.eh_frame:0000000000005A30                 db  0Ch
.eh_frame:0000000000005A31                 db    0
.eh_frame:0000000000005A32                 db    0
.eh_frame:0000000000005A33                 db    0
.eh_frame:0000000000005A34                 db    0
.eh_frame:0000000000005A35                 db    0
.eh_frame:0000000000005A36                 db    0
.eh_frame:0000000000005A37                 db    0
.eh_frame:0000000000005A38                 db  10h
.eh_frame:0000000000005A39                 db    0
.eh_frame:0000000000005A3A                 db    0
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db  0Ch
.eh_frame:0000000000005A3D                 db    6
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db  90h
.eh_frame:0000000000005A41                 db 0DFh
.eh_frame:0000000000005A42                 db 0FFh
.eh_frame:0000000000005A43                 db 0FFh
.eh_frame:0000000000005A44                 db  14h
.eh_frame:0000000000005A45                 db    0
.eh_frame:0000000000005A46                 db    0
.eh_frame:0000000000005A47                 db    0
.eh_frame:0000000000005A48                 db    0
.eh_frame:0000000000005A49                 db    0
.eh_frame:0000000000005A4A                 db    0
.eh_frame:0000000000005A4B                 db    0
.eh_frame:0000000000005A4C                 db  10h
.eh_frame:0000000000005A4D                 db    0
.eh_frame:0000000000005A4E                 db    0
.eh_frame:0000000000005A4F                 db    0
.eh_frame:0000000000005A50                 db  20h
.eh_frame:0000000000005A51                 db    6
.eh_frame:0000000000005A52                 db    0
.eh_frame:0000000000005A53                 db    0
.eh_frame:0000000000005A54                 db  9Ch
.eh_frame:0000000000005A55                 db 0DFh
.eh_frame:0000000000005A56                 db 0FFh
.eh_frame:0000000000005A57                 db 0FFh
.eh_frame:0000000000005A58                 db  13h
.eh_frame:0000000000005A59                 db    0
.eh_frame:0000000000005A5A                 db    0
.eh_frame:0000000000005A5B                 db    0
.eh_frame:0000000000005A5C                 db    0
.eh_frame:0000000000005A5D                 db    0
.eh_frame:0000000000005A5E                 db    0
.eh_frame:0000000000005A5F                 db    0
.eh_frame:0000000000005A60                 db  14h
.eh_frame:0000000000005A61                 db    0
.eh_frame:0000000000005A62                 db    0
.eh_frame:0000000000005A63                 db    0
.eh_frame:0000000000005A64                 db  34h ; 4
.eh_frame:0000000000005A65                 db    6
.eh_frame:0000000000005A66                 db    0
.eh_frame:0000000000005A67                 db    0
.eh_frame:0000000000005A68                 db 0A8h
.eh_frame:0000000000005A69                 db 0DFh
.eh_frame:0000000000005A6A                 db 0FFh
.eh_frame:0000000000005A6B                 db 0FFh
.eh_frame:0000000000005A6C                 db  18h
.eh_frame:0000000000005A6D                 db    0
.eh_frame:0000000000005A6E                 db    0
.eh_frame:0000000000005A6F                 db    0
.eh_frame:0000000000005A70                 db    0
.eh_frame:0000000000005A71                 db    0
.eh_frame:0000000000005A72                 db    0
.eh_frame:0000000000005A73                 db    0
.eh_frame:0000000000005A74                 db    0
.eh_frame:0000000000005A75                 db    0
.eh_frame:0000000000005A76                 db    0
.eh_frame:0000000000005A77                 db    0
.eh_frame:0000000000005A78                 db  10h
.eh_frame:0000000000005A79                 db    1
.eh_frame:0000000000005A7A                 db    0
.eh_frame:0000000000005A7B                 db    0
.eh_frame:0000000000005A7C                 db  4Ch ; L
.eh_frame:0000000000005A7D                 db    6
.eh_frame:0000000000005A7E                 db    0
.eh_frame:0000000000005A7F                 db    0
.eh_frame:0000000000005A80                 db 0B0h
.eh_frame:0000000000005A81                 db 0DFh
.eh_frame:0000000000005A82                 db 0FFh
.eh_frame:0000000000005A83                 db 0FFh
.eh_frame:0000000000005A84                 db  17h
.eh_frame:0000000000005A85                 db    4
.eh_frame:0000000000005A86                 db    0
.eh_frame:0000000000005A87                 db    0
.eh_frame:0000000000005A88                 db    0
.eh_frame:0000000000005A89                 db  42h ; B
.eh_frame:0000000000005A8A                 db  0Eh
.eh_frame:0000000000005A8B                 db  10h
.eh_frame:0000000000005A8C                 db  8Fh
.eh_frame:0000000000005A8D                 db    2
.eh_frame:0000000000005A8E                 db  42h ; B
.eh_frame:0000000000005A8F                 db  0Eh
.eh_frame:0000000000005A90                 db  18h
.eh_frame:0000000000005A91                 db  8Eh
.eh_frame:0000000000005A92                 db    3
.eh_frame:0000000000005A93                 db  42h ; B
.eh_frame:0000000000005A94                 db  0Eh
.eh_frame:0000000000005A95                 db  20h
.eh_frame:0000000000005A96                 db  8Dh
.eh_frame:0000000000005A97                 db    4
.eh_frame:0000000000005A98                 db  42h ; B
.eh_frame:0000000000005A99                 db  0Eh
.eh_frame:0000000000005A9A                 db  28h ; (
.eh_frame:0000000000005A9B                 db  8Ch
.eh_frame:0000000000005A9C                 db    5
.eh_frame:0000000000005A9D                 db  44h ; D
.eh_frame:0000000000005A9E                 db  0Eh
.eh_frame:0000000000005A9F                 db  30h ; 0
.eh_frame:0000000000005AA0                 db  86h
.eh_frame:0000000000005AA1                 db    6
.eh_frame:0000000000005AA2                 db  41h ; A
.eh_frame:0000000000005AA3                 db  0Eh
.eh_frame:0000000000005AA4                 db  38h ; 8
.eh_frame:0000000000005AA5                 db  83h
.eh_frame:0000000000005AA6                 db    7
.eh_frame:0000000000005AA7                 db  4Ah ; J
.eh_frame:0000000000005AA8                 db  0Eh
.eh_frame:0000000000005AA9                 db  60h ; `
.eh_frame:0000000000005AAA                 db    2
.eh_frame:0000000000005AAB                 db 0DDh
.eh_frame:0000000000005AAC                 db  0Eh
.eh_frame:0000000000005AAD                 db  68h ; h
.eh_frame:0000000000005AAE                 db  57h ; W
.eh_frame:0000000000005AAF                 db  0Eh
.eh_frame:0000000000005AB0                 db  70h ; p
.eh_frame:0000000000005AB1                 db  42h ; B
.eh_frame:0000000000005AB2                 db  0Eh
.eh_frame:0000000000005AB3                 db  78h ; x
.eh_frame:0000000000005AB4                 db  42h ; B
.eh_frame:0000000000005AB5                 db  0Eh
.eh_frame:0000000000005AB6                 db  80h
.eh_frame:0000000000005AB7                 db    1
.eh_frame:0000000000005AB8                 db  42h ; B
.eh_frame:0000000000005AB9                 db  0Eh
.eh_frame:0000000000005ABA                 db  88h
.eh_frame:0000000000005ABB                 db    1
.eh_frame:0000000000005ABC                 db  42h ; B
.eh_frame:0000000000005ABD                 db  0Eh
.eh_frame:0000000000005ABE                 db  90h
.eh_frame:0000000000005ABF                 db    1
.eh_frame:0000000000005AC0                 db  53h ; S
.eh_frame:0000000000005AC1                 db  0Eh
.eh_frame:0000000000005AC2                 db  60h ; `
.eh_frame:0000000000005AC3                 db  44h ; D
.eh_frame:0000000000005AC4                 db  0Ah
.eh_frame:0000000000005AC5                 db  0Eh
.eh_frame:0000000000005AC6                 db  38h ; 8
.eh_frame:0000000000005AC7                 db  41h ; A
.eh_frame:0000000000005AC8                 db  0Eh
.eh_frame:0000000000005AC9                 db  30h ; 0
.eh_frame:0000000000005ACA                 db  41h ; A
.eh_frame:0000000000005ACB                 db  0Eh
.eh_frame:0000000000005ACC                 db  28h ; (
.eh_frame:0000000000005ACD                 db  42h ; B
.eh_frame:0000000000005ACE                 db  0Eh
.eh_frame:0000000000005ACF                 db  20h
.eh_frame:0000000000005AD0                 db  42h ; B
.eh_frame:0000000000005AD1                 db  0Eh
.eh_frame:0000000000005AD2                 db  18h
.eh_frame:0000000000005AD3                 db  42h ; B
.eh_frame:0000000000005AD4                 db  0Eh
.eh_frame:0000000000005AD5                 db  10h
.eh_frame:0000000000005AD6                 db  42h ; B
.eh_frame:0000000000005AD7                 db  0Eh
.eh_frame:0000000000005AD8                 db    8
.eh_frame:0000000000005AD9                 db  44h ; D
.eh_frame:0000000000005ADA                 db  0Bh
.eh_frame:0000000000005ADB                 db    2
.eh_frame:0000000000005ADC                 db  78h ; x
.eh_frame:0000000000005ADD                 db  0Ah
.eh_frame:0000000000005ADE                 db  0Eh
.eh_frame:0000000000005ADF                 db  68h ; h
.eh_frame:0000000000005AE0                 db  48h ; H
.eh_frame:0000000000005AE1                 db  0Bh
.eh_frame:0000000000005AE2                 db  5Ah ; Z
.eh_frame:0000000000005AE3                 db  0Ah
.eh_frame:0000000000005AE4                 db  0Eh
.eh_frame:0000000000005AE5                 db  38h ; 8
.eh_frame:0000000000005AE6                 db  47h ; G
.eh_frame:0000000000005AE7                 db  0Eh
.eh_frame:0000000000005AE8                 db  30h ; 0
.eh_frame:0000000000005AE9                 db  41h ; A
.eh_frame:0000000000005AEA                 db  0Eh
.eh_frame:0000000000005AEB                 db  28h ; (
.eh_frame:0000000000005AEC                 db  42h ; B
.eh_frame:0000000000005AED                 db  0Eh
.eh_frame:0000000000005AEE                 db  20h
.eh_frame:0000000000005AEF                 db  42h ; B
.eh_frame:0000000000005AF0                 db  0Eh
.eh_frame:0000000000005AF1                 db  18h
.eh_frame:0000000000005AF2                 db  42h ; B
.eh_frame:0000000000005AF3                 db  0Eh
.eh_frame:0000000000005AF4                 db  10h
.eh_frame:0000000000005AF5                 db  42h ; B
.eh_frame:0000000000005AF6                 db  0Eh
.eh_frame:0000000000005AF7                 db    8
.eh_frame:0000000000005AF8                 db  56h ; V
.eh_frame:0000000000005AF9                 db  0Bh
.eh_frame:0000000000005AFA                 db  5Eh ; ^
.eh_frame:0000000000005AFB                 db  0Ah
.eh_frame:0000000000005AFC                 db  0Eh
.eh_frame:0000000000005AFD                 db  38h ; 8
.eh_frame:0000000000005AFE                 db  52h ; R
.eh_frame:0000000000005AFF                 db  0Eh
.eh_frame:0000000000005B00                 db  30h ; 0
.eh_frame:0000000000005B01                 db  41h ; A
.eh_frame:0000000000005B02                 db  0Eh
.eh_frame:0000000000005B03                 db  28h ; (
.eh_frame:0000000000005B04                 db  42h ; B
.eh_frame:0000000000005B05                 db  0Eh
.eh_frame:0000000000005B06                 db  20h
.eh_frame:0000000000005B07                 db  42h ; B
.eh_frame:0000000000005B08                 db  0Eh
.eh_frame:0000000000005B09                 db  18h
.eh_frame:0000000000005B0A                 db  42h ; B
.eh_frame:0000000000005B0B                 db  0Eh
.eh_frame:0000000000005B0C                 db  10h
.eh_frame:0000000000005B0D                 db  42h ; B
.eh_frame:0000000000005B0E                 db  0Eh
.eh_frame:0000000000005B0F                 db    8
.eh_frame:0000000000005B10                 db  4Fh ; O
.eh_frame:0000000000005B11                 db  0Bh
.eh_frame:0000000000005B12                 db  62h ; b
.eh_frame:0000000000005B13                 db  0Ah
.eh_frame:0000000000005B14                 db  0Eh
.eh_frame:0000000000005B15                 db  38h ; 8
.eh_frame:0000000000005B16                 db  50h ; P
.eh_frame:0000000000005B17                 db  0Eh
.eh_frame:0000000000005B18                 db  30h ; 0
.eh_frame:0000000000005B19                 db  41h ; A
.eh_frame:0000000000005B1A                 db  0Eh
.eh_frame:0000000000005B1B                 db  28h ; (
.eh_frame:0000000000005B1C                 db  42h ; B
.eh_frame:0000000000005B1D                 db  0Eh
.eh_frame:0000000000005B1E                 db  20h
.eh_frame:0000000000005B1F                 db  42h ; B
.eh_frame:0000000000005B20                 db  0Eh
.eh_frame:0000000000005B21                 db  18h
.eh_frame:0000000000005B22                 db  42h ; B
.eh_frame:0000000000005B23                 db  0Eh
.eh_frame:0000000000005B24                 db  10h
.eh_frame:0000000000005B25                 db  42h ; B
.eh_frame:0000000000005B26                 db  0Eh
.eh_frame:0000000000005B27                 db    8
.eh_frame:0000000000005B28                 db  55h ; U
.eh_frame:0000000000005B29                 db  0Bh
.eh_frame:0000000000005B2A                 db  66h ; f
.eh_frame:0000000000005B2B                 db  0Eh
.eh_frame:0000000000005B2C                 db  68h ; h
.eh_frame:0000000000005B2D                 db  42h ; B
.eh_frame:0000000000005B2E                 db  0Eh
.eh_frame:0000000000005B2F                 db  70h ; p
.eh_frame:0000000000005B30                 db  5Ch ; \
.eh_frame:0000000000005B31                 db  0Eh
.eh_frame:0000000000005B32                 db  68h ; h
.eh_frame:0000000000005B33                 db  41h ; A
.eh_frame:0000000000005B34                 db  0Eh
.eh_frame:0000000000005B35                 db  60h ; `
.eh_frame:0000000000005B36                 db  44h ; D
.eh_frame:0000000000005B37                 db  0Ah
.eh_frame:0000000000005B38                 db  0Eh
.eh_frame:0000000000005B39                 db  38h ; 8
.eh_frame:0000000000005B3A                 db  41h ; A
.eh_frame:0000000000005B3B                 db  0Eh
.eh_frame:0000000000005B3C                 db  30h ; 0
.eh_frame:0000000000005B3D                 db  41h ; A
.eh_frame:0000000000005B3E                 db  0Eh
.eh_frame:0000000000005B3F                 db  28h ; (
.eh_frame:0000000000005B40                 db  42h ; B
.eh_frame:0000000000005B41                 db  0Eh
.eh_frame:0000000000005B42                 db  20h
.eh_frame:0000000000005B43                 db  42h ; B
.eh_frame:0000000000005B44                 db  0Eh
.eh_frame:0000000000005B45                 db  18h
.eh_frame:0000000000005B46                 db  42h ; B
.eh_frame:0000000000005B47                 db  0Eh
.eh_frame:0000000000005B48                 db  10h
.eh_frame:0000000000005B49                 db  42h ; B
.eh_frame:0000000000005B4A                 db  0Eh
.eh_frame:0000000000005B4B                 db    8
.eh_frame:0000000000005B4C                 db  45h ; E
.eh_frame:0000000000005B4D                 db  0Bh
.eh_frame:0000000000005B4E                 db  68h ; h
.eh_frame:0000000000005B4F                 db  0Ah
.eh_frame:0000000000005B50                 db  0Eh
.eh_frame:0000000000005B51                 db  68h ; h
.eh_frame:0000000000005B52                 db  48h ; H
.eh_frame:0000000000005B53                 db  0Bh
.eh_frame:0000000000005B54                 db  72h ; r
.eh_frame:0000000000005B55                 db  0Eh
.eh_frame:0000000000005B56                 db  68h ; h
.eh_frame:0000000000005B57                 db  45h ; E
.eh_frame:0000000000005B58                 db  0Eh
.eh_frame:0000000000005B59                 db  70h ; p
.eh_frame:0000000000005B5A                 db  42h ; B
.eh_frame:0000000000005B5B                 db  0Eh
.eh_frame:0000000000005B5C                 db  78h ; x
.eh_frame:0000000000005B5D                 db  42h ; B
.eh_frame:0000000000005B5E                 db  0Eh
.eh_frame:0000000000005B5F                 db  80h
.eh_frame:0000000000005B60                 db    1
.eh_frame:0000000000005B61                 db  5Eh ; ^
.eh_frame:0000000000005B62                 db  0Eh
.eh_frame:0000000000005B63                 db  60h ; `
.eh_frame:0000000000005B64                 db  44h ; D
.eh_frame:0000000000005B65                 db  0Ah
.eh_frame:0000000000005B66                 db  0Eh
.eh_frame:0000000000005B67                 db  38h ; 8
.eh_frame:0000000000005B68                 db  41h ; A
.eh_frame:0000000000005B69                 db  0Eh
.eh_frame:0000000000005B6A                 db  30h ; 0
.eh_frame:0000000000005B6B                 db  41h ; A
.eh_frame:0000000000005B6C                 db  0Eh
.eh_frame:0000000000005B6D                 db  28h ; (
.eh_frame:0000000000005B6E                 db  42h ; B
.eh_frame:0000000000005B6F                 db  0Eh
.eh_frame:0000000000005B70                 db  20h
.eh_frame:0000000000005B71                 db  42h ; B
.eh_frame:0000000000005B72                 db  0Eh
.eh_frame:0000000000005B73                 db  18h
.eh_frame:0000000000005B74                 db  42h ; B
.eh_frame:0000000000005B75                 db  0Eh
.eh_frame:0000000000005B76                 db  10h
.eh_frame:0000000000005B77                 db  42h ; B
.eh_frame:0000000000005B78                 db  0Eh
.eh_frame:0000000000005B79                 db    8
.eh_frame:0000000000005B7A                 db  41h ; A
.eh_frame:0000000000005B7B                 db  0Bh
.eh_frame:0000000000005B7C                 db  79h ; y
.eh_frame:0000000000005B7D                 db  0Ah
.eh_frame:0000000000005B7E                 db  0Eh
.eh_frame:0000000000005B7F                 db  68h ; h
.eh_frame:0000000000005B80                 db  42h ; B
.eh_frame:0000000000005B81                 db  0Eh
.eh_frame:0000000000005B82                 db  70h ; p
.eh_frame:0000000000005B83                 db  42h ; B
.eh_frame:0000000000005B84                 db  0Eh
.eh_frame:0000000000005B85                 db  78h ; x
.eh_frame:0000000000005B86                 db  42h ; B
.eh_frame:0000000000005B87                 db  0Eh
.eh_frame:0000000000005B88                 db  80h
.eh_frame:0000000000005B89                 db    1
.eh_frame:0000000000005B8A                 db  51h ; Q
.eh_frame:0000000000005B8B                 db  0Bh
.eh_frame:0000000000005B8C                 db  10h
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db  60h ; `
.eh_frame:0000000000005B91                 db    7
.eh_frame:0000000000005B92                 db    0
.eh_frame:0000000000005B93                 db    0
.eh_frame:0000000000005B94                 db 0BCh
.eh_frame:0000000000005B95                 db 0E2h
.eh_frame:0000000000005B96                 db 0FFh
.eh_frame:0000000000005B97                 db 0FFh
.eh_frame:0000000000005B98                 db  20h
.eh_frame:0000000000005B99                 db    0
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db    0
.eh_frame:0000000000005B9D                 db    0
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db  18h
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db  74h ; t
.eh_frame:0000000000005BA5                 db    7
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db 0C8h
.eh_frame:0000000000005BA9                 db 0E2h
.eh_frame:0000000000005BAA                 db 0FFh
.eh_frame:0000000000005BAB                 db 0FFh
.eh_frame:0000000000005BAC                 db  78h ; x
.eh_frame:0000000000005BAD                 db    0
.eh_frame:0000000000005BAE                 db    0
.eh_frame:0000000000005BAF                 db    0
.eh_frame:0000000000005BB0                 db    0
.eh_frame:0000000000005BB1                 db  44h ; D
.eh_frame:0000000000005BB2                 db  0Eh
.eh_frame:0000000000005BB3                 db  70h ; p
.eh_frame:0000000000005BB4                 db    2
.eh_frame:0000000000005BB5                 db  60h ; `
.eh_frame:0000000000005BB6                 db  0Ah
.eh_frame:0000000000005BB7                 db  0Eh
.eh_frame:0000000000005BB8                 db    8
.eh_frame:0000000000005BB9                 db  41h ; A
.eh_frame:0000000000005BBA                 db  0Bh
.eh_frame:0000000000005BBB                 db    0
.eh_frame:0000000000005BBC                 db  28h ; (
.eh_frame:0000000000005BBD                 db    0
.eh_frame:0000000000005BBE                 db    0
.eh_frame:0000000000005BBF                 db    0
.eh_frame:0000000000005BC0                 db  90h
.eh_frame:0000000000005BC1                 db    7
.eh_frame:0000000000005BC2                 db    0
.eh_frame:0000000000005BC3                 db    0
.eh_frame:0000000000005BC4                 db  2Ch ; ,
.eh_frame:0000000000005BC5                 db 0E3h
.eh_frame:0000000000005BC6                 db 0FFh
.eh_frame:0000000000005BC7                 db 0FFh
.eh_frame:0000000000005BC8                 db 0D5h
.eh_frame:0000000000005BC9                 db    0
.eh_frame:0000000000005BCA                 db    0
.eh_frame:0000000000005BCB                 db    0
.eh_frame:0000000000005BCC                 db    0
.eh_frame:0000000000005BCD                 db  41h ; A
.eh_frame:0000000000005BCE                 db  0Eh
.eh_frame:0000000000005BCF                 db  10h
.eh_frame:0000000000005BD0                 db  86h
.eh_frame:0000000000005BD1                 db    2
.eh_frame:0000000000005BD2                 db  41h ; A
.eh_frame:0000000000005BD3                 db  0Eh
.eh_frame:0000000000005BD4                 db  18h
.eh_frame:0000000000005BD5                 db  83h
.eh_frame:0000000000005BD6                 db    3
.eh_frame:0000000000005BD7                 db  50h ; P
.eh_frame:0000000000005BD8                 db  0Eh
.eh_frame:0000000000005BD9                 db 0D0h
.eh_frame:0000000000005BDA                 db    1
.eh_frame:0000000000005BDB                 db    2
.eh_frame:0000000000005BDC                 db 0ABh
.eh_frame:0000000000005BDD                 db  0Ah
.eh_frame:0000000000005BDE                 db  0Eh
.eh_frame:0000000000005BDF                 db  18h
.eh_frame:0000000000005BE0                 db  41h ; A
.eh_frame:0000000000005BE1                 db  0Eh
.eh_frame:0000000000005BE2                 db  10h
.eh_frame:0000000000005BE3                 db  41h ; A
.eh_frame:0000000000005BE4                 db  0Eh
.eh_frame:0000000000005BE5                 db    8
.eh_frame:0000000000005BE6                 db  41h ; A
.eh_frame:0000000000005BE7                 db  0Bh
.eh_frame:0000000000005BE8                 db  1Ch
.eh_frame:0000000000005BE9                 db    0
.eh_frame:0000000000005BEA                 db    0
.eh_frame:0000000000005BEB                 db    0
.eh_frame:0000000000005BEC                 db 0BCh
.eh_frame:0000000000005BED                 db    7
.eh_frame:0000000000005BEE                 db    0
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db 0E0h
.eh_frame:0000000000005BF1                 db 0E3h
.eh_frame:0000000000005BF2                 db 0FFh
.eh_frame:0000000000005BF3                 db 0FFh
.eh_frame:0000000000005BF4                 db  80h
.eh_frame:0000000000005BF5                 db    0
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db    0
.eh_frame:0000000000005BF9                 db  41h ; A
.eh_frame:0000000000005BFA                 db  0Eh
.eh_frame:0000000000005BFB                 db  10h
.eh_frame:0000000000005BFC                 db  83h
.eh_frame:0000000000005BFD                 db    2
.eh_frame:0000000000005BFE                 db    2
.eh_frame:0000000000005BFF                 db  7Ah ; z
.eh_frame:0000000000005C00                 db  0Eh
.eh_frame:0000000000005C01                 db    8
.eh_frame:0000000000005C02                 db    0
.eh_frame:0000000000005C03                 db    0
.eh_frame:0000000000005C04                 db    0
.eh_frame:0000000000005C05                 db    0
.eh_frame:0000000000005C06                 db    0
.eh_frame:0000000000005C07                 db    0
.eh_frame:0000000000005C08                 db  18h
.eh_frame:0000000000005C09                 db    0
.eh_frame:0000000000005C0A                 db    0
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db 0DCh
.eh_frame:0000000000005C0D                 db    7
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db  40h ; @
.eh_frame:0000000000005C11                 db 0E4h
.eh_frame:0000000000005C12                 db 0FFh
.eh_frame:0000000000005C13                 db 0FFh
.eh_frame:0000000000005C14                 db  1Ah
.eh_frame:0000000000005C15                 db    0
.eh_frame:0000000000005C16                 db    0
.eh_frame:0000000000005C17                 db    0
.eh_frame:0000000000005C18                 db    0
.eh_frame:0000000000005C19                 db  41h ; A
.eh_frame:0000000000005C1A                 db  0Eh
.eh_frame:0000000000005C1B                 db  10h
.eh_frame:0000000000005C1C                 db  83h
.eh_frame:0000000000005C1D                 db    2
.eh_frame:0000000000005C1E                 db  53h ; S
.eh_frame:0000000000005C1F                 db  0Ah
.eh_frame:0000000000005C20                 db  0Eh
.eh_frame:0000000000005C21                 db    8
.eh_frame:0000000000005C22                 db  41h ; A
.eh_frame:0000000000005C23                 db  0Bh
.eh_frame:0000000000005C24                 db  10h
.eh_frame:0000000000005C25                 db    0
.eh_frame:0000000000005C26                 db    0
.eh_frame:0000000000005C27                 db    0
.eh_frame:0000000000005C28                 db 0F8h
.eh_frame:0000000000005C29                 db    7
.eh_frame:0000000000005C2A                 db    0
.eh_frame:0000000000005C2B                 db    0
.eh_frame:0000000000005C2C                 db  44h ; D
.eh_frame:0000000000005C2D                 db 0E4h
.eh_frame:0000000000005C2E                 db 0FFh
.eh_frame:0000000000005C2F                 db 0FFh
.eh_frame:0000000000005C30                 db  24h ; $
.eh_frame:0000000000005C31                 db    0
.eh_frame:0000000000005C32                 db    0
.eh_frame:0000000000005C33                 db    0
.eh_frame:0000000000005C34                 db    0
.eh_frame:0000000000005C35                 db  5Fh ; _
.eh_frame:0000000000005C36                 db  0Eh
.eh_frame:0000000000005C37                 db  10h
.eh_frame:0000000000005C38                 db  10h
.eh_frame:0000000000005C39                 db    0
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db  0Ch
.eh_frame:0000000000005C3D                 db    8
.eh_frame:0000000000005C3E                 db    0
.eh_frame:0000000000005C3F                 db    0
.eh_frame:0000000000005C40                 db  60h ; `
.eh_frame:0000000000005C41                 db 0E4h
.eh_frame:0000000000005C42                 db 0FFh
.eh_frame:0000000000005C43                 db 0FFh
.eh_frame:0000000000005C44                 db    2
.eh_frame:0000000000005C45                 db    0
.eh_frame:0000000000005C46                 db    0
.eh_frame:0000000000005C47                 db    0
.eh_frame:0000000000005C48                 db    0
.eh_frame:0000000000005C49                 db    0
.eh_frame:0000000000005C4A                 db    0
.eh_frame:0000000000005C4B                 db    0
.eh_frame:0000000000005C4C                 db  20h
.eh_frame:0000000000005C4D                 db    0
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db  20h
.eh_frame:0000000000005C51                 db    8
.eh_frame:0000000000005C52                 db    0
.eh_frame:0000000000005C53                 db    0
.eh_frame:0000000000005C54                 db  5Ch ; \
.eh_frame:0000000000005C55                 db 0E4h
.eh_frame:0000000000005C56                 db 0FFh
.eh_frame:0000000000005C57                 db 0FFh
.eh_frame:0000000000005C58                 db  36h ; 6
.eh_frame:0000000000005C59                 db    0
.eh_frame:0000000000005C5A                 db    0
.eh_frame:0000000000005C5B                 db    0
.eh_frame:0000000000005C5C                 db    0
.eh_frame:0000000000005C5D                 db  44h ; D
.eh_frame:0000000000005C5E                 db  0Eh
.eh_frame:0000000000005C5F                 db  10h
.eh_frame:0000000000005C60                 db  83h
.eh_frame:0000000000005C61                 db    2
.eh_frame:0000000000005C62                 db  5Dh ; ]
.eh_frame:0000000000005C63                 db  0Ah
.eh_frame:0000000000005C64                 db  0Eh
.eh_frame:0000000000005C65                 db    8
.eh_frame:0000000000005C66                 db  47h ; G
.eh_frame:0000000000005C67                 db  0Bh
.eh_frame:0000000000005C68                 db  48h ; H
.eh_frame:0000000000005C69                 db  0Ah
.eh_frame:0000000000005C6A                 db  0Eh
.eh_frame:0000000000005C6B                 db    8
.eh_frame:0000000000005C6C                 db  41h ; A
.eh_frame:0000000000005C6D                 db  0Bh
.eh_frame:0000000000005C6E                 db    0
.eh_frame:0000000000005C6F                 db    0
.eh_frame:0000000000005C70                 db  10h
.eh_frame:0000000000005C71                 db    0
.eh_frame:0000000000005C72                 db    0
.eh_frame:0000000000005C73                 db    0
.eh_frame:0000000000005C74                 db  44h ; D
.eh_frame:0000000000005C75                 db    8
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db  78h ; x
.eh_frame:0000000000005C79                 db 0E4h
.eh_frame:0000000000005C7A                 db 0FFh
.eh_frame:0000000000005C7B                 db 0FFh
.eh_frame:0000000000005C7C                 db  24h ; $
.eh_frame:0000000000005C7D                 db    0
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db    0
.eh_frame:0000000000005C81                 db  5Fh ; _
.eh_frame:0000000000005C82                 db  0Eh
.eh_frame:0000000000005C83                 db  10h
.eh_frame:0000000000005C84                 db  14h
.eh_frame:0000000000005C85                 db    0
.eh_frame:0000000000005C86                 db    0
.eh_frame:0000000000005C87                 db    0
.eh_frame:0000000000005C88                 db  58h ; X
.eh_frame:0000000000005C89                 db    8
.eh_frame:0000000000005C8A                 db    0
.eh_frame:0000000000005C8B                 db    0
.eh_frame:0000000000005C8C                 db  94h
.eh_frame:0000000000005C8D                 db 0E4h
.eh_frame:0000000000005C8E                 db 0FFh
.eh_frame:0000000000005C8F                 db 0FFh
.eh_frame:0000000000005C90                 db  82h
.eh_frame:0000000000005C91                 db    0
.eh_frame:0000000000005C92                 db    0
.eh_frame:0000000000005C93                 db    0
.eh_frame:0000000000005C94                 db    0
.eh_frame:0000000000005C95                 db    2
.eh_frame:0000000000005C96                 db  5Fh ; _
.eh_frame:0000000000005C97                 db  0Eh
.eh_frame:0000000000005C98                 db  10h
.eh_frame:0000000000005C99                 db  49h ; I
.eh_frame:0000000000005C9A                 db  0Eh
.eh_frame:0000000000005C9B                 db    8
.eh_frame:0000000000005C9C                 db  14h
.eh_frame:0000000000005C9D                 db    0
.eh_frame:0000000000005C9E                 db    0
.eh_frame:0000000000005C9F                 db    0
.eh_frame:0000000000005CA0                 db  70h ; p
.eh_frame:0000000000005CA1                 db    8
.eh_frame:0000000000005CA2                 db    0
.eh_frame:0000000000005CA3                 db    0
.eh_frame:0000000000005CA4                 db  0Ch
.eh_frame:0000000000005CA5                 db 0E5h
.eh_frame:0000000000005CA6                 db 0FFh
.eh_frame:0000000000005CA7                 db 0FFh
.eh_frame:0000000000005CA8                 db  4Ah ; J
.eh_frame:0000000000005CA9                 db    0
.eh_frame:0000000000005CAA                 db    0
.eh_frame:0000000000005CAB                 db    0
.eh_frame:0000000000005CAC                 db    0
.eh_frame:0000000000005CAD                 db    2
.eh_frame:0000000000005CAE                 db  45h ; E
.eh_frame:0000000000005CAF                 db  0Eh
.eh_frame:0000000000005CB0                 db  10h
.eh_frame:0000000000005CB1                 db    0
.eh_frame:0000000000005CB2                 db    0
.eh_frame:0000000000005CB3                 db    0
.eh_frame:0000000000005CB4                 db  18h
.eh_frame:0000000000005CB5                 db    0
.eh_frame:0000000000005CB6                 db    0
.eh_frame:0000000000005CB7                 db    0
.eh_frame:0000000000005CB8                 db  88h
.eh_frame:0000000000005CB9                 db    8
.eh_frame:0000000000005CBA                 db    0
.eh_frame:0000000000005CBB                 db    0
.eh_frame:0000000000005CBC                 db  44h ; D
.eh_frame:0000000000005CBD                 db 0E5h
.eh_frame:0000000000005CBE                 db 0FFh
.eh_frame:0000000000005CBF                 db 0FFh
.eh_frame:0000000000005CC0                 db  17h
.eh_frame:0000000000005CC1                 db    0
.eh_frame:0000000000005CC2                 db    0
.eh_frame:0000000000005CC3                 db    0
.eh_frame:0000000000005CC4                 db    0
.eh_frame:0000000000005CC5                 db  41h ; A
.eh_frame:0000000000005CC6                 db  0Eh
.eh_frame:0000000000005CC7                 db  10h
.eh_frame:0000000000005CC8                 db  83h
.eh_frame:0000000000005CC9                 db    2
.eh_frame:0000000000005CCA                 db  51h ; Q
.eh_frame:0000000000005CCB                 db  0Eh
.eh_frame:0000000000005CCC                 db    8
.eh_frame:0000000000005CCD                 db    0
.eh_frame:0000000000005CCE                 db    0
.eh_frame:0000000000005CCF                 db    0
.eh_frame:0000000000005CD0                 db  18h
.eh_frame:0000000000005CD1                 db    0
.eh_frame:0000000000005CD2                 db    0
.eh_frame:0000000000005CD3                 db    0
.eh_frame:0000000000005CD4                 db 0A4h
.eh_frame:0000000000005CD5                 db    8
.eh_frame:0000000000005CD6                 db    0
.eh_frame:0000000000005CD7                 db    0
.eh_frame:0000000000005CD8                 db  48h ; H
.eh_frame:0000000000005CD9                 db 0E5h
.eh_frame:0000000000005CDA                 db 0FFh
.eh_frame:0000000000005CDB                 db 0FFh
.eh_frame:0000000000005CDC                 db  2Eh ; .
.eh_frame:0000000000005CDD                 db    0
.eh_frame:0000000000005CDE                 db    0
.eh_frame:0000000000005CDF                 db    0
.eh_frame:0000000000005CE0                 db    0
.eh_frame:0000000000005CE1                 db  47h ; G
.eh_frame:0000000000005CE2                 db  0Eh
.eh_frame:0000000000005CE3                 db  10h
.eh_frame:0000000000005CE4                 db  61h ; a
.eh_frame:0000000000005CE5                 db  0Ah
.eh_frame:0000000000005CE6                 db  0Eh
.eh_frame:0000000000005CE7                 db    8
.eh_frame:0000000000005CE8                 db  41h ; A
.eh_frame:0000000000005CE9                 db  0Bh
.eh_frame:0000000000005CEA                 db    0
.eh_frame:0000000000005CEB                 db    0
.eh_frame:0000000000005CEC                 db  24h ; $
.eh_frame:0000000000005CED                 db    0
.eh_frame:0000000000005CEE                 db    0
.eh_frame:0000000000005CEF                 db    0
.eh_frame:0000000000005CF0                 db 0C0h
.eh_frame:0000000000005CF1                 db    8
.eh_frame:0000000000005CF2                 db    0
.eh_frame:0000000000005CF3                 db    0
.eh_frame:0000000000005CF4                 db  5Ch ; \
.eh_frame:0000000000005CF5                 db 0E5h
.eh_frame:0000000000005CF6                 db 0FFh
.eh_frame:0000000000005CF7                 db 0FFh
.eh_frame:0000000000005CF8                 db  28h ; (
.eh_frame:0000000000005CF9                 db    0
.eh_frame:0000000000005CFA                 db    0
.eh_frame:0000000000005CFB                 db    0
.eh_frame:0000000000005CFC                 db    0
.eh_frame:0000000000005CFD                 db  41h ; A
.eh_frame:0000000000005CFE                 db  0Eh
.eh_frame:0000000000005CFF                 db  10h
.eh_frame:0000000000005D00                 db  86h
.eh_frame:0000000000005D01                 db    2
.eh_frame:0000000000005D02                 db  41h ; A
.eh_frame:0000000000005D03                 db  0Eh
.eh_frame:0000000000005D04                 db  18h
.eh_frame:0000000000005D05                 db  83h
.eh_frame:0000000000005D06                 db    3
.eh_frame:0000000000005D07                 db  4Dh ; M
.eh_frame:0000000000005D08                 db  0Eh
.eh_frame:0000000000005D09                 db  20h
.eh_frame:0000000000005D0A                 db  49h ; I
.eh_frame:0000000000005D0B                 db  0Eh
.eh_frame:0000000000005D0C                 db  18h
.eh_frame:0000000000005D0D                 db  47h ; G
.eh_frame:0000000000005D0E                 db  0Eh
.eh_frame:0000000000005D0F                 db  10h
.eh_frame:0000000000005D10                 db  41h ; A
.eh_frame:0000000000005D11                 db  0Eh
.eh_frame:0000000000005D12                 db    8
.eh_frame:0000000000005D13                 db    0
.eh_frame:0000000000005D14                 db  18h
.eh_frame:0000000000005D15                 db    0
.eh_frame:0000000000005D16                 db    0
.eh_frame:0000000000005D17                 db    0
.eh_frame:0000000000005D18                 db 0E8h
.eh_frame:0000000000005D19                 db    8
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db  64h ; d
.eh_frame:0000000000005D1D                 db 0E5h
.eh_frame:0000000000005D1E                 db 0FFh
.eh_frame:0000000000005D1F                 db 0FFh
.eh_frame:0000000000005D20                 db  13h
.eh_frame:0000000000005D21                 db    0
.eh_frame:0000000000005D22                 db    0
.eh_frame:0000000000005D23                 db    0
.eh_frame:0000000000005D24                 db    0
.eh_frame:0000000000005D25                 db  41h ; A
.eh_frame:0000000000005D26                 db  0Eh
.eh_frame:0000000000005D27                 db  10h
.eh_frame:0000000000005D28                 db  83h
.eh_frame:0000000000005D29                 db    2
.eh_frame:0000000000005D2A                 db  50h ; P
.eh_frame:0000000000005D2B                 db  0Eh
.eh_frame:0000000000005D2C                 db    8
.eh_frame:0000000000005D2D                 db    0
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  14h
.eh_frame:0000000000005D31                 db    0
.eh_frame:0000000000005D32                 db    0
.eh_frame:0000000000005D33                 db    0
.eh_frame:0000000000005D34                 db    4
.eh_frame:0000000000005D35                 db    9
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db  68h ; h
.eh_frame:0000000000005D39                 db 0E5h
.eh_frame:0000000000005D3A                 db 0FFh
.eh_frame:0000000000005D3B                 db 0FFh
.eh_frame:0000000000005D3C                 db  35h ; 5
.eh_frame:0000000000005D3D                 db    0
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db    0
.eh_frame:0000000000005D41                 db  4Bh ; K
.eh_frame:0000000000005D42                 db  0Eh
.eh_frame:0000000000005D43                 db  10h
.eh_frame:0000000000005D44                 db    0
.eh_frame:0000000000005D45                 db    0
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db  3Ch ; <
.eh_frame:0000000000005D49                 db    0
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db  1Ch
.eh_frame:0000000000005D4D                 db    9
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  90h
.eh_frame:0000000000005D51                 db 0E5h
.eh_frame:0000000000005D52                 db 0FFh
.eh_frame:0000000000005D53                 db 0FFh
.eh_frame:0000000000005D54                 db  83h
.eh_frame:0000000000005D55                 db    0
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db    0
.eh_frame:0000000000005D59                 db  42h ; B
.eh_frame:0000000000005D5A                 db  0Eh
.eh_frame:0000000000005D5B                 db  10h
.eh_frame:0000000000005D5C                 db  8Dh
.eh_frame:0000000000005D5D                 db    2
.eh_frame:0000000000005D5E                 db  42h ; B
.eh_frame:0000000000005D5F                 db  0Eh
.eh_frame:0000000000005D60                 db  18h
.eh_frame:0000000000005D61                 db  8Ch
.eh_frame:0000000000005D62                 db    3
.eh_frame:0000000000005D63                 db  44h ; D
.eh_frame:0000000000005D64                 db  0Eh
.eh_frame:0000000000005D65                 db  20h
.eh_frame:0000000000005D66                 db  86h
.eh_frame:0000000000005D67                 db    4
.eh_frame:0000000000005D68                 db  41h ; A
.eh_frame:0000000000005D69                 db  0Eh
.eh_frame:0000000000005D6A                 db  28h ; (
.eh_frame:0000000000005D6B                 db  83h
.eh_frame:0000000000005D6C                 db    5
.eh_frame:0000000000005D6D                 db  4Ah ; J
.eh_frame:0000000000005D6E                 db  0Eh
.eh_frame:0000000000005D6F                 db  40h ; @
.eh_frame:0000000000005D70                 db    2
.eh_frame:0000000000005D71                 db  64h ; d
.eh_frame:0000000000005D72                 db  0Ah
.eh_frame:0000000000005D73                 db  0Eh
.eh_frame:0000000000005D74                 db  28h ; (
.eh_frame:0000000000005D75                 db  41h ; A
.eh_frame:0000000000005D76                 db  0Eh
.eh_frame:0000000000005D77                 db  20h
.eh_frame:0000000000005D78                 db  41h ; A
.eh_frame:0000000000005D79                 db  0Eh
.eh_frame:0000000000005D7A                 db  18h
.eh_frame:0000000000005D7B                 db  42h ; B
.eh_frame:0000000000005D7C                 db  0Eh
.eh_frame:0000000000005D7D                 db  10h
.eh_frame:0000000000005D7E                 db  42h ; B
.eh_frame:0000000000005D7F                 db  0Eh
.eh_frame:0000000000005D80                 db    8
.eh_frame:0000000000005D81                 db  41h ; A
.eh_frame:0000000000005D82                 db  0Bh
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db    0
.eh_frame:0000000000005D85                 db    0
.eh_frame:0000000000005D86                 db    0
.eh_frame:0000000000005D87                 db    0
.eh_frame:0000000000005D88                 db  4Ch ; L
.eh_frame:0000000000005D89                 db    0
.eh_frame:0000000000005D8A                 db    0
.eh_frame:0000000000005D8B                 db    0
.eh_frame:0000000000005D8C                 db  5Ch ; \
.eh_frame:0000000000005D8D                 db    9
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db 0E0h
.eh_frame:0000000000005D91                 db 0E5h
.eh_frame:0000000000005D92                 db 0FFh
.eh_frame:0000000000005D93                 db 0FFh
.eh_frame:0000000000005D94                 db  7Dh ; }
.eh_frame:0000000000005D95                 db    0
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db    0
.eh_frame:0000000000005D99                 db  42h ; B
.eh_frame:0000000000005D9A                 db  0Eh
.eh_frame:0000000000005D9B                 db  10h
.eh_frame:0000000000005D9C                 db  8Ch
.eh_frame:0000000000005D9D                 db    2
.eh_frame:0000000000005D9E                 db  41h ; A
.eh_frame:0000000000005D9F                 db  0Eh
.eh_frame:0000000000005DA0                 db  18h
.eh_frame:0000000000005DA1                 db  86h
.eh_frame:0000000000005DA2                 db    3
.eh_frame:0000000000005DA3                 db  44h ; D
.eh_frame:0000000000005DA4                 db  0Eh
.eh_frame:0000000000005DA5                 db  20h
.eh_frame:0000000000005DA6                 db  83h
.eh_frame:0000000000005DA7                 db    4
.eh_frame:0000000000005DA8                 db  69h ; i
.eh_frame:0000000000005DA9                 db  0Ah
.eh_frame:0000000000005DAA                 db  0Eh
.eh_frame:0000000000005DAB                 db  18h
.eh_frame:0000000000005DAC                 db  41h ; A
.eh_frame:0000000000005DAD                 db  0Eh
.eh_frame:0000000000005DAE                 db  10h
.eh_frame:0000000000005DAF                 db  42h ; B
.eh_frame:0000000000005DB0                 db  0Eh
.eh_frame:0000000000005DB1                 db    8
.eh_frame:0000000000005DB2                 db  45h ; E
.eh_frame:0000000000005DB3                 db  0Bh
.eh_frame:0000000000005DB4                 db  55h ; U
.eh_frame:0000000000005DB5                 db  0Ah
.eh_frame:0000000000005DB6                 db  0Eh
.eh_frame:0000000000005DB7                 db  18h
.eh_frame:0000000000005DB8                 db  41h ; A
.eh_frame:0000000000005DB9                 db  0Eh
.eh_frame:0000000000005DBA                 db  10h
.eh_frame:0000000000005DBB                 db  42h ; B
.eh_frame:0000000000005DBC                 db  0Eh
.eh_frame:0000000000005DBD                 db    8
.eh_frame:0000000000005DBE                 db  48h ; H
.eh_frame:0000000000005DBF                 db  0Bh
.eh_frame:0000000000005DC0                 db  41h ; A
.eh_frame:0000000000005DC1                 db  0Ah
.eh_frame:0000000000005DC2                 db  0Eh
.eh_frame:0000000000005DC3                 db  18h
.eh_frame:0000000000005DC4                 db  46h ; F
.eh_frame:0000000000005DC5                 db  0Eh
.eh_frame:0000000000005DC6                 db  10h
.eh_frame:0000000000005DC7                 db  42h ; B
.eh_frame:0000000000005DC8                 db  0Eh
.eh_frame:0000000000005DC9                 db    8
.eh_frame:0000000000005DCA                 db  47h ; G
.eh_frame:0000000000005DCB                 db  0Bh
.eh_frame:0000000000005DCC                 db  49h ; I
.eh_frame:0000000000005DCD                 db  0Eh
.eh_frame:0000000000005DCE                 db  18h
.eh_frame:0000000000005DCF                 db  41h ; A
.eh_frame:0000000000005DD0                 db  0Eh
.eh_frame:0000000000005DD1                 db  10h
.eh_frame:0000000000005DD2                 db  42h ; B
.eh_frame:0000000000005DD3                 db  0Eh
.eh_frame:0000000000005DD4                 db    8
.eh_frame:0000000000005DD5                 db    0
.eh_frame:0000000000005DD6                 db    0
.eh_frame:0000000000005DD7                 db    0
.eh_frame:0000000000005DD8                 db  1Ch
.eh_frame:0000000000005DD9                 db    0
.eh_frame:0000000000005DDA                 db    0
.eh_frame:0000000000005DDB                 db    0
.eh_frame:0000000000005DDC                 db 0ACh
.eh_frame:0000000000005DDD                 db    9
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db  10h
.eh_frame:0000000000005DE1                 db 0E6h
.eh_frame:0000000000005DE2                 db 0FFh
.eh_frame:0000000000005DE3                 db 0FFh
.eh_frame:0000000000005DE4                 db  60h ; `
.eh_frame:0000000000005DE5                 db    0
.eh_frame:0000000000005DE6                 db    0
.eh_frame:0000000000005DE7                 db    0
.eh_frame:0000000000005DE8                 db    0
.eh_frame:0000000000005DE9                 db  44h ; D
.eh_frame:0000000000005DEA                 db  0Eh
.eh_frame:0000000000005DEB                 db  10h
.eh_frame:0000000000005DEC                 db  75h ; u
.eh_frame:0000000000005DED                 db  0Ah
.eh_frame:0000000000005DEE                 db  0Eh
.eh_frame:0000000000005DEF                 db    8
.eh_frame:0000000000005DF0                 db  47h ; G
.eh_frame:0000000000005DF1                 db  0Bh
.eh_frame:0000000000005DF2                 db  5Fh ; _
.eh_frame:0000000000005DF3                 db  0Eh
.eh_frame:0000000000005DF4                 db    8
.eh_frame:0000000000005DF5                 db    0
.eh_frame:0000000000005DF6                 db    0
.eh_frame:0000000000005DF7                 db    0
.eh_frame:0000000000005DF8                 db  1Ch
.eh_frame:0000000000005DF9                 db    0
.eh_frame:0000000000005DFA                 db    0
.eh_frame:0000000000005DFB                 db    0
.eh_frame:0000000000005DFC                 db 0CCh
.eh_frame:0000000000005DFD                 db    9
.eh_frame:0000000000005DFE                 db    0
.eh_frame:0000000000005DFF                 db    0
.eh_frame:0000000000005E00                 db  50h ; P
.eh_frame:0000000000005E01                 db 0E6h
.eh_frame:0000000000005E02                 db 0FFh
.eh_frame:0000000000005E03                 db 0FFh
.eh_frame:0000000000005E04                 db  3Ch ; <
.eh_frame:0000000000005E05                 db    0
.eh_frame:0000000000005E06                 db    0
.eh_frame:0000000000005E07                 db    0
.eh_frame:0000000000005E08                 db    0
.eh_frame:0000000000005E09                 db  44h ; D
.eh_frame:0000000000005E0A                 db  0Eh
.eh_frame:0000000000005E0B                 db  10h
.eh_frame:0000000000005E0C                 db  61h ; a
.eh_frame:0000000000005E0D                 db  0Ah
.eh_frame:0000000000005E0E                 db  0Eh
.eh_frame:0000000000005E0F                 db    8
.eh_frame:0000000000005E10                 db  4Bh ; K
.eh_frame:0000000000005E11                 db  0Bh
.eh_frame:0000000000005E12                 db  4Bh ; K
.eh_frame:0000000000005E13                 db  0Eh
.eh_frame:0000000000005E14                 db    8
.eh_frame:0000000000005E15                 db    0
.eh_frame:0000000000005E16                 db    0
.eh_frame:0000000000005E17                 db    0
.eh_frame:0000000000005E18                 db  34h ; 4
.eh_frame:0000000000005E19                 db    0
.eh_frame:0000000000005E1A                 db    0
.eh_frame:0000000000005E1B                 db    0
.eh_frame:0000000000005E1C                 db 0ECh
.eh_frame:0000000000005E1D                 db    9
.eh_frame:0000000000005E1E                 db    0
.eh_frame:0000000000005E1F                 db    0
.eh_frame:0000000000005E20                 db  70h ; p
.eh_frame:0000000000005E21                 db 0E6h
.eh_frame:0000000000005E22                 db 0FFh
.eh_frame:0000000000005E23                 db 0FFh
.eh_frame:0000000000005E24                 db  7Bh ; {
.eh_frame:0000000000005E25                 db    0
.eh_frame:0000000000005E26                 db    0
.eh_frame:0000000000005E27                 db    0
.eh_frame:0000000000005E28                 db    0
.eh_frame:0000000000005E29                 db  42h ; B
.eh_frame:0000000000005E2A                 db  0Eh
.eh_frame:0000000000005E2B                 db  10h
.eh_frame:0000000000005E2C                 db  8Ch
.eh_frame:0000000000005E2D                 db    2
.eh_frame:0000000000005E2E                 db  41h ; A
.eh_frame:0000000000005E2F                 db  0Eh
.eh_frame:0000000000005E30                 db  18h
.eh_frame:0000000000005E31                 db  86h
.eh_frame:0000000000005E32                 db    3
.eh_frame:0000000000005E33                 db  41h ; A
.eh_frame:0000000000005E34                 db  0Eh
.eh_frame:0000000000005E35                 db  20h
.eh_frame:0000000000005E36                 db  83h
.eh_frame:0000000000005E37                 db    4
.eh_frame:0000000000005E38                 db  7Dh ; }
.eh_frame:0000000000005E39                 db  0Ah
.eh_frame:0000000000005E3A                 db  0Eh
.eh_frame:0000000000005E3B                 db  18h
.eh_frame:0000000000005E3C                 db  41h ; A
.eh_frame:0000000000005E3D                 db  0Eh
.eh_frame:0000000000005E3E                 db  10h
.eh_frame:0000000000005E3F                 db  42h ; B
.eh_frame:0000000000005E40                 db  0Eh
.eh_frame:0000000000005E41                 db    8
.eh_frame:0000000000005E42                 db  44h ; D
.eh_frame:0000000000005E43                 db  0Bh
.eh_frame:0000000000005E44                 db  60h ; `
.eh_frame:0000000000005E45                 db  0Ah
.eh_frame:0000000000005E46                 db  0Eh
.eh_frame:0000000000005E47                 db  18h
.eh_frame:0000000000005E48                 db  41h ; A
.eh_frame:0000000000005E49                 db  0Eh
.eh_frame:0000000000005E4A                 db  10h
.eh_frame:0000000000005E4B                 db  42h ; B
.eh_frame:0000000000005E4C                 db  0Eh
.eh_frame:0000000000005E4D                 db    8
.eh_frame:0000000000005E4E                 db  45h ; E
.eh_frame:0000000000005E4F                 db  0Bh
.eh_frame:0000000000005E50                 db  1Ch
.eh_frame:0000000000005E51                 db    0
.eh_frame:0000000000005E52                 db    0
.eh_frame:0000000000005E53                 db    0
.eh_frame:0000000000005E54                 db  24h ; $
.eh_frame:0000000000005E55                 db  0Ah
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db 0B8h
.eh_frame:0000000000005E59                 db 0E6h
.eh_frame:0000000000005E5A                 db 0FFh
.eh_frame:0000000000005E5B                 db 0FFh
.eh_frame:0000000000005E5C                 db  40h ; @
.eh_frame:0000000000005E5D                 db    0
.eh_frame:0000000000005E5E                 db    0
.eh_frame:0000000000005E5F                 db    0
.eh_frame:0000000000005E60                 db    0
.eh_frame:0000000000005E61                 db  44h ; D
.eh_frame:0000000000005E62                 db  0Eh
.eh_frame:0000000000005E63                 db  10h
.eh_frame:0000000000005E64                 db  83h
.eh_frame:0000000000005E65                 db    2
.eh_frame:0000000000005E66                 db  5Ah ; Z
.eh_frame:0000000000005E67                 db  0Ah
.eh_frame:0000000000005E68                 db  0Eh
.eh_frame:0000000000005E69                 db    8
.eh_frame:0000000000005E6A                 db  4Ah ; J
.eh_frame:0000000000005E6B                 db  0Bh
.eh_frame:0000000000005E6C                 db  53h ; S
.eh_frame:0000000000005E6D                 db  0Eh
.eh_frame:0000000000005E6E                 db    8
.eh_frame:0000000000005E6F                 db    0
.eh_frame:0000000000005E70                 db  2Ch ; ,
.eh_frame:0000000000005E71                 db    0
.eh_frame:0000000000005E72                 db    0
.eh_frame:0000000000005E73                 db    0
.eh_frame:0000000000005E74                 db  44h ; D
.eh_frame:0000000000005E75                 db  0Ah
.eh_frame:0000000000005E76                 db    0
.eh_frame:0000000000005E77                 db    0
.eh_frame:0000000000005E78                 db 0D8h
.eh_frame:0000000000005E79                 db 0E6h
.eh_frame:0000000000005E7A                 db 0FFh
.eh_frame:0000000000005E7B                 db 0FFh
.eh_frame:0000000000005E7C                 db  57h ; W
.eh_frame:0000000000005E7D                 db    0
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db    0
.eh_frame:0000000000005E81                 db  63h ; c
.eh_frame:0000000000005E82                 db  0Eh
.eh_frame:0000000000005E83                 db  10h
.eh_frame:0000000000005E84                 db  8Ch
.eh_frame:0000000000005E85                 db    2
.eh_frame:0000000000005E86                 db  41h ; A
.eh_frame:0000000000005E87                 db  0Eh
.eh_frame:0000000000005E88                 db  18h
.eh_frame:0000000000005E89                 db  86h
.eh_frame:0000000000005E8A                 db    3
.eh_frame:0000000000005E8B                 db  44h ; D
.eh_frame:0000000000005E8C                 db  0Eh
.eh_frame:0000000000005E8D                 db  20h
.eh_frame:0000000000005E8E                 db  83h
.eh_frame:0000000000005E8F                 db    4
.eh_frame:0000000000005E90                 db  6Bh ; k
.eh_frame:0000000000005E91                 db  0Eh
.eh_frame:0000000000005E92                 db  18h
.eh_frame:0000000000005E93                 db  41h ; A
.eh_frame:0000000000005E94                 db  0Eh
.eh_frame:0000000000005E95                 db  10h
.eh_frame:0000000000005E96                 db  42h ; B
.eh_frame:0000000000005E97                 db  0Eh
.eh_frame:0000000000005E98                 db    8
.eh_frame:0000000000005E99                 db    0
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db    0
.eh_frame:0000000000005E9D                 db    0
.eh_frame:0000000000005E9E                 db    0
.eh_frame:0000000000005E9F                 db    0
.eh_frame:0000000000005EA0                 db  44h ; D
.eh_frame:0000000000005EA1                 db    0
.eh_frame:0000000000005EA2                 db    0
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db  74h ; t
.eh_frame:0000000000005EA5                 db  0Ah
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db    8
.eh_frame:0000000000005EA9                 db 0E7h
.eh_frame:0000000000005EAA                 db 0FFh
.eh_frame:0000000000005EAB                 db 0FFh
.eh_frame:0000000000005EAC                 db  65h ; e
.eh_frame:0000000000005EAD                 db    0
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db    0
.eh_frame:0000000000005EB1                 db  42h ; B
.eh_frame:0000000000005EB2                 db  0Eh
.eh_frame:0000000000005EB3                 db  10h
.eh_frame:0000000000005EB4                 db  8Fh
.eh_frame:0000000000005EB5                 db    2
.eh_frame:0000000000005EB6                 db  42h ; B
.eh_frame:0000000000005EB7                 db  0Eh
.eh_frame:0000000000005EB8                 db  18h
.eh_frame:0000000000005EB9                 db  8Eh
.eh_frame:0000000000005EBA                 db    3
.eh_frame:0000000000005EBB                 db  45h ; E
.eh_frame:0000000000005EBC                 db  0Eh
.eh_frame:0000000000005EBD                 db  20h
.eh_frame:0000000000005EBE                 db  8Dh
.eh_frame:0000000000005EBF                 db    4
.eh_frame:0000000000005EC0                 db  42h ; B
.eh_frame:0000000000005EC1                 db  0Eh
.eh_frame:0000000000005EC2                 db  28h ; (
.eh_frame:0000000000005EC3                 db  8Ch
.eh_frame:0000000000005EC4                 db    5
.eh_frame:0000000000005EC5                 db  48h ; H
.eh_frame:0000000000005EC6                 db  0Eh
.eh_frame:0000000000005EC7                 db  30h ; 0
.eh_frame:0000000000005EC8                 db  86h
.eh_frame:0000000000005EC9                 db    6
.eh_frame:0000000000005ECA                 db  48h ; H
.eh_frame:0000000000005ECB                 db  0Eh
.eh_frame:0000000000005ECC                 db  38h ; 8
.eh_frame:0000000000005ECD                 db  83h
.eh_frame:0000000000005ECE                 db    7
.eh_frame:0000000000005ECF                 db  4Dh ; M
.eh_frame:0000000000005ED0                 db  0Eh
.eh_frame:0000000000005ED1                 db  40h ; @
.eh_frame:0000000000005ED2                 db  72h ; r
.eh_frame:0000000000005ED3                 db  0Eh
.eh_frame:0000000000005ED4                 db  38h ; 8
.eh_frame:0000000000005ED5                 db  41h ; A
.eh_frame:0000000000005ED6                 db  0Eh
.eh_frame:0000000000005ED7                 db  30h ; 0
.eh_frame:0000000000005ED8                 db  41h ; A
.eh_frame:0000000000005ED9                 db  0Eh
.eh_frame:0000000000005EDA                 db  28h ; (
.eh_frame:0000000000005EDB                 db  42h ; B
.eh_frame:0000000000005EDC                 db  0Eh
.eh_frame:0000000000005EDD                 db  20h
.eh_frame:0000000000005EDE                 db  42h ; B
.eh_frame:0000000000005EDF                 db  0Eh
.eh_frame:0000000000005EE0                 db  18h
.eh_frame:0000000000005EE1                 db  42h ; B
.eh_frame:0000000000005EE2                 db  0Eh
.eh_frame:0000000000005EE3                 db  10h
.eh_frame:0000000000005EE4                 db  42h ; B
.eh_frame:0000000000005EE5                 db  0Eh
.eh_frame:0000000000005EE6                 db    8
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db  14h
.eh_frame:0000000000005EE9                 db    0
.eh_frame:0000000000005EEA                 db    0
.eh_frame:0000000000005EEB                 db    0
.eh_frame:0000000000005EEC                 db 0BCh
.eh_frame:0000000000005EED                 db  0Ah
.eh_frame:0000000000005EEE                 db    0
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db  30h ; 0
.eh_frame:0000000000005EF1                 db 0E7h
.eh_frame:0000000000005EF2                 db 0FFh
.eh_frame:0000000000005EF3                 db 0FFh
.eh_frame:0000000000005EF4                 db    2
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db    0
.eh_frame:0000000000005EF9                 db    0
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db    0
.eh_frame:0000000000005EFD                 db    0
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db  10h
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db 0D4h
.eh_frame:0000000000005F05                 db  0Ah
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db  28h ; (
.eh_frame:0000000000005F09                 db 0E7h
.eh_frame:0000000000005F0A                 db 0FFh
.eh_frame:0000000000005F0B                 db 0FFh
.eh_frame:0000000000005F0C                 db  0Eh
.eh_frame:0000000000005F0D                 db    0
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db    0
.eh_frame:0000000000005F11                 db    0
.eh_frame:0000000000005F12                 db    0
.eh_frame:0000000000005F13                 db    0
.eh_frame:0000000000005F14 __FRAME_END__   db    0
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F17 _eh_frame       ends
.eh_frame:0000000000005F17
.init_array:0000000000206BB0 ; ELF Initialization Function Table
.init_array:0000000000206BB0 ; ===========================================================================
.init_array:0000000000206BB0
.init_array:0000000000206BB0 ; Segment type: Pure data
.init_array:0000000000206BB0 ; Segment permissions: Read/Write
.init_array:0000000000206BB0 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206BB0                 assume cs:_init_array
.init_array:0000000000206BB0                 ;org 206BB0h
.init_array:0000000000206BB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206BB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206BB0                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206BB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206BB0
.fini_array:0000000000206BB8 ; ELF Termination Function Table
.fini_array:0000000000206BB8 ; ===========================================================================
.fini_array:0000000000206BB8
.fini_array:0000000000206BB8 ; Segment type: Pure data
.fini_array:0000000000206BB8 ; Segment permissions: Read/Write
.fini_array:0000000000206BB8 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206BB8                 assume cs:_fini_array
.fini_array:0000000000206BB8                 ;org 206BB8h
.fini_array:0000000000206BB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206BB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206BB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206BB8
.data.rel.ro:0000000000206BC0 ; ===========================================================================
.data.rel.ro:0000000000206BC0
.data.rel.ro:0000000000206BC0 ; Segment type: Pure data
.data.rel.ro:0000000000206BC0 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206BC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206BC0                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206BC0                 ;org 206BC0h
.data.rel.ro:0000000000206BC0 ; struct option long_options
.data.rel.ro:0000000000206BC0 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000206BC0                                         ; DATA XREF: parse_long_options:loc_1B30↑o
.data.rel.ro:0000000000206BC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000206BC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BC0                 dq 0                    ; flag
.data.rel.ro:0000000000206BC0                 dd 68h                  ; val
.data.rel.ro:0000000000206BC0                 db 4 dup(0)
.data.rel.ro:0000000000206BE0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  76h ; v
.data.rel.ro:0000000000206BF9                 db    0
.data.rel.ro:0000000000206BFA                 db    0
.data.rel.ro:0000000000206BFB                 db    0
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 db    0
.data.rel.ro:0000000000206C01                 db    0
.data.rel.ro:0000000000206C02                 db    0
.data.rel.ro:0000000000206C03                 db    0
.data.rel.ro:0000000000206C04                 db    0
.data.rel.ro:0000000000206C05                 db    0
.data.rel.ro:0000000000206C06                 db    0
.data.rel.ro:0000000000206C07                 db    0
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db    0
.data.rel.ro:0000000000206C19                 db    0
.data.rel.ro:0000000000206C1A                 db    0
.data.rel.ro:0000000000206C1B                 db    0
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 public quoting_style_args
.data.rel.ro:0000000000206C20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C28                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C48                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C68                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C70                 db    0
.data.rel.ro:0000000000206C71                 db    0
.data.rel.ro:0000000000206C72                 db    0
.data.rel.ro:0000000000206C73                 db    0
.data.rel.ro:0000000000206C74                 db    0
.data.rel.ro:0000000000206C75                 db    0
.data.rel.ro:0000000000206C76                 db    0
.data.rel.ro:0000000000206C77                 db    0
.data.rel.ro:0000000000206C77 _data_rel_ro    ends
.data.rel.ro:0000000000206C77
LOAD:0000000000206C78 ; ELF Dynamic Information
LOAD:0000000000206C78 ; ===========================================================================
LOAD:0000000000206C78
LOAD:0000000000206C78 ; Segment type: Pure data
LOAD:0000000000206C78 ; Segment permissions: Read/Write
LOAD:0000000000206C78 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C78                 assume cs:LOAD
LOAD:0000000000206C78                 ;org 206C78h
LOAD:0000000000206C78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C78                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C88                 Elf64_Dyn <0Ch, 11C0h>  ; DT_INIT
LOAD:0000000000206C98                 Elf64_Dyn <0Dh, 4640h>  ; DT_FINI
LOAD:0000000000206CA8                 Elf64_Dyn <19h, 206BB0h> ; DT_INIT_ARRAY
LOAD:0000000000206CB8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CC8                 Elf64_Dyn <1Ah, 206BB8h> ; DT_FINI_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CF8                 Elf64_Dyn <5, 7F0h>     ; DT_STRTAB
LOAD:0000000000206D08                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D18                 Elf64_Dyn <0Ah, 289h>   ; DT_STRSZ
LOAD:0000000000206D28                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D38                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D48                 Elf64_Dyn <3, 206E68h>  ; DT_PLTGOT
LOAD:0000000000206D58                 Elf64_Dyn <2, 3C0h>     ; DT_PLTRELSZ
LOAD:0000000000206D68                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D78                 Elf64_Dyn <17h, 0E00h>  ; DT_JMPREL
LOAD:0000000000206D88                 Elf64_Dyn <7, 0B48h>    ; DT_RELA
LOAD:0000000000206D98                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206DA8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DB8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DD8                 Elf64_Dyn <6FFFFFFEh, 0AE8h> ; DT_VERNEED
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFF0h, 0A7Ah> ; DT_VERSYM
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206E18                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E28                 db    0
LOAD:0000000000206E29                 db    0
LOAD:0000000000206E2A                 db    0
LOAD:0000000000206E2B                 db    0
LOAD:0000000000206E2C                 db    0
LOAD:0000000000206E2D                 db    0
LOAD:0000000000206E2E                 db    0
LOAD:0000000000206E2F                 db    0
LOAD:0000000000206E30                 db    0
LOAD:0000000000206E31                 db    0
LOAD:0000000000206E32                 db    0
LOAD:0000000000206E33                 db    0
LOAD:0000000000206E34                 db    0
LOAD:0000000000206E35                 db    0
LOAD:0000000000206E36                 db    0
LOAD:0000000000206E37                 db    0
LOAD:0000000000206E38                 db    0
LOAD:0000000000206E39                 db    0
LOAD:0000000000206E3A                 db    0
LOAD:0000000000206E3B                 db    0
LOAD:0000000000206E3C                 db    0
LOAD:0000000000206E3D                 db    0
LOAD:0000000000206E3E                 db    0
LOAD:0000000000206E3F                 db    0
LOAD:0000000000206E40                 db    0
LOAD:0000000000206E41                 db    0
LOAD:0000000000206E42                 db    0
LOAD:0000000000206E43                 db    0
LOAD:0000000000206E44                 db    0
LOAD:0000000000206E45                 db    0
LOAD:0000000000206E46                 db    0
LOAD:0000000000206E47                 db    0
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E67 LOAD            ends
LOAD:0000000000206E67
.got:0000000000206E68 ; ===========================================================================
.got:0000000000206E68
.got:0000000000206E68 ; Segment type: Pure data
.got:0000000000206E68 ; Segment permissions: Read/Write
.got:0000000000206E68 _got            segment qword public 'DATA' use64
.got:0000000000206E68                 assume cs:_got
.got:0000000000206E68                 ;org 206E68h
.got:0000000000206E68 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E70 qword_206E70    dq 0                    ; DATA XREF: sub_11E0↑r
.got:0000000000206E78 qword_206E78    dq 0                    ; DATA XREF: sub_11E0+6↑r
.got:0000000000206E80 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E88 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E90 __errno_location_ptr dq offset __errno_location
.got:0000000000206E90                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E98 gethostid_ptr   dq offset gethostid     ; DATA XREF: _gethostid↑r
.got:0000000000206EA0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EA8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EB0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206EB8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206EC0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EC8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EC8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206ED0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206ED8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206ED8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EE0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EE8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EE8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EF0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EF8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F00 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F08 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F10 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F18 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F20 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F20                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F28 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FC8                                         ; DATA XREF: start+24↑r
.got:0000000000206FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE0 _got            ends
.got:0000000000206FE0
LOAD:0000000000206FE8 ; ===========================================================================
LOAD:0000000000206FE8
LOAD:0000000000206FE8 ; Segment type: Pure data
LOAD:0000000000206FE8 ; Segment permissions: Read/Write
LOAD:0000000000206FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FE8                 assume cs:LOAD
LOAD:0000000000206FE8                 ;org 206FE8h
LOAD:0000000000206FE8                 align 20h
LOAD:0000000000206FE8 LOAD            ends
LOAD:0000000000206FE8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+5A↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1A52↑r
.data:0000000000207018                                         ; parse_gnu_standard_options_only:loc_1CC0↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_314D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000748↑o
.bss:0000000000207080                                         ; LOAD:0000000000000790↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000730↑o
.bss:0000000000207088                                         ; usage+7D↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007D8↑o
.bss:0000000000207090                                         ; main+8C↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000760↑o
.bss:0000000000207098                                         ; LOAD:0000000000000778↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002070A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007A8↑o
.bss:00000000002070A0                                         ; parse_long_options+67↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'opterr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A4                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007C0↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_1D6D↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; __int64 gethostid(void)
extern:0000000000207258                 extrn gethostid:near    ; CODE XREF: _gethostid↑j
extern:0000000000207258                                         ; DATA XREF: .got:gethostid_ptr↑o
extern:0000000000207260 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207260                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207260                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207268 ; void __noreturn exit(int status)
extern:0000000000207268                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207268                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207270 ; size_t _fpending(FILE *fp)
extern:0000000000207270                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207270                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207278 ; char *textdomain(const char *domainname)
extern:0000000000207278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207280 ; int fclose(FILE *stream)
extern:0000000000207280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207288                 extrn bindtextdomain:near
extern:0000000000207288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002072A0 ; size_t strlen(const char *s)
extern:00000000002072A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002072A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A8                 extrn __stack_chk_fail:near
extern:00000000002072A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072C0 ; char *strrchr(const char *s, int c)
extern:00000000002072C0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072C0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072D0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072D0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072D0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D8                 extrn __libc_start_main:near
extern:00000000002072D8                                         ; CODE XREF: start+24↑p
extern:00000000002072D8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072E0 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072E0                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072E0                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E8 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E8                 extrn fputs_unlocked:near
extern:00000000002072E8                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E8                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072F0 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072F0                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072F0                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207300 ; int fileno(FILE *stream)
extern:0000000000207300                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207300                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207308 ; void *malloc(size_t size)
extern:0000000000207308                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207308                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207310 ; int fflush(FILE *stream)
extern:0000000000207310                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207310                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207318 ; char *nl_langinfo(nl_item item)
extern:0000000000207318                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207318                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207320 ; int _freading(FILE *fp)
extern:0000000000207320                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207320                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207328 ; void *realloc(void *ptr, size_t size)
extern:0000000000207328                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207328                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207330 ; char *setlocale(int category, const char *locale)
extern:0000000000207330                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207330                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207338                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207338                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207340 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207340                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207340                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207348 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207348                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207348                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207350 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207350                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207350                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207358 ; void __noreturn exit(int status)
extern:0000000000207358                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207358                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207360 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207360                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207360                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207368                 extrn __fprintf_chk:near
extern:0000000000207368                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207368                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207370 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207370                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207370                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207378 ; int iswprint(wint_t wc)
extern:0000000000207378                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207378                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207380 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207380                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207380                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207380                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207388 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207388                 extrn __ctype_b_loc:near
extern:0000000000207388                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207388                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207390                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207390                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207398                 extrn __gmon_start__:near ; weak
extern:0000000000207398                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207398                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073A0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073A0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073A0
extern:00000000002073A0
extern:00000000002073A0                 end start
