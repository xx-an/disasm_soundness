LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 89C7C7614E247ACB8977FF7D8D18C4C2DA62977D993A9B4E6E114B469FC3ACBC
LOAD:0000000000000000 ; Input MD5    : F1AA192A1108354D861A9607E30F879A
LOAD:0000000000000000 ; Input CRC32  : 638CF4EB
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/groups
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'groups.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'group-list.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'umaxtostr.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xgetgroups.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'mgetgroups.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F0↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000308↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 25500h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 68C8h                ; Size in file image
LOAD:00000000000000D8                 dq 68C8h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 510h                 ; Size in file image
LOAD:0000000000000110                 dq 6A8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5A90h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5A90h                ; Physical address
LOAD:00000000000001B0                 dq 26Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 26Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B70h              ; Physical address
LOAD:0000000000000220                 dq 490h                 ; Size in file image
LOAD:0000000000000228                 dq 490h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0E6h, 0A3h, 9Fh, 1Fh, 2Dh, 0BFh, 2Ah, 0E4h, 0E0h, 5Ah ; Desc
LOAD:0000000000000284                 db 0B4h, 0B9h, 31h, 71h, 0F2h, 82h, 98h, 82h, 24h, 4Eh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1218012000414904h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Ch
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C433h
LOAD:00000000000002D8 ; ELF Symbol Table
LOAD:00000000000002D8                 Elf64_Sym <0>
LOAD:00000000000002F0                 Elf64_Sym <offset aFree - offset byte_890, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F0                            0>
LOAD:0000000000000308                 Elf64_Sym <offset aAbort - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000308                            0>
LOAD:0000000000000320                 Elf64_Sym <offset aErrnoLocation - offset byte_890, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000320                            offset dword_0, 0>
LOAD:0000000000000338                 Elf64_Sym <offset aStrncmp - offset byte_890, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000338                            offset dword_0, 0>
LOAD:0000000000000350                 Elf64_Sym <offset aItmDeregistert - offset byte_890, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000350                            offset dword_0, 0>
LOAD:0000000000000368                 Elf64_Sym <offset aExit - offset byte_890, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000368                            0>
LOAD:0000000000000380                 Elf64_Sym <offset aFpending - offset byte_890, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000380                            offset dword_0, 0>
LOAD:0000000000000398                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_890, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000398                            offset dword_0, 0>
LOAD:00000000000003B0                 Elf64_Sym <offset aFclose - offset byte_890, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B0                            offset dword_0, 0>
LOAD:00000000000003C8                 Elf64_Sym <offset aGetpwuid - offset byte_890, 12h, 0, 0, \ ; "getpwuid"
LOAD:00000000000003C8                            offset dword_0, 0>
LOAD:00000000000003E0                 Elf64_Sym <offset aBindtextdomain - offset byte_890, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E0                            offset dword_0, 0>
LOAD:00000000000003F8                 Elf64_Sym <offset aDcgettext - offset byte_890, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003F8                            offset dword_0, 0>
LOAD:0000000000000410                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_890, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000410                            offset dword_0, 0>
LOAD:0000000000000428                 Elf64_Sym <offset aStrlen - offset byte_890, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000428                            offset dword_0, 0>
LOAD:0000000000000440                 Elf64_Sym <offset aStackChkFail - offset byte_890, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000440                            offset dword_0, 0>
LOAD:0000000000000458                 Elf64_Sym <offset aGetuid - offset byte_890, 12h, 0, 0, \ ; "getuid"
LOAD:0000000000000458                            offset dword_0, 0>
LOAD:0000000000000470                 Elf64_Sym <offset aGetoptLong - offset byte_890, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000470                            offset dword_0, 0>
LOAD:0000000000000488                 Elf64_Sym <offset aMbrtowc - offset byte_890, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000488                            offset dword_0, 0>
LOAD:00000000000004A0                 Elf64_Sym <offset aGetgrgid - offset byte_890, 12h, 0, 0, \ ; "getgrgid"
LOAD:00000000000004A0                            offset dword_0, 0>
LOAD:00000000000004B8                 Elf64_Sym <offset aOverflow - offset byte_890, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004B8                            offset dword_0, 0>
LOAD:00000000000004D0                 Elf64_Sym <offset aStrrchr - offset byte_890, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004D0                            offset dword_0, 0>
LOAD:00000000000004E8                 Elf64_Sym <offset aLseek - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004E8                            0>
LOAD:0000000000000500                 Elf64_Sym <offset aMemset - offset byte_890, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000500                            offset dword_0, 0>
LOAD:0000000000000518                 Elf64_Sym <offset aLibcStartMain - offset byte_890, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000518                            offset dword_0, 0>
LOAD:0000000000000530                 Elf64_Sym <offset aMemcmp - offset byte_890, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000530                            offset dword_0, 0>
LOAD:0000000000000548                 Elf64_Sym <offset aFputsUnlocked - offset byte_890, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000548                            offset dword_0, 0>
LOAD:0000000000000560                 Elf64_Sym <offset aCalloc - offset byte_890, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000560                            offset dword_0, 0>
LOAD:0000000000000578                 Elf64_Sym <offset aGetpwnam - offset byte_890, 12h, 0, 0, \ ; "getpwnam"
LOAD:0000000000000578                            offset dword_0, 0>
LOAD:0000000000000590                 Elf64_Sym <offset aGmonStart - offset byte_890, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000590                            offset dword_0, 0>
LOAD:00000000000005A8                 Elf64_Sym <offset aMemcpy - offset byte_890, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005A8                            offset dword_0, 0>
LOAD:00000000000005C0                 Elf64_Sym <offset aFileno - offset byte_890, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005C0                            offset dword_0, 0>
LOAD:00000000000005D8                 Elf64_Sym <offset aGetgid - offset byte_890, 12h, 0, 0, \ ; "getgid"
LOAD:00000000000005D8                            offset dword_0, 0>
LOAD:00000000000005F0                 Elf64_Sym <offset aGetgroups - offset byte_890, 12h, 0, 0, \ ; "getgroups"
LOAD:00000000000005F0                            offset dword_0, 0>
LOAD:0000000000000608                 Elf64_Sym <offset aMalloc - offset byte_890, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000608                            offset dword_0, 0>
LOAD:0000000000000620                 Elf64_Sym <offset aFflush - offset byte_890, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000620                            offset dword_0, 0>
LOAD:0000000000000638                 Elf64_Sym <offset aNlLanginfo - offset byte_890, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000638                            offset dword_0, 0>
LOAD:0000000000000650                 Elf64_Sym <offset aGetegid - offset byte_890, 12h, 0, 0, \ ; "getegid"
LOAD:0000000000000650                            offset dword_0, 0>
LOAD:0000000000000668                 Elf64_Sym <offset aFreading - offset byte_890, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000668                            offset dword_0, 0>
LOAD:0000000000000680                 Elf64_Sym <offset aRealloc - offset byte_890, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000680                            offset dword_0, 0>
LOAD:0000000000000698                 Elf64_Sym <offset aSetlocale - offset byte_890, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000698                            offset dword_0, 0>
LOAD:00000000000006B0                 Elf64_Sym <offset aPrintfChk - offset byte_890, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B0                            offset dword_0, 0>
LOAD:00000000000006C8                 Elf64_Sym <offset aError - offset byte_890, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006C8                            0>
LOAD:00000000000006E0                 Elf64_Sym <offset aGetgrouplist - offset byte_890, 12h, 0, 0, \ ; "getgrouplist"
LOAD:00000000000006E0                            offset dword_0, 0>
LOAD:00000000000006F8                 Elf64_Sym <offset aFseeko - offset byte_890, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006F8                            offset dword_0, 0>
LOAD:0000000000000710                 Elf64_Sym <offset aCxaAtexit - offset byte_890, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000710                            offset dword_0, 0>
LOAD:0000000000000728                 Elf64_Sym <offset aExit+1 - offset byte_890, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000728                            offset dword_0, 0>
LOAD:0000000000000740                 Elf64_Sym <offset aFwrite - offset byte_890, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000740                            offset dword_0, 0>
LOAD:0000000000000758                 Elf64_Sym <offset aFprintfChk - offset byte_890, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000758                            offset dword_0, 0>
LOAD:0000000000000770                 Elf64_Sym <offset aItmRegistertmc - offset byte_890, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000770                            offset dword_0, 0>
LOAD:0000000000000788                 Elf64_Sym <offset aMbsinit - offset byte_890, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000788                            offset dword_0, 0>
LOAD:00000000000007A0                 Elf64_Sym <offset aIswprint - offset byte_890, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A0                            offset dword_0, 0>
LOAD:00000000000007B8                 Elf64_Sym <offset aCxaFinalize - offset byte_890, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007B8                            offset dword_0, 0>
LOAD:00000000000007D0                 Elf64_Sym <offset aCtypeBLoc - offset byte_890, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D0                            offset dword_0, 0>
LOAD:00000000000007E8                 Elf64_Sym <offset aStdout - offset byte_890, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007E8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000800                 Elf64_Sym <offset aProgname - offset byte_890, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000800                            offset __bss_start, 8>
LOAD:0000000000000818                 Elf64_Sym <offset aProgramInvocat - offset byte_890, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000818                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000830                 Elf64_Sym <offset aPrognameFull - offset byte_890, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000830                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000848                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_890, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000848                            offset __bss_start, 8>
LOAD:0000000000000860                 Elf64_Sym <offset aStderr - offset byte_890, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000860                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000878                 Elf64_Sym <offset aOptind - offset byte_890, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000878                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000890 ; ELF String Table
LOAD:0000000000000890 byte_890        db 0                    ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000890                                         ; LOAD:0000000000000308↑o ...
LOAD:0000000000000891 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:000000000000089B aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000620↑o
LOAD:00000000000008A2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B0↑o
LOAD:00000000000008AF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000698↑o
LOAD:00000000000008B9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000488↑o
LOAD:00000000000008C1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000338↑o
LOAD:00000000000008C9 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000878↑o
LOAD:00000000000008D0 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004D0↑o
LOAD:00000000000008D8 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003F8↑o
LOAD:00000000000008E2 aGetpwuid       db 'getpwuid',0         ; DATA XREF: LOAD:00000000000003C8↑o
LOAD:00000000000008EB aGetgrgid       db 'getgrgid',0         ; DATA XREF: LOAD:00000000000004A0↑o
LOAD:00000000000008F4 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006C8↑o
LOAD:00000000000008FA aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000440↑o
LOAD:000000000000090B aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A0↑o
LOAD:0000000000000914 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000680↑o
LOAD:000000000000091C aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000308↑o
LOAD:0000000000000922 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000368↑o
LOAD:0000000000000922                                         ; LOAD:0000000000000728↑o
LOAD:0000000000000928 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000928                                         ; DATA XREF: LOAD:0000000000000818↑o
LOAD:0000000000000940 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000940                                         ; DATA XREF: LOAD:0000000000000410↑o
LOAD:0000000000000957 aGetpwnam       db 'getpwnam',0         ; DATA XREF: LOAD:0000000000000578↑o
LOAD:0000000000000960 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000560↑o
LOAD:0000000000000967 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000428↑o
LOAD:000000000000096E aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000500↑o
LOAD:0000000000000975 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000320↑o
LOAD:0000000000000986 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000530↑o
LOAD:000000000000098D aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000758↑o
LOAD:000000000000099B aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007E8↑o
LOAD:00000000000009A2 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004E8↑o
LOAD:00000000000009A8 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005A8↑o
LOAD:00000000000009AF aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B0↑o
LOAD:00000000000009B6 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000608↑o
LOAD:00000000000009BD aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000788↑o
LOAD:00000000000009C5 aGetgid         db 'getgid',0           ; DATA XREF: LOAD:00000000000005D8↑o
LOAD:00000000000009CC aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000638↑o
LOAD:00000000000009D8 aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D0↑o
LOAD:00000000000009E6 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000668↑o
LOAD:00000000000009F1 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000860↑o
LOAD:00000000000009F8 aGetgroups      db 'getgroups',0        ; DATA XREF: LOAD:00000000000005F0↑o
LOAD:0000000000000A02 aGetuid         db 'getuid',0           ; DATA XREF: LOAD:0000000000000458↑o
LOAD:0000000000000A09 aGetegid        db 'getegid',0          ; DATA XREF: LOAD:0000000000000650↑o
LOAD:0000000000000A11 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000470↑o
LOAD:0000000000000A1D aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005C0↑o
LOAD:0000000000000A24 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000740↑o
LOAD:0000000000000A2B aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000380↑o
LOAD:0000000000000A36 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A36                                         ; DATA XREF: LOAD:0000000000000848↑o
LOAD:0000000000000A54 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007B8↑o
LOAD:0000000000000A63 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E0↑o
LOAD:0000000000000A63                                         ; LOAD:0000000000000398↑o
LOAD:0000000000000A72 aGetgrouplist   db 'getgrouplist',0     ; DATA XREF: LOAD:00000000000006E0↑o
LOAD:0000000000000A7F aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A7F                                         ; DATA XREF: LOAD:0000000000000518↑o
LOAD:0000000000000A91 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006F8↑o
LOAD:0000000000000A98 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004B8↑o
LOAD:0000000000000AA3 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000548↑o
LOAD:0000000000000AB2 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F0↑o
LOAD:0000000000000AB7 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000800↑o
LOAD:0000000000000AC2 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000830↑o
LOAD:0000000000000AD2 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000710↑o
LOAD:0000000000000ADF aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000AE9 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:0000000000000AF5 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000B00 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B0A aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B16 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B16                                         ; DATA XREF: LOAD:0000000000000350↑o
LOAD:0000000000000B32 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000590↑o
LOAD:0000000000000B41 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B41                                         ; DATA XREF: LOAD:0000000000000770↑o
LOAD:0000000000000B5B                 align 4
LOAD:0000000000000B5C ; ELF GNU Symbol Version Table
LOAD:0000000000000B5C                 dw 0
LOAD:0000000000000B5E                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B60                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B62                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B68                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B70                 dw 2                    ; getpwuid@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B7C                 dw 2                    ; getuid@@GLIBC_2.2.5
LOAD:0000000000000B7E                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; getgrgid@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; getpwnam@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B98                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B9A                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; getgid@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; getgroups@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BA2                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; getegid@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BB0                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; getgrouplist@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BBC                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BBE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BC0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BC8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BD0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 0
LOAD:0000000000000BD8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BD8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_890, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BE8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_890, \ ; "GLIBC_2.3"
LOAD:0000000000000BE8                                10h>
LOAD:0000000000000BF8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_890, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BF8                                10h>
LOAD:0000000000000C08                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_890, \ ; "GLIBC_2.14"
LOAD:0000000000000C08                                10h>
LOAD:0000000000000C18                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_890, \ ; "GLIBC_2.4"
LOAD:0000000000000C18                                10h>
LOAD:0000000000000C28                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_890, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C38 ; ELF RELA Relocation Table
LOAD:0000000000000C38                 Elf64_Rela <206B70h, 8, 1AB0h> ; R_X86_64_RELATIVE +1AB0h
LOAD:0000000000000C50                 Elf64_Rela <206B78h, 8, 1A70h> ; R_X86_64_RELATIVE +1A70h
LOAD:0000000000000C68                 Elf64_Rela <206B80h, 8, 4F3Dh> ; R_X86_64_RELATIVE +4F3Dh
LOAD:0000000000000C80                 Elf64_Rela <206BA0h, 8, 4F42h> ; R_X86_64_RELATIVE +4F42h
LOAD:0000000000000C98                 Elf64_Rela <206BE0h, 8, 5241h> ; R_X86_64_RELATIVE +5241h
LOAD:0000000000000CB0                 Elf64_Rela <206BE8h, 8, 5249h> ; R_X86_64_RELATIVE +5249h
LOAD:0000000000000CC8                 Elf64_Rela <206BF0h, 8, 524Fh> ; R_X86_64_RELATIVE +524Fh
LOAD:0000000000000CE0                 Elf64_Rela <206BF8h, 8, 525Ch> ; R_X86_64_RELATIVE +525Ch
LOAD:0000000000000CF8                 Elf64_Rela <206C00h, 8, 5269h> ; R_X86_64_RELATIVE +5269h
LOAD:0000000000000D10                 Elf64_Rela <206C08h, 8, 527Dh> ; R_X86_64_RELATIVE +527Dh
LOAD:0000000000000D28                 Elf64_Rela <206C10h, 8, 527Fh> ; R_X86_64_RELATIVE +527Fh
LOAD:0000000000000D40                 Elf64_Rela <206C18h, 8, 5262h> ; R_X86_64_RELATIVE +5262h
LOAD:0000000000000D58                 Elf64_Rela <206C20h, 8, 4EBFh> ; R_X86_64_RELATIVE +4EBFh
LOAD:0000000000000D70                 Elf64_Rela <206C28h, 8, 5287h> ; R_X86_64_RELATIVE +5287h
LOAD:0000000000000D88                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000DA0                 Elf64_Rela <207010h, 8, 51CDh> ; R_X86_64_RELATIVE +51CDh
LOAD:0000000000000DB8                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000DD0                 Elf64_Rela <207078h, 8, 2070E0h> ; R_X86_64_RELATIVE +2070E0h
LOAD:0000000000000DE8                 Elf64_Rela <206FC0h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E00                 Elf64_Rela <206FC8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E18                 Elf64_Rela <206FD0h, 1D00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E30                 Elf64_Rela <206FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E48                 Elf64_Rela <206FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E60                 Elf64_Rela <207080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E78                 Elf64_Rela <207088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E90                 Elf64_Rela <207090h, 3C00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000EA8                 Elf64_Rela <207098h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000EC0                 Elf64_Rela <2070A0h, 3B00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000ED8 ; ELF JMPREL Relocation Table
LOAD:0000000000000ED8                 Elf64_Rela <206E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000EF0                 Elf64_Rela <206E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F08                 Elf64_Rela <206E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F20                 Elf64_Rela <206E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F38                 Elf64_Rela <206E60h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000F50                 Elf64_Rela <206E68h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000F68                 Elf64_Rela <206E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F80                 Elf64_Rela <206E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F98                 Elf64_Rela <206E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT getpwuid
LOAD:0000000000000FB0                 Elf64_Rela <206E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000FC8                 Elf64_Rela <206E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000FE0                 Elf64_Rela <206E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000FF8                 Elf64_Rela <206EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001010                 Elf64_Rela <206EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001028                 Elf64_Rela <206EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getuid
LOAD:0000000000001040                 Elf64_Rela <206EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001058                 Elf64_Rela <206EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001070                 Elf64_Rela <206EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT getgrgid
LOAD:0000000000001088                 Elf64_Rela <206ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000010A0                 Elf64_Rela <206ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000010B8                 Elf64_Rela <206EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000010D0                 Elf64_Rela <206EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000010E8                 Elf64_Rela <206EF0h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001100                 Elf64_Rela <206EF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001118                 Elf64_Rela <206F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001130                 Elf64_Rela <206F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT getpwnam
LOAD:0000000000001148                 Elf64_Rela <206F10h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001160                 Elf64_Rela <206F18h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001178                 Elf64_Rela <206F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT getgid
LOAD:0000000000001190                 Elf64_Rela <206F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT getgroups
LOAD:00000000000011A8                 Elf64_Rela <206F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:00000000000011C0                 Elf64_Rela <206F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000011D8                 Elf64_Rela <206F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000011F0                 Elf64_Rela <206F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT getegid
LOAD:0000000000001208                 Elf64_Rela <206F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001220                 Elf64_Rela <206F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001238                 Elf64_Rela <206F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001250                 Elf64_Rela <206F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001268                 Elf64_Rela <206F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001280                 Elf64_Rela <206F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT getgrouplist
LOAD:0000000000001298                 Elf64_Rela <206F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000012B0                 Elf64_Rela <206F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000012C8                 Elf64_Rela <206F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:00000000000012E0                 Elf64_Rela <206F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000012F8                 Elf64_Rela <206FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001310                 Elf64_Rela <206FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001328                 Elf64_Rela <206FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001340                 Elf64_Rela <206FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001340 LOAD            ends
LOAD:0000000000001340
.init:0000000000001358 ; ===========================================================================
.init:0000000000001358
.init:0000000000001358 ; Segment type: Pure code
.init:0000000000001358 ; Segment permissions: Read/Execute
.init:0000000000001358 _init           segment dword public 'CODE' use64
.init:0000000000001358                 assume cs:_init
.init:0000000000001358                 ;org 1358h
.init:0000000000001358                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001358
.init:0000000000001358 ; =============== S U B R O U T I N E =======================================
.init:0000000000001358
.init:0000000000001358
.init:0000000000001358                 public _init_proc
.init:0000000000001358 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001358                 sub     rsp, 8          ; _init
.init:000000000000135C                 mov     rax, cs:__gmon_start___ptr
.init:0000000000001363                 test    rax, rax
.init:0000000000001366                 jz      short loc_136A
.init:0000000000001368                 call    rax ; __gmon_start__
.init:000000000000136A
.init:000000000000136A loc_136A:                               ; CODE XREF: _init_proc+E↑j
.init:000000000000136A                 add     rsp, 8
.init:000000000000136E                 retn
.init:000000000000136E _init_proc      endp
.init:000000000000136E
.init:000000000000136E _init           ends
.init:000000000000136E
LOAD:000000000000136F ; ===========================================================================
LOAD:000000000000136F
LOAD:000000000000136F ; Segment type: Pure code
LOAD:000000000000136F ; Segment permissions: Read/Execute
LOAD:000000000000136F LOAD            segment byte public 'CODE' use64
LOAD:000000000000136F                 assume cs:LOAD
LOAD:000000000000136F                 ;org 136Fh
LOAD:000000000000136F                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000136F                 align 10h
LOAD:000000000000136F LOAD            ends
LOAD:000000000000136F
.plt:0000000000001370 ; ===========================================================================
.plt:0000000000001370
.plt:0000000000001370 ; Segment type: Pure code
.plt:0000000000001370 ; Segment permissions: Read/Execute
.plt:0000000000001370 _plt            segment para public 'CODE' use64
.plt:0000000000001370                 assume cs:_plt
.plt:0000000000001370                 ;org 1370h
.plt:0000000000001370                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370
.plt:0000000000001370 sub_1370        proc near               ; CODE XREF: .plt:000000000000138B↓j
.plt:0000000000001370                                         ; .plt:000000000000139B↓j ...
.plt:0000000000001370 ; __unwind {
.plt:0000000000001370                 push    cs:qword_206E30
.plt:0000000000001376                 jmp     cs:qword_206E38
.plt:0000000000001376 sub_1370        endp
.plt:0000000000001376
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:000000000000137C                 align 20h
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; void free(void *ptr)
.plt:0000000000001380 _free           proc near               ; CODE XREF: print_group_list:loc_1FDE↓p
.plt:0000000000001380                                         ; quotearg_n_options+115↓p ...
.plt:0000000000001380                 jmp     cs:free_ptr
.plt:0000000000001380 _free           endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    0
.plt:000000000000138B                 jmp     sub_1370
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: noreturn thunk
.plt:0000000000001390
.plt:0000000000001390 ; void __noreturn abort(void)
.plt:0000000000001390 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001390                                         ; quotearg_buffer_restyled:def_2401↓p ...
.plt:0000000000001390                 jmp     cs:abort_ptr
.plt:0000000000001390 _abort          endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    1
.plt:000000000000139B                 jmp     sub_1370
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; int *__errno_location(void)
.plt:00000000000013A0 ___errno_location proc near             ; CODE XREF: main:loc_1858↓p
.plt:00000000000013A0                                         ; print_group_list:loc_2020↓p ...
.plt:00000000000013A0                 jmp     cs:__errno_location_ptr
.plt:00000000000013A0 ___errno_location endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    2
.plt:00000000000013AB                 jmp     sub_1370
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:00000000000013B0 _strncmp        proc near               ; CODE XREF: usage+204↓p
.plt:00000000000013B0                                         ; usage+2C5↓p
.plt:00000000000013B0                 jmp     cs:strncmp_ptr
.plt:00000000000013B0 _strncmp        endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    3
.plt:00000000000013BB                 jmp     sub_1370
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: noreturn thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; void __noreturn _exit(int status)
.plt:00000000000013C0 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:00000000000013C0                 jmp     cs:_exit_ptr
.plt:00000000000013C0 __exit          endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    4
.plt:00000000000013CB                 jmp     sub_1370
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; size_t __fpending(FILE *fp)
.plt:00000000000013D0 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:00000000000013D0                 jmp     cs:__fpending_ptr
.plt:00000000000013D0 ___fpending     endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    5
.plt:00000000000013DB                 jmp     sub_1370
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; char *textdomain(const char *domainname)
.plt:00000000000013E0 _textdomain     proc near               ; CODE XREF: main+47↓p
.plt:00000000000013E0                 jmp     cs:textdomain_ptr
.plt:00000000000013E0 _textdomain     endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    6
.plt:00000000000013EB                 jmp     sub_1370
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int fclose(FILE *stream)
.plt:00000000000013F0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000013F0                                         ; rpl_fclose+6B↓j
.plt:00000000000013F0                 jmp     cs:fclose_ptr
.plt:00000000000013F0 _fclose         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    7
.plt:00000000000013FB                 jmp     sub_1370
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; struct passwd *getpwuid(__uid_t uid)
.plt:0000000000001400 _getpwuid       proc near               ; CODE XREF: print_group_list+3E↓p
.plt:0000000000001400                 jmp     cs:getpwuid_ptr
.plt:0000000000001400 _getpwuid       endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    8
.plt:000000000000140B                 jmp     sub_1370
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001410 _bindtextdomain proc near               ; CODE XREF: main+3B↓p
.plt:0000000000001410                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001410 _bindtextdomain endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    9
.plt:000000000000141B                 jmp     sub_1370
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001420 _dcgettext      proc near               ; CODE XREF: main+1AE↓p
.plt:0000000000001420                                         ; main+27E↓p ...
.plt:0000000000001420                 jmp     cs:dcgettext_ptr
.plt:0000000000001420 _dcgettext      endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    0Ah
.plt:000000000000142B                 jmp     sub_1370
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001430 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:0000000000001430                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001430 ___ctype_get_mb_cur_max endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    0Bh
.plt:000000000000143B                 jmp     sub_1370
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; size_t strlen(const char *s)
.plt:0000000000001440 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:0000000000001440                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:0000000000001440                 jmp     cs:strlen_ptr
.plt:0000000000001440 _strlen         endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    0Ch
.plt:000000000000144B                 jmp     sub_1370
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: noreturn thunk
.plt:0000000000001450
.plt:0000000000001450 ___stack_chk_fail proc near             ; CODE XREF: print_group_list:loc_20AE↓p
.plt:0000000000001450                                         ; quotearg_buffer_restyled:loc_3563↓p ...
.plt:0000000000001450                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001450 ___stack_chk_fail endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    0Dh
.plt:000000000000145B                 jmp     sub_1370
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; __uid_t getuid(void)
.plt:0000000000001460 _getuid         proc near               ; CODE XREF: main+1D6↓p
.plt:0000000000001460                 jmp     cs:getuid_ptr
.plt:0000000000001460 _getuid         endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    0Eh
.plt:000000000000146B                 jmp     sub_1370
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001470 _getopt_long    proc near               ; CODE XREF: main+6F↓p
.plt:0000000000001470                 jmp     cs:getopt_long_ptr
.plt:0000000000001470 _getopt_long    endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    0Fh
.plt:000000000000147B                 jmp     sub_1370
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001480 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001480                 jmp     cs:mbrtowc_ptr
.plt:0000000000001480 _mbrtowc        endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    10h
.plt:000000000000148B                 jmp     sub_1370
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; struct group *getgrgid(__gid_t gid)
.plt:0000000000001490 _getgrgid       proc near               ; CODE XREF: print_group+16↓p
.plt:0000000000001490                 jmp     cs:getgrgid_ptr
.plt:0000000000001490 _getgrgid       endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    11h
.plt:000000000000149B                 jmp     sub_1370
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000014A0 ___overflow     proc near               ; CODE XREF: main+261↓p
.plt:00000000000014A0                                         ; main+2F3↓p ...
.plt:00000000000014A0                 jmp     cs:__overflow_ptr
.plt:00000000000014A0 ___overflow     endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    12h
.plt:00000000000014AB                 jmp     sub_1370
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; char *strrchr(const char *s, int c)
.plt:00000000000014B0 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:00000000000014B0                 jmp     cs:strrchr_ptr
.plt:00000000000014B0 _strrchr        endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    13h
.plt:00000000000014BB                 jmp     sub_1370
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:00000000000014C0 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:00000000000014C0                                         ; rpl_fseeko+3B↓p
.plt:00000000000014C0                 jmp     cs:lseek_ptr
.plt:00000000000014C0 _lseek          endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    14h
.plt:00000000000014CB                 jmp     sub_1370
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void *memset(void *s, int c, size_t n)
.plt:00000000000014D0 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:00000000000014D0                                         ; xzalloc+12↓j
.plt:00000000000014D0                 jmp     cs:memset_ptr
.plt:00000000000014D0 _memset         endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    15h
.plt:00000000000014DB                 jmp     sub_1370
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:00000000000014E0 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:00000000000014E0                 jmp     cs:memcmp_ptr
.plt:00000000000014E0 _memcmp         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    16h
.plt:00000000000014EB                 jmp     sub_1370
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000014F0 _fputs_unlocked proc near               ; CODE XREF: usage+9D↓p
.plt:00000000000014F0                                         ; usage+C2↓p ...
.plt:00000000000014F0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000014F0 _fputs_unlocked endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    17h
.plt:00000000000014FB                 jmp     sub_1370
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001500 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001500                 jmp     cs:calloc_ptr
.plt:0000000000001500 _calloc         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    18h
.plt:000000000000150B                 jmp     sub_1370
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; struct passwd *getpwnam(const char *name)
.plt:0000000000001510 _getpwnam       proc near               ; CODE XREF: main+17F↓p
.plt:0000000000001510                 jmp     cs:getpwnam_ptr
.plt:0000000000001510 _getpwnam       endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    19h
.plt:000000000000151B                 jmp     sub_1370
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001520 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001520                 jmp     cs:memcpy_ptr
.plt:0000000000001520 _memcpy         endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    1Ah
.plt:000000000000152B                 jmp     sub_1370
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; int fileno(FILE *stream)
.plt:0000000000001530 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001530                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001530                 jmp     cs:fileno_ptr
.plt:0000000000001530 _fileno         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    1Bh
.plt:000000000000153B                 jmp     sub_1370
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; __gid_t getgid(void)
.plt:0000000000001540 _getgid         proc near               ; CODE XREF: main+1FF↓p
.plt:0000000000001540                 jmp     cs:getgid_ptr
.plt:0000000000001540 _getgid         endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    1Ch
.plt:000000000000154B                 jmp     sub_1370
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; int getgroups(int size, __gid_t list[])
.plt:0000000000001550 _getgroups      proc near               ; CODE XREF: mgetgroups+FC↓p
.plt:0000000000001550                                         ; mgetgroups+157↓p ...
.plt:0000000000001550                 jmp     cs:getgroups_ptr
.plt:0000000000001550 _getgroups      endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    1Dh
.plt:000000000000155B                 jmp     sub_1370
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; void *malloc(size_t size)
.plt:0000000000001560 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001560                 jmp     cs:malloc_ptr
.plt:0000000000001560 _malloc         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    1Eh
.plt:000000000000156B                 jmp     sub_1370
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int fflush(FILE *stream)
.plt:0000000000001570 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001570                                         ; rpl_fflush+3B↓j
.plt:0000000000001570                 jmp     cs:fflush_ptr
.plt:0000000000001570 _fflush         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    1Fh
.plt:000000000000157B                 jmp     sub_1370
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; char *nl_langinfo(nl_item item)
.plt:0000000000001580 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001580                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001580 _nl_langinfo    endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    20h ; ' '
.plt:000000000000158B                 jmp     sub_1370
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; __gid_t getegid(void)
.plt:0000000000001590 _getegid        proc near               ; CODE XREF: main+1EC↓p
.plt:0000000000001590                 jmp     cs:getegid_ptr
.plt:0000000000001590 _getegid        endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    21h ; '!'
.plt:000000000000159B                 jmp     sub_1370
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int __freading(FILE *fp)
.plt:00000000000015A0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000015A0                                         ; rpl_fflush+9↓p
.plt:00000000000015A0                 jmp     cs:__freading_ptr
.plt:00000000000015A0 ___freading     endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    22h ; '"'
.plt:00000000000015AB                 jmp     sub_1370
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000015B0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000015B0                                         ; realloc_groupbuf+1D↓j ...
.plt:00000000000015B0                 jmp     cs:realloc_ptr
.plt:00000000000015B0 _realloc        endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    23h ; '#'
.plt:00000000000015BB                 jmp     sub_1370
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; char *setlocale(int category, const char *locale)
.plt:00000000000015C0 _setlocale      proc near               ; CODE XREF: main+28↓p
.plt:00000000000015C0                                         ; usage+1EB↓p ...
.plt:00000000000015C0                 jmp     cs:setlocale_ptr
.plt:00000000000015C0 _setlocale      endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    24h ; '$'
.plt:00000000000015CB                 jmp     sub_1370
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ___printf_chk   proc near               ; CODE XREF: main+10D↓p
.plt:00000000000015D0                                         ; usage+78↓p ...
.plt:00000000000015D0                 jmp     cs:__printf_chk_ptr
.plt:00000000000015D0 ___printf_chk   endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    25h ; '%'
.plt:00000000000015DB                 jmp     sub_1370
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; void error(int status, int errnum, const char *format, ...)
.plt:00000000000015E0 _error          proc near               ; CODE XREF: main+1C1↓p
.plt:00000000000015E0                                         ; main+28F↓p ...
.plt:00000000000015E0                 jmp     cs:error_ptr
.plt:00000000000015E0 _error          endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    26h ; '&'
.plt:00000000000015EB                 jmp     sub_1370
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; int getgrouplist(const char *user, __gid_t group, __gid_t *groups, int *ngroups)
.plt:00000000000015F0 _getgrouplist   proc near               ; CODE XREF: mgetgroups+66↓p
.plt:00000000000015F0                 jmp     cs:getgrouplist_ptr
.plt:00000000000015F0 _getgrouplist   endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    27h ; '''
.plt:00000000000015FB                 jmp     sub_1370
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001600 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4CFA↓j
.plt:0000000000001600                 jmp     cs:fseeko_ptr
.plt:0000000000001600 _fseeko         endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    28h ; '('
.plt:000000000000160B                 jmp     sub_1370
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001610 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001610                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001610 ___cxa_atexit   endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    29h ; ')'
.plt:000000000000161B                 jmp     sub_1370
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: noreturn thunk
.plt:0000000000001620
.plt:0000000000001620 ; void __noreturn exit(int status)
.plt:0000000000001620 _exit           proc near               ; CODE XREF: main+BD↓p
.plt:0000000000001620                                         ; usage+58↓p
.plt:0000000000001620                 jmp     cs:exit_ptr
.plt:0000000000001620 _exit           endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    2Ah ; '*'
.plt:000000000000162B                 jmp     sub_1370
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001630 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001630                 jmp     cs:fwrite_ptr
.plt:0000000000001630 _fwrite         endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    2Bh ; '+'
.plt:000000000000163B                 jmp     sub_1370
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001640                                         ; version_etc_arn+37↓p ...
.plt:0000000000001640                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001640 ___fprintf_chk  endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    2Ch ; ','
.plt:000000000000164B                 jmp     sub_1370
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001650 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001650                 jmp     cs:mbsinit_ptr
.plt:0000000000001650 _mbsinit        endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    2Dh ; '-'
.plt:000000000000165B                 jmp     sub_1370
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: thunk
.plt:0000000000001660
.plt:0000000000001660 ; int iswprint(wint_t wc)
.plt:0000000000001660 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001660                 jmp     cs:iswprint_ptr
.plt:0000000000001660 _iswprint       endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    2Eh ; '.'
.plt:000000000000166B                 jmp     sub_1370
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001670 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001670                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001670 ___ctype_b_loc  endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    2Fh ; '/'
.plt:000000000000167B                 jmp     sub_1370
.plt:000000000000167B ; } // starts at 1370
.plt:000000000000167B _plt            ends
.plt:000000000000167B
.plt.got:0000000000001680 ; ===========================================================================
.plt.got:0000000000001680
.plt.got:0000000000001680 ; Segment type: Pure code
.plt.got:0000000000001680 ; Segment permissions: Read/Execute
.plt.got:0000000000001680 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001680                 assume cs:_plt_got
.plt.got:0000000000001680                 ;org 1680h
.plt.got:0000000000001680                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001680
.plt.got:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001680
.plt.got:0000000000001680 ; Attributes: thunk
.plt.got:0000000000001680
.plt.got:0000000000001680 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001680 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001680 ; __unwind {
.plt.got:0000000000001680                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001680 __cxa_finalize  endp
.plt.got:0000000000001680
.plt.got:0000000000001680 ; ---------------------------------------------------------------------------
.plt.got:0000000000001686                 align 8
.plt.got:0000000000001686 ; } // starts at 1680
.plt.got:0000000000001686 _plt_got        ends
.plt.got:0000000000001686
LOAD:0000000000001688 ; ===========================================================================
LOAD:0000000000001688
LOAD:0000000000001688 ; Segment type: Pure code
LOAD:0000000000001688 ; Segment permissions: Read/Execute
LOAD:0000000000001688 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001688                 assume cs:LOAD
LOAD:0000000000001688                 ;org 1688h
LOAD:0000000000001688                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001688                 align 10h
LOAD:0000000000001688 LOAD            ends
LOAD:0000000000001688
.text:0000000000001690 ; ===========================================================================
.text:0000000000001690
.text:0000000000001690 ; Segment type: Pure code
.text:0000000000001690 ; Segment permissions: Read/Execute
.text:0000000000001690 _text           segment para public 'CODE' use64
.text:0000000000001690                 assume cs:_text
.text:0000000000001690                 ;org 1690h
.text:0000000000001690                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001690
.text:0000000000001690 ; =============== S U B R O U T I N E =======================================
.text:0000000000001690
.text:0000000000001690
.text:0000000000001690 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001690                 public main
.text:0000000000001690 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001690 ; __unwind {
.text:0000000000001690                 push    r15
.text:0000000000001692                 push    r14
.text:0000000000001694                 push    r13
.text:0000000000001696                 push    r12
.text:0000000000001698                 mov     r12d, edi
.text:000000000000169B                 push    rbp
.text:000000000000169C                 push    rbx
.text:000000000000169D                 mov     rbx, rsi
.text:00000000000016A0                 sub     rsp, 8
.text:00000000000016A4                 mov     rdi, [rsi]
.text:00000000000016A7                 call    set_program_name
.text:00000000000016AC                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000016B3                 mov     edi, 6          ; category
.text:00000000000016B8                 call    _setlocale
.text:00000000000016BD                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000016C4                 lea     rdi, domainname ; "coreutils"
.text:00000000000016CB                 call    _bindtextdomain
.text:00000000000016D0                 lea     rdi, domainname ; "coreutils"
.text:00000000000016D7                 call    _textdomain
.text:00000000000016DC                 lea     rdi, close_stdout
.text:00000000000016E3                 call    atexit
.text:00000000000016E8                 lea     rcx, longopts   ; longopts
.text:00000000000016EF                 lea     rdx, aWrittenBySSAnd+1Bh ; shortopts
.text:00000000000016F6                 xor     r8d, r8d        ; longind
.text:00000000000016F9                 mov     rsi, rbx        ; argv
.text:00000000000016FC                 mov     edi, r12d       ; argc
.text:00000000000016FF                 call    _getopt_long
.text:0000000000001704                 cmp     eax, 0FFFFFFFFh
.text:0000000000001707                 jz      short loc_1752
.text:0000000000001709                 cmp     eax, 0FFFFFF7Dh
.text:000000000000170E                 jnz     loc_198D
.text:0000000000001714                 sub     rsp, 8
.text:0000000000001718                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000171F                 mov     rcx, cs:Version
.text:0000000000001726                 push    0
.text:0000000000001728                 lea     r9, aJamesYoungman ; "James Youngman"
.text:000000000000172F                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001736                 lea     rdx, unk_4E81
.text:000000000000173D                 lea     rsi, aGroups    ; "groups"
.text:0000000000001744                 xor     eax, eax
.text:0000000000001746                 call    version_etc
.text:000000000000174B                 xor     edi, edi        ; status
.text:000000000000174D                 call    _exit
.text:0000000000001752 ; ---------------------------------------------------------------------------
.text:0000000000001752
.text:0000000000001752 loc_1752:                               ; CODE XREF: main+77↑j
.text:0000000000001752                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:0000000000001758                 cmp     eax, r12d
.text:000000000000175B                 jz      loc_1858
.text:0000000000001761                 mov     ebp, 1
.text:0000000000001766                 lea     r13, aS         ; "%s : "
.text:000000000000176D                 jl      loc_1809
.text:0000000000001773                 jmp     loc_18D9
.text:0000000000001773 ; ---------------------------------------------------------------------------
.text:0000000000001778                 align 20h
.text:0000000000001780
.text:0000000000001780 loc_1780:                               ; CODE XREF: main+187↓j
.text:0000000000001780                 mov     r15d, [rax+14h]
.text:0000000000001784                 mov     r14d, [rax+10h]
.text:0000000000001788                 mov     rsi, r13
.text:000000000000178B                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001792                 mov     edi, 1
.text:0000000000001797                 mov     rdx, [rbx+rax*8]
.text:000000000000179B                 xor     eax, eax
.text:000000000000179D                 call    ___printf_chk
.text:00000000000017A2                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:00000000000017A9                 mov     r9d, 20h ; ' '
.text:00000000000017AF                 mov     r8d, 1
.text:00000000000017B5                 mov     ecx, r15d
.text:00000000000017B8                 mov     edx, r15d
.text:00000000000017BB                 mov     esi, r14d
.text:00000000000017BE                 mov     rdi, [rbx+rax*8]
.text:00000000000017C2                 call    print_group_list
.text:00000000000017C7                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000017CE                 test    al, al
.text:00000000000017D0                 mov     eax, 0
.text:00000000000017D5                 cmovz   ebp, eax
.text:00000000000017D8                 mov     rax, [rdi+28h]
.text:00000000000017DC                 cmp     rax, [rdi+30h]
.text:00000000000017E0                 jnb     loc_18EC
.text:00000000000017E6                 lea     rdx, [rax+1]
.text:00000000000017EA                 mov     [rdi+28h], rdx
.text:00000000000017EE                 mov     byte ptr [rax], 0Ah
.text:00000000000017F1
.text:00000000000017F1 loc_17F1:                               ; CODE XREF: main+1C6↓j
.text:00000000000017F1                                         ; main+266↓j
.text:00000000000017F1                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:00000000000017F7                 add     eax, 1
.text:00000000000017FA                 cmp     eax, r12d
.text:00000000000017FD                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001803                 jge     loc_18D9
.text:0000000000001809
.text:0000000000001809 loc_1809:                               ; CODE XREF: main+DD↑j
.text:0000000000001809                 cdqe
.text:000000000000180B                 mov     rdi, [rbx+rax*8] ; name
.text:000000000000180F                 call    _getpwnam
.text:0000000000001814                 test    rax, rax
.text:0000000000001817                 jnz     loc_1780
.text:000000000000181D                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001824                 mov     rdi, [rbx+rax*8]
.text:0000000000001828                 call    quote
.text:000000000000182D                 lea     rsi, msgid      ; "%s: no such user"
.text:0000000000001834                 mov     rbp, rax
.text:0000000000001837                 mov     edx, 5          ; category
.text:000000000000183C                 xor     edi, edi        ; domainname
.text:000000000000183E                 call    _dcgettext
.text:0000000000001843                 mov     rcx, rbp
.text:0000000000001846                 mov     rdx, rax        ; format
.text:0000000000001849                 xor     esi, esi        ; errnum
.text:000000000000184B                 xor     edi, edi        ; status
.text:000000000000184D                 xor     eax, eax
.text:000000000000184F                 xor     ebp, ebp
.text:0000000000001851                 call    _error
.text:0000000000001856                 jmp     short loc_17F1
.text:0000000000001858 ; ---------------------------------------------------------------------------
.text:0000000000001858
.text:0000000000001858 loc_1858:                               ; CODE XREF: main+CB↑j
.text:0000000000001858                 call    ___errno_location
.text:000000000000185D                 mov     dword ptr [rax], 0
.text:0000000000001863                 mov     rbx, rax
.text:0000000000001866                 call    _getuid
.text:000000000000186B                 cmp     eax, 0FFFFFFFFh
.text:000000000000186E                 mov     ebp, eax
.text:0000000000001870                 jz      loc_1924
.text:0000000000001876
.text:0000000000001876 loc_1876:                               ; CODE XREF: main+297↓j
.text:0000000000001876                 mov     dword ptr [rbx], 0
.text:000000000000187C                 call    _getegid
.text:0000000000001881                 cmp     eax, 0FFFFFFFFh
.text:0000000000001884                 mov     r12d, eax
.text:0000000000001887                 jz      short loc_18FB
.text:0000000000001889
.text:0000000000001889 loc_1889:                               ; CODE XREF: main+26E↓j
.text:0000000000001889                 mov     dword ptr [rbx], 0
.text:000000000000188F                 call    _getgid
.text:0000000000001894                 cmp     eax, 0FFFFFFFFh
.text:0000000000001897                 jz      loc_1951
.text:000000000000189D
.text:000000000000189D loc_189D:                               ; CODE XREF: main+2C4↓j
.text:000000000000189D                 xor     edi, edi
.text:000000000000189F                 mov     esi, ebp
.text:00000000000018A1                 mov     r9d, 20h ; ' '
.text:00000000000018A7                 mov     r8d, 1
.text:00000000000018AD                 mov     ecx, r12d
.text:00000000000018B0                 mov     edx, eax
.text:00000000000018B2                 call    print_group_list
.text:00000000000018B7                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000018BE                 mov     ebp, eax
.text:00000000000018C0                 mov     rax, [rdi+28h]
.text:00000000000018C4                 cmp     rax, [rdi+30h]
.text:00000000000018C8                 jnb     loc_197E
.text:00000000000018CE                 lea     rdx, [rax+1]
.text:00000000000018D2                 mov     [rdi+28h], rdx
.text:00000000000018D6                 mov     byte ptr [rax], 0Ah
.text:00000000000018D9
.text:00000000000018D9 loc_18D9:                               ; CODE XREF: main+E3↑j
.text:00000000000018D9                                         ; main+173↑j ...
.text:00000000000018D9                 xor     ebp, 1
.text:00000000000018DC                 pop     rdx
.text:00000000000018DD                 movzx   eax, bpl
.text:00000000000018E1                 pop     rbx
.text:00000000000018E2                 pop     rbp
.text:00000000000018E3                 pop     r12
.text:00000000000018E5                 pop     r13
.text:00000000000018E7                 pop     r14
.text:00000000000018E9                 pop     r15
.text:00000000000018EB                 retn
.text:00000000000018EC ; ---------------------------------------------------------------------------
.text:00000000000018EC
.text:00000000000018EC loc_18EC:                               ; CODE XREF: main+150↑j
.text:00000000000018EC                 mov     esi, 0Ah        ; int
.text:00000000000018F1                 call    ___overflow
.text:00000000000018F6                 jmp     loc_17F1
.text:00000000000018FB ; ---------------------------------------------------------------------------
.text:00000000000018FB
.text:00000000000018FB loc_18FB:                               ; CODE XREF: main+1F7↑j
.text:00000000000018FB                 cmp     dword ptr [rbx], 0
.text:00000000000018FE                 jz      short loc_1889
.text:0000000000001900                 lea     rsi, aCannotGetEffec ; "cannot get effective GID"
.text:0000000000001907                 mov     edx, 5          ; category
.text:000000000000190C                 xor     edi, edi        ; domainname
.text:000000000000190E                 call    _dcgettext
.text:0000000000001913                 mov     esi, [rbx]      ; errnum
.text:0000000000001915                 mov     rdx, rax        ; format
.text:0000000000001918                 mov     edi, 1          ; status
.text:000000000000191D                 xor     eax, eax
.text:000000000000191F                 call    _error
.text:0000000000001924
.text:0000000000001924 loc_1924:                               ; CODE XREF: main+1E0↑j
.text:0000000000001924                 cmp     dword ptr [rbx], 0
.text:0000000000001927                 jz      loc_1876
.text:000000000000192D                 lea     rsi, aCannotGetRealU ; "cannot get real UID"
.text:0000000000001934                 mov     edx, 5          ; category
.text:0000000000001939                 xor     edi, edi        ; domainname
.text:000000000000193B                 call    _dcgettext
.text:0000000000001940                 mov     esi, [rbx]      ; errnum
.text:0000000000001942                 mov     rdx, rax        ; format
.text:0000000000001945                 mov     edi, 1          ; status
.text:000000000000194A                 xor     eax, eax
.text:000000000000194C                 call    _error
.text:0000000000001951
.text:0000000000001951 loc_1951:                               ; CODE XREF: main+207↑j
.text:0000000000001951                 cmp     dword ptr [rbx], 0
.text:0000000000001954                 jz      loc_189D
.text:000000000000195A                 lea     rsi, aCannotGetRealG ; "cannot get real GID"
.text:0000000000001961                 mov     edx, 5          ; category
.text:0000000000001966                 xor     edi, edi        ; domainname
.text:0000000000001968                 call    _dcgettext
.text:000000000000196D                 mov     esi, [rbx]      ; errnum
.text:000000000000196F                 mov     rdx, rax        ; format
.text:0000000000001972                 mov     edi, (offset dword_0+1) ; _IO_FILE *
.text:0000000000001977                 xor     eax, eax
.text:0000000000001979                 call    _error
.text:000000000000197E
.text:000000000000197E loc_197E:                               ; CODE XREF: main+238↑j
.text:000000000000197E                 mov     esi, 0Ah        ; int
.text:0000000000001983                 call    ___overflow
.text:0000000000001988                 jmp     loc_18D9
.text:000000000000198D ; ---------------------------------------------------------------------------
.text:000000000000198D
.text:000000000000198D loc_198D:                               ; CODE XREF: main+7E↑j
.text:000000000000198D                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001992                 jnz     short loc_199B
.text:0000000000001994                 xor     edi, edi        ; status
.text:0000000000001996                 call    usage
.text:000000000000199B ; ---------------------------------------------------------------------------
.text:000000000000199B
.text:000000000000199B loc_199B:                               ; CODE XREF: main+302↑j
.text:000000000000199B                 mov     edi, 1          ; status
.text:00000000000019A0                 call    usage
.text:00000000000019A0 ; } // starts at 1690
.text:00000000000019A0 main            endp
.text:00000000000019A0
.text:00000000000019A0 ; ---------------------------------------------------------------------------
.text:00000000000019A5                 align 10h
.text:00000000000019B0
.text:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019B0
.text:00000000000019B0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000019B0
.text:00000000000019B0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000019B0                 public start
.text:00000000000019B0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000019B0 ; __unwind {
.text:00000000000019B0                 xor     ebp, ebp
.text:00000000000019B2                 mov     r9, rdx         ; rtld_fini
.text:00000000000019B5                 pop     rsi             ; argc
.text:00000000000019B6                 mov     rdx, rsp        ; ubp_av
.text:00000000000019B9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000019BD                 push    rax
.text:00000000000019BE                 push    rsp             ; stack_end
.text:00000000000019BF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000019C6                 lea     rcx, __libc_csu_init ; init
.text:00000000000019CD                 lea     rdi, main       ; main
.text:00000000000019D4                 call    cs:__libc_start_main_ptr
.text:00000000000019DA                 hlt
.text:00000000000019DA ; } // starts at 19B0
.text:00000000000019DA start           endp
.text:00000000000019DA
.text:00000000000019DA ; ---------------------------------------------------------------------------
.text:00000000000019DB                 align 20h
.text:00000000000019E0
.text:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019E0
.text:00000000000019E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000019E0
.text:00000000000019E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1A93↓p
.text:00000000000019E0                 lea     rdi, __bss_start
.text:00000000000019E7                 push    rbp
.text:00000000000019E8                 lea     rax, __bss_start
.text:00000000000019EF                 cmp     rax, rdi
.text:00000000000019F2                 mov     rbp, rsp
.text:00000000000019F5                 jz      short loc_1A10
.text:00000000000019F7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000019FE                 test    rax, rax
.text:0000000000001A01                 jz      short loc_1A10
.text:0000000000001A03                 pop     rbp
.text:0000000000001A04                 jmp     rax
.text:0000000000001A04 ; ---------------------------------------------------------------------------
.text:0000000000001A06                 align 10h
.text:0000000000001A10
.text:0000000000001A10 loc_1A10:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001A10                                         ; deregister_tm_clones+21↑j
.text:0000000000001A10                 pop     rbp
.text:0000000000001A11                 retn
.text:0000000000001A11 deregister_tm_clones endp
.text:0000000000001A11
.text:0000000000001A11 ; ---------------------------------------------------------------------------
.text:0000000000001A12                 align 20h
.text:0000000000001A20
.text:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A20
.text:0000000000001A20 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A20
.text:0000000000001A20 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A20                 lea     rdi, __bss_start
.text:0000000000001A27                 lea     rsi, __bss_start
.text:0000000000001A2E                 push    rbp
.text:0000000000001A2F                 sub     rsi, rdi
.text:0000000000001A32                 mov     rbp, rsp
.text:0000000000001A35                 sar     rsi, 3
.text:0000000000001A39                 mov     rax, rsi
.text:0000000000001A3C                 shr     rax, 3Fh
.text:0000000000001A40                 add     rsi, rax
.text:0000000000001A43                 sar     rsi, 1
.text:0000000000001A46                 jz      short loc_1A60
.text:0000000000001A48                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001A4F                 test    rax, rax
.text:0000000000001A52                 jz      short loc_1A60
.text:0000000000001A54                 pop     rbp
.text:0000000000001A55                 jmp     rax
.text:0000000000001A55 ; ---------------------------------------------------------------------------
.text:0000000000001A57                 align 20h
.text:0000000000001A60
.text:0000000000001A60 loc_1A60:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001A60                                         ; register_tm_clones+32↑j
.text:0000000000001A60                 pop     rbp
.text:0000000000001A61                 retn
.text:0000000000001A61 register_tm_clones endp
.text:0000000000001A61
.text:0000000000001A61 ; ---------------------------------------------------------------------------
.text:0000000000001A62                 align 10h
.text:0000000000001A70
.text:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A70
.text:0000000000001A70 ; Attributes: info_from_lumina
.text:0000000000001A70
.text:0000000000001A70 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001A70                 cmp     cs:completed_7697, 0
.text:0000000000001A77                 jnz     short locret_1AA8
.text:0000000000001A79                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001A81                 push    rbp
.text:0000000000001A82                 mov     rbp, rsp
.text:0000000000001A85                 jz      short loc_1A93
.text:0000000000001A87                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001A8E                 call    __cxa_finalize
.text:0000000000001A93
.text:0000000000001A93 loc_1A93:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001A93                 call    deregister_tm_clones
.text:0000000000001A98                 mov     cs:completed_7697, 1
.text:0000000000001A9F                 pop     rbp
.text:0000000000001AA0                 retn
.text:0000000000001AA0 ; ---------------------------------------------------------------------------
.text:0000000000001AA1                 align 8
.text:0000000000001AA8
.text:0000000000001AA8 locret_1AA8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001AA8                 rep retn
.text:0000000000001AA8 __do_global_dtors_aux endp
.text:0000000000001AA8
.text:0000000000001AA8 ; ---------------------------------------------------------------------------
.text:0000000000001AAA                 align 10h
.text:0000000000001AB0
.text:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AB0
.text:0000000000001AB0 ; Attributes: bp-based frame
.text:0000000000001AB0
.text:0000000000001AB0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001AB0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001AB0                 push    rbp
.text:0000000000001AB1                 mov     rbp, rsp
.text:0000000000001AB4                 pop     rbp
.text:0000000000001AB5                 jmp     register_tm_clones
.text:0000000000001AB5 frame_dummy     endp
.text:0000000000001AB5
.text:0000000000001AB5 ; ---------------------------------------------------------------------------
.text:0000000000001ABA                 align 20h
.text:0000000000001AC0
.text:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AC0
.text:0000000000001AC0 ; Attributes: noreturn
.text:0000000000001AC0
.text:0000000000001AC0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001AC0                 public usage
.text:0000000000001AC0 usage           proc near               ; CODE XREF: main+306↑p
.text:0000000000001AC0                                         ; main+310↑p
.text:0000000000001AC0
.text:0000000000001AC0 var_A8          = qword ptr -0A8h
.text:0000000000001AC0 var_A0          = qword ptr -0A0h
.text:0000000000001AC0 var_98          = qword ptr -98h
.text:0000000000001AC0 var_90          = qword ptr -90h
.text:0000000000001AC0 var_88          = qword ptr -88h
.text:0000000000001AC0 var_80          = qword ptr -80h
.text:0000000000001AC0 var_78          = qword ptr -78h
.text:0000000000001AC0 var_70          = qword ptr -70h
.text:0000000000001AC0 var_68          = qword ptr -68h
.text:0000000000001AC0 var_60          = qword ptr -60h
.text:0000000000001AC0 var_58          = qword ptr -58h
.text:0000000000001AC0 var_50          = qword ptr -50h
.text:0000000000001AC0 var_48          = qword ptr -48h
.text:0000000000001AC0 var_40          = qword ptr -40h
.text:0000000000001AC0 var_30          = qword ptr -30h
.text:0000000000001AC0
.text:0000000000001AC0 ; __unwind {
.text:0000000000001AC0                 push    r13
.text:0000000000001AC2                 push    r12
.text:0000000000001AC4                 mov     edx, 5          ; category
.text:0000000000001AC9                 push    rbp
.text:0000000000001ACA                 push    rbx
.text:0000000000001ACB                 mov     ebp, edi
.text:0000000000001ACD                 sub     rsp, 88h
.text:0000000000001AD4                 mov     rbx, cs:program_name
.text:0000000000001ADB                 mov     rax, fs:28h
.text:0000000000001AE4                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001AE9                 xor     eax, eax
.text:0000000000001AEB                 test    edi, edi
.text:0000000000001AED                 jz      short loc_1B1D
.text:0000000000001AEF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001AF6                 xor     edi, edi        ; domainname
.text:0000000000001AF8                 call    _dcgettext
.text:0000000000001AFD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001B04                 mov     rdx, rax
.text:0000000000001B07                 mov     rcx, rbx
.text:0000000000001B0A                 mov     esi, 1
.text:0000000000001B0F                 xor     eax, eax
.text:0000000000001B11                 call    ___fprintf_chk
.text:0000000000001B16
.text:0000000000001B16 loc_1B16:                               ; CODE XREF: usage+27E↓j
.text:0000000000001B16                 mov     edi, ebp        ; status
.text:0000000000001B18                 call    _exit
.text:0000000000001B1D ; ---------------------------------------------------------------------------
.text:0000000000001B1D
.text:0000000000001B1D loc_1B1D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001B1D                 lea     rsi, aUsageSOptionUs ; "Usage: %s [OPTION]... [USERNAME]...\n"
.text:0000000000001B24                 xor     edi, edi        ; domainname
.text:0000000000001B26                 call    _dcgettext
.text:0000000000001B2B                 mov     rdx, rbx
.text:0000000000001B2E                 mov     rsi, rax
.text:0000000000001B31                 mov     edi, 1
.text:0000000000001B36                 xor     eax, eax
.text:0000000000001B38                 call    ___printf_chk
.text:0000000000001B3D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B44                 lea     rsi, aPrintGroupMemb ; "Print group memberships for each USERNA"...
.text:0000000000001B4B                 mov     edx, 5          ; category
.text:0000000000001B50                 xor     edi, edi        ; domainname
.text:0000000000001B52                 call    _dcgettext
.text:0000000000001B57                 mov     rsi, rbx        ; stream
.text:0000000000001B5A                 mov     rdi, rax        ; s
.text:0000000000001B5D                 call    _fputs_unlocked
.text:0000000000001B62                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B69                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001B70                 mov     edx, 5          ; category
.text:0000000000001B75                 xor     edi, edi        ; domainname
.text:0000000000001B77                 call    _dcgettext
.text:0000000000001B7C                 mov     rsi, rbx        ; stream
.text:0000000000001B7F                 mov     rdi, rax        ; s
.text:0000000000001B82                 call    _fputs_unlocked
.text:0000000000001B87                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B8E                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001B95                 mov     edx, 5          ; category
.text:0000000000001B9A                 xor     edi, edi        ; domainname
.text:0000000000001B9C                 call    _dcgettext
.text:0000000000001BA1                 mov     rsi, rbx        ; stream
.text:0000000000001BA4                 mov     rdi, rax        ; s
.text:0000000000001BA7                 lea     rbx, aGroups    ; "groups"
.text:0000000000001BAE                 call    _fputs_unlocked
.text:0000000000001BB3                 lea     rax, asc_4E0B   ; "["
.text:0000000000001BBA                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001BC1                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001BCA                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001BD3                 mov     rdx, rsp
.text:0000000000001BD6                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001BDA                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001BE1                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001BE6                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001BED                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001BF2                 lea     rax, domainname ; "coreutils"
.text:0000000000001BF9                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001BFE                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001C05                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001C0A                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001C11                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001C16                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001C1B                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001C22                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001C27                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001C2E                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001C33                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001C38                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001C3D                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001C42                 nop     word ptr [rax+rax+00h]
.text:0000000000001C48
.text:0000000000001C48 loc_1C48:                               ; CODE XREF: usage+1A5↓j
.text:0000000000001C48                 add     rdx, 10h
.text:0000000000001C4C                 mov     rdi, [rdx]
.text:0000000000001C4F                 test    rdi, rdi
.text:0000000000001C52                 jz      short loc_1C67
.text:0000000000001C54                 mov     ecx, 7
.text:0000000000001C59                 mov     rsi, rbx
.text:0000000000001C5C                 repe cmpsb
.text:0000000000001C5E                 setnbe  al
.text:0000000000001C61                 sbb     al, 0
.text:0000000000001C63                 test    al, al
.text:0000000000001C65                 jnz     short loc_1C48
.text:0000000000001C67
.text:0000000000001C67 loc_1C67:                               ; CODE XREF: usage+192↑j
.text:0000000000001C67                 mov     r12, [rdx+8]
.text:0000000000001C6B                 xor     edi, edi        ; domainname
.text:0000000000001C6D                 mov     edx, 5          ; category
.text:0000000000001C72                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001C79                 test    r12, r12
.text:0000000000001C7C                 jz      loc_1D43
.text:0000000000001C82                 call    _dcgettext
.text:0000000000001C87                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001C8E                 lea     rdx, unk_4E81
.text:0000000000001C95                 mov     rsi, rax
.text:0000000000001C98                 mov     edi, 1
.text:0000000000001C9D                 xor     eax, eax
.text:0000000000001C9F                 call    ___printf_chk
.text:0000000000001CA4                 xor     esi, esi        ; locale
.text:0000000000001CA6                 mov     edi, 5          ; category
.text:0000000000001CAB                 call    _setlocale
.text:0000000000001CB0                 test    rax, rax
.text:0000000000001CB3                 jz      short loc_1CD1
.text:0000000000001CB5                 lea     rsi, s2         ; "en_"
.text:0000000000001CBC                 mov     edx, 3          ; n
.text:0000000000001CC1                 mov     rdi, rax        ; s1
.text:0000000000001CC4                 call    _strncmp
.text:0000000000001CC9                 test    eax, eax
.text:0000000000001CCB                 jnz     loc_1DD8
.text:0000000000001CD1
.text:0000000000001CD1 loc_1CD1:                               ; CODE XREF: usage+1F3↑j
.text:0000000000001CD1                                         ; usage+33D↓j
.text:0000000000001CD1                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001CD8                 xor     edi, edi        ; domainname
.text:0000000000001CDA                 mov     edx, 5          ; category
.text:0000000000001CDF                 call    _dcgettext
.text:0000000000001CE4                 lea     rcx, aGroups    ; "groups"
.text:0000000000001CEB                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001CF2                 mov     rsi, rax
.text:0000000000001CF5                 mov     edi, 1
.text:0000000000001CFA                 xor     eax, eax
.text:0000000000001CFC                 call    ___printf_chk
.text:0000000000001D01                 cmp     r12, rbx
.text:0000000000001D04                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001D0B                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001D12                 cmovz   rbx, rcx
.text:0000000000001D16
.text:0000000000001D16 loc_1D16:                               ; CODE XREF: usage+30C↓j
.text:0000000000001D16                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001D1D                 xor     edi, edi        ; domainname
.text:0000000000001D1F                 mov     edx, 5          ; category
.text:0000000000001D24                 call    _dcgettext
.text:0000000000001D29                 mov     rcx, rbx
.text:0000000000001D2C                 mov     rsi, rax
.text:0000000000001D2F                 mov     rdx, r12
.text:0000000000001D32                 mov     edi, 1
.text:0000000000001D37                 xor     eax, eax
.text:0000000000001D39                 call    ___printf_chk
.text:0000000000001D3E                 jmp     loc_1B16
.text:0000000000001D43 ; ---------------------------------------------------------------------------
.text:0000000000001D43
.text:0000000000001D43 loc_1D43:                               ; CODE XREF: usage+1BC↑j
.text:0000000000001D43                 call    _dcgettext
.text:0000000000001D48                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D4F                 lea     rdx, unk_4E81
.text:0000000000001D56                 mov     rsi, rax
.text:0000000000001D59                 mov     edi, 1
.text:0000000000001D5E                 xor     eax, eax
.text:0000000000001D60                 call    ___printf_chk
.text:0000000000001D65                 xor     esi, esi        ; locale
.text:0000000000001D67                 mov     edi, 5          ; category
.text:0000000000001D6C                 call    _setlocale
.text:0000000000001D71                 test    rax, rax
.text:0000000000001D74                 jz      short loc_1D8E
.text:0000000000001D76                 lea     rsi, s2         ; "en_"
.text:0000000000001D7D                 mov     edx, 3          ; n
.text:0000000000001D82                 mov     rdi, rax        ; s1
.text:0000000000001D85                 call    _strncmp
.text:0000000000001D8A                 test    eax, eax
.text:0000000000001D8C                 jnz     short loc_1DD1
.text:0000000000001D8E
.text:0000000000001D8E loc_1D8E:                               ; CODE XREF: usage+2B4↑j
.text:0000000000001D8E                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001D95                 mov     edx, 5          ; category
.text:0000000000001D9A                 xor     edi, edi        ; domainname
.text:0000000000001D9C                 lea     r12, aGroups    ; "groups"
.text:0000000000001DA3                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001DAA                 call    _dcgettext
.text:0000000000001DAF                 lea     rcx, aGroups    ; "groups"
.text:0000000000001DB6                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001DBD                 mov     rsi, rax
.text:0000000000001DC0                 mov     edi, 1
.text:0000000000001DC5                 xor     eax, eax
.text:0000000000001DC7                 call    ___printf_chk
.text:0000000000001DCC                 jmp     loc_1D16
.text:0000000000001DD1 ; ---------------------------------------------------------------------------
.text:0000000000001DD1
.text:0000000000001DD1 loc_1DD1:                               ; CODE XREF: usage+2CC↑j
.text:0000000000001DD1                 lea     r12, aGroups    ; "groups"
.text:0000000000001DD8
.text:0000000000001DD8 loc_1DD8:                               ; CODE XREF: usage+20B↑j
.text:0000000000001DD8                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001DDF                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001DE6                 xor     edi, edi        ; domainname
.text:0000000000001DE8                 mov     edx, 5          ; category
.text:0000000000001DED                 call    _dcgettext
.text:0000000000001DF2                 mov     rsi, r13        ; stream
.text:0000000000001DF5                 mov     rdi, rax        ; s
.text:0000000000001DF8                 call    _fputs_unlocked
.text:0000000000001DFD                 jmp     loc_1CD1
.text:0000000000001DFD ; } // starts at 1AC0
.text:0000000000001DFD usage           endp
.text:0000000000001DFD
.text:0000000000001DFD ; ---------------------------------------------------------------------------
.text:0000000000001E02                 align 10h
.text:0000000000001E10
.text:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E10
.text:0000000000001E10
.text:0000000000001E10 ; __int64 __fastcall print_group(__gid_t gid)
.text:0000000000001E10                 public print_group
.text:0000000000001E10 print_group     proc near               ; CODE XREF: print_group_list+61↓p
.text:0000000000001E10                                         ; print_group_list+A4↓p ...
.text:0000000000001E10 ; __unwind {
.text:0000000000001E10                 push    rbp
.text:0000000000001E11                 push    rbx
.text:0000000000001E12                 mov     ebp, edi
.text:0000000000001E14                 mov     ebx, 1
.text:0000000000001E19                 sub     rsp, 8
.text:0000000000001E1D                 test    sil, sil
.text:0000000000001E20                 jz      short loc_1E60
.text:0000000000001E22                 mov     edi, ebp        ; gid
.text:0000000000001E24                 mov     ebx, esi
.text:0000000000001E26                 call    _getgrgid
.text:0000000000001E2B                 test    rax, rax
.text:0000000000001E2E                 jz      short loc_1E38
.text:0000000000001E30                 mov     rdi, [rax]
.text:0000000000001E33                 jmp     short loc_1E72
.text:0000000000001E33 ; ---------------------------------------------------------------------------
.text:0000000000001E35                 align 8
.text:0000000000001E38
.text:0000000000001E38 loc_1E38:                               ; CODE XREF: print_group+1E↑j
.text:0000000000001E38                 lea     rsi, aCannotFindName ; "cannot find name for group ID %lu"
.text:0000000000001E3F                 mov     edx, 5          ; category
.text:0000000000001E44                 xor     edi, edi        ; domainname
.text:0000000000001E46                 xor     ebx, ebx
.text:0000000000001E48                 call    _dcgettext
.text:0000000000001E4D                 mov     rcx, rbp
.text:0000000000001E50                 mov     rdx, rax        ; format
.text:0000000000001E53                 xor     esi, esi        ; errnum
.text:0000000000001E55                 xor     edi, edi        ; status
.text:0000000000001E57                 xor     eax, eax
.text:0000000000001E59                 call    _error
.text:0000000000001E5E                 xchg    ax, ax
.text:0000000000001E60
.text:0000000000001E60 loc_1E60:                               ; CODE XREF: print_group+10↑j
.text:0000000000001E60                 lea     rsi, buf_6964
.text:0000000000001E67                 mov     rdi, rbp
.text:0000000000001E6A                 call    umaxtostr
.text:0000000000001E6F                 mov     rdi, rax        ; s
.text:0000000000001E72
.text:0000000000001E72 loc_1E72:                               ; CODE XREF: print_group+23↑j
.text:0000000000001E72                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001E79                 call    _fputs_unlocked
.text:0000000000001E7E                 add     rsp, 8
.text:0000000000001E82                 mov     eax, ebx
.text:0000000000001E84                 pop     rbx
.text:0000000000001E85                 pop     rbp
.text:0000000000001E86                 retn
.text:0000000000001E86 ; } // starts at 1E10
.text:0000000000001E86 print_group     endp
.text:0000000000001E86
.text:0000000000001E86 ; ---------------------------------------------------------------------------
.text:0000000000001E87                 align 10h
.text:0000000000001E90
.text:0000000000001E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E90
.text:0000000000001E90
.text:0000000000001E90                 public print_group_list
.text:0000000000001E90 print_group_list proc near              ; CODE XREF: main+132↑p
.text:0000000000001E90                                         ; main+222↑p
.text:0000000000001E90
.text:0000000000001E90 var_51          = byte ptr -51h
.text:0000000000001E90 var_50          = dword ptr -50h
.text:0000000000001E90 var_4C          = dword ptr -4Ch
.text:0000000000001E90 ptr             = qword ptr -48h
.text:0000000000001E90 var_40          = qword ptr -40h
.text:0000000000001E90
.text:0000000000001E90 ; __unwind {
.text:0000000000001E90                 push    r15
.text:0000000000001E92                 push    r14
.text:0000000000001E94                 mov     r14, rdi
.text:0000000000001E97                 push    r13
.text:0000000000001E99                 push    r12
.text:0000000000001E9B                 mov     r13d, r8d
.text:0000000000001E9E                 push    rbp
.text:0000000000001E9F                 push    rbx
.text:0000000000001EA0                 mov     ebp, edx
.text:0000000000001EA2                 mov     r12d, ecx
.text:0000000000001EA5                 sub     rsp, 28h
.text:0000000000001EA9                 mov     rax, fs:28h
.text:0000000000001EB2                 mov     [rsp+58h+var_40], rax
.text:0000000000001EB7                 xor     eax, eax
.text:0000000000001EB9                 test    rdi, rdi
.text:0000000000001EBC                 mov     [rsp+58h+var_51], r9b
.text:0000000000001EC1                 jz      loc_2010
.text:0000000000001EC7                 mov     edi, esi        ; uid
.text:0000000000001EC9                 mov     [rsp+58h+var_4C], r9d
.text:0000000000001ECE                 call    _getpwuid
.text:0000000000001ED3                 mov     r9d, [rsp+58h+var_4C]
.text:0000000000001ED8                 test    rax, rax
.text:0000000000001EDB                 mov     r15, rax
.text:0000000000001EDE                 setnz   byte ptr [rsp+58h+var_50]
.text:0000000000001EE3
.text:0000000000001EE3 loc_1EE3:                               ; CODE XREF: print_group_list+188↓j
.text:0000000000001EE3                 movzx   r13d, r13b
.text:0000000000001EE7                 mov     edi, ebp        ; gid
.text:0000000000001EE9                 mov     [rsp+58h+var_4C], r9d
.text:0000000000001EEE                 mov     esi, r13d
.text:0000000000001EF1                 call    print_group
.text:0000000000001EF6                 mov     ebx, eax
.text:0000000000001EF8                 test    al, al
.text:0000000000001EFA                 movzx   eax, byte ptr [rsp+58h+var_50]
.text:0000000000001EFF                 cmovz   eax, ebx
.text:0000000000001F02                 cmp     ebp, r12d
.text:0000000000001F05                 mov     ebx, eax
.text:0000000000001F07                 jz      short loc_1F43
.text:0000000000001F09                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001F10                 mov     r9d, [rsp+58h+var_4C]
.text:0000000000001F15                 mov     rax, [rdi+28h]
.text:0000000000001F19                 cmp     rax, [rdi+30h]
.text:0000000000001F1D                 jnb     loc_20A0
.text:0000000000001F23                 lea     rdx, [rax+1]
.text:0000000000001F27                 mov     [rdi+28h], rdx
.text:0000000000001F2B                 mov     [rax], r9b
.text:0000000000001F2E
.text:0000000000001F2E loc_1F2E:                               ; CODE XREF: print_group_list+219↓j
.text:0000000000001F2E                 mov     esi, r13d
.text:0000000000001F31                 mov     edi, r12d       ; gid
.text:0000000000001F34                 call    print_group
.text:0000000000001F39                 test    al, al
.text:0000000000001F3B                 mov     eax, 0
.text:0000000000001F40                 cmovz   ebx, eax
.text:0000000000001F43
.text:0000000000001F43 loc_1F43:                               ; CODE XREF: print_group_list+77↑j
.text:0000000000001F43                 test    r15, r15
.text:0000000000001F46                 mov     esi, r12d
.text:0000000000001F49                 jz      short loc_1F4F
.text:0000000000001F4B                 mov     esi, [r15+14h]
.text:0000000000001F4F
.text:0000000000001F4F loc_1F4F:                               ; CODE XREF: print_group_list+B9↑j
.text:0000000000001F4F                 lea     rdx, [rsp+58h+ptr]
.text:0000000000001F54                 mov     rdi, r14
.text:0000000000001F57                 call    xgetgroups
.text:0000000000001F5C                 test    eax, eax
.text:0000000000001F5E                 js      loc_2020
.text:0000000000001F64                 mov     rdi, [rsp+58h+ptr]
.text:0000000000001F69                 jz      short loc_1FDE
.text:0000000000001F6B                 sub     eax, 1
.text:0000000000001F6E                 xor     r15d, r15d
.text:0000000000001F71                 lea     r14, ds:4[rax*4]
.text:0000000000001F79                 movzx   eax, [rsp+58h+var_51]
.text:0000000000001F7E                 mov     [rsp+58h+var_50], eax
.text:0000000000001F82                 nop     word ptr [rax+rax+00h]
.text:0000000000001F88
.text:0000000000001F88 loc_1F88:                               ; CODE XREF: print_group_list+14C↓j
.text:0000000000001F88                 mov     eax, [rdi+r15]
.text:0000000000001F8C                 cmp     eax, ebp
.text:0000000000001F8E                 jz      short loc_1FD5
.text:0000000000001F90                 cmp     eax, r12d
.text:0000000000001F93                 jz      short loc_1FD5
.text:0000000000001F95                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001F9C                 mov     rax, [rdi+28h]
.text:0000000000001FA0                 cmp     rax, [rdi+30h]
.text:0000000000001FA4                 jnb     loc_2060
.text:0000000000001FAA                 lea     rcx, [rax+1]
.text:0000000000001FAE                 mov     [rdi+28h], rcx
.text:0000000000001FB2                 movzx   ecx, [rsp+58h+var_51]
.text:0000000000001FB7                 mov     [rax], cl
.text:0000000000001FB9
.text:0000000000001FB9 loc_1FB9:                               ; CODE XREF: print_group_list+1D9↓j
.text:0000000000001FB9                 mov     rax, [rsp+58h+ptr]
.text:0000000000001FBE                 mov     esi, r13d
.text:0000000000001FC1                 mov     edi, [rax+r15]  ; gid
.text:0000000000001FC5                 call    print_group
.text:0000000000001FCA                 test    al, al
.text:0000000000001FCC                 mov     rdi, [rsp+58h+ptr] ; ptr
.text:0000000000001FD1                 jnz     short loc_1FD5
.text:0000000000001FD3                 xor     ebx, ebx
.text:0000000000001FD5
.text:0000000000001FD5 loc_1FD5:                               ; CODE XREF: print_group_list+FE↑j
.text:0000000000001FD5                                         ; print_group_list+103↑j ...
.text:0000000000001FD5                 add     r15, 4
.text:0000000000001FD9                 cmp     r14, r15
.text:0000000000001FDC                 jnz     short loc_1F88
.text:0000000000001FDE
.text:0000000000001FDE loc_1FDE:                               ; CODE XREF: print_group_list+D9↑j
.text:0000000000001FDE                 call    _free
.text:0000000000001FE3
.text:0000000000001FE3 loc_1FE3:                               ; CODE XREF: print_group_list+1CE↓j
.text:0000000000001FE3                                         ; print_group_list+203↓j
.text:0000000000001FE3                 mov     rdx, [rsp+58h+var_40]
.text:0000000000001FE8                 xor     rdx, fs:28h
.text:0000000000001FF1                 mov     eax, ebx
.text:0000000000001FF3                 jnz     loc_20AE
.text:0000000000001FF9                 add     rsp, 28h
.text:0000000000001FFD                 pop     rbx
.text:0000000000001FFE                 pop     rbp
.text:0000000000001FFF                 pop     r12
.text:0000000000002001                 pop     r13
.text:0000000000002003                 pop     r14
.text:0000000000002005                 pop     r15
.text:0000000000002007                 retn
.text:0000000000002007 ; ---------------------------------------------------------------------------
.text:0000000000002008                 align 10h
.text:0000000000002010
.text:0000000000002010 loc_2010:                               ; CODE XREF: print_group_list+31↑j
.text:0000000000002010                 xor     r15d, r15d
.text:0000000000002013                 mov     byte ptr [rsp+58h+var_50], 1
.text:0000000000002018                 jmp     loc_1EE3
.text:0000000000002018 ; ---------------------------------------------------------------------------
.text:000000000000201D                 align 20h
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: print_group_list+CE↑j
.text:0000000000002020                 call    ___errno_location
.text:0000000000002025                 test    r14, r14
.text:0000000000002028                 mov     rbx, rax
.text:000000000000202B                 jz      short loc_2070
.text:000000000000202D                 mov     rdi, r14
.text:0000000000002030                 call    quote
.text:0000000000002035                 lea     rsi, aFailedToGetGro ; "failed to get groups for user %s"
.text:000000000000203C                 mov     edx, 5          ; category
.text:0000000000002041                 xor     edi, edi        ; domainname
.text:0000000000002043                 mov     rbp, rax
.text:0000000000002046                 call    _dcgettext
.text:000000000000204B                 mov     esi, [rbx]      ; errnum
.text:000000000000204D                 mov     rdx, rax        ; format
.text:0000000000002050                 mov     rcx, rbp
.text:0000000000002053                 xor     edi, edi        ; status
.text:0000000000002055                 xor     eax, eax
.text:0000000000002057                 xor     ebx, ebx
.text:0000000000002059                 call    _error
.text:000000000000205E                 jmp     short loc_1FE3
.text:0000000000002060 ; ---------------------------------------------------------------------------
.text:0000000000002060
.text:0000000000002060 loc_2060:                               ; CODE XREF: print_group_list+114↑j
.text:0000000000002060                 mov     esi, [rsp+58h+var_50] ; int
.text:0000000000002064                 call    ___overflow
.text:0000000000002069                 jmp     loc_1FB9
.text:0000000000002069 ; ---------------------------------------------------------------------------
.text:000000000000206E                 align 10h
.text:0000000000002070
.text:0000000000002070 loc_2070:                               ; CODE XREF: print_group_list+19B↑j
.text:0000000000002070                 lea     rsi, aFailedToGetGro_0 ; "failed to get groups for the current pr"...
.text:0000000000002077                 mov     edx, 5          ; category
.text:000000000000207C                 xor     edi, edi        ; domainname
.text:000000000000207E                 call    _dcgettext
.text:0000000000002083                 mov     esi, [rbx]      ; errnum
.text:0000000000002085                 mov     rdx, rax        ; format
.text:0000000000002088                 xor     edi, edi        ; status
.text:000000000000208A                 xor     eax, eax
.text:000000000000208C                 xor     ebx, ebx
.text:000000000000208E                 call    _error
.text:0000000000002093                 jmp     loc_1FE3
.text:0000000000002093 ; ---------------------------------------------------------------------------
.text:0000000000002098                 align 20h
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: print_group_list+8D↑j
.text:00000000000020A0                 movzx   esi, r9b        ; int
.text:00000000000020A4                 call    ___overflow
.text:00000000000020A9                 jmp     loc_1F2E
.text:00000000000020AE ; ---------------------------------------------------------------------------
.text:00000000000020AE
.text:00000000000020AE loc_20AE:                               ; CODE XREF: print_group_list+163↑j
.text:00000000000020AE                 call    ___stack_chk_fail
.text:00000000000020AE ; } // starts at 1E90
.text:00000000000020AE print_group_list endp
.text:00000000000020AE
.text:00000000000020AE ; ---------------------------------------------------------------------------
.text:00000000000020B3                 align 20h
.text:00000000000020C0
.text:00000000000020C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020C0
.text:00000000000020C0
.text:00000000000020C0                 public close_stdout_set_file_name
.text:00000000000020C0 close_stdout_set_file_name proc near
.text:00000000000020C0 ; __unwind {
.text:00000000000020C0                 mov     cs:file_name, rdi
.text:00000000000020C7                 retn
.text:00000000000020C7 ; } // starts at 20C0
.text:00000000000020C7 close_stdout_set_file_name endp
.text:00000000000020C7
.text:00000000000020C7 ; ---------------------------------------------------------------------------
.text:00000000000020C8                 align 10h
.text:00000000000020D0
.text:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020D0
.text:00000000000020D0
.text:00000000000020D0                 public close_stdout_set_ignore_EPIPE
.text:00000000000020D0 close_stdout_set_ignore_EPIPE proc near
.text:00000000000020D0 ; __unwind {
.text:00000000000020D0                 mov     cs:ignore_EPIPE, dil
.text:00000000000020D7                 retn
.text:00000000000020D7 ; } // starts at 20D0
.text:00000000000020D7 close_stdout_set_ignore_EPIPE endp
.text:00000000000020D7
.text:00000000000020D7 ; ---------------------------------------------------------------------------
.text:00000000000020D8                 align 20h
.text:00000000000020E0
.text:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020E0
.text:00000000000020E0 ; Attributes: info_from_lumina
.text:00000000000020E0
.text:00000000000020E0 ; void __cdecl close_stdout()
.text:00000000000020E0                 public close_stdout
.text:00000000000020E0 close_stdout    proc near               ; DATA XREF: main+4C↑o
.text:00000000000020E0 ; __unwind {
.text:00000000000020E0                 push    rbp
.text:00000000000020E1                 push    rbx
.text:00000000000020E2                 sub     rsp, 8
.text:00000000000020E6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000020ED                 call    close_stream
.text:00000000000020F2                 test    eax, eax
.text:00000000000020F4                 jz      short loc_210C
.text:00000000000020F6                 call    ___errno_location
.text:00000000000020FB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000002102                 mov     rbx, rax
.text:0000000000002105                 jz      short loc_2123
.text:0000000000002107                 cmp     dword ptr [rax], 20h ; ' '
.text:000000000000210A                 jnz     short loc_2123
.text:000000000000210C
.text:000000000000210C loc_210C:                               ; CODE XREF: close_stdout+14↑j
.text:000000000000210C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000002113                 call    close_stream
.text:0000000000002118                 test    eax, eax
.text:000000000000211A                 jnz     short loc_2162
.text:000000000000211C                 add     rsp, 8
.text:0000000000002120                 pop     rbx
.text:0000000000002121                 pop     rbp
.text:0000000000002122                 retn
.text:0000000000002123 ; ---------------------------------------------------------------------------
.text:0000000000002123
.text:0000000000002123 loc_2123:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000002123                                         ; close_stdout+2A↑j
.text:0000000000002123                 lea     rsi, aWriteError ; "write error"
.text:000000000000212A                 xor     edi, edi        ; domainname
.text:000000000000212C                 mov     edx, 5          ; category
.text:0000000000002131                 call    _dcgettext
.text:0000000000002136                 mov     rdi, cs:file_name
.text:000000000000213D                 mov     rbp, rax
.text:0000000000002140                 test    rdi, rdi
.text:0000000000002143                 jz      short loc_216D
.text:0000000000002145                 call    quotearg_colon
.text:000000000000214A                 mov     esi, [rbx]      ; errnum
.text:000000000000214C                 lea     rdx, format     ; "%s: %s"
.text:0000000000002153                 mov     rcx, rax
.text:0000000000002156                 mov     r8, rbp
.text:0000000000002159                 xor     edi, edi        ; status
.text:000000000000215B                 xor     eax, eax
.text:000000000000215D                 call    _error
.text:0000000000002162
.text:0000000000002162 loc_2162:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000002162                                         ; close_stdout+A2↓j
.text:0000000000002162                 mov     edi, cs:exit_failure ; status
.text:0000000000002168                 call    __exit
.text:000000000000216D ; ---------------------------------------------------------------------------
.text:000000000000216D
.text:000000000000216D loc_216D:                               ; CODE XREF: close_stdout+63↑j
.text:000000000000216D                 mov     esi, [rbx]      ; errnum
.text:000000000000216F                 lea     rdx, format+4   ; format
.text:0000000000002176                 mov     rcx, rax
.text:0000000000002179                 xor     edi, edi        ; status
.text:000000000000217B                 xor     eax, eax
.text:000000000000217D                 call    _error
.text:0000000000002182                 jmp     short loc_2162
.text:0000000000002182 ; } // starts at 20E0
.text:0000000000002182 close_stdout    endp
.text:0000000000002182
.text:0000000000002182 ; ---------------------------------------------------------------------------
.text:0000000000002184                 align 10h
.text:0000000000002190
.text:0000000000002190 ; =============== S U B R O U T I N E =======================================
.text:0000000000002190
.text:0000000000002190 ; Attributes: info_from_lumina
.text:0000000000002190
.text:0000000000002190 ; char *__fastcall umaxtostr(uintmax_t i, char *buf)
.text:0000000000002190                 public umaxtostr
.text:0000000000002190 umaxtostr       proc near               ; CODE XREF: print_group+5A↑p
.text:0000000000002190 ; __unwind {
.text:0000000000002190                 lea     rcx, [rsi+14h]
.text:0000000000002194                 mov     byte ptr [rsi+14h], 0
.text:0000000000002198                 mov     rsi, 0CCCCCCCCCCCCCCCDh
.text:00000000000021A2                 nop     word ptr [rax+rax+00h]
.text:00000000000021A8
.text:00000000000021A8 loc_21A8:                               ; CODE XREF: umaxtostr+3C↓j
.text:00000000000021A8                 mov     rax, rdi
.text:00000000000021AB                 sub     rcx, 1
.text:00000000000021AF                 mul     rsi
.text:00000000000021B2                 shr     rdx, 3
.text:00000000000021B6                 lea     rax, [rdx+rdx*4]
.text:00000000000021BA                 add     rax, rax
.text:00000000000021BD                 sub     rdi, rax
.text:00000000000021C0                 add     edi, 30h ; '0'
.text:00000000000021C3                 test    rdx, rdx
.text:00000000000021C6                 mov     [rcx], dil
.text:00000000000021C9                 mov     rdi, rdx
.text:00000000000021CC                 jnz     short loc_21A8
.text:00000000000021CE                 mov     rax, rcx
.text:00000000000021D1                 retn
.text:00000000000021D1 ; } // starts at 2190
.text:00000000000021D1 umaxtostr       endp
.text:00000000000021D1
.text:00000000000021D1 ; ---------------------------------------------------------------------------
.text:00000000000021D2                 align 20h
.text:00000000000021E0
.text:00000000000021E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021E0
.text:00000000000021E0
.text:00000000000021E0                 public set_program_name
.text:00000000000021E0 set_program_name proc near              ; CODE XREF: main+17↑p
.text:00000000000021E0 ; __unwind {
.text:00000000000021E0                 test    rdi, rdi
.text:00000000000021E3                 push    rbx
.text:00000000000021E4                 jz      short loc_225D
.text:00000000000021E6                 mov     esi, 2Fh ; '/'  ; c
.text:00000000000021EB                 mov     rbx, rdi
.text:00000000000021EE                 call    _strrchr
.text:00000000000021F3                 test    rax, rax
.text:00000000000021F6                 jz      short loc_224D
.text:00000000000021F8                 lea     r8, [rax+1]
.text:00000000000021FC                 mov     rdx, r8
.text:00000000000021FF                 sub     rdx, rbx
.text:0000000000002202                 cmp     rdx, 6
.text:0000000000002206                 jle     short loc_224D
.text:0000000000002208                 lea     rsi, [rax-6]
.text:000000000000220C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000002213                 mov     ecx, 7
.text:0000000000002218                 repe cmpsb
.text:000000000000221A                 setnbe  dl
.text:000000000000221D                 sbb     dl, 0
.text:0000000000002220                 test    dl, dl
.text:0000000000002222                 jnz     short loc_224D
.text:0000000000002224                 lea     rdi, aLt        ; "lt-"
.text:000000000000222B                 mov     ecx, 3
.text:0000000000002230                 mov     rsi, r8
.text:0000000000002233                 mov     rbx, r8
.text:0000000000002236                 repe cmpsb
.text:0000000000002238                 setnbe  dl
.text:000000000000223B                 sbb     dl, 0
.text:000000000000223E                 test    dl, dl
.text:0000000000002240                 jnz     short loc_224D
.text:0000000000002242                 lea     rbx, [rax+4]
.text:0000000000002246                 mov     cs:__bss_start, rbx
.text:000000000000224D
.text:000000000000224D loc_224D:                               ; CODE XREF: set_program_name+16↑j
.text:000000000000224D                                         ; set_program_name+26↑j ...
.text:000000000000224D                 mov     cs:program_name, rbx
.text:0000000000002254                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000225B                 pop     rbx
.text:000000000000225C                 retn
.text:000000000000225D ; ---------------------------------------------------------------------------
.text:000000000000225D
.text:000000000000225D loc_225D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000225D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002264                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000226B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002270                 mov     esi, 1          ; size
.text:0000000000002275                 call    _fwrite
.text:000000000000227A                 call    _abort
.text:000000000000227A ; } // starts at 21E0
.text:000000000000227A set_program_name endp
.text:000000000000227A
.text:000000000000227A ; ---------------------------------------------------------------------------
.text:000000000000227F                 align 20h
.text:0000000000002280
.text:0000000000002280 ; =============== S U B R O U T I N E =======================================
.text:0000000000002280
.text:0000000000002280 ; Attributes: info_from_lumina
.text:0000000000002280
.text:0000000000002280 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002280 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002280                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002280 ; __unwind {
.text:0000000000002280                 push    rbp
.text:0000000000002281                 push    rbx
.text:0000000000002282                 mov     rbp, rdi
.text:0000000000002285                 mov     ebx, esi
.text:0000000000002287                 sub     rsp, 8
.text:000000000000228B                 call    locale_charset
.text:0000000000002290                 movzx   edx, byte ptr [rax]
.text:0000000000002293                 and     edx, 0FFFFFFDFh
.text:0000000000002296                 cmp     dl, 55h ; 'U'
.text:0000000000002299                 jz      short loc_2310
.text:000000000000229B                 cmp     dl, 47h ; 'G'
.text:000000000000229E                 jz      short loc_22C0
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: gettext_quote+4A↓j
.text:00000000000022A0                                         ; gettext_quote+50↓j ...
.text:00000000000022A0                 lea     rax, unk_523B
.text:00000000000022A7                 lea     rdx, asc_523D   ; "'"
.text:00000000000022AE                 cmp     ebx, 9
.text:00000000000022B1                 cmovnz  rax, rdx
.text:00000000000022B5                 add     rsp, 8
.text:00000000000022B9                 pop     rbx
.text:00000000000022BA                 pop     rbp
.text:00000000000022BB                 retn
.text:00000000000022BB ; ---------------------------------------------------------------------------
.text:00000000000022BC                 align 20h
.text:00000000000022C0
.text:00000000000022C0 loc_22C0:                               ; CODE XREF: gettext_quote+1E↑j
.text:00000000000022C0                 movzx   edx, byte ptr [rax+1]
.text:00000000000022C4                 and     edx, 0FFFFFFDFh
.text:00000000000022C7                 cmp     dl, 42h ; 'B'
.text:00000000000022CA                 jnz     short loc_22A0
.text:00000000000022CC                 cmp     byte ptr [rax+2], 31h ; '1'
.text:00000000000022D0                 jnz     short loc_22A0
.text:00000000000022D2                 cmp     byte ptr [rax+3], 38h ; '8'
.text:00000000000022D6                 jnz     short loc_22A0
.text:00000000000022D8                 cmp     byte ptr [rax+4], 30h ; '0'
.text:00000000000022DC                 jnz     short loc_22A0
.text:00000000000022DE                 cmp     byte ptr [rax+5], 33h ; '3'
.text:00000000000022E2                 jnz     short loc_22A0
.text:00000000000022E4                 cmp     byte ptr [rax+6], 30h ; '0'
.text:00000000000022E8                 jnz     short loc_22A0
.text:00000000000022EA                 cmp     byte ptr [rax+7], 0
.text:00000000000022EE                 jnz     short loc_22A0
.text:00000000000022F0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000022F4                 lea     rax, unk_5234
.text:00000000000022FB                 lea     rdx, unk_5238
.text:0000000000002302                 cmovnz  rax, rdx
.text:0000000000002306                 add     rsp, 8
.text:000000000000230A                 pop     rbx
.text:000000000000230B                 pop     rbp
.text:000000000000230C                 retn
.text:000000000000230C ; ---------------------------------------------------------------------------
.text:000000000000230D                 align 10h
.text:0000000000002310
.text:0000000000002310 loc_2310:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000002310                 movzx   edx, byte ptr [rax+1]
.text:0000000000002314                 and     edx, 0FFFFFFDFh
.text:0000000000002317                 cmp     dl, 54h ; 'T'
.text:000000000000231A                 jnz     short loc_22A0
.text:000000000000231C                 movzx   edx, byte ptr [rax+2]
.text:0000000000002320                 and     edx, 0FFFFFFDFh
.text:0000000000002323                 cmp     dl, 46h ; 'F'
.text:0000000000002326                 jnz     loc_22A0
.text:000000000000232C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000002330                 jnz     loc_22A0
.text:0000000000002336                 cmp     byte ptr [rax+4], 38h ; '8'
.text:000000000000233A                 jnz     loc_22A0
.text:0000000000002340                 cmp     byte ptr [rax+5], 0
.text:0000000000002344                 jnz     loc_22A0
.text:000000000000234A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:000000000000234E                 lea     rax, unk_522C
.text:0000000000002355                 lea     rdx, unk_5230
.text:000000000000235C                 cmovnz  rax, rdx
.text:0000000000002360                 add     rsp, 8
.text:0000000000002364                 pop     rbx
.text:0000000000002365                 pop     rbp
.text:0000000000002366                 retn
.text:0000000000002366 ; } // starts at 2280
.text:0000000000002366 gettext_quote   endp
.text:0000000000002366
.text:0000000000002366 ; ---------------------------------------------------------------------------
.text:0000000000002367                 align 10h
.text:0000000000002370
.text:0000000000002370 ; =============== S U B R O U T I N E =======================================
.text:0000000000002370
.text:0000000000002370 ; Attributes: info_from_lumina
.text:0000000000002370
.text:0000000000002370 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002370 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002370                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002370
.text:0000000000002370 var_E0          = dword ptr -0E0h
.text:0000000000002370 var_DB          = byte ptr -0DBh
.text:0000000000002370 var_DA          = byte ptr -0DAh
.text:0000000000002370 var_D9          = byte ptr -0D9h
.text:0000000000002370 s               = qword ptr -0D8h
.text:0000000000002370 n               = qword ptr -0D0h
.text:0000000000002370 var_C8          = qword ptr -0C8h
.text:0000000000002370 ps              = qword ptr -0C0h
.text:0000000000002370 var_B8          = qword ptr -0B8h
.text:0000000000002370 var_B0          = qword ptr -0B0h
.text:0000000000002370 var_A8          = qword ptr -0A8h
.text:0000000000002370 s2              = qword ptr -0A0h
.text:0000000000002370 var_98          = qword ptr -98h
.text:0000000000002370 var_90          = qword ptr -90h
.text:0000000000002370 var_88          = qword ptr -88h
.text:0000000000002370 var_80          = qword ptr -80h
.text:0000000000002370 var_78          = qword ptr -78h
.text:0000000000002370 var_70          = dword ptr -70h
.text:0000000000002370 var_6C          = byte ptr -6Ch
.text:0000000000002370 var_6B          = byte ptr -6Bh
.text:0000000000002370 var_6A          = byte ptr -6Ah
.text:0000000000002370 var_69          = byte ptr -69h
.text:0000000000002370 var_68          = qword ptr -68h
.text:0000000000002370 var_60          = qword ptr -60h
.text:0000000000002370 wc              = dword ptr -4Ch
.text:0000000000002370 var_48          = qword ptr -48h
.text:0000000000002370 var_40          = qword ptr -40h
.text:0000000000002370 arg_0           = qword ptr  8
.text:0000000000002370 arg_8           = qword ptr  10h
.text:0000000000002370 arg_10          = qword ptr  18h
.text:0000000000002370
.text:0000000000002370 ; __unwind {
.text:0000000000002370                 push    r15
.text:0000000000002372                 push    r14
.text:0000000000002374                 mov     r15d, r8d
.text:0000000000002377                 push    r13
.text:0000000000002379                 push    r12
.text:000000000000237B                 mov     r14, rdi
.text:000000000000237E                 push    rbp
.text:000000000000237F                 push    rbx
.text:0000000000002380                 mov     ebx, r9d
.text:0000000000002383                 mov     r13, rsi
.text:0000000000002386                 mov     rbp, rcx
.text:0000000000002389                 and     ebx, 2
.text:000000000000238C                 sub     rsp, 0B8h
.text:0000000000002393                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000239B                 mov     [rsp+0E8h+s], rdx
.text:00000000000023A0                 mov     [rsp+0E8h+var_E0], r8d
.text:00000000000023A5                 mov     [rsp+0E8h+var_70], r9d
.text:00000000000023AA                 mov     [rsp+0E8h+var_C8], rax
.text:00000000000023AF                 mov     rax, [rsp+0E8h+arg_8]
.text:00000000000023B7                 mov     [rsp+0E8h+var_80], rax
.text:00000000000023BC                 mov     rax, [rsp+0E8h+arg_10]
.text:00000000000023C4                 mov     [rsp+0E8h+var_88], rax
.text:00000000000023C9                 mov     rax, fs:28h
.text:00000000000023D2                 mov     [rsp+0E8h+var_40], rax
.text:00000000000023DA                 xor     eax, eax
.text:00000000000023DC                 call    ___ctype_get_mb_cur_max
.text:00000000000023E1                 cmp     r15d, 0Ah       ; switch 11 cases
.text:00000000000023E5                 mov     [rsp+0E8h+var_90], rax
.text:00000000000023EA                 ja      def_2401        ; jumptable 00000000000121F1 default case
.text:00000000000023F0                 lea     rcx, jpt_2401
.text:00000000000023F7                 mov     edx, r15d
.text:00000000000023FA                 movsxd  rax, ds:(jpt_2401 - 52A0h)[rcx+rdx*4]
.text:00000000000023FE                 add     rax, rcx
.text:0000000000002401                 jmp     rax             ; switch jump
.text:0000000000002403 ; ---------------------------------------------------------------------------
.text:0000000000002403
.text:0000000000002403 loc_2403:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002403                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002403                                         ; DATA XREF: ...
.text:0000000000002403                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002408                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000240D                 xor     r12d, r12d
.text:0000000000002410                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002419                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000241E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002423
.text:0000000000002423 loc_2423:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000002423                 lea     rax, asc_523D   ; "'"
.text:000000000000242A                 mov     [rsp+0E8h+n], 1
.text:0000000000002433                 xor     r15d, r15d
.text:0000000000002436                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000243E                 mov     [rsp+0E8h+s2], rax
.text:0000000000002443
.text:0000000000002443 loc_2443:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000002443                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000002443                 xor     r11d, r11d
.text:0000000000002446                 mov     rax, rbp
.text:0000000000002449                 mov     r8d, r12d
.text:000000000000244C                 mov     rbp, r11
.text:000000000000244F                 mov     r11, rax
.text:0000000000002452                 nop     word ptr [rax+rax+00h]
.text:0000000000002458
.text:0000000000002458 loc_2458:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002458                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002458                 cmp     r11, rbp
.text:000000000000245B                 setnz   r12b
.text:000000000000245F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002463                 jnz     short loc_2472
.text:0000000000002465                 mov     rax, [rsp+0E8h+s]
.text:000000000000246A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000246E                 setnz   r12b
.text:0000000000002472
.text:0000000000002472 loc_2472:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002472                 test    r12b, r12b
.text:0000000000002475                 jz      loc_2AD0
.text:000000000000247B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002480                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002485                 lea     r9, [rdi+rbp]
.text:0000000000002489                 setnz   al
.text:000000000000248C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002490                 mov     r10d, eax
.text:0000000000002493                 jz      loc_2540
.text:0000000000002499                 mov     rax, [rsp+0E8h+n]
.text:000000000000249E                 test    rax, rax
.text:00000000000024A1                 jz      loc_28D0
.text:00000000000024A7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000024AB                 lea     rbx, [rbp+rax+0]
.text:00000000000024B0                 jnz     short loc_24E0
.text:00000000000024B2                 cmp     rax, 1
.text:00000000000024B6                 jbe     short loc_24E0
.text:00000000000024B8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000024BD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:00000000000024C2                 mov     [rsp+0E8h+ps], r9
.text:00000000000024C7                 call    _strlen
.text:00000000000024CC                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000024D2                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000024D8                 mov     r11, rax
.text:00000000000024DB                 mov     r9, [rsp+0E8h+ps]
.text:00000000000024E0
.text:00000000000024E0 loc_24E0:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:00000000000024E0                                         ; quotearg_buffer_restyled+146↑j
.text:00000000000024E0                 cmp     rbx, r11
.text:00000000000024E3                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000024E8                 ja      loc_2AA0
.text:00000000000024EE                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000024F3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000024F8                 mov     rdi, r9         ; s1
.text:00000000000024FB                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002500                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002505                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000250A                 call    _memcmp
.text:000000000000250F                 test    eax, eax
.text:0000000000002511                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002516                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000251C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002521                 jnz     loc_2AA0
.text:0000000000002527                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000252C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002532                 jnz     loc_34B5
.text:0000000000002538                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002540
.text:0000000000002540 loc_2540:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002540                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002540                 movzx   ebx, byte ptr [r9]
.text:0000000000002544                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002547                 ja      def_255E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000254D                 lea     rcx, jpt_255E
.text:0000000000002554                 movzx   edx, bl
.text:0000000000002557                 movsxd  rax, ds:(jpt_255E - 52CCh)[rcx+rdx*4]
.text:000000000000255B                 add     rax, rcx
.text:000000000000255E                 jmp     rax             ; switch jump
.text:0000000000002560 ; ---------------------------------------------------------------------------
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002560                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002563
.text:0000000000002563 loc_2563:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002563                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002563                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002567                 setnz   al
.text:000000000000256A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000256E                 jnz     short loc_257C
.text:0000000000002570                 mov     rax, [rsp+0E8h+s]
.text:0000000000002575                 cmp     byte ptr [rax+1], 0
.text:0000000000002579                 setnz   al
.text:000000000000257C
.text:000000000000257C loc_257C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000257C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002581                 setz    dl
.text:0000000000002584                 test    al, al
.text:0000000000002586                 jz      loc_27D8
.text:000000000000258C
.text:000000000000258C loc_258C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000258C                 xor     r12d, r12d
.text:000000000000258F                 xor     eax, eax
.text:0000000000002591                 nop     dword ptr [rax+00000000h]
.text:0000000000002598
.text:0000000000002598 loc_2598:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002598                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002598                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000259D                 jnz     loc_26B2
.text:00000000000025A3                 test    dl, dl
.text:00000000000025A5                 jnz     loc_26B2
.text:00000000000025AB
.text:00000000000025AB loc_25AB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000025AB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000025B0                 test    rsi, rsi
.text:00000000000025B3                 jz      short loc_25C9
.text:00000000000025B5                 mov     edx, ebx
.text:00000000000025B7                 shr     dl, 5
.text:00000000000025BA                 movzx   edx, dl
.text:00000000000025BD                 mov     edx, [rsi+rdx*4]
.text:00000000000025C0                 bt      edx, ebx
.text:00000000000025C3                 jb      loc_2713
.text:00000000000025C9
.text:00000000000025C9 loc_25C9:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:00000000000025C9                                         ; quotearg_buffer_restyled+34D↓j ...
.text:00000000000025C9                 test    r10b, r10b
.text:00000000000025CC                 jnz     loc_2713
.text:00000000000025D2                 xor     eax, 1
.text:00000000000025D5                 add     rbp, 1
.text:00000000000025D9                 and     eax, r8d
.text:00000000000025DC
.text:00000000000025DC loc_25DC:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:00000000000025DC                                         ; quotearg_buffer_restyled+AE8↓j
.text:00000000000025DC                 test    al, al
.text:00000000000025DE                 jz      short loc_2600
.text:00000000000025E0                 cmp     r13, r15
.text:00000000000025E3                 jbe     short loc_25EA
.text:00000000000025E5                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000025EA
.text:00000000000025EA loc_25EA:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:00000000000025EA                 lea     rax, [r15+1]
.text:00000000000025EE                 cmp     r13, rax
.text:00000000000025F1                 jbe     short loc_25F9
.text:00000000000025F3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000025F9
.text:00000000000025F9 loc_25F9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000025F9                 add     r15, 2
.text:00000000000025FD                 xor     r8d, r8d
.text:0000000000002600
.text:0000000000002600 loc_2600:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002600                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002600                 cmp     r15, r13
.text:0000000000002603                 jnb     short loc_2609
.text:0000000000002605                 mov     [r14+r15], bl
.text:0000000000002609
.text:0000000000002609 loc_2609:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002609                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000260E                 add     r15, 1
.text:0000000000002612                 mov     eax, 0
.text:0000000000002617                 test    r12b, r12b
.text:000000000000261A                 cmovz   edi, eax
.text:000000000000261D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002622                 jmp     loc_2458
.text:0000000000002622 ; ---------------------------------------------------------------------------
.text:0000000000002627                 align 10h
.text:0000000000002630
.text:0000000000002630 loc_2630:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002630                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002630                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002633
.text:0000000000002633 loc_2633:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002633                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002633                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002637                 cmp     eax, 2
.text:000000000000263A                 jz      loc_2BF8
.text:0000000000002640                 cmp     eax, 5
.text:0000000000002643                 jz      loc_2BB8
.text:0000000000002649                 cmp     eax, 2
.text:000000000000264C                 mov     ebx, 3Fh ; '?'
.text:0000000000002651                 setz    dl
.text:0000000000002654                 xor     r12d, r12d
.text:0000000000002657                 xor     eax, eax
.text:0000000000002659                 jmp     loc_2598
.text:0000000000002659 ; ---------------------------------------------------------------------------
.text:000000000000265E                 align 20h
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002660                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002660                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002663
.text:0000000000002663 loc_2663:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002663                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002663                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002668                 jz      loc_2B70
.text:000000000000266E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002673                 xor     edx, edx
.text:0000000000002675                 xor     eax, eax
.text:0000000000002677                 mov     ebx, 27h ; '''
.text:000000000000267C                 jmp     loc_2598
.text:000000000000267C ; ---------------------------------------------------------------------------
.text:0000000000002681                 align 8
.text:0000000000002688
.text:0000000000002688 loc_2688:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002688                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002688                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000268D                 mov     ebx, 74h ; 't'
.text:0000000000002692
.text:0000000000002692 loc_2692:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002692                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002692                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002697                 setz    al
.text:000000000000269A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000269E                 jnz     loc_27EE
.text:00000000000026A4
.text:00000000000026A4 loc_26A4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000026A4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000026A4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000026A9                 jnz     short loc_2710
.text:00000000000026AB
.text:00000000000026AB loc_26AB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000026AB                 mov     ebx, edx
.text:00000000000026AD                 xor     r12d, r12d
.text:00000000000026B0                 xor     eax, eax
.text:00000000000026B2
.text:00000000000026B2 loc_26B2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000026B2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000026B2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026B7                 jnz     loc_25AB
.text:00000000000026BD                 jmp     loc_25C9
.text:00000000000026BD ; ---------------------------------------------------------------------------
.text:00000000000026C2                 align 8
.text:00000000000026C8
.text:00000000000026C8 loc_26C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026C8                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:00000000000026C8                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:00000000000026CD                 mov     ebx, 62h ; 'b'
.text:00000000000026D2                 jmp     short loc_26A4
.text:00000000000026D2 ; ---------------------------------------------------------------------------
.text:00000000000026D4                 align 8
.text:00000000000026D8
.text:00000000000026D8 loc_26D8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000026D8                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:00000000000026D8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:00000000000026DD                 jz      loc_2AB0
.text:00000000000026E3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000026E8                 jz      loc_2900
.text:00000000000026EE
.text:00000000000026EE loc_26EE:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:00000000000026EE                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026F3                 jz      loc_2900
.text:00000000000026F9                 cmp     [rsp+0E8h+n], 0
.text:00000000000026FF                 jnz     loc_2ABB
.text:0000000000002705                 mov     ebx, 5Ch ; '\'
.text:000000000000270A                 nop     word ptr [rax+rax+00h]
.text:0000000000002710
.text:0000000000002710 loc_2710:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002710                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002710                 xor     r12d, r12d
.text:0000000000002713
.text:0000000000002713 loc_2713:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002713                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002713                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002718                 setz    dl
.text:000000000000271B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002720                 mov     eax, edx
.text:0000000000002722                 jnz     loc_2F78
.text:0000000000002728                 mov     eax, r8d
.text:000000000000272B                 xor     eax, 1
.text:000000000000272E                 and     al, dl
.text:0000000000002730                 jz      short loc_2761
.text:0000000000002732                 cmp     r13, r15
.text:0000000000002735                 jbe     short loc_273C
.text:0000000000002737                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000273C
.text:000000000000273C loc_273C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000273C                 lea     rdx, [r15+1]
.text:0000000000002740                 cmp     r13, rdx
.text:0000000000002743                 jbe     short loc_274B
.text:0000000000002745                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000274B
.text:000000000000274B loc_274B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000274B                 lea     rdx, [r15+2]
.text:000000000000274F                 cmp     r13, rdx
.text:0000000000002752                 jbe     short loc_275A
.text:0000000000002754                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000275A
.text:000000000000275A loc_275A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000275A                 add     r15, 3
.text:000000000000275E                 mov     r8d, eax
.text:0000000000002761
.text:0000000000002761 loc_2761:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002761                 cmp     r13, r15
.text:0000000000002764                 jbe     short loc_276B
.text:0000000000002766                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000276B
.text:000000000000276B loc_276B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000276B                 add     r15, 1
.text:000000000000276F                 add     rbp, 1
.text:0000000000002773                 jmp     loc_2600
.text:0000000000002773 ; ---------------------------------------------------------------------------
.text:0000000000002778                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002780                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002780                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002785                 jnz     loc_2953
.text:000000000000278B                 xor     edx, edx
.text:000000000000278D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002792                 jz      loc_26AB
.text:0000000000002798                 add     rbp, 1
.text:000000000000279C                 jmp     loc_2458
.text:000000000000279C ; ---------------------------------------------------------------------------
.text:00000000000027A1                 align 8
.text:00000000000027A8
.text:00000000000027A8 loc_27A8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027A8                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:00000000000027A8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000027AD                 setz    dl
.text:00000000000027B0                 xor     eax, eax
.text:00000000000027B2                 jmp     loc_2598
.text:00000000000027B2 ; ---------------------------------------------------------------------------
.text:00000000000027B7                 align 20h
.text:00000000000027C0
.text:00000000000027C0 loc_27C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027C0                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:00000000000027C0                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:00000000000027C5                 mov     ebx, 61h ; 'a'
.text:00000000000027CA                 jmp     loc_26A4
.text:00000000000027CA ; ---------------------------------------------------------------------------
.text:00000000000027CF                 align 10h
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027D0                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:00000000000027D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:00000000000027D5                 setz    dl
.text:00000000000027D8
.text:00000000000027D8 loc_27D8:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:00000000000027D8                                         ; quotearg_buffer_restyled+6A3↓j
.text:00000000000027D8                 test    rbp, rbp
.text:00000000000027DB                 jnz     loc_258C
.text:00000000000027E1
.text:00000000000027E1 loc_27E1:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:00000000000027E1                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:00000000000027E1                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000027E6                 and     al, dl
.text:00000000000027E8                 jz      loc_2598
.text:00000000000027EE
.text:00000000000027EE loc_27EE:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:00000000000027EE                 mov     rbp, r11
.text:00000000000027F1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000027F9                 jmp     loc_2EF9
.text:00000000000027F9 ; ---------------------------------------------------------------------------
.text:00000000000027FE                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002800                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002800                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002805                 setz    dl
.text:0000000000002808                 xor     r12d, r12d
.text:000000000000280B                 jmp     short loc_27E1
.text:000000000000280B ; ---------------------------------------------------------------------------
.text:000000000000280D                 align 10h
.text:0000000000002810
.text:0000000000002810 loc_2810:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002810                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002810                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002815                 mov     ebx, 20h ; ' '
.text:000000000000281A                 setz    dl
.text:000000000000281D                 jmp     short loc_27E1
.text:000000000000281D ; ---------------------------------------------------------------------------
.text:000000000000281F                 align 20h
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002820                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002820                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002825                 mov     ebx, 72h ; 'r'
.text:000000000000282A                 jmp     loc_2692
.text:000000000000282A ; ---------------------------------------------------------------------------
.text:000000000000282F                 align 10h
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002830                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002830                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002835                 mov     ebx, 66h ; 'f'
.text:000000000000283A                 jmp     loc_26A4
.text:000000000000283A ; ---------------------------------------------------------------------------
.text:000000000000283F                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002840                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002840                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002845                 mov     ebx, 76h ; 'v'
.text:000000000000284A                 jmp     loc_26A4
.text:000000000000284A ; ---------------------------------------------------------------------------
.text:000000000000284F                 align 10h
.text:0000000000002850
.text:0000000000002850 loc_2850:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002850                                         ; DATA XREF: .rodata:jpt_255E↓o
.text:0000000000002850                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002855                 mov     ebx, 6Eh ; 'n'
.text:000000000000285A                 jmp     loc_2692
.text:000000000000285A ; ---------------------------------------------------------------------------
.text:000000000000285F                 align 20h
.text:0000000000002860
.text:0000000000002860 def_28EA:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002860                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002860                                         ; DATA XREF: ...
.text:0000000000002860                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002863                 nop     dword ptr [rax+rax+00h]
.text:0000000000002868
.text:0000000000002868 def_255E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002868                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002868                                         ; DATA XREF: ...
.text:0000000000002868                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000286E                 jnz     loc_2C18
.text:0000000000002874                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002879                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000287E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002883                 call    ___ctype_b_loc
.text:0000000000002888                 mov     rcx, [rax]
.text:000000000000288B                 movzx   edx, bl
.text:000000000000288E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002894                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000289A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000289F                 mov     edi, 1
.text:00000000000028A4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000028A8                 and     ax, 4000h
.text:00000000000028AC                 setnz   r12b
.text:00000000000028B0                 setz    al
.text:00000000000028B3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000028B7
.text:00000000000028B7 loc_28B7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000028B7                 test    al, al
.text:00000000000028B9                 jnz     loc_3251
.text:00000000000028BF                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028C4                 setz    dl
.text:00000000000028C7                 jmp     loc_2598
.text:00000000000028C7 ; ---------------------------------------------------------------------------
.text:00000000000028CC                 align 10h
.text:00000000000028D0
.text:00000000000028D0 loc_28D0:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:00000000000028D0                 movzx   ebx, byte ptr [r9]
.text:00000000000028D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000028D7                 ja      short def_28EA  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000028D9                 lea     rcx, jpt_28EA
.text:00000000000028E0                 movzx   edx, bl
.text:00000000000028E3                 movsxd  rax, ds:(jpt_28EA - 54C8h)[rcx+rdx*4]
.text:00000000000028E7                 add     rax, rcx
.text:00000000000028EA                 jmp     rax             ; switch jump
.text:00000000000028EA ; ---------------------------------------------------------------------------
.text:00000000000028EC                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028F0                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:00000000000028F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000028F3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000028F8                 jnz     loc_26EE
.text:00000000000028FE                 xchg    ax, ax
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002900                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002900                 mov     edx, 5Ch ; '\'
.text:0000000000002905                 mov     ebx, 5Ch ; '\'
.text:000000000000290A                 jmp     loc_26A4
.text:000000000000290A ; ---------------------------------------------------------------------------
.text:000000000000290F                 align 10h
.text:0000000000002910
.text:0000000000002910 loc_2910:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002910                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002910                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002915                 xor     r10d, r10d
.text:0000000000002918                 mov     ebx, 66h ; 'f'
.text:000000000000291D                 jmp     loc_26A4
.text:000000000000291D ; ---------------------------------------------------------------------------
.text:0000000000002922                 align 8
.text:0000000000002928
.text:0000000000002928 loc_2928:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002928                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002928                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000292D                 xor     r10d, r10d
.text:0000000000002930                 mov     ebx, 6Eh ; 'n'
.text:0000000000002935                 jmp     loc_2692
.text:0000000000002935 ; ---------------------------------------------------------------------------
.text:000000000000293A                 align 20h
.text:0000000000002940
.text:0000000000002940 loc_2940:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002940                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002940                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002945                 jmp     loc_2710
.text:0000000000002945 ; ---------------------------------------------------------------------------
.text:000000000000294A                 align 10h
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002950                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002950                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002953
.text:0000000000002953 loc_2953:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002953                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002958                 setz    dl
.text:000000000000295B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002960                 jnz     loc_34FA
.text:0000000000002966                 mov     eax, r8d
.text:0000000000002969                 mov     rcx, r15
.text:000000000000296C                 xor     eax, 1
.text:000000000000296F                 and     al, dl
.text:0000000000002971                 jz      short loc_29A0
.text:0000000000002973                 cmp     r13, r15
.text:0000000000002976                 jbe     short loc_297D
.text:0000000000002978                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000297D
.text:000000000000297D loc_297D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000297D                 lea     rcx, [r15+1]
.text:0000000000002981                 cmp     r13, rcx
.text:0000000000002984                 jbe     short loc_298C
.text:0000000000002986                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000298C
.text:000000000000298C loc_298C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000298C                 lea     rcx, [r15+2]
.text:0000000000002990                 cmp     r13, rcx
.text:0000000000002993                 ja      loc_2FC9
.text:0000000000002999
.text:0000000000002999 loc_2999:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002999                 lea     rcx, [r15+3]
.text:000000000000299D                 mov     r8d, eax
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000029A0                 cmp     r13, rcx
.text:00000000000029A3                 jbe     short loc_29AA
.text:00000000000029A5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000029AA
.text:00000000000029AA loc_29AA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000029AA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000029AF                 lea     r15, [rcx+1]
.text:00000000000029B3                 jz      loc_2FB9
.text:00000000000029B9                 lea     rax, [rbp+1]
.text:00000000000029BD                 cmp     rax, r11
.text:00000000000029C0                 jnb     short loc_29DB
.text:00000000000029C2                 mov     rax, [rsp+0E8h+s]
.text:00000000000029C7                 movzx   eax, byte ptr [rax+rbp+1]
.text:00000000000029CC                 mov     byte ptr [rsp+0E8h+ps], al
.text:00000000000029D0                 sub     eax, 30h ; '0'
.text:00000000000029D3                 cmp     al, 9
.text:00000000000029D5                 jbe     loc_3209
.text:00000000000029DB
.text:00000000000029DB loc_29DB:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:00000000000029DB                 mov     eax, r12d
.text:00000000000029DE                 mov     ebx, 30h ; '0'
.text:00000000000029E3                 xor     r12d, r12d
.text:00000000000029E6                 jmp     loc_2598
.text:00000000000029E6 ; ---------------------------------------------------------------------------
.text:00000000000029EB                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029F0                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:00000000000029F0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000029F5                 mov     r12d, r10d
.text:00000000000029F8                 setz    dl
.text:00000000000029FB                 xor     r10d, r10d
.text:00000000000029FE                 xor     eax, eax
.text:0000000000002A00                 jmp     loc_2598
.text:0000000000002A00 ; ---------------------------------------------------------------------------
.text:0000000000002A05                 align 8
.text:0000000000002A08
.text:0000000000002A08 loc_2A08:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A08                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002A08                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000002A0D                 setz    dl
.text:0000000000002A10                 xor     r10d, r10d
.text:0000000000002A13                 jmp     loc_27D8
.text:0000000000002A13 ; ---------------------------------------------------------------------------
.text:0000000000002A18                 align 20h
.text:0000000000002A20
.text:0000000000002A20 loc_2A20:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A20                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002A20                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002A25                 setz    dl
.text:0000000000002A28                 xor     r10d, r10d
.text:0000000000002A2B                 xor     r12d, r12d
.text:0000000000002A2E                 jmp     loc_27E1
.text:0000000000002A2E ; ---------------------------------------------------------------------------
.text:0000000000002A33                 align 8
.text:0000000000002A38
.text:0000000000002A38 loc_2A38:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A38                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002A38                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000002A3D                 mov     r12d, r10d
.text:0000000000002A40                 mov     ebx, 20h ; ' '
.text:0000000000002A45                 setz    dl
.text:0000000000002A48                 xor     r10d, r10d
.text:0000000000002A4B                 jmp     loc_27E1
.text:0000000000002A50 ; ---------------------------------------------------------------------------
.text:0000000000002A50
.text:0000000000002A50 loc_2A50:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A50                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002A50                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002A55                 xor     r10d, r10d
.text:0000000000002A58                 mov     ebx, 72h ; 'r'
.text:0000000000002A5D                 jmp     loc_2692
.text:0000000000002A5D ; ---------------------------------------------------------------------------
.text:0000000000002A62                 align 8
.text:0000000000002A68
.text:0000000000002A68 loc_2A68:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A68                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002A68                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002A6D                 jmp     loc_2710
.text:0000000000002A6D ; ---------------------------------------------------------------------------
.text:0000000000002A72                 align 8
.text:0000000000002A78
.text:0000000000002A78 loc_2A78:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A78                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002A78                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002A7D                 xor     r10d, r10d
.text:0000000000002A80                 mov     ebx, 74h ; 't'
.text:0000000000002A85                 jmp     loc_2692
.text:0000000000002A85 ; ---------------------------------------------------------------------------
.text:0000000000002A8A                 align 10h
.text:0000000000002A90
.text:0000000000002A90 loc_2A90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A90                                         ; DATA XREF: .rodata:jpt_28EA↓o
.text:0000000000002A90                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002A95                 jmp     loc_2710
.text:0000000000002A95 ; ---------------------------------------------------------------------------
.text:0000000000002A9A                 align 20h
.text:0000000000002AA0
.text:0000000000002AA0 loc_2AA0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002AA0                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002AA0                 xor     r10d, r10d
.text:0000000000002AA3                 jmp     loc_2540
.text:0000000000002AA3 ; ---------------------------------------------------------------------------
.text:0000000000002AA8                 align 10h
.text:0000000000002AB0
.text:0000000000002AB0 loc_2AB0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002AB0                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002AB5                 jnz     loc_3420
.text:0000000000002ABB
.text:0000000000002ABB loc_2ABB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002ABB                 add     rbp, 1
.text:0000000000002ABF                 mov     eax, r8d
.text:0000000000002AC2                 xor     r12d, r12d
.text:0000000000002AC5                 mov     ebx, 5Ch ; '\'
.text:0000000000002ACA                 jmp     loc_25DC
.text:0000000000002ACA ; ---------------------------------------------------------------------------
.text:0000000000002ACF                 align 10h
.text:0000000000002AD0
.text:0000000000002AD0 loc_2AD0:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002AD0                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002AD5                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002ADA                 mov     r12d, r8d
.text:0000000000002ADD                 mov     rbp, r11
.text:0000000000002AE0                 setz    dl
.text:0000000000002AE3                 mov     eax, ebx
.text:0000000000002AE5                 test    r15, r15
.text:0000000000002AE8                 setz    cl
.text:0000000000002AEB                 and     eax, edx
.text:0000000000002AED                 and     al, cl
.text:0000000000002AEF                 jnz     loc_3556
.text:0000000000002AF5                 mov     eax, ebx
.text:0000000000002AF7                 xor     eax, 1
.text:0000000000002AFA                 and     dl, al
.text:0000000000002AFC                 jz      loc_346C
.text:0000000000002B02                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002B07                 jz      loc_346A
.text:0000000000002B0D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002B12                 jnz     loc_350D
.text:0000000000002B18                 test    r13, r13
.text:0000000000002B1B                 setz    al
.text:0000000000002B1E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002B24                 setnz   dl
.text:0000000000002B27                 and     al, dl
.text:0000000000002B29                 jz      loc_354C
.text:0000000000002B2F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002B34
.text:0000000000002B34 loc_2B34:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002B34                 lea     rbx, asc_523D   ; "'"
.text:0000000000002B3B                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002B3F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B47                 mov     r15d, 1
.text:0000000000002B4D                 mov     [rsp+0E8h+n], 1
.text:0000000000002B56                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B5B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002B60                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002B64                 jmp     loc_2443
.text:0000000000002B64 ; ---------------------------------------------------------------------------
.text:0000000000002B69                 align 10h
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002B70                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B75                 jnz     loc_3420
.text:0000000000002B7B                 test    r13, r13
.text:0000000000002B7E                 jz      loc_2F80
.text:0000000000002B84                 xor     edx, edx
.text:0000000000002B86                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002B8C                 jnz     loc_2F80
.text:0000000000002B92
.text:0000000000002B92 loc_2B92:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002B92                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002B92                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002B97                 add     r15, 3
.text:0000000000002B9B                 xor     eax, eax
.text:0000000000002B9D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002BA2                 xor     r8d, r8d
.text:0000000000002BA5                 mov     r13, rdx
.text:0000000000002BA8                 mov     ebx, 27h ; '''
.text:0000000000002BAD                 jmp     loc_25C9
.text:0000000000002BAD ; ---------------------------------------------------------------------------
.text:0000000000002BB2                 align 8
.text:0000000000002BB8
.text:0000000000002BB8 loc_2BB8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002BB8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002BBD                 jz      short loc_2BE0
.text:0000000000002BBF                 lea     rcx, [rbp+2]
.text:0000000000002BC3                 cmp     rcx, r11
.text:0000000000002BC6                 jnb     short loc_2BE0
.text:0000000000002BC8                 mov     rax, [rsp+0E8h+s]
.text:0000000000002BCD                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002BD2                 jz      loc_3362
.text:0000000000002BD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002BE0
.text:0000000000002BE0 loc_2BE0:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002BE0                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002BE0                 xor     edx, edx
.text:0000000000002BE2                 xor     r12d, r12d
.text:0000000000002BE5                 xor     eax, eax
.text:0000000000002BE7                 mov     ebx, 3Fh ; '?'
.text:0000000000002BEC                 jmp     loc_2598
.text:0000000000002BEC ; ---------------------------------------------------------------------------
.text:0000000000002BF1                 align 8
.text:0000000000002BF8
.text:0000000000002BF8 loc_2BF8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002BF8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BFD                 jnz     loc_3420
.text:0000000000002C03                 xor     r12d, r12d
.text:0000000000002C06                 xor     eax, eax
.text:0000000000002C08                 mov     ebx, 3Fh ; '?'
.text:0000000000002C0D                 jmp     loc_25C9
.text:0000000000002C0D ; ---------------------------------------------------------------------------
.text:0000000000002C12                 align 8
.text:0000000000002C18
.text:0000000000002C18 loc_2C18:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002C18                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002C20                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C24                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002C30                 mov     [rsp+0E8h+ps], rax
.text:0000000000002C35                 jnz     short loc_2C64
.text:0000000000002C37                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002C3C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002C41                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002C46                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002C4B                 call    _strlen
.text:0000000000002C50                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002C56                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002C5C                 mov     r11, rax
.text:0000000000002C5F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002C64
.text:0000000000002C64 loc_2C64:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002C64                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002C6C                 xor     ecx, ecx
.text:0000000000002C6E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002C72                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002C77                 mov     rbx, rcx
.text:0000000000002C7A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002C82                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002C87                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002C8C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002C94                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002C99                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002C9E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002CA3
.text:0000000000002CA3 loc_2CA3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002CA3                 mov     rax, [rsp+0E8h+s]
.text:0000000000002CA8                 lea     r14, [rbp+rbx+0]
.text:0000000000002CAD                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002CB2                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002CB7                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002CBC                 lea     r13, [rax+r14]
.text:0000000000002CC0                 sub     rdx, r14
.text:0000000000002CC3                 mov     rsi, r13
.text:0000000000002CC6                 call    rpl_mbrtowc
.text:0000000000002CCB                 test    rax, rax
.text:0000000000002CCE                 mov     r15, rax
.text:0000000000002CD1                 jz      short loc_2D21
.text:0000000000002CD3                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002CD7                 jz      loc_32F5
.text:0000000000002CDD                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002CE1                 jz      loc_3281
.text:0000000000002CE7                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002CEC                 setz    al
.text:0000000000002CEF                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002CF3                 jnz     loc_2E90
.text:0000000000002CF9
.text:0000000000002CF9 loc_2CF9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002CF9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002CF9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002D00                 call    _iswprint
.text:0000000000002D05                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002D0A                 test    eax, eax
.text:0000000000002D0C                 mov     eax, 0
.text:0000000000002D11                 cmovz   r12d, eax
.text:0000000000002D15                 add     rbx, r15
.text:0000000000002D18                 call    _mbsinit
.text:0000000000002D1D                 test    eax, eax
.text:0000000000002D1F                 jz      short loc_2CA3
.text:0000000000002D21
.text:0000000000002D21 loc_2D21:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002D21                 mov     edx, r12d
.text:0000000000002D24                 mov     rdi, rbx
.text:0000000000002D27                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002D2D                 xor     edx, 1
.text:0000000000002D30                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002D35                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002D3B                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002D3F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002D47                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002D4C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002D51                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002D56
.text:0000000000002D56 loc_2D56:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002D56                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002D56                 cmp     rdi, 1
.text:0000000000002D5A                 jbe     loc_335B
.text:0000000000002D60
.text:0000000000002D60 loc_2D60:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002D60                 mov     rcx, rdi
.text:0000000000002D63                 xor     esi, esi
.text:0000000000002D65                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002D6B                 add     rcx, rbp
.text:0000000000002D6E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002D73                 jmp     loc_2E2E
.text:0000000000002D73 ; ---------------------------------------------------------------------------
.text:0000000000002D78                 align 20h
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002D80                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D85                 setz    al
.text:0000000000002D88                 test    r9b, r9b
.text:0000000000002D8B                 jnz     loc_3240
.text:0000000000002D91                 mov     esi, r8d
.text:0000000000002D94                 xor     esi, 1
.text:0000000000002D97                 and     al, sil
.text:0000000000002D9A                 jz      short loc_2DCB
.text:0000000000002D9C                 cmp     r13, r15
.text:0000000000002D9F                 jbe     short loc_2DA6
.text:0000000000002DA1                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002DA6
.text:0000000000002DA6 loc_2DA6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002DA6                 lea     rsi, [r15+1]
.text:0000000000002DAA                 cmp     r13, rsi
.text:0000000000002DAD                 jbe     short loc_2DB5
.text:0000000000002DAF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002DB5
.text:0000000000002DB5 loc_2DB5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002DB5                 lea     rsi, [r15+2]
.text:0000000000002DB9                 cmp     r13, rsi
.text:0000000000002DBC                 jbe     short loc_2DC4
.text:0000000000002DBE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002DC4
.text:0000000000002DC4 loc_2DC4:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002DC4                 add     r15, 3
.text:0000000000002DC8                 mov     r8d, eax
.text:0000000000002DCB
.text:0000000000002DCB loc_2DCB:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002DCB                 cmp     r13, r15
.text:0000000000002DCE                 jbe     short loc_2DD5
.text:0000000000002DD0                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002DD5
.text:0000000000002DD5 loc_2DD5:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002DD5                 lea     rax, [r15+1]
.text:0000000000002DD9                 cmp     r13, rax
.text:0000000000002DDC                 jbe     short loc_2DEB
.text:0000000000002DDE                 mov     eax, ebx
.text:0000000000002DE0                 shr     al, 6
.text:0000000000002DE3                 add     eax, 30h ; '0'
.text:0000000000002DE6                 mov     [r14+r15+1], al
.text:0000000000002DEB
.text:0000000000002DEB loc_2DEB:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002DEB                 lea     rax, [r15+2]
.text:0000000000002DEF                 cmp     r13, rax
.text:0000000000002DF2                 jbe     short loc_2E04
.text:0000000000002DF4                 mov     eax, ebx
.text:0000000000002DF6                 shr     al, 3
.text:0000000000002DF9                 and     eax, 7
.text:0000000000002DFC                 add     eax, 30h ; '0'
.text:0000000000002DFF                 mov     [r14+r15+2], al
.text:0000000000002E04
.text:0000000000002E04 loc_2E04:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002E04                 and     ebx, 7
.text:0000000000002E07                 add     rbp, 1
.text:0000000000002E0B                 add     r15, 3
.text:0000000000002E0F                 add     ebx, 30h ; '0'
.text:0000000000002E12                 cmp     rbp, rcx
.text:0000000000002E15                 jnb     loc_2600
.text:0000000000002E1B                 mov     esi, edx
.text:0000000000002E1D
.text:0000000000002E1D loc_2E1D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002E1D                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002E1D                 cmp     r13, r15
.text:0000000000002E20                 jbe     short loc_2E26
.text:0000000000002E22                 mov     [r14+r15], bl
.text:0000000000002E26
.text:0000000000002E26 loc_2E26:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002E26                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002E2A                 add     r15, 1
.text:0000000000002E2E
.text:0000000000002E2E loc_2E2E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002E2E                 test    dl, dl
.text:0000000000002E30                 jnz     loc_2D80
.text:0000000000002E36                 mov     eax, esi
.text:0000000000002E38                 xor     eax, 1
.text:0000000000002E3B                 and     eax, r8d
.text:0000000000002E3E                 test    r10b, r10b
.text:0000000000002E41                 jz      short loc_2E51
.text:0000000000002E43                 cmp     r13, r15
.text:0000000000002E46                 jbe     short loc_2E4D
.text:0000000000002E48                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002E4D
.text:0000000000002E4D loc_2E4D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002E4D                 add     r15, 1
.text:0000000000002E51
.text:0000000000002E51 loc_2E51:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002E51                 add     rbp, 1
.text:0000000000002E55                 cmp     rbp, rcx
.text:0000000000002E58                 jnb     loc_25DC
.text:0000000000002E5E                 test    al, al
.text:0000000000002E60                 jz      loc_325E
.text:0000000000002E66                 cmp     r13, r15
.text:0000000000002E69                 jbe     short loc_2E70
.text:0000000000002E6B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E70
.text:0000000000002E70 loc_2E70:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002E70                 lea     rax, [r15+1]
.text:0000000000002E74                 cmp     r13, rax
.text:0000000000002E77                 jbe     short loc_2E7F
.text:0000000000002E79                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002E7F
.text:0000000000002E7F loc_2E7F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002E7F                 add     r15, 2
.text:0000000000002E83                 xor     r10d, r10d
.text:0000000000002E86                 xor     r8d, r8d
.text:0000000000002E89                 jmp     short loc_2E1D
.text:0000000000002E89 ; ---------------------------------------------------------------------------
.text:0000000000002E8B                 align 10h
.text:0000000000002E90
.text:0000000000002E90 loc_2E90:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002E90                 cmp     r15, 1
.text:0000000000002E94                 jz      loc_2CF9
.text:0000000000002E9A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002E9F                 lea     rcx, [rdi+r15]
.text:0000000000002EA3                 lea     rdx, [rdi+r14+1]
.text:0000000000002EA8                 lea     r8, [rcx+r14]
.text:0000000000002EAC                 jmp     short loc_2EBD
.text:0000000000002EAC ; ---------------------------------------------------------------------------
.text:0000000000002EAE                 align 10h
.text:0000000000002EB0
.text:0000000000002EB0 loc_2EB0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002EB0                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002EB0                 add     rdx, 1
.text:0000000000002EB4                 cmp     r8, rdx
.text:0000000000002EB7                 jz      loc_2CF9
.text:0000000000002EBD
.text:0000000000002EBD loc_2EBD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002EBD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002EC0                 sub     ecx, 5Bh ; '['
.text:0000000000002EC3                 cmp     cl, 21h ; '!'
.text:0000000000002EC6                 ja      short loc_2EB0
.text:0000000000002EC8                 mov     esi, 1
.text:0000000000002ECD                 shl     rsi, cl
.text:0000000000002ED0                 mov     rcx, rsi
.text:0000000000002ED3                 mov     rsi, 20000002Bh
.text:0000000000002EDD                 test    rcx, rsi
.text:0000000000002EE0                 jz      short loc_2EB0
.text:0000000000002EE2                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002EE7                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002EEC                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002EF1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002EF9
.text:0000000000002EF9 loc_2EF9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002EF9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002EF9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002EFE                 jz      short loc_2F10
.text:0000000000002F00                 test    al, al
.text:0000000000002F02                 mov     eax, 4
.text:0000000000002F07                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002F0C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002F10
.text:0000000000002F10 loc_2F10:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002F10                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002F10                 sub     rsp, 8
.text:0000000000002F14                 mov     rcx, rbp
.text:0000000000002F17                 mov     rsi, r13
.text:0000000000002F1A                 push    [rsp+0F0h+var_88]
.text:0000000000002F1E                 push    [rsp+0F8h+var_80]
.text:0000000000002F22                 mov     rdi, r14
.text:0000000000002F25                 push    0
.text:0000000000002F27                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002F2F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002F34                 mov     rdx, [rsp+108h+s]
.text:0000000000002F39                 and     r9d, 0FFFFFFFDh
.text:0000000000002F3D                 call    quotearg_buffer_restyled
.text:0000000000002F42                 add     rsp, 20h
.text:0000000000002F46                 mov     r15, rax
.text:0000000000002F49
.text:0000000000002F49 loc_2F49:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002F49                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002F49                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002F51                 xor     rbx, fs:28h
.text:0000000000002F5A                 mov     rax, r15
.text:0000000000002F5D                 jnz     loc_3563
.text:0000000000002F63                 add     rsp, 0B8h
.text:0000000000002F6A                 pop     rbx
.text:0000000000002F6B                 pop     rbp
.text:0000000000002F6C                 pop     r12
.text:0000000000002F6E                 pop     r13
.text:0000000000002F70                 pop     r14
.text:0000000000002F72                 pop     r15
.text:0000000000002F74                 retn
.text:0000000000002F74 ; ---------------------------------------------------------------------------
.text:0000000000002F75                 align 8
.text:0000000000002F78
.text:0000000000002F78 loc_2F78:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002F78                 mov     rbp, r11
.text:0000000000002F7B                 jmp     loc_2EF9
.text:0000000000002F80 ; ---------------------------------------------------------------------------
.text:0000000000002F80
.text:0000000000002F80 loc_2F80:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002F80                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002F80                 cmp     r13, r15
.text:0000000000002F83                 jbe     short loc_2F8A
.text:0000000000002F85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002F8A
.text:0000000000002F8A loc_2F8A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002F8A                 lea     rax, [r15+1]
.text:0000000000002F8E                 cmp     r13, rax
.text:0000000000002F91                 jbe     short loc_2F99
.text:0000000000002F93                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002F99
.text:0000000000002F99 loc_2F99:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002F99                 lea     rax, [r15+2]
.text:0000000000002F9D                 cmp     r13, rax
.text:0000000000002FA0                 jbe     loc_3592
.text:0000000000002FA6                 mov     rdx, r13
.text:0000000000002FA9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002FAF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002FB4                 jmp     loc_2B92
.text:0000000000002FB9 ; ---------------------------------------------------------------------------
.text:0000000000002FB9
.text:0000000000002FB9 loc_2FB9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002FB9                 mov     eax, r12d
.text:0000000000002FBC                 mov     ebx, 30h ; '0'
.text:0000000000002FC1                 xor     r12d, r12d
.text:0000000000002FC4                 jmp     loc_25C9
.text:0000000000002FC9 ; ---------------------------------------------------------------------------
.text:0000000000002FC9
.text:0000000000002FC9 loc_2FC9:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002FC9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002FCF                 jmp     loc_2999
.text:0000000000002FD4 ; ---------------------------------------------------------------------------
.text:0000000000002FD4
.text:0000000000002FD4 loc_2FD4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FD4                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:0000000000002FD4                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002FD6                 jnz     loc_2403        ; jumptable 00000000000121F1 case 1
.text:0000000000002FDC                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002FE1
.text:0000000000002FE1 loc_2FE1:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002FE1                 test    r13, r13
.text:0000000000002FE4                 jnz     loc_357A
.text:0000000000002FEA                 lea     rax, asc_523D   ; "'"
.text:0000000000002FF1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FFA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FFF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003004                 xor     r12d, r12d
.text:0000000000003007                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000300C                 mov     [rsp+0E8h+n], 1
.text:0000000000003015                 mov     [rsp+0E8h+s2], rax
.text:000000000000301A                 mov     r15d, 1
.text:0000000000003020                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000003028                 jmp     loc_2443
.text:0000000000003028 ; ---------------------------------------------------------------------------
.text:000000000000302D                 align 10h
.text:0000000000003030
.text:0000000000003030 loc_3030:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003030                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:0000000000003030                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000003032                 jnz     loc_342D
.text:0000000000003038                 test    r13, r13
.text:000000000000303B                 jz      loc_3266
.text:0000000000003041                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000003045                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000304A                 xor     r12d, r12d
.text:000000000000304D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003052                 mov     [rsp+0E8h+var_98], 0
.text:000000000000305B
.text:000000000000305B loc_305B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000305B                 lea     rax, unk_523B
.text:0000000000003062                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003067                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000306C                 mov     [rsp+0E8h+n], 1
.text:0000000000003075                 mov     r15d, 1
.text:000000000000307B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003080                 jmp     loc_2443
.text:0000000000003085 ; ---------------------------------------------------------------------------
.text:0000000000003085
.text:0000000000003085 loc_3085:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003085                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:0000000000003085                 lea     rax, unk_523B   ; jumptable 00000000000121F1 case 6
.text:000000000000308C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003091                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003096                 xor     r12d, r12d
.text:0000000000003099                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030A2                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000030A7                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000030AC                 mov     [rsp+0E8h+n], 1
.text:00000000000030B5                 xor     r15d, r15d
.text:00000000000030B8                 mov     [rsp+0E8h+s2], rax
.text:00000000000030BD                 mov     [rsp+0E8h+var_E0], 5
.text:00000000000030C5                 jmp     loc_2443
.text:00000000000030CA ; ---------------------------------------------------------------------------
.text:00000000000030CA
.text:00000000000030CA loc_30CA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000030CA                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:00000000000030CA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:00000000000030CF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000030D4                 xor     r12d, r12d
.text:00000000000030D7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030E0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000030E5                 xor     r15d, r15d
.text:00000000000030E8                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000030ED                 mov     [rsp+0E8h+n], 0
.text:00000000000030F6                 mov     [rsp+0E8h+s2], 0
.text:00000000000030FF                 jmp     loc_2443
.text:0000000000003104 ; ---------------------------------------------------------------------------
.text:0000000000003104
.text:0000000000003104 loc_3104:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003104                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:0000000000003104                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000003109                 jz      short loc_3161
.text:000000000000310B                 lea     rsi, asc_523F   ; "`"
.text:0000000000003112                 xor     edi, edi        ; domainname
.text:0000000000003114                 mov     edx, 5          ; category
.text:0000000000003119                 call    _dcgettext
.text:000000000000311E                 mov     rcx, rax
.text:0000000000003121                 mov     [rsp+0E8h+var_80], rax
.text:0000000000003126                 lea     rax, asc_523F   ; "`"
.text:000000000000312D                 cmp     rcx, rax
.text:0000000000003130                 jz      loc_34CE
.text:0000000000003136
.text:0000000000003136 loc_3136:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000003136                 lea     rsi, asc_523D   ; "'"
.text:000000000000313D                 xor     edi, edi        ; domainname
.text:000000000000313F                 mov     edx, 5          ; category
.text:0000000000003144                 call    _dcgettext
.text:0000000000003149                 mov     rcx, rax
.text:000000000000314C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003151                 lea     rax, asc_523D   ; "'"
.text:0000000000003158                 cmp     rcx, rax
.text:000000000000315B                 jz      loc_34E4
.text:0000000000003161
.text:0000000000003161 loc_3161:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003161                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003161                 xor     r15d, r15d
.text:0000000000003164                 test    ebx, ebx
.text:0000000000003166                 jz      loc_332D
.text:000000000000316C
.text:000000000000316C loc_316C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000316C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000316C                 test    ebx, ebx
.text:000000000000316E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003173                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003178                 xor     r12d, r12d
.text:000000000000317B                 mov     rdi, rbx        ; s
.text:000000000000317E                 call    _strlen
.text:0000000000003183                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003188                 mov     [rsp+0E8h+n], rax
.text:000000000000318D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003192                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003197                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031A0                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000031A5                 jmp     loc_2443
.text:00000000000031AA ; ---------------------------------------------------------------------------
.text:00000000000031AA
.text:00000000000031AA loc_31AA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031AA                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:00000000000031AA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:00000000000031AF                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031B4                 xor     r12d, r12d
.text:00000000000031B7                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031C0                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000031C5                 xor     r15d, r15d
.text:00000000000031C8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000031CD                 mov     [rsp+0E8h+n], 0
.text:00000000000031D6                 mov     [rsp+0E8h+s2], 0
.text:00000000000031DF                 jmp     loc_2443
.text:00000000000031E4 ; ---------------------------------------------------------------------------
.text:00000000000031E4
.text:00000000000031E4 loc_31E4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000031E4                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:00000000000031E4                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:00000000000031E9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031EE                 xor     r12d, r12d
.text:00000000000031F1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031FA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000031FF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003204                 jmp     loc_2423
.text:0000000000003209 ; ---------------------------------------------------------------------------
.text:0000000000003209
.text:0000000000003209 loc_3209:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000003209                 cmp     r13, r15
.text:000000000000320C                 jbe     short loc_3213
.text:000000000000320E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000003213
.text:0000000000003213 loc_3213:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000003213                 lea     rax, [rcx+2]
.text:0000000000003217                 cmp     r13, rax
.text:000000000000321A                 jbe     short loc_3222
.text:000000000000321C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000003222
.text:0000000000003222 loc_3222:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000003222                 mov     eax, r12d
.text:0000000000003225                 lea     r15, [rcx+3]
.text:0000000000003229                 xor     r12d, r12d
.text:000000000000322C                 mov     ebx, 30h ; '0'
.text:0000000000003231                 jmp     loc_2598
.text:0000000000003231 ; ---------------------------------------------------------------------------
.text:0000000000003236                 align 20h
.text:0000000000003240
.text:0000000000003240 loc_3240:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000003240                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000003245                 mov     rbp, r11
.text:0000000000003248                 mov     [rsp+0E8h+var_DB], bl
.text:000000000000324C                 jmp     loc_2EF9
.text:0000000000003251 ; ---------------------------------------------------------------------------
.text:0000000000003251
.text:0000000000003251 loc_3251:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003251                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003256                 xor     r12d, r12d
.text:0000000000003259                 jmp     loc_2D60
.text:000000000000325E ; ---------------------------------------------------------------------------
.text:000000000000325E
.text:000000000000325E loc_325E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000325E                 xor     r10d, r10d
.text:0000000000003261                 jmp     loc_2E1D
.text:0000000000003266 ; ---------------------------------------------------------------------------
.text:0000000000003266
.text:0000000000003266 loc_3266:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003266                 mov     [rsp+0E8h+var_98], 0
.text:000000000000326F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003274                 xor     r12d, r12d
.text:0000000000003277                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000327C                 jmp     loc_305B
.text:0000000000003281 ; ---------------------------------------------------------------------------
.text:0000000000003281
.text:0000000000003281 loc_3281:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003281                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003286                 mov     rsi, r14
.text:0000000000003289                 mov     rcx, r13
.text:000000000000328C                 mov     rax, rbx
.text:000000000000328F                 mov     rdi, rbx
.text:0000000000003292                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003298                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000329D                 mov     r9, [rsp+0E8h+var_60]
.text:00000000000032A5                 cmp     rsi, r11
.text:00000000000032A8                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000032AE                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000032B6                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000032BB                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000032C0                 jnb     short loc_32E8
.text:00000000000032C2                 cmp     byte ptr [rcx], 0
.text:00000000000032C5                 jnz     short loc_32D7
.text:00000000000032C7                 jmp     short loc_32E8
.text:00000000000032C7 ; ---------------------------------------------------------------------------
.text:00000000000032C9                 align 10h
.text:00000000000032D0
.text:00000000000032D0 loc_32D0:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:00000000000032D0                 cmp     byte ptr [r9+rax], 0
.text:00000000000032D5                 jz      short loc_32E5
.text:00000000000032D7
.text:00000000000032D7 loc_32D7:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:00000000000032D7                 add     rax, 1
.text:00000000000032DB                 lea     rdx, [rbp+rax+0]
.text:00000000000032E0                 cmp     r11, rdx
.text:00000000000032E3                 ja      short loc_32D0
.text:00000000000032E5
.text:00000000000032E5 loc_32E5:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:00000000000032E5                 mov     rdi, rax
.text:00000000000032E8
.text:00000000000032E8 loc_32E8:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:00000000000032E8                                         ; quotearg_buffer_restyled+F57↑j
.text:00000000000032E8                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000032ED                 xor     r12d, r12d
.text:00000000000032F0                 jmp     loc_2D56
.text:00000000000032F5 ; ---------------------------------------------------------------------------
.text:00000000000032F5
.text:00000000000032F5 loc_32F5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000032F5                 mov     rdi, rbx
.text:00000000000032F8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000032FE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003303                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003309                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003311                 xor     r12d, r12d
.text:0000000000003314                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000003319                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000331E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003323                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003328                 jmp     loc_2D56
.text:000000000000332D ; ---------------------------------------------------------------------------
.text:000000000000332D
.text:000000000000332D loc_332D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:000000000000332D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000003332                 movzx   eax, byte ptr [rdx]
.text:0000000000003335                 test    al, al
.text:0000000000003337                 jz      loc_316C
.text:000000000000333D                 nop     dword ptr [rax]
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000003340                 cmp     r13, r15
.text:0000000000003343                 jbe     short loc_3349
.text:0000000000003345                 mov     [r14+r15], al
.text:0000000000003349
.text:0000000000003349 loc_3349:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000003349                 add     r15, 1
.text:000000000000334D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003352                 test    al, al
.text:0000000000003354                 jnz     short loc_3340
.text:0000000000003356                 jmp     loc_316C
.text:000000000000335B ; ---------------------------------------------------------------------------
.text:000000000000335B
.text:000000000000335B loc_335B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000335B                 mov     eax, edx
.text:000000000000335D                 jmp     loc_28B7
.text:0000000000003362 ; ---------------------------------------------------------------------------
.text:0000000000003362
.text:0000000000003362 loc_3362:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003362                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003366                 cmp     bl, 3Eh ; '>'
.text:0000000000003369                 ja      loc_2BE0
.text:000000000000336F                 mov     rax, 7000A38200000000h
.text:0000000000003379                 bt      rax, rbx
.text:000000000000337D                 jnb     loc_2BE0
.text:0000000000003383                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003388                 jnz     loc_3572
.text:000000000000338E                 cmp     r13, r15
.text:0000000000003391                 jbe     short loc_3398
.text:0000000000003393                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003398
.text:0000000000003398 loc_3398:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003398                 lea     rax, [r15+1]
.text:000000000000339C                 cmp     r13, rax
.text:000000000000339F                 jbe     short loc_33A7
.text:00000000000033A1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:00000000000033A7
.text:00000000000033A7 loc_33A7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:00000000000033A7                 lea     rax, [r15+2]
.text:00000000000033AB                 cmp     r13, rax
.text:00000000000033AE                 jbe     short loc_33B6
.text:00000000000033B0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:00000000000033B6
.text:00000000000033B6 loc_33B6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:00000000000033B6                 lea     rax, [r15+3]
.text:00000000000033BA                 cmp     r13, rax
.text:00000000000033BD                 jbe     short loc_33C5
.text:00000000000033BF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:00000000000033C5
.text:00000000000033C5 loc_33C5:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:00000000000033C5                 add     r15, 4
.text:00000000000033C9                 xor     edx, edx
.text:00000000000033CB                 xor     r12d, r12d
.text:00000000000033CE                 xor     eax, eax
.text:00000000000033D0                 mov     rbp, rcx
.text:00000000000033D3                 jmp     loc_2598
.text:00000000000033D8 ; ---------------------------------------------------------------------------
.text:00000000000033D8
.text:00000000000033D8 loc_33D8:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000033D8                                         ; DATA XREF: .rodata:jpt_2401↓o
.text:00000000000033D8                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:00000000000033DA                 jz      loc_3568
.text:00000000000033E0                 lea     rax, asc_523D   ; "'"
.text:00000000000033E7                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000033EC                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033F1                 xor     r12d, r12d
.text:00000000000033F4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033FD                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003402                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003407                 mov     [rsp+0E8h+n], 1
.text:0000000000003410                 xor     r15d, r15d
.text:0000000000003413                 mov     [rsp+0E8h+s2], rax
.text:0000000000003418                 jmp     loc_2443
.text:0000000000003418 ; ---------------------------------------------------------------------------
.text:000000000000341D                 align 20h
.text:0000000000003420
.text:0000000000003420 loc_3420:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000003420                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000003420                 mov     rbp, r11
.text:0000000000003423                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000003428                 jmp     loc_2EF9
.text:000000000000342D ; ---------------------------------------------------------------------------
.text:000000000000342D
.text:000000000000342D loc_342D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:000000000000342D                 lea     rax, unk_523B
.text:0000000000003434                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003439                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000343E                 xor     r12d, r12d
.text:0000000000003441                 mov     [rsp+0E8h+var_98], 0
.text:000000000000344A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000344F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003454                 mov     [rsp+0E8h+n], 1
.text:000000000000345D                 xor     r15d, r15d
.text:0000000000003460                 mov     [rsp+0E8h+s2], rax
.text:0000000000003465                 jmp     loc_2443
.text:000000000000346A ; ---------------------------------------------------------------------------
.text:000000000000346A
.text:000000000000346A loc_346A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000346A                 mov     eax, edx
.text:000000000000346C
.text:000000000000346C loc_346C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000346C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000346C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003471                 test    rbx, rbx
.text:0000000000003474                 jz      short loc_34A2
.text:0000000000003476                 test    al, al
.text:0000000000003478                 jz      short loc_34A2
.text:000000000000347A                 movzx   ecx, byte ptr [rbx]
.text:000000000000347D                 mov     rax, rbx
.text:0000000000003480                 test    cl, cl
.text:0000000000003482                 jz      short loc_34A2
.text:0000000000003484                 mov     rdx, r15
.text:0000000000003487                 sub     rax, r15
.text:000000000000348A
.text:000000000000348A loc_348A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000348A                 cmp     r13, rdx
.text:000000000000348D                 jbe     short loc_3493
.text:000000000000348F                 mov     [r14+rdx], cl
.text:0000000000003493
.text:0000000000003493 loc_3493:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003493                 add     rdx, 1
.text:0000000000003497                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000349B                 test    cl, cl
.text:000000000000349D                 jnz     short loc_348A
.text:000000000000349F                 mov     r15, rdx
.text:00000000000034A2
.text:00000000000034A2 loc_34A2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:00000000000034A2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:00000000000034A2                 cmp     r13, r15
.text:00000000000034A5                 jbe     loc_2F49
.text:00000000000034AB                 mov     byte ptr [r14+r15], 0
.text:00000000000034B0                 jmp     loc_2F49
.text:00000000000034B5 ; ---------------------------------------------------------------------------
.text:00000000000034B5
.text:00000000000034B5 loc_34B5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:00000000000034B5                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000034BA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000034BF                 mov     rbp, r11
.text:00000000000034C2                 setz    al
.text:00000000000034C5                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000034C9                 jmp     loc_2EF9
.text:00000000000034CE ; ---------------------------------------------------------------------------
.text:00000000000034CE
.text:00000000000034CE loc_34CE:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:00000000000034CE                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000034D2                 mov     rdi, rcx
.text:00000000000034D5                 call    gettext_quote
.text:00000000000034DA                 mov     [rsp+0E8h+var_80], rax
.text:00000000000034DF                 jmp     loc_3136
.text:00000000000034E4 ; ---------------------------------------------------------------------------
.text:00000000000034E4
.text:00000000000034E4 loc_34E4:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:00000000000034E4                 mov     esi, [rsp+0E8h+var_E0]
.text:00000000000034E8                 mov     rdi, rcx
.text:00000000000034EB                 call    gettext_quote
.text:00000000000034F0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000034F5                 jmp     loc_3161
.text:00000000000034FA ; ---------------------------------------------------------------------------
.text:00000000000034FA
.text:00000000000034FA loc_34FA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000034FA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000034FF                 mov     rbp, r11
.text:0000000000003502                 mov     eax, edx
.text:0000000000003504                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003508                 jmp     loc_2EF9
.text:000000000000350D ; ---------------------------------------------------------------------------
.text:000000000000350D
.text:000000000000350D loc_350D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000350D                 sub     rsp, 8
.text:0000000000003511                 mov     r8d, 5
.text:0000000000003517                 mov     rcx, r11
.text:000000000000351A                 push    [rsp+0F0h+var_88]
.text:000000000000351E                 push    [rsp+0F8h+var_80]
.text:0000000000003522                 mov     rdi, r14
.text:0000000000003525                 push    [rsp+100h+var_C8]
.text:0000000000003529                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003531                 mov     rdx, [rsp+108h+s]
.text:0000000000003536                 mov     rsi, [rsp+108h+var_98]
.text:000000000000353B                 call    quotearg_buffer_restyled
.text:0000000000003540                 add     rsp, 20h
.text:0000000000003544                 mov     r15, rax
.text:0000000000003547                 jmp     loc_2F49
.text:000000000000354C ; ---------------------------------------------------------------------------
.text:000000000000354C
.text:000000000000354C loc_354C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000354C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003551                 jmp     loc_346C
.text:0000000000003556 ; ---------------------------------------------------------------------------
.text:0000000000003556
.text:0000000000003556 loc_3556:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003556                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000355E                 jmp     loc_2EF9
.text:0000000000003563 ; ---------------------------------------------------------------------------
.text:0000000000003563
.text:0000000000003563 loc_3563:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003563                 call    ___stack_chk_fail
.text:0000000000003568 ; ---------------------------------------------------------------------------
.text:0000000000003568
.text:0000000000003568 loc_3568:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003568                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000356D                 jmp     loc_2FE1
.text:0000000000003572 ; ---------------------------------------------------------------------------
.text:0000000000003572
.text:0000000000003572 loc_3572:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003572                 mov     rbp, r11
.text:0000000000003575                 jmp     loc_2F10
.text:000000000000357A ; ---------------------------------------------------------------------------
.text:000000000000357A
.text:000000000000357A loc_357A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000357A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000357F                 xor     eax, eax
.text:0000000000003581                 xor     r12d, r12d
.text:0000000000003584                 mov     [rsp+0E8h+var_98], 0
.text:000000000000358D                 jmp     loc_2B34
.text:0000000000003592 ; ---------------------------------------------------------------------------
.text:0000000000003592
.text:0000000000003592 loc_3592:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003592                 mov     rdx, r13
.text:0000000000003595                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000359A                 jmp     loc_2B92
.text:000000000000359F ; ---------------------------------------------------------------------------
.text:000000000000359F
.text:000000000000359F def_2401:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000359F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000359F ; } // starts at 2370
.text:000000000000359F quotearg_buffer_restyled endp
.text:000000000000359F
.text:000000000000359F ; ---------------------------------------------------------------------------
.text:00000000000035A4                 align 10h
.text:00000000000035B0
.text:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035B0
.text:00000000000035B0
.text:00000000000035B0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000035B0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000035B0
.text:00000000000035B0 var_50          = qword ptr -50h
.text:00000000000035B0 var_48          = qword ptr -48h
.text:00000000000035B0 var_40          = dword ptr -40h
.text:00000000000035B0 var_3C          = dword ptr -3Ch
.text:00000000000035B0
.text:00000000000035B0 ; __unwind {
.text:00000000000035B0                 push    r15
.text:00000000000035B2                 push    r14
.text:00000000000035B4                 movsxd  r15, edi
.text:00000000000035B7                 push    r13
.text:00000000000035B9                 push    r12
.text:00000000000035BB                 mov     r14, rdx
.text:00000000000035BE                 push    rbp
.text:00000000000035BF                 push    rbx
.text:00000000000035C0                 mov     rbp, rcx
.text:00000000000035C3                 sub     rsp, 28h
.text:00000000000035C7                 mov     [rsp+58h+var_50], rsi
.text:00000000000035CC                 call    ___errno_location
.text:00000000000035D1                 mov     r13, rax
.text:00000000000035D4                 mov     eax, [rax]
.text:00000000000035D6                 test    r15d, r15d
.text:00000000000035D9                 mov     rbx, cs:slotvec
.text:00000000000035E0                 mov     [rsp+58h+var_40], eax
.text:00000000000035E4                 js      loc_3751
.text:00000000000035EA                 cmp     cs:nslots, r15d
.text:00000000000035F1                 jg      short loc_3655
.text:00000000000035F3                 cmp     r15d, 7FFFFFFFh
.text:00000000000035FA                 jz      loc_3756
.text:0000000000003600                 lea     r12d, [r15+1]
.text:0000000000003604                 lea     rax, slotvec0
.text:000000000000360B                 movsxd  rsi, r12d
.text:000000000000360E                 shl     rsi, 4
.text:0000000000003612                 cmp     rbx, rax
.text:0000000000003615                 jz      loc_3730
.text:000000000000361B                 mov     rdi, rbx
.text:000000000000361E                 call    xrealloc
.text:0000000000003623                 mov     rbx, rax
.text:0000000000003626                 mov     cs:slotvec, rax
.text:000000000000362D
.text:000000000000362D loc_362D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000362D                 movsxd  rdi, cs:nslots
.text:0000000000003634                 mov     edx, r12d
.text:0000000000003637                 xor     esi, esi        ; c
.text:0000000000003639                 sub     edx, edi
.text:000000000000363B                 shl     rdi, 4
.text:000000000000363F                 movsxd  rdx, edx
.text:0000000000003642                 add     rdi, rbx        ; s
.text:0000000000003645                 shl     rdx, 4          ; n
.text:0000000000003649                 call    _memset
.text:000000000000364E                 mov     cs:nslots, r12d
.text:0000000000003655
.text:0000000000003655 loc_3655:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003655                 mov     eax, [rbp+4]
.text:0000000000003658                 shl     r15, 4
.text:000000000000365C                 sub     rsp, 8
.text:0000000000003660                 add     rbx, r15
.text:0000000000003663                 lea     r15, [rbp+8]
.text:0000000000003667                 mov     r8d, [rbp+0]
.text:000000000000366B                 mov     r11, [rbx]
.text:000000000000366E                 mov     r12, [rbx+8]
.text:0000000000003672                 mov     rcx, r14
.text:0000000000003675                 or      eax, 1
.text:0000000000003678                 mov     [rsp+60h+var_3C], eax
.text:000000000000367C                 push    qword ptr [rbp+30h]
.text:000000000000367F                 mov     r9d, eax
.text:0000000000003682                 push    qword ptr [rbp+28h]
.text:0000000000003685                 push    r15
.text:0000000000003687                 mov     rsi, r11
.text:000000000000368A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000368F                 mov     rdi, r12
.text:0000000000003692                 mov     [rsp+78h+var_48], r11
.text:0000000000003697                 call    quotearg_buffer_restyled
.text:000000000000369C                 add     rsp, 20h
.text:00000000000036A0                 mov     r11, [rsp+58h+var_48]
.text:00000000000036A5                 cmp     r11, rax
.text:00000000000036A8                 ja      short loc_3711
.text:00000000000036AA                 lea     rsi, [rax+1]
.text:00000000000036AE                 lea     rax, slot0
.text:00000000000036B5                 cmp     r12, rax
.text:00000000000036B8                 mov     [rbx], rsi
.text:00000000000036BB                 jz      short loc_36CF
.text:00000000000036BD                 mov     rdi, r12        ; ptr
.text:00000000000036C0                 mov     [rsp+58h+var_48], rsi
.text:00000000000036C5                 call    _free
.text:00000000000036CA                 mov     rsi, [rsp+58h+var_48]
.text:00000000000036CF
.text:00000000000036CF loc_36CF:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:00000000000036CF                 mov     rdi, rsi
.text:00000000000036D2                 mov     [rsp+58h+var_48], rsi
.text:00000000000036D7                 call    xmalloc
.text:00000000000036DC                 sub     rsp, 8
.text:00000000000036E0                 mov     [rbx+8], rax
.text:00000000000036E4                 mov     r8d, [rbp+0]
.text:00000000000036E8                 push    qword ptr [rbp+30h]
.text:00000000000036EB                 push    qword ptr [rbp+28h]
.text:00000000000036EE                 mov     rcx, r14
.text:00000000000036F1                 push    r15
.text:00000000000036F3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000036F8                 mov     rdi, rax
.text:00000000000036FB                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003700                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003705                 mov     r12, rax
.text:0000000000003708                 call    quotearg_buffer_restyled
.text:000000000000370D                 add     rsp, 20h
.text:0000000000003711
.text:0000000000003711 loc_3711:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003711                 mov     eax, [rsp+58h+var_40]
.text:0000000000003715                 mov     [r13+0], eax
.text:0000000000003719                 add     rsp, 28h
.text:000000000000371D                 mov     rax, r12
.text:0000000000003720                 pop     rbx
.text:0000000000003721                 pop     rbp
.text:0000000000003722                 pop     r12
.text:0000000000003724                 pop     r13
.text:0000000000003726                 pop     r14
.text:0000000000003728                 pop     r15
.text:000000000000372A                 retn
.text:000000000000372A ; ---------------------------------------------------------------------------
.text:000000000000372B                 align 10h
.text:0000000000003730
.text:0000000000003730 loc_3730:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003730                 xor     edi, edi
.text:0000000000003732                 call    xrealloc
.text:0000000000003737                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000373F                 mov     rbx, rax
.text:0000000000003742                 mov     cs:slotvec, rax
.text:0000000000003749                 movups  xmmword ptr [rax], xmm0
.text:000000000000374C                 jmp     loc_362D
.text:0000000000003751 ; ---------------------------------------------------------------------------
.text:0000000000003751
.text:0000000000003751 loc_3751:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003751                 call    _abort
.text:0000000000003756 ; ---------------------------------------------------------------------------
.text:0000000000003756
.text:0000000000003756 loc_3756:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003756                 call    xalloc_die
.text:0000000000003756 ; } // starts at 35B0
.text:0000000000003756 quotearg_n_options endp
.text:0000000000003756
.text:0000000000003756 ; ---------------------------------------------------------------------------
.text:000000000000375B                 align 20h
.text:0000000000003760
.text:0000000000003760 ; =============== S U B R O U T I N E =======================================
.text:0000000000003760
.text:0000000000003760 ; Attributes: info_from_lumina
.text:0000000000003760
.text:0000000000003760 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003760                 public clone_quoting_options
.text:0000000000003760 clone_quoting_options proc near
.text:0000000000003760 ; __unwind {
.text:0000000000003760                 push    r12
.text:0000000000003762                 push    rbp
.text:0000000000003763                 push    rbx
.text:0000000000003764                 mov     rbx, rdi
.text:0000000000003767                 call    ___errno_location
.text:000000000000376C                 mov     r12d, [rax]
.text:000000000000376F                 mov     rbp, rax
.text:0000000000003772                 lea     rax, default_quoting_options
.text:0000000000003779                 test    rbx, rbx
.text:000000000000377C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003781                 cmovz   rbx, rax
.text:0000000000003785                 mov     rdi, rbx        ; src
.text:0000000000003788                 call    xmemdup
.text:000000000000378D                 mov     [rbp+0], r12d
.text:0000000000003791                 pop     rbx
.text:0000000000003792                 pop     rbp
.text:0000000000003793                 pop     r12
.text:0000000000003795                 retn
.text:0000000000003795 ; } // starts at 3760
.text:0000000000003795 clone_quoting_options endp
.text:0000000000003795
.text:0000000000003795 ; ---------------------------------------------------------------------------
.text:0000000000003796                 align 20h
.text:00000000000037A0
.text:00000000000037A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037A0
.text:00000000000037A0
.text:00000000000037A0                 public get_quoting_style
.text:00000000000037A0 get_quoting_style proc near
.text:00000000000037A0 ; __unwind {
.text:00000000000037A0                 lea     rax, default_quoting_options
.text:00000000000037A7                 test    rdi, rdi
.text:00000000000037AA                 cmovz   rdi, rax
.text:00000000000037AE                 mov     eax, [rdi]
.text:00000000000037B0                 retn
.text:00000000000037B0 ; } // starts at 37A0
.text:00000000000037B0 get_quoting_style endp
.text:00000000000037B0
.text:00000000000037B0 ; ---------------------------------------------------------------------------
.text:00000000000037B1                 align 20h
.text:00000000000037C0
.text:00000000000037C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037C0
.text:00000000000037C0
.text:00000000000037C0                 public set_quoting_style
.text:00000000000037C0 set_quoting_style proc near
.text:00000000000037C0 ; __unwind {
.text:00000000000037C0                 lea     rax, default_quoting_options
.text:00000000000037C7                 test    rdi, rdi
.text:00000000000037CA                 cmovz   rdi, rax
.text:00000000000037CE                 mov     [rdi], esi
.text:00000000000037D0                 retn
.text:00000000000037D0 ; } // starts at 37C0
.text:00000000000037D0 set_quoting_style endp
.text:00000000000037D0
.text:00000000000037D0 ; ---------------------------------------------------------------------------
.text:00000000000037D1                 align 20h
.text:00000000000037E0
.text:00000000000037E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037E0
.text:00000000000037E0 ; Attributes: info_from_lumina
.text:00000000000037E0
.text:00000000000037E0 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:00000000000037E0                 public set_char_quoting
.text:00000000000037E0 set_char_quoting proc near
.text:00000000000037E0 ; __unwind {
.text:00000000000037E0                 lea     rax, default_quoting_options
.text:00000000000037E7                 test    rdi, rdi
.text:00000000000037EA                 mov     ecx, esi
.text:00000000000037EC                 cmovz   rdi, rax
.text:00000000000037F0                 mov     eax, esi
.text:00000000000037F2                 and     ecx, 1Fh
.text:00000000000037F5                 shr     al, 5
.text:00000000000037F8                 movzx   eax, al
.text:00000000000037FB                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003800                 mov     esi, [rdi]
.text:0000000000003802                 mov     eax, esi
.text:0000000000003804                 shr     eax, cl
.text:0000000000003806                 xor     edx, eax
.text:0000000000003808                 and     eax, 1
.text:000000000000380B                 and     edx, 1
.text:000000000000380E                 shl     edx, cl
.text:0000000000003810                 xor     edx, esi
.text:0000000000003812                 mov     [rdi], edx
.text:0000000000003814                 retn
.text:0000000000003814 ; } // starts at 37E0
.text:0000000000003814 set_char_quoting endp
.text:0000000000003814
.text:0000000000003814 ; ---------------------------------------------------------------------------
.text:0000000000003815                 align 20h
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820
.text:0000000000003820                 public set_quoting_flags
.text:0000000000003820 set_quoting_flags proc near
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 lea     rax, default_quoting_options
.text:0000000000003827                 test    rdi, rdi
.text:000000000000382A                 cmovz   rdi, rax
.text:000000000000382E                 mov     eax, [rdi+4]
.text:0000000000003831                 mov     [rdi+4], esi
.text:0000000000003834                 retn
.text:0000000000003834 ; } // starts at 3820
.text:0000000000003834 set_quoting_flags endp
.text:0000000000003834
.text:0000000000003834 ; ---------------------------------------------------------------------------
.text:0000000000003835                 align 20h
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840 ; Attributes: info_from_lumina
.text:0000000000003840
.text:0000000000003840 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003840                 public set_custom_quoting
.text:0000000000003840 set_custom_quoting proc near
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 lea     rax, default_quoting_options
.text:0000000000003847                 test    rdi, rdi
.text:000000000000384A                 cmovz   rdi, rax
.text:000000000000384E                 test    rsi, rsi
.text:0000000000003851                 mov     dword ptr [rdi], 0Ah
.text:0000000000003857                 jz      short loc_3867
.text:0000000000003859                 test    rdx, rdx
.text:000000000000385C                 jz      short loc_3867
.text:000000000000385E                 mov     [rdi+28h], rsi
.text:0000000000003862                 mov     [rdi+30h], rdx
.text:0000000000003866                 retn
.text:0000000000003867 ; ---------------------------------------------------------------------------
.text:0000000000003867
.text:0000000000003867 loc_3867:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003867                                         ; set_custom_quoting+1C↑j
.text:0000000000003867                 sub     rsp, 8
.text:000000000000386B                 call    _abort
.text:000000000000386B ; } // starts at 3840
.text:000000000000386B set_custom_quoting endp
.text:000000000000386B
.text:0000000000003870
.text:0000000000003870 ; =============== S U B R O U T I N E =======================================
.text:0000000000003870
.text:0000000000003870 ; Attributes: info_from_lumina
.text:0000000000003870
.text:0000000000003870 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003870                 public quotearg_buffer
.text:0000000000003870 quotearg_buffer proc near
.text:0000000000003870
.text:0000000000003870 var_40          = qword ptr -40h
.text:0000000000003870
.text:0000000000003870 ; __unwind {
.text:0000000000003870                 push    r15
.text:0000000000003872                 push    r14
.text:0000000000003874                 lea     rax, default_quoting_options
.text:000000000000387B                 push    r13
.text:000000000000387D                 push    r12
.text:000000000000387F                 mov     r13, rdi
.text:0000000000003882                 push    rbp
.text:0000000000003883                 push    rbx
.text:0000000000003884                 mov     rbx, r8
.text:0000000000003887                 mov     r14, rsi
.text:000000000000388A                 mov     r15, rdx
.text:000000000000388D                 sub     rsp, 18h
.text:0000000000003891                 test    r8, r8
.text:0000000000003894                 cmovz   rbx, rax
.text:0000000000003898                 mov     [rsp+48h+var_40], rcx
.text:000000000000389D                 call    ___errno_location
.text:00000000000038A2                 mov     r12d, [rax]
.text:00000000000038A5                 mov     rbp, rax
.text:00000000000038A8                 lea     rax, [rbx+8]
.text:00000000000038AC                 sub     rsp, 8
.text:00000000000038B0                 mov     r9d, [rbx+4]
.text:00000000000038B4                 push    qword ptr [rbx+30h]
.text:00000000000038B7                 mov     r8d, [rbx]
.text:00000000000038BA                 push    qword ptr [rbx+28h]
.text:00000000000038BD                 mov     rdx, r15
.text:00000000000038C0                 push    rax
.text:00000000000038C1                 mov     rcx, [rsp+68h+var_40]
.text:00000000000038C6                 mov     rsi, r14
.text:00000000000038C9                 mov     rdi, r13
.text:00000000000038CC                 call    quotearg_buffer_restyled
.text:00000000000038D1                 mov     [rbp+0], r12d
.text:00000000000038D5                 add     rsp, 38h
.text:00000000000038D9                 pop     rbx
.text:00000000000038DA                 pop     rbp
.text:00000000000038DB                 pop     r12
.text:00000000000038DD                 pop     r13
.text:00000000000038DF                 pop     r14
.text:00000000000038E1                 pop     r15
.text:00000000000038E3                 retn
.text:00000000000038E3 ; } // starts at 3870
.text:00000000000038E3 quotearg_buffer endp
.text:00000000000038E3
.text:00000000000038E3 ; ---------------------------------------------------------------------------
.text:00000000000038E4                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0 ; Attributes: info_from_lumina
.text:00000000000038F0
.text:00000000000038F0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000038F0                 public quotearg_alloc_mem
.text:00000000000038F0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000038F0
.text:00000000000038F0 var_5C          = dword ptr -5Ch
.text:00000000000038F0 var_58          = qword ptr -58h
.text:00000000000038F0 var_50          = qword ptr -50h
.text:00000000000038F0 var_48          = qword ptr -48h
.text:00000000000038F0 var_40          = qword ptr -40h
.text:00000000000038F0
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 push    r15
.text:00000000000038F2                 push    r14
.text:00000000000038F4                 lea     rax, default_quoting_options
.text:00000000000038FB                 push    r13
.text:00000000000038FD                 push    r12
.text:00000000000038FF                 mov     r12, rdx
.text:0000000000003902                 push    rbp
.text:0000000000003903                 push    rbx
.text:0000000000003904                 mov     rbx, rcx
.text:0000000000003907                 mov     r14, rdi
.text:000000000000390A                 mov     r15, rsi
.text:000000000000390D                 sub     rsp, 38h
.text:0000000000003911                 test    rcx, rcx
.text:0000000000003914                 cmovz   rbx, rax
.text:0000000000003918                 xor     ebp, ebp
.text:000000000000391A                 call    ___errno_location
.text:000000000000391F                 test    r12, r12
.text:0000000000003922                 mov     r13, rax
.text:0000000000003925                 mov     eax, [rax]
.text:0000000000003927                 setz    bpl
.text:000000000000392B                 or      ebp, [rbx+4]
.text:000000000000392E                 lea     r10, [rbx+8]
.text:0000000000003932                 sub     rsp, 8
.text:0000000000003936                 mov     r8d, [rbx]
.text:0000000000003939                 mov     rcx, r15
.text:000000000000393C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003940                 push    qword ptr [rbx+30h]
.text:0000000000003943                 mov     rdx, r14
.text:0000000000003946                 push    qword ptr [rbx+28h]
.text:0000000000003949                 push    r10
.text:000000000000394B                 xor     esi, esi
.text:000000000000394D                 mov     r9d, ebp
.text:0000000000003950                 xor     edi, edi
.text:0000000000003952                 mov     [rsp+88h+var_48], r10
.text:0000000000003957                 call    quotearg_buffer_restyled
.text:000000000000395C                 lea     rsi, [rax+1]
.text:0000000000003960                 mov     [rsp+88h+var_40], rax
.text:0000000000003965                 add     rsp, 20h
.text:0000000000003969                 mov     rdi, rsi
.text:000000000000396C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003971                 call    xmalloc
.text:0000000000003976                 mov     [rsp+68h+var_58], rax
.text:000000000000397B                 sub     rsp, 8
.text:000000000000397F                 push    qword ptr [rbx+30h]
.text:0000000000003982                 push    qword ptr [rbx+28h]
.text:0000000000003985                 mov     r10, [rsp+80h+var_48]
.text:000000000000398A                 mov     r9d, ebp
.text:000000000000398D                 mov     r8d, [rbx]
.text:0000000000003990                 mov     rcx, r15
.text:0000000000003993                 mov     rdx, r14
.text:0000000000003996                 mov     rdi, rax
.text:0000000000003999                 push    r10
.text:000000000000399B                 mov     rsi, [rsp+88h+var_50]
.text:00000000000039A0                 call    quotearg_buffer_restyled
.text:00000000000039A5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000039A9                 add     rsp, 20h
.text:00000000000039AD                 test    r12, r12
.text:00000000000039B0                 mov     [r13+0], eax
.text:00000000000039B4                 jz      short loc_39BF
.text:00000000000039B6                 mov     r11, [rsp+68h+var_40]
.text:00000000000039BB                 mov     [r12], r11
.text:00000000000039BF
.text:00000000000039BF loc_39BF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000039BF                 mov     rax, [rsp+68h+var_58]
.text:00000000000039C4                 add     rsp, 38h
.text:00000000000039C8                 pop     rbx
.text:00000000000039C9                 pop     rbp
.text:00000000000039CA                 pop     r12
.text:00000000000039CC                 pop     r13
.text:00000000000039CE                 pop     r14
.text:00000000000039D0                 pop     r15
.text:00000000000039D2                 retn
.text:00000000000039D2 ; } // starts at 38F0
.text:00000000000039D2 quotearg_alloc_mem endp
.text:00000000000039D2
.text:00000000000039D2 ; ---------------------------------------------------------------------------
.text:00000000000039D3                 align 20h
.text:00000000000039E0
.text:00000000000039E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039E0
.text:00000000000039E0
.text:00000000000039E0                 public quotearg_alloc
.text:00000000000039E0 quotearg_alloc  proc near
.text:00000000000039E0 ; __unwind {
.text:00000000000039E0                 mov     rcx, rdx
.text:00000000000039E3                 xor     edx, edx
.text:00000000000039E5                 jmp     quotearg_alloc_mem
.text:00000000000039E5 ; } // starts at 39E0
.text:00000000000039E5 quotearg_alloc  endp
.text:00000000000039E5
.text:00000000000039E5 ; ---------------------------------------------------------------------------
.text:00000000000039EA                 align 10h
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0 ; Attributes: info_from_lumina
.text:00000000000039F0
.text:00000000000039F0 ; void __cdecl quotearg_free()
.text:00000000000039F0                 public quotearg_free
.text:00000000000039F0 quotearg_free   proc near
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 mov     eax, cs:nslots
.text:00000000000039F6                 push    r12
.text:00000000000039F8                 mov     r12, cs:slotvec
.text:00000000000039FF                 push    rbp
.text:0000000000003A00                 push    rbx
.text:0000000000003A01                 cmp     eax, 1
.text:0000000000003A04                 jle     short loc_3A31
.text:0000000000003A06                 sub     eax, 2
.text:0000000000003A09                 lea     rbx, [r12+18h]
.text:0000000000003A0E                 shl     rax, 4
.text:0000000000003A12                 lea     rbp, [r12+rax+28h]
.text:0000000000003A17                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003A20
.text:0000000000003A20 loc_3A20:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003A20                 mov     rdi, [rbx]      ; ptr
.text:0000000000003A23                 add     rbx, 10h
.text:0000000000003A27                 call    _free
.text:0000000000003A2C                 cmp     rbx, rbp
.text:0000000000003A2F                 jnz     short loc_3A20
.text:0000000000003A31
.text:0000000000003A31 loc_3A31:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003A31                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003A36                 lea     rbx, slot0
.text:0000000000003A3D                 cmp     rdi, rbx
.text:0000000000003A40                 jz      short loc_3A59
.text:0000000000003A42                 call    _free
.text:0000000000003A47                 mov     cs:slotvec0, 100h
.text:0000000000003A52                 mov     cs:off_207078, rbx
.text:0000000000003A59
.text:0000000000003A59 loc_3A59:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003A59                 lea     rbx, slotvec0
.text:0000000000003A60                 cmp     r12, rbx
.text:0000000000003A63                 jz      short loc_3A74
.text:0000000000003A65                 mov     rdi, r12        ; ptr
.text:0000000000003A68                 call    _free
.text:0000000000003A6D                 mov     cs:slotvec, rbx
.text:0000000000003A74
.text:0000000000003A74 loc_3A74:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003A74                 pop     rbx
.text:0000000000003A75                 mov     cs:nslots, 1
.text:0000000000003A7F                 pop     rbp
.text:0000000000003A80                 pop     r12
.text:0000000000003A82                 retn
.text:0000000000003A82 ; } // starts at 39F0
.text:0000000000003A82 quotearg_free   endp
.text:0000000000003A82
.text:0000000000003A82 ; ---------------------------------------------------------------------------
.text:0000000000003A83                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90
.text:0000000000003A90                 public quotearg_n
.text:0000000000003A90 quotearg_n      proc near
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 lea     rcx, default_quoting_options
.text:0000000000003A97                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A9E                 jmp     quotearg_n_options
.text:0000000000003A9E ; } // starts at 3A90
.text:0000000000003A9E quotearg_n      endp
.text:0000000000003A9E
.text:0000000000003A9E ; ---------------------------------------------------------------------------
.text:0000000000003AA3                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AB0
.text:0000000000003AB0
.text:0000000000003AB0                 public quotearg_n_mem
.text:0000000000003AB0 quotearg_n_mem  proc near
.text:0000000000003AB0 ; __unwind {
.text:0000000000003AB0                 lea     rcx, default_quoting_options
.text:0000000000003AB7                 jmp     quotearg_n_options
.text:0000000000003AB7 ; } // starts at 3AB0
.text:0000000000003AB7 quotearg_n_mem  endp
.text:0000000000003AB7
.text:0000000000003AB7 ; ---------------------------------------------------------------------------
.text:0000000000003ABC                 align 20h
.text:0000000000003AC0
.text:0000000000003AC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AC0
.text:0000000000003AC0
.text:0000000000003AC0                 public quotearg
.text:0000000000003AC0 quotearg        proc near
.text:0000000000003AC0 ; __unwind {
.text:0000000000003AC0                 lea     rcx, default_quoting_options
.text:0000000000003AC7                 mov     rsi, rdi
.text:0000000000003ACA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AD1                 xor     edi, edi
.text:0000000000003AD3                 jmp     quotearg_n_options
.text:0000000000003AD3 ; } // starts at 3AC0
.text:0000000000003AD3 quotearg        endp
.text:0000000000003AD3
.text:0000000000003AD3 ; ---------------------------------------------------------------------------
.text:0000000000003AD8                 align 20h
.text:0000000000003AE0
.text:0000000000003AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AE0
.text:0000000000003AE0
.text:0000000000003AE0                 public quotearg_mem
.text:0000000000003AE0 quotearg_mem    proc near
.text:0000000000003AE0 ; __unwind {
.text:0000000000003AE0                 lea     rcx, default_quoting_options
.text:0000000000003AE7                 mov     rdx, rsi
.text:0000000000003AEA                 mov     rsi, rdi
.text:0000000000003AED                 xor     edi, edi
.text:0000000000003AEF                 jmp     quotearg_n_options
.text:0000000000003AEF ; } // starts at 3AE0
.text:0000000000003AEF quotearg_mem    endp
.text:0000000000003AEF
.text:0000000000003AEF ; ---------------------------------------------------------------------------
.text:0000000000003AF4                 align 20h
.text:0000000000003B00
.text:0000000000003B00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B00
.text:0000000000003B00 ; Attributes: info_from_lumina
.text:0000000000003B00
.text:0000000000003B00 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003B00                 public quotearg_n_style
.text:0000000000003B00 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003B00
.text:0000000000003B00 var_48          = dword ptr -48h
.text:0000000000003B00 var_44          = qword ptr -44h
.text:0000000000003B00 var_3C          = qword ptr -3Ch
.text:0000000000003B00 var_34          = qword ptr -34h
.text:0000000000003B00 var_2C          = qword ptr -2Ch
.text:0000000000003B00 var_24          = qword ptr -24h
.text:0000000000003B00 var_1C          = qword ptr -1Ch
.text:0000000000003B00 var_14          = dword ptr -14h
.text:0000000000003B00 var_10          = qword ptr -10h
.text:0000000000003B00
.text:0000000000003B00 ; __unwind {
.text:0000000000003B00                 sub     rsp, 48h
.text:0000000000003B04                 mov     rax, rdx
.text:0000000000003B07                 mov     rdx, fs:28h
.text:0000000000003B10                 mov     [rsp+48h+var_10], rdx
.text:0000000000003B15                 xor     edx, edx
.text:0000000000003B17                 cmp     esi, 0Ah
.text:0000000000003B1A                 jz      short loc_3B84
.text:0000000000003B1C                 mov     [rsp+48h+var_48], esi
.text:0000000000003B1F                 mov     rcx, rsp
.text:0000000000003B22                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003B29                 mov     rsi, rax
.text:0000000000003B2C                 mov     [rsp+48h+var_44], 0
.text:0000000000003B35                 mov     [rsp+48h+var_3C], 0
.text:0000000000003B3E                 mov     [rsp+48h+var_34], 0
.text:0000000000003B47                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B50                 mov     [rsp+48h+var_24], 0
.text:0000000000003B59                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B62                 mov     [rsp+48h+var_14], 0
.text:0000000000003B6A                 call    quotearg_n_options
.text:0000000000003B6F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003B74                 xor     rcx, fs:28h
.text:0000000000003B7D                 jnz     short loc_3B89
.text:0000000000003B7F                 add     rsp, 48h
.text:0000000000003B83                 retn
.text:0000000000003B84 ; ---------------------------------------------------------------------------
.text:0000000000003B84
.text:0000000000003B84 loc_3B84:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003B84                 call    _abort
.text:0000000000003B89 ; ---------------------------------------------------------------------------
.text:0000000000003B89
.text:0000000000003B89 loc_3B89:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003B89                 call    ___stack_chk_fail
.text:0000000000003B89 ; } // starts at 3B00
.text:0000000000003B89 quotearg_n_style endp
.text:0000000000003B89
.text:0000000000003B89 ; ---------------------------------------------------------------------------
.text:0000000000003B8E                 align 10h
.text:0000000000003B90
.text:0000000000003B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B90
.text:0000000000003B90 ; Attributes: info_from_lumina
.text:0000000000003B90
.text:0000000000003B90 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003B90                 public quotearg_n_style_mem
.text:0000000000003B90 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003B90
.text:0000000000003B90 var_48          = dword ptr -48h
.text:0000000000003B90 var_44          = qword ptr -44h
.text:0000000000003B90 var_3C          = qword ptr -3Ch
.text:0000000000003B90 var_34          = qword ptr -34h
.text:0000000000003B90 var_2C          = qword ptr -2Ch
.text:0000000000003B90 var_24          = qword ptr -24h
.text:0000000000003B90 var_1C          = qword ptr -1Ch
.text:0000000000003B90 var_14          = dword ptr -14h
.text:0000000000003B90 var_10          = qword ptr -10h
.text:0000000000003B90
.text:0000000000003B90 ; __unwind {
.text:0000000000003B90                 sub     rsp, 48h
.text:0000000000003B94                 mov     rax, rdx
.text:0000000000003B97                 mov     rdx, rcx
.text:0000000000003B9A                 mov     rcx, fs:28h
.text:0000000000003BA3                 mov     [rsp+48h+var_10], rcx
.text:0000000000003BA8                 xor     ecx, ecx
.text:0000000000003BAA                 cmp     esi, 0Ah
.text:0000000000003BAD                 jz      short loc_3C10
.text:0000000000003BAF                 mov     [rsp+48h+var_48], esi
.text:0000000000003BB2                 mov     rcx, rsp
.text:0000000000003BB5                 mov     rsi, rax
.text:0000000000003BB8                 mov     [rsp+48h+var_44], 0
.text:0000000000003BC1                 mov     [rsp+48h+var_3C], 0
.text:0000000000003BCA                 mov     [rsp+48h+var_34], 0
.text:0000000000003BD3                 mov     [rsp+48h+var_2C], 0
.text:0000000000003BDC                 mov     [rsp+48h+var_24], 0
.text:0000000000003BE5                 mov     [rsp+48h+var_1C], 0
.text:0000000000003BEE                 mov     [rsp+48h+var_14], 0
.text:0000000000003BF6                 call    quotearg_n_options
.text:0000000000003BFB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003C00                 xor     rdx, fs:28h
.text:0000000000003C09                 jnz     short loc_3C15
.text:0000000000003C0B                 add     rsp, 48h
.text:0000000000003C0F                 retn
.text:0000000000003C10 ; ---------------------------------------------------------------------------
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003C10                 call    _abort
.text:0000000000003C15 ; ---------------------------------------------------------------------------
.text:0000000000003C15
.text:0000000000003C15 loc_3C15:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003C15                 call    ___stack_chk_fail
.text:0000000000003C15 ; } // starts at 3B90
.text:0000000000003C15 quotearg_n_style_mem endp
.text:0000000000003C15
.text:0000000000003C15 ; ---------------------------------------------------------------------------
.text:0000000000003C1A                 align 20h
.text:0000000000003C20
.text:0000000000003C20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C20
.text:0000000000003C20
.text:0000000000003C20                 public quotearg_style
.text:0000000000003C20 quotearg_style  proc near
.text:0000000000003C20 ; __unwind {
.text:0000000000003C20                 mov     rdx, rsi
.text:0000000000003C23                 mov     esi, edi
.text:0000000000003C25                 xor     edi, edi
.text:0000000000003C27                 jmp     quotearg_n_style
.text:0000000000003C27 ; } // starts at 3C20
.text:0000000000003C27 quotearg_style  endp
.text:0000000000003C27
.text:0000000000003C27 ; ---------------------------------------------------------------------------
.text:0000000000003C2C                 align 10h
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30
.text:0000000000003C30                 public quotearg_style_mem
.text:0000000000003C30 quotearg_style_mem proc near
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 mov     rcx, rdx
.text:0000000000003C33                 mov     rdx, rsi
.text:0000000000003C36                 mov     esi, edi
.text:0000000000003C38                 xor     edi, edi
.text:0000000000003C3A                 jmp     quotearg_n_style_mem
.text:0000000000003C3A ; } // starts at 3C30
.text:0000000000003C3A quotearg_style_mem endp
.text:0000000000003C3A
.text:0000000000003C3A ; ---------------------------------------------------------------------------
.text:0000000000003C3F                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40 ; Attributes: info_from_lumina
.text:0000000000003C40
.text:0000000000003C40 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003C40                 public quotearg_char_mem
.text:0000000000003C40 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003C40                                         ; quotearg_colon+C↓j ...
.text:0000000000003C40
.text:0000000000003C40 var_48          = xmmword ptr -48h
.text:0000000000003C40 var_38          = xmmword ptr -38h
.text:0000000000003C40 var_28          = xmmword ptr -28h
.text:0000000000003C40 var_18          = qword ptr -18h
.text:0000000000003C40 var_10          = qword ptr -10h
.text:0000000000003C40
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 sub     rsp, 48h
.text:0000000000003C44                 mov     ecx, edx
.text:0000000000003C46                 mov     rax, fs:28h
.text:0000000000003C4F                 mov     [rsp+48h+var_10], rax
.text:0000000000003C54                 xor     eax, eax
.text:0000000000003C56                 mov     rax, cs:qword_207210
.text:0000000000003C5D                 mov     r8, rsp
.text:0000000000003C60                 and     ecx, 1Fh
.text:0000000000003C63                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003C6B                 mov     [rsp+48h+var_18], rax
.text:0000000000003C70                 mov     eax, edx
.text:0000000000003C72                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003C76                 shr     al, 5
.text:0000000000003C79                 movzx   eax, al
.text:0000000000003C7C                 lea     r9, [r8+rax*4+8]
.text:0000000000003C81                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003C89                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003C8E                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003C96                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003C9B                 mov     edx, [r9]
.text:0000000000003C9E                 mov     eax, edx
.text:0000000000003CA0                 shr     eax, cl
.text:0000000000003CA2                 not     eax
.text:0000000000003CA4                 and     eax, 1
.text:0000000000003CA7                 shl     eax, cl
.text:0000000000003CA9                 mov     rcx, r8
.text:0000000000003CAC                 xor     eax, edx
.text:0000000000003CAE                 mov     rdx, rsi
.text:0000000000003CB1                 mov     rsi, rdi
.text:0000000000003CB4                 mov     [r9], eax
.text:0000000000003CB7                 xor     edi, edi
.text:0000000000003CB9                 call    quotearg_n_options
.text:0000000000003CBE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003CC3                 xor     rsi, fs:28h
.text:0000000000003CCC                 jnz     short loc_3CD3
.text:0000000000003CCE                 add     rsp, 48h
.text:0000000000003CD2                 retn
.text:0000000000003CD3 ; ---------------------------------------------------------------------------
.text:0000000000003CD3
.text:0000000000003CD3 loc_3CD3:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003CD3                 call    ___stack_chk_fail
.text:0000000000003CD3 ; } // starts at 3C40
.text:0000000000003CD3 quotearg_char_mem endp
.text:0000000000003CD3
.text:0000000000003CD3 ; ---------------------------------------------------------------------------
.text:0000000000003CD8                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CE0
.text:0000000000003CE0
.text:0000000000003CE0                 public quotearg_char
.text:0000000000003CE0 quotearg_char   proc near
.text:0000000000003CE0 ; __unwind {
.text:0000000000003CE0                 movsx   edx, sil
.text:0000000000003CE4                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CEB                 jmp     quotearg_char_mem
.text:0000000000003CEB ; } // starts at 3CE0
.text:0000000000003CEB quotearg_char   endp
.text:0000000000003CEB
.text:0000000000003CF0
.text:0000000000003CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CF0
.text:0000000000003CF0
.text:0000000000003CF0                 public quotearg_colon
.text:0000000000003CF0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003CF0 ; __unwind {
.text:0000000000003CF0                 mov     edx, 3Ah ; ':'
.text:0000000000003CF5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CFC                 jmp     quotearg_char_mem
.text:0000000000003CFC ; } // starts at 3CF0
.text:0000000000003CFC quotearg_colon  endp
.text:0000000000003CFC
.text:0000000000003CFC ; ---------------------------------------------------------------------------
.text:0000000000003D01                 align 10h
.text:0000000000003D10
.text:0000000000003D10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D10
.text:0000000000003D10
.text:0000000000003D10                 public quotearg_colon_mem
.text:0000000000003D10 quotearg_colon_mem proc near
.text:0000000000003D10 ; __unwind {
.text:0000000000003D10                 mov     edx, 3Ah ; ':'
.text:0000000000003D15                 jmp     quotearg_char_mem
.text:0000000000003D15 ; } // starts at 3D10
.text:0000000000003D15 quotearg_colon_mem endp
.text:0000000000003D15
.text:0000000000003D15 ; ---------------------------------------------------------------------------
.text:0000000000003D1A                 align 20h
.text:0000000000003D20
.text:0000000000003D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D20
.text:0000000000003D20 ; Attributes: info_from_lumina
.text:0000000000003D20
.text:0000000000003D20 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003D20                 public quotearg_n_style_colon
.text:0000000000003D20 quotearg_n_style_colon proc near
.text:0000000000003D20
.text:0000000000003D20 var_48          = dword ptr -48h
.text:0000000000003D20 var_44          = qword ptr -44h
.text:0000000000003D20 var_3C          = qword ptr -3Ch
.text:0000000000003D20 var_34          = qword ptr -34h
.text:0000000000003D20 var_2C          = qword ptr -2Ch
.text:0000000000003D20 var_24          = qword ptr -24h
.text:0000000000003D20 var_1C          = qword ptr -1Ch
.text:0000000000003D20 var_14          = dword ptr -14h
.text:0000000000003D20 var_10          = qword ptr -10h
.text:0000000000003D20
.text:0000000000003D20 ; __unwind {
.text:0000000000003D20                 sub     rsp, 48h
.text:0000000000003D24                 mov     rax, rdx
.text:0000000000003D27                 mov     rdx, fs:28h
.text:0000000000003D30                 mov     [rsp+48h+var_10], rdx
.text:0000000000003D35                 xor     edx, edx
.text:0000000000003D37                 cmp     esi, 0Ah
.text:0000000000003D3A                 jz      short loc_3DA4
.text:0000000000003D3C                 mov     [rsp+48h+var_48], esi
.text:0000000000003D3F                 mov     rcx, rsp
.text:0000000000003D42                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003D49                 mov     rsi, rax
.text:0000000000003D4C                 mov     [rsp+48h+var_44], 0
.text:0000000000003D55                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003D5E                 mov     [rsp+48h+var_34], 0
.text:0000000000003D67                 mov     [rsp+48h+var_2C], 0
.text:0000000000003D70                 mov     [rsp+48h+var_24], 0
.text:0000000000003D79                 mov     [rsp+48h+var_1C], 0
.text:0000000000003D82                 mov     [rsp+48h+var_14], 0
.text:0000000000003D8A                 call    quotearg_n_options
.text:0000000000003D8F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003D94                 xor     rcx, fs:28h
.text:0000000000003D9D                 jnz     short loc_3DA9
.text:0000000000003D9F                 add     rsp, 48h
.text:0000000000003DA3                 retn
.text:0000000000003DA4 ; ---------------------------------------------------------------------------
.text:0000000000003DA4
.text:0000000000003DA4 loc_3DA4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003DA4                 call    _abort
.text:0000000000003DA9 ; ---------------------------------------------------------------------------
.text:0000000000003DA9
.text:0000000000003DA9 loc_3DA9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003DA9                 call    ___stack_chk_fail
.text:0000000000003DA9 ; } // starts at 3D20
.text:0000000000003DA9 quotearg_n_style_colon endp
.text:0000000000003DA9
.text:0000000000003DA9 ; ---------------------------------------------------------------------------
.text:0000000000003DAE                 align 10h
.text:0000000000003DB0
.text:0000000000003DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DB0
.text:0000000000003DB0 ; Attributes: info_from_lumina
.text:0000000000003DB0
.text:0000000000003DB0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003DB0                 public quotearg_n_custom_mem
.text:0000000000003DB0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003DB0                                         ; quotearg_custom+12↓j ...
.text:0000000000003DB0
.text:0000000000003DB0 var_48          = xmmword ptr -48h
.text:0000000000003DB0 var_38          = xmmword ptr -38h
.text:0000000000003DB0 var_28          = xmmword ptr -28h
.text:0000000000003DB0 var_18          = qword ptr -18h
.text:0000000000003DB0 var_10          = qword ptr -10h
.text:0000000000003DB0
.text:0000000000003DB0 ; __unwind {
.text:0000000000003DB0                 sub     rsp, 48h
.text:0000000000003DB4                 mov     r9, rcx
.text:0000000000003DB7                 mov     rcx, cs:qword_207210
.text:0000000000003DBE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003DC6                 mov     rax, fs:28h
.text:0000000000003DCF                 mov     [rsp+48h+var_10], rax
.text:0000000000003DD4                 xor     eax, eax
.text:0000000000003DD6                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003DDA                 test    rsi, rsi
.text:0000000000003DDD                 mov     [rsp+48h+var_18], rcx
.text:0000000000003DE2                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003DE9                 movdqa  xmm0, cs:xmmword_2071F0
.text:0000000000003DF1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003DF6                 movdqa  xmm0, cs:xmmword_207200
.text:0000000000003DFE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003E03                 jz      short loc_3E37
.text:0000000000003E05                 test    rdx, rdx
.text:0000000000003E08                 jz      short loc_3E37
.text:0000000000003E0A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003E0F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003E14                 mov     rcx, rsp
.text:0000000000003E17                 mov     rdx, r8
.text:0000000000003E1A                 mov     rsi, r9
.text:0000000000003E1D                 call    quotearg_n_options
.text:0000000000003E22                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003E27                 xor     rdi, fs:28h
.text:0000000000003E30                 jnz     short loc_3E3C
.text:0000000000003E32                 add     rsp, 48h
.text:0000000000003E36                 retn
.text:0000000000003E37 ; ---------------------------------------------------------------------------
.text:0000000000003E37
.text:0000000000003E37 loc_3E37:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003E37                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003E37                 call    _abort
.text:0000000000003E3C ; ---------------------------------------------------------------------------
.text:0000000000003E3C
.text:0000000000003E3C loc_3E3C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003E3C                 call    ___stack_chk_fail
.text:0000000000003E3C ; } // starts at 3DB0
.text:0000000000003E3C quotearg_n_custom_mem endp
.text:0000000000003E3C
.text:0000000000003E3C ; ---------------------------------------------------------------------------
.text:0000000000003E41                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50                 public quotearg_n_custom
.text:0000000000003E50 quotearg_n_custom proc near
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E57                 jmp     quotearg_n_custom_mem
.text:0000000000003E57 ; } // starts at 3E50
.text:0000000000003E57 quotearg_n_custom endp
.text:0000000000003E57
.text:0000000000003E57 ; ---------------------------------------------------------------------------
.text:0000000000003E5C                 align 20h
.text:0000000000003E60
.text:0000000000003E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E60
.text:0000000000003E60
.text:0000000000003E60                 public quotearg_custom
.text:0000000000003E60 quotearg_custom proc near
.text:0000000000003E60 ; __unwind {
.text:0000000000003E60                 mov     rcx, rdx
.text:0000000000003E63                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E6A                 mov     rdx, rsi
.text:0000000000003E6D                 mov     rsi, rdi
.text:0000000000003E70                 xor     edi, edi
.text:0000000000003E72                 jmp     quotearg_n_custom_mem
.text:0000000000003E72 ; } // starts at 3E60
.text:0000000000003E72 quotearg_custom endp
.text:0000000000003E72
.text:0000000000003E72 ; ---------------------------------------------------------------------------
.text:0000000000003E77                 align 20h
.text:0000000000003E80
.text:0000000000003E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E80
.text:0000000000003E80
.text:0000000000003E80                 public quotearg_custom_mem
.text:0000000000003E80 quotearg_custom_mem proc near
.text:0000000000003E80 ; __unwind {
.text:0000000000003E80                 mov     r8, rcx
.text:0000000000003E83                 mov     rcx, rdx
.text:0000000000003E86                 mov     rdx, rsi
.text:0000000000003E89                 mov     rsi, rdi
.text:0000000000003E8C                 xor     edi, edi
.text:0000000000003E8E                 jmp     quotearg_n_custom_mem
.text:0000000000003E8E ; } // starts at 3E80
.text:0000000000003E8E quotearg_custom_mem endp
.text:0000000000003E8E
.text:0000000000003E8E ; ---------------------------------------------------------------------------
.text:0000000000003E93                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0
.text:0000000000003EA0                 public quote_n_mem
.text:0000000000003EA0 quote_n_mem     proc near
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 lea     rcx, quote_quoting_options
.text:0000000000003EA7                 jmp     quotearg_n_options
.text:0000000000003EA7 ; } // starts at 3EA0
.text:0000000000003EA7 quote_n_mem     endp
.text:0000000000003EA7
.text:0000000000003EA7 ; ---------------------------------------------------------------------------
.text:0000000000003EAC                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EB0
.text:0000000000003EB0
.text:0000000000003EB0                 public quote_mem
.text:0000000000003EB0 quote_mem       proc near
.text:0000000000003EB0 ; __unwind {
.text:0000000000003EB0                 lea     rcx, quote_quoting_options
.text:0000000000003EB7                 mov     rdx, rsi
.text:0000000000003EBA                 mov     rsi, rdi
.text:0000000000003EBD                 xor     edi, edi
.text:0000000000003EBF                 jmp     quotearg_n_options
.text:0000000000003EBF ; } // starts at 3EB0
.text:0000000000003EBF quote_mem       endp
.text:0000000000003EBF
.text:0000000000003EBF ; ---------------------------------------------------------------------------
.text:0000000000003EC4                 align 10h
.text:0000000000003ED0
.text:0000000000003ED0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003ED0
.text:0000000000003ED0
.text:0000000000003ED0                 public quote_n
.text:0000000000003ED0 quote_n         proc near
.text:0000000000003ED0 ; __unwind {
.text:0000000000003ED0                 lea     rcx, quote_quoting_options
.text:0000000000003ED7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003EDE                 jmp     quotearg_n_options
.text:0000000000003EDE ; } // starts at 3ED0
.text:0000000000003EDE quote_n         endp
.text:0000000000003EDE
.text:0000000000003EDE ; ---------------------------------------------------------------------------
.text:0000000000003EE3                 align 10h
.text:0000000000003EF0
.text:0000000000003EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EF0
.text:0000000000003EF0
.text:0000000000003EF0                 public quote
.text:0000000000003EF0 quote           proc near               ; CODE XREF: main+198↑p
.text:0000000000003EF0                                         ; print_group_list+1A0↑p
.text:0000000000003EF0 ; __unwind {
.text:0000000000003EF0                 lea     rcx, quote_quoting_options
.text:0000000000003EF7                 mov     rsi, rdi
.text:0000000000003EFA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003F01                 xor     edi, edi
.text:0000000000003F03                 jmp     quotearg_n_options
.text:0000000000003F03 ; } // starts at 3EF0
.text:0000000000003F03 quote           endp
.text:0000000000003F03
.text:0000000000003F03 ; ---------------------------------------------------------------------------
.text:0000000000003F08                 align 10h
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10
.text:0000000000003F10 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003F10                 public version_etc_arn
.text:0000000000003F10 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_434B↓j
.text:0000000000003F10                                         ; version_etc_va:loc_439B↓p ...
.text:0000000000003F10
.text:0000000000003F10 var_58          = qword ptr -58h
.text:0000000000003F10 var_50          = qword ptr -50h
.text:0000000000003F10 var_48          = qword ptr -48h
.text:0000000000003F10 var_40          = qword ptr -40h
.text:0000000000003F10
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 push    r15
.text:0000000000003F12                 push    r14
.text:0000000000003F14                 push    r13
.text:0000000000003F16                 push    r12
.text:0000000000003F18                 mov     r12, r9
.text:0000000000003F1B                 push    rbp
.text:0000000000003F1C                 push    rbx
.text:0000000000003F1D                 mov     rbp, rdi
.text:0000000000003F20                 mov     rbx, r8
.text:0000000000003F23                 sub     rsp, 28h
.text:0000000000003F27                 test    rsi, rsi
.text:0000000000003F2A                 jz      loc_4048
.text:0000000000003F30                 mov     r8, rdx
.text:0000000000003F33                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003F3A                 mov     r9, rcx
.text:0000000000003F3D                 xor     eax, eax
.text:0000000000003F3F                 mov     rcx, rsi
.text:0000000000003F42                 mov     esi, 1
.text:0000000000003F47                 call    ___fprintf_chk
.text:0000000000003F4C
.text:0000000000003F4C loc_3F4C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003F4C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003F53                 xor     edi, edi        ; domainname
.text:0000000000003F55                 mov     edx, 5          ; category
.text:0000000000003F5A                 call    _dcgettext
.text:0000000000003F5F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003F66                 mov     rcx, rax
.text:0000000000003F69                 mov     r8d, 7E3h
.text:0000000000003F6F                 mov     esi, 1
.text:0000000000003F74                 mov     rdi, rbp
.text:0000000000003F77                 xor     eax, eax
.text:0000000000003F79                 call    ___fprintf_chk
.text:0000000000003F7E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003F85                 xor     edi, edi        ; domainname
.text:0000000000003F87                 mov     edx, 5          ; category
.text:0000000000003F8C                 call    _dcgettext
.text:0000000000003F91                 mov     rsi, rbp        ; stream
.text:0000000000003F94                 mov     rdi, rax        ; s
.text:0000000000003F97                 call    _fputs_unlocked
.text:0000000000003F9C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003FA0                 ja      def_3FB4        ; jumptable 0000000000003FB4 default case
.text:0000000000003FA6                 lea     rdx, jpt_3FB4
.text:0000000000003FAD                 movsxd  rax, ds:(jpt_3FB4 - 5A08h)[rdx+r12*4]
.text:0000000000003FB1                 add     rax, rdx
.text:0000000000003FB4                 jmp     rax             ; switch jump
.text:0000000000003FB4 ; ---------------------------------------------------------------------------
.text:0000000000003FB6                 align 20h
.text:0000000000003FC0
.text:0000000000003FC0 loc_3FC0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FC0                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:0000000000003FC0                 mov     r9, [rbx+38h]   ; jumptable 0000000000003FB4 case 8
.text:0000000000003FC4                 mov     rax, [rbx+10h]
.text:0000000000003FC8                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003FCF                 mov     r8, [rbx+8]
.text:0000000000003FD3                 mov     edx, 5          ; category
.text:0000000000003FD8                 xor     edi, edi        ; domainname
.text:0000000000003FDA                 mov     r13, [rbx+30h]
.text:0000000000003FDE                 mov     r12, [rbx+28h]
.text:0000000000003FE2                 mov     [rsp+58h+var_48], r9
.text:0000000000003FE7                 mov     r15, [rbx+20h]
.text:0000000000003FEB                 mov     r14, [rbx+18h]
.text:0000000000003FEF                 mov     [rsp+58h+var_58], rax
.text:0000000000003FF3                 mov     [rsp+58h+var_50], r8
.text:0000000000003FF8                 mov     rbx, [rbx]
.text:0000000000003FFB                 call    _dcgettext
.text:0000000000004000                 sub     rsp, 8
.text:0000000000004004
.text:0000000000004004 loc_4004:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000004004                 mov     r9, [rsp+60h+var_48]
.text:0000000000004009                 mov     rdx, rax
.text:000000000000400C                 mov     rcx, rbx
.text:000000000000400F                 mov     esi, 1
.text:0000000000004014                 mov     rdi, rbp
.text:0000000000004017                 xor     eax, eax
.text:0000000000004019                 push    r9
.text:000000000000401B                 push    r13
.text:000000000000401D                 push    r12
.text:000000000000401F                 push    r15
.text:0000000000004021                 push    r14
.text:0000000000004023                 mov     r9, [rsp+88h+var_58]
.text:0000000000004028                 mov     r8, [rsp+88h+var_50]
.text:000000000000402D                 call    ___fprintf_chk
.text:0000000000004032                 add     rsp, 30h
.text:0000000000004036
.text:0000000000004036 loc_4036:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004036                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:0000000000004036                 add     rsp, 28h        ; jumptable 0000000000003FB4 case 0
.text:000000000000403A                 pop     rbx
.text:000000000000403B                 pop     rbp
.text:000000000000403C                 pop     r12
.text:000000000000403E                 pop     r13
.text:0000000000004040                 pop     r14
.text:0000000000004042                 pop     r15
.text:0000000000004044                 retn
.text:0000000000004044 ; ---------------------------------------------------------------------------
.text:0000000000004045                 align 8
.text:0000000000004048
.text:0000000000004048 loc_4048:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000004048                 mov     r8, rcx
.text:000000000000404B                 mov     rcx, rdx
.text:000000000000404E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004055                 mov     esi, 1
.text:000000000000405A                 xor     eax, eax
.text:000000000000405C                 call    ___fprintf_chk
.text:0000000000004061                 jmp     loc_3F4C
.text:0000000000004061 ; ---------------------------------------------------------------------------
.text:0000000000004066                 align 10h
.text:0000000000004070
.text:0000000000004070 loc_4070:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004070                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:0000000000004070                 mov     r10, [rbx+40h]  ; jumptable 0000000000003FB4 case 9
.text:0000000000004074                 mov     r9, [rbx+38h]
.text:0000000000004078                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000407F                 mov     rax, [rbx+10h]
.text:0000000000004083                 mov     r8, [rbx+8]
.text:0000000000004087                 mov     edx, 5          ; category
.text:000000000000408C                 mov     r13, [rbx+30h]
.text:0000000000004090                 mov     r12, [rbx+28h]
.text:0000000000004094                 mov     r15, [rbx+20h]
.text:0000000000004098                 mov     r14, [rbx+18h]
.text:000000000000409C                 mov     rbx, [rbx]
.text:000000000000409F                 mov     [rsp+58h+var_40], r10
.text:00000000000040A4                 mov     [rsp+58h+var_48], r9
.text:00000000000040A9                 mov     [rsp+58h+var_58], rax
.text:00000000000040AD                 mov     [rsp+58h+var_50], r8
.text:00000000000040B2
.text:00000000000040B2 loc_40B2:                               ; CODE XREF: version_etc_arn+412↓j
.text:00000000000040B2                 xor     edi, edi        ; domainname
.text:00000000000040B4                 call    _dcgettext
.text:00000000000040B9                 mov     r10, [rsp+58h+var_40]
.text:00000000000040BE                 push    r10
.text:00000000000040C0                 jmp     loc_4004
.text:00000000000040C0 ; ---------------------------------------------------------------------------
.text:00000000000040C5                 align 8
.text:00000000000040C8
.text:00000000000040C8 loc_40C8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000040C8                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:00000000000040C8                 mov     rbx, [rbx]      ; jumptable 0000000000003FB4 case 1
.text:00000000000040CB                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:00000000000040D2                 mov     edx, 5          ; category
.text:00000000000040D7                 xor     edi, edi        ; domainname
.text:00000000000040D9                 call    _dcgettext
.text:00000000000040DE                 add     rsp, 28h
.text:00000000000040E2                 mov     rcx, rbx
.text:00000000000040E5                 mov     rdi, rbp
.text:00000000000040E8                 pop     rbx
.text:00000000000040E9                 pop     rbp
.text:00000000000040EA                 pop     r12
.text:00000000000040EC                 pop     r13
.text:00000000000040EE                 pop     r14
.text:00000000000040F0                 pop     r15
.text:00000000000040F2                 mov     rdx, rax
.text:00000000000040F5                 mov     esi, 1
.text:00000000000040FA                 xor     eax, eax
.text:00000000000040FC                 jmp     ___fprintf_chk
.text:00000000000040FC ; ---------------------------------------------------------------------------
.text:0000000000004101                 align 8
.text:0000000000004108
.text:0000000000004108 loc_4108:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004108                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:0000000000004108                 mov     r12, [rbx+8]    ; jumptable 0000000000003FB4 case 2
.text:000000000000410C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000004113                 mov     rbx, [rbx]
.text:0000000000004116                 mov     edx, 5          ; category
.text:000000000000411B                 xor     edi, edi        ; domainname
.text:000000000000411D                 call    _dcgettext
.text:0000000000004122                 add     rsp, 28h
.text:0000000000004126                 mov     r8, r12
.text:0000000000004129                 mov     rcx, rbx
.text:000000000000412C                 mov     rdi, rbp
.text:000000000000412F                 mov     rdx, rax
.text:0000000000004132                 mov     esi, 1
.text:0000000000004137                 pop     rbx
.text:0000000000004138                 pop     rbp
.text:0000000000004139                 pop     r12
.text:000000000000413B                 pop     r13
.text:000000000000413D                 pop     r14
.text:000000000000413F                 pop     r15
.text:0000000000004141                 xor     eax, eax
.text:0000000000004143                 jmp     ___fprintf_chk
.text:0000000000004143 ; ---------------------------------------------------------------------------
.text:0000000000004148                 align 10h
.text:0000000000004150
.text:0000000000004150 loc_4150:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004150                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:0000000000004150                 mov     r13, [rbx+10h]  ; jumptable 0000000000003FB4 case 3
.text:0000000000004154                 mov     r12, [rbx+8]
.text:0000000000004158                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000415F                 mov     rbx, [rbx]
.text:0000000000004162                 mov     edx, 5          ; category
.text:0000000000004167                 xor     edi, edi        ; domainname
.text:0000000000004169                 call    _dcgettext
.text:000000000000416E                 add     rsp, 28h
.text:0000000000004172                 mov     r9, r13
.text:0000000000004175                 mov     r8, r12
.text:0000000000004178                 mov     rcx, rbx
.text:000000000000417B                 mov     rdi, rbp
.text:000000000000417E                 mov     rdx, rax
.text:0000000000004181                 pop     rbx
.text:0000000000004182                 pop     rbp
.text:0000000000004183                 pop     r12
.text:0000000000004185                 pop     r13
.text:0000000000004187                 pop     r14
.text:0000000000004189                 pop     r15
.text:000000000000418B                 mov     esi, 1
.text:0000000000004190                 xor     eax, eax
.text:0000000000004192                 jmp     ___fprintf_chk
.text:0000000000004192 ; ---------------------------------------------------------------------------
.text:0000000000004197                 align 20h
.text:00000000000041A0
.text:00000000000041A0 loc_41A0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041A0                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:00000000000041A0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003FB4 case 4
.text:00000000000041A7                 mov     edx, 5          ; category
.text:00000000000041AC                 xor     edi, edi        ; domainname
.text:00000000000041AE                 mov     r14, [rbx+18h]
.text:00000000000041B2                 mov     r13, [rbx+10h]
.text:00000000000041B6                 mov     r12, [rbx+8]
.text:00000000000041BA                 mov     rbx, [rbx]
.text:00000000000041BD                 call    _dcgettext
.text:00000000000041C2                 sub     rsp, 8
.text:00000000000041C6
.text:00000000000041C6 loc_41C6:                               ; CODE XREF: version_etc_arn+310↓j
.text:00000000000041C6                 push    r14
.text:00000000000041C8                 mov     rdx, rax
.text:00000000000041CB                 mov     r9, r13
.text:00000000000041CE                 mov     r8, r12
.text:00000000000041D1                 mov     rcx, rbx
.text:00000000000041D4                 mov     rdi, rbp
.text:00000000000041D7                 mov     esi, 1
.text:00000000000041DC                 xor     eax, eax
.text:00000000000041DE                 call    ___fprintf_chk
.text:00000000000041E3                 pop     rax
.text:00000000000041E4                 pop     rdx
.text:00000000000041E5                 add     rsp, 28h
.text:00000000000041E9                 pop     rbx
.text:00000000000041EA                 pop     rbp
.text:00000000000041EB                 pop     r12
.text:00000000000041ED                 pop     r13
.text:00000000000041EF                 pop     r14
.text:00000000000041F1                 pop     r15
.text:00000000000041F3                 retn
.text:00000000000041F3 ; ---------------------------------------------------------------------------
.text:00000000000041F4                 align 8
.text:00000000000041F8
.text:00000000000041F8 loc_41F8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041F8                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:00000000000041F8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003FB4 case 5
.text:00000000000041FC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000004203                 mov     edx, 5          ; category
.text:0000000000004208                 xor     edi, edi        ; domainname
.text:000000000000420A                 mov     r14, [rbx+18h]
.text:000000000000420E                 mov     r13, [rbx+10h]
.text:0000000000004212                 mov     r12, [rbx+8]
.text:0000000000004216                 mov     rbx, [rbx]
.text:0000000000004219                 call    _dcgettext
.text:000000000000421E                 push    r15
.text:0000000000004220                 jmp     short loc_41C6
.text:0000000000004220 ; ---------------------------------------------------------------------------
.text:0000000000004222                 align 8
.text:0000000000004228
.text:0000000000004228 loc_4228:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004228                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:0000000000004228                 mov     r8, [rbx+8]     ; jumptable 0000000000003FB4 case 6
.text:000000000000422C                 mov     r12, [rbx+28h]
.text:0000000000004230                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000004237                 mov     r15, [rbx+20h]
.text:000000000000423B                 mov     r14, [rbx+18h]
.text:000000000000423F                 mov     edx, 5          ; category
.text:0000000000004244                 mov     r13, [rbx+10h]
.text:0000000000004248                 xor     edi, edi        ; domainname
.text:000000000000424A                 mov     rbx, [rbx]
.text:000000000000424D                 mov     [rsp+58h+var_58], r8
.text:0000000000004251                 call    _dcgettext
.text:0000000000004256                 sub     rsp, 8
.text:000000000000425A                 mov     r9, r13
.text:000000000000425D                 push    r12
.text:000000000000425F                 push    r15
.text:0000000000004261                 push    r14
.text:0000000000004263
.text:0000000000004263 loc_4263:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004263                 mov     r8, [rsp+78h+var_58]
.text:0000000000004268                 mov     rcx, rbx
.text:000000000000426B                 mov     rdx, rax
.text:000000000000426E                 mov     rdi, rbp
.text:0000000000004271                 mov     esi, 1
.text:0000000000004276                 xor     eax, eax
.text:0000000000004278                 call    ___fprintf_chk
.text:000000000000427D                 add     rsp, 20h
.text:0000000000004281                 add     rsp, 28h
.text:0000000000004285                 pop     rbx
.text:0000000000004286                 pop     rbp
.text:0000000000004287                 pop     r12
.text:0000000000004289                 pop     r13
.text:000000000000428B                 pop     r14
.text:000000000000428D                 pop     r15
.text:000000000000428F                 retn
.text:0000000000004290 ; ---------------------------------------------------------------------------
.text:0000000000004290
.text:0000000000004290 loc_4290:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004290                                         ; DATA XREF: .rodata:jpt_3FB4↓o
.text:0000000000004290                 mov     r9, [rbx+10h]   ; jumptable 0000000000003FB4 case 7
.text:0000000000004294                 mov     r13, [rbx+30h]
.text:0000000000004298                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000429F                 mov     r12, [rbx+28h]
.text:00000000000042A3                 mov     r15, [rbx+20h]
.text:00000000000042A7                 mov     edx, 5          ; category
.text:00000000000042AC                 mov     r14, [rbx+18h]
.text:00000000000042B0                 mov     r8, [rbx+8]
.text:00000000000042B4                 xor     edi, edi        ; domainname
.text:00000000000042B6                 mov     [rsp+58h+var_50], r9
.text:00000000000042BB                 mov     rbx, [rbx]
.text:00000000000042BE                 mov     [rsp+58h+var_58], r8
.text:00000000000042C2                 call    _dcgettext
.text:00000000000042C7                 push    r13
.text:00000000000042C9                 push    r12
.text:00000000000042CB                 push    r15
.text:00000000000042CD                 push    r14
.text:00000000000042CF                 mov     r9, [rsp+78h+var_50]
.text:00000000000042D4                 jmp     short loc_4263
.text:00000000000042D4 ; ---------------------------------------------------------------------------
.text:00000000000042D6                 align 20h
.text:00000000000042E0
.text:00000000000042E0 def_3FB4:                               ; CODE XREF: version_etc_arn+90↑j
.text:00000000000042E0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003FB4 default case
.text:00000000000042E4                 mov     r9, [rbx+38h]
.text:00000000000042E8                 mov     edx, 5
.text:00000000000042ED                 mov     rax, [rbx+10h]
.text:00000000000042F1                 mov     r8, [rbx+8]
.text:00000000000042F5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000042FC                 mov     r13, [rbx+30h]
.text:0000000000004300                 mov     r12, [rbx+28h]
.text:0000000000004304                 mov     r15, [rbx+20h]
.text:0000000000004308                 mov     r14, [rbx+18h]
.text:000000000000430C                 mov     [rsp+58h+var_40], r10
.text:0000000000004311                 mov     [rsp+58h+var_48], r9
.text:0000000000004316                 mov     [rsp+58h+var_58], rax
.text:000000000000431A                 mov     [rsp+58h+var_50], r8
.text:000000000000431F                 mov     rbx, [rbx]
.text:0000000000004322                 jmp     loc_40B2
.text:0000000000004322 ; } // starts at 3F10
.text:0000000000004322 version_etc_arn endp
.text:0000000000004322
.text:0000000000004322 ; ---------------------------------------------------------------------------
.text:0000000000004327                 align 10h
.text:0000000000004330
.text:0000000000004330 ; =============== S U B R O U T I N E =======================================
.text:0000000000004330
.text:0000000000004330 ; Attributes: info_from_lumina
.text:0000000000004330
.text:0000000000004330 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000004330                 public version_etc_ar
.text:0000000000004330 version_etc_ar  proc near
.text:0000000000004330 ; __unwind {
.text:0000000000004330                 xor     r9d, r9d
.text:0000000000004333                 cmp     qword ptr [r8], 0
.text:0000000000004337                 jz      short loc_434B
.text:0000000000004339                 nop     dword ptr [rax+00000000h]
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000004340                 add     r9, 1
.text:0000000000004344                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000004349                 jnz     short loc_4340
.text:000000000000434B
.text:000000000000434B loc_434B:                               ; CODE XREF: version_etc_ar+7↑j
.text:000000000000434B                 jmp     version_etc_arn
.text:000000000000434B ; } // starts at 4330
.text:000000000000434B version_etc_ar  endp
.text:000000000000434B
.text:0000000000004350
.text:0000000000004350 ; =============== S U B R O U T I N E =======================================
.text:0000000000004350
.text:0000000000004350 ; Attributes: info_from_lumina
.text:0000000000004350
.text:0000000000004350 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004350                 public version_etc_va
.text:0000000000004350 version_etc_va  proc near
.text:0000000000004350
.text:0000000000004350 authtab         = qword ptr -68h
.text:0000000000004350 var_10          = qword ptr -10h
.text:0000000000004350
.text:0000000000004350 ; __unwind {
.text:0000000000004350                 sub     rsp, 68h
.text:0000000000004354                 mov     r10, r8
.text:0000000000004357                 xor     r9d, r9d
.text:000000000000435A                 mov     rax, fs:28h
.text:0000000000004363                 mov     [rsp+68h+var_10], rax
.text:0000000000004368                 xor     eax, eax
.text:000000000000436A                 mov     r8, rsp
.text:000000000000436D                 nop     dword ptr [rax]
.text:0000000000004370
.text:0000000000004370 loc_4370:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004370                 mov     eax, [r10]
.text:0000000000004373                 cmp     eax, 2Fh ; '/'
.text:0000000000004376                 ja      short loc_43BA
.text:0000000000004378                 mov     r11d, eax
.text:000000000000437B                 add     r11, [r10+10h]
.text:000000000000437F                 add     eax, 8
.text:0000000000004382                 mov     [r10], eax
.text:0000000000004385
.text:0000000000004385 loc_4385:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004385                 mov     rax, [r11]
.text:0000000000004388                 test    rax, rax
.text:000000000000438B                 mov     [r8+r9*8], rax
.text:000000000000438F                 jz      short loc_439B
.text:0000000000004391                 add     r9, 1
.text:0000000000004395                 cmp     r9, 0Ah
.text:0000000000004399                 jnz     short loc_4370
.text:000000000000439B
.text:000000000000439B loc_439B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000439B                 call    version_etc_arn
.text:00000000000043A0                 mov     rax, [rsp+68h+var_10]
.text:00000000000043A5                 xor     rax, fs:28h
.text:00000000000043AE                 jnz     short loc_43B5
.text:00000000000043B0                 add     rsp, 68h
.text:00000000000043B4                 retn
.text:00000000000043B5 ; ---------------------------------------------------------------------------
.text:00000000000043B5
.text:00000000000043B5 loc_43B5:                               ; CODE XREF: version_etc_va+5E↑j
.text:00000000000043B5                 call    ___stack_chk_fail
.text:00000000000043BA ; ---------------------------------------------------------------------------
.text:00000000000043BA
.text:00000000000043BA loc_43BA:                               ; CODE XREF: version_etc_va+26↑j
.text:00000000000043BA                 mov     r11, [r10+8]
.text:00000000000043BE                 lea     rax, [r11+8]
.text:00000000000043C2                 mov     [r10+8], rax
.text:00000000000043C6                 jmp     short loc_4385
.text:00000000000043C6 ; } // starts at 4350
.text:00000000000043C6 version_etc_va  endp
.text:00000000000043C6
.text:00000000000043C6 ; ---------------------------------------------------------------------------
.text:00000000000043C8                 align 10h
.text:00000000000043D0
.text:00000000000043D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000043D0
.text:00000000000043D0 ; Attributes: info_from_lumina
.text:00000000000043D0
.text:00000000000043D0 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:00000000000043D0                 public version_etc
.text:00000000000043D0 version_etc     proc near               ; CODE XREF: main+B6↑p
.text:00000000000043D0
.text:00000000000043D0 var_C0          = dword ptr -0C0h
.text:00000000000043D0 var_B8          = qword ptr -0B8h
.text:00000000000043D0 var_B0          = qword ptr -0B0h
.text:00000000000043D0 var_A8          = byte ptr -0A8h
.text:00000000000043D0 var_50          = qword ptr -50h
.text:00000000000043D0 var_48          = byte ptr -48h
.text:00000000000043D0 var_28          = qword ptr -28h
.text:00000000000043D0 var_20          = qword ptr -20h
.text:00000000000043D0 arg_0           = byte ptr  8
.text:00000000000043D0
.text:00000000000043D0 ; __unwind {
.text:00000000000043D0                 push    rbp
.text:00000000000043D1                 push    rbx
.text:00000000000043D2                 mov     r10d, 20h ; ' '
.text:00000000000043D8                 xor     r11d, r11d
.text:00000000000043DB                 sub     rsp, 0B8h
.text:00000000000043E2                 mov     rax, fs:28h
.text:00000000000043EB                 mov     [rsp+0C8h+var_50], rax
.text:00000000000043F0                 xor     eax, eax
.text:00000000000043F2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000043FA                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004402                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000440A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000440F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000004417                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:000000000000441F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000004424                 lea     rax, [rsp+0C8h+var_48]
.text:000000000000442C                 xor     r9d, r9d
.text:000000000000442F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000004434                 mov     rbp, rax
.text:0000000000004437                 nop     word ptr [rax+rax+00000000h]
.text:0000000000004440
.text:0000000000004440 loc_4440:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000004440                 cmp     r10d, 2Fh ; '/'
.text:0000000000004444                 ja      short loc_449C
.text:0000000000004446                 mov     eax, r10d
.text:0000000000004449                 mov     r11d, 1
.text:000000000000444F                 add     r10d, 8
.text:0000000000004453                 add     rax, rbp
.text:0000000000004456
.text:0000000000004456 loc_4456:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004456                 mov     rax, [rax]
.text:0000000000004459                 test    rax, rax
.text:000000000000445C                 mov     [r8+r9*8], rax
.text:0000000000004460                 jz      short loc_446C
.text:0000000000004462                 add     r9, 1
.text:0000000000004466                 cmp     r9, 0Ah
.text:000000000000446A                 jnz     short loc_4440
.text:000000000000446C
.text:000000000000446C loc_446C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000446C                 test    r11b, r11b
.text:000000000000446F                 jnz     short loc_4495
.text:0000000000004471
.text:0000000000004471 loc_4471:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004471                 call    version_etc_arn
.text:0000000000004476                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000447B                 xor     rax, fs:28h
.text:0000000000004484                 jnz     short loc_4490
.text:0000000000004486                 add     rsp, 0B8h
.text:000000000000448D                 pop     rbx
.text:000000000000448E                 pop     rbp
.text:000000000000448F                 retn
.text:0000000000004490 ; ---------------------------------------------------------------------------
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004490                 call    ___stack_chk_fail
.text:0000000000004495 ; ---------------------------------------------------------------------------
.text:0000000000004495
.text:0000000000004495 loc_4495:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004495                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000449A                 jmp     short loc_4471
.text:000000000000449C ; ---------------------------------------------------------------------------
.text:000000000000449C
.text:000000000000449C loc_449C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000449C                 mov     rax, rbx
.text:000000000000449F                 add     rbx, 8
.text:00000000000044A3                 jmp     short loc_4456
.text:00000000000044A3 ; } // starts at 43D0
.text:00000000000044A3 version_etc     endp
.text:00000000000044A3
.text:00000000000044A3 ; ---------------------------------------------------------------------------
.text:00000000000044A5                 align 10h
.text:00000000000044B0
.text:00000000000044B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044B0
.text:00000000000044B0 ; Attributes: info_from_lumina
.text:00000000000044B0
.text:00000000000044B0 ; void __cdecl emit_bug_reporting_address()
.text:00000000000044B0                 public emit_bug_reporting_address
.text:00000000000044B0 emit_bug_reporting_address proc near
.text:00000000000044B0 ; __unwind {
.text:00000000000044B0                 push    rbx
.text:00000000000044B1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:00000000000044B8                 mov     edx, 5          ; category
.text:00000000000044BD                 xor     edi, edi        ; domainname
.text:00000000000044BF                 call    _dcgettext
.text:00000000000044C4                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:00000000000044CB                 mov     rsi, rax
.text:00000000000044CE                 mov     edi, 1
.text:00000000000044D3                 xor     eax, eax
.text:00000000000044D5                 call    ___printf_chk
.text:00000000000044DA                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:00000000000044E1                 mov     edx, 5          ; category
.text:00000000000044E6                 xor     edi, edi        ; domainname
.text:00000000000044E8                 call    _dcgettext
.text:00000000000044ED                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000044F4                 lea     rdx, unk_4E81
.text:00000000000044FB                 mov     rsi, rax
.text:00000000000044FE                 mov     edi, 1
.text:0000000000004503                 xor     eax, eax
.text:0000000000004505                 call    ___printf_chk
.text:000000000000450A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004511                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004518                 xor     edi, edi        ; domainname
.text:000000000000451A                 mov     edx, 5          ; category
.text:000000000000451F                 call    _dcgettext
.text:0000000000004524                 mov     rsi, rbx        ; stream
.text:0000000000004527                 mov     rdi, rax        ; s
.text:000000000000452A                 pop     rbx
.text:000000000000452B                 jmp     _fputs_unlocked
.text:000000000000452B ; } // starts at 44B0
.text:000000000000452B emit_bug_reporting_address endp
.text:000000000000452B
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public xmalloc
.text:0000000000004530 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004530                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 push    rbx
.text:0000000000004531                 mov     rbx, rdi
.text:0000000000004534                 call    _malloc
.text:0000000000004539                 test    rax, rax
.text:000000000000453C                 jnz     short loc_4543
.text:000000000000453E                 test    rbx, rbx
.text:0000000000004541                 jnz     short loc_4545
.text:0000000000004543
.text:0000000000004543 loc_4543:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004543                 pop     rbx
.text:0000000000004544                 retn
.text:0000000000004545 ; ---------------------------------------------------------------------------
.text:0000000000004545
.text:0000000000004545 loc_4545:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004545                 call    xalloc_die
.text:0000000000004545 ; } // starts at 4530
.text:0000000000004545 xmalloc         endp
.text:0000000000004545
.text:0000000000004545 ; ---------------------------------------------------------------------------
.text:000000000000454A                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550 ; Attributes: info_from_lumina
.text:0000000000004550
.text:0000000000004550 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004550                 public xnmalloc
.text:0000000000004550 xnmalloc        proc near
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 mov     rax, rdi
.text:0000000000004553                 mul     rsi
.text:0000000000004556                 mov     rdi, rax
.text:0000000000004559                 seto    al
.text:000000000000455C                 test    rdi, rdi
.text:000000000000455F                 js      short loc_456B
.text:0000000000004561                 movzx   eax, al
.text:0000000000004564                 test    rax, rax
.text:0000000000004567                 jnz     short loc_456B
.text:0000000000004569                 jmp     short xmalloc
.text:000000000000456B ; ---------------------------------------------------------------------------
.text:000000000000456B
.text:000000000000456B loc_456B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000456B                                         ; xnmalloc+17↑j
.text:000000000000456B                 sub     rsp, 8
.text:000000000000456F                 call    xalloc_die
.text:000000000000456F ; } // starts at 4550
.text:000000000000456F xnmalloc        endp
.text:000000000000456F
.text:000000000000456F ; ---------------------------------------------------------------------------
.text:0000000000004574                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580
.text:0000000000004580                 public xcharalloc
.text:0000000000004580 xcharalloc      proc near
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 jmp     short xmalloc
.text:0000000000004580 ; } // starts at 4580
.text:0000000000004580 xcharalloc      endp
.text:0000000000004580
.text:0000000000004580 ; ---------------------------------------------------------------------------
.text:0000000000004582                 align 10h
.text:0000000000004590
.text:0000000000004590 ; =============== S U B R O U T I N E =======================================
.text:0000000000004590
.text:0000000000004590 ; Attributes: info_from_lumina
.text:0000000000004590
.text:0000000000004590 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004590                 public xrealloc
.text:0000000000004590 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004590                                         ; quotearg_n_options+182↑p ...
.text:0000000000004590 ; __unwind {
.text:0000000000004590                 test    rsi, rsi
.text:0000000000004593                 push    rbx
.text:0000000000004594                 mov     rbx, rsi
.text:0000000000004597                 jnz     short loc_459E
.text:0000000000004599                 test    rdi, rdi
.text:000000000000459C                 jnz     short loc_45B8
.text:000000000000459E
.text:000000000000459E loc_459E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000459E                 mov     rsi, rbx        ; size
.text:00000000000045A1                 call    _realloc
.text:00000000000045A6                 test    rax, rax
.text:00000000000045A9                 jnz     short loc_45B0
.text:00000000000045AB                 test    rbx, rbx
.text:00000000000045AE                 jnz     short loc_45C1
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000045B0                 pop     rbx
.text:00000000000045B1                 retn
.text:00000000000045B1 ; ---------------------------------------------------------------------------
.text:00000000000045B2                 align 8
.text:00000000000045B8
.text:00000000000045B8 loc_45B8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000045B8                 call    _free
.text:00000000000045BD                 xor     eax, eax
.text:00000000000045BF                 pop     rbx
.text:00000000000045C0                 retn
.text:00000000000045C1 ; ---------------------------------------------------------------------------
.text:00000000000045C1
.text:00000000000045C1 loc_45C1:                               ; CODE XREF: xrealloc+1E↑j
.text:00000000000045C1                 call    xalloc_die
.text:00000000000045C1 ; } // starts at 4590
.text:00000000000045C1 xrealloc        endp
.text:00000000000045C1
.text:00000000000045C1 ; ---------------------------------------------------------------------------
.text:00000000000045C6                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0 ; Attributes: info_from_lumina
.text:00000000000045D0
.text:00000000000045D0 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:00000000000045D0                 public xnrealloc
.text:00000000000045D0 xnrealloc       proc near
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 mov     rax, rsi
.text:00000000000045D3                 mul     rdx
.text:00000000000045D6                 mov     rsi, rax
.text:00000000000045D9                 seto    al
.text:00000000000045DC                 test    rsi, rsi
.text:00000000000045DF                 js      short loc_45EB
.text:00000000000045E1                 movzx   eax, al
.text:00000000000045E4                 test    rax, rax
.text:00000000000045E7                 jnz     short loc_45EB
.text:00000000000045E9                 jmp     short xrealloc
.text:00000000000045EB ; ---------------------------------------------------------------------------
.text:00000000000045EB
.text:00000000000045EB loc_45EB:                               ; CODE XREF: xnrealloc+F↑j
.text:00000000000045EB                                         ; xnrealloc+17↑j
.text:00000000000045EB                 sub     rsp, 8
.text:00000000000045EF                 call    xalloc_die
.text:00000000000045EF ; } // starts at 45D0
.text:00000000000045EF xnrealloc       endp
.text:00000000000045EF
.text:00000000000045EF ; ---------------------------------------------------------------------------
.text:00000000000045F4                 align 20h
.text:0000000000004600
.text:0000000000004600 ; =============== S U B R O U T I N E =======================================
.text:0000000000004600
.text:0000000000004600 ; Attributes: info_from_lumina
.text:0000000000004600
.text:0000000000004600 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004600                 public x2nrealloc
.text:0000000000004600 x2nrealloc      proc near
.text:0000000000004600 ; __unwind {
.text:0000000000004600                 test    rdi, rdi
.text:0000000000004603                 mov     r9, rdx
.text:0000000000004606                 mov     rcx, [rsi]
.text:0000000000004609                 jz      short loc_4640
.text:000000000000460B                 xor     edx, edx
.text:000000000000460D                 mov     rax, 5555555555555554h
.text:0000000000004617                 div     r9
.text:000000000000461A                 cmp     rax, rcx
.text:000000000000461D                 jbe     short loc_465B
.text:000000000000461F                 mov     rax, rcx
.text:0000000000004622                 shr     rax, 1
.text:0000000000004625                 lea     rcx, [rax+rcx+1]
.text:000000000000462A
.text:000000000000462A loc_462A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000462A                 mov     [rsi], rcx
.text:000000000000462D                 imul    rcx, r9
.text:0000000000004631                 mov     rsi, rcx
.text:0000000000004634                 jmp     xrealloc
.text:0000000000004634 ; ---------------------------------------------------------------------------
.text:0000000000004639                 align 20h
.text:0000000000004640
.text:0000000000004640 loc_4640:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004640                 test    rcx, rcx
.text:0000000000004643                 jz      short loc_4668
.text:0000000000004645
.text:0000000000004645 loc_4645:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004645                 mov     rax, rcx
.text:0000000000004648                 mul     r9
.text:000000000000464B                 seto    dl
.text:000000000000464E                 test    rax, rax
.text:0000000000004651                 movzx   edx, dl
.text:0000000000004654                 js      short loc_465B
.text:0000000000004656                 test    rdx, rdx
.text:0000000000004659                 jz      short loc_462A
.text:000000000000465B
.text:000000000000465B loc_465B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000465B                                         ; x2nrealloc+54↑j
.text:000000000000465B                 sub     rsp, 8
.text:000000000000465F                 call    xalloc_die
.text:000000000000465F ; ---------------------------------------------------------------------------
.text:0000000000004664                 align 8
.text:0000000000004668
.text:0000000000004668 loc_4668:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004668                 xor     edx, edx
.text:000000000000466A                 mov     eax, 80h
.text:000000000000466F                 xor     r8d, r8d
.text:0000000000004672                 div     r9
.text:0000000000004675                 test    rax, rax
.text:0000000000004678                 setz    r8b
.text:000000000000467C                 lea     rcx, [r8+rax]
.text:0000000000004680                 jmp     short loc_4645
.text:0000000000004680 ; } // starts at 4600
.text:0000000000004680 x2nrealloc      endp
.text:0000000000004680
.text:0000000000004680 ; ---------------------------------------------------------------------------
.text:0000000000004682                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690 ; Attributes: info_from_lumina
.text:0000000000004690
.text:0000000000004690 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004690                 public x2realloc
.text:0000000000004690 x2realloc       proc near
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 test    rdi, rdi
.text:0000000000004693                 mov     rax, [rsi]
.text:0000000000004696                 jz      short loc_46C0
.text:0000000000004698                 mov     rdx, 5555555555555553h
.text:00000000000046A2                 cmp     rax, rdx
.text:00000000000046A5                 ja      short loc_46D1
.text:00000000000046A7                 mov     rdx, rax
.text:00000000000046AA                 shr     rdx, 1
.text:00000000000046AD                 lea     rax, [rdx+rax+1]
.text:00000000000046B2
.text:00000000000046B2 loc_46B2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000046B2                 mov     [rsi], rax
.text:00000000000046B5                 mov     rsi, rax
.text:00000000000046B8                 jmp     xrealloc
.text:00000000000046B8 ; ---------------------------------------------------------------------------
.text:00000000000046BD                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: x2realloc+6↑j
.text:00000000000046C0                 test    rax, rax
.text:00000000000046C3                 mov     edx, 80h
.text:00000000000046C8                 cmovz   rax, rdx
.text:00000000000046CC                 test    rax, rax
.text:00000000000046CF                 jns     short loc_46B2
.text:00000000000046D1
.text:00000000000046D1 loc_46D1:                               ; CODE XREF: x2realloc+15↑j
.text:00000000000046D1                 sub     rsp, 8
.text:00000000000046D5                 call    xalloc_die
.text:00000000000046D5 ; } // starts at 4690
.text:00000000000046D5 x2realloc       endp
.text:00000000000046D5
.text:00000000000046D5 ; ---------------------------------------------------------------------------
.text:00000000000046DA                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0
.text:00000000000046E0 ; __int64 __fastcall xzalloc(size_t n)
.text:00000000000046E0                 public xzalloc
.text:00000000000046E0 xzalloc         proc near
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 push    rbx
.text:00000000000046E1                 mov     rbx, rdi
.text:00000000000046E4                 call    xmalloc
.text:00000000000046E9                 mov     rdx, rbx        ; n
.text:00000000000046EC                 xor     esi, esi        ; c
.text:00000000000046EE                 mov     rdi, rax        ; s
.text:00000000000046F1                 pop     rbx
.text:00000000000046F2                 jmp     _memset
.text:00000000000046F2 ; } // starts at 46E0
.text:00000000000046F2 xzalloc         endp
.text:00000000000046F2
.text:00000000000046F2 ; ---------------------------------------------------------------------------
.text:00000000000046F7                 align 20h
.text:0000000000004700
.text:0000000000004700 ; =============== S U B R O U T I N E =======================================
.text:0000000000004700
.text:0000000000004700 ; Attributes: info_from_lumina
.text:0000000000004700
.text:0000000000004700 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004700                 public xcalloc
.text:0000000000004700 xcalloc         proc near
.text:0000000000004700 ; __unwind {
.text:0000000000004700                 mov     rax, rdi
.text:0000000000004703                 sub     rsp, 8
.text:0000000000004707                 mul     rsi
.text:000000000000470A                 seto    dl
.text:000000000000470D                 test    rax, rax
.text:0000000000004710                 js      short loc_4729
.text:0000000000004712                 movzx   edx, dl
.text:0000000000004715                 test    rdx, rdx
.text:0000000000004718                 jnz     short loc_4729
.text:000000000000471A                 call    _calloc
.text:000000000000471F                 test    rax, rax
.text:0000000000004722                 jz      short loc_4729
.text:0000000000004724                 add     rsp, 8
.text:0000000000004728                 retn
.text:0000000000004729 ; ---------------------------------------------------------------------------
.text:0000000000004729
.text:0000000000004729 loc_4729:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004729                                         ; xcalloc+18↑j ...
.text:0000000000004729                 call    xalloc_die
.text:0000000000004729 ; } // starts at 4700
.text:0000000000004729 xcalloc         endp
.text:0000000000004729
.text:0000000000004729 ; ---------------------------------------------------------------------------
.text:000000000000472E                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730 ; Attributes: info_from_lumina
.text:0000000000004730
.text:0000000000004730 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004730                 public xmemdup
.text:0000000000004730 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004730                                         ; xstrdup+11↓j
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 push    rbp
.text:0000000000004731                 push    rbx
.text:0000000000004732                 mov     rbp, rdi
.text:0000000000004735                 mov     rdi, rsi
.text:0000000000004738                 mov     rbx, rsi
.text:000000000000473B                 sub     rsp, 8
.text:000000000000473F                 call    xmalloc
.text:0000000000004744                 add     rsp, 8
.text:0000000000004748                 mov     rdx, rbx        ; n
.text:000000000000474B                 mov     rsi, rbp        ; src
.text:000000000000474E                 pop     rbx
.text:000000000000474F                 pop     rbp
.text:0000000000004750                 mov     rdi, rax        ; dest
.text:0000000000004753                 jmp     _memcpy
.text:0000000000004753 ; } // starts at 4730
.text:0000000000004753 xmemdup         endp
.text:0000000000004753
.text:0000000000004753 ; ---------------------------------------------------------------------------
.text:0000000000004758                 align 20h
.text:0000000000004760
.text:0000000000004760 ; =============== S U B R O U T I N E =======================================
.text:0000000000004760
.text:0000000000004760
.text:0000000000004760 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004760                 public xstrdup
.text:0000000000004760 xstrdup         proc near
.text:0000000000004760 ; __unwind {
.text:0000000000004760                 push    rbx
.text:0000000000004761                 mov     rbx, rdi
.text:0000000000004764                 call    _strlen
.text:0000000000004769                 mov     rdi, rbx        ; src
.text:000000000000476C                 lea     rsi, [rax+1]    ; n
.text:0000000000004770                 pop     rbx
.text:0000000000004771                 jmp     short xmemdup
.text:0000000000004771 ; } // starts at 4760
.text:0000000000004771 xstrdup         endp
.text:0000000000004771
.text:0000000000004771 ; ---------------------------------------------------------------------------
.text:0000000000004773                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780 ; Attributes: noreturn info_from_lumina
.text:0000000000004780
.text:0000000000004780 ; void __cdecl xalloc_die()
.text:0000000000004780                 public xalloc_die
.text:0000000000004780 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3756↑p
.text:0000000000004780                                         ; xmalloc:loc_4545↑p ...
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004787                 sub     rsp, 8
.text:000000000000478B                 mov     edx, 5          ; category
.text:0000000000004790                 xor     edi, edi        ; domainname
.text:0000000000004792                 call    _dcgettext
.text:0000000000004797                 mov     edi, cs:exit_failure ; status
.text:000000000000479D                 lea     rdx, format+4   ; format
.text:00000000000047A4                 mov     rcx, rax
.text:00000000000047A7                 xor     esi, esi        ; errnum
.text:00000000000047A9                 xor     eax, eax
.text:00000000000047AB                 call    _error
.text:00000000000047B0                 call    _abort
.text:00000000000047B0 ; } // starts at 4780
.text:00000000000047B0 xalloc_die      endp
.text:00000000000047B0
.text:00000000000047B0 ; ---------------------------------------------------------------------------
.text:00000000000047B5                 align 20h
.text:00000000000047C0
.text:00000000000047C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047C0
.text:00000000000047C0
.text:00000000000047C0                 public xgetgroups
.text:00000000000047C0 xgetgroups      proc near               ; CODE XREF: print_group_list+C7↑p
.text:00000000000047C0 ; __unwind {
.text:00000000000047C0                 push    rbx
.text:00000000000047C1                 call    mgetgroups
.text:00000000000047C6                 cmp     eax, 0FFFFFFFFh
.text:00000000000047C9                 mov     ebx, eax
.text:00000000000047CB                 jz      short loc_47D8
.text:00000000000047CD
.text:00000000000047CD loc_47CD:                               ; CODE XREF: xgetgroups+20↓j
.text:00000000000047CD                 mov     eax, ebx
.text:00000000000047CF                 pop     rbx
.text:00000000000047D0                 retn
.text:00000000000047D0 ; ---------------------------------------------------------------------------
.text:00000000000047D1                 align 8
.text:00000000000047D8
.text:00000000000047D8 loc_47D8:                               ; CODE XREF: xgetgroups+B↑j
.text:00000000000047D8                 call    ___errno_location
.text:00000000000047DD                 cmp     dword ptr [rax], 0Ch
.text:00000000000047E0                 jnz     short loc_47CD
.text:00000000000047E2                 call    xalloc_die
.text:00000000000047E2 ; } // starts at 47C0
.text:00000000000047E2 xgetgroups      endp
.text:00000000000047E2
.text:00000000000047E2 ; ---------------------------------------------------------------------------
.text:00000000000047E7                 align 10h
.text:00000000000047F0
.text:00000000000047F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000047F0
.text:00000000000047F0 ; Attributes: info_from_lumina
.text:00000000000047F0
.text:00000000000047F0 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:00000000000047F0                 public rpl_mbrtowc
.text:00000000000047F0 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:00000000000047F0
.text:00000000000047F0 pwc             = dword ptr -34h
.text:00000000000047F0 var_30          = qword ptr -30h
.text:00000000000047F0
.text:00000000000047F0 ; __unwind {
.text:00000000000047F0                 push    r13
.text:00000000000047F2                 push    r12
.text:00000000000047F4                 mov     r13, rsi
.text:00000000000047F7                 push    rbp
.text:00000000000047F8                 push    rbx
.text:00000000000047F9                 mov     rbx, rdi
.text:00000000000047FC                 mov     r12, rdx
.text:00000000000047FF                 sub     rsp, 18h
.text:0000000000004803                 mov     rax, fs:28h
.text:000000000000480C                 mov     [rsp+38h+var_30], rax
.text:0000000000004811                 xor     eax, eax
.text:0000000000004813                 lea     rax, [rsp+38h+pwc]
.text:0000000000004818                 test    rdi, rdi
.text:000000000000481B                 cmovz   rbx, rax
.text:000000000000481F                 mov     rdi, rbx        ; pwc
.text:0000000000004822                 call    _mbrtowc
.text:0000000000004827                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000482B                 mov     rbp, rax
.text:000000000000482E                 jbe     short loc_4850
.text:0000000000004830                 test    r12, r12
.text:0000000000004833                 jz      short loc_4850
.text:0000000000004835                 xor     edi, edi
.text:0000000000004837                 call    hard_locale
.text:000000000000483C                 test    al, al
.text:000000000000483E                 jnz     short loc_4850
.text:0000000000004840                 movzx   eax, byte ptr [r13+0]
.text:0000000000004845                 mov     ebp, 1
.text:000000000000484A                 mov     [rbx], eax
.text:000000000000484C                 nop     dword ptr [rax+00h]
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004850                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004850                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004855                 xor     rdx, fs:28h
.text:000000000000485E                 mov     rax, rbp
.text:0000000000004861                 jnz     short loc_486E
.text:0000000000004863                 add     rsp, 18h
.text:0000000000004867                 pop     rbx
.text:0000000000004868                 pop     rbp
.text:0000000000004869                 pop     r12
.text:000000000000486B                 pop     r13
.text:000000000000486D                 retn
.text:000000000000486E ; ---------------------------------------------------------------------------
.text:000000000000486E
.text:000000000000486E loc_486E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000486E                 call    ___stack_chk_fail
.text:000000000000486E ; } // starts at 47F0
.text:000000000000486E rpl_mbrtowc     endp
.text:000000000000486E
.text:000000000000486E ; ---------------------------------------------------------------------------
.text:0000000000004873                 align 20h
.text:0000000000004880
.text:0000000000004880 ; =============== S U B R O U T I N E =======================================
.text:0000000000004880
.text:0000000000004880 ; Attributes: info_from_lumina
.text:0000000000004880
.text:0000000000004880 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004880                 public close_stream
.text:0000000000004880 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004880                                         ; close_stdout+33↑p
.text:0000000000004880 ; __unwind {
.text:0000000000004880                 push    r12
.text:0000000000004882                 push    rbp
.text:0000000000004883                 mov     rbp, rdi
.text:0000000000004886                 push    rbx
.text:0000000000004887                 call    ___fpending
.text:000000000000488C                 mov     ebx, [rbp+0]
.text:000000000000488F                 mov     rdi, rbp        ; stream
.text:0000000000004892                 mov     r12, rax
.text:0000000000004895                 call    rpl_fclose
.text:000000000000489A                 and     ebx, 20h
.text:000000000000489D                 test    ebx, ebx
.text:000000000000489F                 jnz     short loc_48B8
.text:00000000000048A1                 test    eax, eax
.text:00000000000048A3                 jz      short loc_48AF
.text:00000000000048A5                 test    r12, r12
.text:00000000000048A8                 mov     eax, 0FFFFFFFFh
.text:00000000000048AD                 jz      short loc_48E8
.text:00000000000048AF
.text:00000000000048AF loc_48AF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000048AF                 pop     rbx
.text:00000000000048B0                 pop     rbp
.text:00000000000048B1                 pop     r12
.text:00000000000048B3                 retn
.text:00000000000048B3 ; ---------------------------------------------------------------------------
.text:00000000000048B4                 align 8
.text:00000000000048B8
.text:00000000000048B8 loc_48B8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000048B8                 test    eax, eax
.text:00000000000048BA                 jnz     short loc_48D8
.text:00000000000048BC                 call    ___errno_location
.text:00000000000048C1                 mov     dword ptr [rax], 0
.text:00000000000048C7                 mov     eax, 0FFFFFFFFh
.text:00000000000048CC                 pop     rbx
.text:00000000000048CD                 pop     rbp
.text:00000000000048CE                 pop     r12
.text:00000000000048D0                 retn
.text:00000000000048D0 ; ---------------------------------------------------------------------------
.text:00000000000048D1                 align 8
.text:00000000000048D8
.text:00000000000048D8 loc_48D8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000048D8                 pop     rbx
.text:00000000000048D9                 mov     eax, 0FFFFFFFFh
.text:00000000000048DE                 pop     rbp
.text:00000000000048DF                 pop     r12
.text:00000000000048E1                 retn
.text:00000000000048E1 ; ---------------------------------------------------------------------------
.text:00000000000048E2                 align 8
.text:00000000000048E8
.text:00000000000048E8 loc_48E8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000048E8                 call    ___errno_location
.text:00000000000048ED                 cmp     dword ptr [rax], 9
.text:00000000000048F0                 pop     rbx
.text:00000000000048F1                 pop     rbp
.text:00000000000048F2                 pop     r12
.text:00000000000048F4                 setnz   al
.text:00000000000048F7                 movzx   eax, al
.text:00000000000048FA                 neg     eax
.text:00000000000048FC                 retn
.text:00000000000048FC ; } // starts at 4880
.text:00000000000048FC close_stream    endp
.text:00000000000048FC
.text:00000000000048FC ; ---------------------------------------------------------------------------
.text:00000000000048FD                 align 20h
.text:0000000000004900
.text:0000000000004900 ; =============== S U B R O U T I N E =======================================
.text:0000000000004900
.text:0000000000004900
.text:0000000000004900                 public hard_locale
.text:0000000000004900 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004900 ; __unwind {
.text:0000000000004900                 sub     rsp, 8
.text:0000000000004904                 xor     esi, esi        ; locale
.text:0000000000004906                 call    _setlocale
.text:000000000000490B                 mov     rdx, rax
.text:000000000000490E                 mov     eax, 1
.text:0000000000004913                 test    rdx, rdx
.text:0000000000004916                 jz      short loc_4935
.text:0000000000004918                 lea     rdi, aC         ; "C"
.text:000000000000491F                 mov     ecx, 2
.text:0000000000004924                 mov     rsi, rdx
.text:0000000000004927                 repe cmpsb
.text:0000000000004929                 setnbe  cl
.text:000000000000492C                 sbb     cl, 0
.text:000000000000492F                 xor     eax, eax
.text:0000000000004931                 test    cl, cl
.text:0000000000004933                 jnz     short loc_4940
.text:0000000000004935
.text:0000000000004935 loc_4935:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004935                 add     rsp, 8
.text:0000000000004939                 retn
.text:0000000000004939 ; ---------------------------------------------------------------------------
.text:000000000000493A                 align 20h
.text:0000000000004940
.text:0000000000004940 loc_4940:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004940                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004947                 mov     ecx, 6
.text:000000000000494C                 mov     rsi, rdx
.text:000000000000494F                 repe cmpsb
.text:0000000000004951                 setnbe  al
.text:0000000000004954                 sbb     al, 0
.text:0000000000004956                 test    al, al
.text:0000000000004958                 setnz   al
.text:000000000000495B                 add     rsp, 8
.text:000000000000495F                 retn
.text:000000000000495F ; } // starts at 4900
.text:000000000000495F hard_locale     endp
.text:000000000000495F
.text:0000000000004960
.text:0000000000004960 ; =============== S U B R O U T I N E =======================================
.text:0000000000004960
.text:0000000000004960
.text:0000000000004960                 public locale_charset
.text:0000000000004960 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004960 ; __unwind {
.text:0000000000004960                 sub     rsp, 8
.text:0000000000004964                 mov     edi, 0Eh        ; item
.text:0000000000004969                 call    _nl_langinfo
.text:000000000000496E                 test    rax, rax
.text:0000000000004971                 jz      short loc_4990
.text:0000000000004973                 cmp     byte ptr [rax], 0
.text:0000000000004976                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000497D                 cmovz   rax, rdx
.text:0000000000004981                 add     rsp, 8
.text:0000000000004985                 retn
.text:0000000000004985 ; ---------------------------------------------------------------------------
.text:0000000000004986                 align 10h
.text:0000000000004990
.text:0000000000004990 loc_4990:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004990                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004997                 add     rsp, 8
.text:000000000000499B                 retn
.text:000000000000499B ; } // starts at 4960
.text:000000000000499B locale_charset  endp
.text:000000000000499B
.text:000000000000499B ; ---------------------------------------------------------------------------
.text:000000000000499C                 align 20h
.text:00000000000049A0
.text:00000000000049A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049A0
.text:00000000000049A0
.text:00000000000049A0 realloc_groupbuf proc near              ; CODE XREF: mgetgroups+3F↓p
.text:00000000000049A0                                         ; mgetgroups+77↓p ...
.text:00000000000049A0 ; __unwind {
.text:00000000000049A0                 mov     edx, 4
.text:00000000000049A5                 mov     rax, rdx
.text:00000000000049A8                 mul     rsi
.text:00000000000049AB                 jo      short loc_49DE
.text:00000000000049AD                 xor     ecx, ecx
.text:00000000000049AF
.text:00000000000049AF loc_49AF:                               ; CODE XREF: realloc_groupbuf+43↓j
.text:00000000000049AF                 test    rax, rax
.text:00000000000049B2                 js      short loc_49C8
.text:00000000000049B4                 test    rcx, rcx
.text:00000000000049B7                 jnz     short loc_49C8
.text:00000000000049B9                 shl     rsi, 2          ; size
.text:00000000000049BD                 jmp     _realloc
.text:00000000000049BD ; ---------------------------------------------------------------------------
.text:00000000000049C2                 align 8
.text:00000000000049C8
.text:00000000000049C8 loc_49C8:                               ; CODE XREF: realloc_groupbuf+12↑j
.text:00000000000049C8                                         ; realloc_groupbuf+17↑j
.text:00000000000049C8                 sub     rsp, 8
.text:00000000000049CC                 call    ___errno_location
.text:00000000000049D1                 mov     dword ptr [rax], 0Ch
.text:00000000000049D7                 xor     eax, eax
.text:00000000000049D9                 add     rsp, 8
.text:00000000000049DD                 retn
.text:00000000000049DE ; ---------------------------------------------------------------------------
.text:00000000000049DE
.text:00000000000049DE loc_49DE:                               ; CODE XREF: realloc_groupbuf+B↑j
.text:00000000000049DE                 mov     ecx, 1
.text:00000000000049E3                 jmp     short loc_49AF
.text:00000000000049E3 ; } // starts at 49A0
.text:00000000000049E3 realloc_groupbuf endp
.text:00000000000049E3
.text:00000000000049E3 ; ---------------------------------------------------------------------------
.text:00000000000049E5                 align 10h
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0 ; Attributes: info_from_lumina
.text:00000000000049F0
.text:00000000000049F0 ; __int64 __fastcall mgetgroups(char *user, __gid_t group)
.text:00000000000049F0                 public mgetgroups
.text:00000000000049F0 mgetgroups      proc near               ; CODE XREF: xgetgroups+1↑p
.text:00000000000049F0
.text:00000000000049F0 ngroups         = dword ptr -44h
.text:00000000000049F0 var_40          = qword ptr -40h
.text:00000000000049F0
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 push    r15
.text:00000000000049F2                 push    r14
.text:00000000000049F4                 mov     r15, rdx
.text:00000000000049F7                 push    r13
.text:00000000000049F9                 push    r12
.text:00000000000049FB                 mov     r13d, esi
.text:00000000000049FE                 push    rbp
.text:00000000000049FF                 push    rbx
.text:0000000000004A00                 sub     rsp, 18h
.text:0000000000004A04                 mov     rax, fs:28h
.text:0000000000004A0D                 mov     [rsp+48h+var_40], rax
.text:0000000000004A12                 xor     eax, eax
.text:0000000000004A14                 test    rdi, rdi
.text:0000000000004A17                 jz      loc_4AE8
.text:0000000000004A1D                 mov     rbp, rdi
.text:0000000000004A20                 mov     esi, 0Ah
.text:0000000000004A25                 xor     edi, edi
.text:0000000000004A27                 mov     [rsp+48h+ngroups], 0Ah
.text:0000000000004A2F                 call    realloc_groupbuf
.text:0000000000004A34                 test    rax, rax
.text:0000000000004A37                 mov     rbx, rax
.text:0000000000004A3A                 jz      loc_4C08
.text:0000000000004A40                 lea     r14, [rsp+48h+ngroups]
.text:0000000000004A45
.text:0000000000004A45 loc_4A45:                               ; CODE XREF: mgetgroups+DE↓j
.text:0000000000004A45                 mov     esi, r13d       ; group
.text:0000000000004A48                 mov     rcx, r14        ; ngroups
.text:0000000000004A4B                 mov     rdx, rbx        ; groups
.text:0000000000004A4E                 mov     rdi, rbp        ; user
.text:0000000000004A51                 mov     r12d, [rsp+48h+ngroups]
.text:0000000000004A56                 call    _getgrouplist
.text:0000000000004A5B                 test    eax, eax
.text:0000000000004A5D                 movsxd  rsi, [rsp+48h+ngroups]
.text:0000000000004A62                 js      short loc_4AB0
.text:0000000000004A64                 mov     rdi, rbx
.text:0000000000004A67                 call    realloc_groupbuf
.text:0000000000004A6C                 test    rax, rax
.text:0000000000004A6F                 jnz     short loc_4AD8
.text:0000000000004A71
.text:0000000000004A71 loc_4A71:                               ; CODE XREF: mgetgroups+D9↓j
.text:0000000000004A71                                         ; mgetgroups+15E↓j ...
.text:0000000000004A71                 call    ___errno_location
.text:0000000000004A76                 mov     r12d, [rax]
.text:0000000000004A79                 mov     rbp, rax
.text:0000000000004A7C                 mov     rdi, rbx        ; ptr
.text:0000000000004A7F                 call    _free
.text:0000000000004A84                 mov     eax, 0FFFFFFFFh
.text:0000000000004A89                 mov     [rbp+0], r12d
.text:0000000000004A8D
.text:0000000000004A8D loc_4A8D:                               ; CODE XREF: mgetgroups+EF↓j
.text:0000000000004A8D                                         ; mgetgroups+170↓j ...
.text:0000000000004A8D                 mov     rcx, [rsp+48h+var_40]
.text:0000000000004A92                 xor     rcx, fs:28h
.text:0000000000004A9B                 jnz     loc_4C27
.text:0000000000004AA1                 add     rsp, 18h
.text:0000000000004AA5                 pop     rbx
.text:0000000000004AA6                 pop     rbp
.text:0000000000004AA7                 pop     r12
.text:0000000000004AA9                 pop     r13
.text:0000000000004AAB                 pop     r14
.text:0000000000004AAD                 pop     r15
.text:0000000000004AAF                 retn
.text:0000000000004AB0 ; ---------------------------------------------------------------------------
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: mgetgroups+72↑j
.text:0000000000004AB0                 cmp     esi, r12d
.text:0000000000004AB3                 jnz     short loc_4ABE
.text:0000000000004AB5                 add     esi, esi
.text:0000000000004AB7                 mov     [rsp+48h+ngroups], esi
.text:0000000000004ABB                 movsxd  rsi, esi
.text:0000000000004ABE
.text:0000000000004ABE loc_4ABE:                               ; CODE XREF: mgetgroups+C3↑j
.text:0000000000004ABE                 mov     rdi, rbx
.text:0000000000004AC1                 call    realloc_groupbuf
.text:0000000000004AC6                 test    rax, rax
.text:0000000000004AC9                 jz      short loc_4A71
.text:0000000000004ACB                 mov     rbx, rax
.text:0000000000004ACE                 jmp     loc_4A45
.text:0000000000004ACE ; ---------------------------------------------------------------------------
.text:0000000000004AD3                 align 8
.text:0000000000004AD8
.text:0000000000004AD8 loc_4AD8:                               ; CODE XREF: mgetgroups+7F↑j
.text:0000000000004AD8                 mov     [r15], rax
.text:0000000000004ADB                 mov     eax, [rsp+48h+ngroups]
.text:0000000000004ADF                 jmp     short loc_4A8D
.text:0000000000004ADF ; ---------------------------------------------------------------------------
.text:0000000000004AE1                 align 8
.text:0000000000004AE8
.text:0000000000004AE8 loc_4AE8:                               ; CODE XREF: mgetgroups+27↑j
.text:0000000000004AE8                 xor     esi, esi        ; list
.text:0000000000004AEA                 xor     edi, edi        ; size
.text:0000000000004AEC                 call    _getgroups
.text:0000000000004AF1                 test    eax, eax
.text:0000000000004AF3                 mov     [rsp+48h+ngroups], eax
.text:0000000000004AF7                 js      loc_4BA8
.text:0000000000004AFD                 cmp     r13d, 0FFFFFFFFh
.text:0000000000004B01                 setnz   bpl
.text:0000000000004B05                 test    eax, eax
.text:0000000000004B07                 jz      short loc_4B12
.text:0000000000004B09                 test    bpl, bpl
.text:0000000000004B0C                 jz      loc_4BD7
.text:0000000000004B12
.text:0000000000004B12 loc_4B12:                               ; CODE XREF: mgetgroups+117↑j
.text:0000000000004B12                 add     eax, 1
.text:0000000000004B15                 xor     edi, edi
.text:0000000000004B17                 movsxd  rsi, eax
.text:0000000000004B1A                 mov     [rsp+48h+ngroups], eax
.text:0000000000004B1E                 call    realloc_groupbuf
.text:0000000000004B23                 test    rax, rax
.text:0000000000004B26                 mov     rbx, rax
.text:0000000000004B29                 jz      loc_4C08
.text:0000000000004B2F                 mov     edi, [rsp+48h+ngroups]
.text:0000000000004B33                 movzx   ebp, bpl
.text:0000000000004B37                 sub     edi, ebp        ; size
.text:0000000000004B39                 cmp     r13d, 0FFFFFFFFh
.text:0000000000004B3D                 jz      loc_4C12
.text:0000000000004B43                 lea     rsi, [rax+4]    ; list
.text:0000000000004B47                 call    _getgroups
.text:0000000000004B4C                 test    eax, eax
.text:0000000000004B4E                 js      loc_4A71
.text:0000000000004B54                 mov     [rbx], r13d
.text:0000000000004B57                 add     eax, 1
.text:0000000000004B5A
.text:0000000000004B5A loc_4B5A:                               ; CODE XREF: mgetgroups+207↓j
.text:0000000000004B5A                                         ; mgetgroups+22C↓j
.text:0000000000004B5A                 cmp     eax, 1
.text:0000000000004B5D                 mov     [r15], rbx
.text:0000000000004B60                 jle     loc_4A8D
.text:0000000000004B66                 movsxd  rdx, eax
.text:0000000000004B69                 mov     edi, [rbx]
.text:0000000000004B6B                 lea     rsi, [rbx+rdx*4]
.text:0000000000004B6F                 lea     rdx, [rbx+4]
.text:0000000000004B73                 cmp     rsi, rdx
.text:0000000000004B76                 ja      short loc_4B98
.text:0000000000004B78                 jmp     loc_4A8D
.text:0000000000004B78 ; ---------------------------------------------------------------------------
.text:0000000000004B7D                 align 20h
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: mgetgroups+1AC↓j
.text:0000000000004B80                 cmp     ecx, [rbx]
.text:0000000000004B82                 jz      short loc_4B9E
.text:0000000000004B84                 mov     [rbx+4], ecx
.text:0000000000004B87                 add     rbx, 4
.text:0000000000004B8B
.text:0000000000004B8B loc_4B8B:                               ; CODE XREF: mgetgroups+1B1↓j
.text:0000000000004B8B                 add     rdx, 4
.text:0000000000004B8F                 cmp     rsi, rdx
.text:0000000000004B92                 jbe     loc_4A8D
.text:0000000000004B98
.text:0000000000004B98 loc_4B98:                               ; CODE XREF: mgetgroups+186↑j
.text:0000000000004B98                 mov     ecx, [rdx]
.text:0000000000004B9A                 cmp     ecx, edi
.text:0000000000004B9C                 jnz     short loc_4B80
.text:0000000000004B9E
.text:0000000000004B9E loc_4B9E:                               ; CODE XREF: mgetgroups+192↑j
.text:0000000000004B9E                 sub     eax, 1
.text:0000000000004BA1                 jmp     short loc_4B8B
.text:0000000000004BA1 ; ---------------------------------------------------------------------------
.text:0000000000004BA3                 align 8
.text:0000000000004BA8
.text:0000000000004BA8 loc_4BA8:                               ; CODE XREF: mgetgroups+107↑j
.text:0000000000004BA8                 call    ___errno_location
.text:0000000000004BAD                 cmp     dword ptr [rax], 26h ; '&'
.text:0000000000004BB0                 jnz     short loc_4C08
.text:0000000000004BB2                 xor     edi, edi        ; ptr
.text:0000000000004BB4                 mov     esi, 4          ; size
.text:0000000000004BB9                 call    _realloc
.text:0000000000004BBE                 test    rax, rax
.text:0000000000004BC1                 jz      short loc_4C08
.text:0000000000004BC3                 mov     [r15], rax
.text:0000000000004BC6                 mov     [rax], r13d
.text:0000000000004BC9                 xor     eax, eax
.text:0000000000004BCB                 cmp     r13d, 0FFFFFFFFh
.text:0000000000004BCF                 setnz   al
.text:0000000000004BD2                 jmp     loc_4A8D
.text:0000000000004BD7 ; ---------------------------------------------------------------------------
.text:0000000000004BD7
.text:0000000000004BD7 loc_4BD7:                               ; CODE XREF: mgetgroups+11C↑j
.text:0000000000004BD7                 xor     edi, edi
.text:0000000000004BD9                 movsxd  rsi, eax
.text:0000000000004BDC                 call    realloc_groupbuf
.text:0000000000004BE1                 test    rax, rax
.text:0000000000004BE4                 mov     rbx, rax
.text:0000000000004BE7                 jz      short loc_4C08
.text:0000000000004BE9                 mov     edi, [rsp+48h+ngroups] ; size
.text:0000000000004BED                 mov     rsi, rbx        ; list
.text:0000000000004BF0                 call    _getgroups
.text:0000000000004BF5                 test    eax, eax
.text:0000000000004BF7                 jns     loc_4B5A
.text:0000000000004BFD                 jmp     loc_4A71
.text:0000000000004BFD ; ---------------------------------------------------------------------------
.text:0000000000004C02                 align 8
.text:0000000000004C08
.text:0000000000004C08 loc_4C08:                               ; CODE XREF: mgetgroups+4A↑j
.text:0000000000004C08                                         ; mgetgroups+139↑j ...
.text:0000000000004C08                 mov     eax, 0FFFFFFFFh
.text:0000000000004C0D                 jmp     loc_4A8D
.text:0000000000004C12 ; ---------------------------------------------------------------------------
.text:0000000000004C12
.text:0000000000004C12 loc_4C12:                               ; CODE XREF: mgetgroups+14D↑j
.text:0000000000004C12                 mov     rsi, rax        ; list
.text:0000000000004C15                 call    _getgroups
.text:0000000000004C1A                 test    eax, eax
.text:0000000000004C1C                 jns     loc_4B5A
.text:0000000000004C22                 jmp     loc_4A71
.text:0000000000004C27 ; ---------------------------------------------------------------------------
.text:0000000000004C27
.text:0000000000004C27 loc_4C27:                               ; CODE XREF: mgetgroups+AB↑j
.text:0000000000004C27                 call    ___stack_chk_fail
.text:0000000000004C27 ; } // starts at 49F0
.text:0000000000004C27 mgetgroups      endp
.text:0000000000004C27
.text:0000000000004C27 ; ---------------------------------------------------------------------------
.text:0000000000004C2C                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30 ; Attributes: info_from_lumina
.text:0000000000004C30
.text:0000000000004C30 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004C30                 public rpl_fclose
.text:0000000000004C30 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 push    r12
.text:0000000000004C32                 push    rbp
.text:0000000000004C33                 push    rbx
.text:0000000000004C34                 mov     rbx, rdi
.text:0000000000004C37                 call    _fileno
.text:0000000000004C3C                 test    eax, eax
.text:0000000000004C3E                 mov     rdi, rbx        ; fp
.text:0000000000004C41                 js      short loc_4C97
.text:0000000000004C43                 call    ___freading
.text:0000000000004C48                 test    eax, eax
.text:0000000000004C4A                 jnz     short loc_4C78
.text:0000000000004C4C
.text:0000000000004C4C loc_4C4C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004C4C                 mov     rdi, rbx        ; stream
.text:0000000000004C4F                 call    rpl_fflush
.text:0000000000004C54                 test    eax, eax
.text:0000000000004C56                 jz      short loc_4C94
.text:0000000000004C58                 call    ___errno_location
.text:0000000000004C5D                 mov     r12d, [rax]
.text:0000000000004C60                 mov     rdi, rbx        ; stream
.text:0000000000004C63                 mov     rbp, rax
.text:0000000000004C66                 call    _fclose
.text:0000000000004C6B                 test    r12d, r12d
.text:0000000000004C6E                 jnz     short loc_4CA0
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004C70                 pop     rbx
.text:0000000000004C71                 pop     rbp
.text:0000000000004C72                 pop     r12
.text:0000000000004C74                 retn
.text:0000000000004C74 ; ---------------------------------------------------------------------------
.text:0000000000004C75                 align 8
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004C78                 mov     rdi, rbx        ; stream
.text:0000000000004C7B                 call    _fileno
.text:0000000000004C80                 xor     esi, esi        ; offset
.text:0000000000004C82                 mov     edx, 1          ; whence
.text:0000000000004C87                 mov     edi, eax        ; fd
.text:0000000000004C89                 call    _lseek
.text:0000000000004C8E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C92                 jnz     short loc_4C4C
.text:0000000000004C94
.text:0000000000004C94 loc_4C94:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004C94                 mov     rdi, rbx        ; stream
.text:0000000000004C97
.text:0000000000004C97 loc_4C97:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004C97                 pop     rbx
.text:0000000000004C98                 pop     rbp
.text:0000000000004C99                 pop     r12
.text:0000000000004C9B                 jmp     _fclose
.text:0000000000004CA0 ; ---------------------------------------------------------------------------
.text:0000000000004CA0
.text:0000000000004CA0 loc_4CA0:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004CA0                 mov     [rbp+0], r12d
.text:0000000000004CA4                 mov     eax, 0FFFFFFFFh
.text:0000000000004CA9                 jmp     short loc_4C70
.text:0000000000004CA9 ; } // starts at 4C30
.text:0000000000004CA9 rpl_fclose      endp
.text:0000000000004CA9
.text:0000000000004CA9 ; ---------------------------------------------------------------------------
.text:0000000000004CAB                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0 ; Attributes: info_from_lumina
.text:0000000000004CB0
.text:0000000000004CB0 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004CB0                 public rpl_fflush
.text:0000000000004CB0 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 test    rdi, rdi
.text:0000000000004CB3                 push    rbx
.text:0000000000004CB4                 mov     rbx, rdi
.text:0000000000004CB7                 jz      short loc_4CCA
.text:0000000000004CB9                 call    ___freading
.text:0000000000004CBE                 test    eax, eax
.text:0000000000004CC0                 jz      short loc_4CCA
.text:0000000000004CC2                 test    dword ptr [rbx], 100h
.text:0000000000004CC8                 jnz     short loc_4CD8
.text:0000000000004CCA
.text:0000000000004CCA loc_4CCA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004CCA                                         ; rpl_fflush+10↑j
.text:0000000000004CCA                 mov     rdi, rbx        ; stream
.text:0000000000004CCD                 pop     rbx
.text:0000000000004CCE                 jmp     _fflush
.text:0000000000004CCE ; ---------------------------------------------------------------------------
.text:0000000000004CD3                 align 8
.text:0000000000004CD8
.text:0000000000004CD8 loc_4CD8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004CD8                 mov     rdi, rbx
.text:0000000000004CDB                 mov     edx, 1
.text:0000000000004CE0                 xor     esi, esi
.text:0000000000004CE2                 call    rpl_fseeko
.text:0000000000004CE7                 mov     rdi, rbx        ; stream
.text:0000000000004CEA                 pop     rbx
.text:0000000000004CEB                 jmp     _fflush
.text:0000000000004CEB ; } // starts at 4CB0
.text:0000000000004CEB rpl_fflush      endp
.text:0000000000004CEB
.text:0000000000004CF0
.text:0000000000004CF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CF0
.text:0000000000004CF0 ; Attributes: info_from_lumina
.text:0000000000004CF0
.text:0000000000004CF0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004CF0                 public rpl_fseeko
.text:0000000000004CF0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004CF0 ; __unwind {
.text:0000000000004CF0                 mov     rax, [rdi+8]
.text:0000000000004CF4                 cmp     [rdi+10h], rax
.text:0000000000004CF8                 jz      short loc_4D00
.text:0000000000004CFA
.text:0000000000004CFA loc_4CFA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004CFA                                         ; rpl_fseeko+1F↓j
.text:0000000000004CFA                 jmp     _fseeko
.text:0000000000004CFA ; ---------------------------------------------------------------------------
.text:0000000000004CFF                 align 20h
.text:0000000000004D00
.text:0000000000004D00 loc_4D00:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004D00                 mov     rax, [rdi+20h]
.text:0000000000004D04                 cmp     [rdi+28h], rax
.text:0000000000004D08                 jnz     short loc_4CFA
.text:0000000000004D0A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004D0F                 jnz     short loc_4CFA
.text:0000000000004D11                 push    r12
.text:0000000000004D13                 push    rbp
.text:0000000000004D14                 mov     r12d, edx
.text:0000000000004D17                 push    rbx
.text:0000000000004D18                 mov     rbp, rsi
.text:0000000000004D1B                 mov     rbx, rdi
.text:0000000000004D1E                 call    _fileno
.text:0000000000004D23                 mov     edx, r12d       ; whence
.text:0000000000004D26                 mov     rsi, rbp        ; offset
.text:0000000000004D29                 mov     edi, eax        ; fd
.text:0000000000004D2B                 call    _lseek
.text:0000000000004D30                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004D34                 jz      short loc_4D42
.text:0000000000004D36                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004D39                 mov     [rbx+90h], rax
.text:0000000000004D40                 xor     eax, eax
.text:0000000000004D42
.text:0000000000004D42 loc_4D42:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004D42                 pop     rbx
.text:0000000000004D43                 pop     rbp
.text:0000000000004D44                 pop     r12
.text:0000000000004D46                 retn
.text:0000000000004D46 ; } // starts at 4CF0
.text:0000000000004D46 rpl_fseeko      endp
.text:0000000000004D46
.text:0000000000004D46 ; ---------------------------------------------------------------------------
.text:0000000000004D47                 align 10h
.text:0000000000004D50
.text:0000000000004D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D50
.text:0000000000004D50 ; Attributes: info_from_lumina
.text:0000000000004D50
.text:0000000000004D50 ; void _libc_csu_init(void)
.text:0000000000004D50                 public __libc_csu_init
.text:0000000000004D50 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004D50 ; __unwind {
.text:0000000000004D50                 push    r15
.text:0000000000004D52                 push    r14
.text:0000000000004D54                 mov     r15, rdx
.text:0000000000004D57                 push    r13
.text:0000000000004D59                 push    r12
.text:0000000000004D5B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004D62                 push    rbp
.text:0000000000004D63                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004D6A                 push    rbx
.text:0000000000004D6B                 mov     r13d, edi
.text:0000000000004D6E                 mov     r14, rsi
.text:0000000000004D71                 sub     rbp, r12
.text:0000000000004D74                 sub     rsp, 8
.text:0000000000004D78                 sar     rbp, 3
.text:0000000000004D7C                 call    _init_proc
.text:0000000000004D81                 test    rbp, rbp
.text:0000000000004D84                 jz      short loc_4DA6
.text:0000000000004D86                 xor     ebx, ebx
.text:0000000000004D88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004D90
.text:0000000000004D90 loc_4D90:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004D90                 mov     rdx, r15
.text:0000000000004D93                 mov     rsi, r14
.text:0000000000004D96                 mov     edi, r13d
.text:0000000000004D99                 call    ds:(__frame_dummy_init_array_entry - 206B70h)[r12+rbx*8]
.text:0000000000004D9D                 add     rbx, 1
.text:0000000000004DA1                 cmp     rbp, rbx
.text:0000000000004DA4                 jnz     short loc_4D90
.text:0000000000004DA6
.text:0000000000004DA6 loc_4DA6:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004DA6                 add     rsp, 8
.text:0000000000004DAA                 pop     rbx
.text:0000000000004DAB                 pop     rbp
.text:0000000000004DAC                 pop     r12
.text:0000000000004DAE                 pop     r13
.text:0000000000004DB0                 pop     r14
.text:0000000000004DB2                 pop     r15
.text:0000000000004DB4                 retn
.text:0000000000004DB4 ; } // starts at 4D50
.text:0000000000004DB4 __libc_csu_init endp
.text:0000000000004DB4
.text:0000000000004DB4 ; ---------------------------------------------------------------------------
.text:0000000000004DB5                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DC0
.text:0000000000004DC0
.text:0000000000004DC0 ; void _libc_csu_fini(void)
.text:0000000000004DC0                 public __libc_csu_fini
.text:0000000000004DC0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004DC0 ; __unwind {
.text:0000000000004DC0                 rep retn
.text:0000000000004DC0 ; } // starts at 4DC0
.text:0000000000004DC0 __libc_csu_fini endp
.text:0000000000004DC0
.text:0000000000004DC0 ; ---------------------------------------------------------------------------
.text:0000000000004DC2                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DD0
.text:0000000000004DD0
.text:0000000000004DD0 atexit          proc near               ; CODE XREF: main+53↑p
.text:0000000000004DD0 ; __unwind {
.text:0000000000004DD0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004DD7                 xor     esi, esi        ; obj
.text:0000000000004DD9                 jmp     ___cxa_atexit
.text:0000000000004DD9 ; } // starts at 4DD0
.text:0000000000004DD9 atexit          endp
.text:0000000000004DD9
.text:0000000000004DD9 _text           ends
.text:0000000000004DD9
LOAD:0000000000004DDE ; ===========================================================================
LOAD:0000000000004DDE
LOAD:0000000000004DDE ; Segment type: Pure code
LOAD:0000000000004DDE ; Segment permissions: Read/Execute
LOAD:0000000000004DDE LOAD            segment byte public 'CODE' use64
LOAD:0000000000004DDE                 assume cs:LOAD
LOAD:0000000000004DDE                 ;org 4DDEh
LOAD:0000000000004DDE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004DDE                 align 20h
LOAD:0000000000004DDE LOAD            ends
LOAD:0000000000004DDE
.fini:0000000000004DE0 ; ===========================================================================
.fini:0000000000004DE0
.fini:0000000000004DE0 ; Segment type: Pure code
.fini:0000000000004DE0 ; Segment permissions: Read/Execute
.fini:0000000000004DE0 _fini           segment dword public 'CODE' use64
.fini:0000000000004DE0                 assume cs:_fini
.fini:0000000000004DE0                 ;org 4DE0h
.fini:0000000000004DE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004DE0
.fini:0000000000004DE0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004DE0
.fini:0000000000004DE0
.fini:0000000000004DE0                 public _term_proc
.fini:0000000000004DE0 _term_proc      proc near
.fini:0000000000004DE0                 sub     rsp, 8          ; _fini
.fini:0000000000004DE4                 add     rsp, 8
.fini:0000000000004DE8                 retn
.fini:0000000000004DE8 _term_proc      endp
.fini:0000000000004DE8
.fini:0000000000004DE8 _fini           ends
.fini:0000000000004DE8
LOAD:0000000000004DE9 ; ===========================================================================
LOAD:0000000000004DE9
LOAD:0000000000004DE9 ; Segment type: Pure code
LOAD:0000000000004DE9 ; Segment permissions: Read/Execute
LOAD:0000000000004DE9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004DE9                 assume cs:LOAD
LOAD:0000000000004DE9                 ;org 4DE9h
LOAD:0000000000004DE9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004DE9                 align 20h
LOAD:0000000000004DE9 LOAD            ends
LOAD:0000000000004DE9
.rodata:0000000000004E00 ; ===========================================================================
.rodata:0000000000004E00
.rodata:0000000000004E00 ; Segment type: Pure data
.rodata:0000000000004E00 ; Segment permissions: Read
.rodata:0000000000004E00 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004E00                 assume cs:_rodata
.rodata:0000000000004E00                 ;org 4E00h
.rodata:0000000000004E00                 public _IO_stdin_used
.rodata:0000000000004E00 _IO_stdin_used  db    1
.rodata:0000000000004E01                 db    0
.rodata:0000000000004E02                 db    2
.rodata:0000000000004E03                 db    0
.rodata:0000000000004E04 aGroups         db 'groups',0           ; DATA XREF: main+AD↑o
.rodata:0000000000004E04                                         ; usage+E7↑o ...
.rodata:0000000000004E0B asc_4E0B        db '[',0                ; DATA XREF: usage+F3↑o
.rodata:0000000000004E0D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+11A↑o
.rodata:0000000000004E1D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004E1D                                         ; DATA XREF: usage+14A↑o
.rodata:0000000000004E1D                                         ; usage+244↑o ...
.rodata:0000000000004E33 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+15B↑o
.rodata:0000000000004E3D aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+167↑o
.rodata:0000000000004E4C aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+FA↑o
.rodata:0000000000004E56 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+126↑o
.rodata:0000000000004E60 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+13E↑o
.rodata:0000000000004E6A ; const char aSOnlineHelpS[]
.rodata:0000000000004E6A aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1B2↑o
.rodata:0000000000004E6A                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004E81 unk_4E81        db  47h ; G             ; DATA XREF: main+A6↑o
.rodata:0000000000004E81                                         ; usage+1CE↑o ...
.rodata:0000000000004E82                 db  4Eh ; N
.rodata:0000000000004E83                 db  55h ; U
.rodata:0000000000004E84                 db  20h
.rodata:0000000000004E85 ; const char domainname[]
.rodata:0000000000004E85 domainname      db 'coreutils',0        ; DATA XREF: main+34↑o
.rodata:0000000000004E85                                         ; main+40↑o ...
.rodata:0000000000004E8F ; const char s2[]
.rodata:0000000000004E8F s2              db 'en_',0              ; DATA XREF: usage+1F5↑o
.rodata:0000000000004E8F                                         ; usage+2B6↑o
.rodata:0000000000004E93 ; const char aFullDocumentat[]
.rodata:0000000000004E93 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004E93                                         ; DATA XREF: usage:loc_1CD1↑o
.rodata:0000000000004E93                                         ; usage:loc_1D8E↑o
.rodata:0000000000004EAE ; const char dirname[]
.rodata:0000000000004EAE dirname         db '/usr/local/share/locale',0
.rodata:0000000000004EAE                                         ; DATA XREF: main+2D↑o
.rodata:0000000000004EC6 aJamesYoungman  db 'James Youngman',0   ; DATA XREF: main+98↑o
.rodata:0000000000004ED5 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+9F↑o
.rodata:0000000000004EE5 ; const char aCannotGetRealU[]
.rodata:0000000000004EE5 aCannotGetRealU db 'cannot get real UID',0
.rodata:0000000000004EE5                                         ; DATA XREF: main+29D↑o
.rodata:0000000000004EF9 ; const char aCannotGetEffec[]
.rodata:0000000000004EF9 aCannotGetEffec db 'cannot get effective GID',0
.rodata:0000000000004EF9                                         ; DATA XREF: main+270↑o
.rodata:0000000000004F12 ; const char aCannotGetRealG[]
.rodata:0000000000004F12 aCannotGetRealG db 'cannot get real GID',0
.rodata:0000000000004F12                                         ; DATA XREF: main+2CA↑o
.rodata:0000000000004F26 ; const char msgid[]
.rodata:0000000000004F26 msgid           db '%s: no such user',0 ; DATA XREF: main+19D↑o
.rodata:0000000000004F37 aS              db '%s : ',0            ; DATA XREF: main+D6↑o
.rodata:0000000000004F3D aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:0000000000004F42 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:0000000000004F4A                 align 10h
.rodata:0000000000004F50 ; const char aTrySHelpForMor[]
.rodata:0000000000004F50 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004F50                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004F77                 align 8
.rodata:0000000000004F78 ; const char aUsageSOptionUs[]
.rodata:0000000000004F78 aUsageSOptionUs db 'Usage: %s [OPTION]... [USERNAME]...',0Ah,0
.rodata:0000000000004F78                                         ; DATA XREF: usage:loc_1B1D↑o
.rodata:0000000000004F9D                 align 20h
.rodata:0000000000004FA0 ; const char aPrintGroupMemb[]
.rodata:0000000000004FA0 aPrintGroupMemb db 'Print group memberships for each USERNAME or, if no USERNAME is s'
.rodata:0000000000004FA0                                         ; DATA XREF: usage+84↑o
.rodata:0000000000004FA0                 db 'pecified, for',0Ah
.rodata:0000000000004FA0                 db 'the current process (which may differ if the groups database has '
.rodata:0000000000004FA0                 db 'changed).',0Ah,0
.rodata:000000000000503B                 align 20h
.rodata:0000000000005040 ; const char aHelpDisplayThi[]
.rodata:0000000000005040 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005040                                         ; DATA XREF: usage+A9↑o
.rodata:000000000000506D                 align 10h
.rodata:0000000000005070 ; const char aVersionOutputV[]
.rodata:0000000000005070 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000005070                                         ; DATA XREF: usage+CE↑o
.rodata:00000000000050A6                 align 8
.rodata:00000000000050A8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000050A8                                         ; DATA XREF: usage+1C7↑o
.rodata:00000000000050A8                                         ; usage+22B↑o ...
.rodata:00000000000050D0 ; const char aReportAnyTrans[]
.rodata:00000000000050D0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000050D0                                         ; DATA XREF: usage+31F↑o
.rodata:00000000000050D0                 db 'am/>',0Ah,0
.rodata:0000000000005117                 align 8
.rodata:0000000000005118 ; const char aOrAvailableLoc[]
.rodata:0000000000005118 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005118                                         ; DATA XREF: usage:loc_1D16↑o
.rodata:000000000000514B                 align 10h
.rodata:0000000000005150 ; const char aCannotFindName[]
.rodata:0000000000005150 aCannotFindName db 'cannot find name for group ID %lu',0
.rodata:0000000000005150                                         ; DATA XREF: print_group:loc_1E38↑o
.rodata:0000000000005172                 align 8
.rodata:0000000000005178 ; const char aFailedToGetGro[]
.rodata:0000000000005178 aFailedToGetGro db 'failed to get groups for user %s',0
.rodata:0000000000005178                                         ; DATA XREF: print_group_list+1A5↑o
.rodata:0000000000005199                 align 20h
.rodata:00000000000051A0 ; const char aFailedToGetGro_0[]
.rodata:00000000000051A0 aFailedToGetGro_0 db 'failed to get groups for the current process',0
.rodata:00000000000051A0                                         ; DATA XREF: print_group_list:loc_2070↑o
.rodata:00000000000051CD a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:00000000000051D2 ; const char aWriteError[]
.rodata:00000000000051D2 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_2123↑o
.rodata:00000000000051DE ; const char format[]
.rodata:00000000000051DE format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:00000000000051DE                                         ; close_stdout+8F↑o ...
.rodata:00000000000051E5                 align 8
.rodata:00000000000051E8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000051E8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005220 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005228 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000522C unk_522C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000522D                 db  80h
.rodata:000000000000522E                 db  98h
.rodata:000000000000522F                 db    0
.rodata:0000000000005230 unk_5230        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005231                 db  80h
.rodata:0000000000005232                 db  99h
.rodata:0000000000005233                 db    0
.rodata:0000000000005234 unk_5234        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005235                 db    7
.rodata:0000000000005236                 db  65h ; e
.rodata:0000000000005237                 db    0
.rodata:0000000000005238 unk_5238        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005239                 db 0AFh
.rodata:000000000000523A                 db    0
.rodata:000000000000523B unk_523B        db  22h ; "             ; DATA XREF: gettext_quote:loc_22A0↑o
.rodata:000000000000523B                                         ; quotearg_buffer_restyled:loc_305B↑o ...
.rodata:000000000000523C                 db    0
.rodata:000000000000523D ; const char asc_523D[2]
.rodata:000000000000523D asc_523D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000523D                                         ; quotearg_buffer_restyled:loc_2423↑o ...
.rodata:000000000000523F ; const char asc_523F[2]
.rodata:000000000000523F asc_523F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000523F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005241 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005249 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206BE8↓o
.rodata:000000000000524F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206BF0↓o
.rodata:000000000000525C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206BF8↓o
.rodata:000000000000525C                                         ; .data.rel.ro:0000000000206C18↓o
.rodata:0000000000005269 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005269                                         ; DATA XREF: .data.rel.ro:0000000000206C00↓o
.rodata:000000000000527D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C08↓o
.rodata:000000000000527F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C10↓o
.rodata:0000000000005287 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:000000000000528F                 align 20h
.rodata:00000000000052A0 jpt_2401        dd offset loc_31AA - 52A0h
.rodata:00000000000052A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000052A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000052A0                 dd offset loc_2403 - 52A0h ; jump table for switch statement
.rodata:00000000000052A0                 dd offset loc_33D8 - 52A0h
.rodata:00000000000052A0                 dd offset loc_31E4 - 52A0h
.rodata:00000000000052A0                 dd offset loc_2FD4 - 52A0h
.rodata:00000000000052A0                 dd offset loc_3030 - 52A0h
.rodata:00000000000052A0                 dd offset loc_3085 - 52A0h
.rodata:00000000000052A0                 dd offset loc_30CA - 52A0h
.rodata:00000000000052A0                 dd offset loc_3104 - 52A0h
.rodata:00000000000052A0                 dd offset loc_3104 - 52A0h
.rodata:00000000000052A0                 dd offset loc_3104 - 52A0h
.rodata:00000000000052CC jpt_255E        dd offset loc_2780 - 52CCh, offset def_255E - 52CCh, offset def_255E - 52CCh
.rodata:00000000000052CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000052CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset def_255E - 52CCh, offset def_255E - 52CCh ; jump table for switch statement
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset loc_27C0 - 52CCh, offset loc_26C8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2688 - 52CCh, offset loc_2850 - 52CCh, offset loc_2840 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2830 - 52CCh, offset loc_2820 - 52CCh, offset def_255E - 52CCh
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset def_255E - 52CCh, offset def_255E - 52CCh
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset def_255E - 52CCh, offset def_255E - 52CCh
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset def_255E - 52CCh, offset def_255E - 52CCh
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset def_255E - 52CCh, offset def_255E - 52CCh
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset def_255E - 52CCh, offset def_255E - 52CCh
.rodata:00000000000052CC                 dd offset def_255E - 52CCh, offset def_255E - 52CCh, offset loc_2810 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2800 - 52CCh, offset loc_2800 - 52CCh, offset loc_27D0 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2800 - 52CCh, offset loc_27A8 - 52CCh, offset loc_2800 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2663 - 52CCh, offset loc_2800 - 52CCh, offset loc_2800 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2800 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_2800 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2800 - 52CCh, offset loc_2800 - 52CCh, offset loc_2800 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2633 - 52CCh, offset def_255E - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_2800 - 52CCh, offset loc_26D8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_2800 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2800 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh, offset loc_27A8 - 52CCh
.rodata:00000000000052CC                 dd offset loc_2563 - 52CCh, offset loc_2800 - 52CCh, offset loc_2563 - 52CCh
.rodata:00000000000052CC                 dd offset loc_27D0 - 52CCh
.rodata:00000000000054C8 jpt_28EA        dd offset loc_2950 - 54C8h, offset def_28EA - 54C8h, offset def_28EA - 54C8h
.rodata:00000000000054C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000054C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset def_28EA - 54C8h, offset def_28EA - 54C8h ; jump table for switch statement
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset loc_2940 - 54C8h, offset loc_2A90 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2A78 - 54C8h, offset loc_2928 - 54C8h, offset loc_2A68 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2910 - 54C8h, offset loc_2A50 - 54C8h, offset def_28EA - 54C8h
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset def_28EA - 54C8h, offset def_28EA - 54C8h
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset def_28EA - 54C8h, offset def_28EA - 54C8h
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset def_28EA - 54C8h, offset def_28EA - 54C8h
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset def_28EA - 54C8h, offset def_28EA - 54C8h
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset def_28EA - 54C8h, offset def_28EA - 54C8h
.rodata:00000000000054C8                 dd offset def_28EA - 54C8h, offset def_28EA - 54C8h, offset loc_2A38 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2A20 - 54C8h, offset loc_2A20 - 54C8h, offset loc_2A08 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2A20 - 54C8h, offset loc_29F0 - 54C8h, offset loc_2A20 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2660 - 54C8h, offset loc_2A20 - 54C8h, offset loc_2A20 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2A20 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_2A20 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2A20 - 54C8h, offset loc_2A20 - 54C8h, offset loc_2A20 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2630 - 54C8h, offset def_28EA - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_2A20 - 54C8h, offset loc_28F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_2A20 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2A20 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h, offset loc_29F0 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2560 - 54C8h, offset loc_2A20 - 54C8h, offset loc_2560 - 54C8h
.rodata:00000000000054C8                 dd offset loc_2A08 - 54C8h
.rodata:00000000000056C4                 align 20h
.rodata:00000000000056E0                 public quoting_style_vals
.rodata:00000000000056E0 quoting_style_vals db    0
.rodata:00000000000056E1                 db    0
.rodata:00000000000056E2                 db    0
.rodata:00000000000056E3                 db    0
.rodata:00000000000056E4                 db    1
.rodata:00000000000056E5                 db    0
.rodata:00000000000056E6                 db    0
.rodata:00000000000056E7                 db    0
.rodata:00000000000056E8                 db    2
.rodata:00000000000056E9                 db    0
.rodata:00000000000056EA                 db    0
.rodata:00000000000056EB                 db    0
.rodata:00000000000056EC                 db    3
.rodata:00000000000056ED                 db    0
.rodata:00000000000056EE                 db    0
.rodata:00000000000056EF                 db    0
.rodata:00000000000056F0                 db    4
.rodata:00000000000056F1                 db    0
.rodata:00000000000056F2                 db    0
.rodata:00000000000056F3                 db    0
.rodata:00000000000056F4                 db    5
.rodata:00000000000056F5                 db    0
.rodata:00000000000056F6                 db    0
.rodata:00000000000056F7                 db    0
.rodata:00000000000056F8                 db    6
.rodata:00000000000056F9                 db    0
.rodata:00000000000056FA                 db    0
.rodata:00000000000056FB                 db    0
.rodata:00000000000056FC                 db    7
.rodata:00000000000056FD                 db    0
.rodata:00000000000056FE                 db    0
.rodata:00000000000056FF                 db    0
.rodata:0000000000005700                 db    8
.rodata:0000000000005701                 db    0
.rodata:0000000000005702                 db    0
.rodata:0000000000005703                 db    0
.rodata:0000000000005704                 db    9
.rodata:0000000000005705                 db    0
.rodata:0000000000005706                 db    0
.rodata:0000000000005707                 db    0
.rodata:0000000000005708 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005714 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000571B ; const char aC_0[]
.rodata:000000000000571B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3F4C↑o
.rodata:000000000000571F ; const char aWrittenByS[]
.rodata:000000000000571F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000571F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000572F ; const char aWrittenBySAndS[]
.rodata:000000000000572F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000572F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005746 ; const char aWrittenBySSAnd[]
.rodata:0000000000005746 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005746                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005762 ; const char aReportBugsToS[]
.rodata:0000000000005762 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005762                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005777 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005777                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000578D ; const char aSHomePageS[]
.rodata:000000000000578D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000578D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000057A1                 align 8
.rodata:00000000000057A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000057A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000057A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000057A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000057A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000057A8                 db '.',0Ah
.rodata:00000000000057A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000057A8                 db 0Ah,0
.rodata:0000000000005874                 align 8
.rodata:0000000000005878 ; const char aWrittenBySSSAn[]
.rodata:0000000000005878 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005878                                         ; DATA XREF: version_etc_arn:loc_41A0↑o
.rodata:0000000000005878                 db 'and %s.',0Ah,0
.rodata:0000000000005898 ; const char aWrittenBySSSSA[]
.rodata:0000000000005898 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005898                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005898                 db '%s, and %s.',0Ah,0
.rodata:00000000000058BC                 align 20h
.rodata:00000000000058C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000058C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000058C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000058C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000058E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000058E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000058E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000058E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005914                 align 8
.rodata:0000000000005918 ; const char aWrittenBySSSSS[]
.rodata:0000000000005918 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005918                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005918                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005918                 db 'and %s.',0Ah,0
.rodata:0000000000005948 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005948 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005948                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005948                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005948                 db '%s, and %s.',0Ah,0
.rodata:000000000000597C                 align 20h
.rodata:0000000000005980 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005980                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005980                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005980                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000059BC                 align 20h
.rodata:00000000000059C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000059C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000059C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000059C0                 db 0
.rodata:0000000000005A01                 align 8
.rodata:0000000000005A08 jpt_3FB4        dd offset loc_4036 - 5A08h
.rodata:0000000000005A08                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005A08                                         ; version_etc_arn+9D↑r
.rodata:0000000000005A08                 dd offset loc_40C8 - 5A08h ; jump table for switch statement
.rodata:0000000000005A08                 dd offset loc_4108 - 5A08h
.rodata:0000000000005A08                 dd offset loc_4150 - 5A08h
.rodata:0000000000005A08                 dd offset loc_41A0 - 5A08h
.rodata:0000000000005A08                 dd offset loc_41F8 - 5A08h
.rodata:0000000000005A08                 dd offset loc_4228 - 5A08h
.rodata:0000000000005A08                 dd offset loc_4290 - 5A08h
.rodata:0000000000005A08                 dd offset loc_3FC0 - 5A08h
.rodata:0000000000005A08                 dd offset loc_4070 - 5A08h
.rodata:0000000000005A30                 align 20h
.rodata:0000000000005A40                 public version_etc_copyright
.rodata:0000000000005A40 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005A40                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000005A6F ; const char aMemoryExhauste[]
.rodata:0000000000005A6F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005A80 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005A82 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4940↑o
.rodata:0000000000005A88 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005A88                                         ; locale_charset:loc_4990↑o
.rodata:0000000000005A88 _rodata         ends
.rodata:0000000000005A88
LOAD:0000000000005A8E ; ===========================================================================
LOAD:0000000000005A8E
LOAD:0000000000005A8E ; Segment type: Pure code
LOAD:0000000000005A8E ; Segment permissions: Read/Execute
LOAD:0000000000005A8E LOAD            segment byte public 'CODE' use64
LOAD:0000000000005A8E                 assume cs:LOAD
LOAD:0000000000005A8E                 ;org 5A8Eh
LOAD:0000000000005A8E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005A8E                 align 10h
LOAD:0000000000005A8E LOAD            ends
LOAD:0000000000005A8E
.eh_frame_hdr:0000000000005A90 ; ===========================================================================
.eh_frame_hdr:0000000000005A90
.eh_frame_hdr:0000000000005A90 ; Segment type: Pure data
.eh_frame_hdr:0000000000005A90 ; Segment permissions: Read
.eh_frame_hdr:0000000000005A90 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005A90                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005A90                 ;org 5A90h
.eh_frame_hdr:0000000000005A90 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005A91                 db  1Bh
.eh_frame_hdr:0000000000005A92                 db    3
.eh_frame_hdr:0000000000005A93                 db  3Bh ; ;
.eh_frame_hdr:0000000000005A94                 db  6Ch ; l
.eh_frame_hdr:0000000000005A95                 db    2
.eh_frame_hdr:0000000000005A96                 db    0
.eh_frame_hdr:0000000000005A97                 db    0
.eh_frame_hdr:0000000000005A98                 db  4Ch ; L
.eh_frame_hdr:0000000000005A99                 db    0
.eh_frame_hdr:0000000000005A9A                 db    0
.eh_frame_hdr:0000000000005A9B                 db    0
.eh_frame_hdr:0000000000005A9C                 db 0E0h
.eh_frame_hdr:0000000000005A9D                 db 0B8h
.eh_frame_hdr:0000000000005A9E                 db 0FFh
.eh_frame_hdr:0000000000005A9F                 db 0FFh
.eh_frame_hdr:0000000000005AA0                 db 0B8h
.eh_frame_hdr:0000000000005AA1                 db    2
.eh_frame_hdr:0000000000005AA2                 db    0
.eh_frame_hdr:0000000000005AA3                 db    0
.eh_frame_hdr:0000000000005AA4                 db 0F0h
.eh_frame_hdr:0000000000005AA5                 db 0BBh
.eh_frame_hdr:0000000000005AA6                 db 0FFh
.eh_frame_hdr:0000000000005AA7                 db 0FFh
.eh_frame_hdr:0000000000005AA8                 db 0E0h
.eh_frame_hdr:0000000000005AA9                 db    2
.eh_frame_hdr:0000000000005AAA                 db    0
.eh_frame_hdr:0000000000005AAB                 db    0
.eh_frame_hdr:0000000000005AAC                 db    0
.eh_frame_hdr:0000000000005AAD                 db 0BCh
.eh_frame_hdr:0000000000005AAE                 db 0FFh
.eh_frame_hdr:0000000000005AAF                 db 0FFh
.eh_frame_hdr:0000000000005AB0                 db  24h ; $
.eh_frame_hdr:0000000000005AB1                 db    3
.eh_frame_hdr:0000000000005AB2                 db    0
.eh_frame_hdr:0000000000005AB3                 db    0
.eh_frame_hdr:0000000000005AB4                 db  20h
.eh_frame_hdr:0000000000005AB5                 db 0BFh
.eh_frame_hdr:0000000000005AB6                 db 0FFh
.eh_frame_hdr:0000000000005AB7                 db 0FFh
.eh_frame_hdr:0000000000005AB8                 db  88h
.eh_frame_hdr:0000000000005AB9                 db    2
.eh_frame_hdr:0000000000005ABA                 db    0
.eh_frame_hdr:0000000000005ABB                 db    0
.eh_frame_hdr:0000000000005ABC                 db  30h ; 0
.eh_frame_hdr:0000000000005ABD                 db 0C0h
.eh_frame_hdr:0000000000005ABE                 db 0FFh
.eh_frame_hdr:0000000000005ABF                 db 0FFh
.eh_frame_hdr:0000000000005AC0                 db 0F8h
.eh_frame_hdr:0000000000005AC1                 db    2
.eh_frame_hdr:0000000000005AC2                 db    0
.eh_frame_hdr:0000000000005AC3                 db    0
.eh_frame_hdr:0000000000005AC4                 db  80h
.eh_frame_hdr:0000000000005AC5                 db 0C3h
.eh_frame_hdr:0000000000005AC6                 db 0FFh
.eh_frame_hdr:0000000000005AC7                 db 0FFh
.eh_frame_hdr:0000000000005AC8                 db  80h
.eh_frame_hdr:0000000000005AC9                 db    3
.eh_frame_hdr:0000000000005ACA                 db    0
.eh_frame_hdr:0000000000005ACB                 db    0
.eh_frame_hdr:0000000000005ACC                 db    0
.eh_frame_hdr:0000000000005ACD                 db 0C4h
.eh_frame_hdr:0000000000005ACE                 db 0FFh
.eh_frame_hdr:0000000000005ACF                 db 0FFh
.eh_frame_hdr:0000000000005AD0                 db 0A8h
.eh_frame_hdr:0000000000005AD1                 db    3
.eh_frame_hdr:0000000000005AD2                 db    0
.eh_frame_hdr:0000000000005AD3                 db    0
.eh_frame_hdr:0000000000005AD4                 db  30h ; 0
.eh_frame_hdr:0000000000005AD5                 db 0C6h
.eh_frame_hdr:0000000000005AD6                 db 0FFh
.eh_frame_hdr:0000000000005AD7                 db 0FFh
.eh_frame_hdr:0000000000005AD8                 db 0F8h
.eh_frame_hdr:0000000000005AD9                 db    3
.eh_frame_hdr:0000000000005ADA                 db    0
.eh_frame_hdr:0000000000005ADB                 db    0
.eh_frame_hdr:0000000000005ADC                 db  40h ; @
.eh_frame_hdr:0000000000005ADD                 db 0C6h
.eh_frame_hdr:0000000000005ADE                 db 0FFh
.eh_frame_hdr:0000000000005ADF                 db 0FFh
.eh_frame_hdr:0000000000005AE0                 db  0Ch
.eh_frame_hdr:0000000000005AE1                 db    4
.eh_frame_hdr:0000000000005AE2                 db    0
.eh_frame_hdr:0000000000005AE3                 db    0
.eh_frame_hdr:0000000000005AE4                 db  50h ; P
.eh_frame_hdr:0000000000005AE5                 db 0C6h
.eh_frame_hdr:0000000000005AE6                 db 0FFh
.eh_frame_hdr:0000000000005AE7                 db 0FFh
.eh_frame_hdr:0000000000005AE8                 db  20h
.eh_frame_hdr:0000000000005AE9                 db    4
.eh_frame_hdr:0000000000005AEA                 db    0
.eh_frame_hdr:0000000000005AEB                 db    0
.eh_frame_hdr:0000000000005AEC                 db    0
.eh_frame_hdr:0000000000005AED                 db 0C7h
.eh_frame_hdr:0000000000005AEE                 db 0FFh
.eh_frame_hdr:0000000000005AEF                 db 0FFh
.eh_frame_hdr:0000000000005AF0                 db  50h ; P
.eh_frame_hdr:0000000000005AF1                 db    4
.eh_frame_hdr:0000000000005AF2                 db    0
.eh_frame_hdr:0000000000005AF3                 db    0
.eh_frame_hdr:0000000000005AF4                 db  50h ; P
.eh_frame_hdr:0000000000005AF5                 db 0C7h
.eh_frame_hdr:0000000000005AF6                 db 0FFh
.eh_frame_hdr:0000000000005AF7                 db 0FFh
.eh_frame_hdr:0000000000005AF8                 db  68h ; h
.eh_frame_hdr:0000000000005AF9                 db    4
.eh_frame_hdr:0000000000005AFA                 db    0
.eh_frame_hdr:0000000000005AFB                 db    0
.eh_frame_hdr:0000000000005AFC                 db 0F0h
.eh_frame_hdr:0000000000005AFD                 db 0C7h
.eh_frame_hdr:0000000000005AFE                 db 0FFh
.eh_frame_hdr:0000000000005AFF                 db 0FFh
.eh_frame_hdr:0000000000005B00                 db  88h
.eh_frame_hdr:0000000000005B01                 db    4
.eh_frame_hdr:0000000000005B02                 db    0
.eh_frame_hdr:0000000000005B03                 db    0
.eh_frame_hdr:0000000000005B04                 db 0E0h
.eh_frame_hdr:0000000000005B05                 db 0C8h
.eh_frame_hdr:0000000000005B06                 db 0FFh
.eh_frame_hdr:0000000000005B07                 db 0FFh
.eh_frame_hdr:0000000000005B08                 db 0CCh
.eh_frame_hdr:0000000000005B09                 db    4
.eh_frame_hdr:0000000000005B0A                 db    0
.eh_frame_hdr:0000000000005B0B                 db    0
.eh_frame_hdr:0000000000005B0C                 db  20h
.eh_frame_hdr:0000000000005B0D                 db 0DBh
.eh_frame_hdr:0000000000005B0E                 db 0FFh
.eh_frame_hdr:0000000000005B0F                 db 0FFh
.eh_frame_hdr:0000000000005B10                 db  44h ; D
.eh_frame_hdr:0000000000005B11                 db    5
.eh_frame_hdr:0000000000005B12                 db    0
.eh_frame_hdr:0000000000005B13                 db    0
.eh_frame_hdr:0000000000005B14                 db 0D0h
.eh_frame_hdr:0000000000005B15                 db 0DCh
.eh_frame_hdr:0000000000005B16                 db 0FFh
.eh_frame_hdr:0000000000005B17                 db 0FFh
.eh_frame_hdr:0000000000005B18                 db 0B0h
.eh_frame_hdr:0000000000005B19                 db    5
.eh_frame_hdr:0000000000005B1A                 db    0
.eh_frame_hdr:0000000000005B1B                 db    0
.eh_frame_hdr:0000000000005B1C                 db  10h
.eh_frame_hdr:0000000000005B1D                 db 0DDh
.eh_frame_hdr:0000000000005B1E                 db 0FFh
.eh_frame_hdr:0000000000005B1F                 db 0FFh
.eh_frame_hdr:0000000000005B20                 db 0DCh
.eh_frame_hdr:0000000000005B21                 db    5
.eh_frame_hdr:0000000000005B22                 db    0
.eh_frame_hdr:0000000000005B23                 db    0
.eh_frame_hdr:0000000000005B24                 db  30h ; 0
.eh_frame_hdr:0000000000005B25                 db 0DDh
.eh_frame_hdr:0000000000005B26                 db 0FFh
.eh_frame_hdr:0000000000005B27                 db 0FFh
.eh_frame_hdr:0000000000005B28                 db 0F0h
.eh_frame_hdr:0000000000005B29                 db    5
.eh_frame_hdr:0000000000005B2A                 db    0
.eh_frame_hdr:0000000000005B2B                 db    0
.eh_frame_hdr:0000000000005B2C                 db  50h ; P
.eh_frame_hdr:0000000000005B2D                 db 0DDh
.eh_frame_hdr:0000000000005B2E                 db 0FFh
.eh_frame_hdr:0000000000005B2F                 db 0FFh
.eh_frame_hdr:0000000000005B30                 db    4
.eh_frame_hdr:0000000000005B31                 db    6
.eh_frame_hdr:0000000000005B32                 db    0
.eh_frame_hdr:0000000000005B33                 db    0
.eh_frame_hdr:0000000000005B34                 db  90h
.eh_frame_hdr:0000000000005B35                 db 0DDh
.eh_frame_hdr:0000000000005B36                 db 0FFh
.eh_frame_hdr:0000000000005B37                 db 0FFh
.eh_frame_hdr:0000000000005B38                 db  18h
.eh_frame_hdr:0000000000005B39                 db    6
.eh_frame_hdr:0000000000005B3A                 db    0
.eh_frame_hdr:0000000000005B3B                 db    0
.eh_frame_hdr:0000000000005B3C                 db 0B0h
.eh_frame_hdr:0000000000005B3D                 db 0DDh
.eh_frame_hdr:0000000000005B3E                 db 0FFh
.eh_frame_hdr:0000000000005B3F                 db 0FFh
.eh_frame_hdr:0000000000005B40                 db  2Ch ; ,
.eh_frame_hdr:0000000000005B41                 db    6
.eh_frame_hdr:0000000000005B42                 db    0
.eh_frame_hdr:0000000000005B43                 db    0
.eh_frame_hdr:0000000000005B44                 db 0E0h
.eh_frame_hdr:0000000000005B45                 db 0DDh
.eh_frame_hdr:0000000000005B46                 db 0FFh
.eh_frame_hdr:0000000000005B47                 db 0FFh
.eh_frame_hdr:0000000000005B48                 db  40h ; @
.eh_frame_hdr:0000000000005B49                 db    6
.eh_frame_hdr:0000000000005B4A                 db    0
.eh_frame_hdr:0000000000005B4B                 db    0
.eh_frame_hdr:0000000000005B4C                 db  60h ; `
.eh_frame_hdr:0000000000005B4D                 db 0DEh
.eh_frame_hdr:0000000000005B4E                 db 0FFh
.eh_frame_hdr:0000000000005B4F                 db 0FFh
.eh_frame_hdr:0000000000005B50                 db  94h
.eh_frame_hdr:0000000000005B51                 db    6
.eh_frame_hdr:0000000000005B52                 db    0
.eh_frame_hdr:0000000000005B53                 db    0
.eh_frame_hdr:0000000000005B54                 db  50h ; P
.eh_frame_hdr:0000000000005B55                 db 0DFh
.eh_frame_hdr:0000000000005B56                 db 0FFh
.eh_frame_hdr:0000000000005B57                 db 0FFh
.eh_frame_hdr:0000000000005B58                 db    0
.eh_frame_hdr:0000000000005B59                 db    7
.eh_frame_hdr:0000000000005B5A                 db    0
.eh_frame_hdr:0000000000005B5B                 db    0
.eh_frame_hdr:0000000000005B5C                 db  60h ; `
.eh_frame_hdr:0000000000005B5D                 db 0DFh
.eh_frame_hdr:0000000000005B5E                 db 0FFh
.eh_frame_hdr:0000000000005B5F                 db 0FFh
.eh_frame_hdr:0000000000005B60                 db  14h
.eh_frame_hdr:0000000000005B61                 db    7
.eh_frame_hdr:0000000000005B62                 db    0
.eh_frame_hdr:0000000000005B63                 db    0
.eh_frame_hdr:0000000000005B64                 db    0
.eh_frame_hdr:0000000000005B65                 db 0E0h
.eh_frame_hdr:0000000000005B66                 db 0FFh
.eh_frame_hdr:0000000000005B67                 db 0FFh
.eh_frame_hdr:0000000000005B68                 db  40h ; @
.eh_frame_hdr:0000000000005B69                 db    7
.eh_frame_hdr:0000000000005B6A                 db    0
.eh_frame_hdr:0000000000005B6B                 db    0
.eh_frame_hdr:0000000000005B6C                 db  20h
.eh_frame_hdr:0000000000005B6D                 db 0E0h
.eh_frame_hdr:0000000000005B6E                 db 0FFh
.eh_frame_hdr:0000000000005B6F                 db 0FFh
.eh_frame_hdr:0000000000005B70                 db  54h ; T
.eh_frame_hdr:0000000000005B71                 db    7
.eh_frame_hdr:0000000000005B72                 db    0
.eh_frame_hdr:0000000000005B73                 db    0
.eh_frame_hdr:0000000000005B74                 db  30h ; 0
.eh_frame_hdr:0000000000005B75                 db 0E0h
.eh_frame_hdr:0000000000005B76                 db 0FFh
.eh_frame_hdr:0000000000005B77                 db 0FFh
.eh_frame_hdr:0000000000005B78                 db  68h ; h
.eh_frame_hdr:0000000000005B79                 db    7
.eh_frame_hdr:0000000000005B7A                 db    0
.eh_frame_hdr:0000000000005B7B                 db    0
.eh_frame_hdr:0000000000005B7C                 db  50h ; P
.eh_frame_hdr:0000000000005B7D                 db 0E0h
.eh_frame_hdr:0000000000005B7E                 db 0FFh
.eh_frame_hdr:0000000000005B7F                 db 0FFh
.eh_frame_hdr:0000000000005B80                 db  7Ch ; |
.eh_frame_hdr:0000000000005B81                 db    7
.eh_frame_hdr:0000000000005B82                 db    0
.eh_frame_hdr:0000000000005B83                 db    0
.eh_frame_hdr:0000000000005B84                 db  70h ; p
.eh_frame_hdr:0000000000005B85                 db 0E0h
.eh_frame_hdr:0000000000005B86                 db 0FFh
.eh_frame_hdr:0000000000005B87                 db 0FFh
.eh_frame_hdr:0000000000005B88                 db  90h
.eh_frame_hdr:0000000000005B89                 db    7
.eh_frame_hdr:0000000000005B8A                 db    0
.eh_frame_hdr:0000000000005B8B                 db    0
.eh_frame_hdr:0000000000005B8C                 db    0
.eh_frame_hdr:0000000000005B8D                 db 0E1h
.eh_frame_hdr:0000000000005B8E                 db 0FFh
.eh_frame_hdr:0000000000005B8F                 db 0FFh
.eh_frame_hdr:0000000000005B90                 db 0ACh
.eh_frame_hdr:0000000000005B91                 db    7
.eh_frame_hdr:0000000000005B92                 db    0
.eh_frame_hdr:0000000000005B93                 db    0
.eh_frame_hdr:0000000000005B94                 db  90h
.eh_frame_hdr:0000000000005B95                 db 0E1h
.eh_frame_hdr:0000000000005B96                 db 0FFh
.eh_frame_hdr:0000000000005B97                 db 0FFh
.eh_frame_hdr:0000000000005B98                 db 0C8h
.eh_frame_hdr:0000000000005B99                 db    7
.eh_frame_hdr:0000000000005B9A                 db    0
.eh_frame_hdr:0000000000005B9B                 db    0
.eh_frame_hdr:0000000000005B9C                 db 0A0h
.eh_frame_hdr:0000000000005B9D                 db 0E1h
.eh_frame_hdr:0000000000005B9E                 db 0FFh
.eh_frame_hdr:0000000000005B9F                 db 0FFh
.eh_frame_hdr:0000000000005BA0                 db 0DCh
.eh_frame_hdr:0000000000005BA1                 db    7
.eh_frame_hdr:0000000000005BA2                 db    0
.eh_frame_hdr:0000000000005BA3                 db    0
.eh_frame_hdr:0000000000005BA4                 db 0B0h
.eh_frame_hdr:0000000000005BA5                 db 0E1h
.eh_frame_hdr:0000000000005BA6                 db 0FFh
.eh_frame_hdr:0000000000005BA7                 db 0FFh
.eh_frame_hdr:0000000000005BA8                 db 0F0h
.eh_frame_hdr:0000000000005BA9                 db    7
.eh_frame_hdr:0000000000005BAA                 db    0
.eh_frame_hdr:0000000000005BAB                 db    0
.eh_frame_hdr:0000000000005BAC                 db  50h ; P
.eh_frame_hdr:0000000000005BAD                 db 0E2h
.eh_frame_hdr:0000000000005BAE                 db 0FFh
.eh_frame_hdr:0000000000005BAF                 db 0FFh
.eh_frame_hdr:0000000000005BB0                 db  0Ch
.eh_frame_hdr:0000000000005BB1                 db    8
.eh_frame_hdr:0000000000005BB2                 db    0
.eh_frame_hdr:0000000000005BB3                 db    0
.eh_frame_hdr:0000000000005BB4                 db  60h ; `
.eh_frame_hdr:0000000000005BB5                 db 0E2h
.eh_frame_hdr:0000000000005BB6                 db 0FFh
.eh_frame_hdr:0000000000005BB7                 db 0FFh
.eh_frame_hdr:0000000000005BB8                 db  20h
.eh_frame_hdr:0000000000005BB9                 db    8
.eh_frame_hdr:0000000000005BBA                 db    0
.eh_frame_hdr:0000000000005BBB                 db    0
.eh_frame_hdr:0000000000005BBC                 db  80h
.eh_frame_hdr:0000000000005BBD                 db 0E2h
.eh_frame_hdr:0000000000005BBE                 db 0FFh
.eh_frame_hdr:0000000000005BBF                 db 0FFh
.eh_frame_hdr:0000000000005BC0                 db  34h ; 4
.eh_frame_hdr:0000000000005BC1                 db    8
.eh_frame_hdr:0000000000005BC2                 db    0
.eh_frame_hdr:0000000000005BC3                 db    0
.eh_frame_hdr:0000000000005BC4                 db  90h
.eh_frame_hdr:0000000000005BC5                 db 0E2h
.eh_frame_hdr:0000000000005BC6                 db 0FFh
.eh_frame_hdr:0000000000005BC7                 db 0FFh
.eh_frame_hdr:0000000000005BC8                 db  48h ; H
.eh_frame_hdr:0000000000005BC9                 db    8
.eh_frame_hdr:0000000000005BCA                 db    0
.eh_frame_hdr:0000000000005BCB                 db    0
.eh_frame_hdr:0000000000005BCC                 db  20h
.eh_frame_hdr:0000000000005BCD                 db 0E3h
.eh_frame_hdr:0000000000005BCE                 db 0FFh
.eh_frame_hdr:0000000000005BCF                 db 0FFh
.eh_frame_hdr:0000000000005BD0                 db  64h ; d
.eh_frame_hdr:0000000000005BD1                 db    8
.eh_frame_hdr:0000000000005BD2                 db    0
.eh_frame_hdr:0000000000005BD3                 db    0
.eh_frame_hdr:0000000000005BD4                 db 0C0h
.eh_frame_hdr:0000000000005BD5                 db 0E3h
.eh_frame_hdr:0000000000005BD6                 db 0FFh
.eh_frame_hdr:0000000000005BD7                 db 0FFh
.eh_frame_hdr:0000000000005BD8                 db  80h
.eh_frame_hdr:0000000000005BD9                 db    8
.eh_frame_hdr:0000000000005BDA                 db    0
.eh_frame_hdr:0000000000005BDB                 db    0
.eh_frame_hdr:0000000000005BDC                 db 0D0h
.eh_frame_hdr:0000000000005BDD                 db 0E3h
.eh_frame_hdr:0000000000005BDE                 db 0FFh
.eh_frame_hdr:0000000000005BDF                 db 0FFh
.eh_frame_hdr:0000000000005BE0                 db  94h
.eh_frame_hdr:0000000000005BE1                 db    8
.eh_frame_hdr:0000000000005BE2                 db    0
.eh_frame_hdr:0000000000005BE3                 db    0
.eh_frame_hdr:0000000000005BE4                 db 0F0h
.eh_frame_hdr:0000000000005BE5                 db 0E3h
.eh_frame_hdr:0000000000005BE6                 db 0FFh
.eh_frame_hdr:0000000000005BE7                 db 0FFh
.eh_frame_hdr:0000000000005BE8                 db 0A8h
.eh_frame_hdr:0000000000005BE9                 db    8
.eh_frame_hdr:0000000000005BEA                 db    0
.eh_frame_hdr:0000000000005BEB                 db    0
.eh_frame_hdr:0000000000005BEC                 db  10h
.eh_frame_hdr:0000000000005BED                 db 0E4h
.eh_frame_hdr:0000000000005BEE                 db 0FFh
.eh_frame_hdr:0000000000005BEF                 db 0FFh
.eh_frame_hdr:0000000000005BF0                 db 0BCh
.eh_frame_hdr:0000000000005BF1                 db    8
.eh_frame_hdr:0000000000005BF2                 db    0
.eh_frame_hdr:0000000000005BF3                 db    0
.eh_frame_hdr:0000000000005BF4                 db  20h
.eh_frame_hdr:0000000000005BF5                 db 0E4h
.eh_frame_hdr:0000000000005BF6                 db 0FFh
.eh_frame_hdr:0000000000005BF7                 db 0FFh
.eh_frame_hdr:0000000000005BF8                 db 0D0h
.eh_frame_hdr:0000000000005BF9                 db    8
.eh_frame_hdr:0000000000005BFA                 db    0
.eh_frame_hdr:0000000000005BFB                 db    0
.eh_frame_hdr:0000000000005BFC                 db  40h ; @
.eh_frame_hdr:0000000000005BFD                 db 0E4h
.eh_frame_hdr:0000000000005BFE                 db 0FFh
.eh_frame_hdr:0000000000005BFF                 db 0FFh
.eh_frame_hdr:0000000000005C00                 db 0E4h
.eh_frame_hdr:0000000000005C01                 db    8
.eh_frame_hdr:0000000000005C02                 db    0
.eh_frame_hdr:0000000000005C03                 db    0
.eh_frame_hdr:0000000000005C04                 db  60h ; `
.eh_frame_hdr:0000000000005C05                 db 0E4h
.eh_frame_hdr:0000000000005C06                 db 0FFh
.eh_frame_hdr:0000000000005C07                 db 0FFh
.eh_frame_hdr:0000000000005C08                 db 0F8h
.eh_frame_hdr:0000000000005C09                 db    8
.eh_frame_hdr:0000000000005C0A                 db    0
.eh_frame_hdr:0000000000005C0B                 db    0
.eh_frame_hdr:0000000000005C0C                 db  80h
.eh_frame_hdr:0000000000005C0D                 db 0E4h
.eh_frame_hdr:0000000000005C0E                 db 0FFh
.eh_frame_hdr:0000000000005C0F                 db 0FFh
.eh_frame_hdr:0000000000005C10                 db  10h
.eh_frame_hdr:0000000000005C11                 db    9
.eh_frame_hdr:0000000000005C12                 db    0
.eh_frame_hdr:0000000000005C13                 db    0
.eh_frame_hdr:0000000000005C14                 db 0A0h
.eh_frame_hdr:0000000000005C15                 db 0E8h
.eh_frame_hdr:0000000000005C16                 db 0FFh
.eh_frame_hdr:0000000000005C17                 db 0FFh
.eh_frame_hdr:0000000000005C18                 db  24h ; $
.eh_frame_hdr:0000000000005C19                 db  0Ah
.eh_frame_hdr:0000000000005C1A                 db    0
.eh_frame_hdr:0000000000005C1B                 db    0
.eh_frame_hdr:0000000000005C1C                 db 0C0h
.eh_frame_hdr:0000000000005C1D                 db 0E8h
.eh_frame_hdr:0000000000005C1E                 db 0FFh
.eh_frame_hdr:0000000000005C1F                 db 0FFh
.eh_frame_hdr:0000000000005C20                 db  38h ; 8
.eh_frame_hdr:0000000000005C21                 db  0Ah
.eh_frame_hdr:0000000000005C22                 db    0
.eh_frame_hdr:0000000000005C23                 db    0
.eh_frame_hdr:0000000000005C24                 db  40h ; @
.eh_frame_hdr:0000000000005C25                 db 0E9h
.eh_frame_hdr:0000000000005C26                 db 0FFh
.eh_frame_hdr:0000000000005C27                 db 0FFh
.eh_frame_hdr:0000000000005C28                 db  54h ; T
.eh_frame_hdr:0000000000005C29                 db  0Ah
.eh_frame_hdr:0000000000005C2A                 db    0
.eh_frame_hdr:0000000000005C2B                 db    0
.eh_frame_hdr:0000000000005C2C                 db  20h
.eh_frame_hdr:0000000000005C2D                 db 0EAh
.eh_frame_hdr:0000000000005C2E                 db 0FFh
.eh_frame_hdr:0000000000005C2F                 db 0FFh
.eh_frame_hdr:0000000000005C30                 db  80h
.eh_frame_hdr:0000000000005C31                 db  0Ah
.eh_frame_hdr:0000000000005C32                 db    0
.eh_frame_hdr:0000000000005C33                 db    0
.eh_frame_hdr:0000000000005C34                 db 0A0h
.eh_frame_hdr:0000000000005C35                 db 0EAh
.eh_frame_hdr:0000000000005C36                 db 0FFh
.eh_frame_hdr:0000000000005C37                 db 0FFh
.eh_frame_hdr:0000000000005C38                 db 0A0h
.eh_frame_hdr:0000000000005C39                 db  0Ah
.eh_frame_hdr:0000000000005C3A                 db    0
.eh_frame_hdr:0000000000005C3B                 db    0
.eh_frame_hdr:0000000000005C3C                 db 0C0h
.eh_frame_hdr:0000000000005C3D                 db 0EAh
.eh_frame_hdr:0000000000005C3E                 db 0FFh
.eh_frame_hdr:0000000000005C3F                 db 0FFh
.eh_frame_hdr:0000000000005C40                 db 0BCh
.eh_frame_hdr:0000000000005C41                 db  0Ah
.eh_frame_hdr:0000000000005C42                 db    0
.eh_frame_hdr:0000000000005C43                 db    0
.eh_frame_hdr:0000000000005C44                 db 0F0h
.eh_frame_hdr:0000000000005C45                 db 0EAh
.eh_frame_hdr:0000000000005C46                 db 0FFh
.eh_frame_hdr:0000000000005C47                 db 0FFh
.eh_frame_hdr:0000000000005C48                 db 0D0h
.eh_frame_hdr:0000000000005C49                 db  0Ah
.eh_frame_hdr:0000000000005C4A                 db    0
.eh_frame_hdr:0000000000005C4B                 db    0
.eh_frame_hdr:0000000000005C4C                 db    0
.eh_frame_hdr:0000000000005C4D                 db 0EBh
.eh_frame_hdr:0000000000005C4E                 db 0FFh
.eh_frame_hdr:0000000000005C4F                 db 0FFh
.eh_frame_hdr:0000000000005C50                 db 0E4h
.eh_frame_hdr:0000000000005C51                 db  0Ah
.eh_frame_hdr:0000000000005C52                 db    0
.eh_frame_hdr:0000000000005C53                 db    0
.eh_frame_hdr:0000000000005C54                 db  40h ; @
.eh_frame_hdr:0000000000005C55                 db 0EBh
.eh_frame_hdr:0000000000005C56                 db 0FFh
.eh_frame_hdr:0000000000005C57                 db 0FFh
.eh_frame_hdr:0000000000005C58                 db    8
.eh_frame_hdr:0000000000005C59                 db  0Bh
.eh_frame_hdr:0000000000005C5A                 db    0
.eh_frame_hdr:0000000000005C5B                 db    0
.eh_frame_hdr:0000000000005C5C                 db  70h ; p
.eh_frame_hdr:0000000000005C5D                 db 0EBh
.eh_frame_hdr:0000000000005C5E                 db 0FFh
.eh_frame_hdr:0000000000005C5F                 db 0FFh
.eh_frame_hdr:0000000000005C60                 db  1Ch
.eh_frame_hdr:0000000000005C61                 db  0Bh
.eh_frame_hdr:0000000000005C62                 db    0
.eh_frame_hdr:0000000000005C63                 db    0
.eh_frame_hdr:0000000000005C64                 db    0
.eh_frame_hdr:0000000000005C65                 db 0ECh
.eh_frame_hdr:0000000000005C66                 db 0FFh
.eh_frame_hdr:0000000000005C67                 db 0FFh
.eh_frame_hdr:0000000000005C68                 db  34h ; 4
.eh_frame_hdr:0000000000005C69                 db  0Bh
.eh_frame_hdr:0000000000005C6A                 db    0
.eh_frame_hdr:0000000000005C6B                 db    0
.eh_frame_hdr:0000000000005C6C                 db  50h ; P
.eh_frame_hdr:0000000000005C6D                 db 0ECh
.eh_frame_hdr:0000000000005C6E                 db 0FFh
.eh_frame_hdr:0000000000005C6F                 db 0FFh
.eh_frame_hdr:0000000000005C70                 db  4Ch ; L
.eh_frame_hdr:0000000000005C71                 db  0Bh
.eh_frame_hdr:0000000000005C72                 db    0
.eh_frame_hdr:0000000000005C73                 db    0
.eh_frame_hdr:0000000000005C74                 db  70h ; p
.eh_frame_hdr:0000000000005C75                 db 0ECh
.eh_frame_hdr:0000000000005C76                 db 0FFh
.eh_frame_hdr:0000000000005C77                 db 0FFh
.eh_frame_hdr:0000000000005C78                 db  68h ; h
.eh_frame_hdr:0000000000005C79                 db  0Bh
.eh_frame_hdr:0000000000005C7A                 db    0
.eh_frame_hdr:0000000000005C7B                 db    0
.eh_frame_hdr:0000000000005C7C                 db 0A0h
.eh_frame_hdr:0000000000005C7D                 db 0ECh
.eh_frame_hdr:0000000000005C7E                 db 0FFh
.eh_frame_hdr:0000000000005C7F                 db 0FFh
.eh_frame_hdr:0000000000005C80                 db  84h
.eh_frame_hdr:0000000000005C81                 db  0Bh
.eh_frame_hdr:0000000000005C82                 db    0
.eh_frame_hdr:0000000000005C83                 db    0
.eh_frame_hdr:0000000000005C84                 db 0D0h
.eh_frame_hdr:0000000000005C85                 db 0ECh
.eh_frame_hdr:0000000000005C86                 db 0FFh
.eh_frame_hdr:0000000000005C87                 db 0FFh
.eh_frame_hdr:0000000000005C88                 db 0ACh
.eh_frame_hdr:0000000000005C89                 db  0Bh
.eh_frame_hdr:0000000000005C8A                 db    0
.eh_frame_hdr:0000000000005C8B                 db    0
.eh_frame_hdr:0000000000005C8C                 db 0F0h
.eh_frame_hdr:0000000000005C8D                 db 0ECh
.eh_frame_hdr:0000000000005C8E                 db 0FFh
.eh_frame_hdr:0000000000005C8F                 db 0FFh
.eh_frame_hdr:0000000000005C90                 db 0C8h
.eh_frame_hdr:0000000000005C91                 db  0Bh
.eh_frame_hdr:0000000000005C92                 db    0
.eh_frame_hdr:0000000000005C93                 db    0
.eh_frame_hdr:0000000000005C94                 db  30h ; 0
.eh_frame_hdr:0000000000005C95                 db 0EDh
.eh_frame_hdr:0000000000005C96                 db 0FFh
.eh_frame_hdr:0000000000005C97                 db 0FFh
.eh_frame_hdr:0000000000005C98                 db 0E0h
.eh_frame_hdr:0000000000005C99                 db  0Bh
.eh_frame_hdr:0000000000005C9A                 db    0
.eh_frame_hdr:0000000000005C9B                 db    0
.eh_frame_hdr:0000000000005C9C                 db  60h ; `
.eh_frame_hdr:0000000000005C9D                 db 0EDh
.eh_frame_hdr:0000000000005C9E                 db 0FFh
.eh_frame_hdr:0000000000005C9F                 db 0FFh
.eh_frame_hdr:0000000000005CA0                 db    0
.eh_frame_hdr:0000000000005CA1                 db  0Ch
.eh_frame_hdr:0000000000005CA2                 db    0
.eh_frame_hdr:0000000000005CA3                 db    0
.eh_frame_hdr:0000000000005CA4                 db 0F0h
.eh_frame_hdr:0000000000005CA5                 db 0EDh
.eh_frame_hdr:0000000000005CA6                 db 0FFh
.eh_frame_hdr:0000000000005CA7                 db 0FFh
.eh_frame_hdr:0000000000005CA8                 db  40h ; @
.eh_frame_hdr:0000000000005CA9                 db  0Ch
.eh_frame_hdr:0000000000005CAA                 db    0
.eh_frame_hdr:0000000000005CAB                 db    0
.eh_frame_hdr:0000000000005CAC                 db  70h ; p
.eh_frame_hdr:0000000000005CAD                 db 0EEh
.eh_frame_hdr:0000000000005CAE                 db 0FFh
.eh_frame_hdr:0000000000005CAF                 db 0FFh
.eh_frame_hdr:0000000000005CB0                 db  90h
.eh_frame_hdr:0000000000005CB1                 db  0Ch
.eh_frame_hdr:0000000000005CB2                 db    0
.eh_frame_hdr:0000000000005CB3                 db    0
.eh_frame_hdr:0000000000005CB4                 db 0D0h
.eh_frame_hdr:0000000000005CB5                 db 0EEh
.eh_frame_hdr:0000000000005CB6                 db 0FFh
.eh_frame_hdr:0000000000005CB7                 db 0FFh
.eh_frame_hdr:0000000000005CB8                 db 0B0h
.eh_frame_hdr:0000000000005CB9                 db  0Ch
.eh_frame_hdr:0000000000005CBA                 db    0
.eh_frame_hdr:0000000000005CBB                 db    0
.eh_frame_hdr:0000000000005CBC                 db  10h
.eh_frame_hdr:0000000000005CBD                 db 0EFh
.eh_frame_hdr:0000000000005CBE                 db 0FFh
.eh_frame_hdr:0000000000005CBF                 db 0FFh
.eh_frame_hdr:0000000000005CC0                 db 0D0h
.eh_frame_hdr:0000000000005CC1                 db  0Ch
.eh_frame_hdr:0000000000005CC2                 db    0
.eh_frame_hdr:0000000000005CC3                 db    0
.eh_frame_hdr:0000000000005CC4                 db  60h ; `
.eh_frame_hdr:0000000000005CC5                 db 0EFh
.eh_frame_hdr:0000000000005CC6                 db 0FFh
.eh_frame_hdr:0000000000005CC7                 db 0FFh
.eh_frame_hdr:0000000000005CC8                 db 0E8h
.eh_frame_hdr:0000000000005CC9                 db  0Ch
.eh_frame_hdr:0000000000005CCA                 db    0
.eh_frame_hdr:0000000000005CCB                 db    0
.eh_frame_hdr:0000000000005CCC                 db 0A0h
.eh_frame_hdr:0000000000005CCD                 db 0F1h
.eh_frame_hdr:0000000000005CCE                 db 0FFh
.eh_frame_hdr:0000000000005CCF                 db 0FFh
.eh_frame_hdr:0000000000005CD0                 db  38h ; 8
.eh_frame_hdr:0000000000005CD1                 db  0Dh
.eh_frame_hdr:0000000000005CD2                 db    0
.eh_frame_hdr:0000000000005CD3                 db    0
.eh_frame_hdr:0000000000005CD4                 db  20h
.eh_frame_hdr:0000000000005CD5                 db 0F2h
.eh_frame_hdr:0000000000005CD6                 db 0FFh
.eh_frame_hdr:0000000000005CD7                 db 0FFh
.eh_frame_hdr:0000000000005CD8                 db  70h ; p
.eh_frame_hdr:0000000000005CD9                 db  0Dh
.eh_frame_hdr:0000000000005CDA                 db    0
.eh_frame_hdr:0000000000005CDB                 db    0
.eh_frame_hdr:0000000000005CDC                 db  60h ; `
.eh_frame_hdr:0000000000005CDD                 db 0F2h
.eh_frame_hdr:0000000000005CDE                 db 0FFh
.eh_frame_hdr:0000000000005CDF                 db 0FFh
.eh_frame_hdr:0000000000005CE0                 db  90h
.eh_frame_hdr:0000000000005CE1                 db  0Dh
.eh_frame_hdr:0000000000005CE2                 db    0
.eh_frame_hdr:0000000000005CE3                 db    0
.eh_frame_hdr:0000000000005CE4                 db 0C0h
.eh_frame_hdr:0000000000005CE5                 db 0F2h
.eh_frame_hdr:0000000000005CE6                 db 0FFh
.eh_frame_hdr:0000000000005CE7                 db 0FFh
.eh_frame_hdr:0000000000005CE8                 db 0C0h
.eh_frame_hdr:0000000000005CE9                 db  0Dh
.eh_frame_hdr:0000000000005CEA                 db    0
.eh_frame_hdr:0000000000005CEB                 db    0
.eh_frame_hdr:0000000000005CEC                 db  30h ; 0
.eh_frame_hdr:0000000000005CED                 db 0F3h
.eh_frame_hdr:0000000000005CEE                 db 0FFh
.eh_frame_hdr:0000000000005CEF                 db 0FFh
.eh_frame_hdr:0000000000005CF0                 db    8
.eh_frame_hdr:0000000000005CF1                 db  0Eh
.eh_frame_hdr:0000000000005CF2                 db    0
.eh_frame_hdr:0000000000005CF3                 db    0
.eh_frame_hdr:0000000000005CF4                 db  40h ; @
.eh_frame_hdr:0000000000005CF5                 db 0F3h
.eh_frame_hdr:0000000000005CF6                 db 0FFh
.eh_frame_hdr:0000000000005CF7                 db 0FFh
.eh_frame_hdr:0000000000005CF8                 db  20h
.eh_frame_hdr:0000000000005CF9                 db  0Eh
.eh_frame_hdr:0000000000005CFA                 db    0
.eh_frame_hdr:0000000000005CFB                 db    0
.eh_frame_hdr:0000000000005CFB _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005CFB
LOAD:0000000000005CFC ; ===========================================================================
LOAD:0000000000005CFC
LOAD:0000000000005CFC ; Segment type: Pure code
LOAD:0000000000005CFC ; Segment permissions: Read/Execute
LOAD:0000000000005CFC LOAD            segment byte public 'CODE' use64
LOAD:0000000000005CFC                 assume cs:LOAD
LOAD:0000000000005CFC                 ;org 5CFCh
LOAD:0000000000005CFC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005CFC                 align 20h
LOAD:0000000000005CFC LOAD            ends
LOAD:0000000000005CFC
.eh_frame:0000000000005D00 ; ===========================================================================
.eh_frame:0000000000005D00
.eh_frame:0000000000005D00 ; Segment type: Pure data
.eh_frame:0000000000005D00 ; Segment permissions: Read
.eh_frame:0000000000005D00 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005D00                 assume cs:_eh_frame
.eh_frame:0000000000005D00                 ;org 5D00h
.eh_frame:0000000000005D00                 db  14h
.eh_frame:0000000000005D01                 db    0
.eh_frame:0000000000005D02                 db    0
.eh_frame:0000000000005D03                 db    0
.eh_frame:0000000000005D04                 db    0
.eh_frame:0000000000005D05                 db    0
.eh_frame:0000000000005D06                 db    0
.eh_frame:0000000000005D07                 db    0
.eh_frame:0000000000005D08                 db    1
.eh_frame:0000000000005D09                 db  7Ah ; z
.eh_frame:0000000000005D0A                 db  52h ; R
.eh_frame:0000000000005D0B                 db    0
.eh_frame:0000000000005D0C                 db    1
.eh_frame:0000000000005D0D                 db  78h ; x
.eh_frame:0000000000005D0E                 db  10h
.eh_frame:0000000000005D0F                 db    1
.eh_frame:0000000000005D10                 db  1Bh
.eh_frame:0000000000005D11                 db  0Ch
.eh_frame:0000000000005D12                 db    7
.eh_frame:0000000000005D13                 db    8
.eh_frame:0000000000005D14                 db  90h
.eh_frame:0000000000005D15                 db    1
.eh_frame:0000000000005D16                 db    7
.eh_frame:0000000000005D17                 db  10h
.eh_frame:0000000000005D18                 db  14h
.eh_frame:0000000000005D19                 db    0
.eh_frame:0000000000005D1A                 db    0
.eh_frame:0000000000005D1B                 db    0
.eh_frame:0000000000005D1C                 db  1Ch
.eh_frame:0000000000005D1D                 db    0
.eh_frame:0000000000005D1E                 db    0
.eh_frame:0000000000005D1F                 db    0
.eh_frame:0000000000005D20                 db  90h
.eh_frame:0000000000005D21                 db 0BCh
.eh_frame:0000000000005D22                 db 0FFh
.eh_frame:0000000000005D23                 db 0FFh
.eh_frame:0000000000005D24                 db  2Bh ; +
.eh_frame:0000000000005D25                 db    0
.eh_frame:0000000000005D26                 db    0
.eh_frame:0000000000005D27                 db    0
.eh_frame:0000000000005D28                 db    0
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db    0
.eh_frame:0000000000005D2D                 db    0
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  14h
.eh_frame:0000000000005D31                 db    0
.eh_frame:0000000000005D32                 db    0
.eh_frame:0000000000005D33                 db    0
.eh_frame:0000000000005D34                 db    0
.eh_frame:0000000000005D35                 db    0
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db    1
.eh_frame:0000000000005D39                 db  7Ah ; z
.eh_frame:0000000000005D3A                 db  52h ; R
.eh_frame:0000000000005D3B                 db    0
.eh_frame:0000000000005D3C                 db    1
.eh_frame:0000000000005D3D                 db  78h ; x
.eh_frame:0000000000005D3E                 db  10h
.eh_frame:0000000000005D3F                 db    1
.eh_frame:0000000000005D40                 db  1Bh
.eh_frame:0000000000005D41                 db  0Ch
.eh_frame:0000000000005D42                 db    7
.eh_frame:0000000000005D43                 db    8
.eh_frame:0000000000005D44                 db  90h
.eh_frame:0000000000005D45                 db    1
.eh_frame:0000000000005D46                 db    0
.eh_frame:0000000000005D47                 db    0
.eh_frame:0000000000005D48                 db  24h ; $
.eh_frame:0000000000005D49                 db    0
.eh_frame:0000000000005D4A                 db    0
.eh_frame:0000000000005D4B                 db    0
.eh_frame:0000000000005D4C                 db  1Ch
.eh_frame:0000000000005D4D                 db    0
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  20h
.eh_frame:0000000000005D51                 db 0B6h
.eh_frame:0000000000005D52                 db 0FFh
.eh_frame:0000000000005D53                 db 0FFh
.eh_frame:0000000000005D54                 db  10h
.eh_frame:0000000000005D55                 db    3
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db    0
.eh_frame:0000000000005D59                 db  0Eh
.eh_frame:0000000000005D5A                 db  10h
.eh_frame:0000000000005D5B                 db  46h ; F
.eh_frame:0000000000005D5C                 db  0Eh
.eh_frame:0000000000005D5D                 db  18h
.eh_frame:0000000000005D5E                 db  4Ah ; J
.eh_frame:0000000000005D5F                 db  0Fh
.eh_frame:0000000000005D60                 db  0Bh
.eh_frame:0000000000005D61                 db  77h ; w
.eh_frame:0000000000005D62                 db    8
.eh_frame:0000000000005D63                 db  80h
.eh_frame:0000000000005D64                 db    0
.eh_frame:0000000000005D65                 db  3Fh ; ?
.eh_frame:0000000000005D66                 db  1Ah
.eh_frame:0000000000005D67                 db  3Bh ; ;
.eh_frame:0000000000005D68                 db  2Ah ; *
.eh_frame:0000000000005D69                 db  33h ; 3
.eh_frame:0000000000005D6A                 db  24h ; $
.eh_frame:0000000000005D6B                 db  22h ; "
.eh_frame:0000000000005D6C                 db    0
.eh_frame:0000000000005D6D                 db    0
.eh_frame:0000000000005D6E                 db    0
.eh_frame:0000000000005D6F                 db    0
.eh_frame:0000000000005D70                 db  14h
.eh_frame:0000000000005D71                 db    0
.eh_frame:0000000000005D72                 db    0
.eh_frame:0000000000005D73                 db    0
.eh_frame:0000000000005D74                 db  44h ; D
.eh_frame:0000000000005D75                 db    0
.eh_frame:0000000000005D76                 db    0
.eh_frame:0000000000005D77                 db    0
.eh_frame:0000000000005D78                 db    8
.eh_frame:0000000000005D79                 db 0B9h
.eh_frame:0000000000005D7A                 db 0FFh
.eh_frame:0000000000005D7B                 db 0FFh
.eh_frame:0000000000005D7C                 db    8
.eh_frame:0000000000005D7D                 db    0
.eh_frame:0000000000005D7E                 db    0
.eh_frame:0000000000005D7F                 db    0
.eh_frame:0000000000005D80                 db    0
.eh_frame:0000000000005D81                 db    0
.eh_frame:0000000000005D82                 db    0
.eh_frame:0000000000005D83                 db    0
.eh_frame:0000000000005D84                 db    0
.eh_frame:0000000000005D85                 db    0
.eh_frame:0000000000005D86                 db    0
.eh_frame:0000000000005D87                 db    0
.eh_frame:0000000000005D88                 db  28h ; (
.eh_frame:0000000000005D89                 db    0
.eh_frame:0000000000005D8A                 db    0
.eh_frame:0000000000005D8B                 db    0
.eh_frame:0000000000005D8C                 db  5Ch ; \
.eh_frame:0000000000005D8D                 db    0
.eh_frame:0000000000005D8E                 db    0
.eh_frame:0000000000005D8F                 db    0
.eh_frame:0000000000005D90                 db  30h ; 0
.eh_frame:0000000000005D91                 db 0BDh
.eh_frame:0000000000005D92                 db 0FFh
.eh_frame:0000000000005D93                 db 0FFh
.eh_frame:0000000000005D94                 db  42h ; B
.eh_frame:0000000000005D95                 db    3
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db    0
.eh_frame:0000000000005D99                 db  42h ; B
.eh_frame:0000000000005D9A                 db  0Eh
.eh_frame:0000000000005D9B                 db  10h
.eh_frame:0000000000005D9C                 db  8Dh
.eh_frame:0000000000005D9D                 db    2
.eh_frame:0000000000005D9E                 db  42h ; B
.eh_frame:0000000000005D9F                 db  0Eh
.eh_frame:0000000000005DA0                 db  18h
.eh_frame:0000000000005DA1                 db  8Ch
.eh_frame:0000000000005DA2                 db    3
.eh_frame:0000000000005DA3                 db  46h ; F
.eh_frame:0000000000005DA4                 db  0Eh
.eh_frame:0000000000005DA5                 db  20h
.eh_frame:0000000000005DA6                 db  86h
.eh_frame:0000000000005DA7                 db    4
.eh_frame:0000000000005DA8                 db  41h ; A
.eh_frame:0000000000005DA9                 db  0Eh
.eh_frame:0000000000005DAA                 db  28h ; (
.eh_frame:0000000000005DAB                 db  83h
.eh_frame:0000000000005DAC                 db    5
.eh_frame:0000000000005DAD                 db  49h ; I
.eh_frame:0000000000005DAE                 db  0Eh
.eh_frame:0000000000005DAF                 db 0B0h
.eh_frame:0000000000005DB0                 db    1
.eh_frame:0000000000005DB1                 db    0
.eh_frame:0000000000005DB2                 db    0
.eh_frame:0000000000005DB3                 db    0
.eh_frame:0000000000005DB4                 db  58h ; X
.eh_frame:0000000000005DB5                 db    0
.eh_frame:0000000000005DB6                 db    0
.eh_frame:0000000000005DB7                 db    0
.eh_frame:0000000000005DB8                 db  88h
.eh_frame:0000000000005DB9                 db    0
.eh_frame:0000000000005DBA                 db    0
.eh_frame:0000000000005DBB                 db    0
.eh_frame:0000000000005DBC                 db 0D4h
.eh_frame:0000000000005DBD                 db 0B8h
.eh_frame:0000000000005DBE                 db 0FFh
.eh_frame:0000000000005DBF                 db 0FFh
.eh_frame:0000000000005DC0                 db  15h
.eh_frame:0000000000005DC1                 db    3
.eh_frame:0000000000005DC2                 db    0
.eh_frame:0000000000005DC3                 db    0
.eh_frame:0000000000005DC4                 db    0
.eh_frame:0000000000005DC5                 db  42h ; B
.eh_frame:0000000000005DC6                 db  0Eh
.eh_frame:0000000000005DC7                 db  10h
.eh_frame:0000000000005DC8                 db  8Fh
.eh_frame:0000000000005DC9                 db    2
.eh_frame:0000000000005DCA                 db  42h ; B
.eh_frame:0000000000005DCB                 db  0Eh
.eh_frame:0000000000005DCC                 db  18h
.eh_frame:0000000000005DCD                 db  8Eh
.eh_frame:0000000000005DCE                 db    3
.eh_frame:0000000000005DCF                 db  42h ; B
.eh_frame:0000000000005DD0                 db  0Eh
.eh_frame:0000000000005DD1                 db  20h
.eh_frame:0000000000005DD2                 db  8Dh
.eh_frame:0000000000005DD3                 db    4
.eh_frame:0000000000005DD4                 db  42h ; B
.eh_frame:0000000000005DD5                 db  0Eh
.eh_frame:0000000000005DD6                 db  28h ; (
.eh_frame:0000000000005DD7                 db  8Ch
.eh_frame:0000000000005DD8                 db    5
.eh_frame:0000000000005DD9                 db  44h ; D
.eh_frame:0000000000005DDA                 db  0Eh
.eh_frame:0000000000005DDB                 db  30h ; 0
.eh_frame:0000000000005DDC                 db  86h
.eh_frame:0000000000005DDD                 db    6
.eh_frame:0000000000005DDE                 db  41h ; A
.eh_frame:0000000000005DDF                 db  0Eh
.eh_frame:0000000000005DE0                 db  38h ; 8
.eh_frame:0000000000005DE1                 db  83h
.eh_frame:0000000000005DE2                 db    7
.eh_frame:0000000000005DE3                 db  47h ; G
.eh_frame:0000000000005DE4                 db  0Eh
.eh_frame:0000000000005DE5                 db  40h ; @
.eh_frame:0000000000005DE6                 db    2
.eh_frame:0000000000005DE7                 db  74h ; t
.eh_frame:0000000000005DE8                 db  0Ah
.eh_frame:0000000000005DE9                 db  0Eh
.eh_frame:0000000000005DEA                 db  48h ; H
.eh_frame:0000000000005DEB                 db  50h ; P
.eh_frame:0000000000005DEC                 db  0Eh
.eh_frame:0000000000005DED                 db  50h ; P
.eh_frame:0000000000005DEE                 db  6Ah ; j
.eh_frame:0000000000005DEF                 db  0Bh
.eh_frame:0000000000005DF0                 db    3
.eh_frame:0000000000005DF1                 db  8Bh
.eh_frame:0000000000005DF2                 db    1
.eh_frame:0000000000005DF3                 db  0Ah
.eh_frame:0000000000005DF4                 db  0Eh
.eh_frame:0000000000005DF5                 db  38h ; 8
.eh_frame:0000000000005DF6                 db  45h ; E
.eh_frame:0000000000005DF7                 db  0Eh
.eh_frame:0000000000005DF8                 db  30h ; 0
.eh_frame:0000000000005DF9                 db  41h ; A
.eh_frame:0000000000005DFA                 db  0Eh
.eh_frame:0000000000005DFB                 db  28h ; (
.eh_frame:0000000000005DFC                 db  42h ; B
.eh_frame:0000000000005DFD                 db  0Eh
.eh_frame:0000000000005DFE                 db  20h
.eh_frame:0000000000005DFF                 db  42h ; B
.eh_frame:0000000000005E00                 db  0Eh
.eh_frame:0000000000005E01                 db  18h
.eh_frame:0000000000005E02                 db  42h ; B
.eh_frame:0000000000005E03                 db  0Eh
.eh_frame:0000000000005E04                 db  10h
.eh_frame:0000000000005E05                 db  42h ; B
.eh_frame:0000000000005E06                 db  0Eh
.eh_frame:0000000000005E07                 db    8
.eh_frame:0000000000005E08                 db  41h ; A
.eh_frame:0000000000005E09                 db  0Bh
.eh_frame:0000000000005E0A                 db    0
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db    0
.eh_frame:0000000000005E0D                 db    0
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db  24h ; $
.eh_frame:0000000000005E11                 db    0
.eh_frame:0000000000005E12                 db    0
.eh_frame:0000000000005E13                 db    0
.eh_frame:0000000000005E14                 db 0E4h
.eh_frame:0000000000005E15                 db    0
.eh_frame:0000000000005E16                 db    0
.eh_frame:0000000000005E17                 db    0
.eh_frame:0000000000005E18                 db 0F8h
.eh_frame:0000000000005E19                 db 0BFh
.eh_frame:0000000000005E1A                 db 0FFh
.eh_frame:0000000000005E1B                 db 0FFh
.eh_frame:0000000000005E1C                 db  77h ; w
.eh_frame:0000000000005E1D                 db    0
.eh_frame:0000000000005E1E                 db    0
.eh_frame:0000000000005E1F                 db    0
.eh_frame:0000000000005E20                 db    0
.eh_frame:0000000000005E21                 db  41h ; A
.eh_frame:0000000000005E22                 db  0Eh
.eh_frame:0000000000005E23                 db  10h
.eh_frame:0000000000005E24                 db  86h
.eh_frame:0000000000005E25                 db    2
.eh_frame:0000000000005E26                 db  41h ; A
.eh_frame:0000000000005E27                 db  0Eh
.eh_frame:0000000000005E28                 db  18h
.eh_frame:0000000000005E29                 db  83h
.eh_frame:0000000000005E2A                 db    3
.eh_frame:0000000000005E2B                 db  4Bh ; K
.eh_frame:0000000000005E2C                 db  0Eh
.eh_frame:0000000000005E2D                 db  20h
.eh_frame:0000000000005E2E                 db    2
.eh_frame:0000000000005E2F                 db  65h ; e
.eh_frame:0000000000005E30                 db  0Eh
.eh_frame:0000000000005E31                 db  18h
.eh_frame:0000000000005E32                 db  43h ; C
.eh_frame:0000000000005E33                 db  0Eh
.eh_frame:0000000000005E34                 db  10h
.eh_frame:0000000000005E35                 db  41h ; A
.eh_frame:0000000000005E36                 db  0Eh
.eh_frame:0000000000005E37                 db    8
.eh_frame:0000000000005E38                 db  4Ch ; L
.eh_frame:0000000000005E39                 db    0
.eh_frame:0000000000005E3A                 db    0
.eh_frame:0000000000005E3B                 db    0
.eh_frame:0000000000005E3C                 db  0Ch
.eh_frame:0000000000005E3D                 db    1
.eh_frame:0000000000005E3E                 db    0
.eh_frame:0000000000005E3F                 db    0
.eh_frame:0000000000005E40                 db  50h ; P
.eh_frame:0000000000005E41                 db 0C0h
.eh_frame:0000000000005E42                 db 0FFh
.eh_frame:0000000000005E43                 db 0FFh
.eh_frame:0000000000005E44                 db  23h ; #
.eh_frame:0000000000005E45                 db    2
.eh_frame:0000000000005E46                 db    0
.eh_frame:0000000000005E47                 db    0
.eh_frame:0000000000005E48                 db    0
.eh_frame:0000000000005E49                 db  42h ; B
.eh_frame:0000000000005E4A                 db  0Eh
.eh_frame:0000000000005E4B                 db  10h
.eh_frame:0000000000005E4C                 db  8Fh
.eh_frame:0000000000005E4D                 db    2
.eh_frame:0000000000005E4E                 db  42h ; B
.eh_frame:0000000000005E4F                 db  0Eh
.eh_frame:0000000000005E50                 db  18h
.eh_frame:0000000000005E51                 db  8Eh
.eh_frame:0000000000005E52                 db    3
.eh_frame:0000000000005E53                 db  45h ; E
.eh_frame:0000000000005E54                 db  0Eh
.eh_frame:0000000000005E55                 db  20h
.eh_frame:0000000000005E56                 db  8Dh
.eh_frame:0000000000005E57                 db    4
.eh_frame:0000000000005E58                 db  42h ; B
.eh_frame:0000000000005E59                 db  0Eh
.eh_frame:0000000000005E5A                 db  28h ; (
.eh_frame:0000000000005E5B                 db  8Ch
.eh_frame:0000000000005E5C                 db    5
.eh_frame:0000000000005E5D                 db  44h ; D
.eh_frame:0000000000005E5E                 db  0Eh
.eh_frame:0000000000005E5F                 db  30h ; 0
.eh_frame:0000000000005E60                 db  86h
.eh_frame:0000000000005E61                 db    6
.eh_frame:0000000000005E62                 db  41h ; A
.eh_frame:0000000000005E63                 db  0Eh
.eh_frame:0000000000005E64                 db  38h ; 8
.eh_frame:0000000000005E65                 db  83h
.eh_frame:0000000000005E66                 db    7
.eh_frame:0000000000005E67                 db  49h ; I
.eh_frame:0000000000005E68                 db  0Eh
.eh_frame:0000000000005E69                 db  60h ; `
.eh_frame:0000000000005E6A                 db    3
.eh_frame:0000000000005E6B                 db  54h ; T
.eh_frame:0000000000005E6C                 db    1
.eh_frame:0000000000005E6D                 db  0Ah
.eh_frame:0000000000005E6E                 db  0Eh
.eh_frame:0000000000005E6F                 db  38h ; 8
.eh_frame:0000000000005E70                 db  41h ; A
.eh_frame:0000000000005E71                 db  0Eh
.eh_frame:0000000000005E72                 db  30h ; 0
.eh_frame:0000000000005E73                 db  41h ; A
.eh_frame:0000000000005E74                 db  0Eh
.eh_frame:0000000000005E75                 db  28h ; (
.eh_frame:0000000000005E76                 db  42h ; B
.eh_frame:0000000000005E77                 db  0Eh
.eh_frame:0000000000005E78                 db  20h
.eh_frame:0000000000005E79                 db  42h ; B
.eh_frame:0000000000005E7A                 db  0Eh
.eh_frame:0000000000005E7B                 db  18h
.eh_frame:0000000000005E7C                 db  42h ; B
.eh_frame:0000000000005E7D                 db  0Eh
.eh_frame:0000000000005E7E                 db  10h
.eh_frame:0000000000005E7F                 db  42h ; B
.eh_frame:0000000000005E80                 db  0Eh
.eh_frame:0000000000005E81                 db    8
.eh_frame:0000000000005E82                 db  49h ; I
.eh_frame:0000000000005E83                 db  0Bh
.eh_frame:0000000000005E84                 db    0
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db  10h
.eh_frame:0000000000005E89                 db    0
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db  5Ch ; \
.eh_frame:0000000000005E8D                 db    1
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db  30h ; 0
.eh_frame:0000000000005E91                 db 0C2h
.eh_frame:0000000000005E92                 db 0FFh
.eh_frame:0000000000005E93                 db 0FFh
.eh_frame:0000000000005E94                 db    8
.eh_frame:0000000000005E95                 db    0
.eh_frame:0000000000005E96                 db    0
.eh_frame:0000000000005E97                 db    0
.eh_frame:0000000000005E98                 db    0
.eh_frame:0000000000005E99                 db    0
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db  10h
.eh_frame:0000000000005E9D                 db    0
.eh_frame:0000000000005E9E                 db    0
.eh_frame:0000000000005E9F                 db    0
.eh_frame:0000000000005EA0                 db  70h ; p
.eh_frame:0000000000005EA1                 db    1
.eh_frame:0000000000005EA2                 db    0
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db  2Ch ; ,
.eh_frame:0000000000005EA5                 db 0C2h
.eh_frame:0000000000005EA6                 db 0FFh
.eh_frame:0000000000005EA7                 db 0FFh
.eh_frame:0000000000005EA8                 db    8
.eh_frame:0000000000005EA9                 db    0
.eh_frame:0000000000005EAA                 db    0
.eh_frame:0000000000005EAB                 db    0
.eh_frame:0000000000005EAC                 db    0
.eh_frame:0000000000005EAD                 db    0
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db  2Ch ; ,
.eh_frame:0000000000005EB1                 db    0
.eh_frame:0000000000005EB2                 db    0
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db  84h
.eh_frame:0000000000005EB5                 db    1
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db  28h ; (
.eh_frame:0000000000005EB9                 db 0C2h
.eh_frame:0000000000005EBA                 db 0FFh
.eh_frame:0000000000005EBB                 db 0FFh
.eh_frame:0000000000005EBC                 db 0A4h
.eh_frame:0000000000005EBD                 db    0
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db    0
.eh_frame:0000000000005EC1                 db  41h ; A
.eh_frame:0000000000005EC2                 db  0Eh
.eh_frame:0000000000005EC3                 db  10h
.eh_frame:0000000000005EC4                 db  86h
.eh_frame:0000000000005EC5                 db    2
.eh_frame:0000000000005EC6                 db  41h ; A
.eh_frame:0000000000005EC7                 db  0Eh
.eh_frame:0000000000005EC8                 db  18h
.eh_frame:0000000000005EC9                 db  83h
.eh_frame:0000000000005ECA                 db    3
.eh_frame:0000000000005ECB                 db  44h ; D
.eh_frame:0000000000005ECC                 db  0Eh
.eh_frame:0000000000005ECD                 db  20h
.eh_frame:0000000000005ECE                 db  7Ah ; z
.eh_frame:0000000000005ECF                 db  0Ah
.eh_frame:0000000000005ED0                 db  0Eh
.eh_frame:0000000000005ED1                 db  18h
.eh_frame:0000000000005ED2                 db  41h ; A
.eh_frame:0000000000005ED3                 db  0Eh
.eh_frame:0000000000005ED4                 db  10h
.eh_frame:0000000000005ED5                 db  41h ; A
.eh_frame:0000000000005ED6                 db  0Eh
.eh_frame:0000000000005ED7                 db    8
.eh_frame:0000000000005ED8                 db  41h ; A
.eh_frame:0000000000005ED9                 db  0Bh
.eh_frame:0000000000005EDA                 db    0
.eh_frame:0000000000005EDB                 db    0
.eh_frame:0000000000005EDC                 db    0
.eh_frame:0000000000005EDD                 db    0
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db  14h
.eh_frame:0000000000005EE1                 db    0
.eh_frame:0000000000005EE2                 db    0
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db 0B4h
.eh_frame:0000000000005EE5                 db    1
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db 0A8h
.eh_frame:0000000000005EE9                 db 0C2h
.eh_frame:0000000000005EEA                 db 0FFh
.eh_frame:0000000000005EEB                 db 0FFh
.eh_frame:0000000000005EEC                 db  42h ; B
.eh_frame:0000000000005EED                 db    0
.eh_frame:0000000000005EEE                 db    0
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db    0
.eh_frame:0000000000005EF1                 db    0
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db    0
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db  1Ch
.eh_frame:0000000000005EF9                 db    0
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db 0CCh
.eh_frame:0000000000005EFD                 db    1
.eh_frame:0000000000005EFE                 db    0
.eh_frame:0000000000005EFF                 db    0
.eh_frame:0000000000005F00                 db 0E0h
.eh_frame:0000000000005F01                 db 0C2h
.eh_frame:0000000000005F02                 db 0FFh
.eh_frame:0000000000005F03                 db 0FFh
.eh_frame:0000000000005F04                 db  9Fh
.eh_frame:0000000000005F05                 db    0
.eh_frame:0000000000005F06                 db    0
.eh_frame:0000000000005F07                 db    0
.eh_frame:0000000000005F08                 db    0
.eh_frame:0000000000005F09                 db  44h ; D
.eh_frame:0000000000005F0A                 db  0Eh
.eh_frame:0000000000005F0B                 db  10h
.eh_frame:0000000000005F0C                 db  83h
.eh_frame:0000000000005F0D                 db    2
.eh_frame:0000000000005F0E                 db    2
.eh_frame:0000000000005F0F                 db  78h ; x
.eh_frame:0000000000005F10                 db  0Ah
.eh_frame:0000000000005F11                 db  0Eh
.eh_frame:0000000000005F12                 db    8
.eh_frame:0000000000005F13                 db  41h ; A
.eh_frame:0000000000005F14                 db  0Bh
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db  40h ; @
.eh_frame:0000000000005F19                 db    0
.eh_frame:0000000000005F1A                 db    0
.eh_frame:0000000000005F1B                 db    0
.eh_frame:0000000000005F1C                 db 0ECh
.eh_frame:0000000000005F1D                 db    1
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db  60h ; `
.eh_frame:0000000000005F21                 db 0C3h
.eh_frame:0000000000005F22                 db 0FFh
.eh_frame:0000000000005F23                 db 0FFh
.eh_frame:0000000000005F24                 db 0E7h
.eh_frame:0000000000005F25                 db    0
.eh_frame:0000000000005F26                 db    0
.eh_frame:0000000000005F27                 db    0
.eh_frame:0000000000005F28                 db    0
.eh_frame:0000000000005F29                 db  41h ; A
.eh_frame:0000000000005F2A                 db  0Eh
.eh_frame:0000000000005F2B                 db  10h
.eh_frame:0000000000005F2C                 db  86h
.eh_frame:0000000000005F2D                 db    2
.eh_frame:0000000000005F2E                 db  41h ; A
.eh_frame:0000000000005F2F                 db  0Eh
.eh_frame:0000000000005F30                 db  18h
.eh_frame:0000000000005F31                 db  83h
.eh_frame:0000000000005F32                 db    3
.eh_frame:0000000000005F33                 db  49h ; I
.eh_frame:0000000000005F34                 db  0Eh
.eh_frame:0000000000005F35                 db  20h
.eh_frame:0000000000005F36                 db  6Eh ; n
.eh_frame:0000000000005F37                 db  0Ah
.eh_frame:0000000000005F38                 db  0Eh
.eh_frame:0000000000005F39                 db  18h
.eh_frame:0000000000005F3A                 db  41h ; A
.eh_frame:0000000000005F3B                 db  0Eh
.eh_frame:0000000000005F3C                 db  10h
.eh_frame:0000000000005F3D                 db  41h ; A
.eh_frame:0000000000005F3E                 db  0Eh
.eh_frame:0000000000005F3F                 db    8
.eh_frame:0000000000005F40                 db  45h ; E
.eh_frame:0000000000005F41                 db  0Bh
.eh_frame:0000000000005F42                 db    2
.eh_frame:0000000000005F43                 db  4Ah ; J
.eh_frame:0000000000005F44                 db  0Ah
.eh_frame:0000000000005F45                 db  0Eh
.eh_frame:0000000000005F46                 db  18h
.eh_frame:0000000000005F47                 db  41h ; A
.eh_frame:0000000000005F48                 db  0Eh
.eh_frame:0000000000005F49                 db  10h
.eh_frame:0000000000005F4A                 db  41h ; A
.eh_frame:0000000000005F4B                 db  0Eh
.eh_frame:0000000000005F4C                 db    8
.eh_frame:0000000000005F4D                 db  44h ; D
.eh_frame:0000000000005F4E                 db  0Bh
.eh_frame:0000000000005F4F                 db    2
.eh_frame:0000000000005F50                 db  54h ; T
.eh_frame:0000000000005F51                 db  0Eh
.eh_frame:0000000000005F52                 db  18h
.eh_frame:0000000000005F53                 db  41h ; A
.eh_frame:0000000000005F54                 db  0Eh
.eh_frame:0000000000005F55                 db  10h
.eh_frame:0000000000005F56                 db  41h ; A
.eh_frame:0000000000005F57                 db  0Eh
.eh_frame:0000000000005F58                 db    8
.eh_frame:0000000000005F59                 db    0
.eh_frame:0000000000005F5A                 db    0
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db  74h ; t
.eh_frame:0000000000005F5D                 db    0
.eh_frame:0000000000005F5E                 db    0
.eh_frame:0000000000005F5F                 db    0
.eh_frame:0000000000005F60                 db  30h ; 0
.eh_frame:0000000000005F61                 db    2
.eh_frame:0000000000005F62                 db    0
.eh_frame:0000000000005F63                 db    0
.eh_frame:0000000000005F64                 db  0Ch
.eh_frame:0000000000005F65                 db 0C4h
.eh_frame:0000000000005F66                 db 0FFh
.eh_frame:0000000000005F67                 db 0FFh
.eh_frame:0000000000005F68                 db  34h ; 4
.eh_frame:0000000000005F69                 db  12h
.eh_frame:0000000000005F6A                 db    0
.eh_frame:0000000000005F6B                 db    0
.eh_frame:0000000000005F6C                 db    0
.eh_frame:0000000000005F6D                 db  42h ; B
.eh_frame:0000000000005F6E                 db  0Eh
.eh_frame:0000000000005F6F                 db  10h
.eh_frame:0000000000005F70                 db  8Fh
.eh_frame:0000000000005F71                 db    2
.eh_frame:0000000000005F72                 db  42h ; B
.eh_frame:0000000000005F73                 db  0Eh
.eh_frame:0000000000005F74                 db  18h
.eh_frame:0000000000005F75                 db  8Eh
.eh_frame:0000000000005F76                 db    3
.eh_frame:0000000000005F77                 db  45h ; E
.eh_frame:0000000000005F78                 db  0Eh
.eh_frame:0000000000005F79                 db  20h
.eh_frame:0000000000005F7A                 db  8Dh
.eh_frame:0000000000005F7B                 db    4
.eh_frame:0000000000005F7C                 db  42h ; B
.eh_frame:0000000000005F7D                 db  0Eh
.eh_frame:0000000000005F7E                 db  28h ; (
.eh_frame:0000000000005F7F                 db  8Ch
.eh_frame:0000000000005F80                 db    5
.eh_frame:0000000000005F81                 db  44h ; D
.eh_frame:0000000000005F82                 db  0Eh
.eh_frame:0000000000005F83                 db  30h ; 0
.eh_frame:0000000000005F84                 db  86h
.eh_frame:0000000000005F85                 db    6
.eh_frame:0000000000005F86                 db  41h ; A
.eh_frame:0000000000005F87                 db  0Eh
.eh_frame:0000000000005F88                 db  38h ; 8
.eh_frame:0000000000005F89                 db  83h
.eh_frame:0000000000005F8A                 db    7
.eh_frame:0000000000005F8B                 db  53h ; S
.eh_frame:0000000000005F8C                 db  0Eh
.eh_frame:0000000000005F8D                 db 0F0h
.eh_frame:0000000000005F8E                 db    1
.eh_frame:0000000000005F8F                 db    3
.eh_frame:0000000000005F90                 db  81h
.eh_frame:0000000000005F91                 db  0Bh
.eh_frame:0000000000005F92                 db  0Eh
.eh_frame:0000000000005F93                 db 0F8h
.eh_frame:0000000000005F94                 db    1
.eh_frame:0000000000005F95                 db  4Ah ; J
.eh_frame:0000000000005F96                 db  0Eh
.eh_frame:0000000000005F97                 db  80h
.eh_frame:0000000000005F98                 db    2
.eh_frame:0000000000005F99                 db  44h ; D
.eh_frame:0000000000005F9A                 db  0Eh
.eh_frame:0000000000005F9B                 db  88h
.eh_frame:0000000000005F9C                 db    2
.eh_frame:0000000000005F9D                 db  45h ; E
.eh_frame:0000000000005F9E                 db  0Eh
.eh_frame:0000000000005F9F                 db  90h
.eh_frame:0000000000005FA0                 db    2
.eh_frame:0000000000005FA1                 db  5Fh ; _
.eh_frame:0000000000005FA2                 db  0Eh
.eh_frame:0000000000005FA3                 db 0F0h
.eh_frame:0000000000005FA4                 db    1
.eh_frame:0000000000005FA5                 db  64h ; d
.eh_frame:0000000000005FA6                 db  0Ah
.eh_frame:0000000000005FA7                 db  0Eh
.eh_frame:0000000000005FA8                 db  38h ; 8
.eh_frame:0000000000005FA9                 db  41h ; A
.eh_frame:0000000000005FAA                 db  0Eh
.eh_frame:0000000000005FAB                 db  30h ; 0
.eh_frame:0000000000005FAC                 db  41h ; A
.eh_frame:0000000000005FAD                 db  0Eh
.eh_frame:0000000000005FAE                 db  28h ; (
.eh_frame:0000000000005FAF                 db  42h ; B
.eh_frame:0000000000005FB0                 db  0Eh
.eh_frame:0000000000005FB1                 db  20h
.eh_frame:0000000000005FB2                 db  42h ; B
.eh_frame:0000000000005FB3                 db  0Eh
.eh_frame:0000000000005FB4                 db  18h
.eh_frame:0000000000005FB5                 db  42h ; B
.eh_frame:0000000000005FB6                 db  0Eh
.eh_frame:0000000000005FB7                 db  10h
.eh_frame:0000000000005FB8                 db  42h ; B
.eh_frame:0000000000005FB9                 db  0Eh
.eh_frame:0000000000005FBA                 db    8
.eh_frame:0000000000005FBB                 db  44h ; D
.eh_frame:0000000000005FBC                 db  0Bh
.eh_frame:0000000000005FBD                 db    3
.eh_frame:0000000000005FBE                 db  99h
.eh_frame:0000000000005FBF                 db    5
.eh_frame:0000000000005FC0                 db  0Eh
.eh_frame:0000000000005FC1                 db 0F8h
.eh_frame:0000000000005FC2                 db    1
.eh_frame:0000000000005FC3                 db  4Dh ; M
.eh_frame:0000000000005FC4                 db  0Eh
.eh_frame:0000000000005FC5                 db  80h
.eh_frame:0000000000005FC6                 db    2
.eh_frame:0000000000005FC7                 db  44h ; D
.eh_frame:0000000000005FC8                 db  0Eh
.eh_frame:0000000000005FC9                 db  88h
.eh_frame:0000000000005FCA                 db    2
.eh_frame:0000000000005FCB                 db  47h ; G
.eh_frame:0000000000005FCC                 db  0Eh
.eh_frame:0000000000005FCD                 db  90h
.eh_frame:0000000000005FCE                 db    2
.eh_frame:0000000000005FCF                 db  5Bh ; [
.eh_frame:0000000000005FD0                 db  0Eh
.eh_frame:0000000000005FD1                 db 0F0h
.eh_frame:0000000000005FD2                 db    1
.eh_frame:0000000000005FD3                 db    0
.eh_frame:0000000000005FD4                 db  68h ; h
.eh_frame:0000000000005FD5                 db    0
.eh_frame:0000000000005FD6                 db    0
.eh_frame:0000000000005FD7                 db    0
.eh_frame:0000000000005FD8                 db 0A8h
.eh_frame:0000000000005FD9                 db    2
.eh_frame:0000000000005FDA                 db    0
.eh_frame:0000000000005FDB                 db    0
.eh_frame:0000000000005FDC                 db 0D4h
.eh_frame:0000000000005FDD                 db 0D5h
.eh_frame:0000000000005FDE                 db 0FFh
.eh_frame:0000000000005FDF                 db 0FFh
.eh_frame:0000000000005FE0                 db 0ABh
.eh_frame:0000000000005FE1                 db    1
.eh_frame:0000000000005FE2                 db    0
.eh_frame:0000000000005FE3                 db    0
.eh_frame:0000000000005FE4                 db    0
.eh_frame:0000000000005FE5                 db  42h ; B
.eh_frame:0000000000005FE6                 db  0Eh
.eh_frame:0000000000005FE7                 db  10h
.eh_frame:0000000000005FE8                 db  8Fh
.eh_frame:0000000000005FE9                 db    2
.eh_frame:0000000000005FEA                 db  42h ; B
.eh_frame:0000000000005FEB                 db  0Eh
.eh_frame:0000000000005FEC                 db  18h
.eh_frame:0000000000005FED                 db  8Eh
.eh_frame:0000000000005FEE                 db    3
.eh_frame:0000000000005FEF                 db  45h ; E
.eh_frame:0000000000005FF0                 db  0Eh
.eh_frame:0000000000005FF1                 db  20h
.eh_frame:0000000000005FF2                 db  8Dh
.eh_frame:0000000000005FF3                 db    4
.eh_frame:0000000000005FF4                 db  42h ; B
.eh_frame:0000000000005FF5                 db  0Eh
.eh_frame:0000000000005FF6                 db  28h ; (
.eh_frame:0000000000005FF7                 db  8Ch
.eh_frame:0000000000005FF8                 db    5
.eh_frame:0000000000005FF9                 db  44h ; D
.eh_frame:0000000000005FFA                 db  0Eh
.eh_frame:0000000000005FFB                 db  30h ; 0
.eh_frame:0000000000005FFC                 db  86h
.eh_frame:0000000000005FFD                 db    6
.eh_frame:0000000000005FFE                 db  41h ; A
.eh_frame:0000000000005FFF                 db  0Eh
.eh_frame:0000000000006000                 db  38h ; 8
.eh_frame:0000000000006001                 db  83h
.eh_frame:0000000000006002                 db    7
.eh_frame:0000000000006003                 db  47h ; G
.eh_frame:0000000000006004                 db  0Eh
.eh_frame:0000000000006005                 db  60h ; `
.eh_frame:0000000000006006                 db    2
.eh_frame:0000000000006007                 db  99h
.eh_frame:0000000000006008                 db  0Eh
.eh_frame:0000000000006009                 db  68h ; h
.eh_frame:000000000000600A                 db  5Fh ; _
.eh_frame:000000000000600B                 db  0Eh
.eh_frame:000000000000600C                 db  70h ; p
.eh_frame:000000000000600D                 db  46h ; F
.eh_frame:000000000000600E                 db  0Eh
.eh_frame:000000000000600F                 db  78h ; x
.eh_frame:0000000000006010                 db  42h ; B
.eh_frame:0000000000006011                 db  0Eh
.eh_frame:0000000000006012                 db  80h
.eh_frame:0000000000006013                 db    1
.eh_frame:0000000000006014                 db  59h ; Y
.eh_frame:0000000000006015                 db  0Eh
.eh_frame:0000000000006016                 db  60h ; `
.eh_frame:0000000000006017                 db    2
.eh_frame:0000000000006018                 db  40h ; @
.eh_frame:0000000000006019                 db  0Eh
.eh_frame:000000000000601A                 db  68h ; h
.eh_frame:000000000000601B                 db  4Bh ; K
.eh_frame:000000000000601C                 db  0Eh
.eh_frame:000000000000601D                 db  70h ; p
.eh_frame:000000000000601E                 db  43h ; C
.eh_frame:000000000000601F                 db  0Eh
.eh_frame:0000000000006020                 db  78h ; x
.eh_frame:0000000000006021                 db  45h ; E
.eh_frame:0000000000006022                 db  0Eh
.eh_frame:0000000000006023                 db  80h
.eh_frame:0000000000006024                 db    1
.eh_frame:0000000000006025                 db  5Eh ; ^
.eh_frame:0000000000006026                 db  0Eh
.eh_frame:0000000000006027                 db  60h ; `
.eh_frame:0000000000006028                 db  4Ch ; L
.eh_frame:0000000000006029                 db  0Ah
.eh_frame:000000000000602A                 db  0Eh
.eh_frame:000000000000602B                 db  38h ; 8
.eh_frame:000000000000602C                 db  44h ; D
.eh_frame:000000000000602D                 db  0Eh
.eh_frame:000000000000602E                 db  30h ; 0
.eh_frame:000000000000602F                 db  41h ; A
.eh_frame:0000000000006030                 db  0Eh
.eh_frame:0000000000006031                 db  28h ; (
.eh_frame:0000000000006032                 db  42h ; B
.eh_frame:0000000000006033                 db  0Eh
.eh_frame:0000000000006034                 db  20h
.eh_frame:0000000000006035                 db  42h ; B
.eh_frame:0000000000006036                 db  0Eh
.eh_frame:0000000000006037                 db  18h
.eh_frame:0000000000006038                 db  42h ; B
.eh_frame:0000000000006039                 db  0Eh
.eh_frame:000000000000603A                 db  10h
.eh_frame:000000000000603B                 db  42h ; B
.eh_frame:000000000000603C                 db  0Eh
.eh_frame:000000000000603D                 db    8
.eh_frame:000000000000603E                 db  46h ; F
.eh_frame:000000000000603F                 db  0Bh
.eh_frame:0000000000006040                 db  28h ; (
.eh_frame:0000000000006041                 db    0
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db  14h
.eh_frame:0000000000006045                 db    3
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db  18h
.eh_frame:0000000000006049                 db 0D7h
.eh_frame:000000000000604A                 db 0FFh
.eh_frame:000000000000604B                 db 0FFh
.eh_frame:000000000000604C                 db  36h ; 6
.eh_frame:000000000000604D                 db    0
.eh_frame:000000000000604E                 db    0
.eh_frame:000000000000604F                 db    0
.eh_frame:0000000000006050                 db    0
.eh_frame:0000000000006051                 db  42h ; B
.eh_frame:0000000000006052                 db  0Eh
.eh_frame:0000000000006053                 db  10h
.eh_frame:0000000000006054                 db  8Ch
.eh_frame:0000000000006055                 db    2
.eh_frame:0000000000006056                 db  41h ; A
.eh_frame:0000000000006057                 db  0Eh
.eh_frame:0000000000006058                 db  18h
.eh_frame:0000000000006059                 db  86h
.eh_frame:000000000000605A                 db    3
.eh_frame:000000000000605B                 db  41h ; A
.eh_frame:000000000000605C                 db  0Eh
.eh_frame:000000000000605D                 db  20h
.eh_frame:000000000000605E                 db  83h
.eh_frame:000000000000605F                 db    4
.eh_frame:0000000000006060                 db  6Eh ; n
.eh_frame:0000000000006061                 db  0Eh
.eh_frame:0000000000006062                 db  18h
.eh_frame:0000000000006063                 db  41h ; A
.eh_frame:0000000000006064                 db  0Eh
.eh_frame:0000000000006065                 db  10h
.eh_frame:0000000000006066                 db  42h ; B
.eh_frame:0000000000006067                 db  0Eh
.eh_frame:0000000000006068                 db    8
.eh_frame:0000000000006069                 db    0
.eh_frame:000000000000606A                 db    0
.eh_frame:000000000000606B                 db    0
.eh_frame:000000000000606C                 db  10h
.eh_frame:000000000000606D                 db    0
.eh_frame:000000000000606E                 db    0
.eh_frame:000000000000606F                 db    0
.eh_frame:0000000000006070                 db  40h ; @
.eh_frame:0000000000006071                 db    3
.eh_frame:0000000000006072                 db    0
.eh_frame:0000000000006073                 db    0
.eh_frame:0000000000006074                 db  2Ch ; ,
.eh_frame:0000000000006075                 db 0D7h
.eh_frame:0000000000006076                 db 0FFh
.eh_frame:0000000000006077                 db 0FFh
.eh_frame:0000000000006078                 db  11h
.eh_frame:0000000000006079                 db    0
.eh_frame:000000000000607A                 db    0
.eh_frame:000000000000607B                 db    0
.eh_frame:000000000000607C                 db    0
.eh_frame:000000000000607D                 db    0
.eh_frame:000000000000607E                 db    0
.eh_frame:000000000000607F                 db    0
.eh_frame:0000000000006080                 db  10h
.eh_frame:0000000000006081                 db    0
.eh_frame:0000000000006082                 db    0
.eh_frame:0000000000006083                 db    0
.eh_frame:0000000000006084                 db  54h ; T
.eh_frame:0000000000006085                 db    3
.eh_frame:0000000000006086                 db    0
.eh_frame:0000000000006087                 db    0
.eh_frame:0000000000006088                 db  38h ; 8
.eh_frame:0000000000006089                 db 0D7h
.eh_frame:000000000000608A                 db 0FFh
.eh_frame:000000000000608B                 db 0FFh
.eh_frame:000000000000608C                 db  11h
.eh_frame:000000000000608D                 db    0
.eh_frame:000000000000608E                 db    0
.eh_frame:000000000000608F                 db    0
.eh_frame:0000000000006090                 db    0
.eh_frame:0000000000006091                 db    0
.eh_frame:0000000000006092                 db    0
.eh_frame:0000000000006093                 db    0
.eh_frame:0000000000006094                 db  10h
.eh_frame:0000000000006095                 db    0
.eh_frame:0000000000006096                 db    0
.eh_frame:0000000000006097                 db    0
.eh_frame:0000000000006098                 db  68h ; h
.eh_frame:0000000000006099                 db    3
.eh_frame:000000000000609A                 db    0
.eh_frame:000000000000609B                 db    0
.eh_frame:000000000000609C                 db  44h ; D
.eh_frame:000000000000609D                 db 0D7h
.eh_frame:000000000000609E                 db 0FFh
.eh_frame:000000000000609F                 db 0FFh
.eh_frame:00000000000060A0                 db  35h ; 5
.eh_frame:00000000000060A1                 db    0
.eh_frame:00000000000060A2                 db    0
.eh_frame:00000000000060A3                 db    0
.eh_frame:00000000000060A4                 db    0
.eh_frame:00000000000060A5                 db    0
.eh_frame:00000000000060A6                 db    0
.eh_frame:00000000000060A7                 db    0
.eh_frame:00000000000060A8                 db  10h
.eh_frame:00000000000060A9                 db    0
.eh_frame:00000000000060AA                 db    0
.eh_frame:00000000000060AB                 db    0
.eh_frame:00000000000060AC                 db  7Ch ; |
.eh_frame:00000000000060AD                 db    3
.eh_frame:00000000000060AE                 db    0
.eh_frame:00000000000060AF                 db    0
.eh_frame:00000000000060B0                 db  70h ; p
.eh_frame:00000000000060B1                 db 0D7h
.eh_frame:00000000000060B2                 db 0FFh
.eh_frame:00000000000060B3                 db 0FFh
.eh_frame:00000000000060B4                 db  15h
.eh_frame:00000000000060B5                 db    0
.eh_frame:00000000000060B6                 db    0
.eh_frame:00000000000060B7                 db    0
.eh_frame:00000000000060B8                 db    0
.eh_frame:00000000000060B9                 db    0
.eh_frame:00000000000060BA                 db    0
.eh_frame:00000000000060BB                 db    0
.eh_frame:00000000000060BC                 db  10h
.eh_frame:00000000000060BD                 db    0
.eh_frame:00000000000060BE                 db    0
.eh_frame:00000000000060BF                 db    0
.eh_frame:00000000000060C0                 db  90h
.eh_frame:00000000000060C1                 db    3
.eh_frame:00000000000060C2                 db    0
.eh_frame:00000000000060C3                 db    0
.eh_frame:00000000000060C4                 db  7Ch ; |
.eh_frame:00000000000060C5                 db 0D7h
.eh_frame:00000000000060C6                 db 0FFh
.eh_frame:00000000000060C7                 db 0FFh
.eh_frame:00000000000060C8                 db  30h ; 0
.eh_frame:00000000000060C9                 db    0
.eh_frame:00000000000060CA                 db    0
.eh_frame:00000000000060CB                 db    0
.eh_frame:00000000000060CC                 db    0
.eh_frame:00000000000060CD                 db  6Bh ; k
.eh_frame:00000000000060CE                 db  0Eh
.eh_frame:00000000000060CF                 db  10h
.eh_frame:00000000000060D0                 db  50h ; P
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db 0A4h
.eh_frame:00000000000060D5                 db    3
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db  98h
.eh_frame:00000000000060D9                 db 0D7h
.eh_frame:00000000000060DA                 db 0FFh
.eh_frame:00000000000060DB                 db 0FFh
.eh_frame:00000000000060DC                 db  74h ; t
.eh_frame:00000000000060DD                 db    0
.eh_frame:00000000000060DE                 db    0
.eh_frame:00000000000060DF                 db    0
.eh_frame:00000000000060E0                 db    0
.eh_frame:00000000000060E1                 db  42h ; B
.eh_frame:00000000000060E2                 db  0Eh
.eh_frame:00000000000060E3                 db  10h
.eh_frame:00000000000060E4                 db  8Fh
.eh_frame:00000000000060E5                 db    2
.eh_frame:00000000000060E6                 db  42h ; B
.eh_frame:00000000000060E7                 db  0Eh
.eh_frame:00000000000060E8                 db  18h
.eh_frame:00000000000060E9                 db  8Eh
.eh_frame:00000000000060EA                 db    3
.eh_frame:00000000000060EB                 db  49h ; I
.eh_frame:00000000000060EC                 db  0Eh
.eh_frame:00000000000060ED                 db  20h
.eh_frame:00000000000060EE                 db  8Dh
.eh_frame:00000000000060EF                 db    4
.eh_frame:00000000000060F0                 db  42h ; B
.eh_frame:00000000000060F1                 db  0Eh
.eh_frame:00000000000060F2                 db  28h ; (
.eh_frame:00000000000060F3                 db  8Ch
.eh_frame:00000000000060F4                 db    5
.eh_frame:00000000000060F5                 db  44h ; D
.eh_frame:00000000000060F6                 db  0Eh
.eh_frame:00000000000060F7                 db  30h ; 0
.eh_frame:00000000000060F8                 db  86h
.eh_frame:00000000000060F9                 db    6
.eh_frame:00000000000060FA                 db  41h ; A
.eh_frame:00000000000060FB                 db  0Eh
.eh_frame:00000000000060FC                 db  38h ; 8
.eh_frame:00000000000060FD                 db  83h
.eh_frame:00000000000060FE                 db    7
.eh_frame:00000000000060FF                 db  4Dh ; M
.eh_frame:0000000000006100                 db  0Eh
.eh_frame:0000000000006101                 db  50h ; P
.eh_frame:0000000000006102                 db  5Fh ; _
.eh_frame:0000000000006103                 db  0Eh
.eh_frame:0000000000006104                 db  58h ; X
.eh_frame:0000000000006105                 db  47h ; G
.eh_frame:0000000000006106                 db  0Eh
.eh_frame:0000000000006107                 db  60h ; `
.eh_frame:0000000000006108                 db  46h ; F
.eh_frame:0000000000006109                 db  0Eh
.eh_frame:000000000000610A                 db  68h ; h
.eh_frame:000000000000610B                 db  44h ; D
.eh_frame:000000000000610C                 db  0Eh
.eh_frame:000000000000610D                 db  70h ; p
.eh_frame:000000000000610E                 db  58h ; X
.eh_frame:000000000000610F                 db  0Eh
.eh_frame:0000000000006110                 db  38h ; 8
.eh_frame:0000000000006111                 db  41h ; A
.eh_frame:0000000000006112                 db  0Eh
.eh_frame:0000000000006113                 db  30h ; 0
.eh_frame:0000000000006114                 db  41h ; A
.eh_frame:0000000000006115                 db  0Eh
.eh_frame:0000000000006116                 db  28h ; (
.eh_frame:0000000000006117                 db  42h ; B
.eh_frame:0000000000006118                 db  0Eh
.eh_frame:0000000000006119                 db  20h
.eh_frame:000000000000611A                 db  42h ; B
.eh_frame:000000000000611B                 db  0Eh
.eh_frame:000000000000611C                 db  18h
.eh_frame:000000000000611D                 db  42h ; B
.eh_frame:000000000000611E                 db  0Eh
.eh_frame:000000000000611F                 db  10h
.eh_frame:0000000000006120                 db  42h ; B
.eh_frame:0000000000006121                 db  0Eh
.eh_frame:0000000000006122                 db    8
.eh_frame:0000000000006123                 db    0
.eh_frame:0000000000006124                 db  68h ; h
.eh_frame:0000000000006125                 db    0
.eh_frame:0000000000006126                 db    0
.eh_frame:0000000000006127                 db    0
.eh_frame:0000000000006128                 db 0F8h
.eh_frame:0000000000006129                 db    3
.eh_frame:000000000000612A                 db    0
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db 0C4h
.eh_frame:000000000000612D                 db 0D7h
.eh_frame:000000000000612E                 db 0FFh
.eh_frame:000000000000612F                 db 0FFh
.eh_frame:0000000000006130                 db 0E3h
.eh_frame:0000000000006131                 db    0
.eh_frame:0000000000006132                 db    0
.eh_frame:0000000000006133                 db    0
.eh_frame:0000000000006134                 db    0
.eh_frame:0000000000006135                 db  42h ; B
.eh_frame:0000000000006136                 db  0Eh
.eh_frame:0000000000006137                 db  10h
.eh_frame:0000000000006138                 db  8Fh
.eh_frame:0000000000006139                 db    2
.eh_frame:000000000000613A                 db  42h ; B
.eh_frame:000000000000613B                 db  0Eh
.eh_frame:000000000000613C                 db  18h
.eh_frame:000000000000613D                 db  8Eh
.eh_frame:000000000000613E                 db    3
.eh_frame:000000000000613F                 db  49h ; I
.eh_frame:0000000000006140                 db  0Eh
.eh_frame:0000000000006141                 db  20h
.eh_frame:0000000000006142                 db  8Dh
.eh_frame:0000000000006143                 db    4
.eh_frame:0000000000006144                 db  42h ; B
.eh_frame:0000000000006145                 db  0Eh
.eh_frame:0000000000006146                 db  28h ; (
.eh_frame:0000000000006147                 db  8Ch
.eh_frame:0000000000006148                 db    5
.eh_frame:0000000000006149                 db  44h ; D
.eh_frame:000000000000614A                 db  0Eh
.eh_frame:000000000000614B                 db  30h ; 0
.eh_frame:000000000000614C                 db  86h
.eh_frame:000000000000614D                 db    6
.eh_frame:000000000000614E                 db  41h ; A
.eh_frame:000000000000614F                 db  0Eh
.eh_frame:0000000000006150                 db  38h ; 8
.eh_frame:0000000000006151                 db  83h
.eh_frame:0000000000006152                 db    7
.eh_frame:0000000000006153                 db  4Dh ; M
.eh_frame:0000000000006154                 db  0Eh
.eh_frame:0000000000006155                 db  70h ; p
.eh_frame:0000000000006156                 db  65h ; e
.eh_frame:0000000000006157                 db  0Eh
.eh_frame:0000000000006158                 db  78h ; x
.eh_frame:0000000000006159                 db  4Dh ; M
.eh_frame:000000000000615A                 db  0Eh
.eh_frame:000000000000615B                 db  80h
.eh_frame:000000000000615C                 db    1
.eh_frame:000000000000615D                 db  46h ; F
.eh_frame:000000000000615E                 db  0Eh
.eh_frame:000000000000615F                 db  88h
.eh_frame:0000000000006160                 db    1
.eh_frame:0000000000006161                 db  42h ; B
.eh_frame:0000000000006162                 db  0Eh
.eh_frame:0000000000006163                 db  90h
.eh_frame:0000000000006164                 db    1
.eh_frame:0000000000006165                 db  5Eh ; ^
.eh_frame:0000000000006166                 db  0Eh
.eh_frame:0000000000006167                 db  70h ; p
.eh_frame:0000000000006168                 db  56h ; V
.eh_frame:0000000000006169                 db  0Eh
.eh_frame:000000000000616A                 db  78h ; x
.eh_frame:000000000000616B                 db  43h ; C
.eh_frame:000000000000616C                 db  0Eh
.eh_frame:000000000000616D                 db  80h
.eh_frame:000000000000616E                 db    1
.eh_frame:000000000000616F                 db  43h ; C
.eh_frame:0000000000006170                 db  0Eh
.eh_frame:0000000000006171                 db  88h
.eh_frame:0000000000006172                 db    1
.eh_frame:0000000000006173                 db  56h ; V
.eh_frame:0000000000006174                 db  0Eh
.eh_frame:0000000000006175                 db  90h
.eh_frame:0000000000006176                 db    1
.eh_frame:0000000000006177                 db  52h ; R
.eh_frame:0000000000006178                 db  0Eh
.eh_frame:0000000000006179                 db  70h ; p
.eh_frame:000000000000617A                 db  5Bh ; [
.eh_frame:000000000000617B                 db  0Eh
.eh_frame:000000000000617C                 db  38h ; 8
.eh_frame:000000000000617D                 db  41h ; A
.eh_frame:000000000000617E                 db  0Eh
.eh_frame:000000000000617F                 db  30h ; 0
.eh_frame:0000000000006180                 db  41h ; A
.eh_frame:0000000000006181                 db  0Eh
.eh_frame:0000000000006182                 db  28h ; (
.eh_frame:0000000000006183                 db  42h ; B
.eh_frame:0000000000006184                 db  0Eh
.eh_frame:0000000000006185                 db  20h
.eh_frame:0000000000006186                 db  42h ; B
.eh_frame:0000000000006187                 db  0Eh
.eh_frame:0000000000006188                 db  18h
.eh_frame:0000000000006189                 db  42h ; B
.eh_frame:000000000000618A                 db  0Eh
.eh_frame:000000000000618B                 db  10h
.eh_frame:000000000000618C                 db  42h ; B
.eh_frame:000000000000618D                 db  0Eh
.eh_frame:000000000000618E                 db    8
.eh_frame:000000000000618F                 db    0
.eh_frame:0000000000006190                 db  10h
.eh_frame:0000000000006191                 db    0
.eh_frame:0000000000006192                 db    0
.eh_frame:0000000000006193                 db    0
.eh_frame:0000000000006194                 db  64h ; d
.eh_frame:0000000000006195                 db    4
.eh_frame:0000000000006196                 db    0
.eh_frame:0000000000006197                 db    0
.eh_frame:0000000000006198                 db  48h ; H
.eh_frame:0000000000006199                 db 0D8h
.eh_frame:000000000000619A                 db 0FFh
.eh_frame:000000000000619B                 db 0FFh
.eh_frame:000000000000619C                 db  0Ah
.eh_frame:000000000000619D                 db    0
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db    0
.eh_frame:00000000000061A1                 db    0
.eh_frame:00000000000061A2                 db    0
.eh_frame:00000000000061A3                 db    0
.eh_frame:00000000000061A4                 db  28h ; (
.eh_frame:00000000000061A5                 db    0
.eh_frame:00000000000061A6                 db    0
.eh_frame:00000000000061A7                 db    0
.eh_frame:00000000000061A8                 db  78h ; x
.eh_frame:00000000000061A9                 db    4
.eh_frame:00000000000061AA                 db    0
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db  44h ; D
.eh_frame:00000000000061AD                 db 0D8h
.eh_frame:00000000000061AE                 db 0FFh
.eh_frame:00000000000061AF                 db 0FFh
.eh_frame:00000000000061B0                 db  93h
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db    0
.eh_frame:00000000000061B5                 db  48h ; H
.eh_frame:00000000000061B6                 db  0Eh
.eh_frame:00000000000061B7                 db  10h
.eh_frame:00000000000061B8                 db  8Ch
.eh_frame:00000000000061B9                 db    2
.eh_frame:00000000000061BA                 db  48h ; H
.eh_frame:00000000000061BB                 db  0Eh
.eh_frame:00000000000061BC                 db  18h
.eh_frame:00000000000061BD                 db  86h
.eh_frame:00000000000061BE                 db    3
.eh_frame:00000000000061BF                 db  41h ; A
.eh_frame:00000000000061C0                 db  0Eh
.eh_frame:00000000000061C1                 db  20h
.eh_frame:00000000000061C2                 db  83h
.eh_frame:00000000000061C3                 db    4
.eh_frame:00000000000061C4                 db    2
.eh_frame:00000000000061C5                 db  74h ; t
.eh_frame:00000000000061C6                 db  0Eh
.eh_frame:00000000000061C7                 db  18h
.eh_frame:00000000000061C8                 db  4Bh ; K
.eh_frame:00000000000061C9                 db  0Eh
.eh_frame:00000000000061CA                 db  10h
.eh_frame:00000000000061CB                 db  42h ; B
.eh_frame:00000000000061CC                 db  0Eh
.eh_frame:00000000000061CD                 db    8
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db  10h
.eh_frame:00000000000061D1                 db    0
.eh_frame:00000000000061D2                 db    0
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db 0A4h
.eh_frame:00000000000061D5                 db    4
.eh_frame:00000000000061D6                 db    0
.eh_frame:00000000000061D7                 db    0
.eh_frame:00000000000061D8                 db 0B8h
.eh_frame:00000000000061D9                 db 0D8h
.eh_frame:00000000000061DA                 db 0FFh
.eh_frame:00000000000061DB                 db 0FFh
.eh_frame:00000000000061DC                 db  13h
.eh_frame:00000000000061DD                 db    0
.eh_frame:00000000000061DE                 db    0
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db    0
.eh_frame:00000000000061E1                 db    0
.eh_frame:00000000000061E2                 db    0
.eh_frame:00000000000061E3                 db    0
.eh_frame:00000000000061E4                 db  10h
.eh_frame:00000000000061E5                 db    0
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db 0B8h
.eh_frame:00000000000061E9                 db    4
.eh_frame:00000000000061EA                 db    0
.eh_frame:00000000000061EB                 db    0
.eh_frame:00000000000061EC                 db 0C4h
.eh_frame:00000000000061ED                 db 0D8h
.eh_frame:00000000000061EE                 db 0FFh
.eh_frame:00000000000061EF                 db 0FFh
.eh_frame:00000000000061F0                 db  0Ch
.eh_frame:00000000000061F1                 db    0
.eh_frame:00000000000061F2                 db    0
.eh_frame:00000000000061F3                 db    0
.eh_frame:00000000000061F4                 db    0
.eh_frame:00000000000061F5                 db    0
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  10h
.eh_frame:00000000000061F9                 db    0
.eh_frame:00000000000061FA                 db    0
.eh_frame:00000000000061FB                 db    0
.eh_frame:00000000000061FC                 db 0CCh
.eh_frame:00000000000061FD                 db    4
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db 0C0h
.eh_frame:0000000000006201                 db 0D8h
.eh_frame:0000000000006202                 db 0FFh
.eh_frame:0000000000006203                 db 0FFh
.eh_frame:0000000000006204                 db  18h
.eh_frame:0000000000006205                 db    0
.eh_frame:0000000000006206                 db    0
.eh_frame:0000000000006207                 db    0
.eh_frame:0000000000006208                 db    0
.eh_frame:0000000000006209                 db    0
.eh_frame:000000000000620A                 db    0
.eh_frame:000000000000620B                 db    0
.eh_frame:000000000000620C                 db  10h
.eh_frame:000000000000620D                 db    0
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:0000000000006210                 db 0E0h
.eh_frame:0000000000006211                 db    4
.eh_frame:0000000000006212                 db    0
.eh_frame:0000000000006213                 db    0
.eh_frame:0000000000006214                 db 0CCh
.eh_frame:0000000000006215                 db 0D8h
.eh_frame:0000000000006216                 db 0FFh
.eh_frame:0000000000006217                 db 0FFh
.eh_frame:0000000000006218                 db  14h
.eh_frame:0000000000006219                 db    0
.eh_frame:000000000000621A                 db    0
.eh_frame:000000000000621B                 db    0
.eh_frame:000000000000621C                 db    0
.eh_frame:000000000000621D                 db    0
.eh_frame:000000000000621E                 db    0
.eh_frame:000000000000621F                 db    0
.eh_frame:0000000000006220                 db  18h
.eh_frame:0000000000006221                 db    0
.eh_frame:0000000000006222                 db    0
.eh_frame:0000000000006223                 db    0
.eh_frame:0000000000006224                 db 0F4h
.eh_frame:0000000000006225                 db    4
.eh_frame:0000000000006226                 db    0
.eh_frame:0000000000006227                 db    0
.eh_frame:0000000000006228                 db 0D8h
.eh_frame:0000000000006229                 db 0D8h
.eh_frame:000000000000622A                 db 0FFh
.eh_frame:000000000000622B                 db 0FFh
.eh_frame:000000000000622C                 db  8Eh
.eh_frame:000000000000622D                 db    0
.eh_frame:000000000000622E                 db    0
.eh_frame:000000000000622F                 db    0
.eh_frame:0000000000006230                 db    0
.eh_frame:0000000000006231                 db  44h ; D
.eh_frame:0000000000006232                 db  0Eh
.eh_frame:0000000000006233                 db  50h ; P
.eh_frame:0000000000006234                 db    2
.eh_frame:0000000000006235                 db  7Fh ; 
.eh_frame:0000000000006236                 db  0Ah
.eh_frame:0000000000006237                 db  0Eh
.eh_frame:0000000000006238                 db    8
.eh_frame:0000000000006239                 db  41h ; A
.eh_frame:000000000000623A                 db  0Bh
.eh_frame:000000000000623B                 db    0
.eh_frame:000000000000623C                 db  18h
.eh_frame:000000000000623D                 db    0
.eh_frame:000000000000623E                 db    0
.eh_frame:000000000000623F                 db    0
.eh_frame:0000000000006240                 db  10h
.eh_frame:0000000000006241                 db    5
.eh_frame:0000000000006242                 db    0
.eh_frame:0000000000006243                 db    0
.eh_frame:0000000000006244                 db  4Ch ; L
.eh_frame:0000000000006245                 db 0D9h
.eh_frame:0000000000006246                 db 0FFh
.eh_frame:0000000000006247                 db 0FFh
.eh_frame:0000000000006248                 db  8Ah
.eh_frame:0000000000006249                 db    0
.eh_frame:000000000000624A                 db    0
.eh_frame:000000000000624B                 db    0
.eh_frame:000000000000624C                 db    0
.eh_frame:000000000000624D                 db  44h ; D
.eh_frame:000000000000624E                 db  0Eh
.eh_frame:000000000000624F                 db  50h ; P
.eh_frame:0000000000006250                 db    2
.eh_frame:0000000000006251                 db  7Bh ; {
.eh_frame:0000000000006252                 db  0Ah
.eh_frame:0000000000006253                 db  0Eh
.eh_frame:0000000000006254                 db    8
.eh_frame:0000000000006255                 db  41h ; A
.eh_frame:0000000000006256                 db  0Bh
.eh_frame:0000000000006257                 db    0
.eh_frame:0000000000006258                 db  10h
.eh_frame:0000000000006259                 db    0
.eh_frame:000000000000625A                 db    0
.eh_frame:000000000000625B                 db    0
.eh_frame:000000000000625C                 db  2Ch ; ,
.eh_frame:000000000000625D                 db    5
.eh_frame:000000000000625E                 db    0
.eh_frame:000000000000625F                 db    0
.eh_frame:0000000000006260                 db 0C0h
.eh_frame:0000000000006261                 db 0D9h
.eh_frame:0000000000006262                 db 0FFh
.eh_frame:0000000000006263                 db 0FFh
.eh_frame:0000000000006264                 db  0Ch
.eh_frame:0000000000006265                 db    0
.eh_frame:0000000000006266                 db    0
.eh_frame:0000000000006267                 db    0
.eh_frame:0000000000006268                 db    0
.eh_frame:0000000000006269                 db    0
.eh_frame:000000000000626A                 db    0
.eh_frame:000000000000626B                 db    0
.eh_frame:000000000000626C                 db  10h
.eh_frame:000000000000626D                 db    0
.eh_frame:000000000000626E                 db    0
.eh_frame:000000000000626F                 db    0
.eh_frame:0000000000006270                 db  40h ; @
.eh_frame:0000000000006271                 db    5
.eh_frame:0000000000006272                 db    0
.eh_frame:0000000000006273                 db    0
.eh_frame:0000000000006274                 db 0BCh
.eh_frame:0000000000006275                 db 0D9h
.eh_frame:0000000000006276                 db 0FFh
.eh_frame:0000000000006277                 db 0FFh
.eh_frame:0000000000006278                 db  0Fh
.eh_frame:0000000000006279                 db    0
.eh_frame:000000000000627A                 db    0
.eh_frame:000000000000627B                 db    0
.eh_frame:000000000000627C                 db    0
.eh_frame:000000000000627D                 db    0
.eh_frame:000000000000627E                 db    0
.eh_frame:000000000000627F                 db    0
.eh_frame:0000000000006280                 db  18h
.eh_frame:0000000000006281                 db    0
.eh_frame:0000000000006282                 db    0
.eh_frame:0000000000006283                 db    0
.eh_frame:0000000000006284                 db  54h ; T
.eh_frame:0000000000006285                 db    5
.eh_frame:0000000000006286                 db    0
.eh_frame:0000000000006287                 db    0
.eh_frame:0000000000006288                 db 0B8h
.eh_frame:0000000000006289                 db 0D9h
.eh_frame:000000000000628A                 db 0FFh
.eh_frame:000000000000628B                 db 0FFh
.eh_frame:000000000000628C                 db  98h
.eh_frame:000000000000628D                 db    0
.eh_frame:000000000000628E                 db    0
.eh_frame:000000000000628F                 db    0
.eh_frame:0000000000006290                 db    0
.eh_frame:0000000000006291                 db  44h ; D
.eh_frame:0000000000006292                 db  0Eh
.eh_frame:0000000000006293                 db  50h ; P
.eh_frame:0000000000006294                 db    2
.eh_frame:0000000000006295                 db  8Eh
.eh_frame:0000000000006296                 db  0Ah
.eh_frame:0000000000006297                 db  0Eh
.eh_frame:0000000000006298                 db    8
.eh_frame:0000000000006299                 db  41h ; A
.eh_frame:000000000000629A                 db  0Bh
.eh_frame:000000000000629B                 db    0
.eh_frame:000000000000629C                 db  10h
.eh_frame:000000000000629D                 db    0
.eh_frame:000000000000629E                 db    0
.eh_frame:000000000000629F                 db    0
.eh_frame:00000000000062A0                 db  70h ; p
.eh_frame:00000000000062A1                 db    5
.eh_frame:00000000000062A2                 db    0
.eh_frame:00000000000062A3                 db    0
.eh_frame:00000000000062A4                 db  3Ch ; <
.eh_frame:00000000000062A5                 db 0DAh
.eh_frame:00000000000062A6                 db 0FFh
.eh_frame:00000000000062A7                 db 0FFh
.eh_frame:00000000000062A8                 db  10h
.eh_frame:00000000000062A9                 db    0
.eh_frame:00000000000062AA                 db    0
.eh_frame:00000000000062AB                 db    0
.eh_frame:00000000000062AC                 db    0
.eh_frame:00000000000062AD                 db    0
.eh_frame:00000000000062AE                 db    0
.eh_frame:00000000000062AF                 db    0
.eh_frame:00000000000062B0                 db  10h
.eh_frame:00000000000062B1                 db    0
.eh_frame:00000000000062B2                 db    0
.eh_frame:00000000000062B3                 db    0
.eh_frame:00000000000062B4                 db  84h
.eh_frame:00000000000062B5                 db    5
.eh_frame:00000000000062B6                 db    0
.eh_frame:00000000000062B7                 db    0
.eh_frame:00000000000062B8                 db  38h ; 8
.eh_frame:00000000000062B9                 db 0DAh
.eh_frame:00000000000062BA                 db 0FFh
.eh_frame:00000000000062BB                 db 0FFh
.eh_frame:00000000000062BC                 db  11h
.eh_frame:00000000000062BD                 db    0
.eh_frame:00000000000062BE                 db    0
.eh_frame:00000000000062BF                 db    0
.eh_frame:00000000000062C0                 db    0
.eh_frame:00000000000062C1                 db    0
.eh_frame:00000000000062C2                 db    0
.eh_frame:00000000000062C3                 db    0
.eh_frame:00000000000062C4                 db  10h
.eh_frame:00000000000062C5                 db    0
.eh_frame:00000000000062C6                 db    0
.eh_frame:00000000000062C7                 db    0
.eh_frame:00000000000062C8                 db  98h
.eh_frame:00000000000062C9                 db    5
.eh_frame:00000000000062CA                 db    0
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db  44h ; D
.eh_frame:00000000000062CD                 db 0DAh
.eh_frame:00000000000062CE                 db 0FFh
.eh_frame:00000000000062CF                 db 0FFh
.eh_frame:00000000000062D0                 db  0Ah
.eh_frame:00000000000062D1                 db    0
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db    0
.eh_frame:00000000000062D5                 db    0
.eh_frame:00000000000062D6                 db    0
.eh_frame:00000000000062D7                 db    0
.eh_frame:00000000000062D8                 db  18h
.eh_frame:00000000000062D9                 db    0
.eh_frame:00000000000062DA                 db    0
.eh_frame:00000000000062DB                 db    0
.eh_frame:00000000000062DC                 db 0ACh
.eh_frame:00000000000062DD                 db    5
.eh_frame:00000000000062DE                 db    0
.eh_frame:00000000000062DF                 db    0
.eh_frame:00000000000062E0                 db  40h ; @
.eh_frame:00000000000062E1                 db 0DAh
.eh_frame:00000000000062E2                 db 0FFh
.eh_frame:00000000000062E3                 db 0FFh
.eh_frame:00000000000062E4                 db  8Eh
.eh_frame:00000000000062E5                 db    0
.eh_frame:00000000000062E6                 db    0
.eh_frame:00000000000062E7                 db    0
.eh_frame:00000000000062E8                 db    0
.eh_frame:00000000000062E9                 db  44h ; D
.eh_frame:00000000000062EA                 db  0Eh
.eh_frame:00000000000062EB                 db  50h ; P
.eh_frame:00000000000062EC                 db    2
.eh_frame:00000000000062ED                 db  7Fh ; 
.eh_frame:00000000000062EE                 db  0Ah
.eh_frame:00000000000062EF                 db  0Eh
.eh_frame:00000000000062F0                 db    8
.eh_frame:00000000000062F1                 db  41h ; A
.eh_frame:00000000000062F2                 db  0Bh
.eh_frame:00000000000062F3                 db    0
.eh_frame:00000000000062F4                 db  18h
.eh_frame:00000000000062F5                 db    0
.eh_frame:00000000000062F6                 db    0
.eh_frame:00000000000062F7                 db    0
.eh_frame:00000000000062F8                 db 0C8h
.eh_frame:00000000000062F9                 db    5
.eh_frame:00000000000062FA                 db    0
.eh_frame:00000000000062FB                 db    0
.eh_frame:00000000000062FC                 db 0B4h
.eh_frame:00000000000062FD                 db 0DAh
.eh_frame:00000000000062FE                 db 0FFh
.eh_frame:00000000000062FF                 db 0FFh
.eh_frame:0000000000006300                 db  91h
.eh_frame:0000000000006301                 db    0
.eh_frame:0000000000006302                 db    0
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db    0
.eh_frame:0000000000006305                 db  44h ; D
.eh_frame:0000000000006306                 db  0Eh
.eh_frame:0000000000006307                 db  50h ; P
.eh_frame:0000000000006308                 db    2
.eh_frame:0000000000006309                 db  82h
.eh_frame:000000000000630A                 db  0Ah
.eh_frame:000000000000630B                 db  0Eh
.eh_frame:000000000000630C                 db    8
.eh_frame:000000000000630D                 db  41h ; A
.eh_frame:000000000000630E                 db  0Bh
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db  10h
.eh_frame:0000000000006311                 db    0
.eh_frame:0000000000006312                 db    0
.eh_frame:0000000000006313                 db    0
.eh_frame:0000000000006314                 db 0E4h
.eh_frame:0000000000006315                 db    5
.eh_frame:0000000000006316                 db    0
.eh_frame:0000000000006317                 db    0
.eh_frame:0000000000006318                 db  38h ; 8
.eh_frame:0000000000006319                 db 0DBh
.eh_frame:000000000000631A                 db 0FFh
.eh_frame:000000000000631B                 db 0FFh
.eh_frame:000000000000631C                 db  0Ch
.eh_frame:000000000000631D                 db    0
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db    0
.eh_frame:0000000000006321                 db    0
.eh_frame:0000000000006322                 db    0
.eh_frame:0000000000006323                 db    0
.eh_frame:0000000000006324                 db  10h
.eh_frame:0000000000006325                 db    0
.eh_frame:0000000000006326                 db    0
.eh_frame:0000000000006327                 db    0
.eh_frame:0000000000006328                 db 0F8h
.eh_frame:0000000000006329                 db    5
.eh_frame:000000000000632A                 db    0
.eh_frame:000000000000632B                 db    0
.eh_frame:000000000000632C                 db  34h ; 4
.eh_frame:000000000000632D                 db 0DBh
.eh_frame:000000000000632E                 db 0FFh
.eh_frame:000000000000632F                 db 0FFh
.eh_frame:0000000000006330                 db  17h
.eh_frame:0000000000006331                 db    0
.eh_frame:0000000000006332                 db    0
.eh_frame:0000000000006333                 db    0
.eh_frame:0000000000006334                 db    0
.eh_frame:0000000000006335                 db    0
.eh_frame:0000000000006336                 db    0
.eh_frame:0000000000006337                 db    0
.eh_frame:0000000000006338                 db  10h
.eh_frame:0000000000006339                 db    0
.eh_frame:000000000000633A                 db    0
.eh_frame:000000000000633B                 db    0
.eh_frame:000000000000633C                 db  0Ch
.eh_frame:000000000000633D                 db    6
.eh_frame:000000000000633E                 db    0
.eh_frame:000000000000633F                 db    0
.eh_frame:0000000000006340                 db  40h ; @
.eh_frame:0000000000006341                 db 0DBh
.eh_frame:0000000000006342                 db 0FFh
.eh_frame:0000000000006343                 db 0FFh
.eh_frame:0000000000006344                 db  13h
.eh_frame:0000000000006345                 db    0
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db    0
.eh_frame:0000000000006349                 db    0
.eh_frame:000000000000634A                 db    0
.eh_frame:000000000000634B                 db    0
.eh_frame:000000000000634C                 db  10h
.eh_frame:000000000000634D                 db    0
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db  20h
.eh_frame:0000000000006351                 db    6
.eh_frame:0000000000006352                 db    0
.eh_frame:0000000000006353                 db    0
.eh_frame:0000000000006354                 db  4Ch ; L
.eh_frame:0000000000006355                 db 0DBh
.eh_frame:0000000000006356                 db 0FFh
.eh_frame:0000000000006357                 db 0FFh
.eh_frame:0000000000006358                 db  0Ch
.eh_frame:0000000000006359                 db    0
.eh_frame:000000000000635A                 db    0
.eh_frame:000000000000635B                 db    0
.eh_frame:000000000000635C                 db    0
.eh_frame:000000000000635D                 db    0
.eh_frame:000000000000635E                 db    0
.eh_frame:000000000000635F                 db    0
.eh_frame:0000000000006360                 db  10h
.eh_frame:0000000000006361                 db    0
.eh_frame:0000000000006362                 db    0
.eh_frame:0000000000006363                 db    0
.eh_frame:0000000000006364                 db  34h ; 4
.eh_frame:0000000000006365                 db    6
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db  48h ; H
.eh_frame:0000000000006369                 db 0DBh
.eh_frame:000000000000636A                 db 0FFh
.eh_frame:000000000000636B                 db 0FFh
.eh_frame:000000000000636C                 db  14h
.eh_frame:000000000000636D                 db    0
.eh_frame:000000000000636E                 db    0
.eh_frame:000000000000636F                 db    0
.eh_frame:0000000000006370                 db    0
.eh_frame:0000000000006371                 db    0
.eh_frame:0000000000006372                 db    0
.eh_frame:0000000000006373                 db    0
.eh_frame:0000000000006374                 db  10h
.eh_frame:0000000000006375                 db    0
.eh_frame:0000000000006376                 db    0
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db  48h ; H
.eh_frame:0000000000006379                 db    6
.eh_frame:000000000000637A                 db    0
.eh_frame:000000000000637B                 db    0
.eh_frame:000000000000637C                 db  54h ; T
.eh_frame:000000000000637D                 db 0DBh
.eh_frame:000000000000637E                 db 0FFh
.eh_frame:000000000000637F                 db 0FFh
.eh_frame:0000000000006380                 db  13h
.eh_frame:0000000000006381                 db    0
.eh_frame:0000000000006382                 db    0
.eh_frame:0000000000006383                 db    0
.eh_frame:0000000000006384                 db    0
.eh_frame:0000000000006385                 db    0
.eh_frame:0000000000006386                 db    0
.eh_frame:0000000000006387                 db    0
.eh_frame:0000000000006388                 db  14h
.eh_frame:0000000000006389                 db    0
.eh_frame:000000000000638A                 db    0
.eh_frame:000000000000638B                 db    0
.eh_frame:000000000000638C                 db  5Ch ; \
.eh_frame:000000000000638D                 db    6
.eh_frame:000000000000638E                 db    0
.eh_frame:000000000000638F                 db    0
.eh_frame:0000000000006390                 db  60h ; `
.eh_frame:0000000000006391                 db 0DBh
.eh_frame:0000000000006392                 db 0FFh
.eh_frame:0000000000006393                 db 0FFh
.eh_frame:0000000000006394                 db  18h
.eh_frame:0000000000006395                 db    0
.eh_frame:0000000000006396                 db    0
.eh_frame:0000000000006397                 db    0
.eh_frame:0000000000006398                 db    0
.eh_frame:0000000000006399                 db    0
.eh_frame:000000000000639A                 db    0
.eh_frame:000000000000639B                 db    0
.eh_frame:000000000000639C                 db    0
.eh_frame:000000000000639D                 db    0
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db  10h
.eh_frame:00000000000063A1                 db    1
.eh_frame:00000000000063A2                 db    0
.eh_frame:00000000000063A3                 db    0
.eh_frame:00000000000063A4                 db  74h ; t
.eh_frame:00000000000063A5                 db    6
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db  68h ; h
.eh_frame:00000000000063A9                 db 0DBh
.eh_frame:00000000000063AA                 db 0FFh
.eh_frame:00000000000063AB                 db 0FFh
.eh_frame:00000000000063AC                 db  17h
.eh_frame:00000000000063AD                 db    4
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db    0
.eh_frame:00000000000063B1                 db  42h ; B
.eh_frame:00000000000063B2                 db  0Eh
.eh_frame:00000000000063B3                 db  10h
.eh_frame:00000000000063B4                 db  8Fh
.eh_frame:00000000000063B5                 db    2
.eh_frame:00000000000063B6                 db  42h ; B
.eh_frame:00000000000063B7                 db  0Eh
.eh_frame:00000000000063B8                 db  18h
.eh_frame:00000000000063B9                 db  8Eh
.eh_frame:00000000000063BA                 db    3
.eh_frame:00000000000063BB                 db  42h ; B
.eh_frame:00000000000063BC                 db  0Eh
.eh_frame:00000000000063BD                 db  20h
.eh_frame:00000000000063BE                 db  8Dh
.eh_frame:00000000000063BF                 db    4
.eh_frame:00000000000063C0                 db  42h ; B
.eh_frame:00000000000063C1                 db  0Eh
.eh_frame:00000000000063C2                 db  28h ; (
.eh_frame:00000000000063C3                 db  8Ch
.eh_frame:00000000000063C4                 db    5
.eh_frame:00000000000063C5                 db  44h ; D
.eh_frame:00000000000063C6                 db  0Eh
.eh_frame:00000000000063C7                 db  30h ; 0
.eh_frame:00000000000063C8                 db  86h
.eh_frame:00000000000063C9                 db    6
.eh_frame:00000000000063CA                 db  41h ; A
.eh_frame:00000000000063CB                 db  0Eh
.eh_frame:00000000000063CC                 db  38h ; 8
.eh_frame:00000000000063CD                 db  83h
.eh_frame:00000000000063CE                 db    7
.eh_frame:00000000000063CF                 db  4Ah ; J
.eh_frame:00000000000063D0                 db  0Eh
.eh_frame:00000000000063D1                 db  60h ; `
.eh_frame:00000000000063D2                 db    2
.eh_frame:00000000000063D3                 db 0DDh
.eh_frame:00000000000063D4                 db  0Eh
.eh_frame:00000000000063D5                 db  68h ; h
.eh_frame:00000000000063D6                 db  57h ; W
.eh_frame:00000000000063D7                 db  0Eh
.eh_frame:00000000000063D8                 db  70h ; p
.eh_frame:00000000000063D9                 db  42h ; B
.eh_frame:00000000000063DA                 db  0Eh
.eh_frame:00000000000063DB                 db  78h ; x
.eh_frame:00000000000063DC                 db  42h ; B
.eh_frame:00000000000063DD                 db  0Eh
.eh_frame:00000000000063DE                 db  80h
.eh_frame:00000000000063DF                 db    1
.eh_frame:00000000000063E0                 db  42h ; B
.eh_frame:00000000000063E1                 db  0Eh
.eh_frame:00000000000063E2                 db  88h
.eh_frame:00000000000063E3                 db    1
.eh_frame:00000000000063E4                 db  42h ; B
.eh_frame:00000000000063E5                 db  0Eh
.eh_frame:00000000000063E6                 db  90h
.eh_frame:00000000000063E7                 db    1
.eh_frame:00000000000063E8                 db  53h ; S
.eh_frame:00000000000063E9                 db  0Eh
.eh_frame:00000000000063EA                 db  60h ; `
.eh_frame:00000000000063EB                 db  44h ; D
.eh_frame:00000000000063EC                 db  0Ah
.eh_frame:00000000000063ED                 db  0Eh
.eh_frame:00000000000063EE                 db  38h ; 8
.eh_frame:00000000000063EF                 db  41h ; A
.eh_frame:00000000000063F0                 db  0Eh
.eh_frame:00000000000063F1                 db  30h ; 0
.eh_frame:00000000000063F2                 db  41h ; A
.eh_frame:00000000000063F3                 db  0Eh
.eh_frame:00000000000063F4                 db  28h ; (
.eh_frame:00000000000063F5                 db  42h ; B
.eh_frame:00000000000063F6                 db  0Eh
.eh_frame:00000000000063F7                 db  20h
.eh_frame:00000000000063F8                 db  42h ; B
.eh_frame:00000000000063F9                 db  0Eh
.eh_frame:00000000000063FA                 db  18h
.eh_frame:00000000000063FB                 db  42h ; B
.eh_frame:00000000000063FC                 db  0Eh
.eh_frame:00000000000063FD                 db  10h
.eh_frame:00000000000063FE                 db  42h ; B
.eh_frame:00000000000063FF                 db  0Eh
.eh_frame:0000000000006400                 db    8
.eh_frame:0000000000006401                 db  44h ; D
.eh_frame:0000000000006402                 db  0Bh
.eh_frame:0000000000006403                 db    2
.eh_frame:0000000000006404                 db  78h ; x
.eh_frame:0000000000006405                 db  0Ah
.eh_frame:0000000000006406                 db  0Eh
.eh_frame:0000000000006407                 db  68h ; h
.eh_frame:0000000000006408                 db  48h ; H
.eh_frame:0000000000006409                 db  0Bh
.eh_frame:000000000000640A                 db  5Ah ; Z
.eh_frame:000000000000640B                 db  0Ah
.eh_frame:000000000000640C                 db  0Eh
.eh_frame:000000000000640D                 db  38h ; 8
.eh_frame:000000000000640E                 db  47h ; G
.eh_frame:000000000000640F                 db  0Eh
.eh_frame:0000000000006410                 db  30h ; 0
.eh_frame:0000000000006411                 db  41h ; A
.eh_frame:0000000000006412                 db  0Eh
.eh_frame:0000000000006413                 db  28h ; (
.eh_frame:0000000000006414                 db  42h ; B
.eh_frame:0000000000006415                 db  0Eh
.eh_frame:0000000000006416                 db  20h
.eh_frame:0000000000006417                 db  42h ; B
.eh_frame:0000000000006418                 db  0Eh
.eh_frame:0000000000006419                 db  18h
.eh_frame:000000000000641A                 db  42h ; B
.eh_frame:000000000000641B                 db  0Eh
.eh_frame:000000000000641C                 db  10h
.eh_frame:000000000000641D                 db  42h ; B
.eh_frame:000000000000641E                 db  0Eh
.eh_frame:000000000000641F                 db    8
.eh_frame:0000000000006420                 db  56h ; V
.eh_frame:0000000000006421                 db  0Bh
.eh_frame:0000000000006422                 db  5Eh ; ^
.eh_frame:0000000000006423                 db  0Ah
.eh_frame:0000000000006424                 db  0Eh
.eh_frame:0000000000006425                 db  38h ; 8
.eh_frame:0000000000006426                 db  52h ; R
.eh_frame:0000000000006427                 db  0Eh
.eh_frame:0000000000006428                 db  30h ; 0
.eh_frame:0000000000006429                 db  41h ; A
.eh_frame:000000000000642A                 db  0Eh
.eh_frame:000000000000642B                 db  28h ; (
.eh_frame:000000000000642C                 db  42h ; B
.eh_frame:000000000000642D                 db  0Eh
.eh_frame:000000000000642E                 db  20h
.eh_frame:000000000000642F                 db  42h ; B
.eh_frame:0000000000006430                 db  0Eh
.eh_frame:0000000000006431                 db  18h
.eh_frame:0000000000006432                 db  42h ; B
.eh_frame:0000000000006433                 db  0Eh
.eh_frame:0000000000006434                 db  10h
.eh_frame:0000000000006435                 db  42h ; B
.eh_frame:0000000000006436                 db  0Eh
.eh_frame:0000000000006437                 db    8
.eh_frame:0000000000006438                 db  4Fh ; O
.eh_frame:0000000000006439                 db  0Bh
.eh_frame:000000000000643A                 db  62h ; b
.eh_frame:000000000000643B                 db  0Ah
.eh_frame:000000000000643C                 db  0Eh
.eh_frame:000000000000643D                 db  38h ; 8
.eh_frame:000000000000643E                 db  50h ; P
.eh_frame:000000000000643F                 db  0Eh
.eh_frame:0000000000006440                 db  30h ; 0
.eh_frame:0000000000006441                 db  41h ; A
.eh_frame:0000000000006442                 db  0Eh
.eh_frame:0000000000006443                 db  28h ; (
.eh_frame:0000000000006444                 db  42h ; B
.eh_frame:0000000000006445                 db  0Eh
.eh_frame:0000000000006446                 db  20h
.eh_frame:0000000000006447                 db  42h ; B
.eh_frame:0000000000006448                 db  0Eh
.eh_frame:0000000000006449                 db  18h
.eh_frame:000000000000644A                 db  42h ; B
.eh_frame:000000000000644B                 db  0Eh
.eh_frame:000000000000644C                 db  10h
.eh_frame:000000000000644D                 db  42h ; B
.eh_frame:000000000000644E                 db  0Eh
.eh_frame:000000000000644F                 db    8
.eh_frame:0000000000006450                 db  55h ; U
.eh_frame:0000000000006451                 db  0Bh
.eh_frame:0000000000006452                 db  66h ; f
.eh_frame:0000000000006453                 db  0Eh
.eh_frame:0000000000006454                 db  68h ; h
.eh_frame:0000000000006455                 db  42h ; B
.eh_frame:0000000000006456                 db  0Eh
.eh_frame:0000000000006457                 db  70h ; p
.eh_frame:0000000000006458                 db  5Ch ; \
.eh_frame:0000000000006459                 db  0Eh
.eh_frame:000000000000645A                 db  68h ; h
.eh_frame:000000000000645B                 db  41h ; A
.eh_frame:000000000000645C                 db  0Eh
.eh_frame:000000000000645D                 db  60h ; `
.eh_frame:000000000000645E                 db  44h ; D
.eh_frame:000000000000645F                 db  0Ah
.eh_frame:0000000000006460                 db  0Eh
.eh_frame:0000000000006461                 db  38h ; 8
.eh_frame:0000000000006462                 db  41h ; A
.eh_frame:0000000000006463                 db  0Eh
.eh_frame:0000000000006464                 db  30h ; 0
.eh_frame:0000000000006465                 db  41h ; A
.eh_frame:0000000000006466                 db  0Eh
.eh_frame:0000000000006467                 db  28h ; (
.eh_frame:0000000000006468                 db  42h ; B
.eh_frame:0000000000006469                 db  0Eh
.eh_frame:000000000000646A                 db  20h
.eh_frame:000000000000646B                 db  42h ; B
.eh_frame:000000000000646C                 db  0Eh
.eh_frame:000000000000646D                 db  18h
.eh_frame:000000000000646E                 db  42h ; B
.eh_frame:000000000000646F                 db  0Eh
.eh_frame:0000000000006470                 db  10h
.eh_frame:0000000000006471                 db  42h ; B
.eh_frame:0000000000006472                 db  0Eh
.eh_frame:0000000000006473                 db    8
.eh_frame:0000000000006474                 db  45h ; E
.eh_frame:0000000000006475                 db  0Bh
.eh_frame:0000000000006476                 db  68h ; h
.eh_frame:0000000000006477                 db  0Ah
.eh_frame:0000000000006478                 db  0Eh
.eh_frame:0000000000006479                 db  68h ; h
.eh_frame:000000000000647A                 db  48h ; H
.eh_frame:000000000000647B                 db  0Bh
.eh_frame:000000000000647C                 db  72h ; r
.eh_frame:000000000000647D                 db  0Eh
.eh_frame:000000000000647E                 db  68h ; h
.eh_frame:000000000000647F                 db  45h ; E
.eh_frame:0000000000006480                 db  0Eh
.eh_frame:0000000000006481                 db  70h ; p
.eh_frame:0000000000006482                 db  42h ; B
.eh_frame:0000000000006483                 db  0Eh
.eh_frame:0000000000006484                 db  78h ; x
.eh_frame:0000000000006485                 db  42h ; B
.eh_frame:0000000000006486                 db  0Eh
.eh_frame:0000000000006487                 db  80h
.eh_frame:0000000000006488                 db    1
.eh_frame:0000000000006489                 db  5Eh ; ^
.eh_frame:000000000000648A                 db  0Eh
.eh_frame:000000000000648B                 db  60h ; `
.eh_frame:000000000000648C                 db  44h ; D
.eh_frame:000000000000648D                 db  0Ah
.eh_frame:000000000000648E                 db  0Eh
.eh_frame:000000000000648F                 db  38h ; 8
.eh_frame:0000000000006490                 db  41h ; A
.eh_frame:0000000000006491                 db  0Eh
.eh_frame:0000000000006492                 db  30h ; 0
.eh_frame:0000000000006493                 db  41h ; A
.eh_frame:0000000000006494                 db  0Eh
.eh_frame:0000000000006495                 db  28h ; (
.eh_frame:0000000000006496                 db  42h ; B
.eh_frame:0000000000006497                 db  0Eh
.eh_frame:0000000000006498                 db  20h
.eh_frame:0000000000006499                 db  42h ; B
.eh_frame:000000000000649A                 db  0Eh
.eh_frame:000000000000649B                 db  18h
.eh_frame:000000000000649C                 db  42h ; B
.eh_frame:000000000000649D                 db  0Eh
.eh_frame:000000000000649E                 db  10h
.eh_frame:000000000000649F                 db  42h ; B
.eh_frame:00000000000064A0                 db  0Eh
.eh_frame:00000000000064A1                 db    8
.eh_frame:00000000000064A2                 db  41h ; A
.eh_frame:00000000000064A3                 db  0Bh
.eh_frame:00000000000064A4                 db  79h ; y
.eh_frame:00000000000064A5                 db  0Ah
.eh_frame:00000000000064A6                 db  0Eh
.eh_frame:00000000000064A7                 db  68h ; h
.eh_frame:00000000000064A8                 db  42h ; B
.eh_frame:00000000000064A9                 db  0Eh
.eh_frame:00000000000064AA                 db  70h ; p
.eh_frame:00000000000064AB                 db  42h ; B
.eh_frame:00000000000064AC                 db  0Eh
.eh_frame:00000000000064AD                 db  78h ; x
.eh_frame:00000000000064AE                 db  42h ; B
.eh_frame:00000000000064AF                 db  0Eh
.eh_frame:00000000000064B0                 db  80h
.eh_frame:00000000000064B1                 db    1
.eh_frame:00000000000064B2                 db  51h ; Q
.eh_frame:00000000000064B3                 db  0Bh
.eh_frame:00000000000064B4                 db  10h
.eh_frame:00000000000064B5                 db    0
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db  88h
.eh_frame:00000000000064B9                 db    7
.eh_frame:00000000000064BA                 db    0
.eh_frame:00000000000064BB                 db    0
.eh_frame:00000000000064BC                 db  74h ; t
.eh_frame:00000000000064BD                 db 0DEh
.eh_frame:00000000000064BE                 db 0FFh
.eh_frame:00000000000064BF                 db 0FFh
.eh_frame:00000000000064C0                 db  20h
.eh_frame:00000000000064C1                 db    0
.eh_frame:00000000000064C2                 db    0
.eh_frame:00000000000064C3                 db    0
.eh_frame:00000000000064C4                 db    0
.eh_frame:00000000000064C5                 db    0
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db  18h
.eh_frame:00000000000064C9                 db    0
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db  9Ch
.eh_frame:00000000000064CD                 db    7
.eh_frame:00000000000064CE                 db    0
.eh_frame:00000000000064CF                 db    0
.eh_frame:00000000000064D0                 db  80h
.eh_frame:00000000000064D1                 db 0DEh
.eh_frame:00000000000064D2                 db 0FFh
.eh_frame:00000000000064D3                 db 0FFh
.eh_frame:00000000000064D4                 db  78h ; x
.eh_frame:00000000000064D5                 db    0
.eh_frame:00000000000064D6                 db    0
.eh_frame:00000000000064D7                 db    0
.eh_frame:00000000000064D8                 db    0
.eh_frame:00000000000064D9                 db  44h ; D
.eh_frame:00000000000064DA                 db  0Eh
.eh_frame:00000000000064DB                 db  70h ; p
.eh_frame:00000000000064DC                 db    2
.eh_frame:00000000000064DD                 db  60h ; `
.eh_frame:00000000000064DE                 db  0Ah
.eh_frame:00000000000064DF                 db  0Eh
.eh_frame:00000000000064E0                 db    8
.eh_frame:00000000000064E1                 db  41h ; A
.eh_frame:00000000000064E2                 db  0Bh
.eh_frame:00000000000064E3                 db    0
.eh_frame:00000000000064E4                 db  28h ; (
.eh_frame:00000000000064E5                 db    0
.eh_frame:00000000000064E6                 db    0
.eh_frame:00000000000064E7                 db    0
.eh_frame:00000000000064E8                 db 0B8h
.eh_frame:00000000000064E9                 db    7
.eh_frame:00000000000064EA                 db    0
.eh_frame:00000000000064EB                 db    0
.eh_frame:00000000000064EC                 db 0E4h
.eh_frame:00000000000064ED                 db 0DEh
.eh_frame:00000000000064EE                 db 0FFh
.eh_frame:00000000000064EF                 db 0FFh
.eh_frame:00000000000064F0                 db 0D5h
.eh_frame:00000000000064F1                 db    0
.eh_frame:00000000000064F2                 db    0
.eh_frame:00000000000064F3                 db    0
.eh_frame:00000000000064F4                 db    0
.eh_frame:00000000000064F5                 db  41h ; A
.eh_frame:00000000000064F6                 db  0Eh
.eh_frame:00000000000064F7                 db  10h
.eh_frame:00000000000064F8                 db  86h
.eh_frame:00000000000064F9                 db    2
.eh_frame:00000000000064FA                 db  41h ; A
.eh_frame:00000000000064FB                 db  0Eh
.eh_frame:00000000000064FC                 db  18h
.eh_frame:00000000000064FD                 db  83h
.eh_frame:00000000000064FE                 db    3
.eh_frame:00000000000064FF                 db  50h ; P
.eh_frame:0000000000006500                 db  0Eh
.eh_frame:0000000000006501                 db 0D0h
.eh_frame:0000000000006502                 db    1
.eh_frame:0000000000006503                 db    2
.eh_frame:0000000000006504                 db 0ABh
.eh_frame:0000000000006505                 db  0Ah
.eh_frame:0000000000006506                 db  0Eh
.eh_frame:0000000000006507                 db  18h
.eh_frame:0000000000006508                 db  41h ; A
.eh_frame:0000000000006509                 db  0Eh
.eh_frame:000000000000650A                 db  10h
.eh_frame:000000000000650B                 db  41h ; A
.eh_frame:000000000000650C                 db  0Eh
.eh_frame:000000000000650D                 db    8
.eh_frame:000000000000650E                 db  41h ; A
.eh_frame:000000000000650F                 db  0Bh
.eh_frame:0000000000006510                 db  1Ch
.eh_frame:0000000000006511                 db    0
.eh_frame:0000000000006512                 db    0
.eh_frame:0000000000006513                 db    0
.eh_frame:0000000000006514                 db 0E4h
.eh_frame:0000000000006515                 db    7
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db  98h
.eh_frame:0000000000006519                 db 0DFh
.eh_frame:000000000000651A                 db 0FFh
.eh_frame:000000000000651B                 db 0FFh
.eh_frame:000000000000651C                 db  80h
.eh_frame:000000000000651D                 db    0
.eh_frame:000000000000651E                 db    0
.eh_frame:000000000000651F                 db    0
.eh_frame:0000000000006520                 db    0
.eh_frame:0000000000006521                 db  41h ; A
.eh_frame:0000000000006522                 db  0Eh
.eh_frame:0000000000006523                 db  10h
.eh_frame:0000000000006524                 db  83h
.eh_frame:0000000000006525                 db    2
.eh_frame:0000000000006526                 db    2
.eh_frame:0000000000006527                 db  7Ah ; z
.eh_frame:0000000000006528                 db  0Eh
.eh_frame:0000000000006529                 db    8
.eh_frame:000000000000652A                 db    0
.eh_frame:000000000000652B                 db    0
.eh_frame:000000000000652C                 db    0
.eh_frame:000000000000652D                 db    0
.eh_frame:000000000000652E                 db    0
.eh_frame:000000000000652F                 db    0
.eh_frame:0000000000006530                 db  18h
.eh_frame:0000000000006531                 db    0
.eh_frame:0000000000006532                 db    0
.eh_frame:0000000000006533                 db    0
.eh_frame:0000000000006534                 db    4
.eh_frame:0000000000006535                 db    8
.eh_frame:0000000000006536                 db    0
.eh_frame:0000000000006537                 db    0
.eh_frame:0000000000006538                 db 0F8h
.eh_frame:0000000000006539                 db 0DFh
.eh_frame:000000000000653A                 db 0FFh
.eh_frame:000000000000653B                 db 0FFh
.eh_frame:000000000000653C                 db  1Ah
.eh_frame:000000000000653D                 db    0
.eh_frame:000000000000653E                 db    0
.eh_frame:000000000000653F                 db    0
.eh_frame:0000000000006540                 db    0
.eh_frame:0000000000006541                 db  41h ; A
.eh_frame:0000000000006542                 db  0Eh
.eh_frame:0000000000006543                 db  10h
.eh_frame:0000000000006544                 db  83h
.eh_frame:0000000000006545                 db    2
.eh_frame:0000000000006546                 db  53h ; S
.eh_frame:0000000000006547                 db  0Ah
.eh_frame:0000000000006548                 db  0Eh
.eh_frame:0000000000006549                 db    8
.eh_frame:000000000000654A                 db  41h ; A
.eh_frame:000000000000654B                 db  0Bh
.eh_frame:000000000000654C                 db  10h
.eh_frame:000000000000654D                 db    0
.eh_frame:000000000000654E                 db    0
.eh_frame:000000000000654F                 db    0
.eh_frame:0000000000006550                 db  20h
.eh_frame:0000000000006551                 db    8
.eh_frame:0000000000006552                 db    0
.eh_frame:0000000000006553                 db    0
.eh_frame:0000000000006554                 db 0FCh
.eh_frame:0000000000006555                 db 0DFh
.eh_frame:0000000000006556                 db 0FFh
.eh_frame:0000000000006557                 db 0FFh
.eh_frame:0000000000006558                 db  24h ; $
.eh_frame:0000000000006559                 db    0
.eh_frame:000000000000655A                 db    0
.eh_frame:000000000000655B                 db    0
.eh_frame:000000000000655C                 db    0
.eh_frame:000000000000655D                 db  5Fh ; _
.eh_frame:000000000000655E                 db  0Eh
.eh_frame:000000000000655F                 db  10h
.eh_frame:0000000000006560                 db  10h
.eh_frame:0000000000006561                 db    0
.eh_frame:0000000000006562                 db    0
.eh_frame:0000000000006563                 db    0
.eh_frame:0000000000006564                 db  34h ; 4
.eh_frame:0000000000006565                 db    8
.eh_frame:0000000000006566                 db    0
.eh_frame:0000000000006567                 db    0
.eh_frame:0000000000006568                 db  18h
.eh_frame:0000000000006569                 db 0E0h
.eh_frame:000000000000656A                 db 0FFh
.eh_frame:000000000000656B                 db 0FFh
.eh_frame:000000000000656C                 db    2
.eh_frame:000000000000656D                 db    0
.eh_frame:000000000000656E                 db    0
.eh_frame:000000000000656F                 db    0
.eh_frame:0000000000006570                 db    0
.eh_frame:0000000000006571                 db    0
.eh_frame:0000000000006572                 db    0
.eh_frame:0000000000006573                 db    0
.eh_frame:0000000000006574                 db  20h
.eh_frame:0000000000006575                 db    0
.eh_frame:0000000000006576                 db    0
.eh_frame:0000000000006577                 db    0
.eh_frame:0000000000006578                 db  48h ; H
.eh_frame:0000000000006579                 db    8
.eh_frame:000000000000657A                 db    0
.eh_frame:000000000000657B                 db    0
.eh_frame:000000000000657C                 db  14h
.eh_frame:000000000000657D                 db 0E0h
.eh_frame:000000000000657E                 db 0FFh
.eh_frame:000000000000657F                 db 0FFh
.eh_frame:0000000000006580                 db  36h ; 6
.eh_frame:0000000000006581                 db    0
.eh_frame:0000000000006582                 db    0
.eh_frame:0000000000006583                 db    0
.eh_frame:0000000000006584                 db    0
.eh_frame:0000000000006585                 db  44h ; D
.eh_frame:0000000000006586                 db  0Eh
.eh_frame:0000000000006587                 db  10h
.eh_frame:0000000000006588                 db  83h
.eh_frame:0000000000006589                 db    2
.eh_frame:000000000000658A                 db  5Dh ; ]
.eh_frame:000000000000658B                 db  0Ah
.eh_frame:000000000000658C                 db  0Eh
.eh_frame:000000000000658D                 db    8
.eh_frame:000000000000658E                 db  47h ; G
.eh_frame:000000000000658F                 db  0Bh
.eh_frame:0000000000006590                 db  48h ; H
.eh_frame:0000000000006591                 db  0Ah
.eh_frame:0000000000006592                 db  0Eh
.eh_frame:0000000000006593                 db    8
.eh_frame:0000000000006594                 db  41h ; A
.eh_frame:0000000000006595                 db  0Bh
.eh_frame:0000000000006596                 db    0
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db  10h
.eh_frame:0000000000006599                 db    0
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db  6Ch ; l
.eh_frame:000000000000659D                 db    8
.eh_frame:000000000000659E                 db    0
.eh_frame:000000000000659F                 db    0
.eh_frame:00000000000065A0                 db  30h ; 0
.eh_frame:00000000000065A1                 db 0E0h
.eh_frame:00000000000065A2                 db 0FFh
.eh_frame:00000000000065A3                 db 0FFh
.eh_frame:00000000000065A4                 db  24h ; $
.eh_frame:00000000000065A5                 db    0
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db    0
.eh_frame:00000000000065A9                 db  5Fh ; _
.eh_frame:00000000000065AA                 db  0Eh
.eh_frame:00000000000065AB                 db  10h
.eh_frame:00000000000065AC                 db  14h
.eh_frame:00000000000065AD                 db    0
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db  80h
.eh_frame:00000000000065B1                 db    8
.eh_frame:00000000000065B2                 db    0
.eh_frame:00000000000065B3                 db    0
.eh_frame:00000000000065B4                 db  4Ch ; L
.eh_frame:00000000000065B5                 db 0E0h
.eh_frame:00000000000065B6                 db 0FFh
.eh_frame:00000000000065B7                 db 0FFh
.eh_frame:00000000000065B8                 db  82h
.eh_frame:00000000000065B9                 db    0
.eh_frame:00000000000065BA                 db    0
.eh_frame:00000000000065BB                 db    0
.eh_frame:00000000000065BC                 db    0
.eh_frame:00000000000065BD                 db    2
.eh_frame:00000000000065BE                 db  5Fh ; _
.eh_frame:00000000000065BF                 db  0Eh
.eh_frame:00000000000065C0                 db  10h
.eh_frame:00000000000065C1                 db  49h ; I
.eh_frame:00000000000065C2                 db  0Eh
.eh_frame:00000000000065C3                 db    8
.eh_frame:00000000000065C4                 db  14h
.eh_frame:00000000000065C5                 db    0
.eh_frame:00000000000065C6                 db    0
.eh_frame:00000000000065C7                 db    0
.eh_frame:00000000000065C8                 db  98h
.eh_frame:00000000000065C9                 db    8
.eh_frame:00000000000065CA                 db    0
.eh_frame:00000000000065CB                 db    0
.eh_frame:00000000000065CC                 db 0C4h
.eh_frame:00000000000065CD                 db 0E0h
.eh_frame:00000000000065CE                 db 0FFh
.eh_frame:00000000000065CF                 db 0FFh
.eh_frame:00000000000065D0                 db  4Ah ; J
.eh_frame:00000000000065D1                 db    0
.eh_frame:00000000000065D2                 db    0
.eh_frame:00000000000065D3                 db    0
.eh_frame:00000000000065D4                 db    0
.eh_frame:00000000000065D5                 db    2
.eh_frame:00000000000065D6                 db  45h ; E
.eh_frame:00000000000065D7                 db  0Eh
.eh_frame:00000000000065D8                 db  10h
.eh_frame:00000000000065D9                 db    0
.eh_frame:00000000000065DA                 db    0
.eh_frame:00000000000065DB                 db    0
.eh_frame:00000000000065DC                 db  18h
.eh_frame:00000000000065DD                 db    0
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db 0B0h
.eh_frame:00000000000065E1                 db    8
.eh_frame:00000000000065E2                 db    0
.eh_frame:00000000000065E3                 db    0
.eh_frame:00000000000065E4                 db 0FCh
.eh_frame:00000000000065E5                 db 0E0h
.eh_frame:00000000000065E6                 db 0FFh
.eh_frame:00000000000065E7                 db 0FFh
.eh_frame:00000000000065E8                 db  17h
.eh_frame:00000000000065E9                 db    0
.eh_frame:00000000000065EA                 db    0
.eh_frame:00000000000065EB                 db    0
.eh_frame:00000000000065EC                 db    0
.eh_frame:00000000000065ED                 db  41h ; A
.eh_frame:00000000000065EE                 db  0Eh
.eh_frame:00000000000065EF                 db  10h
.eh_frame:00000000000065F0                 db  83h
.eh_frame:00000000000065F1                 db    2
.eh_frame:00000000000065F2                 db  51h ; Q
.eh_frame:00000000000065F3                 db  0Eh
.eh_frame:00000000000065F4                 db    8
.eh_frame:00000000000065F5                 db    0
.eh_frame:00000000000065F6                 db    0
.eh_frame:00000000000065F7                 db    0
.eh_frame:00000000000065F8                 db  18h
.eh_frame:00000000000065F9                 db    0
.eh_frame:00000000000065FA                 db    0
.eh_frame:00000000000065FB                 db    0
.eh_frame:00000000000065FC                 db 0CCh
.eh_frame:00000000000065FD                 db    8
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db    0
.eh_frame:0000000000006601                 db 0E1h
.eh_frame:0000000000006602                 db 0FFh
.eh_frame:0000000000006603                 db 0FFh
.eh_frame:0000000000006604                 db  2Eh ; .
.eh_frame:0000000000006605                 db    0
.eh_frame:0000000000006606                 db    0
.eh_frame:0000000000006607                 db    0
.eh_frame:0000000000006608                 db    0
.eh_frame:0000000000006609                 db  47h ; G
.eh_frame:000000000000660A                 db  0Eh
.eh_frame:000000000000660B                 db  10h
.eh_frame:000000000000660C                 db  61h ; a
.eh_frame:000000000000660D                 db  0Ah
.eh_frame:000000000000660E                 db  0Eh
.eh_frame:000000000000660F                 db    8
.eh_frame:0000000000006610                 db  41h ; A
.eh_frame:0000000000006611                 db  0Bh
.eh_frame:0000000000006612                 db    0
.eh_frame:0000000000006613                 db    0
.eh_frame:0000000000006614                 db  24h ; $
.eh_frame:0000000000006615                 db    0
.eh_frame:0000000000006616                 db    0
.eh_frame:0000000000006617                 db    0
.eh_frame:0000000000006618                 db 0E8h
.eh_frame:0000000000006619                 db    8
.eh_frame:000000000000661A                 db    0
.eh_frame:000000000000661B                 db    0
.eh_frame:000000000000661C                 db  14h
.eh_frame:000000000000661D                 db 0E1h
.eh_frame:000000000000661E                 db 0FFh
.eh_frame:000000000000661F                 db 0FFh
.eh_frame:0000000000006620                 db  28h ; (
.eh_frame:0000000000006621                 db    0
.eh_frame:0000000000006622                 db    0
.eh_frame:0000000000006623                 db    0
.eh_frame:0000000000006624                 db    0
.eh_frame:0000000000006625                 db  41h ; A
.eh_frame:0000000000006626                 db  0Eh
.eh_frame:0000000000006627                 db  10h
.eh_frame:0000000000006628                 db  86h
.eh_frame:0000000000006629                 db    2
.eh_frame:000000000000662A                 db  41h ; A
.eh_frame:000000000000662B                 db  0Eh
.eh_frame:000000000000662C                 db  18h
.eh_frame:000000000000662D                 db  83h
.eh_frame:000000000000662E                 db    3
.eh_frame:000000000000662F                 db  4Dh ; M
.eh_frame:0000000000006630                 db  0Eh
.eh_frame:0000000000006631                 db  20h
.eh_frame:0000000000006632                 db  49h ; I
.eh_frame:0000000000006633                 db  0Eh
.eh_frame:0000000000006634                 db  18h
.eh_frame:0000000000006635                 db  47h ; G
.eh_frame:0000000000006636                 db  0Eh
.eh_frame:0000000000006637                 db  10h
.eh_frame:0000000000006638                 db  41h ; A
.eh_frame:0000000000006639                 db  0Eh
.eh_frame:000000000000663A                 db    8
.eh_frame:000000000000663B                 db    0
.eh_frame:000000000000663C                 db  18h
.eh_frame:000000000000663D                 db    0
.eh_frame:000000000000663E                 db    0
.eh_frame:000000000000663F                 db    0
.eh_frame:0000000000006640                 db  10h
.eh_frame:0000000000006641                 db    9
.eh_frame:0000000000006642                 db    0
.eh_frame:0000000000006643                 db    0
.eh_frame:0000000000006644                 db  1Ch
.eh_frame:0000000000006645                 db 0E1h
.eh_frame:0000000000006646                 db 0FFh
.eh_frame:0000000000006647                 db 0FFh
.eh_frame:0000000000006648                 db  13h
.eh_frame:0000000000006649                 db    0
.eh_frame:000000000000664A                 db    0
.eh_frame:000000000000664B                 db    0
.eh_frame:000000000000664C                 db    0
.eh_frame:000000000000664D                 db  41h ; A
.eh_frame:000000000000664E                 db  0Eh
.eh_frame:000000000000664F                 db  10h
.eh_frame:0000000000006650                 db  83h
.eh_frame:0000000000006651                 db    2
.eh_frame:0000000000006652                 db  50h ; P
.eh_frame:0000000000006653                 db  0Eh
.eh_frame:0000000000006654                 db    8
.eh_frame:0000000000006655                 db    0
.eh_frame:0000000000006656                 db    0
.eh_frame:0000000000006657                 db    0
.eh_frame:0000000000006658                 db  14h
.eh_frame:0000000000006659                 db    0
.eh_frame:000000000000665A                 db    0
.eh_frame:000000000000665B                 db    0
.eh_frame:000000000000665C                 db  2Ch ; ,
.eh_frame:000000000000665D                 db    9
.eh_frame:000000000000665E                 db    0
.eh_frame:000000000000665F                 db    0
.eh_frame:0000000000006660                 db  20h
.eh_frame:0000000000006661                 db 0E1h
.eh_frame:0000000000006662                 db 0FFh
.eh_frame:0000000000006663                 db 0FFh
.eh_frame:0000000000006664                 db  35h ; 5
.eh_frame:0000000000006665                 db    0
.eh_frame:0000000000006666                 db    0
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db    0
.eh_frame:0000000000006669                 db  4Bh ; K
.eh_frame:000000000000666A                 db  0Eh
.eh_frame:000000000000666B                 db  10h
.eh_frame:000000000000666C                 db    0
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db  1Ch
.eh_frame:0000000000006671                 db    0
.eh_frame:0000000000006672                 db    0
.eh_frame:0000000000006673                 db    0
.eh_frame:0000000000006674                 db  44h ; D
.eh_frame:0000000000006675                 db    9
.eh_frame:0000000000006676                 db    0
.eh_frame:0000000000006677                 db    0
.eh_frame:0000000000006678                 db  48h ; H
.eh_frame:0000000000006679                 db 0E1h
.eh_frame:000000000000667A                 db 0FFh
.eh_frame:000000000000667B                 db 0FFh
.eh_frame:000000000000667C                 db  27h ; '
.eh_frame:000000000000667D                 db    0
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db    0
.eh_frame:0000000000006681                 db  41h ; A
.eh_frame:0000000000006682                 db  0Eh
.eh_frame:0000000000006683                 db  10h
.eh_frame:0000000000006684                 db  83h
.eh_frame:0000000000006685                 db    2
.eh_frame:0000000000006686                 db  4Fh ; O
.eh_frame:0000000000006687                 db  0Ah
.eh_frame:0000000000006688                 db  0Eh
.eh_frame:0000000000006689                 db    8
.eh_frame:000000000000668A                 db  48h ; H
.eh_frame:000000000000668B                 db  0Bh
.eh_frame:000000000000668C                 db    0
.eh_frame:000000000000668D                 db    0
.eh_frame:000000000000668E                 db    0
.eh_frame:000000000000668F                 db    0
.eh_frame:0000000000006690                 db  3Ch ; <
.eh_frame:0000000000006691                 db    0
.eh_frame:0000000000006692                 db    0
.eh_frame:0000000000006693                 db    0
.eh_frame:0000000000006694                 db  64h ; d
.eh_frame:0000000000006695                 db    9
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006698                 db  58h ; X
.eh_frame:0000000000006699                 db 0E1h
.eh_frame:000000000000669A                 db 0FFh
.eh_frame:000000000000669B                 db 0FFh
.eh_frame:000000000000669C                 db  83h
.eh_frame:000000000000669D                 db    0
.eh_frame:000000000000669E                 db    0
.eh_frame:000000000000669F                 db    0
.eh_frame:00000000000066A0                 db    0
.eh_frame:00000000000066A1                 db  42h ; B
.eh_frame:00000000000066A2                 db  0Eh
.eh_frame:00000000000066A3                 db  10h
.eh_frame:00000000000066A4                 db  8Dh
.eh_frame:00000000000066A5                 db    2
.eh_frame:00000000000066A6                 db  42h ; B
.eh_frame:00000000000066A7                 db  0Eh
.eh_frame:00000000000066A8                 db  18h
.eh_frame:00000000000066A9                 db  8Ch
.eh_frame:00000000000066AA                 db    3
.eh_frame:00000000000066AB                 db  44h ; D
.eh_frame:00000000000066AC                 db  0Eh
.eh_frame:00000000000066AD                 db  20h
.eh_frame:00000000000066AE                 db  86h
.eh_frame:00000000000066AF                 db    4
.eh_frame:00000000000066B0                 db  41h ; A
.eh_frame:00000000000066B1                 db  0Eh
.eh_frame:00000000000066B2                 db  28h ; (
.eh_frame:00000000000066B3                 db  83h
.eh_frame:00000000000066B4                 db    5
.eh_frame:00000000000066B5                 db  4Ah ; J
.eh_frame:00000000000066B6                 db  0Eh
.eh_frame:00000000000066B7                 db  40h ; @
.eh_frame:00000000000066B8                 db    2
.eh_frame:00000000000066B9                 db  64h ; d
.eh_frame:00000000000066BA                 db  0Ah
.eh_frame:00000000000066BB                 db  0Eh
.eh_frame:00000000000066BC                 db  28h ; (
.eh_frame:00000000000066BD                 db  41h ; A
.eh_frame:00000000000066BE                 db  0Eh
.eh_frame:00000000000066BF                 db  20h
.eh_frame:00000000000066C0                 db  41h ; A
.eh_frame:00000000000066C1                 db  0Eh
.eh_frame:00000000000066C2                 db  18h
.eh_frame:00000000000066C3                 db  42h ; B
.eh_frame:00000000000066C4                 db  0Eh
.eh_frame:00000000000066C5                 db  10h
.eh_frame:00000000000066C6                 db  42h ; B
.eh_frame:00000000000066C7                 db  0Eh
.eh_frame:00000000000066C8                 db    8
.eh_frame:00000000000066C9                 db  41h ; A
.eh_frame:00000000000066CA                 db  0Bh
.eh_frame:00000000000066CB                 db    0
.eh_frame:00000000000066CC                 db    0
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db  4Ch ; L
.eh_frame:00000000000066D1                 db    0
.eh_frame:00000000000066D2                 db    0
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db 0A4h
.eh_frame:00000000000066D5                 db    9
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db 0A8h
.eh_frame:00000000000066D9                 db 0E1h
.eh_frame:00000000000066DA                 db 0FFh
.eh_frame:00000000000066DB                 db 0FFh
.eh_frame:00000000000066DC                 db  7Dh ; }
.eh_frame:00000000000066DD                 db    0
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db    0
.eh_frame:00000000000066E1                 db  42h ; B
.eh_frame:00000000000066E2                 db  0Eh
.eh_frame:00000000000066E3                 db  10h
.eh_frame:00000000000066E4                 db  8Ch
.eh_frame:00000000000066E5                 db    2
.eh_frame:00000000000066E6                 db  41h ; A
.eh_frame:00000000000066E7                 db  0Eh
.eh_frame:00000000000066E8                 db  18h
.eh_frame:00000000000066E9                 db  86h
.eh_frame:00000000000066EA                 db    3
.eh_frame:00000000000066EB                 db  44h ; D
.eh_frame:00000000000066EC                 db  0Eh
.eh_frame:00000000000066ED                 db  20h
.eh_frame:00000000000066EE                 db  83h
.eh_frame:00000000000066EF                 db    4
.eh_frame:00000000000066F0                 db  69h ; i
.eh_frame:00000000000066F1                 db  0Ah
.eh_frame:00000000000066F2                 db  0Eh
.eh_frame:00000000000066F3                 db  18h
.eh_frame:00000000000066F4                 db  41h ; A
.eh_frame:00000000000066F5                 db  0Eh
.eh_frame:00000000000066F6                 db  10h
.eh_frame:00000000000066F7                 db  42h ; B
.eh_frame:00000000000066F8                 db  0Eh
.eh_frame:00000000000066F9                 db    8
.eh_frame:00000000000066FA                 db  45h ; E
.eh_frame:00000000000066FB                 db  0Bh
.eh_frame:00000000000066FC                 db  55h ; U
.eh_frame:00000000000066FD                 db  0Ah
.eh_frame:00000000000066FE                 db  0Eh
.eh_frame:00000000000066FF                 db  18h
.eh_frame:0000000000006700                 db  41h ; A
.eh_frame:0000000000006701                 db  0Eh
.eh_frame:0000000000006702                 db  10h
.eh_frame:0000000000006703                 db  42h ; B
.eh_frame:0000000000006704                 db  0Eh
.eh_frame:0000000000006705                 db    8
.eh_frame:0000000000006706                 db  48h ; H
.eh_frame:0000000000006707                 db  0Bh
.eh_frame:0000000000006708                 db  41h ; A
.eh_frame:0000000000006709                 db  0Ah
.eh_frame:000000000000670A                 db  0Eh
.eh_frame:000000000000670B                 db  18h
.eh_frame:000000000000670C                 db  46h ; F
.eh_frame:000000000000670D                 db  0Eh
.eh_frame:000000000000670E                 db  10h
.eh_frame:000000000000670F                 db  42h ; B
.eh_frame:0000000000006710                 db  0Eh
.eh_frame:0000000000006711                 db    8
.eh_frame:0000000000006712                 db  47h ; G
.eh_frame:0000000000006713                 db  0Bh
.eh_frame:0000000000006714                 db  49h ; I
.eh_frame:0000000000006715                 db  0Eh
.eh_frame:0000000000006716                 db  18h
.eh_frame:0000000000006717                 db  41h ; A
.eh_frame:0000000000006718                 db  0Eh
.eh_frame:0000000000006719                 db  10h
.eh_frame:000000000000671A                 db  42h ; B
.eh_frame:000000000000671B                 db  0Eh
.eh_frame:000000000000671C                 db    8
.eh_frame:000000000000671D                 db    0
.eh_frame:000000000000671E                 db    0
.eh_frame:000000000000671F                 db    0
.eh_frame:0000000000006720                 db  1Ch
.eh_frame:0000000000006721                 db    0
.eh_frame:0000000000006722                 db    0
.eh_frame:0000000000006723                 db    0
.eh_frame:0000000000006724                 db 0F4h
.eh_frame:0000000000006725                 db    9
.eh_frame:0000000000006726                 db    0
.eh_frame:0000000000006727                 db    0
.eh_frame:0000000000006728                 db 0D8h
.eh_frame:0000000000006729                 db 0E1h
.eh_frame:000000000000672A                 db 0FFh
.eh_frame:000000000000672B                 db 0FFh
.eh_frame:000000000000672C                 db  60h ; `
.eh_frame:000000000000672D                 db    0
.eh_frame:000000000000672E                 db    0
.eh_frame:000000000000672F                 db    0
.eh_frame:0000000000006730                 db    0
.eh_frame:0000000000006731                 db  44h ; D
.eh_frame:0000000000006732                 db  0Eh
.eh_frame:0000000000006733                 db  10h
.eh_frame:0000000000006734                 db  75h ; u
.eh_frame:0000000000006735                 db  0Ah
.eh_frame:0000000000006736                 db  0Eh
.eh_frame:0000000000006737                 db    8
.eh_frame:0000000000006738                 db  47h ; G
.eh_frame:0000000000006739                 db  0Bh
.eh_frame:000000000000673A                 db  5Fh ; _
.eh_frame:000000000000673B                 db  0Eh
.eh_frame:000000000000673C                 db    8
.eh_frame:000000000000673D                 db    0
.eh_frame:000000000000673E                 db    0
.eh_frame:000000000000673F                 db    0
.eh_frame:0000000000006740                 db  1Ch
.eh_frame:0000000000006741                 db    0
.eh_frame:0000000000006742                 db    0
.eh_frame:0000000000006743                 db    0
.eh_frame:0000000000006744                 db  14h
.eh_frame:0000000000006745                 db  0Ah
.eh_frame:0000000000006746                 db    0
.eh_frame:0000000000006747                 db    0
.eh_frame:0000000000006748                 db  18h
.eh_frame:0000000000006749                 db 0E2h
.eh_frame:000000000000674A                 db 0FFh
.eh_frame:000000000000674B                 db 0FFh
.eh_frame:000000000000674C                 db  3Ch ; <
.eh_frame:000000000000674D                 db    0
.eh_frame:000000000000674E                 db    0
.eh_frame:000000000000674F                 db    0
.eh_frame:0000000000006750                 db    0
.eh_frame:0000000000006751                 db  44h ; D
.eh_frame:0000000000006752                 db  0Eh
.eh_frame:0000000000006753                 db  10h
.eh_frame:0000000000006754                 db  61h ; a
.eh_frame:0000000000006755                 db  0Ah
.eh_frame:0000000000006756                 db  0Eh
.eh_frame:0000000000006757                 db    8
.eh_frame:0000000000006758                 db  4Bh ; K
.eh_frame:0000000000006759                 db  0Bh
.eh_frame:000000000000675A                 db  4Bh ; K
.eh_frame:000000000000675B                 db  0Eh
.eh_frame:000000000000675C                 db    8
.eh_frame:000000000000675D                 db    0
.eh_frame:000000000000675E                 db    0
.eh_frame:000000000000675F                 db    0
.eh_frame:0000000000006760                 db  14h
.eh_frame:0000000000006761                 db    0
.eh_frame:0000000000006762                 db    0
.eh_frame:0000000000006763                 db    0
.eh_frame:0000000000006764                 db  34h ; 4
.eh_frame:0000000000006765                 db  0Ah
.eh_frame:0000000000006766                 db    0
.eh_frame:0000000000006767                 db    0
.eh_frame:0000000000006768                 db  38h ; 8
.eh_frame:0000000000006769                 db 0E2h
.eh_frame:000000000000676A                 db 0FFh
.eh_frame:000000000000676B                 db 0FFh
.eh_frame:000000000000676C                 db  45h ; E
.eh_frame:000000000000676D                 db    0
.eh_frame:000000000000676E                 db    0
.eh_frame:000000000000676F                 db    0
.eh_frame:0000000000006770                 db    0
.eh_frame:0000000000006771                 db  6Ch ; l
.eh_frame:0000000000006772                 db  0Eh
.eh_frame:0000000000006773                 db  10h
.eh_frame:0000000000006774                 db  51h ; Q
.eh_frame:0000000000006775                 db  0Eh
.eh_frame:0000000000006776                 db    8
.eh_frame:0000000000006777                 db    0
.eh_frame:0000000000006778                 db  4Ch ; L
.eh_frame:0000000000006779                 db    0
.eh_frame:000000000000677A                 db    0
.eh_frame:000000000000677B                 db    0
.eh_frame:000000000000677C                 db  4Ch ; L
.eh_frame:000000000000677D                 db  0Ah
.eh_frame:000000000000677E                 db    0
.eh_frame:000000000000677F                 db    0
.eh_frame:0000000000006780                 db  70h ; p
.eh_frame:0000000000006781                 db 0E2h
.eh_frame:0000000000006782                 db 0FFh
.eh_frame:0000000000006783                 db 0FFh
.eh_frame:0000000000006784                 db  3Ch ; <
.eh_frame:0000000000006785                 db    2
.eh_frame:0000000000006786                 db    0
.eh_frame:0000000000006787                 db    0
.eh_frame:0000000000006788                 db    0
.eh_frame:0000000000006789                 db  42h ; B
.eh_frame:000000000000678A                 db  0Eh
.eh_frame:000000000000678B                 db  10h
.eh_frame:000000000000678C                 db  8Fh
.eh_frame:000000000000678D                 db    2
.eh_frame:000000000000678E                 db  42h ; B
.eh_frame:000000000000678F                 db  0Eh
.eh_frame:0000000000006790                 db  18h
.eh_frame:0000000000006791                 db  8Eh
.eh_frame:0000000000006792                 db    3
.eh_frame:0000000000006793                 db  45h ; E
.eh_frame:0000000000006794                 db  0Eh
.eh_frame:0000000000006795                 db  20h
.eh_frame:0000000000006796                 db  8Dh
.eh_frame:0000000000006797                 db    4
.eh_frame:0000000000006798                 db  42h ; B
.eh_frame:0000000000006799                 db  0Eh
.eh_frame:000000000000679A                 db  28h ; (
.eh_frame:000000000000679B                 db  8Ch
.eh_frame:000000000000679C                 db    5
.eh_frame:000000000000679D                 db  44h ; D
.eh_frame:000000000000679E                 db  0Eh
.eh_frame:000000000000679F                 db  30h ; 0
.eh_frame:00000000000067A0                 db  86h
.eh_frame:00000000000067A1                 db    6
.eh_frame:00000000000067A2                 db  41h ; A
.eh_frame:00000000000067A3                 db  0Eh
.eh_frame:00000000000067A4                 db  38h ; 8
.eh_frame:00000000000067A5                 db  83h
.eh_frame:00000000000067A6                 db    7
.eh_frame:00000000000067A7                 db  44h ; D
.eh_frame:00000000000067A8                 db  0Eh
.eh_frame:00000000000067A9                 db  50h ; P
.eh_frame:00000000000067AA                 db    2
.eh_frame:00000000000067AB                 db 0A1h
.eh_frame:00000000000067AC                 db  0Ah
.eh_frame:00000000000067AD                 db  0Eh
.eh_frame:00000000000067AE                 db  38h ; 8
.eh_frame:00000000000067AF                 db  41h ; A
.eh_frame:00000000000067B0                 db  0Eh
.eh_frame:00000000000067B1                 db  30h ; 0
.eh_frame:00000000000067B2                 db  41h ; A
.eh_frame:00000000000067B3                 db  0Eh
.eh_frame:00000000000067B4                 db  28h ; (
.eh_frame:00000000000067B5                 db  42h ; B
.eh_frame:00000000000067B6                 db  0Eh
.eh_frame:00000000000067B7                 db  20h
.eh_frame:00000000000067B8                 db  42h ; B
.eh_frame:00000000000067B9                 db  0Eh
.eh_frame:00000000000067BA                 db  18h
.eh_frame:00000000000067BB                 db  42h ; B
.eh_frame:00000000000067BC                 db  0Eh
.eh_frame:00000000000067BD                 db  10h
.eh_frame:00000000000067BE                 db  42h ; B
.eh_frame:00000000000067BF                 db  0Eh
.eh_frame:00000000000067C0                 db    8
.eh_frame:00000000000067C1                 db  41h ; A
.eh_frame:00000000000067C2                 db  0Bh
.eh_frame:00000000000067C3                 db    0
.eh_frame:00000000000067C4                 db    0
.eh_frame:00000000000067C5                 db    0
.eh_frame:00000000000067C6                 db    0
.eh_frame:00000000000067C7                 db    0
.eh_frame:00000000000067C8                 db  34h ; 4
.eh_frame:00000000000067C9                 db    0
.eh_frame:00000000000067CA                 db    0
.eh_frame:00000000000067CB                 db    0
.eh_frame:00000000000067CC                 db  9Ch
.eh_frame:00000000000067CD                 db  0Ah
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db  60h ; `
.eh_frame:00000000000067D1                 db 0E4h
.eh_frame:00000000000067D2                 db 0FFh
.eh_frame:00000000000067D3                 db 0FFh
.eh_frame:00000000000067D4                 db  7Bh ; {
.eh_frame:00000000000067D5                 db    0
.eh_frame:00000000000067D6                 db    0
.eh_frame:00000000000067D7                 db    0
.eh_frame:00000000000067D8                 db    0
.eh_frame:00000000000067D9                 db  42h ; B
.eh_frame:00000000000067DA                 db  0Eh
.eh_frame:00000000000067DB                 db  10h
.eh_frame:00000000000067DC                 db  8Ch
.eh_frame:00000000000067DD                 db    2
.eh_frame:00000000000067DE                 db  41h ; A
.eh_frame:00000000000067DF                 db  0Eh
.eh_frame:00000000000067E0                 db  18h
.eh_frame:00000000000067E1                 db  86h
.eh_frame:00000000000067E2                 db    3
.eh_frame:00000000000067E3                 db  41h ; A
.eh_frame:00000000000067E4                 db  0Eh
.eh_frame:00000000000067E5                 db  20h
.eh_frame:00000000000067E6                 db  83h
.eh_frame:00000000000067E7                 db    4
.eh_frame:00000000000067E8                 db  7Dh ; }
.eh_frame:00000000000067E9                 db  0Ah
.eh_frame:00000000000067EA                 db  0Eh
.eh_frame:00000000000067EB                 db  18h
.eh_frame:00000000000067EC                 db  41h ; A
.eh_frame:00000000000067ED                 db  0Eh
.eh_frame:00000000000067EE                 db  10h
.eh_frame:00000000000067EF                 db  42h ; B
.eh_frame:00000000000067F0                 db  0Eh
.eh_frame:00000000000067F1                 db    8
.eh_frame:00000000000067F2                 db  44h ; D
.eh_frame:00000000000067F3                 db  0Bh
.eh_frame:00000000000067F4                 db  60h ; `
.eh_frame:00000000000067F5                 db  0Ah
.eh_frame:00000000000067F6                 db  0Eh
.eh_frame:00000000000067F7                 db  18h
.eh_frame:00000000000067F8                 db  41h ; A
.eh_frame:00000000000067F9                 db  0Eh
.eh_frame:00000000000067FA                 db  10h
.eh_frame:00000000000067FB                 db  42h ; B
.eh_frame:00000000000067FC                 db  0Eh
.eh_frame:00000000000067FD                 db    8
.eh_frame:00000000000067FE                 db  45h ; E
.eh_frame:00000000000067FF                 db  0Bh
.eh_frame:0000000000006800                 db  1Ch
.eh_frame:0000000000006801                 db    0
.eh_frame:0000000000006802                 db    0
.eh_frame:0000000000006803                 db    0
.eh_frame:0000000000006804                 db 0D4h
.eh_frame:0000000000006805                 db  0Ah
.eh_frame:0000000000006806                 db    0
.eh_frame:0000000000006807                 db    0
.eh_frame:0000000000006808                 db 0A8h
.eh_frame:0000000000006809                 db 0E4h
.eh_frame:000000000000680A                 db 0FFh
.eh_frame:000000000000680B                 db 0FFh
.eh_frame:000000000000680C                 db  40h ; @
.eh_frame:000000000000680D                 db    0
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db    0
.eh_frame:0000000000006811                 db  44h ; D
.eh_frame:0000000000006812                 db  0Eh
.eh_frame:0000000000006813                 db  10h
.eh_frame:0000000000006814                 db  83h
.eh_frame:0000000000006815                 db    2
.eh_frame:0000000000006816                 db  5Ah ; Z
.eh_frame:0000000000006817                 db  0Ah
.eh_frame:0000000000006818                 db  0Eh
.eh_frame:0000000000006819                 db    8
.eh_frame:000000000000681A                 db  4Ah ; J
.eh_frame:000000000000681B                 db  0Bh
.eh_frame:000000000000681C                 db  53h ; S
.eh_frame:000000000000681D                 db  0Eh
.eh_frame:000000000000681E                 db    8
.eh_frame:000000000000681F                 db    0
.eh_frame:0000000000006820                 db  2Ch ; ,
.eh_frame:0000000000006821                 db    0
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db 0F4h
.eh_frame:0000000000006825                 db  0Ah
.eh_frame:0000000000006826                 db    0
.eh_frame:0000000000006827                 db    0
.eh_frame:0000000000006828                 db 0C8h
.eh_frame:0000000000006829                 db 0E4h
.eh_frame:000000000000682A                 db 0FFh
.eh_frame:000000000000682B                 db 0FFh
.eh_frame:000000000000682C                 db  57h ; W
.eh_frame:000000000000682D                 db    0
.eh_frame:000000000000682E                 db    0
.eh_frame:000000000000682F                 db    0
.eh_frame:0000000000006830                 db    0
.eh_frame:0000000000006831                 db  63h ; c
.eh_frame:0000000000006832                 db  0Eh
.eh_frame:0000000000006833                 db  10h
.eh_frame:0000000000006834                 db  8Ch
.eh_frame:0000000000006835                 db    2
.eh_frame:0000000000006836                 db  41h ; A
.eh_frame:0000000000006837                 db  0Eh
.eh_frame:0000000000006838                 db  18h
.eh_frame:0000000000006839                 db  86h
.eh_frame:000000000000683A                 db    3
.eh_frame:000000000000683B                 db  44h ; D
.eh_frame:000000000000683C                 db  0Eh
.eh_frame:000000000000683D                 db  20h
.eh_frame:000000000000683E                 db  83h
.eh_frame:000000000000683F                 db    4
.eh_frame:0000000000006840                 db  6Bh ; k
.eh_frame:0000000000006841                 db  0Eh
.eh_frame:0000000000006842                 db  18h
.eh_frame:0000000000006843                 db  41h ; A
.eh_frame:0000000000006844                 db  0Eh
.eh_frame:0000000000006845                 db  10h
.eh_frame:0000000000006846                 db  42h ; B
.eh_frame:0000000000006847                 db  0Eh
.eh_frame:0000000000006848                 db    8
.eh_frame:0000000000006849                 db    0
.eh_frame:000000000000684A                 db    0
.eh_frame:000000000000684B                 db    0
.eh_frame:000000000000684C                 db    0
.eh_frame:000000000000684D                 db    0
.eh_frame:000000000000684E                 db    0
.eh_frame:000000000000684F                 db    0
.eh_frame:0000000000006850                 db  44h ; D
.eh_frame:0000000000006851                 db    0
.eh_frame:0000000000006852                 db    0
.eh_frame:0000000000006853                 db    0
.eh_frame:0000000000006854                 db  24h ; $
.eh_frame:0000000000006855                 db  0Bh
.eh_frame:0000000000006856                 db    0
.eh_frame:0000000000006857                 db    0
.eh_frame:0000000000006858                 db 0F8h
.eh_frame:0000000000006859                 db 0E4h
.eh_frame:000000000000685A                 db 0FFh
.eh_frame:000000000000685B                 db 0FFh
.eh_frame:000000000000685C                 db  65h ; e
.eh_frame:000000000000685D                 db    0
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db    0
.eh_frame:0000000000006861                 db  42h ; B
.eh_frame:0000000000006862                 db  0Eh
.eh_frame:0000000000006863                 db  10h
.eh_frame:0000000000006864                 db  8Fh
.eh_frame:0000000000006865                 db    2
.eh_frame:0000000000006866                 db  42h ; B
.eh_frame:0000000000006867                 db  0Eh
.eh_frame:0000000000006868                 db  18h
.eh_frame:0000000000006869                 db  8Eh
.eh_frame:000000000000686A                 db    3
.eh_frame:000000000000686B                 db  45h ; E
.eh_frame:000000000000686C                 db  0Eh
.eh_frame:000000000000686D                 db  20h
.eh_frame:000000000000686E                 db  8Dh
.eh_frame:000000000000686F                 db    4
.eh_frame:0000000000006870                 db  42h ; B
.eh_frame:0000000000006871                 db  0Eh
.eh_frame:0000000000006872                 db  28h ; (
.eh_frame:0000000000006873                 db  8Ch
.eh_frame:0000000000006874                 db    5
.eh_frame:0000000000006875                 db  48h ; H
.eh_frame:0000000000006876                 db  0Eh
.eh_frame:0000000000006877                 db  30h ; 0
.eh_frame:0000000000006878                 db  86h
.eh_frame:0000000000006879                 db    6
.eh_frame:000000000000687A                 db  48h ; H
.eh_frame:000000000000687B                 db  0Eh
.eh_frame:000000000000687C                 db  38h ; 8
.eh_frame:000000000000687D                 db  83h
.eh_frame:000000000000687E                 db    7
.eh_frame:000000000000687F                 db  4Dh ; M
.eh_frame:0000000000006880                 db  0Eh
.eh_frame:0000000000006881                 db  40h ; @
.eh_frame:0000000000006882                 db  72h ; r
.eh_frame:0000000000006883                 db  0Eh
.eh_frame:0000000000006884                 db  38h ; 8
.eh_frame:0000000000006885                 db  41h ; A
.eh_frame:0000000000006886                 db  0Eh
.eh_frame:0000000000006887                 db  30h ; 0
.eh_frame:0000000000006888                 db  41h ; A
.eh_frame:0000000000006889                 db  0Eh
.eh_frame:000000000000688A                 db  28h ; (
.eh_frame:000000000000688B                 db  42h ; B
.eh_frame:000000000000688C                 db  0Eh
.eh_frame:000000000000688D                 db  20h
.eh_frame:000000000000688E                 db  42h ; B
.eh_frame:000000000000688F                 db  0Eh
.eh_frame:0000000000006890                 db  18h
.eh_frame:0000000000006891                 db  42h ; B
.eh_frame:0000000000006892                 db  0Eh
.eh_frame:0000000000006893                 db  10h
.eh_frame:0000000000006894                 db  42h ; B
.eh_frame:0000000000006895                 db  0Eh
.eh_frame:0000000000006896                 db    8
.eh_frame:0000000000006897                 db    0
.eh_frame:0000000000006898                 db  14h
.eh_frame:0000000000006899                 db    0
.eh_frame:000000000000689A                 db    0
.eh_frame:000000000000689B                 db    0
.eh_frame:000000000000689C                 db  6Ch ; l
.eh_frame:000000000000689D                 db  0Bh
.eh_frame:000000000000689E                 db    0
.eh_frame:000000000000689F                 db    0
.eh_frame:00000000000068A0                 db  20h
.eh_frame:00000000000068A1                 db 0E5h
.eh_frame:00000000000068A2                 db 0FFh
.eh_frame:00000000000068A3                 db 0FFh
.eh_frame:00000000000068A4                 db    2
.eh_frame:00000000000068A5                 db    0
.eh_frame:00000000000068A6                 db    0
.eh_frame:00000000000068A7                 db    0
.eh_frame:00000000000068A8                 db    0
.eh_frame:00000000000068A9                 db    0
.eh_frame:00000000000068AA                 db    0
.eh_frame:00000000000068AB                 db    0
.eh_frame:00000000000068AC                 db    0
.eh_frame:00000000000068AD                 db    0
.eh_frame:00000000000068AE                 db    0
.eh_frame:00000000000068AF                 db    0
.eh_frame:00000000000068B0                 db  10h
.eh_frame:00000000000068B1                 db    0
.eh_frame:00000000000068B2                 db    0
.eh_frame:00000000000068B3                 db    0
.eh_frame:00000000000068B4                 db  84h
.eh_frame:00000000000068B5                 db  0Bh
.eh_frame:00000000000068B6                 db    0
.eh_frame:00000000000068B7                 db    0
.eh_frame:00000000000068B8                 db  18h
.eh_frame:00000000000068B9                 db 0E5h
.eh_frame:00000000000068BA                 db 0FFh
.eh_frame:00000000000068BB                 db 0FFh
.eh_frame:00000000000068BC                 db  0Eh
.eh_frame:00000000000068BD                 db    0
.eh_frame:00000000000068BE                 db    0
.eh_frame:00000000000068BF                 db    0
.eh_frame:00000000000068C0                 db    0
.eh_frame:00000000000068C1                 db    0
.eh_frame:00000000000068C2                 db    0
.eh_frame:00000000000068C3                 db    0
.eh_frame:00000000000068C4 __FRAME_END__   db    0
.eh_frame:00000000000068C5                 db    0
.eh_frame:00000000000068C6                 db    0
.eh_frame:00000000000068C7                 db    0
.eh_frame:00000000000068C7 _eh_frame       ends
.eh_frame:00000000000068C7
.init_array:0000000000206B70 ; ELF Initialization Function Table
.init_array:0000000000206B70 ; ===========================================================================
.init_array:0000000000206B70
.init_array:0000000000206B70 ; Segment type: Pure data
.init_array:0000000000206B70 ; Segment permissions: Read/Write
.init_array:0000000000206B70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B70                 assume cs:_init_array
.init_array:0000000000206B70                 ;org 206B70h
.init_array:0000000000206B70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B70
.fini_array:0000000000206B78 ; ELF Termination Function Table
.fini_array:0000000000206B78 ; ===========================================================================
.fini_array:0000000000206B78
.fini_array:0000000000206B78 ; Segment type: Pure data
.fini_array:0000000000206B78 ; Segment permissions: Read/Write
.fini_array:0000000000206B78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B78                 assume cs:_fini_array
.fini_array:0000000000206B78                 ;org 206B78h
.fini_array:0000000000206B78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B78
.data.rel.ro:0000000000206B80 ; ===========================================================================
.data.rel.ro:0000000000206B80
.data.rel.ro:0000000000206B80 ; Segment type: Pure data
.data.rel.ro:0000000000206B80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B80                 ;org 206B80h
.data.rel.ro:0000000000206B80 ; struct option longopts
.data.rel.ro:0000000000206B80 longopts        dq offset aHelp         ; name
.data.rel.ro:0000000000206B80                                         ; DATA XREF: main+58↑o
.data.rel.ro:0000000000206B80                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206B80                 dq 0                    ; flag
.data.rel.ro:0000000000206B80                 dd 0FFFFFF7Eh           ; val
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BA8                 db    0
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  7Dh ; }
.data.rel.ro:0000000000206BB9                 db 0FFh
.data.rel.ro:0000000000206BBA                 db 0FFh
.data.rel.ro:0000000000206BBB                 db 0FFh
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 db    0
.data.rel.ro:0000000000206BC1                 db    0
.data.rel.ro:0000000000206BC2                 db    0
.data.rel.ro:0000000000206BC3                 db    0
.data.rel.ro:0000000000206BC4                 db    0
.data.rel.ro:0000000000206BC5                 db    0
.data.rel.ro:0000000000206BC6                 db    0
.data.rel.ro:0000000000206BC7                 db    0
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db    0
.data.rel.ro:0000000000206BD9                 db    0
.data.rel.ro:0000000000206BDA                 db    0
.data.rel.ro:0000000000206BDB                 db    0
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 public quoting_style_args
.data.rel.ro:0000000000206BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C30                 db    0
.data.rel.ro:0000000000206C31                 db    0
.data.rel.ro:0000000000206C32                 db    0
.data.rel.ro:0000000000206C33                 db    0
.data.rel.ro:0000000000206C34                 db    0
.data.rel.ro:0000000000206C35                 db    0
.data.rel.ro:0000000000206C36                 db    0
.data.rel.ro:0000000000206C37                 db    0
.data.rel.ro:0000000000206C37 _data_rel_ro    ends
.data.rel.ro:0000000000206C37
LOAD:0000000000206C38 ; ELF Dynamic Information
LOAD:0000000000206C38 ; ===========================================================================
LOAD:0000000000206C38
LOAD:0000000000206C38 ; Segment type: Pure data
LOAD:0000000000206C38 ; Segment permissions: Read/Write
LOAD:0000000000206C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C38                 assume cs:LOAD
LOAD:0000000000206C38                 ;org 206C38h
LOAD:0000000000206C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C48                 Elf64_Dyn <0Ch, 1358h>  ; DT_INIT
LOAD:0000000000206C58                 Elf64_Dyn <0Dh, 4DE0h>  ; DT_FINI
LOAD:0000000000206C68                 Elf64_Dyn <19h, 206B70h> ; DT_INIT_ARRAY
LOAD:0000000000206C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206C88                 Elf64_Dyn <1Ah, 206B78h> ; DT_FINI_ARRAY
LOAD:0000000000206C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CB8                 Elf64_Dyn <5, 890h>     ; DT_STRTAB
LOAD:0000000000206CC8                 Elf64_Dyn <6, 2D8h>     ; DT_SYMTAB
LOAD:0000000000206CD8                 Elf64_Dyn <0Ah, 2CBh>   ; DT_STRSZ
LOAD:0000000000206CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D08                 Elf64_Dyn <3, 206E28h>  ; DT_PLTGOT
LOAD:0000000000206D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000206D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D38                 Elf64_Dyn <17h, 0ED8h>  ; DT_JMPREL
LOAD:0000000000206D48                 Elf64_Dyn <7, 0C38h>    ; DT_RELA
LOAD:0000000000206D58                 Elf64_Dyn <8, 2A0h>     ; DT_RELASZ
LOAD:0000000000206D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206D98                 Elf64_Dyn <6FFFFFFEh, 0BD8h> ; DT_VERNEED
LOAD:0000000000206DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DB8                 Elf64_Dyn <6FFFFFF0h, 0B5Ch> ; DT_VERSYM
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206DE8                 db    0
LOAD:0000000000206DE9                 db    0
LOAD:0000000000206DEA                 db    0
LOAD:0000000000206DEB                 db    0
LOAD:0000000000206DEC                 db    0
LOAD:0000000000206DED                 db    0
LOAD:0000000000206DEE                 db    0
LOAD:0000000000206DEF                 db    0
LOAD:0000000000206DF0                 db    0
LOAD:0000000000206DF1                 db    0
LOAD:0000000000206DF2                 db    0
LOAD:0000000000206DF3                 db    0
LOAD:0000000000206DF4                 db    0
LOAD:0000000000206DF5                 db    0
LOAD:0000000000206DF6                 db    0
LOAD:0000000000206DF7                 db    0
LOAD:0000000000206DF8                 db    0
LOAD:0000000000206DF9                 db    0
LOAD:0000000000206DFA                 db    0
LOAD:0000000000206DFB                 db    0
LOAD:0000000000206DFC                 db    0
LOAD:0000000000206DFD                 db    0
LOAD:0000000000206DFE                 db    0
LOAD:0000000000206DFF                 db    0
LOAD:0000000000206E00                 db    0
LOAD:0000000000206E01                 db    0
LOAD:0000000000206E02                 db    0
LOAD:0000000000206E03                 db    0
LOAD:0000000000206E04                 db    0
LOAD:0000000000206E05                 db    0
LOAD:0000000000206E06                 db    0
LOAD:0000000000206E07                 db    0
LOAD:0000000000206E08                 db    0
LOAD:0000000000206E09                 db    0
LOAD:0000000000206E0A                 db    0
LOAD:0000000000206E0B                 db    0
LOAD:0000000000206E0C                 db    0
LOAD:0000000000206E0D                 db    0
LOAD:0000000000206E0E                 db    0
LOAD:0000000000206E0F                 db    0
LOAD:0000000000206E10                 db    0
LOAD:0000000000206E11                 db    0
LOAD:0000000000206E12                 db    0
LOAD:0000000000206E13                 db    0
LOAD:0000000000206E14                 db    0
LOAD:0000000000206E15                 db    0
LOAD:0000000000206E16                 db    0
LOAD:0000000000206E17                 db    0
LOAD:0000000000206E18                 db    0
LOAD:0000000000206E19                 db    0
LOAD:0000000000206E1A                 db    0
LOAD:0000000000206E1B                 db    0
LOAD:0000000000206E1C                 db    0
LOAD:0000000000206E1D                 db    0
LOAD:0000000000206E1E                 db    0
LOAD:0000000000206E1F                 db    0
LOAD:0000000000206E20                 db    0
LOAD:0000000000206E21                 db    0
LOAD:0000000000206E22                 db    0
LOAD:0000000000206E23                 db    0
LOAD:0000000000206E24                 db    0
LOAD:0000000000206E25                 db    0
LOAD:0000000000206E26                 db    0
LOAD:0000000000206E27                 db    0
LOAD:0000000000206E27 LOAD            ends
LOAD:0000000000206E27
.got:0000000000206E28 ; ===========================================================================
.got:0000000000206E28
.got:0000000000206E28 ; Segment type: Pure data
.got:0000000000206E28 ; Segment permissions: Read/Write
.got:0000000000206E28 _got            segment qword public 'DATA' use64
.got:0000000000206E28                 assume cs:_got
.got:0000000000206E28                 ;org 206E28h
.got:0000000000206E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E30 qword_206E30    dq 0                    ; DATA XREF: sub_1370↑r
.got:0000000000206E38 qword_206E38    dq 0                    ; DATA XREF: sub_1370+6↑r
.got:0000000000206E40 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E48 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E50 __errno_location_ptr dq offset __errno_location
.got:0000000000206E50                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E58 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206E60 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206E68 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206E70 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206E78 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206E80 getpwuid_ptr    dq offset getpwuid      ; DATA XREF: _getpwuid↑r
.got:0000000000206E88 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206E88                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206E90 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206E98 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206E98                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EA0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EA8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EA8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EB0 getuid_ptr      dq offset getuid        ; DATA XREF: _getuid↑r
.got:0000000000206EB8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206EC0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206EC8 getgrgid_ptr    dq offset getgrgid      ; DATA XREF: _getgrgid↑r
.got:0000000000206ED0 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000206ED8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206EE0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206EE8 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206EF0 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206EF8 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206EF8                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F00 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F08 getpwnam_ptr    dq offset getpwnam      ; DATA XREF: _getpwnam↑r
.got:0000000000206F10 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F18 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F20 getgid_ptr      dq offset getgid        ; DATA XREF: _getgid↑r
.got:0000000000206F28 getgroups_ptr   dq offset getgroups     ; DATA XREF: _getgroups↑r
.got:0000000000206F30 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F38 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F40 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F48 getegid_ptr     dq offset getegid       ; DATA XREF: _getegid↑r
.got:0000000000206F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F70 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F78 getgrouplist_ptr dq offset getgrouplist ; DATA XREF: _getgrouplist↑r
.got:0000000000206F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FC8                                         ; DATA XREF: start+24↑r
.got:0000000000206FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE0 _got            ends
.got:0000000000206FE0
LOAD:0000000000206FE8 ; ===========================================================================
LOAD:0000000000206FE8
LOAD:0000000000206FE8 ; Segment type: Pure data
LOAD:0000000000206FE8 ; Segment permissions: Read/Write
LOAD:0000000000206FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FE8                 assume cs:LOAD
LOAD:0000000000206FE8                 ;org 206FE8h
LOAD:0000000000206FE8                 align 20h
LOAD:0000000000206FE8 LOAD            ends
LOAD:0000000000206FE8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+8F↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_2162↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_362D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000800↑o
.bss:0000000000207080                                         ; LOAD:0000000000000848↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; _IO_FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007E8↑o
.bss:0000000000207088                                         ; main+88↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000878↑o
.bss:0000000000207090                                         ; main:loc_1752↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000818↑o
.bss:0000000000207098                                         ; LOAD:0000000000000830↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070A0 ; FILE *stderr
.bss:00000000002070A0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000860↑o
.bss:00000000002070A0                                         ; usage+3D↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'stderr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070A8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070A9                 align 10h
.bss:00000000002070B0 buf_6964        db    ? ;               ; DATA XREF: print_group:loc_1E60↑o
.bss:00000000002070B1                 db    ? ;
.bss:00000000002070B2                 db    ? ;
.bss:00000000002070B3                 db    ? ;
.bss:00000000002070B4                 db    ? ;
.bss:00000000002070B5                 db    ? ;
.bss:00000000002070B6                 db    ? ;
.bss:00000000002070B7                 db    ? ;
.bss:00000000002070B8                 db    ? ;
.bss:00000000002070B9                 db    ? ;
.bss:00000000002070BA                 db    ? ;
.bss:00000000002070BB                 db    ? ;
.bss:00000000002070BC                 db    ? ;
.bss:00000000002070BD                 db    ? ;
.bss:00000000002070BE                 db    ? ;
.bss:00000000002070BF                 db    ? ;
.bss:00000000002070C0                 db    ? ;
.bss:00000000002070C1                 db    ? ;
.bss:00000000002070C2                 db    ? ;
.bss:00000000002070C3                 db    ? ;
.bss:00000000002070C4                 db    ? ;
.bss:00000000002070C5                 db    ? ;
.bss:00000000002070C6                 db    ? ;
.bss:00000000002070C7                 db    ? ;
.bss:00000000002070C8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070C8                                         ; close_stdout+1B↑r
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D0                                         ; close_stdout+56↑r
.bss:00000000002070D8                 public program_name
.bss:00000000002070D8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070D8                                         ; set_program_name:loc_224D↑w
.bss:00000000002070E0 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:00000000002070E0                                         ; quotearg_free+46↑o ...
.bss:00000000002070E1                 db    ? ;
.bss:00000000002070E2                 db    ? ;
.bss:00000000002070E3                 db    ? ;
.bss:00000000002070E4                 db    ? ;
.bss:00000000002070E5                 db    ? ;
.bss:00000000002070E6                 db    ? ;
.bss:00000000002070E7                 db    ? ;
.bss:00000000002070E8                 db    ? ;
.bss:00000000002070E9                 db    ? ;
.bss:00000000002070EA                 db    ? ;
.bss:00000000002070EB                 db    ? ;
.bss:00000000002070EC                 db    ? ;
.bss:00000000002070ED                 db    ? ;
.bss:00000000002070EE                 db    ? ;
.bss:00000000002070EF                 db    ? ;
.bss:00000000002070F0                 db    ? ;
.bss:00000000002070F1                 db    ? ;
.bss:00000000002070F2                 db    ? ;
.bss:00000000002070F3                 db    ? ;
.bss:00000000002070F4                 db    ? ;
.bss:00000000002070F5                 db    ? ;
.bss:00000000002070F6                 db    ? ;
.bss:00000000002070F7                 db    ? ;
.bss:00000000002070F8                 db    ? ;
.bss:00000000002070F9                 db    ? ;
.bss:00000000002070FA                 db    ? ;
.bss:00000000002070FB                 db    ? ;
.bss:00000000002070FC                 db    ? ;
.bss:00000000002070FD                 db    ? ;
.bss:00000000002070FE                 db    ? ;
.bss:00000000002070FF                 db    ? ;
.bss:0000000000207100                 db    ? ;
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:00000000002071E0                                         ; get_quoting_style↑o ...
.bss:00000000002071F0 xmmword_2071F0  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:00000000002071F0                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207200 xmmword_207200  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207200                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207210 qword_207210    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207210 _bss            ends
.bss:0000000000207210
.prgend:0000000000207218 ; ===========================================================================
.prgend:0000000000207218
.prgend:0000000000207218 ; Segment type: Zero-length
.prgend:0000000000207218 _prgend         segment byte public '' use64
.prgend:0000000000207218 _end            label byte
.prgend:0000000000207218 _prgend         ends
.prgend:0000000000207218
extern:0000000000207220 ; ===========================================================================
extern:0000000000207220
extern:0000000000207220 ; Segment type: Externs
extern:0000000000207220 ; extern
extern:0000000000207220 ; void free(void *ptr)
extern:0000000000207220                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207220                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207228 ; void __noreturn abort(void)
extern:0000000000207228                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207228                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207230 ; int *_errno_location(void)
extern:0000000000207230                 extrn __errno_location:near
extern:0000000000207230                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207230                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207238 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207238                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207238                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207240 ; void __noreturn exit(int status)
extern:0000000000207240                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207240                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207248 ; size_t _fpending(FILE *fp)
extern:0000000000207248                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207248                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207250 ; char *textdomain(const char *domainname)
extern:0000000000207250                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207250                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207258 ; int fclose(FILE *stream)
extern:0000000000207258                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207258                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207260 ; struct passwd *getpwuid(__uid_t uid)
extern:0000000000207260                 extrn getpwuid:near     ; CODE XREF: _getpwuid↑j
extern:0000000000207260                                         ; DATA XREF: .got:getpwuid_ptr↑o
extern:0000000000207268 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207268                 extrn bindtextdomain:near
extern:0000000000207268                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207268                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207270 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207270                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207270                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207278 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207278                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207278                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207278                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207280 ; size_t strlen(const char *s)
extern:0000000000207280                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207280                                         ; DATA XREF: .got:strlen_ptr↑o
extern:0000000000207288                 extrn __stack_chk_fail:near
extern:0000000000207288                                         ; CODE XREF: ___stack_chk_fail↑j
extern:0000000000207288                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:0000000000207290 ; __uid_t getuid(void)
extern:0000000000207290                 extrn getuid:near       ; CODE XREF: _getuid↑j
extern:0000000000207290                                         ; DATA XREF: .got:getuid_ptr↑o
extern:0000000000207298 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:0000000000207298                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:0000000000207298                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072A0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072A0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072A0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072A8 ; struct group *getgrgid(__gid_t gid)
extern:00000000002072A8                 extrn getgrgid:near     ; CODE XREF: _getgrgid↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getgrgid_ptr↑o
extern:00000000002072B0 ; int _overflow(_IO_FILE *, int)
extern:00000000002072B0                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002072B0                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002072B8 ; char *strrchr(const char *s, int c)
extern:00000000002072B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072C8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D0                 extrn __libc_start_main:near
extern:00000000002072D0                                         ; CODE XREF: start+24↑p
extern:00000000002072D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E0                 extrn fputs_unlocked:near
extern:00000000002072E0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072E8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072E8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072E8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F0 ; struct passwd *getpwnam(const char *name)
extern:00000000002072F0                 extrn getpwnam:near     ; CODE XREF: _getpwnam↑j
extern:00000000002072F0                                         ; DATA XREF: .got:getpwnam_ptr↑o
extern:00000000002072F8 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F8                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F8                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207300 ; int fileno(FILE *stream)
extern:0000000000207300                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207300                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207308 ; __gid_t getgid(void)
extern:0000000000207308                 extrn getgid:near       ; CODE XREF: _getgid↑j
extern:0000000000207308                                         ; DATA XREF: .got:getgid_ptr↑o
extern:0000000000207310 ; int getgroups(int size, __gid_t list[])
extern:0000000000207310                 extrn getgroups:near    ; CODE XREF: _getgroups↑j
extern:0000000000207310                                         ; DATA XREF: .got:getgroups_ptr↑o
extern:0000000000207318 ; void *malloc(size_t size)
extern:0000000000207318                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207318                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207320 ; int fflush(FILE *stream)
extern:0000000000207320                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207320                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207328 ; char *nl_langinfo(nl_item item)
extern:0000000000207328                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207328                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207330 ; __gid_t getegid(void)
extern:0000000000207330                 extrn getegid:near      ; CODE XREF: _getegid↑j
extern:0000000000207330                                         ; DATA XREF: .got:getegid_ptr↑o
extern:0000000000207338 ; int _freading(FILE *fp)
extern:0000000000207338                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207338                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207340 ; void *realloc(void *ptr, size_t size)
extern:0000000000207340                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207340                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207348 ; char *setlocale(int category, const char *locale)
extern:0000000000207348                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207348                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207350                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207350                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207358 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207358                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207358                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207360 ; int getgrouplist(const char *user, __gid_t group, __gid_t *groups, int *ngroups)
extern:0000000000207360                 extrn getgrouplist:near ; CODE XREF: _getgrouplist↑j
extern:0000000000207360                                         ; DATA XREF: .got:getgrouplist_ptr↑o
extern:0000000000207368 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207368                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207368                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207370 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207370                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207370                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207378 ; void __noreturn exit(int status)
extern:0000000000207378                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207378                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207380 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207380                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207380                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207388                 extrn __fprintf_chk:near
extern:0000000000207388                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207388                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207390 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207390                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207390                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207398 ; int iswprint(wint_t wc)
extern:0000000000207398                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207398                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002073A0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002073A0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002073A0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002073A0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002073A8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002073A8                 extrn __ctype_b_loc:near
extern:00000000002073A8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002073A8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073B0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073B0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073B8                 extrn __gmon_start__:near ; weak
extern:00000000002073B8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073B8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073C0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073C0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073C0
extern:00000000002073C0
extern:00000000002073C0                 end start
