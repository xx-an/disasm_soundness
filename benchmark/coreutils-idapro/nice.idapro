LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 6A086CF695EB4951B4B5C933B2078029A0C8D84D2B4F8DDBE49E5E2A27C0F2D0
LOAD:0000000000000000 ; Input MD5    : CFBEB6D33C87E72011DEE9FA6D14A2E8
LOAD:0000000000000000 ; Input CRC32  : 805BD5C3
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/nice
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'nice.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'xstrtol.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 25810h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6B88h                ; Size in file image
LOAD:00000000000000D8                 dq 6B88h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 7B70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 207B70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 510h                 ; Size in file image
LOAD:0000000000000110                 dq 6C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 7C58h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 207C58h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5E58h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5E58h                ; Physical address
LOAD:00000000000001B0                 dq 244h                 ; Size in file image
LOAD:00000000000001B8                 dq 244h                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 7B70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 207B70h              ; Physical address
LOAD:0000000000000220                 dq 490h                 ; Size in file image
LOAD:0000000000000228                 dq 490h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0A6h, 25h, 81h, 3, 25h, 0B4h, 8, 0EDh, 7Ch, 40h, 15h ; Desc
LOAD:0000000000000284                 db 3Ah, 0ABh, 43h, 89h, 3Bh, 0BEh, 7Fh, 52h, 92h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 33h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 33h, 34h, 39h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_868, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_868, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_868, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aGetpriority - offset byte_868, 12h, 0, 0, \ ; "getpriority"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncmp - offset byte_868, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aItmDeregistert - offset byte_868, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aExit - offset byte_868, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000388                            0>
LOAD:00000000000003A0                 Elf64_Sym <offset aFpending - offset byte_868, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_868, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFclose - offset byte_868, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain - offset byte_868, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aDcgettext - offset byte_868, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_868, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStrlen - offset byte_868, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aStackChkFail - offset byte_868, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aGetoptLong - offset byte_868, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aMbrtowc - offset byte_868, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStrchr - offset byte_868, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aStrrchr - offset byte_868, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLseek - offset byte_868, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:00000000000004C0                            0>
LOAD:00000000000004D8                 Elf64_Sym <offset aAssertFail - offset byte_868, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aSetpriority - offset byte_868, 12h, 0, 0, \ ; "setpriority"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aMemset - offset byte_868, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aLibcStartMain - offset byte_868, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcmp - offset byte_868, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFputsUnlocked - offset byte_868, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aCalloc - offset byte_868, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aGmonStart - offset byte_868, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStrtol - offset byte_868, 12h, 0, 0, \ ; "strtol"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aMemcpy - offset byte_868, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aFileno - offset byte_868, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMalloc - offset byte_868, 12h, 0, 0, \ ; "malloc"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aFflush - offset byte_868, 12h, 0, 0, \ ; "fflush"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aNlLanginfo - offset byte_868, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aFreading - offset byte_868, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aRealloc - offset byte_868, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aSetlocale - offset byte_868, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aPrintfChk - offset byte_868, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aError - offset byte_868, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000688                            0>
LOAD:00000000000006A0                 Elf64_Sym <offset aFseeko - offset byte_868, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aExecvp - offset byte_868, 12h, 0, 0, \ ; "execvp"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aCxaAtexit - offset byte_868, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aExit+1 - offset byte_868, 12h, 0, 0, \ ; "exit"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aFwrite - offset byte_868, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aFprintfChk - offset byte_868, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aItmRegistertmc - offset byte_868, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMbsinit - offset byte_868, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aIswprint - offset byte_868, 12h, 0, 0, \ ; "iswprint"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aCxaFinalize - offset byte_868, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aCtypeBLoc - offset byte_868, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aStdout - offset byte_868, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007A8                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:00000000000007C0                 Elf64_Sym <offset aProgname - offset byte_868, 11h, 0, 19h, \ ; "__progname"
LOAD:00000000000007C0                            offset __bss_start, 8>
LOAD:00000000000007D8                 Elf64_Sym <offset aProgramInvocat - offset byte_868, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:00000000000007D8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:00000000000007F0                 Elf64_Sym <offset aPrognameFull - offset byte_868, 11h, 0, 19h, \ ; "__progname_full"
LOAD:00000000000007F0                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_868, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aStderr - offset byte_868, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000820                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aOptind - offset byte_868, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000838                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000850                 Elf64_Sym <offset aOptarg - offset byte_868, 11h, 0, 19h, \ ; "optarg"
LOAD:0000000000000850                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:0000000000000868 ; ELF String Table
LOAD:0000000000000868 byte_868        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000868                                         ; LOAD:0000000000000310↑o ...
LOAD:0000000000000869 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000B98↓o
LOAD:0000000000000873 aFflush         db 'fflush',0           ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:000000000000087A aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000887 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000658↑o
LOAD:0000000000000891 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000899 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:00000000000008A1 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000838↑o
LOAD:00000000000008A8 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000008B0 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:00000000000008BA aError          db 'error',0            ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008C0 aGetpriority    db 'getpriority',0      ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000008CC aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000448↑o
LOAD:00000000000008DD aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000008E6 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000008EE aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:00000000000008F4 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000388↑o
LOAD:00000000000008F4                                         ; LOAD:00000000000006E8↑o
LOAD:00000000000008FA aProgramInvocat db 'program_invocation_name',0
LOAD:00000000000008FA                                         ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000912 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000920 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000920                                         ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000937 aStrtol         db 'strtol',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:000000000000093E aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000945 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000430↑o
LOAD:000000000000094C aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000953 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000964 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:000000000000096B aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000979 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000980 aLseek          db 'lseek',0            ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000986 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:000000000000098D aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000994 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:000000000000099B aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000748↑o
LOAD:00000000000009A3 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000610↑o
LOAD:00000000000009AF aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000009BD aOptarg         db 'optarg',0           ; DATA XREF: LOAD:0000000000000850↑o
LOAD:00000000000009C4 aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000009CF aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000820↑o
LOAD:00000000000009D6 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000460↑o
LOAD:00000000000009E2 aExecvp         db 'execvp',0           ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000009E9 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:00000000000009F0 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:00000000000009F7 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000A02 aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000A09 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A09                                         ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000A27 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000A36 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000A36                                         ; LOAD:00000000000003B8↑o
LOAD:0000000000000A45 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000A45                                         ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A57 aSetpriority    db 'setpriority',0      ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000A63 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000A6A aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000A79 aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A7E aProgname       db '__progname',0       ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A89 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000A99 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000AA6 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000BA8↓o
LOAD:0000000000000AB0 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000BB8↓o
LOAD:0000000000000ABC aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000BC8↓o
LOAD:0000000000000AC7 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000BD8↓o
LOAD:0000000000000AD1 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000BE8↓o
LOAD:0000000000000ADD aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000ADD                                         ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000AF9 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000B08 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B08                                         ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000B22 ; ELF GNU Symbol Version Table
LOAD:0000000000000B22                 dw 0
LOAD:0000000000000B24                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B26                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B28                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B2A                 dw 2                    ; getpriority@@GLIBC_2.2.5
LOAD:0000000000000B2C                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B2E                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B30                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B32                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B34                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B36                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B38                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B3A                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B3C                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B3E                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000B40                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000B42                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000B44                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000B46                 dw 2                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000B48                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000B4A                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000B4C                 dw 2                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000B4E                 dw 2                    ; setpriority@@GLIBC_2.2.5
LOAD:0000000000000B50                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000B52                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000B54                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000B56                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000B58                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000B5A                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000B5C                 dw 2                    ; strtol@@GLIBC_2.2.5
LOAD:0000000000000B5E                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000B60                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000B62                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000B64                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000B66                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000B68                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000B6A                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000B6C                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000B6E                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000B70                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000B72                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000B74                 dw 2                    ; execvp@@GLIBC_2.2.5
LOAD:0000000000000B76                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000B78                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000B7A                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000B7C                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000B7E                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000B80                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000B88                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000B8C                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000B98 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000B98                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_868, 10h, 0> ; "libc.so.6"
LOAD:0000000000000BA8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_868, \ ; "GLIBC_2.3"
LOAD:0000000000000BA8                                10h>
LOAD:0000000000000BB8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_868, \ ; "GLIBC_2.3.4"
LOAD:0000000000000BB8                                10h>
LOAD:0000000000000BC8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_868, \ ; "GLIBC_2.14"
LOAD:0000000000000BC8                                10h>
LOAD:0000000000000BD8                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_868, \ ; "GLIBC_2.4"
LOAD:0000000000000BD8                                10h>
LOAD:0000000000000BE8                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_868, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000BF8 ; ELF RELA Relocation Table
LOAD:0000000000000BF8                 Elf64_Rela <207B70h, 8, 1AD0h> ; R_X86_64_RELATIVE +1AD0h
LOAD:0000000000000C10                 Elf64_Rela <207B78h, 8, 1A90h> ; R_X86_64_RELATIVE +1A90h
LOAD:0000000000000C28                 Elf64_Rela <207B80h, 8, 509Ah> ; R_X86_64_RELATIVE +509Ah
LOAD:0000000000000C40                 Elf64_Rela <207BA0h, 8, 50A5h> ; R_X86_64_RELATIVE +50A5h
LOAD:0000000000000C58                 Elf64_Rela <207BC0h, 8, 50AAh> ; R_X86_64_RELATIVE +50AAh
LOAD:0000000000000C70                 Elf64_Rela <207C00h, 8, 54F1h> ; R_X86_64_RELATIVE +54F1h
LOAD:0000000000000C88                 Elf64_Rela <207C08h, 8, 54F9h> ; R_X86_64_RELATIVE +54F9h
LOAD:0000000000000CA0                 Elf64_Rela <207C10h, 8, 54FFh> ; R_X86_64_RELATIVE +54FFh
LOAD:0000000000000CB8                 Elf64_Rela <207C18h, 8, 550Ch> ; R_X86_64_RELATIVE +550Ch
LOAD:0000000000000CD0                 Elf64_Rela <207C20h, 8, 5519h> ; R_X86_64_RELATIVE +5519h
LOAD:0000000000000CE8                 Elf64_Rela <207C28h, 8, 552Dh> ; R_X86_64_RELATIVE +552Dh
LOAD:0000000000000D00                 Elf64_Rela <207C30h, 8, 552Fh> ; R_X86_64_RELATIVE +552Fh
LOAD:0000000000000D18                 Elf64_Rela <207C38h, 8, 5512h> ; R_X86_64_RELATIVE +5512h
LOAD:0000000000000D30                 Elf64_Rela <207C40h, 8, 503Dh> ; R_X86_64_RELATIVE +503Dh
LOAD:0000000000000D48                 Elf64_Rela <207C48h, 8, 5537h> ; R_X86_64_RELATIVE +5537h
LOAD:0000000000000D60                 Elf64_Rela <208008h, 8, 208008h> ; R_X86_64_RELATIVE +208008h
LOAD:0000000000000D78                 Elf64_Rela <208010h, 8, 547Bh> ; R_X86_64_RELATIVE +547Bh
LOAD:0000000000000D90                 Elf64_Rela <208060h, 8, 208070h> ; R_X86_64_RELATIVE +208070h
LOAD:0000000000000DA8                 Elf64_Rela <208078h, 8, 208100h> ; R_X86_64_RELATIVE +208100h
LOAD:0000000000000DC0                 Elf64_Rela <207FC8h, 600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000DD8                 Elf64_Rela <207FD0h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000DF0                 Elf64_Rela <207FD8h, 1C00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E08                 Elf64_Rela <207FE0h, 2E00000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E20                 Elf64_Rela <207FE8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E38                 Elf64_Rela <208080h, 3400000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E50                 Elf64_Rela <208088h, 3300000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000E68                 Elf64_Rela <208090h, 3900000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E80                 Elf64_Rela <208098h, 3A00000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000E98                 Elf64_Rela <2080A0h, 3600000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000EB0                 Elf64_Rela <2080C0h, 3800000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000EC8 ; ELF JMPREL Relocation Table
LOAD:0000000000000EC8                 Elf64_Rela <207E60h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000EE0                 Elf64_Rela <207E68h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000EF8                 Elf64_Rela <207E70h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F10                 Elf64_Rela <207E78h, 400000007h, 0> ; R_X86_64_JUMP_SLOT getpriority
LOAD:0000000000000F28                 Elf64_Rela <207E80h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000F40                 Elf64_Rela <207E88h, 700000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000F58                 Elf64_Rela <207E90h, 800000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000F70                 Elf64_Rela <207E98h, 900000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F88                 Elf64_Rela <207EA0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000FA0                 Elf64_Rela <207EA8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000FB8                 Elf64_Rela <207EB0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000FD0                 Elf64_Rela <207EB8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000FE8                 Elf64_Rela <207EC0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001000                 Elf64_Rela <207EC8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001018                 Elf64_Rela <207ED0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001030                 Elf64_Rela <207ED8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001048                 Elf64_Rela <207EE0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001060                 Elf64_Rela <207EE8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001078                 Elf64_Rela <207EF0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001090                 Elf64_Rela <207EF8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000010A8                 Elf64_Rela <207F00h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT setpriority
LOAD:00000000000010C0                 Elf64_Rela <207F08h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:00000000000010D8                 Elf64_Rela <207F10h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:00000000000010F0                 Elf64_Rela <207F18h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001108                 Elf64_Rela <207F20h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001120                 Elf64_Rela <207F28h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT strtol
LOAD:0000000000001138                 Elf64_Rela <207F30h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001150                 Elf64_Rela <207F38h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001168                 Elf64_Rela <207F40h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001180                 Elf64_Rela <207F48h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001198                 Elf64_Rela <207F50h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000011B0                 Elf64_Rela <207F58h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000011C8                 Elf64_Rela <207F60h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000011E0                 Elf64_Rela <207F68h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000011F8                 Elf64_Rela <207F70h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001210                 Elf64_Rela <207F78h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001228                 Elf64_Rela <207F80h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001240                 Elf64_Rela <207F88h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT execvp
LOAD:0000000000001258                 Elf64_Rela <207F90h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001270                 Elf64_Rela <207F98h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001288                 Elf64_Rela <207FA0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000012A0                 Elf64_Rela <207FA8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000012B8                 Elf64_Rela <207FB0h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000012D0                 Elf64_Rela <207FB8h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000012E8                 Elf64_Rela <207FC0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000012E8 LOAD            ends
LOAD:00000000000012E8
.init:0000000000001300 ; ===========================================================================
.init:0000000000001300
.init:0000000000001300 ; Segment type: Pure code
.init:0000000000001300 ; Segment permissions: Read/Execute
.init:0000000000001300 _init           segment dword public 'CODE' use64
.init:0000000000001300                 assume cs:_init
.init:0000000000001300                 ;org 1300h
.init:0000000000001300                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001300
.init:0000000000001300 ; =============== S U B R O U T I N E =======================================
.init:0000000000001300
.init:0000000000001300
.init:0000000000001300                 public _init_proc
.init:0000000000001300 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001300                 sub     rsp, 8          ; _init
.init:0000000000001304                 mov     rax, cs:__gmon_start___ptr
.init:000000000000130B                 test    rax, rax
.init:000000000000130E                 jz      short loc_1312
.init:0000000000001310                 call    rax ; __gmon_start__
.init:0000000000001312
.init:0000000000001312 loc_1312:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001312                 add     rsp, 8
.init:0000000000001316                 retn
.init:0000000000001316 _init_proc      endp
.init:0000000000001316
.init:0000000000001316 _init           ends
.init:0000000000001316
LOAD:0000000000001317 ; ===========================================================================
LOAD:0000000000001317
LOAD:0000000000001317 ; Segment type: Pure code
LOAD:0000000000001317 ; Segment permissions: Read/Execute
LOAD:0000000000001317 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001317                 assume cs:LOAD
LOAD:0000000000001317                 ;org 1317h
LOAD:0000000000001317                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001317                 align 20h
LOAD:0000000000001317 LOAD            ends
LOAD:0000000000001317
.plt:0000000000001320 ; ===========================================================================
.plt:0000000000001320
.plt:0000000000001320 ; Segment type: Pure code
.plt:0000000000001320 ; Segment permissions: Read/Execute
.plt:0000000000001320 _plt            segment para public 'CODE' use64
.plt:0000000000001320                 assume cs:_plt
.plt:0000000000001320                 ;org 1320h
.plt:0000000000001320                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320
.plt:0000000000001320 sub_1320        proc near               ; CODE XREF: .plt:000000000000133B↓j
.plt:0000000000001320                                         ; .plt:000000000000134B↓j ...
.plt:0000000000001320 ; __unwind {
.plt:0000000000001320                 push    cs:qword_207E50
.plt:0000000000001326                 jmp     cs:qword_207E58
.plt:0000000000001326 sub_1320        endp
.plt:0000000000001326
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:000000000000132C                 align 10h
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; void free(void *ptr)
.plt:0000000000001330 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001330                                         ; quotearg_free+37↓p ...
.plt:0000000000001330                 jmp     cs:free_ptr
.plt:0000000000001330 _free           endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    0
.plt:000000000000133B                 jmp     sub_1320
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: noreturn thunk
.plt:0000000000001340
.plt:0000000000001340 ; void __noreturn abort(void)
.plt:0000000000001340 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001340                                         ; quotearg_buffer_restyled:def_2191↓p ...
.plt:0000000000001340                 jmp     cs:abort_ptr
.plt:0000000000001340 _abort          endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    1
.plt:000000000000134B                 jmp     sub_1320
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int *__errno_location(void)
.plt:0000000000001350 ___errno_location proc near             ; CODE XREF: main:loc_1811↓p
.plt:0000000000001350                                         ; main:loc_1828↓p ...
.plt:0000000000001350                 jmp     cs:__errno_location_ptr
.plt:0000000000001350 ___errno_location endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    2
.plt:000000000000135B                 jmp     sub_1320
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int getpriority(__priority_which_t which, id_t who)
.plt:0000000000001360 _getpriority    proc near               ; CODE XREF: main+22A↓p
.plt:0000000000001360                                         ; main+329↓p
.plt:0000000000001360                 jmp     cs:getpriority_ptr
.plt:0000000000001360 _getpriority    endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    3
.plt:000000000000136B                 jmp     sub_1320
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001370 _strncmp        proc near               ; CODE XREF: usage+27C↓p
.plt:0000000000001370                                         ; usage+33D↓p
.plt:0000000000001370                 jmp     cs:strncmp_ptr
.plt:0000000000001370 _strncmp        endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    4
.plt:000000000000137B                 jmp     sub_1320
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: noreturn thunk
.plt:0000000000001380
.plt:0000000000001380 ; void __noreturn _exit(int status)
.plt:0000000000001380 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001380                 jmp     cs:_exit_ptr
.plt:0000000000001380 __exit          endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    5
.plt:000000000000138B                 jmp     sub_1320
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; size_t __fpending(FILE *fp)
.plt:0000000000001390 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001390                 jmp     cs:__fpending_ptr
.plt:0000000000001390 ___fpending     endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    6
.plt:000000000000139B                 jmp     sub_1320
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; char *textdomain(const char *domainname)
.plt:00000000000013A0 _textdomain     proc near               ; CODE XREF: main+5A↓p
.plt:00000000000013A0                 jmp     cs:textdomain_ptr
.plt:00000000000013A0 _textdomain     endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    7
.plt:00000000000013AB                 jmp     sub_1320
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int fclose(FILE *stream)
.plt:00000000000013B0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000013B0                                         ; rpl_fclose+6B↓j
.plt:00000000000013B0                 jmp     cs:fclose_ptr
.plt:00000000000013B0 _fclose         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    8
.plt:00000000000013BB                 jmp     sub_1320
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000013C0 _bindtextdomain proc near               ; CODE XREF: main+4E↓p
.plt:00000000000013C0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000013C0 _bindtextdomain endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    9
.plt:00000000000013CB                 jmp     sub_1320
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000013D0 _dcgettext      proc near               ; CODE XREF: main+18E↓p
.plt:00000000000013D0                                         ; main+249↓p ...
.plt:00000000000013D0                 jmp     cs:dcgettext_ptr
.plt:00000000000013D0 _dcgettext      endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    0Ah
.plt:00000000000013DB                 jmp     sub_1320
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000013E0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000013E0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000013E0 ___ctype_get_mb_cur_max endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    0Bh
.plt:00000000000013EB                 jmp     sub_1320
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; size_t strlen(const char *s)
.plt:00000000000013F0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000013F0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000013F0                 jmp     cs:strlen_ptr
.plt:00000000000013F0 _strlen         endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    0Ch
.plt:00000000000013FB                 jmp     sub_1320
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: noreturn thunk
.plt:0000000000001400
.plt:0000000000001400 ___stack_chk_fail proc near             ; CODE XREF: main:loc_1997↓p
.plt:0000000000001400                                         ; quotearg_buffer_restyled:loc_32F3↓p ...
.plt:0000000000001400                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001400 ___stack_chk_fail endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    0Dh
.plt:000000000000140B                 jmp     sub_1320
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001410 _getopt_long    proc near               ; CODE XREF: main+103↓p
.plt:0000000000001410                 jmp     cs:getopt_long_ptr
.plt:0000000000001410 _getopt_long    endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    0Eh
.plt:000000000000141B                 jmp     sub_1320
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001420 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001420                 jmp     cs:mbrtowc_ptr
.plt:0000000000001420 _mbrtowc        endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    0Fh
.plt:000000000000142B                 jmp     sub_1320
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; char *strchr(const char *s, int c)
.plt:0000000000001430 _strchr         proc near               ; CODE XREF: xstrtol+EC↓p
.plt:0000000000001430                                         ; xstrtol+10F↓p ...
.plt:0000000000001430                 jmp     cs:strchr_ptr
.plt:0000000000001430 _strchr         endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    10h
.plt:000000000000143B                 jmp     sub_1320
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; char *strrchr(const char *s, int c)
.plt:0000000000001440 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001440                 jmp     cs:strrchr_ptr
.plt:0000000000001440 _strrchr        endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    11h
.plt:000000000000144B                 jmp     sub_1320
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001450 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001450                                         ; rpl_fseeko+3B↓p
.plt:0000000000001450                 jmp     cs:lseek_ptr
.plt:0000000000001450 _lseek          endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    12h
.plt:000000000000145B                 jmp     sub_1320
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: noreturn thunk
.plt:0000000000001460
.plt:0000000000001460 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001460 ___assert_fail  proc near               ; CODE XREF: xstrtol+6A9↓p
.plt:0000000000001460                 jmp     cs:__assert_fail_ptr
.plt:0000000000001460 ___assert_fail  endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    13h
.plt:000000000000146B                 jmp     sub_1320
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int setpriority(__priority_which_t which, id_t who, int prio)
.plt:0000000000001470 _setpriority    proc near               ; CODE XREF: main+269↓p
.plt:0000000000001470                 jmp     cs:setpriority_ptr
.plt:0000000000001470 _setpriority    endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    14h
.plt:000000000000147B                 jmp     sub_1320
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001480 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001480                                         ; xzalloc+12↓j
.plt:0000000000001480                 jmp     cs:memset_ptr
.plt:0000000000001480 _memset         endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    15h
.plt:000000000000148B                 jmp     sub_1320
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001490 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001490                 jmp     cs:memcmp_ptr
.plt:0000000000001490 _memcmp         endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    16h
.plt:000000000000149B                 jmp     sub_1320
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:00000000000014A0 _fputs_unlocked proc near               ; CODE XREF: usage+C9↓p
.plt:00000000000014A0                                         ; usage+EE↓p ...
.plt:00000000000014A0                 jmp     cs:fputs_unlocked_ptr
.plt:00000000000014A0 _fputs_unlocked endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    17h
.plt:00000000000014AB                 jmp     sub_1320
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; void *calloc(size_t nmemb, size_t size)
.plt:00000000000014B0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:00000000000014B0                 jmp     cs:calloc_ptr
.plt:00000000000014B0 _calloc         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    18h
.plt:00000000000014BB                 jmp     sub_1320
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: thunk
.plt:00000000000014C0
.plt:00000000000014C0 ; __int64 strtol(const char *nptr, char **endptr, int base)
.plt:00000000000014C0 _strtol         proc near               ; CODE XREF: xstrtol+57↓p
.plt:00000000000014C0                 jmp     cs:strtol_ptr
.plt:00000000000014C0 _strtol         endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    19h
.plt:00000000000014CB                 jmp     sub_1320
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:00000000000014D0 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:00000000000014D0                 jmp     cs:memcpy_ptr
.plt:00000000000014D0 _memcpy         endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    1Ah
.plt:00000000000014DB                 jmp     sub_1320
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; int fileno(FILE *stream)
.plt:00000000000014E0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000014E0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000014E0                 jmp     cs:fileno_ptr
.plt:00000000000014E0 _fileno         endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    1Bh
.plt:00000000000014EB                 jmp     sub_1320
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; void *malloc(size_t size)
.plt:00000000000014F0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000014F0                 jmp     cs:malloc_ptr
.plt:00000000000014F0 _malloc         endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    1Ch
.plt:00000000000014FB                 jmp     sub_1320
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; int fflush(FILE *stream)
.plt:0000000000001500 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001500                                         ; rpl_fflush+3B↓j
.plt:0000000000001500                 jmp     cs:fflush_ptr
.plt:0000000000001500 _fflush         endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    1Dh
.plt:000000000000150B                 jmp     sub_1320
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; char *nl_langinfo(nl_item item)
.plt:0000000000001510 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:0000000000001510                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001510 _nl_langinfo    endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    1Eh
.plt:000000000000151B                 jmp     sub_1320
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; int __freading(FILE *fp)
.plt:0000000000001520 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001520                                         ; rpl_fflush+9↓p
.plt:0000000000001520                 jmp     cs:__freading_ptr
.plt:0000000000001520 ___freading     endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    1Fh
.plt:000000000000152B                 jmp     sub_1320
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001530 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001530                 jmp     cs:realloc_ptr
.plt:0000000000001530 _realloc        endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    20h ; ' '
.plt:000000000000153B                 jmp     sub_1320
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; char *setlocale(int category, const char *locale)
.plt:0000000000001540 _setlocale      proc near               ; CODE XREF: main+3B↓p
.plt:0000000000001540                                         ; usage+263↓p ...
.plt:0000000000001540                 jmp     cs:setlocale_ptr
.plt:0000000000001540 _setlocale      endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    21h ; '!'
.plt:000000000000154B                 jmp     sub_1320
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ___printf_chk   proc near               ; CODE XREF: main+372↓p
.plt:0000000000001550                                         ; usage+78↓p ...
.plt:0000000000001550                 jmp     cs:__printf_chk_ptr
.plt:0000000000001550 ___printf_chk   endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    22h ; '"'
.plt:000000000000155B                 jmp     sub_1320
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001560 _error          proc near               ; CODE XREF: main+19C↓p
.plt:0000000000001560                                         ; main+25C↓p ...
.plt:0000000000001560                 jmp     cs:error_ptr
.plt:0000000000001560 _error          endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    23h ; '#'
.plt:000000000000156B                 jmp     sub_1320
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001570 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4E8A↓j
.plt:0000000000001570                 jmp     cs:fseeko_ptr
.plt:0000000000001570 _fseeko         endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    24h ; '$'
.plt:000000000000157B                 jmp     sub_1320
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; int execvp(const char *file, char *const argv[])
.plt:0000000000001580 _execvp         proc near               ; CODE XREF: main+2CE↓p
.plt:0000000000001580                 jmp     cs:execvp_ptr
.plt:0000000000001580 _execvp         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    25h ; '%'
.plt:000000000000158B                 jmp     sub_1320
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001590 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001590                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001590 ___cxa_atexit   endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    26h ; '&'
.plt:000000000000159B                 jmp     sub_1320
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: noreturn thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; void __noreturn exit(int status)
.plt:00000000000015A0 _exit           proc near               ; CODE XREF: main+1E6↓p
.plt:00000000000015A0                                         ; usage+58↓p
.plt:00000000000015A0                 jmp     cs:exit_ptr
.plt:00000000000015A0 _exit           endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    27h ; '''
.plt:00000000000015AB                 jmp     sub_1320
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:00000000000015B0 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:00000000000015B0                 jmp     cs:fwrite_ptr
.plt:00000000000015B0 _fwrite         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    28h ; '('
.plt:00000000000015BB                 jmp     sub_1320
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:00000000000015C0                                         ; version_etc_arn+37↓p ...
.plt:00000000000015C0                 jmp     cs:__fprintf_chk_ptr
.plt:00000000000015C0 ___fprintf_chk  endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    29h ; ')'
.plt:00000000000015CB                 jmp     sub_1320
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; int mbsinit(const mbstate_t *ps)
.plt:00000000000015D0 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:00000000000015D0                 jmp     cs:mbsinit_ptr
.plt:00000000000015D0 _mbsinit        endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    2Ah ; '*'
.plt:00000000000015DB                 jmp     sub_1320
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int iswprint(wint_t wc)
.plt:00000000000015E0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000015E0                 jmp     cs:iswprint_ptr
.plt:00000000000015E0 _iswprint       endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    2Bh ; '+'
.plt:00000000000015EB                 jmp     sub_1320
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000015F0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000015F0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000015F0 ___ctype_b_loc  endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    2Ch ; ','
.plt:00000000000015FB                 jmp     sub_1320
.plt:00000000000015FB ; } // starts at 1320
.plt:00000000000015FB _plt            ends
.plt:00000000000015FB
.plt.got:0000000000001600 ; ===========================================================================
.plt.got:0000000000001600
.plt.got:0000000000001600 ; Segment type: Pure code
.plt.got:0000000000001600 ; Segment permissions: Read/Execute
.plt.got:0000000000001600 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001600                 assume cs:_plt_got
.plt.got:0000000000001600                 ;org 1600h
.plt.got:0000000000001600                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001600
.plt.got:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001600
.plt.got:0000000000001600 ; Attributes: thunk
.plt.got:0000000000001600
.plt.got:0000000000001600 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001600 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001600 ; __unwind {
.plt.got:0000000000001600                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001600 __cxa_finalize  endp
.plt.got:0000000000001600
.plt.got:0000000000001600 ; ---------------------------------------------------------------------------
.plt.got:0000000000001606                 align 8
.plt.got:0000000000001606 ; } // starts at 1600
.plt.got:0000000000001606 _plt_got        ends
.plt.got:0000000000001606
LOAD:0000000000001608 ; ===========================================================================
LOAD:0000000000001608
LOAD:0000000000001608 ; Segment type: Pure code
LOAD:0000000000001608 ; Segment permissions: Read/Execute
LOAD:0000000000001608 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001608                 assume cs:LOAD
LOAD:0000000000001608                 ;org 1608h
LOAD:0000000000001608                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001608                 align 10h
LOAD:0000000000001608 LOAD            ends
LOAD:0000000000001608
.text:0000000000001610 ; ===========================================================================
.text:0000000000001610
.text:0000000000001610 ; Segment type: Pure code
.text:0000000000001610 ; Segment permissions: Read/Execute
.text:0000000000001610 _text           segment para public 'CODE' use64
.text:0000000000001610                 assume cs:_text
.text:0000000000001610                 ;org 1610h
.text:0000000000001610                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001610
.text:0000000000001610 ; =============== S U B R O U T I N E =======================================
.text:0000000000001610
.text:0000000000001610
.text:0000000000001610 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001610                 public main
.text:0000000000001610 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001610
.text:0000000000001610 var_38          = qword ptr -38h
.text:0000000000001610 var_30          = qword ptr -30h
.text:0000000000001610
.text:0000000000001610 ; __unwind {
.text:0000000000001610                 push    r14
.text:0000000000001612                 push    r13
.text:0000000000001614                 push    r12
.text:0000000000001616                 push    rbp
.text:0000000000001617                 mov     r12d, edi
.text:000000000000161A                 push    rbx
.text:000000000000161B                 mov     rbp, rsi
.text:000000000000161E                 mov     ebx, 1
.text:0000000000001623                 sub     rsp, 10h
.text:0000000000001627                 mov     rdi, [rsi]
.text:000000000000162A                 mov     rax, fs:28h
.text:0000000000001633                 mov     [rsp+38h+var_30], rax
.text:0000000000001638                 xor     eax, eax
.text:000000000000163A                 call    set_program_name
.text:000000000000163F                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001646                 mov     edi, 6          ; category
.text:000000000000164B                 call    _setlocale
.text:0000000000001650                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001657                 lea     rdi, domainname ; "coreutils"
.text:000000000000165E                 call    _bindtextdomain
.text:0000000000001663                 lea     rdi, domainname ; "coreutils"
.text:000000000000166A                 call    _textdomain
.text:000000000000166F                 lea     rdi, close_stdout
.text:0000000000001676                 mov     cs:exit_failure, 7Dh ; '}'
.text:0000000000001680                 call    atexit
.text:0000000000001685                 cmp     r12d, 1
.text:0000000000001689                 jle     loc_1811
.text:000000000000168F                 lea     r13, longopts
.text:0000000000001696                 xor     r14d, r14d
.text:0000000000001699
.text:0000000000001699 loc_1699:                               ; CODE XREF: main+CD↓j
.text:0000000000001699                 movsxd  rax, ebx
.text:000000000000169C                 lea     rcx, ds:0[rax*8]
.text:00000000000016A4                 mov     rax, [rbp+rax*8+0]
.text:00000000000016A9                 cmp     byte ptr [rax], 2Dh ; '-'
.text:00000000000016AC                 jnz     short loc_16E8
.text:00000000000016AE                 movzx   esi, byte ptr [rax+1]
.text:00000000000016B2                 lea     edx, [rsi-2Bh]
.text:00000000000016B5                 and     edx, 0FDh
.text:00000000000016BB                 setz    dl
.text:00000000000016BE                 movzx   edx, dl
.text:00000000000016C1                 add     edx, 1
.text:00000000000016C4                 movsxd  rdx, edx
.text:00000000000016C7                 movsx   edx, byte ptr [rax+rdx]
.text:00000000000016CB                 sub     edx, 30h ; '0'
.text:00000000000016CE                 cmp     edx, 9
.text:00000000000016D1                 ja      short loc_16E8
.text:00000000000016D3                 lea     r14, [rax+1]
.text:00000000000016D7                 add     ebx, 1
.text:00000000000016DA
.text:00000000000016DA loc_16DA:                               ; CODE XREF: main+1FC↓j
.text:00000000000016DA                 cmp     ebx, r12d
.text:00000000000016DD                 jl      short loc_1699
.text:00000000000016DF                 jmp     short loc_173C
.text:00000000000016DF ; ---------------------------------------------------------------------------
.text:00000000000016E1                 align 8
.text:00000000000016E8
.text:00000000000016E8 loc_16E8:                               ; CODE XREF: main+9C↑j
.text:00000000000016E8                                         ; main+C1↑j
.text:00000000000016E8                 mov     rax, [rbp+0]
.text:00000000000016EC                 lea     rsi, [rbp+rcx-8] ; argv
.text:00000000000016F1                 lea     rdx, shortopts  ; "+n:"
.text:00000000000016F8                 mov     edi, r12d
.text:00000000000016FB                 xor     r8d, r8d        ; longind
.text:00000000000016FE                 mov     rcx, r13        ; longopts
.text:0000000000001701                 mov     [rsi], rax
.text:0000000000001704                 lea     eax, [rbx-1]
.text:0000000000001707                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001711                 sub     edi, eax        ; argc
.text:0000000000001713                 call    _getopt_long
.text:0000000000001718                 mov     edx, cs:optind@@GLIBC_2_2_5
.text:000000000000171E                 cmp     eax, 0FFFFFF7Eh
.text:0000000000001723                 lea     ebx, [rbx+rdx-1]
.text:0000000000001727                 jz      loc_1990
.text:000000000000172D                 jle     loc_17C0
.text:0000000000001733                 cmp     eax, 0FFFFFFFFh
.text:0000000000001736                 jnz     loc_1800
.text:000000000000173C
.text:000000000000173C loc_173C:                               ; CODE XREF: main+CF↑j
.text:000000000000173C                 test    r14, r14
.text:000000000000173F                 jz      loc_1811
.text:0000000000001745                 lea     r8, aWrittenBySSAnd+1Bh ; ""
.text:000000000000174C                 xor     esi, esi
.text:000000000000174E                 mov     rcx, rsp
.text:0000000000001751                 mov     edx, 0Ah
.text:0000000000001756                 mov     rdi, r14        ; nptr
.text:0000000000001759                 call    xstrtol
.text:000000000000175E                 cmp     eax, 1
.text:0000000000001761                 ja      loc_199C
.text:0000000000001767                 mov     rax, [rsp+38h+var_38]
.text:000000000000176B                 mov     r13d, 0FFFFFFD9h
.text:0000000000001771                 cmp     rax, 0FFFFFFFFFFFFFFD9h
.text:0000000000001775                 jl      short loc_1787
.text:0000000000001777                 cmp     rax, 27h ; '''
.text:000000000000177B                 mov     edx, 27h ; '''
.text:0000000000001780                 cmovle  rdx, rax
.text:0000000000001784                 mov     r13, rdx
.text:0000000000001787
.text:0000000000001787 loc_1787:                               ; CODE XREF: main+165↑j
.text:0000000000001787                 cmp     ebx, r12d
.text:000000000000178A                 jnz     loc_1828
.text:0000000000001790                 lea     rsi, msgid      ; "a command must be given with an adjustm"...
.text:0000000000001797                 mov     edx, 5          ; category
.text:000000000000179C                 xor     edi, edi        ; domainname
.text:000000000000179E                 call    _dcgettext
.text:00000000000017A3                 xor     esi, esi        ; errnum
.text:00000000000017A5                 mov     rdx, rax        ; format
.text:00000000000017A8                 xor     edi, edi        ; status
.text:00000000000017AA                 xor     eax, eax
.text:00000000000017AC                 call    _error
.text:00000000000017B1
.text:00000000000017B1 loc_17B1:                               ; CODE XREF: main+1B5↓j
.text:00000000000017B1                                         ; main+1F3↓j
.text:00000000000017B1                 mov     edi, 7Dh ; '}'  ; status
.text:00000000000017B6                 call    usage
.text:00000000000017B6 ; ---------------------------------------------------------------------------
.text:00000000000017BB                 align 20h
.text:00000000000017C0
.text:00000000000017C0 loc_17C0:                               ; CODE XREF: main+11D↑j
.text:00000000000017C0                 cmp     eax, 0FFFFFF7Dh
.text:00000000000017C5                 jnz     short loc_17B1
.text:00000000000017C7                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:00000000000017CE                 mov     rcx, cs:Version
.text:00000000000017D5                 lea     r8, aDavidMackenzie ; "David MacKenzie"
.text:00000000000017DC                 lea     rdx, unk_4FFF
.text:00000000000017E3                 lea     rsi, aNice      ; "nice"
.text:00000000000017EA                 xor     r9d, r9d
.text:00000000000017ED                 xor     eax, eax
.text:00000000000017EF                 call    version_etc
.text:00000000000017F4                 xor     edi, edi        ; status
.text:00000000000017F6                 call    _exit
.text:00000000000017F6 ; ---------------------------------------------------------------------------
.text:00000000000017FB                 align 20h
.text:0000000000001800
.text:0000000000001800 loc_1800:                               ; CODE XREF: main+126↑j
.text:0000000000001800                 cmp     eax, 6Eh ; 'n'
.text:0000000000001803                 jnz     short loc_17B1
.text:0000000000001805                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:000000000000180C                 jmp     loc_16DA
.text:0000000000001811 ; ---------------------------------------------------------------------------
.text:0000000000001811
.text:0000000000001811 loc_1811:                               ; CODE XREF: main+79↑j
.text:0000000000001811                                         ; main+12F↑j
.text:0000000000001811                 call    ___errno_location
.text:0000000000001816                 cmp     ebx, r12d
.text:0000000000001819                 mov     r13, rax
.text:000000000000181C                 jz      loc_192D
.text:0000000000001822                 mov     r13d, 0Ah
.text:0000000000001828
.text:0000000000001828 loc_1828:                               ; CODE XREF: main+17A↑j
.text:0000000000001828                 call    ___errno_location
.text:000000000000182D                 xor     esi, esi        ; who
.text:000000000000182F                 xor     edi, edi        ; which
.text:0000000000001831                 mov     dword ptr [rax], 0
.text:0000000000001837                 mov     r12, rax
.text:000000000000183A                 call    _getpriority
.text:000000000000183F                 cmp     eax, 0FFFFFFFFh
.text:0000000000001842                 jnz     short loc_1871
.text:0000000000001844                 cmp     dword ptr [r12], 0
.text:0000000000001849                 jz      short loc_1871
.text:000000000000184B                 lea     rsi, aCannotGetNicen ; "cannot get niceness"
.text:0000000000001852                 mov     edx, 5          ; category
.text:0000000000001857                 xor     edi, edi        ; domainname
.text:0000000000001859                 call    _dcgettext
.text:000000000000185E                 mov     esi, [r12]      ; errnum
.text:0000000000001862                 mov     rdx, rax        ; format
.text:0000000000001865                 mov     edi, 7Dh ; '}'  ; status
.text:000000000000186A                 xor     eax, eax
.text:000000000000186C                 call    _error
.text:0000000000001871
.text:0000000000001871 loc_1871:                               ; CODE XREF: main+232↑j
.text:0000000000001871                                         ; main+239↑j
.text:0000000000001871                 lea     edx, [rax+r13]  ; prio
.text:0000000000001875                 xor     esi, esi        ; who
.text:0000000000001877                 xor     edi, edi        ; which
.text:0000000000001879                 call    _setpriority
.text:000000000000187E                 test    eax, eax
.text:0000000000001880                 jz      short loc_18CD
.text:0000000000001882                 lea     rsi, aCannotSetNicen ; "cannot set niceness"
.text:0000000000001889                 xor     edi, edi        ; domainname
.text:000000000000188B                 mov     edx, 5          ; category
.text:0000000000001890                 call    _dcgettext
.text:0000000000001895                 mov     esi, [r12]      ; errnum
.text:0000000000001899                 cmp     esi, 0Dh
.text:000000000000189C                 jz      loc_1989
.text:00000000000018A2                 cmp     esi, 1
.text:00000000000018A5                 mov     edi, 7Dh ; '}'  ; status
.text:00000000000018AA                 jz      loc_1989
.text:00000000000018B0
.text:00000000000018B0 loc_18B0:                               ; CODE XREF: main+37B↓j
.text:00000000000018B0                 mov     rdx, rax        ; format
.text:00000000000018B3                 xor     eax, eax
.text:00000000000018B5                 call    _error
.text:00000000000018BA                 mov     rax, cs:stderr@@GLIBC_2_2_5
.text:00000000000018C1                 test    byte ptr [rax], 20h
.text:00000000000018C4                 jz      short loc_18CD
.text:00000000000018C6                 mov     ebx, 7Dh ; '}'
.text:00000000000018CB                 jmp     short loc_190E
.text:00000000000018CD ; ---------------------------------------------------------------------------
.text:00000000000018CD
.text:00000000000018CD loc_18CD:                               ; CODE XREF: main+270↑j
.text:00000000000018CD                                         ; main+2B4↑j
.text:00000000000018CD                 movsxd  rbx, ebx
.text:00000000000018D0                 lea     rbp, [rbp+rbx*8+0]
.text:00000000000018D5                 xor     ebx, ebx
.text:00000000000018D7                 mov     rdi, [rbp+0]    ; file
.text:00000000000018DB                 mov     rsi, rbp        ; argv
.text:00000000000018DE                 call    _execvp
.text:00000000000018E3                 cmp     dword ptr [r12], 2
.text:00000000000018E8                 mov     rdi, [rbp+0]
.text:00000000000018EC                 setz    bl
.text:00000000000018EF                 call    quote
.text:00000000000018F4                 mov     esi, [r12]      ; errnum
.text:00000000000018F8                 lea     rdx, format+4   ; format
.text:00000000000018FF                 mov     rcx, rax
.text:0000000000001902                 xor     edi, edi        ; status
.text:0000000000001904                 xor     eax, eax
.text:0000000000001906                 add     ebx, 7Eh ; '~'
.text:0000000000001909                 call    _error
.text:000000000000190E
.text:000000000000190E loc_190E:                               ; CODE XREF: main+2BB↑j
.text:000000000000190E                                         ; main+377↓j
.text:000000000000190E                 mov     rcx, [rsp+38h+var_30]
.text:0000000000001913                 xor     rcx, fs:28h
.text:000000000000191C                 mov     eax, ebx
.text:000000000000191E                 jnz     short loc_1997
.text:0000000000001920                 add     rsp, 10h
.text:0000000000001924                 pop     rbx
.text:0000000000001925                 pop     rbp
.text:0000000000001926                 pop     r12
.text:0000000000001928                 pop     r13
.text:000000000000192A                 pop     r14
.text:000000000000192C                 retn
.text:000000000000192D ; ---------------------------------------------------------------------------
.text:000000000000192D
.text:000000000000192D loc_192D:                               ; CODE XREF: main+20C↑j
.text:000000000000192D                 xor     esi, esi        ; who
.text:000000000000192F                 xor     edi, edi        ; which
.text:0000000000001931                 mov     dword ptr [r13+0], 0
.text:0000000000001939                 call    _getpriority
.text:000000000000193E                 cmp     eax, 0FFFFFFFFh
.text:0000000000001941                 jnz     short loc_1970
.text:0000000000001943                 cmp     dword ptr [r13+0], 0
.text:0000000000001948                 jz      short loc_1970
.text:000000000000194A                 lea     rsi, aCannotGetNicen ; "cannot get niceness"
.text:0000000000001951                 mov     edx, 5          ; category
.text:0000000000001956                 xor     edi, edi        ; domainname
.text:0000000000001958                 call    _dcgettext
.text:000000000000195D                 mov     esi, [r13+0]    ; errnum
.text:0000000000001961                 mov     rdx, rax        ; format
.text:0000000000001964                 mov     edi, 7Dh ; '}'  ; status
.text:0000000000001969                 xor     eax, eax
.text:000000000000196B                 call    _error
.text:0000000000001970
.text:0000000000001970 loc_1970:                               ; CODE XREF: main+331↑j
.text:0000000000001970                                         ; main+338↑j
.text:0000000000001970                 lea     rsi, aD         ; "%d\n"
.text:0000000000001977                 mov     edx, eax
.text:0000000000001979                 mov     edi, 1
.text:000000000000197E                 xor     eax, eax
.text:0000000000001980                 xor     ebx, ebx
.text:0000000000001982                 call    ___printf_chk
.text:0000000000001987                 jmp     short loc_190E
.text:0000000000001989 ; ---------------------------------------------------------------------------
.text:0000000000001989
.text:0000000000001989 loc_1989:                               ; CODE XREF: main+28C↑j
.text:0000000000001989                                         ; main+29A↑j
.text:0000000000001989                 xor     edi, edi
.text:000000000000198B                 jmp     loc_18B0
.text:0000000000001990 ; ---------------------------------------------------------------------------
.text:0000000000001990
.text:0000000000001990 loc_1990:                               ; CODE XREF: main+117↑j
.text:0000000000001990                 xor     edi, edi        ; status
.text:0000000000001992                 call    usage
.text:0000000000001997 ; ---------------------------------------------------------------------------
.text:0000000000001997
.text:0000000000001997 loc_1997:                               ; CODE XREF: main+30E↑j
.text:0000000000001997                 call    ___stack_chk_fail
.text:000000000000199C ; ---------------------------------------------------------------------------
.text:000000000000199C
.text:000000000000199C loc_199C:                               ; CODE XREF: main+151↑j
.text:000000000000199C                 mov     rdi, r14
.text:000000000000199F                 call    quote
.text:00000000000019A4                 lea     rsi, aInvalidAdjustm ; "invalid adjustment %s"
.text:00000000000019AB                 mov     rbx, rax
.text:00000000000019AE                 mov     edx, 5          ; category
.text:00000000000019B3                 xor     edi, edi        ; domainname
.text:00000000000019B5                 call    _dcgettext
.text:00000000000019BA                 mov     rcx, rbx
.text:00000000000019BD                 mov     rdx, rax        ; format
.text:00000000000019C0                 xor     esi, esi        ; errnum
.text:00000000000019C2                 mov     edi, 7Dh ; '}'  ; status
.text:00000000000019C7                 xor     eax, eax
.text:00000000000019C9                 call    _error
.text:00000000000019C9 ; } // starts at 1610
.text:00000000000019CE                 xchg    ax, ax
.text:00000000000019CE main            endp ; sp-analysis failed
.text:00000000000019CE
.text:00000000000019D0
.text:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000019D0
.text:00000000000019D0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000019D0
.text:00000000000019D0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000019D0                 public start
.text:00000000000019D0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000019D0 ; __unwind {
.text:00000000000019D0                 xor     ebp, ebp
.text:00000000000019D2                 mov     r9, rdx         ; rtld_fini
.text:00000000000019D5                 pop     rsi             ; argc
.text:00000000000019D6                 mov     rdx, rsp        ; ubp_av
.text:00000000000019D9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000019DD                 push    rax
.text:00000000000019DE                 push    rsp             ; stack_end
.text:00000000000019DF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000019E6                 lea     rcx, __libc_csu_init ; init
.text:00000000000019ED                 lea     rdi, main       ; main
.text:00000000000019F4                 call    cs:__libc_start_main_ptr
.text:00000000000019FA                 hlt
.text:00000000000019FA ; } // starts at 19D0
.text:00000000000019FA start           endp
.text:00000000000019FA
.text:00000000000019FA ; ---------------------------------------------------------------------------
.text:00000000000019FB                 align 20h
.text:0000000000001A00
.text:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A00
.text:0000000000001A00 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A00
.text:0000000000001A00 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1AB3↓p
.text:0000000000001A00                 lea     rdi, __bss_start
.text:0000000000001A07                 push    rbp
.text:0000000000001A08                 lea     rax, __bss_start
.text:0000000000001A0F                 cmp     rax, rdi
.text:0000000000001A12                 mov     rbp, rsp
.text:0000000000001A15                 jz      short loc_1A30
.text:0000000000001A17                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:0000000000001A1E                 test    rax, rax
.text:0000000000001A21                 jz      short loc_1A30
.text:0000000000001A23                 pop     rbp
.text:0000000000001A24                 jmp     rax
.text:0000000000001A24 ; ---------------------------------------------------------------------------
.text:0000000000001A26                 align 10h
.text:0000000000001A30
.text:0000000000001A30 loc_1A30:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001A30                                         ; deregister_tm_clones+21↑j
.text:0000000000001A30                 pop     rbp
.text:0000000000001A31                 retn
.text:0000000000001A31 deregister_tm_clones endp
.text:0000000000001A31
.text:0000000000001A31 ; ---------------------------------------------------------------------------
.text:0000000000001A32                 align 20h
.text:0000000000001A40
.text:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A40
.text:0000000000001A40 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001A40
.text:0000000000001A40 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001A40                 lea     rdi, __bss_start
.text:0000000000001A47                 lea     rsi, __bss_start
.text:0000000000001A4E                 push    rbp
.text:0000000000001A4F                 sub     rsi, rdi
.text:0000000000001A52                 mov     rbp, rsp
.text:0000000000001A55                 sar     rsi, 3
.text:0000000000001A59                 mov     rax, rsi
.text:0000000000001A5C                 shr     rax, 3Fh
.text:0000000000001A60                 add     rsi, rax
.text:0000000000001A63                 sar     rsi, 1
.text:0000000000001A66                 jz      short loc_1A80
.text:0000000000001A68                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:0000000000001A6F                 test    rax, rax
.text:0000000000001A72                 jz      short loc_1A80
.text:0000000000001A74                 pop     rbp
.text:0000000000001A75                 jmp     rax
.text:0000000000001A75 ; ---------------------------------------------------------------------------
.text:0000000000001A77                 align 20h
.text:0000000000001A80
.text:0000000000001A80 loc_1A80:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001A80                                         ; register_tm_clones+32↑j
.text:0000000000001A80                 pop     rbp
.text:0000000000001A81                 retn
.text:0000000000001A81 register_tm_clones endp
.text:0000000000001A81
.text:0000000000001A81 ; ---------------------------------------------------------------------------
.text:0000000000001A82                 align 10h
.text:0000000000001A90
.text:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000001A90
.text:0000000000001A90 ; Attributes: info_from_lumina
.text:0000000000001A90
.text:0000000000001A90 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001A90                 cmp     cs:completed_7697, 0
.text:0000000000001A97                 jnz     short locret_1AC8
.text:0000000000001A99                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001AA1                 push    rbp
.text:0000000000001AA2                 mov     rbp, rsp
.text:0000000000001AA5                 jz      short loc_1AB3
.text:0000000000001AA7                 mov     rdi, cs:__dso_handle ; void *
.text:0000000000001AAE                 call    __cxa_finalize
.text:0000000000001AB3
.text:0000000000001AB3 loc_1AB3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001AB3                 call    deregister_tm_clones
.text:0000000000001AB8                 mov     cs:completed_7697, 1
.text:0000000000001ABF                 pop     rbp
.text:0000000000001AC0                 retn
.text:0000000000001AC0 ; ---------------------------------------------------------------------------
.text:0000000000001AC1                 align 8
.text:0000000000001AC8
.text:0000000000001AC8 locret_1AC8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:0000000000001AC8                 rep retn
.text:0000000000001AC8 __do_global_dtors_aux endp
.text:0000000000001AC8
.text:0000000000001AC8 ; ---------------------------------------------------------------------------
.text:0000000000001ACA                 align 10h
.text:0000000000001AD0
.text:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AD0
.text:0000000000001AD0 ; Attributes: bp-based frame
.text:0000000000001AD0
.text:0000000000001AD0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:0000000000001AD0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:0000000000001AD0                 push    rbp
.text:0000000000001AD1                 mov     rbp, rsp
.text:0000000000001AD4                 pop     rbp
.text:0000000000001AD5                 jmp     register_tm_clones
.text:0000000000001AD5 frame_dummy     endp
.text:0000000000001AD5
.text:0000000000001AD5 ; ---------------------------------------------------------------------------
.text:0000000000001ADA                 align 20h
.text:0000000000001AE0
.text:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AE0
.text:0000000000001AE0 ; Attributes: noreturn
.text:0000000000001AE0
.text:0000000000001AE0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001AE0                 public usage
.text:0000000000001AE0 usage           proc near               ; CODE XREF: main+1A6↑p
.text:0000000000001AE0                                         ; main+382↑p
.text:0000000000001AE0
.text:0000000000001AE0 var_A8          = qword ptr -0A8h
.text:0000000000001AE0 var_A0          = qword ptr -0A0h
.text:0000000000001AE0 var_98          = qword ptr -98h
.text:0000000000001AE0 var_90          = qword ptr -90h
.text:0000000000001AE0 var_88          = qword ptr -88h
.text:0000000000001AE0 var_80          = qword ptr -80h
.text:0000000000001AE0 var_78          = qword ptr -78h
.text:0000000000001AE0 var_70          = qword ptr -70h
.text:0000000000001AE0 var_68          = qword ptr -68h
.text:0000000000001AE0 var_60          = qword ptr -60h
.text:0000000000001AE0 var_58          = qword ptr -58h
.text:0000000000001AE0 var_50          = qword ptr -50h
.text:0000000000001AE0 var_48          = qword ptr -48h
.text:0000000000001AE0 var_40          = qword ptr -40h
.text:0000000000001AE0 var_30          = qword ptr -30h
.text:0000000000001AE0
.text:0000000000001AE0 ; __unwind {
.text:0000000000001AE0                 push    r13
.text:0000000000001AE2                 push    r12
.text:0000000000001AE4                 mov     edx, 5          ; category
.text:0000000000001AE9                 push    rbp
.text:0000000000001AEA                 push    rbx
.text:0000000000001AEB                 mov     ebp, edi
.text:0000000000001AED                 sub     rsp, 88h
.text:0000000000001AF4                 mov     rbx, cs:program_name
.text:0000000000001AFB                 mov     rax, fs:28h
.text:0000000000001B04                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001B09                 xor     eax, eax
.text:0000000000001B0B                 test    edi, edi
.text:0000000000001B0D                 jz      short loc_1B3D
.text:0000000000001B0F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001B16                 xor     edi, edi        ; domainname
.text:0000000000001B18                 call    _dcgettext
.text:0000000000001B1D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001B24                 mov     rdx, rax
.text:0000000000001B27                 mov     rcx, rbx
.text:0000000000001B2A                 mov     esi, 1
.text:0000000000001B2F                 xor     eax, eax
.text:0000000000001B31                 call    ___fprintf_chk
.text:0000000000001B36
.text:0000000000001B36 loc_1B36:                               ; CODE XREF: usage+2F6↓j
.text:0000000000001B36                 mov     edi, ebp        ; status
.text:0000000000001B38                 call    _exit
.text:0000000000001B3D ; ---------------------------------------------------------------------------
.text:0000000000001B3D
.text:0000000000001B3D loc_1B3D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001B3D                 lea     rsi, aUsageSOptionCo ; "Usage: %s [OPTION] [COMMAND [ARG]...]\n"
.text:0000000000001B44                 xor     edi, edi        ; domainname
.text:0000000000001B46                 call    _dcgettext
.text:0000000000001B4B                 mov     rdx, rbx
.text:0000000000001B4E                 mov     rsi, rax
.text:0000000000001B51                 mov     edi, 1
.text:0000000000001B56                 xor     eax, eax
.text:0000000000001B58                 call    ___printf_chk
.text:0000000000001B5D                 lea     rsi, aRunCommandWith ; "Run COMMAND with an adjusted niceness, "...
.text:0000000000001B64                 mov     edx, 5          ; category
.text:0000000000001B69                 xor     edi, edi        ; domainname
.text:0000000000001B6B                 call    _dcgettext
.text:0000000000001B70                 mov     ecx, 13h
.text:0000000000001B75                 mov     rsi, rax
.text:0000000000001B78                 mov     edx, 0FFFFFFECh
.text:0000000000001B7D                 mov     edi, 1
.text:0000000000001B82                 xor     eax, eax
.text:0000000000001B84                 call    ___printf_chk
.text:0000000000001B89                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001B90                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001B97                 mov     edx, 5          ; category
.text:0000000000001B9C                 xor     edi, edi        ; domainname
.text:0000000000001B9E                 call    _dcgettext
.text:0000000000001BA3                 mov     rsi, rbx        ; stream
.text:0000000000001BA6                 mov     rdi, rax        ; s
.text:0000000000001BA9                 call    _fputs_unlocked
.text:0000000000001BAE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BB5                 lea     rsi, aNAdjustmentNAd ; "  -n, --adjustment=N   add integer N to"...
.text:0000000000001BBC                 mov     edx, 5          ; category
.text:0000000000001BC1                 xor     edi, edi        ; domainname
.text:0000000000001BC3                 call    _dcgettext
.text:0000000000001BC8                 mov     rsi, rbx        ; stream
.text:0000000000001BCB                 mov     rdi, rax        ; s
.text:0000000000001BCE                 call    _fputs_unlocked
.text:0000000000001BD3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BDA                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001BE1                 mov     edx, 5          ; category
.text:0000000000001BE6                 xor     edi, edi        ; domainname
.text:0000000000001BE8                 call    _dcgettext
.text:0000000000001BED                 mov     rsi, rbx        ; stream
.text:0000000000001BF0                 mov     rdi, rax        ; s
.text:0000000000001BF3                 call    _fputs_unlocked
.text:0000000000001BF8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BFF                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001C06                 mov     edx, 5          ; category
.text:0000000000001C0B                 xor     edi, edi        ; domainname
.text:0000000000001C0D                 call    _dcgettext
.text:0000000000001C12                 mov     rsi, rbx        ; stream
.text:0000000000001C15                 mov     rdi, rax        ; s
.text:0000000000001C18                 lea     rbx, aNice      ; "nice"
.text:0000000000001C1F                 call    _fputs_unlocked
.text:0000000000001C24                 lea     rsi, aNoteYourShellM ; "\nNOTE: your shell may have its own ver"...
.text:0000000000001C2B                 mov     edx, 5          ; category
.text:0000000000001C30                 xor     edi, edi        ; domainname
.text:0000000000001C32                 call    _dcgettext
.text:0000000000001C37                 lea     rdx, aNice      ; "nice"
.text:0000000000001C3E                 mov     rsi, rax
.text:0000000000001C41                 mov     edi, 1
.text:0000000000001C46                 xor     eax, eax
.text:0000000000001C48                 call    ___printf_chk
.text:0000000000001C4D                 lea     rax, asc_4F89   ; "["
.text:0000000000001C54                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001C5B                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001C64                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001C6D                 mov     rdx, rsp
.text:0000000000001C70                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001C74                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001C7B                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001C80                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001C87                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001C8C                 lea     rax, domainname ; "coreutils"
.text:0000000000001C93                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001C98                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001C9F                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001CA4                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001CAB                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001CB0                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001CB5                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001CBC                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001CC1                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001CC8                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001CCD                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001CD2                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001CD7                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001CDC                 nop     dword ptr [rax+00h]
.text:0000000000001CE0
.text:0000000000001CE0 loc_1CE0:                               ; CODE XREF: usage+21D↓j
.text:0000000000001CE0                 add     rdx, 10h
.text:0000000000001CE4                 mov     rdi, [rdx]
.text:0000000000001CE7                 test    rdi, rdi
.text:0000000000001CEA                 jz      short loc_1CFF
.text:0000000000001CEC                 mov     ecx, 5
.text:0000000000001CF1                 mov     rsi, rbx
.text:0000000000001CF4                 repe cmpsb
.text:0000000000001CF6                 setnbe  al
.text:0000000000001CF9                 sbb     al, 0
.text:0000000000001CFB                 test    al, al
.text:0000000000001CFD                 jnz     short loc_1CE0
.text:0000000000001CFF
.text:0000000000001CFF loc_1CFF:                               ; CODE XREF: usage+20A↑j
.text:0000000000001CFF                 mov     r12, [rdx+8]
.text:0000000000001D03                 xor     edi, edi        ; domainname
.text:0000000000001D05                 mov     edx, 5          ; category
.text:0000000000001D0A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001D11                 test    r12, r12
.text:0000000000001D14                 jz      loc_1DDB
.text:0000000000001D1A                 call    _dcgettext
.text:0000000000001D1F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D26                 lea     rdx, unk_4FFF
.text:0000000000001D2D                 mov     rsi, rax
.text:0000000000001D30                 mov     edi, 1
.text:0000000000001D35                 xor     eax, eax
.text:0000000000001D37                 call    ___printf_chk
.text:0000000000001D3C                 xor     esi, esi        ; locale
.text:0000000000001D3E                 mov     edi, 5          ; category
.text:0000000000001D43                 call    _setlocale
.text:0000000000001D48                 test    rax, rax
.text:0000000000001D4B                 jz      short loc_1D69
.text:0000000000001D4D                 lea     rsi, s2         ; "en_"
.text:0000000000001D54                 mov     edx, 3          ; n
.text:0000000000001D59                 mov     rdi, rax        ; s1
.text:0000000000001D5C                 call    _strncmp
.text:0000000000001D61                 test    eax, eax
.text:0000000000001D63                 jnz     loc_1E70
.text:0000000000001D69
.text:0000000000001D69 loc_1D69:                               ; CODE XREF: usage+26B↑j
.text:0000000000001D69                                         ; usage+3B5↓j
.text:0000000000001D69                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001D70                 xor     edi, edi        ; domainname
.text:0000000000001D72                 mov     edx, 5          ; category
.text:0000000000001D77                 call    _dcgettext
.text:0000000000001D7C                 lea     rcx, aNice      ; "nice"
.text:0000000000001D83                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D8A                 mov     rsi, rax
.text:0000000000001D8D                 mov     edi, 1
.text:0000000000001D92                 xor     eax, eax
.text:0000000000001D94                 call    ___printf_chk
.text:0000000000001D99                 cmp     r12, rbx
.text:0000000000001D9C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001DA3                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001DAA                 cmovz   rbx, rcx
.text:0000000000001DAE
.text:0000000000001DAE loc_1DAE:                               ; CODE XREF: usage+384↓j
.text:0000000000001DAE                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001DB5                 xor     edi, edi        ; domainname
.text:0000000000001DB7                 mov     edx, 5          ; category
.text:0000000000001DBC                 call    _dcgettext
.text:0000000000001DC1                 mov     rcx, rbx
.text:0000000000001DC4                 mov     rsi, rax
.text:0000000000001DC7                 mov     rdx, r12
.text:0000000000001DCA                 mov     edi, 1
.text:0000000000001DCF                 xor     eax, eax
.text:0000000000001DD1                 call    ___printf_chk
.text:0000000000001DD6                 jmp     loc_1B36
.text:0000000000001DDB ; ---------------------------------------------------------------------------
.text:0000000000001DDB
.text:0000000000001DDB loc_1DDB:                               ; CODE XREF: usage+234↑j
.text:0000000000001DDB                 call    _dcgettext
.text:0000000000001DE0                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001DE7                 lea     rdx, unk_4FFF
.text:0000000000001DEE                 mov     rsi, rax
.text:0000000000001DF1                 mov     edi, 1
.text:0000000000001DF6                 xor     eax, eax
.text:0000000000001DF8                 call    ___printf_chk
.text:0000000000001DFD                 xor     esi, esi        ; locale
.text:0000000000001DFF                 mov     edi, 5          ; category
.text:0000000000001E04                 call    _setlocale
.text:0000000000001E09                 test    rax, rax
.text:0000000000001E0C                 jz      short loc_1E26
.text:0000000000001E0E                 lea     rsi, s2         ; "en_"
.text:0000000000001E15                 mov     edx, 3          ; n
.text:0000000000001E1A                 mov     rdi, rax        ; s1
.text:0000000000001E1D                 call    _strncmp
.text:0000000000001E22                 test    eax, eax
.text:0000000000001E24                 jnz     short loc_1E69
.text:0000000000001E26
.text:0000000000001E26 loc_1E26:                               ; CODE XREF: usage+32C↑j
.text:0000000000001E26                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001E2D                 mov     edx, 5          ; category
.text:0000000000001E32                 xor     edi, edi        ; domainname
.text:0000000000001E34                 lea     r12, aNice      ; "nice"
.text:0000000000001E3B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001E42                 call    _dcgettext
.text:0000000000001E47                 lea     rcx, aNice      ; "nice"
.text:0000000000001E4E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001E55                 mov     rsi, rax
.text:0000000000001E58                 mov     edi, 1
.text:0000000000001E5D                 xor     eax, eax
.text:0000000000001E5F                 call    ___printf_chk
.text:0000000000001E64                 jmp     loc_1DAE
.text:0000000000001E69 ; ---------------------------------------------------------------------------
.text:0000000000001E69
.text:0000000000001E69 loc_1E69:                               ; CODE XREF: usage+344↑j
.text:0000000000001E69                 lea     r12, aNice      ; "nice"
.text:0000000000001E70
.text:0000000000001E70 loc_1E70:                               ; CODE XREF: usage+283↑j
.text:0000000000001E70                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E77                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001E7E                 xor     edi, edi        ; domainname
.text:0000000000001E80                 mov     edx, 5          ; category
.text:0000000000001E85                 call    _dcgettext
.text:0000000000001E8A                 mov     rsi, r13        ; stream
.text:0000000000001E8D                 mov     rdi, rax        ; s
.text:0000000000001E90                 call    _fputs_unlocked
.text:0000000000001E95                 jmp     loc_1D69
.text:0000000000001E95 ; } // starts at 1AE0
.text:0000000000001E95 usage           endp
.text:0000000000001E95
.text:0000000000001E95 ; ---------------------------------------------------------------------------
.text:0000000000001E9A                 align 20h
.text:0000000000001EA0
.text:0000000000001EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EA0
.text:0000000000001EA0
.text:0000000000001EA0                 public close_stdout_set_file_name
.text:0000000000001EA0 close_stdout_set_file_name proc near
.text:0000000000001EA0 ; __unwind {
.text:0000000000001EA0                 mov     cs:file_name, rdi
.text:0000000000001EA7                 retn
.text:0000000000001EA7 ; } // starts at 1EA0
.text:0000000000001EA7 close_stdout_set_file_name endp
.text:0000000000001EA7
.text:0000000000001EA7 ; ---------------------------------------------------------------------------
.text:0000000000001EA8                 align 10h
.text:0000000000001EB0
.text:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EB0
.text:0000000000001EB0
.text:0000000000001EB0                 public close_stdout_set_ignore_EPIPE
.text:0000000000001EB0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001EB0 ; __unwind {
.text:0000000000001EB0                 mov     cs:ignore_EPIPE, dil
.text:0000000000001EB7                 retn
.text:0000000000001EB7 ; } // starts at 1EB0
.text:0000000000001EB7 close_stdout_set_ignore_EPIPE endp
.text:0000000000001EB7
.text:0000000000001EB7 ; ---------------------------------------------------------------------------
.text:0000000000001EB8                 align 20h
.text:0000000000001EC0
.text:0000000000001EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EC0
.text:0000000000001EC0 ; Attributes: info_from_lumina
.text:0000000000001EC0
.text:0000000000001EC0 ; void __cdecl close_stdout()
.text:0000000000001EC0                 public close_stdout
.text:0000000000001EC0 close_stdout    proc near               ; DATA XREF: main+5F↑o
.text:0000000000001EC0 ; __unwind {
.text:0000000000001EC0                 push    rbp
.text:0000000000001EC1                 push    rbx
.text:0000000000001EC2                 sub     rsp, 8
.text:0000000000001EC6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001ECD                 call    close_stream
.text:0000000000001ED2                 test    eax, eax
.text:0000000000001ED4                 jz      short loc_1EEC
.text:0000000000001ED6                 call    ___errno_location
.text:0000000000001EDB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001EE2                 mov     rbx, rax
.text:0000000000001EE5                 jz      short loc_1F03
.text:0000000000001EE7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001EEA                 jnz     short loc_1F03
.text:0000000000001EEC
.text:0000000000001EEC loc_1EEC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001EEC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001EF3                 call    close_stream
.text:0000000000001EF8                 test    eax, eax
.text:0000000000001EFA                 jnz     short loc_1F42
.text:0000000000001EFC                 add     rsp, 8
.text:0000000000001F00                 pop     rbx
.text:0000000000001F01                 pop     rbp
.text:0000000000001F02                 retn
.text:0000000000001F03 ; ---------------------------------------------------------------------------
.text:0000000000001F03
.text:0000000000001F03 loc_1F03:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001F03                                         ; close_stdout+2A↑j
.text:0000000000001F03                 lea     rsi, aWriteError ; "write error"
.text:0000000000001F0A                 xor     edi, edi        ; domainname
.text:0000000000001F0C                 mov     edx, 5          ; category
.text:0000000000001F11                 call    _dcgettext
.text:0000000000001F16                 mov     rdi, cs:file_name
.text:0000000000001F1D                 mov     rbp, rax
.text:0000000000001F20                 test    rdi, rdi
.text:0000000000001F23                 jz      short loc_1F4D
.text:0000000000001F25                 call    quotearg_colon
.text:0000000000001F2A                 mov     esi, [rbx]      ; errnum
.text:0000000000001F2C                 lea     rdx, format     ; "%s: %s"
.text:0000000000001F33                 mov     rcx, rax
.text:0000000000001F36                 mov     r8, rbp
.text:0000000000001F39                 xor     edi, edi        ; status
.text:0000000000001F3B                 xor     eax, eax
.text:0000000000001F3D                 call    _error
.text:0000000000001F42
.text:0000000000001F42 loc_1F42:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001F42                                         ; close_stdout+A2↓j
.text:0000000000001F42                 mov     edi, cs:exit_failure ; status
.text:0000000000001F48                 call    __exit
.text:0000000000001F4D ; ---------------------------------------------------------------------------
.text:0000000000001F4D
.text:0000000000001F4D loc_1F4D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001F4D                 mov     esi, [rbx]      ; errnum
.text:0000000000001F4F                 lea     rdx, format+4   ; format
.text:0000000000001F56                 mov     rcx, rax
.text:0000000000001F59                 xor     edi, edi        ; status
.text:0000000000001F5B                 xor     eax, eax
.text:0000000000001F5D                 call    _error
.text:0000000000001F62                 jmp     short loc_1F42
.text:0000000000001F62 ; } // starts at 1EC0
.text:0000000000001F62 close_stdout    endp
.text:0000000000001F62
.text:0000000000001F62 ; ---------------------------------------------------------------------------
.text:0000000000001F64                 align 10h
.text:0000000000001F70
.text:0000000000001F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F70
.text:0000000000001F70
.text:0000000000001F70                 public set_program_name
.text:0000000000001F70 set_program_name proc near              ; CODE XREF: main+2A↑p
.text:0000000000001F70 ; __unwind {
.text:0000000000001F70                 test    rdi, rdi
.text:0000000000001F73                 push    rbx
.text:0000000000001F74                 jz      short loc_1FED
.text:0000000000001F76                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001F7B                 mov     rbx, rdi
.text:0000000000001F7E                 call    _strrchr
.text:0000000000001F83                 test    rax, rax
.text:0000000000001F86                 jz      short loc_1FDD
.text:0000000000001F88                 lea     r8, [rax+1]
.text:0000000000001F8C                 mov     rdx, r8
.text:0000000000001F8F                 sub     rdx, rbx
.text:0000000000001F92                 cmp     rdx, 6
.text:0000000000001F96                 jle     short loc_1FDD
.text:0000000000001F98                 lea     rsi, [rax-6]
.text:0000000000001F9C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001FA3                 mov     ecx, 7
.text:0000000000001FA8                 repe cmpsb
.text:0000000000001FAA                 setnbe  dl
.text:0000000000001FAD                 sbb     dl, 0
.text:0000000000001FB0                 test    dl, dl
.text:0000000000001FB2                 jnz     short loc_1FDD
.text:0000000000001FB4                 lea     rdi, aLt        ; "lt-"
.text:0000000000001FBB                 mov     ecx, 3
.text:0000000000001FC0                 mov     rsi, r8
.text:0000000000001FC3                 mov     rbx, r8
.text:0000000000001FC6                 repe cmpsb
.text:0000000000001FC8                 setnbe  dl
.text:0000000000001FCB                 sbb     dl, 0
.text:0000000000001FCE                 test    dl, dl
.text:0000000000001FD0                 jnz     short loc_1FDD
.text:0000000000001FD2                 lea     rbx, [rax+4]
.text:0000000000001FD6                 mov     cs:__bss_start, rbx
.text:0000000000001FDD
.text:0000000000001FDD loc_1FDD:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001FDD                                         ; set_program_name+26↑j ...
.text:0000000000001FDD                 mov     cs:program_name, rbx
.text:0000000000001FE4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001FEB                 pop     rbx
.text:0000000000001FEC                 retn
.text:0000000000001FED ; ---------------------------------------------------------------------------
.text:0000000000001FED
.text:0000000000001FED loc_1FED:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001FED                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001FF4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001FFB                 mov     edx, 37h ; '7'  ; n
.text:0000000000002000                 mov     esi, 1          ; size
.text:0000000000002005                 call    _fwrite
.text:000000000000200A                 call    _abort
.text:000000000000200A ; } // starts at 1F70
.text:000000000000200A set_program_name endp
.text:000000000000200A
.text:000000000000200A ; ---------------------------------------------------------------------------
.text:000000000000200F                 align 10h
.text:0000000000002010
.text:0000000000002010 ; =============== S U B R O U T I N E =======================================
.text:0000000000002010
.text:0000000000002010 ; Attributes: info_from_lumina
.text:0000000000002010
.text:0000000000002010 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002010 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002010                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002010 ; __unwind {
.text:0000000000002010                 push    rbp
.text:0000000000002011                 push    rbx
.text:0000000000002012                 mov     rbp, rdi
.text:0000000000002015                 mov     ebx, esi
.text:0000000000002017                 sub     rsp, 8
.text:000000000000201B                 call    locale_charset
.text:0000000000002020                 movzx   edx, byte ptr [rax]
.text:0000000000002023                 and     edx, 0FFFFFFDFh
.text:0000000000002026                 cmp     dl, 55h ; 'U'
.text:0000000000002029                 jz      short loc_20A0
.text:000000000000202B                 cmp     dl, 47h ; 'G'
.text:000000000000202E                 jz      short loc_2050
.text:0000000000002030
.text:0000000000002030 loc_2030:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002030                                         ; gettext_quote+50↓j ...
.text:0000000000002030                 lea     rax, unk_54EB
.text:0000000000002037                 lea     rdx, asc_54ED   ; "'"
.text:000000000000203E                 cmp     ebx, 9
.text:0000000000002041                 cmovnz  rax, rdx
.text:0000000000002045                 add     rsp, 8
.text:0000000000002049                 pop     rbx
.text:000000000000204A                 pop     rbp
.text:000000000000204B                 retn
.text:000000000000204B ; ---------------------------------------------------------------------------
.text:000000000000204C                 align 10h
.text:0000000000002050
.text:0000000000002050 loc_2050:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002050                 movzx   edx, byte ptr [rax+1]
.text:0000000000002054                 and     edx, 0FFFFFFDFh
.text:0000000000002057                 cmp     dl, 42h ; 'B'
.text:000000000000205A                 jnz     short loc_2030
.text:000000000000205C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002060                 jnz     short loc_2030
.text:0000000000002062                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002066                 jnz     short loc_2030
.text:0000000000002068                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000206C                 jnz     short loc_2030
.text:000000000000206E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002072                 jnz     short loc_2030
.text:0000000000002074                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002078                 jnz     short loc_2030
.text:000000000000207A                 cmp     byte ptr [rax+7], 0
.text:000000000000207E                 jnz     short loc_2030
.text:0000000000002080                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000002084                 lea     rax, unk_54E4
.text:000000000000208B                 lea     rdx, unk_54E8
.text:0000000000002092                 cmovnz  rax, rdx
.text:0000000000002096                 add     rsp, 8
.text:000000000000209A                 pop     rbx
.text:000000000000209B                 pop     rbp
.text:000000000000209C                 retn
.text:000000000000209C ; ---------------------------------------------------------------------------
.text:000000000000209D                 align 20h
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000020A0                 movzx   edx, byte ptr [rax+1]
.text:00000000000020A4                 and     edx, 0FFFFFFDFh
.text:00000000000020A7                 cmp     dl, 54h ; 'T'
.text:00000000000020AA                 jnz     short loc_2030
.text:00000000000020AC                 movzx   edx, byte ptr [rax+2]
.text:00000000000020B0                 and     edx, 0FFFFFFDFh
.text:00000000000020B3                 cmp     dl, 46h ; 'F'
.text:00000000000020B6                 jnz     loc_2030
.text:00000000000020BC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000020C0                 jnz     loc_2030
.text:00000000000020C6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000020CA                 jnz     loc_2030
.text:00000000000020D0                 cmp     byte ptr [rax+5], 0
.text:00000000000020D4                 jnz     loc_2030
.text:00000000000020DA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000020DE                 lea     rax, unk_54DC
.text:00000000000020E5                 lea     rdx, unk_54E0
.text:00000000000020EC                 cmovnz  rax, rdx
.text:00000000000020F0                 add     rsp, 8
.text:00000000000020F4                 pop     rbx
.text:00000000000020F5                 pop     rbp
.text:00000000000020F6                 retn
.text:00000000000020F6 ; } // starts at 2010
.text:00000000000020F6 gettext_quote   endp
.text:00000000000020F6
.text:00000000000020F6 ; ---------------------------------------------------------------------------
.text:00000000000020F7                 align 20h
.text:0000000000002100
.text:0000000000002100 ; =============== S U B R O U T I N E =======================================
.text:0000000000002100
.text:0000000000002100 ; Attributes: info_from_lumina
.text:0000000000002100
.text:0000000000002100 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002100 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002100                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002100
.text:0000000000002100 var_E0          = dword ptr -0E0h
.text:0000000000002100 var_DB          = byte ptr -0DBh
.text:0000000000002100 var_DA          = byte ptr -0DAh
.text:0000000000002100 var_D9          = byte ptr -0D9h
.text:0000000000002100 s               = qword ptr -0D8h
.text:0000000000002100 n               = qword ptr -0D0h
.text:0000000000002100 var_C8          = qword ptr -0C8h
.text:0000000000002100 ps              = qword ptr -0C0h
.text:0000000000002100 var_B8          = qword ptr -0B8h
.text:0000000000002100 var_B0          = qword ptr -0B0h
.text:0000000000002100 var_A8          = qword ptr -0A8h
.text:0000000000002100 s2              = qword ptr -0A0h
.text:0000000000002100 var_98          = qword ptr -98h
.text:0000000000002100 var_90          = qword ptr -90h
.text:0000000000002100 var_88          = qword ptr -88h
.text:0000000000002100 var_80          = qword ptr -80h
.text:0000000000002100 var_78          = qword ptr -78h
.text:0000000000002100 var_70          = dword ptr -70h
.text:0000000000002100 var_6C          = byte ptr -6Ch
.text:0000000000002100 var_6B          = byte ptr -6Bh
.text:0000000000002100 var_6A          = byte ptr -6Ah
.text:0000000000002100 var_69          = byte ptr -69h
.text:0000000000002100 var_68          = qword ptr -68h
.text:0000000000002100 var_60          = qword ptr -60h
.text:0000000000002100 wc              = dword ptr -4Ch
.text:0000000000002100 var_48          = qword ptr -48h
.text:0000000000002100 var_40          = qword ptr -40h
.text:0000000000002100 arg_0           = qword ptr  8
.text:0000000000002100 arg_8           = qword ptr  10h
.text:0000000000002100 arg_10          = qword ptr  18h
.text:0000000000002100
.text:0000000000002100 ; __unwind {
.text:0000000000002100                 push    r15
.text:0000000000002102                 push    r14
.text:0000000000002104                 mov     r15d, r8d
.text:0000000000002107                 push    r13
.text:0000000000002109                 push    r12
.text:000000000000210B                 mov     r14, rdi
.text:000000000000210E                 push    rbp
.text:000000000000210F                 push    rbx
.text:0000000000002110                 mov     ebx, r9d
.text:0000000000002113                 mov     r13, rsi
.text:0000000000002116                 mov     rbp, rcx
.text:0000000000002119                 and     ebx, 2
.text:000000000000211C                 sub     rsp, 0B8h
.text:0000000000002123                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000212B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002130                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002135                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000213A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000213F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002147                 mov     [rsp+0E8h+var_80], rax
.text:000000000000214C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002154                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002159                 mov     rax, fs:28h
.text:0000000000002162                 mov     [rsp+0E8h+var_40], rax
.text:000000000000216A                 xor     eax, eax
.text:000000000000216C                 call    ___ctype_get_mb_cur_max
.text:0000000000002171                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002175                 mov     [rsp+0E8h+var_90], rax
.text:000000000000217A                 ja      def_2191        ; jumptable 00000000000121F1 default case
.text:0000000000002180                 lea     rcx, jpt_2191
.text:0000000000002187                 mov     edx, r15d
.text:000000000000218A                 movsxd  rax, ds:(jpt_2191 - 5540h)[rcx+rdx*4]
.text:000000000000218E                 add     rax, rcx
.text:0000000000002191                 jmp     rax             ; switch jump
.text:0000000000002193 ; ---------------------------------------------------------------------------
.text:0000000000002193
.text:0000000000002193 loc_2193:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002193                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000002193                                         ; DATA XREF: ...
.text:0000000000002193                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000002198                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000219D                 xor     r12d, r12d
.text:00000000000021A0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000021A9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000021AE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000021B3
.text:00000000000021B3 loc_21B3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000021B3                 lea     rax, asc_54ED   ; "'"
.text:00000000000021BA                 mov     [rsp+0E8h+n], 1
.text:00000000000021C3                 xor     r15d, r15d
.text:00000000000021C6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000021CE                 mov     [rsp+0E8h+s2], rax
.text:00000000000021D3
.text:00000000000021D3 loc_21D3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000021D3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000021D3                 xor     r11d, r11d
.text:00000000000021D6                 mov     rax, rbp
.text:00000000000021D9                 mov     r8d, r12d
.text:00000000000021DC                 mov     rbp, r11
.text:00000000000021DF                 mov     r11, rax
.text:00000000000021E2                 nop     word ptr [rax+rax+00h]
.text:00000000000021E8
.text:00000000000021E8 loc_21E8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000021E8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000021E8                 cmp     r11, rbp
.text:00000000000021EB                 setnz   r12b
.text:00000000000021EF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000021F3                 jnz     short loc_2202
.text:00000000000021F5                 mov     rax, [rsp+0E8h+s]
.text:00000000000021FA                 cmp     byte ptr [rax+rbp], 0
.text:00000000000021FE                 setnz   r12b
.text:0000000000002202
.text:0000000000002202 loc_2202:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002202                 test    r12b, r12b
.text:0000000000002205                 jz      loc_2860
.text:000000000000220B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002210                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002215                 lea     r9, [rdi+rbp]
.text:0000000000002219                 setnz   al
.text:000000000000221C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002220                 mov     r10d, eax
.text:0000000000002223                 jz      loc_22D0
.text:0000000000002229                 mov     rax, [rsp+0E8h+n]
.text:000000000000222E                 test    rax, rax
.text:0000000000002231                 jz      loc_2660
.text:0000000000002237                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000223B                 lea     rbx, [rbp+rax+0]
.text:0000000000002240                 jnz     short loc_2270
.text:0000000000002242                 cmp     rax, 1
.text:0000000000002246                 jbe     short loc_2270
.text:0000000000002248                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000224D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002252                 mov     [rsp+0E8h+ps], r9
.text:0000000000002257                 call    _strlen
.text:000000000000225C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002262                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002268                 mov     r11, rax
.text:000000000000226B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002270
.text:0000000000002270 loc_2270:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002270                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002270                 cmp     rbx, r11
.text:0000000000002273                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002278                 ja      loc_2830
.text:000000000000227E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002283                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002288                 mov     rdi, r9         ; s1
.text:000000000000228B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002290                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002295                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000229A                 call    _memcmp
.text:000000000000229F                 test    eax, eax
.text:00000000000022A1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000022A6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000022AC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000022B1                 jnz     loc_2830
.text:00000000000022B7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000022BC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000022C2                 jnz     loc_3245
.text:00000000000022C8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000022D0
.text:00000000000022D0 loc_22D0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000022D0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000022D0                 movzx   ebx, byte ptr [r9]
.text:00000000000022D4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000022D7                 ja      def_22EE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000022DD                 lea     rcx, jpt_22EE
.text:00000000000022E4                 movzx   edx, bl
.text:00000000000022E7                 movsxd  rax, ds:(jpt_22EE - 556Ch)[rcx+rdx*4]
.text:00000000000022EB                 add     rax, rcx
.text:00000000000022EE                 jmp     rax             ; switch jump
.text:00000000000022F0 ; ---------------------------------------------------------------------------
.text:00000000000022F0
.text:00000000000022F0 loc_22F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000022F0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000022F0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000022F3
.text:00000000000022F3 loc_22F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022F3                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000022F3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000022F7                 setnz   al
.text:00000000000022FA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000022FE                 jnz     short loc_230C
.text:0000000000002300                 mov     rax, [rsp+0E8h+s]
.text:0000000000002305                 cmp     byte ptr [rax+1], 0
.text:0000000000002309                 setnz   al
.text:000000000000230C
.text:000000000000230C loc_230C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000230C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002311                 setz    dl
.text:0000000000002314                 test    al, al
.text:0000000000002316                 jz      loc_2568
.text:000000000000231C
.text:000000000000231C loc_231C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000231C                 xor     r12d, r12d
.text:000000000000231F                 xor     eax, eax
.text:0000000000002321                 nop     dword ptr [rax+00000000h]
.text:0000000000002328
.text:0000000000002328 loc_2328:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002328                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002328                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000232D                 jnz     loc_2442
.text:0000000000002333                 test    dl, dl
.text:0000000000002335                 jnz     loc_2442
.text:000000000000233B
.text:000000000000233B loc_233B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000233B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002340                 test    rsi, rsi
.text:0000000000002343                 jz      short loc_2359
.text:0000000000002345                 mov     edx, ebx
.text:0000000000002347                 shr     dl, 5
.text:000000000000234A                 movzx   edx, dl
.text:000000000000234D                 mov     edx, [rsi+rdx*4]
.text:0000000000002350                 bt      edx, ebx
.text:0000000000002353                 jb      loc_24A3
.text:0000000000002359
.text:0000000000002359 loc_2359:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002359                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002359                 test    r10b, r10b
.text:000000000000235C                 jnz     loc_24A3
.text:0000000000002362                 xor     eax, 1
.text:0000000000002365                 add     rbp, 1
.text:0000000000002369                 and     eax, r8d
.text:000000000000236C
.text:000000000000236C loc_236C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000236C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000236C                 test    al, al
.text:000000000000236E                 jz      short loc_2390
.text:0000000000002370                 cmp     r13, r15
.text:0000000000002373                 jbe     short loc_237A
.text:0000000000002375                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000237A
.text:000000000000237A loc_237A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000237A                 lea     rax, [r15+1]
.text:000000000000237E                 cmp     r13, rax
.text:0000000000002381                 jbe     short loc_2389
.text:0000000000002383                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002389
.text:0000000000002389 loc_2389:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002389                 add     r15, 2
.text:000000000000238D                 xor     r8d, r8d
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002390                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002390                 cmp     r15, r13
.text:0000000000002393                 jnb     short loc_2399
.text:0000000000002395                 mov     [r14+r15], bl
.text:0000000000002399
.text:0000000000002399 loc_2399:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002399                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000239E                 add     r15, 1
.text:00000000000023A2                 mov     eax, 0
.text:00000000000023A7                 test    r12b, r12b
.text:00000000000023AA                 cmovz   edi, eax
.text:00000000000023AD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000023B2                 jmp     loc_21E8
.text:00000000000023B2 ; ---------------------------------------------------------------------------
.text:00000000000023B7                 align 20h
.text:00000000000023C0
.text:00000000000023C0 loc_23C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000023C0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000023C0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000023C3
.text:00000000000023C3 loc_23C3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023C3                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000023C3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000023C7                 cmp     eax, 2
.text:00000000000023CA                 jz      loc_2988
.text:00000000000023D0                 cmp     eax, 5
.text:00000000000023D3                 jz      loc_2948
.text:00000000000023D9                 cmp     eax, 2
.text:00000000000023DC                 mov     ebx, 3Fh ; '?'
.text:00000000000023E1                 setz    dl
.text:00000000000023E4                 xor     r12d, r12d
.text:00000000000023E7                 xor     eax, eax
.text:00000000000023E9                 jmp     loc_2328
.text:00000000000023E9 ; ---------------------------------------------------------------------------
.text:00000000000023EE                 align 10h
.text:00000000000023F0
.text:00000000000023F0 loc_23F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000023F0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000023F0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000023F3
.text:00000000000023F3 loc_23F3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000023F3                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000023F3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000023F8                 jz      loc_2900
.text:00000000000023FE                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002403                 xor     edx, edx
.text:0000000000002405                 xor     eax, eax
.text:0000000000002407                 mov     ebx, 27h ; '''
.text:000000000000240C                 jmp     loc_2328
.text:000000000000240C ; ---------------------------------------------------------------------------
.text:0000000000002411                 align 8
.text:0000000000002418
.text:0000000000002418 loc_2418:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002418                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002418                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000241D                 mov     ebx, 74h ; 't'
.text:0000000000002422
.text:0000000000002422 loc_2422:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002422                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002422                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002427                 setz    al
.text:000000000000242A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000242E                 jnz     loc_257E
.text:0000000000002434
.text:0000000000002434 loc_2434:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002434                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002434                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002439                 jnz     short loc_24A0
.text:000000000000243B
.text:000000000000243B loc_243B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000243B                 mov     ebx, edx
.text:000000000000243D                 xor     r12d, r12d
.text:0000000000002440                 xor     eax, eax
.text:0000000000002442
.text:0000000000002442 loc_2442:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002442                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002442                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002447                 jnz     loc_233B
.text:000000000000244D                 jmp     loc_2359
.text:000000000000244D ; ---------------------------------------------------------------------------
.text:0000000000002452                 align 8
.text:0000000000002458
.text:0000000000002458 loc_2458:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002458                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002458                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000245D                 mov     ebx, 62h ; 'b'
.text:0000000000002462                 jmp     short loc_2434
.text:0000000000002462 ; ---------------------------------------------------------------------------
.text:0000000000002464                 align 8
.text:0000000000002468
.text:0000000000002468 loc_2468:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002468                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002468                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000246D                 jz      loc_2840
.text:0000000000002473                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002478                 jz      loc_2690
.text:000000000000247E
.text:000000000000247E loc_247E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000247E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002483                 jz      loc_2690
.text:0000000000002489                 cmp     [rsp+0E8h+n], 0
.text:000000000000248F                 jnz     loc_284B
.text:0000000000002495                 mov     ebx, 5Ch ; '\'
.text:000000000000249A                 nop     word ptr [rax+rax+00h]
.text:00000000000024A0
.text:00000000000024A0 loc_24A0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000024A0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000024A0                 xor     r12d, r12d
.text:00000000000024A3
.text:00000000000024A3 loc_24A3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000024A3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000024A3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024A8                 setz    dl
.text:00000000000024AB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000024B0                 mov     eax, edx
.text:00000000000024B2                 jnz     loc_2D08
.text:00000000000024B8                 mov     eax, r8d
.text:00000000000024BB                 xor     eax, 1
.text:00000000000024BE                 and     al, dl
.text:00000000000024C0                 jz      short loc_24F1
.text:00000000000024C2                 cmp     r13, r15
.text:00000000000024C5                 jbe     short loc_24CC
.text:00000000000024C7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000024CC
.text:00000000000024CC loc_24CC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000024CC                 lea     rdx, [r15+1]
.text:00000000000024D0                 cmp     r13, rdx
.text:00000000000024D3                 jbe     short loc_24DB
.text:00000000000024D5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000024DB
.text:00000000000024DB loc_24DB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000024DB                 lea     rdx, [r15+2]
.text:00000000000024DF                 cmp     r13, rdx
.text:00000000000024E2                 jbe     short loc_24EA
.text:00000000000024E4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:00000000000024EA
.text:00000000000024EA loc_24EA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:00000000000024EA                 add     r15, 3
.text:00000000000024EE                 mov     r8d, eax
.text:00000000000024F1
.text:00000000000024F1 loc_24F1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000024F1                 cmp     r13, r15
.text:00000000000024F4                 jbe     short loc_24FB
.text:00000000000024F6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000024FB
.text:00000000000024FB loc_24FB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000024FB                 add     r15, 1
.text:00000000000024FF                 add     rbp, 1
.text:0000000000002503                 jmp     loc_2390
.text:0000000000002503 ; ---------------------------------------------------------------------------
.text:0000000000002508                 align 10h
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002510                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002515                 jnz     loc_26E3
.text:000000000000251B                 xor     edx, edx
.text:000000000000251D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002522                 jz      loc_243B
.text:0000000000002528                 add     rbp, 1
.text:000000000000252C                 jmp     loc_21E8
.text:000000000000252C ; ---------------------------------------------------------------------------
.text:0000000000002531                 align 8
.text:0000000000002538
.text:0000000000002538 loc_2538:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002538                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002538                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000253D                 setz    dl
.text:0000000000002540                 xor     eax, eax
.text:0000000000002542                 jmp     loc_2328
.text:0000000000002542 ; ---------------------------------------------------------------------------
.text:0000000000002547                 align 10h
.text:0000000000002550
.text:0000000000002550 loc_2550:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002550                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002550                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002555                 mov     ebx, 61h ; 'a'
.text:000000000000255A                 jmp     loc_2434
.text:000000000000255A ; ---------------------------------------------------------------------------
.text:000000000000255F                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002560                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002565                 setz    dl
.text:0000000000002568
.text:0000000000002568 loc_2568:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002568                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002568                 test    rbp, rbp
.text:000000000000256B                 jnz     loc_231C
.text:0000000000002571
.text:0000000000002571 loc_2571:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002571                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002571                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002576                 and     al, dl
.text:0000000000002578                 jz      loc_2328
.text:000000000000257E
.text:000000000000257E loc_257E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000257E                 mov     rbp, r11
.text:0000000000002581                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002589                 jmp     loc_2C89
.text:0000000000002589 ; ---------------------------------------------------------------------------
.text:000000000000258E                 align 10h
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002590                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:0000000000002590                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002595                 setz    dl
.text:0000000000002598                 xor     r12d, r12d
.text:000000000000259B                 jmp     short loc_2571
.text:000000000000259B ; ---------------------------------------------------------------------------
.text:000000000000259D                 align 20h
.text:00000000000025A0
.text:00000000000025A0 loc_25A0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025A0                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000025A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000025A5                 mov     ebx, 20h ; ' '
.text:00000000000025AA                 setz    dl
.text:00000000000025AD                 jmp     short loc_2571
.text:00000000000025AD ; ---------------------------------------------------------------------------
.text:00000000000025AF                 align 10h
.text:00000000000025B0
.text:00000000000025B0 loc_25B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025B0                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000025B0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000025B5                 mov     ebx, 72h ; 'r'
.text:00000000000025BA                 jmp     loc_2422
.text:00000000000025BA ; ---------------------------------------------------------------------------
.text:00000000000025BF                 align 20h
.text:00000000000025C0
.text:00000000000025C0 loc_25C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025C0                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000025C0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000025C5                 mov     ebx, 66h ; 'f'
.text:00000000000025CA                 jmp     loc_2434
.text:00000000000025CA ; ---------------------------------------------------------------------------
.text:00000000000025CF                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025D0                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000025D0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000025D5                 mov     ebx, 76h ; 'v'
.text:00000000000025DA                 jmp     loc_2434
.text:00000000000025DA ; ---------------------------------------------------------------------------
.text:00000000000025DF                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025E0                                         ; DATA XREF: .rodata:jpt_22EE↓o
.text:00000000000025E0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:00000000000025E5                 mov     ebx, 6Eh ; 'n'
.text:00000000000025EA                 jmp     loc_2422
.text:00000000000025EA ; ---------------------------------------------------------------------------
.text:00000000000025EF                 align 10h
.text:00000000000025F0
.text:00000000000025F0 def_267A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000025F0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000025F0                                         ; DATA XREF: ...
.text:00000000000025F0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000025F3                 nop     dword ptr [rax+rax+00h]
.text:00000000000025F8
.text:00000000000025F8 def_22EE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000025F8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000025F8                                         ; DATA XREF: ...
.text:00000000000025F8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000025FE                 jnz     loc_29A8
.text:0000000000002604                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002609                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000260E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002613                 call    ___ctype_b_loc
.text:0000000000002618                 mov     rcx, [rax]
.text:000000000000261B                 movzx   edx, bl
.text:000000000000261E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002624                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000262A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000262F                 mov     edi, 1
.text:0000000000002634                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002638                 and     ax, 4000h
.text:000000000000263C                 setnz   r12b
.text:0000000000002640                 setz    al
.text:0000000000002643                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002647
.text:0000000000002647 loc_2647:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002647                 test    al, al
.text:0000000000002649                 jnz     loc_2FE1
.text:000000000000264F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002654                 setz    dl
.text:0000000000002657                 jmp     loc_2328
.text:0000000000002657 ; ---------------------------------------------------------------------------
.text:000000000000265C                 align 20h
.text:0000000000002660
.text:0000000000002660 loc_2660:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002660                 movzx   ebx, byte ptr [r9]
.text:0000000000002664                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002667                 ja      short def_267A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002669                 lea     rcx, jpt_267A
.text:0000000000002670                 movzx   edx, bl
.text:0000000000002673                 movsxd  rax, ds:(jpt_267A - 5768h)[rcx+rdx*4]
.text:0000000000002677                 add     rax, rcx
.text:000000000000267A                 jmp     rax             ; switch jump
.text:000000000000267A ; ---------------------------------------------------------------------------
.text:000000000000267C                 align 20h
.text:0000000000002680
.text:0000000000002680 loc_2680:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002680                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:0000000000002680                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002683                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002688                 jnz     loc_247E
.text:000000000000268E                 xchg    ax, ax
.text:0000000000002690
.text:0000000000002690 loc_2690:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002690                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002690                 mov     edx, 5Ch ; '\'
.text:0000000000002695                 mov     ebx, 5Ch ; '\'
.text:000000000000269A                 jmp     loc_2434
.text:000000000000269A ; ---------------------------------------------------------------------------
.text:000000000000269F                 align 20h
.text:00000000000026A0
.text:00000000000026A0 loc_26A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026A0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000026A0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000026A5                 xor     r10d, r10d
.text:00000000000026A8                 mov     ebx, 66h ; 'f'
.text:00000000000026AD                 jmp     loc_2434
.text:00000000000026AD ; ---------------------------------------------------------------------------
.text:00000000000026B2                 align 8
.text:00000000000026B8
.text:00000000000026B8 loc_26B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026B8                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000026B8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000026BD                 xor     r10d, r10d
.text:00000000000026C0                 mov     ebx, 6Eh ; 'n'
.text:00000000000026C5                 jmp     loc_2422
.text:00000000000026C5 ; ---------------------------------------------------------------------------
.text:00000000000026CA                 align 10h
.text:00000000000026D0
.text:00000000000026D0 loc_26D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026D0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000026D0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000026D5                 jmp     loc_24A0
.text:00000000000026D5 ; ---------------------------------------------------------------------------
.text:00000000000026DA                 align 20h
.text:00000000000026E0
.text:00000000000026E0 loc_26E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000026E0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000026E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:00000000000026E3
.text:00000000000026E3 loc_26E3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:00000000000026E3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026E8                 setz    dl
.text:00000000000026EB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026F0                 jnz     loc_328A
.text:00000000000026F6                 mov     eax, r8d
.text:00000000000026F9                 mov     rcx, r15
.text:00000000000026FC                 xor     eax, 1
.text:00000000000026FF                 and     al, dl
.text:0000000000002701                 jz      short loc_2730
.text:0000000000002703                 cmp     r13, r15
.text:0000000000002706                 jbe     short loc_270D
.text:0000000000002708                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000270D
.text:000000000000270D loc_270D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000270D                 lea     rcx, [r15+1]
.text:0000000000002711                 cmp     r13, rcx
.text:0000000000002714                 jbe     short loc_271C
.text:0000000000002716                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000271C
.text:000000000000271C loc_271C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000271C                 lea     rcx, [r15+2]
.text:0000000000002720                 cmp     r13, rcx
.text:0000000000002723                 ja      loc_2D59
.text:0000000000002729
.text:0000000000002729 loc_2729:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002729                 lea     rcx, [r15+3]
.text:000000000000272D                 mov     r8d, eax
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002730                 cmp     r13, rcx
.text:0000000000002733                 jbe     short loc_273A
.text:0000000000002735                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000273A
.text:000000000000273A loc_273A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000273A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000273F                 lea     r15, [rcx+1]
.text:0000000000002743                 jz      loc_2D49
.text:0000000000002749                 lea     rax, [rbp+1]
.text:000000000000274D                 cmp     rax, r11
.text:0000000000002750                 jnb     short loc_276B
.text:0000000000002752                 mov     rax, [rsp+0E8h+s]
.text:0000000000002757                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000275C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002760                 sub     eax, 30h ; '0'
.text:0000000000002763                 cmp     al, 9
.text:0000000000002765                 jbe     loc_2F99
.text:000000000000276B
.text:000000000000276B loc_276B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000276B                 mov     eax, r12d
.text:000000000000276E                 mov     ebx, 30h ; '0'
.text:0000000000002773                 xor     r12d, r12d
.text:0000000000002776                 jmp     loc_2328
.text:0000000000002776 ; ---------------------------------------------------------------------------
.text:000000000000277B                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002780                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:0000000000002780                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002785                 mov     r12d, r10d
.text:0000000000002788                 setz    dl
.text:000000000000278B                 xor     r10d, r10d
.text:000000000000278E                 xor     eax, eax
.text:0000000000002790                 jmp     loc_2328
.text:0000000000002790 ; ---------------------------------------------------------------------------
.text:0000000000002795                 align 8
.text:0000000000002798
.text:0000000000002798 loc_2798:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002798                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:0000000000002798                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000279D                 setz    dl
.text:00000000000027A0                 xor     r10d, r10d
.text:00000000000027A3                 jmp     loc_2568
.text:00000000000027A3 ; ---------------------------------------------------------------------------
.text:00000000000027A8                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027B0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000027B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000027B5                 setz    dl
.text:00000000000027B8                 xor     r10d, r10d
.text:00000000000027BB                 xor     r12d, r12d
.text:00000000000027BE                 jmp     loc_2571
.text:00000000000027BE ; ---------------------------------------------------------------------------
.text:00000000000027C3                 align 8
.text:00000000000027C8
.text:00000000000027C8 loc_27C8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027C8                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000027C8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000027CD                 mov     r12d, r10d
.text:00000000000027D0                 mov     ebx, 20h ; ' '
.text:00000000000027D5                 setz    dl
.text:00000000000027D8                 xor     r10d, r10d
.text:00000000000027DB                 jmp     loc_2571
.text:00000000000027E0 ; ---------------------------------------------------------------------------
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027E0                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000027E0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:00000000000027E5                 xor     r10d, r10d
.text:00000000000027E8                 mov     ebx, 72h ; 'r'
.text:00000000000027ED                 jmp     loc_2422
.text:00000000000027ED ; ---------------------------------------------------------------------------
.text:00000000000027F2                 align 8
.text:00000000000027F8
.text:00000000000027F8 loc_27F8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000027F8                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:00000000000027F8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000027FD                 jmp     loc_24A0
.text:00000000000027FD ; ---------------------------------------------------------------------------
.text:0000000000002802                 align 8
.text:0000000000002808
.text:0000000000002808 loc_2808:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002808                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:0000000000002808                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000280D                 xor     r10d, r10d
.text:0000000000002810                 mov     ebx, 74h ; 't'
.text:0000000000002815                 jmp     loc_2422
.text:0000000000002815 ; ---------------------------------------------------------------------------
.text:000000000000281A                 align 20h
.text:0000000000002820
.text:0000000000002820 loc_2820:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002820                                         ; DATA XREF: .rodata:jpt_267A↓o
.text:0000000000002820                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002825                 jmp     loc_24A0
.text:0000000000002825 ; ---------------------------------------------------------------------------
.text:000000000000282A                 align 10h
.text:0000000000002830
.text:0000000000002830 loc_2830:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002830                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002830                 xor     r10d, r10d
.text:0000000000002833                 jmp     loc_22D0
.text:0000000000002833 ; ---------------------------------------------------------------------------
.text:0000000000002838                 align 20h
.text:0000000000002840
.text:0000000000002840 loc_2840:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002840                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002845                 jnz     loc_31B0
.text:000000000000284B
.text:000000000000284B loc_284B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000284B                 add     rbp, 1
.text:000000000000284F                 mov     eax, r8d
.text:0000000000002852                 xor     r12d, r12d
.text:0000000000002855                 mov     ebx, 5Ch ; '\'
.text:000000000000285A                 jmp     loc_236C
.text:000000000000285A ; ---------------------------------------------------------------------------
.text:000000000000285F                 align 20h
.text:0000000000002860
.text:0000000000002860 loc_2860:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002860                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002865                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000286A                 mov     r12d, r8d
.text:000000000000286D                 mov     rbp, r11
.text:0000000000002870                 setz    dl
.text:0000000000002873                 mov     eax, ebx
.text:0000000000002875                 test    r15, r15
.text:0000000000002878                 setz    cl
.text:000000000000287B                 and     eax, edx
.text:000000000000287D                 and     al, cl
.text:000000000000287F                 jnz     loc_32E6
.text:0000000000002885                 mov     eax, ebx
.text:0000000000002887                 xor     eax, 1
.text:000000000000288A                 and     dl, al
.text:000000000000288C                 jz      loc_31FC
.text:0000000000002892                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002897                 jz      loc_31FA
.text:000000000000289D                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000028A2                 jnz     loc_329D
.text:00000000000028A8                 test    r13, r13
.text:00000000000028AB                 setz    al
.text:00000000000028AE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000028B4                 setnz   dl
.text:00000000000028B7                 and     al, dl
.text:00000000000028B9                 jz      loc_32DC
.text:00000000000028BF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000028C4
.text:00000000000028C4 loc_28C4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000028C4                 lea     rbx, asc_54ED   ; "'"
.text:00000000000028CB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000028CF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000028D7                 mov     r15d, 1
.text:00000000000028DD                 mov     [rsp+0E8h+n], 1
.text:00000000000028E6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000028EB                 mov     [rsp+0E8h+s2], rbx
.text:00000000000028F0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000028F4                 jmp     loc_21D3
.text:00000000000028F4 ; ---------------------------------------------------------------------------
.text:00000000000028F9                 align 20h
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002900                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002905                 jnz     loc_31B0
.text:000000000000290B                 test    r13, r13
.text:000000000000290E                 jz      loc_2D10
.text:0000000000002914                 xor     edx, edx
.text:0000000000002916                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000291C                 jnz     loc_2D10
.text:0000000000002922
.text:0000000000002922 loc_2922:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002922                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002922                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002927                 add     r15, 3
.text:000000000000292B                 xor     eax, eax
.text:000000000000292D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002932                 xor     r8d, r8d
.text:0000000000002935                 mov     r13, rdx
.text:0000000000002938                 mov     ebx, 27h ; '''
.text:000000000000293D                 jmp     loc_2359
.text:000000000000293D ; ---------------------------------------------------------------------------
.text:0000000000002942                 align 8
.text:0000000000002948
.text:0000000000002948 loc_2948:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002948                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000294D                 jz      short loc_2970
.text:000000000000294F                 lea     rcx, [rbp+2]
.text:0000000000002953                 cmp     rcx, r11
.text:0000000000002956                 jnb     short loc_2970
.text:0000000000002958                 mov     rax, [rsp+0E8h+s]
.text:000000000000295D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002962                 jz      loc_30F2
.text:0000000000002968                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002970
.text:0000000000002970 loc_2970:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002970                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002970                 xor     edx, edx
.text:0000000000002972                 xor     r12d, r12d
.text:0000000000002975                 xor     eax, eax
.text:0000000000002977                 mov     ebx, 3Fh ; '?'
.text:000000000000297C                 jmp     loc_2328
.text:000000000000297C ; ---------------------------------------------------------------------------
.text:0000000000002981                 align 8
.text:0000000000002988
.text:0000000000002988 loc_2988:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002988                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000298D                 jnz     loc_31B0
.text:0000000000002993                 xor     r12d, r12d
.text:0000000000002996                 xor     eax, eax
.text:0000000000002998                 mov     ebx, 3Fh ; '?'
.text:000000000000299D                 jmp     loc_2359
.text:000000000000299D ; ---------------------------------------------------------------------------
.text:00000000000029A2                 align 8
.text:00000000000029A8
.text:00000000000029A8 loc_29A8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000029A8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000029B0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000029B4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000029C0                 mov     [rsp+0E8h+ps], rax
.text:00000000000029C5                 jnz     short loc_29F4
.text:00000000000029C7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000029CC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000029D1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000029D6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000029DB                 call    _strlen
.text:00000000000029E0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000029E6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000029EC                 mov     r11, rax
.text:00000000000029EF                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000029F4
.text:00000000000029F4 loc_29F4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000029F4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000029FC                 xor     ecx, ecx
.text:00000000000029FE                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002A02                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002A07                 mov     rbx, rcx
.text:0000000000002A0A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002A12                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002A17                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002A1C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002A24                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002A29                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002A2E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002A33
.text:0000000000002A33 loc_2A33:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002A33                 mov     rax, [rsp+0E8h+s]
.text:0000000000002A38                 lea     r14, [rbp+rbx+0]
.text:0000000000002A3D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002A42                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002A47                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002A4C                 lea     r13, [rax+r14]
.text:0000000000002A50                 sub     rdx, r14
.text:0000000000002A53                 mov     rsi, r13
.text:0000000000002A56                 call    rpl_mbrtowc
.text:0000000000002A5B                 test    rax, rax
.text:0000000000002A5E                 mov     r15, rax
.text:0000000000002A61                 jz      short loc_2AB1
.text:0000000000002A63                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002A67                 jz      loc_3085
.text:0000000000002A6D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002A71                 jz      loc_3011
.text:0000000000002A77                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A7C                 setz    al
.text:0000000000002A7F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002A83                 jnz     loc_2C20
.text:0000000000002A89
.text:0000000000002A89 loc_2A89:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002A89                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002A89                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002A90                 call    _iswprint
.text:0000000000002A95                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002A9A                 test    eax, eax
.text:0000000000002A9C                 mov     eax, 0
.text:0000000000002AA1                 cmovz   r12d, eax
.text:0000000000002AA5                 add     rbx, r15
.text:0000000000002AA8                 call    _mbsinit
.text:0000000000002AAD                 test    eax, eax
.text:0000000000002AAF                 jz      short loc_2A33
.text:0000000000002AB1
.text:0000000000002AB1 loc_2AB1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002AB1                 mov     edx, r12d
.text:0000000000002AB4                 mov     rdi, rbx
.text:0000000000002AB7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002ABD                 xor     edx, 1
.text:0000000000002AC0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002AC5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002ACB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002ACF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002AD7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002ADC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002AE1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002AE6
.text:0000000000002AE6 loc_2AE6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002AE6                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002AE6                 cmp     rdi, 1
.text:0000000000002AEA                 jbe     loc_30EB
.text:0000000000002AF0
.text:0000000000002AF0 loc_2AF0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002AF0                 mov     rcx, rdi
.text:0000000000002AF3                 xor     esi, esi
.text:0000000000002AF5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002AFB                 add     rcx, rbp
.text:0000000000002AFE                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002B03                 jmp     loc_2BBE
.text:0000000000002B03 ; ---------------------------------------------------------------------------
.text:0000000000002B08                 align 10h
.text:0000000000002B10
.text:0000000000002B10 loc_2B10:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002B10                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002B15                 setz    al
.text:0000000000002B18                 test    r9b, r9b
.text:0000000000002B1B                 jnz     loc_2FD0
.text:0000000000002B21                 mov     esi, r8d
.text:0000000000002B24                 xor     esi, 1
.text:0000000000002B27                 and     al, sil
.text:0000000000002B2A                 jz      short loc_2B5B
.text:0000000000002B2C                 cmp     r13, r15
.text:0000000000002B2F                 jbe     short loc_2B36
.text:0000000000002B31                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002B36
.text:0000000000002B36 loc_2B36:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002B36                 lea     rsi, [r15+1]
.text:0000000000002B3A                 cmp     r13, rsi
.text:0000000000002B3D                 jbe     short loc_2B45
.text:0000000000002B3F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002B45
.text:0000000000002B45 loc_2B45:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002B45                 lea     rsi, [r15+2]
.text:0000000000002B49                 cmp     r13, rsi
.text:0000000000002B4C                 jbe     short loc_2B54
.text:0000000000002B4E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002B54
.text:0000000000002B54 loc_2B54:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002B54                 add     r15, 3
.text:0000000000002B58                 mov     r8d, eax
.text:0000000000002B5B
.text:0000000000002B5B loc_2B5B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002B5B                 cmp     r13, r15
.text:0000000000002B5E                 jbe     short loc_2B65
.text:0000000000002B60                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002B65
.text:0000000000002B65 loc_2B65:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002B65                 lea     rax, [r15+1]
.text:0000000000002B69                 cmp     r13, rax
.text:0000000000002B6C                 jbe     short loc_2B7B
.text:0000000000002B6E                 mov     eax, ebx
.text:0000000000002B70                 shr     al, 6
.text:0000000000002B73                 add     eax, 30h ; '0'
.text:0000000000002B76                 mov     [r14+r15+1], al
.text:0000000000002B7B
.text:0000000000002B7B loc_2B7B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002B7B                 lea     rax, [r15+2]
.text:0000000000002B7F                 cmp     r13, rax
.text:0000000000002B82                 jbe     short loc_2B94
.text:0000000000002B84                 mov     eax, ebx
.text:0000000000002B86                 shr     al, 3
.text:0000000000002B89                 and     eax, 7
.text:0000000000002B8C                 add     eax, 30h ; '0'
.text:0000000000002B8F                 mov     [r14+r15+2], al
.text:0000000000002B94
.text:0000000000002B94 loc_2B94:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002B94                 and     ebx, 7
.text:0000000000002B97                 add     rbp, 1
.text:0000000000002B9B                 add     r15, 3
.text:0000000000002B9F                 add     ebx, 30h ; '0'
.text:0000000000002BA2                 cmp     rbp, rcx
.text:0000000000002BA5                 jnb     loc_2390
.text:0000000000002BAB                 mov     esi, edx
.text:0000000000002BAD
.text:0000000000002BAD loc_2BAD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002BAD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002BAD                 cmp     r13, r15
.text:0000000000002BB0                 jbe     short loc_2BB6
.text:0000000000002BB2                 mov     [r14+r15], bl
.text:0000000000002BB6
.text:0000000000002BB6 loc_2BB6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002BB6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002BBA                 add     r15, 1
.text:0000000000002BBE
.text:0000000000002BBE loc_2BBE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002BBE                 test    dl, dl
.text:0000000000002BC0                 jnz     loc_2B10
.text:0000000000002BC6                 mov     eax, esi
.text:0000000000002BC8                 xor     eax, 1
.text:0000000000002BCB                 and     eax, r8d
.text:0000000000002BCE                 test    r10b, r10b
.text:0000000000002BD1                 jz      short loc_2BE1
.text:0000000000002BD3                 cmp     r13, r15
.text:0000000000002BD6                 jbe     short loc_2BDD
.text:0000000000002BD8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002BDD
.text:0000000000002BDD loc_2BDD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002BDD                 add     r15, 1
.text:0000000000002BE1
.text:0000000000002BE1 loc_2BE1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002BE1                 add     rbp, 1
.text:0000000000002BE5                 cmp     rbp, rcx
.text:0000000000002BE8                 jnb     loc_236C
.text:0000000000002BEE                 test    al, al
.text:0000000000002BF0                 jz      loc_2FEE
.text:0000000000002BF6                 cmp     r13, r15
.text:0000000000002BF9                 jbe     short loc_2C00
.text:0000000000002BFB                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002C00
.text:0000000000002C00 loc_2C00:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002C00                 lea     rax, [r15+1]
.text:0000000000002C04                 cmp     r13, rax
.text:0000000000002C07                 jbe     short loc_2C0F
.text:0000000000002C09                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002C0F
.text:0000000000002C0F loc_2C0F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002C0F                 add     r15, 2
.text:0000000000002C13                 xor     r10d, r10d
.text:0000000000002C16                 xor     r8d, r8d
.text:0000000000002C19                 jmp     short loc_2BAD
.text:0000000000002C19 ; ---------------------------------------------------------------------------
.text:0000000000002C1B                 align 20h
.text:0000000000002C20
.text:0000000000002C20 loc_2C20:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002C20                 cmp     r15, 1
.text:0000000000002C24                 jz      loc_2A89
.text:0000000000002C2A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002C2F                 lea     rcx, [rdi+r15]
.text:0000000000002C33                 lea     rdx, [rdi+r14+1]
.text:0000000000002C38                 lea     r8, [rcx+r14]
.text:0000000000002C3C                 jmp     short loc_2C4D
.text:0000000000002C3C ; ---------------------------------------------------------------------------
.text:0000000000002C3E                 align 20h
.text:0000000000002C40
.text:0000000000002C40 loc_2C40:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002C40                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002C40                 add     rdx, 1
.text:0000000000002C44                 cmp     r8, rdx
.text:0000000000002C47                 jz      loc_2A89
.text:0000000000002C4D
.text:0000000000002C4D loc_2C4D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002C4D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002C50                 sub     ecx, 5Bh ; '['
.text:0000000000002C53                 cmp     cl, 21h ; '!'
.text:0000000000002C56                 ja      short loc_2C40
.text:0000000000002C58                 mov     esi, 1
.text:0000000000002C5D                 shl     rsi, cl
.text:0000000000002C60                 mov     rcx, rsi
.text:0000000000002C63                 mov     rsi, 20000002Bh
.text:0000000000002C6D                 test    rcx, rsi
.text:0000000000002C70                 jz      short loc_2C40
.text:0000000000002C72                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002C77                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002C7C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002C81                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002C89
.text:0000000000002C89 loc_2C89:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002C89                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002C89                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002C8E                 jz      short loc_2CA0
.text:0000000000002C90                 test    al, al
.text:0000000000002C92                 mov     eax, 4
.text:0000000000002C97                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002C9C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002CA0
.text:0000000000002CA0 loc_2CA0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002CA0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002CA0                 sub     rsp, 8
.text:0000000000002CA4                 mov     rcx, rbp
.text:0000000000002CA7                 mov     rsi, r13
.text:0000000000002CAA                 push    [rsp+0F0h+var_88]
.text:0000000000002CAE                 push    [rsp+0F8h+var_80]
.text:0000000000002CB2                 mov     rdi, r14
.text:0000000000002CB5                 push    0
.text:0000000000002CB7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002CBF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002CC4                 mov     rdx, [rsp+108h+s]
.text:0000000000002CC9                 and     r9d, 0FFFFFFFDh
.text:0000000000002CCD                 call    quotearg_buffer_restyled
.text:0000000000002CD2                 add     rsp, 20h
.text:0000000000002CD6                 mov     r15, rax
.text:0000000000002CD9
.text:0000000000002CD9 loc_2CD9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002CD9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002CD9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002CE1                 xor     rbx, fs:28h
.text:0000000000002CEA                 mov     rax, r15
.text:0000000000002CED                 jnz     loc_32F3
.text:0000000000002CF3                 add     rsp, 0B8h
.text:0000000000002CFA                 pop     rbx
.text:0000000000002CFB                 pop     rbp
.text:0000000000002CFC                 pop     r12
.text:0000000000002CFE                 pop     r13
.text:0000000000002D00                 pop     r14
.text:0000000000002D02                 pop     r15
.text:0000000000002D04                 retn
.text:0000000000002D04 ; ---------------------------------------------------------------------------
.text:0000000000002D05                 align 8
.text:0000000000002D08
.text:0000000000002D08 loc_2D08:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002D08                 mov     rbp, r11
.text:0000000000002D0B                 jmp     loc_2C89
.text:0000000000002D10 ; ---------------------------------------------------------------------------
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002D10                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002D10                 cmp     r13, r15
.text:0000000000002D13                 jbe     short loc_2D1A
.text:0000000000002D15                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002D1A
.text:0000000000002D1A loc_2D1A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002D1A                 lea     rax, [r15+1]
.text:0000000000002D1E                 cmp     r13, rax
.text:0000000000002D21                 jbe     short loc_2D29
.text:0000000000002D23                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002D29
.text:0000000000002D29 loc_2D29:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002D29                 lea     rax, [r15+2]
.text:0000000000002D2D                 cmp     r13, rax
.text:0000000000002D30                 jbe     loc_3322
.text:0000000000002D36                 mov     rdx, r13
.text:0000000000002D39                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002D3F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002D44                 jmp     loc_2922
.text:0000000000002D49 ; ---------------------------------------------------------------------------
.text:0000000000002D49
.text:0000000000002D49 loc_2D49:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002D49                 mov     eax, r12d
.text:0000000000002D4C                 mov     ebx, 30h ; '0'
.text:0000000000002D51                 xor     r12d, r12d
.text:0000000000002D54                 jmp     loc_2359
.text:0000000000002D59 ; ---------------------------------------------------------------------------
.text:0000000000002D59
.text:0000000000002D59 loc_2D59:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002D59                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002D5F                 jmp     loc_2729
.text:0000000000002D64 ; ---------------------------------------------------------------------------
.text:0000000000002D64
.text:0000000000002D64 loc_2D64:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D64                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000002D64                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002D66                 jnz     loc_2193        ; jumptable 00000000000121F1 case 1
.text:0000000000002D6C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D71
.text:0000000000002D71 loc_2D71:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002D71                 test    r13, r13
.text:0000000000002D74                 jnz     loc_330A
.text:0000000000002D7A                 lea     rax, asc_54ED   ; "'"
.text:0000000000002D81                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D8A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002D8F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D94                 xor     r12d, r12d
.text:0000000000002D97                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D9C                 mov     [rsp+0E8h+n], 1
.text:0000000000002DA5                 mov     [rsp+0E8h+s2], rax
.text:0000000000002DAA                 mov     r15d, 1
.text:0000000000002DB0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002DB8                 jmp     loc_21D3
.text:0000000000002DB8 ; ---------------------------------------------------------------------------
.text:0000000000002DBD                 align 20h
.text:0000000000002DC0
.text:0000000000002DC0 loc_2DC0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002DC0                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000002DC0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002DC2                 jnz     loc_31BD
.text:0000000000002DC8                 test    r13, r13
.text:0000000000002DCB                 jz      loc_2FF6
.text:0000000000002DD1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002DD5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002DDA                 xor     r12d, r12d
.text:0000000000002DDD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DE2                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DEB
.text:0000000000002DEB loc_2DEB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002DEB                 lea     rax, unk_54EB
.text:0000000000002DF2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002DF7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002DFC                 mov     [rsp+0E8h+n], 1
.text:0000000000002E05                 mov     r15d, 1
.text:0000000000002E0B                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E10                 jmp     loc_21D3
.text:0000000000002E15 ; ---------------------------------------------------------------------------
.text:0000000000002E15
.text:0000000000002E15 loc_2E15:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E15                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000002E15                 lea     rax, unk_54EB   ; jumptable 00000000000121F1 case 6
.text:0000000000002E1C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002E21                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E26                 xor     r12d, r12d
.text:0000000000002E29                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E32                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002E37                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E3C                 mov     [rsp+0E8h+n], 1
.text:0000000000002E45                 xor     r15d, r15d
.text:0000000000002E48                 mov     [rsp+0E8h+s2], rax
.text:0000000000002E4D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002E55                 jmp     loc_21D3
.text:0000000000002E5A ; ---------------------------------------------------------------------------
.text:0000000000002E5A
.text:0000000000002E5A loc_2E5A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E5A                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000002E5A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002E5F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002E64                 xor     r12d, r12d
.text:0000000000002E67                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002E70                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002E75                 xor     r15d, r15d
.text:0000000000002E78                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002E7D                 mov     [rsp+0E8h+n], 0
.text:0000000000002E86                 mov     [rsp+0E8h+s2], 0
.text:0000000000002E8F                 jmp     loc_21D3
.text:0000000000002E94 ; ---------------------------------------------------------------------------
.text:0000000000002E94
.text:0000000000002E94 loc_2E94:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002E94                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000002E94                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002E99                 jz      short loc_2EF1
.text:0000000000002E9B                 lea     rsi, asc_54EF   ; "`"
.text:0000000000002EA2                 xor     edi, edi        ; domainname
.text:0000000000002EA4                 mov     edx, 5          ; category
.text:0000000000002EA9                 call    _dcgettext
.text:0000000000002EAE                 mov     rcx, rax
.text:0000000000002EB1                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002EB6                 lea     rax, asc_54EF   ; "`"
.text:0000000000002EBD                 cmp     rcx, rax
.text:0000000000002EC0                 jz      loc_325E
.text:0000000000002EC6
.text:0000000000002EC6 loc_2EC6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002EC6                 lea     rsi, asc_54ED   ; "'"
.text:0000000000002ECD                 xor     edi, edi        ; domainname
.text:0000000000002ECF                 mov     edx, 5          ; category
.text:0000000000002ED4                 call    _dcgettext
.text:0000000000002ED9                 mov     rcx, rax
.text:0000000000002EDC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002EE1                 lea     rax, asc_54ED   ; "'"
.text:0000000000002EE8                 cmp     rcx, rax
.text:0000000000002EEB                 jz      loc_3274
.text:0000000000002EF1
.text:0000000000002EF1 loc_2EF1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002EF1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002EF1                 xor     r15d, r15d
.text:0000000000002EF4                 test    ebx, ebx
.text:0000000000002EF6                 jz      loc_30BD
.text:0000000000002EFC
.text:0000000000002EFC loc_2EFC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002EFC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002EFC                 test    ebx, ebx
.text:0000000000002EFE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002F03                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002F08                 xor     r12d, r12d
.text:0000000000002F0B                 mov     rdi, rbx        ; s
.text:0000000000002F0E                 call    _strlen
.text:0000000000002F13                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002F18                 mov     [rsp+0E8h+n], rax
.text:0000000000002F1D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F22                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F27                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F30                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F35                 jmp     loc_21D3
.text:0000000000002F3A ; ---------------------------------------------------------------------------
.text:0000000000002F3A
.text:0000000000002F3A loc_2F3A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F3A                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000002F3A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002F3F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F44                 xor     r12d, r12d
.text:0000000000002F47                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F50                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002F55                 xor     r15d, r15d
.text:0000000000002F58                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F5D                 mov     [rsp+0E8h+n], 0
.text:0000000000002F66                 mov     [rsp+0E8h+s2], 0
.text:0000000000002F6F                 jmp     loc_21D3
.text:0000000000002F74 ; ---------------------------------------------------------------------------
.text:0000000000002F74
.text:0000000000002F74 loc_2F74:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F74                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000002F74                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002F79                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F7E                 xor     r12d, r12d
.text:0000000000002F81                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F8A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F8F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F94                 jmp     loc_21B3
.text:0000000000002F99 ; ---------------------------------------------------------------------------
.text:0000000000002F99
.text:0000000000002F99 loc_2F99:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002F99                 cmp     r13, r15
.text:0000000000002F9C                 jbe     short loc_2FA3
.text:0000000000002F9E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002FA3
.text:0000000000002FA3 loc_2FA3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002FA3                 lea     rax, [rcx+2]
.text:0000000000002FA7                 cmp     r13, rax
.text:0000000000002FAA                 jbe     short loc_2FB2
.text:0000000000002FAC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002FB2
.text:0000000000002FB2 loc_2FB2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002FB2                 mov     eax, r12d
.text:0000000000002FB5                 lea     r15, [rcx+3]
.text:0000000000002FB9                 xor     r12d, r12d
.text:0000000000002FBC                 mov     ebx, 30h ; '0'
.text:0000000000002FC1                 jmp     loc_2328
.text:0000000000002FC1 ; ---------------------------------------------------------------------------
.text:0000000000002FC6                 align 10h
.text:0000000000002FD0
.text:0000000000002FD0 loc_2FD0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002FD0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002FD5                 mov     rbp, r11
.text:0000000000002FD8                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002FDC                 jmp     loc_2C89
.text:0000000000002FE1 ; ---------------------------------------------------------------------------
.text:0000000000002FE1
.text:0000000000002FE1 loc_2FE1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002FE1                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002FE6                 xor     r12d, r12d
.text:0000000000002FE9                 jmp     loc_2AF0
.text:0000000000002FEE ; ---------------------------------------------------------------------------
.text:0000000000002FEE
.text:0000000000002FEE loc_2FEE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002FEE                 xor     r10d, r10d
.text:0000000000002FF1                 jmp     loc_2BAD
.text:0000000000002FF6 ; ---------------------------------------------------------------------------
.text:0000000000002FF6
.text:0000000000002FF6 loc_2FF6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002FF6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FFF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003004                 xor     r12d, r12d
.text:0000000000003007                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000300C                 jmp     loc_2DEB
.text:0000000000003011 ; ---------------------------------------------------------------------------
.text:0000000000003011
.text:0000000000003011 loc_3011:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003011                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003016                 mov     rsi, r14
.text:0000000000003019                 mov     rcx, r13
.text:000000000000301C                 mov     rax, rbx
.text:000000000000301F                 mov     rdi, rbx
.text:0000000000003022                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003028                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000302D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003035                 cmp     rsi, r11
.text:0000000000003038                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000303E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003046                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000304B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003050                 jnb     short loc_3078
.text:0000000000003052                 cmp     byte ptr [rcx], 0
.text:0000000000003055                 jnz     short loc_3067
.text:0000000000003057                 jmp     short loc_3078
.text:0000000000003057 ; ---------------------------------------------------------------------------
.text:0000000000003059                 align 20h
.text:0000000000003060
.text:0000000000003060 loc_3060:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003060                 cmp     byte ptr [r9+rax], 0
.text:0000000000003065                 jz      short loc_3075
.text:0000000000003067
.text:0000000000003067 loc_3067:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003067                 add     rax, 1
.text:000000000000306B                 lea     rdx, [rbp+rax+0]
.text:0000000000003070                 cmp     r11, rdx
.text:0000000000003073                 ja      short loc_3060
.text:0000000000003075
.text:0000000000003075 loc_3075:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003075                 mov     rdi, rax
.text:0000000000003078
.text:0000000000003078 loc_3078:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003078                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003078                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000307D                 xor     r12d, r12d
.text:0000000000003080                 jmp     loc_2AE6
.text:0000000000003085 ; ---------------------------------------------------------------------------
.text:0000000000003085
.text:0000000000003085 loc_3085:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000003085                 mov     rdi, rbx
.text:0000000000003088                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000308E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000003093                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000003099                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000030A1                 xor     r12d, r12d
.text:00000000000030A4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000030A9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000030AE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000030B3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000030B8                 jmp     loc_2AE6
.text:00000000000030BD ; ---------------------------------------------------------------------------
.text:00000000000030BD
.text:00000000000030BD loc_30BD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000030BD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000030C2                 movzx   eax, byte ptr [rdx]
.text:00000000000030C5                 test    al, al
.text:00000000000030C7                 jz      loc_2EFC
.text:00000000000030CD                 nop     dword ptr [rax]
.text:00000000000030D0
.text:00000000000030D0 loc_30D0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000030D0                 cmp     r13, r15
.text:00000000000030D3                 jbe     short loc_30D9
.text:00000000000030D5                 mov     [r14+r15], al
.text:00000000000030D9
.text:00000000000030D9 loc_30D9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000030D9                 add     r15, 1
.text:00000000000030DD                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000030E2                 test    al, al
.text:00000000000030E4                 jnz     short loc_30D0
.text:00000000000030E6                 jmp     loc_2EFC
.text:00000000000030EB ; ---------------------------------------------------------------------------
.text:00000000000030EB
.text:00000000000030EB loc_30EB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000030EB                 mov     eax, edx
.text:00000000000030ED                 jmp     loc_2647
.text:00000000000030F2 ; ---------------------------------------------------------------------------
.text:00000000000030F2
.text:00000000000030F2 loc_30F2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:00000000000030F2                 movzx   ebx, byte ptr [rax+rcx]
.text:00000000000030F6                 cmp     bl, 3Eh ; '>'
.text:00000000000030F9                 ja      loc_2970
.text:00000000000030FF                 mov     rax, 7000A38200000000h
.text:0000000000003109                 bt      rax, rbx
.text:000000000000310D                 jnb     loc_2970
.text:0000000000003113                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003118                 jnz     loc_3302
.text:000000000000311E                 cmp     r13, r15
.text:0000000000003121                 jbe     short loc_3128
.text:0000000000003123                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003128
.text:0000000000003128 loc_3128:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003128                 lea     rax, [r15+1]
.text:000000000000312C                 cmp     r13, rax
.text:000000000000312F                 jbe     short loc_3137
.text:0000000000003131                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003137
.text:0000000000003137 loc_3137:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003137                 lea     rax, [r15+2]
.text:000000000000313B                 cmp     r13, rax
.text:000000000000313E                 jbe     short loc_3146
.text:0000000000003140                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003146
.text:0000000000003146 loc_3146:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003146                 lea     rax, [r15+3]
.text:000000000000314A                 cmp     r13, rax
.text:000000000000314D                 jbe     short loc_3155
.text:000000000000314F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003155
.text:0000000000003155 loc_3155:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003155                 add     r15, 4
.text:0000000000003159                 xor     edx, edx
.text:000000000000315B                 xor     r12d, r12d
.text:000000000000315E                 xor     eax, eax
.text:0000000000003160                 mov     rbp, rcx
.text:0000000000003163                 jmp     loc_2328
.text:0000000000003168 ; ---------------------------------------------------------------------------
.text:0000000000003168
.text:0000000000003168 loc_3168:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003168                                         ; DATA XREF: .rodata:jpt_2191↓o
.text:0000000000003168                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000316A                 jz      loc_32F8
.text:0000000000003170                 lea     rax, asc_54ED   ; "'"
.text:0000000000003177                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000317C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003181                 xor     r12d, r12d
.text:0000000000003184                 mov     [rsp+0E8h+var_98], 0
.text:000000000000318D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003192                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000003197                 mov     [rsp+0E8h+n], 1
.text:00000000000031A0                 xor     r15d, r15d
.text:00000000000031A3                 mov     [rsp+0E8h+s2], rax
.text:00000000000031A8                 jmp     loc_21D3
.text:00000000000031A8 ; ---------------------------------------------------------------------------
.text:00000000000031AD                 align 10h
.text:00000000000031B0
.text:00000000000031B0 loc_31B0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000031B0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000031B0                 mov     rbp, r11
.text:00000000000031B3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000031B8                 jmp     loc_2C89
.text:00000000000031BD ; ---------------------------------------------------------------------------
.text:00000000000031BD
.text:00000000000031BD loc_31BD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000031BD                 lea     rax, unk_54EB
.text:00000000000031C4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000031C9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000031CE                 xor     r12d, r12d
.text:00000000000031D1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031DA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000031DF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000031E4                 mov     [rsp+0E8h+n], 1
.text:00000000000031ED                 xor     r15d, r15d
.text:00000000000031F0                 mov     [rsp+0E8h+s2], rax
.text:00000000000031F5                 jmp     loc_21D3
.text:00000000000031FA ; ---------------------------------------------------------------------------
.text:00000000000031FA
.text:00000000000031FA loc_31FA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:00000000000031FA                 mov     eax, edx
.text:00000000000031FC
.text:00000000000031FC loc_31FC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:00000000000031FC                                         ; quotearg_buffer_restyled+11E1↓j
.text:00000000000031FC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003201                 test    rbx, rbx
.text:0000000000003204                 jz      short loc_3232
.text:0000000000003206                 test    al, al
.text:0000000000003208                 jz      short loc_3232
.text:000000000000320A                 movzx   ecx, byte ptr [rbx]
.text:000000000000320D                 mov     rax, rbx
.text:0000000000003210                 test    cl, cl
.text:0000000000003212                 jz      short loc_3232
.text:0000000000003214                 mov     rdx, r15
.text:0000000000003217                 sub     rax, r15
.text:000000000000321A
.text:000000000000321A loc_321A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000321A                 cmp     r13, rdx
.text:000000000000321D                 jbe     short loc_3223
.text:000000000000321F                 mov     [r14+rdx], cl
.text:0000000000003223
.text:0000000000003223 loc_3223:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003223                 add     rdx, 1
.text:0000000000003227                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000322B                 test    cl, cl
.text:000000000000322D                 jnz     short loc_321A
.text:000000000000322F                 mov     r15, rdx
.text:0000000000003232
.text:0000000000003232 loc_3232:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003232                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003232                 cmp     r13, r15
.text:0000000000003235                 jbe     loc_2CD9
.text:000000000000323B                 mov     byte ptr [r14+r15], 0
.text:0000000000003240                 jmp     loc_2CD9
.text:0000000000003245 ; ---------------------------------------------------------------------------
.text:0000000000003245
.text:0000000000003245 loc_3245:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003245                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000324A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000324F                 mov     rbp, r11
.text:0000000000003252                 setz    al
.text:0000000000003255                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003259                 jmp     loc_2C89
.text:000000000000325E ; ---------------------------------------------------------------------------
.text:000000000000325E
.text:000000000000325E loc_325E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000325E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003262                 mov     rdi, rcx
.text:0000000000003265                 call    gettext_quote
.text:000000000000326A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000326F                 jmp     loc_2EC6
.text:0000000000003274 ; ---------------------------------------------------------------------------
.text:0000000000003274
.text:0000000000003274 loc_3274:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003274                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003278                 mov     rdi, rcx
.text:000000000000327B                 call    gettext_quote
.text:0000000000003280                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003285                 jmp     loc_2EF1
.text:000000000000328A ; ---------------------------------------------------------------------------
.text:000000000000328A
.text:000000000000328A loc_328A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000328A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000328F                 mov     rbp, r11
.text:0000000000003292                 mov     eax, edx
.text:0000000000003294                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003298                 jmp     loc_2C89
.text:000000000000329D ; ---------------------------------------------------------------------------
.text:000000000000329D
.text:000000000000329D loc_329D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000329D                 sub     rsp, 8
.text:00000000000032A1                 mov     r8d, 5
.text:00000000000032A7                 mov     rcx, r11
.text:00000000000032AA                 push    [rsp+0F0h+var_88]
.text:00000000000032AE                 push    [rsp+0F8h+var_80]
.text:00000000000032B2                 mov     rdi, r14
.text:00000000000032B5                 push    [rsp+100h+var_C8]
.text:00000000000032B9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000032C1                 mov     rdx, [rsp+108h+s]
.text:00000000000032C6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000032CB                 call    quotearg_buffer_restyled
.text:00000000000032D0                 add     rsp, 20h
.text:00000000000032D4                 mov     r15, rax
.text:00000000000032D7                 jmp     loc_2CD9
.text:00000000000032DC ; ---------------------------------------------------------------------------
.text:00000000000032DC
.text:00000000000032DC loc_32DC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000032DC                 movzx   eax, [rsp+0E8h+var_6C]
.text:00000000000032E1                 jmp     loc_31FC
.text:00000000000032E6 ; ---------------------------------------------------------------------------
.text:00000000000032E6
.text:00000000000032E6 loc_32E6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:00000000000032E6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000032EE                 jmp     loc_2C89
.text:00000000000032F3 ; ---------------------------------------------------------------------------
.text:00000000000032F3
.text:00000000000032F3 loc_32F3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000032F3                 call    ___stack_chk_fail
.text:00000000000032F8 ; ---------------------------------------------------------------------------
.text:00000000000032F8
.text:00000000000032F8 loc_32F8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000032F8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000032FD                 jmp     loc_2D71
.text:0000000000003302 ; ---------------------------------------------------------------------------
.text:0000000000003302
.text:0000000000003302 loc_3302:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003302                 mov     rbp, r11
.text:0000000000003305                 jmp     loc_2CA0
.text:000000000000330A ; ---------------------------------------------------------------------------
.text:000000000000330A
.text:000000000000330A loc_330A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000330A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000330F                 xor     eax, eax
.text:0000000000003311                 xor     r12d, r12d
.text:0000000000003314                 mov     [rsp+0E8h+var_98], 0
.text:000000000000331D                 jmp     loc_28C4
.text:0000000000003322 ; ---------------------------------------------------------------------------
.text:0000000000003322
.text:0000000000003322 loc_3322:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003322                 mov     rdx, r13
.text:0000000000003325                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000332A                 jmp     loc_2922
.text:000000000000332F ; ---------------------------------------------------------------------------
.text:000000000000332F
.text:000000000000332F def_2191:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000332F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000332F ; } // starts at 2100
.text:000000000000332F quotearg_buffer_restyled endp
.text:000000000000332F
.text:000000000000332F ; ---------------------------------------------------------------------------
.text:0000000000003334                 align 20h
.text:0000000000003340
.text:0000000000003340 ; =============== S U B R O U T I N E =======================================
.text:0000000000003340
.text:0000000000003340
.text:0000000000003340 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003340                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003340
.text:0000000000003340 var_50          = qword ptr -50h
.text:0000000000003340 var_48          = qword ptr -48h
.text:0000000000003340 var_40          = dword ptr -40h
.text:0000000000003340 var_3C          = dword ptr -3Ch
.text:0000000000003340
.text:0000000000003340 ; __unwind {
.text:0000000000003340                 push    r15
.text:0000000000003342                 push    r14
.text:0000000000003344                 movsxd  r15, edi
.text:0000000000003347                 push    r13
.text:0000000000003349                 push    r12
.text:000000000000334B                 mov     r14, rdx
.text:000000000000334E                 push    rbp
.text:000000000000334F                 push    rbx
.text:0000000000003350                 mov     rbp, rcx
.text:0000000000003353                 sub     rsp, 28h
.text:0000000000003357                 mov     [rsp+58h+var_50], rsi
.text:000000000000335C                 call    ___errno_location
.text:0000000000003361                 mov     r13, rax
.text:0000000000003364                 mov     eax, [rax]
.text:0000000000003366                 test    r15d, r15d
.text:0000000000003369                 mov     rbx, cs:slotvec
.text:0000000000003370                 mov     [rsp+58h+var_40], eax
.text:0000000000003374                 js      loc_34E1
.text:000000000000337A                 cmp     cs:nslots, r15d
.text:0000000000003381                 jg      short loc_33E5
.text:0000000000003383                 cmp     r15d, 7FFFFFFFh
.text:000000000000338A                 jz      loc_34E6
.text:0000000000003390                 lea     r12d, [r15+1]
.text:0000000000003394                 lea     rax, slotvec0
.text:000000000000339B                 movsxd  rsi, r12d
.text:000000000000339E                 shl     rsi, 4
.text:00000000000033A2                 cmp     rbx, rax
.text:00000000000033A5                 jz      loc_34C0
.text:00000000000033AB                 mov     rdi, rbx
.text:00000000000033AE                 call    xrealloc
.text:00000000000033B3                 mov     rbx, rax
.text:00000000000033B6                 mov     cs:slotvec, rax
.text:00000000000033BD
.text:00000000000033BD loc_33BD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000033BD                 movsxd  rdi, cs:nslots
.text:00000000000033C4                 mov     edx, r12d
.text:00000000000033C7                 xor     esi, esi        ; c
.text:00000000000033C9                 sub     edx, edi
.text:00000000000033CB                 shl     rdi, 4
.text:00000000000033CF                 movsxd  rdx, edx
.text:00000000000033D2                 add     rdi, rbx        ; s
.text:00000000000033D5                 shl     rdx, 4          ; n
.text:00000000000033D9                 call    _memset
.text:00000000000033DE                 mov     cs:nslots, r12d
.text:00000000000033E5
.text:00000000000033E5 loc_33E5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:00000000000033E5                 mov     eax, [rbp+4]
.text:00000000000033E8                 shl     r15, 4
.text:00000000000033EC                 sub     rsp, 8
.text:00000000000033F0                 add     rbx, r15
.text:00000000000033F3                 lea     r15, [rbp+8]
.text:00000000000033F7                 mov     r8d, [rbp+0]
.text:00000000000033FB                 mov     r11, [rbx]
.text:00000000000033FE                 mov     r12, [rbx+8]
.text:0000000000003402                 mov     rcx, r14
.text:0000000000003405                 or      eax, 1
.text:0000000000003408                 mov     [rsp+60h+var_3C], eax
.text:000000000000340C                 push    qword ptr [rbp+30h]
.text:000000000000340F                 mov     r9d, eax
.text:0000000000003412                 push    qword ptr [rbp+28h]
.text:0000000000003415                 push    r15
.text:0000000000003417                 mov     rsi, r11
.text:000000000000341A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000341F                 mov     rdi, r12
.text:0000000000003422                 mov     [rsp+78h+var_48], r11
.text:0000000000003427                 call    quotearg_buffer_restyled
.text:000000000000342C                 add     rsp, 20h
.text:0000000000003430                 mov     r11, [rsp+58h+var_48]
.text:0000000000003435                 cmp     r11, rax
.text:0000000000003438                 ja      short loc_34A1
.text:000000000000343A                 lea     rsi, [rax+1]
.text:000000000000343E                 lea     rax, slot0
.text:0000000000003445                 cmp     r12, rax
.text:0000000000003448                 mov     [rbx], rsi
.text:000000000000344B                 jz      short loc_345F
.text:000000000000344D                 mov     rdi, r12        ; ptr
.text:0000000000003450                 mov     [rsp+58h+var_48], rsi
.text:0000000000003455                 call    _free
.text:000000000000345A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000345F
.text:000000000000345F loc_345F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000345F                 mov     rdi, rsi
.text:0000000000003462                 mov     [rsp+58h+var_48], rsi
.text:0000000000003467                 call    xmalloc
.text:000000000000346C                 sub     rsp, 8
.text:0000000000003470                 mov     [rbx+8], rax
.text:0000000000003474                 mov     r8d, [rbp+0]
.text:0000000000003478                 push    qword ptr [rbp+30h]
.text:000000000000347B                 push    qword ptr [rbp+28h]
.text:000000000000347E                 mov     rcx, r14
.text:0000000000003481                 push    r15
.text:0000000000003483                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003488                 mov     rdi, rax
.text:000000000000348B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003490                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003495                 mov     r12, rax
.text:0000000000003498                 call    quotearg_buffer_restyled
.text:000000000000349D                 add     rsp, 20h
.text:00000000000034A1
.text:00000000000034A1 loc_34A1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000034A1                 mov     eax, [rsp+58h+var_40]
.text:00000000000034A5                 mov     [r13+0], eax
.text:00000000000034A9                 add     rsp, 28h
.text:00000000000034AD                 mov     rax, r12
.text:00000000000034B0                 pop     rbx
.text:00000000000034B1                 pop     rbp
.text:00000000000034B2                 pop     r12
.text:00000000000034B4                 pop     r13
.text:00000000000034B6                 pop     r14
.text:00000000000034B8                 pop     r15
.text:00000000000034BA                 retn
.text:00000000000034BA ; ---------------------------------------------------------------------------
.text:00000000000034BB                 align 20h
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000034C0                 xor     edi, edi
.text:00000000000034C2                 call    xrealloc
.text:00000000000034C7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000034CF                 mov     rbx, rax
.text:00000000000034D2                 mov     cs:slotvec, rax
.text:00000000000034D9                 movups  xmmword ptr [rax], xmm0
.text:00000000000034DC                 jmp     loc_33BD
.text:00000000000034E1 ; ---------------------------------------------------------------------------
.text:00000000000034E1
.text:00000000000034E1 loc_34E1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:00000000000034E1                 call    _abort
.text:00000000000034E6 ; ---------------------------------------------------------------------------
.text:00000000000034E6
.text:00000000000034E6 loc_34E6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:00000000000034E6                 call    xalloc_die
.text:00000000000034E6 ; } // starts at 3340
.text:00000000000034E6 quotearg_n_options endp
.text:00000000000034E6
.text:00000000000034E6 ; ---------------------------------------------------------------------------
.text:00000000000034EB                 align 10h
.text:00000000000034F0
.text:00000000000034F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000034F0
.text:00000000000034F0 ; Attributes: info_from_lumina
.text:00000000000034F0
.text:00000000000034F0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000034F0                 public clone_quoting_options
.text:00000000000034F0 clone_quoting_options proc near
.text:00000000000034F0 ; __unwind {
.text:00000000000034F0                 push    r12
.text:00000000000034F2                 push    rbp
.text:00000000000034F3                 push    rbx
.text:00000000000034F4                 mov     rbx, rdi
.text:00000000000034F7                 call    ___errno_location
.text:00000000000034FC                 mov     r12d, [rax]
.text:00000000000034FF                 mov     rbp, rax
.text:0000000000003502                 lea     rax, default_quoting_options
.text:0000000000003509                 test    rbx, rbx
.text:000000000000350C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003511                 cmovz   rbx, rax
.text:0000000000003515                 mov     rdi, rbx        ; src
.text:0000000000003518                 call    xmemdup
.text:000000000000351D                 mov     [rbp+0], r12d
.text:0000000000003521                 pop     rbx
.text:0000000000003522                 pop     rbp
.text:0000000000003523                 pop     r12
.text:0000000000003525                 retn
.text:0000000000003525 ; } // starts at 34F0
.text:0000000000003525 clone_quoting_options endp
.text:0000000000003525
.text:0000000000003525 ; ---------------------------------------------------------------------------
.text:0000000000003526                 align 10h
.text:0000000000003530
.text:0000000000003530 ; =============== S U B R O U T I N E =======================================
.text:0000000000003530
.text:0000000000003530
.text:0000000000003530                 public get_quoting_style
.text:0000000000003530 get_quoting_style proc near
.text:0000000000003530 ; __unwind {
.text:0000000000003530                 lea     rax, default_quoting_options
.text:0000000000003537                 test    rdi, rdi
.text:000000000000353A                 cmovz   rdi, rax
.text:000000000000353E                 mov     eax, [rdi]
.text:0000000000003540                 retn
.text:0000000000003540 ; } // starts at 3530
.text:0000000000003540 get_quoting_style endp
.text:0000000000003540
.text:0000000000003540 ; ---------------------------------------------------------------------------
.text:0000000000003541                 align 10h
.text:0000000000003550
.text:0000000000003550 ; =============== S U B R O U T I N E =======================================
.text:0000000000003550
.text:0000000000003550
.text:0000000000003550                 public set_quoting_style
.text:0000000000003550 set_quoting_style proc near
.text:0000000000003550 ; __unwind {
.text:0000000000003550                 lea     rax, default_quoting_options
.text:0000000000003557                 test    rdi, rdi
.text:000000000000355A                 cmovz   rdi, rax
.text:000000000000355E                 mov     [rdi], esi
.text:0000000000003560                 retn
.text:0000000000003560 ; } // starts at 3550
.text:0000000000003560 set_quoting_style endp
.text:0000000000003560
.text:0000000000003560 ; ---------------------------------------------------------------------------
.text:0000000000003561                 align 10h
.text:0000000000003570
.text:0000000000003570 ; =============== S U B R O U T I N E =======================================
.text:0000000000003570
.text:0000000000003570 ; Attributes: info_from_lumina
.text:0000000000003570
.text:0000000000003570 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003570                 public set_char_quoting
.text:0000000000003570 set_char_quoting proc near
.text:0000000000003570 ; __unwind {
.text:0000000000003570                 lea     rax, default_quoting_options
.text:0000000000003577                 test    rdi, rdi
.text:000000000000357A                 mov     ecx, esi
.text:000000000000357C                 cmovz   rdi, rax
.text:0000000000003580                 mov     eax, esi
.text:0000000000003582                 and     ecx, 1Fh
.text:0000000000003585                 shr     al, 5
.text:0000000000003588                 movzx   eax, al
.text:000000000000358B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003590                 mov     esi, [rdi]
.text:0000000000003592                 mov     eax, esi
.text:0000000000003594                 shr     eax, cl
.text:0000000000003596                 xor     edx, eax
.text:0000000000003598                 and     eax, 1
.text:000000000000359B                 and     edx, 1
.text:000000000000359E                 shl     edx, cl
.text:00000000000035A0                 xor     edx, esi
.text:00000000000035A2                 mov     [rdi], edx
.text:00000000000035A4                 retn
.text:00000000000035A4 ; } // starts at 3570
.text:00000000000035A4 set_char_quoting endp
.text:00000000000035A4
.text:00000000000035A4 ; ---------------------------------------------------------------------------
.text:00000000000035A5                 align 10h
.text:00000000000035B0
.text:00000000000035B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035B0
.text:00000000000035B0
.text:00000000000035B0                 public set_quoting_flags
.text:00000000000035B0 set_quoting_flags proc near
.text:00000000000035B0 ; __unwind {
.text:00000000000035B0                 lea     rax, default_quoting_options
.text:00000000000035B7                 test    rdi, rdi
.text:00000000000035BA                 cmovz   rdi, rax
.text:00000000000035BE                 mov     eax, [rdi+4]
.text:00000000000035C1                 mov     [rdi+4], esi
.text:00000000000035C4                 retn
.text:00000000000035C4 ; } // starts at 35B0
.text:00000000000035C4 set_quoting_flags endp
.text:00000000000035C4
.text:00000000000035C4 ; ---------------------------------------------------------------------------
.text:00000000000035C5                 align 10h
.text:00000000000035D0
.text:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035D0
.text:00000000000035D0 ; Attributes: info_from_lumina
.text:00000000000035D0
.text:00000000000035D0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000035D0                 public set_custom_quoting
.text:00000000000035D0 set_custom_quoting proc near
.text:00000000000035D0 ; __unwind {
.text:00000000000035D0                 lea     rax, default_quoting_options
.text:00000000000035D7                 test    rdi, rdi
.text:00000000000035DA                 cmovz   rdi, rax
.text:00000000000035DE                 test    rsi, rsi
.text:00000000000035E1                 mov     dword ptr [rdi], 0Ah
.text:00000000000035E7                 jz      short loc_35F7
.text:00000000000035E9                 test    rdx, rdx
.text:00000000000035EC                 jz      short loc_35F7
.text:00000000000035EE                 mov     [rdi+28h], rsi
.text:00000000000035F2                 mov     [rdi+30h], rdx
.text:00000000000035F6                 retn
.text:00000000000035F7 ; ---------------------------------------------------------------------------
.text:00000000000035F7
.text:00000000000035F7 loc_35F7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000035F7                                         ; set_custom_quoting+1C↑j
.text:00000000000035F7                 sub     rsp, 8
.text:00000000000035FB                 call    _abort
.text:00000000000035FB ; } // starts at 35D0
.text:00000000000035FB set_custom_quoting endp
.text:00000000000035FB
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600 ; Attributes: info_from_lumina
.text:0000000000003600
.text:0000000000003600 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003600                 public quotearg_buffer
.text:0000000000003600 quotearg_buffer proc near
.text:0000000000003600
.text:0000000000003600 var_40          = qword ptr -40h
.text:0000000000003600
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 push    r15
.text:0000000000003602                 push    r14
.text:0000000000003604                 lea     rax, default_quoting_options
.text:000000000000360B                 push    r13
.text:000000000000360D                 push    r12
.text:000000000000360F                 mov     r13, rdi
.text:0000000000003612                 push    rbp
.text:0000000000003613                 push    rbx
.text:0000000000003614                 mov     rbx, r8
.text:0000000000003617                 mov     r14, rsi
.text:000000000000361A                 mov     r15, rdx
.text:000000000000361D                 sub     rsp, 18h
.text:0000000000003621                 test    r8, r8
.text:0000000000003624                 cmovz   rbx, rax
.text:0000000000003628                 mov     [rsp+48h+var_40], rcx
.text:000000000000362D                 call    ___errno_location
.text:0000000000003632                 mov     r12d, [rax]
.text:0000000000003635                 mov     rbp, rax
.text:0000000000003638                 lea     rax, [rbx+8]
.text:000000000000363C                 sub     rsp, 8
.text:0000000000003640                 mov     r9d, [rbx+4]
.text:0000000000003644                 push    qword ptr [rbx+30h]
.text:0000000000003647                 mov     r8d, [rbx]
.text:000000000000364A                 push    qword ptr [rbx+28h]
.text:000000000000364D                 mov     rdx, r15
.text:0000000000003650                 push    rax
.text:0000000000003651                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003656                 mov     rsi, r14
.text:0000000000003659                 mov     rdi, r13
.text:000000000000365C                 call    quotearg_buffer_restyled
.text:0000000000003661                 mov     [rbp+0], r12d
.text:0000000000003665                 add     rsp, 38h
.text:0000000000003669                 pop     rbx
.text:000000000000366A                 pop     rbp
.text:000000000000366B                 pop     r12
.text:000000000000366D                 pop     r13
.text:000000000000366F                 pop     r14
.text:0000000000003671                 pop     r15
.text:0000000000003673                 retn
.text:0000000000003673 ; } // starts at 3600
.text:0000000000003673 quotearg_buffer endp
.text:0000000000003673
.text:0000000000003673 ; ---------------------------------------------------------------------------
.text:0000000000003674                 align 20h
.text:0000000000003680
.text:0000000000003680 ; =============== S U B R O U T I N E =======================================
.text:0000000000003680
.text:0000000000003680 ; Attributes: info_from_lumina
.text:0000000000003680
.text:0000000000003680 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003680                 public quotearg_alloc_mem
.text:0000000000003680 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003680
.text:0000000000003680 var_5C          = dword ptr -5Ch
.text:0000000000003680 var_58          = qword ptr -58h
.text:0000000000003680 var_50          = qword ptr -50h
.text:0000000000003680 var_48          = qword ptr -48h
.text:0000000000003680 var_40          = qword ptr -40h
.text:0000000000003680
.text:0000000000003680 ; __unwind {
.text:0000000000003680                 push    r15
.text:0000000000003682                 push    r14
.text:0000000000003684                 lea     rax, default_quoting_options
.text:000000000000368B                 push    r13
.text:000000000000368D                 push    r12
.text:000000000000368F                 mov     r12, rdx
.text:0000000000003692                 push    rbp
.text:0000000000003693                 push    rbx
.text:0000000000003694                 mov     rbx, rcx
.text:0000000000003697                 mov     r14, rdi
.text:000000000000369A                 mov     r15, rsi
.text:000000000000369D                 sub     rsp, 38h
.text:00000000000036A1                 test    rcx, rcx
.text:00000000000036A4                 cmovz   rbx, rax
.text:00000000000036A8                 xor     ebp, ebp
.text:00000000000036AA                 call    ___errno_location
.text:00000000000036AF                 test    r12, r12
.text:00000000000036B2                 mov     r13, rax
.text:00000000000036B5                 mov     eax, [rax]
.text:00000000000036B7                 setz    bpl
.text:00000000000036BB                 or      ebp, [rbx+4]
.text:00000000000036BE                 lea     r10, [rbx+8]
.text:00000000000036C2                 sub     rsp, 8
.text:00000000000036C6                 mov     r8d, [rbx]
.text:00000000000036C9                 mov     rcx, r15
.text:00000000000036CC                 mov     [rsp+70h+var_5C], eax
.text:00000000000036D0                 push    qword ptr [rbx+30h]
.text:00000000000036D3                 mov     rdx, r14
.text:00000000000036D6                 push    qword ptr [rbx+28h]
.text:00000000000036D9                 push    r10
.text:00000000000036DB                 xor     esi, esi
.text:00000000000036DD                 mov     r9d, ebp
.text:00000000000036E0                 xor     edi, edi
.text:00000000000036E2                 mov     [rsp+88h+var_48], r10
.text:00000000000036E7                 call    quotearg_buffer_restyled
.text:00000000000036EC                 lea     rsi, [rax+1]
.text:00000000000036F0                 mov     [rsp+88h+var_40], rax
.text:00000000000036F5                 add     rsp, 20h
.text:00000000000036F9                 mov     rdi, rsi
.text:00000000000036FC                 mov     [rsp+68h+var_50], rsi
.text:0000000000003701                 call    xmalloc
.text:0000000000003706                 mov     [rsp+68h+var_58], rax
.text:000000000000370B                 sub     rsp, 8
.text:000000000000370F                 push    qword ptr [rbx+30h]
.text:0000000000003712                 push    qword ptr [rbx+28h]
.text:0000000000003715                 mov     r10, [rsp+80h+var_48]
.text:000000000000371A                 mov     r9d, ebp
.text:000000000000371D                 mov     r8d, [rbx]
.text:0000000000003720                 mov     rcx, r15
.text:0000000000003723                 mov     rdx, r14
.text:0000000000003726                 mov     rdi, rax
.text:0000000000003729                 push    r10
.text:000000000000372B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003730                 call    quotearg_buffer_restyled
.text:0000000000003735                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003739                 add     rsp, 20h
.text:000000000000373D                 test    r12, r12
.text:0000000000003740                 mov     [r13+0], eax
.text:0000000000003744                 jz      short loc_374F
.text:0000000000003746                 mov     r11, [rsp+68h+var_40]
.text:000000000000374B                 mov     [r12], r11
.text:000000000000374F
.text:000000000000374F loc_374F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000374F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003754                 add     rsp, 38h
.text:0000000000003758                 pop     rbx
.text:0000000000003759                 pop     rbp
.text:000000000000375A                 pop     r12
.text:000000000000375C                 pop     r13
.text:000000000000375E                 pop     r14
.text:0000000000003760                 pop     r15
.text:0000000000003762                 retn
.text:0000000000003762 ; } // starts at 3680
.text:0000000000003762 quotearg_alloc_mem endp
.text:0000000000003762
.text:0000000000003762 ; ---------------------------------------------------------------------------
.text:0000000000003763                 align 10h
.text:0000000000003770
.text:0000000000003770 ; =============== S U B R O U T I N E =======================================
.text:0000000000003770
.text:0000000000003770
.text:0000000000003770                 public quotearg_alloc
.text:0000000000003770 quotearg_alloc  proc near
.text:0000000000003770 ; __unwind {
.text:0000000000003770                 mov     rcx, rdx
.text:0000000000003773                 xor     edx, edx
.text:0000000000003775                 jmp     quotearg_alloc_mem
.text:0000000000003775 ; } // starts at 3770
.text:0000000000003775 quotearg_alloc  endp
.text:0000000000003775
.text:0000000000003775 ; ---------------------------------------------------------------------------
.text:000000000000377A                 align 20h
.text:0000000000003780
.text:0000000000003780 ; =============== S U B R O U T I N E =======================================
.text:0000000000003780
.text:0000000000003780 ; Attributes: info_from_lumina
.text:0000000000003780
.text:0000000000003780 ; void __cdecl quotearg_free()
.text:0000000000003780                 public quotearg_free
.text:0000000000003780 quotearg_free   proc near
.text:0000000000003780 ; __unwind {
.text:0000000000003780                 mov     eax, cs:nslots
.text:0000000000003786                 push    r12
.text:0000000000003788                 mov     r12, cs:slotvec
.text:000000000000378F                 push    rbp
.text:0000000000003790                 push    rbx
.text:0000000000003791                 cmp     eax, 1
.text:0000000000003794                 jle     short loc_37C1
.text:0000000000003796                 sub     eax, 2
.text:0000000000003799                 lea     rbx, [r12+18h]
.text:000000000000379E                 shl     rax, 4
.text:00000000000037A2                 lea     rbp, [r12+rax+28h]
.text:00000000000037A7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000037B0
.text:00000000000037B0 loc_37B0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000037B0                 mov     rdi, [rbx]      ; ptr
.text:00000000000037B3                 add     rbx, 10h
.text:00000000000037B7                 call    _free
.text:00000000000037BC                 cmp     rbx, rbp
.text:00000000000037BF                 jnz     short loc_37B0
.text:00000000000037C1
.text:00000000000037C1 loc_37C1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000037C1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000037C6                 lea     rbx, slot0
.text:00000000000037CD                 cmp     rdi, rbx
.text:00000000000037D0                 jz      short loc_37E9
.text:00000000000037D2                 call    _free
.text:00000000000037D7                 mov     cs:slotvec0, 100h
.text:00000000000037E2                 mov     cs:off_208078, rbx
.text:00000000000037E9
.text:00000000000037E9 loc_37E9:                               ; CODE XREF: quotearg_free+50↑j
.text:00000000000037E9                 lea     rbx, slotvec0
.text:00000000000037F0                 cmp     r12, rbx
.text:00000000000037F3                 jz      short loc_3804
.text:00000000000037F5                 mov     rdi, r12        ; ptr
.text:00000000000037F8                 call    _free
.text:00000000000037FD                 mov     cs:slotvec, rbx
.text:0000000000003804
.text:0000000000003804 loc_3804:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003804                 pop     rbx
.text:0000000000003805                 mov     cs:nslots, 1
.text:000000000000380F                 pop     rbp
.text:0000000000003810                 pop     r12
.text:0000000000003812                 retn
.text:0000000000003812 ; } // starts at 3780
.text:0000000000003812 quotearg_free   endp
.text:0000000000003812
.text:0000000000003812 ; ---------------------------------------------------------------------------
.text:0000000000003813                 align 20h
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820
.text:0000000000003820                 public quotearg_n
.text:0000000000003820 quotearg_n      proc near
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 lea     rcx, default_quoting_options
.text:0000000000003827                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000382E                 jmp     quotearg_n_options
.text:000000000000382E ; } // starts at 3820
.text:000000000000382E quotearg_n      endp
.text:000000000000382E
.text:000000000000382E ; ---------------------------------------------------------------------------
.text:0000000000003833                 align 20h
.text:0000000000003840
.text:0000000000003840 ; =============== S U B R O U T I N E =======================================
.text:0000000000003840
.text:0000000000003840
.text:0000000000003840                 public quotearg_n_mem
.text:0000000000003840 quotearg_n_mem  proc near
.text:0000000000003840 ; __unwind {
.text:0000000000003840                 lea     rcx, default_quoting_options
.text:0000000000003847                 jmp     quotearg_n_options
.text:0000000000003847 ; } // starts at 3840
.text:0000000000003847 quotearg_n_mem  endp
.text:0000000000003847
.text:0000000000003847 ; ---------------------------------------------------------------------------
.text:000000000000384C                 align 10h
.text:0000000000003850
.text:0000000000003850 ; =============== S U B R O U T I N E =======================================
.text:0000000000003850
.text:0000000000003850
.text:0000000000003850                 public quotearg
.text:0000000000003850 quotearg        proc near
.text:0000000000003850 ; __unwind {
.text:0000000000003850                 lea     rcx, default_quoting_options
.text:0000000000003857                 mov     rsi, rdi
.text:000000000000385A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003861                 xor     edi, edi
.text:0000000000003863                 jmp     quotearg_n_options
.text:0000000000003863 ; } // starts at 3850
.text:0000000000003863 quotearg        endp
.text:0000000000003863
.text:0000000000003863 ; ---------------------------------------------------------------------------
.text:0000000000003868                 align 10h
.text:0000000000003870
.text:0000000000003870 ; =============== S U B R O U T I N E =======================================
.text:0000000000003870
.text:0000000000003870
.text:0000000000003870                 public quotearg_mem
.text:0000000000003870 quotearg_mem    proc near
.text:0000000000003870 ; __unwind {
.text:0000000000003870                 lea     rcx, default_quoting_options
.text:0000000000003877                 mov     rdx, rsi
.text:000000000000387A                 mov     rsi, rdi
.text:000000000000387D                 xor     edi, edi
.text:000000000000387F                 jmp     quotearg_n_options
.text:000000000000387F ; } // starts at 3870
.text:000000000000387F quotearg_mem    endp
.text:000000000000387F
.text:000000000000387F ; ---------------------------------------------------------------------------
.text:0000000000003884                 align 10h
.text:0000000000003890
.text:0000000000003890 ; =============== S U B R O U T I N E =======================================
.text:0000000000003890
.text:0000000000003890 ; Attributes: info_from_lumina
.text:0000000000003890
.text:0000000000003890 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003890                 public quotearg_n_style
.text:0000000000003890 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003890
.text:0000000000003890 var_48          = dword ptr -48h
.text:0000000000003890 var_44          = qword ptr -44h
.text:0000000000003890 var_3C          = qword ptr -3Ch
.text:0000000000003890 var_34          = qword ptr -34h
.text:0000000000003890 var_2C          = qword ptr -2Ch
.text:0000000000003890 var_24          = qword ptr -24h
.text:0000000000003890 var_1C          = qword ptr -1Ch
.text:0000000000003890 var_14          = dword ptr -14h
.text:0000000000003890 var_10          = qword ptr -10h
.text:0000000000003890
.text:0000000000003890 ; __unwind {
.text:0000000000003890                 sub     rsp, 48h
.text:0000000000003894                 mov     rax, rdx
.text:0000000000003897                 mov     rdx, fs:28h
.text:00000000000038A0                 mov     [rsp+48h+var_10], rdx
.text:00000000000038A5                 xor     edx, edx
.text:00000000000038A7                 cmp     esi, 0Ah
.text:00000000000038AA                 jz      short loc_3914
.text:00000000000038AC                 mov     [rsp+48h+var_48], esi
.text:00000000000038AF                 mov     rcx, rsp
.text:00000000000038B2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000038B9                 mov     rsi, rax
.text:00000000000038BC                 mov     [rsp+48h+var_44], 0
.text:00000000000038C5                 mov     [rsp+48h+var_3C], 0
.text:00000000000038CE                 mov     [rsp+48h+var_34], 0
.text:00000000000038D7                 mov     [rsp+48h+var_2C], 0
.text:00000000000038E0                 mov     [rsp+48h+var_24], 0
.text:00000000000038E9                 mov     [rsp+48h+var_1C], 0
.text:00000000000038F2                 mov     [rsp+48h+var_14], 0
.text:00000000000038FA                 call    quotearg_n_options
.text:00000000000038FF                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003904                 xor     rcx, fs:28h
.text:000000000000390D                 jnz     short loc_3919
.text:000000000000390F                 add     rsp, 48h
.text:0000000000003913                 retn
.text:0000000000003914 ; ---------------------------------------------------------------------------
.text:0000000000003914
.text:0000000000003914 loc_3914:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003914                 call    _abort
.text:0000000000003919 ; ---------------------------------------------------------------------------
.text:0000000000003919
.text:0000000000003919 loc_3919:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003919                 call    ___stack_chk_fail
.text:0000000000003919 ; } // starts at 3890
.text:0000000000003919 quotearg_n_style endp
.text:0000000000003919
.text:0000000000003919 ; ---------------------------------------------------------------------------
.text:000000000000391E                 align 20h
.text:0000000000003920
.text:0000000000003920 ; =============== S U B R O U T I N E =======================================
.text:0000000000003920
.text:0000000000003920 ; Attributes: info_from_lumina
.text:0000000000003920
.text:0000000000003920 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003920                 public quotearg_n_style_mem
.text:0000000000003920 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003920
.text:0000000000003920 var_48          = dword ptr -48h
.text:0000000000003920 var_44          = qword ptr -44h
.text:0000000000003920 var_3C          = qword ptr -3Ch
.text:0000000000003920 var_34          = qword ptr -34h
.text:0000000000003920 var_2C          = qword ptr -2Ch
.text:0000000000003920 var_24          = qword ptr -24h
.text:0000000000003920 var_1C          = qword ptr -1Ch
.text:0000000000003920 var_14          = dword ptr -14h
.text:0000000000003920 var_10          = qword ptr -10h
.text:0000000000003920
.text:0000000000003920 ; __unwind {
.text:0000000000003920                 sub     rsp, 48h
.text:0000000000003924                 mov     rax, rdx
.text:0000000000003927                 mov     rdx, rcx
.text:000000000000392A                 mov     rcx, fs:28h
.text:0000000000003933                 mov     [rsp+48h+var_10], rcx
.text:0000000000003938                 xor     ecx, ecx
.text:000000000000393A                 cmp     esi, 0Ah
.text:000000000000393D                 jz      short loc_39A0
.text:000000000000393F                 mov     [rsp+48h+var_48], esi
.text:0000000000003942                 mov     rcx, rsp
.text:0000000000003945                 mov     rsi, rax
.text:0000000000003948                 mov     [rsp+48h+var_44], 0
.text:0000000000003951                 mov     [rsp+48h+var_3C], 0
.text:000000000000395A                 mov     [rsp+48h+var_34], 0
.text:0000000000003963                 mov     [rsp+48h+var_2C], 0
.text:000000000000396C                 mov     [rsp+48h+var_24], 0
.text:0000000000003975                 mov     [rsp+48h+var_1C], 0
.text:000000000000397E                 mov     [rsp+48h+var_14], 0
.text:0000000000003986                 call    quotearg_n_options
.text:000000000000398B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003990                 xor     rdx, fs:28h
.text:0000000000003999                 jnz     short loc_39A5
.text:000000000000399B                 add     rsp, 48h
.text:000000000000399F                 retn
.text:00000000000039A0 ; ---------------------------------------------------------------------------
.text:00000000000039A0
.text:00000000000039A0 loc_39A0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000039A0                 call    _abort
.text:00000000000039A5 ; ---------------------------------------------------------------------------
.text:00000000000039A5
.text:00000000000039A5 loc_39A5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000039A5                 call    ___stack_chk_fail
.text:00000000000039A5 ; } // starts at 3920
.text:00000000000039A5 quotearg_n_style_mem endp
.text:00000000000039A5
.text:00000000000039A5 ; ---------------------------------------------------------------------------
.text:00000000000039AA                 align 10h
.text:00000000000039B0
.text:00000000000039B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039B0
.text:00000000000039B0
.text:00000000000039B0                 public quotearg_style
.text:00000000000039B0 quotearg_style  proc near
.text:00000000000039B0 ; __unwind {
.text:00000000000039B0                 mov     rdx, rsi
.text:00000000000039B3                 mov     esi, edi
.text:00000000000039B5                 xor     edi, edi
.text:00000000000039B7                 jmp     quotearg_n_style
.text:00000000000039B7 ; } // starts at 39B0
.text:00000000000039B7 quotearg_style  endp
.text:00000000000039B7
.text:00000000000039B7 ; ---------------------------------------------------------------------------
.text:00000000000039BC                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0
.text:00000000000039C0                 public quotearg_style_mem
.text:00000000000039C0 quotearg_style_mem proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 mov     rcx, rdx
.text:00000000000039C3                 mov     rdx, rsi
.text:00000000000039C6                 mov     esi, edi
.text:00000000000039C8                 xor     edi, edi
.text:00000000000039CA                 jmp     quotearg_n_style_mem
.text:00000000000039CA ; } // starts at 39C0
.text:00000000000039CA quotearg_style_mem endp
.text:00000000000039CA
.text:00000000000039CA ; ---------------------------------------------------------------------------
.text:00000000000039CF                 align 10h
.text:00000000000039D0
.text:00000000000039D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039D0
.text:00000000000039D0 ; Attributes: info_from_lumina
.text:00000000000039D0
.text:00000000000039D0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000039D0                 public quotearg_char_mem
.text:00000000000039D0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000039D0                                         ; quotearg_colon+C↓j ...
.text:00000000000039D0
.text:00000000000039D0 var_48          = xmmword ptr -48h
.text:00000000000039D0 var_38          = xmmword ptr -38h
.text:00000000000039D0 var_28          = xmmword ptr -28h
.text:00000000000039D0 var_18          = qword ptr -18h
.text:00000000000039D0 var_10          = qword ptr -10h
.text:00000000000039D0
.text:00000000000039D0 ; __unwind {
.text:00000000000039D0                 sub     rsp, 48h
.text:00000000000039D4                 mov     ecx, edx
.text:00000000000039D6                 mov     rax, fs:28h
.text:00000000000039DF                 mov     [rsp+48h+var_10], rax
.text:00000000000039E4                 xor     eax, eax
.text:00000000000039E6                 mov     rax, cs:qword_208230
.text:00000000000039ED                 mov     r8, rsp
.text:00000000000039F0                 and     ecx, 1Fh
.text:00000000000039F3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000039FB                 mov     [rsp+48h+var_18], rax
.text:0000000000003A00                 mov     eax, edx
.text:0000000000003A02                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003A06                 shr     al, 5
.text:0000000000003A09                 movzx   eax, al
.text:0000000000003A0C                 lea     r9, [r8+rax*4+8]
.text:0000000000003A11                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000003A19                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003A1E                 movdqa  xmm0, cs:xmmword_208220
.text:0000000000003A26                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003A2B                 mov     edx, [r9]
.text:0000000000003A2E                 mov     eax, edx
.text:0000000000003A30                 shr     eax, cl
.text:0000000000003A32                 not     eax
.text:0000000000003A34                 and     eax, 1
.text:0000000000003A37                 shl     eax, cl
.text:0000000000003A39                 mov     rcx, r8
.text:0000000000003A3C                 xor     eax, edx
.text:0000000000003A3E                 mov     rdx, rsi
.text:0000000000003A41                 mov     rsi, rdi
.text:0000000000003A44                 mov     [r9], eax
.text:0000000000003A47                 xor     edi, edi
.text:0000000000003A49                 call    quotearg_n_options
.text:0000000000003A4E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003A53                 xor     rsi, fs:28h
.text:0000000000003A5C                 jnz     short loc_3A63
.text:0000000000003A5E                 add     rsp, 48h
.text:0000000000003A62                 retn
.text:0000000000003A63 ; ---------------------------------------------------------------------------
.text:0000000000003A63
.text:0000000000003A63 loc_3A63:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003A63                 call    ___stack_chk_fail
.text:0000000000003A63 ; } // starts at 39D0
.text:0000000000003A63 quotearg_char_mem endp
.text:0000000000003A63
.text:0000000000003A63 ; ---------------------------------------------------------------------------
.text:0000000000003A68                 align 10h
.text:0000000000003A70
.text:0000000000003A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A70
.text:0000000000003A70
.text:0000000000003A70                 public quotearg_char
.text:0000000000003A70 quotearg_char   proc near
.text:0000000000003A70 ; __unwind {
.text:0000000000003A70                 movsx   edx, sil
.text:0000000000003A74                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A7B                 jmp     quotearg_char_mem
.text:0000000000003A7B ; } // starts at 3A70
.text:0000000000003A7B quotearg_char   endp
.text:0000000000003A7B
.text:0000000000003A80
.text:0000000000003A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A80
.text:0000000000003A80
.text:0000000000003A80                 public quotearg_colon
.text:0000000000003A80 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003A80 ; __unwind {
.text:0000000000003A80                 mov     edx, 3Ah ; ':'
.text:0000000000003A85                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A8C                 jmp     quotearg_char_mem
.text:0000000000003A8C ; } // starts at 3A80
.text:0000000000003A8C quotearg_colon  endp
.text:0000000000003A8C
.text:0000000000003A8C ; ---------------------------------------------------------------------------
.text:0000000000003A91                 align 20h
.text:0000000000003AA0
.text:0000000000003AA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AA0
.text:0000000000003AA0
.text:0000000000003AA0                 public quotearg_colon_mem
.text:0000000000003AA0 quotearg_colon_mem proc near
.text:0000000000003AA0 ; __unwind {
.text:0000000000003AA0                 mov     edx, 3Ah ; ':'
.text:0000000000003AA5                 jmp     quotearg_char_mem
.text:0000000000003AA5 ; } // starts at 3AA0
.text:0000000000003AA5 quotearg_colon_mem endp
.text:0000000000003AA5
.text:0000000000003AA5 ; ---------------------------------------------------------------------------
.text:0000000000003AAA                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AB0
.text:0000000000003AB0 ; Attributes: info_from_lumina
.text:0000000000003AB0
.text:0000000000003AB0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003AB0                 public quotearg_n_style_colon
.text:0000000000003AB0 quotearg_n_style_colon proc near
.text:0000000000003AB0
.text:0000000000003AB0 var_48          = dword ptr -48h
.text:0000000000003AB0 var_44          = qword ptr -44h
.text:0000000000003AB0 var_3C          = qword ptr -3Ch
.text:0000000000003AB0 var_34          = qword ptr -34h
.text:0000000000003AB0 var_2C          = qword ptr -2Ch
.text:0000000000003AB0 var_24          = qword ptr -24h
.text:0000000000003AB0 var_1C          = qword ptr -1Ch
.text:0000000000003AB0 var_14          = dword ptr -14h
.text:0000000000003AB0 var_10          = qword ptr -10h
.text:0000000000003AB0
.text:0000000000003AB0 ; __unwind {
.text:0000000000003AB0                 sub     rsp, 48h
.text:0000000000003AB4                 mov     rax, rdx
.text:0000000000003AB7                 mov     rdx, fs:28h
.text:0000000000003AC0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003AC5                 xor     edx, edx
.text:0000000000003AC7                 cmp     esi, 0Ah
.text:0000000000003ACA                 jz      short loc_3B34
.text:0000000000003ACC                 mov     [rsp+48h+var_48], esi
.text:0000000000003ACF                 mov     rcx, rsp
.text:0000000000003AD2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AD9                 mov     rsi, rax
.text:0000000000003ADC                 mov     [rsp+48h+var_44], 0
.text:0000000000003AE5                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003AEE                 mov     [rsp+48h+var_34], 0
.text:0000000000003AF7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B00                 mov     [rsp+48h+var_24], 0
.text:0000000000003B09                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B12                 mov     [rsp+48h+var_14], 0
.text:0000000000003B1A                 call    quotearg_n_options
.text:0000000000003B1F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003B24                 xor     rcx, fs:28h
.text:0000000000003B2D                 jnz     short loc_3B39
.text:0000000000003B2F                 add     rsp, 48h
.text:0000000000003B33                 retn
.text:0000000000003B34 ; ---------------------------------------------------------------------------
.text:0000000000003B34
.text:0000000000003B34 loc_3B34:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003B34                 call    _abort
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B39
.text:0000000000003B39 loc_3B39:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003B39                 call    ___stack_chk_fail
.text:0000000000003B39 ; } // starts at 3AB0
.text:0000000000003B39 quotearg_n_style_colon endp
.text:0000000000003B39
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B3E                 align 20h
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40 ; Attributes: info_from_lumina
.text:0000000000003B40
.text:0000000000003B40 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003B40                 public quotearg_n_custom_mem
.text:0000000000003B40 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003B40                                         ; quotearg_custom+12↓j ...
.text:0000000000003B40
.text:0000000000003B40 var_48          = xmmword ptr -48h
.text:0000000000003B40 var_38          = xmmword ptr -38h
.text:0000000000003B40 var_28          = xmmword ptr -28h
.text:0000000000003B40 var_18          = qword ptr -18h
.text:0000000000003B40 var_10          = qword ptr -10h
.text:0000000000003B40
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 sub     rsp, 48h
.text:0000000000003B44                 mov     r9, rcx
.text:0000000000003B47                 mov     rcx, cs:qword_208230
.text:0000000000003B4E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003B56                 mov     rax, fs:28h
.text:0000000000003B5F                 mov     [rsp+48h+var_10], rax
.text:0000000000003B64                 xor     eax, eax
.text:0000000000003B66                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003B6A                 test    rsi, rsi
.text:0000000000003B6D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003B72                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003B79                 movdqa  xmm0, cs:xmmword_208210
.text:0000000000003B81                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003B86                 movdqa  xmm0, cs:xmmword_208220
.text:0000000000003B8E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003B93                 jz      short loc_3BC7
.text:0000000000003B95                 test    rdx, rdx
.text:0000000000003B98                 jz      short loc_3BC7
.text:0000000000003B9A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003B9F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003BA4                 mov     rcx, rsp
.text:0000000000003BA7                 mov     rdx, r8
.text:0000000000003BAA                 mov     rsi, r9
.text:0000000000003BAD                 call    quotearg_n_options
.text:0000000000003BB2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003BB7                 xor     rdi, fs:28h
.text:0000000000003BC0                 jnz     short loc_3BCC
.text:0000000000003BC2                 add     rsp, 48h
.text:0000000000003BC6                 retn
.text:0000000000003BC7 ; ---------------------------------------------------------------------------
.text:0000000000003BC7
.text:0000000000003BC7 loc_3BC7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003BC7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003BC7                 call    _abort
.text:0000000000003BCC ; ---------------------------------------------------------------------------
.text:0000000000003BCC
.text:0000000000003BCC loc_3BCC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003BCC                 call    ___stack_chk_fail
.text:0000000000003BCC ; } // starts at 3B40
.text:0000000000003BCC quotearg_n_custom_mem endp
.text:0000000000003BCC
.text:0000000000003BCC ; ---------------------------------------------------------------------------
.text:0000000000003BD1                 align 20h
.text:0000000000003BE0
.text:0000000000003BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BE0
.text:0000000000003BE0
.text:0000000000003BE0                 public quotearg_n_custom
.text:0000000000003BE0 quotearg_n_custom proc near
.text:0000000000003BE0 ; __unwind {
.text:0000000000003BE0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BE7                 jmp     quotearg_n_custom_mem
.text:0000000000003BE7 ; } // starts at 3BE0
.text:0000000000003BE7 quotearg_n_custom endp
.text:0000000000003BE7
.text:0000000000003BE7 ; ---------------------------------------------------------------------------
.text:0000000000003BEC                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BF0
.text:0000000000003BF0
.text:0000000000003BF0                 public quotearg_custom
.text:0000000000003BF0 quotearg_custom proc near
.text:0000000000003BF0 ; __unwind {
.text:0000000000003BF0                 mov     rcx, rdx
.text:0000000000003BF3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003BFA                 mov     rdx, rsi
.text:0000000000003BFD                 mov     rsi, rdi
.text:0000000000003C00                 xor     edi, edi
.text:0000000000003C02                 jmp     quotearg_n_custom_mem
.text:0000000000003C02 ; } // starts at 3BF0
.text:0000000000003C02 quotearg_custom endp
.text:0000000000003C02
.text:0000000000003C02 ; ---------------------------------------------------------------------------
.text:0000000000003C07                 align 10h
.text:0000000000003C10
.text:0000000000003C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C10
.text:0000000000003C10
.text:0000000000003C10                 public quotearg_custom_mem
.text:0000000000003C10 quotearg_custom_mem proc near
.text:0000000000003C10 ; __unwind {
.text:0000000000003C10                 mov     r8, rcx
.text:0000000000003C13                 mov     rcx, rdx
.text:0000000000003C16                 mov     rdx, rsi
.text:0000000000003C19                 mov     rsi, rdi
.text:0000000000003C1C                 xor     edi, edi
.text:0000000000003C1E                 jmp     quotearg_n_custom_mem
.text:0000000000003C1E ; } // starts at 3C10
.text:0000000000003C1E quotearg_custom_mem endp
.text:0000000000003C1E
.text:0000000000003C1E ; ---------------------------------------------------------------------------
.text:0000000000003C23                 align 10h
.text:0000000000003C30
.text:0000000000003C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C30
.text:0000000000003C30
.text:0000000000003C30                 public quote_n_mem
.text:0000000000003C30 quote_n_mem     proc near
.text:0000000000003C30 ; __unwind {
.text:0000000000003C30                 lea     rcx, quote_quoting_options
.text:0000000000003C37                 jmp     quotearg_n_options
.text:0000000000003C37 ; } // starts at 3C30
.text:0000000000003C37 quote_n_mem     endp
.text:0000000000003C37
.text:0000000000003C37 ; ---------------------------------------------------------------------------
.text:0000000000003C3C                 align 20h
.text:0000000000003C40
.text:0000000000003C40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C40
.text:0000000000003C40
.text:0000000000003C40                 public quote_mem
.text:0000000000003C40 quote_mem       proc near
.text:0000000000003C40 ; __unwind {
.text:0000000000003C40                 lea     rcx, quote_quoting_options
.text:0000000000003C47                 mov     rdx, rsi
.text:0000000000003C4A                 mov     rsi, rdi
.text:0000000000003C4D                 xor     edi, edi
.text:0000000000003C4F                 jmp     quotearg_n_options
.text:0000000000003C4F ; } // starts at 3C40
.text:0000000000003C4F quote_mem       endp
.text:0000000000003C4F
.text:0000000000003C4F ; ---------------------------------------------------------------------------
.text:0000000000003C54                 align 20h
.text:0000000000003C60
.text:0000000000003C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C60
.text:0000000000003C60
.text:0000000000003C60                 public quote_n
.text:0000000000003C60 quote_n         proc near
.text:0000000000003C60 ; __unwind {
.text:0000000000003C60                 lea     rcx, quote_quoting_options
.text:0000000000003C67                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C6E                 jmp     quotearg_n_options
.text:0000000000003C6E ; } // starts at 3C60
.text:0000000000003C6E quote_n         endp
.text:0000000000003C6E
.text:0000000000003C6E ; ---------------------------------------------------------------------------
.text:0000000000003C73                 align 20h
.text:0000000000003C80
.text:0000000000003C80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C80
.text:0000000000003C80
.text:0000000000003C80                 public quote
.text:0000000000003C80 quote           proc near               ; CODE XREF: main+2DF↑p
.text:0000000000003C80                                         ; main+38F↑p
.text:0000000000003C80 ; __unwind {
.text:0000000000003C80                 lea     rcx, quote_quoting_options
.text:0000000000003C87                 mov     rsi, rdi
.text:0000000000003C8A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C91                 xor     edi, edi
.text:0000000000003C93                 jmp     quotearg_n_options
.text:0000000000003C93 ; } // starts at 3C80
.text:0000000000003C93 quote           endp
.text:0000000000003C93
.text:0000000000003C93 ; ---------------------------------------------------------------------------
.text:0000000000003C98                 align 20h
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003CA0                 public version_etc_arn
.text:0000000000003CA0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_40DB↓j
.text:0000000000003CA0                                         ; version_etc_va:loc_412B↓p ...
.text:0000000000003CA0
.text:0000000000003CA0 var_58          = qword ptr -58h
.text:0000000000003CA0 var_50          = qword ptr -50h
.text:0000000000003CA0 var_48          = qword ptr -48h
.text:0000000000003CA0 var_40          = qword ptr -40h
.text:0000000000003CA0
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 push    r15
.text:0000000000003CA2                 push    r14
.text:0000000000003CA4                 push    r13
.text:0000000000003CA6                 push    r12
.text:0000000000003CA8                 mov     r12, r9
.text:0000000000003CAB                 push    rbp
.text:0000000000003CAC                 push    rbx
.text:0000000000003CAD                 mov     rbp, rdi
.text:0000000000003CB0                 mov     rbx, r8
.text:0000000000003CB3                 sub     rsp, 28h
.text:0000000000003CB7                 test    rsi, rsi
.text:0000000000003CBA                 jz      loc_3DD8
.text:0000000000003CC0                 mov     r8, rdx
.text:0000000000003CC3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003CCA                 mov     r9, rcx
.text:0000000000003CCD                 xor     eax, eax
.text:0000000000003CCF                 mov     rcx, rsi
.text:0000000000003CD2                 mov     esi, 1
.text:0000000000003CD7                 call    ___fprintf_chk
.text:0000000000003CDC
.text:0000000000003CDC loc_3CDC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003CDC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003CE3                 xor     edi, edi        ; domainname
.text:0000000000003CE5                 mov     edx, 5          ; category
.text:0000000000003CEA                 call    _dcgettext
.text:0000000000003CEF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003CF6                 mov     rcx, rax
.text:0000000000003CF9                 mov     r8d, 7E3h
.text:0000000000003CFF                 mov     esi, 1
.text:0000000000003D04                 mov     rdi, rbp
.text:0000000000003D07                 xor     eax, eax
.text:0000000000003D09                 call    ___fprintf_chk
.text:0000000000003D0E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003D15                 xor     edi, edi        ; domainname
.text:0000000000003D17                 mov     edx, 5          ; category
.text:0000000000003D1C                 call    _dcgettext
.text:0000000000003D21                 mov     rsi, rbp        ; stream
.text:0000000000003D24                 mov     rdi, rax        ; s
.text:0000000000003D27                 call    _fputs_unlocked
.text:0000000000003D2C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003D30                 ja      def_3D44        ; jumptable 0000000000003D44 default case
.text:0000000000003D36                 lea     rdx, jpt_3D44
.text:0000000000003D3D                 movsxd  rax, ds:(jpt_3D44 - 5CA4h)[rdx+r12*4]
.text:0000000000003D41                 add     rax, rdx
.text:0000000000003D44                 jmp     rax             ; switch jump
.text:0000000000003D44 ; ---------------------------------------------------------------------------
.text:0000000000003D46                 align 10h
.text:0000000000003D50
.text:0000000000003D50 loc_3D50:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D50                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003D50                 mov     r9, [rbx+38h]   ; jumptable 0000000000003D44 case 8
.text:0000000000003D54                 mov     rax, [rbx+10h]
.text:0000000000003D58                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003D5F                 mov     r8, [rbx+8]
.text:0000000000003D63                 mov     edx, 5          ; category
.text:0000000000003D68                 xor     edi, edi        ; domainname
.text:0000000000003D6A                 mov     r13, [rbx+30h]
.text:0000000000003D6E                 mov     r12, [rbx+28h]
.text:0000000000003D72                 mov     [rsp+58h+var_48], r9
.text:0000000000003D77                 mov     r15, [rbx+20h]
.text:0000000000003D7B                 mov     r14, [rbx+18h]
.text:0000000000003D7F                 mov     [rsp+58h+var_58], rax
.text:0000000000003D83                 mov     [rsp+58h+var_50], r8
.text:0000000000003D88                 mov     rbx, [rbx]
.text:0000000000003D8B                 call    _dcgettext
.text:0000000000003D90                 sub     rsp, 8
.text:0000000000003D94
.text:0000000000003D94 loc_3D94:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003D94                 mov     r9, [rsp+60h+var_48]
.text:0000000000003D99                 mov     rdx, rax
.text:0000000000003D9C                 mov     rcx, rbx
.text:0000000000003D9F                 mov     esi, 1
.text:0000000000003DA4                 mov     rdi, rbp
.text:0000000000003DA7                 xor     eax, eax
.text:0000000000003DA9                 push    r9
.text:0000000000003DAB                 push    r13
.text:0000000000003DAD                 push    r12
.text:0000000000003DAF                 push    r15
.text:0000000000003DB1                 push    r14
.text:0000000000003DB3                 mov     r9, [rsp+88h+var_58]
.text:0000000000003DB8                 mov     r8, [rsp+88h+var_50]
.text:0000000000003DBD                 call    ___fprintf_chk
.text:0000000000003DC2                 add     rsp, 30h
.text:0000000000003DC6
.text:0000000000003DC6 loc_3DC6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DC6                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003DC6                 add     rsp, 28h        ; jumptable 0000000000003D44 case 0
.text:0000000000003DCA                 pop     rbx
.text:0000000000003DCB                 pop     rbp
.text:0000000000003DCC                 pop     r12
.text:0000000000003DCE                 pop     r13
.text:0000000000003DD0                 pop     r14
.text:0000000000003DD2                 pop     r15
.text:0000000000003DD4                 retn
.text:0000000000003DD4 ; ---------------------------------------------------------------------------
.text:0000000000003DD5                 align 8
.text:0000000000003DD8
.text:0000000000003DD8 loc_3DD8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003DD8                 mov     r8, rcx
.text:0000000000003DDB                 mov     rcx, rdx
.text:0000000000003DDE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003DE5                 mov     esi, 1
.text:0000000000003DEA                 xor     eax, eax
.text:0000000000003DEC                 call    ___fprintf_chk
.text:0000000000003DF1                 jmp     loc_3CDC
.text:0000000000003DF1 ; ---------------------------------------------------------------------------
.text:0000000000003DF6                 align 20h
.text:0000000000003E00
.text:0000000000003E00 loc_3E00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E00                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003E00                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D44 case 9
.text:0000000000003E04                 mov     r9, [rbx+38h]
.text:0000000000003E08                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003E0F                 mov     rax, [rbx+10h]
.text:0000000000003E13                 mov     r8, [rbx+8]
.text:0000000000003E17                 mov     edx, 5          ; category
.text:0000000000003E1C                 mov     r13, [rbx+30h]
.text:0000000000003E20                 mov     r12, [rbx+28h]
.text:0000000000003E24                 mov     r15, [rbx+20h]
.text:0000000000003E28                 mov     r14, [rbx+18h]
.text:0000000000003E2C                 mov     rbx, [rbx]
.text:0000000000003E2F                 mov     [rsp+58h+var_40], r10
.text:0000000000003E34                 mov     [rsp+58h+var_48], r9
.text:0000000000003E39                 mov     [rsp+58h+var_58], rax
.text:0000000000003E3D                 mov     [rsp+58h+var_50], r8
.text:0000000000003E42
.text:0000000000003E42 loc_3E42:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003E42                 xor     edi, edi        ; domainname
.text:0000000000003E44                 call    _dcgettext
.text:0000000000003E49                 mov     r10, [rsp+58h+var_40]
.text:0000000000003E4E                 push    r10
.text:0000000000003E50                 jmp     loc_3D94
.text:0000000000003E50 ; ---------------------------------------------------------------------------
.text:0000000000003E55                 align 8
.text:0000000000003E58
.text:0000000000003E58 loc_3E58:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E58                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003E58                 mov     rbx, [rbx]      ; jumptable 0000000000003D44 case 1
.text:0000000000003E5B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003E62                 mov     edx, 5          ; category
.text:0000000000003E67                 xor     edi, edi        ; domainname
.text:0000000000003E69                 call    _dcgettext
.text:0000000000003E6E                 add     rsp, 28h
.text:0000000000003E72                 mov     rcx, rbx
.text:0000000000003E75                 mov     rdi, rbp
.text:0000000000003E78                 pop     rbx
.text:0000000000003E79                 pop     rbp
.text:0000000000003E7A                 pop     r12
.text:0000000000003E7C                 pop     r13
.text:0000000000003E7E                 pop     r14
.text:0000000000003E80                 pop     r15
.text:0000000000003E82                 mov     rdx, rax
.text:0000000000003E85                 mov     esi, 1
.text:0000000000003E8A                 xor     eax, eax
.text:0000000000003E8C                 jmp     ___fprintf_chk
.text:0000000000003E8C ; ---------------------------------------------------------------------------
.text:0000000000003E91                 align 8
.text:0000000000003E98
.text:0000000000003E98 loc_3E98:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003E98                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003E98                 mov     r12, [rbx+8]    ; jumptable 0000000000003D44 case 2
.text:0000000000003E9C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003EA3                 mov     rbx, [rbx]
.text:0000000000003EA6                 mov     edx, 5          ; category
.text:0000000000003EAB                 xor     edi, edi        ; domainname
.text:0000000000003EAD                 call    _dcgettext
.text:0000000000003EB2                 add     rsp, 28h
.text:0000000000003EB6                 mov     r8, r12
.text:0000000000003EB9                 mov     rcx, rbx
.text:0000000000003EBC                 mov     rdi, rbp
.text:0000000000003EBF                 mov     rdx, rax
.text:0000000000003EC2                 mov     esi, 1
.text:0000000000003EC7                 pop     rbx
.text:0000000000003EC8                 pop     rbp
.text:0000000000003EC9                 pop     r12
.text:0000000000003ECB                 pop     r13
.text:0000000000003ECD                 pop     r14
.text:0000000000003ECF                 pop     r15
.text:0000000000003ED1                 xor     eax, eax
.text:0000000000003ED3                 jmp     ___fprintf_chk
.text:0000000000003ED3 ; ---------------------------------------------------------------------------
.text:0000000000003ED8                 align 20h
.text:0000000000003EE0
.text:0000000000003EE0 loc_3EE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003EE0                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003EE0                 mov     r13, [rbx+10h]  ; jumptable 0000000000003D44 case 3
.text:0000000000003EE4                 mov     r12, [rbx+8]
.text:0000000000003EE8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003EEF                 mov     rbx, [rbx]
.text:0000000000003EF2                 mov     edx, 5          ; category
.text:0000000000003EF7                 xor     edi, edi        ; domainname
.text:0000000000003EF9                 call    _dcgettext
.text:0000000000003EFE                 add     rsp, 28h
.text:0000000000003F02                 mov     r9, r13
.text:0000000000003F05                 mov     r8, r12
.text:0000000000003F08                 mov     rcx, rbx
.text:0000000000003F0B                 mov     rdi, rbp
.text:0000000000003F0E                 mov     rdx, rax
.text:0000000000003F11                 pop     rbx
.text:0000000000003F12                 pop     rbp
.text:0000000000003F13                 pop     r12
.text:0000000000003F15                 pop     r13
.text:0000000000003F17                 pop     r14
.text:0000000000003F19                 pop     r15
.text:0000000000003F1B                 mov     esi, 1
.text:0000000000003F20                 xor     eax, eax
.text:0000000000003F22                 jmp     ___fprintf_chk
.text:0000000000003F22 ; ---------------------------------------------------------------------------
.text:0000000000003F27                 align 10h
.text:0000000000003F30
.text:0000000000003F30 loc_3F30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F30                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003F30                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003D44 case 4
.text:0000000000003F37                 mov     edx, 5          ; category
.text:0000000000003F3C                 xor     edi, edi        ; domainname
.text:0000000000003F3E                 mov     r14, [rbx+18h]
.text:0000000000003F42                 mov     r13, [rbx+10h]
.text:0000000000003F46                 mov     r12, [rbx+8]
.text:0000000000003F4A                 mov     rbx, [rbx]
.text:0000000000003F4D                 call    _dcgettext
.text:0000000000003F52                 sub     rsp, 8
.text:0000000000003F56
.text:0000000000003F56 loc_3F56:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003F56                 push    r14
.text:0000000000003F58                 mov     rdx, rax
.text:0000000000003F5B                 mov     r9, r13
.text:0000000000003F5E                 mov     r8, r12
.text:0000000000003F61                 mov     rcx, rbx
.text:0000000000003F64                 mov     rdi, rbp
.text:0000000000003F67                 mov     esi, 1
.text:0000000000003F6C                 xor     eax, eax
.text:0000000000003F6E                 call    ___fprintf_chk
.text:0000000000003F73                 pop     rax
.text:0000000000003F74                 pop     rdx
.text:0000000000003F75                 add     rsp, 28h
.text:0000000000003F79                 pop     rbx
.text:0000000000003F7A                 pop     rbp
.text:0000000000003F7B                 pop     r12
.text:0000000000003F7D                 pop     r13
.text:0000000000003F7F                 pop     r14
.text:0000000000003F81                 pop     r15
.text:0000000000003F83                 retn
.text:0000000000003F83 ; ---------------------------------------------------------------------------
.text:0000000000003F84                 align 8
.text:0000000000003F88
.text:0000000000003F88 loc_3F88:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F88                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003F88                 mov     r15, [rbx+20h]  ; jumptable 0000000000003D44 case 5
.text:0000000000003F8C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003F93                 mov     edx, 5          ; category
.text:0000000000003F98                 xor     edi, edi        ; domainname
.text:0000000000003F9A                 mov     r14, [rbx+18h]
.text:0000000000003F9E                 mov     r13, [rbx+10h]
.text:0000000000003FA2                 mov     r12, [rbx+8]
.text:0000000000003FA6                 mov     rbx, [rbx]
.text:0000000000003FA9                 call    _dcgettext
.text:0000000000003FAE                 push    r15
.text:0000000000003FB0                 jmp     short loc_3F56
.text:0000000000003FB0 ; ---------------------------------------------------------------------------
.text:0000000000003FB2                 align 8
.text:0000000000003FB8
.text:0000000000003FB8 loc_3FB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FB8                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000003FB8                 mov     r8, [rbx+8]     ; jumptable 0000000000003D44 case 6
.text:0000000000003FBC                 mov     r12, [rbx+28h]
.text:0000000000003FC0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003FC7                 mov     r15, [rbx+20h]
.text:0000000000003FCB                 mov     r14, [rbx+18h]
.text:0000000000003FCF                 mov     edx, 5          ; category
.text:0000000000003FD4                 mov     r13, [rbx+10h]
.text:0000000000003FD8                 xor     edi, edi        ; domainname
.text:0000000000003FDA                 mov     rbx, [rbx]
.text:0000000000003FDD                 mov     [rsp+58h+var_58], r8
.text:0000000000003FE1                 call    _dcgettext
.text:0000000000003FE6                 sub     rsp, 8
.text:0000000000003FEA                 mov     r9, r13
.text:0000000000003FED                 push    r12
.text:0000000000003FEF                 push    r15
.text:0000000000003FF1                 push    r14
.text:0000000000003FF3
.text:0000000000003FF3 loc_3FF3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003FF3                 mov     r8, [rsp+78h+var_58]
.text:0000000000003FF8                 mov     rcx, rbx
.text:0000000000003FFB                 mov     rdx, rax
.text:0000000000003FFE                 mov     rdi, rbp
.text:0000000000004001                 mov     esi, 1
.text:0000000000004006                 xor     eax, eax
.text:0000000000004008                 call    ___fprintf_chk
.text:000000000000400D                 add     rsp, 20h
.text:0000000000004011                 add     rsp, 28h
.text:0000000000004015                 pop     rbx
.text:0000000000004016                 pop     rbp
.text:0000000000004017                 pop     r12
.text:0000000000004019                 pop     r13
.text:000000000000401B                 pop     r14
.text:000000000000401D                 pop     r15
.text:000000000000401F                 retn
.text:0000000000004020 ; ---------------------------------------------------------------------------
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004020                                         ; DATA XREF: .rodata:jpt_3D44↓o
.text:0000000000004020                 mov     r9, [rbx+10h]   ; jumptable 0000000000003D44 case 7
.text:0000000000004024                 mov     r13, [rbx+30h]
.text:0000000000004028                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000402F                 mov     r12, [rbx+28h]
.text:0000000000004033                 mov     r15, [rbx+20h]
.text:0000000000004037                 mov     edx, 5          ; category
.text:000000000000403C                 mov     r14, [rbx+18h]
.text:0000000000004040                 mov     r8, [rbx+8]
.text:0000000000004044                 xor     edi, edi        ; domainname
.text:0000000000004046                 mov     [rsp+58h+var_50], r9
.text:000000000000404B                 mov     rbx, [rbx]
.text:000000000000404E                 mov     [rsp+58h+var_58], r8
.text:0000000000004052                 call    _dcgettext
.text:0000000000004057                 push    r13
.text:0000000000004059                 push    r12
.text:000000000000405B                 push    r15
.text:000000000000405D                 push    r14
.text:000000000000405F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004064                 jmp     short loc_3FF3
.text:0000000000004064 ; ---------------------------------------------------------------------------
.text:0000000000004066                 align 10h
.text:0000000000004070
.text:0000000000004070 def_3D44:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004070                 mov     r10, [rbx+40h]  ; jumptable 0000000000003D44 default case
.text:0000000000004074                 mov     r9, [rbx+38h]
.text:0000000000004078                 mov     edx, 5
.text:000000000000407D                 mov     rax, [rbx+10h]
.text:0000000000004081                 mov     r8, [rbx+8]
.text:0000000000004085                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000408C                 mov     r13, [rbx+30h]
.text:0000000000004090                 mov     r12, [rbx+28h]
.text:0000000000004094                 mov     r15, [rbx+20h]
.text:0000000000004098                 mov     r14, [rbx+18h]
.text:000000000000409C                 mov     [rsp+58h+var_40], r10
.text:00000000000040A1                 mov     [rsp+58h+var_48], r9
.text:00000000000040A6                 mov     [rsp+58h+var_58], rax
.text:00000000000040AA                 mov     [rsp+58h+var_50], r8
.text:00000000000040AF                 mov     rbx, [rbx]
.text:00000000000040B2                 jmp     loc_3E42
.text:00000000000040B2 ; } // starts at 3CA0
.text:00000000000040B2 version_etc_arn endp
.text:00000000000040B2
.text:00000000000040B2 ; ---------------------------------------------------------------------------
.text:00000000000040B7                 align 20h
.text:00000000000040C0
.text:00000000000040C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040C0
.text:00000000000040C0 ; Attributes: info_from_lumina
.text:00000000000040C0
.text:00000000000040C0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000040C0                 public version_etc_ar
.text:00000000000040C0 version_etc_ar  proc near
.text:00000000000040C0 ; __unwind {
.text:00000000000040C0                 xor     r9d, r9d
.text:00000000000040C3                 cmp     qword ptr [r8], 0
.text:00000000000040C7                 jz      short loc_40DB
.text:00000000000040C9                 nop     dword ptr [rax+00000000h]
.text:00000000000040D0
.text:00000000000040D0 loc_40D0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000040D0                 add     r9, 1
.text:00000000000040D4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000040D9                 jnz     short loc_40D0
.text:00000000000040DB
.text:00000000000040DB loc_40DB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000040DB                 jmp     version_etc_arn
.text:00000000000040DB ; } // starts at 40C0
.text:00000000000040DB version_etc_ar  endp
.text:00000000000040DB
.text:00000000000040E0
.text:00000000000040E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040E0
.text:00000000000040E0 ; Attributes: info_from_lumina
.text:00000000000040E0
.text:00000000000040E0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:00000000000040E0                 public version_etc_va
.text:00000000000040E0 version_etc_va  proc near
.text:00000000000040E0
.text:00000000000040E0 authtab         = qword ptr -68h
.text:00000000000040E0 var_10          = qword ptr -10h
.text:00000000000040E0
.text:00000000000040E0 ; __unwind {
.text:00000000000040E0                 sub     rsp, 68h
.text:00000000000040E4                 mov     r10, r8
.text:00000000000040E7                 xor     r9d, r9d
.text:00000000000040EA                 mov     rax, fs:28h
.text:00000000000040F3                 mov     [rsp+68h+var_10], rax
.text:00000000000040F8                 xor     eax, eax
.text:00000000000040FA                 mov     r8, rsp
.text:00000000000040FD                 nop     dword ptr [rax]
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004100                 mov     eax, [r10]
.text:0000000000004103                 cmp     eax, 2Fh ; '/'
.text:0000000000004106                 ja      short loc_414A
.text:0000000000004108                 mov     r11d, eax
.text:000000000000410B                 add     r11, [r10+10h]
.text:000000000000410F                 add     eax, 8
.text:0000000000004112                 mov     [r10], eax
.text:0000000000004115
.text:0000000000004115 loc_4115:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004115                 mov     rax, [r11]
.text:0000000000004118                 test    rax, rax
.text:000000000000411B                 mov     [r8+r9*8], rax
.text:000000000000411F                 jz      short loc_412B
.text:0000000000004121                 add     r9, 1
.text:0000000000004125                 cmp     r9, 0Ah
.text:0000000000004129                 jnz     short loc_4100
.text:000000000000412B
.text:000000000000412B loc_412B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000412B                 call    version_etc_arn
.text:0000000000004130                 mov     rax, [rsp+68h+var_10]
.text:0000000000004135                 xor     rax, fs:28h
.text:000000000000413E                 jnz     short loc_4145
.text:0000000000004140                 add     rsp, 68h
.text:0000000000004144                 retn
.text:0000000000004145 ; ---------------------------------------------------------------------------
.text:0000000000004145
.text:0000000000004145 loc_4145:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004145                 call    ___stack_chk_fail
.text:000000000000414A ; ---------------------------------------------------------------------------
.text:000000000000414A
.text:000000000000414A loc_414A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000414A                 mov     r11, [r10+8]
.text:000000000000414E                 lea     rax, [r11+8]
.text:0000000000004152                 mov     [r10+8], rax
.text:0000000000004156                 jmp     short loc_4115
.text:0000000000004156 ; } // starts at 40E0
.text:0000000000004156 version_etc_va  endp
.text:0000000000004156
.text:0000000000004156 ; ---------------------------------------------------------------------------
.text:0000000000004158                 align 20h
.text:0000000000004160
.text:0000000000004160 ; =============== S U B R O U T I N E =======================================
.text:0000000000004160
.text:0000000000004160 ; Attributes: info_from_lumina
.text:0000000000004160
.text:0000000000004160 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004160                 public version_etc
.text:0000000000004160 version_etc     proc near               ; CODE XREF: main+1DF↑p
.text:0000000000004160
.text:0000000000004160 var_C0          = dword ptr -0C0h
.text:0000000000004160 var_B8          = qword ptr -0B8h
.text:0000000000004160 var_B0          = qword ptr -0B0h
.text:0000000000004160 var_A8          = byte ptr -0A8h
.text:0000000000004160 var_50          = qword ptr -50h
.text:0000000000004160 var_48          = byte ptr -48h
.text:0000000000004160 var_28          = qword ptr -28h
.text:0000000000004160 var_20          = qword ptr -20h
.text:0000000000004160 arg_0           = byte ptr  8
.text:0000000000004160
.text:0000000000004160 ; __unwind {
.text:0000000000004160                 push    rbp
.text:0000000000004161                 push    rbx
.text:0000000000004162                 mov     r10d, 20h ; ' '
.text:0000000000004168                 xor     r11d, r11d
.text:000000000000416B                 sub     rsp, 0B8h
.text:0000000000004172                 mov     rax, fs:28h
.text:000000000000417B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000004180                 xor     eax, eax
.text:0000000000004182                 lea     rax, [rsp+0C8h+arg_0]
.text:000000000000418A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000004192                 lea     rbx, [rsp+0C8h+arg_0]
.text:000000000000419A                 lea     r8, [rsp+0C8h+var_A8]
.text:000000000000419F                 mov     [rsp+0C8h+var_20], r9
.text:00000000000041A7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000041AF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000041B4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000041BC                 xor     r9d, r9d
.text:00000000000041BF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000041C4                 mov     rbp, rax
.text:00000000000041C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000041D0
.text:00000000000041D0 loc_41D0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000041D0                 cmp     r10d, 2Fh ; '/'
.text:00000000000041D4                 ja      short loc_422C
.text:00000000000041D6                 mov     eax, r10d
.text:00000000000041D9                 mov     r11d, 1
.text:00000000000041DF                 add     r10d, 8
.text:00000000000041E3                 add     rax, rbp
.text:00000000000041E6
.text:00000000000041E6 loc_41E6:                               ; CODE XREF: version_etc+D3↓j
.text:00000000000041E6                 mov     rax, [rax]
.text:00000000000041E9                 test    rax, rax
.text:00000000000041EC                 mov     [r8+r9*8], rax
.text:00000000000041F0                 jz      short loc_41FC
.text:00000000000041F2                 add     r9, 1
.text:00000000000041F6                 cmp     r9, 0Ah
.text:00000000000041FA                 jnz     short loc_41D0
.text:00000000000041FC
.text:00000000000041FC loc_41FC:                               ; CODE XREF: version_etc+90↑j
.text:00000000000041FC                 test    r11b, r11b
.text:00000000000041FF                 jnz     short loc_4225
.text:0000000000004201
.text:0000000000004201 loc_4201:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004201                 call    version_etc_arn
.text:0000000000004206                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000420B                 xor     rax, fs:28h
.text:0000000000004214                 jnz     short loc_4220
.text:0000000000004216                 add     rsp, 0B8h
.text:000000000000421D                 pop     rbx
.text:000000000000421E                 pop     rbp
.text:000000000000421F                 retn
.text:0000000000004220 ; ---------------------------------------------------------------------------
.text:0000000000004220
.text:0000000000004220 loc_4220:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004220                 call    ___stack_chk_fail
.text:0000000000004225 ; ---------------------------------------------------------------------------
.text:0000000000004225
.text:0000000000004225 loc_4225:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004225                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000422A                 jmp     short loc_4201
.text:000000000000422C ; ---------------------------------------------------------------------------
.text:000000000000422C
.text:000000000000422C loc_422C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000422C                 mov     rax, rbx
.text:000000000000422F                 add     rbx, 8
.text:0000000000004233                 jmp     short loc_41E6
.text:0000000000004233 ; } // starts at 4160
.text:0000000000004233 version_etc     endp
.text:0000000000004233
.text:0000000000004233 ; ---------------------------------------------------------------------------
.text:0000000000004235                 align 20h
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240 ; Attributes: info_from_lumina
.text:0000000000004240
.text:0000000000004240 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004240                 public emit_bug_reporting_address
.text:0000000000004240 emit_bug_reporting_address proc near
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 push    rbx
.text:0000000000004241                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004248                 mov     edx, 5          ; category
.text:000000000000424D                 xor     edi, edi        ; domainname
.text:000000000000424F                 call    _dcgettext
.text:0000000000004254                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000425B                 mov     rsi, rax
.text:000000000000425E                 mov     edi, 1
.text:0000000000004263                 xor     eax, eax
.text:0000000000004265                 call    ___printf_chk
.text:000000000000426A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004271                 mov     edx, 5          ; category
.text:0000000000004276                 xor     edi, edi        ; domainname
.text:0000000000004278                 call    _dcgettext
.text:000000000000427D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004284                 lea     rdx, unk_4FFF
.text:000000000000428B                 mov     rsi, rax
.text:000000000000428E                 mov     edi, 1
.text:0000000000004293                 xor     eax, eax
.text:0000000000004295                 call    ___printf_chk
.text:000000000000429A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000042A1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000042A8                 xor     edi, edi        ; domainname
.text:00000000000042AA                 mov     edx, 5          ; category
.text:00000000000042AF                 call    _dcgettext
.text:00000000000042B4                 mov     rsi, rbx        ; stream
.text:00000000000042B7                 mov     rdi, rax        ; s
.text:00000000000042BA                 pop     rbx
.text:00000000000042BB                 jmp     _fputs_unlocked
.text:00000000000042BB ; } // starts at 4240
.text:00000000000042BB emit_bug_reporting_address endp
.text:00000000000042BB
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0
.text:00000000000042C0                 public xmalloc
.text:00000000000042C0 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:00000000000042C0                                         ; quotearg_alloc_mem+81↑p ...
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 push    rbx
.text:00000000000042C1                 mov     rbx, rdi
.text:00000000000042C4                 call    _malloc
.text:00000000000042C9                 test    rax, rax
.text:00000000000042CC                 jnz     short loc_42D3
.text:00000000000042CE                 test    rbx, rbx
.text:00000000000042D1                 jnz     short loc_42D5
.text:00000000000042D3
.text:00000000000042D3 loc_42D3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000042D3                 pop     rbx
.text:00000000000042D4                 retn
.text:00000000000042D5 ; ---------------------------------------------------------------------------
.text:00000000000042D5
.text:00000000000042D5 loc_42D5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000042D5                 call    xalloc_die
.text:00000000000042D5 ; } // starts at 42C0
.text:00000000000042D5 xmalloc         endp
.text:00000000000042D5
.text:00000000000042D5 ; ---------------------------------------------------------------------------
.text:00000000000042DA                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:00000000000042E0                 public xnmalloc
.text:00000000000042E0 xnmalloc        proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 mov     rax, rdi
.text:00000000000042E3                 mul     rsi
.text:00000000000042E6                 mov     rdi, rax
.text:00000000000042E9                 seto    al
.text:00000000000042EC                 test    rdi, rdi
.text:00000000000042EF                 js      short loc_42FB
.text:00000000000042F1                 movzx   eax, al
.text:00000000000042F4                 test    rax, rax
.text:00000000000042F7                 jnz     short loc_42FB
.text:00000000000042F9                 jmp     short xmalloc
.text:00000000000042FB ; ---------------------------------------------------------------------------
.text:00000000000042FB
.text:00000000000042FB loc_42FB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000042FB                                         ; xnmalloc+17↑j
.text:00000000000042FB                 sub     rsp, 8
.text:00000000000042FF                 call    xalloc_die
.text:00000000000042FF ; } // starts at 42E0
.text:00000000000042FF xnmalloc        endp
.text:00000000000042FF
.text:00000000000042FF ; ---------------------------------------------------------------------------
.text:0000000000004304                 align 10h
.text:0000000000004310
.text:0000000000004310 ; =============== S U B R O U T I N E =======================================
.text:0000000000004310
.text:0000000000004310
.text:0000000000004310                 public xcharalloc
.text:0000000000004310 xcharalloc      proc near
.text:0000000000004310 ; __unwind {
.text:0000000000004310                 jmp     short xmalloc
.text:0000000000004310 ; } // starts at 4310
.text:0000000000004310 xcharalloc      endp
.text:0000000000004310
.text:0000000000004310 ; ---------------------------------------------------------------------------
.text:0000000000004312                 align 20h
.text:0000000000004320
.text:0000000000004320 ; =============== S U B R O U T I N E =======================================
.text:0000000000004320
.text:0000000000004320 ; Attributes: info_from_lumina
.text:0000000000004320
.text:0000000000004320 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004320                 public xrealloc
.text:0000000000004320 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004320                                         ; quotearg_n_options+182↑p ...
.text:0000000000004320 ; __unwind {
.text:0000000000004320                 test    rsi, rsi
.text:0000000000004323                 push    rbx
.text:0000000000004324                 mov     rbx, rsi
.text:0000000000004327                 jnz     short loc_432E
.text:0000000000004329                 test    rdi, rdi
.text:000000000000432C                 jnz     short loc_4348
.text:000000000000432E
.text:000000000000432E loc_432E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000432E                 mov     rsi, rbx        ; size
.text:0000000000004331                 call    _realloc
.text:0000000000004336                 test    rax, rax
.text:0000000000004339                 jnz     short loc_4340
.text:000000000000433B                 test    rbx, rbx
.text:000000000000433E                 jnz     short loc_4351
.text:0000000000004340
.text:0000000000004340 loc_4340:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004340                 pop     rbx
.text:0000000000004341                 retn
.text:0000000000004341 ; ---------------------------------------------------------------------------
.text:0000000000004342                 align 8
.text:0000000000004348
.text:0000000000004348 loc_4348:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004348                 call    _free
.text:000000000000434D                 xor     eax, eax
.text:000000000000434F                 pop     rbx
.text:0000000000004350                 retn
.text:0000000000004351 ; ---------------------------------------------------------------------------
.text:0000000000004351
.text:0000000000004351 loc_4351:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004351                 call    xalloc_die
.text:0000000000004351 ; } // starts at 4320
.text:0000000000004351 xrealloc        endp
.text:0000000000004351
.text:0000000000004351 ; ---------------------------------------------------------------------------
.text:0000000000004356                 align 20h
.text:0000000000004360
.text:0000000000004360 ; =============== S U B R O U T I N E =======================================
.text:0000000000004360
.text:0000000000004360 ; Attributes: info_from_lumina
.text:0000000000004360
.text:0000000000004360 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004360                 public xnrealloc
.text:0000000000004360 xnrealloc       proc near
.text:0000000000004360 ; __unwind {
.text:0000000000004360                 mov     rax, rsi
.text:0000000000004363                 mul     rdx
.text:0000000000004366                 mov     rsi, rax
.text:0000000000004369                 seto    al
.text:000000000000436C                 test    rsi, rsi
.text:000000000000436F                 js      short loc_437B
.text:0000000000004371                 movzx   eax, al
.text:0000000000004374                 test    rax, rax
.text:0000000000004377                 jnz     short loc_437B
.text:0000000000004379                 jmp     short xrealloc
.text:000000000000437B ; ---------------------------------------------------------------------------
.text:000000000000437B
.text:000000000000437B loc_437B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000437B                                         ; xnrealloc+17↑j
.text:000000000000437B                 sub     rsp, 8
.text:000000000000437F                 call    xalloc_die
.text:000000000000437F ; } // starts at 4360
.text:000000000000437F xnrealloc       endp
.text:000000000000437F
.text:000000000000437F ; ---------------------------------------------------------------------------
.text:0000000000004384                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390 ; Attributes: info_from_lumina
.text:0000000000004390
.text:0000000000004390 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004390                 public x2nrealloc
.text:0000000000004390 x2nrealloc      proc near
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 test    rdi, rdi
.text:0000000000004393                 mov     r9, rdx
.text:0000000000004396                 mov     rcx, [rsi]
.text:0000000000004399                 jz      short loc_43D0
.text:000000000000439B                 xor     edx, edx
.text:000000000000439D                 mov     rax, 5555555555555554h
.text:00000000000043A7                 div     r9
.text:00000000000043AA                 cmp     rax, rcx
.text:00000000000043AD                 jbe     short loc_43EB
.text:00000000000043AF                 mov     rax, rcx
.text:00000000000043B2                 shr     rax, 1
.text:00000000000043B5                 lea     rcx, [rax+rcx+1]
.text:00000000000043BA
.text:00000000000043BA loc_43BA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000043BA                 mov     [rsi], rcx
.text:00000000000043BD                 imul    rcx, r9
.text:00000000000043C1                 mov     rsi, rcx
.text:00000000000043C4                 jmp     xrealloc
.text:00000000000043C4 ; ---------------------------------------------------------------------------
.text:00000000000043C9                 align 10h
.text:00000000000043D0
.text:00000000000043D0 loc_43D0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000043D0                 test    rcx, rcx
.text:00000000000043D3                 jz      short loc_43F8
.text:00000000000043D5
.text:00000000000043D5 loc_43D5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000043D5                 mov     rax, rcx
.text:00000000000043D8                 mul     r9
.text:00000000000043DB                 seto    dl
.text:00000000000043DE                 test    rax, rax
.text:00000000000043E1                 movzx   edx, dl
.text:00000000000043E4                 js      short loc_43EB
.text:00000000000043E6                 test    rdx, rdx
.text:00000000000043E9                 jz      short loc_43BA
.text:00000000000043EB
.text:00000000000043EB loc_43EB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:00000000000043EB                                         ; x2nrealloc+54↑j
.text:00000000000043EB                 sub     rsp, 8
.text:00000000000043EF                 call    xalloc_die
.text:00000000000043EF ; ---------------------------------------------------------------------------
.text:00000000000043F4                 align 8
.text:00000000000043F8
.text:00000000000043F8 loc_43F8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000043F8                 xor     edx, edx
.text:00000000000043FA                 mov     eax, 80h
.text:00000000000043FF                 xor     r8d, r8d
.text:0000000000004402                 div     r9
.text:0000000000004405                 test    rax, rax
.text:0000000000004408                 setz    r8b
.text:000000000000440C                 lea     rcx, [r8+rax]
.text:0000000000004410                 jmp     short loc_43D5
.text:0000000000004410 ; } // starts at 4390
.text:0000000000004410 x2nrealloc      endp
.text:0000000000004410
.text:0000000000004410 ; ---------------------------------------------------------------------------
.text:0000000000004412                 align 20h
.text:0000000000004420
.text:0000000000004420 ; =============== S U B R O U T I N E =======================================
.text:0000000000004420
.text:0000000000004420 ; Attributes: info_from_lumina
.text:0000000000004420
.text:0000000000004420 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004420                 public x2realloc
.text:0000000000004420 x2realloc       proc near
.text:0000000000004420 ; __unwind {
.text:0000000000004420                 test    rdi, rdi
.text:0000000000004423                 mov     rax, [rsi]
.text:0000000000004426                 jz      short loc_4450
.text:0000000000004428                 mov     rdx, 5555555555555553h
.text:0000000000004432                 cmp     rax, rdx
.text:0000000000004435                 ja      short loc_4461
.text:0000000000004437                 mov     rdx, rax
.text:000000000000443A                 shr     rdx, 1
.text:000000000000443D                 lea     rax, [rdx+rax+1]
.text:0000000000004442
.text:0000000000004442 loc_4442:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004442                 mov     [rsi], rax
.text:0000000000004445                 mov     rsi, rax
.text:0000000000004448                 jmp     xrealloc
.text:0000000000004448 ; ---------------------------------------------------------------------------
.text:000000000000444D                 align 10h
.text:0000000000004450
.text:0000000000004450 loc_4450:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004450                 test    rax, rax
.text:0000000000004453                 mov     edx, 80h
.text:0000000000004458                 cmovz   rax, rdx
.text:000000000000445C                 test    rax, rax
.text:000000000000445F                 jns     short loc_4442
.text:0000000000004461
.text:0000000000004461 loc_4461:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004461                 sub     rsp, 8
.text:0000000000004465                 call    xalloc_die
.text:0000000000004465 ; } // starts at 4420
.text:0000000000004465 x2realloc       endp
.text:0000000000004465
.text:0000000000004465 ; ---------------------------------------------------------------------------
.text:000000000000446A                 align 10h
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004470                 public xzalloc
.text:0000000000004470 xzalloc         proc near
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 push    rbx
.text:0000000000004471                 mov     rbx, rdi
.text:0000000000004474                 call    xmalloc
.text:0000000000004479                 mov     rdx, rbx        ; n
.text:000000000000447C                 xor     esi, esi        ; c
.text:000000000000447E                 mov     rdi, rax        ; s
.text:0000000000004481                 pop     rbx
.text:0000000000004482                 jmp     _memset
.text:0000000000004482 ; } // starts at 4470
.text:0000000000004482 xzalloc         endp
.text:0000000000004482
.text:0000000000004482 ; ---------------------------------------------------------------------------
.text:0000000000004487                 align 10h
.text:0000000000004490
.text:0000000000004490 ; =============== S U B R O U T I N E =======================================
.text:0000000000004490
.text:0000000000004490 ; Attributes: info_from_lumina
.text:0000000000004490
.text:0000000000004490 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004490                 public xcalloc
.text:0000000000004490 xcalloc         proc near
.text:0000000000004490 ; __unwind {
.text:0000000000004490                 mov     rax, rdi
.text:0000000000004493                 sub     rsp, 8
.text:0000000000004497                 mul     rsi
.text:000000000000449A                 seto    dl
.text:000000000000449D                 test    rax, rax
.text:00000000000044A0                 js      short loc_44B9
.text:00000000000044A2                 movzx   edx, dl
.text:00000000000044A5                 test    rdx, rdx
.text:00000000000044A8                 jnz     short loc_44B9
.text:00000000000044AA                 call    _calloc
.text:00000000000044AF                 test    rax, rax
.text:00000000000044B2                 jz      short loc_44B9
.text:00000000000044B4                 add     rsp, 8
.text:00000000000044B8                 retn
.text:00000000000044B9 ; ---------------------------------------------------------------------------
.text:00000000000044B9
.text:00000000000044B9 loc_44B9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000044B9                                         ; xcalloc+18↑j ...
.text:00000000000044B9                 call    xalloc_die
.text:00000000000044B9 ; } // starts at 4490
.text:00000000000044B9 xcalloc         endp
.text:00000000000044B9
.text:00000000000044B9 ; ---------------------------------------------------------------------------
.text:00000000000044BE                 align 20h
.text:00000000000044C0
.text:00000000000044C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044C0
.text:00000000000044C0 ; Attributes: info_from_lumina
.text:00000000000044C0
.text:00000000000044C0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000044C0                 public xmemdup
.text:00000000000044C0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000044C0                                         ; xstrdup+11↓j
.text:00000000000044C0 ; __unwind {
.text:00000000000044C0                 push    rbp
.text:00000000000044C1                 push    rbx
.text:00000000000044C2                 mov     rbp, rdi
.text:00000000000044C5                 mov     rdi, rsi
.text:00000000000044C8                 mov     rbx, rsi
.text:00000000000044CB                 sub     rsp, 8
.text:00000000000044CF                 call    xmalloc
.text:00000000000044D4                 add     rsp, 8
.text:00000000000044D8                 mov     rdx, rbx        ; n
.text:00000000000044DB                 mov     rsi, rbp        ; src
.text:00000000000044DE                 pop     rbx
.text:00000000000044DF                 pop     rbp
.text:00000000000044E0                 mov     rdi, rax        ; dest
.text:00000000000044E3                 jmp     _memcpy
.text:00000000000044E3 ; } // starts at 44C0
.text:00000000000044E3 xmemdup         endp
.text:00000000000044E3
.text:00000000000044E3 ; ---------------------------------------------------------------------------
.text:00000000000044E8                 align 10h
.text:00000000000044F0
.text:00000000000044F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044F0
.text:00000000000044F0
.text:00000000000044F0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000044F0                 public xstrdup
.text:00000000000044F0 xstrdup         proc near
.text:00000000000044F0 ; __unwind {
.text:00000000000044F0                 push    rbx
.text:00000000000044F1                 mov     rbx, rdi
.text:00000000000044F4                 call    _strlen
.text:00000000000044F9                 mov     rdi, rbx        ; src
.text:00000000000044FC                 lea     rsi, [rax+1]    ; n
.text:0000000000004500                 pop     rbx
.text:0000000000004501                 jmp     short xmemdup
.text:0000000000004501 ; } // starts at 44F0
.text:0000000000004501 xstrdup         endp
.text:0000000000004501
.text:0000000000004501 ; ---------------------------------------------------------------------------
.text:0000000000004503                 align 10h
.text:0000000000004510
.text:0000000000004510 ; =============== S U B R O U T I N E =======================================
.text:0000000000004510
.text:0000000000004510 ; Attributes: noreturn info_from_lumina
.text:0000000000004510
.text:0000000000004510 ; void __cdecl xalloc_die()
.text:0000000000004510                 public xalloc_die
.text:0000000000004510 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_34E6↑p
.text:0000000000004510                                         ; xmalloc:loc_42D5↑p ...
.text:0000000000004510 ; __unwind {
.text:0000000000004510                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004517                 sub     rsp, 8
.text:000000000000451B                 mov     edx, 5          ; category
.text:0000000000004520                 xor     edi, edi        ; domainname
.text:0000000000004522                 call    _dcgettext
.text:0000000000004527                 mov     edi, cs:exit_failure ; status
.text:000000000000452D                 lea     rdx, format+4   ; format
.text:0000000000004534                 mov     rcx, rax
.text:0000000000004537                 xor     esi, esi        ; errnum
.text:0000000000004539                 xor     eax, eax
.text:000000000000453B                 call    _error
.text:0000000000004540                 call    _abort
.text:0000000000004540 ; } // starts at 4510
.text:0000000000004540 xalloc_die      endp
.text:0000000000004540
.text:0000000000004540 ; ---------------------------------------------------------------------------
.text:0000000000004545                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550 ; __int64 __fastcall xstrtol(char *nptr)
.text:0000000000004550                 public xstrtol
.text:0000000000004550 xstrtol         proc near               ; CODE XREF: main+149↑p
.text:0000000000004550
.text:0000000000004550 var_50          = qword ptr -50h
.text:0000000000004550 endptr          = qword ptr -48h
.text:0000000000004550 var_40          = qword ptr -40h
.text:0000000000004550
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 push    r15
.text:0000000000004552                 push    r14
.text:0000000000004554                 push    r13
.text:0000000000004556                 push    r12
.text:0000000000004558                 push    rbp
.text:0000000000004559                 push    rbx
.text:000000000000455A                 sub     rsp, 28h
.text:000000000000455E                 mov     rax, fs:28h
.text:0000000000004567                 mov     [rsp+58h+var_40], rax
.text:000000000000456C                 xor     eax, eax
.text:000000000000456E                 cmp     edx, 24h ; '$'
.text:0000000000004571                 ja      loc_4BDF
.text:0000000000004577                 lea     rax, [rsp+58h+endptr]
.text:000000000000457C                 test    rsi, rsi
.text:000000000000457F                 mov     rbx, rsi
.text:0000000000004582                 mov     r12, rdi
.text:0000000000004585                 mov     ebp, edx
.text:0000000000004587                 mov     r14, rcx
.text:000000000000458A                 cmovz   rbx, rax
.text:000000000000458E                 mov     r15, r8
.text:0000000000004591                 call    ___errno_location
.text:0000000000004596                 mov     edx, ebp        ; base
.text:0000000000004598                 mov     dword ptr [rax], 0
.text:000000000000459E                 mov     rsi, rbx        ; endptr
.text:00000000000045A1                 mov     rdi, r12        ; nptr
.text:00000000000045A4                 mov     r13, rax
.text:00000000000045A7                 call    _strtol
.text:00000000000045AC                 mov     rcx, [rbx]
.text:00000000000045AF                 mov     rbp, rax
.text:00000000000045B2                 cmp     rcx, r12
.text:00000000000045B5                 jz      short loc_4618
.text:00000000000045B7                 mov     eax, [r13+0]
.text:00000000000045BB                 test    eax, eax
.text:00000000000045BD                 jnz     short loc_4600
.text:00000000000045BF                 xor     r12d, r12d
.text:00000000000045C2
.text:00000000000045C2 loc_45C2:                               ; CODE XREF: xstrtol+C1↓j
.text:00000000000045C2                 test    r15, r15
.text:00000000000045C5                 jz      short loc_45D4
.text:00000000000045C7                 movzx   r13d, byte ptr [rcx]
.text:00000000000045CB                 test    r13b, r13b
.text:00000000000045CE                 jnz     loc_4653
.text:00000000000045D4
.text:00000000000045D4 loc_45D4:                               ; CODE XREF: xstrtol+75↑j
.text:00000000000045D4                                         ; xstrtol+226↓j
.text:00000000000045D4                 mov     [r14], rbp
.text:00000000000045D7
.text:00000000000045D7 loc_45D7:                               ; CODE XREF: xstrtol+B9↓j
.text:00000000000045D7                                         ; xstrtol+E3↓j ...
.text:00000000000045D7                 mov     rdi, [rsp+58h+var_40]
.text:00000000000045DC                 xor     rdi, fs:28h
.text:00000000000045E5                 mov     eax, r12d
.text:00000000000045E8                 jnz     loc_4BFE
.text:00000000000045EE                 add     rsp, 28h
.text:00000000000045F2                 pop     rbx
.text:00000000000045F3                 pop     rbp
.text:00000000000045F4                 pop     r12
.text:00000000000045F6                 pop     r13
.text:00000000000045F8                 pop     r14
.text:00000000000045FA                 pop     r15
.text:00000000000045FC                 retn
.text:00000000000045FC ; ---------------------------------------------------------------------------
.text:00000000000045FD                 align 20h
.text:0000000000004600
.text:0000000000004600 loc_4600:                               ; CODE XREF: xstrtol+6D↑j
.text:0000000000004600                 cmp     eax, 22h ; '"'
.text:0000000000004603                 mov     r12d, 4
.text:0000000000004609                 jnz     short loc_45D7
.text:000000000000460B                 mov     r12d, 1
.text:0000000000004611                 jmp     short loc_45C2
.text:0000000000004611 ; ---------------------------------------------------------------------------
.text:0000000000004613                 align 8
.text:0000000000004618
.text:0000000000004618 loc_4618:                               ; CODE XREF: xstrtol+65↑j
.text:0000000000004618                 test    r15, r15
.text:000000000000461B                 jz      loc_4AB0
.text:0000000000004621                 movzx   r13d, byte ptr [rcx]
.text:0000000000004625                 mov     [rsp+58h+var_50], rcx
.text:000000000000462A                 mov     r12d, 4
.text:0000000000004630                 test    r13b, r13b
.text:0000000000004633                 jz      short loc_45D7
.text:0000000000004635                 movsx   esi, r13b       ; c
.text:0000000000004639                 mov     rdi, r15        ; s
.text:000000000000463C                 call    _strchr
.text:0000000000004641                 test    rax, rax
.text:0000000000004644                 mov     rcx, [rsp+58h+var_50]
.text:0000000000004649                 jz      short loc_45D7
.text:000000000000464B                 mov     ebp, 1
.text:0000000000004650                 xor     r12d, r12d
.text:0000000000004653
.text:0000000000004653 loc_4653:                               ; CODE XREF: xstrtol+7E↑j
.text:0000000000004653                 movsx   esi, r13b       ; c
.text:0000000000004657                 mov     rdi, r15        ; s
.text:000000000000465A                 mov     [rsp+58h+var_50], rcx
.text:000000000000465F                 call    _strchr
.text:0000000000004664                 test    rax, rax
.text:0000000000004667                 mov     rcx, [rsp+58h+var_50]
.text:000000000000466C                 jz      short def_46FE  ; jumptable 00000000000046FE default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:000000000000466E                 lea     eax, [r13-45h]
.text:0000000000004672                 cmp     al, 2Fh ; '/'
.text:0000000000004674                 ja      short loc_46D8
.text:0000000000004676                 mov     rdx, 814400308945h
.text:0000000000004680                 bt      rdx, rax
.text:0000000000004684                 jnb     short loc_46D8
.text:0000000000004686                 mov     esi, 30h ; '0'  ; c
.text:000000000000468B                 mov     rdi, r15        ; s
.text:000000000000468E                 mov     [rsp+58h+var_50], rcx
.text:0000000000004693                 call    _strchr
.text:0000000000004698                 test    rax, rax
.text:000000000000469B                 mov     rcx, [rsp+58h+var_50]
.text:00000000000046A0                 jz      short loc_46D8
.text:00000000000046A2                 movzx   eax, byte ptr [rcx+1]
.text:00000000000046A6                 cmp     al, 44h ; 'D'
.text:00000000000046A8                 jz      short loc_46B6
.text:00000000000046AA                 cmp     al, 69h ; 'i'
.text:00000000000046AC                 jz      loc_4B98
.text:00000000000046B2                 cmp     al, 42h ; 'B'
.text:00000000000046B4                 jnz     short loc_46D8
.text:00000000000046B6
.text:00000000000046B6 loc_46B6:                               ; CODE XREF: xstrtol+158↑j
.text:00000000000046B6                 mov     edi, 2
.text:00000000000046BB                 mov     eax, 3E8h
.text:00000000000046C0                 jmp     short loc_46E2
.text:00000000000046C0 ; ---------------------------------------------------------------------------
.text:00000000000046C2                 align 8
.text:00000000000046C8
.text:00000000000046C8 def_46FE:                               ; CODE XREF: xstrtol+11C↑j
.text:00000000000046C8                                         ; xstrtol+19A↓j ...
.text:00000000000046C8                 mov     [r14], rbp      ; jumptable 00000000000046FE default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000046CB                 or      r12d, 2
.text:00000000000046CF                 jmp     loc_45D7
.text:00000000000046CF ; ---------------------------------------------------------------------------
.text:00000000000046D4                 align 8
.text:00000000000046D8
.text:00000000000046D8 loc_46D8:                               ; CODE XREF: xstrtol+124↑j
.text:00000000000046D8                                         ; xstrtol+134↑j ...
.text:00000000000046D8                 mov     edi, 1
.text:00000000000046DD                 mov     eax, 400h
.text:00000000000046E2
.text:00000000000046E2 loc_46E2:                               ; CODE XREF: xstrtol+170↑j
.text:00000000000046E2                                         ; xstrtol+65B↓j
.text:00000000000046E2                 sub     r13d, 42h ; 'B' ; switch 54 cases
.text:00000000000046E6                 cmp     r13b, 35h
.text:00000000000046EA                 ja      short def_46FE  ; jumptable 00000000000046FE default case, cases 67,68,70,72-74,76,78,79,81-83,85-88,91-97,100-102,104-106,108,110-115,117,118
.text:00000000000046EC                 lea     rsi, jpt_46FE
.text:00000000000046F3                 movzx   r13d, r13b
.text:00000000000046F7                 movsxd  rdx, ds:(jpt_46FE - 5D68h)[rsi+r13*4]
.text:00000000000046FB                 add     rdx, rsi
.text:00000000000046FE                 jmp     rdx             ; switch jump
.text:0000000000004700 ; ---------------------------------------------------------------------------
.text:0000000000004700
.text:0000000000004700 loc_4700:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004700                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:0000000000004700                 mov     r8, 8000000000000000h ; jumptable 00000000000046FE cases 77,109
.text:000000000000470A                 movsxd  rsi, eax
.text:000000000000470D                 mov     rax, r8
.text:0000000000004710                 cqo
.text:0000000000004712                 idiv    rsi
.text:0000000000004715                 cmp     rbp, rax
.text:0000000000004718                 mov     r9, rax
.text:000000000000471B                 jl      loc_4BC5
.text:0000000000004721                 mov     r10, 7FFFFFFFFFFFFFFFh
.text:000000000000472B                 mov     rax, r10
.text:000000000000472E                 cqo
.text:0000000000004730                 idiv    rsi
.text:0000000000004733                 cmp     rbp, rax
.text:0000000000004736                 jg      loc_4BD2
.text:000000000000473C                 imul    rbp, rsi
.text:0000000000004740                 cmp     r9, rbp
.text:0000000000004743                 jg      loc_4BC5
.text:0000000000004749                 cmp     rax, rbp
.text:000000000000474C                 jl      loc_4BD2
.text:0000000000004752                 imul    rbp, rsi
.text:0000000000004756                 xor     eax, eax
.text:0000000000004758
.text:0000000000004758 loc_4758:                               ; CODE XREF: xstrtol+67D↓j
.text:0000000000004758                                         ; xstrtol+68A↓j
.text:0000000000004758                 or      r12d, eax
.text:000000000000475B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004760
.text:0000000000004760 loc_4760:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004760                                         ; xstrtol+259↓j ...
.text:0000000000004760                 movsxd  rax, edi        ; jumptable 00000000000046FE case 99
.text:0000000000004763                 add     rcx, rax
.text:0000000000004766                 mov     eax, r12d
.text:0000000000004769                 or      eax, 2
.text:000000000000476C                 mov     [rbx], rcx
.text:000000000000476F                 cmp     byte ptr [rcx], 0
.text:0000000000004772                 cmovnz  r12d, eax
.text:0000000000004776                 jmp     loc_45D4
.text:0000000000004776 ; ---------------------------------------------------------------------------
.text:000000000000477B                 align 20h
.text:0000000000004780
.text:0000000000004780 loc_4780:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004780                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:0000000000004780                 mov     rax, 0C000000000000000h ; jumptable 00000000000046FE case 119
.text:000000000000478A                 cmp     rbp, rax
.text:000000000000478D                 jl      loc_4AC0
.text:0000000000004793                 mov     rax, 3FFFFFFFFFFFFFFFh
.text:000000000000479D                 cmp     rbp, rax
.text:00000000000047A0                 jg      loc_4B80
.text:00000000000047A6                 add     rbp, rbp
.text:00000000000047A9                 jmp     short loc_4760  ; jumptable 00000000000046FE case 99
.text:00000000000047A9 ; ---------------------------------------------------------------------------
.text:00000000000047AB                 align 10h
.text:00000000000047B0
.text:00000000000047B0 loc_47B0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000047B0                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:00000000000047B0                 mov     rax, 0FFC0000000000000h ; jumptable 00000000000046FE case 98
.text:00000000000047BA                 cmp     rbp, rax
.text:00000000000047BD                 jl      loc_4AC0
.text:00000000000047C3                 mov     rax, 3FFFFFFFFFFFFFh
.text:00000000000047CD                 cmp     rbp, rax
.text:00000000000047D0                 jg      loc_4B80
.text:00000000000047D6                 shl     rbp, 9
.text:00000000000047DA                 jmp     short loc_4760  ; jumptable 00000000000046FE case 99
.text:00000000000047DA ; ---------------------------------------------------------------------------
.text:00000000000047DC                 align 20h
.text:00000000000047E0
.text:00000000000047E0 loc_47E0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000047E0                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:00000000000047E0                 movsxd  rsi, eax        ; jumptable 00000000000046FE case 90
.text:00000000000047E3                 mov     rax, 8000000000000000h
.text:00000000000047ED                 mov     r8d, 7
.text:00000000000047F3                 cqo
.text:00000000000047F5                 xor     r11d, r11d
.text:00000000000047F8                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000004802                 idiv    rsi
.text:0000000000004805                 mov     r10, rax
.text:0000000000004808                 jmp     short loc_482F
.text:0000000000004808 ; ---------------------------------------------------------------------------
.text:000000000000480A                 align 10h
.text:0000000000004810
.text:0000000000004810 loc_4810:                               ; CODE XREF: xstrtol+2E2↓j
.text:0000000000004810                 mov     rax, r9
.text:0000000000004813                 cqo
.text:0000000000004815                 idiv    rsi
.text:0000000000004818                 cmp     rax, rbp
.text:000000000000481B                 jl      loc_4B08
.text:0000000000004821                 imul    rbp, rsi
.text:0000000000004825
.text:0000000000004825 loc_4825:                               ; CODE XREF: xstrtol+2F4↓j
.text:0000000000004825                                         ; xstrtol+5C8↓j
.text:0000000000004825                 sub     r8d, 1
.text:0000000000004829                 jz      loc_4950
.text:000000000000482F
.text:000000000000482F loc_482F:                               ; CODE XREF: xstrtol+2B8↑j
.text:000000000000482F                 cmp     r10, rbp
.text:0000000000004832                 jle     short loc_4810
.text:0000000000004834                 mov     r11d, 1
.text:000000000000483A                 mov     rbp, 8000000000000000h
.text:0000000000004844                 jmp     short loc_4825
.text:0000000000004844 ; ---------------------------------------------------------------------------
.text:0000000000004846                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004850                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:0000000000004850                 movsxd  rsi, eax        ; jumptable 00000000000046FE case 89
.text:0000000000004853                 mov     rax, 8000000000000000h
.text:000000000000485D                 mov     r8d, 8
.text:0000000000004863                 cqo
.text:0000000000004865                 xor     r11d, r11d
.text:0000000000004868                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000004872                 idiv    rsi
.text:0000000000004875                 mov     r10, rax
.text:0000000000004878                 jmp     short loc_489F
.text:0000000000004878 ; ---------------------------------------------------------------------------
.text:000000000000487A                 align 20h
.text:0000000000004880
.text:0000000000004880 loc_4880:                               ; CODE XREF: xstrtol+352↓j
.text:0000000000004880                 mov     rax, r9
.text:0000000000004883                 cqo
.text:0000000000004885                 idiv    rsi
.text:0000000000004888                 cmp     rax, rbp
.text:000000000000488B                 jl      loc_4AD8
.text:0000000000004891                 imul    rbp, rsi
.text:0000000000004895
.text:0000000000004895 loc_4895:                               ; CODE XREF: xstrtol+364↓j
.text:0000000000004895                                         ; xstrtol+598↓j
.text:0000000000004895                 sub     r8d, 1
.text:0000000000004899                 jz      loc_4950
.text:000000000000489F
.text:000000000000489F loc_489F:                               ; CODE XREF: xstrtol+328↑j
.text:000000000000489F                 cmp     r10, rbp
.text:00000000000048A2                 jle     short loc_4880
.text:00000000000048A4                 mov     r11d, 1
.text:00000000000048AA                 mov     rbp, 8000000000000000h
.text:00000000000048B4                 jmp     short loc_4895
.text:00000000000048B4 ; ---------------------------------------------------------------------------
.text:00000000000048B6                 align 20h
.text:00000000000048C0
.text:00000000000048C0 loc_48C0:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000048C0                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:00000000000048C0                 mov     r8, 8000000000000000h ; jumptable 00000000000046FE cases 75,107
.text:00000000000048CA                 movsxd  rsi, eax
.text:00000000000048CD                 mov     rax, r8
.text:00000000000048D0                 cqo
.text:00000000000048D2                 idiv    rsi
.text:00000000000048D5                 cmp     rbp, rax
.text:00000000000048D8                 jl      loc_4AC0
.text:00000000000048DE                 sub     r8, 1
.text:00000000000048E2                 mov     rax, r8
.text:00000000000048E5                 cqo
.text:00000000000048E7                 idiv    rsi
.text:00000000000048EA                 cmp     rbp, rax
.text:00000000000048ED                 jg      loc_4B80
.text:00000000000048F3                 imul    rbp, rsi
.text:00000000000048F7                 jmp     loc_4760        ; jumptable 00000000000046FE case 99
.text:00000000000048F7 ; ---------------------------------------------------------------------------
.text:00000000000048FC                 align 20h
.text:0000000000004900
.text:0000000000004900 loc_4900:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004900                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:0000000000004900                 movsxd  rsi, eax        ; jumptable 00000000000046FE cases 71,103
.text:0000000000004903                 mov     rax, 8000000000000000h
.text:000000000000490D                 mov     r8d, 3
.text:0000000000004913                 cqo
.text:0000000000004915                 xor     r11d, r11d
.text:0000000000004918                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000004922                 idiv    rsi
.text:0000000000004925                 mov     r10, rax
.text:0000000000004928
.text:0000000000004928 loc_4928:                               ; CODE XREF: xstrtol+3FA↓j
.text:0000000000004928                 cmp     r10, rbp
.text:000000000000492B                 jg      loc_4B20
.text:0000000000004931                 mov     rax, r9
.text:0000000000004934                 cqo
.text:0000000000004936                 idiv    rsi
.text:0000000000004939                 cmp     rax, rbp
.text:000000000000493C                 jl      loc_4BB0
.text:0000000000004942                 imul    rbp, rsi
.text:0000000000004946
.text:0000000000004946 loc_4946:                               ; CODE XREF: xstrtol+5E0↓j
.text:0000000000004946                                         ; xstrtol+670↓j
.text:0000000000004946                 sub     r8d, 1
.text:000000000000494A                 jnz     short loc_4928
.text:000000000000494C                 nop     dword ptr [rax+00h]
.text:0000000000004950
.text:0000000000004950 loc_4950:                               ; CODE XREF: xstrtol+2D9↑j
.text:0000000000004950                                         ; xstrtol+349↑j ...
.text:0000000000004950                 or      r12d, r11d
.text:0000000000004953                 jmp     loc_4760        ; jumptable 00000000000046FE case 99
.text:0000000000004953 ; ---------------------------------------------------------------------------
.text:0000000000004958                 align 20h
.text:0000000000004960
.text:0000000000004960 loc_4960:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004960                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:0000000000004960                 movsxd  rsi, eax        ; jumptable 00000000000046FE case 69
.text:0000000000004963                 mov     rax, 8000000000000000h
.text:000000000000496D                 mov     r8d, 6
.text:0000000000004973                 cqo
.text:0000000000004975                 xor     r11d, r11d
.text:0000000000004978                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000004982                 idiv    rsi
.text:0000000000004985                 mov     r10, rax
.text:0000000000004988                 jmp     short loc_49AB
.text:0000000000004988 ; ---------------------------------------------------------------------------
.text:000000000000498A                 align 10h
.text:0000000000004990
.text:0000000000004990 loc_4990:                               ; CODE XREF: xstrtol+45E↓j
.text:0000000000004990                 mov     rax, r9
.text:0000000000004993                 cqo
.text:0000000000004995                 idiv    rsi
.text:0000000000004998                 cmp     rax, rbp
.text:000000000000499B                 jl      loc_4B38
.text:00000000000049A1                 imul    rbp, rsi
.text:00000000000049A5
.text:00000000000049A5 loc_49A5:                               ; CODE XREF: xstrtol+470↓j
.text:00000000000049A5                                         ; xstrtol+5F8↓j
.text:00000000000049A5                 sub     r8d, 1
.text:00000000000049A9                 jz      short loc_4950
.text:00000000000049AB
.text:00000000000049AB loc_49AB:                               ; CODE XREF: xstrtol+438↑j
.text:00000000000049AB                 cmp     r10, rbp
.text:00000000000049AE                 jle     short loc_4990
.text:00000000000049B0                 mov     r11d, 1
.text:00000000000049B6                 mov     rbp, 8000000000000000h
.text:00000000000049C0                 jmp     short loc_49A5
.text:00000000000049C0 ; ---------------------------------------------------------------------------
.text:00000000000049C2                 align 8
.text:00000000000049C8
.text:00000000000049C8 loc_49C8:                               ; CODE XREF: xstrtol+1AE↑j
.text:00000000000049C8                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:00000000000049C8                 movsxd  rsi, eax        ; jumptable 00000000000046FE case 80
.text:00000000000049CB                 mov     rax, 8000000000000000h
.text:00000000000049D5                 mov     r8d, 5
.text:00000000000049DB                 cqo
.text:00000000000049DD                 xor     r11d, r11d
.text:00000000000049E0                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:00000000000049EA                 idiv    rsi
.text:00000000000049ED                 mov     r10, rax
.text:00000000000049F0                 jmp     short loc_4A17
.text:00000000000049F0 ; ---------------------------------------------------------------------------
.text:00000000000049F2                 align 8
.text:00000000000049F8
.text:00000000000049F8 loc_49F8:                               ; CODE XREF: xstrtol+4CA↓j
.text:00000000000049F8                 mov     rax, r9
.text:00000000000049FB                 cqo
.text:00000000000049FD                 idiv    rsi
.text:0000000000004A00                 cmp     rax, rbp
.text:0000000000004A03                 jl      loc_4B50
.text:0000000000004A09                 imul    rbp, rsi
.text:0000000000004A0D
.text:0000000000004A0D loc_4A0D:                               ; CODE XREF: xstrtol+4DC↓j
.text:0000000000004A0D                                         ; xstrtol+610↓j
.text:0000000000004A0D                 sub     r8d, 1
.text:0000000000004A11                 jz      loc_4950
.text:0000000000004A17
.text:0000000000004A17 loc_4A17:                               ; CODE XREF: xstrtol+4A0↑j
.text:0000000000004A17                 cmp     r10, rbp
.text:0000000000004A1A                 jle     short loc_49F8
.text:0000000000004A1C                 mov     r11d, 1
.text:0000000000004A22                 mov     rbp, 8000000000000000h
.text:0000000000004A2C                 jmp     short loc_4A0D
.text:0000000000004A2C ; ---------------------------------------------------------------------------
.text:0000000000004A2E                 align 10h
.text:0000000000004A30
.text:0000000000004A30 loc_4A30:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004A30                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:0000000000004A30                 mov     rax, 0FFE0000000000000h ; jumptable 00000000000046FE case 66
.text:0000000000004A3A                 cmp     rbp, rax
.text:0000000000004A3D                 jl      loc_4AC0
.text:0000000000004A43                 mov     rax, 1FFFFFFFFFFFFFh
.text:0000000000004A4D                 cmp     rbp, rax
.text:0000000000004A50                 jg      loc_4B80
.text:0000000000004A56                 shl     rbp, 0Ah
.text:0000000000004A5A                 jmp     loc_4760        ; jumptable 00000000000046FE case 99
.text:0000000000004A5A ; ---------------------------------------------------------------------------
.text:0000000000004A5F                 align 20h
.text:0000000000004A60
.text:0000000000004A60 loc_4A60:                               ; CODE XREF: xstrtol+1AE↑j
.text:0000000000004A60                                         ; DATA XREF: .rodata:jpt_46FE↓o
.text:0000000000004A60                 movsxd  rsi, eax        ; jumptable 00000000000046FE cases 84,116
.text:0000000000004A63                 mov     rax, 8000000000000000h
.text:0000000000004A6D                 mov     r8d, 4
.text:0000000000004A73                 cqo
.text:0000000000004A75                 xor     r11d, r11d
.text:0000000000004A78                 mov     r9, 7FFFFFFFFFFFFFFFh
.text:0000000000004A82                 idiv    rsi
.text:0000000000004A85                 mov     r10, rax
.text:0000000000004A88
.text:0000000000004A88 loc_4A88:                               ; CODE XREF: xstrtol+556↓j
.text:0000000000004A88                 cmp     r10, rbp
.text:0000000000004A8B                 jg      short loc_4AF0
.text:0000000000004A8D                 mov     rax, r9
.text:0000000000004A90                 cqo
.text:0000000000004A92                 idiv    rsi
.text:0000000000004A95                 cmp     rax, rbp
.text:0000000000004A98                 jl      loc_4B68
.text:0000000000004A9E                 imul    rbp, rsi
.text:0000000000004AA2
.text:0000000000004AA2 loc_4AA2:                               ; CODE XREF: xstrtol+5B0↓j
.text:0000000000004AA2                                         ; xstrtol+628↓j
.text:0000000000004AA2                 sub     r8d, 1
.text:0000000000004AA6                 jnz     short loc_4A88
.text:0000000000004AA8                 jmp     loc_4950
.text:0000000000004AA8 ; ---------------------------------------------------------------------------
.text:0000000000004AAD                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: xstrtol+CB↑j
.text:0000000000004AB0                 mov     r12d, 4
.text:0000000000004AB6                 jmp     loc_45D7
.text:0000000000004AB6 ; ---------------------------------------------------------------------------
.text:0000000000004ABB                 align 20h
.text:0000000000004AC0
.text:0000000000004AC0 loc_4AC0:                               ; CODE XREF: xstrtol+23D↑j
.text:0000000000004AC0                                         ; xstrtol+26D↑j ...
.text:0000000000004AC0                 mov     r12d, 1
.text:0000000000004AC6                 mov     rbp, 8000000000000000h
.text:0000000000004AD0                 jmp     loc_4760        ; jumptable 00000000000046FE case 99
.text:0000000000004AD0 ; ---------------------------------------------------------------------------
.text:0000000000004AD5                 align 8
.text:0000000000004AD8
.text:0000000000004AD8 loc_4AD8:                               ; CODE XREF: xstrtol+33B↑j
.text:0000000000004AD8                 mov     r11d, 1
.text:0000000000004ADE                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000004AE8                 jmp     loc_4895
.text:0000000000004AE8 ; ---------------------------------------------------------------------------
.text:0000000000004AED                 align 10h
.text:0000000000004AF0
.text:0000000000004AF0 loc_4AF0:                               ; CODE XREF: xstrtol+53B↑j
.text:0000000000004AF0                 mov     r11d, 1
.text:0000000000004AF6                 mov     rbp, 8000000000000000h
.text:0000000000004B00                 jmp     short loc_4AA2
.text:0000000000004B00 ; ---------------------------------------------------------------------------
.text:0000000000004B02                 align 8
.text:0000000000004B08
.text:0000000000004B08 loc_4B08:                               ; CODE XREF: xstrtol+2CB↑j
.text:0000000000004B08                 mov     r11d, 1
.text:0000000000004B0E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000004B18                 jmp     loc_4825
.text:0000000000004B18 ; ---------------------------------------------------------------------------
.text:0000000000004B1D                 align 20h
.text:0000000000004B20
.text:0000000000004B20 loc_4B20:                               ; CODE XREF: xstrtol+3DB↑j
.text:0000000000004B20                 mov     r11d, 1
.text:0000000000004B26                 mov     rbp, 8000000000000000h
.text:0000000000004B30                 jmp     loc_4946
.text:0000000000004B30 ; ---------------------------------------------------------------------------
.text:0000000000004B35                 align 8
.text:0000000000004B38
.text:0000000000004B38 loc_4B38:                               ; CODE XREF: xstrtol+44B↑j
.text:0000000000004B38                 mov     r11d, 1
.text:0000000000004B3E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000004B48                 jmp     loc_49A5
.text:0000000000004B48 ; ---------------------------------------------------------------------------
.text:0000000000004B4D                 align 10h
.text:0000000000004B50
.text:0000000000004B50 loc_4B50:                               ; CODE XREF: xstrtol+4B3↑j
.text:0000000000004B50                 mov     r11d, 1
.text:0000000000004B56                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000004B60                 jmp     loc_4A0D
.text:0000000000004B60 ; ---------------------------------------------------------------------------
.text:0000000000004B65                 align 8
.text:0000000000004B68
.text:0000000000004B68 loc_4B68:                               ; CODE XREF: xstrtol+548↑j
.text:0000000000004B68                 mov     r11d, 1
.text:0000000000004B6E                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000004B78                 jmp     loc_4AA2
.text:0000000000004B78 ; ---------------------------------------------------------------------------
.text:0000000000004B7D                 align 20h
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: xstrtol+250↑j
.text:0000000000004B80                                         ; xstrtol+280↑j ...
.text:0000000000004B80                 mov     r12d, 1
.text:0000000000004B86                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000004B90                 jmp     loc_4760        ; jumptable 00000000000046FE case 99
.text:0000000000004B90 ; ---------------------------------------------------------------------------
.text:0000000000004B95                 align 8
.text:0000000000004B98
.text:0000000000004B98 loc_4B98:                               ; CODE XREF: xstrtol+15C↑j
.text:0000000000004B98                 xor     edi, edi
.text:0000000000004B9A                 cmp     byte ptr [rcx+2], 42h ; 'B'
.text:0000000000004B9E                 mov     eax, 400h
.text:0000000000004BA3                 setz    dil
.text:0000000000004BA7                 lea     edi, [rdi+rdi+1]
.text:0000000000004BAB                 jmp     loc_46E2
.text:0000000000004BB0 ; ---------------------------------------------------------------------------
.text:0000000000004BB0
.text:0000000000004BB0 loc_4BB0:                               ; CODE XREF: xstrtol+3EC↑j
.text:0000000000004BB0                 mov     r11d, 1
.text:0000000000004BB6                 mov     rbp, 7FFFFFFFFFFFFFFFh
.text:0000000000004BC0                 jmp     loc_4946
.text:0000000000004BC5 ; ---------------------------------------------------------------------------
.text:0000000000004BC5
.text:0000000000004BC5 loc_4BC5:                               ; CODE XREF: xstrtol+1CB↑j
.text:0000000000004BC5                                         ; xstrtol+1F3↑j
.text:0000000000004BC5                 mov     eax, 1
.text:0000000000004BCA                 mov     rbp, r8
.text:0000000000004BCD                 jmp     loc_4758
.text:0000000000004BD2 ; ---------------------------------------------------------------------------
.text:0000000000004BD2
.text:0000000000004BD2 loc_4BD2:                               ; CODE XREF: xstrtol+1E6↑j
.text:0000000000004BD2                                         ; xstrtol+1FC↑j
.text:0000000000004BD2                 mov     eax, 1
.text:0000000000004BD7                 mov     rbp, r10
.text:0000000000004BDA                 jmp     loc_4758
.text:0000000000004BDF ; ---------------------------------------------------------------------------
.text:0000000000004BDF
.text:0000000000004BDF loc_4BDF:                               ; CODE XREF: xstrtol+21↑j
.text:0000000000004BDF                 lea     rcx, __PRETTY_FUNCTION___4162 ; "xstrtol"
.text:0000000000004BE6                 lea     rsi, file       ; "../coreutils-8.31/lib/xstrtol.c"
.text:0000000000004BED                 lea     rdi, assertion  ; "0 <= strtol_base && strtol_base <= 36"
.text:0000000000004BF4                 mov     edx, 54h ; 'T'  ; line
.text:0000000000004BF9                 call    ___assert_fail
.text:0000000000004BFE ; ---------------------------------------------------------------------------
.text:0000000000004BFE
.text:0000000000004BFE loc_4BFE:                               ; CODE XREF: xstrtol+98↑j
.text:0000000000004BFE                 call    ___stack_chk_fail
.text:0000000000004BFE ; } // starts at 4550
.text:0000000000004BFE xstrtol         endp
.text:0000000000004BFE
.text:0000000000004BFE ; ---------------------------------------------------------------------------
.text:0000000000004C03                 align 10h
.text:0000000000004C10
.text:0000000000004C10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C10
.text:0000000000004C10 ; Attributes: info_from_lumina
.text:0000000000004C10
.text:0000000000004C10 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004C10                 public rpl_mbrtowc
.text:0000000000004C10 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004C10
.text:0000000000004C10 pwc             = dword ptr -34h
.text:0000000000004C10 var_30          = qword ptr -30h
.text:0000000000004C10
.text:0000000000004C10 ; __unwind {
.text:0000000000004C10                 push    r13
.text:0000000000004C12                 push    r12
.text:0000000000004C14                 mov     r13, rsi
.text:0000000000004C17                 push    rbp
.text:0000000000004C18                 push    rbx
.text:0000000000004C19                 mov     rbx, rdi
.text:0000000000004C1C                 mov     r12, rdx
.text:0000000000004C1F                 sub     rsp, 18h
.text:0000000000004C23                 mov     rax, fs:28h
.text:0000000000004C2C                 mov     [rsp+38h+var_30], rax
.text:0000000000004C31                 xor     eax, eax
.text:0000000000004C33                 lea     rax, [rsp+38h+pwc]
.text:0000000000004C38                 test    rdi, rdi
.text:0000000000004C3B                 cmovz   rbx, rax
.text:0000000000004C3F                 mov     rdi, rbx        ; pwc
.text:0000000000004C42                 call    _mbrtowc
.text:0000000000004C47                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000004C4B                 mov     rbp, rax
.text:0000000000004C4E                 jbe     short loc_4C70
.text:0000000000004C50                 test    r12, r12
.text:0000000000004C53                 jz      short loc_4C70
.text:0000000000004C55                 xor     edi, edi
.text:0000000000004C57                 call    hard_locale
.text:0000000000004C5C                 test    al, al
.text:0000000000004C5E                 jnz     short loc_4C70
.text:0000000000004C60                 movzx   eax, byte ptr [r13+0]
.text:0000000000004C65                 mov     ebp, 1
.text:0000000000004C6A                 mov     [rbx], eax
.text:0000000000004C6C                 nop     dword ptr [rax+00h]
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004C70                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004C70                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004C75                 xor     rdx, fs:28h
.text:0000000000004C7E                 mov     rax, rbp
.text:0000000000004C81                 jnz     short loc_4C8E
.text:0000000000004C83                 add     rsp, 18h
.text:0000000000004C87                 pop     rbx
.text:0000000000004C88                 pop     rbp
.text:0000000000004C89                 pop     r12
.text:0000000000004C8B                 pop     r13
.text:0000000000004C8D                 retn
.text:0000000000004C8E ; ---------------------------------------------------------------------------
.text:0000000000004C8E
.text:0000000000004C8E loc_4C8E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:0000000000004C8E                 call    ___stack_chk_fail
.text:0000000000004C8E ; } // starts at 4C10
.text:0000000000004C8E rpl_mbrtowc     endp
.text:0000000000004C8E
.text:0000000000004C8E ; ---------------------------------------------------------------------------
.text:0000000000004C93                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0 ; Attributes: info_from_lumina
.text:0000000000004CA0
.text:0000000000004CA0 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004CA0                 public close_stream
.text:0000000000004CA0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004CA0                                         ; close_stdout+33↑p
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 push    r12
.text:0000000000004CA2                 push    rbp
.text:0000000000004CA3                 mov     rbp, rdi
.text:0000000000004CA6                 push    rbx
.text:0000000000004CA7                 call    ___fpending
.text:0000000000004CAC                 mov     ebx, [rbp+0]
.text:0000000000004CAF                 mov     rdi, rbp        ; stream
.text:0000000000004CB2                 mov     r12, rax
.text:0000000000004CB5                 call    rpl_fclose
.text:0000000000004CBA                 and     ebx, 20h
.text:0000000000004CBD                 test    ebx, ebx
.text:0000000000004CBF                 jnz     short loc_4CD8
.text:0000000000004CC1                 test    eax, eax
.text:0000000000004CC3                 jz      short loc_4CCF
.text:0000000000004CC5                 test    r12, r12
.text:0000000000004CC8                 mov     eax, 0FFFFFFFFh
.text:0000000000004CCD                 jz      short loc_4D08
.text:0000000000004CCF
.text:0000000000004CCF loc_4CCF:                               ; CODE XREF: close_stream+23↑j
.text:0000000000004CCF                 pop     rbx
.text:0000000000004CD0                 pop     rbp
.text:0000000000004CD1                 pop     r12
.text:0000000000004CD3                 retn
.text:0000000000004CD3 ; ---------------------------------------------------------------------------
.text:0000000000004CD4                 align 8
.text:0000000000004CD8
.text:0000000000004CD8 loc_4CD8:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004CD8                 test    eax, eax
.text:0000000000004CDA                 jnz     short loc_4CF8
.text:0000000000004CDC                 call    ___errno_location
.text:0000000000004CE1                 mov     dword ptr [rax], 0
.text:0000000000004CE7                 mov     eax, 0FFFFFFFFh
.text:0000000000004CEC                 pop     rbx
.text:0000000000004CED                 pop     rbp
.text:0000000000004CEE                 pop     r12
.text:0000000000004CF0                 retn
.text:0000000000004CF0 ; ---------------------------------------------------------------------------
.text:0000000000004CF1                 align 8
.text:0000000000004CF8
.text:0000000000004CF8 loc_4CF8:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004CF8                 pop     rbx
.text:0000000000004CF9                 mov     eax, 0FFFFFFFFh
.text:0000000000004CFE                 pop     rbp
.text:0000000000004CFF                 pop     r12
.text:0000000000004D01                 retn
.text:0000000000004D01 ; ---------------------------------------------------------------------------
.text:0000000000004D02                 align 8
.text:0000000000004D08
.text:0000000000004D08 loc_4D08:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004D08                 call    ___errno_location
.text:0000000000004D0D                 cmp     dword ptr [rax], 9
.text:0000000000004D10                 pop     rbx
.text:0000000000004D11                 pop     rbp
.text:0000000000004D12                 pop     r12
.text:0000000000004D14                 setnz   al
.text:0000000000004D17                 movzx   eax, al
.text:0000000000004D1A                 neg     eax
.text:0000000000004D1C                 retn
.text:0000000000004D1C ; } // starts at 4CA0
.text:0000000000004D1C close_stream    endp
.text:0000000000004D1C
.text:0000000000004D1C ; ---------------------------------------------------------------------------
.text:0000000000004D1D                 align 20h
.text:0000000000004D20
.text:0000000000004D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D20
.text:0000000000004D20
.text:0000000000004D20                 public hard_locale
.text:0000000000004D20 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004D20 ; __unwind {
.text:0000000000004D20                 sub     rsp, 8
.text:0000000000004D24                 xor     esi, esi        ; locale
.text:0000000000004D26                 call    _setlocale
.text:0000000000004D2B                 mov     rdx, rax
.text:0000000000004D2E                 mov     eax, 1
.text:0000000000004D33                 test    rdx, rdx
.text:0000000000004D36                 jz      short loc_4D55
.text:0000000000004D38                 lea     rdi, aC         ; "C"
.text:0000000000004D3F                 mov     ecx, 2
.text:0000000000004D44                 mov     rsi, rdx
.text:0000000000004D47                 repe cmpsb
.text:0000000000004D49                 setnbe  cl
.text:0000000000004D4C                 sbb     cl, 0
.text:0000000000004D4F                 xor     eax, eax
.text:0000000000004D51                 test    cl, cl
.text:0000000000004D53                 jnz     short loc_4D60
.text:0000000000004D55
.text:0000000000004D55 loc_4D55:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004D55                 add     rsp, 8
.text:0000000000004D59                 retn
.text:0000000000004D59 ; ---------------------------------------------------------------------------
.text:0000000000004D5A                 align 20h
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004D60                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004D67                 mov     ecx, 6
.text:0000000000004D6C                 mov     rsi, rdx
.text:0000000000004D6F                 repe cmpsb
.text:0000000000004D71                 setnbe  al
.text:0000000000004D74                 sbb     al, 0
.text:0000000000004D76                 test    al, al
.text:0000000000004D78                 setnz   al
.text:0000000000004D7B                 add     rsp, 8
.text:0000000000004D7F                 retn
.text:0000000000004D7F ; } // starts at 4D20
.text:0000000000004D7F hard_locale     endp
.text:0000000000004D7F
.text:0000000000004D80
.text:0000000000004D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004D80
.text:0000000000004D80
.text:0000000000004D80                 public locale_charset
.text:0000000000004D80 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004D80 ; __unwind {
.text:0000000000004D80                 sub     rsp, 8
.text:0000000000004D84                 mov     edi, 0Eh        ; item
.text:0000000000004D89                 call    _nl_langinfo
.text:0000000000004D8E                 test    rax, rax
.text:0000000000004D91                 jz      short loc_4DB0
.text:0000000000004D93                 cmp     byte ptr [rax], 0
.text:0000000000004D96                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004D9D                 cmovz   rax, rdx
.text:0000000000004DA1                 add     rsp, 8
.text:0000000000004DA5                 retn
.text:0000000000004DA5 ; ---------------------------------------------------------------------------
.text:0000000000004DA6                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004DB0                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004DB7                 add     rsp, 8
.text:0000000000004DBB                 retn
.text:0000000000004DBB ; } // starts at 4D80
.text:0000000000004DBB locale_charset  endp
.text:0000000000004DBB
.text:0000000000004DBB ; ---------------------------------------------------------------------------
.text:0000000000004DBC                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004DC0
.text:0000000000004DC0 ; Attributes: info_from_lumina
.text:0000000000004DC0
.text:0000000000004DC0 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004DC0                 public rpl_fclose
.text:0000000000004DC0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004DC0 ; __unwind {
.text:0000000000004DC0                 push    r12
.text:0000000000004DC2                 push    rbp
.text:0000000000004DC3                 push    rbx
.text:0000000000004DC4                 mov     rbx, rdi
.text:0000000000004DC7                 call    _fileno
.text:0000000000004DCC                 test    eax, eax
.text:0000000000004DCE                 mov     rdi, rbx        ; fp
.text:0000000000004DD1                 js      short loc_4E27
.text:0000000000004DD3                 call    ___freading
.text:0000000000004DD8                 test    eax, eax
.text:0000000000004DDA                 jnz     short loc_4E08
.text:0000000000004DDC
.text:0000000000004DDC loc_4DDC:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004DDC                 mov     rdi, rbx        ; stream
.text:0000000000004DDF                 call    rpl_fflush
.text:0000000000004DE4                 test    eax, eax
.text:0000000000004DE6                 jz      short loc_4E24
.text:0000000000004DE8                 call    ___errno_location
.text:0000000000004DED                 mov     r12d, [rax]
.text:0000000000004DF0                 mov     rdi, rbx        ; stream
.text:0000000000004DF3                 mov     rbp, rax
.text:0000000000004DF6                 call    _fclose
.text:0000000000004DFB                 test    r12d, r12d
.text:0000000000004DFE                 jnz     short loc_4E30
.text:0000000000004E00
.text:0000000000004E00 loc_4E00:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004E00                 pop     rbx
.text:0000000000004E01                 pop     rbp
.text:0000000000004E02                 pop     r12
.text:0000000000004E04                 retn
.text:0000000000004E04 ; ---------------------------------------------------------------------------
.text:0000000000004E05                 align 8
.text:0000000000004E08
.text:0000000000004E08 loc_4E08:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004E08                 mov     rdi, rbx        ; stream
.text:0000000000004E0B                 call    _fileno
.text:0000000000004E10                 xor     esi, esi        ; offset
.text:0000000000004E12                 mov     edx, 1          ; whence
.text:0000000000004E17                 mov     edi, eax        ; fd
.text:0000000000004E19                 call    _lseek
.text:0000000000004E1E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004E22                 jnz     short loc_4DDC
.text:0000000000004E24
.text:0000000000004E24 loc_4E24:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004E24                 mov     rdi, rbx        ; stream
.text:0000000000004E27
.text:0000000000004E27 loc_4E27:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004E27                 pop     rbx
.text:0000000000004E28                 pop     rbp
.text:0000000000004E29                 pop     r12
.text:0000000000004E2B                 jmp     _fclose
.text:0000000000004E30 ; ---------------------------------------------------------------------------
.text:0000000000004E30
.text:0000000000004E30 loc_4E30:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004E30                 mov     [rbp+0], r12d
.text:0000000000004E34                 mov     eax, 0FFFFFFFFh
.text:0000000000004E39                 jmp     short loc_4E00
.text:0000000000004E39 ; } // starts at 4DC0
.text:0000000000004E39 rpl_fclose      endp
.text:0000000000004E39
.text:0000000000004E39 ; ---------------------------------------------------------------------------
.text:0000000000004E3B                 align 20h
.text:0000000000004E40
.text:0000000000004E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E40
.text:0000000000004E40 ; Attributes: info_from_lumina
.text:0000000000004E40
.text:0000000000004E40 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004E40                 public rpl_fflush
.text:0000000000004E40 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004E40 ; __unwind {
.text:0000000000004E40                 test    rdi, rdi
.text:0000000000004E43                 push    rbx
.text:0000000000004E44                 mov     rbx, rdi
.text:0000000000004E47                 jz      short loc_4E5A
.text:0000000000004E49                 call    ___freading
.text:0000000000004E4E                 test    eax, eax
.text:0000000000004E50                 jz      short loc_4E5A
.text:0000000000004E52                 test    dword ptr [rbx], 100h
.text:0000000000004E58                 jnz     short loc_4E68
.text:0000000000004E5A
.text:0000000000004E5A loc_4E5A:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004E5A                                         ; rpl_fflush+10↑j
.text:0000000000004E5A                 mov     rdi, rbx        ; stream
.text:0000000000004E5D                 pop     rbx
.text:0000000000004E5E                 jmp     _fflush
.text:0000000000004E5E ; ---------------------------------------------------------------------------
.text:0000000000004E63                 align 8
.text:0000000000004E68
.text:0000000000004E68 loc_4E68:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004E68                 mov     rdi, rbx
.text:0000000000004E6B                 mov     edx, 1
.text:0000000000004E70                 xor     esi, esi
.text:0000000000004E72                 call    rpl_fseeko
.text:0000000000004E77                 mov     rdi, rbx        ; stream
.text:0000000000004E7A                 pop     rbx
.text:0000000000004E7B                 jmp     _fflush
.text:0000000000004E7B ; } // starts at 4E40
.text:0000000000004E7B rpl_fflush      endp
.text:0000000000004E7B
.text:0000000000004E80
.text:0000000000004E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000004E80
.text:0000000000004E80 ; Attributes: info_from_lumina
.text:0000000000004E80
.text:0000000000004E80 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004E80                 public rpl_fseeko
.text:0000000000004E80 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004E80 ; __unwind {
.text:0000000000004E80                 mov     rax, [rdi+8]
.text:0000000000004E84                 cmp     [rdi+10h], rax
.text:0000000000004E88                 jz      short loc_4E90
.text:0000000000004E8A
.text:0000000000004E8A loc_4E8A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004E8A                                         ; rpl_fseeko+1F↓j
.text:0000000000004E8A                 jmp     _fseeko
.text:0000000000004E8A ; ---------------------------------------------------------------------------
.text:0000000000004E8F                 align 10h
.text:0000000000004E90
.text:0000000000004E90 loc_4E90:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004E90                 mov     rax, [rdi+20h]
.text:0000000000004E94                 cmp     [rdi+28h], rax
.text:0000000000004E98                 jnz     short loc_4E8A
.text:0000000000004E9A                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004E9F                 jnz     short loc_4E8A
.text:0000000000004EA1                 push    r12
.text:0000000000004EA3                 push    rbp
.text:0000000000004EA4                 mov     r12d, edx
.text:0000000000004EA7                 push    rbx
.text:0000000000004EA8                 mov     rbp, rsi
.text:0000000000004EAB                 mov     rbx, rdi
.text:0000000000004EAE                 call    _fileno
.text:0000000000004EB3                 mov     edx, r12d       ; whence
.text:0000000000004EB6                 mov     rsi, rbp        ; offset
.text:0000000000004EB9                 mov     edi, eax        ; fd
.text:0000000000004EBB                 call    _lseek
.text:0000000000004EC0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004EC4                 jz      short loc_4ED2
.text:0000000000004EC6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004EC9                 mov     [rbx+90h], rax
.text:0000000000004ED0                 xor     eax, eax
.text:0000000000004ED2
.text:0000000000004ED2 loc_4ED2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004ED2                 pop     rbx
.text:0000000000004ED3                 pop     rbp
.text:0000000000004ED4                 pop     r12
.text:0000000000004ED6                 retn
.text:0000000000004ED6 ; } // starts at 4E80
.text:0000000000004ED6 rpl_fseeko      endp
.text:0000000000004ED6
.text:0000000000004ED6 ; ---------------------------------------------------------------------------
.text:0000000000004ED7                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004EE0
.text:0000000000004EE0 ; Attributes: info_from_lumina
.text:0000000000004EE0
.text:0000000000004EE0 ; void _libc_csu_init(void)
.text:0000000000004EE0                 public __libc_csu_init
.text:0000000000004EE0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004EE0 ; __unwind {
.text:0000000000004EE0                 push    r15
.text:0000000000004EE2                 push    r14
.text:0000000000004EE4                 mov     r15, rdx
.text:0000000000004EE7                 push    r13
.text:0000000000004EE9                 push    r12
.text:0000000000004EEB                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004EF2                 push    rbp
.text:0000000000004EF3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004EFA                 push    rbx
.text:0000000000004EFB                 mov     r13d, edi
.text:0000000000004EFE                 mov     r14, rsi
.text:0000000000004F01                 sub     rbp, r12
.text:0000000000004F04                 sub     rsp, 8
.text:0000000000004F08                 sar     rbp, 3
.text:0000000000004F0C                 call    _init_proc
.text:0000000000004F11                 test    rbp, rbp
.text:0000000000004F14                 jz      short loc_4F36
.text:0000000000004F16                 xor     ebx, ebx
.text:0000000000004F18                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004F20
.text:0000000000004F20 loc_4F20:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004F20                 mov     rdx, r15
.text:0000000000004F23                 mov     rsi, r14
.text:0000000000004F26                 mov     edi, r13d
.text:0000000000004F29                 call    ds:(__frame_dummy_init_array_entry - 207B70h)[r12+rbx*8]
.text:0000000000004F2D                 add     rbx, 1
.text:0000000000004F31                 cmp     rbp, rbx
.text:0000000000004F34                 jnz     short loc_4F20
.text:0000000000004F36
.text:0000000000004F36 loc_4F36:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004F36                 add     rsp, 8
.text:0000000000004F3A                 pop     rbx
.text:0000000000004F3B                 pop     rbp
.text:0000000000004F3C                 pop     r12
.text:0000000000004F3E                 pop     r13
.text:0000000000004F40                 pop     r14
.text:0000000000004F42                 pop     r15
.text:0000000000004F44                 retn
.text:0000000000004F44 ; } // starts at 4EE0
.text:0000000000004F44 __libc_csu_init endp
.text:0000000000004F44
.text:0000000000004F44 ; ---------------------------------------------------------------------------
.text:0000000000004F45                 align 10h
.text:0000000000004F50
.text:0000000000004F50 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F50
.text:0000000000004F50
.text:0000000000004F50 ; void _libc_csu_fini(void)
.text:0000000000004F50                 public __libc_csu_fini
.text:0000000000004F50 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004F50 ; __unwind {
.text:0000000000004F50                 rep retn
.text:0000000000004F50 ; } // starts at 4F50
.text:0000000000004F50 __libc_csu_fini endp
.text:0000000000004F50
.text:0000000000004F50 ; ---------------------------------------------------------------------------
.text:0000000000004F52                 align 20h
.text:0000000000004F60
.text:0000000000004F60 ; =============== S U B R O U T I N E =======================================
.text:0000000000004F60
.text:0000000000004F60
.text:0000000000004F60 atexit          proc near               ; CODE XREF: main+70↑p
.text:0000000000004F60 ; __unwind {
.text:0000000000004F60                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004F67                 xor     esi, esi        ; obj
.text:0000000000004F69                 jmp     ___cxa_atexit
.text:0000000000004F69 ; } // starts at 4F60
.text:0000000000004F69 atexit          endp
.text:0000000000004F69
.text:0000000000004F69 _text           ends
.text:0000000000004F69
LOAD:0000000000004F6E ; ===========================================================================
LOAD:0000000000004F6E
LOAD:0000000000004F6E ; Segment type: Pure code
LOAD:0000000000004F6E ; Segment permissions: Read/Execute
LOAD:0000000000004F6E LOAD            segment byte public 'CODE' use64
LOAD:0000000000004F6E                 assume cs:LOAD
LOAD:0000000000004F6E                 ;org 4F6Eh
LOAD:0000000000004F6E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004F6E                 align 10h
LOAD:0000000000004F6E LOAD            ends
LOAD:0000000000004F6E
.fini:0000000000004F70 ; ===========================================================================
.fini:0000000000004F70
.fini:0000000000004F70 ; Segment type: Pure code
.fini:0000000000004F70 ; Segment permissions: Read/Execute
.fini:0000000000004F70 _fini           segment dword public 'CODE' use64
.fini:0000000000004F70                 assume cs:_fini
.fini:0000000000004F70                 ;org 4F70h
.fini:0000000000004F70                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004F70
.fini:0000000000004F70 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004F70
.fini:0000000000004F70
.fini:0000000000004F70                 public _term_proc
.fini:0000000000004F70 _term_proc      proc near
.fini:0000000000004F70                 sub     rsp, 8          ; _fini
.fini:0000000000004F74                 add     rsp, 8
.fini:0000000000004F78                 retn
.fini:0000000000004F78 _term_proc      endp
.fini:0000000000004F78
.fini:0000000000004F78 _fini           ends
.fini:0000000000004F78
LOAD:0000000000004F79 ; ===========================================================================
LOAD:0000000000004F79
LOAD:0000000000004F79 ; Segment type: Pure code
LOAD:0000000000004F79 ; Segment permissions: Read/Execute
LOAD:0000000000004F79 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004F79                 assume cs:LOAD
LOAD:0000000000004F79                 ;org 4F79h
LOAD:0000000000004F79                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004F79                 align 20h
LOAD:0000000000004F79 LOAD            ends
LOAD:0000000000004F79
.rodata:0000000000004F80 ; ===========================================================================
.rodata:0000000000004F80
.rodata:0000000000004F80 ; Segment type: Pure data
.rodata:0000000000004F80 ; Segment permissions: Read
.rodata:0000000000004F80 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004F80                 assume cs:_rodata
.rodata:0000000000004F80                 ;org 4F80h
.rodata:0000000000004F80                 public _IO_stdin_used
.rodata:0000000000004F80 _IO_stdin_used  db    1
.rodata:0000000000004F81                 db    0
.rodata:0000000000004F82                 db    2
.rodata:0000000000004F83                 db    0
.rodata:0000000000004F84 aNice           db 'nice',0             ; DATA XREF: main+1D3↑o
.rodata:0000000000004F84                                         ; usage+138↑o ...
.rodata:0000000000004F89 asc_4F89        db '[',0                ; DATA XREF: usage+16D↑o
.rodata:0000000000004F8B aTestInvocation db 'test invocation',0  ; DATA XREF: usage+194↑o
.rodata:0000000000004F9B aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004F9B                                         ; DATA XREF: usage+1C4↑o
.rodata:0000000000004F9B                                         ; usage+2BC↑o ...
.rodata:0000000000004FB1 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1D5↑o
.rodata:0000000000004FBB aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1E1↑o
.rodata:0000000000004FCA aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+174↑o
.rodata:0000000000004FD4 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+1A0↑o
.rodata:0000000000004FDE aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+1B8↑o
.rodata:0000000000004FE8 ; const char aSOnlineHelpS[]
.rodata:0000000000004FE8 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+22A↑o
.rodata:0000000000004FE8                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004FFF unk_4FFF        db  47h ; G             ; DATA XREF: main+1CC↑o
.rodata:0000000000004FFF                                         ; usage+246↑o ...
.rodata:0000000000005000                 db  4Eh ; N
.rodata:0000000000005001                 db  55h ; U
.rodata:0000000000005002                 db  20h
.rodata:0000000000005003 ; const char domainname[]
.rodata:0000000000005003 domainname      db 'coreutils',0        ; DATA XREF: main+47↑o
.rodata:0000000000005003                                         ; main+53↑o ...
.rodata:000000000000500D ; const char s2[]
.rodata:000000000000500D s2              db 'en_',0              ; DATA XREF: usage+26D↑o
.rodata:000000000000500D                                         ; usage+32E↑o
.rodata:0000000000005011 ; const char aFullDocumentat[]
.rodata:0000000000005011 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000005011                                         ; DATA XREF: usage:loc_1D69↑o
.rodata:0000000000005011                                         ; usage:loc_1E26↑o
.rodata:000000000000502C ; const char dirname[]
.rodata:000000000000502C dirname         db '/usr/local/share/locale',0
.rodata:000000000000502C                                         ; DATA XREF: main+40↑o
.rodata:0000000000005044 ; const char shortopts[]
.rodata:0000000000005044 shortopts       db '+n:',0              ; DATA XREF: main+E1↑o
.rodata:0000000000005048 aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+1C5↑o
.rodata:0000000000005058 ; const char aInvalidAdjustm[]
.rodata:0000000000005058 aInvalidAdjustm db 'invalid adjustment %s',0
.rodata:0000000000005058                                         ; DATA XREF: main+394↑o
.rodata:000000000000506E ; const char aCannotGetNicen[]
.rodata:000000000000506E aCannotGetNicen db 'cannot get niceness',0
.rodata:000000000000506E                                         ; DATA XREF: main+23B↑o
.rodata:000000000000506E                                         ; main+33A↑o
.rodata:0000000000005082 aD              db '%d',0Ah,0           ; DATA XREF: main:loc_1970↑o
.rodata:0000000000005086 ; const char aCannotSetNicen[]
.rodata:0000000000005086 aCannotSetNicen db 'cannot set niceness',0
.rodata:0000000000005086                                         ; DATA XREF: main+272↑o
.rodata:000000000000509A aAdjustment     db 'adjustment',0       ; DATA XREF: .data.rel.ro:longopts↓o
.rodata:00000000000050A5 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000207BA0↓o
.rodata:00000000000050AA aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000207BC0↓o
.rodata:00000000000050B2                 align 8
.rodata:00000000000050B8 ; const char aTrySHelpForMor[]
.rodata:00000000000050B8 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:00000000000050B8                                         ; DATA XREF: usage+2F↑o
.rodata:00000000000050DF                 align 20h
.rodata:00000000000050E0 ; const char aUsageSOptionCo[]
.rodata:00000000000050E0 aUsageSOptionCo db 'Usage: %s [OPTION] [COMMAND [ARG]...]',0Ah,0
.rodata:00000000000050E0                                         ; DATA XREF: usage:loc_1B3D↑o
.rodata:0000000000005107                 align 8
.rodata:0000000000005108 ; const char aRunCommandWith[]
.rodata:0000000000005108 aRunCommandWith db 'Run COMMAND with an adjusted niceness, which affects process sche'
.rodata:0000000000005108                                         ; DATA XREF: usage+7D↑o
.rodata:0000000000005108                 db 'duling.',0Ah
.rodata:0000000000005108                 db 'With no COMMAND, print the current niceness.  Niceness values ran'
.rodata:0000000000005108                 db 'ge from',0Ah
.rodata:0000000000005108                 db '%d (most favorable to the process) to %d (least favorable to the '
.rodata:0000000000005108                 db 'process).',0Ah,0
.rodata:00000000000051E6                 align 8
.rodata:00000000000051E8 ; const char aMandatoryArgum[]
.rodata:00000000000051E8 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+B0↑o
.rodata:00000000000051E8                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:00000000000051E8                 db 'ns too.',0Ah,0
.rodata:0000000000005233                 align 8
.rodata:0000000000005238 ; const char aNAdjustmentNAd[]
.rodata:0000000000005238 aNAdjustmentNAd db '  -n, --adjustment=N   add integer N to the niceness (default 10)'
.rodata:0000000000005238                                         ; DATA XREF: usage+D5↑o
.rodata:0000000000005238                 db 0Ah,0
.rodata:000000000000527B                 align 20h
.rodata:0000000000005280 ; const char aHelpDisplayThi[]
.rodata:0000000000005280 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000005280                                         ; DATA XREF: usage+FA↑o
.rodata:00000000000052AD                 align 10h
.rodata:00000000000052B0 ; const char aVersionOutputV[]
.rodata:00000000000052B0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000052B0                                         ; DATA XREF: usage+11F↑o
.rodata:00000000000052E6                 align 8
.rodata:00000000000052E8 ; const char aNoteYourShellM[]
.rodata:00000000000052E8 aNoteYourShellM db 0Ah                  ; DATA XREF: usage+144↑o
.rodata:00000000000052E8                 db 'NOTE: your shell may have its own version of %s, which usually su'
.rodata:00000000000052E8                 db 'persedes',0Ah
.rodata:00000000000052E8                 db 'the version described here.  Please refer to your shell',27h,'s d'
.rodata:00000000000052E8                 db 'ocumentation',0Ah
.rodata:00000000000052E8                 db 'for details about the options it supports.',0Ah,0
.rodata:00000000000053A7                 align 8
.rodata:00000000000053A8 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:00000000000053A8                                         ; DATA XREF: usage+23F↑o
.rodata:00000000000053A8                                         ; usage+2A3↑o ...
.rodata:00000000000053D0 ; const char aReportAnyTrans[]
.rodata:00000000000053D0 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:00000000000053D0                                         ; DATA XREF: usage+397↑o
.rodata:00000000000053D0                 db 'am/>',0Ah,0
.rodata:0000000000005417                 align 8
.rodata:0000000000005418 ; const char aOrAvailableLoc[]
.rodata:0000000000005418 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000005418                                         ; DATA XREF: usage:loc_1DAE↑o
.rodata:000000000000544B                 align 10h
.rodata:0000000000005450 ; const char msgid[]
.rodata:0000000000005450 msgid           db 'a command must be given with an adjustment',0
.rodata:0000000000005450                                         ; DATA XREF: main+180↑o
.rodata:000000000000547B a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000005480 ; const char aWriteError[]
.rodata:0000000000005480 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1F03↑o
.rodata:000000000000548C ; const char format[]
.rodata:000000000000548C format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000000548C                                         ; main+2E8↑o ...
.rodata:0000000000005493                 align 8
.rodata:0000000000005498 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000005498                                         ; DATA XREF: set_program_name+84↑o
.rodata:00000000000054D0 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:00000000000054D8 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:00000000000054DC unk_54DC        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:00000000000054DD                 db  80h
.rodata:00000000000054DE                 db  98h
.rodata:00000000000054DF                 db    0
.rodata:00000000000054E0 unk_54E0        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:00000000000054E1                 db  80h
.rodata:00000000000054E2                 db  99h
.rodata:00000000000054E3                 db    0
.rodata:00000000000054E4 unk_54E4        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:00000000000054E5                 db    7
.rodata:00000000000054E6                 db  65h ; e
.rodata:00000000000054E7                 db    0
.rodata:00000000000054E8 unk_54E8        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:00000000000054E9                 db 0AFh
.rodata:00000000000054EA                 db    0
.rodata:00000000000054EB unk_54EB        db  22h ; "             ; DATA XREF: gettext_quote:loc_2030↑o
.rodata:00000000000054EB                                         ; quotearg_buffer_restyled:loc_2DEB↑o ...
.rodata:00000000000054EC                 db    0
.rodata:00000000000054ED ; const char asc_54ED[2]
.rodata:00000000000054ED asc_54ED        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:00000000000054ED                                         ; quotearg_buffer_restyled:loc_21B3↑o ...
.rodata:00000000000054EF ; const char asc_54EF[2]
.rodata:00000000000054EF asc_54EF        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:00000000000054EF                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:00000000000054F1 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:00000000000054F9 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000207C08↓o
.rodata:00000000000054FF aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000207C10↓o
.rodata:000000000000550C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000207C18↓o
.rodata:000000000000550C                                         ; .data.rel.ro:0000000000207C38↓o
.rodata:0000000000005519 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005519                                         ; DATA XREF: .data.rel.ro:0000000000207C20↓o
.rodata:000000000000552D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000207C28↓o
.rodata:000000000000552F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000207C30↓o
.rodata:0000000000005537 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000207C48↓o
.rodata:000000000000553F                 align 20h
.rodata:0000000000005540 jpt_2191        dd offset loc_2F3A - 5540h
.rodata:0000000000005540                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000005540                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000005540                 dd offset loc_2193 - 5540h ; jump table for switch statement
.rodata:0000000000005540                 dd offset loc_3168 - 5540h
.rodata:0000000000005540                 dd offset loc_2F74 - 5540h
.rodata:0000000000005540                 dd offset loc_2D64 - 5540h
.rodata:0000000000005540                 dd offset loc_2DC0 - 5540h
.rodata:0000000000005540                 dd offset loc_2E15 - 5540h
.rodata:0000000000005540                 dd offset loc_2E5A - 5540h
.rodata:0000000000005540                 dd offset loc_2E94 - 5540h
.rodata:0000000000005540                 dd offset loc_2E94 - 5540h
.rodata:0000000000005540                 dd offset loc_2E94 - 5540h
.rodata:000000000000556C jpt_22EE        dd offset loc_2510 - 556Ch, offset def_22EE - 556Ch, offset def_22EE - 556Ch
.rodata:000000000000556C                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:000000000000556C                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset def_22EE - 556Ch, offset def_22EE - 556Ch ; jump table for switch statement
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset loc_2550 - 556Ch, offset loc_2458 - 556Ch
.rodata:000000000000556C                 dd offset loc_2418 - 556Ch, offset loc_25E0 - 556Ch, offset loc_25D0 - 556Ch
.rodata:000000000000556C                 dd offset loc_25C0 - 556Ch, offset loc_25B0 - 556Ch, offset def_22EE - 556Ch
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset def_22EE - 556Ch, offset def_22EE - 556Ch
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset def_22EE - 556Ch, offset def_22EE - 556Ch
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset def_22EE - 556Ch, offset def_22EE - 556Ch
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset def_22EE - 556Ch, offset def_22EE - 556Ch
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset def_22EE - 556Ch, offset def_22EE - 556Ch
.rodata:000000000000556C                 dd offset def_22EE - 556Ch, offset def_22EE - 556Ch, offset loc_25A0 - 556Ch
.rodata:000000000000556C                 dd offset loc_2590 - 556Ch, offset loc_2590 - 556Ch, offset loc_2560 - 556Ch
.rodata:000000000000556C                 dd offset loc_2590 - 556Ch, offset loc_2538 - 556Ch, offset loc_2590 - 556Ch
.rodata:000000000000556C                 dd offset loc_23F3 - 556Ch, offset loc_2590 - 556Ch, offset loc_2590 - 556Ch
.rodata:000000000000556C                 dd offset loc_2590 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2590 - 556Ch
.rodata:000000000000556C                 dd offset loc_2590 - 556Ch, offset loc_2590 - 556Ch, offset loc_2590 - 556Ch
.rodata:000000000000556C                 dd offset loc_23C3 - 556Ch, offset def_22EE - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2590 - 556Ch, offset loc_2468 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2590 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2590 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_2538 - 556Ch, offset loc_2538 - 556Ch, offset loc_2538 - 556Ch
.rodata:000000000000556C                 dd offset loc_22F3 - 556Ch, offset loc_2590 - 556Ch, offset loc_22F3 - 556Ch
.rodata:000000000000556C                 dd offset loc_2560 - 556Ch
.rodata:0000000000005768 jpt_267A        dd offset loc_26E0 - 5768h, offset def_267A - 5768h, offset def_267A - 5768h
.rodata:0000000000005768                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000005768                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset def_267A - 5768h, offset def_267A - 5768h ; jump table for switch statement
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset loc_26D0 - 5768h, offset loc_2820 - 5768h
.rodata:0000000000005768                 dd offset loc_2808 - 5768h, offset loc_26B8 - 5768h, offset loc_27F8 - 5768h
.rodata:0000000000005768                 dd offset loc_26A0 - 5768h, offset loc_27E0 - 5768h, offset def_267A - 5768h
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset def_267A - 5768h, offset def_267A - 5768h
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset def_267A - 5768h, offset def_267A - 5768h
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset def_267A - 5768h, offset def_267A - 5768h
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset def_267A - 5768h, offset def_267A - 5768h
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset def_267A - 5768h, offset def_267A - 5768h
.rodata:0000000000005768                 dd offset def_267A - 5768h, offset def_267A - 5768h, offset loc_27C8 - 5768h
.rodata:0000000000005768                 dd offset loc_27B0 - 5768h, offset loc_27B0 - 5768h, offset loc_2798 - 5768h
.rodata:0000000000005768                 dd offset loc_27B0 - 5768h, offset loc_2780 - 5768h, offset loc_27B0 - 5768h
.rodata:0000000000005768                 dd offset loc_23F0 - 5768h, offset loc_27B0 - 5768h, offset loc_27B0 - 5768h
.rodata:0000000000005768                 dd offset loc_27B0 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_27B0 - 5768h
.rodata:0000000000005768                 dd offset loc_27B0 - 5768h, offset loc_27B0 - 5768h, offset loc_27B0 - 5768h
.rodata:0000000000005768                 dd offset loc_23C0 - 5768h, offset def_267A - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_27B0 - 5768h, offset loc_2680 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_27B0 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_27B0 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_2780 - 5768h, offset loc_2780 - 5768h, offset loc_2780 - 5768h
.rodata:0000000000005768                 dd offset loc_22F0 - 5768h, offset loc_27B0 - 5768h, offset loc_22F0 - 5768h
.rodata:0000000000005768                 dd offset loc_2798 - 5768h
.rodata:0000000000005964                 align 20h
.rodata:0000000000005980                 public quoting_style_vals
.rodata:0000000000005980 quoting_style_vals db    0
.rodata:0000000000005981                 db    0
.rodata:0000000000005982                 db    0
.rodata:0000000000005983                 db    0
.rodata:0000000000005984                 db    1
.rodata:0000000000005985                 db    0
.rodata:0000000000005986                 db    0
.rodata:0000000000005987                 db    0
.rodata:0000000000005988                 db    2
.rodata:0000000000005989                 db    0
.rodata:000000000000598A                 db    0
.rodata:000000000000598B                 db    0
.rodata:000000000000598C                 db    3
.rodata:000000000000598D                 db    0
.rodata:000000000000598E                 db    0
.rodata:000000000000598F                 db    0
.rodata:0000000000005990                 db    4
.rodata:0000000000005991                 db    0
.rodata:0000000000005992                 db    0
.rodata:0000000000005993                 db    0
.rodata:0000000000005994                 db    5
.rodata:0000000000005995                 db    0
.rodata:0000000000005996                 db    0
.rodata:0000000000005997                 db    0
.rodata:0000000000005998                 db    6
.rodata:0000000000005999                 db    0
.rodata:000000000000599A                 db    0
.rodata:000000000000599B                 db    0
.rodata:000000000000599C                 db    7
.rodata:000000000000599D                 db    0
.rodata:000000000000599E                 db    0
.rodata:000000000000599F                 db    0
.rodata:00000000000059A0                 db    8
.rodata:00000000000059A1                 db    0
.rodata:00000000000059A2                 db    0
.rodata:00000000000059A3                 db    0
.rodata:00000000000059A4                 db    9
.rodata:00000000000059A5                 db    0
.rodata:00000000000059A6                 db    0
.rodata:00000000000059A7                 db    0
.rodata:00000000000059A8 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:00000000000059B4 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:00000000000059BB ; const char aC_0[]
.rodata:00000000000059BB aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3CDC↑o
.rodata:00000000000059BF ; const char aWrittenByS[]
.rodata:00000000000059BF aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:00000000000059BF                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:00000000000059CF ; const char aWrittenBySAndS[]
.rodata:00000000000059CF aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:00000000000059CF                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:00000000000059E6 ; const char aWrittenBySSAnd[]
.rodata:00000000000059E6 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:00000000000059E6                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005A02 ; const char aReportBugsToS[]
.rodata:0000000000005A02 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005A02                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005A17 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005A17                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:0000000000005A2D ; const char aSHomePageS[]
.rodata:0000000000005A2D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:0000000000005A2D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:0000000000005A41                 align 8
.rodata:0000000000005A48 ; const char aLicenseGplv3Gn[]
.rodata:0000000000005A48 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:0000000000005A48                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:0000000000005A48                 db 'ses/gpl.html>.',0Ah
.rodata:0000000000005A48                 db 'This is free software: you are free to change and redistribute it'
.rodata:0000000000005A48                 db '.',0Ah
.rodata:0000000000005A48                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:0000000000005A48                 db 0Ah,0
.rodata:0000000000005B14                 align 8
.rodata:0000000000005B18 ; const char aWrittenBySSSAn[]
.rodata:0000000000005B18 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005B18                                         ; DATA XREF: version_etc_arn:loc_3F30↑o
.rodata:0000000000005B18                 db 'and %s.',0Ah,0
.rodata:0000000000005B38 ; const char aWrittenBySSSSA[]
.rodata:0000000000005B38 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005B38                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005B38                 db '%s, and %s.',0Ah,0
.rodata:0000000000005B5C                 align 20h
.rodata:0000000000005B60 ; const char aWrittenBySSSSS_1[]
.rodata:0000000000005B60 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005B60                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:0000000000005B60                 db '%s, %s, and %s.',0Ah,0
.rodata:0000000000005B88 ; const char aWrittenBySSSSS_2[]
.rodata:0000000000005B88 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005B88                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:0000000000005B88                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005BB4                 align 8
.rodata:0000000000005BB8 ; const char aWrittenBySSSSS[]
.rodata:0000000000005BB8 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005BB8                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005BB8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005BB8                 db 'and %s.',0Ah,0
.rodata:0000000000005BE8 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005BE8 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005BE8                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005BE8                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005BE8                 db '%s, and %s.',0Ah,0
.rodata:0000000000005C1C                 align 20h
.rodata:0000000000005C20 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005C20                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005C20                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005C20                 db '%s, %s, and others.',0Ah,0
.rodata:0000000000005C5C                 align 20h
.rodata:0000000000005C60 ; const char aGeneralHelpUsi[]
.rodata:0000000000005C60 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:0000000000005C60                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:0000000000005C60                 db 0
.rodata:0000000000005CA1                 align 4
.rodata:0000000000005CA4 jpt_3D44        dd offset loc_3DC6 - 5CA4h
.rodata:0000000000005CA4                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005CA4                                         ; version_etc_arn+9D↑r
.rodata:0000000000005CA4                 dd offset loc_3E58 - 5CA4h ; jump table for switch statement
.rodata:0000000000005CA4                 dd offset loc_3E98 - 5CA4h
.rodata:0000000000005CA4                 dd offset loc_3EE0 - 5CA4h
.rodata:0000000000005CA4                 dd offset loc_3F30 - 5CA4h
.rodata:0000000000005CA4                 dd offset loc_3F88 - 5CA4h
.rodata:0000000000005CA4                 dd offset loc_3FB8 - 5CA4h
.rodata:0000000000005CA4                 dd offset loc_4020 - 5CA4h
.rodata:0000000000005CA4                 dd offset loc_3D50 - 5CA4h
.rodata:0000000000005CA4                 dd offset loc_3E00 - 5CA4h
.rodata:0000000000005CCC                 align 20h
.rodata:0000000000005CE0                 public version_etc_copyright
.rodata:0000000000005CE0 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005CE0                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000005D0F ; const char aMemoryExhauste[]
.rodata:0000000000005D0F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005D20 ; const char file[]
.rodata:0000000000005D20 file            db '../coreutils-8.31/lib/xstrtol.c',0
.rodata:0000000000005D20                                         ; DATA XREF: xstrtol+696↑o
.rodata:0000000000005D40 ; const char assertion[]
.rodata:0000000000005D40 assertion       db '0 <= strtol_base && strtol_base <= 36',0
.rodata:0000000000005D40                                         ; DATA XREF: xstrtol+69D↑o
.rodata:0000000000005D66                 align 8
.rodata:0000000000005D68 jpt_46FE        dd offset loc_4A30 - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                                         ; DATA XREF: xstrtol+19C↑o
.rodata:0000000000005D68                                         ; xstrtol+1A7↑r
.rodata:0000000000005D68                 dd offset loc_4960 - 5D68h, offset def_46FE - 5D68h, offset loc_4900 - 5D68h ; jump table for switch statement
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset loc_48C0 - 5D68h, offset def_46FE - 5D68h, offset loc_4700 - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset loc_49C8 - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset loc_4A60 - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset loc_4850 - 5D68h
.rodata:0000000000005D68                 dd offset loc_47E0 - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset loc_47B0 - 5D68h
.rodata:0000000000005D68                 dd offset loc_4760 - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset loc_4900 - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset loc_48C0 - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset loc_4700 - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset def_46FE - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset loc_4A60 - 5D68h
.rodata:0000000000005D68                 dd offset def_46FE - 5D68h, offset def_46FE - 5D68h, offset loc_4780 - 5D68h
.rodata:0000000000005E40 ; const char _PRETTY_FUNCTION___4162[]
.rodata:0000000000005E40 __PRETTY_FUNCTION___4162 db 'xstrtol',0 ; DATA XREF: xstrtol:loc_4BDF↑o
.rodata:0000000000005E48 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005E4A aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4D60↑o
.rodata:0000000000005E50 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005E50                                         ; locale_charset:loc_4DB0↑o
.rodata:0000000000005E50 _rodata         ends
.rodata:0000000000005E50
LOAD:0000000000005E56 ; ===========================================================================
LOAD:0000000000005E56
LOAD:0000000000005E56 ; Segment type: Pure code
LOAD:0000000000005E56 ; Segment permissions: Read/Execute
LOAD:0000000000005E56 LOAD            segment byte public 'CODE' use64
LOAD:0000000000005E56                 assume cs:LOAD
LOAD:0000000000005E56                 ;org 5E56h
LOAD:0000000000005E56                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005E56                 align 8
LOAD:0000000000005E56 LOAD            ends
LOAD:0000000000005E56
.eh_frame_hdr:0000000000005E58 ; ===========================================================================
.eh_frame_hdr:0000000000005E58
.eh_frame_hdr:0000000000005E58 ; Segment type: Pure data
.eh_frame_hdr:0000000000005E58 ; Segment permissions: Read
.eh_frame_hdr:0000000000005E58 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005E58                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005E58                 ;org 5E58h
.eh_frame_hdr:0000000000005E58 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005E59                 db  1Bh
.eh_frame_hdr:0000000000005E5A                 db    3
.eh_frame_hdr:0000000000005E5B                 db  3Bh ; ;
.eh_frame_hdr:0000000000005E5C                 db  44h ; D
.eh_frame_hdr:0000000000005E5D                 db    2
.eh_frame_hdr:0000000000005E5E                 db    0
.eh_frame_hdr:0000000000005E5F                 db    0
.eh_frame_hdr:0000000000005E60                 db  47h ; G
.eh_frame_hdr:0000000000005E61                 db    0
.eh_frame_hdr:0000000000005E62                 db    0
.eh_frame_hdr:0000000000005E63                 db    0
.eh_frame_hdr:0000000000005E64                 db 0C8h
.eh_frame_hdr:0000000000005E65                 db 0B4h
.eh_frame_hdr:0000000000005E66                 db 0FFh
.eh_frame_hdr:0000000000005E67                 db 0FFh
.eh_frame_hdr:0000000000005E68                 db  90h
.eh_frame_hdr:0000000000005E69                 db    2
.eh_frame_hdr:0000000000005E6A                 db    0
.eh_frame_hdr:0000000000005E6B                 db    0
.eh_frame_hdr:0000000000005E6C                 db 0A8h
.eh_frame_hdr:0000000000005E6D                 db 0B7h
.eh_frame_hdr:0000000000005E6E                 db 0FFh
.eh_frame_hdr:0000000000005E6F                 db 0FFh
.eh_frame_hdr:0000000000005E70                 db 0B8h
.eh_frame_hdr:0000000000005E71                 db    2
.eh_frame_hdr:0000000000005E72                 db    0
.eh_frame_hdr:0000000000005E73                 db    0
.eh_frame_hdr:0000000000005E74                 db 0B8h
.eh_frame_hdr:0000000000005E75                 db 0B7h
.eh_frame_hdr:0000000000005E76                 db 0FFh
.eh_frame_hdr:0000000000005E77                 db 0FFh
.eh_frame_hdr:0000000000005E78                 db 0FCh
.eh_frame_hdr:0000000000005E79                 db    2
.eh_frame_hdr:0000000000005E7A                 db    0
.eh_frame_hdr:0000000000005E7B                 db    0
.eh_frame_hdr:0000000000005E7C                 db  78h ; x
.eh_frame_hdr:0000000000005E7D                 db 0BBh
.eh_frame_hdr:0000000000005E7E                 db 0FFh
.eh_frame_hdr:0000000000005E7F                 db 0FFh
.eh_frame_hdr:0000000000005E80                 db  60h ; `
.eh_frame_hdr:0000000000005E81                 db    2
.eh_frame_hdr:0000000000005E82                 db    0
.eh_frame_hdr:0000000000005E83                 db    0
.eh_frame_hdr:0000000000005E84                 db  88h
.eh_frame_hdr:0000000000005E85                 db 0BCh
.eh_frame_hdr:0000000000005E86                 db 0FFh
.eh_frame_hdr:0000000000005E87                 db 0FFh
.eh_frame_hdr:0000000000005E88                 db 0D0h
.eh_frame_hdr:0000000000005E89                 db    2
.eh_frame_hdr:0000000000005E8A                 db    0
.eh_frame_hdr:0000000000005E8B                 db    0
.eh_frame_hdr:0000000000005E8C                 db  48h ; H
.eh_frame_hdr:0000000000005E8D                 db 0C0h
.eh_frame_hdr:0000000000005E8E                 db 0FFh
.eh_frame_hdr:0000000000005E8F                 db 0FFh
.eh_frame_hdr:0000000000005E90                 db  40h ; @
.eh_frame_hdr:0000000000005E91                 db    3
.eh_frame_hdr:0000000000005E92                 db    0
.eh_frame_hdr:0000000000005E93                 db    0
.eh_frame_hdr:0000000000005E94                 db  58h ; X
.eh_frame_hdr:0000000000005E95                 db 0C0h
.eh_frame_hdr:0000000000005E96                 db 0FFh
.eh_frame_hdr:0000000000005E97                 db 0FFh
.eh_frame_hdr:0000000000005E98                 db  54h ; T
.eh_frame_hdr:0000000000005E99                 db    3
.eh_frame_hdr:0000000000005E9A                 db    0
.eh_frame_hdr:0000000000005E9B                 db    0
.eh_frame_hdr:0000000000005E9C                 db  68h ; h
.eh_frame_hdr:0000000000005E9D                 db 0C0h
.eh_frame_hdr:0000000000005E9E                 db 0FFh
.eh_frame_hdr:0000000000005E9F                 db 0FFh
.eh_frame_hdr:0000000000005EA0                 db  68h ; h
.eh_frame_hdr:0000000000005EA1                 db    3
.eh_frame_hdr:0000000000005EA2                 db    0
.eh_frame_hdr:0000000000005EA3                 db    0
.eh_frame_hdr:0000000000005EA4                 db  18h
.eh_frame_hdr:0000000000005EA5                 db 0C1h
.eh_frame_hdr:0000000000005EA6                 db 0FFh
.eh_frame_hdr:0000000000005EA7                 db 0FFh
.eh_frame_hdr:0000000000005EA8                 db  98h
.eh_frame_hdr:0000000000005EA9                 db    3
.eh_frame_hdr:0000000000005EAA                 db    0
.eh_frame_hdr:0000000000005EAB                 db    0
.eh_frame_hdr:0000000000005EAC                 db 0B8h
.eh_frame_hdr:0000000000005EAD                 db 0C1h
.eh_frame_hdr:0000000000005EAE                 db 0FFh
.eh_frame_hdr:0000000000005EAF                 db 0FFh
.eh_frame_hdr:0000000000005EB0                 db 0B8h
.eh_frame_hdr:0000000000005EB1                 db    3
.eh_frame_hdr:0000000000005EB2                 db    0
.eh_frame_hdr:0000000000005EB3                 db    0
.eh_frame_hdr:0000000000005EB4                 db 0A8h
.eh_frame_hdr:0000000000005EB5                 db 0C2h
.eh_frame_hdr:0000000000005EB6                 db 0FFh
.eh_frame_hdr:0000000000005EB7                 db 0FFh
.eh_frame_hdr:0000000000005EB8                 db 0FCh
.eh_frame_hdr:0000000000005EB9                 db    3
.eh_frame_hdr:0000000000005EBA                 db    0
.eh_frame_hdr:0000000000005EBB                 db    0
.eh_frame_hdr:0000000000005EBC                 db 0E8h
.eh_frame_hdr:0000000000005EBD                 db 0D4h
.eh_frame_hdr:0000000000005EBE                 db 0FFh
.eh_frame_hdr:0000000000005EBF                 db 0FFh
.eh_frame_hdr:0000000000005EC0                 db  74h ; t
.eh_frame_hdr:0000000000005EC1                 db    4
.eh_frame_hdr:0000000000005EC2                 db    0
.eh_frame_hdr:0000000000005EC3                 db    0
.eh_frame_hdr:0000000000005EC4                 db  98h
.eh_frame_hdr:0000000000005EC5                 db 0D6h
.eh_frame_hdr:0000000000005EC6                 db 0FFh
.eh_frame_hdr:0000000000005EC7                 db 0FFh
.eh_frame_hdr:0000000000005EC8                 db 0E0h
.eh_frame_hdr:0000000000005EC9                 db    4
.eh_frame_hdr:0000000000005ECA                 db    0
.eh_frame_hdr:0000000000005ECB                 db    0
.eh_frame_hdr:0000000000005ECC                 db 0D8h
.eh_frame_hdr:0000000000005ECD                 db 0D6h
.eh_frame_hdr:0000000000005ECE                 db 0FFh
.eh_frame_hdr:0000000000005ECF                 db 0FFh
.eh_frame_hdr:0000000000005ED0                 db  0Ch
.eh_frame_hdr:0000000000005ED1                 db    5
.eh_frame_hdr:0000000000005ED2                 db    0
.eh_frame_hdr:0000000000005ED3                 db    0
.eh_frame_hdr:0000000000005ED4                 db 0F8h
.eh_frame_hdr:0000000000005ED5                 db 0D6h
.eh_frame_hdr:0000000000005ED6                 db 0FFh
.eh_frame_hdr:0000000000005ED7                 db 0FFh
.eh_frame_hdr:0000000000005ED8                 db  20h
.eh_frame_hdr:0000000000005ED9                 db    5
.eh_frame_hdr:0000000000005EDA                 db    0
.eh_frame_hdr:0000000000005EDB                 db    0
.eh_frame_hdr:0000000000005EDC                 db  18h
.eh_frame_hdr:0000000000005EDD                 db 0D7h
.eh_frame_hdr:0000000000005EDE                 db 0FFh
.eh_frame_hdr:0000000000005EDF                 db 0FFh
.eh_frame_hdr:0000000000005EE0                 db  34h ; 4
.eh_frame_hdr:0000000000005EE1                 db    5
.eh_frame_hdr:0000000000005EE2                 db    0
.eh_frame_hdr:0000000000005EE3                 db    0
.eh_frame_hdr:0000000000005EE4                 db  58h ; X
.eh_frame_hdr:0000000000005EE5                 db 0D7h
.eh_frame_hdr:0000000000005EE6                 db 0FFh
.eh_frame_hdr:0000000000005EE7                 db 0FFh
.eh_frame_hdr:0000000000005EE8                 db  48h ; H
.eh_frame_hdr:0000000000005EE9                 db    5
.eh_frame_hdr:0000000000005EEA                 db    0
.eh_frame_hdr:0000000000005EEB                 db    0
.eh_frame_hdr:0000000000005EEC                 db  78h ; x
.eh_frame_hdr:0000000000005EED                 db 0D7h
.eh_frame_hdr:0000000000005EEE                 db 0FFh
.eh_frame_hdr:0000000000005EEF                 db 0FFh
.eh_frame_hdr:0000000000005EF0                 db  5Ch ; \
.eh_frame_hdr:0000000000005EF1                 db    5
.eh_frame_hdr:0000000000005EF2                 db    0
.eh_frame_hdr:0000000000005EF3                 db    0
.eh_frame_hdr:0000000000005EF4                 db 0A8h
.eh_frame_hdr:0000000000005EF5                 db 0D7h
.eh_frame_hdr:0000000000005EF6                 db 0FFh
.eh_frame_hdr:0000000000005EF7                 db 0FFh
.eh_frame_hdr:0000000000005EF8                 db  70h ; p
.eh_frame_hdr:0000000000005EF9                 db    5
.eh_frame_hdr:0000000000005EFA                 db    0
.eh_frame_hdr:0000000000005EFB                 db    0
.eh_frame_hdr:0000000000005EFC                 db  28h ; (
.eh_frame_hdr:0000000000005EFD                 db 0D8h
.eh_frame_hdr:0000000000005EFE                 db 0FFh
.eh_frame_hdr:0000000000005EFF                 db 0FFh
.eh_frame_hdr:0000000000005F00                 db 0C4h
.eh_frame_hdr:0000000000005F01                 db    5
.eh_frame_hdr:0000000000005F02                 db    0
.eh_frame_hdr:0000000000005F03                 db    0
.eh_frame_hdr:0000000000005F04                 db  18h
.eh_frame_hdr:0000000000005F05                 db 0D9h
.eh_frame_hdr:0000000000005F06                 db 0FFh
.eh_frame_hdr:0000000000005F07                 db 0FFh
.eh_frame_hdr:0000000000005F08                 db  30h ; 0
.eh_frame_hdr:0000000000005F09                 db    6
.eh_frame_hdr:0000000000005F0A                 db    0
.eh_frame_hdr:0000000000005F0B                 db    0
.eh_frame_hdr:0000000000005F0C                 db  28h ; (
.eh_frame_hdr:0000000000005F0D                 db 0D9h
.eh_frame_hdr:0000000000005F0E                 db 0FFh
.eh_frame_hdr:0000000000005F0F                 db 0FFh
.eh_frame_hdr:0000000000005F10                 db  44h ; D
.eh_frame_hdr:0000000000005F11                 db    6
.eh_frame_hdr:0000000000005F12                 db    0
.eh_frame_hdr:0000000000005F13                 db    0
.eh_frame_hdr:0000000000005F14                 db 0C8h
.eh_frame_hdr:0000000000005F15                 db 0D9h
.eh_frame_hdr:0000000000005F16                 db 0FFh
.eh_frame_hdr:0000000000005F17                 db 0FFh
.eh_frame_hdr:0000000000005F18                 db  70h ; p
.eh_frame_hdr:0000000000005F19                 db    6
.eh_frame_hdr:0000000000005F1A                 db    0
.eh_frame_hdr:0000000000005F1B                 db    0
.eh_frame_hdr:0000000000005F1C                 db 0E8h
.eh_frame_hdr:0000000000005F1D                 db 0D9h
.eh_frame_hdr:0000000000005F1E                 db 0FFh
.eh_frame_hdr:0000000000005F1F                 db 0FFh
.eh_frame_hdr:0000000000005F20                 db  84h
.eh_frame_hdr:0000000000005F21                 db    6
.eh_frame_hdr:0000000000005F22                 db    0
.eh_frame_hdr:0000000000005F23                 db    0
.eh_frame_hdr:0000000000005F24                 db 0F8h
.eh_frame_hdr:0000000000005F25                 db 0D9h
.eh_frame_hdr:0000000000005F26                 db 0FFh
.eh_frame_hdr:0000000000005F27                 db 0FFh
.eh_frame_hdr:0000000000005F28                 db  98h
.eh_frame_hdr:0000000000005F29                 db    6
.eh_frame_hdr:0000000000005F2A                 db    0
.eh_frame_hdr:0000000000005F2B                 db    0
.eh_frame_hdr:0000000000005F2C                 db  18h
.eh_frame_hdr:0000000000005F2D                 db 0DAh
.eh_frame_hdr:0000000000005F2E                 db 0FFh
.eh_frame_hdr:0000000000005F2F                 db 0FFh
.eh_frame_hdr:0000000000005F30                 db 0ACh
.eh_frame_hdr:0000000000005F31                 db    6
.eh_frame_hdr:0000000000005F32                 db    0
.eh_frame_hdr:0000000000005F33                 db    0
.eh_frame_hdr:0000000000005F34                 db  38h ; 8
.eh_frame_hdr:0000000000005F35                 db 0DAh
.eh_frame_hdr:0000000000005F36                 db 0FFh
.eh_frame_hdr:0000000000005F37                 db 0FFh
.eh_frame_hdr:0000000000005F38                 db 0C0h
.eh_frame_hdr:0000000000005F39                 db    6
.eh_frame_hdr:0000000000005F3A                 db    0
.eh_frame_hdr:0000000000005F3B                 db    0
.eh_frame_hdr:0000000000005F3C                 db 0C8h
.eh_frame_hdr:0000000000005F3D                 db 0DAh
.eh_frame_hdr:0000000000005F3E                 db 0FFh
.eh_frame_hdr:0000000000005F3F                 db 0FFh
.eh_frame_hdr:0000000000005F40                 db 0DCh
.eh_frame_hdr:0000000000005F41                 db    6
.eh_frame_hdr:0000000000005F42                 db    0
.eh_frame_hdr:0000000000005F43                 db    0
.eh_frame_hdr:0000000000005F44                 db  58h ; X
.eh_frame_hdr:0000000000005F45                 db 0DBh
.eh_frame_hdr:0000000000005F46                 db 0FFh
.eh_frame_hdr:0000000000005F47                 db 0FFh
.eh_frame_hdr:0000000000005F48                 db 0F8h
.eh_frame_hdr:0000000000005F49                 db    6
.eh_frame_hdr:0000000000005F4A                 db    0
.eh_frame_hdr:0000000000005F4B                 db    0
.eh_frame_hdr:0000000000005F4C                 db  68h ; h
.eh_frame_hdr:0000000000005F4D                 db 0DBh
.eh_frame_hdr:0000000000005F4E                 db 0FFh
.eh_frame_hdr:0000000000005F4F                 db 0FFh
.eh_frame_hdr:0000000000005F50                 db  0Ch
.eh_frame_hdr:0000000000005F51                 db    7
.eh_frame_hdr:0000000000005F52                 db    0
.eh_frame_hdr:0000000000005F53                 db    0
.eh_frame_hdr:0000000000005F54                 db  78h ; x
.eh_frame_hdr:0000000000005F55                 db 0DBh
.eh_frame_hdr:0000000000005F56                 db 0FFh
.eh_frame_hdr:0000000000005F57                 db 0FFh
.eh_frame_hdr:0000000000005F58                 db  20h
.eh_frame_hdr:0000000000005F59                 db    7
.eh_frame_hdr:0000000000005F5A                 db    0
.eh_frame_hdr:0000000000005F5B                 db    0
.eh_frame_hdr:0000000000005F5C                 db  18h
.eh_frame_hdr:0000000000005F5D                 db 0DCh
.eh_frame_hdr:0000000000005F5E                 db 0FFh
.eh_frame_hdr:0000000000005F5F                 db 0FFh
.eh_frame_hdr:0000000000005F60                 db  3Ch ; <
.eh_frame_hdr:0000000000005F61                 db    7
.eh_frame_hdr:0000000000005F62                 db    0
.eh_frame_hdr:0000000000005F63                 db    0
.eh_frame_hdr:0000000000005F64                 db  28h ; (
.eh_frame_hdr:0000000000005F65                 db 0DCh
.eh_frame_hdr:0000000000005F66                 db 0FFh
.eh_frame_hdr:0000000000005F67                 db 0FFh
.eh_frame_hdr:0000000000005F68                 db  50h ; P
.eh_frame_hdr:0000000000005F69                 db    7
.eh_frame_hdr:0000000000005F6A                 db    0
.eh_frame_hdr:0000000000005F6B                 db    0
.eh_frame_hdr:0000000000005F6C                 db  48h ; H
.eh_frame_hdr:0000000000005F6D                 db 0DCh
.eh_frame_hdr:0000000000005F6E                 db 0FFh
.eh_frame_hdr:0000000000005F6F                 db 0FFh
.eh_frame_hdr:0000000000005F70                 db  64h ; d
.eh_frame_hdr:0000000000005F71                 db    7
.eh_frame_hdr:0000000000005F72                 db    0
.eh_frame_hdr:0000000000005F73                 db    0
.eh_frame_hdr:0000000000005F74                 db  58h ; X
.eh_frame_hdr:0000000000005F75                 db 0DCh
.eh_frame_hdr:0000000000005F76                 db 0FFh
.eh_frame_hdr:0000000000005F77                 db 0FFh
.eh_frame_hdr:0000000000005F78                 db  78h ; x
.eh_frame_hdr:0000000000005F79                 db    7
.eh_frame_hdr:0000000000005F7A                 db    0
.eh_frame_hdr:0000000000005F7B                 db    0
.eh_frame_hdr:0000000000005F7C                 db 0E8h
.eh_frame_hdr:0000000000005F7D                 db 0DCh
.eh_frame_hdr:0000000000005F7E                 db 0FFh
.eh_frame_hdr:0000000000005F7F                 db 0FFh
.eh_frame_hdr:0000000000005F80                 db  94h
.eh_frame_hdr:0000000000005F81                 db    7
.eh_frame_hdr:0000000000005F82                 db    0
.eh_frame_hdr:0000000000005F83                 db    0
.eh_frame_hdr:0000000000005F84                 db  88h
.eh_frame_hdr:0000000000005F85                 db 0DDh
.eh_frame_hdr:0000000000005F86                 db 0FFh
.eh_frame_hdr:0000000000005F87                 db 0FFh
.eh_frame_hdr:0000000000005F88                 db 0B0h
.eh_frame_hdr:0000000000005F89                 db    7
.eh_frame_hdr:0000000000005F8A                 db    0
.eh_frame_hdr:0000000000005F8B                 db    0
.eh_frame_hdr:0000000000005F8C                 db  98h
.eh_frame_hdr:0000000000005F8D                 db 0DDh
.eh_frame_hdr:0000000000005F8E                 db 0FFh
.eh_frame_hdr:0000000000005F8F                 db 0FFh
.eh_frame_hdr:0000000000005F90                 db 0C4h
.eh_frame_hdr:0000000000005F91                 db    7
.eh_frame_hdr:0000000000005F92                 db    0
.eh_frame_hdr:0000000000005F93                 db    0
.eh_frame_hdr:0000000000005F94                 db 0B8h
.eh_frame_hdr:0000000000005F95                 db 0DDh
.eh_frame_hdr:0000000000005F96                 db 0FFh
.eh_frame_hdr:0000000000005F97                 db 0FFh
.eh_frame_hdr:0000000000005F98                 db 0D8h
.eh_frame_hdr:0000000000005F99                 db    7
.eh_frame_hdr:0000000000005F9A                 db    0
.eh_frame_hdr:0000000000005F9B                 db    0
.eh_frame_hdr:0000000000005F9C                 db 0D8h
.eh_frame_hdr:0000000000005F9D                 db 0DDh
.eh_frame_hdr:0000000000005F9E                 db 0FFh
.eh_frame_hdr:0000000000005F9F                 db 0FFh
.eh_frame_hdr:0000000000005FA0                 db 0ECh
.eh_frame_hdr:0000000000005FA1                 db    7
.eh_frame_hdr:0000000000005FA2                 db    0
.eh_frame_hdr:0000000000005FA3                 db    0
.eh_frame_hdr:0000000000005FA4                 db 0E8h
.eh_frame_hdr:0000000000005FA5                 db 0DDh
.eh_frame_hdr:0000000000005FA6                 db 0FFh
.eh_frame_hdr:0000000000005FA7                 db 0FFh
.eh_frame_hdr:0000000000005FA8                 db    0
.eh_frame_hdr:0000000000005FA9                 db    8
.eh_frame_hdr:0000000000005FAA                 db    0
.eh_frame_hdr:0000000000005FAB                 db    0
.eh_frame_hdr:0000000000005FAC                 db    8
.eh_frame_hdr:0000000000005FAD                 db 0DEh
.eh_frame_hdr:0000000000005FAE                 db 0FFh
.eh_frame_hdr:0000000000005FAF                 db 0FFh
.eh_frame_hdr:0000000000005FB0                 db  14h
.eh_frame_hdr:0000000000005FB1                 db    8
.eh_frame_hdr:0000000000005FB2                 db    0
.eh_frame_hdr:0000000000005FB3                 db    0
.eh_frame_hdr:0000000000005FB4                 db  28h ; (
.eh_frame_hdr:0000000000005FB5                 db 0DEh
.eh_frame_hdr:0000000000005FB6                 db 0FFh
.eh_frame_hdr:0000000000005FB7                 db 0FFh
.eh_frame_hdr:0000000000005FB8                 db  28h ; (
.eh_frame_hdr:0000000000005FB9                 db    8
.eh_frame_hdr:0000000000005FBA                 db    0
.eh_frame_hdr:0000000000005FBB                 db    0
.eh_frame_hdr:0000000000005FBC                 db  48h ; H
.eh_frame_hdr:0000000000005FBD                 db 0DEh
.eh_frame_hdr:0000000000005FBE                 db 0FFh
.eh_frame_hdr:0000000000005FBF                 db 0FFh
.eh_frame_hdr:0000000000005FC0                 db  40h ; @
.eh_frame_hdr:0000000000005FC1                 db    8
.eh_frame_hdr:0000000000005FC2                 db    0
.eh_frame_hdr:0000000000005FC3                 db    0
.eh_frame_hdr:0000000000005FC4                 db  68h ; h
.eh_frame_hdr:0000000000005FC5                 db 0E2h
.eh_frame_hdr:0000000000005FC6                 db 0FFh
.eh_frame_hdr:0000000000005FC7                 db 0FFh
.eh_frame_hdr:0000000000005FC8                 db  54h ; T
.eh_frame_hdr:0000000000005FC9                 db    9
.eh_frame_hdr:0000000000005FCA                 db    0
.eh_frame_hdr:0000000000005FCB                 db    0
.eh_frame_hdr:0000000000005FCC                 db  88h
.eh_frame_hdr:0000000000005FCD                 db 0E2h
.eh_frame_hdr:0000000000005FCE                 db 0FFh
.eh_frame_hdr:0000000000005FCF                 db 0FFh
.eh_frame_hdr:0000000000005FD0                 db  68h ; h
.eh_frame_hdr:0000000000005FD1                 db    9
.eh_frame_hdr:0000000000005FD2                 db    0
.eh_frame_hdr:0000000000005FD3                 db    0
.eh_frame_hdr:0000000000005FD4                 db    8
.eh_frame_hdr:0000000000005FD5                 db 0E3h
.eh_frame_hdr:0000000000005FD6                 db 0FFh
.eh_frame_hdr:0000000000005FD7                 db 0FFh
.eh_frame_hdr:0000000000005FD8                 db  84h
.eh_frame_hdr:0000000000005FD9                 db    9
.eh_frame_hdr:0000000000005FDA                 db    0
.eh_frame_hdr:0000000000005FDB                 db    0
.eh_frame_hdr:0000000000005FDC                 db 0E8h
.eh_frame_hdr:0000000000005FDD                 db 0E3h
.eh_frame_hdr:0000000000005FDE                 db 0FFh
.eh_frame_hdr:0000000000005FDF                 db 0FFh
.eh_frame_hdr:0000000000005FE0                 db 0B0h
.eh_frame_hdr:0000000000005FE1                 db    9
.eh_frame_hdr:0000000000005FE2                 db    0
.eh_frame_hdr:0000000000005FE3                 db    0
.eh_frame_hdr:0000000000005FE4                 db  68h ; h
.eh_frame_hdr:0000000000005FE5                 db 0E4h
.eh_frame_hdr:0000000000005FE6                 db 0FFh
.eh_frame_hdr:0000000000005FE7                 db 0FFh
.eh_frame_hdr:0000000000005FE8                 db 0D0h
.eh_frame_hdr:0000000000005FE9                 db    9
.eh_frame_hdr:0000000000005FEA                 db    0
.eh_frame_hdr:0000000000005FEB                 db    0
.eh_frame_hdr:0000000000005FEC                 db  88h
.eh_frame_hdr:0000000000005FED                 db 0E4h
.eh_frame_hdr:0000000000005FEE                 db 0FFh
.eh_frame_hdr:0000000000005FEF                 db 0FFh
.eh_frame_hdr:0000000000005FF0                 db 0ECh
.eh_frame_hdr:0000000000005FF1                 db    9
.eh_frame_hdr:0000000000005FF2                 db    0
.eh_frame_hdr:0000000000005FF3                 db    0
.eh_frame_hdr:0000000000005FF4                 db 0B8h
.eh_frame_hdr:0000000000005FF5                 db 0E4h
.eh_frame_hdr:0000000000005FF6                 db 0FFh
.eh_frame_hdr:0000000000005FF7                 db 0FFh
.eh_frame_hdr:0000000000005FF8                 db    0
.eh_frame_hdr:0000000000005FF9                 db  0Ah
.eh_frame_hdr:0000000000005FFA                 db    0
.eh_frame_hdr:0000000000005FFB                 db    0
.eh_frame_hdr:0000000000005FFC                 db 0C8h
.eh_frame_hdr:0000000000005FFD                 db 0E4h
.eh_frame_hdr:0000000000005FFE                 db 0FFh
.eh_frame_hdr:0000000000005FFF                 db 0FFh
.eh_frame_hdr:0000000000006000                 db  14h
.eh_frame_hdr:0000000000006001                 db  0Ah
.eh_frame_hdr:0000000000006002                 db    0
.eh_frame_hdr:0000000000006003                 db    0
.eh_frame_hdr:0000000000006004                 db    8
.eh_frame_hdr:0000000000006005                 db 0E5h
.eh_frame_hdr:0000000000006006                 db 0FFh
.eh_frame_hdr:0000000000006007                 db 0FFh
.eh_frame_hdr:0000000000006008                 db  38h ; 8
.eh_frame_hdr:0000000000006009                 db  0Ah
.eh_frame_hdr:000000000000600A                 db    0
.eh_frame_hdr:000000000000600B                 db    0
.eh_frame_hdr:000000000000600C                 db  38h ; 8
.eh_frame_hdr:000000000000600D                 db 0E5h
.eh_frame_hdr:000000000000600E                 db 0FFh
.eh_frame_hdr:000000000000600F                 db 0FFh
.eh_frame_hdr:0000000000006010                 db  4Ch ; L
.eh_frame_hdr:0000000000006011                 db  0Ah
.eh_frame_hdr:0000000000006012                 db    0
.eh_frame_hdr:0000000000006013                 db    0
.eh_frame_hdr:0000000000006014                 db 0C8h
.eh_frame_hdr:0000000000006015                 db 0E5h
.eh_frame_hdr:0000000000006016                 db 0FFh
.eh_frame_hdr:0000000000006017                 db 0FFh
.eh_frame_hdr:0000000000006018                 db  64h ; d
.eh_frame_hdr:0000000000006019                 db  0Ah
.eh_frame_hdr:000000000000601A                 db    0
.eh_frame_hdr:000000000000601B                 db    0
.eh_frame_hdr:000000000000601C                 db  18h
.eh_frame_hdr:000000000000601D                 db 0E6h
.eh_frame_hdr:000000000000601E                 db 0FFh
.eh_frame_hdr:000000000000601F                 db 0FFh
.eh_frame_hdr:0000000000006020                 db  7Ch ; |
.eh_frame_hdr:0000000000006021                 db  0Ah
.eh_frame_hdr:0000000000006022                 db    0
.eh_frame_hdr:0000000000006023                 db    0
.eh_frame_hdr:0000000000006024                 db  38h ; 8
.eh_frame_hdr:0000000000006025                 db 0E6h
.eh_frame_hdr:0000000000006026                 db 0FFh
.eh_frame_hdr:0000000000006027                 db 0FFh
.eh_frame_hdr:0000000000006028                 db  98h
.eh_frame_hdr:0000000000006029                 db  0Ah
.eh_frame_hdr:000000000000602A                 db    0
.eh_frame_hdr:000000000000602B                 db    0
.eh_frame_hdr:000000000000602C                 db  68h ; h
.eh_frame_hdr:000000000000602D                 db 0E6h
.eh_frame_hdr:000000000000602E                 db 0FFh
.eh_frame_hdr:000000000000602F                 db 0FFh
.eh_frame_hdr:0000000000006030                 db 0B4h
.eh_frame_hdr:0000000000006031                 db  0Ah
.eh_frame_hdr:0000000000006032                 db    0
.eh_frame_hdr:0000000000006033                 db    0
.eh_frame_hdr:0000000000006034                 db  98h
.eh_frame_hdr:0000000000006035                 db 0E6h
.eh_frame_hdr:0000000000006036                 db 0FFh
.eh_frame_hdr:0000000000006037                 db 0FFh
.eh_frame_hdr:0000000000006038                 db 0DCh
.eh_frame_hdr:0000000000006039                 db  0Ah
.eh_frame_hdr:000000000000603A                 db    0
.eh_frame_hdr:000000000000603B                 db    0
.eh_frame_hdr:000000000000603C                 db 0B8h
.eh_frame_hdr:000000000000603D                 db 0E6h
.eh_frame_hdr:000000000000603E                 db 0FFh
.eh_frame_hdr:000000000000603F                 db 0FFh
.eh_frame_hdr:0000000000006040                 db 0F8h
.eh_frame_hdr:0000000000006041                 db  0Ah
.eh_frame_hdr:0000000000006042                 db    0
.eh_frame_hdr:0000000000006043                 db    0
.eh_frame_hdr:0000000000006044                 db 0F8h
.eh_frame_hdr:0000000000006045                 db 0E6h
.eh_frame_hdr:0000000000006046                 db 0FFh
.eh_frame_hdr:0000000000006047                 db 0FFh
.eh_frame_hdr:0000000000006048                 db  10h
.eh_frame_hdr:0000000000006049                 db  0Bh
.eh_frame_hdr:000000000000604A                 db    0
.eh_frame_hdr:000000000000604B                 db    0
.eh_frame_hdr:000000000000604C                 db 0B8h
.eh_frame_hdr:000000000000604D                 db 0EDh
.eh_frame_hdr:000000000000604E                 db 0FFh
.eh_frame_hdr:000000000000604F                 db 0FFh
.eh_frame_hdr:0000000000006050                 db  60h ; `
.eh_frame_hdr:0000000000006051                 db  0Bh
.eh_frame_hdr:0000000000006052                 db    0
.eh_frame_hdr:0000000000006053                 db    0
.eh_frame_hdr:0000000000006054                 db  48h ; H
.eh_frame_hdr:0000000000006055                 db 0EEh
.eh_frame_hdr:0000000000006056                 db 0FFh
.eh_frame_hdr:0000000000006057                 db 0FFh
.eh_frame_hdr:0000000000006058                 db 0A0h
.eh_frame_hdr:0000000000006059                 db  0Bh
.eh_frame_hdr:000000000000605A                 db    0
.eh_frame_hdr:000000000000605B                 db    0
.eh_frame_hdr:000000000000605C                 db 0C8h
.eh_frame_hdr:000000000000605D                 db 0EEh
.eh_frame_hdr:000000000000605E                 db 0FFh
.eh_frame_hdr:000000000000605F                 db 0FFh
.eh_frame_hdr:0000000000006060                 db 0F0h
.eh_frame_hdr:0000000000006061                 db  0Bh
.eh_frame_hdr:0000000000006062                 db    0
.eh_frame_hdr:0000000000006063                 db    0
.eh_frame_hdr:0000000000006064                 db  28h ; (
.eh_frame_hdr:0000000000006065                 db 0EFh
.eh_frame_hdr:0000000000006066                 db 0FFh
.eh_frame_hdr:0000000000006067                 db 0FFh
.eh_frame_hdr:0000000000006068                 db  10h
.eh_frame_hdr:0000000000006069                 db  0Ch
.eh_frame_hdr:000000000000606A                 db    0
.eh_frame_hdr:000000000000606B                 db    0
.eh_frame_hdr:000000000000606C                 db  68h ; h
.eh_frame_hdr:000000000000606D                 db 0EFh
.eh_frame_hdr:000000000000606E                 db 0FFh
.eh_frame_hdr:000000000000606F                 db 0FFh
.eh_frame_hdr:0000000000006070                 db  30h ; 0
.eh_frame_hdr:0000000000006071                 db  0Ch
.eh_frame_hdr:0000000000006072                 db    0
.eh_frame_hdr:0000000000006073                 db    0
.eh_frame_hdr:0000000000006074                 db 0E8h
.eh_frame_hdr:0000000000006075                 db 0EFh
.eh_frame_hdr:0000000000006076                 db 0FFh
.eh_frame_hdr:0000000000006077                 db 0FFh
.eh_frame_hdr:0000000000006078                 db  68h ; h
.eh_frame_hdr:0000000000006079                 db  0Ch
.eh_frame_hdr:000000000000607A                 db    0
.eh_frame_hdr:000000000000607B                 db    0
.eh_frame_hdr:000000000000607C                 db  28h ; (
.eh_frame_hdr:000000000000607D                 db 0F0h
.eh_frame_hdr:000000000000607E                 db 0FFh
.eh_frame_hdr:000000000000607F                 db 0FFh
.eh_frame_hdr:0000000000006080                 db  88h
.eh_frame_hdr:0000000000006081                 db  0Ch
.eh_frame_hdr:0000000000006082                 db    0
.eh_frame_hdr:0000000000006083                 db    0
.eh_frame_hdr:0000000000006084                 db  88h
.eh_frame_hdr:0000000000006085                 db 0F0h
.eh_frame_hdr:0000000000006086                 db 0FFh
.eh_frame_hdr:0000000000006087                 db 0FFh
.eh_frame_hdr:0000000000006088                 db 0B8h
.eh_frame_hdr:0000000000006089                 db  0Ch
.eh_frame_hdr:000000000000608A                 db    0
.eh_frame_hdr:000000000000608B                 db    0
.eh_frame_hdr:000000000000608C                 db 0F8h
.eh_frame_hdr:000000000000608D                 db 0F0h
.eh_frame_hdr:000000000000608E                 db 0FFh
.eh_frame_hdr:000000000000608F                 db 0FFh
.eh_frame_hdr:0000000000006090                 db    0
.eh_frame_hdr:0000000000006091                 db  0Dh
.eh_frame_hdr:0000000000006092                 db    0
.eh_frame_hdr:0000000000006093                 db    0
.eh_frame_hdr:0000000000006094                 db    8
.eh_frame_hdr:0000000000006095                 db 0F1h
.eh_frame_hdr:0000000000006096                 db 0FFh
.eh_frame_hdr:0000000000006097                 db 0FFh
.eh_frame_hdr:0000000000006098                 db  18h
.eh_frame_hdr:0000000000006099                 db  0Dh
.eh_frame_hdr:000000000000609A                 db    0
.eh_frame_hdr:000000000000609B                 db    0
.eh_frame_hdr:000000000000609B _eh_frame_hdr   ends
.eh_frame_hdr:000000000000609B
LOAD:000000000000609C ; ===========================================================================
LOAD:000000000000609C
LOAD:000000000000609C ; Segment type: Pure code
LOAD:000000000000609C ; Segment permissions: Read/Execute
LOAD:000000000000609C LOAD            segment byte public 'CODE' use64
LOAD:000000000000609C                 assume cs:LOAD
LOAD:000000000000609C                 ;org 609Ch
LOAD:000000000000609C                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000609C                 align 20h
LOAD:000000000000609C LOAD            ends
LOAD:000000000000609C
.eh_frame:00000000000060A0 ; ===========================================================================
.eh_frame:00000000000060A0
.eh_frame:00000000000060A0 ; Segment type: Pure data
.eh_frame:00000000000060A0 ; Segment permissions: Read
.eh_frame:00000000000060A0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000060A0                 assume cs:_eh_frame
.eh_frame:00000000000060A0                 ;org 60A0h
.eh_frame:00000000000060A0                 db  14h
.eh_frame:00000000000060A1                 db    0
.eh_frame:00000000000060A2                 db    0
.eh_frame:00000000000060A3                 db    0
.eh_frame:00000000000060A4                 db    0
.eh_frame:00000000000060A5                 db    0
.eh_frame:00000000000060A6                 db    0
.eh_frame:00000000000060A7                 db    0
.eh_frame:00000000000060A8                 db    1
.eh_frame:00000000000060A9                 db  7Ah ; z
.eh_frame:00000000000060AA                 db  52h ; R
.eh_frame:00000000000060AB                 db    0
.eh_frame:00000000000060AC                 db    1
.eh_frame:00000000000060AD                 db  78h ; x
.eh_frame:00000000000060AE                 db  10h
.eh_frame:00000000000060AF                 db    1
.eh_frame:00000000000060B0                 db  1Bh
.eh_frame:00000000000060B1                 db  0Ch
.eh_frame:00000000000060B2                 db    7
.eh_frame:00000000000060B3                 db    8
.eh_frame:00000000000060B4                 db  90h
.eh_frame:00000000000060B5                 db    1
.eh_frame:00000000000060B6                 db    7
.eh_frame:00000000000060B7                 db  10h
.eh_frame:00000000000060B8                 db  14h
.eh_frame:00000000000060B9                 db    0
.eh_frame:00000000000060BA                 db    0
.eh_frame:00000000000060BB                 db    0
.eh_frame:00000000000060BC                 db  1Ch
.eh_frame:00000000000060BD                 db    0
.eh_frame:00000000000060BE                 db    0
.eh_frame:00000000000060BF                 db    0
.eh_frame:00000000000060C0                 db  10h
.eh_frame:00000000000060C1                 db 0B9h
.eh_frame:00000000000060C2                 db 0FFh
.eh_frame:00000000000060C3                 db 0FFh
.eh_frame:00000000000060C4                 db  2Bh ; +
.eh_frame:00000000000060C5                 db    0
.eh_frame:00000000000060C6                 db    0
.eh_frame:00000000000060C7                 db    0
.eh_frame:00000000000060C8                 db    0
.eh_frame:00000000000060C9                 db    0
.eh_frame:00000000000060CA                 db    0
.eh_frame:00000000000060CB                 db    0
.eh_frame:00000000000060CC                 db    0
.eh_frame:00000000000060CD                 db    0
.eh_frame:00000000000060CE                 db    0
.eh_frame:00000000000060CF                 db    0
.eh_frame:00000000000060D0                 db  14h
.eh_frame:00000000000060D1                 db    0
.eh_frame:00000000000060D2                 db    0
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db    0
.eh_frame:00000000000060D5                 db    0
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db    1
.eh_frame:00000000000060D9                 db  7Ah ; z
.eh_frame:00000000000060DA                 db  52h ; R
.eh_frame:00000000000060DB                 db    0
.eh_frame:00000000000060DC                 db    1
.eh_frame:00000000000060DD                 db  78h ; x
.eh_frame:00000000000060DE                 db  10h
.eh_frame:00000000000060DF                 db    1
.eh_frame:00000000000060E0                 db  1Bh
.eh_frame:00000000000060E1                 db  0Ch
.eh_frame:00000000000060E2                 db    7
.eh_frame:00000000000060E3                 db    8
.eh_frame:00000000000060E4                 db  90h
.eh_frame:00000000000060E5                 db    1
.eh_frame:00000000000060E6                 db    0
.eh_frame:00000000000060E7                 db    0
.eh_frame:00000000000060E8                 db  24h ; $
.eh_frame:00000000000060E9                 db    0
.eh_frame:00000000000060EA                 db    0
.eh_frame:00000000000060EB                 db    0
.eh_frame:00000000000060EC                 db  1Ch
.eh_frame:00000000000060ED                 db    0
.eh_frame:00000000000060EE                 db    0
.eh_frame:00000000000060EF                 db    0
.eh_frame:00000000000060F0                 db  30h ; 0
.eh_frame:00000000000060F1                 db 0B2h
.eh_frame:00000000000060F2                 db 0FFh
.eh_frame:00000000000060F3                 db 0FFh
.eh_frame:00000000000060F4                 db 0E0h
.eh_frame:00000000000060F5                 db    2
.eh_frame:00000000000060F6                 db    0
.eh_frame:00000000000060F7                 db    0
.eh_frame:00000000000060F8                 db    0
.eh_frame:00000000000060F9                 db  0Eh
.eh_frame:00000000000060FA                 db  10h
.eh_frame:00000000000060FB                 db  46h ; F
.eh_frame:00000000000060FC                 db  0Eh
.eh_frame:00000000000060FD                 db  18h
.eh_frame:00000000000060FE                 db  4Ah ; J
.eh_frame:00000000000060FF                 db  0Fh
.eh_frame:0000000000006100                 db  0Bh
.eh_frame:0000000000006101                 db  77h ; w
.eh_frame:0000000000006102                 db    8
.eh_frame:0000000000006103                 db  80h
.eh_frame:0000000000006104                 db    0
.eh_frame:0000000000006105                 db  3Fh ; ?
.eh_frame:0000000000006106                 db  1Ah
.eh_frame:0000000000006107                 db  3Bh ; ;
.eh_frame:0000000000006108                 db  2Ah ; *
.eh_frame:0000000000006109                 db  33h ; 3
.eh_frame:000000000000610A                 db  24h ; $
.eh_frame:000000000000610B                 db  22h ; "
.eh_frame:000000000000610C                 db    0
.eh_frame:000000000000610D                 db    0
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db  14h
.eh_frame:0000000000006111                 db    0
.eh_frame:0000000000006112                 db    0
.eh_frame:0000000000006113                 db    0
.eh_frame:0000000000006114                 db  44h ; D
.eh_frame:0000000000006115                 db    0
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db 0E8h
.eh_frame:0000000000006119                 db 0B4h
.eh_frame:000000000000611A                 db 0FFh
.eh_frame:000000000000611B                 db 0FFh
.eh_frame:000000000000611C                 db    8
.eh_frame:000000000000611D                 db    0
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db    0
.eh_frame:0000000000006121                 db    0
.eh_frame:0000000000006122                 db    0
.eh_frame:0000000000006123                 db    0
.eh_frame:0000000000006124                 db    0
.eh_frame:0000000000006125                 db    0
.eh_frame:0000000000006126                 db    0
.eh_frame:0000000000006127                 db    0
.eh_frame:0000000000006128                 db  28h ; (
.eh_frame:0000000000006129                 db    0
.eh_frame:000000000000612A                 db    0
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db  5Ch ; \
.eh_frame:000000000000612D                 db    0
.eh_frame:000000000000612E                 db    0
.eh_frame:000000000000612F                 db    0
.eh_frame:0000000000006130                 db 0B0h
.eh_frame:0000000000006131                 db 0B9h
.eh_frame:0000000000006132                 db 0FFh
.eh_frame:0000000000006133                 db 0FFh
.eh_frame:0000000000006134                 db 0BAh
.eh_frame:0000000000006135                 db    3
.eh_frame:0000000000006136                 db    0
.eh_frame:0000000000006137                 db    0
.eh_frame:0000000000006138                 db    0
.eh_frame:0000000000006139                 db  42h ; B
.eh_frame:000000000000613A                 db  0Eh
.eh_frame:000000000000613B                 db  10h
.eh_frame:000000000000613C                 db  8Dh
.eh_frame:000000000000613D                 db    2
.eh_frame:000000000000613E                 db  42h ; B
.eh_frame:000000000000613F                 db  0Eh
.eh_frame:0000000000006140                 db  18h
.eh_frame:0000000000006141                 db  8Ch
.eh_frame:0000000000006142                 db    3
.eh_frame:0000000000006143                 db  46h ; F
.eh_frame:0000000000006144                 db  0Eh
.eh_frame:0000000000006145                 db  20h
.eh_frame:0000000000006146                 db  86h
.eh_frame:0000000000006147                 db    4
.eh_frame:0000000000006148                 db  41h ; A
.eh_frame:0000000000006149                 db  0Eh
.eh_frame:000000000000614A                 db  28h ; (
.eh_frame:000000000000614B                 db  83h
.eh_frame:000000000000614C                 db    5
.eh_frame:000000000000614D                 db  49h ; I
.eh_frame:000000000000614E                 db  0Eh
.eh_frame:000000000000614F                 db 0B0h
.eh_frame:0000000000006150                 db    1
.eh_frame:0000000000006151                 db    0
.eh_frame:0000000000006152                 db    0
.eh_frame:0000000000006153                 db    0
.eh_frame:0000000000006154                 db  40h ; @
.eh_frame:0000000000006155                 db    0
.eh_frame:0000000000006156                 db    0
.eh_frame:0000000000006157                 db    0
.eh_frame:0000000000006158                 db  88h
.eh_frame:0000000000006159                 db    0
.eh_frame:000000000000615A                 db    0
.eh_frame:000000000000615B                 db    0
.eh_frame:000000000000615C                 db 0B4h
.eh_frame:000000000000615D                 db 0B4h
.eh_frame:000000000000615E                 db 0FFh
.eh_frame:000000000000615F                 db 0FFh
.eh_frame:0000000000006160                 db 0BEh
.eh_frame:0000000000006161                 db    3
.eh_frame:0000000000006162                 db    0
.eh_frame:0000000000006163                 db    0
.eh_frame:0000000000006164                 db    0
.eh_frame:0000000000006165                 db  42h ; B
.eh_frame:0000000000006166                 db  0Eh
.eh_frame:0000000000006167                 db  10h
.eh_frame:0000000000006168                 db  8Eh
.eh_frame:0000000000006169                 db    2
.eh_frame:000000000000616A                 db  42h ; B
.eh_frame:000000000000616B                 db  0Eh
.eh_frame:000000000000616C                 db  18h
.eh_frame:000000000000616D                 db  8Dh
.eh_frame:000000000000616E                 db    3
.eh_frame:000000000000616F                 db  42h ; B
.eh_frame:0000000000006170                 db  0Eh
.eh_frame:0000000000006171                 db  20h
.eh_frame:0000000000006172                 db  8Ch
.eh_frame:0000000000006173                 db    4
.eh_frame:0000000000006174                 db  41h ; A
.eh_frame:0000000000006175                 db  0Eh
.eh_frame:0000000000006176                 db  28h ; (
.eh_frame:0000000000006177                 db  86h
.eh_frame:0000000000006178                 db    5
.eh_frame:0000000000006179                 db  44h ; D
.eh_frame:000000000000617A                 db  0Eh
.eh_frame:000000000000617B                 db  30h ; 0
.eh_frame:000000000000617C                 db  83h
.eh_frame:000000000000617D                 db    6
.eh_frame:000000000000617E                 db  4Ch ; L
.eh_frame:000000000000617F                 db  0Eh
.eh_frame:0000000000006180                 db  40h ; @
.eh_frame:0000000000006181                 db    3
.eh_frame:0000000000006182                 db 0FDh
.eh_frame:0000000000006183                 db    2
.eh_frame:0000000000006184                 db  0Ah
.eh_frame:0000000000006185                 db  0Eh
.eh_frame:0000000000006186                 db  30h ; 0
.eh_frame:0000000000006187                 db  41h ; A
.eh_frame:0000000000006188                 db  0Eh
.eh_frame:0000000000006189                 db  28h ; (
.eh_frame:000000000000618A                 db  41h ; A
.eh_frame:000000000000618B                 db  0Eh
.eh_frame:000000000000618C                 db  20h
.eh_frame:000000000000618D                 db  42h ; B
.eh_frame:000000000000618E                 db  0Eh
.eh_frame:000000000000618F                 db  18h
.eh_frame:0000000000006190                 db  42h ; B
.eh_frame:0000000000006191                 db  0Eh
.eh_frame:0000000000006192                 db  10h
.eh_frame:0000000000006193                 db  42h ; B
.eh_frame:0000000000006194                 db  0Eh
.eh_frame:0000000000006195                 db    8
.eh_frame:0000000000006196                 db  41h ; A
.eh_frame:0000000000006197                 db  0Bh
.eh_frame:0000000000006198                 db  10h
.eh_frame:0000000000006199                 db    0
.eh_frame:000000000000619A                 db    0
.eh_frame:000000000000619B                 db    0
.eh_frame:000000000000619C                 db 0CCh
.eh_frame:000000000000619D                 db    0
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db    0
.eh_frame:00000000000061A1                 db 0BDh
.eh_frame:00000000000061A2                 db 0FFh
.eh_frame:00000000000061A3                 db 0FFh
.eh_frame:00000000000061A4                 db    8
.eh_frame:00000000000061A5                 db    0
.eh_frame:00000000000061A6                 db    0
.eh_frame:00000000000061A7                 db    0
.eh_frame:00000000000061A8                 db    0
.eh_frame:00000000000061A9                 db    0
.eh_frame:00000000000061AA                 db    0
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db  10h
.eh_frame:00000000000061AD                 db    0
.eh_frame:00000000000061AE                 db    0
.eh_frame:00000000000061AF                 db    0
.eh_frame:00000000000061B0                 db 0E0h
.eh_frame:00000000000061B1                 db    0
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db 0FCh
.eh_frame:00000000000061B5                 db 0BCh
.eh_frame:00000000000061B6                 db 0FFh
.eh_frame:00000000000061B7                 db 0FFh
.eh_frame:00000000000061B8                 db    8
.eh_frame:00000000000061B9                 db    0
.eh_frame:00000000000061BA                 db    0
.eh_frame:00000000000061BB                 db    0
.eh_frame:00000000000061BC                 db    0
.eh_frame:00000000000061BD                 db    0
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db  2Ch ; ,
.eh_frame:00000000000061C1                 db    0
.eh_frame:00000000000061C2                 db    0
.eh_frame:00000000000061C3                 db    0
.eh_frame:00000000000061C4                 db 0F4h
.eh_frame:00000000000061C5                 db    0
.eh_frame:00000000000061C6                 db    0
.eh_frame:00000000000061C7                 db    0
.eh_frame:00000000000061C8                 db 0F8h
.eh_frame:00000000000061C9                 db 0BCh
.eh_frame:00000000000061CA                 db 0FFh
.eh_frame:00000000000061CB                 db 0FFh
.eh_frame:00000000000061CC                 db 0A4h
.eh_frame:00000000000061CD                 db    0
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db    0
.eh_frame:00000000000061D1                 db  41h ; A
.eh_frame:00000000000061D2                 db  0Eh
.eh_frame:00000000000061D3                 db  10h
.eh_frame:00000000000061D4                 db  86h
.eh_frame:00000000000061D5                 db    2
.eh_frame:00000000000061D6                 db  41h ; A
.eh_frame:00000000000061D7                 db  0Eh
.eh_frame:00000000000061D8                 db  18h
.eh_frame:00000000000061D9                 db  83h
.eh_frame:00000000000061DA                 db    3
.eh_frame:00000000000061DB                 db  44h ; D
.eh_frame:00000000000061DC                 db  0Eh
.eh_frame:00000000000061DD                 db  20h
.eh_frame:00000000000061DE                 db  7Ah ; z
.eh_frame:00000000000061DF                 db  0Ah
.eh_frame:00000000000061E0                 db  0Eh
.eh_frame:00000000000061E1                 db  18h
.eh_frame:00000000000061E2                 db  41h ; A
.eh_frame:00000000000061E3                 db  0Eh
.eh_frame:00000000000061E4                 db  10h
.eh_frame:00000000000061E5                 db  41h ; A
.eh_frame:00000000000061E6                 db  0Eh
.eh_frame:00000000000061E7                 db    8
.eh_frame:00000000000061E8                 db  41h ; A
.eh_frame:00000000000061E9                 db  0Bh
.eh_frame:00000000000061EA                 db    0
.eh_frame:00000000000061EB                 db    0
.eh_frame:00000000000061EC                 db    0
.eh_frame:00000000000061ED                 db    0
.eh_frame:00000000000061EE                 db    0
.eh_frame:00000000000061EF                 db    0
.eh_frame:00000000000061F0                 db  1Ch
.eh_frame:00000000000061F1                 db    0
.eh_frame:00000000000061F2                 db    0
.eh_frame:00000000000061F3                 db    0
.eh_frame:00000000000061F4                 db  24h ; $
.eh_frame:00000000000061F5                 db    1
.eh_frame:00000000000061F6                 db    0
.eh_frame:00000000000061F7                 db    0
.eh_frame:00000000000061F8                 db  78h ; x
.eh_frame:00000000000061F9                 db 0BDh
.eh_frame:00000000000061FA                 db 0FFh
.eh_frame:00000000000061FB                 db 0FFh
.eh_frame:00000000000061FC                 db  9Fh
.eh_frame:00000000000061FD                 db    0
.eh_frame:00000000000061FE                 db    0
.eh_frame:00000000000061FF                 db    0
.eh_frame:0000000000006200                 db    0
.eh_frame:0000000000006201                 db  44h ; D
.eh_frame:0000000000006202                 db  0Eh
.eh_frame:0000000000006203                 db  10h
.eh_frame:0000000000006204                 db  83h
.eh_frame:0000000000006205                 db    2
.eh_frame:0000000000006206                 db    2
.eh_frame:0000000000006207                 db  78h ; x
.eh_frame:0000000000006208                 db  0Ah
.eh_frame:0000000000006209                 db  0Eh
.eh_frame:000000000000620A                 db    8
.eh_frame:000000000000620B                 db  41h ; A
.eh_frame:000000000000620C                 db  0Bh
.eh_frame:000000000000620D                 db    0
.eh_frame:000000000000620E                 db    0
.eh_frame:000000000000620F                 db    0
.eh_frame:0000000000006210                 db  40h ; @
.eh_frame:0000000000006211                 db    0
.eh_frame:0000000000006212                 db    0
.eh_frame:0000000000006213                 db    0
.eh_frame:0000000000006214                 db  44h ; D
.eh_frame:0000000000006215                 db    1
.eh_frame:0000000000006216                 db    0
.eh_frame:0000000000006217                 db    0
.eh_frame:0000000000006218                 db 0F8h
.eh_frame:0000000000006219                 db 0BDh
.eh_frame:000000000000621A                 db 0FFh
.eh_frame:000000000000621B                 db 0FFh
.eh_frame:000000000000621C                 db 0E7h
.eh_frame:000000000000621D                 db    0
.eh_frame:000000000000621E                 db    0
.eh_frame:000000000000621F                 db    0
.eh_frame:0000000000006220                 db    0
.eh_frame:0000000000006221                 db  41h ; A
.eh_frame:0000000000006222                 db  0Eh
.eh_frame:0000000000006223                 db  10h
.eh_frame:0000000000006224                 db  86h
.eh_frame:0000000000006225                 db    2
.eh_frame:0000000000006226                 db  41h ; A
.eh_frame:0000000000006227                 db  0Eh
.eh_frame:0000000000006228                 db  18h
.eh_frame:0000000000006229                 db  83h
.eh_frame:000000000000622A                 db    3
.eh_frame:000000000000622B                 db  49h ; I
.eh_frame:000000000000622C                 db  0Eh
.eh_frame:000000000000622D                 db  20h
.eh_frame:000000000000622E                 db  6Eh ; n
.eh_frame:000000000000622F                 db  0Ah
.eh_frame:0000000000006230                 db  0Eh
.eh_frame:0000000000006231                 db  18h
.eh_frame:0000000000006232                 db  41h ; A
.eh_frame:0000000000006233                 db  0Eh
.eh_frame:0000000000006234                 db  10h
.eh_frame:0000000000006235                 db  41h ; A
.eh_frame:0000000000006236                 db  0Eh
.eh_frame:0000000000006237                 db    8
.eh_frame:0000000000006238                 db  45h ; E
.eh_frame:0000000000006239                 db  0Bh
.eh_frame:000000000000623A                 db    2
.eh_frame:000000000000623B                 db  4Ah ; J
.eh_frame:000000000000623C                 db  0Ah
.eh_frame:000000000000623D                 db  0Eh
.eh_frame:000000000000623E                 db  18h
.eh_frame:000000000000623F                 db  41h ; A
.eh_frame:0000000000006240                 db  0Eh
.eh_frame:0000000000006241                 db  10h
.eh_frame:0000000000006242                 db  41h ; A
.eh_frame:0000000000006243                 db  0Eh
.eh_frame:0000000000006244                 db    8
.eh_frame:0000000000006245                 db  44h ; D
.eh_frame:0000000000006246                 db  0Bh
.eh_frame:0000000000006247                 db    2
.eh_frame:0000000000006248                 db  54h ; T
.eh_frame:0000000000006249                 db  0Eh
.eh_frame:000000000000624A                 db  18h
.eh_frame:000000000000624B                 db  41h ; A
.eh_frame:000000000000624C                 db  0Eh
.eh_frame:000000000000624D                 db  10h
.eh_frame:000000000000624E                 db  41h ; A
.eh_frame:000000000000624F                 db  0Eh
.eh_frame:0000000000006250                 db    8
.eh_frame:0000000000006251                 db    0
.eh_frame:0000000000006252                 db    0
.eh_frame:0000000000006253                 db    0
.eh_frame:0000000000006254                 db  74h ; t
.eh_frame:0000000000006255                 db    0
.eh_frame:0000000000006256                 db    0
.eh_frame:0000000000006257                 db    0
.eh_frame:0000000000006258                 db  88h
.eh_frame:0000000000006259                 db    1
.eh_frame:000000000000625A                 db    0
.eh_frame:000000000000625B                 db    0
.eh_frame:000000000000625C                 db 0A4h
.eh_frame:000000000000625D                 db 0BEh
.eh_frame:000000000000625E                 db 0FFh
.eh_frame:000000000000625F                 db 0FFh
.eh_frame:0000000000006260                 db  34h ; 4
.eh_frame:0000000000006261                 db  12h
.eh_frame:0000000000006262                 db    0
.eh_frame:0000000000006263                 db    0
.eh_frame:0000000000006264                 db    0
.eh_frame:0000000000006265                 db  42h ; B
.eh_frame:0000000000006266                 db  0Eh
.eh_frame:0000000000006267                 db  10h
.eh_frame:0000000000006268                 db  8Fh
.eh_frame:0000000000006269                 db    2
.eh_frame:000000000000626A                 db  42h ; B
.eh_frame:000000000000626B                 db  0Eh
.eh_frame:000000000000626C                 db  18h
.eh_frame:000000000000626D                 db  8Eh
.eh_frame:000000000000626E                 db    3
.eh_frame:000000000000626F                 db  45h ; E
.eh_frame:0000000000006270                 db  0Eh
.eh_frame:0000000000006271                 db  20h
.eh_frame:0000000000006272                 db  8Dh
.eh_frame:0000000000006273                 db    4
.eh_frame:0000000000006274                 db  42h ; B
.eh_frame:0000000000006275                 db  0Eh
.eh_frame:0000000000006276                 db  28h ; (
.eh_frame:0000000000006277                 db  8Ch
.eh_frame:0000000000006278                 db    5
.eh_frame:0000000000006279                 db  44h ; D
.eh_frame:000000000000627A                 db  0Eh
.eh_frame:000000000000627B                 db  30h ; 0
.eh_frame:000000000000627C                 db  86h
.eh_frame:000000000000627D                 db    6
.eh_frame:000000000000627E                 db  41h ; A
.eh_frame:000000000000627F                 db  0Eh
.eh_frame:0000000000006280                 db  38h ; 8
.eh_frame:0000000000006281                 db  83h
.eh_frame:0000000000006282                 db    7
.eh_frame:0000000000006283                 db  53h ; S
.eh_frame:0000000000006284                 db  0Eh
.eh_frame:0000000000006285                 db 0F0h
.eh_frame:0000000000006286                 db    1
.eh_frame:0000000000006287                 db    3
.eh_frame:0000000000006288                 db  81h
.eh_frame:0000000000006289                 db  0Bh
.eh_frame:000000000000628A                 db  0Eh
.eh_frame:000000000000628B                 db 0F8h
.eh_frame:000000000000628C                 db    1
.eh_frame:000000000000628D                 db  4Ah ; J
.eh_frame:000000000000628E                 db  0Eh
.eh_frame:000000000000628F                 db  80h
.eh_frame:0000000000006290                 db    2
.eh_frame:0000000000006291                 db  44h ; D
.eh_frame:0000000000006292                 db  0Eh
.eh_frame:0000000000006293                 db  88h
.eh_frame:0000000000006294                 db    2
.eh_frame:0000000000006295                 db  45h ; E
.eh_frame:0000000000006296                 db  0Eh
.eh_frame:0000000000006297                 db  90h
.eh_frame:0000000000006298                 db    2
.eh_frame:0000000000006299                 db  5Fh ; _
.eh_frame:000000000000629A                 db  0Eh
.eh_frame:000000000000629B                 db 0F0h
.eh_frame:000000000000629C                 db    1
.eh_frame:000000000000629D                 db  64h ; d
.eh_frame:000000000000629E                 db  0Ah
.eh_frame:000000000000629F                 db  0Eh
.eh_frame:00000000000062A0                 db  38h ; 8
.eh_frame:00000000000062A1                 db  41h ; A
.eh_frame:00000000000062A2                 db  0Eh
.eh_frame:00000000000062A3                 db  30h ; 0
.eh_frame:00000000000062A4                 db  41h ; A
.eh_frame:00000000000062A5                 db  0Eh
.eh_frame:00000000000062A6                 db  28h ; (
.eh_frame:00000000000062A7                 db  42h ; B
.eh_frame:00000000000062A8                 db  0Eh
.eh_frame:00000000000062A9                 db  20h
.eh_frame:00000000000062AA                 db  42h ; B
.eh_frame:00000000000062AB                 db  0Eh
.eh_frame:00000000000062AC                 db  18h
.eh_frame:00000000000062AD                 db  42h ; B
.eh_frame:00000000000062AE                 db  0Eh
.eh_frame:00000000000062AF                 db  10h
.eh_frame:00000000000062B0                 db  42h ; B
.eh_frame:00000000000062B1                 db  0Eh
.eh_frame:00000000000062B2                 db    8
.eh_frame:00000000000062B3                 db  44h ; D
.eh_frame:00000000000062B4                 db  0Bh
.eh_frame:00000000000062B5                 db    3
.eh_frame:00000000000062B6                 db  99h
.eh_frame:00000000000062B7                 db    5
.eh_frame:00000000000062B8                 db  0Eh
.eh_frame:00000000000062B9                 db 0F8h
.eh_frame:00000000000062BA                 db    1
.eh_frame:00000000000062BB                 db  4Dh ; M
.eh_frame:00000000000062BC                 db  0Eh
.eh_frame:00000000000062BD                 db  80h
.eh_frame:00000000000062BE                 db    2
.eh_frame:00000000000062BF                 db  44h ; D
.eh_frame:00000000000062C0                 db  0Eh
.eh_frame:00000000000062C1                 db  88h
.eh_frame:00000000000062C2                 db    2
.eh_frame:00000000000062C3                 db  47h ; G
.eh_frame:00000000000062C4                 db  0Eh
.eh_frame:00000000000062C5                 db  90h
.eh_frame:00000000000062C6                 db    2
.eh_frame:00000000000062C7                 db  5Bh ; [
.eh_frame:00000000000062C8                 db  0Eh
.eh_frame:00000000000062C9                 db 0F0h
.eh_frame:00000000000062CA                 db    1
.eh_frame:00000000000062CB                 db    0
.eh_frame:00000000000062CC                 db  68h ; h
.eh_frame:00000000000062CD                 db    0
.eh_frame:00000000000062CE                 db    0
.eh_frame:00000000000062CF                 db    0
.eh_frame:00000000000062D0                 db    0
.eh_frame:00000000000062D1                 db    2
.eh_frame:00000000000062D2                 db    0
.eh_frame:00000000000062D3                 db    0
.eh_frame:00000000000062D4                 db  6Ch ; l
.eh_frame:00000000000062D5                 db 0D0h
.eh_frame:00000000000062D6                 db 0FFh
.eh_frame:00000000000062D7                 db 0FFh
.eh_frame:00000000000062D8                 db 0ABh
.eh_frame:00000000000062D9                 db    1
.eh_frame:00000000000062DA                 db    0
.eh_frame:00000000000062DB                 db    0
.eh_frame:00000000000062DC                 db    0
.eh_frame:00000000000062DD                 db  42h ; B
.eh_frame:00000000000062DE                 db  0Eh
.eh_frame:00000000000062DF                 db  10h
.eh_frame:00000000000062E0                 db  8Fh
.eh_frame:00000000000062E1                 db    2
.eh_frame:00000000000062E2                 db  42h ; B
.eh_frame:00000000000062E3                 db  0Eh
.eh_frame:00000000000062E4                 db  18h
.eh_frame:00000000000062E5                 db  8Eh
.eh_frame:00000000000062E6                 db    3
.eh_frame:00000000000062E7                 db  45h ; E
.eh_frame:00000000000062E8                 db  0Eh
.eh_frame:00000000000062E9                 db  20h
.eh_frame:00000000000062EA                 db  8Dh
.eh_frame:00000000000062EB                 db    4
.eh_frame:00000000000062EC                 db  42h ; B
.eh_frame:00000000000062ED                 db  0Eh
.eh_frame:00000000000062EE                 db  28h ; (
.eh_frame:00000000000062EF                 db  8Ch
.eh_frame:00000000000062F0                 db    5
.eh_frame:00000000000062F1                 db  44h ; D
.eh_frame:00000000000062F2                 db  0Eh
.eh_frame:00000000000062F3                 db  30h ; 0
.eh_frame:00000000000062F4                 db  86h
.eh_frame:00000000000062F5                 db    6
.eh_frame:00000000000062F6                 db  41h ; A
.eh_frame:00000000000062F7                 db  0Eh
.eh_frame:00000000000062F8                 db  38h ; 8
.eh_frame:00000000000062F9                 db  83h
.eh_frame:00000000000062FA                 db    7
.eh_frame:00000000000062FB                 db  47h ; G
.eh_frame:00000000000062FC                 db  0Eh
.eh_frame:00000000000062FD                 db  60h ; `
.eh_frame:00000000000062FE                 db    2
.eh_frame:00000000000062FF                 db  99h
.eh_frame:0000000000006300                 db  0Eh
.eh_frame:0000000000006301                 db  68h ; h
.eh_frame:0000000000006302                 db  5Fh ; _
.eh_frame:0000000000006303                 db  0Eh
.eh_frame:0000000000006304                 db  70h ; p
.eh_frame:0000000000006305                 db  46h ; F
.eh_frame:0000000000006306                 db  0Eh
.eh_frame:0000000000006307                 db  78h ; x
.eh_frame:0000000000006308                 db  42h ; B
.eh_frame:0000000000006309                 db  0Eh
.eh_frame:000000000000630A                 db  80h
.eh_frame:000000000000630B                 db    1
.eh_frame:000000000000630C                 db  59h ; Y
.eh_frame:000000000000630D                 db  0Eh
.eh_frame:000000000000630E                 db  60h ; `
.eh_frame:000000000000630F                 db    2
.eh_frame:0000000000006310                 db  40h ; @
.eh_frame:0000000000006311                 db  0Eh
.eh_frame:0000000000006312                 db  68h ; h
.eh_frame:0000000000006313                 db  4Bh ; K
.eh_frame:0000000000006314                 db  0Eh
.eh_frame:0000000000006315                 db  70h ; p
.eh_frame:0000000000006316                 db  43h ; C
.eh_frame:0000000000006317                 db  0Eh
.eh_frame:0000000000006318                 db  78h ; x
.eh_frame:0000000000006319                 db  45h ; E
.eh_frame:000000000000631A                 db  0Eh
.eh_frame:000000000000631B                 db  80h
.eh_frame:000000000000631C                 db    1
.eh_frame:000000000000631D                 db  5Eh ; ^
.eh_frame:000000000000631E                 db  0Eh
.eh_frame:000000000000631F                 db  60h ; `
.eh_frame:0000000000006320                 db  4Ch ; L
.eh_frame:0000000000006321                 db  0Ah
.eh_frame:0000000000006322                 db  0Eh
.eh_frame:0000000000006323                 db  38h ; 8
.eh_frame:0000000000006324                 db  44h ; D
.eh_frame:0000000000006325                 db  0Eh
.eh_frame:0000000000006326                 db  30h ; 0
.eh_frame:0000000000006327                 db  41h ; A
.eh_frame:0000000000006328                 db  0Eh
.eh_frame:0000000000006329                 db  28h ; (
.eh_frame:000000000000632A                 db  42h ; B
.eh_frame:000000000000632B                 db  0Eh
.eh_frame:000000000000632C                 db  20h
.eh_frame:000000000000632D                 db  42h ; B
.eh_frame:000000000000632E                 db  0Eh
.eh_frame:000000000000632F                 db  18h
.eh_frame:0000000000006330                 db  42h ; B
.eh_frame:0000000000006331                 db  0Eh
.eh_frame:0000000000006332                 db  10h
.eh_frame:0000000000006333                 db  42h ; B
.eh_frame:0000000000006334                 db  0Eh
.eh_frame:0000000000006335                 db    8
.eh_frame:0000000000006336                 db  46h ; F
.eh_frame:0000000000006337                 db  0Bh
.eh_frame:0000000000006338                 db  28h ; (
.eh_frame:0000000000006339                 db    0
.eh_frame:000000000000633A                 db    0
.eh_frame:000000000000633B                 db    0
.eh_frame:000000000000633C                 db  6Ch ; l
.eh_frame:000000000000633D                 db    2
.eh_frame:000000000000633E                 db    0
.eh_frame:000000000000633F                 db    0
.eh_frame:0000000000006340                 db 0B0h
.eh_frame:0000000000006341                 db 0D1h
.eh_frame:0000000000006342                 db 0FFh
.eh_frame:0000000000006343                 db 0FFh
.eh_frame:0000000000006344                 db  36h ; 6
.eh_frame:0000000000006345                 db    0
.eh_frame:0000000000006346                 db    0
.eh_frame:0000000000006347                 db    0
.eh_frame:0000000000006348                 db    0
.eh_frame:0000000000006349                 db  42h ; B
.eh_frame:000000000000634A                 db  0Eh
.eh_frame:000000000000634B                 db  10h
.eh_frame:000000000000634C                 db  8Ch
.eh_frame:000000000000634D                 db    2
.eh_frame:000000000000634E                 db  41h ; A
.eh_frame:000000000000634F                 db  0Eh
.eh_frame:0000000000006350                 db  18h
.eh_frame:0000000000006351                 db  86h
.eh_frame:0000000000006352                 db    3
.eh_frame:0000000000006353                 db  41h ; A
.eh_frame:0000000000006354                 db  0Eh
.eh_frame:0000000000006355                 db  20h
.eh_frame:0000000000006356                 db  83h
.eh_frame:0000000000006357                 db    4
.eh_frame:0000000000006358                 db  6Eh ; n
.eh_frame:0000000000006359                 db  0Eh
.eh_frame:000000000000635A                 db  18h
.eh_frame:000000000000635B                 db  41h ; A
.eh_frame:000000000000635C                 db  0Eh
.eh_frame:000000000000635D                 db  10h
.eh_frame:000000000000635E                 db  42h ; B
.eh_frame:000000000000635F                 db  0Eh
.eh_frame:0000000000006360                 db    8
.eh_frame:0000000000006361                 db    0
.eh_frame:0000000000006362                 db    0
.eh_frame:0000000000006363                 db    0
.eh_frame:0000000000006364                 db  10h
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db  98h
.eh_frame:0000000000006369                 db    2
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db 0C4h
.eh_frame:000000000000636D                 db 0D1h
.eh_frame:000000000000636E                 db 0FFh
.eh_frame:000000000000636F                 db 0FFh
.eh_frame:0000000000006370                 db  11h
.eh_frame:0000000000006371                 db    0
.eh_frame:0000000000006372                 db    0
.eh_frame:0000000000006373                 db    0
.eh_frame:0000000000006374                 db    0
.eh_frame:0000000000006375                 db    0
.eh_frame:0000000000006376                 db    0
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db  10h
.eh_frame:0000000000006379                 db    0
.eh_frame:000000000000637A                 db    0
.eh_frame:000000000000637B                 db    0
.eh_frame:000000000000637C                 db 0ACh
.eh_frame:000000000000637D                 db    2
.eh_frame:000000000000637E                 db    0
.eh_frame:000000000000637F                 db    0
.eh_frame:0000000000006380                 db 0D0h
.eh_frame:0000000000006381                 db 0D1h
.eh_frame:0000000000006382                 db 0FFh
.eh_frame:0000000000006383                 db 0FFh
.eh_frame:0000000000006384                 db  11h
.eh_frame:0000000000006385                 db    0
.eh_frame:0000000000006386                 db    0
.eh_frame:0000000000006387                 db    0
.eh_frame:0000000000006388                 db    0
.eh_frame:0000000000006389                 db    0
.eh_frame:000000000000638A                 db    0
.eh_frame:000000000000638B                 db    0
.eh_frame:000000000000638C                 db  10h
.eh_frame:000000000000638D                 db    0
.eh_frame:000000000000638E                 db    0
.eh_frame:000000000000638F                 db    0
.eh_frame:0000000000006390                 db 0C0h
.eh_frame:0000000000006391                 db    2
.eh_frame:0000000000006392                 db    0
.eh_frame:0000000000006393                 db    0
.eh_frame:0000000000006394                 db 0DCh
.eh_frame:0000000000006395                 db 0D1h
.eh_frame:0000000000006396                 db 0FFh
.eh_frame:0000000000006397                 db 0FFh
.eh_frame:0000000000006398                 db  35h ; 5
.eh_frame:0000000000006399                 db    0
.eh_frame:000000000000639A                 db    0
.eh_frame:000000000000639B                 db    0
.eh_frame:000000000000639C                 db    0
.eh_frame:000000000000639D                 db    0
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db  10h
.eh_frame:00000000000063A1                 db    0
.eh_frame:00000000000063A2                 db    0
.eh_frame:00000000000063A3                 db    0
.eh_frame:00000000000063A4                 db 0D4h
.eh_frame:00000000000063A5                 db    2
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db    8
.eh_frame:00000000000063A9                 db 0D2h
.eh_frame:00000000000063AA                 db 0FFh
.eh_frame:00000000000063AB                 db 0FFh
.eh_frame:00000000000063AC                 db  15h
.eh_frame:00000000000063AD                 db    0
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db    0
.eh_frame:00000000000063B1                 db    0
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db  10h
.eh_frame:00000000000063B5                 db    0
.eh_frame:00000000000063B6                 db    0
.eh_frame:00000000000063B7                 db    0
.eh_frame:00000000000063B8                 db 0E8h
.eh_frame:00000000000063B9                 db    2
.eh_frame:00000000000063BA                 db    0
.eh_frame:00000000000063BB                 db    0
.eh_frame:00000000000063BC                 db  14h
.eh_frame:00000000000063BD                 db 0D2h
.eh_frame:00000000000063BE                 db 0FFh
.eh_frame:00000000000063BF                 db 0FFh
.eh_frame:00000000000063C0                 db  30h ; 0
.eh_frame:00000000000063C1                 db    0
.eh_frame:00000000000063C2                 db    0
.eh_frame:00000000000063C3                 db    0
.eh_frame:00000000000063C4                 db    0
.eh_frame:00000000000063C5                 db  6Bh ; k
.eh_frame:00000000000063C6                 db  0Eh
.eh_frame:00000000000063C7                 db  10h
.eh_frame:00000000000063C8                 db  50h ; P
.eh_frame:00000000000063C9                 db    0
.eh_frame:00000000000063CA                 db    0
.eh_frame:00000000000063CB                 db    0
.eh_frame:00000000000063CC                 db 0FCh
.eh_frame:00000000000063CD                 db    2
.eh_frame:00000000000063CE                 db    0
.eh_frame:00000000000063CF                 db    0
.eh_frame:00000000000063D0                 db  30h ; 0
.eh_frame:00000000000063D1                 db 0D2h
.eh_frame:00000000000063D2                 db 0FFh
.eh_frame:00000000000063D3                 db 0FFh
.eh_frame:00000000000063D4                 db  74h ; t
.eh_frame:00000000000063D5                 db    0
.eh_frame:00000000000063D6                 db    0
.eh_frame:00000000000063D7                 db    0
.eh_frame:00000000000063D8                 db    0
.eh_frame:00000000000063D9                 db  42h ; B
.eh_frame:00000000000063DA                 db  0Eh
.eh_frame:00000000000063DB                 db  10h
.eh_frame:00000000000063DC                 db  8Fh
.eh_frame:00000000000063DD                 db    2
.eh_frame:00000000000063DE                 db  42h ; B
.eh_frame:00000000000063DF                 db  0Eh
.eh_frame:00000000000063E0                 db  18h
.eh_frame:00000000000063E1                 db  8Eh
.eh_frame:00000000000063E2                 db    3
.eh_frame:00000000000063E3                 db  49h ; I
.eh_frame:00000000000063E4                 db  0Eh
.eh_frame:00000000000063E5                 db  20h
.eh_frame:00000000000063E6                 db  8Dh
.eh_frame:00000000000063E7                 db    4
.eh_frame:00000000000063E8                 db  42h ; B
.eh_frame:00000000000063E9                 db  0Eh
.eh_frame:00000000000063EA                 db  28h ; (
.eh_frame:00000000000063EB                 db  8Ch
.eh_frame:00000000000063EC                 db    5
.eh_frame:00000000000063ED                 db  44h ; D
.eh_frame:00000000000063EE                 db  0Eh
.eh_frame:00000000000063EF                 db  30h ; 0
.eh_frame:00000000000063F0                 db  86h
.eh_frame:00000000000063F1                 db    6
.eh_frame:00000000000063F2                 db  41h ; A
.eh_frame:00000000000063F3                 db  0Eh
.eh_frame:00000000000063F4                 db  38h ; 8
.eh_frame:00000000000063F5                 db  83h
.eh_frame:00000000000063F6                 db    7
.eh_frame:00000000000063F7                 db  4Dh ; M
.eh_frame:00000000000063F8                 db  0Eh
.eh_frame:00000000000063F9                 db  50h ; P
.eh_frame:00000000000063FA                 db  5Fh ; _
.eh_frame:00000000000063FB                 db  0Eh
.eh_frame:00000000000063FC                 db  58h ; X
.eh_frame:00000000000063FD                 db  47h ; G
.eh_frame:00000000000063FE                 db  0Eh
.eh_frame:00000000000063FF                 db  60h ; `
.eh_frame:0000000000006400                 db  46h ; F
.eh_frame:0000000000006401                 db  0Eh
.eh_frame:0000000000006402                 db  68h ; h
.eh_frame:0000000000006403                 db  44h ; D
.eh_frame:0000000000006404                 db  0Eh
.eh_frame:0000000000006405                 db  70h ; p
.eh_frame:0000000000006406                 db  58h ; X
.eh_frame:0000000000006407                 db  0Eh
.eh_frame:0000000000006408                 db  38h ; 8
.eh_frame:0000000000006409                 db  41h ; A
.eh_frame:000000000000640A                 db  0Eh
.eh_frame:000000000000640B                 db  30h ; 0
.eh_frame:000000000000640C                 db  41h ; A
.eh_frame:000000000000640D                 db  0Eh
.eh_frame:000000000000640E                 db  28h ; (
.eh_frame:000000000000640F                 db  42h ; B
.eh_frame:0000000000006410                 db  0Eh
.eh_frame:0000000000006411                 db  20h
.eh_frame:0000000000006412                 db  42h ; B
.eh_frame:0000000000006413                 db  0Eh
.eh_frame:0000000000006414                 db  18h
.eh_frame:0000000000006415                 db  42h ; B
.eh_frame:0000000000006416                 db  0Eh
.eh_frame:0000000000006417                 db  10h
.eh_frame:0000000000006418                 db  42h ; B
.eh_frame:0000000000006419                 db  0Eh
.eh_frame:000000000000641A                 db    8
.eh_frame:000000000000641B                 db    0
.eh_frame:000000000000641C                 db  68h ; h
.eh_frame:000000000000641D                 db    0
.eh_frame:000000000000641E                 db    0
.eh_frame:000000000000641F                 db    0
.eh_frame:0000000000006420                 db  50h ; P
.eh_frame:0000000000006421                 db    3
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db  5Ch ; \
.eh_frame:0000000000006425                 db 0D2h
.eh_frame:0000000000006426                 db 0FFh
.eh_frame:0000000000006427                 db 0FFh
.eh_frame:0000000000006428                 db 0E3h
.eh_frame:0000000000006429                 db    0
.eh_frame:000000000000642A                 db    0
.eh_frame:000000000000642B                 db    0
.eh_frame:000000000000642C                 db    0
.eh_frame:000000000000642D                 db  42h ; B
.eh_frame:000000000000642E                 db  0Eh
.eh_frame:000000000000642F                 db  10h
.eh_frame:0000000000006430                 db  8Fh
.eh_frame:0000000000006431                 db    2
.eh_frame:0000000000006432                 db  42h ; B
.eh_frame:0000000000006433                 db  0Eh
.eh_frame:0000000000006434                 db  18h
.eh_frame:0000000000006435                 db  8Eh
.eh_frame:0000000000006436                 db    3
.eh_frame:0000000000006437                 db  49h ; I
.eh_frame:0000000000006438                 db  0Eh
.eh_frame:0000000000006439                 db  20h
.eh_frame:000000000000643A                 db  8Dh
.eh_frame:000000000000643B                 db    4
.eh_frame:000000000000643C                 db  42h ; B
.eh_frame:000000000000643D                 db  0Eh
.eh_frame:000000000000643E                 db  28h ; (
.eh_frame:000000000000643F                 db  8Ch
.eh_frame:0000000000006440                 db    5
.eh_frame:0000000000006441                 db  44h ; D
.eh_frame:0000000000006442                 db  0Eh
.eh_frame:0000000000006443                 db  30h ; 0
.eh_frame:0000000000006444                 db  86h
.eh_frame:0000000000006445                 db    6
.eh_frame:0000000000006446                 db  41h ; A
.eh_frame:0000000000006447                 db  0Eh
.eh_frame:0000000000006448                 db  38h ; 8
.eh_frame:0000000000006449                 db  83h
.eh_frame:000000000000644A                 db    7
.eh_frame:000000000000644B                 db  4Dh ; M
.eh_frame:000000000000644C                 db  0Eh
.eh_frame:000000000000644D                 db  70h ; p
.eh_frame:000000000000644E                 db  65h ; e
.eh_frame:000000000000644F                 db  0Eh
.eh_frame:0000000000006450                 db  78h ; x
.eh_frame:0000000000006451                 db  4Dh ; M
.eh_frame:0000000000006452                 db  0Eh
.eh_frame:0000000000006453                 db  80h
.eh_frame:0000000000006454                 db    1
.eh_frame:0000000000006455                 db  46h ; F
.eh_frame:0000000000006456                 db  0Eh
.eh_frame:0000000000006457                 db  88h
.eh_frame:0000000000006458                 db    1
.eh_frame:0000000000006459                 db  42h ; B
.eh_frame:000000000000645A                 db  0Eh
.eh_frame:000000000000645B                 db  90h
.eh_frame:000000000000645C                 db    1
.eh_frame:000000000000645D                 db  5Eh ; ^
.eh_frame:000000000000645E                 db  0Eh
.eh_frame:000000000000645F                 db  70h ; p
.eh_frame:0000000000006460                 db  56h ; V
.eh_frame:0000000000006461                 db  0Eh
.eh_frame:0000000000006462                 db  78h ; x
.eh_frame:0000000000006463                 db  43h ; C
.eh_frame:0000000000006464                 db  0Eh
.eh_frame:0000000000006465                 db  80h
.eh_frame:0000000000006466                 db    1
.eh_frame:0000000000006467                 db  43h ; C
.eh_frame:0000000000006468                 db  0Eh
.eh_frame:0000000000006469                 db  88h
.eh_frame:000000000000646A                 db    1
.eh_frame:000000000000646B                 db  56h ; V
.eh_frame:000000000000646C                 db  0Eh
.eh_frame:000000000000646D                 db  90h
.eh_frame:000000000000646E                 db    1
.eh_frame:000000000000646F                 db  52h ; R
.eh_frame:0000000000006470                 db  0Eh
.eh_frame:0000000000006471                 db  70h ; p
.eh_frame:0000000000006472                 db  5Bh ; [
.eh_frame:0000000000006473                 db  0Eh
.eh_frame:0000000000006474                 db  38h ; 8
.eh_frame:0000000000006475                 db  41h ; A
.eh_frame:0000000000006476                 db  0Eh
.eh_frame:0000000000006477                 db  30h ; 0
.eh_frame:0000000000006478                 db  41h ; A
.eh_frame:0000000000006479                 db  0Eh
.eh_frame:000000000000647A                 db  28h ; (
.eh_frame:000000000000647B                 db  42h ; B
.eh_frame:000000000000647C                 db  0Eh
.eh_frame:000000000000647D                 db  20h
.eh_frame:000000000000647E                 db  42h ; B
.eh_frame:000000000000647F                 db  0Eh
.eh_frame:0000000000006480                 db  18h
.eh_frame:0000000000006481                 db  42h ; B
.eh_frame:0000000000006482                 db  0Eh
.eh_frame:0000000000006483                 db  10h
.eh_frame:0000000000006484                 db  42h ; B
.eh_frame:0000000000006485                 db  0Eh
.eh_frame:0000000000006486                 db    8
.eh_frame:0000000000006487                 db    0
.eh_frame:0000000000006488                 db  10h
.eh_frame:0000000000006489                 db    0
.eh_frame:000000000000648A                 db    0
.eh_frame:000000000000648B                 db    0
.eh_frame:000000000000648C                 db 0BCh
.eh_frame:000000000000648D                 db    3
.eh_frame:000000000000648E                 db    0
.eh_frame:000000000000648F                 db    0
.eh_frame:0000000000006490                 db 0E0h
.eh_frame:0000000000006491                 db 0D2h
.eh_frame:0000000000006492                 db 0FFh
.eh_frame:0000000000006493                 db 0FFh
.eh_frame:0000000000006494                 db  0Ah
.eh_frame:0000000000006495                 db    0
.eh_frame:0000000000006496                 db    0
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006498                 db    0
.eh_frame:0000000000006499                 db    0
.eh_frame:000000000000649A                 db    0
.eh_frame:000000000000649B                 db    0
.eh_frame:000000000000649C                 db  28h ; (
.eh_frame:000000000000649D                 db    0
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db 0D0h
.eh_frame:00000000000064A1                 db    3
.eh_frame:00000000000064A2                 db    0
.eh_frame:00000000000064A3                 db    0
.eh_frame:00000000000064A4                 db 0DCh
.eh_frame:00000000000064A5                 db 0D2h
.eh_frame:00000000000064A6                 db 0FFh
.eh_frame:00000000000064A7                 db 0FFh
.eh_frame:00000000000064A8                 db  93h
.eh_frame:00000000000064A9                 db    0
.eh_frame:00000000000064AA                 db    0
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db    0
.eh_frame:00000000000064AD                 db  48h ; H
.eh_frame:00000000000064AE                 db  0Eh
.eh_frame:00000000000064AF                 db  10h
.eh_frame:00000000000064B0                 db  8Ch
.eh_frame:00000000000064B1                 db    2
.eh_frame:00000000000064B2                 db  48h ; H
.eh_frame:00000000000064B3                 db  0Eh
.eh_frame:00000000000064B4                 db  18h
.eh_frame:00000000000064B5                 db  86h
.eh_frame:00000000000064B6                 db    3
.eh_frame:00000000000064B7                 db  41h ; A
.eh_frame:00000000000064B8                 db  0Eh
.eh_frame:00000000000064B9                 db  20h
.eh_frame:00000000000064BA                 db  83h
.eh_frame:00000000000064BB                 db    4
.eh_frame:00000000000064BC                 db    2
.eh_frame:00000000000064BD                 db  74h ; t
.eh_frame:00000000000064BE                 db  0Eh
.eh_frame:00000000000064BF                 db  18h
.eh_frame:00000000000064C0                 db  4Bh ; K
.eh_frame:00000000000064C1                 db  0Eh
.eh_frame:00000000000064C2                 db  10h
.eh_frame:00000000000064C3                 db  42h ; B
.eh_frame:00000000000064C4                 db  0Eh
.eh_frame:00000000000064C5                 db    8
.eh_frame:00000000000064C6                 db    0
.eh_frame:00000000000064C7                 db    0
.eh_frame:00000000000064C8                 db  10h
.eh_frame:00000000000064C9                 db    0
.eh_frame:00000000000064CA                 db    0
.eh_frame:00000000000064CB                 db    0
.eh_frame:00000000000064CC                 db 0FCh
.eh_frame:00000000000064CD                 db    3
.eh_frame:00000000000064CE                 db    0
.eh_frame:00000000000064CF                 db    0
.eh_frame:00000000000064D0                 db  50h ; P
.eh_frame:00000000000064D1                 db 0D3h
.eh_frame:00000000000064D2                 db 0FFh
.eh_frame:00000000000064D3                 db 0FFh
.eh_frame:00000000000064D4                 db  13h
.eh_frame:00000000000064D5                 db    0
.eh_frame:00000000000064D6                 db    0
.eh_frame:00000000000064D7                 db    0
.eh_frame:00000000000064D8                 db    0
.eh_frame:00000000000064D9                 db    0
.eh_frame:00000000000064DA                 db    0
.eh_frame:00000000000064DB                 db    0
.eh_frame:00000000000064DC                 db  10h
.eh_frame:00000000000064DD                 db    0
.eh_frame:00000000000064DE                 db    0
.eh_frame:00000000000064DF                 db    0
.eh_frame:00000000000064E0                 db  10h
.eh_frame:00000000000064E1                 db    4
.eh_frame:00000000000064E2                 db    0
.eh_frame:00000000000064E3                 db    0
.eh_frame:00000000000064E4                 db  5Ch ; \
.eh_frame:00000000000064E5                 db 0D3h
.eh_frame:00000000000064E6                 db 0FFh
.eh_frame:00000000000064E7                 db 0FFh
.eh_frame:00000000000064E8                 db  0Ch
.eh_frame:00000000000064E9                 db    0
.eh_frame:00000000000064EA                 db    0
.eh_frame:00000000000064EB                 db    0
.eh_frame:00000000000064EC                 db    0
.eh_frame:00000000000064ED                 db    0
.eh_frame:00000000000064EE                 db    0
.eh_frame:00000000000064EF                 db    0
.eh_frame:00000000000064F0                 db  10h
.eh_frame:00000000000064F1                 db    0
.eh_frame:00000000000064F2                 db    0
.eh_frame:00000000000064F3                 db    0
.eh_frame:00000000000064F4                 db  24h ; $
.eh_frame:00000000000064F5                 db    4
.eh_frame:00000000000064F6                 db    0
.eh_frame:00000000000064F7                 db    0
.eh_frame:00000000000064F8                 db  58h ; X
.eh_frame:00000000000064F9                 db 0D3h
.eh_frame:00000000000064FA                 db 0FFh
.eh_frame:00000000000064FB                 db 0FFh
.eh_frame:00000000000064FC                 db  18h
.eh_frame:00000000000064FD                 db    0
.eh_frame:00000000000064FE                 db    0
.eh_frame:00000000000064FF                 db    0
.eh_frame:0000000000006500                 db    0
.eh_frame:0000000000006501                 db    0
.eh_frame:0000000000006502                 db    0
.eh_frame:0000000000006503                 db    0
.eh_frame:0000000000006504                 db  10h
.eh_frame:0000000000006505                 db    0
.eh_frame:0000000000006506                 db    0
.eh_frame:0000000000006507                 db    0
.eh_frame:0000000000006508                 db  38h ; 8
.eh_frame:0000000000006509                 db    4
.eh_frame:000000000000650A                 db    0
.eh_frame:000000000000650B                 db    0
.eh_frame:000000000000650C                 db  64h ; d
.eh_frame:000000000000650D                 db 0D3h
.eh_frame:000000000000650E                 db 0FFh
.eh_frame:000000000000650F                 db 0FFh
.eh_frame:0000000000006510                 db  14h
.eh_frame:0000000000006511                 db    0
.eh_frame:0000000000006512                 db    0
.eh_frame:0000000000006513                 db    0
.eh_frame:0000000000006514                 db    0
.eh_frame:0000000000006515                 db    0
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db  18h
.eh_frame:0000000000006519                 db    0
.eh_frame:000000000000651A                 db    0
.eh_frame:000000000000651B                 db    0
.eh_frame:000000000000651C                 db  4Ch ; L
.eh_frame:000000000000651D                 db    4
.eh_frame:000000000000651E                 db    0
.eh_frame:000000000000651F                 db    0
.eh_frame:0000000000006520                 db  70h ; p
.eh_frame:0000000000006521                 db 0D3h
.eh_frame:0000000000006522                 db 0FFh
.eh_frame:0000000000006523                 db 0FFh
.eh_frame:0000000000006524                 db  8Eh
.eh_frame:0000000000006525                 db    0
.eh_frame:0000000000006526                 db    0
.eh_frame:0000000000006527                 db    0
.eh_frame:0000000000006528                 db    0
.eh_frame:0000000000006529                 db  44h ; D
.eh_frame:000000000000652A                 db  0Eh
.eh_frame:000000000000652B                 db  50h ; P
.eh_frame:000000000000652C                 db    2
.eh_frame:000000000000652D                 db  7Fh ; 
.eh_frame:000000000000652E                 db  0Ah
.eh_frame:000000000000652F                 db  0Eh
.eh_frame:0000000000006530                 db    8
.eh_frame:0000000000006531                 db  41h ; A
.eh_frame:0000000000006532                 db  0Bh
.eh_frame:0000000000006533                 db    0
.eh_frame:0000000000006534                 db  18h
.eh_frame:0000000000006535                 db    0
.eh_frame:0000000000006536                 db    0
.eh_frame:0000000000006537                 db    0
.eh_frame:0000000000006538                 db  68h ; h
.eh_frame:0000000000006539                 db    4
.eh_frame:000000000000653A                 db    0
.eh_frame:000000000000653B                 db    0
.eh_frame:000000000000653C                 db 0E4h
.eh_frame:000000000000653D                 db 0D3h
.eh_frame:000000000000653E                 db 0FFh
.eh_frame:000000000000653F                 db 0FFh
.eh_frame:0000000000006540                 db  8Ah
.eh_frame:0000000000006541                 db    0
.eh_frame:0000000000006542                 db    0
.eh_frame:0000000000006543                 db    0
.eh_frame:0000000000006544                 db    0
.eh_frame:0000000000006545                 db  44h ; D
.eh_frame:0000000000006546                 db  0Eh
.eh_frame:0000000000006547                 db  50h ; P
.eh_frame:0000000000006548                 db    2
.eh_frame:0000000000006549                 db  7Bh ; {
.eh_frame:000000000000654A                 db  0Ah
.eh_frame:000000000000654B                 db  0Eh
.eh_frame:000000000000654C                 db    8
.eh_frame:000000000000654D                 db  41h ; A
.eh_frame:000000000000654E                 db  0Bh
.eh_frame:000000000000654F                 db    0
.eh_frame:0000000000006550                 db  10h
.eh_frame:0000000000006551                 db    0
.eh_frame:0000000000006552                 db    0
.eh_frame:0000000000006553                 db    0
.eh_frame:0000000000006554                 db  84h
.eh_frame:0000000000006555                 db    4
.eh_frame:0000000000006556                 db    0
.eh_frame:0000000000006557                 db    0
.eh_frame:0000000000006558                 db  58h ; X
.eh_frame:0000000000006559                 db 0D4h
.eh_frame:000000000000655A                 db 0FFh
.eh_frame:000000000000655B                 db 0FFh
.eh_frame:000000000000655C                 db  0Ch
.eh_frame:000000000000655D                 db    0
.eh_frame:000000000000655E                 db    0
.eh_frame:000000000000655F                 db    0
.eh_frame:0000000000006560                 db    0
.eh_frame:0000000000006561                 db    0
.eh_frame:0000000000006562                 db    0
.eh_frame:0000000000006563                 db    0
.eh_frame:0000000000006564                 db  10h
.eh_frame:0000000000006565                 db    0
.eh_frame:0000000000006566                 db    0
.eh_frame:0000000000006567                 db    0
.eh_frame:0000000000006568                 db  98h
.eh_frame:0000000000006569                 db    4
.eh_frame:000000000000656A                 db    0
.eh_frame:000000000000656B                 db    0
.eh_frame:000000000000656C                 db  54h ; T
.eh_frame:000000000000656D                 db 0D4h
.eh_frame:000000000000656E                 db 0FFh
.eh_frame:000000000000656F                 db 0FFh
.eh_frame:0000000000006570                 db  0Fh
.eh_frame:0000000000006571                 db    0
.eh_frame:0000000000006572                 db    0
.eh_frame:0000000000006573                 db    0
.eh_frame:0000000000006574                 db    0
.eh_frame:0000000000006575                 db    0
.eh_frame:0000000000006576                 db    0
.eh_frame:0000000000006577                 db    0
.eh_frame:0000000000006578                 db  18h
.eh_frame:0000000000006579                 db    0
.eh_frame:000000000000657A                 db    0
.eh_frame:000000000000657B                 db    0
.eh_frame:000000000000657C                 db 0ACh
.eh_frame:000000000000657D                 db    4
.eh_frame:000000000000657E                 db    0
.eh_frame:000000000000657F                 db    0
.eh_frame:0000000000006580                 db  50h ; P
.eh_frame:0000000000006581                 db 0D4h
.eh_frame:0000000000006582                 db 0FFh
.eh_frame:0000000000006583                 db 0FFh
.eh_frame:0000000000006584                 db  98h
.eh_frame:0000000000006585                 db    0
.eh_frame:0000000000006586                 db    0
.eh_frame:0000000000006587                 db    0
.eh_frame:0000000000006588                 db    0
.eh_frame:0000000000006589                 db  44h ; D
.eh_frame:000000000000658A                 db  0Eh
.eh_frame:000000000000658B                 db  50h ; P
.eh_frame:000000000000658C                 db    2
.eh_frame:000000000000658D                 db  8Eh
.eh_frame:000000000000658E                 db  0Ah
.eh_frame:000000000000658F                 db  0Eh
.eh_frame:0000000000006590                 db    8
.eh_frame:0000000000006591                 db  41h ; A
.eh_frame:0000000000006592                 db  0Bh
.eh_frame:0000000000006593                 db    0
.eh_frame:0000000000006594                 db  10h
.eh_frame:0000000000006595                 db    0
.eh_frame:0000000000006596                 db    0
.eh_frame:0000000000006597                 db    0
.eh_frame:0000000000006598                 db 0C8h
.eh_frame:0000000000006599                 db    4
.eh_frame:000000000000659A                 db    0
.eh_frame:000000000000659B                 db    0
.eh_frame:000000000000659C                 db 0D4h
.eh_frame:000000000000659D                 db 0D4h
.eh_frame:000000000000659E                 db 0FFh
.eh_frame:000000000000659F                 db 0FFh
.eh_frame:00000000000065A0                 db  10h
.eh_frame:00000000000065A1                 db    0
.eh_frame:00000000000065A2                 db    0
.eh_frame:00000000000065A3                 db    0
.eh_frame:00000000000065A4                 db    0
.eh_frame:00000000000065A5                 db    0
.eh_frame:00000000000065A6                 db    0
.eh_frame:00000000000065A7                 db    0
.eh_frame:00000000000065A8                 db  10h
.eh_frame:00000000000065A9                 db    0
.eh_frame:00000000000065AA                 db    0
.eh_frame:00000000000065AB                 db    0
.eh_frame:00000000000065AC                 db 0DCh
.eh_frame:00000000000065AD                 db    4
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db 0D0h
.eh_frame:00000000000065B1                 db 0D4h
.eh_frame:00000000000065B2                 db 0FFh
.eh_frame:00000000000065B3                 db 0FFh
.eh_frame:00000000000065B4                 db  11h
.eh_frame:00000000000065B5                 db    0
.eh_frame:00000000000065B6                 db    0
.eh_frame:00000000000065B7                 db    0
.eh_frame:00000000000065B8                 db    0
.eh_frame:00000000000065B9                 db    0
.eh_frame:00000000000065BA                 db    0
.eh_frame:00000000000065BB                 db    0
.eh_frame:00000000000065BC                 db  10h
.eh_frame:00000000000065BD                 db    0
.eh_frame:00000000000065BE                 db    0
.eh_frame:00000000000065BF                 db    0
.eh_frame:00000000000065C0                 db 0F0h
.eh_frame:00000000000065C1                 db    4
.eh_frame:00000000000065C2                 db    0
.eh_frame:00000000000065C3                 db    0
.eh_frame:00000000000065C4                 db 0DCh
.eh_frame:00000000000065C5                 db 0D4h
.eh_frame:00000000000065C6                 db 0FFh
.eh_frame:00000000000065C7                 db 0FFh
.eh_frame:00000000000065C8                 db  0Ah
.eh_frame:00000000000065C9                 db    0
.eh_frame:00000000000065CA                 db    0
.eh_frame:00000000000065CB                 db    0
.eh_frame:00000000000065CC                 db    0
.eh_frame:00000000000065CD                 db    0
.eh_frame:00000000000065CE                 db    0
.eh_frame:00000000000065CF                 db    0
.eh_frame:00000000000065D0                 db  18h
.eh_frame:00000000000065D1                 db    0
.eh_frame:00000000000065D2                 db    0
.eh_frame:00000000000065D3                 db    0
.eh_frame:00000000000065D4                 db    4
.eh_frame:00000000000065D5                 db    5
.eh_frame:00000000000065D6                 db    0
.eh_frame:00000000000065D7                 db    0
.eh_frame:00000000000065D8                 db 0D8h
.eh_frame:00000000000065D9                 db 0D4h
.eh_frame:00000000000065DA                 db 0FFh
.eh_frame:00000000000065DB                 db 0FFh
.eh_frame:00000000000065DC                 db  8Eh
.eh_frame:00000000000065DD                 db    0
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db    0
.eh_frame:00000000000065E1                 db  44h ; D
.eh_frame:00000000000065E2                 db  0Eh
.eh_frame:00000000000065E3                 db  50h ; P
.eh_frame:00000000000065E4                 db    2
.eh_frame:00000000000065E5                 db  7Fh ; 
.eh_frame:00000000000065E6                 db  0Ah
.eh_frame:00000000000065E7                 db  0Eh
.eh_frame:00000000000065E8                 db    8
.eh_frame:00000000000065E9                 db  41h ; A
.eh_frame:00000000000065EA                 db  0Bh
.eh_frame:00000000000065EB                 db    0
.eh_frame:00000000000065EC                 db  18h
.eh_frame:00000000000065ED                 db    0
.eh_frame:00000000000065EE                 db    0
.eh_frame:00000000000065EF                 db    0
.eh_frame:00000000000065F0                 db  20h
.eh_frame:00000000000065F1                 db    5
.eh_frame:00000000000065F2                 db    0
.eh_frame:00000000000065F3                 db    0
.eh_frame:00000000000065F4                 db  4Ch ; L
.eh_frame:00000000000065F5                 db 0D5h
.eh_frame:00000000000065F6                 db 0FFh
.eh_frame:00000000000065F7                 db 0FFh
.eh_frame:00000000000065F8                 db  91h
.eh_frame:00000000000065F9                 db    0
.eh_frame:00000000000065FA                 db    0
.eh_frame:00000000000065FB                 db    0
.eh_frame:00000000000065FC                 db    0
.eh_frame:00000000000065FD                 db  44h ; D
.eh_frame:00000000000065FE                 db  0Eh
.eh_frame:00000000000065FF                 db  50h ; P
.eh_frame:0000000000006600                 db    2
.eh_frame:0000000000006601                 db  82h
.eh_frame:0000000000006602                 db  0Ah
.eh_frame:0000000000006603                 db  0Eh
.eh_frame:0000000000006604                 db    8
.eh_frame:0000000000006605                 db  41h ; A
.eh_frame:0000000000006606                 db  0Bh
.eh_frame:0000000000006607                 db    0
.eh_frame:0000000000006608                 db  10h
.eh_frame:0000000000006609                 db    0
.eh_frame:000000000000660A                 db    0
.eh_frame:000000000000660B                 db    0
.eh_frame:000000000000660C                 db  3Ch ; <
.eh_frame:000000000000660D                 db    5
.eh_frame:000000000000660E                 db    0
.eh_frame:000000000000660F                 db    0
.eh_frame:0000000000006610                 db 0D0h
.eh_frame:0000000000006611                 db 0D5h
.eh_frame:0000000000006612                 db 0FFh
.eh_frame:0000000000006613                 db 0FFh
.eh_frame:0000000000006614                 db  0Ch
.eh_frame:0000000000006615                 db    0
.eh_frame:0000000000006616                 db    0
.eh_frame:0000000000006617                 db    0
.eh_frame:0000000000006618                 db    0
.eh_frame:0000000000006619                 db    0
.eh_frame:000000000000661A                 db    0
.eh_frame:000000000000661B                 db    0
.eh_frame:000000000000661C                 db  10h
.eh_frame:000000000000661D                 db    0
.eh_frame:000000000000661E                 db    0
.eh_frame:000000000000661F                 db    0
.eh_frame:0000000000006620                 db  50h ; P
.eh_frame:0000000000006621                 db    5
.eh_frame:0000000000006622                 db    0
.eh_frame:0000000000006623                 db    0
.eh_frame:0000000000006624                 db 0CCh
.eh_frame:0000000000006625                 db 0D5h
.eh_frame:0000000000006626                 db 0FFh
.eh_frame:0000000000006627                 db 0FFh
.eh_frame:0000000000006628                 db  17h
.eh_frame:0000000000006629                 db    0
.eh_frame:000000000000662A                 db    0
.eh_frame:000000000000662B                 db    0
.eh_frame:000000000000662C                 db    0
.eh_frame:000000000000662D                 db    0
.eh_frame:000000000000662E                 db    0
.eh_frame:000000000000662F                 db    0
.eh_frame:0000000000006630                 db  10h
.eh_frame:0000000000006631                 db    0
.eh_frame:0000000000006632                 db    0
.eh_frame:0000000000006633                 db    0
.eh_frame:0000000000006634                 db  64h ; d
.eh_frame:0000000000006635                 db    5
.eh_frame:0000000000006636                 db    0
.eh_frame:0000000000006637                 db    0
.eh_frame:0000000000006638                 db 0D8h
.eh_frame:0000000000006639                 db 0D5h
.eh_frame:000000000000663A                 db 0FFh
.eh_frame:000000000000663B                 db 0FFh
.eh_frame:000000000000663C                 db  13h
.eh_frame:000000000000663D                 db    0
.eh_frame:000000000000663E                 db    0
.eh_frame:000000000000663F                 db    0
.eh_frame:0000000000006640                 db    0
.eh_frame:0000000000006641                 db    0
.eh_frame:0000000000006642                 db    0
.eh_frame:0000000000006643                 db    0
.eh_frame:0000000000006644                 db  10h
.eh_frame:0000000000006645                 db    0
.eh_frame:0000000000006646                 db    0
.eh_frame:0000000000006647                 db    0
.eh_frame:0000000000006648                 db  78h ; x
.eh_frame:0000000000006649                 db    5
.eh_frame:000000000000664A                 db    0
.eh_frame:000000000000664B                 db    0
.eh_frame:000000000000664C                 db 0E4h
.eh_frame:000000000000664D                 db 0D5h
.eh_frame:000000000000664E                 db 0FFh
.eh_frame:000000000000664F                 db 0FFh
.eh_frame:0000000000006650                 db  0Ch
.eh_frame:0000000000006651                 db    0
.eh_frame:0000000000006652                 db    0
.eh_frame:0000000000006653                 db    0
.eh_frame:0000000000006654                 db    0
.eh_frame:0000000000006655                 db    0
.eh_frame:0000000000006656                 db    0
.eh_frame:0000000000006657                 db    0
.eh_frame:0000000000006658                 db  10h
.eh_frame:0000000000006659                 db    0
.eh_frame:000000000000665A                 db    0
.eh_frame:000000000000665B                 db    0
.eh_frame:000000000000665C                 db  8Ch
.eh_frame:000000000000665D                 db    5
.eh_frame:000000000000665E                 db    0
.eh_frame:000000000000665F                 db    0
.eh_frame:0000000000006660                 db 0E0h
.eh_frame:0000000000006661                 db 0D5h
.eh_frame:0000000000006662                 db 0FFh
.eh_frame:0000000000006663                 db 0FFh
.eh_frame:0000000000006664                 db  14h
.eh_frame:0000000000006665                 db    0
.eh_frame:0000000000006666                 db    0
.eh_frame:0000000000006667                 db    0
.eh_frame:0000000000006668                 db    0
.eh_frame:0000000000006669                 db    0
.eh_frame:000000000000666A                 db    0
.eh_frame:000000000000666B                 db    0
.eh_frame:000000000000666C                 db  10h
.eh_frame:000000000000666D                 db    0
.eh_frame:000000000000666E                 db    0
.eh_frame:000000000000666F                 db    0
.eh_frame:0000000000006670                 db 0A0h
.eh_frame:0000000000006671                 db    5
.eh_frame:0000000000006672                 db    0
.eh_frame:0000000000006673                 db    0
.eh_frame:0000000000006674                 db 0ECh
.eh_frame:0000000000006675                 db 0D5h
.eh_frame:0000000000006676                 db 0FFh
.eh_frame:0000000000006677                 db 0FFh
.eh_frame:0000000000006678                 db  13h
.eh_frame:0000000000006679                 db    0
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db    0
.eh_frame:000000000000667D                 db    0
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db  14h
.eh_frame:0000000000006681                 db    0
.eh_frame:0000000000006682                 db    0
.eh_frame:0000000000006683                 db    0
.eh_frame:0000000000006684                 db 0B4h
.eh_frame:0000000000006685                 db    5
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db 0F8h
.eh_frame:0000000000006689                 db 0D5h
.eh_frame:000000000000668A                 db 0FFh
.eh_frame:000000000000668B                 db 0FFh
.eh_frame:000000000000668C                 db  18h
.eh_frame:000000000000668D                 db    0
.eh_frame:000000000000668E                 db    0
.eh_frame:000000000000668F                 db    0
.eh_frame:0000000000006690                 db    0
.eh_frame:0000000000006691                 db    0
.eh_frame:0000000000006692                 db    0
.eh_frame:0000000000006693                 db    0
.eh_frame:0000000000006694                 db    0
.eh_frame:0000000000006695                 db    0
.eh_frame:0000000000006696                 db    0
.eh_frame:0000000000006697                 db    0
.eh_frame:0000000000006698                 db  10h
.eh_frame:0000000000006699                 db    1
.eh_frame:000000000000669A                 db    0
.eh_frame:000000000000669B                 db    0
.eh_frame:000000000000669C                 db 0CCh
.eh_frame:000000000000669D                 db    5
.eh_frame:000000000000669E                 db    0
.eh_frame:000000000000669F                 db    0
.eh_frame:00000000000066A0                 db    0
.eh_frame:00000000000066A1                 db 0D6h
.eh_frame:00000000000066A2                 db 0FFh
.eh_frame:00000000000066A3                 db 0FFh
.eh_frame:00000000000066A4                 db  17h
.eh_frame:00000000000066A5                 db    4
.eh_frame:00000000000066A6                 db    0
.eh_frame:00000000000066A7                 db    0
.eh_frame:00000000000066A8                 db    0
.eh_frame:00000000000066A9                 db  42h ; B
.eh_frame:00000000000066AA                 db  0Eh
.eh_frame:00000000000066AB                 db  10h
.eh_frame:00000000000066AC                 db  8Fh
.eh_frame:00000000000066AD                 db    2
.eh_frame:00000000000066AE                 db  42h ; B
.eh_frame:00000000000066AF                 db  0Eh
.eh_frame:00000000000066B0                 db  18h
.eh_frame:00000000000066B1                 db  8Eh
.eh_frame:00000000000066B2                 db    3
.eh_frame:00000000000066B3                 db  42h ; B
.eh_frame:00000000000066B4                 db  0Eh
.eh_frame:00000000000066B5                 db  20h
.eh_frame:00000000000066B6                 db  8Dh
.eh_frame:00000000000066B7                 db    4
.eh_frame:00000000000066B8                 db  42h ; B
.eh_frame:00000000000066B9                 db  0Eh
.eh_frame:00000000000066BA                 db  28h ; (
.eh_frame:00000000000066BB                 db  8Ch
.eh_frame:00000000000066BC                 db    5
.eh_frame:00000000000066BD                 db  44h ; D
.eh_frame:00000000000066BE                 db  0Eh
.eh_frame:00000000000066BF                 db  30h ; 0
.eh_frame:00000000000066C0                 db  86h
.eh_frame:00000000000066C1                 db    6
.eh_frame:00000000000066C2                 db  41h ; A
.eh_frame:00000000000066C3                 db  0Eh
.eh_frame:00000000000066C4                 db  38h ; 8
.eh_frame:00000000000066C5                 db  83h
.eh_frame:00000000000066C6                 db    7
.eh_frame:00000000000066C7                 db  4Ah ; J
.eh_frame:00000000000066C8                 db  0Eh
.eh_frame:00000000000066C9                 db  60h ; `
.eh_frame:00000000000066CA                 db    2
.eh_frame:00000000000066CB                 db 0DDh
.eh_frame:00000000000066CC                 db  0Eh
.eh_frame:00000000000066CD                 db  68h ; h
.eh_frame:00000000000066CE                 db  57h ; W
.eh_frame:00000000000066CF                 db  0Eh
.eh_frame:00000000000066D0                 db  70h ; p
.eh_frame:00000000000066D1                 db  42h ; B
.eh_frame:00000000000066D2                 db  0Eh
.eh_frame:00000000000066D3                 db  78h ; x
.eh_frame:00000000000066D4                 db  42h ; B
.eh_frame:00000000000066D5                 db  0Eh
.eh_frame:00000000000066D6                 db  80h
.eh_frame:00000000000066D7                 db    1
.eh_frame:00000000000066D8                 db  42h ; B
.eh_frame:00000000000066D9                 db  0Eh
.eh_frame:00000000000066DA                 db  88h
.eh_frame:00000000000066DB                 db    1
.eh_frame:00000000000066DC                 db  42h ; B
.eh_frame:00000000000066DD                 db  0Eh
.eh_frame:00000000000066DE                 db  90h
.eh_frame:00000000000066DF                 db    1
.eh_frame:00000000000066E0                 db  53h ; S
.eh_frame:00000000000066E1                 db  0Eh
.eh_frame:00000000000066E2                 db  60h ; `
.eh_frame:00000000000066E3                 db  44h ; D
.eh_frame:00000000000066E4                 db  0Ah
.eh_frame:00000000000066E5                 db  0Eh
.eh_frame:00000000000066E6                 db  38h ; 8
.eh_frame:00000000000066E7                 db  41h ; A
.eh_frame:00000000000066E8                 db  0Eh
.eh_frame:00000000000066E9                 db  30h ; 0
.eh_frame:00000000000066EA                 db  41h ; A
.eh_frame:00000000000066EB                 db  0Eh
.eh_frame:00000000000066EC                 db  28h ; (
.eh_frame:00000000000066ED                 db  42h ; B
.eh_frame:00000000000066EE                 db  0Eh
.eh_frame:00000000000066EF                 db  20h
.eh_frame:00000000000066F0                 db  42h ; B
.eh_frame:00000000000066F1                 db  0Eh
.eh_frame:00000000000066F2                 db  18h
.eh_frame:00000000000066F3                 db  42h ; B
.eh_frame:00000000000066F4                 db  0Eh
.eh_frame:00000000000066F5                 db  10h
.eh_frame:00000000000066F6                 db  42h ; B
.eh_frame:00000000000066F7                 db  0Eh
.eh_frame:00000000000066F8                 db    8
.eh_frame:00000000000066F9                 db  44h ; D
.eh_frame:00000000000066FA                 db  0Bh
.eh_frame:00000000000066FB                 db    2
.eh_frame:00000000000066FC                 db  78h ; x
.eh_frame:00000000000066FD                 db  0Ah
.eh_frame:00000000000066FE                 db  0Eh
.eh_frame:00000000000066FF                 db  68h ; h
.eh_frame:0000000000006700                 db  48h ; H
.eh_frame:0000000000006701                 db  0Bh
.eh_frame:0000000000006702                 db  5Ah ; Z
.eh_frame:0000000000006703                 db  0Ah
.eh_frame:0000000000006704                 db  0Eh
.eh_frame:0000000000006705                 db  38h ; 8
.eh_frame:0000000000006706                 db  47h ; G
.eh_frame:0000000000006707                 db  0Eh
.eh_frame:0000000000006708                 db  30h ; 0
.eh_frame:0000000000006709                 db  41h ; A
.eh_frame:000000000000670A                 db  0Eh
.eh_frame:000000000000670B                 db  28h ; (
.eh_frame:000000000000670C                 db  42h ; B
.eh_frame:000000000000670D                 db  0Eh
.eh_frame:000000000000670E                 db  20h
.eh_frame:000000000000670F                 db  42h ; B
.eh_frame:0000000000006710                 db  0Eh
.eh_frame:0000000000006711                 db  18h
.eh_frame:0000000000006712                 db  42h ; B
.eh_frame:0000000000006713                 db  0Eh
.eh_frame:0000000000006714                 db  10h
.eh_frame:0000000000006715                 db  42h ; B
.eh_frame:0000000000006716                 db  0Eh
.eh_frame:0000000000006717                 db    8
.eh_frame:0000000000006718                 db  56h ; V
.eh_frame:0000000000006719                 db  0Bh
.eh_frame:000000000000671A                 db  5Eh ; ^
.eh_frame:000000000000671B                 db  0Ah
.eh_frame:000000000000671C                 db  0Eh
.eh_frame:000000000000671D                 db  38h ; 8
.eh_frame:000000000000671E                 db  52h ; R
.eh_frame:000000000000671F                 db  0Eh
.eh_frame:0000000000006720                 db  30h ; 0
.eh_frame:0000000000006721                 db  41h ; A
.eh_frame:0000000000006722                 db  0Eh
.eh_frame:0000000000006723                 db  28h ; (
.eh_frame:0000000000006724                 db  42h ; B
.eh_frame:0000000000006725                 db  0Eh
.eh_frame:0000000000006726                 db  20h
.eh_frame:0000000000006727                 db  42h ; B
.eh_frame:0000000000006728                 db  0Eh
.eh_frame:0000000000006729                 db  18h
.eh_frame:000000000000672A                 db  42h ; B
.eh_frame:000000000000672B                 db  0Eh
.eh_frame:000000000000672C                 db  10h
.eh_frame:000000000000672D                 db  42h ; B
.eh_frame:000000000000672E                 db  0Eh
.eh_frame:000000000000672F                 db    8
.eh_frame:0000000000006730                 db  4Fh ; O
.eh_frame:0000000000006731                 db  0Bh
.eh_frame:0000000000006732                 db  62h ; b
.eh_frame:0000000000006733                 db  0Ah
.eh_frame:0000000000006734                 db  0Eh
.eh_frame:0000000000006735                 db  38h ; 8
.eh_frame:0000000000006736                 db  50h ; P
.eh_frame:0000000000006737                 db  0Eh
.eh_frame:0000000000006738                 db  30h ; 0
.eh_frame:0000000000006739                 db  41h ; A
.eh_frame:000000000000673A                 db  0Eh
.eh_frame:000000000000673B                 db  28h ; (
.eh_frame:000000000000673C                 db  42h ; B
.eh_frame:000000000000673D                 db  0Eh
.eh_frame:000000000000673E                 db  20h
.eh_frame:000000000000673F                 db  42h ; B
.eh_frame:0000000000006740                 db  0Eh
.eh_frame:0000000000006741                 db  18h
.eh_frame:0000000000006742                 db  42h ; B
.eh_frame:0000000000006743                 db  0Eh
.eh_frame:0000000000006744                 db  10h
.eh_frame:0000000000006745                 db  42h ; B
.eh_frame:0000000000006746                 db  0Eh
.eh_frame:0000000000006747                 db    8
.eh_frame:0000000000006748                 db  55h ; U
.eh_frame:0000000000006749                 db  0Bh
.eh_frame:000000000000674A                 db  66h ; f
.eh_frame:000000000000674B                 db  0Eh
.eh_frame:000000000000674C                 db  68h ; h
.eh_frame:000000000000674D                 db  42h ; B
.eh_frame:000000000000674E                 db  0Eh
.eh_frame:000000000000674F                 db  70h ; p
.eh_frame:0000000000006750                 db  5Ch ; \
.eh_frame:0000000000006751                 db  0Eh
.eh_frame:0000000000006752                 db  68h ; h
.eh_frame:0000000000006753                 db  41h ; A
.eh_frame:0000000000006754                 db  0Eh
.eh_frame:0000000000006755                 db  60h ; `
.eh_frame:0000000000006756                 db  44h ; D
.eh_frame:0000000000006757                 db  0Ah
.eh_frame:0000000000006758                 db  0Eh
.eh_frame:0000000000006759                 db  38h ; 8
.eh_frame:000000000000675A                 db  41h ; A
.eh_frame:000000000000675B                 db  0Eh
.eh_frame:000000000000675C                 db  30h ; 0
.eh_frame:000000000000675D                 db  41h ; A
.eh_frame:000000000000675E                 db  0Eh
.eh_frame:000000000000675F                 db  28h ; (
.eh_frame:0000000000006760                 db  42h ; B
.eh_frame:0000000000006761                 db  0Eh
.eh_frame:0000000000006762                 db  20h
.eh_frame:0000000000006763                 db  42h ; B
.eh_frame:0000000000006764                 db  0Eh
.eh_frame:0000000000006765                 db  18h
.eh_frame:0000000000006766                 db  42h ; B
.eh_frame:0000000000006767                 db  0Eh
.eh_frame:0000000000006768                 db  10h
.eh_frame:0000000000006769                 db  42h ; B
.eh_frame:000000000000676A                 db  0Eh
.eh_frame:000000000000676B                 db    8
.eh_frame:000000000000676C                 db  45h ; E
.eh_frame:000000000000676D                 db  0Bh
.eh_frame:000000000000676E                 db  68h ; h
.eh_frame:000000000000676F                 db  0Ah
.eh_frame:0000000000006770                 db  0Eh
.eh_frame:0000000000006771                 db  68h ; h
.eh_frame:0000000000006772                 db  48h ; H
.eh_frame:0000000000006773                 db  0Bh
.eh_frame:0000000000006774                 db  72h ; r
.eh_frame:0000000000006775                 db  0Eh
.eh_frame:0000000000006776                 db  68h ; h
.eh_frame:0000000000006777                 db  45h ; E
.eh_frame:0000000000006778                 db  0Eh
.eh_frame:0000000000006779                 db  70h ; p
.eh_frame:000000000000677A                 db  42h ; B
.eh_frame:000000000000677B                 db  0Eh
.eh_frame:000000000000677C                 db  78h ; x
.eh_frame:000000000000677D                 db  42h ; B
.eh_frame:000000000000677E                 db  0Eh
.eh_frame:000000000000677F                 db  80h
.eh_frame:0000000000006780                 db    1
.eh_frame:0000000000006781                 db  5Eh ; ^
.eh_frame:0000000000006782                 db  0Eh
.eh_frame:0000000000006783                 db  60h ; `
.eh_frame:0000000000006784                 db  44h ; D
.eh_frame:0000000000006785                 db  0Ah
.eh_frame:0000000000006786                 db  0Eh
.eh_frame:0000000000006787                 db  38h ; 8
.eh_frame:0000000000006788                 db  41h ; A
.eh_frame:0000000000006789                 db  0Eh
.eh_frame:000000000000678A                 db  30h ; 0
.eh_frame:000000000000678B                 db  41h ; A
.eh_frame:000000000000678C                 db  0Eh
.eh_frame:000000000000678D                 db  28h ; (
.eh_frame:000000000000678E                 db  42h ; B
.eh_frame:000000000000678F                 db  0Eh
.eh_frame:0000000000006790                 db  20h
.eh_frame:0000000000006791                 db  42h ; B
.eh_frame:0000000000006792                 db  0Eh
.eh_frame:0000000000006793                 db  18h
.eh_frame:0000000000006794                 db  42h ; B
.eh_frame:0000000000006795                 db  0Eh
.eh_frame:0000000000006796                 db  10h
.eh_frame:0000000000006797                 db  42h ; B
.eh_frame:0000000000006798                 db  0Eh
.eh_frame:0000000000006799                 db    8
.eh_frame:000000000000679A                 db  41h ; A
.eh_frame:000000000000679B                 db  0Bh
.eh_frame:000000000000679C                 db  79h ; y
.eh_frame:000000000000679D                 db  0Ah
.eh_frame:000000000000679E                 db  0Eh
.eh_frame:000000000000679F                 db  68h ; h
.eh_frame:00000000000067A0                 db  42h ; B
.eh_frame:00000000000067A1                 db  0Eh
.eh_frame:00000000000067A2                 db  70h ; p
.eh_frame:00000000000067A3                 db  42h ; B
.eh_frame:00000000000067A4                 db  0Eh
.eh_frame:00000000000067A5                 db  78h ; x
.eh_frame:00000000000067A6                 db  42h ; B
.eh_frame:00000000000067A7                 db  0Eh
.eh_frame:00000000000067A8                 db  80h
.eh_frame:00000000000067A9                 db    1
.eh_frame:00000000000067AA                 db  51h ; Q
.eh_frame:00000000000067AB                 db  0Bh
.eh_frame:00000000000067AC                 db  10h
.eh_frame:00000000000067AD                 db    0
.eh_frame:00000000000067AE                 db    0
.eh_frame:00000000000067AF                 db    0
.eh_frame:00000000000067B0                 db 0E0h
.eh_frame:00000000000067B1                 db    6
.eh_frame:00000000000067B2                 db    0
.eh_frame:00000000000067B3                 db    0
.eh_frame:00000000000067B4                 db  0Ch
.eh_frame:00000000000067B5                 db 0D9h
.eh_frame:00000000000067B6                 db 0FFh
.eh_frame:00000000000067B7                 db 0FFh
.eh_frame:00000000000067B8                 db  20h
.eh_frame:00000000000067B9                 db    0
.eh_frame:00000000000067BA                 db    0
.eh_frame:00000000000067BB                 db    0
.eh_frame:00000000000067BC                 db    0
.eh_frame:00000000000067BD                 db    0
.eh_frame:00000000000067BE                 db    0
.eh_frame:00000000000067BF                 db    0
.eh_frame:00000000000067C0                 db  18h
.eh_frame:00000000000067C1                 db    0
.eh_frame:00000000000067C2                 db    0
.eh_frame:00000000000067C3                 db    0
.eh_frame:00000000000067C4                 db 0F4h
.eh_frame:00000000000067C5                 db    6
.eh_frame:00000000000067C6                 db    0
.eh_frame:00000000000067C7                 db    0
.eh_frame:00000000000067C8                 db  18h
.eh_frame:00000000000067C9                 db 0D9h
.eh_frame:00000000000067CA                 db 0FFh
.eh_frame:00000000000067CB                 db 0FFh
.eh_frame:00000000000067CC                 db  78h ; x
.eh_frame:00000000000067CD                 db    0
.eh_frame:00000000000067CE                 db    0
.eh_frame:00000000000067CF                 db    0
.eh_frame:00000000000067D0                 db    0
.eh_frame:00000000000067D1                 db  44h ; D
.eh_frame:00000000000067D2                 db  0Eh
.eh_frame:00000000000067D3                 db  70h ; p
.eh_frame:00000000000067D4                 db    2
.eh_frame:00000000000067D5                 db  60h ; `
.eh_frame:00000000000067D6                 db  0Ah
.eh_frame:00000000000067D7                 db  0Eh
.eh_frame:00000000000067D8                 db    8
.eh_frame:00000000000067D9                 db  41h ; A
.eh_frame:00000000000067DA                 db  0Bh
.eh_frame:00000000000067DB                 db    0
.eh_frame:00000000000067DC                 db  28h ; (
.eh_frame:00000000000067DD                 db    0
.eh_frame:00000000000067DE                 db    0
.eh_frame:00000000000067DF                 db    0
.eh_frame:00000000000067E0                 db  10h
.eh_frame:00000000000067E1                 db    7
.eh_frame:00000000000067E2                 db    0
.eh_frame:00000000000067E3                 db    0
.eh_frame:00000000000067E4                 db  7Ch ; |
.eh_frame:00000000000067E5                 db 0D9h
.eh_frame:00000000000067E6                 db 0FFh
.eh_frame:00000000000067E7                 db 0FFh
.eh_frame:00000000000067E8                 db 0D5h
.eh_frame:00000000000067E9                 db    0
.eh_frame:00000000000067EA                 db    0
.eh_frame:00000000000067EB                 db    0
.eh_frame:00000000000067EC                 db    0
.eh_frame:00000000000067ED                 db  41h ; A
.eh_frame:00000000000067EE                 db  0Eh
.eh_frame:00000000000067EF                 db  10h
.eh_frame:00000000000067F0                 db  86h
.eh_frame:00000000000067F1                 db    2
.eh_frame:00000000000067F2                 db  41h ; A
.eh_frame:00000000000067F3                 db  0Eh
.eh_frame:00000000000067F4                 db  18h
.eh_frame:00000000000067F5                 db  83h
.eh_frame:00000000000067F6                 db    3
.eh_frame:00000000000067F7                 db  50h ; P
.eh_frame:00000000000067F8                 db  0Eh
.eh_frame:00000000000067F9                 db 0D0h
.eh_frame:00000000000067FA                 db    1
.eh_frame:00000000000067FB                 db    2
.eh_frame:00000000000067FC                 db 0ABh
.eh_frame:00000000000067FD                 db  0Ah
.eh_frame:00000000000067FE                 db  0Eh
.eh_frame:00000000000067FF                 db  18h
.eh_frame:0000000000006800                 db  41h ; A
.eh_frame:0000000000006801                 db  0Eh
.eh_frame:0000000000006802                 db  10h
.eh_frame:0000000000006803                 db  41h ; A
.eh_frame:0000000000006804                 db  0Eh
.eh_frame:0000000000006805                 db    8
.eh_frame:0000000000006806                 db  41h ; A
.eh_frame:0000000000006807                 db  0Bh
.eh_frame:0000000000006808                 db  1Ch
.eh_frame:0000000000006809                 db    0
.eh_frame:000000000000680A                 db    0
.eh_frame:000000000000680B                 db    0
.eh_frame:000000000000680C                 db  3Ch ; <
.eh_frame:000000000000680D                 db    7
.eh_frame:000000000000680E                 db    0
.eh_frame:000000000000680F                 db    0
.eh_frame:0000000000006810                 db  30h ; 0
.eh_frame:0000000000006811                 db 0DAh
.eh_frame:0000000000006812                 db 0FFh
.eh_frame:0000000000006813                 db 0FFh
.eh_frame:0000000000006814                 db  80h
.eh_frame:0000000000006815                 db    0
.eh_frame:0000000000006816                 db    0
.eh_frame:0000000000006817                 db    0
.eh_frame:0000000000006818                 db    0
.eh_frame:0000000000006819                 db  41h ; A
.eh_frame:000000000000681A                 db  0Eh
.eh_frame:000000000000681B                 db  10h
.eh_frame:000000000000681C                 db  83h
.eh_frame:000000000000681D                 db    2
.eh_frame:000000000000681E                 db    2
.eh_frame:000000000000681F                 db  7Ah ; z
.eh_frame:0000000000006820                 db  0Eh
.eh_frame:0000000000006821                 db    8
.eh_frame:0000000000006822                 db    0
.eh_frame:0000000000006823                 db    0
.eh_frame:0000000000006824                 db    0
.eh_frame:0000000000006825                 db    0
.eh_frame:0000000000006826                 db    0
.eh_frame:0000000000006827                 db    0
.eh_frame:0000000000006828                 db  18h
.eh_frame:0000000000006829                 db    0
.eh_frame:000000000000682A                 db    0
.eh_frame:000000000000682B                 db    0
.eh_frame:000000000000682C                 db  5Ch ; \
.eh_frame:000000000000682D                 db    7
.eh_frame:000000000000682E                 db    0
.eh_frame:000000000000682F                 db    0
.eh_frame:0000000000006830                 db  90h
.eh_frame:0000000000006831                 db 0DAh
.eh_frame:0000000000006832                 db 0FFh
.eh_frame:0000000000006833                 db 0FFh
.eh_frame:0000000000006834                 db  1Ah
.eh_frame:0000000000006835                 db    0
.eh_frame:0000000000006836                 db    0
.eh_frame:0000000000006837                 db    0
.eh_frame:0000000000006838                 db    0
.eh_frame:0000000000006839                 db  41h ; A
.eh_frame:000000000000683A                 db  0Eh
.eh_frame:000000000000683B                 db  10h
.eh_frame:000000000000683C                 db  83h
.eh_frame:000000000000683D                 db    2
.eh_frame:000000000000683E                 db  53h ; S
.eh_frame:000000000000683F                 db  0Ah
.eh_frame:0000000000006840                 db  0Eh
.eh_frame:0000000000006841                 db    8
.eh_frame:0000000000006842                 db  41h ; A
.eh_frame:0000000000006843                 db  0Bh
.eh_frame:0000000000006844                 db  10h
.eh_frame:0000000000006845                 db    0
.eh_frame:0000000000006846                 db    0
.eh_frame:0000000000006847                 db    0
.eh_frame:0000000000006848                 db  78h ; x
.eh_frame:0000000000006849                 db    7
.eh_frame:000000000000684A                 db    0
.eh_frame:000000000000684B                 db    0
.eh_frame:000000000000684C                 db  94h
.eh_frame:000000000000684D                 db 0DAh
.eh_frame:000000000000684E                 db 0FFh
.eh_frame:000000000000684F                 db 0FFh
.eh_frame:0000000000006850                 db  24h ; $
.eh_frame:0000000000006851                 db    0
.eh_frame:0000000000006852                 db    0
.eh_frame:0000000000006853                 db    0
.eh_frame:0000000000006854                 db    0
.eh_frame:0000000000006855                 db  5Fh ; _
.eh_frame:0000000000006856                 db  0Eh
.eh_frame:0000000000006857                 db  10h
.eh_frame:0000000000006858                 db  10h
.eh_frame:0000000000006859                 db    0
.eh_frame:000000000000685A                 db    0
.eh_frame:000000000000685B                 db    0
.eh_frame:000000000000685C                 db  8Ch
.eh_frame:000000000000685D                 db    7
.eh_frame:000000000000685E                 db    0
.eh_frame:000000000000685F                 db    0
.eh_frame:0000000000006860                 db 0B0h
.eh_frame:0000000000006861                 db 0DAh
.eh_frame:0000000000006862                 db 0FFh
.eh_frame:0000000000006863                 db 0FFh
.eh_frame:0000000000006864                 db    2
.eh_frame:0000000000006865                 db    0
.eh_frame:0000000000006866                 db    0
.eh_frame:0000000000006867                 db    0
.eh_frame:0000000000006868                 db    0
.eh_frame:0000000000006869                 db    0
.eh_frame:000000000000686A                 db    0
.eh_frame:000000000000686B                 db    0
.eh_frame:000000000000686C                 db  20h
.eh_frame:000000000000686D                 db    0
.eh_frame:000000000000686E                 db    0
.eh_frame:000000000000686F                 db    0
.eh_frame:0000000000006870                 db 0A0h
.eh_frame:0000000000006871                 db    7
.eh_frame:0000000000006872                 db    0
.eh_frame:0000000000006873                 db    0
.eh_frame:0000000000006874                 db 0ACh
.eh_frame:0000000000006875                 db 0DAh
.eh_frame:0000000000006876                 db 0FFh
.eh_frame:0000000000006877                 db 0FFh
.eh_frame:0000000000006878                 db  36h ; 6
.eh_frame:0000000000006879                 db    0
.eh_frame:000000000000687A                 db    0
.eh_frame:000000000000687B                 db    0
.eh_frame:000000000000687C                 db    0
.eh_frame:000000000000687D                 db  44h ; D
.eh_frame:000000000000687E                 db  0Eh
.eh_frame:000000000000687F                 db  10h
.eh_frame:0000000000006880                 db  83h
.eh_frame:0000000000006881                 db    2
.eh_frame:0000000000006882                 db  5Dh ; ]
.eh_frame:0000000000006883                 db  0Ah
.eh_frame:0000000000006884                 db  0Eh
.eh_frame:0000000000006885                 db    8
.eh_frame:0000000000006886                 db  47h ; G
.eh_frame:0000000000006887                 db  0Bh
.eh_frame:0000000000006888                 db  48h ; H
.eh_frame:0000000000006889                 db  0Ah
.eh_frame:000000000000688A                 db  0Eh
.eh_frame:000000000000688B                 db    8
.eh_frame:000000000000688C                 db  41h ; A
.eh_frame:000000000000688D                 db  0Bh
.eh_frame:000000000000688E                 db    0
.eh_frame:000000000000688F                 db    0
.eh_frame:0000000000006890                 db  10h
.eh_frame:0000000000006891                 db    0
.eh_frame:0000000000006892                 db    0
.eh_frame:0000000000006893                 db    0
.eh_frame:0000000000006894                 db 0C4h
.eh_frame:0000000000006895                 db    7
.eh_frame:0000000000006896                 db    0
.eh_frame:0000000000006897                 db    0
.eh_frame:0000000000006898                 db 0C8h
.eh_frame:0000000000006899                 db 0DAh
.eh_frame:000000000000689A                 db 0FFh
.eh_frame:000000000000689B                 db 0FFh
.eh_frame:000000000000689C                 db  24h ; $
.eh_frame:000000000000689D                 db    0
.eh_frame:000000000000689E                 db    0
.eh_frame:000000000000689F                 db    0
.eh_frame:00000000000068A0                 db    0
.eh_frame:00000000000068A1                 db  5Fh ; _
.eh_frame:00000000000068A2                 db  0Eh
.eh_frame:00000000000068A3                 db  10h
.eh_frame:00000000000068A4                 db  14h
.eh_frame:00000000000068A5                 db    0
.eh_frame:00000000000068A6                 db    0
.eh_frame:00000000000068A7                 db    0
.eh_frame:00000000000068A8                 db 0D8h
.eh_frame:00000000000068A9                 db    7
.eh_frame:00000000000068AA                 db    0
.eh_frame:00000000000068AB                 db    0
.eh_frame:00000000000068AC                 db 0E4h
.eh_frame:00000000000068AD                 db 0DAh
.eh_frame:00000000000068AE                 db 0FFh
.eh_frame:00000000000068AF                 db 0FFh
.eh_frame:00000000000068B0                 db  82h
.eh_frame:00000000000068B1                 db    0
.eh_frame:00000000000068B2                 db    0
.eh_frame:00000000000068B3                 db    0
.eh_frame:00000000000068B4                 db    0
.eh_frame:00000000000068B5                 db    2
.eh_frame:00000000000068B6                 db  5Fh ; _
.eh_frame:00000000000068B7                 db  0Eh
.eh_frame:00000000000068B8                 db  10h
.eh_frame:00000000000068B9                 db  49h ; I
.eh_frame:00000000000068BA                 db  0Eh
.eh_frame:00000000000068BB                 db    8
.eh_frame:00000000000068BC                 db  14h
.eh_frame:00000000000068BD                 db    0
.eh_frame:00000000000068BE                 db    0
.eh_frame:00000000000068BF                 db    0
.eh_frame:00000000000068C0                 db 0F0h
.eh_frame:00000000000068C1                 db    7
.eh_frame:00000000000068C2                 db    0
.eh_frame:00000000000068C3                 db    0
.eh_frame:00000000000068C4                 db  5Ch ; \
.eh_frame:00000000000068C5                 db 0DBh
.eh_frame:00000000000068C6                 db 0FFh
.eh_frame:00000000000068C7                 db 0FFh
.eh_frame:00000000000068C8                 db  4Ah ; J
.eh_frame:00000000000068C9                 db    0
.eh_frame:00000000000068CA                 db    0
.eh_frame:00000000000068CB                 db    0
.eh_frame:00000000000068CC                 db    0
.eh_frame:00000000000068CD                 db    2
.eh_frame:00000000000068CE                 db  45h ; E
.eh_frame:00000000000068CF                 db  0Eh
.eh_frame:00000000000068D0                 db  10h
.eh_frame:00000000000068D1                 db    0
.eh_frame:00000000000068D2                 db    0
.eh_frame:00000000000068D3                 db    0
.eh_frame:00000000000068D4                 db  18h
.eh_frame:00000000000068D5                 db    0
.eh_frame:00000000000068D6                 db    0
.eh_frame:00000000000068D7                 db    0
.eh_frame:00000000000068D8                 db    8
.eh_frame:00000000000068D9                 db    8
.eh_frame:00000000000068DA                 db    0
.eh_frame:00000000000068DB                 db    0
.eh_frame:00000000000068DC                 db  94h
.eh_frame:00000000000068DD                 db 0DBh
.eh_frame:00000000000068DE                 db 0FFh
.eh_frame:00000000000068DF                 db 0FFh
.eh_frame:00000000000068E0                 db  17h
.eh_frame:00000000000068E1                 db    0
.eh_frame:00000000000068E2                 db    0
.eh_frame:00000000000068E3                 db    0
.eh_frame:00000000000068E4                 db    0
.eh_frame:00000000000068E5                 db  41h ; A
.eh_frame:00000000000068E6                 db  0Eh
.eh_frame:00000000000068E7                 db  10h
.eh_frame:00000000000068E8                 db  83h
.eh_frame:00000000000068E9                 db    2
.eh_frame:00000000000068EA                 db  51h ; Q
.eh_frame:00000000000068EB                 db  0Eh
.eh_frame:00000000000068EC                 db    8
.eh_frame:00000000000068ED                 db    0
.eh_frame:00000000000068EE                 db    0
.eh_frame:00000000000068EF                 db    0
.eh_frame:00000000000068F0                 db  18h
.eh_frame:00000000000068F1                 db    0
.eh_frame:00000000000068F2                 db    0
.eh_frame:00000000000068F3                 db    0
.eh_frame:00000000000068F4                 db  24h ; $
.eh_frame:00000000000068F5                 db    8
.eh_frame:00000000000068F6                 db    0
.eh_frame:00000000000068F7                 db    0
.eh_frame:00000000000068F8                 db  98h
.eh_frame:00000000000068F9                 db 0DBh
.eh_frame:00000000000068FA                 db 0FFh
.eh_frame:00000000000068FB                 db 0FFh
.eh_frame:00000000000068FC                 db  2Eh ; .
.eh_frame:00000000000068FD                 db    0
.eh_frame:00000000000068FE                 db    0
.eh_frame:00000000000068FF                 db    0
.eh_frame:0000000000006900                 db    0
.eh_frame:0000000000006901                 db  47h ; G
.eh_frame:0000000000006902                 db  0Eh
.eh_frame:0000000000006903                 db  10h
.eh_frame:0000000000006904                 db  61h ; a
.eh_frame:0000000000006905                 db  0Ah
.eh_frame:0000000000006906                 db  0Eh
.eh_frame:0000000000006907                 db    8
.eh_frame:0000000000006908                 db  41h ; A
.eh_frame:0000000000006909                 db  0Bh
.eh_frame:000000000000690A                 db    0
.eh_frame:000000000000690B                 db    0
.eh_frame:000000000000690C                 db  24h ; $
.eh_frame:000000000000690D                 db    0
.eh_frame:000000000000690E                 db    0
.eh_frame:000000000000690F                 db    0
.eh_frame:0000000000006910                 db  40h ; @
.eh_frame:0000000000006911                 db    8
.eh_frame:0000000000006912                 db    0
.eh_frame:0000000000006913                 db    0
.eh_frame:0000000000006914                 db 0ACh
.eh_frame:0000000000006915                 db 0DBh
.eh_frame:0000000000006916                 db 0FFh
.eh_frame:0000000000006917                 db 0FFh
.eh_frame:0000000000006918                 db  28h ; (
.eh_frame:0000000000006919                 db    0
.eh_frame:000000000000691A                 db    0
.eh_frame:000000000000691B                 db    0
.eh_frame:000000000000691C                 db    0
.eh_frame:000000000000691D                 db  41h ; A
.eh_frame:000000000000691E                 db  0Eh
.eh_frame:000000000000691F                 db  10h
.eh_frame:0000000000006920                 db  86h
.eh_frame:0000000000006921                 db    2
.eh_frame:0000000000006922                 db  41h ; A
.eh_frame:0000000000006923                 db  0Eh
.eh_frame:0000000000006924                 db  18h
.eh_frame:0000000000006925                 db  83h
.eh_frame:0000000000006926                 db    3
.eh_frame:0000000000006927                 db  4Dh ; M
.eh_frame:0000000000006928                 db  0Eh
.eh_frame:0000000000006929                 db  20h
.eh_frame:000000000000692A                 db  49h ; I
.eh_frame:000000000000692B                 db  0Eh
.eh_frame:000000000000692C                 db  18h
.eh_frame:000000000000692D                 db  47h ; G
.eh_frame:000000000000692E                 db  0Eh
.eh_frame:000000000000692F                 db  10h
.eh_frame:0000000000006930                 db  41h ; A
.eh_frame:0000000000006931                 db  0Eh
.eh_frame:0000000000006932                 db    8
.eh_frame:0000000000006933                 db    0
.eh_frame:0000000000006934                 db  18h
.eh_frame:0000000000006935                 db    0
.eh_frame:0000000000006936                 db    0
.eh_frame:0000000000006937                 db    0
.eh_frame:0000000000006938                 db  68h ; h
.eh_frame:0000000000006939                 db    8
.eh_frame:000000000000693A                 db    0
.eh_frame:000000000000693B                 db    0
.eh_frame:000000000000693C                 db 0B4h
.eh_frame:000000000000693D                 db 0DBh
.eh_frame:000000000000693E                 db 0FFh
.eh_frame:000000000000693F                 db 0FFh
.eh_frame:0000000000006940                 db  13h
.eh_frame:0000000000006941                 db    0
.eh_frame:0000000000006942                 db    0
.eh_frame:0000000000006943                 db    0
.eh_frame:0000000000006944                 db    0
.eh_frame:0000000000006945                 db  41h ; A
.eh_frame:0000000000006946                 db  0Eh
.eh_frame:0000000000006947                 db  10h
.eh_frame:0000000000006948                 db  83h
.eh_frame:0000000000006949                 db    2
.eh_frame:000000000000694A                 db  50h ; P
.eh_frame:000000000000694B                 db  0Eh
.eh_frame:000000000000694C                 db    8
.eh_frame:000000000000694D                 db    0
.eh_frame:000000000000694E                 db    0
.eh_frame:000000000000694F                 db    0
.eh_frame:0000000000006950                 db  14h
.eh_frame:0000000000006951                 db    0
.eh_frame:0000000000006952                 db    0
.eh_frame:0000000000006953                 db    0
.eh_frame:0000000000006954                 db  84h
.eh_frame:0000000000006955                 db    8
.eh_frame:0000000000006956                 db    0
.eh_frame:0000000000006957                 db    0
.eh_frame:0000000000006958                 db 0B8h
.eh_frame:0000000000006959                 db 0DBh
.eh_frame:000000000000695A                 db 0FFh
.eh_frame:000000000000695B                 db 0FFh
.eh_frame:000000000000695C                 db  35h ; 5
.eh_frame:000000000000695D                 db    0
.eh_frame:000000000000695E                 db    0
.eh_frame:000000000000695F                 db    0
.eh_frame:0000000000006960                 db    0
.eh_frame:0000000000006961                 db  4Bh ; K
.eh_frame:0000000000006962                 db  0Eh
.eh_frame:0000000000006963                 db  10h
.eh_frame:0000000000006964                 db    0
.eh_frame:0000000000006965                 db    0
.eh_frame:0000000000006966                 db    0
.eh_frame:0000000000006967                 db    0
.eh_frame:0000000000006968                 db  4Ch ; L
.eh_frame:0000000000006969                 db    0
.eh_frame:000000000000696A                 db    0
.eh_frame:000000000000696B                 db    0
.eh_frame:000000000000696C                 db  9Ch
.eh_frame:000000000000696D                 db    8
.eh_frame:000000000000696E                 db    0
.eh_frame:000000000000696F                 db    0
.eh_frame:0000000000006970                 db 0E0h
.eh_frame:0000000000006971                 db 0DBh
.eh_frame:0000000000006972                 db 0FFh
.eh_frame:0000000000006973                 db 0FFh
.eh_frame:0000000000006974                 db 0B3h
.eh_frame:0000000000006975                 db    6
.eh_frame:0000000000006976                 db    0
.eh_frame:0000000000006977                 db    0
.eh_frame:0000000000006978                 db    0
.eh_frame:0000000000006979                 db  42h ; B
.eh_frame:000000000000697A                 db  0Eh
.eh_frame:000000000000697B                 db  10h
.eh_frame:000000000000697C                 db  8Fh
.eh_frame:000000000000697D                 db    2
.eh_frame:000000000000697E                 db  42h ; B
.eh_frame:000000000000697F                 db  0Eh
.eh_frame:0000000000006980                 db  18h
.eh_frame:0000000000006981                 db  8Eh
.eh_frame:0000000000006982                 db    3
.eh_frame:0000000000006983                 db  42h ; B
.eh_frame:0000000000006984                 db  0Eh
.eh_frame:0000000000006985                 db  20h
.eh_frame:0000000000006986                 db  8Dh
.eh_frame:0000000000006987                 db    4
.eh_frame:0000000000006988                 db  42h ; B
.eh_frame:0000000000006989                 db  0Eh
.eh_frame:000000000000698A                 db  28h ; (
.eh_frame:000000000000698B                 db  8Ch
.eh_frame:000000000000698C                 db    5
.eh_frame:000000000000698D                 db  41h ; A
.eh_frame:000000000000698E                 db  0Eh
.eh_frame:000000000000698F                 db  30h ; 0
.eh_frame:0000000000006990                 db  86h
.eh_frame:0000000000006991                 db    6
.eh_frame:0000000000006992                 db  41h ; A
.eh_frame:0000000000006993                 db  0Eh
.eh_frame:0000000000006994                 db  38h ; 8
.eh_frame:0000000000006995                 db  83h
.eh_frame:0000000000006996                 db    7
.eh_frame:0000000000006997                 db  44h ; D
.eh_frame:0000000000006998                 db  0Eh
.eh_frame:0000000000006999                 db  60h ; `
.eh_frame:000000000000699A                 db    2
.eh_frame:000000000000699B                 db  94h
.eh_frame:000000000000699C                 db  0Ah
.eh_frame:000000000000699D                 db  0Eh
.eh_frame:000000000000699E                 db  38h ; 8
.eh_frame:000000000000699F                 db  41h ; A
.eh_frame:00000000000069A0                 db  0Eh
.eh_frame:00000000000069A1                 db  30h ; 0
.eh_frame:00000000000069A2                 db  41h ; A
.eh_frame:00000000000069A3                 db  0Eh
.eh_frame:00000000000069A4                 db  28h ; (
.eh_frame:00000000000069A5                 db  42h ; B
.eh_frame:00000000000069A6                 db  0Eh
.eh_frame:00000000000069A7                 db  20h
.eh_frame:00000000000069A8                 db  42h ; B
.eh_frame:00000000000069A9                 db  0Eh
.eh_frame:00000000000069AA                 db  18h
.eh_frame:00000000000069AB                 db  42h ; B
.eh_frame:00000000000069AC                 db  0Eh
.eh_frame:00000000000069AD                 db  10h
.eh_frame:00000000000069AE                 db  42h ; B
.eh_frame:00000000000069AF                 db  0Eh
.eh_frame:00000000000069B0                 db    8
.eh_frame:00000000000069B1                 db  44h ; D
.eh_frame:00000000000069B2                 db  0Bh
.eh_frame:00000000000069B3                 db    0
.eh_frame:00000000000069B4                 db    0
.eh_frame:00000000000069B5                 db    0
.eh_frame:00000000000069B6                 db    0
.eh_frame:00000000000069B7                 db    0
.eh_frame:00000000000069B8                 db  3Ch ; <
.eh_frame:00000000000069B9                 db    0
.eh_frame:00000000000069BA                 db    0
.eh_frame:00000000000069BB                 db    0
.eh_frame:00000000000069BC                 db 0ECh
.eh_frame:00000000000069BD                 db    8
.eh_frame:00000000000069BE                 db    0
.eh_frame:00000000000069BF                 db    0
.eh_frame:00000000000069C0                 db  50h ; P
.eh_frame:00000000000069C1                 db 0E2h
.eh_frame:00000000000069C2                 db 0FFh
.eh_frame:00000000000069C3                 db 0FFh
.eh_frame:00000000000069C4                 db  83h
.eh_frame:00000000000069C5                 db    0
.eh_frame:00000000000069C6                 db    0
.eh_frame:00000000000069C7                 db    0
.eh_frame:00000000000069C8                 db    0
.eh_frame:00000000000069C9                 db  42h ; B
.eh_frame:00000000000069CA                 db  0Eh
.eh_frame:00000000000069CB                 db  10h
.eh_frame:00000000000069CC                 db  8Dh
.eh_frame:00000000000069CD                 db    2
.eh_frame:00000000000069CE                 db  42h ; B
.eh_frame:00000000000069CF                 db  0Eh
.eh_frame:00000000000069D0                 db  18h
.eh_frame:00000000000069D1                 db  8Ch
.eh_frame:00000000000069D2                 db    3
.eh_frame:00000000000069D3                 db  44h ; D
.eh_frame:00000000000069D4                 db  0Eh
.eh_frame:00000000000069D5                 db  20h
.eh_frame:00000000000069D6                 db  86h
.eh_frame:00000000000069D7                 db    4
.eh_frame:00000000000069D8                 db  41h ; A
.eh_frame:00000000000069D9                 db  0Eh
.eh_frame:00000000000069DA                 db  28h ; (
.eh_frame:00000000000069DB                 db  83h
.eh_frame:00000000000069DC                 db    5
.eh_frame:00000000000069DD                 db  4Ah ; J
.eh_frame:00000000000069DE                 db  0Eh
.eh_frame:00000000000069DF                 db  40h ; @
.eh_frame:00000000000069E0                 db    2
.eh_frame:00000000000069E1                 db  64h ; d
.eh_frame:00000000000069E2                 db  0Ah
.eh_frame:00000000000069E3                 db  0Eh
.eh_frame:00000000000069E4                 db  28h ; (
.eh_frame:00000000000069E5                 db  41h ; A
.eh_frame:00000000000069E6                 db  0Eh
.eh_frame:00000000000069E7                 db  20h
.eh_frame:00000000000069E8                 db  41h ; A
.eh_frame:00000000000069E9                 db  0Eh
.eh_frame:00000000000069EA                 db  18h
.eh_frame:00000000000069EB                 db  42h ; B
.eh_frame:00000000000069EC                 db  0Eh
.eh_frame:00000000000069ED                 db  10h
.eh_frame:00000000000069EE                 db  42h ; B
.eh_frame:00000000000069EF                 db  0Eh
.eh_frame:00000000000069F0                 db    8
.eh_frame:00000000000069F1                 db  41h ; A
.eh_frame:00000000000069F2                 db  0Bh
.eh_frame:00000000000069F3                 db    0
.eh_frame:00000000000069F4                 db    0
.eh_frame:00000000000069F5                 db    0
.eh_frame:00000000000069F6                 db    0
.eh_frame:00000000000069F7                 db    0
.eh_frame:00000000000069F8                 db  4Ch ; L
.eh_frame:00000000000069F9                 db    0
.eh_frame:00000000000069FA                 db    0
.eh_frame:00000000000069FB                 db    0
.eh_frame:00000000000069FC                 db  2Ch ; ,
.eh_frame:00000000000069FD                 db    9
.eh_frame:00000000000069FE                 db    0
.eh_frame:00000000000069FF                 db    0
.eh_frame:0000000000006A00                 db 0A0h
.eh_frame:0000000000006A01                 db 0E2h
.eh_frame:0000000000006A02                 db 0FFh
.eh_frame:0000000000006A03                 db 0FFh
.eh_frame:0000000000006A04                 db  7Dh ; }
.eh_frame:0000000000006A05                 db    0
.eh_frame:0000000000006A06                 db    0
.eh_frame:0000000000006A07                 db    0
.eh_frame:0000000000006A08                 db    0
.eh_frame:0000000000006A09                 db  42h ; B
.eh_frame:0000000000006A0A                 db  0Eh
.eh_frame:0000000000006A0B                 db  10h
.eh_frame:0000000000006A0C                 db  8Ch
.eh_frame:0000000000006A0D                 db    2
.eh_frame:0000000000006A0E                 db  41h ; A
.eh_frame:0000000000006A0F                 db  0Eh
.eh_frame:0000000000006A10                 db  18h
.eh_frame:0000000000006A11                 db  86h
.eh_frame:0000000000006A12                 db    3
.eh_frame:0000000000006A13                 db  44h ; D
.eh_frame:0000000000006A14                 db  0Eh
.eh_frame:0000000000006A15                 db  20h
.eh_frame:0000000000006A16                 db  83h
.eh_frame:0000000000006A17                 db    4
.eh_frame:0000000000006A18                 db  69h ; i
.eh_frame:0000000000006A19                 db  0Ah
.eh_frame:0000000000006A1A                 db  0Eh
.eh_frame:0000000000006A1B                 db  18h
.eh_frame:0000000000006A1C                 db  41h ; A
.eh_frame:0000000000006A1D                 db  0Eh
.eh_frame:0000000000006A1E                 db  10h
.eh_frame:0000000000006A1F                 db  42h ; B
.eh_frame:0000000000006A20                 db  0Eh
.eh_frame:0000000000006A21                 db    8
.eh_frame:0000000000006A22                 db  45h ; E
.eh_frame:0000000000006A23                 db  0Bh
.eh_frame:0000000000006A24                 db  55h ; U
.eh_frame:0000000000006A25                 db  0Ah
.eh_frame:0000000000006A26                 db  0Eh
.eh_frame:0000000000006A27                 db  18h
.eh_frame:0000000000006A28                 db  41h ; A
.eh_frame:0000000000006A29                 db  0Eh
.eh_frame:0000000000006A2A                 db  10h
.eh_frame:0000000000006A2B                 db  42h ; B
.eh_frame:0000000000006A2C                 db  0Eh
.eh_frame:0000000000006A2D                 db    8
.eh_frame:0000000000006A2E                 db  48h ; H
.eh_frame:0000000000006A2F                 db  0Bh
.eh_frame:0000000000006A30                 db  41h ; A
.eh_frame:0000000000006A31                 db  0Ah
.eh_frame:0000000000006A32                 db  0Eh
.eh_frame:0000000000006A33                 db  18h
.eh_frame:0000000000006A34                 db  46h ; F
.eh_frame:0000000000006A35                 db  0Eh
.eh_frame:0000000000006A36                 db  10h
.eh_frame:0000000000006A37                 db  42h ; B
.eh_frame:0000000000006A38                 db  0Eh
.eh_frame:0000000000006A39                 db    8
.eh_frame:0000000000006A3A                 db  47h ; G
.eh_frame:0000000000006A3B                 db  0Bh
.eh_frame:0000000000006A3C                 db  49h ; I
.eh_frame:0000000000006A3D                 db  0Eh
.eh_frame:0000000000006A3E                 db  18h
.eh_frame:0000000000006A3F                 db  41h ; A
.eh_frame:0000000000006A40                 db  0Eh
.eh_frame:0000000000006A41                 db  10h
.eh_frame:0000000000006A42                 db  42h ; B
.eh_frame:0000000000006A43                 db  0Eh
.eh_frame:0000000000006A44                 db    8
.eh_frame:0000000000006A45                 db    0
.eh_frame:0000000000006A46                 db    0
.eh_frame:0000000000006A47                 db    0
.eh_frame:0000000000006A48                 db  1Ch
.eh_frame:0000000000006A49                 db    0
.eh_frame:0000000000006A4A                 db    0
.eh_frame:0000000000006A4B                 db    0
.eh_frame:0000000000006A4C                 db  7Ch ; |
.eh_frame:0000000000006A4D                 db    9
.eh_frame:0000000000006A4E                 db    0
.eh_frame:0000000000006A4F                 db    0
.eh_frame:0000000000006A50                 db 0D0h
.eh_frame:0000000000006A51                 db 0E2h
.eh_frame:0000000000006A52                 db 0FFh
.eh_frame:0000000000006A53                 db 0FFh
.eh_frame:0000000000006A54                 db  60h ; `
.eh_frame:0000000000006A55                 db    0
.eh_frame:0000000000006A56                 db    0
.eh_frame:0000000000006A57                 db    0
.eh_frame:0000000000006A58                 db    0
.eh_frame:0000000000006A59                 db  44h ; D
.eh_frame:0000000000006A5A                 db  0Eh
.eh_frame:0000000000006A5B                 db  10h
.eh_frame:0000000000006A5C                 db  75h ; u
.eh_frame:0000000000006A5D                 db  0Ah
.eh_frame:0000000000006A5E                 db  0Eh
.eh_frame:0000000000006A5F                 db    8
.eh_frame:0000000000006A60                 db  47h ; G
.eh_frame:0000000000006A61                 db  0Bh
.eh_frame:0000000000006A62                 db  5Fh ; _
.eh_frame:0000000000006A63                 db  0Eh
.eh_frame:0000000000006A64                 db    8
.eh_frame:0000000000006A65                 db    0
.eh_frame:0000000000006A66                 db    0
.eh_frame:0000000000006A67                 db    0
.eh_frame:0000000000006A68                 db  1Ch
.eh_frame:0000000000006A69                 db    0
.eh_frame:0000000000006A6A                 db    0
.eh_frame:0000000000006A6B                 db    0
.eh_frame:0000000000006A6C                 db  9Ch
.eh_frame:0000000000006A6D                 db    9
.eh_frame:0000000000006A6E                 db    0
.eh_frame:0000000000006A6F                 db    0
.eh_frame:0000000000006A70                 db  10h
.eh_frame:0000000000006A71                 db 0E3h
.eh_frame:0000000000006A72                 db 0FFh
.eh_frame:0000000000006A73                 db 0FFh
.eh_frame:0000000000006A74                 db  3Ch ; <
.eh_frame:0000000000006A75                 db    0
.eh_frame:0000000000006A76                 db    0
.eh_frame:0000000000006A77                 db    0
.eh_frame:0000000000006A78                 db    0
.eh_frame:0000000000006A79                 db  44h ; D
.eh_frame:0000000000006A7A                 db  0Eh
.eh_frame:0000000000006A7B                 db  10h
.eh_frame:0000000000006A7C                 db  61h ; a
.eh_frame:0000000000006A7D                 db  0Ah
.eh_frame:0000000000006A7E                 db  0Eh
.eh_frame:0000000000006A7F                 db    8
.eh_frame:0000000000006A80                 db  4Bh ; K
.eh_frame:0000000000006A81                 db  0Bh
.eh_frame:0000000000006A82                 db  4Bh ; K
.eh_frame:0000000000006A83                 db  0Eh
.eh_frame:0000000000006A84                 db    8
.eh_frame:0000000000006A85                 db    0
.eh_frame:0000000000006A86                 db    0
.eh_frame:0000000000006A87                 db    0
.eh_frame:0000000000006A88                 db  34h ; 4
.eh_frame:0000000000006A89                 db    0
.eh_frame:0000000000006A8A                 db    0
.eh_frame:0000000000006A8B                 db    0
.eh_frame:0000000000006A8C                 db 0BCh
.eh_frame:0000000000006A8D                 db    9
.eh_frame:0000000000006A8E                 db    0
.eh_frame:0000000000006A8F                 db    0
.eh_frame:0000000000006A90                 db  30h ; 0
.eh_frame:0000000000006A91                 db 0E3h
.eh_frame:0000000000006A92                 db 0FFh
.eh_frame:0000000000006A93                 db 0FFh
.eh_frame:0000000000006A94                 db  7Bh ; {
.eh_frame:0000000000006A95                 db    0
.eh_frame:0000000000006A96                 db    0
.eh_frame:0000000000006A97                 db    0
.eh_frame:0000000000006A98                 db    0
.eh_frame:0000000000006A99                 db  42h ; B
.eh_frame:0000000000006A9A                 db  0Eh
.eh_frame:0000000000006A9B                 db  10h
.eh_frame:0000000000006A9C                 db  8Ch
.eh_frame:0000000000006A9D                 db    2
.eh_frame:0000000000006A9E                 db  41h ; A
.eh_frame:0000000000006A9F                 db  0Eh
.eh_frame:0000000000006AA0                 db  18h
.eh_frame:0000000000006AA1                 db  86h
.eh_frame:0000000000006AA2                 db    3
.eh_frame:0000000000006AA3                 db  41h ; A
.eh_frame:0000000000006AA4                 db  0Eh
.eh_frame:0000000000006AA5                 db  20h
.eh_frame:0000000000006AA6                 db  83h
.eh_frame:0000000000006AA7                 db    4
.eh_frame:0000000000006AA8                 db  7Dh ; }
.eh_frame:0000000000006AA9                 db  0Ah
.eh_frame:0000000000006AAA                 db  0Eh
.eh_frame:0000000000006AAB                 db  18h
.eh_frame:0000000000006AAC                 db  41h ; A
.eh_frame:0000000000006AAD                 db  0Eh
.eh_frame:0000000000006AAE                 db  10h
.eh_frame:0000000000006AAF                 db  42h ; B
.eh_frame:0000000000006AB0                 db  0Eh
.eh_frame:0000000000006AB1                 db    8
.eh_frame:0000000000006AB2                 db  44h ; D
.eh_frame:0000000000006AB3                 db  0Bh
.eh_frame:0000000000006AB4                 db  60h ; `
.eh_frame:0000000000006AB5                 db  0Ah
.eh_frame:0000000000006AB6                 db  0Eh
.eh_frame:0000000000006AB7                 db  18h
.eh_frame:0000000000006AB8                 db  41h ; A
.eh_frame:0000000000006AB9                 db  0Eh
.eh_frame:0000000000006ABA                 db  10h
.eh_frame:0000000000006ABB                 db  42h ; B
.eh_frame:0000000000006ABC                 db  0Eh
.eh_frame:0000000000006ABD                 db    8
.eh_frame:0000000000006ABE                 db  45h ; E
.eh_frame:0000000000006ABF                 db  0Bh
.eh_frame:0000000000006AC0                 db  1Ch
.eh_frame:0000000000006AC1                 db    0
.eh_frame:0000000000006AC2                 db    0
.eh_frame:0000000000006AC3                 db    0
.eh_frame:0000000000006AC4                 db 0F4h
.eh_frame:0000000000006AC5                 db    9
.eh_frame:0000000000006AC6                 db    0
.eh_frame:0000000000006AC7                 db    0
.eh_frame:0000000000006AC8                 db  78h ; x
.eh_frame:0000000000006AC9                 db 0E3h
.eh_frame:0000000000006ACA                 db 0FFh
.eh_frame:0000000000006ACB                 db 0FFh
.eh_frame:0000000000006ACC                 db  40h ; @
.eh_frame:0000000000006ACD                 db    0
.eh_frame:0000000000006ACE                 db    0
.eh_frame:0000000000006ACF                 db    0
.eh_frame:0000000000006AD0                 db    0
.eh_frame:0000000000006AD1                 db  44h ; D
.eh_frame:0000000000006AD2                 db  0Eh
.eh_frame:0000000000006AD3                 db  10h
.eh_frame:0000000000006AD4                 db  83h
.eh_frame:0000000000006AD5                 db    2
.eh_frame:0000000000006AD6                 db  5Ah ; Z
.eh_frame:0000000000006AD7                 db  0Ah
.eh_frame:0000000000006AD8                 db  0Eh
.eh_frame:0000000000006AD9                 db    8
.eh_frame:0000000000006ADA                 db  4Ah ; J
.eh_frame:0000000000006ADB                 db  0Bh
.eh_frame:0000000000006ADC                 db  53h ; S
.eh_frame:0000000000006ADD                 db  0Eh
.eh_frame:0000000000006ADE                 db    8
.eh_frame:0000000000006ADF                 db    0
.eh_frame:0000000000006AE0                 db  2Ch ; ,
.eh_frame:0000000000006AE1                 db    0
.eh_frame:0000000000006AE2                 db    0
.eh_frame:0000000000006AE3                 db    0
.eh_frame:0000000000006AE4                 db  14h
.eh_frame:0000000000006AE5                 db  0Ah
.eh_frame:0000000000006AE6                 db    0
.eh_frame:0000000000006AE7                 db    0
.eh_frame:0000000000006AE8                 db  98h
.eh_frame:0000000000006AE9                 db 0E3h
.eh_frame:0000000000006AEA                 db 0FFh
.eh_frame:0000000000006AEB                 db 0FFh
.eh_frame:0000000000006AEC                 db  57h ; W
.eh_frame:0000000000006AED                 db    0
.eh_frame:0000000000006AEE                 db    0
.eh_frame:0000000000006AEF                 db    0
.eh_frame:0000000000006AF0                 db    0
.eh_frame:0000000000006AF1                 db  63h ; c
.eh_frame:0000000000006AF2                 db  0Eh
.eh_frame:0000000000006AF3                 db  10h
.eh_frame:0000000000006AF4                 db  8Ch
.eh_frame:0000000000006AF5                 db    2
.eh_frame:0000000000006AF6                 db  41h ; A
.eh_frame:0000000000006AF7                 db  0Eh
.eh_frame:0000000000006AF8                 db  18h
.eh_frame:0000000000006AF9                 db  86h
.eh_frame:0000000000006AFA                 db    3
.eh_frame:0000000000006AFB                 db  44h ; D
.eh_frame:0000000000006AFC                 db  0Eh
.eh_frame:0000000000006AFD                 db  20h
.eh_frame:0000000000006AFE                 db  83h
.eh_frame:0000000000006AFF                 db    4
.eh_frame:0000000000006B00                 db  6Bh ; k
.eh_frame:0000000000006B01                 db  0Eh
.eh_frame:0000000000006B02                 db  18h
.eh_frame:0000000000006B03                 db  41h ; A
.eh_frame:0000000000006B04                 db  0Eh
.eh_frame:0000000000006B05                 db  10h
.eh_frame:0000000000006B06                 db  42h ; B
.eh_frame:0000000000006B07                 db  0Eh
.eh_frame:0000000000006B08                 db    8
.eh_frame:0000000000006B09                 db    0
.eh_frame:0000000000006B0A                 db    0
.eh_frame:0000000000006B0B                 db    0
.eh_frame:0000000000006B0C                 db    0
.eh_frame:0000000000006B0D                 db    0
.eh_frame:0000000000006B0E                 db    0
.eh_frame:0000000000006B0F                 db    0
.eh_frame:0000000000006B10                 db  44h ; D
.eh_frame:0000000000006B11                 db    0
.eh_frame:0000000000006B12                 db    0
.eh_frame:0000000000006B13                 db    0
.eh_frame:0000000000006B14                 db  44h ; D
.eh_frame:0000000000006B15                 db  0Ah
.eh_frame:0000000000006B16                 db    0
.eh_frame:0000000000006B17                 db    0
.eh_frame:0000000000006B18                 db 0C8h
.eh_frame:0000000000006B19                 db 0E3h
.eh_frame:0000000000006B1A                 db 0FFh
.eh_frame:0000000000006B1B                 db 0FFh
.eh_frame:0000000000006B1C                 db  65h ; e
.eh_frame:0000000000006B1D                 db    0
.eh_frame:0000000000006B1E                 db    0
.eh_frame:0000000000006B1F                 db    0
.eh_frame:0000000000006B20                 db    0
.eh_frame:0000000000006B21                 db  42h ; B
.eh_frame:0000000000006B22                 db  0Eh
.eh_frame:0000000000006B23                 db  10h
.eh_frame:0000000000006B24                 db  8Fh
.eh_frame:0000000000006B25                 db    2
.eh_frame:0000000000006B26                 db  42h ; B
.eh_frame:0000000000006B27                 db  0Eh
.eh_frame:0000000000006B28                 db  18h
.eh_frame:0000000000006B29                 db  8Eh
.eh_frame:0000000000006B2A                 db    3
.eh_frame:0000000000006B2B                 db  45h ; E
.eh_frame:0000000000006B2C                 db  0Eh
.eh_frame:0000000000006B2D                 db  20h
.eh_frame:0000000000006B2E                 db  8Dh
.eh_frame:0000000000006B2F                 db    4
.eh_frame:0000000000006B30                 db  42h ; B
.eh_frame:0000000000006B31                 db  0Eh
.eh_frame:0000000000006B32                 db  28h ; (
.eh_frame:0000000000006B33                 db  8Ch
.eh_frame:0000000000006B34                 db    5
.eh_frame:0000000000006B35                 db  48h ; H
.eh_frame:0000000000006B36                 db  0Eh
.eh_frame:0000000000006B37                 db  30h ; 0
.eh_frame:0000000000006B38                 db  86h
.eh_frame:0000000000006B39                 db    6
.eh_frame:0000000000006B3A                 db  48h ; H
.eh_frame:0000000000006B3B                 db  0Eh
.eh_frame:0000000000006B3C                 db  38h ; 8
.eh_frame:0000000000006B3D                 db  83h
.eh_frame:0000000000006B3E                 db    7
.eh_frame:0000000000006B3F                 db  4Dh ; M
.eh_frame:0000000000006B40                 db  0Eh
.eh_frame:0000000000006B41                 db  40h ; @
.eh_frame:0000000000006B42                 db  72h ; r
.eh_frame:0000000000006B43                 db  0Eh
.eh_frame:0000000000006B44                 db  38h ; 8
.eh_frame:0000000000006B45                 db  41h ; A
.eh_frame:0000000000006B46                 db  0Eh
.eh_frame:0000000000006B47                 db  30h ; 0
.eh_frame:0000000000006B48                 db  41h ; A
.eh_frame:0000000000006B49                 db  0Eh
.eh_frame:0000000000006B4A                 db  28h ; (
.eh_frame:0000000000006B4B                 db  42h ; B
.eh_frame:0000000000006B4C                 db  0Eh
.eh_frame:0000000000006B4D                 db  20h
.eh_frame:0000000000006B4E                 db  42h ; B
.eh_frame:0000000000006B4F                 db  0Eh
.eh_frame:0000000000006B50                 db  18h
.eh_frame:0000000000006B51                 db  42h ; B
.eh_frame:0000000000006B52                 db  0Eh
.eh_frame:0000000000006B53                 db  10h
.eh_frame:0000000000006B54                 db  42h ; B
.eh_frame:0000000000006B55                 db  0Eh
.eh_frame:0000000000006B56                 db    8
.eh_frame:0000000000006B57                 db    0
.eh_frame:0000000000006B58                 db  14h
.eh_frame:0000000000006B59                 db    0
.eh_frame:0000000000006B5A                 db    0
.eh_frame:0000000000006B5B                 db    0
.eh_frame:0000000000006B5C                 db  8Ch
.eh_frame:0000000000006B5D                 db  0Ah
.eh_frame:0000000000006B5E                 db    0
.eh_frame:0000000000006B5F                 db    0
.eh_frame:0000000000006B60                 db 0F0h
.eh_frame:0000000000006B61                 db 0E3h
.eh_frame:0000000000006B62                 db 0FFh
.eh_frame:0000000000006B63                 db 0FFh
.eh_frame:0000000000006B64                 db    2
.eh_frame:0000000000006B65                 db    0
.eh_frame:0000000000006B66                 db    0
.eh_frame:0000000000006B67                 db    0
.eh_frame:0000000000006B68                 db    0
.eh_frame:0000000000006B69                 db    0
.eh_frame:0000000000006B6A                 db    0
.eh_frame:0000000000006B6B                 db    0
.eh_frame:0000000000006B6C                 db    0
.eh_frame:0000000000006B6D                 db    0
.eh_frame:0000000000006B6E                 db    0
.eh_frame:0000000000006B6F                 db    0
.eh_frame:0000000000006B70                 db  10h
.eh_frame:0000000000006B71                 db    0
.eh_frame:0000000000006B72                 db    0
.eh_frame:0000000000006B73                 db    0
.eh_frame:0000000000006B74                 db 0A4h
.eh_frame:0000000000006B75                 db  0Ah
.eh_frame:0000000000006B76                 db    0
.eh_frame:0000000000006B77                 db    0
.eh_frame:0000000000006B78                 db 0E8h
.eh_frame:0000000000006B79                 db 0E3h
.eh_frame:0000000000006B7A                 db 0FFh
.eh_frame:0000000000006B7B                 db 0FFh
.eh_frame:0000000000006B7C                 db  0Eh
.eh_frame:0000000000006B7D                 db    0
.eh_frame:0000000000006B7E                 db    0
.eh_frame:0000000000006B7F                 db    0
.eh_frame:0000000000006B80                 db    0
.eh_frame:0000000000006B81                 db    0
.eh_frame:0000000000006B82                 db    0
.eh_frame:0000000000006B83                 db    0
.eh_frame:0000000000006B84 __FRAME_END__   db    0
.eh_frame:0000000000006B85                 db    0
.eh_frame:0000000000006B86                 db    0
.eh_frame:0000000000006B87                 db    0
.eh_frame:0000000000006B87 _eh_frame       ends
.eh_frame:0000000000006B87
.init_array:0000000000207B70 ; ELF Initialization Function Table
.init_array:0000000000207B70 ; ===========================================================================
.init_array:0000000000207B70
.init_array:0000000000207B70 ; Segment type: Pure data
.init_array:0000000000207B70 ; Segment permissions: Read/Write
.init_array:0000000000207B70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000207B70                 assume cs:_init_array
.init_array:0000000000207B70                 ;org 207B70h
.init_array:0000000000207B70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000207B70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000207B70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000207B70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000207B70
.fini_array:0000000000207B78 ; ELF Termination Function Table
.fini_array:0000000000207B78 ; ===========================================================================
.fini_array:0000000000207B78
.fini_array:0000000000207B78 ; Segment type: Pure data
.fini_array:0000000000207B78 ; Segment permissions: Read/Write
.fini_array:0000000000207B78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000207B78                 assume cs:_fini_array
.fini_array:0000000000207B78                 ;org 207B78h
.fini_array:0000000000207B78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000207B78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000207B78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000207B78
.data.rel.ro:0000000000207B80 ; ===========================================================================
.data.rel.ro:0000000000207B80
.data.rel.ro:0000000000207B80 ; Segment type: Pure data
.data.rel.ro:0000000000207B80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000207B80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000207B80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000207B80                 ;org 207B80h
.data.rel.ro:0000000000207B80 ; struct option longopts
.data.rel.ro:0000000000207B80 longopts        dq offset aAdjustment   ; name
.data.rel.ro:0000000000207B80                                         ; DATA XREF: main+7F↑o
.data.rel.ro:0000000000207B80                 dd 1                    ; has_arg ; "adjustment"
.data.rel.ro:0000000000207B80                 db 4 dup(0)
.data.rel.ro:0000000000207B80                 dq 0                    ; flag
.data.rel.ro:0000000000207B80                 dd 6Eh                  ; val
.data.rel.ro:0000000000207B80                 db 4 dup(0)
.data.rel.ro:0000000000207BA0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000207BA8                 db    0
.data.rel.ro:0000000000207BA9                 db    0
.data.rel.ro:0000000000207BAA                 db    0
.data.rel.ro:0000000000207BAB                 db    0
.data.rel.ro:0000000000207BAC                 db    0
.data.rel.ro:0000000000207BAD                 db    0
.data.rel.ro:0000000000207BAE                 db    0
.data.rel.ro:0000000000207BAF                 db    0
.data.rel.ro:0000000000207BB0                 db    0
.data.rel.ro:0000000000207BB1                 db    0
.data.rel.ro:0000000000207BB2                 db    0
.data.rel.ro:0000000000207BB3                 db    0
.data.rel.ro:0000000000207BB4                 db    0
.data.rel.ro:0000000000207BB5                 db    0
.data.rel.ro:0000000000207BB6                 db    0
.data.rel.ro:0000000000207BB7                 db    0
.data.rel.ro:0000000000207BB8                 db  7Eh ; ~
.data.rel.ro:0000000000207BB9                 db 0FFh
.data.rel.ro:0000000000207BBA                 db 0FFh
.data.rel.ro:0000000000207BBB                 db 0FFh
.data.rel.ro:0000000000207BBC                 db    0
.data.rel.ro:0000000000207BBD                 db    0
.data.rel.ro:0000000000207BBE                 db    0
.data.rel.ro:0000000000207BBF                 db    0
.data.rel.ro:0000000000207BC0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000207BC8                 db    0
.data.rel.ro:0000000000207BC9                 db    0
.data.rel.ro:0000000000207BCA                 db    0
.data.rel.ro:0000000000207BCB                 db    0
.data.rel.ro:0000000000207BCC                 db    0
.data.rel.ro:0000000000207BCD                 db    0
.data.rel.ro:0000000000207BCE                 db    0
.data.rel.ro:0000000000207BCF                 db    0
.data.rel.ro:0000000000207BD0                 db    0
.data.rel.ro:0000000000207BD1                 db    0
.data.rel.ro:0000000000207BD2                 db    0
.data.rel.ro:0000000000207BD3                 db    0
.data.rel.ro:0000000000207BD4                 db    0
.data.rel.ro:0000000000207BD5                 db    0
.data.rel.ro:0000000000207BD6                 db    0
.data.rel.ro:0000000000207BD7                 db    0
.data.rel.ro:0000000000207BD8                 db  7Dh ; }
.data.rel.ro:0000000000207BD9                 db 0FFh
.data.rel.ro:0000000000207BDA                 db 0FFh
.data.rel.ro:0000000000207BDB                 db 0FFh
.data.rel.ro:0000000000207BDC                 db    0
.data.rel.ro:0000000000207BDD                 db    0
.data.rel.ro:0000000000207BDE                 db    0
.data.rel.ro:0000000000207BDF                 db    0
.data.rel.ro:0000000000207BE0                 db    0
.data.rel.ro:0000000000207BE1                 db    0
.data.rel.ro:0000000000207BE2                 db    0
.data.rel.ro:0000000000207BE3                 db    0
.data.rel.ro:0000000000207BE4                 db    0
.data.rel.ro:0000000000207BE5                 db    0
.data.rel.ro:0000000000207BE6                 db    0
.data.rel.ro:0000000000207BE7                 db    0
.data.rel.ro:0000000000207BE8                 db    0
.data.rel.ro:0000000000207BE9                 db    0
.data.rel.ro:0000000000207BEA                 db    0
.data.rel.ro:0000000000207BEB                 db    0
.data.rel.ro:0000000000207BEC                 db    0
.data.rel.ro:0000000000207BED                 db    0
.data.rel.ro:0000000000207BEE                 db    0
.data.rel.ro:0000000000207BEF                 db    0
.data.rel.ro:0000000000207BF0                 db    0
.data.rel.ro:0000000000207BF1                 db    0
.data.rel.ro:0000000000207BF2                 db    0
.data.rel.ro:0000000000207BF3                 db    0
.data.rel.ro:0000000000207BF4                 db    0
.data.rel.ro:0000000000207BF5                 db    0
.data.rel.ro:0000000000207BF6                 db    0
.data.rel.ro:0000000000207BF7                 db    0
.data.rel.ro:0000000000207BF8                 db    0
.data.rel.ro:0000000000207BF9                 db    0
.data.rel.ro:0000000000207BFA                 db    0
.data.rel.ro:0000000000207BFB                 db    0
.data.rel.ro:0000000000207BFC                 db    0
.data.rel.ro:0000000000207BFD                 db    0
.data.rel.ro:0000000000207BFE                 db    0
.data.rel.ro:0000000000207BFF                 db    0
.data.rel.ro:0000000000207C00                 public quoting_style_args
.data.rel.ro:0000000000207C00 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000207C08                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000207C10                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000207C18                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000207C20                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000207C28                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000207C30                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000207C38                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000207C40                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000207C48                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000207C50                 db    0
.data.rel.ro:0000000000207C51                 db    0
.data.rel.ro:0000000000207C52                 db    0
.data.rel.ro:0000000000207C53                 db    0
.data.rel.ro:0000000000207C54                 db    0
.data.rel.ro:0000000000207C55                 db    0
.data.rel.ro:0000000000207C56                 db    0
.data.rel.ro:0000000000207C57                 db    0
.data.rel.ro:0000000000207C57 _data_rel_ro    ends
.data.rel.ro:0000000000207C57
LOAD:0000000000207C58 ; ELF Dynamic Information
LOAD:0000000000207C58 ; ===========================================================================
LOAD:0000000000207C58
LOAD:0000000000207C58 ; Segment type: Pure data
LOAD:0000000000207C58 ; Segment permissions: Read/Write
LOAD:0000000000207C58 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207C58                 assume cs:LOAD
LOAD:0000000000207C58                 ;org 207C58h
LOAD:0000000000207C58 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000207C58                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000207C58                                         ; DT_NEEDED libc.so.6
LOAD:0000000000207C68                 Elf64_Dyn <0Ch, 1300h>  ; DT_INIT
LOAD:0000000000207C78                 Elf64_Dyn <0Dh, 4F70h>  ; DT_FINI
LOAD:0000000000207C88                 Elf64_Dyn <19h, 207B70h> ; DT_INIT_ARRAY
LOAD:0000000000207C98                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000207CA8                 Elf64_Dyn <1Ah, 207B78h> ; DT_FINI_ARRAY
LOAD:0000000000207CB8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000207CC8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000207CD8                 Elf64_Dyn <5, 868h>     ; DT_STRTAB
LOAD:0000000000207CE8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000207CF8                 Elf64_Dyn <0Ah, 2BAh>   ; DT_STRSZ
LOAD:0000000000207D08                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000207D18                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000207D28                 Elf64_Dyn <3, 207E48h>  ; DT_PLTGOT
LOAD:0000000000207D38                 Elf64_Dyn <2, 438h>     ; DT_PLTRELSZ
LOAD:0000000000207D48                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000207D58                 Elf64_Dyn <17h, 0EC8h>  ; DT_JMPREL
LOAD:0000000000207D68                 Elf64_Dyn <7, 0BF8h>    ; DT_RELA
LOAD:0000000000207D78                 Elf64_Dyn <8, 2D0h>     ; DT_RELASZ
LOAD:0000000000207D88                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000207D98                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000207DA8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000207DB8                 Elf64_Dyn <6FFFFFFEh, 0B98h> ; DT_VERNEED
LOAD:0000000000207DC8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000207DD8                 Elf64_Dyn <6FFFFFF0h, 0B22h> ; DT_VERSYM
LOAD:0000000000207DE8                 Elf64_Dyn <6FFFFFF9h, 13h> ; DT_RELACOUNT
LOAD:0000000000207DF8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000207E08                 db    0
LOAD:0000000000207E09                 db    0
LOAD:0000000000207E0A                 db    0
LOAD:0000000000207E0B                 db    0
LOAD:0000000000207E0C                 db    0
LOAD:0000000000207E0D                 db    0
LOAD:0000000000207E0E                 db    0
LOAD:0000000000207E0F                 db    0
LOAD:0000000000207E10                 db    0
LOAD:0000000000207E11                 db    0
LOAD:0000000000207E12                 db    0
LOAD:0000000000207E13                 db    0
LOAD:0000000000207E14                 db    0
LOAD:0000000000207E15                 db    0
LOAD:0000000000207E16                 db    0
LOAD:0000000000207E17                 db    0
LOAD:0000000000207E18                 db    0
LOAD:0000000000207E19                 db    0
LOAD:0000000000207E1A                 db    0
LOAD:0000000000207E1B                 db    0
LOAD:0000000000207E1C                 db    0
LOAD:0000000000207E1D                 db    0
LOAD:0000000000207E1E                 db    0
LOAD:0000000000207E1F                 db    0
LOAD:0000000000207E20                 db    0
LOAD:0000000000207E21                 db    0
LOAD:0000000000207E22                 db    0
LOAD:0000000000207E23                 db    0
LOAD:0000000000207E24                 db    0
LOAD:0000000000207E25                 db    0
LOAD:0000000000207E26                 db    0
LOAD:0000000000207E27                 db    0
LOAD:0000000000207E28                 db    0
LOAD:0000000000207E29                 db    0
LOAD:0000000000207E2A                 db    0
LOAD:0000000000207E2B                 db    0
LOAD:0000000000207E2C                 db    0
LOAD:0000000000207E2D                 db    0
LOAD:0000000000207E2E                 db    0
LOAD:0000000000207E2F                 db    0
LOAD:0000000000207E30                 db    0
LOAD:0000000000207E31                 db    0
LOAD:0000000000207E32                 db    0
LOAD:0000000000207E33                 db    0
LOAD:0000000000207E34                 db    0
LOAD:0000000000207E35                 db    0
LOAD:0000000000207E36                 db    0
LOAD:0000000000207E37                 db    0
LOAD:0000000000207E38                 db    0
LOAD:0000000000207E39                 db    0
LOAD:0000000000207E3A                 db    0
LOAD:0000000000207E3B                 db    0
LOAD:0000000000207E3C                 db    0
LOAD:0000000000207E3D                 db    0
LOAD:0000000000207E3E                 db    0
LOAD:0000000000207E3F                 db    0
LOAD:0000000000207E40                 db    0
LOAD:0000000000207E41                 db    0
LOAD:0000000000207E42                 db    0
LOAD:0000000000207E43                 db    0
LOAD:0000000000207E44                 db    0
LOAD:0000000000207E45                 db    0
LOAD:0000000000207E46                 db    0
LOAD:0000000000207E47                 db    0
LOAD:0000000000207E47 LOAD            ends
LOAD:0000000000207E47
.got:0000000000207E48 ; ===========================================================================
.got:0000000000207E48
.got:0000000000207E48 ; Segment type: Pure data
.got:0000000000207E48 ; Segment permissions: Read/Write
.got:0000000000207E48 _got            segment qword public 'DATA' use64
.got:0000000000207E48                 assume cs:_got
.got:0000000000207E48                 ;org 207E48h
.got:0000000000207E48 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000207E50 qword_207E50    dq 0                    ; DATA XREF: sub_1320↑r
.got:0000000000207E58 qword_207E58    dq 0                    ; DATA XREF: sub_1320+6↑r
.got:0000000000207E60 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000207E68 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000207E70 __errno_location_ptr dq offset __errno_location
.got:0000000000207E70                                         ; DATA XREF: ___errno_location↑r
.got:0000000000207E78 getpriority_ptr dq offset getpriority   ; DATA XREF: _getpriority↑r
.got:0000000000207E80 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000207E88 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000207E90 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000207E98 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000207EA0 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000207EA8 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000207EA8                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000207EB0 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000207EB8 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000207EB8                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000207EC0 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000207EC8 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000207EC8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000207ED0 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000207ED8 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000207EE0 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:0000000000207EE8 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000207EF0 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000207EF8 __assert_fail_ptr dq offset __assert_fail
.got:0000000000207EF8                                         ; DATA XREF: ___assert_fail↑r
.got:0000000000207F00 setpriority_ptr dq offset setpriority   ; DATA XREF: _setpriority↑r
.got:0000000000207F08 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000207F10 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000207F18 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000207F18                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000207F20 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000207F28 strtol_ptr      dq offset strtol        ; DATA XREF: _strtol↑r
.got:0000000000207F30 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000207F38 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000207F40 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000207F48 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000207F50 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000207F58 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000207F60 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000207F68 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000207F70 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000207F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000207F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000207F88 execvp_ptr      dq offset execvp        ; DATA XREF: _execvp↑r
.got:0000000000207F90 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000207F98 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000207FA0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000207FA8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000207FA8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000207FB0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000207FB8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000207FC0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000207FC0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000207FC8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000207FC8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000207FD0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000207FD0                                         ; DATA XREF: start+24↑r
.got:0000000000207FD8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000207FD8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000207FE0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000207FE0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000207FE8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000207FE8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000207FE8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000207FE8 _got            ends
.got:0000000000207FE8
LOAD:0000000000207FF0 ; ===========================================================================
LOAD:0000000000207FF0
LOAD:0000000000207FF0 ; Segment type: Pure data
LOAD:0000000000207FF0 ; Segment permissions: Read/Write
LOAD:0000000000207FF0 LOAD            segment byte public 'DATA' use64
LOAD:0000000000207FF0                 assume cs:LOAD
LOAD:0000000000207FF0                 ;org 207FF0h
LOAD:0000000000207FF0                 align 20h
LOAD:0000000000207FF0 LOAD            ends
LOAD:0000000000207FF0
.data:0000000000208000 ; ===========================================================================
.data:0000000000208000
.data:0000000000208000 ; Segment type: Pure data
.data:0000000000208000 ; Segment permissions: Read/Write
.data:0000000000208000 _data           segment align_32 public 'DATA' use64
.data:0000000000208000                 assume cs:_data
.data:0000000000208000                 ;org 208000h
.data:0000000000208000                 public __data_start ; weak
.data:0000000000208000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000208000                                         ; data_start
.data:0000000000208001                 db    0
.data:0000000000208002                 db    0
.data:0000000000208003                 db    0
.data:0000000000208004                 db    0
.data:0000000000208005                 db    0
.data:0000000000208006                 db    0
.data:0000000000208007                 db    0
.data:0000000000208008                 public __dso_handle
.data:0000000000208008 ; void *_dso_handle
.data:0000000000208008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000208008                                         ; atexit↑r ...
.data:0000000000208010                 public Version
.data:0000000000208010 Version         dq offset a831          ; DATA XREF: main+1BE↑r
.data:0000000000208010                                         ; "8.31"
.data:0000000000208018                 public exit_failure
.data:0000000000208018 ; int exit_failure
.data:0000000000208018 exit_failure    dd 1                    ; DATA XREF: main+66↑w
.data:0000000000208018                                         ; close_stdout:loc_1F42↑r ...
.data:000000000020801C                 align 20h
.data:0000000000208020                 public quote_quoting_options
.data:0000000000208020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000208020                                         ; quote_mem↑o ...
.data:0000000000208021                 db    0
.data:0000000000208022                 db    0
.data:0000000000208023                 db    0
.data:0000000000208024                 db    0
.data:0000000000208025                 db    0
.data:0000000000208026                 db    0
.data:0000000000208027                 db    0
.data:0000000000208028                 db    0
.data:0000000000208029                 db    0
.data:000000000020802A                 db    0
.data:000000000020802B                 db    0
.data:000000000020802C                 db    0
.data:000000000020802D                 db    0
.data:000000000020802E                 db    0
.data:000000000020802F                 db    0
.data:0000000000208030                 db    0
.data:0000000000208031                 db    0
.data:0000000000208032                 db    0
.data:0000000000208033                 db    0
.data:0000000000208034                 db    0
.data:0000000000208035                 db    0
.data:0000000000208036                 db    0
.data:0000000000208037                 db    0
.data:0000000000208038                 db    0
.data:0000000000208039                 db    0
.data:000000000020803A                 db    0
.data:000000000020803B                 db    0
.data:000000000020803C                 db    0
.data:000000000020803D                 db    0
.data:000000000020803E                 db    0
.data:000000000020803F                 db    0
.data:0000000000208040                 db    0
.data:0000000000208041                 db    0
.data:0000000000208042                 db    0
.data:0000000000208043                 db    0
.data:0000000000208044                 db    0
.data:0000000000208045                 db    0
.data:0000000000208046                 db    0
.data:0000000000208047                 db    0
.data:0000000000208048                 db    0
.data:0000000000208049                 db    0
.data:000000000020804A                 db    0
.data:000000000020804B                 db    0
.data:000000000020804C                 db    0
.data:000000000020804D                 db    0
.data:000000000020804E                 db    0
.data:000000000020804F                 db    0
.data:0000000000208050                 db    0
.data:0000000000208051                 db    0
.data:0000000000208052                 db    0
.data:0000000000208053                 db    0
.data:0000000000208054                 db    0
.data:0000000000208055                 db    0
.data:0000000000208056                 db    0
.data:0000000000208057                 db    0
.data:0000000000208058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000208058                                         ; quotearg_n_options:loc_33BD↑r ...
.data:000000000020805C                 align 20h
.data:0000000000208060 ; void *slotvec
.data:0000000000208060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000208060                                         ; quotearg_n_options+76↑w ...
.data:0000000000208068                 align 10h
.data:0000000000208070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000208070                                         ; quotearg_n_options+187↑r ...
.data:0000000000208078 off_208078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000208078 _data           ends
.data:0000000000208078
.bss:0000000000208080 ; ===========================================================================
.bss:0000000000208080
.bss:0000000000208080 ; Segment type: Uninitialized
.bss:0000000000208080 ; Segment permissions: Read/Write
.bss:0000000000208080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000208080                 assume cs:_bss
.bss:0000000000208080                 ;org 208080h
.bss:0000000000208080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000208080                 public __bss_start ; weak
.bss:0000000000208080 __bss_start     dq ?                    ; DATA XREF: LOAD:00000000000007C0↑o
.bss:0000000000208080                                         ; LOAD:0000000000000808↑o ...
.bss:0000000000208080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000208080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000208080                                         ; _edata
.bss:0000000000208080                                         ; Copy of shared data
.bss:0000000000208088                 public stdout@@GLIBC_2_2_5
.bss:0000000000208088 ; FILE *stdout
.bss:0000000000208088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007A8↑o
.bss:0000000000208088                                         ; main+1B7↑r ...
.bss:0000000000208088                                         ; Alternative name is 'stdout'
.bss:0000000000208088                                         ; Copy of shared data
.bss:0000000000208090                 public optind@@GLIBC_2_2_5
.bss:0000000000208090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000838↑o
.bss:0000000000208090                                         ; main+F7↑w ...
.bss:0000000000208090                                         ; Alternative name is 'optind'
.bss:0000000000208090                                         ; Copy of shared data
.bss:0000000000208094                 align 8
.bss:0000000000208098                 public optarg@@GLIBC_2_2_5
.bss:0000000000208098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000850↑o
.bss:0000000000208098                                         ; main+1F5↑r
.bss:0000000000208098                                         ; Alternative name is 'optarg'
.bss:0000000000208098                                         ; Copy of shared data
.bss:00000000002080A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002080A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002080A0                                         ; DATA XREF: LOAD:00000000000007D8↑o
.bss:00000000002080A0                                         ; LOAD:00000000000007F0↑o ...
.bss:00000000002080A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002080A0                                         ; Copy of shared data
.bss:00000000002080A8                 align 20h
.bss:00000000002080C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002080C0 ; FILE *stderr
.bss:00000000002080C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000820↑o
.bss:00000000002080C0                                         ; main+2AA↑r ...
.bss:00000000002080C0                                         ; Alternative name is 'stderr'
.bss:00000000002080C0                                         ; Copy of shared data
.bss:00000000002080C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002080C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002080C9                 align 10h
.bss:00000000002080D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002080D0                                         ; close_stdout+1B↑r
.bss:00000000002080D1                 align 8
.bss:00000000002080D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002080D8                                         ; close_stdout+56↑r
.bss:00000000002080E0                 public program_name
.bss:00000000002080E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002080E0                                         ; set_program_name:loc_1FDD↑w
.bss:00000000002080E8                 align 20h
.bss:0000000000208100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000208100                                         ; quotearg_free+46↑o ...
.bss:0000000000208101                 db    ? ;
.bss:0000000000208102                 db    ? ;
.bss:0000000000208103                 db    ? ;
.bss:0000000000208104                 db    ? ;
.bss:0000000000208105                 db    ? ;
.bss:0000000000208106                 db    ? ;
.bss:0000000000208107                 db    ? ;
.bss:0000000000208108                 db    ? ;
.bss:0000000000208109                 db    ? ;
.bss:000000000020810A                 db    ? ;
.bss:000000000020810B                 db    ? ;
.bss:000000000020810C                 db    ? ;
.bss:000000000020810D                 db    ? ;
.bss:000000000020810E                 db    ? ;
.bss:000000000020810F                 db    ? ;
.bss:0000000000208110                 db    ? ;
.bss:0000000000208111                 db    ? ;
.bss:0000000000208112                 db    ? ;
.bss:0000000000208113                 db    ? ;
.bss:0000000000208114                 db    ? ;
.bss:0000000000208115                 db    ? ;
.bss:0000000000208116                 db    ? ;
.bss:0000000000208117                 db    ? ;
.bss:0000000000208118                 db    ? ;
.bss:0000000000208119                 db    ? ;
.bss:000000000020811A                 db    ? ;
.bss:000000000020811B                 db    ? ;
.bss:000000000020811C                 db    ? ;
.bss:000000000020811D                 db    ? ;
.bss:000000000020811E                 db    ? ;
.bss:000000000020811F                 db    ? ;
.bss:0000000000208120                 db    ? ;
.bss:0000000000208121                 db    ? ;
.bss:0000000000208122                 db    ? ;
.bss:0000000000208123                 db    ? ;
.bss:0000000000208124                 db    ? ;
.bss:0000000000208125                 db    ? ;
.bss:0000000000208126                 db    ? ;
.bss:0000000000208127                 db    ? ;
.bss:0000000000208128                 db    ? ;
.bss:0000000000208129                 db    ? ;
.bss:000000000020812A                 db    ? ;
.bss:000000000020812B                 db    ? ;
.bss:000000000020812C                 db    ? ;
.bss:000000000020812D                 db    ? ;
.bss:000000000020812E                 db    ? ;
.bss:000000000020812F                 db    ? ;
.bss:0000000000208130                 db    ? ;
.bss:0000000000208131                 db    ? ;
.bss:0000000000208132                 db    ? ;
.bss:0000000000208133                 db    ? ;
.bss:0000000000208134                 db    ? ;
.bss:0000000000208135                 db    ? ;
.bss:0000000000208136                 db    ? ;
.bss:0000000000208137                 db    ? ;
.bss:0000000000208138                 db    ? ;
.bss:0000000000208139                 db    ? ;
.bss:000000000020813A                 db    ? ;
.bss:000000000020813B                 db    ? ;
.bss:000000000020813C                 db    ? ;
.bss:000000000020813D                 db    ? ;
.bss:000000000020813E                 db    ? ;
.bss:000000000020813F                 db    ? ;
.bss:0000000000208140                 db    ? ;
.bss:0000000000208141                 db    ? ;
.bss:0000000000208142                 db    ? ;
.bss:0000000000208143                 db    ? ;
.bss:0000000000208144                 db    ? ;
.bss:0000000000208145                 db    ? ;
.bss:0000000000208146                 db    ? ;
.bss:0000000000208147                 db    ? ;
.bss:0000000000208148                 db    ? ;
.bss:0000000000208149                 db    ? ;
.bss:000000000020814A                 db    ? ;
.bss:000000000020814B                 db    ? ;
.bss:000000000020814C                 db    ? ;
.bss:000000000020814D                 db    ? ;
.bss:000000000020814E                 db    ? ;
.bss:000000000020814F                 db    ? ;
.bss:0000000000208150                 db    ? ;
.bss:0000000000208151                 db    ? ;
.bss:0000000000208152                 db    ? ;
.bss:0000000000208153                 db    ? ;
.bss:0000000000208154                 db    ? ;
.bss:0000000000208155                 db    ? ;
.bss:0000000000208156                 db    ? ;
.bss:0000000000208157                 db    ? ;
.bss:0000000000208158                 db    ? ;
.bss:0000000000208159                 db    ? ;
.bss:000000000020815A                 db    ? ;
.bss:000000000020815B                 db    ? ;
.bss:000000000020815C                 db    ? ;
.bss:000000000020815D                 db    ? ;
.bss:000000000020815E                 db    ? ;
.bss:000000000020815F                 db    ? ;
.bss:0000000000208160                 db    ? ;
.bss:0000000000208161                 db    ? ;
.bss:0000000000208162                 db    ? ;
.bss:0000000000208163                 db    ? ;
.bss:0000000000208164                 db    ? ;
.bss:0000000000208165                 db    ? ;
.bss:0000000000208166                 db    ? ;
.bss:0000000000208167                 db    ? ;
.bss:0000000000208168                 db    ? ;
.bss:0000000000208169                 db    ? ;
.bss:000000000020816A                 db    ? ;
.bss:000000000020816B                 db    ? ;
.bss:000000000020816C                 db    ? ;
.bss:000000000020816D                 db    ? ;
.bss:000000000020816E                 db    ? ;
.bss:000000000020816F                 db    ? ;
.bss:0000000000208170                 db    ? ;
.bss:0000000000208171                 db    ? ;
.bss:0000000000208172                 db    ? ;
.bss:0000000000208173                 db    ? ;
.bss:0000000000208174                 db    ? ;
.bss:0000000000208175                 db    ? ;
.bss:0000000000208176                 db    ? ;
.bss:0000000000208177                 db    ? ;
.bss:0000000000208178                 db    ? ;
.bss:0000000000208179                 db    ? ;
.bss:000000000020817A                 db    ? ;
.bss:000000000020817B                 db    ? ;
.bss:000000000020817C                 db    ? ;
.bss:000000000020817D                 db    ? ;
.bss:000000000020817E                 db    ? ;
.bss:000000000020817F                 db    ? ;
.bss:0000000000208180                 db    ? ;
.bss:0000000000208181                 db    ? ;
.bss:0000000000208182                 db    ? ;
.bss:0000000000208183                 db    ? ;
.bss:0000000000208184                 db    ? ;
.bss:0000000000208185                 db    ? ;
.bss:0000000000208186                 db    ? ;
.bss:0000000000208187                 db    ? ;
.bss:0000000000208188                 db    ? ;
.bss:0000000000208189                 db    ? ;
.bss:000000000020818A                 db    ? ;
.bss:000000000020818B                 db    ? ;
.bss:000000000020818C                 db    ? ;
.bss:000000000020818D                 db    ? ;
.bss:000000000020818E                 db    ? ;
.bss:000000000020818F                 db    ? ;
.bss:0000000000208190                 db    ? ;
.bss:0000000000208191                 db    ? ;
.bss:0000000000208192                 db    ? ;
.bss:0000000000208193                 db    ? ;
.bss:0000000000208194                 db    ? ;
.bss:0000000000208195                 db    ? ;
.bss:0000000000208196                 db    ? ;
.bss:0000000000208197                 db    ? ;
.bss:0000000000208198                 db    ? ;
.bss:0000000000208199                 db    ? ;
.bss:000000000020819A                 db    ? ;
.bss:000000000020819B                 db    ? ;
.bss:000000000020819C                 db    ? ;
.bss:000000000020819D                 db    ? ;
.bss:000000000020819E                 db    ? ;
.bss:000000000020819F                 db    ? ;
.bss:00000000002081A0                 db    ? ;
.bss:00000000002081A1                 db    ? ;
.bss:00000000002081A2                 db    ? ;
.bss:00000000002081A3                 db    ? ;
.bss:00000000002081A4                 db    ? ;
.bss:00000000002081A5                 db    ? ;
.bss:00000000002081A6                 db    ? ;
.bss:00000000002081A7                 db    ? ;
.bss:00000000002081A8                 db    ? ;
.bss:00000000002081A9                 db    ? ;
.bss:00000000002081AA                 db    ? ;
.bss:00000000002081AB                 db    ? ;
.bss:00000000002081AC                 db    ? ;
.bss:00000000002081AD                 db    ? ;
.bss:00000000002081AE                 db    ? ;
.bss:00000000002081AF                 db    ? ;
.bss:00000000002081B0                 db    ? ;
.bss:00000000002081B1                 db    ? ;
.bss:00000000002081B2                 db    ? ;
.bss:00000000002081B3                 db    ? ;
.bss:00000000002081B4                 db    ? ;
.bss:00000000002081B5                 db    ? ;
.bss:00000000002081B6                 db    ? ;
.bss:00000000002081B7                 db    ? ;
.bss:00000000002081B8                 db    ? ;
.bss:00000000002081B9                 db    ? ;
.bss:00000000002081BA                 db    ? ;
.bss:00000000002081BB                 db    ? ;
.bss:00000000002081BC                 db    ? ;
.bss:00000000002081BD                 db    ? ;
.bss:00000000002081BE                 db    ? ;
.bss:00000000002081BF                 db    ? ;
.bss:00000000002081C0                 db    ? ;
.bss:00000000002081C1                 db    ? ;
.bss:00000000002081C2                 db    ? ;
.bss:00000000002081C3                 db    ? ;
.bss:00000000002081C4                 db    ? ;
.bss:00000000002081C5                 db    ? ;
.bss:00000000002081C6                 db    ? ;
.bss:00000000002081C7                 db    ? ;
.bss:00000000002081C8                 db    ? ;
.bss:00000000002081C9                 db    ? ;
.bss:00000000002081CA                 db    ? ;
.bss:00000000002081CB                 db    ? ;
.bss:00000000002081CC                 db    ? ;
.bss:00000000002081CD                 db    ? ;
.bss:00000000002081CE                 db    ? ;
.bss:00000000002081CF                 db    ? ;
.bss:00000000002081D0                 db    ? ;
.bss:00000000002081D1                 db    ? ;
.bss:00000000002081D2                 db    ? ;
.bss:00000000002081D3                 db    ? ;
.bss:00000000002081D4                 db    ? ;
.bss:00000000002081D5                 db    ? ;
.bss:00000000002081D6                 db    ? ;
.bss:00000000002081D7                 db    ? ;
.bss:00000000002081D8                 db    ? ;
.bss:00000000002081D9                 db    ? ;
.bss:00000000002081DA                 db    ? ;
.bss:00000000002081DB                 db    ? ;
.bss:00000000002081DC                 db    ? ;
.bss:00000000002081DD                 db    ? ;
.bss:00000000002081DE                 db    ? ;
.bss:00000000002081DF                 db    ? ;
.bss:00000000002081E0                 db    ? ;
.bss:00000000002081E1                 db    ? ;
.bss:00000000002081E2                 db    ? ;
.bss:00000000002081E3                 db    ? ;
.bss:00000000002081E4                 db    ? ;
.bss:00000000002081E5                 db    ? ;
.bss:00000000002081E6                 db    ? ;
.bss:00000000002081E7                 db    ? ;
.bss:00000000002081E8                 db    ? ;
.bss:00000000002081E9                 db    ? ;
.bss:00000000002081EA                 db    ? ;
.bss:00000000002081EB                 db    ? ;
.bss:00000000002081EC                 db    ? ;
.bss:00000000002081ED                 db    ? ;
.bss:00000000002081EE                 db    ? ;
.bss:00000000002081EF                 db    ? ;
.bss:00000000002081F0                 db    ? ;
.bss:00000000002081F1                 db    ? ;
.bss:00000000002081F2                 db    ? ;
.bss:00000000002081F3                 db    ? ;
.bss:00000000002081F4                 db    ? ;
.bss:00000000002081F5                 db    ? ;
.bss:00000000002081F6                 db    ? ;
.bss:00000000002081F7                 db    ? ;
.bss:00000000002081F8                 db    ? ;
.bss:00000000002081F9                 db    ? ;
.bss:00000000002081FA                 db    ? ;
.bss:00000000002081FB                 db    ? ;
.bss:00000000002081FC                 db    ? ;
.bss:00000000002081FD                 db    ? ;
.bss:00000000002081FE                 db    ? ;
.bss:00000000002081FF                 db    ? ;
.bss:0000000000208200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000208200                                         ; get_quoting_style↑o ...
.bss:0000000000208210 xmmword_208210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000208210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000208220 xmmword_208220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000208220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000208230 qword_208230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000208230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000208230 _bss            ends
.bss:0000000000208230
.prgend:0000000000208238 ; ===========================================================================
.prgend:0000000000208238
.prgend:0000000000208238 ; Segment type: Zero-length
.prgend:0000000000208238 _prgend         segment byte public '' use64
.prgend:0000000000208238 _end            label byte
.prgend:0000000000208238 _prgend         ends
.prgend:0000000000208238
extern:0000000000208240 ; ===========================================================================
extern:0000000000208240
extern:0000000000208240 ; Segment type: Externs
extern:0000000000208240 ; extern
extern:0000000000208240 ; void free(void *ptr)
extern:0000000000208240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000208240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000208248 ; void __noreturn abort(void)
extern:0000000000208248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000208248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000208250 ; int *_errno_location(void)
extern:0000000000208250                 extrn __errno_location:near
extern:0000000000208250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000208250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000208258 ; int getpriority(__priority_which_t which, id_t who)
extern:0000000000208258                 extrn getpriority:near  ; CODE XREF: _getpriority↑j
extern:0000000000208258                                         ; DATA XREF: .got:getpriority_ptr↑o
extern:0000000000208260 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000208260                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000208260                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000208268 ; void __noreturn exit(int status)
extern:0000000000208268                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000208268                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000208270 ; size_t _fpending(FILE *fp)
extern:0000000000208270                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000208270                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000208278 ; char *textdomain(const char *domainname)
extern:0000000000208278                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000208278                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000208280 ; int fclose(FILE *stream)
extern:0000000000208280                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000208280                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000208288 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000208288                 extrn bindtextdomain:near
extern:0000000000208288                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000208288                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000208290 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000208290                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000208290                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000208298 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000208298                 extrn __ctype_get_mb_cur_max:near
extern:0000000000208298                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000208298                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002082A0 ; size_t strlen(const char *s)
extern:00000000002082A0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002082A0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002082A8                 extrn __stack_chk_fail:near
extern:00000000002082A8                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002082A8                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002082B0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002082B0                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002082B0                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002082B8 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002082B8                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002082B8                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002082C0 ; char *strchr(const char *s, int c)
extern:00000000002082C0                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:00000000002082C0                                         ; DATA XREF: .got:strchr_ptr↑o
extern:00000000002082C8 ; char *strrchr(const char *s, int c)
extern:00000000002082C8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002082C8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002082D0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002082D0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002082D0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002082D8 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00000000002082D8                 extrn __assert_fail:near
extern:00000000002082D8                                         ; CODE XREF: ___assert_fail↑j
extern:00000000002082D8                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00000000002082E0 ; int setpriority(__priority_which_t which, id_t who, int prio)
extern:00000000002082E0                 extrn setpriority:near  ; CODE XREF: _setpriority↑j
extern:00000000002082E0                                         ; DATA XREF: .got:setpriority_ptr↑o
extern:00000000002082E8 ; void *memset(void *s, int c, size_t n)
extern:00000000002082E8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002082E8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002082F0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002082F0                 extrn __libc_start_main:near
extern:00000000002082F0                                         ; CODE XREF: start+24↑p
extern:00000000002082F0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002082F8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002082F8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002082F8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000208300 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000208300                 extrn fputs_unlocked:near
extern:0000000000208300                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000208300                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000208308 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000208308                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000208308                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000208310 ; __int64 strtol(const char *nptr, char **endptr, int base)
extern:0000000000208310                 extrn strtol:near       ; CODE XREF: _strtol↑j
extern:0000000000208310                                         ; DATA XREF: .got:strtol_ptr↑o
extern:0000000000208318 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000208318                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000208318                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000208320 ; int fileno(FILE *stream)
extern:0000000000208320                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000208320                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000208328 ; void *malloc(size_t size)
extern:0000000000208328                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000208328                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000208330 ; int fflush(FILE *stream)
extern:0000000000208330                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000208330                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000208338 ; char *nl_langinfo(nl_item item)
extern:0000000000208338                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000208338                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000208340 ; int _freading(FILE *fp)
extern:0000000000208340                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000208340                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000208348 ; void *realloc(void *ptr, size_t size)
extern:0000000000208348                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000208348                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000208350 ; char *setlocale(int category, const char *locale)
extern:0000000000208350                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000208350                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000208358                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000208358                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000208360 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000208360                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000208360                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000208368 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000208368                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000208368                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000208370 ; int execvp(const char *file, char *const argv[])
extern:0000000000208370                 extrn execvp:near       ; CODE XREF: _execvp↑j
extern:0000000000208370                                         ; DATA XREF: .got:execvp_ptr↑o
extern:0000000000208378 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000208378                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000208378                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000208380 ; void __noreturn exit(int status)
extern:0000000000208380                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000208380                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000208388 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000208388                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000208388                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000208390                 extrn __fprintf_chk:near
extern:0000000000208390                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000208390                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000208398 ; int mbsinit(const mbstate_t *ps)
extern:0000000000208398                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000208398                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002083A0 ; int iswprint(wint_t wc)
extern:00000000002083A0                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002083A0                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002083A8 ; int __fastcall __cxa_finalize(void *)
extern:00000000002083A8                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002083A8                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002083A8                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002083B0 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002083B0                 extrn __ctype_b_loc:near
extern:00000000002083B0                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002083B0                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002083B8                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002083B8                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002083C0                 extrn __gmon_start__:near ; weak
extern:00000000002083C0                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002083C0                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002083C8                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002083C8                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002083C8
extern:00000000002083C8
extern:00000000002083C8                 end start
