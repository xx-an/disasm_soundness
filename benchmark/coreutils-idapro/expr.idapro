LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 9373AA07126EFAA743206BF5B864B89B99B3A33E6146513064D178B627875BA7
LOAD:0000000000000000 ; Input MD5    : C382E3ACBC8CEA33A66215775CEB15B7
LOAD:0000000000000000 ; Input CRC32  : 5A3A9D69
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/expr
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libgmp.so.10'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'expr.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'mbchar.c'
LOAD:0000000000000000 ; Source File : 'mbschr.c'
LOAD:0000000000000000 ; Source File : 'mbslen.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'strnlen1.c'
LOAD:0000000000000000 ; Source File : 'strintcmp.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'regex.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000000000000310↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000328↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 80840h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 19DF8h               ; Size in file image
LOAD:00000000000000D8                 dq 19DF8h               ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 1AAB0h               ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 21AAB0h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 5D0h                 ; Size in file image
LOAD:0000000000000110                 dq 790h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 1AB78h               ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 21AB78h              ; Physical address
LOAD:0000000000000140                 dq 200h                 ; Size in file image
LOAD:0000000000000148                 dq 200h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 17300h               ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 17300h               ; Physical address
LOAD:00000000000001B0                 dq 5DCh                 ; Size in file image
LOAD:00000000000001B8                 dq 5DCh                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 1AAB0h               ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 21AAB0h              ; Physical address
LOAD:0000000000000220                 dq 550h                 ; Size in file image
LOAD:0000000000000228                 dq 550h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 0CFh, 0CBh, 9Ah, 0A2h, 9Fh, 94h, 40h, 37h, 4Ah, 77h ; Desc
LOAD:0000000000000284                 db 94h, 0, 25h, 0C1h, 12h, 9Ch, 0BCh, 5, 0A9h, 0A4h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 4Ch
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 2
LOAD:00000000000002A4 elf_gnu_hash_shift dd 7
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 1F08011208400182h, 4A80300442Ah
LOAD:00000000000002B8 elf_gnu_hash_bucket dd 4Ch, 4Fh, 57h
LOAD:00000000000002C4 elf_gnu_hash_chain dd 1C8C1D28h, 0ECD54542h, 7C92E3BBh, 9E7650BCh, 9789A096h
LOAD:00000000000002C4                 dd 1C5871D8h, 72632CCEh, 0F54162E4h, 0EF18DB8h, 12F7B3C0h
LOAD:00000000000002C4                 dd 1C8BF239h, 12F7C432h, 0EEFD3EBh
LOAD:00000000000002F8 ; ELF Symbol Table
LOAD:00000000000002F8                 Elf64_Sym <0>
LOAD:0000000000000310                 Elf64_Sym <offset aCtypeToupperLo - offset byte_B50, 12h, 0, 0, \ ; "__ctype_toupper_loc"
LOAD:0000000000000310                            offset dword_0, 0>
LOAD:0000000000000328                 Elf64_Sym <offset aFree - offset byte_B50, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aAbort - offset byte_B50, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000340                            0>
LOAD:0000000000000358                 Elf64_Sym <offset aErrnoLocation - offset byte_B50, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aGmpzTdivQ - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_tdiv_q"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aStrncmp - offset byte_B50, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aItmDeregistert - offset byte_B50, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aExit - offset byte_B50, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003B8                            0>
LOAD:00000000000003D0                 Elf64_Sym <offset aFpending - offset byte_B50, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aPuts - offset byte_B50, 12h, 0, 0, offset dword_0, \ ; "puts"
LOAD:00000000000003E8                            0>
LOAD:0000000000000400                 Elf64_Sym <offset aIswcntrl - offset byte_B50, 12h, 0, 0, \ ; "iswcntrl"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aGmpzSub - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_sub"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_B50, 12h, 0, 0, \ ; "textdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aIswctype - offset byte_B50, 12h, 0, 0, \ ; "iswctype"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aFclose - offset byte_B50, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aBindtextdomain - offset byte_B50, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aDcgettext - offset byte_B50, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_B50, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aStrlen - offset byte_B50, 12h, 0, 0, \ ; "strlen"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aGmpzGetStr - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_get_str"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStackChkFail - offset byte_B50, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aGetoptLong - offset byte_B50, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aMbrtowc - offset byte_B50, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aStrchr - offset byte_B50, 12h, 0, 0, \ ; "strchr"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aGmpzMul - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_mul"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aOverflow - offset byte_B50, 12h, 0, 0, \ ; "__overflow"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aStrrchr - offset byte_B50, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aLseek - offset byte_B50, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000598                            0>
LOAD:00000000000005B0                 Elf64_Sym <offset aGmpzOutStr - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_out_str"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aAssertFail - offset byte_B50, 12h, 0, 0, \ ; "__assert_fail"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemset - offset byte_B50, 12h, 0, 0, \ ; "memset"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aStrcspn - offset byte_B50, 12h, 0, 0, \ ; "strcspn"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aMemchr - offset byte_B50, 12h, 0, 0, \ ; "memchr"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aLibcStartMain - offset byte_B50, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aMemcmp - offset byte_B50, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aIswctype+2 - offset byte_B50, 12h, 0, 0, \ ; "wctype"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFputsUnlocked - offset byte_B50, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aCalloc - offset byte_B50, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aStrcmp - offset byte_B50, 12h, 0, 0, \ ; "strcmp"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aGmonStart - offset byte_B50, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aMemcpy - offset byte_B50, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aFileno - offset byte_B50, 12h, 0, 0, \ ; "fileno"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aGmpzTdivR - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_tdiv_r"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aWcwidth - offset byte_B50, 12h, 0, 0, \ ; "wcwidth"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aIswalnum - offset byte_B50, 12h, 0, 0, \ ; "iswalnum"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aMalloc - offset byte_B50, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aWcrtomb - offset byte_B50, 12h, 0, 0, \ ; "wcrtomb"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aFflush - offset byte_B50, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aGmpzClear - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_clear"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aNlLanginfo - offset byte_B50, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aStrcoll - offset byte_B50, 12h, 0, 0, \ ; "strcoll"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aFreading - offset byte_B50, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aRealloc - offset byte_B50, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000007F0                            offset dword_0, 0>
LOAD:0000000000000808                 Elf64_Sym <offset aSetlocale - offset byte_B50, 12h, 0, 0, \ ; "setlocale"
LOAD:0000000000000808                            offset dword_0, 0>
LOAD:0000000000000820                 Elf64_Sym <offset aPrintfChk - offset byte_B50, 12h, 0, 0, \ ; "__printf_chk"
LOAD:0000000000000820                            offset dword_0, 0>
LOAD:0000000000000838                 Elf64_Sym <offset aGmpzInitSetUi - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_init_set_ui"
LOAD:0000000000000838                            offset dword_0, 0>
LOAD:0000000000000850                 Elf64_Sym <offset aBtowc - offset byte_B50, 12h, 0, 0, offset dword_0,\ ; "btowc"
LOAD:0000000000000850                            0>
LOAD:0000000000000868                 Elf64_Sym <offset aMempcpy - offset byte_B50, 12h, 0, 0, \ ; "mempcpy"
LOAD:0000000000000868                            offset dword_0, 0>
LOAD:0000000000000880                 Elf64_Sym <offset aMemmove - offset byte_B50, 12h, 0, 0, \ ; "memmove"
LOAD:0000000000000880                            offset dword_0, 0>
LOAD:0000000000000898                 Elf64_Sym <offset aError - offset byte_B50, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000898                            0>
LOAD:00000000000008B0                 Elf64_Sym <offset aFseeko - offset byte_B50, 12h, 0, 0, \ ; "fseeko"
LOAD:00000000000008B0                            offset dword_0, 0>
LOAD:00000000000008C8                 Elf64_Sym <offset aGmpzAdd - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_add"
LOAD:00000000000008C8                            offset dword_0, 0>
LOAD:00000000000008E0                 Elf64_Sym <offset aTowlower - offset byte_B50, 12h, 0, 0, \ ; "towlower"
LOAD:00000000000008E0                            offset dword_0, 0>
LOAD:00000000000008F8                 Elf64_Sym <offset aTowupper - offset byte_B50, 12h, 0, 0, \ ; "towupper"
LOAD:00000000000008F8                            offset dword_0, 0>
LOAD:0000000000000910                 Elf64_Sym <offset aGmpzInitSetStr - offset byte_B50, 12h, 0, 0, \ ; "__gmpz_init_set_str"
LOAD:0000000000000910                            offset dword_0, 0>
LOAD:0000000000000928                 Elf64_Sym <offset aCxaAtexit - offset byte_B50, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000928                            offset dword_0, 0>
LOAD:0000000000000940                 Elf64_Sym <offset aExit+1 - offset byte_B50, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000940                            offset dword_0, 0>
LOAD:0000000000000958                 Elf64_Sym <offset aFwrite - offset byte_B50, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000958                            offset dword_0, 0>
LOAD:0000000000000970                 Elf64_Sym <offset aFprintfChk - offset byte_B50, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000970                            offset dword_0, 0>
LOAD:0000000000000988                 Elf64_Sym <offset aItmRegistertmc - offset byte_B50, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000988                            offset dword_0, 0>
LOAD:00000000000009A0                 Elf64_Sym <offset aMbsinit - offset byte_B50, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000009A0                            offset dword_0, 0>
LOAD:00000000000009B8                 Elf64_Sym <offset aIswprint - offset byte_B50, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000009B8                            offset dword_0, 0>
LOAD:00000000000009D0                 Elf64_Sym <offset aCxaFinalize - offset byte_B50, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000009D0                            offset dword_0, 0>
LOAD:00000000000009E8                 Elf64_Sym <offset aCtypeTolowerLo - offset byte_B50, 12h, 0, 0, \ ; "__ctype_tolower_loc"
LOAD:00000000000009E8                            offset dword_0, 0>
LOAD:0000000000000A00                 Elf64_Sym <offset aCtypeBLoc - offset byte_B50, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000A00                            offset dword_0, 0>
LOAD:0000000000000A18                 Elf64_Sym <offset aStdout - offset byte_B50, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000A18                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000A30                 Elf64_Sym <offset aEdata - offset byte_B50, 10h, 0, 18h, \ ; "_edata"
LOAD:0000000000000A30                            offset __bss_start, 0>
LOAD:0000000000000A48                 Elf64_Sym <offset aEnd - offset byte_B50, 10h, 0, 19h, offset _end, 0> ; "_end"
LOAD:0000000000000A60                 Elf64_Sym <offset aProgname - offset byte_B50, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000A60                            offset __bss_start, 8>
LOAD:0000000000000A78                 Elf64_Sym <offset aProgramInvocat - offset byte_B50, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000A78                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000A90                 Elf64_Sym <offset aBssStart - offset byte_B50, 10h, 0, 19h, \ ; "__bss_start"
LOAD:0000000000000A90                            offset __bss_start, 0>
LOAD:0000000000000AA8                 Elf64_Sym <offset aPrognameFull - offset byte_B50, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000AA8                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000AC0                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_B50, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000AC0                            offset __bss_start, 8>
LOAD:0000000000000AD8                 Elf64_Sym <offset aInit - offset byte_B50, 12h, 0, 0Bh, \ ; "_init"
LOAD:0000000000000AD8                            offset _init_proc, 0>
LOAD:0000000000000AF0                 Elf64_Sym <offset aOpterr - offset byte_B50, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000AF0                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000B08                 Elf64_Sym <offset aStderr - offset byte_B50, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000B08                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000B20                 Elf64_Sym <offset aOptind - offset byte_B50, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000B20                            offset optind@@GLIBC_2_2_5, 4>
LOAD:0000000000000B38                 Elf64_Sym <offset aFini - offset byte_B50, 12h, 0, 0Fh, \ ; "_fini"
LOAD:0000000000000B38                            offset _term_proc, 0>
LOAD:0000000000000B50 ; ELF String Table
LOAD:0000000000000B50 byte_B50        db 0                    ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000B50                                         ; LOAD:0000000000000328↑o ...
LOAD:0000000000000B51 aLibgmpSo10     db 'libgmp.so.10',0
LOAD:0000000000000B5E aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B5E                                         ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000B7A aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:0000000000000B89 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B89                                         ; DATA XREF: LOAD:0000000000000988↑o
LOAD:0000000000000BA3 aInit           db '_init',0            ; DATA XREF: LOAD:0000000000000AD8↑o
LOAD:0000000000000BA9 aGmpzAdd        db '__gmpz_add',0       ; DATA XREF: LOAD:00000000000008C8↑o
LOAD:0000000000000BB4 aGmpzInitSetUi  db '__gmpz_init_set_ui',0
LOAD:0000000000000BB4                                         ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000BC7 aGmpzInitSetStr db '__gmpz_init_set_str',0
LOAD:0000000000000BC7                                         ; DATA XREF: LOAD:0000000000000910↑o
LOAD:0000000000000BDB aGmpzMul        db '__gmpz_mul',0       ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000BE6 aGmpzClear      db '__gmpz_clear',0     ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000BF3 aGmpzTdivQ      db '__gmpz_tdiv_q',0    ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000C01 aGmpzTdivR      db '__gmpz_tdiv_r',0    ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000C0F aGmpzGetStr     db '__gmpz_get_str',0   ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000C1E aGmpzSub        db '__gmpz_sub',0       ; DATA XREF: LOAD:0000000000000418↑o
LOAD:0000000000000C29 aGmpzOutStr     db '__gmpz_out_str',0   ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000C38 aFini           db '_fini',0            ; DATA XREF: LOAD:0000000000000B38↑o
LOAD:0000000000000C3E aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000001000↓o
LOAD:0000000000000C48 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000C4F aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:0000000000000820↑o
LOAD:0000000000000C5C aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000C66 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000C6E aTowlower       db 'towlower',0         ; DATA XREF: LOAD:00000000000008E0↑o
LOAD:0000000000000C77 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000C7F aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000B20↑o
LOAD:0000000000000C86 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000C8E aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000C98 aWcrtomb        db 'wcrtomb',0          ; DATA XREF: LOAD:0000000000000760↑o
LOAD:0000000000000CA0 aError          db 'error',0            ; DATA XREF: LOAD:0000000000000898↑o
LOAD:0000000000000CA6 aPuts           db 'puts',0             ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:0000000000000CAB aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:0000000000000CBC aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000009B8↑o
LOAD:0000000000000CC5 aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:0000000000000CCD aBtowc          db 'btowc',0            ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000CD3 aTowupper       db 'towupper',0         ; DATA XREF: LOAD:00000000000008F8↑o
LOAD:0000000000000CDC aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000CE2 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000CE2                                         ; LOAD:0000000000000940↑o
LOAD:0000000000000CE8 aMemchr         db 'memchr',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000CEF aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000CEF                                         ; DATA XREF: LOAD:0000000000000A78↑o
LOAD:0000000000000D07 aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000D15 aIswalnum       db 'iswalnum',0         ; DATA XREF: LOAD:0000000000000730↑o
LOAD:0000000000000D1E aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000D1E                                         ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000D35 aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000D3C aStrlen         db 'strlen',0           ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000D43 aIswctype       db 'iswctype',0         ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000D43                                         ; LOAD:0000000000000658↑o
LOAD:0000000000000D4C aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000D53 aStrcspn        db 'strcspn',0          ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000D5B aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000D6C aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:0000000000000D73 aMempcpy        db 'mempcpy',0          ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000D7B aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000970↑o
LOAD:0000000000000D89 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000A18↑o
LOAD:0000000000000D90 aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000D96 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000D9D aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000DA4 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000DAB aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000009A0↑o
LOAD:0000000000000DB3 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000DBF aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000A00↑o
LOAD:0000000000000DCD aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:0000000000000DD8 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000B08↑o
LOAD:0000000000000DDF aWcwidth        db 'wcwidth',0          ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000DE7 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000DF3 aFileno         db 'fileno',0           ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000DFA aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000958↑o
LOAD:0000000000000E01 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000E0C aStrchr         db 'strchr',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000E13 aIswcntrl       db 'iswcntrl',0         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000E1C aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000E1C                                         ; DATA XREF: LOAD:0000000000000AC0↑o
LOAD:0000000000000E3A aCtypeToupperLo db '__ctype_toupper_loc',0
LOAD:0000000000000E3A                                         ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000E4E aCtypeTolowerLo db '__ctype_tolower_loc',0
LOAD:0000000000000E4E                                         ; DATA XREF: LOAD:00000000000009E8↑o
LOAD:0000000000000E62 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000009D0↑o
LOAD:0000000000000E71 aMemmove        db 'memmove',0          ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000E79 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000E79                                         ; LOAD:0000000000000430↑o
LOAD:0000000000000E88 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000AF0↑o
LOAD:0000000000000E8F aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000E96 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000E96                                         ; DATA XREF: LOAD:0000000000000628↑o
LOAD:0000000000000EA8 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:00000000000008B0↑o
LOAD:0000000000000EAF aStrcoll        db 'strcoll',0          ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000EB7 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000EC2 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000ED1 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000ED6 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000A60↑o
LOAD:0000000000000EE1 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000AA8↑o
LOAD:0000000000000EF1 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000928↑o
LOAD:0000000000000EFE aEdata          db '_edata',0           ; DATA XREF: LOAD:0000000000000A30↑o
LOAD:0000000000000F05 aBssStart       db '__bss_start',0      ; DATA XREF: LOAD:0000000000000A90↑o
LOAD:0000000000000F11 aEnd            db '_end',0             ; DATA XREF: LOAD:0000000000000A48↑o
LOAD:0000000000000F16 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000001010↓o
LOAD:0000000000000F22 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000001020↓o
LOAD:0000000000000F2D aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000001030↓o
LOAD:0000000000000F37 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000001040↓o
LOAD:0000000000000F43 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000001050↓o
LOAD:0000000000000F4D                 align 2
LOAD:0000000000000F4E ; ELF GNU Symbol Version Table
LOAD:0000000000000F4E                 dw 0
LOAD:0000000000000F50                 dw 2                    ; __ctype_toupper_loc@@GLIBC_2.3
LOAD:0000000000000F52                 dw 3                    ; free@@GLIBC_2.2.5
LOAD:0000000000000F54                 dw 3                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000F56                 dw 3                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000F58                 dw 0                    ; local  symbol: __gmpz_tdiv_q
LOAD:0000000000000F5A                 dw 3                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000F5C                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000F5E                 dw 3                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000F60                 dw 3                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000F62                 dw 3                    ; puts@@GLIBC_2.2.5
LOAD:0000000000000F64                 dw 3                    ; iswcntrl@@GLIBC_2.2.5
LOAD:0000000000000F66                 dw 0                    ; local  symbol: __gmpz_sub
LOAD:0000000000000F68                 dw 3                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000F6A                 dw 3                    ; iswctype@@GLIBC_2.2.5
LOAD:0000000000000F6C                 dw 3                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000F6E                 dw 3                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000F70                 dw 3                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000F72                 dw 3                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000F74                 dw 3                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000F76                 dw 0                    ; local  symbol: __gmpz_get_str
LOAD:0000000000000F78                 dw 4                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000F7A                 dw 3                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000F7C                 dw 3                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000F7E                 dw 3                    ; strchr@@GLIBC_2.2.5
LOAD:0000000000000F80                 dw 0                    ; local  symbol: __gmpz_mul
LOAD:0000000000000F82                 dw 3                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000F84                 dw 3                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000F86                 dw 3                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000F88                 dw 0                    ; local  symbol: __gmpz_out_str
LOAD:0000000000000F8A                 dw 3                    ; __assert_fail@@GLIBC_2.2.5
LOAD:0000000000000F8C                 dw 3                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000F8E                 dw 3                    ; strcspn@@GLIBC_2.2.5
LOAD:0000000000000F90                 dw 3                    ; memchr@@GLIBC_2.2.5
LOAD:0000000000000F92                 dw 3                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000F94                 dw 3                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000F96                 dw 3                    ; wctype@@GLIBC_2.2.5
LOAD:0000000000000F98                 dw 3                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000F9A                 dw 3                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000F9C                 dw 3                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000F9E                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000FA0                 dw 5                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000FA2                 dw 3                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000FA4                 dw 0                    ; local  symbol: __gmpz_tdiv_r
LOAD:0000000000000FA6                 dw 3                    ; wcwidth@@GLIBC_2.2.5
LOAD:0000000000000FA8                 dw 3                    ; iswalnum@@GLIBC_2.2.5
LOAD:0000000000000FAA                 dw 3                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000FAC                 dw 3                    ; wcrtomb@@GLIBC_2.2.5
LOAD:0000000000000FAE                 dw 3                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000FB0                 dw 0                    ; local  symbol: __gmpz_clear
LOAD:0000000000000FB2                 dw 3                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000FB4                 dw 3                    ; strcoll@@GLIBC_2.2.5
LOAD:0000000000000FB6                 dw 3                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000FB8                 dw 3                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000FBA                 dw 3                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000FBC                 dw 6                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000FBE                 dw 0                    ; local  symbol: __gmpz_init_set_ui
LOAD:0000000000000FC0                 dw 3                    ; btowc@@GLIBC_2.2.5
LOAD:0000000000000FC2                 dw 3                    ; mempcpy@@GLIBC_2.2.5
LOAD:0000000000000FC4                 dw 3                    ; memmove@@GLIBC_2.2.5
LOAD:0000000000000FC6                 dw 3                    ; error@@GLIBC_2.2.5
LOAD:0000000000000FC8                 dw 3                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000FCA                 dw 0                    ; local  symbol: __gmpz_add
LOAD:0000000000000FCC                 dw 3                    ; towlower@@GLIBC_2.2.5
LOAD:0000000000000FCE                 dw 3                    ; towupper@@GLIBC_2.2.5
LOAD:0000000000000FD0                 dw 0                    ; local  symbol: __gmpz_init_set_str
LOAD:0000000000000FD2                 dw 3                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000FD4                 dw 3                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000FD6                 dw 3                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000FD8                 dw 6                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000FDA                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000FDC                 dw 3                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000FDE                 dw 3                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000FE0                 dw 3                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000FE2                 dw 2                    ; __ctype_tolower_loc@@GLIBC_2.3
LOAD:0000000000000FE4                 dw 2                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000FE6                 dw 3                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000FE8                 dw 1                    ; global symbol: _edata
LOAD:0000000000000FEA                 dw 1                    ; global symbol: _end
LOAD:0000000000000FEC                 dw 3                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000FEE                 dw 3                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000FF0                 dw 1                    ; global symbol: __bss_start
LOAD:0000000000000FF2                 dw 3                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000FF4                 dw 3                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000FF6                 dw 1                    ; global symbol: _init
LOAD:0000000000000FF8                 dw 3                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000FFA                 dw 3                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000FFC                 dw 3                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000FFE                 dw 1                    ; global symbol: _fini
LOAD:0000000000001000 ; ELF GNU Symbol Version Requirements
LOAD:0000000000001000                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_B50, 10h, 0> ; "libc.so.6"
LOAD:0000000000001010                 Elf64_Vernaux <9691974h, 0, 6, offset aGlibc234 - offset byte_B50, \ ; "GLIBC_2.3.4"
LOAD:0000000000001010                                10h>
LOAD:0000000000001020                 Elf64_Vernaux <6969194h, 0, 5, offset aGlibc214 - offset byte_B50, \ ; "GLIBC_2.14"
LOAD:0000000000001020                                10h>
LOAD:0000000000001030                 Elf64_Vernaux <0D696914h, 0, 4, offset aGlibc24 - offset byte_B50, \ ; "GLIBC_2.4"
LOAD:0000000000001030                                10h>
LOAD:0000000000001040                 Elf64_Vernaux <9691A75h, 0, 3, offset aGlibc225 - offset byte_B50, \ ; "GLIBC_2.2.5"
LOAD:0000000000001040                                10h>
LOAD:0000000000001050                 Elf64_Vernaux <0D696913h, 0, 2, offset aGlibc23 - offset byte_B50, 0> ; "GLIBC_2.3"
LOAD:0000000000001060 ; ELF RELA Relocation Table
LOAD:0000000000001060                 Elf64_Rela <21AAB0h, 8, 20D0h> ; R_X86_64_RELATIVE +20D0h
LOAD:0000000000001078                 Elf64_Rela <21AAB8h, 8, 2090h> ; R_X86_64_RELATIVE +2090h
LOAD:0000000000001090                 Elf64_Rela <21AAC0h, 8, 16186h> ; R_X86_64_RELATIVE +16186h
LOAD:00000000000010A8                 Elf64_Rela <21AAE0h, 8, 1618Bh> ; R_X86_64_RELATIVE +1618Bh
LOAD:00000000000010C0                 Elf64_Rela <21AB20h, 8, 1624Fh> ; R_X86_64_RELATIVE +1624Fh
LOAD:00000000000010D8                 Elf64_Rela <21AB28h, 8, 16257h> ; R_X86_64_RELATIVE +16257h
LOAD:00000000000010F0                 Elf64_Rela <21AB30h, 8, 1625Dh> ; R_X86_64_RELATIVE +1625Dh
LOAD:0000000000001108                 Elf64_Rela <21AB38h, 8, 1626Ah> ; R_X86_64_RELATIVE +1626Ah
LOAD:0000000000001120                 Elf64_Rela <21AB40h, 8, 16277h> ; R_X86_64_RELATIVE +16277h
LOAD:0000000000001138                 Elf64_Rela <21AB48h, 8, 1628Bh> ; R_X86_64_RELATIVE +1628Bh
LOAD:0000000000001150                 Elf64_Rela <21AB50h, 8, 1628Dh> ; R_X86_64_RELATIVE +1628Dh
LOAD:0000000000001168                 Elf64_Rela <21AB58h, 8, 16270h> ; R_X86_64_RELATIVE +16270h
LOAD:0000000000001180                 Elf64_Rela <21AB60h, 8, 160F1h> ; R_X86_64_RELATIVE +160F1h
LOAD:0000000000001198                 Elf64_Rela <21AB68h, 8, 16295h> ; R_X86_64_RELATIVE +16295h
LOAD:00000000000011B0                 Elf64_Rela <21B008h, 8, 21B008h> ; R_X86_64_RELATIVE +21B008h
LOAD:00000000000011C8                 Elf64_Rela <21B060h, 8, 21B070h> ; R_X86_64_RELATIVE +21B070h
LOAD:00000000000011E0                 Elf64_Rela <21B078h, 8, 21B100h> ; R_X86_64_RELATIVE +21B100h
LOAD:00000000000011F8                 Elf64_Rela <21AF98h, 500000006h, 0> ; R_X86_64_GLOB_DAT __gmpz_tdiv_q
LOAD:0000000000001210                 Elf64_Rela <21AFA0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000001228                 Elf64_Rela <21AFA8h, 0C00000006h, 0> ; R_X86_64_GLOB_DAT __gmpz_sub
LOAD:0000000000001240                 Elf64_Rela <21AFB0h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __gmpz_mul
LOAD:0000000000001258                 Elf64_Rela <21AFB8h, 2200000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000001270                 Elf64_Rela <21AFC0h, 2800000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000001288                 Elf64_Rela <21AFC8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT __gmpz_tdiv_r
LOAD:00000000000012A0                 Elf64_Rela <21AFD0h, 3E00000006h, 0> ; R_X86_64_GLOB_DAT __gmpz_add
LOAD:00000000000012B8                 Elf64_Rela <21AFD8h, 4600000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000000000012D0                 Elf64_Rela <21AFE0h, 4900000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:00000000000012E8                 Elf64_Rela <21B080h, 4F00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000001300                 Elf64_Rela <21B088h, 4C00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000001318                 Elf64_Rela <21B090h, 5700000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000001330                 Elf64_Rela <21B098h, 5200000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000001348                 Elf64_Rela <21B0A0h, 5500000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000001360                 Elf64_Rela <21B0C0h, 5600000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000001378 ; ELF JMPREL Relocation Table
LOAD:0000000000001378                 Elf64_Rela <21AD90h, 100000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_toupper_loc
LOAD:0000000000001390                 Elf64_Rela <21AD98h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:00000000000013A8                 Elf64_Rela <21ADA0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:00000000000013C0                 Elf64_Rela <21ADA8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:00000000000013D8                 Elf64_Rela <21ADB0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:00000000000013F0                 Elf64_Rela <21ADB8h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000001408                 Elf64_Rela <21ADC0h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000001420                 Elf64_Rela <21ADC8h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT puts
LOAD:0000000000001438                 Elf64_Rela <21ADD0h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT iswcntrl
LOAD:0000000000001450                 Elf64_Rela <21ADD8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001468                 Elf64_Rela <21ADE0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT iswctype
LOAD:0000000000001480                 Elf64_Rela <21ADE8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001498                 Elf64_Rela <21ADF0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:00000000000014B0                 Elf64_Rela <21ADF8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:00000000000014C8                 Elf64_Rela <21AE00h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:00000000000014E0                 Elf64_Rela <21AE08h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:00000000000014F8                 Elf64_Rela <21AE10h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT __gmpz_get_str
LOAD:0000000000001510                 Elf64_Rela <21AE18h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000001528                 Elf64_Rela <21AE20h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000001540                 Elf64_Rela <21AE28h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000001558                 Elf64_Rela <21AE30h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT strchr
LOAD:0000000000001570                 Elf64_Rela <21AE38h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:0000000000001588                 Elf64_Rela <21AE40h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:00000000000015A0                 Elf64_Rela <21AE48h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:00000000000015B8                 Elf64_Rela <21AE50h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT __gmpz_out_str
LOAD:00000000000015D0                 Elf64_Rela <21AE58h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __assert_fail
LOAD:00000000000015E8                 Elf64_Rela <21AE60h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001600                 Elf64_Rela <21AE68h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT strcspn
LOAD:0000000000001618                 Elf64_Rela <21AE70h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT memchr
LOAD:0000000000001630                 Elf64_Rela <21AE78h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001648                 Elf64_Rela <21AE80h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT wctype
LOAD:0000000000001660                 Elf64_Rela <21AE88h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001678                 Elf64_Rela <21AE90h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001690                 Elf64_Rela <21AE98h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:00000000000016A8                 Elf64_Rela <21AEA0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000016C0                 Elf64_Rela <21AEA8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000016D8                 Elf64_Rela <21AEB0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT wcwidth
LOAD:00000000000016F0                 Elf64_Rela <21AEB8h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT iswalnum
LOAD:0000000000001708                 Elf64_Rela <21AEC0h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001720                 Elf64_Rela <21AEC8h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT wcrtomb
LOAD:0000000000001738                 Elf64_Rela <21AED0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001750                 Elf64_Rela <21AED8h, 3100000007h, 0> ; R_X86_64_JUMP_SLOT __gmpz_clear
LOAD:0000000000001768                 Elf64_Rela <21AEE0h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001780                 Elf64_Rela <21AEE8h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT strcoll
LOAD:0000000000001798                 Elf64_Rela <21AEF0h, 3400000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000017B0                 Elf64_Rela <21AEF8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000017C8                 Elf64_Rela <21AF00h, 3600000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:00000000000017E0                 Elf64_Rela <21AF08h, 3700000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000017F8                 Elf64_Rela <21AF10h, 3800000007h, 0> ; R_X86_64_JUMP_SLOT __gmpz_init_set_ui
LOAD:0000000000001810                 Elf64_Rela <21AF18h, 3900000007h, 0> ; R_X86_64_JUMP_SLOT btowc
LOAD:0000000000001828                 Elf64_Rela <21AF20h, 3A00000007h, 0> ; R_X86_64_JUMP_SLOT mempcpy
LOAD:0000000000001840                 Elf64_Rela <21AF28h, 3B00000007h, 0> ; R_X86_64_JUMP_SLOT memmove
LOAD:0000000000001858                 Elf64_Rela <21AF30h, 3C00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001870                 Elf64_Rela <21AF38h, 3D00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001888                 Elf64_Rela <21AF40h, 3F00000007h, 0> ; R_X86_64_JUMP_SLOT towlower
LOAD:00000000000018A0                 Elf64_Rela <21AF48h, 4000000007h, 0> ; R_X86_64_JUMP_SLOT towupper
LOAD:00000000000018B8                 Elf64_Rela <21AF50h, 4100000007h, 0> ; R_X86_64_JUMP_SLOT __gmpz_init_set_str
LOAD:00000000000018D0                 Elf64_Rela <21AF58h, 4200000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:00000000000018E8                 Elf64_Rela <21AF60h, 4300000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001900                 Elf64_Rela <21AF68h, 4400000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001918                 Elf64_Rela <21AF70h, 4500000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001930                 Elf64_Rela <21AF78h, 4700000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001948                 Elf64_Rela <21AF80h, 4800000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001960                 Elf64_Rela <21AF88h, 4A00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_tolower_loc
LOAD:0000000000001978                 Elf64_Rela <21AF90h, 4B00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001978 LOAD            ends
LOAD:0000000000001978
.init:0000000000001990 ; ===========================================================================
.init:0000000000001990
.init:0000000000001990 ; Segment type: Pure code
.init:0000000000001990 ; Segment permissions: Read/Execute
.init:0000000000001990 _init           segment dword public 'CODE' use64
.init:0000000000001990                 assume cs:_init
.init:0000000000001990                 ;org 1990h
.init:0000000000001990                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001990
.init:0000000000001990 ; =============== S U B R O U T I N E =======================================
.init:0000000000001990
.init:0000000000001990
.init:0000000000001990                 public _init_proc
.init:0000000000001990 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001990                                         ; DATA XREF: LOAD:0000000000000AD8↑o
.init:0000000000001990                 sub     rsp, 8          ; _init
.init:0000000000001994                 mov     rax, cs:__gmon_start___ptr
.init:000000000000199B                 test    rax, rax
.init:000000000000199E                 jz      short loc_19A2
.init:00000000000019A0                 call    rax ; __gmon_start__
.init:00000000000019A2
.init:00000000000019A2 loc_19A2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000019A2                 add     rsp, 8
.init:00000000000019A6                 retn
.init:00000000000019A6 _init_proc      endp
.init:00000000000019A6
.init:00000000000019A6 _init           ends
.init:00000000000019A6
LOAD:00000000000019A7 ; ===========================================================================
LOAD:00000000000019A7
LOAD:00000000000019A7 ; Segment type: Pure code
LOAD:00000000000019A7 ; Segment permissions: Read/Execute
LOAD:00000000000019A7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000019A7                 assume cs:LOAD
LOAD:00000000000019A7                 ;org 19A7h
LOAD:00000000000019A7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000019A7                 align 10h
LOAD:00000000000019A7 LOAD            ends
LOAD:00000000000019A7
.plt:00000000000019B0 ; ===========================================================================
.plt:00000000000019B0
.plt:00000000000019B0 ; Segment type: Pure code
.plt:00000000000019B0 ; Segment permissions: Read/Execute
.plt:00000000000019B0 _plt            segment para public 'CODE' use64
.plt:00000000000019B0                 assume cs:_plt
.plt:00000000000019B0                 ;org 19B0h
.plt:00000000000019B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000019B0
.plt:00000000000019B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019B0
.plt:00000000000019B0
.plt:00000000000019B0 sub_19B0        proc near               ; CODE XREF: .plt:00000000000019CB↓j
.plt:00000000000019B0                                         ; .plt:00000000000019DB↓j ...
.plt:00000000000019B0 ; __unwind {
.plt:00000000000019B0                 push    cs:qword_21AD80
.plt:00000000000019B6                 jmp     cs:qword_21AD88
.plt:00000000000019B6 sub_19B0        endp
.plt:00000000000019B6
.plt:00000000000019B6 ; ---------------------------------------------------------------------------
.plt:00000000000019BC                 align 20h
.plt:00000000000019C0
.plt:00000000000019C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019C0
.plt:00000000000019C0 ; Attributes: thunk
.plt:00000000000019C0
.plt:00000000000019C0 ; const __int32_t **__ctype_toupper_loc(void)
.plt:00000000000019C0 ___ctype_toupper_loc proc near          ; CODE XREF: build_upper_buffer+1D↓p
.plt:00000000000019C0                                         ; build_wcs_upper_buffer:loc_7E38↓p
.plt:00000000000019C0                 jmp     cs:__ctype_toupper_loc_ptr
.plt:00000000000019C0 ___ctype_toupper_loc endp
.plt:00000000000019C0
.plt:00000000000019C6 ; ---------------------------------------------------------------------------
.plt:00000000000019C6                 push    0
.plt:00000000000019CB                 jmp     sub_19B0
.plt:00000000000019D0
.plt:00000000000019D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019D0
.plt:00000000000019D0 ; Attributes: thunk
.plt:00000000000019D0
.plt:00000000000019D0 ; void free(void *ptr)
.plt:00000000000019D0 _free           proc near               ; CODE XREF: freev+16↓j
.plt:00000000000019D0                                         ; freev+24↓p ...
.plt:00000000000019D0                 jmp     cs:free_ptr
.plt:00000000000019D0 _free           endp
.plt:00000000000019D0
.plt:00000000000019D6 ; ---------------------------------------------------------------------------
.plt:00000000000019D6                 push    1
.plt:00000000000019DB                 jmp     sub_19B0
.plt:00000000000019E0
.plt:00000000000019E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019E0
.plt:00000000000019E0 ; Attributes: noreturn thunk
.plt:00000000000019E0
.plt:00000000000019E0 ; void __noreturn abort(void)
.plt:00000000000019E0 _abort          proc near               ; CODE XREF: main:loc_1F65↓p
.plt:00000000000019E0                                         ; null+62↓p ...
.plt:00000000000019E0                 jmp     cs:abort_ptr
.plt:00000000000019E0 _abort          endp
.plt:00000000000019E0
.plt:00000000000019E6 ; ---------------------------------------------------------------------------
.plt:00000000000019E6                 push    2
.plt:00000000000019EB                 jmp     sub_19B0
.plt:00000000000019F0
.plt:00000000000019F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000019F0
.plt:00000000000019F0 ; Attributes: thunk
.plt:00000000000019F0
.plt:00000000000019F0 ; int *__errno_location(void)
.plt:00000000000019F0 ___errno_location proc near             ; CODE XREF: docolon:loc_2C4A↓p
.plt:00000000000019F0                                         ; eval2:loc_3BAF↓p ...
.plt:00000000000019F0                 jmp     cs:__errno_location_ptr
.plt:00000000000019F0 ___errno_location endp
.plt:00000000000019F0
.plt:00000000000019F6 ; ---------------------------------------------------------------------------
.plt:00000000000019F6                 push    3
.plt:00000000000019FB                 jmp     sub_19B0
.plt:0000000000001A00
.plt:0000000000001A00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A00
.plt:0000000000001A00 ; Attributes: thunk
.plt:0000000000001A00
.plt:0000000000001A00 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001A00 _strncmp        proc near               ; CODE XREF: usage+32C↓p
.plt:0000000000001A00                                         ; usage+429↓p
.plt:0000000000001A00                 jmp     cs:strncmp_ptr
.plt:0000000000001A00 _strncmp        endp
.plt:0000000000001A00
.plt:0000000000001A06 ; ---------------------------------------------------------------------------
.plt:0000000000001A06                 push    4
.plt:0000000000001A0B                 jmp     sub_19B0
.plt:0000000000001A10
.plt:0000000000001A10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A10
.plt:0000000000001A10 ; Attributes: noreturn thunk
.plt:0000000000001A10
.plt:0000000000001A10 ; void __noreturn _exit(int status)
.plt:0000000000001A10 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001A10                 jmp     cs:_exit_ptr
.plt:0000000000001A10 __exit          endp
.plt:0000000000001A10
.plt:0000000000001A16 ; ---------------------------------------------------------------------------
.plt:0000000000001A16                 push    5
.plt:0000000000001A1B                 jmp     sub_19B0
.plt:0000000000001A20
.plt:0000000000001A20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A20
.plt:0000000000001A20 ; Attributes: thunk
.plt:0000000000001A20
.plt:0000000000001A20 ; size_t __fpending(FILE *fp)
.plt:0000000000001A20 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001A20                 jmp     cs:__fpending_ptr
.plt:0000000000001A20 ___fpending     endp
.plt:0000000000001A20
.plt:0000000000001A26 ; ---------------------------------------------------------------------------
.plt:0000000000001A26                 push    6
.plt:0000000000001A2B                 jmp     sub_19B0
.plt:0000000000001A30
.plt:0000000000001A30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A30
.plt:0000000000001A30 ; Attributes: thunk
.plt:0000000000001A30
.plt:0000000000001A30 ; int puts(const char *s)
.plt:0000000000001A30 _puts           proc near               ; CODE XREF: main+FF↓p
.plt:0000000000001A30                 jmp     cs:puts_ptr
.plt:0000000000001A30 _puts           endp
.plt:0000000000001A30
.plt:0000000000001A36 ; ---------------------------------------------------------------------------
.plt:0000000000001A36                 push    7
.plt:0000000000001A3B                 jmp     sub_19B0
.plt:0000000000001A40
.plt:0000000000001A40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A40
.plt:0000000000001A40 ; Attributes: thunk
.plt:0000000000001A40
.plt:0000000000001A40 ; int iswcntrl(wint_t wc)
.plt:0000000000001A40 _iswcntrl       proc near               ; CODE XREF: mb_width_aux+12↓p
.plt:0000000000001A40                 jmp     cs:iswcntrl_ptr
.plt:0000000000001A40 _iswcntrl       endp
.plt:0000000000001A40
.plt:0000000000001A46 ; ---------------------------------------------------------------------------
.plt:0000000000001A46                 push    8
.plt:0000000000001A4B                 jmp     sub_19B0
.plt:0000000000001A50
.plt:0000000000001A50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A50
.plt:0000000000001A50 ; Attributes: thunk
.plt:0000000000001A50
.plt:0000000000001A50 ; char *textdomain(const char *domainname)
.plt:0000000000001A50 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001A50                 jmp     cs:textdomain_ptr
.plt:0000000000001A50 _textdomain     endp
.plt:0000000000001A50
.plt:0000000000001A56 ; ---------------------------------------------------------------------------
.plt:0000000000001A56                 push    9
.plt:0000000000001A5B                 jmp     sub_19B0
.plt:0000000000001A60
.plt:0000000000001A60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A60
.plt:0000000000001A60 ; Attributes: thunk
.plt:0000000000001A60
.plt:0000000000001A60 ; int iswctype(wint_t wc, wctype_t desc)
.plt:0000000000001A60 _iswctype       proc near               ; CODE XREF: check_node_accept_bytes_isra_31+D9↓p
.plt:0000000000001A60                 jmp     cs:iswctype_ptr
.plt:0000000000001A60 _iswctype       endp
.plt:0000000000001A60
.plt:0000000000001A66 ; ---------------------------------------------------------------------------
.plt:0000000000001A66                 push    0Ah
.plt:0000000000001A6B                 jmp     sub_19B0
.plt:0000000000001A70
.plt:0000000000001A70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A70
.plt:0000000000001A70 ; Attributes: thunk
.plt:0000000000001A70
.plt:0000000000001A70 ; int fclose(FILE *stream)
.plt:0000000000001A70 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001A70                                         ; rpl_fclose+6B↓j
.plt:0000000000001A70                 jmp     cs:fclose_ptr
.plt:0000000000001A70 _fclose         endp
.plt:0000000000001A70
.plt:0000000000001A76 ; ---------------------------------------------------------------------------
.plt:0000000000001A76                 push    0Bh
.plt:0000000000001A7B                 jmp     sub_19B0
.plt:0000000000001A80
.plt:0000000000001A80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A80
.plt:0000000000001A80 ; Attributes: thunk
.plt:0000000000001A80
.plt:0000000000001A80 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001A80 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:0000000000001A80                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001A80 _bindtextdomain endp
.plt:0000000000001A80
.plt:0000000000001A86 ; ---------------------------------------------------------------------------
.plt:0000000000001A86                 push    0Ch
.plt:0000000000001A8B                 jmp     sub_19B0
.plt:0000000000001A90
.plt:0000000000001A90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001A90
.plt:0000000000001A90 ; Attributes: thunk
.plt:0000000000001A90
.plt:0000000000001A90 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001A90 _dcgettext      proc near               ; CODE XREF: main+177↓p
.plt:0000000000001A90                                         ; main+19E↓p ...
.plt:0000000000001A90                 jmp     cs:dcgettext_ptr
.plt:0000000000001A90 _dcgettext      endp
.plt:0000000000001A90
.plt:0000000000001A96 ; ---------------------------------------------------------------------------
.plt:0000000000001A96                 push    0Dh
.plt:0000000000001A9B                 jmp     sub_19B0
.plt:0000000000001AA0
.plt:0000000000001AA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AA0
.plt:0000000000001AA0 ; Attributes: thunk
.plt:0000000000001AA0
.plt:0000000000001AA0 ; size_t __ctype_get_mb_cur_max(void)
.plt:0000000000001AA0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: docolon:loc_2920↓p
.plt:0000000000001AA0                                         ; docolon:loc_2A73↓p ...
.plt:0000000000001AA0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:0000000000001AA0 ___ctype_get_mb_cur_max endp
.plt:0000000000001AA0
.plt:0000000000001AA6 ; ---------------------------------------------------------------------------
.plt:0000000000001AA6                 push    0Eh
.plt:0000000000001AAB                 jmp     sub_19B0
.plt:0000000000001AB0
.plt:0000000000001AB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AB0
.plt:0000000000001AB0 ; Attributes: thunk
.plt:0000000000001AB0
.plt:0000000000001AB0 ; size_t strlen(const char *s)
.plt:0000000000001AB0 _strlen         proc near               ; CODE XREF: docolon+91↓p
.plt:0000000000001AB0                                         ; docolon+B9↓p ...
.plt:0000000000001AB0                 jmp     cs:strlen_ptr
.plt:0000000000001AB0 _strlen         endp
.plt:0000000000001AB0
.plt:0000000000001AB6 ; ---------------------------------------------------------------------------
.plt:0000000000001AB6                 push    0Fh
.plt:0000000000001ABB                 jmp     sub_19B0
.plt:0000000000001AC0
.plt:0000000000001AC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AC0
.plt:0000000000001AC0 ; Attributes: thunk
.plt:0000000000001AC0
.plt:0000000000001AC0 ___gmpz_get_str proc near               ; CODE XREF: tostring+29↓p
.plt:0000000000001AC0                 jmp     cs:__gmpz_get_str_ptr
.plt:0000000000001AC0 ___gmpz_get_str endp
.plt:0000000000001AC0
.plt:0000000000001AC6 ; ---------------------------------------------------------------------------
.plt:0000000000001AC6                 push    10h
.plt:0000000000001ACB                 jmp     sub_19B0
.plt:0000000000001AD0
.plt:0000000000001AD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AD0
.plt:0000000000001AD0 ; Attributes: noreturn thunk
.plt:0000000000001AD0
.plt:0000000000001AD0 ___stack_chk_fail proc near             ; CODE XREF: docolon:loc_2BD2↓p
.plt:0000000000001AD0                                         ; eval6:loc_3780↓p ...
.plt:0000000000001AD0                 jmp     cs:__stack_chk_fail_ptr
.plt:0000000000001AD0 ___stack_chk_fail endp
.plt:0000000000001AD0
.plt:0000000000001AD6 ; ---------------------------------------------------------------------------
.plt:0000000000001AD6                 push    11h
.plt:0000000000001ADB                 jmp     sub_19B0
.plt:0000000000001AE0
.plt:0000000000001AE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AE0
.plt:0000000000001AE0 ; Attributes: thunk
.plt:0000000000001AE0
.plt:0000000000001AE0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001AE0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:0000000000001AE0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:0000000000001AE0                 jmp     cs:getopt_long_ptr
.plt:0000000000001AE0 _getopt_long    endp
.plt:0000000000001AE0
.plt:0000000000001AE6 ; ---------------------------------------------------------------------------
.plt:0000000000001AE6                 push    12h
.plt:0000000000001AEB                 jmp     sub_19B0
.plt:0000000000001AF0
.plt:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001AF0
.plt:0000000000001AF0 ; Attributes: thunk
.plt:0000000000001AF0
.plt:0000000000001AF0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001AF0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001AF0                 jmp     cs:mbrtowc_ptr
.plt:0000000000001AF0 _mbrtowc        endp
.plt:0000000000001AF0
.plt:0000000000001AF6 ; ---------------------------------------------------------------------------
.plt:0000000000001AF6                 push    13h
.plt:0000000000001AFB                 jmp     sub_19B0
.plt:0000000000001B00
.plt:0000000000001B00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B00
.plt:0000000000001B00 ; Attributes: thunk
.plt:0000000000001B00
.plt:0000000000001B00 ; char *strchr(const char *s, int c)
.plt:0000000000001B00 _strchr         proc near               ; CODE XREF: mbschr+58↓j
.plt:0000000000001B00                 jmp     cs:strchr_ptr
.plt:0000000000001B00 _strchr         endp
.plt:0000000000001B00
.plt:0000000000001B06 ; ---------------------------------------------------------------------------
.plt:0000000000001B06                 push    14h
.plt:0000000000001B0B                 jmp     sub_19B0
.plt:0000000000001B10
.plt:0000000000001B10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B10
.plt:0000000000001B10 ; Attributes: thunk
.plt:0000000000001B10
.plt:0000000000001B10 ; int __overflow(_IO_FILE *, int)
.plt:0000000000001B10 ___overflow     proc near               ; CODE XREF: main+14E↓p
.plt:0000000000001B10                                         ; usage+3DD↓p
.plt:0000000000001B10                 jmp     cs:__overflow_ptr
.plt:0000000000001B10 ___overflow     endp
.plt:0000000000001B10
.plt:0000000000001B16 ; ---------------------------------------------------------------------------
.plt:0000000000001B16                 push    15h
.plt:0000000000001B1B                 jmp     sub_19B0
.plt:0000000000001B20
.plt:0000000000001B20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B20
.plt:0000000000001B20 ; Attributes: thunk
.plt:0000000000001B20
.plt:0000000000001B20 ; char *strrchr(const char *s, int c)
.plt:0000000000001B20 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001B20                 jmp     cs:strrchr_ptr
.plt:0000000000001B20 _strrchr        endp
.plt:0000000000001B20
.plt:0000000000001B26 ; ---------------------------------------------------------------------------
.plt:0000000000001B26                 push    16h
.plt:0000000000001B2B                 jmp     sub_19B0
.plt:0000000000001B30
.plt:0000000000001B30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B30
.plt:0000000000001B30 ; Attributes: thunk
.plt:0000000000001B30
.plt:0000000000001B30 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001B30 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001B30                                         ; rpl_fseeko+3B↓p
.plt:0000000000001B30                 jmp     cs:lseek_ptr
.plt:0000000000001B30 _lseek          endp
.plt:0000000000001B30
.plt:0000000000001B36 ; ---------------------------------------------------------------------------
.plt:0000000000001B36                 push    17h
.plt:0000000000001B3B                 jmp     sub_19B0
.plt:0000000000001B40
.plt:0000000000001B40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B40
.plt:0000000000001B40 ; Attributes: thunk
.plt:0000000000001B40
.plt:0000000000001B40 ___gmpz_out_str proc near               ; CODE XREF: main+126↓p
.plt:0000000000001B40                 jmp     cs:__gmpz_out_str_ptr
.plt:0000000000001B40 ___gmpz_out_str endp
.plt:0000000000001B40
.plt:0000000000001B46 ; ---------------------------------------------------------------------------
.plt:0000000000001B46                 push    18h
.plt:0000000000001B4B                 jmp     sub_19B0
.plt:0000000000001B50
.plt:0000000000001B50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B50
.plt:0000000000001B50 ; Attributes: noreturn thunk
.plt:0000000000001B50
.plt:0000000000001B50 ; void __noreturn __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:0000000000001B50 ___assert_fail  proc near               ; CODE XREF: mbuiter_multi_next_part_2+1E↓p
.plt:0000000000001B50                                         ; docolon+441↓p ...
.plt:0000000000001B50                 jmp     cs:__assert_fail_ptr
.plt:0000000000001B50 ___assert_fail  endp
.plt:0000000000001B50
.plt:0000000000001B56 ; ---------------------------------------------------------------------------
.plt:0000000000001B56                 push    19h
.plt:0000000000001B5B                 jmp     sub_19B0
.plt:0000000000001B60
.plt:0000000000001B60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B60
.plt:0000000000001B60 ; Attributes: thunk
.plt:0000000000001B60
.plt:0000000000001B60 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001B60 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001B60                                         ; xzalloc+12↓j ...
.plt:0000000000001B60                 jmp     cs:memset_ptr
.plt:0000000000001B60 _memset         endp
.plt:0000000000001B60
.plt:0000000000001B66 ; ---------------------------------------------------------------------------
.plt:0000000000001B66                 push    1Ah
.plt:0000000000001B6B                 jmp     sub_19B0
.plt:0000000000001B70
.plt:0000000000001B70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B70
.plt:0000000000001B70 ; Attributes: thunk
.plt:0000000000001B70
.plt:0000000000001B70 ; size_t strcspn(const char *s, const char *reject)
.plt:0000000000001B70 _strcspn        proc near               ; CODE XREF: eval6+3F6↓p
.plt:0000000000001B70                 jmp     cs:strcspn_ptr
.plt:0000000000001B70 _strcspn        endp
.plt:0000000000001B70
.plt:0000000000001B76 ; ---------------------------------------------------------------------------
.plt:0000000000001B76                 push    1Bh
.plt:0000000000001B7B                 jmp     sub_19B0
.plt:0000000000001B80
.plt:0000000000001B80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B80
.plt:0000000000001B80 ; Attributes: thunk
.plt:0000000000001B80
.plt:0000000000001B80 ; void *memchr(const void *s, int c, size_t n)
.plt:0000000000001B80 _memchr         proc near               ; CODE XREF: strnlen1+11↓p
.plt:0000000000001B80                 jmp     cs:memchr_ptr
.plt:0000000000001B80 _memchr         endp
.plt:0000000000001B80
.plt:0000000000001B86 ; ---------------------------------------------------------------------------
.plt:0000000000001B86                 push    1Ch
.plt:0000000000001B8B                 jmp     sub_19B0
.plt:0000000000001B90
.plt:0000000000001B90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001B90
.plt:0000000000001B90 ; Attributes: thunk
.plt:0000000000001B90
.plt:0000000000001B90 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001B90 _memcmp         proc near               ; CODE XREF: eval6+71C↓p
.plt:0000000000001B90                                         ; quotearg_buffer_restyled+19A↓p ...
.plt:0000000000001B90                 jmp     cs:memcmp_ptr
.plt:0000000000001B90 _memcmp         endp
.plt:0000000000001B90
.plt:0000000000001B96 ; ---------------------------------------------------------------------------
.plt:0000000000001B96                 push    1Dh
.plt:0000000000001B9B                 jmp     sub_19B0
.plt:0000000000001BA0
.plt:0000000000001BA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BA0
.plt:0000000000001BA0 ; Attributes: thunk
.plt:0000000000001BA0
.plt:0000000000001BA0 ; wctype_t wctype(const char *property)
.plt:0000000000001BA0 _wctype         proc near               ; CODE XREF: build_charclass_isra_29+67↓p
.plt:0000000000001BA0                 jmp     cs:wctype_ptr
.plt:0000000000001BA0 _wctype         endp
.plt:0000000000001BA0
.plt:0000000000001BA6 ; ---------------------------------------------------------------------------
.plt:0000000000001BA6                 push    1Eh
.plt:0000000000001BAB                 jmp     sub_19B0
.plt:0000000000001BB0
.plt:0000000000001BB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BB0
.plt:0000000000001BB0 ; Attributes: thunk
.plt:0000000000001BB0
.plt:0000000000001BB0 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001BB0 _fputs_unlocked proc near               ; CODE XREF: usage+C0↓p
.plt:0000000000001BB0                                         ; usage+E5↓p ...
.plt:0000000000001BB0                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001BB0 _fputs_unlocked endp
.plt:0000000000001BB0
.plt:0000000000001BB6 ; ---------------------------------------------------------------------------
.plt:0000000000001BB6                 push    1Fh
.plt:0000000000001BBB                 jmp     sub_19B0
.plt:0000000000001BC0
.plt:0000000000001BC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BC0
.plt:0000000000001BC0 ; Attributes: thunk
.plt:0000000000001BC0
.plt:0000000000001BC0 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001BC0 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001BC0                                         ; re_acquire_state_context+CA↓p ...
.plt:0000000000001BC0                 jmp     cs:calloc_ptr
.plt:0000000000001BC0 _calloc         endp
.plt:0000000000001BC0
.plt:0000000000001BC6 ; ---------------------------------------------------------------------------
.plt:0000000000001BC6                 push    20h ; ' '
.plt:0000000000001BCB                 jmp     sub_19B0
.plt:0000000000001BD0
.plt:0000000000001BD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BD0
.plt:0000000000001BD0 ; Attributes: thunk
.plt:0000000000001BD0
.plt:0000000000001BD0 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001BD0 _strcmp         proc near               ; CODE XREF: main+B3↓p
.plt:0000000000001BD0                                         ; nextarg+15↓p ...
.plt:0000000000001BD0                 jmp     cs:strcmp_ptr
.plt:0000000000001BD0 _strcmp         endp
.plt:0000000000001BD0
.plt:0000000000001BD6 ; ---------------------------------------------------------------------------
.plt:0000000000001BD6                 push    21h ; '!'
.plt:0000000000001BDB                 jmp     sub_19B0
.plt:0000000000001BE0
.plt:0000000000001BE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BE0
.plt:0000000000001BE0 ; Attributes: thunk
.plt:0000000000001BE0
.plt:0000000000001BE0 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001BE0 _memcpy         proc near               ; CODE XREF: mb_copy+47↓p
.plt:0000000000001BE0                                         ; xmemdup+23↓j ...
.plt:0000000000001BE0                 jmp     cs:memcpy_ptr
.plt:0000000000001BE0 _memcpy         endp
.plt:0000000000001BE0
.plt:0000000000001BE6 ; ---------------------------------------------------------------------------
.plt:0000000000001BE6                 push    22h ; '"'
.plt:0000000000001BEB                 jmp     sub_19B0
.plt:0000000000001BF0
.plt:0000000000001BF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001BF0
.plt:0000000000001BF0 ; Attributes: thunk
.plt:0000000000001BF0
.plt:0000000000001BF0 ; int fileno(FILE *stream)
.plt:0000000000001BF0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001BF0                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001BF0                 jmp     cs:fileno_ptr
.plt:0000000000001BF0 _fileno         endp
.plt:0000000000001BF0
.plt:0000000000001BF6 ; ---------------------------------------------------------------------------
.plt:0000000000001BF6                 push    23h ; '#'
.plt:0000000000001BFB                 jmp     sub_19B0
.plt:0000000000001C00
.plt:0000000000001C00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C00
.plt:0000000000001C00 ; Attributes: thunk
.plt:0000000000001C00
.plt:0000000000001C00 ; int wcwidth(wchar_t c)
.plt:0000000000001C00 _wcwidth        proc near               ; CODE XREF: mb_width_aux+3↓p
.plt:0000000000001C00                 jmp     cs:wcwidth_ptr
.plt:0000000000001C00 _wcwidth        endp
.plt:0000000000001C00
.plt:0000000000001C06 ; ---------------------------------------------------------------------------
.plt:0000000000001C06                 push    24h ; '$'
.plt:0000000000001C0B                 jmp     sub_19B0
.plt:0000000000001C10
.plt:0000000000001C10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C10
.plt:0000000000001C10 ; Attributes: thunk
.plt:0000000000001C10
.plt:0000000000001C10 ; int iswalnum(wint_t wc)
.plt:0000000000001C10 _iswalnum       proc near               ; CODE XREF: re_string_context_at+CA↓p
.plt:0000000000001C10                                         ; re_string_reconstruct+6FE↓p ...
.plt:0000000000001C10                 jmp     cs:iswalnum_ptr
.plt:0000000000001C10 _iswalnum       endp
.plt:0000000000001C10
.plt:0000000000001C16 ; ---------------------------------------------------------------------------
.plt:0000000000001C16                 push    25h ; '%'
.plt:0000000000001C1B                 jmp     sub_19B0
.plt:0000000000001C20
.plt:0000000000001C20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C20
.plt:0000000000001C20 ; Attributes: thunk
.plt:0000000000001C20
.plt:0000000000001C20 ; void *malloc(size_t size)
.plt:0000000000001C20 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:0000000000001C20                                         ; re_node_set_insert+4C↓p ...
.plt:0000000000001C20                 jmp     cs:malloc_ptr
.plt:0000000000001C20 _malloc         endp
.plt:0000000000001C20
.plt:0000000000001C26 ; ---------------------------------------------------------------------------
.plt:0000000000001C26                 push    26h ; '&'
.plt:0000000000001C2B                 jmp     sub_19B0
.plt:0000000000001C30
.plt:0000000000001C30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C30
.plt:0000000000001C30 ; Attributes: thunk
.plt:0000000000001C30
.plt:0000000000001C30 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
.plt:0000000000001C30 _wcrtomb        proc near               ; CODE XREF: build_wcs_upper_buffer+139↓p
.plt:0000000000001C30                                         ; build_wcs_upper_buffer+29C↓p ...
.plt:0000000000001C30                 jmp     cs:wcrtomb_ptr
.plt:0000000000001C30 _wcrtomb        endp
.plt:0000000000001C30
.plt:0000000000001C36 ; ---------------------------------------------------------------------------
.plt:0000000000001C36                 push    27h ; '''
.plt:0000000000001C3B                 jmp     sub_19B0
.plt:0000000000001C40
.plt:0000000000001C40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C40
.plt:0000000000001C40 ; Attributes: thunk
.plt:0000000000001C40
.plt:0000000000001C40 ; int fflush(FILE *stream)
.plt:0000000000001C40 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:0000000000001C40                                         ; rpl_fflush+3B↓j
.plt:0000000000001C40                 jmp     cs:fflush_ptr
.plt:0000000000001C40 _fflush         endp
.plt:0000000000001C40
.plt:0000000000001C46 ; ---------------------------------------------------------------------------
.plt:0000000000001C46                 push    28h ; '('
.plt:0000000000001C4B                 jmp     sub_19B0
.plt:0000000000001C50
.plt:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C50
.plt:0000000000001C50 ; Attributes: thunk
.plt:0000000000001C50
.plt:0000000000001C50 ___gmpz_clear   proc near               ; CODE XREF: freev+D↓p
.plt:0000000000001C50                                         ; tostring+34↓p
.plt:0000000000001C50                 jmp     cs:__gmpz_clear_ptr
.plt:0000000000001C50 ___gmpz_clear   endp
.plt:0000000000001C50
.plt:0000000000001C56 ; ---------------------------------------------------------------------------
.plt:0000000000001C56                 push    29h ; ')'
.plt:0000000000001C5B                 jmp     sub_19B0
.plt:0000000000001C60
.plt:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C60
.plt:0000000000001C60 ; Attributes: thunk
.plt:0000000000001C60
.plt:0000000000001C60 ; char *nl_langinfo(nl_item item)
.plt:0000000000001C60 _nl_langinfo    proc near               ; CODE XREF: re_compile_internal+132↓p
.plt:0000000000001C60                                         ; locale_charset+9↓p
.plt:0000000000001C60                 jmp     cs:nl_langinfo_ptr
.plt:0000000000001C60 _nl_langinfo    endp
.plt:0000000000001C60
.plt:0000000000001C66 ; ---------------------------------------------------------------------------
.plt:0000000000001C66                 push    2Ah ; '*'
.plt:0000000000001C6B                 jmp     sub_19B0
.plt:0000000000001C70
.plt:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C70
.plt:0000000000001C70 ; Attributes: thunk
.plt:0000000000001C70
.plt:0000000000001C70 ; int strcoll(const char *s1, const char *s2)
.plt:0000000000001C70 _strcoll        proc near               ; CODE XREF: eval2+F2↓p
.plt:0000000000001C70                 jmp     cs:strcoll_ptr
.plt:0000000000001C70 _strcoll        endp
.plt:0000000000001C70
.plt:0000000000001C76 ; ---------------------------------------------------------------------------
.plt:0000000000001C76                 push    2Bh ; '+'
.plt:0000000000001C7B                 jmp     sub_19B0
.plt:0000000000001C80
.plt:0000000000001C80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C80
.plt:0000000000001C80 ; Attributes: thunk
.plt:0000000000001C80
.plt:0000000000001C80 ; int __freading(FILE *fp)
.plt:0000000000001C80 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:0000000000001C80                                         ; rpl_fflush+9↓p
.plt:0000000000001C80                 jmp     cs:__freading_ptr
.plt:0000000000001C80 ___freading     endp
.plt:0000000000001C80
.plt:0000000000001C86 ; ---------------------------------------------------------------------------
.plt:0000000000001C86                 push    2Ch ; ','
.plt:0000000000001C8B                 jmp     sub_19B0
.plt:0000000000001C90
.plt:0000000000001C90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001C90
.plt:0000000000001C90 ; Attributes: thunk
.plt:0000000000001C90
.plt:0000000000001C90 ; void *realloc(void *ptr, size_t size)
.plt:0000000000001C90 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:0000000000001C90                                         ; re_string_realloc_buffers+30↓p ...
.plt:0000000000001C90                 jmp     cs:realloc_ptr
.plt:0000000000001C90 _realloc        endp
.plt:0000000000001C90
.plt:0000000000001C96 ; ---------------------------------------------------------------------------
.plt:0000000000001C96                 push    2Dh ; '-'
.plt:0000000000001C9B                 jmp     sub_19B0
.plt:0000000000001CA0
.plt:0000000000001CA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CA0
.plt:0000000000001CA0 ; Attributes: thunk
.plt:0000000000001CA0
.plt:0000000000001CA0 ; char *setlocale(int category, const char *locale)
.plt:0000000000001CA0 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:0000000000001CA0                                         ; usage+313↓p ...
.plt:0000000000001CA0                 jmp     cs:setlocale_ptr
.plt:0000000000001CA0 _setlocale      endp
.plt:0000000000001CA0
.plt:0000000000001CA6 ; ---------------------------------------------------------------------------
.plt:0000000000001CA6                 push    2Eh ; '.'
.plt:0000000000001CAB                 jmp     sub_19B0
.plt:0000000000001CB0
.plt:0000000000001CB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CB0
.plt:0000000000001CB0 ; Attributes: thunk
.plt:0000000000001CB0
.plt:0000000000001CB0 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001CB0                                         ; usage+307↓p ...
.plt:0000000000001CB0                 jmp     cs:__printf_chk_ptr
.plt:0000000000001CB0 ___printf_chk   endp
.plt:0000000000001CB0
.plt:0000000000001CB6 ; ---------------------------------------------------------------------------
.plt:0000000000001CB6                 push    2Fh ; '/'
.plt:0000000000001CBB                 jmp     sub_19B0
.plt:0000000000001CC0
.plt:0000000000001CC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CC0
.plt:0000000000001CC0 ; Attributes: thunk
.plt:0000000000001CC0
.plt:0000000000001CC0 ___gmpz_init_set_ui proc near           ; CODE XREF: docolon+198↓p
.plt:0000000000001CC0                                         ; docolon+1E9↓p ...
.plt:0000000000001CC0                 jmp     cs:__gmpz_init_set_ui_ptr
.plt:0000000000001CC0 ___gmpz_init_set_ui endp
.plt:0000000000001CC0
.plt:0000000000001CC6 ; ---------------------------------------------------------------------------
.plt:0000000000001CC6                 push    30h ; '0'
.plt:0000000000001CCB                 jmp     sub_19B0
.plt:0000000000001CD0
.plt:0000000000001CD0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CD0
.plt:0000000000001CD0 ; Attributes: thunk
.plt:0000000000001CD0
.plt:0000000000001CD0 ; wint_t btowc(int c)
.plt:0000000000001CD0 _btowc          proc near               ; CODE XREF: parse_expression+F23↓p
.plt:0000000000001CD0                                         ; parse_expression+11F7↓p ...
.plt:0000000000001CD0                 jmp     cs:btowc_ptr
.plt:0000000000001CD0 _btowc          endp
.plt:0000000000001CD0
.plt:0000000000001CD6 ; ---------------------------------------------------------------------------
.plt:0000000000001CD6                 push    31h ; '1'
.plt:0000000000001CDB                 jmp     sub_19B0
.plt:0000000000001CE0
.plt:0000000000001CE0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CE0
.plt:0000000000001CE0 ; Attributes: thunk
.plt:0000000000001CE0
.plt:0000000000001CE0 ; void *mempcpy(void *dest, const void *src, size_t n)
.plt:0000000000001CE0 _mempcpy        proc near               ; CODE XREF: eval6+8F2↓p
.plt:0000000000001CE0                                         ; eval6+A21↓p
.plt:0000000000001CE0                 jmp     cs:mempcpy_ptr
.plt:0000000000001CE0 _mempcpy        endp
.plt:0000000000001CE0
.plt:0000000000001CE6 ; ---------------------------------------------------------------------------
.plt:0000000000001CE6                 push    32h ; '2'
.plt:0000000000001CEB                 jmp     sub_19B0
.plt:0000000000001CF0
.plt:0000000000001CF0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001CF0
.plt:0000000000001CF0 ; Attributes: thunk
.plt:0000000000001CF0
.plt:0000000000001CF0 ; void *memmove(void *dest, const void *src, size_t n)
.plt:0000000000001CF0 _memmove        proc near               ; CODE XREF: re_string_reconstruct+190↓p
.plt:0000000000001CF0                                         ; re_string_reconstruct+358↓p ...
.plt:0000000000001CF0                 jmp     cs:memmove_ptr
.plt:0000000000001CF0 _memmove        endp
.plt:0000000000001CF0
.plt:0000000000001CF6 ; ---------------------------------------------------------------------------
.plt:0000000000001CF6                 push    33h ; '3'
.plt:0000000000001CFB                 jmp     sub_19B0
.plt:0000000000001D00
.plt:0000000000001D00 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D00
.plt:0000000000001D00 ; Attributes: thunk
.plt:0000000000001D00
.plt:0000000000001D00 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001D00 _error          proc near               ; CODE XREF: main+18B↓p
.plt:0000000000001D00                                         ; main+1AC↓p ...
.plt:0000000000001D00                 jmp     cs:error_ptr
.plt:0000000000001D00 _error          endp
.plt:0000000000001D00
.plt:0000000000001D06 ; ---------------------------------------------------------------------------
.plt:0000000000001D06                 push    34h ; '4'
.plt:0000000000001D0B                 jmp     sub_19B0
.plt:0000000000001D10
.plt:0000000000001D10 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D10
.plt:0000000000001D10 ; Attributes: thunk
.plt:0000000000001D10
.plt:0000000000001D10 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001D10 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_154DA↓j
.plt:0000000000001D10                 jmp     cs:fseeko_ptr
.plt:0000000000001D10 _fseeko         endp
.plt:0000000000001D10
.plt:0000000000001D16 ; ---------------------------------------------------------------------------
.plt:0000000000001D16                 push    35h ; '5'
.plt:0000000000001D1B                 jmp     sub_19B0
.plt:0000000000001D20
.plt:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D20
.plt:0000000000001D20 ; Attributes: thunk
.plt:0000000000001D20
.plt:0000000000001D20 ; wint_t towlower(wint_t wc)
.plt:0000000000001D20 _towlower       proc near               ; CODE XREF: re_compile_fastmap_iter_isra_30+205↓p
.plt:0000000000001D20                                         ; re_compile_fastmap_iter_isra_30+30E↓p
.plt:0000000000001D20                 jmp     cs:towlower_ptr
.plt:0000000000001D20 _towlower       endp
.plt:0000000000001D20
.plt:0000000000001D26 ; ---------------------------------------------------------------------------
.plt:0000000000001D26                 push    36h ; '6'
.plt:0000000000001D2B                 jmp     sub_19B0
.plt:0000000000001D30
.plt:0000000000001D30 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D30
.plt:0000000000001D30 ; Attributes: thunk
.plt:0000000000001D30
.plt:0000000000001D30 ; wint_t towupper(wint_t wc)
.plt:0000000000001D30 _towupper       proc near               ; CODE XREF: build_wcs_upper_buffer+10C↓p
.plt:0000000000001D30                                         ; build_wcs_upper_buffer+280↓p
.plt:0000000000001D30                 jmp     cs:towupper_ptr
.plt:0000000000001D30 _towupper       endp
.plt:0000000000001D30
.plt:0000000000001D36 ; ---------------------------------------------------------------------------
.plt:0000000000001D36                 push    37h ; '7'
.plt:0000000000001D3B                 jmp     sub_19B0
.plt:0000000000001D40
.plt:0000000000001D40 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D40
.plt:0000000000001D40 ; Attributes: thunk
.plt:0000000000001D40
.plt:0000000000001D40 ___gmpz_init_set_str proc near          ; CODE XREF: toarith+6C↓p
.plt:0000000000001D40                 jmp     cs:__gmpz_init_set_str_ptr
.plt:0000000000001D40 ___gmpz_init_set_str endp
.plt:0000000000001D40
.plt:0000000000001D46 ; ---------------------------------------------------------------------------
.plt:0000000000001D46                 push    38h ; '8'
.plt:0000000000001D4B                 jmp     sub_19B0
.plt:0000000000001D50
.plt:0000000000001D50 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D50
.plt:0000000000001D50 ; Attributes: thunk
.plt:0000000000001D50
.plt:0000000000001D50 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001D50 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001D50                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001D50 ___cxa_atexit   endp
.plt:0000000000001D50
.plt:0000000000001D56 ; ---------------------------------------------------------------------------
.plt:0000000000001D56                 push    39h ; '9'
.plt:0000000000001D5B                 jmp     sub_19B0
.plt:0000000000001D60
.plt:0000000000001D60 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D60
.plt:0000000000001D60 ; Attributes: noreturn thunk
.plt:0000000000001D60
.plt:0000000000001D60 ; void __noreturn exit(int status)
.plt:0000000000001D60 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001D60                                         ; parse_long_options+122↓p ...
.plt:0000000000001D60                 jmp     cs:exit_ptr
.plt:0000000000001D60 _exit           endp
.plt:0000000000001D60
.plt:0000000000001D66 ; ---------------------------------------------------------------------------
.plt:0000000000001D66                 push    3Ah ; ':'
.plt:0000000000001D6B                 jmp     sub_19B0
.plt:0000000000001D70
.plt:0000000000001D70 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D70
.plt:0000000000001D70 ; Attributes: thunk
.plt:0000000000001D70
.plt:0000000000001D70 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001D70 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001D70                 jmp     cs:fwrite_ptr
.plt:0000000000001D70 _fwrite         endp
.plt:0000000000001D70
.plt:0000000000001D76 ; ---------------------------------------------------------------------------
.plt:0000000000001D76                 push    3Bh ; ';'
.plt:0000000000001D7B                 jmp     sub_19B0
.plt:0000000000001D80
.plt:0000000000001D80 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D80
.plt:0000000000001D80 ; Attributes: thunk
.plt:0000000000001D80
.plt:0000000000001D80 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001D80                                         ; version_etc_arn+37↓p ...
.plt:0000000000001D80                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001D80 ___fprintf_chk  endp
.plt:0000000000001D80
.plt:0000000000001D86 ; ---------------------------------------------------------------------------
.plt:0000000000001D86                 push    3Ch ; '<'
.plt:0000000000001D8B                 jmp     sub_19B0
.plt:0000000000001D90
.plt:0000000000001D90 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001D90
.plt:0000000000001D90 ; Attributes: thunk
.plt:0000000000001D90
.plt:0000000000001D90 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001D90 _mbsinit        proc near               ; CODE XREF: docolon+347↓p
.plt:0000000000001D90                                         ; docolon+36D↓p ...
.plt:0000000000001D90                 jmp     cs:mbsinit_ptr
.plt:0000000000001D90 _mbsinit        endp
.plt:0000000000001D90
.plt:0000000000001D96 ; ---------------------------------------------------------------------------
.plt:0000000000001D96                 push    3Dh ; '='
.plt:0000000000001D9B                 jmp     sub_19B0
.plt:0000000000001DA0
.plt:0000000000001DA0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DA0
.plt:0000000000001DA0 ; Attributes: thunk
.plt:0000000000001DA0
.plt:0000000000001DA0 ; int iswprint(wint_t wc)
.plt:0000000000001DA0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001DA0                 jmp     cs:iswprint_ptr
.plt:0000000000001DA0 _iswprint       endp
.plt:0000000000001DA0
.plt:0000000000001DA6 ; ---------------------------------------------------------------------------
.plt:0000000000001DA6                 push    3Eh ; '>'
.plt:0000000000001DAB                 jmp     sub_19B0
.plt:0000000000001DB0
.plt:0000000000001DB0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DB0
.plt:0000000000001DB0 ; Attributes: thunk
.plt:0000000000001DB0
.plt:0000000000001DB0 ; const __int32_t **__ctype_tolower_loc(void)
.plt:0000000000001DB0 ___ctype_tolower_loc proc near          ; CODE XREF: re_compile_fastmap_iter_isra_30+11F↓p
.plt:0000000000001DB0                                         ; re_compile_fastmap_iter_isra_30+2D9↓p ...
.plt:0000000000001DB0                 jmp     cs:__ctype_tolower_loc_ptr
.plt:0000000000001DB0 ___ctype_tolower_loc endp
.plt:0000000000001DB0
.plt:0000000000001DB6 ; ---------------------------------------------------------------------------
.plt:0000000000001DB6                 push    3Fh ; '?'
.plt:0000000000001DBB                 jmp     sub_19B0
.plt:0000000000001DC0
.plt:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001DC0
.plt:0000000000001DC0 ; Attributes: thunk
.plt:0000000000001DC0
.plt:0000000000001DC0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001DC0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001DC0                                         ; build_charclass_isra_29+A8↓p ...
.plt:0000000000001DC0                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001DC0 ___ctype_b_loc  endp
.plt:0000000000001DC0
.plt:0000000000001DC6 ; ---------------------------------------------------------------------------
.plt:0000000000001DC6                 push    40h ; '@'
.plt:0000000000001DCB                 jmp     sub_19B0
.plt:0000000000001DCB ; } // starts at 19B0
.plt:0000000000001DCB _plt            ends
.plt:0000000000001DCB
.plt.got:0000000000001DD0 ; ===========================================================================
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; Segment type: Pure code
.plt.got:0000000000001DD0 ; Segment permissions: Read/Execute
.plt.got:0000000000001DD0 _plt_got        segment qword public 'CODE' use64
.plt.got:0000000000001DD0                 assume cs:_plt_got
.plt.got:0000000000001DD0                 ;org 1DD0h
.plt.got:0000000000001DD0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; =============== S U B R O U T I N E =======================================
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; Attributes: thunk
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; int __fastcall _cxa_finalize(void *)
.plt.got:0000000000001DD0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:0000000000001DD0 ; __unwind {
.plt.got:0000000000001DD0                 jmp     cs:__cxa_finalize_ptr
.plt.got:0000000000001DD0 __cxa_finalize  endp
.plt.got:0000000000001DD0
.plt.got:0000000000001DD0 ; ---------------------------------------------------------------------------
.plt.got:0000000000001DD6                 align 8
.plt.got:0000000000001DD6 ; } // starts at 1DD0
.plt.got:0000000000001DD6 _plt_got        ends
.plt.got:0000000000001DD6
LOAD:0000000000001DD8 ; ===========================================================================
LOAD:0000000000001DD8
LOAD:0000000000001DD8 ; Segment type: Pure code
LOAD:0000000000001DD8 ; Segment permissions: Read/Execute
LOAD:0000000000001DD8 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001DD8                 assume cs:LOAD
LOAD:0000000000001DD8                 ;org 1DD8h
LOAD:0000000000001DD8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001DD8                 align 20h
LOAD:0000000000001DD8 LOAD            ends
LOAD:0000000000001DD8
.text:0000000000001DE0 ; ===========================================================================
.text:0000000000001DE0
.text:0000000000001DE0 ; Segment type: Pure code
.text:0000000000001DE0 ; Segment permissions: Read/Execute
.text:0000000000001DE0 _text           segment para public 'CODE' use64
.text:0000000000001DE0                 assume cs:_text
.text:0000000000001DE0                 ;org 1DE0h
.text:0000000000001DE0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:0000000000001DE0
.text:0000000000001DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DE0
.text:0000000000001DE0 ; Attributes: noreturn
.text:0000000000001DE0
.text:0000000000001DE0 mbuiter_multi_next_part_2 proc near     ; CODE XREF: docolon:loc_2C26↓p
.text:0000000000001DE0                                         ; eval6:loc_37A4↓p
.text:0000000000001DE0 ; __unwind {
.text:0000000000001DE0                 lea     rcx, __PRETTY_FUNCTION___7929 ; "mbuiter_multi_next"
.text:0000000000001DE7                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000001DEE                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:0000000000001DF5                 sub     rsp, 8
.text:0000000000001DF9                 mov     edx, 0B3h       ; line
.text:0000000000001DFE                 call    ___assert_fail
.text:0000000000001DFE ; } // starts at 1DE0
.text:0000000000001DFE mbuiter_multi_next_part_2 endp
.text:0000000000001DFE
.text:0000000000001DFE ; ---------------------------------------------------------------------------
.text:0000000000001E03                 align 10h
.text:0000000000001E10
.text:0000000000001E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E10
.text:0000000000001E10
.text:0000000000001E10 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0000000000001E10                 public main
.text:0000000000001E10 main            proc near               ; DATA XREF: start+1D↓o
.text:0000000000001E10 ; __unwind {
.text:0000000000001E10                 push    rbp
.text:0000000000001E11                 push    rbx
.text:0000000000001E12                 mov     ebp, edi
.text:0000000000001E14                 mov     rbx, rsi
.text:0000000000001E17                 sub     rsp, 8
.text:0000000000001E1B                 mov     rdi, [rsi]
.text:0000000000001E1E                 call    set_program_name
.text:0000000000001E23                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:0000000000001E2A                 mov     edi, 6          ; category
.text:0000000000001E2F                 call    _setlocale
.text:0000000000001E34                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001E3B                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E42                 call    _bindtextdomain
.text:0000000000001E47                 lea     rdi, domainname ; "coreutils"
.text:0000000000001E4E                 call    _textdomain
.text:0000000000001E53                 lea     rdi, close_stdout
.text:0000000000001E5A                 mov     cs:exit_failure, 3
.text:0000000000001E64                 call    atexit
.text:0000000000001E69                 lea     rax, aPaulEggert ; "Paul Eggert"
.text:0000000000001E70                 push    0
.text:0000000000001E72                 lea     r9, usage
.text:0000000000001E79                 lea     r8, a831        ; "8.31"
.text:0000000000001E80                 lea     rcx, unk_1600A
.text:0000000000001E87                 lea     rdx, aExpr      ; "expr"
.text:0000000000001E8E                 push    rax
.text:0000000000001E8F                 lea     rax, aJamesYoungman ; "James Youngman"
.text:0000000000001E96                 mov     rsi, rbx
.text:0000000000001E99                 mov     edi, ebp
.text:0000000000001E9B                 push    rax
.text:0000000000001E9C                 lea     rax, aMikeParker ; "Mike Parker"
.text:0000000000001EA3                 push    rax
.text:0000000000001EA4                 xor     eax, eax
.text:0000000000001EA6                 call    parse_long_options
.text:0000000000001EAB                 add     rsp, 20h
.text:0000000000001EAF                 cmp     ebp, 1
.text:0000000000001EB2                 jbe     loc_1FA0
.text:0000000000001EB8                 mov     rdi, [rbx+8]    ; s1
.text:0000000000001EBC                 lea     rsi, s2         ; "--"
.text:0000000000001EC3                 call    _strcmp
.text:0000000000001EC8                 test    eax, eax
.text:0000000000001ECA                 jnz     short loc_1ED9
.text:0000000000001ECC                 cmp     ebp, 2
.text:0000000000001ECF                 jz      loc_1FA0
.text:0000000000001ED5                 add     rbx, 8
.text:0000000000001ED9
.text:0000000000001ED9 loc_1ED9:                               ; CODE XREF: main+BA↑j
.text:0000000000001ED9                 add     rbx, 8
.text:0000000000001EDD                 mov     edi, 1
.text:0000000000001EE2                 mov     cs:args, rbx
.text:0000000000001EE9                 call    eval
.text:0000000000001EEE                 mov     rbx, rax
.text:0000000000001EF1                 mov     rax, cs:args
.text:0000000000001EF8                 mov     rdx, [rax]
.text:0000000000001EFB                 test    rdx, rdx
.text:0000000000001EFE                 jnz     short loc_1F6A
.text:0000000000001F00                 mov     eax, [rbx]
.text:0000000000001F02                 test    eax, eax
.text:0000000000001F04                 jz      short loc_1F26
.text:0000000000001F06                 sub     eax, 1
.text:0000000000001F09                 jnz     short loc_1F65
.text:0000000000001F0B                 mov     rdi, [rbx+8]    ; s
.text:0000000000001F0F                 call    _puts
.text:0000000000001F14
.text:0000000000001F14 loc_1F14:                               ; CODE XREF: main+147↓j
.text:0000000000001F14                                         ; main+153↓j
.text:0000000000001F14                 mov     rdi, rbx
.text:0000000000001F17                 call    null
.text:0000000000001F1C                 add     rsp, 8
.text:0000000000001F20                 movzx   eax, al
.text:0000000000001F23                 pop     rbx
.text:0000000000001F24                 pop     rbp
.text:0000000000001F25                 retn
.text:0000000000001F26 ; ---------------------------------------------------------------------------
.text:0000000000001F26
.text:0000000000001F26 loc_1F26:                               ; CODE XREF: main+F4↑j
.text:0000000000001F26                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001F2D                 lea     rdx, [rbx+8]
.text:0000000000001F31                 mov     esi, 0Ah
.text:0000000000001F36                 call    ___gmpz_out_str
.text:0000000000001F3B                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001F42                 mov     rax, [rdi+28h]
.text:0000000000001F46                 cmp     rax, [rdi+30h]
.text:0000000000001F4A                 jnb     short loc_1F59
.text:0000000000001F4C                 lea     rdx, [rax+1]
.text:0000000000001F50                 mov     [rdi+28h], rdx
.text:0000000000001F54                 mov     byte ptr [rax], 0Ah
.text:0000000000001F57                 jmp     short loc_1F14
.text:0000000000001F59 ; ---------------------------------------------------------------------------
.text:0000000000001F59
.text:0000000000001F59 loc_1F59:                               ; CODE XREF: main+13A↑j
.text:0000000000001F59                 mov     esi, 0Ah        ; int
.text:0000000000001F5E                 call    ___overflow
.text:0000000000001F63                 jmp     short loc_1F14
.text:0000000000001F65 ; ---------------------------------------------------------------------------
.text:0000000000001F65
.text:0000000000001F65 loc_1F65:                               ; CODE XREF: main+F9↑j
.text:0000000000001F65                 call    _abort
.text:0000000000001F6A ; ---------------------------------------------------------------------------
.text:0000000000001F6A
.text:0000000000001F6A loc_1F6A:                               ; CODE XREF: main+EE↑j
.text:0000000000001F6A                 mov     esi, 8
.text:0000000000001F6F                 xor     edi, edi
.text:0000000000001F71                 call    quotearg_n_style
.text:0000000000001F76                 lea     rsi, msgid      ; "syntax error: unexpected argument %s"
.text:0000000000001F7D                 mov     rbx, rax
.text:0000000000001F80                 mov     edx, 5          ; category
.text:0000000000001F85                 xor     edi, edi        ; domainname
.text:0000000000001F87                 call    _dcgettext
.text:0000000000001F8C                 mov     rcx, rbx
.text:0000000000001F8F                 mov     rdx, rax        ; format
.text:0000000000001F92                 xor     esi, esi        ; errnum
.text:0000000000001F94                 mov     edi, 2          ; status
.text:0000000000001F99                 xor     eax, eax
.text:0000000000001F9B                 call    _error
.text:0000000000001FA0
.text:0000000000001FA0 loc_1FA0:                               ; CODE XREF: main+A2↑j
.text:0000000000001FA0                                         ; main+BF↑j
.text:0000000000001FA0                 lea     rsi, aMissingOperand ; "missing operand"
.text:0000000000001FA7                 mov     edx, 5          ; category
.text:0000000000001FAC                 xor     edi, edi        ; domainname
.text:0000000000001FAE                 call    _dcgettext
.text:0000000000001FB3                 xor     edi, edi        ; status
.text:0000000000001FB5                 mov     rdx, rax        ; format
.text:0000000000001FB8                 xor     esi, esi        ; errnum
.text:0000000000001FBA                 xor     eax, eax
.text:0000000000001FBC                 call    _error
.text:0000000000001FC1                 mov     edi, 2          ; status
.text:0000000000001FC6                 call    usage
.text:0000000000001FC6 ; } // starts at 1E10
.text:0000000000001FC6 main            endp
.text:0000000000001FC6
.text:0000000000001FC6 ; ---------------------------------------------------------------------------
.text:0000000000001FCB                 align 10h
.text:0000000000001FD0
.text:0000000000001FD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001FD0
.text:0000000000001FD0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:0000000000001FD0
.text:0000000000001FD0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:0000000000001FD0                 public start
.text:0000000000001FD0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:0000000000001FD0 ; __unwind {
.text:0000000000001FD0                 xor     ebp, ebp
.text:0000000000001FD2                 mov     r9, rdx         ; rtld_fini
.text:0000000000001FD5                 pop     rsi             ; argc
.text:0000000000001FD6                 mov     rdx, rsp        ; ubp_av
.text:0000000000001FD9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:0000000000001FDD                 push    rax
.text:0000000000001FDE                 push    rsp             ; stack_end
.text:0000000000001FDF                 lea     r8, __libc_csu_fini ; fini
.text:0000000000001FE6                 lea     rcx, __libc_csu_init ; init
.text:0000000000001FED                 lea     rdi, main       ; main
.text:0000000000001FF4                 call    cs:__libc_start_main_ptr
.text:0000000000001FFA                 hlt
.text:0000000000001FFA ; } // starts at 1FD0
.text:0000000000001FFA start           endp
.text:0000000000001FFA
.text:0000000000001FFA ; ---------------------------------------------------------------------------
.text:0000000000001FFB                 align 20h
.text:0000000000002000
.text:0000000000002000 ; =============== S U B R O U T I N E =======================================
.text:0000000000002000
.text:0000000000002000 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002000
.text:0000000000002000 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_20B3↓p
.text:0000000000002000                 lea     rdi, __bss_start
.text:0000000000002007                 push    rbp
.text:0000000000002008                 lea     rax, __bss_start
.text:000000000000200F                 cmp     rax, rdi
.text:0000000000002012                 mov     rbp, rsp
.text:0000000000002015                 jz      short loc_2030
.text:0000000000002017                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000201E                 test    rax, rax
.text:0000000000002021                 jz      short loc_2030
.text:0000000000002023                 pop     rbp
.text:0000000000002024                 jmp     rax
.text:0000000000002024 ; ---------------------------------------------------------------------------
.text:0000000000002026                 align 10h
.text:0000000000002030
.text:0000000000002030 loc_2030:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000002030                                         ; deregister_tm_clones+21↑j
.text:0000000000002030                 pop     rbp
.text:0000000000002031                 retn
.text:0000000000002031 deregister_tm_clones endp
.text:0000000000002031
.text:0000000000002031 ; ---------------------------------------------------------------------------
.text:0000000000002032                 align 20h
.text:0000000000002040
.text:0000000000002040 ; =============== S U B R O U T I N E =======================================
.text:0000000000002040
.text:0000000000002040 ; Attributes: bp-based frame info_from_lumina
.text:0000000000002040
.text:0000000000002040 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000002040                 lea     rdi, __bss_start
.text:0000000000002047                 lea     rsi, __bss_start
.text:000000000000204E                 push    rbp
.text:000000000000204F                 sub     rsi, rdi
.text:0000000000002052                 mov     rbp, rsp
.text:0000000000002055                 sar     rsi, 3
.text:0000000000002059                 mov     rax, rsi
.text:000000000000205C                 shr     rax, 3Fh
.text:0000000000002060                 add     rsi, rax
.text:0000000000002063                 sar     rsi, 1
.text:0000000000002066                 jz      short loc_2080
.text:0000000000002068                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000206F                 test    rax, rax
.text:0000000000002072                 jz      short loc_2080
.text:0000000000002074                 pop     rbp
.text:0000000000002075                 jmp     rax
.text:0000000000002075 ; ---------------------------------------------------------------------------
.text:0000000000002077                 align 20h
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000002080                                         ; register_tm_clones+32↑j
.text:0000000000002080                 pop     rbp
.text:0000000000002081                 retn
.text:0000000000002081 register_tm_clones endp
.text:0000000000002081
.text:0000000000002081 ; ---------------------------------------------------------------------------
.text:0000000000002082                 align 10h
.text:0000000000002090
.text:0000000000002090 ; =============== S U B R O U T I N E =======================================
.text:0000000000002090
.text:0000000000002090 ; Attributes: info_from_lumina
.text:0000000000002090
.text:0000000000002090 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000002090                 cmp     cs:completed_7697, 0
.text:0000000000002097                 jnz     short locret_20C8
.text:0000000000002099                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000020A1                 push    rbp
.text:00000000000020A2                 mov     rbp, rsp
.text:00000000000020A5                 jz      short loc_20B3
.text:00000000000020A7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000020AE                 call    __cxa_finalize
.text:00000000000020B3
.text:00000000000020B3 loc_20B3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000020B3                 call    deregister_tm_clones
.text:00000000000020B8                 mov     cs:completed_7697, 1
.text:00000000000020BF                 pop     rbp
.text:00000000000020C0                 retn
.text:00000000000020C0 ; ---------------------------------------------------------------------------
.text:00000000000020C1                 align 8
.text:00000000000020C8
.text:00000000000020C8 locret_20C8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000020C8                 rep retn
.text:00000000000020C8 __do_global_dtors_aux endp
.text:00000000000020C8
.text:00000000000020C8 ; ---------------------------------------------------------------------------
.text:00000000000020CA                 align 10h
.text:00000000000020D0
.text:00000000000020D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020D0
.text:00000000000020D0 ; Attributes: bp-based frame
.text:00000000000020D0
.text:00000000000020D0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000020D0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000020D0                 push    rbp
.text:00000000000020D1                 mov     rbp, rsp
.text:00000000000020D4                 pop     rbp
.text:00000000000020D5                 jmp     register_tm_clones
.text:00000000000020D5 frame_dummy     endp
.text:00000000000020D5
.text:00000000000020D5 ; ---------------------------------------------------------------------------
.text:00000000000020DA                 align 20h
.text:00000000000020E0
.text:00000000000020E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000020E0
.text:00000000000020E0
.text:00000000000020E0 ; __int64 __fastcall nextarg(char *s2)
.text:00000000000020E0 nextarg         proc near               ; CODE XREF: eval6+2D↓p
.text:00000000000020E0                                         ; eval6+45↓p ...
.text:00000000000020E0 ; __unwind {
.text:00000000000020E0                 push    rbx
.text:00000000000020E1                 mov     rbx, cs:args
.text:00000000000020E8                 mov     rsi, rdi        ; s2
.text:00000000000020EB                 xor     eax, eax
.text:00000000000020ED                 mov     rdi, [rbx]      ; s1
.text:00000000000020F0                 test    rdi, rdi
.text:00000000000020F3                 jz      short loc_210D
.text:00000000000020F5                 call    _strcmp
.text:00000000000020FA                 test    eax, eax
.text:00000000000020FC                 setz    al
.text:00000000000020FF                 movzx   edx, al
.text:0000000000002102                 lea     rdx, [rbx+rdx*8]
.text:0000000000002106                 mov     cs:args, rdx
.text:000000000000210D
.text:000000000000210D loc_210D:                               ; CODE XREF: nextarg+13↑j
.text:000000000000210D                 pop     rbx
.text:000000000000210E                 retn
.text:000000000000210E ; } // starts at 20E0
.text:000000000000210E nextarg         endp
.text:000000000000210E
.text:000000000000210E ; ---------------------------------------------------------------------------
.text:000000000000210F                 align 10h
.text:0000000000002110
.text:0000000000002110 ; =============== S U B R O U T I N E =======================================
.text:0000000000002110
.text:0000000000002110
.text:0000000000002110 require_more_args proc near             ; CODE XREF: eval6+91↓p
.text:0000000000002110                                         ; eval6:loc_2D80↓p
.text:0000000000002110 ; __unwind {
.text:0000000000002110                 mov     rax, cs:args
.text:0000000000002117                 cmp     qword ptr [rax], 0
.text:000000000000211B                 jz      short loc_211F
.text:000000000000211D                 rep retn
.text:000000000000211F ; ---------------------------------------------------------------------------
.text:000000000000211F
.text:000000000000211F loc_211F:                               ; CODE XREF: require_more_args+B↑j
.text:000000000000211F                 push    rbx
.text:0000000000002120                 mov     rdx, [rax-8]
.text:0000000000002124                 mov     esi, 8
.text:0000000000002129                 xor     edi, edi
.text:000000000000212B                 call    quotearg_n_style
.text:0000000000002130                 lea     rsi, aSyntaxErrorMis ; "syntax error: missing argument after %s"
.text:0000000000002137                 mov     rbx, rax
.text:000000000000213A                 mov     edx, 5          ; category
.text:000000000000213F                 xor     edi, edi        ; domainname
.text:0000000000002141                 call    _dcgettext
.text:0000000000002146                 mov     rcx, rbx
.text:0000000000002149                 mov     rdx, rax        ; format
.text:000000000000214C                 xor     esi, esi        ; errnum
.text:000000000000214E                 mov     edi, 2          ; status
.text:0000000000002153                 xor     eax, eax
.text:0000000000002155                 call    _error
.text:0000000000002155 ; } // starts at 2110
.text:000000000000215A                 nop     word ptr [rax+rax+00h]
.text:000000000000215A require_more_args endp ; sp-analysis failed
.text:000000000000215A
.text:0000000000002160
.text:0000000000002160 ; =============== S U B R O U T I N E =======================================
.text:0000000000002160
.text:0000000000002160
.text:0000000000002160 ; __int64 __fastcall str_value(void *src)
.text:0000000000002160 str_value       proc near               ; CODE XREF: docolon+10B↓p
.text:0000000000002160                                         ; docolon+1C1↓p ...
.text:0000000000002160 ; __unwind {
.text:0000000000002160                 push    rbp
.text:0000000000002161                 push    rbx
.text:0000000000002162                 mov     rbp, rdi
.text:0000000000002165                 mov     edi, 18h
.text:000000000000216A                 sub     rsp, 8
.text:000000000000216E                 call    xmalloc
.text:0000000000002173                 mov     rdi, rbp        ; src
.text:0000000000002176                 mov     rbx, rax
.text:0000000000002179                 mov     dword ptr [rax], 1
.text:000000000000217F                 call    xstrdup
.text:0000000000002184                 mov     [rbx+8], rax
.text:0000000000002188                 add     rsp, 8
.text:000000000000218C                 mov     rax, rbx
.text:000000000000218F                 pop     rbx
.text:0000000000002190                 pop     rbp
.text:0000000000002191                 retn
.text:0000000000002191 ; } // starts at 2160
.text:0000000000002191 str_value       endp
.text:0000000000002191
.text:0000000000002191 ; ---------------------------------------------------------------------------
.text:0000000000002192                 align 20h
.text:00000000000021A0
.text:00000000000021A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021A0
.text:00000000000021A0
.text:00000000000021A0 ; __int64 __fastcall freev(void *ptr)
.text:00000000000021A0 freev           proc near               ; CODE XREF: eval6+1B1↓p
.text:00000000000021A0                                         ; eval6+2EE↓p ...
.text:00000000000021A0 ; __unwind {
.text:00000000000021A0                 push    rbx
.text:00000000000021A1                 cmp     dword ptr [rdi], 1
.text:00000000000021A4                 mov     rbx, rdi
.text:00000000000021A7                 jz      short loc_21C0
.text:00000000000021A9                 lea     rdi, [rdi+8]
.text:00000000000021AD                 call    ___gmpz_clear
.text:00000000000021B2                 mov     rdi, rbx        ; ptr
.text:00000000000021B5                 pop     rbx
.text:00000000000021B6                 jmp     _free
.text:00000000000021B6 ; ---------------------------------------------------------------------------
.text:00000000000021BB                 align 20h
.text:00000000000021C0
.text:00000000000021C0 loc_21C0:                               ; CODE XREF: freev+7↑j
.text:00000000000021C0                 mov     rdi, [rdi+8]    ; ptr
.text:00000000000021C4                 call    _free
.text:00000000000021C9                 mov     rdi, rbx        ; ptr
.text:00000000000021CC                 pop     rbx
.text:00000000000021CD                 jmp     _free
.text:00000000000021CD ; } // starts at 21A0
.text:00000000000021CD freev           endp
.text:00000000000021CD
.text:00000000000021CD ; ---------------------------------------------------------------------------
.text:00000000000021D2                 align 20h
.text:00000000000021E0
.text:00000000000021E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000021E0
.text:00000000000021E0
.text:00000000000021E0 null            proc near               ; CODE XREF: main+107↑p
.text:00000000000021E0                                         ; eval1+2D↓p ...
.text:00000000000021E0 ; __unwind {
.text:00000000000021E0                 mov     eax, [rdi]
.text:00000000000021E2                 test    eax, eax
.text:00000000000021E4                 jz      short loc_2228
.text:00000000000021E6                 cmp     eax, 1
.text:00000000000021E9                 jnz     short loc_223E
.text:00000000000021EB                 mov     rdx, [rdi+8]
.text:00000000000021EF                 mov     eax, 1
.text:00000000000021F4                 movzx   ecx, byte ptr [rdx]
.text:00000000000021F7                 test    cl, cl
.text:00000000000021F9                 jz      short locret_2222
.text:00000000000021FB                 xor     eax, eax
.text:00000000000021FD                 cmp     cl, 2Dh ; '-'
.text:0000000000002200                 setz    al
.text:0000000000002203                 add     rax, rdx
.text:0000000000002206                 movzx   edx, byte ptr [rax]
.text:0000000000002209                 jmp     short loc_221B
.text:0000000000002209 ; ---------------------------------------------------------------------------
.text:000000000000220B                 align 10h
.text:0000000000002210
.text:0000000000002210 loc_2210:                               ; CODE XREF: null+3E↓j
.text:0000000000002210                 add     rax, 1
.text:0000000000002214                 movzx   edx, byte ptr [rax]
.text:0000000000002217                 test    dl, dl
.text:0000000000002219                 jz      short loc_2238
.text:000000000000221B
.text:000000000000221B loc_221B:                               ; CODE XREF: null+29↑j
.text:000000000000221B                 cmp     dl, 30h ; '0'
.text:000000000000221E                 jz      short loc_2210
.text:0000000000002220                 xor     eax, eax
.text:0000000000002222
.text:0000000000002222 locret_2222:                            ; CODE XREF: null+19↑j
.text:0000000000002222                 rep retn
.text:0000000000002222 ; ---------------------------------------------------------------------------
.text:0000000000002224                 align 8
.text:0000000000002228
.text:0000000000002228 loc_2228:                               ; CODE XREF: null+4↑j
.text:0000000000002228                 mov     eax, [rdi+0Ch]
.text:000000000000222B                 test    eax, eax
.text:000000000000222D                 setz    al
.text:0000000000002230                 retn
.text:0000000000002230 ; ---------------------------------------------------------------------------
.text:0000000000002231                 align 8
.text:0000000000002238
.text:0000000000002238 loc_2238:                               ; CODE XREF: null+39↑j
.text:0000000000002238                 mov     eax, 1
.text:000000000000223D                 retn
.text:000000000000223E ; ---------------------------------------------------------------------------
.text:000000000000223E
.text:000000000000223E loc_223E:                               ; CODE XREF: null+9↑j
.text:000000000000223E                 sub     rsp, 8
.text:0000000000002242                 call    _abort
.text:0000000000002242 ; } // starts at 21E0
.text:0000000000002242 null            endp
.text:0000000000002242
.text:0000000000002242 ; ---------------------------------------------------------------------------
.text:0000000000002247                 align 10h
.text:0000000000002250
.text:0000000000002250 ; =============== S U B R O U T I N E =======================================
.text:0000000000002250
.text:0000000000002250
.text:0000000000002250 toarith         proc near               ; CODE XREF: eval6+1EC↓p
.text:0000000000002250                                         ; eval6+1FC↓p ...
.text:0000000000002250 ; __unwind {
.text:0000000000002250                 mov     eax, [rdi]
.text:0000000000002252                 test    eax, eax
.text:0000000000002254                 jz      short loc_22A0
.text:0000000000002256                 push    rbp
.text:0000000000002257                 push    rbx
.text:0000000000002258                 mov     rbx, rdi
.text:000000000000225B                 sub     rsp, 8
.text:000000000000225F                 cmp     eax, 1
.text:0000000000002262                 jnz     short loc_22DB
.text:0000000000002264                 mov     rbp, [rdi+8]
.text:0000000000002268                 xor     edx, edx
.text:000000000000226A                 cmp     byte ptr [rbp+0], 2Dh ; '-'
.text:000000000000226E                 setz    dl
.text:0000000000002271                 add     rdx, rbp
.text:0000000000002274                 movsx   eax, byte ptr [rdx]
.text:0000000000002277                 jmp     short loc_228B
.text:0000000000002277 ; ---------------------------------------------------------------------------
.text:0000000000002279                 align 20h
.text:0000000000002280
.text:0000000000002280 loc_2280:                               ; CODE XREF: toarith+41↓j
.text:0000000000002280                 add     rdx, 1
.text:0000000000002284                 movsx   eax, byte ptr [rdx]
.text:0000000000002287                 test    al, al
.text:0000000000002289                 jz      short loc_22B0
.text:000000000000228B
.text:000000000000228B loc_228B:                               ; CODE XREF: toarith+27↑j
.text:000000000000228B                 sub     eax, 30h ; '0'
.text:000000000000228E                 cmp     eax, 9
.text:0000000000002291                 jbe     short loc_2280
.text:0000000000002293                 add     rsp, 8
.text:0000000000002297                 xor     eax, eax
.text:0000000000002299                 pop     rbx
.text:000000000000229A                 pop     rbp
.text:000000000000229B                 retn
.text:000000000000229B ; ---------------------------------------------------------------------------
.text:000000000000229C                 align 20h
.text:00000000000022A0
.text:00000000000022A0 loc_22A0:                               ; CODE XREF: toarith+4↑j
.text:00000000000022A0                 mov     eax, 1
.text:00000000000022A5                 retn
.text:00000000000022A5 ; ---------------------------------------------------------------------------
.text:00000000000022A6                 align 10h
.text:00000000000022B0
.text:00000000000022B0 loc_22B0:                               ; CODE XREF: toarith+39↑j
.text:00000000000022B0                 lea     rdi, [rbx+8]
.text:00000000000022B4                 mov     rsi, rbp
.text:00000000000022B7                 mov     edx, 0Ah
.text:00000000000022BC                 call    ___gmpz_init_set_str
.text:00000000000022C1                 mov     rdi, rbp        ; ptr
.text:00000000000022C4                 call    _free
.text:00000000000022C9                 mov     dword ptr [rbx], 0
.text:00000000000022CF                 add     rsp, 8
.text:00000000000022D3                 mov     eax, 1
.text:00000000000022D8                 pop     rbx
.text:00000000000022D9                 pop     rbp
.text:00000000000022DA                 retn
.text:00000000000022DB ; ---------------------------------------------------------------------------
.text:00000000000022DB
.text:00000000000022DB loc_22DB:                               ; CODE XREF: toarith+12↑j
.text:00000000000022DB                 call    _abort
.text:00000000000022DB ; } // starts at 2250
.text:00000000000022DB toarith         endp
.text:00000000000022DB
.text:00000000000022E0
.text:00000000000022E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000022E0
.text:00000000000022E0
.text:00000000000022E0 tostring        proc near               ; CODE XREF: docolon+2A↓p
.text:00000000000022E0                                         ; docolon+32↓p ...
.text:00000000000022E0 ; __unwind {
.text:00000000000022E0                 push    r12
.text:00000000000022E2                 push    rbp
.text:00000000000022E3                 push    rbx
.text:00000000000022E4                 mov     eax, [rdi]
.text:00000000000022E6                 test    eax, eax
.text:00000000000022E8                 jz      short loc_22F8
.text:00000000000022EA                 cmp     eax, 1
.text:00000000000022ED                 jnz     short loc_2328
.text:00000000000022EF                 pop     rbx
.text:00000000000022F0                 pop     rbp
.text:00000000000022F1                 pop     r12
.text:00000000000022F3                 retn
.text:00000000000022F3 ; ---------------------------------------------------------------------------
.text:00000000000022F4                 align 8
.text:00000000000022F8
.text:00000000000022F8 loc_22F8:                               ; CODE XREF: tostring+8↑j
.text:00000000000022F8                 lea     rbp, [rdi+8]
.text:00000000000022FC                 mov     rbx, rdi
.text:00000000000022FF                 mov     esi, 0Ah
.text:0000000000002304                 xor     edi, edi
.text:0000000000002306                 mov     rdx, rbp
.text:0000000000002309                 call    ___gmpz_get_str
.text:000000000000230E                 mov     rdi, rbp
.text:0000000000002311                 mov     r12, rax
.text:0000000000002314                 call    ___gmpz_clear
.text:0000000000002319                 mov     [rbx+8], r12
.text:000000000000231D                 mov     dword ptr [rbx], 1
.text:0000000000002323                 pop     rbx
.text:0000000000002324                 pop     rbp
.text:0000000000002325                 pop     r12
.text:0000000000002327                 retn
.text:0000000000002328 ; ---------------------------------------------------------------------------
.text:0000000000002328
.text:0000000000002328 loc_2328:                               ; CODE XREF: tostring+D↑j
.text:0000000000002328                 call    _abort
.text:0000000000002328 ; } // starts at 22E0
.text:0000000000002328 tostring        endp
.text:0000000000002328
.text:0000000000002328 ; ---------------------------------------------------------------------------
.text:000000000000232D                 align 10h
.text:0000000000002330
.text:0000000000002330 ; =============== S U B R O U T I N E =======================================
.text:0000000000002330
.text:0000000000002330 ; Attributes: noreturn
.text:0000000000002330
.text:0000000000002330 ; void __fastcall __noreturn usage(int status)
.text:0000000000002330                 public usage
.text:0000000000002330 usage           proc near               ; CODE XREF: main+1B6↑p
.text:0000000000002330                                         ; DATA XREF: main+62↑o
.text:0000000000002330
.text:0000000000002330 var_A8          = qword ptr -0A8h
.text:0000000000002330 var_A0          = qword ptr -0A0h
.text:0000000000002330 var_98          = qword ptr -98h
.text:0000000000002330 var_90          = qword ptr -90h
.text:0000000000002330 var_88          = qword ptr -88h
.text:0000000000002330 var_80          = qword ptr -80h
.text:0000000000002330 var_78          = qword ptr -78h
.text:0000000000002330 var_70          = qword ptr -70h
.text:0000000000002330 var_68          = qword ptr -68h
.text:0000000000002330 var_60          = qword ptr -60h
.text:0000000000002330 var_58          = qword ptr -58h
.text:0000000000002330 var_50          = qword ptr -50h
.text:0000000000002330 var_48          = qword ptr -48h
.text:0000000000002330 var_40          = qword ptr -40h
.text:0000000000002330 var_30          = qword ptr -30h
.text:0000000000002330
.text:0000000000002330 ; __unwind {
.text:0000000000002330                 push    r13
.text:0000000000002332                 push    r12
.text:0000000000002334                 mov     edx, 5          ; category
.text:0000000000002339                 push    rbp
.text:000000000000233A                 push    rbx
.text:000000000000233B                 mov     ebp, edi
.text:000000000000233D                 sub     rsp, 88h
.text:0000000000002344                 mov     rbx, cs:program_name
.text:000000000000234B                 mov     rax, fs:28h
.text:0000000000002354                 mov     [rsp+0A8h+var_30], rax
.text:0000000000002359                 xor     eax, eax
.text:000000000000235B                 test    edi, edi
.text:000000000000235D                 jz      short loc_238D
.text:000000000000235F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000002366                 xor     edi, edi        ; domainname
.text:0000000000002368                 call    _dcgettext
.text:000000000000236D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000002374                 mov     rdx, rax
.text:0000000000002377                 mov     rcx, rbx
.text:000000000000237A                 mov     esi, 1
.text:000000000000237F                 xor     eax, eax
.text:0000000000002381                 call    ___fprintf_chk
.text:0000000000002386
.text:0000000000002386 loc_2386:                               ; CODE XREF: usage+3A2↓j
.text:0000000000002386                 mov     edi, ebp        ; status
.text:0000000000002388                 call    _exit
.text:000000000000238D ; ---------------------------------------------------------------------------
.text:000000000000238D
.text:000000000000238D loc_238D:                               ; CODE XREF: usage+2D↑j
.text:000000000000238D                 lea     rsi, aUsageSExpressi ; "Usage: %s EXPRESSION\n  or:  %s OPTION"...
.text:0000000000002394                 xor     edi, edi        ; domainname
.text:0000000000002396                 call    _dcgettext
.text:000000000000239B                 mov     edi, 1
.text:00000000000023A0                 mov     rsi, rax
.text:00000000000023A3                 mov     rcx, rbx
.text:00000000000023A6                 xor     eax, eax
.text:00000000000023A8                 mov     rdx, rbx
.text:00000000000023AB                 call    ___printf_chk
.text:00000000000023B0                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:00000000000023B7                 mov     rax, [rdi+28h]
.text:00000000000023BB                 cmp     rax, [rdi+30h]
.text:00000000000023BF                 jnb     loc_2708
.text:00000000000023C5                 lea     rdx, [rax+1]
.text:00000000000023C9                 mov     [rdi+28h], rdx
.text:00000000000023CD                 mov     byte ptr [rax], 0Ah
.text:00000000000023D0
.text:00000000000023D0 loc_23D0:                               ; CODE XREF: usage+3E2↓j
.text:00000000000023D0                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023D7                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000023DE                 mov     edx, 5          ; category
.text:00000000000023E3                 xor     edi, edi        ; domainname
.text:00000000000023E5                 call    _dcgettext
.text:00000000000023EA                 mov     rsi, rbx        ; stream
.text:00000000000023ED                 mov     rdi, rax        ; s
.text:00000000000023F0                 call    _fputs_unlocked
.text:00000000000023F5                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000023FC                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000002403                 mov     edx, 5          ; category
.text:0000000000002408                 xor     edi, edi        ; domainname
.text:000000000000240A                 call    _dcgettext
.text:000000000000240F                 mov     rsi, rbx        ; stream
.text:0000000000002412                 mov     rdi, rax        ; s
.text:0000000000002415                 call    _fputs_unlocked
.text:000000000000241A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002421                 lea     rsi, aPrintTheValueO ; "\nPrint the value of EXPRESSION to stan"...
.text:0000000000002428                 mov     edx, 5          ; category
.text:000000000000242D                 xor     edi, edi        ; domainname
.text:000000000000242F                 call    _dcgettext
.text:0000000000002434                 mov     rsi, rbx        ; stream
.text:0000000000002437                 mov     rdi, rax        ; s
.text:000000000000243A                 call    _fputs_unlocked
.text:000000000000243F                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002446                 lea     rsi, aArg1Arg2Arg1Is ; "\n  ARG1 < ARG2       ARG1 is less than"...
.text:000000000000244D                 mov     edx, 5          ; category
.text:0000000000002452                 xor     edi, edi        ; domainname
.text:0000000000002454                 call    _dcgettext
.text:0000000000002459                 mov     rsi, rbx        ; stream
.text:000000000000245C                 mov     rdi, rax        ; s
.text:000000000000245F                 call    _fputs_unlocked
.text:0000000000002464                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000246B                 lea     rsi, aArg1Arg2Arithm ; "\n  ARG1 + ARG2       arithmetic sum of"...
.text:0000000000002472                 mov     edx, 5          ; category
.text:0000000000002477                 xor     edi, edi        ; domainname
.text:0000000000002479                 call    _dcgettext
.text:000000000000247E                 mov     rsi, rbx        ; stream
.text:0000000000002481                 mov     rdi, rax        ; s
.text:0000000000002484                 call    _fputs_unlocked
.text:0000000000002489                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002490                 lea     rsi, aArg1Arg2Arithm_0 ; "\n  ARG1 * ARG2       arithmetic produc"...
.text:0000000000002497                 mov     edx, 5          ; category
.text:000000000000249C                 xor     edi, edi        ; domainname
.text:000000000000249E                 call    _dcgettext
.text:00000000000024A3                 mov     rsi, rbx        ; stream
.text:00000000000024A6                 mov     rdi, rax        ; s
.text:00000000000024A9                 call    _fputs_unlocked
.text:00000000000024AE                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024B5                 lea     rsi, aStringRegexpAn ; "\n  STRING : REGEXP   anchored pattern "...
.text:00000000000024BC                 mov     edx, 5          ; category
.text:00000000000024C1                 xor     edi, edi        ; domainname
.text:00000000000024C3                 call    _dcgettext
.text:00000000000024C8                 mov     rsi, rbx        ; stream
.text:00000000000024CB                 mov     rdi, rax        ; s
.text:00000000000024CE                 call    _fputs_unlocked
.text:00000000000024D3                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024DA                 lea     rsi, aTokenInterpret ; "  + TOKEN                    interpret "...
.text:00000000000024E1                 mov     edx, 5          ; category
.text:00000000000024E6                 xor     edi, edi        ; domainname
.text:00000000000024E8                 call    _dcgettext
.text:00000000000024ED                 mov     rsi, rbx        ; stream
.text:00000000000024F0                 mov     rdi, rax        ; s
.text:00000000000024F3                 call    _fputs_unlocked
.text:00000000000024F8                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000024FF                 lea     rsi, aBewareThatMany ; "\nBeware that many operators need to be"...
.text:0000000000002506                 mov     edx, 5          ; category
.text:000000000000250B                 xor     edi, edi        ; domainname
.text:000000000000250D                 call    _dcgettext
.text:0000000000002512                 mov     rsi, rbx        ; stream
.text:0000000000002515                 mov     rdi, rax        ; s
.text:0000000000002518                 call    _fputs_unlocked
.text:000000000000251D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000002524                 lea     rsi, aExitStatusIs0I ; "\nExit status is 0 if EXPRESSION is nei"...
.text:000000000000252B                 mov     edx, 5          ; category
.text:0000000000002530                 xor     edi, edi        ; domainname
.text:0000000000002532                 call    _dcgettext
.text:0000000000002537                 mov     rsi, rbx        ; stream
.text:000000000000253A                 mov     rdi, rax        ; s
.text:000000000000253D                 lea     rbx, aExpr      ; "expr"
.text:0000000000002544                 call    _fputs_unlocked
.text:0000000000002549                 lea     rax, asc_15F94  ; "["
.text:0000000000002550                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000002557                 mov     [rsp+0A8h+var_48], 0
.text:0000000000002560                 mov     [rsp+0A8h+var_40], 0
.text:0000000000002569                 mov     rdx, rsp
.text:000000000000256C                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000002570                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000002577                 mov     [rsp+0A8h+var_78], rcx
.text:000000000000257C                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000002583                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000002588                 lea     rax, domainname ; "coreutils"
.text:000000000000258F                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000002594                 lea     rcx, aSha512sum ; "sha512sum"
.text:000000000000259B                 mov     [rsp+0A8h+var_98], rax
.text:00000000000025A0                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:00000000000025A7                 mov     [rsp+0A8h+var_58], rcx
.text:00000000000025AC                 mov     [rsp+0A8h+var_90], rax
.text:00000000000025B1                 lea     rax, aSha224sum ; "sha224sum"
.text:00000000000025B8                 mov     [rsp+0A8h+var_88], rax
.text:00000000000025BD                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:00000000000025C4                 mov     [rsp+0A8h+var_80], rax
.text:00000000000025C9                 mov     [rsp+0A8h+var_70], rax
.text:00000000000025CE                 mov     [rsp+0A8h+var_60], rax
.text:00000000000025D3                 mov     [rsp+0A8h+var_50], rax
.text:00000000000025D8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: usage+2CD↓j
.text:00000000000025E0                 add     rdx, 10h
.text:00000000000025E4                 mov     rdi, [rdx]
.text:00000000000025E7                 test    rdi, rdi
.text:00000000000025EA                 jz      short loc_25FF
.text:00000000000025EC                 mov     ecx, 5
.text:00000000000025F1                 mov     rsi, rbx
.text:00000000000025F4                 repe cmpsb
.text:00000000000025F6                 setnbe  al
.text:00000000000025F9                 sbb     al, 0
.text:00000000000025FB                 test    al, al
.text:00000000000025FD                 jnz     short loc_25E0
.text:00000000000025FF
.text:00000000000025FF loc_25FF:                               ; CODE XREF: usage+2BA↑j
.text:00000000000025FF                 mov     r12, [rdx+8]
.text:0000000000002603                 xor     edi, edi        ; domainname
.text:0000000000002605                 mov     edx, 5          ; category
.text:000000000000260A                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000002611                 test    r12, r12
.text:0000000000002614                 jz      loc_2717
.text:000000000000261A                 call    _dcgettext
.text:000000000000261F                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002626                 lea     rdx, unk_1600A
.text:000000000000262D                 mov     rsi, rax
.text:0000000000002630                 mov     edi, 1
.text:0000000000002635                 xor     eax, eax
.text:0000000000002637                 call    ___printf_chk
.text:000000000000263C                 xor     esi, esi        ; locale
.text:000000000000263E                 mov     edi, 5          ; category
.text:0000000000002643                 call    _setlocale
.text:0000000000002648                 test    rax, rax
.text:000000000000264B                 jz      short loc_2665
.text:000000000000264D                 lea     rsi, aEn        ; "en_"
.text:0000000000002654                 mov     edx, 3          ; n
.text:0000000000002659                 mov     rdi, rax        ; s1
.text:000000000000265C                 call    _strncmp
.text:0000000000002661                 test    eax, eax
.text:0000000000002663                 jnz     short loc_26DE
.text:0000000000002665
.text:0000000000002665 loc_2665:                               ; CODE XREF: usage+31B↑j
.text:0000000000002665                                         ; usage+3D3↓j
.text:0000000000002665                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000266C                 xor     edi, edi        ; domainname
.text:000000000000266E                 mov     edx, 5          ; category
.text:0000000000002673                 call    _dcgettext
.text:0000000000002678                 lea     rcx, aExpr      ; "expr"
.text:000000000000267F                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002686                 mov     rsi, rax
.text:0000000000002689                 mov     edi, 1
.text:000000000000268E                 xor     eax, eax
.text:0000000000002690                 call    ___printf_chk
.text:0000000000002695                 cmp     r12, rbx
.text:0000000000002698                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:000000000000269F                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000026A6                 cmovz   rbx, rcx
.text:00000000000026AA
.text:00000000000026AA loc_26AA:                               ; CODE XREF: usage+474↓j
.text:00000000000026AA                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:00000000000026B1                 xor     edi, edi        ; domainname
.text:00000000000026B3                 mov     edx, 5          ; category
.text:00000000000026B8                 call    _dcgettext
.text:00000000000026BD                 mov     rcx, rbx
.text:00000000000026C0                 mov     rsi, rax
.text:00000000000026C3                 mov     rdx, r12
.text:00000000000026C6                 mov     edi, 1
.text:00000000000026CB                 xor     eax, eax
.text:00000000000026CD                 call    ___printf_chk
.text:00000000000026D2                 jmp     loc_2386
.text:00000000000026D7 ; ---------------------------------------------------------------------------
.text:00000000000026D7
.text:00000000000026D7 loc_26D7:                               ; CODE XREF: usage+430↓j
.text:00000000000026D7                 lea     r12, aExpr      ; "expr"
.text:00000000000026DE
.text:00000000000026DE loc_26DE:                               ; CODE XREF: usage+333↑j
.text:00000000000026DE                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:00000000000026E5                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:00000000000026EC                 xor     edi, edi        ; domainname
.text:00000000000026EE                 mov     edx, 5          ; category
.text:00000000000026F3                 call    _dcgettext
.text:00000000000026F8                 mov     rsi, r13        ; stream
.text:00000000000026FB                 mov     rdi, rax        ; s
.text:00000000000026FE                 call    _fputs_unlocked
.text:0000000000002703                 jmp     loc_2665
.text:0000000000002708 ; ---------------------------------------------------------------------------
.text:0000000000002708
.text:0000000000002708 loc_2708:                               ; CODE XREF: usage+8F↑j
.text:0000000000002708                 mov     esi, 0Ah        ; int
.text:000000000000270D                 call    ___overflow
.text:0000000000002712                 jmp     loc_23D0
.text:0000000000002717 ; ---------------------------------------------------------------------------
.text:0000000000002717
.text:0000000000002717 loc_2717:                               ; CODE XREF: usage+2E4↑j
.text:0000000000002717                 call    _dcgettext
.text:000000000000271C                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002723                 lea     rdx, unk_1600A
.text:000000000000272A                 mov     rsi, rax
.text:000000000000272D                 mov     edi, 1
.text:0000000000002732                 xor     eax, eax
.text:0000000000002734                 call    ___printf_chk
.text:0000000000002739                 xor     esi, esi        ; locale
.text:000000000000273B                 mov     edi, 5          ; category
.text:0000000000002740                 call    _setlocale
.text:0000000000002745                 test    rax, rax
.text:0000000000002748                 jz      short loc_2766
.text:000000000000274A                 lea     rsi, aEn        ; "en_"
.text:0000000000002751                 mov     edx, 3          ; n
.text:0000000000002756                 mov     rdi, rax        ; s1
.text:0000000000002759                 call    _strncmp
.text:000000000000275E                 test    eax, eax
.text:0000000000002760                 jnz     loc_26D7
.text:0000000000002766
.text:0000000000002766 loc_2766:                               ; CODE XREF: usage+418↑j
.text:0000000000002766                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:000000000000276D                 mov     edx, 5          ; category
.text:0000000000002772                 xor     edi, edi        ; domainname
.text:0000000000002774                 lea     r12, aExpr      ; "expr"
.text:000000000000277B                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000002782                 call    _dcgettext
.text:0000000000002787                 lea     rcx, aExpr      ; "expr"
.text:000000000000278E                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000002795                 mov     rsi, rax
.text:0000000000002798                 mov     edi, 1
.text:000000000000279D                 xor     eax, eax
.text:000000000000279F                 call    ___printf_chk
.text:00000000000027A4                 jmp     loc_26AA
.text:00000000000027A4 ; } // starts at 2330
.text:00000000000027A4 usage           endp
.text:00000000000027A4
.text:00000000000027A4 ; ---------------------------------------------------------------------------
.text:00000000000027A9                 align 10h
.text:00000000000027B0
.text:00000000000027B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000027B0
.text:00000000000027B0
.text:00000000000027B0 docolon         proc near               ; CODE XREF: eval6+2E0↓p
.text:00000000000027B0                                         ; eval5+59↓p
.text:00000000000027B0
.text:00000000000027B0 ps              = qword ptr -1F0h
.text:00000000000027B0 var_1E8         = qword ptr -1E8h
.text:00000000000027B0 ptr             = qword ptr -1E0h
.text:00000000000027B0 var_1D8         = qword ptr -1D8h
.text:00000000000027B0 var_1C8         = qword ptr -1C8h
.text:00000000000027B0 var_1C0         = qword ptr -1C0h
.text:00000000000027B0 var_1A8         = qword ptr -1A8h
.text:00000000000027B0 var_1A0         = qword ptr -1A0h
.text:00000000000027B0 var_198         = qword ptr -198h
.text:00000000000027B0 var_190         = byte ptr -190h
.text:00000000000027B0 var_188         = byte ptr -188h
.text:00000000000027B0 var_184         = qword ptr -184h
.text:00000000000027B0 var_17C         = byte ptr -17Ch
.text:00000000000027B0 s               = qword ptr -178h
.text:00000000000027B0 var_170         = qword ptr -170h
.text:00000000000027B0 var_168         = byte ptr -168h
.text:00000000000027B0 var_164         = dword ptr -164h
.text:00000000000027B0 var_148         = byte ptr -148h
.text:00000000000027B0 var_40          = qword ptr -40h
.text:00000000000027B0
.text:00000000000027B0 ; __unwind {
.text:00000000000027B0                 push    r15
.text:00000000000027B2                 push    r14
.text:00000000000027B4                 push    r13
.text:00000000000027B6                 push    r12
.text:00000000000027B8                 push    rbp
.text:00000000000027B9                 push    rbx
.text:00000000000027BA                 mov     rbp, rsi
.text:00000000000027BD                 mov     rbx, rdi
.text:00000000000027C0                 sub     rsp, 1C8h
.text:00000000000027C7                 mov     rax, fs:28h
.text:00000000000027D0                 mov     [rsp+1F8h+var_40], rax
.text:00000000000027D8                 xor     eax, eax
.text:00000000000027DA                 call    tostring
.text:00000000000027DF                 mov     rdi, rbp
.text:00000000000027E2                 call    tostring
.text:00000000000027E7                 mov     r12, [rbp+8]
.text:00000000000027EB                 lea     rax, [rsp+1F8h+var_148]
.text:00000000000027F3                 lea     rbp, [rsp+1F8h+var_1C8]
.text:00000000000027F8                 mov     [rsp+1F8h+var_1E8], 0
.text:0000000000002801                 mov     [rsp+1F8h+ptr], 0
.text:000000000000280A                 mov     [rsp+1F8h+var_1D8], 0
.text:0000000000002813                 mov     [rsp+1F8h+var_1C8], 0
.text:000000000000281C                 mov     rdi, r12        ; s
.text:000000000000281F                 mov     [rsp+1F8h+var_1C0], 0
.text:0000000000002828                 mov     [rsp+1F8h+var_1A8], rax
.text:000000000000282D                 mov     [rsp+1F8h+var_1A0], 0
.text:0000000000002836                 mov     cs:rpl_re_syntax_options, 2C6h
.text:0000000000002841                 call    _strlen
.text:0000000000002846                 mov     rdx, rbp
.text:0000000000002849                 mov     rsi, rax
.text:000000000000284C                 mov     rdi, r12
.text:000000000000284F                 call    rpl_re_compile_pattern
.text:0000000000002854                 test    rax, rax
.text:0000000000002857                 jnz     loc_2BBA
.text:000000000000285D                 mov     r12, [rbx+8]
.text:0000000000002861                 and     [rsp+1F8h+var_190], 7Fh
.text:0000000000002866                 mov     rdi, r12        ; s
.text:0000000000002869                 call    _strlen
.text:000000000000286E                 lea     r8, [rsp+1F8h+var_1E8]
.text:0000000000002873                 xor     ecx, ecx
.text:0000000000002875                 mov     rdx, rax
.text:0000000000002878                 mov     rsi, r12
.text:000000000000287B                 mov     rdi, rbp
.text:000000000000287E                 call    rpl_re_match
.text:0000000000002883                 test    rax, rax
.text:0000000000002886                 mov     r15, rax
.text:0000000000002889                 js      loc_2958
.text:000000000000288F                 mov     r14, [rsp+1F8h+var_198]
.text:0000000000002894                 test    r14, r14
.text:0000000000002897                 jz      loc_2920
.text:000000000000289D                 mov     rax, [rsp+1F8h+var_1D8]
.text:00000000000028A2                 mov     rdx, [rbx+8]
.text:00000000000028A6                 mov     rax, [rax+8]
.text:00000000000028AA                 mov     byte ptr [rdx+rax], 0
.text:00000000000028AE                 mov     rax, [rsp+1F8h+ptr]
.text:00000000000028B3                 mov     rdi, [rax+8]
.text:00000000000028B7                 add     rdi, [rbx+8]    ; src
.text:00000000000028BB                 call    str_value
.text:00000000000028C0                 mov     rbx, rax
.text:00000000000028C3
.text:00000000000028C3 loc_28C3:                               ; CODE XREF: docolon+19D↓j
.text:00000000000028C3                                         ; docolon+1C9↓j ...
.text:00000000000028C3                 cmp     [rsp+1F8h+var_1E8], 0
.text:00000000000028C9                 jz      short loc_28DF
.text:00000000000028CB                 mov     rdi, [rsp+1F8h+ptr] ; ptr
.text:00000000000028D0                 call    _free
.text:00000000000028D5                 mov     rdi, [rsp+1F8h+var_1D8] ; ptr
.text:00000000000028DA                 call    _free
.text:00000000000028DF
.text:00000000000028DF loc_28DF:                               ; CODE XREF: docolon+119↑j
.text:00000000000028DF                 mov     rdi, rbp
.text:00000000000028E2                 mov     [rsp+1F8h+var_1A8], 0
.text:00000000000028EB                 call    regfree
.text:00000000000028F0                 mov     rcx, [rsp+1F8h+var_40]
.text:00000000000028F8                 xor     rcx, fs:28h
.text:0000000000002901                 mov     rax, rbx
.text:0000000000002904                 jnz     loc_2BD2
.text:000000000000290A                 add     rsp, 1C8h
.text:0000000000002911                 pop     rbx
.text:0000000000002912                 pop     rbp
.text:0000000000002913                 pop     r12
.text:0000000000002915                 pop     r13
.text:0000000000002917                 pop     r14
.text:0000000000002919                 pop     r15
.text:000000000000291B                 retn
.text:000000000000291B ; ---------------------------------------------------------------------------
.text:000000000000291C                 align 20h
.text:0000000000002920
.text:0000000000002920 loc_2920:                               ; CODE XREF: docolon+E7↑j
.text:0000000000002920                 call    ___ctype_get_mb_cur_max
.text:0000000000002925                 cmp     rax, 1
.text:0000000000002929                 mov     r12, r15
.text:000000000000292C                 jnz     short loc_29A8
.text:000000000000292E
.text:000000000000292E loc_292E:                               ; CODE XREF: docolon+3C3↓j
.text:000000000000292E                 mov     edi, 18h
.text:0000000000002933                 call    xmalloc
.text:0000000000002938                 lea     rdi, [rax+8]
.text:000000000000293C                 mov     dword ptr [rax], 0
.text:0000000000002942                 mov     rsi, r12
.text:0000000000002945                 mov     rbx, rax
.text:0000000000002948                 call    ___gmpz_init_set_ui
.text:000000000000294D                 jmp     loc_28C3
.text:000000000000294D ; ---------------------------------------------------------------------------
.text:0000000000002952                 align 8
.text:0000000000002958
.text:0000000000002958 loc_2958:                               ; CODE XREF: docolon+D9↑j
.text:0000000000002958                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000295C                 jnz     loc_2BF6
.text:0000000000002962                 cmp     [rsp+1F8h+var_198], 0
.text:0000000000002968                 jz      short loc_2980
.text:000000000000296A                 lea     rdi, aWrittenBySSAnd+1Bh ; src
.text:0000000000002971                 call    str_value
.text:0000000000002976                 mov     rbx, rax
.text:0000000000002979                 jmp     loc_28C3
.text:0000000000002979 ; ---------------------------------------------------------------------------
.text:000000000000297E                 align 20h
.text:0000000000002980
.text:0000000000002980 loc_2980:                               ; CODE XREF: docolon+1B8↑j
.text:0000000000002980                 mov     edi, 18h
.text:0000000000002985                 call    xmalloc
.text:000000000000298A                 lea     rdi, [rax+8]
.text:000000000000298E                 mov     dword ptr [rax], 0
.text:0000000000002994                 xor     esi, esi
.text:0000000000002996                 mov     rbx, rax
.text:0000000000002999                 call    ___gmpz_init_set_ui
.text:000000000000299E                 jmp     loc_28C3
.text:000000000000299E ; ---------------------------------------------------------------------------
.text:00000000000029A3                 align 8
.text:00000000000029A8
.text:00000000000029A8 loc_29A8:                               ; CODE XREF: docolon+17C↑j
.text:00000000000029A8                 lea     r13, [rsp+1F8h+var_188]
.text:00000000000029AD                 mov     r12, [rbx+8]
.text:00000000000029B1                 mov     [rsp+1F8h+var_188], 0
.text:00000000000029B6                 mov     [rsp+1F8h+var_184], 0
.text:00000000000029BF                 mov     [rsp+1F8h+var_17C], 0
.text:00000000000029C4                 lea     rax, [r13+4]
.text:00000000000029C8                 mov     [rsp+1F8h+s], r12
.text:00000000000029D0                 mov     [rsp+1F8h+ps], rax
.text:00000000000029D5                 jmp     loc_2A68
.text:00000000000029D5 ; ---------------------------------------------------------------------------
.text:00000000000029DA                 align 20h
.text:00000000000029E0
.text:00000000000029E0 loc_29E0:                               ; CODE XREF: docolon+2BD↓j
.text:00000000000029E0                 mov     rbx, [rsp+1F8h+s]
.text:00000000000029E8                 lea     rcx, is_basic_table
.text:00000000000029EF                 movzx   edx, byte ptr [rbx]
.text:00000000000029F2                 mov     eax, edx
.text:00000000000029F4                 shr     al, 5
.text:00000000000029F7                 and     eax, 7
.text:00000000000029FA                 mov     eax, [rcx+rax*4]
.text:00000000000029FD                 bt      eax, edx
.text:0000000000002A00                 jnb     loc_2B18
.text:0000000000002A06                 mov     [rsp+1F8h+var_170], 1
.text:0000000000002A12                 movsx   eax, byte ptr [rbx]
.text:0000000000002A15                 mov     [rsp+1F8h+var_168], 1
.text:0000000000002A1D                 mov     [rsp+1F8h+var_17C], 1
.text:0000000000002A22                 mov     [rsp+1F8h+var_164], eax
.text:0000000000002A29
.text:0000000000002A29 loc_2A29:                               ; CODE XREF: docolon+35E↓j
.text:0000000000002A29                                         ; docolon+405↓j
.text:0000000000002A29                 mov     eax, [rsp+1F8h+var_164]
.text:0000000000002A30                 test    eax, eax
.text:0000000000002A32                 jz      loc_2B70
.text:0000000000002A38                 mov     rbx, [rsp+1F8h+s]
.text:0000000000002A40
.text:0000000000002A40 loc_2A40:                               ; CODE XREF: docolon+3F5↓j
.text:0000000000002A40                 mov     rax, rbx
.text:0000000000002A43                 sub     rax, r12
.text:0000000000002A46                 cmp     rax, r15
.text:0000000000002A49                 jnb     loc_2B70
.text:0000000000002A4F
.text:0000000000002A4F loc_2A4F:                               ; CODE XREF: docolon+3B2↓j
.text:0000000000002A4F                 add     rbx, [rsp+1F8h+var_170]
.text:0000000000002A57                 add     r14, 1
.text:0000000000002A5B                 mov     [rsp+1F8h+var_17C], 0
.text:0000000000002A60                 mov     [rsp+1F8h+s], rbx
.text:0000000000002A68
.text:0000000000002A68 loc_2A68:                               ; CODE XREF: docolon+225↑j
.text:0000000000002A68                 cmp     [rsp+1F8h+var_188], 0
.text:0000000000002A6D                 jz      loc_29E0
.text:0000000000002A73
.text:0000000000002A73 loc_2A73:                               ; CODE XREF: docolon+37F↓j
.text:0000000000002A73                 call    ___ctype_get_mb_cur_max
.text:0000000000002A78                 mov     rbx, [rsp+1F8h+s]
.text:0000000000002A80                 mov     rsi, rax
.text:0000000000002A83                 mov     rdi, rbx
.text:0000000000002A86                 call    strnlen1
.text:0000000000002A8B                 lea     rcx, [r13+4]
.text:0000000000002A8F                 lea     rdi, [r13+24h]
.text:0000000000002A93                 mov     rdx, rax
.text:0000000000002A96                 mov     rsi, rbx
.text:0000000000002A99                 call    rpl_mbrtowc
.text:0000000000002A9E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002AA2                 mov     [rsp+1F8h+var_170], rax
.text:0000000000002AAA                 jz      loc_2B38
.text:0000000000002AB0                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002AB4                 jz      loc_2B80
.text:0000000000002ABA                 test    rax, rax
.text:0000000000002ABD                 jnz     short loc_2AEB
.text:0000000000002ABF                 mov     rbx, [rsp+1F8h+s]
.text:0000000000002AC7                 mov     [rsp+1F8h+var_170], 1
.text:0000000000002AD3                 cmp     byte ptr [rbx], 0
.text:0000000000002AD6                 jnz     loc_2C2B
.text:0000000000002ADC                 mov     edx, [rsp+1F8h+var_164]
.text:0000000000002AE3                 test    edx, edx
.text:0000000000002AE5                 jnz     loc_2C26
.text:0000000000002AEB
.text:0000000000002AEB loc_2AEB:                               ; CODE XREF: docolon+30D↑j
.text:0000000000002AEB                 lea     rdi, [r13+4]    ; ps
.text:0000000000002AEF                 mov     [rsp+1F8h+var_168], 1
.text:0000000000002AF7                 call    _mbsinit
.text:0000000000002AFC                 test    eax, eax
.text:0000000000002AFE                 jz      loc_2BB0
.text:0000000000002B04                 mov     [rsp+1F8h+var_188], 0
.text:0000000000002B09                 mov     [rsp+1F8h+var_17C], 1
.text:0000000000002B0E                 jmp     loc_2A29
.text:0000000000002B0E ; ---------------------------------------------------------------------------
.text:0000000000002B13                 align 8
.text:0000000000002B18
.text:0000000000002B18 loc_2B18:                               ; CODE XREF: docolon+250↑j
.text:0000000000002B18                 mov     rdi, [rsp+1F8h+ps] ; ps
.text:0000000000002B1D                 call    _mbsinit
.text:0000000000002B22                 test    eax, eax
.text:0000000000002B24                 jz      loc_2BD7
.text:0000000000002B2A                 mov     [rsp+1F8h+var_188], 1
.text:0000000000002B2F                 jmp     loc_2A73
.text:0000000000002B2F ; ---------------------------------------------------------------------------
.text:0000000000002B34                 align 8
.text:0000000000002B38
.text:0000000000002B38 loc_2B38:                               ; CODE XREF: docolon+2FA↑j
.text:0000000000002B38                 mov     rbx, [rsp+1F8h+s]
.text:0000000000002B40                 mov     [rsp+1F8h+var_170], 1
.text:0000000000002B4C                 mov     [rsp+1F8h+var_168], 0
.text:0000000000002B54                 mov     [rsp+1F8h+var_17C], 1
.text:0000000000002B59                 mov     rax, rbx
.text:0000000000002B5C                 sub     rax, r12
.text:0000000000002B5F                 cmp     rax, r15
.text:0000000000002B62                 jb      loc_2A4F
.text:0000000000002B68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: docolon+282↑j
.text:0000000000002B70                                         ; docolon+299↑j
.text:0000000000002B70                 mov     r12, r14
.text:0000000000002B73                 jmp     loc_292E
.text:0000000000002B73 ; ---------------------------------------------------------------------------
.text:0000000000002B78                 align 20h
.text:0000000000002B80
.text:0000000000002B80 loc_2B80:                               ; CODE XREF: docolon+304↑j
.text:0000000000002B80                 mov     rbx, [rsp+1F8h+s]
.text:0000000000002B88                 mov     rdi, rbx        ; s
.text:0000000000002B8B                 call    _strlen
.text:0000000000002B90                 mov     [rsp+1F8h+var_168], 0
.text:0000000000002B98                 mov     [rsp+1F8h+var_170], rax
.text:0000000000002BA0                 mov     [rsp+1F8h+var_17C], 1
.text:0000000000002BA5                 jmp     loc_2A40
.text:0000000000002BA5 ; ---------------------------------------------------------------------------
.text:0000000000002BAA                 align 10h
.text:0000000000002BB0
.text:0000000000002BB0 loc_2BB0:                               ; CODE XREF: docolon+34E↑j
.text:0000000000002BB0                 mov     [rsp+1F8h+var_17C], 1
.text:0000000000002BB5                 jmp     loc_2A29
.text:0000000000002BBA ; ---------------------------------------------------------------------------
.text:0000000000002BBA
.text:0000000000002BBA loc_2BBA:                               ; CODE XREF: docolon+A7↑j
.text:0000000000002BBA                 lea     rdx, format+4   ; format
.text:0000000000002BC1                 mov     rcx, rax
.text:0000000000002BC4                 xor     esi, esi        ; errnum
.text:0000000000002BC6                 mov     edi, 2          ; status
.text:0000000000002BCB                 xor     eax, eax
.text:0000000000002BCD                 call    _error
.text:0000000000002BD2
.text:0000000000002BD2 loc_2BD2:                               ; CODE XREF: docolon+154↑j
.text:0000000000002BD2                 call    ___stack_chk_fail
.text:0000000000002BD7 ; ---------------------------------------------------------------------------
.text:0000000000002BD7
.text:0000000000002BD7 loc_2BD7:                               ; CODE XREF: docolon+374↑j
.text:0000000000002BD7                 lea     rcx, __PRETTY_FUNCTION___7929 ; "mbuiter_multi_next"
.text:0000000000002BDE                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000002BE5                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:0000000000002BEC                 mov     edx, 96h        ; line
.text:0000000000002BF1                 call    ___assert_fail
.text:0000000000002BF6 ; ---------------------------------------------------------------------------
.text:0000000000002BF6
.text:0000000000002BF6 loc_2BF6:                               ; CODE XREF: docolon+1AC↑j
.text:0000000000002BF6                 lea     rsi, aErrorInRegular ; "error in regular expression matcher"
.text:0000000000002BFD                 xor     edi, edi        ; domainname
.text:0000000000002BFF                 mov     edx, 5          ; category
.text:0000000000002C04                 call    _dcgettext
.text:0000000000002C09                 cmp     r15, 0FFFFFFFFFFFFFFFEh
.text:0000000000002C0D                 mov     rbx, rax
.text:0000000000002C10                 mov     esi, 4Bh ; 'K'  ; errnum
.text:0000000000002C15                 jz      short loc_2C4A
.text:0000000000002C17
.text:0000000000002C17 loc_2C17:                               ; CODE XREF: docolon+4A1↓j
.text:0000000000002C17                 mov     rdx, rbx        ; format
.text:0000000000002C1A                 mov     edi, 3          ; status
.text:0000000000002C1F                 xor     eax, eax
.text:0000000000002C21                 call    _error
.text:0000000000002C26
.text:0000000000002C26 loc_2C26:                               ; CODE XREF: docolon+335↑j
.text:0000000000002C26                 call    mbuiter_multi_next_part_2
.text:0000000000002C2B ; ---------------------------------------------------------------------------
.text:0000000000002C2B
.text:0000000000002C2B loc_2C2B:                               ; CODE XREF: docolon+326↑j
.text:0000000000002C2B                 lea     rcx, __PRETTY_FUNCTION___7929 ; "mbuiter_multi_next"
.text:0000000000002C32                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000002C39                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:0000000000002C40                 mov     edx, 0B2h       ; line
.text:0000000000002C45                 call    ___assert_fail
.text:0000000000002C4A ; ---------------------------------------------------------------------------
.text:0000000000002C4A
.text:0000000000002C4A loc_2C4A:                               ; CODE XREF: docolon+465↑j
.text:0000000000002C4A                 call    ___errno_location
.text:0000000000002C4F                 mov     esi, [rax]
.text:0000000000002C51                 jmp     short loc_2C17
.text:0000000000002C51 ; } // starts at 27B0
.text:0000000000002C51 docolon         endp
.text:0000000000002C51
.text:0000000000002C51 ; ---------------------------------------------------------------------------
.text:0000000000002C53                 align 20h
.text:0000000000002C60
.text:0000000000002C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000002C60
.text:0000000000002C60
.text:0000000000002C60 eval6           proc near               ; CODE XREF: eval6+173↓p
.text:0000000000002C60                                         ; eval6+1C3↓p ...
.text:0000000000002C60
.text:0000000000002C60 ptr             = qword ptr -138h
.text:0000000000002C60 dest            = qword ptr -130h
.text:0000000000002C60 var_128         = qword ptr -128h
.text:0000000000002C60 var_120         = qword ptr -120h
.text:0000000000002C60 var_118         = qword ptr -118h
.text:0000000000002C60 ps              = qword ptr -110h
.text:0000000000002C60 var_108         = byte ptr -108h
.text:0000000000002C60 var_104         = qword ptr -104h
.text:0000000000002C60 var_FC          = byte ptr -0FCh
.text:0000000000002C60 s2              = qword ptr -0F8h
.text:0000000000002C60 var_F0          = qword ptr -0F0h
.text:0000000000002C60 var_E8          = byte ptr -0E8h
.text:0000000000002C60 var_E4          = dword ptr -0E4h
.text:0000000000002C60 var_C8          = byte ptr -0C8h
.text:0000000000002C60 var_BC          = byte ptr -0BCh
.text:0000000000002C60 s1              = qword ptr -0B8h
.text:0000000000002C60 n               = qword ptr -0B0h
.text:0000000000002C60 var_A8          = byte ptr -0A8h
.text:0000000000002C60 var_A4          = dword ptr -0A4h
.text:0000000000002C60 var_88          = byte ptr -88h
.text:0000000000002C60 var_84          = qword ptr -84h
.text:0000000000002C60 var_7C          = byte ptr -7Ch
.text:0000000000002C60 src             = qword ptr -78h
.text:0000000000002C60 var_70          = qword ptr -70h
.text:0000000000002C60 var_68          = byte ptr -68h
.text:0000000000002C60 var_64          = dword ptr -64h
.text:0000000000002C60 var_40          = qword ptr -40h
.text:0000000000002C60
.text:0000000000002C60 ; __unwind {
.text:0000000000002C60                 push    r15
.text:0000000000002C62                 push    r14
.text:0000000000002C64                 push    r13
.text:0000000000002C66                 push    r12
.text:0000000000002C68                 push    rbp
.text:0000000000002C69                 push    rbx
.text:0000000000002C6A                 mov     ebx, edi
.text:0000000000002C6C                 lea     rdi, shortopts  ; "+"
.text:0000000000002C73                 sub     rsp, 108h
.text:0000000000002C7A                 mov     rax, fs:28h
.text:0000000000002C83                 mov     [rsp+138h+var_40], rax
.text:0000000000002C8B                 xor     eax, eax
.text:0000000000002C8D                 call    nextarg
.text:0000000000002C92                 test    al, al
.text:0000000000002C94                 jnz     loc_2D80
.text:0000000000002C9A                 lea     rdi, aLength    ; "length"
.text:0000000000002CA1                 movzx   r15d, bl
.text:0000000000002CA5                 call    nextarg
.text:0000000000002CAA                 test    al, al
.text:0000000000002CAC                 jnz     loc_2DD0
.text:0000000000002CB2                 lea     rdi, aMatch     ; "match"
.text:0000000000002CB9                 call    nextarg
.text:0000000000002CBE                 test    al, al
.text:0000000000002CC0                 jnz     loc_2F20
.text:0000000000002CC6                 lea     rdi, aIndex     ; "index"
.text:0000000000002CCD                 call    nextarg
.text:0000000000002CD2                 test    al, al
.text:0000000000002CD4                 mov     r14d, eax
.text:0000000000002CD7                 jnz     loc_2FA0
.text:0000000000002CDD                 lea     rdi, aSubstr    ; "substr"
.text:0000000000002CE4                 call    nextarg
.text:0000000000002CE9                 test    al, al
.text:0000000000002CEB                 jnz     loc_2E20
.text:0000000000002CF1                 call    require_more_args
.text:0000000000002CF6                 lea     rdi, asc_16081  ; "("
.text:0000000000002CFD                 call    nextarg
.text:0000000000002D02                 test    al, al
.text:0000000000002D04                 jz      loc_2F60
.text:0000000000002D0A                 mov     edi, r15d
.text:0000000000002D0D                 call    eval
.text:0000000000002D12                 mov     r13, rax
.text:0000000000002D15                 mov     rax, cs:args
.text:0000000000002D1C                 cmp     qword ptr [rax], 0
.text:0000000000002D20                 jz      loc_37C8
.text:0000000000002D26                 lea     rdi, aC+2       ; s2
.text:0000000000002D2D                 call    nextarg
.text:0000000000002D32                 test    al, al
.text:0000000000002D34                 jnz     short loc_2DA2
.text:0000000000002D36                 mov     rax, cs:args
.text:0000000000002D3D                 mov     esi, 8
.text:0000000000002D42                 xor     edi, edi
.text:0000000000002D44                 mov     rdx, [rax]
.text:0000000000002D47                 call    quotearg_n_style
.text:0000000000002D4C                 lea     rsi, aSyntaxErrorExp ; "syntax error: expecting ')' instead of "...
.text:0000000000002D53                 mov     rbx, rax
.text:0000000000002D56                 mov     edx, 5          ; category
.text:0000000000002D5B                 xor     edi, edi        ; domainname
.text:0000000000002D5D                 call    _dcgettext
.text:0000000000002D62                 mov     rcx, rbx
.text:0000000000002D65                 mov     rdx, rax        ; format
.text:0000000000002D68                 xor     esi, esi        ; errnum
.text:0000000000002D6A                 mov     edi, 2          ; status
.text:0000000000002D6F                 xor     eax, eax
.text:0000000000002D71                 call    _error
.text:0000000000002D76                 db      2Eh
.text:0000000000002D76                 nop     word ptr [rax+rax+00000000h]
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: eval6+34↑j
.text:0000000000002D80                 call    require_more_args
.text:0000000000002D85
.text:0000000000002D85 loc_2D85:                               ; CODE XREF: eval6+30E↓j
.text:0000000000002D85                 mov     rax, cs:args
.text:0000000000002D8C                 mov     rdi, [rax]      ; src
.text:0000000000002D8F                 lea     rdx, [rax+8]
.text:0000000000002D93                 mov     cs:args, rdx
.text:0000000000002D9A                 call    str_value
.text:0000000000002D9F                 mov     r13, rax
.text:0000000000002DA2
.text:0000000000002DA2 loc_2DA2:                               ; CODE XREF: eval6+D4↑j
.text:0000000000002DA2                                         ; eval6+1B6↓j ...
.text:0000000000002DA2                 mov     rcx, [rsp+138h+var_40]
.text:0000000000002DAA                 xor     rcx, fs:28h
.text:0000000000002DB3                 mov     rax, r13
.text:0000000000002DB6                 jnz     loc_3780
.text:0000000000002DBC                 add     rsp, 108h
.text:0000000000002DC3                 pop     rbx
.text:0000000000002DC4                 pop     rbp
.text:0000000000002DC5                 pop     r12
.text:0000000000002DC7                 pop     r13
.text:0000000000002DC9                 pop     r14
.text:0000000000002DCB                 pop     r15
.text:0000000000002DCD                 retn
.text:0000000000002DCD ; ---------------------------------------------------------------------------
.text:0000000000002DCE                 align 10h
.text:0000000000002DD0
.text:0000000000002DD0 loc_2DD0:                               ; CODE XREF: eval6+4C↑j
.text:0000000000002DD0                 mov     edi, r15d
.text:0000000000002DD3                 call    eval6
.text:0000000000002DD8                 mov     rbx, rax
.text:0000000000002DDB                 mov     rdi, rax
.text:0000000000002DDE                 call    tostring
.text:0000000000002DE3                 mov     rdi, [rbx+8]    ; s
.text:0000000000002DE7                 call    mbslen
.text:0000000000002DEC                 mov     edi, 18h
.text:0000000000002DF1                 mov     rbp, rax
.text:0000000000002DF4                 call    xmalloc
.text:0000000000002DF9                 lea     rdi, [rax+8]
.text:0000000000002DFD                 mov     dword ptr [rax], 0
.text:0000000000002E03                 mov     rsi, rbp
.text:0000000000002E06                 mov     r13, rax
.text:0000000000002E09                 call    ___gmpz_init_set_ui
.text:0000000000002E0E                 mov     rdi, rbx        ; ptr
.text:0000000000002E11                 call    freev
.text:0000000000002E16                 jmp     short loc_2DA2
.text:0000000000002E16 ; ---------------------------------------------------------------------------
.text:0000000000002E18                 align 20h
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: eval6+8B↑j
.text:0000000000002E20                 mov     edi, r15d
.text:0000000000002E23                 call    eval6
.text:0000000000002E28                 mov     edi, r15d
.text:0000000000002E2B                 mov     rbp, rax
.text:0000000000002E2E                 call    eval6
.text:0000000000002E33                 mov     edi, r15d
.text:0000000000002E36                 mov     rbx, rax
.text:0000000000002E39                 call    eval6
.text:0000000000002E3E                 mov     rdi, rbp
.text:0000000000002E41                 mov     r12, rax
.text:0000000000002E44                 call    tostring
.text:0000000000002E49                 mov     rdi, rbx
.text:0000000000002E4C                 call    toarith
.text:0000000000002E51                 test    al, al
.text:0000000000002E53                 jz      loc_3010
.text:0000000000002E59                 mov     rdi, r12
.text:0000000000002E5C                 call    toarith
.text:0000000000002E61                 test    al, al
.text:0000000000002E63                 jz      loc_3010
.text:0000000000002E69                 mov     edx, [rbx+0Ch]
.text:0000000000002E6C                 mov     r13, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E73                 test    edx, edx
.text:0000000000002E75                 js      short loc_2E87
.text:0000000000002E77                 cmp     edx, 1
.text:0000000000002E7A                 mov     r13, 0FFFFFFFFFFFFFFFEh
.text:0000000000002E81                 jle     loc_36DA
.text:0000000000002E87
.text:0000000000002E87 loc_2E87:                               ; CODE XREF: eval6+215↑j
.text:0000000000002E87                                         ; eval6+A9A↓j ...
.text:0000000000002E87                 mov     eax, [r12+0Ch]
.text:0000000000002E8C                 mov     r15, 0FFFFFFFFFFFFFFFFh
.text:0000000000002E93                 test    eax, eax
.text:0000000000002E95                 js      short loc_2EA7
.text:0000000000002E97                 cmp     eax, 1
.text:0000000000002E9A                 mov     r15, 0FFFFFFFFFFFFFFFEh
.text:0000000000002EA1                 jle     loc_36B6
.text:0000000000002EA7
.text:0000000000002EA7 loc_2EA7:                               ; CODE XREF: eval6+235↑j
.text:0000000000002EA7                                         ; eval6+A75↓j ...
.text:0000000000002EA7                 mov     rax, [rbp+8]
.text:0000000000002EAB                 mov     rdi, rax        ; s
.text:0000000000002EAE                 mov     [rsp+138h+dest], rax
.text:0000000000002EB3                 call    _strlen
.text:0000000000002EB8                 mov     [rsp+138h+ptr], rax
.text:0000000000002EBC                 call    ___ctype_get_mb_cur_max
.text:0000000000002EC1                 cmp     rax, 1
.text:0000000000002EC5                 mov     rdx, [rsp+138h+ptr]
.text:0000000000002EC9                 jbe     short loc_2ED8
.text:0000000000002ECB                 mov     rdi, [rsp+138h+dest] ; s
.text:0000000000002ED0                 call    mbslen
.text:0000000000002ED5                 mov     rdx, rax
.text:0000000000002ED8
.text:0000000000002ED8 loc_2ED8:                               ; CODE XREF: eval6+269↑j
.text:0000000000002ED8                 cmp     r13, rdx
.text:0000000000002EDB                 ja      short loc_2EF0
.text:0000000000002EDD                 test    r14b, r14b
.text:0000000000002EE0                 jnz     short loc_2EF0
.text:0000000000002EE2                 lea     rax, [r15-1]
.text:0000000000002EE6                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000002EEA                 jbe     loc_343A
.text:0000000000002EF0
.text:0000000000002EF0 loc_2EF0:                               ; CODE XREF: eval6+27B↑j
.text:0000000000002EF0                                         ; eval6+280↑j
.text:0000000000002EF0                 lea     rdi, aWrittenBySSAnd+1Bh ; src
.text:0000000000002EF7                 call    xstrdup
.text:0000000000002EFC                 mov     [rsp+138h+ptr], rax
.text:0000000000002F00
.text:0000000000002F00 loc_2F00:                               ; CODE XREF: eval6+A33↓j
.text:0000000000002F00                 mov     r14, [rsp+138h+ptr]
.text:0000000000002F04                 mov     rdi, r14        ; src
.text:0000000000002F07                 call    str_value
.text:0000000000002F0C                 mov     rdi, r14        ; ptr
.text:0000000000002F0F                 mov     r13, rax
.text:0000000000002F12                 call    _free
.text:0000000000002F17                 jmp     loc_301F
.text:0000000000002F17 ; ---------------------------------------------------------------------------
.text:0000000000002F1C                 align 20h
.text:0000000000002F20
.text:0000000000002F20 loc_2F20:                               ; CODE XREF: eval6+60↑j
.text:0000000000002F20                 mov     edi, r15d
.text:0000000000002F23                 call    eval6
.text:0000000000002F28                 mov     edi, r15d
.text:0000000000002F2B                 mov     r13, rax
.text:0000000000002F2E                 call    eval6
.text:0000000000002F33                 test    bl, bl
.text:0000000000002F35                 mov     rbp, rax
.text:0000000000002F38                 jz      short loc_2F53
.text:0000000000002F3A                 mov     rdi, r13
.text:0000000000002F3D                 mov     rsi, rax
.text:0000000000002F40                 call    docolon
.text:0000000000002F45                 mov     rbx, rax
.text:0000000000002F48                 mov     rdi, r13        ; ptr
.text:0000000000002F4B                 mov     r13, rbx
.text:0000000000002F4E                 call    freev
.text:0000000000002F53
.text:0000000000002F53 loc_2F53:                               ; CODE XREF: eval6+2D8↑j
.text:0000000000002F53                 mov     rdi, rbp        ; ptr
.text:0000000000002F56                 call    freev
.text:0000000000002F5B                 jmp     loc_2DA2
.text:0000000000002F60 ; ---------------------------------------------------------------------------
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: eval6+A4↑j
.text:0000000000002F60                 lea     rdi, aC+2       ; s2
.text:0000000000002F67                 call    nextarg
.text:0000000000002F6C                 test    al, al
.text:0000000000002F6E                 jz      loc_2D85
.text:0000000000002F74                 lea     rsi, aSyntaxErrorUne_0 ; "syntax error: unexpected ')'"
.text:0000000000002F7B                 mov     edx, 5          ; category
.text:0000000000002F80                 xor     edi, edi        ; domainname
.text:0000000000002F82                 call    _dcgettext
.text:0000000000002F87                 xor     esi, esi        ; errnum
.text:0000000000002F89                 mov     rdx, rax        ; format
.text:0000000000002F8C                 mov     edi, 2          ; status
.text:0000000000002F91                 xor     eax, eax
.text:0000000000002F93                 call    _error
.text:0000000000002F98                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002FA0
.text:0000000000002FA0 loc_2FA0:                               ; CODE XREF: eval6+77↑j
.text:0000000000002FA0                 mov     edi, r15d
.text:0000000000002FA3                 call    eval6
.text:0000000000002FA8                 mov     edi, r15d
.text:0000000000002FAB                 mov     r12, rax
.text:0000000000002FAE                 call    eval6
.text:0000000000002FB3                 mov     rdi, r12
.text:0000000000002FB6                 mov     rbx, rax
.text:0000000000002FB9                 call    tostring
.text:0000000000002FBE                 mov     rdi, rbx
.text:0000000000002FC1                 call    tostring
.text:0000000000002FC6                 mov     r13, [rbx+8]
.text:0000000000002FCA                 cmp     byte ptr [r13+0], 0
.text:0000000000002FCF                 jnz     short loc_3040
.text:0000000000002FD1
.text:0000000000002FD1 loc_2FD1:                               ; CODE XREF: eval6+400↓j
.text:0000000000002FD1                                         ; eval6+48B↓j ...
.text:0000000000002FD1                 xor     ebp, ebp
.text:0000000000002FD3
.text:0000000000002FD3 loc_2FD3:                               ; CODE XREF: eval6+40A↓j
.text:0000000000002FD3                                         ; eval6+4A8↓j ...
.text:0000000000002FD3                 mov     edi, 18h
.text:0000000000002FD8                 call    xmalloc
.text:0000000000002FDD                 lea     rdi, [rax+8]
.text:0000000000002FE1                 mov     dword ptr [rax], 0
.text:0000000000002FE7                 mov     rsi, rbp
.text:0000000000002FEA                 mov     r13, rax
.text:0000000000002FED                 call    ___gmpz_init_set_ui
.text:0000000000002FF2                 mov     rdi, r12        ; ptr
.text:0000000000002FF5                 call    freev
.text:0000000000002FFA                 mov     rdi, rbx        ; ptr
.text:0000000000002FFD                 call    freev
.text:0000000000003002                 jmp     loc_2DA2
.text:0000000000003002 ; ---------------------------------------------------------------------------
.text:0000000000003007                 align 10h
.text:0000000000003010
.text:0000000000003010 loc_3010:                               ; CODE XREF: eval6+1F3↑j
.text:0000000000003010                                         ; eval6+203↑j
.text:0000000000003010                 lea     rdi, aWrittenBySSAnd+1Bh ; src
.text:0000000000003017                 call    str_value
.text:000000000000301C                 mov     r13, rax
.text:000000000000301F
.text:000000000000301F loc_301F:                               ; CODE XREF: eval6+2B7↑j
.text:000000000000301F                 mov     rdi, rbp        ; ptr
.text:0000000000003022                 call    freev
.text:0000000000003027                 mov     rdi, rbx        ; ptr
.text:000000000000302A                 call    freev
.text:000000000000302F                 mov     rdi, r12        ; ptr
.text:0000000000003032                 call    freev
.text:0000000000003037                 jmp     loc_2DA2
.text:0000000000003037 ; ---------------------------------------------------------------------------
.text:000000000000303C                 align 20h
.text:0000000000003040
.text:0000000000003040 loc_3040:                               ; CODE XREF: eval6+36F↑j
.text:0000000000003040                 mov     r14, [r12+8]
.text:0000000000003045                 call    ___ctype_get_mb_cur_max
.text:000000000000304A                 cmp     rax, 1
.text:000000000000304E                 ja      short loc_3070
.text:0000000000003050                 mov     rsi, r13        ; reject
.text:0000000000003053                 mov     rdi, r14        ; s
.text:0000000000003056                 call    _strcspn
.text:000000000000305B                 cmp     byte ptr [r14+rax], 0
.text:0000000000003060                 jz      loc_2FD1
.text:0000000000003066                 lea     rbp, [rax+1]
.text:000000000000306A                 jmp     loc_2FD3
.text:000000000000306A ; ---------------------------------------------------------------------------
.text:000000000000306F                 align 10h
.text:0000000000003070
.text:0000000000003070 loc_3070:                               ; CODE XREF: eval6+3EE↑j
.text:0000000000003070                 mov     [rsp+138h+s2], r14
.text:0000000000003075                 lea     r14, [rsp+138h+var_C8]
.text:000000000000307A                 mov     [rsp+138h+var_108], 0
.text:000000000000307F                 xor     ebp, ebp
.text:0000000000003081                 cmp     [rsp+138h+var_108], 0
.text:0000000000003086                 mov     [rsp+138h+var_104], 0
.text:000000000000308F                 lea     rax, [r14+24h]
.text:0000000000003093                 mov     [rsp+138h+var_FC], 0
.text:0000000000003098                 mov     [rsp+138h+ptr], rax
.text:000000000000309C                 lea     rax, [rsp+138h+var_108]
.text:00000000000030A1                 mov     [rsp+138h+var_128], rax
.text:00000000000030A6                 jnz     loc_312C
.text:00000000000030AC
.text:00000000000030AC loc_30AC:                               ; CODE XREF: eval6+4CA↓j
.text:00000000000030AC                 mov     rdi, [rsp+138h+s2]
.text:00000000000030B1                 lea     rsi, is_basic_table
.text:00000000000030B8                 movzx   edx, byte ptr [rdi]
.text:00000000000030BB                 mov     eax, edx
.text:00000000000030BD                 shr     al, 5
.text:00000000000030C0                 and     eax, 7
.text:00000000000030C3                 mov     eax, [rsi+rax*4]
.text:00000000000030C6                 bt      eax, edx
.text:00000000000030C9                 jnb     loc_33EA
.text:00000000000030CF                 mov     [rsp+138h+var_F0], 1
.text:00000000000030D8                 movsx   eax, byte ptr [rdi]
.text:00000000000030DB                 mov     [rsp+138h+var_E8], 1
.text:00000000000030E0                 mov     [rsp+138h+var_FC], 1
.text:00000000000030E5                 test    eax, eax
.text:00000000000030E7                 mov     [rsp+138h+var_E4], eax
.text:00000000000030EB                 jz      loc_2FD1
.text:00000000000030F1                 add     rbp, 1
.text:00000000000030F5
.text:00000000000030F5 loc_30F5:                               ; CODE XREF: eval6+586↓j
.text:00000000000030F5                                         ; eval6+7C6↓j
.text:00000000000030F5                 movsx   esi, byte ptr [rdi] ; c
.text:00000000000030F8                 mov     [rsp+138h+dest], rdi
.text:00000000000030FD                 mov     rdi, r13        ; s
.text:0000000000003100                 call    mbschr
.text:0000000000003105                 test    rax, rax
.text:0000000000003108                 jnz     loc_2FD3
.text:000000000000310E                 mov     rdx, [rsp+138h+dest]
.text:0000000000003113                 mov     edi, 1
.text:0000000000003118
.text:0000000000003118 loc_3118:                               ; CODE XREF: eval6+7D5↓j
.text:0000000000003118                 add     rdi, rdx
.text:000000000000311B                 cmp     [rsp+138h+var_108], 0
.text:0000000000003120                 mov     [rsp+138h+var_FC], 0
.text:0000000000003125                 mov     [rsp+138h+s2], rdi
.text:000000000000312A                 jz      short loc_30AC
.text:000000000000312C
.text:000000000000312C loc_312C:                               ; CODE XREF: eval6+446↑j
.text:000000000000312C                                         ; eval6+7A5↓j
.text:000000000000312C                 call    ___ctype_get_mb_cur_max
.text:0000000000003131                 mov     r8, [rsp+138h+s2]
.text:0000000000003136                 mov     rsi, rax
.text:0000000000003139                 mov     rdi, r8
.text:000000000000313C                 mov     [rsp+138h+dest], r8
.text:0000000000003141                 call    strnlen1
.text:0000000000003146                 mov     rsi, [rsp+138h+var_128]
.text:000000000000314B                 mov     r8, [rsp+138h+dest]
.text:0000000000003150                 mov     rdx, rax
.text:0000000000003153                 lea     rcx, [rsi+4]
.text:0000000000003157                 lea     rdi, [rsi+24h]
.text:000000000000315B                 mov     rsi, r8
.text:000000000000315E                 call    rpl_mbrtowc
.text:0000000000003163                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000003167                 mov     [rsp+138h+var_F0], rax
.text:000000000000316C                 jz      loc_340A
.text:0000000000003172                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000003176                 jz      loc_3698
.text:000000000000317C                 test    rax, rax
.text:000000000000317F                 jnz     short loc_31A4
.text:0000000000003181                 mov     rdi, [rsp+138h+s2]
.text:0000000000003186                 mov     [rsp+138h+var_F0], 1
.text:000000000000318F                 cmp     byte ptr [rdi], 0
.text:0000000000003192                 jnz     loc_37A9
.text:0000000000003198                 mov     esi, [rsp+138h+var_E4]
.text:000000000000319C                 test    esi, esi
.text:000000000000319E                 jnz     loc_37A4
.text:00000000000031A4
.text:00000000000031A4 loc_31A4:                               ; CODE XREF: eval6+51F↑j
.text:00000000000031A4                 mov     rax, [rsp+138h+var_128]
.text:00000000000031A9                 mov     [rsp+138h+var_E8], 1
.text:00000000000031AE                 lea     rdi, [rax+4]    ; ps
.text:00000000000031B2                 call    _mbsinit
.text:00000000000031B7                 test    eax, eax
.text:00000000000031B9                 jz      loc_36FF
.text:00000000000031BF                 mov     [rsp+138h+var_108], 0
.text:00000000000031C4                 mov     [rsp+138h+var_FC], 1
.text:00000000000031C9
.text:00000000000031C9 loc_31C9:                               ; CODE XREF: eval6+AA4↓j
.text:00000000000031C9                 mov     ecx, [rsp+138h+var_E4]
.text:00000000000031CD                 test    ecx, ecx
.text:00000000000031CF                 jz      loc_2FD1
.text:00000000000031D5
.text:00000000000031D5 loc_31D5:                               ; CODE XREF: eval6+A51↓j
.text:00000000000031D5                 add     rbp, 1
.text:00000000000031D9                 cmp     [rsp+138h+var_F0], 1
.text:00000000000031DF                 jnz     short loc_31F0
.text:00000000000031E1                 mov     rdi, [rsp+138h+s2]
.text:00000000000031E6                 jmp     loc_30F5
.text:00000000000031E6 ; ---------------------------------------------------------------------------
.text:00000000000031EB                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: eval6+57F↑j
.text:00000000000031F0                 mov     [rsp+138h+s1], r13
.text:00000000000031F8                 mov     [rsp+138h+var_C8], 0
.text:00000000000031FD                 mov     qword ptr [r14+4], 0
.text:0000000000003205                 mov     [rsp+138h+var_BC], 0
.text:000000000000320A                 jmp     loc_3292
.text:000000000000320A ; ---------------------------------------------------------------------------
.text:000000000000320F                 align 10h
.text:0000000000003210
.text:0000000000003210 loc_3210:                               ; CODE XREF: eval6+637↓j
.text:0000000000003210                 mov     rcx, [rsp+138h+s1]
.text:0000000000003218                 lea     rsi, is_basic_table
.text:000000000000321F                 movzx   edx, byte ptr [rcx]
.text:0000000000003222                 mov     eax, edx
.text:0000000000003224                 shr     al, 5
.text:0000000000003227                 and     eax, 7
.text:000000000000322A                 mov     eax, [rsi+rax*4]
.text:000000000000322D                 bt      eax, edx
.text:0000000000003230                 jnb     loc_3390
.text:0000000000003236                 mov     [rsp+138h+n], 1
.text:0000000000003242                 movsx   eax, byte ptr [rcx]
.text:0000000000003245                 mov     [rsp+138h+var_A8], 1
.text:000000000000324D                 mov     [rsp+138h+var_BC], 1
.text:0000000000003252                 mov     [rsp+138h+var_A4], eax
.text:0000000000003259
.text:0000000000003259 loc_3259:                               ; CODE XREF: eval6+6D4↓j
.text:0000000000003259                                         ; eval6+785↓j
.text:0000000000003259                 mov     eax, [rsp+138h+var_A4]
.text:0000000000003260                 test    eax, eax
.text:0000000000003262                 jz      loc_342B
.text:0000000000003268                 cmp     [rsp+138h+var_E8], 0
.text:000000000000326D                 jz      loc_3359
.text:0000000000003273                 cmp     [rsp+138h+var_E4], eax
.text:0000000000003277                 jz      loc_2FD3
.text:000000000000327D                 mov     r15, [rsp+138h+n]
.text:0000000000003285
.text:0000000000003285 loc_3285:                               ; CODE XREF: eval6+706↓j
.text:0000000000003285                                         ; eval6+729↓j
.text:0000000000003285                 add     [rsp+138h+s1], r15
.text:000000000000328D                 mov     [rsp+138h+var_BC], 0
.text:0000000000003292
.text:0000000000003292 loc_3292:                               ; CODE XREF: eval6+5AA↑j
.text:0000000000003292                 cmp     [rsp+138h+var_C8], 0
.text:0000000000003297                 jz      loc_3210
.text:000000000000329D
.text:000000000000329D loc_329D:                               ; CODE XREF: eval6+746↓j
.text:000000000000329D                 call    ___ctype_get_mb_cur_max
.text:00000000000032A2                 mov     r15, [rsp+138h+s1]
.text:00000000000032AA                 mov     rsi, rax
.text:00000000000032AD                 mov     rdi, r15
.text:00000000000032B0                 call    strnlen1
.text:00000000000032B5                 mov     rdi, [rsp+138h+ptr]
.text:00000000000032B9                 lea     rcx, [r14+4]
.text:00000000000032BD                 mov     rdx, rax
.text:00000000000032C0                 mov     rsi, r15
.text:00000000000032C3                 call    rpl_mbrtowc
.text:00000000000032C8                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000032CC                 mov     [rsp+138h+n], rax
.text:00000000000032D4                 jz      short loc_3340
.text:00000000000032D6                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000032DA                 jz      loc_33B0
.text:00000000000032E0                 test    rax, rax
.text:00000000000032E3                 jnz     short loc_3311
.text:00000000000032E5                 mov     rax, [rsp+138h+s1]
.text:00000000000032ED                 mov     [rsp+138h+n], 1
.text:00000000000032F9                 cmp     byte ptr [rax], 0
.text:00000000000032FC                 jnz     loc_37A9
.text:0000000000003302                 mov     edi, [rsp+138h+var_A4]
.text:0000000000003309                 test    edi, edi
.text:000000000000330B                 jnz     loc_37A4
.text:0000000000003311
.text:0000000000003311 loc_3311:                               ; CODE XREF: eval6+683↑j
.text:0000000000003311                 lea     rdi, [r14+4]    ; ps
.text:0000000000003315                 mov     [rsp+138h+var_A8], 1
.text:000000000000331D                 call    _mbsinit
.text:0000000000003322                 test    eax, eax
.text:0000000000003324                 jz      loc_33E0
.text:000000000000332A                 mov     [rsp+138h+var_C8], 0
.text:000000000000332F                 mov     [rsp+138h+var_BC], 1
.text:0000000000003334                 jmp     loc_3259
.text:0000000000003334 ; ---------------------------------------------------------------------------
.text:0000000000003339                 align 20h
.text:0000000000003340
.text:0000000000003340 loc_3340:                               ; CODE XREF: eval6+674↑j
.text:0000000000003340                 mov     [rsp+138h+n], 1
.text:000000000000334C                 mov     [rsp+138h+var_A8], 0
.text:0000000000003354                 mov     [rsp+138h+var_BC], 1
.text:0000000000003359
.text:0000000000003359 loc_3359:                               ; CODE XREF: eval6+60D↑j
.text:0000000000003359                                         ; eval6+772↓j
.text:0000000000003359                 mov     r15, [rsp+138h+n]
.text:0000000000003361                 cmp     r15, [rsp+138h+var_F0]
.text:0000000000003366                 jnz     loc_3285
.text:000000000000336C                 mov     rsi, [rsp+138h+s2] ; s2
.text:0000000000003371                 mov     rdi, [rsp+138h+s1] ; s1
.text:0000000000003379                 mov     rdx, r15        ; n
.text:000000000000337C                 call    _memcmp
.text:0000000000003381                 test    eax, eax
.text:0000000000003383                 jz      loc_2FD3
.text:0000000000003389                 jmp     loc_3285
.text:0000000000003389 ; ---------------------------------------------------------------------------
.text:000000000000338E                 align 10h
.text:0000000000003390
.text:0000000000003390 loc_3390:                               ; CODE XREF: eval6+5D0↑j
.text:0000000000003390                 lea     rdi, [r14+4]    ; ps
.text:0000000000003394                 call    _mbsinit
.text:0000000000003399                 test    eax, eax
.text:000000000000339B                 jz      loc_3785
.text:00000000000033A1                 mov     [rsp+138h+var_C8], 1
.text:00000000000033A6                 jmp     loc_329D
.text:00000000000033A6 ; ---------------------------------------------------------------------------
.text:00000000000033AB                 align 10h
.text:00000000000033B0
.text:00000000000033B0 loc_33B0:                               ; CODE XREF: eval6+67A↑j
.text:00000000000033B0                 mov     rdi, [rsp+138h+s1] ; s
.text:00000000000033B8                 call    _strlen
.text:00000000000033BD                 mov     [rsp+138h+var_A8], 0
.text:00000000000033C5                 mov     [rsp+138h+n], rax
.text:00000000000033CD                 mov     [rsp+138h+var_BC], 1
.text:00000000000033D2                 jmp     loc_3359
.text:00000000000033D2 ; ---------------------------------------------------------------------------
.text:00000000000033D7                 align 20h
.text:00000000000033E0
.text:00000000000033E0 loc_33E0:                               ; CODE XREF: eval6+6C4↑j
.text:00000000000033E0                 mov     [rsp+138h+var_BC], 1
.text:00000000000033E5                 jmp     loc_3259
.text:00000000000033EA ; ---------------------------------------------------------------------------
.text:00000000000033EA
.text:00000000000033EA loc_33EA:                               ; CODE XREF: eval6+469↑j
.text:00000000000033EA                 mov     rax, [rsp+138h+var_128]
.text:00000000000033EF                 lea     rdi, [rax+4]    ; ps
.text:00000000000033F3                 call    _mbsinit
.text:00000000000033F8                 test    eax, eax
.text:00000000000033FA                 jz      loc_3785
.text:0000000000003400                 mov     [rsp+138h+var_108], 1
.text:0000000000003405                 jmp     loc_312C
.text:000000000000340A ; ---------------------------------------------------------------------------
.text:000000000000340A
.text:000000000000340A loc_340A:                               ; CODE XREF: eval6+50C↑j
.text:000000000000340A                 mov     [rsp+138h+var_F0], 1
.text:0000000000003413                 mov     [rsp+138h+var_E8], 0
.text:0000000000003418                 add     rbp, 1
.text:000000000000341C                 mov     [rsp+138h+var_FC], 1
.text:0000000000003421                 mov     rdi, [rsp+138h+s2]
.text:0000000000003426                 jmp     loc_30F5
.text:000000000000342B ; ---------------------------------------------------------------------------
.text:000000000000342B
.text:000000000000342B loc_342B:                               ; CODE XREF: eval6+602↑j
.text:000000000000342B                 mov     rdx, [rsp+138h+s2]
.text:0000000000003430                 mov     rdi, [rsp+138h+var_F0]
.text:0000000000003435                 jmp     loc_3118
.text:000000000000343A ; ---------------------------------------------------------------------------
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: eval6+28A↑j
.text:000000000000343A                 sub     rdx, r13
.text:000000000000343D                 lea     rax, [rdx+1]
.text:0000000000003441                 cmp     rax, r15
.text:0000000000003444                 cmovbe  r15, rax
.text:0000000000003448                 call    ___ctype_get_mb_cur_max
.text:000000000000344D                 cmp     rax, 1
.text:0000000000003451                 jz      loc_3664
.text:0000000000003457                 mov     rdi, [rsp+138h+ptr]
.text:000000000000345B                 mov     r14d, 1
.text:0000000000003461                 add     rdi, 1
.text:0000000000003465                 call    xmalloc
.text:000000000000346A                 mov     rsi, [rsp+138h+dest]
.text:000000000000346F                 mov     [rsp+138h+ptr], rax
.text:0000000000003473                 mov     [rsp+138h+dest], rax
.text:0000000000003478                 lea     rax, [rsp+138h+var_88]
.text:0000000000003480                 mov     [rsp+138h+var_88], 0
.text:0000000000003488                 mov     [rsp+138h+var_84], 0
.text:0000000000003494                 mov     [rsp+138h+var_7C], 0
.text:000000000000349C                 mov     [rsp+138h+var_118], rax
.text:00000000000034A1                 lea     rax, [rsp+138h+var_84]
.text:00000000000034A9                 mov     [rsp+138h+src], rsi
.text:00000000000034B1                 mov     [rsp+138h+ps], rax
.text:00000000000034B6                 jmp     loc_357D
.text:00000000000034B6 ; ---------------------------------------------------------------------------
.text:00000000000034BB                 align 20h
.text:00000000000034C0
.text:00000000000034C0 loc_34C0:                               ; CODE XREF: eval6+925↓j
.text:00000000000034C0                 mov     rcx, [rsp+138h+src]
.text:00000000000034C8                 lea     rsi, is_basic_table
.text:00000000000034CF                 movzx   edx, byte ptr [rcx]
.text:00000000000034D2                 mov     eax, edx
.text:00000000000034D4                 shr     al, 5
.text:00000000000034D7                 and     eax, 7
.text:00000000000034DA                 mov     eax, [rsi+rax*4]
.text:00000000000034DD                 bt      eax, edx
.text:00000000000034E0                 jnb     loc_3645
.text:00000000000034E6                 mov     [rsp+138h+var_70], 1
.text:00000000000034F2                 movsx   eax, byte ptr [rcx]
.text:00000000000034F5                 mov     [rsp+138h+var_68], 1
.text:00000000000034FD                 mov     [rsp+138h+var_7C], 1
.text:0000000000003505                 mov     [rsp+138h+var_64], eax
.text:000000000000350C
.text:000000000000350C loc_350C:                               ; CODE XREF: eval6+9E0↓j
.text:000000000000350C                                         ; eval6+AFC↓j
.text:000000000000350C                 mov     eax, [rsp+138h+var_64]
.text:0000000000003513                 test    eax, eax
.text:0000000000003515                 jz      loc_368B
.text:000000000000351B
.text:000000000000351B loc_351B:                               ; CODE XREF: eval6+AC5↓j
.text:000000000000351B                                         ; eval6+AEF↓j
.text:000000000000351B                 test    r15, r15
.text:000000000000351E                 jz      loc_368B
.text:0000000000003524                 cmp     r13, r14
.text:0000000000003527                 mov     r8, [rsp+138h+var_70]
.text:000000000000352F                 mov     rcx, [rsp+138h+src]
.text:0000000000003537                 ja      short loc_3566
.text:0000000000003539                 mov     rdi, [rsp+138h+dest] ; dest
.text:000000000000353E                 mov     rdx, r8         ; n
.text:0000000000003541                 mov     rsi, rcx        ; src
.text:0000000000003544                 mov     [rsp+138h+var_120], r8
.text:0000000000003549                 mov     [rsp+138h+var_128], rcx
.text:000000000000354E                 sub     r15, 1
.text:0000000000003552                 call    _mempcpy
.text:0000000000003557                 mov     r8, [rsp+138h+var_120]
.text:000000000000355C                 mov     rcx, [rsp+138h+var_128]
.text:0000000000003561                 mov     [rsp+138h+dest], rax
.text:0000000000003566
.text:0000000000003566 loc_3566:                               ; CODE XREF: eval6+8D7↑j
.text:0000000000003566                 add     rcx, r8
.text:0000000000003569                 mov     [rsp+138h+var_7C], 0
.text:0000000000003571                 add     r14, 1
.text:0000000000003575                 mov     [rsp+138h+src], rcx
.text:000000000000357D
.text:000000000000357D loc_357D:                               ; CODE XREF: eval6+856↑j
.text:000000000000357D                 cmp     [rsp+138h+var_88], 0
.text:0000000000003585                 jz      loc_34C0
.text:000000000000358B
.text:000000000000358B loc_358B:                               ; CODE XREF: eval6+9FF↓j
.text:000000000000358B                 call    ___ctype_get_mb_cur_max
.text:0000000000003590                 mov     r8, [rsp+138h+src]
.text:0000000000003598                 mov     rsi, rax
.text:000000000000359B                 mov     rdi, r8
.text:000000000000359E                 mov     [rsp+138h+var_128], r8
.text:00000000000035A3                 call    strnlen1
.text:00000000000035A8                 mov     rsi, [rsp+138h+var_118]
.text:00000000000035AD                 mov     r8, [rsp+138h+var_128]
.text:00000000000035B2                 mov     rdx, rax
.text:00000000000035B5                 lea     rcx, [rsi+4]
.text:00000000000035B9                 lea     rdi, [rsi+24h]
.text:00000000000035BD                 mov     rsi, r8
.text:00000000000035C0                 call    rpl_mbrtowc
.text:00000000000035C5                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000035C9                 mov     [rsp+138h+var_70], rax
.text:00000000000035D1                 jz      loc_3709
.text:00000000000035D7                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000035DB                 jz      loc_372A
.text:00000000000035E1                 test    rax, rax
.text:00000000000035E4                 jnz     short loc_3612
.text:00000000000035E6                 mov     rax, [rsp+138h+src]
.text:00000000000035EE                 mov     [rsp+138h+var_70], 1
.text:00000000000035FA                 cmp     byte ptr [rax], 0
.text:00000000000035FD                 jnz     loc_37A9
.text:0000000000003603                 mov     edx, [rsp+138h+var_64]
.text:000000000000360A                 test    edx, edx
.text:000000000000360C                 jnz     loc_37A4
.text:0000000000003612
.text:0000000000003612 loc_3612:                               ; CODE XREF: eval6+984↑j
.text:0000000000003612                 mov     rax, [rsp+138h+var_118]
.text:0000000000003617                 mov     [rsp+138h+var_68], 1
.text:000000000000361F                 lea     rdi, [rax+4]    ; ps
.text:0000000000003623                 call    _mbsinit
.text:0000000000003628                 test    eax, eax
.text:000000000000362A                 jz      loc_3754
.text:0000000000003630                 mov     [rsp+138h+var_88], 0
.text:0000000000003638                 mov     [rsp+138h+var_7C], 1
.text:0000000000003640                 jmp     loc_350C
.text:0000000000003645 ; ---------------------------------------------------------------------------
.text:0000000000003645
.text:0000000000003645 loc_3645:                               ; CODE XREF: eval6+880↑j
.text:0000000000003645                 mov     rdi, [rsp+138h+ps] ; ps
.text:000000000000364A                 call    _mbsinit
.text:000000000000364F                 test    eax, eax
.text:0000000000003651                 jz      loc_3785
.text:0000000000003657                 mov     [rsp+138h+var_88], 1
.text:000000000000365F                 jmp     loc_358B
.text:0000000000003664 ; ---------------------------------------------------------------------------
.text:0000000000003664
.text:0000000000003664 loc_3664:                               ; CODE XREF: eval6+7F1↑j
.text:0000000000003664                 lea     rdi, [r15+1]
.text:0000000000003668                 call    xmalloc
.text:000000000000366D                 mov     rsi, [rsp+138h+dest]
.text:0000000000003672                 mov     rdx, r15        ; n
.text:0000000000003675                 mov     rdi, rax        ; dest
.text:0000000000003678                 mov     [rsp+138h+ptr], rax
.text:000000000000367C                 lea     rsi, [rsi+r13-1] ; src
.text:0000000000003681                 call    _mempcpy
.text:0000000000003686                 mov     [rsp+138h+dest], rax
.text:000000000000368B
.text:000000000000368B loc_368B:                               ; CODE XREF: eval6+8B5↑j
.text:000000000000368B                                         ; eval6+8BE↑j
.text:000000000000368B                 mov     rax, [rsp+138h+dest]
.text:0000000000003690                 mov     byte ptr [rax], 0
.text:0000000000003693                 jmp     loc_2F00
.text:0000000000003698 ; ---------------------------------------------------------------------------
.text:0000000000003698
.text:0000000000003698 loc_3698:                               ; CODE XREF: eval6+516↑j
.text:0000000000003698                 mov     rdi, [rsp+138h+s2] ; s
.text:000000000000369D                 call    _strlen
.text:00000000000036A2                 mov     [rsp+138h+var_E8], 0
.text:00000000000036A7                 mov     [rsp+138h+var_F0], rax
.text:00000000000036AC                 mov     [rsp+138h+var_FC], 1
.text:00000000000036B1                 jmp     loc_31D5
.text:00000000000036B6 ; ---------------------------------------------------------------------------
.text:00000000000036B6
.text:00000000000036B6 loc_36B6:                               ; CODE XREF: eval6+241↑j
.text:00000000000036B6                 mov     rdx, [r12+10h]
.text:00000000000036BB                 test    eax, eax
.text:00000000000036BD                 mov     r15, [rdx]
.text:00000000000036C0                 jz      loc_3761
.text:00000000000036C6                 cmp     r15, 0FFFFFFFFFFFFFFFFh
.text:00000000000036CA                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000036D1                 cmovz   r15, rax
.text:00000000000036D5                 jmp     loc_2EA7
.text:00000000000036DA ; ---------------------------------------------------------------------------
.text:00000000000036DA
.text:00000000000036DA loc_36DA:                               ; CODE XREF: eval6+221↑j
.text:00000000000036DA                 mov     rcx, [rbx+10h]
.text:00000000000036DE                 test    edx, edx
.text:00000000000036E0                 mov     r13, [rcx]
.text:00000000000036E3                 jz      loc_3769
.text:00000000000036E9                 cmp     r13, 0FFFFFFFFFFFFFFFFh
.text:00000000000036ED                 jz      loc_3774
.text:00000000000036F3                 test    r13, r13
.text:00000000000036F6                 setz    r14b
.text:00000000000036FA                 jmp     loc_2E87
.text:00000000000036FF ; ---------------------------------------------------------------------------
.text:00000000000036FF
.text:00000000000036FF loc_36FF:                               ; CODE XREF: eval6+559↑j
.text:00000000000036FF                 mov     [rsp+138h+var_FC], 1
.text:0000000000003704                 jmp     loc_31C9
.text:0000000000003709 ; ---------------------------------------------------------------------------
.text:0000000000003709
.text:0000000000003709 loc_3709:                               ; CODE XREF: eval6+971↑j
.text:0000000000003709                 mov     [rsp+138h+var_70], 1
.text:0000000000003715                 mov     [rsp+138h+var_68], 0
.text:000000000000371D                 mov     [rsp+138h+var_7C], 1
.text:0000000000003725                 jmp     loc_351B
.text:000000000000372A ; ---------------------------------------------------------------------------
.text:000000000000372A
.text:000000000000372A loc_372A:                               ; CODE XREF: eval6+97B↑j
.text:000000000000372A                 mov     rdi, [rsp+138h+src] ; s
.text:0000000000003732                 call    _strlen
.text:0000000000003737                 mov     [rsp+138h+var_68], 0
.text:000000000000373F                 mov     [rsp+138h+var_70], rax
.text:0000000000003747                 mov     [rsp+138h+var_7C], 1
.text:000000000000374F                 jmp     loc_351B
.text:0000000000003754 ; ---------------------------------------------------------------------------
.text:0000000000003754
.text:0000000000003754 loc_3754:                               ; CODE XREF: eval6+9CA↑j
.text:0000000000003754                 mov     [rsp+138h+var_7C], 1
.text:000000000000375C                 jmp     loc_350C
.text:0000000000003761 ; ---------------------------------------------------------------------------
.text:0000000000003761
.text:0000000000003761 loc_3761:                               ; CODE XREF: eval6+A60↑j
.text:0000000000003761                 xor     r15d, r15d
.text:0000000000003764                 jmp     loc_2EA7
.text:0000000000003769 ; ---------------------------------------------------------------------------
.text:0000000000003769
.text:0000000000003769 loc_3769:                               ; CODE XREF: eval6+A83↑j
.text:0000000000003769                 mov     r14d, eax
.text:000000000000376C                 xor     r13d, r13d
.text:000000000000376F                 jmp     loc_2E87
.text:0000000000003774 ; ---------------------------------------------------------------------------
.text:0000000000003774
.text:0000000000003774 loc_3774:                               ; CODE XREF: eval6+A8D↑j
.text:0000000000003774                 mov     r13, 0FFFFFFFFFFFFFFFEh
.text:000000000000377B                 jmp     loc_2E87
.text:0000000000003780 ; ---------------------------------------------------------------------------
.text:0000000000003780
.text:0000000000003780 loc_3780:                               ; CODE XREF: eval6+156↑j
.text:0000000000003780                 call    ___stack_chk_fail
.text:0000000000003785 ; ---------------------------------------------------------------------------
.text:0000000000003785
.text:0000000000003785 loc_3785:                               ; CODE XREF: eval6+73B↑j
.text:0000000000003785                                         ; eval6+79A↑j ...
.text:0000000000003785                 lea     rcx, __PRETTY_FUNCTION___7929 ; "mbuiter_multi_next"
.text:000000000000378C                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000003793                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:000000000000379A                 mov     edx, 96h        ; line
.text:000000000000379F                 call    ___assert_fail
.text:00000000000037A4 ; ---------------------------------------------------------------------------
.text:00000000000037A4
.text:00000000000037A4 loc_37A4:                               ; CODE XREF: eval6+53E↑j
.text:00000000000037A4                                         ; eval6+6AB↑j ...
.text:00000000000037A4                 call    mbuiter_multi_next_part_2
.text:00000000000037A9 ; ---------------------------------------------------------------------------
.text:00000000000037A9
.text:00000000000037A9 loc_37A9:                               ; CODE XREF: eval6+532↑j
.text:00000000000037A9                                         ; eval6+69C↑j ...
.text:00000000000037A9                 lea     rcx, __PRETTY_FUNCTION___7929 ; "mbuiter_multi_next"
.text:00000000000037B0                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:00000000000037B7                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:00000000000037BE                 mov     edx, 0B2h       ; line
.text:00000000000037C3                 call    ___assert_fail
.text:00000000000037C8 ; ---------------------------------------------------------------------------
.text:00000000000037C8
.text:00000000000037C8 loc_37C8:                               ; CODE XREF: eval6+C0↑j
.text:00000000000037C8                 mov     rdx, [rax-8]
.text:00000000000037CC                 mov     esi, 8
.text:00000000000037D1                 xor     edi, edi
.text:00000000000037D3                 call    quotearg_n_style
.text:00000000000037D8                 lea     rsi, aSyntaxErrorExp_0 ; "syntax error: expecting ')' after %s"
.text:00000000000037DF                 mov     rbx, rax
.text:00000000000037E2                 mov     edx, 5          ; category
.text:00000000000037E7                 xor     edi, edi        ; domainname
.text:00000000000037E9                 call    _dcgettext
.text:00000000000037EE                 mov     rcx, rbx
.text:00000000000037F1                 mov     rdx, rax        ; format
.text:00000000000037F4                 xor     esi, esi        ; errnum
.text:00000000000037F6                 mov     edi, 2          ; status
.text:00000000000037FB                 xor     eax, eax
.text:00000000000037FD                 call    _error
.text:00000000000037FD ; } // starts at 2C60
.text:0000000000003802                 nop     dword ptr [rax+00h]
.text:0000000000003806                 db      2Eh
.text:0000000000003806                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003806 eval6           endp ; sp-analysis failed
.text:0000000000003806
.text:0000000000003810
.text:0000000000003810 ; =============== S U B R O U T I N E =======================================
.text:0000000000003810
.text:0000000000003810
.text:0000000000003810 eval5           proc near               ; CODE XREF: eval4+12↓p
.text:0000000000003810                                         ; eval4+3C↓p
.text:0000000000003810 ; __unwind {
.text:0000000000003810                 push    r15
.text:0000000000003812                 push    r14
.text:0000000000003814                 mov     r14d, edi
.text:0000000000003817                 push    r13
.text:0000000000003819                 push    r12
.text:000000000000381B                 lea     r12, asc_160A0  ; ":*%"
.text:0000000000003822                 push    rbp
.text:0000000000003823                 push    rbx
.text:0000000000003824                 movzx   ebp, dil
.text:0000000000003828                 mov     edi, ebp
.text:000000000000382A                 sub     rsp, 8
.text:000000000000382E                 call    eval6
.text:0000000000003833                 mov     r13, rax
.text:0000000000003836                 jmp     short loc_3848
.text:0000000000003836 ; ---------------------------------------------------------------------------
.text:0000000000003838                 align 20h
.text:0000000000003840
.text:0000000000003840 loc_3840:                               ; CODE XREF: eval5+51↓j
.text:0000000000003840                                         ; eval5+6C↓j
.text:0000000000003840                 mov     rdi, rbx        ; ptr
.text:0000000000003843                 call    freev
.text:0000000000003848
.text:0000000000003848 loc_3848:                               ; CODE XREF: eval5+26↑j
.text:0000000000003848                 mov     rdi, r12        ; s2
.text:000000000000384B                 call    nextarg
.text:0000000000003850                 test    al, al
.text:0000000000003852                 jz      short loc_3880
.text:0000000000003854                 mov     edi, ebp
.text:0000000000003856                 call    eval6
.text:000000000000385B                 test    r14b, r14b
.text:000000000000385E                 mov     rbx, rax
.text:0000000000003861                 jz      short loc_3840
.text:0000000000003863                 mov     rdi, r13
.text:0000000000003866                 mov     rsi, rax
.text:0000000000003869                 call    docolon
.text:000000000000386E                 mov     rdi, r13        ; ptr
.text:0000000000003871                 mov     r15, rax
.text:0000000000003874                 mov     r13, r15
.text:0000000000003877                 call    freev
.text:000000000000387C                 jmp     short loc_3840
.text:000000000000387C ; ---------------------------------------------------------------------------
.text:000000000000387E                 align 20h
.text:0000000000003880
.text:0000000000003880 loc_3880:                               ; CODE XREF: eval5+42↑j
.text:0000000000003880                 add     rsp, 8
.text:0000000000003884                 mov     rax, r13
.text:0000000000003887                 pop     rbx
.text:0000000000003888                 pop     rbp
.text:0000000000003889                 pop     r12
.text:000000000000388B                 pop     r13
.text:000000000000388D                 pop     r14
.text:000000000000388F                 pop     r15
.text:0000000000003891                 retn
.text:0000000000003891 ; } // starts at 3810
.text:0000000000003891 eval5           endp
.text:0000000000003891
.text:0000000000003891 ; ---------------------------------------------------------------------------
.text:0000000000003892                 align 20h
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0
.text:00000000000038A0 eval4           proc near               ; CODE XREF: eval3+12↓p
.text:00000000000038A0                                         ; eval3+38↓p
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 push    r14
.text:00000000000038A2                 push    r13
.text:00000000000038A4                 mov     r14d, edi
.text:00000000000038A7                 push    r12
.text:00000000000038A9                 movzx   r12d, dil
.text:00000000000038AD                 push    rbp
.text:00000000000038AE                 push    rbx
.text:00000000000038AF                 mov     edi, r12d
.text:00000000000038B2                 call    eval5
.text:00000000000038B7                 mov     r13, rax
.text:00000000000038BA                 jmp     short loc_3939
.text:00000000000038BA ; ---------------------------------------------------------------------------
.text:00000000000038BC                 align 20h
.text:00000000000038C0
.text:00000000000038C0 loc_38C0:                               ; CODE XREF: eval4+A7↓j
.text:00000000000038C0                 lea     rdi, aLibs+6    ; s2
.text:00000000000038C7                 mov     ebp, 1
.text:00000000000038CC                 call    nextarg
.text:00000000000038D1                 test    al, al
.text:00000000000038D3                 jz      loc_3968
.text:00000000000038D9
.text:00000000000038D9 loc_38D9:                               ; CODE XREF: eval4+AF↓j
.text:00000000000038D9                                         ; eval4+DD↓j
.text:00000000000038D9                 mov     edi, r12d
.text:00000000000038DC                 call    eval5
.text:00000000000038E1                 test    r14b, r14b
.text:00000000000038E4                 mov     rbx, rax
.text:00000000000038E7                 jz      short loc_3931
.text:00000000000038E9                 mov     rdi, r13
.text:00000000000038EC                 call    toarith
.text:00000000000038F1                 test    al, al
.text:00000000000038F3                 jz      loc_399D
.text:00000000000038F9                 mov     rdi, rbx
.text:00000000000038FC                 call    toarith
.text:0000000000003901                 test    al, al
.text:0000000000003903                 jz      loc_399D
.text:0000000000003909                 test    ebp, ebp
.text:000000000000390B                 jz      short loc_3958
.text:000000000000390D                 mov     eax, [rbx+0Ch]
.text:0000000000003910                 test    eax, eax
.text:0000000000003912                 jz      loc_39C1
.text:0000000000003918                 cmp     ebp, 1
.text:000000000000391B                 jz      short loc_3988
.text:000000000000391D                 mov     rax, cs:__gmpz_tdiv_r_ptr
.text:0000000000003924
.text:0000000000003924 loc_3924:                               ; CODE XREF: eval4+BF↓j
.text:0000000000003924                                         ; eval4+EF↓j
.text:0000000000003924                 lea     rdi, [r13+8]
.text:0000000000003928                 lea     rdx, [rbx+8]
.text:000000000000392C                 mov     rsi, rdi
.text:000000000000392F                 call    rax ; __gmpz_tdiv_r
.text:0000000000003931
.text:0000000000003931 loc_3931:                               ; CODE XREF: eval4+47↑j
.text:0000000000003931                 mov     rdi, rbx        ; ptr
.text:0000000000003934                 call    freev
.text:0000000000003939
.text:0000000000003939 loc_3939:                               ; CODE XREF: eval4+1A↑j
.text:0000000000003939                 lea     rdi, asc_160A0+2 ; s2
.text:0000000000003940                 call    nextarg
.text:0000000000003945                 test    al, al
.text:0000000000003947                 jz      loc_38C0
.text:000000000000394D                 xor     ebp, ebp
.text:000000000000394F                 jmp     short loc_38D9
.text:000000000000394F ; ---------------------------------------------------------------------------
.text:0000000000003951                 align 8
.text:0000000000003958
.text:0000000000003958 loc_3958:                               ; CODE XREF: eval4+6B↑j
.text:0000000000003958                 mov     rax, cs:__gmpz_mul_ptr
.text:000000000000395F                 jmp     short loc_3924
.text:000000000000395F ; ---------------------------------------------------------------------------
.text:0000000000003961                 align 8
.text:0000000000003968
.text:0000000000003968 loc_3968:                               ; CODE XREF: eval4+33↑j
.text:0000000000003968                 lea     rdi, asc_160A0+4 ; s2
.text:000000000000396F                 call    nextarg
.text:0000000000003974                 test    al, al
.text:0000000000003976                 jz      short loc_3991
.text:0000000000003978                 mov     ebp, 2
.text:000000000000397D                 jmp     loc_38D9
.text:000000000000397D ; ---------------------------------------------------------------------------
.text:0000000000003982                 align 8
.text:0000000000003988
.text:0000000000003988 loc_3988:                               ; CODE XREF: eval4+7B↑j
.text:0000000000003988                 mov     rax, cs:__gmpz_tdiv_q_ptr
.text:000000000000398F                 jmp     short loc_3924
.text:0000000000003991 ; ---------------------------------------------------------------------------
.text:0000000000003991
.text:0000000000003991 loc_3991:                               ; CODE XREF: eval4+D6↑j
.text:0000000000003991                 pop     rbx
.text:0000000000003992                 mov     rax, r13
.text:0000000000003995                 pop     rbp
.text:0000000000003996                 pop     r12
.text:0000000000003998                 pop     r13
.text:000000000000399A                 pop     r14
.text:000000000000399C                 retn
.text:000000000000399D ; ---------------------------------------------------------------------------
.text:000000000000399D
.text:000000000000399D loc_399D:                               ; CODE XREF: eval4+53↑j
.text:000000000000399D                                         ; eval4+63↑j
.text:000000000000399D                 lea     rsi, aNonIntegerArgu ; "non-integer argument"
.text:00000000000039A4                 mov     edx, 5          ; category
.text:00000000000039A9                 xor     edi, edi        ; domainname
.text:00000000000039AB                 call    _dcgettext
.text:00000000000039B0                 xor     esi, esi        ; errnum
.text:00000000000039B2                 mov     rdx, rax        ; format
.text:00000000000039B5                 mov     edi, 2          ; status
.text:00000000000039BA                 xor     eax, eax
.text:00000000000039BC                 call    _error
.text:00000000000039C1
.text:00000000000039C1 loc_39C1:                               ; CODE XREF: eval4+72↑j
.text:00000000000039C1                 lea     rsi, aDivisionByZero ; "division by zero"
.text:00000000000039C8                 mov     edx, 5          ; category
.text:00000000000039CD                 xor     edi, edi        ; domainname
.text:00000000000039CF                 call    _dcgettext
.text:00000000000039D4                 xor     esi, esi        ; errnum
.text:00000000000039D6                 mov     rdx, rax        ; format
.text:00000000000039D9                 mov     edi, 2          ; status
.text:00000000000039DE                 xor     eax, eax
.text:00000000000039E0                 call    _error
.text:00000000000039E0 ; } // starts at 38A0
.text:00000000000039E5                 nop
.text:00000000000039E6                 db      2Eh
.text:00000000000039E6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000039E6 eval4           endp ; sp-analysis failed
.text:00000000000039E6
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0
.text:00000000000039F0 eval3           proc near               ; CODE XREF: eval2+18↓p
.text:00000000000039F0                                         ; eval2+48↓p
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 push    r14
.text:00000000000039F2                 push    r13
.text:00000000000039F4                 mov     r14d, edi
.text:00000000000039F7                 push    r12
.text:00000000000039F9                 movzx   r12d, dil
.text:00000000000039FD                 push    rbp
.text:00000000000039FE                 push    rbx
.text:00000000000039FF                 mov     edi, r12d
.text:0000000000003A02                 call    eval4
.text:0000000000003A07                 mov     r13, rax
.text:0000000000003A0A                 jmp     short loc_3A6D
.text:0000000000003A0A ; ---------------------------------------------------------------------------
.text:0000000000003A0C                 align 10h
.text:0000000000003A10
.text:0000000000003A10 loc_3A10:                               ; CODE XREF: eval3+8B↓j
.text:0000000000003A10                 lea     rdi, s2+1       ; s2
.text:0000000000003A17                 call    nextarg
.text:0000000000003A1C                 test    al, al
.text:0000000000003A1E                 jz      short loc_3A98
.text:0000000000003A20                 mov     ebp, 1
.text:0000000000003A25
.text:0000000000003A25 loc_3A25:                               ; CODE XREF: eval3+8F↓j
.text:0000000000003A25                 mov     edi, r12d
.text:0000000000003A28                 call    eval4
.text:0000000000003A2D                 test    r14b, r14b
.text:0000000000003A30                 mov     rbx, rax
.text:0000000000003A33                 jz      short loc_3A65
.text:0000000000003A35                 mov     rdi, r13
.text:0000000000003A38                 call    toarith
.text:0000000000003A3D                 test    al, al
.text:0000000000003A3F                 jz      short loc_3AA4
.text:0000000000003A41                 mov     rdi, rbx
.text:0000000000003A44                 call    toarith
.text:0000000000003A49                 test    al, al
.text:0000000000003A4B                 jz      short loc_3AA4
.text:0000000000003A4D                 test    ebp, ebp
.text:0000000000003A4F                 jz      short loc_3A88
.text:0000000000003A51                 mov     rax, cs:__gmpz_sub_ptr
.text:0000000000003A58
.text:0000000000003A58 loc_3A58:                               ; CODE XREF: eval3+9F↓j
.text:0000000000003A58                 lea     rdi, [r13+8]
.text:0000000000003A5C                 lea     rdx, [rbx+8]
.text:0000000000003A60                 mov     rsi, rdi
.text:0000000000003A63                 call    rax ; __gmpz_sub
.text:0000000000003A65
.text:0000000000003A65 loc_3A65:                               ; CODE XREF: eval3+43↑j
.text:0000000000003A65                 mov     rdi, rbx        ; ptr
.text:0000000000003A68                 call    freev
.text:0000000000003A6D
.text:0000000000003A6D loc_3A6D:                               ; CODE XREF: eval3+1A↑j
.text:0000000000003A6D                 lea     rdi, shortopts  ; "+"
.text:0000000000003A74                 call    nextarg
.text:0000000000003A79                 test    al, al
.text:0000000000003A7B                 jz      short loc_3A10
.text:0000000000003A7D                 xor     ebp, ebp
.text:0000000000003A7F                 jmp     short loc_3A25
.text:0000000000003A7F ; ---------------------------------------------------------------------------
.text:0000000000003A81                 align 8
.text:0000000000003A88
.text:0000000000003A88 loc_3A88:                               ; CODE XREF: eval3+5F↑j
.text:0000000000003A88                 mov     rax, cs:__gmpz_add_ptr
.text:0000000000003A8F                 jmp     short loc_3A58
.text:0000000000003A8F ; ---------------------------------------------------------------------------
.text:0000000000003A91                 align 8
.text:0000000000003A98
.text:0000000000003A98 loc_3A98:                               ; CODE XREF: eval3+2E↑j
.text:0000000000003A98                 pop     rbx
.text:0000000000003A99                 mov     rax, r13
.text:0000000000003A9C                 pop     rbp
.text:0000000000003A9D                 pop     r12
.text:0000000000003A9F                 pop     r13
.text:0000000000003AA1                 pop     r14
.text:0000000000003AA3                 retn
.text:0000000000003AA4 ; ---------------------------------------------------------------------------
.text:0000000000003AA4
.text:0000000000003AA4 loc_3AA4:                               ; CODE XREF: eval3+4F↑j
.text:0000000000003AA4                                         ; eval3+5B↑j
.text:0000000000003AA4                 lea     rsi, aNonIntegerArgu ; "non-integer argument"
.text:0000000000003AAB                 mov     edx, 5          ; category
.text:0000000000003AB0                 xor     edi, edi        ; domainname
.text:0000000000003AB2                 call    _dcgettext
.text:0000000000003AB7                 xor     esi, esi        ; errnum
.text:0000000000003AB9                 mov     rdx, rax        ; format
.text:0000000000003ABC                 mov     edi, 2          ; status
.text:0000000000003AC1                 xor     eax, eax
.text:0000000000003AC3                 call    _error
.text:0000000000003AC3 ; } // starts at 39F0
.text:0000000000003AC8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000003AC8 eval3           endp ; sp-analysis failed
.text:0000000000003AC8
.text:0000000000003AD0
.text:0000000000003AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AD0
.text:0000000000003AD0
.text:0000000000003AD0 eval2           proc near               ; CODE XREF: eval1+B↓p
.text:0000000000003AD0                                         ; eval1:loc_3D68↓p
.text:0000000000003AD0 ; __unwind {
.text:0000000000003AD0                 push    r15
.text:0000000000003AD2                 push    r14
.text:0000000000003AD4                 mov     r14d, edi
.text:0000000000003AD7                 push    r13
.text:0000000000003AD9                 push    r12
.text:0000000000003ADB                 movzx   r13d, dil
.text:0000000000003ADF                 push    rbp
.text:0000000000003AE0                 push    rbx
.text:0000000000003AE1                 mov     edi, r13d
.text:0000000000003AE4                 sub     rsp, 8
.text:0000000000003AE8                 call    eval3
.text:0000000000003AED                 mov     rbx, rax
.text:0000000000003AF0                 jmp     short loc_3B54
.text:0000000000003AF0 ; ---------------------------------------------------------------------------
.text:0000000000003AF2                 align 8
.text:0000000000003AF8
.text:0000000000003AF8 loc_3AF8:                               ; CODE XREF: eval2+92↓j
.text:0000000000003AF8                 lea     rdi, asc_160CE  ; "<="
.text:0000000000003AFF                 mov     r12d, 1
.text:0000000000003B05                 call    nextarg
.text:0000000000003B0A                 test    al, al
.text:0000000000003B0C                 jz      loc_3C50
.text:0000000000003B12
.text:0000000000003B12 loc_3B12:                               ; CODE XREF: eval2+97↓j
.text:0000000000003B12                                         ; eval2+196↓j ...
.text:0000000000003B12                 mov     edi, r13d
.text:0000000000003B15                 xor     r15d, r15d
.text:0000000000003B18                 call    eval3
.text:0000000000003B1D                 test    r14b, r14b
.text:0000000000003B20                 mov     rbp, rax
.text:0000000000003B23                 jnz     short loc_3B70
.text:0000000000003B25
.text:0000000000003B25 loc_3B25:                               ; CODE XREF: eval2+11D↓j
.text:0000000000003B25                                         ; eval2+131↓j ...
.text:0000000000003B25                 mov     rdi, rbx        ; ptr
.text:0000000000003B28                 call    freev
.text:0000000000003B2D                 mov     rdi, rbp        ; ptr
.text:0000000000003B30                 call    freev
.text:0000000000003B35                 mov     edi, 18h
.text:0000000000003B3A                 call    xmalloc
.text:0000000000003B3F                 lea     rdi, [rax+8]
.text:0000000000003B43                 mov     dword ptr [rax], 0
.text:0000000000003B49                 mov     rsi, r15
.text:0000000000003B4C                 mov     rbx, rax
.text:0000000000003B4F                 call    ___gmpz_init_set_ui
.text:0000000000003B54
.text:0000000000003B54 loc_3B54:                               ; CODE XREF: eval2+20↑j
.text:0000000000003B54                 lea     rdi, asc_160CC  ; "<"
.text:0000000000003B5B                 call    nextarg
.text:0000000000003B60                 test    al, al
.text:0000000000003B62                 jz      short loc_3AF8
.text:0000000000003B64                 xor     r12d, r12d
.text:0000000000003B67                 jmp     short loc_3B12
.text:0000000000003B67 ; ---------------------------------------------------------------------------
.text:0000000000003B69                 align 10h
.text:0000000000003B70
.text:0000000000003B70 loc_3B70:                               ; CODE XREF: eval2+53↑j
.text:0000000000003B70                 mov     rdi, rbx
.text:0000000000003B73                 call    tostring
.text:0000000000003B78                 mov     rdi, rbp
.text:0000000000003B7B                 call    tostring
.text:0000000000003B80                 mov     rdi, [rbx+8]
.text:0000000000003B84                 xor     edx, edx
.text:0000000000003B86                 cmp     byte ptr [rdi], 2Dh ; '-'
.text:0000000000003B89                 setz    dl
.text:0000000000003B8C                 add     rdx, rdi
.text:0000000000003B8F                 movsx   eax, byte ptr [rdx]
.text:0000000000003B92                 jmp     short loc_3BA7
.text:0000000000003B92 ; ---------------------------------------------------------------------------
.text:0000000000003B94                 align 8
.text:0000000000003B98
.text:0000000000003B98 loc_3B98:                               ; CODE XREF: eval2+DD↓j
.text:0000000000003B98                 add     rdx, 1
.text:0000000000003B9C                 movsx   eax, byte ptr [rdx]
.text:0000000000003B9F                 test    al, al
.text:0000000000003BA1                 jz      loc_3C70
.text:0000000000003BA7
.text:0000000000003BA7 loc_3BA7:                               ; CODE XREF: eval2+C2↑j
.text:0000000000003BA7                 sub     eax, 30h ; '0'
.text:0000000000003BAA                 cmp     eax, 9
.text:0000000000003BAD                 jbe     short loc_3B98
.text:0000000000003BAF
.text:0000000000003BAF loc_3BAF:                               ; CODE XREF: eval2+1CB↓j
.text:0000000000003BAF                 call    ___errno_location
.text:0000000000003BB4                 mov     dword ptr [rax], 0
.text:0000000000003BBA                 mov     rsi, [rbp+8]    ; s2
.text:0000000000003BBE                 mov     rdi, [rbx+8]    ; s1
.text:0000000000003BC2                 call    _strcoll
.text:0000000000003BC7
.text:0000000000003BC7 loc_3BC7:                               ; CODE XREF: eval2+1D5↓j
.text:0000000000003BC7                 cmp     r12d, 5         ; switch 6 cases
.text:0000000000003BCB                 ja      short def_3BDB  ; jumptable 0000000000003BDB default case, case 0
.text:0000000000003BCD                 lea     rcx, jpt_3BDB
.text:0000000000003BD4                 movsxd  rdx, ds:(jpt_3BDB - 16140h)[rcx+r12*4]
.text:0000000000003BD8                 add     rdx, rcx
.text:0000000000003BDB                 jmp     rdx             ; switch jump
.text:0000000000003BDB ; ---------------------------------------------------------------------------
.text:0000000000003BDD                 align 20h
.text:0000000000003BE0
.text:0000000000003BE0 loc_3BE0:                               ; CODE XREF: eval2+10B↑j
.text:0000000000003BE0                                         ; DATA XREF: .rodata:jpt_3BDB↓o
.text:0000000000003BE0                 movsxd  rsi, eax        ; jumptable 0000000000003BDB case 4
.text:0000000000003BE3                 not     rsi
.text:0000000000003BE6                 shr     rsi, 3Fh
.text:0000000000003BEA                 mov     r15, rsi
.text:0000000000003BED                 jmp     loc_3B25
.text:0000000000003BED ; ---------------------------------------------------------------------------
.text:0000000000003BF2                 align 8
.text:0000000000003BF8
.text:0000000000003BF8 loc_3BF8:                               ; CODE XREF: eval2+10B↑j
.text:0000000000003BF8                                         ; DATA XREF: .rodata:jpt_3BDB↓o
.text:0000000000003BF8                 xor     r15d, r15d      ; jumptable 0000000000003BDB case 3
.text:0000000000003BFB                 test    eax, eax
.text:0000000000003BFD                 setnz   r15b
.text:0000000000003C01                 jmp     loc_3B25
.text:0000000000003C01 ; ---------------------------------------------------------------------------
.text:0000000000003C06                 align 10h
.text:0000000000003C10
.text:0000000000003C10 loc_3C10:                               ; CODE XREF: eval2+10B↑j
.text:0000000000003C10                                         ; DATA XREF: .rodata:jpt_3BDB↓o
.text:0000000000003C10                 xor     r15d, r15d      ; jumptable 0000000000003BDB case 2
.text:0000000000003C13                 test    eax, eax
.text:0000000000003C15                 setz    r15b
.text:0000000000003C19                 jmp     loc_3B25
.text:0000000000003C19 ; ---------------------------------------------------------------------------
.text:0000000000003C1E                 align 20h
.text:0000000000003C20
.text:0000000000003C20 loc_3C20:                               ; CODE XREF: eval2+10B↑j
.text:0000000000003C20                                         ; DATA XREF: .rodata:jpt_3BDB↓o
.text:0000000000003C20                 xor     r15d, r15d      ; jumptable 0000000000003BDB case 1
.text:0000000000003C23                 test    eax, eax
.text:0000000000003C25                 setle   r15b
.text:0000000000003C29                 jmp     loc_3B25
.text:0000000000003C29 ; ---------------------------------------------------------------------------
.text:0000000000003C2E                 align 10h
.text:0000000000003C30
.text:0000000000003C30 def_3BDB:                               ; CODE XREF: eval2+FB↑j
.text:0000000000003C30                                         ; eval2+10B↑j
.text:0000000000003C30                                         ; DATA XREF: ...
.text:0000000000003C30                 movsxd  rsi, eax        ; jumptable 0000000000003BDB default case, case 0
.text:0000000000003C33                 shr     rsi, 3Fh
.text:0000000000003C37                 mov     r15, rsi
.text:0000000000003C3A                 jmp     loc_3B25
.text:0000000000003C3A ; ---------------------------------------------------------------------------
.text:0000000000003C3F                 align 20h
.text:0000000000003C40
.text:0000000000003C40 loc_3C40:                               ; CODE XREF: eval2+10B↑j
.text:0000000000003C40                                         ; DATA XREF: .rodata:jpt_3BDB↓o
.text:0000000000003C40                 xor     r15d, r15d      ; jumptable 0000000000003BDB case 5
.text:0000000000003C43                 test    eax, eax
.text:0000000000003C45                 setnle  r15b
.text:0000000000003C49                 jmp     loc_3B25
.text:0000000000003C49 ; ---------------------------------------------------------------------------
.text:0000000000003C4E                 align 10h
.text:0000000000003C50
.text:0000000000003C50 loc_3C50:                               ; CODE XREF: eval2+3C↑j
.text:0000000000003C50                 lea     rdi, asc_160D4+1 ; s2
.text:0000000000003C57                 call    nextarg
.text:0000000000003C5C                 test    al, al
.text:0000000000003C5E                 jz      short loc_3CB0
.text:0000000000003C60
.text:0000000000003C60 loc_3C60:                               ; CODE XREF: eval2+1EE↓j
.text:0000000000003C60                 mov     r12d, 2
.text:0000000000003C66                 jmp     loc_3B12
.text:0000000000003C66 ; ---------------------------------------------------------------------------
.text:0000000000003C6B                 align 10h
.text:0000000000003C70
.text:0000000000003C70 loc_3C70:                               ; CODE XREF: eval2+D1↑j
.text:0000000000003C70                 mov     rsi, [rbp+8]
.text:0000000000003C74                 xor     edx, edx
.text:0000000000003C76                 cmp     byte ptr [rsi], 2Dh ; '-'
.text:0000000000003C79                 setz    dl
.text:0000000000003C7C                 add     rdx, rsi
.text:0000000000003C7F                 movsx   eax, byte ptr [rdx]
.text:0000000000003C82                 jmp     short loc_3C93
.text:0000000000003C82 ; ---------------------------------------------------------------------------
.text:0000000000003C84                 align 8
.text:0000000000003C88
.text:0000000000003C88 loc_3C88:                               ; CODE XREF: eval2+1C9↓j
.text:0000000000003C88                 add     rdx, 1
.text:0000000000003C8C                 movsx   eax, byte ptr [rdx]
.text:0000000000003C8F                 test    al, al
.text:0000000000003C91                 jz      short loc_3CA0
.text:0000000000003C93
.text:0000000000003C93 loc_3C93:                               ; CODE XREF: eval2+1B2↑j
.text:0000000000003C93                 sub     eax, 30h ; '0'
.text:0000000000003C96                 cmp     eax, 9
.text:0000000000003C99                 jbe     short loc_3C88
.text:0000000000003C9B                 jmp     loc_3BAF
.text:0000000000003CA0 ; ---------------------------------------------------------------------------
.text:0000000000003CA0
.text:0000000000003CA0 loc_3CA0:                               ; CODE XREF: eval2+1C1↑j
.text:0000000000003CA0                 call    strintcmp
.text:0000000000003CA5                 jmp     loc_3BC7
.text:0000000000003CA5 ; ---------------------------------------------------------------------------
.text:0000000000003CAA                 align 10h
.text:0000000000003CB0
.text:0000000000003CB0 loc_3CB0:                               ; CODE XREF: eval2+18E↑j
.text:0000000000003CB0                 lea     rdi, asc_160D1  ; "=="
.text:0000000000003CB7                 call    nextarg
.text:0000000000003CBC                 test    al, al
.text:0000000000003CBE                 jnz     short loc_3C60
.text:0000000000003CC0                 lea     rdi, asc_160D4  ; "!="
.text:0000000000003CC7                 mov     r12d, 3
.text:0000000000003CCD                 call    nextarg
.text:0000000000003CD2                 test    al, al
.text:0000000000003CD4                 jnz     loc_3B12
.text:0000000000003CDA                 lea     rdi, asc_160D7  ; ">="
.text:0000000000003CE1                 mov     r12d, 4
.text:0000000000003CE7                 call    nextarg
.text:0000000000003CEC                 test    al, al
.text:0000000000003CEE                 jnz     loc_3B12
.text:0000000000003CF4                 lea     rdi, asc_160DA  ; ">"
.text:0000000000003CFB                 call    nextarg
.text:0000000000003D00                 test    al, al
.text:0000000000003D02                 jz      short loc_3D0F
.text:0000000000003D04                 mov     r12d, 5
.text:0000000000003D0A                 jmp     loc_3B12
.text:0000000000003D0F ; ---------------------------------------------------------------------------
.text:0000000000003D0F
.text:0000000000003D0F loc_3D0F:                               ; CODE XREF: eval2+232↑j
.text:0000000000003D0F                 add     rsp, 8
.text:0000000000003D13                 mov     rax, rbx
.text:0000000000003D16                 pop     rbx
.text:0000000000003D17                 pop     rbp
.text:0000000000003D18                 pop     r12
.text:0000000000003D1A                 pop     r13
.text:0000000000003D1C                 pop     r14
.text:0000000000003D1E                 pop     r15
.text:0000000000003D20                 retn
.text:0000000000003D20 ; } // starts at 3AD0
.text:0000000000003D20 eval2           endp
.text:0000000000003D20
.text:0000000000003D20 ; ---------------------------------------------------------------------------
.text:0000000000003D21                 align 10h
.text:0000000000003D30
.text:0000000000003D30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D30
.text:0000000000003D30
.text:0000000000003D30 eval1           proc near               ; CODE XREF: eval+B↓p
.text:0000000000003D30                                         ; eval:loc_3E1A↓p
.text:0000000000003D30 ; __unwind {
.text:0000000000003D30                 push    r12
.text:0000000000003D32                 push    rbp
.text:0000000000003D33                 mov     r12d, edi
.text:0000000000003D36                 push    rbx
.text:0000000000003D37                 movzx   edi, dil
.text:0000000000003D3B                 call    eval2
.text:0000000000003D40                 mov     rbx, rax
.text:0000000000003D43
.text:0000000000003D43 loc_3D43:                               ; CODE XREF: eval1+A8↓j
.text:0000000000003D43                 lea     rdi, asc_160DC  ; "&"
.text:0000000000003D4A                 call    nextarg
.text:0000000000003D4F                 test    al, al
.text:0000000000003D51                 jz      short loc_3DC6
.text:0000000000003D53
.text:0000000000003D53 loc_3D53:                               ; CODE XREF: eval1+94↓j
.text:0000000000003D53                 xor     edi, edi
.text:0000000000003D55                 test    r12b, r12b
.text:0000000000003D58                 jz      short loc_3D68
.text:0000000000003D5A                 mov     rdi, rbx
.text:0000000000003D5D                 call    null
.text:0000000000003D62                 xor     eax, 1
.text:0000000000003D65                 movzx   edi, al
.text:0000000000003D68
.text:0000000000003D68 loc_3D68:                               ; CODE XREF: eval1+28↑j
.text:0000000000003D68                 call    eval2
.text:0000000000003D6D                 mov     rdi, rbx
.text:0000000000003D70                 mov     rbp, rax
.text:0000000000003D73                 call    null
.text:0000000000003D78                 test    al, al
.text:0000000000003D7A                 jnz     short loc_3D88
.text:0000000000003D7C                 mov     rdi, rbp
.text:0000000000003D7F                 call    null
.text:0000000000003D84                 test    al, al
.text:0000000000003D86                 jz      short loc_3DD0
.text:0000000000003D88
.text:0000000000003D88 loc_3D88:                               ; CODE XREF: eval1+4A↑j
.text:0000000000003D88                 mov     rdi, rbx        ; ptr
.text:0000000000003D8B                 call    freev
.text:0000000000003D90                 mov     rdi, rbp        ; ptr
.text:0000000000003D93                 call    freev
.text:0000000000003D98                 mov     edi, 18h
.text:0000000000003D9D                 call    xmalloc
.text:0000000000003DA2                 lea     rdi, [rax+8]
.text:0000000000003DA6                 xor     esi, esi
.text:0000000000003DA8                 mov     dword ptr [rax], 0
.text:0000000000003DAE                 mov     rbx, rax
.text:0000000000003DB1                 call    ___gmpz_init_set_ui
.text:0000000000003DB6                 lea     rdi, asc_160DC  ; "&"
.text:0000000000003DBD                 call    nextarg
.text:0000000000003DC2                 test    al, al
.text:0000000000003DC4                 jnz     short loc_3D53
.text:0000000000003DC6
.text:0000000000003DC6 loc_3DC6:                               ; CODE XREF: eval1+21↑j
.text:0000000000003DC6                 mov     rax, rbx
.text:0000000000003DC9                 pop     rbx
.text:0000000000003DCA                 pop     rbp
.text:0000000000003DCB                 pop     r12
.text:0000000000003DCD                 retn
.text:0000000000003DCD ; ---------------------------------------------------------------------------
.text:0000000000003DCE                 align 10h
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: eval1+56↑j
.text:0000000000003DD0                 mov     rdi, rbp        ; ptr
.text:0000000000003DD3                 call    freev
.text:0000000000003DD8                 jmp     loc_3D43
.text:0000000000003DD8 ; } // starts at 3D30
.text:0000000000003DD8 eval1           endp
.text:0000000000003DD8
.text:0000000000003DD8 ; ---------------------------------------------------------------------------
.text:0000000000003DDD                 align 20h
.text:0000000000003DE0
.text:0000000000003DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003DE0
.text:0000000000003DE0
.text:0000000000003DE0 eval            proc near               ; CODE XREF: main+D9↑p
.text:0000000000003DE0                                         ; eval6+AD↑p
.text:0000000000003DE0 ; __unwind {
.text:0000000000003DE0                 push    r12
.text:0000000000003DE2                 push    rbp
.text:0000000000003DE3                 mov     r12d, edi
.text:0000000000003DE6                 push    rbx
.text:0000000000003DE7                 movzx   edi, dil
.text:0000000000003DEB                 call    eval1
.text:0000000000003DF0                 mov     rbx, rax
.text:0000000000003DF3                 nop     dword ptr [rax+rax+00h]
.text:0000000000003DF8
.text:0000000000003DF8 loc_3DF8:                               ; CODE XREF: eval+63↓j
.text:0000000000003DF8                                         ; eval+B0↓j
.text:0000000000003DF8                 lea     rdi, asc_160DE  ; "|"
.text:0000000000003DFF                 call    nextarg
.text:0000000000003E04                 test    al, al
.text:0000000000003E06                 jz      short loc_3E7B
.text:0000000000003E08
.text:0000000000003E08 loc_3E08:                               ; CODE XREF: eval+99↓j
.text:0000000000003E08                 xor     edi, edi
.text:0000000000003E0A                 test    r12b, r12b
.text:0000000000003E0D                 jz      short loc_3E1A
.text:0000000000003E0F                 mov     rdi, rbx
.text:0000000000003E12                 call    null
.text:0000000000003E17                 movzx   edi, al
.text:0000000000003E1A
.text:0000000000003E1A loc_3E1A:                               ; CODE XREF: eval+2D↑j
.text:0000000000003E1A                 call    eval1
.text:0000000000003E1F                 mov     rdi, rbx
.text:0000000000003E22                 mov     rbp, rax
.text:0000000000003E25                 call    null
.text:0000000000003E2A                 test    al, al
.text:0000000000003E2C                 jz      short loc_3E88
.text:0000000000003E2E                 mov     rdi, rbx        ; ptr
.text:0000000000003E31                 mov     rbx, rbp
.text:0000000000003E34                 call    freev
.text:0000000000003E39                 mov     rdi, rbp
.text:0000000000003E3C                 call    null
.text:0000000000003E41                 test    al, al
.text:0000000000003E43                 jz      short loc_3DF8
.text:0000000000003E45                 mov     rdi, rbp        ; ptr
.text:0000000000003E48                 call    freev
.text:0000000000003E4D                 mov     edi, 18h
.text:0000000000003E52                 call    xmalloc
.text:0000000000003E57                 lea     rdi, [rax+8]
.text:0000000000003E5B                 xor     esi, esi
.text:0000000000003E5D                 mov     dword ptr [rax], 0
.text:0000000000003E63                 mov     rbx, rax
.text:0000000000003E66                 call    ___gmpz_init_set_ui
.text:0000000000003E6B                 lea     rdi, asc_160DE  ; "|"
.text:0000000000003E72                 call    nextarg
.text:0000000000003E77                 test    al, al
.text:0000000000003E79                 jnz     short loc_3E08
.text:0000000000003E7B
.text:0000000000003E7B loc_3E7B:                               ; CODE XREF: eval+26↑j
.text:0000000000003E7B                 mov     rax, rbx
.text:0000000000003E7E                 pop     rbx
.text:0000000000003E7F                 pop     rbp
.text:0000000000003E80                 pop     r12
.text:0000000000003E82                 retn
.text:0000000000003E82 ; ---------------------------------------------------------------------------
.text:0000000000003E83                 align 8
.text:0000000000003E88
.text:0000000000003E88 loc_3E88:                               ; CODE XREF: eval+4C↑j
.text:0000000000003E88                 mov     rdi, rbp        ; ptr
.text:0000000000003E8B                 call    freev
.text:0000000000003E90                 jmp     loc_3DF8
.text:0000000000003E90 ; } // starts at 3DE0
.text:0000000000003E90 eval            endp
.text:0000000000003E90
.text:0000000000003E90 ; ---------------------------------------------------------------------------
.text:0000000000003E95                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0
.text:0000000000003EA0                 public close_stdout_set_file_name
.text:0000000000003EA0 close_stdout_set_file_name proc near
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 mov     cs:file_name, rdi
.text:0000000000003EA7                 retn
.text:0000000000003EA7 ; } // starts at 3EA0
.text:0000000000003EA7 close_stdout_set_file_name endp
.text:0000000000003EA7
.text:0000000000003EA7 ; ---------------------------------------------------------------------------
.text:0000000000003EA8                 align 10h
.text:0000000000003EB0
.text:0000000000003EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EB0
.text:0000000000003EB0
.text:0000000000003EB0                 public close_stdout_set_ignore_EPIPE
.text:0000000000003EB0 close_stdout_set_ignore_EPIPE proc near
.text:0000000000003EB0 ; __unwind {
.text:0000000000003EB0                 mov     cs:ignore_EPIPE, dil
.text:0000000000003EB7                 retn
.text:0000000000003EB7 ; } // starts at 3EB0
.text:0000000000003EB7 close_stdout_set_ignore_EPIPE endp
.text:0000000000003EB7
.text:0000000000003EB7 ; ---------------------------------------------------------------------------
.text:0000000000003EB8                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0 ; Attributes: info_from_lumina
.text:0000000000003EC0
.text:0000000000003EC0 ; void __cdecl close_stdout()
.text:0000000000003EC0                 public close_stdout
.text:0000000000003EC0 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 push    rbp
.text:0000000000003EC1                 push    rbx
.text:0000000000003EC2                 sub     rsp, 8
.text:0000000000003EC6                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000003ECD                 call    close_stream
.text:0000000000003ED2                 test    eax, eax
.text:0000000000003ED4                 jz      short loc_3EEC
.text:0000000000003ED6                 call    ___errno_location
.text:0000000000003EDB                 cmp     cs:ignore_EPIPE, 0
.text:0000000000003EE2                 mov     rbx, rax
.text:0000000000003EE5                 jz      short loc_3F03
.text:0000000000003EE7                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000003EEA                 jnz     short loc_3F03
.text:0000000000003EEC
.text:0000000000003EEC loc_3EEC:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000003EEC                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000003EF3                 call    close_stream
.text:0000000000003EF8                 test    eax, eax
.text:0000000000003EFA                 jnz     short loc_3F42
.text:0000000000003EFC                 add     rsp, 8
.text:0000000000003F00                 pop     rbx
.text:0000000000003F01                 pop     rbp
.text:0000000000003F02                 retn
.text:0000000000003F03 ; ---------------------------------------------------------------------------
.text:0000000000003F03
.text:0000000000003F03 loc_3F03:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000003F03                                         ; close_stdout+2A↑j
.text:0000000000003F03                 lea     rsi, aWriteError ; "write error"
.text:0000000000003F0A                 xor     edi, edi        ; domainname
.text:0000000000003F0C                 mov     edx, 5          ; category
.text:0000000000003F11                 call    _dcgettext
.text:0000000000003F16                 mov     rdi, cs:file_name
.text:0000000000003F1D                 mov     rbp, rax
.text:0000000000003F20                 test    rdi, rdi
.text:0000000000003F23                 jz      short loc_3F4D
.text:0000000000003F25                 call    quotearg_colon
.text:0000000000003F2A                 mov     esi, [rbx]      ; errnum
.text:0000000000003F2C                 lea     rdx, format     ; "%s: %s"
.text:0000000000003F33                 mov     rcx, rax
.text:0000000000003F36                 mov     r8, rbp
.text:0000000000003F39                 xor     edi, edi        ; status
.text:0000000000003F3B                 xor     eax, eax
.text:0000000000003F3D                 call    _error
.text:0000000000003F42
.text:0000000000003F42 loc_3F42:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000003F42                                         ; close_stdout+A2↓j
.text:0000000000003F42                 mov     edi, cs:exit_failure ; status
.text:0000000000003F48                 call    __exit
.text:0000000000003F4D ; ---------------------------------------------------------------------------
.text:0000000000003F4D
.text:0000000000003F4D loc_3F4D:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000003F4D                 mov     esi, [rbx]      ; errnum
.text:0000000000003F4F                 lea     rdx, format+4   ; format
.text:0000000000003F56                 mov     rcx, rax
.text:0000000000003F59                 xor     edi, edi        ; status
.text:0000000000003F5B                 xor     eax, eax
.text:0000000000003F5D                 call    _error
.text:0000000000003F62                 jmp     short loc_3F42
.text:0000000000003F62 ; } // starts at 3EC0
.text:0000000000003F62 close_stdout    endp
.text:0000000000003F62
.text:0000000000003F62 ; ---------------------------------------------------------------------------
.text:0000000000003F64                 align 10h
.text:0000000000003F70
.text:0000000000003F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F70
.text:0000000000003F70
.text:0000000000003F70                 public parse_long_options
.text:0000000000003F70 parse_long_options proc near            ; CODE XREF: main+96↑p
.text:0000000000003F70
.text:0000000000003F70 var_100         = qword ptr -100h
.text:0000000000003F70 var_F8          = dword ptr -0F8h
.text:0000000000003F70 var_F4          = dword ptr -0F4h
.text:0000000000003F70 var_F0          = qword ptr -0F0h
.text:0000000000003F70 var_E8          = qword ptr -0E8h
.text:0000000000003F70 var_E0          = qword ptr -0E0h
.text:0000000000003F70 var_D8          = byte ptr -0D8h
.text:0000000000003F70 var_A8          = xmmword ptr -0A8h
.text:0000000000003F70 var_98          = xmmword ptr -98h
.text:0000000000003F70 var_88          = xmmword ptr -88h
.text:0000000000003F70 var_78          = xmmword ptr -78h
.text:0000000000003F70 var_68          = xmmword ptr -68h
.text:0000000000003F70 var_58          = xmmword ptr -58h
.text:0000000000003F70 var_48          = xmmword ptr -48h
.text:0000000000003F70 var_38          = xmmword ptr -38h
.text:0000000000003F70 arg_0           = byte ptr  8
.text:0000000000003F70
.text:0000000000003F70 ; __unwind {
.text:0000000000003F70                 push    r13
.text:0000000000003F72                 push    r12
.text:0000000000003F74                 mov     r13, r8
.text:0000000000003F77                 push    rbp
.text:0000000000003F78                 push    rbx
.text:0000000000003F79                 mov     rbp, rdx
.text:0000000000003F7C                 mov     r12, rcx
.text:0000000000003F7F                 sub     rsp, 0E8h
.text:0000000000003F86                 test    al, al
.text:0000000000003F88                 jz      short loc_3FC4
.text:0000000000003F8A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000003F8F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000003F94                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000003F9C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000003FA4                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000003FAC                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000003FB4                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000003FBC                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000003FC4
.text:0000000000003FC4 loc_3FC4:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000003FC4                 mov     rax, fs:28h
.text:0000000000003FCD                 mov     [rsp+108h+var_E0], rax
.text:0000000000003FD2                 xor     eax, eax
.text:0000000000003FD4                 cmp     edi, 2
.text:0000000000003FD7                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000003FDD                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000003FE7                 jz      short loc_4020
.text:0000000000003FE9
.text:0000000000003FE9 loc_3FE9:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000003FE9                                         ; parse_long_options+DD↓j ...
.text:0000000000003FE9                 mov     rax, [rsp+108h+var_E0]
.text:0000000000003FEE                 xor     rax, fs:28h
.text:0000000000003FF7                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000003FFD                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000004007                 jnz     loc_40AA
.text:000000000000400D                 add     rsp, 0E8h
.text:0000000000004014                 pop     rbx
.text:0000000000004015                 pop     rbp
.text:0000000000004016                 pop     r12
.text:0000000000004018                 pop     r13
.text:000000000000401A                 retn
.text:000000000000401A ; ---------------------------------------------------------------------------
.text:000000000000401B                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000004020                 lea     rcx, long_options ; longopts
.text:0000000000004027                 lea     rdx, shortopts  ; "+"
.text:000000000000402E                 xor     r8d, r8d        ; longind
.text:0000000000004031                 mov     [rsp+108h+var_100], r9
.text:0000000000004036                 call    _getopt_long
.text:000000000000403B                 cmp     eax, 0FFFFFFFFh
.text:000000000000403E                 jz      short loc_3FE9
.text:0000000000004040                 cmp     eax, 68h ; 'h'
.text:0000000000004043                 mov     r9, [rsp+108h+var_100]
.text:0000000000004048                 jz      short loc_40A0
.text:000000000000404A                 cmp     eax, 76h ; 'v'
.text:000000000000404D                 jnz     short loc_3FE9
.text:000000000000404F                 lea     rax, [rsp+108h+arg_0]
.text:0000000000004057                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:000000000000405E                 lea     r8, [rsp+108h+var_F8]
.text:0000000000004063                 mov     rcx, r13
.text:0000000000004066                 mov     rdx, r12
.text:0000000000004069                 mov     rsi, rbp
.text:000000000000406C                 mov     [rsp+108h+var_F0], rax
.text:0000000000004071                 lea     rax, [rsp+108h+var_D8]
.text:0000000000004076                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:000000000000407E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000004086                 mov     [rsp+108h+var_E8], rax
.text:000000000000408B                 call    version_etc_va
.text:0000000000004090                 xor     edi, edi        ; status
.text:0000000000004092                 call    _exit
.text:0000000000004092 ; ---------------------------------------------------------------------------
.text:0000000000004097                 align 20h
.text:00000000000040A0
.text:00000000000040A0 loc_40A0:                               ; CODE XREF: parse_long_options+D8↑j
.text:00000000000040A0                 xor     edi, edi
.text:00000000000040A2                 call    r9
.text:00000000000040A5                 jmp     loc_3FE9
.text:00000000000040AA ; ---------------------------------------------------------------------------
.text:00000000000040AA
.text:00000000000040AA loc_40AA:                               ; CODE XREF: parse_long_options+97↑j
.text:00000000000040AA                 call    ___stack_chk_fail
.text:00000000000040AA ; } // starts at 3F70
.text:00000000000040AA parse_long_options endp
.text:00000000000040AA
.text:00000000000040AA ; ---------------------------------------------------------------------------
.text:00000000000040AF                 align 10h
.text:00000000000040B0
.text:00000000000040B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040B0
.text:00000000000040B0
.text:00000000000040B0                 public parse_gnu_standard_options_only
.text:00000000000040B0 parse_gnu_standard_options_only proc near
.text:00000000000040B0
.text:00000000000040B0 var_F8          = dword ptr -0F8h
.text:00000000000040B0 var_F4          = dword ptr -0F4h
.text:00000000000040B0 var_F0          = qword ptr -0F0h
.text:00000000000040B0 var_E8          = qword ptr -0E8h
.text:00000000000040B0 var_E0          = qword ptr -0E0h
.text:00000000000040B0 var_D8          = byte ptr -0D8h
.text:00000000000040B0 var_A8          = xmmword ptr -0A8h
.text:00000000000040B0 var_98          = xmmword ptr -98h
.text:00000000000040B0 var_88          = xmmword ptr -88h
.text:00000000000040B0 var_78          = xmmword ptr -78h
.text:00000000000040B0 var_68          = xmmword ptr -68h
.text:00000000000040B0 var_58          = xmmword ptr -58h
.text:00000000000040B0 var_48          = xmmword ptr -48h
.text:00000000000040B0 var_38          = xmmword ptr -38h
.text:00000000000040B0 arg_0           = qword ptr  8
.text:00000000000040B0 arg_8           = byte ptr  10h
.text:00000000000040B0
.text:00000000000040B0 ; __unwind {
.text:00000000000040B0                 push    r14
.text:00000000000040B2                 push    r13
.text:00000000000040B4                 mov     r14, r8
.text:00000000000040B7                 push    r12
.text:00000000000040B9                 push    rbp
.text:00000000000040BA                 mov     r12, rdx
.text:00000000000040BD                 push    rbx
.text:00000000000040BE                 mov     r13, rcx
.text:00000000000040C1                 sub     rsp, 0D0h
.text:00000000000040C8                 test    al, al
.text:00000000000040CA                 mov     rbp, [rsp+0F8h+arg_0]
.text:00000000000040D2                 jz      short loc_410B
.text:00000000000040D4                 movaps  [rsp+0F8h+var_A8], xmm0
.text:00000000000040D9                 movaps  [rsp+0F8h+var_98], xmm1
.text:00000000000040DE                 movaps  [rsp+0F8h+var_88], xmm2
.text:00000000000040E3                 movaps  [rsp+0F8h+var_78], xmm3
.text:00000000000040EB                 movaps  [rsp+0F8h+var_68], xmm4
.text:00000000000040F3                 movaps  [rsp+0F8h+var_58], xmm5
.text:00000000000040FB                 movaps  [rsp+0F8h+var_48], xmm6
.text:0000000000004103                 movaps  [rsp+0F8h+var_38], xmm7
.text:000000000000410B
.text:000000000000410B loc_410B:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:000000000000410B                 mov     rax, fs:28h
.text:0000000000004114                 mov     [rsp+0F8h+var_E0], rax
.text:0000000000004119                 xor     eax, eax
.text:000000000000411B                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000004122                 lea     rax, shortopts  ; "+"
.text:0000000000004129                 test    r9b, r9b
.text:000000000000412C                 lea     rcx, long_options ; longopts
.text:0000000000004133                 cmovz   rdx, rax        ; shortopts
.text:0000000000004137                 xor     r8d, r8d        ; longind
.text:000000000000413A                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000004140                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:000000000000414A                 call    _getopt_long
.text:000000000000414F                 cmp     eax, 0FFFFFFFFh
.text:0000000000004152                 jz      short loc_41B8
.text:0000000000004154                 cmp     eax, 68h ; 'h'
.text:0000000000004157                 jz      loc_41E0
.text:000000000000415D                 cmp     eax, 76h ; 'v'
.text:0000000000004160                 jnz     short loc_41B0
.text:0000000000004162                 lea     rax, [rsp+0F8h+arg_8]
.text:000000000000416A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000004171                 mov     r8, rsp
.text:0000000000004174                 mov     rcx, r14
.text:0000000000004177                 mov     rdx, r13
.text:000000000000417A                 mov     rsi, r12
.text:000000000000417D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000004182                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000004187                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:000000000000418E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000004196                 mov     [rsp+0F8h+var_E8], rax
.text:000000000000419B                 call    version_etc_va
.text:00000000000041A0                 xor     edi, edi        ; status
.text:00000000000041A2                 call    _exit
.text:00000000000041A2 ; ---------------------------------------------------------------------------
.text:00000000000041A7                 align 10h
.text:00000000000041B0
.text:00000000000041B0 loc_41B0:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:00000000000041B0                 mov     edi, cs:exit_failure
.text:00000000000041B6                 call    rbp
.text:00000000000041B8
.text:00000000000041B8 loc_41B8:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:00000000000041B8                                         ; parse_gnu_standard_options_only+134↓j
.text:00000000000041B8                 mov     rax, [rsp+0F8h+var_E0]
.text:00000000000041BD                 xor     rax, fs:28h
.text:00000000000041C6                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:00000000000041CC                 jnz     short loc_41E6
.text:00000000000041CE                 add     rsp, 0D0h
.text:00000000000041D5                 pop     rbx
.text:00000000000041D6                 pop     rbp
.text:00000000000041D7                 pop     r12
.text:00000000000041D9                 pop     r13
.text:00000000000041DB                 pop     r14
.text:00000000000041DD                 retn
.text:00000000000041DD ; ---------------------------------------------------------------------------
.text:00000000000041DE                 align 20h
.text:00000000000041E0
.text:00000000000041E0 loc_41E0:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:00000000000041E0                 xor     edi, edi
.text:00000000000041E2                 call    rbp
.text:00000000000041E4                 jmp     short loc_41B8
.text:00000000000041E6 ; ---------------------------------------------------------------------------
.text:00000000000041E6
.text:00000000000041E6 loc_41E6:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:00000000000041E6                 call    ___stack_chk_fail
.text:00000000000041E6 ; } // starts at 40B0
.text:00000000000041E6 parse_gnu_standard_options_only endp
.text:00000000000041E6
.text:00000000000041E6 ; ---------------------------------------------------------------------------
.text:00000000000041EB                 align 10h
.text:00000000000041F0
.text:00000000000041F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041F0
.text:00000000000041F0 ; Attributes: info_from_lumina
.text:00000000000041F0
.text:00000000000041F0 ; __int64 __fastcall mb_width_aux(wint_t wc)
.text:00000000000041F0                 public mb_width_aux
.text:00000000000041F0 mb_width_aux    proc near
.text:00000000000041F0 ; __unwind {
.text:00000000000041F0                 push    rbx
.text:00000000000041F1                 mov     ebx, edi
.text:00000000000041F3                 call    _wcwidth
.text:00000000000041F8                 test    eax, eax
.text:00000000000041FA                 js      short loc_4200
.text:00000000000041FC                 pop     rbx
.text:00000000000041FD                 retn
.text:00000000000041FD ; ---------------------------------------------------------------------------
.text:00000000000041FE                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: mb_width_aux+A↑j
.text:0000000000004200                 mov     edi, ebx        ; wc
.text:0000000000004202                 call    _iswcntrl
.text:0000000000004207                 test    eax, eax
.text:0000000000004209                 setz    al
.text:000000000000420C                 movzx   eax, al
.text:000000000000420F                 pop     rbx
.text:0000000000004210                 retn
.text:0000000000004210 ; } // starts at 41F0
.text:0000000000004210 mb_width_aux    endp
.text:0000000000004210
.text:0000000000004210 ; ---------------------------------------------------------------------------
.text:0000000000004211                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220
.text:0000000000004220                 public mb_copy
.text:0000000000004220 mb_copy         proc near
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 push    rbp
.text:0000000000004221                 push    rbx
.text:0000000000004222                 mov     rbx, rsi
.text:0000000000004225                 lea     rax, [rbx+18h]
.text:0000000000004229                 mov     rbp, rdi
.text:000000000000422C                 sub     rsp, 8
.text:0000000000004230                 mov     rsi, [rsi]      ; src
.text:0000000000004233                 mov     rdx, [rbx+8]    ; n
.text:0000000000004237                 cmp     rsi, rax
.text:000000000000423A                 jz      short loc_4260
.text:000000000000423C                 mov     [rdi], rsi
.text:000000000000423F
.text:000000000000423F loc_423F:                               ; CODE XREF: mb_copy+54↓j
.text:000000000000423F                 movzx   eax, byte ptr [rbx+10h]
.text:0000000000004243                 mov     [rbp+8], rdx
.text:0000000000004247                 test    al, al
.text:0000000000004249                 mov     [rbp+10h], al
.text:000000000000424C                 jz      short loc_4254
.text:000000000000424E                 mov     eax, [rbx+14h]
.text:0000000000004251                 mov     [rbp+14h], eax
.text:0000000000004254
.text:0000000000004254 loc_4254:                               ; CODE XREF: mb_copy+2C↑j
.text:0000000000004254                 add     rsp, 8
.text:0000000000004258                 pop     rbx
.text:0000000000004259                 pop     rbp
.text:000000000000425A                 retn
.text:000000000000425A ; ---------------------------------------------------------------------------
.text:000000000000425B                 align 20h
.text:0000000000004260
.text:0000000000004260 loc_4260:                               ; CODE XREF: mb_copy+1A↑j
.text:0000000000004260                 lea     rcx, [rdi+18h]
.text:0000000000004264                 mov     rdi, rcx        ; dest
.text:0000000000004267                 call    _memcpy
.text:000000000000426C                 mov     rdx, [rbx+8]
.text:0000000000004270                 mov     [rbp+0], rax
.text:0000000000004274                 jmp     short loc_423F
.text:0000000000004274 ; } // starts at 4220
.text:0000000000004274 mb_copy         endp
.text:0000000000004274
.text:0000000000004274 ; ---------------------------------------------------------------------------
.text:0000000000004276                 align 20h
.text:0000000000004280
.text:0000000000004280 ; =============== S U B R O U T I N E =======================================
.text:0000000000004280
.text:0000000000004280
.text:0000000000004280                 public is_basic
.text:0000000000004280 is_basic        proc near
.text:0000000000004280 ; __unwind {
.text:0000000000004280                 mov     eax, edi
.text:0000000000004282                 lea     rdx, is_basic_table
.text:0000000000004289                 mov     ecx, edi
.text:000000000000428B                 shr     al, 5
.text:000000000000428E                 and     ecx, 1Fh
.text:0000000000004291                 and     eax, 7
.text:0000000000004294                 mov     eax, [rdx+rax*4]
.text:0000000000004297                 shr     eax, cl
.text:0000000000004299                 and     eax, 1
.text:000000000000429C                 retn
.text:000000000000429C ; } // starts at 4280
.text:000000000000429C is_basic        endp
.text:000000000000429C
.text:000000000000429C ; ---------------------------------------------------------------------------
.text:000000000000429D                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0
.text:00000000000042A0 ; __int64 __fastcall mbschr(char *s, int c)
.text:00000000000042A0                 public mbschr
.text:00000000000042A0 mbschr          proc near               ; CODE XREF: eval6+4A0↑p
.text:00000000000042A0
.text:00000000000042A0 var_78          = byte ptr -78h
.text:00000000000042A0 var_74          = qword ptr -74h
.text:00000000000042A0 var_6C          = byte ptr -6Ch
.text:00000000000042A0 s               = qword ptr -68h
.text:00000000000042A0 var_60          = qword ptr -60h
.text:00000000000042A0 var_58          = byte ptr -58h
.text:00000000000042A0 var_54          = dword ptr -54h
.text:00000000000042A0 var_30          = qword ptr -30h
.text:00000000000042A0
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 push    r14
.text:00000000000042A2                 push    r13
.text:00000000000042A4                 push    r12
.text:00000000000042A6                 push    rbp
.text:00000000000042A7                 mov     r12, rdi
.text:00000000000042AA                 push    rbx
.text:00000000000042AB                 mov     ebx, esi
.text:00000000000042AD                 sub     rsp, 50h
.text:00000000000042B1                 mov     rax, fs:28h
.text:00000000000042BA                 mov     [rsp+78h+var_30], rax
.text:00000000000042BF                 xor     eax, eax
.text:00000000000042C1                 call    ___ctype_get_mb_cur_max
.text:00000000000042C6                 cmp     rax, 1
.text:00000000000042CA                 jbe     short loc_42D3
.text:00000000000042CC                 cmp     bl, 2Fh ; '/'
.text:00000000000042CF                 mov     ebp, ebx
.text:00000000000042D1                 ja      short loc_4300
.text:00000000000042D3
.text:00000000000042D3 loc_42D3:                               ; CODE XREF: mbschr+2A↑j
.text:00000000000042D3                 mov     rax, [rsp+78h+var_30]
.text:00000000000042D8                 xor     rax, fs:28h
.text:00000000000042E1                 jnz     loc_44E3
.text:00000000000042E7                 add     rsp, 50h
.text:00000000000042EB                 mov     esi, ebx        ; c
.text:00000000000042ED                 mov     rdi, r12        ; s
.text:00000000000042F0                 pop     rbx
.text:00000000000042F1                 pop     rbp
.text:00000000000042F2                 pop     r12
.text:00000000000042F4                 pop     r13
.text:00000000000042F6                 pop     r14
.text:00000000000042F8                 jmp     _strchr
.text:00000000000042F8 ; ---------------------------------------------------------------------------
.text:00000000000042FD                 align 20h
.text:0000000000004300
.text:0000000000004300 loc_4300:                               ; CODE XREF: mbschr+31↑j
.text:0000000000004300                 mov     rbx, rsp
.text:0000000000004303                 mov     [rsp+78h+s], r12
.text:0000000000004308                 mov     [rsp+78h+var_78], 0
.text:000000000000430C                 mov     [rsp+78h+var_74], 0
.text:0000000000004315                 mov     [rsp+78h+var_6C], 0
.text:000000000000431A                 lea     r12, is_basic_table
.text:0000000000004321                 lea     r13, [rbx+4]
.text:0000000000004325                 jmp     short loc_438E
.text:0000000000004325 ; ---------------------------------------------------------------------------
.text:0000000000004327                 align 10h
.text:0000000000004330
.text:0000000000004330 loc_4330:                               ; CODE XREF: mbschr+F2↓j
.text:0000000000004330                 mov     rax, [rsp+78h+s]
.text:0000000000004335                 movzx   ecx, byte ptr [rax]
.text:0000000000004338                 mov     edx, ecx
.text:000000000000433A                 shr     dl, 5
.text:000000000000433D                 and     edx, 7
.text:0000000000004340                 mov     edx, [r12+rdx*4]
.text:0000000000004344                 bt      edx, ecx
.text:0000000000004347                 jnb     loc_4448
.text:000000000000434D                 mov     [rsp+78h+var_60], 1
.text:0000000000004356                 movsx   edx, byte ptr [rax]
.text:0000000000004359                 mov     [rsp+78h+var_58], 1
.text:000000000000435E                 mov     [rsp+78h+var_6C], 1
.text:0000000000004363                 test    edx, edx
.text:0000000000004365                 mov     [rsp+78h+var_54], edx
.text:0000000000004369                 jz      loc_44C0
.text:000000000000436F                 mov     edx, 1
.text:0000000000004374                 mov     r14, rax
.text:0000000000004377
.text:0000000000004377 loc_4377:                               ; CODE XREF: mbschr+19D↓j
.text:0000000000004377                                         ; mbschr+1E5↓j
.text:0000000000004377                 cmp     bpl, [r14]
.text:000000000000437A                 jz      loc_44C3
.text:0000000000004380
.text:0000000000004380 loc_4380:                               ; CODE XREF: mbschr+197↓j
.text:0000000000004380                 lea     rax, [r14+rdx]
.text:0000000000004384                 mov     [rsp+78h+var_6C], 0
.text:0000000000004389                 mov     [rsp+78h+s], rax
.text:000000000000438E
.text:000000000000438E loc_438E:                               ; CODE XREF: mbschr+85↑j
.text:000000000000438E                 cmp     [rsp+78h+var_78], 0
.text:0000000000004392                 jz      short loc_4330
.text:0000000000004394
.text:0000000000004394 loc_4394:                               ; CODE XREF: mbschr+1BC↓j
.text:0000000000004394                 call    ___ctype_get_mb_cur_max
.text:0000000000004399                 mov     r14, [rsp+78h+s]
.text:000000000000439E                 mov     rsi, rax
.text:00000000000043A1                 mov     rdi, r14
.text:00000000000043A4                 call    strnlen1
.text:00000000000043A9                 lea     rcx, [rbx+4]
.text:00000000000043AD                 lea     rdi, [rbx+24h]
.text:00000000000043B1                 mov     rdx, rax
.text:00000000000043B4                 mov     rsi, r14
.text:00000000000043B7                 call    rpl_mbrtowc
.text:00000000000043BC                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000043C0                 mov     [rsp+78h+var_60], rax
.text:00000000000043C5                 jz      loc_4468
.text:00000000000043CB                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000043CF                 jz      loc_4490
.text:00000000000043D5                 test    rax, rax
.text:00000000000043D8                 jnz     short loc_43FE
.text:00000000000043DA                 mov     r14, [rsp+78h+s]
.text:00000000000043DF                 mov     [rsp+78h+var_60], 1
.text:00000000000043E8                 cmp     byte ptr [r14], 0
.text:00000000000043EC                 jnz     loc_4507
.text:00000000000043F2                 mov     edx, [rsp+78h+var_54]
.text:00000000000043F6                 test    edx, edx
.text:00000000000043F8                 jnz     loc_4526
.text:00000000000043FE
.text:00000000000043FE loc_43FE:                               ; CODE XREF: mbschr+138↑j
.text:00000000000043FE                 lea     rdi, [rbx+4]    ; ps
.text:0000000000004402                 mov     [rsp+78h+var_58], 1
.text:0000000000004407                 call    _mbsinit
.text:000000000000440C                 test    eax, eax
.text:000000000000440E                 jz      loc_44B0
.text:0000000000004414                 mov     [rsp+78h+var_78], 0
.text:0000000000004418                 mov     [rsp+78h+var_6C], 1
.text:000000000000441D
.text:000000000000441D loc_441D:                               ; CODE XREF: mbschr+215↓j
.text:000000000000441D                 mov     eax, [rsp+78h+var_54]
.text:0000000000004421                 test    eax, eax
.text:0000000000004423                 jz      loc_44C0
.text:0000000000004429                 mov     r14, [rsp+78h+s]
.text:000000000000442E
.text:000000000000442E loc_442E:                               ; CODE XREF: mbschr+20C↓j
.text:000000000000442E                 mov     rdx, [rsp+78h+var_60]
.text:0000000000004433                 cmp     rdx, 1
.text:0000000000004437                 jnz     loc_4380
.text:000000000000443D                 jmp     loc_4377
.text:000000000000443D ; ---------------------------------------------------------------------------
.text:0000000000004442                 align 8
.text:0000000000004448
.text:0000000000004448 loc_4448:                               ; CODE XREF: mbschr+A7↑j
.text:0000000000004448                 mov     rdi, r13        ; ps
.text:000000000000444B                 call    _mbsinit
.text:0000000000004450                 test    eax, eax
.text:0000000000004452                 jz      loc_44E8
.text:0000000000004458                 mov     [rsp+78h+var_78], 1
.text:000000000000445C                 jmp     loc_4394
.text:000000000000445C ; ---------------------------------------------------------------------------
.text:0000000000004461                 align 8
.text:0000000000004468
.text:0000000000004468 loc_4468:                               ; CODE XREF: mbschr+125↑j
.text:0000000000004468                 mov     [rsp+78h+var_60], 1
.text:0000000000004471                 mov     [rsp+78h+var_58], 0
.text:0000000000004476                 mov     edx, 1
.text:000000000000447B                 mov     [rsp+78h+var_6C], 1
.text:0000000000004480                 mov     r14, [rsp+78h+s]
.text:0000000000004485                 jmp     loc_4377
.text:0000000000004485 ; ---------------------------------------------------------------------------
.text:000000000000448A                 align 10h
.text:0000000000004490
.text:0000000000004490 loc_4490:                               ; CODE XREF: mbschr+12F↑j
.text:0000000000004490                 mov     r14, [rsp+78h+s]
.text:0000000000004495                 mov     rdi, r14        ; s
.text:0000000000004498                 call    _strlen
.text:000000000000449D                 mov     [rsp+78h+var_58], 0
.text:00000000000044A2                 mov     [rsp+78h+var_60], rax
.text:00000000000044A7                 mov     [rsp+78h+var_6C], 1
.text:00000000000044AC                 jmp     short loc_442E
.text:00000000000044AC ; ---------------------------------------------------------------------------
.text:00000000000044AE                 align 10h
.text:00000000000044B0
.text:00000000000044B0 loc_44B0:                               ; CODE XREF: mbschr+16E↑j
.text:00000000000044B0                 mov     [rsp+78h+var_6C], 1
.text:00000000000044B5                 jmp     loc_441D
.text:00000000000044B5 ; ---------------------------------------------------------------------------
.text:00000000000044BA                 align 20h
.text:00000000000044C0
.text:00000000000044C0 loc_44C0:                               ; CODE XREF: mbschr+C9↑j
.text:00000000000044C0                                         ; mbschr+183↑j
.text:00000000000044C0                 xor     r14d, r14d
.text:00000000000044C3
.text:00000000000044C3 loc_44C3:                               ; CODE XREF: mbschr+DA↑j
.text:00000000000044C3                 mov     rsi, [rsp+78h+var_30]
.text:00000000000044C8                 xor     rsi, fs:28h
.text:00000000000044D1                 mov     rax, r14
.text:00000000000044D4                 jnz     short loc_44E3
.text:00000000000044D6                 add     rsp, 50h
.text:00000000000044DA                 pop     rbx
.text:00000000000044DB                 pop     rbp
.text:00000000000044DC                 pop     r12
.text:00000000000044DE                 pop     r13
.text:00000000000044E0                 pop     r14
.text:00000000000044E2                 retn
.text:00000000000044E3 ; ---------------------------------------------------------------------------
.text:00000000000044E3
.text:00000000000044E3 loc_44E3:                               ; CODE XREF: mbschr+41↑j
.text:00000000000044E3                                         ; mbschr+234↑j
.text:00000000000044E3                 call    ___stack_chk_fail
.text:00000000000044E8 ; ---------------------------------------------------------------------------
.text:00000000000044E8
.text:00000000000044E8 loc_44E8:                               ; CODE XREF: mbschr+1B2↑j
.text:00000000000044E8                 lea     rcx, __PRETTY_FUNCTION___5021 ; "mbuiter_multi_next"
.text:00000000000044EF                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:00000000000044F6                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:00000000000044FD                 mov     edx, 96h        ; line
.text:0000000000004502                 call    ___assert_fail
.text:0000000000004507 ; ---------------------------------------------------------------------------
.text:0000000000004507
.text:0000000000004507 loc_4507:                               ; CODE XREF: mbschr+14C↑j
.text:0000000000004507                 lea     rcx, __PRETTY_FUNCTION___5021 ; "mbuiter_multi_next"
.text:000000000000450E                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000004515                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:000000000000451C                 mov     edx, 0B2h       ; line
.text:0000000000004521                 call    ___assert_fail
.text:0000000000004526 ; ---------------------------------------------------------------------------
.text:0000000000004526
.text:0000000000004526 loc_4526:                               ; CODE XREF: mbschr+158↑j
.text:0000000000004526                 lea     rcx, __PRETTY_FUNCTION___5021 ; "mbuiter_multi_next"
.text:000000000000452D                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000004534                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:000000000000453B                 mov     edx, 0B3h       ; line
.text:0000000000004540                 call    ___assert_fail
.text:0000000000004540 ; } // starts at 42A0
.text:0000000000004540 mbschr          endp
.text:0000000000004540
.text:0000000000004540 ; ---------------------------------------------------------------------------
.text:0000000000004545                 align 10h
.text:0000000000004550
.text:0000000000004550 ; =============== S U B R O U T I N E =======================================
.text:0000000000004550
.text:0000000000004550
.text:0000000000004550 ; __int64 __fastcall mbslen(char *s)
.text:0000000000004550                 public mbslen
.text:0000000000004550 mbslen          proc near               ; CODE XREF: eval6+187↑p
.text:0000000000004550                                         ; eval6+270↑p
.text:0000000000004550
.text:0000000000004550 var_78          = byte ptr -78h
.text:0000000000004550 var_74          = qword ptr -74h
.text:0000000000004550 var_6C          = byte ptr -6Ch
.text:0000000000004550 s               = qword ptr -68h
.text:0000000000004550 var_60          = qword ptr -60h
.text:0000000000004550 var_58          = byte ptr -58h
.text:0000000000004550 var_54          = dword ptr -54h
.text:0000000000004550 var_30          = qword ptr -30h
.text:0000000000004550
.text:0000000000004550 ; __unwind {
.text:0000000000004550                 push    r14
.text:0000000000004552                 push    r13
.text:0000000000004554                 push    r12
.text:0000000000004556                 push    rbp
.text:0000000000004557                 push    rbx
.text:0000000000004558                 mov     rbx, rdi
.text:000000000000455B                 sub     rsp, 50h
.text:000000000000455F                 mov     rax, fs:28h
.text:0000000000004568                 mov     [rsp+78h+var_30], rax
.text:000000000000456D                 xor     eax, eax
.text:000000000000456F                 call    ___ctype_get_mb_cur_max
.text:0000000000004574                 cmp     rax, 1
.text:0000000000004578                 ja      short loc_45B0
.text:000000000000457A                 mov     rdi, rbx        ; s
.text:000000000000457D                 call    _strlen
.text:0000000000004582                 mov     rbx, rax
.text:0000000000004585
.text:0000000000004585 loc_4585:                               ; CODE XREF: mbslen+CD↓j
.text:0000000000004585                 mov     rsi, [rsp+78h+var_30]
.text:000000000000458A                 xor     rsi, fs:28h
.text:0000000000004593                 mov     rax, rbx
.text:0000000000004596                 jnz     loc_4739
.text:000000000000459C                 add     rsp, 50h
.text:00000000000045A0                 pop     rbx
.text:00000000000045A1                 pop     rbp
.text:00000000000045A2                 pop     r12
.text:00000000000045A4                 pop     r13
.text:00000000000045A6                 pop     r14
.text:00000000000045A8                 retn
.text:00000000000045A8 ; ---------------------------------------------------------------------------
.text:00000000000045A9                 align 10h
.text:00000000000045B0
.text:00000000000045B0 loc_45B0:                               ; CODE XREF: mbslen+28↑j
.text:00000000000045B0                 mov     rbp, rsp
.text:00000000000045B3                 mov     [rsp+78h+s], rbx
.text:00000000000045B8                 mov     [rsp+78h+var_78], 0
.text:00000000000045BC                 mov     [rsp+78h+var_74], 0
.text:00000000000045C5                 mov     [rsp+78h+var_6C], 0
.text:00000000000045CA                 xor     ebx, ebx
.text:00000000000045CC                 lea     r12, is_basic_table
.text:00000000000045D3                 lea     r13, [rbp+4]
.text:00000000000045D7                 jmp     short loc_4636
.text:00000000000045D7 ; ---------------------------------------------------------------------------
.text:00000000000045D9                 align 20h
.text:00000000000045E0
.text:00000000000045E0 loc_45E0:                               ; CODE XREF: mbslen+EA↓j
.text:00000000000045E0                 mov     rcx, [rsp+78h+s]
.text:00000000000045E5                 movzx   edx, byte ptr [rcx]
.text:00000000000045E8                 mov     eax, edx
.text:00000000000045EA                 shr     al, 5
.text:00000000000045ED                 and     eax, 7
.text:00000000000045F0                 mov     eax, [r12+rax*4]
.text:00000000000045F4                 bt      eax, edx
.text:00000000000045F7                 jnb     loc_46C0
.text:00000000000045FD                 mov     [rsp+78h+var_60], 1
.text:0000000000004606                 movsx   eax, byte ptr [rcx]
.text:0000000000004609                 mov     [rsp+78h+var_58], 1
.text:000000000000460E                 mov     [rsp+78h+var_6C], 1
.text:0000000000004613                 mov     [rsp+78h+var_54], eax
.text:0000000000004617
.text:0000000000004617 loc_4617:                               ; CODE XREF: mbslen+168↓j
.text:0000000000004617                                         ; mbslen+1C5↓j
.text:0000000000004617                 mov     eax, [rsp+78h+var_54]
.text:000000000000461B                 test    eax, eax
.text:000000000000461D                 jz      loc_4585
.text:0000000000004623
.text:0000000000004623 loc_4623:                               ; CODE XREF: mbslen+196↓j
.text:0000000000004623                                         ; mbslen+1B4↓j
.text:0000000000004623                 mov     rax, [rsp+78h+var_60]
.text:0000000000004628                 add     [rsp+78h+s], rax
.text:000000000000462D                 add     rbx, 1
.text:0000000000004631                 mov     [rsp+78h+var_6C], 0
.text:0000000000004636
.text:0000000000004636 loc_4636:                               ; CODE XREF: mbslen+87↑j
.text:0000000000004636                 cmp     [rsp+78h+var_78], 0
.text:000000000000463A                 jz      short loc_45E0
.text:000000000000463C
.text:000000000000463C loc_463C:                               ; CODE XREF: mbslen+180↓j
.text:000000000000463C                 call    ___ctype_get_mb_cur_max
.text:0000000000004641                 mov     r14, [rsp+78h+s]
.text:0000000000004646                 mov     rsi, rax
.text:0000000000004649                 mov     rdi, r14
.text:000000000000464C                 call    strnlen1
.text:0000000000004651                 lea     rcx, [rbp+4]
.text:0000000000004655                 lea     rdi, [rbp+24h]
.text:0000000000004659                 mov     rdx, rax
.text:000000000000465C                 mov     rsi, r14
.text:000000000000465F                 call    rpl_mbrtowc
.text:0000000000004664                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004668                 mov     [rsp+78h+var_60], rax
.text:000000000000466D                 jz      short loc_46D8
.text:000000000000466F                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000004673                 jz      short loc_46F0
.text:0000000000004675                 test    rax, rax
.text:0000000000004678                 jnz     short loc_469D
.text:000000000000467A                 mov     rax, [rsp+78h+s]
.text:000000000000467F                 mov     [rsp+78h+var_60], 1
.text:0000000000004688                 cmp     byte ptr [rax], 0
.text:000000000000468B                 jnz     loc_473E
.text:0000000000004691                 mov     edx, [rsp+78h+var_54]
.text:0000000000004695                 test    edx, edx
.text:0000000000004697                 jnz     loc_475D
.text:000000000000469D
.text:000000000000469D loc_469D:                               ; CODE XREF: mbslen+128↑j
.text:000000000000469D                 lea     rdi, [rbp+4]    ; ps
.text:00000000000046A1                 mov     [rsp+78h+var_58], 1
.text:00000000000046A6                 call    _mbsinit
.text:00000000000046AB                 test    eax, eax
.text:00000000000046AD                 jz      short loc_4710
.text:00000000000046AF                 mov     [rsp+78h+var_78], 0
.text:00000000000046B3                 mov     [rsp+78h+var_6C], 1
.text:00000000000046B8                 jmp     loc_4617
.text:00000000000046B8 ; ---------------------------------------------------------------------------
.text:00000000000046BD                 align 20h
.text:00000000000046C0
.text:00000000000046C0 loc_46C0:                               ; CODE XREF: mbslen+A7↑j
.text:00000000000046C0                 mov     rdi, r13        ; ps
.text:00000000000046C3                 call    _mbsinit
.text:00000000000046C8                 test    eax, eax
.text:00000000000046CA                 jz      short loc_471A
.text:00000000000046CC                 mov     [rsp+78h+var_78], 1
.text:00000000000046D0                 jmp     loc_463C
.text:00000000000046D0 ; ---------------------------------------------------------------------------
.text:00000000000046D5                 align 8
.text:00000000000046D8
.text:00000000000046D8 loc_46D8:                               ; CODE XREF: mbslen+11D↑j
.text:00000000000046D8                 mov     [rsp+78h+var_60], 1
.text:00000000000046E1                 mov     [rsp+78h+var_58], 0
.text:00000000000046E6                 jmp     loc_4623
.text:00000000000046E6 ; ---------------------------------------------------------------------------
.text:00000000000046EB                 align 10h
.text:00000000000046F0
.text:00000000000046F0 loc_46F0:                               ; CODE XREF: mbslen+123↑j
.text:00000000000046F0                 mov     rdi, [rsp+78h+s] ; s
.text:00000000000046F5                 call    _strlen
.text:00000000000046FA                 mov     [rsp+78h+var_58], 0
.text:00000000000046FF                 mov     [rsp+78h+var_60], rax
.text:0000000000004704                 jmp     loc_4623
.text:0000000000004704 ; ---------------------------------------------------------------------------
.text:0000000000004709                 align 10h
.text:0000000000004710
.text:0000000000004710 loc_4710:                               ; CODE XREF: mbslen+15D↑j
.text:0000000000004710                 mov     [rsp+78h+var_6C], 1
.text:0000000000004715                 jmp     loc_4617
.text:000000000000471A ; ---------------------------------------------------------------------------
.text:000000000000471A
.text:000000000000471A loc_471A:                               ; CODE XREF: mbslen+17A↑j
.text:000000000000471A                 lea     rcx, __PRETTY_FUNCTION___5021_0 ; "mbuiter_multi_next"
.text:0000000000004721                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:0000000000004728                 lea     rdi, aMbsinitIterSta ; "mbsinit (&iter->state)"
.text:000000000000472F                 mov     edx, 96h        ; line
.text:0000000000004734                 call    ___assert_fail
.text:0000000000004739 ; ---------------------------------------------------------------------------
.text:0000000000004739
.text:0000000000004739 loc_4739:                               ; CODE XREF: mbslen+46↑j
.text:0000000000004739                 call    ___stack_chk_fail
.text:000000000000473E ; ---------------------------------------------------------------------------
.text:000000000000473E
.text:000000000000473E loc_473E:                               ; CODE XREF: mbslen+13B↑j
.text:000000000000473E                 lea     rcx, __PRETTY_FUNCTION___5021_0 ; "mbuiter_multi_next"
.text:0000000000004745                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000000474C                 lea     rdi, aIterCurPtr0 ; "*iter->cur.ptr == '\\0'"
.text:0000000000004753                 mov     edx, 0B2h       ; line
.text:0000000000004758                 call    ___assert_fail
.text:000000000000475D ; ---------------------------------------------------------------------------
.text:000000000000475D
.text:000000000000475D loc_475D:                               ; CODE XREF: mbslen+147↑j
.text:000000000000475D                 lea     rcx, __PRETTY_FUNCTION___5021_0 ; "mbuiter_multi_next"
.text:0000000000004764                 lea     rsi, file       ; "../coreutils-8.31/lib/mbuiter.h"
.text:000000000000476B                 lea     rdi, assertion  ; "iter->cur.wc == 0"
.text:0000000000004772                 mov     edx, 0B3h       ; line
.text:0000000000004777                 call    ___assert_fail
.text:0000000000004777 ; } // starts at 4550
.text:0000000000004777 mbslen          endp
.text:0000000000004777
.text:0000000000004777 ; ---------------------------------------------------------------------------
.text:000000000000477C                 align 20h
.text:0000000000004780
.text:0000000000004780 ; =============== S U B R O U T I N E =======================================
.text:0000000000004780
.text:0000000000004780
.text:0000000000004780                 public set_program_name
.text:0000000000004780 set_program_name proc near              ; CODE XREF: main+E↑p
.text:0000000000004780 ; __unwind {
.text:0000000000004780                 test    rdi, rdi
.text:0000000000004783                 push    rbx
.text:0000000000004784                 jz      short loc_47FD
.text:0000000000004786                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000478B                 mov     rbx, rdi
.text:000000000000478E                 call    _strrchr
.text:0000000000004793                 test    rax, rax
.text:0000000000004796                 jz      short loc_47ED
.text:0000000000004798                 lea     r8, [rax+1]
.text:000000000000479C                 mov     rdx, r8
.text:000000000000479F                 sub     rdx, rbx
.text:00000000000047A2                 cmp     rdx, 6
.text:00000000000047A6                 jle     short loc_47ED
.text:00000000000047A8                 lea     rsi, [rax-6]
.text:00000000000047AC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000047B3                 mov     ecx, 7
.text:00000000000047B8                 repe cmpsb
.text:00000000000047BA                 setnbe  dl
.text:00000000000047BD                 sbb     dl, 0
.text:00000000000047C0                 test    dl, dl
.text:00000000000047C2                 jnz     short loc_47ED
.text:00000000000047C4                 lea     rdi, aLt        ; "lt-"
.text:00000000000047CB                 mov     ecx, 3
.text:00000000000047D0                 mov     rsi, r8
.text:00000000000047D3                 mov     rbx, r8
.text:00000000000047D6                 repe cmpsb
.text:00000000000047D8                 setnbe  dl
.text:00000000000047DB                 sbb     dl, 0
.text:00000000000047DE                 test    dl, dl
.text:00000000000047E0                 jnz     short loc_47ED
.text:00000000000047E2                 lea     rbx, [rax+4]
.text:00000000000047E6                 mov     cs:__bss_start, rbx
.text:00000000000047ED
.text:00000000000047ED loc_47ED:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000047ED                                         ; set_program_name+26↑j ...
.text:00000000000047ED                 mov     cs:program_name, rbx
.text:00000000000047F4                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:00000000000047FB                 pop     rbx
.text:00000000000047FC                 retn
.text:00000000000047FD ; ---------------------------------------------------------------------------
.text:00000000000047FD
.text:00000000000047FD loc_47FD:                               ; CODE XREF: set_program_name+4↑j
.text:00000000000047FD                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000004804                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000480B                 mov     edx, 37h ; '7'  ; n
.text:0000000000004810                 mov     esi, 1          ; size
.text:0000000000004815                 call    _fwrite
.text:000000000000481A                 call    _abort
.text:000000000000481A ; } // starts at 4780
.text:000000000000481A set_program_name endp
.text:000000000000481A
.text:000000000000481A ; ---------------------------------------------------------------------------
.text:000000000000481F                 align 20h
.text:0000000000004820
.text:0000000000004820 ; =============== S U B R O U T I N E =======================================
.text:0000000000004820
.text:0000000000004820 ; Attributes: info_from_lumina
.text:0000000000004820
.text:0000000000004820 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000004820 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000004820                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000004820 ; __unwind {
.text:0000000000004820                 push    rbp
.text:0000000000004821                 push    rbx
.text:0000000000004822                 mov     rbp, rdi
.text:0000000000004825                 mov     ebx, esi
.text:0000000000004827                 sub     rsp, 8
.text:000000000000482B                 call    locale_charset
.text:0000000000004830                 movzx   edx, byte ptr [rax]
.text:0000000000004833                 and     edx, 0FFFFFFDFh
.text:0000000000004836                 cmp     dl, 55h ; 'U'
.text:0000000000004839                 jz      short loc_48B0
.text:000000000000483B                 cmp     dl, 47h ; 'G'
.text:000000000000483E                 jz      short loc_4860
.text:0000000000004840
.text:0000000000004840 loc_4840:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000004840                                         ; gettext_quote+50↓j ...
.text:0000000000004840                 lea     rax, unk_1624B
.text:0000000000004847                 lea     rdx, aSyntaxErrorUne_0+1Bh ; "'"
.text:000000000000484E                 cmp     ebx, 9
.text:0000000000004851                 cmovnz  rax, rdx
.text:0000000000004855                 add     rsp, 8
.text:0000000000004859                 pop     rbx
.text:000000000000485A                 pop     rbp
.text:000000000000485B                 retn
.text:000000000000485B ; ---------------------------------------------------------------------------
.text:000000000000485C                 align 20h
.text:0000000000004860
.text:0000000000004860 loc_4860:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000004860                 movzx   edx, byte ptr [rax+1]
.text:0000000000004864                 and     edx, 0FFFFFFDFh
.text:0000000000004867                 cmp     dl, 42h ; 'B'
.text:000000000000486A                 jnz     short loc_4840
.text:000000000000486C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000004870                 jnz     short loc_4840
.text:0000000000004872                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000004876                 jnz     short loc_4840
.text:0000000000004878                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000487C                 jnz     short loc_4840
.text:000000000000487E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000004882                 jnz     short loc_4840
.text:0000000000004884                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000004888                 jnz     short loc_4840
.text:000000000000488A                 cmp     byte ptr [rax+7], 0
.text:000000000000488E                 jnz     short loc_4840
.text:0000000000004890                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000004894                 lea     rax, unk_16244
.text:000000000000489B                 lea     rdx, unk_16248
.text:00000000000048A2                 cmovnz  rax, rdx
.text:00000000000048A6                 add     rsp, 8
.text:00000000000048AA                 pop     rbx
.text:00000000000048AB                 pop     rbp
.text:00000000000048AC                 retn
.text:00000000000048AC ; ---------------------------------------------------------------------------
.text:00000000000048AD                 align 10h
.text:00000000000048B0
.text:00000000000048B0 loc_48B0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000048B0                 movzx   edx, byte ptr [rax+1]
.text:00000000000048B4                 and     edx, 0FFFFFFDFh
.text:00000000000048B7                 cmp     dl, 54h ; 'T'
.text:00000000000048BA                 jnz     short loc_4840
.text:00000000000048BC                 movzx   edx, byte ptr [rax+2]
.text:00000000000048C0                 and     edx, 0FFFFFFDFh
.text:00000000000048C3                 cmp     dl, 46h ; 'F'
.text:00000000000048C6                 jnz     loc_4840
.text:00000000000048CC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000048D0                 jnz     loc_4840
.text:00000000000048D6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000048DA                 jnz     loc_4840
.text:00000000000048E0                 cmp     byte ptr [rax+5], 0
.text:00000000000048E4                 jnz     loc_4840
.text:00000000000048EA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000048EE                 lea     rax, unk_1623C
.text:00000000000048F5                 lea     rdx, unk_16240
.text:00000000000048FC                 cmovnz  rax, rdx
.text:0000000000004900                 add     rsp, 8
.text:0000000000004904                 pop     rbx
.text:0000000000004905                 pop     rbp
.text:0000000000004906                 retn
.text:0000000000004906 ; } // starts at 4820
.text:0000000000004906 gettext_quote   endp
.text:0000000000004906
.text:0000000000004906 ; ---------------------------------------------------------------------------
.text:0000000000004907                 align 10h
.text:0000000000004910
.text:0000000000004910 ; =============== S U B R O U T I N E =======================================
.text:0000000000004910
.text:0000000000004910 ; Attributes: info_from_lumina
.text:0000000000004910
.text:0000000000004910 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000004910 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000004910                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000004910
.text:0000000000004910 var_E0          = dword ptr -0E0h
.text:0000000000004910 var_DB          = byte ptr -0DBh
.text:0000000000004910 var_DA          = byte ptr -0DAh
.text:0000000000004910 var_D9          = byte ptr -0D9h
.text:0000000000004910 s               = qword ptr -0D8h
.text:0000000000004910 n               = qword ptr -0D0h
.text:0000000000004910 var_C8          = qword ptr -0C8h
.text:0000000000004910 ps              = qword ptr -0C0h
.text:0000000000004910 var_B8          = qword ptr -0B8h
.text:0000000000004910 var_B0          = qword ptr -0B0h
.text:0000000000004910 var_A8          = qword ptr -0A8h
.text:0000000000004910 s2              = qword ptr -0A0h
.text:0000000000004910 var_98          = qword ptr -98h
.text:0000000000004910 var_90          = qword ptr -90h
.text:0000000000004910 var_88          = qword ptr -88h
.text:0000000000004910 var_80          = qword ptr -80h
.text:0000000000004910 var_78          = qword ptr -78h
.text:0000000000004910 var_70          = dword ptr -70h
.text:0000000000004910 var_6C          = byte ptr -6Ch
.text:0000000000004910 var_6B          = byte ptr -6Bh
.text:0000000000004910 var_6A          = byte ptr -6Ah
.text:0000000000004910 var_69          = byte ptr -69h
.text:0000000000004910 var_68          = qword ptr -68h
.text:0000000000004910 var_60          = qword ptr -60h
.text:0000000000004910 wc              = dword ptr -4Ch
.text:0000000000004910 var_48          = qword ptr -48h
.text:0000000000004910 var_40          = qword ptr -40h
.text:0000000000004910 arg_0           = qword ptr  8
.text:0000000000004910 arg_8           = qword ptr  10h
.text:0000000000004910 arg_10          = qword ptr  18h
.text:0000000000004910
.text:0000000000004910 ; __unwind {
.text:0000000000004910                 push    r15
.text:0000000000004912                 push    r14
.text:0000000000004914                 mov     r15d, r8d
.text:0000000000004917                 push    r13
.text:0000000000004919                 push    r12
.text:000000000000491B                 mov     r14, rdi
.text:000000000000491E                 push    rbp
.text:000000000000491F                 push    rbx
.text:0000000000004920                 mov     ebx, r9d
.text:0000000000004923                 mov     r13, rsi
.text:0000000000004926                 mov     rbp, rcx
.text:0000000000004929                 and     ebx, 2
.text:000000000000492C                 sub     rsp, 0B8h
.text:0000000000004933                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000493B                 mov     [rsp+0E8h+s], rdx
.text:0000000000004940                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000004945                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000494A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000494F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000004957                 mov     [rsp+0E8h+var_80], rax
.text:000000000000495C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000004964                 mov     [rsp+0E8h+var_88], rax
.text:0000000000004969                 mov     rax, fs:28h
.text:0000000000004972                 mov     [rsp+0E8h+var_40], rax
.text:000000000000497A                 xor     eax, eax
.text:000000000000497C                 call    ___ctype_get_mb_cur_max
.text:0000000000004981                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000004985                 mov     [rsp+0E8h+var_90], rax
.text:000000000000498A                 ja      def_49A1        ; jumptable 00000000000121F1 default case
.text:0000000000004990                 lea     rcx, jpt_49A1
.text:0000000000004997                 mov     edx, r15d
.text:000000000000499A                 movsxd  rax, ds:(jpt_49A1 - 162A0h)[rcx+rdx*4]
.text:000000000000499E                 add     rax, rcx
.text:00000000000049A1                 jmp     rax             ; switch jump
.text:00000000000049A3 ; ---------------------------------------------------------------------------
.text:00000000000049A3
.text:00000000000049A3 loc_49A3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000049A3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000049A3                                         ; DATA XREF: ...
.text:00000000000049A3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000049A8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000049AD                 xor     r12d, r12d
.text:00000000000049B0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000049B9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000049BE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000049C3
.text:00000000000049C3 loc_49C3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000049C3                 lea     rax, aSyntaxErrorUne_0+1Bh ; "'"
.text:00000000000049CA                 mov     [rsp+0E8h+n], 1
.text:00000000000049D3                 xor     r15d, r15d
.text:00000000000049D6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000049DE                 mov     [rsp+0E8h+s2], rax
.text:00000000000049E3
.text:00000000000049E3 loc_49E3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000049E3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000049E3                 xor     r11d, r11d
.text:00000000000049E6                 mov     rax, rbp
.text:00000000000049E9                 mov     r8d, r12d
.text:00000000000049EC                 mov     rbp, r11
.text:00000000000049EF                 mov     r11, rax
.text:00000000000049F2                 nop     word ptr [rax+rax+00h]
.text:00000000000049F8
.text:00000000000049F8 loc_49F8:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:00000000000049F8                                         ; quotearg_buffer_restyled+42C↓j
.text:00000000000049F8                 cmp     r11, rbp
.text:00000000000049FB                 setnz   r12b
.text:00000000000049FF                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A03                 jnz     short loc_4A12
.text:0000000000004A05                 mov     rax, [rsp+0E8h+s]
.text:0000000000004A0A                 cmp     byte ptr [rax+rbp], 0
.text:0000000000004A0E                 setnz   r12b
.text:0000000000004A12
.text:0000000000004A12 loc_4A12:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000004A12                 test    r12b, r12b
.text:0000000000004A15                 jz      loc_5070
.text:0000000000004A1B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004A20                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000004A25                 lea     r9, [rdi+rbp]
.text:0000000000004A29                 setnz   al
.text:0000000000004A2C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004A30                 mov     r10d, eax
.text:0000000000004A33                 jz      loc_4AE0
.text:0000000000004A39                 mov     rax, [rsp+0E8h+n]
.text:0000000000004A3E                 test    rax, rax
.text:0000000000004A41                 jz      loc_4E70
.text:0000000000004A47                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004A4B                 lea     rbx, [rbp+rax+0]
.text:0000000000004A50                 jnz     short loc_4A80
.text:0000000000004A52                 cmp     rax, 1
.text:0000000000004A56                 jbe     short loc_4A80
.text:0000000000004A58                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004A5D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000004A62                 mov     [rsp+0E8h+ps], r9
.text:0000000000004A67                 call    _strlen
.text:0000000000004A6C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004A72                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004A78                 mov     r11, rax
.text:0000000000004A7B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000004A80
.text:0000000000004A80 loc_4A80:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000004A80                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000004A80                 cmp     rbx, r11
.text:0000000000004A83                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004A88                 ja      loc_5040
.text:0000000000004A8E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000004A93                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000004A98                 mov     rdi, r9         ; s1
.text:0000000000004A9B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000004AA0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000004AA5                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000004AAA                 call    _memcmp
.text:0000000000004AAF                 test    eax, eax
.text:0000000000004AB1                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000004AB6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000004ABC                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000004AC1                 jnz     loc_5040
.text:0000000000004AC7                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004ACC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004AD2                 jnz     loc_5A55
.text:0000000000004AD8                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004AE0
.text:0000000000004AE0 loc_4AE0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000004AE0                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000004AE0                 movzx   ebx, byte ptr [r9]
.text:0000000000004AE4                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004AE7                 ja      def_4AFE        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000004AED                 lea     rcx, jpt_4AFE
.text:0000000000004AF4                 movzx   edx, bl
.text:0000000000004AF7                 movsxd  rax, ds:(jpt_4AFE - 162CCh)[rcx+rdx*4]
.text:0000000000004AFB                 add     rax, rcx
.text:0000000000004AFE                 jmp     rax             ; switch jump
.text:0000000000004B00 ; ---------------------------------------------------------------------------
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004B00                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004B00                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000004B03
.text:0000000000004B03 loc_4B03:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004B03                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004B03                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000004B07                 setnz   al
.text:0000000000004B0A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B0E                 jnz     short loc_4B1C
.text:0000000000004B10                 mov     rax, [rsp+0E8h+s]
.text:0000000000004B15                 cmp     byte ptr [rax+1], 0
.text:0000000000004B19                 setnz   al
.text:0000000000004B1C
.text:0000000000004B1C loc_4B1C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:0000000000004B1C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004B21                 setz    dl
.text:0000000000004B24                 test    al, al
.text:0000000000004B26                 jz      loc_4D78
.text:0000000000004B2C
.text:0000000000004B2C loc_4B2C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:0000000000004B2C                 xor     r12d, r12d
.text:0000000000004B2F                 xor     eax, eax
.text:0000000000004B31                 nop     dword ptr [rax+00000000h]
.text:0000000000004B38
.text:0000000000004B38 loc_4B38:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000004B38                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000004B38                 cmp     [rsp+0E8h+var_DB], 1
.text:0000000000004B3D                 jnz     loc_4C52
.text:0000000000004B43                 test    dl, dl
.text:0000000000004B45                 jnz     loc_4C52
.text:0000000000004B4B
.text:0000000000004B4B loc_4B4B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:0000000000004B4B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000004B50                 test    rsi, rsi
.text:0000000000004B53                 jz      short loc_4B69
.text:0000000000004B55                 mov     edx, ebx
.text:0000000000004B57                 shr     dl, 5
.text:0000000000004B5A                 movzx   edx, dl
.text:0000000000004B5D                 mov     edx, [rsi+rdx*4]
.text:0000000000004B60                 bt      edx, ebx
.text:0000000000004B63                 jb      loc_4CB3
.text:0000000000004B69
.text:0000000000004B69 loc_4B69:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000004B69                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000004B69                 test    r10b, r10b
.text:0000000000004B6C                 jnz     loc_4CB3
.text:0000000000004B72                 xor     eax, 1
.text:0000000000004B75                 add     rbp, 1
.text:0000000000004B79                 and     eax, r8d
.text:0000000000004B7C
.text:0000000000004B7C loc_4B7C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:0000000000004B7C                                         ; quotearg_buffer_restyled+AE8↓j
.text:0000000000004B7C                 test    al, al
.text:0000000000004B7E                 jz      short loc_4BA0
.text:0000000000004B80                 cmp     r13, r15
.text:0000000000004B83                 jbe     short loc_4B8A
.text:0000000000004B85                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004B8A
.text:0000000000004B8A loc_4B8A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:0000000000004B8A                 lea     rax, [r15+1]
.text:0000000000004B8E                 cmp     r13, rax
.text:0000000000004B91                 jbe     short loc_4B99
.text:0000000000004B93                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000004B99
.text:0000000000004B99 loc_4B99:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000004B99                 add     r15, 2
.text:0000000000004B9D                 xor     r8d, r8d
.text:0000000000004BA0
.text:0000000000004BA0 loc_4BA0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000004BA0                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000004BA0                 cmp     r15, r13
.text:0000000000004BA3                 jnb     short loc_4BA9
.text:0000000000004BA5                 mov     [r14+r15], bl
.text:0000000000004BA9
.text:0000000000004BA9 loc_4BA9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000004BA9                 movzx   edi, [rsp+0E8h+var_DA]
.text:0000000000004BAE                 add     r15, 1
.text:0000000000004BB2                 mov     eax, 0
.text:0000000000004BB7                 test    r12b, r12b
.text:0000000000004BBA                 cmovz   edi, eax
.text:0000000000004BBD                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000004BC2                 jmp     loc_49F8
.text:0000000000004BC2 ; ---------------------------------------------------------------------------
.text:0000000000004BC7                 align 10h
.text:0000000000004BD0
.text:0000000000004BD0 loc_4BD0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004BD0                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004BD0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000004BD3
.text:0000000000004BD3 loc_4BD3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004BD3                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004BD3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000004BD7                 cmp     eax, 2
.text:0000000000004BDA                 jz      loc_5198
.text:0000000000004BE0                 cmp     eax, 5
.text:0000000000004BE3                 jz      loc_5158
.text:0000000000004BE9                 cmp     eax, 2
.text:0000000000004BEC                 mov     ebx, 3Fh ; '?'
.text:0000000000004BF1                 setz    dl
.text:0000000000004BF4                 xor     r12d, r12d
.text:0000000000004BF7                 xor     eax, eax
.text:0000000000004BF9                 jmp     loc_4B38
.text:0000000000004BF9 ; ---------------------------------------------------------------------------
.text:0000000000004BFE                 align 20h
.text:0000000000004C00
.text:0000000000004C00 loc_4C00:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000004C00                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004C00                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000004C03
.text:0000000000004C03 loc_4C03:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004C03                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004C03                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000004C08                 jz      loc_5110
.text:0000000000004C0E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000004C13                 xor     edx, edx
.text:0000000000004C15                 xor     eax, eax
.text:0000000000004C17                 mov     ebx, 27h ; '''
.text:0000000000004C1C                 jmp     loc_4B38
.text:0000000000004C1C ; ---------------------------------------------------------------------------
.text:0000000000004C21                 align 8
.text:0000000000004C28
.text:0000000000004C28 loc_4C28:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004C28                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004C28                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:0000000000004C2D                 mov     ebx, 74h ; 't'
.text:0000000000004C32
.text:0000000000004C32 loc_4C32:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000004C32                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000004C32                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004C37                 setz    al
.text:0000000000004C3A                 and     al, [rsp+0E8h+var_D9]
.text:0000000000004C3E                 jnz     loc_4D8E
.text:0000000000004C44
.text:0000000000004C44 loc_4C44:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000004C44                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000004C44                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004C49                 jnz     short loc_4CB0
.text:0000000000004C4B
.text:0000000000004C4B loc_4C4B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:0000000000004C4B                 mov     ebx, edx
.text:0000000000004C4D                 xor     r12d, r12d
.text:0000000000004C50                 xor     eax, eax
.text:0000000000004C52
.text:0000000000004C52 loc_4C52:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000004C52                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000004C52                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004C57                 jnz     loc_4B4B
.text:0000000000004C5D                 jmp     loc_4B69
.text:0000000000004C5D ; ---------------------------------------------------------------------------
.text:0000000000004C62                 align 8
.text:0000000000004C68
.text:0000000000004C68 loc_4C68:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004C68                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004C68                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:0000000000004C6D                 mov     ebx, 62h ; 'b'
.text:0000000000004C72                 jmp     short loc_4C44
.text:0000000000004C72 ; ---------------------------------------------------------------------------
.text:0000000000004C74                 align 8
.text:0000000000004C78
.text:0000000000004C78 loc_4C78:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004C78                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004C78                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:0000000000004C7D                 jz      loc_5050
.text:0000000000004C83                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004C88                 jz      loc_4EA0
.text:0000000000004C8E
.text:0000000000004C8E loc_4C8E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:0000000000004C8E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004C93                 jz      loc_4EA0
.text:0000000000004C99                 cmp     [rsp+0E8h+n], 0
.text:0000000000004C9F                 jnz     loc_505B
.text:0000000000004CA5                 mov     ebx, 5Ch ; '\'
.text:0000000000004CAA                 nop     word ptr [rax+rax+00h]
.text:0000000000004CB0
.text:0000000000004CB0 loc_4CB0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000004CB0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000004CB0                 xor     r12d, r12d
.text:0000000000004CB3
.text:0000000000004CB3 loc_4CB3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000004CB3                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000004CB3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004CB8                 setz    dl
.text:0000000000004CBB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004CC0                 mov     eax, edx
.text:0000000000004CC2                 jnz     loc_5518
.text:0000000000004CC8                 mov     eax, r8d
.text:0000000000004CCB                 xor     eax, 1
.text:0000000000004CCE                 and     al, dl
.text:0000000000004CD0                 jz      short loc_4D01
.text:0000000000004CD2                 cmp     r13, r15
.text:0000000000004CD5                 jbe     short loc_4CDC
.text:0000000000004CD7                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004CDC
.text:0000000000004CDC loc_4CDC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:0000000000004CDC                 lea     rdx, [r15+1]
.text:0000000000004CE0                 cmp     r13, rdx
.text:0000000000004CE3                 jbe     short loc_4CEB
.text:0000000000004CE5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004CEB
.text:0000000000004CEB loc_4CEB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:0000000000004CEB                 lea     rdx, [r15+2]
.text:0000000000004CEF                 cmp     r13, rdx
.text:0000000000004CF2                 jbe     short loc_4CFA
.text:0000000000004CF4                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000004CFA
.text:0000000000004CFA loc_4CFA:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:0000000000004CFA                 add     r15, 3
.text:0000000000004CFE                 mov     r8d, eax
.text:0000000000004D01
.text:0000000000004D01 loc_4D01:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000004D01                 cmp     r13, r15
.text:0000000000004D04                 jbe     short loc_4D0B
.text:0000000000004D06                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000004D0B
.text:0000000000004D0B loc_4D0B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:0000000000004D0B                 add     r15, 1
.text:0000000000004D0F                 add     rbp, 1
.text:0000000000004D13                 jmp     loc_4BA0
.text:0000000000004D13 ; ---------------------------------------------------------------------------
.text:0000000000004D18                 align 20h
.text:0000000000004D20
.text:0000000000004D20 loc_4D20:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004D20                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004D20                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000004D25                 jnz     loc_4EF3
.text:0000000000004D2B                 xor     edx, edx
.text:0000000000004D2D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000004D32                 jz      loc_4C4B
.text:0000000000004D38                 add     rbp, 1
.text:0000000000004D3C                 jmp     loc_49F8
.text:0000000000004D3C ; ---------------------------------------------------------------------------
.text:0000000000004D41                 align 8
.text:0000000000004D48
.text:0000000000004D48 loc_4D48:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004D48                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004D48                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:0000000000004D4D                 setz    dl
.text:0000000000004D50                 xor     eax, eax
.text:0000000000004D52                 jmp     loc_4B38
.text:0000000000004D52 ; ---------------------------------------------------------------------------
.text:0000000000004D57                 align 20h
.text:0000000000004D60
.text:0000000000004D60 loc_4D60:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004D60                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004D60                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000004D65                 mov     ebx, 61h ; 'a'
.text:0000000000004D6A                 jmp     loc_4C44
.text:0000000000004D6A ; ---------------------------------------------------------------------------
.text:0000000000004D6F                 align 10h
.text:0000000000004D70
.text:0000000000004D70 loc_4D70:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004D70                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004D70                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000004D75                 setz    dl
.text:0000000000004D78
.text:0000000000004D78 loc_4D78:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000004D78                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000004D78                 test    rbp, rbp
.text:0000000000004D7B                 jnz     loc_4B2C
.text:0000000000004D81
.text:0000000000004D81 loc_4D81:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000004D81                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000004D81                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000004D86                 and     al, dl
.text:0000000000004D88                 jz      loc_4B38
.text:0000000000004D8E
.text:0000000000004D8E loc_4D8E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:0000000000004D8E                 mov     rbp, r11
.text:0000000000004D91                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000004D99                 jmp     loc_5499
.text:0000000000004D99 ; ---------------------------------------------------------------------------
.text:0000000000004D9E                 align 20h
.text:0000000000004DA0
.text:0000000000004DA0 loc_4DA0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DA0                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004DA0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004DA5                 setz    dl
.text:0000000000004DA8                 xor     r12d, r12d
.text:0000000000004DAB                 jmp     short loc_4D81
.text:0000000000004DAB ; ---------------------------------------------------------------------------
.text:0000000000004DAD                 align 10h
.text:0000000000004DB0
.text:0000000000004DB0 loc_4DB0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DB0                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004DB0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000004DB5                 mov     ebx, 20h ; ' '
.text:0000000000004DBA                 setz    dl
.text:0000000000004DBD                 jmp     short loc_4D81
.text:0000000000004DBD ; ---------------------------------------------------------------------------
.text:0000000000004DBF                 align 20h
.text:0000000000004DC0
.text:0000000000004DC0 loc_4DC0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DC0                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004DC0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000004DC5                 mov     ebx, 72h ; 'r'
.text:0000000000004DCA                 jmp     loc_4C32
.text:0000000000004DCA ; ---------------------------------------------------------------------------
.text:0000000000004DCF                 align 10h
.text:0000000000004DD0
.text:0000000000004DD0 loc_4DD0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DD0                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004DD0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000004DD5                 mov     ebx, 66h ; 'f'
.text:0000000000004DDA                 jmp     loc_4C44
.text:0000000000004DDA ; ---------------------------------------------------------------------------
.text:0000000000004DDF                 align 20h
.text:0000000000004DE0
.text:0000000000004DE0 loc_4DE0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DE0                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004DE0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000004DE5                 mov     ebx, 76h ; 'v'
.text:0000000000004DEA                 jmp     loc_4C44
.text:0000000000004DEA ; ---------------------------------------------------------------------------
.text:0000000000004DEF                 align 10h
.text:0000000000004DF0
.text:0000000000004DF0 loc_4DF0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000004DF0                                         ; DATA XREF: .rodata:jpt_4AFE↓o
.text:0000000000004DF0                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000004DF5                 mov     ebx, 6Eh ; 'n'
.text:0000000000004DFA                 jmp     loc_4C32
.text:0000000000004DFA ; ---------------------------------------------------------------------------
.text:0000000000004DFF                 align 20h
.text:0000000000004E00
.text:0000000000004E00 def_4E8A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000004E00                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000004E00                                         ; DATA XREF: ...
.text:0000000000004E00                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004E03                 nop     dword ptr [rax+rax+00h]
.text:0000000000004E08
.text:0000000000004E08 def_4AFE:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000004E08                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000004E08                                         ; DATA XREF: ...
.text:0000000000004E08                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:0000000000004E0E                 jnz     loc_51B8
.text:0000000000004E14                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000004E19                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:0000000000004E1E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000004E23                 call    ___ctype_b_loc
.text:0000000000004E28                 mov     rcx, [rax]
.text:0000000000004E2B                 movzx   edx, bl
.text:0000000000004E2E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000004E34                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000004E3A                 mov     r11, [rsp+0E8h+var_B0]
.text:0000000000004E3F                 mov     edi, 1
.text:0000000000004E44                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000004E48                 and     ax, 4000h
.text:0000000000004E4C                 setnz   r12b
.text:0000000000004E50                 setz    al
.text:0000000000004E53                 and     al, [rsp+0E8h+var_DB]
.text:0000000000004E57
.text:0000000000004E57 loc_4E57:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000004E57                 test    al, al
.text:0000000000004E59                 jnz     loc_57F1
.text:0000000000004E5F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004E64                 setz    dl
.text:0000000000004E67                 jmp     loc_4B38
.text:0000000000004E67 ; ---------------------------------------------------------------------------
.text:0000000000004E6C                 align 10h
.text:0000000000004E70
.text:0000000000004E70 loc_4E70:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000004E70                 movzx   ebx, byte ptr [r9]
.text:0000000000004E74                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000004E77                 ja      short def_4E8A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000004E79                 lea     rcx, jpt_4E8A
.text:0000000000004E80                 movzx   edx, bl
.text:0000000000004E83                 movsxd  rax, ds:(jpt_4E8A - 164C8h)[rcx+rdx*4]
.text:0000000000004E87                 add     rax, rcx
.text:0000000000004E8A                 jmp     rax             ; switch jump
.text:0000000000004E8A ; ---------------------------------------------------------------------------
.text:0000000000004E8C                 align 10h
.text:0000000000004E90
.text:0000000000004E90 loc_4E90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004E90                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004E90                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000004E93                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000004E98                 jnz     loc_4C8E
.text:0000000000004E9E                 xchg    ax, ax
.text:0000000000004EA0
.text:0000000000004EA0 loc_4EA0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000004EA0                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000004EA0                 mov     edx, 5Ch ; '\'
.text:0000000000004EA5                 mov     ebx, 5Ch ; '\'
.text:0000000000004EAA                 jmp     loc_4C44
.text:0000000000004EAA ; ---------------------------------------------------------------------------
.text:0000000000004EAF                 align 10h
.text:0000000000004EB0
.text:0000000000004EB0 loc_4EB0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004EB0                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004EB0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000004EB5                 xor     r10d, r10d
.text:0000000000004EB8                 mov     ebx, 66h ; 'f'
.text:0000000000004EBD                 jmp     loc_4C44
.text:0000000000004EBD ; ---------------------------------------------------------------------------
.text:0000000000004EC2                 align 8
.text:0000000000004EC8
.text:0000000000004EC8 loc_4EC8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004EC8                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004EC8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:0000000000004ECD                 xor     r10d, r10d
.text:0000000000004ED0                 mov     ebx, 6Eh ; 'n'
.text:0000000000004ED5                 jmp     loc_4C32
.text:0000000000004ED5 ; ---------------------------------------------------------------------------
.text:0000000000004EDA                 align 20h
.text:0000000000004EE0
.text:0000000000004EE0 loc_4EE0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004EE0                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004EE0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000004EE5                 jmp     loc_4CB0
.text:0000000000004EE5 ; ---------------------------------------------------------------------------
.text:0000000000004EEA                 align 10h
.text:0000000000004EF0
.text:0000000000004EF0 loc_4EF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004EF0                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004EF0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000004EF3
.text:0000000000004EF3 loc_4EF3:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000004EF3                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004EF8                 setz    dl
.text:0000000000004EFB                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000004F00                 jnz     loc_5A9A
.text:0000000000004F06                 mov     eax, r8d
.text:0000000000004F09                 mov     rcx, r15
.text:0000000000004F0C                 xor     eax, 1
.text:0000000000004F0F                 and     al, dl
.text:0000000000004F11                 jz      short loc_4F40
.text:0000000000004F13                 cmp     r13, r15
.text:0000000000004F16                 jbe     short loc_4F1D
.text:0000000000004F18                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000004F1D
.text:0000000000004F1D loc_4F1D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:0000000000004F1D                 lea     rcx, [r15+1]
.text:0000000000004F21                 cmp     r13, rcx
.text:0000000000004F24                 jbe     short loc_4F2C
.text:0000000000004F26                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000004F2C
.text:0000000000004F2C loc_4F2C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:0000000000004F2C                 lea     rcx, [r15+2]
.text:0000000000004F30                 cmp     r13, rcx
.text:0000000000004F33                 ja      loc_5569
.text:0000000000004F39
.text:0000000000004F39 loc_4F39:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000004F39                 lea     rcx, [r15+3]
.text:0000000000004F3D                 mov     r8d, eax
.text:0000000000004F40
.text:0000000000004F40 loc_4F40:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000004F40                 cmp     r13, rcx
.text:0000000000004F43                 jbe     short loc_4F4A
.text:0000000000004F45                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:0000000000004F4A
.text:0000000000004F4A loc_4F4A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:0000000000004F4A                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000004F4F                 lea     r15, [rcx+1]
.text:0000000000004F53                 jz      loc_5559
.text:0000000000004F59                 lea     rax, [rbp+1]
.text:0000000000004F5D                 cmp     rax, r11
.text:0000000000004F60                 jnb     short loc_4F7B
.text:0000000000004F62                 mov     rax, [rsp+0E8h+s]
.text:0000000000004F67                 movzx   eax, byte ptr [rax+rbp+1]
.text:0000000000004F6C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000004F70                 sub     eax, 30h ; '0'
.text:0000000000004F73                 cmp     al, 9
.text:0000000000004F75                 jbe     loc_57A9
.text:0000000000004F7B
.text:0000000000004F7B loc_4F7B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:0000000000004F7B                 mov     eax, r12d
.text:0000000000004F7E                 mov     ebx, 30h ; '0'
.text:0000000000004F83                 xor     r12d, r12d
.text:0000000000004F86                 jmp     loc_4B38
.text:0000000000004F86 ; ---------------------------------------------------------------------------
.text:0000000000004F8B                 align 10h
.text:0000000000004F90
.text:0000000000004F90 loc_4F90:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004F90                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004F90                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000004F95                 mov     r12d, r10d
.text:0000000000004F98                 setz    dl
.text:0000000000004F9B                 xor     r10d, r10d
.text:0000000000004F9E                 xor     eax, eax
.text:0000000000004FA0                 jmp     loc_4B38
.text:0000000000004FA0 ; ---------------------------------------------------------------------------
.text:0000000000004FA5                 align 8
.text:0000000000004FA8
.text:0000000000004FA8 loc_4FA8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004FA8                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004FA8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:0000000000004FAD                 setz    dl
.text:0000000000004FB0                 xor     r10d, r10d
.text:0000000000004FB3                 jmp     loc_4D78
.text:0000000000004FB3 ; ---------------------------------------------------------------------------
.text:0000000000004FB8                 align 20h
.text:0000000000004FC0
.text:0000000000004FC0 loc_4FC0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004FC0                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004FC0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000004FC5                 setz    dl
.text:0000000000004FC8                 xor     r10d, r10d
.text:0000000000004FCB                 xor     r12d, r12d
.text:0000000000004FCE                 jmp     loc_4D81
.text:0000000000004FCE ; ---------------------------------------------------------------------------
.text:0000000000004FD3                 align 8
.text:0000000000004FD8
.text:0000000000004FD8 loc_4FD8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004FD8                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004FD8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:0000000000004FDD                 mov     r12d, r10d
.text:0000000000004FE0                 mov     ebx, 20h ; ' '
.text:0000000000004FE5                 setz    dl
.text:0000000000004FE8                 xor     r10d, r10d
.text:0000000000004FEB                 jmp     loc_4D81
.text:0000000000004FF0 ; ---------------------------------------------------------------------------
.text:0000000000004FF0
.text:0000000000004FF0 loc_4FF0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000004FF0                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000004FF0                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000004FF5                 xor     r10d, r10d
.text:0000000000004FF8                 mov     ebx, 72h ; 'r'
.text:0000000000004FFD                 jmp     loc_4C32
.text:0000000000004FFD ; ---------------------------------------------------------------------------
.text:0000000000005002                 align 8
.text:0000000000005008
.text:0000000000005008 loc_5008:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005008                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000005008                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:000000000000500D                 jmp     loc_4CB0
.text:000000000000500D ; ---------------------------------------------------------------------------
.text:0000000000005012                 align 8
.text:0000000000005018
.text:0000000000005018 loc_5018:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005018                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000005018                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:000000000000501D                 xor     r10d, r10d
.text:0000000000005020                 mov     ebx, 74h ; 't'
.text:0000000000005025                 jmp     loc_4C32
.text:0000000000005025 ; ---------------------------------------------------------------------------
.text:000000000000502A                 align 10h
.text:0000000000005030
.text:0000000000005030 loc_5030:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000005030                                         ; DATA XREF: .rodata:jpt_4E8A↓o
.text:0000000000005030                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000005035                 jmp     loc_4CB0
.text:0000000000005035 ; ---------------------------------------------------------------------------
.text:000000000000503A                 align 20h
.text:0000000000005040
.text:0000000000005040 loc_5040:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000005040                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000005040                 xor     r10d, r10d
.text:0000000000005043                 jmp     loc_4AE0
.text:0000000000005043 ; ---------------------------------------------------------------------------
.text:0000000000005048                 align 10h
.text:0000000000005050
.text:0000000000005050 loc_5050:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000005050                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005055                 jnz     loc_59C0
.text:000000000000505B
.text:000000000000505B loc_505B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:000000000000505B                 add     rbp, 1
.text:000000000000505F                 mov     eax, r8d
.text:0000000000005062                 xor     r12d, r12d
.text:0000000000005065                 mov     ebx, 5Ch ; '\'
.text:000000000000506A                 jmp     loc_4B7C
.text:000000000000506A ; ---------------------------------------------------------------------------
.text:000000000000506F                 align 10h
.text:0000000000005070
.text:0000000000005070 loc_5070:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000005070                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005075                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000507A                 mov     r12d, r8d
.text:000000000000507D                 mov     rbp, r11
.text:0000000000005080                 setz    dl
.text:0000000000005083                 mov     eax, ebx
.text:0000000000005085                 test    r15, r15
.text:0000000000005088                 setz    cl
.text:000000000000508B                 and     eax, edx
.text:000000000000508D                 and     al, cl
.text:000000000000508F                 jnz     loc_5AF6
.text:0000000000005095                 mov     eax, ebx
.text:0000000000005097                 xor     eax, 1
.text:000000000000509A                 and     dl, al
.text:000000000000509C                 jz      loc_5A0C
.text:00000000000050A2                 cmp     [rsp+0E8h+var_6C], 0
.text:00000000000050A7                 jz      loc_5A0A
.text:00000000000050AD                 cmp     [rsp+0E8h+var_DA], 0
.text:00000000000050B2                 jnz     loc_5AAD
.text:00000000000050B8                 test    r13, r13
.text:00000000000050BB                 setz    al
.text:00000000000050BE                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000050C4                 setnz   dl
.text:00000000000050C7                 and     al, dl
.text:00000000000050C9                 jz      loc_5AEC
.text:00000000000050CF                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000050D4
.text:00000000000050D4 loc_50D4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:00000000000050D4                 lea     rbx, aSyntaxErrorUne_0+1Bh ; "'"
.text:00000000000050DB                 mov     byte ptr [r14], 27h ; '''
.text:00000000000050DF                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000050E7                 mov     r15d, 1
.text:00000000000050ED                 mov     [rsp+0E8h+n], 1
.text:00000000000050F6                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000050FB                 mov     [rsp+0E8h+s2], rbx
.text:0000000000005100                 mov     [rsp+0E8h+var_6C], al
.text:0000000000005104                 jmp     loc_49E3
.text:0000000000005104 ; ---------------------------------------------------------------------------
.text:0000000000005109                 align 10h
.text:0000000000005110
.text:0000000000005110 loc_5110:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000005110                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005115                 jnz     loc_59C0
.text:000000000000511B                 test    r13, r13
.text:000000000000511E                 jz      loc_5520
.text:0000000000005124                 xor     edx, edx
.text:0000000000005126                 cmp     [rsp+0E8h+var_98], 0
.text:000000000000512C                 jnz     loc_5520
.text:0000000000005132
.text:0000000000005132 loc_5132:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000005132                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000005132                 mov     [rsp+0E8h+var_98], r13
.text:0000000000005137                 add     r15, 3
.text:000000000000513B                 xor     eax, eax
.text:000000000000513D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000005142                 xor     r8d, r8d
.text:0000000000005145                 mov     r13, rdx
.text:0000000000005148                 mov     ebx, 27h ; '''
.text:000000000000514D                 jmp     loc_4B69
.text:000000000000514D ; ---------------------------------------------------------------------------
.text:0000000000005152                 align 8
.text:0000000000005158
.text:0000000000005158 loc_5158:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000005158                 test    byte ptr [rsp+0E8h+var_70], 4
.text:000000000000515D                 jz      short loc_5180
.text:000000000000515F                 lea     rcx, [rbp+2]
.text:0000000000005163                 cmp     rcx, r11
.text:0000000000005166                 jnb     short loc_5180
.text:0000000000005168                 mov     rax, [rsp+0E8h+s]
.text:000000000000516D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000005172                 jz      loc_5902
.text:0000000000005178                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000005180
.text:0000000000005180 loc_5180:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000005180                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000005180                 xor     edx, edx
.text:0000000000005182                 xor     r12d, r12d
.text:0000000000005185                 xor     eax, eax
.text:0000000000005187                 mov     ebx, 3Fh ; '?'
.text:000000000000518C                 jmp     loc_4B38
.text:000000000000518C ; ---------------------------------------------------------------------------
.text:0000000000005191                 align 8
.text:0000000000005198
.text:0000000000005198 loc_5198:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000005198                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000519D                 jnz     loc_59C0
.text:00000000000051A3                 xor     r12d, r12d
.text:00000000000051A6                 xor     eax, eax
.text:00000000000051A8                 mov     ebx, 3Fh ; '?'
.text:00000000000051AD                 jmp     loc_4B69
.text:00000000000051AD ; ---------------------------------------------------------------------------
.text:00000000000051B2                 align 8
.text:00000000000051B8
.text:00000000000051B8 loc_51B8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:00000000000051B8                 lea     rax, [rsp+0E8h+var_48]
.text:00000000000051C0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000051C4                 mov     [rsp+0E8h+var_48], 0
.text:00000000000051D0                 mov     [rsp+0E8h+ps], rax
.text:00000000000051D5                 jnz     short loc_5204
.text:00000000000051D7                 mov     rdi, [rsp+0E8h+s] ; s
.text:00000000000051DC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:00000000000051E1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:00000000000051E6                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000051EB                 call    _strlen
.text:00000000000051F0                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:00000000000051F6                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000051FC                 mov     r11, rax
.text:00000000000051FF                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000005204
.text:0000000000005204 loc_5204:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000005204                 lea     rax, [rsp+0E8h+wc]
.text:000000000000520C                 xor     ecx, ecx
.text:000000000000520E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000005212                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000005217                 mov     rbx, rcx
.text:000000000000521A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000005222                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000005227                 mov     [rsp+0E8h+var_69], r10b
.text:000000000000522C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000005234                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000005239                 mov     [rsp+0E8h+var_78], r13
.text:000000000000523E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000005243
.text:0000000000005243 loc_5243:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000005243                 mov     rax, [rsp+0E8h+s]
.text:0000000000005248                 lea     r14, [rbp+rbx+0]
.text:000000000000524D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000005252                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000005257                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000525C                 lea     r13, [rax+r14]
.text:0000000000005260                 sub     rdx, r14
.text:0000000000005263                 mov     rsi, r13
.text:0000000000005266                 call    rpl_mbrtowc
.text:000000000000526B                 test    rax, rax
.text:000000000000526E                 mov     r15, rax
.text:0000000000005271                 jz      short loc_52C1
.text:0000000000005273                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000005277                 jz      loc_5895
.text:000000000000527D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000005281                 jz      loc_5821
.text:0000000000005287                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000528C                 setz    al
.text:000000000000528F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000005293                 jnz     loc_5430
.text:0000000000005299
.text:0000000000005299 loc_5299:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000005299                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000005299                 mov     edi, [rsp+0E8h+wc] ; wc
.text:00000000000052A0                 call    _iswprint
.text:00000000000052A5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:00000000000052AA                 test    eax, eax
.text:00000000000052AC                 mov     eax, 0
.text:00000000000052B1                 cmovz   r12d, eax
.text:00000000000052B5                 add     rbx, r15
.text:00000000000052B8                 call    _mbsinit
.text:00000000000052BD                 test    eax, eax
.text:00000000000052BF                 jz      short loc_5243
.text:00000000000052C1
.text:00000000000052C1 loc_52C1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:00000000000052C1                 mov     edx, r12d
.text:00000000000052C4                 mov     rdi, rbx
.text:00000000000052C7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000052CD                 xor     edx, 1
.text:00000000000052D0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000052D5                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000052DB                 and     dl, [rsp+0E8h+var_DB]
.text:00000000000052DF                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000052E7                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000052EC                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000052F1                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000052F6
.text:00000000000052F6 loc_52F6:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:00000000000052F6                                         ; quotearg_buffer_restyled+FB8↓j
.text:00000000000052F6                 cmp     rdi, 1
.text:00000000000052FA                 jbe     loc_58FB
.text:0000000000005300
.text:0000000000005300 loc_5300:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000005300                 mov     rcx, rdi
.text:0000000000005303                 xor     esi, esi
.text:0000000000005305                 movzx   r9d, [rsp+0E8h+var_D9]
.text:000000000000530B                 add     rcx, rbp
.text:000000000000530E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000005313                 jmp     loc_53CE
.text:0000000000005313 ; ---------------------------------------------------------------------------
.text:0000000000005318                 align 20h
.text:0000000000005320
.text:0000000000005320 loc_5320:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000005320                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005325                 setz    al
.text:0000000000005328                 test    r9b, r9b
.text:000000000000532B                 jnz     loc_57E0
.text:0000000000005331                 mov     esi, r8d
.text:0000000000005334                 xor     esi, 1
.text:0000000000005337                 and     al, sil
.text:000000000000533A                 jz      short loc_536B
.text:000000000000533C                 cmp     r13, r15
.text:000000000000533F                 jbe     short loc_5346
.text:0000000000005341                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005346
.text:0000000000005346 loc_5346:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000005346                 lea     rsi, [r15+1]
.text:000000000000534A                 cmp     r13, rsi
.text:000000000000534D                 jbe     short loc_5355
.text:000000000000534F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000005355
.text:0000000000005355 loc_5355:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000005355                 lea     rsi, [r15+2]
.text:0000000000005359                 cmp     r13, rsi
.text:000000000000535C                 jbe     short loc_5364
.text:000000000000535E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000005364
.text:0000000000005364 loc_5364:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000005364                 add     r15, 3
.text:0000000000005368                 mov     r8d, eax
.text:000000000000536B
.text:000000000000536B loc_536B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000536B                 cmp     r13, r15
.text:000000000000536E                 jbe     short loc_5375
.text:0000000000005370                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000005375
.text:0000000000005375 loc_5375:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000005375                 lea     rax, [r15+1]
.text:0000000000005379                 cmp     r13, rax
.text:000000000000537C                 jbe     short loc_538B
.text:000000000000537E                 mov     eax, ebx
.text:0000000000005380                 shr     al, 6
.text:0000000000005383                 add     eax, 30h ; '0'
.text:0000000000005386                 mov     [r14+r15+1], al
.text:000000000000538B
.text:000000000000538B loc_538B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000538B                 lea     rax, [r15+2]
.text:000000000000538F                 cmp     r13, rax
.text:0000000000005392                 jbe     short loc_53A4
.text:0000000000005394                 mov     eax, ebx
.text:0000000000005396                 shr     al, 3
.text:0000000000005399                 and     eax, 7
.text:000000000000539C                 add     eax, 30h ; '0'
.text:000000000000539F                 mov     [r14+r15+2], al
.text:00000000000053A4
.text:00000000000053A4 loc_53A4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:00000000000053A4                 and     ebx, 7
.text:00000000000053A7                 add     rbp, 1
.text:00000000000053AB                 add     r15, 3
.text:00000000000053AF                 add     ebx, 30h ; '0'
.text:00000000000053B2                 cmp     rbp, rcx
.text:00000000000053B5                 jnb     loc_4BA0
.text:00000000000053BB                 mov     esi, edx
.text:00000000000053BD
.text:00000000000053BD loc_53BD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:00000000000053BD                                         ; quotearg_buffer_restyled+EF1↓j
.text:00000000000053BD                 cmp     r13, r15
.text:00000000000053C0                 jbe     short loc_53C6
.text:00000000000053C2                 mov     [r14+r15], bl
.text:00000000000053C6
.text:00000000000053C6 loc_53C6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:00000000000053C6                 movzx   ebx, byte ptr [rdi+rbp]
.text:00000000000053CA                 add     r15, 1
.text:00000000000053CE
.text:00000000000053CE loc_53CE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:00000000000053CE                 test    dl, dl
.text:00000000000053D0                 jnz     loc_5320
.text:00000000000053D6                 mov     eax, esi
.text:00000000000053D8                 xor     eax, 1
.text:00000000000053DB                 and     eax, r8d
.text:00000000000053DE                 test    r10b, r10b
.text:00000000000053E1                 jz      short loc_53F1
.text:00000000000053E3                 cmp     r13, r15
.text:00000000000053E6                 jbe     short loc_53ED
.text:00000000000053E8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000053ED
.text:00000000000053ED loc_53ED:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:00000000000053ED                 add     r15, 1
.text:00000000000053F1
.text:00000000000053F1 loc_53F1:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:00000000000053F1                 add     rbp, 1
.text:00000000000053F5                 cmp     rbp, rcx
.text:00000000000053F8                 jnb     loc_4B7C
.text:00000000000053FE                 test    al, al
.text:0000000000005400                 jz      loc_57FE
.text:0000000000005406                 cmp     r13, r15
.text:0000000000005409                 jbe     short loc_5410
.text:000000000000540B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000005410
.text:0000000000005410 loc_5410:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000005410                 lea     rax, [r15+1]
.text:0000000000005414                 cmp     r13, rax
.text:0000000000005417                 jbe     short loc_541F
.text:0000000000005419                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:000000000000541F
.text:000000000000541F loc_541F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:000000000000541F                 add     r15, 2
.text:0000000000005423                 xor     r10d, r10d
.text:0000000000005426                 xor     r8d, r8d
.text:0000000000005429                 jmp     short loc_53BD
.text:0000000000005429 ; ---------------------------------------------------------------------------
.text:000000000000542B                 align 10h
.text:0000000000005430
.text:0000000000005430 loc_5430:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000005430                 cmp     r15, 1
.text:0000000000005434                 jz      loc_5299
.text:000000000000543A                 mov     rdi, [rsp+0E8h+s]
.text:000000000000543F                 lea     rcx, [rdi+r15]
.text:0000000000005443                 lea     rdx, [rdi+r14+1]
.text:0000000000005448                 lea     r8, [rcx+r14]
.text:000000000000544C                 jmp     short loc_545D
.text:000000000000544C ; ---------------------------------------------------------------------------
.text:000000000000544E                 align 10h
.text:0000000000005450
.text:0000000000005450 loc_5450:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000005450                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000005450                 add     rdx, 1
.text:0000000000005454                 cmp     r8, rdx
.text:0000000000005457                 jz      loc_5299
.text:000000000000545D
.text:000000000000545D loc_545D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:000000000000545D                 movzx   ecx, byte ptr [rdx]
.text:0000000000005460                 sub     ecx, 5Bh ; '['
.text:0000000000005463                 cmp     cl, 21h ; '!'
.text:0000000000005466                 ja      short loc_5450
.text:0000000000005468                 mov     esi, 1
.text:000000000000546D                 shl     rsi, cl
.text:0000000000005470                 mov     rcx, rsi
.text:0000000000005473                 mov     rsi, 20000002Bh
.text:000000000000547D                 test    rcx, rsi
.text:0000000000005480                 jz      short loc_5450
.text:0000000000005482                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000005487                 mov     r13, [rsp+0E8h+var_78]
.text:000000000000548C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000005491                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005499
.text:0000000000005499 loc_5499:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000005499                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000005499                 cmp     [rsp+0E8h+var_DB], 0
.text:000000000000549E                 jz      short loc_54B0
.text:00000000000054A0                 test    al, al
.text:00000000000054A2                 mov     eax, 4
.text:00000000000054A7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:00000000000054AC                 mov     [rsp+0E8h+var_E0], eax
.text:00000000000054B0
.text:00000000000054B0 loc_54B0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:00000000000054B0                                         ; quotearg_buffer_restyled+1205↓j
.text:00000000000054B0                 sub     rsp, 8
.text:00000000000054B4                 mov     rcx, rbp
.text:00000000000054B7                 mov     rsi, r13
.text:00000000000054BA                 push    [rsp+0F0h+var_88]
.text:00000000000054BE                 push    [rsp+0F8h+var_80]
.text:00000000000054C2                 mov     rdi, r14
.text:00000000000054C5                 push    0
.text:00000000000054C7                 mov     r9d, [rsp+108h+var_70]
.text:00000000000054CF                 mov     r8d, [rsp+108h+var_E0]
.text:00000000000054D4                 mov     rdx, [rsp+108h+s]
.text:00000000000054D9                 and     r9d, 0FFFFFFFDh
.text:00000000000054DD                 call    quotearg_buffer_restyled
.text:00000000000054E2                 add     rsp, 20h
.text:00000000000054E6                 mov     r15, rax
.text:00000000000054E9
.text:00000000000054E9 loc_54E9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:00000000000054E9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:00000000000054E9                 mov     rbx, [rsp+0E8h+var_40]
.text:00000000000054F1                 xor     rbx, fs:28h
.text:00000000000054FA                 mov     rax, r15
.text:00000000000054FD                 jnz     loc_5B03
.text:0000000000005503                 add     rsp, 0B8h
.text:000000000000550A                 pop     rbx
.text:000000000000550B                 pop     rbp
.text:000000000000550C                 pop     r12
.text:000000000000550E                 pop     r13
.text:0000000000005510                 pop     r14
.text:0000000000005512                 pop     r15
.text:0000000000005514                 retn
.text:0000000000005514 ; ---------------------------------------------------------------------------
.text:0000000000005515                 align 8
.text:0000000000005518
.text:0000000000005518 loc_5518:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000005518                 mov     rbp, r11
.text:000000000000551B                 jmp     loc_5499
.text:0000000000005520 ; ---------------------------------------------------------------------------
.text:0000000000005520
.text:0000000000005520 loc_5520:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000005520                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000005520                 cmp     r13, r15
.text:0000000000005523                 jbe     short loc_552A
.text:0000000000005525                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000552A
.text:000000000000552A loc_552A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:000000000000552A                 lea     rax, [r15+1]
.text:000000000000552E                 cmp     r13, rax
.text:0000000000005531                 jbe     short loc_5539
.text:0000000000005533                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000005539
.text:0000000000005539 loc_5539:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000005539                 lea     rax, [r15+2]
.text:000000000000553D                 cmp     r13, rax
.text:0000000000005540                 jbe     loc_5B32
.text:0000000000005546                 mov     rdx, r13
.text:0000000000005549                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000554F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005554                 jmp     loc_5132
.text:0000000000005559 ; ---------------------------------------------------------------------------
.text:0000000000005559
.text:0000000000005559 loc_5559:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000005559                 mov     eax, r12d
.text:000000000000555C                 mov     ebx, 30h ; '0'
.text:0000000000005561                 xor     r12d, r12d
.text:0000000000005564                 jmp     loc_4B69
.text:0000000000005569 ; ---------------------------------------------------------------------------
.text:0000000000005569
.text:0000000000005569 loc_5569:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000005569                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000556F                 jmp     loc_4F39
.text:0000000000005574 ; ---------------------------------------------------------------------------
.text:0000000000005574
.text:0000000000005574 loc_5574:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005574                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:0000000000005574                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000005576                 jnz     loc_49A3        ; jumptable 00000000000121F1 case 1
.text:000000000000557C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005581
.text:0000000000005581 loc_5581:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000005581                 test    r13, r13
.text:0000000000005584                 jnz     loc_5B1A
.text:000000000000558A                 lea     rax, aSyntaxErrorUne_0+1Bh ; "'"
.text:0000000000005591                 mov     [rsp+0E8h+var_98], 0
.text:000000000000559A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000559F                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000055A4                 xor     r12d, r12d
.text:00000000000055A7                 mov     [rsp+0E8h+var_D9], 0
.text:00000000000055AC                 mov     [rsp+0E8h+n], 1
.text:00000000000055B5                 mov     [rsp+0E8h+s2], rax
.text:00000000000055BA                 mov     r15d, 1
.text:00000000000055C0                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000055C8                 jmp     loc_49E3
.text:00000000000055C8 ; ---------------------------------------------------------------------------
.text:00000000000055CD                 align 10h
.text:00000000000055D0
.text:00000000000055D0 loc_55D0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000055D0                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:00000000000055D0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:00000000000055D2                 jnz     loc_59CD
.text:00000000000055D8                 test    r13, r13
.text:00000000000055DB                 jz      loc_5806
.text:00000000000055E1                 mov     byte ptr [r14], 22h ; '"'
.text:00000000000055E5                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000055EA                 xor     r12d, r12d
.text:00000000000055ED                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000055F2                 mov     [rsp+0E8h+var_98], 0
.text:00000000000055FB
.text:00000000000055FB loc_55FB:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:00000000000055FB                 lea     rax, unk_1624B
.text:0000000000005602                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005607                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000560C                 mov     [rsp+0E8h+n], 1
.text:0000000000005615                 mov     r15d, 1
.text:000000000000561B                 mov     [rsp+0E8h+s2], rax
.text:0000000000005620                 jmp     loc_49E3
.text:0000000000005625 ; ---------------------------------------------------------------------------
.text:0000000000005625
.text:0000000000005625 loc_5625:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005625                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:0000000000005625                 lea     rax, unk_1624B  ; jumptable 00000000000121F1 case 6
.text:000000000000562C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005631                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005636                 xor     r12d, r12d
.text:0000000000005639                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005642                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000005647                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000564C                 mov     [rsp+0E8h+n], 1
.text:0000000000005655                 xor     r15d, r15d
.text:0000000000005658                 mov     [rsp+0E8h+s2], rax
.text:000000000000565D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000005665                 jmp     loc_49E3
.text:000000000000566A ; ---------------------------------------------------------------------------
.text:000000000000566A
.text:000000000000566A loc_566A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000566A                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:000000000000566A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000566F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005674                 xor     r12d, r12d
.text:0000000000005677                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005680                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005685                 xor     r15d, r15d
.text:0000000000005688                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000568D                 mov     [rsp+0E8h+n], 0
.text:0000000000005696                 mov     [rsp+0E8h+s2], 0
.text:000000000000569F                 jmp     loc_49E3
.text:00000000000056A4 ; ---------------------------------------------------------------------------
.text:00000000000056A4
.text:00000000000056A4 loc_56A4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000056A4                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:00000000000056A4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000056A9                 jz      short loc_5701
.text:00000000000056AB                 lea     rsi, asc_1624D  ; "`"
.text:00000000000056B2                 xor     edi, edi        ; domainname
.text:00000000000056B4                 mov     edx, 5          ; category
.text:00000000000056B9                 call    _dcgettext
.text:00000000000056BE                 mov     rcx, rax
.text:00000000000056C1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000056C6                 lea     rax, asc_1624D  ; "`"
.text:00000000000056CD                 cmp     rcx, rax
.text:00000000000056D0                 jz      loc_5A6E
.text:00000000000056D6
.text:00000000000056D6 loc_56D6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000056D6                 lea     rsi, aSyntaxErrorUne_0+1Bh ; msgid
.text:00000000000056DD                 xor     edi, edi        ; domainname
.text:00000000000056DF                 mov     edx, 5          ; category
.text:00000000000056E4                 call    _dcgettext
.text:00000000000056E9                 mov     rcx, rax
.text:00000000000056EC                 mov     [rsp+0E8h+var_88], rax
.text:00000000000056F1                 lea     rax, aSyntaxErrorUne_0+1Bh ; "'"
.text:00000000000056F8                 cmp     rcx, rax
.text:00000000000056FB                 jz      loc_5A84
.text:0000000000005701
.text:0000000000005701 loc_5701:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000005701                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000005701                 xor     r15d, r15d
.text:0000000000005704                 test    ebx, ebx
.text:0000000000005706                 jz      loc_58CD
.text:000000000000570C
.text:000000000000570C loc_570C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000570C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000570C                 test    ebx, ebx
.text:000000000000570E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000005713                 setnz   [rsp+0E8h+var_D9]
.text:0000000000005718                 xor     r12d, r12d
.text:000000000000571B                 mov     rdi, rbx        ; s
.text:000000000000571E                 call    _strlen
.text:0000000000005723                 mov     [rsp+0E8h+s2], rbx
.text:0000000000005728                 mov     [rsp+0E8h+n], rax
.text:000000000000572D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005732                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005737                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005740                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000005745                 jmp     loc_49E3
.text:000000000000574A ; ---------------------------------------------------------------------------
.text:000000000000574A
.text:000000000000574A loc_574A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000574A                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:000000000000574A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000574F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005754                 xor     r12d, r12d
.text:0000000000005757                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005760                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000005765                 xor     r15d, r15d
.text:0000000000005768                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000576D                 mov     [rsp+0E8h+n], 0
.text:0000000000005776                 mov     [rsp+0E8h+s2], 0
.text:000000000000577F                 jmp     loc_49E3
.text:0000000000005784 ; ---------------------------------------------------------------------------
.text:0000000000005784
.text:0000000000005784 loc_5784:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005784                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:0000000000005784                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000005789                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000578E                 xor     r12d, r12d
.text:0000000000005791                 mov     [rsp+0E8h+var_98], 0
.text:000000000000579A                 mov     [rsp+0E8h+var_D9], 1
.text:000000000000579F                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000057A4                 jmp     loc_49C3
.text:00000000000057A9 ; ---------------------------------------------------------------------------
.text:00000000000057A9
.text:00000000000057A9 loc_57A9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000057A9                 cmp     r13, r15
.text:00000000000057AC                 jbe     short loc_57B3
.text:00000000000057AE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000057B3
.text:00000000000057B3 loc_57B3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000057B3                 lea     rax, [rcx+2]
.text:00000000000057B7                 cmp     r13, rax
.text:00000000000057BA                 jbe     short loc_57C2
.text:00000000000057BC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000057C2
.text:00000000000057C2 loc_57C2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000057C2                 mov     eax, r12d
.text:00000000000057C5                 lea     r15, [rcx+3]
.text:00000000000057C9                 xor     r12d, r12d
.text:00000000000057CC                 mov     ebx, 30h ; '0'
.text:00000000000057D1                 jmp     loc_4B38
.text:00000000000057D1 ; ---------------------------------------------------------------------------
.text:00000000000057D6                 align 20h
.text:00000000000057E0
.text:00000000000057E0 loc_57E0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000057E0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000057E5                 mov     rbp, r11
.text:00000000000057E8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000057EC                 jmp     loc_5499
.text:00000000000057F1 ; ---------------------------------------------------------------------------
.text:00000000000057F1
.text:00000000000057F1 loc_57F1:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:00000000000057F1                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000057F6                 xor     r12d, r12d
.text:00000000000057F9                 jmp     loc_5300
.text:00000000000057FE ; ---------------------------------------------------------------------------
.text:00000000000057FE
.text:00000000000057FE loc_57FE:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:00000000000057FE                 xor     r10d, r10d
.text:0000000000005801                 jmp     loc_53BD
.text:0000000000005806 ; ---------------------------------------------------------------------------
.text:0000000000005806
.text:0000000000005806 loc_5806:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000005806                 mov     [rsp+0E8h+var_98], 0
.text:000000000000580F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005814                 xor     r12d, r12d
.text:0000000000005817                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000581C                 jmp     loc_55FB
.text:0000000000005821 ; ---------------------------------------------------------------------------
.text:0000000000005821
.text:0000000000005821 loc_5821:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000005821                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000005826                 mov     rsi, r14
.text:0000000000005829                 mov     rcx, r13
.text:000000000000582C                 mov     rax, rbx
.text:000000000000582F                 mov     rdi, rbx
.text:0000000000005832                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000005838                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000583D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000005845                 cmp     rsi, r11
.text:0000000000005848                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000584E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000005856                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000585B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000005860                 jnb     short loc_5888
.text:0000000000005862                 cmp     byte ptr [rcx], 0
.text:0000000000005865                 jnz     short loc_5877
.text:0000000000005867                 jmp     short loc_5888
.text:0000000000005867 ; ---------------------------------------------------------------------------
.text:0000000000005869                 align 10h
.text:0000000000005870
.text:0000000000005870 loc_5870:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000005870                 cmp     byte ptr [r9+rax], 0
.text:0000000000005875                 jz      short loc_5885
.text:0000000000005877
.text:0000000000005877 loc_5877:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000005877                 add     rax, 1
.text:000000000000587B                 lea     rdx, [rbp+rax+0]
.text:0000000000005880                 cmp     r11, rdx
.text:0000000000005883                 ja      short loc_5870
.text:0000000000005885
.text:0000000000005885 loc_5885:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000005885                 mov     rdi, rax
.text:0000000000005888
.text:0000000000005888 loc_5888:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000005888                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000005888                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000588D                 xor     r12d, r12d
.text:0000000000005890                 jmp     loc_52F6
.text:0000000000005895 ; ---------------------------------------------------------------------------
.text:0000000000005895
.text:0000000000005895 loc_5895:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000005895                 mov     rdi, rbx
.text:0000000000005898                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000589E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000058A3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000058A9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000058B1                 xor     r12d, r12d
.text:00000000000058B4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000058B9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000058BE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000058C3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000058C8                 jmp     loc_52F6
.text:00000000000058CD ; ---------------------------------------------------------------------------
.text:00000000000058CD
.text:00000000000058CD loc_58CD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000058CD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000058D2                 movzx   eax, byte ptr [rdx]
.text:00000000000058D5                 test    al, al
.text:00000000000058D7                 jz      loc_570C
.text:00000000000058DD                 nop     dword ptr [rax]
.text:00000000000058E0
.text:00000000000058E0 loc_58E0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000058E0                 cmp     r13, r15
.text:00000000000058E3                 jbe     short loc_58E9
.text:00000000000058E5                 mov     [r14+r15], al
.text:00000000000058E9
.text:00000000000058E9 loc_58E9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000058E9                 add     r15, 1
.text:00000000000058ED                 movzx   eax, byte ptr [rdx+r15]
.text:00000000000058F2                 test    al, al
.text:00000000000058F4                 jnz     short loc_58E0
.text:00000000000058F6                 jmp     loc_570C
.text:00000000000058FB ; ---------------------------------------------------------------------------
.text:00000000000058FB
.text:00000000000058FB loc_58FB:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:00000000000058FB                 mov     eax, edx
.text:00000000000058FD                 jmp     loc_4E57
.text:0000000000005902 ; ---------------------------------------------------------------------------
.text:0000000000005902
.text:0000000000005902 loc_5902:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000005902                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000005906                 cmp     bl, 3Eh ; '>'
.text:0000000000005909                 ja      loc_5180
.text:000000000000590F                 mov     rax, 7000A38200000000h
.text:0000000000005919                 bt      rax, rbx
.text:000000000000591D                 jnb     loc_5180
.text:0000000000005923                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000005928                 jnz     loc_5B12
.text:000000000000592E                 cmp     r13, r15
.text:0000000000005931                 jbe     short loc_5938
.text:0000000000005933                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000005938
.text:0000000000005938 loc_5938:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000005938                 lea     rax, [r15+1]
.text:000000000000593C                 cmp     r13, rax
.text:000000000000593F                 jbe     short loc_5947
.text:0000000000005941                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000005947
.text:0000000000005947 loc_5947:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000005947                 lea     rax, [r15+2]
.text:000000000000594B                 cmp     r13, rax
.text:000000000000594E                 jbe     short loc_5956
.text:0000000000005950                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000005956
.text:0000000000005956 loc_5956:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000005956                 lea     rax, [r15+3]
.text:000000000000595A                 cmp     r13, rax
.text:000000000000595D                 jbe     short loc_5965
.text:000000000000595F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000005965
.text:0000000000005965 loc_5965:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000005965                 add     r15, 4
.text:0000000000005969                 xor     edx, edx
.text:000000000000596B                 xor     r12d, r12d
.text:000000000000596E                 xor     eax, eax
.text:0000000000005970                 mov     rbp, rcx
.text:0000000000005973                 jmp     loc_4B38
.text:0000000000005978 ; ---------------------------------------------------------------------------
.text:0000000000005978
.text:0000000000005978 loc_5978:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000005978                                         ; DATA XREF: .rodata:jpt_49A1↓o
.text:0000000000005978                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000597A                 jz      loc_5B08
.text:0000000000005980                 lea     rax, aSyntaxErrorUne_0+1Bh ; "'"
.text:0000000000005987                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000598C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000005991                 xor     r12d, r12d
.text:0000000000005994                 mov     [rsp+0E8h+var_98], 0
.text:000000000000599D                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000059A2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000059A7                 mov     [rsp+0E8h+n], 1
.text:00000000000059B0                 xor     r15d, r15d
.text:00000000000059B3                 mov     [rsp+0E8h+s2], rax
.text:00000000000059B8                 jmp     loc_49E3
.text:00000000000059B8 ; ---------------------------------------------------------------------------
.text:00000000000059BD                 align 20h
.text:00000000000059C0
.text:00000000000059C0 loc_59C0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000059C0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000059C0                 mov     rbp, r11
.text:00000000000059C3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000059C8                 jmp     loc_5499
.text:00000000000059CD ; ---------------------------------------------------------------------------
.text:00000000000059CD
.text:00000000000059CD loc_59CD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000059CD                 lea     rax, unk_1624B
.text:00000000000059D4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000059D9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000059DE                 xor     r12d, r12d
.text:00000000000059E1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000059EA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000059EF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000059F4                 mov     [rsp+0E8h+n], 1
.text:00000000000059FD                 xor     r15d, r15d
.text:0000000000005A00                 mov     [rsp+0E8h+s2], rax
.text:0000000000005A05                 jmp     loc_49E3
.text:0000000000005A0A ; ---------------------------------------------------------------------------
.text:0000000000005A0A
.text:0000000000005A0A loc_5A0A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000005A0A                 mov     eax, edx
.text:0000000000005A0C
.text:0000000000005A0C loc_5A0C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000005A0C                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000005A0C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000005A11                 test    rbx, rbx
.text:0000000000005A14                 jz      short loc_5A42
.text:0000000000005A16                 test    al, al
.text:0000000000005A18                 jz      short loc_5A42
.text:0000000000005A1A                 movzx   ecx, byte ptr [rbx]
.text:0000000000005A1D                 mov     rax, rbx
.text:0000000000005A20                 test    cl, cl
.text:0000000000005A22                 jz      short loc_5A42
.text:0000000000005A24                 mov     rdx, r15
.text:0000000000005A27                 sub     rax, r15
.text:0000000000005A2A
.text:0000000000005A2A loc_5A2A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000005A2A                 cmp     r13, rdx
.text:0000000000005A2D                 jbe     short loc_5A33
.text:0000000000005A2F                 mov     [r14+rdx], cl
.text:0000000000005A33
.text:0000000000005A33 loc_5A33:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000005A33                 add     rdx, 1
.text:0000000000005A37                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000005A3B                 test    cl, cl
.text:0000000000005A3D                 jnz     short loc_5A2A
.text:0000000000005A3F                 mov     r15, rdx
.text:0000000000005A42
.text:0000000000005A42 loc_5A42:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000005A42                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000005A42                 cmp     r13, r15
.text:0000000000005A45                 jbe     loc_54E9
.text:0000000000005A4B                 mov     byte ptr [r14+r15], 0
.text:0000000000005A50                 jmp     loc_54E9
.text:0000000000005A55 ; ---------------------------------------------------------------------------
.text:0000000000005A55
.text:0000000000005A55 loc_5A55:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000005A55                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000005A5A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005A5F                 mov     rbp, r11
.text:0000000000005A62                 setz    al
.text:0000000000005A65                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005A69                 jmp     loc_5499
.text:0000000000005A6E ; ---------------------------------------------------------------------------
.text:0000000000005A6E
.text:0000000000005A6E loc_5A6E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:0000000000005A6E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005A72                 mov     rdi, rcx
.text:0000000000005A75                 call    gettext_quote
.text:0000000000005A7A                 mov     [rsp+0E8h+var_80], rax
.text:0000000000005A7F                 jmp     loc_56D6
.text:0000000000005A84 ; ---------------------------------------------------------------------------
.text:0000000000005A84
.text:0000000000005A84 loc_5A84:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000005A84                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000005A88                 mov     rdi, rcx
.text:0000000000005A8B                 call    gettext_quote
.text:0000000000005A90                 mov     [rsp+0E8h+var_88], rax
.text:0000000000005A95                 jmp     loc_5701
.text:0000000000005A9A ; ---------------------------------------------------------------------------
.text:0000000000005A9A
.text:0000000000005A9A loc_5A9A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:0000000000005A9A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000005A9F                 mov     rbp, r11
.text:0000000000005AA2                 mov     eax, edx
.text:0000000000005AA4                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000005AA8                 jmp     loc_5499
.text:0000000000005AAD ; ---------------------------------------------------------------------------
.text:0000000000005AAD
.text:0000000000005AAD loc_5AAD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:0000000000005AAD                 sub     rsp, 8
.text:0000000000005AB1                 mov     r8d, 5
.text:0000000000005AB7                 mov     rcx, r11
.text:0000000000005ABA                 push    [rsp+0F0h+var_88]
.text:0000000000005ABE                 push    [rsp+0F8h+var_80]
.text:0000000000005AC2                 mov     rdi, r14
.text:0000000000005AC5                 push    [rsp+100h+var_C8]
.text:0000000000005AC9                 mov     r9d, [rsp+108h+var_70]
.text:0000000000005AD1                 mov     rdx, [rsp+108h+s]
.text:0000000000005AD6                 mov     rsi, [rsp+108h+var_98]
.text:0000000000005ADB                 call    quotearg_buffer_restyled
.text:0000000000005AE0                 add     rsp, 20h
.text:0000000000005AE4                 mov     r15, rax
.text:0000000000005AE7                 jmp     loc_54E9
.text:0000000000005AEC ; ---------------------------------------------------------------------------
.text:0000000000005AEC
.text:0000000000005AEC loc_5AEC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:0000000000005AEC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000005AF1                 jmp     loc_5A0C
.text:0000000000005AF6 ; ---------------------------------------------------------------------------
.text:0000000000005AF6
.text:0000000000005AF6 loc_5AF6:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000005AF6                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000005AFE                 jmp     loc_5499
.text:0000000000005B03 ; ---------------------------------------------------------------------------
.text:0000000000005B03
.text:0000000000005B03 loc_5B03:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000005B03                 call    ___stack_chk_fail
.text:0000000000005B08 ; ---------------------------------------------------------------------------
.text:0000000000005B08
.text:0000000000005B08 loc_5B08:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000005B08                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000005B0D                 jmp     loc_5581
.text:0000000000005B12 ; ---------------------------------------------------------------------------
.text:0000000000005B12
.text:0000000000005B12 loc_5B12:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000005B12                 mov     rbp, r11
.text:0000000000005B15                 jmp     loc_54B0
.text:0000000000005B1A ; ---------------------------------------------------------------------------
.text:0000000000005B1A
.text:0000000000005B1A loc_5B1A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:0000000000005B1A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000005B1F                 xor     eax, eax
.text:0000000000005B21                 xor     r12d, r12d
.text:0000000000005B24                 mov     [rsp+0E8h+var_98], 0
.text:0000000000005B2D                 jmp     loc_50D4
.text:0000000000005B32 ; ---------------------------------------------------------------------------
.text:0000000000005B32
.text:0000000000005B32 loc_5B32:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000005B32                 mov     rdx, r13
.text:0000000000005B35                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000005B3A                 jmp     loc_5132
.text:0000000000005B3F ; ---------------------------------------------------------------------------
.text:0000000000005B3F
.text:0000000000005B3F def_49A1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:0000000000005B3F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:0000000000005B3F ; } // starts at 4910
.text:0000000000005B3F quotearg_buffer_restyled endp
.text:0000000000005B3F
.text:0000000000005B3F ; ---------------------------------------------------------------------------
.text:0000000000005B44                 align 10h
.text:0000000000005B50
.text:0000000000005B50 ; =============== S U B R O U T I N E =======================================
.text:0000000000005B50
.text:0000000000005B50
.text:0000000000005B50 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000005B50                                         ; quotearg_n_mem+7↓j ...
.text:0000000000005B50
.text:0000000000005B50 var_50          = qword ptr -50h
.text:0000000000005B50 var_48          = qword ptr -48h
.text:0000000000005B50 var_40          = dword ptr -40h
.text:0000000000005B50 var_3C          = dword ptr -3Ch
.text:0000000000005B50
.text:0000000000005B50 ; __unwind {
.text:0000000000005B50                 push    r15
.text:0000000000005B52                 push    r14
.text:0000000000005B54                 movsxd  r15, edi
.text:0000000000005B57                 push    r13
.text:0000000000005B59                 push    r12
.text:0000000000005B5B                 mov     r14, rdx
.text:0000000000005B5E                 push    rbp
.text:0000000000005B5F                 push    rbx
.text:0000000000005B60                 mov     rbp, rcx
.text:0000000000005B63                 sub     rsp, 28h
.text:0000000000005B67                 mov     [rsp+58h+var_50], rsi
.text:0000000000005B6C                 call    ___errno_location
.text:0000000000005B71                 mov     r13, rax
.text:0000000000005B74                 mov     eax, [rax]
.text:0000000000005B76                 test    r15d, r15d
.text:0000000000005B79                 mov     rbx, cs:slotvec
.text:0000000000005B80                 mov     [rsp+58h+var_40], eax
.text:0000000000005B84                 js      loc_5CF1
.text:0000000000005B8A                 cmp     cs:nslots, r15d
.text:0000000000005B91                 jg      short loc_5BF5
.text:0000000000005B93                 cmp     r15d, 7FFFFFFFh
.text:0000000000005B9A                 jz      loc_5CF6
.text:0000000000005BA0                 lea     r12d, [r15+1]
.text:0000000000005BA4                 lea     rax, slotvec0
.text:0000000000005BAB                 movsxd  rsi, r12d
.text:0000000000005BAE                 shl     rsi, 4
.text:0000000000005BB2                 cmp     rbx, rax
.text:0000000000005BB5                 jz      loc_5CD0
.text:0000000000005BBB                 mov     rdi, rbx
.text:0000000000005BBE                 call    xrealloc
.text:0000000000005BC3                 mov     rbx, rax
.text:0000000000005BC6                 mov     cs:slotvec, rax
.text:0000000000005BCD
.text:0000000000005BCD loc_5BCD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:0000000000005BCD                 movsxd  rdi, cs:nslots
.text:0000000000005BD4                 mov     edx, r12d
.text:0000000000005BD7                 xor     esi, esi        ; c
.text:0000000000005BD9                 sub     edx, edi
.text:0000000000005BDB                 shl     rdi, 4
.text:0000000000005BDF                 movsxd  rdx, edx
.text:0000000000005BE2                 add     rdi, rbx        ; s
.text:0000000000005BE5                 shl     rdx, 4          ; n
.text:0000000000005BE9                 call    _memset
.text:0000000000005BEE                 mov     cs:nslots, r12d
.text:0000000000005BF5
.text:0000000000005BF5 loc_5BF5:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000005BF5                 mov     eax, [rbp+4]
.text:0000000000005BF8                 shl     r15, 4
.text:0000000000005BFC                 sub     rsp, 8
.text:0000000000005C00                 add     rbx, r15
.text:0000000000005C03                 lea     r15, [rbp+8]
.text:0000000000005C07                 mov     r8d, [rbp+0]
.text:0000000000005C0B                 mov     r11, [rbx]
.text:0000000000005C0E                 mov     r12, [rbx+8]
.text:0000000000005C12                 mov     rcx, r14
.text:0000000000005C15                 or      eax, 1
.text:0000000000005C18                 mov     [rsp+60h+var_3C], eax
.text:0000000000005C1C                 push    qword ptr [rbp+30h]
.text:0000000000005C1F                 mov     r9d, eax
.text:0000000000005C22                 push    qword ptr [rbp+28h]
.text:0000000000005C25                 push    r15
.text:0000000000005C27                 mov     rsi, r11
.text:0000000000005C2A                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005C2F                 mov     rdi, r12
.text:0000000000005C32                 mov     [rsp+78h+var_48], r11
.text:0000000000005C37                 call    quotearg_buffer_restyled
.text:0000000000005C3C                 add     rsp, 20h
.text:0000000000005C40                 mov     r11, [rsp+58h+var_48]
.text:0000000000005C45                 cmp     r11, rax
.text:0000000000005C48                 ja      short loc_5CB1
.text:0000000000005C4A                 lea     rsi, [rax+1]
.text:0000000000005C4E                 lea     rax, slot0
.text:0000000000005C55                 cmp     r12, rax
.text:0000000000005C58                 mov     [rbx], rsi
.text:0000000000005C5B                 jz      short loc_5C6F
.text:0000000000005C5D                 mov     rdi, r12        ; ptr
.text:0000000000005C60                 mov     [rsp+58h+var_48], rsi
.text:0000000000005C65                 call    _free
.text:0000000000005C6A                 mov     rsi, [rsp+58h+var_48]
.text:0000000000005C6F
.text:0000000000005C6F loc_5C6F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:0000000000005C6F                 mov     rdi, rsi
.text:0000000000005C72                 mov     [rsp+58h+var_48], rsi
.text:0000000000005C77                 call    xmalloc
.text:0000000000005C7C                 sub     rsp, 8
.text:0000000000005C80                 mov     [rbx+8], rax
.text:0000000000005C84                 mov     r8d, [rbp+0]
.text:0000000000005C88                 push    qword ptr [rbp+30h]
.text:0000000000005C8B                 push    qword ptr [rbp+28h]
.text:0000000000005C8E                 mov     rcx, r14
.text:0000000000005C91                 push    r15
.text:0000000000005C93                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000005C98                 mov     rdi, rax
.text:0000000000005C9B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000005CA0                 mov     rsi, [rsp+78h+var_48]
.text:0000000000005CA5                 mov     r12, rax
.text:0000000000005CA8                 call    quotearg_buffer_restyled
.text:0000000000005CAD                 add     rsp, 20h
.text:0000000000005CB1
.text:0000000000005CB1 loc_5CB1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000005CB1                 mov     eax, [rsp+58h+var_40]
.text:0000000000005CB5                 mov     [r13+0], eax
.text:0000000000005CB9                 add     rsp, 28h
.text:0000000000005CBD                 mov     rax, r12
.text:0000000000005CC0                 pop     rbx
.text:0000000000005CC1                 pop     rbp
.text:0000000000005CC2                 pop     r12
.text:0000000000005CC4                 pop     r13
.text:0000000000005CC6                 pop     r14
.text:0000000000005CC8                 pop     r15
.text:0000000000005CCA                 retn
.text:0000000000005CCA ; ---------------------------------------------------------------------------
.text:0000000000005CCB                 align 10h
.text:0000000000005CD0
.text:0000000000005CD0 loc_5CD0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000005CD0                 xor     edi, edi
.text:0000000000005CD2                 call    xrealloc
.text:0000000000005CD7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:0000000000005CDF                 mov     rbx, rax
.text:0000000000005CE2                 mov     cs:slotvec, rax
.text:0000000000005CE9                 movups  xmmword ptr [rax], xmm0
.text:0000000000005CEC                 jmp     loc_5BCD
.text:0000000000005CF1 ; ---------------------------------------------------------------------------
.text:0000000000005CF1
.text:0000000000005CF1 loc_5CF1:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000005CF1                 call    _abort
.text:0000000000005CF6 ; ---------------------------------------------------------------------------
.text:0000000000005CF6
.text:0000000000005CF6 loc_5CF6:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000005CF6                 call    xalloc_die
.text:0000000000005CF6 ; } // starts at 5B50
.text:0000000000005CF6 quotearg_n_options endp
.text:0000000000005CF6
.text:0000000000005CF6 ; ---------------------------------------------------------------------------
.text:0000000000005CFB                 align 20h
.text:0000000000005D00
.text:0000000000005D00 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D00
.text:0000000000005D00 ; Attributes: info_from_lumina
.text:0000000000005D00
.text:0000000000005D00 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000005D00                 public clone_quoting_options
.text:0000000000005D00 clone_quoting_options proc near
.text:0000000000005D00 ; __unwind {
.text:0000000000005D00                 push    r12
.text:0000000000005D02                 push    rbp
.text:0000000000005D03                 push    rbx
.text:0000000000005D04                 mov     rbx, rdi
.text:0000000000005D07                 call    ___errno_location
.text:0000000000005D0C                 mov     r12d, [rax]
.text:0000000000005D0F                 mov     rbp, rax
.text:0000000000005D12                 lea     rax, default_quoting_options
.text:0000000000005D19                 test    rbx, rbx
.text:0000000000005D1C                 mov     esi, 38h ; '8'  ; n
.text:0000000000005D21                 cmovz   rbx, rax
.text:0000000000005D25                 mov     rdi, rbx        ; src
.text:0000000000005D28                 call    xmemdup
.text:0000000000005D2D                 mov     [rbp+0], r12d
.text:0000000000005D31                 pop     rbx
.text:0000000000005D32                 pop     rbp
.text:0000000000005D33                 pop     r12
.text:0000000000005D35                 retn
.text:0000000000005D35 ; } // starts at 5D00
.text:0000000000005D35 clone_quoting_options endp
.text:0000000000005D35
.text:0000000000005D35 ; ---------------------------------------------------------------------------
.text:0000000000005D36                 align 20h
.text:0000000000005D40
.text:0000000000005D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D40
.text:0000000000005D40
.text:0000000000005D40                 public get_quoting_style
.text:0000000000005D40 get_quoting_style proc near
.text:0000000000005D40 ; __unwind {
.text:0000000000005D40                 lea     rax, default_quoting_options
.text:0000000000005D47                 test    rdi, rdi
.text:0000000000005D4A                 cmovz   rdi, rax
.text:0000000000005D4E                 mov     eax, [rdi]
.text:0000000000005D50                 retn
.text:0000000000005D50 ; } // starts at 5D40
.text:0000000000005D50 get_quoting_style endp
.text:0000000000005D50
.text:0000000000005D50 ; ---------------------------------------------------------------------------
.text:0000000000005D51                 align 20h
.text:0000000000005D60
.text:0000000000005D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D60
.text:0000000000005D60
.text:0000000000005D60                 public set_quoting_style
.text:0000000000005D60 set_quoting_style proc near
.text:0000000000005D60 ; __unwind {
.text:0000000000005D60                 lea     rax, default_quoting_options
.text:0000000000005D67                 test    rdi, rdi
.text:0000000000005D6A                 cmovz   rdi, rax
.text:0000000000005D6E                 mov     [rdi], esi
.text:0000000000005D70                 retn
.text:0000000000005D70 ; } // starts at 5D60
.text:0000000000005D70 set_quoting_style endp
.text:0000000000005D70
.text:0000000000005D70 ; ---------------------------------------------------------------------------
.text:0000000000005D71                 align 20h
.text:0000000000005D80
.text:0000000000005D80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005D80
.text:0000000000005D80 ; Attributes: info_from_lumina
.text:0000000000005D80
.text:0000000000005D80 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000005D80                 public set_char_quoting
.text:0000000000005D80 set_char_quoting proc near
.text:0000000000005D80 ; __unwind {
.text:0000000000005D80                 lea     rax, default_quoting_options
.text:0000000000005D87                 test    rdi, rdi
.text:0000000000005D8A                 mov     ecx, esi
.text:0000000000005D8C                 cmovz   rdi, rax
.text:0000000000005D90                 mov     eax, esi
.text:0000000000005D92                 and     ecx, 1Fh
.text:0000000000005D95                 shr     al, 5
.text:0000000000005D98                 movzx   eax, al
.text:0000000000005D9B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000005DA0                 mov     esi, [rdi]
.text:0000000000005DA2                 mov     eax, esi
.text:0000000000005DA4                 shr     eax, cl
.text:0000000000005DA6                 xor     edx, eax
.text:0000000000005DA8                 and     eax, 1
.text:0000000000005DAB                 and     edx, 1
.text:0000000000005DAE                 shl     edx, cl
.text:0000000000005DB0                 xor     edx, esi
.text:0000000000005DB2                 mov     [rdi], edx
.text:0000000000005DB4                 retn
.text:0000000000005DB4 ; } // starts at 5D80
.text:0000000000005DB4 set_char_quoting endp
.text:0000000000005DB4
.text:0000000000005DB4 ; ---------------------------------------------------------------------------
.text:0000000000005DB5                 align 20h
.text:0000000000005DC0
.text:0000000000005DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DC0
.text:0000000000005DC0
.text:0000000000005DC0                 public set_quoting_flags
.text:0000000000005DC0 set_quoting_flags proc near
.text:0000000000005DC0 ; __unwind {
.text:0000000000005DC0                 lea     rax, default_quoting_options
.text:0000000000005DC7                 test    rdi, rdi
.text:0000000000005DCA                 cmovz   rdi, rax
.text:0000000000005DCE                 mov     eax, [rdi+4]
.text:0000000000005DD1                 mov     [rdi+4], esi
.text:0000000000005DD4                 retn
.text:0000000000005DD4 ; } // starts at 5DC0
.text:0000000000005DD4 set_quoting_flags endp
.text:0000000000005DD4
.text:0000000000005DD4 ; ---------------------------------------------------------------------------
.text:0000000000005DD5                 align 20h
.text:0000000000005DE0
.text:0000000000005DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000005DE0
.text:0000000000005DE0 ; Attributes: info_from_lumina
.text:0000000000005DE0
.text:0000000000005DE0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000005DE0                 public set_custom_quoting
.text:0000000000005DE0 set_custom_quoting proc near
.text:0000000000005DE0 ; __unwind {
.text:0000000000005DE0                 lea     rax, default_quoting_options
.text:0000000000005DE7                 test    rdi, rdi
.text:0000000000005DEA                 cmovz   rdi, rax
.text:0000000000005DEE                 test    rsi, rsi
.text:0000000000005DF1                 mov     dword ptr [rdi], 0Ah
.text:0000000000005DF7                 jz      short loc_5E07
.text:0000000000005DF9                 test    rdx, rdx
.text:0000000000005DFC                 jz      short loc_5E07
.text:0000000000005DFE                 mov     [rdi+28h], rsi
.text:0000000000005E02                 mov     [rdi+30h], rdx
.text:0000000000005E06                 retn
.text:0000000000005E07 ; ---------------------------------------------------------------------------
.text:0000000000005E07
.text:0000000000005E07 loc_5E07:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000005E07                                         ; set_custom_quoting+1C↑j
.text:0000000000005E07                 sub     rsp, 8
.text:0000000000005E0B                 call    _abort
.text:0000000000005E0B ; } // starts at 5DE0
.text:0000000000005E0B set_custom_quoting endp
.text:0000000000005E0B
.text:0000000000005E10
.text:0000000000005E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E10
.text:0000000000005E10 ; Attributes: info_from_lumina
.text:0000000000005E10
.text:0000000000005E10 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000005E10                 public quotearg_buffer
.text:0000000000005E10 quotearg_buffer proc near
.text:0000000000005E10
.text:0000000000005E10 var_40          = qword ptr -40h
.text:0000000000005E10
.text:0000000000005E10 ; __unwind {
.text:0000000000005E10                 push    r15
.text:0000000000005E12                 push    r14
.text:0000000000005E14                 lea     rax, default_quoting_options
.text:0000000000005E1B                 push    r13
.text:0000000000005E1D                 push    r12
.text:0000000000005E1F                 mov     r13, rdi
.text:0000000000005E22                 push    rbp
.text:0000000000005E23                 push    rbx
.text:0000000000005E24                 mov     rbx, r8
.text:0000000000005E27                 mov     r14, rsi
.text:0000000000005E2A                 mov     r15, rdx
.text:0000000000005E2D                 sub     rsp, 18h
.text:0000000000005E31                 test    r8, r8
.text:0000000000005E34                 cmovz   rbx, rax
.text:0000000000005E38                 mov     [rsp+48h+var_40], rcx
.text:0000000000005E3D                 call    ___errno_location
.text:0000000000005E42                 mov     r12d, [rax]
.text:0000000000005E45                 mov     rbp, rax
.text:0000000000005E48                 lea     rax, [rbx+8]
.text:0000000000005E4C                 sub     rsp, 8
.text:0000000000005E50                 mov     r9d, [rbx+4]
.text:0000000000005E54                 push    qword ptr [rbx+30h]
.text:0000000000005E57                 mov     r8d, [rbx]
.text:0000000000005E5A                 push    qword ptr [rbx+28h]
.text:0000000000005E5D                 mov     rdx, r15
.text:0000000000005E60                 push    rax
.text:0000000000005E61                 mov     rcx, [rsp+68h+var_40]
.text:0000000000005E66                 mov     rsi, r14
.text:0000000000005E69                 mov     rdi, r13
.text:0000000000005E6C                 call    quotearg_buffer_restyled
.text:0000000000005E71                 mov     [rbp+0], r12d
.text:0000000000005E75                 add     rsp, 38h
.text:0000000000005E79                 pop     rbx
.text:0000000000005E7A                 pop     rbp
.text:0000000000005E7B                 pop     r12
.text:0000000000005E7D                 pop     r13
.text:0000000000005E7F                 pop     r14
.text:0000000000005E81                 pop     r15
.text:0000000000005E83                 retn
.text:0000000000005E83 ; } // starts at 5E10
.text:0000000000005E83 quotearg_buffer endp
.text:0000000000005E83
.text:0000000000005E83 ; ---------------------------------------------------------------------------
.text:0000000000005E84                 align 10h
.text:0000000000005E90
.text:0000000000005E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005E90
.text:0000000000005E90 ; Attributes: info_from_lumina
.text:0000000000005E90
.text:0000000000005E90 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000005E90                 public quotearg_alloc_mem
.text:0000000000005E90 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000005E90
.text:0000000000005E90 var_5C          = dword ptr -5Ch
.text:0000000000005E90 var_58          = qword ptr -58h
.text:0000000000005E90 var_50          = qword ptr -50h
.text:0000000000005E90 var_48          = qword ptr -48h
.text:0000000000005E90 var_40          = qword ptr -40h
.text:0000000000005E90
.text:0000000000005E90 ; __unwind {
.text:0000000000005E90                 push    r15
.text:0000000000005E92                 push    r14
.text:0000000000005E94                 lea     rax, default_quoting_options
.text:0000000000005E9B                 push    r13
.text:0000000000005E9D                 push    r12
.text:0000000000005E9F                 mov     r12, rdx
.text:0000000000005EA2                 push    rbp
.text:0000000000005EA3                 push    rbx
.text:0000000000005EA4                 mov     rbx, rcx
.text:0000000000005EA7                 mov     r14, rdi
.text:0000000000005EAA                 mov     r15, rsi
.text:0000000000005EAD                 sub     rsp, 38h
.text:0000000000005EB1                 test    rcx, rcx
.text:0000000000005EB4                 cmovz   rbx, rax
.text:0000000000005EB8                 xor     ebp, ebp
.text:0000000000005EBA                 call    ___errno_location
.text:0000000000005EBF                 test    r12, r12
.text:0000000000005EC2                 mov     r13, rax
.text:0000000000005EC5                 mov     eax, [rax]
.text:0000000000005EC7                 setz    bpl
.text:0000000000005ECB                 or      ebp, [rbx+4]
.text:0000000000005ECE                 lea     r10, [rbx+8]
.text:0000000000005ED2                 sub     rsp, 8
.text:0000000000005ED6                 mov     r8d, [rbx]
.text:0000000000005ED9                 mov     rcx, r15
.text:0000000000005EDC                 mov     [rsp+70h+var_5C], eax
.text:0000000000005EE0                 push    qword ptr [rbx+30h]
.text:0000000000005EE3                 mov     rdx, r14
.text:0000000000005EE6                 push    qword ptr [rbx+28h]
.text:0000000000005EE9                 push    r10
.text:0000000000005EEB                 xor     esi, esi
.text:0000000000005EED                 mov     r9d, ebp
.text:0000000000005EF0                 xor     edi, edi
.text:0000000000005EF2                 mov     [rsp+88h+var_48], r10
.text:0000000000005EF7                 call    quotearg_buffer_restyled
.text:0000000000005EFC                 lea     rsi, [rax+1]
.text:0000000000005F00                 mov     [rsp+88h+var_40], rax
.text:0000000000005F05                 add     rsp, 20h
.text:0000000000005F09                 mov     rdi, rsi
.text:0000000000005F0C                 mov     [rsp+68h+var_50], rsi
.text:0000000000005F11                 call    xmalloc
.text:0000000000005F16                 mov     [rsp+68h+var_58], rax
.text:0000000000005F1B                 sub     rsp, 8
.text:0000000000005F1F                 push    qword ptr [rbx+30h]
.text:0000000000005F22                 push    qword ptr [rbx+28h]
.text:0000000000005F25                 mov     r10, [rsp+80h+var_48]
.text:0000000000005F2A                 mov     r9d, ebp
.text:0000000000005F2D                 mov     r8d, [rbx]
.text:0000000000005F30                 mov     rcx, r15
.text:0000000000005F33                 mov     rdx, r14
.text:0000000000005F36                 mov     rdi, rax
.text:0000000000005F39                 push    r10
.text:0000000000005F3B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000005F40                 call    quotearg_buffer_restyled
.text:0000000000005F45                 mov     eax, [rsp+88h+var_5C]
.text:0000000000005F49                 add     rsp, 20h
.text:0000000000005F4D                 test    r12, r12
.text:0000000000005F50                 mov     [r13+0], eax
.text:0000000000005F54                 jz      short loc_5F5F
.text:0000000000005F56                 mov     r11, [rsp+68h+var_40]
.text:0000000000005F5B                 mov     [r12], r11
.text:0000000000005F5F
.text:0000000000005F5F loc_5F5F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:0000000000005F5F                 mov     rax, [rsp+68h+var_58]
.text:0000000000005F64                 add     rsp, 38h
.text:0000000000005F68                 pop     rbx
.text:0000000000005F69                 pop     rbp
.text:0000000000005F6A                 pop     r12
.text:0000000000005F6C                 pop     r13
.text:0000000000005F6E                 pop     r14
.text:0000000000005F70                 pop     r15
.text:0000000000005F72                 retn
.text:0000000000005F72 ; } // starts at 5E90
.text:0000000000005F72 quotearg_alloc_mem endp
.text:0000000000005F72
.text:0000000000005F72 ; ---------------------------------------------------------------------------
.text:0000000000005F73                 align 20h
.text:0000000000005F80
.text:0000000000005F80 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F80
.text:0000000000005F80
.text:0000000000005F80                 public quotearg_alloc
.text:0000000000005F80 quotearg_alloc  proc near
.text:0000000000005F80 ; __unwind {
.text:0000000000005F80                 mov     rcx, rdx
.text:0000000000005F83                 xor     edx, edx
.text:0000000000005F85                 jmp     quotearg_alloc_mem
.text:0000000000005F85 ; } // starts at 5F80
.text:0000000000005F85 quotearg_alloc  endp
.text:0000000000005F85
.text:0000000000005F85 ; ---------------------------------------------------------------------------
.text:0000000000005F8A                 align 10h
.text:0000000000005F90
.text:0000000000005F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000005F90
.text:0000000000005F90 ; Attributes: info_from_lumina
.text:0000000000005F90
.text:0000000000005F90 ; void __cdecl quotearg_free()
.text:0000000000005F90                 public quotearg_free
.text:0000000000005F90 quotearg_free   proc near
.text:0000000000005F90 ; __unwind {
.text:0000000000005F90                 mov     eax, cs:nslots
.text:0000000000005F96                 push    r12
.text:0000000000005F98                 mov     r12, cs:slotvec
.text:0000000000005F9F                 push    rbp
.text:0000000000005FA0                 push    rbx
.text:0000000000005FA1                 cmp     eax, 1
.text:0000000000005FA4                 jle     short loc_5FD1
.text:0000000000005FA6                 sub     eax, 2
.text:0000000000005FA9                 lea     rbx, [r12+18h]
.text:0000000000005FAE                 shl     rax, 4
.text:0000000000005FB2                 lea     rbp, [r12+rax+28h]
.text:0000000000005FB7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000005FC0
.text:0000000000005FC0 loc_5FC0:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000005FC0                 mov     rdi, [rbx]      ; ptr
.text:0000000000005FC3                 add     rbx, 10h
.text:0000000000005FC7                 call    _free
.text:0000000000005FCC                 cmp     rbx, rbp
.text:0000000000005FCF                 jnz     short loc_5FC0
.text:0000000000005FD1
.text:0000000000005FD1 loc_5FD1:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000005FD1                 mov     rdi, [r12+8]    ; ptr
.text:0000000000005FD6                 lea     rbx, slot0
.text:0000000000005FDD                 cmp     rdi, rbx
.text:0000000000005FE0                 jz      short loc_5FF9
.text:0000000000005FE2                 call    _free
.text:0000000000005FE7                 mov     cs:slotvec0, 100h
.text:0000000000005FF2                 mov     cs:off_21B078, rbx
.text:0000000000005FF9
.text:0000000000005FF9 loc_5FF9:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000005FF9                 lea     rbx, slotvec0
.text:0000000000006000                 cmp     r12, rbx
.text:0000000000006003                 jz      short loc_6014
.text:0000000000006005                 mov     rdi, r12        ; ptr
.text:0000000000006008                 call    _free
.text:000000000000600D                 mov     cs:slotvec, rbx
.text:0000000000006014
.text:0000000000006014 loc_6014:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000006014                 pop     rbx
.text:0000000000006015                 mov     cs:nslots, 1
.text:000000000000601F                 pop     rbp
.text:0000000000006020                 pop     r12
.text:0000000000006022                 retn
.text:0000000000006022 ; } // starts at 5F90
.text:0000000000006022 quotearg_free   endp
.text:0000000000006022
.text:0000000000006022 ; ---------------------------------------------------------------------------
.text:0000000000006023                 align 10h
.text:0000000000006030
.text:0000000000006030 ; =============== S U B R O U T I N E =======================================
.text:0000000000006030
.text:0000000000006030
.text:0000000000006030                 public quotearg_n
.text:0000000000006030 quotearg_n      proc near
.text:0000000000006030 ; __unwind {
.text:0000000000006030                 lea     rcx, default_quoting_options
.text:0000000000006037                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000603E                 jmp     quotearg_n_options
.text:000000000000603E ; } // starts at 6030
.text:000000000000603E quotearg_n      endp
.text:000000000000603E
.text:000000000000603E ; ---------------------------------------------------------------------------
.text:0000000000006043                 align 10h
.text:0000000000006050
.text:0000000000006050 ; =============== S U B R O U T I N E =======================================
.text:0000000000006050
.text:0000000000006050
.text:0000000000006050                 public quotearg_n_mem
.text:0000000000006050 quotearg_n_mem  proc near
.text:0000000000006050 ; __unwind {
.text:0000000000006050                 lea     rcx, default_quoting_options
.text:0000000000006057                 jmp     quotearg_n_options
.text:0000000000006057 ; } // starts at 6050
.text:0000000000006057 quotearg_n_mem  endp
.text:0000000000006057
.text:0000000000006057 ; ---------------------------------------------------------------------------
.text:000000000000605C                 align 20h
.text:0000000000006060
.text:0000000000006060 ; =============== S U B R O U T I N E =======================================
.text:0000000000006060
.text:0000000000006060
.text:0000000000006060                 public quotearg
.text:0000000000006060 quotearg        proc near
.text:0000000000006060 ; __unwind {
.text:0000000000006060                 lea     rcx, default_quoting_options
.text:0000000000006067                 mov     rsi, rdi
.text:000000000000606A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000006071                 xor     edi, edi
.text:0000000000006073                 jmp     quotearg_n_options
.text:0000000000006073 ; } // starts at 6060
.text:0000000000006073 quotearg        endp
.text:0000000000006073
.text:0000000000006073 ; ---------------------------------------------------------------------------
.text:0000000000006078                 align 20h
.text:0000000000006080
.text:0000000000006080 ; =============== S U B R O U T I N E =======================================
.text:0000000000006080
.text:0000000000006080
.text:0000000000006080                 public quotearg_mem
.text:0000000000006080 quotearg_mem    proc near
.text:0000000000006080 ; __unwind {
.text:0000000000006080                 lea     rcx, default_quoting_options
.text:0000000000006087                 mov     rdx, rsi
.text:000000000000608A                 mov     rsi, rdi
.text:000000000000608D                 xor     edi, edi
.text:000000000000608F                 jmp     quotearg_n_options
.text:000000000000608F ; } // starts at 6080
.text:000000000000608F quotearg_mem    endp
.text:000000000000608F
.text:000000000000608F ; ---------------------------------------------------------------------------
.text:0000000000006094                 align 20h
.text:00000000000060A0
.text:00000000000060A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000060A0
.text:00000000000060A0 ; Attributes: info_from_lumina
.text:00000000000060A0
.text:00000000000060A0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:00000000000060A0                 public quotearg_n_style
.text:00000000000060A0 quotearg_n_style proc near              ; CODE XREF: main+161↑p
.text:00000000000060A0                                         ; require_more_args+1B↑p ...
.text:00000000000060A0
.text:00000000000060A0 var_48          = dword ptr -48h
.text:00000000000060A0 var_44          = qword ptr -44h
.text:00000000000060A0 var_3C          = qword ptr -3Ch
.text:00000000000060A0 var_34          = qword ptr -34h
.text:00000000000060A0 var_2C          = qword ptr -2Ch
.text:00000000000060A0 var_24          = qword ptr -24h
.text:00000000000060A0 var_1C          = qword ptr -1Ch
.text:00000000000060A0 var_14          = dword ptr -14h
.text:00000000000060A0 var_10          = qword ptr -10h
.text:00000000000060A0
.text:00000000000060A0 ; __unwind {
.text:00000000000060A0                 sub     rsp, 48h
.text:00000000000060A4                 mov     rax, rdx
.text:00000000000060A7                 mov     rdx, fs:28h
.text:00000000000060B0                 mov     [rsp+48h+var_10], rdx
.text:00000000000060B5                 xor     edx, edx
.text:00000000000060B7                 cmp     esi, 0Ah
.text:00000000000060BA                 jz      short loc_6124
.text:00000000000060BC                 mov     [rsp+48h+var_48], esi
.text:00000000000060BF                 mov     rcx, rsp
.text:00000000000060C2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000060C9                 mov     rsi, rax
.text:00000000000060CC                 mov     [rsp+48h+var_44], 0
.text:00000000000060D5                 mov     [rsp+48h+var_3C], 0
.text:00000000000060DE                 mov     [rsp+48h+var_34], 0
.text:00000000000060E7                 mov     [rsp+48h+var_2C], 0
.text:00000000000060F0                 mov     [rsp+48h+var_24], 0
.text:00000000000060F9                 mov     [rsp+48h+var_1C], 0
.text:0000000000006102                 mov     [rsp+48h+var_14], 0
.text:000000000000610A                 call    quotearg_n_options
.text:000000000000610F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000006114                 xor     rcx, fs:28h
.text:000000000000611D                 jnz     short loc_6129
.text:000000000000611F                 add     rsp, 48h
.text:0000000000006123                 retn
.text:0000000000006124 ; ---------------------------------------------------------------------------
.text:0000000000006124
.text:0000000000006124 loc_6124:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000006124                 call    _abort
.text:0000000000006129 ; ---------------------------------------------------------------------------
.text:0000000000006129
.text:0000000000006129 loc_6129:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000006129                 call    ___stack_chk_fail
.text:0000000000006129 ; } // starts at 60A0
.text:0000000000006129 quotearg_n_style endp
.text:0000000000006129
.text:0000000000006129 ; ---------------------------------------------------------------------------
.text:000000000000612E                 align 10h
.text:0000000000006130
.text:0000000000006130 ; =============== S U B R O U T I N E =======================================
.text:0000000000006130
.text:0000000000006130 ; Attributes: info_from_lumina
.text:0000000000006130
.text:0000000000006130 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000006130                 public quotearg_n_style_mem
.text:0000000000006130 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000006130
.text:0000000000006130 var_48          = dword ptr -48h
.text:0000000000006130 var_44          = qword ptr -44h
.text:0000000000006130 var_3C          = qword ptr -3Ch
.text:0000000000006130 var_34          = qword ptr -34h
.text:0000000000006130 var_2C          = qword ptr -2Ch
.text:0000000000006130 var_24          = qword ptr -24h
.text:0000000000006130 var_1C          = qword ptr -1Ch
.text:0000000000006130 var_14          = dword ptr -14h
.text:0000000000006130 var_10          = qword ptr -10h
.text:0000000000006130
.text:0000000000006130 ; __unwind {
.text:0000000000006130                 sub     rsp, 48h
.text:0000000000006134                 mov     rax, rdx
.text:0000000000006137                 mov     rdx, rcx
.text:000000000000613A                 mov     rcx, fs:28h
.text:0000000000006143                 mov     [rsp+48h+var_10], rcx
.text:0000000000006148                 xor     ecx, ecx
.text:000000000000614A                 cmp     esi, 0Ah
.text:000000000000614D                 jz      short loc_61B0
.text:000000000000614F                 mov     [rsp+48h+var_48], esi
.text:0000000000006152                 mov     rcx, rsp
.text:0000000000006155                 mov     rsi, rax
.text:0000000000006158                 mov     [rsp+48h+var_44], 0
.text:0000000000006161                 mov     [rsp+48h+var_3C], 0
.text:000000000000616A                 mov     [rsp+48h+var_34], 0
.text:0000000000006173                 mov     [rsp+48h+var_2C], 0
.text:000000000000617C                 mov     [rsp+48h+var_24], 0
.text:0000000000006185                 mov     [rsp+48h+var_1C], 0
.text:000000000000618E                 mov     [rsp+48h+var_14], 0
.text:0000000000006196                 call    quotearg_n_options
.text:000000000000619B                 mov     rdx, [rsp+48h+var_10]
.text:00000000000061A0                 xor     rdx, fs:28h
.text:00000000000061A9                 jnz     short loc_61B5
.text:00000000000061AB                 add     rsp, 48h
.text:00000000000061AF                 retn
.text:00000000000061B0 ; ---------------------------------------------------------------------------
.text:00000000000061B0
.text:00000000000061B0 loc_61B0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:00000000000061B0                 call    _abort
.text:00000000000061B5 ; ---------------------------------------------------------------------------
.text:00000000000061B5
.text:00000000000061B5 loc_61B5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:00000000000061B5                 call    ___stack_chk_fail
.text:00000000000061B5 ; } // starts at 6130
.text:00000000000061B5 quotearg_n_style_mem endp
.text:00000000000061B5
.text:00000000000061B5 ; ---------------------------------------------------------------------------
.text:00000000000061BA                 align 20h
.text:00000000000061C0
.text:00000000000061C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061C0
.text:00000000000061C0
.text:00000000000061C0                 public quotearg_style
.text:00000000000061C0 quotearg_style  proc near
.text:00000000000061C0 ; __unwind {
.text:00000000000061C0                 mov     rdx, rsi
.text:00000000000061C3                 mov     esi, edi
.text:00000000000061C5                 xor     edi, edi
.text:00000000000061C7                 jmp     quotearg_n_style
.text:00000000000061C7 ; } // starts at 61C0
.text:00000000000061C7 quotearg_style  endp
.text:00000000000061C7
.text:00000000000061C7 ; ---------------------------------------------------------------------------
.text:00000000000061CC                 align 10h
.text:00000000000061D0
.text:00000000000061D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061D0
.text:00000000000061D0
.text:00000000000061D0                 public quotearg_style_mem
.text:00000000000061D0 quotearg_style_mem proc near
.text:00000000000061D0 ; __unwind {
.text:00000000000061D0                 mov     rcx, rdx
.text:00000000000061D3                 mov     rdx, rsi
.text:00000000000061D6                 mov     esi, edi
.text:00000000000061D8                 xor     edi, edi
.text:00000000000061DA                 jmp     quotearg_n_style_mem
.text:00000000000061DA ; } // starts at 61D0
.text:00000000000061DA quotearg_style_mem endp
.text:00000000000061DA
.text:00000000000061DA ; ---------------------------------------------------------------------------
.text:00000000000061DF                 align 20h
.text:00000000000061E0
.text:00000000000061E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000061E0
.text:00000000000061E0 ; Attributes: info_from_lumina
.text:00000000000061E0
.text:00000000000061E0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:00000000000061E0                 public quotearg_char_mem
.text:00000000000061E0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:00000000000061E0                                         ; quotearg_colon+C↓j ...
.text:00000000000061E0
.text:00000000000061E0 var_48          = xmmword ptr -48h
.text:00000000000061E0 var_38          = xmmword ptr -38h
.text:00000000000061E0 var_28          = xmmword ptr -28h
.text:00000000000061E0 var_18          = qword ptr -18h
.text:00000000000061E0 var_10          = qword ptr -10h
.text:00000000000061E0
.text:00000000000061E0 ; __unwind {
.text:00000000000061E0                 sub     rsp, 48h
.text:00000000000061E4                 mov     ecx, edx
.text:00000000000061E6                 mov     rax, fs:28h
.text:00000000000061EF                 mov     [rsp+48h+var_10], rax
.text:00000000000061F4                 xor     eax, eax
.text:00000000000061F6                 mov     rax, cs:qword_21B230
.text:00000000000061FD                 mov     r8, rsp
.text:0000000000006200                 and     ecx, 1Fh
.text:0000000000006203                 movdqa  xmm0, cs:default_quoting_options
.text:000000000000620B                 mov     [rsp+48h+var_18], rax
.text:0000000000006210                 mov     eax, edx
.text:0000000000006212                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000006216                 shr     al, 5
.text:0000000000006219                 movzx   eax, al
.text:000000000000621C                 lea     r9, [r8+rax*4+8]
.text:0000000000006221                 movdqa  xmm0, cs:xmmword_21B210
.text:0000000000006229                 movaps  [rsp+48h+var_38], xmm0
.text:000000000000622E                 movdqa  xmm0, cs:xmmword_21B220
.text:0000000000006236                 movaps  [rsp+48h+var_28], xmm0
.text:000000000000623B                 mov     edx, [r9]
.text:000000000000623E                 mov     eax, edx
.text:0000000000006240                 shr     eax, cl
.text:0000000000006242                 not     eax
.text:0000000000006244                 and     eax, 1
.text:0000000000006247                 shl     eax, cl
.text:0000000000006249                 mov     rcx, r8
.text:000000000000624C                 xor     eax, edx
.text:000000000000624E                 mov     rdx, rsi
.text:0000000000006251                 mov     rsi, rdi
.text:0000000000006254                 mov     [r9], eax
.text:0000000000006257                 xor     edi, edi
.text:0000000000006259                 call    quotearg_n_options
.text:000000000000625E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000006263                 xor     rsi, fs:28h
.text:000000000000626C                 jnz     short loc_6273
.text:000000000000626E                 add     rsp, 48h
.text:0000000000006272                 retn
.text:0000000000006273 ; ---------------------------------------------------------------------------
.text:0000000000006273
.text:0000000000006273 loc_6273:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000006273                 call    ___stack_chk_fail
.text:0000000000006273 ; } // starts at 61E0
.text:0000000000006273 quotearg_char_mem endp
.text:0000000000006273
.text:0000000000006273 ; ---------------------------------------------------------------------------
.text:0000000000006278                 align 20h
.text:0000000000006280
.text:0000000000006280 ; =============== S U B R O U T I N E =======================================
.text:0000000000006280
.text:0000000000006280
.text:0000000000006280                 public quotearg_char
.text:0000000000006280 quotearg_char   proc near
.text:0000000000006280 ; __unwind {
.text:0000000000006280                 movsx   edx, sil
.text:0000000000006284                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000628B                 jmp     quotearg_char_mem
.text:000000000000628B ; } // starts at 6280
.text:000000000000628B quotearg_char   endp
.text:000000000000628B
.text:0000000000006290
.text:0000000000006290 ; =============== S U B R O U T I N E =======================================
.text:0000000000006290
.text:0000000000006290
.text:0000000000006290                 public quotearg_colon
.text:0000000000006290 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000006290 ; __unwind {
.text:0000000000006290                 mov     edx, 3Ah ; ':'
.text:0000000000006295                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000629C                 jmp     quotearg_char_mem
.text:000000000000629C ; } // starts at 6290
.text:000000000000629C quotearg_colon  endp
.text:000000000000629C
.text:000000000000629C ; ---------------------------------------------------------------------------
.text:00000000000062A1                 align 10h
.text:00000000000062B0
.text:00000000000062B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062B0
.text:00000000000062B0
.text:00000000000062B0                 public quotearg_colon_mem
.text:00000000000062B0 quotearg_colon_mem proc near
.text:00000000000062B0 ; __unwind {
.text:00000000000062B0                 mov     edx, 3Ah ; ':'
.text:00000000000062B5                 jmp     quotearg_char_mem
.text:00000000000062B5 ; } // starts at 62B0
.text:00000000000062B5 quotearg_colon_mem endp
.text:00000000000062B5
.text:00000000000062B5 ; ---------------------------------------------------------------------------
.text:00000000000062BA                 align 20h
.text:00000000000062C0
.text:00000000000062C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000062C0
.text:00000000000062C0 ; Attributes: info_from_lumina
.text:00000000000062C0
.text:00000000000062C0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:00000000000062C0                 public quotearg_n_style_colon
.text:00000000000062C0 quotearg_n_style_colon proc near
.text:00000000000062C0
.text:00000000000062C0 var_48          = dword ptr -48h
.text:00000000000062C0 var_44          = qword ptr -44h
.text:00000000000062C0 var_3C          = qword ptr -3Ch
.text:00000000000062C0 var_34          = qword ptr -34h
.text:00000000000062C0 var_2C          = qword ptr -2Ch
.text:00000000000062C0 var_24          = qword ptr -24h
.text:00000000000062C0 var_1C          = qword ptr -1Ch
.text:00000000000062C0 var_14          = dword ptr -14h
.text:00000000000062C0 var_10          = qword ptr -10h
.text:00000000000062C0
.text:00000000000062C0 ; __unwind {
.text:00000000000062C0                 sub     rsp, 48h
.text:00000000000062C4                 mov     rax, rdx
.text:00000000000062C7                 mov     rdx, fs:28h
.text:00000000000062D0                 mov     [rsp+48h+var_10], rdx
.text:00000000000062D5                 xor     edx, edx
.text:00000000000062D7                 cmp     esi, 0Ah
.text:00000000000062DA                 jz      short loc_6344
.text:00000000000062DC                 mov     [rsp+48h+var_48], esi
.text:00000000000062DF                 mov     rcx, rsp
.text:00000000000062E2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000062E9                 mov     rsi, rax
.text:00000000000062EC                 mov     [rsp+48h+var_44], 0
.text:00000000000062F5                 mov     [rsp+48h+var_3C], 4000000h
.text:00000000000062FE                 mov     [rsp+48h+var_34], 0
.text:0000000000006307                 mov     [rsp+48h+var_2C], 0
.text:0000000000006310                 mov     [rsp+48h+var_24], 0
.text:0000000000006319                 mov     [rsp+48h+var_1C], 0
.text:0000000000006322                 mov     [rsp+48h+var_14], 0
.text:000000000000632A                 call    quotearg_n_options
.text:000000000000632F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000006334                 xor     rcx, fs:28h
.text:000000000000633D                 jnz     short loc_6349
.text:000000000000633F                 add     rsp, 48h
.text:0000000000006343                 retn
.text:0000000000006344 ; ---------------------------------------------------------------------------
.text:0000000000006344
.text:0000000000006344 loc_6344:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000006344                 call    _abort
.text:0000000000006349 ; ---------------------------------------------------------------------------
.text:0000000000006349
.text:0000000000006349 loc_6349:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000006349                 call    ___stack_chk_fail
.text:0000000000006349 ; } // starts at 62C0
.text:0000000000006349 quotearg_n_style_colon endp
.text:0000000000006349
.text:0000000000006349 ; ---------------------------------------------------------------------------
.text:000000000000634E                 align 10h
.text:0000000000006350
.text:0000000000006350 ; =============== S U B R O U T I N E =======================================
.text:0000000000006350
.text:0000000000006350 ; Attributes: info_from_lumina
.text:0000000000006350
.text:0000000000006350 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000006350                 public quotearg_n_custom_mem
.text:0000000000006350 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000006350                                         ; quotearg_custom+12↓j ...
.text:0000000000006350
.text:0000000000006350 var_48          = xmmword ptr -48h
.text:0000000000006350 var_38          = xmmword ptr -38h
.text:0000000000006350 var_28          = xmmword ptr -28h
.text:0000000000006350 var_18          = qword ptr -18h
.text:0000000000006350 var_10          = qword ptr -10h
.text:0000000000006350
.text:0000000000006350 ; __unwind {
.text:0000000000006350                 sub     rsp, 48h
.text:0000000000006354                 mov     r9, rcx
.text:0000000000006357                 mov     rcx, cs:qword_21B230
.text:000000000000635E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000006366                 mov     rax, fs:28h
.text:000000000000636F                 mov     [rsp+48h+var_10], rax
.text:0000000000006374                 xor     eax, eax
.text:0000000000006376                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000637A                 test    rsi, rsi
.text:000000000000637D                 mov     [rsp+48h+var_18], rcx
.text:0000000000006382                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000006389                 movdqa  xmm0, cs:xmmword_21B210
.text:0000000000006391                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000006396                 movdqa  xmm0, cs:xmmword_21B220
.text:000000000000639E                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000063A3                 jz      short loc_63D7
.text:00000000000063A5                 test    rdx, rdx
.text:00000000000063A8                 jz      short loc_63D7
.text:00000000000063AA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:00000000000063AF                 mov     [rsp+48h+var_18], rdx
.text:00000000000063B4                 mov     rcx, rsp
.text:00000000000063B7                 mov     rdx, r8
.text:00000000000063BA                 mov     rsi, r9
.text:00000000000063BD                 call    quotearg_n_options
.text:00000000000063C2                 mov     rdi, [rsp+48h+var_10]
.text:00000000000063C7                 xor     rdi, fs:28h
.text:00000000000063D0                 jnz     short loc_63DC
.text:00000000000063D2                 add     rsp, 48h
.text:00000000000063D6                 retn
.text:00000000000063D7 ; ---------------------------------------------------------------------------
.text:00000000000063D7
.text:00000000000063D7 loc_63D7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:00000000000063D7                                         ; quotearg_n_custom_mem+58↑j
.text:00000000000063D7                 call    _abort
.text:00000000000063DC ; ---------------------------------------------------------------------------
.text:00000000000063DC
.text:00000000000063DC loc_63DC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:00000000000063DC                 call    ___stack_chk_fail
.text:00000000000063DC ; } // starts at 6350
.text:00000000000063DC quotearg_n_custom_mem endp
.text:00000000000063DC
.text:00000000000063DC ; ---------------------------------------------------------------------------
.text:00000000000063E1                 align 10h
.text:00000000000063F0
.text:00000000000063F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000063F0
.text:00000000000063F0
.text:00000000000063F0                 public quotearg_n_custom
.text:00000000000063F0 quotearg_n_custom proc near
.text:00000000000063F0 ; __unwind {
.text:00000000000063F0                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000063F7                 jmp     quotearg_n_custom_mem
.text:00000000000063F7 ; } // starts at 63F0
.text:00000000000063F7 quotearg_n_custom endp
.text:00000000000063F7
.text:00000000000063F7 ; ---------------------------------------------------------------------------
.text:00000000000063FC                 align 20h
.text:0000000000006400
.text:0000000000006400 ; =============== S U B R O U T I N E =======================================
.text:0000000000006400
.text:0000000000006400
.text:0000000000006400                 public quotearg_custom
.text:0000000000006400 quotearg_custom proc near
.text:0000000000006400 ; __unwind {
.text:0000000000006400                 mov     rcx, rdx
.text:0000000000006403                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:000000000000640A                 mov     rdx, rsi
.text:000000000000640D                 mov     rsi, rdi
.text:0000000000006410                 xor     edi, edi
.text:0000000000006412                 jmp     quotearg_n_custom_mem
.text:0000000000006412 ; } // starts at 6400
.text:0000000000006412 quotearg_custom endp
.text:0000000000006412
.text:0000000000006412 ; ---------------------------------------------------------------------------
.text:0000000000006417                 align 20h
.text:0000000000006420
.text:0000000000006420 ; =============== S U B R O U T I N E =======================================
.text:0000000000006420
.text:0000000000006420
.text:0000000000006420                 public quotearg_custom_mem
.text:0000000000006420 quotearg_custom_mem proc near
.text:0000000000006420 ; __unwind {
.text:0000000000006420                 mov     r8, rcx
.text:0000000000006423                 mov     rcx, rdx
.text:0000000000006426                 mov     rdx, rsi
.text:0000000000006429                 mov     rsi, rdi
.text:000000000000642C                 xor     edi, edi
.text:000000000000642E                 jmp     quotearg_n_custom_mem
.text:000000000000642E ; } // starts at 6420
.text:000000000000642E quotearg_custom_mem endp
.text:000000000000642E
.text:000000000000642E ; ---------------------------------------------------------------------------
.text:0000000000006433                 align 20h
.text:0000000000006440
.text:0000000000006440 ; =============== S U B R O U T I N E =======================================
.text:0000000000006440
.text:0000000000006440
.text:0000000000006440                 public quote_n_mem
.text:0000000000006440 quote_n_mem     proc near
.text:0000000000006440 ; __unwind {
.text:0000000000006440                 lea     rcx, quote_quoting_options
.text:0000000000006447                 jmp     quotearg_n_options
.text:0000000000006447 ; } // starts at 6440
.text:0000000000006447 quote_n_mem     endp
.text:0000000000006447
.text:0000000000006447 ; ---------------------------------------------------------------------------
.text:000000000000644C                 align 10h
.text:0000000000006450
.text:0000000000006450 ; =============== S U B R O U T I N E =======================================
.text:0000000000006450
.text:0000000000006450
.text:0000000000006450                 public quote_mem
.text:0000000000006450 quote_mem       proc near
.text:0000000000006450 ; __unwind {
.text:0000000000006450                 lea     rcx, quote_quoting_options
.text:0000000000006457                 mov     rdx, rsi
.text:000000000000645A                 mov     rsi, rdi
.text:000000000000645D                 xor     edi, edi
.text:000000000000645F                 jmp     quotearg_n_options
.text:000000000000645F ; } // starts at 6450
.text:000000000000645F quote_mem       endp
.text:000000000000645F
.text:000000000000645F ; ---------------------------------------------------------------------------
.text:0000000000006464                 align 10h
.text:0000000000006470
.text:0000000000006470 ; =============== S U B R O U T I N E =======================================
.text:0000000000006470
.text:0000000000006470
.text:0000000000006470                 public quote_n
.text:0000000000006470 quote_n         proc near
.text:0000000000006470 ; __unwind {
.text:0000000000006470                 lea     rcx, quote_quoting_options
.text:0000000000006477                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000647E                 jmp     quotearg_n_options
.text:000000000000647E ; } // starts at 6470
.text:000000000000647E quote_n         endp
.text:000000000000647E
.text:000000000000647E ; ---------------------------------------------------------------------------
.text:0000000000006483                 align 10h
.text:0000000000006490
.text:0000000000006490 ; =============== S U B R O U T I N E =======================================
.text:0000000000006490
.text:0000000000006490
.text:0000000000006490                 public quote
.text:0000000000006490 quote           proc near
.text:0000000000006490 ; __unwind {
.text:0000000000006490                 lea     rcx, quote_quoting_options
.text:0000000000006497                 mov     rsi, rdi
.text:000000000000649A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000064A1                 xor     edi, edi
.text:00000000000064A3                 jmp     quotearg_n_options
.text:00000000000064A3 ; } // starts at 6490
.text:00000000000064A3 quote           endp
.text:00000000000064A3
.text:00000000000064A3 ; ---------------------------------------------------------------------------
.text:00000000000064A8                 align 10h
.text:00000000000064B0
.text:00000000000064B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064B0
.text:00000000000064B0
.text:00000000000064B0                 public strnlen1
.text:00000000000064B0 strnlen1        proc near               ; CODE XREF: docolon+2D6↑p
.text:00000000000064B0                                         ; eval6+4E1↑p ...
.text:00000000000064B0 ; __unwind {
.text:00000000000064B0                 push    rbp
.text:00000000000064B1                 push    rbx
.text:00000000000064B2                 mov     rdx, rsi        ; n
.text:00000000000064B5                 mov     rbx, rsi
.text:00000000000064B8                 xor     esi, esi        ; c
.text:00000000000064BA                 mov     rbp, rdi
.text:00000000000064BD                 sub     rsp, 8
.text:00000000000064C1                 call    _memchr
.text:00000000000064C6                 mov     rdx, rax
.text:00000000000064C9                 sub     rdx, rbp
.text:00000000000064CC                 add     rdx, 1
.text:00000000000064D0                 test    rax, rax
.text:00000000000064D3                 mov     rax, rbx
.text:00000000000064D6                 cmovnz  rax, rdx
.text:00000000000064DA                 add     rsp, 8
.text:00000000000064DE                 pop     rbx
.text:00000000000064DF                 pop     rbp
.text:00000000000064E0                 retn
.text:00000000000064E0 ; } // starts at 64B0
.text:00000000000064E0 strnlen1        endp
.text:00000000000064E0
.text:00000000000064E0 ; ---------------------------------------------------------------------------
.text:00000000000064E1                 align 10h
.text:00000000000064F0
.text:00000000000064F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000064F0
.text:00000000000064F0
.text:00000000000064F0                 public strintcmp
.text:00000000000064F0 strintcmp       proc near               ; CODE XREF: eval2:loc_3CA0↑p
.text:00000000000064F0 ; __unwind {
.text:00000000000064F0                 movzx   r8d, byte ptr [rdi]
.text:00000000000064F4                 movzx   edx, byte ptr [rsi]
.text:00000000000064F7                 cmp     r8b, 2Dh ; '-'
.text:00000000000064FB                 jz      loc_65A0
.text:0000000000006501                 cmp     dl, 2Dh ; '-'
.text:0000000000006504                 jz      loc_65E8
.text:000000000000650A                 nop     word ptr [rax+rax+00h]
.text:0000000000006510
.text:0000000000006510 loc_6510:                               ; CODE XREF: strintcmp+1C0↓j
.text:0000000000006510                 cmp     r8b, 30h ; '0'
.text:0000000000006514                 jz      loc_66A8
.text:000000000000651A
.text:000000000000651A loc_651A:                               ; CODE XREF: strintcmp+1AF↓j
.text:000000000000651A                 cmp     dl, 30h ; '0'
.text:000000000000651D                 jz      loc_6698
.text:0000000000006523                 movzx   eax, dl
.text:0000000000006526                 cmp     dl, r8b
.text:0000000000006529                 lea     ecx, [rax-30h]
.text:000000000000652C                 jnz     loc_66C8
.text:0000000000006532                 cmp     ecx, 9
.text:0000000000006535                 ja      loc_6760
.text:000000000000653B
.text:000000000000653B loc_653B:                               ; CODE XREF: strintcmp+6B↓j
.text:000000000000653B                 add     rdi, 1
.text:000000000000653F                 add     rsi, 1
.text:0000000000006543                 movzx   eax, byte ptr [rsi]
.text:0000000000006546                 movzx   r8d, byte ptr [rdi]
.text:000000000000654A                 mov     edx, eax
.text:000000000000654C                 lea     ecx, [rax-30h]
.text:000000000000654F                 cmp     r8b, al
.text:0000000000006552                 jnz     loc_66C8
.text:0000000000006558                 cmp     ecx, 9
.text:000000000000655B                 jbe     short loc_653B
.text:000000000000655D                 movzx   edx, r8b
.text:0000000000006561
.text:0000000000006561 loc_6561:                               ; CODE XREF: strintcmp+1E2↓j
.text:0000000000006561                 xor     r9d, r9d
.text:0000000000006564                 cmp     ecx, 9
.text:0000000000006567                 ja      loc_6760
.text:000000000000656D                 nop     dword ptr [rax]
.text:0000000000006570
.text:0000000000006570 loc_6570:                               ; CODE XREF: strintcmp+205↓j
.text:0000000000006570                 xor     ecx, ecx
.text:0000000000006572                 nop     word ptr [rax+rax+00h]
.text:0000000000006578
.text:0000000000006578 loc_6578:                               ; CODE XREF: strintcmp+97↓j
.text:0000000000006578                 movzx   eax, byte ptr [rsi+rcx+1]
.text:000000000000657D                 add     rcx, 1
.text:0000000000006581                 sub     eax, 30h ; '0'
.text:0000000000006584                 cmp     eax, 9
.text:0000000000006587                 jbe     short loc_6578
.text:0000000000006589                 cmp     r9, rcx
.text:000000000000658C                 jz      loc_6763
.text:0000000000006592                 sbb     eax, eax
.text:0000000000006594                 or      eax, 1
.text:0000000000006597                 retn
.text:0000000000006597 ; ---------------------------------------------------------------------------
.text:0000000000006598                 align 20h
.text:00000000000065A0
.text:00000000000065A0 loc_65A0:                               ; CODE XREF: strintcmp+B↑j
.text:00000000000065A0                                         ; strintcmp+BA↓j
.text:00000000000065A0                 add     rdi, 1
.text:00000000000065A4                 movzx   ecx, byte ptr [rdi]
.text:00000000000065A7                 cmp     cl, 30h ; '0'
.text:00000000000065AA                 jz      short loc_65A0
.text:00000000000065AC                 movzx   eax, cl
.text:00000000000065AF                 cmp     dl, 2Dh ; '-'
.text:00000000000065B2                 lea     r8d, [rax-30h]
.text:00000000000065B6                 jz      short loc_6620
.text:00000000000065B8                 cmp     r8d, 9
.text:00000000000065BC                 jbe     loc_678E
.text:00000000000065C2                 nop     word ptr [rax+rax+00h]
.text:00000000000065C8
.text:00000000000065C8 loc_65C8:                               ; CODE XREF: strintcmp+1CF↓j
.text:00000000000065C8                 cmp     dl, 30h ; '0'
.text:00000000000065CB                 jz      loc_66B8
.text:00000000000065D1                 sub     edx, 30h ; '0'
.text:00000000000065D4                 xor     r9d, r9d
.text:00000000000065D7                 cmp     edx, 9
.text:00000000000065DA                 setbe   r9b
.text:00000000000065DE                 mov     eax, r9d
.text:00000000000065E1                 neg     eax
.text:00000000000065E3                 retn
.text:00000000000065E3 ; ---------------------------------------------------------------------------
.text:00000000000065E4                 align 8
.text:00000000000065E8
.text:00000000000065E8 loc_65E8:                               ; CODE XREF: strintcmp+14↑j
.text:00000000000065E8                                         ; strintcmp+101↓j
.text:00000000000065E8                 add     rsi, 1
.text:00000000000065EC                 movzx   eax, byte ptr [rsi]
.text:00000000000065EF                 cmp     al, 30h ; '0'
.text:00000000000065F1                 jz      short loc_65E8
.text:00000000000065F3                 lea     edx, [rax-30h]
.text:00000000000065F6                 mov     eax, 1
.text:00000000000065FB                 cmp     edx, 9
.text:00000000000065FE                 jbe     locret_6703
.text:0000000000006604
.text:0000000000006604 loc_6604:                               ; CODE XREF: strintcmp+220↓j
.text:0000000000006604                 cmp     r8b, 30h ; '0'
.text:0000000000006608                 jz      loc_6708
.text:000000000000660E                 sub     r8d, 30h ; '0'
.text:0000000000006612                 xor     eax, eax
.text:0000000000006614                 cmp     r8d, 9
.text:0000000000006618                 setbe   al
.text:000000000000661B                 retn
.text:000000000000661B ; ---------------------------------------------------------------------------
.text:000000000000661C                 align 20h
.text:0000000000006620
.text:0000000000006620 loc_6620:                               ; CODE XREF: strintcmp+C6↑j
.text:0000000000006620                                         ; strintcmp+13C↓j
.text:0000000000006620                 add     rsi, 1
.text:0000000000006624                 movzx   r9d, byte ptr [rsi]
.text:0000000000006628                 cmp     r9b, 30h ; '0'
.text:000000000000662C                 jz      short loc_6620
.text:000000000000662E                 cmp     cl, r9b
.text:0000000000006631                 jnz     loc_6774
.text:0000000000006637                 cmp     r8d, 9
.text:000000000000663B                 lea     edx, [rax-30h]
.text:000000000000663E                 ja      short loc_6661
.text:0000000000006640
.text:0000000000006640 loc_6640:                               ; CODE XREF: strintcmp+16F↓j
.text:0000000000006640                 add     rdi, 1
.text:0000000000006644                 add     rsi, 1
.text:0000000000006648                 movzx   eax, byte ptr [rsi]
.text:000000000000664B                 movzx   ecx, byte ptr [rdi]
.text:000000000000664E                 mov     r9d, eax
.text:0000000000006651                 lea     edx, [rax-30h]
.text:0000000000006654                 cmp     cl, al
.text:0000000000006656                 jnz     loc_6718
.text:000000000000665C                 cmp     edx, 9
.text:000000000000665F                 jbe     short loc_6640
.text:0000000000006661
.text:0000000000006661 loc_6661:                               ; CODE XREF: strintcmp+14E↑j
.text:0000000000006661                                         ; strintcmp+234↓j
.text:0000000000006661                 xor     r10d, r10d
.text:0000000000006664                 cmp     edx, 9
.text:0000000000006667                 ja      loc_6760
.text:000000000000666D
.text:000000000000666D loc_666D:                               ; CODE XREF: strintcmp+255↓j
.text:000000000000666D                 xor     edx, edx
.text:000000000000666F                 nop
.text:0000000000006670
.text:0000000000006670 loc_6670:                               ; CODE XREF: strintcmp+18F↓j
.text:0000000000006670                 movzx   eax, byte ptr [rsi+rdx+1]
.text:0000000000006675                 add     rdx, 1
.text:0000000000006679                 sub     eax, 30h ; '0'
.text:000000000000667C                 cmp     eax, 9
.text:000000000000667F                 jbe     short loc_6670
.text:0000000000006681                 cmp     r10, rdx
.text:0000000000006684                 jz      loc_677D
.text:000000000000668A                 sbb     eax, eax
.text:000000000000668C                 and     eax, 2
.text:000000000000668F                 sub     eax, 1
.text:0000000000006692                 retn
.text:0000000000006692 ; ---------------------------------------------------------------------------
.text:0000000000006693                 align 8
.text:0000000000006698
.text:0000000000006698 loc_6698:                               ; CODE XREF: strintcmp+2D↑j
.text:0000000000006698                 add     rsi, 1
.text:000000000000669C                 movzx   edx, byte ptr [rsi]
.text:000000000000669F                 jmp     loc_651A
.text:000000000000669F ; ---------------------------------------------------------------------------
.text:00000000000066A4                 align 8
.text:00000000000066A8
.text:00000000000066A8 loc_66A8:                               ; CODE XREF: strintcmp+24↑j
.text:00000000000066A8                 add     rdi, 1
.text:00000000000066AC                 movzx   r8d, byte ptr [rdi]
.text:00000000000066B0                 jmp     loc_6510
.text:00000000000066B0 ; ---------------------------------------------------------------------------
.text:00000000000066B5                 align 8
.text:00000000000066B8
.text:00000000000066B8 loc_66B8:                               ; CODE XREF: strintcmp+DB↑j
.text:00000000000066B8                 add     rsi, 1
.text:00000000000066BC                 movzx   edx, byte ptr [rsi]
.text:00000000000066BF                 jmp     loc_65C8
.text:00000000000066BF ; ---------------------------------------------------------------------------
.text:00000000000066C4                 align 8
.text:00000000000066C8
.text:00000000000066C8 loc_66C8:                               ; CODE XREF: strintcmp+3C↑j
.text:00000000000066C8                                         ; strintcmp+62↑j
.text:00000000000066C8                 movzx   eax, r8b
.text:00000000000066CC                 sub     eax, 30h ; '0'
.text:00000000000066CF                 cmp     eax, 9
.text:00000000000066D2                 ja      loc_6561
.text:00000000000066D8                 xor     r9d, r9d
.text:00000000000066DB                 nop     dword ptr [rax+rax+00h]
.text:00000000000066E0
.text:00000000000066E0 loc_66E0:                               ; CODE XREF: strintcmp+200↓j
.text:00000000000066E0                 movzx   eax, byte ptr [rdi+r9+1]
.text:00000000000066E6                 add     r9, 1
.text:00000000000066EA                 sub     eax, 30h ; '0'
.text:00000000000066ED                 cmp     eax, 9
.text:00000000000066F0                 jbe     short loc_66E0
.text:00000000000066F2                 cmp     ecx, 9
.text:00000000000066F5                 jbe     loc_6570
.text:00000000000066FB                 xor     eax, eax
.text:00000000000066FD                 test    r9, r9
.text:0000000000006700                 setnz   al
.text:0000000000006703
.text:0000000000006703 locret_6703:                            ; CODE XREF: strintcmp+10E↑j
.text:0000000000006703                                         ; strintcmp+278↓j ...
.text:0000000000006703                 rep retn
.text:0000000000006703 ; ---------------------------------------------------------------------------
.text:0000000000006705                 align 8
.text:0000000000006708
.text:0000000000006708 loc_6708:                               ; CODE XREF: strintcmp+118↑j
.text:0000000000006708                 add     rdi, 1
.text:000000000000670C                 movzx   r8d, byte ptr [rdi]
.text:0000000000006710                 jmp     loc_6604
.text:0000000000006710 ; ---------------------------------------------------------------------------
.text:0000000000006715                 align 8
.text:0000000000006718
.text:0000000000006718 loc_6718:                               ; CODE XREF: strintcmp+166↑j
.text:0000000000006718                 movzx   r8d, cl
.text:000000000000671C                 sub     r8d, 30h ; '0'
.text:0000000000006720
.text:0000000000006720 loc_6720:                               ; CODE XREF: strintcmp+28B↓j
.text:0000000000006720                 cmp     r8d, 9
.text:0000000000006724                 ja      loc_6661
.text:000000000000672A                 xor     r10d, r10d
.text:000000000000672D                 nop     dword ptr [rax]
.text:0000000000006730
.text:0000000000006730 loc_6730:                               ; CODE XREF: strintcmp+250↓j
.text:0000000000006730                 movzx   eax, byte ptr [rdi+r10+1]
.text:0000000000006736                 add     r10, 1
.text:000000000000673A                 sub     eax, 30h ; '0'
.text:000000000000673D                 cmp     eax, 9
.text:0000000000006740                 jbe     short loc_6730
.text:0000000000006742                 cmp     edx, 9
.text:0000000000006745                 jbe     loc_666D
.text:000000000000674B                 xor     eax, eax
.text:000000000000674D                 test    r10, r10
.text:0000000000006750                 setnz   al
.text:0000000000006753                 neg     eax
.text:0000000000006755                 retn
.text:0000000000006755 ; ---------------------------------------------------------------------------
.text:0000000000006756                 align 20h
.text:0000000000006760
.text:0000000000006760 loc_6760:                               ; CODE XREF: strintcmp+45↑j
.text:0000000000006760                                         ; strintcmp+77↑j ...
.text:0000000000006760                 xor     eax, eax
.text:0000000000006762                 retn
.text:0000000000006763 ; ---------------------------------------------------------------------------
.text:0000000000006763
.text:0000000000006763 loc_6763:                               ; CODE XREF: strintcmp+9C↑j
.text:0000000000006763                 xor     eax, eax
.text:0000000000006765                 test    r9, r9
.text:0000000000006768                 jz      short locret_6703
.text:000000000000676A                 movzx   r9d, r8b
.text:000000000000676E                 mov     eax, r9d
.text:0000000000006771                 sub     eax, edx
.text:0000000000006773                 retn
.text:0000000000006774 ; ---------------------------------------------------------------------------
.text:0000000000006774
.text:0000000000006774 loc_6774:                               ; CODE XREF: strintcmp+141↑j
.text:0000000000006774                 movzx   eax, r9b
.text:0000000000006778                 lea     edx, [rax-30h]
.text:000000000000677B                 jmp     short loc_6720
.text:000000000000677D ; ---------------------------------------------------------------------------
.text:000000000000677D
.text:000000000000677D loc_677D:                               ; CODE XREF: strintcmp+194↑j
.text:000000000000677D                 xor     eax, eax
.text:000000000000677F                 test    r10, r10
.text:0000000000006782                 jz      locret_6703
.text:0000000000006788                 mov     eax, r9d
.text:000000000000678B                 sub     eax, ecx
.text:000000000000678D                 retn
.text:000000000000678E ; ---------------------------------------------------------------------------
.text:000000000000678E
.text:000000000000678E loc_678E:                               ; CODE XREF: strintcmp+CC↑j
.text:000000000000678E                 mov     eax, 0FFFFFFFFh
.text:0000000000006793                 retn
.text:0000000000006793 ; } // starts at 64F0
.text:0000000000006793 strintcmp       endp
.text:0000000000006793
.text:0000000000006793 ; ---------------------------------------------------------------------------
.text:0000000000006794                 align 20h
.text:00000000000067A0
.text:00000000000067A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000067A0
.text:00000000000067A0
.text:00000000000067A0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:00000000000067A0                 public version_etc_arn
.text:00000000000067A0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_6BDB↓j
.text:00000000000067A0                                         ; version_etc_va:loc_6C2B↓p ...
.text:00000000000067A0
.text:00000000000067A0 var_58          = qword ptr -58h
.text:00000000000067A0 var_50          = qword ptr -50h
.text:00000000000067A0 var_48          = qword ptr -48h
.text:00000000000067A0 var_40          = qword ptr -40h
.text:00000000000067A0
.text:00000000000067A0 ; __unwind {
.text:00000000000067A0                 push    r15
.text:00000000000067A2                 push    r14
.text:00000000000067A4                 push    r13
.text:00000000000067A6                 push    r12
.text:00000000000067A8                 mov     r12, r9
.text:00000000000067AB                 push    rbp
.text:00000000000067AC                 push    rbx
.text:00000000000067AD                 mov     rbp, rdi
.text:00000000000067B0                 mov     rbx, r8
.text:00000000000067B3                 sub     rsp, 28h
.text:00000000000067B7                 test    rsi, rsi
.text:00000000000067BA                 jz      loc_68D8
.text:00000000000067C0                 mov     r8, rdx
.text:00000000000067C3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:00000000000067CA                 mov     r9, rcx
.text:00000000000067CD                 xor     eax, eax
.text:00000000000067CF                 mov     rcx, rsi
.text:00000000000067D2                 mov     esi, 1
.text:00000000000067D7                 call    ___fprintf_chk
.text:00000000000067DC
.text:00000000000067DC loc_67DC:                               ; CODE XREF: version_etc_arn+151↓j
.text:00000000000067DC                 lea     rsi, aC         ; "(C)"
.text:00000000000067E3                 xor     edi, edi        ; domainname
.text:00000000000067E5                 mov     edx, 5          ; category
.text:00000000000067EA                 call    _dcgettext
.text:00000000000067EF                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:00000000000067F6                 mov     rcx, rax
.text:00000000000067F9                 mov     r8d, 7E3h
.text:00000000000067FF                 mov     esi, 1
.text:0000000000006804                 mov     rdi, rbp
.text:0000000000006807                 xor     eax, eax
.text:0000000000006809                 call    ___fprintf_chk
.text:000000000000680E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000006815                 xor     edi, edi        ; domainname
.text:0000000000006817                 mov     edx, 5          ; category
.text:000000000000681C                 call    _dcgettext
.text:0000000000006821                 mov     rsi, rbp        ; stream
.text:0000000000006824                 mov     rdi, rax        ; s
.text:0000000000006827                 call    _fputs_unlocked
.text:000000000000682C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000006830                 ja      def_6844        ; jumptable 0000000000006844 default case
.text:0000000000006836                 lea     rdx, jpt_6844
.text:000000000000683D                 movsxd  rax, ds:(jpt_6844 - 16A04h)[rdx+r12*4]
.text:0000000000006841                 add     rax, rdx
.text:0000000000006844                 jmp     rax             ; switch jump
.text:0000000000006844 ; ---------------------------------------------------------------------------
.text:0000000000006846                 align 10h
.text:0000000000006850
.text:0000000000006850 loc_6850:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006850                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006850                 mov     r9, [rbx+38h]   ; jumptable 0000000000006844 case 8
.text:0000000000006854                 mov     rax, [rbx+10h]
.text:0000000000006858                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000685F                 mov     r8, [rbx+8]
.text:0000000000006863                 mov     edx, 5          ; category
.text:0000000000006868                 xor     edi, edi        ; domainname
.text:000000000000686A                 mov     r13, [rbx+30h]
.text:000000000000686E                 mov     r12, [rbx+28h]
.text:0000000000006872                 mov     [rsp+58h+var_48], r9
.text:0000000000006877                 mov     r15, [rbx+20h]
.text:000000000000687B                 mov     r14, [rbx+18h]
.text:000000000000687F                 mov     [rsp+58h+var_58], rax
.text:0000000000006883                 mov     [rsp+58h+var_50], r8
.text:0000000000006888                 mov     rbx, [rbx]
.text:000000000000688B                 call    _dcgettext
.text:0000000000006890                 sub     rsp, 8
.text:0000000000006894
.text:0000000000006894 loc_6894:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000006894                 mov     r9, [rsp+60h+var_48]
.text:0000000000006899                 mov     rdx, rax
.text:000000000000689C                 mov     rcx, rbx
.text:000000000000689F                 mov     esi, 1
.text:00000000000068A4                 mov     rdi, rbp
.text:00000000000068A7                 xor     eax, eax
.text:00000000000068A9                 push    r9
.text:00000000000068AB                 push    r13
.text:00000000000068AD                 push    r12
.text:00000000000068AF                 push    r15
.text:00000000000068B1                 push    r14
.text:00000000000068B3                 mov     r9, [rsp+88h+var_58]
.text:00000000000068B8                 mov     r8, [rsp+88h+var_50]
.text:00000000000068BD                 call    ___fprintf_chk
.text:00000000000068C2                 add     rsp, 30h
.text:00000000000068C6
.text:00000000000068C6 loc_68C6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000068C6                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:00000000000068C6                 add     rsp, 28h        ; jumptable 0000000000006844 case 0
.text:00000000000068CA                 pop     rbx
.text:00000000000068CB                 pop     rbp
.text:00000000000068CC                 pop     r12
.text:00000000000068CE                 pop     r13
.text:00000000000068D0                 pop     r14
.text:00000000000068D2                 pop     r15
.text:00000000000068D4                 retn
.text:00000000000068D4 ; ---------------------------------------------------------------------------
.text:00000000000068D5                 align 8
.text:00000000000068D8
.text:00000000000068D8 loc_68D8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:00000000000068D8                 mov     r8, rcx
.text:00000000000068DB                 mov     rcx, rdx
.text:00000000000068DE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:00000000000068E5                 mov     esi, 1
.text:00000000000068EA                 xor     eax, eax
.text:00000000000068EC                 call    ___fprintf_chk
.text:00000000000068F1                 jmp     loc_67DC
.text:00000000000068F1 ; ---------------------------------------------------------------------------
.text:00000000000068F6                 align 20h
.text:0000000000006900
.text:0000000000006900 loc_6900:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006900                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006900                 mov     r10, [rbx+40h]  ; jumptable 0000000000006844 case 9
.text:0000000000006904                 mov     r9, [rbx+38h]
.text:0000000000006908                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000690F                 mov     rax, [rbx+10h]
.text:0000000000006913                 mov     r8, [rbx+8]
.text:0000000000006917                 mov     edx, 5          ; category
.text:000000000000691C                 mov     r13, [rbx+30h]
.text:0000000000006920                 mov     r12, [rbx+28h]
.text:0000000000006924                 mov     r15, [rbx+20h]
.text:0000000000006928                 mov     r14, [rbx+18h]
.text:000000000000692C                 mov     rbx, [rbx]
.text:000000000000692F                 mov     [rsp+58h+var_40], r10
.text:0000000000006934                 mov     [rsp+58h+var_48], r9
.text:0000000000006939                 mov     [rsp+58h+var_58], rax
.text:000000000000693D                 mov     [rsp+58h+var_50], r8
.text:0000000000006942
.text:0000000000006942 loc_6942:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000006942                 xor     edi, edi        ; domainname
.text:0000000000006944                 call    _dcgettext
.text:0000000000006949                 mov     r10, [rsp+58h+var_40]
.text:000000000000694E                 push    r10
.text:0000000000006950                 jmp     loc_6894
.text:0000000000006950 ; ---------------------------------------------------------------------------
.text:0000000000006955                 align 8
.text:0000000000006958
.text:0000000000006958 loc_6958:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006958                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006958                 mov     rbx, [rbx]      ; jumptable 0000000000006844 case 1
.text:000000000000695B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000006962                 mov     edx, 5          ; category
.text:0000000000006967                 xor     edi, edi        ; domainname
.text:0000000000006969                 call    _dcgettext
.text:000000000000696E                 add     rsp, 28h
.text:0000000000006972                 mov     rcx, rbx
.text:0000000000006975                 mov     rdi, rbp
.text:0000000000006978                 pop     rbx
.text:0000000000006979                 pop     rbp
.text:000000000000697A                 pop     r12
.text:000000000000697C                 pop     r13
.text:000000000000697E                 pop     r14
.text:0000000000006980                 pop     r15
.text:0000000000006982                 mov     rdx, rax
.text:0000000000006985                 mov     esi, 1
.text:000000000000698A                 xor     eax, eax
.text:000000000000698C                 jmp     ___fprintf_chk
.text:000000000000698C ; ---------------------------------------------------------------------------
.text:0000000000006991                 align 8
.text:0000000000006998
.text:0000000000006998 loc_6998:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006998                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006998                 mov     r12, [rbx+8]    ; jumptable 0000000000006844 case 2
.text:000000000000699C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000069A3                 mov     rbx, [rbx]
.text:00000000000069A6                 mov     edx, 5          ; category
.text:00000000000069AB                 xor     edi, edi        ; domainname
.text:00000000000069AD                 call    _dcgettext
.text:00000000000069B2                 add     rsp, 28h
.text:00000000000069B6                 mov     r8, r12
.text:00000000000069B9                 mov     rcx, rbx
.text:00000000000069BC                 mov     rdi, rbp
.text:00000000000069BF                 mov     rdx, rax
.text:00000000000069C2                 mov     esi, 1
.text:00000000000069C7                 pop     rbx
.text:00000000000069C8                 pop     rbp
.text:00000000000069C9                 pop     r12
.text:00000000000069CB                 pop     r13
.text:00000000000069CD                 pop     r14
.text:00000000000069CF                 pop     r15
.text:00000000000069D1                 xor     eax, eax
.text:00000000000069D3                 jmp     ___fprintf_chk
.text:00000000000069D3 ; ---------------------------------------------------------------------------
.text:00000000000069D8                 align 20h
.text:00000000000069E0
.text:00000000000069E0 loc_69E0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000069E0                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:00000000000069E0                 mov     r13, [rbx+10h]  ; jumptable 0000000000006844 case 3
.text:00000000000069E4                 mov     r12, [rbx+8]
.text:00000000000069E8                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:00000000000069EF                 mov     rbx, [rbx]
.text:00000000000069F2                 mov     edx, 5          ; category
.text:00000000000069F7                 xor     edi, edi        ; domainname
.text:00000000000069F9                 call    _dcgettext
.text:00000000000069FE                 add     rsp, 28h
.text:0000000000006A02                 mov     r9, r13
.text:0000000000006A05                 mov     r8, r12
.text:0000000000006A08                 mov     rcx, rbx
.text:0000000000006A0B                 mov     rdi, rbp
.text:0000000000006A0E                 mov     rdx, rax
.text:0000000000006A11                 pop     rbx
.text:0000000000006A12                 pop     rbp
.text:0000000000006A13                 pop     r12
.text:0000000000006A15                 pop     r13
.text:0000000000006A17                 pop     r14
.text:0000000000006A19                 pop     r15
.text:0000000000006A1B                 mov     esi, 1
.text:0000000000006A20                 xor     eax, eax
.text:0000000000006A22                 jmp     ___fprintf_chk
.text:0000000000006A22 ; ---------------------------------------------------------------------------
.text:0000000000006A27                 align 10h
.text:0000000000006A30
.text:0000000000006A30 loc_6A30:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006A30                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006A30                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000006844 case 4
.text:0000000000006A37                 mov     edx, 5          ; category
.text:0000000000006A3C                 xor     edi, edi        ; domainname
.text:0000000000006A3E                 mov     r14, [rbx+18h]
.text:0000000000006A42                 mov     r13, [rbx+10h]
.text:0000000000006A46                 mov     r12, [rbx+8]
.text:0000000000006A4A                 mov     rbx, [rbx]
.text:0000000000006A4D                 call    _dcgettext
.text:0000000000006A52                 sub     rsp, 8
.text:0000000000006A56
.text:0000000000006A56 loc_6A56:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000006A56                 push    r14
.text:0000000000006A58                 mov     rdx, rax
.text:0000000000006A5B                 mov     r9, r13
.text:0000000000006A5E                 mov     r8, r12
.text:0000000000006A61                 mov     rcx, rbx
.text:0000000000006A64                 mov     rdi, rbp
.text:0000000000006A67                 mov     esi, 1
.text:0000000000006A6C                 xor     eax, eax
.text:0000000000006A6E                 call    ___fprintf_chk
.text:0000000000006A73                 pop     rax
.text:0000000000006A74                 pop     rdx
.text:0000000000006A75                 add     rsp, 28h
.text:0000000000006A79                 pop     rbx
.text:0000000000006A7A                 pop     rbp
.text:0000000000006A7B                 pop     r12
.text:0000000000006A7D                 pop     r13
.text:0000000000006A7F                 pop     r14
.text:0000000000006A81                 pop     r15
.text:0000000000006A83                 retn
.text:0000000000006A83 ; ---------------------------------------------------------------------------
.text:0000000000006A84                 align 8
.text:0000000000006A88
.text:0000000000006A88 loc_6A88:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006A88                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006A88                 mov     r15, [rbx+20h]  ; jumptable 0000000000006844 case 5
.text:0000000000006A8C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000006A93                 mov     edx, 5          ; category
.text:0000000000006A98                 xor     edi, edi        ; domainname
.text:0000000000006A9A                 mov     r14, [rbx+18h]
.text:0000000000006A9E                 mov     r13, [rbx+10h]
.text:0000000000006AA2                 mov     r12, [rbx+8]
.text:0000000000006AA6                 mov     rbx, [rbx]
.text:0000000000006AA9                 call    _dcgettext
.text:0000000000006AAE                 push    r15
.text:0000000000006AB0                 jmp     short loc_6A56
.text:0000000000006AB0 ; ---------------------------------------------------------------------------
.text:0000000000006AB2                 align 8
.text:0000000000006AB8
.text:0000000000006AB8 loc_6AB8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006AB8                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006AB8                 mov     r8, [rbx+8]     ; jumptable 0000000000006844 case 6
.text:0000000000006ABC                 mov     r12, [rbx+28h]
.text:0000000000006AC0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000006AC7                 mov     r15, [rbx+20h]
.text:0000000000006ACB                 mov     r14, [rbx+18h]
.text:0000000000006ACF                 mov     edx, 5          ; category
.text:0000000000006AD4                 mov     r13, [rbx+10h]
.text:0000000000006AD8                 xor     edi, edi        ; domainname
.text:0000000000006ADA                 mov     rbx, [rbx]
.text:0000000000006ADD                 mov     [rsp+58h+var_58], r8
.text:0000000000006AE1                 call    _dcgettext
.text:0000000000006AE6                 sub     rsp, 8
.text:0000000000006AEA                 mov     r9, r13
.text:0000000000006AED                 push    r12
.text:0000000000006AEF                 push    r15
.text:0000000000006AF1                 push    r14
.text:0000000000006AF3
.text:0000000000006AF3 loc_6AF3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000006AF3                 mov     r8, [rsp+78h+var_58]
.text:0000000000006AF8                 mov     rcx, rbx
.text:0000000000006AFB                 mov     rdx, rax
.text:0000000000006AFE                 mov     rdi, rbp
.text:0000000000006B01                 mov     esi, 1
.text:0000000000006B06                 xor     eax, eax
.text:0000000000006B08                 call    ___fprintf_chk
.text:0000000000006B0D                 add     rsp, 20h
.text:0000000000006B11                 add     rsp, 28h
.text:0000000000006B15                 pop     rbx
.text:0000000000006B16                 pop     rbp
.text:0000000000006B17                 pop     r12
.text:0000000000006B19                 pop     r13
.text:0000000000006B1B                 pop     r14
.text:0000000000006B1D                 pop     r15
.text:0000000000006B1F                 retn
.text:0000000000006B20 ; ---------------------------------------------------------------------------
.text:0000000000006B20
.text:0000000000006B20 loc_6B20:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000006B20                                         ; DATA XREF: .rodata:jpt_6844↓o
.text:0000000000006B20                 mov     r9, [rbx+10h]   ; jumptable 0000000000006844 case 7
.text:0000000000006B24                 mov     r13, [rbx+30h]
.text:0000000000006B28                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000006B2F                 mov     r12, [rbx+28h]
.text:0000000000006B33                 mov     r15, [rbx+20h]
.text:0000000000006B37                 mov     edx, 5          ; category
.text:0000000000006B3C                 mov     r14, [rbx+18h]
.text:0000000000006B40                 mov     r8, [rbx+8]
.text:0000000000006B44                 xor     edi, edi        ; domainname
.text:0000000000006B46                 mov     [rsp+58h+var_50], r9
.text:0000000000006B4B                 mov     rbx, [rbx]
.text:0000000000006B4E                 mov     [rsp+58h+var_58], r8
.text:0000000000006B52                 call    _dcgettext
.text:0000000000006B57                 push    r13
.text:0000000000006B59                 push    r12
.text:0000000000006B5B                 push    r15
.text:0000000000006B5D                 push    r14
.text:0000000000006B5F                 mov     r9, [rsp+78h+var_50]
.text:0000000000006B64                 jmp     short loc_6AF3
.text:0000000000006B64 ; ---------------------------------------------------------------------------
.text:0000000000006B66                 align 10h
.text:0000000000006B70
.text:0000000000006B70 def_6844:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000006B70                 mov     r10, [rbx+40h]  ; jumptable 0000000000006844 default case
.text:0000000000006B74                 mov     r9, [rbx+38h]
.text:0000000000006B78                 mov     edx, 5
.text:0000000000006B7D                 mov     rax, [rbx+10h]
.text:0000000000006B81                 mov     r8, [rbx+8]
.text:0000000000006B85                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000006B8C                 mov     r13, [rbx+30h]
.text:0000000000006B90                 mov     r12, [rbx+28h]
.text:0000000000006B94                 mov     r15, [rbx+20h]
.text:0000000000006B98                 mov     r14, [rbx+18h]
.text:0000000000006B9C                 mov     [rsp+58h+var_40], r10
.text:0000000000006BA1                 mov     [rsp+58h+var_48], r9
.text:0000000000006BA6                 mov     [rsp+58h+var_58], rax
.text:0000000000006BAA                 mov     [rsp+58h+var_50], r8
.text:0000000000006BAF                 mov     rbx, [rbx]
.text:0000000000006BB2                 jmp     loc_6942
.text:0000000000006BB2 ; } // starts at 67A0
.text:0000000000006BB2 version_etc_arn endp
.text:0000000000006BB2
.text:0000000000006BB2 ; ---------------------------------------------------------------------------
.text:0000000000006BB7                 align 20h
.text:0000000000006BC0
.text:0000000000006BC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BC0
.text:0000000000006BC0 ; Attributes: info_from_lumina
.text:0000000000006BC0
.text:0000000000006BC0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000006BC0                 public version_etc_ar
.text:0000000000006BC0 version_etc_ar  proc near
.text:0000000000006BC0 ; __unwind {
.text:0000000000006BC0                 xor     r9d, r9d
.text:0000000000006BC3                 cmp     qword ptr [r8], 0
.text:0000000000006BC7                 jz      short loc_6BDB
.text:0000000000006BC9                 nop     dword ptr [rax+00000000h]
.text:0000000000006BD0
.text:0000000000006BD0 loc_6BD0:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000006BD0                 add     r9, 1
.text:0000000000006BD4                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000006BD9                 jnz     short loc_6BD0
.text:0000000000006BDB
.text:0000000000006BDB loc_6BDB:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000006BDB                 jmp     version_etc_arn
.text:0000000000006BDB ; } // starts at 6BC0
.text:0000000000006BDB version_etc_ar  endp
.text:0000000000006BDB
.text:0000000000006BE0
.text:0000000000006BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006BE0
.text:0000000000006BE0 ; Attributes: info_from_lumina
.text:0000000000006BE0
.text:0000000000006BE0 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000006BE0                 public version_etc_va
.text:0000000000006BE0 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000006BE0                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000006BE0
.text:0000000000006BE0 authtab         = qword ptr -68h
.text:0000000000006BE0 var_10          = qword ptr -10h
.text:0000000000006BE0
.text:0000000000006BE0 ; __unwind {
.text:0000000000006BE0                 sub     rsp, 68h
.text:0000000000006BE4                 mov     r10, r8
.text:0000000000006BE7                 xor     r9d, r9d
.text:0000000000006BEA                 mov     rax, fs:28h
.text:0000000000006BF3                 mov     [rsp+68h+var_10], rax
.text:0000000000006BF8                 xor     eax, eax
.text:0000000000006BFA                 mov     r8, rsp
.text:0000000000006BFD                 nop     dword ptr [rax]
.text:0000000000006C00
.text:0000000000006C00 loc_6C00:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000006C00                 mov     eax, [r10]
.text:0000000000006C03                 cmp     eax, 2Fh ; '/'
.text:0000000000006C06                 ja      short loc_6C4A
.text:0000000000006C08                 mov     r11d, eax
.text:0000000000006C0B                 add     r11, [r10+10h]
.text:0000000000006C0F                 add     eax, 8
.text:0000000000006C12                 mov     [r10], eax
.text:0000000000006C15
.text:0000000000006C15 loc_6C15:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000006C15                 mov     rax, [r11]
.text:0000000000006C18                 test    rax, rax
.text:0000000000006C1B                 mov     [r8+r9*8], rax
.text:0000000000006C1F                 jz      short loc_6C2B
.text:0000000000006C21                 add     r9, 1
.text:0000000000006C25                 cmp     r9, 0Ah
.text:0000000000006C29                 jnz     short loc_6C00
.text:0000000000006C2B
.text:0000000000006C2B loc_6C2B:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000006C2B                 call    version_etc_arn
.text:0000000000006C30                 mov     rax, [rsp+68h+var_10]
.text:0000000000006C35                 xor     rax, fs:28h
.text:0000000000006C3E                 jnz     short loc_6C45
.text:0000000000006C40                 add     rsp, 68h
.text:0000000000006C44                 retn
.text:0000000000006C45 ; ---------------------------------------------------------------------------
.text:0000000000006C45
.text:0000000000006C45 loc_6C45:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000006C45                 call    ___stack_chk_fail
.text:0000000000006C4A ; ---------------------------------------------------------------------------
.text:0000000000006C4A
.text:0000000000006C4A loc_6C4A:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000006C4A                 mov     r11, [r10+8]
.text:0000000000006C4E                 lea     rax, [r11+8]
.text:0000000000006C52                 mov     [r10+8], rax
.text:0000000000006C56                 jmp     short loc_6C15
.text:0000000000006C56 ; } // starts at 6BE0
.text:0000000000006C56 version_etc_va  endp
.text:0000000000006C56
.text:0000000000006C56 ; ---------------------------------------------------------------------------
.text:0000000000006C58                 align 20h
.text:0000000000006C60
.text:0000000000006C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006C60
.text:0000000000006C60 ; Attributes: info_from_lumina
.text:0000000000006C60
.text:0000000000006C60 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000006C60                 public version_etc
.text:0000000000006C60 version_etc     proc near
.text:0000000000006C60
.text:0000000000006C60 var_C0          = dword ptr -0C0h
.text:0000000000006C60 var_B8          = qword ptr -0B8h
.text:0000000000006C60 var_B0          = qword ptr -0B0h
.text:0000000000006C60 var_A8          = byte ptr -0A8h
.text:0000000000006C60 var_50          = qword ptr -50h
.text:0000000000006C60 var_48          = byte ptr -48h
.text:0000000000006C60 var_28          = qword ptr -28h
.text:0000000000006C60 var_20          = qword ptr -20h
.text:0000000000006C60 arg_0           = byte ptr  8
.text:0000000000006C60
.text:0000000000006C60 ; __unwind {
.text:0000000000006C60                 push    rbp
.text:0000000000006C61                 push    rbx
.text:0000000000006C62                 mov     r10d, 20h ; ' '
.text:0000000000006C68                 xor     r11d, r11d
.text:0000000000006C6B                 sub     rsp, 0B8h
.text:0000000000006C72                 mov     rax, fs:28h
.text:0000000000006C7B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000006C80                 xor     eax, eax
.text:0000000000006C82                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000006C8A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000006C92                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000006C9A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000006C9F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000006CA7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000006CAF                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000006CB4                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000006CBC                 xor     r9d, r9d
.text:0000000000006CBF                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000006CC4                 mov     rbp, rax
.text:0000000000006CC7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000006CD0
.text:0000000000006CD0 loc_6CD0:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000006CD0                 cmp     r10d, 2Fh ; '/'
.text:0000000000006CD4                 ja      short loc_6D2C
.text:0000000000006CD6                 mov     eax, r10d
.text:0000000000006CD9                 mov     r11d, 1
.text:0000000000006CDF                 add     r10d, 8
.text:0000000000006CE3                 add     rax, rbp
.text:0000000000006CE6
.text:0000000000006CE6 loc_6CE6:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000006CE6                 mov     rax, [rax]
.text:0000000000006CE9                 test    rax, rax
.text:0000000000006CEC                 mov     [r8+r9*8], rax
.text:0000000000006CF0                 jz      short loc_6CFC
.text:0000000000006CF2                 add     r9, 1
.text:0000000000006CF6                 cmp     r9, 0Ah
.text:0000000000006CFA                 jnz     short loc_6CD0
.text:0000000000006CFC
.text:0000000000006CFC loc_6CFC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000006CFC                 test    r11b, r11b
.text:0000000000006CFF                 jnz     short loc_6D25
.text:0000000000006D01
.text:0000000000006D01 loc_6D01:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000006D01                 call    version_etc_arn
.text:0000000000006D06                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000006D0B                 xor     rax, fs:28h
.text:0000000000006D14                 jnz     short loc_6D20
.text:0000000000006D16                 add     rsp, 0B8h
.text:0000000000006D1D                 pop     rbx
.text:0000000000006D1E                 pop     rbp
.text:0000000000006D1F                 retn
.text:0000000000006D20 ; ---------------------------------------------------------------------------
.text:0000000000006D20
.text:0000000000006D20 loc_6D20:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000006D20                 call    ___stack_chk_fail
.text:0000000000006D25 ; ---------------------------------------------------------------------------
.text:0000000000006D25
.text:0000000000006D25 loc_6D25:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000006D25                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000006D2A                 jmp     short loc_6D01
.text:0000000000006D2C ; ---------------------------------------------------------------------------
.text:0000000000006D2C
.text:0000000000006D2C loc_6D2C:                               ; CODE XREF: version_etc+74↑j
.text:0000000000006D2C                 mov     rax, rbx
.text:0000000000006D2F                 add     rbx, 8
.text:0000000000006D33                 jmp     short loc_6CE6
.text:0000000000006D33 ; } // starts at 6C60
.text:0000000000006D33 version_etc     endp
.text:0000000000006D33
.text:0000000000006D33 ; ---------------------------------------------------------------------------
.text:0000000000006D35                 align 20h
.text:0000000000006D40
.text:0000000000006D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000006D40
.text:0000000000006D40 ; Attributes: info_from_lumina
.text:0000000000006D40
.text:0000000000006D40 ; void __cdecl emit_bug_reporting_address()
.text:0000000000006D40                 public emit_bug_reporting_address
.text:0000000000006D40 emit_bug_reporting_address proc near
.text:0000000000006D40 ; __unwind {
.text:0000000000006D40                 push    rbx
.text:0000000000006D41                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000006D48                 mov     edx, 5          ; category
.text:0000000000006D4D                 xor     edi, edi        ; domainname
.text:0000000000006D4F                 call    _dcgettext
.text:0000000000006D54                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:0000000000006D5B                 mov     rsi, rax
.text:0000000000006D5E                 mov     edi, 1
.text:0000000000006D63                 xor     eax, eax
.text:0000000000006D65                 call    ___printf_chk
.text:0000000000006D6A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000006D71                 mov     edx, 5          ; category
.text:0000000000006D76                 xor     edi, edi        ; domainname
.text:0000000000006D78                 call    _dcgettext
.text:0000000000006D7D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000006D84                 lea     rdx, unk_1600A
.text:0000000000006D8B                 mov     rsi, rax
.text:0000000000006D8E                 mov     edi, 1
.text:0000000000006D93                 xor     eax, eax
.text:0000000000006D95                 call    ___printf_chk
.text:0000000000006D9A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000006DA1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000006DA8                 xor     edi, edi        ; domainname
.text:0000000000006DAA                 mov     edx, 5          ; category
.text:0000000000006DAF                 call    _dcgettext
.text:0000000000006DB4                 mov     rsi, rbx        ; stream
.text:0000000000006DB7                 mov     rdi, rax        ; s
.text:0000000000006DBA                 pop     rbx
.text:0000000000006DBB                 jmp     _fputs_unlocked
.text:0000000000006DBB ; } // starts at 6D40
.text:0000000000006DBB emit_bug_reporting_address endp
.text:0000000000006DBB
.text:0000000000006DC0
.text:0000000000006DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DC0
.text:0000000000006DC0
.text:0000000000006DC0                 public xmalloc
.text:0000000000006DC0 xmalloc         proc near               ; CODE XREF: str_value+E↑p
.text:0000000000006DC0                                         ; docolon+183↑p ...
.text:0000000000006DC0 ; __unwind {
.text:0000000000006DC0                 push    rbx
.text:0000000000006DC1                 mov     rbx, rdi
.text:0000000000006DC4                 call    _malloc
.text:0000000000006DC9                 test    rax, rax
.text:0000000000006DCC                 jnz     short loc_6DD3
.text:0000000000006DCE                 test    rbx, rbx
.text:0000000000006DD1                 jnz     short loc_6DD5
.text:0000000000006DD3
.text:0000000000006DD3 loc_6DD3:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000006DD3                 pop     rbx
.text:0000000000006DD4                 retn
.text:0000000000006DD5 ; ---------------------------------------------------------------------------
.text:0000000000006DD5
.text:0000000000006DD5 loc_6DD5:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000006DD5                 call    xalloc_die
.text:0000000000006DD5 ; } // starts at 6DC0
.text:0000000000006DD5 xmalloc         endp
.text:0000000000006DD5
.text:0000000000006DD5 ; ---------------------------------------------------------------------------
.text:0000000000006DDA                 align 20h
.text:0000000000006DE0
.text:0000000000006DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006DE0
.text:0000000000006DE0 ; Attributes: info_from_lumina
.text:0000000000006DE0
.text:0000000000006DE0 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000006DE0                 public xnmalloc
.text:0000000000006DE0 xnmalloc        proc near
.text:0000000000006DE0 ; __unwind {
.text:0000000000006DE0                 mov     rax, rdi
.text:0000000000006DE3                 mul     rsi
.text:0000000000006DE6                 mov     rdi, rax
.text:0000000000006DE9                 seto    al
.text:0000000000006DEC                 test    rdi, rdi
.text:0000000000006DEF                 js      short loc_6DFB
.text:0000000000006DF1                 movzx   eax, al
.text:0000000000006DF4                 test    rax, rax
.text:0000000000006DF7                 jnz     short loc_6DFB
.text:0000000000006DF9                 jmp     short xmalloc
.text:0000000000006DFB ; ---------------------------------------------------------------------------
.text:0000000000006DFB
.text:0000000000006DFB loc_6DFB:                               ; CODE XREF: xnmalloc+F↑j
.text:0000000000006DFB                                         ; xnmalloc+17↑j
.text:0000000000006DFB                 sub     rsp, 8
.text:0000000000006DFF                 call    xalloc_die
.text:0000000000006DFF ; } // starts at 6DE0
.text:0000000000006DFF xnmalloc        endp
.text:0000000000006DFF
.text:0000000000006DFF ; ---------------------------------------------------------------------------
.text:0000000000006E04                 align 10h
.text:0000000000006E10
.text:0000000000006E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E10
.text:0000000000006E10
.text:0000000000006E10                 public xcharalloc
.text:0000000000006E10 xcharalloc      proc near
.text:0000000000006E10 ; __unwind {
.text:0000000000006E10                 jmp     short xmalloc
.text:0000000000006E10 ; } // starts at 6E10
.text:0000000000006E10 xcharalloc      endp
.text:0000000000006E10
.text:0000000000006E10 ; ---------------------------------------------------------------------------
.text:0000000000006E12                 align 20h
.text:0000000000006E20
.text:0000000000006E20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E20
.text:0000000000006E20 ; Attributes: info_from_lumina
.text:0000000000006E20
.text:0000000000006E20 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000006E20                 public xrealloc
.text:0000000000006E20 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000006E20                                         ; quotearg_n_options+182↑p ...
.text:0000000000006E20 ; __unwind {
.text:0000000000006E20                 test    rsi, rsi
.text:0000000000006E23                 push    rbx
.text:0000000000006E24                 mov     rbx, rsi
.text:0000000000006E27                 jnz     short loc_6E2E
.text:0000000000006E29                 test    rdi, rdi
.text:0000000000006E2C                 jnz     short loc_6E48
.text:0000000000006E2E
.text:0000000000006E2E loc_6E2E:                               ; CODE XREF: xrealloc+7↑j
.text:0000000000006E2E                 mov     rsi, rbx        ; size
.text:0000000000006E31                 call    _realloc
.text:0000000000006E36                 test    rax, rax
.text:0000000000006E39                 jnz     short loc_6E40
.text:0000000000006E3B                 test    rbx, rbx
.text:0000000000006E3E                 jnz     short loc_6E51
.text:0000000000006E40
.text:0000000000006E40 loc_6E40:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000006E40                 pop     rbx
.text:0000000000006E41                 retn
.text:0000000000006E41 ; ---------------------------------------------------------------------------
.text:0000000000006E42                 align 8
.text:0000000000006E48
.text:0000000000006E48 loc_6E48:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000006E48                 call    _free
.text:0000000000006E4D                 xor     eax, eax
.text:0000000000006E4F                 pop     rbx
.text:0000000000006E50                 retn
.text:0000000000006E51 ; ---------------------------------------------------------------------------
.text:0000000000006E51
.text:0000000000006E51 loc_6E51:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000006E51                 call    xalloc_die
.text:0000000000006E51 ; } // starts at 6E20
.text:0000000000006E51 xrealloc        endp
.text:0000000000006E51
.text:0000000000006E51 ; ---------------------------------------------------------------------------
.text:0000000000006E56                 align 20h
.text:0000000000006E60
.text:0000000000006E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E60
.text:0000000000006E60 ; Attributes: info_from_lumina
.text:0000000000006E60
.text:0000000000006E60 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000006E60                 public xnrealloc
.text:0000000000006E60 xnrealloc       proc near
.text:0000000000006E60 ; __unwind {
.text:0000000000006E60                 mov     rax, rsi
.text:0000000000006E63                 mul     rdx
.text:0000000000006E66                 mov     rsi, rax
.text:0000000000006E69                 seto    al
.text:0000000000006E6C                 test    rsi, rsi
.text:0000000000006E6F                 js      short loc_6E7B
.text:0000000000006E71                 movzx   eax, al
.text:0000000000006E74                 test    rax, rax
.text:0000000000006E77                 jnz     short loc_6E7B
.text:0000000000006E79                 jmp     short xrealloc
.text:0000000000006E7B ; ---------------------------------------------------------------------------
.text:0000000000006E7B
.text:0000000000006E7B loc_6E7B:                               ; CODE XREF: xnrealloc+F↑j
.text:0000000000006E7B                                         ; xnrealloc+17↑j
.text:0000000000006E7B                 sub     rsp, 8
.text:0000000000006E7F                 call    xalloc_die
.text:0000000000006E7F ; } // starts at 6E60
.text:0000000000006E7F xnrealloc       endp
.text:0000000000006E7F
.text:0000000000006E7F ; ---------------------------------------------------------------------------
.text:0000000000006E84                 align 10h
.text:0000000000006E90
.text:0000000000006E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006E90
.text:0000000000006E90 ; Attributes: info_from_lumina
.text:0000000000006E90
.text:0000000000006E90 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000006E90                 public x2nrealloc
.text:0000000000006E90 x2nrealloc      proc near
.text:0000000000006E90 ; __unwind {
.text:0000000000006E90                 test    rdi, rdi
.text:0000000000006E93                 mov     r9, rdx
.text:0000000000006E96                 mov     rcx, [rsi]
.text:0000000000006E99                 jz      short loc_6ED0
.text:0000000000006E9B                 xor     edx, edx
.text:0000000000006E9D                 mov     rax, 5555555555555554h
.text:0000000000006EA7                 div     r9
.text:0000000000006EAA                 cmp     rax, rcx
.text:0000000000006EAD                 jbe     short loc_6EEB
.text:0000000000006EAF                 mov     rax, rcx
.text:0000000000006EB2                 shr     rax, 1
.text:0000000000006EB5                 lea     rcx, [rax+rcx+1]
.text:0000000000006EBA
.text:0000000000006EBA loc_6EBA:                               ; CODE XREF: x2nrealloc+59↓j
.text:0000000000006EBA                 mov     [rsi], rcx
.text:0000000000006EBD                 imul    rcx, r9
.text:0000000000006EC1                 mov     rsi, rcx
.text:0000000000006EC4                 jmp     xrealloc
.text:0000000000006EC4 ; ---------------------------------------------------------------------------
.text:0000000000006EC9                 align 10h
.text:0000000000006ED0
.text:0000000000006ED0 loc_6ED0:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000006ED0                 test    rcx, rcx
.text:0000000000006ED3                 jz      short loc_6EF8
.text:0000000000006ED5
.text:0000000000006ED5 loc_6ED5:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000006ED5                 mov     rax, rcx
.text:0000000000006ED8                 mul     r9
.text:0000000000006EDB                 seto    dl
.text:0000000000006EDE                 test    rax, rax
.text:0000000000006EE1                 movzx   edx, dl
.text:0000000000006EE4                 js      short loc_6EEB
.text:0000000000006EE6                 test    rdx, rdx
.text:0000000000006EE9                 jz      short loc_6EBA
.text:0000000000006EEB
.text:0000000000006EEB loc_6EEB:                               ; CODE XREF: x2nrealloc+1D↑j
.text:0000000000006EEB                                         ; x2nrealloc+54↑j
.text:0000000000006EEB                 sub     rsp, 8
.text:0000000000006EEF                 call    xalloc_die
.text:0000000000006EEF ; ---------------------------------------------------------------------------
.text:0000000000006EF4                 align 8
.text:0000000000006EF8
.text:0000000000006EF8 loc_6EF8:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000006EF8                 xor     edx, edx
.text:0000000000006EFA                 mov     eax, 80h
.text:0000000000006EFF                 xor     r8d, r8d
.text:0000000000006F02                 div     r9
.text:0000000000006F05                 test    rax, rax
.text:0000000000006F08                 setz    r8b
.text:0000000000006F0C                 lea     rcx, [r8+rax]
.text:0000000000006F10                 jmp     short loc_6ED5
.text:0000000000006F10 ; } // starts at 6E90
.text:0000000000006F10 x2nrealloc      endp
.text:0000000000006F10
.text:0000000000006F10 ; ---------------------------------------------------------------------------
.text:0000000000006F12                 align 20h
.text:0000000000006F20
.text:0000000000006F20 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F20
.text:0000000000006F20 ; Attributes: info_from_lumina
.text:0000000000006F20
.text:0000000000006F20 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000006F20                 public x2realloc
.text:0000000000006F20 x2realloc       proc near
.text:0000000000006F20 ; __unwind {
.text:0000000000006F20                 test    rdi, rdi
.text:0000000000006F23                 mov     rax, [rsi]
.text:0000000000006F26                 jz      short loc_6F50
.text:0000000000006F28                 mov     rdx, 5555555555555553h
.text:0000000000006F32                 cmp     rax, rdx
.text:0000000000006F35                 ja      short loc_6F61
.text:0000000000006F37                 mov     rdx, rax
.text:0000000000006F3A                 shr     rdx, 1
.text:0000000000006F3D                 lea     rax, [rdx+rax+1]
.text:0000000000006F42
.text:0000000000006F42 loc_6F42:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000006F42                 mov     [rsi], rax
.text:0000000000006F45                 mov     rsi, rax
.text:0000000000006F48                 jmp     xrealloc
.text:0000000000006F48 ; ---------------------------------------------------------------------------
.text:0000000000006F4D                 align 10h
.text:0000000000006F50
.text:0000000000006F50 loc_6F50:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000006F50                 test    rax, rax
.text:0000000000006F53                 mov     edx, 80h
.text:0000000000006F58                 cmovz   rax, rdx
.text:0000000000006F5C                 test    rax, rax
.text:0000000000006F5F                 jns     short loc_6F42
.text:0000000000006F61
.text:0000000000006F61 loc_6F61:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000006F61                 sub     rsp, 8
.text:0000000000006F65                 call    xalloc_die
.text:0000000000006F65 ; } // starts at 6F20
.text:0000000000006F65 x2realloc       endp
.text:0000000000006F65
.text:0000000000006F65 ; ---------------------------------------------------------------------------
.text:0000000000006F6A                 align 10h
.text:0000000000006F70
.text:0000000000006F70 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F70
.text:0000000000006F70
.text:0000000000006F70 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000006F70                 public xzalloc
.text:0000000000006F70 xzalloc         proc near
.text:0000000000006F70 ; __unwind {
.text:0000000000006F70                 push    rbx
.text:0000000000006F71                 mov     rbx, rdi
.text:0000000000006F74                 call    xmalloc
.text:0000000000006F79                 mov     rdx, rbx        ; n
.text:0000000000006F7C                 xor     esi, esi        ; c
.text:0000000000006F7E                 mov     rdi, rax        ; s
.text:0000000000006F81                 pop     rbx
.text:0000000000006F82                 jmp     _memset
.text:0000000000006F82 ; } // starts at 6F70
.text:0000000000006F82 xzalloc         endp
.text:0000000000006F82
.text:0000000000006F82 ; ---------------------------------------------------------------------------
.text:0000000000006F87                 align 10h
.text:0000000000006F90
.text:0000000000006F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000006F90
.text:0000000000006F90 ; Attributes: info_from_lumina
.text:0000000000006F90
.text:0000000000006F90 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000006F90                 public xcalloc
.text:0000000000006F90 xcalloc         proc near
.text:0000000000006F90 ; __unwind {
.text:0000000000006F90                 mov     rax, rdi
.text:0000000000006F93                 sub     rsp, 8
.text:0000000000006F97                 mul     rsi
.text:0000000000006F9A                 seto    dl
.text:0000000000006F9D                 test    rax, rax
.text:0000000000006FA0                 js      short loc_6FB9
.text:0000000000006FA2                 movzx   edx, dl
.text:0000000000006FA5                 test    rdx, rdx
.text:0000000000006FA8                 jnz     short loc_6FB9
.text:0000000000006FAA                 call    _calloc
.text:0000000000006FAF                 test    rax, rax
.text:0000000000006FB2                 jz      short loc_6FB9
.text:0000000000006FB4                 add     rsp, 8
.text:0000000000006FB8                 retn
.text:0000000000006FB9 ; ---------------------------------------------------------------------------
.text:0000000000006FB9
.text:0000000000006FB9 loc_6FB9:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000006FB9                                         ; xcalloc+18↑j ...
.text:0000000000006FB9                 call    xalloc_die
.text:0000000000006FB9 ; } // starts at 6F90
.text:0000000000006FB9 xcalloc         endp
.text:0000000000006FB9
.text:0000000000006FB9 ; ---------------------------------------------------------------------------
.text:0000000000006FBE                 align 20h
.text:0000000000006FC0
.text:0000000000006FC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FC0
.text:0000000000006FC0 ; Attributes: info_from_lumina
.text:0000000000006FC0
.text:0000000000006FC0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000006FC0                 public xmemdup
.text:0000000000006FC0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000006FC0                                         ; xstrdup+11↓j
.text:0000000000006FC0 ; __unwind {
.text:0000000000006FC0                 push    rbp
.text:0000000000006FC1                 push    rbx
.text:0000000000006FC2                 mov     rbp, rdi
.text:0000000000006FC5                 mov     rdi, rsi
.text:0000000000006FC8                 mov     rbx, rsi
.text:0000000000006FCB                 sub     rsp, 8
.text:0000000000006FCF                 call    xmalloc
.text:0000000000006FD4                 add     rsp, 8
.text:0000000000006FD8                 mov     rdx, rbx        ; n
.text:0000000000006FDB                 mov     rsi, rbp        ; src
.text:0000000000006FDE                 pop     rbx
.text:0000000000006FDF                 pop     rbp
.text:0000000000006FE0                 mov     rdi, rax        ; dest
.text:0000000000006FE3                 jmp     _memcpy
.text:0000000000006FE3 ; } // starts at 6FC0
.text:0000000000006FE3 xmemdup         endp
.text:0000000000006FE3
.text:0000000000006FE3 ; ---------------------------------------------------------------------------
.text:0000000000006FE8                 align 10h
.text:0000000000006FF0
.text:0000000000006FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000006FF0
.text:0000000000006FF0
.text:0000000000006FF0 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000006FF0                 public xstrdup
.text:0000000000006FF0 xstrdup         proc near               ; CODE XREF: str_value+1F↑p
.text:0000000000006FF0                                         ; eval6+297↑p
.text:0000000000006FF0 ; __unwind {
.text:0000000000006FF0                 push    rbx
.text:0000000000006FF1                 mov     rbx, rdi
.text:0000000000006FF4                 call    _strlen
.text:0000000000006FF9                 mov     rdi, rbx        ; src
.text:0000000000006FFC                 lea     rsi, [rax+1]    ; n
.text:0000000000007000                 pop     rbx
.text:0000000000007001                 jmp     short xmemdup
.text:0000000000007001 ; } // starts at 6FF0
.text:0000000000007001 xstrdup         endp
.text:0000000000007001
.text:0000000000007001 ; ---------------------------------------------------------------------------
.text:0000000000007003                 align 10h
.text:0000000000007010
.text:0000000000007010 ; =============== S U B R O U T I N E =======================================
.text:0000000000007010
.text:0000000000007010 ; Attributes: noreturn info_from_lumina
.text:0000000000007010
.text:0000000000007010 ; void __cdecl xalloc_die()
.text:0000000000007010                 public xalloc_die
.text:0000000000007010 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_5CF6↑p
.text:0000000000007010                                         ; xmalloc:loc_6DD5↑p ...
.text:0000000000007010 ; __unwind {
.text:0000000000007010                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000007017                 sub     rsp, 8
.text:000000000000701B                 mov     edx, 5          ; category
.text:0000000000007020                 xor     edi, edi        ; domainname
.text:0000000000007022                 call    _dcgettext
.text:0000000000007027                 mov     edi, cs:exit_failure ; status
.text:000000000000702D                 lea     rdx, format+4   ; format
.text:0000000000007034                 mov     rcx, rax
.text:0000000000007037                 xor     esi, esi        ; errnum
.text:0000000000007039                 xor     eax, eax
.text:000000000000703B                 call    _error
.text:0000000000007040                 call    _abort
.text:0000000000007040 ; } // starts at 7010
.text:0000000000007040 xalloc_die      endp
.text:0000000000007040
.text:0000000000007040 ; ---------------------------------------------------------------------------
.text:0000000000007045                 align 10h
.text:0000000000007050
.text:0000000000007050 ; =============== S U B R O U T I N E =======================================
.text:0000000000007050
.text:0000000000007050 ; Attributes: info_from_lumina
.text:0000000000007050
.text:0000000000007050 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000007050                 public rpl_mbrtowc
.text:0000000000007050 rpl_mbrtowc     proc near               ; CODE XREF: docolon+2E9↑p
.text:0000000000007050                                         ; eval6+4FE↑p ...
.text:0000000000007050
.text:0000000000007050 pwc             = dword ptr -34h
.text:0000000000007050 var_30          = qword ptr -30h
.text:0000000000007050
.text:0000000000007050 ; __unwind {
.text:0000000000007050                 push    r13
.text:0000000000007052                 push    r12
.text:0000000000007054                 mov     r13, rsi
.text:0000000000007057                 push    rbp
.text:0000000000007058                 push    rbx
.text:0000000000007059                 mov     rbx, rdi
.text:000000000000705C                 mov     r12, rdx
.text:000000000000705F                 sub     rsp, 18h
.text:0000000000007063                 mov     rax, fs:28h
.text:000000000000706C                 mov     [rsp+38h+var_30], rax
.text:0000000000007071                 xor     eax, eax
.text:0000000000007073                 lea     rax, [rsp+38h+pwc]
.text:0000000000007078                 test    rdi, rdi
.text:000000000000707B                 cmovz   rbx, rax
.text:000000000000707F                 mov     rdi, rbx        ; pwc
.text:0000000000007082                 call    _mbrtowc
.text:0000000000007087                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000708B                 mov     rbp, rax
.text:000000000000708E                 jbe     short loc_70B0
.text:0000000000007090                 test    r12, r12
.text:0000000000007093                 jz      short loc_70B0
.text:0000000000007095                 xor     edi, edi
.text:0000000000007097                 call    hard_locale
.text:000000000000709C                 test    al, al
.text:000000000000709E                 jnz     short loc_70B0
.text:00000000000070A0                 movzx   eax, byte ptr [r13+0]
.text:00000000000070A5                 mov     ebp, 1
.text:00000000000070AA                 mov     [rbx], eax
.text:00000000000070AC                 nop     dword ptr [rax+00h]
.text:00000000000070B0
.text:00000000000070B0 loc_70B0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000070B0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000070B0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000070B5                 xor     rdx, fs:28h
.text:00000000000070BE                 mov     rax, rbp
.text:00000000000070C1                 jnz     short loc_70CE
.text:00000000000070C3                 add     rsp, 18h
.text:00000000000070C7                 pop     rbx
.text:00000000000070C8                 pop     rbp
.text:00000000000070C9                 pop     r12
.text:00000000000070CB                 pop     r13
.text:00000000000070CD                 retn
.text:00000000000070CE ; ---------------------------------------------------------------------------
.text:00000000000070CE
.text:00000000000070CE loc_70CE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000070CE                 call    ___stack_chk_fail
.text:00000000000070CE ; } // starts at 7050
.text:00000000000070CE rpl_mbrtowc     endp
.text:00000000000070CE
.text:00000000000070CE ; ---------------------------------------------------------------------------
.text:00000000000070D3                 align 20h
.text:00000000000070E0
.text:00000000000070E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000070E0
.text:00000000000070E0
.text:00000000000070E0 peek_token_bracket proc near            ; CODE XREF: parse_bracket_element_constprop_37+1FB↓p
.text:00000000000070E0                                         ; parse_expression+854↓p ...
.text:00000000000070E0 ; __unwind {
.text:00000000000070E0                 mov     rax, [rsi+48h]
.text:00000000000070E4                 cmp     [rsi+68h], rax
.text:00000000000070E8                 jle     short loc_7140
.text:00000000000070EA                 mov     r8, [rsi+8]
.text:00000000000070EE                 cmp     dword ptr [rsi+90h], 1
.text:00000000000070F5                 movzx   ecx, byte ptr [r8+rax]
.text:00000000000070FA                 mov     [rdi], cl
.text:00000000000070FC                 jle     short loc_7113
.text:00000000000070FE                 cmp     rax, [rsi+30h]
.text:0000000000007102                 jz      short loc_7113
.text:0000000000007104                 mov     r9, [rsi+10h]
.text:0000000000007108                 cmp     dword ptr [r9+rax*4], 0FFFFFFFFh
.text:000000000000710D                 jz      loc_718F
.text:0000000000007113
.text:0000000000007113 loc_7113:                               ; CODE XREF: peek_token_bracket+1C↑j
.text:0000000000007113                                         ; peek_token_bracket+22↑j
.text:0000000000007113                 cmp     cl, 5Ch ; '\'
.text:0000000000007116                 jz      short loc_7180
.text:0000000000007118                 cmp     cl, 5Bh ; '['
.text:000000000000711B                 jz      short loc_7150
.text:000000000000711D                 cmp     cl, 5Dh ; ']'
.text:0000000000007120                 jz      loc_71C0
.text:0000000000007126                 cmp     cl, 5Eh ; '^'
.text:0000000000007129                 jz      loc_71B0
.text:000000000000712F                 cmp     cl, 2Dh ; '-'
.text:0000000000007132                 jnz     short loc_718F
.text:0000000000007134                 mov     byte ptr [rdi+8], 16h
.text:0000000000007138                 mov     eax, 1
.text:000000000000713D                 retn
.text:000000000000713D ; ---------------------------------------------------------------------------
.text:000000000000713E                 align 20h
.text:0000000000007140
.text:0000000000007140 loc_7140:                               ; CODE XREF: peek_token_bracket+8↑j
.text:0000000000007140                 mov     byte ptr [rdi+8], 2
.text:0000000000007144                 xor     eax, eax
.text:0000000000007146                 retn
.text:0000000000007146 ; ---------------------------------------------------------------------------
.text:0000000000007147                 align 10h
.text:0000000000007150
.text:0000000000007150 loc_7150:                               ; CODE XREF: peek_token_bracket+3B↑j
.text:0000000000007150                 lea     rcx, [rax+1]
.text:0000000000007154                 cmp     rcx, [rsi+58h]
.text:0000000000007158                 jge     short loc_71A0
.text:000000000000715A                 movzx   eax, byte ptr [r8+rax+1]
.text:0000000000007160                 cmp     al, 3Ah ; ':'
.text:0000000000007162                 mov     [rdi], al
.text:0000000000007164                 jz      loc_7200
.text:000000000000716A                 cmp     al, 3Dh ; '='
.text:000000000000716C                 jz      loc_71F0
.text:0000000000007172                 cmp     al, 2Eh ; '.'
.text:0000000000007174                 jnz     short loc_71A0
.text:0000000000007176                 mov     byte ptr [rdi+8], 1Ah
.text:000000000000717A                 mov     eax, 2
.text:000000000000717F                 retn
.text:0000000000007180 ; ---------------------------------------------------------------------------
.text:0000000000007180
.text:0000000000007180 loc_7180:                               ; CODE XREF: peek_token_bracket+36↑j
.text:0000000000007180                 and     edx, 1
.text:0000000000007183                 jz      short loc_718F
.text:0000000000007185                 lea     rdx, [rax+1]
.text:0000000000007189                 cmp     rdx, [rsi+58h]
.text:000000000000718D                 jl      short loc_71D0
.text:000000000000718F
.text:000000000000718F loc_718F:                               ; CODE XREF: peek_token_bracket+2D↑j
.text:000000000000718F                                         ; peek_token_bracket+52↑j ...
.text:000000000000718F                 mov     byte ptr [rdi+8], 1
.text:0000000000007193                 mov     eax, 1
.text:0000000000007198                 retn
.text:0000000000007198 ; ---------------------------------------------------------------------------
.text:0000000000007199                 align 20h
.text:00000000000071A0
.text:00000000000071A0 loc_71A0:                               ; CODE XREF: peek_token_bracket+78↑j
.text:00000000000071A0                                         ; peek_token_bracket+94↑j ...
.text:00000000000071A0                 mov     byte ptr [rdi+8], 1
.text:00000000000071A4                 mov     byte ptr [rdi], 5Bh ; '['
.text:00000000000071A7                 mov     eax, 1
.text:00000000000071AC                 retn
.text:00000000000071AC ; ---------------------------------------------------------------------------
.text:00000000000071AD                 align 10h
.text:00000000000071B0
.text:00000000000071B0 loc_71B0:                               ; CODE XREF: peek_token_bracket+49↑j
.text:00000000000071B0                 mov     byte ptr [rdi+8], 19h
.text:00000000000071B4                 mov     eax, 1
.text:00000000000071B9                 retn
.text:00000000000071B9 ; ---------------------------------------------------------------------------
.text:00000000000071BA                 align 20h
.text:00000000000071C0
.text:00000000000071C0 loc_71C0:                               ; CODE XREF: peek_token_bracket+40↑j
.text:00000000000071C0                 mov     byte ptr [rdi+8], 15h
.text:00000000000071C4                 mov     eax, 1
.text:00000000000071C9                 retn
.text:00000000000071C9 ; ---------------------------------------------------------------------------
.text:00000000000071CA                 align 10h
.text:00000000000071D0
.text:00000000000071D0 loc_71D0:                               ; CODE XREF: peek_token_bracket+AD↑j
.text:00000000000071D0                 mov     [rsi+48h], rdx
.text:00000000000071D4                 movzx   eax, byte ptr [r8+rax+1]
.text:00000000000071DA                 mov     byte ptr [rdi+8], 1
.text:00000000000071DE                 mov     [rdi], al
.text:00000000000071E0                 mov     eax, 1
.text:00000000000071E5                 retn
.text:00000000000071E5 ; ---------------------------------------------------------------------------
.text:00000000000071E6                 align 10h
.text:00000000000071F0
.text:00000000000071F0 loc_71F0:                               ; CODE XREF: peek_token_bracket+8C↑j
.text:00000000000071F0                 mov     byte ptr [rdi+8], 1Ch
.text:00000000000071F4                 mov     eax, 2
.text:00000000000071F9                 retn
.text:00000000000071F9 ; ---------------------------------------------------------------------------
.text:00000000000071FA                 align 20h
.text:0000000000007200
.text:0000000000007200 loc_7200:                               ; CODE XREF: peek_token_bracket+84↑j
.text:0000000000007200                 and     edx, 4
.text:0000000000007203                 jz      short loc_71A0
.text:0000000000007205                 mov     byte ptr [rdi+8], 1Eh
.text:0000000000007209                 mov     eax, 2
.text:000000000000720E                 retn
.text:000000000000720E ; } // starts at 70E0
.text:000000000000720E peek_token_bracket endp
.text:000000000000720E
.text:000000000000720E ; ---------------------------------------------------------------------------
.text:000000000000720F                 align 10h
.text:0000000000007210
.text:0000000000007210 ; =============== S U B R O U T I N E =======================================
.text:0000000000007210
.text:0000000000007210
.text:0000000000007210 mark_opt_subexp proc near               ; DATA XREF: parse_expression+594↓o
.text:0000000000007210 ; __unwind {
.text:0000000000007210                 cmp     byte ptr [rsi+30h], 11h
.text:0000000000007214                 jz      short loc_7220
.text:0000000000007216
.text:0000000000007216 loc_7216:                               ; CODE XREF: mark_opt_subexp+14↓j
.text:0000000000007216                 xor     eax, eax
.text:0000000000007218                 retn
.text:0000000000007218 ; ---------------------------------------------------------------------------
.text:0000000000007219                 align 20h
.text:0000000000007220
.text:0000000000007220 loc_7220:                               ; CODE XREF: mark_opt_subexp+4↑j
.text:0000000000007220                 cmp     rdi, [rsi+28h]
.text:0000000000007224                 jnz     short loc_7216
.text:0000000000007226                 or      byte ptr [rsi+32h], 8
.text:000000000000722A                 xor     eax, eax
.text:000000000000722C                 retn
.text:000000000000722C ; } // starts at 7210
.text:000000000000722C mark_opt_subexp endp
.text:000000000000722C
.text:000000000000722C ; ---------------------------------------------------------------------------
.text:000000000000722D                 align 10h
.text:0000000000007230
.text:0000000000007230 ; =============== S U B R O U T I N E =======================================
.text:0000000000007230
.text:0000000000007230
.text:0000000000007230 check_dst_limits_calc_pos_1 proc near   ; CODE XREF: check_dst_limits_calc_pos_1+15D↓p
.text:0000000000007230                                         ; check_dst_limits_calc_pos+58↓j
.text:0000000000007230
.text:0000000000007230 var_78          = qword ptr -78h
.text:0000000000007230 var_70          = dword ptr -70h
.text:0000000000007230 var_6C          = dword ptr -6Ch
.text:0000000000007230 var_68          = qword ptr -68h
.text:0000000000007230 var_60          = qword ptr -60h
.text:0000000000007230 var_58          = dword ptr -58h
.text:0000000000007230 var_52          = word ptr -52h
.text:0000000000007230 var_50          = qword ptr -50h
.text:0000000000007230 var_48          = qword ptr -48h
.text:0000000000007230 var_40          = qword ptr -40h
.text:0000000000007230
.text:0000000000007230 ; __unwind {
.text:0000000000007230                 push    r15
.text:0000000000007232                 push    r14
.text:0000000000007234                 mov     r9, rdx
.text:0000000000007237                 push    r13
.text:0000000000007239                 push    r12
.text:000000000000723B                 lea     rdx, [rcx+rcx*2]
.text:000000000000723F                 push    rbp
.text:0000000000007240                 push    rbx
.text:0000000000007241                 mov     r15d, esi
.text:0000000000007244                 sub     rsp, 48h
.text:0000000000007248                 mov     r14, [rdi+98h]
.text:000000000000724F                 mov     [rsp+78h+var_78], rdi
.text:0000000000007253                 mov     rax, [r14+30h]
.text:0000000000007257                 lea     r12, [rax+rdx*8]
.text:000000000000725B                 cmp     qword ptr [r12+8], 0
.text:0000000000007261                 jle     loc_73F5
.text:0000000000007267                 lea     rax, [r8+r8*4]
.text:000000000000726B                 mov     r11, rcx
.text:000000000000726E                 mov     ecx, r9d
.text:0000000000007271                 mov     r10, r8
.text:0000000000007274                 xor     ebx, ebx
.text:0000000000007276                 mov     [rsp+78h+var_58], esi
.text:000000000000727A                 shl     rax, 3
.text:000000000000727E                 mov     r15, r9
.text:0000000000007281                 mov     [rsp+78h+var_68], r11
.text:0000000000007286                 mov     [rsp+78h+var_50], rax
.text:000000000000728B                 mov     eax, 1
.text:0000000000007290                 shl     rax, cl
.text:0000000000007293                 mov     [rsp+78h+var_60], rax
.text:0000000000007298                 not     eax
.text:000000000000729A                 mov     [rsp+78h+var_52], ax
.text:000000000000729F                 mov     eax, esi
.text:00000000000072A1                 and     eax, 1
.text:00000000000072A4                 mov     [rsp+78h+var_6C], eax
.text:00000000000072A8                 mov     eax, esi
.text:00000000000072AA                 and     eax, 2
.text:00000000000072AD                 mov     [rsp+78h+var_70], eax
.text:00000000000072B1                 jmp     short loc_72D5
.text:00000000000072B1 ; ---------------------------------------------------------------------------
.text:00000000000072B3                 align 8
.text:00000000000072B8
.text:00000000000072B8 loc_72B8:                               ; CODE XREF: check_dst_limits_calc_pos_1+BF↓j
.text:00000000000072B8                 cmp     dl, 9
.text:00000000000072BB                 jz      loc_7410
.text:00000000000072C1                 cmp     dl, 4
.text:00000000000072C4                 jz      short loc_7318
.text:00000000000072C6
.text:00000000000072C6 loc_72C6:                               ; CODE XREF: check_dst_limits_calc_pos_1+C7↓j
.text:00000000000072C6                                         ; check_dst_limits_calc_pos_1+CC↓j ...
.text:00000000000072C6                 add     rbx, 1
.text:00000000000072CA                 cmp     [r12+8], rbx
.text:00000000000072CF                 jle     loc_73F0
.text:00000000000072D5
.text:00000000000072D5 loc_72D5:                               ; CODE XREF: check_dst_limits_calc_pos_1+81↑j
.text:00000000000072D5                                         ; check_dst_limits_calc_pos_1+1B4↓j
.text:00000000000072D5                 mov     rax, [r12+10h]
.text:00000000000072DA                 mov     rbp, [rax+rbx*8]
.text:00000000000072DE                 mov     rax, rbp
.text:00000000000072E1                 shl     rax, 4
.text:00000000000072E5                 add     rax, [r14]
.text:00000000000072E8                 movzx   edx, byte ptr [rax+8]
.text:00000000000072EC                 cmp     dl, 8
.text:00000000000072EF                 jnz     short loc_72B8
.text:00000000000072F1                 mov     ecx, [rsp+78h+var_6C]
.text:00000000000072F5                 test    ecx, ecx
.text:00000000000072F7                 jz      short loc_72C6
.text:00000000000072F9                 cmp     [rax], r15
.text:00000000000072FC                 jnz     short loc_72C6
.text:00000000000072FE
.text:00000000000072FE loc_72FE:                               ; CODE XREF: check_dst_limits_calc_pos_1+165↓j
.text:00000000000072FE                 add     rsp, 48h
.text:0000000000007302                 mov     eax, 0FFFFFFFFh
.text:0000000000007307                 pop     rbx
.text:0000000000007308                 pop     rbp
.text:0000000000007309                 pop     r12
.text:000000000000730B                 pop     r13
.text:000000000000730D                 pop     r14
.text:000000000000730F                 pop     r15
.text:0000000000007311                 retn
.text:0000000000007311 ; ---------------------------------------------------------------------------
.text:0000000000007312                 align 8
.text:0000000000007318
.text:0000000000007318 loc_7318:                               ; CODE XREF: check_dst_limits_calc_pos_1+94↑j
.text:0000000000007318                 cmp     r10, 0FFFFFFFFFFFFFFFFh
.text:000000000000731C                 jz      short loc_72C6
.text:000000000000731E                 mov     rax, [rsp+78h+var_78]
.text:0000000000007322                 mov     r13, [rsp+78h+var_50]
.text:0000000000007327                 mov     rdi, rbp
.text:000000000000732A                 mov     [rsp+78h+var_48], r12
.text:000000000000732F                 mov     [rsp+78h+var_40], rbx
.text:0000000000007334                 mov     r12, r10
.text:0000000000007337                 add     r13, [rax+0D8h]
.text:000000000000733E                 lea     rax, [rbp+rbp*2+0]
.text:0000000000007343                 mov     rbp, r14
.text:0000000000007346                 mov     r14, rdi
.text:0000000000007349                 shl     rax, 3
.text:000000000000734D                 mov     rbx, rax
.text:0000000000007350
.text:0000000000007350 loc_7350:                               ; CODE XREF: check_dst_limits_calc_pos_1+199↓j
.text:0000000000007350                 cmp     [r13+0], r14
.text:0000000000007354                 jnz     short loc_73C0
.text:0000000000007356                 cmp     r15, 3Fh ; '?'
.text:000000000000735A                 jg      short loc_7368
.text:000000000000735C                 movzx   eax, word ptr [r13+22h]
.text:0000000000007361                 test    [rsp+78h+var_60], rax
.text:0000000000007366                 jz      short loc_73C0
.text:0000000000007368
.text:0000000000007368 loc_7368:                               ; CODE XREF: check_dst_limits_calc_pos_1+12A↑j
.text:0000000000007368                 mov     rax, [rbp+28h]
.text:000000000000736C                 mov     rax, [rax+rbx+10h]
.text:0000000000007371                 mov     rcx, [rax]
.text:0000000000007374                 cmp     [rsp+78h+var_68], rcx
.text:0000000000007379                 jz      loc_7440
.text:000000000000737F                 mov     esi, [rsp+78h+var_58]
.text:0000000000007383                 mov     rdi, [rsp+78h+var_78]
.text:0000000000007387                 mov     r8, r12
.text:000000000000738A                 mov     rdx, r15
.text:000000000000738D                 call    check_dst_limits_calc_pos_1
.text:0000000000007392                 cmp     eax, 0FFFFFFFFh
.text:0000000000007395                 jz      loc_72FE
.text:000000000000739B                 test    eax, eax
.text:000000000000739D                 jnz     short loc_73A7
.text:000000000000739F                 mov     esi, [rsp+78h+var_70]
.text:00000000000073A3                 test    esi, esi
.text:00000000000073A5                 jnz     short loc_7425
.text:00000000000073A7
.text:00000000000073A7 loc_73A7:                               ; CODE XREF: check_dst_limits_calc_pos_1+16D↑j
.text:00000000000073A7                 cmp     r15, 3Fh ; '?'
.text:00000000000073AB                 jg      short loc_73C0
.text:00000000000073AD                 movzx   eax, [rsp+78h+var_52]
.text:00000000000073B2                 and     [r13+22h], ax
.text:00000000000073B7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000073C0
.text:00000000000073C0 loc_73C0:                               ; CODE XREF: check_dst_limits_calc_pos_1+124↑j
.text:00000000000073C0                                         ; check_dst_limits_calc_pos_1+136↑j ...
.text:00000000000073C0                 add     r13, 28h ; '('
.text:00000000000073C4                 cmp     byte ptr [r13-8], 0
.text:00000000000073C9                 jnz     short loc_7350
.text:00000000000073CB                 mov     rbx, [rsp+78h+var_40]
.text:00000000000073D0                 mov     r10, r12
.text:00000000000073D3                 mov     r12, [rsp+78h+var_48]
.text:00000000000073D8                 mov     r14, rbp
.text:00000000000073DB                 add     rbx, 1
.text:00000000000073DF                 cmp     [r12+8], rbx
.text:00000000000073E4                 jg      loc_72D5
.text:00000000000073EA                 nop     word ptr [rax+rax+00h]
.text:00000000000073F0
.text:00000000000073F0 loc_73F0:                               ; CODE XREF: check_dst_limits_calc_pos_1+9F↑j
.text:00000000000073F0                 mov     r15d, [rsp+78h+var_58]
.text:00000000000073F5
.text:00000000000073F5 loc_73F5:                               ; CODE XREF: check_dst_limits_calc_pos_1+31↑j
.text:00000000000073F5                 add     rsp, 48h
.text:00000000000073F9                 mov     eax, r15d
.text:00000000000073FC                 pop     rbx
.text:00000000000073FD                 sar     eax, 1
.text:00000000000073FF                 pop     rbp
.text:0000000000007400                 pop     r12
.text:0000000000007402                 pop     r13
.text:0000000000007404                 pop     r14
.text:0000000000007406                 pop     r15
.text:0000000000007408                 retn
.text:0000000000007408 ; ---------------------------------------------------------------------------
.text:0000000000007409                 align 10h
.text:0000000000007410
.text:0000000000007410 loc_7410:                               ; CODE XREF: check_dst_limits_calc_pos_1+8B↑j
.text:0000000000007410                 mov     edx, [rsp+78h+var_70]
.text:0000000000007414                 test    edx, edx
.text:0000000000007416                 jz      loc_72C6
.text:000000000000741C                 cmp     [rax], r15
.text:000000000000741F                 jnz     loc_72C6
.text:0000000000007425
.text:0000000000007425 loc_7425:                               ; CODE XREF: check_dst_limits_calc_pos_1+175↑j
.text:0000000000007425                 add     rsp, 48h
.text:0000000000007429                 xor     eax, eax
.text:000000000000742B                 pop     rbx
.text:000000000000742C                 pop     rbp
.text:000000000000742D                 pop     r12
.text:000000000000742F                 pop     r13
.text:0000000000007431                 pop     r14
.text:0000000000007433                 pop     r15
.text:0000000000007435                 retn
.text:0000000000007435 ; ---------------------------------------------------------------------------
.text:0000000000007436                 align 20h
.text:0000000000007440
.text:0000000000007440 loc_7440:                               ; CODE XREF: check_dst_limits_calc_pos_1+149↑j
.text:0000000000007440                 mov     r15d, [rsp+78h+var_58]
.text:0000000000007445                 add     rsp, 48h
.text:0000000000007449                 pop     rbx
.text:000000000000744A                 pop     rbp
.text:000000000000744B                 mov     eax, r15d
.text:000000000000744E                 and     eax, 1
.text:0000000000007451                 pop     r12
.text:0000000000007453                 neg     eax
.text:0000000000007455                 pop     r13
.text:0000000000007457                 pop     r14
.text:0000000000007459                 pop     r15
.text:000000000000745B                 retn
.text:000000000000745B ; } // starts at 7230
.text:000000000000745B check_dst_limits_calc_pos_1 endp
.text:000000000000745B
.text:000000000000745B ; ---------------------------------------------------------------------------
.text:000000000000745C                 align 20h
.text:0000000000007460
.text:0000000000007460 ; =============== S U B R O U T I N E =======================================
.text:0000000000007460
.text:0000000000007460
.text:0000000000007460 check_dst_limits_calc_pos proc near     ; CODE XREF: check_dst_limits_isra_13+1AE↓p
.text:0000000000007460                                         ; check_dst_limits_isra_13+1D0↓p
.text:0000000000007460 ; __unwind {
.text:0000000000007460                 mov     rax, [rdi+0D8h]
.text:0000000000007467                 lea     rsi, [rsi+rsi*4]
.text:000000000000746B                 lea     rax, [rax+rsi*8]
.text:000000000000746F                 mov     r10, [rax+10h]
.text:0000000000007473                 cmp     r10, r8
.text:0000000000007476                 jg      short loc_74C0
.text:0000000000007478                 mov     rax, [rax+18h]
.text:000000000000747C                 cmp     rax, r8
.text:000000000000747F                 jl      short loc_74A0
.text:0000000000007481                 xor     esi, esi
.text:0000000000007483                 cmp     r10, r8
.text:0000000000007486                 setz    sil
.text:000000000000748A                 or      esi, 2
.text:000000000000748D                 cmp     rax, r8
.text:0000000000007490                 jz      short loc_74B5
.text:0000000000007492                 xor     eax, eax
.text:0000000000007494                 cmp     r10, r8
.text:0000000000007497                 jz      short loc_74B0
.text:0000000000007499                 rep retn
.text:0000000000007499 ; ---------------------------------------------------------------------------
.text:000000000000749B                 align 20h
.text:00000000000074A0
.text:00000000000074A0 loc_74A0:                               ; CODE XREF: check_dst_limits_calc_pos+1F↑j
.text:00000000000074A0                 mov     eax, 1
.text:00000000000074A5                 retn
.text:00000000000074A5 ; ---------------------------------------------------------------------------
.text:00000000000074A6                 align 10h
.text:00000000000074B0
.text:00000000000074B0 loc_74B0:                               ; CODE XREF: check_dst_limits_calc_pos+37↑j
.text:00000000000074B0                 mov     esi, 1
.text:00000000000074B5
.text:00000000000074B5 loc_74B5:                               ; CODE XREF: check_dst_limits_calc_pos+30↑j
.text:00000000000074B5                 mov     r8, r9
.text:00000000000074B8                 jmp     check_dst_limits_calc_pos_1
.text:00000000000074B8 ; ---------------------------------------------------------------------------
.text:00000000000074BD                 align 20h
.text:00000000000074C0
.text:00000000000074C0 loc_74C0:                               ; CODE XREF: check_dst_limits_calc_pos+16↑j
.text:00000000000074C0                 mov     eax, 0FFFFFFFFh
.text:00000000000074C5                 retn
.text:00000000000074C5 ; } // starts at 7460
.text:00000000000074C5 check_dst_limits_calc_pos endp
.text:00000000000074C5
.text:00000000000074C5 ; ---------------------------------------------------------------------------
.text:00000000000074C6                 align 10h
.text:00000000000074D0
.text:00000000000074D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000074D0
.text:00000000000074D0
.text:00000000000074D0 postorder       proc near               ; CODE XREF: parse_expression+ED↓p
.text:00000000000074D0                                         ; parse_expression+398↓p ...
.text:00000000000074D0 ; __unwind {
.text:00000000000074D0                 push    r12
.text:00000000000074D2                 mov     r12, rsi
.text:00000000000074D5                 push    rbp
.text:00000000000074D6                 mov     rbp, rdx
.text:00000000000074D9                 push    rbx
.text:00000000000074DA                 mov     rbx, rdi
.text:00000000000074DD                 jmp     short loc_74E3
.text:00000000000074DD ; ---------------------------------------------------------------------------
.text:00000000000074DF                 align 20h
.text:00000000000074E0
.text:00000000000074E0 loc_74E0:                               ; CODE XREF: postorder+1A↓j
.text:00000000000074E0                                         ; postorder+23↓j ...
.text:00000000000074E0                 mov     rbx, rax
.text:00000000000074E3
.text:00000000000074E3 loc_74E3:                               ; CODE XREF: postorder+D↑j
.text:00000000000074E3                 mov     rax, [rbx+8]
.text:00000000000074E7                 test    rax, rax
.text:00000000000074EA                 jnz     short loc_74E0
.text:00000000000074EC                 mov     rax, [rbx+10h]
.text:00000000000074F0                 test    rax, rax
.text:00000000000074F3                 jnz     short loc_74E0
.text:00000000000074F5                 mov     rsi, rbx
.text:00000000000074F8                 mov     rdi, rbp
.text:00000000000074FB                 call    r12
.text:00000000000074FE                 test    eax, eax
.text:0000000000007500                 jnz     short loc_7536
.text:0000000000007502                 nop     word ptr [rax+rax+00h]
.text:0000000000007508
.text:0000000000007508 loc_7508:                               ; CODE XREF: postorder+64↓j
.text:0000000000007508                 mov     rdx, [rbx]
.text:000000000000750B                 test    rdx, rdx
.text:000000000000750E                 jz      short loc_7536
.text:0000000000007510                 mov     rax, [rdx+10h]
.text:0000000000007514                 cmp     rax, rbx
.text:0000000000007517                 mov     rbx, rdx
.text:000000000000751A                 setz    sil
.text:000000000000751E                 test    rax, rax
.text:0000000000007521                 setz    cl
.text:0000000000007524                 or      sil, cl
.text:0000000000007527                 jz      short loc_74E0
.text:0000000000007529                 mov     rsi, rbx
.text:000000000000752C                 mov     rdi, rbp
.text:000000000000752F                 call    r12
.text:0000000000007532                 test    eax, eax
.text:0000000000007534                 jz      short loc_7508
.text:0000000000007536
.text:0000000000007536 loc_7536:                               ; CODE XREF: postorder+30↑j
.text:0000000000007536                                         ; postorder+3E↑j
.text:0000000000007536                 pop     rbx
.text:0000000000007537                 pop     rbp
.text:0000000000007538                 pop     r12
.text:000000000000753A                 retn
.text:000000000000753A ; } // starts at 74D0
.text:000000000000753A postorder       endp
.text:000000000000753A
.text:000000000000753A ; ---------------------------------------------------------------------------
.text:000000000000753B                 align 20h
.text:0000000000007540
.text:0000000000007540 ; =============== S U B R O U T I N E =======================================
.text:0000000000007540
.text:0000000000007540
.text:0000000000007540 preorder        proc near               ; CODE XREF: re_compile_internal+61B↓p
.text:0000000000007540                                         ; re_compile_internal+6A3↓p
.text:0000000000007540 ; __unwind {
.text:0000000000007540                 push    r12
.text:0000000000007542                 mov     r12, rsi
.text:0000000000007545                 push    rbp
.text:0000000000007546                 mov     rbp, rdx
.text:0000000000007549                 push    rbx
.text:000000000000754A                 mov     rbx, rdi
.text:000000000000754D                 jmp     short loc_7553
.text:000000000000754D ; ---------------------------------------------------------------------------
.text:000000000000754F                 align 10h
.text:0000000000007550
.text:0000000000007550 loc_7550:                               ; CODE XREF: preorder+29↓j
.text:0000000000007550                                         ; preorder+3F↓j
.text:0000000000007550                 mov     rbx, rdx
.text:0000000000007553
.text:0000000000007553 loc_7553:                               ; CODE XREF: preorder+D↑j
.text:0000000000007553                 mov     rsi, rbx
.text:0000000000007556                 mov     rdi, rbp
.text:0000000000007559                 call    r12
.text:000000000000755C                 test    eax, eax
.text:000000000000755E                 jnz     short loc_758C
.text:0000000000007560                 mov     rdx, [rbx+8]
.text:0000000000007564                 xor     ecx, ecx
.text:0000000000007566                 test    rdx, rdx
.text:0000000000007569                 jnz     short loc_7550
.text:000000000000756B                 jmp     short loc_7573
.text:000000000000756B ; ---------------------------------------------------------------------------
.text:000000000000756D                 align 10h
.text:0000000000007570
.text:0000000000007570 loc_7570:                               ; CODE XREF: preorder+4A↓j
.text:0000000000007570                 mov     rbx, rdx
.text:0000000000007573
.text:0000000000007573 loc_7573:                               ; CODE XREF: preorder+2B↑j
.text:0000000000007573                 mov     rdx, [rbx+10h]
.text:0000000000007577                 cmp     rdx, rcx
.text:000000000000757A                 jz      short loc_7581
.text:000000000000757C                 test    rdx, rdx
.text:000000000000757F                 jnz     short loc_7550
.text:0000000000007581
.text:0000000000007581 loc_7581:                               ; CODE XREF: preorder+3A↑j
.text:0000000000007581                 mov     rdx, [rbx]
.text:0000000000007584                 mov     rcx, rbx
.text:0000000000007587                 test    rdx, rdx
.text:000000000000758A                 jnz     short loc_7570
.text:000000000000758C
.text:000000000000758C loc_758C:                               ; CODE XREF: preorder+1E↑j
.text:000000000000758C                 pop     rbx
.text:000000000000758D                 pop     rbp
.text:000000000000758E                 pop     r12
.text:0000000000007590                 retn
.text:0000000000007590 ; } // starts at 7540
.text:0000000000007590 preorder        endp
.text:0000000000007590
.text:0000000000007590 ; ---------------------------------------------------------------------------
.text:0000000000007591                 align 20h
.text:00000000000075A0
.text:00000000000075A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000075A0
.text:00000000000075A0
.text:00000000000075A0 re_string_realloc_buffers proc near     ; CODE XREF: extend_buffers+38↓p
.text:00000000000075A0                                         ; re_search_internal+24B↓p ...
.text:00000000000075A0 ; __unwind {
.text:00000000000075A0                 push    rbp
.text:00000000000075A1                 push    rbx
.text:00000000000075A2                 mov     rbp, rsi
.text:00000000000075A5                 mov     rbx, rdi
.text:00000000000075A8                 sub     rsp, 8
.text:00000000000075AC                 cmp     dword ptr [rdi+90h], 1
.text:00000000000075B3                 jle     short loc_75FD
.text:00000000000075B5                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:00000000000075BF                 cmp     rsi, rax
.text:00000000000075C2                 ja      short loc_7630
.text:00000000000075C4                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000075C8                 lea     rsi, ds:0[rsi*4] ; size
.text:00000000000075D0                 call    _realloc
.text:00000000000075D5                 test    rax, rax
.text:00000000000075D8                 jz      short loc_7630
.text:00000000000075DA                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000075DE                 mov     [rbx+10h], rax
.text:00000000000075E2                 test    rdi, rdi
.text:00000000000075E5                 jz      short loc_75FD
.text:00000000000075E7                 lea     rsi, ds:0[rbp*8] ; size
.text:00000000000075EF                 call    _realloc
.text:00000000000075F4                 test    rax, rax
.text:00000000000075F7                 jz      short loc_7630
.text:00000000000075F9                 mov     [rbx+18h], rax
.text:00000000000075FD
.text:00000000000075FD loc_75FD:                               ; CODE XREF: re_string_realloc_buffers+13↑j
.text:00000000000075FD                                         ; re_string_realloc_buffers+45↑j
.text:00000000000075FD                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000007604                 jnz     short loc_7618
.text:0000000000007606
.text:0000000000007606 loc_7606:                               ; CODE XREF: re_string_realloc_buffers+8D↓j
.text:0000000000007606                 mov     [rbx+40h], rbp
.text:000000000000760A                 add     rsp, 8
.text:000000000000760E                 xor     eax, eax
.text:0000000000007610                 pop     rbx
.text:0000000000007611                 pop     rbp
.text:0000000000007612                 retn
.text:0000000000007612 ; ---------------------------------------------------------------------------
.text:0000000000007613                 align 8
.text:0000000000007618
.text:0000000000007618 loc_7618:                               ; CODE XREF: re_string_realloc_buffers+64↑j
.text:0000000000007618                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000761C                 mov     rsi, rbp        ; size
.text:000000000000761F                 call    _realloc
.text:0000000000007624                 test    rax, rax
.text:0000000000007627                 jz      short loc_7630
.text:0000000000007629                 mov     [rbx+8], rax
.text:000000000000762D                 jmp     short loc_7606
.text:000000000000762D ; ---------------------------------------------------------------------------
.text:000000000000762F                 align 10h
.text:0000000000007630
.text:0000000000007630 loc_7630:                               ; CODE XREF: re_string_realloc_buffers+22↑j
.text:0000000000007630                                         ; re_string_realloc_buffers+38↑j ...
.text:0000000000007630                 add     rsp, 8
.text:0000000000007634                 mov     eax, 0Ch
.text:0000000000007639                 pop     rbx
.text:000000000000763A                 pop     rbp
.text:000000000000763B                 retn
.text:000000000000763B ; } // starts at 75A0
.text:000000000000763B re_string_realloc_buffers endp
.text:000000000000763B
.text:000000000000763B ; ---------------------------------------------------------------------------
.text:000000000000763C                 align 20h
.text:0000000000007640
.text:0000000000007640 ; =============== S U B R O U T I N E =======================================
.text:0000000000007640
.text:0000000000007640
.text:0000000000007640 re_node_set_insert_last proc near       ; CODE XREF: register_state+75↓p
.text:0000000000007640                                         ; re_compile_internal+B61↓p
.text:0000000000007640 ; __unwind {
.text:0000000000007640                 push    rbp
.text:0000000000007641                 push    rbx
.text:0000000000007642                 mov     rbp, rsi
.text:0000000000007645                 mov     rbx, rdi
.text:0000000000007648                 sub     rsp, 8
.text:000000000000764C                 mov     rsi, [rdi+8]
.text:0000000000007650                 cmp     [rdi], rsi
.text:0000000000007653                 mov     rax, [rdi+10h]
.text:0000000000007657                 jz      short loc_7678
.text:0000000000007659
.text:0000000000007659 loc_7659:                               ; CODE XREF: re_node_set_insert_last+5C↓j
.text:0000000000007659                 lea     rdx, [rsi+1]
.text:000000000000765D                 mov     [rbx+8], rdx
.text:0000000000007661                 mov     [rax+rsi*8], rbp
.text:0000000000007665                 mov     eax, 1
.text:000000000000766A
.text:000000000000766A loc_766A:                               ; CODE XREF: re_node_set_insert_last+62↓j
.text:000000000000766A                 add     rsp, 8
.text:000000000000766E                 pop     rbx
.text:000000000000766F                 pop     rbp
.text:0000000000007670                 retn
.text:0000000000007670 ; ---------------------------------------------------------------------------
.text:0000000000007671                 align 8
.text:0000000000007678
.text:0000000000007678 loc_7678:                               ; CODE XREF: re_node_set_insert_last+17↑j
.text:0000000000007678                 add     rsi, 1
.text:000000000000767C                 lea     rdx, [rsi+rsi]
.text:0000000000007680                 shl     rsi, 4          ; size
.text:0000000000007684                 mov     [rdi], rdx
.text:0000000000007687                 mov     rdi, rax        ; ptr
.text:000000000000768A                 call    _realloc
.text:000000000000768F                 test    rax, rax
.text:0000000000007692                 jz      short loc_76A0
.text:0000000000007694                 mov     [rbx+10h], rax
.text:0000000000007698                 mov     rsi, [rbx+8]
.text:000000000000769C                 jmp     short loc_7659
.text:000000000000769C ; ---------------------------------------------------------------------------
.text:000000000000769E                 align 20h
.text:00000000000076A0
.text:00000000000076A0 loc_76A0:                               ; CODE XREF: re_node_set_insert_last+52↑j
.text:00000000000076A0                 xor     eax, eax
.text:00000000000076A2                 jmp     short loc_766A
.text:00000000000076A2 ; } // starts at 7640
.text:00000000000076A2 re_node_set_insert_last endp
.text:00000000000076A2
.text:00000000000076A2 ; ---------------------------------------------------------------------------
.text:00000000000076A4                 align 10h
.text:00000000000076B0
.text:00000000000076B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000076B0
.text:00000000000076B0
.text:00000000000076B0 re_node_set_insert proc near            ; CODE XREF: duplicate_node_closure+E0↓p
.text:00000000000076B0                                         ; duplicate_node_closure+11A↓p ...
.text:00000000000076B0 ; __unwind {
.text:00000000000076B0                 push    rbp
.text:00000000000076B1                 push    rbx
.text:00000000000076B2                 mov     rbp, rsi
.text:00000000000076B5                 mov     rbx, rdi
.text:00000000000076B8                 sub     rsp, 8
.text:00000000000076BC                 mov     rdx, [rdi]
.text:00000000000076BF                 test    rdx, rdx
.text:00000000000076C2                 jz      short loc_76E8
.text:00000000000076C4                 mov     rsi, [rdi+8]
.text:00000000000076C8                 mov     rax, [rdi+10h]
.text:00000000000076CC                 test    rsi, rsi
.text:00000000000076CF                 jnz     short loc_7720
.text:00000000000076D1                 mov     [rax], rbp
.text:00000000000076D4                 add     qword ptr [rdi+8], 1
.text:00000000000076D9                 mov     eax, 1
.text:00000000000076DE
.text:00000000000076DE loc_76DE:                               ; CODE XREF: re_node_set_insert+B1↓j
.text:00000000000076DE                                         ; re_node_set_insert+F7↓j ...
.text:00000000000076DE                 add     rsp, 8
.text:00000000000076E2                 pop     rbx
.text:00000000000076E3                 pop     rbp
.text:00000000000076E4                 retn
.text:00000000000076E4 ; ---------------------------------------------------------------------------
.text:00000000000076E5                 align 8
.text:00000000000076E8
.text:00000000000076E8 loc_76E8:                               ; CODE XREF: re_node_set_insert+12↑j
.text:00000000000076E8                 mov     qword ptr [rdi], 1
.text:00000000000076EF                 mov     qword ptr [rdi+8], 1
.text:00000000000076F7                 mov     edi, 8          ; size
.text:00000000000076FC                 call    _malloc
.text:0000000000007701                 test    rax, rax
.text:0000000000007704                 mov     [rbx+10h], rax
.text:0000000000007708                 jz      loc_7798
.text:000000000000770E                 mov     [rax], rbp
.text:0000000000007711                 add     rsp, 8
.text:0000000000007715                 mov     eax, 1
.text:000000000000771A                 pop     rbx
.text:000000000000771B                 pop     rbp
.text:000000000000771C                 retn
.text:000000000000771C ; ---------------------------------------------------------------------------
.text:000000000000771D                 align 20h
.text:0000000000007720
.text:0000000000007720 loc_7720:                               ; CODE XREF: re_node_set_insert+1F↑j
.text:0000000000007720                 cmp     rdx, rsi
.text:0000000000007723                 jz      loc_77B0
.text:0000000000007729
.text:0000000000007729 loc_7729:                               ; CODE XREF: re_node_set_insert+120↓j
.text:0000000000007729                 cmp     [rax], rbp
.text:000000000000772C                 lea     rdx, ds:0[rsi*8]
.text:0000000000007734                 jle     short loc_7770
.text:0000000000007736                 test    rsi, rsi
.text:0000000000007739                 jle     short loc_7753
.text:000000000000773B                 add     rdx, rax
.text:000000000000773E                 xchg    ax, ax
.text:0000000000007740
.text:0000000000007740 loc_7740:                               ; CODE XREF: re_node_set_insert+9F↓j
.text:0000000000007740                 mov     rcx, [rdx-8]
.text:0000000000007744                 sub     rdx, 8
.text:0000000000007748                 mov     [rdx+8], rcx
.text:000000000000774C                 cmp     rax, rdx
.text:000000000000774F                 jnz     short loc_7740
.text:0000000000007751                 xor     edx, edx
.text:0000000000007753
.text:0000000000007753 loc_7753:                               ; CODE XREF: re_node_set_insert+89↑j
.text:0000000000007753                                         ; re_node_set_insert+C8↓j ...
.text:0000000000007753                 mov     [rax+rdx], rbp
.text:0000000000007757                 mov     eax, 1
.text:000000000000775C                 add     qword ptr [rbx+8], 1
.text:0000000000007761                 jmp     loc_76DE
.text:0000000000007761 ; ---------------------------------------------------------------------------
.text:0000000000007766                 align 10h
.text:0000000000007770
.text:0000000000007770 loc_7770:                               ; CODE XREF: re_node_set_insert+84↑j
.text:0000000000007770                 mov     rcx, [rax+rdx-8]
.text:0000000000007775                 cmp     rbp, rcx
.text:0000000000007778                 jge     short loc_7753
.text:000000000000777A                 nop     word ptr [rax+rax+00h]
.text:0000000000007780
.text:0000000000007780 loc_7780:                               ; CODE XREF: re_node_set_insert+E0↓j
.text:0000000000007780                 mov     [rax+rdx], rcx
.text:0000000000007784                 sub     rdx, 8
.text:0000000000007788                 mov     rcx, [rax+rdx-8]
.text:000000000000778D                 cmp     rcx, rbp
.text:0000000000007790                 jg      short loc_7780
.text:0000000000007792                 jmp     short loc_7753
.text:0000000000007792 ; ---------------------------------------------------------------------------
.text:0000000000007794                 align 8
.text:0000000000007798
.text:0000000000007798 loc_7798:                               ; CODE XREF: re_node_set_insert+58↑j
.text:0000000000007798                 mov     qword ptr [rbx+8], 0
.text:00000000000077A0                 mov     qword ptr [rbx], 0
.text:00000000000077A7                 jmp     loc_76DE
.text:00000000000077A7 ; ---------------------------------------------------------------------------
.text:00000000000077AC                 align 10h
.text:00000000000077B0
.text:00000000000077B0 loc_77B0:                               ; CODE XREF: re_node_set_insert+73↑j
.text:00000000000077B0                 lea     rdx, [rsi+rsi]
.text:00000000000077B4                 shl     rsi, 4          ; size
.text:00000000000077B8                 mov     [rdi], rdx
.text:00000000000077BB                 mov     rdi, rax        ; ptr
.text:00000000000077BE                 call    _realloc
.text:00000000000077C3                 test    rax, rax
.text:00000000000077C6                 jz      short loc_77D5
.text:00000000000077C8                 mov     [rbx+10h], rax
.text:00000000000077CC                 mov     rsi, [rbx+8]
.text:00000000000077D0                 jmp     loc_7729
.text:00000000000077D5 ; ---------------------------------------------------------------------------
.text:00000000000077D5
.text:00000000000077D5 loc_77D5:                               ; CODE XREF: re_node_set_insert+116↑j
.text:00000000000077D5                 xor     eax, eax
.text:00000000000077D7                 jmp     loc_76DE
.text:00000000000077D7 ; } // starts at 76B0
.text:00000000000077D7 re_node_set_insert endp
.text:00000000000077D7
.text:00000000000077D7 ; ---------------------------------------------------------------------------
.text:00000000000077DC                 align 20h
.text:00000000000077E0
.text:00000000000077E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000077E0
.text:00000000000077E0
.text:00000000000077E0 register_state  proc near               ; CODE XREF: re_acquire_state_context+201↓p
.text:00000000000077E0                                         ; re_acquire_state+186↓p
.text:00000000000077E0 ; __unwind {
.text:00000000000077E0                 push    r14
.text:00000000000077E2                 push    r13
.text:00000000000077E4                 mov     r14, rdi
.text:00000000000077E7                 push    r12
.text:00000000000077E9                 push    rbp
.text:00000000000077EA                 mov     r12, rdx
.text:00000000000077ED                 push    rbx
.text:00000000000077EE                 mov     rbx, [rsi+10h]
.text:00000000000077F2                 mov     rbp, rsi
.text:00000000000077F5                 mov     [rsi], rdx
.text:00000000000077F8                 mov     qword ptr [rsi+28h], 0
.text:0000000000007800                 lea     r13, [rsi+20h]
.text:0000000000007804                 lea     rdi, ds:0[rbx*8] ; size
.text:000000000000780C                 mov     [rsi+20h], rbx
.text:0000000000007810                 call    _malloc
.text:0000000000007815                 test    rax, rax
.text:0000000000007818                 mov     [rbp+30h], rax
.text:000000000000781C                 jz      short loc_785E
.text:000000000000781E                 test    rbx, rbx
.text:0000000000007821                 jle     short loc_7870
.text:0000000000007823                 xor     ebx, ebx
.text:0000000000007825                 jmp     short loc_783A
.text:0000000000007825 ; ---------------------------------------------------------------------------
.text:0000000000007827                 align 10h
.text:0000000000007830
.text:0000000000007830 loc_7830:                               ; CODE XREF: register_state+70↓j
.text:0000000000007830                                         ; register_state+7C↓j
.text:0000000000007830                 add     rbx, 1
.text:0000000000007834                 cmp     [rbp+10h], rbx
.text:0000000000007838                 jle     short loc_7870
.text:000000000000783A
.text:000000000000783A loc_783A:                               ; CODE XREF: register_state+45↑j
.text:000000000000783A                 mov     rax, [rbp+18h]
.text:000000000000783E                 mov     rsi, [rax+rbx*8]
.text:0000000000007842                 mov     rax, rsi
.text:0000000000007845                 shl     rax, 4
.text:0000000000007849                 add     rax, [r14]
.text:000000000000784C                 test    byte ptr [rax+8], 8
.text:0000000000007850                 jnz     short loc_7830
.text:0000000000007852                 mov     rdi, r13
.text:0000000000007855                 call    re_node_set_insert_last
.text:000000000000785A                 test    al, al
.text:000000000000785C                 jnz     short loc_7830
.text:000000000000785E
.text:000000000000785E loc_785E:                               ; CODE XREF: register_state+3C↑j
.text:000000000000785E                                         ; register_state+D9↓j
.text:000000000000785E                 pop     rbx
.text:000000000000785F                 mov     eax, 0Ch
.text:0000000000007864                 pop     rbp
.text:0000000000007865                 pop     r12
.text:0000000000007867                 pop     r13
.text:0000000000007869                 pop     r14
.text:000000000000786B                 retn
.text:000000000000786B ; ---------------------------------------------------------------------------
.text:000000000000786C                 align 10h
.text:0000000000007870
.text:0000000000007870 loc_7870:                               ; CODE XREF: register_state+41↑j
.text:0000000000007870                                         ; register_state+58↑j
.text:0000000000007870                 and     r12, [r14+88h]
.text:0000000000007877                 mov     rax, [r14+40h]
.text:000000000000787B                 lea     rdx, [r12+r12*2]
.text:000000000000787F                 lea     rbx, [rax+rdx*8]
.text:0000000000007883                 mov     rdx, [rbx]
.text:0000000000007886                 cmp     [rbx+8], rdx
.text:000000000000788A                 mov     rax, [rbx+10h]
.text:000000000000788E                 lea     rsi, [rdx+1]
.text:0000000000007892                 jle     short loc_78A6
.text:0000000000007894
.text:0000000000007894 loc_7894:                               ; CODE XREF: register_state+EA↓j
.text:0000000000007894                 mov     [rbx], rsi
.text:0000000000007897                 mov     [rax+rdx*8], rbp
.text:000000000000789B                 xor     eax, eax
.text:000000000000789D                 pop     rbx
.text:000000000000789E                 pop     rbp
.text:000000000000789F                 pop     r12
.text:00000000000078A1                 pop     r13
.text:00000000000078A3                 pop     r14
.text:00000000000078A5                 retn
.text:00000000000078A6 ; ---------------------------------------------------------------------------
.text:00000000000078A6
.text:00000000000078A6 loc_78A6:                               ; CODE XREF: register_state+B2↑j
.text:00000000000078A6                 lea     r12, [rsi+rsi]
.text:00000000000078AA                 mov     rdi, rax        ; ptr
.text:00000000000078AD                 shl     rsi, 4          ; size
.text:00000000000078B1                 call    _realloc
.text:00000000000078B6                 test    rax, rax
.text:00000000000078B9                 jz      short loc_785E
.text:00000000000078BB                 mov     rdx, [rbx]
.text:00000000000078BE                 mov     [rbx+10h], rax
.text:00000000000078C2                 mov     [rbx+8], r12
.text:00000000000078C6                 lea     rsi, [rdx+1]
.text:00000000000078CA                 jmp     short loc_7894
.text:00000000000078CA ; } // starts at 77E0
.text:00000000000078CA register_state  endp
.text:00000000000078CA
.text:00000000000078CA ; ---------------------------------------------------------------------------
.text:00000000000078CC                 align 10h
.text:00000000000078D0
.text:00000000000078D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000078D0
.text:00000000000078D0
.text:00000000000078D0 build_upper_buffer proc near            ; CODE XREF: extend_buffers:loc_8270↓p
.text:00000000000078D0                                         ; re_string_reconstruct+673↓p ...
.text:00000000000078D0 ; __unwind {
.text:00000000000078D0                 push    r12
.text:00000000000078D2                 mov     r12, [rdi+58h]
.text:00000000000078D6                 cmp     [rdi+40h], r12
.text:00000000000078DA                 push    rbp
.text:00000000000078DB                 mov     rbp, rdi
.text:00000000000078DE                 cmovle  r12, [rdi+40h]
.text:00000000000078E3                 push    rbx
.text:00000000000078E4                 mov     rbx, [rdi+30h]
.text:00000000000078E8                 cmp     r12, rbx
.text:00000000000078EB                 jle     short loc_7925
.text:00000000000078ED                 call    ___ctype_toupper_loc
.text:00000000000078F2                 nop     word ptr [rax+rax+00h]
.text:00000000000078F8
.text:00000000000078F8 loc_78F8:                               ; CODE XREF: build_upper_buffer+53↓j
.text:00000000000078F8                 mov     rdx, [rbp+0]
.text:00000000000078FC                 mov     rcx, [rbp+78h]
.text:0000000000007900                 add     rdx, rbx
.text:0000000000007903                 add     rdx, [rbp+28h]
.text:0000000000007907                 test    rcx, rcx
.text:000000000000790A                 movzx   edx, byte ptr [rdx]
.text:000000000000790D                 jnz     short loc_7938
.text:000000000000790F
.text:000000000000790F loc_790F:                               ; CODE XREF: build_upper_buffer+6C↓j
.text:000000000000790F                 mov     rsi, [rax]
.text:0000000000007912                 mov     rcx, [rbp+8]
.text:0000000000007916                 mov     edx, [rsi+rdx*4]
.text:0000000000007919                 mov     [rcx+rbx], dl
.text:000000000000791C                 add     rbx, 1
.text:0000000000007920                 cmp     r12, rbx
.text:0000000000007923                 jnz     short loc_78F8
.text:0000000000007925
.text:0000000000007925 loc_7925:                               ; CODE XREF: build_upper_buffer+1B↑j
.text:0000000000007925                 mov     [rbp+30h], rbx
.text:0000000000007929                 mov     [rbp+38h], rbx
.text:000000000000792D                 pop     rbx
.text:000000000000792E                 pop     rbp
.text:000000000000792F                 pop     r12
.text:0000000000007931                 retn
.text:0000000000007931 ; ---------------------------------------------------------------------------
.text:0000000000007932                 align 8
.text:0000000000007938
.text:0000000000007938 loc_7938:                               ; CODE XREF: build_upper_buffer+3D↑j
.text:0000000000007938                 movzx   edx, byte ptr [rcx+rdx]
.text:000000000000793C                 jmp     short loc_790F
.text:000000000000793C ; } // starts at 78D0
.text:000000000000793C build_upper_buffer endp
.text:000000000000793C
.text:000000000000793C ; ---------------------------------------------------------------------------
.text:000000000000793E                 align 20h
.text:0000000000007940
.text:0000000000007940 ; =============== S U B R O U T I N E =======================================
.text:0000000000007940
.text:0000000000007940
.text:0000000000007940 build_wcs_buffer proc near              ; CODE XREF: extend_buffers+113↓p
.text:0000000000007940                                         ; re_string_reconstruct:loc_AE48↓p ...
.text:0000000000007940
.text:0000000000007940 var_8C          = dword ptr -8Ch
.text:0000000000007940 var_88          = byte ptr -88h
.text:0000000000007940 var_40          = qword ptr -40h
.text:0000000000007940
.text:0000000000007940 ; __unwind {
.text:0000000000007940                 push    r15
.text:0000000000007942                 push    r14
.text:0000000000007944                 push    r13
.text:0000000000007946                 push    r12
.text:0000000000007948                 push    rbp
.text:0000000000007949                 push    rbx
.text:000000000000794A                 mov     rbx, rdi
.text:000000000000794D                 sub     rsp, 68h
.text:0000000000007951                 mov     r12, [rdi+58h]
.text:0000000000007955                 mov     rbp, [rdi+30h]
.text:0000000000007959                 mov     rax, fs:28h
.text:0000000000007962                 mov     [rsp+98h+var_40], rax
.text:0000000000007967                 xor     eax, eax
.text:0000000000007969                 cmp     [rdi+40h], r12
.text:000000000000796D                 cmovle  r12, [rdi+40h]
.text:0000000000007972                 cmp     r12, rbp
.text:0000000000007975                 jle     loc_7A04
.text:000000000000797B                 lea     r14, [rdi+20h]
.text:000000000000797F                 lea     r13, [rsp+98h+var_8C]
.text:0000000000007984                 nop     dword ptr [rax+00h]
.text:0000000000007988
.text:0000000000007988 loc_7988:                               ; CODE XREF: build_wcs_buffer+C2↓j
.text:0000000000007988                                         ; build_wcs_buffer+F6↓j
.text:0000000000007988                 mov     rdi, [rbx+78h]
.text:000000000000798C                 mov     rdx, r12
.text:000000000000798F                 mov     r15, [rbx+20h]
.text:0000000000007993                 sub     rdx, rbp
.text:0000000000007996                 test    rdi, rdi
.text:0000000000007999                 jnz     loc_7A80
.text:000000000000799F                 mov     rsi, [rbx+28h]
.text:00000000000079A3                 add     rsi, rbp
.text:00000000000079A6                 add     rsi, [rbx]
.text:00000000000079A9
.text:00000000000079A9 loc_79A9:                               ; CODE XREF: build_wcs_buffer+151↓j
.text:00000000000079A9                                         ; build_wcs_buffer+167↓j ...
.text:00000000000079A9                 mov     rcx, r14
.text:00000000000079AC                 mov     rdi, r13
.text:00000000000079AF                 call    rpl_mbrtowc
.text:00000000000079B4                 lea     rdx, [rax-1]
.text:00000000000079B8                 cmp     rdx, 0FFFFFFFFFFFFFFFDh
.text:00000000000079BC                 ja      loc_7A50
.text:00000000000079C2                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000079C6                 mov     edx, [rsp+98h+var_8C]
.text:00000000000079CA                 jz      short loc_7A40
.text:00000000000079CC
.text:00000000000079CC loc_79CC:                               ; CODE XREF: build_wcs_buffer+137↓j
.text:00000000000079CC                 mov     rcx, [rbx+10h]
.text:00000000000079D0                 lea     rsi, [rbp+1]
.text:00000000000079D4                 lea     rdi, ds:0[rbp*4]
.text:00000000000079DC                 mov     [rcx+rbp*4], edx
.text:00000000000079DF                 add     rbp, rax
.text:00000000000079E2                 cmp     rsi, rbp
.text:00000000000079E5                 jge     short loc_7A30
.text:00000000000079E7                 lea     rdx, [rcx+rdi+4]
.text:00000000000079EC                 lea     rax, [rcx+rbp*4]
.text:00000000000079F0
.text:00000000000079F0 loc_79F0:                               ; CODE XREF: build_wcs_buffer+BD↓j
.text:00000000000079F0                 mov     dword ptr [rdx], 0FFFFFFFFh
.text:00000000000079F6                 add     rdx, 4
.text:00000000000079FA                 cmp     rax, rdx
.text:00000000000079FD                 jnz     short loc_79F0
.text:00000000000079FF                 cmp     rbp, r12
.text:0000000000007A02                 jl      short loc_7988
.text:0000000000007A04
.text:0000000000007A04 loc_7A04:                               ; CODE XREF: build_wcs_buffer+35↑j
.text:0000000000007A04                                         ; build_wcs_buffer+FC↓j ...
.text:0000000000007A04                 mov     rax, [rsp+98h+var_40]
.text:0000000000007A09                 xor     rax, fs:28h
.text:0000000000007A12                 mov     [rbx+30h], rbp
.text:0000000000007A16                 mov     [rbx+38h], rbp
.text:0000000000007A1A                 jnz     loc_7AFE
.text:0000000000007A20                 add     rsp, 68h
.text:0000000000007A24                 pop     rbx
.text:0000000000007A25                 pop     rbp
.text:0000000000007A26                 pop     r12
.text:0000000000007A28                 pop     r13
.text:0000000000007A2A                 pop     r14
.text:0000000000007A2C                 pop     r15
.text:0000000000007A2E                 retn
.text:0000000000007A2E ; ---------------------------------------------------------------------------
.text:0000000000007A2F                 align 10h
.text:0000000000007A30
.text:0000000000007A30 loc_7A30:                               ; CODE XREF: build_wcs_buffer+A5↑j
.text:0000000000007A30                 mov     rbp, rsi
.text:0000000000007A33                 cmp     rbp, r12
.text:0000000000007A36                 jl      loc_7988
.text:0000000000007A3C                 jmp     short loc_7A04
.text:0000000000007A3C ; ---------------------------------------------------------------------------
.text:0000000000007A3E                 align 20h
.text:0000000000007A40
.text:0000000000007A40 loc_7A40:                               ; CODE XREF: build_wcs_buffer+8A↑j
.text:0000000000007A40                 mov     rax, [rbx+58h]
.text:0000000000007A44                 cmp     [rbx+40h], rax
.text:0000000000007A48                 jl      loc_7AE8
.text:0000000000007A4E                 xchg    ax, ax
.text:0000000000007A50
.text:0000000000007A50 loc_7A50:                               ; CODE XREF: build_wcs_buffer+7C↑j
.text:0000000000007A50                 mov     rax, [rbx]
.text:0000000000007A53                 mov     rcx, [rbx+78h]
.text:0000000000007A57                 add     rax, rbp
.text:0000000000007A5A                 add     rax, [rbx+28h]
.text:0000000000007A5E                 test    rcx, rcx
.text:0000000000007A61                 movzx   edx, byte ptr [rax]
.text:0000000000007A64                 mov     [rsp+98h+var_8C], edx
.text:0000000000007A68                 jnz     loc_7AF1
.text:0000000000007A6E
.text:0000000000007A6E loc_7A6E:                               ; CODE XREF: build_wcs_buffer+1B9↓j
.text:0000000000007A6E                 mov     [rbx+20h], r15
.text:0000000000007A72                 mov     eax, 1
.text:0000000000007A77                 jmp     loc_79CC
.text:0000000000007A77 ; ---------------------------------------------------------------------------
.text:0000000000007A7C                 align 20h
.text:0000000000007A80
.text:0000000000007A80 loc_7A80:                               ; CODE XREF: build_wcs_buffer+59↑j
.text:0000000000007A80                 mov     ecx, [rbx+90h]
.text:0000000000007A86                 xor     eax, eax
.text:0000000000007A88                 lea     rsi, [rsp+98h+var_88]
.text:0000000000007A8D                 test    ecx, ecx
.text:0000000000007A8F                 jg      short loc_7AB1
.text:0000000000007A91                 jmp     loc_79A9
.text:0000000000007A91 ; ---------------------------------------------------------------------------
.text:0000000000007A96                 align 20h
.text:0000000000007AA0
.text:0000000000007AA0 loc_7AA0:                               ; CODE XREF: build_wcs_buffer+19B↓j
.text:0000000000007AA0                 add     rax, 1
.text:0000000000007AA4                 cmp     rdx, rax
.text:0000000000007AA7                 jz      loc_79A9
.text:0000000000007AAD                 mov     rdi, [rbx+78h]
.text:0000000000007AB1
.text:0000000000007AB1 loc_7AB1:                               ; CODE XREF: build_wcs_buffer+14F↑j
.text:0000000000007AB1                 mov     rcx, [rbx]
.text:0000000000007AB4                 add     rcx, rbp
.text:0000000000007AB7                 add     rcx, rax
.text:0000000000007ABA                 add     rcx, [rbx+28h]
.text:0000000000007ABE                 movzx   ecx, byte ptr [rcx]
.text:0000000000007AC1                 movzx   ecx, byte ptr [rdi+rcx]
.text:0000000000007AC5                 mov     rdi, [rbx+8]
.text:0000000000007AC9                 add     rdi, rbp
.text:0000000000007ACC                 mov     [rdi+rax], cl
.text:0000000000007ACF                 mov     [rsi+rax], cl
.text:0000000000007AD2                 lea     ecx, [rax+1]
.text:0000000000007AD5                 cmp     ecx, [rbx+90h]
.text:0000000000007ADB                 jl      short loc_7AA0
.text:0000000000007ADD                 jmp     loc_79A9
.text:0000000000007ADD ; ---------------------------------------------------------------------------
.text:0000000000007AE2                 align 8
.text:0000000000007AE8
.text:0000000000007AE8 loc_7AE8:                               ; CODE XREF: build_wcs_buffer+108↑j
.text:0000000000007AE8                 mov     [rbx+20h], r15
.text:0000000000007AEC                 jmp     loc_7A04
.text:0000000000007AF1 ; ---------------------------------------------------------------------------
.text:0000000000007AF1
.text:0000000000007AF1 loc_7AF1:                               ; CODE XREF: build_wcs_buffer+128↑j
.text:0000000000007AF1                 movzx   edx, byte ptr [rcx+rdx]
.text:0000000000007AF5                 mov     [rsp+98h+var_8C], edx
.text:0000000000007AF9                 jmp     loc_7A6E
.text:0000000000007AFE ; ---------------------------------------------------------------------------
.text:0000000000007AFE
.text:0000000000007AFE loc_7AFE:                               ; CODE XREF: build_wcs_buffer+DA↑j
.text:0000000000007AFE                 call    ___stack_chk_fail
.text:0000000000007AFE ; } // starts at 7940
.text:0000000000007AFE build_wcs_buffer endp
.text:0000000000007AFE
.text:0000000000007AFE ; ---------------------------------------------------------------------------
.text:0000000000007B03                 align 10h
.text:0000000000007B10
.text:0000000000007B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000007B10
.text:0000000000007B10
.text:0000000000007B10 build_wcs_upper_buffer proc near        ; CODE XREF: extend_buffers+95↓j
.text:0000000000007B10                                         ; re_string_reconstruct+12A↓p ...
.text:0000000000007B10
.text:0000000000007B10 var_D0          = qword ptr -0D0h
.text:0000000000007B10 src             = qword ptr -0C8h
.text:0000000000007B10 var_C0          = qword ptr -0C0h
.text:0000000000007B10 var_B8          = qword ptr -0B8h
.text:0000000000007B10 var_B0          = qword ptr -0B0h
.text:0000000000007B10 var_A8          = qword ptr -0A8h
.text:0000000000007B10 var_A0          = qword ptr -0A0h
.text:0000000000007B10 wc              = dword ptr -94h
.text:0000000000007B10 ps              = mbstate_t ptr -90h
.text:0000000000007B10 s               = byte ptr -88h
.text:0000000000007B10 var_40          = qword ptr -40h
.text:0000000000007B10
.text:0000000000007B10 ; __unwind {
.text:0000000000007B10                 push    r15
.text:0000000000007B12                 push    r14
.text:0000000000007B14                 mov     r14, rdi
.text:0000000000007B17                 push    r13
.text:0000000000007B19                 push    r12
.text:0000000000007B1B                 push    rbp
.text:0000000000007B1C                 push    rbx
.text:0000000000007B1D                 sub     rsp, 0A8h
.text:0000000000007B24                 mov     rbx, [rdi+58h]
.text:0000000000007B28                 mov     r15, [rdi+30h]
.text:0000000000007B2C                 mov     rax, fs:28h
.text:0000000000007B35                 mov     [rsp+0D8h+var_40], rax
.text:0000000000007B3D                 xor     eax, eax
.text:0000000000007B3F                 cmp     [rdi+40h], rbx
.text:0000000000007B43                 cmovle  rbx, [rdi+40h]
.text:0000000000007B48                 cmp     byte ptr [rdi+8Ah], 0
.text:0000000000007B4F                 jnz     short loc_7B5C
.text:0000000000007B51                 cmp     qword ptr [rdi+78h], 0
.text:0000000000007B56                 jz      loc_7CE0
.text:0000000000007B5C
.text:0000000000007B5C loc_7B5C:                               ; CODE XREF: build_wcs_upper_buffer+3F↑j
.text:0000000000007B5C                                         ; build_wcs_upper_buffer+1D7↓j
.text:0000000000007B5C                 mov     r13, [r14+38h]
.text:0000000000007B60
.text:0000000000007B60 loc_7B60:                               ; CODE XREF: build_wcs_upper_buffer+198↓j
.text:0000000000007B60                                         ; build_wcs_upper_buffer+1C2↓j ...
.text:0000000000007B60                 cmp     r15, rbx
.text:0000000000007B63                 jl      short loc_7BA0
.text:0000000000007B65
.text:0000000000007B65 loc_7B65:                               ; CODE XREF: build_wcs_upper_buffer+4D1↓j
.text:0000000000007B65                 mov     [r14+30h], r15
.text:0000000000007B69                 mov     [r14+38h], r13
.text:0000000000007B6D                 xor     eax, eax
.text:0000000000007B6F
.text:0000000000007B6F loc_7B6F:                               ; CODE XREF: build_wcs_upper_buffer+382↓j
.text:0000000000007B6F                                         ; build_wcs_upper_buffer+5EB↓j
.text:0000000000007B6F                 mov     rcx, [rsp+0D8h+var_40]
.text:0000000000007B77                 xor     rcx, fs:28h
.text:0000000000007B80                 jnz     loc_810A
.text:0000000000007B86                 add     rsp, 0A8h
.text:0000000000007B8D                 pop     rbx
.text:0000000000007B8E                 pop     rbp
.text:0000000000007B8F                 pop     r12
.text:0000000000007B91                 pop     r13
.text:0000000000007B93                 pop     r14
.text:0000000000007B95                 pop     r15
.text:0000000000007B97                 retn
.text:0000000000007B97 ; ---------------------------------------------------------------------------
.text:0000000000007B98                 align 20h
.text:0000000000007BA0
.text:0000000000007BA0 loc_7BA0:                               ; CODE XREF: build_wcs_upper_buffer+53↑j
.text:0000000000007BA0                 lea     rax, [r14+20h]
.text:0000000000007BA4                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000007BA9                 mov     rax, rbx
.text:0000000000007BAC                 sub     rax, r15
.text:0000000000007BAF                 mov     [rsp+0D8h+src], rax
.text:0000000000007BB4                 lea     rax, [rsp+0D8h+wc]
.text:0000000000007BB9                 mov     [rsp+0D8h+var_B8], rax
.text:0000000000007BBE
.text:0000000000007BBE loc_7BBE:                               ; CODE XREF: build_wcs_upper_buffer+41B↓j
.text:0000000000007BBE                 mov     rdx, [r14+78h]
.text:0000000000007BC2                 mov     rax, [r14+20h]
.text:0000000000007BC6                 test    rdx, rdx
.text:0000000000007BC9                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:0000000000007BCE                 jnz     loc_7ED9
.text:0000000000007BD4                 mov     rbp, [r14+28h]
.text:0000000000007BD8                 add     rbp, r13
.text:0000000000007BDB                 add     rbp, [r14]
.text:0000000000007BDE                 mov     [rsp+0D8h+var_C0], rbp
.text:0000000000007BE3
.text:0000000000007BE3 loc_7BE3:                               ; CODE XREF: build_wcs_upper_buffer+410↓j
.text:0000000000007BE3                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000007BE8                 mov     rdx, [rsp+0D8h+src]
.text:0000000000007BED                 mov     rsi, [rsp+0D8h+var_C0]
.text:0000000000007BF2                 mov     rdi, [rsp+0D8h+var_B8]
.text:0000000000007BF7                 call    rpl_mbrtowc
.text:0000000000007BFC                 mov     rbp, rax
.text:0000000000007BFF                 lea     rax, [rax-1]
.text:0000000000007C03                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:0000000000007C07                 mov     [rsp+0D8h+var_B8], rax
.text:0000000000007C0C                 ja      loc_7F49
.text:0000000000007C12                 mov     edx, [rsp+0D8h+wc]
.text:0000000000007C16                 mov     edi, edx        ; wc
.text:0000000000007C18                 mov     dword ptr [rsp+0D8h+src], edx
.text:0000000000007C1C                 call    _towupper
.text:0000000000007C21                 mov     edx, dword ptr [rsp+0D8h+src]
.text:0000000000007C25                 mov     r12d, eax
.text:0000000000007C28                 mov     [rsp+0D8h+var_D0], r15
.text:0000000000007C2D                 cmp     edx, eax
.text:0000000000007C2F                 jz      loc_7F30
.text:0000000000007C35                 lea     rcx, [rsp+0D8h+s]
.text:0000000000007C3A                 lea     rdx, [rsp+0D8h+ps] ; ps
.text:0000000000007C3F                 mov     esi, eax        ; wc
.text:0000000000007C41                 mov     rdi, rcx        ; s
.text:0000000000007C44                 mov     [rsp+0D8h+src], rcx
.text:0000000000007C49                 call    _wcrtomb
.text:0000000000007C4E                 cmp     rbp, rax
.text:0000000000007C51                 mov     r11, rax
.text:0000000000007C54                 mov     rcx, [rsp+0D8h+src]
.text:0000000000007C59                 jnz     loc_7FE6
.text:0000000000007C5F                 mov     rdi, [r14+8]
.text:0000000000007C63                 mov     rdx, rbp        ; n
.text:0000000000007C66                 mov     rsi, rcx        ; src
.text:0000000000007C69                 add     rdi, r15        ; dest
.text:0000000000007C6C                 call    _memcpy
.text:0000000000007C71
.text:0000000000007C71 loc_7C71:                               ; CODE XREF: build_wcs_upper_buffer+434↓j
.text:0000000000007C71                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000007C79                 lea     rax, [rbp+r13+0]
.text:0000000000007C7E                 jnz     loc_7FB5
.text:0000000000007C84
.text:0000000000007C84 loc_7C84:                               ; CODE XREF: build_wcs_upper_buffer+4C3↓j
.text:0000000000007C84                 add     r15, 1
.text:0000000000007C88                 mov     rsi, [rsp+0D8h+var_D0]
.text:0000000000007C8D                 mov     rdx, [r14+10h]
.text:0000000000007C91                 lea     rcx, [r15+rbp-1]
.text:0000000000007C96                 mov     r13, rax
.text:0000000000007C99                 cmp     r15, rcx
.text:0000000000007C9C                 lea     rax, ds:0[rsi*4]
.text:0000000000007CA4                 mov     [rdx+rsi*4], r12d
.text:0000000000007CA8                 jge     loc_7B60
.text:0000000000007CAE                 lea     rax, [rdx+rax+4]
.text:0000000000007CB3                 lea     rdx, [rdx+rcx*4]
.text:0000000000007CB7                 nop     word ptr [rax+rax+00000000h]
.text:0000000000007CC0
.text:0000000000007CC0 loc_7CC0:                               ; CODE XREF: build_wcs_upper_buffer+1BD↓j
.text:0000000000007CC0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000007CC6                 add     rax, 4
.text:0000000000007CCA                 cmp     rdx, rax
.text:0000000000007CCD                 jnz     short loc_7CC0
.text:0000000000007CCF                 mov     r15, rcx
.text:0000000000007CD2                 jmp     loc_7B60
.text:0000000000007CD2 ; ---------------------------------------------------------------------------
.text:0000000000007CD7                 align 20h
.text:0000000000007CE0
.text:0000000000007CE0 loc_7CE0:                               ; CODE XREF: build_wcs_upper_buffer+46↑j
.text:0000000000007CE0                 cmp     byte ptr [rdi+8Ch], 0
.text:0000000000007CE7                 jnz     loc_7B5C
.text:0000000000007CED                 cmp     r15, rbx
.text:0000000000007CF0                 jge     loc_7E88
.text:0000000000007CF6                 lea     rax, [rdi+20h]
.text:0000000000007CFA                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000007CFF                 lea     rax, [rsp+0D8h+wc]
.text:0000000000007D04                 mov     [rsp+0D8h+var_A8], rax
.text:0000000000007D09                 lea     rax, [rsp+0D8h+ps]
.text:0000000000007D0E                 mov     [rsp+0D8h+var_A0], rax
.text:0000000000007D13                 lea     rax, [rsp+0D8h+s]
.text:0000000000007D18                 mov     [rsp+0D8h+var_B0], rax
.text:0000000000007D1D                 nop     dword ptr [rax]
.text:0000000000007D20
.text:0000000000007D20 loc_7D20:                               ; CODE XREF: build_wcs_upper_buffer+2FD↓j
.text:0000000000007D20                 mov     rbp, [r14+28h]
.text:0000000000007D24                 mov     r13, r15
.text:0000000000007D27                 add     rbp, r15
.text:0000000000007D2A                 add     rbp, [r14]
.text:0000000000007D2D                 movzx   r12d, byte ptr [rbp+0]
.text:0000000000007D32                 test    r12b, 80h
.text:0000000000007D36                 jnz     short loc_7D4A
.text:0000000000007D38                 mov     rdi, [rsp+0D8h+var_D0] ; ps
.text:0000000000007D3D                 call    _mbsinit
.text:0000000000007D42                 test    eax, eax
.text:0000000000007D44                 jnz     loc_7E38
.text:0000000000007D4A
.text:0000000000007D4A loc_7D4A:                               ; CODE XREF: build_wcs_upper_buffer+226↑j
.text:0000000000007D4A                 mov     rax, [r14+20h]
.text:0000000000007D4E                 mov     rdi, [rsp+0D8h+var_A8]
.text:0000000000007D53                 mov     rdx, rbx
.text:0000000000007D56                 mov     rcx, [rsp+0D8h+var_D0]
.text:0000000000007D5B                 sub     rdx, r15
.text:0000000000007D5E                 mov     rsi, rbp
.text:0000000000007D61                 mov     [rsp+0D8h+src], rdx
.text:0000000000007D66                 mov     qword ptr [rsp+0D8h+ps.__count], rax
.text:0000000000007D6B                 mov     [rsp+0D8h+var_B8], rdi
.text:0000000000007D70                 call    rpl_mbrtowc
.text:0000000000007D75                 mov     rbp, rax
.text:0000000000007D78                 lea     rax, [rax-1]
.text:0000000000007D7C                 cmp     rax, 0FFFFFFFFFFFFFFFCh
.text:0000000000007D80                 ja      loc_7E68
.text:0000000000007D86                 mov     edx, [rsp+0D8h+wc]
.text:0000000000007D8A                 mov     edi, edx        ; wc
.text:0000000000007D8C                 mov     dword ptr [rsp+0D8h+var_C0], edx
.text:0000000000007D90                 call    _towupper
.text:0000000000007D95                 mov     edx, dword ptr [rsp+0D8h+var_C0]
.text:0000000000007D99                 mov     r12d, eax
.text:0000000000007D9C                 cmp     edx, eax
.text:0000000000007D9E                 jz      short loc_7E18
.text:0000000000007DA0                 mov     rdx, [rsp+0D8h+var_A0] ; ps
.text:0000000000007DA5                 mov     rdi, [rsp+0D8h+var_B0] ; s
.text:0000000000007DAA                 mov     esi, eax        ; wc
.text:0000000000007DAC                 call    _wcrtomb
.text:0000000000007DB1                 cmp     rbp, rax
.text:0000000000007DB4                 jnz     loc_7F28
.text:0000000000007DBA                 mov     rdi, [r14+8]
.text:0000000000007DBE                 mov     rsi, [rsp+0D8h+var_B0] ; src
.text:0000000000007DC3                 mov     rdx, rbp        ; n
.text:0000000000007DC6                 add     rdi, r15        ; dest
.text:0000000000007DC9                 call    _memcpy
.text:0000000000007DCE
.text:0000000000007DCE loc_7DCE:                               ; CODE XREF: build_wcs_upper_buffer+321↓j
.text:0000000000007DCE                 add     r15, 1
.text:0000000000007DD2                 mov     rdx, [r14+10h]
.text:0000000000007DD6                 lea     rax, ds:0[r13*4]
.text:0000000000007DDE                 lea     rcx, [r15+rbp-1]
.text:0000000000007DE3                 cmp     r15, rcx
.text:0000000000007DE6                 mov     [rdx+r13*4], r12d
.text:0000000000007DEA                 jge     short loc_7E0A
.text:0000000000007DEC                 lea     rax, [rdx+rax+4]
.text:0000000000007DF1                 lea     rdx, [rdx+rcx*4]
.text:0000000000007DF5                 nop     dword ptr [rax]
.text:0000000000007DF8
.text:0000000000007DF8 loc_7DF8:                               ; CODE XREF: build_wcs_upper_buffer+2F5↓j
.text:0000000000007DF8                 mov     dword ptr [rax], 0FFFFFFFFh
.text:0000000000007DFE                 add     rax, 4
.text:0000000000007E02                 cmp     rdx, rax
.text:0000000000007E05                 jnz     short loc_7DF8
.text:0000000000007E07                 mov     r15, rcx
.text:0000000000007E0A
.text:0000000000007E0A loc_7E0A:                               ; CODE XREF: build_wcs_upper_buffer+2DA↑j
.text:0000000000007E0A                                         ; build_wcs_upper_buffer+351↓j ...
.text:0000000000007E0A                 cmp     rbx, r15
.text:0000000000007E0D                 jg      loc_7D20
.text:0000000000007E13                 jmp     short loc_7E88
.text:0000000000007E13 ; ---------------------------------------------------------------------------
.text:0000000000007E15                 align 8
.text:0000000000007E18
.text:0000000000007E18 loc_7E18:                               ; CODE XREF: build_wcs_upper_buffer+28E↑j
.text:0000000000007E18                 mov     rsi, [r14+28h]
.text:0000000000007E1C                 mov     rdi, [r14+8]
.text:0000000000007E20                 mov     rdx, rbp        ; n
.text:0000000000007E23                 add     rsi, r15
.text:0000000000007E26                 add     rsi, [r14]      ; src
.text:0000000000007E29                 add     rdi, r15        ; dest
.text:0000000000007E2C                 call    _memcpy
.text:0000000000007E31                 jmp     short loc_7DCE
.text:0000000000007E31 ; ---------------------------------------------------------------------------
.text:0000000000007E33                 align 8
.text:0000000000007E38
.text:0000000000007E38 loc_7E38:                               ; CODE XREF: build_wcs_upper_buffer+234↑j
.text:0000000000007E38                 call    ___ctype_toupper_loc
.text:0000000000007E3D                 mov     rax, [rax]
.text:0000000000007E40                 mov     rdx, [r14+8]
.text:0000000000007E44                 mov     eax, [rax+r12*4]
.text:0000000000007E48                 mov     [rdx+r15], al
.text:0000000000007E4C                 mov     rdx, [r14+8]
.text:0000000000007E50                 mov     rax, [r14+10h]
.text:0000000000007E54                 movzx   edx, byte ptr [rdx+r15]
.text:0000000000007E59                 mov     [rax+r15*4], edx
.text:0000000000007E5D                 add     r15, 1
.text:0000000000007E61                 jmp     short loc_7E0A
.text:0000000000007E61 ; ---------------------------------------------------------------------------
.text:0000000000007E63                 align 8
.text:0000000000007E68
.text:0000000000007E68 loc_7E68:                               ; CODE XREF: build_wcs_upper_buffer+270↑j
.text:0000000000007E68                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:0000000000007E6C                 jnz     short loc_7EA0
.text:0000000000007E6E                 mov     rax, [r14+58h]
.text:0000000000007E72                 cmp     [r14+40h], rax
.text:0000000000007E76                 jge     short loc_7EA0
.text:0000000000007E78                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000007E7D                 mov     [r14+20h], rax
.text:0000000000007E81                 nop     dword ptr [rax+00000000h]
.text:0000000000007E88
.text:0000000000007E88 loc_7E88:                               ; CODE XREF: build_wcs_upper_buffer+1E0↑j
.text:0000000000007E88                                         ; build_wcs_upper_buffer+303↑j
.text:0000000000007E88                 mov     [r14+30h], r15
.text:0000000000007E8C                 mov     [r14+38h], r15
.text:0000000000007E90                 xor     eax, eax
.text:0000000000007E92                 jmp     loc_7B6F
.text:0000000000007E92 ; ---------------------------------------------------------------------------
.text:0000000000007E97                 align 20h
.text:0000000000007EA0
.text:0000000000007EA0 loc_7EA0:                               ; CODE XREF: build_wcs_upper_buffer+35C↑j
.text:0000000000007EA0                                         ; build_wcs_upper_buffer+366↑j
.text:0000000000007EA0                 mov     rax, [r14]
.text:0000000000007EA3                 mov     rdx, [r14+8]
.text:0000000000007EA7                 add     rax, r15
.text:0000000000007EAA                 add     rax, [r14+28h]
.text:0000000000007EAE                 movzx   eax, byte ptr [rax]
.text:0000000000007EB1                 mov     [rdx+r15], al
.text:0000000000007EB5                 mov     rdx, [r14+10h]
.text:0000000000007EB9                 add     r15, 1
.text:0000000000007EBD                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000007EC1                 mov     [rdx+r13*4], eax
.text:0000000000007EC5                 jnz     loc_7E0A
.text:0000000000007ECB                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000007ED0                 mov     [r14+20h], rax
.text:0000000000007ED4                 jmp     loc_7E0A
.text:0000000000007ED9 ; ---------------------------------------------------------------------------
.text:0000000000007ED9
.text:0000000000007ED9 loc_7ED9:                               ; CODE XREF: build_wcs_upper_buffer+BE↑j
.text:0000000000007ED9                 mov     eax, [r14+90h]
.text:0000000000007EE0                 test    eax, eax
.text:0000000000007EE2                 jle     loc_8100
.text:0000000000007EE8                 mov     rdi, [r14+28h]
.text:0000000000007EEC                 lea     r11d, [rax-1]
.text:0000000000007EF0                 lea     rcx, [rsp+0D8h+s]
.text:0000000000007EF5                 xor     eax, eax
.text:0000000000007EF7                 add     rdi, r13
.text:0000000000007EFA                 add     rdi, [r14]
.text:0000000000007EFD                 jmp     short loc_7F0A
.text:0000000000007EFF ; ---------------------------------------------------------------------------
.text:0000000000007EFF
.text:0000000000007EFF loc_7EFF:                               ; CODE XREF: build_wcs_upper_buffer+409↓j
.text:0000000000007EFF                 add     rax, 1
.text:0000000000007F03                 cmp     [rsp+0D8h+src], rax
.text:0000000000007F08                 jz      short loc_7F1B
.text:0000000000007F0A
.text:0000000000007F0A loc_7F0A:                               ; CODE XREF: build_wcs_upper_buffer+3ED↑j
.text:0000000000007F0A                 movzx   esi, byte ptr [rdi+rax]
.text:0000000000007F0E                 cmp     r11, rax
.text:0000000000007F11                 movzx   esi, byte ptr [rdx+rsi]
.text:0000000000007F15                 mov     [rcx+rax], sil
.text:0000000000007F19                 jnz     short loc_7EFF
.text:0000000000007F1B
.text:0000000000007F1B loc_7F1B:                               ; CODE XREF: build_wcs_upper_buffer+3F8↑j
.text:0000000000007F1B                                         ; build_wcs_upper_buffer+5F5↓j
.text:0000000000007F1B                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000007F20                 jmp     loc_7BE3
.text:0000000000007F20 ; ---------------------------------------------------------------------------
.text:0000000000007F25                 align 8
.text:0000000000007F28
.text:0000000000007F28 loc_7F28:                               ; CODE XREF: build_wcs_upper_buffer+2A4↑j
.text:0000000000007F28                 mov     r13, r15
.text:0000000000007F2B                 jmp     loc_7BBE
.text:0000000000007F30 ; ---------------------------------------------------------------------------
.text:0000000000007F30
.text:0000000000007F30 loc_7F30:                               ; CODE XREF: build_wcs_upper_buffer+11F↑j
.text:0000000000007F30                                         ; build_wcs_upper_buffer+4DA↓j
.text:0000000000007F30                 mov     rdi, [r14+8]
.text:0000000000007F34                 mov     rsi, [rsp+0D8h+var_C0] ; src
.text:0000000000007F39                 mov     rdx, rbp        ; n
.text:0000000000007F3C                 add     rdi, r15        ; dest
.text:0000000000007F3F                 call    _memcpy
.text:0000000000007F44                 jmp     loc_7C71
.text:0000000000007F49 ; ---------------------------------------------------------------------------
.text:0000000000007F49
.text:0000000000007F49 loc_7F49:                               ; CODE XREF: build_wcs_upper_buffer+FC↑j
.text:0000000000007F49                 cmp     [rsp+0D8h+var_B8], 0FFFFFFFFFFFFFFFDh
.text:0000000000007F4F                 jnz     short loc_7F5B
.text:0000000000007F51                 mov     rax, [r14+58h]
.text:0000000000007F55                 cmp     [r14+40h], rax
.text:0000000000007F59                 jl      short loc_7FD8
.text:0000000000007F5B
.text:0000000000007F5B loc_7F5B:                               ; CODE XREF: build_wcs_upper_buffer+43F↑j
.text:0000000000007F5B                 mov     rax, [r14]
.text:0000000000007F5E                 mov     rdx, [r14+78h]
.text:0000000000007F62                 add     rax, r13
.text:0000000000007F65                 add     rax, [r14+28h]
.text:0000000000007F69                 test    rdx, rdx
.text:0000000000007F6C                 movzx   eax, byte ptr [rax]
.text:0000000000007F6F                 jnz     loc_811C
.text:0000000000007F75
.text:0000000000007F75 loc_7F75:                               ; CODE XREF: build_wcs_upper_buffer+610↓j
.text:0000000000007F75                 mov     rdx, [r14+8]
.text:0000000000007F79                 mov     rcx, r15
.text:0000000000007F7C                 mov     [rdx+r15], al
.text:0000000000007F80                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000007F88                 jnz     loc_810F
.text:0000000000007F8E
.text:0000000000007F8E loc_7F8E:                               ; CODE XREF: build_wcs_upper_buffer+607↓j
.text:0000000000007F8E                 mov     rdx, [r14+10h]
.text:0000000000007F92                 add     r13, 1
.text:0000000000007F96                 add     r15, 1
.text:0000000000007F9A                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:0000000000007F9E                 mov     [rdx+rcx*4], eax
.text:0000000000007FA1                 jnz     loc_7B60
.text:0000000000007FA7                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000007FAC                 mov     [r14+20h], rax
.text:0000000000007FB0                 jmp     loc_7B60
.text:0000000000007FB5 ; ---------------------------------------------------------------------------
.text:0000000000007FB5
.text:0000000000007FB5 loc_7FB5:                               ; CODE XREF: build_wcs_upper_buffer+16E↑j
.text:0000000000007FB5                 mov     rdx, [r14+18h]
.text:0000000000007FB9                 mov     rcx, r15
.text:0000000000007FBC                 mov     r10, r13
.text:0000000000007FBF                 sub     rcx, r13
.text:0000000000007FC2                 lea     rdx, [rdx+rcx*8]
.text:0000000000007FC6
.text:0000000000007FC6 loc_7FC6:                               ; CODE XREF: build_wcs_upper_buffer+4C1↓j
.text:0000000000007FC6                 mov     [rdx+r10*8], r10
.text:0000000000007FCA                 add     r10, 1
.text:0000000000007FCE                 cmp     rax, r10
.text:0000000000007FD1                 jnz     short loc_7FC6
.text:0000000000007FD3                 jmp     loc_7C84
.text:0000000000007FD8 ; ---------------------------------------------------------------------------
.text:0000000000007FD8
.text:0000000000007FD8 loc_7FD8:                               ; CODE XREF: build_wcs_upper_buffer+449↑j
.text:0000000000007FD8                                         ; build_wcs_upper_buffer+4F3↓j
.text:0000000000007FD8                 mov     rax, qword ptr [rsp+0D8h+ps.__count]
.text:0000000000007FDD                 mov     [r14+20h], rax
.text:0000000000007FE1                 jmp     loc_7B65
.text:0000000000007FE6 ; ---------------------------------------------------------------------------
.text:0000000000007FE6
.text:0000000000007FE6 loc_7FE6:                               ; CODE XREF: build_wcs_upper_buffer+149↑j
.text:0000000000007FE6                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000007FEA                 jz      loc_7F30
.text:0000000000007FF0                 lea     rax, [rax+r15]
.text:0000000000007FF4                 mov     rsi, rax
.text:0000000000007FF7                 mov     [rsp+0D8h+var_D0], rax
.text:0000000000007FFC                 mov     rax, [r14+40h]
.text:0000000000008000                 cmp     rsi, rax
.text:0000000000008003                 ja      short loc_7FD8
.text:0000000000008005                 cmp     qword ptr [r14+18h], 0
.text:000000000000800A                 jz      loc_80C8
.text:0000000000008010
.text:0000000000008010 loc_8010:                               ; CODE XREF: build_wcs_upper_buffer+5E0↓j
.text:0000000000008010                 cmp     byte ptr [r14+8Ch], 0
.text:0000000000008018                 jnz     short loc_803A
.text:000000000000801A                 test    r15, r15
.text:000000000000801D                 jz      short loc_8032
.text:000000000000801F                 mov     rdx, [r14+18h]
.text:0000000000008023                 xor     eax, eax
.text:0000000000008025
.text:0000000000008025 loc_8025:                               ; CODE XREF: build_wcs_upper_buffer+520↓j
.text:0000000000008025                 mov     [rdx+rax*8], rax
.text:0000000000008029                 add     rax, 1
.text:000000000000802D                 cmp     rax, r15
.text:0000000000008030                 jnz     short loc_8025
.text:0000000000008032
.text:0000000000008032 loc_8032:                               ; CODE XREF: build_wcs_upper_buffer+50D↑j
.text:0000000000008032                 mov     byte ptr [r14+8Ch], 1
.text:000000000000803A
.text:000000000000803A loc_803A:                               ; CODE XREF: build_wcs_upper_buffer+508↑j
.text:000000000000803A                 mov     rdi, [r14+8]
.text:000000000000803E                 mov     rsi, rcx        ; src
.text:0000000000008041                 mov     rdx, r11        ; n
.text:0000000000008044                 mov     [rsp+0D8h+src], r11
.text:0000000000008049                 add     rdi, r15        ; dest
.text:000000000000804C                 call    _memcpy
.text:0000000000008051                 mov     rax, [r14+10h]
.text:0000000000008055                 mov     r11, [rsp+0D8h+src]
.text:000000000000805A                 lea     rcx, [rax+r15*4]
.text:000000000000805E                 mov     rax, [r14+18h]
.text:0000000000008062                 cmp     r11, 1
.text:0000000000008066                 mov     [rcx], r12d
.text:0000000000008069                 lea     rsi, [rax+r15*8]
.text:000000000000806D                 mov     [rsi], r13
.text:0000000000008070                 jbe     short loc_809A
.text:0000000000008072                 mov     eax, 1
.text:0000000000008077
.text:0000000000008077 loc_8077:                               ; CODE XREF: build_wcs_upper_buffer+588↓j
.text:0000000000008077                 mov     rdx, [rsp+0D8h+var_B8]
.text:000000000000807C                 cmp     rax, rbp
.text:000000000000807F                 cmovb   rdx, rax
.text:0000000000008083                 add     rdx, r13
.text:0000000000008086                 mov     [rsi+rax*8], rdx
.text:000000000000808A                 mov     dword ptr [rcx+rax*4], 0FFFFFFFFh
.text:0000000000008091                 add     rax, 1
.text:0000000000008095                 cmp     rax, r11
.text:0000000000008098                 jnz     short loc_8077
.text:000000000000809A
.text:000000000000809A loc_809A:                               ; CODE XREF: build_wcs_upper_buffer+560↑j
.text:000000000000809A                 mov     rbx, [r14+58h]
.text:000000000000809E                 sub     r11, rbp
.text:00000000000080A1                 add     rbx, r11
.text:00000000000080A4                 cmp     r13, [r14+60h]
.text:00000000000080A8                 mov     [r14+58h], rbx
.text:00000000000080AC                 jge     short loc_80B2
.text:00000000000080AE                 add     [r14+68h], r11
.text:00000000000080B2
.text:00000000000080B2 loc_80B2:                               ; CODE XREF: build_wcs_upper_buffer+59C↑j
.text:00000000000080B2                 cmp     [r14+40h], rbx
.text:00000000000080B6                 mov     r15, [rsp+0D8h+var_D0]
.text:00000000000080BB                 cmovle  rbx, [r14+40h]
.text:00000000000080C0                 add     r13, rbp
.text:00000000000080C3                 jmp     loc_7B60
.text:00000000000080C8 ; ---------------------------------------------------------------------------
.text:00000000000080C8
.text:00000000000080C8 loc_80C8:                               ; CODE XREF: build_wcs_upper_buffer+4FA↑j
.text:00000000000080C8                 lea     rdi, ds:0[rax*8] ; size
.text:00000000000080D0                 mov     [rsp+0D8h+var_C0], rcx
.text:00000000000080D5                 mov     [rsp+0D8h+src], r11
.text:00000000000080DA                 call    _malloc
.text:00000000000080DF                 test    rax, rax
.text:00000000000080E2                 mov     [r14+18h], rax
.text:00000000000080E6                 mov     r11, [rsp+0D8h+src]
.text:00000000000080EB                 mov     rcx, [rsp+0D8h+var_C0]
.text:00000000000080F0                 jnz     loc_8010
.text:00000000000080F6                 mov     eax, 0Ch
.text:00000000000080FB                 jmp     loc_7B6F
.text:0000000000008100 ; ---------------------------------------------------------------------------
.text:0000000000008100
.text:0000000000008100 loc_8100:                               ; CODE XREF: build_wcs_upper_buffer+3D2↑j
.text:0000000000008100                 lea     rcx, [rsp+0D8h+s]
.text:0000000000008105                 jmp     loc_7F1B
.text:000000000000810A ; ---------------------------------------------------------------------------
.text:000000000000810A
.text:000000000000810A loc_810A:                               ; CODE XREF: build_wcs_upper_buffer+70↑j
.text:000000000000810A                 call    ___stack_chk_fail
.text:000000000000810F ; ---------------------------------------------------------------------------
.text:000000000000810F
.text:000000000000810F loc_810F:                               ; CODE XREF: build_wcs_upper_buffer+478↑j
.text:000000000000810F                 mov     rdx, [r14+18h]
.text:0000000000008113                 mov     [rdx+r15*8], r13
.text:0000000000008117                 jmp     loc_7F8E
.text:000000000000811C ; ---------------------------------------------------------------------------
.text:000000000000811C
.text:000000000000811C loc_811C:                               ; CODE XREF: build_wcs_upper_buffer+45F↑j
.text:000000000000811C                 movzx   eax, byte ptr [rdx+rax]
.text:0000000000008120                 jmp     loc_7F75
.text:0000000000008120 ; } // starts at 7B10
.text:0000000000008120 build_wcs_upper_buffer endp
.text:0000000000008120
.text:0000000000008120 ; ---------------------------------------------------------------------------
.text:0000000000008125                 align 10h
.text:0000000000008130
.text:0000000000008130 ; =============== S U B R O U T I N E =======================================
.text:0000000000008130
.text:0000000000008130
.text:0000000000008130 extend_buffers  proc near               ; CODE XREF: clean_state_log_if_needed+26↓p
.text:0000000000008130                                         ; clean_state_log_if_needed+55↓p ...
.text:0000000000008130 ; __unwind {
.text:0000000000008130                 push    rbp
.text:0000000000008131                 push    rbx
.text:0000000000008132                 mov     rdx, 0FFFFFFFFFFFFFFEh
.text:000000000000813C                 sub     rsp, 8
.text:0000000000008140                 mov     rax, [rdi+40h]
.text:0000000000008144                 cmp     rax, rdx
.text:0000000000008147                 ja      loc_8258
.text:000000000000814D                 mov     rdx, [rdi+58h]
.text:0000000000008151                 add     rax, rax
.text:0000000000008154                 movsxd  rsi, esi
.text:0000000000008157                 mov     rbx, rdi
.text:000000000000815A                 cmp     rax, rdx
.text:000000000000815D                 cmovg   rax, rdx
.text:0000000000008161                 cmp     rax, rsi
.text:0000000000008164                 cmovge  rsi, rax
.text:0000000000008168                 call    re_string_realloc_buffers
.text:000000000000816D                 test    eax, eax
.text:000000000000816F                 mov     ebp, eax
.text:0000000000008171                 jnz     loc_822D
.text:0000000000008177                 mov     rdi, [rbx+0B8h] ; ptr
.text:000000000000817E                 test    rdi, rdi
.text:0000000000008181                 jz      short loc_81A4
.text:0000000000008183                 mov     rax, [rbx+40h]
.text:0000000000008187                 lea     rsi, ds:8[rax*8] ; size
.text:000000000000818F                 call    _realloc
.text:0000000000008194                 test    rax, rax
.text:0000000000008197                 jz      loc_8258
.text:000000000000819D                 mov     [rbx+0B8h], rax
.text:00000000000081A4
.text:00000000000081A4 loc_81A4:                               ; CODE XREF: extend_buffers+51↑j
.text:00000000000081A4                 cmp     byte ptr [rbx+88h], 0
.text:00000000000081AB                 mov     eax, [rbx+90h]
.text:00000000000081B1                 jz      short loc_81D0
.text:00000000000081B3                 cmp     eax, 1
.text:00000000000081B6                 mov     rdi, rbx
.text:00000000000081B9                 jle     loc_8270
.text:00000000000081BF                 add     rsp, 8
.text:00000000000081C3                 pop     rbx
.text:00000000000081C4                 pop     rbp
.text:00000000000081C5                 jmp     build_wcs_upper_buffer
.text:00000000000081C5 ; ---------------------------------------------------------------------------
.text:00000000000081CA                 align 10h
.text:00000000000081D0
.text:00000000000081D0 loc_81D0:                               ; CODE XREF: extend_buffers+81↑j
.text:00000000000081D0                 cmp     eax, 1
.text:00000000000081D3                 jg      short loc_8240
.text:00000000000081D5                 mov     rcx, [rbx+78h]
.text:00000000000081D9                 test    rcx, rcx
.text:00000000000081DC                 jz      short loc_822D
.text:00000000000081DE                 mov     rsi, [rbx+58h]
.text:00000000000081E2                 cmp     [rbx+40h], rsi
.text:00000000000081E6                 cmovle  rsi, [rbx+40h]
.text:00000000000081EB                 mov     rax, [rbx+30h]
.text:00000000000081EF                 cmp     rsi, rax
.text:00000000000081F2                 jg      short loc_8204
.text:00000000000081F4                 jmp     short loc_8225
.text:00000000000081F4 ; ---------------------------------------------------------------------------
.text:00000000000081F6                 align 20h
.text:0000000000008200
.text:0000000000008200 loc_8200:                               ; CODE XREF: extend_buffers+F3↓j
.text:0000000000008200                 mov     rcx, [rbx+78h]
.text:0000000000008204
.text:0000000000008204 loc_8204:                               ; CODE XREF: extend_buffers+C2↑j
.text:0000000000008204                 mov     rdx, [rbx]
.text:0000000000008207                 add     rdx, rax
.text:000000000000820A                 add     rdx, [rbx+28h]
.text:000000000000820E                 movzx   edx, byte ptr [rdx]
.text:0000000000008211                 movzx   ecx, byte ptr [rcx+rdx]
.text:0000000000008215                 mov     rdx, [rbx+8]
.text:0000000000008219                 mov     [rdx+rax], cl
.text:000000000000821C                 add     rax, 1
.text:0000000000008220                 cmp     rsi, rax
.text:0000000000008223                 jnz     short loc_8200
.text:0000000000008225
.text:0000000000008225 loc_8225:                               ; CODE XREF: extend_buffers+C4↑j
.text:0000000000008225                 mov     [rbx+30h], rax
.text:0000000000008229                 mov     [rbx+38h], rax
.text:000000000000822D
.text:000000000000822D loc_822D:                               ; CODE XREF: extend_buffers+41↑j
.text:000000000000822D                                         ; extend_buffers+AC↑j
.text:000000000000822D                 add     rsp, 8
.text:0000000000008231                 mov     eax, ebp
.text:0000000000008233                 pop     rbx
.text:0000000000008234                 pop     rbp
.text:0000000000008235                 retn
.text:0000000000008235 ; ---------------------------------------------------------------------------
.text:0000000000008236                 align 20h
.text:0000000000008240
.text:0000000000008240 loc_8240:                               ; CODE XREF: extend_buffers+A3↑j
.text:0000000000008240                 mov     rdi, rbx
.text:0000000000008243                 call    build_wcs_buffer
.text:0000000000008248                 add     rsp, 8
.text:000000000000824C                 mov     eax, ebp
.text:000000000000824E                 pop     rbx
.text:000000000000824F                 pop     rbp
.text:0000000000008250                 retn
.text:0000000000008250 ; ---------------------------------------------------------------------------
.text:0000000000008251                 align 8
.text:0000000000008258
.text:0000000000008258 loc_8258:                               ; CODE XREF: extend_buffers+17↑j
.text:0000000000008258                                         ; extend_buffers+67↑j
.text:0000000000008258                 mov     ebp, 0Ch
.text:000000000000825D                 add     rsp, 8
.text:0000000000008261                 mov     eax, ebp
.text:0000000000008263                 pop     rbx
.text:0000000000008264                 pop     rbp
.text:0000000000008265                 retn
.text:0000000000008265 ; ---------------------------------------------------------------------------
.text:0000000000008266                 align 10h
.text:0000000000008270
.text:0000000000008270 loc_8270:                               ; CODE XREF: extend_buffers+89↑j
.text:0000000000008270                 call    build_upper_buffer
.text:0000000000008275                 add     rsp, 8
.text:0000000000008279                 mov     eax, ebp
.text:000000000000827B                 pop     rbx
.text:000000000000827C                 pop     rbp
.text:000000000000827D                 retn
.text:000000000000827D ; } // starts at 8130
.text:000000000000827D extend_buffers  endp
.text:000000000000827D
.text:000000000000827D ; ---------------------------------------------------------------------------
.text:000000000000827E                 align 20h
.text:0000000000008280
.text:0000000000008280 ; =============== S U B R O U T I N E =======================================
.text:0000000000008280
.text:0000000000008280
.text:0000000000008280 clean_state_log_if_needed proc near     ; CODE XREF: get_subexp_sub_isra_32+F4↓j
.text:0000000000008280                                         ; transit_state_bkref_isra_34+330↓p ...
.text:0000000000008280 ; __unwind {
.text:0000000000008280                 push    r12
.text:0000000000008282                 push    rbp
.text:0000000000008283                 mov     rbp, rsi
.text:0000000000008286                 push    rbx
.text:0000000000008287                 mov     rax, [rdi+40h]
.text:000000000000828B                 mov     rbx, rdi
.text:000000000000828E                 mov     r12, [rdi+0C0h]
.text:0000000000008295                 cmp     rax, rsi
.text:0000000000008298                 jg      short loc_82C0
.text:000000000000829A                 cmp     rax, [rdi+58h]
.text:000000000000829E                 jge     short loc_82C0
.text:00000000000082A0                 lea     esi, [rbp+1]
.text:00000000000082A3                 mov     rdi, rbx
.text:00000000000082A6                 call    extend_buffers
.text:00000000000082AB                 test    eax, eax
.text:00000000000082AD                 jnz     short loc_82B6
.text:00000000000082AF
.text:00000000000082AF loc_82AF:                               ; CODE XREF: clean_state_log_if_needed+47↓j
.text:00000000000082AF                                         ; clean_state_log_if_needed+4D↓j ...
.text:00000000000082AF                 cmp     r12, rbp
.text:00000000000082B2                 jl      short loc_82E0
.text:00000000000082B4
.text:00000000000082B4 loc_82B4:                               ; CODE XREF: clean_state_log_if_needed+84↓j
.text:00000000000082B4                 xor     eax, eax
.text:00000000000082B6
.text:00000000000082B6 loc_82B6:                               ; CODE XREF: clean_state_log_if_needed+2D↑j
.text:00000000000082B6                                         ; clean_state_log_if_needed+5E↓j
.text:00000000000082B6                 pop     rbx
.text:00000000000082B7                 pop     rbp
.text:00000000000082B8                 pop     r12
.text:00000000000082BA                 retn
.text:00000000000082BA ; ---------------------------------------------------------------------------
.text:00000000000082BB                 align 20h
.text:00000000000082C0
.text:00000000000082C0 loc_82C0:                               ; CODE XREF: clean_state_log_if_needed+18↑j
.text:00000000000082C0                                         ; clean_state_log_if_needed+1E↑j
.text:00000000000082C0                 mov     rax, [rbx+30h]
.text:00000000000082C4                 cmp     rax, rbp
.text:00000000000082C7                 jg      short loc_82AF
.text:00000000000082C9                 cmp     rax, [rbx+58h]
.text:00000000000082CD                 jge     short loc_82AF
.text:00000000000082CF                 lea     esi, [rbp+1]
.text:00000000000082D2                 mov     rdi, rbx
.text:00000000000082D5                 call    extend_buffers
.text:00000000000082DA                 test    eax, eax
.text:00000000000082DC                 jz      short loc_82AF
.text:00000000000082DE                 jmp     short loc_82B6
.text:00000000000082E0 ; ---------------------------------------------------------------------------
.text:00000000000082E0
.text:00000000000082E0 loc_82E0:                               ; CODE XREF: clean_state_log_if_needed+32↑j
.text:00000000000082E0                 mov     rax, [rbx+0B8h]
.text:00000000000082E7                 mov     rdx, rbp
.text:00000000000082EA                 xor     esi, esi        ; c
.text:00000000000082EC                 sub     rdx, r12
.text:00000000000082EF                 shl     rdx, 3          ; n
.text:00000000000082F3                 lea     rdi, [rax+r12*8+8] ; s
.text:00000000000082F8                 call    _memset
.text:00000000000082FD                 mov     [rbx+0C0h], rbp
.text:0000000000008304                 jmp     short loc_82B4
.text:0000000000008304 ; } // starts at 8280
.text:0000000000008304 clean_state_log_if_needed endp
.text:0000000000008304
.text:0000000000008304 ; ---------------------------------------------------------------------------
.text:0000000000008306                 align 10h
.text:0000000000008310
.text:0000000000008310 ; =============== S U B R O U T I N E =======================================
.text:0000000000008310
.text:0000000000008310 ; Attributes: info_from_lumina
.text:0000000000008310
.text:0000000000008310 ; isl_union_flow_0 *__fastcall isl_union_flow_free_0(isl_union_flow_0 *flow)
.text:0000000000008310 isl_union_flow_free_0 proc near         ; CODE XREF: free_token+23↓j
.text:0000000000008310                                         ; build_charclass_op+1F3↓p ...
.text:0000000000008310 ; __unwind {
.text:0000000000008310                 push    rbx
.text:0000000000008311                 mov     rbx, rdi
.text:0000000000008314                 mov     rdi, [rdi]      ; ptr
.text:0000000000008317                 call    _free
.text:000000000000831C                 mov     rdi, [rbx+8]    ; ptr
.text:0000000000008320                 call    _free
.text:0000000000008325                 mov     rdi, [rbx+10h]  ; ptr
.text:0000000000008329                 call    _free
.text:000000000000832E                 mov     rdi, [rbx+18h]  ; ptr
.text:0000000000008332                 call    _free
.text:0000000000008337                 mov     rdi, rbx        ; ptr
.text:000000000000833A                 pop     rbx
.text:000000000000833B                 jmp     _free
.text:000000000000833B ; } // starts at 8310
.text:000000000000833B isl_union_flow_free_0 endp
.text:000000000000833B
.text:0000000000008340
.text:0000000000008340 ; =============== S U B R O U T I N E =======================================
.text:0000000000008340
.text:0000000000008340
.text:0000000000008340 free_token      proc near               ; CODE XREF: free_tree+8↓p
.text:0000000000008340                                         ; free_dfa_content+32↓p
.text:0000000000008340 ; __unwind {
.text:0000000000008340                 mov     eax, [rdi+8]
.text:0000000000008343                 and     eax, 400FFh
.text:0000000000008348                 cmp     eax, 6
.text:000000000000834B                 jz      short loc_8360
.text:000000000000834D                 cmp     eax, 3
.text:0000000000008350                 jz      short loc_8358
.text:0000000000008352                 rep retn
.text:0000000000008352 ; ---------------------------------------------------------------------------
.text:0000000000008354                 align 8
.text:0000000000008358
.text:0000000000008358 loc_8358:                               ; CODE XREF: free_token+10↑j
.text:0000000000008358                 mov     rdi, [rdi]      ; ptr
.text:000000000000835B                 jmp     _free
.text:0000000000008360 ; ---------------------------------------------------------------------------
.text:0000000000008360
.text:0000000000008360 loc_8360:                               ; CODE XREF: free_token+B↑j
.text:0000000000008360                 mov     rdi, [rdi]      ; ptr
.text:0000000000008363                 jmp     short isl_union_flow_free_0
.text:0000000000008363 ; } // starts at 8340
.text:0000000000008363 free_token      endp
.text:0000000000008363
.text:0000000000008363 ; ---------------------------------------------------------------------------
.text:0000000000008365                 align 10h
.text:0000000000008370
.text:0000000000008370 ; =============== S U B R O U T I N E =======================================
.text:0000000000008370
.text:0000000000008370
.text:0000000000008370 free_tree       proc near               ; DATA XREF: parse_expression+E1↓o
.text:0000000000008370                                         ; parse_expression+38C↓o ...
.text:0000000000008370 ; __unwind {
.text:0000000000008370                 lea     rdi, [rsi+28h]
.text:0000000000008374                 sub     rsp, 8
.text:0000000000008378                 call    free_token
.text:000000000000837D                 xor     eax, eax
.text:000000000000837F                 add     rsp, 8
.text:0000000000008383                 retn
.text:0000000000008383 ; } // starts at 8370
.text:0000000000008383 free_tree       endp
.text:0000000000008383
.text:0000000000008383 ; ---------------------------------------------------------------------------
.text:0000000000008384                 align 10h
.text:0000000000008390
.text:0000000000008390 ; =============== S U B R O U T I N E =======================================
.text:0000000000008390
.text:0000000000008390
.text:0000000000008390 re_dfa_add_node proc near               ; CODE XREF: duplicate_node+26↓p
.text:0000000000008390                                         ; calc_first+1E↓p
.text:0000000000008390
.text:0000000000008390 ptr             = qword ptr -48h
.text:0000000000008390 var_40          = qword ptr -40h
.text:0000000000008390
.text:0000000000008390 ; __unwind {
.text:0000000000008390                 push    r15
.text:0000000000008392                 push    r14
.text:0000000000008394                 mov     r14, rsi
.text:0000000000008397                 push    r13
.text:0000000000008399                 push    r12
.text:000000000000839B                 push    rbp
.text:000000000000839C                 push    rbx
.text:000000000000839D                 mov     rbx, rdi
.text:00000000000083A0                 sub     rsp, 18h
.text:00000000000083A4                 mov     rsi, [rdi+10h]
.text:00000000000083A8                 mov     rbp, [rdi+8]
.text:00000000000083AC                 cmp     rsi, rbp
.text:00000000000083AF                 jnb     loc_8460
.text:00000000000083B5                 mov     r12, [rdi+18h]
.text:00000000000083B9                 mov     rbp, [rdi+28h]
.text:00000000000083BD
.text:00000000000083BD loc_83BD:                               ; CODE XREF: re_dfa_add_node+187↓j
.text:00000000000083BD                 mov     rax, rsi
.text:00000000000083C0                 mov     ecx, edx
.text:00000000000083C2                 shl     rax, 4
.text:00000000000083C6                 add     rax, [rbx]
.text:00000000000083C9                 and     ecx, 0FFFC00FFh
.text:00000000000083CF                 mov     [rax+8], rdx
.text:00000000000083D3                 mov     [rax+8], ecx
.text:00000000000083D6                 xor     ecx, ecx
.text:00000000000083D8                 cmp     dl, 6
.text:00000000000083DB                 mov     [rax], r14
.text:00000000000083DE                 setz    cl
.text:00000000000083E1                 cmp     dl, 5
.text:00000000000083E4                 jnz     short loc_83F2
.text:00000000000083E6                 xor     ecx, ecx
.text:00000000000083E8                 cmp     dword ptr [rbx+0B4h], 1
.text:00000000000083EF                 setnle  cl
.text:00000000000083F2
.text:00000000000083F2 loc_83F2:                               ; CODE XREF: re_dfa_add_node+54↑j
.text:00000000000083F2                 movzx   edx, byte ptr [rax+0Ah]
.text:00000000000083F6                 shl     ecx, 4
.text:00000000000083F9                 pxor    xmm0, xmm0
.text:00000000000083FD                 and     edx, 0FFFFFFEFh
.text:0000000000008400                 or      edx, ecx
.text:0000000000008402                 mov     [rax+0Ah], dl
.text:0000000000008405                 mov     qword ptr [r12+rsi*8], 0FFFFFFFFFFFFFFFFh
.text:000000000000840D                 mov     rax, [rbx+10h]
.text:0000000000008411                 lea     rax, [rax+rax*2]
.text:0000000000008415                 lea     rax, [rbp+rax*8+0]
.text:000000000000841A                 movups  xmmword ptr [rax], xmm0
.text:000000000000841D                 mov     qword ptr [rax+10h], 0
.text:0000000000008425                 mov     rax, [rbx+10h]
.text:0000000000008429                 lea     rdx, [rax+rax*2]
.text:000000000000842D                 mov     rax, [rbx+30h]
.text:0000000000008431                 lea     rax, [rax+rdx*8]
.text:0000000000008435                 movups  xmmword ptr [rax], xmm0
.text:0000000000008438                 mov     qword ptr [rax+10h], 0
.text:0000000000008440                 mov     rax, [rbx+10h]
.text:0000000000008444                 lea     rdx, [rax+1]
.text:0000000000008448                 mov     [rbx+10h], rdx
.text:000000000000844C
.text:000000000000844C loc_844C:                               ; CODE XREF: re_dfa_add_node+1C9↓j
.text:000000000000844C                 add     rsp, 18h
.text:0000000000008450                 pop     rbx
.text:0000000000008451                 pop     rbp
.text:0000000000008452                 pop     r12
.text:0000000000008454                 pop     r13
.text:0000000000008456                 pop     r14
.text:0000000000008458                 pop     r15
.text:000000000000845A                 retn
.text:000000000000845A ; ---------------------------------------------------------------------------
.text:000000000000845B                 align 20h
.text:0000000000008460
.text:0000000000008460 loc_8460:                               ; CODE XREF: re_dfa_add_node+1F↑j
.text:0000000000008460                 lea     r13, [rbp+rbp+0]
.text:0000000000008465                 mov     rax, 0AAAAAAAAAAAAAAAh
.text:000000000000846F                 cmp     r13, rax
.text:0000000000008472                 ja      loc_8552
.text:0000000000008478                 mov     rdi, [rdi]      ; ptr
.text:000000000000847B                 mov     rsi, rbp
.text:000000000000847E                 mov     [rsp+48h+var_40], rdx
.text:0000000000008483                 shl     rsi, 5          ; size
.text:0000000000008487                 call    _realloc
.text:000000000000848C                 test    rax, rax
.text:000000000000848F                 jz      loc_8552
.text:0000000000008495                 mov     r15, rbp
.text:0000000000008498                 mov     rdi, [rbx+18h]  ; ptr
.text:000000000000849C                 mov     [rbx], rax
.text:000000000000849F                 shl     r15, 4
.text:00000000000084A3                 mov     rsi, r15        ; size
.text:00000000000084A6                 call    _realloc
.text:00000000000084AB                 mov     rdi, [rbx+20h]  ; ptr
.text:00000000000084AF                 mov     rsi, r15        ; size
.text:00000000000084B2                 lea     r15, [r13+rbp*4+0]
.text:00000000000084B7                 mov     r12, rax
.text:00000000000084BA                 shl     r15, 3
.text:00000000000084BE                 call    _realloc
.text:00000000000084C3                 mov     rdi, [rbx+28h]  ; ptr
.text:00000000000084C7                 mov     rsi, r15        ; size
.text:00000000000084CA                 mov     [rsp+48h+ptr], rax
.text:00000000000084CE                 call    _realloc
.text:00000000000084D3                 mov     rdi, [rbx+30h]  ; ptr
.text:00000000000084D7                 mov     rsi, r15        ; size
.text:00000000000084DA                 mov     rbp, rax
.text:00000000000084DD                 call    _realloc
.text:00000000000084E2                 test    r12, r12
.text:00000000000084E5                 mov     rcx, [rsp+48h+ptr]
.text:00000000000084E9                 jz      short loc_8520
.text:00000000000084EB                 test    rcx, rcx
.text:00000000000084EE                 jz      short loc_8520
.text:00000000000084F0                 test    rbp, rbp
.text:00000000000084F3                 jz      short loc_8520
.text:00000000000084F5                 test    rax, rax
.text:00000000000084F8                 mov     rdx, [rsp+48h+var_40]
.text:00000000000084FD                 jz      short loc_8520
.text:00000000000084FF                 mov     [rbx+18h], r12
.text:0000000000008503                 mov     [rbx+20h], rcx
.text:0000000000008507                 mov     [rbx+28h], rbp
.text:000000000000850B                 mov     [rbx+30h], rax
.text:000000000000850F                 mov     [rbx+8], r13
.text:0000000000008513                 mov     rsi, [rbx+10h]
.text:0000000000008517                 jmp     loc_83BD
.text:0000000000008517 ; ---------------------------------------------------------------------------
.text:000000000000851C                 align 20h
.text:0000000000008520
.text:0000000000008520 loc_8520:                               ; CODE XREF: re_dfa_add_node+159↑j
.text:0000000000008520                                         ; re_dfa_add_node+15E↑j ...
.text:0000000000008520                 mov     rdi, r12        ; ptr
.text:0000000000008523                 mov     [rsp+48h+var_40], rax
.text:0000000000008528                 mov     [rsp+48h+ptr], rcx
.text:000000000000852C                 call    _free
.text:0000000000008531                 mov     rcx, [rsp+48h+ptr]
.text:0000000000008535                 mov     rdi, rcx        ; ptr
.text:0000000000008538                 call    _free
.text:000000000000853D                 mov     rdi, rbp        ; ptr
.text:0000000000008540                 call    _free
.text:0000000000008545                 mov     rax, [rsp+48h+var_40]
.text:000000000000854A                 mov     rdi, rax        ; ptr
.text:000000000000854D                 call    _free
.text:0000000000008552
.text:0000000000008552 loc_8552:                               ; CODE XREF: re_dfa_add_node+E2↑j
.text:0000000000008552                                         ; re_dfa_add_node+FF↑j
.text:0000000000008552                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008559                 jmp     loc_844C
.text:0000000000008559 ; } // starts at 8390
.text:0000000000008559 re_dfa_add_node endp
.text:0000000000008559
.text:0000000000008559 ; ---------------------------------------------------------------------------
.text:000000000000855E                 align 20h
.text:0000000000008560
.text:0000000000008560 ; =============== S U B R O U T I N E =======================================
.text:0000000000008560
.text:0000000000008560
.text:0000000000008560 duplicate_node  proc near               ; CODE XREF: duplicate_node_closure+102↓p
.text:0000000000008560                                         ; duplicate_node_closure+148↓p ...
.text:0000000000008560 ; __unwind {
.text:0000000000008560                 push    r13
.text:0000000000008562                 push    r12
.text:0000000000008564                 mov     r13, rsi
.text:0000000000008567                 push    rbp
.text:0000000000008568                 push    rbx
.text:0000000000008569                 shl     r13, 4
.text:000000000000856D                 mov     rbp, rsi
.text:0000000000008570                 mov     r12d, edx
.text:0000000000008573                 mov     rbx, rdi
.text:0000000000008576                 sub     rsp, 8
.text:000000000000857A                 mov     rax, [rdi]
.text:000000000000857D                 mov     rsi, [rax+r13]
.text:0000000000008581                 mov     rdx, [rax+r13+8]
.text:0000000000008586                 call    re_dfa_add_node
.text:000000000000858B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000858F                 jz      short loc_85F4
.text:0000000000008591                 mov     edi, r12d
.text:0000000000008594                 mov     r8, [rbx]
.text:0000000000008597                 mov     rsi, rax
.text:000000000000859A                 and     di, 3FFh
.text:000000000000859F                 shl     rsi, 4
.text:00000000000085A3                 mov     ecx, edi
.text:00000000000085A5                 and     ecx, 3FFh
.text:00000000000085AB                 add     rsi, r8
.text:00000000000085AE                 shl     ecx, 8
.text:00000000000085B1                 mov     edx, ecx
.text:00000000000085B3                 mov     ecx, [rsi+8]
.text:00000000000085B6                 and     ecx, 0FFFC00FFh
.text:00000000000085BC                 or      ecx, edx
.text:00000000000085BE                 mov     [rsi+8], ecx
.text:00000000000085C1                 mov     edx, [r8+r13+8]
.text:00000000000085C6                 and     ecx, 0FFFC00FFh
.text:00000000000085CC                 shr     edx, 8
.text:00000000000085CF                 or      edx, edi
.text:00000000000085D1                 and     edx, 3FFh
.text:00000000000085D7                 shl     edx, 8
.text:00000000000085DA                 or      edx, ecx
.text:00000000000085DC                 mov     ecx, edx
.text:00000000000085DE                 mov     [rsi+8], edx
.text:00000000000085E1                 shr     ecx, 10h
.text:00000000000085E4                 mov     edx, ecx
.text:00000000000085E6                 or      edx, 4
.text:00000000000085E9                 mov     [rsi+0Ah], dl
.text:00000000000085EC                 mov     rdx, [rbx+20h]
.text:00000000000085F0                 mov     [rdx+rax*8], rbp
.text:00000000000085F4
.text:00000000000085F4 loc_85F4:                               ; CODE XREF: duplicate_node+2F↑j
.text:00000000000085F4                 add     rsp, 8
.text:00000000000085F8                 pop     rbx
.text:00000000000085F9                 pop     rbp
.text:00000000000085FA                 pop     r12
.text:00000000000085FC                 pop     r13
.text:00000000000085FE                 retn
.text:00000000000085FE ; } // starts at 8560
.text:00000000000085FE duplicate_node  endp
.text:00000000000085FE
.text:00000000000085FE ; ---------------------------------------------------------------------------
.text:00000000000085FF                 align 20h
.text:0000000000008600
.text:0000000000008600 ; =============== S U B R O U T I N E =======================================
.text:0000000000008600
.text:0000000000008600
.text:0000000000008600 duplicate_node_closure proc near        ; CODE XREF: duplicate_node_closure+17A↓p
.text:0000000000008600                                         ; calc_eclosure_iter+26A↓p
.text:0000000000008600
.text:0000000000008600 var_48          = qword ptr -48h
.text:0000000000008600 var_40          = qword ptr -40h
.text:0000000000008600
.text:0000000000008600 ; __unwind {
.text:0000000000008600                 push    r15
.text:0000000000008602                 push    r14
.text:0000000000008604                 mov     r9, rsi
.text:0000000000008607                 push    r13
.text:0000000000008609                 push    r12
.text:000000000000860B                 mov     r14, rdi
.text:000000000000860E                 push    rbp
.text:000000000000860F                 push    rbx
.text:0000000000008610                 mov     r13, rdx
.text:0000000000008613                 mov     ebp, r8d
.text:0000000000008616                 sub     rsp, 18h
.text:000000000000861A                 mov     [rsp+48h+var_40], rcx
.text:000000000000861F
.text:000000000000861F loc_861F:                               ; CODE XREF: duplicate_node_closure+125↓j
.text:000000000000861F                                         ; duplicate_node_closure+1E1↓j
.text:000000000000861F                 mov     r8, [r14]
.text:0000000000008622                 mov     rax, r9
.text:0000000000008625                 mov     rdi, [r14+28h]
.text:0000000000008629                 shl     rax, 4
.text:000000000000862D                 mov     r12, r13
.text:0000000000008630                 add     rax, r8
.text:0000000000008633                 cmp     byte ptr [rax+8], 4
.text:0000000000008637                 jz      loc_87F0
.text:000000000000863D                 lea     r12, [r9+r9*2]
.text:0000000000008641                 shl     r12, 3
.text:0000000000008645                 lea     rsi, [rdi+r12]
.text:0000000000008649                 mov     rcx, [rsi+8]
.text:000000000000864D                 test    rcx, rcx
.text:0000000000008650                 jz      loc_8849
.text:0000000000008656                 lea     rbx, [r13+r13*2+0]
.text:000000000000865B                 mov     rsi, [rsi+10h]
.text:000000000000865F                 shl     rbx, 3
.text:0000000000008663                 add     rdi, rbx
.text:0000000000008666                 cmp     rcx, 1
.text:000000000000866A                 mov     r15, [rsi]
.text:000000000000866D                 mov     qword ptr [rdi+8], 0
.text:0000000000008675                 jz      loc_8790
.text:000000000000867B                 mov     rdx, [r14+10h]
.text:000000000000867F                 lea     rsi, [rdx-1]
.text:0000000000008683                 mov     rax, rsi
.text:0000000000008686                 shl     rax, 4
.text:000000000000868A                 add     rax, r8
.text:000000000000868D                 test    byte ptr [rax+0Ah], 4
.text:0000000000008691                 jz      loc_8740
.text:0000000000008697                 test    rsi, rsi
.text:000000000000869A                 jle     loc_8740
.text:00000000000086A0                 shl     rdx, 4
.text:00000000000086A4                 sub     r8, rax
.text:00000000000086A7                 mov     rcx, [r14+20h]
.text:00000000000086AB                 lea     r8, [r8+rdx-20h]
.text:00000000000086B0                 jmp     short loc_86CA
.text:00000000000086B0 ; ---------------------------------------------------------------------------
.text:00000000000086B2                 align 8
.text:00000000000086B8
.text:00000000000086B8 loc_86B8:                               ; CODE XREF: duplicate_node_closure+CE↓j
.text:00000000000086B8                                         ; duplicate_node_closure+DE↓j
.text:00000000000086B8                 add     rax, r8
.text:00000000000086BB                 sub     rsi, 1
.text:00000000000086BF                 test    byte ptr [rax+0Ah], 4
.text:00000000000086C3                 jz      short loc_8740
.text:00000000000086C5                 test    rsi, rsi
.text:00000000000086C8                 jle     short loc_8740
.text:00000000000086CA
.text:00000000000086CA loc_86CA:                               ; CODE XREF: duplicate_node_closure+B0↑j
.text:00000000000086CA                 cmp     [rcx+rsi*8], r15
.text:00000000000086CE                 jnz     short loc_86B8
.text:00000000000086D0                 mov     edx, [rax+8]
.text:00000000000086D3                 shr     edx, 8
.text:00000000000086D6                 and     edx, 3FFh
.text:00000000000086DC                 cmp     ebp, edx
.text:00000000000086DE                 jnz     short loc_86B8
.text:00000000000086E0                 call    re_node_set_insert
.text:00000000000086E5                 test    al, al
.text:00000000000086E7                 jz      short loc_872B
.text:00000000000086E9
.text:00000000000086E9 loc_86E9:                               ; CODE XREF: duplicate_node_closure+181↓j
.text:00000000000086E9                 mov     rax, [r14+28h]
.text:00000000000086ED                 mov     edx, ebp
.text:00000000000086EF                 mov     rdi, r14
.text:00000000000086F2                 mov     rax, [rax+r12+10h]
.text:00000000000086F7                 mov     r9, [rax+8]
.text:00000000000086FB                 mov     rsi, r9
.text:00000000000086FE                 mov     [rsp+48h+var_48], r9
.text:0000000000008702                 call    duplicate_node
.text:0000000000008707                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000870B                 mov     r13, rax
.text:000000000000870E                 jz      short loc_872B
.text:0000000000008710
.text:0000000000008710 loc_8710:                               ; CODE XREF: duplicate_node_closure+244↓j
.text:0000000000008710                 add     rbx, [r14+28h]
.text:0000000000008714                 mov     rsi, r13
.text:0000000000008717                 mov     rdi, rbx
.text:000000000000871A                 call    re_node_set_insert
.text:000000000000871F                 test    al, al
.text:0000000000008721                 mov     r9, [rsp+48h+var_48]
.text:0000000000008725                 jnz     loc_861F
.text:000000000000872B
.text:000000000000872B loc_872B:                               ; CODE XREF: duplicate_node_closure+E7↑j
.text:000000000000872B                                         ; duplicate_node_closure+10E↑j ...
.text:000000000000872B                 mov     eax, 0Ch
.text:0000000000008730
.text:0000000000008730 loc_8730:                               ; CODE XREF: duplicate_node_closure+187↓j
.text:0000000000008730                                         ; duplicate_node_closure+257↓j ...
.text:0000000000008730                 add     rsp, 18h
.text:0000000000008734                 pop     rbx
.text:0000000000008735                 pop     rbp
.text:0000000000008736                 pop     r12
.text:0000000000008738                 pop     r13
.text:000000000000873A                 pop     r14
.text:000000000000873C                 pop     r15
.text:000000000000873E                 retn
.text:000000000000873E ; ---------------------------------------------------------------------------
.text:000000000000873F                 align 20h
.text:0000000000008740
.text:0000000000008740 loc_8740:                               ; CODE XREF: duplicate_node_closure+91↑j
.text:0000000000008740                                         ; duplicate_node_closure+9A↑j ...
.text:0000000000008740                 mov     edx, ebp
.text:0000000000008742                 mov     rsi, r15
.text:0000000000008745                 mov     rdi, r14
.text:0000000000008748                 call    duplicate_node
.text:000000000000874D                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008751                 mov     r13, rax
.text:0000000000008754                 jz      short loc_872B
.text:0000000000008756                 mov     rdi, [r14+28h]
.text:000000000000875A                 mov     rsi, r13
.text:000000000000875D                 add     rdi, rbx
.text:0000000000008760                 call    re_node_set_insert
.text:0000000000008765                 test    al, al
.text:0000000000008767                 jz      short loc_872B
.text:0000000000008769                 mov     rcx, [rsp+48h+var_40]
.text:000000000000876E                 mov     r8d, ebp
.text:0000000000008771                 mov     rdx, r13
.text:0000000000008774                 mov     rsi, r15
.text:0000000000008777                 mov     rdi, r14
.text:000000000000877A                 call    duplicate_node_closure
.text:000000000000877F                 test    eax, eax
.text:0000000000008781                 jz      loc_86E9
.text:0000000000008787                 jmp     short loc_8730
.text:0000000000008787 ; ---------------------------------------------------------------------------
.text:0000000000008789                 align 10h
.text:0000000000008790
.text:0000000000008790 loc_8790:                               ; CODE XREF: duplicate_node_closure+75↑j
.text:0000000000008790                 cmp     r9, [rsp+48h+var_40]
.text:0000000000008795                 jnz     short loc_87A0
.text:0000000000008797                 cmp     r9, r13
.text:000000000000879A                 jnz     loc_885C
.text:00000000000087A0
.text:00000000000087A0 loc_87A0:                               ; CODE XREF: duplicate_node_closure+195↑j
.text:00000000000087A0                 mov     eax, [rax+8]
.text:00000000000087A3                 mov     rsi, r15
.text:00000000000087A6                 mov     rdi, r14
.text:00000000000087A9                 shr     eax, 8
.text:00000000000087AC                 and     eax, 3FFh
.text:00000000000087B1                 or      ebp, eax
.text:00000000000087B3                 mov     edx, ebp
.text:00000000000087B5                 call    duplicate_node
.text:00000000000087BA                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000087BE                 mov     r13, rax
.text:00000000000087C1                 jz      loc_872B
.text:00000000000087C7                 add     rbx, [r14+28h]
.text:00000000000087CB                 mov     rsi, rax
.text:00000000000087CE                 mov     rdi, rbx
.text:00000000000087D1                 call    re_node_set_insert
.text:00000000000087D6                 test    al, al
.text:00000000000087D8                 jz      loc_872B
.text:00000000000087DE                 mov     r9, r15
.text:00000000000087E1                 jmp     loc_861F
.text:00000000000087E1 ; ---------------------------------------------------------------------------
.text:00000000000087E6                 align 10h
.text:00000000000087F0
.text:00000000000087F0 loc_87F0:                               ; CODE XREF: duplicate_node_closure+37↑j
.text:00000000000087F0                 mov     rax, [r14+18h]
.text:00000000000087F4                 lea     rbx, [r13+r13*2+0]
.text:00000000000087F9                 lea     r15, ds:0[r9*8]
.text:0000000000008801                 mov     edx, ebp
.text:0000000000008803                 shl     rbx, 3
.text:0000000000008807                 mov     r9, [rax+r9*8]
.text:000000000000880B                 mov     qword ptr [rdi+rbx+8], 0
.text:0000000000008814                 mov     rdi, r14
.text:0000000000008817                 mov     rsi, r9
.text:000000000000881A                 mov     [rsp+48h+var_48], r9
.text:000000000000881E                 call    duplicate_node
.text:0000000000008823                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008827                 mov     r13, rax
.text:000000000000882A                 mov     r9, [rsp+48h+var_48]
.text:000000000000882E                 jz      loc_872B
.text:0000000000008834                 mov     rax, [r14+18h]
.text:0000000000008838                 mov     [rsp+48h+var_48], r9
.text:000000000000883C                 mov     rcx, [rax+r15]
.text:0000000000008840                 mov     [rax+r12*8], rcx
.text:0000000000008844                 jmp     loc_8710
.text:0000000000008849 ; ---------------------------------------------------------------------------
.text:0000000000008849
.text:0000000000008849 loc_8849:                               ; CODE XREF: duplicate_node_closure+50↑j
.text:0000000000008849                 mov     rax, [r14+18h]
.text:000000000000884D                 mov     rcx, [rax+r9*8]
.text:0000000000008851                 mov     [rax+r13*8], rcx
.text:0000000000008855                 xor     eax, eax
.text:0000000000008857                 jmp     loc_8730
.text:000000000000885C ; ---------------------------------------------------------------------------
.text:000000000000885C
.text:000000000000885C loc_885C:                               ; CODE XREF: duplicate_node_closure+19A↑j
.text:000000000000885C                 mov     rsi, r15
.text:000000000000885F                 call    re_node_set_insert
.text:0000000000008864                 mov     edx, eax
.text:0000000000008866                 xor     eax, eax
.text:0000000000008868                 test    dl, dl
.text:000000000000886A                 jnz     loc_8730
.text:0000000000008870                 jmp     loc_872B
.text:0000000000008870 ; } // starts at 8600
.text:0000000000008870 duplicate_node_closure endp
.text:0000000000008870
.text:0000000000008870 ; ---------------------------------------------------------------------------
.text:0000000000008875                 align 20h
.text:0000000000008880
.text:0000000000008880 ; =============== S U B R O U T I N E =======================================
.text:0000000000008880
.text:0000000000008880
.text:0000000000008880 ; __int64 __fastcall free_state(void *ptr)
.text:0000000000008880 free_state      proc near               ; CODE XREF: free_dfa_content+FC↓p
.text:0000000000008880                                         ; re_acquire_state_context+211↓p ...
.text:0000000000008880 ; __unwind {
.text:0000000000008880                 push    rbx
.text:0000000000008881                 mov     rbx, rdi
.text:0000000000008884                 mov     rdi, [rdi+30h]  ; ptr
.text:0000000000008888                 call    _free
.text:000000000000888D                 mov     rdi, [rbx+48h]  ; ptr
.text:0000000000008891                 call    _free
.text:0000000000008896                 mov     rax, [rbx+50h]
.text:000000000000889A                 lea     rdx, [rbx+8]
.text:000000000000889E                 cmp     rax, rdx
.text:00000000000088A1                 jz      short loc_88B5
.text:00000000000088A3                 mov     rdi, [rax+10h]  ; ptr
.text:00000000000088A7                 call    _free
.text:00000000000088AC                 mov     rdi, [rbx+50h]  ; ptr
.text:00000000000088B0                 call    _free
.text:00000000000088B5
.text:00000000000088B5 loc_88B5:                               ; CODE XREF: free_state+21↑j
.text:00000000000088B5                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000088B9                 call    _free
.text:00000000000088BE                 mov     rdi, [rbx+60h]  ; ptr
.text:00000000000088C2                 call    _free
.text:00000000000088C7                 mov     rdi, [rbx+58h]  ; ptr
.text:00000000000088CB                 call    _free
.text:00000000000088D0                 mov     rdi, rbx        ; ptr
.text:00000000000088D3                 pop     rbx
.text:00000000000088D4                 jmp     _free
.text:00000000000088D4 ; } // starts at 8880
.text:00000000000088D4 free_state      endp
.text:00000000000088D4
.text:00000000000088D4 ; ---------------------------------------------------------------------------
.text:00000000000088D9                 align 20h
.text:00000000000088E0
.text:00000000000088E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000088E0
.text:00000000000088E0
.text:00000000000088E0 re_string_destruct proc near            ; CODE XREF: re_search_internal+B74↓p
.text:00000000000088E0                                         ; re_compile_internal+377↓p ...
.text:00000000000088E0 ; __unwind {
.text:00000000000088E0                 push    rbx
.text:00000000000088E1                 mov     rbx, rdi
.text:00000000000088E4                 mov     rdi, [rdi+10h]  ; ptr
.text:00000000000088E8                 call    _free
.text:00000000000088ED                 mov     rdi, [rbx+18h]  ; ptr
.text:00000000000088F1                 call    _free
.text:00000000000088F6                 cmp     byte ptr [rbx+8Bh], 0
.text:00000000000088FD                 jnz     short loc_8908
.text:00000000000088FF                 pop     rbx
.text:0000000000008900                 retn
.text:0000000000008900 ; ---------------------------------------------------------------------------
.text:0000000000008901                 align 8
.text:0000000000008908
.text:0000000000008908 loc_8908:                               ; CODE XREF: re_string_destruct+1D↑j
.text:0000000000008908                 mov     rdi, [rbx+8]    ; ptr
.text:000000000000890C                 pop     rbx
.text:000000000000890D                 jmp     _free
.text:000000000000890D ; } // starts at 88E0
.text:000000000000890D re_string_destruct endp
.text:000000000000890D
.text:000000000000890D ; ---------------------------------------------------------------------------
.text:0000000000008912                 align 20h
.text:0000000000008920
.text:0000000000008920 ; =============== S U B R O U T I N E =======================================
.text:0000000000008920
.text:0000000000008920
.text:0000000000008920 ; __int64 __fastcall free_dfa_content(void *ptr)
.text:0000000000008920 free_dfa_content proc near              ; CODE XREF: re_compile_internal+37F↓p
.text:0000000000008920                                         ; regfree+C↓p
.text:0000000000008920 ; __unwind {
.text:0000000000008920                 push    r14
.text:0000000000008922                 push    r13
.text:0000000000008924                 push    r12
.text:0000000000008926                 mov     r12, rdi
.text:0000000000008929                 push    rbp
.text:000000000000892A                 push    rbx
.text:000000000000892B                 mov     rdi, [rdi]
.text:000000000000892E                 test    rdi, rdi
.text:0000000000008931                 jz      short loc_895E
.text:0000000000008933                 cmp     qword ptr [r12+10h], 0
.text:0000000000008939                 jz      short loc_895E
.text:000000000000893B                 xor     ebx, ebx
.text:000000000000893D                 jmp     short loc_8944
.text:000000000000893D ; ---------------------------------------------------------------------------
.text:000000000000893F                 align 20h
.text:0000000000008940
.text:0000000000008940 loc_8940:                               ; CODE XREF: free_dfa_content+3C↓j
.text:0000000000008940                 mov     rdi, [r12]
.text:0000000000008944
.text:0000000000008944 loc_8944:                               ; CODE XREF: free_dfa_content+1D↑j
.text:0000000000008944                 mov     rax, rbx
.text:0000000000008947                 add     rbx, 1
.text:000000000000894B                 shl     rax, 4
.text:000000000000894F                 add     rdi, rax
.text:0000000000008952                 call    free_token
.text:0000000000008957                 cmp     [r12+10h], rbx
.text:000000000000895C                 ja      short loc_8940
.text:000000000000895E
.text:000000000000895E loc_895E:                               ; CODE XREF: free_dfa_content+11↑j
.text:000000000000895E                                         ; free_dfa_content+19↑j
.text:000000000000895E                 mov     rdi, [r12+18h]  ; ptr
.text:0000000000008963                 call    _free
.text:0000000000008968                 cmp     qword ptr [r12+10h], 0
.text:000000000000896E                 jz      short loc_89C3
.text:0000000000008970                 xor     ebx, ebx
.text:0000000000008972                 xor     ebp, ebp
.text:0000000000008974                 nop     dword ptr [rax+00h]
.text:0000000000008978
.text:0000000000008978 loc_8978:                               ; CODE XREF: free_dfa_content+A1↓j
.text:0000000000008978                 mov     rax, [r12+30h]
.text:000000000000897D                 test    rax, rax
.text:0000000000008980                 jz      short loc_898C
.text:0000000000008982                 mov     rdi, [rax+rbx+10h] ; ptr
.text:0000000000008987                 call    _free
.text:000000000000898C
.text:000000000000898C loc_898C:                               ; CODE XREF: free_dfa_content+60↑j
.text:000000000000898C                 mov     rax, [r12+38h]
.text:0000000000008991                 test    rax, rax
.text:0000000000008994                 jz      short loc_89A0
.text:0000000000008996                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000899B                 call    _free
.text:00000000000089A0
.text:00000000000089A0 loc_89A0:                               ; CODE XREF: free_dfa_content+74↑j
.text:00000000000089A0                 mov     rax, [r12+28h]
.text:00000000000089A5                 test    rax, rax
.text:00000000000089A8                 jz      short loc_89B4
.text:00000000000089AA                 mov     rdi, [rax+rbx+10h] ; ptr
.text:00000000000089AF                 call    _free
.text:00000000000089B4
.text:00000000000089B4 loc_89B4:                               ; CODE XREF: free_dfa_content+88↑j
.text:00000000000089B4                 add     rbp, 1
.text:00000000000089B8                 add     rbx, 18h
.text:00000000000089BC                 cmp     [r12+10h], rbp
.text:00000000000089C1                 ja      short loc_8978
.text:00000000000089C3
.text:00000000000089C3 loc_89C3:                               ; CODE XREF: free_dfa_content+4E↑j
.text:00000000000089C3                 mov     rdi, [r12+28h]  ; ptr
.text:00000000000089C8                 call    _free
.text:00000000000089CD                 mov     rdi, [r12+30h]  ; ptr
.text:00000000000089D2                 call    _free
.text:00000000000089D7                 mov     rdi, [r12+38h]  ; ptr
.text:00000000000089DC                 call    _free
.text:00000000000089E1                 mov     rdi, [r12]      ; ptr
.text:00000000000089E5                 call    _free
.text:00000000000089EA                 mov     rdi, [r12+40h]
.text:00000000000089EF                 test    rdi, rdi
.text:00000000000089F2                 jz      short loc_8A47
.text:00000000000089F4                 xor     r14d, r14d
.text:00000000000089F7                 xor     r13d, r13d
.text:00000000000089FA                 nop     word ptr [rax+rax+00h]
.text:0000000000008A00
.text:0000000000008A00 loc_8A00:                               ; CODE XREF: free_dfa_content+125↓j
.text:0000000000008A00                 lea     rbp, [rdi+r14]
.text:0000000000008A04                 cmp     qword ptr [rbp+0], 0
.text:0000000000008A09                 jle     short loc_8A27
.text:0000000000008A0B                 xor     ebx, ebx
.text:0000000000008A0D                 nop     dword ptr [rax]
.text:0000000000008A10
.text:0000000000008A10 loc_8A10:                               ; CODE XREF: free_dfa_content+105↓j
.text:0000000000008A10                 mov     rax, [rbp+10h]
.text:0000000000008A14                 mov     rdi, [rax+rbx*8] ; ptr
.text:0000000000008A18                 add     rbx, 1
.text:0000000000008A1C                 call    free_state
.text:0000000000008A21                 cmp     [rbp+0], rbx
.text:0000000000008A25                 jg      short loc_8A10
.text:0000000000008A27
.text:0000000000008A27 loc_8A27:                               ; CODE XREF: free_dfa_content+E9↑j
.text:0000000000008A27                 mov     rdi, [rbp+10h]  ; ptr
.text:0000000000008A2B                 add     r13, 1
.text:0000000000008A2F                 add     r14, 18h
.text:0000000000008A33                 call    _free
.text:0000000000008A38                 cmp     [r12+88h], r13
.text:0000000000008A40                 mov     rdi, [r12+40h]  ; ptr
.text:0000000000008A45                 jnb     short loc_8A00
.text:0000000000008A47
.text:0000000000008A47 loc_8A47:                               ; CODE XREF: free_dfa_content+D2↑j
.text:0000000000008A47                 call    _free
.text:0000000000008A4C                 mov     rdi, [r12+78h]  ; ptr
.text:0000000000008A51                 lea     rax, utf8_sb_map
.text:0000000000008A58                 cmp     rdi, rax
.text:0000000000008A5B                 jz      short loc_8A62
.text:0000000000008A5D                 call    _free
.text:0000000000008A62
.text:0000000000008A62 loc_8A62:                               ; CODE XREF: free_dfa_content+13B↑j
.text:0000000000008A62                 mov     rdi, [r12+0E0h] ; ptr
.text:0000000000008A6A                 call    _free
.text:0000000000008A6F                 pop     rbx
.text:0000000000008A70                 mov     rdi, r12        ; ptr
.text:0000000000008A73                 pop     rbp
.text:0000000000008A74                 pop     r12
.text:0000000000008A76                 pop     r13
.text:0000000000008A78                 pop     r14
.text:0000000000008A7A                 jmp     _free
.text:0000000000008A7A ; } // starts at 8920
.text:0000000000008A7A free_dfa_content endp
.text:0000000000008A7A
.text:0000000000008A7A ; ---------------------------------------------------------------------------
.text:0000000000008A7F                 align 20h
.text:0000000000008A80
.text:0000000000008A80 ; =============== S U B R O U T I N E =======================================
.text:0000000000008A80
.text:0000000000008A80
.text:0000000000008A80 match_ctx_clean proc near               ; CODE XREF: re_search_internal+F34↓p
.text:0000000000008A80                                         ; re_search_internal+1494↓p
.text:0000000000008A80 ; __unwind {
.text:0000000000008A80                 push    r14
.text:0000000000008A82                 push    r13
.text:0000000000008A84                 mov     r14, rdi
.text:0000000000008A87                 push    r12
.text:0000000000008A89                 push    rbp
.text:0000000000008A8A                 push    rbx
.text:0000000000008A8B                 cmp     qword ptr [rdi+0E8h], 0
.text:0000000000008A93                 jle     loc_8B19
.text:0000000000008A99                 xor     r13d, r13d
.text:0000000000008A9C                 nop     dword ptr [rax+00h]
.text:0000000000008AA0
.text:0000000000008AA0 loc_8AA0:                               ; CODE XREF: match_ctx_clean+97↓j
.text:0000000000008AA0                 mov     rax, [r14+0F8h]
.text:0000000000008AA7                 mov     r12, [rax+r13*8]
.text:0000000000008AAB                 cmp     qword ptr [r12+20h], 0
.text:0000000000008AB1                 jle     short loc_8ADD
.text:0000000000008AB3                 xor     ebx, ebx
.text:0000000000008AB5                 nop     dword ptr [rax]
.text:0000000000008AB8
.text:0000000000008AB8 loc_8AB8:                               ; CODE XREF: match_ctx_clean+5B↓j
.text:0000000000008AB8                 mov     rax, [r12+28h]
.text:0000000000008ABD                 mov     rbp, [rax+rbx*8]
.text:0000000000008AC1                 add     rbx, 1
.text:0000000000008AC5                 mov     rdi, [rbp+20h]  ; ptr
.text:0000000000008AC9                 call    _free
.text:0000000000008ACE                 mov     rdi, rbp        ; ptr
.text:0000000000008AD1                 call    _free
.text:0000000000008AD6                 cmp     [r12+20h], rbx
.text:0000000000008ADB                 jg      short loc_8AB8
.text:0000000000008ADD
.text:0000000000008ADD loc_8ADD:                               ; CODE XREF: match_ctx_clean+31↑j
.text:0000000000008ADD                 mov     rdi, [r12+28h]  ; ptr
.text:0000000000008AE2                 call    _free
.text:0000000000008AE7                 mov     rax, [r12+10h]
.text:0000000000008AEC                 test    rax, rax
.text:0000000000008AEF                 jz      short loc_8B04
.text:0000000000008AF1                 mov     rdi, [rax+10h]  ; ptr
.text:0000000000008AF5                 call    _free
.text:0000000000008AFA                 mov     rdi, [r12+10h]  ; ptr
.text:0000000000008AFF                 call    _free
.text:0000000000008B04
.text:0000000000008B04 loc_8B04:                               ; CODE XREF: match_ctx_clean+6F↑j
.text:0000000000008B04                 mov     rdi, r12        ; ptr
.text:0000000000008B07                 add     r13, 1
.text:0000000000008B0B                 call    _free
.text:0000000000008B10                 cmp     [r14+0E8h], r13
.text:0000000000008B17                 jg      short loc_8AA0
.text:0000000000008B19
.text:0000000000008B19 loc_8B19:                               ; CODE XREF: match_ctx_clean+13↑j
.text:0000000000008B19                 pop     rbx
.text:0000000000008B1A                 mov     qword ptr [r14+0E8h], 0
.text:0000000000008B25                 mov     qword ptr [r14+0C8h], 0
.text:0000000000008B30                 pop     rbp
.text:0000000000008B31                 pop     r12
.text:0000000000008B33                 pop     r13
.text:0000000000008B35                 pop     r14
.text:0000000000008B37                 retn
.text:0000000000008B37 ; } // starts at 8A80
.text:0000000000008B37 match_ctx_clean endp
.text:0000000000008B37
.text:0000000000008B37 ; ---------------------------------------------------------------------------
.text:0000000000008B38                 align 20h
.text:0000000000008B40
.text:0000000000008B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B40
.text:0000000000008B40
.text:0000000000008B40 re_string_char_size_at_part_0 proc near ; CODE XREF: check_node_accept_bytes_isra_31+3A↓p
.text:0000000000008B40                                         ; parse_bracket_element_constprop_37+3B↓p ...
.text:0000000000008B40 ; __unwind {
.text:0000000000008B40                 mov     rcx, [rdi+30h]
.text:0000000000008B44                 lea     rax, [rsi+1]
.text:0000000000008B48                 cmp     rax, rcx
.text:0000000000008B4B                 jge     short loc_8B88
.text:0000000000008B4D                 mov     rdx, [rdi+10h]
.text:0000000000008B51                 lea     rdi, ds:0[rax*4]
.text:0000000000008B59                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:0000000000008B5D                 jnz     short loc_8B88
.text:0000000000008B5F                 sub     rcx, rsi
.text:0000000000008B62                 lea     rsi, [rdx+rdi-4]
.text:0000000000008B67                 mov     edx, 2
.text:0000000000008B6C                 jmp     short loc_8B7B
.text:0000000000008B6C ; ---------------------------------------------------------------------------
.text:0000000000008B6E                 align 10h
.text:0000000000008B70
.text:0000000000008B70 loc_8B70:                               ; CODE XREF: re_string_char_size_at_part_0+40↓j
.text:0000000000008B70                 add     rdx, 1
.text:0000000000008B74                 cmp     dword ptr [rsi+rdx*4-4], 0FFFFFFFFh
.text:0000000000008B79                 jnz     short locret_8B8D
.text:0000000000008B7B
.text:0000000000008B7B loc_8B7B:                               ; CODE XREF: re_string_char_size_at_part_0+2C↑j
.text:0000000000008B7B                 cmp     rdx, rcx
.text:0000000000008B7E                 mov     eax, edx
.text:0000000000008B80                 jnz     short loc_8B70
.text:0000000000008B82                 rep retn
.text:0000000000008B82 ; ---------------------------------------------------------------------------
.text:0000000000008B84                 align 8
.text:0000000000008B88
.text:0000000000008B88 loc_8B88:                               ; CODE XREF: re_string_char_size_at_part_0+B↑j
.text:0000000000008B88                                         ; re_string_char_size_at_part_0+1D↑j
.text:0000000000008B88                 mov     eax, 1
.text:0000000000008B8D
.text:0000000000008B8D locret_8B8D:                            ; CODE XREF: re_string_char_size_at_part_0+39↑j
.text:0000000000008B8D                 rep retn
.text:0000000000008B8D ; } // starts at 8B40
.text:0000000000008B8D re_string_char_size_at_part_0 endp
.text:0000000000008B8D
.text:0000000000008B8D ; ---------------------------------------------------------------------------
.text:0000000000008B8F                 align 10h
.text:0000000000008B90
.text:0000000000008B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000008B90
.text:0000000000008B90
.text:0000000000008B90 re_node_set_compare_part_2 proc near    ; CODE XREF: re_acquire_state_context+A3↓p
.text:0000000000008B90                                         ; re_acquire_state+80↓p
.text:0000000000008B90 ; __unwind {
.text:0000000000008B90                 mov     rdx, [rdi+8]
.text:0000000000008B94                 xor     eax, eax
.text:0000000000008B96                 cmp     rdx, [rsi+8]
.text:0000000000008B9A                 jz      short loc_8BA0
.text:0000000000008B9C                 rep retn
.text:0000000000008B9C ; ---------------------------------------------------------------------------
.text:0000000000008B9E                 align 20h
.text:0000000000008BA0
.text:0000000000008BA0 loc_8BA0:                               ; CODE XREF: re_node_set_compare_part_2+A↑j
.text:0000000000008BA0                 lea     rax, [rdx-1]
.text:0000000000008BA4                 lea     rdx, ds:0[rax*8]
.text:0000000000008BAC                 jmp     short loc_8BCD
.text:0000000000008BAC ; ---------------------------------------------------------------------------
.text:0000000000008BAE                 align 10h
.text:0000000000008BB0
.text:0000000000008BB0 loc_8BB0:                               ; CODE XREF: re_node_set_compare_part_2+40↓j
.text:0000000000008BB0                 mov     rcx, [rdi+10h]
.text:0000000000008BB4                 mov     r8, [rcx+rdx]
.text:0000000000008BB8                 mov     rcx, [rsi+10h]
.text:0000000000008BBC                 mov     rcx, [rcx+rdx]
.text:0000000000008BC0                 sub     rdx, 8
.text:0000000000008BC4                 cmp     r8, rcx
.text:0000000000008BC7                 jnz     short loc_8BE0
.text:0000000000008BC9                 sub     rax, 1
.text:0000000000008BCD
.text:0000000000008BCD loc_8BCD:                               ; CODE XREF: re_node_set_compare_part_2+1C↑j
.text:0000000000008BCD                 test    rax, rax
.text:0000000000008BD0                 jns     short loc_8BB0
.text:0000000000008BD2                 mov     eax, 1
.text:0000000000008BD7                 retn
.text:0000000000008BD7 ; ---------------------------------------------------------------------------
.text:0000000000008BD8                 align 20h
.text:0000000000008BE0
.text:0000000000008BE0 loc_8BE0:                               ; CODE XREF: re_node_set_compare_part_2+37↑j
.text:0000000000008BE0                 xor     eax, eax
.text:0000000000008BE2                 retn
.text:0000000000008BE2 ; } // starts at 8B90
.text:0000000000008BE2 re_node_set_compare_part_2 endp
.text:0000000000008BE2
.text:0000000000008BE2 ; ---------------------------------------------------------------------------
.text:0000000000008BE3                 align 10h
.text:0000000000008BF0
.text:0000000000008BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008BF0
.text:0000000000008BF0
.text:0000000000008BF0 re_node_set_contains_isra_3 proc near   ; CODE XREF: check_arrival_expand_ecl_sub+2B↓p
.text:0000000000008BF0                                         ; expand_bkref_cache+173↓p ...
.text:0000000000008BF0 ; __unwind {
.text:0000000000008BF0                 xor     eax, eax
.text:0000000000008BF2                 test    rdi, rdi
.text:0000000000008BF5                 jle     short locret_8C35
.text:0000000000008BF7                 mov     r8, [rsi]
.text:0000000000008BFA                 sub     rdi, 1
.text:0000000000008BFE                 xor     esi, esi
.text:0000000000008C00
.text:0000000000008C00 loc_8C00:                               ; CODE XREF: re_node_set_contains_isra_3+67↓j
.text:0000000000008C00                 cmp     rsi, rdi
.text:0000000000008C03                 jnb     short loc_8C2D
.text:0000000000008C05                 lea     rcx, [rsi+rdi]
.text:0000000000008C09                 shr     rcx, 1
.text:0000000000008C0C                 cmp     rdx, [r8+rcx*8]
.text:0000000000008C10                 jle     short loc_8C28
.text:0000000000008C12                 jmp     short loc_8C40
.text:0000000000008C12 ; ---------------------------------------------------------------------------
.text:0000000000008C14                 align 8
.text:0000000000008C18
.text:0000000000008C18 loc_8C18:                               ; CODE XREF: re_node_set_contains_isra_3+3B↓j
.text:0000000000008C18                 lea     rax, [rsi+rcx]
.text:0000000000008C1C                 shr     rax, 1
.text:0000000000008C1F                 cmp     [r8+rax*8], rdx
.text:0000000000008C23                 jl      short loc_8C50
.text:0000000000008C25                 mov     rcx, rax
.text:0000000000008C28
.text:0000000000008C28 loc_8C28:                               ; CODE XREF: re_node_set_contains_isra_3+20↑j
.text:0000000000008C28                 cmp     rsi, rcx
.text:0000000000008C2B                 jb      short loc_8C18
.text:0000000000008C2D
.text:0000000000008C2D loc_8C2D:                               ; CODE XREF: re_node_set_contains_isra_3+13↑j
.text:0000000000008C2D                 xor     eax, eax
.text:0000000000008C2F                 cmp     rdx, [r8+rsi*8]
.text:0000000000008C33                 jz      short loc_8C60
.text:0000000000008C35
.text:0000000000008C35 locret_8C35:                            ; CODE XREF: re_node_set_contains_isra_3+5↑j
.text:0000000000008C35                 rep retn
.text:0000000000008C35 ; ---------------------------------------------------------------------------
.text:0000000000008C37                 align 20h
.text:0000000000008C40
.text:0000000000008C40 loc_8C40:                               ; CODE XREF: re_node_set_contains_isra_3+22↑j
.text:0000000000008C40                 mov     rax, rcx
.text:0000000000008C43                 mov     rcx, rdi
.text:0000000000008C46                 db      2Eh
.text:0000000000008C46                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008C50
.text:0000000000008C50 loc_8C50:                               ; CODE XREF: re_node_set_contains_isra_3+33↑j
.text:0000000000008C50                 lea     rsi, [rax+1]
.text:0000000000008C54                 mov     rdi, rcx
.text:0000000000008C57                 jmp     short loc_8C00
.text:0000000000008C57 ; ---------------------------------------------------------------------------
.text:0000000000008C59                 align 20h
.text:0000000000008C60
.text:0000000000008C60 loc_8C60:                               ; CODE XREF: re_node_set_contains_isra_3+43↑j
.text:0000000000008C60                 lea     rax, [rsi+1]
.text:0000000000008C64                 retn
.text:0000000000008C64 ; } // starts at 8BF0
.text:0000000000008C64 re_node_set_contains_isra_3 endp
.text:0000000000008C64
.text:0000000000008C64 ; ---------------------------------------------------------------------------
.text:0000000000008C65                 align 10h
.text:0000000000008C70
.text:0000000000008C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008C70
.text:0000000000008C70
.text:0000000000008C70 check_arrival_expand_ecl_sub proc near  ; CODE XREF: check_arrival_expand_ecl_sub+E0↓p
.text:0000000000008C70                                         ; check_arrival_expand_ecl+D8↓p
.text:0000000000008C70 ; __unwind {
.text:0000000000008C70                 push    r15
.text:0000000000008C72                 push    r14
.text:0000000000008C74                 lea     r14, [rsi+10h]
.text:0000000000008C78                 push    r13
.text:0000000000008C7A                 push    r12
.text:0000000000008C7C                 mov     r15, rcx
.text:0000000000008C7F                 push    rbp
.text:0000000000008C80                 push    rbx
.text:0000000000008C81                 mov     r12, rdi
.text:0000000000008C84                 mov     rbp, rsi
.text:0000000000008C87                 mov     rbx, rdx
.text:0000000000008C8A                 mov     r13d, r8d
.text:0000000000008C8D                 sub     rsp, 8
.text:0000000000008C91
.text:0000000000008C91 loc_8C91:                               ; CODE XREF: check_arrival_expand_ecl_sub+83↓j
.text:0000000000008C91                 mov     rdi, [rbp+8]
.text:0000000000008C95                 mov     rdx, rbx
.text:0000000000008C98                 mov     rsi, r14
.text:0000000000008C9B                 call    re_node_set_contains_isra_3
.text:0000000000008CA0                 test    rax, rax
.text:0000000000008CA3                 jnz     short loc_8D10
.text:0000000000008CA5                 mov     rax, rbx
.text:0000000000008CA8                 shl     rax, 4
.text:0000000000008CAC                 add     rax, [r12]
.text:0000000000008CB0                 movzx   edx, byte ptr [rax+8]
.text:0000000000008CB4                 cmp     edx, r13d
.text:0000000000008CB7                 jnz     short loc_8CBE
.text:0000000000008CB9                 cmp     [rax], r15
.text:0000000000008CBC                 jz      short loc_8CF8
.text:0000000000008CBE
.text:0000000000008CBE loc_8CBE:                               ; CODE XREF: check_arrival_expand_ecl_sub+47↑j
.text:0000000000008CBE                 mov     rsi, rbx
.text:0000000000008CC1                 mov     rdi, rbp
.text:0000000000008CC4                 call    re_node_set_insert
.text:0000000000008CC9                 test    al, al
.text:0000000000008CCB                 jz      short loc_8D28
.text:0000000000008CCD                 lea     rbx, [rbx+rbx*2]
.text:0000000000008CD1                 mov     rdx, [r12+28h]
.text:0000000000008CD6                 shl     rbx, 3
.text:0000000000008CDA                 add     rdx, rbx
.text:0000000000008CDD                 mov     rax, [rdx+8]
.text:0000000000008CE1                 test    rax, rax
.text:0000000000008CE4                 jz      short loc_8D10
.text:0000000000008CE6                 cmp     rax, 2
.text:0000000000008CEA                 mov     rdx, [rdx+10h]
.text:0000000000008CEE                 jz      short loc_8D40
.text:0000000000008CF0
.text:0000000000008CF0 loc_8CF0:                               ; CODE XREF: check_arrival_expand_ecl_sub+F3↓j
.text:0000000000008CF0                 mov     rbx, [rdx]
.text:0000000000008CF3                 jmp     short loc_8C91
.text:0000000000008CF3 ; ---------------------------------------------------------------------------
.text:0000000000008CF5                 align 8
.text:0000000000008CF8
.text:0000000000008CF8 loc_8CF8:                               ; CODE XREF: check_arrival_expand_ecl_sub+4C↑j
.text:0000000000008CF8                 cmp     r13d, 9
.text:0000000000008CFC                 jnz     short loc_8D10
.text:0000000000008CFE                 mov     rsi, rbx
.text:0000000000008D01                 mov     rdi, rbp
.text:0000000000008D04                 call    re_node_set_insert
.text:0000000000008D09                 test    al, al
.text:0000000000008D0B                 jz      short loc_8D28
.text:0000000000008D0D                 nop     dword ptr [rax]
.text:0000000000008D10
.text:0000000000008D10 loc_8D10:                               ; CODE XREF: check_arrival_expand_ecl_sub+33↑j
.text:0000000000008D10                                         ; check_arrival_expand_ecl_sub+74↑j ...
.text:0000000000008D10                 xor     eax, eax
.text:0000000000008D12
.text:0000000000008D12 loc_8D12:                               ; CODE XREF: check_arrival_expand_ecl_sub+E7↓j
.text:0000000000008D12                 add     rsp, 8
.text:0000000000008D16                 pop     rbx
.text:0000000000008D17                 pop     rbp
.text:0000000000008D18                 pop     r12
.text:0000000000008D1A                 pop     r13
.text:0000000000008D1C                 pop     r14
.text:0000000000008D1E                 pop     r15
.text:0000000000008D20                 retn
.text:0000000000008D20 ; ---------------------------------------------------------------------------
.text:0000000000008D21                 align 8
.text:0000000000008D28
.text:0000000000008D28 loc_8D28:                               ; CODE XREF: check_arrival_expand_ecl_sub+5B↑j
.text:0000000000008D28                                         ; check_arrival_expand_ecl_sub+9B↑j
.text:0000000000008D28                 add     rsp, 8
.text:0000000000008D2C                 mov     eax, 0Ch
.text:0000000000008D31                 pop     rbx
.text:0000000000008D32                 pop     rbp
.text:0000000000008D33                 pop     r12
.text:0000000000008D35                 pop     r13
.text:0000000000008D37                 pop     r14
.text:0000000000008D39                 pop     r15
.text:0000000000008D3B                 retn
.text:0000000000008D3B ; ---------------------------------------------------------------------------
.text:0000000000008D3C                 align 20h
.text:0000000000008D40
.text:0000000000008D40 loc_8D40:                               ; CODE XREF: check_arrival_expand_ecl_sub+7E↑j
.text:0000000000008D40                 mov     rdx, [rdx+8]
.text:0000000000008D44                 mov     r8d, r13d
.text:0000000000008D47                 mov     rcx, r15
.text:0000000000008D4A                 mov     rsi, rbp
.text:0000000000008D4D                 mov     rdi, r12
.text:0000000000008D50                 call    check_arrival_expand_ecl_sub
.text:0000000000008D55                 test    eax, eax
.text:0000000000008D57                 jnz     short loc_8D12
.text:0000000000008D59                 mov     rax, [r12+28h]
.text:0000000000008D5E                 mov     rdx, [rax+rbx+10h]
.text:0000000000008D63                 jmp     short loc_8CF0
.text:0000000000008D63 ; } // starts at 8C70
.text:0000000000008D63 check_arrival_expand_ecl_sub endp
.text:0000000000008D63
.text:0000000000008D63 ; ---------------------------------------------------------------------------
.text:0000000000008D65                 align 10h
.text:0000000000008D70
.text:0000000000008D70 ; =============== S U B R O U T I N E =======================================
.text:0000000000008D70
.text:0000000000008D70
.text:0000000000008D70 re_node_set_remove_at_isra_4_part_5 proc near
.text:0000000000008D70                                         ; CODE XREF: re_acquire_state_context+1D9↓p
.text:0000000000008D70                                         ; _sub_epsilon_src_nodes+1DD↓p ...
.text:0000000000008D70 ; __unwind {
.text:0000000000008D70                 mov     rax, [rdi]
.text:0000000000008D73                 cmp     rax, rdx
.text:0000000000008D76                 jle     short locret_8DA2
.text:0000000000008D78                 sub     rax, 1
.text:0000000000008D7C                 cmp     rdx, rax
.text:0000000000008D7F                 mov     [rdi], rax
.text:0000000000008D82                 jge     short locret_8DA2
.text:0000000000008D84                 mov     rax, [rsi]
.text:0000000000008D87                 nop     word ptr [rax+rax+00000000h]
.text:0000000000008D90
.text:0000000000008D90 loc_8D90:                               ; CODE XREF: re_node_set_remove_at_isra_4_part_5+30↓j
.text:0000000000008D90                 mov     rcx, [rax+rdx*8+8]
.text:0000000000008D95                 mov     [rax+rdx*8], rcx
.text:0000000000008D99                 add     rdx, 1
.text:0000000000008D9D                 cmp     rdx, [rdi]
.text:0000000000008DA0                 jl      short loc_8D90
.text:0000000000008DA2
.text:0000000000008DA2 locret_8DA2:                            ; CODE XREF: re_node_set_remove_at_isra_4_part_5+6↑j
.text:0000000000008DA2                                         ; re_node_set_remove_at_isra_4_part_5+12↑j
.text:0000000000008DA2                 rep retn
.text:0000000000008DA2 ; } // starts at 8D70
.text:0000000000008DA2 re_node_set_remove_at_isra_4_part_5 endp
.text:0000000000008DA2
.text:0000000000008DA2 ; ---------------------------------------------------------------------------
.text:0000000000008DA4                 align 10h
.text:0000000000008DB0
.text:0000000000008DB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008DB0
.text:0000000000008DB0
.text:0000000000008DB0 optimize_subexps proc near              ; DATA XREF: re_compile_internal+611↓o
.text:0000000000008DB0 ; __unwind {
.text:0000000000008DB0                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000008DB4                 cmp     al, 4
.text:0000000000008DB6                 jz      short loc_8E10
.text:0000000000008DB8                 cmp     al, 11h
.text:0000000000008DBA                 jz      short loc_8DC0
.text:0000000000008DBC
.text:0000000000008DBC loc_8DBC:                               ; CODE XREF: optimize_subexps+17↓j
.text:0000000000008DBC                                         ; optimize_subexps+1D↓j ...
.text:0000000000008DBC                 xor     eax, eax
.text:0000000000008DBE                 retn
.text:0000000000008DBE ; ---------------------------------------------------------------------------
.text:0000000000008DBF                 align 20h
.text:0000000000008DC0
.text:0000000000008DC0 loc_8DC0:                               ; CODE XREF: optimize_subexps+A↑j
.text:0000000000008DC0                 mov     rax, [rsi+8]
.text:0000000000008DC4                 test    rax, rax
.text:0000000000008DC7                 jz      short loc_8DBC
.text:0000000000008DC9                 cmp     byte ptr [rax+30h], 11h
.text:0000000000008DCD                 jnz     short loc_8DBC
.text:0000000000008DCF                 mov     rcx, [rax+28h]
.text:0000000000008DD3                 mov     rax, [rax+8]
.text:0000000000008DD7                 test    rax, rax
.text:0000000000008DDA                 mov     [rsi+8], rax
.text:0000000000008DDE                 jz      short loc_8DE3
.text:0000000000008DE0                 mov     [rax], rsi
.text:0000000000008DE3
.text:0000000000008DE3 loc_8DE3:                               ; CODE XREF: optimize_subexps+2E↑j
.text:0000000000008DE3                 mov     rax, [rdi+0E0h]
.text:0000000000008DEA                 mov     rdx, [rsi+28h]
.text:0000000000008DEE                 cmp     rcx, 3Fh ; '?'
.text:0000000000008DF2                 mov     rdx, [rax+rdx*8]
.text:0000000000008DF6                 mov     [rax+rcx*8], rdx
.text:0000000000008DFA                 jg      short loc_8DBC
.text:0000000000008DFC                 mov     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000008E03                 rol     rax, cl
.text:0000000000008E06                 and     [rdi+0A0h], rax
.text:0000000000008E0D                 jmp     short loc_8DBC
.text:0000000000008E0D ; ---------------------------------------------------------------------------
.text:0000000000008E0F                 align 10h
.text:0000000000008E10
.text:0000000000008E10 loc_8E10:                               ; CODE XREF: optimize_subexps+6↑j
.text:0000000000008E10                 mov     rax, [rdi+0E0h]
.text:0000000000008E17                 test    rax, rax
.text:0000000000008E1A                 jz      short loc_8DBC
.text:0000000000008E1C                 movsxd  rdx, dword ptr [rsi+28h]
.text:0000000000008E20                 mov     rcx, [rax+rdx*8]
.text:0000000000008E24                 mov     eax, 1
.text:0000000000008E29                 shl     eax, cl
.text:0000000000008E2B                 mov     [rsi+28h], rcx
.text:0000000000008E2F                 cdqe
.text:0000000000008E31                 or      [rdi+0A0h], rax
.text:0000000000008E38                 xor     eax, eax
.text:0000000000008E3A                 retn
.text:0000000000008E3A ; } // starts at 8DB0
.text:0000000000008E3A optimize_subexps endp
.text:0000000000008E3A
.text:0000000000008E3A ; ---------------------------------------------------------------------------
.text:0000000000008E3B                 align 20h
.text:0000000000008E40
.text:0000000000008E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000008E40
.text:0000000000008E40
.text:0000000000008E40 calc_next       proc near               ; DATA XREF: re_compile_internal+699↓o
.text:0000000000008E40 ; __unwind {
.text:0000000000008E40                 movzx   eax, byte ptr [rsi+30h]
.text:0000000000008E44                 mov     rdx, [rsi+8]
.text:0000000000008E48                 cmp     al, 0Bh
.text:0000000000008E4A                 jz      short loc_8E90
.text:0000000000008E4C                 cmp     al, 10h
.text:0000000000008E4E                 jz      short loc_8E78
.text:0000000000008E50                 test    rdx, rdx
.text:0000000000008E53                 jz      short loc_8E5D
.text:0000000000008E55                 mov     rax, [rsi+20h]
.text:0000000000008E59                 mov     [rdx+20h], rax
.text:0000000000008E5D
.text:0000000000008E5D loc_8E5D:                               ; CODE XREF: calc_next+13↑j
.text:0000000000008E5D                 mov     rax, [rsi+10h]
.text:0000000000008E61                 test    rax, rax
.text:0000000000008E64                 jz      short loc_8E6E
.text:0000000000008E66                 mov     rdx, [rsi+20h]
.text:0000000000008E6A                 mov     [rax+20h], rdx
.text:0000000000008E6E
.text:0000000000008E6E loc_8E6E:                               ; CODE XREF: calc_next+24↑j
.text:0000000000008E6E                 xor     eax, eax
.text:0000000000008E70                 retn
.text:0000000000008E70 ; ---------------------------------------------------------------------------
.text:0000000000008E71                 align 8
.text:0000000000008E78
.text:0000000000008E78 loc_8E78:                               ; CODE XREF: calc_next+E↑j
.text:0000000000008E78                 mov     rax, [rsi+10h]
.text:0000000000008E7C                 mov     rcx, [rax+18h]
.text:0000000000008E80                 mov     [rdx+20h], rcx
.text:0000000000008E84                 mov     rdx, [rsi+20h]
.text:0000000000008E88                 mov     [rax+20h], rdx
.text:0000000000008E8C                 xor     eax, eax
.text:0000000000008E8E                 retn
.text:0000000000008E8E ; ---------------------------------------------------------------------------
.text:0000000000008E8F                 align 10h
.text:0000000000008E90
.text:0000000000008E90 loc_8E90:                               ; CODE XREF: calc_next+A↑j
.text:0000000000008E90                 mov     [rdx+20h], rsi
.text:0000000000008E94                 xor     eax, eax
.text:0000000000008E96                 retn
.text:0000000000008E96 ; } // starts at 8E40
.text:0000000000008E96 calc_next       endp
.text:0000000000008E96
.text:0000000000008E96 ; ---------------------------------------------------------------------------
.text:0000000000008E97                 align 20h
.text:0000000000008EA0
.text:0000000000008EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000008EA0
.text:0000000000008EA0
.text:0000000000008EA0 check_dst_limits_isra_13 proc near      ; CODE XREF: sift_states_backward+18C↓p
.text:0000000000008EA0                                         ; update_cur_sifted_state+6A3↓p
.text:0000000000008EA0
.text:0000000000008EA0 var_70          = qword ptr -70h
.text:0000000000008EA0 var_68          = qword ptr -68h
.text:0000000000008EA0 var_60          = qword ptr -60h
.text:0000000000008EA0 var_58          = qword ptr -58h
.text:0000000000008EA0 var_50          = qword ptr -50h
.text:0000000000008EA0 var_48          = qword ptr -48h
.text:0000000000008EA0 var_40          = qword ptr -40h
.text:0000000000008EA0 arg_0           = qword ptr  8
.text:0000000000008EA0
.text:0000000000008EA0 ; __unwind {
.text:0000000000008EA0                 push    r15
.text:0000000000008EA2                 push    r14
.text:0000000000008EA4                 push    r13
.text:0000000000008EA6                 push    r12
.text:0000000000008EA8                 push    rbp
.text:0000000000008EA9                 push    rbx
.text:0000000000008EAA                 xor     ebx, ebx
.text:0000000000008EAC                 sub     rsp, 48h
.text:0000000000008EB0                 mov     rax, [rdi+98h]
.text:0000000000008EB7                 mov     r15, [rdi+0C8h]
.text:0000000000008EBE                 mov     r12, [rsp+78h+arg_0]
.text:0000000000008EC6                 mov     [rsp+78h+var_70], rax
.text:0000000000008ECB                 mov     rbp, r15
.text:0000000000008ECE
.text:0000000000008ECE loc_8ECE:                               ; CODE XREF: check_dst_limits_isra_13+207↓j
.text:0000000000008ECE                 cmp     rbx, rbp
.text:0000000000008ED1                 jge     short loc_8F2B
.text:0000000000008ED3                 lea     rax, [rbx+rbp]
.text:0000000000008ED7                 mov     r13, [rdi+0D8h]
.text:0000000000008EDE                 mov     r10, rax
.text:0000000000008EE1                 shr     r10, 3Fh
.text:0000000000008EE5                 add     r10, rax
.text:0000000000008EE8                 sar     r10, 1
.text:0000000000008EEB                 lea     rax, [r10+r10*4]
.text:0000000000008EEF                 cmp     r8, [r13+rax*8+8]
.text:0000000000008EF4                 jle     short loc_8F26
.text:0000000000008EF6                 jmp     loc_9090
.text:0000000000008EF6 ; ---------------------------------------------------------------------------
.text:0000000000008EFB                 align 20h
.text:0000000000008F00
.text:0000000000008F00 loc_8F00:                               ; CODE XREF: check_dst_limits_isra_13+89↓j
.text:0000000000008F00                 lea     r11, [rbx+r10]
.text:0000000000008F04                 mov     rax, r11
.text:0000000000008F07                 shr     rax, 3Fh
.text:0000000000008F0B                 add     rax, r11
.text:0000000000008F0E                 sar     rax, 1
.text:0000000000008F11                 lea     r11, [rax+rax*4]
.text:0000000000008F15                 mov     r14, rax
.text:0000000000008F18                 cmp     [r13+r11*8+8], r8
.text:0000000000008F1D                 jl      loc_90A0
.text:0000000000008F23                 mov     r10, rax
.text:0000000000008F26
.text:0000000000008F26 loc_8F26:                               ; CODE XREF: check_dst_limits_isra_13+54↑j
.text:0000000000008F26                 cmp     rbx, r10
.text:0000000000008F29                 jl      short loc_8F00
.text:0000000000008F2B
.text:0000000000008F2B loc_8F2B:                               ; CODE XREF: check_dst_limits_isra_13+31↑j
.text:0000000000008F2B                 cmp     r15, rbx
.text:0000000000008F2E                 jle     loc_90D0
.text:0000000000008F34                 mov     r11, [rdi+0D8h]
.text:0000000000008F3B                 lea     rax, [rbx+rbx*4]
.text:0000000000008F3F                 lea     rax, [r11+rax*8]
.text:0000000000008F43                 cmp     r8, [rax+8]
.text:0000000000008F47                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008F4E                 cmovnz  rbx, rax
.text:0000000000008F52
.text:0000000000008F52 loc_8F52:                               ; CODE XREF: check_dst_limits_isra_13+237↓j
.text:0000000000008F52                 mov     rax, r15
.text:0000000000008F55                 xor     ebp, ebp
.text:0000000000008F57
.text:0000000000008F57 loc_8F57:                               ; CODE XREF: check_dst_limits_isra_13+227↓j
.text:0000000000008F57                 cmp     rbp, rax
.text:0000000000008F5A                 jge     short loc_8FB4
.text:0000000000008F5C                 lea     r11, [rbp+rax+0]
.text:0000000000008F61                 mov     r10, r11
.text:0000000000008F64                 shr     r10, 3Fh
.text:0000000000008F68                 add     r10, r11
.text:0000000000008F6B                 mov     r11, [rdi+0D8h]
.text:0000000000008F72                 sar     r10, 1
.text:0000000000008F75                 lea     r13, [r10+r10*4]
.text:0000000000008F79                 cmp     r12, [r11+r13*8+8]
.text:0000000000008F7E                 jle     short loc_8FAF
.text:0000000000008F80                 jmp     loc_90B0
.text:0000000000008F80 ; ---------------------------------------------------------------------------
.text:0000000000008F85                 align 8
.text:0000000000008F88
.text:0000000000008F88 loc_8F88:                               ; CODE XREF: check_dst_limits_isra_13+112↓j
.text:0000000000008F88                 lea     r13, [rbp+r10+0]
.text:0000000000008F8D                 mov     rax, r13
.text:0000000000008F90                 shr     rax, 3Fh
.text:0000000000008F94                 add     rax, r13
.text:0000000000008F97                 sar     rax, 1
.text:0000000000008F9A                 lea     r13, [rax+rax*4]
.text:0000000000008F9E                 mov     r14, rax
.text:0000000000008FA1                 cmp     [r11+r13*8+8], r12
.text:0000000000008FA6                 jl      loc_90C0
.text:0000000000008FAC                 mov     r10, rax
.text:0000000000008FAF
.text:0000000000008FAF loc_8FAF:                               ; CODE XREF: check_dst_limits_isra_13+DE↑j
.text:0000000000008FAF                 cmp     rbp, r10
.text:0000000000008FB2                 jl      short loc_8F88
.text:0000000000008FB4
.text:0000000000008FB4 loc_8FB4:                               ; CODE XREF: check_dst_limits_isra_13+BA↑j
.text:0000000000008FB4                 cmp     r15, rbp
.text:0000000000008FB7                 jle     loc_90E0
.text:0000000000008FBD                 mov     r10, [rdi+0D8h]
.text:0000000000008FC4                 lea     rax, [rbp+rbp*4+0]
.text:0000000000008FC9                 lea     rax, [r10+rax*8]
.text:0000000000008FCD                 cmp     r12, [rax+8]
.text:0000000000008FD1                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000008FD8                 cmovnz  rbp, rax
.text:0000000000008FDC
.text:0000000000008FDC loc_8FDC:                               ; CODE XREF: check_dst_limits_isra_13+247↓j
.text:0000000000008FDC                 cmp     qword ptr [rsi], 0
.text:0000000000008FE0                 jle     loc_9102
.text:0000000000008FE6                 mov     [rsp+78h+var_48], rbp
.text:0000000000008FEB                 mov     [rsp+78h+var_58], r9
.text:0000000000008FF0                 mov     r13, rdi
.text:0000000000008FF3                 mov     [rsp+78h+var_60], r8
.text:0000000000008FF8                 mov     [rsp+78h+var_68], rcx
.text:0000000000008FFD                 xor     r14d, r14d
.text:0000000000009000                 mov     [rsp+78h+var_40], rsi
.text:0000000000009005                 mov     [rsp+78h+var_50], rbx
.text:000000000000900A                 mov     rbp, rdx
.text:000000000000900D                 mov     r15, r12
.text:0000000000009010
.text:0000000000009010 loc_9010:                               ; CODE XREF: check_dst_limits_isra_13+25C↓j
.text:0000000000009010                 mov     rax, [rbp+0]
.text:0000000000009014                 mov     rdx, [r13+0D8h]
.text:000000000000901B                 mov     rdi, r13
.text:000000000000901E                 mov     r9, [rsp+78h+var_50]
.text:0000000000009023                 mov     r8, [rsp+78h+var_60]
.text:0000000000009028                 mov     rcx, [rsp+78h+var_68]
.text:000000000000902D                 mov     rsi, [rax+r14*8]
.text:0000000000009031                 lea     rax, [rsi+rsi*4]
.text:0000000000009035                 lea     rax, [rdx+rax*8]
.text:0000000000009039                 mov     rdx, [rsp+78h+var_70]
.text:000000000000903E                 mov     rax, [rax]
.text:0000000000009041                 shl     rax, 4
.text:0000000000009045                 add     rax, [rdx]
.text:0000000000009048                 mov     r12, [rax]
.text:000000000000904B                 mov     rdx, r12
.text:000000000000904E                 call    check_dst_limits_calc_pos
.text:0000000000009053                 mov     ebx, eax
.text:0000000000009055                 mov     rax, [rbp+0]
.text:0000000000009059                 mov     r9, [rsp+78h+var_48]
.text:000000000000905E                 mov     rcx, [rsp+78h+var_58]
.text:0000000000009063                 mov     r8, r15
.text:0000000000009066                 mov     rdx, r12
.text:0000000000009069                 mov     rdi, r13
.text:000000000000906C                 mov     rsi, [rax+r14*8]
.text:0000000000009070                 call    check_dst_limits_calc_pos
.text:0000000000009075                 cmp     ebx, eax
.text:0000000000009077                 jz      short loc_90F0
.text:0000000000009079                 mov     eax, 1
.text:000000000000907E
.text:000000000000907E loc_907E:                               ; CODE XREF: check_dst_limits_isra_13+264↓j
.text:000000000000907E                 add     rsp, 48h
.text:0000000000009082                 pop     rbx
.text:0000000000009083                 pop     rbp
.text:0000000000009084                 pop     r12
.text:0000000000009086                 pop     r13
.text:0000000000009088                 pop     r14
.text:000000000000908A                 pop     r15
.text:000000000000908C                 retn
.text:000000000000908C ; ---------------------------------------------------------------------------
.text:000000000000908D                 align 10h
.text:0000000000009090
.text:0000000000009090 loc_9090:                               ; CODE XREF: check_dst_limits_isra_13+56↑j
.text:0000000000009090                 mov     r14, r10
.text:0000000000009093                 mov     r10, rbp
.text:0000000000009096                 db      2Eh
.text:0000000000009096                 nop     word ptr [rax+rax+00000000h]
.text:00000000000090A0
.text:00000000000090A0 loc_90A0:                               ; CODE XREF: check_dst_limits_isra_13+7D↑j
.text:00000000000090A0                 lea     rbx, [r14+1]
.text:00000000000090A4                 mov     rbp, r10
.text:00000000000090A7                 jmp     loc_8ECE
.text:00000000000090A7 ; ---------------------------------------------------------------------------
.text:00000000000090AC                 align 10h
.text:00000000000090B0
.text:00000000000090B0 loc_90B0:                               ; CODE XREF: check_dst_limits_isra_13+E0↑j
.text:00000000000090B0                 mov     r14, r10
.text:00000000000090B3                 mov     r10, rax
.text:00000000000090B6                 db      2Eh
.text:00000000000090B6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000090C0
.text:00000000000090C0 loc_90C0:                               ; CODE XREF: check_dst_limits_isra_13+106↑j
.text:00000000000090C0                 lea     rbp, [r14+1]
.text:00000000000090C4                 mov     rax, r10
.text:00000000000090C7                 jmp     loc_8F57
.text:00000000000090C7 ; ---------------------------------------------------------------------------
.text:00000000000090CC                 align 10h
.text:00000000000090D0
.text:00000000000090D0 loc_90D0:                               ; CODE XREF: check_dst_limits_isra_13+8E↑j
.text:00000000000090D0                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:00000000000090D7                 jmp     loc_8F52
.text:00000000000090D7 ; ---------------------------------------------------------------------------
.text:00000000000090DC                 align 20h
.text:00000000000090E0
.text:00000000000090E0 loc_90E0:                               ; CODE XREF: check_dst_limits_isra_13+117↑j
.text:00000000000090E0                 mov     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000090E7                 jmp     loc_8FDC
.text:00000000000090E7 ; ---------------------------------------------------------------------------
.text:00000000000090EC                 align 10h
.text:00000000000090F0
.text:00000000000090F0 loc_90F0:                               ; CODE XREF: check_dst_limits_isra_13+1D7↑j
.text:00000000000090F0                 mov     rax, [rsp+78h+var_40]
.text:00000000000090F5                 add     r14, 1
.text:00000000000090F9                 cmp     r14, [rax]
.text:00000000000090FC                 jl      loc_9010
.text:0000000000009102
.text:0000000000009102 loc_9102:                               ; CODE XREF: check_dst_limits_isra_13+140↑j
.text:0000000000009102                 xor     eax, eax
.text:0000000000009104                 jmp     loc_907E
.text:0000000000009104 ; } // starts at 8EA0
.text:0000000000009104 check_dst_limits_isra_13 endp
.text:0000000000009104
.text:0000000000009104 ; ---------------------------------------------------------------------------
.text:0000000000009109                 align 10h
.text:0000000000009110
.text:0000000000009110 ; =============== S U B R O U T I N E =======================================
.text:0000000000009110
.text:0000000000009110
.text:0000000000009110 re_node_set_merge proc near             ; CODE XREF: calc_eclosure_iter+132↓p
.text:0000000000009110                                         ; check_arrival_expand_ecl+113↓p ...
.text:0000000000009110 ; __unwind {
.text:0000000000009110                 test    rsi, rsi
.text:0000000000009113                 jz      loc_9208
.text:0000000000009119                 mov     rdx, [rsi+8]
.text:000000000000911D                 test    rdx, rdx
.text:0000000000009120                 jz      loc_9208
.text:0000000000009126                 push    r12
.text:0000000000009128                 push    rbp
.text:0000000000009129                 mov     r12, rsi
.text:000000000000912C                 push    rbx
.text:000000000000912D                 mov     rax, [rdi+8]
.text:0000000000009131                 mov     rbx, rdi
.text:0000000000009134                 mov     rsi, [rdi]
.text:0000000000009137                 lea     rcx, [rax+rdx*2]
.text:000000000000913B                 cmp     rsi, rcx
.text:000000000000913E                 jl      loc_9288
.text:0000000000009144
.text:0000000000009144 loc_9144:                               ; CODE XREF: re_node_set_merge+1A4↓j
.text:0000000000009144                 test    rax, rax
.text:0000000000009147                 jz      loc_92C0
.text:000000000000914D                 lea     rbp, [rax+rdx*2]
.text:0000000000009151                 sub     rdx, 1
.text:0000000000009155                 sub     rax, 1
.text:0000000000009159                 mov     rdi, rdx
.text:000000000000915C                 not     rdi
.text:000000000000915F
.text:000000000000915F loc_915F:                               ; CODE XREF: re_node_set_merge+10E↓j
.text:000000000000915F                                         ; re_node_set_merge+11C↓j
.text:000000000000915F                 test    rdi, rdi
.text:0000000000009162                 jns     short loc_91A0
.text:0000000000009164
.text:0000000000009164 loc_9164:                               ; CODE XREF: re_node_set_merge+8B↓j
.text:0000000000009164                 test    rax, rax
.text:0000000000009167                 js      short loc_91A0
.text:0000000000009169                 mov     rcx, [rbx+10h]
.text:000000000000916D                 mov     rsi, [r12+10h]
.text:0000000000009172                 mov     rsi, [rsi+rdx*8]
.text:0000000000009176                 cmp     [rcx+rax*8], rsi
.text:000000000000917A                 jz      loc_9210
.text:0000000000009180                 jge     loc_9228
.text:0000000000009186                 sub     rdx, 1
.text:000000000000918A                 sub     rbp, 1
.text:000000000000918E                 mov     rdi, rdx
.text:0000000000009191                 mov     [rcx+rbp*8], rsi
.text:0000000000009195                 not     rdi
.text:0000000000009198                 test    rdi, rdi
.text:000000000000919B                 js      short loc_9164
.text:000000000000919D                 nop     dword ptr [rax]
.text:00000000000091A0
.text:00000000000091A0 loc_91A0:                               ; CODE XREF: re_node_set_merge+52↑j
.text:00000000000091A0                                         ; re_node_set_merge+57↑j
.text:00000000000091A0                 test    rdx, rdx
.text:00000000000091A3                 jns     loc_9238
.text:00000000000091A9
.text:00000000000091A9 loc_91A9:                               ; CODE XREF: re_node_set_merge+145↓j
.text:00000000000091A9                 mov     rcx, [rbx+8]
.text:00000000000091AD                 mov     rax, [r12+8]
.text:00000000000091B2                 lea     r8, [rcx+rax*2-1]
.text:00000000000091B7                 mov     rdx, r8
.text:00000000000091BA                 sub     rdx, rbp
.text:00000000000091BD                 add     rdx, 1
.text:00000000000091C1                 jz      short loc_91FA
.text:00000000000091C3                 mov     rdi, [rbx+10h]  ; dest
.text:00000000000091C7                 lea     rax, [rcx-1]
.text:00000000000091CB                 add     rcx, rdx
.text:00000000000091CE                 mov     [rbx+8], rcx
.text:00000000000091D2                 nop     word ptr [rax+rax+00h]
.text:00000000000091D8
.text:00000000000091D8 loc_91D8:                               ; CODE XREF: re_node_set_merge+E8↓j
.text:00000000000091D8                                         ; re_node_set_merge+157↓j
.text:00000000000091D8                 mov     rsi, [rdi+r8*8]
.text:00000000000091DC                 mov     rcx, [rdi+rax*8]
.text:00000000000091E0                 lea     r9, [rax+rdx]
.text:00000000000091E4                 lea     r9, [rdi+r9*8]
.text:00000000000091E8                 cmp     rsi, rcx
.text:00000000000091EB                 jle     short loc_9260
.text:00000000000091ED                 sub     r8, 1
.text:00000000000091F1                 sub     rdx, 1
.text:00000000000091F5                 mov     [r9], rsi
.text:00000000000091F8                 jnz     short loc_91D8
.text:00000000000091FA
.text:00000000000091FA loc_91FA:                               ; CODE XREF: re_node_set_merge+B1↑j
.text:00000000000091FA                                         ; re_node_set_merge+1CF↓j
.text:00000000000091FA                 xor     eax, eax
.text:00000000000091FC
.text:00000000000091FC loc_91FC:                               ; CODE XREF: re_node_set_merge+16C↓j
.text:00000000000091FC                                         ; re_node_set_merge+1D9↓j
.text:00000000000091FC                 pop     rbx
.text:00000000000091FD                 pop     rbp
.text:00000000000091FE                 pop     r12
.text:0000000000009200                 retn
.text:0000000000009200 ; ---------------------------------------------------------------------------
.text:0000000000009201                 align 8
.text:0000000000009208
.text:0000000000009208 loc_9208:                               ; CODE XREF: re_node_set_merge+3↑j
.text:0000000000009208                                         ; re_node_set_merge+10↑j
.text:0000000000009208                 xor     eax, eax
.text:000000000000920A                 retn
.text:000000000000920A ; ---------------------------------------------------------------------------
.text:000000000000920B                 align 10h
.text:0000000000009210
.text:0000000000009210 loc_9210:                               ; CODE XREF: re_node_set_merge+6A↑j
.text:0000000000009210                 sub     rdx, 1
.text:0000000000009214                 sub     rax, 1
.text:0000000000009218                 mov     rdi, rdx
.text:000000000000921B                 not     rdi
.text:000000000000921E                 jmp     loc_915F
.text:000000000000921E ; ---------------------------------------------------------------------------
.text:0000000000009223                 align 8
.text:0000000000009228
.text:0000000000009228 loc_9228:                               ; CODE XREF: re_node_set_merge+70↑j
.text:0000000000009228                 sub     rax, 1
.text:000000000000922C                 jmp     loc_915F
.text:000000000000922C ; ---------------------------------------------------------------------------
.text:0000000000009231                 align 8
.text:0000000000009238
.text:0000000000009238 loc_9238:                               ; CODE XREF: re_node_set_merge+93↑j
.text:0000000000009238                 mov     rax, [rbx+10h]
.text:000000000000923C                 add     rdx, 1
.text:0000000000009240                 mov     rsi, [r12+10h]  ; src
.text:0000000000009245                 sub     rbp, rdx
.text:0000000000009248                 shl     rdx, 3          ; n
.text:000000000000924C                 lea     rdi, [rax+rbp*8] ; dest
.text:0000000000009250                 call    _memcpy
.text:0000000000009255                 jmp     loc_91A9
.text:0000000000009255 ; ---------------------------------------------------------------------------
.text:000000000000925A                 align 20h
.text:0000000000009260
.text:0000000000009260 loc_9260:                               ; CODE XREF: re_node_set_merge+DB↑j
.text:0000000000009260                 sub     rax, 1
.text:0000000000009264                 mov     [r9], rcx
.text:0000000000009267                 jns     loc_91D8
.text:000000000000926D                 lea     rsi, [rdi+rbp*8] ; src
.text:0000000000009271                 shl     rdx, 3          ; n
.text:0000000000009275                 call    _memcpy
.text:000000000000927A                 xor     eax, eax
.text:000000000000927C                 jmp     loc_91FC
.text:000000000000927C ; ---------------------------------------------------------------------------
.text:0000000000009281                 align 8
.text:0000000000009288
.text:0000000000009288 loc_9288:                               ; CODE XREF: re_node_set_merge+2E↑j
.text:0000000000009288                 add     rdx, rsi
.text:000000000000928B                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000928F                 lea     rbp, [rdx+rdx]
.text:0000000000009293                 shl     rdx, 4
.text:0000000000009297                 mov     rsi, rdx        ; size
.text:000000000000929A                 call    _realloc
.text:000000000000929F                 test    rax, rax
.text:00000000000092A2                 jz      short loc_92E4
.text:00000000000092A4                 mov     [rbx+10h], rax
.text:00000000000092A8                 mov     [rbx], rbp
.text:00000000000092AB                 mov     rax, [rbx+8]
.text:00000000000092AF                 mov     rdx, [r12+8]
.text:00000000000092B4                 jmp     loc_9144
.text:00000000000092B4 ; ---------------------------------------------------------------------------
.text:00000000000092B9                 align 20h
.text:00000000000092C0
.text:00000000000092C0 loc_92C0:                               ; CODE XREF: re_node_set_merge+37↑j
.text:00000000000092C0                 mov     [rbx+8], rdx
.text:00000000000092C4                 mov     rax, [r12+8]
.text:00000000000092C9                 mov     rdi, [rbx+10h]  ; dest
.text:00000000000092CD                 mov     rsi, [r12+10h]  ; src
.text:00000000000092D2                 lea     rdx, ds:0[rax*8] ; n
.text:00000000000092DA                 call    _memcpy
.text:00000000000092DF                 jmp     loc_91FA
.text:00000000000092E4 ; ---------------------------------------------------------------------------
.text:00000000000092E4
.text:00000000000092E4 loc_92E4:                               ; CODE XREF: re_node_set_merge+192↑j
.text:00000000000092E4                 mov     eax, 0Ch
.text:00000000000092E9                 jmp     loc_91FC
.text:00000000000092E9 ; } // starts at 9110
.text:00000000000092E9 re_node_set_merge endp
.text:00000000000092E9
.text:00000000000092E9 ; ---------------------------------------------------------------------------
.text:00000000000092EE                 align 10h
.text:00000000000092F0
.text:00000000000092F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000092F0
.text:00000000000092F0
.text:00000000000092F0 calc_eclosure_iter proc near            ; CODE XREF: calc_eclosure_iter+28E↓p
.text:00000000000092F0                                         ; re_compile_internal+A2A↓p
.text:00000000000092F0
.text:00000000000092F0 var_90          = qword ptr -90h
.text:00000000000092F0 var_88          = qword ptr -88h
.text:00000000000092F0 var_7D          = byte ptr -7Dh
.text:00000000000092F0 var_7C          = dword ptr -7Ch
.text:00000000000092F0 var_78          = xmmword ptr -78h
.text:00000000000092F0 var_68          = qword ptr -68h
.text:00000000000092F0 var_58          = xmmword ptr -58h
.text:00000000000092F0 ptr             = qword ptr -48h
.text:00000000000092F0 var_40          = qword ptr -40h
.text:00000000000092F0
.text:00000000000092F0 ; __unwind {
.text:00000000000092F0                 push    r15
.text:00000000000092F2                 push    r14
.text:00000000000092F4                 mov     r15, rsi
.text:00000000000092F7                 push    r13
.text:00000000000092F9                 push    r12
.text:00000000000092FB                 push    rbp
.text:00000000000092FC                 push    rbx
.text:00000000000092FD                 lea     rbx, [rdx+rdx*2]
.text:0000000000009301                 mov     rbp, rdx
.text:0000000000009304                 sub     rsp, 68h
.text:0000000000009308                 mov     r12, [rsi+28h]
.text:000000000000930C                 shl     rbx, 3
.text:0000000000009310                 mov     rax, fs:28h
.text:0000000000009319                 mov     [rsp+98h+var_40], rax
.text:000000000000931E                 xor     eax, eax
.text:0000000000009320                 mov     [rsp+98h+var_88], rdi
.text:0000000000009325                 mov     [rsp+98h+var_7C], ecx
.text:0000000000009329                 add     r12, rbx
.text:000000000000932C                 mov     rax, [r12+8]
.text:0000000000009331                 mov     qword ptr [rsp+98h+var_78+8], 0
.text:000000000000933A                 lea     rdi, [rax+1]
.text:000000000000933E                 mov     qword ptr [rsp+98h+var_78], rdi
.text:0000000000009343                 shl     rdi, 3          ; size
.text:0000000000009347                 call    _malloc
.text:000000000000934C                 test    rax, rax
.text:000000000000934F                 mov     [rsp+98h+var_68], rax
.text:0000000000009354                 jz      loc_9590
.text:000000000000935A                 mov     rax, [r15+30h]
.text:000000000000935E                 mov     rdx, [r15]
.text:0000000000009361                 mov     r13, rbp
.text:0000000000009364                 shl     r13, 4
.text:0000000000009368                 mov     qword ptr [rax+rbx+8], 0FFFFFFFFFFFFFFFFh
.text:0000000000009371                 lea     rax, [rdx+r13]
.text:0000000000009375                 mov     r8d, [rax+8]
.text:0000000000009379                 test    r8d, 3FF00h
.text:0000000000009380                 jnz     loc_9520
.text:0000000000009386
.text:0000000000009386 loc_9386:                               ; CODE XREF: calc_eclosure_iter+24D↓j
.text:0000000000009386                                         ; calc_eclosure_iter+27D↓j
.text:0000000000009386                 test    byte ptr [rax+8], 8
.text:000000000000938A                 jz      loc_9450
.text:0000000000009390                 mov     rsi, [r15+28h]
.text:0000000000009394                 lea     rax, [rsi+rbx]
.text:0000000000009398                 cmp     qword ptr [rax+8], 0
.text:000000000000939D                 jle     loc_9450
.text:00000000000093A3                 lea     rdx, [rsp+98h+var_78]
.text:00000000000093A8                 mov     [rsp+98h+var_7D], 0
.text:00000000000093AD                 xor     r14d, r14d
.text:00000000000093B0                 lea     r12, [rsp+98h+var_58]
.text:00000000000093B5                 mov     [rsp+98h+var_90], rdx
.text:00000000000093BA                 jmp     short loc_93D6
.text:00000000000093BA ; ---------------------------------------------------------------------------
.text:00000000000093BC                 align 20h
.text:00000000000093C0
.text:00000000000093C0 loc_93C0:                               ; CODE XREF: calc_eclosure_iter+145↓j
.text:00000000000093C0                                         ; calc_eclosure_iter+156↓j
.text:00000000000093C0                 mov     rsi, [r15+28h]
.text:00000000000093C4                 add     r14, 1
.text:00000000000093C8                 lea     rax, [rsi+rbx]
.text:00000000000093CC                 cmp     [rax+8], r14
.text:00000000000093D0                 jle     loc_94D7
.text:00000000000093D6
.text:00000000000093D6 loc_93D6:                               ; CODE XREF: calc_eclosure_iter+CA↑j
.text:00000000000093D6                                         ; calc_eclosure_iter+1E1↓j
.text:00000000000093D6                 mov     rax, [rax+10h]
.text:00000000000093DA                 mov     rdx, [rax+r14*8]
.text:00000000000093DE                 mov     rax, [r15+30h]
.text:00000000000093E2                 lea     r8, [rdx+rdx*2]
.text:00000000000093E6                 lea     r13, ds:0[r8*8]
.text:00000000000093EE                 add     rax, r13
.text:00000000000093F1                 mov     rcx, [rax+8]
.text:00000000000093F5                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000093F9                 jz      loc_94C0
.text:00000000000093FF                 test    rcx, rcx
.text:0000000000009402                 jz      loc_9578
.text:0000000000009408                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000940C                 movaps  [rsp+98h+var_58], xmm0
.text:0000000000009411                 mov     rax, [rax+10h]
.text:0000000000009415                 mov     [rsp+98h+ptr], rax
.text:000000000000941A
.text:000000000000941A loc_941A:                               ; CODE XREF: calc_eclosure_iter+295↓j
.text:000000000000941A                 mov     rdi, [rsp+98h+var_90]
.text:000000000000941F                 mov     rsi, r12
.text:0000000000009422                 call    re_node_set_merge
.text:0000000000009427                 test    eax, eax
.text:0000000000009429                 jnz     short loc_9496
.text:000000000000942B                 mov     rax, [r15+30h]
.text:000000000000942F                 cmp     qword ptr [rax+r13+8], 0
.text:0000000000009435                 jnz     short loc_93C0
.text:0000000000009437                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000943C                 call    _free
.text:0000000000009441                 mov     [rsp+98h+var_7D], 1
.text:0000000000009446                 jmp     loc_93C0
.text:0000000000009446 ; ---------------------------------------------------------------------------
.text:000000000000944B                 align 10h
.text:0000000000009450
.text:0000000000009450 loc_9450:                               ; CODE XREF: calc_eclosure_iter+9A↑j
.text:0000000000009450                                         ; calc_eclosure_iter+AD↑j ...
.text:0000000000009450                 lea     rdi, [rsp+98h+var_78]
.text:0000000000009455                 mov     rsi, rbp
.text:0000000000009458                 call    re_node_set_insert
.text:000000000000945D                 test    al, al
.text:000000000000945F                 jz      loc_9590
.text:0000000000009465                 mov     rax, [r15+30h]
.text:0000000000009469
.text:0000000000009469 loc_9469:                               ; CODE XREF: calc_eclosure_iter+209↓j
.text:0000000000009469                                         ; calc_eclosure_iter+214↓j
.text:0000000000009469                 movdqa  xmm0, [rsp+98h+var_78]
.text:000000000000946F                 movups  xmmword ptr [rax+rbx], xmm0
.text:0000000000009473                 mov     rdx, [rsp+98h+var_68]
.text:0000000000009478                 mov     [rax+rbx+10h], rdx
.text:000000000000947D
.text:000000000000947D loc_947D:                               ; CODE XREF: calc_eclosure_iter+222↓j
.text:000000000000947D                 mov     rbx, [rsp+98h+var_88]
.text:0000000000009482                 mov     rax, [rsp+98h+var_68]
.text:0000000000009487                 movdqa  xmm0, [rsp+98h+var_78]
.text:000000000000948D                 movaps  xmmword ptr [rbx], xmm0
.text:0000000000009490                 mov     [rbx+10h], rax
.text:0000000000009494                 xor     eax, eax
.text:0000000000009496
.text:0000000000009496 loc_9496:                               ; CODE XREF: calc_eclosure_iter+139↑j
.text:0000000000009496                                         ; calc_eclosure_iter+271↓j ...
.text:0000000000009496                 mov     rsi, [rsp+98h+var_40]
.text:000000000000949B                 xor     rsi, fs:28h
.text:00000000000094A4                 jnz     loc_959A
.text:00000000000094AA                 add     rsp, 68h
.text:00000000000094AE                 pop     rbx
.text:00000000000094AF                 pop     rbp
.text:00000000000094B0                 pop     r12
.text:00000000000094B2                 pop     r13
.text:00000000000094B4                 pop     r14
.text:00000000000094B6                 pop     r15
.text:00000000000094B8                 retn
.text:00000000000094B8 ; ---------------------------------------------------------------------------
.text:00000000000094B9                 align 20h
.text:00000000000094C0
.text:00000000000094C0 loc_94C0:                               ; CODE XREF: calc_eclosure_iter+109↑j
.text:00000000000094C0                 lea     rax, [rsi+rbx]
.text:00000000000094C4                 add     r14, 1
.text:00000000000094C8                 mov     [rsp+98h+var_7D], 1
.text:00000000000094CD                 cmp     [rax+8], r14
.text:00000000000094D1                 jg      loc_93D6
.text:00000000000094D7
.text:00000000000094D7 loc_94D7:                               ; CODE XREF: calc_eclosure_iter+E0↑j
.text:00000000000094D7                 lea     rdi, [rsp+98h+var_78]
.text:00000000000094DC                 mov     rsi, rbp
.text:00000000000094DF                 call    re_node_set_insert
.text:00000000000094E4                 test    al, al
.text:00000000000094E6                 jz      loc_9590
.text:00000000000094EC                 cmp     byte ptr [rsp+98h+var_7C], 1
.text:00000000000094F1                 mov     rax, [r15+30h]
.text:00000000000094F5                 lea     rdx, [rax+rbx]
.text:00000000000094F9                 jz      loc_9469
.text:00000000000094FF                 cmp     [rsp+98h+var_7D], 0
.text:0000000000009504                 jz      loc_9469
.text:000000000000950A                 mov     qword ptr [rdx+8], 0
.text:0000000000009512                 jmp     loc_947D
.text:0000000000009512 ; ---------------------------------------------------------------------------
.text:0000000000009517                 align 20h
.text:0000000000009520
.text:0000000000009520 loc_9520:                               ; CODE XREF: calc_eclosure_iter+90↑j
.text:0000000000009520                 cmp     qword ptr [r12+8], 0
.text:0000000000009526                 jz      loc_9450
.text:000000000000952C                 mov     rcx, [r12+10h]
.text:0000000000009531                 mov     rcx, [rcx]
.text:0000000000009534                 shl     rcx, 4
.text:0000000000009538                 test    byte ptr [rdx+rcx+0Ah], 4
.text:000000000000953D                 jnz     loc_9386
.text:0000000000009543                 shr     r8d, 8
.text:0000000000009547                 mov     rcx, rbp
.text:000000000000954A                 mov     rdx, rbp
.text:000000000000954D                 and     r8d, 3FFh
.text:0000000000009554                 mov     rsi, rbp
.text:0000000000009557                 mov     rdi, r15
.text:000000000000955A                 call    duplicate_node_closure
.text:000000000000955F                 test    eax, eax
.text:0000000000009561                 jnz     loc_9496
.text:0000000000009567                 mov     rax, [r15]
.text:000000000000956A                 add     rax, r13
.text:000000000000956D                 jmp     loc_9386
.text:000000000000956D ; ---------------------------------------------------------------------------
.text:0000000000009572                 align 8
.text:0000000000009578
.text:0000000000009578 loc_9578:                               ; CODE XREF: calc_eclosure_iter+112↑j
.text:0000000000009578                 mov     rsi, r15
.text:000000000000957B                 mov     rdi, r12
.text:000000000000957E                 call    calc_eclosure_iter
.text:0000000000009583                 test    eax, eax
.text:0000000000009585                 jz      loc_941A
.text:000000000000958B                 jmp     loc_9496
.text:0000000000009590 ; ---------------------------------------------------------------------------
.text:0000000000009590
.text:0000000000009590 loc_9590:                               ; CODE XREF: calc_eclosure_iter+64↑j
.text:0000000000009590                                         ; calc_eclosure_iter+16F↑j ...
.text:0000000000009590                 mov     eax, 0Ch
.text:0000000000009595                 jmp     loc_9496
.text:000000000000959A ; ---------------------------------------------------------------------------
.text:000000000000959A
.text:000000000000959A loc_959A:                               ; CODE XREF: calc_eclosure_iter+1B4↑j
.text:000000000000959A                 call    ___stack_chk_fail
.text:000000000000959A ; } // starts at 92F0
.text:000000000000959A calc_eclosure_iter endp
.text:000000000000959A
.text:000000000000959A ; ---------------------------------------------------------------------------
.text:000000000000959F                 align 20h
.text:00000000000095A0
.text:00000000000095A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000095A0
.text:00000000000095A0
.text:00000000000095A0 check_arrival_expand_ecl proc near      ; CODE XREF: expand_bkref_cache+2A8↓p
.text:00000000000095A0                                         ; check_arrival+374↓p ...
.text:00000000000095A0
.text:00000000000095A0 var_5C          = dword ptr -5Ch
.text:00000000000095A0 var_58          = xmmword ptr -58h
.text:00000000000095A0 ptr             = qword ptr -48h
.text:00000000000095A0 var_40          = qword ptr -40h
.text:00000000000095A0
.text:00000000000095A0 ; __unwind {
.text:00000000000095A0                 push    r15
.text:00000000000095A2                 push    r14
.text:00000000000095A4                 mov     r14, rdi
.text:00000000000095A7                 push    r13
.text:00000000000095A9                 push    r12
.text:00000000000095AB                 mov     r15, rsi
.text:00000000000095AE                 push    rbp
.text:00000000000095AF                 push    rbx
.text:00000000000095B0                 mov     rbp, rdx
.text:00000000000095B3                 mov     ebx, ecx
.text:00000000000095B5                 sub     rsp, 38h
.text:00000000000095B9                 mov     r12, [rsi+8]
.text:00000000000095BD                 mov     rax, fs:28h
.text:00000000000095C6                 mov     [rsp+68h+var_40], rax
.text:00000000000095CB                 xor     eax, eax
.text:00000000000095CD                 mov     qword ptr [rsp+68h+var_58+8], 0
.text:00000000000095D6                 lea     rdi, ds:0[r12*8] ; size
.text:00000000000095DE                 mov     qword ptr [rsp+68h+var_58], r12
.text:00000000000095E3                 call    _malloc
.text:00000000000095E8                 test    rax, rax
.text:00000000000095EB                 mov     [rsp+68h+ptr], rax
.text:00000000000095F0                 jz      loc_96ED
.text:00000000000095F6                 test    r12, r12
.text:00000000000095F9                 jle     loc_968B
.text:00000000000095FF                 lea     r12, [rsp+68h+var_58]
.text:0000000000009604                 xor     r13d, r13d
.text:0000000000009607                 nop     word ptr [rax+rax+00000000h]
.text:0000000000009610
.text:0000000000009610 loc_9610:                               ; CODE XREF: check_arrival_expand_ecl+E9↓j
.text:0000000000009610                 mov     rax, [r15+10h]
.text:0000000000009614                 mov     rdx, [rax+r13*8]
.text:0000000000009618                 mov     rax, [r14+30h]
.text:000000000000961C                 lea     rcx, [rdx+rdx*2]
.text:0000000000009620                 lea     rsi, [rax+rcx*8]
.text:0000000000009624                 mov     r8, [rsi+8]
.text:0000000000009628                 test    r8, r8
.text:000000000000962B                 jle     loc_96B0
.text:0000000000009631                 mov     r10, [rsi+10h]
.text:0000000000009635                 mov     r9, [r14]
.text:0000000000009638                 xor     ecx, ecx
.text:000000000000963A                 jmp     short loc_9649
.text:000000000000963A ; ---------------------------------------------------------------------------
.text:000000000000963C                 align 20h
.text:0000000000009640
.text:0000000000009640 loc_9640:                               ; CODE XREF: check_arrival_expand_ecl+BF↓j
.text:0000000000009640                                         ; check_arrival_expand_ecl+C4↓j
.text:0000000000009640                 add     rcx, 1
.text:0000000000009644                 cmp     r8, rcx
.text:0000000000009647                 jz      short loc_96B0
.text:0000000000009649
.text:0000000000009649 loc_9649:                               ; CODE XREF: check_arrival_expand_ecl+9A↑j
.text:0000000000009649                 mov     rdi, [r10+rcx*8]
.text:000000000000964D                 mov     rax, rdi
.text:0000000000009650                 shl     rax, 4
.text:0000000000009654                 add     rax, r9
.text:0000000000009657                 movzx   r11d, byte ptr [rax+8]
.text:000000000000965C                 cmp     ebx, r11d
.text:000000000000965F                 jnz     short loc_9640
.text:0000000000009661                 cmp     rbp, [rax]
.text:0000000000009664                 jnz     short loc_9640
.text:0000000000009666                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000966A                 jz      short loc_96B0
.text:000000000000966C                 mov     r8d, ebx
.text:000000000000966F                 mov     rcx, rbp
.text:0000000000009672                 mov     rsi, r12
.text:0000000000009675                 mov     rdi, r14
.text:0000000000009678                 call    check_arrival_expand_ecl_sub
.text:000000000000967D                 test    eax, eax
.text:000000000000967F                 jnz     short loc_96BC
.text:0000000000009681
.text:0000000000009681 loc_9681:                               ; CODE XREF: check_arrival_expand_ecl+11A↓j
.text:0000000000009681                 add     r13, 1
.text:0000000000009685                 cmp     [r15+8], r13
.text:0000000000009689                 jg      short loc_9610
.text:000000000000968B
.text:000000000000968B loc_968B:                               ; CODE XREF: check_arrival_expand_ecl+59↑j
.text:000000000000968B                 mov     rdi, [r15+10h]  ; ptr
.text:000000000000968F                 call    _free
.text:0000000000009694                 mov     rax, [rsp+68h+ptr]
.text:0000000000009699                 movdqa  xmm0, [rsp+68h+var_58]
.text:000000000000969F                 mov     [r15+10h], rax
.text:00000000000096A3                 xor     eax, eax
.text:00000000000096A5                 movaps  xmmword ptr [r15], xmm0
.text:00000000000096A9                 jmp     short loc_96CE
.text:00000000000096A9 ; ---------------------------------------------------------------------------
.text:00000000000096AB                 align 10h
.text:00000000000096B0
.text:00000000000096B0 loc_96B0:                               ; CODE XREF: check_arrival_expand_ecl+8B↑j
.text:00000000000096B0                                         ; check_arrival_expand_ecl+A7↑j ...
.text:00000000000096B0                 mov     rdi, r12
.text:00000000000096B3                 call    re_node_set_merge
.text:00000000000096B8                 test    eax, eax
.text:00000000000096BA                 jz      short loc_9681
.text:00000000000096BC
.text:00000000000096BC loc_96BC:                               ; CODE XREF: check_arrival_expand_ecl+DF↑j
.text:00000000000096BC                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:00000000000096C1                 mov     [rsp+68h+var_5C], eax
.text:00000000000096C5                 call    _free
.text:00000000000096CA                 mov     eax, [rsp+68h+var_5C]
.text:00000000000096CE
.text:00000000000096CE loc_96CE:                               ; CODE XREF: check_arrival_expand_ecl+109↑j
.text:00000000000096CE                                         ; check_arrival_expand_ecl+152↓j
.text:00000000000096CE                 mov     rdx, [rsp+68h+var_40]
.text:00000000000096D3                 xor     rdx, fs:28h
.text:00000000000096DC                 jnz     short loc_96F4
.text:00000000000096DE                 add     rsp, 38h
.text:00000000000096E2                 pop     rbx
.text:00000000000096E3                 pop     rbp
.text:00000000000096E4                 pop     r12
.text:00000000000096E6                 pop     r13
.text:00000000000096E8                 pop     r14
.text:00000000000096EA                 pop     r15
.text:00000000000096EC                 retn
.text:00000000000096ED ; ---------------------------------------------------------------------------
.text:00000000000096ED
.text:00000000000096ED loc_96ED:                               ; CODE XREF: check_arrival_expand_ecl+50↑j
.text:00000000000096ED                 mov     eax, 0Ch
.text:00000000000096F2                 jmp     short loc_96CE
.text:00000000000096F4 ; ---------------------------------------------------------------------------
.text:00000000000096F4
.text:00000000000096F4 loc_96F4:                               ; CODE XREF: check_arrival_expand_ecl+13C↑j
.text:00000000000096F4                 call    ___stack_chk_fail
.text:00000000000096F4 ; } // starts at 95A0
.text:00000000000096F4 check_arrival_expand_ecl endp
.text:00000000000096F4
.text:00000000000096F4 ; ---------------------------------------------------------------------------
.text:00000000000096F9                 align 20h
.text:0000000000009700
.text:0000000000009700 ; =============== S U B R O U T I N E =======================================
.text:0000000000009700
.text:0000000000009700
.text:0000000000009700 re_node_set_add_intersect proc near     ; CODE XREF: _sub_epsilon_src_nodes+9C↓p
.text:0000000000009700                                         ; update_cur_sifted_state+107↓p
.text:0000000000009700 ; __unwind {
.text:0000000000009700                 mov     r9, [rsi+8]
.text:0000000000009704                 xor     eax, eax
.text:0000000000009706                 test    r9, r9
.text:0000000000009709                 jz      locret_97C8
.text:000000000000970F                 mov     r11, [rdx+8]
.text:0000000000009713                 test    r11, r11
.text:0000000000009716                 jz      locret_97C8
.text:000000000000971C                 push    r13
.text:000000000000971E                 push    r12
.text:0000000000009720                 lea     rax, [r9+r11]
.text:0000000000009724                 push    rbp
.text:0000000000009725                 push    rbx
.text:0000000000009726                 mov     r12, rdx
.text:0000000000009729                 mov     rbx, rdi
.text:000000000000972C                 mov     rbp, rsi
.text:000000000000972F                 sub     rsp, 8
.text:0000000000009733                 mov     rcx, [rdi+8]
.text:0000000000009737                 mov     r13, [rdi]
.text:000000000000973A                 mov     rdi, [rdi+10h]  ; ptr
.text:000000000000973E                 lea     rdx, [rax+rcx]
.text:0000000000009742                 cmp     rdx, r13
.text:0000000000009745                 jg      loc_9870
.text:000000000000974B
.text:000000000000974B loc_974B:                               ; CODE XREF: re_node_set_add_intersect+19C↓j
.text:000000000000974B                 lea     rsi, [rcx+r9]
.text:000000000000974F                 mov     r13, [rbp+10h]
.text:0000000000009753                 mov     rdx, [r12+10h]
.text:0000000000009758                 sub     r9, 1
.text:000000000000975C                 sub     rcx, 1
.text:0000000000009760                 add     rsi, r11
.text:0000000000009763                 sub     r11, 1
.text:0000000000009767                 mov     rax, [r13+r9*8+0]
.text:000000000000976C                 mov     r8, [rdx+r11*8]
.text:0000000000009770
.text:0000000000009770 loc_9770:                               ; CODE XREF: re_node_set_add_intersect+DB↓j
.text:0000000000009770                 cmp     rax, r8
.text:0000000000009773                 jz      short loc_9786
.text:0000000000009775
.text:0000000000009775 loc_9775:                               ; CODE XREF: re_node_set_add_intersect+84↓j
.text:0000000000009775                 jge     short loc_97D0
.text:0000000000009777                 sub     r11, 1
.text:000000000000977B                 js      short loc_97E0
.text:000000000000977D
.text:000000000000977D loc_977D:                               ; CODE XREF: re_node_set_add_intersect+C1↓j
.text:000000000000977D                 mov     r8, [rdx+r11*8]
.text:0000000000009781                 cmp     rax, r8
.text:0000000000009784                 jnz     short loc_9775
.text:0000000000009786
.text:0000000000009786 loc_9786:                               ; CODE XREF: re_node_set_add_intersect+73↑j
.text:0000000000009786                 test    rcx, rcx
.text:0000000000009789                 jns     short loc_979A
.text:000000000000978B                 jmp     short loc_97A8
.text:000000000000978B ; ---------------------------------------------------------------------------
.text:000000000000978D                 align 10h
.text:0000000000009790
.text:0000000000009790 loc_9790:                               ; CODE XREF: re_node_set_add_intersect+A1↓j
.text:0000000000009790                 sub     rcx, 1
.text:0000000000009794                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:0000000000009798                 jz      short loc_97A8
.text:000000000000979A
.text:000000000000979A loc_979A:                               ; CODE XREF: re_node_set_add_intersect+89↑j
.text:000000000000979A                 mov     r10, [rdi+rcx*8]
.text:000000000000979E                 cmp     r10, r8
.text:00000000000097A1                 jg      short loc_9790
.text:00000000000097A3                 cmp     r10, r8
.text:00000000000097A6                 jz      short loc_97B0
.text:00000000000097A8
.text:00000000000097A8 loc_97A8:                               ; CODE XREF: re_node_set_add_intersect+8B↑j
.text:00000000000097A8                                         ; re_node_set_add_intersect+98↑j
.text:00000000000097A8                 sub     rsi, 1
.text:00000000000097AC                 mov     [rdi+rsi*8], r8
.text:00000000000097B0
.text:00000000000097B0 loc_97B0:                               ; CODE XREF: re_node_set_add_intersect+A6↑j
.text:00000000000097B0                 sub     r9, 1
.text:00000000000097B4                 js      short loc_97E0
.text:00000000000097B6                 sub     r11, 1
.text:00000000000097BA                 js      short loc_97E0
.text:00000000000097BC                 mov     rax, [r13+r9*8+0]
.text:00000000000097C1                 jmp     short loc_977D
.text:00000000000097C1 ; ---------------------------------------------------------------------------
.text:00000000000097C3                 align 8
.text:00000000000097C8
.text:00000000000097C8 locret_97C8:                            ; CODE XREF: re_node_set_add_intersect+9↑j
.text:00000000000097C8                                         ; re_node_set_add_intersect+16↑j
.text:00000000000097C8                 rep retn
.text:00000000000097C8 ; ---------------------------------------------------------------------------
.text:00000000000097CA                 align 10h
.text:00000000000097D0
.text:00000000000097D0 loc_97D0:                               ; CODE XREF: re_node_set_add_intersect:loc_9775↑j
.text:00000000000097D0                 sub     r9, 1
.text:00000000000097D4                 js      short loc_97E0
.text:00000000000097D6                 mov     rax, [r13+r9*8+0]
.text:00000000000097DB                 jmp     short loc_9770
.text:00000000000097DB ; ---------------------------------------------------------------------------
.text:00000000000097DD                 align 20h
.text:00000000000097E0
.text:00000000000097E0 loc_97E0:                               ; CODE XREF: re_node_set_add_intersect+7B↑j
.text:00000000000097E0                                         ; re_node_set_add_intersect+B4↑j ...
.text:00000000000097E0                 mov     rcx, [rbx+8]
.text:00000000000097E4                 mov     rdx, [rbp+8]
.text:00000000000097E8                 add     rdx, rcx
.text:00000000000097EB                 add     rdx, [r12+8]
.text:00000000000097F0                 lea     rax, [rcx-1]
.text:00000000000097F4                 lea     r9, [rdx-1]
.text:00000000000097F8                 sub     rdx, rsi
.text:00000000000097FB                 add     rcx, rdx
.text:00000000000097FE                 test    rdx, rdx
.text:0000000000009801                 mov     [rbx+8], rcx
.text:0000000000009805                 jle     short loc_984D
.text:0000000000009807                 test    rax, rax
.text:000000000000980A                 js      short loc_984D
.text:000000000000980C                 nop     dword ptr [rax+00h]
.text:0000000000009810
.text:0000000000009810 loc_9810:                               ; CODE XREF: re_node_set_add_intersect+130↓j
.text:0000000000009810                                         ; re_node_set_add_intersect+14B↓j
.text:0000000000009810                 mov     r8, [rdi+r9*8]
.text:0000000000009814                 mov     rcx, [rdi+rax*8]
.text:0000000000009818                 lea     r10, [rax+rdx]
.text:000000000000981C                 lea     r10, [rdi+r10*8]
.text:0000000000009820                 cmp     r8, rcx
.text:0000000000009823                 jle     short loc_9840
.text:0000000000009825                 sub     r9, 1
.text:0000000000009829                 sub     rdx, 1
.text:000000000000982D                 mov     [r10], r8
.text:0000000000009830                 jnz     short loc_9810
.text:0000000000009832                 xor     edx, edx
.text:0000000000009834                 jmp     short loc_9851
.text:0000000000009834 ; ---------------------------------------------------------------------------
.text:0000000000009836                 align 20h
.text:0000000000009840
.text:0000000000009840 loc_9840:                               ; CODE XREF: re_node_set_add_intersect+123↑j
.text:0000000000009840                 sub     rax, 1
.text:0000000000009844                 mov     [r10], rcx
.text:0000000000009847                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000984B                 jnz     short loc_9810
.text:000000000000984D
.text:000000000000984D loc_984D:                               ; CODE XREF: re_node_set_add_intersect+105↑j
.text:000000000000984D                                         ; re_node_set_add_intersect+10A↑j
.text:000000000000984D                 shl     rdx, 3          ; n
.text:0000000000009851
.text:0000000000009851 loc_9851:                               ; CODE XREF: re_node_set_add_intersect+134↑j
.text:0000000000009851                 lea     rsi, [rdi+rsi*8] ; src
.text:0000000000009855                 call    _memcpy
.text:000000000000985A                 xor     eax, eax
.text:000000000000985C
.text:000000000000985C loc_985C:                               ; CODE XREF: re_node_set_add_intersect+1A6↓j
.text:000000000000985C                 add     rsp, 8
.text:0000000000009860                 pop     rbx
.text:0000000000009861                 pop     rbp
.text:0000000000009862                 pop     r12
.text:0000000000009864                 pop     r13
.text:0000000000009866                 retn
.text:0000000000009866 ; ---------------------------------------------------------------------------
.text:0000000000009867                 align 10h
.text:0000000000009870
.text:0000000000009870 loc_9870:                               ; CODE XREF: re_node_set_add_intersect+45↑j
.text:0000000000009870                 add     r13, rax
.text:0000000000009873                 lea     rsi, ds:0[r13*8] ; size
.text:000000000000987B                 call    _realloc
.text:0000000000009880                 test    rax, rax
.text:0000000000009883                 mov     rdi, rax
.text:0000000000009886                 jz      short loc_98A1
.text:0000000000009888                 mov     [rbx+10h], rax
.text:000000000000988C                 mov     [rbx], r13
.text:000000000000988F                 mov     rcx, [rbx+8]
.text:0000000000009893                 mov     r9, [rbp+8]
.text:0000000000009897                 mov     r11, [r12+8]
.text:000000000000989C                 jmp     loc_974B
.text:00000000000098A1 ; ---------------------------------------------------------------------------
.text:00000000000098A1
.text:00000000000098A1 loc_98A1:                               ; CODE XREF: re_node_set_add_intersect+186↑j
.text:00000000000098A1                 mov     eax, 0Ch
.text:00000000000098A6                 jmp     short loc_985C
.text:00000000000098A6 ; } // starts at 9700
.text:00000000000098A6 re_node_set_add_intersect endp
.text:00000000000098A6
.text:00000000000098A6 ; ---------------------------------------------------------------------------
.text:00000000000098A8                 align 10h
.text:00000000000098B0
.text:00000000000098B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000098B0
.text:00000000000098B0
.text:00000000000098B0 create_token_tree_isra_16 proc near     ; CODE XREF: duplicate_tree+3E↓p
.text:00000000000098B0                                         ; lower_subexp+82↓p ...
.text:00000000000098B0
.text:00000000000098B0 var_28          = qword ptr -28h
.text:00000000000098B0 var_20          = qword ptr -20h
.text:00000000000098B0 var_18          = qword ptr -18h
.text:00000000000098B0 var_10          = qword ptr -10h
.text:00000000000098B0
.text:00000000000098B0 ; __unwind {
.text:00000000000098B0                 push    rbx
.text:00000000000098B1                 mov     rbx, rdi
.text:00000000000098B4                 sub     rsp, 20h
.text:00000000000098B8                 mov     eax, [rsi]
.text:00000000000098BA                 cmp     eax, 0Fh
.text:00000000000098BD                 jz      short loc_9938
.text:00000000000098BF                 movsxd  r9, eax
.text:00000000000098C2                 lea     r10d, [rax+1]
.text:00000000000098C6                 mov     rdi, [rdi]
.text:00000000000098C9                 mov     rax, r9
.text:00000000000098CC                 shl     rax, 6
.text:00000000000098D0                 add     rax, 8
.text:00000000000098D4
.text:00000000000098D4 loc_98D4:                               ; CODE XREF: create_token_tree_isra_16+D7↓j
.text:00000000000098D4                 shl     r9, 6
.text:00000000000098D8                 mov     [rsi], r10d
.text:00000000000098DB                 add     rax, rdi
.text:00000000000098DE                 lea     rsi, [rdi+r9]
.text:00000000000098E2                 mov     qword ptr [rsi+8], 0
.text:00000000000098EA                 mov     [rsi+10h], rdx
.text:00000000000098EE                 lea     rdi, [rsi+20h]
.text:00000000000098F2                 mov     [rsi+18h], rcx
.text:00000000000098F6                 movdqu  xmm0, xmmword ptr [r8]
.text:00000000000098FB                 movups  xmmword ptr [rsi+30h], xmm0
.text:00000000000098FF                 and     byte ptr [rdi+1Ah], 0F3h
.text:0000000000009903                 test    rdx, rdx
.text:0000000000009906                 mov     qword ptr [rsi+20h], 0
.text:000000000000990E                 mov     qword ptr [rsi+28h], 0
.text:0000000000009916                 mov     qword ptr [rsi+40h], 0FFFFFFFFFFFFFFFFh
.text:000000000000991E                 jz      short loc_9923
.text:0000000000009920                 mov     [rdx], rax
.text:0000000000009923
.text:0000000000009923 loc_9923:                               ; CODE XREF: create_token_tree_isra_16+6E↑j
.text:0000000000009923                 test    rcx, rcx
.text:0000000000009926                 jz      short loc_992B
.text:0000000000009928                 mov     [rcx], rax
.text:000000000000992B
.text:000000000000992B loc_992B:                               ; CODE XREF: create_token_tree_isra_16+76↑j
.text:000000000000992B                                         ; create_token_tree_isra_16+DE↓j
.text:000000000000992B                 add     rsp, 20h
.text:000000000000992F                 pop     rbx
.text:0000000000009930                 retn
.text:0000000000009930 ; ---------------------------------------------------------------------------
.text:0000000000009931                 align 8
.text:0000000000009938
.text:0000000000009938 loc_9938:                               ; CODE XREF: create_token_tree_isra_16+D↑j
.text:0000000000009938                 mov     edi, 3C8h       ; size
.text:000000000000993D                 mov     [rsp+28h+var_10], r8
.text:0000000000009942                 mov     [rsp+28h+var_18], rcx
.text:0000000000009947                 mov     [rsp+28h+var_20], rdx
.text:000000000000994C                 mov     [rsp+28h+var_28], rsi
.text:0000000000009950                 call    _malloc
.text:0000000000009955                 test    rax, rax
.text:0000000000009958                 mov     rdi, rax
.text:000000000000995B                 jz      short loc_998C
.text:000000000000995D                 mov     rax, [rbx]
.text:0000000000009960                 mov     r10d, 1
.text:0000000000009966                 mov     [rbx], rdi
.text:0000000000009969                 xor     r9d, r9d
.text:000000000000996C                 mov     r8, [rsp+28h+var_10]
.text:0000000000009971                 mov     rcx, [rsp+28h+var_18]
.text:0000000000009976                 mov     rdx, [rsp+28h+var_20]
.text:000000000000997B                 mov     rsi, [rsp+28h+var_28]
.text:000000000000997F                 mov     [rdi], rax
.text:0000000000009982                 mov     eax, 8
.text:0000000000009987                 jmp     loc_98D4
.text:000000000000998C ; ---------------------------------------------------------------------------
.text:000000000000998C
.text:000000000000998C loc_998C:                               ; CODE XREF: create_token_tree_isra_16+AB↑j
.text:000000000000998C                 xor     eax, eax
.text:000000000000998E                 jmp     short loc_992B
.text:000000000000998E ; } // starts at 98B0
.text:000000000000998E create_token_tree_isra_16 endp
.text:000000000000998E
.text:0000000000009990
.text:0000000000009990 ; =============== S U B R O U T I N E =======================================
.text:0000000000009990
.text:0000000000009990
.text:0000000000009990 duplicate_tree  proc near               ; CODE XREF: parse_expression+2AC↓p
.text:0000000000009990                                         ; parse_expression+408↓p ...
.text:0000000000009990
.text:0000000000009990 var_38          = qword ptr -38h
.text:0000000000009990 var_30          = qword ptr -30h
.text:0000000000009990
.text:0000000000009990 ; __unwind {
.text:0000000000009990                 push    r14
.text:0000000000009992                 push    r13
.text:0000000000009994                 lea     r13, [rsi+70h]
.text:0000000000009998                 push    r12
.text:000000000000999A                 push    rbp
.text:000000000000999B                 lea     r12, [rsi+80h]
.text:00000000000099A2                 push    rbx
.text:00000000000099A3                 mov     rbx, rdi
.text:00000000000099A6                 sub     rsp, 10h
.text:00000000000099AA                 mov     rbp, [rdi]
.text:00000000000099AD                 mov     rax, fs:28h
.text:00000000000099B6                 mov     [rsp+38h+var_30], rax
.text:00000000000099BB                 xor     eax, eax
.text:00000000000099BD                 mov     r14, rsp
.text:00000000000099C0
.text:00000000000099C0 loc_99C0:                               ; CODE XREF: duplicate_tree+65↓j
.text:00000000000099C0                                         ; duplicate_tree+C7↓j
.text:00000000000099C0                 lea     r8, [rbx+28h]
.text:00000000000099C4                 xor     ecx, ecx
.text:00000000000099C6                 xor     edx, edx
.text:00000000000099C8                 mov     rsi, r12
.text:00000000000099CB                 mov     rdi, r13
.text:00000000000099CE                 call    create_token_tree_isra_16
.text:00000000000099D3                 test    rax, rax
.text:00000000000099D6                 mov     [r14], rax
.text:00000000000099D9                 jz      short loc_9A2C
.text:00000000000099DB                 mov     [rax], rbp
.text:00000000000099DE                 mov     rbp, [r14]
.text:00000000000099E1                 or      byte ptr [rbp+32h], 4
.text:00000000000099E5                 mov     rax, [rbx+8]
.text:00000000000099E9                 test    rax, rax
.text:00000000000099EC                 jz      short loc_9A00
.text:00000000000099EE                 lea     r14, [rbp+8]
.text:00000000000099F2                 mov     rbx, rax
.text:00000000000099F5                 jmp     short loc_99C0
.text:00000000000099F5 ; ---------------------------------------------------------------------------
.text:00000000000099F7                 align 20h
.text:0000000000009A00
.text:0000000000009A00 loc_9A00:                               ; CODE XREF: duplicate_tree+5C↑j
.text:0000000000009A00                 xor     edx, edx
.text:0000000000009A02                 jmp     short loc_9A0B
.text:0000000000009A02 ; ---------------------------------------------------------------------------
.text:0000000000009A04                 align 8
.text:0000000000009A08
.text:0000000000009A08 loc_9A08:                               ; CODE XREF: duplicate_tree+96↓j
.text:0000000000009A08                 mov     rbx, rax
.text:0000000000009A0B
.text:0000000000009A0B loc_9A0B:                               ; CODE XREF: duplicate_tree+72↑j
.text:0000000000009A0B                 mov     rax, [rbx+10h]
.text:0000000000009A0F                 test    rax, rax
.text:0000000000009A12                 jz      short loc_9A19
.text:0000000000009A14                 cmp     rax, rdx
.text:0000000000009A17                 jnz     short loc_9A50
.text:0000000000009A19
.text:0000000000009A19 loc_9A19:                               ; CODE XREF: duplicate_tree+82↑j
.text:0000000000009A19                 mov     rax, [rbx]
.text:0000000000009A1C                 mov     rbp, [rbp+0]
.text:0000000000009A20                 mov     rdx, rbx
.text:0000000000009A23                 test    rax, rax
.text:0000000000009A26                 jnz     short loc_9A08
.text:0000000000009A28                 mov     rax, [rsp+38h+var_38]
.text:0000000000009A2C
.text:0000000000009A2C loc_9A2C:                               ; CODE XREF: duplicate_tree+49↑j
.text:0000000000009A2C                 mov     rcx, [rsp+38h+var_30]
.text:0000000000009A31                 xor     rcx, fs:28h
.text:0000000000009A3A                 jnz     short loc_9A5C
.text:0000000000009A3C                 add     rsp, 10h
.text:0000000000009A40                 pop     rbx
.text:0000000000009A41                 pop     rbp
.text:0000000000009A42                 pop     r12
.text:0000000000009A44                 pop     r13
.text:0000000000009A46                 pop     r14
.text:0000000000009A48                 retn
.text:0000000000009A48 ; ---------------------------------------------------------------------------
.text:0000000000009A49                 align 10h
.text:0000000000009A50
.text:0000000000009A50 loc_9A50:                               ; CODE XREF: duplicate_tree+87↑j
.text:0000000000009A50                 lea     r14, [rbp+10h]
.text:0000000000009A54                 mov     rbx, rax
.text:0000000000009A57                 jmp     loc_99C0
.text:0000000000009A5C ; ---------------------------------------------------------------------------
.text:0000000000009A5C
.text:0000000000009A5C loc_9A5C:                               ; CODE XREF: duplicate_tree+AA↑j
.text:0000000000009A5C                 call    ___stack_chk_fail
.text:0000000000009A5C ; } // starts at 9990
.text:0000000000009A5C duplicate_tree  endp
.text:0000000000009A5C
.text:0000000000009A5C ; ---------------------------------------------------------------------------
.text:0000000000009A61                 align 10h
.text:0000000000009A70
.text:0000000000009A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000009A70
.text:0000000000009A70
.text:0000000000009A70 lower_subexp    proc near               ; CODE XREF: lower_subexps+68↓p
.text:0000000000009A70                                         ; lower_subexps+88↓p
.text:0000000000009A70
.text:0000000000009A70 var_70          = qword ptr -70h
.text:0000000000009A70 var_68          = qword ptr -68h
.text:0000000000009A70 var_60          = qword ptr -60h
.text:0000000000009A70 var_58          = byte ptr -58h
.text:0000000000009A70 var_50          = byte ptr -50h
.text:0000000000009A70 var_40          = qword ptr -40h
.text:0000000000009A70
.text:0000000000009A70 ; __unwind {
.text:0000000000009A70                 push    r15
.text:0000000000009A72                 push    r14
.text:0000000000009A74                 push    r13
.text:0000000000009A76                 push    r12
.text:0000000000009A78                 mov     r13, rdx
.text:0000000000009A7B                 push    rbp
.text:0000000000009A7C                 push    rbx
.text:0000000000009A7D                 sub     rsp, 48h
.text:0000000000009A81                 mov     rbx, [rsi]
.text:0000000000009A84                 mov     rbp, [rdx+8]
.text:0000000000009A88                 mov     rax, fs:28h
.text:0000000000009A91                 mov     [rsp+78h+var_40], rax
.text:0000000000009A96                 xor     eax, eax
.text:0000000000009A98                 test    byte ptr [rsi+38h], 10h
.text:0000000000009A9C                 mov     [rsp+78h+var_60], rdi
.text:0000000000009AA1                 jz      loc_9C18
.text:0000000000009AA7                 test    rbp, rbp
.text:0000000000009AAA                 jz      short loc_9B20
.text:0000000000009AAC                 mov     rax, [rdx+28h]
.text:0000000000009AB0                 cmp     rax, 3Fh ; '?'
.text:0000000000009AB4                 jg      loc_9BED
.text:0000000000009ABA                 mov     rdx, [rbx+0A0h]
.text:0000000000009AC1                 bt      rdx, rax
.text:0000000000009AC5                 jnb     loc_9BED
.text:0000000000009ACB                 lea     rax, [rbx+70h]
.text:0000000000009ACF                 lea     r14, [rsp+78h+var_58]
.text:0000000000009AD4                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000009AD8                 xor     ecx, ecx
.text:0000000000009ADA                 xor     edx, edx
.text:0000000000009ADC                 mov     rsi, rbx
.text:0000000000009ADF                 mov     r15, rax
.text:0000000000009AE2                 mov     r8, r14
.text:0000000000009AE5                 mov     rdi, rax
.text:0000000000009AE8                 mov     [rsp+78h+var_50], 8
.text:0000000000009AED                 mov     [rsp+78h+var_70], rax
.text:0000000000009AF2                 call    create_token_tree_isra_16
.text:0000000000009AF7                 mov     rdi, r15
.text:0000000000009AFA                 mov     r8, r14
.text:0000000000009AFD                 xor     ecx, ecx
.text:0000000000009AFF                 xor     edx, edx
.text:0000000000009B01                 mov     rsi, rbx
.text:0000000000009B04                 mov     r12, rax
.text:0000000000009B07                 mov     [rsp+78h+var_50], 9
.text:0000000000009B0C                 call    create_token_tree_isra_16
.text:0000000000009B11                 mov     r15, rax
.text:0000000000009B14                 jmp     loc_9C6D
.text:0000000000009B14 ; ---------------------------------------------------------------------------
.text:0000000000009B19                 align 20h
.text:0000000000009B20
.text:0000000000009B20 loc_9B20:                               ; CODE XREF: lower_subexp+3A↑j
.text:0000000000009B20                 lea     rax, [rbx+70h]
.text:0000000000009B24                 lea     r14, [rsp+78h+var_58]
.text:0000000000009B29                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000009B2D                 xor     ecx, ecx
.text:0000000000009B2F                 xor     edx, edx
.text:0000000000009B31                 mov     rsi, rbx
.text:0000000000009B34                 mov     r15, rax
.text:0000000000009B37                 mov     r8, r14
.text:0000000000009B3A                 mov     rdi, rax
.text:0000000000009B3D                 mov     [rsp+78h+var_50], 8
.text:0000000000009B42                 mov     [rsp+78h+var_70], rax
.text:0000000000009B47                 call    create_token_tree_isra_16
.text:0000000000009B4C                 mov     rdi, r15
.text:0000000000009B4F                 mov     r8, r14
.text:0000000000009B52                 xor     ecx, ecx
.text:0000000000009B54                 xor     edx, edx
.text:0000000000009B56                 mov     rsi, rbx
.text:0000000000009B59                 mov     r12, rax
.text:0000000000009B5C                 mov     [rsp+78h+var_50], 9
.text:0000000000009B61                 call    create_token_tree_isra_16
.text:0000000000009B66                 mov     r11, rax
.text:0000000000009B69                 mov     r15, rax
.text:0000000000009B6C
.text:0000000000009B6C loc_9B6C:                               ; CODE XREF: lower_subexp+1F7↓j
.text:0000000000009B6C                                         ; lower_subexp+21B↓j
.text:0000000000009B6C                 mov     rdi, [rsp+78h+var_70]
.text:0000000000009B71                 mov     r8, r14
.text:0000000000009B74                 mov     rcx, r11
.text:0000000000009B77                 mov     rdx, r12
.text:0000000000009B7A                 mov     rsi, rbx
.text:0000000000009B7D                 mov     [rsp+78h+var_50], 10h
.text:0000000000009B82                 mov     [rsp+78h+var_68], r11
.text:0000000000009B87                 call    create_token_tree_isra_16
.text:0000000000009B8C                 test    rax, rax
.text:0000000000009B8F                 mov     rbp, rax
.text:0000000000009B92                 jz      loc_9C90
.text:0000000000009B98                 mov     r11, [rsp+78h+var_68]
.text:0000000000009B9D                 test    r11, r11
.text:0000000000009BA0                 jz      loc_9C90
.text:0000000000009BA6                 test    r12, r12
.text:0000000000009BA9                 jz      loc_9C90
.text:0000000000009BAF                 test    r15, r15
.text:0000000000009BB2                 jz      loc_9C90
.text:0000000000009BB8                 mov     rax, [r13+28h]
.text:0000000000009BBC                 mov     [r15+28h], rax
.text:0000000000009BC0                 mov     [r12+28h], rax
.text:0000000000009BC5                 movzx   eax, byte ptr [r13+32h]
.text:0000000000009BCA                 movzx   edx, byte ptr [r15+32h]
.text:0000000000009BCF                 and     eax, 8
.text:0000000000009BD2                 and     edx, 0FFFFFFF7h
.text:0000000000009BD5                 mov     ecx, eax
.text:0000000000009BD7                 or      edx, ecx
.text:0000000000009BD9                 mov     [r15+32h], dl
.text:0000000000009BDD                 movzx   eax, byte ptr [r12+32h]
.text:0000000000009BE3                 and     eax, 0FFFFFFF7h
.text:0000000000009BE6                 or      eax, ecx
.text:0000000000009BE8                 mov     [r12+32h], al
.text:0000000000009BED
.text:0000000000009BED loc_9BED:                               ; CODE XREF: lower_subexp+44↑j
.text:0000000000009BED                                         ; lower_subexp+55↑j ...
.text:0000000000009BED                 mov     rdi, [rsp+78h+var_40]
.text:0000000000009BF2                 xor     rdi, fs:28h
.text:0000000000009BFB                 mov     rax, rbp
.text:0000000000009BFE                 jnz     loc_9CA2
.text:0000000000009C04                 add     rsp, 48h
.text:0000000000009C08                 pop     rbx
.text:0000000000009C09                 pop     rbp
.text:0000000000009C0A                 pop     r12
.text:0000000000009C0C                 pop     r13
.text:0000000000009C0E                 pop     r14
.text:0000000000009C10                 pop     r15
.text:0000000000009C12                 retn
.text:0000000000009C12 ; ---------------------------------------------------------------------------
.text:0000000000009C13                 align 8
.text:0000000000009C18
.text:0000000000009C18 loc_9C18:                               ; CODE XREF: lower_subexp+31↑j
.text:0000000000009C18                 lea     rax, [rbx+70h]
.text:0000000000009C1C                 lea     r14, [rsp+78h+var_58]
.text:0000000000009C21                 sub     rbx, 0FFFFFFFFFFFFFF80h
.text:0000000000009C25                 xor     ecx, ecx
.text:0000000000009C27                 xor     edx, edx
.text:0000000000009C29                 mov     rsi, rbx
.text:0000000000009C2C                 mov     r15, rax
.text:0000000000009C2F                 mov     r8, r14
.text:0000000000009C32                 mov     rdi, rax
.text:0000000000009C35                 mov     [rsp+78h+var_50], 8
.text:0000000000009C3A                 mov     [rsp+78h+var_70], rax
.text:0000000000009C3F                 call    create_token_tree_isra_16
.text:0000000000009C44                 xor     ecx, ecx
.text:0000000000009C46                 xor     edx, edx
.text:0000000000009C48                 mov     rdi, r15
.text:0000000000009C4B                 mov     r8, r14
.text:0000000000009C4E                 mov     rsi, rbx
.text:0000000000009C51                 mov     r12, rax
.text:0000000000009C54                 mov     [rsp+78h+var_50], 9
.text:0000000000009C59                 call    create_token_tree_isra_16
.text:0000000000009C5E                 test    rbp, rbp
.text:0000000000009C61                 mov     r15, rax
.text:0000000000009C64                 mov     r11, rax
.text:0000000000009C67                 jz      loc_9B6C
.text:0000000000009C6D
.text:0000000000009C6D loc_9C6D:                               ; CODE XREF: lower_subexp+A4↑j
.text:0000000000009C6D                 mov     rdi, [rsp+78h+var_70]
.text:0000000000009C72                 mov     r8, r14
.text:0000000000009C75                 mov     rcx, r15
.text:0000000000009C78                 mov     rdx, rbp
.text:0000000000009C7B                 mov     rsi, rbx
.text:0000000000009C7E                 mov     [rsp+78h+var_50], 10h
.text:0000000000009C83                 call    create_token_tree_isra_16
.text:0000000000009C88                 mov     r11, rax
.text:0000000000009C8B                 jmp     loc_9B6C
.text:0000000000009C90 ; ---------------------------------------------------------------------------
.text:0000000000009C90
.text:0000000000009C90 loc_9C90:                               ; CODE XREF: lower_subexp+122↑j
.text:0000000000009C90                                         ; lower_subexp+130↑j ...
.text:0000000000009C90                 mov     rax, [rsp+78h+var_60]
.text:0000000000009C95                 xor     ebp, ebp
.text:0000000000009C97                 mov     dword ptr [rax], 0Ch
.text:0000000000009C9D                 jmp     loc_9BED
.text:0000000000009CA2 ; ---------------------------------------------------------------------------
.text:0000000000009CA2
.text:0000000000009CA2 loc_9CA2:                               ; CODE XREF: lower_subexp+18E↑j
.text:0000000000009CA2                 call    ___stack_chk_fail
.text:0000000000009CA2 ; } // starts at 9A70
.text:0000000000009CA2 lower_subexp    endp
.text:0000000000009CA2
.text:0000000000009CA2 ; ---------------------------------------------------------------------------
.text:0000000000009CA7                 align 10h
.text:0000000000009CB0
.text:0000000000009CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009CB0
.text:0000000000009CB0
.text:0000000000009CB0 lower_subexps   proc near               ; DATA XREF: re_compile_internal+666↓o
.text:0000000000009CB0
.text:0000000000009CB0 var_24          = dword ptr -24h
.text:0000000000009CB0 var_20          = qword ptr -20h
.text:0000000000009CB0
.text:0000000000009CB0 ; __unwind {
.text:0000000000009CB0                 push    rbp
.text:0000000000009CB1                 push    rbx
.text:0000000000009CB2                 mov     rbp, rdi
.text:0000000000009CB5                 mov     rbx, rsi
.text:0000000000009CB8                 sub     rsp, 18h
.text:0000000000009CBC                 mov     rdx, [rsi+8]
.text:0000000000009CC0                 mov     rax, fs:28h
.text:0000000000009CC9                 mov     [rsp+28h+var_20], rax
.text:0000000000009CCE                 xor     eax, eax
.text:0000000000009CD0                 mov     [rsp+28h+var_24], 0
.text:0000000000009CD8                 test    rdx, rdx
.text:0000000000009CDB                 jz      short loc_9CE3
.text:0000000000009CDD                 cmp     byte ptr [rdx+30h], 11h
.text:0000000000009CE1                 jz      short loc_9D30
.text:0000000000009CE3
.text:0000000000009CE3 loc_9CE3:                               ; CODE XREF: lower_subexps+2B↑j
.text:0000000000009CE3                                         ; lower_subexps+94↓j ...
.text:0000000000009CE3                 mov     rdx, [rbx+10h]
.text:0000000000009CE7                 test    rdx, rdx
.text:0000000000009CEA                 jz      short loc_9CF2
.text:0000000000009CEC                 cmp     byte ptr [rdx+30h], 11h
.text:0000000000009CF0                 jz      short loc_9D10
.text:0000000000009CF2
.text:0000000000009CF2 loc_9CF2:                               ; CODE XREF: lower_subexps+3A↑j
.text:0000000000009CF2                                         ; lower_subexps+74↓j ...
.text:0000000000009CF2                 mov     rcx, [rsp+28h+var_20]
.text:0000000000009CF7                 xor     rcx, fs:28h
.text:0000000000009D00                 mov     eax, [rsp+28h+var_24]
.text:0000000000009D04                 jnz     short loc_9D4B
.text:0000000000009D06                 add     rsp, 18h
.text:0000000000009D0A                 pop     rbx
.text:0000000000009D0B                 pop     rbp
.text:0000000000009D0C                 retn
.text:0000000000009D0C ; ---------------------------------------------------------------------------
.text:0000000000009D0D                 align 10h
.text:0000000000009D10
.text:0000000000009D10 loc_9D10:                               ; CODE XREF: lower_subexps+40↑j
.text:0000000000009D10                 lea     rdi, [rsp+28h+var_24]
.text:0000000000009D15                 mov     rsi, rbp
.text:0000000000009D18                 call    lower_subexp
.text:0000000000009D1D                 test    rax, rax
.text:0000000000009D20                 mov     [rbx+10h], rax
.text:0000000000009D24                 jz      short loc_9CF2
.text:0000000000009D26                 mov     [rax], rbx
.text:0000000000009D29                 jmp     short loc_9CF2
.text:0000000000009D29 ; ---------------------------------------------------------------------------
.text:0000000000009D2B                 align 10h
.text:0000000000009D30
.text:0000000000009D30 loc_9D30:                               ; CODE XREF: lower_subexps+31↑j
.text:0000000000009D30                 lea     rdi, [rsp+28h+var_24]
.text:0000000000009D35                 mov     rsi, rbp
.text:0000000000009D38                 call    lower_subexp
.text:0000000000009D3D                 test    rax, rax
.text:0000000000009D40                 mov     [rbx+8], rax
.text:0000000000009D44                 jz      short loc_9CE3
.text:0000000000009D46                 mov     [rax], rbx
.text:0000000000009D49                 jmp     short loc_9CE3
.text:0000000000009D4B ; ---------------------------------------------------------------------------
.text:0000000000009D4B
.text:0000000000009D4B loc_9D4B:                               ; CODE XREF: lower_subexps+54↑j
.text:0000000000009D4B                 call    ___stack_chk_fail
.text:0000000000009D4B ; } // starts at 9CB0
.text:0000000000009D4B lower_subexps   endp
.text:0000000000009D4B
.text:0000000000009D50
.text:0000000000009D50 ; =============== S U B R O U T I N E =======================================
.text:0000000000009D50
.text:0000000000009D50
.text:0000000000009D50 re_node_set_init_copy proc near         ; CODE XREF: re_node_set_init_union+EB↓j
.text:0000000000009D50                                         ; re_acquire_state_context+E8↓p ...
.text:0000000000009D50 ; __unwind {
.text:0000000000009D50                 push    r12
.text:0000000000009D52                 push    rbp
.text:0000000000009D53                 push    rbx
.text:0000000000009D54                 mov     rax, [rsi+8]
.text:0000000000009D58                 mov     [rdi+8], rax
.text:0000000000009D5C                 mov     r12, [rsi+8]
.text:0000000000009D60                 test    r12, r12
.text:0000000000009D63                 jle     short loc_9DA0
.text:0000000000009D65                 mov     rbx, rdi
.text:0000000000009D68                 mov     [rdi], rax
.text:0000000000009D6B                 lea     rdi, ds:0[rax*8] ; size
.text:0000000000009D73                 mov     rbp, rsi
.text:0000000000009D76                 call    _malloc
.text:0000000000009D7B                 test    rax, rax
.text:0000000000009D7E                 mov     [rbx+10h], rax
.text:0000000000009D82                 jz      short loc_9DC0
.text:0000000000009D84                 mov     rsi, [rbp+10h]  ; src
.text:0000000000009D88                 lea     rdx, ds:0[r12*8] ; n
.text:0000000000009D90                 mov     rdi, rax        ; dest
.text:0000000000009D93                 call    _memcpy
.text:0000000000009D98                 xor     eax, eax
.text:0000000000009D9A
.text:0000000000009D9A loc_9D9A:                               ; CODE XREF: re_node_set_init_copy+84↓j
.text:0000000000009D9A                 pop     rbx
.text:0000000000009D9B                 pop     rbp
.text:0000000000009D9C                 pop     r12
.text:0000000000009D9E                 retn
.text:0000000000009D9E ; ---------------------------------------------------------------------------
.text:0000000000009D9F                 align 20h
.text:0000000000009DA0
.text:0000000000009DA0 loc_9DA0:                               ; CODE XREF: re_node_set_init_copy+13↑j
.text:0000000000009DA0                 pxor    xmm0, xmm0
.text:0000000000009DA4                 mov     qword ptr [rdi+10h], 0
.text:0000000000009DAC                 xor     eax, eax
.text:0000000000009DAE                 movups  xmmword ptr [rdi], xmm0
.text:0000000000009DB1                 pop     rbx
.text:0000000000009DB2                 pop     rbp
.text:0000000000009DB3                 pop     r12
.text:0000000000009DB5                 retn
.text:0000000000009DB5 ; ---------------------------------------------------------------------------
.text:0000000000009DB6                 align 20h
.text:0000000000009DC0
.text:0000000000009DC0 loc_9DC0:                               ; CODE XREF: re_node_set_init_copy+32↑j
.text:0000000000009DC0                 mov     qword ptr [rbx+8], 0
.text:0000000000009DC8                 mov     qword ptr [rbx], 0
.text:0000000000009DCF                 mov     eax, 0Ch
.text:0000000000009DD4                 jmp     short loc_9D9A
.text:0000000000009DD4 ; } // starts at 9D50
.text:0000000000009DD4 re_node_set_init_copy endp
.text:0000000000009DD4
.text:0000000000009DD4 ; ---------------------------------------------------------------------------
.text:0000000000009DD6                 align 20h
.text:0000000000009DE0
.text:0000000000009DE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000009DE0
.text:0000000000009DE0
.text:0000000000009DE0 re_node_set_init_union proc near        ; CODE XREF: merge_state_array+60↓p
.text:0000000000009DE0                                         ; transit_state_bkref_isra_34+4A1↓p ...
.text:0000000000009DE0 ; __unwind {
.text:0000000000009DE0                 test    rsi, rsi
.text:0000000000009DE3                 push    r14
.text:0000000000009DE5                 push    r13
.text:0000000000009DE7                 push    r12
.text:0000000000009DE9                 push    rbp
.text:0000000000009DEA                 push    rbx
.text:0000000000009DEB                 jz      loc_9E95
.text:0000000000009DF1                 test    rdx, rdx
.text:0000000000009DF4                 mov     r13, [rsi+8]
.text:0000000000009DF8                 jz      loc_9E90
.text:0000000000009DFE                 test    r13, r13
.text:0000000000009E01                 jle     loc_9E90
.text:0000000000009E07                 mov     r14, [rdx+8]
.text:0000000000009E0B                 test    r14, r14
.text:0000000000009E0E                 jle     loc_9EC3
.text:0000000000009E14                 mov     r12, rdi
.text:0000000000009E17                 lea     rdi, [r13+r14+0]
.text:0000000000009E1C                 mov     rbx, rdx
.text:0000000000009E1F                 mov     rbp, rsi
.text:0000000000009E22                 mov     [r12], rdi
.text:0000000000009E26                 shl     rdi, 3          ; size
.text:0000000000009E2A                 call    _malloc
.text:0000000000009E2F                 test    rax, rax
.text:0000000000009E32                 mov     [r12+10h], rax
.text:0000000000009E37                 jz      loc_9F28
.text:0000000000009E3D                 mov     r9, [rbx+10h]
.text:0000000000009E41                 mov     r8, [rbp+10h]
.text:0000000000009E45                 xor     ebx, ebx
.text:0000000000009E47                 xor     ecx, ecx
.text:0000000000009E49                 xor     esi, esi
.text:0000000000009E4B                 jmp     short loc_9E6E
.text:0000000000009E4B ; ---------------------------------------------------------------------------
.text:0000000000009E4D                 align 10h
.text:0000000000009E50
.text:0000000000009E50 loc_9E50:                               ; CODE XREF: re_node_set_init_union+9D↓j
.text:0000000000009E50                 setz    dil
.text:0000000000009E54                 mov     [rax+rbx*8-8], rdx
.text:0000000000009E59                 add     rsi, 1
.text:0000000000009E5D                 movzx   edi, dil
.text:0000000000009E61                 add     rcx, rdi
.text:0000000000009E64
.text:0000000000009E64 loc_9E64:                               ; CODE XREF: re_node_set_init_union+A8↓j
.text:0000000000009E64                 cmp     r13, rsi
.text:0000000000009E67                 jle     short loc_9ED0
.text:0000000000009E69                 cmp     r14, rcx
.text:0000000000009E6C                 jle     short loc_9EE8
.text:0000000000009E6E
.text:0000000000009E6E loc_9E6E:                               ; CODE XREF: re_node_set_init_union+6B↑j
.text:0000000000009E6E                 mov     rdx, [r8+rsi*8]
.text:0000000000009E72                 mov     rdi, [r9+rcx*8]
.text:0000000000009E76                 add     rbx, 1
.text:0000000000009E7A                 cmp     rdx, rdi
.text:0000000000009E7D                 jle     short loc_9E50
.text:0000000000009E7F                 add     rcx, 1
.text:0000000000009E83                 mov     [rax+rbx*8-8], rdi
.text:0000000000009E88                 jmp     short loc_9E64
.text:0000000000009E88 ; ---------------------------------------------------------------------------
.text:0000000000009E8A                 align 10h
.text:0000000000009E90
.text:0000000000009E90 loc_9E90:                               ; CODE XREF: re_node_set_init_union+18↑j
.text:0000000000009E90                                         ; re_node_set_init_union+21↑j
.text:0000000000009E90                 test    r13, r13
.text:0000000000009E93                 jg      short loc_9EC3
.text:0000000000009E95
.text:0000000000009E95 loc_9E95:                               ; CODE XREF: re_node_set_init_union+B↑j
.text:0000000000009E95                 test    rdx, rdx
.text:0000000000009E98                 jz      short loc_9EA1
.text:0000000000009E9A                 cmp     qword ptr [rdx+8], 0
.text:0000000000009E9F                 jg      short loc_9EC0
.text:0000000000009EA1
.text:0000000000009EA1 loc_9EA1:                               ; CODE XREF: re_node_set_init_union+B8↑j
.text:0000000000009EA1                 pxor    xmm0, xmm0
.text:0000000000009EA5                 mov     qword ptr [rdi+10h], 0
.text:0000000000009EAD                 xor     eax, eax
.text:0000000000009EAF                 movaps  xmmword ptr [rdi], xmm0
.text:0000000000009EB2
.text:0000000000009EB2 loc_9EB2:                               ; CODE XREF: re_node_set_init_union+14D↓j
.text:0000000000009EB2                 pop     rbx
.text:0000000000009EB3                 pop     rbp
.text:0000000000009EB4                 pop     r12
.text:0000000000009EB6                 pop     r13
.text:0000000000009EB8                 pop     r14
.text:0000000000009EBA                 retn
.text:0000000000009EBA ; ---------------------------------------------------------------------------
.text:0000000000009EBB                 align 20h
.text:0000000000009EC0
.text:0000000000009EC0 loc_9EC0:                               ; CODE XREF: re_node_set_init_union+BF↑j
.text:0000000000009EC0                 mov     rsi, rdx
.text:0000000000009EC3
.text:0000000000009EC3 loc_9EC3:                               ; CODE XREF: re_node_set_init_union+2E↑j
.text:0000000000009EC3                                         ; re_node_set_init_union+B3↑j
.text:0000000000009EC3                 pop     rbx
.text:0000000000009EC4                 pop     rbp
.text:0000000000009EC5                 pop     r12
.text:0000000000009EC7                 pop     r13
.text:0000000000009EC9                 pop     r14
.text:0000000000009ECB                 jmp     re_node_set_init_copy
.text:0000000000009ED0 ; ---------------------------------------------------------------------------
.text:0000000000009ED0
.text:0000000000009ED0 loc_9ED0:                               ; CODE XREF: re_node_set_init_union+87↑j
.text:0000000000009ED0                 cmp     r14, rcx
.text:0000000000009ED3                 jg      short loc_9F08
.text:0000000000009ED5
.text:0000000000009ED5 loc_9ED5:                               ; CODE XREF: re_node_set_init_union+123↓j
.text:0000000000009ED5                                         ; re_node_set_init_union+143↓j
.text:0000000000009ED5                 mov     [r12+8], rbx
.text:0000000000009EDA                 xor     eax, eax
.text:0000000000009EDC                 pop     rbx
.text:0000000000009EDD                 pop     rbp
.text:0000000000009EDE                 pop     r12
.text:0000000000009EE0                 pop     r13
.text:0000000000009EE2                 pop     r14
.text:0000000000009EE4                 retn
.text:0000000000009EE4 ; ---------------------------------------------------------------------------
.text:0000000000009EE5                 align 8
.text:0000000000009EE8
.text:0000000000009EE8 loc_9EE8:                               ; CODE XREF: re_node_set_init_union+8C↑j
.text:0000000000009EE8                 sub     r13, rsi
.text:0000000000009EEB                 lea     rdi, [rax+rbx*8] ; dest
.text:0000000000009EEF                 lea     rsi, [r8+rsi*8] ; src
.text:0000000000009EF3                 lea     rdx, ds:0[r13*8] ; n
.text:0000000000009EFB                 add     rbx, r13
.text:0000000000009EFE                 call    _memcpy
.text:0000000000009F03                 jmp     short loc_9ED5
.text:0000000000009F03 ; ---------------------------------------------------------------------------
.text:0000000000009F05                 align 8
.text:0000000000009F08
.text:0000000000009F08 loc_9F08:                               ; CODE XREF: re_node_set_init_union+F3↑j
.text:0000000000009F08                 sub     r14, rcx
.text:0000000000009F0B                 lea     rdi, [rax+rbx*8] ; dest
.text:0000000000009F0F                 lea     rsi, [r9+rcx*8] ; src
.text:0000000000009F13                 lea     rdx, ds:0[r14*8] ; n
.text:0000000000009F1B                 add     rbx, r14
.text:0000000000009F1E                 call    _memcpy
.text:0000000000009F23                 jmp     short loc_9ED5
.text:0000000000009F23 ; ---------------------------------------------------------------------------
.text:0000000000009F25                 align 8
.text:0000000000009F28
.text:0000000000009F28 loc_9F28:                               ; CODE XREF: re_node_set_init_union+57↑j
.text:0000000000009F28                 mov     eax, 0Ch
.text:0000000000009F2D                 jmp     loc_9EB2
.text:0000000000009F2D ; } // starts at 9DE0
.text:0000000000009F2D re_node_set_init_union endp
.text:0000000000009F2D
.text:0000000000009F2D ; ---------------------------------------------------------------------------
.text:0000000000009F32                 align 20h
.text:0000000000009F40
.text:0000000000009F40 ; =============== S U B R O U T I N E =======================================
.text:0000000000009F40
.text:0000000000009F40
.text:0000000000009F40 re_acquire_state_context proc near      ; CODE XREF: build_trtable+255↓p
.text:0000000000009F40                                         ; build_trtable+9A0↓p ...
.text:0000000000009F40
.text:0000000000009F40 var_54          = dword ptr -54h
.text:0000000000009F40 var_50          = qword ptr -50h
.text:0000000000009F40 var_48          = qword ptr -48h
.text:0000000000009F40 var_40          = qword ptr -40h
.text:0000000000009F40
.text:0000000000009F40 ; __unwind {
.text:0000000000009F40                 push    r15
.text:0000000000009F42                 push    r14
.text:0000000000009F44                 push    r13
.text:0000000000009F46                 push    r12
.text:0000000000009F48                 push    rbp
.text:0000000000009F49                 push    rbx
.text:0000000000009F4A                 sub     rsp, 28h
.text:0000000000009F4E                 mov     r10, [rdx+8]
.text:0000000000009F52                 test    r10, r10
.text:0000000000009F55                 jz      loc_A1DF
.text:0000000000009F5B                 mov     r8d, ecx
.text:0000000000009F5E                 test    r10, r10
.text:0000000000009F61                 lea     r12, [r8+r10]
.text:0000000000009F65                 jle     short loc_9F7C
.text:0000000000009F67                 mov     rax, [rdx+10h]
.text:0000000000009F6B                 lea     r10, [rax+r10*8]
.text:0000000000009F6F                 nop
.text:0000000000009F70
.text:0000000000009F70 loc_9F70:                               ; CODE XREF: re_acquire_state_context+3A↓j
.text:0000000000009F70                 add     r12, [rax]
.text:0000000000009F73                 add     rax, 8
.text:0000000000009F77                 cmp     r10, rax
.text:0000000000009F7A                 jnz     short loc_9F70
.text:0000000000009F7C
.text:0000000000009F7C loc_9F7C:                               ; CODE XREF: re_acquire_state_context+25↑j
.text:0000000000009F7C                 mov     rax, [rsi+88h]
.text:0000000000009F83                 mov     rbp, rdx
.text:0000000000009F86                 mov     [rsp+58h+var_54], ecx
.text:0000000000009F8A                 mov     r13, rsi
.text:0000000000009F8D                 mov     [rsp+58h+var_40], rdi
.text:0000000000009F92                 and     rax, r12
.text:0000000000009F95                 lea     rdx, [rax+rax*2]
.text:0000000000009F99                 mov     rax, [rsi+40h]
.text:0000000000009F9D                 lea     rax, [rax+rdx*8]
.text:0000000000009FA1                 mov     r11, [rax]
.text:0000000000009FA4                 test    r11, r11
.text:0000000000009FA7                 jle     short loc_A000
.text:0000000000009FA9                 mov     rbx, [rax+10h]
.text:0000000000009FAD                 xor     r10d, r10d
.text:0000000000009FB0                 mov     r9d, ecx
.text:0000000000009FB3                 jmp     short loc_9FC1
.text:0000000000009FB3 ; ---------------------------------------------------------------------------
.text:0000000000009FB5                 align 8
.text:0000000000009FB8
.text:0000000000009FB8 loc_9FB8:                               ; CODE XREF: re_acquire_state_context+88↓j
.text:0000000000009FB8                                         ; re_acquire_state_context+95↓j ...
.text:0000000000009FB8                 add     r10, 1
.text:0000000000009FBC                 cmp     r10, r11
.text:0000000000009FBF                 jz      short loc_A000
.text:0000000000009FC1
.text:0000000000009FC1 loc_9FC1:                               ; CODE XREF: re_acquire_state_context+73↑j
.text:0000000000009FC1                 mov     r14, [rbx+r10*8]
.text:0000000000009FC5                 cmp     [r14], r12
.text:0000000000009FC8                 jnz     short loc_9FB8
.text:0000000000009FCA                 movzx   eax, byte ptr [r14+68h]
.text:0000000000009FCF                 and     eax, 0Fh
.text:0000000000009FD2                 cmp     eax, r9d
.text:0000000000009FD5                 jnz     short loc_9FB8
.text:0000000000009FD7                 mov     rdi, [r14+50h]
.text:0000000000009FDB                 test    rdi, rdi
.text:0000000000009FDE                 jz      short loc_9FB8
.text:0000000000009FE0                 mov     rsi, rbp
.text:0000000000009FE3                 call    re_node_set_compare_part_2
.text:0000000000009FE8                 test    al, al
.text:0000000000009FEA                 jz      short loc_9FB8
.text:0000000000009FEC
.text:0000000000009FEC loc_9FEC:                               ; CODE XREF: re_acquire_state_context+208↓j
.text:0000000000009FEC                                         ; re_acquire_state_context+224↓j ...
.text:0000000000009FEC                 add     rsp, 28h
.text:0000000000009FF0                 mov     rax, r14
.text:0000000000009FF3                 pop     rbx
.text:0000000000009FF4                 pop     rbp
.text:0000000000009FF5                 pop     r12
.text:0000000000009FF7                 pop     r13
.text:0000000000009FF9                 pop     r14
.text:0000000000009FFB                 pop     r15
.text:0000000000009FFD                 retn
.text:0000000000009FFD ; ---------------------------------------------------------------------------
.text:0000000000009FFE                 align 20h
.text:000000000000A000
.text:000000000000A000 loc_A000:                               ; CODE XREF: re_acquire_state_context+67↑j
.text:000000000000A000                                         ; re_acquire_state_context+7F↑j
.text:000000000000A000                 mov     esi, 1          ; size
.text:000000000000A005                 mov     edi, 70h ; 'p'  ; nmemb
.text:000000000000A00A                 call    _calloc
.text:000000000000A00F                 test    rax, rax
.text:000000000000A012                 mov     r14, rax
.text:000000000000A015                 jz      loc_A156
.text:000000000000A01B                 lea     rax, [rax+8]
.text:000000000000A01F                 mov     rsi, rbp
.text:000000000000A022                 mov     rdi, rax
.text:000000000000A025                 mov     rbx, rax
.text:000000000000A028                 call    re_node_set_init_copy
.text:000000000000A02D                 test    eax, eax
.text:000000000000A02F                 jnz     loc_A1ED
.text:000000000000A035                 movzx   eax, byte ptr [r14+68h]
.text:000000000000A03A                 movzx   edx, byte ptr [rsp+58h+var_54]
.text:000000000000A03F                 mov     [r14+50h], rbx
.text:000000000000A043                 and     edx, 0Fh
.text:000000000000A046                 and     eax, 0FFFFFFF0h
.text:000000000000A049                 or      eax, edx
.text:000000000000A04B                 cmp     qword ptr [rbp+8], 0
.text:000000000000A050                 mov     [r14+68h], al
.text:000000000000A054                 jle     loc_A138
.text:000000000000A05A                 lea     rcx, [r14+18h]
.text:000000000000A05E                 xor     r15d, r15d
.text:000000000000A061                 mov     [rsp+58h+var_48], r12
.text:000000000000A066                 xor     r10d, r10d
.text:000000000000A069                 mov     r12, r13
.text:000000000000A06C                 mov     r13, r15
.text:000000000000A06F                 mov     [rsp+58h+var_50], rcx
.text:000000000000A074                 mov     r15, rbx
.text:000000000000A077                 nop     word ptr [rax+rax+00000000h]
.text:000000000000A080
.text:000000000000A080 loc_A080:                               ; CODE XREF: re_acquire_state_context+1EA↓j
.text:000000000000A080                 mov     rax, [rbp+10h]
.text:000000000000A084                 mov     rax, [rax+r13*8]
.text:000000000000A088                 shl     rax, 4
.text:000000000000A08C                 add     rax, [r12]
.text:000000000000A090                 movzx   esi, byte ptr [rax+8]
.text:000000000000A094                 mov     ebx, [rax+8]
.text:000000000000A097                 shr     ebx, 8
.text:000000000000A09A                 and     bx, 3FFh
.text:000000000000A09F                 cmp     esi, 1
.text:000000000000A0A2                 movzx   edi, bx
.text:000000000000A0A5                 jnz     short loc_A0AB
.text:000000000000A0A7                 test    edi, edi
.text:000000000000A0A9                 jz      short loc_A122
.text:000000000000A0AB
.text:000000000000A0AB loc_A0AB:                               ; CODE XREF: re_acquire_state_context+165↑j
.text:000000000000A0AB                 movzx   edx, byte ptr [r14+68h]
.text:000000000000A0B0                 movzx   eax, byte ptr [rax+0Ah]
.text:000000000000A0B4                 mov     r9d, edx
.text:000000000000A0B7                 shr     al, 4
.text:000000000000A0BA                 and     edx, 0FFFFFFDFh
.text:000000000000A0BD                 shr     r9b, 5
.text:000000000000A0C1                 or      eax, r9d
.text:000000000000A0C4                 and     eax, 1
.text:000000000000A0C7                 shl     eax, 5
.text:000000000000A0CA                 or      eax, edx
.text:000000000000A0CC                 cmp     esi, 2
.text:000000000000A0CF                 mov     [r14+68h], al
.text:000000000000A0D3                 jz      loc_A1A0
.text:000000000000A0D9                 cmp     esi, 4
.text:000000000000A0DC                 jnz     short loc_A0E5
.text:000000000000A0DE                 or      eax, 40h
.text:000000000000A0E1                 mov     [r14+68h], al
.text:000000000000A0E5
.text:000000000000A0E5 loc_A0E5:                               ; CODE XREF: re_acquire_state_context+19C↑j
.text:000000000000A0E5                                         ; re_acquire_state_context+267↓j
.text:000000000000A0E5                 test    edi, edi
.text:000000000000A0E7                 jz      short loc_A122
.text:000000000000A0E9                 cmp     r15, [r14+50h]
.text:000000000000A0ED                 jz      loc_A1B0
.text:000000000000A0F3
.text:000000000000A0F3 loc_A0F3:                               ; CODE XREF: re_acquire_state_context+29A↓j
.text:000000000000A0F3                 test    bl, 1
.text:000000000000A0F6                 jz      short loc_A170
.text:000000000000A0F8                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000A0FD                 jz      short loc_A108
.text:000000000000A0FF                 test    bl, 2
.text:000000000000A102                 jz      short loc_A17C
.text:000000000000A104                 nop     dword ptr [rax+00h]
.text:000000000000A108
.text:000000000000A108 loc_A108:                               ; CODE XREF: re_acquire_state_context+1BD↑j
.text:000000000000A108                                         ; re_acquire_state_context+23A↓j ...
.text:000000000000A108                 mov     rdx, r13
.text:000000000000A10B                 sub     rdx, r10
.text:000000000000A10E                 js      short loc_A11E
.text:000000000000A110                 mov     rsi, [rsp+58h+var_50]
.text:000000000000A115                 lea     rdi, [r14+10h]
.text:000000000000A119                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000A11E
.text:000000000000A11E loc_A11E:                               ; CODE XREF: re_acquire_state_context+1CE↑j
.text:000000000000A11E                 add     r10, 1
.text:000000000000A122
.text:000000000000A122 loc_A122:                               ; CODE XREF: re_acquire_state_context+169↑j
.text:000000000000A122                                         ; re_acquire_state_context+1A7↑j ...
.text:000000000000A122                 add     r13, 1
.text:000000000000A126                 cmp     r13, [rbp+8]
.text:000000000000A12A                 jl      loc_A080
.text:000000000000A130                 mov     r13, r12
.text:000000000000A133                 mov     r12, [rsp+58h+var_48]
.text:000000000000A138
.text:000000000000A138 loc_A138:                               ; CODE XREF: re_acquire_state_context+114↑j
.text:000000000000A138                 mov     rdx, r12
.text:000000000000A13B                 mov     rsi, r14
.text:000000000000A13E                 mov     rdi, r13
.text:000000000000A141                 call    register_state
.text:000000000000A146                 test    eax, eax
.text:000000000000A148                 jz      loc_9FEC
.text:000000000000A14E
.text:000000000000A14E loc_A14E:                               ; CODE XREF: re_acquire_state_context+281↓j
.text:000000000000A14E                 mov     rdi, r14        ; ptr
.text:000000000000A151                 call    free_state
.text:000000000000A156
.text:000000000000A156 loc_A156:                               ; CODE XREF: re_acquire_state_context+D5↑j
.text:000000000000A156                                         ; re_acquire_state_context+290↓j ...
.text:000000000000A156                 mov     rax, [rsp+58h+var_40]
.text:000000000000A15B                 xor     r14d, r14d
.text:000000000000A15E                 mov     dword ptr [rax], 0Ch
.text:000000000000A164                 jmp     loc_9FEC
.text:000000000000A164 ; ---------------------------------------------------------------------------
.text:000000000000A169                 align 10h
.text:000000000000A170
.text:000000000000A170 loc_A170:                               ; CODE XREF: re_acquire_state_context+1B6↑j
.text:000000000000A170                 test    bl, 2
.text:000000000000A173                 jz      short loc_A17C
.text:000000000000A175                 test    byte ptr [rsp+58h+var_54], 1
.text:000000000000A17A                 jnz     short loc_A108
.text:000000000000A17C
.text:000000000000A17C loc_A17C:                               ; CODE XREF: re_acquire_state_context+1C2↑j
.text:000000000000A17C                                         ; re_acquire_state_context+233↑j
.text:000000000000A17C                 test    bl, 10h
.text:000000000000A17F                 jz      short loc_A188
.text:000000000000A181                 test    byte ptr [rsp+58h+var_54], 2
.text:000000000000A186                 jz      short loc_A108
.text:000000000000A188
.text:000000000000A188 loc_A188:                               ; CODE XREF: re_acquire_state_context+23F↑j
.text:000000000000A188                 and     ebx, 40h
.text:000000000000A18B                 jz      short loc_A122
.text:000000000000A18D                 test    byte ptr [rsp+58h+var_54], 4
.text:000000000000A192                 jnz     short loc_A122
.text:000000000000A194                 jmp     loc_A108
.text:000000000000A194 ; ---------------------------------------------------------------------------
.text:000000000000A199                 align 20h
.text:000000000000A1A0
.text:000000000000A1A0 loc_A1A0:                               ; CODE XREF: re_acquire_state_context+193↑j
.text:000000000000A1A0                 or      eax, 10h
.text:000000000000A1A3                 mov     [r14+68h], al
.text:000000000000A1A7                 jmp     loc_A0E5
.text:000000000000A1A7 ; ---------------------------------------------------------------------------
.text:000000000000A1AC                 align 10h
.text:000000000000A1B0
.text:000000000000A1B0 loc_A1B0:                               ; CODE XREF: re_acquire_state_context+1AD↑j
.text:000000000000A1B0                 mov     edi, 18h        ; size
.text:000000000000A1B5                 call    _malloc
.text:000000000000A1BA                 test    rax, rax
.text:000000000000A1BD                 mov     [r14+50h], rax
.text:000000000000A1C1                 jz      short loc_A14E
.text:000000000000A1C3                 mov     rsi, rbp
.text:000000000000A1C6                 mov     rdi, rax
.text:000000000000A1C9                 call    re_node_set_init_copy
.text:000000000000A1CE                 test    eax, eax
.text:000000000000A1D0                 jnz     short loc_A156
.text:000000000000A1D2                 or      byte ptr [r14+68h], 80h
.text:000000000000A1D7                 xor     r10d, r10d
.text:000000000000A1DA                 jmp     loc_A0F3
.text:000000000000A1DF ; ---------------------------------------------------------------------------
.text:000000000000A1DF
.text:000000000000A1DF loc_A1DF:                               ; CODE XREF: re_acquire_state_context+15↑j
.text:000000000000A1DF                 mov     dword ptr [rdi], 0
.text:000000000000A1E5                 xor     r14d, r14d
.text:000000000000A1E8                 jmp     loc_9FEC
.text:000000000000A1ED ; ---------------------------------------------------------------------------
.text:000000000000A1ED
.text:000000000000A1ED loc_A1ED:                               ; CODE XREF: re_acquire_state_context+EF↑j
.text:000000000000A1ED                 mov     rdi, r14        ; ptr
.text:000000000000A1F0                 call    _free
.text:000000000000A1F5                 jmp     loc_A156
.text:000000000000A1F5 ; } // starts at 9F40
.text:000000000000A1F5 re_acquire_state_context endp
.text:000000000000A1F5
.text:000000000000A1F5 ; ---------------------------------------------------------------------------
.text:000000000000A1FA                 align 20h
.text:000000000000A200
.text:000000000000A200 ; =============== S U B R O U T I N E =======================================
.text:000000000000A200
.text:000000000000A200
.text:000000000000A200 re_acquire_state proc near              ; CODE XREF: merge_state_array+78↓p
.text:000000000000A200                                         ; expand_bkref_cache+1D0↓p ...
.text:000000000000A200 ; __unwind {
.text:000000000000A200                 push    r15
.text:000000000000A202                 push    r14
.text:000000000000A204                 push    r13
.text:000000000000A206                 push    r12
.text:000000000000A208                 push    rbp
.text:000000000000A209                 push    rbx
.text:000000000000A20A                 sub     rsp, 8
.text:000000000000A20E                 mov     rbp, [rdx+8]
.text:000000000000A212                 test    rbp, rbp
.text:000000000000A215                 jz      loc_A3F0
.text:000000000000A21B                 test    rbp, rbp
.text:000000000000A21E                 jle     short loc_A23C
.text:000000000000A220                 mov     rax, [rdx+10h]
.text:000000000000A224                 lea     rcx, [rax+rbp*8]
.text:000000000000A228                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000A230
.text:000000000000A230 loc_A230:                               ; CODE XREF: re_acquire_state+3A↓j
.text:000000000000A230                 add     rbp, [rax]
.text:000000000000A233                 add     rax, 8
.text:000000000000A237                 cmp     rcx, rax
.text:000000000000A23A                 jnz     short loc_A230
.text:000000000000A23C
.text:000000000000A23C loc_A23C:                               ; CODE XREF: re_acquire_state+1E↑j
.text:000000000000A23C                 mov     rax, [rsi+88h]
.text:000000000000A243                 mov     r14, rdx
.text:000000000000A246                 mov     r12, rsi
.text:000000000000A249                 mov     r13, rdi
.text:000000000000A24C                 and     rax, rbp
.text:000000000000A24F                 lea     rdx, [rax+rax*2]
.text:000000000000A253                 mov     rax, [rsi+40h]
.text:000000000000A257                 lea     rax, [rax+rdx*8]
.text:000000000000A25B                 mov     r10, [rax]
.text:000000000000A25E                 test    r10, r10
.text:000000000000A261                 jle     short loc_A296
.text:000000000000A263                 mov     r11, [rax+10h]
.text:000000000000A267                 xor     r9d, r9d
.text:000000000000A26A                 nop     word ptr [rax+rax+00h]
.text:000000000000A270
.text:000000000000A270 loc_A270:                               ; CODE XREF: re_acquire_state+94↓j
.text:000000000000A270                 mov     rbx, [r11+r9*8]
.text:000000000000A274                 cmp     [rbx], rbp
.text:000000000000A277                 jnz     short loc_A28D
.text:000000000000A279                 lea     rdi, [rbx+8]
.text:000000000000A27D                 mov     rsi, r14
.text:000000000000A280                 call    re_node_set_compare_part_2
.text:000000000000A285                 test    al, al
.text:000000000000A287                 jnz     loc_A38F
.text:000000000000A28D
.text:000000000000A28D loc_A28D:                               ; CODE XREF: re_acquire_state+77↑j
.text:000000000000A28D                 add     r9, 1
.text:000000000000A291                 cmp     r10, r9
.text:000000000000A294                 jnz     short loc_A270
.text:000000000000A296
.text:000000000000A296 loc_A296:                               ; CODE XREF: re_acquire_state+61↑j
.text:000000000000A296                 mov     esi, 1          ; size
.text:000000000000A29B                 mov     edi, 70h ; 'p'  ; nmemb
.text:000000000000A2A0                 call    _calloc
.text:000000000000A2A5                 test    rax, rax
.text:000000000000A2A8                 mov     rbx, rax
.text:000000000000A2AB                 jz      loc_A3D8
.text:000000000000A2B1                 lea     r15, [rax+8]
.text:000000000000A2B5                 mov     rsi, r14
.text:000000000000A2B8                 mov     rdi, r15
.text:000000000000A2BB                 call    re_node_set_init_copy
.text:000000000000A2C0                 test    eax, eax
.text:000000000000A2C2                 jnz     loc_A3D0
.text:000000000000A2C8                 mov     rax, [r14+8]
.text:000000000000A2CC                 mov     [rbx+50h], r15
.text:000000000000A2D0                 test    rax, rax
.text:000000000000A2D3                 jle     loc_A37D
.text:000000000000A2D9                 mov     rsi, [r14+10h]
.text:000000000000A2DD                 mov     r8, [r12]
.text:000000000000A2E1                 lea     r9, [rsi+rax*8]
.text:000000000000A2E5                 jmp     short loc_A334
.text:000000000000A2E5 ; ---------------------------------------------------------------------------
.text:000000000000A2E7                 align 10h
.text:000000000000A2F0
.text:000000000000A2F0 loc_A2F0:                               ; CODE XREF: re_acquire_state+145↓j
.text:000000000000A2F0                 movzx   ecx, byte ptr [rbx+68h]
.text:000000000000A2F4                 movzx   edx, byte ptr [rax+0Ah]
.text:000000000000A2F8                 mov     r10d, ecx
.text:000000000000A2FB                 shr     dl, 4
.text:000000000000A2FE                 and     ecx, 0FFFFFFDFh
.text:000000000000A301                 shr     r10b, 5
.text:000000000000A305                 or      edx, r10d
.text:000000000000A308                 and     edx, 1
.text:000000000000A30B                 shl     edx, 5
.text:000000000000A30E                 or      edx, ecx
.text:000000000000A310                 cmp     edi, 2
.text:000000000000A313                 mov     [rbx+68h], dl
.text:000000000000A316                 jz      loc_A3A8
.text:000000000000A31C                 cmp     edi, 4
.text:000000000000A31F                 jnz     loc_A3B8
.text:000000000000A325                 or      edx, 40h
.text:000000000000A328                 mov     [rbx+68h], dl
.text:000000000000A32B
.text:000000000000A32B loc_A32B:                               ; CODE XREF: re_acquire_state+14E↓j
.text:000000000000A32B                                         ; re_acquire_state+1AE↓j ...
.text:000000000000A32B                 add     rsi, 8
.text:000000000000A32F                 cmp     r9, rsi
.text:000000000000A332                 jz      short loc_A37D
.text:000000000000A334
.text:000000000000A334 loc_A334:                               ; CODE XREF: re_acquire_state+E5↑j
.text:000000000000A334                                         ; re_acquire_state+17B↓j
.text:000000000000A334                 mov     rax, [rsi]
.text:000000000000A337                 shl     rax, 4
.text:000000000000A33B                 add     rax, r8
.text:000000000000A33E                 movzx   edi, byte ptr [rax+8]
.text:000000000000A342                 cmp     edi, 1
.text:000000000000A345                 jnz     short loc_A2F0
.text:000000000000A347                 test    dword ptr [rax+8], 3FF00h
.text:000000000000A34E                 jz      short loc_A32B
.text:000000000000A350                 movzx   edx, byte ptr [rbx+68h]
.text:000000000000A354                 movzx   eax, byte ptr [rax+0Ah]
.text:000000000000A358                 mov     ecx, edx
.text:000000000000A35A                 shr     al, 4
.text:000000000000A35D                 and     edx, 0FFFFFFDFh
.text:000000000000A360                 shr     cl, 5
.text:000000000000A363                 or      eax, ecx
.text:000000000000A365                 and     eax, 1
.text:000000000000A368                 shl     eax, 5
.text:000000000000A36B                 or      eax, edx
.text:000000000000A36D                 mov     [rbx+68h], al
.text:000000000000A370
.text:000000000000A370 loc_A370:                               ; CODE XREF: re_acquire_state+1BB↓j
.text:000000000000A370                                         ; re_acquire_state+1CA↓j
.text:000000000000A370                 add     rsi, 8
.text:000000000000A374                 or      byte ptr [rbx+68h], 80h
.text:000000000000A378                 cmp     r9, rsi
.text:000000000000A37B                 jnz     short loc_A334
.text:000000000000A37D
.text:000000000000A37D loc_A37D:                               ; CODE XREF: re_acquire_state+D3↑j
.text:000000000000A37D                                         ; re_acquire_state+132↑j
.text:000000000000A37D                 mov     rdx, rbp
.text:000000000000A380                 mov     rsi, rbx
.text:000000000000A383                 mov     rdi, r12
.text:000000000000A386                 call    register_state
.text:000000000000A38B                 test    eax, eax
.text:000000000000A38D                 jnz     short loc_A3E4
.text:000000000000A38F
.text:000000000000A38F loc_A38F:                               ; CODE XREF: re_acquire_state+87↑j
.text:000000000000A38F                                         ; re_acquire_state+1E2↓j ...
.text:000000000000A38F                 add     rsp, 8
.text:000000000000A393                 mov     rax, rbx
.text:000000000000A396                 pop     rbx
.text:000000000000A397                 pop     rbp
.text:000000000000A398                 pop     r12
.text:000000000000A39A                 pop     r13
.text:000000000000A39C                 pop     r14
.text:000000000000A39E                 pop     r15
.text:000000000000A3A0                 retn
.text:000000000000A3A0 ; ---------------------------------------------------------------------------
.text:000000000000A3A1                 align 8
.text:000000000000A3A8
.text:000000000000A3A8 loc_A3A8:                               ; CODE XREF: re_acquire_state+116↑j
.text:000000000000A3A8                 or      edx, 10h
.text:000000000000A3AB                 mov     [rbx+68h], dl
.text:000000000000A3AE                 jmp     loc_A32B
.text:000000000000A3AE ; ---------------------------------------------------------------------------
.text:000000000000A3B3                 align 8
.text:000000000000A3B8
.text:000000000000A3B8 loc_A3B8:                               ; CODE XREF: re_acquire_state+11F↑j
.text:000000000000A3B8                 cmp     edi, 0Ch
.text:000000000000A3BB                 jz      short loc_A370
.text:000000000000A3BD                 test    dword ptr [rax+8], 3FF00h
.text:000000000000A3C4                 jz      loc_A32B
.text:000000000000A3CA                 jmp     short loc_A370
.text:000000000000A3CA ; ---------------------------------------------------------------------------
.text:000000000000A3CC                 align 10h
.text:000000000000A3D0
.text:000000000000A3D0 loc_A3D0:                               ; CODE XREF: re_acquire_state+C2↑j
.text:000000000000A3D0                 mov     rdi, rbx        ; ptr
.text:000000000000A3D3                 call    _free
.text:000000000000A3D8
.text:000000000000A3D8 loc_A3D8:                               ; CODE XREF: re_acquire_state+AB↑j
.text:000000000000A3D8                                         ; re_acquire_state+1EC↓j
.text:000000000000A3D8                 mov     dword ptr [r13+0], 0Ch
.text:000000000000A3E0                 xor     ebx, ebx
.text:000000000000A3E2                 jmp     short loc_A38F
.text:000000000000A3E4 ; ---------------------------------------------------------------------------
.text:000000000000A3E4
.text:000000000000A3E4 loc_A3E4:                               ; CODE XREF: re_acquire_state+18D↑j
.text:000000000000A3E4                 mov     rdi, rbx        ; ptr
.text:000000000000A3E7                 call    free_state
.text:000000000000A3EC                 jmp     short loc_A3D8
.text:000000000000A3EC ; ---------------------------------------------------------------------------
.text:000000000000A3EE                 align 10h
.text:000000000000A3F0
.text:000000000000A3F0 loc_A3F0:                               ; CODE XREF: re_acquire_state+15↑j
.text:000000000000A3F0                 mov     dword ptr [rdi], 0
.text:000000000000A3F6                 xor     ebx, ebx
.text:000000000000A3F8                 jmp     short loc_A38F
.text:000000000000A3F8 ; } // starts at A200
.text:000000000000A3F8 re_acquire_state endp
.text:000000000000A3F8
.text:000000000000A3F8 ; ---------------------------------------------------------------------------
.text:000000000000A3FA                 align 20h
.text:000000000000A400
.text:000000000000A400 ; =============== S U B R O U T I N E =======================================
.text:000000000000A400
.text:000000000000A400
.text:000000000000A400 merge_state_array proc near             ; CODE XREF: re_search_internal+167B↓p
.text:000000000000A400                                         ; update_cur_sifted_state+71B↓p
.text:000000000000A400
.text:000000000000A400 var_70          = qword ptr -70h
.text:000000000000A400 var_5C          = dword ptr -5Ch
.text:000000000000A400 var_58          = byte ptr -58h
.text:000000000000A400 ptr             = qword ptr -48h
.text:000000000000A400 var_40          = qword ptr -40h
.text:000000000000A400
.text:000000000000A400 ; __unwind {
.text:000000000000A400                 push    r15
.text:000000000000A402                 push    r14
.text:000000000000A404                 push    r13
.text:000000000000A406                 push    r12
.text:000000000000A408                 push    rbp
.text:000000000000A409                 push    rbx
.text:000000000000A40A                 sub     rsp, 48h
.text:000000000000A40E                 mov     rax, fs:28h
.text:000000000000A417                 mov     [rsp+78h+var_40], rax
.text:000000000000A41C                 xor     eax, eax
.text:000000000000A41E                 test    rcx, rcx
.text:000000000000A421                 jle     loc_A4B6
.text:000000000000A427                 lea     rax, [rsp+78h+var_5C]
.text:000000000000A42C                 mov     r14, rdi
.text:000000000000A42F                 mov     rbx, rsi
.text:000000000000A432                 mov     r12, rdx
.text:000000000000A435                 mov     rbp, rcx
.text:000000000000A438                 xor     r15d, r15d
.text:000000000000A43B                 lea     r13, [rsp+78h+var_58]
.text:000000000000A440                 mov     [rsp+78h+var_70], rax
.text:000000000000A445                 jmp     short loc_A49C
.text:000000000000A445 ; ---------------------------------------------------------------------------
.text:000000000000A447                 align 10h
.text:000000000000A450
.text:000000000000A450 loc_A450:                               ; CODE XREF: merge_state_array+A7↓j
.text:000000000000A450                 test    rdx, rdx
.text:000000000000A453                 jz      short loc_A493
.text:000000000000A455                 add     rdx, 8
.text:000000000000A459                 add     rsi, 8
.text:000000000000A45D                 mov     rdi, r13
.text:000000000000A460                 call    re_node_set_init_union
.text:000000000000A465                 test    eax, eax
.text:000000000000A467                 mov     [rsp+78h+var_5C], eax
.text:000000000000A46B                 jnz     short loc_A4B8
.text:000000000000A46D                 mov     rdi, [rsp+78h+var_70]
.text:000000000000A472                 mov     rdx, r13
.text:000000000000A475                 mov     rsi, r14
.text:000000000000A478                 call    re_acquire_state
.text:000000000000A47D                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000A482                 mov     [rbx+r15*8], rax
.text:000000000000A486                 call    _free
.text:000000000000A48B                 mov     eax, [rsp+78h+var_5C]
.text:000000000000A48F                 test    eax, eax
.text:000000000000A491                 jnz     short loc_A4B8
.text:000000000000A493
.text:000000000000A493 loc_A493:                               ; CODE XREF: merge_state_array+53↑j
.text:000000000000A493                 add     r15, 1
.text:000000000000A497                 cmp     rbp, r15
.text:000000000000A49A                 jz      short loc_A4B6
.text:000000000000A49C
.text:000000000000A49C loc_A49C:                               ; CODE XREF: merge_state_array+45↑j
.text:000000000000A49C                                         ; merge_state_array+B4↓j
.text:000000000000A49C                 mov     rsi, [rbx+r15*8]
.text:000000000000A4A0                 mov     rdx, [r12+r15*8]
.text:000000000000A4A4                 test    rsi, rsi
.text:000000000000A4A7                 jnz     short loc_A450
.text:000000000000A4A9                 mov     [rbx+r15*8], rdx
.text:000000000000A4AD                 add     r15, 1
.text:000000000000A4B1                 cmp     rbp, r15
.text:000000000000A4B4                 jnz     short loc_A49C
.text:000000000000A4B6
.text:000000000000A4B6 loc_A4B6:                               ; CODE XREF: merge_state_array+21↑j
.text:000000000000A4B6                                         ; merge_state_array+9A↑j
.text:000000000000A4B6                 xor     eax, eax
.text:000000000000A4B8
.text:000000000000A4B8 loc_A4B8:                               ; CODE XREF: merge_state_array+6B↑j
.text:000000000000A4B8                                         ; merge_state_array+91↑j
.text:000000000000A4B8                 mov     rcx, [rsp+78h+var_40]
.text:000000000000A4BD                 xor     rcx, fs:28h
.text:000000000000A4C6                 jnz     short loc_A4D7
.text:000000000000A4C8                 add     rsp, 48h
.text:000000000000A4CC                 pop     rbx
.text:000000000000A4CD                 pop     rbp
.text:000000000000A4CE                 pop     r12
.text:000000000000A4D0                 pop     r13
.text:000000000000A4D2                 pop     r14
.text:000000000000A4D4                 pop     r15
.text:000000000000A4D6                 retn
.text:000000000000A4D7 ; ---------------------------------------------------------------------------
.text:000000000000A4D7
.text:000000000000A4D7 loc_A4D7:                               ; CODE XREF: merge_state_array+C6↑j
.text:000000000000A4D7                 call    ___stack_chk_fail
.text:000000000000A4D7 ; } // starts at A400
.text:000000000000A4D7 merge_state_array endp
.text:000000000000A4D7
.text:000000000000A4D7 ; ---------------------------------------------------------------------------
.text:000000000000A4DC                 align 20h
.text:000000000000A4E0
.text:000000000000A4E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A4E0
.text:000000000000A4E0
.text:000000000000A4E0 expand_bkref_cache proc near            ; CODE XREF: check_arrival+3A0↓p
.text:000000000000A4E0                                         ; check_arrival+64E↓p
.text:000000000000A4E0
.text:000000000000A4E0 var_A8          = qword ptr -0A8h
.text:000000000000A4E0 var_A0          = qword ptr -0A0h
.text:000000000000A4E0 var_98          = qword ptr -98h
.text:000000000000A4E0 var_90          = qword ptr -90h
.text:000000000000A4E0 var_88          = qword ptr -88h
.text:000000000000A4E0 var_7C          = dword ptr -7Ch
.text:000000000000A4E0 var_78          = qword ptr -78h
.text:000000000000A4E0 var_70          = qword ptr -70h
.text:000000000000A4E0 var_5C          = dword ptr -5Ch
.text:000000000000A4E0 var_58          = qword ptr -58h
.text:000000000000A4E0 var_50          = qword ptr -50h
.text:000000000000A4E0 ptr             = qword ptr -48h
.text:000000000000A4E0 var_40          = qword ptr -40h
.text:000000000000A4E0
.text:000000000000A4E0 ; __unwind {
.text:000000000000A4E0                 push    r15
.text:000000000000A4E2                 push    r14
.text:000000000000A4E4                 push    r13
.text:000000000000A4E6                 push    r12
.text:000000000000A4E8                 mov     r12, rdx
.text:000000000000A4EB                 push    rbp
.text:000000000000A4EC                 push    rbx
.text:000000000000A4ED                 mov     rbx, rdi
.text:000000000000A4F0                 mov     rbp, rsi
.text:000000000000A4F3                 xor     esi, esi
.text:000000000000A4F5                 sub     rsp, 78h
.text:000000000000A4F9                 mov     rdi, [rdi+0C8h]
.text:000000000000A500                 mov     rax, fs:28h
.text:000000000000A509                 mov     [rsp+0A8h+var_40], rax
.text:000000000000A50E                 xor     eax, eax
.text:000000000000A510                 mov     [rsp+0A8h+var_88], rcx
.text:000000000000A515                 mov     [rsp+0A8h+var_7C], r8d
.text:000000000000A51A                 mov     rdx, rdi
.text:000000000000A51D
.text:000000000000A51D loc_A51D:                               ; CODE XREF: expand_bkref_cache+F7↓j
.text:000000000000A51D                 cmp     rsi, rdx
.text:000000000000A520                 jge     short loc_A577
.text:000000000000A522                 lea     rax, [rsi+rdx]
.text:000000000000A526                 mov     r8, [rbx+0D8h]
.text:000000000000A52D                 mov     rcx, rax
.text:000000000000A530                 shr     rcx, 3Fh
.text:000000000000A534                 add     rcx, rax
.text:000000000000A537                 sar     rcx, 1
.text:000000000000A53A                 lea     rax, [rcx+rcx*4]
.text:000000000000A53E                 cmp     r12, [r8+rax*8+8]
.text:000000000000A543                 jle     short loc_A572
.text:000000000000A545                 jmp     loc_A5C8
.text:000000000000A545 ; ---------------------------------------------------------------------------
.text:000000000000A54A                 align 10h
.text:000000000000A550
.text:000000000000A550 loc_A550:                               ; CODE XREF: expand_bkref_cache+95↓j
.text:000000000000A550                 lea     rdx, [rsi+rcx]
.text:000000000000A554                 mov     rax, rdx
.text:000000000000A557                 shr     rax, 3Fh
.text:000000000000A55B                 add     rax, rdx
.text:000000000000A55E                 sar     rax, 1
.text:000000000000A561                 lea     rdx, [rax+rax*4]
.text:000000000000A565                 mov     r9, rax
.text:000000000000A568                 cmp     r12, [r8+rdx*8+8]
.text:000000000000A56D                 jg      short loc_A5D0
.text:000000000000A56F                 mov     rcx, rax
.text:000000000000A572
.text:000000000000A572 loc_A572:                               ; CODE XREF: expand_bkref_cache+63↑j
.text:000000000000A572                 cmp     rsi, rcx
.text:000000000000A575                 jl      short loc_A550
.text:000000000000A577
.text:000000000000A577 loc_A577:                               ; CODE XREF: expand_bkref_cache+40↑j
.text:000000000000A577                 cmp     rdi, rsi
.text:000000000000A57A                 jle     short loc_A59D
.text:000000000000A57C                 mov     rcx, [rbx+0D8h]
.text:000000000000A583                 lea     rax, [rsi+rsi*4]
.text:000000000000A587                 shl     rax, 3
.text:000000000000A58B                 cmp     [rcx+rax+8], r12
.text:000000000000A590                 mov     [rsp+0A8h+var_78], rax
.text:000000000000A595                 jnz     short loc_A59D
.text:000000000000A597                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000A59B                 jnz     short loc_A5E0
.text:000000000000A59D
.text:000000000000A59D loc_A59D:                               ; CODE XREF: expand_bkref_cache+9A↑j
.text:000000000000A59D                                         ; expand_bkref_cache+B5↑j ...
.text:000000000000A59D                 xor     eax, eax
.text:000000000000A59F
.text:000000000000A59F loc_A59F:                               ; CODE XREF: expand_bkref_cache+341↓j
.text:000000000000A59F                                         ; expand_bkref_cache+356↓j ...
.text:000000000000A59F                 mov     rbx, [rsp+0A8h+var_40]
.text:000000000000A5A4                 xor     rbx, fs:28h
.text:000000000000A5AD                 jnz     loc_A879
.text:000000000000A5B3                 add     rsp, 78h
.text:000000000000A5B7                 pop     rbx
.text:000000000000A5B8                 pop     rbp
.text:000000000000A5B9                 pop     r12
.text:000000000000A5BB                 pop     r13
.text:000000000000A5BD                 pop     r14
.text:000000000000A5BF                 pop     r15
.text:000000000000A5C1                 retn
.text:000000000000A5C1 ; ---------------------------------------------------------------------------
.text:000000000000A5C2                 align 8
.text:000000000000A5C8
.text:000000000000A5C8 loc_A5C8:                               ; CODE XREF: expand_bkref_cache+65↑j
.text:000000000000A5C8                 mov     r9, rcx
.text:000000000000A5CB                 mov     rcx, rdx
.text:000000000000A5CE                 xchg    ax, ax
.text:000000000000A5D0
.text:000000000000A5D0 loc_A5D0:                               ; CODE XREF: expand_bkref_cache+8D↑j
.text:000000000000A5D0                 lea     rsi, [r9+1]
.text:000000000000A5D4                 mov     rdx, rcx
.text:000000000000A5D7                 jmp     loc_A51D
.text:000000000000A5D7 ; ---------------------------------------------------------------------------
.text:000000000000A5DC                 align 20h
.text:000000000000A5E0
.text:000000000000A5E0 loc_A5E0:                               ; CODE XREF: expand_bkref_cache+BB↑j
.text:000000000000A5E0                 lea     rax, [rbp+10h]
.text:000000000000A5E4                 mov     r13, [rbx+98h]
.text:000000000000A5EB                 mov     [rsp+0A8h+var_A8], rax
.text:000000000000A5EF                 lea     rax, [rsp+0A8h+var_5C]
.text:000000000000A5F4                 mov     [rsp+0A8h+var_70], rax
.text:000000000000A5F9                 lea     rax, [rsp+0A8h+var_58]
.text:000000000000A5FE                 mov     [rsp+0A8h+var_98], rax
.text:000000000000A603
.text:000000000000A603 loc_A603:                               ; CODE XREF: expand_bkref_cache+2E1↓j
.text:000000000000A603                 mov     rax, [rsp+0A8h+var_78]
.text:000000000000A608                 lea     r15, [rcx+rax]
.text:000000000000A60C                 jmp     loc_A6E8
.text:000000000000A60C ; ---------------------------------------------------------------------------
.text:000000000000A611                 align 8
.text:000000000000A618
.text:000000000000A618 loc_A618:                               ; CODE XREF: expand_bkref_cache+234↓j
.text:000000000000A618                 mov     rax, [r13+18h]
.text:000000000000A61C                 mov     rcx, [rax+r10*8]
.text:000000000000A620                 mov     r10, [rbx+0B8h]
.text:000000000000A627                 lea     rax, ds:0[r14*8]
.text:000000000000A62F                 mov     [rsp+0A8h+var_90], rax
.text:000000000000A634                 add     r10, rax
.text:000000000000A637                 mov     [rsp+0A8h+var_A0], rcx
.text:000000000000A63C                 mov     r9, [r10]
.text:000000000000A63F                 test    r9, r9
.text:000000000000A642                 jz      loc_A7D0
.text:000000000000A648                 mov     rdi, [r9+10h]
.text:000000000000A64C                 lea     rsi, [r9+18h]
.text:000000000000A650                 mov     rdx, rcx
.text:000000000000A653                 call    re_node_set_contains_isra_3
.text:000000000000A658                 test    rax, rax
.text:000000000000A65B                 jnz     short loc_A6D9
.text:000000000000A65D                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000A662                 lea     rsi, [r9+8]
.text:000000000000A666                 call    re_node_set_init_copy
.text:000000000000A66B                 mov     rsi, [rsp+0A8h+var_A0]
.text:000000000000A670                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000A675                 mov     [rsp+0A8h+var_5C], eax
.text:000000000000A679                 call    re_node_set_insert
.text:000000000000A67E                 mov     edx, [rsp+0A8h+var_5C]
.text:000000000000A682                 test    edx, edx
.text:000000000000A684                 jnz     loc_A826
.text:000000000000A68A                 cmp     al, 1
.text:000000000000A68C                 jnz     loc_A826
.text:000000000000A692                 mov     r10, [rsp+0A8h+var_90]
.text:000000000000A697                 add     r10, [rbx+0B8h]
.text:000000000000A69E
.text:000000000000A69E loc_A69E:                               ; CODE XREF: expand_bkref_cache+330↓j
.text:000000000000A69E                 mov     rdx, [rsp+0A8h+var_98]
.text:000000000000A6A3                 mov     rdi, [rsp+0A8h+var_70]
.text:000000000000A6A8                 mov     rsi, r13
.text:000000000000A6AB                 mov     [rsp+0A8h+var_A0], r10
.text:000000000000A6B0                 call    re_acquire_state
.text:000000000000A6B5                 mov     r10, [rsp+0A8h+var_A0]
.text:000000000000A6BA                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000A6BF                 mov     [r10], rax
.text:000000000000A6C2                 call    _free
.text:000000000000A6C7                 mov     rax, [rbx+0B8h]
.text:000000000000A6CE                 cmp     qword ptr [rax+r14*8], 0
.text:000000000000A6D3                 jz      loc_A815
.text:000000000000A6D9
.text:000000000000A6D9 loc_A6D9:                               ; CODE XREF: expand_bkref_cache+17B↑j
.text:000000000000A6D9                                         ; expand_bkref_cache+221↓j ...
.text:000000000000A6D9                 add     r15, 28h ; '('
.text:000000000000A6DD                 cmp     byte ptr [r15-8], 0
.text:000000000000A6E2                 jz      loc_A59D
.text:000000000000A6E8
.text:000000000000A6E8 loc_A6E8:                               ; CODE XREF: expand_bkref_cache+12C↑j
.text:000000000000A6E8                 mov     r10, [r15]
.text:000000000000A6EB                 mov     r9, [rbp+8]
.text:000000000000A6EF                 mov     rsi, [rsp+0A8h+var_A8]
.text:000000000000A6F3                 mov     rdx, r10
.text:000000000000A6F6                 mov     rdi, r9
.text:000000000000A6F9                 call    re_node_set_contains_isra_3
.text:000000000000A6FE                 test    rax, rax
.text:000000000000A701                 jz      short loc_A6D9
.text:000000000000A703                 mov     r8, [r15+18h]
.text:000000000000A707                 add     r8, r12
.text:000000000000A70A                 mov     r14, r8
.text:000000000000A70D                 sub     r14, [r15+10h]
.text:000000000000A711                 cmp     r12, r14
.text:000000000000A714                 jnz     loc_A618
.text:000000000000A71A                 mov     rcx, [r13+28h]
.text:000000000000A71E                 lea     rax, [r10+r10*2]
.text:000000000000A722                 mov     rsi, [rsp+0A8h+var_A8]
.text:000000000000A726                 mov     rdi, r9
.text:000000000000A729                 lea     rax, [rcx+rax*8]
.text:000000000000A72D                 mov     rax, [rax+10h]
.text:000000000000A731                 mov     r14, [rax]
.text:000000000000A734                 mov     rdx, r14
.text:000000000000A737                 call    re_node_set_contains_isra_3
.text:000000000000A73C                 test    rax, rax
.text:000000000000A73F                 jnz     short loc_A6D9
.text:000000000000A741                 mov     edi, 8          ; size
.text:000000000000A746                 mov     [rsp+0A8h+var_58], 1
.text:000000000000A74F                 mov     [rsp+0A8h+var_50], 1
.text:000000000000A758                 call    _malloc
.text:000000000000A75D                 test    rax, rax
.text:000000000000A760                 mov     [rsp+0A8h+ptr], rax
.text:000000000000A765                 jz      loc_A85D
.text:000000000000A76B                 mov     [rax], r14
.text:000000000000A76E                 xor     eax, eax
.text:000000000000A770
.text:000000000000A770 loc_A770:                               ; CODE XREF: expand_bkref_cache+394↓j
.text:000000000000A770                 mov     r15, [rsp+0A8h+var_98]
.text:000000000000A775                 mov     rdx, [rsp+0A8h+var_88]
.text:000000000000A77A                 mov     rdi, r13
.text:000000000000A77D                 mov     ecx, [rsp+0A8h+var_7C]
.text:000000000000A781                 mov     [rsp+0A8h+var_5C], eax
.text:000000000000A785                 mov     rsi, r15
.text:000000000000A788                 call    check_arrival_expand_ecl
.text:000000000000A78D                 mov     rsi, r15
.text:000000000000A790                 mov     rdi, rbp
.text:000000000000A793                 mov     r14d, eax
.text:000000000000A796                 call    re_node_set_merge
.text:000000000000A79B                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000A7A0                 mov     r15d, eax
.text:000000000000A7A3                 call    _free
.text:000000000000A7A8                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000A7AC                 mov     edx, r14d
.text:000000000000A7AF                 or      edx, r15d
.text:000000000000A7B2                 or      edx, eax
.text:000000000000A7B4                 jnz     loc_A846
.text:000000000000A7BA                 mov     rcx, [rbx+0D8h]
.text:000000000000A7C1                 jmp     loc_A603
.text:000000000000A7C1 ; ---------------------------------------------------------------------------
.text:000000000000A7C6                 align 10h
.text:000000000000A7D0
.text:000000000000A7D0 loc_A7D0:                               ; CODE XREF: expand_bkref_cache+162↑j
.text:000000000000A7D0                 mov     edi, 8          ; size
.text:000000000000A7D5                 mov     [rsp+0A8h+var_90], r10
.text:000000000000A7DA                 mov     [rsp+0A8h+var_58], 1
.text:000000000000A7E3                 mov     [rsp+0A8h+var_50], 1
.text:000000000000A7EC                 call    _malloc
.text:000000000000A7F1                 test    rax, rax
.text:000000000000A7F4                 mov     [rsp+0A8h+ptr], rax
.text:000000000000A7F9                 jz      short loc_A83C
.text:000000000000A7FB                 mov     rdi, [rsp+0A8h+var_A0]
.text:000000000000A800                 mov     [rsp+0A8h+var_5C], 0
.text:000000000000A808                 mov     r10, [rsp+0A8h+var_90]
.text:000000000000A80D                 mov     [rax], rdi
.text:000000000000A810                 jmp     loc_A69E
.text:000000000000A815 ; ---------------------------------------------------------------------------
.text:000000000000A815
.text:000000000000A815 loc_A815:                               ; CODE XREF: expand_bkref_cache+1F3↑j
.text:000000000000A815                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000A819                 test    eax, eax
.text:000000000000A81B                 jz      loc_A6D9
.text:000000000000A821                 jmp     loc_A59F
.text:000000000000A826 ; ---------------------------------------------------------------------------
.text:000000000000A826
.text:000000000000A826 loc_A826:                               ; CODE XREF: expand_bkref_cache+1A4↑j
.text:000000000000A826                                         ; expand_bkref_cache+1AC↑j
.text:000000000000A826                 mov     rdi, [rsp+0A8h+ptr] ; ptr
.text:000000000000A82B                 call    _free
.text:000000000000A830                 mov     eax, [rsp+0A8h+var_5C]
.text:000000000000A834                 test    eax, eax
.text:000000000000A836                 jnz     loc_A59F
.text:000000000000A83C
.text:000000000000A83C loc_A83C:                               ; CODE XREF: expand_bkref_cache+319↑j
.text:000000000000A83C                 mov     eax, 0Ch
.text:000000000000A841                 jmp     loc_A59F
.text:000000000000A846 ; ---------------------------------------------------------------------------
.text:000000000000A846
.text:000000000000A846 loc_A846:                               ; CODE XREF: expand_bkref_cache+2D4↑j
.text:000000000000A846                 test    eax, eax
.text:000000000000A848                 jnz     loc_A59F
.text:000000000000A84E                 test    r14d, r14d
.text:000000000000A851                 mov     eax, r14d
.text:000000000000A854                 cmovz   eax, r15d
.text:000000000000A858                 jmp     loc_A59F
.text:000000000000A85D ; ---------------------------------------------------------------------------
.text:000000000000A85D
.text:000000000000A85D loc_A85D:                               ; CODE XREF: expand_bkref_cache+285↑j
.text:000000000000A85D                 mov     [rsp+0A8h+var_50], 0
.text:000000000000A866                 mov     [rsp+0A8h+var_58], 0
.text:000000000000A86F                 mov     eax, 0Ch
.text:000000000000A874                 jmp     loc_A770
.text:000000000000A879 ; ---------------------------------------------------------------------------
.text:000000000000A879
.text:000000000000A879 loc_A879:                               ; CODE XREF: expand_bkref_cache+CD↑j
.text:000000000000A879                 call    ___stack_chk_fail
.text:000000000000A879 ; } // starts at A4E0
.text:000000000000A879 expand_bkref_cache endp
.text:000000000000A879
.text:000000000000A879 ; ---------------------------------------------------------------------------
.text:000000000000A87E                 align 20h
.text:000000000000A880
.text:000000000000A880 ; =============== S U B R O U T I N E =======================================
.text:000000000000A880
.text:000000000000A880
.text:000000000000A880 check_subexp_matching_top_isra_18 proc near
.text:000000000000A880                                         ; CODE XREF: transit_state_bkref_isra_34+808↓p
.text:000000000000A880                                         ; merge_state_with_log+1A1↓p ...
.text:000000000000A880
.text:000000000000A880 var_50          = qword ptr -50h
.text:000000000000A880 var_48          = qword ptr -48h
.text:000000000000A880 var_40          = qword ptr -40h
.text:000000000000A880
.text:000000000000A880 ; __unwind {
.text:000000000000A880                 push    r15
.text:000000000000A882                 push    r14
.text:000000000000A884                 push    r13
.text:000000000000A886                 push    r12
.text:000000000000A888                 push    rbp
.text:000000000000A889                 push    rbx
.text:000000000000A88A                 sub     rsp, 28h
.text:000000000000A88E                 cmp     qword ptr [rsi], 0
.text:000000000000A892                 mov     r13, [rdi+98h]
.text:000000000000A899                 jle     loc_A960
.text:000000000000A89F                 mov     r14, rdx
.text:000000000000A8A2                 mov     r12, rsi
.text:000000000000A8A5                 mov     r15, rdi
.text:000000000000A8A8                 xor     ebx, ebx
.text:000000000000A8AA                 jmp     short loc_A8BE
.text:000000000000A8AA ; ---------------------------------------------------------------------------
.text:000000000000A8AC                 align 10h
.text:000000000000A8B0
.text:000000000000A8B0 loc_A8B0:                               ; CODE XREF: check_subexp_matching_top_isra_18+54↓j
.text:000000000000A8B0                                         ; check_subexp_matching_top_isra_18+5D↓j ...
.text:000000000000A8B0                 add     rbx, 1
.text:000000000000A8B4                 cmp     rbx, [r12]
.text:000000000000A8B8                 jge     loc_A960
.text:000000000000A8BE
.text:000000000000A8BE loc_A8BE:                               ; CODE XREF: check_subexp_matching_top_isra_18+2A↑j
.text:000000000000A8BE                                         ; check_subexp_matching_top_isra_18+D3↓j
.text:000000000000A8BE                 mov     rax, [r14]
.text:000000000000A8C1                 mov     rbp, [rax+rbx*8]
.text:000000000000A8C5                 mov     rax, rbp
.text:000000000000A8C8                 shl     rax, 4
.text:000000000000A8CC                 add     rax, [r13+0]
.text:000000000000A8D0                 cmp     byte ptr [rax+8], 8
.text:000000000000A8D4                 jnz     short loc_A8B0
.text:000000000000A8D6                 mov     rax, [rax]
.text:000000000000A8D9                 cmp     rax, 3Fh ; '?'
.text:000000000000A8DD                 jg      short loc_A8B0
.text:000000000000A8DF                 mov     rsi, [r13+0A0h]
.text:000000000000A8E6                 bt      rsi, rax
.text:000000000000A8EA                 jnb     short loc_A8B0
.text:000000000000A8EC                 mov     r8, [r15+0E8h]
.text:000000000000A8F3                 cmp     r8, [r15+0F0h]
.text:000000000000A8FA                 mov     r9, [r15+0F8h]
.text:000000000000A901                 jz      short loc_A978
.text:000000000000A903
.text:000000000000A903 loc_A903:                               ; CODE XREF: check_subexp_matching_top_isra_18+13C↓j
.text:000000000000A903                 mov     esi, 30h ; '0'  ; size
.text:000000000000A908                 mov     edi, 1          ; nmemb
.text:000000000000A90D                 mov     [rsp+58h+var_48], r9
.text:000000000000A912                 mov     [rsp+58h+var_50], r8
.text:000000000000A917                 mov     [rsp+58h+var_40], rcx
.text:000000000000A91C                 call    _calloc
.text:000000000000A921                 mov     r8, [rsp+58h+var_50]
.text:000000000000A926                 mov     r9, [rsp+58h+var_48]
.text:000000000000A92B                 test    rax, rax
.text:000000000000A92E                 mov     [r9+r8*8], rax
.text:000000000000A932                 jz      short loc_A971
.text:000000000000A934                 add     r8, 1
.text:000000000000A938                 add     rbx, 1
.text:000000000000A93C                 mov     rcx, [rsp+58h+var_40]
.text:000000000000A941                 mov     [r15+0E8h], r8
.text:000000000000A948                 cmp     rbx, [r12]
.text:000000000000A94C                 mov     [rax+8], rbp
.text:000000000000A950                 mov     [rax], rcx
.text:000000000000A953                 jl      loc_A8BE
.text:000000000000A959                 nop     dword ptr [rax+00000000h]
.text:000000000000A960
.text:000000000000A960 loc_A960:                               ; CODE XREF: check_subexp_matching_top_isra_18+19↑j
.text:000000000000A960                                         ; check_subexp_matching_top_isra_18+38↑j
.text:000000000000A960                 xor     eax, eax
.text:000000000000A962
.text:000000000000A962 loc_A962:                               ; CODE XREF: check_subexp_matching_top_isra_18+F6↓j
.text:000000000000A962                 add     rsp, 28h
.text:000000000000A966                 pop     rbx
.text:000000000000A967                 pop     rbp
.text:000000000000A968                 pop     r12
.text:000000000000A96A                 pop     r13
.text:000000000000A96C                 pop     r14
.text:000000000000A96E                 pop     r15
.text:000000000000A970                 retn
.text:000000000000A971 ; ---------------------------------------------------------------------------
.text:000000000000A971
.text:000000000000A971 loc_A971:                               ; CODE XREF: check_subexp_matching_top_isra_18+B2↑j
.text:000000000000A971                                         ; check_subexp_matching_top_isra_18+120↓j
.text:000000000000A971                 mov     eax, 0Ch
.text:000000000000A976                 jmp     short loc_A962
.text:000000000000A978 ; ---------------------------------------------------------------------------
.text:000000000000A978
.text:000000000000A978 loc_A978:                               ; CODE XREF: check_subexp_matching_top_isra_18+81↑j
.text:000000000000A978                 lea     rax, [r8+r8]
.text:000000000000A97C                 mov     rsi, r8
.text:000000000000A97F                 mov     rdi, r9         ; ptr
.text:000000000000A982                 shl     rsi, 4          ; size
.text:000000000000A986                 mov     [rsp+58h+var_50], rcx
.text:000000000000A98B                 mov     [rsp+58h+var_48], rax
.text:000000000000A990                 call    _realloc
.text:000000000000A995                 test    rax, rax
.text:000000000000A998                 mov     r9, rax
.text:000000000000A99B                 mov     rcx, [rsp+58h+var_50]
.text:000000000000A9A0                 jz      short loc_A971
.text:000000000000A9A2                 mov     [r15+0F8h], rax
.text:000000000000A9A9                 mov     rax, [rsp+58h+var_48]
.text:000000000000A9AE                 mov     r8, [r15+0E8h]
.text:000000000000A9B5                 mov     [r15+0F0h], rax
.text:000000000000A9BC                 jmp     loc_A903
.text:000000000000A9BC ; } // starts at A880
.text:000000000000A9BC check_subexp_matching_top_isra_18 endp
.text:000000000000A9BC
.text:000000000000A9BC ; ---------------------------------------------------------------------------
.text:000000000000A9C1                 align 10h
.text:000000000000A9D0
.text:000000000000A9D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000A9D0
.text:000000000000A9D0
.text:000000000000A9D0 re_string_context_at proc near          ; CODE XREF: check_node_accept+6D↓p
.text:000000000000A9D0                                         ; check_halt_state_context_isra_20+16↓p ...
.text:000000000000A9D0 ; __unwind {
.text:000000000000A9D0                 push    rbp
.text:000000000000A9D1                 push    rbx
.text:000000000000A9D2                 mov     rbp, rdi
.text:000000000000A9D5                 sub     rsp, 8
.text:000000000000A9D9                 test    rsi, rsi
.text:000000000000A9DC                 js      short loc_AA30
.text:000000000000A9DE                 cmp     [rdi+58h], rsi
.text:000000000000A9E2                 jz      loc_AA88
.text:000000000000A9E8                 cmp     dword ptr [rdi+90h], 1
.text:000000000000A9EF                 jle     short loc_AA40
.text:000000000000A9F1                 mov     rax, [rdi+10h]
.text:000000000000A9F5                 jmp     short loc_AA0A
.text:000000000000A9F5 ; ---------------------------------------------------------------------------
.text:000000000000A9F7                 align 20h
.text:000000000000AA00
.text:000000000000AA00 loc_AA00:                               ; CODE XREF: re_string_context_at+40↓j
.text:000000000000AA00                 sub     rsi, 1
.text:000000000000AA04                 cmp     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000AA08                 jz      short loc_AA30
.text:000000000000AA0A
.text:000000000000AA0A loc_AA0A:                               ; CODE XREF: re_string_context_at+25↑j
.text:000000000000AA0A                 mov     ebx, [rax+rsi*4]
.text:000000000000AA0D                 cmp     ebx, 0FFFFFFFFh
.text:000000000000AA10                 jz      short loc_AA00
.text:000000000000AA12                 cmp     byte ptr [rbp+8Eh], 0
.text:000000000000AA19                 jnz     short loc_AA98
.text:000000000000AA1B
.text:000000000000AA1B loc_AA1B:                               ; CODE XREF: re_string_context_at+D6↓j
.text:000000000000AA1B                 xor     eax, eax
.text:000000000000AA1D                 cmp     ebx, 0Ah
.text:000000000000AA20                 jz      short loc_AA6C
.text:000000000000AA22
.text:000000000000AA22 loc_AA22:                               ; CODE XREF: re_string_context_at+93↓j
.text:000000000000AA22                                         ; re_string_context_at+9A↓j ...
.text:000000000000AA22                 add     rsp, 8
.text:000000000000AA26                 pop     rbx
.text:000000000000AA27                 pop     rbp
.text:000000000000AA28                 retn
.text:000000000000AA28 ; ---------------------------------------------------------------------------
.text:000000000000AA29                 align 10h
.text:000000000000AA30
.text:000000000000AA30 loc_AA30:                               ; CODE XREF: re_string_context_at+C↑j
.text:000000000000AA30                                         ; re_string_context_at+38↑j
.text:000000000000AA30                 mov     eax, [rbp+70h]
.text:000000000000AA33                 add     rsp, 8
.text:000000000000AA37                 pop     rbx
.text:000000000000AA38                 pop     rbp
.text:000000000000AA39                 retn
.text:000000000000AA39 ; ---------------------------------------------------------------------------
.text:000000000000AA3A                 align 20h
.text:000000000000AA40
.text:000000000000AA40 loc_AA40:                               ; CODE XREF: re_string_context_at+1F↑j
.text:000000000000AA40                 mov     rax, [rdi+8]
.text:000000000000AA44                 mov     rcx, [rdi+80h]
.text:000000000000AA4B                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000AA4F                 mov     rdx, rax
.text:000000000000AA52                 sar     rax, 6
.text:000000000000AA56                 mov     rcx, [rcx+rax*8]
.text:000000000000AA5A                 mov     eax, 1
.text:000000000000AA5F                 bt      rcx, rdx
.text:000000000000AA63                 jb      short loc_AA22
.text:000000000000AA65                 xor     eax, eax
.text:000000000000AA67                 cmp     dl, 0Ah
.text:000000000000AA6A                 jnz     short loc_AA22
.text:000000000000AA6C
.text:000000000000AA6C loc_AA6C:                               ; CODE XREF: re_string_context_at+50↑j
.text:000000000000AA6C                 xor     eax, eax
.text:000000000000AA6E                 cmp     byte ptr [rbp+8Dh], 0
.text:000000000000AA75                 setnz   al
.text:000000000000AA78                 add     rsp, 8
.text:000000000000AA7C                 add     eax, eax
.text:000000000000AA7E                 pop     rbx
.text:000000000000AA7F                 pop     rbp
.text:000000000000AA80                 retn
.text:000000000000AA80 ; ---------------------------------------------------------------------------
.text:000000000000AA81                 align 8
.text:000000000000AA88
.text:000000000000AA88 loc_AA88:                               ; CODE XREF: re_string_context_at+12↑j
.text:000000000000AA88                 and     edx, 2
.text:000000000000AA8B                 cmp     edx, 1
.text:000000000000AA8E                 sbb     eax, eax
.text:000000000000AA90                 and     eax, 2
.text:000000000000AA93                 add     eax, 8
.text:000000000000AA96                 jmp     short loc_AA22
.text:000000000000AA98 ; ---------------------------------------------------------------------------
.text:000000000000AA98
.text:000000000000AA98 loc_AA98:                               ; CODE XREF: re_string_context_at+49↑j
.text:000000000000AA98                 mov     edi, ebx        ; wc
.text:000000000000AA9A                 call    _iswalnum
.text:000000000000AA9F                 test    eax, eax
.text:000000000000AAA1                 jnz     short loc_AAAC
.text:000000000000AAA3                 cmp     ebx, 5Fh ; '_'
.text:000000000000AAA6                 jnz     loc_AA1B
.text:000000000000AAAC
.text:000000000000AAAC loc_AAAC:                               ; CODE XREF: re_string_context_at+D1↑j
.text:000000000000AAAC                 mov     eax, 1
.text:000000000000AAB1                 jmp     loc_AA22
.text:000000000000AAB1 ; } // starts at A9D0
.text:000000000000AAB1 re_string_context_at endp
.text:000000000000AAB1
.text:000000000000AAB1 ; ---------------------------------------------------------------------------
.text:000000000000AAB6                 align 20h
.text:000000000000AAC0
.text:000000000000AAC0 ; =============== S U B R O U T I N E =======================================
.text:000000000000AAC0
.text:000000000000AAC0
.text:000000000000AAC0 check_node_accept proc near             ; CODE XREF: check_arrival+1EF↓p
.text:000000000000AAC0                                         ; set_regs+17A↓p ...
.text:000000000000AAC0 ; __unwind {
.text:000000000000AAC0                 mov     rax, [rdi+8]
.text:000000000000AAC4                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000AAC8                 movzx   eax, byte ptr [rsi+8]
.text:000000000000AACC                 cmp     al, 3
.text:000000000000AACE                 jz      loc_AB88
.text:000000000000AAD4                 jbe     loc_AB70
.text:000000000000AADA                 cmp     al, 5
.text:000000000000AADC                 jz      short loc_AAF0
.text:000000000000AADE                 cmp     al, 7
.text:000000000000AAE0                 jnz     loc_AB80
.text:000000000000AAE6                 xor     eax, eax
.text:000000000000AAE8                 test    cl, cl
.text:000000000000AAEA                 js      locret_AB7A
.text:000000000000AAF0
.text:000000000000AAF0 loc_AAF0:                               ; CODE XREF: check_node_accept+1C↑j
.text:000000000000AAF0                 cmp     cl, 0Ah
.text:000000000000AAF3                 jz      loc_ABB8
.text:000000000000AAF9                 test    cl, cl
.text:000000000000AAFB                 jnz     short loc_AB10
.text:000000000000AAFD                 mov     rcx, [rdi+98h]
.text:000000000000AB04                 xor     eax, eax
.text:000000000000AB06                 test    byte ptr [rcx+0D8h], 80h
.text:000000000000AB0D                 jnz     short locret_AB7A
.text:000000000000AB0F                 nop
.text:000000000000AB10
.text:000000000000AB10 loc_AB10:                               ; CODE XREF: check_node_accept+3B↑j
.text:000000000000AB10                                         ; check_node_accept+B8↓j ...
.text:000000000000AB10                 push    rbx
.text:000000000000AB11                 mov     ebx, [rsi+8]
.text:000000000000AB14                 mov     eax, 1
.text:000000000000AB19                 test    ebx, 3FF00h
.text:000000000000AB1F                 jz      short loc_AB6C
.text:000000000000AB21                 mov     rsi, rdx
.text:000000000000AB24                 mov     edx, [rdi+0A0h]
.text:000000000000AB2A                 shr     ebx, 8
.text:000000000000AB2D                 call    re_string_context_at
.text:000000000000AB32                 mov     ecx, ebx
.text:000000000000AB34                 mov     edx, eax
.text:000000000000AB36                 and     cx, 3FFh
.text:000000000000AB3B                 test    bl, 4
.text:000000000000AB3E                 jz      short loc_ABA8
.text:000000000000AB40                 xor     eax, eax
.text:000000000000AB42                 test    dl, 1
.text:000000000000AB45                 jz      short loc_AB6C
.text:000000000000AB47                 and     ebx, 8
.text:000000000000AB4A                 jnz     short loc_AB6C
.text:000000000000AB4C
.text:000000000000AB4C loc_AB4C:                               ; CODE XREF: check_node_accept+EB↓j
.text:000000000000AB4C                                         ; check_node_accept+EF↓j
.text:000000000000AB4C                 test    cl, 20h
.text:000000000000AB4F                 jz      short loc_AB58
.text:000000000000AB51                 xor     eax, eax
.text:000000000000AB53                 test    dl, 2
.text:000000000000AB56                 jz      short loc_AB6C
.text:000000000000AB58
.text:000000000000AB58 loc_AB58:                               ; CODE XREF: check_node_accept+8F↑j
.text:000000000000AB58                 shr     edx, 3
.text:000000000000AB5B                 mov     eax, 1
.text:000000000000AB60                 and     edx, 1
.text:000000000000AB63                 and     ecx, 80h
.text:000000000000AB69                 cmovnz  eax, edx
.text:000000000000AB6C
.text:000000000000AB6C loc_AB6C:                               ; CODE XREF: check_node_accept+5F↑j
.text:000000000000AB6C                                         ; check_node_accept+85↑j ...
.text:000000000000AB6C                 pop     rbx
.text:000000000000AB6D                 retn
.text:000000000000AB6D ; ---------------------------------------------------------------------------
.text:000000000000AB6E                 align 10h
.text:000000000000AB70
.text:000000000000AB70 loc_AB70:                               ; CODE XREF: check_node_accept+14↑j
.text:000000000000AB70                 cmp     al, 1
.text:000000000000AB72                 jnz     short loc_AB80
.text:000000000000AB74                 xor     eax, eax
.text:000000000000AB76                 cmp     [rsi], cl
.text:000000000000AB78                 jz      short loc_AB10
.text:000000000000AB7A
.text:000000000000AB7A locret_AB7A:                            ; CODE XREF: check_node_accept+2A↑j
.text:000000000000AB7A                                         ; check_node_accept+4D↑j
.text:000000000000AB7A                 rep retn
.text:000000000000AB7A ; ---------------------------------------------------------------------------
.text:000000000000AB7C                 align 20h
.text:000000000000AB80
.text:000000000000AB80 loc_AB80:                               ; CODE XREF: check_node_accept+20↑j
.text:000000000000AB80                                         ; check_node_accept+B2↑j
.text:000000000000AB80                 xor     eax, eax
.text:000000000000AB82                 retn
.text:000000000000AB82 ; ---------------------------------------------------------------------------
.text:000000000000AB83                 align 8
.text:000000000000AB88
.text:000000000000AB88 loc_AB88:                               ; CODE XREF: check_node_accept+E↑j
.text:000000000000AB88                 mov     r8, [rsi]
.text:000000000000AB8B                 movzx   eax, cl
.text:000000000000AB8E                 sar     rax, 6
.text:000000000000AB92                 mov     r8, [r8+rax*8]
.text:000000000000AB96                 xor     eax, eax
.text:000000000000AB98                 bt      r8, rcx
.text:000000000000AB9C                 jb      loc_AB10
.text:000000000000ABA2                 rep retn
.text:000000000000ABA2 ; ---------------------------------------------------------------------------
.text:000000000000ABA4                 align 8
.text:000000000000ABA8
.text:000000000000ABA8 loc_ABA8:                               ; CODE XREF: check_node_accept+7E↑j
.text:000000000000ABA8                 and     ebx, 8
.text:000000000000ABAB                 jz      short loc_AB4C
.text:000000000000ABAD                 test    al, 1
.text:000000000000ABAF                 jz      short loc_AB4C
.text:000000000000ABB1                 xor     eax, eax
.text:000000000000ABB3                 pop     rbx
.text:000000000000ABB4                 retn
.text:000000000000ABB4 ; ---------------------------------------------------------------------------
.text:000000000000ABB5                 align 8
.text:000000000000ABB8
.text:000000000000ABB8 loc_ABB8:                               ; CODE XREF: check_node_accept+33↑j
.text:000000000000ABB8                 mov     rcx, [rdi+98h]
.text:000000000000ABBF                 xor     eax, eax
.text:000000000000ABC1                 test    byte ptr [rcx+0D8h], 40h
.text:000000000000ABC8                 jnz     loc_AB10
.text:000000000000ABCE                 rep retn
.text:000000000000ABCE ; } // starts at AAC0
.text:000000000000ABCE check_node_accept endp
.text:000000000000ABCE
.text:000000000000ABD0
.text:000000000000ABD0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ABD0
.text:000000000000ABD0
.text:000000000000ABD0 check_halt_state_context_isra_20 proc near
.text:000000000000ABD0                                         ; CODE XREF: re_search_internal+8C7↓p
.text:000000000000ABD0                                         ; re_search_internal+A3C↓p ...
.text:000000000000ABD0 ; __unwind {
.text:000000000000ABD0                 push    r12
.text:000000000000ABD2                 mov     r12, rdx
.text:000000000000ABD5                 push    rbp
.text:000000000000ABD6                 push    rbx
.text:000000000000ABD7                 mov     edx, [rdi+0A0h]
.text:000000000000ABDD                 mov     rbx, rsi
.text:000000000000ABE0                 mov     rsi, rcx
.text:000000000000ABE3                 mov     rbp, rdi
.text:000000000000ABE6                 call    re_string_context_at
.text:000000000000ABEB                 test    rbx, rbx
.text:000000000000ABEE                 jle     loc_AC98
.text:000000000000ABF4                 mov     rdx, [rbp+98h]
.text:000000000000ABFB                 mov     r11d, eax
.text:000000000000ABFE                 mov     ebp, eax
.text:000000000000AC00                 and     eax, 1
.text:000000000000AC03                 mov     r9, [r12]
.text:000000000000AC07                 xor     esi, esi
.text:000000000000AC09                 and     ebp, 8
.text:000000000000AC0C                 and     r11d, 2
.text:000000000000AC10                 mov     r10d, eax
.text:000000000000AC13                 mov     r8, [rdx]
.text:000000000000AC16                 jmp     short loc_AC29
.text:000000000000AC16 ; ---------------------------------------------------------------------------
.text:000000000000AC18                 align 20h
.text:000000000000AC20
.text:000000000000AC20 loc_AC20:                               ; CODE XREF: check_halt_state_context_isra_20+78↓j
.text:000000000000AC20                                         ; check_halt_state_context_isra_20+87↓j ...
.text:000000000000AC20                 add     rsi, 1
.text:000000000000AC24                 cmp     rsi, rbx
.text:000000000000AC27                 jz      short loc_AC98
.text:000000000000AC29
.text:000000000000AC29 loc_AC29:                               ; CODE XREF: check_halt_state_context_isra_20+46↑j
.text:000000000000AC29                 mov     rax, [r9+rsi*8]
.text:000000000000AC2D                 mov     rdx, rax
.text:000000000000AC30                 shl     rdx, 4
.text:000000000000AC34                 add     rdx, r8
.text:000000000000AC37                 mov     ecx, [rdx+8]
.text:000000000000AC3A                 shr     ecx, 8
.text:000000000000AC3D                 mov     edi, ecx
.text:000000000000AC3F                 and     di, 3FFh
.text:000000000000AC44                 cmp     byte ptr [rdx+8], 2
.text:000000000000AC48                 jnz     short loc_AC20
.text:000000000000AC4A                 test    di, di
.text:000000000000AC4D                 jz      short loc_AC75
.text:000000000000AC4F                 test    cl, 4
.text:000000000000AC52                 jz      short loc_AC80
.text:000000000000AC54                 test    r10d, r10d
.text:000000000000AC57                 jz      short loc_AC20
.text:000000000000AC59                 and     ecx, 8
.text:000000000000AC5C                 jnz     short loc_AC20
.text:000000000000AC5E
.text:000000000000AC5E loc_AC5E:                               ; CODE XREF: check_halt_state_context_isra_20+B3↓j
.text:000000000000AC5E                 test    dil, 20h
.text:000000000000AC62                 jz      short loc_AC69
.text:000000000000AC64
.text:000000000000AC64 loc_AC64:                               ; CODE XREF: check_halt_state_context_isra_20+C0↓j
.text:000000000000AC64                 test    r11d, r11d
.text:000000000000AC67                 jz      short loc_AC20
.text:000000000000AC69
.text:000000000000AC69 loc_AC69:                               ; CODE XREF: check_halt_state_context_isra_20+92↑j
.text:000000000000AC69                                         ; check_halt_state_context_isra_20+BE↓j
.text:000000000000AC69                 and     edi, 80h
.text:000000000000AC6F                 jz      short loc_AC75
.text:000000000000AC71                 test    ebp, ebp
.text:000000000000AC73                 jz      short loc_AC20
.text:000000000000AC75
.text:000000000000AC75 loc_AC75:                               ; CODE XREF: check_halt_state_context_isra_20+7D↑j
.text:000000000000AC75                                         ; check_halt_state_context_isra_20+9F↑j
.text:000000000000AC75                 pop     rbx
.text:000000000000AC76                 pop     rbp
.text:000000000000AC77                 pop     r12
.text:000000000000AC79                 retn
.text:000000000000AC79 ; ---------------------------------------------------------------------------
.text:000000000000AC7A                 align 20h
.text:000000000000AC80
.text:000000000000AC80 loc_AC80:                               ; CODE XREF: check_halt_state_context_isra_20+82↑j
.text:000000000000AC80                 and     ecx, 8
.text:000000000000AC83                 jz      short loc_AC5E
.text:000000000000AC85                 test    r10d, r10d
.text:000000000000AC88                 jnz     short loc_AC20
.text:000000000000AC8A                 test    dil, 20h
.text:000000000000AC8E                 jz      short loc_AC69
.text:000000000000AC90                 jmp     short loc_AC64
.text:000000000000AC90 ; ---------------------------------------------------------------------------
.text:000000000000AC92                 align 8
.text:000000000000AC98
.text:000000000000AC98 loc_AC98:                               ; CODE XREF: check_halt_state_context_isra_20+1E↑j
.text:000000000000AC98                                         ; check_halt_state_context_isra_20+57↑j
.text:000000000000AC98                 pop     rbx
.text:000000000000AC99                 xor     eax, eax
.text:000000000000AC9B                 pop     rbp
.text:000000000000AC9C                 pop     r12
.text:000000000000AC9E                 retn
.text:000000000000AC9E ; } // starts at ABD0
.text:000000000000AC9E check_halt_state_context_isra_20 endp
.text:000000000000AC9E
.text:000000000000AC9E ; ---------------------------------------------------------------------------
.text:000000000000AC9F                 align 20h
.text:000000000000ACA0
.text:000000000000ACA0 ; =============== S U B R O U T I N E =======================================
.text:000000000000ACA0
.text:000000000000ACA0
.text:000000000000ACA0 re_string_reconstruct proc near         ; CODE XREF: re_search_internal+5E6↓p
.text:000000000000ACA0                                         ; re_search_internal+115B↓p
.text:000000000000ACA0
.text:000000000000ACA0 var_78          = qword ptr -78h
.text:000000000000ACA0 var_6C          = dword ptr -6Ch
.text:000000000000ACA0 var_68          = qword ptr -68h
.text:000000000000ACA0 var_60          = qword ptr -60h
.text:000000000000ACA0 wc              = dword ptr -54h
.text:000000000000ACA0 var_50          = qword ptr -50h
.text:000000000000ACA0 var_46          = byte ptr -46h
.text:000000000000ACA0 var_40          = qword ptr -40h
.text:000000000000ACA0
.text:000000000000ACA0 ; __unwind {
.text:000000000000ACA0                 push    r15
.text:000000000000ACA2                 push    r14
.text:000000000000ACA4                 mov     r15, rsi
.text:000000000000ACA7                 push    r13
.text:000000000000ACA9                 push    r12
.text:000000000000ACAB                 mov     r10d, edx
.text:000000000000ACAE                 push    rbp
.text:000000000000ACAF                 push    rbx
.text:000000000000ACB0                 mov     rbp, rsi
.text:000000000000ACB3                 mov     rbx, rdi
.text:000000000000ACB6                 sub     rsp, 48h
.text:000000000000ACBA                 mov     rax, fs:28h
.text:000000000000ACC3                 mov     [rsp+78h+var_40], rax
.text:000000000000ACC8                 xor     eax, eax
.text:000000000000ACCA                 mov     rax, [rdi+28h]
.text:000000000000ACCE                 sub     rbp, rax
.text:000000000000ACD1                 cmp     rax, rsi
.text:000000000000ACD4                 jle     short loc_AD36
.text:000000000000ACD6                 cmp     dword ptr [rdi+90h], 1
.text:000000000000ACDD                 jg      loc_AE10
.text:000000000000ACE3
.text:000000000000ACE3 loc_ACE3:                               ; CODE XREF: re_string_reconstruct+178↓j
.text:000000000000ACE3                 mov     rax, [rbx+50h]
.text:000000000000ACE7                 mov     qword ptr [rbx+30h], 0
.text:000000000000ACEF                 mov     rbp, r15
.text:000000000000ACF2                 mov     qword ptr [rbx+28h], 0
.text:000000000000ACFA                 mov     qword ptr [rbx+38h], 0
.text:000000000000AD02                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000AD09                 mov     [rbx+58h], rax
.text:000000000000AD0D                 mov     rax, [rbx+60h]
.text:000000000000AD11                 mov     [rbx+68h], rax
.text:000000000000AD15                 mov     eax, r10d
.text:000000000000AD18                 and     eax, 1
.text:000000000000AD1B                 cmp     eax, 1
.text:000000000000AD1E                 sbb     eax, eax
.text:000000000000AD20                 and     eax, 2
.text:000000000000AD23                 add     eax, 4
.text:000000000000AD26                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000AD2D                 mov     [rbx+70h], eax
.text:000000000000AD30                 jz      loc_AE00
.text:000000000000AD36
.text:000000000000AD36 loc_AD36:                               ; CODE XREF: re_string_reconstruct+34↑j
.text:000000000000AD36                                         ; re_string_reconstruct+167↓j
.text:000000000000AD36                 test    rbp, rbp
.text:000000000000AD39                 jz      short loc_AD9E
.text:000000000000AD3B                 mov     rax, [rbx+38h]
.text:000000000000AD3F                 movzx   edx, byte ptr [rbx+8Ch]
.text:000000000000AD46                 mov     r8, [rbx+30h]
.text:000000000000AD4A                 cmp     rax, rbp
.text:000000000000AD4D                 jle     loc_AE70
.text:000000000000AD53                 test    dl, dl
.text:000000000000AD55                 jnz     loc_AF68
.text:000000000000AD5B                 lea     rsi, [rbp-1]
.text:000000000000AD5F                 mov     edx, r10d
.text:000000000000AD62                 mov     rdi, rbx
.text:000000000000AD65                 mov     [rsp+78h+var_78], r8
.text:000000000000AD69                 call    re_string_context_at
.text:000000000000AD6E                 mov     r8, [rsp+78h+var_78]
.text:000000000000AD72                 mov     [rbx+70h], eax
.text:000000000000AD75                 sub     r8, rbp
.text:000000000000AD78                 cmp     dword ptr [rbx+90h], 1
.text:000000000000AD7F                 jg      loc_AE20
.text:000000000000AD85
.text:000000000000AD85 loc_AD85:                               ; CODE XREF: re_string_reconstruct+19C↓j
.text:000000000000AD85                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000AD8C                 jnz     loc_B130
.text:000000000000AD92                 sub     [rbx+38h], rbp
.text:000000000000AD96                 mov     [rbx+30h], r8
.text:000000000000AD9A
.text:000000000000AD9A loc_AD9A:                               ; CODE XREF: re_string_reconstruct+47E↓j
.text:000000000000AD9A                                         ; re_string_reconstruct+6F4↓j
.text:000000000000AD9A                 add     [rbx+8], rbp
.text:000000000000AD9E
.text:000000000000AD9E loc_AD9E:                               ; CODE XREF: re_string_reconstruct+99↑j
.text:000000000000AD9E                                         ; re_string_reconstruct+484↓j
.text:000000000000AD9E                 mov     rax, [rbx+58h]
.text:000000000000ADA2                 sub     [rbx+68h], rbp
.text:000000000000ADA6                 mov     [rbx+28h], r15
.text:000000000000ADAA                 sub     rax, rbp
.text:000000000000ADAD                 cmp     dword ptr [rbx+90h], 1
.text:000000000000ADB4                 mov     [rbx+58h], rax
.text:000000000000ADB8                 jle     loc_AE58
.text:000000000000ADBE                 cmp     byte ptr [rbx+88h], 0
.text:000000000000ADC5                 mov     rdi, rbx
.text:000000000000ADC8                 jz      short loc_AE48
.text:000000000000ADCA                 call    build_wcs_upper_buffer
.text:000000000000ADCF                 test    eax, eax
.text:000000000000ADD1                 jnz     short loc_ADDD
.text:000000000000ADD3
.text:000000000000ADD3 loc_ADD3:                               ; CODE XREF: re_string_reconstruct+1AD↓j
.text:000000000000ADD3                                         ; re_string_reconstruct+1C9↓j ...
.text:000000000000ADD3                 mov     qword ptr [rbx+48h], 0
.text:000000000000ADDB                 xor     eax, eax
.text:000000000000ADDD
.text:000000000000ADDD loc_ADDD:                               ; CODE XREF: re_string_reconstruct+131↑j
.text:000000000000ADDD                 mov     rcx, [rsp+78h+var_40]
.text:000000000000ADE2                 xor     rcx, fs:28h
.text:000000000000ADEB                 jnz     loc_B43A
.text:000000000000ADF1                 add     rsp, 48h
.text:000000000000ADF5                 pop     rbx
.text:000000000000ADF6                 pop     rbp
.text:000000000000ADF7                 pop     r12
.text:000000000000ADF9                 pop     r13
.text:000000000000ADFB                 pop     r14
.text:000000000000ADFD                 pop     r15
.text:000000000000ADFF                 retn
.text:000000000000AE00 ; ---------------------------------------------------------------------------
.text:000000000000AE00
.text:000000000000AE00 loc_AE00:                               ; CODE XREF: re_string_reconstruct+90↑j
.text:000000000000AE00                 mov     rax, [rbx]
.text:000000000000AE03                 mov     [rbx+8], rax
.text:000000000000AE07                 jmp     loc_AD36
.text:000000000000AE07 ; ---------------------------------------------------------------------------
.text:000000000000AE0C                 align 10h
.text:000000000000AE10
.text:000000000000AE10 loc_AE10:                               ; CODE XREF: re_string_reconstruct+3D↑j
.text:000000000000AE10                 mov     qword ptr [rdi+20h], 0
.text:000000000000AE18                 jmp     loc_ACE3
.text:000000000000AE18 ; ---------------------------------------------------------------------------
.text:000000000000AE1D                 align 20h
.text:000000000000AE20
.text:000000000000AE20 loc_AE20:                               ; CODE XREF: re_string_reconstruct+DF↑j
.text:000000000000AE20                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000AE24                 lea     rdx, ds:0[r8*4] ; n
.text:000000000000AE2C                 lea     rsi, [rdi+rbp*4] ; src
.text:000000000000AE30                 call    _memmove
.text:000000000000AE35                 mov     r8, [rbx+30h]
.text:000000000000AE39                 sub     r8, rbp
.text:000000000000AE3C                 jmp     loc_AD85
.text:000000000000AE3C ; ---------------------------------------------------------------------------
.text:000000000000AE41                 align 8
.text:000000000000AE48
.text:000000000000AE48 loc_AE48:                               ; CODE XREF: re_string_reconstruct+128↑j
.text:000000000000AE48                 call    build_wcs_buffer
.text:000000000000AE4D                 jmp     loc_ADD3
.text:000000000000AE4D ; ---------------------------------------------------------------------------
.text:000000000000AE52                 align 8
.text:000000000000AE58
.text:000000000000AE58 loc_AE58:                               ; CODE XREF: re_string_reconstruct+118↑j
.text:000000000000AE58                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000AE5F                 jnz     loc_B210
.text:000000000000AE65                 mov     [rbx+30h], rax
.text:000000000000AE69                 jmp     loc_ADD3
.text:000000000000AE69 ; ---------------------------------------------------------------------------
.text:000000000000AE6E                 align 10h
.text:000000000000AE70
.text:000000000000AE70 loc_AE70:                               ; CODE XREF: re_string_reconstruct+AD↑j
.text:000000000000AE70                 test    dl, dl
.text:000000000000AE72                 jnz     loc_B31D
.text:000000000000AE78
.text:000000000000AE78 loc_AE78:                               ; CODE XREF: re_string_reconstruct+6A0↓j
.text:000000000000AE78                 movsxd  rdx, dword ptr [rbx+90h]
.text:000000000000AE7F                 mov     qword ptr [rbx+30h], 0
.text:000000000000AE87                 mov     r11, [rbx+28h]
.text:000000000000AE8B                 cmp     edx, 1
.text:000000000000AE8E                 jle     loc_B278
.text:000000000000AE94                 cmp     byte ptr [rbx+89h], 0
.text:000000000000AE9B                 jnz     loc_B158
.text:000000000000AEA1
.text:000000000000AEA1 loc_AEA1:                               ; CODE XREF: re_string_reconstruct+4DC↓j
.text:000000000000AEA1                                         ; re_string_reconstruct+4EF↓j ...
.text:000000000000AEA1                 lea     r14, [r11+rax]
.text:000000000000AEA5                 cmp     r15, r14
.text:000000000000AEA8                 jle     loc_B2EF
.text:000000000000AEAE                 lea     rax, [rbx+20h]
.text:000000000000AEB2                 lea     r13, [rsp+78h+wc]
.text:000000000000AEB7                 mov     [rsp+78h+var_68], rax
.text:000000000000AEBC                 nop     dword ptr [rax+00h]
.text:000000000000AEC0
.text:000000000000AEC0 loc_AEC0:                               ; CODE XREF: re_string_reconstruct+270↓j
.text:000000000000AEC0                 mov     r12, [rbx+50h]
.text:000000000000AEC4                 mov     rsi, [rbx]
.text:000000000000AEC7                 mov     rdi, r13
.text:000000000000AECA                 mov     rax, [rbx+20h]
.text:000000000000AECE                 mov     rcx, [rsp+78h+var_68]
.text:000000000000AED3                 mov     [rsp+78h+var_6C], r10d
.text:000000000000AED8                 mov     [rsp+78h+var_78], r8
.text:000000000000AEDC                 sub     r12, r14
.text:000000000000AEDF                 add     rsi, r14
.text:000000000000AEE2                 mov     rdx, r12
.text:000000000000AEE5                 mov     [rsp+78h+var_60], rax
.text:000000000000AEEA                 call    rpl_mbrtowc
.text:000000000000AEEF                 lea     rcx, [rax-1]
.text:000000000000AEF3                 mov     edx, [rsp+78h+wc]
.text:000000000000AEF7                 mov     r8, [rsp+78h+var_78]
.text:000000000000AEFB                 mov     r10d, [rsp+78h+var_6C]
.text:000000000000AF00                 cmp     rcx, 0FFFFFFFFFFFFFFFCh
.text:000000000000AF04                 ja      loc_B345
.text:000000000000AF0A
.text:000000000000AF0A loc_AF0A:                               ; CODE XREF: re_string_reconstruct+6C5↓j
.text:000000000000AF0A                 add     r14, rax
.text:000000000000AF0D                 cmp     r15, r14
.text:000000000000AF10                 jg      short loc_AEC0
.text:000000000000AF12                 sub     r14, r15
.text:000000000000AF15                 cmp     edx, 0FFFFFFFFh
.text:000000000000AF18                 mov     r12, r14
.text:000000000000AF1B                 mov     [rbx+30h], r14
.text:000000000000AF1F                 jz      loc_B2F9
.text:000000000000AF25
.text:000000000000AF25 loc_AF25:                               ; CODE XREF: re_string_reconstruct+73A↓j
.text:000000000000AF25                 cmp     byte ptr [rbx+8Eh], 0
.text:000000000000AF2C                 jnz     loc_B399
.text:000000000000AF32
.text:000000000000AF32 loc_AF32:                               ; CODE XREF: re_string_reconstruct+70D↓j
.text:000000000000AF32                 xor     eax, eax
.text:000000000000AF34                 cmp     edx, 0Ah
.text:000000000000AF37                 jnz     short loc_AF47
.text:000000000000AF39                 xor     eax, eax
.text:000000000000AF3B                 cmp     byte ptr [rbx+8Dh], 0
.text:000000000000AF42                 setnz   al
.text:000000000000AF45                 add     eax, eax
.text:000000000000AF47
.text:000000000000AF47 loc_AF47:                               ; CODE XREF: re_string_reconstruct+297↑j
.text:000000000000AF47                                         ; re_string_reconstruct+718↓j
.text:000000000000AF47                 mov     [rbx+70h], eax
.text:000000000000AF4A
.text:000000000000AF4A loc_AF4A:                               ; CODE XREF: re_string_reconstruct+66B↓j
.text:000000000000AF4A                 cmp     r12, 0
.text:000000000000AF4E                 jnz     loc_B36A
.text:000000000000AF54
.text:000000000000AF54 loc_AF54:                               ; CODE XREF: re_string_reconstruct+75D↓j
.text:000000000000AF54                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000AF5B                 mov     [rbx+38h], r12
.text:000000000000AF5F                 jmp     loc_B11C
.text:000000000000AF5F ; ---------------------------------------------------------------------------
.text:000000000000AF64                 align 8
.text:000000000000AF68
.text:000000000000AF68 loc_AF68:                               ; CODE XREF: re_string_reconstruct+B5↑j
.text:000000000000AF68                 mov     r14, [rbx+18h]
.text:000000000000AF6C                 mov     rcx, r8
.text:000000000000AF6F                 xor     esi, esi
.text:000000000000AF71                 jmp     short loc_AF83
.text:000000000000AF71 ; ---------------------------------------------------------------------------
.text:000000000000AF73                 align 8
.text:000000000000AF78
.text:000000000000AF78 loc_AF78:                               ; CODE XREF: re_string_reconstruct+2FE↓j
.text:000000000000AF78                 jge     short loc_AFB3
.text:000000000000AF7A                 lea     rsi, [rax+1]
.text:000000000000AF7E
.text:000000000000AF7E loc_AF7E:                               ; CODE XREF: re_string_reconstruct+303↓j
.text:000000000000AF7E                 cmp     rsi, rcx
.text:000000000000AF81                 jge     short loc_AFA8
.text:000000000000AF83
.text:000000000000AF83 loc_AF83:                               ; CODE XREF: re_string_reconstruct+2D1↑j
.text:000000000000AF83                 lea     rdx, [rsi+rcx]
.text:000000000000AF87                 mov     rax, rdx
.text:000000000000AF8A                 shr     rax, 3Fh
.text:000000000000AF8E                 add     rax, rdx
.text:000000000000AF91                 sar     rax, 1
.text:000000000000AF94                 mov     rdx, [r14+rax*8]
.text:000000000000AF98                 mov     r12, rax
.text:000000000000AF9B                 cmp     rdx, rbp
.text:000000000000AF9E                 jle     short loc_AF78
.text:000000000000AFA0                 mov     rcx, rax
.text:000000000000AFA3                 jmp     short loc_AF7E
.text:000000000000AFA3 ; ---------------------------------------------------------------------------
.text:000000000000AFA5                 align 8
.text:000000000000AFA8
.text:000000000000AFA8 loc_AFA8:                               ; CODE XREF: re_string_reconstruct+2E1↑j
.text:000000000000AFA8                 lea     r12, [rax+1]
.text:000000000000AFAC                 cmp     rdx, rbp
.text:000000000000AFAF                 cmovge  r12, rax
.text:000000000000AFB3
.text:000000000000AFB3 loc_AFB3:                               ; CODE XREF: re_string_reconstruct:loc_AF78↑j
.text:000000000000AFB3                 lea     r13, [r12-1]
.text:000000000000AFB8                 mov     edx, r10d
.text:000000000000AFBB                 mov     rdi, rbx
.text:000000000000AFBE                 mov     [rsp+78h+var_78], r8
.text:000000000000AFC2                 mov     rsi, r13
.text:000000000000AFC5                 call    re_string_context_at
.text:000000000000AFCA                 cmp     rbp, r12
.text:000000000000AFCD                 mov     [rbx+70h], eax
.text:000000000000AFD0                 mov     r8, [rsp+78h+var_78]
.text:000000000000AFD4                 jnz     loc_B058
.text:000000000000AFDA                 cmp     rbp, r8
.text:000000000000AFDD                 jge     short loc_B058
.text:000000000000AFDF                 cmp     [r14+r12*8], rbp
.text:000000000000AFE3                 jnz     short loc_B058
.text:000000000000AFE5                 mov     rdi, [rbx+10h]  ; dest
.text:000000000000AFE9                 sub     r8, rbp
.text:000000000000AFEC                 lea     rdx, ds:0[r8*4] ; n
.text:000000000000AFF4                 lea     rsi, [rdi+rbp*4] ; src
.text:000000000000AFF8                 call    _memmove
.text:000000000000AFFD                 mov     rdi, [rbx+8]    ; dest
.text:000000000000B001                 mov     rdx, [rbx+30h]
.text:000000000000B005                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000B009                 sub     rdx, rbp        ; n
.text:000000000000B00C                 call    _memmove
.text:000000000000B011                 mov     rax, [rbx+30h]
.text:000000000000B015                 sub     [rbx+38h], rbp
.text:000000000000B019                 sub     rax, rbp
.text:000000000000B01C                 test    rax, rax
.text:000000000000B01F                 mov     [rbx+30h], rax
.text:000000000000B023                 jle     short loc_B048
.text:000000000000B025                 mov     rcx, [rbx+18h]
.text:000000000000B029                 xor     eax, eax
.text:000000000000B02B                 lea     rsi, [rcx+rbp*8]
.text:000000000000B02F                 nop
.text:000000000000B030
.text:000000000000B030 loc_B030:                               ; CODE XREF: re_string_reconstruct+3A3↓j
.text:000000000000B030                 mov     rdx, [rsi+rax*8]
.text:000000000000B034                 sub     rdx, rbp
.text:000000000000B037                 mov     [rcx+rax*8], rdx
.text:000000000000B03B                 add     rax, 1
.text:000000000000B03F                 cmp     [rbx+30h], rax
.text:000000000000B043                 jg      short loc_B030
.text:000000000000B045                 nop     dword ptr [rax]
.text:000000000000B048
.text:000000000000B048 loc_B048:                               ; CODE XREF: re_string_reconstruct+383↑j
.text:000000000000B048                                         ; re_string_reconstruct+633↓j
.text:000000000000B048                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000B04F                 jmp     loc_B11C
.text:000000000000B04F ; ---------------------------------------------------------------------------
.text:000000000000B054                 align 8
.text:000000000000B058
.text:000000000000B058 loc_B058:                               ; CODE XREF: re_string_reconstruct+334↑j
.text:000000000000B058                                         ; re_string_reconstruct+33D↑j ...
.text:000000000000B058                 mov     rax, [rbx+50h]
.text:000000000000B05C                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000B063                 add     rax, rbp
.text:000000000000B066                 sub     rax, r15
.text:000000000000B069                 mov     [rbx+58h], rax
.text:000000000000B06D                 mov     rax, [rbx+60h]
.text:000000000000B071                 add     rax, rbp
.text:000000000000B074                 sub     rax, r15
.text:000000000000B077                 test    r12, r12
.text:000000000000B07A                 mov     [rbx+68h], rax
.text:000000000000B07E                 jle     short loc_B0A3
.text:000000000000B080                 cmp     [r14+r12*8-8], rbp
.text:000000000000B085                 jz      short loc_B09B
.text:000000000000B087                 jmp     short loc_B0A3
.text:000000000000B087 ; ---------------------------------------------------------------------------
.text:000000000000B089                 align 10h
.text:000000000000B090
.text:000000000000B090 loc_B090:                               ; CODE XREF: re_string_reconstruct+401↓j
.text:000000000000B090                 cmp     [r14+r13*8-8], rbp
.text:000000000000B095                 jnz     short loc_B0A3
.text:000000000000B097                 sub     r13, 1
.text:000000000000B09B
.text:000000000000B09B loc_B09B:                               ; CODE XREF: re_string_reconstruct+3E5↑j
.text:000000000000B09B                 test    r13, r13
.text:000000000000B09E                 mov     r12, r13
.text:000000000000B0A1                 jnz     short loc_B090
.text:000000000000B0A3
.text:000000000000B0A3 loc_B0A3:                               ; CODE XREF: re_string_reconstruct+3DE↑j
.text:000000000000B0A3                                         ; re_string_reconstruct+3E7↑j ...
.text:000000000000B0A3                 cmp     r12, r8
.text:000000000000B0A6                 jge     loc_B2D8
.text:000000000000B0AC                 mov     rax, [rbx+10h]
.text:000000000000B0B0                 jmp     short loc_B0C5
.text:000000000000B0B0 ; ---------------------------------------------------------------------------
.text:000000000000B0B2                 align 8
.text:000000000000B0B8
.text:000000000000B0B8 loc_B0B8:                               ; CODE XREF: re_string_reconstruct+42A↓j
.text:000000000000B0B8                 add     r12, 1
.text:000000000000B0BC                 cmp     r12, r8
.text:000000000000B0BF                 jz      loc_B2E0
.text:000000000000B0C5
.text:000000000000B0C5 loc_B0C5:                               ; CODE XREF: re_string_reconstruct+410↑j
.text:000000000000B0C5                 cmp     dword ptr [rax+r12*4], 0FFFFFFFFh
.text:000000000000B0CA                 jz      short loc_B0B8
.text:000000000000B0CC
.text:000000000000B0CC loc_B0CC:                               ; CODE XREF: re_string_reconstruct:loc_B2D8↓j
.text:000000000000B0CC                 mov     rdx, [r14+r12*8]
.text:000000000000B0D0                 sub     rdx, rbp        ; n
.text:000000000000B0D3                 cmp     rdx, 0
.text:000000000000B0D7                 mov     [rbx+30h], rdx
.text:000000000000B0DB                 jz      short loc_B111
.text:000000000000B0DD                 jle     short loc_B0FF
.text:000000000000B0DF                 mov     rax, [rbx+10h]
.text:000000000000B0E3                 lea     rcx, [rax+rdx*4]
.text:000000000000B0E7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B0F0
.text:000000000000B0F0 loc_B0F0:                               ; CODE XREF: re_string_reconstruct+45D↓j
.text:000000000000B0F0                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000B0F6                 add     rax, 4
.text:000000000000B0FA                 cmp     rcx, rax
.text:000000000000B0FD                 jnz     short loc_B0F0
.text:000000000000B0FF
.text:000000000000B0FF loc_B0FF:                               ; CODE XREF: re_string_reconstruct+43D↑j
.text:000000000000B0FF                 mov     rdi, [rbx+8]    ; s
.text:000000000000B103                 mov     esi, 0FFh       ; c
.text:000000000000B108                 call    _memset
.text:000000000000B10D                 mov     rdx, [rbx+30h]
.text:000000000000B111
.text:000000000000B111 loc_B111:                               ; CODE XREF: re_string_reconstruct+43B↑j
.text:000000000000B111                                         ; re_string_reconstruct+64A↓j
.text:000000000000B111                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000B118                 mov     [rbx+38h], rdx
.text:000000000000B11C
.text:000000000000B11C loc_B11C:                               ; CODE XREF: re_string_reconstruct+2BF↑j
.text:000000000000B11C                                         ; re_string_reconstruct+3AF↑j ...
.text:000000000000B11C                 test    al, al
.text:000000000000B11E                 jz      loc_AD9A
.text:000000000000B124                 jmp     loc_AD9E
.text:000000000000B124 ; ---------------------------------------------------------------------------
.text:000000000000B129                 align 10h
.text:000000000000B130
.text:000000000000B130 loc_B130:                               ; CODE XREF: re_string_reconstruct+EC↑j
.text:000000000000B130                 mov     rdi, [rbx+8]    ; dest
.text:000000000000B134                 mov     rdx, r8         ; n
.text:000000000000B137                 lea     rsi, [rdi+rbp]  ; src
.text:000000000000B13B                 call    _memmove
.text:000000000000B140                 movzx   eax, byte ptr [rbx+8Bh]
.text:000000000000B147                 sub     [rbx+30h], rbp
.text:000000000000B14B                 sub     [rbx+38h], rbp
.text:000000000000B14F                 jmp     short loc_B11C
.text:000000000000B14F ; ---------------------------------------------------------------------------
.text:000000000000B151                 align 8
.text:000000000000B158
.text:000000000000B158 loc_B158:                               ; CODE XREF: re_string_reconstruct+1FB↑j
.text:000000000000B158                 mov     rcx, [rbx]
.text:000000000000B15B                 mov     rdi, rbp
.text:000000000000B15E                 sub     rdi, rdx
.text:000000000000B161                 mov     rdx, rdi
.text:000000000000B164                 lea     r12, [rcx+r11]
.text:000000000000B168                 add     rdx, r12
.text:000000000000B16B                 lea     rsi, [r12+rbp-1]
.text:000000000000B170                 cmp     rcx, rdx
.text:000000000000B173                 cmovb   rcx, rdx
.text:000000000000B177                 cmp     rcx, rsi
.text:000000000000B17A                 jbe     short loc_B195
.text:000000000000B17C                 jmp     loc_AEA1
.text:000000000000B17C ; ---------------------------------------------------------------------------
.text:000000000000B181                 align 8
.text:000000000000B188
.text:000000000000B188 loc_B188:                               ; CODE XREF: re_string_reconstruct+4FE↓j
.text:000000000000B188                 sub     rsi, 1
.text:000000000000B18C                 cmp     rcx, rsi
.text:000000000000B18F                 ja      loc_AEA1
.text:000000000000B195
.text:000000000000B195 loc_B195:                               ; CODE XREF: re_string_reconstruct+4DA↑j
.text:000000000000B195                 movzx   edx, byte ptr [rsi]
.text:000000000000B198                 and     edx, 0FFFFFFC0h
.text:000000000000B19B                 cmp     dl, 80h
.text:000000000000B19E                 jz      short loc_B188
.text:000000000000B1A0                 mov     rdx, [rbx+58h]
.text:000000000000B1A4                 mov     rcx, [rbx+78h]
.text:000000000000B1A8                 mov     r14, rsi
.text:000000000000B1AB                 add     rdx, r12
.text:000000000000B1AE                 sub     rdx, rsi
.text:000000000000B1B1                 test    rcx, rcx
.text:000000000000B1B4                 jnz     loc_B402
.text:000000000000B1BA
.text:000000000000B1BA loc_B1BA:                               ; CODE XREF: re_string_reconstruct+795↓j
.text:000000000000B1BA                 lea     r13, [rsp+78h+wc]
.text:000000000000B1BF                 add     r12, rbp
.text:000000000000B1C2                 lea     rcx, [rsp+78h+var_50]
.text:000000000000B1C7                 sub     r12, r14
.text:000000000000B1CA                 mov     [rsp+78h+var_6C], r10d
.text:000000000000B1CF                 mov     [rsp+78h+var_78], r8
.text:000000000000B1D3                 mov     rdi, r13
.text:000000000000B1D6                 mov     [rsp+78h+var_50], 0
.text:000000000000B1DF                 call    rpl_mbrtowc
.text:000000000000B1E4                 cmp     r12, rax
.text:000000000000B1E7                 mov     r8, [rsp+78h+var_78]
.text:000000000000B1EB                 mov     r10d, [rsp+78h+var_6C]
.text:000000000000B1F0                 ja      short loc_B1FC
.text:000000000000B1F2                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000B1F6                 jbe     loc_B3C1
.text:000000000000B1FC
.text:000000000000B1FC loc_B1FC:                               ; CODE XREF: re_string_reconstruct+550↑j
.text:000000000000B1FC                                         ; re_string_reconstruct+740↓j
.text:000000000000B1FC                 mov     r11, [rbx+28h]
.text:000000000000B200                 mov     rax, [rbx+38h]
.text:000000000000B204                 jmp     loc_AEA1
.text:000000000000B204 ; ---------------------------------------------------------------------------
.text:000000000000B209                 align 10h
.text:000000000000B210
.text:000000000000B210 loc_B210:                               ; CODE XREF: re_string_reconstruct+1BF↑j
.text:000000000000B210                 cmp     byte ptr [rbx+88h], 0
.text:000000000000B217                 jnz     loc_B310
.text:000000000000B21D                 mov     rcx, [rbx+78h]
.text:000000000000B221                 test    rcx, rcx
.text:000000000000B224                 jz      loc_ADD3
.text:000000000000B22A                 cmp     [rbx+40h], rax
.text:000000000000B22E                 mov     rdx, [rbx+30h]
.text:000000000000B232                 cmovle  rax, [rbx+40h]
.text:000000000000B237                 cmp     rax, rdx
.text:000000000000B23A                 jg      short loc_B248
.text:000000000000B23C                 jmp     short loc_B268
.text:000000000000B23C ; ---------------------------------------------------------------------------
.text:000000000000B23E                 align 20h
.text:000000000000B240
.text:000000000000B240 loc_B240:                               ; CODE XREF: re_string_reconstruct+5C6↓j
.text:000000000000B240                 mov     r15, [rbx+28h]
.text:000000000000B244                 mov     rcx, [rbx+78h]
.text:000000000000B248
.text:000000000000B248 loc_B248:                               ; CODE XREF: re_string_reconstruct+59A↑j
.text:000000000000B248                 mov     rsi, [rbx]
.text:000000000000B24B                 add     rsi, rdx
.text:000000000000B24E                 movzx   esi, byte ptr [rsi+r15]
.text:000000000000B253                 movzx   esi, byte ptr [rcx+rsi]
.text:000000000000B257                 mov     rcx, [rbx+8]
.text:000000000000B25B                 mov     [rcx+rdx], sil
.text:000000000000B25F                 add     rdx, 1
.text:000000000000B263                 cmp     rax, rdx
.text:000000000000B266                 jnz     short loc_B240
.text:000000000000B268
.text:000000000000B268 loc_B268:                               ; CODE XREF: re_string_reconstruct+59C↑j
.text:000000000000B268                 mov     [rbx+30h], rdx
.text:000000000000B26C                 mov     [rbx+38h], rdx
.text:000000000000B270                 jmp     loc_ADD3
.text:000000000000B270 ; ---------------------------------------------------------------------------
.text:000000000000B275                 align 8
.text:000000000000B278
.text:000000000000B278 loc_B278:                               ; CODE XREF: re_string_reconstruct+1EE↑j
.text:000000000000B278                 mov     rax, [rbx]
.text:000000000000B27B                 mov     rdx, [rbx+78h]
.text:000000000000B27F                 add     rax, rbp
.text:000000000000B282                 test    rdx, rdx
.text:000000000000B285                 movzx   eax, byte ptr [r11+rax-1]
.text:000000000000B28B                 mov     qword ptr [rbx+38h], 0
.text:000000000000B293                 jz      short loc_B299
.text:000000000000B295                 movzx   eax, byte ptr [rdx+rax]
.text:000000000000B299
.text:000000000000B299 loc_B299:                               ; CODE XREF: re_string_reconstruct+5F3↑j
.text:000000000000B299                 mov     rcx, [rbx+80h]
.text:000000000000B2A0                 movzx   edx, al
.text:000000000000B2A3                 sar     rdx, 6
.text:000000000000B2A7                 mov     rcx, [rcx+rdx*8]
.text:000000000000B2AB                 mov     edx, 1
.text:000000000000B2B0                 bt      rcx, rax
.text:000000000000B2B4                 jb      short loc_B2D0
.text:000000000000B2B6                 xor     edx, edx
.text:000000000000B2B8                 cmp     al, 0Ah
.text:000000000000B2BA                 jnz     short loc_B2D0
.text:000000000000B2BC                 xor     edx, edx
.text:000000000000B2BE                 cmp     byte ptr [rbx+8Dh], 0
.text:000000000000B2C5                 setnz   dl
.text:000000000000B2C8                 add     edx, edx
.text:000000000000B2CA                 nop     word ptr [rax+rax+00h]
.text:000000000000B2D0
.text:000000000000B2D0 loc_B2D0:                               ; CODE XREF: re_string_reconstruct+614↑j
.text:000000000000B2D0                                         ; re_string_reconstruct+61A↑j
.text:000000000000B2D0                 mov     [rbx+70h], edx
.text:000000000000B2D3                 jmp     loc_B048
.text:000000000000B2D8 ; ---------------------------------------------------------------------------
.text:000000000000B2D8
.text:000000000000B2D8 loc_B2D8:                               ; CODE XREF: re_string_reconstruct+406↑j
.text:000000000000B2D8                 jnz     loc_B0CC
.text:000000000000B2DE                 xchg    ax, ax
.text:000000000000B2E0
.text:000000000000B2E0 loc_B2E0:                               ; CODE XREF: re_string_reconstruct+41F↑j
.text:000000000000B2E0                 mov     qword ptr [rbx+30h], 0
.text:000000000000B2E8                 xor     edx, edx
.text:000000000000B2EA                 jmp     loc_B111
.text:000000000000B2EF ; ---------------------------------------------------------------------------
.text:000000000000B2EF
.text:000000000000B2EF loc_B2EF:                               ; CODE XREF: re_string_reconstruct+208↑j
.text:000000000000B2EF                 sub     r14, r15
.text:000000000000B2F2                 mov     r12, r14
.text:000000000000B2F5                 mov     [rbx+30h], r14
.text:000000000000B2F9
.text:000000000000B2F9 loc_B2F9:                               ; CODE XREF: re_string_reconstruct+27F↑j
.text:000000000000B2F9                 lea     rsi, [r8-1]
.text:000000000000B2FD                 mov     edx, r10d
.text:000000000000B300                 mov     rdi, rbx
.text:000000000000B303                 call    re_string_context_at
.text:000000000000B308                 mov     [rbx+70h], eax
.text:000000000000B30B                 jmp     loc_AF4A
.text:000000000000B310 ; ---------------------------------------------------------------------------
.text:000000000000B310
.text:000000000000B310 loc_B310:                               ; CODE XREF: re_string_reconstruct+577↑j
.text:000000000000B310                 mov     rdi, rbx
.text:000000000000B313                 call    build_upper_buffer
.text:000000000000B318                 jmp     loc_ADD3
.text:000000000000B31D ; ---------------------------------------------------------------------------
.text:000000000000B31D
.text:000000000000B31D loc_B31D:                               ; CODE XREF: re_string_reconstruct+1D2↑j
.text:000000000000B31D                 mov     rdx, [rbx+50h]
.text:000000000000B321                 mov     byte ptr [rbx+8Ch], 0
.text:000000000000B328                 add     rdx, rbp
.text:000000000000B32B                 sub     rdx, r15
.text:000000000000B32E                 mov     [rbx+58h], rdx
.text:000000000000B332                 mov     rdx, [rbx+60h]
.text:000000000000B336                 add     rdx, rbp
.text:000000000000B339                 sub     rdx, r15
.text:000000000000B33C                 mov     [rbx+68h], rdx
.text:000000000000B340                 jmp     loc_AE78
.text:000000000000B345 ; ---------------------------------------------------------------------------
.text:000000000000B345
.text:000000000000B345 loc_B345:                               ; CODE XREF: re_string_reconstruct+264↑j
.text:000000000000B345                 test    rax, rax
.text:000000000000B348                 jz      short loc_B3BD
.text:000000000000B34A                 test    r12, r12
.text:000000000000B34D                 jz      short loc_B3BD
.text:000000000000B34F                 mov     rax, [rbx]
.text:000000000000B352                 movzx   edx, byte ptr [rax+r14]
.text:000000000000B357
.text:000000000000B357 loc_B357:                               ; CODE XREF: re_string_reconstruct+71F↓j
.text:000000000000B357                 mov     rax, [rsp+78h+var_60]
.text:000000000000B35C                 mov     [rbx+20h], rax
.text:000000000000B360                 mov     eax, 1
.text:000000000000B365                 jmp     loc_AF0A
.text:000000000000B36A ; ---------------------------------------------------------------------------
.text:000000000000B36A
.text:000000000000B36A loc_B36A:                               ; CODE XREF: re_string_reconstruct+2AE↑j
.text:000000000000B36A                 jle     short loc_B387
.text:000000000000B36C                 mov     rax, [rbx+10h]
.text:000000000000B370                 lea     rdx, [rax+r12*4]
.text:000000000000B374                 nop     dword ptr [rax+00h]
.text:000000000000B378
.text:000000000000B378 loc_B378:                               ; CODE XREF: re_string_reconstruct+6E5↓j
.text:000000000000B378                 mov     dword ptr [rax], 0FFFFFFFFh
.text:000000000000B37E                 add     rax, 4
.text:000000000000B382                 cmp     rdx, rax
.text:000000000000B385                 jnz     short loc_B378
.text:000000000000B387
.text:000000000000B387 loc_B387:                               ; CODE XREF: re_string_reconstruct:loc_B36A↑j
.text:000000000000B387                 cmp     byte ptr [rbx+8Bh], 0
.text:000000000000B38E                 jnz     short loc_B3E8
.text:000000000000B390                 mov     [rbx+38h], r12
.text:000000000000B394                 jmp     loc_AD9A
.text:000000000000B399 ; ---------------------------------------------------------------------------
.text:000000000000B399
.text:000000000000B399 loc_B399:                               ; CODE XREF: re_string_reconstruct+28C↑j
.text:000000000000B399                 mov     edi, edx        ; wc
.text:000000000000B39B                 mov     dword ptr [rsp+78h+var_78], edx
.text:000000000000B39E                 call    _iswalnum
.text:000000000000B3A3                 test    eax, eax
.text:000000000000B3A5                 jnz     short loc_B3B3
.text:000000000000B3A7                 mov     edx, dword ptr [rsp+78h+var_78]
.text:000000000000B3AA                 cmp     edx, 5Fh ; '_'
.text:000000000000B3AD                 jnz     loc_AF32
.text:000000000000B3B3
.text:000000000000B3B3 loc_B3B3:                               ; CODE XREF: re_string_reconstruct+705↑j
.text:000000000000B3B3                 mov     eax, 1
.text:000000000000B3B8                 jmp     loc_AF47
.text:000000000000B3BD ; ---------------------------------------------------------------------------
.text:000000000000B3BD
.text:000000000000B3BD loc_B3BD:                               ; CODE XREF: re_string_reconstruct+6A8↑j
.text:000000000000B3BD                                         ; re_string_reconstruct+6AD↑j
.text:000000000000B3BD                 xor     edx, edx
.text:000000000000B3BF                 jmp     short loc_B357
.text:000000000000B3C1 ; ---------------------------------------------------------------------------
.text:000000000000B3C1
.text:000000000000B3C1 loc_B3C1:                               ; CODE XREF: re_string_reconstruct+556↑j
.text:000000000000B3C1                 mov     edx, [rsp+78h+wc]
.text:000000000000B3C5                 sub     rax, r12
.text:000000000000B3C8                 mov     qword ptr [rbx+20h], 0
.text:000000000000B3D0                 mov     r12, rax
.text:000000000000B3D3                 mov     [rbx+30h], rax
.text:000000000000B3D7                 cmp     edx, 0FFFFFFFFh
.text:000000000000B3DA                 jnz     loc_AF25
.text:000000000000B3E0                 jmp     loc_B1FC
.text:000000000000B3E0 ; ---------------------------------------------------------------------------
.text:000000000000B3E5                 align 8
.text:000000000000B3E8
.text:000000000000B3E8 loc_B3E8:                               ; CODE XREF: re_string_reconstruct+6EE↑j
.text:000000000000B3E8                 mov     rdi, [rbx+8]    ; s
.text:000000000000B3EC                 mov     rdx, r12        ; n
.text:000000000000B3EF                 mov     esi, 0FFh       ; c
.text:000000000000B3F4                 call    _memset
.text:000000000000B3F9                 mov     r12, [rbx+30h]
.text:000000000000B3FD                 jmp     loc_AF54
.text:000000000000B402 ; ---------------------------------------------------------------------------
.text:000000000000B402
.text:000000000000B402 loc_B402:                               ; CODE XREF: re_string_reconstruct+514↑j
.text:000000000000B402                 cmp     rdx, 6
.text:000000000000B406                 mov     edi, 6
.text:000000000000B40B                 lea     r11, [rsp+78h+var_46]
.text:000000000000B410                 cmovle  rdi, rdx
.text:000000000000B414                 sub     edi, 1
.text:000000000000B417                 test    edi, edi
.text:000000000000B419                 movsxd  rax, edi
.text:000000000000B41C                 js      short loc_B432
.text:000000000000B41E
.text:000000000000B41E loc_B41E:                               ; CODE XREF: re_string_reconstruct+790↓j
.text:000000000000B41E                 movzx   edi, byte ptr [rsi+rax]
.text:000000000000B422                 movzx   edi, byte ptr [rcx+rdi]
.text:000000000000B426                 mov     [r11+rax], dil
.text:000000000000B42A                 sub     rax, 1
.text:000000000000B42E                 test    eax, eax
.text:000000000000B430                 jns     short loc_B41E
.text:000000000000B432
.text:000000000000B432 loc_B432:                               ; CODE XREF: re_string_reconstruct+77C↑j
.text:000000000000B432                 mov     rsi, r11
.text:000000000000B435                 jmp     loc_B1BA
.text:000000000000B43A ; ---------------------------------------------------------------------------
.text:000000000000B43A
.text:000000000000B43A loc_B43A:                               ; CODE XREF: re_string_reconstruct+14B↑j
.text:000000000000B43A                 call    ___stack_chk_fail
.text:000000000000B43A ; } // starts at ACA0
.text:000000000000B43A re_string_reconstruct endp
.text:000000000000B43A
.text:000000000000B43A ; ---------------------------------------------------------------------------
.text:000000000000B43F                 align 20h
.text:000000000000B440
.text:000000000000B440 ; =============== S U B R O U T I N E =======================================
.text:000000000000B440
.text:000000000000B440
.text:000000000000B440 _sub_epsilon_src_nodes proc near        ; CODE XREF: update_cur_sifted_state+44C↓p
.text:000000000000B440                                         ; update_cur_sifted_state+50A↓p ...
.text:000000000000B440
.text:000000000000B440 var_78          = qword ptr -78h
.text:000000000000B440 var_70          = qword ptr -70h
.text:000000000000B440 var_68          = qword ptr -68h
.text:000000000000B440 var_60          = qword ptr -60h
.text:000000000000B440 var_58          = xmmword ptr -58h
.text:000000000000B440 ptr             = qword ptr -48h
.text:000000000000B440 var_40          = qword ptr -40h
.text:000000000000B440
.text:000000000000B440 ; __unwind {
.text:000000000000B440                 push    r15
.text:000000000000B442                 push    r14
.text:000000000000B444                 mov     r14, rdx
.text:000000000000B447                 push    r13
.text:000000000000B449                 push    r12
.text:000000000000B44B                 lea     rdx, [rsi+rsi*2]
.text:000000000000B44F                 push    rbp
.text:000000000000B450                 push    rbx
.text:000000000000B451                 pxor    xmm0, xmm0
.text:000000000000B455                 sub     rsp, 48h
.text:000000000000B459                 mov     rax, fs:28h
.text:000000000000B462                 mov     [rsp+78h+var_40], rax
.text:000000000000B467                 xor     eax, eax
.text:000000000000B469                 mov     rax, [rdi+38h]
.text:000000000000B46D                 mov     [rsp+78h+ptr], 0
.text:000000000000B476                 movaps  [rsp+78h+var_58], xmm0
.text:000000000000B47B                 mov     [rsp+78h+var_68], rcx
.text:000000000000B480                 lea     rbp, [rax+rdx*8]
.text:000000000000B484                 mov     r10, [rbp+8]
.text:000000000000B488                 test    r10, r10
.text:000000000000B48B                 jle     loc_B672
.text:000000000000B491                 lea     rax, [rsp+78h+var_58]
.text:000000000000B496                 mov     r12, rdi
.text:000000000000B499                 mov     r13, rsi
.text:000000000000B49C                 xor     ebx, ebx
.text:000000000000B49E                 mov     [rsp+78h+var_60], rax
.text:000000000000B4A3                 jmp     short loc_B4FD
.text:000000000000B4A3 ; ---------------------------------------------------------------------------
.text:000000000000B4A5                 align 8
.text:000000000000B4A8
.text:000000000000B4A8 loc_B4A8:                               ; CODE XREF: _sub_epsilon_src_nodes+11B↓j
.text:000000000000B4A8                 test    rax, rax
.text:000000000000B4AB                 jnz     loc_B588
.text:000000000000B4B1                 mov     rdi, [r14+8]
.text:000000000000B4B5                 lea     rsi, [r14+10h]
.text:000000000000B4B9                 mov     rdx, r8
.text:000000000000B4BC                 call    re_node_set_contains_isra_3
.text:000000000000B4C1                 test    rax, rax
.text:000000000000B4C4                 jz      loc_B588
.text:000000000000B4CA
.text:000000000000B4CA loc_B4CA:                               ; CODE XREF: _sub_epsilon_src_nodes+139↓j
.text:000000000000B4CA                                         ; _sub_epsilon_src_nodes+182↓j
.text:000000000000B4CA                 mov     rdx, [r12+38h]
.text:000000000000B4CF                 mov     rsi, [rsp+78h+var_68]
.text:000000000000B4D4                 mov     rdi, [rsp+78h+var_60]
.text:000000000000B4D9                 add     rdx, r9
.text:000000000000B4DC                 call    re_node_set_add_intersect
.text:000000000000B4E1                 test    eax, eax
.text:000000000000B4E3                 jnz     loc_B660
.text:000000000000B4E9                 mov     r10, [rbp+8]
.text:000000000000B4ED                 nop     dword ptr [rax]
.text:000000000000B4F0
.text:000000000000B4F0 loc_B4F0:                               ; CODE XREF: _sub_epsilon_src_nodes+C8↓j
.text:000000000000B4F0                                         ; _sub_epsilon_src_nodes+D9↓j ...
.text:000000000000B4F0                 add     rbx, 1
.text:000000000000B4F4                 cmp     r10, rbx
.text:000000000000B4F7                 jle     loc_B5D0
.text:000000000000B4FD
.text:000000000000B4FD loc_B4FD:                               ; CODE XREF: _sub_epsilon_src_nodes+63↑j
.text:000000000000B4FD                 mov     rax, [rbp+10h]
.text:000000000000B501                 mov     rax, [rax+rbx*8]
.text:000000000000B505                 cmp     r13, rax
.text:000000000000B508                 jz      short loc_B4F0
.text:000000000000B50A                 mov     rdx, rax
.text:000000000000B50D                 shl     rdx, 4
.text:000000000000B511                 add     rdx, [r12]
.text:000000000000B515                 test    byte ptr [rdx+8], 8
.text:000000000000B519                 jz      short loc_B4F0
.text:000000000000B51B                 lea     r9, [rax+rax*2]
.text:000000000000B51F                 mov     rcx, [r12+28h]
.text:000000000000B524                 lea     r11, [rbp+10h]
.text:000000000000B528                 mov     rdi, r10
.text:000000000000B52B                 shl     r9, 3
.text:000000000000B52F                 mov     rsi, r11
.text:000000000000B532                 add     rcx, r9
.text:000000000000B535                 mov     r15, [rcx+10h]
.text:000000000000B539                 mov     [rsp+78h+var_70], rcx
.text:000000000000B53E                 mov     r8, [r15]
.text:000000000000B541                 mov     rdx, r8
.text:000000000000B544                 mov     [rsp+78h+var_78], r8
.text:000000000000B548                 call    re_node_set_contains_isra_3
.text:000000000000B54D                 mov     rcx, [rsp+78h+var_70]
.text:000000000000B552                 mov     r8, [rsp+78h+var_78]
.text:000000000000B556                 cmp     qword ptr [rcx+8], 1
.text:000000000000B55B                 jg      loc_B4A8
.text:000000000000B561                 test    rax, rax
.text:000000000000B564                 jnz     short loc_B4F0
.text:000000000000B566                 mov     rdi, [r14+8]
.text:000000000000B56A                 lea     rsi, [r14+10h]
.text:000000000000B56E                 mov     rdx, r8
.text:000000000000B571                 call    re_node_set_contains_isra_3
.text:000000000000B576                 test    rax, rax
.text:000000000000B579                 jnz     loc_B4CA
.text:000000000000B57F                 jmp     loc_B4F0
.text:000000000000B57F ; ---------------------------------------------------------------------------
.text:000000000000B584                 align 8
.text:000000000000B588
.text:000000000000B588 loc_B588:                               ; CODE XREF: _sub_epsilon_src_nodes+6B↑j
.text:000000000000B588                                         ; _sub_epsilon_src_nodes+84↑j
.text:000000000000B588                 mov     r15, [r15+8]
.text:000000000000B58C                 test    r15, r15
.text:000000000000B58F                 jle     loc_B4F0
.text:000000000000B595                 mov     rdx, r15
.text:000000000000B598                 mov     rsi, r11
.text:000000000000B59B                 mov     rdi, r10
.text:000000000000B59E                 call    re_node_set_contains_isra_3
.text:000000000000B5A3                 test    rax, rax
.text:000000000000B5A6                 jnz     loc_B4F0
.text:000000000000B5AC                 mov     rdi, [r14+8]
.text:000000000000B5B0                 lea     rsi, [r14+10h]
.text:000000000000B5B4                 call    re_node_set_contains_isra_3
.text:000000000000B5B9                 test    rax, rax
.text:000000000000B5BC                 jz      loc_B4F0
.text:000000000000B5C2                 jmp     loc_B4CA
.text:000000000000B5C2 ; ---------------------------------------------------------------------------
.text:000000000000B5C7                 align 10h
.text:000000000000B5D0
.text:000000000000B5D0 loc_B5D0:                               ; CODE XREF: _sub_epsilon_src_nodes+B7↑j
.text:000000000000B5D0                 xor     r9d, r9d
.text:000000000000B5D3                 test    r10, r10
.text:000000000000B5D6                 lea     r11, [rsp+78h+ptr]
.text:000000000000B5DB                 jle     short loc_B62C
.text:000000000000B5DD                 nop     dword ptr [rax]
.text:000000000000B5E0
.text:000000000000B5E0 loc_B5E0:                               ; CODE XREF: _sub_epsilon_src_nodes+1EA↓j
.text:000000000000B5E0                 mov     rax, [rbp+10h]
.text:000000000000B5E4                 mov     rdi, qword ptr [rsp+78h+var_58+8]
.text:000000000000B5E9                 mov     rsi, r11
.text:000000000000B5EC                 mov     r10, [rax+r9*8]
.text:000000000000B5F0                 mov     rdx, r10
.text:000000000000B5F3                 call    re_node_set_contains_isra_3
.text:000000000000B5F8                 test    rax, rax
.text:000000000000B5FB                 jnz     short loc_B622
.text:000000000000B5FD                 lea     rbx, [r14+10h]
.text:000000000000B601                 mov     rdi, [r14+8]
.text:000000000000B605                 mov     rsi, rbx
.text:000000000000B608                 call    re_node_set_contains_isra_3
.text:000000000000B60D                 sub     rax, 1
.text:000000000000B611                 mov     rdx, rax
.text:000000000000B614                 js      short loc_B622
.text:000000000000B616                 lea     rdi, [r14+8]
.text:000000000000B61A                 mov     rsi, rbx
.text:000000000000B61D                 call    re_node_set_remove_at_isra_4_part_5
.text:000000000000B622
.text:000000000000B622 loc_B622:                               ; CODE XREF: _sub_epsilon_src_nodes+1BB↑j
.text:000000000000B622                                         ; _sub_epsilon_src_nodes+1D4↑j
.text:000000000000B622                 add     r9, 1
.text:000000000000B626                 cmp     [rbp+8], r9
.text:000000000000B62A                 jg      short loc_B5E0
.text:000000000000B62C
.text:000000000000B62C loc_B62C:                               ; CODE XREF: _sub_epsilon_src_nodes+19B↑j
.text:000000000000B62C                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000B631
.text:000000000000B631 loc_B631:                               ; CODE XREF: _sub_epsilon_src_nodes+234↓j
.text:000000000000B631                 call    _free
.text:000000000000B636                 xor     eax, eax
.text:000000000000B638
.text:000000000000B638 loc_B638:                               ; CODE XREF: _sub_epsilon_src_nodes+230↓j
.text:000000000000B638                 mov     rsi, [rsp+78h+var_40]
.text:000000000000B63D                 xor     rsi, fs:28h
.text:000000000000B646                 jnz     short loc_B676
.text:000000000000B648                 add     rsp, 48h
.text:000000000000B64C                 pop     rbx
.text:000000000000B64D                 pop     rbp
.text:000000000000B64E                 pop     r12
.text:000000000000B650                 pop     r13
.text:000000000000B652                 pop     r14
.text:000000000000B654                 pop     r15
.text:000000000000B656                 retn
.text:000000000000B656 ; ---------------------------------------------------------------------------
.text:000000000000B657                 align 20h
.text:000000000000B660
.text:000000000000B660 loc_B660:                               ; CODE XREF: _sub_epsilon_src_nodes+A3↑j
.text:000000000000B660                 mov     rdi, [rsp+78h+ptr] ; ptr
.text:000000000000B665                 mov     dword ptr [rsp+78h+var_78], eax
.text:000000000000B668                 call    _free
.text:000000000000B66D                 mov     eax, dword ptr [rsp+78h+var_78]
.text:000000000000B670                 jmp     short loc_B638
.text:000000000000B672 ; ---------------------------------------------------------------------------
.text:000000000000B672
.text:000000000000B672 loc_B672:                               ; CODE XREF: _sub_epsilon_src_nodes+4B↑j
.text:000000000000B672                 xor     edi, edi
.text:000000000000B674                 jmp     short loc_B631
.text:000000000000B676 ; ---------------------------------------------------------------------------
.text:000000000000B676
.text:000000000000B676 loc_B676:                               ; CODE XREF: _sub_epsilon_src_nodes+206↑j
.text:000000000000B676                 call    ___stack_chk_fail
.text:000000000000B676 ; } // starts at B440
.text:000000000000B676 _sub_epsilon_src_nodes endp
.text:000000000000B676
.text:000000000000B676 ; ---------------------------------------------------------------------------
.text:000000000000B67B                 align 20h
.text:000000000000B680
.text:000000000000B680 ; =============== S U B R O U T I N E =======================================
.text:000000000000B680
.text:000000000000B680
.text:000000000000B680 build_trtable   proc near               ; CODE XREF: re_search_internal+1090↓p
.text:000000000000B680
.text:000000000000B680 var_130         = qword ptr -130h
.text:000000000000B680 ptr             = qword ptr -128h
.text:000000000000B680 var_120         = qword ptr -120h
.text:000000000000B680 var_118         = qword ptr -118h
.text:000000000000B680 var_110         = qword ptr -110h
.text:000000000000B680 var_108         = qword ptr -108h
.text:000000000000B680 var_100         = qword ptr -100h
.text:000000000000B680 var_F8          = qword ptr -0F8h
.text:000000000000B680 var_E9          = byte ptr -0E9h
.text:000000000000B680 var_E8          = qword ptr -0E8h
.text:000000000000B680 var_E0          = qword ptr -0E0h
.text:000000000000B680 var_CC          = dword ptr -0CCh
.text:000000000000B680 var_C8          = qword ptr -0C8h
.text:000000000000B680 var_C0          = qword ptr -0C0h
.text:000000000000B680 var_B8          = qword ptr -0B8h
.text:000000000000B680 var_A8          = xmmword ptr -0A8h
.text:000000000000B680 var_98          = xmmword ptr -98h
.text:000000000000B680 var_88          = xmmword ptr -88h
.text:000000000000B680 var_78          = xmmword ptr -78h
.text:000000000000B680 var_68          = xmmword ptr -68h
.text:000000000000B680 var_58          = xmmword ptr -58h
.text:000000000000B680 var_40          = qword ptr -40h
.text:000000000000B680
.text:000000000000B680 ; __unwind {
.text:000000000000B680                 push    r15
.text:000000000000B682                 push    r14
.text:000000000000B684                 mov     r15, rdi
.text:000000000000B687                 push    r13
.text:000000000000B689                 push    r12
.text:000000000000B68B                 mov     edi, 3800h      ; size
.text:000000000000B690                 push    rbp
.text:000000000000B691                 push    rbx
.text:000000000000B692                 sub     rsp, 108h
.text:000000000000B699                 mov     rax, fs:28h
.text:000000000000B6A2                 mov     [rsp+138h+var_40], rax
.text:000000000000B6AA                 xor     eax, eax
.text:000000000000B6AC                 mov     [rsp+138h+var_130], rsi
.text:000000000000B6B1                 call    _malloc
.text:000000000000B6B6                 test    rax, rax
.text:000000000000B6B9                 mov     [rsp+138h+var_120], rax
.text:000000000000B6BE                 jz      loc_BA90
.text:000000000000B6C4                 mov     rax, [rsp+138h+var_120]
.text:000000000000B6C9                 pxor    xmm0, xmm0
.text:000000000000B6CD                 lea     rbx, [rax+1800h]
.text:000000000000B6D4                 mov     rax, [rsp+138h+var_130]
.text:000000000000B6D9                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000B6E1                 mov     [rsp+138h+var_F8], rbx
.text:000000000000B6E6                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000B6EE                 cmp     qword ptr [rax+10h], 0
.text:000000000000B6F3                 mov     qword ptr [rax+58h], 0
.text:000000000000B6FB                 mov     qword ptr [rax+60h], 0
.text:000000000000B703                 jle     loc_C17A
.text:000000000000B709                 mov     [rsp+138h+var_108], r15
.text:000000000000B70E                 xor     ebp, ebp
.text:000000000000B710                 mov     [rsp+138h+ptr], 0
.text:000000000000B719                 mov     r15, rbx
.text:000000000000B71C
.text:000000000000B71C loc_B71C:                               ; CODE XREF: build_trtable+113↓j
.text:000000000000B71C                 mov     rbx, [rsp+138h+ptr]
.text:000000000000B721                 lea     rax, ds:0[rbx*8]
.text:000000000000B729                 mov     [rsp+138h+var_118], rax
.text:000000000000B72E                 mov     rax, [rsp+138h+var_130]
.text:000000000000B733                 mov     rax, [rax+18h]
.text:000000000000B737                 mov     r13, [rax+rbx*8]
.text:000000000000B73B                 mov     rax, [rsp+138h+var_108]
.text:000000000000B740                 shl     r13, 4
.text:000000000000B744                 add     r13, [rax]
.text:000000000000B747                 movzx   r14d, byte ptr [r13+8]
.text:000000000000B74C                 mov     eax, [r13+8]
.text:000000000000B750                 shr     eax, 8
.text:000000000000B753                 and     ax, 3FFh
.text:000000000000B757                 cmp     r14d, 1
.text:000000000000B75B                 jz      loc_BAC0
.text:000000000000B761                 cmp     r14d, 3
.text:000000000000B765                 jz      loc_BF30
.text:000000000000B76B                 cmp     r14d, 5
.text:000000000000B76F                 jz      loc_BDF0
.text:000000000000B775                 cmp     r14d, 7
.text:000000000000B779                 jz      loc_BF59
.text:000000000000B77F
.text:000000000000B77F loc_B77F:                               ; CODE XREF: build_trtable+4CF↓j
.text:000000000000B77F                                         ; build_trtable+524↓j ...
.text:000000000000B77F                 mov     rbx, [rsp+138h+var_130]
.text:000000000000B784                 add     [rsp+138h+ptr], 1
.text:000000000000B78A                 mov     rax, [rsp+138h+ptr]
.text:000000000000B78F                 cmp     rax, [rbx+10h]
.text:000000000000B793                 jl      short loc_B71C
.text:000000000000B795                 test    rbp, rbp
.text:000000000000B798                 mov     r15, [rsp+138h+var_108]
.text:000000000000B79D                 jle     loc_C1F9
.text:000000000000B7A3                 lea     rbx, [rbp+1]
.text:000000000000B7A7                 mov     [rsp+138h+var_C0], 0
.text:000000000000B7B0                 mov     [rsp+138h+var_C8], rbx
.text:000000000000B7B5                 shl     rbx, 3
.text:000000000000B7B9                 mov     rdi, rbx        ; size
.text:000000000000B7BC                 call    _malloc
.text:000000000000B7C1                 test    rax, rax
.text:000000000000B7C4                 mov     r12, rax
.text:000000000000B7C7                 mov     [rsp+138h+var_B8], rax
.text:000000000000B7CF                 jz      loc_BFCF
.text:000000000000B7D5                 mov     rax, 0AAAAAAAAAAAA855h
.text:000000000000B7DF                 mov     [rsp+138h+var_CC], 0
.text:000000000000B7E7                 cmp     rbp, rax
.text:000000000000B7EA                 jg      loc_BFCF
.text:000000000000B7F0                 lea     rax, [rbp+rbp*2+0]
.text:000000000000B7F5                 shl     rax, 3
.text:000000000000B7F9                 mov     rdi, rax        ; size
.text:000000000000B7FC                 mov     [rsp+138h+var_E0], rax
.text:000000000000B801                 call    _malloc
.text:000000000000B806                 test    rax, rax
.text:000000000000B809                 mov     [rsp+138h+ptr], rax
.text:000000000000B80E                 jz      loc_BFCF
.text:000000000000B814                 mov     rax, [rsp+138h+ptr]
.text:000000000000B819                 sub     rbx, 8
.text:000000000000B81D                 mov     r12, [rsp+138h+var_F8]
.text:000000000000B822                 pxor    xmm0, xmm0
.text:000000000000B826                 lea     r14, [rsp+138h+var_C8]
.text:000000000000B82B                 mov     [rsp+138h+var_118], rbp
.text:000000000000B830                 mov     [rsp+138h+var_E9], 0
.text:000000000000B835                 mov     rbp, r15
.text:000000000000B838                 add     rax, rbx
.text:000000000000B83B                 mov     [rsp+138h+var_E8], r12
.text:000000000000B840                 add     rbx, rax
.text:000000000000B843                 mov     [rsp+138h+var_108], rax
.text:000000000000B848                 mov     rax, [rsp+138h+var_120]
.text:000000000000B84D                 movaps  [rsp+138h+var_68], xmm0
.text:000000000000B855                 mov     [rsp+138h+var_100], rbx
.text:000000000000B85A                 xor     ebx, ebx
.text:000000000000B85C                 lea     r13, [rax+8]
.text:000000000000B860                 lea     rax, [rsp+138h+var_CC]
.text:000000000000B865                 movaps  [rsp+138h+var_58], xmm0
.text:000000000000B86D                 mov     [rsp+138h+var_110], rax
.text:000000000000B872
.text:000000000000B872 loc_B872:                               ; CODE XREF: build_trtable+2C2↓j
.text:000000000000B872                 mov     [rsp+138h+var_C0], 0
.text:000000000000B87B                 cmp     qword ptr [r13+0], 0
.text:000000000000B880                 jle     short loc_B8C8
.text:000000000000B882                 xor     r15d, r15d
.text:000000000000B885                 nop     dword ptr [rax]
.text:000000000000B888
.text:000000000000B888 loc_B888:                               ; CODE XREF: build_trtable+246↓j
.text:000000000000B888                 mov     rax, [r13+8]
.text:000000000000B88C                 mov     rdx, [rax+r15*8]
.text:000000000000B890                 mov     rax, [rbp+18h]
.text:000000000000B894                 mov     rax, [rax+rdx*8]
.text:000000000000B898                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000B89C                 jz      short loc_B8BE
.text:000000000000B89E                 lea     rdx, [rax+rax*2]
.text:000000000000B8A2                 mov     rax, [rbp+30h]
.text:000000000000B8A6                 mov     rdi, r14
.text:000000000000B8A9                 lea     rsi, [rax+rdx*8]
.text:000000000000B8AD                 call    re_node_set_merge
.text:000000000000B8B2                 test    eax, eax
.text:000000000000B8B4                 mov     [rsp+138h+var_CC], eax
.text:000000000000B8B8                 jnz     loc_BFB8
.text:000000000000B8BE
.text:000000000000B8BE loc_B8BE:                               ; CODE XREF: build_trtable+21C↑j
.text:000000000000B8BE                 add     r15, 1
.text:000000000000B8C2                 cmp     [r13+0], r15
.text:000000000000B8C6                 jg      short loc_B888
.text:000000000000B8C8
.text:000000000000B8C8 loc_B8C8:                               ; CODE XREF: build_trtable+200↑j
.text:000000000000B8C8                 mov     rdi, [rsp+138h+var_110]
.text:000000000000B8CD                 xor     ecx, ecx
.text:000000000000B8CF                 mov     rsi, rbp
.text:000000000000B8D2                 mov     rdx, r14
.text:000000000000B8D5                 call    re_acquire_state_context
.text:000000000000B8DA                 mov     rsi, [rsp+138h+ptr]
.text:000000000000B8DF                 test    rax, rax
.text:000000000000B8E2                 mov     [rsi+rbx*8], rax
.text:000000000000B8E6                 jz      loc_C098
.text:000000000000B8EC
.text:000000000000B8EC loc_B8EC:                               ; CODE XREF: build_trtable+A1E↓j
.text:000000000000B8EC                 cmp     byte ptr [rax+68h], 0
.text:000000000000B8F0                 js      loc_C010
.text:000000000000B8F6                 mov     rdi, [rsp+138h+var_108]
.text:000000000000B8FB                 mov     rsi, [rsp+138h+var_100]
.text:000000000000B900                 mov     [rdi+rbx*8], rax
.text:000000000000B904                 mov     rax, [rsp+138h+ptr]
.text:000000000000B909                 mov     rax, [rax+rbx*8]
.text:000000000000B90D                 mov     [rsi+rbx*8], rax
.text:000000000000B911
.text:000000000000B911 loc_B911:                               ; CODE XREF: build_trtable+9FC↓j
.text:000000000000B911                                         ; build_trtable+A08↓j
.text:000000000000B911                 lea     rdx, [rsp+138h+var_68]
.text:000000000000B919                 xor     eax, eax
.text:000000000000B91B
.text:000000000000B91B loc_B91B:                               ; CODE XREF: build_trtable+2AF↓j
.text:000000000000B91B                 mov     rcx, [rdx+rax]
.text:000000000000B91F                 or      rcx, [r12+rax]
.text:000000000000B923                 mov     [rdx+rax], rcx
.text:000000000000B927                 add     rax, 8
.text:000000000000B92B                 cmp     rax, 20h ; ' '
.text:000000000000B92F                 jnz     short loc_B91B
.text:000000000000B931                 add     rbx, 1
.text:000000000000B935                 add     r13, 18h
.text:000000000000B939                 add     r12, 20h ; ' '
.text:000000000000B93D                 cmp     rbx, [rsp+138h+var_118]
.text:000000000000B942                 jnz     loc_B872
.text:000000000000B948                 cmp     [rsp+138h+var_E9], 0
.text:000000000000B94D                 mov     r15, rbp
.text:000000000000B950                 mov     rbp, [rsp+138h+var_118]
.text:000000000000B955                 mov     [rsp+138h+var_118], rdx
.text:000000000000B95A                 jnz     loc_C0A9
.text:000000000000B960                 mov     esi, 100h       ; size
.text:000000000000B965                 mov     edi, 8          ; nmemb
.text:000000000000B96A                 call    _calloc
.text:000000000000B96F                 mov     r11, rax
.text:000000000000B972                 mov     rax, [rsp+138h+var_130]
.text:000000000000B977                 test    r11, r11
.text:000000000000B97A                 mov     [rax+58h], r11
.text:000000000000B97E                 jz      loc_BFBD
.text:000000000000B984                 mov     rbx, [rsp+138h+var_F8]
.text:000000000000B989                 mov     r12, [rsp+138h+ptr]
.text:000000000000B98E                 xor     r9d, r9d
.text:000000000000B991                 mov     r13, [rsp+138h+var_108]
.text:000000000000B996                 mov     rdx, [rsp+138h+var_118]
.text:000000000000B99B                 add     rbx, 20h ; ' '
.text:000000000000B99F
.text:000000000000B99F loc_B99F:                               ; CODE XREF: build_trtable+35C↓j
.text:000000000000B99F                 mov     rax, [rdx+r9]
.text:000000000000B9A3                 test    rax, rax
.text:000000000000B9A6                 jz      short loc_B9D4
.text:000000000000B9A8                 mov     rsi, r9
.text:000000000000B9AB                 mov     ecx, 1
.text:000000000000B9B0                 shl     rsi, 6
.text:000000000000B9B4                 add     rsi, r11
.text:000000000000B9B7                 nop     word ptr [rax+rax+00000000h]
.text:000000000000B9C0
.text:000000000000B9C0 loc_B9C0:                               ; CODE XREF: build_trtable+352↓j
.text:000000000000B9C0                 test    al, 1
.text:000000000000B9C2                 jnz     loc_C128
.text:000000000000B9C8
.text:000000000000B9C8 loc_B9C8:                               ; CODE XREF: build_trtable+AE9↓j
.text:000000000000B9C8                                         ; build_trtable+AF5↓j
.text:000000000000B9C8                 add     rcx, rcx
.text:000000000000B9CB                 add     rsi, 8
.text:000000000000B9CF                 shr     rax, 1
.text:000000000000B9D2                 jnz     short loc_B9C0
.text:000000000000B9D4
.text:000000000000B9D4 loc_B9D4:                               ; CODE XREF: build_trtable+326↑j
.text:000000000000B9D4                 add     r9, 8
.text:000000000000B9D8                 cmp     r9, 20h ; ' '
.text:000000000000B9DC                 jnz     short loc_B99F
.text:000000000000B9DE
.text:000000000000B9DE loc_B9DE:                               ; CODE XREF: build_trtable+AA0↓j
.text:000000000000B9DE                 test    byte ptr [rsp+138h+var_68+1], 4
.text:000000000000B9E6                 jz      short loc_BA22
.text:000000000000B9E8                 xor     eax, eax
.text:000000000000B9EA                 mov     rdx, [rsp+138h+var_E8]
.text:000000000000B9EF                 jmp     short loc_B9FE
.text:000000000000B9F1 ; ---------------------------------------------------------------------------
.text:000000000000B9F1
.text:000000000000B9F1 loc_B9F1:                               ; CODE XREF: build_trtable+385↓j
.text:000000000000B9F1                 add     rax, 1
.text:000000000000B9F5                 add     rdx, 20h ; ' '
.text:000000000000B9F9                 cmp     rax, rbp
.text:000000000000B9FC                 jz      short loc_BA22
.text:000000000000B9FE
.text:000000000000B9FE loc_B9FE:                               ; CODE XREF: build_trtable+36F↑j
.text:000000000000B9FE                 test    qword ptr [rdx], 400h
.text:000000000000BA05                 jz      short loc_B9F1
.text:000000000000BA07                 mov     rbx, [rsp+138h+var_100]
.text:000000000000BA0C                 cmp     [rsp+138h+var_E9], 0
.text:000000000000BA11                 mov     rax, [rbx+rax*8]
.text:000000000000BA15                 mov     [r11+50h], rax
.text:000000000000BA19                 jz      short loc_BA22
.text:000000000000BA1B                 mov     [r11+850h], rax
.text:000000000000BA22
.text:000000000000BA22 loc_BA22:                               ; CODE XREF: build_trtable+366↑j
.text:000000000000BA22                                         ; build_trtable+37C↑j ...
.text:000000000000BA22                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000BA27                 call    _free
.text:000000000000BA2C                 mov     rdi, [rsp+138h+var_B8] ; ptr
.text:000000000000BA34                 call    _free
.text:000000000000BA39                 mov     rax, [rsp+138h+var_120]
.text:000000000000BA3E                 mov     rbx, [rsp+138h+var_E0]
.text:000000000000BA43                 lea     rbp, [rax+10h]
.text:000000000000BA47                 add     rbx, rbp
.text:000000000000BA4A
.text:000000000000BA4A loc_BA4A:                               ; CODE XREF: build_trtable+3DA↓j
.text:000000000000BA4A                 mov     rdi, [rbp+0]    ; ptr
.text:000000000000BA4E                 add     rbp, 18h
.text:000000000000BA52                 call    _free
.text:000000000000BA57                 cmp     rbx, rbp
.text:000000000000BA5A                 jnz     short loc_BA4A
.text:000000000000BA5C                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000BA61                 call    _free
.text:000000000000BA66                 mov     eax, 1
.text:000000000000BA6B                 jmp     short loc_BA92
.text:000000000000BA6D ; ---------------------------------------------------------------------------
.text:000000000000BA6D
.text:000000000000BA6D loc_BA6D:                               ; CODE XREF: build_trtable+707↓j
.text:000000000000BA6D                 test    rbp, rbp
.text:000000000000BA70                 mov     qword ptr [rbx+8], 0
.text:000000000000BA78                 mov     qword ptr [rbx], 0
.text:000000000000BA7F                 jnz     loc_BDB0
.text:000000000000BA85                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000BA8A                 call    _free
.text:000000000000BA8F                 nop
.text:000000000000BA90
.text:000000000000BA90 loc_BA90:                               ; CODE XREF: build_trtable+3E↑j
.text:000000000000BA90                                         ; build_trtable+763↓j ...
.text:000000000000BA90                 xor     eax, eax
.text:000000000000BA92
.text:000000000000BA92 loc_BA92:                               ; CODE XREF: build_trtable+3EB↑j
.text:000000000000BA92                                         ; build_trtable+B22↓j
.text:000000000000BA92                 mov     rbx, [rsp+138h+var_40]
.text:000000000000BA9A                 xor     rbx, fs:28h
.text:000000000000BAA3                 jnz     loc_C1F4
.text:000000000000BAA9                 add     rsp, 108h
.text:000000000000BAB0                 pop     rbx
.text:000000000000BAB1                 pop     rbp
.text:000000000000BAB2                 pop     r12
.text:000000000000BAB4                 pop     r13
.text:000000000000BAB6                 pop     r14
.text:000000000000BAB8                 pop     r15
.text:000000000000BABA                 retn
.text:000000000000BABA ; ---------------------------------------------------------------------------
.text:000000000000BABB                 align 20h
.text:000000000000BAC0
.text:000000000000BAC0 loc_BAC0:                               ; CODE XREF: build_trtable+DB↑j
.text:000000000000BAC0                 movzx   ecx, byte ptr [r13+0]
.text:000000000000BAC5                 lea     r12, [rsp+138h+var_A8]
.text:000000000000BACD                 mov     edi, 1
.text:000000000000BAD2                 mov     rdx, rcx
.text:000000000000BAD5                 and     ecx, 3Fh
.text:000000000000BAD8                 shr     rdx, 3
.text:000000000000BADC                 shl     rdi, cl
.text:000000000000BADF                 and     edx, 18h
.text:000000000000BAE2                 or      [r12+rdx], rdi
.text:000000000000BAE6
.text:000000000000BAE6 loc_BAE6:                               ; CODE XREF: build_trtable+7C9↓j
.text:000000000000BAE6                                         ; build_trtable+7D8↓j ...
.text:000000000000BAE6                 test    ax, ax
.text:000000000000BAE9                 jz      loc_BBB0
.text:000000000000BAEF                 test    al, 20h
.text:000000000000BAF1                 jnz     loc_BE60
.text:000000000000BAF7
.text:000000000000BAF7 loc_BAF7:                               ; CODE XREF: build_trtable+80C↓j
.text:000000000000BAF7                 test    al, 80h
.text:000000000000BAF9                 jnz     loc_BD94
.text:000000000000BAFF                 test    al, 4
.text:000000000000BB01                 jz      short loc_BB55
.text:000000000000BB03                 cmp     r14d, 1
.text:000000000000BB07                 jz      loc_BEE5
.text:000000000000BB0D                 mov     r8, [rsp+138h+var_108]
.text:000000000000BB12                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000BB1A                 jle     loc_BF72
.text:000000000000BB20
.text:000000000000BB20 loc_BB20:                               ; CODE XREF: build_trtable+87D↓j
.text:000000000000BB20                 mov     rdi, [r8+78h]
.text:000000000000BB24                 xor     esi, esi
.text:000000000000BB26                 xor     ecx, ecx
.text:000000000000BB28
.text:000000000000BB28 loc_BB28:                               ; CODE XREF: build_trtable+4CA↓j
.text:000000000000BB28                 mov     rdx, [rdi+rcx*8]
.text:000000000000BB2C                 not     rdx
.text:000000000000BB2F                 or      rdx, [r8+rcx*8+0B8h]
.text:000000000000BB37                 and     rdx, [r12+rcx*8]
.text:000000000000BB3B                 mov     [r12+rcx*8], rdx
.text:000000000000BB3F                 add     rcx, 1
.text:000000000000BB43                 or      rsi, rdx
.text:000000000000BB46                 cmp     rcx, 4
.text:000000000000BB4A                 jnz     short loc_BB28
.text:000000000000BB4C                 test    rsi, rsi
.text:000000000000BB4F                 jz      loc_B77F
.text:000000000000BB55
.text:000000000000BB55 loc_BB55:                               ; CODE XREF: build_trtable+481↑j
.text:000000000000BB55                                         ; build_trtable+91B↓j
.text:000000000000BB55                 test    al, 8
.text:000000000000BB57                 jz      short loc_BBB0
.text:000000000000BB59                 cmp     r14d, 1
.text:000000000000BB5D                 jz      loc_BE91
.text:000000000000BB63                 mov     rdi, [rsp+138h+var_108]
.text:000000000000BB68                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000BB6F                 jle     loc_BEAE
.text:000000000000BB75
.text:000000000000BB75 loc_BB75:                               ; CODE XREF: build_trtable+828↓j
.text:000000000000BB75                 mov     rsi, [rdi+78h]
.text:000000000000BB79                 xor     ecx, ecx
.text:000000000000BB7B                 xor     edx, edx
.text:000000000000BB7D
.text:000000000000BB7D loc_BB7D:                               ; CODE XREF: build_trtable+51F↓j
.text:000000000000BB7D                 mov     rax, [rdi+rdx*8+0B8h]
.text:000000000000BB85                 and     rax, [rsi+rdx*8]
.text:000000000000BB89                 not     rax
.text:000000000000BB8C                 and     rax, [r12+rdx*8]
.text:000000000000BB90                 mov     [r12+rdx*8], rax
.text:000000000000BB94                 add     rdx, 1
.text:000000000000BB98                 or      rcx, rax
.text:000000000000BB9B                 cmp     rdx, 4
.text:000000000000BB9F                 jnz     short loc_BB7D
.text:000000000000BBA1                 test    rcx, rcx
.text:000000000000BBA4                 jz      loc_B77F
.text:000000000000BBAA                 nop     word ptr [rax+rax+00h]
.text:000000000000BBB0
.text:000000000000BBB0 loc_BBB0:                               ; CODE XREF: build_trtable+469↑j
.text:000000000000BBB0                                         ; build_trtable+4D7↑j ...
.text:000000000000BBB0                 xor     ebx, ebx
.text:000000000000BBB2                 test    rbp, rbp
.text:000000000000BBB5                 jle     loc_BD1B
.text:000000000000BBBB                 mov     [rsp+138h+var_110], r13
.text:000000000000BBC0                 mov     r13, r15
.text:000000000000BBC3                 nop     dword ptr [rax+rax+00h]
.text:000000000000BBC8
.text:000000000000BBC8 loc_BBC8:                               ; CODE XREF: build_trtable+692↓j
.text:000000000000BBC8                 mov     r10, rbx
.text:000000000000BBCB                 shl     r10, 5
.text:000000000000BBCF                 cmp     r14d, 1
.text:000000000000BBD3                 jnz     short loc_BBF8
.text:000000000000BBD5                 mov     rax, [rsp+138h+var_110]
.text:000000000000BBDA                 movzx   edx, byte ptr [rax]
.text:000000000000BBDD                 mov     rax, rdx
.text:000000000000BBE0                 shr     rax, 3
.text:000000000000BBE4                 and     eax, 18h
.text:000000000000BBE7                 add     rax, r13
.text:000000000000BBEA                 mov     rax, [rax+r10]
.text:000000000000BBEE                 bt      rax, rdx
.text:000000000000BBF2                 jnb     loc_BD0B
.text:000000000000BBF8
.text:000000000000BBF8 loc_BBF8:                               ; CODE XREF: build_trtable+553↑j
.text:000000000000BBF8                 lea     rdi, [r13+r10+0]
.text:000000000000BBFD                 lea     rsi, [rsp+138h+var_88]
.text:000000000000BC05                 xor     ecx, ecx
.text:000000000000BC07                 xor     eax, eax
.text:000000000000BC09
.text:000000000000BC09 loc_BC09:                               ; CODE XREF: build_trtable+5A0↓j
.text:000000000000BC09                 mov     rdx, [r12+rax*8]
.text:000000000000BC0D                 and     rdx, [rdi+rax*8]
.text:000000000000BC11                 mov     [rsi+rax*8], rdx
.text:000000000000BC15                 add     rax, 1
.text:000000000000BC19                 or      rcx, rdx
.text:000000000000BC1C                 cmp     rax, 4
.text:000000000000BC20                 jnz     short loc_BC09
.text:000000000000BC22                 test    rcx, rcx
.text:000000000000BC25                 jz      loc_BD0B
.text:000000000000BC2B                 lea     r11, [rsp+138h+var_68]
.text:000000000000BC33                 xor     r15d, r15d
.text:000000000000BC36                 xor     r9d, r9d
.text:000000000000BC39                 xor     ecx, ecx
.text:000000000000BC3B
.text:000000000000BC3B loc_BC3B:                               ; CODE XREF: build_trtable+5E8↓j
.text:000000000000BC3B                 mov     rsi, [r12+rcx*8]
.text:000000000000BC3F                 mov     rax, [rdi+rcx*8]
.text:000000000000BC43                 mov     rdx, rsi
.text:000000000000BC46                 not     rdx
.text:000000000000BC49                 and     rdx, rax
.text:000000000000BC4C                 not     rax
.text:000000000000BC4F                 and     rax, rsi
.text:000000000000BC52                 mov     [r11+rcx*8], rdx
.text:000000000000BC56                 or      r9, rdx
.text:000000000000BC59                 mov     [r12+rcx*8], rax
.text:000000000000BC5D                 add     rcx, 1
.text:000000000000BC61                 or      r15, rax
.text:000000000000BC64                 cmp     rcx, 4
.text:000000000000BC68                 jnz     short loc_BC3B
.text:000000000000BC6A                 mov     rdi, [rsp+138h+var_120]
.text:000000000000BC6F                 lea     rax, [rbx+rbx*2]
.text:000000000000BC73                 test    r9, r9
.text:000000000000BC76                 lea     rdx, [rdi+rax*8]
.text:000000000000BC7A                 jz      short loc_BCE4
.text:000000000000BC7C                 mov     rax, rbp
.text:000000000000BC7F                 movdqa  xmm0, [rsp+138h+var_68]
.text:000000000000BC88                 shl     rax, 5
.text:000000000000BC8C                 mov     rsi, rdx
.text:000000000000BC8F                 mov     [rsp+138h+var_100], rdx
.text:000000000000BC94                 add     rax, r13
.text:000000000000BC97                 movups  xmmword ptr [rax], xmm0
.text:000000000000BC9A                 movdqa  xmm0, [rsp+138h+var_58]
.text:000000000000BCA3                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000BCA7                 lea     rax, [rbp+rbp*2+0]
.text:000000000000BCAC                 lea     rdi, [rdi+rax*8]
.text:000000000000BCB0                 movdqa  xmm0, [rsp+138h+var_88]
.text:000000000000BCB9                 movups  xmmword ptr [r13+r10+0], xmm0
.text:000000000000BCBF                 movdqa  xmm0, [rsp+138h+var_78]
.text:000000000000BCC8                 movups  xmmword ptr [r13+r10+10h], xmm0
.text:000000000000BCCE                 call    re_node_set_init_copy
.text:000000000000BCD3                 test    eax, eax
.text:000000000000BCD5                 jnz     loc_BDB0
.text:000000000000BCDB                 mov     rdx, [rsp+138h+var_100]
.text:000000000000BCE0                 add     rbp, 1
.text:000000000000BCE4
.text:000000000000BCE4 loc_BCE4:                               ; CODE XREF: build_trtable+5FA↑j
.text:000000000000BCE4                 mov     rax, [rsp+138h+var_130]
.text:000000000000BCE9                 mov     rsi, [rsp+138h+var_118]
.text:000000000000BCEE                 mov     rdi, rdx
.text:000000000000BCF1                 mov     rax, [rax+18h]
.text:000000000000BCF5                 mov     rsi, [rax+rsi]
.text:000000000000BCF9                 call    re_node_set_insert
.text:000000000000BCFE                 test    al, al
.text:000000000000BD00                 jz      loc_BDB0
.text:000000000000BD06                 test    r15, r15
.text:000000000000BD09                 jz      short loc_BD18
.text:000000000000BD0B
.text:000000000000BD0B loc_BD0B:                               ; CODE XREF: build_trtable+572↑j
.text:000000000000BD0B                                         ; build_trtable+5A5↑j
.text:000000000000BD0B                 add     rbx, 1
.text:000000000000BD0F                 cmp     rbx, rbp
.text:000000000000BD12                 jl      loc_BBC8
.text:000000000000BD18
.text:000000000000BD18 loc_BD18:                               ; CODE XREF: build_trtable+689↑j
.text:000000000000BD18                 mov     r15, r13
.text:000000000000BD1B
.text:000000000000BD1B loc_BD1B:                               ; CODE XREF: build_trtable+535↑j
.text:000000000000BD1B                 cmp     rbp, rbx
.text:000000000000BD1E                 jnz     loc_B77F
.text:000000000000BD24                 mov     rax, rbp
.text:000000000000BD27                 movdqa  xmm0, [rsp+138h+var_A8]
.text:000000000000BD30                 shl     rax, 5
.text:000000000000BD34                 mov     rbx, [rsp+138h+var_118]
.text:000000000000BD39                 mov     edi, 8          ; size
.text:000000000000BD3E                 add     rax, r15
.text:000000000000BD41                 movups  xmmword ptr [rax], xmm0
.text:000000000000BD44                 movdqa  xmm0, [rsp+138h+var_98]
.text:000000000000BD4D                 movups  xmmword ptr [rax+10h], xmm0
.text:000000000000BD51                 mov     rax, [rsp+138h+var_130]
.text:000000000000BD56                 mov     rax, [rax+18h]
.text:000000000000BD5A                 mov     r13, [rax+rbx]
.text:000000000000BD5E                 mov     rbx, [rsp+138h+var_120]
.text:000000000000BD63                 lea     rax, [rbp+rbp*2+0]
.text:000000000000BD68                 lea     rbx, [rbx+rax*8]
.text:000000000000BD6C                 mov     qword ptr [rbx], 1
.text:000000000000BD73                 mov     qword ptr [rbx+8], 1
.text:000000000000BD7B                 call    _malloc
.text:000000000000BD80                 test    rax, rax
.text:000000000000BD83                 mov     [rbx+10h], rax
.text:000000000000BD87                 jz      loc_BA6D
.text:000000000000BD8D                 mov     [rax], r13
.text:000000000000BD90                 add     rbp, 1
.text:000000000000BD94
.text:000000000000BD94 loc_BD94:                               ; CODE XREF: build_trtable+479↑j
.text:000000000000BD94                                         ; build_trtable+816↓j ...
.text:000000000000BD94                 pxor    xmm0, xmm0
.text:000000000000BD98                 movaps  xmmword ptr [r12], xmm0
.text:000000000000BD9D                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000BDA3                 jmp     loc_B77F
.text:000000000000BDA3 ; ---------------------------------------------------------------------------
.text:000000000000BDA8                 align 10h
.text:000000000000BDB0
.text:000000000000BDB0 loc_BDB0:                               ; CODE XREF: build_trtable+3FF↑j
.text:000000000000BDB0                                         ; build_trtable+655↑j ...
.text:000000000000BDB0                 mov     rax, [rsp+138h+var_120]
.text:000000000000BDB5                 lea     rbx, [rax+10h]
.text:000000000000BDB9                 lea     rax, [rbp+rbp*2+0]
.text:000000000000BDBE                 lea     rbp, [rbx+rax*8]
.text:000000000000BDC2                 nop     word ptr [rax+rax+00h]
.text:000000000000BDC8
.text:000000000000BDC8 loc_BDC8:                               ; CODE XREF: build_trtable+757↓j
.text:000000000000BDC8                 mov     rdi, [rbx]      ; ptr
.text:000000000000BDCB                 add     rbx, 18h
.text:000000000000BDCF                 call    _free
.text:000000000000BDD4                 cmp     rbp, rbx
.text:000000000000BDD7                 jnz     short loc_BDC8
.text:000000000000BDD9                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000BDDE                 call    _free
.text:000000000000BDE3                 jmp     loc_BA90
.text:000000000000BDE3 ; ---------------------------------------------------------------------------
.text:000000000000BDE8                 align 10h
.text:000000000000BDF0
.text:000000000000BDF0 loc_BDF0:                               ; CODE XREF: build_trtable+EF↑j
.text:000000000000BDF0                 mov     rsi, [rsp+138h+var_108]
.text:000000000000BDF5                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000BDFC                 jle     loc_BF05
.text:000000000000BE02                 mov     rsi, [rsi+78h]
.text:000000000000BE06                 lea     r12, [rsp+138h+var_A8]
.text:000000000000BE0E                 xor     edx, edx
.text:000000000000BE10
.text:000000000000BE10 loc_BE10:                               ; CODE XREF: build_trtable+7A4↓j
.text:000000000000BE10                 mov     rcx, [r12+rdx]
.text:000000000000BE14                 or      rcx, [rsi+rdx]
.text:000000000000BE18                 mov     [r12+rdx], rcx
.text:000000000000BE1C                 add     rdx, 8
.text:000000000000BE20                 cmp     rdx, 20h ; ' '
.text:000000000000BE24                 jnz     short loc_BE10
.text:000000000000BE26
.text:000000000000BE26 loc_BE26:                               ; CODE XREF: build_trtable+8A1↓j
.text:000000000000BE26                                         ; build_trtable+8ED↓j
.text:000000000000BE26                 mov     rbx, [rsp+138h+var_108]
.text:000000000000BE2B                 mov     rdx, [rbx+0D8h]
.text:000000000000BE32                 test    dl, 40h
.text:000000000000BE35                 jnz     short loc_BE43
.text:000000000000BE37                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFBFFh
.text:000000000000BE43
.text:000000000000BE43 loc_BE43:                               ; CODE XREF: build_trtable+7B5↑j
.text:000000000000BE43                 and     edx, 80h
.text:000000000000BE49                 jz      loc_BAE6
.text:000000000000BE4F                 and     qword ptr [rsp+138h+var_A8], 0FFFFFFFFFFFFFFFEh
.text:000000000000BE58                 jmp     loc_BAE6
.text:000000000000BE58 ; ---------------------------------------------------------------------------
.text:000000000000BE5D                 align 20h
.text:000000000000BE60
.text:000000000000BE60 loc_BE60:                               ; CODE XREF: build_trtable+471↑j
.text:000000000000BE60                 mov     rdx, qword ptr [rsp+138h+var_A8]
.text:000000000000BE68                 pxor    xmm0, xmm0
.text:000000000000BE6C                 and     dh, 4
.text:000000000000BE6F                 movaps  xmmword ptr [r12], xmm0
.text:000000000000BE74                 movaps  xmmword ptr [r12+10h], xmm0
.text:000000000000BE7A                 jz      loc_B77F
.text:000000000000BE80                 mov     qword ptr [rsp+138h+var_A8], 400h
.text:000000000000BE8C                 jmp     loc_BAF7
.text:000000000000BE91 ; ---------------------------------------------------------------------------
.text:000000000000BE91
.text:000000000000BE91 loc_BE91:                               ; CODE XREF: build_trtable+4DD↑j
.text:000000000000BE91                 test    byte ptr [r13+0Ah], 40h
.text:000000000000BE96                 jnz     loc_BD94
.text:000000000000BE9C                 mov     rdi, [rsp+138h+var_108]
.text:000000000000BEA1                 cmp     dword ptr [rdi+0B4h], 1
.text:000000000000BEA8                 jg      loc_BB75
.text:000000000000BEAE
.text:000000000000BEAE loc_BEAE:                               ; CODE XREF: build_trtable+4EF↑j
.text:000000000000BEAE                 mov     rsi, [rsp+138h+var_108]
.text:000000000000BEB3                 xor     ecx, ecx
.text:000000000000BEB5                 xor     edx, edx
.text:000000000000BEB7
.text:000000000000BEB7 loc_BEB7:                               ; CODE XREF: build_trtable+855↓j
.text:000000000000BEB7                 mov     rax, [rsi+rdx*8+0B8h]
.text:000000000000BEBF                 not     rax
.text:000000000000BEC2                 and     rax, [r12+rdx*8]
.text:000000000000BEC6                 mov     [r12+rdx*8], rax
.text:000000000000BECA                 add     rdx, 1
.text:000000000000BECE                 or      rcx, rax
.text:000000000000BED1                 cmp     rdx, 4
.text:000000000000BED5                 jnz     short loc_BEB7
.text:000000000000BED7                 test    rcx, rcx
.text:000000000000BEDA                 jnz     loc_BBB0
.text:000000000000BEE0                 jmp     loc_B77F
.text:000000000000BEE5 ; ---------------------------------------------------------------------------
.text:000000000000BEE5
.text:000000000000BEE5 loc_BEE5:                               ; CODE XREF: build_trtable+487↑j
.text:000000000000BEE5                 test    byte ptr [r13+0Ah], 40h
.text:000000000000BEEA                 jz      loc_BD94
.text:000000000000BEF0                 mov     r8, [rsp+138h+var_108]
.text:000000000000BEF5                 cmp     dword ptr [r8+0B4h], 1
.text:000000000000BEFD                 jg      loc_BB20
.text:000000000000BF03                 jmp     short loc_BF72
.text:000000000000BF05 ; ---------------------------------------------------------------------------
.text:000000000000BF05
.text:000000000000BF05 loc_BF05:                               ; CODE XREF: build_trtable+77C↑j
.text:000000000000BF05                 pcmpeqd xmm0, xmm0
.text:000000000000BF09                 lea     r12, [rsp+138h+var_A8]
.text:000000000000BF11                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000BF19                 movaps  [rsp+138h+var_98], xmm0
.text:000000000000BF21                 jmp     loc_BE26
.text:000000000000BF21 ; ---------------------------------------------------------------------------
.text:000000000000BF26                 align 10h
.text:000000000000BF30
.text:000000000000BF30 loc_BF30:                               ; CODE XREF: build_trtable+E5↑j
.text:000000000000BF30                 mov     rsi, [r13+0]
.text:000000000000BF34                 lea     r12, [rsp+138h+var_A8]
.text:000000000000BF3C                 xor     edx, edx
.text:000000000000BF3E
.text:000000000000BF3E loc_BF3E:                               ; CODE XREF: build_trtable+8D2↓j
.text:000000000000BF3E                 mov     rcx, [r12+rdx]
.text:000000000000BF42                 or      rcx, [rsi+rdx]
.text:000000000000BF46                 mov     [r12+rdx], rcx
.text:000000000000BF4A                 add     rdx, 8
.text:000000000000BF4E                 cmp     rdx, 20h ; ' '
.text:000000000000BF52                 jnz     short loc_BF3E
.text:000000000000BF54                 jmp     loc_BAE6
.text:000000000000BF59 ; ---------------------------------------------------------------------------
.text:000000000000BF59
.text:000000000000BF59 loc_BF59:                               ; CODE XREF: build_trtable+F9↑j
.text:000000000000BF59                 pcmpeqd xmm0, xmm0
.text:000000000000BF5D                 lea     r12, [rsp+138h+var_A8]
.text:000000000000BF65                 movaps  [rsp+138h+var_A8], xmm0
.text:000000000000BF6D                 jmp     loc_BE26
.text:000000000000BF72 ; ---------------------------------------------------------------------------
.text:000000000000BF72
.text:000000000000BF72 loc_BF72:                               ; CODE XREF: build_trtable+49A↑j
.text:000000000000BF72                                         ; build_trtable+883↑j
.text:000000000000BF72                 mov     rdi, [rsp+138h+var_108]
.text:000000000000BF77                 xor     esi, esi
.text:000000000000BF79                 xor     edx, edx
.text:000000000000BF7B
.text:000000000000BF7B loc_BF7B:                               ; CODE XREF: build_trtable+916↓j
.text:000000000000BF7B                 mov     rcx, [r12+rdx*8]
.text:000000000000BF7F                 and     rcx, [rdi+rdx*8+0B8h]
.text:000000000000BF87                 mov     [r12+rdx*8], rcx
.text:000000000000BF8B                 add     rdx, 1
.text:000000000000BF8F                 or      rsi, rcx
.text:000000000000BF92                 cmp     rdx, 4
.text:000000000000BF96                 jnz     short loc_BF7B
.text:000000000000BF98                 test    rsi, rsi
.text:000000000000BF9B                 jnz     loc_BB55
.text:000000000000BFA1                 jmp     loc_B77F
.text:000000000000BFA6 ; ---------------------------------------------------------------------------
.text:000000000000BFA6
.text:000000000000BFA6 loc_BFA6:                               ; CODE XREF: build_trtable+9B1↓j
.text:000000000000BFA6                 mov     edx, [rsp+138h+var_CC]
.text:000000000000BFAA                 test    edx, edx
.text:000000000000BFAC                 jz      loc_C037
.text:000000000000BFB2                 nop     word ptr [rax+rax+00h]
.text:000000000000BFB8
.text:000000000000BFB8 loc_BFB8:                               ; CODE XREF: build_trtable+238↑j
.text:000000000000BFB8                                         ; build_trtable+A0E↓j ...
.text:000000000000BFB8                 mov     rbp, [rsp+138h+var_118]
.text:000000000000BFBD
.text:000000000000BFBD loc_BFBD:                               ; CODE XREF: build_trtable+2FE↑j
.text:000000000000BFBD                                         ; build_trtable+A47↓j
.text:000000000000BFBD                 mov     rdi, [rsp+138h+ptr] ; ptr
.text:000000000000BFC2                 call    _free
.text:000000000000BFC7                 mov     r12, [rsp+138h+var_B8]
.text:000000000000BFCF
.text:000000000000BFCF loc_BFCF:                               ; CODE XREF: build_trtable+14F↑j
.text:000000000000BFCF                                         ; build_trtable+16A↑j ...
.text:000000000000BFCF                 mov     rdi, r12        ; ptr
.text:000000000000BFD2                 call    _free
.text:000000000000BFD7                 mov     rax, [rsp+138h+var_120]
.text:000000000000BFDC                 lea     rbx, [rax+10h]
.text:000000000000BFE0                 lea     rax, [rbp+rbp*2+0]
.text:000000000000BFE5                 lea     rbp, [rbx+rax*8]
.text:000000000000BFE9                 nop     dword ptr [rax+00000000h]
.text:000000000000BFF0
.text:000000000000BFF0 loc_BFF0:                               ; CODE XREF: build_trtable+97F↓j
.text:000000000000BFF0                 mov     rdi, [rbx]      ; ptr
.text:000000000000BFF3                 add     rbx, 18h
.text:000000000000BFF7                 call    _free
.text:000000000000BFFC                 cmp     rbp, rbx
.text:000000000000BFFF                 jnz     short loc_BFF0
.text:000000000000C001                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000C006                 call    _free
.text:000000000000C00B                 jmp     loc_BA90
.text:000000000000C010 ; ---------------------------------------------------------------------------
.text:000000000000C010
.text:000000000000C010 loc_C010:                               ; CODE XREF: build_trtable+270↑j
.text:000000000000C010                 mov     rdi, [rsp+138h+var_110]
.text:000000000000C015                 mov     ecx, 1
.text:000000000000C01A                 mov     rdx, r14
.text:000000000000C01D                 mov     rsi, rbp
.text:000000000000C020                 call    re_acquire_state_context
.text:000000000000C025                 mov     rdi, [rsp+138h+var_108]
.text:000000000000C02A                 test    rax, rax
.text:000000000000C02D                 mov     [rdi+rbx*8], rax
.text:000000000000C031                 jz      loc_BFA6
.text:000000000000C037
.text:000000000000C037 loc_C037:                               ; CODE XREF: build_trtable+92C↑j
.text:000000000000C037                 mov     rdi, [rsp+138h+ptr]
.text:000000000000C03C                 cmp     rax, [rdi+rbx*8]
.text:000000000000C040                 jz      short loc_C05B
.text:000000000000C042                 movzx   edi, [rsp+138h+var_E9]
.text:000000000000C047                 cmp     dword ptr [rbp+0B4h], 2
.text:000000000000C04E                 mov     eax, 1
.text:000000000000C053                 cmovge  edi, eax
.text:000000000000C056                 mov     [rsp+138h+var_E9], dil
.text:000000000000C05B
.text:000000000000C05B loc_C05B:                               ; CODE XREF: build_trtable+9C0↑j
.text:000000000000C05B                 mov     rdi, [rsp+138h+var_110]
.text:000000000000C060                 mov     rsi, rbp
.text:000000000000C063                 mov     ecx, 2
.text:000000000000C068                 mov     rdx, r14
.text:000000000000C06B                 call    re_acquire_state_context
.text:000000000000C070                 mov     rsi, [rsp+138h+var_100]
.text:000000000000C075                 test    rax, rax
.text:000000000000C078                 mov     [rsi+rbx*8], rax
.text:000000000000C07C                 jnz     loc_B911
.text:000000000000C082                 mov     eax, [rsp+138h+var_CC]
.text:000000000000C086                 test    eax, eax
.text:000000000000C088                 jz      loc_B911
.text:000000000000C08E                 jmp     loc_BFB8
.text:000000000000C08E ; ---------------------------------------------------------------------------
.text:000000000000C093                 align 8
.text:000000000000C098
.text:000000000000C098 loc_C098:                               ; CODE XREF: build_trtable+266↑j
.text:000000000000C098                 mov     ecx, [rsp+138h+var_CC]
.text:000000000000C09C                 test    ecx, ecx
.text:000000000000C09E                 jz      loc_B8EC
.text:000000000000C0A4                 jmp     loc_BFB8
.text:000000000000C0A9 ; ---------------------------------------------------------------------------
.text:000000000000C0A9
.text:000000000000C0A9 loc_C0A9:                               ; CODE XREF: build_trtable+2DA↑j
.text:000000000000C0A9                 mov     esi, 200h       ; size
.text:000000000000C0AE                 mov     edi, 8          ; nmemb
.text:000000000000C0B3                 call    _calloc
.text:000000000000C0B8                 mov     r11, rax
.text:000000000000C0BB                 mov     rax, [rsp+138h+var_130]
.text:000000000000C0C0                 test    r11, r11
.text:000000000000C0C3                 mov     [rax+60h], r11
.text:000000000000C0C7                 jz      loc_BFBD
.text:000000000000C0CD                 mov     r13, [rsp+138h+var_F8]
.text:000000000000C0D2                 mov     r10, [rsp+138h+ptr]
.text:000000000000C0D7                 mov     r12, r11
.text:000000000000C0DA                 mov     r14, [rsp+138h+var_108]
.text:000000000000C0DF                 mov     rdx, [rsp+138h+var_118]
.text:000000000000C0E4                 xor     ebx, ebx
.text:000000000000C0E6                 add     r13, 20h ; ' '
.text:000000000000C0EA
.text:000000000000C0EA loc_C0EA:                               ; CODE XREF: build_trtable+A9E↓j
.text:000000000000C0EA                 mov     rax, [rdx+rbx]
.text:000000000000C0EE                 test    rax, rax
.text:000000000000C0F1                 jz      short loc_C10F
.text:000000000000C0F3                 mov     rsi, r12
.text:000000000000C0F6                 mov     ecx, 1
.text:000000000000C0FB
.text:000000000000C0FB loc_C0FB:                               ; CODE XREF: build_trtable+A8D↓j
.text:000000000000C0FB                 test    al, 1
.text:000000000000C0FD                 jnz     loc_C1AC
.text:000000000000C103
.text:000000000000C103 loc_C103:                               ; CODE XREF: build_trtable+B6B↓j
.text:000000000000C103                 add     rcx, rcx
.text:000000000000C106                 add     rsi, 8
.text:000000000000C10A                 shr     rax, 1
.text:000000000000C10D                 jnz     short loc_C0FB
.text:000000000000C10F
.text:000000000000C10F loc_C10F:                               ; CODE XREF: build_trtable+A71↑j
.text:000000000000C10F                 add     rbx, 8
.text:000000000000C113                 add     r12, 200h
.text:000000000000C11A                 cmp     rbx, 20h ; ' '
.text:000000000000C11E                 jnz     short loc_C0EA
.text:000000000000C120                 jmp     loc_B9DE
.text:000000000000C120 ; ---------------------------------------------------------------------------
.text:000000000000C125                 align 8
.text:000000000000C128
.text:000000000000C128 loc_C128:                               ; CODE XREF: build_trtable+342↑j
.text:000000000000C128                 mov     rdi, [rsp+138h+var_120]
.text:000000000000C12D                 test    [rdi+r9+1800h], rcx
.text:000000000000C135                 jnz     short loc_C1A7
.text:000000000000C137                 lea     rdi, [rbx+r9]
.text:000000000000C13B                 xor     r8d, r8d
.text:000000000000C13E                 xchg    ax, ax
.text:000000000000C140
.text:000000000000C140 loc_C140:                               ; CODE XREF: build_trtable+AD1↓j
.text:000000000000C140                 mov     r10, [rdi]
.text:000000000000C143                 add     r8, 1
.text:000000000000C147                 add     rdi, 20h ; ' '
.text:000000000000C14B                 and     r10, rcx
.text:000000000000C14E                 test    r10, r10
.text:000000000000C151                 jz      short loc_C140
.text:000000000000C153                 shl     r8, 3
.text:000000000000C157
.text:000000000000C157 loc_C157:                               ; CODE XREF: build_trtable+B2A↓j
.text:000000000000C157                 test    [r15+r9+0B8h], rcx
.text:000000000000C15F                 jz      short loc_C16E
.text:000000000000C161                 mov     rdi, [r13+r8+0]
.text:000000000000C166                 mov     [rsi], rdi
.text:000000000000C169                 jmp     loc_B9C8
.text:000000000000C16E ; ---------------------------------------------------------------------------
.text:000000000000C16E
.text:000000000000C16E loc_C16E:                               ; CODE XREF: build_trtable+ADF↑j
.text:000000000000C16E                 mov     rdi, [r12+r8]
.text:000000000000C172                 mov     [rsi], rdi
.text:000000000000C175                 jmp     loc_B9C8
.text:000000000000C17A ; ---------------------------------------------------------------------------
.text:000000000000C17A
.text:000000000000C17A loc_C17A:                               ; CODE XREF: build_trtable+83↑j
.text:000000000000C17A                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000C17F                 call    _free
.text:000000000000C184
.text:000000000000C184 loc_C184:                               ; CODE XREF: build_trtable+B8C↓j
.text:000000000000C184                 mov     esi, 100h       ; size
.text:000000000000C189                 mov     edi, 8          ; nmemb
.text:000000000000C18E                 call    _calloc
.text:000000000000C193                 mov     rbx, [rsp+138h+var_130]
.text:000000000000C198                 test    rax, rax
.text:000000000000C19B                 mov     [rbx+58h], rax
.text:000000000000C19F                 setnz   al
.text:000000000000C1A2                 jmp     loc_BA92
.text:000000000000C1A7 ; ---------------------------------------------------------------------------
.text:000000000000C1A7
.text:000000000000C1A7 loc_C1A7:                               ; CODE XREF: build_trtable+AB5↑j
.text:000000000000C1A7                 xor     r8d, r8d
.text:000000000000C1AA                 jmp     short loc_C157
.text:000000000000C1AC ; ---------------------------------------------------------------------------
.text:000000000000C1AC
.text:000000000000C1AC loc_C1AC:                               ; CODE XREF: build_trtable+A7D↑j
.text:000000000000C1AC                 mov     rdi, [rsp+138h+var_120]
.text:000000000000C1B1                 test    [rdi+rbx+1800h], rcx
.text:000000000000C1B9                 jnz     short loc_C1F0
.text:000000000000C1BB                 lea     r9, [r13+rbx+0]
.text:000000000000C1C0                 xor     r8d, r8d
.text:000000000000C1C3
.text:000000000000C1C3 loc_C1C3:                               ; CODE XREF: build_trtable+B57↓j
.text:000000000000C1C3                 mov     r15, [r9]
.text:000000000000C1C6                 add     r8, 1
.text:000000000000C1CA                 add     r9, 20h ; ' '
.text:000000000000C1CE                 mov     rdi, r8
.text:000000000000C1D1                 and     r15, rcx
.text:000000000000C1D4                 test    r15, r15
.text:000000000000C1D7                 jz      short loc_C1C3
.text:000000000000C1D9
.text:000000000000C1D9 loc_C1D9:                               ; CODE XREF: build_trtable+B72↓j
.text:000000000000C1D9                 mov     r8, [r10+rdi*8]
.text:000000000000C1DD                 mov     [rsi], r8
.text:000000000000C1E0                 mov     rdi, [r14+rdi*8]
.text:000000000000C1E4                 mov     [rsi+800h], rdi
.text:000000000000C1EB                 jmp     loc_C103
.text:000000000000C1F0 ; ---------------------------------------------------------------------------
.text:000000000000C1F0
.text:000000000000C1F0 loc_C1F0:                               ; CODE XREF: build_trtable+B39↑j
.text:000000000000C1F0                 xor     edi, edi
.text:000000000000C1F2                 jmp     short loc_C1D9
.text:000000000000C1F4 ; ---------------------------------------------------------------------------
.text:000000000000C1F4
.text:000000000000C1F4 loc_C1F4:                               ; CODE XREF: build_trtable+423↑j
.text:000000000000C1F4                 call    ___stack_chk_fail
.text:000000000000C1F9 ; ---------------------------------------------------------------------------
.text:000000000000C1F9
.text:000000000000C1F9 loc_C1F9:                               ; CODE XREF: build_trtable+11D↑j
.text:000000000000C1F9                 mov     rdi, [rsp+138h+var_120] ; ptr
.text:000000000000C1FE                 call    _free
.text:000000000000C203                 test    rbp, rbp
.text:000000000000C206                 jnz     loc_BA90
.text:000000000000C20C                 jmp     loc_C184
.text:000000000000C20C ; } // starts at B680
.text:000000000000C20C build_trtable   endp
.text:000000000000C20C
.text:000000000000C20C ; ---------------------------------------------------------------------------
.text:000000000000C211                 align 20h
.text:000000000000C220
.text:000000000000C220 ; =============== S U B R O U T I N E =======================================
.text:000000000000C220
.text:000000000000C220
.text:000000000000C220 calc_first      proc near               ; DATA XREF: re_compile_internal+67E↓o
.text:000000000000C220 ; __unwind {
.text:000000000000C220                 cmp     byte ptr [rsi+30h], 10h
.text:000000000000C224                 jz      short loc_C288
.text:000000000000C226                 push    rbp
.text:000000000000C227                 push    rbx
.text:000000000000C228                 mov     rbx, rsi
.text:000000000000C22B                 mov     rbp, rdi
.text:000000000000C22E                 sub     rsp, 8
.text:000000000000C232                 mov     [rbx+18h], rsi
.text:000000000000C236                 mov     rdx, [rbx+30h]
.text:000000000000C23A                 mov     rsi, [rsi+28h]
.text:000000000000C23E                 call    re_dfa_add_node
.text:000000000000C243                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000C247                 mov     rdx, rax
.text:000000000000C24A                 mov     [rbx+38h], rax
.text:000000000000C24E                 jz      short loc_C2A0
.text:000000000000C250                 xor     eax, eax
.text:000000000000C252                 cmp     byte ptr [rbx+30h], 0Ch
.text:000000000000C256                 jnz     short loc_C27C
.text:000000000000C258                 mov     ecx, [rbx+28h]
.text:000000000000C25B                 shl     rdx, 4
.text:000000000000C25F                 add     rdx, [rbp+0]
.text:000000000000C263                 and     ecx, 3FFh
.text:000000000000C269                 shl     ecx, 8
.text:000000000000C26C                 mov     esi, ecx
.text:000000000000C26E                 mov     ecx, [rdx+8]
.text:000000000000C271                 and     ecx, 0FFFC00FFh
.text:000000000000C277                 or      ecx, esi
.text:000000000000C279                 mov     [rdx+8], ecx
.text:000000000000C27C
.text:000000000000C27C loc_C27C:                               ; CODE XREF: calc_first+36↑j
.text:000000000000C27C                                         ; calc_first+85↓j
.text:000000000000C27C                 add     rsp, 8
.text:000000000000C280                 pop     rbx
.text:000000000000C281                 pop     rbp
.text:000000000000C282                 retn
.text:000000000000C282 ; ---------------------------------------------------------------------------
.text:000000000000C283                 align 8
.text:000000000000C288
.text:000000000000C288 loc_C288:                               ; CODE XREF: calc_first+4↑j
.text:000000000000C288                 mov     rax, [rsi+8]
.text:000000000000C28C                 mov     rdx, [rax+18h]
.text:000000000000C290                 mov     rax, [rax+38h]
.text:000000000000C294                 mov     [rsi+18h], rdx
.text:000000000000C298                 mov     [rsi+38h], rax
.text:000000000000C29C                 xor     eax, eax
.text:000000000000C29E                 retn
.text:000000000000C29E ; ---------------------------------------------------------------------------
.text:000000000000C29F                 align 20h
.text:000000000000C2A0
.text:000000000000C2A0 loc_C2A0:                               ; CODE XREF: calc_first+2E↑j
.text:000000000000C2A0                 mov     eax, 0Ch
.text:000000000000C2A5                 jmp     short loc_C27C
.text:000000000000C2A5 ; } // starts at C220
.text:000000000000C2A5 calc_first      endp
.text:000000000000C2A5
.text:000000000000C2A5 ; ---------------------------------------------------------------------------
.text:000000000000C2A7                 align 10h
.text:000000000000C2B0
.text:000000000000C2B0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C2B0
.text:000000000000C2B0
.text:000000000000C2B0 free_fail_stack_return_part_24 proc near
.text:000000000000C2B0                                         ; CODE XREF: set_regs+4FF↓p
.text:000000000000C2B0                                         ; set_regs+567↓p ...
.text:000000000000C2B0 ; __unwind {
.text:000000000000C2B0                 push    r12
.text:000000000000C2B2                 push    rbp
.text:000000000000C2B3                 mov     rbp, rdi
.text:000000000000C2B6                 push    rbx
.text:000000000000C2B7                 cmp     qword ptr [rdi], 0
.text:000000000000C2BB                 jle     short loc_C2F2
.text:000000000000C2BD                 xor     ebx, ebx
.text:000000000000C2BF                 xor     r12d, r12d
.text:000000000000C2C2                 nop     word ptr [rax+rax+00h]
.text:000000000000C2C8
.text:000000000000C2C8 loc_C2C8:                               ; CODE XREF: free_fail_stack_return_part_24+40↓j
.text:000000000000C2C8                 mov     rax, [rbp+10h]
.text:000000000000C2CC                 add     r12, 1
.text:000000000000C2D0                 mov     rdi, [rax+rbx+28h] ; ptr
.text:000000000000C2D5                 call    _free
.text:000000000000C2DA                 mov     rax, [rbp+10h]
.text:000000000000C2DE                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000C2E3                 add     rbx, 30h ; '0'
.text:000000000000C2E7                 call    _free
.text:000000000000C2EC                 cmp     r12, [rbp+0]
.text:000000000000C2F0                 jl      short loc_C2C8
.text:000000000000C2F2
.text:000000000000C2F2 loc_C2F2:                               ; CODE XREF: free_fail_stack_return_part_24+B↑j
.text:000000000000C2F2                 pop     rbx
.text:000000000000C2F3                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000C2F7                 pop     rbp
.text:000000000000C2F8                 pop     r12
.text:000000000000C2FA                 jmp     _free
.text:000000000000C2FA ; } // starts at C2B0
.text:000000000000C2FA free_fail_stack_return_part_24 endp
.text:000000000000C2FA
.text:000000000000C2FA ; ---------------------------------------------------------------------------
.text:000000000000C2FF                 align 20h
.text:000000000000C300
.text:000000000000C300 ; =============== S U B R O U T I N E =======================================
.text:000000000000C300
.text:000000000000C300
.text:000000000000C300 pop_fail_stack_isra_25 proc near        ; CODE XREF: set_regs+5B3↓p
.text:000000000000C300                                         ; set_regs+606↓p
.text:000000000000C300 ; __unwind {
.text:000000000000C300                 push    r12
.text:000000000000C302                 push    rbp
.text:000000000000C303                 push    rbx
.text:000000000000C304                 mov     rax, [rdi]
.text:000000000000C307                 sub     rax, 1
.text:000000000000C30B                 test    rax, rax
.text:000000000000C30E                 mov     [rdi], rax
.text:000000000000C311                 js      short loc_C375
.text:000000000000C313                 lea     rbx, [rax+rax*2]
.text:000000000000C317                 mov     rax, [rsi]
.text:000000000000C31A                 mov     r12, rsi
.text:000000000000C31D                 shl     rcx, 4
.text:000000000000C321                 mov     rbp, r9
.text:000000000000C324                 mov     rdi, r8         ; dest
.text:000000000000C327                 shl     rbx, 4
.text:000000000000C32B                 add     rax, rbx
.text:000000000000C32E                 mov     rsi, [rax]
.text:000000000000C331                 mov     [rdx], rsi
.text:000000000000C334                 mov     rsi, [rax+10h]  ; src
.text:000000000000C338                 mov     rdx, rcx        ; n
.text:000000000000C33B                 call    _memcpy
.text:000000000000C340                 mov     rdi, [rbp+10h]  ; ptr
.text:000000000000C344                 call    _free
.text:000000000000C349                 mov     rax, [r12]
.text:000000000000C34D                 mov     rdi, [rax+rbx+10h] ; ptr
.text:000000000000C352                 call    _free
.text:000000000000C357                 add     rbx, [r12]
.text:000000000000C35B                 movdqu  xmm0, xmmword ptr [rbx+18h]
.text:000000000000C360                 movaps  xmmword ptr [rbp+0], xmm0
.text:000000000000C364                 mov     rax, [rbx+28h]
.text:000000000000C368                 mov     [rbp+10h], rax
.text:000000000000C36C                 mov     rax, [rbx+8]
.text:000000000000C370                 pop     rbx
.text:000000000000C371                 pop     rbp
.text:000000000000C372                 pop     r12
.text:000000000000C374                 retn
.text:000000000000C375 ; ---------------------------------------------------------------------------
.text:000000000000C375
.text:000000000000C375 loc_C375:                               ; CODE XREF: pop_fail_stack_isra_25+11↑j
.text:000000000000C375                 lea     rcx, __PRETTY_FUNCTION___8040 ; "pop_fail_stack"
.text:000000000000C37C                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000000C383                 lea     rdi, aNum0      ; "num >= 0"
.text:000000000000C38A                 mov     edx, 555h       ; line
.text:000000000000C38F                 call    ___assert_fail
.text:000000000000C38F ; } // starts at C300
.text:000000000000C38F pop_fail_stack_isra_25 endp
.text:000000000000C38F
.text:000000000000C38F ; ---------------------------------------------------------------------------
.text:000000000000C394                 align 20h
.text:000000000000C3A0
.text:000000000000C3A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C3A0
.text:000000000000C3A0
.text:000000000000C3A0 build_equiv_class_isra_27 proc near     ; CODE XREF: parse_expression+C30↓p
.text:000000000000C3A0                                         ; parse_expression+C68↓p
.text:000000000000C3A0 ; __unwind {
.text:000000000000C3A0                 push    rbp
.text:000000000000C3A1                 push    rbx
.text:000000000000C3A2                 mov     rbp, rdi
.text:000000000000C3A5                 mov     rdi, rsi        ; s
.text:000000000000C3A8                 mov     rbx, rsi
.text:000000000000C3AB                 sub     rsp, 8
.text:000000000000C3AF                 call    _strlen
.text:000000000000C3B4                 cmp     rax, 1
.text:000000000000C3B8                 jnz     short loc_C3E0
.text:000000000000C3BA                 movzx   ecx, byte ptr [rbx]
.text:000000000000C3BD                 mov     rdx, rcx
.text:000000000000C3C0                 and     ecx, 3Fh
.text:000000000000C3C3                 shr     rdx, 3
.text:000000000000C3C7                 shl     rax, cl
.text:000000000000C3CA                 and     edx, 18h
.text:000000000000C3CD                 or      [rbp+rdx+0], rax
.text:000000000000C3D2                 add     rsp, 8
.text:000000000000C3D6                 xor     eax, eax
.text:000000000000C3D8                 pop     rbx
.text:000000000000C3D9                 pop     rbp
.text:000000000000C3DA                 retn
.text:000000000000C3DA ; ---------------------------------------------------------------------------
.text:000000000000C3DB                 align 20h
.text:000000000000C3E0
.text:000000000000C3E0 loc_C3E0:                               ; CODE XREF: build_equiv_class_isra_27+18↑j
.text:000000000000C3E0                 add     rsp, 8
.text:000000000000C3E4                 mov     eax, 3
.text:000000000000C3E9                 pop     rbx
.text:000000000000C3EA                 pop     rbp
.text:000000000000C3EB                 retn
.text:000000000000C3EB ; } // starts at C3A0
.text:000000000000C3EB build_equiv_class_isra_27 endp
.text:000000000000C3EB
.text:000000000000C3EB ; ---------------------------------------------------------------------------
.text:000000000000C3EC                 align 10h
.text:000000000000C3F0
.text:000000000000C3F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000C3F0
.text:000000000000C3F0
.text:000000000000C3F0 build_charclass_isra_29 proc near       ; CODE XREF: build_charclass_op+A3↓p
.text:000000000000C3F0                                         ; parse_expression+D1D↓p
.text:000000000000C3F0
.text:000000000000C3F0 var_38          = qword ptr -38h
.text:000000000000C3F0 var_30          = qword ptr -30h
.text:000000000000C3F0 arg_0           = qword ptr  8
.text:000000000000C3F0
.text:000000000000C3F0 ; __unwind {
.text:000000000000C3F0                 push    r14
.text:000000000000C3F2                 push    r13
.text:000000000000C3F4                 mov     r13, rcx
.text:000000000000C3F7                 push    r12
.text:000000000000C3F9                 push    rbp
.text:000000000000C3FA                 mov     r12, r9
.text:000000000000C3FD                 push    rbx
.text:000000000000C3FE                 mov     rbp, rdi
.text:000000000000C401                 mov     rbx, rsi
.text:000000000000C404                 sub     rsp, 10h
.text:000000000000C408                 test    [rsp+38h+arg_0], 400000h
.text:000000000000C411                 jz      short loc_C438
.text:000000000000C413                 lea     rdi, aUpper     ; "upper"
.text:000000000000C41A                 mov     ecx, 6
.text:000000000000C41F                 mov     rsi, r9
.text:000000000000C422                 repe cmpsb
.text:000000000000C424                 setnbe  al
.text:000000000000C427                 sbb     al, 0
.text:000000000000C429                 test    al, al
.text:000000000000C42B                 jnz     loc_C526
.text:000000000000C431                 lea     r12, aAlpha     ; "alpha"
.text:000000000000C438
.text:000000000000C438 loc_C438:                               ; CODE XREF: build_charclass_isra_29+21↑j
.text:000000000000C438                 mov     rcx, [r13+0]
.text:000000000000C43C                 cmp     [r8], rcx
.text:000000000000C43F                 mov     rax, [rdx]
.text:000000000000C442                 jz      loc_C559
.text:000000000000C448
.text:000000000000C448 loc_C448:                               ; CODE XREF: build_charclass_isra_29+163↓j
.text:000000000000C448                                         ; build_charclass_isra_29+1A3↓j
.text:000000000000C448                 lea     rdx, [rcx+1]
.text:000000000000C44C                 mov     rdi, r12        ; property
.text:000000000000C44F                 mov     [r13+0], rdx
.text:000000000000C453                 lea     r13, [rax+rcx*8]
.text:000000000000C457                 call    _wctype
.text:000000000000C45C                 lea     rdi, aAlnum     ; "alnum"
.text:000000000000C463                 mov     [r13+0], rax
.text:000000000000C467                 mov     ecx, 6
.text:000000000000C46C                 mov     rsi, r12
.text:000000000000C46F                 repe cmpsb
.text:000000000000C471                 setnbe  al
.text:000000000000C474                 sbb     al, 0
.text:000000000000C476                 test    al, al
.text:000000000000C478                 jz      short loc_C4E8
.text:000000000000C47A                 lea     rdi, aCntrl     ; "cntrl"
.text:000000000000C481                 mov     ecx, 6
.text:000000000000C486                 mov     rsi, r12
.text:000000000000C489                 repe cmpsb
.text:000000000000C48B                 setnbe  al
.text:000000000000C48E                 sbb     al, 0
.text:000000000000C490                 test    al, al
.text:000000000000C492                 jnz     loc_C598
.text:000000000000C498                 call    ___ctype_b_loc
.text:000000000000C49D                 xor     ecx, ecx
.text:000000000000C49F                 test    rbp, rbp
.text:000000000000C4A2                 mov     rdx, [rax]
.text:000000000000C4A5                 mov     edi, 1
.text:000000000000C4AA                 jnz     loc_C76A
.text:000000000000C4B0
.text:000000000000C4B0 loc_C4B0:                               ; CODE XREF: build_charclass_isra_29+E2↓j
.text:000000000000C4B0                 test    byte ptr [rdx+rcx*2], 2
.text:000000000000C4B4                 jz      short loc_C4C7
.text:000000000000C4B6                 mov     rax, rcx
.text:000000000000C4B9                 mov     rsi, rdi
.text:000000000000C4BC                 sar     rax, 6
.text:000000000000C4C0                 shl     rsi, cl
.text:000000000000C4C3                 or      [rbx+rax*8], rsi
.text:000000000000C4C7
.text:000000000000C4C7 loc_C4C7:                               ; CODE XREF: build_charclass_isra_29+C4↑j
.text:000000000000C4C7                 add     rcx, 1
.text:000000000000C4CB                 cmp     rcx, 100h
.text:000000000000C4D2                 jnz     short loc_C4B0
.text:000000000000C4D4
.text:000000000000C4D4 loc_C4D4:                               ; CODE XREF: build_charclass_isra_29+134↓j
.text:000000000000C4D4                                         ; build_charclass_isra_29+225↓j ...
.text:000000000000C4D4                 xor     eax, eax
.text:000000000000C4D6
.text:000000000000C4D6 loc_C4D6:                               ; CODE XREF: build_charclass_isra_29+4AD↓j
.text:000000000000C4D6                                         ; build_charclass_isra_29+765↓j
.text:000000000000C4D6                 add     rsp, 10h
.text:000000000000C4DA                 pop     rbx
.text:000000000000C4DB                 pop     rbp
.text:000000000000C4DC                 pop     r12
.text:000000000000C4DE                 pop     r13
.text:000000000000C4E0                 pop     r14
.text:000000000000C4E2                 retn
.text:000000000000C4E2 ; ---------------------------------------------------------------------------
.text:000000000000C4E3                 align 8
.text:000000000000C4E8
.text:000000000000C4E8 loc_C4E8:                               ; CODE XREF: build_charclass_isra_29+88↑j
.text:000000000000C4E8                 call    ___ctype_b_loc
.text:000000000000C4ED                 xor     ecx, ecx
.text:000000000000C4EF                 test    rbp, rbp
.text:000000000000C4F2                 mov     rdx, [rax]
.text:000000000000C4F5                 mov     edi, 1
.text:000000000000C4FA                 jnz     loc_C6EA
.text:000000000000C500
.text:000000000000C500 loc_C500:                               ; CODE XREF: build_charclass_isra_29+132↓j
.text:000000000000C500                 test    byte ptr [rdx+rcx*2], 8
.text:000000000000C504                 jz      short loc_C517
.text:000000000000C506                 mov     rax, rcx
.text:000000000000C509                 mov     rsi, rdi
.text:000000000000C50C                 sar     rax, 6
.text:000000000000C510                 shl     rsi, cl
.text:000000000000C513                 or      [rbx+rax*8], rsi
.text:000000000000C517
.text:000000000000C517 loc_C517:                               ; CODE XREF: build_charclass_isra_29+114↑j
.text:000000000000C517                 add     rcx, 1
.text:000000000000C51B                 cmp     rcx, 100h
.text:000000000000C522                 jnz     short loc_C500
.text:000000000000C524                 jmp     short loc_C4D4
.text:000000000000C526 ; ---------------------------------------------------------------------------
.text:000000000000C526
.text:000000000000C526 loc_C526:                               ; CODE XREF: build_charclass_isra_29+3B↑j
.text:000000000000C526                 lea     rdi, aLower     ; "lower"
.text:000000000000C52D                 mov     ecx, 6
.text:000000000000C532                 mov     rsi, r9
.text:000000000000C535                 repe cmpsb
.text:000000000000C537                 mov     rcx, [r13+0]
.text:000000000000C53B                 setnbe  al
.text:000000000000C53E                 sbb     al, 0
.text:000000000000C540                 test    al, al
.text:000000000000C542                 lea     rax, aAlpha     ; "alpha"
.text:000000000000C549                 cmovz   r12, rax
.text:000000000000C54D                 cmp     [r8], rcx
.text:000000000000C550                 mov     rax, [rdx]
.text:000000000000C553                 jnz     loc_C448
.text:000000000000C559
.text:000000000000C559 loc_C559:                               ; CODE XREF: build_charclass_isra_29+52↑j
.text:000000000000C559                 lea     r14, [rcx+rcx+1]
.text:000000000000C55E                 mov     rdi, rax        ; ptr
.text:000000000000C561                 mov     [rsp+38h+var_30], r8
.text:000000000000C566                 mov     [rsp+38h+var_38], rdx
.text:000000000000C56A                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000C572                 call    _realloc
.text:000000000000C577                 test    rax, rax
.text:000000000000C57A                 jz      loc_C898
.text:000000000000C580                 mov     rdx, [rsp+38h+var_38]
.text:000000000000C584                 mov     r8, [rsp+38h+var_30]
.text:000000000000C589                 mov     [rdx], rax
.text:000000000000C58C                 mov     [r8], r14
.text:000000000000C58F                 mov     rcx, [r13+0]
.text:000000000000C593                 jmp     loc_C448
.text:000000000000C598 ; ---------------------------------------------------------------------------
.text:000000000000C598
.text:000000000000C598 loc_C598:                               ; CODE XREF: build_charclass_isra_29+A2↑j
.text:000000000000C598                 lea     rdi, aLower     ; "lower"
.text:000000000000C59F                 mov     ecx, 6
.text:000000000000C5A4                 mov     rsi, r12
.text:000000000000C5A7                 repe cmpsb
.text:000000000000C5A9                 setnbe  al
.text:000000000000C5AC                 sbb     al, 0
.text:000000000000C5AE                 test    al, al
.text:000000000000C5B0                 jz      short loc_C61A
.text:000000000000C5B2                 lea     rdi, aSpace     ; "space"
.text:000000000000C5B9                 mov     ecx, 6
.text:000000000000C5BE                 mov     rsi, r12
.text:000000000000C5C1                 repe cmpsb
.text:000000000000C5C3                 setnbe  al
.text:000000000000C5C6                 sbb     al, 0
.text:000000000000C5C8                 test    al, al
.text:000000000000C5CA                 jnz     loc_C662
.text:000000000000C5D0                 call    ___ctype_b_loc
.text:000000000000C5D5                 xor     ecx, ecx
.text:000000000000C5D7                 test    rbp, rbp
.text:000000000000C5DA                 mov     rdx, [rax]
.text:000000000000C5DD                 mov     edi, 1
.text:000000000000C5E2                 jnz     loc_C93E
.text:000000000000C5E8                 nop     dword ptr [rax+rax+00000000h]
.text:000000000000C5F0
.text:000000000000C5F0 loc_C5F0:                               ; CODE XREF: build_charclass_isra_29+223↓j
.text:000000000000C5F0                 test    byte ptr [rdx+rcx*2+1], 20h
.text:000000000000C5F5                 jz      short loc_C608
.text:000000000000C5F7                 mov     rax, rcx
.text:000000000000C5FA                 mov     rsi, rdi
.text:000000000000C5FD                 sar     rax, 6
.text:000000000000C601                 shl     rsi, cl
.text:000000000000C604                 or      [rbx+rax*8], rsi
.text:000000000000C608
.text:000000000000C608 loc_C608:                               ; CODE XREF: build_charclass_isra_29+205↑j
.text:000000000000C608                 add     rcx, 1
.text:000000000000C60C                 cmp     rcx, 100h
.text:000000000000C613                 jnz     short loc_C5F0
.text:000000000000C615                 jmp     loc_C4D4
.text:000000000000C61A ; ---------------------------------------------------------------------------
.text:000000000000C61A
.text:000000000000C61A loc_C61A:                               ; CODE XREF: build_charclass_isra_29+1C0↑j
.text:000000000000C61A                 call    ___ctype_b_loc
.text:000000000000C61F                 xor     ecx, ecx
.text:000000000000C621                 test    rbp, rbp
.text:000000000000C624                 mov     rdx, [rax]
.text:000000000000C627                 mov     edi, 1
.text:000000000000C62C                 jnz     loc_C802
.text:000000000000C632                 nop     word ptr [rax+rax+00h]
.text:000000000000C638
.text:000000000000C638 loc_C638:                               ; CODE XREF: build_charclass_isra_29+26B↓j
.text:000000000000C638                 test    byte ptr [rdx+rcx*2+1], 2
.text:000000000000C63D                 jz      short loc_C650
.text:000000000000C63F                 mov     rax, rcx
.text:000000000000C642                 mov     rsi, rdi
.text:000000000000C645                 sar     rax, 6
.text:000000000000C649                 shl     rsi, cl
.text:000000000000C64C                 or      [rbx+rax*8], rsi
.text:000000000000C650
.text:000000000000C650 loc_C650:                               ; CODE XREF: build_charclass_isra_29+24D↑j
.text:000000000000C650                 add     rcx, 1
.text:000000000000C654                 cmp     rcx, 100h
.text:000000000000C65B                 jnz     short loc_C638
.text:000000000000C65D                 jmp     loc_C4D4
.text:000000000000C662 ; ---------------------------------------------------------------------------
.text:000000000000C662
.text:000000000000C662 loc_C662:                               ; CODE XREF: build_charclass_isra_29+1DA↑j
.text:000000000000C662                 lea     rdi, aAlpha     ; "alpha"
.text:000000000000C669                 mov     ecx, 6
.text:000000000000C66E                 mov     rsi, r12
.text:000000000000C671                 repe cmpsb
.text:000000000000C673                 setnbe  al
.text:000000000000C676                 sbb     al, 0
.text:000000000000C678                 test    al, al
.text:000000000000C67A                 jz      loc_C723
.text:000000000000C680                 lea     rdi, aDigit     ; "digit"
.text:000000000000C687                 mov     ecx, 6
.text:000000000000C68C                 mov     rsi, r12
.text:000000000000C68F                 repe cmpsb
.text:000000000000C691                 setnbe  al
.text:000000000000C694                 sbb     al, 0
.text:000000000000C696                 test    al, al
.text:000000000000C698                 jnz     loc_C7A3
.text:000000000000C69E                 call    ___ctype_b_loc
.text:000000000000C6A3                 xor     ecx, ecx
.text:000000000000C6A5                 test    rbp, rbp
.text:000000000000C6A8                 mov     rdx, [rax]
.text:000000000000C6AB                 mov     edi, 1
.text:000000000000C6B0                 jnz     loc_CB5A
.text:000000000000C6B6                 db      2Eh
.text:000000000000C6B6                 nop     word ptr [rax+rax+00000000h]
.text:000000000000C6C0
.text:000000000000C6C0 loc_C6C0:                               ; CODE XREF: build_charclass_isra_29+2F3↓j
.text:000000000000C6C0                 test    byte ptr [rdx+rcx*2+1], 8
.text:000000000000C6C5                 jz      short loc_C6D8
.text:000000000000C6C7                 mov     rax, rcx
.text:000000000000C6CA                 mov     rsi, rdi
.text:000000000000C6CD                 sar     rax, 6
.text:000000000000C6D1                 shl     rsi, cl
.text:000000000000C6D4                 or      [rbx+rax*8], rsi
.text:000000000000C6D8
.text:000000000000C6D8 loc_C6D8:                               ; CODE XREF: build_charclass_isra_29+2D5↑j
.text:000000000000C6D8                 add     rcx, 1
.text:000000000000C6DC                 cmp     rcx, 100h
.text:000000000000C6E3                 jnz     short loc_C6C0
.text:000000000000C6E5                 jmp     loc_C4D4
.text:000000000000C6EA ; ---------------------------------------------------------------------------
.text:000000000000C6EA
.text:000000000000C6EA loc_C6EA:                               ; CODE XREF: build_charclass_isra_29+10A↑j
.text:000000000000C6EA                 xor     eax, eax
.text:000000000000C6EC                 nop     dword ptr [rax+00h]
.text:000000000000C6F0
.text:000000000000C6F0 loc_C6F0:                               ; CODE XREF: build_charclass_isra_29+32C↓j
.text:000000000000C6F0                 test    byte ptr [rdx+rax*2], 8
.text:000000000000C6F4                 jz      short loc_C712
.text:000000000000C6F6                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000C6FB                 mov     r10, rdi
.text:000000000000C6FE                 mov     rsi, rcx
.text:000000000000C701                 and     ecx, 3Fh
.text:000000000000C704                 shr     rsi, 3
.text:000000000000C708                 shl     r10, cl
.text:000000000000C70B                 and     esi, 18h
.text:000000000000C70E                 or      [rbx+rsi], r10
.text:000000000000C712
.text:000000000000C712 loc_C712:                               ; CODE XREF: build_charclass_isra_29+304↑j
.text:000000000000C712                 add     rax, 1
.text:000000000000C716                 cmp     rax, 100h
.text:000000000000C71C                 jnz     short loc_C6F0
.text:000000000000C71E                 jmp     loc_C4D4
.text:000000000000C723 ; ---------------------------------------------------------------------------
.text:000000000000C723
.text:000000000000C723 loc_C723:                               ; CODE XREF: build_charclass_isra_29+28A↑j
.text:000000000000C723                 call    ___ctype_b_loc
.text:000000000000C728                 xor     ecx, ecx
.text:000000000000C72A                 test    rbp, rbp
.text:000000000000C72D                 mov     rdx, [rax]
.text:000000000000C730                 mov     edi, 1
.text:000000000000C735                 jnz     loc_C908
.text:000000000000C73B                 nop     dword ptr [rax+rax+00h]
.text:000000000000C740
.text:000000000000C740 loc_C740:                               ; CODE XREF: build_charclass_isra_29+373↓j
.text:000000000000C740                 test    byte ptr [rdx+rcx*2+1], 4
.text:000000000000C745                 jz      short loc_C758
.text:000000000000C747                 mov     rax, rcx
.text:000000000000C74A                 mov     rsi, rdi
.text:000000000000C74D                 sar     rax, 6
.text:000000000000C751                 shl     rsi, cl
.text:000000000000C754                 or      [rbx+rax*8], rsi
.text:000000000000C758
.text:000000000000C758 loc_C758:                               ; CODE XREF: build_charclass_isra_29+355↑j
.text:000000000000C758                 add     rcx, 1
.text:000000000000C75C                 cmp     rcx, 100h
.text:000000000000C763                 jnz     short loc_C740
.text:000000000000C765                 jmp     loc_C4D4
.text:000000000000C76A ; ---------------------------------------------------------------------------
.text:000000000000C76A
.text:000000000000C76A loc_C76A:                               ; CODE XREF: build_charclass_isra_29+BA↑j
.text:000000000000C76A                 xor     eax, eax
.text:000000000000C76C                 nop     dword ptr [rax+00h]
.text:000000000000C770
.text:000000000000C770 loc_C770:                               ; CODE XREF: build_charclass_isra_29+3AC↓j
.text:000000000000C770                 test    byte ptr [rdx+rax*2], 2
.text:000000000000C774                 jz      short loc_C792
.text:000000000000C776                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000C77B                 mov     r11, rdi
.text:000000000000C77E                 mov     rsi, rcx
.text:000000000000C781                 and     ecx, 3Fh
.text:000000000000C784                 shr     rsi, 3
.text:000000000000C788                 shl     r11, cl
.text:000000000000C78B                 and     esi, 18h
.text:000000000000C78E                 or      [rbx+rsi], r11
.text:000000000000C792
.text:000000000000C792 loc_C792:                               ; CODE XREF: build_charclass_isra_29+384↑j
.text:000000000000C792                 add     rax, 1
.text:000000000000C796                 cmp     rax, 100h
.text:000000000000C79C                 jnz     short loc_C770
.text:000000000000C79E                 jmp     loc_C4D4
.text:000000000000C7A3 ; ---------------------------------------------------------------------------
.text:000000000000C7A3
.text:000000000000C7A3 loc_C7A3:                               ; CODE XREF: build_charclass_isra_29+2A8↑j
.text:000000000000C7A3                 lea     rdi, aPrint     ; "print"
.text:000000000000C7AA                 mov     ecx, 6
.text:000000000000C7AF                 mov     rsi, r12
.text:000000000000C7B2                 repe cmpsb
.text:000000000000C7B4                 setnbe  al
.text:000000000000C7B7                 sbb     al, 0
.text:000000000000C7B9                 test    al, al
.text:000000000000C7BB                 jnz     short loc_C83C
.text:000000000000C7BD                 call    ___ctype_b_loc
.text:000000000000C7C2                 xor     ecx, ecx
.text:000000000000C7C4                 test    rbp, rbp
.text:000000000000C7C7                 mov     rdx, [rax]
.text:000000000000C7CA                 mov     edi, 1
.text:000000000000C7CF                 jnz     loc_CBC7
.text:000000000000C7D5                 nop     dword ptr [rax]
.text:000000000000C7D8
.text:000000000000C7D8 loc_C7D8:                               ; CODE XREF: build_charclass_isra_29+40B↓j
.text:000000000000C7D8                 test    byte ptr [rdx+rcx*2+1], 40h
.text:000000000000C7DD                 jz      short loc_C7F0
.text:000000000000C7DF                 mov     rax, rcx
.text:000000000000C7E2                 mov     rsi, rdi
.text:000000000000C7E5                 sar     rax, 6
.text:000000000000C7E9                 shl     rsi, cl
.text:000000000000C7EC                 or      [rbx+rax*8], rsi
.text:000000000000C7F0
.text:000000000000C7F0 loc_C7F0:                               ; CODE XREF: build_charclass_isra_29+3ED↑j
.text:000000000000C7F0                 add     rcx, 1
.text:000000000000C7F4                 cmp     rcx, 100h
.text:000000000000C7FB                 jnz     short loc_C7D8
.text:000000000000C7FD                 jmp     loc_C4D4
.text:000000000000C802 ; ---------------------------------------------------------------------------
.text:000000000000C802
.text:000000000000C802 loc_C802:                               ; CODE XREF: build_charclass_isra_29+23C↑j
.text:000000000000C802                 xor     eax, eax
.text:000000000000C804                 nop     dword ptr [rax+00h]
.text:000000000000C808
.text:000000000000C808 loc_C808:                               ; CODE XREF: build_charclass_isra_29+445↓j
.text:000000000000C808                 test    byte ptr [rdx+rax*2+1], 2
.text:000000000000C80D                 jz      short loc_C82B
.text:000000000000C80F                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000C814                 mov     r14, rdi
.text:000000000000C817                 mov     rsi, rcx
.text:000000000000C81A                 and     ecx, 3Fh
.text:000000000000C81D                 shr     rsi, 3
.text:000000000000C821                 shl     r14, cl
.text:000000000000C824                 and     esi, 18h
.text:000000000000C827                 or      [rbx+rsi], r14
.text:000000000000C82B
.text:000000000000C82B loc_C82B:                               ; CODE XREF: build_charclass_isra_29+41D↑j
.text:000000000000C82B                 add     rax, 1
.text:000000000000C82F                 cmp     rax, 100h
.text:000000000000C835                 jnz     short loc_C808
.text:000000000000C837                 jmp     loc_C4D4
.text:000000000000C83C ; ---------------------------------------------------------------------------
.text:000000000000C83C
.text:000000000000C83C loc_C83C:                               ; CODE XREF: build_charclass_isra_29+3CB↑j
.text:000000000000C83C                 lea     rdi, aUpper     ; "upper"
.text:000000000000C843                 mov     ecx, 6
.text:000000000000C848                 mov     rsi, r12
.text:000000000000C84B                 repe cmpsb
.text:000000000000C84D                 setnbe  al
.text:000000000000C850                 sbb     al, 0
.text:000000000000C852                 test    al, al
.text:000000000000C854                 jnz     short loc_C8A2
.text:000000000000C856                 call    ___ctype_b_loc
.text:000000000000C85B                 xor     ecx, ecx
.text:000000000000C85D                 test    rbp, rbp
.text:000000000000C860                 mov     rax, [rax]
.text:000000000000C863                 mov     edi, 1
.text:000000000000C868                 jnz     loc_CB90
.text:000000000000C86E
.text:000000000000C86E loc_C86E:                               ; CODE XREF: build_charclass_isra_29+4A1↓j
.text:000000000000C86E                 test    byte ptr [rax+rcx*2+1], 1
.text:000000000000C873                 jz      short loc_C886
.text:000000000000C875                 mov     rdx, rcx
.text:000000000000C878                 mov     rsi, rdi
.text:000000000000C87B                 sar     rdx, 6
.text:000000000000C87F                 shl     rsi, cl
.text:000000000000C882                 or      [rbx+rdx*8], rsi
.text:000000000000C886
.text:000000000000C886 loc_C886:                               ; CODE XREF: build_charclass_isra_29+483↑j
.text:000000000000C886                 add     rcx, 1
.text:000000000000C88A                 cmp     rcx, 100h
.text:000000000000C891                 jnz     short loc_C86E
.text:000000000000C893                 jmp     loc_C4D4
.text:000000000000C898 ; ---------------------------------------------------------------------------
.text:000000000000C898
.text:000000000000C898 loc_C898:                               ; CODE XREF: build_charclass_isra_29+18A↑j
.text:000000000000C898                 mov     eax, 0Ch
.text:000000000000C89D                 jmp     loc_C4D6
.text:000000000000C8A2 ; ---------------------------------------------------------------------------
.text:000000000000C8A2
.text:000000000000C8A2 loc_C8A2:                               ; CODE XREF: build_charclass_isra_29+464↑j
.text:000000000000C8A2                 lea     rdi, aBlank     ; "blank"
.text:000000000000C8A9                 mov     ecx, 6
.text:000000000000C8AE                 mov     rsi, r12
.text:000000000000C8B1                 repe cmpsb
.text:000000000000C8B3                 setnbe  al
.text:000000000000C8B6                 sbb     al, 0
.text:000000000000C8B8                 test    al, al
.text:000000000000C8BA                 jnz     loc_C9AE
.text:000000000000C8C0                 call    ___ctype_b_loc
.text:000000000000C8C5                 xor     ecx, ecx
.text:000000000000C8C7                 test    rbp, rbp
.text:000000000000C8CA                 mov     rdx, [rax]
.text:000000000000C8CD                 mov     esi, 1
.text:000000000000C8D2                 jnz     loc_C974
.text:000000000000C8D8
.text:000000000000C8D8 loc_C8D8:                               ; CODE XREF: build_charclass_isra_29+50A↓j
.text:000000000000C8D8                 test    byte ptr [rdx+rcx*2], 1
.text:000000000000C8DC                 jz      short loc_C8EF
.text:000000000000C8DE                 mov     rax, rcx
.text:000000000000C8E1                 mov     rdi, rsi
.text:000000000000C8E4                 sar     rax, 6
.text:000000000000C8E8                 shl     rdi, cl
.text:000000000000C8EB                 or      [rbx+rax*8], rdi
.text:000000000000C8EF
.text:000000000000C8EF loc_C8EF:                               ; CODE XREF: build_charclass_isra_29+4EC↑j
.text:000000000000C8EF                 add     rcx, 1
.text:000000000000C8F3                 cmp     rcx, 100h
.text:000000000000C8FA                 jnz     short loc_C8D8
.text:000000000000C8FC                 jmp     loc_C4D4
.text:000000000000C8FC ; ---------------------------------------------------------------------------
.text:000000000000C901                 align 8
.text:000000000000C908
.text:000000000000C908 loc_C908:                               ; CODE XREF: build_charclass_isra_29+345↑j
.text:000000000000C908                 xor     eax, eax
.text:000000000000C90A
.text:000000000000C90A loc_C90A:                               ; CODE XREF: build_charclass_isra_29+547↓j
.text:000000000000C90A                 test    byte ptr [rdx+rax*2+1], 4
.text:000000000000C90F                 jz      short loc_C92D
.text:000000000000C911                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000C916                 mov     r9, rdi
.text:000000000000C919                 mov     rsi, rcx
.text:000000000000C91C                 and     ecx, 3Fh
.text:000000000000C91F                 shr     rsi, 3
.text:000000000000C923                 shl     r9, cl
.text:000000000000C926                 and     esi, 18h
.text:000000000000C929                 or      [rbx+rsi], r9
.text:000000000000C92D
.text:000000000000C92D loc_C92D:                               ; CODE XREF: build_charclass_isra_29+51F↑j
.text:000000000000C92D                 add     rax, 1
.text:000000000000C931                 cmp     rax, 100h
.text:000000000000C937                 jnz     short loc_C90A
.text:000000000000C939                 jmp     loc_C4D4
.text:000000000000C93E ; ---------------------------------------------------------------------------
.text:000000000000C93E
.text:000000000000C93E loc_C93E:                               ; CODE XREF: build_charclass_isra_29+1F2↑j
.text:000000000000C93E                 xor     eax, eax
.text:000000000000C940
.text:000000000000C940 loc_C940:                               ; CODE XREF: build_charclass_isra_29+57D↓j
.text:000000000000C940                 test    byte ptr [rdx+rax*2+1], 20h
.text:000000000000C945                 jz      short loc_C963
.text:000000000000C947                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000C94C                 mov     r9, rdi
.text:000000000000C94F                 mov     rsi, rcx
.text:000000000000C952                 and     ecx, 3Fh
.text:000000000000C955                 shr     rsi, 3
.text:000000000000C959                 shl     r9, cl
.text:000000000000C95C                 and     esi, 18h
.text:000000000000C95F                 or      [rbx+rsi], r9
.text:000000000000C963
.text:000000000000C963 loc_C963:                               ; CODE XREF: build_charclass_isra_29+555↑j
.text:000000000000C963                 add     rax, 1
.text:000000000000C967                 cmp     rax, 100h
.text:000000000000C96D                 jnz     short loc_C940
.text:000000000000C96F                 jmp     loc_C4D4
.text:000000000000C974 ; ---------------------------------------------------------------------------
.text:000000000000C974
.text:000000000000C974 loc_C974:                               ; CODE XREF: build_charclass_isra_29+4E2↑j
.text:000000000000C974                 xor     eax, eax
.text:000000000000C976                 mov     edi, 1
.text:000000000000C97B
.text:000000000000C97B loc_C97B:                               ; CODE XREF: build_charclass_isra_29+5B7↓j
.text:000000000000C97B                 test    byte ptr [rdx+rax*2], 1
.text:000000000000C97F                 jz      short loc_C99D
.text:000000000000C981                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000C986                 mov     r14, rdi
.text:000000000000C989                 mov     rsi, rcx
.text:000000000000C98C                 and     ecx, 3Fh
.text:000000000000C98F                 shr     rsi, 3
.text:000000000000C993                 shl     r14, cl
.text:000000000000C996                 and     esi, 18h
.text:000000000000C999                 or      [rbx+rsi], r14
.text:000000000000C99D
.text:000000000000C99D loc_C99D:                               ; CODE XREF: build_charclass_isra_29+58F↑j
.text:000000000000C99D                 add     rax, 1
.text:000000000000C9A1                 cmp     rax, 100h
.text:000000000000C9A7                 jnz     short loc_C97B
.text:000000000000C9A9                 jmp     loc_C4D4
.text:000000000000C9AE ; ---------------------------------------------------------------------------
.text:000000000000C9AE
.text:000000000000C9AE loc_C9AE:                               ; CODE XREF: build_charclass_isra_29+4CA↑j
.text:000000000000C9AE                 lea     rsi, aGraph     ; "graph"
.text:000000000000C9B5                 mov     rdi, r12        ; s1
.text:000000000000C9B8                 call    _strcmp
.text:000000000000C9BD                 test    eax, eax
.text:000000000000C9BF                 jnz     short loc_CA3A
.text:000000000000C9C1                 call    ___ctype_b_loc
.text:000000000000C9C6                 xor     ecx, ecx
.text:000000000000C9C8                 test    rbp, rbp
.text:000000000000C9CB                 mov     rsi, [rax]
.text:000000000000C9CE                 mov     edx, 1
.text:000000000000C9D3                 jnz     short loc_C9FF
.text:000000000000C9D5
.text:000000000000C9D5 loc_C9D5:                               ; CODE XREF: build_charclass_isra_29+608↓j
.text:000000000000C9D5                 cmp     word ptr [rsi+rcx*2], 0
.text:000000000000C9DA                 jns     short loc_C9ED
.text:000000000000C9DC                 mov     rax, rcx
.text:000000000000C9DF                 mov     rdi, rdx
.text:000000000000C9E2                 sar     rax, 6
.text:000000000000C9E6                 shl     rdi, cl
.text:000000000000C9E9                 or      [rbx+rax*8], rdi
.text:000000000000C9ED
.text:000000000000C9ED loc_C9ED:                               ; CODE XREF: build_charclass_isra_29+5EA↑j
.text:000000000000C9ED                 add     rcx, 1
.text:000000000000C9F1                 cmp     rcx, 100h
.text:000000000000C9F8                 jnz     short loc_C9D5
.text:000000000000C9FA                 jmp     loc_C4D4
.text:000000000000C9FF ; ---------------------------------------------------------------------------
.text:000000000000C9FF
.text:000000000000C9FF loc_C9FF:                               ; CODE XREF: build_charclass_isra_29+5E3↑j
.text:000000000000C9FF                 xor     eax, eax
.text:000000000000CA01                 mov     edi, 1
.text:000000000000CA06
.text:000000000000CA06 loc_CA06:                               ; CODE XREF: build_charclass_isra_29+643↓j
.text:000000000000CA06                 cmp     word ptr [rsi+rax*2], 0
.text:000000000000CA0B                 jns     short loc_CA29
.text:000000000000CA0D                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000CA12                 mov     r9, rdi
.text:000000000000CA15                 mov     rdx, rcx
.text:000000000000CA18                 and     ecx, 3Fh
.text:000000000000CA1B                 shr     rdx, 3
.text:000000000000CA1F                 shl     r9, cl
.text:000000000000CA22                 and     edx, 18h
.text:000000000000CA25                 or      [rbx+rdx], r9
.text:000000000000CA29
.text:000000000000CA29 loc_CA29:                               ; CODE XREF: build_charclass_isra_29+61B↑j
.text:000000000000CA29                 add     rax, 1
.text:000000000000CA2D                 cmp     rax, 100h
.text:000000000000CA33                 jnz     short loc_CA06
.text:000000000000CA35                 jmp     loc_C4D4
.text:000000000000CA3A ; ---------------------------------------------------------------------------
.text:000000000000CA3A
.text:000000000000CA3A loc_CA3A:                               ; CODE XREF: build_charclass_isra_29+5CF↑j
.text:000000000000CA3A                 lea     rsi, aPunct     ; "punct"
.text:000000000000CA41                 mov     rdi, r12        ; s1
.text:000000000000CA44                 call    _strcmp
.text:000000000000CA49                 test    eax, eax
.text:000000000000CA4B                 jnz     short loc_CAC4
.text:000000000000CA4D                 call    ___ctype_b_loc
.text:000000000000CA52                 xor     ecx, ecx
.text:000000000000CA54                 test    rbp, rbp
.text:000000000000CA57                 mov     rsi, [rax]
.text:000000000000CA5A                 mov     edx, 1
.text:000000000000CA5F                 jnz     short loc_CA8A
.text:000000000000CA61
.text:000000000000CA61 loc_CA61:                               ; CODE XREF: build_charclass_isra_29+693↓j
.text:000000000000CA61                 test    byte ptr [rsi+rcx*2], 4
.text:000000000000CA65                 jz      short loc_CA78
.text:000000000000CA67                 mov     rax, rcx
.text:000000000000CA6A                 mov     rdi, rdx
.text:000000000000CA6D                 sar     rax, 6
.text:000000000000CA71                 shl     rdi, cl
.text:000000000000CA74                 or      [rbx+rax*8], rdi
.text:000000000000CA78
.text:000000000000CA78 loc_CA78:                               ; CODE XREF: build_charclass_isra_29+675↑j
.text:000000000000CA78                 add     rcx, 1
.text:000000000000CA7C                 cmp     rcx, 100h
.text:000000000000CA83                 jnz     short loc_CA61
.text:000000000000CA85                 jmp     loc_C4D4
.text:000000000000CA8A ; ---------------------------------------------------------------------------
.text:000000000000CA8A
.text:000000000000CA8A loc_CA8A:                               ; CODE XREF: build_charclass_isra_29+66F↑j
.text:000000000000CA8A                 xor     eax, eax
.text:000000000000CA8C                 mov     edi, 1
.text:000000000000CA91
.text:000000000000CA91 loc_CA91:                               ; CODE XREF: build_charclass_isra_29+6CD↓j
.text:000000000000CA91                 test    byte ptr [rsi+rax*2], 4
.text:000000000000CA95                 jz      short loc_CAB3
.text:000000000000CA97                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000CA9C                 mov     r14, rdi
.text:000000000000CA9F                 mov     rdx, rcx
.text:000000000000CAA2                 and     ecx, 3Fh
.text:000000000000CAA5                 shr     rdx, 3
.text:000000000000CAA9                 shl     r14, cl
.text:000000000000CAAC                 and     edx, 18h
.text:000000000000CAAF                 or      [rbx+rdx], r14
.text:000000000000CAB3
.text:000000000000CAB3 loc_CAB3:                               ; CODE XREF: build_charclass_isra_29+6A5↑j
.text:000000000000CAB3                 add     rax, 1
.text:000000000000CAB7                 cmp     rax, 100h
.text:000000000000CABD                 jnz     short loc_CA91
.text:000000000000CABF                 jmp     loc_C4D4
.text:000000000000CAC4 ; ---------------------------------------------------------------------------
.text:000000000000CAC4
.text:000000000000CAC4 loc_CAC4:                               ; CODE XREF: build_charclass_isra_29+65B↑j
.text:000000000000CAC4                 lea     rsi, asc_16B2D  ; "x"
.text:000000000000CACB                 mov     rdi, r12        ; s1
.text:000000000000CACE                 call    _strcmp
.text:000000000000CAD3                 test    eax, eax
.text:000000000000CAD5                 jnz     short loc_CB50
.text:000000000000CAD7                 call    ___ctype_b_loc
.text:000000000000CADC                 xor     ecx, ecx
.text:000000000000CADE                 test    rbp, rbp
.text:000000000000CAE1                 mov     rsi, [rax]
.text:000000000000CAE4                 mov     edx, 1
.text:000000000000CAE9                 jnz     short loc_CB15
.text:000000000000CAEB
.text:000000000000CAEB loc_CAEB:                               ; CODE XREF: build_charclass_isra_29+71E↓j
.text:000000000000CAEB                 test    byte ptr [rsi+rcx*2+1], 10h
.text:000000000000CAF0                 jz      short loc_CB03
.text:000000000000CAF2                 mov     rax, rcx
.text:000000000000CAF5                 mov     rdi, rdx
.text:000000000000CAF8                 sar     rax, 6
.text:000000000000CAFC                 shl     rdi, cl
.text:000000000000CAFF                 or      [rbx+rax*8], rdi
.text:000000000000CB03
.text:000000000000CB03 loc_CB03:                               ; CODE XREF: build_charclass_isra_29+700↑j
.text:000000000000CB03                 add     rcx, 1
.text:000000000000CB07                 cmp     rcx, 100h
.text:000000000000CB0E                 jnz     short loc_CAEB
.text:000000000000CB10                 jmp     loc_C4D4
.text:000000000000CB15 ; ---------------------------------------------------------------------------
.text:000000000000CB15
.text:000000000000CB15 loc_CB15:                               ; CODE XREF: build_charclass_isra_29+6F9↑j
.text:000000000000CB15                 xor     eax, eax
.text:000000000000CB17                 mov     edi, 1
.text:000000000000CB1C
.text:000000000000CB1C loc_CB1C:                               ; CODE XREF: build_charclass_isra_29+759↓j
.text:000000000000CB1C                 test    byte ptr [rsi+rax*2+1], 10h
.text:000000000000CB21                 jz      short loc_CB3F
.text:000000000000CB23                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000CB28                 mov     r9, rdi
.text:000000000000CB2B                 mov     rdx, rcx
.text:000000000000CB2E                 and     ecx, 3Fh
.text:000000000000CB31                 shr     rdx, 3
.text:000000000000CB35                 shl     r9, cl
.text:000000000000CB38                 and     edx, 18h
.text:000000000000CB3B                 or      [rbx+rdx], r9
.text:000000000000CB3F
.text:000000000000CB3F loc_CB3F:                               ; CODE XREF: build_charclass_isra_29+731↑j
.text:000000000000CB3F                 add     rax, 1
.text:000000000000CB43                 cmp     rax, 100h
.text:000000000000CB49                 jnz     short loc_CB1C
.text:000000000000CB4B                 jmp     loc_C4D4
.text:000000000000CB50 ; ---------------------------------------------------------------------------
.text:000000000000CB50
.text:000000000000CB50 loc_CB50:                               ; CODE XREF: build_charclass_isra_29+6E5↑j
.text:000000000000CB50                 mov     eax, 4
.text:000000000000CB55                 jmp     loc_C4D6
.text:000000000000CB5A ; ---------------------------------------------------------------------------
.text:000000000000CB5A
.text:000000000000CB5A loc_CB5A:                               ; CODE XREF: build_charclass_isra_29+2C0↑j
.text:000000000000CB5A                 xor     eax, eax
.text:000000000000CB5C
.text:000000000000CB5C loc_CB5C:                               ; CODE XREF: build_charclass_isra_29+799↓j
.text:000000000000CB5C                 test    byte ptr [rdx+rax*2+1], 8
.text:000000000000CB61                 jz      short loc_CB7F
.text:000000000000CB63                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000CB68                 mov     r14, rdi
.text:000000000000CB6B                 mov     rsi, rcx
.text:000000000000CB6E                 and     ecx, 3Fh
.text:000000000000CB71                 shr     rsi, 3
.text:000000000000CB75                 shl     r14, cl
.text:000000000000CB78                 and     esi, 18h
.text:000000000000CB7B                 or      [rbx+rsi], r14
.text:000000000000CB7F
.text:000000000000CB7F loc_CB7F:                               ; CODE XREF: build_charclass_isra_29+771↑j
.text:000000000000CB7F                 add     rax, 1
.text:000000000000CB83                 cmp     rax, 100h
.text:000000000000CB89                 jnz     short loc_CB5C
.text:000000000000CB8B                 jmp     loc_C4D4
.text:000000000000CB90 ; ---------------------------------------------------------------------------
.text:000000000000CB90
.text:000000000000CB90 loc_CB90:                               ; CODE XREF: build_charclass_isra_29+478↑j
.text:000000000000CB90                 xor     edx, edx
.text:000000000000CB92
.text:000000000000CB92 loc_CB92:                               ; CODE XREF: build_charclass_isra_29+7D0↓j
.text:000000000000CB92                 test    byte ptr [rax+rdx*2+1], 1
.text:000000000000CB97                 jz      short loc_CBB5
.text:000000000000CB99                 movzx   ecx, byte ptr [rbp+rdx+0]
.text:000000000000CB9E                 mov     r9, rdi
.text:000000000000CBA1                 mov     rsi, rcx
.text:000000000000CBA4                 and     ecx, 3Fh
.text:000000000000CBA7                 shr     rsi, 3
.text:000000000000CBAB                 shl     r9, cl
.text:000000000000CBAE                 and     esi, 18h
.text:000000000000CBB1                 or      [rbx+rsi], r9
.text:000000000000CBB5
.text:000000000000CBB5 loc_CBB5:                               ; CODE XREF: build_charclass_isra_29+7A7↑j
.text:000000000000CBB5                 add     rdx, 1
.text:000000000000CBB9                 cmp     rdx, 100h
.text:000000000000CBC0                 jnz     short loc_CB92
.text:000000000000CBC2                 jmp     loc_C4D4
.text:000000000000CBC7 ; ---------------------------------------------------------------------------
.text:000000000000CBC7
.text:000000000000CBC7 loc_CBC7:                               ; CODE XREF: build_charclass_isra_29+3DF↑j
.text:000000000000CBC7                 xor     eax, eax
.text:000000000000CBC9
.text:000000000000CBC9 loc_CBC9:                               ; CODE XREF: build_charclass_isra_29+806↓j
.text:000000000000CBC9                 test    byte ptr [rdx+rax*2+1], 40h
.text:000000000000CBCE                 jz      short loc_CBEC
.text:000000000000CBD0                 movzx   ecx, byte ptr [rbp+rax+0]
.text:000000000000CBD5                 mov     r14, rdi
.text:000000000000CBD8                 mov     rsi, rcx
.text:000000000000CBDB                 and     ecx, 3Fh
.text:000000000000CBDE                 shr     rsi, 3
.text:000000000000CBE2                 shl     r14, cl
.text:000000000000CBE5                 and     esi, 18h
.text:000000000000CBE8                 or      [rbx+rsi], r14
.text:000000000000CBEC
.text:000000000000CBEC loc_CBEC:                               ; CODE XREF: build_charclass_isra_29+7DE↑j
.text:000000000000CBEC                 add     rax, 1
.text:000000000000CBF0                 cmp     rax, 100h
.text:000000000000CBF6                 jnz     short loc_CBC9
.text:000000000000CBF8                 jmp     loc_C4D4
.text:000000000000CBF8 ; } // starts at C3F0
.text:000000000000CBF8 build_charclass_isra_29 endp
.text:000000000000CBF8
.text:000000000000CBF8 ; ---------------------------------------------------------------------------
.text:000000000000CBFD                 align 20h
.text:000000000000CC00
.text:000000000000CC00 ; =============== S U B R O U T I N E =======================================
.text:000000000000CC00
.text:000000000000CC00
.text:000000000000CC00 build_charclass_op proc near            ; CODE XREF: parse_expression+992↓p
.text:000000000000CC00
.text:000000000000CC00 var_88          = qword ptr -88h
.text:000000000000CC00 var_80          = qword ptr -80h
.text:000000000000CC00 var_70          = qword ptr -70h
.text:000000000000CC00 var_68          = qword ptr -68h
.text:000000000000CC00 var_60          = byte ptr -60h
.text:000000000000CC00 var_58          = byte ptr -58h
.text:000000000000CC00 var_50          = byte ptr -50h
.text:000000000000CC00 var_40          = qword ptr -40h
.text:000000000000CC00
.text:000000000000CC00 ; __unwind {
.text:000000000000CC00                 push    r15
.text:000000000000CC02                 push    r14
.text:000000000000CC04                 mov     r14, rdx
.text:000000000000CC07                 push    r13
.text:000000000000CC09                 push    r12
.text:000000000000CC0B                 mov     r13, rcx
.text:000000000000CC0E                 push    rbp
.text:000000000000CC0F                 push    rbx
.text:000000000000CC10                 mov     rbp, rdi
.text:000000000000CC13                 mov     edi, 20h ; ' '  ; nmemb
.text:000000000000CC18                 mov     r12d, r8d
.text:000000000000CC1B                 sub     rsp, 58h
.text:000000000000CC1F                 mov     [rsp+88h+var_88], rsi
.text:000000000000CC23                 mov     esi, 1          ; size
.text:000000000000CC28                 mov     [rsp+88h+var_80], r9
.text:000000000000CC2D                 mov     rax, fs:28h
.text:000000000000CC36                 mov     [rsp+88h+var_40], rax
.text:000000000000CC3B                 xor     eax, eax
.text:000000000000CC3D                 mov     [rsp+88h+var_70], 0
.text:000000000000CC46                 call    _calloc
.text:000000000000CC4B                 test    rax, rax
.text:000000000000CC4E                 jz      loc_CE10
.text:000000000000CC54                 mov     esi, 1          ; size
.text:000000000000CC59                 mov     edi, 50h ; 'P'  ; nmemb
.text:000000000000CC5E                 mov     rbx, rax
.text:000000000000CC61                 call    _calloc
.text:000000000000CC66                 test    rax, rax
.text:000000000000CC69                 mov     r15, rax
.text:000000000000CC6C                 jz      loc_CE20
.text:000000000000CC72                 movzx   eax, byte ptr [rax+20h]
.text:000000000000CC76                 sub     rsp, 8
.text:000000000000CC7A                 mov     edx, r12d
.text:000000000000CC7D                 push    0
.text:000000000000CC7F                 and     edx, 1
.text:000000000000CC82                 mov     rdi, [rsp+98h+var_88]
.text:000000000000CC87                 lea     rcx, [r15+48h]
.text:000000000000CC8B                 mov     r9, r14
.text:000000000000CC8E                 mov     rsi, rbx
.text:000000000000CC91                 lea     r8, [rsp+98h+var_70]
.text:000000000000CC96                 and     eax, 0FFFFFFFEh
.text:000000000000CC99                 or      eax, edx
.text:000000000000CC9B                 lea     rdx, [r15+18h]
.text:000000000000CC9F                 mov     [r15+20h], al
.text:000000000000CCA3                 call    build_charclass_isra_29
.text:000000000000CCA8                 test    eax, eax
.text:000000000000CCAA                 pop     rdx
.text:000000000000CCAB                 pop     rcx
.text:000000000000CCAC                 jnz     loc_CE40
.text:000000000000CCB2                 movsx   rcx, byte ptr [r13+0]
.text:000000000000CCB7                 mov     esi, 1
.text:000000000000CCBC                 test    cl, cl
.text:000000000000CCBE                 jz      short loc_CCFA
.text:000000000000CCC0
.text:000000000000CCC0 loc_CCC0:                               ; CODE XREF: build_charclass_op+F8↓j
.text:000000000000CCC0                 lea     rax, [rcx+3Fh]
.text:000000000000CCC4                 test    rcx, rcx
.text:000000000000CCC7                 mov     rdx, rcx
.text:000000000000CCCA                 cmovns  rax, rcx
.text:000000000000CCCE                 sar     rdx, 3Fh
.text:000000000000CCD2                 add     r13, 1
.text:000000000000CCD6                 shr     rdx, 3Ah
.text:000000000000CCDA                 sar     rax, 6
.text:000000000000CCDE                 add     rcx, rdx
.text:000000000000CCE1                 and     ecx, 3Fh
.text:000000000000CCE4                 sub     rcx, rdx
.text:000000000000CCE7                 mov     rdx, rsi
.text:000000000000CCEA                 shl     rdx, cl
.text:000000000000CCED                 movsx   rcx, byte ptr [r13+0]
.text:000000000000CCF2                 or      [rbx+rax*8], rdx
.text:000000000000CCF6                 test    cl, cl
.text:000000000000CCF8                 jnz     short loc_CCC0
.text:000000000000CCFA
.text:000000000000CCFA loc_CCFA:                               ; CODE XREF: build_charclass_op+BE↑j
.text:000000000000CCFA                 test    r12b, r12b
.text:000000000000CCFD                 jz      short loc_CD12
.text:000000000000CCFF                 lea     rdx, [rbx+20h]
.text:000000000000CD03                 mov     rax, rbx
.text:000000000000CD06
.text:000000000000CD06 loc_CD06:                               ; CODE XREF: build_charclass_op+110↓j
.text:000000000000CD06                 not     qword ptr [rax]
.text:000000000000CD09                 add     rax, 8
.text:000000000000CD0D                 cmp     rdx, rax
.text:000000000000CD10                 jnz     short loc_CD06
.text:000000000000CD12
.text:000000000000CD12 loc_CD12:                               ; CODE XREF: build_charclass_op+FD↑j
.text:000000000000CD12                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000CD19                 jle     short loc_CD33
.text:000000000000CD1B                 mov     rcx, [rbp+78h]
.text:000000000000CD1F                 xor     eax, eax
.text:000000000000CD21
.text:000000000000CD21 loc_CD21:                               ; CODE XREF: build_charclass_op+131↓j
.text:000000000000CD21                 mov     rdx, [rcx+rax]
.text:000000000000CD25                 and     [rbx+rax], rdx
.text:000000000000CD29                 add     rax, 8
.text:000000000000CD2D                 cmp     rax, 20h ; ' '
.text:000000000000CD31                 jnz     short loc_CD21
.text:000000000000CD33
.text:000000000000CD33 loc_CD33:                               ; CODE XREF: build_charclass_op+119↑j
.text:000000000000CD33                 lea     r9, [rsp+88h+var_68]
.text:000000000000CD38                 lea     r12, [rbp+70h]
.text:000000000000CD3C                 lea     r13, [rbp+80h]
.text:000000000000CD43                 xor     ecx, ecx
.text:000000000000CD45                 xor     edx, edx
.text:000000000000CD47                 mov     [rsp+88h+var_60], 3
.text:000000000000CD4C                 mov     r8, r9
.text:000000000000CD4F                 mov     rsi, r13
.text:000000000000CD52                 mov     rdi, r12
.text:000000000000CD55                 mov     [rsp+88h+var_68], rbx
.text:000000000000CD5A                 mov     [rsp+88h+var_88], r9
.text:000000000000CD5E                 call    create_token_tree_isra_16
.text:000000000000CD63                 test    rax, rax
.text:000000000000CD66                 mov     r14, rax
.text:000000000000CD69                 jz      loc_CE00
.text:000000000000CD6F                 cmp     dword ptr [rbp+0B4h], 1
.text:000000000000CD76                 jle     short loc_CDF0
.text:000000000000CD78                 or      byte ptr [rbp+0B0h], 2
.text:000000000000CD7F                 mov     r9, [rsp+88h+var_88]
.text:000000000000CD83                 xor     ecx, ecx
.text:000000000000CD85                 xor     edx, edx
.text:000000000000CD87                 mov     rsi, r13
.text:000000000000CD8A                 mov     rdi, r12
.text:000000000000CD8D                 mov     [rsp+88h+var_60], 6
.text:000000000000CD92                 mov     [rsp+88h+var_68], r15
.text:000000000000CD97                 mov     r8, r9
.text:000000000000CD9A                 call    create_token_tree_isra_16
.text:000000000000CD9F                 test    rax, rax
.text:000000000000CDA2                 jz      short loc_CE00
.text:000000000000CDA4                 lea     r8, [rsp+88h+var_58]
.text:000000000000CDA9                 mov     rdx, r14
.text:000000000000CDAC                 mov     rcx, rax
.text:000000000000CDAF                 mov     rsi, r13
.text:000000000000CDB2                 mov     rdi, r12
.text:000000000000CDB5                 mov     [rsp+88h+var_50], 0Ah
.text:000000000000CDBA                 call    create_token_tree_isra_16
.text:000000000000CDBF                 mov     r14, rax
.text:000000000000CDC2
.text:000000000000CDC2 loc_CDC2:                               ; CODE XREF: build_charclass_op+1F8↓j
.text:000000000000CDC2                                         ; build_charclass_op+21E↓j ...
.text:000000000000CDC2                 mov     rdi, [rsp+88h+var_40]
.text:000000000000CDC7                 xor     rdi, fs:28h
.text:000000000000CDD0                 mov     rax, r14
.text:000000000000CDD3                 jnz     loc_CE65
.text:000000000000CDD9                 add     rsp, 58h
.text:000000000000CDDD                 pop     rbx
.text:000000000000CDDE                 pop     rbp
.text:000000000000CDDF                 pop     r12
.text:000000000000CDE1                 pop     r13
.text:000000000000CDE3                 pop     r14
.text:000000000000CDE5                 pop     r15
.text:000000000000CDE7                 retn
.text:000000000000CDE7 ; ---------------------------------------------------------------------------
.text:000000000000CDE8                 align 10h
.text:000000000000CDF0
.text:000000000000CDF0 loc_CDF0:                               ; CODE XREF: build_charclass_op+176↑j
.text:000000000000CDF0                 mov     rdi, r15        ; ptr
.text:000000000000CDF3                 call    isl_union_flow_free_0
.text:000000000000CDF8                 jmp     short loc_CDC2
.text:000000000000CDF8 ; ---------------------------------------------------------------------------
.text:000000000000CDFA                 align 20h
.text:000000000000CE00
.text:000000000000CE00 loc_CE00:                               ; CODE XREF: build_charclass_op+169↑j
.text:000000000000CE00                                         ; build_charclass_op+1A2↑j
.text:000000000000CE00                 mov     rdi, rbx        ; ptr
.text:000000000000CE03                 call    _free
.text:000000000000CE08                 mov     rdi, r15        ; ptr
.text:000000000000CE0B                 call    isl_union_flow_free_0
.text:000000000000CE10
.text:000000000000CE10 loc_CE10:                               ; CODE XREF: build_charclass_op+4E↑j
.text:000000000000CE10                 mov     rax, [rsp+88h+var_80]
.text:000000000000CE15                 xor     r14d, r14d
.text:000000000000CE18                 mov     dword ptr [rax], 0Ch
.text:000000000000CE1E                 jmp     short loc_CDC2
.text:000000000000CE20 ; ---------------------------------------------------------------------------
.text:000000000000CE20
.text:000000000000CE20 loc_CE20:                               ; CODE XREF: build_charclass_op+6C↑j
.text:000000000000CE20                 mov     rdi, rbx        ; ptr
.text:000000000000CE23                 xor     r14d, r14d
.text:000000000000CE26                 call    _free
.text:000000000000CE2B                 mov     rax, [rsp+88h+var_80]
.text:000000000000CE30                 mov     dword ptr [rax], 0Ch
.text:000000000000CE36                 jmp     short loc_CDC2
.text:000000000000CE36 ; ---------------------------------------------------------------------------
.text:000000000000CE38                 align 20h
.text:000000000000CE40
.text:000000000000CE40 loc_CE40:                               ; CODE XREF: build_charclass_op+AC↑j
.text:000000000000CE40                 mov     rdi, rbx        ; ptr
.text:000000000000CE43                 mov     dword ptr [rsp+88h+var_88], eax
.text:000000000000CE46                 xor     r14d, r14d
.text:000000000000CE49                 call    _free
.text:000000000000CE4E                 mov     rdi, r15        ; ptr
.text:000000000000CE51                 call    isl_union_flow_free_0
.text:000000000000CE56                 mov     rdi, [rsp+88h+var_80]
.text:000000000000CE5B                 mov     eax, dword ptr [rsp+88h+var_88]
.text:000000000000CE5E                 mov     [rdi], eax
.text:000000000000CE60                 jmp     loc_CDC2
.text:000000000000CE65 ; ---------------------------------------------------------------------------
.text:000000000000CE65
.text:000000000000CE65 loc_CE65:                               ; CODE XREF: build_charclass_op+1D3↑j
.text:000000000000CE65                 call    ___stack_chk_fail
.text:000000000000CE65 ; } // starts at CC00
.text:000000000000CE65 build_charclass_op endp
.text:000000000000CE65
.text:000000000000CE65 ; ---------------------------------------------------------------------------
.text:000000000000CE6A                 align 10h
.text:000000000000CE70
.text:000000000000CE70 ; =============== S U B R O U T I N E =======================================
.text:000000000000CE70
.text:000000000000CE70
.text:000000000000CE70 re_compile_fastmap_iter_isra_30 proc near
.text:000000000000CE70                                         ; CODE XREF: rpl_re_compile_fastmap+50↓p
.text:000000000000CE70                                         ; rpl_re_compile_fastmap+6F↓p ...
.text:000000000000CE70
.text:000000000000CE70 var_1A8         = qword ptr -1A8h
.text:000000000000CE70 var_1A0         = qword ptr -1A0h
.text:000000000000CE70 var_198         = qword ptr -198h
.text:000000000000CE70 var_190         = qword ptr -190h
.text:000000000000CE70 var_188         = qword ptr -188h
.text:000000000000CE70 var_180         = qword ptr -180h
.text:000000000000CE70 var_178         = qword ptr -178h
.text:000000000000CE70 s               = qword ptr -170h
.text:000000000000CE70 ps              = qword ptr -168h
.text:000000000000CE70 var_160         = qword ptr -160h
.text:000000000000CE70 wc              = dword ptr -154h
.text:000000000000CE70 var_150         = byte ptr -150h
.text:000000000000CE70 var_148         = byte ptr -148h
.text:000000000000CE70 var_40          = qword ptr -40h
.text:000000000000CE70
.text:000000000000CE70 ; __unwind {
.text:000000000000CE70                 push    r15
.text:000000000000CE72                 push    r14
.text:000000000000CE74                 mov     rax, rdi
.text:000000000000CE77                 push    r13
.text:000000000000CE79                 push    r12
.text:000000000000CE7B                 push    rbp
.text:000000000000CE7C                 push    rbx
.text:000000000000CE7D                 xor     ebx, ebx
.text:000000000000CE7F                 mov     rbp, rcx
.text:000000000000CE82                 sub     rsp, 178h
.text:000000000000CE89                 mov     rax, [rax]
.text:000000000000CE8C                 mov     [rsp+1A8h+var_178], rdi
.text:000000000000CE91                 mov     [rsp+1A8h+var_188], rsi
.text:000000000000CE96                 mov     rdi, fs:28h
.text:000000000000CE9F                 mov     [rsp+1A8h+var_40], rdi
.text:000000000000CEA7                 xor     edi, edi
.text:000000000000CEA9                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000CEB0                 mov     [rsp+1A8h+var_180], rdx
.text:000000000000CEB5                 mov     [rsp+1A8h+var_1A0], rax
.text:000000000000CEBA                 jnz     short loc_CED3
.text:000000000000CEBC                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000CEC1                 mov     rax, [rax+18h]
.text:000000000000CEC5                 mov     rbx, rax
.text:000000000000CEC8                 mov     [rsp+1A8h+var_1A8], rax
.text:000000000000CECC                 shr     rbx, 16h
.text:000000000000CED0                 and     ebx, 1
.text:000000000000CED3
.text:000000000000CED3 loc_CED3:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+4A↑j
.text:000000000000CED3                 mov     rax, [rsp+1A8h+var_188]
.text:000000000000CED8                 cmp     qword ptr [rax], 0
.text:000000000000CEDC                 jle     loc_D2ED
.text:000000000000CEE2                 lea     rax, [rsp+1A8h+var_150]
.text:000000000000CEE7                 mov     [rsp+1A8h+var_1A8], 0
.text:000000000000CEEF                 mov     [rsp+1A8h+ps], rax
.text:000000000000CEF4                 lea     rax, [rsp+1A8h+wc]
.text:000000000000CEF9                 mov     [rsp+1A8h+var_160], rax
.text:000000000000CEFE                 lea     rax, [rsp+1A8h+var_148]
.text:000000000000CF03                 mov     [rsp+1A8h+s], rax
.text:000000000000CF08                 jmp     short loc_CF4E
.text:000000000000CF08 ; ---------------------------------------------------------------------------
.text:000000000000CF0A                 align 10h
.text:000000000000CF10
.text:000000000000CF10 loc_CF10:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+10F↓j
.text:000000000000CF10                 cmp     eax, 3
.text:000000000000CF13                 jz      loc_D206
.text:000000000000CF19                 cmp     eax, 6
.text:000000000000CF1C                 jz      loc_D0A8
.text:000000000000CF22                 and     edx, 0FFFFFFFDh
.text:000000000000CF25                 cmp     dl, 5
.text:000000000000CF28                 jz      loc_D324
.text:000000000000CF2E                 cmp     eax, 2
.text:000000000000CF31                 jz      loc_D284
.text:000000000000CF37
.text:000000000000CF37 loc_CF37:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+139↓j
.text:000000000000CF37                                         ; re_compile_fastmap_iter_isra_30+147↓j ...
.text:000000000000CF37                 mov     rdi, [rsp+1A8h+var_188]
.text:000000000000CF3C                 add     [rsp+1A8h+var_1A8], 1
.text:000000000000CF41                 mov     rax, [rsp+1A8h+var_1A8]
.text:000000000000CF45                 cmp     rax, [rdi]
.text:000000000000CF48                 jge     loc_D2ED
.text:000000000000CF4E
.text:000000000000CF4E loc_CF4E:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+98↑j
.text:000000000000CF4E                 mov     rax, [rsp+1A8h+var_180]
.text:000000000000CF53                 mov     rdi, [rsp+1A8h+var_1A8]
.text:000000000000CF57                 mov     rax, [rax]
.text:000000000000CF5A                 mov     r12, [rax+rdi*8]
.text:000000000000CF5E                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000CF63                 mov     rcx, [rax]
.text:000000000000CF66                 mov     rax, r12
.text:000000000000CF69                 shl     rax, 4
.text:000000000000CF6D                 mov     [rsp+1A8h+var_198], rax
.text:000000000000CF72                 lea     rsi, [rcx+rax]
.text:000000000000CF76                 movzx   eax, byte ptr [rsi+8]
.text:000000000000CF7A                 cmp     eax, 1
.text:000000000000CF7D                 mov     edx, eax
.text:000000000000CF7F                 jnz     short loc_CF10
.text:000000000000CF81                 movzx   r13d, byte ptr [rsi]
.text:000000000000CF85                 test    ebx, ebx
.text:000000000000CF87                 mov     byte ptr [rbp+r13+0], 1
.text:000000000000CF8D                 jz      short loc_CFA0
.text:000000000000CF8F                 call    ___ctype_tolower_loc
.text:000000000000CF94                 mov     rax, [rax]
.text:000000000000CF97                 movsxd  rax, dword ptr [rax+r13*4]
.text:000000000000CF9B                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000CFA0
.text:000000000000CFA0 loc_CFA0:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+11D↑j
.text:000000000000CFA0                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000CFA5                 test    byte ptr [rax+1Ah], 40h
.text:000000000000CFA9                 jz      short loc_CF37
.text:000000000000CFAB                 mov     rsi, [rsp+1A8h+var_1A0]
.text:000000000000CFB0                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000CFB7                 jle     loc_CF37
.text:000000000000CFBD                 mov     rax, [rsi]
.text:000000000000CFC0                 mov     rdi, [rsp+1A8h+var_198]
.text:000000000000CFC5                 movzx   edx, byte ptr [rax+rdi]
.text:000000000000CFC9                 mov     [rsp+1A8h+var_148], dl
.text:000000000000CFCD                 lea     rdx, [r12+1]
.text:000000000000CFD2                 cmp     [rsi+10h], rdx
.text:000000000000CFD6                 jbe     loc_D316
.text:000000000000CFDC                 lea     rcx, [rax+rdi+10h]
.text:000000000000CFE1                 mov     eax, [rcx+8]
.text:000000000000CFE4                 and     eax, 2000FFh
.text:000000000000CFE9                 cmp     eax, 200001h
.text:000000000000CFEE                 jnz     loc_D316
.text:000000000000CFF4                 add     rdi, 20h ; ' '
.text:000000000000CFF8                 mov     r13, rdi
.text:000000000000CFFB                 mov     rdi, [rsp+1A8h+s]
.text:000000000000D000                 lea     rax, [rdi+1]
.text:000000000000D004                 jmp     short loc_D02B
.text:000000000000D004 ; ---------------------------------------------------------------------------
.text:000000000000D006                 align 10h
.text:000000000000D010
.text:000000000000D010 loc_D010:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1D2↓j
.text:000000000000D010                 mov     rcx, [rsi]
.text:000000000000D013                 add     rcx, r13
.text:000000000000D016                 add     r13, 10h
.text:000000000000D01A                 mov     edx, [rcx+8]
.text:000000000000D01D                 and     edx, 2000FFh
.text:000000000000D023                 cmp     edx, 200001h
.text:000000000000D029                 jnz     short loc_D044
.text:000000000000D02B
.text:000000000000D02B loc_D02B:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+194↑j
.text:000000000000D02B                 movzx   edx, byte ptr [rcx]
.text:000000000000D02E                 add     rax, 1
.text:000000000000D032                 mov     [rax-1], dl
.text:000000000000D035                 mov     rdx, rax
.text:000000000000D038                 sub     rdx, rdi
.text:000000000000D03B                 add     rdx, r12
.text:000000000000D03E                 cmp     [rsi+10h], rdx
.text:000000000000D042                 ja      short loc_D010
.text:000000000000D044
.text:000000000000D044 loc_D044:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+1B9↑j
.text:000000000000D044                                         ; re_compile_fastmap_iter_isra_30+4AF↓j
.text:000000000000D044                 mov     rsi, [rsp+1A8h+s]
.text:000000000000D049                 mov     rcx, [rsp+1A8h+ps]
.text:000000000000D04E                 mov     rdi, [rsp+1A8h+var_160]
.text:000000000000D053                 sub     rax, rsi
.text:000000000000D056                 mov     qword ptr [rcx], 0
.text:000000000000D05D                 mov     r12, rax
.text:000000000000D060                 mov     rdx, rax
.text:000000000000D063                 call    rpl_mbrtowc
.text:000000000000D068                 cmp     r12, rax
.text:000000000000D06B                 jnz     loc_CF37
.text:000000000000D071                 mov     edi, [rsp+1A8h+wc] ; wc
.text:000000000000D075                 call    _towlower
.text:000000000000D07A                 mov     rdx, [rsp+1A8h+ps] ; ps
.text:000000000000D07F                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000D084                 mov     esi, eax        ; wc
.text:000000000000D086                 call    _wcrtomb
.text:000000000000D08B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D08F                 jz      loc_CF37
.text:000000000000D095                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000D09A                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000D09F                 jmp     loc_CF37
.text:000000000000D09F ; ---------------------------------------------------------------------------
.text:000000000000D0A4                 align 8
.text:000000000000D0A8
.text:000000000000D0A8 loc_D0A8:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+AC↑j
.text:000000000000D0A8                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000D0AD                 mov     r12, [rsi]
.text:000000000000D0B0                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000D0B7                 jle     short loc_D0DD
.text:000000000000D0B9                 cmp     qword ptr [r12+48h], 0
.text:000000000000D0BF                 jnz     loc_D1BF
.text:000000000000D0C5                 test    byte ptr [r12+20h], 1
.text:000000000000D0CB                 jnz     loc_D1BF
.text:000000000000D0D1                 cmp     qword ptr [r12+40h], 0
.text:000000000000D0D7                 jnz     loc_D1BF
.text:000000000000D0DD
.text:000000000000D0DD loc_D0DD:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+247↑j
.text:000000000000D0DD                 xor     r13d, r13d
.text:000000000000D0E0                 cmp     qword ptr [r12+28h], 0
.text:000000000000D0E6                 jle     loc_CF37
.text:000000000000D0EC                 mov     r15, r12
.text:000000000000D0EF                 mov     r14, [rsp+1A8h+ps]
.text:000000000000D0F4                 mov     r12, rbp
.text:000000000000D0F7                 mov     rbp, r13
.text:000000000000D0FA                 mov     r13d, ebx
.text:000000000000D0FD                 jmp     short loc_D10D
.text:000000000000D0FF ; ---------------------------------------------------------------------------
.text:000000000000D0FF
.text:000000000000D0FF loc_D0FF:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2F8↓j
.text:000000000000D0FF                                         ; re_compile_fastmap_iter_isra_30+306↓j ...
.text:000000000000D0FF                 add     rbp, 1
.text:000000000000D103                 cmp     rbp, [r15+28h]
.text:000000000000D107                 jge     loc_D1B4
.text:000000000000D10D
.text:000000000000D10D loc_D10D:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+28D↑j
.text:000000000000D10D                                         ; re_compile_fastmap_iter_isra_30+33E↓j
.text:000000000000D10D                 mov     qword ptr [r14], 0
.text:000000000000D114                 mov     rax, [r15]
.text:000000000000D117                 mov     rdx, r14        ; ps
.text:000000000000D11A                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000D11F                 lea     rbx, ds:0[rbp*4]
.text:000000000000D127                 mov     esi, [rax+rbp*4] ; wc
.text:000000000000D12A                 call    _wcrtomb
.text:000000000000D12F                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D133                 jz      short loc_D15F
.text:000000000000D135                 movzx   edx, [rsp+1A8h+var_148]
.text:000000000000D13A                 test    r13d, r13d
.text:000000000000D13D                 mov     byte ptr [r12+rdx], 1
.text:000000000000D142                 mov     [rsp+1A8h+var_198], rdx
.text:000000000000D147                 jz      short loc_D15F
.text:000000000000D149                 call    ___ctype_tolower_loc
.text:000000000000D14E                 mov     rdx, [rsp+1A8h+var_198]
.text:000000000000D153                 mov     rax, [rax]
.text:000000000000D156                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000D15A                 mov     byte ptr [r12+rax], 1
.text:000000000000D15F
.text:000000000000D15F loc_D15F:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+2C3↑j
.text:000000000000D15F                                         ; re_compile_fastmap_iter_isra_30+2D7↑j
.text:000000000000D15F                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000D164                 test    byte ptr [rax+1Ah], 40h
.text:000000000000D168                 jz      short loc_D0FF
.text:000000000000D16A                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000D16F                 cmp     dword ptr [rax+0B4h], 1
.text:000000000000D176                 jle     short loc_D0FF
.text:000000000000D178                 mov     rax, [r15]
.text:000000000000D17B                 mov     edi, [rax+rbx]  ; wc
.text:000000000000D17E                 call    _towlower
.text:000000000000D183                 mov     rdi, [rsp+1A8h+s] ; s
.text:000000000000D188                 mov     rdx, r14        ; ps
.text:000000000000D18B                 mov     esi, eax        ; wc
.text:000000000000D18D                 call    _wcrtomb
.text:000000000000D192                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000D196                 jz      loc_D0FF
.text:000000000000D19C                 movzx   eax, [rsp+1A8h+var_148]
.text:000000000000D1A1                 add     rbp, 1
.text:000000000000D1A5                 mov     byte ptr [r12+rax], 1
.text:000000000000D1AA                 cmp     rbp, [r15+28h]
.text:000000000000D1AE                 jl      loc_D10D
.text:000000000000D1B4
.text:000000000000D1B4 loc_D1B4:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+297↑j
.text:000000000000D1B4                 mov     ebx, r13d
.text:000000000000D1B7                 mov     rbp, r12
.text:000000000000D1BA                 jmp     loc_CF37
.text:000000000000D1BF ; ---------------------------------------------------------------------------
.text:000000000000D1BF
.text:000000000000D1BF loc_D1BF:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+24F↑j
.text:000000000000D1BF                                         ; re_compile_fastmap_iter_isra_30+25B↑j ...
.text:000000000000D1BF                 mov     r12, [rsp+1A8h+ps]
.text:000000000000D1C4                 mov     r13, [rsp+1A8h+var_160]
.text:000000000000D1C9                 mov     byte ptr [rsp+1A8h+wc], 0
.text:000000000000D1CE                 xchg    ax, ax
.text:000000000000D1D0
.text:000000000000D1D0 loc_D1D0:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+38F↓j
.text:000000000000D1D0                 xor     edi, edi
.text:000000000000D1D2                 mov     qword ptr [r12], 0
.text:000000000000D1DA                 mov     rcx, r12
.text:000000000000D1DD                 mov     edx, 1
.text:000000000000D1E2                 mov     rsi, r13
.text:000000000000D1E5                 call    rpl_mbrtowc
.text:000000000000D1EA                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000D1EE                 jnz     short loc_D1FA
.text:000000000000D1F0                 movzx   eax, byte ptr [rsp+1A8h+wc]
.text:000000000000D1F5                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000D1FA
.text:000000000000D1FA loc_D1FA:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+37E↑j
.text:000000000000D1FA                 add     byte ptr [rsp+1A8h+wc], 1
.text:000000000000D1FF                 jnz     short loc_D1D0
.text:000000000000D201                 jmp     loc_CF37
.text:000000000000D206 ; ---------------------------------------------------------------------------
.text:000000000000D206
.text:000000000000D206 loc_D206:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+A3↑j
.text:000000000000D206                 mov     r13, rbp
.text:000000000000D209                 xor     r12d, r12d
.text:000000000000D20C                 mov     [rsp+1A8h+var_190], 0
.text:000000000000D215
.text:000000000000D215 loc_D215:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+412↓j
.text:000000000000D215                 mov     rax, [rsp+1A8h+var_198]
.text:000000000000D21A                 mov     rsi, [rsp+1A8h+var_190]
.text:000000000000D21F                 xor     r14d, r14d
.text:000000000000D222                 mov     rax, [rcx+rax]
.text:000000000000D226                 mov     r15, [rax+rsi]
.text:000000000000D22A                 nop     word ptr [rax+rax+00h]
.text:000000000000D230
.text:000000000000D230 loc_D230:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3ED↓j
.text:000000000000D230                 bt      r15, r14
.text:000000000000D234                 jnb     short loc_D255
.text:000000000000D236                 test    ebx, ebx
.text:000000000000D238                 mov     byte ptr [r13+r14+0], 1
.text:000000000000D23E                 jz      short loc_D255
.text:000000000000D240                 call    ___ctype_tolower_loc
.text:000000000000D245                 mov     rax, [rax]
.text:000000000000D248                 lea     rdx, [r12+r14]
.text:000000000000D24C                 movsxd  rax, dword ptr [rax+rdx*4]
.text:000000000000D250                 mov     byte ptr [rbp+rax+0], 1
.text:000000000000D255
.text:000000000000D255 loc_D255:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+3C4↑j
.text:000000000000D255                                         ; re_compile_fastmap_iter_isra_30+3CE↑j
.text:000000000000D255                 add     r14, 1
.text:000000000000D259                 cmp     r14, 40h ; '@'
.text:000000000000D25D                 jnz     short loc_D230
.text:000000000000D25F                 add     r12, 40h ; '@'
.text:000000000000D263                 add     [rsp+1A8h+var_190], 8
.text:000000000000D269                 add     r13, 40h ; '@'
.text:000000000000D26D                 cmp     r12, 100h
.text:000000000000D274                 jz      loc_CF37
.text:000000000000D27A                 mov     rax, [rsp+1A8h+var_1A0]
.text:000000000000D27F                 mov     rcx, [rax]
.text:000000000000D282                 jmp     short loc_D215
.text:000000000000D284 ; ---------------------------------------------------------------------------
.text:000000000000D284
.text:000000000000D284 loc_D284:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+C1↑j
.text:000000000000D284                 movdqa  xmm0, cs:xmmword_172E0
.text:000000000000D28C                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000D290                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000D294                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000D298                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000D29C                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000D2A0                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000D2A4                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000D2A8                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000D2AC                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000D2B3                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000D2BA                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000D2C1                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000D2C8                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000D2CF                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000D2D6                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000D2DD                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000D2E4
.text:000000000000D2E4 loc_D2E4:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+51D↓j
.text:000000000000D2E4                 mov     rax, [rsp+1A8h+var_178]
.text:000000000000D2E9                 or      byte ptr [rax+38h], 1
.text:000000000000D2ED
.text:000000000000D2ED loc_D2ED:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+6C↑j
.text:000000000000D2ED                                         ; re_compile_fastmap_iter_isra_30+D8↑j ...
.text:000000000000D2ED                 mov     rax, [rsp+1A8h+var_40]
.text:000000000000D2F5                 xor     rax, fs:28h
.text:000000000000D2FE                 jnz     loc_D392
.text:000000000000D304                 add     rsp, 178h
.text:000000000000D30B                 pop     rbx
.text:000000000000D30C                 pop     rbp
.text:000000000000D30D                 pop     r12
.text:000000000000D30F                 pop     r13
.text:000000000000D311                 pop     r14
.text:000000000000D313                 pop     r15
.text:000000000000D315                 retn
.text:000000000000D316 ; ---------------------------------------------------------------------------
.text:000000000000D316
.text:000000000000D316 loc_D316:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+166↑j
.text:000000000000D316                                         ; re_compile_fastmap_iter_isra_30+17E↑j
.text:000000000000D316                 mov     rax, [rsp+1A8h+s]
.text:000000000000D31B                 add     rax, 1
.text:000000000000D31F                 jmp     loc_D044
.text:000000000000D324 ; ---------------------------------------------------------------------------
.text:000000000000D324
.text:000000000000D324 loc_D324:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+B8↑j
.text:000000000000D324                 movdqa  xmm0, cs:xmmword_172E0
.text:000000000000D32C                 cmp     eax, 2
.text:000000000000D32F                 movups  xmmword ptr [rbp+0], xmm0
.text:000000000000D333                 movups  xmmword ptr [rbp+10h], xmm0
.text:000000000000D337                 movups  xmmword ptr [rbp+20h], xmm0
.text:000000000000D33B                 movups  xmmword ptr [rbp+30h], xmm0
.text:000000000000D33F                 movups  xmmword ptr [rbp+40h], xmm0
.text:000000000000D343                 movups  xmmword ptr [rbp+50h], xmm0
.text:000000000000D347                 movups  xmmword ptr [rbp+60h], xmm0
.text:000000000000D34B                 movups  xmmword ptr [rbp+70h], xmm0
.text:000000000000D34F                 movups  xmmword ptr [rbp+80h], xmm0
.text:000000000000D356                 movups  xmmword ptr [rbp+90h], xmm0
.text:000000000000D35D                 movups  xmmword ptr [rbp+0A0h], xmm0
.text:000000000000D364                 movups  xmmword ptr [rbp+0B0h], xmm0
.text:000000000000D36B                 movups  xmmword ptr [rbp+0C0h], xmm0
.text:000000000000D372                 movups  xmmword ptr [rbp+0D0h], xmm0
.text:000000000000D379                 movups  xmmword ptr [rbp+0E0h], xmm0
.text:000000000000D380                 movups  xmmword ptr [rbp+0F0h], xmm0
.text:000000000000D387                 jnz     loc_D2ED
.text:000000000000D38D                 jmp     loc_D2E4
.text:000000000000D392 ; ---------------------------------------------------------------------------
.text:000000000000D392
.text:000000000000D392 loc_D392:                               ; CODE XREF: re_compile_fastmap_iter_isra_30+48E↑j
.text:000000000000D392                 call    ___stack_chk_fail
.text:000000000000D392 ; } // starts at CE70
.text:000000000000D392 re_compile_fastmap_iter_isra_30 endp
.text:000000000000D392
.text:000000000000D392 ; ---------------------------------------------------------------------------
.text:000000000000D397                 align 20h
.text:000000000000D3A0
.text:000000000000D3A0 ; =============== S U B R O U T I N E =======================================
.text:000000000000D3A0
.text:000000000000D3A0
.text:000000000000D3A0 check_node_accept_bytes_isra_31 proc near
.text:000000000000D3A0                                         ; CODE XREF: check_arrival+255↓p
.text:000000000000D3A0                                         ; set_regs+378↓p ...
.text:000000000000D3A0 ; __unwind {
.text:000000000000D3A0                 shl     rdx, 4
.text:000000000000D3A4                 push    r13
.text:000000000000D3A6                 push    r12
.text:000000000000D3A8                 lea     r9, [rdi+rdx]
.text:000000000000D3AC                 push    rbp
.text:000000000000D3AD                 push    rbx
.text:000000000000D3AE                 sub     rsp, 8
.text:000000000000D3B2                 movzx   r11d, byte ptr [r9+8]
.text:000000000000D3B7                 cmp     r11b, 7
.text:000000000000D3BB                 jz      loc_D4D0
.text:000000000000D3C1                 cmp     dword ptr [rcx+90h], 1
.text:000000000000D3C8                 jz      loc_D490
.text:000000000000D3CE                 mov     rbx, rsi
.text:000000000000D3D1                 mov     rdi, rcx
.text:000000000000D3D4                 mov     rsi, r8
.text:000000000000D3D7                 mov     r10, rcx
.text:000000000000D3DA                 call    re_string_char_size_at_part_0
.text:000000000000D3DF                 cmp     r11b, 5
.text:000000000000D3E3                 mov     ebp, eax
.text:000000000000D3E5                 jz      loc_D4A0
.text:000000000000D3EB                 cmp     r11b, 6
.text:000000000000D3EF                 jnz     loc_D490
.text:000000000000D3F5                 cmp     eax, 1
.text:000000000000D3F8                 jle     loc_D490
.text:000000000000D3FE                 mov     r13, [r9]
.text:000000000000D401                 mov     rsi, [r13+40h]
.text:000000000000D405                 mov     rdx, [r13+28h]
.text:000000000000D409                 test    rsi, rsi
.text:000000000000D40C                 jnz     short loc_D419
.text:000000000000D40E                 cmp     qword ptr [r13+48h], 0
.text:000000000000D413                 jz      loc_D508
.text:000000000000D419
.text:000000000000D419 loc_D419:                               ; CODE XREF: check_node_accept_bytes_isra_31+6C↑j
.text:000000000000D419                                         ; check_node_accept_bytes_isra_31+16B↓j
.text:000000000000D419                 mov     rax, [r10+10h]
.text:000000000000D41D                 test    rdx, rdx
.text:000000000000D420                 mov     r12d, [rax+r8*4]
.text:000000000000D424                 jle     short loc_D447
.text:000000000000D426                 mov     rcx, [r13+0]
.text:000000000000D42A                 cmp     r12d, [rcx]
.text:000000000000D42D                 jz      short loc_D482
.text:000000000000D42F                 xor     eax, eax
.text:000000000000D431                 jmp     short loc_D43E
.text:000000000000D431 ; ---------------------------------------------------------------------------
.text:000000000000D433                 align 8
.text:000000000000D438
.text:000000000000D438 loc_D438:                               ; CODE XREF: check_node_accept_bytes_isra_31+A5↓j
.text:000000000000D438                 cmp     r12d, [rcx+rax*4]
.text:000000000000D43C                 jz      short loc_D482
.text:000000000000D43E
.text:000000000000D43E loc_D43E:                               ; CODE XREF: check_node_accept_bytes_isra_31+91↑j
.text:000000000000D43E                 add     rax, 1
.text:000000000000D442                 cmp     rax, rdx
.text:000000000000D445                 jnz     short loc_D438
.text:000000000000D447
.text:000000000000D447 loc_D447:                               ; CODE XREF: check_node_accept_bytes_isra_31+84↑j
.text:000000000000D447                 mov     rax, [r13+48h]
.text:000000000000D44B                 test    rax, rax
.text:000000000000D44E                 jle     loc_D52C
.text:000000000000D454                 xor     ebx, ebx
.text:000000000000D456                 jmp     short loc_D46E
.text:000000000000D456 ; ---------------------------------------------------------------------------
.text:000000000000D458                 align 20h
.text:000000000000D460
.text:000000000000D460 loc_D460:                               ; CODE XREF: check_node_accept_bytes_isra_31+E0↓j
.text:000000000000D460                 add     rbx, 1
.text:000000000000D464                 cmp     rbx, [r13+48h]
.text:000000000000D468                 jge     loc_D528
.text:000000000000D46E
.text:000000000000D46E loc_D46E:                               ; CODE XREF: check_node_accept_bytes_isra_31+B6↑j
.text:000000000000D46E                 mov     rax, [r13+18h]
.text:000000000000D472                 mov     edi, r12d       ; wc
.text:000000000000D475                 mov     rsi, [rax+rbx*8] ; desc
.text:000000000000D479                 call    _iswctype
.text:000000000000D47E                 test    eax, eax
.text:000000000000D480                 jz      short loc_D460
.text:000000000000D482
.text:000000000000D482 loc_D482:                               ; CODE XREF: check_node_accept_bytes_isra_31+8D↑j
.text:000000000000D482                                         ; check_node_accept_bytes_isra_31+9C↑j ...
.text:000000000000D482                 test    byte ptr [r13+20h], 1
.text:000000000000D487                 jz      short loc_D492
.text:000000000000D489                 nop     dword ptr [rax+00000000h]
.text:000000000000D490
.text:000000000000D490 loc_D490:                               ; CODE XREF: check_node_accept_bytes_isra_31+28↑j
.text:000000000000D490                                         ; check_node_accept_bytes_isra_31+4F↑j ...
.text:000000000000D490                 xor     ebp, ebp
.text:000000000000D492
.text:000000000000D492 loc_D492:                               ; CODE XREF: check_node_accept_bytes_isra_31+E7↑j
.text:000000000000D492                                         ; check_node_accept_bytes_isra_31+10E↓j ...
.text:000000000000D492                 add     rsp, 8
.text:000000000000D496                 mov     eax, ebp
.text:000000000000D498                 pop     rbx
.text:000000000000D499                 pop     rbp
.text:000000000000D49A                 pop     r12
.text:000000000000D49C                 pop     r13
.text:000000000000D49E                 retn
.text:000000000000D49E ; ---------------------------------------------------------------------------
.text:000000000000D49F                 align 20h
.text:000000000000D4A0
.text:000000000000D4A0 loc_D4A0:                               ; CODE XREF: check_node_accept_bytes_isra_31+45↑j
.text:000000000000D4A0                 cmp     eax, 1
.text:000000000000D4A3                 jle     short loc_D490
.text:000000000000D4A5                 mov     rax, [rbx]
.text:000000000000D4A8                 test    al, 40h
.text:000000000000D4AA                 jz      short loc_D4C0
.text:000000000000D4AC
.text:000000000000D4AC loc_D4AC:                               ; CODE XREF: check_node_accept_bytes_isra_31+129↓j
.text:000000000000D4AC                 test    al, 80h
.text:000000000000D4AE                 jz      short loc_D492
.text:000000000000D4B0                 mov     rax, [r10+8]
.text:000000000000D4B4                 cmp     byte ptr [rax+r8], 0
.text:000000000000D4B9                 jz      short loc_D490
.text:000000000000D4BB                 jmp     short loc_D492
.text:000000000000D4BB ; ---------------------------------------------------------------------------
.text:000000000000D4BD                 align 20h
.text:000000000000D4C0
.text:000000000000D4C0 loc_D4C0:                               ; CODE XREF: check_node_accept_bytes_isra_31+10A↑j
.text:000000000000D4C0                 mov     rdx, [r10+8]
.text:000000000000D4C4                 cmp     byte ptr [rdx+r8], 0Ah
.text:000000000000D4C9                 jnz     short loc_D4AC
.text:000000000000D4CB                 jmp     short loc_D490
.text:000000000000D4CB ; ---------------------------------------------------------------------------
.text:000000000000D4CD                 align 10h
.text:000000000000D4D0
.text:000000000000D4D0 loc_D4D0:                               ; CODE XREF: check_node_accept_bytes_isra_31+1B↑j
.text:000000000000D4D0                 mov     rdx, [rcx+8]
.text:000000000000D4D4                 lea     rsi, [rdx+r8]
.text:000000000000D4D8                 movzx   eax, byte ptr [rsi]
.text:000000000000D4DB                 cmp     al, 0C1h
.text:000000000000D4DD                 jbe     short loc_D490
.text:000000000000D4DF                 mov     rcx, [rcx+58h]
.text:000000000000D4E3                 lea     rdi, [r8+1]
.text:000000000000D4E7                 cmp     rdi, rcx
.text:000000000000D4EA                 jge     short loc_D490
.text:000000000000D4EC                 cmp     al, 0DFh
.text:000000000000D4EE                 movzx   edx, byte ptr [rdx+r8+1]
.text:000000000000D4F4                 ja      short loc_D55E
.text:000000000000D4F6                 add     edx, 0FFFFFF80h
.text:000000000000D4F9                 mov     ebp, 2
.text:000000000000D4FE                 cmp     dl, 3Fh ; '?'
.text:000000000000D501                 ja      short loc_D490
.text:000000000000D503                 jmp     short loc_D492
.text:000000000000D503 ; ---------------------------------------------------------------------------
.text:000000000000D505                 align 8
.text:000000000000D508
.text:000000000000D508 loc_D508:                               ; CODE XREF: check_node_accept_bytes_isra_31+73↑j
.text:000000000000D508                 test    rdx, rdx
.text:000000000000D50B                 jnz     loc_D419
.text:000000000000D511
.text:000000000000D511 loc_D511:                               ; CODE XREF: check_node_accept_bytes_isra_31+18F↓j
.text:000000000000D511                                         ; check_node_accept_bytes_isra_31+1A7↓j
.text:000000000000D511                 test    byte ptr [r13+20h], 1
.text:000000000000D516                 jnz     loc_D492
.text:000000000000D51C                 jmp     loc_D490
.text:000000000000D51C ; ---------------------------------------------------------------------------
.text:000000000000D521                 align 8
.text:000000000000D528
.text:000000000000D528 loc_D528:                               ; CODE XREF: check_node_accept_bytes_isra_31+C8↑j
.text:000000000000D528                 mov     rsi, [r13+40h]
.text:000000000000D52C
.text:000000000000D52C loc_D52C:                               ; CODE XREF: check_node_accept_bytes_isra_31+AE↑j
.text:000000000000D52C                 test    rsi, rsi
.text:000000000000D52F                 jle     short loc_D511
.text:000000000000D531                 mov     rdx, [r13+8]
.text:000000000000D535                 xor     eax, eax
.text:000000000000D537                 jmp     short loc_D549
.text:000000000000D537 ; ---------------------------------------------------------------------------
.text:000000000000D539                 align 20h
.text:000000000000D540
.text:000000000000D540 loc_D540:                               ; CODE XREF: check_node_accept_bytes_isra_31+1AD↓j
.text:000000000000D540                                         ; check_node_accept_bytes_isra_31+1B7↓j
.text:000000000000D540                 add     rax, 1
.text:000000000000D544                 cmp     rax, rsi
.text:000000000000D547                 jz      short loc_D511
.text:000000000000D549
.text:000000000000D549 loc_D549:                               ; CODE XREF: check_node_accept_bytes_isra_31+197↑j
.text:000000000000D549                 cmp     r12d, [rdx+rax*4]
.text:000000000000D54D                 jl      short loc_D540
.text:000000000000D54F                 mov     rcx, [r13+10h]
.text:000000000000D553                 cmp     r12d, [rcx+rax*4]
.text:000000000000D557                 jg      short loc_D540
.text:000000000000D559                 jmp     loc_D482
.text:000000000000D55E ; ---------------------------------------------------------------------------
.text:000000000000D55E
.text:000000000000D55E loc_D55E:                               ; CODE XREF: check_node_accept_bytes_isra_31+154↑j
.text:000000000000D55E                 cmp     al, 0EFh
.text:000000000000D560                 ja      short loc_D5A8
.text:000000000000D562                 cmp     al, 0E0h
.text:000000000000D564                 jnz     short loc_D56F
.text:000000000000D566                 cmp     dl, 9Fh
.text:000000000000D569                 jbe     loc_D490
.text:000000000000D56F
.text:000000000000D56F loc_D56F:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C4↑j
.text:000000000000D56F                 mov     ebp, 3
.text:000000000000D574
.text:000000000000D574 loc_D574:                               ; CODE XREF: check_node_accept_bytes_isra_31+21E↓j
.text:000000000000D574                                         ; check_node_accept_bytes_isra_31+236↓j ...
.text:000000000000D574                 movsxd  rdi, ebp
.text:000000000000D577                 add     r8, rdi
.text:000000000000D57A                 cmp     rcx, r8
.text:000000000000D57D                 jl      loc_D490
.text:000000000000D583                 mov     eax, 1
.text:000000000000D588                 jmp     short loc_D597
.text:000000000000D58A ; ---------------------------------------------------------------------------
.text:000000000000D58A
.text:000000000000D58A loc_D58A:                               ; CODE XREF: check_node_accept_bytes_isra_31+201↓j
.text:000000000000D58A                 add     rax, 1
.text:000000000000D58E                 cmp     rdi, rax
.text:000000000000D591                 jle     loc_D492
.text:000000000000D597
.text:000000000000D597 loc_D597:                               ; CODE XREF: check_node_accept_bytes_isra_31+1E8↑j
.text:000000000000D597                 movzx   ebx, byte ptr [rsi+rax]
.text:000000000000D59B                 lea     edx, [rbx-80h]
.text:000000000000D59E                 cmp     dl, 3Fh ; '?'
.text:000000000000D5A1                 jbe     short loc_D58A
.text:000000000000D5A3                 jmp     loc_D490
.text:000000000000D5A8 ; ---------------------------------------------------------------------------
.text:000000000000D5A8
.text:000000000000D5A8 loc_D5A8:                               ; CODE XREF: check_node_accept_bytes_isra_31+1C0↑j
.text:000000000000D5A8                 cmp     al, 0F7h
.text:000000000000D5AA                 ja      short loc_D5C0
.text:000000000000D5AC                 cmp     al, 0F0h
.text:000000000000D5AE                 jnz     short loc_D5B9
.text:000000000000D5B0                 cmp     dl, 8Fh
.text:000000000000D5B3                 jbe     loc_D490
.text:000000000000D5B9
.text:000000000000D5B9 loc_D5B9:                               ; CODE XREF: check_node_accept_bytes_isra_31+20E↑j
.text:000000000000D5B9                 mov     ebp, 4
.text:000000000000D5BE                 jmp     short loc_D574
.text:000000000000D5C0 ; ---------------------------------------------------------------------------
.text:000000000000D5C0
.text:000000000000D5C0 loc_D5C0:                               ; CODE XREF: check_node_accept_bytes_isra_31+20A↑j
.text:000000000000D5C0                 cmp     al, 0FBh
.text:000000000000D5C2                 ja      short loc_D5D8
.text:000000000000D5C4                 cmp     al, 0F8h
.text:000000000000D5C6                 jnz     short loc_D5D1
.text:000000000000D5C8                 cmp     dl, 87h
.text:000000000000D5CB                 jbe     loc_D490
.text:000000000000D5D1
.text:000000000000D5D1 loc_D5D1:                               ; CODE XREF: check_node_accept_bytes_isra_31+226↑j
.text:000000000000D5D1                 mov     ebp, 5
.text:000000000000D5D6                 jmp     short loc_D574
.text:000000000000D5D8 ; ---------------------------------------------------------------------------
.text:000000000000D5D8
.text:000000000000D5D8 loc_D5D8:                               ; CODE XREF: check_node_accept_bytes_isra_31+222↑j
.text:000000000000D5D8                 cmp     al, 0FDh
.text:000000000000D5DA                 ja      loc_D490
.text:000000000000D5E0                 cmp     al, 0FCh
.text:000000000000D5E2                 jnz     short loc_D5ED
.text:000000000000D5E4                 cmp     dl, 83h
.text:000000000000D5E7                 jbe     loc_D490
.text:000000000000D5ED
.text:000000000000D5ED loc_D5ED:                               ; CODE XREF: check_node_accept_bytes_isra_31+242↑j
.text:000000000000D5ED                 mov     ebp, 6
.text:000000000000D5F2                 jmp     short loc_D574
.text:000000000000D5F2 ; } // starts at D3A0
.text:000000000000D5F2 check_node_accept_bytes_isra_31 endp
.text:000000000000D5F2
.text:000000000000D5F2 ; ---------------------------------------------------------------------------
.text:000000000000D5F4                 align 20h
.text:000000000000D600
.text:000000000000D600 ; =============== S U B R O U T I N E =======================================
.text:000000000000D600
.text:000000000000D600
.text:000000000000D600 check_arrival   proc near               ; CODE XREF: get_subexp_sub_isra_32+30↓p
.text:000000000000D600                                         ; transit_state_bkref_isra_34+68B↓p
.text:000000000000D600
.text:000000000000D600 var_108         = qword ptr -108h
.text:000000000000D600 var_100         = qword ptr -100h
.text:000000000000D600 var_F8          = qword ptr -0F8h
.text:000000000000D600 var_F0          = qword ptr -0F0h
.text:000000000000D600 var_E8          = qword ptr -0E8h
.text:000000000000D600 var_E0          = qword ptr -0E0h
.text:000000000000D600 var_D8          = qword ptr -0D8h
.text:000000000000D600 var_D0          = qword ptr -0D0h
.text:000000000000D600 var_C8          = qword ptr -0C8h
.text:000000000000D600 var_C0          = qword ptr -0C0h
.text:000000000000D600 var_B8          = qword ptr -0B8h
.text:000000000000D600 var_B0          = qword ptr -0B0h
.text:000000000000D600 var_A8          = qword ptr -0A8h
.text:000000000000D600 var_A0          = qword ptr -0A0h
.text:000000000000D600 var_98          = qword ptr -98h
.text:000000000000D600 var_90          = qword ptr -90h
.text:000000000000D600 var_80          = dword ptr -80h
.text:000000000000D600 var_7C          = dword ptr -7Ch
.text:000000000000D600 var_78          = xmmword ptr -78h
.text:000000000000D600 var_68          = qword ptr -68h
.text:000000000000D600 var_58          = byte ptr -58h
.text:000000000000D600 var_50          = qword ptr -50h
.text:000000000000D600 ptr             = qword ptr -48h
.text:000000000000D600 var_40          = qword ptr -40h
.text:000000000000D600 arg_0           = dword ptr  8
.text:000000000000D600
.text:000000000000D600 ; __unwind {
.text:000000000000D600                 push    r15
.text:000000000000D602                 push    r14
.text:000000000000D604                 mov     r15, rdi
.text:000000000000D607                 push    r13
.text:000000000000D609                 push    r12
.text:000000000000D60B                 push    rbp
.text:000000000000D60C                 push    rbx
.text:000000000000D60D                 mov     rbp, rcx
.text:000000000000D610                 mov     rbx, rdx
.text:000000000000D613                 sub     rsp, 0D8h
.text:000000000000D61A                 mov     rcx, [rdi+98h]
.text:000000000000D621                 mov     r13, [rsi+8]
.text:000000000000D625                 mov     rax, fs:28h
.text:000000000000D62E                 mov     [rsp+108h+var_40], rax
.text:000000000000D636                 xor     eax, eax
.text:000000000000D638                 mov     rax, rdx
.text:000000000000D63B                 mov     [rsp+108h+var_A8], rsi
.text:000000000000D640                 mov     [rsp+108h+var_90], r8
.text:000000000000D645                 shl     rax, 4
.text:000000000000D649                 add     rax, [rcx]
.text:000000000000D64C                 mov     [rsp+108h+var_C8], r9
.text:000000000000D651                 mov     [rsp+108h+var_D8], rcx
.text:000000000000D656                 mov     [rsp+108h+var_80], 0
.text:000000000000D661                 mov     rax, [rax]
.text:000000000000D664                 mov     [rsp+108h+var_C0], rax
.text:000000000000D669                 movsxd  rax, dword ptr [rdi+0E0h]
.text:000000000000D670                 add     rax, r9
.text:000000000000D673                 cmp     rax, r13
.text:000000000000D676                 jge     loc_DC96
.text:000000000000D67C
.text:000000000000D67C loc_D67C:                               ; CODE XREF: check_arrival+6FB↓j
.text:000000000000D67C                 mov     rax, [rsp+108h+var_A8]
.text:000000000000D681                 mov     rdx, [r15+0B8h]
.text:000000000000D688                 mov     rcx, [r15+48h]
.text:000000000000D68C                 mov     r12, [rax]
.text:000000000000D68F                 mov     r14, [rax+10h]
.text:000000000000D693                 mov     [rsp+108h+var_A0], rdx
.text:000000000000D698                 mov     [rsp+108h+var_98], rcx
.text:000000000000D69D                 mov     edx, [r15+0A0h]
.text:000000000000D6A4                 test    r12, r12
.text:000000000000D6A7                 mov     [r15+0B8h], r14
.text:000000000000D6AE                 jz      loc_DA90
.text:000000000000D6B4                 lea     rsi, [r12-1]
.text:000000000000D6B9                 mov     [r15+48h], r12
.text:000000000000D6BD                 mov     rdi, r15
.text:000000000000D6C0                 call    re_string_context_at
.text:000000000000D6C5                 cmp     r12, rbp
.text:000000000000D6C8                 mov     r13d, eax
.text:000000000000D6CB                 jz      loc_DAA3
.text:000000000000D6D1                 mov     rbp, [r14+r12*8]
.text:000000000000D6D5                 test    rbp, rbp
.text:000000000000D6D8                 jz      short loc_D6E4
.text:000000000000D6DA                 test    byte ptr [rbp+68h], 40h
.text:000000000000D6DE                 jnz     loc_DC00
.text:000000000000D6E4
.text:000000000000D6E4 loc_D6E4:                               ; CODE XREF: check_arrival+D8↑j
.text:000000000000D6E4                 pxor    xmm0, xmm0
.text:000000000000D6E8                 mov     [rsp+108h+var_68], 0
.text:000000000000D6F4                 movaps  [rsp+108h+var_78], xmm0
.text:000000000000D6FC
.text:000000000000D6FC loc_D6FC:                               ; CODE XREF: check_arrival+627↓j
.text:000000000000D6FC                                         ; check_arrival+691↓j
.text:000000000000D6FC                 cmp     r12, [rsp+108h+var_C8]
.text:000000000000D701                 jge     loc_DA28
.text:000000000000D707                 mov     ecx, [r15+0E0h]
.text:000000000000D70E                 test    ecx, ecx
.text:000000000000D710                 js      loc_DA28
.text:000000000000D716                 lea     rbx, [rsp+108h+var_78]
.text:000000000000D71E                 lea     rax, ds:8[r12*8]
.text:000000000000D726                 mov     [rsp+108h+var_108], r12
.text:000000000000D72A                 mov     [rsp+108h+var_E8], 0
.text:000000000000D733                 mov     [rsp+108h+var_100], rbx
.text:000000000000D738                 lea     rbx, [rsp+108h+var_58]
.text:000000000000D740                 mov     [rsp+108h+var_F8], rax
.text:000000000000D745                 mov     rax, [r15+0B8h]
.text:000000000000D74C                 mov     [rsp+108h+var_F0], rbx
.text:000000000000D751                 lea     rbx, [rsp+108h+var_7C]
.text:000000000000D759                 mov     [rsp+108h+var_B0], rbx
.text:000000000000D75E
.text:000000000000D75E loc_D75E:                               ; CODE XREF: check_arrival+422↓j
.text:000000000000D75E                 mov     rcx, [rsp+108h+var_F8]
.text:000000000000D763                 mov     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000D76F                 mov     rsi, [rax+rcx]
.text:000000000000D773                 test    rsi, rsi
.text:000000000000D776                 jz      loc_DB38
.text:000000000000D77C                 mov     rdi, [rsp+108h+var_100]
.text:000000000000D781                 add     rsi, 8
.text:000000000000D785                 call    re_node_set_merge
.text:000000000000D78A                 test    eax, eax
.text:000000000000D78C                 mov     [rsp+108h+var_80], eax
.text:000000000000D793                 jnz     loc_DB70
.text:000000000000D799                 test    rbp, rbp
.text:000000000000D79C                 jz      loc_D948
.text:000000000000D7A2
.text:000000000000D7A2 loc_D7A2:                               ; CODE XREF: check_arrival+53B↓j
.text:000000000000D7A2                 cmp     qword ptr [rbp+28h], 0
.text:000000000000D7A7                 mov     rax, [rsp+108h+var_F0]
.text:000000000000D7AC                 pxor    xmm0, xmm0
.text:000000000000D7B0                 mov     r12, [r15+98h]
.text:000000000000D7B7                 mov     [rsp+108h+var_7C], 0
.text:000000000000D7C2                 mov     qword ptr [rax+10h], 0
.text:000000000000D7CA                 movaps  xmmword ptr [rax], xmm0
.text:000000000000D7CD                 jle     loc_DD00
.text:000000000000D7D3                 lea     rax, [r12+0D8h]
.text:000000000000D7DB                 xor     ebx, ebx
.text:000000000000D7DD                 mov     [rsp+108h+var_E0], rax
.text:000000000000D7E2                 jmp     short loc_D829
.text:000000000000D7E2 ; ---------------------------------------------------------------------------
.text:000000000000D7E4                 align 8
.text:000000000000D7E8
.text:000000000000D7E8 loc_D7E8:                               ; CODE XREF: check_arrival+244↓j
.text:000000000000D7E8                                         ; check_arrival+52F↓j
.text:000000000000D7E8                 mov     rdx, [rsp+108h+var_108]
.text:000000000000D7EC                 mov     rdi, r15
.text:000000000000D7EF                 call    check_node_accept
.text:000000000000D7F4                 test    al, al
.text:000000000000D7F6                 jz      short loc_D81B
.text:000000000000D7F8
.text:000000000000D7F8 loc_D7F8:                               ; CODE XREF: check_arrival+522↓j
.text:000000000000D7F8                 lea     r13, ds:0[r14*8]
.text:000000000000D800
.text:000000000000D800 loc_D800:                               ; CODE XREF: check_arrival+30B↓j
.text:000000000000D800                                         ; check_arrival+31A↓j
.text:000000000000D800                 mov     rax, [r12+18h]
.text:000000000000D805                 mov     rdi, [rsp+108h+var_100]
.text:000000000000D80A                 mov     rsi, [rax+r13]
.text:000000000000D80E                 call    re_node_set_insert
.text:000000000000D813                 test    al, al
.text:000000000000D815                 jz      loc_DB58
.text:000000000000D81B
.text:000000000000D81B loc_D81B:                               ; CODE XREF: check_arrival+1F6↑j
.text:000000000000D81B                 add     rbx, 1
.text:000000000000D81F                 cmp     rbx, [rbp+28h]
.text:000000000000D823                 jge     loc_DBB0
.text:000000000000D829
.text:000000000000D829 loc_D829:                               ; CODE XREF: check_arrival+1E2↑j
.text:000000000000D829                 mov     rax, [rbp+30h]
.text:000000000000D82D                 mov     rdi, [r12]
.text:000000000000D831                 mov     r14, [rax+rbx*8]
.text:000000000000D835                 mov     r13, r14
.text:000000000000D838                 shl     r13, 4
.text:000000000000D83C                 lea     rsi, [rdi+r13]
.text:000000000000D840                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000D844                 jz      short loc_D7E8
.text:000000000000D846                 mov     r8, [rsp+108h+var_108]
.text:000000000000D84A                 mov     rsi, [rsp+108h+var_E0]
.text:000000000000D84F                 mov     rcx, r15
.text:000000000000D852                 mov     rdx, r14
.text:000000000000D855                 call    check_node_accept_bytes_isra_31
.text:000000000000D85A                 cmp     eax, 1
.text:000000000000D85D                 jle     loc_DB20
.text:000000000000D863                 cdqe
.text:000000000000D865                 add     rax, [rsp+108h+var_108]
.text:000000000000D869                 mov     rdx, [r12+18h]
.text:000000000000D86E                 lea     r13, ds:0[r14*8]
.text:000000000000D876                 mov     rdx, [rdx+r14*8]
.text:000000000000D87A                 mov     rcx, rax
.text:000000000000D87D                 mov     [rsp+108h+var_D0], rax
.text:000000000000D882                 lea     r14, ds:0[rax*8]
.text:000000000000D88A                 mov     rax, [r15+0B8h]
.text:000000000000D891                 mov     rsi, [rax+rcx*8]
.text:000000000000D895                 mov     [rsp+108h+var_50], 0
.text:000000000000D8A1                 test    rsi, rsi
.text:000000000000D8A4                 jz      short loc_D8C9
.text:000000000000D8A6                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000D8AB                 add     rsi, 8
.text:000000000000D8AF                 mov     [rsp+108h+var_B8], rdx
.text:000000000000D8B4                 call    re_node_set_merge
.text:000000000000D8B9                 test    eax, eax
.text:000000000000D8BB                 mov     [rsp+108h+var_7C], eax
.text:000000000000D8C2                 mov     rdx, [rsp+108h+var_B8]
.text:000000000000D8C7                 jnz     short loc_D920
.text:000000000000D8C9
.text:000000000000D8C9 loc_D8C9:                               ; CODE XREF: check_arrival+2A4↑j
.text:000000000000D8C9                 mov     rdi, [rsp+108h+var_F0]
.text:000000000000D8CE                 mov     rsi, rdx
.text:000000000000D8D1                 call    re_node_set_insert
.text:000000000000D8D6                 test    al, al
.text:000000000000D8D8                 jz      loc_DB58
.text:000000000000D8DE                 add     r14, [r15+0B8h]
.text:000000000000D8E5                 mov     rdx, [rsp+108h+var_F0]
.text:000000000000D8EA                 mov     rsi, r12
.text:000000000000D8ED                 mov     rdi, [rsp+108h+var_B0]
.text:000000000000D8F2                 call    re_acquire_state
.text:000000000000D8F7                 mov     rdx, [rsp+108h+var_D0]
.text:000000000000D8FC                 mov     [r14], rax
.text:000000000000D8FF                 mov     rax, [r15+0B8h]
.text:000000000000D906                 cmp     qword ptr [rax+rdx*8], 0
.text:000000000000D90B                 jnz     loc_D800
.text:000000000000D911                 mov     edx, [rsp+108h+var_7C]
.text:000000000000D918                 test    edx, edx
.text:000000000000D91A                 jz      loc_D800
.text:000000000000D920
.text:000000000000D920 loc_D920:                               ; CODE XREF: check_arrival+2C7↑j
.text:000000000000D920                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000D928                 call    _free
.text:000000000000D92D                 mov     eax, [rsp+108h+var_7C]
.text:000000000000D934                 test    eax, eax
.text:000000000000D936                 mov     [rsp+108h+var_80], eax
.text:000000000000D93D                 jnz     loc_DB70
.text:000000000000D943                 nop     dword ptr [rax+rax+00h]
.text:000000000000D948
.text:000000000000D948 loc_D948:                               ; CODE XREF: check_arrival+19C↑j
.text:000000000000D948                                         ; check_arrival+5C8↓j
.text:000000000000D948                 mov     rax, [rsp+108h+var_108]
.text:000000000000D94C                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000D955                 lea     rbx, [rax+1]
.text:000000000000D959                 mov     r12, rbx
.text:000000000000D95C                 jz      short loc_D9B4
.text:000000000000D95E                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000D965                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000D96A                 mov     rsi, [rsp+108h+var_100]
.text:000000000000D96F                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000D974                 call    check_arrival_expand_ecl
.text:000000000000D979                 test    eax, eax
.text:000000000000D97B                 mov     [rsp+108h+var_80], eax
.text:000000000000D982                 jnz     loc_DB70
.text:000000000000D988                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000D990                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000D995                 mov     rdx, rbx
.text:000000000000D998                 mov     rsi, [rsp+108h+var_100]
.text:000000000000D99D                 mov     rdi, r15
.text:000000000000D9A0                 call    expand_bkref_cache
.text:000000000000D9A5                 test    eax, eax
.text:000000000000D9A7                 mov     [rsp+108h+var_80], eax
.text:000000000000D9AE                 jnz     loc_DB70
.text:000000000000D9B4
.text:000000000000D9B4 loc_D9B4:                               ; CODE XREF: check_arrival+35C↑j
.text:000000000000D9B4                                         ; check_arrival+54C↓j
.text:000000000000D9B4                 mov     edx, [r15+0A0h]
.text:000000000000D9BB                 mov     rsi, [rsp+108h+var_108]
.text:000000000000D9BF                 mov     rdi, r15
.text:000000000000D9C2                 call    re_string_context_at
.text:000000000000D9C7                 mov     rdx, [rsp+108h+var_100]
.text:000000000000D9CC                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000D9D1                 lea     rdi, [rsp+108h+var_80]
.text:000000000000D9D9                 mov     ecx, eax
.text:000000000000D9DB                 call    re_acquire_state_context
.text:000000000000D9E0                 test    rax, rax
.text:000000000000D9E3                 mov     rbp, rax
.text:000000000000D9E6                 jz      loc_DBD0
.text:000000000000D9EC                 mov     rax, [r15+0B8h]
.text:000000000000D9F3                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000D9F8                 mov     [rsp+108h+var_E8], 0
.text:000000000000DA01                 mov     [rax+rdx], rbp
.text:000000000000DA05
.text:000000000000DA05 loc_DA05:                               ; CODE XREF: check_arrival+5F5↓j
.text:000000000000DA05                 cmp     [rsp+108h+var_C8], rbx
.text:000000000000DA0A                 jle     short loc_DA28
.text:000000000000DA0C                 movsxd  rdx, dword ptr [r15+0E0h]
.text:000000000000DA13                 add     [rsp+108h+var_F8], 8
.text:000000000000DA19                 cmp     rdx, [rsp+108h+var_E8]
.text:000000000000DA1E                 mov     [rsp+108h+var_108], rbx
.text:000000000000DA22                 jge     loc_D75E
.text:000000000000DA28
.text:000000000000DA28 loc_DA28:                               ; CODE XREF: check_arrival+101↑j
.text:000000000000DA28                                         ; check_arrival+110↑j ...
.text:000000000000DA28                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000DA30                 call    _free
.text:000000000000DA35                 mov     rax, [r15+0B8h]
.text:000000000000DA3C                 mov     rbx, [rsp+108h+var_C8]
.text:000000000000DA41                 mov     rax, [rax+rbx*8]
.text:000000000000DA45                 test    rax, rax
.text:000000000000DA48                 jz      loc_DD25
.text:000000000000DA4E                 mov     rbx, [rsp+108h+var_A8]
.text:000000000000DA53                 mov     rdx, [rsp+108h+var_90]
.text:000000000000DA58                 lea     rsi, [rax+18h]
.text:000000000000DA5C                 mov     [rbx], r12
.text:000000000000DA5F                 mov     rbx, [rsp+108h+var_A0]
.text:000000000000DA64                 mov     [r15+0B8h], rbx
.text:000000000000DA6B                 mov     rbx, [rsp+108h+var_98]
.text:000000000000DA70                 mov     [r15+48h], rbx
.text:000000000000DA74                 mov     rdi, [rax+10h]
.text:000000000000DA78                 call    re_node_set_contains_isra_3
.text:000000000000DA7D                 test    rax, rax
.text:000000000000DA80                 setz    al
.text:000000000000DA83                 movzx   eax, al
.text:000000000000DA86                 jmp     loc_DB84
.text:000000000000DA86 ; ---------------------------------------------------------------------------
.text:000000000000DA8B                 align 10h
.text:000000000000DA90
.text:000000000000DA90 loc_DA90:                               ; CODE XREF: check_arrival+AE↑j
.text:000000000000DA90                 lea     rsi, [rbp-1]
.text:000000000000DA94                 mov     [r15+48h], rbp
.text:000000000000DA98                 mov     rdi, r15
.text:000000000000DA9B                 call    re_string_context_at
.text:000000000000DAA0                 mov     r13d, eax
.text:000000000000DAA3
.text:000000000000DAA3 loc_DAA3:                               ; CODE XREF: check_arrival+CB↑j
.text:000000000000DAA3                 mov     edi, 8          ; size
.text:000000000000DAA8                 mov     qword ptr [rsp+108h+var_78], 1
.text:000000000000DAB4                 mov     qword ptr [rsp+108h+var_78+8], 1
.text:000000000000DAC0                 call    _malloc
.text:000000000000DAC5                 test    rax, rax
.text:000000000000DAC8                 mov     [rsp+108h+var_68], rax
.text:000000000000DAD0                 jz      loc_DD1B
.text:000000000000DAD6                 mov     [rax], rbx
.text:000000000000DAD9                 mov     ecx, [rsp+108h+arg_0]
.text:000000000000DAE0                 lea     rbx, [rsp+108h+var_78]
.text:000000000000DAE8                 mov     rdx, [rsp+108h+var_C0]
.text:000000000000DAED                 mov     rdi, [rsp+108h+var_D8]
.text:000000000000DAF2                 mov     r12, rbp
.text:000000000000DAF5                 mov     rsi, rbx
.text:000000000000DAF8                 mov     [rsp+108h+var_80], 0
.text:000000000000DB03                 call    check_arrival_expand_ecl
.text:000000000000DB08                 test    eax, eax
.text:000000000000DB0A                 mov     [rsp+108h+var_80], eax
.text:000000000000DB11                 jz      loc_DC2D
.text:000000000000DB17                 jmp     short loc_DB70
.text:000000000000DB17 ; ---------------------------------------------------------------------------
.text:000000000000DB19                 align 20h
.text:000000000000DB20
.text:000000000000DB20 loc_DB20:                               ; CODE XREF: check_arrival+25D↑j
.text:000000000000DB20                 test    eax, eax
.text:000000000000DB22                 jnz     loc_D7F8
.text:000000000000DB28                 mov     rsi, [r12]
.text:000000000000DB2C                 add     rsi, r13
.text:000000000000DB2F                 jmp     loc_D7E8
.text:000000000000DB2F ; ---------------------------------------------------------------------------
.text:000000000000DB34                 align 8
.text:000000000000DB38
.text:000000000000DB38 loc_DB38:                               ; CODE XREF: check_arrival+176↑j
.text:000000000000DB38                 test    rbp, rbp
.text:000000000000DB3B                 jnz     loc_D7A2
.text:000000000000DB41                 mov     rax, [rsp+108h+var_108]
.text:000000000000DB45                 lea     rbx, [rax+1]
.text:000000000000DB49                 mov     r12, rbx
.text:000000000000DB4C                 jmp     loc_D9B4
.text:000000000000DB4C ; ---------------------------------------------------------------------------
.text:000000000000DB51                 align 8
.text:000000000000DB58
.text:000000000000DB58 loc_DB58:                               ; CODE XREF: check_arrival+215↑j
.text:000000000000DB58                                         ; check_arrival+2D8↑j
.text:000000000000DB58                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000DB60                 call    _free
.text:000000000000DB65                 mov     [rsp+108h+var_80], 0Ch
.text:000000000000DB70
.text:000000000000DB70 loc_DB70:                               ; CODE XREF: check_arrival+193↑j
.text:000000000000DB70                                         ; check_arrival+33D↑j ...
.text:000000000000DB70                 mov     rdi, [rsp+108h+var_68] ; ptr
.text:000000000000DB78                 call    _free
.text:000000000000DB7D                 mov     eax, [rsp+108h+var_80]
.text:000000000000DB84
.text:000000000000DB84 loc_DB84:                               ; CODE XREF: check_arrival+486↑j
.text:000000000000DB84                                         ; check_arrival+61D↓j ...
.text:000000000000DB84                 mov     rbx, [rsp+108h+var_40]
.text:000000000000DB8C                 xor     rbx, fs:28h
.text:000000000000DB95                 jnz     loc_DD4C
.text:000000000000DB9B                 add     rsp, 0D8h
.text:000000000000DBA2                 pop     rbx
.text:000000000000DBA3                 pop     rbp
.text:000000000000DBA4                 pop     r12
.text:000000000000DBA6                 pop     r13
.text:000000000000DBA8                 pop     r14
.text:000000000000DBAA                 pop     r15
.text:000000000000DBAC                 retn
.text:000000000000DBAC ; ---------------------------------------------------------------------------
.text:000000000000DBAD                 align 10h
.text:000000000000DBB0
.text:000000000000DBB0 loc_DBB0:                               ; CODE XREF: check_arrival+223↑j
.text:000000000000DBB0                 mov     rdi, [rsp+108h+ptr] ; ptr
.text:000000000000DBB8
.text:000000000000DBB8 loc_DBB8:                               ; CODE XREF: check_arrival+702↓j
.text:000000000000DBB8                 call    _free
.text:000000000000DBBD                 mov     [rsp+108h+var_80], 0
.text:000000000000DBC8                 jmp     loc_D948
.text:000000000000DBC8 ; ---------------------------------------------------------------------------
.text:000000000000DBCD                 align 10h
.text:000000000000DBD0
.text:000000000000DBD0 loc_DBD0:                               ; CODE XREF: check_arrival+3E6↑j
.text:000000000000DBD0                 mov     eax, [rsp+108h+var_80]
.text:000000000000DBD7                 test    eax, eax
.text:000000000000DBD9                 jnz     short loc_DB70
.text:000000000000DBDB                 mov     rax, [r15+0B8h]
.text:000000000000DBE2                 mov     rdx, [rsp+108h+var_F8]
.text:000000000000DBE7                 add     [rsp+108h+var_E8], 1
.text:000000000000DBED                 mov     qword ptr [rax+rdx], 0
.text:000000000000DBF5                 jmp     loc_DA05
.text:000000000000DBF5 ; ---------------------------------------------------------------------------
.text:000000000000DBFA                 align 20h
.text:000000000000DC00
.text:000000000000DC00 loc_DC00:                               ; CODE XREF: check_arrival+DE↑j
.text:000000000000DC00                 lea     rbx, [rsp+108h+var_78]
.text:000000000000DC08                 lea     rsi, [rbp+8]
.text:000000000000DC0C                 mov     rdi, rbx
.text:000000000000DC0F                 call    re_node_set_init_copy
.text:000000000000DC14                 test    eax, eax
.text:000000000000DC16                 mov     [rsp+108h+var_80], eax
.text:000000000000DC1D                 jnz     loc_DB84
.text:000000000000DC23                 test    byte ptr [rbp+68h], 40h
.text:000000000000DC27                 jz      loc_D6FC
.text:000000000000DC2D
.text:000000000000DC2D loc_DC2D:                               ; CODE XREF: check_arrival+511↑j
.text:000000000000DC2D                 cmp     qword ptr [rsp+108h+var_78+8], 0
.text:000000000000DC36                 jz      short loc_DC62
.text:000000000000DC38                 mov     r8d, [rsp+108h+arg_0]
.text:000000000000DC40                 mov     rcx, [rsp+108h+var_C0]
.text:000000000000DC45                 mov     rdx, r12
.text:000000000000DC48                 mov     rsi, rbx
.text:000000000000DC4B                 mov     rdi, r15
.text:000000000000DC4E                 call    expand_bkref_cache
.text:000000000000DC53                 test    eax, eax
.text:000000000000DC55                 mov     [rsp+108h+var_80], eax
.text:000000000000DC5C                 jnz     loc_DB70
.text:000000000000DC62
.text:000000000000DC62 loc_DC62:                               ; CODE XREF: check_arrival+636↑j
.text:000000000000DC62                 mov     rsi, [rsp+108h+var_D8]
.text:000000000000DC67                 lea     rdi, [rsp+108h+var_80]
.text:000000000000DC6F                 mov     ecx, r13d
.text:000000000000DC72                 mov     rdx, rbx
.text:000000000000DC75                 call    re_acquire_state_context
.text:000000000000DC7A                 test    rax, rax
.text:000000000000DC7D                 mov     rbp, rax
.text:000000000000DC80                 jz      loc_DD07
.text:000000000000DC86
.text:000000000000DC86 loc_DC86:                               ; CODE XREF: check_arrival+710↓j
.text:000000000000DC86                 mov     rax, [r15+0B8h]
.text:000000000000DC8D                 mov     [rax+r12*8], rbp
.text:000000000000DC91                 jmp     loc_D6FC
.text:000000000000DC96 ; ---------------------------------------------------------------------------
.text:000000000000DC96
.text:000000000000DC96 loc_DC96:                               ; CODE XREF: check_arrival+76↑j
.text:000000000000DC96                 lea     r12, [rax+1]
.text:000000000000DC9A                 mov     rax, 7FFFFFFFFFFFFFFFh
.text:000000000000DCA4                 sub     rax, r13
.text:000000000000DCA7                 cmp     rax, r12
.text:000000000000DCAA                 jl      short loc_DD1B
.text:000000000000DCAC                 lea     r14, [r13+r12+0]
.text:000000000000DCB1                 mov     rax, 1FFFFFFFFFFFFFFFh
.text:000000000000DCBB                 cmp     r14, rax
.text:000000000000DCBE                 ja      short loc_DD1B
.text:000000000000DCC0                 mov     rax, [rsp+108h+var_A8]
.text:000000000000DCC5                 lea     rsi, ds:0[r14*8] ; size
.text:000000000000DCCD                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000DCD1                 call    _realloc
.text:000000000000DCD6                 test    rax, rax
.text:000000000000DCD9                 jz      short loc_DD1B
.text:000000000000DCDB                 mov     rcx, [rsp+108h+var_A8]
.text:000000000000DCE0                 lea     rdx, ds:0[r12*8] ; n
.text:000000000000DCE8                 lea     rdi, [rax+r13*8] ; s
.text:000000000000DCEC                 xor     esi, esi        ; c
.text:000000000000DCEE                 mov     [rcx+10h], rax
.text:000000000000DCF2                 mov     [rcx+8], r14
.text:000000000000DCF6                 call    _memset
.text:000000000000DCFB                 jmp     loc_D67C
.text:000000000000DD00 ; ---------------------------------------------------------------------------
.text:000000000000DD00
.text:000000000000DD00 loc_DD00:                               ; CODE XREF: check_arrival+1CD↑j
.text:000000000000DD00                 xor     edi, edi
.text:000000000000DD02                 jmp     loc_DBB8
.text:000000000000DD07 ; ---------------------------------------------------------------------------
.text:000000000000DD07
.text:000000000000DD07 loc_DD07:                               ; CODE XREF: check_arrival+680↑j
.text:000000000000DD07                 mov     esi, [rsp+108h+var_80]
.text:000000000000DD0E                 test    esi, esi
.text:000000000000DD10                 jz      loc_DC86
.text:000000000000DD16                 jmp     loc_DB70
.text:000000000000DD1B ; ---------------------------------------------------------------------------
.text:000000000000DD1B
.text:000000000000DD1B loc_DD1B:                               ; CODE XREF: check_arrival+4D0↑j
.text:000000000000DD1B                                         ; check_arrival+6AA↑j ...
.text:000000000000DD1B                 mov     eax, 0Ch
.text:000000000000DD20                 jmp     loc_DB84
.text:000000000000DD25 ; ---------------------------------------------------------------------------
.text:000000000000DD25
.text:000000000000DD25 loc_DD25:                               ; CODE XREF: check_arrival+448↑j
.text:000000000000DD25                 mov     rax, [rsp+108h+var_A8]
.text:000000000000DD2A                 mov     [rax], r12
.text:000000000000DD2D                 mov     rax, [rsp+108h+var_A0]
.text:000000000000DD32                 mov     [r15+0B8h], rax
.text:000000000000DD39                 mov     rax, [rsp+108h+var_98]
.text:000000000000DD3E                 mov     [r15+48h], rax
.text:000000000000DD42                 mov     eax, 1
.text:000000000000DD47                 jmp     loc_DB84
.text:000000000000DD4C ; ---------------------------------------------------------------------------
.text:000000000000DD4C
.text:000000000000DD4C loc_DD4C:                               ; CODE XREF: check_arrival+595↑j
.text:000000000000DD4C                 call    ___stack_chk_fail
.text:000000000000DD4C ; } // starts at D600
.text:000000000000DD4C check_arrival   endp
.text:000000000000DD4C
.text:000000000000DD4C ; ---------------------------------------------------------------------------
.text:000000000000DD51                 align 20h
.text:000000000000DD60
.text:000000000000DD60 ; =============== S U B R O U T I N E =======================================
.text:000000000000DD60
.text:000000000000DD60 ; Attributes: bp-based frame
.text:000000000000DD60
.text:000000000000DD60 set_regs        proc near               ; CODE XREF: re_search_internal+1351↓p
.text:000000000000DD60
.text:000000000000DD60 var_D1          = byte ptr -0D1h
.text:000000000000DD60 var_C9          = byte ptr -0C9h
.text:000000000000DD60 var_C8          = qword ptr -0C8h
.text:000000000000DD60 dest            = qword ptr -0C0h
.text:000000000000DD60 n               = qword ptr -0B8h
.text:000000000000DD60 var_B0          = qword ptr -0B0h
.text:000000000000DD60 var_A8          = qword ptr -0A8h
.text:000000000000DD60 var_A0          = qword ptr -0A0h
.text:000000000000DD60 var_98          = qword ptr -98h
.text:000000000000DD60 var_90          = qword ptr -90h
.text:000000000000DD60 var_88          = qword ptr -88h
.text:000000000000DD60 var_78          = qword ptr -78h
.text:000000000000DD60 var_70          = xmmword ptr -70h
.text:000000000000DD60 ptr             = qword ptr -60h
.text:000000000000DD60 var_50          = qword ptr -50h
.text:000000000000DD60 var_48          = qword ptr -48h
.text:000000000000DD60 var_40          = qword ptr -40h
.text:000000000000DD60 var_38          = qword ptr -38h
.text:000000000000DD60
.text:000000000000DD60 ; __unwind {
.text:000000000000DD60                 push    rbp
.text:000000000000DD61                 mov     rbp, rsp
.text:000000000000DD64                 push    r15
.text:000000000000DD66                 push    r14
.text:000000000000DD68                 push    r13
.text:000000000000DD6A                 push    r12
.text:000000000000DD6C                 mov     r13, rcx
.text:000000000000DD6F                 push    rbx
.text:000000000000DD70                 mov     r12, rsi
.text:000000000000DD73                 sub     rsp, 0B8h
.text:000000000000DD7A                 mov     [rbp+var_98], rdx
.text:000000000000DD81                 mov     [rbp+var_50], 0
.text:000000000000DD89                 mov     rax, fs:28h
.text:000000000000DD92                 mov     [rbp+var_38], rax
.text:000000000000DD96                 xor     eax, eax
.text:000000000000DD98                 mov     rax, [rdi]
.text:000000000000DD9B                 test    r8b, r8b
.text:000000000000DD9E                 mov     [rbp+var_48], 2
.text:000000000000DDA6                 mov     [rbp+var_40], 0
.text:000000000000DDAE                 mov     [rbp+var_90], rax
.text:000000000000DDB5                 jz      loc_E55D
.text:000000000000DDBB                 mov     edi, 60h ; '`'  ; size
.text:000000000000DDC0                 call    _malloc
.text:000000000000DDC5                 lea     rcx, [rbp+var_50]
.text:000000000000DDC9                 test    rax, rax
.text:000000000000DDCC                 mov     [rbp+var_40], rax
.text:000000000000DDD0                 mov     [rbp+var_88], rcx
.text:000000000000DDD7                 jz      loc_E4FC
.text:000000000000DDDD
.text:000000000000DDDD loc_DDDD:                               ; CODE XREF: set_regs+808↓j
.text:000000000000DDDD                 mov     rax, [rbp+var_90]
.text:000000000000DDE4                 pxor    xmm0, xmm0
.text:000000000000DDE8                 mov     [rbp+ptr], 0
.text:000000000000DDF0                 mov     rbx, [rax+90h]
.text:000000000000DDF7                 mov     rax, [rbp+var_98]
.text:000000000000DDFE                 movaps  [rbp+var_70], xmm0
.text:000000000000DE02                 shl     rax, 4
.text:000000000000DE06                 cmp     rax, 0FBFh
.text:000000000000DE0C                 mov     [rbp+n], rax
.text:000000000000DE13                 ja      loc_E506
.text:000000000000DE19                 add     rax, 10h
.text:000000000000DE1D                 mov     [rbp+var_C9], 0
.text:000000000000DE24                 sub     rsp, rax
.text:000000000000DE27                 lea     rax, [rsp+0E0h+var_D1]
.text:000000000000DE2C                 and     rax, 0FFFFFFFFFFFFFFF0h
.text:000000000000DE30                 mov     [rbp+dest], rax
.text:000000000000DE37
.text:000000000000DE37 loc_DE37:                               ; CODE XREF: set_regs+7C3↓j
.text:000000000000DE37                 mov     rdx, [rbp+n]    ; n
.text:000000000000DE3E                 mov     rdi, [rbp+dest] ; dest
.text:000000000000DE45                 mov     rsi, r13        ; src
.text:000000000000DE48                 call    _memcpy
.text:000000000000DE4D                 lea     rax, [rbp+var_70]
.text:000000000000DE51                 mov     rcx, [r13+0]
.text:000000000000DE55                 mov     [rbp+var_A8], rax
.text:000000000000DE5C                 add     rax, 10h
.text:000000000000DE60                 mov     [rbp+var_78], rcx
.text:000000000000DE64                 mov     [rbp+var_C8], rax
.text:000000000000DE6B
.text:000000000000DE6B loc_DE6B:                               ; CODE XREF: set_regs+612↓j
.text:000000000000DE6B                 lea     rax, [rbp+var_78]
.text:000000000000DE6F                 mov     [rbp+var_B0], rax
.text:000000000000DE76                 jmp     loc_DF59
.text:000000000000DE76 ; ---------------------------------------------------------------------------
.text:000000000000DE7B                 align 20h
.text:000000000000DE80
.text:000000000000DE80 loc_DE80:                               ; CODE XREF: set_regs+224↓j
.text:000000000000DE80                 cmp     esi, 9
.text:000000000000DE83                 jz      loc_E070
.text:000000000000DE89
.text:000000000000DE89 loc_DE89:                               ; CODE XREF: set_regs+238↓j
.text:000000000000DE89                                         ; set_regs+254↓j ...
.text:000000000000DE89                 cmp     rax, rcx
.text:000000000000DE8C                 jnz     short loc_DE9C
.text:000000000000DE8E                 cmp     [r12+0B0h], rbx
.text:000000000000DE96                 jz      loc_E270
.text:000000000000DE9C
.text:000000000000DE9C loc_DE9C:                               ; CODE XREF: set_regs+12C↑j
.text:000000000000DE9C                                         ; set_regs+5C5↓j
.text:000000000000DE9C                 mov     r14, [r12+98h]
.text:000000000000DEA4                 mov     rdi, [r14]
.text:000000000000DEA7                 lea     rsi, [rdi+r9]
.text:000000000000DEAB                 movzx   eax, byte ptr [rsi+8]
.text:000000000000DEAF                 test    al, 8
.text:000000000000DEB1                 jnz     loc_DFC0
.text:000000000000DEB7                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000DEBB                 jnz     loc_E0C0
.text:000000000000DEC1                 cmp     al, 4
.text:000000000000DEC3                 jz      loc_E100
.text:000000000000DEC9                 mov     rcx, [rbp+var_78]
.text:000000000000DECD
.text:000000000000DECD loc_DECD:                               ; CODE XREF: set_regs+39A↓j
.text:000000000000DECD                                         ; set_regs+6A5↓j
.text:000000000000DECD                 mov     rdx, rcx
.text:000000000000DED0                 mov     rdi, r12
.text:000000000000DED3                 mov     [rbp+var_A0], rcx
.text:000000000000DEDA                 call    check_node_accept
.text:000000000000DEDF                 test    al, al
.text:000000000000DEE1                 mov     rcx, [rbp+var_A0]
.text:000000000000DEE8                 jz      loc_E338
.text:000000000000DEEE                 mov     rax, [r14+18h]
.text:000000000000DEF2                 lea     rdx, [rcx+1]
.text:000000000000DEF6                 mov     rbx, [rax+r15*8]
.text:000000000000DEFA
.text:000000000000DEFA loc_DEFA:                               ; CODE XREF: set_regs+431↓j
.text:000000000000DEFA                 cmp     [rbp+var_88], 0
.text:000000000000DF02                 mov     [rbp+var_78], rdx
.text:000000000000DF06                 jz      short loc_DF44
.text:000000000000DF08                 cmp     rdx, [r12+0A8h]
.text:000000000000DF10                 jg      loc_E346
.text:000000000000DF16                 mov     rax, [r12+0B8h]
.text:000000000000DF1E                 mov     rax, [rax+rdx*8]
.text:000000000000DF22                 test    rax, rax
.text:000000000000DF25                 jz      loc_E346
.text:000000000000DF2B                 mov     rdi, [rax+10h]
.text:000000000000DF2F                 lea     rsi, [rax+18h]
.text:000000000000DF33                 mov     rdx, rbx
.text:000000000000DF36                 call    re_node_set_contains_isra_3
.text:000000000000DF3B                 test    rax, rax
.text:000000000000DF3E                 jz      loc_E346
.text:000000000000DF44
.text:000000000000DF44 loc_DF44:                               ; CODE XREF: set_regs+1A6↑j
.text:000000000000DF44                 mov     qword ptr [rbp+var_70+8], 0
.text:000000000000DF4C
.text:000000000000DF4C loc_DF4C:                               ; CODE XREF: set_regs+304↓j
.text:000000000000DF4C                                         ; set_regs+470↓j ...
.text:000000000000DF4C                 test    rbx, rbx
.text:000000000000DF4F                 js      loc_E32A
.text:000000000000DF55                 mov     rcx, [rbp+var_78]
.text:000000000000DF59
.text:000000000000DF59 loc_DF59:                               ; CODE XREF: set_regs+116↑j
.text:000000000000DF59                 mov     rax, [r13+8]
.text:000000000000DF5D                 cmp     rax, rcx
.text:000000000000DF60                 jl      loc_E450
.text:000000000000DF66                 mov     rdi, [rbp+var_90]
.text:000000000000DF6D                 mov     r9, rbx
.text:000000000000DF70                 mov     r15, rbx
.text:000000000000DF73                 shl     r9, 4
.text:000000000000DF77                 mov     rdx, [rdi]
.text:000000000000DF7A                 add     rdx, r9
.text:000000000000DF7D                 movzx   esi, byte ptr [rdx+8]
.text:000000000000DF81                 cmp     esi, 8
.text:000000000000DF84                 jnz     loc_DE80
.text:000000000000DF8A                 mov     rdx, [rdx]
.text:000000000000DF8D                 add     rdx, 1
.text:000000000000DF91                 cmp     [rbp+var_98], rdx
.text:000000000000DF98                 jle     loc_DE89
.text:000000000000DF9E                 shl     rdx, 4
.text:000000000000DFA2                 add     rdx, r13
.text:000000000000DFA5                 mov     qword ptr [rdx+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000DFAD                 mov     [rdx], rcx
.text:000000000000DFB0                 mov     rax, [r13+8]
.text:000000000000DFB4                 jmp     loc_DE89
.text:000000000000DFB4 ; ---------------------------------------------------------------------------
.text:000000000000DFB9                 align 20h
.text:000000000000DFC0
.text:000000000000DFC0 loc_DFC0:                               ; CODE XREF: set_regs+151↑j
.text:000000000000DFC0                 mov     rax, [r12+0B8h]
.text:000000000000DFC8                 mov     rdx, [rbp+var_78]
.text:000000000000DFCC                 mov     rsi, rbx
.text:000000000000DFCF                 mov     rdi, [rbp+var_A8]
.text:000000000000DFD6                 mov     r9, [rax+rdx*8]
.text:000000000000DFDA                 mov     rax, [r14+28h]
.text:000000000000DFDE                 lea     rdx, [rbx+rbx*2]
.text:000000000000DFE2                 mov     [rbp+var_A0], r9
.text:000000000000DFE9                 lea     r15, [rax+rdx*8]
.text:000000000000DFED                 call    re_node_set_insert
.text:000000000000DFF2                 test    al, al
.text:000000000000DFF4                 mov     r9, [rbp+var_A0]
.text:000000000000DFFB                 jz      loc_E4D8
.text:000000000000E001                 mov     r10, [r15+8]
.text:000000000000E005                 test    r10, r10
.text:000000000000E008                 jle     loc_E338
.text:000000000000E00E                 mov     r15, [r15+10h]
.text:000000000000E012                 mov     r11, [r9+10h]
.text:000000000000E016                 lea     r14, [r9+18h]
.text:000000000000E01A                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E021                 xor     r9d, r9d
.text:000000000000E024                 mov     [rbp+var_A0], r12
.text:000000000000E02B                 nop     dword ptr [rax+rax+00h]
.text:000000000000E030
.text:000000000000E030 loc_E030:                               ; CODE XREF: set_regs+2FB↓j
.text:000000000000E030                 mov     r12, [r15+r9*8]
.text:000000000000E034                 mov     rsi, r14
.text:000000000000E037                 mov     rdi, r11
.text:000000000000E03A                 mov     rdx, r12
.text:000000000000E03D                 call    re_node_set_contains_isra_3
.text:000000000000E042                 test    rax, rax
.text:000000000000E045                 jz      short loc_E054
.text:000000000000E047                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E04B                 jnz     loc_E1A0
.text:000000000000E051                 mov     rbx, r12
.text:000000000000E054
.text:000000000000E054 loc_E054:                               ; CODE XREF: set_regs+2E5↑j
.text:000000000000E054                 add     r9, 1
.text:000000000000E058                 cmp     r10, r9
.text:000000000000E05B                 jnz     short loc_E030
.text:000000000000E05D                 mov     r12, [rbp+var_A0]
.text:000000000000E064                 jmp     loc_DF4C
.text:000000000000E064 ; ---------------------------------------------------------------------------
.text:000000000000E069                 align 10h
.text:000000000000E070
.text:000000000000E070 loc_E070:                               ; CODE XREF: set_regs+123↑j
.text:000000000000E070                 mov     rdi, [rdx]
.text:000000000000E073                 lea     rsi, [rdi+1]
.text:000000000000E077                 cmp     [rbp+var_98], rsi
.text:000000000000E07E                 jle     loc_DE89
.text:000000000000E084                 shl     rsi, 4
.text:000000000000E088                 lea     rax, [r13+rsi+0]
.text:000000000000E08D                 cmp     [rax], rcx
.text:000000000000E090                 jl      loc_E410
.text:000000000000E096                 test    byte ptr [rdx+0Ah], 8
.text:000000000000E09A                 jz      short loc_E0AE
.text:000000000000E09C                 mov     rdi, [rbp+dest]
.text:000000000000E0A3                 cmp     qword ptr [rdi+rsi], 0FFFFFFFFFFFFFFFFh
.text:000000000000E0A8                 jnz     loc_E49B
.text:000000000000E0AE
.text:000000000000E0AE loc_E0AE:                               ; CODE XREF: set_regs+33A↑j
.text:000000000000E0AE                 mov     [rax+8], rcx
.text:000000000000E0B2                 mov     rax, [r13+8]
.text:000000000000E0B6                 jmp     loc_DE89
.text:000000000000E0B6 ; ---------------------------------------------------------------------------
.text:000000000000E0BB                 align 20h
.text:000000000000E0C0
.text:000000000000E0C0 loc_E0C0:                               ; CODE XREF: set_regs+15B↑j
.text:000000000000E0C0                 mov     r8, [rbp+var_78]
.text:000000000000E0C4                 lea     rsi, [r14+0D8h]
.text:000000000000E0CB                 mov     rcx, r12
.text:000000000000E0CE                 mov     rdx, rbx
.text:000000000000E0D1                 mov     [rbp+var_A0], r9
.text:000000000000E0D8                 call    check_node_accept_bytes_isra_31
.text:000000000000E0DD                 movsxd  rcx, eax
.text:000000000000E0E0                 test    rcx, rcx
.text:000000000000E0E3                 jnz     loc_E2E1
.text:000000000000E0E9                 mov     r9, [rbp+var_A0]
.text:000000000000E0F0                 mov     rsi, [r14]
.text:000000000000E0F3                 mov     rcx, [rbp+var_78]
.text:000000000000E0F7                 add     rsi, r9
.text:000000000000E0FA                 jmp     loc_DECD
.text:000000000000E0FA ; ---------------------------------------------------------------------------
.text:000000000000E0FF                 align 20h
.text:000000000000E100
.text:000000000000E100 loc_E100:                               ; CODE XREF: set_regs+163↑j
.text:000000000000E100                 mov     rax, [rsi]
.text:000000000000E103                 add     rax, 1
.text:000000000000E107                 shl     rax, 4
.text:000000000000E10B                 add     rax, r13
.text:000000000000E10E                 mov     rdx, [rax+8]
.text:000000000000E112                 mov     rdi, [rax]
.text:000000000000E115                 mov     rcx, rdx
.text:000000000000E118                 sub     rcx, rdi
.text:000000000000E11B                 cmp     [rbp+var_88], 0
.text:000000000000E123                 jz      loc_E2D8
.text:000000000000E129                 cmp     rdi, 0FFFFFFFFFFFFFFFFh
.text:000000000000E12D                 jz      loc_E346
.text:000000000000E133                 cmp     rdx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E137                 jz      loc_E346
.text:000000000000E13D                 test    rcx, rcx
.text:000000000000E140                 jz      loc_E390
.text:000000000000E146                 mov     r15, [rbp+var_78]
.text:000000000000E14A                 mov     rdx, [r12+30h]
.text:000000000000E14F                 mov     rax, [r12+8]
.text:000000000000E154                 sub     rdx, r15
.text:000000000000E157                 cmp     rcx, rdx
.text:000000000000E15A                 jg      loc_E346
.text:000000000000E160                 lea     rsi, [rax+r15]  ; s2
.text:000000000000E164                 add     rdi, rax        ; s1
.text:000000000000E167                 mov     rdx, rcx        ; n
.text:000000000000E16A                 mov     [rbp+var_A0], rcx
.text:000000000000E171                 call    _memcmp
.text:000000000000E176                 test    eax, eax
.text:000000000000E178                 mov     rcx, [rbp+var_A0]
.text:000000000000E17F                 jnz     loc_E346
.text:000000000000E185
.text:000000000000E185 loc_E185:                               ; CODE XREF: set_regs+585↓j
.text:000000000000E185                 mov     rax, [r14+18h]
.text:000000000000E189                 lea     rdx, [r15+rcx]
.text:000000000000E18D                 mov     rbx, [rax+rbx*8]
.text:000000000000E191                 jmp     loc_DEFA
.text:000000000000E191 ; ---------------------------------------------------------------------------
.text:000000000000E196                 align 20h
.text:000000000000E1A0
.text:000000000000E1A0 loc_E1A0:                               ; CODE XREF: set_regs+2EB↑j
.text:000000000000E1A0                 mov     rsi, [rbp+var_C8]
.text:000000000000E1A7                 mov     rdi, qword ptr [rbp+var_70+8]
.text:000000000000E1AB                 mov     rdx, rbx
.text:000000000000E1AE                 mov     r14, r12
.text:000000000000E1B1                 mov     r12, [rbp+var_A0]
.text:000000000000E1B8                 call    re_node_set_contains_isra_3
.text:000000000000E1BD                 test    rax, rax
.text:000000000000E1C0                 jnz     loc_E380
.text:000000000000E1C6                 mov     rcx, [rbp+var_88]
.text:000000000000E1CD                 test    rcx, rcx
.text:000000000000E1D0                 jz      loc_DF4C
.text:000000000000E1D6                 mov     r15, [rcx]
.text:000000000000E1D9                 mov     rdx, [rbp+var_78]
.text:000000000000E1DD                 lea     rax, [r15+1]
.text:000000000000E1E1                 cmp     rax, [rcx+8]
.text:000000000000E1E5                 mov     [rcx], rax
.text:000000000000E1E8                 jz      loc_E56D
.text:000000000000E1EE                 mov     rax, [rcx+10h]
.text:000000000000E1F2
.text:000000000000E1F2 loc_E1F2:                               ; CODE XREF: set_regs+847↓j
.text:000000000000E1F2                 lea     r15, [r15+r15*2]
.text:000000000000E1F6                 shl     r15, 4
.text:000000000000E1FA                 add     r15, rax
.text:000000000000E1FD                 mov     [r15+8], r14
.text:000000000000E201                 mov     r14, [rbp+n]
.text:000000000000E208                 mov     [r15], rdx
.text:000000000000E20B                 mov     rdi, r14        ; size
.text:000000000000E20E                 call    _malloc
.text:000000000000E213                 test    rax, rax
.text:000000000000E216                 mov     [r15+10h], rax
.text:000000000000E21A                 jz      short loc_E242
.text:000000000000E21C                 mov     rdx, r14        ; n
.text:000000000000E21F                 mov     rsi, r13        ; src
.text:000000000000E222                 mov     rdi, rax        ; dest
.text:000000000000E225                 call    _memcpy
.text:000000000000E22A                 mov     rsi, [rbp+var_A8]
.text:000000000000E231                 lea     rdi, [r15+18h]
.text:000000000000E235                 call    re_node_set_init_copy
.text:000000000000E23A                 test    eax, eax
.text:000000000000E23C                 jz      loc_DF4C
.text:000000000000E242
.text:000000000000E242 loc_E242:                               ; CODE XREF: set_regs+4BA↑j
.text:000000000000E242                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000E246                 call    _free
.text:000000000000E24B                 cmp     [rbp+var_C9], 0
.text:000000000000E252                 jnz     loc_E5EB
.text:000000000000E258
.text:000000000000E258 loc_E258:                               ; CODE XREF: set_regs+796↓j
.text:000000000000E258                                         ; set_regs+885↓j
.text:000000000000E258                 mov     rdi, [rbp+var_88]
.text:000000000000E25F                 call    free_fail_stack_return_part_24
.text:000000000000E264                 mov     eax, 0Ch
.text:000000000000E269                 jmp     loc_E479
.text:000000000000E269 ; ---------------------------------------------------------------------------
.text:000000000000E26E                 align 10h
.text:000000000000E270
.text:000000000000E270 loc_E270:                               ; CODE XREF: set_regs+136↑j
.text:000000000000E270                 cmp     [rbp+var_88], 0
.text:000000000000E278                 jz      loc_E5AC
.text:000000000000E27E                 mov     rcx, [rbp+var_98]
.text:000000000000E285                 test    rcx, rcx
.text:000000000000E288                 jz      short loc_E2AA
.text:000000000000E28A                 mov     rax, r13
.text:000000000000E28D                 xor     edx, edx
.text:000000000000E28F                 nop
.text:000000000000E290
.text:000000000000E290 loc_E290:                               ; CODE XREF: set_regs+548↓j
.text:000000000000E290                 cmp     qword ptr [rax], 0
.text:000000000000E294                 js      short loc_E29D
.text:000000000000E296                 cmp     qword ptr [rax+8], 0FFFFFFFFFFFFFFFFh
.text:000000000000E29B                 jz      short loc_E2F0
.text:000000000000E29D
.text:000000000000E29D loc_E29D:                               ; CODE XREF: set_regs+534↑j
.text:000000000000E29D                 add     rdx, 1
.text:000000000000E2A1                 add     rax, 10h
.text:000000000000E2A5                 cmp     rcx, rdx
.text:000000000000E2A8                 jnz     short loc_E290
.text:000000000000E2AA
.text:000000000000E2AA loc_E2AA:                               ; CODE XREF: set_regs+528↑j
.text:000000000000E2AA                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000E2AE                 call    _free
.text:000000000000E2B3                 cmp     [rbp+var_C9], 0
.text:000000000000E2BA                 jnz     loc_E634
.text:000000000000E2C0
.text:000000000000E2C0 loc_E2C0:                               ; CODE XREF: set_regs+8E0↓j
.text:000000000000E2C0                 mov     rdi, [rbp+var_88]
.text:000000000000E2C7                 call    free_fail_stack_return_part_24
.text:000000000000E2CC                 xor     eax, eax
.text:000000000000E2CE                 jmp     loc_E479
.text:000000000000E2CE ; ---------------------------------------------------------------------------
.text:000000000000E2D3                 align 8
.text:000000000000E2D8
.text:000000000000E2D8 loc_E2D8:                               ; CODE XREF: set_regs+3C3↑j
.text:000000000000E2D8                 test    rcx, rcx
.text:000000000000E2DB                 jz      loc_E390
.text:000000000000E2E1
.text:000000000000E2E1 loc_E2E1:                               ; CODE XREF: set_regs+383↑j
.text:000000000000E2E1                 mov     r15, [rbp+var_78]
.text:000000000000E2E5                 jmp     loc_E185
.text:000000000000E2E5 ; ---------------------------------------------------------------------------
.text:000000000000E2EA                 align 10h
.text:000000000000E2F0
.text:000000000000E2F0 loc_E2F0:                               ; CODE XREF: set_regs+53B↑j
.text:000000000000E2F0                 mov     rdi, [rbp+var_88]
.text:000000000000E2F7                 mov     r9, [rbp+var_A8]
.text:000000000000E2FE                 mov     r8, r13
.text:000000000000E301                 mov     rcx, [rbp+var_98]
.text:000000000000E308                 mov     rdx, [rbp+var_B0]
.text:000000000000E30F                 lea     rsi, [rdi+10h]
.text:000000000000E313                 call    pop_fail_stack_isra_25
.text:000000000000E318                 mov     r9, rax
.text:000000000000E31B                 mov     rbx, rax
.text:000000000000E31E                 mov     r15, rax
.text:000000000000E321                 shl     r9, 4
.text:000000000000E325                 jmp     loc_DE9C
.text:000000000000E32A ; ---------------------------------------------------------------------------
.text:000000000000E32A
.text:000000000000E32A loc_E32A:                               ; CODE XREF: set_regs+1EF↑j
.text:000000000000E32A                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:000000000000E32E                 jz      loc_E4D8
.text:000000000000E334                 nop     dword ptr [rax+00h]
.text:000000000000E338
.text:000000000000E338 loc_E338:                               ; CODE XREF: set_regs+188↑j
.text:000000000000E338                                         ; set_regs+2A8↑j
.text:000000000000E338                 cmp     [rbp+var_88], 0
.text:000000000000E340                 jz      loc_E5FC
.text:000000000000E346
.text:000000000000E346 loc_E346:                               ; CODE XREF: set_regs+1B0↑j
.text:000000000000E346                                         ; set_regs+1C5↑j ...
.text:000000000000E346                 mov     rdi, [rbp+var_88]
.text:000000000000E34D                 mov     rcx, [rbp+var_98]
.text:000000000000E354                 lea     rdx, [rbp+var_78]
.text:000000000000E358                 mov     r9, [rbp+var_A8]
.text:000000000000E35F                 mov     r8, r13
.text:000000000000E362                 lea     rsi, [rdi+10h]
.text:000000000000E366                 call    pop_fail_stack_isra_25
.text:000000000000E36B                 mov     rcx, [rbp+var_78]
.text:000000000000E36F                 mov     rbx, rax
.text:000000000000E372                 jmp     loc_DE6B
.text:000000000000E372 ; ---------------------------------------------------------------------------
.text:000000000000E377                 align 20h
.text:000000000000E380
.text:000000000000E380 loc_E380:                               ; CODE XREF: set_regs+460↑j
.text:000000000000E380                 mov     rbx, r14
.text:000000000000E383                 jmp     loc_DF4C
.text:000000000000E383 ; ---------------------------------------------------------------------------
.text:000000000000E388                 align 10h
.text:000000000000E390
.text:000000000000E390 loc_E390:                               ; CODE XREF: set_regs+3E0↑j
.text:000000000000E390                                         ; set_regs+57B↑j
.text:000000000000E390                 mov     rdi, [rbp+var_A8]
.text:000000000000E397                 mov     rsi, rbx
.text:000000000000E39A                 mov     [rbp+var_A0], r9
.text:000000000000E3A1                 call    re_node_set_insert
.text:000000000000E3A6                 test    al, al
.text:000000000000E3A8                 jz      loc_E4D8
.text:000000000000E3AE                 mov     rdx, [r14+28h]
.text:000000000000E3B2                 lea     rax, [rbx+rbx*2]
.text:000000000000E3B6                 mov     rcx, [rbp+var_78]
.text:000000000000E3BA                 lea     rax, [rdx+rax*8]
.text:000000000000E3BE                 mov     [rbp-0D8h], rcx
.text:000000000000E3C5                 mov     rax, [rax+10h]
.text:000000000000E3C9                 mov     rbx, [rax]
.text:000000000000E3CC                 mov     rax, [r12+0B8h]
.text:000000000000E3D4                 mov     rax, [rax+rcx*8]
.text:000000000000E3D8                 mov     rdx, rbx
.text:000000000000E3DB                 mov     rdi, [rax+10h]
.text:000000000000E3DF                 lea     rsi, [rax+18h]
.text:000000000000E3E3                 call    re_node_set_contains_isra_3
.text:000000000000E3E8                 test    rax, rax
.text:000000000000E3EB                 jnz     loc_DF4C
.text:000000000000E3F1                 mov     r9, [rbp+var_A0]
.text:000000000000E3F8                 mov     rsi, [r14]
.text:000000000000E3FB                 mov     rcx, [rbp-0D8h]
.text:000000000000E402                 add     rsi, r9
.text:000000000000E405                 jmp     loc_DECD
.text:000000000000E405 ; ---------------------------------------------------------------------------
.text:000000000000E40A                 align 10h
.text:000000000000E410
.text:000000000000E410 loc_E410:                               ; CODE XREF: set_regs+330↑j
.text:000000000000E410                 mov     rdx, [rbp+n]    ; n
.text:000000000000E417                 mov     rdi, [rbp+dest] ; dest
.text:000000000000E41E                 mov     rsi, r13        ; src
.text:000000000000E421                 mov     [rax+8], rcx
.text:000000000000E425                 mov     [rbp-0D8h], r9
.text:000000000000E42C                 mov     [rbp+var_A0], rcx
.text:000000000000E433                 call    _memcpy
.text:000000000000E438                 mov     rax, [r13+8]
.text:000000000000E43C                 mov     rcx, [rbp+var_A0]
.text:000000000000E443                 mov     r9, [rbp-0D8h]
.text:000000000000E44A                 jmp     loc_DE89
.text:000000000000E44A ; ---------------------------------------------------------------------------
.text:000000000000E44F                 align 10h
.text:000000000000E450
.text:000000000000E450 loc_E450:                               ; CODE XREF: set_regs+200↑j
.text:000000000000E450                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000E454                 call    _free
.text:000000000000E459                 cmp     [rbp+var_C9], 0
.text:000000000000E460                 jnz     loc_E53C
.text:000000000000E466                 mov     rdi, [rbp+var_88]
.text:000000000000E46D                 test    rdi, rdi
.text:000000000000E470                 jz      short loc_E477
.text:000000000000E472
.text:000000000000E472 loc_E472:                               ; CODE XREF: set_regs+7F2↓j
.text:000000000000E472                 call    free_fail_stack_return_part_24
.text:000000000000E477
.text:000000000000E477 loc_E477:                               ; CODE XREF: set_regs+710↑j
.text:000000000000E477                                         ; set_regs+7F8↓j ...
.text:000000000000E477                 xor     eax, eax
.text:000000000000E479
.text:000000000000E479 loc_E479:                               ; CODE XREF: set_regs+509↑j
.text:000000000000E479                                         ; set_regs+56E↑j ...
.text:000000000000E479                 mov     rbx, [rbp+var_38]
.text:000000000000E47D                 xor     rbx, fs:28h
.text:000000000000E486                 jnz     loc_E645
.text:000000000000E48C                 lea     rsp, [rbp-28h]
.text:000000000000E490                 pop     rbx
.text:000000000000E491                 pop     r12
.text:000000000000E493                 pop     r13
.text:000000000000E495                 pop     r14
.text:000000000000E497                 pop     r15
.text:000000000000E499                 pop     rbp
.text:000000000000E49A                 retn
.text:000000000000E49B ; ---------------------------------------------------------------------------
.text:000000000000E49B
.text:000000000000E49B loc_E49B:                               ; CODE XREF: set_regs+348↑j
.text:000000000000E49B                 mov     rdx, [rbp+n]    ; n
.text:000000000000E4A2                 mov     rsi, rdi        ; src
.text:000000000000E4A5                 mov     rdi, r13        ; dest
.text:000000000000E4A8                 mov     [rbp-0D8h], rcx
.text:000000000000E4AF                 mov     [rbp+var_A0], r9
.text:000000000000E4B6                 call    _memcpy
.text:000000000000E4BB                 mov     rax, [r13+8]
.text:000000000000E4BF                 mov     r9, [rbp+var_A0]
.text:000000000000E4C6                 mov     rcx, [rbp-0D8h]
.text:000000000000E4CD                 jmp     loc_DE89
.text:000000000000E4CD ; ---------------------------------------------------------------------------
.text:000000000000E4D2                 align 8
.text:000000000000E4D8
.text:000000000000E4D8 loc_E4D8:                               ; CODE XREF: set_regs+29B↑j
.text:000000000000E4D8                                         ; set_regs+5CE↑j ...
.text:000000000000E4D8                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000E4DC                 call    _free
.text:000000000000E4E1                 cmp     [rbp+var_C9], 0
.text:000000000000E4E8                 jnz     loc_E5EB
.text:000000000000E4EE
.text:000000000000E4EE loc_E4EE:                               ; CODE XREF: set_regs+897↓j
.text:000000000000E4EE                 cmp     [rbp+var_88], 0
.text:000000000000E4F6                 jnz     loc_E258
.text:000000000000E4FC
.text:000000000000E4FC loc_E4FC:                               ; CODE XREF: set_regs+77↑j
.text:000000000000E4FC                                         ; set_regs+7D3↓j ...
.text:000000000000E4FC                 mov     eax, 0Ch
.text:000000000000E501                 jmp     loc_E479
.text:000000000000E506 ; ---------------------------------------------------------------------------
.text:000000000000E506
.text:000000000000E506 loc_E506:                               ; CODE XREF: set_regs+B3↑j
.text:000000000000E506                 mov     rdi, [rbp+n]    ; size
.text:000000000000E50D                 call    _malloc
.text:000000000000E512                 test    rax, rax
.text:000000000000E515                 mov     [rbp+dest], rax
.text:000000000000E51C                 mov     [rbp+var_C9], 1
.text:000000000000E523                 jnz     loc_DE37
.text:000000000000E529                 mov     rdi, [rbp+var_88]
.text:000000000000E530                 test    rdi, rdi
.text:000000000000E533                 jz      short loc_E4FC
.text:000000000000E535                 call    free_fail_stack_return_part_24
.text:000000000000E53A                 jmp     short loc_E4FC
.text:000000000000E53C ; ---------------------------------------------------------------------------
.text:000000000000E53C
.text:000000000000E53C loc_E53C:                               ; CODE XREF: set_regs+700↑j
.text:000000000000E53C                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000E543                 call    _free
.text:000000000000E548                 mov     rdi, [rbp+var_88]
.text:000000000000E54F                 test    rdi, rdi
.text:000000000000E552                 jnz     loc_E472
.text:000000000000E558                 jmp     loc_E477
.text:000000000000E55D ; ---------------------------------------------------------------------------
.text:000000000000E55D
.text:000000000000E55D loc_E55D:                               ; CODE XREF: set_regs+55↑j
.text:000000000000E55D                 mov     [rbp+var_88], 0
.text:000000000000E568                 jmp     loc_DDDD
.text:000000000000E56D ; ---------------------------------------------------------------------------
.text:000000000000E56D
.text:000000000000E56D loc_E56D:                               ; CODE XREF: set_regs+488↑j
.text:000000000000E56D                 lea     rsi, [rax+rax*2]
.text:000000000000E571                 mov     rax, [rbp+var_88]
.text:000000000000E578                 mov     [rbp+var_A0], rdx
.text:000000000000E57F                 shl     rsi, 5          ; size
.text:000000000000E583                 mov     rdi, [rax+10h]  ; ptr
.text:000000000000E587                 call    _realloc
.text:000000000000E58C                 test    rax, rax
.text:000000000000E58F                 jz      short loc_E5D5
.text:000000000000E591                 mov     rcx, [rbp+var_88]
.text:000000000000E598                 mov     rdx, [rbp+var_A0]
.text:000000000000E59F                 shl     qword ptr [rcx+8], 1
.text:000000000000E5A3                 mov     [rcx+10h], rax
.text:000000000000E5A7                 jmp     loc_E1F2
.text:000000000000E5AC ; ---------------------------------------------------------------------------
.text:000000000000E5AC
.text:000000000000E5AC loc_E5AC:                               ; CODE XREF: set_regs+518↑j
.text:000000000000E5AC                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000E5B0                 call    _free
.text:000000000000E5B5                 cmp     [rbp+var_C9], 0
.text:000000000000E5BC                 jz      loc_E477
.text:000000000000E5C2                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000E5C9                 call    _free
.text:000000000000E5CE                 xor     eax, eax
.text:000000000000E5D0                 jmp     loc_E479
.text:000000000000E5D5 ; ---------------------------------------------------------------------------
.text:000000000000E5D5
.text:000000000000E5D5 loc_E5D5:                               ; CODE XREF: set_regs+82F↑j
.text:000000000000E5D5                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000E5D9                 call    _free
.text:000000000000E5DE                 cmp     [rbp+var_C9], 0
.text:000000000000E5E5                 jz      loc_E258
.text:000000000000E5EB
.text:000000000000E5EB loc_E5EB:                               ; CODE XREF: set_regs+4F2↑j
.text:000000000000E5EB                                         ; set_regs+788↑j
.text:000000000000E5EB                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000E5F2                 call    _free
.text:000000000000E5F7                 jmp     loc_E4EE
.text:000000000000E5FC ; ---------------------------------------------------------------------------
.text:000000000000E5FC
.text:000000000000E5FC loc_E5FC:                               ; CODE XREF: set_regs+5E0↑j
.text:000000000000E5FC                 mov     rdi, [rbp+ptr]  ; ptr
.text:000000000000E600                 call    _free
.text:000000000000E605                 cmp     [rbp+var_C9], 0
.text:000000000000E60C                 mov     eax, 1
.text:000000000000E611                 jz      loc_E479
.text:000000000000E617                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000E61E                 mov     dword ptr [rbp+var_88], eax
.text:000000000000E624                 call    _free
.text:000000000000E629                 mov     eax, dword ptr [rbp+var_88]
.text:000000000000E62F                 jmp     loc_E479
.text:000000000000E634 ; ---------------------------------------------------------------------------
.text:000000000000E634
.text:000000000000E634 loc_E634:                               ; CODE XREF: set_regs+55A↑j
.text:000000000000E634                 mov     rdi, [rbp+dest] ; ptr
.text:000000000000E63B                 call    _free
.text:000000000000E640                 jmp     loc_E2C0
.text:000000000000E645 ; ---------------------------------------------------------------------------
.text:000000000000E645
.text:000000000000E645 loc_E645:                               ; CODE XREF: set_regs+726↑j
.text:000000000000E645                 call    ___stack_chk_fail
.text:000000000000E645 ; } // starts at DD60
.text:000000000000E645 set_regs        endp
.text:000000000000E645
.text:000000000000E645 ; ---------------------------------------------------------------------------
.text:000000000000E64A                 align 10h
.text:000000000000E650
.text:000000000000E650 ; =============== S U B R O U T I N E =======================================
.text:000000000000E650
.text:000000000000E650
.text:000000000000E650 get_subexp_sub_isra_32 proc near        ; CODE XREF: transit_state_bkref_isra_34+2C6↓p
.text:000000000000E650                                         ; transit_state_bkref_isra_34+6FD↓p
.text:000000000000E650
.text:000000000000E650 var_40          = qword ptr -40h
.text:000000000000E650
.text:000000000000E650 ; __unwind {
.text:000000000000E650                 push    r15
.text:000000000000E652                 push    r14
.text:000000000000E654                 mov     r14, rcx
.text:000000000000E657                 push    r13
.text:000000000000E659                 push    r12
.text:000000000000E65B                 mov     r13, rsi
.text:000000000000E65E                 push    rbp
.text:000000000000E65F                 push    rbx
.text:000000000000E660                 lea     rsi, [rdx+10h]
.text:000000000000E664                 mov     rbp, rdx
.text:000000000000E667                 mov     r9, r8
.text:000000000000E66A                 mov     r12, r8
.text:000000000000E66D                 sub     rsp, 20h
.text:000000000000E671                 mov     rcx, [rdx+8]
.text:000000000000E675                 mov     r8, r14
.text:000000000000E678                 push    8
.text:000000000000E67A                 mov     rdx, [rdx]
.text:000000000000E67D                 mov     rbx, rdi
.text:000000000000E680                 call    check_arrival
.text:000000000000E685                 test    eax, eax
.text:000000000000E687                 pop     rdx
.text:000000000000E688                 pop     rcx
.text:000000000000E689                 jz      short loc_E6A0
.text:000000000000E68B
.text:000000000000E68B loc_E68B:                               ; CODE XREF: get_subexp_sub_isra_32+191↓j
.text:000000000000E68B                 add     rsp, 18h
.text:000000000000E68F                 pop     rbx
.text:000000000000E690                 pop     rbp
.text:000000000000E691                 pop     r12
.text:000000000000E693                 pop     r13
.text:000000000000E695                 pop     r14
.text:000000000000E697                 pop     r15
.text:000000000000E699                 retn
.text:000000000000E699 ; ---------------------------------------------------------------------------
.text:000000000000E69A                 align 20h
.text:000000000000E6A0
.text:000000000000E6A0 loc_E6A0:                               ; CODE XREF: get_subexp_sub_isra_32+39↑j
.text:000000000000E6A0                 mov     rax, [rbx+0C8h]
.text:000000000000E6A7                 mov     rdx, [rbx+0D0h]
.text:000000000000E6AE                 mov     r15, [rbp+8]
.text:000000000000E6B2                 mov     rcx, [r13+0]
.text:000000000000E6B6                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000E6BD                 cmp     rax, rdx
.text:000000000000E6C0                 mov     rsi, r15
.text:000000000000E6C3                 jge     loc_E760
.text:000000000000E6C9
.text:000000000000E6C9 loc_E6C9:                               ; CODE XREF: get_subexp_sub_isra_32+17B↓j
.text:000000000000E6C9                 lea     rdx, [rax+rax*4]
.text:000000000000E6CD                 shl     rdx, 3
.text:000000000000E6D1                 test    rax, rax
.text:000000000000E6D4                 jle     short loc_E6E1
.text:000000000000E6D6                 lea     r8, [rdi+rdx-28h]
.text:000000000000E6DB                 cmp     r12, [r8+8]
.text:000000000000E6DF                 jz      short loc_E750
.text:000000000000E6E1
.text:000000000000E6E1 loc_E6E1:                               ; CODE XREF: get_subexp_sub_isra_32+84↑j
.text:000000000000E6E1                                         ; get_subexp_sub_isra_32+105↓j
.text:000000000000E6E1                 add     rdi, rdx
.text:000000000000E6E4                 xor     edx, edx
.text:000000000000E6E6                 cmp     r15, rcx
.text:000000000000E6E9                 setz    dl
.text:000000000000E6EC                 add     rax, 1
.text:000000000000E6F0                 mov     [rdi], r14
.text:000000000000E6F3                 neg     edx
.text:000000000000E6F5                 mov     [rdi+8], r12
.text:000000000000E6F9                 mov     [rdi+10h], rcx
.text:000000000000E6FD                 mov     [rdi+22h], dx
.text:000000000000E701                 mov     [rdi+18h], r15
.text:000000000000E705                 mov     [rbx+0C8h], rax
.text:000000000000E70C                 mov     byte ptr [rdi+20h], 0
.text:000000000000E710                 mov     rax, r15
.text:000000000000E713                 movsxd  rdx, dword ptr [rbx+0E0h]
.text:000000000000E71A                 sub     rax, rcx
.text:000000000000E71D                 cmp     rdx, rax
.text:000000000000E720                 jge     short loc_E72C
.text:000000000000E722                 sub     r15d, ecx
.text:000000000000E725                 mov     [rbx+0E0h], r15d
.text:000000000000E72C
.text:000000000000E72C loc_E72C:                               ; CODE XREF: get_subexp_sub_isra_32+D0↑j
.text:000000000000E72C                 add     rsi, r12
.text:000000000000E72F                 sub     rsi, [r13+0]
.text:000000000000E733                 add     rsp, 18h
.text:000000000000E737                 mov     rdi, rbx
.text:000000000000E73A                 pop     rbx
.text:000000000000E73B                 pop     rbp
.text:000000000000E73C                 pop     r12
.text:000000000000E73E                 pop     r13
.text:000000000000E740                 pop     r14
.text:000000000000E742                 pop     r15
.text:000000000000E744                 jmp     clean_state_log_if_needed
.text:000000000000E744 ; ---------------------------------------------------------------------------
.text:000000000000E749                 align 10h
.text:000000000000E750
.text:000000000000E750 loc_E750:                               ; CODE XREF: get_subexp_sub_isra_32+8F↑j
.text:000000000000E750                 mov     byte ptr [r8+20h], 1
.text:000000000000E755                 jmp     short loc_E6E1
.text:000000000000E755 ; ---------------------------------------------------------------------------
.text:000000000000E757                 align 20h
.text:000000000000E760
.text:000000000000E760 loc_E760:                               ; CODE XREF: get_subexp_sub_isra_32+73↑j
.text:000000000000E760                 lea     rsi, [rdx+rdx*4]
.text:000000000000E764                 mov     [rsp+48h+var_40], rcx
.text:000000000000E769                 shl     rsi, 4          ; size
.text:000000000000E76D                 call    _realloc
.text:000000000000E772                 test    rax, rax
.text:000000000000E775                 mov     rcx, [rsp+48h+var_40]
.text:000000000000E77A                 jz      short loc_E7D0
.text:000000000000E77C                 mov     rsi, [rbx+0C8h]
.text:000000000000E783                 mov     rdx, [rbx+0D0h]
.text:000000000000E78A                 mov     [rbx+0D8h], rax
.text:000000000000E791                 mov     [rsp+48h+var_40], rcx
.text:000000000000E796                 lea     rsi, [rsi+rsi*4]
.text:000000000000E79A                 lea     rdx, [rdx+rdx*4]
.text:000000000000E79E                 lea     rdi, [rax+rsi*8] ; s
.text:000000000000E7A2                 shl     rdx, 3          ; n
.text:000000000000E7A6                 xor     esi, esi        ; c
.text:000000000000E7A8                 call    _memset
.text:000000000000E7AD                 shl     qword ptr [rbx+0D0h], 1
.text:000000000000E7B4                 mov     rax, [rbx+0C8h]
.text:000000000000E7BB                 mov     rdi, [rbx+0D8h]
.text:000000000000E7C2                 mov     rsi, [rbp+8]
.text:000000000000E7C6                 mov     rcx, [rsp+48h+var_40]
.text:000000000000E7CB                 jmp     loc_E6C9
.text:000000000000E7D0 ; ---------------------------------------------------------------------------
.text:000000000000E7D0
.text:000000000000E7D0 loc_E7D0:                               ; CODE XREF: get_subexp_sub_isra_32+12A↑j
.text:000000000000E7D0                 mov     rdi, [rbx+0D8h] ; ptr
.text:000000000000E7D7                 call    _free
.text:000000000000E7DC                 mov     eax, 0Ch
.text:000000000000E7E1                 jmp     loc_E68B
.text:000000000000E7E1 ; } // starts at E650
.text:000000000000E7E1 get_subexp_sub_isra_32 endp
.text:000000000000E7E1
.text:000000000000E7E1 ; ---------------------------------------------------------------------------
.text:000000000000E7E6                 align 10h
.text:000000000000E7F0
.text:000000000000E7F0 ; =============== S U B R O U T I N E =======================================
.text:000000000000E7F0
.text:000000000000E7F0
.text:000000000000E7F0 transit_state_bkref_isra_34 proc near   ; CODE XREF: transit_state_bkref_isra_34+82A↓p
.text:000000000000E7F0                                         ; merge_state_with_log+1C1↓p ...
.text:000000000000E7F0
.text:000000000000E7F0 var_E8          = qword ptr -0E8h
.text:000000000000E7F0 var_E0          = qword ptr -0E0h
.text:000000000000E7F0 var_D8          = qword ptr -0D8h
.text:000000000000E7F0 var_D0          = qword ptr -0D0h
.text:000000000000E7F0 var_C8          = qword ptr -0C8h
.text:000000000000E7F0 var_C0          = qword ptr -0C0h
.text:000000000000E7F0 var_B8          = qword ptr -0B8h
.text:000000000000E7F0 var_B0          = qword ptr -0B0h
.text:000000000000E7F0 var_A8          = qword ptr -0A8h
.text:000000000000E7F0 var_A0          = qword ptr -0A0h
.text:000000000000E7F0 var_98          = qword ptr -98h
.text:000000000000E7F0 var_90          = qword ptr -90h
.text:000000000000E7F0 var_88          = qword ptr -88h
.text:000000000000E7F0 var_80          = qword ptr -80h
.text:000000000000E7F0 var_78          = qword ptr -78h
.text:000000000000E7F0 var_70          = qword ptr -70h
.text:000000000000E7F0 var_5C          = byte ptr -5Ch
.text:000000000000E7F0 var_58          = byte ptr -58h
.text:000000000000E7F0 ptr             = qword ptr -48h
.text:000000000000E7F0 var_40          = qword ptr -40h
.text:000000000000E7F0
.text:000000000000E7F0 ; __unwind {
.text:000000000000E7F0                 push    r15
.text:000000000000E7F2                 push    r14
.text:000000000000E7F4                 push    r13
.text:000000000000E7F6                 push    r12
.text:000000000000E7F8                 push    rbp
.text:000000000000E7F9                 push    rbx
.text:000000000000E7FA                 sub     rsp, 0B8h
.text:000000000000E801                 mov     r15, [rdi+48h]
.text:000000000000E805                 mov     rax, fs:28h
.text:000000000000E80E                 mov     [rsp+0E8h+var_40], rax
.text:000000000000E816                 xor     eax, eax
.text:000000000000E818                 cmp     qword ptr [rsi], 0
.text:000000000000E81C                 mov     rax, [rdi+98h]
.text:000000000000E823                 mov     [rsp+0E8h+var_A0], rsi
.text:000000000000E828                 mov     [rsp+0E8h+var_A8], rdx
.text:000000000000E82D                 mov     [rsp+0E8h+var_B0], rax
.text:000000000000E832                 jle     loc_EB60
.text:000000000000E838                 lea     rax, ds:0[r15*8]
.text:000000000000E840                 mov     r14, rdi
.text:000000000000E843                 mov     [rsp+0E8h+var_E8], 0
.text:000000000000E84B                 mov     [rsp+0E8h+var_E0], r15
.text:000000000000E850                 mov     [rsp+0E8h+var_88], rax
.text:000000000000E855                 lea     rax, [rsp+0E8h+var_58]
.text:000000000000E85D                 mov     [rsp+0E8h+var_80], rax
.text:000000000000E862                 lea     rax, [rsp+0E8h+var_5C]
.text:000000000000E86A                 mov     [rsp+0E8h+var_70], rax
.text:000000000000E86F                 jmp     short loc_E8B7
.text:000000000000E86F ; ---------------------------------------------------------------------------
.text:000000000000E871                 align 8
.text:000000000000E878
.text:000000000000E878 loc_E878:                               ; CODE XREF: transit_state_bkref_isra_34+11D↓j
.text:000000000000E878                 test    al, 1
.text:000000000000E87A                 jz      short loc_E8A0
.text:000000000000E87C                 and     edx, 8
.text:000000000000E87F                 jnz     short loc_E8A0
.text:000000000000E881
.text:000000000000E881 loc_E881:                               ; CODE XREF: transit_state_bkref_isra_34+126↓j
.text:000000000000E881                                         ; transit_state_bkref_isra_34+12E↓j
.text:000000000000E881                 test    cl, 20h
.text:000000000000E884                 jz      short loc_E88A
.text:000000000000E886                 test    al, 2
.text:000000000000E888                 jz      short loc_E8A0
.text:000000000000E88A
.text:000000000000E88A loc_E88A:                               ; CODE XREF: transit_state_bkref_isra_34+94↑j
.text:000000000000E88A                 and     ecx, 80h
.text:000000000000E890                 jz      loc_E930
.text:000000000000E896                 test    al, 8
.text:000000000000E898                 jnz     loc_E930
.text:000000000000E89E                 xchg    ax, ax
.text:000000000000E8A0
.text:000000000000E8A0 loc_E8A0:                               ; CODE XREF: transit_state_bkref_isra_34+8A↑j
.text:000000000000E8A0                                         ; transit_state_bkref_isra_34+8F↑j ...
.text:000000000000E8A0                 mov     rdi, [rsp+0E8h+var_A0]
.text:000000000000E8A5                 add     [rsp+0E8h+var_E8], 1
.text:000000000000E8AA                 mov     rax, [rsp+0E8h+var_E8]
.text:000000000000E8AE                 cmp     rax, [rdi]
.text:000000000000E8B1                 jge     loc_EB60
.text:000000000000E8B7
.text:000000000000E8B7 loc_E8B7:                               ; CODE XREF: transit_state_bkref_isra_34+7F↑j
.text:000000000000E8B7                 mov     rax, [rsp+0E8h+var_A8]
.text:000000000000E8BC                 mov     rdi, [rsp+0E8h+var_E8]
.text:000000000000E8C0                 mov     rax, [rax]
.text:000000000000E8C3                 mov     r13, [rax+rdi*8]
.text:000000000000E8C7                 mov     rdi, [rsp+0E8h+var_B0]
.text:000000000000E8CC                 mov     rax, [rdi]
.text:000000000000E8CF                 mov     rbx, r13
.text:000000000000E8D2                 shl     rbx, 4
.text:000000000000E8D6                 add     rax, rbx
.text:000000000000E8D9                 cmp     byte ptr [rax+8], 4
.text:000000000000E8DD                 jnz     short loc_E8A0
.text:000000000000E8DF                 mov     ebp, [rax+8]
.text:000000000000E8E2                 test    ebp, 3FF00h
.text:000000000000E8E8                 jz      short loc_E930
.text:000000000000E8EA                 mov     edx, [r14+0A0h]
.text:000000000000E8F1                 mov     rsi, [rsp+0E8h+var_E0]
.text:000000000000E8F6                 mov     rdi, r14
.text:000000000000E8F9                 call    re_string_context_at
.text:000000000000E8FE                 mov     edx, ebp
.text:000000000000E900                 shr     edx, 8
.text:000000000000E903                 mov     ecx, edx
.text:000000000000E905                 and     cx, 3FFh
.text:000000000000E90A                 test    dl, 4
.text:000000000000E90D                 jnz     loc_E878
.text:000000000000E913                 and     edx, 8
.text:000000000000E916                 jz      loc_E881
.text:000000000000E91C                 test    al, 1
.text:000000000000E91E                 jz      loc_E881
.text:000000000000E924                 jmp     loc_E8A0
.text:000000000000E924 ; ---------------------------------------------------------------------------
.text:000000000000E929                 align 10h
.text:000000000000E930
.text:000000000000E930 loc_E930:                               ; CODE XREF: transit_state_bkref_isra_34+A0↑j
.text:000000000000E930                                         ; transit_state_bkref_isra_34+A8↑j ...
.text:000000000000E930                 mov     rdi, [r14+0C8h]
.text:000000000000E937                 mov     rax, [r14+98h]
.text:000000000000E93E                 xor     ecx, ecx
.text:000000000000E940                 mov     r10, [r14+8]
.text:000000000000E944                 mov     r9, [rsp+0E8h+var_E0]
.text:000000000000E949                 mov     [rsp+0E8h+var_78], rdi
.text:000000000000E94E                 mov     [rsp+0E8h+var_98], rax
.text:000000000000E953
.text:000000000000E953 loc_E953:                               ; CODE XREF: transit_state_bkref_isra_34+367↓j
.text:000000000000E953                 cmp     rcx, rdi
.text:000000000000E956                 jge     short loc_E9AB
.text:000000000000E958                 lea     rax, [rcx+rdi]
.text:000000000000E95C                 mov     r11, [r14+0D8h]
.text:000000000000E963                 mov     rsi, rax
.text:000000000000E966                 shr     rsi, 3Fh
.text:000000000000E96A                 add     rsi, rax
.text:000000000000E96D                 sar     rsi, 1
.text:000000000000E970                 lea     rax, [rsi+rsi*4]
.text:000000000000E974                 cmp     r9, [r11+rax*8+8]
.text:000000000000E979                 jle     short loc_E9A6
.text:000000000000E97B                 jmp     loc_EB48
.text:000000000000E980 ; ---------------------------------------------------------------------------
.text:000000000000E980
.text:000000000000E980 loc_E980:                               ; CODE XREF: transit_state_bkref_isra_34+1B9↓j
.text:000000000000E980                 lea     rdx, [rsi+rcx]
.text:000000000000E984                 mov     rax, rdx
.text:000000000000E987                 shr     rax, 3Fh
.text:000000000000E98B                 add     rax, rdx
.text:000000000000E98E                 sar     rax, 1
.text:000000000000E991                 lea     rdx, [rax+rax*4]
.text:000000000000E995                 mov     r8, rax
.text:000000000000E998                 cmp     r9, [r11+rdx*8+8]
.text:000000000000E99D                 jg      loc_EB50
.text:000000000000E9A3                 mov     rsi, rax
.text:000000000000E9A6
.text:000000000000E9A6 loc_E9A6:                               ; CODE XREF: transit_state_bkref_isra_34+189↑j
.text:000000000000E9A6                 cmp     rsi, rcx
.text:000000000000E9A9                 jg      short loc_E980
.text:000000000000E9AB
.text:000000000000E9AB loc_E9AB:                               ; CODE XREF: transit_state_bkref_isra_34+166↑j
.text:000000000000E9AB                 cmp     [rsp+0E8h+var_78], rcx
.text:000000000000E9B0                 jle     short loc_E9D6
.text:000000000000E9B2                 mov     rdx, [r14+0D8h]
.text:000000000000E9B9                 lea     rax, [rcx+rcx*4]
.text:000000000000E9BD                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000E9C2                 lea     rax, [rdx+rax*8]
.text:000000000000E9C6                 cmp     [rax+8], rdi
.text:000000000000E9CA                 jnz     short loc_E9D6
.text:000000000000E9CC                 cmp     rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000000E9D0                 jnz     loc_EBA6
.text:000000000000E9D6
.text:000000000000E9D6 loc_E9D6:                               ; CODE XREF: transit_state_bkref_isra_34+1C0↑j
.text:000000000000E9D6                                         ; transit_state_bkref_isra_34+1DA↑j ...
.text:000000000000E9D6                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000E9DB                 cmp     qword ptr [r14+0E8h], 0
.text:000000000000E9E3                 mov     rdx, [rax]
.text:000000000000E9E6                 mov     rax, [rdx+rbx]
.text:000000000000E9EA                 mov     [rsp+0E8h+var_90], rax
.text:000000000000E9EF                 jle     loc_EBAB
.text:000000000000E9F5                 mov     [rsp+0E8h+var_B8], r13
.text:000000000000E9FA                 mov     [rsp+0E8h+var_C0], 0
.text:000000000000EA03                 mov     r13, r10
.text:000000000000EA06
.text:000000000000EA06 loc_EA06:                               ; CODE XREF: transit_state_bkref_isra_34+259↓j
.text:000000000000EA06                 mov     rax, [r14+0F8h]
.text:000000000000EA0D                 mov     rbx, [rsp+0E8h+var_C0]
.text:000000000000EA12                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000EA17                 mov     rbx, [rax+rbx*8]
.text:000000000000EA1B                 mov     rax, [rbx+8]
.text:000000000000EA1F                 shl     rax, 4
.text:000000000000EA23                 cmp     rdi, [rdx+rax]
.text:000000000000EA27                 jz      short loc_EA50
.text:000000000000EA29
.text:000000000000EA29 loc_EA29:                               ; CODE XREF: transit_state_bkref_isra_34+5A7↓j
.text:000000000000EA29                                         ; transit_state_bkref_isra_34+725↓j ...
.text:000000000000EA29                 add     [rsp+0E8h+var_C0], 1
.text:000000000000EA2F                 mov     rax, [rsp+0E8h+var_C0]
.text:000000000000EA34                 cmp     rax, [r14+0E8h]
.text:000000000000EA3B                 jge     loc_F0B1
.text:000000000000EA41                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000EA46                 mov     rdx, [rax]
.text:000000000000EA49                 jmp     short loc_EA06
.text:000000000000EA49 ; ---------------------------------------------------------------------------
.text:000000000000EA4B                 align 10h
.text:000000000000EA50
.text:000000000000EA50 loc_EA50:                               ; CODE XREF: transit_state_bkref_isra_34+237↑j
.text:000000000000EA50                 cmp     qword ptr [rbx+20h], 0
.text:000000000000EA55                 mov     r11, [rbx]
.text:000000000000EA58                 jle     loc_F0C2
.text:000000000000EA5E                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000EA63                 mov     r8, r13
.text:000000000000EA66                 xor     ebp, ebp
.text:000000000000EA68                 mov     r13, rbx
.text:000000000000EA6B                 mov     rbx, rcx
.text:000000000000EA6E                 jmp     short loc_EADC
.text:000000000000EA70 ; ---------------------------------------------------------------------------
.text:000000000000EA70
.text:000000000000EA70 loc_EA70:                               ; CODE XREF: transit_state_bkref_isra_34+30B↓j
.text:000000000000EA70                                         ; transit_state_bkref_isra_34+34C↓j
.text:000000000000EA70                 lea     rsi, [r8+r11]   ; s2
.text:000000000000EA74                 lea     rdi, [r8+rbx]   ; s1
.text:000000000000EA78                 mov     [rsp+0E8h+var_C8], r9
.text:000000000000EA7D                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000EA82                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000EA87                 call    _memcmp
.text:000000000000EA8C                 test    eax, eax
.text:000000000000EA8E                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000EA93                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000EA98                 mov     r9, [rsp+0E8h+var_C8]
.text:000000000000EA9D                 jnz     loc_EF68
.text:000000000000EAA3
.text:000000000000EAA3 loc_EAA3:                               ; CODE XREF: transit_state_bkref_isra_34+305↓j
.text:000000000000EAA3                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000EAA8                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000EAAD                 mov     rdx, r9
.text:000000000000EAB0                 mov     rsi, r13
.text:000000000000EAB3                 mov     rdi, r14
.text:000000000000EAB6                 call    get_subexp_sub_isra_32
.text:000000000000EABB                 cmp     eax, 1
.text:000000000000EABE                 mov     r8, [r14+8]
.text:000000000000EAC2                 ja      loc_EB68
.text:000000000000EAC8                 add     rbp, 1
.text:000000000000EACC                 cmp     rbp, [r13+20h]
.text:000000000000EAD0                 mov     r11, r15
.text:000000000000EAD3                 mov     rbx, r12
.text:000000000000EAD6                 jge     loc_ED88
.text:000000000000EADC
.text:000000000000EADC loc_EADC:                               ; CODE XREF: transit_state_bkref_isra_34+27E↑j
.text:000000000000EADC                 mov     rax, [r13+28h]
.text:000000000000EAE0                 mov     r9, [rax+rbp*8]
.text:000000000000EAE4                 mov     r15, [r9+8]
.text:000000000000EAE8                 mov     rdx, r15
.text:000000000000EAEB                 sub     rdx, r11        ; n
.text:000000000000EAEE                 test    rdx, rdx
.text:000000000000EAF1                 lea     r12, [rdx+rbx]
.text:000000000000EAF5                 jle     short loc_EAA3
.text:000000000000EAF7                 cmp     [r14+30h], r12
.text:000000000000EAFB                 jge     loc_EA70
.text:000000000000EB01                 cmp     [r14+58h], r12
.text:000000000000EB05                 mov     [rsp+0E8h+var_D0], rdx
.text:000000000000EB0A                 mov     [rsp+0E8h+var_D8], r9
.text:000000000000EB0F                 jl      loc_EF68
.text:000000000000EB15                 mov     rsi, r12
.text:000000000000EB18                 mov     rdi, r14
.text:000000000000EB1B                 mov     [rsp+0E8h+var_C8], r11
.text:000000000000EB20                 call    clean_state_log_if_needed
.text:000000000000EB25                 test    eax, eax
.text:000000000000EB27                 jnz     short loc_EB68
.text:000000000000EB29                 mov     r8, [r14+8]
.text:000000000000EB2D                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000EB32                 mov     r9, [rsp+0E8h+var_D8]
.text:000000000000EB37                 mov     r11, [rsp+0E8h+var_C8]
.text:000000000000EB3C                 jmp     loc_EA70
.text:000000000000EB3C ; ---------------------------------------------------------------------------
.text:000000000000EB41                 align 8
.text:000000000000EB48
.text:000000000000EB48 loc_EB48:                               ; CODE XREF: transit_state_bkref_isra_34+18B↑j
.text:000000000000EB48                 mov     r8, rsi
.text:000000000000EB4B                 mov     rsi, rdi
.text:000000000000EB4E                 xchg    ax, ax
.text:000000000000EB50
.text:000000000000EB50 loc_EB50:                               ; CODE XREF: transit_state_bkref_isra_34+1AD↑j
.text:000000000000EB50                 lea     rcx, [r8+1]
.text:000000000000EB54                 mov     rdi, rsi
.text:000000000000EB57                 jmp     loc_E953
.text:000000000000EB57 ; ---------------------------------------------------------------------------
.text:000000000000EB5C                 align 20h
.text:000000000000EB60
.text:000000000000EB60 loc_EB60:                               ; CODE XREF: transit_state_bkref_isra_34+42↑j
.text:000000000000EB60                                         ; transit_state_bkref_isra_34+C1↑j
.text:000000000000EB60                 xor     eax, eax
.text:000000000000EB62                 nop     word ptr [rax+rax+00h]
.text:000000000000EB68
.text:000000000000EB68 loc_EB68:                               ; CODE XREF: transit_state_bkref_isra_34+2D2↑j
.text:000000000000EB68                                         ; transit_state_bkref_isra_34+337↑j ...
.text:000000000000EB68                 mov     rbx, [rsp+0E8h+var_40]
.text:000000000000EB70                 xor     rbx, fs:28h
.text:000000000000EB79                 jnz     loc_F0CC
.text:000000000000EB7F                 add     rsp, 0B8h
.text:000000000000EB86                 pop     rbx
.text:000000000000EB87                 pop     rbp
.text:000000000000EB88                 pop     r12
.text:000000000000EB8A                 pop     r13
.text:000000000000EB8C                 pop     r14
.text:000000000000EB8E                 pop     r15
.text:000000000000EB90                 retn
.text:000000000000EB90 ; ---------------------------------------------------------------------------
.text:000000000000EB91                 align 8
.text:000000000000EB98
.text:000000000000EB98 loc_EB98:                               ; CODE XREF: transit_state_bkref_isra_34+3B9↓j
.text:000000000000EB98                 add     rax, 28h ; '('
.text:000000000000EB9C                 cmp     byte ptr [rax-8], 0
.text:000000000000EBA0                 jz      loc_E9D6
.text:000000000000EBA6
.text:000000000000EBA6 loc_EBA6:                               ; CODE XREF: transit_state_bkref_isra_34+1E0↑j
.text:000000000000EBA6                 cmp     r13, [rax]
.text:000000000000EBA9                 jnz     short loc_EB98
.text:000000000000EBAB
.text:000000000000EBAB loc_EBAB:                               ; CODE XREF: transit_state_bkref_isra_34+1FF↑j
.text:000000000000EBAB                 mov     rax, [rsp+0E8h+var_78]
.text:000000000000EBB0
.text:000000000000EBB0 loc_EBB0:                               ; CODE XREF: transit_state_bkref_isra_34+8CD↓j
.text:000000000000EBB0                 cmp     [rsp+0E8h+var_78], rax
.text:000000000000EBB5                 mov     dword ptr [rsp+0E8h+var_5C], 0
.text:000000000000EBC0                 jge     loc_E8A0
.text:000000000000EBC6                 lea     rax, ds:0[r13*8]
.text:000000000000EBCE                 mov     r12, [rsp+0E8h+var_78]
.text:000000000000EBD3                 mov     rbp, [rsp+0E8h+var_B0]
.text:000000000000EBD8                 mov     [rsp+0E8h+var_98], rax
.text:000000000000EBDD                 lea     rax, [r13+r13*2+0]
.text:000000000000EBE2                 lea     r8, [r12+r12*4]
.text:000000000000EBE6                 shl     rax, 3
.text:000000000000EBEA                 mov     [rsp+0E8h+var_90], rax
.text:000000000000EBEF                 lea     r15, ds:0[r8*8]
.text:000000000000EBF7                 jmp     loc_ED2D
.text:000000000000EBF7 ; ---------------------------------------------------------------------------
.text:000000000000EBFC                 align 20h
.text:000000000000EC00
.text:000000000000EC00 loc_EC00:                               ; CODE XREF: transit_state_bkref_isra_34+56E↓j
.text:000000000000EC00                 mov     rcx, [rbp+28h]
.text:000000000000EC04                 mov     rdi, [rsp+0E8h+var_90]
.text:000000000000EC09                 mov     rcx, [rcx+rdi+10h]
.text:000000000000EC0E                 mov     rcx, [rcx]
.text:000000000000EC11                 lea     rcx, [rcx+rcx*2]
.text:000000000000EC15                 lea     rcx, [rdx+rcx*8]
.text:000000000000EC19                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000EC1E
.text:000000000000EC1E loc_EC1E:                               ; CODE XREF: transit_state_bkref_isra_34+58E↓j
.text:000000000000EC1E                 add     rbx, [rsp+0E8h+var_E0]
.text:000000000000EC23                 mov     edx, [r14+0A0h]
.text:000000000000EC2A                 mov     rdi, r14
.text:000000000000EC2D                 sub     rbx, rax
.text:000000000000EC30                 lea     rsi, [rbx-1]
.text:000000000000EC34                 call    re_string_context_at
.text:000000000000EC39                 mov     rsi, [rsp+0E8h+var_88]
.text:000000000000EC3E                 mov     ecx, eax
.text:000000000000EC40                 mov     rax, [r14+0B8h]
.text:000000000000EC47                 lea     r10, ds:0[rbx*8]
.text:000000000000EC4F                 mov     [rsp+0E8h+var_D8], 0
.text:000000000000EC58                 lea     r11, [rax+r10]
.text:000000000000EC5C                 mov     rax, [rax+rsi]
.text:000000000000EC60                 mov     rdx, [r11]
.text:000000000000EC63                 test    rax, rax
.text:000000000000EC66                 jz      short loc_EC71
.text:000000000000EC68                 mov     rax, [rax+10h]
.text:000000000000EC6C                 mov     [rsp+0E8h+var_D8], rax
.text:000000000000EC71
.text:000000000000EC71 loc_EC71:                               ; CODE XREF: transit_state_bkref_isra_34+476↑j
.text:000000000000EC71                 test    rdx, rdx
.text:000000000000EC74                 jz      loc_EF90
.text:000000000000EC7A                 mov     rsi, [rdx+50h]
.text:000000000000EC7E                 mov     rdi, [rsp+0E8h+var_80]
.text:000000000000EC83                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000EC88                 mov     [rsp+0E8h+var_B8], r10
.text:000000000000EC8D                 mov     dword ptr [rsp+0E8h+var_C0], ecx
.text:000000000000EC91                 call    re_node_set_init_union
.text:000000000000EC96                 test    eax, eax
.text:000000000000EC98                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000EC9F                 mov     ecx, dword ptr [rsp+0E8h+var_C0]
.text:000000000000ECA3                 mov     r10, [rsp+0E8h+var_B8]
.text:000000000000ECA8                 jnz     loc_F038
.text:000000000000ECAE                 add     r10, [r14+0B8h]
.text:000000000000ECB5                 mov     rdx, [rsp+0E8h+var_80]
.text:000000000000ECBA                 mov     rsi, rbp
.text:000000000000ECBD                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000ECC2                 mov     [rsp+0E8h+var_C0], r10
.text:000000000000ECC7                 call    re_acquire_state_context
.text:000000000000ECCC                 mov     r10, [rsp+0E8h+var_C0]
.text:000000000000ECD1                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000ECD9                 mov     [r10], rax
.text:000000000000ECDC                 call    _free
.text:000000000000ECE1                 mov     rdx, [r14+0B8h]
.text:000000000000ECE8                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000ECED                 jz      loc_EFC1
.text:000000000000ECF3
.text:000000000000ECF3 loc_ECF3:                               ; CODE XREF: transit_state_bkref_isra_34+7CB↓j
.text:000000000000ECF3                                         ; transit_state_bkref_isra_34+7DA↓j
.text:000000000000ECF3                 cmp     [rsp+0E8h+var_C8], 0
.text:000000000000ECF9                 jnz     short loc_ED18
.text:000000000000ECFB                 mov     rax, [rsp+0E8h+var_88]
.text:000000000000ED00                 mov     rbx, [rsp+0E8h+var_D8]
.text:000000000000ED05                 mov     rax, [rdx+rax]
.text:000000000000ED09                 cmp     [rax+10h], rbx
.text:000000000000ED0D                 jg      loc_EFD8
.text:000000000000ED13                 nop     dword ptr [rax+rax+00h]
.text:000000000000ED18
.text:000000000000ED18 loc_ED18:                               ; CODE XREF: transit_state_bkref_isra_34+509↑j
.text:000000000000ED18                                         ; transit_state_bkref_isra_34+54A↓j ...
.text:000000000000ED18                 add     r12, 1
.text:000000000000ED1C                 add     r15, 28h ; '('
.text:000000000000ED20                 cmp     r12, [r14+0C8h]
.text:000000000000ED27                 jge     loc_E8A0
.text:000000000000ED2D
.text:000000000000ED2D loc_ED2D:                               ; CODE XREF: transit_state_bkref_isra_34+407↑j
.text:000000000000ED2D                 mov     rax, [r14+0D8h]
.text:000000000000ED34                 add     rax, r15
.text:000000000000ED37                 cmp     r13, [rax]
.text:000000000000ED3A                 jnz     short loc_ED18
.text:000000000000ED3C                 mov     rdi, [rsp+0E8h+var_E0]
.text:000000000000ED41                 cmp     rdi, [rax+8]
.text:000000000000ED45                 jnz     short loc_ED18
.text:000000000000ED47                 mov     rbx, [rax+18h]
.text:000000000000ED4B                 mov     rax, [rax+10h]
.text:000000000000ED4F                 mov     rdx, [rbp+30h]
.text:000000000000ED53                 mov     rcx, rbx
.text:000000000000ED56                 sub     rcx, rax
.text:000000000000ED59                 mov     [rsp+0E8h+var_C8], rcx
.text:000000000000ED5E                 jz      loc_EC00
.text:000000000000ED64                 mov     rcx, [rbp+18h]
.text:000000000000ED68                 mov     rdi, [rsp+0E8h+var_98]
.text:000000000000ED6D                 mov     rcx, [rcx+rdi]
.text:000000000000ED71                 lea     rcx, [rcx+rcx*2]
.text:000000000000ED75                 lea     rcx, [rdx+rcx*8]
.text:000000000000ED79                 mov     [rsp+0E8h+var_D0], rcx
.text:000000000000ED7E                 jmp     loc_EC1E
.text:000000000000ED7E ; ---------------------------------------------------------------------------
.text:000000000000ED83                 align 8
.text:000000000000ED88
.text:000000000000ED88 loc_ED88:                               ; CODE XREF: transit_state_bkref_isra_34+2E6↑j
.text:000000000000ED88                 mov     rbx, r13
.text:000000000000ED8B                 mov     r13, r8
.text:000000000000ED8E
.text:000000000000ED8E loc_ED8E:                               ; CODE XREF: transit_state_bkref_isra_34+79A↓j
.text:000000000000ED8E                 lea     r11, [r15+1]
.text:000000000000ED92
.text:000000000000ED92 loc_ED92:                               ; CODE XREF: transit_state_bkref_isra_34+791↓j
.text:000000000000ED92                                         ; transit_state_bkref_isra_34+8D7↓j
.text:000000000000ED92                 cmp     [rsp+0E8h+var_E0], r11
.text:000000000000ED97                 jl      loc_EA29
.text:000000000000ED9D                 mov     rax, r12
.text:000000000000EDA0                 lea     r15, ds:0[r11*8]
.text:000000000000EDA8                 mov     r12, rbx
.text:000000000000EDAB                 mov     rbx, r11
.text:000000000000EDAE                 mov     r11, r13
.text:000000000000EDB1                 mov     r13, rax
.text:000000000000EDB4                 nop     dword ptr [rax+00h]
.text:000000000000EDB8
.text:000000000000EDB8 loc_EDB8:                               ; CODE XREF: transit_state_bkref_isra_34+71C↓j
.text:000000000000EDB8                 mov     rax, rbx
.text:000000000000EDBB                 sub     rax, [r12]
.text:000000000000EDBF                 test    rax, rax
.text:000000000000EDC2                 jle     short loc_EDE5
.text:000000000000EDC4                 cmp     [r14+30h], r13
.text:000000000000EDC8                 jle     loc_F051
.text:000000000000EDCE
.text:000000000000EDCE loc_EDCE:                               ; CODE XREF: transit_state_bkref_isra_34+883↓j
.text:000000000000EDCE                 movzx   ecx, byte ptr [r11+rbx-1]
.text:000000000000EDD4                 lea     rax, [r13+1]
.text:000000000000EDD8                 cmp     [r11+r13], cl
.text:000000000000EDDC                 jnz     loc_EF12
.text:000000000000EDE2                 mov     r13, rax
.text:000000000000EDE5
.text:000000000000EDE5 loc_EDE5:                               ; CODE XREF: transit_state_bkref_isra_34+5D2↑j
.text:000000000000EDE5                 mov     rax, [r14+0B8h]
.text:000000000000EDEC                 mov     rax, [rax+r15]
.text:000000000000EDF0                 test    rax, rax
.text:000000000000EDF3                 jz      loc_EEFF
.text:000000000000EDF9                 mov     rcx, [rax+10h]
.text:000000000000EDFD                 test    rcx, rcx
.text:000000000000EE00                 jle     loc_EEFF
.text:000000000000EE06                 mov     rdi, [rax+18h]
.text:000000000000EE0A                 mov     rax, [rsp+0E8h+var_98]
.text:000000000000EE0F                 xor     edx, edx
.text:000000000000EE11                 mov     r8, [rsp+0E8h+var_90]
.text:000000000000EE16                 mov     rsi, [rax]
.text:000000000000EE19                 jmp     short loc_EE2D
.text:000000000000EE19 ; ---------------------------------------------------------------------------
.text:000000000000EE1B                 align 20h
.text:000000000000EE20
.text:000000000000EE20 loc_EE20:                               ; CODE XREF: transit_state_bkref_isra_34+64F↓j
.text:000000000000EE20                                         ; transit_state_bkref_isra_34+654↓j
.text:000000000000EE20                 add     rdx, 1
.text:000000000000EE24                 cmp     rcx, rdx
.text:000000000000EE27                 jz      loc_EEFF
.text:000000000000EE2D
.text:000000000000EE2D loc_EE2D:                               ; CODE XREF: transit_state_bkref_isra_34+629↑j
.text:000000000000EE2D                 mov     rbp, [rdi+rdx*8]
.text:000000000000EE31                 mov     rax, rbp
.text:000000000000EE34                 shl     rax, 4
.text:000000000000EE38                 add     rax, rsi
.text:000000000000EE3B                 cmp     byte ptr [rax+8], 9
.text:000000000000EE3F                 jnz     short loc_EE20
.text:000000000000EE41                 cmp     r8, [rax]
.text:000000000000EE44                 jnz     short loc_EE20
.text:000000000000EE46                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:000000000000EE4A                 jz      loc_EEFF
.text:000000000000EE50                 mov     rsi, [r12+10h]
.text:000000000000EE55                 mov     rcx, [r12]
.text:000000000000EE59                 test    rsi, rsi
.text:000000000000EE5C                 jz      loc_EF20
.text:000000000000EE62
.text:000000000000EE62 loc_EE62:                               ; CODE XREF: transit_state_bkref_isra_34+763↓j
.text:000000000000EE62                 mov     [rsp+0E8h+var_D8], r11
.text:000000000000EE67                 mov     rdx, [r12+8]
.text:000000000000EE6C                 sub     rsp, 8
.text:000000000000EE70                 push    9
.text:000000000000EE72                 mov     r9, rbx
.text:000000000000EE75                 mov     r8, rbp
.text:000000000000EE78                 mov     rdi, r14
.text:000000000000EE7B                 call    check_arrival
.text:000000000000EE80                 pop     rdx
.text:000000000000EE81                 cmp     eax, 1
.text:000000000000EE84                 pop     rcx
.text:000000000000EE85                 mov     r11, [rsp+0E8h+var_D8]
.text:000000000000EE8A                 jz      short loc_EEFF
.text:000000000000EE8C                 test    eax, eax
.text:000000000000EE8E                 jnz     loc_EB68
.text:000000000000EE94                 mov     rax, [r12+20h]
.text:000000000000EE99                 cmp     rax, [r12+18h]
.text:000000000000EE9E                 jz      loc_F078
.text:000000000000EEA4
.text:000000000000EEA4 loc_EEA4:                               ; CODE XREF: transit_state_bkref_isra_34+8BC↓j
.text:000000000000EEA4                 mov     esi, 28h ; '('  ; size
.text:000000000000EEA9                 mov     edi, 1          ; nmemb
.text:000000000000EEAE                 call    _calloc
.text:000000000000EEB3                 test    rax, rax
.text:000000000000EEB6                 jz      loc_EF59
.text:000000000000EEBC                 mov     rdx, [r12+20h]
.text:000000000000EEC1                 mov     rcx, [r12+28h]
.text:000000000000EEC6                 mov     rsi, r12
.text:000000000000EEC9                 mov     r8, [rsp+0E8h+var_E0]
.text:000000000000EECE                 mov     rdi, r14
.text:000000000000EED1                 mov     [rcx+rdx*8], rax
.text:000000000000EED5                 mov     rcx, [rsp+0E8h+var_B8]
.text:000000000000EEDA                 add     rdx, 1
.text:000000000000EEDE                 mov     [rax], rbp
.text:000000000000EEE1                 mov     [rax+8], rbx
.text:000000000000EEE5                 mov     [r12+20h], rdx
.text:000000000000EEEA                 mov     rdx, rax
.text:000000000000EEED                 call    get_subexp_sub_isra_32
.text:000000000000EEF2                 cmp     eax, 1
.text:000000000000EEF5                 mov     r11, [r14+8]
.text:000000000000EEF9                 ja      loc_EB68
.text:000000000000EEFF
.text:000000000000EEFF loc_EEFF:                               ; CODE XREF: transit_state_bkref_isra_34+603↑j
.text:000000000000EEFF                                         ; transit_state_bkref_isra_34+610↑j ...
.text:000000000000EEFF                 add     rbx, 1
.text:000000000000EF03                 add     r15, 8
.text:000000000000EF07                 cmp     [rsp+0E8h+var_E0], rbx
.text:000000000000EF0C                 jge     loc_EDB8
.text:000000000000EF12
.text:000000000000EF12 loc_EF12:                               ; CODE XREF: transit_state_bkref_isra_34+5EC↑j
.text:000000000000EF12                                         ; transit_state_bkref_isra_34+865↓j
.text:000000000000EF12                 mov     r13, r11
.text:000000000000EF15                 jmp     loc_EA29
.text:000000000000EF15 ; ---------------------------------------------------------------------------
.text:000000000000EF1A                 align 20h
.text:000000000000EF20
.text:000000000000EF20 loc_EF20:                               ; CODE XREF: transit_state_bkref_isra_34+66C↑j
.text:000000000000EF20                 mov     rsi, rbx
.text:000000000000EF23                 mov     edi, 18h        ; nmemb
.text:000000000000EF28                 mov     [rsp+0E8h+var_D0], r11
.text:000000000000EF2D                 sub     rsi, rcx
.text:000000000000EF30                 mov     [rsp+0E8h+var_D8], rcx
.text:000000000000EF35                 add     rsi, 1          ; size
.text:000000000000EF39                 call    _calloc
.text:000000000000EF3E                 test    rax, rax
.text:000000000000EF41                 mov     rsi, rax
.text:000000000000EF44                 mov     [r12+10h], rax
.text:000000000000EF49                 mov     rcx, [rsp+0E8h+var_D8]
.text:000000000000EF4E                 mov     r11, [rsp+0E8h+var_D0]
.text:000000000000EF53                 jnz     loc_EE62
.text:000000000000EF59
.text:000000000000EF59 loc_EF59:                               ; CODE XREF: transit_state_bkref_isra_34+6C6↑j
.text:000000000000EF59                                         ; transit_state_bkref_isra_34+8A7↓j
.text:000000000000EF59                 mov     eax, 0Ch
.text:000000000000EF5E                 jmp     loc_EB68
.text:000000000000EF5E ; ---------------------------------------------------------------------------
.text:000000000000EF63                 align 8
.text:000000000000EF68
.text:000000000000EF68 loc_EF68:                               ; CODE XREF: transit_state_bkref_isra_34+2AD↑j
.text:000000000000EF68                                         ; transit_state_bkref_isra_34+31F↑j
.text:000000000000EF68                 mov     rcx, rbx
.text:000000000000EF6B                 mov     rbx, r13
.text:000000000000EF6E                 mov     r13, r8
.text:000000000000EF71                 cmp     [rbx+20h], rbp
.text:000000000000EF75                 jg      loc_EA29
.text:000000000000EF7B                 test    rbp, rbp
.text:000000000000EF7E                 mov     r12, rcx
.text:000000000000EF81                 jz      loc_ED92
.text:000000000000EF87                 mov     r15, r11
.text:000000000000EF8A                 jmp     loc_ED8E
.text:000000000000EF8A ; ---------------------------------------------------------------------------
.text:000000000000EF8F                 align 10h
.text:000000000000EF90
.text:000000000000EF90 loc_EF90:                               ; CODE XREF: transit_state_bkref_isra_34+484↑j
.text:000000000000EF90                 mov     rdx, [rsp+0E8h+var_D0]
.text:000000000000EF95                 mov     rdi, [rsp+0E8h+var_70]
.text:000000000000EF9A                 mov     rsi, rbp
.text:000000000000EF9D                 mov     [rsp+0E8h+var_C0], r11
.text:000000000000EFA2                 call    re_acquire_state_context
.text:000000000000EFA7                 mov     r11, [rsp+0E8h+var_C0]
.text:000000000000EFAC                 mov     rdx, [r14+0B8h]
.text:000000000000EFB3                 mov     [r11], rax
.text:000000000000EFB6                 cmp     qword ptr [rdx+rbx*8], 0
.text:000000000000EFBB                 jnz     loc_ECF3
.text:000000000000EFC1
.text:000000000000EFC1 loc_EFC1:                               ; CODE XREF: transit_state_bkref_isra_34+4FD↑j
.text:000000000000EFC1                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000EFC8                 test    eax, eax
.text:000000000000EFCA                 jz      loc_ECF3
.text:000000000000EFD0                 jmp     loc_EB68
.text:000000000000EFD0 ; ---------------------------------------------------------------------------
.text:000000000000EFD5                 align 8
.text:000000000000EFD8
.text:000000000000EFD8 loc_EFD8:                               ; CODE XREF: transit_state_bkref_isra_34+51D↑j
.text:000000000000EFD8                 mov     rax, [rsp+0E8h+var_D0]
.text:000000000000EFDD                 mov     rcx, [rsp+0E8h+var_E0]
.text:000000000000EFE2                 mov     rdi, r14
.text:000000000000EFE5                 lea     r8, [rax+10h]
.text:000000000000EFE9                 lea     rbx, [rax+8]
.text:000000000000EFED                 mov     rdx, r8
.text:000000000000EFF0                 mov     rsi, rbx
.text:000000000000EFF3                 mov     [rsp+0E8h+var_D8], r8
.text:000000000000EFF8                 call    check_subexp_matching_top_isra_18
.text:000000000000EFFD                 test    eax, eax
.text:000000000000EFFF                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000F006                 jnz     loc_EB68
.text:000000000000F00C                 mov     r8, [rsp+0E8h+var_D8]
.text:000000000000F011                 mov     rsi, rbx
.text:000000000000F014                 mov     rdi, r14
.text:000000000000F017                 mov     rdx, r8
.text:000000000000F01A                 call    transit_state_bkref_isra_34
.text:000000000000F01F                 test    eax, eax
.text:000000000000F021                 mov     dword ptr [rsp+0E8h+var_5C], eax
.text:000000000000F028                 jz      loc_ED18
.text:000000000000F02E                 jmp     loc_EB68
.text:000000000000F02E ; ---------------------------------------------------------------------------
.text:000000000000F033                 align 8
.text:000000000000F038
.text:000000000000F038 loc_F038:                               ; CODE XREF: transit_state_bkref_isra_34+4B8↑j
.text:000000000000F038                 mov     rdi, [rsp+0E8h+ptr] ; ptr
.text:000000000000F040                 call    _free
.text:000000000000F045                 mov     eax, dword ptr [rsp+0E8h+var_5C]
.text:000000000000F04C                 jmp     loc_EB68
.text:000000000000F051 ; ---------------------------------------------------------------------------
.text:000000000000F051
.text:000000000000F051 loc_F051:                               ; CODE XREF: transit_state_bkref_isra_34+5D8↑j
.text:000000000000F051                 cmp     [r14+58h], r13
.text:000000000000F055                 jle     loc_EF12
.text:000000000000F05B                 lea     esi, [r13+1]
.text:000000000000F05F                 mov     rdi, r14
.text:000000000000F062                 call    extend_buffers
.text:000000000000F067                 test    eax, eax
.text:000000000000F069                 jnz     loc_EB68
.text:000000000000F06F                 mov     r11, [r14+8]
.text:000000000000F073                 jmp     loc_EDCE
.text:000000000000F078 ; ---------------------------------------------------------------------------
.text:000000000000F078
.text:000000000000F078 loc_F078:                               ; CODE XREF: transit_state_bkref_isra_34+6AE↑j
.text:000000000000F078                 lea     rdx, [rax+rax+1]
.text:000000000000F07D                 mov     rdi, [r12+28h]  ; ptr
.text:000000000000F082                 lea     rsi, ds:0[rdx*8] ; size
.text:000000000000F08A                 mov     [rsp+0E8h+var_D8], rdx
.text:000000000000F08F                 call    _realloc
.text:000000000000F094                 test    rax, rax
.text:000000000000F097                 jz      loc_EF59
.text:000000000000F09D                 mov     rdx, [rsp+0E8h+var_D8]
.text:000000000000F0A2                 mov     [r12+28h], rax
.text:000000000000F0A7                 mov     [r12+18h], rdx
.text:000000000000F0AC                 jmp     loc_EEA4
.text:000000000000F0B1 ; ---------------------------------------------------------------------------
.text:000000000000F0B1
.text:000000000000F0B1 loc_F0B1:                               ; CODE XREF: transit_state_bkref_isra_34+24B↑j
.text:000000000000F0B1                 mov     r13, [rsp+0E8h+var_B8]
.text:000000000000F0B6                 mov     rax, [r14+0C8h]
.text:000000000000F0BD                 jmp     loc_EBB0
.text:000000000000F0C2 ; ---------------------------------------------------------------------------
.text:000000000000F0C2
.text:000000000000F0C2 loc_F0C2:                               ; CODE XREF: transit_state_bkref_isra_34+268↑j
.text:000000000000F0C2                 mov     r12, [rsp+0E8h+var_E0]
.text:000000000000F0C7                 jmp     loc_ED92
.text:000000000000F0CC ; ---------------------------------------------------------------------------
.text:000000000000F0CC
.text:000000000000F0CC loc_F0CC:                               ; CODE XREF: transit_state_bkref_isra_34+389↑j
.text:000000000000F0CC                 call    ___stack_chk_fail
.text:000000000000F0CC ; } // starts at E7F0
.text:000000000000F0CC transit_state_bkref_isra_34 endp
.text:000000000000F0CC
.text:000000000000F0CC ; ---------------------------------------------------------------------------
.text:000000000000F0D1                 align 20h
.text:000000000000F0E0
.text:000000000000F0E0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F0E0
.text:000000000000F0E0
.text:000000000000F0E0 merge_state_with_log proc near          ; CODE XREF: re_search_internal+7DC↓p
.text:000000000000F0E0                                         ; re_search_internal+BC3↓p
.text:000000000000F0E0
.text:000000000000F0E0 var_68          = qword ptr -68h
.text:000000000000F0E0 var_60          = qword ptr -60h
.text:000000000000F0E0 var_58          = xmmword ptr -58h
.text:000000000000F0E0 ptr             = qword ptr -48h
.text:000000000000F0E0 var_40          = qword ptr -40h
.text:000000000000F0E0
.text:000000000000F0E0 ; __unwind {
.text:000000000000F0E0                 push    r15
.text:000000000000F0E2                 push    r14
.text:000000000000F0E4                 push    r13
.text:000000000000F0E6                 push    r12
.text:000000000000F0E8                 mov     r13, rdi
.text:000000000000F0EB                 push    rbp
.text:000000000000F0EC                 push    rbx
.text:000000000000F0ED                 mov     rbx, rsi
.text:000000000000F0F0                 sub     rsp, 38h
.text:000000000000F0F4                 mov     r12, [rsi+48h]
.text:000000000000F0F8                 mov     r14, [rsi+0B8h]
.text:000000000000F0FF                 mov     rax, fs:28h
.text:000000000000F108                 mov     [rsp+68h+var_40], rax
.text:000000000000F10D                 xor     eax, eax
.text:000000000000F10F                 mov     r15, [rsi+98h]
.text:000000000000F116                 lea     rbp, ds:0[r12*8]
.text:000000000000F11E                 add     r14, rbp
.text:000000000000F121                 cmp     [rsi+0C0h], r12
.text:000000000000F128                 jge     short loc_F170
.text:000000000000F12A                 mov     [r14], rdx
.text:000000000000F12D                 mov     rbp, rdx
.text:000000000000F130                 mov     [rsi+0C0h], r12
.text:000000000000F137
.text:000000000000F137 loc_F137:                               ; CODE XREF: merge_state_with_log+111↓j
.text:000000000000F137                                         ; merge_state_with_log+121↓j ...
.text:000000000000F137                 cmp     qword ptr [r15+98h], 0
.text:000000000000F13F                 jnz     loc_F268
.text:000000000000F145
.text:000000000000F145 loc_F145:                               ; CODE XREF: merge_state_with_log+1B2↓j
.text:000000000000F145                                         ; merge_state_with_log+1D9↓j ...
.text:000000000000F145                 mov     rcx, [rsp+68h+var_40]
.text:000000000000F14A                 xor     rcx, fs:28h
.text:000000000000F153                 mov     rax, rbp
.text:000000000000F156                 jnz     loc_F2C7
.text:000000000000F15C                 add     rsp, 38h
.text:000000000000F160                 pop     rbx
.text:000000000000F161                 pop     rbp
.text:000000000000F162                 pop     r12
.text:000000000000F164                 pop     r13
.text:000000000000F166                 pop     r14
.text:000000000000F168                 pop     r15
.text:000000000000F16A                 retn
.text:000000000000F16A ; ---------------------------------------------------------------------------
.text:000000000000F16B                 align 10h
.text:000000000000F170
.text:000000000000F170 loc_F170:                               ; CODE XREF: merge_state_with_log+48↑j
.text:000000000000F170                 mov     rax, [r14]
.text:000000000000F173                 test    rax, rax
.text:000000000000F176                 jz      loc_F258
.text:000000000000F17C                 test    rdx, rdx
.text:000000000000F17F                 mov     rax, [rax+50h]
.text:000000000000F183                 jz      loc_F210
.text:000000000000F189                 mov     r14, [rdx+50h]
.text:000000000000F18D                 lea     rdi, [rsp+68h+var_58]
.text:000000000000F192                 mov     rdx, rax
.text:000000000000F195                 mov     [rsp+68h+var_68], rdi
.text:000000000000F199                 mov     rsi, r14
.text:000000000000F19C                 call    re_node_set_init_union
.text:000000000000F1A1                 test    eax, eax
.text:000000000000F1A3                 mov     [r13+0], eax
.text:000000000000F1A7                 jnz     loc_F2C0
.text:000000000000F1AD                 mov     rax, [rbx+48h]
.text:000000000000F1B1                 mov     edx, [rbx+0A0h]
.text:000000000000F1B7                 mov     rdi, rbx
.text:000000000000F1BA                 lea     rsi, [rax-1]
.text:000000000000F1BE                 call    re_string_context_at
.text:000000000000F1C3                 mov     r8, [rbx+0B8h]
.text:000000000000F1CA                 mov     rdx, [rsp+68h+var_68]
.text:000000000000F1CE                 mov     ecx, eax
.text:000000000000F1D0                 mov     rsi, r15
.text:000000000000F1D3                 mov     rdi, r13
.text:000000000000F1D6                 add     r8, rbp
.text:000000000000F1D9                 mov     [rsp+68h+var_60], r8
.text:000000000000F1DE                 call    re_acquire_state_context
.text:000000000000F1E3                 mov     r8, [rsp+68h+var_60]
.text:000000000000F1E8                 test    r14, r14
.text:000000000000F1EB                 mov     rbp, rax
.text:000000000000F1EE                 mov     [r8], rax
.text:000000000000F1F1                 jz      loc_F137
.text:000000000000F1F7                 mov     rdi, [rsp+68h+ptr] ; ptr
.text:000000000000F1FC                 call    _free
.text:000000000000F201                 jmp     loc_F137
.text:000000000000F201 ; ---------------------------------------------------------------------------
.text:000000000000F206                 align 10h
.text:000000000000F210
.text:000000000000F210 loc_F210:                               ; CODE XREF: merge_state_with_log+A3↑j
.text:000000000000F210                 movdqu  xmm0, xmmword ptr [rax]
.text:000000000000F214                 mov     rdi, rbx
.text:000000000000F217                 mov     edx, [rsi+0A0h]
.text:000000000000F21D                 lea     rsi, [r12-1]
.text:000000000000F222                 movaps  [rsp+68h+var_58], xmm0
.text:000000000000F227                 mov     rax, [rax+10h]
.text:000000000000F22B                 mov     [rsp+68h+ptr], rax
.text:000000000000F230                 call    re_string_context_at
.text:000000000000F235                 lea     rdx, [rsp+68h+var_58]
.text:000000000000F23A                 mov     ecx, eax
.text:000000000000F23C                 mov     rsi, r15
.text:000000000000F23F                 mov     rdi, r13
.text:000000000000F242                 call    re_acquire_state_context
.text:000000000000F247                 mov     rbp, rax
.text:000000000000F24A                 mov     [r14], rax
.text:000000000000F24D                 jmp     loc_F137
.text:000000000000F24D ; ---------------------------------------------------------------------------
.text:000000000000F252                 align 8
.text:000000000000F258
.text:000000000000F258 loc_F258:                               ; CODE XREF: merge_state_with_log+96↑j
.text:000000000000F258                 mov     [r14], rdx
.text:000000000000F25B                 mov     rbp, rdx
.text:000000000000F25E                 jmp     loc_F137
.text:000000000000F25E ; ---------------------------------------------------------------------------
.text:000000000000F263                 align 8
.text:000000000000F268
.text:000000000000F268 loc_F268:                               ; CODE XREF: merge_state_with_log+5F↑j
.text:000000000000F268                 test    rbp, rbp
.text:000000000000F26B                 jz      short loc_F2C0
.text:000000000000F26D                 lea     r14, [rbp+10h]
.text:000000000000F271                 lea     r15, [rbp+18h]
.text:000000000000F275                 mov     rcx, r12
.text:000000000000F278                 mov     rdi, rbx
.text:000000000000F27B                 mov     rdx, r15
.text:000000000000F27E                 mov     rsi, r14
.text:000000000000F281                 call    check_subexp_matching_top_isra_18
.text:000000000000F286                 test    eax, eax
.text:000000000000F288                 mov     [r13+0], eax
.text:000000000000F28C                 jnz     short loc_F2C0
.text:000000000000F28E                 test    byte ptr [rbp+68h], 40h
.text:000000000000F292                 jz      loc_F145
.text:000000000000F298                 mov     rdx, r15
.text:000000000000F29B                 mov     rsi, r14
.text:000000000000F29E                 mov     rdi, rbx
.text:000000000000F2A1                 call    transit_state_bkref_isra_34
.text:000000000000F2A6                 test    eax, eax
.text:000000000000F2A8                 mov     [r13+0], eax
.text:000000000000F2AC                 jnz     short loc_F2C0
.text:000000000000F2AE                 mov     rax, [rbx+0B8h]
.text:000000000000F2B5                 mov     rbp, [rax+r12*8]
.text:000000000000F2B9                 jmp     loc_F145
.text:000000000000F2B9 ; ---------------------------------------------------------------------------
.text:000000000000F2BE                 align 20h
.text:000000000000F2C0
.text:000000000000F2C0 loc_F2C0:                               ; CODE XREF: merge_state_with_log+C7↑j
.text:000000000000F2C0                                         ; merge_state_with_log+18B↑j ...
.text:000000000000F2C0                 xor     ebp, ebp
.text:000000000000F2C2                 jmp     loc_F145
.text:000000000000F2C7 ; ---------------------------------------------------------------------------
.text:000000000000F2C7
.text:000000000000F2C7 loc_F2C7:                               ; CODE XREF: merge_state_with_log+76↑j
.text:000000000000F2C7                 call    ___stack_chk_fail
.text:000000000000F2C7 ; } // starts at F0E0
.text:000000000000F2C7 merge_state_with_log endp
.text:000000000000F2C7
.text:000000000000F2C7 ; ---------------------------------------------------------------------------
.text:000000000000F2CC                 align 10h
.text:000000000000F2D0
.text:000000000000F2D0 ; =============== S U B R O U T I N E =======================================
.text:000000000000F2D0
.text:000000000000F2D0
.text:000000000000F2D0 sift_states_backward proc near          ; CODE XREF: re_search_internal+9CE↓p
.text:000000000000F2D0                                         ; re_search_internal+1235↓p ...
.text:000000000000F2D0
.text:000000000000F2D0 var_98          = qword ptr -98h
.text:000000000000F2D0 n               = qword ptr -90h
.text:000000000000F2D0 var_88          = qword ptr -88h
.text:000000000000F2D0 var_80          = qword ptr -80h
.text:000000000000F2D0 var_78          = qword ptr -78h
.text:000000000000F2D0 var_6C          = dword ptr -6Ch
.text:000000000000F2D0 var_68          = qword ptr -68h
.text:000000000000F2D0 var_60          = qword ptr -60h
.text:000000000000F2D0 var_58          = qword ptr -58h
.text:000000000000F2D0 var_50          = qword ptr -50h
.text:000000000000F2D0 ptr             = qword ptr -48h
.text:000000000000F2D0 var_40          = qword ptr -40h
.text:000000000000F2D0
.text:000000000000F2D0 ; __unwind {
.text:000000000000F2D0                 push    r15
.text:000000000000F2D2                 push    r14
.text:000000000000F2D4                 mov     r14, rdi
.text:000000000000F2D7                 push    r13
.text:000000000000F2D9                 push    r12
.text:000000000000F2DB                 mov     r13, rsi
.text:000000000000F2DE                 push    rbp
.text:000000000000F2DF                 push    rbx
.text:000000000000F2E0                 sub     rsp, 68h
.text:000000000000F2E4                 mov     r15, [rsi+18h]
.text:000000000000F2E8                 mov     rbx, [rsi+10h]
.text:000000000000F2EC                 mov     [rsp+98h+var_98], rdi
.text:000000000000F2F0                 mov     edi, 8          ; size
.text:000000000000F2F5                 mov     [rsp+98h+var_58], 1
.text:000000000000F2FE                 mov     rax, fs:28h
.text:000000000000F307                 mov     [rsp+98h+var_40], rax
.text:000000000000F30C                 xor     eax, eax
.text:000000000000F30E                 mov     [rsp+98h+var_50], 1
.text:000000000000F317                 call    _malloc
.text:000000000000F31C                 test    rax, rax
.text:000000000000F31F                 mov     [rsp+98h+ptr], rax
.text:000000000000F324                 jz      loc_F604
.text:000000000000F32A                 lea     rcx, [rsp+98h+var_58]
.text:000000000000F32F                 mov     [rax], rbx
.text:000000000000F332                 mov     rdx, r15
.text:000000000000F335                 mov     rsi, r13
.text:000000000000F338                 mov     rdi, r14
.text:000000000000F33B                 mov     [rsp+98h+var_88], rcx
.text:000000000000F340                 call    update_cur_sifted_state
.text:000000000000F345                 test    eax, eax
.text:000000000000F347                 jnz     loc_F5D5
.text:000000000000F34D                 lea     rax, ds:0[r15*8]
.text:000000000000F355                 test    r15, r15
.text:000000000000F358                 mov     [rsp+98h+var_6C], 0
.text:000000000000F360                 mov     [rsp+98h+n], rax
.text:000000000000F365                 lea     rax, [r13+30h]
.text:000000000000F369                 mov     [rsp+98h+var_60], rax
.text:000000000000F36E                 jle     loc_F577
.text:000000000000F374
.text:000000000000F374 loc_F374:                               ; CODE XREF: sift_states_backward+2A1↓j
.text:000000000000F374                 mov     rdi, [r13+0]    ; s
.text:000000000000F378                 mov     rax, [rsp+98h+n]
.text:000000000000F37D                 cmp     qword ptr [rdi+rax], 0
.text:000000000000F382                 jz      loc_F598
.text:000000000000F388                 mov     rax, [rsp+98h+var_98]
.text:000000000000F38C                 mov     [rsp+98h+var_6C], 0
.text:000000000000F394                 mov     ecx, [rsp+98h+var_6C]
.text:000000000000F398                 cmp     [rax+0E0h], ecx
.text:000000000000F39E                 jl      loc_F5B1
.text:000000000000F3A4
.text:000000000000F3A4 loc_F3A4:                               ; CODE XREF: sift_states_backward+2DB↓j
.text:000000000000F3A4                 mov     rbx, [rsp+98h+var_98]
.text:000000000000F3A8                 mov     rdi, [rsp+98h+n]
.text:000000000000F3AD                 sub     r15, 1
.text:000000000000F3B1                 mov     [rsp+98h+var_50], 0
.text:000000000000F3BA                 mov     rax, [rbx+0B8h]
.text:000000000000F3C1                 mov     r12, [rax+rdi-8]
.text:000000000000F3C6                 test    r12, r12
.text:000000000000F3C9                 jz      loc_F550
.text:000000000000F3CF                 cmp     qword ptr [r12+28h], 0
.text:000000000000F3D5                 mov     r14, [rbx+98h]
.text:000000000000F3DC                 jle     loc_F550
.text:000000000000F3E2                 xor     ebx, ebx
.text:000000000000F3E4                 jmp     loc_F48B
.text:000000000000F3E4 ; ---------------------------------------------------------------------------
.text:000000000000F3E9                 align 10h
.text:000000000000F3F0
.text:000000000000F3F0 loc_F3F0:                               ; CODE XREF: sift_states_backward+1D5↓j
.text:000000000000F3F0                                         ; sift_states_backward+271↓j ...
.text:000000000000F3F0                 mov     rdi, [rsp+98h+var_98]
.text:000000000000F3F4                 mov     rdx, r15
.text:000000000000F3F7                 call    check_node_accept
.text:000000000000F3FC                 test    al, al
.text:000000000000F3FE                 jz      short loc_F47C
.text:000000000000F400                 mov     rax, [r13+0]
.text:000000000000F404                 mov     rcx, [rsp+98h+n]
.text:000000000000F409                 mov     rax, [rax+rcx]
.text:000000000000F40D                 test    rax, rax
.text:000000000000F410                 jz      short loc_F47C
.text:000000000000F412                 mov     rdx, [r14+18h]
.text:000000000000F416                 mov     rdi, [rax+10h]
.text:000000000000F41A                 lea     rsi, [rax+18h]
.text:000000000000F41E                 mov     rdx, [rdx+rbp*8]
.text:000000000000F422                 call    re_node_set_contains_isra_3
.text:000000000000F427                 test    rax, rax
.text:000000000000F42A                 jz      short loc_F47C
.text:000000000000F42C                 mov     r10d, 1
.text:000000000000F432
.text:000000000000F432 loc_F432:                               ; CODE XREF: sift_states_backward+22B↓j
.text:000000000000F432                                         ; sift_states_backward+260↓j ...
.text:000000000000F432                 cmp     qword ptr [r13+28h], 0
.text:000000000000F437                 jz      short loc_F467
.text:000000000000F439                 mov     rax, [r14+18h]
.text:000000000000F43D                 sub     rsp, 8
.text:000000000000F441                 lea     rsi, [r13+28h]
.text:000000000000F445                 lea     r8, [r10+r15]
.text:000000000000F449                 mov     r9, rbp
.text:000000000000F44C                 mov     rcx, [rax+rbp*8]
.text:000000000000F450                 push    r15
.text:000000000000F452                 mov     rdx, [rsp+0A8h+var_60]
.text:000000000000F457                 mov     rdi, [rsp+0A8h+var_98]
.text:000000000000F45C                 call    check_dst_limits_isra_13
.text:000000000000F461                 test    al, al
.text:000000000000F463                 pop     rdx
.text:000000000000F464                 pop     rcx
.text:000000000000F465                 jnz     short loc_F47C
.text:000000000000F467
.text:000000000000F467 loc_F467:                               ; CODE XREF: sift_states_backward+167↑j
.text:000000000000F467                 mov     rdi, [rsp+98h+var_88]
.text:000000000000F46C                 mov     rsi, rbp
.text:000000000000F46F                 call    re_node_set_insert
.text:000000000000F474                 test    al, al
.text:000000000000F476                 jz      loc_F5D0
.text:000000000000F47C
.text:000000000000F47C loc_F47C:                               ; CODE XREF: sift_states_backward+12E↑j
.text:000000000000F47C                                         ; sift_states_backward+140↑j ...
.text:000000000000F47C                 add     rbx, 1
.text:000000000000F480                 cmp     rbx, [r12+28h]
.text:000000000000F485                 jge     loc_F550
.text:000000000000F48B
.text:000000000000F48B loc_F48B:                               ; CODE XREF: sift_states_backward+114↑j
.text:000000000000F48B                 mov     rax, [r12+30h]
.text:000000000000F490                 mov     rsi, [r14]
.text:000000000000F493                 mov     rbp, [rax+rbx*8]
.text:000000000000F497                 mov     r9, rbp
.text:000000000000F49A                 shl     r9, 4
.text:000000000000F49E                 add     rsi, r9
.text:000000000000F4A1                 test    byte ptr [rsi+0Ah], 10h
.text:000000000000F4A5                 jz      loc_F3F0
.text:000000000000F4AB                 mov     rcx, [rsp+98h+var_98]
.text:000000000000F4AF                 mov     rax, [r13+18h]
.text:000000000000F4B3                 mov     r8, r15
.text:000000000000F4B6                 mov     rdx, rbp
.text:000000000000F4B9                 mov     [rsp+98h+var_80], r9
.text:000000000000F4BE                 mov     r11, [rcx+98h]
.text:000000000000F4C5                 mov     [rsp+98h+var_78], rax
.text:000000000000F4CA                 mov     rdi, [r11]
.text:000000000000F4CD                 lea     rsi, [r11+0D8h]
.text:000000000000F4D4                 mov     [rsp+98h+var_68], r11
.text:000000000000F4D9                 call    check_node_accept_bytes_isra_31
.text:000000000000F4DE                 movsxd  r10, eax
.text:000000000000F4E1                 mov     r9, [rsp+98h+var_80]
.text:000000000000F4E6                 cmp     r10d, 0
.text:000000000000F4EA                 jle     loc_F580
.text:000000000000F4F0                 movsxd  rax, r10d
.text:000000000000F4F3                 add     rax, r15
.text:000000000000F4F6                 cmp     [rsp+98h+var_78], rax
.text:000000000000F4FB                 jl      loc_F432
.text:000000000000F501                 mov     rdx, [r13+0]
.text:000000000000F505                 mov     r11, [rsp+98h+var_68]
.text:000000000000F50A                 mov     rax, [rdx+rax*8]
.text:000000000000F50E                 test    rax, rax
.text:000000000000F511                 jz      short loc_F586
.text:000000000000F513                 mov     rdx, [r11+18h]
.text:000000000000F517                 mov     rdi, [rax+10h]
.text:000000000000F51B                 lea     rsi, [rax+18h]
.text:000000000000F51F                 mov     [rsp+98h+var_80], r9
.text:000000000000F524                 mov     rdx, [rdx+rbp*8]
.text:000000000000F528                 call    re_node_set_contains_isra_3
.text:000000000000F52D                 test    rax, rax
.text:000000000000F530                 jnz     loc_F432
.text:000000000000F536                 mov     r9, [rsp+98h+var_80]
.text:000000000000F53B                 mov     rsi, [r14]
.text:000000000000F53E                 add     rsi, r9
.text:000000000000F541                 jmp     loc_F3F0
.text:000000000000F541 ; ---------------------------------------------------------------------------
.text:000000000000F546                 align 10h
.text:000000000000F550
.text:000000000000F550 loc_F550:                               ; CODE XREF: sift_states_backward+F9↑j
.text:000000000000F550                                         ; sift_states_backward+10C↑j ...
.text:000000000000F550                 mov     rcx, [rsp+98h+var_88]
.text:000000000000F555                 mov     rdi, [rsp+98h+var_98]
.text:000000000000F559                 mov     rdx, r15
.text:000000000000F55C                 mov     rsi, r13
.text:000000000000F55F                 call    update_cur_sifted_state
.text:000000000000F564                 test    eax, eax
.text:000000000000F566                 jnz     short loc_F5D5
.text:000000000000F568                 sub     [rsp+98h+n], 8
.text:000000000000F56E                 test    r15, r15
.text:000000000000F571                 jnz     loc_F374
.text:000000000000F577
.text:000000000000F577 loc_F577:                               ; CODE XREF: sift_states_backward+9E↑j
.text:000000000000F577                 xor     eax, eax
.text:000000000000F579                 jmp     short loc_F5D5
.text:000000000000F579 ; ---------------------------------------------------------------------------
.text:000000000000F57B                 align 20h
.text:000000000000F580
.text:000000000000F580 loc_F580:                               ; CODE XREF: sift_states_backward+21A↑j
.text:000000000000F580                 jnz     loc_F432
.text:000000000000F586
.text:000000000000F586 loc_F586:                               ; CODE XREF: sift_states_backward+241↑j
.text:000000000000F586                 mov     rsi, [r14]
.text:000000000000F589                 add     rsi, r9
.text:000000000000F58C                 jmp     loc_F3F0
.text:000000000000F58C ; ---------------------------------------------------------------------------
.text:000000000000F591                 align 8
.text:000000000000F598
.text:000000000000F598 loc_F598:                               ; CODE XREF: sift_states_backward+B2↑j
.text:000000000000F598                 mov     rax, [rsp+98h+var_98]
.text:000000000000F59C                 add     [rsp+98h+var_6C], 1
.text:000000000000F5A1                 mov     ecx, [rsp+98h+var_6C]
.text:000000000000F5A5                 cmp     [rax+0E0h], ecx
.text:000000000000F5AB                 jge     loc_F3A4
.text:000000000000F5B1
.text:000000000000F5B1 loc_F5B1:                               ; CODE XREF: sift_states_backward+CE↑j
.text:000000000000F5B1                 mov     rdx, [rsp+98h+n] ; n
.text:000000000000F5B6                 xor     esi, esi        ; c
.text:000000000000F5B8                 call    _memset
.text:000000000000F5BD                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000F5C2                 call    _free
.text:000000000000F5C7                 xor     eax, eax
.text:000000000000F5C9                 jmp     short loc_F5E5
.text:000000000000F5C9 ; ---------------------------------------------------------------------------
.text:000000000000F5CB                 align 10h
.text:000000000000F5D0
.text:000000000000F5D0 loc_F5D0:                               ; CODE XREF: sift_states_backward+1A6↑j
.text:000000000000F5D0                 mov     eax, 0Ch
.text:000000000000F5D5
.text:000000000000F5D5 loc_F5D5:                               ; CODE XREF: sift_states_backward+77↑j
.text:000000000000F5D5                                         ; sift_states_backward+296↑j ...
.text:000000000000F5D5                 mov     rdi, [rsp+98h+ptr] ; ptr
.text:000000000000F5DA                 mov     dword ptr [rsp+98h+var_98], eax
.text:000000000000F5DD                 call    _free
.text:000000000000F5E2                 mov     eax, dword ptr [rsp+98h+var_98]
.text:000000000000F5E5
.text:000000000000F5E5 loc_F5E5:                               ; CODE XREF: sift_states_backward+2F9↑j
.text:000000000000F5E5                                         ; sift_states_backward+339↓j
.text:000000000000F5E5                 mov     rdx, [rsp+98h+var_40]
.text:000000000000F5EA                 xor     rdx, fs:28h
.text:000000000000F5F3                 jnz     short loc_F60B
.text:000000000000F5F5                 add     rsp, 68h
.text:000000000000F5F9                 pop     rbx
.text:000000000000F5FA                 pop     rbp
.text:000000000000F5FB                 pop     r12
.text:000000000000F5FD                 pop     r13
.text:000000000000F5FF                 pop     r14
.text:000000000000F601                 pop     r15
.text:000000000000F603                 retn
.text:000000000000F604 ; ---------------------------------------------------------------------------
.text:000000000000F604
.text:000000000000F604 loc_F604:                               ; CODE XREF: sift_states_backward+54↑j
.text:000000000000F604                 mov     eax, 0Ch
.text:000000000000F609                 jmp     short loc_F5E5
.text:000000000000F60B ; ---------------------------------------------------------------------------
.text:000000000000F60B
.text:000000000000F60B loc_F60B:                               ; CODE XREF: sift_states_backward+323↑j
.text:000000000000F60B                 call    ___stack_chk_fail
.text:000000000000F60B ; } // starts at F2D0
.text:000000000000F60B sift_states_backward endp
.text:000000000000F60B
.text:000000000000F610
.text:000000000000F610 ; =============== S U B R O U T I N E =======================================
.text:000000000000F610
.text:000000000000F610
.text:000000000000F610 re_search_internal proc near            ; CODE XREF: re_search_stub+10A↓p
.text:000000000000F610                                         ; rpl_regexec+58↓p
.text:000000000000F610
.text:000000000000F610 var_268         = qword ptr -268h
.text:000000000000F610 var_260         = qword ptr -260h
.text:000000000000F610 var_258         = qword ptr -258h
.text:000000000000F610 var_250         = qword ptr -250h
.text:000000000000F610 var_248         = qword ptr -248h
.text:000000000000F610 var_240         = qword ptr -240h
.text:000000000000F610 var_238         = qword ptr -238h
.text:000000000000F610 var_230         = qword ptr -230h
.text:000000000000F610 var_228         = qword ptr -228h
.text:000000000000F610 var_220         = qword ptr -220h
.text:000000000000F610 var_218         = qword ptr -218h
.text:000000000000F610 var_210         = dword ptr -210h
.text:000000000000F610 var_20C         = dword ptr -20Ch
.text:000000000000F610 var_208         = qword ptr -208h
.text:000000000000F610 var_200         = qword ptr -200h
.text:000000000000F610 var_1F8         = qword ptr -1F8h
.text:000000000000F610 var_1F0         = qword ptr -1F0h
.text:000000000000F610 var_1E8         = qword ptr -1E8h
.text:000000000000F610 var_1E0         = qword ptr -1E0h
.text:000000000000F610 var_1D8         = qword ptr -1D8h
.text:000000000000F610 var_1D0         = qword ptr -1D0h
.text:000000000000F610 var_1C8         = qword ptr -1C8h
.text:000000000000F610 var_1C0         = dword ptr -1C0h
.text:000000000000F610 var_1BC         = dword ptr -1BCh
.text:000000000000F610 var_1B8         = qword ptr -1B8h
.text:000000000000F610 var_1B0         = qword ptr -1B0h
.text:000000000000F610 var_1A8         = qword ptr -1A8h
.text:000000000000F610 var_1A0         = dword ptr -1A0h
.text:000000000000F610 var_19A         = byte ptr -19Ah
.text:000000000000F610 var_199         = byte ptr -199h
.text:000000000000F610 var_198         = dword ptr -198h
.text:000000000000F610 var_194         = dword ptr -194h
.text:000000000000F610 var_190         = qword ptr -190h
.text:000000000000F610 var_188         = xmmword ptr -188h
.text:000000000000F610 var_178         = qword ptr -178h
.text:000000000000F610 var_170         = qword ptr -170h
.text:000000000000F610 var_168         = xmmword ptr -168h
.text:000000000000F610 ptr             = qword ptr -158h
.text:000000000000F610 var_148         = qword ptr -148h
.text:000000000000F610 var_140         = qword ptr -140h
.text:000000000000F610 var_138         = qword ptr -138h
.text:000000000000F610 var_130         = qword ptr -130h
.text:000000000000F610 var_120         = qword ptr -120h
.text:000000000000F610 var_118         = qword ptr -118h
.text:000000000000F610 var_110         = qword ptr -110h
.text:000000000000F610 var_108         = qword ptr -108h
.text:000000000000F610 var_100         = qword ptr -100h
.text:000000000000F610 var_F8          = qword ptr -0F8h
.text:000000000000F610 var_F0          = qword ptr -0F0h
.text:000000000000F610 var_E8          = qword ptr -0E8h
.text:000000000000F610 var_E0          = qword ptr -0E0h
.text:000000000000F610 var_D8          = dword ptr -0D8h
.text:000000000000F610 var_D0          = qword ptr -0D0h
.text:000000000000F610 var_C8          = qword ptr -0C8h
.text:000000000000F610 var_C0          = byte ptr -0C0h
.text:000000000000F610 var_BF          = byte ptr -0BFh
.text:000000000000F610 var_BE          = byte ptr -0BEh
.text:000000000000F610 var_BD          = byte ptr -0BDh
.text:000000000000F610 var_BC          = byte ptr -0BCh
.text:000000000000F610 var_BB          = byte ptr -0BBh
.text:000000000000F610 var_BA          = byte ptr -0BAh
.text:000000000000F610 var_B8          = dword ptr -0B8h
.text:000000000000F610 var_B0          = qword ptr -0B0h
.text:000000000000F610 var_A8          = dword ptr -0A8h
.text:000000000000F610 var_A0          = qword ptr -0A0h
.text:000000000000F610 var_98          = qword ptr -98h
.text:000000000000F610 var_90          = qword ptr -90h
.text:000000000000F610 var_88          = qword ptr -88h
.text:000000000000F610 var_80          = qword ptr -80h
.text:000000000000F610 var_78          = qword ptr -78h
.text:000000000000F610 var_70          = qword ptr -70h
.text:000000000000F610 var_68          = dword ptr -68h
.text:000000000000F610 var_58          = qword ptr -58h
.text:000000000000F610 var_50          = qword ptr -50h
.text:000000000000F610 var_40          = qword ptr -40h
.text:000000000000F610 arg_0           = qword ptr  8
.text:000000000000F610 arg_8           = qword ptr  10h
.text:000000000000F610 arg_10          = dword ptr  18h
.text:000000000000F610
.text:000000000000F610 ; __unwind {
.text:000000000000F610                 push    r15
.text:000000000000F612                 push    r14
.text:000000000000F614                 push    r13
.text:000000000000F616                 push    r12
.text:000000000000F618                 mov     r13, r9
.text:000000000000F61B                 push    rbp
.text:000000000000F61C                 push    rbx
.text:000000000000F61D                 mov     rbp, rcx
.text:000000000000F620                 mov     ecx, 20h ; ' '
.text:000000000000F625                 mov     r12, r8
.text:000000000000F628                 sub     rsp, 238h
.text:000000000000F62F                 mov     rbx, [rdi]
.text:000000000000F632                 mov     rax, [rsp+268h+arg_8]
.text:000000000000F63A                 mov     [rsp+268h+var_220], rdi
.text:000000000000F63F                 mov     [rsp+268h+var_1F0], rsi
.text:000000000000F644                 mov     rsi, rdi
.text:000000000000F647                 lea     rdi, [rsp+268h+var_148]
.text:000000000000F64F                 mov     [rsp+268h+var_1E0], rdx
.text:000000000000F657                 mov     [rsp+268h+var_230], rbx
.text:000000000000F65C                 mov     [rsp+268h+var_1B0], rax
.text:000000000000F664                 mov     [rsp+268h+var_268], rdi
.text:000000000000F668                 mov     rax, fs:28h
.text:000000000000F671                 mov     [rsp+268h+var_40], rax
.text:000000000000F679                 xor     eax, eax
.text:000000000000F67B                 rep stosq
.text:000000000000F67E                 mov     rdi, [rsi+20h]
.text:000000000000F682                 mov     [rsp+268h+var_B0], rbx
.text:000000000000F68A                 test    rdi, rdi
.text:000000000000F68D                 mov     [rsp+268h+var_200], rdi
.text:000000000000F692                 jz      short loc_F6B6
.text:000000000000F694                 movzx   edx, byte ptr [rsi+38h]
.text:000000000000F698                 test    dl, 8
.text:000000000000F69B                 jz      loc_FB30
.text:000000000000F6A1                 cmp     rbp, r8
.text:000000000000F6A4                 jz      loc_FB30
.text:000000000000F6AA                 and     edx, 1
.text:000000000000F6AD                 cmovz   rax, rdi
.text:000000000000F6B1                 mov     [rsp+268h+var_200], rax
.text:000000000000F6B6
.text:000000000000F6B6 loc_F6B6:                               ; CODE XREF: re_search_internal+82↑j
.text:000000000000F6B6                                         ; re_search_internal+529↓j
.text:000000000000F6B6                 mov     rax, [rsp+268h+var_220]
.text:000000000000F6BB                 mov     [rsp+268h+var_1D0], 0
.text:000000000000F6C7                 mov     rax, [rax+30h]
.text:000000000000F6CB                 cmp     rax, [rsp+268h+arg_0]
.text:000000000000F6D3                 jnb     short loc_F6F4
.text:000000000000F6D5                 mov     rcx, [rsp+268h+arg_0]
.text:000000000000F6DD                 lea     rdx, [rcx-1]
.text:000000000000F6E1                 sub     rdx, rax
.text:000000000000F6E4                 sub     [rsp+268h+arg_0], rdx
.text:000000000000F6EC                 mov     [rsp+268h+var_1D0], rdx
.text:000000000000F6F4
.text:000000000000F6F4 loc_F6F4:                               ; CODE XREF: re_search_internal+C3↑j
.text:000000000000F6F4                 mov     rsi, [rsp+268h+var_220]
.text:000000000000F6F9                 cmp     qword ptr [rsi+10h], 0
.text:000000000000F6FE                 jz      loc_10590
.text:000000000000F704                 mov     rdi, [rsp+268h+var_230]
.text:000000000000F709                 mov     rax, [rdi+48h]
.text:000000000000F70D                 test    rax, rax
.text:000000000000F710                 jz      loc_10590
.text:000000000000F716                 mov     rdx, [rdi+50h]
.text:000000000000F71A                 test    rdx, rdx
.text:000000000000F71D                 jz      loc_10590
.text:000000000000F723                 mov     rcx, [rdi+58h]
.text:000000000000F727                 test    rcx, rcx
.text:000000000000F72A                 jz      loc_10590
.text:000000000000F730                 cmp     qword ptr [rdi+60h], 0
.text:000000000000F735                 jz      loc_10590
.text:000000000000F73B                 cmp     qword ptr [rax+10h], 0
.text:000000000000F740                 jnz     short loc_F778
.text:000000000000F742                 cmp     qword ptr [rdx+10h], 0
.text:000000000000F747                 jnz     short loc_F778
.text:000000000000F749                 cmp     qword ptr [rcx+10h], 0
.text:000000000000F74E                 jz      short loc_F756
.text:000000000000F750                 cmp     byte ptr [rsi+38h], 0
.text:000000000000F754                 js      short loc_F778
.text:000000000000F756
.text:000000000000F756 loc_F756:                               ; CODE XREF: re_search_internal+13E↑j
.text:000000000000F756                 test    rbp, rbp
.text:000000000000F759                 jz      short loc_F76C
.text:000000000000F75B                 test    r12, r12
.text:000000000000F75E                 mov     [rsp+268h+var_20C], 1
.text:000000000000F766                 jnz     loc_10189
.text:000000000000F76C
.text:000000000000F76C loc_F76C:                               ; CODE XREF: re_search_internal+149↑j
.text:000000000000F76C                 xor     r12d, r12d
.text:000000000000F76F                 xor     ebp, ebp
.text:000000000000F771                 nop     dword ptr [rax+00000000h]
.text:000000000000F778
.text:000000000000F778 loc_F778:                               ; CODE XREF: re_search_internal+130↑j
.text:000000000000F778                                         ; re_search_internal+137↑j ...
.text:000000000000F778                 cmp     [rsp+268h+arg_0], 0
.text:000000000000F781                 mov     [rsp+268h+var_210], 1
.text:000000000000F789                 jz      loc_FB10
.text:000000000000F78F
.text:000000000000F78F loc_F78F:                               ; CODE XREF: re_search_internal+517↓j
.text:000000000000F78F                 mov     r11, [rsp+268h+var_230]
.text:000000000000F794                 mov     rax, [rsp+268h+var_220]
.text:000000000000F799                 mov     rdi, [rsp+268h+var_1E0]
.text:000000000000F7A1                 mov     rsi, [r11+10h]
.text:000000000000F7A5                 mov     rbx, [rax+28h]
.text:000000000000F7A9                 mov     edx, [r11+0B4h]
.text:000000000000F7B0                 mov     rax, [rax+18h]
.text:000000000000F7B4                 mov     [rsp+268h+var_F0], rdi
.text:000000000000F7BC                 mov     [rsp+268h+var_F8], rdi
.text:000000000000F7C4                 mov     [rsp+268h+var_260], rsi
.text:000000000000F7C9                 lea     rsi, [rsi+1]
.text:000000000000F7CD                 mov     [rsp+268h+var_1B8], rbx
.text:000000000000F7D5                 movsxd  rcx, edx
.text:000000000000F7D8                 shr     rax, 16h
.text:000000000000F7DC                 mov     [rsp+268h+var_D0], rbx
.text:000000000000F7E4                 and     eax, 1
.text:000000000000F7E7                 cmp     rsi, rcx
.text:000000000000F7EA                 mov     [rsp+268h+var_B8], edx
.text:000000000000F7F1                 cmovl   rsi, rcx
.text:000000000000F7F5                 lea     rcx, [rdi+1]
.text:000000000000F7F9                 mov     [rsp+268h+var_C0], al
.text:000000000000F800                 mov     [rsp+268h+var_E0], rdi
.text:000000000000F808                 mov     [rsp+268h+var_E8], rdi
.text:000000000000F810                 cmp     rsi, rcx
.text:000000000000F813                 mov     rdi, [rsp+268h+var_268]
.text:000000000000F817                 cmovg   rsi, rcx
.text:000000000000F81B                 test    rbx, rbx
.text:000000000000F81E                 mov     rcx, [rsp+268h+var_1F0]
.text:000000000000F823                 setnz   bl
.text:000000000000F826                 or      eax, ebx
.text:000000000000F828                 mov     [rsp+268h+var_BD], al
.text:000000000000F82F                 movzx   eax, byte ptr [r11+0B0h]
.text:000000000000F837                 mov     [rsp+268h+var_148], rcx
.text:000000000000F83F                 mov     edx, eax
.text:000000000000F841                 shr     al, 3
.text:000000000000F844                 shr     dl, 2
.text:000000000000F847                 and     eax, 1
.text:000000000000F84A                 and     edx, 1
.text:000000000000F84D                 mov     [rsp+268h+var_BE], al
.text:000000000000F854                 mov     [rsp+268h+var_BF], dl
.text:000000000000F85B                 call    re_string_realloc_buffers
.text:000000000000F860                 test    eax, eax
.text:000000000000F862                 mov     [rsp+268h+var_20C], eax
.text:000000000000F866                 jnz     loc_10160
.text:000000000000F86C                 mov     rdi, [rsp+268h+var_230]
.text:000000000000F871                 lea     rax, [rdi+0B8h]
.text:000000000000F878                 mov     [rsp+268h+var_C8], rax
.text:000000000000F880                 movzx   eax, byte ptr [rdi+0B0h]
.text:000000000000F887                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000000F88B                 shr     al, 4
.text:000000000000F88E                 and     eax, 1
.text:000000000000F891                 cmp     [rsp+268h+var_BD], 0
.text:000000000000F899                 mov     [rsp+268h+var_BA], al
.text:000000000000F8A0                 jnz     short loc_F8C5
.text:000000000000F8A2                 mov     rsi, [rsp+268h+var_230]
.text:000000000000F8A7                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000F8AC                 cmp     dword ptr [rsi+0B4h], 1
.text:000000000000F8B3                 mov     [rsp+268h+var_140], rax
.text:000000000000F8BB                 mov     rax, [rsp+268h+var_1E0]
.text:000000000000F8C3                 jle     short loc_F8C7
.text:000000000000F8C5
.text:000000000000F8C5 loc_F8C5:                               ; CODE XREF: re_search_internal+290↑j
.text:000000000000F8C5                 xor     eax, eax
.text:000000000000F8C7
.text:000000000000F8C7 loc_F8C7:                               ; CODE XREF: re_search_internal+2B3↑j
.text:000000000000F8C7                 mov     [rsp+268h+var_118], rax
.text:000000000000F8CF                 mov     [rsp+268h+var_110], rax
.text:000000000000F8D7                 mov     rax, [rsp+268h+var_220]
.text:000000000000F8DC                 mov     [rsp+268h+var_E0], r13
.text:000000000000F8E4                 mov     [rsp+268h+var_E8], r13
.text:000000000000F8EC                 movzx   eax, byte ptr [rax+38h]
.text:000000000000F8F0                 mov     byte ptr [rsp+268h+var_260], al
.text:000000000000F8F4                 shr     al, 7
.text:000000000000F8F7                 mov     [rsp+268h+var_BB], al
.text:000000000000F8FE                 mov     rax, [rsp+268h+var_230]
.text:000000000000F903                 mov     r14, [rax+98h]
.text:000000000000F90A                 mov     eax, [rsp+268h+arg_10]
.text:000000000000F911                 mov     [rsp+268h+var_A0], 0FFFFFFFFFFFFFFFFh
.text:000000000000F91D                 lea     r13, [r14+r14]
.text:000000000000F921                 mov     [rsp+268h+var_A8], eax
.text:000000000000F928                 test    r13, r13
.text:000000000000F92B                 jle     short loc_F97F
.text:000000000000F92D                 mov     rax, 666666666666666h
.text:000000000000F937                 cmp     r13, rax
.text:000000000000F93A                 jg      loc_10680
.text:000000000000F940                 lea     rdi, [r13+r14*8+0]
.text:000000000000F945                 shl     rdi, 3          ; size
.text:000000000000F949                 call    _malloc
.text:000000000000F94E                 mov     rdi, r14
.text:000000000000F951                 mov     r15, rax
.text:000000000000F954                 mov     [rsp+268h+var_70], rax
.text:000000000000F95C                 shl     rdi, 4          ; size
.text:000000000000F960                 call    _malloc
.text:000000000000F965                 test    rax, rax
.text:000000000000F968                 mov     [rsp+268h+var_50], rax
.text:000000000000F970                 jz      loc_10680
.text:000000000000F976                 test    r15, r15
.text:000000000000F979                 jz      loc_10680
.text:000000000000F97F
.text:000000000000F97F loc_F97F:                               ; CODE XREF: re_search_internal+31B↑j
.text:000000000000F97F                 cmp     [rsp+268h+arg_0], 1
.text:000000000000F988                 mov     [rsp+268h+var_78], r13
.text:000000000000F990                 mov     [rsp+268h+var_68], 1
.text:000000000000F99B                 mov     [rsp+268h+var_58], r13
.text:000000000000F9A3                 jbe     loc_10AC8
.text:000000000000F9A9
.text:000000000000F9A9 loc_F9A9:                               ; CODE XREF: re_search_internal+14C4↓j
.text:000000000000F9A9                 mov     rax, [rsp+268h+var_108]
.text:000000000000F9B1                 mov     rdx, 1FFFFFFFFFFFFFFEh
.text:000000000000F9BB                 cmp     rax, rdx
.text:000000000000F9BE                 ja      loc_10680
.text:000000000000F9C4                 lea     rdi, ds:8[rax*8] ; size
.text:000000000000F9CC                 call    _malloc
.text:000000000000F9D1                 test    rax, rax
.text:000000000000F9D4                 mov     rdi, rax
.text:000000000000F9D7                 mov     [rsp+268h+var_90], rax
.text:000000000000F9DF                 jz      loc_106D0
.text:000000000000F9E5
.text:000000000000F9E5 loc_F9E5:                               ; CODE XREF: re_search_internal+14D6↓j
.text:000000000000F9E5                 mov     eax, [rsp+268h+arg_10]
.text:000000000000F9EC                 mov     [rsp+268h+var_190], rbp
.text:000000000000F9F4                 and     eax, 1
.text:000000000000F9F7                 cmp     eax, 1
.text:000000000000F9FA                 sbb     eax, eax
.text:000000000000F9FC                 and     eax, 2
.text:000000000000F9FF                 add     eax, 4
.text:000000000000FA02                 mov     [rsp+268h+var_D8], eax
.text:000000000000FA09                 xor     eax, eax
.text:000000000000FA0B                 cmp     rbp, r12
.text:000000000000FA0E                 setle   al
.text:000000000000FA11                 lea     eax, [rax+rax-1]
.text:000000000000FA15                 mov     [rsp+268h+var_1BC], eax
.text:000000000000FA1C                 mov     rax, r12
.text:000000000000FA1F                 cmovle  rax, rbp
.text:000000000000FA23                 mov     [rsp+268h+var_1D8], rax
.text:000000000000FA2B                 mov     rax, r12
.text:000000000000FA2E                 cmovge  rax, rbp
.text:000000000000FA32                 cmp     [rsp+268h+var_200], 0
.text:000000000000FA38                 mov     [rsp+268h+var_1F8], rax
.text:000000000000FA3D                 mov     rax, [rsp+268h+var_230]
.text:000000000000FA42                 mov     esi, [rax+0B4h]
.text:000000000000FA48                 mov     eax, 8
.text:000000000000FA4D                 mov     [rsp+268h+var_1A0], esi
.text:000000000000FA54                 jz      short loc_FA8F
.text:000000000000FA56                 cmp     esi, 1
.text:000000000000FA59                 mov     ecx, 4
.text:000000000000FA5E                 jz      short loc_FA7E
.text:000000000000FA60                 mov     rax, [rsp+268h+var_220]
.text:000000000000FA65                 test    byte ptr [rax+1Ah], 40h
.text:000000000000FA69                 jnz     loc_107EE
.text:000000000000FA6F                 cmp     [rsp+268h+var_1B8], 0
.text:000000000000FA78                 jnz     loc_107EE
.text:000000000000FA7E
.text:000000000000FA7E loc_FA7E:                               ; CODE XREF: re_search_internal+44E↑j
.text:000000000000FA7E                                         ; re_search_internal+11E0↓j
.text:000000000000FA7E                 xor     edx, edx
.text:000000000000FA80                 cmp     rbp, r12
.text:000000000000FA83                 movzx   eax, bl
.text:000000000000FA86                 setle   dl
.text:000000000000FA89                 or      eax, ecx
.text:000000000000FA8B                 add     edx, edx
.text:000000000000FA8D                 or      eax, edx
.text:000000000000FA8F
.text:000000000000FA8F loc_FA8F:                               ; CODE XREF: re_search_internal+444↑j
.text:000000000000FA8F                 cmp     rbp, [rsp+268h+var_1F8]
.text:000000000000FA94                 setnle  cl
.text:000000000000FA97                 cmp     rbp, [rsp+268h+var_1D8]
.text:000000000000FA9F                 setl    dl
.text:000000000000FAA2                 or      cl, dl
.text:000000000000FAA4                 jnz     loc_10579
.text:000000000000FAAA                 lea     rcx, [rsp+268h+var_190]
.text:000000000000FAB2                 cmp     rbp, r12
.text:000000000000FAB5                 mov     edx, 0
.text:000000000000FABA                 cmovle  rdx, rcx
.text:000000000000FABE                 test    rdx, rdx
.text:000000000000FAC1                 mov     [rsp+268h+var_1A8], rdx
.text:000000000000FAC9                 setnz   [rsp+268h+var_199]
.text:000000000000FAD1                 sub     eax, 4
.text:000000000000FAD4                 mov     [rsp+268h+var_1C0], eax
.text:000000000000FADB                 lea     rax, [rsp+268h+var_198]
.text:000000000000FAE3                 mov     [rsp+268h+var_240], rax
.text:000000000000FAE8
.text:000000000000FAE8 loc_FAE8:                               ; CODE XREF: re_search_internal+F63↓j
.text:000000000000FAE8                 mov     eax, [rsp+268h+var_1C0]
.text:000000000000FAEF                 cmp     eax, 4          ; switch 5 cases
.text:000000000000FAF2                 ja      def_FB06        ; jumptable 000000000000FB06 default case
.text:000000000000FAF8                 lea     rcx, jpt_FB06
.text:000000000000FAFF                 movsxd  rax, ds:(jpt_FB06 - 16BC0h)[rcx+rax*4]
.text:000000000000FB03                 add     rax, rcx
.text:000000000000FB06                 jmp     rax             ; switch jump
.text:000000000000FB06 ; ---------------------------------------------------------------------------
.text:000000000000FB08                 align 10h
.text:000000000000FB10
.text:000000000000FB10 loc_FB10:                               ; CODE XREF: re_search_internal+179↑j
.text:000000000000FB10                 mov     rax, [rsp+268h+var_230]
.text:000000000000FB15                 cmp     qword ptr [rax+98h], 0
.text:000000000000FB1D                 setnz   al
.text:000000000000FB20                 movzx   eax, al
.text:000000000000FB23                 mov     [rsp+268h+var_210], eax
.text:000000000000FB27                 jmp     loc_F78F
.text:000000000000FB27 ; ---------------------------------------------------------------------------
.text:000000000000FB2C                 align 10h
.text:000000000000FB30
.text:000000000000FB30 loc_FB30:                               ; CODE XREF: re_search_internal+8B↑j
.text:000000000000FB30                                         ; re_search_internal+94↑j
.text:000000000000FB30                 mov     [rsp+268h+var_200], 0
.text:000000000000FB39                 jmp     loc_F6B6
.text:000000000000FB3E ; ---------------------------------------------------------------------------
.text:000000000000FB3E
.text:000000000000FB3E loc_FB3E:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000FB3E                                         ; DATA XREF: .rodata:jpt_FB06↓o
.text:000000000000FB3E                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 000000000000FB06 case 2
.text:000000000000FB43                 jle     short loc_FB9F
.text:000000000000FB45                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000FB4A                 mov     rdi, [rsp+268h+var_200]
.text:000000000000FB4F                 movzx   edx, byte ptr [rax+rbp]
.text:000000000000FB53                 lea     rax, [rbp+1]
.text:000000000000FB57                 cmp     byte ptr [rdi+rdx], 0
.text:000000000000FB5B                 jnz     loc_FBE8        ; jumptable 000000000000FB06 case 4
.text:000000000000FB61                 mov     rsi, [rsp+268h+var_200]
.text:000000000000FB66                 mov     rcx, [rsp+268h+var_1F8]
.text:000000000000FB6B                 mov     rdi, [rsp+268h+var_1F0]
.text:000000000000FB70                 jmp     short loc_FB8A
.text:000000000000FB70 ; ---------------------------------------------------------------------------
.text:000000000000FB72                 align 8
.text:000000000000FB78
.text:000000000000FB78 loc_FB78:                               ; CODE XREF: re_search_internal+580↓j
.text:000000000000FB78                 movzx   edx, byte ptr [rdi+rax]
.text:000000000000FB7C                 lea     rax, [rax+1]
.text:000000000000FB80                 cmp     byte ptr [rsi+rdx], 0
.text:000000000000FB84                 jnz     loc_10D21
.text:000000000000FB8A
.text:000000000000FB8A loc_FB8A:                               ; CODE XREF: re_search_internal+560↑j
.text:000000000000FB8A                 cmp     rcx, rax
.text:000000000000FB8D                 mov     rbp, rax
.text:000000000000FB90                 jnz     short loc_FB78
.text:000000000000FB92
.text:000000000000FB92 loc_FB92:                               ; CODE XREF: re_search_internal+ABF↓j
.text:000000000000FB92                 mov     rax, [rsp+268h+var_1F8]
.text:000000000000FB97                 mov     [rsp+268h+var_190], rax
.text:000000000000FB9F
.text:000000000000FB9F loc_FB9F:                               ; CODE XREF: re_search_internal+533↑j
.text:000000000000FB9F                                         ; re_search_internal+A57↓j
.text:000000000000FB9F                 cmp     [rsp+268h+var_1F8], rbp
.text:000000000000FBA4                 jnz     short loc_FBE8  ; jumptable 000000000000FB06 case 4
.text:000000000000FBA6                 xor     eax, eax
.text:000000000000FBA8                 mov     rsi, [rsp+268h+var_1F8]
.text:000000000000FBAD                 cmp     [rsp+268h+var_1E0], rsi
.text:000000000000FBB5                 jle     short loc_FBC0
.text:000000000000FBB7                 mov     rax, [rsp+268h+var_1F0]
.text:000000000000FBBC                 movzx   eax, byte ptr [rax+rsi]
.text:000000000000FBC0
.text:000000000000FBC0 loc_FBC0:                               ; CODE XREF: re_search_internal+5A5↑j
.text:000000000000FBC0                 mov     rsi, [rsp+268h+var_1B8]
.text:000000000000FBC8                 test    rsi, rsi
.text:000000000000FBCB                 jz      short loc_FBD1
.text:000000000000FBCD                 movzx   eax, byte ptr [rsi+rax]
.text:000000000000FBD1
.text:000000000000FBD1 loc_FBD1:                               ; CODE XREF: re_search_internal+5BB↑j
.text:000000000000FBD1                 mov     rdi, [rsp+268h+var_200]
.text:000000000000FBD6                 cmp     byte ptr [rdi+rax], 0
.text:000000000000FBDA                 jz      loc_10579
.text:000000000000FBE0                 mov     rbp, [rsp+268h+var_1F8]
.text:000000000000FBE5                 nop     dword ptr [rax]
.text:000000000000FBE8
.text:000000000000FBE8 loc_FBE8:                               ; CODE XREF: re_search_internal+4F6↑j
.text:000000000000FBE8                                         ; re_search_internal+54B↑j ...
.text:000000000000FBE8                 mov     edx, [rsp+268h+arg_10] ; jumptable 000000000000FB06 case 4
.text:000000000000FBEF                 mov     rdi, [rsp+268h+var_268]
.text:000000000000FBF3                 mov     rsi, rbp
.text:000000000000FBF6                 call    re_string_reconstruct
.text:000000000000FBFB                 test    eax, eax
.text:000000000000FBFD                 mov     [rsp+268h+var_20C], eax
.text:000000000000FC01                 jnz     loc_10160
.text:000000000000FC07                 cmp     [rsp+268h+var_1A0], 1
.text:000000000000FC0F                 jz      short loc_FC2D
.text:000000000000FC11                 cmp     [rsp+268h+var_118], 0
.text:000000000000FC1A                 jz      short loc_FC2D
.text:000000000000FC1C                 mov     rax, [rsp+268h+var_138]
.text:000000000000FC24                 cmp     dword ptr [rax], 0FFFFFFFFh
.text:000000000000FC27                 jz      loc_10551
.text:000000000000FC2D
.text:000000000000FC2D loc_FC2D:                               ; CODE XREF: re_search_internal+5FF↑j
.text:000000000000FC2D                                         ; re_search_internal+60A↑j
.text:000000000000FC2D                 mov     rbx, [rsp+268h+var_B0]
.text:000000000000FC35                 movzx   eax, byte ptr [rsp+268h+var_210]
.text:000000000000FC3A                 mov     [rsp+268h+var_68], 0
.text:000000000000FC45                 mov     [rsp+268h+var_80], 0
.text:000000000000FC51                 mov     [rsp+268h+var_88], 0
.text:000000000000FC5D                 mov     [rsp+268h+var_198], 0
.text:000000000000FC68                 mov     r14, [rbx+48h]
.text:000000000000FC6C                 and     eax, 1
.text:000000000000FC6F                 mov     [rsp+268h+var_19A], al
.text:000000000000FC76                 mov     rax, [rsp+268h+var_100]
.text:000000000000FC7E                 cmp     byte ptr [r14+68h], 0
.text:000000000000FC83                 mov     [rsp+268h+var_260], rax
.text:000000000000FC88                 js      loc_10600
.text:000000000000FC8E
.text:000000000000FC8E loc_FC8E:                               ; CODE XREF: re_search_internal+1013↓j
.text:000000000000FC8E                                         ; re_search_internal+1177↓j ...
.text:000000000000FC8E                 mov     rax, [rsp+268h+var_90]
.text:000000000000FC96                 test    rax, rax
.text:000000000000FC99                 jz      short loc_FCB2
.text:000000000000FC9B                 cmp     qword ptr [rbx+98h], 0
.text:000000000000FCA3                 mov     rdi, [rsp+268h+var_260]
.text:000000000000FCA8                 mov     [rax+rdi*8], r14
.text:000000000000FCAC                 jnz     loc_10B9B
.text:000000000000FCB2
.text:000000000000FCB2 loc_FCB2:                               ; CODE XREF: re_search_internal+689↑j
.text:000000000000FCB2                 movzx   eax, [rsp+268h+var_199]
.text:000000000000FCBA                 mov     byte ptr [rsp+268h+var_250], al
.text:000000000000FCBE                 movzx   eax, byte ptr [r14+68h]
.text:000000000000FCC3
.text:000000000000FCC3 loc_FCC3:                               ; CODE XREF: re_search_internal+15C1↓j
.text:000000000000FCC3                 test    al, 10h
.text:000000000000FCC5                 mov     [rsp+268h+var_248], 0FFFFFFFFFFFFFFFFh
.text:000000000000FCCE                 mov     [rsp+268h+var_238], 0
.text:000000000000FCD7                 jnz     loc_10B60
.text:000000000000FCDD
.text:000000000000FCDD loc_FCDD:                               ; CODE XREF: re_search_internal+1576↓j
.text:000000000000FCDD                                         ; re_search_internal+15E4↓j
.text:000000000000FCDD                 mov     rax, [rsp+268h+var_1A8]
.text:000000000000FCE5                 mov     r8, [rsp+268h+var_100]
.text:000000000000FCED                 mov     [rsp+268h+var_218], rax
.text:000000000000FCF2                 lea     rax, [rsp+268h+var_188]
.text:000000000000FCFA                 mov     [rsp+268h+var_208], rax
.text:000000000000FCFF                 lea     rax, [rsp+268h+var_194]
.text:000000000000FD07                 mov     [rsp+268h+var_1E8], rax
.text:000000000000FD0F                 jmp     short loc_FD6C
.text:000000000000FD0F ; ---------------------------------------------------------------------------
.text:000000000000FD11                 align 8
.text:000000000000FD18
.text:000000000000FD18 loc_FD18:                               ; CODE XREF: re_search_internal+7E7↓j
.text:000000000000FD18                                         ; re_search_internal+1513↓j ...
.text:000000000000FD18                 cmp     r14, r13
.text:000000000000FD1B                 mov     r8, [rsp+268h+var_100]
.text:000000000000FD23                 setz    al
.text:000000000000FD26                 and     byte ptr [rsp+268h+var_250], al
.text:000000000000FD2A                 movzx   eax, byte ptr [r13+68h]
.text:000000000000FD2F                 cmovz   rbx, [rsp+268h+var_260]
.text:000000000000FD35                 test    al, 10h
.text:000000000000FD37                 mov     [rsp+268h+var_260], rbx
.text:000000000000FD3C                 jz      short loc_FD69
.text:000000000000FD3E                 test    al, al
.text:000000000000FD40                 js      loc_10200
.text:000000000000FD46
.text:000000000000FD46 loc_FD46:                               ; CODE XREF: re_search_internal+C17↓j
.text:000000000000FD46                 mov     eax, [rsp+268h+var_210]
.text:000000000000FD4A                 mov     [rsp+268h+var_248], r8
.text:000000000000FD4F                 test    eax, eax
.text:000000000000FD51                 jz      loc_FE76
.text:000000000000FD57                 mov     [rsp+268h+var_238], 1
.text:000000000000FD60                 mov     [rsp+268h+var_218], 0
.text:000000000000FD69
.text:000000000000FD69 loc_FD69:                               ; CODE XREF: re_search_internal+72C↑j
.text:000000000000FD69                                         ; re_search_internal+C11↓j
.text:000000000000FD69                 mov     r14, r13
.text:000000000000FD6C
.text:000000000000FD6C loc_FD6C:                               ; CODE XREF: re_search_internal+6FF↑j
.text:000000000000FD6C                 cmp     [rsp+268h+var_E0], r8
.text:000000000000FD74                 jle     loc_FE64
.text:000000000000FD7A                 mov     rax, [rsp+268h+var_108]
.text:000000000000FD82                 lea     rbx, [r8+1]
.text:000000000000FD86                 cmp     rbx, rax
.text:000000000000FD89                 jge     loc_10230
.text:000000000000FD8F
.text:000000000000FD8F loc_FD8F:                               ; CODE XREF: re_search_internal+C28↓j
.text:000000000000FD8F                 mov     rax, [rsp+268h+var_118]
.text:000000000000FD97                 cmp     rbx, rax
.text:000000000000FD9A                 jge     loc_10520
.text:000000000000FDA0
.text:000000000000FDA0 loc_FDA0:                               ; CODE XREF: re_search_internal+F18↓j
.text:000000000000FDA0                 test    byte ptr [r14+68h], 20h
.text:000000000000FDA5                 jnz     loc_10270
.text:000000000000FDAB
.text:000000000000FDAB loc_FDAB:                               ; CODE XREF: re_search_internal+C56↓j
.text:000000000000FDAB                                         ; re_search_internal+FA6↓j
.text:000000000000FDAB                 lea     rax, [r8+1]
.text:000000000000FDAF                 mov     [rsp+268h+var_100], rax
.text:000000000000FDB7                 mov     rax, [rsp+268h+var_140]
.text:000000000000FDBF                 movzx   r13d, byte ptr [rax+r8]
.text:000000000000FDC4
.text:000000000000FDC4 loc_FDC4:                               ; CODE XREF: re_search_internal+1097↓j
.text:000000000000FDC4                 mov     rax, [r14+58h]
.text:000000000000FDC8                 test    rax, rax
.text:000000000000FDCB                 jz      loc_104E0
.text:000000000000FDD1                 mov     r13, [rax+r13*8]
.text:000000000000FDD5
.text:000000000000FDD5 loc_FDD5:                               ; CODE XREF: re_search_internal+F09↓j
.text:000000000000FDD5                                         ; re_search_internal+FB5↓j
.text:000000000000FDD5                 cmp     [rsp+268h+var_90], 0
.text:000000000000FDDE                 jz      short loc_FDF4
.text:000000000000FDE0
.text:000000000000FDE0 loc_FDE0:                               ; CODE XREF: re_search_internal+FE3↓j
.text:000000000000FDE0                 mov     rsi, [rsp+268h+var_268]
.text:000000000000FDE4                 mov     rdi, [rsp+268h+var_240]
.text:000000000000FDE9                 mov     rdx, r13
.text:000000000000FDEC                 call    merge_state_with_log
.text:000000000000FDF1                 mov     r13, rax
.text:000000000000FDF4
.text:000000000000FDF4 loc_FDF4:                               ; CODE XREF: re_search_internal+7CE↑j
.text:000000000000FDF4                 test    r13, r13
.text:000000000000FDF7                 jnz     loc_FD18
.text:000000000000FDFD                 mov     ecx, [rsp+268h+var_198]
.text:000000000000FE04                 mov     rdi, [rsp+268h+var_90]
.text:000000000000FE0C                 test    ecx, ecx
.text:000000000000FE0E                 jnz     loc_106D0
.text:000000000000FE14                 test    rdi, rdi
.text:000000000000FE17                 jz      short loc_FE64
.text:000000000000FE19                 movzx   eax, [rsp+268h+var_19A]
.text:000000000000FE21                 xor     eax, 1
.text:000000000000FE24                 test    byte ptr [rsp+268h+var_238], al
.text:000000000000FE28                 jnz     short loc_FE64
.text:000000000000FE2A
.text:000000000000FE2A loc_FE2A:                               ; CODE XREF: re_search_internal+BE8↓j
.text:000000000000FE2A                 mov     rsi, [rsp+268h+var_88]
.text:000000000000FE32                 mov     rax, [rsp+268h+var_100]
.text:000000000000FE3A                 xor     ecx, ecx
.text:000000000000FE3C                 jmp     short loc_FE53
.text:000000000000FE3C ; ---------------------------------------------------------------------------
.text:000000000000FE3E                 align 20h
.text:000000000000FE40
.text:000000000000FE40 loc_FE40:                               ; CODE XREF: re_search_internal+84A↓j
.text:000000000000FE40                 cmp     qword ptr [rdi+rdx*8], 0
.text:000000000000FE45                 mov     rax, rdx
.text:000000000000FE48                 mov     ecx, 1
.text:000000000000FE4D                 jnz     loc_101C0
.text:000000000000FE53
.text:000000000000FE53 loc_FE53:                               ; CODE XREF: re_search_internal+82C↑j
.text:000000000000FE53                 lea     rdx, [rax+1]
.text:000000000000FE57                 cmp     rsi, rdx
.text:000000000000FE5A                 jge     short loc_FE40
.text:000000000000FE5C                 test    cl, cl
.text:000000000000FE5E                 jnz     loc_10D2E
.text:000000000000FE64
.text:000000000000FE64 loc_FE64:                               ; CODE XREF: re_search_internal+764↑j
.text:000000000000FE64                                         ; re_search_internal+807↑j ...
.text:000000000000FE64                 mov     rax, [rsp+268h+var_218]
.text:000000000000FE69                 test    rax, rax
.text:000000000000FE6C                 jz      short loc_FE76
.text:000000000000FE6E                 mov     rdi, [rsp+268h+var_260]
.text:000000000000FE73                 add     [rax], rdi
.text:000000000000FE76
.text:000000000000FE76 loc_FE76:                               ; CODE XREF: re_search_internal+741↑j
.text:000000000000FE76                                         ; re_search_internal+85C↑j ...
.text:000000000000FE76                 mov     rax, [rsp+268h+var_248]
.text:000000000000FE7B                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:000000000000FE7F                 jz      loc_10540
.text:000000000000FE85                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:000000000000FE89                 jz      loc_10680
.text:000000000000FE8F                 mov     rax, [rsp+268h+var_248]
.text:000000000000FE94                 mov     [rsp+268h+var_A0], rax
.text:000000000000FE9C                 mov     rax, [rsp+268h+var_220]
.text:000000000000FEA1                 test    byte ptr [rax+38h], 10h
.text:000000000000FEA5                 jnz     loc_10660
.text:000000000000FEAB                 cmp     [rsp+268h+arg_0], 1
.text:000000000000FEB4                 jbe     loc_107AC
.text:000000000000FEBA                 mov     rcx, [rsp+268h+var_248]
.text:000000000000FEBF                 mov     rbx, [rsp+268h+var_90]
.text:000000000000FEC7                 mov     rdi, [rsp+268h+var_268]
.text:000000000000FECB                 mov     rax, [rbx+rcx*8]
.text:000000000000FECF                 mov     rsi, [rax+10h]
.text:000000000000FED3                 lea     rdx, [rax+18h]
.text:000000000000FED7                 call    check_halt_state_context_isra_20
.text:000000000000FEDC                 mov     r13, rax
.text:000000000000FEDF                 mov     [rsp+268h+var_98], rax
.text:000000000000FEE7                 mov     rax, [rsp+268h+var_230]
.text:000000000000FEEC                 test    byte ptr [rax+0B0h], 1
.text:000000000000FEF3                 jnz     short loc_FF10
.text:000000000000FEF5                 mov     rax, [rsp+268h+var_230]
.text:000000000000FEFA                 cmp     qword ptr [rax+98h], 0
.text:000000000000FF02                 jz      loc_1089C
.text:000000000000FF08
.text:000000000000FF08 loc_FF08:                               ; CODE XREF: re_search_internal+11D9↓j
.text:000000000000FF08                 mov     r13, [rsp+268h+var_98]
.text:000000000000FF10
.text:000000000000FF10 loc_FF10:                               ; CODE XREF: re_search_internal+8E3↑j
.text:000000000000FF10                 mov     rsi, 1FFFFFFFFFFFFFFEh
.text:000000000000FF1A                 cmp     [rsp+268h+var_248], rsi
.text:000000000000FF1F                 mov     r15, [rsp+268h+var_B0]
.text:000000000000FF27                 ja      loc_10B8B
.text:000000000000FF2D                 mov     rax, [rsp+268h+var_248]
.text:000000000000FF32                 add     rax, 1
.text:000000000000FF36                 lea     rbx, ds:0[rax*8]
.text:000000000000FF3E                 mov     [rsp+268h+var_260], rax
.text:000000000000FF43                 mov     rdi, rbx        ; size
.text:000000000000FF46                 call    _malloc
.text:000000000000FF4B                 test    rax, rax
.text:000000000000FF4E                 mov     r12, rax
.text:000000000000FF51                 jz      loc_10680
.text:000000000000FF57                 cmp     qword ptr [r15+98h], 0
.text:000000000000FF5F                 jz      loc_107F5
.text:000000000000FF65                 mov     rdi, rbx        ; size
.text:000000000000FF68                 call    _malloc
.text:000000000000FF6D                 test    rax, rax
.text:000000000000FF70                 mov     rbp, rax
.text:000000000000FF73                 jz      loc_10678
.text:000000000000FF79                 mov     r14, [rsp+268h+var_248]
.text:000000000000FF7E                 lea     rbx, [rsp+268h+var_188]
.text:000000000000FF86                 mov     [rsp+268h+var_258], r15
.text:000000000000FF8B                 mov     [rsp+268h+var_250], rax
.text:000000000000FF90
.text:000000000000FF90 loc_FF90:                               ; CODE XREF: re_search_internal+A4D↓j
.text:000000000000FF90                 mov     rax, [rsp+268h+var_260]
.text:000000000000FF95                 xor     esi, esi        ; c
.text:000000000000FF97                 mov     rdi, rbp        ; s
.text:000000000000FF9A                 lea     rdx, ds:0[rax*8] ; n
.text:000000000000FFA2                 call    _memset
.text:000000000000FFA7                 pxor    xmm0, xmm0
.text:000000000000FFAB                 mov     qword ptr [rsp+268h+var_188], r12
.text:000000000000FFB3                 mov     qword ptr [rsp+268h+var_188+8], rbp
.text:000000000000FFBB                 mov     [rsp+268h+var_178], r13
.text:000000000000FFC3                 mov     rsi, rbx
.text:000000000000FFC6                 mov     [rsp+268h+var_170], r14
.text:000000000000FFCE                 mov     rdi, [rsp+268h+var_268]
.text:000000000000FFD2                 movaps  xmmword ptr [rbx+20h], xmm0
.text:000000000000FFD6                 mov     qword ptr [rbx+30h], 0
.text:000000000000FFDE                 call    sift_states_backward
.text:000000000000FFE3                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:000000000000FFEB                 mov     r15d, eax
.text:000000000000FFEE                 call    _free
.text:000000000000FFF3                 test    r15d, r15d
.text:000000000000FFF6                 jnz     loc_10C14
.text:000000000000FFFC                 cmp     qword ptr [r12], 0
.text:0000000000010001                 jnz     loc_10C73
.text:0000000000010007                 cmp     qword ptr [rbp+0], 0
.text:000000000001000C                 jnz     loc_10C73
.text:0000000000010012                 mov     rdx, [rsp+268h+var_90]
.text:000000000001001A                 nop     word ptr [rax+rax+00h]
.text:0000000000010020
.text:0000000000010020 loc_10020:                              ; CODE XREF: re_search_internal+A25↓j
.text:0000000000010020                                         ; re_search_internal+A2B↓j
.text:0000000000010020                 sub     r14, 1
.text:0000000000010024                 cmp     r14, 0FFFFFFFFFFFFFFFFh
.text:0000000000010028                 jz      loc_10AEB
.text:000000000001002E                 mov     rax, [rdx+r14*8]
.text:0000000000010032                 test    rax, rax
.text:0000000000010035                 jz      short loc_10020
.text:0000000000010037                 test    byte ptr [rax+68h], 10h
.text:000000000001003B                 jz      short loc_10020
.text:000000000001003D                 mov     rsi, [rax+10h]
.text:0000000000010041                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010045                 lea     rdx, [rax+18h]
.text:0000000000010049                 mov     rcx, r14
.text:000000000001004C                 call    check_halt_state_context_isra_20
.text:0000000000010051                 mov     r13, rax
.text:0000000000010054                 lea     rax, [r14+1]
.text:0000000000010058                 mov     [rsp+268h+var_260], rax
.text:000000000001005D                 jmp     loc_FF90
.text:0000000000010062 ; ---------------------------------------------------------------------------
.text:0000000000010062
.text:0000000000010062 loc_10062:                              ; CODE XREF: re_search_internal+4F6↑j
.text:0000000000010062                                         ; DATA XREF: .rodata:jpt_FB06↓o
.text:0000000000010062                 cmp     [rsp+268h+var_1F8], rbp ; jumptable 000000000000FB06 case 3
.text:0000000000010067                 jle     loc_FB9F
.text:000000000001006D                 mov     rax, [rsp+268h+var_1F0]
.text:0000000000010072                 mov     rdi, [rsp+268h+var_1B8]
.text:000000000001007A                 mov     rsi, [rsp+268h+var_200]
.text:000000000001007F                 movzx   eax, byte ptr [rax+rbp]
.text:0000000000010083                 movzx   edx, byte ptr [rdi+rax]
.text:0000000000010087                 lea     rax, [rbp+1]
.text:000000000001008B                 cmp     byte ptr [rsi+rdx], 0
.text:000000000001008F                 jnz     loc_FBE8        ; jumptable 000000000000FB06 case 4
.text:0000000000010095                 mov     rsi, [rsp+268h+var_200]
.text:000000000001009A                 mov     rdi, [rsp+268h+var_1B8]
.text:00000000000100A2                 mov     rcx, [rsp+268h+var_1F8]
.text:00000000000100A7                 mov     r8, [rsp+268h+var_1F0]
.text:00000000000100AC                 jmp     short loc_100C7
.text:00000000000100AC ; ---------------------------------------------------------------------------
.text:00000000000100AE                 align 10h
.text:00000000000100B0
.text:00000000000100B0 loc_100B0:                              ; CODE XREF: re_search_internal+ABD↓j
.text:00000000000100B0                 movzx   eax, byte ptr [r8+rax]
.text:00000000000100B5                 movzx   edx, byte ptr [rdi+rax]
.text:00000000000100B9                 lea     rax, [rbp+1]
.text:00000000000100BD                 cmp     byte ptr [rsi+rdx], 0
.text:00000000000100C1                 jnz     loc_10D21
.text:00000000000100C7
.text:00000000000100C7 loc_100C7:                              ; CODE XREF: re_search_internal+A9C↑j
.text:00000000000100C7                 cmp     rcx, rax
.text:00000000000100CA                 mov     rbp, rax
.text:00000000000100CD                 jnz     short loc_100B0
.text:00000000000100CF                 jmp     loc_FB92
.text:00000000000100D4 ; ---------------------------------------------------------------------------
.text:00000000000100D4
.text:00000000000100D4 loc_100D4:                              ; CODE XREF: re_search_internal+4F6↑j
.text:00000000000100D4                                         ; DATA XREF: .rodata:jpt_FB06↓o
.text:00000000000100D4                 cmp     [rsp+268h+var_1D8], rbp ; jumptable 000000000000FB06 cases 0,1
.text:00000000000100DC                 jg      loc_10579
.text:00000000000100E2                 xor     ecx, ecx
.text:00000000000100E4                 mov     rax, rbp
.text:00000000000100E7                 mov     rdi, [rsp+268h+var_200]
.text:00000000000100EC                 mov     rsi, [rsp+268h+var_1B8]
.text:00000000000100F4                 mov     r9, [rsp+268h+var_1D8]
.text:00000000000100FC                 mov     r10, [rsp+268h+var_1F0]
.text:0000000000010101                 mov     r8, [rsp+268h+var_1E0]
.text:0000000000010109                 jmp     short loc_10122
.text:0000000000010109 ; ---------------------------------------------------------------------------
.text:000000000001010B                 align 10h
.text:0000000000010110
.text:0000000000010110 loc_10110:                              ; CODE XREF: re_search_internal+B2B↓j
.text:0000000000010110                 sub     rax, 1
.text:0000000000010114                 mov     ecx, 1
.text:0000000000010119                 cmp     rax, r9
.text:000000000001011C                 jl      loc_10B00
.text:0000000000010122
.text:0000000000010122 loc_10122:                              ; CODE XREF: re_search_internal+AF9↑j
.text:0000000000010122                 xor     edx, edx
.text:0000000000010124                 cmp     r8, rax
.text:0000000000010127                 jle     short loc_1012E
.text:0000000000010129                 movzx   edx, byte ptr [r10+rax]
.text:000000000001012E
.text:000000000001012E loc_1012E:                              ; CODE XREF: re_search_internal+B17↑j
.text:000000000001012E                 test    rsi, rsi
.text:0000000000010131                 jz      short loc_10137
.text:0000000000010133                 movzx   edx, byte ptr [rsi+rdx]
.text:0000000000010137
.text:0000000000010137 loc_10137:                              ; CODE XREF: re_search_internal+B21↑j
.text:0000000000010137                 cmp     byte ptr [rdi+rdx], 0
.text:000000000001013B                 jz      short loc_10110
.text:000000000001013D                 test    cl, cl
.text:000000000001013F                 jz      loc_FBE8        ; jumptable 000000000000FB06 case 4
.text:0000000000010145                 mov     [rsp+268h+var_190], rax
.text:000000000001014D                 mov     rbp, rax
.text:0000000000010150                 jmp     loc_FBE8        ; jumptable 000000000000FB06 case 4
.text:0000000000010150 ; ---------------------------------------------------------------------------
.text:0000000000010155                 align 8
.text:0000000000010158
.text:0000000000010158 loc_10158:                              ; CODE XREF: re_search_internal+1162↓j
.text:0000000000010158                 mov     [rsp+268h+var_20C], eax
.text:000000000001015C                 nop     dword ptr [rax+00h]
.text:0000000000010160
.text:0000000000010160 loc_10160:                              ; CODE XREF: re_search_internal+256↑j
.text:0000000000010160                                         ; re_search_internal+5F1↑j ...
.text:0000000000010160                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:0000000000010168
.text:0000000000010168 loc_10168:                              ; CODE XREF: re_search_internal+F79↓j
.text:0000000000010168                                         ; re_search_internal+1080↓j ...
.text:0000000000010168                 call    _free
.text:000000000001016D                 mov     rax, [rsp+268h+var_230]
.text:0000000000010172                 cmp     qword ptr [rax+98h], 0
.text:000000000001017A                 jnz     loc_10AA0
.text:0000000000010180
.text:0000000000010180 loc_10180:                              ; CODE XREF: re_search_internal+14B3↓j
.text:0000000000010180                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010184                 call    re_string_destruct
.text:0000000000010189
.text:0000000000010189 loc_10189:                              ; CODE XREF: re_search_internal+156↑j
.text:0000000000010189                                         ; re_search_internal+F88↓j
.text:0000000000010189                 mov     rsi, [rsp+268h+var_40]
.text:0000000000010191                 xor     rsi, fs:28h
.text:000000000001019A                 mov     eax, [rsp+268h+var_20C]
.text:000000000001019E                 jnz     loc_10D3B
.text:00000000000101A4                 add     rsp, 238h
.text:00000000000101AB                 pop     rbx
.text:00000000000101AC                 pop     rbp
.text:00000000000101AD                 pop     r12
.text:00000000000101AF                 pop     r13
.text:00000000000101B1                 pop     r14
.text:00000000000101B3                 pop     r15
.text:00000000000101B5                 retn
.text:00000000000101B5 ; ---------------------------------------------------------------------------
.text:00000000000101B6                 align 20h
.text:00000000000101C0
.text:00000000000101C0 loc_101C0:                              ; CODE XREF: re_search_internal+83D↑j
.text:00000000000101C0                 mov     rsi, [rsp+268h+var_268]
.text:00000000000101C4                 mov     rdi, [rsp+268h+var_240]
.text:00000000000101C9                 mov     [rsp+268h+var_100], rdx
.text:00000000000101D1                 xor     edx, edx
.text:00000000000101D3                 call    merge_state_with_log
.text:00000000000101D8                 mov     edx, [rsp+268h+var_198]
.text:00000000000101DF                 test    edx, edx
.text:00000000000101E1                 jnz     loc_10B1D
.text:00000000000101E7                 test    rax, rax
.text:00000000000101EA                 jnz     loc_10B30
.text:00000000000101F0                 mov     rdi, [rsp+268h+var_90]
.text:00000000000101F8                 jmp     loc_FE2A
.text:00000000000101F8 ; ---------------------------------------------------------------------------
.text:00000000000101FD                 align 20h
.text:0000000000010200
.text:0000000000010200 loc_10200:                              ; CODE XREF: re_search_internal+730↑j
.text:0000000000010200                 mov     rsi, [r13+10h]
.text:0000000000010204                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010208                 lea     rdx, [r13+18h]
.text:000000000001020C                 mov     rcx, r8
.text:000000000001020F                 mov     [rsp+268h+var_258], r8
.text:0000000000010214                 call    check_halt_state_context_isra_20
.text:0000000000010219                 test    rax, rax
.text:000000000001021C                 mov     r8, [rsp+268h+var_258]
.text:0000000000010221                 jz      loc_FD69
.text:0000000000010227                 jmp     loc_FD46
.text:0000000000010227 ; ---------------------------------------------------------------------------
.text:000000000001022C                 align 10h
.text:0000000000010230
.text:0000000000010230 loc_10230:                              ; CODE XREF: re_search_internal+779↑j
.text:0000000000010230                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000010238                 jge     loc_FD8F
.text:000000000001023E
.text:000000000001023E loc_1023E:                              ; CODE XREF: re_search_internal+F1E↓j
.text:000000000001023E                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010242                 lea     esi, [rbx+1]
.text:0000000000010245                 call    extend_buffers
.text:000000000001024A                 test    eax, eax
.text:000000000001024C                 mov     [rsp+268h+var_198], eax
.text:0000000000010253                 jnz     loc_10B38
.text:0000000000010259                 test    byte ptr [r14+68h], 20h
.text:000000000001025E                 mov     r8, [rsp+268h+var_100]
.text:0000000000010266                 jz      loc_FDAB
.text:000000000001026C                 nop     dword ptr [rax+00h]
.text:0000000000010270
.text:0000000000010270 loc_10270:                              ; CODE XREF: re_search_internal+795↑j
.text:0000000000010270                 cmp     qword ptr [r14+10h], 0
.text:0000000000010275                 mov     r13, [rsp+268h+var_B0]
.text:000000000001027D                 jle     loc_105AB
.text:0000000000010283                 lea     rax, [r13+0D8h]
.text:000000000001028A                 xor     r12d, r12d
.text:000000000001028D                 mov     [rsp+268h+var_1C8], rbx
.text:0000000000010295                 mov     rbx, r12
.text:0000000000010298                 mov     r12, r8
.text:000000000001029B                 mov     [rsp+268h+var_228], rax
.text:00000000000102A0                 jmp     loc_103F8
.text:00000000000102A0 ; ---------------------------------------------------------------------------
.text:00000000000102A5                 align 8
.text:00000000000102A8
.text:00000000000102A8 loc_102A8:                              ; CODE XREF: re_search_internal+E3B↓j
.text:00000000000102A8                 test    al, 1
.text:00000000000102AA                 jz      loc_103EA
.text:00000000000102B0                 and     ecx, 8
.text:00000000000102B3                 jnz     loc_103EA
.text:00000000000102B9
.text:00000000000102B9 loc_102B9:                              ; CODE XREF: re_search_internal+E44↓j
.text:00000000000102B9                                         ; re_search_internal+E4C↓j
.text:00000000000102B9                 test    dl, 20h
.text:00000000000102BC                 jz      short loc_102C6
.text:00000000000102BE                 test    al, 2
.text:00000000000102C0                 jz      loc_103EA
.text:00000000000102C6
.text:00000000000102C6 loc_102C6:                              ; CODE XREF: re_search_internal+CAC↑j
.text:00000000000102C6                 and     edx, 80h
.text:00000000000102CC                 jz      short loc_102E0
.text:00000000000102CE                 test    al, 8
.text:00000000000102D0                 jz      loc_103EA
.text:00000000000102D6                 db      2Eh
.text:00000000000102D6                 nop     word ptr [rax+rax+00000000h]
.text:00000000000102E0
.text:00000000000102E0 loc_102E0:                              ; CODE XREF: re_search_internal+CBC↑j
.text:00000000000102E0                                         ; re_search_internal+E11↓j
.text:00000000000102E0                 mov     rcx, [rsp+268h+var_268]
.text:00000000000102E4                 mov     rsi, [rsp+268h+var_228]
.text:00000000000102E9                 mov     r8, r12
.text:00000000000102EC                 mov     rdx, r15
.text:00000000000102EF                 mov     rdi, rbp
.text:00000000000102F2                 call    check_node_accept_bytes_isra_31
.text:00000000000102F7                 test    eax, eax
.text:00000000000102F9                 jz      loc_103E2
.text:00000000000102FF                 movsxd  rbp, eax
.text:0000000000010302                 add     rbp, [rsp+268h+var_100]
.text:000000000001030A                 cmp     [rsp+268h+var_68], eax
.text:0000000000010311                 cmovge  eax, [rsp+268h+var_68]
.text:0000000000010319                 mov     rdi, [rsp+268h+var_268]
.text:000000000001031D                 mov     rsi, rbp
.text:0000000000010320                 mov     [rsp+268h+var_68], eax
.text:0000000000010327                 call    clean_state_log_if_needed
.text:000000000001032C                 test    eax, eax
.text:000000000001032E                 mov     [rsp+268h+var_194], eax
.text:0000000000010335                 jnz     loc_105D0
.text:000000000001033B                 mov     rax, [r13+18h]
.text:000000000001033F                 lea     r12, ds:0[rbp*8]
.text:0000000000010347                 mov     rax, [rax+r15*8]
.text:000000000001034B                 mov     r15, [rsp+268h+var_90]
.text:0000000000010353                 lea     rdx, [rax+rax*2]
.text:0000000000010357                 mov     rax, [r13+30h]
.text:000000000001035B                 add     r15, r12
.text:000000000001035E                 lea     rdx, [rax+rdx*8]
.text:0000000000010362                 mov     rax, [r15]
.text:0000000000010365                 test    rax, rax
.text:0000000000010368                 jz      loc_10468
.text:000000000001036E                 mov     rsi, [rax+50h]
.text:0000000000010372                 mov     rdi, [rsp+268h+var_208]
.text:0000000000010377                 call    re_node_set_init_union
.text:000000000001037C                 test    eax, eax
.text:000000000001037E                 mov     [rsp+268h+var_194], eax
.text:0000000000010385                 jnz     loc_105D0
.text:000000000001038B                 mov     edx, [rsp+268h+var_A8]
.text:0000000000010392                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010396                 lea     rsi, [rbp-1]
.text:000000000001039A                 call    re_string_context_at
.text:000000000001039F                 mov     rdx, [rsp+268h+var_208]
.text:00000000000103A4                 mov     rdi, [rsp+268h+var_1E8]
.text:00000000000103AC                 mov     ecx, eax
.text:00000000000103AE                 add     r12, [rsp+268h+var_90]
.text:00000000000103B6                 mov     rsi, r13
.text:00000000000103B9                 call    re_acquire_state_context
.text:00000000000103BE                 mov     rdi, [rsp+268h+var_178] ; ptr
.text:00000000000103C6                 mov     [r12], rax
.text:00000000000103CA                 call    _free
.text:00000000000103CF                 mov     rdi, [rsp+268h+var_90]
.text:00000000000103D7                 cmp     qword ptr [rdi+rbp*8], 0
.text:00000000000103DC                 jz      loc_104C1
.text:00000000000103E2
.text:00000000000103E2 loc_103E2:                              ; CODE XREF: re_search_internal+CE9↑j
.text:00000000000103E2                                         ; re_search_internal+EAB↓j ...
.text:00000000000103E2                 mov     r12, [rsp+268h+var_100]
.text:00000000000103EA
.text:00000000000103EA loc_103EA:                              ; CODE XREF: re_search_internal+C9A↑j
.text:00000000000103EA                                         ; re_search_internal+CA3↑j ...
.text:00000000000103EA                 add     rbx, 1
.text:00000000000103EE                 cmp     rbx, [r14+10h]
.text:00000000000103F2                 jge     loc_105A0
.text:00000000000103F8
.text:00000000000103F8 loc_103F8:                              ; CODE XREF: re_search_internal+C90↑j
.text:00000000000103F8                 mov     rax, [r14+18h]
.text:00000000000103FC                 mov     rbp, [r13+0]
.text:0000000000010400                 mov     r15, [rax+rbx*8]
.text:0000000000010404                 mov     rax, r15
.text:0000000000010407                 shl     rax, 4
.text:000000000001040B                 add     rax, rbp
.text:000000000001040E                 test    byte ptr [rax+0Ah], 10h
.text:0000000000010412                 jz      short loc_103EA
.text:0000000000010414                 mov     ecx, [rax+8]
.text:0000000000010417                 test    ecx, 3FF00h
.text:000000000001041D                 mov     dword ptr [rsp+268h+var_258], ecx
.text:0000000000010421                 jz      loc_102E0
.text:0000000000010427                 mov     edx, [rsp+268h+var_A8]
.text:000000000001042E                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010432                 mov     rsi, r12
.text:0000000000010435                 call    re_string_context_at
.text:000000000001043A                 mov     ecx, dword ptr [rsp+268h+var_258]
.text:000000000001043E                 shr     ecx, 8
.text:0000000000010441                 mov     edx, ecx
.text:0000000000010443                 and     dx, 3FFh
.text:0000000000010448                 test    cl, 4
.text:000000000001044B                 jnz     loc_102A8
.text:0000000000010451                 and     ecx, 8
.text:0000000000010454                 jz      loc_102B9
.text:000000000001045A                 test    al, 1
.text:000000000001045C                 jz      loc_102B9
.text:0000000000010462                 jmp     short loc_103EA
.text:0000000000010462 ; ---------------------------------------------------------------------------
.text:0000000000010464                 align 8
.text:0000000000010468
.text:0000000000010468 loc_10468:                              ; CODE XREF: re_search_internal+D58↑j
.text:0000000000010468                 movdqu  xmm0, xmmword ptr [rdx]
.text:000000000001046C                 lea     rsi, [rbp-1]
.text:0000000000010470                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010474                 movaps  [rsp+268h+var_188], xmm0
.text:000000000001047C                 mov     rax, [rdx+10h]
.text:0000000000010480                 mov     edx, [rsp+268h+var_A8]
.text:0000000000010487                 mov     [rsp+268h+var_178], rax
.text:000000000001048F                 call    re_string_context_at
.text:0000000000010494                 mov     rdi, [rsp+268h+var_1E8]
.text:000000000001049C                 mov     rdx, [rsp+268h+var_208]
.text:00000000000104A1                 mov     ecx, eax
.text:00000000000104A3                 mov     rsi, r13
.text:00000000000104A6                 call    re_acquire_state_context
.text:00000000000104AB                 mov     rdi, [rsp+268h+var_90]
.text:00000000000104B3                 mov     [r15], rax
.text:00000000000104B6                 cmp     qword ptr [rdi+rbp*8], 0
.text:00000000000104BB                 jnz     loc_103E2
.text:00000000000104C1
.text:00000000000104C1 loc_104C1:                              ; CODE XREF: re_search_internal+DCC↑j
.text:00000000000104C1                 mov     eax, [rsp+268h+var_194]
.text:00000000000104C8                 test    eax, eax
.text:00000000000104CA                 jz      loc_103E2
.text:00000000000104D0                 mov     rbx, [rsp+268h+var_1C8]
.text:00000000000104D8                 jmp     loc_105E0
.text:00000000000104D8 ; ---------------------------------------------------------------------------
.text:00000000000104DD                 align 20h
.text:00000000000104E0
.text:00000000000104E0 loc_104E0:                              ; CODE XREF: re_search_internal+7BB↑j
.text:00000000000104E0                 mov     rbp, [r14+60h]
.text:00000000000104E4                 test    rbp, rbp
.text:00000000000104E7                 jz      loc_10695
.text:00000000000104ED                 mov     rax, [rsp+268h+var_100]
.text:00000000000104F5                 mov     edx, [rsp+268h+var_A8]
.text:00000000000104FC                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010500                 lea     rsi, [rax-1]
.text:0000000000010504                 call    re_string_context_at
.text:0000000000010509                 test    al, 1
.text:000000000001050B                 jz      loc_105C0
.text:0000000000010511                 mov     r13, [rbp+r13*8+800h]
.text:0000000000010519                 jmp     loc_FDD5
.text:0000000000010519 ; ---------------------------------------------------------------------------
.text:000000000001051E                 align 20h
.text:0000000000010520
.text:0000000000010520 loc_10520:                              ; CODE XREF: re_search_internal+78A↑j
.text:0000000000010520                 cmp     rax, [rsp+268h+var_F0]
.text:0000000000010528                 jge     loc_FDA0
.text:000000000001052E                 jmp     loc_1023E
.text:0000000000010533 ; ---------------------------------------------------------------------------
.text:0000000000010533
.text:0000000000010533 loc_10533:                              ; CODE XREF: re_search_internal+125C↓j
.text:0000000000010533                 mov     rdi, r12        ; ptr
.text:0000000000010536                 call    _free
.text:000000000001053B                 nop     dword ptr [rax+rax+00h]
.text:0000000000010540
.text:0000000000010540 loc_10540:                              ; CODE XREF: re_search_internal+86F↑j
.text:0000000000010540                                         ; re_search_internal+14EB↓j ...
.text:0000000000010540                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010544                 call    match_ctx_clean
.text:0000000000010549                 mov     rbp, [rsp+268h+var_190]
.text:0000000000010551
.text:0000000000010551 loc_10551:                              ; CODE XREF: re_search_internal+617↑j
.text:0000000000010551                 movsxd  rax, [rsp+268h+var_1BC]
.text:0000000000010559                 add     rbp, rax
.text:000000000001055C                 cmp     rbp, [rsp+268h+var_1D8]
.text:0000000000010564                 mov     [rsp+268h+var_190], rbp
.text:000000000001056C                 jl      short loc_10579
.text:000000000001056E                 cmp     rbp, [rsp+268h+var_1F8]
.text:0000000000010573                 jle     loc_FAE8
.text:0000000000010579
.text:0000000000010579 loc_10579:                              ; CODE XREF: re_search_internal+494↑j
.text:0000000000010579                                         ; re_search_internal+5CA↑j ...
.text:0000000000010579                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010581                 mov     [rsp+268h+var_20C], 1
.text:0000000000010589                 jmp     loc_10168
.text:0000000000010589 ; ---------------------------------------------------------------------------
.text:000000000001058E                 align 10h
.text:0000000000010590
.text:0000000000010590 loc_10590:                              ; CODE XREF: re_search_internal+EE↑j
.text:0000000000010590                                         ; re_search_internal+100↑j ...
.text:0000000000010590                 mov     [rsp+268h+var_20C], 1
.text:0000000000010598                 jmp     loc_10189
.text:0000000000010598 ; ---------------------------------------------------------------------------
.text:000000000001059D                 align 20h
.text:00000000000105A0
.text:00000000000105A0 loc_105A0:                              ; CODE XREF: re_search_internal+DE2↑j
.text:00000000000105A0                 mov     rbx, [rsp+268h+var_1C8]
.text:00000000000105A8                 mov     r8, r12
.text:00000000000105AB
.text:00000000000105AB loc_105AB:                              ; CODE XREF: re_search_internal+C6D↑j
.text:00000000000105AB                 mov     [rsp+268h+var_198], 0
.text:00000000000105B6                 jmp     loc_FDAB
.text:00000000000105B6 ; ---------------------------------------------------------------------------
.text:00000000000105BB                 align 20h
.text:00000000000105C0
.text:00000000000105C0 loc_105C0:                              ; CODE XREF: re_search_internal+EFB↑j
.text:00000000000105C0                 mov     r13, [rbp+r13*8+0]
.text:00000000000105C5                 jmp     loc_FDD5
.text:00000000000105C5 ; ---------------------------------------------------------------------------
.text:00000000000105CA                 align 10h
.text:00000000000105D0
.text:00000000000105D0 loc_105D0:                              ; CODE XREF: re_search_internal+D25↑j
.text:00000000000105D0                                         ; re_search_internal+D75↑j
.text:00000000000105D0                 mov     rbx, [rsp+268h+var_1C8]
.text:00000000000105D8                 mov     rdi, [rsp+268h+var_90]
.text:00000000000105E0
.text:00000000000105E0 loc_105E0:                              ; CODE XREF: re_search_internal+EC8↑j
.text:00000000000105E0                 test    rdi, rdi
.text:00000000000105E3                 mov     [rsp+268h+var_198], eax
.text:00000000000105EA                 jz      loc_106D0
.text:00000000000105F0
.text:00000000000105F0 loc_105F0:                              ; CODE XREF: re_search_internal+10B3↓j
.text:00000000000105F0                 xor     r13d, r13d
.text:00000000000105F3                 jmp     loc_FDE0
.text:00000000000105F3 ; ---------------------------------------------------------------------------
.text:00000000000105F8                 align 20h
.text:0000000000010600
.text:0000000000010600 loc_10600:                              ; CODE XREF: re_search_internal+678↑j
.text:0000000000010600                 mov     edx, [rsp+268h+var_A8]
.text:0000000000010607                 mov     rdi, [rsp+268h+var_268]
.text:000000000001060B                 lea     rsi, [rax-1]
.text:000000000001060F                 call    re_string_context_at
.text:0000000000010614                 test    al, 1
.text:0000000000010616                 jz      loc_10785
.text:000000000001061C                 mov     r14, [rbx+50h]
.text:0000000000010620
.text:0000000000010620 loc_10620:                              ; CODE XREF: re_search_internal+1197↓j
.text:0000000000010620                                         ; re_search_internal+15F3↓j ...
.text:0000000000010620                 test    r14, r14
.text:0000000000010623                 jnz     loc_FC8E
.text:0000000000010629                 mov     eax, [rsp+268h+var_198]
.text:0000000000010630                 cmp     eax, 0Ch
.text:0000000000010633                 mov     [rsp+268h+var_20C], eax
.text:0000000000010637                 jz      loc_10160
.text:000000000001063D                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:0000000000010644                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:000000000001064B                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:0000000000010652                 mov     edx, 435h       ; line
.text:0000000000010657                 call    ___assert_fail
.text:0000000000010657 ; ---------------------------------------------------------------------------
.text:000000000001065C                 align 20h
.text:0000000000010660
.text:0000000000010660 loc_10660:                              ; CODE XREF: re_search_internal+895↑j
.text:0000000000010660                 mov     rax, [rsp+268h+var_230]
.text:0000000000010665                 cmp     qword ptr [rax+98h], 0
.text:000000000001066D                 jz      loc_1089C
.text:0000000000010673                 jmp     loc_107BF
.text:0000000000010678 ; ---------------------------------------------------------------------------
.text:0000000000010678
.text:0000000000010678 loc_10678:                              ; CODE XREF: re_search_internal+963↑j
.text:0000000000010678                 mov     rdi, r12        ; ptr
.text:000000000001067B                 call    _free
.text:0000000000010680
.text:0000000000010680 loc_10680:                              ; CODE XREF: re_search_internal+32A↑j
.text:0000000000010680                                         ; re_search_internal+360↑j ...
.text:0000000000010680                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010688                 mov     [rsp+268h+var_20C], 0Ch
.text:0000000000010690                 jmp     loc_10168
.text:0000000000010695 ; ---------------------------------------------------------------------------
.text:0000000000010695
.text:0000000000010695 loc_10695:                              ; CODE XREF: re_search_internal+ED7↑j
.text:0000000000010695                 mov     rdi, [rsp+268h+var_B0]
.text:000000000001069D                 mov     rsi, r14
.text:00000000000106A0                 call    build_trtable
.text:00000000000106A5                 test    al, al
.text:00000000000106A7                 jnz     loc_FDC4
.text:00000000000106AD                 mov     rdi, [rsp+268h+var_90]
.text:00000000000106B5                 mov     [rsp+268h+var_198], 0Ch
.text:00000000000106C0                 test    rdi, rdi
.text:00000000000106C3                 jnz     loc_105F0
.text:00000000000106C9                 nop     dword ptr [rax+00000000h]
.text:00000000000106D0
.text:00000000000106D0 loc_106D0:                              ; CODE XREF: re_search_internal+3CF↑j
.text:00000000000106D0                                         ; re_search_internal+7FE↑j ...
.text:00000000000106D0                 mov     [rsp+268h+var_20C], 0Ch
.text:00000000000106D8                 jmp     loc_10168
.text:00000000000106DD ; ---------------------------------------------------------------------------
.text:00000000000106DD
.text:00000000000106DD def_FB06:                               ; CODE XREF: re_search_internal+4E2↑j
.text:00000000000106DD                 mov     rbx, [rsp+268h+var_200] ; jumptable 000000000000FB06 default case
.text:00000000000106E2                 mov     r13d, [rsp+268h+var_1BC]
.text:00000000000106EA                 mov     r14, [rsp+268h+var_1D8]
.text:00000000000106F2                 mov     r15, [rsp+268h+var_1F8]
.text:00000000000106F7                 mov     r12, [rsp+268h+var_1E0]
.text:00000000000106FF                 jmp     short loc_10748
.text:00000000000106FF ; ---------------------------------------------------------------------------
.text:0000000000010701                 align 8
.text:0000000000010708
.text:0000000000010708 loc_10708:                              ; CODE XREF: re_search_internal+114B↓j
.text:0000000000010708                                         ; re_search_internal+1173↓j
.text:0000000000010708                 cmp     r12, rbp
.text:000000000001070B                 mov     rax, rbx
.text:000000000001070E                 jle     short loc_1071F
.text:0000000000010710                 mov     rax, [rsp+268h+var_140]
.text:0000000000010718                 movzx   eax, byte ptr [rax+rdx]
.text:000000000001071C                 add     rax, rbx
.text:000000000001071F
.text:000000000001071F loc_1071F:                              ; CODE XREF: re_search_internal+10FE↑j
.text:000000000001071F                 cmp     byte ptr [rax], 0
.text:0000000000010722                 jnz     loc_FBE8        ; jumptable 000000000000FB06 case 4
.text:0000000000010728                 movsxd  rax, r13d
.text:000000000001072B                 add     rbp, rax
.text:000000000001072E                 cmp     rbp, r14
.text:0000000000010731                 mov     [rsp+268h+var_190], rbp
.text:0000000000010739                 jl      loc_10579
.text:000000000001073F                 cmp     rbp, r15
.text:0000000000010742                 jg      loc_10579
.text:0000000000010748
.text:0000000000010748 loc_10748:                              ; CODE XREF: re_search_internal+10EF↑j
.text:0000000000010748                 mov     rdx, rbp
.text:000000000001074B                 sub     rdx, [rsp+268h+var_120]
.text:0000000000010753                 cmp     [rsp+268h+var_110], rdx
.text:000000000001075B                 ja      short loc_10708
.text:000000000001075D                 mov     edx, [rsp+268h+arg_10]
.text:0000000000010764                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010768                 mov     rsi, rbp
.text:000000000001076B                 call    re_string_reconstruct
.text:0000000000010770                 test    eax, eax
.text:0000000000010772                 jnz     loc_10158
.text:0000000000010778                 mov     rdx, rbp
.text:000000000001077B                 sub     rdx, [rsp+268h+var_120]
.text:0000000000010783                 jmp     short loc_10708
.text:0000000000010785 ; ---------------------------------------------------------------------------
.text:0000000000010785
.text:0000000000010785 loc_10785:                              ; CODE XREF: re_search_internal+1006↑j
.text:0000000000010785                 test    eax, eax
.text:0000000000010787                 jz      loc_FC8E
.text:000000000001078D                 mov     edx, eax
.text:000000000001078F                 and     edx, 6
.text:0000000000010792                 cmp     edx, 6
.text:0000000000010795                 jz      loc_10BFF
.text:000000000001079B                 test    al, 2
.text:000000000001079D                 jz      loc_10C50
.text:00000000000107A3                 mov     r14, [rbx+58h]
.text:00000000000107A7                 jmp     loc_10620
.text:00000000000107AC ; ---------------------------------------------------------------------------
.text:00000000000107AC
.text:00000000000107AC loc_107AC:                              ; CODE XREF: re_search_internal+8A4↑j
.text:00000000000107AC                 mov     rax, [rsp+268h+var_230]
.text:00000000000107B1                 cmp     qword ptr [rax+98h], 0
.text:00000000000107B9                 jz      loc_1089C
.text:00000000000107BF
.text:00000000000107BF loc_107BF:                              ; CODE XREF: re_search_internal+1063↑j
.text:00000000000107BF                 mov     rcx, [rsp+268h+var_248]
.text:00000000000107C4                 mov     rbx, [rsp+268h+var_90]
.text:00000000000107CC                 mov     rdi, [rsp+268h+var_268]
.text:00000000000107D0                 mov     rax, [rbx+rcx*8]
.text:00000000000107D4                 mov     rsi, [rax+10h]
.text:00000000000107D8                 lea     rdx, [rax+18h]
.text:00000000000107DC                 call    check_halt_state_context_isra_20
.text:00000000000107E1                 mov     [rsp+268h+var_98], rax
.text:00000000000107E9                 jmp     loc_FF08
.text:00000000000107EE ; ---------------------------------------------------------------------------
.text:00000000000107EE
.text:00000000000107EE loc_107EE:                              ; CODE XREF: re_search_internal+459↑j
.text:00000000000107EE                                         ; re_search_internal+468↑j
.text:00000000000107EE                 xor     ecx, ecx
.text:00000000000107F0                 jmp     loc_FA7E
.text:00000000000107F5 ; ---------------------------------------------------------------------------
.text:00000000000107F5
.text:00000000000107F5 loc_107F5:                              ; CODE XREF: re_search_internal+94F↑j
.text:00000000000107F5                 pxor    xmm0, xmm0
.text:00000000000107F9                 mov     qword ptr [rsp+268h+var_188], rax
.text:0000000000010801                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010805                 mov     rax, [rsp+268h+var_248]
.text:000000000001080A                 lea     rbx, [rsp+268h+var_188]
.text:0000000000010812                 mov     qword ptr [rsp+268h+var_188+8], 0
.text:000000000001081E                 mov     [rsp+268h+var_178], r13
.text:0000000000010826                 mov     rsi, rbx
.text:0000000000010829                 mov     [rsp+268h+ptr], 0
.text:0000000000010835                 movaps  [rsp+268h+var_168], xmm0
.text:000000000001083D                 mov     [rsp+268h+var_170], rax
.text:0000000000010845                 call    sift_states_backward
.text:000000000001084A                 mov     rdi, [rsp+268h+ptr] ; ptr
.text:0000000000010852                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000010856                 call    _free
.text:000000000001085B                 mov     eax, dword ptr [rsp+268h+var_260]
.text:000000000001085F                 test    eax, eax
.text:0000000000010861                 jnz     loc_10CA8
.text:0000000000010867                 cmp     qword ptr [r12], 0
.text:000000000001086C                 jz      loc_10533
.text:0000000000010872
.text:0000000000010872 loc_10872:                              ; CODE XREF: re_search_internal+1692↓j
.text:0000000000010872                 mov     rdi, [rsp+268h+var_90] ; ptr
.text:000000000001087A                 call    _free
.text:000000000001087F                 mov     rax, [rsp+268h+var_248]
.text:0000000000010884                 mov     [rsp+268h+var_90], r12
.text:000000000001088C                 mov     [rsp+268h+var_98], r13
.text:0000000000010894                 mov     [rsp+268h+var_A0], rax
.text:000000000001089C
.text:000000000001089C loc_1089C:                              ; CODE XREF: re_search_internal+8F2↑j
.text:000000000001089C                                         ; re_search_internal+105D↑j ...
.text:000000000001089C                 cmp     [rsp+268h+arg_0], 0
.text:00000000000108A5                 jz      loc_10160
.text:00000000000108AB                 cmp     [rsp+268h+arg_0], 1
.text:00000000000108B4                 jz      loc_10CD8
.text:00000000000108BA                 mov     rsi, [rsp+268h+var_1B0]
.text:00000000000108C2                 mov     rcx, [rsp+268h+arg_0]
.text:00000000000108CA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000108D1                 shl     rcx, 4
.text:00000000000108D5                 lea     rax, [rsi+10h]
.text:00000000000108D9                 add     rcx, rsi
.text:00000000000108DC
.text:00000000000108DC loc_108DC:                              ; CODE XREF: re_search_internal+12DA↓j
.text:00000000000108DC                 mov     [rax+8], rdx
.text:00000000000108E0                 mov     [rax], rdx
.text:00000000000108E3                 add     rax, 10h
.text:00000000000108E7                 cmp     rcx, rax
.text:00000000000108EA                 jnz     short loc_108DC
.text:00000000000108EC                 mov     rdi, [rsp+268h+var_1B0]
.text:00000000000108F4                 mov     rax, [rsp+268h+var_A0]
.text:00000000000108FC                 mov     [rdi+8], rax
.text:0000000000010900                 mov     rax, [rsp+268h+var_220]
.text:0000000000010905                 mov     qword ptr [rdi], 0
.text:000000000001090C                 test    byte ptr [rax+38h], 10h
.text:0000000000010910                 jnz     loc_10CF3
.text:0000000000010916                 cmp     [rsp+268h+arg_0], 1
.text:000000000001091F                 jz      loc_10CF3
.text:0000000000010925                 mov     rax, [rsp+268h+var_230]
.text:000000000001092A                 xor     r8d, r8d
.text:000000000001092D                 test    byte ptr [rax+0B0h], 1
.text:0000000000010934                 jz      short loc_10945
.text:0000000000010936                 xor     r8d, r8d
.text:0000000000010939                 cmp     qword ptr [rax+98h], 0
.text:0000000000010941                 setnle  r8b
.text:0000000000010945
.text:0000000000010945 loc_10945:                              ; CODE XREF: re_search_internal+1324↑j
.text:0000000000010945                 mov     rbx, [rsp+268h+var_1B0]
.text:000000000001094D                 mov     rdx, [rsp+268h+arg_0]
.text:0000000000010955                 mov     rsi, [rsp+268h+var_268]
.text:0000000000010959                 mov     rdi, [rsp+268h+var_220]
.text:000000000001095E                 mov     rcx, rbx
.text:0000000000010961                 call    set_regs
.text:0000000000010966                 test    eax, eax
.text:0000000000010968                 jnz     loc_10C3D
.text:000000000001096E                 mov     rax, [rbx]
.text:0000000000010971
.text:0000000000010971 loc_10971:                              ; CODE XREF: re_search_internal+16E5↓j
.text:0000000000010971                 movzx   r11d, [rsp+268h+var_BC]
.text:000000000001097A                 mov     r10, [rsp+268h+var_118]
.text:0000000000010982                 xor     ecx, ecx
.text:0000000000010984                 mov     r9, [rsp+268h+var_130]
.text:000000000001098C                 mov     r8, [rsp+268h+var_110]
.text:0000000000010994                 mov     rdi, [rsp+268h+var_190]
.text:000000000001099C                 mov     rdx, [rsp+268h+var_1B0]
.text:00000000000109A4                 jmp     short loc_109A9
.text:00000000000109A6 ; ---------------------------------------------------------------------------
.text:00000000000109A6
.text:00000000000109A6 loc_109A6:                              ; CODE XREF: re_search_internal+13C9↓j
.text:00000000000109A6                 mov     rax, [rdx]
.text:00000000000109A9
.text:00000000000109A9 loc_109A9:                              ; CODE XREF: re_search_internal+1394↑j
.text:00000000000109A9                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000109AD                 jz      short loc_109C9
.text:00000000000109AF                 test    r11b, r11b
.text:00000000000109B2                 mov     rsi, [rdx+8]
.text:00000000000109B6                 jnz     loc_10CFA
.text:00000000000109BC
.text:00000000000109BC loc_109BC:                              ; CODE XREF: re_search_internal+16FF↓j
.text:00000000000109BC                                         ; re_search_internal+1707↓j
.text:00000000000109BC                 add     rax, rdi
.text:00000000000109BF                 add     rsi, rdi
.text:00000000000109C2                 mov     [rdx], rax
.text:00000000000109C5                 mov     [rdx+8], rsi
.text:00000000000109C9
.text:00000000000109C9 loc_109C9:                              ; CODE XREF: re_search_internal+139D↑j
.text:00000000000109C9                 add     rcx, 1
.text:00000000000109CD                 add     rdx, 10h
.text:00000000000109D1                 cmp     rcx, [rsp+268h+arg_0]
.text:00000000000109D9                 jnz     short loc_109A6
.text:00000000000109DB                 cmp     [rsp+268h+var_1D0], 0
.text:00000000000109E4                 jle     short loc_10A25
.text:00000000000109E6                 mov     rdx, [rsp+268h+var_1D0]
.text:00000000000109EE                 mov     rdi, [rsp+268h+var_1B0]
.text:00000000000109F6                 mov     rax, rcx
.text:00000000000109F9                 shl     rax, 4
.text:00000000000109FD                 add     rdx, rcx
.text:0000000000010A00                 lea     rax, [rdi+rax+8]
.text:0000000000010A05                 shl     rdx, 4
.text:0000000000010A09                 lea     rsi, [rdi+rdx+8]
.text:0000000000010A0E                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010A15
.text:0000000000010A15 loc_10A15:                              ; CODE XREF: re_search_internal+1413↓j
.text:0000000000010A15                 mov     [rax-8], rdx
.text:0000000000010A19                 mov     [rax], rdx
.text:0000000000010A1C                 add     rax, 10h
.text:0000000000010A20                 cmp     rsi, rax
.text:0000000000010A23                 jnz     short loc_10A15
.text:0000000000010A25
.text:0000000000010A25 loc_10A25:                              ; CODE XREF: re_search_internal+13D4↑j
.text:0000000000010A25                 mov     rax, [rsp+268h+var_230]
.text:0000000000010A2A                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010A32                 mov     r9, [rax+0E0h]
.text:0000000000010A39                 test    r9, r9
.text:0000000000010A3C                 jz      loc_10168
.text:0000000000010A42                 mov     r10, [rsp+268h+var_1B0]
.text:0000000000010A4A                 xor     r8d, r8d
.text:0000000000010A4D                 lea     rdx, [r10+10h]
.text:0000000000010A51                 jmp     short loc_10A89
.text:0000000000010A53 ; ---------------------------------------------------------------------------
.text:0000000000010A53
.text:0000000000010A53 loc_10A53:                              ; CODE XREF: re_search_internal+1480↓j
.text:0000000000010A53                 mov     rax, [r9+rsi*8-8]
.text:0000000000010A58                 cmp     rax, r8
.text:0000000000010A5B                 jz      short loc_10A82
.text:0000000000010A5D                 add     rax, 1
.text:0000000000010A61                 shl     rax, 4
.text:0000000000010A65                 mov     rax, [r10+rax]
.text:0000000000010A69                 mov     [rdx], rax
.text:0000000000010A6C                 mov     rax, [r9+rsi*8-8]
.text:0000000000010A71                 add     rax, 1
.text:0000000000010A75                 shl     rax, 4
.text:0000000000010A79                 mov     rax, [r10+rax+8]
.text:0000000000010A7E                 mov     [rdx+8], rax
.text:0000000000010A82
.text:0000000000010A82 loc_10A82:                              ; CODE XREF: re_search_internal+144B↑j
.text:0000000000010A82                 add     rdx, 10h
.text:0000000000010A86                 mov     r8, rsi
.text:0000000000010A89
.text:0000000000010A89 loc_10A89:                              ; CODE XREF: re_search_internal+1441↑j
.text:0000000000010A89                 lea     rsi, [r8+1]
.text:0000000000010A8D                 cmp     rsi, rcx
.text:0000000000010A90                 jnz     short loc_10A53
.text:0000000000010A92                 jmp     loc_10168
.text:0000000000010A92 ; ---------------------------------------------------------------------------
.text:0000000000010A97                 align 20h
.text:0000000000010AA0
.text:0000000000010AA0 loc_10AA0:                              ; CODE XREF: re_search_internal+B6A↑j
.text:0000000000010AA0                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010AA4                 call    match_ctx_clean
.text:0000000000010AA9                 mov     rdi, [rsp+268h+var_50] ; ptr
.text:0000000000010AB1                 call    _free
.text:0000000000010AB6                 mov     rdi, [rsp+268h+var_70] ; ptr
.text:0000000000010ABE                 call    _free
.text:0000000000010AC3                 jmp     loc_10180
.text:0000000000010AC8 ; ---------------------------------------------------------------------------
.text:0000000000010AC8
.text:0000000000010AC8 loc_10AC8:                              ; CODE XREF: re_search_internal+393↑j
.text:0000000000010AC8                 mov     rax, [rsp+268h+var_230]
.text:0000000000010ACD                 test    byte ptr [rax+0B0h], 2
.text:0000000000010AD4                 jnz     loc_F9A9
.text:0000000000010ADA                 mov     [rsp+268h+var_90], 0
.text:0000000000010AE6                 jmp     loc_F9E5
.text:0000000000010AEB ; ---------------------------------------------------------------------------
.text:0000000000010AEB
.text:0000000000010AEB loc_10AEB:                              ; CODE XREF: re_search_internal+A18↑j
.text:0000000000010AEB                 mov     rdi, r12        ; ptr
.text:0000000000010AEE                 call    _free
.text:0000000000010AF3                 mov     rdi, rbp        ; ptr
.text:0000000000010AF6                 call    _free
.text:0000000000010AFB                 jmp     loc_10540
.text:0000000000010B00 ; ---------------------------------------------------------------------------
.text:0000000000010B00
.text:0000000000010B00 loc_10B00:                              ; CODE XREF: re_search_internal+B0C↑j
.text:0000000000010B00                 mov     [rsp+268h+var_190], rax
.text:0000000000010B08                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010B10                 mov     [rsp+268h+var_20C], 1
.text:0000000000010B18                 jmp     loc_10168
.text:0000000000010B1D ; ---------------------------------------------------------------------------
.text:0000000000010B1D
.text:0000000000010B1D loc_10B1D:                              ; CODE XREF: re_search_internal+BD1↑j
.text:0000000000010B1D                 test    rax, rax
.text:0000000000010B20                 mov     r13, rax
.text:0000000000010B23                 jnz     loc_FD18
.text:0000000000010B29                 jmp     loc_FE64
.text:0000000000010B29 ; ---------------------------------------------------------------------------
.text:0000000000010B2E                 align 10h
.text:0000000000010B30
.text:0000000000010B30 loc_10B30:                              ; CODE XREF: re_search_internal+BDA↑j
.text:0000000000010B30                 mov     r13, rax
.text:0000000000010B33                 jmp     loc_FD18
.text:0000000000010B38 ; ---------------------------------------------------------------------------
.text:0000000000010B38
.text:0000000000010B38 loc_10B38:                              ; CODE XREF: re_search_internal+C43↑j
.text:0000000000010B38                 cmp     eax, 0Ch
.text:0000000000010B3B                 jz      loc_10680
.text:0000000000010B41                 lea     rcx, __PRETTY_FUNCTION___7972 ; "check_matching"
.text:0000000000010B48                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000010B4F                 lea     rdi, aErrRegEspace ; "err == REG_ESPACE"
.text:0000000000010B56                 mov     edx, 46Ch       ; line
.text:0000000000010B5B                 call    ___assert_fail
.text:0000000000010B60 ; ---------------------------------------------------------------------------
.text:0000000000010B60
.text:0000000000010B60 loc_10B60:                              ; CODE XREF: re_search_internal+6C7↑j
.text:0000000000010B60                 cmp     byte ptr [r14+68h], 0
.text:0000000000010B65                 js      short loc_10BD6
.text:0000000000010B67
.text:0000000000010B67 loc_10B67:                              ; CODE XREF: re_search_internal+15EA↓j
.text:0000000000010B67                 mov     esi, [rsp+268h+var_210]
.text:0000000000010B6B                 mov     rax, [rsp+268h+var_260]
.text:0000000000010B70                 test    esi, esi
.text:0000000000010B72                 mov     [rsp+268h+var_248], rax
.text:0000000000010B77                 jz      loc_FE76
.text:0000000000010B7D                 mov     [rsp+268h+var_238], 1
.text:0000000000010B86                 jmp     loc_FCDD
.text:0000000000010B8B ; ---------------------------------------------------------------------------
.text:0000000000010B8B
.text:0000000000010B8B loc_10B8B:                              ; CODE XREF: re_search_internal+917↑j
.text:0000000000010B8B                 mov     rdi, rbx
.text:0000000000010B8E                 mov     [rsp+268h+var_20C], 0Ch
.text:0000000000010B96                 jmp     loc_10168
.text:0000000000010B9B ; ---------------------------------------------------------------------------
.text:0000000000010B9B
.text:0000000000010B9B loc_10B9B:                              ; CODE XREF: re_search_internal+69C↑j
.text:0000000000010B9B                 lea     rbx, [r14+10h]
.text:0000000000010B9F                 lea     rbp, [r14+18h]
.text:0000000000010BA3                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010BA7                 xor     ecx, ecx
.text:0000000000010BA9                 mov     rdx, rbp
.text:0000000000010BAC                 mov     rsi, rbx
.text:0000000000010BAF                 call    check_subexp_matching_top_isra_18
.text:0000000000010BB4                 test    eax, eax
.text:0000000000010BB6                 mov     [rsp+268h+var_198], eax
.text:0000000000010BBD                 jnz     short loc_10C08
.text:0000000000010BBF                 movzx   eax, byte ptr [r14+68h]
.text:0000000000010BC4                 test    al, 40h
.text:0000000000010BC6                 jnz     loc_10CB0
.text:0000000000010BCC
.text:0000000000010BCC loc_10BCC:                              ; CODE XREF: re_search_internal+16C3↓j
.text:0000000000010BCC                 mov     byte ptr [rsp+268h+var_250], 0
.text:0000000000010BD1                 jmp     loc_FCC3
.text:0000000000010BD6 ; ---------------------------------------------------------------------------
.text:0000000000010BD6
.text:0000000000010BD6 loc_10BD6:                              ; CODE XREF: re_search_internal+1555↑j
.text:0000000000010BD6                 mov     rsi, [r14+10h]
.text:0000000000010BDA                 mov     rcx, [rsp+268h+var_260]
.text:0000000000010BDF                 lea     rdx, [r14+18h]
.text:0000000000010BE3                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010BE7                 call    check_halt_state_context_isra_20
.text:0000000000010BEC                 test    rax, rax
.text:0000000000010BEF                 mov     [rsp+268h+var_238], rax
.text:0000000000010BF4                 jz      loc_FCDD
.text:0000000000010BFA                 jmp     loc_10B67
.text:0000000000010BFF ; ---------------------------------------------------------------------------
.text:0000000000010BFF
.text:0000000000010BFF loc_10BFF:                              ; CODE XREF: re_search_internal+1185↑j
.text:0000000000010BFF                 mov     r14, [rbx+60h]
.text:0000000000010C03                 jmp     loc_10620
.text:0000000000010C08 ; ---------------------------------------------------------------------------
.text:0000000000010C08
.text:0000000000010C08 loc_10C08:                              ; CODE XREF: re_search_internal+15AD↑j
.text:0000000000010C08                                         ; re_search_internal+16B8↓j
.text:0000000000010C08                 cdqe
.text:0000000000010C0A                 mov     [rsp+268h+var_248], rax
.text:0000000000010C0F                 jmp     loc_FE76
.text:0000000000010C14 ; ---------------------------------------------------------------------------
.text:0000000000010C14
.text:0000000000010C14 loc_10C14:                              ; CODE XREF: re_search_internal+9E6↑j
.text:0000000000010C14                 mov     r14, [rsp+268h+var_250]
.text:0000000000010C19                 mov     eax, r15d
.text:0000000000010C1C
.text:0000000000010C1C loc_10C1C:                              ; CODE XREF: re_search_internal+169B↓j
.text:0000000000010C1C                 mov     rdi, r12        ; ptr
.text:0000000000010C1F                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000010C23                 call    _free
.text:0000000000010C28                 mov     rdi, r14        ; ptr
.text:0000000000010C2B                 call    _free
.text:0000000000010C30                 mov     eax, dword ptr [rsp+268h+var_260]
.text:0000000000010C34                 cmp     eax, 1
.text:0000000000010C37                 jz      loc_10540
.text:0000000000010C3D
.text:0000000000010C3D loc_10C3D:                              ; CODE XREF: re_search_internal+1358↑j
.text:0000000000010C3D                 mov     rdi, [rsp+268h+var_90]
.text:0000000000010C45                 mov     [rsp+268h+var_20C], eax
.text:0000000000010C49                 jmp     loc_10168
.text:0000000000010C49 ; ---------------------------------------------------------------------------
.text:0000000000010C4E                 align 10h
.text:0000000000010C50
.text:0000000000010C50 loc_10C50:                              ; CODE XREF: re_search_internal+118D↑j
.text:0000000000010C50                 test    al, 4
.text:0000000000010C52                 jz      loc_FC8E
.text:0000000000010C58                 mov     rdx, [r14+50h]
.text:0000000000010C5C                 mov     rdi, [rsp+268h+var_240]
.text:0000000000010C61                 mov     ecx, eax
.text:0000000000010C63                 mov     rsi, rbx
.text:0000000000010C66                 call    re_acquire_state_context
.text:0000000000010C6B                 mov     r14, rax
.text:0000000000010C6E                 jmp     loc_10620
.text:0000000000010C73 ; ---------------------------------------------------------------------------
.text:0000000000010C73
.text:0000000000010C73 loc_10C73:                              ; CODE XREF: re_search_internal+9F1↑j
.text:0000000000010C73                                         ; re_search_internal+9FC↑j
.text:0000000000010C73                 mov     r15, [rsp+268h+var_258]
.text:0000000000010C78                 mov     rcx, [rsp+268h+var_260]
.text:0000000000010C7D                 mov     rdx, rbp
.text:0000000000010C80                 mov     rsi, r12
.text:0000000000010C83                 mov     [rsp+268h+var_248], r14
.text:0000000000010C88                 mov     rdi, r15
.text:0000000000010C8B                 call    merge_state_array
.text:0000000000010C90                 mov     rdi, rbp        ; ptr
.text:0000000000010C93                 mov     dword ptr [rsp+268h+var_260], eax
.text:0000000000010C97                 call    _free
.text:0000000000010C9C                 mov     eax, dword ptr [rsp+268h+var_260]
.text:0000000000010CA0                 test    eax, eax
.text:0000000000010CA2                 jz      loc_10872
.text:0000000000010CA8
.text:0000000000010CA8 loc_10CA8:                              ; CODE XREF: re_search_internal+1251↑j
.text:0000000000010CA8                 xor     r14d, r14d
.text:0000000000010CAB                 jmp     loc_10C1C
.text:0000000000010CB0 ; ---------------------------------------------------------------------------
.text:0000000000010CB0
.text:0000000000010CB0 loc_10CB0:                              ; CODE XREF: re_search_internal+15B6↑j
.text:0000000000010CB0                 mov     rdi, [rsp+268h+var_268]
.text:0000000000010CB4                 mov     rdx, rbp
.text:0000000000010CB7                 mov     rsi, rbx
.text:0000000000010CBA                 call    transit_state_bkref_isra_34
.text:0000000000010CBF                 test    eax, eax
.text:0000000000010CC1                 mov     [rsp+268h+var_198], eax
.text:0000000000010CC8                 jnz     loc_10C08
.text:0000000000010CCE                 movzx   eax, byte ptr [r14+68h]
.text:0000000000010CD3                 jmp     loc_10BCC
.text:0000000000010CD8 ; ---------------------------------------------------------------------------
.text:0000000000010CD8
.text:0000000000010CD8 loc_10CD8:                              ; CODE XREF: re_search_internal+12A4↑j
.text:0000000000010CD8                 mov     rsi, [rsp+268h+var_1B0]
.text:0000000000010CE0                 mov     rax, [rsp+268h+var_A0]
.text:0000000000010CE8                 mov     qword ptr [rsi], 0
.text:0000000000010CEF                 mov     [rsi+8], rax
.text:0000000000010CF3
.text:0000000000010CF3 loc_10CF3:                              ; CODE XREF: re_search_internal+1300↑j
.text:0000000000010CF3                                         ; re_search_internal+130F↑j
.text:0000000000010CF3                 xor     eax, eax
.text:0000000000010CF5                 jmp     loc_10971
.text:0000000000010CFA ; ---------------------------------------------------------------------------
.text:0000000000010CFA
.text:0000000000010CFA loc_10CFA:                              ; CODE XREF: re_search_internal+13A6↑j
.text:0000000000010CFA                 cmp     r10, rax
.text:0000000000010CFD                 jz      short loc_10D1C
.text:0000000000010CFF                 mov     rax, [r9+rax*8]
.text:0000000000010D03
.text:0000000000010D03 loc_10D03:                              ; CODE XREF: re_search_internal+170F↓j
.text:0000000000010D03                 cmp     r10, rsi
.text:0000000000010D06                 mov     [rdx], rax
.text:0000000000010D09                 jz      short loc_10D14
.text:0000000000010D0B                 mov     rsi, [r9+rsi*8]
.text:0000000000010D0F                 jmp     loc_109BC
.text:0000000000010D14 ; ---------------------------------------------------------------------------
.text:0000000000010D14
.text:0000000000010D14 loc_10D14:                              ; CODE XREF: re_search_internal+16F9↑j
.text:0000000000010D14                 mov     rsi, r8
.text:0000000000010D17                 jmp     loc_109BC
.text:0000000000010D1C ; ---------------------------------------------------------------------------
.text:0000000000010D1C
.text:0000000000010D1C loc_10D1C:                              ; CODE XREF: re_search_internal+16ED↑j
.text:0000000000010D1C                 mov     rax, r8
.text:0000000000010D1F                 jmp     short loc_10D03
.text:0000000000010D21 ; ---------------------------------------------------------------------------
.text:0000000000010D21
.text:0000000000010D21 loc_10D21:                              ; CODE XREF: re_search_internal+574↑j
.text:0000000000010D21                                         ; re_search_internal+AB1↑j
.text:0000000000010D21                 mov     [rsp+268h+var_190], rbp
.text:0000000000010D29                 jmp     loc_FBE8        ; jumptable 000000000000FB06 case 4
.text:0000000000010D2E ; ---------------------------------------------------------------------------
.text:0000000000010D2E
.text:0000000000010D2E loc_10D2E:                              ; CODE XREF: re_search_internal+84E↑j
.text:0000000000010D2E                 mov     [rsp+268h+var_100], rax
.text:0000000000010D36                 jmp     loc_FE64
.text:0000000000010D3B ; ---------------------------------------------------------------------------
.text:0000000000010D3B
.text:0000000000010D3B loc_10D3B:                              ; CODE XREF: re_search_internal+B8E↑j
.text:0000000000010D3B                 call    ___stack_chk_fail
.text:0000000000010D3B ; } // starts at F610
.text:0000000000010D3B re_search_internal endp
.text:0000000000010D3B
.text:0000000000010D40
.text:0000000000010D40 ; =============== S U B R O U T I N E =======================================
.text:0000000000010D40
.text:0000000000010D40
.text:0000000000010D40 update_cur_sifted_state proc near       ; CODE XREF: sift_states_backward+70↑p
.text:0000000000010D40                                         ; sift_states_backward+28F↑p
.text:0000000000010D40
.text:0000000000010D40 var_D0          = qword ptr -0D0h
.text:0000000000010D40 var_C8          = qword ptr -0C8h
.text:0000000000010D40 var_C0          = qword ptr -0C0h
.text:0000000000010D40 var_B8          = qword ptr -0B8h
.text:0000000000010D40 var_B0          = qword ptr -0B0h
.text:0000000000010D40 var_A8          = qword ptr -0A8h
.text:0000000000010D40 var_A0          = qword ptr -0A0h
.text:0000000000010D40 var_98          = qword ptr -98h
.text:0000000000010D40 var_90          = qword ptr -90h
.text:0000000000010D40 var_7C          = dword ptr -7Ch
.text:0000000000010D40 var_78          = xmmword ptr -78h
.text:0000000000010D40 var_68          = xmmword ptr -68h
.text:0000000000010D40 var_50          = qword ptr -50h
.text:0000000000010D40 ptr             = qword ptr -48h
.text:0000000000010D40 var_40          = qword ptr -40h
.text:0000000000010D40
.text:0000000000010D40 ; __unwind {
.text:0000000000010D40                 push    r15
.text:0000000000010D42                 push    r14
.text:0000000000010D44                 mov     rax, rdi
.text:0000000000010D47                 push    r13
.text:0000000000010D49                 push    r12
.text:0000000000010D4B                 mov     r13, rsi
.text:0000000000010D4E                 push    rbp
.text:0000000000010D4F                 push    rbx
.text:0000000000010D50                 mov     rbp, rdx
.text:0000000000010D53                 mov     rbx, rcx
.text:0000000000010D56                 lea     rcx, ds:0[rdx*8]
.text:0000000000010D5E                 sub     rsp, 0A8h
.text:0000000000010D65                 mov     r12, [rax+98h]
.text:0000000000010D6C                 mov     rax, [rax+0B8h]
.text:0000000000010D73                 mov     [rsp+0D8h+var_D0], rdi
.text:0000000000010D78                 mov     [rsp+0D8h+var_C0], rcx
.text:0000000000010D7D                 mov     rdi, fs:28h
.text:0000000000010D86                 mov     [rsp+0D8h+var_40], rdi
.text:0000000000010D8E                 xor     edi, edi
.text:0000000000010D90                 mov     rdx, [rax+rdx*8]
.text:0000000000010D94                 mov     [rsp+0D8h+var_7C], 0
.text:0000000000010D9C                 mov     rcx, [rbx+8]
.text:0000000000010DA0                 test    rdx, rdx
.text:0000000000010DA3                 jz      loc_10FF8
.text:0000000000010DA9                 lea     rdi, [rdx+8]
.text:0000000000010DAD                 test    rcx, rcx
.text:0000000000010DB0                 mov     [rsp+0D8h+var_C8], rdi
.text:0000000000010DB5                 jnz     short loc_10E08
.text:0000000000010DB7                 mov     rdx, [rsi]
.text:0000000000010DBA                 mov     qword ptr [rdx+rbp*8], 0
.text:0000000000010DC2                 mov     rdx, [rax+rbp*8]
.text:0000000000010DC6                 xor     eax, eax
.text:0000000000010DC8                 test    byte ptr [rdx+68h], 40h
.text:0000000000010DCC                 jnz     loc_10EAF
.text:0000000000010DD2                 nop     word ptr [rax+rax+00h]
.text:0000000000010DD8
.text:0000000000010DD8 loc_10DD8:                              ; CODE XREF: update_cur_sifted_state+E9↓j
.text:0000000000010DD8                                         ; update_cur_sifted_state+112↓j ...
.text:0000000000010DD8                 mov     rdi, [rsp+0D8h+var_40]
.text:0000000000010DE0                 xor     rdi, fs:28h
.text:0000000000010DE9                 jnz     loc_1158B
.text:0000000000010DEF                 add     rsp, 0A8h
.text:0000000000010DF6                 pop     rbx
.text:0000000000010DF7                 pop     rbp
.text:0000000000010DF8                 pop     r12
.text:0000000000010DFA                 pop     r13
.text:0000000000010DFC                 pop     r14
.text:0000000000010DFE                 pop     r15
.text:0000000000010E00                 retn
.text:0000000000010E00 ; ---------------------------------------------------------------------------
.text:0000000000010E01                 align 8
.text:0000000000010E08
.text:0000000000010E08 loc_10E08:                              ; CODE XREF: update_cur_sifted_state+75↑j
.text:0000000000010E08                 lea     rdi, [rsp+0D8h+var_78]
.text:0000000000010E0D                 mov     rdx, rbx
.text:0000000000010E10                 mov     rsi, r12
.text:0000000000010E13                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:0000000000010E1B                 call    re_acquire_state
.text:0000000000010E20                 mov     rdx, rax
.text:0000000000010E23                 mov     eax, dword ptr [rsp+0D8h+var_78]
.text:0000000000010E27                 test    eax, eax
.text:0000000000010E29                 jnz     short loc_10DD8
.text:0000000000010E2B                 mov     r15, [rdx+38h]
.text:0000000000010E2F                 lea     r14, [rdx+38h]
.text:0000000000010E33                 test    r15, r15
.text:0000000000010E36                 jz      loc_11040
.text:0000000000010E3C
.text:0000000000010E3C loc_10E3C:                              ; CODE XREF: update_cur_sifted_state+33B↓j
.text:0000000000010E3C                                         ; update_cur_sifted_state+348↓j
.text:0000000000010E3C                 mov     rsi, [rsp+0D8h+var_C8]
.text:0000000000010E41                 mov     rdx, r14
.text:0000000000010E44                 mov     rdi, rbx
.text:0000000000010E47                 call    re_node_set_add_intersect
.text:0000000000010E4C                 test    eax, eax
.text:0000000000010E4E                 mov     [rsp+0D8h+var_7C], eax
.text:0000000000010E52                 jnz     short loc_10DD8
.text:0000000000010E54                 cmp     qword ptr [r13+28h], 0
.text:0000000000010E59                 jnz     loc_110D0
.text:0000000000010E5F
.text:0000000000010E5F loc_10E5F:                              ; CODE XREF: update_cur_sifted_state+483↓j
.text:0000000000010E5F                 mov     r14, [rsp+0D8h+var_C0]
.text:0000000000010E64                 add     r14, [r13+0]
.text:0000000000010E68
.text:0000000000010E68 loc_10E68:                              ; CODE XREF: update_cur_sifted_state+389↓j
.text:0000000000010E68                 lea     rdi, [rsp+0D8h+var_7C]
.text:0000000000010E6D                 mov     rdx, rbx
.text:0000000000010E70                 mov     rsi, r12
.text:0000000000010E73                 call    re_acquire_state
.text:0000000000010E78                 mov     [r14], rax
.text:0000000000010E7B                 mov     eax, [rsp+0D8h+var_7C]
.text:0000000000010E7F                 test    eax, eax
.text:0000000000010E81                 jnz     loc_10DD8
.text:0000000000010E87                 cmp     [rsp+0D8h+var_C8], 0
.text:0000000000010E8D                 jz      loc_10DD8
.text:0000000000010E93                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000010E98                 mov     rax, [rax+0B8h]
.text:0000000000010E9F                 mov     rdx, [rax+rbp*8]
.text:0000000000010EA3                 xor     eax, eax
.text:0000000000010EA5                 test    byte ptr [rdx+68h], 40h
.text:0000000000010EA9                 jz      loc_10DD8
.text:0000000000010EAF
.text:0000000000010EAF loc_10EAF:                              ; CODE XREF: update_cur_sifted_state+8C↑j
.text:0000000000010EAF                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000010EB4                 xor     ebx, ebx
.text:0000000000010EB6                 mov     rsi, [rax+0C8h]
.text:0000000000010EBD                 mov     rdx, rsi
.text:0000000000010EC0
.text:0000000000010EC0 loc_10EC0:                              ; CODE XREF: update_cur_sifted_state+2F7↓j
.text:0000000000010EC0                 cmp     rbx, rdx
.text:0000000000010EC3                 jge     short loc_10F23
.text:0000000000010EC5                 lea     rax, [rbx+rdx]
.text:0000000000010EC9                 mov     rcx, rax
.text:0000000000010ECC                 shr     rcx, 3Fh
.text:0000000000010ED0                 add     rcx, rax
.text:0000000000010ED3                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000010ED8                 sar     rcx, 1
.text:0000000000010EDB                 mov     rdi, [rax+0D8h]
.text:0000000000010EE2                 lea     rax, [rcx+rcx*4]
.text:0000000000010EE6                 cmp     rbp, [rdi+rax*8+8]
.text:0000000000010EEB                 jle     short loc_10F1E
.text:0000000000010EED                 jmp     loc_11027
.text:0000000000010EED ; ---------------------------------------------------------------------------
.text:0000000000010EF2                 align 8
.text:0000000000010EF8
.text:0000000000010EF8 loc_10EF8:                              ; CODE XREF: update_cur_sifted_state+1E1↓j
.text:0000000000010EF8                 lea     rdx, [rbx+rcx]
.text:0000000000010EFC                 mov     rax, rdx
.text:0000000000010EFF                 shr     rax, 3Fh
.text:0000000000010F03                 add     rax, rdx
.text:0000000000010F06                 sar     rax, 1
.text:0000000000010F09                 lea     rdx, [rax+rax*4]
.text:0000000000010F0D                 mov     r8, rax
.text:0000000000010F10                 cmp     rbp, [rdi+rdx*8+8]
.text:0000000000010F15                 jg      loc_11030
.text:0000000000010F1B                 mov     rcx, rax
.text:0000000000010F1E
.text:0000000000010F1E loc_10F1E:                              ; CODE XREF: update_cur_sifted_state+1AB↑j
.text:0000000000010F1E                 cmp     rbx, rcx
.text:0000000000010F21                 jl      short loc_10EF8
.text:0000000000010F23
.text:0000000000010F23 loc_10F23:                              ; CODE XREF: update_cur_sifted_state+183↑j
.text:0000000000010F23                 cmp     rsi, rbx
.text:0000000000010F26                 jle     loc_11020
.text:0000000000010F2C                 lea     rax, [rbx+rbx*4]
.text:0000000000010F30                 lea     rsi, ds:0[rax*8]
.text:0000000000010F38                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000010F3D                 mov     [rsp+0D8h+var_98], rsi
.text:0000000000010F42                 mov     rax, [rax+0D8h]
.text:0000000000010F49                 cmp     rbp, [rax+rsi+8]
.text:0000000000010F4E                 jnz     loc_11020
.text:0000000000010F54                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000010F58                 jz      loc_11020
.text:0000000000010F5E                 mov     rax, [rsp+0D8h+var_D0]
.text:0000000000010F63                 mov     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000010F6C                 mov     r12, [rax+98h]
.text:0000000000010F73                 mov     rax, [rsp+0D8h+var_C8]
.text:0000000000010F78                 cmp     qword ptr [rax+8], 0
.text:0000000000010F7D                 jle     loc_11020
.text:0000000000010F83                 lea     rax, [rsp+0D8h+var_78]
.text:0000000000010F88                 mov     [rsp+0D8h+var_B8], 0
.text:0000000000010F91                 mov     [rsp+0D8h+var_90], rbx
.text:0000000000010F96                 mov     r15, r13
.text:0000000000010F99                 mov     [rsp+0D8h+var_A0], rax
.text:0000000000010F9E                 jmp     short loc_10FC2
.text:0000000000010FA0 ; ---------------------------------------------------------------------------
.text:0000000000010FA0
.text:0000000000010FA0 loc_10FA0:                              ; CODE XREF: update_cur_sifted_state+2A7↓j
.text:0000000000010FA0                                         ; update_cur_sifted_state+2AD↓j
.text:0000000000010FA0                 cmp     al, 4
.text:0000000000010FA2                 jz      loc_11328
.text:0000000000010FA8
.text:0000000000010FA8 loc_10FA8:                              ; CODE XREF: update_cur_sifted_state+2AF↓j
.text:0000000000010FA8                                         ; update_cur_sifted_state+7C3↓j
.text:0000000000010FA8                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000010FAD                 add     [rsp+0D8h+var_B8], 1
.text:0000000000010FB3                 mov     rax, [rsp+0D8h+var_B8]
.text:0000000000010FB8                 cmp     rax, [rcx+8]
.text:0000000000010FBC                 jge     loc_1157B
.text:0000000000010FC2
.text:0000000000010FC2 loc_10FC2:                              ; CODE XREF: update_cur_sifted_state+25E↑j
.text:0000000000010FC2                 mov     rax, [rsp+0D8h+var_C8]
.text:0000000000010FC7                 mov     rdi, [rsp+0D8h+var_B8]
.text:0000000000010FCC                 mov     rax, [rax+10h]
.text:0000000000010FD0                 mov     r14, [rax+rdi*8]
.text:0000000000010FD4                 mov     rax, r14
.text:0000000000010FD7                 shl     rax, 4
.text:0000000000010FDB                 add     rax, [r12]
.text:0000000000010FDF                 cmp     r14, [r15+10h]
.text:0000000000010FE3                 movzx   eax, byte ptr [rax+8]
.text:0000000000010FE7                 jnz     short loc_10FA0
.text:0000000000010FE9                 cmp     rbp, [r15+18h]
.text:0000000000010FED                 jnz     short loc_10FA0
.text:0000000000010FEF                 jmp     short loc_10FA8
.text:0000000000010FEF ; ---------------------------------------------------------------------------
.text:0000000000010FF1                 align 8
.text:0000000000010FF8
.text:0000000000010FF8 loc_10FF8:                              ; CODE XREF: update_cur_sifted_state+63↑j
.text:0000000000010FF8                 lea     r14, ds:0[rbp*8]
.text:0000000000011000                 add     r14, [rsi]
.text:0000000000011003                 test    rcx, rcx
.text:0000000000011006                 jnz     loc_110C0
.text:000000000001100C                 mov     qword ptr [r14], 0
.text:0000000000011013                 xor     eax, eax
.text:0000000000011015                 jmp     loc_10DD8
.text:0000000000011015 ; ---------------------------------------------------------------------------
.text:000000000001101A                 align 20h
.text:0000000000011020
.text:0000000000011020 loc_11020:                              ; CODE XREF: update_cur_sifted_state+1E6↑j
.text:0000000000011020                                         ; update_cur_sifted_state+20E↑j ...
.text:0000000000011020                 xor     eax, eax
.text:0000000000011022                 jmp     loc_10DD8
.text:0000000000011027 ; ---------------------------------------------------------------------------
.text:0000000000011027
.text:0000000000011027 loc_11027:                              ; CODE XREF: update_cur_sifted_state+1AD↑j
.text:0000000000011027                 mov     r8, rcx
.text:000000000001102A                 mov     rcx, rdx
.text:000000000001102D                 nop     dword ptr [rax]
.text:0000000000011030
.text:0000000000011030 loc_11030:                              ; CODE XREF: update_cur_sifted_state+1D5↑j
.text:0000000000011030                 lea     rbx, [r8+1]
.text:0000000000011034                 mov     rdx, rcx
.text:0000000000011037                 jmp     loc_10EC0
.text:0000000000011037 ; ---------------------------------------------------------------------------
.text:000000000001103C                 align 20h
.text:0000000000011040
.text:0000000000011040 loc_11040:                              ; CODE XREF: update_cur_sifted_state+F6↑j
.text:0000000000011040                 mov     rdi, [rbx+8]
.text:0000000000011044                 mov     qword ptr [rdx+40h], 0
.text:000000000001104C                 mov     [rsp+0D8h+var_B8], rdx
.text:0000000000011051                 mov     [rdx+38h], rdi
.text:0000000000011055                 shl     rdi, 3          ; size
.text:0000000000011059                 call    _malloc
.text:000000000001105E                 mov     rdx, [rsp+0D8h+var_B8]
.text:0000000000011063                 test    rax, rax
.text:0000000000011066                 mov     [rdx+48h], rax
.text:000000000001106A                 jz      short loc_110B3
.text:000000000001106C                 cmp     qword ptr [rbx+8], 0
.text:0000000000011071                 mov     dword ptr [rsp+0D8h+var_78], 0
.text:0000000000011079                 jg      short loc_1108E
.text:000000000001107B                 jmp     loc_10E3C
.text:0000000000011080 ; ---------------------------------------------------------------------------
.text:0000000000011080
.text:0000000000011080 loc_11080:                              ; CODE XREF: update_cur_sifted_state+371↓j
.text:0000000000011080                 add     r15, 1
.text:0000000000011084                 cmp     r15, [rbx+8]
.text:0000000000011088                 jge     loc_10E3C
.text:000000000001108E
.text:000000000001108E loc_1108E:                              ; CODE XREF: update_cur_sifted_state+339↑j
.text:000000000001108E                 mov     rax, [rbx+10h]
.text:0000000000011092                 mov     rdi, r14
.text:0000000000011095                 mov     rax, [rax+r15*8]
.text:0000000000011099                 lea     rdx, [rax+rax*2]
.text:000000000001109D                 mov     rax, [r12+38h]
.text:00000000000110A2                 lea     rsi, [rax+rdx*8]
.text:00000000000110A6                 call    re_node_set_merge
.text:00000000000110AB                 test    eax, eax
.text:00000000000110AD                 mov     dword ptr [rsp+0D8h+var_78], eax
.text:00000000000110B1                 jz      short loc_11080
.text:00000000000110B3
.text:00000000000110B3 loc_110B3:                              ; CODE XREF: update_cur_sifted_state+32A↑j
.text:00000000000110B3                 mov     eax, 0Ch
.text:00000000000110B8                 jmp     loc_10DD8
.text:00000000000110B8 ; ---------------------------------------------------------------------------
.text:00000000000110BD                 align 20h
.text:00000000000110C0
.text:00000000000110C0 loc_110C0:                              ; CODE XREF: update_cur_sifted_state+2C6↑j
.text:00000000000110C0                 mov     [rsp+0D8h+var_C8], 0
.text:00000000000110C9                 jmp     loc_10E68
.text:00000000000110C9 ; ---------------------------------------------------------------------------
.text:00000000000110CE                 align 10h
.text:00000000000110D0
.text:00000000000110D0 loc_110D0:                              ; CODE XREF: update_cur_sifted_state+119↑j
.text:00000000000110D0                 mov     rax, [rsp+0D8h+var_D0]
.text:00000000000110D5                 mov     rax, [rax+0D8h]
.text:00000000000110DC                 mov     [rsp+0D8h+var_B8], rax
.text:00000000000110E1                 jle     loc_111BB
.text:00000000000110E7                 xor     r15d, r15d
.text:00000000000110EA                 nop     word ptr [rax+rax+00h]
.text:00000000000110F0
.text:00000000000110F0 loc_110F0:                              ; CODE XREF: update_cur_sifted_state+475↓j
.text:00000000000110F0                 mov     rax, [r13+30h]
.text:00000000000110F4                 mov     rdi, [rsp+0D8h+var_B8]
.text:00000000000110F9                 mov     rax, [rax+r15*8]
.text:00000000000110FD                 lea     rax, [rax+rax*4]
.text:0000000000011101                 lea     rdx, [rdi+rax*8]
.text:0000000000011105                 cmp     rbp, [rdx+10h]
.text:0000000000011109                 jle     loc_111AD
.text:000000000001110F                 cmp     rbp, [rdx+8]
.text:0000000000011113                 jg      loc_111AD
.text:0000000000011119                 mov     rcx, [rdx]
.text:000000000001111C                 mov     rax, [r12]
.text:0000000000011120                 mov     rsi, [rbx+8]
.text:0000000000011124                 shl     rcx, 4
.text:0000000000011128                 cmp     rbp, [rdx+18h]
.text:000000000001112C                 mov     r8, [rax+rcx]
.text:0000000000011130                 jz      loc_111D0
.text:0000000000011136                 xor     r14d, r14d
.text:0000000000011139                 test    rsi, rsi
.text:000000000001113C                 jle     short loc_111AD
.text:000000000001113E                 mov     [rsp+0D8h+var_B0], rbp
.text:0000000000011143                 mov     rbp, r8
.text:0000000000011146                 jmp     short loc_1115E
.text:0000000000011146 ; ---------------------------------------------------------------------------
.text:0000000000011148                 align 10h
.text:0000000000011150
.text:0000000000011150 loc_11150:                              ; CODE XREF: update_cur_sifted_state+43A↓j
.text:0000000000011150                                         ; update_cur_sifted_state+43F↓j
.text:0000000000011150                 add     r14, 1
.text:0000000000011154                 cmp     r14, [rbx+8]
.text:0000000000011158                 jge     short loc_111A8
.text:000000000001115A
.text:000000000001115A loc_1115A:                              ; CODE XREF: update_cur_sifted_state+461↓j
.text:000000000001115A                 mov     rax, [r12]
.text:000000000001115E
.text:000000000001115E loc_1115E:                              ; CODE XREF: update_cur_sifted_state+406↑j
.text:000000000001115E                 mov     rdx, [rbx+10h]
.text:0000000000011162                 mov     rsi, [rdx+r14*8]
.text:0000000000011166                 mov     rdx, rsi
.text:0000000000011169                 shl     rdx, 4
.text:000000000001116D                 add     rax, rdx
.text:0000000000011170                 movzx   edx, byte ptr [rax+8]
.text:0000000000011174                 sub     edx, 8
.text:0000000000011177                 cmp     edx, 1
.text:000000000001117A                 ja      short loc_11150
.text:000000000001117C                 cmp     rbp, [rax]
.text:000000000001117F                 jnz     short loc_11150
.text:0000000000011181                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000011186                 mov     rdx, rbx
.text:0000000000011189                 mov     rdi, r12
.text:000000000001118C                 call    _sub_epsilon_src_nodes
.text:0000000000011191                 test    eax, eax
.text:0000000000011193                 jnz     loc_10DD8
.text:0000000000011199                 add     r14, 1
.text:000000000001119D                 cmp     r14, [rbx+8]
.text:00000000000111A1                 jl      short loc_1115A
.text:00000000000111A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000111A8
.text:00000000000111A8 loc_111A8:                              ; CODE XREF: update_cur_sifted_state+418↑j
.text:00000000000111A8                 mov     rbp, [rsp+0D8h+var_B0]
.text:00000000000111AD
.text:00000000000111AD loc_111AD:                              ; CODE XREF: update_cur_sifted_state+3C9↑j
.text:00000000000111AD                                         ; update_cur_sifted_state+3D3↑j ...
.text:00000000000111AD                 add     r15, 1
.text:00000000000111B1                 cmp     r15, [r13+28h]
.text:00000000000111B5                 jl      loc_110F0
.text:00000000000111BB
.text:00000000000111BB loc_111BB:                              ; CODE XREF: update_cur_sifted_state+3A1↑j
.text:00000000000111BB                 mov     [rsp+0D8h+var_7C], 0
.text:00000000000111C3                 jmp     loc_10E5F
.text:00000000000111C3 ; ---------------------------------------------------------------------------
.text:00000000000111C8                 align 10h
.text:00000000000111D0
.text:00000000000111D0 loc_111D0:                              ; CODE XREF: update_cur_sifted_state+3F0↑j
.text:00000000000111D0                 test    rsi, rsi
.text:00000000000111D3                 jle     short loc_111AD
.text:00000000000111D5                 mov     r10, [rbx+10h]
.text:00000000000111D9                 mov     r9, 0FFFFFFFFFFFFFFFFh
.text:00000000000111E0                 lea     r11, [r10+rsi*8]
.text:00000000000111E4                 mov     rcx, r10
.text:00000000000111E7                 mov     rsi, r9
.text:00000000000111EA                 jmp     short loc_11206
.text:00000000000111EA ; ---------------------------------------------------------------------------
.text:00000000000111EC                 align 10h
.text:00000000000111F0
.text:00000000000111F0 loc_111F0:                              ; CODE XREF: update_cur_sifted_state+4DC↓j
.text:00000000000111F0                 cmp     r14d, 9
.text:00000000000111F4                 jnz     short loc_111FD
.text:00000000000111F6                 cmp     r8, [rdx]
.text:00000000000111F9                 cmovz   r9, rdi
.text:00000000000111FD
.text:00000000000111FD loc_111FD:                              ; CODE XREF: update_cur_sifted_state+4B4↑j
.text:00000000000111FD                 add     rcx, 8
.text:0000000000011201                 cmp     r11, rcx
.text:0000000000011204                 jz      short loc_1122E
.text:0000000000011206
.text:0000000000011206 loc_11206:                              ; CODE XREF: update_cur_sifted_state+4AA↑j
.text:0000000000011206                                         ; update_cur_sifted_state+4EC↓j
.text:0000000000011206                 mov     rdi, [rcx]
.text:0000000000011209                 mov     rdx, rdi
.text:000000000001120C                 shl     rdx, 4
.text:0000000000011210                 add     rdx, rax
.text:0000000000011213                 movzx   r14d, byte ptr [rdx+8]
.text:0000000000011218                 cmp     r14d, 8
.text:000000000001121C                 jnz     short loc_111F0
.text:000000000001121E                 cmp     r8, [rdx]
.text:0000000000011221                 cmovz   rsi, rdi
.text:0000000000011225                 add     rcx, 8
.text:0000000000011229                 cmp     r11, rcx
.text:000000000001122C                 jnz     short loc_11206
.text:000000000001122E
.text:000000000001122E loc_1122E:                              ; CODE XREF: update_cur_sifted_state+4C4↑j
.text:000000000001122E                 test    rsi, rsi
.text:0000000000011231                 mov     r14, r9
.text:0000000000011234                 mov     [rsp+0D8h+var_B0], r9
.text:0000000000011239                 js      loc_11300
.text:000000000001123F                 mov     rcx, [rsp+0D8h+var_C8]
.text:0000000000011244                 mov     rdx, rbx
.text:0000000000011247                 mov     rdi, r12
.text:000000000001124A                 call    _sub_epsilon_src_nodes
.text:000000000001124F                 test    eax, eax
.text:0000000000011251                 jnz     loc_10DD8
.text:0000000000011257                 test    r14, r14
.text:000000000001125A                 js      loc_111AD
.text:0000000000011260                 cmp     qword ptr [rbx+8], 0
.text:0000000000011265                 jle     loc_111AD
.text:000000000001126B                 mov     r10, [rbx+10h]
.text:000000000001126F
.text:000000000001126F loc_1126F:                              ; CODE XREF: update_cur_sifted_state+5C6↓j
.text:000000000001126F                 xor     r14d, r14d
.text:0000000000011272                 mov     [rsp+0D8h+var_A8], rbp
.text:0000000000011277                 mov     rbp, r14
.text:000000000001127A                 mov     r14, [rsp+0D8h+var_B0]
.text:000000000001127F                 jmp     short loc_1129A
.text:000000000001127F ; ---------------------------------------------------------------------------
.text:0000000000011281                 align 8
.text:0000000000011288
.text:0000000000011288 loc_11288:                              ; CODE XREF: update_cur_sifted_state+581↓j
.text:0000000000011288                                         ; update_cur_sifted_state+598↓j ...
.text:0000000000011288                 add     rbp, 1
.text:000000000001128C                 cmp     rbp, [rbx+8]
.text:0000000000011290                 jge     loc_11318
.text:0000000000011296                 mov     r10, [rbx+10h]
.text:000000000001129A
.text:000000000001129A loc_1129A:                              ; CODE XREF: update_cur_sifted_state+53F↑j
.text:000000000001129A                 mov     r10, [r10+rbp*8]
.text:000000000001129E                 mov     rax, [r12+38h]
.text:00000000000112A3                 mov     rdx, r14
.text:00000000000112A6                 lea     r9, [r10+r10*2]
.text:00000000000112AA                 shl     r9, 3
.text:00000000000112AE                 add     rax, r9
.text:00000000000112B1                 mov     rdi, [rax+8]
.text:00000000000112B5                 lea     rsi, [rax+10h]
.text:00000000000112B9                 call    re_node_set_contains_isra_3
.text:00000000000112BE                 test    rax, rax
.text:00000000000112C1                 jnz     short loc_11288
.text:00000000000112C3                 add     r9, [r12+30h]
.text:00000000000112C8                 mov     rdi, [r9+8]
.text:00000000000112CC                 lea     rsi, [r9+10h]
.text:00000000000112D0                 call    re_node_set_contains_isra_3
.text:00000000000112D5                 test    rax, rax
.text:00000000000112D8                 jnz     short loc_11288
.text:00000000000112DA                 mov     rcx, [rsp+0D8h+var_C8]
.text:00000000000112DF                 mov     rdx, rbx
.text:00000000000112E2                 mov     rsi, r10
.text:00000000000112E5                 mov     rdi, r12
.text:00000000000112E8                 call    _sub_epsilon_src_nodes
.text:00000000000112ED                 test    eax, eax
.text:00000000000112EF                 jnz     loc_10DD8
.text:00000000000112F5                 sub     rbp, 1
.text:00000000000112F9                 jmp     short loc_11288
.text:00000000000112F9 ; ---------------------------------------------------------------------------
.text:00000000000112FB                 align 20h
.text:0000000000011300
.text:0000000000011300 loc_11300:                              ; CODE XREF: update_cur_sifted_state+4F9↑j
.text:0000000000011300                 cmp     [rsp+0D8h+var_B0], 0
.text:0000000000011306                 jns     loc_1126F
.text:000000000001130C                 jmp     loc_111AD
.text:000000000001130C ; ---------------------------------------------------------------------------
.text:0000000000011311                 align 8
.text:0000000000011318
.text:0000000000011318 loc_11318:                              ; CODE XREF: update_cur_sifted_state+550↑j
.text:0000000000011318                 mov     rbp, [rsp+0D8h+var_A8]
.text:000000000001131D                 jmp     loc_111AD
.text:000000000001131D ; ---------------------------------------------------------------------------
.text:0000000000011322                 align 8
.text:0000000000011328
.text:0000000000011328 loc_11328:                              ; CODE XREF: update_cur_sifted_state+262↑j
.text:0000000000011328                 mov     rax, [rsp+0D8h+var_D0]
.text:000000000001132D                 mov     r13, [rsp+0D8h+var_98]
.text:0000000000011332                 mov     rbx, [rsp+0D8h+var_90]
.text:0000000000011337                 add     r13, [rax+0D8h]
.text:000000000001133E                 lea     rax, [r14+r14*2]
.text:0000000000011342                 shl     rax, 3
.text:0000000000011346                 mov     [rsp+0D8h+var_A8], rax
.text:000000000001134B                 lea     rax, ds:0[r14*8]
.text:0000000000011353                 mov     [rsp+0D8h+var_B0], rax
.text:0000000000011358                 mov     rax, r15
.text:000000000001135B                 mov     r15, r13
.text:000000000001135E                 mov     r13, rbx
.text:0000000000011361                 mov     rbx, rax
.text:0000000000011364                 jmp     loc_114CE
.text:0000000000011364 ; ---------------------------------------------------------------------------
.text:0000000000011369                 align 10h
.text:0000000000011370
.text:0000000000011370 loc_11370:                              ; CODE XREF: update_cur_sifted_state+791↓j
.text:0000000000011370                 mov     rax, [r15+18h]
.text:0000000000011374                 sub     rax, [r15+10h]
.text:0000000000011378                 test    rax, rax
.text:000000000001137B                 lea     r9, [rbp+rax+0]
.text:0000000000011380                 jz      loc_114E0
.text:0000000000011386                 mov     rax, [r12+18h]
.text:000000000001138B                 mov     rsi, [rsp+0D8h+var_B0]
.text:0000000000011390                 mov     r10, [rax+rsi]
.text:0000000000011394
.text:0000000000011394 loc_11394:                              ; CODE XREF: update_cur_sifted_state+7B2↓j
.text:0000000000011394                 cmp     r9, [rbx+18h]
.text:0000000000011398                 jg      loc_114D7
.text:000000000001139E                 mov     rax, [rbx]
.text:00000000000113A1                 mov     rax, [rax+r9*8]
.text:00000000000113A5                 test    rax, rax
.text:00000000000113A8                 jz      loc_114D7
.text:00000000000113AE                 mov     rdi, [rax+10h]
.text:00000000000113B2                 lea     rsi, [rax+18h]
.text:00000000000113B6                 mov     rdx, r10
.text:00000000000113B9                 call    re_node_set_contains_isra_3
.text:00000000000113BE                 test    rax, rax
.text:00000000000113C1                 jz      loc_114D7
.text:00000000000113C7                 sub     rsp, 8
.text:00000000000113CB                 lea     rdx, [rbx+30h]
.text:00000000000113CF                 lea     rsi, [rbx+28h]
.text:00000000000113D3                 push    r9
.text:00000000000113D5                 mov     rdi, [rsp+0E8h+var_D0]
.text:00000000000113DA                 mov     rcx, r14
.text:00000000000113DD                 mov     r9, r10
.text:00000000000113E0                 mov     r8, rbp
.text:00000000000113E3                 call    check_dst_limits_isra_13
.text:00000000000113E8                 test    al, al
.text:00000000000113EA                 pop     rdx
.text:00000000000113EB                 pop     rcx
.text:00000000000113EC                 jnz     loc_114D7
.text:00000000000113F2                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:00000000000113F8                 jz      loc_11508
.text:00000000000113FE
.text:00000000000113FE loc_113FE:                              ; CODE XREF: update_cur_sifted_state+808↓j
.text:00000000000113FE                 mov     rax, [rsp+0D8h+var_A0]
.text:0000000000011403                 mov     rsi, r13
.text:0000000000011406                 mov     qword ptr [rsp+0D8h+var_68], r14
.text:000000000001140B                 mov     qword ptr [rsp+0D8h+var_68+8], rbp
.text:0000000000011410                 lea     rdi, [rax+20h]
.text:0000000000011414                 call    re_node_set_insert
.text:0000000000011419                 test    al, al
.text:000000000001141B                 jz      loc_11574
.text:0000000000011421                 mov     rdi, [rsp+0D8h+var_C0]
.text:0000000000011426                 mov     rax, qword ptr [rsp+0D8h+var_78]
.text:000000000001142B                 mov     rsi, [rsp+0D8h+var_A0]
.text:0000000000011430                 mov     r15, [rax+rdi]
.text:0000000000011434                 mov     rdi, [rsp+0D8h+var_D0]
.text:0000000000011439                 call    sift_states_backward
.text:000000000001143E                 test    eax, eax
.text:0000000000011440                 jnz     loc_1154E
.text:0000000000011446                 mov     rsi, [rbx+8]
.text:000000000001144A                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000001144F                 test    rsi, rsi
.text:0000000000011452                 jz      short loc_1146D
.text:0000000000011454                 lea     rcx, [rbp+1]
.text:0000000000011458                 mov     rdi, r12
.text:000000000001145B                 call    merge_state_array
.text:0000000000011460                 test    eax, eax
.text:0000000000011462                 jnz     loc_1154E
.text:0000000000011468                 mov     rdx, qword ptr [rsp+0D8h+var_78]
.text:000000000001146D
.text:000000000001146D loc_1146D:                              ; CODE XREF: update_cur_sifted_state+712↑j
.text:000000000001146D                 mov     r11, [rsp+0D8h+var_A0]
.text:0000000000011472                 mov     rax, [rsp+0D8h+var_C0]
.text:0000000000011477                 mov     rdi, [rsp+0D8h+var_50]
.text:000000000001147F                 lea     r9, [r11+30h]
.text:0000000000011483                 mov     [rdx+rax], r15
.text:0000000000011487                 mov     rdx, r13
.text:000000000001148A                 mov     rsi, r9
.text:000000000001148D                 call    re_node_set_contains_isra_3
.text:0000000000011492                 sub     rax, 1
.text:0000000000011496                 mov     rdx, rax
.text:0000000000011499                 js      short loc_114A7
.text:000000000001149B                 lea     rdi, [r11+28h]
.text:000000000001149F                 mov     rsi, r9
.text:00000000000114A2                 call    re_node_set_remove_at_isra_4_part_5
.text:00000000000114A7
.text:00000000000114A7 loc_114A7:                              ; CODE XREF: update_cur_sifted_state+759↑j
.text:00000000000114A7                 mov     rcx, [rsp+0D8h+var_D0]
.text:00000000000114AC                 lea     rax, [r13+r13*4+0]
.text:00000000000114B1                 mov     rdx, [rcx+0D8h]
.text:00000000000114B8                 lea     rax, [rdx+rax*8]
.text:00000000000114BC                 nop     dword ptr [rax+00h]
.text:00000000000114C0
.text:00000000000114C0 loc_114C0:                              ; CODE XREF: update_cur_sifted_state+79A↓j
.text:00000000000114C0                 add     r13, 1
.text:00000000000114C4                 cmp     byte ptr [rax+20h], 0
.text:00000000000114C8                 lea     r15, [rax+28h]
.text:00000000000114CC                 jz      short loc_11500
.text:00000000000114CE
.text:00000000000114CE loc_114CE:                              ; CODE XREF: update_cur_sifted_state+624↑j
.text:00000000000114CE                 cmp     r14, [r15]
.text:00000000000114D1                 jz      loc_11370
.text:00000000000114D7
.text:00000000000114D7 loc_114D7:                              ; CODE XREF: update_cur_sifted_state+658↑j
.text:00000000000114D7                                         ; update_cur_sifted_state+668↑j ...
.text:00000000000114D7                 mov     rax, r15
.text:00000000000114DA                 jmp     short loc_114C0
.text:00000000000114DA ; ---------------------------------------------------------------------------
.text:00000000000114DC                 align 20h
.text:00000000000114E0
.text:00000000000114E0 loc_114E0:                              ; CODE XREF: update_cur_sifted_state+640↑j
.text:00000000000114E0                 mov     rax, [r12+28h]
.text:00000000000114E5                 mov     rdi, [rsp+0D8h+var_A8]
.text:00000000000114EA                 mov     rax, [rax+rdi+10h]
.text:00000000000114EF                 mov     r10, [rax]
.text:00000000000114F2                 jmp     loc_11394
.text:00000000000114F2 ; ---------------------------------------------------------------------------
.text:00000000000114F7                 align 20h
.text:0000000000011500
.text:0000000000011500 loc_11500:                              ; CODE XREF: update_cur_sifted_state+78C↑j
.text:0000000000011500                 mov     r15, rbx
.text:0000000000011503                 jmp     loc_10FA8
.text:0000000000011508 ; ---------------------------------------------------------------------------
.text:0000000000011508
.text:0000000000011508 loc_11508:                              ; CODE XREF: update_cur_sifted_state+6B8↑j
.text:0000000000011508                 mov     rax, [rbx+30h]
.text:000000000001150C                 lea     rsi, [rbx+20h]
.text:0000000000011510                 movdqa  xmm0, xmmword ptr [rbx]
.text:0000000000011514                 mov     [rsp+0D8h+ptr], rax
.text:000000000001151C                 mov     rax, [rsp+0D8h+var_A0]
.text:0000000000011521                 movaps  [rsp+0D8h+var_78], xmm0
.text:0000000000011526                 lea     rdi, [rax+20h]
.text:000000000001152A                 movdqa  xmm0, xmmword ptr [rbx+10h]
.text:000000000001152F                 movaps  [rsp+0D8h+var_68], xmm0
.text:0000000000011534                 movdqa  xmm0, xmmword ptr [rbx+20h]
.text:0000000000011539                 movaps  xmmword ptr [rsp+80h], xmm0
.text:0000000000011541                 call    re_node_set_init_copy
.text:0000000000011546                 test    eax, eax
.text:0000000000011548                 jz      loc_113FE
.text:000000000001154E
.text:000000000001154E loc_1154E:                              ; CODE XREF: update_cur_sifted_state+700↑j
.text:000000000001154E                                         ; update_cur_sifted_state+722↑j ...
.text:000000000001154E                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000011554                 jz      loc_10DD8
.text:000000000001155A
.text:000000000001155A loc_1155A:                              ; CODE XREF: update_cur_sifted_state+849↓j
.text:000000000001155A                 mov     rdi, [rsp+0D8h+ptr] ; ptr
.text:0000000000011562                 mov     dword ptr [rsp+0D8h+var_D0], eax
.text:0000000000011566                 call    _free
.text:000000000001156B                 mov     eax, dword ptr [rsp+0D8h+var_D0]
.text:000000000001156F                 jmp     loc_10DD8
.text:0000000000011574 ; ---------------------------------------------------------------------------
.text:0000000000011574
.text:0000000000011574 loc_11574:                              ; CODE XREF: update_cur_sifted_state+6DB↑j
.text:0000000000011574                 mov     eax, 0Ch
.text:0000000000011579                 jmp     short loc_1154E
.text:000000000001157B ; ---------------------------------------------------------------------------
.text:000000000001157B
.text:000000000001157B loc_1157B:                              ; CODE XREF: update_cur_sifted_state+27C↑j
.text:000000000001157B                 cmp     qword ptr [rsp+0D8h+var_78], 0
.text:0000000000011581                 jz      loc_11020
.text:0000000000011587                 xor     eax, eax
.text:0000000000011589                 jmp     short loc_1155A
.text:000000000001158B ; ---------------------------------------------------------------------------
.text:000000000001158B
.text:000000000001158B loc_1158B:                              ; CODE XREF: update_cur_sifted_state+A9↑j
.text:000000000001158B                 call    ___stack_chk_fail
.text:000000000001158B ; } // starts at 10D40
.text:000000000001158B update_cur_sifted_state endp
.text:000000000001158B
.text:0000000000011590
.text:0000000000011590 ; =============== S U B R O U T I N E =======================================
.text:0000000000011590
.text:0000000000011590
.text:0000000000011590 parse_bracket_element_constprop_37 proc near
.text:0000000000011590                                         ; CODE XREF: parse_expression+90F↓p
.text:0000000000011590                                         ; parse_expression+E67↓p
.text:0000000000011590
.text:0000000000011590 var_40          = byte ptr -40h
.text:0000000000011590 var_30          = qword ptr -30h
.text:0000000000011590
.text:0000000000011590 ; __unwind {
.text:0000000000011590                 push    r14
.text:0000000000011592                 push    r13
.text:0000000000011594                 mov     r10, rsi
.text:0000000000011597                 push    r12
.text:0000000000011599                 push    rbp
.text:000000000001159A                 movsxd  r11, ecx
.text:000000000001159D                 push    rbx
.text:000000000001159E                 mov     rbp, rdx
.text:00000000000115A1                 mov     rbx, rdi
.text:00000000000115A4                 sub     rsp, 20h
.text:00000000000115A8                 mov     r12, [rsi+48h]
.text:00000000000115AC                 mov     rax, fs:28h
.text:00000000000115B5                 mov     [rsp+48h+var_30], rax
.text:00000000000115BA                 xor     eax, eax
.text:00000000000115BC                 cmp     dword ptr [rsi+90h], 1
.text:00000000000115C3                 jz      short loc_11618
.text:00000000000115C5                 mov     rsi, r12
.text:00000000000115C8                 mov     rdi, r10
.text:00000000000115CB                 call    re_string_char_size_at_part_0
.text:00000000000115D0                 cmp     eax, 1
.text:00000000000115D3                 jle     short loc_11618
.text:00000000000115D5                 mov     rdx, [r10+10h]
.text:00000000000115D9                 cdqe
.text:00000000000115DB                 mov     dword ptr [rbx], 1
.text:00000000000115E1                 add     rax, r12
.text:00000000000115E4                 mov     edx, [rdx+r12*4]
.text:00000000000115E8                 mov     [rbx+8], edx
.text:00000000000115EB                 mov     [r10+48h], rax
.text:00000000000115EF                 xor     eax, eax
.text:00000000000115F1
.text:00000000000115F1 loc_115F1:                              ; CODE XREF: parse_bracket_element_constprop_37+BD↓j
.text:00000000000115F1                                         ; parse_bracket_element_constprop_37+161↓j ...
.text:00000000000115F1                 mov     rcx, [rsp+48h+var_30]
.text:00000000000115F6                 xor     rcx, fs:28h
.text:00000000000115FF                 jnz     loc_117E8
.text:0000000000011605                 add     rsp, 20h
.text:0000000000011609                 pop     rbx
.text:000000000001160A                 pop     rbp
.text:000000000001160B                 pop     r12
.text:000000000001160D                 pop     r13
.text:000000000001160F                 pop     r14
.text:0000000000011611                 retn
.text:0000000000011611 ; ---------------------------------------------------------------------------
.text:0000000000011612                 align 8
.text:0000000000011618
.text:0000000000011618 loc_11618:                              ; CODE XREF: parse_bracket_element_constprop_37+33↑j
.text:0000000000011618                                         ; parse_bracket_element_constprop_37+43↑j
.text:0000000000011618                 movzx   eax, byte ptr [rbp+8]
.text:000000000001161C                 add     r11, r12
.text:000000000001161F                 mov     [r10+48h], r11
.text:0000000000011623                 mov     edx, eax
.text:0000000000011625                 and     edx, 0FFFFFFFBh
.text:0000000000011628                 cmp     dl, 1Ah
.text:000000000001162B                 jz      short loc_11650
.text:000000000001162D                 cmp     al, 1Ch
.text:000000000001162F                 jz      short loc_11650
.text:0000000000011631                 cmp     al, 16h
.text:0000000000011633                 jnz     short loc_1163E
.text:0000000000011635                 test    r9b, r9b
.text:0000000000011638                 jz      loc_11782
.text:000000000001163E
.text:000000000001163E loc_1163E:                              ; CODE XREF: parse_bracket_element_constprop_37+A3↑j
.text:000000000001163E                                         ; parse_bracket_element_constprop_37+20A↓j
.text:000000000001163E                 movzx   eax, byte ptr [rbp+0]
.text:0000000000011642                 mov     dword ptr [rbx], 0
.text:0000000000011648                 mov     [rbx+8], al
.text:000000000001164B                 xor     eax, eax
.text:000000000001164D                 jmp     short loc_115F1
.text:000000000001164D ; ---------------------------------------------------------------------------
.text:000000000001164F                 align 10h
.text:0000000000011650
.text:0000000000011650 loc_11650:                              ; CODE XREF: parse_bracket_element_constprop_37+9B↑j
.text:0000000000011650                                         ; parse_bracket_element_constprop_37+9F↑j
.text:0000000000011650                 mov     r12, [r10+68h]
.text:0000000000011654                 cmp     r11, r12
.text:0000000000011657                 jge     loc_11778
.text:000000000001165D                 movzx   r13d, byte ptr [rbp+0]
.text:0000000000011662                 xor     r8d, r8d
.text:0000000000011665                 jmp     short loc_11692
.text:0000000000011665 ; ---------------------------------------------------------------------------
.text:0000000000011667                 align 10h
.text:0000000000011670
.text:0000000000011670 loc_11670:                              ; CODE XREF: parse_bracket_element_constprop_37+126↓j
.text:0000000000011670                                         ; parse_bracket_element_constprop_37+130↓j
.text:0000000000011670                 mov     rax, [rbx+8]
.text:0000000000011674                 mov     [rax+r8], r9b
.text:0000000000011678                 add     r8, 1
.text:000000000001167C                 cmp     r8, 20h ; ' '
.text:0000000000011680                 jz      loc_11778
.text:0000000000011686                 movzx   eax, byte ptr [rbp+8]
.text:000000000001168A                 mov     r11, [r10+48h]
.text:000000000001168E                 mov     r12, [r10+68h]
.text:0000000000011692
.text:0000000000011692 loc_11692:                              ; CODE XREF: parse_bracket_element_constprop_37+D5↑j
.text:0000000000011692                 cmp     al, 1Eh
.text:0000000000011694                 movsxd  r14, r8d
.text:0000000000011697                 jz      short loc_11700
.text:0000000000011699
.text:0000000000011699 loc_11699:                              ; CODE XREF: parse_bracket_element_constprop_37+178↓j
.text:0000000000011699                                         ; parse_bracket_element_constprop_37+197↓j ...
.text:0000000000011699                 mov     rdx, [r10+8]
.text:000000000001169D                 lea     rax, [r11+1]
.text:00000000000116A1                 mov     [r10+48h], rax
.text:00000000000116A5                 movzx   r9d, byte ptr [rdx+r11]
.text:00000000000116AA
.text:00000000000116AA loc_116AA:                              ; CODE XREF: parse_bracket_element_constprop_37+1DD↓j
.text:00000000000116AA                                         ; parse_bracket_element_constprop_37+22C↓j
.text:00000000000116AA                 cmp     rax, r12
.text:00000000000116AD                 jge     loc_11778
.text:00000000000116B3                 cmp     r13b, r9b
.text:00000000000116B6                 jnz     short loc_11670
.text:00000000000116B8                 mov     rdx, [r10+8]
.text:00000000000116BC                 cmp     byte ptr [rdx+rax], 5Dh ; ']'
.text:00000000000116C0                 jnz     short loc_11670
.text:00000000000116C2                 add     rax, 1
.text:00000000000116C6                 mov     [r10+48h], rax
.text:00000000000116CA                 mov     rax, [rbx+8]
.text:00000000000116CE                 mov     byte ptr [rax+r14], 0
.text:00000000000116D3                 movzx   eax, byte ptr [rbp+8]
.text:00000000000116D7                 cmp     al, 1Ch
.text:00000000000116D9                 jz      loc_117DB
.text:00000000000116DF                 cmp     al, 1Eh
.text:00000000000116E1                 jz      loc_117CE
.text:00000000000116E7                 cmp     al, 1Ah
.text:00000000000116E9                 jz      loc_117C1
.text:00000000000116EF                 xor     eax, eax
.text:00000000000116F1                 jmp     loc_115F1
.text:00000000000116F1 ; ---------------------------------------------------------------------------
.text:00000000000116F6                 align 20h
.text:0000000000011700
.text:0000000000011700 loc_11700:                              ; CODE XREF: parse_bracket_element_constprop_37+107↑j
.text:0000000000011700                 cmp     byte ptr [r10+8Bh], 0
.text:0000000000011708                 jz      short loc_11699
.text:000000000001170A                 cmp     byte ptr [r10+8Ch], 0
.text:0000000000011712                 jz      loc_117A8
.text:0000000000011718                 cmp     r11, [r10+30h]
.text:000000000001171C                 jz      short loc_1172D
.text:000000000001171E                 mov     rax, [r10+10h]
.text:0000000000011722                 cmp     dword ptr [rax+r11*4], 0FFFFFFFFh
.text:0000000000011727                 jz      loc_11699
.text:000000000001172D
.text:000000000001172D loc_1172D:                              ; CODE XREF: parse_bracket_element_constprop_37+18C↑j
.text:000000000001172D                 mov     rax, [r10+18h]
.text:0000000000011731                 mov     rax, [rax+r11*8]
.text:0000000000011735                 add     rax, [r10]
.text:0000000000011738                 add     rax, [r10+28h]
.text:000000000001173C                 movzx   r9d, byte ptr [rax]
.text:0000000000011740                 test    r9b, 80h
.text:0000000000011744                 jnz     loc_11699
.text:000000000001174A                 cmp     dword ptr [r10+90h], 1
.text:0000000000011752                 mov     eax, 1
.text:0000000000011757                 jz      short loc_11766
.text:0000000000011759                 mov     rsi, r11
.text:000000000001175C                 mov     rdi, r10
.text:000000000001175F                 call    re_string_char_size_at_part_0
.text:0000000000011764                 cdqe
.text:0000000000011766
.text:0000000000011766 loc_11766:                              ; CODE XREF: parse_bracket_element_constprop_37+1C7↑j
.text:0000000000011766                 add     rax, r11
.text:0000000000011769                 mov     [r10+48h], rax
.text:000000000001176D                 jmp     loc_116AA
.text:000000000001176D ; ---------------------------------------------------------------------------
.text:0000000000011772                 align 8
.text:0000000000011778
.text:0000000000011778 loc_11778:                              ; CODE XREF: parse_bracket_element_constprop_37+C7↑j
.text:0000000000011778                                         ; parse_bracket_element_constprop_37+F0↑j ...
.text:0000000000011778                 mov     eax, 7
.text:000000000001177D                 jmp     loc_115F1
.text:0000000000011782 ; ---------------------------------------------------------------------------
.text:0000000000011782
.text:0000000000011782 loc_11782:                              ; CODE XREF: parse_bracket_element_constprop_37+A8↑j
.text:0000000000011782                 mov     rdi, rsp
.text:0000000000011785                 mov     rdx, r8
.text:0000000000011788                 mov     rsi, r10
.text:000000000001178B                 call    peek_token_bracket
.text:0000000000011790                 cmp     [rsp+48h+var_40], 15h
.text:0000000000011795                 mov     eax, 0Bh
.text:000000000001179A                 jz      loc_1163E
.text:00000000000117A0                 jmp     loc_115F1
.text:00000000000117A0 ; ---------------------------------------------------------------------------
.text:00000000000117A5                 align 8
.text:00000000000117A8
.text:00000000000117A8 loc_117A8:                              ; CODE XREF: parse_bracket_element_constprop_37+182↑j
.text:00000000000117A8                 lea     rax, [r11+1]
.text:00000000000117AC                 add     r11, [r10]
.text:00000000000117AF                 mov     rdx, [r10+28h]
.text:00000000000117B3                 mov     [r10+48h], rax
.text:00000000000117B7                 movzx   r9d, byte ptr [r11+rdx]
.text:00000000000117BC                 jmp     loc_116AA
.text:00000000000117C1 ; ---------------------------------------------------------------------------
.text:00000000000117C1
.text:00000000000117C1 loc_117C1:                              ; CODE XREF: parse_bracket_element_constprop_37+159↑j
.text:00000000000117C1                 mov     dword ptr [rbx], 3
.text:00000000000117C7                 xor     eax, eax
.text:00000000000117C9                 jmp     loc_115F1
.text:00000000000117CE ; ---------------------------------------------------------------------------
.text:00000000000117CE
.text:00000000000117CE loc_117CE:                              ; CODE XREF: parse_bracket_element_constprop_37+151↑j
.text:00000000000117CE                 mov     dword ptr [rbx], 4
.text:00000000000117D4                 xor     eax, eax
.text:00000000000117D6                 jmp     loc_115F1
.text:00000000000117DB ; ---------------------------------------------------------------------------
.text:00000000000117DB
.text:00000000000117DB loc_117DB:                              ; CODE XREF: parse_bracket_element_constprop_37+149↑j
.text:00000000000117DB                 mov     dword ptr [rbx], 2
.text:00000000000117E1                 xor     eax, eax
.text:00000000000117E3                 jmp     loc_115F1
.text:00000000000117E8 ; ---------------------------------------------------------------------------
.text:00000000000117E8
.text:00000000000117E8 loc_117E8:                              ; CODE XREF: parse_bracket_element_constprop_37+6F↑j
.text:00000000000117E8                 call    ___stack_chk_fail
.text:00000000000117E8 ; } // starts at 11590
.text:00000000000117E8 parse_bracket_element_constprop_37 endp
.text:00000000000117E8
.text:00000000000117E8 ; ---------------------------------------------------------------------------
.text:00000000000117ED                 align 10h
.text:00000000000117F0
.text:00000000000117F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000117F0
.text:00000000000117F0
.text:00000000000117F0 peek_token      proc near               ; CODE XREF: peek_token+6BA↓p
.text:00000000000117F0                                         ; fetch_number+29↓p ...
.text:00000000000117F0
.text:00000000000117F0 var_68          = qword ptr -68h
.text:00000000000117F0 var_60          = qword ptr -60h
.text:00000000000117F0 var_58          = byte ptr -58h
.text:00000000000117F0 var_50          = byte ptr -50h
.text:00000000000117F0 var_40          = qword ptr -40h
.text:00000000000117F0
.text:00000000000117F0 ; __unwind {
.text:00000000000117F0                 push    r15
.text:00000000000117F2                 push    r14
.text:00000000000117F4                 push    r13
.text:00000000000117F6                 push    r12
.text:00000000000117F8                 push    rbp
.text:00000000000117F9                 push    rbx
.text:00000000000117FA                 mov     rbp, rdi
.text:00000000000117FD                 sub     rsp, 38h
.text:0000000000011801                 mov     r14, [rsi+48h]
.text:0000000000011805                 mov     rax, fs:28h
.text:000000000001180E                 mov     [rsp+68h+var_40], rax
.text:0000000000011813                 xor     eax, eax
.text:0000000000011815                 cmp     [rsi+68h], r14
.text:0000000000011819                 jle     loc_118B0
.text:000000000001181F                 movzx   r13d, byte ptr [rdi+0Ah]
.text:0000000000011824                 mov     r15, rdx
.text:0000000000011827                 mov     rdx, [rsi+8]
.text:000000000001182B                 mov     rbx, rsi
.text:000000000001182E                 movzx   r12d, byte ptr [rdx+r14]
.text:0000000000011833                 and     r13d, 0FFFFFF9Fh
.text:0000000000011837                 mov     [rdi+0Ah], r13b
.text:000000000001183B                 mov     eax, [rsi+90h]
.text:0000000000011841                 mov     [rdi], r12b
.text:0000000000011844                 cmp     eax, 1
.text:0000000000011847                 jle     loc_118E0
.text:000000000001184D                 cmp     r14, [rsi+30h]
.text:0000000000011851                 jz      loc_119F0
.text:0000000000011857                 mov     rcx, [rsi+10h]
.text:000000000001185B                 mov     ecx, [rcx+r14*4]
.text:000000000001185F                 cmp     ecx, 0FFFFFFFFh
.text:0000000000011862                 jz      loc_11940
.text:0000000000011868                 cmp     r12b, 5Ch ; '\'
.text:000000000001186C                 jz      loc_11960
.text:0000000000011872                 mov     byte ptr [rdi+8], 1
.text:0000000000011876
.text:0000000000011876 loc_11876:                              ; CODE XREF: peek_token+216↓j
.text:0000000000011876                 mov     edi, ecx        ; wc
.text:0000000000011878                 mov     [rsp+68h+var_60], rdx
.text:000000000001187D                 mov     dword ptr [rsp+68h+var_68], ecx
.text:0000000000011880                 call    _iswalnum
.text:0000000000011885                 mov     ecx, dword ptr [rsp+68h+var_68]
.text:0000000000011888                 test    eax, eax
.text:000000000001188A                 setnz   al
.text:000000000001188D                 cmp     ecx, 5Fh ; '_'
.text:0000000000011890                 setz    cl
.text:0000000000011893                 or      eax, ecx
.text:0000000000011895                 shl     eax, 6
.text:0000000000011898                 or      r13d, eax
.text:000000000001189B                 mov     [rbp+0Ah], r13b
.text:000000000001189F                 mov     rdx, [rsp+68h+var_60]
.text:00000000000118A4                 jmp     short loc_1191C
.text:00000000000118A4 ; ---------------------------------------------------------------------------
.text:00000000000118A6                 align 10h
.text:00000000000118B0
.text:00000000000118B0 loc_118B0:                              ; CODE XREF: peek_token+29↑j
.text:00000000000118B0                 mov     byte ptr [rdi+8], 2
.text:00000000000118B4
.text:00000000000118B4 loc_118B4:                              ; CODE XREF: peek_token+161↓j
.text:00000000000118B4                                         ; peek_token+229↓j ...
.text:00000000000118B4                 mov     rdi, [rsp+68h+var_40]
.text:00000000000118B9                 xor     rdi, fs:28h
.text:00000000000118C2                 jnz     loc_11EE8
.text:00000000000118C8                 add     rsp, 38h
.text:00000000000118CC                 pop     rbx
.text:00000000000118CD                 pop     rbp
.text:00000000000118CE                 pop     r12
.text:00000000000118D0                 pop     r13
.text:00000000000118D2                 pop     r14
.text:00000000000118D4                 pop     r15
.text:00000000000118D6                 retn
.text:00000000000118D6 ; ---------------------------------------------------------------------------
.text:00000000000118D7                 align 20h
.text:00000000000118E0
.text:00000000000118E0 loc_118E0:                              ; CODE XREF: peek_token+57↑j
.text:00000000000118E0                 cmp     r12b, 5Ch ; '\'
.text:00000000000118E4                 jz      short loc_11960
.text:00000000000118E6                 mov     byte ptr [rbp+8], 1
.text:00000000000118EA                 mov     [rsp+68h+var_68], rdx
.text:00000000000118EE                 call    ___ctype_b_loc
.text:00000000000118F3                 mov     rsi, [rax]
.text:00000000000118F6                 movzx   ecx, r12b
.text:00000000000118FA                 movzx   eax, word ptr [rsi+rcx*2]
.text:00000000000118FE                 shr     ax, 3
.text:0000000000011902                 and     eax, 1
.text:0000000000011905                 cmp     r12b, 5Fh ; '_'
.text:0000000000011909                 setz    cl
.text:000000000001190C                 or      eax, ecx
.text:000000000001190E                 shl     eax, 6
.text:0000000000011911                 or      r13d, eax
.text:0000000000011914                 mov     [rbp+0Ah], r13b
.text:0000000000011918                 mov     rdx, [rsp+68h+var_68]
.text:000000000001191C
.text:000000000001191C loc_1191C:                              ; CODE XREF: peek_token+B4↑j
.text:000000000001191C                 sub     r12d, 0Ah       ; switch 116 cases
.text:0000000000011920                 cmp     r12b, 73h
.text:0000000000011924                 ja      def_1193C       ; jumptable 000000000001193C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:000000000001192A                 lea     rcx, jpt_1193C
.text:0000000000011931                 movzx   r12d, r12b
.text:0000000000011935                 movsxd  rax, ds:(jpt_1193C - 16BD4h)[rcx+r12*4]
.text:0000000000011939                 add     rax, rcx
.text:000000000001193C                 jmp     rax             ; switch jump
.text:000000000001193C ; ---------------------------------------------------------------------------
.text:000000000001193E                 align 20h
.text:0000000000011940
.text:0000000000011940 loc_11940:                              ; CODE XREF: peek_token+72↑j
.text:0000000000011940                 or      r13d, 20h
.text:0000000000011944                 mov     byte ptr [rdi+8], 1
.text:0000000000011948                 mov     eax, 1
.text:000000000001194D                 mov     [rdi+0Ah], r13b
.text:0000000000011951                 jmp     loc_118B4
.text:0000000000011951 ; ---------------------------------------------------------------------------
.text:0000000000011956                 align 20h
.text:0000000000011960
.text:0000000000011960 loc_11960:                              ; CODE XREF: peek_token+7C↑j
.text:0000000000011960                                         ; peek_token+F4↑j ...
.text:0000000000011960                 lea     rsi, [r14+1]
.text:0000000000011964                 cmp     rsi, [rbx+58h]
.text:0000000000011968                 jge     loc_11A10
.text:000000000001196E                 cmp     byte ptr [rbx+8Bh], 0
.text:0000000000011975                 jnz     loc_11E00
.text:000000000001197B
.text:000000000001197B loc_1197B:                              ; CODE XREF: peek_token+66F↓j
.text:000000000001197B                 movzx   edi, byte ptr [rdx+r14+1]
.text:0000000000011981                 mov     r12d, edi
.text:0000000000011984                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000011988
.text:0000000000011988 loc_11988:                              ; CODE XREF: peek_token+675↓j
.text:0000000000011988                                         ; peek_token+6A6↓j
.text:0000000000011988                 cmp     eax, 1
.text:000000000001198B                 mov     [rbp+0], r12b
.text:000000000001198F                 mov     byte ptr [rbp+8], 1
.text:0000000000011993                 jle     loc_11DE0
.text:0000000000011999                 mov     rax, [rbx+10h]
.text:000000000001199D                 mov     r8d, [rax+rsi*4]
.text:00000000000119A1
.text:00000000000119A1 loc_119A1:                              ; CODE XREF: peek_token+6F3↓j
.text:00000000000119A1                 mov     edi, r8d        ; wc
.text:00000000000119A4                 mov     dword ptr [rsp+68h+var_68], r8d
.text:00000000000119A8                 call    _iswalnum
.text:00000000000119AD                 mov     r8d, dword ptr [rsp+68h+var_68]
.text:00000000000119B1                 test    eax, eax
.text:00000000000119B3                 setnz   al
.text:00000000000119B6                 cmp     r8d, 5Fh ; '_'
.text:00000000000119BA
.text:00000000000119BA loc_119BA:                              ; CODE XREF: peek_token+60B↓j
.text:00000000000119BA                 setz    dl
.text:00000000000119BD                 lea     ecx, [r12-27h]  ; switch 87 cases
.text:00000000000119C2                 or      eax, edx
.text:00000000000119C4                 shl     eax, 6
.text:00000000000119C7                 or      r13d, eax
.text:00000000000119CA                 cmp     cl, 56h
.text:00000000000119CD                 mov     [rbp+0Ah], r13b
.text:00000000000119D1                 ja      def_119E8       ; jumptable 00000000000119E8 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:00000000000119D7                 lea     rdx, jpt_119E8
.text:00000000000119DE                 movzx   ecx, cl
.text:00000000000119E1                 movsxd  rax, ds:(jpt_119E8 - 16DA4h)[rdx+rcx*4]
.text:00000000000119E5                 add     rax, rdx
.text:00000000000119E8                 jmp     rax             ; switch jump
.text:00000000000119E8 ; ---------------------------------------------------------------------------
.text:00000000000119EA                 align 10h
.text:00000000000119F0
.text:00000000000119F0 loc_119F0:                              ; CODE XREF: peek_token+61↑j
.text:00000000000119F0                 cmp     r12b, 5Ch ; '\'
.text:00000000000119F4                 jz      loc_11960
.text:00000000000119FA                 mov     rax, [rbx+10h]
.text:00000000000119FE                 mov     byte ptr [rbp+8], 1
.text:0000000000011A02                 mov     ecx, [rax+r14*4]
.text:0000000000011A06                 jmp     loc_11876
.text:0000000000011A06 ; ---------------------------------------------------------------------------
.text:0000000000011A0B                 align 10h
.text:0000000000011A10
.text:0000000000011A10 loc_11A10:                              ; CODE XREF: peek_token+178↑j
.text:0000000000011A10                 mov     byte ptr [rbp+8], 24h ; '$'
.text:0000000000011A14                 mov     eax, 1
.text:0000000000011A19                 jmp     loc_118B4
.text:0000000000011A19 ; ---------------------------------------------------------------------------
.text:0000000000011A1E                 align 20h
.text:0000000000011A20
.text:0000000000011A20 loc_11A20:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011A20                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011A20                 and     r15d, 1200h     ; jumptable 000000000001193C case 125
.text:0000000000011A27                 mov     eax, 1
.text:0000000000011A2C                 cmp     r15, 1200h
.text:0000000000011A33                 jnz     loc_118B4
.text:0000000000011A39
.text:0000000000011A39 loc_11A39:                              ; CODE XREF: peek_token+451↓j
.text:0000000000011A39                 mov     byte ptr [rbp+8], 18h
.text:0000000000011A3D                 jmp     loc_118B4
.text:0000000000011A3D ; ---------------------------------------------------------------------------
.text:0000000000011A42                 align 8
.text:0000000000011A48
.text:0000000000011A48 loc_11A48:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011A48                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011A48                 and     r15d, 8400h     ; jumptable 000000000001193C case 124
.text:0000000000011A4F                 cmp     r15, 8000h
.text:0000000000011A56                 jz      loc_11B32
.text:0000000000011A5C
.text:0000000000011A5C def_1193C:                              ; CODE XREF: peek_token+134↑j
.text:0000000000011A5C                                         ; peek_token+14C↑j ...
.text:0000000000011A5C                 mov     eax, 1          ; jumptable 000000000001193C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000011A61                 jmp     loc_118B4
.text:0000000000011A61 ; ---------------------------------------------------------------------------
.text:0000000000011A66                 align 10h
.text:0000000000011A70
.text:0000000000011A70 loc_11A70:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011A70                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011A70                 and     r15d, 1200h     ; jumptable 000000000001193C case 123
.text:0000000000011A77                 mov     eax, 1
.text:0000000000011A7C                 cmp     r15, 1200h
.text:0000000000011A83                 jnz     loc_118B4
.text:0000000000011A89
.text:0000000000011A89 loc_11A89:                              ; CODE XREF: peek_token+3FD↓j
.text:0000000000011A89                 mov     byte ptr [rbp+8], 17h
.text:0000000000011A8D                 jmp     loc_118B4
.text:0000000000011A8D ; ---------------------------------------------------------------------------
.text:0000000000011A92                 align 8
.text:0000000000011A98
.text:0000000000011A98 loc_11A98:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011A98                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011A98                 test    r15d, 800008h   ; jumptable 000000000001193C case 94
.text:0000000000011A9F                 jnz     short loc_11AAA
.text:0000000000011AA1                 test    r14, r14
.text:0000000000011AA4                 jnz     loc_11E6A
.text:0000000000011AAA
.text:0000000000011AAA loc_11AAA:                              ; CODE XREF: peek_token+2AF↑j
.text:0000000000011AAA                                         ; peek_token+693↓j
.text:0000000000011AAA                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011AAE                 mov     dword ptr [rbp+0], 10h
.text:0000000000011AB5                 mov     eax, 1
.text:0000000000011ABA                 jmp     loc_118B4
.text:0000000000011ABA ; ---------------------------------------------------------------------------
.text:0000000000011ABF                 align 20h
.text:0000000000011AC0
.text:0000000000011AC0 loc_11AC0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011AC0                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011AC0                 mov     byte ptr [rbp+8], 14h ; jumptable 000000000001193C case 91
.text:0000000000011AC4                 mov     eax, 1
.text:0000000000011AC9                 jmp     loc_118B4
.text:0000000000011AC9 ; ---------------------------------------------------------------------------
.text:0000000000011ACE                 align 10h
.text:0000000000011AD0
.text:0000000000011AD0 loc_11AD0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011AD0                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011AD0                 test    r15d, 402h      ; jumptable 000000000001193C case 63
.text:0000000000011AD7                 mov     eax, 1
.text:0000000000011ADC                 jnz     loc_118B4
.text:0000000000011AE2
.text:0000000000011AE2 loc_11AE2:                              ; CODE XREF: peek_token+508↓j
.text:0000000000011AE2                 mov     byte ptr [rbp+8], 13h
.text:0000000000011AE6                 jmp     loc_118B4
.text:0000000000011AE6 ; ---------------------------------------------------------------------------
.text:0000000000011AEB                 align 10h
.text:0000000000011AF0
.text:0000000000011AF0 loc_11AF0:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011AF0                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011AF0                 mov     byte ptr [rbp+8], 5 ; jumptable 000000000001193C case 46
.text:0000000000011AF4                 mov     eax, 1
.text:0000000000011AF9                 jmp     loc_118B4
.text:0000000000011AF9 ; ---------------------------------------------------------------------------
.text:0000000000011AFE                 align 20h
.text:0000000000011B00
.text:0000000000011B00 loc_11B00:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011B00                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011B00                 test    r15d, 402h      ; jumptable 000000000001193C case 43
.text:0000000000011B07                 mov     eax, 1
.text:0000000000011B0C                 jnz     loc_118B4
.text:0000000000011B12
.text:0000000000011B12 loc_11B12:                              ; CODE XREF: peek_token+590↓j
.text:0000000000011B12                 mov     byte ptr [rbp+8], 12h
.text:0000000000011B16                 jmp     loc_118B4
.text:0000000000011B16 ; ---------------------------------------------------------------------------
.text:0000000000011B1B                 align 20h
.text:0000000000011B20
.text:0000000000011B20 loc_11B20:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011B20                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011B20                 test    r15d, 800h      ; jumptable 000000000001193C case 10
.text:0000000000011B27                 mov     eax, 1
.text:0000000000011B2C                 jz      loc_118B4
.text:0000000000011B32
.text:0000000000011B32 loc_11B32:                              ; CODE XREF: peek_token+266↑j
.text:0000000000011B32                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000011B36                 mov     eax, 1
.text:0000000000011B3B                 jmp     loc_118B4
.text:0000000000011B40 ; ---------------------------------------------------------------------------
.text:0000000000011B40
.text:0000000000011B40 loc_11B40:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011B40                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011B40                 mov     byte ptr [rbp+8], 0Bh ; jumptable 000000000001193C case 42
.text:0000000000011B44                 mov     eax, 1
.text:0000000000011B49                 jmp     loc_118B4
.text:0000000000011B49 ; ---------------------------------------------------------------------------
.text:0000000000011B4E                 align 10h
.text:0000000000011B50
.text:0000000000011B50 loc_11B50:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011B50                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011B50                 test    r15d, 2000h     ; jumptable 000000000001193C case 41
.text:0000000000011B57                 mov     eax, 1
.text:0000000000011B5C                 jz      loc_118B4
.text:0000000000011B62
.text:0000000000011B62 loc_11B62:                              ; CODE XREF: peek_token+5A7↓j
.text:0000000000011B62                 mov     byte ptr [rbp+8], 9
.text:0000000000011B66                 jmp     loc_118B4
.text:0000000000011B66 ; ---------------------------------------------------------------------------
.text:0000000000011B6B                 align 10h
.text:0000000000011B70
.text:0000000000011B70 loc_11B70:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011B70                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011B70                 test    r15d, 2000h     ; jumptable 000000000001193C case 40
.text:0000000000011B77                 mov     eax, 1
.text:0000000000011B7C                 jz      loc_118B4
.text:0000000000011B82
.text:0000000000011B82 loc_11B82:                              ; CODE XREF: peek_token+5BE↓j
.text:0000000000011B82                 mov     byte ptr [rbp+8], 8
.text:0000000000011B86                 jmp     loc_118B4
.text:0000000000011B86 ; ---------------------------------------------------------------------------
.text:0000000000011B8B                 align 10h
.text:0000000000011B90
.text:0000000000011B90 loc_11B90:                              ; CODE XREF: peek_token+14C↑j
.text:0000000000011B90                                         ; DATA XREF: .rodata:jpt_1193C↓o
.text:0000000000011B90                 test    r15b, 8         ; jumptable 000000000001193C case 36
.text:0000000000011B94                 jnz     short loc_11BA4
.text:0000000000011B96                 add     r14, 1
.text:0000000000011B9A                 cmp     r14, [rbx+58h]
.text:0000000000011B9E                 jnz     loc_11E9B
.text:0000000000011BA4
.text:0000000000011BA4 loc_11BA4:                              ; CODE XREF: peek_token+3A4↑j
.text:0000000000011BA4                                         ; peek_token+6DA↓j
.text:0000000000011BA4                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011BA8                 mov     dword ptr [rbp+0], 20h ; ' '
.text:0000000000011BAF                 mov     eax, 1
.text:0000000000011BB4                 jmp     loc_118B4
.text:0000000000011BB9 ; ---------------------------------------------------------------------------
.text:0000000000011BB9
.text:0000000000011BB9 loc_11BB9:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011BB9                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011BB9                 test    r15d, 8400h     ; jumptable 00000000000119E8 case 124
.text:0000000000011BC0                 mov     eax, 2
.text:0000000000011BC5                 jnz     loc_118B4
.text:0000000000011BCB                 mov     byte ptr [rbp+8], 0Ah
.text:0000000000011BCF                 jmp     loc_118B4
.text:0000000000011BD4 ; ---------------------------------------------------------------------------
.text:0000000000011BD4
.text:0000000000011BD4 loc_11BD4:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011BD4                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011BD4                 and     r15d, 1200h     ; jumptable 00000000000119E8 case 123
.text:0000000000011BDB                 mov     eax, 2
.text:0000000000011BE0                 cmp     r15, 200h
.text:0000000000011BE7                 jnz     loc_118B4
.text:0000000000011BED                 jmp     loc_11A89
.text:0000000000011BF2 ; ---------------------------------------------------------------------------
.text:0000000000011BF2
.text:0000000000011BF2 loc_11BF2:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011BF2                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011BF2                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 119
.text:0000000000011BF9                 mov     eax, 2
.text:0000000000011BFE                 jnz     loc_118B4
.text:0000000000011C04                 mov     byte ptr [rbp+8], 20h ; ' '
.text:0000000000011C08                 jmp     loc_118B4
.text:0000000000011C0D ; ---------------------------------------------------------------------------
.text:0000000000011C0D
.text:0000000000011C0D loc_11C0D:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011C0D                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011C0D                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 115
.text:0000000000011C14                 mov     eax, 2
.text:0000000000011C19                 jnz     loc_118B4
.text:0000000000011C1F                 mov     byte ptr [rbp+8], 22h ; '"'
.text:0000000000011C23                 jmp     loc_118B4
.text:0000000000011C28 ; ---------------------------------------------------------------------------
.text:0000000000011C28
.text:0000000000011C28 loc_11C28:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011C28                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011C28                 and     r15d, 1200h     ; jumptable 00000000000119E8 case 125
.text:0000000000011C2F                 mov     eax, 2
.text:0000000000011C34                 cmp     r15, 200h
.text:0000000000011C3B                 jnz     loc_118B4
.text:0000000000011C41                 jmp     loc_11A39
.text:0000000000011C46 ; ---------------------------------------------------------------------------
.text:0000000000011C46
.text:0000000000011C46 loc_11C46:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011C46                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011C46                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 98
.text:0000000000011C4D                 mov     eax, 2
.text:0000000000011C52                 jnz     loc_118B4
.text:0000000000011C58                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011C5C                 mov     dword ptr [rbp+0], 100h
.text:0000000000011C63                 jmp     loc_118B4
.text:0000000000011C68 ; ---------------------------------------------------------------------------
.text:0000000000011C68
.text:0000000000011C68 loc_11C68:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011C68                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011C68                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 96
.text:0000000000011C6F                 mov     eax, 2
.text:0000000000011C74                 jnz     loc_118B4
.text:0000000000011C7A                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011C7E                 mov     dword ptr [rbp+0], 40h ; '@'
.text:0000000000011C85                 jmp     loc_118B4
.text:0000000000011C8A ; ---------------------------------------------------------------------------
.text:0000000000011C8A
.text:0000000000011C8A loc_11C8A:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011C8A                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011C8A                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 87
.text:0000000000011C91                 mov     eax, 2
.text:0000000000011C96                 jnz     loc_118B4
.text:0000000000011C9C                 mov     byte ptr [rbp+8], 21h ; '!'
.text:0000000000011CA0                 jmp     loc_118B4
.text:0000000000011CA5 ; ---------------------------------------------------------------------------
.text:0000000000011CA5
.text:0000000000011CA5 loc_11CA5:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011CA5                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011CA5                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 83
.text:0000000000011CAC                 mov     eax, 2
.text:0000000000011CB1                 jnz     loc_118B4
.text:0000000000011CB7                 mov     byte ptr [rbp+8], 23h ; '#'
.text:0000000000011CBB                 jmp     loc_118B4
.text:0000000000011CC0 ; ---------------------------------------------------------------------------
.text:0000000000011CC0
.text:0000000000011CC0 loc_11CC0:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011CC0                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011CC0                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 66
.text:0000000000011CC7                 mov     eax, 2
.text:0000000000011CCC                 jnz     loc_118B4
.text:0000000000011CD2                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011CD6                 mov     dword ptr [rbp+0], 200h
.text:0000000000011CDD                 jmp     loc_118B4
.text:0000000000011CE2 ; ---------------------------------------------------------------------------
.text:0000000000011CE2
.text:0000000000011CE2 loc_11CE2:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011CE2                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011CE2                 and     r15d, 402h      ; jumptable 00000000000119E8 case 63
.text:0000000000011CE9                 mov     eax, 2
.text:0000000000011CEE                 cmp     r15, 2
.text:0000000000011CF2                 jnz     loc_118B4
.text:0000000000011CF8                 jmp     loc_11AE2
.text:0000000000011CFD ; ---------------------------------------------------------------------------
.text:0000000000011CFD
.text:0000000000011CFD loc_11CFD:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011CFD                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011CFD                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 62
.text:0000000000011D04                 mov     eax, 2
.text:0000000000011D09                 jnz     loc_118B4
.text:0000000000011D0F                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011D13                 mov     dword ptr [rbp+0], 9
.text:0000000000011D1A                 jmp     loc_118B4
.text:0000000000011D1F ; ---------------------------------------------------------------------------
.text:0000000000011D1F
.text:0000000000011D1F loc_11D1F:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011D1F                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011D1F                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 60
.text:0000000000011D26                 mov     eax, 2
.text:0000000000011D2B                 jnz     loc_118B4
.text:0000000000011D31                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011D35                 mov     dword ptr [rbp+0], 6
.text:0000000000011D3C                 jmp     loc_118B4
.text:0000000000011D41 ; ---------------------------------------------------------------------------
.text:0000000000011D41
.text:0000000000011D41 loc_11D41:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011D41                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011D41                 test    r15d, 4000h     ; jumptable 00000000000119E8 cases 49-57
.text:0000000000011D48                 mov     eax, 2
.text:0000000000011D4D                 jnz     loc_118B4
.text:0000000000011D53                 mov     edx, dword ptr [rsp+68h+var_60]
.text:0000000000011D57                 mov     byte ptr [rbp+8], 4
.text:0000000000011D5B                 sub     edx, 31h ; '1'
.text:0000000000011D5E                 movsxd  rdx, edx
.text:0000000000011D61                 mov     [rbp+0], rdx
.text:0000000000011D65                 jmp     loc_118B4
.text:0000000000011D6A ; ---------------------------------------------------------------------------
.text:0000000000011D6A
.text:0000000000011D6A loc_11D6A:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011D6A                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011D6A                 and     r15d, 402h      ; jumptable 00000000000119E8 case 43
.text:0000000000011D71                 mov     eax, 2
.text:0000000000011D76                 cmp     r15, 2
.text:0000000000011D7A                 jnz     loc_118B4
.text:0000000000011D80                 jmp     loc_11B12
.text:0000000000011D85 ; ---------------------------------------------------------------------------
.text:0000000000011D85
.text:0000000000011D85 loc_11D85:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011D85                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011D85                 test    r15d, 2000h     ; jumptable 00000000000119E8 case 41
.text:0000000000011D8C                 mov     eax, 2
.text:0000000000011D91                 jnz     loc_118B4
.text:0000000000011D97                 jmp     loc_11B62
.text:0000000000011D9C ; ---------------------------------------------------------------------------
.text:0000000000011D9C
.text:0000000000011D9C loc_11D9C:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011D9C                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011D9C                 test    r15d, 2000h     ; jumptable 00000000000119E8 case 40
.text:0000000000011DA3                 mov     eax, 2
.text:0000000000011DA8                 jnz     loc_118B4
.text:0000000000011DAE                 jmp     loc_11B82
.text:0000000000011DB3 ; ---------------------------------------------------------------------------
.text:0000000000011DB3
.text:0000000000011DB3 loc_11DB3:                              ; CODE XREF: peek_token+1F8↑j
.text:0000000000011DB3                                         ; DATA XREF: .rodata:jpt_119E8↓o
.text:0000000000011DB3                 test    r15d, 80000h    ; jumptable 00000000000119E8 case 39
.text:0000000000011DBA                 mov     eax, 2
.text:0000000000011DBF                 jnz     loc_118B4
.text:0000000000011DC5                 mov     byte ptr [rbp+8], 0Ch
.text:0000000000011DC9                 mov     dword ptr [rbp+0], 80h
.text:0000000000011DD0                 jmp     loc_118B4
.text:0000000000011DD5 ; ---------------------------------------------------------------------------
.text:0000000000011DD5
.text:0000000000011DD5 def_119E8:                              ; CODE XREF: peek_token+1E1↑j
.text:0000000000011DD5                                         ; peek_token+1F8↑j
.text:0000000000011DD5                                         ; DATA XREF: ...
.text:0000000000011DD5                 mov     eax, 2          ; jumptable 00000000000119E8 default case, cases 42,44-48,58,59,61,64,65,67-82,84-86,88-95,97,99-114,116-118,120-122
.text:0000000000011DDA                 jmp     loc_118B4
.text:0000000000011DDA ; ---------------------------------------------------------------------------
.text:0000000000011DDF                 align 20h
.text:0000000000011DE0
.text:0000000000011DE0 loc_11DE0:                              ; CODE XREF: peek_token+1A3↑j
.text:0000000000011DE0                 call    ___ctype_b_loc
.text:0000000000011DE5                 mov     rsi, [rax]
.text:0000000000011DE8                 movzx   edx, r12b
.text:0000000000011DEC                 movzx   eax, word ptr [rsi+rdx*2]
.text:0000000000011DF0                 shr     ax, 3
.text:0000000000011DF4                 and     eax, 1
.text:0000000000011DF7                 cmp     r12b, 5Fh ; '_'
.text:0000000000011DFB                 jmp     loc_119BA
.text:0000000000011E00 ; ---------------------------------------------------------------------------
.text:0000000000011E00
.text:0000000000011E00 loc_11E00:                              ; CODE XREF: peek_token+185↑j
.text:0000000000011E00                 cmp     eax, 1
.text:0000000000011E03                 jle     short loc_11E34
.text:0000000000011E05                 mov     rcx, [rbx+10h]
.text:0000000000011E09                 lea     rdi, ds:0[rsi*4]
.text:0000000000011E11                 mov     r8d, [rcx+rsi*4]
.text:0000000000011E15                 cmp     r8d, 0FFFFFFFFh
.text:0000000000011E19                 jz      loc_11ECF
.text:0000000000011E1F                 lea     r9, [r14+2]
.text:0000000000011E23                 cmp     [rbx+30h], r9
.text:0000000000011E27                 jz      short loc_11E34
.text:0000000000011E29                 cmp     dword ptr [rcx+rdi+4], 0FFFFFFFFh
.text:0000000000011E2E                 jz      loc_11ECF
.text:0000000000011E34
.text:0000000000011E34 loc_11E34:                              ; CODE XREF: peek_token+613↑j
.text:0000000000011E34                                         ; peek_token+637↑j
.text:0000000000011E34                 cmp     byte ptr [rbx+8Ch], 0
.text:0000000000011E3B                 mov     rcx, [rbx]
.text:0000000000011E3E                 mov     rdi, [rbx+28h]
.text:0000000000011E42                 jz      short loc_11E88
.text:0000000000011E44                 mov     r8, [rbx+18h]
.text:0000000000011E48                 add     rcx, rdi
.text:0000000000011E4B                 add     rcx, [r8+rsi*8]
.text:0000000000011E4F                 movzx   edi, byte ptr [rcx]
.text:0000000000011E52                 mov     r12d, edi
.text:0000000000011E55                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000011E59                 and     edi, 80h
.text:0000000000011E5F                 jnz     loc_1197B
.text:0000000000011E65                 jmp     loc_11988
.text:0000000000011E6A ; ---------------------------------------------------------------------------
.text:0000000000011E6A
.text:0000000000011E6A loc_11E6A:                              ; CODE XREF: peek_token+2B4↑j
.text:0000000000011E6A                 cmp     byte ptr [rdx+r14-1], 0Ah
.text:0000000000011E70                 jnz     def_1193C       ; jumptable 000000000001193C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000011E76                 test    r15d, 800h
.text:0000000000011E7D                 jz      def_1193C       ; jumptable 000000000001193C default case, cases 11-35,37-39,44,45,47-62,64-90,92,93,95-122
.text:0000000000011E83                 jmp     loc_11AAA
.text:0000000000011E88 ; ---------------------------------------------------------------------------
.text:0000000000011E88
.text:0000000000011E88 loc_11E88:                              ; CODE XREF: peek_token+652↑j
.text:0000000000011E88                 add     rcx, rsi
.text:0000000000011E8B                 movzx   edi, byte ptr [rcx+rdi]
.text:0000000000011E8F                 mov     r12d, edi
.text:0000000000011E92                 mov     dword ptr [rsp+68h+var_60], edi
.text:0000000000011E96                 jmp     loc_11988
.text:0000000000011E9B ; ---------------------------------------------------------------------------
.text:0000000000011E9B
.text:0000000000011E9B loc_11E9B:                              ; CODE XREF: peek_token+3AE↑j
.text:0000000000011E9B                 lea     rdi, [rsp+68h+var_58]
.text:0000000000011EA0                 mov     rdx, r15
.text:0000000000011EA3                 mov     [rbx+48h], r14
.text:0000000000011EA7                 mov     rsi, rbx
.text:0000000000011EAA                 call    peek_token
.text:0000000000011EAF                 movzx   eax, [rsp+68h+var_50]
.text:0000000000011EB4                 sub     qword ptr [rbx+48h], 1
.text:0000000000011EB9                 lea     edx, [rax-9]
.text:0000000000011EBC                 mov     eax, 1
.text:0000000000011EC1                 cmp     dl, 1
.text:0000000000011EC4                 ja      loc_118B4
.text:0000000000011ECA                 jmp     loc_11BA4
.text:0000000000011ECF ; ---------------------------------------------------------------------------
.text:0000000000011ECF
.text:0000000000011ECF loc_11ECF:                              ; CODE XREF: peek_token+629↑j
.text:0000000000011ECF                                         ; peek_token+63E↑j
.text:0000000000011ECF                 movzx   eax, byte ptr [rdx+r14+1]
.text:0000000000011ED5                 mov     byte ptr [rbp+8], 1
.text:0000000000011ED9                 mov     r12d, eax
.text:0000000000011EDC                 mov     [rbp+0], al
.text:0000000000011EDF                 mov     dword ptr [rsp+68h+var_60], eax
.text:0000000000011EE3                 jmp     loc_119A1
.text:0000000000011EE8 ; ---------------------------------------------------------------------------
.text:0000000000011EE8
.text:0000000000011EE8 loc_11EE8:                              ; CODE XREF: peek_token+D2↑j
.text:0000000000011EE8                 call    ___stack_chk_fail
.text:0000000000011EE8 ; } // starts at 117F0
.text:0000000000011EE8 peek_token      endp
.text:0000000000011EE8
.text:0000000000011EE8 ; ---------------------------------------------------------------------------
.text:0000000000011EED                 align 10h
.text:0000000000011EF0
.text:0000000000011EF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011EF0
.text:0000000000011EF0
.text:0000000000011EF0 fetch_number    proc near               ; CODE XREF: parse_expression+527↓p
.text:0000000000011EF0                                         ; parse_expression+611↓p
.text:0000000000011EF0 ; __unwind {
.text:0000000000011EF0                 push    r14
.text:0000000000011EF2                 mov     r14, rdi
.text:0000000000011EF5                 push    r13
.text:0000000000011EF7                 mov     r13, rsi
.text:0000000000011EFA                 push    r12
.text:0000000000011EFC                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000011F03                 push    rbp
.text:0000000000011F04                 mov     rbp, rdx
.text:0000000000011F07                 push    rbx
.text:0000000000011F08                 mov     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011F0F                 nop
.text:0000000000011F10
.text:0000000000011F10 loc_11F10:                              ; CODE XREF: fetch_number+52↓j
.text:0000000000011F10                                         ; fetch_number+87↓j ...
.text:0000000000011F10                 mov     rdx, rbp
.text:0000000000011F13                 mov     rsi, r14
.text:0000000000011F16                 mov     rdi, r13
.text:0000000000011F19                 call    peek_token
.text:0000000000011F1E                 cdqe
.text:0000000000011F20                 add     [r14+48h], rax
.text:0000000000011F24                 movzx   eax, byte ptr [r13+8]
.text:0000000000011F29                 movzx   edx, byte ptr [r13+0]
.text:0000000000011F2E                 cmp     al, 2
.text:0000000000011F30                 jz      short loc_11F80
.text:0000000000011F32                 cmp     al, 18h
.text:0000000000011F34                 jz      short loc_11F87
.text:0000000000011F36                 cmp     dl, 2Ch ; ','
.text:0000000000011F39                 jz      short loc_11F87
.text:0000000000011F3B                 cmp     al, 1
.text:0000000000011F3D                 jz      short loc_11F48
.text:0000000000011F3F
.text:0000000000011F3F loc_11F3F:                              ; CODE XREF: fetch_number+5D↓j
.text:0000000000011F3F                                         ; fetch_number+63↓j
.text:0000000000011F3F                 mov     rbx, r12
.text:0000000000011F42                 jmp     short loc_11F10
.text:0000000000011F42 ; ---------------------------------------------------------------------------
.text:0000000000011F44                 align 8
.text:0000000000011F48
.text:0000000000011F48 loc_11F48:                              ; CODE XREF: fetch_number+4D↑j
.text:0000000000011F48                 lea     eax, [rdx-30h]
.text:0000000000011F4B                 cmp     al, 9
.text:0000000000011F4D                 ja      short loc_11F3F
.text:0000000000011F4F                 cmp     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000011F53                 jz      short loc_11F3F
.text:0000000000011F55                 cmp     rbx, 0FFFFFFFFFFFFFFFFh
.text:0000000000011F59                 jz      short loc_11F98
.text:0000000000011F5B                 lea     rax, [rbx+rbx*4]
.text:0000000000011F5F                 lea     rbx, [rdx+rax*2]
.text:0000000000011F63                 mov     eax, 8030h
.text:0000000000011F68                 cmp     rbx, 8030h
.text:0000000000011F6F                 cmovg   rbx, rax
.text:0000000000011F73                 sub     rbx, 30h ; '0'
.text:0000000000011F77                 jmp     short loc_11F10
.text:0000000000011F77 ; ---------------------------------------------------------------------------
.text:0000000000011F79                 align 20h
.text:0000000000011F80
.text:0000000000011F80 loc_11F80:                              ; CODE XREF: fetch_number+40↑j
.text:0000000000011F80                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000011F87
.text:0000000000011F87 loc_11F87:                              ; CODE XREF: fetch_number+44↑j
.text:0000000000011F87                                         ; fetch_number+49↑j
.text:0000000000011F87                 mov     rax, rbx
.text:0000000000011F8A                 pop     rbx
.text:0000000000011F8B                 pop     rbp
.text:0000000000011F8C                 pop     r12
.text:0000000000011F8E                 pop     r13
.text:0000000000011F90                 pop     r14
.text:0000000000011F92                 retn
.text:0000000000011F92 ; ---------------------------------------------------------------------------
.text:0000000000011F93                 align 8
.text:0000000000011F98
.text:0000000000011F98 loc_11F98:                              ; CODE XREF: fetch_number+69↑j
.text:0000000000011F98                 movzx   ebx, dl
.text:0000000000011F9B                 sub     ebx, 30h ; '0'
.text:0000000000011F9E                 movsxd  rbx, ebx
.text:0000000000011FA1                 jmp     loc_11F10
.text:0000000000011FA1 ; } // starts at 11EF0
.text:0000000000011FA1 fetch_number    endp
.text:0000000000011FA1
.text:0000000000011FA1 ; ---------------------------------------------------------------------------
.text:0000000000011FA6                 align 10h
.text:0000000000011FB0
.text:0000000000011FB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000011FB0
.text:0000000000011FB0
.text:0000000000011FB0 parse_expression proc near              ; CODE XREF: parse_expression+FFA↓p
.text:0000000000011FB0                                         ; parse_branch+39↓p ...
.text:0000000000011FB0
.text:0000000000011FB0 var_158         = qword ptr -158h
.text:0000000000011FB0 var_148         = qword ptr -148h
.text:0000000000011FB0 var_140         = qword ptr -140h
.text:0000000000011FB0 var_138         = qword ptr -138h
.text:0000000000011FB0 var_130         = qword ptr -130h
.text:0000000000011FB0 var_128         = xmmword ptr -128h
.text:0000000000011FB0 var_118         = qword ptr -118h
.text:0000000000011FB0 var_110         = qword ptr -110h
.text:0000000000011FB0 var_101         = byte ptr -101h
.text:0000000000011FB0 var_100         = qword ptr -100h
.text:0000000000011FB0 var_F8          = qword ptr -0F8h
.text:0000000000011FB0 var_F0          = qword ptr -0F0h
.text:0000000000011FB0 var_E8          = qword ptr -0E8h
.text:0000000000011FB0 ptr             = qword ptr -0E0h
.text:0000000000011FB0 size            = qword ptr -0D8h
.text:0000000000011FB0 var_D0          = dword ptr -0D0h
.text:0000000000011FB0 var_CC          = dword ptr -0CCh
.text:0000000000011FB0 var_C0          = qword ptr -0C0h
.text:0000000000011FB0 var_B8          = dword ptr -0B8h
.text:0000000000011FB0 var_B0          = qword ptr -0B0h
.text:0000000000011FB0 var_A8          = qword ptr -0A8h
.text:0000000000011FB0 var_A0          = qword ptr -0A0h
.text:0000000000011FB0 var_98          = byte ptr -98h
.text:0000000000011FB0 var_90          = byte ptr -90h
.text:0000000000011FB0 var_88          = byte ptr -88h
.text:0000000000011FB0 var_68          = byte ptr -68h
.text:0000000000011FB0 var_40          = qword ptr -40h
.text:0000000000011FB0
.text:0000000000011FB0 ; __unwind {
.text:0000000000011FB0                 push    r15
.text:0000000000011FB2                 push    r14
.text:0000000000011FB4                 push    r13
.text:0000000000011FB6                 push    r12
.text:0000000000011FB8                 push    rbp
.text:0000000000011FB9                 push    rbx
.text:0000000000011FBA                 sub     rsp, 128h
.text:0000000000011FC1                 mov     [rsp+158h+var_138], rcx
.text:0000000000011FC6                 movzx   ecx, byte ptr [rdx+8]
.text:0000000000011FCA                 mov     rax, fs:28h
.text:0000000000011FD3                 mov     [rsp+158h+var_40], rax
.text:0000000000011FDB                 xor     eax, eax
.text:0000000000011FDD                 mov     rax, [rsi]
.text:0000000000011FE0                 mov     [rsp+158h+var_140], rdx
.text:0000000000011FE5                 mov     [rsp+158h+var_118], r9
.text:0000000000011FEA                 cmp     cl, 24h         ; switch 37 cases
.text:0000000000011FED                 mov     [rsp+158h+var_148], rax
.text:0000000000011FF2                 ja      def_1200F       ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000011FF8                 mov     rbp, rsi
.text:0000000000011FFB                 lea     rsi, jpt_1200F
.text:0000000000012002                 movzx   edx, cl
.text:0000000000012005                 mov     r14, rdi
.text:0000000000012008                 movsxd  rax, ds:(jpt_1200F - 16F00h)[rsi+rdx*4]
.text:000000000001200C                 add     rax, rsi
.text:000000000001200F                 jmp     rax             ; switch jump
.text:0000000000012011 ; ---------------------------------------------------------------------------
.text:0000000000012011
.text:0000000000012011 loc_12011:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012011                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:0000000000012011                 mov     rbx, [rbp+30h]  ; jumptable 000000000001200F case 8
.text:0000000000012015                 mov     r15, [rsp+158h+var_138]
.text:000000000001201A                 mov     rsi, rdi
.text:000000000001201D                 mov     r13, [rsp+158h+var_140]
.text:0000000000012022                 mov     [rsp+158h+var_158], r8
.text:0000000000012026                 lea     rax, [rbx+1]
.text:000000000001202A                 mov     rdx, r15
.text:000000000001202D                 or      rdx, 800000h
.text:0000000000012034                 mov     rdi, r13
.text:0000000000012037                 mov     [rbp+30h], rax
.text:000000000001203B                 call    peek_token
.text:0000000000012040                 cdqe
.text:0000000000012042                 add     [r14+48h], rax
.text:0000000000012046                 xor     eax, eax
.text:0000000000012048                 cmp     byte ptr [r13+8], 9
.text:000000000001204D                 mov     rdx, r13
.text:0000000000012050                 jz      loc_12B50
.text:0000000000012056                 mov     r13, [rsp+158h+var_118]
.text:000000000001205B                 mov     r8, [rsp+158h+var_158]
.text:000000000001205F                 mov     rcx, r15
.text:0000000000012062                 mov     rsi, rbp
.text:0000000000012065                 mov     rdi, r14
.text:0000000000012068                 add     r8, 1
.text:000000000001206C                 mov     r9, r13
.text:000000000001206F                 call    parse_reg_exp
.text:0000000000012074                 mov     r11d, [r13+0]
.text:0000000000012078                 test    r11d, r11d
.text:000000000001207B                 jnz     short def_1200F ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001207D                 mov     rdx, [rsp+158h+var_140]
.text:0000000000012082                 cmp     byte ptr [rdx+8], 9
.text:0000000000012086                 jz      loc_12B50
.text:000000000001208C                 test    rax, rax
.text:000000000001208F                 jz      short loc_120A2
.text:0000000000012091                 lea     rsi, free_tree
.text:0000000000012098                 xor     edx, edx
.text:000000000001209A                 mov     rdi, rax
.text:000000000001209D                 call    postorder
.text:00000000000120A2
.text:00000000000120A2 loc_120A2:                              ; CODE XREF: parse_expression+DF↑j
.text:00000000000120A2                 mov     rax, [rsp+158h+var_118]
.text:00000000000120A7                 mov     dword ptr [rax], 8
.text:00000000000120AD                 nop     dword ptr [rax]
.text:00000000000120B0
.text:00000000000120B0 def_1200F:                              ; CODE XREF: parse_expression+42↑j
.text:00000000000120B0                                         ; parse_expression+5F↑j ...
.text:00000000000120B0                 mov     [rsp+158h+var_130], 0 ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:00000000000120B9                 nop     dword ptr [rax+00000000h]
.text:00000000000120C0
.text:00000000000120C0 loc_120C0:                              ; CODE XREF: parse_expression+1CA↓j
.text:00000000000120C0                                         ; parse_expression+1DE↓j ...
.text:00000000000120C0                 mov     rdi, [rsp+158h+var_40]
.text:00000000000120C8                 xor     rdi, fs:28h
.text:00000000000120D1                 mov     rax, [rsp+158h+var_130]
.text:00000000000120D6                 jnz     loc_1344E
.text:00000000000120DC                 add     rsp, 128h
.text:00000000000120E3                 pop     rbx
.text:00000000000120E4                 pop     rbp
.text:00000000000120E5                 pop     r12
.text:00000000000120E7                 pop     r13
.text:00000000000120E9                 pop     r14
.text:00000000000120EB                 pop     r15
.text:00000000000120ED                 retn
.text:00000000000120EE ; ---------------------------------------------------------------------------
.text:00000000000120EE
.text:00000000000120EE loc_120EE:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000120EE                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:00000000000120EE                 test    [rsp+158h+var_138], 1000000h ; jumptable 000000000001200F case 23
.text:00000000000120F7                 jnz     loc_1234D
.text:00000000000120FD
.text:00000000000120FD loc_120FD:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000120FD                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:00000000000120FD                 mov     rax, [rsp+158h+var_138] ; jumptable 000000000001200F cases 11,18,19
.text:0000000000012102                 test    al, 20h
.text:0000000000012104                 jnz     loc_1234D
.text:000000000001210A                 test    al, 10h
.text:000000000001210C                 jnz     loc_12F75
.text:0000000000012112                 cmp     cl, 9
.text:0000000000012115                 jz      loc_12B28       ; jumptable 000000000001200F case 9
.text:000000000001211B
.text:000000000001211B loc_1211B:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001211B                                         ; parse_expression+B81↓j
.text:000000000001211B                                         ; DATA XREF: ...
.text:000000000001211B                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001200F case 24
.text:0000000000012120                 mov     r8, [rsp+158h+var_140]
.text:0000000000012125                 xor     ecx, ecx
.text:0000000000012127                 xor     edx, edx
.text:0000000000012129                 lea     rsi, [rax+80h]
.text:0000000000012130                 lea     rdi, [rax+70h]
.text:0000000000012134                 mov     byte ptr [r8+8], 1
.text:0000000000012139                 call    create_token_tree_isra_16
.text:000000000001213E                 test    rax, rax
.text:0000000000012141                 mov     [rsp+158h+var_130], rax
.text:0000000000012146                 jz      loc_12B18
.text:000000000001214C
.text:000000000001214C loc_1214C:                              ; CODE XREF: parse_expression+9A0↓j
.text:000000000001214C                                         ; parse_expression+9A9↓j ...
.text:000000000001214C                 mov     rbx, [rsp+158h+var_140]
.text:0000000000012151                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012156                 mov     rsi, r14
.text:0000000000012159                 lea     r15, [rsp+158h+var_98]
.text:0000000000012161                 mov     rdi, rbx
.text:0000000000012164                 call    peek_token
.text:0000000000012169                 cdqe
.text:000000000001216B                 add     [r14+48h], rax
.text:000000000001216F                 movzx   eax, byte ptr [rbx+8]
.text:0000000000012173                 nop     dword ptr [rax+rax+00h]
.text:0000000000012178
.text:0000000000012178 loc_12178:                              ; CODE XREF: parse_expression+370↓j
.text:0000000000012178                                         ; parse_expression+37C↓j
.text:0000000000012178                 cmp     al, 17h
.text:000000000001217A                 ja      loc_120C0
.text:0000000000012180                 cmp     al, 12h
.text:0000000000012182                 mov     ecx, 8C0800h
.text:0000000000012187                 setz    bl
.text:000000000001218A                 bt      rcx, rax
.text:000000000001218E                 jnb     loc_120C0
.text:0000000000012194                 mov     rcx, [rsp+158h+var_140]
.text:0000000000012199                 cmp     al, 17h
.text:000000000001219B                 mov     rbp, [r14+48h]
.text:000000000001219F                 movdqa  xmm0, xmmword ptr [rcx]
.text:00000000000121A3                 jz      loc_124C8
.text:00000000000121A9                 cmp     al, 13h
.text:00000000000121AB                 movzx   ebx, bl
.text:00000000000121AE                 jz      loc_12460
.text:00000000000121B4                 mov     rdx, [rsp+158h+var_138]
.text:00000000000121B9                 mov     rdi, [rsp+158h+var_140]
.text:00000000000121BE                 mov     rsi, r14
.text:00000000000121C1                 call    peek_token
.text:00000000000121C6                 cdqe
.text:00000000000121C8                 add     [r14+48h], rax
.text:00000000000121CC                 cmp     [rsp+158h+var_130], 0
.text:00000000000121D2                 jz      loc_12560
.text:00000000000121D8                 mov     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:00000000000121E0
.text:00000000000121E0 loc_121E0:                              ; CODE XREF: parse_expression+4E3↓j
.text:00000000000121E0                 test    rbx, rbx
.text:00000000000121E3                 mov     rbp, [rsp+158h+var_130]
.text:00000000000121E8                 mov     qword ptr [rsp+158h+var_128], 0
.text:00000000000121F1                 jg      loc_12370
.text:00000000000121F7
.text:00000000000121F7 loc_121F7:                              ; CODE XREF: parse_expression+471↓j
.text:00000000000121F7                 cmp     byte ptr [rbp+30h], 11h
.text:00000000000121FB                 jz      loc_12540
.text:0000000000012201
.text:0000000000012201 loc_12201:                              ; CODE XREF: parse_expression+5A3↓j
.text:0000000000012201                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:0000000000012206                 mov     rdx, rbp
.text:0000000000012209                 mov     r8, r15
.text:000000000001220C                 setz    al
.text:000000000001220F                 xor     ecx, ecx
.text:0000000000012211                 add     eax, 0Ah
.text:0000000000012214                 mov     [rsp+158h+var_90], al
.text:000000000001221B                 mov     rax, [rsp+158h+var_148]
.text:0000000000012220                 lea     r12, [rax+70h]
.text:0000000000012224                 lea     r13, [rax+80h]
.text:000000000001222B                 mov     rdi, r12
.text:000000000001222E                 mov     rsi, r13
.text:0000000000012231                 call    create_token_tree_isra_16
.text:0000000000012236                 test    rax, rax
.text:0000000000012239                 mov     rdx, rax
.text:000000000001223C                 jz      loc_12430
.text:0000000000012242                 add     rbx, 2
.text:0000000000012246                 cmp     rbx, [rsp+158h+var_158]
.text:000000000001224A                 jg      short loc_122CB
.text:000000000001224C                 mov     [rsp+158h+var_110], r14
.text:0000000000012251                 mov     r14, rax
.text:0000000000012254
.text:0000000000012254 loc_12254:                              ; CODE XREF: parse_expression+311↓j
.text:0000000000012254                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012259                 mov     rdi, rbp
.text:000000000001225C                 call    duplicate_tree
.text:0000000000012261                 mov     r8, r15
.text:0000000000012264                 mov     rbp, rax
.text:0000000000012267                 mov     rcx, rax
.text:000000000001226A                 mov     rdx, r14
.text:000000000001226D                 mov     rsi, r13
.text:0000000000012270                 mov     rdi, r12
.text:0000000000012273                 mov     [rsp+158h+var_90], 10h
.text:000000000001227B                 call    create_token_tree_isra_16
.text:0000000000012280                 test    rbp, rbp
.text:0000000000012283                 jz      loc_12430
.text:0000000000012289                 test    rax, rax
.text:000000000001228C                 jz      loc_12430
.text:0000000000012292                 xor     ecx, ecx
.text:0000000000012294                 mov     r8, r15
.text:0000000000012297                 mov     rdx, rax
.text:000000000001229A                 mov     rsi, r13
.text:000000000001229D                 mov     rdi, r12
.text:00000000000122A0                 mov     [rsp+158h+var_90], 0Ah
.text:00000000000122A8                 call    create_token_tree_isra_16
.text:00000000000122AD                 test    rax, rax
.text:00000000000122B0                 mov     r14, rax
.text:00000000000122B3                 jz      loc_12430
.text:00000000000122B9                 add     rbx, 1
.text:00000000000122BD                 cmp     rbx, [rsp+158h+var_158]
.text:00000000000122C1                 jle     short loc_12254
.text:00000000000122C3                 mov     r14, [rsp+158h+var_110]
.text:00000000000122C8                 mov     rdx, rax
.text:00000000000122CB
.text:00000000000122CB loc_122CB:                              ; CODE XREF: parse_expression+29A↑j
.text:00000000000122CB                 mov     rax, qword ptr [rsp+158h+var_128]
.text:00000000000122D0                 test    rax, rax
.text:00000000000122D3                 jz      loc_12580
.text:00000000000122D9                 mov     rcx, rdx
.text:00000000000122DC                 mov     r8, r15
.text:00000000000122DF                 mov     rdx, rax
.text:00000000000122E2                 mov     rsi, r13
.text:00000000000122E5                 mov     rdi, r12
.text:00000000000122E8                 mov     [rsp+158h+var_90], 10h
.text:00000000000122F0                 call    create_token_tree_isra_16
.text:00000000000122F5
.text:00000000000122F5 loc_122F5:                              ; CODE XREF: parse_expression+581↓j
.text:00000000000122F5                 mov     rdi, [rsp+158h+var_118]
.text:00000000000122FA                 mov     edx, [rdi]
.text:00000000000122FC                 test    edx, edx
.text:00000000000122FE                 jz      short loc_12309
.text:0000000000012300                 test    rax, rax
.text:0000000000012303                 jz      loc_1265B
.text:0000000000012309
.text:0000000000012309 loc_12309:                              ; CODE XREF: parse_expression+34E↑j
.text:0000000000012309                 mov     [rsp+158h+var_130], rax
.text:000000000001230E
.text:000000000001230E loc_1230E:                              ; CODE XREF: parse_expression+510↓j
.text:000000000001230E                                         ; parse_expression+5D5↓j
.text:000000000001230E                 test    [rsp+158h+var_138], 1000000h
.text:0000000000012317                 mov     rax, [rsp+158h+var_140]
.text:000000000001231C                 movzx   eax, byte ptr [rax+8]
.text:0000000000012320                 jz      loc_12178
.text:0000000000012326                 cmp     al, 0Bh
.text:0000000000012328                 jz      short loc_12332
.text:000000000001232A                 cmp     al, 17h
.text:000000000001232C                 jnz     loc_12178
.text:0000000000012332
.text:0000000000012332 loc_12332:                              ; CODE XREF: parse_expression+378↑j
.text:0000000000012332                 mov     rax, [rsp+158h+var_130]
.text:0000000000012337                 test    rax, rax
.text:000000000001233A                 jz      short loc_1234D
.text:000000000001233C                 lea     rsi, free_tree
.text:0000000000012343                 xor     edx, edx
.text:0000000000012345                 mov     rdi, rax
.text:0000000000012348                 call    postorder
.text:000000000001234D
.text:000000000001234D loc_1234D:                              ; CODE XREF: parse_expression+147↑j
.text:000000000001234D                                         ; parse_expression+154↑j ...
.text:000000000001234D                 mov     rax, [rsp+158h+var_118]
.text:0000000000012352                 mov     [rsp+158h+var_130], 0
.text:000000000001235B                 mov     dword ptr [rax], 0Dh
.text:0000000000012361                 jmp     loc_120C0
.text:0000000000012361 ; ---------------------------------------------------------------------------
.text:0000000000012366                 align 10h
.text:0000000000012370
.text:0000000000012370 loc_12370:                              ; CODE XREF: parse_expression+241↑j
.text:0000000000012370                 cmp     rbx, 1
.text:0000000000012374                 jz      loc_12BAC
.text:000000000001237A                 mov     rax, [rsp+158h+var_148]
.text:000000000001237F                 mov     r13, rbp
.text:0000000000012382                 mov     [rsp+158h+var_110], r14
.text:0000000000012387                 lea     r12, [rax+80h]
.text:000000000001238E                 lea     rdi, [rax+70h]
.text:0000000000012392                 mov     rax, rbp
.text:0000000000012395                 mov     r14, rax
.text:0000000000012398                 mov     ebp, 2
.text:000000000001239D                 mov     rsi, r12
.text:00000000000123A0                 mov     qword ptr [rsp+158h+var_128], rdi
.text:00000000000123A5                 mov     r12, r13
.text:00000000000123A8                 mov     r13, rbx
.text:00000000000123AB                 mov     rbx, rsi
.text:00000000000123AE                 xchg    ax, ax
.text:00000000000123B0
.text:00000000000123B0 loc_123B0:                              ; CODE XREF: parse_expression+442↓j
.text:00000000000123B0                 mov     rsi, [rsp+158h+var_148]
.text:00000000000123B5                 mov     rdi, r12
.text:00000000000123B8                 call    duplicate_tree
.text:00000000000123BD                 mov     rdi, qword ptr [rsp+158h+var_128]
.text:00000000000123C2                 mov     r12, rax
.text:00000000000123C5                 mov     rdx, r14
.text:00000000000123C8                 mov     r8, r15
.text:00000000000123CB                 mov     rcx, rax
.text:00000000000123CE                 mov     rsi, rbx
.text:00000000000123D1                 mov     [rsp+158h+var_90], 10h
.text:00000000000123D9                 call    create_token_tree_isra_16
.text:00000000000123DE                 test    r12, r12
.text:00000000000123E1                 mov     r14, rax
.text:00000000000123E4                 jz      short loc_12430
.text:00000000000123E6                 test    rax, rax
.text:00000000000123E9                 jz      short loc_12430
.text:00000000000123EB                 add     rbp, 1
.text:00000000000123EF                 cmp     rbp, r13
.text:00000000000123F2                 jle     short loc_123B0
.text:00000000000123F4                 mov     r14, [rsp+158h+var_110]
.text:00000000000123F9                 mov     rbx, r13
.text:00000000000123FC                 mov     qword ptr [rsp+158h+var_128], rax
.text:0000000000012401                 mov     r13, r12
.text:0000000000012404
.text:0000000000012404 loc_12404:                              ; CODE XREF: parse_expression+C06↓j
.text:0000000000012404                 cmp     [rsp+158h+var_158], rbx
.text:0000000000012408                 jz      loc_12574
.text:000000000001240E                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012413                 mov     rdi, r13
.text:0000000000012416                 call    duplicate_tree
.text:000000000001241B                 test    rax, rax
.text:000000000001241E                 mov     rbp, rax
.text:0000000000012421                 jnz     loc_121F7
.text:0000000000012427                 nop     word ptr [rax+rax+00000000h]
.text:0000000000012430
.text:0000000000012430 loc_12430:                              ; CODE XREF: parse_expression+28C↑j
.text:0000000000012430                                         ; parse_expression+2D3↑j ...
.text:0000000000012430                 mov     rax, [rsp+158h+var_118]
.text:0000000000012435                 mov     dword ptr [rax], 0Ch
.text:000000000001243B
.text:000000000001243B loc_1243B:                              ; CODE XREF: parse_expression+505↓j
.text:000000000001243B                                         ; parse_expression+6B1↓j
.text:000000000001243B                 mov     rdi, [rsp+158h+var_130]
.text:0000000000012440                 lea     rsi, free_tree
.text:0000000000012447                 xor     edx, edx
.text:0000000000012449                 call    postorder
.text:000000000001244E                 mov     [rsp+158h+var_130], 0
.text:0000000000012457                 jmp     loc_120C0
.text:0000000000012457 ; ---------------------------------------------------------------------------
.text:000000000001245C                 align 20h
.text:0000000000012460
.text:0000000000012460 loc_12460:                              ; CODE XREF: parse_expression+1FE↑j
.text:0000000000012460                 mov     [rsp+158h+var_158], 1
.text:0000000000012468
.text:0000000000012468 loc_12468:                              ; CODE XREF: parse_expression+65A↓j
.text:0000000000012468                 mov     rdx, [rsp+158h+var_138]
.text:000000000001246D                 mov     rdi, [rsp+158h+var_140]
.text:0000000000012472                 mov     rsi, r14
.text:0000000000012475                 call    peek_token
.text:000000000001247A                 cdqe
.text:000000000001247C                 add     [r14+48h], rax
.text:0000000000012480                 cmp     [rsp+158h+var_130], 0
.text:0000000000012486                 jz      loc_12560
.text:000000000001248C                 mov     rax, [rsp+158h+var_158]
.text:0000000000012490                 or      rax, rbx
.text:0000000000012493                 jnz     loc_121E0
.text:0000000000012499                 mov     rdi, [rsp+158h+var_130]
.text:000000000001249E                 lea     rsi, free_tree
.text:00000000000124A5                 xor     edx, edx
.text:00000000000124A7                 call    postorder
.text:00000000000124AC                 mov     rax, [rsp+158h+var_118]
.text:00000000000124B1                 mov     esi, [rax]
.text:00000000000124B3                 test    esi, esi
.text:00000000000124B5                 jnz     short loc_1243B
.text:00000000000124B7
.text:00000000000124B7 loc_124B7:                              ; CODE XREF: parse_expression+5B9↓j
.text:00000000000124B7                 mov     [rsp+158h+var_130], 0
.text:00000000000124C0                 jmp     loc_1230E
.text:00000000000124C0 ; ---------------------------------------------------------------------------
.text:00000000000124C5                 align 8
.text:00000000000124C8
.text:00000000000124C8 loc_124C8:                              ; CODE XREF: parse_expression+1F3↑j
.text:00000000000124C8                 mov     rdx, [rsp+158h+var_138]
.text:00000000000124CD                 mov     rsi, rcx
.text:00000000000124D0                 mov     rdi, r14
.text:00000000000124D3                 movaps  xmmword ptr [rsp+158h+var_158], xmm0
.text:00000000000124D7                 call    fetch_number
.text:00000000000124DC                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000124E0                 mov     rbx, rax
.text:00000000000124E3                 movdqa  xmm0, xmmword ptr [rsp+158h+var_158]
.text:00000000000124E8                 jz      loc_12590
.text:00000000000124EE                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000124F2                 jz      short loc_1250D
.text:00000000000124F4                 mov     rax, [rsp+158h+var_140]
.text:00000000000124F9                 movzx   eax, byte ptr [rax+8]
.text:00000000000124FD                 cmp     al, 18h
.text:00000000000124FF                 jz      loc_12620
.text:0000000000012505                 cmp     al, 1
.text:0000000000012507                 jz      loc_12633
.text:000000000001250D
.text:000000000001250D loc_1250D:                              ; CODE XREF: parse_expression+542↑j
.text:000000000001250D                                         ; parse_expression+624↓j
.text:000000000001250D                 test    [rsp+158h+var_138], 200000h
.text:0000000000012516                 jz      loc_13453
.text:000000000001251C
.text:000000000001251C loc_1251C:                              ; CODE XREF: parse_expression+69A↓j
.text:000000000001251C                 mov     rax, [rsp+158h+var_140]
.text:0000000000012521                 mov     [r14+48h], rbp
.text:0000000000012525                 movaps  xmmword ptr [rax], xmm0
.text:0000000000012528                 mov     byte ptr [rax+8], 1
.text:000000000001252C                 mov     rax, [rsp+158h+var_130]
.text:0000000000012531                 jmp     loc_122F5
.text:0000000000012531 ; ---------------------------------------------------------------------------
.text:0000000000012536                 align 20h
.text:0000000000012540
.text:0000000000012540 loc_12540:                              ; CODE XREF: parse_expression+24B↑j
.text:0000000000012540                 mov     rdx, [rbp+28h]
.text:0000000000012544                 lea     rsi, mark_opt_subexp
.text:000000000001254B                 mov     rdi, rbp
.text:000000000001254E                 call    postorder
.text:0000000000012553                 jmp     loc_12201
.text:0000000000012553 ; ---------------------------------------------------------------------------
.text:0000000000012558                 align 20h
.text:0000000000012560
.text:0000000000012560 loc_12560:                              ; CODE XREF: parse_expression+222↑j
.text:0000000000012560                                         ; parse_expression+4D6↑j
.text:0000000000012560                 mov     rax, [rsp+158h+var_118]
.text:0000000000012565                 mov     ecx, [rax]
.text:0000000000012567                 test    ecx, ecx
.text:0000000000012569                 jz      loc_124B7
.text:000000000001256F                 jmp     def_1200F       ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000012574 ; ---------------------------------------------------------------------------
.text:0000000000012574
.text:0000000000012574 loc_12574:                              ; CODE XREF: parse_expression+458↑j
.text:0000000000012574                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000012579                 nop     dword ptr [rax+00000000h]
.text:0000000000012580
.text:0000000000012580 loc_12580:                              ; CODE XREF: parse_expression+323↑j
.text:0000000000012580                 mov     [rsp+158h+var_130], rdx
.text:0000000000012585                 jmp     loc_1230E
.text:0000000000012585 ; ---------------------------------------------------------------------------
.text:000000000001258A                 align 10h
.text:0000000000012590
.text:0000000000012590 loc_12590:                              ; CODE XREF: parse_expression+538↑j
.text:0000000000012590                 mov     rax, [rsp+158h+var_140]
.text:0000000000012595                 cmp     byte ptr [rax+8], 1
.text:0000000000012599                 jnz     loc_12650
.text:000000000001259F                 mov     rax, [rsp+158h+var_140]
.text:00000000000125A4                 cmp     byte ptr [rax], 2Ch ; ','
.text:00000000000125A7                 jnz     loc_12650
.text:00000000000125AD                 xor     ebx, ebx
.text:00000000000125AF
.text:00000000000125AF loc_125AF:                              ; CODE XREF: parse_expression+68B↓j
.text:00000000000125AF                 mov     rdx, [rsp+158h+var_138]
.text:00000000000125B4                 mov     rsi, [rsp+158h+var_140]
.text:00000000000125B9                 mov     rdi, r14
.text:00000000000125BC                 movaps  [rsp+158h+var_128], xmm0
.text:00000000000125C1                 call    fetch_number
.text:00000000000125C6                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:00000000000125CA                 mov     [rsp+158h+var_158], rax
.text:00000000000125CE                 movdqa  xmm0, [rsp+158h+var_128]
.text:00000000000125D4                 jz      loc_1250D
.text:00000000000125DA                 mov     rax, [rsp+158h+var_158]
.text:00000000000125DE                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000125E2                 jz      short loc_125E9
.text:00000000000125E4                 cmp     rax, rbx
.text:00000000000125E7                 jl      short loc_12650
.text:00000000000125E9
.text:00000000000125E9 loc_125E9:                              ; CODE XREF: parse_expression+632↑j
.text:00000000000125E9                 mov     rax, [rsp+158h+var_140]
.text:00000000000125EE                 cmp     byte ptr [rax+8], 18h
.text:00000000000125F2                 jnz     short loc_12650
.text:00000000000125F4                 cmp     [rsp+158h+var_158], 0FFFFFFFFFFFFFFFFh
.text:00000000000125F9                 jnz     short loc_12624
.text:00000000000125FB                 xor     eax, eax
.text:00000000000125FD                 cmp     rbx, 7FFFh
.text:0000000000012604                 setnle  al
.text:0000000000012607
.text:0000000000012607 loc_12607:                              ; CODE XREF: parse_expression+681↓j
.text:0000000000012607                 test    rax, rax
.text:000000000001260A                 jz      loc_12468
.text:0000000000012610                 mov     rax, [rsp+158h+var_118]
.text:0000000000012615                 mov     dword ptr [rax], 0Fh
.text:000000000001261B                 jmp     short loc_1265B
.text:000000000001261B ; ---------------------------------------------------------------------------
.text:000000000001261D                 align 20h
.text:0000000000012620
.text:0000000000012620 loc_12620:                              ; CODE XREF: parse_expression+54F↑j
.text:0000000000012620                 mov     [rsp+158h+var_158], rbx
.text:0000000000012624
.text:0000000000012624 loc_12624:                              ; CODE XREF: parse_expression+649↑j
.text:0000000000012624                 xor     eax, eax
.text:0000000000012626                 cmp     [rsp+158h+var_158], 7FFFh
.text:000000000001262E                 setnle  al
.text:0000000000012631                 jmp     short loc_12607
.text:0000000000012633 ; ---------------------------------------------------------------------------
.text:0000000000012633
.text:0000000000012633 loc_12633:                              ; CODE XREF: parse_expression+557↑j
.text:0000000000012633                 mov     rax, [rsp+158h+var_140]
.text:0000000000012638                 cmp     byte ptr [rax], 2Ch ; ','
.text:000000000001263B                 jz      loc_125AF
.text:0000000000012641                 test    [rsp+158h+var_138], 200000h
.text:000000000001264A                 jnz     loc_1251C
.text:0000000000012650
.text:0000000000012650 loc_12650:                              ; CODE XREF: parse_expression+5E9↑j
.text:0000000000012650                                         ; parse_expression+5F7↑j ...
.text:0000000000012650                 mov     rax, [rsp+158h+var_118]
.text:0000000000012655                 mov     dword ptr [rax], 0Ah
.text:000000000001265B
.text:000000000001265B loc_1265B:                              ; CODE XREF: parse_expression+353↑j
.text:000000000001265B                                         ; parse_expression+66B↑j ...
.text:000000000001265B                 cmp     [rsp+158h+var_130], 0
.text:0000000000012661                 jnz     loc_1243B
.text:0000000000012667                 jmp     def_1200F       ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000012667 ; ---------------------------------------------------------------------------
.text:000000000001266C                 align 10h
.text:0000000000012670
.text:0000000000012670 loc_12670:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012670                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:0000000000012670                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001200F case 12
.text:0000000000012675                 mov     ebp, [rax]
.text:0000000000012677                 test    ebp, 30Fh
.text:000000000001267D                 jz      short loc_126E1
.text:000000000001267F                 mov     rax, [rsp+158h+var_148]
.text:0000000000012684                 movzx   eax, byte ptr [rax+0B0h]
.text:000000000001268B                 test    al, 10h
.text:000000000001268D                 jnz     short loc_126E1
.text:000000000001268F                 mov     rdi, [rsp+158h+var_148]
.text:0000000000012694                 or      eax, 10h
.text:0000000000012697                 test    al, 8
.text:0000000000012699                 mov     [rdi+0B0h], al
.text:000000000001269F                 jnz     loc_132A3
.text:00000000000126A5                 mov     rdx, 3FF000000000000h
.text:00000000000126AF                 test    al, 4
.text:00000000000126B1                 mov     [rdi+0B8h], rdx
.text:00000000000126B8                 mov     rdx, 7FFFFFE87FFFFFEh
.text:00000000000126C2                 mov     [rdi+0C0h], rdx
.text:00000000000126C9                 jz      loc_13228
.text:00000000000126CF                 pxor    xmm0, xmm0
.text:00000000000126D3                 mov     rax, [rsp+158h+var_140]
.text:00000000000126D8                 movups  xmmword ptr [rdi+0C8h], xmm0
.text:00000000000126DF                 mov     ebp, [rax]
.text:00000000000126E1
.text:00000000000126E1 loc_126E1:                              ; CODE XREF: parse_expression+6CD↑j
.text:00000000000126E1                                         ; parse_expression+6DD↑j ...
.text:00000000000126E1                 mov     rax, [rsp+158h+var_148]
.text:00000000000126E6                 lea     rbx, [rax+70h]
.text:00000000000126EA                 lea     r12, [rax+80h]
.text:00000000000126F1                 lea     eax, [rbp-100h]
.text:00000000000126F7                 test    eax, 0FFFFFEFFh
.text:00000000000126FC                 jnz     loc_12D6A
.text:0000000000012702                 cmp     ebp, 100h
.text:0000000000012708                 mov     r15, [rsp+158h+var_140]
.text:000000000001270D                 jz      loc_12D42
.text:0000000000012713                 mov     dword ptr [r15], 5
.text:000000000001271A                 mov     r8, r15
.text:000000000001271D                 xor     ecx, ecx
.text:000000000001271F                 xor     edx, edx
.text:0000000000012721                 mov     rsi, r12
.text:0000000000012724                 mov     rdi, rbx
.text:0000000000012727                 call    create_token_tree_isra_16
.text:000000000001272C                 mov     dword ptr [r15], 0Ah
.text:0000000000012733                 mov     rbp, rax
.text:0000000000012736
.text:0000000000012736 loc_12736:                              ; CODE XREF: parse_expression+DB5↓j
.text:0000000000012736                 mov     r8, [rsp+158h+var_140]
.text:000000000001273B                 xor     ecx, ecx
.text:000000000001273D                 xor     edx, edx
.text:000000000001273F                 mov     rsi, r12
.text:0000000000012742                 mov     rdi, rbx
.text:0000000000012745                 call    create_token_tree_isra_16
.text:000000000001274A                 lea     r8, [rsp+158h+var_98]
.text:0000000000012752                 mov     rdx, rbp
.text:0000000000012755                 mov     rdi, rbx
.text:0000000000012758                 mov     rcx, rax
.text:000000000001275B                 mov     rsi, r12
.text:000000000001275E                 mov     r13, rax
.text:0000000000012761                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000012769                 call    create_token_tree_isra_16
.text:000000000001276E                 test    rbp, rbp
.text:0000000000012771                 mov     rdi, rax
.text:0000000000012774                 mov     [rsp+158h+var_130], rax
.text:0000000000012779                 setz    dl
.text:000000000001277C                 test    r13, r13
.text:000000000001277F                 setz    al
.text:0000000000012782                 or      dl, al
.text:0000000000012784                 jnz     loc_12B18
.text:000000000001278A                 test    rdi, rdi
.text:000000000001278D                 jz      loc_12B18
.text:0000000000012793
.text:0000000000012793 loc_12793:                              ; CODE XREF: parse_expression+DD6↓j
.text:0000000000012793                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012798                 mov     rdi, [rsp+158h+var_140]
.text:000000000001279D                 mov     rsi, r14
.text:00000000000127A0                 call    peek_token
.text:00000000000127A5                 cdqe
.text:00000000000127A7                 add     [r14+48h], rax
.text:00000000000127AB                 jmp     loc_120C0
.text:00000000000127B0 ; ---------------------------------------------------------------------------
.text:00000000000127B0
.text:00000000000127B0 loc_127B0:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000127B0                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:00000000000127B0                 mov     esi, 1          ; jumptable 000000000001200F case 20
.text:00000000000127B5                 mov     edi, 20h ; ' '  ; nmemb
.text:00000000000127BA                 mov     [rsp+158h+var_C0], 0
.text:00000000000127C6                 call    _calloc
.text:00000000000127CB                 mov     esi, 1          ; size
.text:00000000000127D0                 mov     r12, rax
.text:00000000000127D3                 mov     edi, 50h ; 'P'  ; nmemb
.text:00000000000127D8                 call    _calloc
.text:00000000000127DD                 test    r12, r12
.text:00000000000127E0                 mov     r13, rax
.text:00000000000127E3                 setz    dl
.text:00000000000127E6                 test    rax, rax
.text:00000000000127E9                 setz    al
.text:00000000000127EC                 or      dl, al
.text:00000000000127EE                 jnz     loc_12FC9
.text:00000000000127F4                 mov     r10, [rsp+158h+var_140]
.text:00000000000127F9                 mov     rdx, [rsp+158h+var_138]
.text:00000000000127FE                 mov     rsi, r14
.text:0000000000012801                 mov     rdi, r10
.text:0000000000012804                 call    peek_token_bracket
.text:0000000000012809                 movsxd  rbx, eax
.text:000000000001280C                 movzx   eax, byte ptr [r10+8]
.text:0000000000012811                 cmp     al, 2
.text:0000000000012813                 jz      loc_12FB9
.text:0000000000012819                 cmp     al, 19h
.text:000000000001281B                 mov     [rsp+158h+var_101], 0
.text:0000000000012820                 jz      loc_12CEA
.text:0000000000012826
.text:0000000000012826 loc_12826:                              ; CODE XREF: parse_expression+D7F↓j
.text:0000000000012826                 cmp     al, 15h
.text:0000000000012828                 jz      loc_12D34
.text:000000000001282E
.text:000000000001282E loc_1282E:                              ; CODE XREF: parse_expression+D8D↓j
.text:000000000001282E                 lea     rax, [rsp+158h+var_88]
.text:0000000000012836                 mov     r15, [rsp+158h+var_140]
.text:000000000001283B                 lea     rbp, jpt_12916
.text:0000000000012842                 mov     [rsp+158h+var_110], 0
.text:000000000001284B                 mov     r9d, 1
.text:0000000000012851                 mov     qword ptr [rsp+158h+var_128], 0
.text:000000000001285A                 mov     [rsp+158h+var_130], rax
.text:000000000001285F                 lea     rax, [rsp+158h+var_B8]
.text:0000000000012867                 mov     [rsp+158h+var_158], rax
.text:000000000001286B                 lea     rax, [rsp+158h+var_C0]
.text:0000000000012873                 mov     [rsp+158h+var_100], rax
.text:0000000000012878                 lea     rax, [rsp+158h+var_98]
.text:0000000000012880                 mov     [rsp+158h+var_F8], rax
.text:0000000000012885                 lea     rax, [rsp+158h+var_68]
.text:000000000001288D                 mov     [rsp+158h+var_F0], rax
.text:0000000000012892
.text:0000000000012892 loc_12892:                              ; CODE XREF: parse_expression+C58↓j
.text:0000000000012892                 mov     rax, [rsp+158h+var_130]
.text:0000000000012897                 mov     r8, [rsp+158h+var_138]
.text:000000000001289C                 and     r9d, 1
.text:00000000000128A0                 mov     rdi, [rsp+158h+var_158]
.text:00000000000128A4                 mov     ecx, ebx
.text:00000000000128A6                 mov     rdx, r15
.text:00000000000128A9                 mov     rsi, r14
.text:00000000000128AC                 mov     [rsp+158h+var_B8], 3
.text:00000000000128B7                 mov     [rsp+158h+var_B0], rax
.text:00000000000128BF                 call    parse_bracket_element_constprop_37
.text:00000000000128C4                 test    eax, eax
.text:00000000000128C6                 jnz     loc_12DAB
.text:00000000000128CC                 mov     rdx, [rsp+158h+var_138]
.text:00000000000128D1                 mov     rsi, r14
.text:00000000000128D4                 mov     rdi, r15
.text:00000000000128D7                 call    peek_token_bracket
.text:00000000000128DC                 movsxd  rbx, eax
.text:00000000000128DF                 mov     eax, [rsp+158h+var_B8]
.text:00000000000128E6                 lea     edx, [rax-2]
.text:00000000000128E9                 and     edx, 0FFFFFFFDh
.text:00000000000128EC                 jz      short loc_12905
.text:00000000000128EE                 movzx   edx, byte ptr [r15+8]
.text:00000000000128F3                 cmp     dl, 2
.text:00000000000128F6                 jz      loc_12D91
.text:00000000000128FC                 cmp     dl, 16h
.text:00000000000128FF                 jz      loc_12DB7
.text:0000000000012905
.text:0000000000012905 loc_12905:                              ; CODE XREF: parse_expression+93C↑j
.text:0000000000012905                                         ; parse_expression+105D↓j
.text:0000000000012905                 cmp     eax, 4          ; switch 5 cases
.text:0000000000012908                 ja      def_12916       ; jumptable 0000000000012916 default case
.text:000000000001290E                 movsxd  rax, ss:(jpt_12916 - 16F94h)[rbp+rax*4]
.text:0000000000012913                 add     rax, rbp
.text:0000000000012916                 jmp     rax             ; switch jump
.text:0000000000012918 ; ---------------------------------------------------------------------------
.text:0000000000012918
.text:0000000000012918 loc_12918:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012918                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:0000000000012918                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001200F cases 34,35
.text:000000000001291D                 cmp     cl, 23h ; '#'
.text:0000000000012920                 mov     rsi, [rdi+78h]
.text:0000000000012924                 setz    r8b
.text:0000000000012928                 lea     rcx, aWrittenBySSAnd+1Bh ; ""
.text:000000000001292F                 lea     rdx, aSpace     ; "space"
.text:0000000000012936                 movzx   r8d, r8b
.text:000000000001293A                 mov     r9, rbx
.text:000000000001293D
.text:000000000001293D loc_1293D:                              ; CODE XREF: parse_expression+9DD↓j
.text:000000000001293D                 mov     rdi, [rsp+158h+var_148]
.text:0000000000012942                 call    build_charclass_op
.text:0000000000012947                 mov     edi, [rbx]
.text:0000000000012949                 mov     [rsp+158h+var_130], rax
.text:000000000001294E                 test    edi, edi
.text:0000000000012950                 jz      loc_1214C
.text:0000000000012956                 test    rax, rax
.text:0000000000012959                 jnz     loc_1214C
.text:000000000001295F                 jmp     def_1200F       ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:000000000001295F ; ---------------------------------------------------------------------------
.text:0000000000012964                 align 8
.text:0000000000012968
.text:0000000000012968 loc_12968:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012968                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:0000000000012968                 mov     rbx, [rsp+158h+var_118] ; jumptable 000000000001200F cases 32,33
.text:000000000001296D                 cmp     cl, 21h ; '!'
.text:0000000000012970                 mov     rsi, [rdi+78h]
.text:0000000000012974                 setz    r8b
.text:0000000000012978                 lea     rcx, aEn+2      ; "_"
.text:000000000001297F                 lea     rdx, aAlnum     ; "alnum"
.text:0000000000012986                 movzx   r8d, r8b
.text:000000000001298A                 mov     r9, rbx
.text:000000000001298D                 jmp     short loc_1293D
.text:000000000001298F ; ---------------------------------------------------------------------------
.text:000000000001298F
.text:000000000001298F loc_1298F:                              ; CODE XREF: parse_expression+5F↑j
.text:000000000001298F                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:000000000001298F                 mov     rax, [rsp+158h+var_140] ; jumptable 000000000001200F case 4
.text:0000000000012994                 mov     rdi, [rsp+158h+var_148]
.text:0000000000012999                 mov     rcx, [rax]
.text:000000000001299C                 mov     eax, 1
.text:00000000000129A1                 shl     eax, cl
.text:00000000000129A3                 cdqe
.text:00000000000129A5                 test    [rdi+0A8h], rax
.text:00000000000129AC                 jz      loc_12FDE
.text:00000000000129B2                 mov     rbx, [rsp+158h+var_148]
.text:00000000000129B7                 mov     r8, [rsp+158h+var_140]
.text:00000000000129BC                 xor     ecx, ecx
.text:00000000000129BE                 xor     edx, edx
.text:00000000000129C0                 or      [rbx+0A0h], rax
.text:00000000000129C7                 lea     rsi, [rbx+80h]
.text:00000000000129CE                 lea     rdi, [rbx+70h]
.text:00000000000129D2                 call    create_token_tree_isra_16
.text:00000000000129D7                 test    rax, rax
.text:00000000000129DA                 mov     [rsp+158h+var_130], rax
.text:00000000000129DF                 jz      loc_12B18
.text:00000000000129E5                 add     qword ptr [rbx+98h], 1
.text:00000000000129ED                 or      byte ptr [rbx+0B0h], 2
.text:00000000000129F4                 jmp     loc_1214C
.text:00000000000129F9 ; ---------------------------------------------------------------------------
.text:00000000000129F9
.text:00000000000129F9 loc_129F9:                              ; CODE XREF: parse_expression+5F↑j
.text:00000000000129F9                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:00000000000129F9                 mov     rbx, [rsp+158h+var_148] ; jumptable 000000000001200F case 5
.text:00000000000129FE                 mov     r8, [rsp+158h+var_140]
.text:0000000000012A03                 xor     ecx, ecx
.text:0000000000012A05                 xor     edx, edx
.text:0000000000012A07                 lea     rsi, [rbx+80h]
.text:0000000000012A0E                 lea     rdi, [rbx+70h]
.text:0000000000012A12                 call    create_token_tree_isra_16
.text:0000000000012A17                 test    rax, rax
.text:0000000000012A1A                 mov     [rsp+158h+var_130], rax
.text:0000000000012A1F                 jz      loc_12B18
.text:0000000000012A25                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000012A2C                 jle     loc_1214C
.text:0000000000012A32                 or      byte ptr [rbx+0B0h], 2
.text:0000000000012A39                 jmp     loc_1214C
.text:0000000000012A3E ; ---------------------------------------------------------------------------
.text:0000000000012A3E
.text:0000000000012A3E loc_12A3E:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012A3E                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:0000000000012A3E                 mov     rax, [rsp+158h+var_148] ; jumptable 000000000001200F case 1
.text:0000000000012A43                 mov     r8, [rsp+158h+var_140]
.text:0000000000012A48                 xor     ecx, ecx
.text:0000000000012A4A                 xor     edx, edx
.text:0000000000012A4C                 lea     rbx, [rax+70h]
.text:0000000000012A50                 lea     rbp, [rax+80h]
.text:0000000000012A57                 mov     rdi, rbx
.text:0000000000012A5A                 mov     rsi, rbp
.text:0000000000012A5D                 call    create_token_tree_isra_16
.text:0000000000012A62                 test    rax, rax
.text:0000000000012A65                 mov     [rsp+158h+var_130], rax
.text:0000000000012A6A                 jz      loc_12B18
.text:0000000000012A70                 mov     rax, [rsp+158h+var_148]
.text:0000000000012A75                 lea     r12, [rsp+158h+var_98]
.text:0000000000012A7D                 mov     r15, [rsp+158h+var_130]
.text:0000000000012A82                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000012A89                 jle     loc_1214C
.text:0000000000012A8F
.text:0000000000012A8F loc_12A8F:                              ; CODE XREF: parse_expression+B62↓j
.text:0000000000012A8F                 mov     rax, [r14+48h]
.text:0000000000012A93                 cmp     [r14+68h], rax
.text:0000000000012A97                 jle     loc_12DA1
.text:0000000000012A9D                 cmp     rax, [r14+30h]
.text:0000000000012AA1                 jz      loc_12DA1
.text:0000000000012AA7                 mov     rdx, [r14+10h]
.text:0000000000012AAB                 cmp     dword ptr [rdx+rax*4], 0FFFFFFFFh
.text:0000000000012AAF                 jnz     loc_12DA1
.text:0000000000012AB5                 mov     r13, [rsp+158h+var_140]
.text:0000000000012ABA                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012ABF                 mov     rsi, r14
.text:0000000000012AC2                 mov     rdi, r13
.text:0000000000012AC5                 call    peek_token
.text:0000000000012ACA                 cdqe
.text:0000000000012ACC                 add     [r14+48h], rax
.text:0000000000012AD0                 mov     r8, r13
.text:0000000000012AD3                 xor     ecx, ecx
.text:0000000000012AD5                 xor     edx, edx
.text:0000000000012AD7                 mov     rsi, rbp
.text:0000000000012ADA                 mov     rdi, rbx
.text:0000000000012ADD                 call    create_token_tree_isra_16
.text:0000000000012AE2                 mov     rdx, r15
.text:0000000000012AE5                 mov     r13, rax
.text:0000000000012AE8                 mov     r8, r12
.text:0000000000012AEB                 mov     rcx, rax
.text:0000000000012AEE                 mov     rsi, rbp
.text:0000000000012AF1                 mov     rdi, rbx
.text:0000000000012AF4                 mov     [rsp+158h+var_90], 10h
.text:0000000000012AFC                 call    create_token_tree_isra_16
.text:0000000000012B01                 test    r13, r13
.text:0000000000012B04                 mov     r15, rax
.text:0000000000012B07                 setz    dl
.text:0000000000012B0A                 test    rax, rax
.text:0000000000012B0D                 setz    al
.text:0000000000012B10                 or      dl, al
.text:0000000000012B12                 jz      loc_12A8F
.text:0000000000012B18
.text:0000000000012B18 loc_12B18:                              ; CODE XREF: parse_expression+196↑j
.text:0000000000012B18                                         ; parse_expression+7D4↑j ...
.text:0000000000012B18                 mov     rax, [rsp+158h+var_118]
.text:0000000000012B1D                 mov     dword ptr [rax], 0Ch
.text:0000000000012B23                 jmp     def_1200F       ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000012B28 ; ---------------------------------------------------------------------------
.text:0000000000012B28
.text:0000000000012B28 loc_12B28:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012B28                                         ; parse_expression+165↑j
.text:0000000000012B28                                         ; DATA XREF: ...
.text:0000000000012B28                 test    [rsp+158h+var_138], 20000h ; jumptable 000000000001200F case 9
.text:0000000000012B31                 jnz     loc_1211B       ; jumptable 000000000001200F case 24
.text:0000000000012B37                 mov     rax, [rsp+158h+var_118]
.text:0000000000012B3C                 mov     [rsp+158h+var_130], 0
.text:0000000000012B45                 mov     dword ptr [rax], 10h
.text:0000000000012B4B                 jmp     loc_120C0
.text:0000000000012B50 ; ---------------------------------------------------------------------------
.text:0000000000012B50
.text:0000000000012B50 loc_12B50:                              ; CODE XREF: parse_expression+A0↑j
.text:0000000000012B50                                         ; parse_expression+D6↑j
.text:0000000000012B50                 cmp     rbx, 8
.text:0000000000012B54                 jbe     short loc_12BBB
.text:0000000000012B56
.text:0000000000012B56 loc_12B56:                              ; CODE XREF: parse_expression+C23↓j
.text:0000000000012B56                 mov     rdi, [rsp+158h+var_148]
.text:0000000000012B5B                 lea     r8, [rsp+158h+var_98]
.text:0000000000012B63                 xor     ecx, ecx
.text:0000000000012B65                 mov     rdx, rax
.text:0000000000012B68                 mov     [rsp+158h+var_90], 11h
.text:0000000000012B70                 lea     rsi, [rdi+80h]
.text:0000000000012B77                 add     rdi, 70h ; 'p'
.text:0000000000012B7B                 call    create_token_tree_isra_16
.text:0000000000012B80                 test    rax, rax
.text:0000000000012B83                 mov     [rsp+158h+var_130], rax
.text:0000000000012B88                 jz      short loc_12B18
.text:0000000000012B8A                 mov     [rax+28h], rbx
.text:0000000000012B8E                 jmp     loc_1214C
.text:0000000000012B93 ; ---------------------------------------------------------------------------
.text:0000000000012B93
.text:0000000000012B93 loc_12B93:                              ; CODE XREF: parse_expression+5F↑j
.text:0000000000012B93                                         ; DATA XREF: .rodata:jpt_1200F↓o
.text:0000000000012B93                 mov     rax, [rsp+158h+var_118] ; jumptable 000000000001200F case 36
.text:0000000000012B98                 mov     [rsp+158h+var_130], 0
.text:0000000000012BA1                 mov     dword ptr [rax], 5
.text:0000000000012BA7                 jmp     loc_120C0
.text:0000000000012BAC ; ---------------------------------------------------------------------------
.text:0000000000012BAC
.text:0000000000012BAC loc_12BAC:                              ; CODE XREF: parse_expression+3C4↑j
.text:0000000000012BAC                 mov     r13, [rsp+158h+var_130]
.text:0000000000012BB1                 mov     qword ptr [rsp+158h+var_128], r13
.text:0000000000012BB6                 jmp     loc_12404
.text:0000000000012BBB ; ---------------------------------------------------------------------------
.text:0000000000012BBB
.text:0000000000012BBB loc_12BBB:                              ; CODE XREF: parse_expression+BA4↑j
.text:0000000000012BBB                 mov     rsi, [rsp+158h+var_148]
.text:0000000000012BC0                 mov     edx, 1
.text:0000000000012BC5                 mov     ecx, ebx
.text:0000000000012BC7                 shl     edx, cl
.text:0000000000012BC9                 movsxd  rdx, edx
.text:0000000000012BCC                 or      [rsi+0A8h], rdx
.text:0000000000012BD3                 jmp     short loc_12B56
.text:0000000000012BD5 ; ---------------------------------------------------------------------------
.text:0000000000012BD5
.text:0000000000012BD5 loc_12BD5:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000012BD5                                         ; DATA XREF: .rodata:jpt_12916↓o
.text:0000000000012BD5                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000012916 case 3
.text:0000000000012BDD                 mov     rdi, r12
.text:0000000000012BE0                 call    build_equiv_class_isra_27
.text:0000000000012BE5                 mov     rdx, [rsp+158h+var_118]
.text:0000000000012BEA                 test    eax, eax
.text:0000000000012BEC                 mov     [rdx], eax
.text:0000000000012BEE                 jnz     short loc_12C28
.text:0000000000012BF0
.text:0000000000012BF0 loc_12BF0:                              ; CODE XREF: parse_expression+C76↓j
.text:0000000000012BF0                                         ; parse_expression+CCC↓j ...
.text:0000000000012BF0                 movzx   eax, byte ptr [r15+8]
.text:0000000000012BF5                 cmp     al, 2
.text:0000000000012BF7                 jz      loc_12D91
.text:0000000000012BFD                 cmp     al, 15h
.text:0000000000012BFF                 jz      loc_13012
.text:0000000000012C05                 xor     r9d, r9d
.text:0000000000012C08                 jmp     loc_12892
.text:0000000000012C0D ; ---------------------------------------------------------------------------
.text:0000000000012C0D
.text:0000000000012C0D loc_12C0D:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000012C0D                                         ; DATA XREF: .rodata:jpt_12916↓o
.text:0000000000012C0D                 mov     rsi, [rsp+158h+var_B0] ; jumptable 0000000000012916 case 2
.text:0000000000012C15                 mov     rdi, r12
.text:0000000000012C18                 call    build_equiv_class_isra_27
.text:0000000000012C1D                 mov     rdx, [rsp+158h+var_118]
.text:0000000000012C22                 test    eax, eax
.text:0000000000012C24                 mov     [rdx], eax
.text:0000000000012C26                 jz      short loc_12BF0
.text:0000000000012C28
.text:0000000000012C28 loc_12C28:                              ; CODE XREF: parse_expression+C3E↑j
.text:0000000000012C28                                         ; parse_expression+D35↓j ...
.text:0000000000012C28                 mov     rdi, r12        ; ptr
.text:0000000000012C2B                 call    _free
.text:0000000000012C30                 mov     rdi, r13        ; ptr
.text:0000000000012C33                 call    isl_union_flow_free_0
.text:0000000000012C38                 mov     rax, [rsp+158h+var_118]
.text:0000000000012C3D                 mov     r8d, [rax]
.text:0000000000012C40                 test    r8d, r8d
.text:0000000000012C43                 jnz     def_1200F       ; jumptable 000000000001200F default case, cases 0,2,3,6,7,10,13-17,21,22,25-31
.text:0000000000012C49                 mov     [rsp+158h+var_130], 0
.text:0000000000012C52                 jmp     loc_1214C
.text:0000000000012C57 ; ---------------------------------------------------------------------------
.text:0000000000012C57
.text:0000000000012C57 loc_12C57:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000012C57                                         ; DATA XREF: .rodata:jpt_12916↓o
.text:0000000000012C57                 mov     rdx, [r13+28h]  ; jumptable 0000000000012916 case 1
.text:0000000000012C5B                 cmp     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000012C60                 mov     rax, [r13+0]
.text:0000000000012C64                 jz      loc_1315E
.text:0000000000012C6A
.text:0000000000012C6A loc_12C6A:                              ; CODE XREF: parse_expression+11DE↓j
.text:0000000000012C6A                 lea     rcx, [rdx+1]
.text:0000000000012C6E                 mov     [r13+28h], rcx
.text:0000000000012C72                 mov     ecx, dword ptr [rsp+158h+var_B0]
.text:0000000000012C79                 mov     [rax+rdx*4], ecx
.text:0000000000012C7C                 jmp     loc_12BF0
.text:0000000000012C81 ; ---------------------------------------------------------------------------
.text:0000000000012C81
.text:0000000000012C81 loc_12C81:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000012C81                                         ; DATA XREF: .rodata:jpt_12916↓o
.text:0000000000012C81                 movzx   edx, byte ptr [rsp+158h+var_B0] ; jumptable 0000000000012916 case 0
.text:0000000000012C89                 mov     esi, 1
.text:0000000000012C8E                 mov     rax, rdx
.text:0000000000012C91                 and     edx, 3Fh
.text:0000000000012C94                 shr     rax, 3
.text:0000000000012C98                 mov     ecx, edx
.text:0000000000012C9A                 and     eax, 18h
.text:0000000000012C9D                 shl     rsi, cl
.text:0000000000012CA0                 or      [r12+rax], rsi
.text:0000000000012CA4                 jmp     loc_12BF0
.text:0000000000012CA9 ; ---------------------------------------------------------------------------
.text:0000000000012CA9
.text:0000000000012CA9 loc_12CA9:                              ; CODE XREF: parse_expression+966↑j
.text:0000000000012CA9                                         ; DATA XREF: .rodata:jpt_12916↓o
.text:0000000000012CA9                 sub     rsp, 8          ; jumptable 0000000000012916 case 4
.text:0000000000012CAD                 mov     rdi, [r14+78h]
.text:0000000000012CB1                 lea     rdx, [r13+18h]
.text:0000000000012CB5                 push    [rsp+160h+var_138]
.text:0000000000012CB9                 mov     r9, [rsp+168h+var_B0]
.text:0000000000012CC1                 lea     rcx, [r13+48h]
.text:0000000000012CC5                 mov     r8, [rsp+168h+var_100]
.text:0000000000012CCA                 mov     rsi, r12
.text:0000000000012CCD                 call    build_charclass_isra_29
.text:0000000000012CD2                 mov     rdx, [rsp+168h+var_118]
.text:0000000000012CD7                 test    eax, eax
.text:0000000000012CD9                 mov     [rdx], eax
.text:0000000000012CDB                 pop     r9
.text:0000000000012CDD                 pop     r10
.text:0000000000012CDF                 jz      loc_12BF0
.text:0000000000012CE5                 jmp     loc_12C28
.text:0000000000012CEA ; ---------------------------------------------------------------------------
.text:0000000000012CEA
.text:0000000000012CEA loc_12CEA:                              ; CODE XREF: parse_expression+870↑j
.text:0000000000012CEA                 or      byte ptr [r13+20h], 1
.text:0000000000012CEF                 test    [rsp+158h+var_138], 100h
.text:0000000000012CF8                 jz      short loc_12D02
.text:0000000000012CFA                 or      qword ptr [r12], 400h
.text:0000000000012D02
.text:0000000000012D02 loc_12D02:                              ; CODE XREF: parse_expression+D48↑j
.text:0000000000012D02                 add     [r14+48h], rbx
.text:0000000000012D06                 mov     r11, [rsp+158h+var_140]
.text:0000000000012D0B                 mov     rsi, r14
.text:0000000000012D0E                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012D13                 mov     rdi, r11
.text:0000000000012D16                 call    peek_token_bracket
.text:0000000000012D1B                 mov     ebx, eax
.text:0000000000012D1D                 movzx   eax, byte ptr [r11+8]
.text:0000000000012D22                 cmp     al, 2
.text:0000000000012D24                 jz      loc_12FB9
.text:0000000000012D2A                 mov     [rsp+158h+var_101], 1
.text:0000000000012D2F                 jmp     loc_12826
.text:0000000000012D34 ; ---------------------------------------------------------------------------
.text:0000000000012D34
.text:0000000000012D34 loc_12D34:                              ; CODE XREF: parse_expression+878↑j
.text:0000000000012D34                 mov     rax, [rsp+158h+var_140]
.text:0000000000012D39                 mov     byte ptr [rax+8], 1
.text:0000000000012D3D                 jmp     loc_1282E
.text:0000000000012D42 ; ---------------------------------------------------------------------------
.text:0000000000012D42
.text:0000000000012D42 loc_12D42:                              ; CODE XREF: parse_expression+75D↑j
.text:0000000000012D42                 mov     dword ptr [r15], 6
.text:0000000000012D49                 mov     r8, r15
.text:0000000000012D4C                 xor     ecx, ecx
.text:0000000000012D4E                 xor     edx, edx
.text:0000000000012D50                 mov     rsi, r12
.text:0000000000012D53                 mov     rdi, rbx
.text:0000000000012D56                 call    create_token_tree_isra_16
.text:0000000000012D5B                 mov     dword ptr [r15], 9
.text:0000000000012D62                 mov     rbp, rax
.text:0000000000012D65                 jmp     loc_12736
.text:0000000000012D6A ; ---------------------------------------------------------------------------
.text:0000000000012D6A
.text:0000000000012D6A loc_12D6A:                              ; CODE XREF: parse_expression+74C↑j
.text:0000000000012D6A                 mov     r8, [rsp+158h+var_140]
.text:0000000000012D6F                 xor     ecx, ecx
.text:0000000000012D71                 xor     edx, edx
.text:0000000000012D73                 mov     rsi, r12
.text:0000000000012D76                 mov     rdi, rbx
.text:0000000000012D79                 call    create_token_tree_isra_16
.text:0000000000012D7E                 test    rax, rax
.text:0000000000012D81                 mov     [rsp+158h+var_130], rax
.text:0000000000012D86                 jnz     loc_12793
.text:0000000000012D8C                 jmp     loc_12B18
.text:0000000000012D91 ; ---------------------------------------------------------------------------
.text:0000000000012D91
.text:0000000000012D91 loc_12D91:                              ; CODE XREF: parse_expression+946↑j
.text:0000000000012D91                                         ; parse_expression+C47↑j ...
.text:0000000000012D91                 mov     rax, [rsp+158h+var_118]
.text:0000000000012D96                 mov     dword ptr [rax], 7
.text:0000000000012D9C                 jmp     loc_12C28
.text:0000000000012DA1 ; ---------------------------------------------------------------------------
.text:0000000000012DA1
.text:0000000000012DA1 loc_12DA1:                              ; CODE XREF: parse_expression+AE7↑j
.text:0000000000012DA1                                         ; parse_expression+AF1↑j ...
.text:0000000000012DA1                 mov     [rsp+158h+var_130], r15
.text:0000000000012DA6                 jmp     loc_1214C
.text:0000000000012DAB ; ---------------------------------------------------------------------------
.text:0000000000012DAB
.text:0000000000012DAB loc_12DAB:                              ; CODE XREF: parse_expression+916↑j
.text:0000000000012DAB                                         ; parse_expression+E6E↓j
.text:0000000000012DAB                 mov     rdx, [rsp+158h+var_118]
.text:0000000000012DB0                 mov     [rdx], eax
.text:0000000000012DB2                 jmp     loc_12C28
.text:0000000000012DB7 ; ---------------------------------------------------------------------------
.text:0000000000012DB7
.text:0000000000012DB7 loc_12DB7:                              ; CODE XREF: parse_expression+94F↑j
.text:0000000000012DB7                 movsxd  rax, ebx
.text:0000000000012DBA                 mov     r11, [rsp+158h+var_138]
.text:0000000000012DBF                 add     [r14+48h], rax
.text:0000000000012DC3                 mov     r10, [rsp+158h+var_F8]
.text:0000000000012DC8                 mov     rdx, r11
.text:0000000000012DCB                 mov     rdi, r10
.text:0000000000012DCE                 call    peek_token_bracket
.text:0000000000012DD3                 movzx   edx, [rsp+158h+var_90]
.text:0000000000012DDB                 cmp     dl, 2
.text:0000000000012DDE                 jz      short loc_12D91
.text:0000000000012DE0                 cmp     dl, 15h
.text:0000000000012DE3                 jz      loc_12FF7
.text:0000000000012DE9                 mov     rdx, [rsp+158h+var_F0]
.text:0000000000012DEE                 lea     rdi, [rsp+158h+var_A8]
.text:0000000000012DF6                 mov     r9d, 1
.text:0000000000012DFC                 mov     r8, r11
.text:0000000000012DFF                 mov     ecx, eax
.text:0000000000012E01                 mov     dword ptr [rsp+158h+var_A8], 3
.text:0000000000012E0C                 mov     [rsp+158h+var_A0], rdx
.text:0000000000012E14                 mov     rdx, r10
.text:0000000000012E17                 call    parse_bracket_element_constprop_37
.text:0000000000012E1C                 test    eax, eax
.text:0000000000012E1E                 jnz     short loc_12DAB
.text:0000000000012E20                 mov     rdx, [rsp+158h+var_138]
.text:0000000000012E25                 mov     rsi, r14
.text:0000000000012E28                 mov     rdi, r15
.text:0000000000012E2B                 call    peek_token_bracket
.text:0000000000012E30                 movsxd  rbx, eax
.text:0000000000012E33                 mov     rax, [rsp+158h+var_148]
.text:0000000000012E38                 mov     esi, [rsp+158h+var_B8]
.text:0000000000012E3F                 mov     r9d, 0
.text:0000000000012E45                 cmp     dword ptr [rax+0B4h], 1
.text:0000000000012E4C                 lea     eax, [rsi-2]
.text:0000000000012E4F                 cmovg   r9, r13
.text:0000000000012E53                 and     eax, 0FFFFFFFDh
.text:0000000000012E56                 jz      loc_132C9
.text:0000000000012E5C                 mov     r10d, dword ptr [rsp+158h+var_A8]
.text:0000000000012E64                 lea     eax, [r10-2]
.text:0000000000012E68                 and     eax, 0FFFFFFFDh
.text:0000000000012E6B                 jz      loc_132C9
.text:0000000000012E71                 cmp     esi, 3
.text:0000000000012E74                 setz    r11b
.text:0000000000012E78                 jz      loc_1330D
.text:0000000000012E7E
.text:0000000000012E7E loc_12E7E:                              ; CODE XREF: parse_expression+137B↓j
.text:0000000000012E7E                 cmp     r10d, 3
.text:0000000000012E82                 jz      loc_132D9
.text:0000000000012E88
.text:0000000000012E88 loc_12E88:                              ; CODE XREF: parse_expression+1347↓j
.text:0000000000012E88                 test    esi, esi
.text:0000000000012E8A                 jnz     loc_131F9
.text:0000000000012E90                 movzx   edx, byte ptr [rsp+158h+var_B0]
.text:0000000000012E98
.text:0000000000012E98 loc_12E98:                              ; CODE XREF: parse_expression+124E↓j
.text:0000000000012E98                                         ; parse_expression+125F↓j
.text:0000000000012E98                 test    r10d, r10d
.text:0000000000012E9B                 jnz     loc_131DD
.text:0000000000012EA1                 movzx   r8d, byte ptr [rsp+158h+var_A0]
.text:0000000000012EAA
.text:0000000000012EAA loc_12EAA:                              ; CODE XREF: parse_expression+14CE↓j
.text:0000000000012EAA                 test    esi, esi
.text:0000000000012EAC                 jz      loc_13196
.text:0000000000012EB2                 test    r11b, r11b
.text:0000000000012EB5                 jnz     loc_13196
.text:0000000000012EBB                 test    r9, r9
.text:0000000000012EBE                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:0000000000012EC5                 jz      short loc_12EE4
.text:0000000000012EC7
.text:0000000000012EC7 loc_12EC7:                              ; CODE XREF: parse_expression+1212↓j
.text:0000000000012EC7                                         ; parse_expression+121A↓j
.text:0000000000012EC7                 mov     edi, r8d        ; c
.text:0000000000012ECA                 mov     dword ptr [rsp+158h+ptr], edx
.text:0000000000012ECE                 mov     [rsp+158h+var_E8], r9
.text:0000000000012ED3                 call    _btowc
.text:0000000000012ED8                 mov     r9, [rsp+158h+var_E8]
.text:0000000000012EDD                 mov     edx, dword ptr [rsp+158h+ptr]
.text:0000000000012EE1                 mov     r8d, eax
.text:0000000000012EE4
.text:0000000000012EE4 loc_12EE4:                              ; CODE XREF: parse_expression+F15↑j
.text:0000000000012EE4                                         ; parse_expression+1228↓j
.text:0000000000012EE4                 cmp     edx, 0FFFFFFFFh
.text:0000000000012EE7                 jz      loc_132FD
.text:0000000000012EED                 cmp     r8d, 0FFFFFFFFh
.text:0000000000012EF1                 jz      loc_132FD
.text:0000000000012EF7
.text:0000000000012EF7 loc_12EF7:                              ; CODE XREF: parse_expression+1267↓j
.text:0000000000012EF7                                         ; parse_expression+1273↓j
.text:0000000000012EF7                 test    [rsp+158h+var_138], 10000h
.text:0000000000012F00                 jz      short loc_12F0B
.text:0000000000012F02                 cmp     r8d, edx
.text:0000000000012F05                 jb      loc_132C9
.text:0000000000012F0B
.text:0000000000012F0B loc_12F0B:                              ; CODE XREF: parse_expression+F50↑j
.text:0000000000012F0B                 test    r9, r9
.text:0000000000012F0E                 jz      short loc_12F36
.text:0000000000012F10                 mov     rax, [r9+40h]
.text:0000000000012F14                 cmp     rax, [rsp+158h+var_110]
.text:0000000000012F19                 mov     rcx, [r9+8]
.text:0000000000012F1D                 jz      loc_13333
.text:0000000000012F23
.text:0000000000012F23 loc_12F23:                              ; CODE XREF: parse_expression+1410↓j
.text:0000000000012F23                 mov     [rcx+rax*4], edx
.text:0000000000012F26                 mov     rcx, [r9+10h]
.text:0000000000012F2A                 lea     rsi, [rax+1]
.text:0000000000012F2E                 mov     [r9+40h], rsi
.text:0000000000012F32                 mov     [rcx+rax*4], r8d
.text:0000000000012F36
.text:0000000000012F36 loc_12F36:                              ; CODE XREF: parse_expression+F5E↑j
.text:0000000000012F36                 xor     eax, eax
.text:0000000000012F38                 mov     edi, 1
.text:0000000000012F3D
.text:0000000000012F3D loc_12F3D:                              ; CODE XREF: parse_expression+FB3↓j
.text:0000000000012F3D                 cmp     edx, eax
.text:0000000000012F3F                 mov     ecx, eax
.text:0000000000012F41                 ja      short loc_12F59
.text:0000000000012F43                 cmp     r8d, eax
.text:0000000000012F46                 jb      short loc_12F59
.text:0000000000012F48                 mov     rsi, rax
.text:0000000000012F4B                 mov     r11, rdi
.text:0000000000012F4E                 sar     rsi, 6
.text:0000000000012F52                 shl     r11, cl
.text:0000000000012F55                 or      [r12+rsi*8], r11
.text:0000000000012F59
.text:0000000000012F59 loc_12F59:                              ; CODE XREF: parse_expression+F91↑j
.text:0000000000012F59                                         ; parse_expression+F96↑j
.text:0000000000012F59                 add     rax, 1
.text:0000000000012F5D                 cmp     rax, 100h
.text:0000000000012F63                 jnz     short loc_12F3D
.text:0000000000012F65                 mov     rax, [rsp+158h+var_118]
.text:0000000000012F6A                 mov     dword ptr [rax], 0
.text:0000000000012F70                 jmp     loc_12BF0
.text:0000000000012F75 ; ---------------------------------------------------------------------------
.text:0000000000012F75
.text:0000000000012F75 loc_12F75:                              ; CODE XREF: parse_expression+15C↑j
.text:0000000000012F75                 mov     rbx, [rsp+158h+var_140]
.text:0000000000012F7A                 mov     rdx, rax
.text:0000000000012F7D                 mov     rsi, r14
.text:0000000000012F80                 mov     [rsp+158h+var_158], r8
.text:0000000000012F84                 mov     r15, rax
.text:0000000000012F87                 mov     rdi, rbx
.text:0000000000012F8A                 call    peek_token
.text:0000000000012F8F                 cdqe
.text:0000000000012F91                 add     [r14+48h], rax
.text:0000000000012F95                 mov     r9, [rsp+158h+var_118]
.text:0000000000012F9A                 mov     r8, [rsp+158h+var_158]
.text:0000000000012F9E                 mov     rcx, r15
.text:0000000000012FA1                 mov     rdx, rbx
.text:0000000000012FA4                 mov     rsi, rbp
.text:0000000000012FA7                 mov     rdi, r14
.text:0000000000012FAA                 call    parse_expression
.text:0000000000012FAF                 mov     [rsp+158h+var_130], rax
.text:0000000000012FB4                 jmp     loc_120C0
.text:0000000000012FB9 ; ---------------------------------------------------------------------------
.text:0000000000012FB9
.text:0000000000012FB9 loc_12FB9:                              ; CODE XREF: parse_expression+863↑j
.text:0000000000012FB9                                         ; parse_expression+D74↑j
.text:0000000000012FB9                 mov     rax, [rsp+158h+var_118]
.text:0000000000012FBE                 mov     dword ptr [rax], 2
.text:0000000000012FC4                 jmp     loc_12C28
.text:0000000000012FC9 ; ---------------------------------------------------------------------------
.text:0000000000012FC9
.text:0000000000012FC9 loc_12FC9:                              ; CODE XREF: parse_expression+83E↑j
.text:0000000000012FC9                 mov     rdi, r12        ; ptr
.text:0000000000012FCC                 call    _free
.text:0000000000012FD1                 mov     rdi, r13        ; ptr
.text:0000000000012FD4                 call    _free
.text:0000000000012FD9                 jmp     loc_12B18
.text:0000000000012FDE ; ---------------------------------------------------------------------------
.text:0000000000012FDE
.text:0000000000012FDE loc_12FDE:                              ; CODE XREF: parse_expression+9FC↑j
.text:0000000000012FDE                 mov     rax, [rsp+158h+var_118]
.text:0000000000012FE3                 mov     [rsp+158h+var_130], 0
.text:0000000000012FEC                 mov     dword ptr [rax], 6
.text:0000000000012FF2                 jmp     loc_120C0
.text:0000000000012FF7 ; ---------------------------------------------------------------------------
.text:0000000000012FF7
.text:0000000000012FF7 loc_12FF7:                              ; CODE XREF: parse_expression+E33↑j
.text:0000000000012FF7                 mov     eax, ebx
.text:0000000000012FF9                 neg     eax
.text:0000000000012FFB                 cdqe
.text:0000000000012FFD                 add     [r14+48h], rax
.text:0000000000013001                 mov     byte ptr [r15+8], 1
.text:0000000000013006                 mov     eax, [rsp+158h+var_B8]
.text:000000000001300D                 jmp     loc_12905
.text:0000000000013012 ; ---------------------------------------------------------------------------
.text:0000000000013012
.text:0000000000013012 loc_13012:                              ; CODE XREF: parse_expression+C4F↑j
.text:0000000000013012                 add     [r14+48h], rbx
.text:0000000000013016                 cmp     [rsp+158h+var_101], 0
.text:000000000001301B                 jz      short loc_13031
.text:000000000001301D                 lea     rdx, [r12+20h]
.text:0000000000013022                 mov     rax, r12
.text:0000000000013025
.text:0000000000013025 loc_13025:                              ; CODE XREF: parse_expression+107F↓j
.text:0000000000013025                 not     qword ptr [rax]
.text:0000000000013028                 add     rax, 8
.text:000000000001302C                 cmp     rdx, rax
.text:000000000001302F                 jnz     short loc_13025
.text:0000000000013031
.text:0000000000013031 loc_13031:                              ; CODE XREF: parse_expression+106B↑j
.text:0000000000013031                 mov     rax, [rsp+158h+var_148]
.text:0000000000013036                 mov     edx, [rax+0B4h]
.text:000000000001303C                 cmp     edx, 1
.text:000000000001303F                 jle     short loc_13059
.text:0000000000013041                 mov     rcx, [rax+78h]
.text:0000000000013045                 xor     eax, eax
.text:0000000000013047
.text:0000000000013047 loc_13047:                              ; CODE XREF: parse_expression+10A7↓j
.text:0000000000013047                 mov     rsi, [rcx+rax]
.text:000000000001304B                 and     [r12+rax], rsi
.text:000000000001304F                 add     rax, 8
.text:0000000000013053                 cmp     rax, 20h ; ' '
.text:0000000000013057                 jnz     short loc_13047
.text:0000000000013059
.text:0000000000013059 loc_13059:                              ; CODE XREF: parse_expression+108F↑j
.text:0000000000013059                 cmp     qword ptr [r13+28h], 0
.text:000000000001305E                 jnz     loc_130E8
.text:0000000000013064                 cmp     qword ptr [r13+30h], 0
.text:0000000000013069                 jnz     short loc_130E8
.text:000000000001306B                 cmp     qword ptr [r13+38h], 0
.text:0000000000013070                 jnz     short loc_130E8
.text:0000000000013072                 cmp     qword ptr [r13+40h], 0
.text:0000000000013077                 jnz     short loc_130E8
.text:0000000000013079                 sub     edx, 1
.text:000000000001307C                 jle     short loc_1308C
.text:000000000001307E                 cmp     qword ptr [r13+48h], 0
.text:0000000000013083                 jnz     short loc_130E8
.text:0000000000013085                 test    byte ptr [r13+20h], 1
.text:000000000001308A                 jnz     short loc_130E8
.text:000000000001308C
.text:000000000001308C loc_1308C:                              ; CODE XREF: parse_expression+10CC↑j
.text:000000000001308C                 mov     rdi, r13        ; ptr
.text:000000000001308F                 call    isl_union_flow_free_0
.text:0000000000013094                 mov     rax, [rsp+158h+var_148]
.text:0000000000013099                 lea     r8, [rsp+158h+var_A8]
.text:00000000000130A1                 xor     ecx, ecx
.text:00000000000130A3                 xor     edx, edx
.text:00000000000130A5                 mov     byte ptr [rsp+158h+var_A0], 3
.text:00000000000130AD                 mov     [rsp+158h+var_A8], r12
.text:00000000000130B5                 lea     rsi, [rax+80h]
.text:00000000000130BC                 lea     rdi, [rax+70h]
.text:00000000000130C0                 call    create_token_tree_isra_16
.text:00000000000130C5                 test    rax, rax
.text:00000000000130C8                 mov     [rsp+158h+var_130], rax
.text:00000000000130CD                 jnz     loc_1214C
.text:00000000000130D3
.text:00000000000130D3 loc_130D3:                              ; CODE XREF: parse_expression+118C↓j
.text:00000000000130D3                                         ; parse_expression+11D0↓j ...
.text:00000000000130D3                 mov     rax, [rsp+158h+var_118]
.text:00000000000130D8                 mov     dword ptr [rax], 0Ch
.text:00000000000130DE                 jmp     loc_12C28
.text:00000000000130DE ; ---------------------------------------------------------------------------
.text:00000000000130E3                 align 8
.text:00000000000130E8
.text:00000000000130E8 loc_130E8:                              ; CODE XREF: parse_expression+10AE↑j
.text:00000000000130E8                                         ; parse_expression+10B9↑j ...
.text:00000000000130E8                 mov     rax, [rsp+158h+var_148]
.text:00000000000130ED                 lea     r15, [rsp+158h+var_A8]
.text:00000000000130F5                 xor     edx, edx
.text:00000000000130F7                 xor     ecx, ecx
.text:00000000000130F9                 mov     r8, r15
.text:00000000000130FC                 or      byte ptr [rax+0B0h], 2
.text:0000000000013103                 lea     rbx, [rax+70h]
.text:0000000000013107                 lea     rbp, [rax+80h]
.text:000000000001310E                 mov     byte ptr [rsp+158h+var_A0], 6
.text:0000000000013116                 mov     [rsp+158h+var_A8], r13
.text:000000000001311E                 mov     rdi, rbx
.text:0000000000013121                 mov     rsi, rbp
.text:0000000000013124                 call    create_token_tree_isra_16
.text:0000000000013129                 mov     rdi, rax
.text:000000000001312C                 mov     [rsp+158h+var_130], rax
.text:0000000000013131                 lea     rdx, [r12+20h]
.text:0000000000013136                 test    rdi, rdi
.text:0000000000013139                 mov     rax, r12
.text:000000000001313C                 jz      short loc_130D3
.text:000000000001313E
.text:000000000001313E loc_1313E:                              ; CODE XREF: parse_expression+119F↓j
.text:000000000001313E                 cmp     qword ptr [rax], 0
.text:0000000000013142                 jnz     loc_133ED
.text:0000000000013148                 add     rax, 8
.text:000000000001314C                 cmp     rdx, rax
.text:000000000001314F                 jnz     short loc_1313E
.text:0000000000013151                 mov     rdi, r12        ; ptr
.text:0000000000013154                 call    _free
.text:0000000000013159                 jmp     loc_1214C
.text:000000000001315E ; ---------------------------------------------------------------------------
.text:000000000001315E
.text:000000000001315E loc_1315E:                              ; CODE XREF: parse_expression+CB4↑j
.text:000000000001315E                 mov     rdx, qword ptr [rsp+158h+var_128]
.text:0000000000013163                 lea     rdi, [rdx+rdx+1]
.text:0000000000013168                 lea     rsi, ds:0[rdi*4] ; size
.text:0000000000013170                 mov     qword ptr [rsp+158h+var_128], rdi
.text:0000000000013175                 mov     rdi, rax        ; ptr
.text:0000000000013178                 call    _realloc
.text:000000000001317D                 test    rax, rax
.text:0000000000013180                 jz      loc_130D3
.text:0000000000013186                 mov     [r13+0], rax
.text:000000000001318A                 mov     rdx, [r13+28h]
.text:000000000001318E                 jmp     loc_12C6A
.text:0000000000013193 ; ---------------------------------------------------------------------------
.text:0000000000013193
.text:0000000000013193 loc_13193:                              ; CODE XREF: parse_expression+1239↓j
.text:0000000000013193                                         ; parse_expression+123E↓j
.text:0000000000013193                 xor     r8d, r8d
.text:0000000000013196
.text:0000000000013196 loc_13196:                              ; CODE XREF: parse_expression+EFC↑j
.text:0000000000013196                                         ; parse_expression+F05↑j
.text:0000000000013196                 test    r9, r9
.text:0000000000013199                 jz      short loc_13214
.text:000000000001319B                 mov     edi, edx        ; c
.text:000000000001319D                 mov     dword ptr [rsp+158h+ptr], r8d
.text:00000000000131A2                 mov     [rsp+158h+var_E8], r9
.text:00000000000131A7                 call    _btowc
.text:00000000000131AC                 mov     edx, eax
.text:00000000000131AE                 mov     eax, dword ptr [rsp+158h+var_A8]
.text:00000000000131B5                 mov     r9, [rsp+158h+var_E8]
.text:00000000000131BA                 mov     r8d, dword ptr [rsp+158h+ptr]
.text:00000000000131BF                 cmp     eax, 3
.text:00000000000131C2                 jz      loc_12EC7
.text:00000000000131C8                 test    eax, eax
.text:00000000000131CA                 jz      loc_12EC7
.text:00000000000131D0
.text:00000000000131D0 loc_131D0:                              ; CODE XREF: parse_expression+1247↓j
.text:00000000000131D0                                         ; parse_expression+1271↓j
.text:00000000000131D0                 mov     r8d, dword ptr [rsp+158h+var_A0]
.text:00000000000131D8                 jmp     loc_12EE4
.text:00000000000131DD ; ---------------------------------------------------------------------------
.text:00000000000131DD
.text:00000000000131DD loc_131DD:                              ; CODE XREF: parse_expression+EEB↑j
.text:00000000000131DD                 cmp     r10d, 3
.text:00000000000131E1                 jz      loc_13472
.text:00000000000131E7                 test    esi, esi
.text:00000000000131E9                 jz      short loc_13193
.text:00000000000131EB                 test    r11b, r11b
.text:00000000000131EE                 jnz     short loc_13193
.text:00000000000131F0                 mov     edx, dword ptr [rsp+158h+var_B0]
.text:00000000000131F7                 jmp     short loc_131D0
.text:00000000000131F9 ; ---------------------------------------------------------------------------
.text:00000000000131F9
.text:00000000000131F9 loc_131F9:                              ; CODE XREF: parse_expression+EDA↑j
.text:00000000000131F9                 xor     edx, edx
.text:00000000000131FB                 cmp     esi, 3
.text:00000000000131FE                 jnz     loc_12E98
.text:0000000000013204                 mov     rax, [rsp+158h+var_B0]
.text:000000000001320C                 movzx   edx, byte ptr [rax]
.text:000000000001320F                 jmp     loc_12E98
.text:0000000000013214 ; ---------------------------------------------------------------------------
.text:0000000000013214
.text:0000000000013214 loc_13214:                              ; CODE XREF: parse_expression+11E9↑j
.text:0000000000013214                 test    r10d, r10d
.text:0000000000013217                 jz      loc_12EF7
.text:000000000001321D                 cmp     r10d, 3
.text:0000000000013221                 jnz     short loc_131D0
.text:0000000000013223                 jmp     loc_12EF7
.text:0000000000013228 ; ---------------------------------------------------------------------------
.text:0000000000013228
.text:0000000000013228 loc_13228:                              ; CODE XREF: parse_expression+719↑j
.text:0000000000013228                 mov     ebx, 80h
.text:000000000001322D                 mov     r12d, 2
.text:0000000000013233
.text:0000000000013233 loc_13233:                              ; CODE XREF: parse_expression+12F8↓j
.text:0000000000013233                 call    ___ctype_b_loc
.text:0000000000013238                 movsxd  rdx, ebx
.text:000000000001323B                 movsxd  r9, r12d
.text:000000000001323E                 mov     r8d, 1
.text:0000000000013244                 add     rdx, rdx
.text:0000000000013247                 add     rdx, [rax]
.text:000000000001324A                 mov     rax, [rsp+158h+var_148]
.text:000000000001324F                 lea     rdi, [rax+r9*8]
.text:0000000000013253
.text:0000000000013253 loc_13253:                              ; CODE XREF: parse_expression+12EC↓j
.text:0000000000013253                 xor     eax, eax
.text:0000000000013255                 jmp     short loc_13272
.text:0000000000013255 ; ---------------------------------------------------------------------------
.text:0000000000013257                 align 20h
.text:0000000000013260
.text:0000000000013260 loc_13260:                              ; CODE XREF: parse_expression+12C8↓j
.text:0000000000013260                 lea     esi, [rbx+rax]
.text:0000000000013263                 cmp     esi, 5Fh ; '_'
.text:0000000000013266                 jz      short loc_1327A
.text:0000000000013268
.text:0000000000013268 loc_13268:                              ; CODE XREF: parse_expression+12D7↓j
.text:0000000000013268                 add     rax, 1
.text:000000000001326C                 cmp     rax, 40h ; '@'
.text:0000000000013270                 jz      short loc_13289
.text:0000000000013272
.text:0000000000013272 loc_13272:                              ; CODE XREF: parse_expression+12A5↑j
.text:0000000000013272                 test    byte ptr [rdx+rax*2], 8
.text:0000000000013276                 mov     ecx, eax
.text:0000000000013278                 jz      short loc_13260
.text:000000000001327A
.text:000000000001327A loc_1327A:                              ; CODE XREF: parse_expression+12B6↑j
.text:000000000001327A                 mov     rsi, r8
.text:000000000001327D                 shl     rsi, cl
.text:0000000000013280                 or      [rdi+0B8h], rsi
.text:0000000000013287                 jmp     short loc_13268
.text:0000000000013289 ; ---------------------------------------------------------------------------
.text:0000000000013289
.text:0000000000013289 loc_13289:                              ; CODE XREF: parse_expression+12C0↑j
.text:0000000000013289                 add     r9, 1
.text:000000000001328D                 add     ebx, 40h ; '@'
.text:0000000000013290                 sub     rdx, 0FFFFFFFFFFFFFF80h
.text:0000000000013294                 add     rdi, 8
.text:0000000000013298                 cmp     r9d, 3
.text:000000000001329C                 jle     short loc_13253
.text:000000000001329E                 jmp     loc_126E1
.text:00000000000132A3 ; ---------------------------------------------------------------------------
.text:00000000000132A3
.text:00000000000132A3 loc_132A3:                              ; CODE XREF: parse_expression+6EF↑j
.text:00000000000132A3                 xor     ebx, ebx
.text:00000000000132A5                 xor     r12d, r12d
.text:00000000000132A8                 jmp     short loc_13233
.text:00000000000132AA ; ---------------------------------------------------------------------------
.text:00000000000132AA
.text:00000000000132AA def_12916:                              ; CODE XREF: parse_expression+958↑j
.text:00000000000132AA                 lea     rcx, __PRETTY_FUNCTION___7327 ; jumptable 0000000000012916 default case
.text:00000000000132B1                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:00000000000132B8                 lea     rdi, assertion+10h ; assertion
.text:00000000000132BF                 mov     edx, 0CEDh      ; line
.text:00000000000132C4                 call    ___assert_fail
.text:00000000000132C9 ; ---------------------------------------------------------------------------
.text:00000000000132C9
.text:00000000000132C9 loc_132C9:                              ; CODE XREF: parse_expression+EA6↑j
.text:00000000000132C9                                         ; parse_expression+EBB↑j ...
.text:00000000000132C9                 mov     rax, [rsp+158h+var_118]
.text:00000000000132CE                 mov     dword ptr [rax], 0Bh
.text:00000000000132D4                 jmp     loc_12C28
.text:00000000000132D9 ; ---------------------------------------------------------------------------
.text:00000000000132D9
.text:00000000000132D9 loc_132D9:                              ; CODE XREF: parse_expression+ED2↑j
.text:00000000000132D9                 mov     rdi, [rsp+158h+var_A0]
.text:00000000000132E1                 xor     eax, eax
.text:00000000000132E3                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:00000000000132E7                 repne scasb
.text:00000000000132E9                 mov     rax, rcx
.text:00000000000132EC                 not     rax
.text:00000000000132EF                 sub     rax, 1
.text:00000000000132F3                 cmp     rax, 1
.text:00000000000132F7                 jbe     loc_12E88
.text:00000000000132FD
.text:00000000000132FD loc_132FD:                              ; CODE XREF: parse_expression+F37↑j
.text:00000000000132FD                                         ; parse_expression+F41↑j ...
.text:00000000000132FD                 mov     rax, [rsp+158h+var_118]
.text:0000000000013302                 mov     dword ptr [rax], 3
.text:0000000000013308                 jmp     loc_12C28
.text:000000000001330D ; ---------------------------------------------------------------------------
.text:000000000001330D
.text:000000000001330D loc_1330D:                              ; CODE XREF: parse_expression+EC8↑j
.text:000000000001330D                 mov     rdi, [rsp+158h+var_B0]
.text:0000000000013315                 xor     eax, eax
.text:0000000000013317                 or      rcx, 0FFFFFFFFFFFFFFFFh
.text:000000000001331B                 repne scasb
.text:000000000001331D                 mov     rax, rcx
.text:0000000000013320                 not     rax
.text:0000000000013323                 sub     rax, 1
.text:0000000000013327                 cmp     rax, 1
.text:000000000001332B                 jbe     loc_12E7E
.text:0000000000013331                 jmp     short loc_132FD
.text:0000000000013333 ; ---------------------------------------------------------------------------
.text:0000000000013333
.text:0000000000013333 loc_13333:                              ; CODE XREF: parse_expression+F6D↑j
.text:0000000000013333                 mov     rax, [rsp+158h+var_110]
.text:0000000000013338                 mov     rdi, rcx        ; ptr
.text:000000000001333B                 mov     [rsp+158h+var_CC], r8d
.text:0000000000013343                 mov     [rsp+158h+var_D0], edx
.text:000000000001334A                 mov     [rsp+158h+var_E8], r9
.text:000000000001334F                 add     rax, rax
.text:0000000000013352                 add     rax, 1
.text:0000000000013356                 lea     r10, ds:0[rax*4]
.text:000000000001335E                 mov     [rsp+158h+var_110], rax
.text:0000000000013363                 mov     rsi, r10        ; size
.text:0000000000013366                 mov     [rsp+158h+size], r10
.text:000000000001336E                 call    _realloc
.text:0000000000013373                 mov     r9, [rsp+158h+var_E8]
.text:0000000000013378                 mov     r10, [rsp+158h+size]
.text:0000000000013380                 mov     [rsp+158h+ptr], rax
.text:0000000000013385                 mov     rdi, [r9+10h]   ; ptr
.text:0000000000013389                 mov     rsi, r10        ; size
.text:000000000001338C                 call    _realloc
.text:0000000000013391                 mov     rcx, [rsp+158h+ptr]
.text:0000000000013396                 test    rcx, rcx
.text:0000000000013399                 jz      short loc_133C5
.text:000000000001339B                 test    rax, rax
.text:000000000001339E                 mov     r9, [rsp+158h+var_E8]
.text:00000000000133A3                 mov     edx, [rsp+158h+var_D0]
.text:00000000000133AA                 mov     r8d, [rsp+158h+var_CC]
.text:00000000000133B2                 jz      short loc_133C5
.text:00000000000133B4                 mov     [r9+10h], rax
.text:00000000000133B8                 mov     [r9+8], rcx
.text:00000000000133BC                 mov     rax, [r9+40h]
.text:00000000000133C0                 jmp     loc_12F23
.text:00000000000133C5 ; ---------------------------------------------------------------------------
.text:00000000000133C5
.text:00000000000133C5 loc_133C5:                              ; CODE XREF: parse_expression+13E9↑j
.text:00000000000133C5                                         ; parse_expression+1402↑j
.text:00000000000133C5                 mov     rdi, rcx        ; ptr
.text:00000000000133C8                 mov     [rsp+158h+var_158], rax
.text:00000000000133CC                 call    _free
.text:00000000000133D1                 mov     rax, [rsp+158h+var_158]
.text:00000000000133D5                 mov     rdi, rax        ; ptr
.text:00000000000133D8                 call    _free
.text:00000000000133DD                 mov     rax, [rsp+158h+var_118]
.text:00000000000133E2                 mov     dword ptr [rax], 0Ch
.text:00000000000133E8                 jmp     loc_12C28
.text:00000000000133ED ; ---------------------------------------------------------------------------
.text:00000000000133ED
.text:00000000000133ED loc_133ED:                              ; CODE XREF: parse_expression+1192↑j
.text:00000000000133ED                 xor     ecx, ecx
.text:00000000000133EF                 xor     edx, edx
.text:00000000000133F1                 mov     r8, r15
.text:00000000000133F4                 mov     rsi, rbp
.text:00000000000133F7                 mov     rdi, rbx
.text:00000000000133FA                 mov     byte ptr [rsp+158h+var_A0], 3
.text:0000000000013402                 mov     [rsp+158h+var_A8], r12
.text:000000000001340A                 call    create_token_tree_isra_16
.text:000000000001340F                 test    rax, rax
.text:0000000000013412                 jz      loc_130D3
.text:0000000000013418                 mov     rcx, [rsp+158h+var_130]
.text:000000000001341D                 lea     r8, [rsp+158h+var_98]
.text:0000000000013425                 mov     rdx, rax
.text:0000000000013428                 mov     rsi, rbp
.text:000000000001342B                 mov     rdi, rbx
.text:000000000001342E                 mov     [rsp+158h+var_90], 0Ah
.text:0000000000013436                 call    create_token_tree_isra_16
.text:000000000001343B                 test    rax, rax
.text:000000000001343E                 mov     [rsp+158h+var_130], rax
.text:0000000000013443                 jnz     loc_1214C
.text:0000000000013449                 jmp     loc_130D3
.text:000000000001344E ; ---------------------------------------------------------------------------
.text:000000000001344E
.text:000000000001344E loc_1344E:                              ; CODE XREF: parse_expression+126↑j
.text:000000000001344E                 call    ___stack_chk_fail
.text:0000000000013453 ; ---------------------------------------------------------------------------
.text:0000000000013453
.text:0000000000013453 loc_13453:                              ; CODE XREF: parse_expression+566↑j
.text:0000000000013453                 mov     rax, [rsp+158h+var_140]
.text:0000000000013458                 cmp     byte ptr [rax+8], 2
.text:000000000001345C                 jnz     loc_12650
.text:0000000000013462                 mov     rax, [rsp+158h+var_118]
.text:0000000000013467                 mov     dword ptr [rax], 9
.text:000000000001346D                 jmp     loc_1265B
.text:0000000000013472 ; ---------------------------------------------------------------------------
.text:0000000000013472
.text:0000000000013472 loc_13472:                              ; CODE XREF: parse_expression+1231↑j
.text:0000000000013472                 mov     rax, [rsp+158h+var_A0]
.text:000000000001347A                 movzx   r8d, byte ptr [rax]
.text:000000000001347E                 jmp     loc_12EAA
.text:000000000001347E ; } // starts at 11FB0
.text:000000000001347E parse_expression endp
.text:000000000001347E
.text:000000000001347E ; ---------------------------------------------------------------------------
.text:0000000000013483                 align 10h
.text:0000000000013490
.text:0000000000013490 ; =============== S U B R O U T I N E =======================================
.text:0000000000013490
.text:0000000000013490
.text:0000000000013490 parse_branch    proc near               ; CODE XREF: parse_reg_exp+43↓p
.text:0000000000013490                                         ; parse_reg_exp+AE↓p
.text:0000000000013490
.text:0000000000013490 var_78          = qword ptr -78h
.text:0000000000013490 var_70          = qword ptr -70h
.text:0000000000013490 var_68          = qword ptr -68h
.text:0000000000013490 var_60          = qword ptr -60h
.text:0000000000013490 var_58          = byte ptr -58h
.text:0000000000013490 var_50          = byte ptr -50h
.text:0000000000013490 var_40          = qword ptr -40h
.text:0000000000013490
.text:0000000000013490 ; __unwind {
.text:0000000000013490                 push    r15
.text:0000000000013492                 push    r14
.text:0000000000013494                 mov     r15, rcx
.text:0000000000013497                 push    r13
.text:0000000000013499                 push    r12
.text:000000000001349B                 mov     r13, rsi
.text:000000000001349E                 push    rbp
.text:000000000001349F                 push    rbx
.text:00000000000134A0                 mov     rbx, r9
.text:00000000000134A3                 mov     rbp, rdx
.text:00000000000134A6                 mov     r12, r8
.text:00000000000134A9                 sub     rsp, 48h
.text:00000000000134AD                 mov     rax, fs:28h
.text:00000000000134B6                 mov     [rsp+78h+var_40], rax
.text:00000000000134BB                 xor     eax, eax
.text:00000000000134BD                 mov     rax, [rsi]
.text:00000000000134C0                 mov     [rsp+78h+var_78], rdi
.text:00000000000134C4                 mov     [rsp+78h+var_68], rax
.text:00000000000134C9                 call    parse_expression
.text:00000000000134CE                 mov     edx, [rbx]
.text:00000000000134D0                 mov     r14, rax
.text:00000000000134D3                 test    edx, edx
.text:00000000000134D5                 jz      short loc_134E0
.text:00000000000134D7                 test    rax, rax
.text:00000000000134DA                 jz      loc_135DA
.text:00000000000134E0
.text:00000000000134E0 loc_134E0:                              ; CODE XREF: parse_branch+45↑j
.text:00000000000134E0                 lea     rax, [rsp+78h+var_58]
.text:00000000000134E5                 mov     [rsp+78h+var_60], rax
.text:00000000000134EA                 nop     word ptr [rax+rax+00h]
.text:00000000000134F0
.text:00000000000134F0 loc_134F0:                              ; CODE XREF: parse_branch+12F↓j
.text:00000000000134F0                 movzx   eax, byte ptr [rbp+8]
.text:00000000000134F4                 mov     edx, eax
.text:00000000000134F6                 and     edx, 0FFFFFFF7h
.text:00000000000134F9                 cmp     dl, 2
.text:00000000000134FC                 jz      loc_13590
.text:0000000000013502
.text:0000000000013502 loc_13502:                              ; CODE XREF: parse_branch+F6↓j
.text:0000000000013502                 cmp     al, 9
.text:0000000000013504                 jnz     short loc_1350F
.text:0000000000013506                 test    r12, r12
.text:0000000000013509                 jnz     loc_13590
.text:000000000001350F
.text:000000000001350F loc_1350F:                              ; CODE XREF: parse_branch+74↑j
.text:000000000001350F                 mov     rdi, [rsp+78h+var_78]
.text:0000000000013513                 mov     r9, rbx
.text:0000000000013516                 mov     r8, r12
.text:0000000000013519                 mov     rcx, r15
.text:000000000001351C                 mov     rdx, rbp
.text:000000000001351F                 mov     rsi, r13
.text:0000000000013522                 call    parse_expression
.text:0000000000013527                 mov     r9, rax
.text:000000000001352A                 mov     eax, [rbx]
.text:000000000001352C                 test    eax, eax
.text:000000000001352E                 jz      short loc_13539
.text:0000000000013530                 test    r9, r9
.text:0000000000013533                 jz      loc_135C4
.text:0000000000013539
.text:0000000000013539 loc_13539:                              ; CODE XREF: parse_branch+9E↑j
.text:0000000000013539                 test    r14, r14
.text:000000000001353C                 jz      short loc_135B8
.text:000000000001353E                 test    r9, r9
.text:0000000000013541                 jz      short loc_135B8
.text:0000000000013543                 mov     rax, [rsp+78h+var_68]
.text:0000000000013548                 mov     r8, [rsp+78h+var_60]
.text:000000000001354D                 mov     rcx, r9
.text:0000000000013550                 mov     rdx, r14
.text:0000000000013553                 mov     [rsp+78h+var_70], r9
.text:0000000000013558                 mov     [rsp+78h+var_50], 10h
.text:000000000001355D                 lea     rsi, [rax+80h]
.text:0000000000013564                 lea     rdi, [rax+70h]
.text:0000000000013568                 call    create_token_tree_isra_16
.text:000000000001356D                 test    rax, rax
.text:0000000000013570                 mov     r9, [rsp+78h+var_70]
.text:0000000000013575                 jz      short loc_135E0
.text:0000000000013577                 mov     r14, rax
.text:000000000001357A                 movzx   eax, byte ptr [rbp+8]
.text:000000000001357E                 mov     edx, eax
.text:0000000000013580                 and     edx, 0FFFFFFF7h
.text:0000000000013583                 cmp     dl, 2
.text:0000000000013586                 jnz     loc_13502
.text:000000000001358C                 nop     dword ptr [rax+00h]
.text:0000000000013590
.text:0000000000013590 loc_13590:                              ; CODE XREF: parse_branch+6C↑j
.text:0000000000013590                                         ; parse_branch+79↑j ...
.text:0000000000013590                 mov     rcx, [rsp+78h+var_40]
.text:0000000000013595                 xor     rcx, fs:28h
.text:000000000001359E                 mov     rax, r14
.text:00000000000135A1                 jnz     short loc_1360D
.text:00000000000135A3                 add     rsp, 48h
.text:00000000000135A7                 pop     rbx
.text:00000000000135A8                 pop     rbp
.text:00000000000135A9                 pop     r12
.text:00000000000135AB                 pop     r13
.text:00000000000135AD                 pop     r14
.text:00000000000135AF                 pop     r15
.text:00000000000135B1                 retn
.text:00000000000135B1 ; ---------------------------------------------------------------------------
.text:00000000000135B2                 align 8
.text:00000000000135B8
.text:00000000000135B8 loc_135B8:                              ; CODE XREF: parse_branch+AC↑j
.text:00000000000135B8                                         ; parse_branch+B1↑j
.text:00000000000135B8                 test    r14, r14
.text:00000000000135BB                 cmovz   r14, r9
.text:00000000000135BF                 jmp     loc_134F0
.text:00000000000135C4 ; ---------------------------------------------------------------------------
.text:00000000000135C4
.text:00000000000135C4 loc_135C4:                              ; CODE XREF: parse_branch+A3↑j
.text:00000000000135C4                 test    r14, r14
.text:00000000000135C7                 jz      short loc_135DA
.text:00000000000135C9                 lea     rsi, free_tree
.text:00000000000135D0                 xor     edx, edx
.text:00000000000135D2                 mov     rdi, r14
.text:00000000000135D5                 call    postorder
.text:00000000000135DA
.text:00000000000135DA loc_135DA:                              ; CODE XREF: parse_branch+4A↑j
.text:00000000000135DA                                         ; parse_branch+137↑j
.text:00000000000135DA                 xor     r14d, r14d
.text:00000000000135DD                 jmp     short loc_13590
.text:00000000000135DD ; ---------------------------------------------------------------------------
.text:00000000000135DF                 align 20h
.text:00000000000135E0
.text:00000000000135E0 loc_135E0:                              ; CODE XREF: parse_branch+E5↑j
.text:00000000000135E0                 lea     rsi, free_tree
.text:00000000000135E7                 mov     rdi, r9
.text:00000000000135EA                 xor     edx, edx
.text:00000000000135EC                 call    postorder
.text:00000000000135F1                 lea     rsi, free_tree
.text:00000000000135F8                 mov     rdi, r14
.text:00000000000135FB                 xor     edx, edx
.text:00000000000135FD                 xor     r14d, r14d
.text:0000000000013600                 call    postorder
.text:0000000000013605                 mov     dword ptr [rbx], 0Ch
.text:000000000001360B                 jmp     short loc_13590
.text:000000000001360D ; ---------------------------------------------------------------------------
.text:000000000001360D
.text:000000000001360D loc_1360D:                              ; CODE XREF: parse_branch+111↑j
.text:000000000001360D                 call    ___stack_chk_fail
.text:000000000001360D ; } // starts at 13490
.text:000000000001360D parse_branch    endp
.text:000000000001360D
.text:000000000001360D ; ---------------------------------------------------------------------------
.text:0000000000013612                 align 20h
.text:0000000000013620
.text:0000000000013620 ; =============== S U B R O U T I N E =======================================
.text:0000000000013620
.text:0000000000013620
.text:0000000000013620 parse_reg_exp   proc near               ; CODE XREF: parse_expression+BF↑p
.text:0000000000013620                                         ; re_compile_internal+4B3↓p
.text:0000000000013620
.text:0000000000013620 var_80          = qword ptr -80h
.text:0000000000013620 var_78          = qword ptr -78h
.text:0000000000013620 var_70          = qword ptr -70h
.text:0000000000013620 var_68          = qword ptr -68h
.text:0000000000013620 var_60          = qword ptr -60h
.text:0000000000013620 var_58          = byte ptr -58h
.text:0000000000013620 var_50          = byte ptr -50h
.text:0000000000013620 var_40          = qword ptr -40h
.text:0000000000013620
.text:0000000000013620 ; __unwind {
.text:0000000000013620                 push    r15
.text:0000000000013622                 push    r14
.text:0000000000013624                 mov     r14, rcx
.text:0000000000013627                 push    r13
.text:0000000000013629                 push    r12
.text:000000000001362B                 mov     r13, r9
.text:000000000001362E                 push    rbp
.text:000000000001362F                 push    rbx
.text:0000000000013630                 mov     rbp, rdx
.text:0000000000013633                 mov     r12, rdi
.text:0000000000013636                 sub     rsp, 58h
.text:000000000001363A                 mov     rbx, [rsi]
.text:000000000001363D                 mov     rax, fs:28h
.text:0000000000013646                 mov     [rsp+88h+var_40], rax
.text:000000000001364B                 xor     eax, eax
.text:000000000001364D                 mov     [rsp+88h+var_60], rsi
.text:0000000000013652                 mov     [rsp+88h+var_78], r8
.text:0000000000013657                 mov     rax, [rbx+0A8h]
.text:000000000001365E                 mov     [rsp+88h+var_68], rax
.text:0000000000013663                 call    parse_branch
.text:0000000000013668                 mov     edx, [r13+0]
.text:000000000001366C                 mov     r15, rax
.text:000000000001366F                 test    edx, edx
.text:0000000000013671                 jz      short loc_1367C
.text:0000000000013673                 test    rax, rax
.text:0000000000013676                 jz      loc_13762
.text:000000000001367C
.text:000000000001367C loc_1367C:                              ; CODE XREF: parse_reg_exp+51↑j
.text:000000000001367C                 lea     rax, [rsp+88h+var_58]
.text:0000000000013681                 mov     [rsp+88h+var_80], rax
.text:0000000000013686                 jmp     loc_13714
.text:0000000000013686 ; ---------------------------------------------------------------------------
.text:000000000001368B                 align 10h
.text:0000000000013690
.text:0000000000013690 loc_13690:                              ; CODE XREF: parse_reg_exp+122↓j
.text:0000000000013690                 cmp     al, 9
.text:0000000000013692                 jnz     short loc_136A0
.text:0000000000013694                 cmp     [rsp+88h+var_78], 0
.text:000000000001369A                 jnz     loc_13748
.text:00000000000136A0
.text:00000000000136A0 loc_136A0:                              ; CODE XREF: parse_reg_exp+72↑j
.text:00000000000136A0                 mov     rax, [rbx+0A8h]
.text:00000000000136A7                 mov     r8, [rsp+88h+var_78]
.text:00000000000136AC                 mov     rcx, r14
.text:00000000000136AF                 mov     rsi, [rsp+88h+var_60]
.text:00000000000136B4                 mov     r9, r13
.text:00000000000136B7                 mov     rdx, rbp
.text:00000000000136BA                 mov     rdi, r12
.text:00000000000136BD                 mov     [rsp+88h+var_70], rax
.text:00000000000136C2                 mov     rax, [rsp+88h+var_68]
.text:00000000000136C7                 mov     [rbx+0A8h], rax
.text:00000000000136CE                 call    parse_branch
.text:00000000000136D3                 mov     rcx, rax
.text:00000000000136D6                 mov     eax, [r13+0]
.text:00000000000136DA                 test    eax, eax
.text:00000000000136DC                 jz      short loc_136E3
.text:00000000000136DE                 test    rcx, rcx
.text:00000000000136E1                 jz      short loc_1374C
.text:00000000000136E3
.text:00000000000136E3 loc_136E3:                              ; CODE XREF: parse_reg_exp+BC↑j
.text:00000000000136E3                 mov     rax, [rsp+88h+var_70]
.text:00000000000136E8                 or      [rbx+0A8h], rax
.text:00000000000136EF
.text:00000000000136EF loc_136EF:                              ; CODE XREF: parse_reg_exp+12A↓j
.text:00000000000136EF                 mov     r8, [rsp+88h+var_80]
.text:00000000000136F4                 lea     rsi, [rbx+80h]
.text:00000000000136FB                 lea     rdi, [rbx+70h]
.text:00000000000136FF                 mov     rdx, r15
.text:0000000000013702                 mov     [rsp+88h+var_50], 0Ah
.text:0000000000013707                 call    create_token_tree_isra_16
.text:000000000001370C                 test    rax, rax
.text:000000000001370F                 mov     r15, rax
.text:0000000000013712                 jz      short loc_13790
.text:0000000000013714
.text:0000000000013714 loc_13714:                              ; CODE XREF: parse_reg_exp+66↑j
.text:0000000000013714                 cmp     byte ptr [rbp+8], 0Ah
.text:0000000000013718                 jnz     short loc_13768
.text:000000000001371A                 mov     rdx, r14
.text:000000000001371D                 mov     rsi, r12
.text:0000000000013720                 mov     rdi, rbp
.text:0000000000013723                 or      rdx, 800000h
.text:000000000001372A                 call    peek_token
.text:000000000001372F                 cdqe
.text:0000000000013731                 add     [r12+48h], rax
.text:0000000000013736                 movzx   eax, byte ptr [rbp+8]
.text:000000000001373A                 mov     edx, eax
.text:000000000001373C                 and     edx, 0FFFFFFF7h
.text:000000000001373F                 cmp     dl, 2
.text:0000000000013742                 jnz     loc_13690
.text:0000000000013748
.text:0000000000013748 loc_13748:                              ; CODE XREF: parse_reg_exp+7A↑j
.text:0000000000013748                 xor     ecx, ecx
.text:000000000001374A                 jmp     short loc_136EF
.text:000000000001374C ; ---------------------------------------------------------------------------
.text:000000000001374C
.text:000000000001374C loc_1374C:                              ; CODE XREF: parse_reg_exp+C1↑j
.text:000000000001374C                 test    r15, r15
.text:000000000001374F                 jz      short loc_13762
.text:0000000000013751                 lea     rsi, free_tree
.text:0000000000013758                 xor     edx, edx
.text:000000000001375A                 mov     rdi, r15
.text:000000000001375D                 call    postorder
.text:0000000000013762
.text:0000000000013762 loc_13762:                              ; CODE XREF: parse_reg_exp+56↑j
.text:0000000000013762                                         ; parse_reg_exp+12F↑j
.text:0000000000013762                 xor     r15d, r15d
.text:0000000000013765                 nop     dword ptr [rax]
.text:0000000000013768
.text:0000000000013768 loc_13768:                              ; CODE XREF: parse_reg_exp+F8↑j
.text:0000000000013768                                         ; parse_reg_exp+178↓j
.text:0000000000013768                 mov     rcx, [rsp+88h+var_40]
.text:000000000001376D                 xor     rcx, fs:28h
.text:0000000000013776                 mov     rax, r15
.text:0000000000013779                 jnz     short loc_1379A
.text:000000000001377B                 add     rsp, 58h
.text:000000000001377F                 pop     rbx
.text:0000000000013780                 pop     rbp
.text:0000000000013781                 pop     r12
.text:0000000000013783                 pop     r13
.text:0000000000013785                 pop     r14
.text:0000000000013787                 pop     r15
.text:0000000000013789                 retn
.text:0000000000013789 ; ---------------------------------------------------------------------------
.text:000000000001378A                 align 10h
.text:0000000000013790
.text:0000000000013790 loc_13790:                              ; CODE XREF: parse_reg_exp+F2↑j
.text:0000000000013790                 mov     dword ptr [r13+0], 0Ch
.text:0000000000013798                 jmp     short loc_13768
.text:000000000001379A ; ---------------------------------------------------------------------------
.text:000000000001379A
.text:000000000001379A loc_1379A:                              ; CODE XREF: parse_reg_exp+159↑j
.text:000000000001379A                 call    ___stack_chk_fail
.text:000000000001379A ; } // starts at 13620
.text:000000000001379A parse_reg_exp   endp
.text:000000000001379A
.text:000000000001379A ; ---------------------------------------------------------------------------
.text:000000000001379F                 align 20h
.text:00000000000137A0
.text:00000000000137A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000137A0
.text:00000000000137A0
.text:00000000000137A0 re_compile_internal proc near           ; CODE XREF: rpl_re_compile_pattern+35↓p
.text:00000000000137A0                                         ; rpl_regcomp+A4↓p
.text:00000000000137A0
.text:00000000000137A0 size            = qword ptr -158h
.text:00000000000137A0 var_150         = qword ptr -150h
.text:00000000000137A0 var_148         = qword ptr -148h
.text:00000000000137A0 var_140         = qword ptr -140h
.text:00000000000137A0 var_138         = qword ptr -138h
.text:00000000000137A0 var_130         = qword ptr -130h
.text:00000000000137A0 var_128         = qword ptr -128h
.text:00000000000137A0 var_120         = qword ptr -120h
.text:00000000000137A0 var_10C         = dword ptr -10Ch
.text:00000000000137A0 var_108         = dword ptr -108h
.text:00000000000137A0 var_F8          = byte ptr -0F8h
.text:00000000000137A0 var_F0          = qword ptr -0F0h
.text:00000000000137A0 ptr             = qword ptr -0E8h
.text:00000000000137A0 var_D8          = qword ptr -0D8h
.text:00000000000137A0 var_D0          = qword ptr -0D0h
.text:00000000000137A0 var_B0          = qword ptr -0B0h
.text:00000000000137A0 var_A8          = qword ptr -0A8h
.text:00000000000137A0 var_A0          = qword ptr -0A0h
.text:00000000000137A0 var_98          = qword ptr -98h
.text:00000000000137A0 var_90          = qword ptr -90h
.text:00000000000137A0 var_88          = qword ptr -88h
.text:00000000000137A0 var_80          = qword ptr -80h
.text:00000000000137A0 var_78          = qword ptr -78h
.text:00000000000137A0 var_70          = qword ptr -70h
.text:00000000000137A0 var_60          = qword ptr -60h
.text:00000000000137A0 var_50          = byte ptr -50h
.text:00000000000137A0 var_4F          = byte ptr -4Fh
.text:00000000000137A0 var_4E          = byte ptr -4Eh
.text:00000000000137A0 var_4D          = byte ptr -4Dh
.text:00000000000137A0 var_48          = dword ptr -48h
.text:00000000000137A0 var_40          = qword ptr -40h
.text:00000000000137A0
.text:00000000000137A0 ; __unwind {
.text:00000000000137A0                 push    r15
.text:00000000000137A2                 push    r14
.text:00000000000137A4                 push    r13
.text:00000000000137A6                 push    r12
.text:00000000000137A8                 push    rbp
.text:00000000000137A9                 push    rbx
.text:00000000000137AA                 sub     rsp, 128h
.text:00000000000137B1                 mov     [rdi+18h], rcx
.text:00000000000137B5                 mov     qword ptr [rdi+10h], 0
.text:00000000000137BD                 mov     rax, fs:28h
.text:00000000000137C6                 mov     [rsp+158h+var_40], rax
.text:00000000000137CE                 xor     eax, eax
.text:00000000000137D0                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000137D4                 mov     [rsp+158h+var_150], rdi
.text:00000000000137D9                 mov     [rsp+158h+var_148], rsi
.text:00000000000137DE                 mov     [rsp+158h+size], rdx
.text:00000000000137E2                 mov     [rsp+158h+var_140], rcx
.text:00000000000137E7                 mov     [rsp+158h+var_10C], 0
.text:00000000000137EF                 mov     qword ptr [rdi+30h], 0
.text:00000000000137F7                 mov     rbx, [rdi]
.text:00000000000137FA                 mov     byte ptr [rsp+158h+var_138], al
.text:00000000000137FE                 and     eax, 0FFFFFF90h
.text:0000000000013801                 cmp     qword ptr [rdi+8], 0E7h
.text:0000000000013809                 mov     [rdi+38h], al
.text:000000000001380C                 jbe     loc_14606
.text:0000000000013812
.text:0000000000013812 loc_13812:                              ; CODE XREF: re_compile_internal+E8F↓j
.text:0000000000013812                 lea     rdi, [rbx+8]
.text:0000000000013816                 mov     rax, [rsp+158h+var_150]
.text:000000000001381B                 mov     rcx, rbx
.text:000000000001381E                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:0000000000013822                 sub     rcx, rdi
.text:0000000000013825                 mov     qword ptr [rax+10h], 0E8h
.text:000000000001382D                 xor     eax, eax
.text:000000000001382F                 add     ecx, 0E8h
.text:0000000000013835                 mov     qword ptr [rbx], 0
.text:000000000001383C                 mov     qword ptr [rbx+0E0h], 0
.text:0000000000013847                 shr     ecx, 3
.text:000000000001384A                 rep stosq
.text:000000000001384D                 mov     rax, 555555555555554h
.text:0000000000013857                 mov     dword ptr [rbx+80h], 0Fh
.text:0000000000013861                 cmp     [rsp+158h+size], rax
.text:0000000000013865                 ja      loc_13EA6
.text:000000000001386B                 mov     r14, [rsp+158h+size]
.text:000000000001386F                 lea     rax, [r14+1]
.text:0000000000013873                 mov     rdi, rax
.text:0000000000013876                 mov     [rbx+8], rax
.text:000000000001387A                 mov     [rsp+158h+var_130], rax
.text:000000000001387F                 shl     rdi, 4          ; size
.text:0000000000013883                 call    _malloc
.text:0000000000013888                 test    r14, r14
.text:000000000001388B                 mov     [rbx], rax
.text:000000000001388E                 jz      loc_14575
.text:0000000000013894                 mov     esi, 1
.text:0000000000013899                 nop     dword ptr [rax+00000000h]
.text:00000000000138A0
.text:00000000000138A0 loc_138A0:                              ; CODE XREF: re_compile_internal+107↓j
.text:00000000000138A0                 add     rsi, rsi        ; size
.text:00000000000138A3                 cmp     [rsp+158h+size], rsi
.text:00000000000138A7                 jnb     short loc_138A0
.text:00000000000138A9                 lea     rbp, [rsi-1]
.text:00000000000138AD
.text:00000000000138AD loc_138AD:                              ; CODE XREF: re_compile_internal+DDC↓j
.text:00000000000138AD                 mov     edi, 18h        ; nmemb
.text:00000000000138B2                 call    _calloc
.text:00000000000138B7                 mov     [rbx+88h], rbp
.text:00000000000138BE                 mov     [rbx+40h], rax
.text:00000000000138C2                 call    ___ctype_get_mb_cur_max
.text:00000000000138C7                 mov     edi, 0Eh        ; item
.text:00000000000138CC                 mov     [rbx+0B4h], eax
.text:00000000000138D2                 call    _nl_langinfo
.text:00000000000138D7                 movzx   edx, byte ptr [rax]
.text:00000000000138DA                 and     edx, 0FFFFFFDFh
.text:00000000000138DD                 cmp     dl, 55h ; 'U'
.text:00000000000138E0                 jnz     short loc_13930
.text:00000000000138E2                 movzx   edx, byte ptr [rax+1]
.text:00000000000138E6                 and     edx, 0FFFFFFDFh
.text:00000000000138E9                 cmp     dl, 54h ; 'T'
.text:00000000000138EC                 jnz     short loc_13930
.text:00000000000138EE                 movzx   edx, byte ptr [rax+2]
.text:00000000000138F2                 and     edx, 0FFFFFFDFh
.text:00000000000138F5                 cmp     dl, 46h ; 'F'
.text:00000000000138F8                 jnz     short loc_13930
.text:00000000000138FA                 xor     edx, edx
.text:00000000000138FC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000013900                 lea     rdi, a8         ; "8"
.text:0000000000013907                 mov     ecx, 2
.text:000000000001390C                 setz    dl
.text:000000000001390F                 lea     rsi, [rax+rdx+3]
.text:0000000000013914                 repe cmpsb
.text:0000000000013916                 setnbe  al
.text:0000000000013919                 sbb     al, 0
.text:000000000001391B                 test    al, al
.text:000000000001391D                 jnz     short loc_13930
.text:000000000001391F                 or      byte ptr [rbx+0B0h], 4
.text:0000000000013926                 db      2Eh
.text:0000000000013926                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013930
.text:0000000000013930 loc_13930:                              ; CODE XREF: re_compile_internal+140↑j
.text:0000000000013930                                         ; re_compile_internal+14C↑j ...
.text:0000000000013930                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000013937                 mov     edx, eax
.text:0000000000013939                 and     edx, 0FFFFFFF7h
.text:000000000001393C                 cmp     dword ptr [rbx+0B4h], 1
.text:0000000000013943                 mov     [rbx+0B0h], dl
.text:0000000000013949                 jle     short loc_1395E
.text:000000000001394B                 test    al, 4
.text:000000000001394D                 jz      loc_13EB3
.text:0000000000013953                 lea     rax, utf8_sb_map
.text:000000000001395A                 mov     [rbx+78h], rax
.text:000000000001395E
.text:000000000001395E loc_1395E:                              ; CODE XREF: re_compile_internal+1A9↑j
.text:000000000001395E                                         ; re_compile_internal+793↓j
.text:000000000001395E                 cmp     qword ptr [rbx], 0
.text:0000000000013962                 jz      loc_13EA6
.text:0000000000013968                 cmp     qword ptr [rbx+40h], 0
.text:000000000001396D                 jz      loc_13EA6
.text:0000000000013973                 mov     rax, [rsp+158h+var_140]
.text:0000000000013978                 lea     rbp, [rsp+158h+var_D8]
.text:0000000000013980                 mov     ecx, 12h
.text:0000000000013985                 mov     [rsp+158h+var_10C], 0
.text:000000000001398D                 lea     r8, [rbp+8]
.text:0000000000013991                 and     eax, 400000h
.text:0000000000013996                 mov     [rsp+158h+var_138], rax
.text:000000000001399B                 mov     rax, [rsp+158h+var_150]
.text:00000000000139A0                 setnz   dl
.text:00000000000139A3                 mov     rdi, r8
.text:00000000000139A6                 mov     rsi, [rax+28h]
.text:00000000000139AA                 xor     eax, eax
.text:00000000000139AC                 rep stosq
.text:00000000000139AF                 mov     rax, [rsp+158h+var_148]
.text:00000000000139B4                 mov     rdi, [rsp+158h+size]
.text:00000000000139B8                 test    rsi, rsi
.text:00000000000139BB                 mov     [rsp+158h+var_50], dl
.text:00000000000139C2                 mov     ecx, [rbx+0B4h]
.text:00000000000139C8                 setnz   r12b
.text:00000000000139CC                 mov     [rsp+158h+var_60], rsi
.text:00000000000139D4                 mov     [rsp+158h+var_D8], rax
.text:00000000000139DC                 movzx   eax, byte ptr [rbx+0B0h]
.text:00000000000139E3                 or      r12d, edx
.text:00000000000139E6                 mov     [rsp+158h+var_80], rdi
.text:00000000000139EE                 mov     [rsp+158h+var_88], rdi
.text:00000000000139F6                 mov     esi, r12d
.text:00000000000139F9                 mov     [rsp+158h+var_4D], r12b
.text:0000000000013A01                 mov     [rsp+158h+var_48], ecx
.text:0000000000013A08                 mov     [rsp+158h+var_70], rdi
.text:0000000000013A10                 mov     [rsp+158h+var_78], rdi
.text:0000000000013A18                 mov     edx, eax
.text:0000000000013A1A                 shr     al, 3
.text:0000000000013A1D                 shr     dl, 2
.text:0000000000013A20                 and     eax, 1
.text:0000000000013A23                 and     edx, 1
.text:0000000000013A26                 test    rdi, rdi
.text:0000000000013A29                 mov     [rsp+158h+var_4E], al
.text:0000000000013A30                 mov     [rsp+158h+var_4F], dl
.text:0000000000013A37                 jnz     loc_13E75
.text:0000000000013A3D                 test    sil, sil
.text:0000000000013A40                 jz      short loc_13A4F
.text:0000000000013A42
.text:0000000000013A42 loc_13A42:                              ; CODE XREF: re_compile_internal+701↓j
.text:0000000000013A42                 mov     rax, [rsp+158h+var_D0]
.text:0000000000013A4A                 mov     [rsp+158h+var_148], rax
.text:0000000000013A4F
.text:0000000000013A4F loc_13A4F:                              ; CODE XREF: re_compile_internal+2A0↑j
.text:0000000000013A4F                                         ; re_compile_internal+6FB↓j
.text:0000000000013A4F                 cmp     [rsp+158h+var_138], 0
.text:0000000000013A55                 mov     rax, [rsp+158h+var_148]
.text:0000000000013A5A                 mov     [rsp+158h+var_D0], rax
.text:0000000000013A62                 jz      loc_13B65
.text:0000000000013A68                 cmp     ecx, 1
.text:0000000000013A6B                 jle     loc_1465D
.text:0000000000013A71
.text:0000000000013A71 loc_13A71:                              ; CODE XREF: re_compile_internal+31C↓j
.text:0000000000013A71                 mov     rdi, rbp
.text:0000000000013A74                 call    build_wcs_upper_buffer
.text:0000000000013A79                 test    eax, eax
.text:0000000000013A7B                 jnz     short loc_13AC0
.text:0000000000013A7D                 mov     rax, [rsp+158h+size]
.text:0000000000013A81                 cmp     rax, [rsp+158h+var_A0]
.text:0000000000013A89                 jle     loc_14640
.text:0000000000013A8F                 movsxd  rax, dword ptr [rbx+0B4h]
.text:0000000000013A96                 mov     rsi, [rsp+158h+var_98]
.text:0000000000013A9E                 add     rax, [rsp+158h+var_A8]
.text:0000000000013AA6                 cmp     rsi, rax
.text:0000000000013AA9                 jg      loc_14640
.text:0000000000013AAF                 add     rsi, rsi
.text:0000000000013AB2                 mov     rdi, rbp
.text:0000000000013AB5                 call    re_string_realloc_buffers
.text:0000000000013ABA                 test    eax, eax
.text:0000000000013ABC                 jz      short loc_13A71
.text:0000000000013ABE                 xchg    ax, ax
.text:0000000000013AC0
.text:0000000000013AC0 loc_13AC0:                              ; CODE XREF: re_compile_internal+2DB↑j
.text:0000000000013AC0                                         ; re_compile_internal+674↓j ...
.text:0000000000013AC0                 mov     [rsp+158h+var_10C], eax
.text:0000000000013AC4                 mov     rax, [rsp+158h+var_150]
.text:0000000000013AC9                 mov     r13, [rax]
.text:0000000000013ACC
.text:0000000000013ACC loc_13ACC:                              ; CODE XREF: re_compile_internal+D75↓j
.text:0000000000013ACC                                         ; re_compile_internal+EE2↓j ...
.text:0000000000013ACC                 mov     rdi, [r13+70h]  ; ptr
.text:0000000000013AD0                 test    rdi, rdi
.text:0000000000013AD3                 jz      short loc_13AE8
.text:0000000000013AD5                 nop     dword ptr [rax]
.text:0000000000013AD8
.text:0000000000013AD8 loc_13AD8:                              ; CODE XREF: re_compile_internal+346↓j
.text:0000000000013AD8                 mov     r12, [rdi]
.text:0000000000013ADB                 call    _free
.text:0000000000013AE0                 test    r12, r12
.text:0000000000013AE3                 mov     rdi, r12
.text:0000000000013AE6                 jnz     short loc_13AD8
.text:0000000000013AE8
.text:0000000000013AE8 loc_13AE8:                              ; CODE XREF: re_compile_internal+333↑j
.text:0000000000013AE8                 mov     rdi, [r13+20h]  ; ptr
.text:0000000000013AEC                 mov     qword ptr [r13+70h], 0
.text:0000000000013AF4                 mov     dword ptr [r13+80h], 0Fh
.text:0000000000013AFF                 mov     qword ptr [r13+68h], 0
.text:0000000000013B07                 call    _free
.text:0000000000013B0C                 mov     qword ptr [r13+20h], 0
.text:0000000000013B14                 mov     rdi, rbp
.text:0000000000013B17                 call    re_string_destruct
.text:0000000000013B1C
.text:0000000000013B1C loc_13B1C:                              ; CODE XREF: re_compile_internal+70E↓j
.text:0000000000013B1C                                         ; re_compile_internal+D68↓j
.text:0000000000013B1C                 mov     rdi, rbx        ; ptr
.text:0000000000013B1F                 call    free_dfa_content
.text:0000000000013B24                 mov     rax, [rsp+158h+var_150]
.text:0000000000013B29                 mov     qword ptr [rax], 0
.text:0000000000013B30                 mov     qword ptr [rax+8], 0
.text:0000000000013B38                 mov     eax, [rsp+158h+var_10C]
.text:0000000000013B3C
.text:0000000000013B3C loc_13B3C:                              ; CODE XREF: re_compile_internal+D62↓j
.text:0000000000013B3C                                         ; re_compile_internal+1016↓j
.text:0000000000013B3C                 mov     rbx, [rsp+158h+var_40]
.text:0000000000013B44                 xor     rbx, fs:28h
.text:0000000000013B4D                 jnz     loc_14890
.text:0000000000013B53                 add     rsp, 128h
.text:0000000000013B5A                 pop     rbx
.text:0000000000013B5B                 pop     rbp
.text:0000000000013B5C                 pop     r12
.text:0000000000013B5E                 pop     r13
.text:0000000000013B60                 pop     r14
.text:0000000000013B62                 pop     r15
.text:0000000000013B64                 retn
.text:0000000000013B65 ; ---------------------------------------------------------------------------
.text:0000000000013B65
.text:0000000000013B65 loc_13B65:                              ; CODE XREF: re_compile_internal+2C2↑j
.text:0000000000013B65                 cmp     ecx, 1
.text:0000000000013B68                 jg      loc_1451A
.text:0000000000013B6E                 test    r12b, r12b
.text:0000000000013B71                 mov     rsi, [rsp+158h+var_98]
.text:0000000000013B79                 jz      loc_14194
.text:0000000000013B7F                 cmp     [rsp+158h+var_80], rsi
.text:0000000000013B87                 mov     rax, [rsp+158h+var_A8]
.text:0000000000013B8F                 cmovle  rsi, [rsp+158h+var_80]
.text:0000000000013B98                 cmp     rsi, rax
.text:0000000000013B9B                 jg      short loc_13BAD
.text:0000000000013B9D                 jmp     short loc_13BE0
.text:0000000000013B9D ; ---------------------------------------------------------------------------
.text:0000000000013B9F                 align 20h
.text:0000000000013BA0
.text:0000000000013BA0 loc_13BA0:                              ; CODE XREF: re_compile_internal+43E↓j
.text:0000000000013BA0                 mov     rdx, [rsp+158h+var_D0]
.text:0000000000013BA8                 mov     [rsp+158h+var_148], rdx
.text:0000000000013BAD
.text:0000000000013BAD loc_13BAD:                              ; CODE XREF: re_compile_internal+3FB↑j
.text:0000000000013BAD                 mov     rdx, [rsp+158h+var_D8]
.text:0000000000013BB5                 mov     rcx, [rsp+158h+var_60]
.text:0000000000013BBD                 add     rdx, rax
.text:0000000000013BC0                 add     rdx, [rsp+158h+var_B0]
.text:0000000000013BC8                 movzx   edx, byte ptr [rdx]
.text:0000000000013BCB                 movzx   edx, byte ptr [rcx+rdx]
.text:0000000000013BCF                 mov     rcx, [rsp+158h+var_148]
.text:0000000000013BD4                 mov     [rcx+rax], dl
.text:0000000000013BD7                 add     rax, 1
.text:0000000000013BDB                 cmp     rsi, rax
.text:0000000000013BDE                 jnz     short loc_13BA0
.text:0000000000013BE0
.text:0000000000013BE0 loc_13BE0:                              ; CODE XREF: re_compile_internal+3FD↑j
.text:0000000000013BE0                 mov     [rsp+158h+var_A8], rax
.text:0000000000013BE8                 mov     [rsp+158h+var_A0], rax
.text:0000000000013BF0                 mov     [rsp+158h+var_10C], 0
.text:0000000000013BF8
.text:0000000000013BF8 loc_13BF8:                              ; CODE XREF: re_compile_internal+A0C↓j
.text:0000000000013BF8                                         ; re_compile_internal+D8A↓j ...
.text:0000000000013BF8                 mov     r12, [rsp+158h+var_150]
.text:0000000000013BFD                 mov     r14, [rsp+158h+var_140]
.text:0000000000013C02                 lea     r13, [rsp+158h+var_108]
.text:0000000000013C07                 mov     rsi, rbp
.text:0000000000013C0A                 mov     rdi, r13
.text:0000000000013C0D                 mov     [rsp+158h+var_130], r13
.text:0000000000013C12                 mov     r15, [r12]
.text:0000000000013C16                 mov     rdx, r14
.text:0000000000013C19                 mov     qword ptr [r12+30h], 0
.text:0000000000013C22                 or      rdx, 800000h
.text:0000000000013C29                 mov     [r15+0D8h], r14
.text:0000000000013C30                 call    peek_token
.text:0000000000013C35                 lea     r9, [rsp+158h+var_10C]
.text:0000000000013C3A                 xor     r8d, r8d
.text:0000000000013C3D                 mov     rcx, r14
.text:0000000000013C40                 mov     rdx, r13
.text:0000000000013C43                 mov     rsi, r12
.text:0000000000013C46                 mov     rdi, rbp
.text:0000000000013C49                 cdqe
.text:0000000000013C4B                 add     [rsp+158h+var_90], rax
.text:0000000000013C53                 call    parse_reg_exp
.text:0000000000013C58                 mov     ecx, [rsp+158h+var_10C]
.text:0000000000013C5C                 test    ecx, ecx
.text:0000000000013C5E                 jnz     loc_14687
.text:0000000000013C64                 lea     r13, [r15+70h]
.text:0000000000013C68                 lea     r12, [rsp+158h+var_F8]
.text:0000000000013C6D                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:0000000000013C71                 xor     edx, edx
.text:0000000000013C73                 xor     ecx, ecx
.text:0000000000013C75                 mov     rsi, r15
.text:0000000000013C78                 mov     r8, r12
.text:0000000000013C7B                 mov     rdi, r13
.text:0000000000013C7E                 mov     [rsp+158h+size], rax
.text:0000000000013C82                 mov     byte ptr [rsp+158h+var_F0], 2
.text:0000000000013C87                 call    create_token_tree_isra_16
.text:0000000000013C8C                 mov     r9, [rsp+158h+size]
.text:0000000000013C90                 mov     r11, rax
.text:0000000000013C93                 mov     rdx, rax
.text:0000000000013C96                 test    r9, r9
.text:0000000000013C99                 jz      short loc_13CC2
.text:0000000000013C9B
.text:0000000000013C9B loc_13C9B:                              ; CODE XREF: re_compile_internal+F1F↓j
.text:0000000000013C9B                 mov     rcx, r11
.text:0000000000013C9E                 mov     rdx, r9
.text:0000000000013CA1                 mov     r8, r12
.text:0000000000013CA4                 mov     rsi, r15
.text:0000000000013CA7                 mov     rdi, r13
.text:0000000000013CAA                 mov     [rsp+158h+size], r11
.text:0000000000013CAE                 mov     byte ptr [rsp+158h+var_F0], 10h
.text:0000000000013CB3                 call    create_token_tree_isra_16
.text:0000000000013CB8                 mov     r11, [rsp+158h+size]
.text:0000000000013CBC                 mov     rdx, r11
.text:0000000000013CBF                 mov     r11, rax
.text:0000000000013CC2
.text:0000000000013CC2 loc_13CC2:                              ; CODE XREF: re_compile_internal+4F9↑j
.text:0000000000013CC2                 test    rdx, rdx
.text:0000000000013CC5                 mov     rcx, [rsp+158h+var_150]
.text:0000000000013CCA                 setz    dl
.text:0000000000013CCD                 test    r11, r11
.text:0000000000013CD0                 setz    al
.text:0000000000013CD3                 or      dl, al
.text:0000000000013CD5                 mov     r13, [rcx]
.text:0000000000013CD8                 jnz     loc_14672
.text:0000000000013CDE                 mov     r15, [r13+8]
.text:0000000000013CE2                 mov     [rbx+68h], r11
.text:0000000000013CE6                 lea     rcx, ds:0[r15*8]
.text:0000000000013CEE                 lea     r15, [r15+r15*2]
.text:0000000000013CF2                 mov     rdi, rcx        ; size
.text:0000000000013CF5                 mov     [rsp+158h+size], rcx
.text:0000000000013CF9                 shl     r15, 3
.text:0000000000013CFD                 call    _malloc
.text:0000000000013D02                 mov     rcx, [rsp+158h+size]
.text:0000000000013D06                 mov     [r13+18h], rax
.text:0000000000013D0A                 mov     [rsp+158h+var_140], rax
.text:0000000000013D0F                 mov     rdi, rcx        ; size
.text:0000000000013D12                 call    _malloc
.text:0000000000013D17                 mov     rdi, r15        ; size
.text:0000000000013D1A                 mov     [r13+20h], rax
.text:0000000000013D1E                 mov     [rsp+158h+var_148], rax
.text:0000000000013D23                 call    _malloc
.text:0000000000013D28                 mov     rdi, r15        ; size
.text:0000000000013D2B                 mov     [r13+28h], rax
.text:0000000000013D2F                 mov     [rsp+158h+size], rax
.text:0000000000013D33                 call    _malloc
.text:0000000000013D38                 mov     rdx, [rsp+158h+var_140]
.text:0000000000013D3D                 mov     [r13+30h], rax
.text:0000000000013D41                 mov     rsi, [rsp+158h+size]
.text:0000000000013D45                 mov     rcx, [rsp+158h+var_148]
.text:0000000000013D4A                 test    rdx, rdx
.text:0000000000013D4D                 jz      loc_1450D
.text:0000000000013D53                 test    rcx, rcx
.text:0000000000013D56                 jz      loc_1450D
.text:0000000000013D5C                 test    rsi, rsi
.text:0000000000013D5F                 jz      loc_1450D
.text:0000000000013D65                 test    rax, rax
.text:0000000000013D68                 jz      loc_1450D
.text:0000000000013D6E                 mov     rax, [rsp+158h+var_150]
.text:0000000000013D73                 mov     r15, [rax+30h]
.text:0000000000013D77                 lea     rdi, ds:0[r15*8] ; size
.text:0000000000013D7F                 call    _malloc
.text:0000000000013D84                 test    rax, rax
.text:0000000000013D87                 mov     [r13+0E0h], rax
.text:0000000000013D8E                 jz      short loc_13DFD
.text:0000000000013D90                 test    r15, r15
.text:0000000000013D93                 jz      short loc_13DAD
.text:0000000000013D95                 xor     edx, edx
.text:0000000000013D97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000013DA0
.text:0000000000013DA0 loc_13DA0:                              ; CODE XREF: re_compile_internal+60B↓j
.text:0000000000013DA0                 mov     [rax+rdx*8], rdx
.text:0000000000013DA4                 add     rdx, 1
.text:0000000000013DA8                 cmp     rdx, r15
.text:0000000000013DAB                 jnz     short loc_13DA0
.text:0000000000013DAD
.text:0000000000013DAD loc_13DAD:                              ; CODE XREF: re_compile_internal+5F3↑j
.text:0000000000013DAD                 mov     rdi, [r13+68h]
.text:0000000000013DB1                 lea     rsi, optimize_subexps
.text:0000000000013DB8                 mov     rdx, r13
.text:0000000000013DBB                 call    preorder
.text:0000000000013DC0                 mov     rax, [rsp+158h+var_150]
.text:0000000000013DC5                 mov     rdi, [r13+0E0h] ; ptr
.text:0000000000013DCC                 mov     rdx, [rax+30h]
.text:0000000000013DD0                 test    rdx, rdx
.text:0000000000013DD3                 jz      loc_146C4
.text:0000000000013DD9                 mov     rax, [rdi]
.text:0000000000013DDC                 test    rax, rax
.text:0000000000013DDF                 jz      short loc_13DEE
.text:0000000000013DE1                 jmp     short loc_13DFD
.text:0000000000013DE1 ; ---------------------------------------------------------------------------
.text:0000000000013DE3                 align 8
.text:0000000000013DE8
.text:0000000000013DE8 loc_13DE8:                              ; CODE XREF: re_compile_internal+655↓j
.text:0000000000013DE8                 cmp     [rdi+rax*8], rax
.text:0000000000013DEC                 jnz     short loc_13DFD
.text:0000000000013DEE
.text:0000000000013DEE loc_13DEE:                              ; CODE XREF: re_compile_internal+63F↑j
.text:0000000000013DEE                 add     rax, 1
.text:0000000000013DF2                 cmp     rdx, rax
.text:0000000000013DF5                 ja      short loc_13DE8
.text:0000000000013DF7                 jz      loc_146C4
.text:0000000000013DFD
.text:0000000000013DFD loc_13DFD:                              ; CODE XREF: re_compile_internal+5EE↑j
.text:0000000000013DFD                                         ; re_compile_internal+641↑j ...
.text:0000000000013DFD                 mov     rdi, [r13+68h]
.text:0000000000013E01                 mov     rdx, [rsp+158h+var_150]
.text:0000000000013E06                 lea     rsi, lower_subexps
.text:0000000000013E0D                 call    postorder
.text:0000000000013E12                 test    eax, eax
.text:0000000000013E14                 jnz     loc_13AC0
.text:0000000000013E1A                 mov     rdi, [r13+68h]
.text:0000000000013E1E                 lea     rsi, calc_first
.text:0000000000013E25                 mov     rdx, r13
.text:0000000000013E28                 call    postorder
.text:0000000000013E2D                 test    eax, eax
.text:0000000000013E2F                 jnz     loc_13AC0
.text:0000000000013E35                 mov     rdi, [r13+68h]
.text:0000000000013E39                 lea     rsi, calc_next
.text:0000000000013E40                 mov     rdx, r13
.text:0000000000013E43                 call    preorder
.text:0000000000013E48                 mov     rdx, [r13+68h]
.text:0000000000013E4C                 lea     rsi, jpt_13E73
.text:0000000000013E53                 nop     dword ptr [rax+rax+00h]
.text:0000000000013E58
.text:0000000000013E58 loc_13E58:                              ; CODE XREF: re_compile_internal+7BF↓j
.text:0000000000013E58                 movzx   ecx, byte ptr [rdx+30h]
.text:0000000000013E5C                 mov     rdi, [rdx+38h]
.text:0000000000013E60                 cmp     cl, 10h         ; switch 17 cases
.text:0000000000013E63                 ja      def_13E73       ; jumptable 0000000000013E73 default case, cases 0,1,3,5-7,13-15
.text:0000000000013E69                 movzx   eax, cl
.text:0000000000013E6C                 movsxd  rax, ds:(jpt_13E73 - 16FA8h)[rsi+rax*4]
.text:0000000000013E70                 add     rax, rsi
.text:0000000000013E73                 jmp     rax             ; switch jump
.text:0000000000013E75 ; ---------------------------------------------------------------------------
.text:0000000000013E75
.text:0000000000013E75 loc_13E75:                              ; CODE XREF: re_compile_internal+297↑j
.text:0000000000013E75                 mov     rsi, [rsp+158h+var_130]
.text:0000000000013E7A                 mov     rdi, rbp
.text:0000000000013E7D                 call    re_string_realloc_buffers
.text:0000000000013E82                 test    eax, eax
.text:0000000000013E84                 jnz     loc_13AC0
.text:0000000000013E8A                 movzx   esi, [rsp+158h+var_4D]
.text:0000000000013E92                 mov     ecx, [rbx+0B4h]
.text:0000000000013E98                 test    sil, sil
.text:0000000000013E9B                 jz      loc_13A4F
.text:0000000000013EA1                 jmp     loc_13A42
.text:0000000000013EA6 ; ---------------------------------------------------------------------------
.text:0000000000013EA6
.text:0000000000013EA6 loc_13EA6:                              ; CODE XREF: re_compile_internal+C5↑j
.text:0000000000013EA6                                         ; re_compile_internal+1C2↑j ...
.text:0000000000013EA6                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000013EAE                 jmp     loc_13B1C
.text:0000000000013EB3 ; ---------------------------------------------------------------------------
.text:0000000000013EB3
.text:0000000000013EB3 loc_13EB3:                              ; CODE XREF: re_compile_internal+1AD↑j
.text:0000000000013EB3                 mov     esi, 1          ; size
.text:0000000000013EB8                 mov     edi, 20h ; ' '  ; nmemb
.text:0000000000013EBD                 call    _calloc
.text:0000000000013EC2                 test    rax, rax
.text:0000000000013EC5                 mov     [rbx+78h], rax
.text:0000000000013EC9                 jz      short loc_13EA6
.text:0000000000013ECB                 xor     r12d, r12d
.text:0000000000013ECE                 xor     ebp, ebp
.text:0000000000013ED0                 mov     r13d, 1
.text:0000000000013ED6
.text:0000000000013ED6 loc_13ED6:                              ; CODE XREF: re_compile_internal+791↓j
.text:0000000000013ED6                 xor     r15d, r15d
.text:0000000000013ED9                 nop     dword ptr [rax+00000000h]
.text:0000000000013EE0
.text:0000000000013EE0 loc_13EE0:                              ; CODE XREF: re_compile_internal+782↓j
.text:0000000000013EE0                 lea     r14d, [rbp+r15+0]
.text:0000000000013EE5                 mov     edi, r14d       ; c
.text:0000000000013EE8                 call    _btowc
.text:0000000000013EED                 cmp     eax, 0FFFFFFFFh
.text:0000000000013EF0                 jz      short loc_13F05
.text:0000000000013EF2                 mov     rsi, [rbx+78h]
.text:0000000000013EF6                 mov     rdi, r13
.text:0000000000013EF9                 mov     ecx, r15d
.text:0000000000013EFC                 shl     rdi, cl
.text:0000000000013EFF                 add     rsi, r12
.text:0000000000013F02                 or      [rsi], rdi
.text:0000000000013F05
.text:0000000000013F05 loc_13F05:                              ; CODE XREF: re_compile_internal+750↑j
.text:0000000000013F05                 test    r14d, 0FFFFFF80h
.text:0000000000013F0C                 jnz     short loc_13F1A
.text:0000000000013F0E                 cmp     eax, r14d
.text:0000000000013F11                 jz      short loc_13F1A
.text:0000000000013F13                 or      byte ptr [rbx+0B0h], 8
.text:0000000000013F1A
.text:0000000000013F1A loc_13F1A:                              ; CODE XREF: re_compile_internal+76C↑j
.text:0000000000013F1A                                         ; re_compile_internal+771↑j
.text:0000000000013F1A                 add     r15, 1
.text:0000000000013F1E                 cmp     r15, 40h ; '@'
.text:0000000000013F22                 jnz     short loc_13EE0
.text:0000000000013F24                 add     ebp, 40h ; '@'
.text:0000000000013F27                 add     r12, 8
.text:0000000000013F2B                 cmp     ebp, 100h
.text:0000000000013F31                 jnz     short loc_13ED6
.text:0000000000013F33                 jmp     loc_1395E
.text:0000000000013F38 ; ---------------------------------------------------------------------------
.text:0000000000013F38
.text:0000000000013F38 def_13E73:                              ; CODE XREF: re_compile_internal+6C3↑j
.text:0000000000013F38                                         ; re_compile_internal+6D3↑j
.text:0000000000013F38                                         ; DATA XREF: ...
.text:0000000000013F38                 and     ecx, 8          ; jumptable 0000000000013E73 default case, cases 0,1,3,5-7,13-15
.text:0000000000013F3B                 jnz     loc_14852
.text:0000000000013F41                 mov     rax, [rdx+20h]
.text:0000000000013F45                 mov     rcx, [rax+38h]
.text:0000000000013F49                 mov     rax, [r13+18h]
.text:0000000000013F4D                 mov     [rax+rdi*8], rcx
.text:0000000000013F51
.text:0000000000013F51 loc_13F51:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000013F51                                         ; re_compile_internal+955↓j ...
.text:0000000000013F51                 mov     r15, [rdx+8]    ; jumptable 0000000000013E73 case 16
.text:0000000000013F55
.text:0000000000013F55 loc_13F55:                              ; CODE XREF: re_compile_internal+8F3↓j
.text:0000000000013F55                                         ; re_compile_internal+94B↓j ...
.text:0000000000013F55                 xor     edi, edi
.text:0000000000013F57                 test    r15, r15
.text:0000000000013F5A                 jz      short loc_13F6B
.text:0000000000013F5C
.text:0000000000013F5C loc_13F5C:                              ; CODE XREF: re_compile_internal+7E1↓j
.text:0000000000013F5C                 mov     rdx, r15
.text:0000000000013F5F                 jmp     loc_13E58
.text:0000000000013F5F ; ---------------------------------------------------------------------------
.text:0000000000013F64                 align 8
.text:0000000000013F68
.text:0000000000013F68 loc_13F68:                              ; CODE XREF: re_compile_internal+7EC↓j
.text:0000000000013F68                 mov     rdx, rax
.text:0000000000013F6B
.text:0000000000013F6B loc_13F6B:                              ; CODE XREF: re_compile_internal+7BA↑j
.text:0000000000013F6B                 mov     r15, [rdx+10h]
.text:0000000000013F6F                 test    r15, r15
.text:0000000000013F72                 setz    cl
.text:0000000000013F75                 cmp     r15, rdi
.text:0000000000013F78                 setz    al
.text:0000000000013F7B                 or      cl, al
.text:0000000000013F7D                 mov     byte ptr [rsp+158h+var_148], cl
.text:0000000000013F81                 jz      short loc_13F5C
.text:0000000000013F83                 mov     rax, [rdx]
.text:0000000000013F86                 mov     rdi, rdx
.text:0000000000013F89                 test    rax, rax
.text:0000000000013F8C                 jnz     short loc_13F68
.text:0000000000013F8E                 xor     r14d, r14d
.text:0000000000013F91                 xor     r15d, r15d
.text:0000000000013F94                 nop     dword ptr [rax+00h]
.text:0000000000013F98
.text:0000000000013F98 loc_13F98:                              ; CODE XREF: re_compile_internal+A49↓j
.text:0000000000013F98                 mov     rdx, [r13+10h]
.text:0000000000013F9C                 cmp     rdx, r15
.text:0000000000013F9F                 jz      short loc_13FC6
.text:0000000000013FA1
.text:0000000000013FA1 loc_13FA1:                              ; CODE XREF: re_compile_internal+824↓j
.text:0000000000013FA1                                         ; re_compile_internal+835↓j ...
.text:0000000000013FA1                 lea     r10, [r15+r15*2]
.text:0000000000013FA5                 mov     rax, [r13+30h]
.text:0000000000013FA9                 shl     r10, 3
.text:0000000000013FAD                 cmp     qword ptr [rax+r10+8], 0
.text:0000000000013FB3                 jz      loc_141B8
.text:0000000000013FB9                 mov     rdx, [r13+10h]
.text:0000000000013FBD                 add     r15, 1
.text:0000000000013FC1                 cmp     rdx, r15
.text:0000000000013FC4                 jnz     short loc_13FA1
.text:0000000000013FC6
.text:0000000000013FC6 loc_13FC6:                              ; CODE XREF: re_compile_internal+7FF↑j
.text:0000000000013FC6                 test    r14b, r14b
.text:0000000000013FC9                 jz      loc_1420E
.text:0000000000013FCF
.text:0000000000013FCF loc_13FCF:                              ; CODE XREF: re_compile_internal+A5D↓j
.text:0000000000013FCF                 xor     r14d, r14d
.text:0000000000013FD2                 xor     r15d, r15d
.text:0000000000013FD5                 jmp     short loc_13FA1
.text:0000000000013FD7 ; ---------------------------------------------------------------------------
.text:0000000000013FD7
.text:0000000000013FD7 loc_13FD7:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000013FD7                                         ; DATA XREF: .rodata:jpt_13E73↓o
.text:0000000000013FD7                 or      byte ptr [r13+0B0h], 1 ; jumptable 0000000000013E73 cases 10,11
.text:0000000000013FDF                 mov     r15, [rdx+8]
.text:0000000000013FE3                 test    r15, r15
.text:0000000000013FE6                 jz      loc_145F9
.text:0000000000013FEC                 mov     rax, [r15+18h]
.text:0000000000013FF0                 mov     rcx, [rax+38h]
.text:0000000000013FF4
.text:0000000000013FF4 loc_13FF4:                              ; CODE XREF: re_compile_internal+E61↓j
.text:0000000000013FF4                 mov     rax, [rdx+10h]
.text:0000000000013FF8                 test    rax, rax
.text:0000000000013FFB                 jz      loc_145EC
.text:0000000000014001                 mov     rax, [rax+18h]
.text:0000000000014005                 mov     r9, [rax+38h]
.text:0000000000014009
.text:0000000000014009 loc_14009:                              ; CODE XREF: re_compile_internal+E54↓j
.text:0000000000014009                 test    rcx, rcx
.text:000000000001400C                 js      loc_14871
.text:0000000000014012                 test    r9, r9
.text:0000000000014015                 js      loc_14833
.text:000000000001401B                 mov     rax, [r13+28h]
.text:000000000001401F                 lea     rdi, [rdi+rdi*2]
.text:0000000000014023                 mov     [rsp+158h+var_120], rsi
.text:0000000000014028                 mov     [rsp+158h+var_128], r9
.text:000000000001402D                 mov     [rsp+158h+var_140], rcx
.text:0000000000014032                 mov     [rsp+158h+var_148], rdx
.text:0000000000014037                 lea     r10, [rax+rdi*8]
.text:000000000001403B                 mov     edi, 10h        ; size
.text:0000000000014040                 mov     qword ptr [r10], 2
.text:0000000000014047                 mov     [rsp+158h+size], r10
.text:000000000001404B                 call    _malloc
.text:0000000000014050                 mov     r10, [rsp+158h+size]
.text:0000000000014054                 test    rax, rax
.text:0000000000014057                 mov     rdx, [rsp+158h+var_148]
.text:000000000001405C                 mov     rcx, [rsp+158h+var_140]
.text:0000000000014061                 mov     r9, [rsp+158h+var_128]
.text:0000000000014066                 mov     rsi, [rsp+158h+var_120]
.text:000000000001406B                 mov     [r10+10h], rax
.text:000000000001406F                 jz      loc_1430A
.text:0000000000014075                 cmp     rcx, r9
.text:0000000000014078                 jz      loc_1464D
.text:000000000001407E                 mov     qword ptr [r10+8], 2
.text:0000000000014086                 jl      loc_14634
.text:000000000001408C                 mov     [rax], r9
.text:000000000001408F                 mov     [rax+8], rcx
.text:0000000000014093                 jmp     loc_13F55
.text:0000000000014098 ; ---------------------------------------------------------------------------
.text:0000000000014098
.text:0000000000014098 loc_14098:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000014098                                         ; DATA XREF: .rodata:jpt_13E73↓o
.text:0000000000014098                 mov     rax, [rdx+20h]  ; jumptable 0000000000013E73 cases 8,9,12
.text:000000000001409C                 lea     rcx, [rdi+rdi*2]
.text:00000000000140A0                 mov     edi, 8          ; size
.text:00000000000140A5                 mov     [rsp+158h+var_148], rsi
.text:00000000000140AA                 mov     [rsp+158h+size], rdx
.text:00000000000140AE                 mov     r14, [rax+38h]
.text:00000000000140B2                 mov     rax, [r13+28h]
.text:00000000000140B6                 lea     r15, [rax+rcx*8]
.text:00000000000140BA                 mov     qword ptr [r15], 1
.text:00000000000140C1                 mov     qword ptr [r15+8], 1
.text:00000000000140C9                 call    _malloc
.text:00000000000140CE                 test    rax, rax
.text:00000000000140D1                 mov     [r15+10h], rax
.text:00000000000140D5                 mov     rdx, [rsp+158h+size]
.text:00000000000140D9                 mov     rsi, [rsp+158h+var_148]
.text:00000000000140DE                 jz      loc_14788
.text:00000000000140E4                 mov     [rax], r14
.text:00000000000140E7                 mov     r15, [rdx+8]
.text:00000000000140EB                 jmp     loc_13F55
.text:00000000000140F0 ; ---------------------------------------------------------------------------
.text:00000000000140F0
.text:00000000000140F0 loc_140F0:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:00000000000140F0                                         ; DATA XREF: .rodata:jpt_13E73↓o
.text:00000000000140F0                 cmp     qword ptr [rdx+20h], 0 ; jumptable 0000000000013E73 case 2
.text:00000000000140F5                 jz      loc_13F51       ; jumptable 0000000000013E73 case 16
.text:00000000000140FB                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000014102                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000014109                 lea     rdi, aNodeNextNull ; "node->next == NULL"
.text:0000000000014110                 mov     edx, 59Fh       ; line
.text:0000000000014115                 call    ___assert_fail
.text:0000000000014115 ; ---------------------------------------------------------------------------
.text:000000000001411A                 align 20h
.text:0000000000014120
.text:0000000000014120 loc_14120:                              ; CODE XREF: re_compile_internal+6D3↑j
.text:0000000000014120                                         ; DATA XREF: .rodata:jpt_13E73↓o
.text:0000000000014120                 mov     rax, [rdx+20h]  ; jumptable 0000000000013E73 case 4
.text:0000000000014124                 mov     r15, [rax+38h]
.text:0000000000014128                 mov     rax, [r13+18h]
.text:000000000001412C                 mov     [rax+rdi*8], r15
.text:0000000000014130                 cmp     byte ptr [rdx+30h], 4
.text:0000000000014134                 jnz     loc_13F51       ; jumptable 0000000000013E73 case 16
.text:000000000001413A                 mov     rax, [r13+28h]
.text:000000000001413E                 lea     rcx, [rdi+rdi*2]
.text:0000000000014142                 mov     edi, 8          ; size
.text:0000000000014147                 mov     [rsp+158h+var_140], rsi
.text:000000000001414C                 mov     [rsp+158h+var_148], rdx
.text:0000000000014151                 lea     rcx, [rax+rcx*8]
.text:0000000000014155                 mov     qword ptr [rcx], 1
.text:000000000001415C                 mov     qword ptr [rcx+8], 1
.text:0000000000014164                 mov     [rsp+158h+size], rcx
.text:0000000000014168                 call    _malloc
.text:000000000001416D                 mov     rcx, [rsp+158h+size]
.text:0000000000014171                 test    rax, rax
.text:0000000000014174                 mov     rdx, [rsp+158h+var_148]
.text:0000000000014179                 mov     rsi, [rsp+158h+var_140]
.text:000000000001417E                 mov     [rcx+10h], rax
.text:0000000000014182                 jz      loc_147D0
.text:0000000000014188                 mov     [rax], r15
.text:000000000001418B                 mov     r15, [rdx+8]
.text:000000000001418F                 jmp     loc_13F55
.text:0000000000014194 ; ---------------------------------------------------------------------------
.text:0000000000014194
.text:0000000000014194 loc_14194:                              ; CODE XREF: re_compile_internal+3D9↑j
.text:0000000000014194                 mov     [rsp+158h+var_A8], rsi
.text:000000000001419C                 mov     [rsp+158h+var_A0], rsi
.text:00000000000141A4                 mov     [rsp+158h+var_10C], 0
.text:00000000000141AC                 jmp     loc_13BF8
.text:00000000000141AC ; ---------------------------------------------------------------------------
.text:00000000000141B1                 align 8
.text:00000000000141B8
.text:00000000000141B8 loc_141B8:                              ; CODE XREF: re_compile_internal+813↑j
.text:00000000000141B8                 mov     ecx, 1
.text:00000000000141BD                 mov     rdx, r15
.text:00000000000141C0                 mov     rsi, r13
.text:00000000000141C3                 mov     rdi, r12
.text:00000000000141C6                 mov     [rsp+158h+size], r10
.text:00000000000141CA                 call    calc_eclosure_iter
.text:00000000000141CF                 test    eax, eax
.text:00000000000141D1                 jnz     loc_13AC0
.text:00000000000141D7                 mov     rax, [r13+30h]
.text:00000000000141DB                 mov     r10, [rsp+158h+size]
.text:00000000000141DF                 add     r15, 1
.text:00000000000141E3                 cmp     qword ptr [rax+r10+8], 0
.text:00000000000141E9                 jnz     loc_13F98
.text:00000000000141EF                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:00000000000141F4                 call    _free
.text:00000000000141F9                 cmp     [r13+10h], r15
.text:00000000000141FD                 jz      loc_13FCF
.text:0000000000014203                 movzx   r14d, byte ptr [rsp+158h+var_148]
.text:0000000000014209                 jmp     loc_13FA1
.text:000000000001420E ; ---------------------------------------------------------------------------
.text:000000000001420E
.text:000000000001420E loc_1420E:                              ; CODE XREF: re_compile_internal+829↑j
.text:000000000001420E                 mov     rax, [rsp+158h+var_150]
.text:0000000000014213                 test    byte ptr [rax+38h], 10h
.text:0000000000014217                 jnz     short loc_1422A
.text:0000000000014219                 cmp     qword ptr [rax+30h], 0
.text:000000000001421E                 jz      short loc_1422A
.text:0000000000014220                 test    byte ptr [r13+0B0h], 1
.text:0000000000014228                 jnz     short loc_14238
.text:000000000001422A
.text:000000000001422A loc_1422A:                              ; CODE XREF: re_compile_internal+A77↑j
.text:000000000001422A                                         ; re_compile_internal+A7E↑j
.text:000000000001422A                 cmp     qword ptr [r13+98h], 0
.text:0000000000014232                 jz      loc_1432B
.text:0000000000014238
.text:0000000000014238 loc_14238:                              ; CODE XREF: re_compile_internal+A88↑j
.text:0000000000014238                 lea     rdi, [rdx+rdx*2]
.text:000000000001423C                 mov     [rsp+158h+size], rdx
.text:0000000000014240                 shl     rdi, 3          ; size
.text:0000000000014244                 call    _malloc
.text:0000000000014249                 test    rax, rax
.text:000000000001424C                 mov     [r13+38h], rax
.text:0000000000014250                 jz      loc_1479C
.text:0000000000014256                 mov     rdx, [rsp+158h+size]
.text:000000000001425A                 xor     esi, esi
.text:000000000001425C                 xor     ecx, ecx
.text:000000000001425E                 test    rdx, rdx
.text:0000000000014261                 jnz     short loc_14274
.text:0000000000014263                 jmp     loc_1432B
.text:0000000000014263 ; ---------------------------------------------------------------------------
.text:0000000000014268                 align 10h
.text:0000000000014270
.text:0000000000014270 loc_14270:                              ; CODE XREF: re_compile_internal+AF5↓j
.text:0000000000014270                 mov     rax, [r13+38h]
.text:0000000000014274
.text:0000000000014274 loc_14274:                              ; CODE XREF: re_compile_internal+AC1↑j
.text:0000000000014274                 pxor    xmm0, xmm0
.text:0000000000014278                 add     rax, rsi
.text:000000000001427B                 add     rcx, 1
.text:000000000001427F                 mov     qword ptr [rax+10h], 0
.text:0000000000014287                 add     rsi, 18h
.text:000000000001428B                 movups  xmmword ptr [rax], xmm0
.text:000000000001428E                 mov     rax, [r13+10h]
.text:0000000000014292                 cmp     rcx, rax
.text:0000000000014295                 jb      short loc_14270
.text:0000000000014297                 test    rax, rax
.text:000000000001429A                 jz      loc_1432B
.text:00000000000142A0                 mov     rax, [r13+30h]
.text:00000000000142A4                 mov     [rsp+158h+var_140], 0
.text:00000000000142AD                 mov     [rsp+158h+var_148], 0
.text:00000000000142B6
.text:00000000000142B6 loc_142B6:                              ; CODE XREF: re_compile_internal+B89↓j
.text:00000000000142B6                 mov     rcx, [rsp+158h+var_140]
.text:00000000000142BB                 lea     rdx, [rax+rcx]
.text:00000000000142BF                 cmp     qword ptr [rdx+8], 0
.text:00000000000142C4                 mov     rcx, [rdx+10h]
.text:00000000000142C8                 jle     short loc_14314
.text:00000000000142CA                 xor     r15d, r15d
.text:00000000000142CD                 jmp     short loc_142E8
.text:00000000000142CD ; ---------------------------------------------------------------------------
.text:00000000000142CF                 align 10h
.text:00000000000142D0
.text:00000000000142D0 loc_142D0:                              ; CODE XREF: re_compile_internal+B68↓j
.text:00000000000142D0                 mov     rax, [r13+30h]
.text:00000000000142D4                 mov     rdx, [rsp+158h+var_140]
.text:00000000000142D9                 add     r15, 1
.text:00000000000142DD                 mov     rcx, [rsp+158h+size]
.text:00000000000142E1                 cmp     r15, [rax+rdx+8]
.text:00000000000142E6                 jge     short loc_14314
.text:00000000000142E8
.text:00000000000142E8 loc_142E8:                              ; CODE XREF: re_compile_internal+B2D↑j
.text:00000000000142E8                 mov     rax, [rcx+r15*8]
.text:00000000000142EC                 mov     [rsp+158h+size], rcx
.text:00000000000142F0                 lea     rsi, [rax+rax*2]
.text:00000000000142F4                 mov     rax, [r13+38h]
.text:00000000000142F8                 lea     rdi, [rax+rsi*8]
.text:00000000000142FC                 mov     rsi, [rsp+158h+var_148]
.text:0000000000014301                 call    re_node_set_insert_last
.text:0000000000014306                 test    al, al
.text:0000000000014308                 jnz     short loc_142D0
.text:000000000001430A
.text:000000000001430A loc_1430A:                              ; CODE XREF: re_compile_internal+8CF↑j
.text:000000000001430A                                         ; re_compile_internal+FF7↓j
.text:000000000001430A                 mov     eax, 0Ch
.text:000000000001430F                 jmp     loc_13AC0
.text:0000000000014314 ; ---------------------------------------------------------------------------
.text:0000000000014314
.text:0000000000014314 loc_14314:                              ; CODE XREF: re_compile_internal+B28↑j
.text:0000000000014314                                         ; re_compile_internal+B46↑j
.text:0000000000014314                 add     [rsp+158h+var_148], 1
.text:000000000001431A                 add     [rsp+158h+var_140], 18h
.text:0000000000014320                 mov     rdx, [rsp+158h+var_148]
.text:0000000000014325                 cmp     rdx, [r13+10h]
.text:0000000000014329                 jb      short loc_142B6
.text:000000000001432B
.text:000000000001432B loc_1432B:                              ; CODE XREF: re_compile_internal+A92↑j
.text:000000000001432B                                         ; re_compile_internal+AC3↑j ...
.text:000000000001432B                 movzx   eax, byte ptr [rbx+0B0h]
.text:0000000000014332                 mov     [rsp+158h+var_10C], 0
.text:000000000001433A                 shr     al, 2
.text:000000000001433D                 cmp     [rsp+158h+var_138], 0
.text:0000000000014343                 setz    dl
.text:0000000000014346                 and     al, dl
.text:0000000000014348                 jnz     loc_1452F
.text:000000000001434E
.text:000000000001434E loc_1434E:                              ; CODE XREF: re_compile_internal+D99↓j
.text:000000000001434E                                         ; re_compile_internal+DD3↓j ...
.text:000000000001434E                 mov     rax, [rbx+68h]  ; jumptable 0000000000014573 case 6
.text:0000000000014352                 mov     rdi, r12
.text:0000000000014355                 mov     rax, [rax+18h]
.text:0000000000014359                 mov     rax, [rax+38h]
.text:000000000001435D                 lea     rdx, [rax+rax*2]
.text:0000000000014361                 mov     [rbx+90h], rax
.text:0000000000014368                 mov     rax, [rbx+30h]
.text:000000000001436C                 lea     rsi, [rax+rdx*8]
.text:0000000000014370                 call    re_node_set_init_copy
.text:0000000000014375                 test    eax, eax
.text:0000000000014377                 mov     r15d, eax
.text:000000000001437A                 mov     [rsp+158h+var_108], eax
.text:000000000001437E                 jnz     loc_1449F
.text:0000000000014384                 cmp     qword ptr [rbx+98h], 0
.text:000000000001438C                 jle     loc_14460
.text:0000000000014392                 mov     r9, [rsp+158h+var_F0]
.text:0000000000014397                 test    r9, r9
.text:000000000001439A                 jle     loc_14460
.text:00000000000143A0                 xor     r10d, r10d
.text:00000000000143A3                 lea     r13, [r12+10h]
.text:00000000000143A8                 jmp     short loc_143BD
.text:00000000000143A8 ; ---------------------------------------------------------------------------
.text:00000000000143AA                 align 10h
.text:00000000000143B0
.text:00000000000143B0 loc_143B0:                              ; CODE XREF: re_compile_internal+C37↓j
.text:00000000000143B0                                         ; re_compile_internal+C47↓j ...
.text:00000000000143B0                 add     r10, 1
.text:00000000000143B4                 cmp     r9, r10
.text:00000000000143B7                 jle     loc_14460
.text:00000000000143BD
.text:00000000000143BD loc_143BD:                              ; CODE XREF: re_compile_internal+C08↑j
.text:00000000000143BD                                         ; re_compile_internal+CB2↓j
.text:00000000000143BD                 mov     rcx, [rsp+158h+ptr]
.text:00000000000143C2                 mov     rsi, [rbx]
.text:00000000000143C5                 mov     r8, [rcx+r10*8]
.text:00000000000143C9                 mov     rdi, r8
.text:00000000000143CC                 shl     rdi, 4
.text:00000000000143D0                 add     rdi, rsi
.text:00000000000143D3                 cmp     byte ptr [rdi+8], 4
.text:00000000000143D7                 jnz     short loc_143B0
.text:00000000000143D9                 xor     edx, edx
.text:00000000000143DB                 jmp     short loc_143E9
.text:00000000000143DB ; ---------------------------------------------------------------------------
.text:00000000000143DD                 align 20h
.text:00000000000143E0
.text:00000000000143E0 loc_143E0:                              ; CODE XREF: re_compile_internal+C58↓j
.text:00000000000143E0                                         ; re_compile_internal+C60↓j
.text:00000000000143E0                 add     rdx, 1
.text:00000000000143E4                 cmp     r9, rdx
.text:00000000000143E7                 jz      short loc_143B0
.text:00000000000143E9
.text:00000000000143E9 loc_143E9:                              ; CODE XREF: re_compile_internal+C3B↑j
.text:00000000000143E9                 mov     rax, [rcx+rdx*8]
.text:00000000000143ED                 shl     rax, 4
.text:00000000000143F1                 add     rax, rsi
.text:00000000000143F4                 cmp     byte ptr [rax+8], 9
.text:00000000000143F8                 jnz     short loc_143E0
.text:00000000000143FA                 mov     r11, [rdi]
.text:00000000000143FD                 cmp     [rax], r11
.text:0000000000014400                 jnz     short loc_143E0
.text:0000000000014402                 mov     rdx, [rbx+28h]
.text:0000000000014406                 lea     rax, [r8+r8*2]
.text:000000000001440A                 mov     rsi, r13
.text:000000000001440D                 mov     rdi, r9
.text:0000000000014410                 lea     rax, [rdx+rax*8]
.text:0000000000014414                 mov     rax, [rax+10h]
.text:0000000000014418                 mov     r11, [rax]
.text:000000000001441B                 mov     rdx, r11
.text:000000000001441E                 call    re_node_set_contains_isra_3
.text:0000000000014423                 test    rax, rax
.text:0000000000014426                 jnz     short loc_143B0
.text:0000000000014428                 mov     rax, [rbx+30h]
.text:000000000001442C                 lea     rdx, [r11+r11*2]
.text:0000000000014430                 mov     rdi, r12
.text:0000000000014433                 lea     rsi, [rax+rdx*8]
.text:0000000000014437                 call    re_node_set_merge
.text:000000000001443C                 test    eax, eax
.text:000000000001443E                 jnz     loc_14780
.text:0000000000014444                 mov     r9, [rsp+158h+var_F0]
.text:0000000000014449                 mov     r10d, 1
.text:000000000001444F                 cmp     r9, r10
.text:0000000000014452                 jg      loc_143BD
.text:0000000000014458                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000014460
.text:0000000000014460 loc_14460:                              ; CODE XREF: re_compile_internal+BEC↑j
.text:0000000000014460                                         ; re_compile_internal+BFA↑j ...
.text:0000000000014460                 mov     rdi, [rsp+158h+var_130]
.text:0000000000014465                 xor     ecx, ecx
.text:0000000000014467                 mov     rdx, r12
.text:000000000001446A                 mov     rsi, rbx
.text:000000000001446D                 call    re_acquire_state_context
.text:0000000000014472                 test    rax, rax
.text:0000000000014475                 mov     [rbx+48h], rax
.text:0000000000014479                 jz      loc_145E2
.text:000000000001447F                 cmp     byte ptr [rax+68h], 0
.text:0000000000014483                 js      loc_14581
.text:0000000000014489                 mov     [rbx+60h], rax
.text:000000000001448D                 mov     [rbx+58h], rax
.text:0000000000014491                 mov     [rbx+50h], rax
.text:0000000000014495
.text:0000000000014495 loc_14495:                              ; CODE XREF: re_compile_internal+E3C↓j
.text:0000000000014495                 mov     rdi, [rsp+158h+ptr] ; ptr
.text:000000000001449A                 call    _free
.text:000000000001449F
.text:000000000001449F loc_1449F:                              ; CODE XREF: re_compile_internal+BDE↑j
.text:000000000001449F                                         ; re_compile_internal+E47↓j ...
.text:000000000001449F                 mov     rax, [rsp+158h+var_150]
.text:00000000000144A4                 mov     [rsp+158h+var_10C], r15d
.text:00000000000144A9                 mov     r13, [rax]
.text:00000000000144AC                 mov     rdi, [r13+70h]  ; ptr
.text:00000000000144B0                 test    rdi, rdi
.text:00000000000144B3                 jz      short loc_144C8
.text:00000000000144B5                 nop     dword ptr [rax]
.text:00000000000144B8
.text:00000000000144B8 loc_144B8:                              ; CODE XREF: re_compile_internal+D26↓j
.text:00000000000144B8                 mov     r12, [rdi]
.text:00000000000144BB                 call    _free
.text:00000000000144C0                 test    r12, r12
.text:00000000000144C3                 mov     rdi, r12
.text:00000000000144C6                 jnz     short loc_144B8
.text:00000000000144C8
.text:00000000000144C8 loc_144C8:                              ; CODE XREF: re_compile_internal+D13↑j
.text:00000000000144C8                 mov     rdi, [r13+20h]  ; ptr
.text:00000000000144CC                 mov     qword ptr [r13+70h], 0
.text:00000000000144D4                 mov     dword ptr [r13+80h], 0Fh
.text:00000000000144DF                 mov     qword ptr [r13+68h], 0
.text:00000000000144E7                 call    _free
.text:00000000000144EC                 mov     qword ptr [r13+20h], 0
.text:00000000000144F4                 mov     rdi, rbp
.text:00000000000144F7                 call    re_string_destruct
.text:00000000000144FC                 mov     eax, [rsp+158h+var_10C]
.text:0000000000014500                 test    eax, eax
.text:0000000000014502                 jz      loc_13B3C
.text:0000000000014508                 jmp     loc_13B1C
.text:000000000001450D ; ---------------------------------------------------------------------------
.text:000000000001450D
.text:000000000001450D loc_1450D:                              ; CODE XREF: re_compile_internal+5AD↑j
.text:000000000001450D                                         ; re_compile_internal+5B6↑j ...
.text:000000000001450D                 mov     [rsp+158h+var_10C], 0Ch
.text:0000000000014515                 jmp     loc_13ACC
.text:000000000001451A ; ---------------------------------------------------------------------------
.text:000000000001451A
.text:000000000001451A loc_1451A:                              ; CODE XREF: re_compile_internal+3C8↑j
.text:000000000001451A                 mov     rdi, rbp
.text:000000000001451D                 call    build_wcs_buffer
.text:0000000000014522                 mov     [rsp+158h+var_10C], 0
.text:000000000001452A                 jmp     loc_13BF8
.text:000000000001452F ; ---------------------------------------------------------------------------
.text:000000000001452F
.text:000000000001452F loc_1452F:                              ; CODE XREF: re_compile_internal+BA8↑j
.text:000000000001452F                 mov     rcx, [rsp+158h+var_150]
.text:0000000000014534                 cmp     qword ptr [rcx+28h], 0
.text:0000000000014539                 jnz     loc_1434E       ; jumptable 0000000000014573 case 6
.text:000000000001453F                 mov     r10, [rbx+10h]
.text:0000000000014543                 test    r10, r10
.text:0000000000014546                 jz      loc_147FA
.text:000000000001454C                 mov     rsi, [rbx]
.text:000000000001454F                 lea     r9, jpt_14573
.text:0000000000014556                 xor     r8d, r8d
.text:0000000000014559                 xor     edx, edx
.text:000000000001455B                 mov     rcx, rsi
.text:000000000001455E
.text:000000000001455E loc_1455E:                              ; CODE XREF: re_compile_internal+F47↓j
.text:000000000001455E                 cmp     byte ptr [rcx+8], 0Ch ; switch 13 cases
.text:0000000000014562                 ja      def_14573       ; jumptable 0000000000014573 default case, cases 0,7
.text:0000000000014568                 movzx   edi, byte ptr [rcx+8]
.text:000000000001456C                 movsxd  rdi, ds:(jpt_14573 - 16FECh)[r9+rdi*4]
.text:0000000000014570                 add     rdi, r9
.text:0000000000014573                 jmp     rdi             ; switch jump
.text:0000000000014575 ; ---------------------------------------------------------------------------
.text:0000000000014575
.text:0000000000014575 loc_14575:                              ; CODE XREF: re_compile_internal+EE↑j
.text:0000000000014575                 xor     ebp, ebp
.text:0000000000014577                 mov     esi, 1
.text:000000000001457C                 jmp     loc_138AD
.text:0000000000014581 ; ---------------------------------------------------------------------------
.text:0000000000014581
.text:0000000000014581 loc_14581:                              ; CODE XREF: re_compile_internal+CE3↑j
.text:0000000000014581                 mov     r14, [rsp+158h+var_130]
.text:0000000000014586                 mov     ecx, 1
.text:000000000001458B                 mov     rdx, r12
.text:000000000001458E                 mov     rsi, rbx
.text:0000000000014591                 mov     rdi, r14
.text:0000000000014594                 call    re_acquire_state_context
.text:0000000000014599                 mov     ecx, 2
.text:000000000001459E                 mov     rdx, r12
.text:00000000000145A1                 mov     rsi, rbx
.text:00000000000145A4                 mov     rdi, r14
.text:00000000000145A7                 mov     [rbx+50h], rax
.text:00000000000145AB                 call    re_acquire_state_context
.text:00000000000145B0                 mov     ecx, 6
.text:00000000000145B5                 mov     [rbx+58h], rax
.text:00000000000145B9                 mov     rdx, r12
.text:00000000000145BC                 mov     rsi, rbx
.text:00000000000145BF                 mov     rdi, r14
.text:00000000000145C2                 call    re_acquire_state_context
.text:00000000000145C7                 cmp     qword ptr [rbx+50h], 0
.text:00000000000145CC                 mov     [rbx+60h], rax
.text:00000000000145D0                 jz      short loc_145E2
.text:00000000000145D2                 cmp     qword ptr [rbx+58h], 0
.text:00000000000145D7                 jz      short loc_145E2
.text:00000000000145D9                 test    rax, rax
.text:00000000000145DC                 jnz     loc_14495
.text:00000000000145E2
.text:00000000000145E2 loc_145E2:                              ; CODE XREF: re_compile_internal+CD9↑j
.text:00000000000145E2                                         ; re_compile_internal+E30↑j ...
.text:00000000000145E2                 mov     r15d, [rsp+158h+var_108]
.text:00000000000145E7                 jmp     loc_1449F
.text:00000000000145EC ; ---------------------------------------------------------------------------
.text:00000000000145EC
.text:00000000000145EC loc_145EC:                              ; CODE XREF: re_compile_internal+85B↑j
.text:00000000000145EC                 mov     rax, [rdx+20h]
.text:00000000000145F0                 mov     r9, [rax+38h]
.text:00000000000145F4                 jmp     loc_14009
.text:00000000000145F9 ; ---------------------------------------------------------------------------
.text:00000000000145F9
.text:00000000000145F9 loc_145F9:                              ; CODE XREF: re_compile_internal+846↑j
.text:00000000000145F9                 mov     rax, [rdx+20h]
.text:00000000000145FD                 mov     rcx, [rax+38h]
.text:0000000000014601                 jmp     loc_13FF4
.text:0000000000014606 ; ---------------------------------------------------------------------------
.text:0000000000014606
.text:0000000000014606 loc_14606:                              ; CODE XREF: re_compile_internal+6C↑j
.text:0000000000014606                 mov     rdi, rbx        ; ptr
.text:0000000000014609                 mov     esi, 0E8h       ; size
.text:000000000001460E                 call    _realloc
.text:0000000000014613                 test    rax, rax
.text:0000000000014616                 mov     rbx, rax
.text:0000000000014619                 jz      loc_147B1
.text:000000000001461F                 mov     rax, [rsp+158h+var_150]
.text:0000000000014624                 mov     qword ptr [rax+8], 0E8h
.text:000000000001462C                 mov     [rax], rbx
.text:000000000001462F                 jmp     loc_13812
.text:0000000000014634 ; ---------------------------------------------------------------------------
.text:0000000000014634
.text:0000000000014634 loc_14634:                              ; CODE XREF: re_compile_internal+8E6↑j
.text:0000000000014634                 mov     [rax], rcx
.text:0000000000014637                 mov     [rax+8], r9
.text:000000000001463B                 jmp     loc_13F55
.text:0000000000014640 ; ---------------------------------------------------------------------------
.text:0000000000014640
.text:0000000000014640 loc_14640:                              ; CODE XREF: re_compile_internal+2E9↑j
.text:0000000000014640                                         ; re_compile_internal+309↑j
.text:0000000000014640                 mov     [rsp+158h+var_10C], 0
.text:0000000000014648                 jmp     loc_13BF8
.text:000000000001464D ; ---------------------------------------------------------------------------
.text:000000000001464D
.text:000000000001464D loc_1464D:                              ; CODE XREF: re_compile_internal+8D8↑j
.text:000000000001464D                 mov     qword ptr [r10+8], 1
.text:0000000000014655                 mov     [rax], rcx
.text:0000000000014658                 jmp     loc_13F55
.text:000000000001465D ; ---------------------------------------------------------------------------
.text:000000000001465D
.text:000000000001465D loc_1465D:                              ; CODE XREF: re_compile_internal+2CB↑j
.text:000000000001465D                 mov     rdi, rbp
.text:0000000000014660                 call    build_upper_buffer
.text:0000000000014665                 mov     [rsp+158h+var_10C], 0
.text:000000000001466D                 jmp     loc_13BF8
.text:0000000000014672 ; ---------------------------------------------------------------------------
.text:0000000000014672
.text:0000000000014672 loc_14672:                              ; CODE XREF: re_compile_internal+538↑j
.text:0000000000014672                 mov     [rsp+158h+var_10C], 0Ch
.text:000000000001467A                 mov     qword ptr [rbx+68h], 0
.text:0000000000014682                 jmp     loc_13ACC
.text:0000000000014687 ; ---------------------------------------------------------------------------
.text:0000000000014687
.text:0000000000014687 loc_14687:                              ; CODE XREF: re_compile_internal+4BE↑j
.text:0000000000014687                 test    rax, rax
.text:000000000001468A                 jz      loc_147BB
.text:0000000000014690                 lea     r13, [r15+70h]
.text:0000000000014694                 lea     r12, [rsp+158h+var_F8]
.text:0000000000014699                 sub     r15, 0FFFFFFFFFFFFFF80h
.text:000000000001469D                 xor     ecx, ecx
.text:000000000001469F                 xor     edx, edx
.text:00000000000146A1                 mov     rsi, r15
.text:00000000000146A4                 mov     r8, r12
.text:00000000000146A7                 mov     rdi, r13
.text:00000000000146AA                 mov     [rsp+158h+size], rax
.text:00000000000146AE                 mov     byte ptr [rsp+158h+var_F0], 2
.text:00000000000146B3                 call    create_token_tree_isra_16
.text:00000000000146B8                 mov     r9, [rsp+158h+size]
.text:00000000000146BC                 mov     r11, rax
.text:00000000000146BF                 jmp     loc_13C9B
.text:00000000000146C4 ; ---------------------------------------------------------------------------
.text:00000000000146C4
.text:00000000000146C4 loc_146C4:                              ; CODE XREF: re_compile_internal+633↑j
.text:00000000000146C4                                         ; re_compile_internal+657↑j
.text:00000000000146C4                 call    _free
.text:00000000000146C9                 mov     qword ptr [r13+0E0h], 0
.text:00000000000146D4                 jmp     loc_13DFD
.text:00000000000146D9 ; ---------------------------------------------------------------------------
.text:00000000000146D9
.text:00000000000146D9 loc_146D9:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:00000000000146D9                                         ; DATA XREF: .rodata:jpt_14573↓o
.text:00000000000146D9                 mov     r8d, eax        ; jumptable 0000000000014573 case 5
.text:00000000000146DC
.text:00000000000146DC loc_146DC:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:00000000000146DC                                         ; re_compile_internal+F97↓j ...
.text:00000000000146DC                 add     rdx, 1          ; jumptable 0000000000014573 cases 2,4,8-11
.text:00000000000146E0                 add     rcx, 10h
.text:00000000000146E4                 cmp     rdx, r10
.text:00000000000146E7                 jnz     loc_1455E
.text:00000000000146ED                 or      r14b, r8b
.text:00000000000146F0                 jz      loc_147FA
.text:00000000000146F6                 mov     rax, rdx
.text:00000000000146F9                 shl     rax, 4
.text:00000000000146FD                 add     rax, rsi
.text:0000000000014700                 jmp     short loc_14718
.text:0000000000014702 ; ---------------------------------------------------------------------------
.text:0000000000014702
.text:0000000000014702 loc_14702:                              ; CODE XREF: re_compile_internal+F7F↓j
.text:0000000000014702                 cmp     dl, 5
.text:0000000000014705                 jnz     short loc_1470B
.text:0000000000014707                 mov     byte ptr [rsi+8], 7
.text:000000000001470B
.text:000000000001470B loc_1470B:                              ; CODE XREF: re_compile_internal+F65↑j
.text:000000000001470B                                         ; re_compile_internal+F84↓j ...
.text:000000000001470B                 add     rsi, 10h
.text:000000000001470F                 cmp     rax, rsi
.text:0000000000014712                 jz      loc_147F7
.text:0000000000014718
.text:0000000000014718 loc_14718:                              ; CODE XREF: re_compile_internal+F60↑j
.text:0000000000014718                 movzx   edx, byte ptr [rsi+8]
.text:000000000001471C                 cmp     dl, 1
.text:000000000001471F                 jnz     short loc_14702
.text:0000000000014721                 cmp     byte ptr [rsi], 0
.text:0000000000014724                 jns     short loc_1470B
.text:0000000000014726                 and     byte ptr [rsi+0Ah], 0DFh
.text:000000000001472A                 jmp     short loc_1470B
.text:000000000001472A ; ---------------------------------------------------------------------------
.text:000000000001472C                 align 10h
.text:0000000000014730
.text:0000000000014730 loc_14730:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000014730                                         ; DATA XREF: .rodata:jpt_14573↓o
.text:0000000000014730                 cmp     byte ptr [rcx], 0 ; jumptable 0000000000014573 case 1
.text:0000000000014733                 cmovs   r14d, eax
.text:0000000000014737                 jmp     short loc_146DC ; jumptable 0000000000014573 cases 2,4,8-11
.text:0000000000014739 ; ---------------------------------------------------------------------------
.text:0000000000014739
.text:0000000000014739 loc_14739:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000014739                                         ; DATA XREF: .rodata:jpt_14573↓o
.text:0000000000014739                 mov     edi, [rcx]      ; jumptable 0000000000014573 case 12
.text:000000000001473B                 cmp     edi, 20h ; ' '
.text:000000000001473E                 jz      short loc_146DC ; jumptable 0000000000014573 cases 2,4,8-11
.text:0000000000014740                 jbe     loc_147E9
.text:0000000000014746                 cmp     edi, 40h ; '@'
.text:0000000000014749                 jz      short loc_146DC ; jumptable 0000000000014573 cases 2,4,8-11
.text:000000000001474B                 add     edi, 0FFFFFF80h
.text:000000000001474E                 jz      short loc_146DC ; jumptable 0000000000014573 cases 2,4,8-11
.text:0000000000014750                 jmp     loc_1434E       ; jumptable 0000000000014573 case 6
.text:0000000000014750 ; ---------------------------------------------------------------------------
.text:0000000000014755                 align 8
.text:0000000000014758
.text:0000000000014758 loc_14758:                              ; CODE XREF: re_compile_internal+DD3↑j
.text:0000000000014758                                         ; DATA XREF: .rodata:jpt_14573↓o
.text:0000000000014758                 mov     rdi, [rcx]      ; jumptable 0000000000014573 case 3
.text:000000000001475B                 cmp     qword ptr [rdi+10h], 0
.text:0000000000014760                 jnz     loc_1434E       ; jumptable 0000000000014573 case 6
.text:0000000000014766                 cmp     qword ptr [rdi+18h], 0
.text:000000000001476B                 jz      loc_146DC       ; jumptable 0000000000014573 cases 2,4,8-11
.text:0000000000014771                 jmp     loc_1434E       ; jumptable 0000000000014573 case 6
.text:0000000000014771 ; ---------------------------------------------------------------------------
.text:0000000000014776                 align 20h
.text:0000000000014780
.text:0000000000014780 loc_14780:                              ; CODE XREF: re_compile_internal+C9E↑j
.text:0000000000014780                 mov     r15d, eax
.text:0000000000014783                 jmp     loc_1449F
.text:0000000000014788 ; ---------------------------------------------------------------------------
.text:0000000000014788
.text:0000000000014788 loc_14788:                              ; CODE XREF: re_compile_internal+93E↑j
.text:0000000000014788                 mov     qword ptr [r15+8], 0
.text:0000000000014790                 mov     qword ptr [r15], 0
.text:0000000000014797                 jmp     loc_1430A
.text:000000000001479C ; ---------------------------------------------------------------------------
.text:000000000001479C
.text:000000000001479C loc_1479C:                              ; CODE XREF: re_compile_internal+AB0↑j
.text:000000000001479C                 mov     rax, [rsp+158h+var_150]
.text:00000000000147A1                 mov     [rsp+158h+var_10C], 0Ch
.text:00000000000147A9                 mov     r13, [rax]
.text:00000000000147AC                 jmp     loc_13ACC
.text:00000000000147B1 ; ---------------------------------------------------------------------------
.text:00000000000147B1
.text:00000000000147B1 loc_147B1:                              ; CODE XREF: re_compile_internal+E79↑j
.text:00000000000147B1                 mov     eax, 0Ch
.text:00000000000147B6                 jmp     loc_13B3C
.text:00000000000147BB ; ---------------------------------------------------------------------------
.text:00000000000147BB
.text:00000000000147BB loc_147BB:                              ; CODE XREF: re_compile_internal+EEA↑j
.text:00000000000147BB                 mov     rax, [rsp+158h+var_150]
.text:00000000000147C0                 mov     qword ptr [rbx+68h], 0
.text:00000000000147C8                 mov     r13, [rax]
.text:00000000000147CB                 jmp     loc_13ACC
.text:00000000000147D0 ; ---------------------------------------------------------------------------
.text:00000000000147D0
.text:00000000000147D0 loc_147D0:                              ; CODE XREF: re_compile_internal+9E2↑j
.text:00000000000147D0                 mov     qword ptr [rcx+8], 0
.text:00000000000147D8                 mov     qword ptr [rcx], 0
.text:00000000000147DF                 mov     eax, 0Ch
.text:00000000000147E4                 jmp     loc_13AC0
.text:00000000000147E9 ; ---------------------------------------------------------------------------
.text:00000000000147E9
.text:00000000000147E9 loc_147E9:                              ; CODE XREF: re_compile_internal+FA0↑j
.text:00000000000147E9                 cmp     edi, 10h
.text:00000000000147EC                 jz      loc_146DC       ; jumptable 0000000000014573 cases 2,4,8-11
.text:00000000000147F2                 jmp     loc_1434E       ; jumptable 0000000000014573 case 6
.text:00000000000147F7 ; ---------------------------------------------------------------------------
.text:00000000000147F7
.text:00000000000147F7 loc_147F7:                              ; CODE XREF: re_compile_internal+F72↑j
.text:00000000000147F7                 mov     r14d, r8d
.text:00000000000147FA
.text:00000000000147FA loc_147FA:                              ; CODE XREF: re_compile_internal+DA6↑j
.text:00000000000147FA                                         ; re_compile_internal+F50↑j
.text:00000000000147FA                 cmp     qword ptr [rbx+98h], 0
.text:0000000000014802                 movzx   edx, byte ptr [rbx+0B0h]
.text:0000000000014809                 mov     dword ptr [rbx+0B4h], 1
.text:0000000000014813                 setnle  al
.text:0000000000014816                 and     edx, 0FFFFFFF9h
.text:0000000000014819                 or      eax, r14d
.text:000000000001481C                 and     eax, 1
.text:000000000001481F                 add     eax, eax
.text:0000000000014821                 or      eax, edx
.text:0000000000014823                 mov     [rbx+0B0h], al
.text:0000000000014829                 jmp     loc_1434E       ; jumptable 0000000000014573 case 6
.text:000000000001482E ; ---------------------------------------------------------------------------
.text:000000000001482E
.text:000000000001482E def_14573:                              ; CODE XREF: re_compile_internal+DC2↑j
.text:000000000001482E                                         ; re_compile_internal+DD3↑j
.text:000000000001482E                                         ; DATA XREF: ...
.text:000000000001482E                 call    _abort          ; jumptable 0000000000014573 default case, cases 0,7
.text:0000000000014833 ; ---------------------------------------------------------------------------
.text:0000000000014833
.text:0000000000014833 loc_14833:                              ; CODE XREF: re_compile_internal+875↑j
.text:0000000000014833                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:000000000001483A                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000014841                 lea     rdi, aRight1    ; "right > -1"
.text:0000000000014848                 mov     edx, 5B0h       ; line
.text:000000000001484D                 call    ___assert_fail
.text:0000000000014852 ; ---------------------------------------------------------------------------
.text:0000000000014852
.text:0000000000014852 loc_14852:                              ; CODE XREF: re_compile_internal+79B↑j
.text:0000000000014852                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000014859                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:0000000000014860                 lea     rdi, aIsEpsilonNodeN ; "!IS_EPSILON_NODE (node->token.type)"
.text:0000000000014867                 mov     edx, 5C2h       ; line
.text:000000000001486C                 call    ___assert_fail
.text:0000000000014871 ; ---------------------------------------------------------------------------
.text:0000000000014871
.text:0000000000014871 loc_14871:                              ; CODE XREF: re_compile_internal+86C↑j
.text:0000000000014871                 lea     rcx, __PRETTY_FUNCTION___6981 ; "link_nfa_nodes"
.text:0000000000014878                 lea     rsi, aCoreutils831Li_1 ; "../coreutils-8.31/lib/regcomp.c"
.text:000000000001487F                 lea     rdi, aLeft1     ; "left > -1"
.text:0000000000014886                 mov     edx, 5AFh       ; line
.text:000000000001488B                 call    ___assert_fail
.text:0000000000014890 ; ---------------------------------------------------------------------------
.text:0000000000014890
.text:0000000000014890 loc_14890:                              ; CODE XREF: re_compile_internal+3AD↑j
.text:0000000000014890                 call    ___stack_chk_fail
.text:0000000000014890 ; } // starts at 137A0
.text:0000000000014890 re_compile_internal endp
.text:0000000000014890
.text:0000000000014890 ; ---------------------------------------------------------------------------
.text:0000000000014895                 align 20h
.text:00000000000148A0
.text:00000000000148A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000148A0
.text:00000000000148A0
.text:00000000000148A0                 public rpl_re_compile_pattern
.text:00000000000148A0 rpl_re_compile_pattern proc near        ; CODE XREF: docolon+9F↑p
.text:00000000000148A0 ; __unwind {
.text:00000000000148A0                 sub     rsp, 8
.text:00000000000148A4                 mov     rcx, cs:rpl_re_syntax_options
.text:00000000000148AB                 mov     r8, rdi
.text:00000000000148AE                 mov     rdi, rdx
.text:00000000000148B1                 mov     rax, rcx
.text:00000000000148B4                 shr     rax, 19h
.text:00000000000148B8                 and     eax, 1
.text:00000000000148BB                 shl     eax, 4
.text:00000000000148BE                 mov     edx, eax
.text:00000000000148C0                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000148C4                 and     eax, 0FFFFFFEFh
.text:00000000000148C7                 or      eax, edx
.text:00000000000148C9                 mov     rdx, rsi
.text:00000000000148CC                 mov     rsi, r8
.text:00000000000148CF                 or      eax, 0FFFFFF80h
.text:00000000000148D2                 mov     [rdi+38h], al
.text:00000000000148D5                 call    re_compile_internal
.text:00000000000148DA                 test    eax, eax
.text:00000000000148DC                 jz      short loc_14908
.text:00000000000148DE                 lea     rdx, __re_error_msgid_idx
.text:00000000000148E5                 cdqe
.text:00000000000148E7                 lea     rsi, __re_error_msgid ; "Success"
.text:00000000000148EE                 xor     edi, edi        ; domainname
.text:00000000000148F0                 add     rsi, [rdx+rax*8] ; msgid
.text:00000000000148F4                 mov     edx, 5          ; category
.text:00000000000148F9                 add     rsp, 8
.text:00000000000148FD                 jmp     _dcgettext
.text:00000000000148FD ; ---------------------------------------------------------------------------
.text:0000000000014902                 align 8
.text:0000000000014908
.text:0000000000014908 loc_14908:                              ; CODE XREF: rpl_re_compile_pattern+3C↑j
.text:0000000000014908                 xor     eax, eax
.text:000000000001490A                 add     rsp, 8
.text:000000000001490E                 retn
.text:000000000001490E ; } // starts at 148A0
.text:000000000001490E rpl_re_compile_pattern endp
.text:000000000001490E
.text:000000000001490E ; ---------------------------------------------------------------------------
.text:000000000001490F                 align 10h
.text:0000000000014910
.text:0000000000014910 ; =============== S U B R O U T I N E =======================================
.text:0000000000014910
.text:0000000000014910
.text:0000000000014910                 public rpl_re_set_syntax
.text:0000000000014910 rpl_re_set_syntax proc near
.text:0000000000014910 ; __unwind {
.text:0000000000014910                 mov     rax, cs:rpl_re_syntax_options
.text:0000000000014917                 mov     cs:rpl_re_syntax_options, rdi
.text:000000000001491E                 retn
.text:000000000001491E ; } // starts at 14910
.text:000000000001491E rpl_re_set_syntax endp
.text:000000000001491E
.text:000000000001491E ; ---------------------------------------------------------------------------
.text:000000000001491F                 align 20h
.text:0000000000014920
.text:0000000000014920 ; =============== S U B R O U T I N E =======================================
.text:0000000000014920
.text:0000000000014920
.text:0000000000014920                 public rpl_re_compile_fastmap
.text:0000000000014920 rpl_re_compile_fastmap proc near        ; CODE XREF: re_search_stub+297↓p
.text:0000000000014920                                         ; rpl_regcomp+B7↓p
.text:0000000000014920 ; __unwind {
.text:0000000000014920                 push    r12
.text:0000000000014922                 push    rbp
.text:0000000000014923                 xor     eax, eax
.text:0000000000014925                 push    rbx
.text:0000000000014926                 mov     rbp, [rdi+20h]
.text:000000000001492A                 mov     rbx, rdi
.text:000000000001492D                 mov     r12, [rdi]
.text:0000000000014930                 lea     rdi, [rbp+8]
.text:0000000000014934                 mov     rcx, rbp
.text:0000000000014937                 mov     qword ptr [rbp+0], 0
.text:000000000001493F                 mov     qword ptr [rbp+0F8h], 0
.text:000000000001494A                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:000000000001494E                 sub     rcx, rdi
.text:0000000000014951                 add     ecx, 100h
.text:0000000000014957                 shr     ecx, 3
.text:000000000001495A                 rep stosq
.text:000000000001495D                 mov     rcx, rbp
.text:0000000000014960                 mov     rdi, rbx
.text:0000000000014963                 mov     rsi, [r12+48h]
.text:0000000000014968                 lea     rdx, [rsi+18h]
.text:000000000001496C                 add     rsi, 10h
.text:0000000000014970                 call    re_compile_fastmap_iter_isra_30
.text:0000000000014975                 mov     rax, [r12+50h]
.text:000000000001497A                 cmp     [r12+48h], rax
.text:000000000001497F                 jz      short loc_14999
.text:0000000000014981                 lea     rdx, [rax+18h]
.text:0000000000014985                 lea     rsi, [rax+10h]
.text:0000000000014989                 mov     rcx, rbp
.text:000000000001498C                 mov     rdi, rbx
.text:000000000001498F                 call    re_compile_fastmap_iter_isra_30
.text:0000000000014994                 mov     rax, [r12+48h]
.text:0000000000014999
.text:0000000000014999 loc_14999:                              ; CODE XREF: rpl_re_compile_fastmap+5F↑j
.text:0000000000014999                 mov     rsi, [r12+58h]
.text:000000000001499E                 cmp     rsi, rax
.text:00000000000149A1                 jz      short loc_149BB
.text:00000000000149A3                 lea     rdx, [rsi+18h]
.text:00000000000149A7                 mov     rcx, rbp
.text:00000000000149AA                 add     rsi, 10h
.text:00000000000149AE                 mov     rdi, rbx
.text:00000000000149B1                 call    re_compile_fastmap_iter_isra_30
.text:00000000000149B6                 mov     rax, [r12+48h]
.text:00000000000149BB
.text:00000000000149BB loc_149BB:                              ; CODE XREF: rpl_re_compile_fastmap+81↑j
.text:00000000000149BB                 mov     rsi, [r12+60h]
.text:00000000000149C0                 cmp     rsi, rax
.text:00000000000149C3                 jz      short loc_149D8
.text:00000000000149C5                 lea     rdx, [rsi+18h]
.text:00000000000149C9                 mov     rcx, rbp
.text:00000000000149CC                 add     rsi, 10h
.text:00000000000149D0                 mov     rdi, rbx
.text:00000000000149D3                 call    re_compile_fastmap_iter_isra_30
.text:00000000000149D8
.text:00000000000149D8 loc_149D8:                              ; CODE XREF: rpl_re_compile_fastmap+A3↑j
.text:00000000000149D8                 or      byte ptr [rbx+38h], 8
.text:00000000000149DC                 xor     eax, eax
.text:00000000000149DE                 pop     rbx
.text:00000000000149DF                 pop     rbp
.text:00000000000149E0                 pop     r12
.text:00000000000149E2                 retn
.text:00000000000149E2 ; } // starts at 14920
.text:00000000000149E2 rpl_re_compile_fastmap endp
.text:00000000000149E2
.text:00000000000149E2 ; ---------------------------------------------------------------------------
.text:00000000000149E3                 align 10h
.text:00000000000149F0
.text:00000000000149F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000149F0
.text:00000000000149F0
.text:00000000000149F0 re_search_stub  proc near               ; CODE XREF: re_search_2_stub+88↓p
.text:00000000000149F0                                         ; rpl_re_match+E↓p ...
.text:00000000000149F0
.text:00000000000149F0 size            = qword ptr -60h
.text:00000000000149F0 ptr             = qword ptr -58h
.text:00000000000149F0 var_50          = qword ptr -50h
.text:00000000000149F0 var_48          = qword ptr -48h
.text:00000000000149F0 var_40          = dword ptr -40h
.text:00000000000149F0 var_3C          = dword ptr -3Ch
.text:00000000000149F0 arg_0           = qword ptr  8
.text:00000000000149F0 arg_8           = dword ptr  10h
.text:00000000000149F0
.text:00000000000149F0 ; __unwind {
.text:00000000000149F0                 push    r15
.text:00000000000149F2                 push    r14
.text:00000000000149F4                 mov     rax, r8
.text:00000000000149F7                 push    r13
.text:00000000000149F9                 push    r12
.text:00000000000149FB                 add     r8, rcx
.text:00000000000149FE                 push    rbp
.text:00000000000149FF                 push    rbx
.text:0000000000014A00                 sub     rsp, 38h
.text:0000000000014A04                 test    rcx, rcx
.text:0000000000014A07                 mov     ebx, [rsp+68h+arg_8]
.text:0000000000014A0B                 mov     r12, [rsp+68h+arg_0]
.text:0000000000014A10                 mov     [rsp+68h+var_40], ebx
.text:0000000000014A14                 js      loc_14D50
.text:0000000000014A1A                 cmp     rcx, rdx
.text:0000000000014A1D                 jg      loc_14D50
.text:0000000000014A23                 cmp     r8, rdx
.text:0000000000014A26                 mov     rbx, rcx
.text:0000000000014A29                 mov     r15, rdi
.text:0000000000014A2C                 jg      loc_14CB0
.text:0000000000014A32                 test    rax, rax
.text:0000000000014A35                 js      short loc_14A40
.text:0000000000014A37                 cmp     rcx, r8
.text:0000000000014A3A                 jg      loc_14CB0
.text:0000000000014A40
.text:0000000000014A40 loc_14A40:                              ; CODE XREF: re_search_stub+45↑j
.text:0000000000014A40                 test    r8, r8
.text:0000000000014A43                 js      loc_14D28
.text:0000000000014A49                 test    rax, rax
.text:0000000000014A4C                 jns     short loc_14A57
.text:0000000000014A4E                 cmp     rbx, r8
.text:0000000000014A51                 jle     loc_14D28
.text:0000000000014A57
.text:0000000000014A57 loc_14A57:                              ; CODE XREF: re_search_stub+5C↑j
.text:0000000000014A57                                         ; re_search_stub+2C3↓j
.text:0000000000014A57                 movzx   eax, byte ptr [r15+38h]
.text:0000000000014A5C                 mov     r13d, eax
.text:0000000000014A5F                 shr     r13b, 5
.text:0000000000014A63                 mov     edi, r13d
.text:0000000000014A66                 and     edi, 3
.text:0000000000014A69                 cmp     r8, rbx
.text:0000000000014A6C                 mov     [rsp+68h+var_3C], edi
.text:0000000000014A70                 jle     short loc_14A81
.text:0000000000014A72                 cmp     qword ptr [r15+20h], 0
.text:0000000000014A77                 jz      short loc_14A81
.text:0000000000014A79                 test    al, 8
.text:0000000000014A7B                 jz      loc_14C70
.text:0000000000014A81
.text:0000000000014A81 loc_14A81:                              ; CODE XREF: re_search_stub+80↑j
.text:0000000000014A81                                         ; re_search_stub+87↑j ...
.text:0000000000014A81                 test    al, 10h
.text:0000000000014A83                 jnz     loc_14C50
.text:0000000000014A89                 test    r12, r12
.text:0000000000014A8C                 jz      loc_14C50
.text:0000000000014A92                 and     eax, 6
.text:0000000000014A95                 mov     rcx, [r15+30h]
.text:0000000000014A99                 cmp     al, 4
.text:0000000000014A9B                 jz      loc_14C30
.text:0000000000014AA1
.text:0000000000014AA1 loc_14AA1:                              ; CODE XREF: re_search_stub+247↓j
.text:0000000000014AA1                 lea     r14, [rcx+1]
.text:0000000000014AA5                 mov     r13, r14
.text:0000000000014AA8
.text:0000000000014AA8 loc_14AA8:                              ; CODE XREF: re_search_stub+253↓j
.text:0000000000014AA8                 mov     rdi, r14
.text:0000000000014AAB                 shl     rdi, 4          ; size
.text:0000000000014AAF
.text:0000000000014AAF loc_14AAF:                              ; CODE XREF: re_search_stub+274↓j
.text:0000000000014AAF                 mov     [rsp+68h+var_48], r9
.text:0000000000014AB4                 mov     [rsp+68h+var_50], rdx
.text:0000000000014AB9                 mov     [rsp+68h+ptr], rsi
.text:0000000000014ABE                 mov     [rsp+68h+size], r8
.text:0000000000014AC3                 call    _malloc
.text:0000000000014AC8                 test    rax, rax
.text:0000000000014ACB                 mov     rbp, rax
.text:0000000000014ACE                 jz      loc_14D60
.text:0000000000014AD4                 sub     rsp, 8
.text:0000000000014AD8                 mov     rcx, rbx
.text:0000000000014ADB                 mov     rdi, r15
.text:0000000000014ADE                 mov     eax, [rsp+70h+var_3C]
.text:0000000000014AE2                 push    rax
.text:0000000000014AE3                 push    rbp
.text:0000000000014AE4                 push    r14
.text:0000000000014AE6                 mov     r9, [rsp+88h+var_48]
.text:0000000000014AEB                 mov     r8, [rsp+88h+size]
.text:0000000000014AF0                 mov     rdx, [rsp+88h+var_50]
.text:0000000000014AF5                 mov     rsi, [rsp+88h+ptr]
.text:0000000000014AFA                 call    re_search_internal
.text:0000000000014AFF                 add     rsp, 20h
.text:0000000000014B03                 test    eax, eax
.text:0000000000014B05                 jz      short loc_14B38
.text:0000000000014B07                 cmp     eax, 1
.text:0000000000014B0A                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000014B11                 jz      short loc_14B1A
.text:0000000000014B13
.text:0000000000014B13 loc_14B13:                              ; CODE XREF: re_search_stub+212↓j
.text:0000000000014B13                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000014B1A
.text:0000000000014B1A loc_14B1A:                              ; CODE XREF: re_search_stub+121↑j
.text:0000000000014B1A                                         ; re_search_stub+221↓j ...
.text:0000000000014B1A                 mov     rdi, rbp        ; ptr
.text:0000000000014B1D                 call    _free
.text:0000000000014B22
.text:0000000000014B22 loc_14B22:                              ; CODE XREF: re_search_stub+367↓j
.text:0000000000014B22                                         ; re_search_stub+377↓j
.text:0000000000014B22                 add     rsp, 38h
.text:0000000000014B26                 mov     rax, r12
.text:0000000000014B29                 pop     rbx
.text:0000000000014B2A                 pop     rbp
.text:0000000000014B2B                 pop     r12
.text:0000000000014B2D                 pop     r13
.text:0000000000014B2F                 pop     r14
.text:0000000000014B31                 pop     r15
.text:0000000000014B33                 retn
.text:0000000000014B33 ; ---------------------------------------------------------------------------
.text:0000000000014B34                 align 8
.text:0000000000014B38
.text:0000000000014B38 loc_14B38:                              ; CODE XREF: re_search_stub+115↑j
.text:0000000000014B38                 test    r12, r12
.text:0000000000014B3B                 jz      loc_14C08
.text:0000000000014B41                 movzx   eax, byte ptr [r15+38h]
.text:0000000000014B46                 lea     rdx, [r13+1]
.text:0000000000014B4A                 shr     al, 1
.text:0000000000014B4C                 and     eax, 3
.text:0000000000014B4F                 jz      loc_14CC0
.text:0000000000014B55                 cmp     eax, 1
.text:0000000000014B58                 jz      loc_14D70
.text:0000000000014B5E                 cmp     eax, 2
.text:0000000000014B61                 jnz     loc_14E50
.text:0000000000014B67                 cmp     r14, [r12]
.text:0000000000014B6B                 ja      loc_14E31
.text:0000000000014B71                 mov     r9d, 2
.text:0000000000014B77
.text:0000000000014B77 loc_14B77:                              ; CODE XREF: re_search_stub+32C↓j
.text:0000000000014B77                                         ; re_search_stub+38A↓j ...
.text:0000000000014B77                 test    r13, r13
.text:0000000000014B7A                 jle     loc_14DE8
.text:0000000000014B80                 mov     r8, [r12+8]
.text:0000000000014B85                 mov     rdi, [r12+10h]
.text:0000000000014B8A                 lea     rsi, ds:0[r13*8]
.text:0000000000014B92                 mov     rdx, r13
.text:0000000000014B95                 xor     eax, eax
.text:0000000000014B97                 nop     word ptr [rax+rax+00000000h]
.text:0000000000014BA0
.text:0000000000014BA0 loc_14BA0:                              ; CODE XREF: re_search_stub+1C9↓j
.text:0000000000014BA0                 mov     rcx, [rbp+rax*2+0]
.text:0000000000014BA5                 mov     [r8+rax], rcx
.text:0000000000014BA9                 mov     rcx, [rbp+rax*2+8]
.text:0000000000014BAE                 mov     [rdi+rax], rcx
.text:0000000000014BB2                 add     rax, 8
.text:0000000000014BB6                 cmp     rsi, rax
.text:0000000000014BB9                 jnz     short loc_14BA0
.text:0000000000014BBB
.text:0000000000014BBB loc_14BBB:                              ; CODE XREF: re_search_stub+3FD↓j
.text:0000000000014BBB                 cmp     [r12], rdx
.text:0000000000014BBF                 jbe     short loc_14BED
.text:0000000000014BC1                 mov     rsi, [r12+10h]
.text:0000000000014BC6                 mov     rcx, [r12+8]
.text:0000000000014BCB                 mov     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000014BD2                 nop     word ptr [rax+rax+00h]
.text:0000000000014BD8
.text:0000000000014BD8 loc_14BD8:                              ; CODE XREF: re_search_stub+1FB↓j
.text:0000000000014BD8                 mov     [rsi+rdx*8], rax
.text:0000000000014BDC                 add     r13, 1
.text:0000000000014BE0                 mov     [rcx+rdx*8], rax
.text:0000000000014BE4                 cmp     r13, [r12]
.text:0000000000014BE8                 mov     rdx, r13
.text:0000000000014BEB                 jb      short loc_14BD8
.text:0000000000014BED
.text:0000000000014BED loc_14BED:                              ; CODE XREF: re_search_stub+1CF↑j
.text:0000000000014BED                                         ; re_search_stub+40D↓j ...
.text:0000000000014BED                 movzx   eax, byte ptr [r15+38h]
.text:0000000000014BF2                 lea     r13d, [r9+r9]
.text:0000000000014BF6                 and     eax, 0FFFFFFF9h
.text:0000000000014BF9                 or      eax, r13d
.text:0000000000014BFC                 test    al, 6
.text:0000000000014BFE                 mov     [r15+38h], al
.text:0000000000014C02                 jz      loc_14B13
.text:0000000000014C08
.text:0000000000014C08 loc_14C08:                              ; CODE XREF: re_search_stub+14B↑j
.text:0000000000014C08                 cmp     byte ptr [rsp+68h+var_40], 0
.text:0000000000014C0D                 mov     r12, [rbp+0]
.text:0000000000014C11                 jz      loc_14B1A
.text:0000000000014C17                 cmp     r12, rbx
.text:0000000000014C1A                 jnz     loc_14E12
.text:0000000000014C20                 mov     r12, [rbp+8]
.text:0000000000014C24                 sub     r12, rbx
.text:0000000000014C27                 jmp     loc_14B1A
.text:0000000000014C27 ; ---------------------------------------------------------------------------
.text:0000000000014C2C                 align 10h
.text:0000000000014C30
.text:0000000000014C30 loc_14C30:                              ; CODE XREF: re_search_stub+AB↑j
.text:0000000000014C30                 mov     r14, [r12]
.text:0000000000014C34                 cmp     r14, rcx
.text:0000000000014C37                 ja      loc_14AA1
.text:0000000000014C3D                 test    r14, r14
.text:0000000000014C40                 mov     r13, r14
.text:0000000000014C43                 jg      loc_14AA8
.text:0000000000014C49                 nop     dword ptr [rax+00000000h]
.text:0000000000014C50
.text:0000000000014C50 loc_14C50:                              ; CODE XREF: re_search_stub+93↑j
.text:0000000000014C50                                         ; re_search_stub+9C↑j
.text:0000000000014C50                 mov     edi, 10h
.text:0000000000014C55                 mov     r14d, 1
.text:0000000000014C5B                 mov     r13d, 1
.text:0000000000014C61                 xor     r12d, r12d
.text:0000000000014C64                 jmp     loc_14AAF
.text:0000000000014C64 ; ---------------------------------------------------------------------------
.text:0000000000014C69                 align 10h
.text:0000000000014C70
.text:0000000000014C70 loc_14C70:                              ; CODE XREF: re_search_stub+8B↑j
.text:0000000000014C70                 mov     rdi, r15
.text:0000000000014C73                 mov     [rsp+68h+var_48], r9
.text:0000000000014C78                 mov     [rsp+68h+var_50], rdx
.text:0000000000014C7D                 mov     [rsp+68h+ptr], rsi
.text:0000000000014C82                 mov     [rsp+68h+size], r8
.text:0000000000014C87                 call    rpl_re_compile_fastmap
.text:0000000000014C8C                 movzx   eax, byte ptr [r15+38h]
.text:0000000000014C91                 mov     r9, [rsp+68h+var_48]
.text:0000000000014C96                 mov     rdx, [rsp+68h+var_50]
.text:0000000000014C9B                 mov     rsi, [rsp+68h+ptr]
.text:0000000000014CA0                 mov     r8, [rsp+68h+size]
.text:0000000000014CA5                 jmp     loc_14A81
.text:0000000000014CA5 ; ---------------------------------------------------------------------------
.text:0000000000014CAA                 align 10h
.text:0000000000014CB0
.text:0000000000014CB0 loc_14CB0:                              ; CODE XREF: re_search_stub+3C↑j
.text:0000000000014CB0                                         ; re_search_stub+4A↑j
.text:0000000000014CB0                 mov     r8, rdx
.text:0000000000014CB3                 jmp     loc_14A57
.text:0000000000014CB3 ; ---------------------------------------------------------------------------
.text:0000000000014CB8                 align 20h
.text:0000000000014CC0
.text:0000000000014CC0 loc_14CC0:                              ; CODE XREF: re_search_stub+15F↑j
.text:0000000000014CC0                 lea     r14, ds:0[rdx*8]
.text:0000000000014CC8                 mov     [rsp+68h+size], rdx
.text:0000000000014CCD                 mov     rdi, r14        ; size
.text:0000000000014CD0                 call    _malloc
.text:0000000000014CD5                 test    rax, rax
.text:0000000000014CD8                 mov     [r12+8], rax
.text:0000000000014CDD                 mov     rdx, [rsp+68h+size]
.text:0000000000014CE2                 jz      loc_14DFA
.text:0000000000014CE8                 mov     rdi, r14        ; size
.text:0000000000014CEB                 mov     [rsp+68h+size], rdx
.text:0000000000014CF0                 mov     [rsp+68h+ptr], rax
.text:0000000000014CF5                 call    _malloc
.text:0000000000014CFA                 test    rax, rax
.text:0000000000014CFD                 mov     [r12+10h], rax
.text:0000000000014D02                 mov     rdx, [rsp+68h+size]
.text:0000000000014D07                 mov     rcx, [rsp+68h+ptr]
.text:0000000000014D0C                 jz      loc_14DF2
.text:0000000000014D12                 mov     [r12], rdx
.text:0000000000014D16                 mov     r9d, 1
.text:0000000000014D1C                 jmp     loc_14B77
.text:0000000000014D1C ; ---------------------------------------------------------------------------
.text:0000000000014D21                 align 8
.text:0000000000014D28
.text:0000000000014D28 loc_14D28:                              ; CODE XREF: re_search_stub+53↑j
.text:0000000000014D28                                         ; re_search_stub+61↑j
.text:0000000000014D28                 movzx   eax, byte ptr [r15+38h]
.text:0000000000014D2D                 xor     r8d, r8d
.text:0000000000014D30                 mov     r13d, eax
.text:0000000000014D33                 shr     r13b, 5
.text:0000000000014D37                 mov     edi, r13d
.text:0000000000014D3A                 and     edi, 3
.text:0000000000014D3D                 mov     [rsp+68h+var_3C], edi
.text:0000000000014D41                 jmp     loc_14A81
.text:0000000000014D41 ; ---------------------------------------------------------------------------
.text:0000000000014D46                 align 10h
.text:0000000000014D50
.text:0000000000014D50 loc_14D50:                              ; CODE XREF: re_search_stub+24↑j
.text:0000000000014D50                                         ; re_search_stub+2D↑j
.text:0000000000014D50                 mov     r12, 0FFFFFFFFFFFFFFFFh
.text:0000000000014D57                 jmp     loc_14B22
.text:0000000000014D57 ; ---------------------------------------------------------------------------
.text:0000000000014D5C                 align 20h
.text:0000000000014D60
.text:0000000000014D60 loc_14D60:                              ; CODE XREF: re_search_stub+DE↑j
.text:0000000000014D60                 mov     r12, 0FFFFFFFFFFFFFFFEh
.text:0000000000014D67                 jmp     loc_14B22
.text:0000000000014D67 ; ---------------------------------------------------------------------------
.text:0000000000014D6C                 align 10h
.text:0000000000014D70
.text:0000000000014D70 loc_14D70:                              ; CODE XREF: re_search_stub+168↑j
.text:0000000000014D70                 cmp     [r12], rdx
.text:0000000000014D74                 mov     r9d, 1
.text:0000000000014D7A                 jnb     loc_14B77
.text:0000000000014D80                 lea     rcx, ds:0[rdx*8]
.text:0000000000014D88                 mov     rdi, [r12+8]    ; ptr
.text:0000000000014D8D                 mov     byte ptr [rsp+68h+var_50], r9b
.text:0000000000014D92                 mov     [rsp+68h+ptr], rdx
.text:0000000000014D97                 mov     rsi, rcx        ; size
.text:0000000000014D9A                 mov     [rsp+68h+size], rcx
.text:0000000000014D9F                 call    _realloc
.text:0000000000014DA4                 test    rax, rax
.text:0000000000014DA7                 mov     r14, rax
.text:0000000000014DAA                 jz      short loc_14DFA
.text:0000000000014DAC                 mov     rcx, [rsp+68h+size]
.text:0000000000014DB1                 mov     rdi, [r12+10h]  ; ptr
.text:0000000000014DB6                 mov     rsi, rcx        ; size
.text:0000000000014DB9                 call    _realloc
.text:0000000000014DBE                 test    rax, rax
.text:0000000000014DC1                 mov     rdx, [rsp+68h+ptr]
.text:0000000000014DC6                 movzx   r9d, byte ptr [rsp+68h+var_50]
.text:0000000000014DCC                 jz      short loc_14E02
.text:0000000000014DCE                 mov     [r12+8], r14
.text:0000000000014DD3                 mov     [r12+10h], rax
.text:0000000000014DD8                 mov     [r12], rdx
.text:0000000000014DDC                 jmp     loc_14B77
.text:0000000000014DDC ; ---------------------------------------------------------------------------
.text:0000000000014DE1                 align 8
.text:0000000000014DE8
.text:0000000000014DE8 loc_14DE8:                              ; CODE XREF: re_search_stub+18A↑j
.text:0000000000014DE8                 xor     edx, edx
.text:0000000000014DEA                 xor     r13d, r13d
.text:0000000000014DED                 jmp     loc_14BBB
.text:0000000000014DF2 ; ---------------------------------------------------------------------------
.text:0000000000014DF2
.text:0000000000014DF2 loc_14DF2:                              ; CODE XREF: re_search_stub+31C↑j
.text:0000000000014DF2                 mov     rdi, rcx        ; ptr
.text:0000000000014DF5                 call    _free
.text:0000000000014DFA
.text:0000000000014DFA loc_14DFA:                              ; CODE XREF: re_search_stub+2F2↑j
.text:0000000000014DFA                                         ; re_search_stub+3BA↑j
.text:0000000000014DFA                 xor     r9d, r9d
.text:0000000000014DFD                 jmp     loc_14BED
.text:0000000000014E02 ; ---------------------------------------------------------------------------
.text:0000000000014E02
.text:0000000000014E02 loc_14E02:                              ; CODE XREF: re_search_stub+3DC↑j
.text:0000000000014E02                 mov     rdi, r14        ; ptr
.text:0000000000014E05                 call    _free
.text:0000000000014E0A                 xor     r9d, r9d
.text:0000000000014E0D                 jmp     loc_14BED
.text:0000000000014E12 ; ---------------------------------------------------------------------------
.text:0000000000014E12
.text:0000000000014E12 loc_14E12:                              ; CODE XREF: re_search_stub+22A↑j
.text:0000000000014E12                 lea     rcx, __PRETTY_FUNCTION___7847 ; "re_search_stub"
.text:0000000000014E19                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000014E20                 lea     rdi, aPmatch0RmSoSta ; "pmatch[0].rm_so == start"
.text:0000000000014E27                 mov     edx, 1BEh       ; line
.text:0000000000014E2C                 call    ___assert_fail
.text:0000000000014E31 ; ---------------------------------------------------------------------------
.text:0000000000014E31
.text:0000000000014E31 loc_14E31:                              ; CODE XREF: re_search_stub+17B↑j
.text:0000000000014E31                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000014E38                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000014E3F                 lea     rdi, aRegsNumRegsNre ; "regs->num_regs >= nregs"
.text:0000000000014E46                 mov     edx, 1FBh       ; line
.text:0000000000014E4B                 call    ___assert_fail
.text:0000000000014E50 ; ---------------------------------------------------------------------------
.text:0000000000014E50
.text:0000000000014E50 loc_14E50:                              ; CODE XREF: re_search_stub+171↑j
.text:0000000000014E50                 lea     rcx, __PRETTY_FUNCTION___7859 ; "re_copy_regs"
.text:0000000000014E57                 lea     rsi, aCoreutils831Li_0 ; "../coreutils-8.31/lib/regexec.c"
.text:0000000000014E5E                 lea     rdi, aRegsAllocatedR ; "regs_allocated == REGS_FIXED"
.text:0000000000014E65                 mov     edx, 1F9h       ; line
.text:0000000000014E6A                 call    ___assert_fail
.text:0000000000014E6A ; } // starts at 149F0
.text:0000000000014E6A re_search_stub  endp
.text:0000000000014E6A
.text:0000000000014E6A ; ---------------------------------------------------------------------------
.text:0000000000014E6F                 align 10h
.text:0000000000014E70
.text:0000000000014E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000014E70
.text:0000000000014E70
.text:0000000000014E70 re_search_2_stub proc near              ; CODE XREF: rpl_re_match_2+10↓p
.text:0000000000014E70                                         ; rpl_re_search_2+12↓p
.text:0000000000014E70
.text:0000000000014E70 src             = qword ptr -50h
.text:0000000000014E70 var_48          = qword ptr -48h
.text:0000000000014E70 var_3C          = dword ptr -3Ch
.text:0000000000014E70 arg_0           = qword ptr  8
.text:0000000000014E70 arg_8           = qword ptr  10h
.text:0000000000014E70 arg_10          = qword ptr  18h
.text:0000000000014E70 arg_18          = dword ptr  20h
.text:0000000000014E70
.text:0000000000014E70 ; __unwind {
.text:0000000000014E70                 push    r15
.text:0000000000014E72                 push    r14
.text:0000000000014E74                 push    r13
.text:0000000000014E76                 push    r12
.text:0000000000014E78                 mov     r12, rdi
.text:0000000000014E7B                 push    rbp
.text:0000000000014E7C                 push    rbx
.text:0000000000014E7D                 mov     rbp, r8
.text:0000000000014E80                 mov     rbx, rdx
.text:0000000000014E83                 mov     rdx, rbp
.text:0000000000014E86                 sub     rsp, 28h
.text:0000000000014E8A                 shr     rdx, 3Fh
.text:0000000000014E8E                 mov     rax, [rsp+58h+arg_10]
.text:0000000000014E93                 mov     edi, edx
.text:0000000000014E95                 mov     r8d, [rsp+58h+arg_18]
.text:0000000000014E9A                 shr     rax, 3Fh
.text:0000000000014E9E                 or      dil, al
.text:0000000000014EA1                 jnz     loc_14F70
.text:0000000000014EA7                 test    rbx, rbx
.text:0000000000014EAA                 js      loc_14F70
.text:0000000000014EB0                 mov     r15, rbx
.text:0000000000014EB3                 add     r15, rbp
.text:0000000000014EB6                 jo      loc_14F70
.text:0000000000014EBC                 test    rbp, rbp
.text:0000000000014EBF                 mov     r14, rcx
.text:0000000000014EC2                 mov     rcx, r9
.text:0000000000014EC5                 jz      loc_14F80
.text:0000000000014ECB                 xor     r13d, r13d
.text:0000000000014ECE                 test    rbx, rbx
.text:0000000000014ED1                 mov     [rsp+58h+src], rsi
.text:0000000000014ED6                 jnz     short loc_14F20
.text:0000000000014ED8
.text:0000000000014ED8 loc_14ED8:                              ; CODE XREF: re_search_2_stub+F7↓j
.text:0000000000014ED8                                         ; re_search_2_stub+116↓j
.text:0000000000014ED8                 movzx   r8d, r8b
.text:0000000000014EDC                 mov     rdx, r15
.text:0000000000014EDF                 mov     rsi, r14
.text:0000000000014EE2                 push    r8
.text:0000000000014EE4                 push    [rsp+60h+arg_8]
.text:0000000000014EE8                 mov     rdi, r12
.text:0000000000014EEB                 mov     r9, [rsp+68h+arg_10]
.text:0000000000014EF3                 mov     r8, [rsp+68h+arg_0]
.text:0000000000014EF8                 call    re_search_stub
.text:0000000000014EFD                 mov     rdi, r13        ; ptr
.text:0000000000014F00                 mov     rbx, rax
.text:0000000000014F03                 call    _free
.text:0000000000014F08                 pop     rax
.text:0000000000014F09                 pop     rdx
.text:0000000000014F0A
.text:0000000000014F0A loc_14F0A:                              ; CODE XREF: re_search_2_stub+107↓j
.text:0000000000014F0A                 add     rsp, 28h
.text:0000000000014F0E                 mov     rax, rbx
.text:0000000000014F11                 pop     rbx
.text:0000000000014F12                 pop     rbp
.text:0000000000014F13                 pop     r12
.text:0000000000014F15                 pop     r13
.text:0000000000014F17                 pop     r14
.text:0000000000014F19                 pop     r15
.text:0000000000014F1B                 retn
.text:0000000000014F1B ; ---------------------------------------------------------------------------
.text:0000000000014F1C                 align 20h
.text:0000000000014F20
.text:0000000000014F20 loc_14F20:                              ; CODE XREF: re_search_2_stub+66↑j
.text:0000000000014F20                 mov     rdi, r15        ; size
.text:0000000000014F23                 mov     [rsp+58h+var_3C], r8d
.text:0000000000014F28                 mov     [rsp+58h+var_48], r9
.text:0000000000014F2D                 call    _malloc
.text:0000000000014F32                 test    rax, rax
.text:0000000000014F35                 mov     r13, rax
.text:0000000000014F38                 jz      short loc_14F70
.text:0000000000014F3A                 mov     rsi, [rsp+58h+src] ; src
.text:0000000000014F3F                 mov     rdx, rbx        ; n
.text:0000000000014F42                 mov     rdi, rax        ; dest
.text:0000000000014F45                 call    _memcpy
.text:0000000000014F4A                 lea     rdi, [r13+rbx+0] ; dest
.text:0000000000014F4F                 mov     rsi, r14        ; src
.text:0000000000014F52                 mov     rdx, rbp        ; n
.text:0000000000014F55                 mov     r14, r13
.text:0000000000014F58                 call    _memcpy
.text:0000000000014F5D                 mov     rcx, [rsp+58h+var_48]
.text:0000000000014F62                 mov     r8d, [rsp+58h+var_3C]
.text:0000000000014F67                 jmp     loc_14ED8
.text:0000000000014F67 ; ---------------------------------------------------------------------------
.text:0000000000014F6C                 align 10h
.text:0000000000014F70
.text:0000000000014F70 loc_14F70:                              ; CODE XREF: re_search_2_stub+31↑j
.text:0000000000014F70                                         ; re_search_2_stub+3A↑j ...
.text:0000000000014F70                 mov     rbx, 0FFFFFFFFFFFFFFFEh
.text:0000000000014F77                 jmp     short loc_14F0A
.text:0000000000014F77 ; ---------------------------------------------------------------------------
.text:0000000000014F79                 align 20h
.text:0000000000014F80
.text:0000000000014F80 loc_14F80:                              ; CODE XREF: re_search_2_stub+55↑j
.text:0000000000014F80                 mov     r14, rsi
.text:0000000000014F83                 xor     r13d, r13d
.text:0000000000014F86                 jmp     loc_14ED8
.text:0000000000014F86 ; } // starts at 14E70
.text:0000000000014F86 re_search_2_stub endp
.text:0000000000014F86
.text:0000000000014F86 ; ---------------------------------------------------------------------------
.text:0000000000014F8B                 align 10h
.text:0000000000014F90
.text:0000000000014F90 ; =============== S U B R O U T I N E =======================================
.text:0000000000014F90
.text:0000000000014F90
.text:0000000000014F90                 public rpl_regcomp
.text:0000000000014F90 rpl_regcomp     proc near
.text:0000000000014F90 ; __unwind {
.text:0000000000014F90                 mov     eax, edx
.text:0000000000014F92                 push    r14
.text:0000000000014F94                 push    r13
.text:0000000000014F96                 and     eax, 1
.text:0000000000014F99                 push    r12
.text:0000000000014F9B                 push    rbp
.text:0000000000014F9C                 cmp     eax, 1
.text:0000000000014F9F                 push    rbx
.text:0000000000014FA0                 mov     rbx, rdi
.text:0000000000014FA3                 sbb     r14, r14
.text:0000000000014FA6                 mov     qword ptr [rdi], 0
.text:0000000000014FAD                 mov     qword ptr [rdi+8], 0
.text:0000000000014FB5                 and     r14d, 0FD4FCAh
.text:0000000000014FBC                 mov     qword ptr [rdi+10h], 0
.text:0000000000014FC4                 mov     edi, 100h       ; size
.text:0000000000014FC9                 mov     r12, rsi
.text:0000000000014FCC                 mov     ebp, edx
.text:0000000000014FCE                 add     r14, 3B2FCh
.text:0000000000014FD5                 call    _malloc
.text:0000000000014FDA                 test    rax, rax
.text:0000000000014FDD                 mov     [rbx+20h], rax
.text:0000000000014FE1                 jz      loc_15090
.text:0000000000014FE7                 mov     r13, rbp
.text:0000000000014FEA                 shl     r13, 15h
.text:0000000000014FEE                 and     r13d, 400000h
.text:0000000000014FF5                 or      r13, r14
.text:0000000000014FF8                 test    bpl, 4
.text:0000000000014FFC                 jnz     short loc_15060
.text:0000000000014FFE                 and     byte ptr [rbx+38h], 7Fh
.text:0000000000015002
.text:0000000000015002 loc_15002:                              ; CODE XREF: rpl_regcomp+DF↓j
.text:0000000000015002                 movzx   edx, byte ptr [rbx+38h]
.text:0000000000015006                 shr     ebp, 3
.text:0000000000015009                 mov     rdi, r12        ; s
.text:000000000001500C                 and     ebp, 1
.text:000000000001500F                 mov     qword ptr [rbx+28h], 0
.text:0000000000015017                 shl     ebp, 4
.text:000000000001501A                 and     edx, 0FFFFFFEFh
.text:000000000001501D                 or      ebp, edx
.text:000000000001501F                 mov     [rbx+38h], bpl
.text:0000000000015023                 call    _strlen
.text:0000000000015028                 mov     rcx, r13
.text:000000000001502B                 mov     rdx, rax
.text:000000000001502E                 mov     rsi, r12
.text:0000000000015031                 mov     rdi, rbx
.text:0000000000015034                 call    re_compile_internal
.text:0000000000015039                 cmp     eax, 10h
.text:000000000001503C                 mov     ebp, eax
.text:000000000001503E                 jz      short loc_15078
.text:0000000000015040                 test    eax, eax
.text:0000000000015042                 jnz     short loc_1507D
.text:0000000000015044                 mov     rdi, rbx
.text:0000000000015047                 call    rpl_re_compile_fastmap
.text:000000000001504C
.text:000000000001504C loc_1504C:                              ; CODE XREF: rpl_regcomp+FE↓j
.text:000000000001504C                 pop     rbx
.text:000000000001504D                 mov     eax, ebp
.text:000000000001504F                 pop     rbp
.text:0000000000015050                 pop     r12
.text:0000000000015052                 pop     r13
.text:0000000000015054                 pop     r14
.text:0000000000015056                 retn
.text:0000000000015056 ; ---------------------------------------------------------------------------
.text:0000000000015057                 align 20h
.text:0000000000015060
.text:0000000000015060 loc_15060:                              ; CODE XREF: rpl_regcomp+6C↑j
.text:0000000000015060                 and     r13, 0FFFFFFFFFFFFFFBFh
.text:0000000000015064                 or      byte ptr [rbx+38h], 80h
.text:0000000000015068                 or      r13, 100h
.text:000000000001506F                 jmp     short loc_15002
.text:000000000001506F ; ---------------------------------------------------------------------------
.text:0000000000015071                 align 8
.text:0000000000015078
.text:0000000000015078 loc_15078:                              ; CODE XREF: rpl_regcomp+AE↑j
.text:0000000000015078                 mov     ebp, 8
.text:000000000001507D
.text:000000000001507D loc_1507D:                              ; CODE XREF: rpl_regcomp+B2↑j
.text:000000000001507D                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000015081                 call    _free
.text:0000000000015086                 mov     qword ptr [rbx+20h], 0
.text:000000000001508E                 jmp     short loc_1504C
.text:0000000000015090 ; ---------------------------------------------------------------------------
.text:0000000000015090
.text:0000000000015090 loc_15090:                              ; CODE XREF: rpl_regcomp+51↑j
.text:0000000000015090                 mov     ebp, 0Ch
.text:0000000000015095                 pop     rbx
.text:0000000000015096                 mov     eax, ebp
.text:0000000000015098                 pop     rbp
.text:0000000000015099                 pop     r12
.text:000000000001509B                 pop     r13
.text:000000000001509D                 pop     r14
.text:000000000001509F                 retn
.text:000000000001509F ; } // starts at 14F90
.text:000000000001509F rpl_regcomp     endp
.text:000000000001509F
.text:00000000000150A0
.text:00000000000150A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000150A0
.text:00000000000150A0
.text:00000000000150A0                 public rpl_regerror
.text:00000000000150A0 rpl_regerror    proc near
.text:00000000000150A0 ; __unwind {
.text:00000000000150A0                 push    r13
.text:00000000000150A2                 push    r12
.text:00000000000150A4                 push    rbp
.text:00000000000150A5                 push    rbx
.text:00000000000150A6                 sub     rsp, 8
.text:00000000000150AA                 cmp     edi, 10h
.text:00000000000150AD                 ja      short loc_15110
.text:00000000000150AF                 lea     rax, __re_error_msgid_idx
.text:00000000000150B6                 movsxd  rdi, edi
.text:00000000000150B9                 lea     rsi, __re_error_msgid ; "Success"
.text:00000000000150C0                 mov     rbp, rdx
.text:00000000000150C3                 mov     edx, 5          ; category
.text:00000000000150C8                 mov     r12, rcx
.text:00000000000150CB                 add     rsi, [rax+rdi*8] ; msgid
.text:00000000000150CF                 xor     edi, edi        ; domainname
.text:00000000000150D1                 call    _dcgettext
.text:00000000000150D6                 mov     rdi, rax        ; s
.text:00000000000150D9                 mov     r13, rax
.text:00000000000150DC                 call    _strlen
.text:00000000000150E1                 test    r12, r12
.text:00000000000150E4                 lea     rbx, [rax+1]
.text:00000000000150E8                 jz      short loc_150FD
.text:00000000000150EA                 cmp     rbx, r12
.text:00000000000150ED                 mov     rdx, rbx        ; n
.text:00000000000150F0                 ja      short loc_15118
.text:00000000000150F2
.text:00000000000150F2 loc_150F2:                              ; CODE XREF: rpl_regerror+83↓j
.text:00000000000150F2                 mov     rsi, r13        ; src
.text:00000000000150F5                 mov     rdi, rbp        ; dest
.text:00000000000150F8                 call    _memcpy
.text:00000000000150FD
.text:00000000000150FD loc_150FD:                              ; CODE XREF: rpl_regerror+48↑j
.text:00000000000150FD                 add     rsp, 8
.text:0000000000015101                 mov     rax, rbx
.text:0000000000015104                 pop     rbx
.text:0000000000015105                 pop     rbp
.text:0000000000015106                 pop     r12
.text:0000000000015108                 pop     r13
.text:000000000001510A                 retn
.text:000000000001510A ; ---------------------------------------------------------------------------
.text:000000000001510B                 align 10h
.text:0000000000015110
.text:0000000000015110 loc_15110:                              ; CODE XREF: rpl_regerror+D↑j
.text:0000000000015110                 call    _abort
.text:0000000000015110 ; ---------------------------------------------------------------------------
.text:0000000000015115                 align 8
.text:0000000000015118
.text:0000000000015118 loc_15118:                              ; CODE XREF: rpl_regerror+50↑j
.text:0000000000015118                 lea     rdx, [r12-1]
.text:000000000001511D                 mov     byte ptr [rbp+r12-1], 0
.text:0000000000015123                 jmp     short loc_150F2
.text:0000000000015123 ; } // starts at 150A0
.text:0000000000015123 rpl_regerror    endp
.text:0000000000015123
.text:0000000000015123 ; ---------------------------------------------------------------------------
.text:0000000000015125                 align 10h
.text:0000000000015130
.text:0000000000015130 ; =============== S U B R O U T I N E =======================================
.text:0000000000015130
.text:0000000000015130 ; Attributes: info_from_lumina
.text:0000000000015130
.text:0000000000015130                 public regfree
.text:0000000000015130 regfree         proc near               ; CODE XREF: docolon+13B↑p
.text:0000000000015130 ; __unwind {
.text:0000000000015130                 push    rbx
.text:0000000000015131                 mov     rbx, rdi
.text:0000000000015134                 mov     rdi, [rdi]      ; ptr
.text:0000000000015137                 test    rdi, rdi
.text:000000000001513A                 jz      short loc_15141
.text:000000000001513C                 call    free_dfa_content
.text:0000000000015141
.text:0000000000015141 loc_15141:                              ; CODE XREF: regfree+A↑j
.text:0000000000015141                 mov     rdi, [rbx+20h]  ; ptr
.text:0000000000015145                 mov     qword ptr [rbx], 0
.text:000000000001514C                 mov     qword ptr [rbx+8], 0
.text:0000000000015154                 call    _free
.text:0000000000015159                 mov     rdi, [rbx+28h]  ; ptr
.text:000000000001515D                 mov     qword ptr [rbx+20h], 0
.text:0000000000015165                 call    _free
.text:000000000001516A                 mov     qword ptr [rbx+28h], 0
.text:0000000000015172                 pop     rbx
.text:0000000000015173                 retn
.text:0000000000015173 ; } // starts at 15130
.text:0000000000015173 regfree         endp
.text:0000000000015173
.text:0000000000015173 ; ---------------------------------------------------------------------------
.text:0000000000015174                 align 20h
.text:0000000000015180
.text:0000000000015180 ; =============== S U B R O U T I N E =======================================
.text:0000000000015180
.text:0000000000015180
.text:0000000000015180                 public rpl_regexec
.text:0000000000015180 rpl_regexec     proc near
.text:0000000000015180
.text:0000000000015180 var_30          = qword ptr -30h
.text:0000000000015180
.text:0000000000015180 ; __unwind {
.text:0000000000015180                 test    r8d, 0FFFFFFF8h
.text:0000000000015187                 jnz     loc_15218
.text:000000000001518D                 push    r13
.text:000000000001518F                 push    r12
.text:0000000000015191                 mov     r13, rdx
.text:0000000000015194                 push    rbp
.text:0000000000015195                 push    rbx
.text:0000000000015196                 mov     r12, rcx
.text:0000000000015199                 mov     ebx, r8d
.text:000000000001519C                 mov     rbp, rdi
.text:000000000001519F                 sub     rsp, 18h
.text:00000000000151A3                 test    r8b, 4
.text:00000000000151A7                 jnz     short loc_151F8
.text:00000000000151A9                 mov     rdi, rsi        ; s
.text:00000000000151AC                 mov     [rsp+38h+var_30], rsi
.text:00000000000151B1                 call    _strlen
.text:00000000000151B6                 xor     ecx, ecx
.text:00000000000151B8                 test    byte ptr [rbp+38h], 10h
.text:00000000000151BC                 mov     rdx, rax
.text:00000000000151BF                 mov     rsi, [rsp+38h+var_30]
.text:00000000000151C4                 jz      short loc_15206
.text:00000000000151C6
.text:00000000000151C6 loc_151C6:                              ; CODE XREF: rpl_regexec+84↓j
.text:00000000000151C6                 sub     rsp, 8
.text:00000000000151CA                 push    rbx
.text:00000000000151CB                 push    0
.text:00000000000151CD                 push    0
.text:00000000000151CF
.text:00000000000151CF loc_151CF:                              ; CODE XREF: rpl_regexec+8F↓j
.text:00000000000151CF                 mov     rdi, rbp
.text:00000000000151D2                 mov     r9, rdx
.text:00000000000151D5                 mov     r8, rdx
.text:00000000000151D8                 call    re_search_internal
.text:00000000000151DD                 add     rsp, 20h
.text:00000000000151E1                 test    eax, eax
.text:00000000000151E3                 setnz   al
.text:00000000000151E6                 add     rsp, 18h
.text:00000000000151EA                 pop     rbx
.text:00000000000151EB                 movzx   eax, al
.text:00000000000151EE                 pop     rbp
.text:00000000000151EF                 pop     r12
.text:00000000000151F1                 pop     r13
.text:00000000000151F3                 retn
.text:00000000000151F3 ; ---------------------------------------------------------------------------
.text:00000000000151F4                 align 8
.text:00000000000151F8
.text:00000000000151F8 loc_151F8:                              ; CODE XREF: rpl_regexec+27↑j
.text:00000000000151F8                 test    byte ptr [rbp+38h], 10h
.text:00000000000151FC                 mov     rcx, [rcx]
.text:00000000000151FF                 mov     rdx, [r12+8]
.text:0000000000015204                 jnz     short loc_151C6
.text:0000000000015206
.text:0000000000015206 loc_15206:                              ; CODE XREF: rpl_regexec+44↑j
.text:0000000000015206                 sub     rsp, 8
.text:000000000001520A                 push    rbx
.text:000000000001520B                 push    r12
.text:000000000001520D                 push    r13
.text:000000000001520F                 jmp     short loc_151CF
.text:000000000001520F ; ---------------------------------------------------------------------------
.text:0000000000015211                 align 8
.text:0000000000015218
.text:0000000000015218 loc_15218:                              ; CODE XREF: rpl_regexec+7↑j
.text:0000000000015218                 mov     eax, 2
.text:000000000001521D                 retn
.text:000000000001521D ; } // starts at 15180
.text:000000000001521D rpl_regexec     endp
.text:000000000001521D
.text:000000000001521D ; ---------------------------------------------------------------------------
.text:000000000001521E                 align 20h
.text:0000000000015220
.text:0000000000015220 ; =============== S U B R O U T I N E =======================================
.text:0000000000015220
.text:0000000000015220
.text:0000000000015220                 public rpl_re_match
.text:0000000000015220 rpl_re_match    proc near               ; CODE XREF: docolon+CE↑p
.text:0000000000015220 ; __unwind {
.text:0000000000015220                 sub     rsp, 8
.text:0000000000015224                 mov     r9, rdx
.text:0000000000015227                 push    1
.text:0000000000015229                 push    r8
.text:000000000001522B                 xor     r8d, r8d
.text:000000000001522E                 call    re_search_stub
.text:0000000000015233                 add     rsp, 18h
.text:0000000000015237                 retn
.text:0000000000015237 ; } // starts at 15220
.text:0000000000015237 rpl_re_match    endp
.text:0000000000015237
.text:0000000000015237 ; ---------------------------------------------------------------------------
.text:0000000000015238                 align 20h
.text:0000000000015240
.text:0000000000015240 ; =============== S U B R O U T I N E =======================================
.text:0000000000015240
.text:0000000000015240
.text:0000000000015240                 public rpl_re_search
.text:0000000000015240 rpl_re_search   proc near
.text:0000000000015240 ; __unwind {
.text:0000000000015240                 sub     rsp, 8
.text:0000000000015244                 push    0
.text:0000000000015246                 push    r9
.text:0000000000015248                 mov     r9, rdx
.text:000000000001524B                 call    re_search_stub
.text:0000000000015250                 add     rsp, 18h
.text:0000000000015254                 retn
.text:0000000000015254 ; } // starts at 15240
.text:0000000000015254 rpl_re_search   endp
.text:0000000000015254
.text:0000000000015254 ; ---------------------------------------------------------------------------
.text:0000000000015255                 align 20h
.text:0000000000015260
.text:0000000000015260 ; =============== S U B R O U T I N E =======================================
.text:0000000000015260
.text:0000000000015260
.text:0000000000015260                 public rpl_re_match_2
.text:0000000000015260 rpl_re_match_2  proc near
.text:0000000000015260
.text:0000000000015260 arg_0           = qword ptr  8
.text:0000000000015260 arg_8           = qword ptr  10h
.text:0000000000015260
.text:0000000000015260 ; __unwind {
.text:0000000000015260                 sub     rsp, 8
.text:0000000000015264                 push    1
.text:0000000000015266                 push    [rsp+10h+arg_8]
.text:000000000001526A                 push    [rsp+18h+arg_0]
.text:000000000001526E                 push    0
.text:0000000000015270                 call    re_search_2_stub
.text:0000000000015275                 add     rsp, 28h
.text:0000000000015279                 retn
.text:0000000000015279 ; } // starts at 15260
.text:0000000000015279 rpl_re_match_2  endp
.text:0000000000015279
.text:0000000000015279 ; ---------------------------------------------------------------------------
.text:000000000001527A                 align 20h
.text:0000000000015280
.text:0000000000015280 ; =============== S U B R O U T I N E =======================================
.text:0000000000015280
.text:0000000000015280
.text:0000000000015280                 public rpl_re_search_2
.text:0000000000015280 rpl_re_search_2 proc near
.text:0000000000015280
.text:0000000000015280 arg_0           = qword ptr  8
.text:0000000000015280 arg_8           = qword ptr  10h
.text:0000000000015280 arg_10          = qword ptr  18h
.text:0000000000015280
.text:0000000000015280 ; __unwind {
.text:0000000000015280                 sub     rsp, 8
.text:0000000000015284                 push    0
.text:0000000000015286                 push    [rsp+10h+arg_10]
.text:000000000001528A                 push    [rsp+18h+arg_8]
.text:000000000001528E                 push    [rsp+20h+arg_0]
.text:0000000000015292                 call    re_search_2_stub
.text:0000000000015297                 add     rsp, 28h
.text:000000000001529B                 retn
.text:000000000001529B ; } // starts at 15280
.text:000000000001529B rpl_re_search_2 endp
.text:000000000001529B
.text:000000000001529B ; ---------------------------------------------------------------------------
.text:000000000001529C                 align 20h
.text:00000000000152A0
.text:00000000000152A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000152A0
.text:00000000000152A0
.text:00000000000152A0                 public rpl_re_set_registers
.text:00000000000152A0 rpl_re_set_registers proc near
.text:00000000000152A0 ; __unwind {
.text:00000000000152A0                 test    rdx, rdx
.text:00000000000152A3                 jnz     short loc_152C8
.text:00000000000152A5                 and     byte ptr [rdi+38h], 0F9h
.text:00000000000152A9                 mov     qword ptr [rsi], 0
.text:00000000000152B0                 mov     qword ptr [rsi+10h], 0
.text:00000000000152B8                 mov     qword ptr [rsi+8], 0
.text:00000000000152C0                 retn
.text:00000000000152C0 ; ---------------------------------------------------------------------------
.text:00000000000152C1                 align 8
.text:00000000000152C8
.text:00000000000152C8 loc_152C8:                              ; CODE XREF: rpl_re_set_registers+3↑j
.text:00000000000152C8                 movzx   eax, byte ptr [rdi+38h]
.text:00000000000152CC                 and     eax, 0FFFFFFF9h
.text:00000000000152CF                 or      eax, 2
.text:00000000000152D2                 mov     [rdi+38h], al
.text:00000000000152D5                 mov     [rsi], rdx
.text:00000000000152D8                 mov     [rsi+8], rcx
.text:00000000000152DC                 mov     [rsi+10h], r8
.text:00000000000152E0                 retn
.text:00000000000152E0 ; } // starts at 152A0
.text:00000000000152E0 rpl_re_set_registers endp
.text:00000000000152E0
.text:00000000000152E0 ; ---------------------------------------------------------------------------
.text:00000000000152E1                 align 10h
.text:00000000000152F0
.text:00000000000152F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000152F0
.text:00000000000152F0 ; Attributes: info_from_lumina
.text:00000000000152F0
.text:00000000000152F0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000152F0                 public close_stream
.text:00000000000152F0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000152F0                                         ; close_stdout+33↑p
.text:00000000000152F0 ; __unwind {
.text:00000000000152F0                 push    r12
.text:00000000000152F2                 push    rbp
.text:00000000000152F3                 mov     rbp, rdi
.text:00000000000152F6                 push    rbx
.text:00000000000152F7                 call    ___fpending
.text:00000000000152FC                 mov     ebx, [rbp+0]
.text:00000000000152FF                 mov     rdi, rbp        ; stream
.text:0000000000015302                 mov     r12, rax
.text:0000000000015305                 call    rpl_fclose
.text:000000000001530A                 and     ebx, 20h
.text:000000000001530D                 test    ebx, ebx
.text:000000000001530F                 jnz     short loc_15328
.text:0000000000015311                 test    eax, eax
.text:0000000000015313                 jz      short loc_1531F
.text:0000000000015315                 test    r12, r12
.text:0000000000015318                 mov     eax, 0FFFFFFFFh
.text:000000000001531D                 jz      short loc_15358
.text:000000000001531F
.text:000000000001531F loc_1531F:                              ; CODE XREF: close_stream+23↑j
.text:000000000001531F                 pop     rbx
.text:0000000000015320                 pop     rbp
.text:0000000000015321                 pop     r12
.text:0000000000015323                 retn
.text:0000000000015323 ; ---------------------------------------------------------------------------
.text:0000000000015324                 align 8
.text:0000000000015328
.text:0000000000015328 loc_15328:                              ; CODE XREF: close_stream+1F↑j
.text:0000000000015328                 test    eax, eax
.text:000000000001532A                 jnz     short loc_15348
.text:000000000001532C                 call    ___errno_location
.text:0000000000015331                 mov     dword ptr [rax], 0
.text:0000000000015337                 mov     eax, 0FFFFFFFFh
.text:000000000001533C                 pop     rbx
.text:000000000001533D                 pop     rbp
.text:000000000001533E                 pop     r12
.text:0000000000015340                 retn
.text:0000000000015340 ; ---------------------------------------------------------------------------
.text:0000000000015341                 align 8
.text:0000000000015348
.text:0000000000015348 loc_15348:                              ; CODE XREF: close_stream+3A↑j
.text:0000000000015348                 pop     rbx
.text:0000000000015349                 mov     eax, 0FFFFFFFFh
.text:000000000001534E                 pop     rbp
.text:000000000001534F                 pop     r12
.text:0000000000015351                 retn
.text:0000000000015351 ; ---------------------------------------------------------------------------
.text:0000000000015352                 align 8
.text:0000000000015358
.text:0000000000015358 loc_15358:                              ; CODE XREF: close_stream+2D↑j
.text:0000000000015358                 call    ___errno_location
.text:000000000001535D                 cmp     dword ptr [rax], 9
.text:0000000000015360                 pop     rbx
.text:0000000000015361                 pop     rbp
.text:0000000000015362                 pop     r12
.text:0000000000015364                 setnz   al
.text:0000000000015367                 movzx   eax, al
.text:000000000001536A                 neg     eax
.text:000000000001536C                 retn
.text:000000000001536C ; } // starts at 152F0
.text:000000000001536C close_stream    endp
.text:000000000001536C
.text:000000000001536C ; ---------------------------------------------------------------------------
.text:000000000001536D                 align 10h
.text:0000000000015370
.text:0000000000015370 ; =============== S U B R O U T I N E =======================================
.text:0000000000015370
.text:0000000000015370
.text:0000000000015370                 public hard_locale
.text:0000000000015370 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000015370 ; __unwind {
.text:0000000000015370                 sub     rsp, 8
.text:0000000000015374                 xor     esi, esi        ; locale
.text:0000000000015376                 call    _setlocale
.text:000000000001537B                 mov     rdx, rax
.text:000000000001537E                 mov     eax, 1
.text:0000000000015383                 test    rdx, rdx
.text:0000000000015386                 jz      short loc_153A5
.text:0000000000015388                 lea     rdi, unk_172F0
.text:000000000001538F                 mov     ecx, 2
.text:0000000000015394                 mov     rsi, rdx
.text:0000000000015397                 repe cmpsb
.text:0000000000015399                 setnbe  cl
.text:000000000001539C                 sbb     cl, 0
.text:000000000001539F                 xor     eax, eax
.text:00000000000153A1                 test    cl, cl
.text:00000000000153A3                 jnz     short loc_153B0
.text:00000000000153A5
.text:00000000000153A5 loc_153A5:                              ; CODE XREF: hard_locale+16↑j
.text:00000000000153A5                 add     rsp, 8
.text:00000000000153A9                 retn
.text:00000000000153A9 ; ---------------------------------------------------------------------------
.text:00000000000153AA                 align 10h
.text:00000000000153B0
.text:00000000000153B0 loc_153B0:                              ; CODE XREF: hard_locale+33↑j
.text:00000000000153B0                 lea     rdi, aPosix     ; "POSIX"
.text:00000000000153B7                 mov     ecx, 6
.text:00000000000153BC                 mov     rsi, rdx
.text:00000000000153BF                 repe cmpsb
.text:00000000000153C1                 setnbe  al
.text:00000000000153C4                 sbb     al, 0
.text:00000000000153C6                 test    al, al
.text:00000000000153C8                 setnz   al
.text:00000000000153CB                 add     rsp, 8
.text:00000000000153CF                 retn
.text:00000000000153CF ; } // starts at 15370
.text:00000000000153CF hard_locale     endp
.text:00000000000153CF
.text:00000000000153D0
.text:00000000000153D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000153D0
.text:00000000000153D0
.text:00000000000153D0                 public locale_charset
.text:00000000000153D0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:00000000000153D0 ; __unwind {
.text:00000000000153D0                 sub     rsp, 8
.text:00000000000153D4                 mov     edi, 0Eh        ; item
.text:00000000000153D9                 call    _nl_langinfo
.text:00000000000153DE                 test    rax, rax
.text:00000000000153E1                 jz      short loc_15400
.text:00000000000153E3                 cmp     byte ptr [rax], 0
.text:00000000000153E6                 lea     rdx, aAscii     ; "ASCII"
.text:00000000000153ED                 cmovz   rax, rdx
.text:00000000000153F1                 add     rsp, 8
.text:00000000000153F5                 retn
.text:00000000000153F5 ; ---------------------------------------------------------------------------
.text:00000000000153F6                 align 20h
.text:0000000000015400
.text:0000000000015400 loc_15400:                              ; CODE XREF: locale_charset+11↑j
.text:0000000000015400                 lea     rax, aAscii     ; "ASCII"
.text:0000000000015407                 add     rsp, 8
.text:000000000001540B                 retn
.text:000000000001540B ; } // starts at 153D0
.text:000000000001540B locale_charset  endp
.text:000000000001540B
.text:000000000001540B ; ---------------------------------------------------------------------------
.text:000000000001540C                 align 10h
.text:0000000000015410
.text:0000000000015410 ; =============== S U B R O U T I N E =======================================
.text:0000000000015410
.text:0000000000015410 ; Attributes: info_from_lumina
.text:0000000000015410
.text:0000000000015410 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000015410                 public rpl_fclose
.text:0000000000015410 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000015410 ; __unwind {
.text:0000000000015410                 push    r12
.text:0000000000015412                 push    rbp
.text:0000000000015413                 push    rbx
.text:0000000000015414                 mov     rbx, rdi
.text:0000000000015417                 call    _fileno
.text:000000000001541C                 test    eax, eax
.text:000000000001541E                 mov     rdi, rbx        ; fp
.text:0000000000015421                 js      short loc_15477
.text:0000000000015423                 call    ___freading
.text:0000000000015428                 test    eax, eax
.text:000000000001542A                 jnz     short loc_15458
.text:000000000001542C
.text:000000000001542C loc_1542C:                              ; CODE XREF: rpl_fclose+62↓j
.text:000000000001542C                 mov     rdi, rbx        ; stream
.text:000000000001542F                 call    rpl_fflush
.text:0000000000015434                 test    eax, eax
.text:0000000000015436                 jz      short loc_15474
.text:0000000000015438                 call    ___errno_location
.text:000000000001543D                 mov     r12d, [rax]
.text:0000000000015440                 mov     rdi, rbx        ; stream
.text:0000000000015443                 mov     rbp, rax
.text:0000000000015446                 call    _fclose
.text:000000000001544B                 test    r12d, r12d
.text:000000000001544E                 jnz     short loc_15480
.text:0000000000015450
.text:0000000000015450 loc_15450:                              ; CODE XREF: rpl_fclose+79↓j
.text:0000000000015450                 pop     rbx
.text:0000000000015451                 pop     rbp
.text:0000000000015452                 pop     r12
.text:0000000000015454                 retn
.text:0000000000015454 ; ---------------------------------------------------------------------------
.text:0000000000015455                 align 8
.text:0000000000015458
.text:0000000000015458 loc_15458:                              ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000015458                 mov     rdi, rbx        ; stream
.text:000000000001545B                 call    _fileno
.text:0000000000015460                 xor     esi, esi        ; offset
.text:0000000000015462                 mov     edx, 1          ; whence
.text:0000000000015467                 mov     edi, eax        ; fd
.text:0000000000015469                 call    _lseek
.text:000000000001546E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015472                 jnz     short loc_1542C
.text:0000000000015474
.text:0000000000015474 loc_15474:                              ; CODE XREF: rpl_fclose+26↑j
.text:0000000000015474                 mov     rdi, rbx        ; stream
.text:0000000000015477
.text:0000000000015477 loc_15477:                              ; CODE XREF: rpl_fclose+11↑j
.text:0000000000015477                 pop     rbx
.text:0000000000015478                 pop     rbp
.text:0000000000015479                 pop     r12
.text:000000000001547B                 jmp     _fclose
.text:0000000000015480 ; ---------------------------------------------------------------------------
.text:0000000000015480
.text:0000000000015480 loc_15480:                              ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000015480                 mov     [rbp+0], r12d
.text:0000000000015484                 mov     eax, 0FFFFFFFFh
.text:0000000000015489                 jmp     short loc_15450
.text:0000000000015489 ; } // starts at 15410
.text:0000000000015489 rpl_fclose      endp
.text:0000000000015489
.text:0000000000015489 ; ---------------------------------------------------------------------------
.text:000000000001548B                 align 10h
.text:0000000000015490
.text:0000000000015490 ; =============== S U B R O U T I N E =======================================
.text:0000000000015490
.text:0000000000015490 ; Attributes: info_from_lumina
.text:0000000000015490
.text:0000000000015490 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000015490                 public rpl_fflush
.text:0000000000015490 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000015490 ; __unwind {
.text:0000000000015490                 test    rdi, rdi
.text:0000000000015493                 push    rbx
.text:0000000000015494                 mov     rbx, rdi
.text:0000000000015497                 jz      short loc_154AA
.text:0000000000015499                 call    ___freading
.text:000000000001549E                 test    eax, eax
.text:00000000000154A0                 jz      short loc_154AA
.text:00000000000154A2                 test    dword ptr [rbx], 100h
.text:00000000000154A8                 jnz     short loc_154B8
.text:00000000000154AA
.text:00000000000154AA loc_154AA:                              ; CODE XREF: rpl_fflush+7↑j
.text:00000000000154AA                                         ; rpl_fflush+10↑j
.text:00000000000154AA                 mov     rdi, rbx        ; stream
.text:00000000000154AD                 pop     rbx
.text:00000000000154AE                 jmp     _fflush
.text:00000000000154AE ; ---------------------------------------------------------------------------
.text:00000000000154B3                 align 8
.text:00000000000154B8
.text:00000000000154B8 loc_154B8:                              ; CODE XREF: rpl_fflush+18↑j
.text:00000000000154B8                 mov     rdi, rbx
.text:00000000000154BB                 mov     edx, 1
.text:00000000000154C0                 xor     esi, esi
.text:00000000000154C2                 call    rpl_fseeko
.text:00000000000154C7                 mov     rdi, rbx        ; stream
.text:00000000000154CA                 pop     rbx
.text:00000000000154CB                 jmp     _fflush
.text:00000000000154CB ; } // starts at 15490
.text:00000000000154CB rpl_fflush      endp
.text:00000000000154CB
.text:00000000000154D0
.text:00000000000154D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000154D0
.text:00000000000154D0 ; Attributes: info_from_lumina
.text:00000000000154D0
.text:00000000000154D0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:00000000000154D0                 public rpl_fseeko
.text:00000000000154D0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:00000000000154D0 ; __unwind {
.text:00000000000154D0                 mov     rax, [rdi+8]
.text:00000000000154D4                 cmp     [rdi+10h], rax
.text:00000000000154D8                 jz      short loc_154E0
.text:00000000000154DA
.text:00000000000154DA loc_154DA:                              ; CODE XREF: rpl_fseeko+18↓j
.text:00000000000154DA                                         ; rpl_fseeko+1F↓j
.text:00000000000154DA                 jmp     _fseeko
.text:00000000000154DA ; ---------------------------------------------------------------------------
.text:00000000000154DF                 align 20h
.text:00000000000154E0
.text:00000000000154E0 loc_154E0:                              ; CODE XREF: rpl_fseeko+8↑j
.text:00000000000154E0                 mov     rax, [rdi+20h]
.text:00000000000154E4                 cmp     [rdi+28h], rax
.text:00000000000154E8                 jnz     short loc_154DA
.text:00000000000154EA                 cmp     qword ptr [rdi+48h], 0
.text:00000000000154EF                 jnz     short loc_154DA
.text:00000000000154F1                 push    r12
.text:00000000000154F3                 push    rbp
.text:00000000000154F4                 mov     r12d, edx
.text:00000000000154F7                 push    rbx
.text:00000000000154F8                 mov     rbp, rsi
.text:00000000000154FB                 mov     rbx, rdi
.text:00000000000154FE                 call    _fileno
.text:0000000000015503                 mov     edx, r12d       ; whence
.text:0000000000015506                 mov     rsi, rbp        ; offset
.text:0000000000015509                 mov     edi, eax        ; fd
.text:000000000001550B                 call    _lseek
.text:0000000000015510                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000015514                 jz      short loc_15522
.text:0000000000015516                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000015519                 mov     [rbx+90h], rax
.text:0000000000015520                 xor     eax, eax
.text:0000000000015522
.text:0000000000015522 loc_15522:                              ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000015522                 pop     rbx
.text:0000000000015523                 pop     rbp
.text:0000000000015524                 pop     r12
.text:0000000000015526                 retn
.text:0000000000015526 ; } // starts at 154D0
.text:0000000000015526 rpl_fseeko      endp
.text:0000000000015526
.text:0000000000015526 ; ---------------------------------------------------------------------------
.text:0000000000015527                 align 10h
.text:0000000000015530
.text:0000000000015530 ; =============== S U B R O U T I N E =======================================
.text:0000000000015530
.text:0000000000015530 ; Attributes: info_from_lumina
.text:0000000000015530
.text:0000000000015530 ; void _libc_csu_init(void)
.text:0000000000015530                 public __libc_csu_init
.text:0000000000015530 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000015530 ; __unwind {
.text:0000000000015530                 push    r15
.text:0000000000015532                 push    r14
.text:0000000000015534                 mov     r15, rdx
.text:0000000000015537                 push    r13
.text:0000000000015539                 push    r12
.text:000000000001553B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000015542                 push    rbp
.text:0000000000015543                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:000000000001554A                 push    rbx
.text:000000000001554B                 mov     r13d, edi
.text:000000000001554E                 mov     r14, rsi
.text:0000000000015551                 sub     rbp, r12
.text:0000000000015554                 sub     rsp, 8
.text:0000000000015558                 sar     rbp, 3
.text:000000000001555C                 call    _init_proc
.text:0000000000015561                 test    rbp, rbp
.text:0000000000015564                 jz      short loc_15586
.text:0000000000015566                 xor     ebx, ebx
.text:0000000000015568                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000015570
.text:0000000000015570 loc_15570:                              ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000015570                 mov     rdx, r15
.text:0000000000015573                 mov     rsi, r14
.text:0000000000015576                 mov     edi, r13d
.text:0000000000015579                 call    ds:(__frame_dummy_init_array_entry - 21AAB0h)[r12+rbx*8]
.text:000000000001557D                 add     rbx, 1
.text:0000000000015581                 cmp     rbp, rbx
.text:0000000000015584                 jnz     short loc_15570
.text:0000000000015586
.text:0000000000015586 loc_15586:                              ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000015586                 add     rsp, 8
.text:000000000001558A                 pop     rbx
.text:000000000001558B                 pop     rbp
.text:000000000001558C                 pop     r12
.text:000000000001558E                 pop     r13
.text:0000000000015590                 pop     r14
.text:0000000000015592                 pop     r15
.text:0000000000015594                 retn
.text:0000000000015594 ; } // starts at 15530
.text:0000000000015594 __libc_csu_init endp
.text:0000000000015594
.text:0000000000015594 ; ---------------------------------------------------------------------------
.text:0000000000015595                 align 20h
.text:00000000000155A0
.text:00000000000155A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000155A0
.text:00000000000155A0
.text:00000000000155A0 ; void _libc_csu_fini(void)
.text:00000000000155A0                 public __libc_csu_fini
.text:00000000000155A0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:00000000000155A0 ; __unwind {
.text:00000000000155A0                 rep retn
.text:00000000000155A0 ; } // starts at 155A0
.text:00000000000155A0 __libc_csu_fini endp
.text:00000000000155A0
.text:00000000000155A0 ; ---------------------------------------------------------------------------
.text:00000000000155A2                 align 10h
.text:00000000000155B0
.text:00000000000155B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000155B0
.text:00000000000155B0
.text:00000000000155B0 atexit          proc near               ; CODE XREF: main+54↑p
.text:00000000000155B0 ; __unwind {
.text:00000000000155B0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:00000000000155B7                 xor     esi, esi        ; obj
.text:00000000000155B9                 jmp     ___cxa_atexit
.text:00000000000155B9 ; } // starts at 155B0
.text:00000000000155B9 atexit          endp
.text:00000000000155B9
.text:00000000000155B9 _text           ends
.text:00000000000155B9
LOAD:00000000000155BE ; ===========================================================================
LOAD:00000000000155BE
LOAD:00000000000155BE ; Segment type: Pure code
LOAD:00000000000155BE ; Segment permissions: Read/Execute
LOAD:00000000000155BE LOAD            segment byte public 'CODE' use64
LOAD:00000000000155BE                 assume cs:LOAD
LOAD:00000000000155BE                 ;org 155BEh
LOAD:00000000000155BE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000155BE                 align 20h
LOAD:00000000000155BE LOAD            ends
LOAD:00000000000155BE
.fini:00000000000155C0 ; ===========================================================================
.fini:00000000000155C0
.fini:00000000000155C0 ; Segment type: Pure code
.fini:00000000000155C0 ; Segment permissions: Read/Execute
.fini:00000000000155C0 _fini           segment dword public 'CODE' use64
.fini:00000000000155C0                 assume cs:_fini
.fini:00000000000155C0                 ;org 155C0h
.fini:00000000000155C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00000000000155C0
.fini:00000000000155C0 ; =============== S U B R O U T I N E =======================================
.fini:00000000000155C0
.fini:00000000000155C0
.fini:00000000000155C0                 public _term_proc
.fini:00000000000155C0 _term_proc      proc near               ; DATA XREF: LOAD:0000000000000B38↑o
.fini:00000000000155C0                 sub     rsp, 8          ; _fini
.fini:00000000000155C4                 add     rsp, 8
.fini:00000000000155C8                 retn
.fini:00000000000155C8 _term_proc      endp
.fini:00000000000155C8
.fini:00000000000155C8 _fini           ends
.fini:00000000000155C8
LOAD:00000000000155C9 ; ===========================================================================
LOAD:00000000000155C9
LOAD:00000000000155C9 ; Segment type: Pure code
LOAD:00000000000155C9 ; Segment permissions: Read/Execute
LOAD:00000000000155C9 LOAD            segment byte public 'CODE' use64
LOAD:00000000000155C9                 assume cs:LOAD
LOAD:00000000000155C9                 ;org 155C9h
LOAD:00000000000155C9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000155C9                 align 20h
LOAD:00000000000155C9 LOAD            ends
LOAD:00000000000155C9
.rodata:00000000000155E0 ; ===========================================================================
.rodata:00000000000155E0
.rodata:00000000000155E0 ; Segment type: Pure data
.rodata:00000000000155E0 ; Segment permissions: Read
.rodata:00000000000155E0 _rodata         segment align_32 public 'CONST' use64
.rodata:00000000000155E0                 assume cs:_rodata
.rodata:00000000000155E0                 ;org 155E0h
.rodata:00000000000155E0                 public _IO_stdin_used
.rodata:00000000000155E0 _IO_stdin_used  db    1
.rodata:00000000000155E1                 db    0
.rodata:00000000000155E2                 db    2
.rodata:00000000000155E3                 db    0
.rodata:00000000000155E4                 db    0
.rodata:00000000000155E5                 db    0
.rodata:00000000000155E6                 db    0
.rodata:00000000000155E7                 db    0
.rodata:00000000000155E8 ; const char aSyntaxErrorMis[]
.rodata:00000000000155E8 aSyntaxErrorMis db 'syntax error: missing argument after %s',0
.rodata:00000000000155E8                                         ; DATA XREF: require_more_args+20↑o
.rodata:0000000000015610 ; const char file[]
.rodata:0000000000015610 file            db '../coreutils-8.31/lib/mbuiter.h',0
.rodata:0000000000015610                                         ; DATA XREF: mbuiter_multi_next_part_2+7↑o
.rodata:0000000000015610                                         ; docolon+42E↑o ...
.rodata:0000000000015630 ; const char aTrySHelpForMor[]
.rodata:0000000000015630 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000015630                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000015657                 align 8
.rodata:0000000000015658 ; const char aUsageSExpressi[]
.rodata:0000000000015658 aUsageSExpressi db 'Usage: %s EXPRESSION',0Ah
.rodata:0000000000015658                                         ; DATA XREF: usage:loc_238D↑o
.rodata:0000000000015658                 db '  or:  %s OPTION',0Ah,0
.rodata:000000000001567F                 align 20h
.rodata:0000000000015680 ; const char aHelpDisplayThi[]
.rodata:0000000000015680 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000015680                                         ; DATA XREF: usage+A7↑o
.rodata:00000000000156AD                 align 10h
.rodata:00000000000156B0 ; const char aVersionOutputV[]
.rodata:00000000000156B0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:00000000000156B0                                         ; DATA XREF: usage+CC↑o
.rodata:00000000000156E6                 align 8
.rodata:00000000000156E8 ; const char aPrintTheValueO[]
.rodata:00000000000156E8 aPrintTheValueO db 0Ah                  ; DATA XREF: usage+F1↑o
.rodata:00000000000156E8                 db 'Print the value of EXPRESSION to standard output.  A blank line b'
.rodata:00000000000156E8                 db 'elow',0Ah
.rodata:00000000000156E8                 db 'separates increasing precedence groups.  EXPRESSION may be:',0Ah
.rodata:00000000000156E8                 db 0Ah
.rodata:00000000000156E8                 db '  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise A'
.rodata:00000000000156E8                 db 'RG2',0Ah
.rodata:00000000000156E8                 db 0Ah
.rodata:00000000000156E8                 db '  ARG1 & ARG2       ARG1 if neither argument is null or 0, otherw'
.rodata:00000000000156E8                 db 'ise 0',0Ah,0
.rodata:00000000000157FA                 align 20h
.rodata:0000000000015800 ; const char aArg1Arg2Arg1Is[]
.rodata:0000000000015800 aArg1Arg2Arg1Is db 0Ah                  ; DATA XREF: usage+116↑o
.rodata:0000000000015800                 db '  ARG1 < ARG2       ARG1 is less than ARG2',0Ah
.rodata:0000000000015800                 db '  ARG1 <= ARG2      ARG1 is less than or equal to ARG2',0Ah
.rodata:0000000000015800                 db '  ARG1 = ARG2       ARG1 is equal to ARG2',0Ah
.rodata:0000000000015800                 db '  ARG1 != ARG2      ARG1 is unequal to ARG2',0Ah
.rodata:0000000000015800                 db '  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2',0Ah
.rodata:0000000000015800                 db '  ARG1 > ARG2       ARG1 is greater than ARG2',0Ah,0
.rodata:0000000000015922                 align 8
.rodata:0000000000015928 ; const char aArg1Arg2Arithm[]
.rodata:0000000000015928 aArg1Arg2Arithm db 0Ah                  ; DATA XREF: usage+13B↑o
.rodata:0000000000015928                 db '  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2',0Ah
.rodata:0000000000015928                 db '  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2',0Ah,0
.rodata:0000000000015999                 align 20h
.rodata:00000000000159A0 ; const char aArg1Arg2Arithm_0[]
.rodata:00000000000159A0 aArg1Arg2Arithm_0 db 0Ah                ; DATA XREF: usage+160↑o
.rodata:00000000000159A0                 db '  ARG1 * ARG2       arithmetic product of ARG1 and ARG2',0Ah
.rodata:00000000000159A0                 db '  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2',0Ah
.rodata:00000000000159A0                 db '  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2',0Ah
.rodata:00000000000159A0                 db 0
.rodata:0000000000015A5B                 align 20h
.rodata:0000000000015A60 ; const char aStringRegexpAn[]
.rodata:0000000000015A60 aStringRegexpAn db 0Ah                  ; DATA XREF: usage+185↑o
.rodata:0000000000015A60                 db '  STRING : REGEXP   anchored pattern match of REGEXP in STRING',0Ah
.rodata:0000000000015A60                 db 0Ah
.rodata:0000000000015A60                 db '  match STRING REGEXP        same as STRING : REGEXP',0Ah
.rodata:0000000000015A60                 db '  substr STRING POS LENGTH   substring of STRING, POS counted fro'
.rodata:0000000000015A60                 db 'm 1',0Ah
.rodata:0000000000015A60                 db '  index STRING CHARS         index in STRING where any CHARS is f'
.rodata:0000000000015A60                 db 'ound, or 0',0Ah
.rodata:0000000000015A60                 db '  length STRING              length of STRING',0Ah,0
.rodata:0000000000015B96                 align 8
.rodata:0000000000015B98 ; const char aTokenInterpret[]
.rodata:0000000000015B98 aTokenInterpret db '  + TOKEN                    interpret TOKEN as a string, even if'
.rodata:0000000000015B98                                         ; DATA XREF: usage+1AA↑o
.rodata:0000000000015B98                 db ' it is a',0Ah
.rodata:0000000000015B98                 db '                               keyword like ',27h,'match',27h,' o'
.rodata:0000000000015B98                 db 'r an operator like ',27h,'/',27h,0Ah
.rodata:0000000000015B98                 db 0Ah
.rodata:0000000000015B98                 db '  ( EXPRESSION )             value of EXPRESSION',0Ah,0
.rodata:0000000000015C61                 align 8
.rodata:0000000000015C68 ; const char aBewareThatMany[]
.rodata:0000000000015C68 aBewareThatMany db 0Ah                  ; DATA XREF: usage+1CF↑o
.rodata:0000000000015C68                 db 'Beware that many operators need to be escaped or quoted for shell'
.rodata:0000000000015C68                 db 's.',0Ah
.rodata:0000000000015C68                 db 'Comparisons are arithmetic if both ARGs are numbers, else lexicog'
.rodata:0000000000015C68                 db 'raphical.',0Ah
.rodata:0000000000015C68                 db 'Pattern matches return the string matched between \( and \) or nu'
.rodata:0000000000015C68                 db 'll; if',0Ah
.rodata:0000000000015C68                 db '\( and \) are not used, they return the number of characters matc'
.rodata:0000000000015C68                 db 'hed or 0.',0Ah,0
.rodata:0000000000015D8C                 align 10h
.rodata:0000000000015D90 ; const char aExitStatusIs0I[]
.rodata:0000000000015D90 aExitStatusIs0I db 0Ah                  ; DATA XREF: usage+1F4↑o
.rodata:0000000000015D90                 db 'Exit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRES'
.rodata:0000000000015D90                 db 'SION is null',0Ah
.rodata:0000000000015D90                 db 'or 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error'
.rodata:0000000000015D90                 db ' occurred.',0Ah,0
.rodata:0000000000015E2C                 align 10h
.rodata:0000000000015E30 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000015E30                                         ; DATA XREF: usage+2EF↑o
.rodata:0000000000015E30                                         ; usage+34F↑o ...
.rodata:0000000000015E58 ; const char aReportAnyTrans[]
.rodata:0000000000015E58 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000015E58                                         ; DATA XREF: usage+3B5↑o
.rodata:0000000000015E58                 db 'am/>',0Ah,0
.rodata:0000000000015E9F                 align 20h
.rodata:0000000000015EA0 ; const char aOrAvailableLoc[]
.rodata:0000000000015EA0 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000015EA0                                         ; DATA XREF: usage:loc_26AA↑o
.rodata:0000000000015ED3                 align 8
.rodata:0000000000015ED8 ; const char aErrorInRegular[]
.rodata:0000000000015ED8 aErrorInRegular db 'error in regular expression matcher',0
.rodata:0000000000015ED8                                         ; DATA XREF: docolon:loc_2BF6↑o
.rodata:0000000000015EFC                 align 20h
.rodata:0000000000015F00 ; const char aSyntaxErrorExp_0[]
.rodata:0000000000015F00 aSyntaxErrorExp_0 db 'syntax error: expecting ',27h,')',27h,' after %s',0
.rodata:0000000000015F00                                         ; DATA XREF: eval6+B78↑o
.rodata:0000000000015F25                 align 8
.rodata:0000000000015F28 ; const char aSyntaxErrorExp[]
.rodata:0000000000015F28 aSyntaxErrorExp db 'syntax error: expecting ',27h,')',27h,' instead of %s',0
.rodata:0000000000015F28                                         ; DATA XREF: eval6+EC↑o
.rodata:0000000000015F52                 align 8
.rodata:0000000000015F58 ; const char msgid[]
.rodata:0000000000015F58 msgid           db 'syntax error: unexpected argument %s',0
.rodata:0000000000015F58                                         ; DATA XREF: main+166↑o
.rodata:0000000000015F7D ; const char assertion[]
.rodata:0000000000015F7D assertion       db 'iter->cur.wc == 0',0
.rodata:0000000000015F7D                                         ; DATA XREF: mbuiter_multi_next_part_2+E↑o
.rodata:0000000000015F7D                                         ; mbschr+294↑o ...
.rodata:0000000000015F8F aExpr           db 'expr',0             ; DATA XREF: main+77↑o
.rodata:0000000000015F8F                                         ; usage+20D↑o ...
.rodata:0000000000015F94 asc_15F94       db '[',0                ; DATA XREF: usage+219↑o
.rodata:0000000000015F96 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+240↑o
.rodata:0000000000015FA6 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000015FA6                                         ; DATA XREF: usage+270↑o
.rodata:0000000000015FA6                                         ; usage+368↑o ...
.rodata:0000000000015FBC aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+281↑o
.rodata:0000000000015FC6 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+28D↑o
.rodata:0000000000015FD5 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+220↑o
.rodata:0000000000015FDF aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+24C↑o
.rodata:0000000000015FE9 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+264↑o
.rodata:0000000000015FF3 ; const char aSOnlineHelpS[]
.rodata:0000000000015FF3 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+2DA↑o
.rodata:0000000000015FF3                 db '%s online help: <%s>',0Ah,0
.rodata:000000000001600A unk_1600A       db  47h ; G             ; DATA XREF: main+70↑o
.rodata:000000000001600A                                         ; usage+2F6↑o ...
.rodata:000000000001600B                 db  4Eh ; N
.rodata:000000000001600C                 db  55h ; U
.rodata:000000000001600D                 db  20h
.rodata:000000000001600E ; const char domainname[]
.rodata:000000000001600E domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:000000000001600E                                         ; main+37↑o ...
.rodata:0000000000016018 ; const char aEn[]
.rodata:0000000000016018 aEn             db 'en_',0              ; DATA XREF: usage+31D↑o
.rodata:0000000000016018                                         ; usage+41A↑o ...
.rodata:000000000001601C ; const char aFullDocumentat[]
.rodata:000000000001601C aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:000000000001601C                                         ; DATA XREF: usage:loc_2665↑o
.rodata:000000000001601C                                         ; usage:loc_2766↑o
.rodata:0000000000016037 ; const char aMbsinitIterSta[]
.rodata:0000000000016037 aMbsinitIterSta db 'mbsinit (&iter->state)',0
.rodata:0000000000016037                                         ; DATA XREF: docolon+435↑o
.rodata:0000000000016037                                         ; eval6+B33↑o ...
.rodata:000000000001604E ; const char aIterCurPtr0[]
.rodata:000000000001604E aIterCurPtr0    db '*iter->cur.ptr == ',27h,'\0',27h,0
.rodata:000000000001604E                                         ; DATA XREF: docolon+489↑o
.rodata:000000000001604E                                         ; eval6+B57↑o ...
.rodata:0000000000016065 ; const char shortopts[]
.rodata:0000000000016065 shortopts       db '+',0                ; DATA XREF: eval6+C↑o
.rodata:0000000000016065                                         ; eval3:loc_3A6D↑o ...
.rodata:0000000000016067 ; const char aLength[]
.rodata:0000000000016067 aLength         db 'length',0           ; DATA XREF: eval6+3A↑o
.rodata:000000000001606E ; const char aMatch[]
.rodata:000000000001606E aMatch          db 'match',0            ; DATA XREF: eval6+52↑o
.rodata:0000000000016074 ; const char aIndex[]
.rodata:0000000000016074 aIndex          db 'index',0            ; DATA XREF: eval6+66↑o
.rodata:000000000001607A ; const char aSubstr[]
.rodata:000000000001607A aSubstr         db 'substr',0           ; DATA XREF: eval6+7D↑o
.rodata:0000000000016081 ; const char asc_16081[]
.rodata:0000000000016081 asc_16081       db '(',0                ; DATA XREF: eval6+96↑o
.rodata:0000000000016083 ; const char aSyntaxErrorUne_0[]
.rodata:0000000000016083 aSyntaxErrorUne_0 db 'syntax error: unexpected ',27h,')',27h,0
.rodata:0000000000016083                                         ; DATA XREF: eval6+314↑o
.rodata:00000000000160A0 ; const char asc_160A0[]
.rodata:00000000000160A0 asc_160A0:                              ; DATA XREF: eval5+B↑o
.rodata:00000000000160A0                                         ; eval4:loc_3939↑o ...
.rodata:00000000000160A0                 text "UTF-16LE", ':*%'
.rodata:00000000000160A6 ; const char aNonIntegerArgu[]
.rodata:00000000000160A6 aNonIntegerArgu db 'non-integer argument',0
.rodata:00000000000160A6                                         ; DATA XREF: eval4:loc_399D↑o
.rodata:00000000000160A6                                         ; eval3:loc_3AA4↑o
.rodata:00000000000160BB ; const char aDivisionByZero[]
.rodata:00000000000160BB aDivisionByZero db 'division by zero',0 ; DATA XREF: eval4:loc_39C1↑o
.rodata:00000000000160CC ; const char asc_160CC[]
.rodata:00000000000160CC asc_160CC       db '<',0                ; DATA XREF: eval2:loc_3B54↑o
.rodata:00000000000160CE ; const char asc_160CE[]
.rodata:00000000000160CE asc_160CE       db '<=',0               ; DATA XREF: eval2:loc_3AF8↑o
.rodata:00000000000160D1 ; const char asc_160D1[]
.rodata:00000000000160D1 asc_160D1       db '==',0               ; DATA XREF: eval2:loc_3CB0↑o
.rodata:00000000000160D4 ; const char asc_160D4[]
.rodata:00000000000160D4 asc_160D4       db '!=',0               ; DATA XREF: eval2+1F0↑o
.rodata:00000000000160D4                                         ; eval2:loc_3C50↑o
.rodata:00000000000160D7 ; const char asc_160D7[]
.rodata:00000000000160D7 asc_160D7       db '>=',0               ; DATA XREF: eval2+20A↑o
.rodata:00000000000160DA ; const char asc_160DA[]
.rodata:00000000000160DA asc_160DA       db '>',0                ; DATA XREF: eval2+224↑o
.rodata:00000000000160DC ; const char asc_160DC[]
.rodata:00000000000160DC asc_160DC       db '&',0                ; DATA XREF: eval1:loc_3D43↑o
.rodata:00000000000160DC                                         ; eval1+86↑o
.rodata:00000000000160DE ; const char asc_160DE[]
.rodata:00000000000160DE asc_160DE       db '|',0                ; DATA XREF: eval:loc_3DF8↑o
.rodata:00000000000160DE                                         ; eval+8B↑o
.rodata:00000000000160E0 ; const char dirname[]
.rodata:00000000000160E0 dirname         db '/usr/local/share/locale',0
.rodata:00000000000160E0                                         ; DATA XREF: main+24↑o
.rodata:00000000000160F8 a831            db '8.31',0             ; DATA XREF: main+69↑o
.rodata:00000000000160FD aPaulEggert     db 'Paul Eggert',0      ; DATA XREF: main+59↑o
.rodata:0000000000016109 aJamesYoungman  db 'James Youngman',0   ; DATA XREF: main+7F↑o
.rodata:0000000000016118 aMikeParker     db 'Mike Parker',0      ; DATA XREF: main+8C↑o
.rodata:0000000000016124 ; const char s2[]
.rodata:0000000000016124 s2              db '--',0               ; DATA XREF: main+AC↑o
.rodata:0000000000016124                                         ; eval3:loc_3A10↑o
.rodata:0000000000016127 ; const char aMissingOperand[]
.rodata:0000000000016127 aMissingOperand db 'missing operand',0  ; DATA XREF: main:loc_1FA0↑o
.rodata:0000000000016137                 align 20h
.rodata:0000000000016140 jpt_3BDB        dd offset def_3BDB - 16140h
.rodata:0000000000016140                                         ; DATA XREF: eval2+FD↑o
.rodata:0000000000016140                                         ; eval2+104↑r
.rodata:0000000000016140                 dd offset loc_3C20 - 16140h ; jump table for switch statement
.rodata:0000000000016140                 dd offset loc_3C10 - 16140h
.rodata:0000000000016140                 dd offset loc_3BF8 - 16140h
.rodata:0000000000016140                 dd offset loc_3BE0 - 16140h
.rodata:0000000000016140                 dd offset loc_3C40 - 16140h
.rodata:0000000000016158                 align 20h
.rodata:0000000000016160 ; const char _PRETTY_FUNCTION___7929[]
.rodata:0000000000016160 __PRETTY_FUNCTION___7929 db 'mbuiter_multi_next',0
.rodata:0000000000016160                                         ; DATA XREF: mbuiter_multi_next_part_2↑o
.rodata:0000000000016160                                         ; docolon:loc_2BD7↑o ...
.rodata:0000000000016173 ; const char aWriteError[]
.rodata:0000000000016173 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_3F03↑o
.rodata:000000000001617F ; const char format[]
.rodata:000000000001617F format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:000000000001617F                                         ; docolon:loc_2BBA↑o ...
.rodata:0000000000016186 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:000000000001618B aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:000000000021AAE0↓o
.rodata:0000000000016193                 align 20h
.rodata:00000000000161A0                 public is_basic_table
.rodata:00000000000161A0 is_basic_table  dq 0FFFFFFEF00001A00h   ; DATA XREF: docolon+238↑o
.rodata:00000000000161A0                                         ; eval6+451↑o ...
.rodata:00000000000161A8                 db 0FEh
.rodata:00000000000161A9                 db 0FFh
.rodata:00000000000161AA                 db 0FFh
.rodata:00000000000161AB                 db 0FFh
.rodata:00000000000161AC                 db 0FEh
.rodata:00000000000161AD                 db 0FFh
.rodata:00000000000161AE                 db 0FFh
.rodata:00000000000161AF                 db  7Fh ; 
.rodata:00000000000161B0                 db    0
.rodata:00000000000161B1                 db    0
.rodata:00000000000161B2                 db    0
.rodata:00000000000161B3                 db    0
.rodata:00000000000161B4                 db    0
.rodata:00000000000161B5                 db    0
.rodata:00000000000161B6                 db    0
.rodata:00000000000161B7                 db    0
.rodata:00000000000161B8                 db    0
.rodata:00000000000161B9                 db    0
.rodata:00000000000161BA                 db    0
.rodata:00000000000161BB                 db    0
.rodata:00000000000161BC                 db    0
.rodata:00000000000161BD                 db    0
.rodata:00000000000161BE                 db    0
.rodata:00000000000161BF                 db    0
.rodata:00000000000161C0 ; const char _PRETTY_FUNCTION___5021[]
.rodata:00000000000161C0 __PRETTY_FUNCTION___5021 db 'mbuiter_multi_next',0
.rodata:00000000000161C0                                         ; DATA XREF: mbschr:loc_44E8↑o
.rodata:00000000000161C0                                         ; mbschr:loc_4507↑o ...
.rodata:00000000000161D3                 align 20h
.rodata:00000000000161E0 ; const char _PRETTY_FUNCTION___5021_0[]
.rodata:00000000000161E0 __PRETTY_FUNCTION___5021_0 db 'mbuiter_multi_next',0
.rodata:00000000000161E0                                         ; DATA XREF: mbslen:loc_471A↑o
.rodata:00000000000161E0                                         ; mbslen:loc_473E↑o ...
.rodata:00000000000161F3                 align 8
.rodata:00000000000161F8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:00000000000161F8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000016230 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000016230                                         ; eval4:loc_38C0↑o
.rodata:0000000000016238 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000001623C unk_1623C       db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000001623D                 db  80h
.rodata:000000000001623E                 db  98h
.rodata:000000000001623F                 db    0
.rodata:0000000000016240 unk_16240       db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000016241                 db  80h
.rodata:0000000000016242                 db  99h
.rodata:0000000000016243                 db    0
.rodata:0000000000016244 unk_16244       db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000016245                 db    7
.rodata:0000000000016246                 db  65h ; e
.rodata:0000000000016247                 db    0
.rodata:0000000000016248 unk_16248       db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000016249                 db 0AFh
.rodata:000000000001624A                 db    0
.rodata:000000000001624B unk_1624B       db  22h ; "             ; DATA XREF: gettext_quote:loc_4840↑o
.rodata:000000000001624B                                         ; quotearg_buffer_restyled:loc_55FB↑o ...
.rodata:000000000001624C                 db    0
.rodata:000000000001624D ; const char asc_1624D[2]
.rodata:000000000001624D asc_1624D       db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000001624D                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:000000000001624F aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000016257 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:000000000021AB28↓o
.rodata:000000000001625D aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:000000000021AB30↓o
.rodata:000000000001626A aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:000000000021AB38↓o
.rodata:000000000001626A                                         ; .data.rel.ro:000000000021AB58↓o
.rodata:0000000000016277 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000016277                                         ; DATA XREF: .data.rel.ro:000000000021AB40↓o
.rodata:000000000001628B aC_0            db 'c',0                ; DATA XREF: .data.rel.ro:000000000021AB48↓o
.rodata:000000000001628D aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:000000000021AB50↓o
.rodata:0000000000016295 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:000000000021AB68↓o
.rodata:000000000001629D                 align 20h
.rodata:00000000000162A0 jpt_49A1        dd offset loc_574A - 162A0h
.rodata:00000000000162A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000162A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000162A0                 dd offset loc_49A3 - 162A0h ; jump table for switch statement
.rodata:00000000000162A0                 dd offset loc_5978 - 162A0h
.rodata:00000000000162A0                 dd offset loc_5784 - 162A0h
.rodata:00000000000162A0                 dd offset loc_5574 - 162A0h
.rodata:00000000000162A0                 dd offset loc_55D0 - 162A0h
.rodata:00000000000162A0                 dd offset loc_5625 - 162A0h
.rodata:00000000000162A0                 dd offset loc_566A - 162A0h
.rodata:00000000000162A0                 dd offset loc_56A4 - 162A0h
.rodata:00000000000162A0                 dd offset loc_56A4 - 162A0h
.rodata:00000000000162A0                 dd offset loc_56A4 - 162A0h
.rodata:00000000000162CC jpt_4AFE        dd offset loc_4D20 - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000162CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh ; jump table for switch statement
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset loc_4D60 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4C68 - 162CCh, offset loc_4C28 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DF0 - 162CCh, offset loc_4DE0 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DD0 - 162CCh, offset loc_4DC0 - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset def_4AFE - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DB0 - 162CCh, offset loc_4DA0 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4D70 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4C03 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4DA0 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4DA0 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4DA0 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4BD3 - 162CCh
.rodata:00000000000162CC                 dd offset def_4AFE - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4DA0 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4C78 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4D48 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D48 - 162CCh, offset loc_4B03 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4DA0 - 162CCh, offset loc_4B03 - 162CCh
.rodata:00000000000162CC                 dd offset loc_4D70 - 162CCh
.rodata:00000000000164C8 jpt_4E8A        dd offset loc_4EF0 - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000164C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h ; jump table for switch statement
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset loc_4EE0 - 164C8h
.rodata:00000000000164C8                 dd offset loc_5030 - 164C8h, offset loc_5018 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4EC8 - 164C8h, offset loc_5008 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4EB0 - 164C8h, offset loc_4FF0 - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset def_4E8A - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FD8 - 164C8h, offset loc_4FC0 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4FA8 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4C00 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4FC0 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4FC0 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4FC0 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4BD0 - 164C8h
.rodata:00000000000164C8                 dd offset def_4E8A - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4FC0 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4E90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4F90 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4F90 - 164C8h, offset loc_4B00 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FC0 - 164C8h, offset loc_4B00 - 164C8h
.rodata:00000000000164C8                 dd offset loc_4FA8 - 164C8h
.rodata:00000000000166C4                 align 20h
.rodata:00000000000166E0                 public quoting_style_vals
.rodata:00000000000166E0 quoting_style_vals db    0
.rodata:00000000000166E1                 db    0
.rodata:00000000000166E2                 db    0
.rodata:00000000000166E3                 db    0
.rodata:00000000000166E4                 db    1
.rodata:00000000000166E5                 db    0
.rodata:00000000000166E6                 db    0
.rodata:00000000000166E7                 db    0
.rodata:00000000000166E8                 db    2
.rodata:00000000000166E9                 db    0
.rodata:00000000000166EA                 db    0
.rodata:00000000000166EB                 db    0
.rodata:00000000000166EC                 db    3
.rodata:00000000000166ED                 db    0
.rodata:00000000000166EE                 db    0
.rodata:00000000000166EF                 db    0
.rodata:00000000000166F0                 db    4
.rodata:00000000000166F1                 db    0
.rodata:00000000000166F2                 db    0
.rodata:00000000000166F3                 db    0
.rodata:00000000000166F4                 db    5
.rodata:00000000000166F5                 db    0
.rodata:00000000000166F6                 db    0
.rodata:00000000000166F7                 db    0
.rodata:00000000000166F8                 db    6
.rodata:00000000000166F9                 db    0
.rodata:00000000000166FA                 db    0
.rodata:00000000000166FB                 db    0
.rodata:00000000000166FC                 db    7
.rodata:00000000000166FD                 db    0
.rodata:00000000000166FE                 db    0
.rodata:00000000000166FF                 db    0
.rodata:0000000000016700                 db    8
.rodata:0000000000016701                 db    0
.rodata:0000000000016702                 db    0
.rodata:0000000000016703                 db    0
.rodata:0000000000016704                 db    9
.rodata:0000000000016705                 db    0
.rodata:0000000000016706                 db    0
.rodata:0000000000016707                 db    0
.rodata:0000000000016708 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000016714 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000001671B ; const char aC[]
.rodata:000000000001671B aC              db '(C)',0              ; DATA XREF: version_etc_arn:loc_67DC↑o
.rodata:000000000001671B                                         ; eval6+C6↑o ...
.rodata:000000000001671F ; const char aWrittenByS[]
.rodata:000000000001671F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000001671F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000001672F ; const char aWrittenBySAndS[]
.rodata:000000000001672F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000001672F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000016746 ; const char aWrittenBySSAnd[]
.rodata:0000000000016746 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000016746                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000016762 ; const char aReportBugsToS[]
.rodata:0000000000016762 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000016762                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000016777 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000016777                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000001678D ; const char aSHomePageS[]
.rodata:000000000001678D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000001678D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000167A1                 align 8
.rodata:00000000000167A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000167A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000167A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000167A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000167A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000167A8                 db '.',0Ah
.rodata:00000000000167A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000167A8                 db 0Ah,0
.rodata:0000000000016874                 align 8
.rodata:0000000000016878 ; const char aWrittenBySSSAn[]
.rodata:0000000000016878 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000016878                                         ; DATA XREF: version_etc_arn:loc_6A30↑o
.rodata:0000000000016878                 db 'and %s.',0Ah,0
.rodata:0000000000016898 ; const char aWrittenBySSSSA[]
.rodata:0000000000016898 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000016898                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000016898                 db '%s, and %s.',0Ah,0
.rodata:00000000000168BC                 align 20h
.rodata:00000000000168C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000168C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000168C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000168C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000168E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000168E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000168E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000168E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000016914                 align 8
.rodata:0000000000016918 ; const char aWrittenBySSSSS[]
.rodata:0000000000016918 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000016918                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000016918                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000016918                 db 'and %s.',0Ah,0
.rodata:0000000000016948 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000016948 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000016948                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000016948                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000016948                 db '%s, and %s.',0Ah,0
.rodata:000000000001697C                 align 20h
.rodata:0000000000016980 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000016980                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000016980                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000016980                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000169BC                 align 20h
.rodata:00000000000169C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000169C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000169C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000169C0                 db 0
.rodata:0000000000016A01                 align 4
.rodata:0000000000016A04 jpt_6844        dd offset loc_68C6 - 16A04h
.rodata:0000000000016A04                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000016A04                                         ; version_etc_arn+9D↑r
.rodata:0000000000016A04                 dd offset loc_6958 - 16A04h ; jump table for switch statement
.rodata:0000000000016A04                 dd offset loc_6998 - 16A04h
.rodata:0000000000016A04                 dd offset loc_69E0 - 16A04h
.rodata:0000000000016A04                 dd offset loc_6A30 - 16A04h
.rodata:0000000000016A04                 dd offset loc_6A88 - 16A04h
.rodata:0000000000016A04                 dd offset loc_6AB8 - 16A04h
.rodata:0000000000016A04                 dd offset loc_6B20 - 16A04h
.rodata:0000000000016A04                 dd offset loc_6850 - 16A04h
.rodata:0000000000016A04                 dd offset loc_6900 - 16A04h
.rodata:0000000000016A2C                 align 20h
.rodata:0000000000016A40                 public version_etc_copyright
.rodata:0000000000016A40 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000016A40                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:0000000000016A6F ; const char aMemoryExhauste[]
.rodata:0000000000016A6F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000016A80 ; const char aCoreutils831Li_0[]
.rodata:0000000000016A80 aCoreutils831Li_0 db '../coreutils-8.31/lib/regexec.c',0
.rodata:0000000000016A80                                         ; DATA XREF: pop_fail_stack_isra_25+7C↑o
.rodata:0000000000016A80                                         ; re_search_internal+1034↑o ...
.rodata:0000000000016AA0 ; const char aCoreutils831Li_1[]
.rodata:0000000000016AA0 aCoreutils831Li_1 db '../coreutils-8.31/lib/regcomp.c',0
.rodata:0000000000016AA0                                         ; DATA XREF: parse_expression+1301↑o
.rodata:0000000000016AA0                                         ; re_compile_internal+962↑o ...
.rodata:0000000000016AC0 ; const char aIsEpsilonNodeN[]
.rodata:0000000000016AC0 aIsEpsilonNodeN db '!IS_EPSILON_NODE (node->token.type)',0
.rodata:0000000000016AC0                                         ; DATA XREF: re_compile_internal+10C0↑o
.rodata:0000000000016AE4                 align 8
.rodata:0000000000016AE8 ; const char aNum0[]
.rodata:0000000000016AE8 aNum0           db 'num >= 0',0         ; DATA XREF: pop_fail_stack_isra_25+83↑o
.rodata:0000000000016AF1 aAlpha          db 'alpha',0            ; DATA XREF: build_charclass_isra_29+41↑o
.rodata:0000000000016AF1                                         ; build_charclass_isra_29+152↑o ...
.rodata:0000000000016AF7 aUpper          db 'upper',0            ; DATA XREF: build_charclass_isra_29+23↑o
.rodata:0000000000016AF7                                         ; build_charclass_isra_29:loc_C83C↑o
.rodata:0000000000016AFD aLower          db 'lower',0            ; DATA XREF: build_charclass_isra_29:loc_C526↑o
.rodata:0000000000016AFD                                         ; build_charclass_isra_29:loc_C598↑o
.rodata:0000000000016B03 aAlnum          db 'alnum',0            ; DATA XREF: build_charclass_isra_29+6C↑o
.rodata:0000000000016B03                                         ; parse_expression+9CF↑o
.rodata:0000000000016B09 aCntrl          db 'cntrl',0            ; DATA XREF: build_charclass_isra_29+8A↑o
.rodata:0000000000016B0F aSpace          db 'space',0            ; DATA XREF: build_charclass_isra_29+1C2↑o
.rodata:0000000000016B0F                                         ; parse_expression+97F↑o
.rodata:0000000000016B15 aPrint          db 'print',0            ; DATA XREF: build_charclass_isra_29:loc_C7A3↑o
.rodata:0000000000016B1B aBlank          db 'blank',0            ; DATA XREF: build_charclass_isra_29:loc_C8A2↑o
.rodata:0000000000016B21 ; const char aGraph[]
.rodata:0000000000016B21 aGraph          db 'graph',0            ; DATA XREF: build_charclass_isra_29:loc_C9AE↑o
.rodata:0000000000016B27 ; const char aPunct[]
.rodata:0000000000016B27 aPunct          db 'punct',0            ; DATA XREF: build_charclass_isra_29:loc_CA3A↑o
.rodata:0000000000016B2D ; const char asc_16B2D[1]
.rodata:0000000000016B2D asc_16B2D       db 'x'                  ; DATA XREF: build_charclass_isra_29:loc_CAC4↑o
.rodata:0000000000016B2E aDigit          db 'digit',0            ; DATA XREF: build_charclass_isra_29+290↑o
.rodata:0000000000016B34 ; const char aErrRegEspace[]
.rodata:0000000000016B34 aErrRegEspace   db 'err == REG_ESPACE',0
.rodata:0000000000016B34                                         ; DATA XREF: re_search_internal+103B↑o
.rodata:0000000000016B34                                         ; re_search_internal+153F↑o
.rodata:0000000000016B46 a8              db '8',0                ; DATA XREF: re_compile_internal+160↑o
.rodata:0000000000016B48 ; const char aNodeNextNull[]
.rodata:0000000000016B48 aNodeNextNull   db 'node->next == NULL',0
.rodata:0000000000016B48                                         ; DATA XREF: re_compile_internal+969↑o
.rodata:0000000000016B5B ; const char aLeft1[]
.rodata:0000000000016B5B aLeft1          db 'left > -1',0        ; DATA XREF: re_compile_internal+10DF↑o
.rodata:0000000000016B65 ; const char aRight1[]
.rodata:0000000000016B65 aRight1         db 'right > -1',0       ; DATA XREF: re_compile_internal+10A1↑o
.rodata:0000000000016B70 ; const char aRegsAllocatedR[]
.rodata:0000000000016B70 aRegsAllocatedR db 'regs_allocated == REGS_FIXED',0
.rodata:0000000000016B70                                         ; DATA XREF: re_search_stub+46E↑o
.rodata:0000000000016B8D ; const char aRegsNumRegsNre[]
.rodata:0000000000016B8D aRegsNumRegsNre db 'regs->num_regs >= nregs',0
.rodata:0000000000016B8D                                         ; DATA XREF: re_search_stub+44F↑o
.rodata:0000000000016BA5 ; const char aPmatch0RmSoSta[]
.rodata:0000000000016BA5 aPmatch0RmSoSta db 'pmatch[0].rm_so == start',0
.rodata:0000000000016BA5                                         ; DATA XREF: re_search_stub+430↑o
.rodata:0000000000016BBE                 align 20h
.rodata:0000000000016BC0 jpt_FB06        dd offset loc_100D4 - 16BC0h
.rodata:0000000000016BC0                                         ; DATA XREF: re_search_internal+4E8↑o
.rodata:0000000000016BC0                                         ; re_search_internal+4EF↑r
.rodata:0000000000016BC0                 dd offset loc_100D4 - 16BC0h ; jump table for switch statement
.rodata:0000000000016BC0                 dd offset loc_FB3E - 16BC0h
.rodata:0000000000016BC0                 dd offset loc_10062 - 16BC0h
.rodata:0000000000016BC0                 dd offset loc_FBE8 - 16BC0h
.rodata:0000000000016BD4 jpt_1193C       dd offset loc_11B20 - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                                         ; DATA XREF: peek_token+13A↑o
.rodata:0000000000016BD4                                         ; peek_token+145↑r
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h ; jump table for switch statement
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset loc_11B90 - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset loc_11B70 - 16BD4h, offset loc_11B50 - 16BD4h
.rodata:0000000000016BD4                 dd offset loc_11B40 - 16BD4h, offset loc_11B00 - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset loc_11AF0 - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset loc_11AD0 - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset loc_11AC0 - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset loc_11A98 - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset def_1193C - 16BD4h
.rodata:0000000000016BD4                 dd offset def_1193C - 16BD4h, offset loc_11A70 - 16BD4h
.rodata:0000000000016BD4                 dd offset loc_11A48 - 16BD4h, offset loc_11A20 - 16BD4h
.rodata:0000000000016DA4 jpt_119E8       dd offset loc_11DB3 - 16DA4h, offset loc_11D9C - 16DA4h
.rodata:0000000000016DA4                                         ; DATA XREF: peek_token+1E7↑o
.rodata:0000000000016DA4                                         ; peek_token+1F1↑r
.rodata:0000000000016DA4                 dd offset loc_11D85 - 16DA4h, offset def_119E8 - 16DA4h ; jump table for switch statement
.rodata:0000000000016DA4                 dd offset loc_11D6A - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11D41 - 16DA4h, offset loc_11D41 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11D41 - 16DA4h, offset loc_11D41 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11D41 - 16DA4h, offset loc_11D41 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11D41 - 16DA4h, offset loc_11D41 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11D41 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset loc_11D1F - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset loc_11CFD - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11CE2 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset loc_11CC0 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11CA5 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11C8A - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset loc_11C68 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset loc_11C46 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11C0D - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11BF2 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset def_119E8 - 16DA4h, offset def_119E8 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11BD4 - 16DA4h, offset loc_11BB9 - 16DA4h
.rodata:0000000000016DA4                 dd offset loc_11C28 - 16DA4h
.rodata:0000000000016F00 jpt_1200F       dd offset def_1200F - 16F00h
.rodata:0000000000016F00                                         ; DATA XREF: parse_expression+4B↑o
.rodata:0000000000016F00                                         ; parse_expression+58↑r
.rodata:0000000000016F00                 dd offset loc_12A3E - 16F00h ; jump table for switch statement
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset loc_1298F - 16F00h
.rodata:0000000000016F00                 dd offset loc_129F9 - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset loc_12011 - 16F00h
.rodata:0000000000016F00                 dd offset loc_12B28 - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset loc_120FD - 16F00h
.rodata:0000000000016F00                 dd offset loc_12670 - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset loc_120FD - 16F00h
.rodata:0000000000016F00                 dd offset loc_120FD - 16F00h
.rodata:0000000000016F00                 dd offset loc_127B0 - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset loc_120EE - 16F00h
.rodata:0000000000016F00                 dd offset loc_1211B - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset def_1200F - 16F00h
.rodata:0000000000016F00                 dd offset loc_12968 - 16F00h
.rodata:0000000000016F00                 dd offset loc_12968 - 16F00h
.rodata:0000000000016F00                 dd offset loc_12918 - 16F00h
.rodata:0000000000016F00                 dd offset loc_12918 - 16F00h
.rodata:0000000000016F00                 dd offset loc_12B93 - 16F00h
.rodata:0000000000016F94 jpt_12916       dd offset loc_12C81 - 16F94h
.rodata:0000000000016F94                                         ; DATA XREF: parse_expression+88B↑o
.rodata:0000000000016F94                                         ; parse_expression+95E↑r
.rodata:0000000000016F94                 dd offset loc_12C57 - 16F94h ; jump table for switch statement
.rodata:0000000000016F94                 dd offset loc_12C0D - 16F94h
.rodata:0000000000016F94                 dd offset loc_12BD5 - 16F94h
.rodata:0000000000016F94                 dd offset loc_12CA9 - 16F94h
.rodata:0000000000016FA8 jpt_13E73       dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                                         ; DATA XREF: re_compile_internal+6AC↑o
.rodata:0000000000016FA8                                         ; re_compile_internal+6CC↑r
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h ; jump table for switch statement
.rodata:0000000000016FA8                 dd offset loc_140F0 - 16FA8h
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                 dd offset loc_14120 - 16FA8h
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                 dd offset loc_14098 - 16FA8h
.rodata:0000000000016FA8                 dd offset loc_14098 - 16FA8h
.rodata:0000000000016FA8                 dd offset loc_13FD7 - 16FA8h
.rodata:0000000000016FA8                 dd offset loc_13FD7 - 16FA8h
.rodata:0000000000016FA8                 dd offset loc_14098 - 16FA8h
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                 dd offset def_13E73 - 16FA8h
.rodata:0000000000016FA8                 dd offset loc_13F51 - 16FA8h
.rodata:0000000000016FEC jpt_14573       dd offset def_14573 - 16FECh
.rodata:0000000000016FEC                                         ; DATA XREF: re_compile_internal+DAF↑o
.rodata:0000000000016FEC                                         ; re_compile_internal+DCC↑r
.rodata:0000000000016FEC                 dd offset loc_14730 - 16FECh ; jump table for switch statement
.rodata:0000000000016FEC                 dd offset loc_146DC - 16FECh
.rodata:0000000000016FEC                 dd offset loc_14758 - 16FECh
.rodata:0000000000016FEC                 dd offset loc_146DC - 16FECh
.rodata:0000000000016FEC                 dd offset loc_146D9 - 16FECh
.rodata:0000000000016FEC                 dd offset loc_1434E - 16FECh
.rodata:0000000000016FEC                 dd offset def_14573 - 16FECh
.rodata:0000000000016FEC                 dd offset loc_146DC - 16FECh
.rodata:0000000000016FEC                 dd offset loc_146DC - 16FECh
.rodata:0000000000016FEC                 dd offset loc_146DC - 16FECh
.rodata:0000000000016FEC                 dd offset loc_146DC - 16FECh
.rodata:0000000000016FEC                 dd offset loc_14739 - 16FECh
.rodata:0000000000017020 ; const char _PRETTY_FUNCTION___7859[]
.rodata:0000000000017020 __PRETTY_FUNCTION___7859 db 're_copy_regs',0
.rodata:0000000000017020                                         ; DATA XREF: re_search_stub:loc_14E31↑o
.rodata:0000000000017020                                         ; re_search_stub:loc_14E50↑o
.rodata:000000000001702D                 align 10h
.rodata:0000000000017030 ; const char _PRETTY_FUNCTION___7847[]
.rodata:0000000000017030 __PRETTY_FUNCTION___7847 db 're_search_stub',0
.rodata:0000000000017030                                         ; DATA XREF: re_search_stub:loc_14E12↑o
.rodata:000000000001703F                 align 20h
.rodata:0000000000017040 ; const char _PRETTY_FUNCTION___8040[]
.rodata:0000000000017040 __PRETTY_FUNCTION___8040 db 'pop_fail_stack',0
.rodata:0000000000017040                                         ; DATA XREF: pop_fail_stack_isra_25:loc_C375↑o
.rodata:000000000001704F                 align 10h
.rodata:0000000000017050 ; const char _PRETTY_FUNCTION___7972[]
.rodata:0000000000017050 __PRETTY_FUNCTION___7972 db 'check_matching',0
.rodata:0000000000017050                                         ; DATA XREF: re_search_internal+102D↑o
.rodata:0000000000017050                                         ; re_search_internal+1531↑o
.rodata:000000000001705F                 align 20h
.rodata:0000000000017060 ; const char _PRETTY_FUNCTION___6981[]
.rodata:0000000000017060 __PRETTY_FUNCTION___6981 db 'link_nfa_nodes',0
.rodata:0000000000017060                                         ; DATA XREF: re_compile_internal+95B↑o
.rodata:0000000000017060                                         ; re_compile_internal:loc_14833↑o ...
.rodata:000000000001706F                 align 10h
.rodata:0000000000017070 ; const char _PRETTY_FUNCTION___7327[]
.rodata:0000000000017070 __PRETTY_FUNCTION___7327 db 'parse_bracket_exp',0
.rodata:0000000000017070                                         ; DATA XREF: parse_expression:def_12916↑o
.rodata:0000000000017082                 align 20h
.rodata:00000000000170A0 utf8_sb_map     db 0FFh                 ; DATA XREF: free_dfa_content+131↑o
.rodata:00000000000170A0                                         ; re_compile_internal+1B3↑o
.rodata:00000000000170A1                 db 0FFh
.rodata:00000000000170A2                 db 0FFh
.rodata:00000000000170A3                 db 0FFh
.rodata:00000000000170A4                 db 0FFh
.rodata:00000000000170A5                 db 0FFh
.rodata:00000000000170A6                 db 0FFh
.rodata:00000000000170A7                 db 0FFh
.rodata:00000000000170A8                 db 0FFh
.rodata:00000000000170A9                 db 0FFh
.rodata:00000000000170AA                 db 0FFh
.rodata:00000000000170AB                 db 0FFh
.rodata:00000000000170AC                 db 0FFh
.rodata:00000000000170AD                 db 0FFh
.rodata:00000000000170AE                 db 0FFh
.rodata:00000000000170AF                 db 0FFh
.rodata:00000000000170B0                 db    0
.rodata:00000000000170B1                 db    0
.rodata:00000000000170B2                 db    0
.rodata:00000000000170B3                 db    0
.rodata:00000000000170B4                 db    0
.rodata:00000000000170B5                 db    0
.rodata:00000000000170B6                 db    0
.rodata:00000000000170B7                 db    0
.rodata:00000000000170B8                 db    0
.rodata:00000000000170B9                 db    0
.rodata:00000000000170BA                 db    0
.rodata:00000000000170BB                 db    0
.rodata:00000000000170BC                 db    0
.rodata:00000000000170BD                 db    0
.rodata:00000000000170BE                 db    0
.rodata:00000000000170BF                 db    0
.rodata:00000000000170C0 __re_error_msgid_idx db    0            ; DATA XREF: rpl_re_compile_pattern+3E↑o
.rodata:00000000000170C0                                         ; rpl_regerror+F↑o
.rodata:00000000000170C1                 db    0
.rodata:00000000000170C2                 db    0
.rodata:00000000000170C3                 db    0
.rodata:00000000000170C4                 db    0
.rodata:00000000000170C5                 db    0
.rodata:00000000000170C6                 db    0
.rodata:00000000000170C7                 db    0
.rodata:00000000000170C8                 db    8
.rodata:00000000000170C9                 db    0
.rodata:00000000000170CA                 db    0
.rodata:00000000000170CB                 db    0
.rodata:00000000000170CC                 db    0
.rodata:00000000000170CD                 db    0
.rodata:00000000000170CE                 db    0
.rodata:00000000000170CF                 db    0
.rodata:00000000000170D0                 db  11h
.rodata:00000000000170D1                 db    0
.rodata:00000000000170D2                 db    0
.rodata:00000000000170D3                 db    0
.rodata:00000000000170D4                 db    0
.rodata:00000000000170D5                 db    0
.rodata:00000000000170D6                 db    0
.rodata:00000000000170D7                 db    0
.rodata:00000000000170D8                 db  2Ch ; ,
.rodata:00000000000170D9                 db    0
.rodata:00000000000170DA                 db    0
.rodata:00000000000170DB                 db    0
.rodata:00000000000170DC                 db    0
.rodata:00000000000170DD                 db    0
.rodata:00000000000170DE                 db    0
.rodata:00000000000170DF                 db    0
.rodata:00000000000170E0                 db  48h ; H
.rodata:00000000000170E1                 db    0
.rodata:00000000000170E2                 db    0
.rodata:00000000000170E3                 db    0
.rodata:00000000000170E4                 db    0
.rodata:00000000000170E5                 db    0
.rodata:00000000000170E6                 db    0
.rodata:00000000000170E7                 db    0
.rodata:00000000000170E8                 db  65h ; e
.rodata:00000000000170E9                 db    0
.rodata:00000000000170EA                 db    0
.rodata:00000000000170EB                 db    0
.rodata:00000000000170EC                 db    0
.rodata:00000000000170ED                 db    0
.rodata:00000000000170EE                 db    0
.rodata:00000000000170EF                 db    0
.rodata:00000000000170F0                 db  78h ; x
.rodata:00000000000170F1                 db    0
.rodata:00000000000170F2                 db    0
.rodata:00000000000170F3                 db    0
.rodata:00000000000170F4                 db    0
.rodata:00000000000170F5                 db    0
.rodata:00000000000170F6                 db    0
.rodata:00000000000170F7                 db    0
.rodata:00000000000170F8                 db  8Fh
.rodata:00000000000170F9                 db    0
.rodata:00000000000170FA                 db    0
.rodata:00000000000170FB                 db    0
.rodata:00000000000170FC                 db    0
.rodata:00000000000170FD                 db    0
.rodata:00000000000170FE                 db    0
.rodata:00000000000170FF                 db    0
.rodata:0000000000017100                 db 0AEh
.rodata:0000000000017101                 db    0
.rodata:0000000000017102                 db    0
.rodata:0000000000017103                 db    0
.rodata:0000000000017104                 db    0
.rodata:0000000000017105                 db    0
.rodata:0000000000017106                 db    0
.rodata:0000000000017107                 db    0
.rodata:0000000000017108                 db 0C0h
.rodata:0000000000017109                 db    0
.rodata:000000000001710A                 db    0
.rodata:000000000001710B                 db    0
.rodata:000000000001710C                 db    0
.rodata:000000000001710D                 db    0
.rodata:000000000001710E                 db    0
.rodata:000000000001710F                 db    0
.rodata:0000000000017110                 db 0CDh
.rodata:0000000000017111                 db    0
.rodata:0000000000017112                 db    0
.rodata:0000000000017113                 db    0
.rodata:0000000000017114                 db    0
.rodata:0000000000017115                 db    0
.rodata:0000000000017116                 db    0
.rodata:0000000000017117                 db    0
.rodata:0000000000017118                 db 0E5h
.rodata:0000000000017119                 db    0
.rodata:000000000001711A                 db    0
.rodata:000000000001711B                 db    0
.rodata:000000000001711C                 db    0
.rodata:000000000001711D                 db    0
.rodata:000000000001711E                 db    0
.rodata:000000000001711F                 db    0
.rodata:0000000000017120                 db 0F7h
.rodata:0000000000017121                 db    0
.rodata:0000000000017122                 db    0
.rodata:0000000000017123                 db    0
.rodata:0000000000017124                 db    0
.rodata:0000000000017125                 db    0
.rodata:0000000000017126                 db    0
.rodata:0000000000017127                 db    0
.rodata:0000000000017128                 db    8
.rodata:0000000000017129                 db    1
.rodata:000000000001712A                 db    0
.rodata:000000000001712B                 db    0
.rodata:000000000001712C                 db    0
.rodata:000000000001712D                 db    0
.rodata:000000000001712E                 db    0
.rodata:000000000001712F                 db    0
.rodata:0000000000017130                 db  2Dh ; -
.rodata:0000000000017131                 db    1
.rodata:0000000000017132                 db    0
.rodata:0000000000017133                 db    0
.rodata:0000000000017134                 db    0
.rodata:0000000000017135                 db    0
.rodata:0000000000017136                 db    0
.rodata:0000000000017137                 db    0
.rodata:0000000000017138                 db  51h ; Q
.rodata:0000000000017139                 db    1
.rodata:000000000001713A                 db    0
.rodata:000000000001713B                 db    0
.rodata:000000000001713C                 db    0
.rodata:000000000001713D                 db    0
.rodata:000000000001713E                 db    0
.rodata:000000000001713F                 db    0
.rodata:0000000000017140                 db  6Ch ; l
.rodata:0000000000017141                 db    1
.rodata:0000000000017142                 db    0
.rodata:0000000000017143                 db    0
.rodata:0000000000017144                 db    0
.rodata:0000000000017145                 db    0
.rodata:0000000000017146                 db    0
.rodata:0000000000017147                 db    0
.rodata:0000000000017148                 db    0
.rodata:0000000000017149                 db    0
.rodata:000000000001714A                 db    0
.rodata:000000000001714B                 db    0
.rodata:000000000001714C                 db    0
.rodata:000000000001714D                 db    0
.rodata:000000000001714E                 db    0
.rodata:000000000001714F                 db    0
.rodata:0000000000017150                 db    0
.rodata:0000000000017151                 db    0
.rodata:0000000000017152                 db    0
.rodata:0000000000017153                 db    0
.rodata:0000000000017154                 db    0
.rodata:0000000000017155                 db    0
.rodata:0000000000017156                 db    0
.rodata:0000000000017157                 db    0
.rodata:0000000000017158                 db    0
.rodata:0000000000017159                 db    0
.rodata:000000000001715A                 db    0
.rodata:000000000001715B                 db    0
.rodata:000000000001715C                 db    0
.rodata:000000000001715D                 db    0
.rodata:000000000001715E                 db    0
.rodata:000000000001715F                 db    0
.rodata:0000000000017160 __re_error_msgid db 'Success',0         ; DATA XREF: rpl_re_compile_pattern+47↑o
.rodata:0000000000017160                                         ; rpl_regerror+19↑o
.rodata:0000000000017168 aNoMatch        db 'No match',0
.rodata:0000000000017171 aInvalidRegular db 'Invalid regular expression',0
.rodata:000000000001718C aInvalidCollati db 'Invalid collation character',0
.rodata:00000000000171A8 aInvalidCharact db 'Invalid character class name',0
.rodata:00000000000171C5 aTrailingBacksl db 'Trailing backslash',0
.rodata:00000000000171D8 aInvalidBackRef db 'Invalid back reference',0
.rodata:00000000000171EF aUnmatchedOr    db 'Unmatched [, [^, [:, [., or [=',0
.rodata:000000000001720E aUnmatchedOr_0  db 'Unmatched ( or \(',0
.rodata:0000000000017220 aUnmatched      db 'Unmatched \{',0
.rodata:000000000001722D aInvalidContent db 'Invalid content of \{\}',0
.rodata:0000000000017245 aInvalidRangeEn db 'Invalid range end',0
.rodata:0000000000017257 aMemoryExhauste_0 db 'Memory exhausted',0
.rodata:0000000000017268 aInvalidPrecedi db 'Invalid preceding regular expression',0
.rodata:000000000001728D aPrematureEndOf db 'Premature end of regular expression',0
.rodata:00000000000172B1 aRegularExpress db 'Regular expression too big',0
.rodata:00000000000172CC aUnmatchedOr_1  db 'Unmatched ) or \)',0
.rodata:00000000000172DE                 align 20h
.rodata:00000000000172E0 xmmword_172E0   xmmword 1010101010101010101010101010101h
.rodata:00000000000172E0                                         ; DATA XREF: re_compile_fastmap_iter_isra_30:loc_D284↑r
.rodata:00000000000172E0                                         ; re_compile_fastmap_iter_isra_30:loc_D324↑r
.rodata:00000000000172F0 unk_172F0       db  43h ; C             ; DATA XREF: hard_locale+18↑o
.rodata:00000000000172F1                 db    0
.rodata:00000000000172F2 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_153B0↑o
.rodata:00000000000172F8 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:00000000000172F8                                         ; locale_charset:loc_15400↑o
.rodata:00000000000172F8 _rodata         ends
.rodata:00000000000172F8
LOAD:00000000000172FE ; ===========================================================================
LOAD:00000000000172FE
LOAD:00000000000172FE ; Segment type: Pure code
LOAD:00000000000172FE ; Segment permissions: Read/Execute
LOAD:00000000000172FE LOAD            segment byte public 'CODE' use64
LOAD:00000000000172FE                 assume cs:LOAD
LOAD:00000000000172FE                 ;org 172FEh
LOAD:00000000000172FE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000172FE                 align 20h
LOAD:00000000000172FE LOAD            ends
LOAD:00000000000172FE
.eh_frame_hdr:0000000000017300 ; ===========================================================================
.eh_frame_hdr:0000000000017300
.eh_frame_hdr:0000000000017300 ; Segment type: Pure data
.eh_frame_hdr:0000000000017300 ; Segment permissions: Read
.eh_frame_hdr:0000000000017300 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000017300                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000017300                 ;org 17300h
.eh_frame_hdr:0000000000017300 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000017301                 db  1Bh
.eh_frame_hdr:0000000000017302                 db    3
.eh_frame_hdr:0000000000017303                 db  3Bh ; ;
.eh_frame_hdr:0000000000017304                 db 0DCh
.eh_frame_hdr:0000000000017305                 db    5
.eh_frame_hdr:0000000000017306                 db    0
.eh_frame_hdr:0000000000017307                 db    0
.eh_frame_hdr:0000000000017308                 db 0BAh
.eh_frame_hdr:0000000000017309                 db    0
.eh_frame_hdr:000000000001730A                 db    0
.eh_frame_hdr:000000000001730B                 db    0
.eh_frame_hdr:000000000001730C                 db 0B0h
.eh_frame_hdr:000000000001730D                 db 0A6h
.eh_frame_hdr:000000000001730E                 db 0FEh
.eh_frame_hdr:000000000001730F                 db 0FFh
.eh_frame_hdr:0000000000017310                 db  28h ; (
.eh_frame_hdr:0000000000017311                 db    6
.eh_frame_hdr:0000000000017312                 db    0
.eh_frame_hdr:0000000000017313                 db    0
.eh_frame_hdr:0000000000017314                 db 0D0h
.eh_frame_hdr:0000000000017315                 db 0AAh
.eh_frame_hdr:0000000000017316                 db 0FEh
.eh_frame_hdr:0000000000017317                 db 0FFh
.eh_frame_hdr:0000000000017318                 db  50h ; P
.eh_frame_hdr:0000000000017319                 db    6
.eh_frame_hdr:000000000001731A                 db    0
.eh_frame_hdr:000000000001731B                 db    0
.eh_frame_hdr:000000000001731C                 db 0E0h
.eh_frame_hdr:000000000001731D                 db 0AAh
.eh_frame_hdr:000000000001731E                 db 0FEh
.eh_frame_hdr:000000000001731F                 db 0FFh
.eh_frame_hdr:0000000000017320                 db 0FCh
.eh_frame_hdr:0000000000017321                 db    6
.eh_frame_hdr:0000000000017322                 db    0
.eh_frame_hdr:0000000000017323                 db    0
.eh_frame_hdr:0000000000017324                 db  10h
.eh_frame_hdr:0000000000017325                 db 0ABh
.eh_frame_hdr:0000000000017326                 db 0FEh
.eh_frame_hdr:0000000000017327                 db 0FFh
.eh_frame_hdr:0000000000017328                 db 0C8h
.eh_frame_hdr:0000000000017329                 db    9
.eh_frame_hdr:000000000001732A                 db    0
.eh_frame_hdr:000000000001732B                 db    0
.eh_frame_hdr:000000000001732C                 db 0D0h
.eh_frame_hdr:000000000001732D                 db 0ACh
.eh_frame_hdr:000000000001732E                 db 0FEh
.eh_frame_hdr:000000000001732F                 db 0FFh
.eh_frame_hdr:0000000000017330                 db 0F8h
.eh_frame_hdr:0000000000017331                 db    5
.eh_frame_hdr:0000000000017332                 db    0
.eh_frame_hdr:0000000000017333                 db    0
.eh_frame_hdr:0000000000017334                 db 0E0h
.eh_frame_hdr:0000000000017335                 db 0ADh
.eh_frame_hdr:0000000000017336                 db 0FEh
.eh_frame_hdr:0000000000017337                 db 0FFh
.eh_frame_hdr:0000000000017338                 db  68h ; h
.eh_frame_hdr:0000000000017339                 db    6
.eh_frame_hdr:000000000001733A                 db    0
.eh_frame_hdr:000000000001733B                 db    0
.eh_frame_hdr:000000000001733C                 db  10h
.eh_frame_hdr:000000000001733D                 db 0AEh
.eh_frame_hdr:000000000001733E                 db 0FEh
.eh_frame_hdr:000000000001733F                 db 0FFh
.eh_frame_hdr:0000000000017340                 db  84h
.eh_frame_hdr:0000000000017341                 db    6
.eh_frame_hdr:0000000000017342                 db    0
.eh_frame_hdr:0000000000017343                 db    0
.eh_frame_hdr:0000000000017344                 db  60h ; `
.eh_frame_hdr:0000000000017345                 db 0AEh
.eh_frame_hdr:0000000000017346                 db 0FEh
.eh_frame_hdr:0000000000017347                 db 0FFh
.eh_frame_hdr:0000000000017348                 db  9Ch
.eh_frame_hdr:0000000000017349                 db    6
.eh_frame_hdr:000000000001734A                 db    0
.eh_frame_hdr:000000000001734B                 db    0
.eh_frame_hdr:000000000001734C                 db 0A0h
.eh_frame_hdr:000000000001734D                 db 0AEh
.eh_frame_hdr:000000000001734E                 db 0FEh
.eh_frame_hdr:000000000001734F                 db 0FFh
.eh_frame_hdr:0000000000017350                 db 0C4h
.eh_frame_hdr:0000000000017351                 db    6
.eh_frame_hdr:0000000000017352                 db    0
.eh_frame_hdr:0000000000017353                 db    0
.eh_frame_hdr:0000000000017354                 db 0E0h
.eh_frame_hdr:0000000000017355                 db 0AEh
.eh_frame_hdr:0000000000017356                 db 0FEh
.eh_frame_hdr:0000000000017357                 db 0FFh
.eh_frame_hdr:0000000000017358                 db 0E4h
.eh_frame_hdr:0000000000017359                 db    6
.eh_frame_hdr:000000000001735A                 db    0
.eh_frame_hdr:000000000001735B                 db    0
.eh_frame_hdr:000000000001735C                 db  50h ; P
.eh_frame_hdr:000000000001735D                 db 0AFh
.eh_frame_hdr:000000000001735E                 db 0FEh
.eh_frame_hdr:000000000001735F                 db 0FFh
.eh_frame_hdr:0000000000017360                 db  10h
.eh_frame_hdr:0000000000017361                 db    7
.eh_frame_hdr:0000000000017362                 db    0
.eh_frame_hdr:0000000000017363                 db    0
.eh_frame_hdr:0000000000017364                 db 0E0h
.eh_frame_hdr:0000000000017365                 db 0AFh
.eh_frame_hdr:0000000000017366                 db 0FEh
.eh_frame_hdr:0000000000017367                 db 0FFh
.eh_frame_hdr:0000000000017368                 db  50h ; P
.eh_frame_hdr:0000000000017369                 db    7
.eh_frame_hdr:000000000001736A                 db    0
.eh_frame_hdr:000000000001736B                 db    0
.eh_frame_hdr:000000000001736C                 db  30h ; 0
.eh_frame_hdr:000000000001736D                 db 0B0h
.eh_frame_hdr:000000000001736E                 db 0FEh
.eh_frame_hdr:000000000001736F                 db 0FFh
.eh_frame_hdr:0000000000017370                 db  88h
.eh_frame_hdr:0000000000017371                 db    7
.eh_frame_hdr:0000000000017372                 db    0
.eh_frame_hdr:0000000000017373                 db    0
.eh_frame_hdr:0000000000017374                 db 0B0h
.eh_frame_hdr:0000000000017375                 db 0B4h
.eh_frame_hdr:0000000000017376                 db 0FEh
.eh_frame_hdr:0000000000017377                 db 0FFh
.eh_frame_hdr:0000000000017378                 db 0B4h
.eh_frame_hdr:0000000000017379                 db    7
.eh_frame_hdr:000000000001737A                 db    0
.eh_frame_hdr:000000000001737B                 db    0
.eh_frame_hdr:000000000001737C                 db  60h ; `
.eh_frame_hdr:000000000001737D                 db 0B9h
.eh_frame_hdr:000000000001737E                 db 0FEh
.eh_frame_hdr:000000000001737F                 db 0FFh
.eh_frame_hdr:0000000000017380                 db    4
.eh_frame_hdr:0000000000017381                 db    8
.eh_frame_hdr:0000000000017382                 db    0
.eh_frame_hdr:0000000000017383                 db    0
.eh_frame_hdr:0000000000017384                 db  10h
.eh_frame_hdr:0000000000017385                 db 0C5h
.eh_frame_hdr:0000000000017386                 db 0FEh
.eh_frame_hdr:0000000000017387                 db 0FFh
.eh_frame_hdr:0000000000017388                 db  54h ; T
.eh_frame_hdr:0000000000017389                 db    8
.eh_frame_hdr:000000000001738A                 db    0
.eh_frame_hdr:000000000001738B                 db    0
.eh_frame_hdr:000000000001738C                 db 0A0h
.eh_frame_hdr:000000000001738D                 db 0C5h
.eh_frame_hdr:000000000001738E                 db 0FEh
.eh_frame_hdr:000000000001738F                 db 0FFh
.eh_frame_hdr:0000000000017390                 db  9Ch
.eh_frame_hdr:0000000000017391                 db    8
.eh_frame_hdr:0000000000017392                 db    0
.eh_frame_hdr:0000000000017393                 db    0
.eh_frame_hdr:0000000000017394                 db 0F0h
.eh_frame_hdr:0000000000017395                 db 0C6h
.eh_frame_hdr:0000000000017396                 db 0FEh
.eh_frame_hdr:0000000000017397                 db 0FFh
.eh_frame_hdr:0000000000017398                 db 0DCh
.eh_frame_hdr:0000000000017399                 db    8
.eh_frame_hdr:000000000001739A                 db    0
.eh_frame_hdr:000000000001739B                 db    0
.eh_frame_hdr:000000000001739C                 db 0D0h
.eh_frame_hdr:000000000001739D                 db 0C7h
.eh_frame_hdr:000000000001739E                 db 0FEh
.eh_frame_hdr:000000000001739F                 db 0FFh
.eh_frame_hdr:00000000000173A0                 db  1Ch
.eh_frame_hdr:00000000000173A1                 db    9
.eh_frame_hdr:00000000000173A2                 db    0
.eh_frame_hdr:00000000000173A3                 db    0
.eh_frame_hdr:00000000000173A4                 db  30h ; 0
.eh_frame_hdr:00000000000173A5                 db 0CAh
.eh_frame_hdr:00000000000173A6                 db 0FEh
.eh_frame_hdr:00000000000173A7                 db 0FFh
.eh_frame_hdr:00000000000173A8                 db  68h ; h
.eh_frame_hdr:00000000000173A9                 db    9
.eh_frame_hdr:00000000000173AA                 db    0
.eh_frame_hdr:00000000000173AB                 db    0
.eh_frame_hdr:00000000000173AC                 db 0E0h
.eh_frame_hdr:00000000000173AD                 db 0CAh
.eh_frame_hdr:00000000000173AE                 db 0FEh
.eh_frame_hdr:00000000000173AF                 db 0FFh
.eh_frame_hdr:00000000000173B0                 db  98h
.eh_frame_hdr:00000000000173B1                 db    9
.eh_frame_hdr:00000000000173B2                 db    0
.eh_frame_hdr:00000000000173B3                 db    0
.eh_frame_hdr:00000000000173B4                 db 0A0h
.eh_frame_hdr:00000000000173B5                 db 0CBh
.eh_frame_hdr:00000000000173B6                 db 0FEh
.eh_frame_hdr:00000000000173B7                 db 0FFh
.eh_frame_hdr:00000000000173B8                 db    8
.eh_frame_hdr:00000000000173B9                 db  0Ah
.eh_frame_hdr:00000000000173BA                 db    0
.eh_frame_hdr:00000000000173BB                 db    0
.eh_frame_hdr:00000000000173BC                 db 0B0h
.eh_frame_hdr:00000000000173BD                 db 0CBh
.eh_frame_hdr:00000000000173BE                 db 0FEh
.eh_frame_hdr:00000000000173BF                 db 0FFh
.eh_frame_hdr:00000000000173C0                 db  1Ch
.eh_frame_hdr:00000000000173C1                 db  0Ah
.eh_frame_hdr:00000000000173C2                 db    0
.eh_frame_hdr:00000000000173C3                 db    0
.eh_frame_hdr:00000000000173C4                 db 0C0h
.eh_frame_hdr:00000000000173C5                 db 0CBh
.eh_frame_hdr:00000000000173C6                 db 0FEh
.eh_frame_hdr:00000000000173C7                 db 0FFh
.eh_frame_hdr:00000000000173C8                 db  30h ; 0
.eh_frame_hdr:00000000000173C9                 db  0Ah
.eh_frame_hdr:00000000000173CA                 db    0
.eh_frame_hdr:00000000000173CB                 db    0
.eh_frame_hdr:00000000000173CC                 db  70h ; p
.eh_frame_hdr:00000000000173CD                 db 0CCh
.eh_frame_hdr:00000000000173CE                 db 0FEh
.eh_frame_hdr:00000000000173CF                 db 0FFh
.eh_frame_hdr:00000000000173D0                 db  60h ; `
.eh_frame_hdr:00000000000173D1                 db  0Ah
.eh_frame_hdr:00000000000173D2                 db    0
.eh_frame_hdr:00000000000173D3                 db    0
.eh_frame_hdr:00000000000173D4                 db 0B0h
.eh_frame_hdr:00000000000173D5                 db 0CDh
.eh_frame_hdr:00000000000173D6                 db 0FEh
.eh_frame_hdr:00000000000173D7                 db 0FFh
.eh_frame_hdr:00000000000173D8                 db  9Ch
.eh_frame_hdr:00000000000173D9                 db  0Ah
.eh_frame_hdr:00000000000173DA                 db    0
.eh_frame_hdr:00000000000173DB                 db    0
.eh_frame_hdr:00000000000173DC                 db 0F0h
.eh_frame_hdr:00000000000173DD                 db 0CEh
.eh_frame_hdr:00000000000173DE                 db 0FEh
.eh_frame_hdr:00000000000173DF                 db 0FFh
.eh_frame_hdr:00000000000173E0                 db 0E8h
.eh_frame_hdr:00000000000173E1                 db  0Ah
.eh_frame_hdr:00000000000173E2                 db    0
.eh_frame_hdr:00000000000173E3                 db    0
.eh_frame_hdr:00000000000173E4                 db  20h
.eh_frame_hdr:00000000000173E5                 db 0CFh
.eh_frame_hdr:00000000000173E6                 db 0FEh
.eh_frame_hdr:00000000000173E7                 db 0FFh
.eh_frame_hdr:00000000000173E8                 db    8
.eh_frame_hdr:00000000000173E9                 db  0Bh
.eh_frame_hdr:00000000000173EA                 db    0
.eh_frame_hdr:00000000000173EB                 db    0
.eh_frame_hdr:00000000000173EC                 db  80h
.eh_frame_hdr:00000000000173ED                 db 0CFh
.eh_frame_hdr:00000000000173EE                 db 0FEh
.eh_frame_hdr:00000000000173EF                 db 0FFh
.eh_frame_hdr:00000000000173F0                 db  34h ; 4
.eh_frame_hdr:00000000000173F1                 db  0Bh
.eh_frame_hdr:00000000000173F2                 db    0
.eh_frame_hdr:00000000000173F3                 db    0
.eh_frame_hdr:00000000000173F4                 db 0A0h
.eh_frame_hdr:00000000000173F5                 db 0CFh
.eh_frame_hdr:00000000000173F6                 db 0FEh
.eh_frame_hdr:00000000000173F7                 db 0FFh
.eh_frame_hdr:00000000000173F8                 db  48h ; H
.eh_frame_hdr:00000000000173F9                 db  0Bh
.eh_frame_hdr:00000000000173FA                 db    0
.eh_frame_hdr:00000000000173FB                 db    0
.eh_frame_hdr:00000000000173FC                 db  50h ; P
.eh_frame_hdr:00000000000173FD                 db 0D2h
.eh_frame_hdr:00000000000173FE                 db 0FEh
.eh_frame_hdr:00000000000173FF                 db 0FFh
.eh_frame_hdr:0000000000017400                 db 0A8h
.eh_frame_hdr:0000000000017401                 db  0Bh
.eh_frame_hdr:0000000000017402                 db    0
.eh_frame_hdr:0000000000017403                 db    0
.eh_frame_hdr:0000000000017404                 db  80h
.eh_frame_hdr:0000000000017405                 db 0D4h
.eh_frame_hdr:0000000000017406                 db 0FEh
.eh_frame_hdr:0000000000017407                 db 0FFh
.eh_frame_hdr:0000000000017408                 db 0F0h
.eh_frame_hdr:0000000000017409                 db  0Bh
.eh_frame_hdr:000000000001740A                 db    0
.eh_frame_hdr:000000000001740B                 db    0
.eh_frame_hdr:000000000001740C                 db  20h
.eh_frame_hdr:000000000001740D                 db 0D5h
.eh_frame_hdr:000000000001740E                 db 0FEh
.eh_frame_hdr:000000000001740F                 db 0FFh
.eh_frame_hdr:0000000000017410                 db  10h
.eh_frame_hdr:0000000000017411                 db  0Ch
.eh_frame_hdr:0000000000017412                 db    0
.eh_frame_hdr:0000000000017413                 db    0
.eh_frame_hdr:0000000000017414                 db  10h
.eh_frame_hdr:0000000000017415                 db 0D6h
.eh_frame_hdr:0000000000017416                 db 0FEh
.eh_frame_hdr:0000000000017417                 db 0FFh
.eh_frame_hdr:0000000000017418                 db  54h ; T
.eh_frame_hdr:0000000000017419                 db  0Ch
.eh_frame_hdr:000000000001741A                 db    0
.eh_frame_hdr:000000000001741B                 db    0
.eh_frame_hdr:000000000001741C                 db  50h ; P
.eh_frame_hdr:000000000001741D                 db 0E8h
.eh_frame_hdr:000000000001741E                 db 0FEh
.eh_frame_hdr:000000000001741F                 db 0FFh
.eh_frame_hdr:0000000000017420                 db 0CCh
.eh_frame_hdr:0000000000017421                 db  0Ch
.eh_frame_hdr:0000000000017422                 db    0
.eh_frame_hdr:0000000000017423                 db    0
.eh_frame_hdr:0000000000017424                 db    0
.eh_frame_hdr:0000000000017425                 db 0EAh
.eh_frame_hdr:0000000000017426                 db 0FEh
.eh_frame_hdr:0000000000017427                 db 0FFh
.eh_frame_hdr:0000000000017428                 db  38h ; 8
.eh_frame_hdr:0000000000017429                 db  0Dh
.eh_frame_hdr:000000000001742A                 db    0
.eh_frame_hdr:000000000001742B                 db    0
.eh_frame_hdr:000000000001742C                 db  40h ; @
.eh_frame_hdr:000000000001742D                 db 0EAh
.eh_frame_hdr:000000000001742E                 db 0FEh
.eh_frame_hdr:000000000001742F                 db 0FFh
.eh_frame_hdr:0000000000017430                 db  64h ; d
.eh_frame_hdr:0000000000017431                 db  0Dh
.eh_frame_hdr:0000000000017432                 db    0
.eh_frame_hdr:0000000000017433                 db    0
.eh_frame_hdr:0000000000017434                 db  60h ; `
.eh_frame_hdr:0000000000017435                 db 0EAh
.eh_frame_hdr:0000000000017436                 db 0FEh
.eh_frame_hdr:0000000000017437                 db 0FFh
.eh_frame_hdr:0000000000017438                 db  78h ; x
.eh_frame_hdr:0000000000017439                 db  0Dh
.eh_frame_hdr:000000000001743A                 db    0
.eh_frame_hdr:000000000001743B                 db    0
.eh_frame_hdr:000000000001743C                 db  80h
.eh_frame_hdr:000000000001743D                 db 0EAh
.eh_frame_hdr:000000000001743E                 db 0FEh
.eh_frame_hdr:000000000001743F                 db 0FFh
.eh_frame_hdr:0000000000017440                 db  8Ch
.eh_frame_hdr:0000000000017441                 db  0Dh
.eh_frame_hdr:0000000000017442                 db    0
.eh_frame_hdr:0000000000017443                 db    0
.eh_frame_hdr:0000000000017444                 db 0C0h
.eh_frame_hdr:0000000000017445                 db 0EAh
.eh_frame_hdr:0000000000017446                 db 0FEh
.eh_frame_hdr:0000000000017447                 db 0FFh
.eh_frame_hdr:0000000000017448                 db 0A0h
.eh_frame_hdr:0000000000017449                 db  0Dh
.eh_frame_hdr:000000000001744A                 db    0
.eh_frame_hdr:000000000001744B                 db    0
.eh_frame_hdr:000000000001744C                 db 0E0h
.eh_frame_hdr:000000000001744D                 db 0EAh
.eh_frame_hdr:000000000001744E                 db 0FEh
.eh_frame_hdr:000000000001744F                 db 0FFh
.eh_frame_hdr:0000000000017450                 db 0B4h
.eh_frame_hdr:0000000000017451                 db  0Dh
.eh_frame_hdr:0000000000017452                 db    0
.eh_frame_hdr:0000000000017453                 db    0
.eh_frame_hdr:0000000000017454                 db  10h
.eh_frame_hdr:0000000000017455                 db 0EBh
.eh_frame_hdr:0000000000017456                 db 0FEh
.eh_frame_hdr:0000000000017457                 db 0FFh
.eh_frame_hdr:0000000000017458                 db 0C8h
.eh_frame_hdr:0000000000017459                 db  0Dh
.eh_frame_hdr:000000000001745A                 db    0
.eh_frame_hdr:000000000001745B                 db    0
.eh_frame_hdr:000000000001745C                 db  90h
.eh_frame_hdr:000000000001745D                 db 0EBh
.eh_frame_hdr:000000000001745E                 db 0FEh
.eh_frame_hdr:000000000001745F                 db 0FFh
.eh_frame_hdr:0000000000017460                 db  1Ch
.eh_frame_hdr:0000000000017461                 db  0Eh
.eh_frame_hdr:0000000000017462                 db    0
.eh_frame_hdr:0000000000017463                 db    0
.eh_frame_hdr:0000000000017464                 db  80h
.eh_frame_hdr:0000000000017465                 db 0ECh
.eh_frame_hdr:0000000000017466                 db 0FEh
.eh_frame_hdr:0000000000017467                 db 0FFh
.eh_frame_hdr:0000000000017468                 db  88h
.eh_frame_hdr:0000000000017469                 db  0Eh
.eh_frame_hdr:000000000001746A                 db    0
.eh_frame_hdr:000000000001746B                 db    0
.eh_frame_hdr:000000000001746C                 db  90h
.eh_frame_hdr:000000000001746D                 db 0ECh
.eh_frame_hdr:000000000001746E                 db 0FEh
.eh_frame_hdr:000000000001746F                 db 0FFh
.eh_frame_hdr:0000000000017470                 db  9Ch
.eh_frame_hdr:0000000000017471                 db  0Eh
.eh_frame_hdr:0000000000017472                 db    0
.eh_frame_hdr:0000000000017473                 db    0
.eh_frame_hdr:0000000000017474                 db  30h ; 0
.eh_frame_hdr:0000000000017475                 db 0EDh
.eh_frame_hdr:0000000000017476                 db 0FEh
.eh_frame_hdr:0000000000017477                 db 0FFh
.eh_frame_hdr:0000000000017478                 db 0C8h
.eh_frame_hdr:0000000000017479                 db  0Eh
.eh_frame_hdr:000000000001747A                 db    0
.eh_frame_hdr:000000000001747B                 db    0
.eh_frame_hdr:000000000001747C                 db  50h ; P
.eh_frame_hdr:000000000001747D                 db 0EDh
.eh_frame_hdr:000000000001747E                 db 0FEh
.eh_frame_hdr:000000000001747F                 db 0FFh
.eh_frame_hdr:0000000000017480                 db 0DCh
.eh_frame_hdr:0000000000017481                 db  0Eh
.eh_frame_hdr:0000000000017482                 db    0
.eh_frame_hdr:0000000000017483                 db    0
.eh_frame_hdr:0000000000017484                 db  60h ; `
.eh_frame_hdr:0000000000017485                 db 0EDh
.eh_frame_hdr:0000000000017486                 db 0FEh
.eh_frame_hdr:0000000000017487                 db 0FFh
.eh_frame_hdr:0000000000017488                 db 0F0h
.eh_frame_hdr:0000000000017489                 db  0Eh
.eh_frame_hdr:000000000001748A                 db    0
.eh_frame_hdr:000000000001748B                 db    0
.eh_frame_hdr:000000000001748C                 db  80h
.eh_frame_hdr:000000000001748D                 db 0EDh
.eh_frame_hdr:000000000001748E                 db 0FEh
.eh_frame_hdr:000000000001748F                 db 0FFh
.eh_frame_hdr:0000000000017490                 db    4
.eh_frame_hdr:0000000000017491                 db  0Fh
.eh_frame_hdr:0000000000017492                 db    0
.eh_frame_hdr:0000000000017493                 db    0
.eh_frame_hdr:0000000000017494                 db 0A0h
.eh_frame_hdr:0000000000017495                 db 0EDh
.eh_frame_hdr:0000000000017496                 db 0FEh
.eh_frame_hdr:0000000000017497                 db 0FFh
.eh_frame_hdr:0000000000017498                 db  18h
.eh_frame_hdr:0000000000017499                 db  0Fh
.eh_frame_hdr:000000000001749A                 db    0
.eh_frame_hdr:000000000001749B                 db    0
.eh_frame_hdr:000000000001749C                 db  30h ; 0
.eh_frame_hdr:000000000001749D                 db 0EEh
.eh_frame_hdr:000000000001749E                 db 0FEh
.eh_frame_hdr:000000000001749F                 db 0FFh
.eh_frame_hdr:00000000000174A0                 db  34h ; 4
.eh_frame_hdr:00000000000174A1                 db  0Fh
.eh_frame_hdr:00000000000174A2                 db    0
.eh_frame_hdr:00000000000174A3                 db    0
.eh_frame_hdr:00000000000174A4                 db 0C0h
.eh_frame_hdr:00000000000174A5                 db 0EEh
.eh_frame_hdr:00000000000174A6                 db 0FEh
.eh_frame_hdr:00000000000174A7                 db 0FFh
.eh_frame_hdr:00000000000174A8                 db  50h ; P
.eh_frame_hdr:00000000000174A9                 db  0Fh
.eh_frame_hdr:00000000000174AA                 db    0
.eh_frame_hdr:00000000000174AB                 db    0
.eh_frame_hdr:00000000000174AC                 db 0D0h
.eh_frame_hdr:00000000000174AD                 db 0EEh
.eh_frame_hdr:00000000000174AE                 db 0FEh
.eh_frame_hdr:00000000000174AF                 db 0FFh
.eh_frame_hdr:00000000000174B0                 db  64h ; d
.eh_frame_hdr:00000000000174B1                 db  0Fh
.eh_frame_hdr:00000000000174B2                 db    0
.eh_frame_hdr:00000000000174B3                 db    0
.eh_frame_hdr:00000000000174B4                 db 0E0h
.eh_frame_hdr:00000000000174B5                 db 0EEh
.eh_frame_hdr:00000000000174B6                 db 0FEh
.eh_frame_hdr:00000000000174B7                 db 0FFh
.eh_frame_hdr:00000000000174B8                 db  78h ; x
.eh_frame_hdr:00000000000174B9                 db  0Fh
.eh_frame_hdr:00000000000174BA                 db    0
.eh_frame_hdr:00000000000174BB                 db    0
.eh_frame_hdr:00000000000174BC                 db  80h
.eh_frame_hdr:00000000000174BD                 db 0EFh
.eh_frame_hdr:00000000000174BE                 db 0FEh
.eh_frame_hdr:00000000000174BF                 db 0FFh
.eh_frame_hdr:00000000000174C0                 db  94h
.eh_frame_hdr:00000000000174C1                 db  0Fh
.eh_frame_hdr:00000000000174C2                 db    0
.eh_frame_hdr:00000000000174C3                 db    0
.eh_frame_hdr:00000000000174C4                 db  90h
.eh_frame_hdr:00000000000174C5                 db 0EFh
.eh_frame_hdr:00000000000174C6                 db 0FEh
.eh_frame_hdr:00000000000174C7                 db 0FFh
.eh_frame_hdr:00000000000174C8                 db 0A8h
.eh_frame_hdr:00000000000174C9                 db  0Fh
.eh_frame_hdr:00000000000174CA                 db    0
.eh_frame_hdr:00000000000174CB                 db    0
.eh_frame_hdr:00000000000174CC                 db 0B0h
.eh_frame_hdr:00000000000174CD                 db 0EFh
.eh_frame_hdr:00000000000174CE                 db 0FEh
.eh_frame_hdr:00000000000174CF                 db 0FFh
.eh_frame_hdr:00000000000174D0                 db 0BCh
.eh_frame_hdr:00000000000174D1                 db  0Fh
.eh_frame_hdr:00000000000174D2                 db    0
.eh_frame_hdr:00000000000174D3                 db    0
.eh_frame_hdr:00000000000174D4                 db 0C0h
.eh_frame_hdr:00000000000174D5                 db 0EFh
.eh_frame_hdr:00000000000174D6                 db 0FEh
.eh_frame_hdr:00000000000174D7                 db 0FFh
.eh_frame_hdr:00000000000174D8                 db 0D0h
.eh_frame_hdr:00000000000174D9                 db  0Fh
.eh_frame_hdr:00000000000174DA                 db    0
.eh_frame_hdr:00000000000174DB                 db    0
.eh_frame_hdr:00000000000174DC                 db  50h ; P
.eh_frame_hdr:00000000000174DD                 db 0F0h
.eh_frame_hdr:00000000000174DE                 db 0FEh
.eh_frame_hdr:00000000000174DF                 db 0FFh
.eh_frame_hdr:00000000000174E0                 db 0ECh
.eh_frame_hdr:00000000000174E1                 db  0Fh
.eh_frame_hdr:00000000000174E2                 db    0
.eh_frame_hdr:00000000000174E3                 db    0
.eh_frame_hdr:00000000000174E4                 db 0F0h
.eh_frame_hdr:00000000000174E5                 db 0F0h
.eh_frame_hdr:00000000000174E6                 db 0FEh
.eh_frame_hdr:00000000000174E7                 db 0FFh
.eh_frame_hdr:00000000000174E8                 db    8
.eh_frame_hdr:00000000000174E9                 db  10h
.eh_frame_hdr:00000000000174EA                 db    0
.eh_frame_hdr:00000000000174EB                 db    0
.eh_frame_hdr:00000000000174EC                 db    0
.eh_frame_hdr:00000000000174ED                 db 0F1h
.eh_frame_hdr:00000000000174EE                 db 0FEh
.eh_frame_hdr:00000000000174EF                 db 0FFh
.eh_frame_hdr:00000000000174F0                 db  1Ch
.eh_frame_hdr:00000000000174F1                 db  10h
.eh_frame_hdr:00000000000174F2                 db    0
.eh_frame_hdr:00000000000174F3                 db    0
.eh_frame_hdr:00000000000174F4                 db  20h
.eh_frame_hdr:00000000000174F5                 db 0F1h
.eh_frame_hdr:00000000000174F6                 db 0FEh
.eh_frame_hdr:00000000000174F7                 db 0FFh
.eh_frame_hdr:00000000000174F8                 db  30h ; 0
.eh_frame_hdr:00000000000174F9                 db  10h
.eh_frame_hdr:00000000000174FA                 db    0
.eh_frame_hdr:00000000000174FB                 db    0
.eh_frame_hdr:00000000000174FC                 db  40h ; @
.eh_frame_hdr:00000000000174FD                 db 0F1h
.eh_frame_hdr:00000000000174FE                 db 0FEh
.eh_frame_hdr:00000000000174FF                 db 0FFh
.eh_frame_hdr:0000000000017500                 db  44h ; D
.eh_frame_hdr:0000000000017501                 db  10h
.eh_frame_hdr:0000000000017502                 db    0
.eh_frame_hdr:0000000000017503                 db    0
.eh_frame_hdr:0000000000017504                 db  50h ; P
.eh_frame_hdr:0000000000017505                 db 0F1h
.eh_frame_hdr:0000000000017506                 db 0FEh
.eh_frame_hdr:0000000000017507                 db 0FFh
.eh_frame_hdr:0000000000017508                 db  58h ; X
.eh_frame_hdr:0000000000017509                 db  10h
.eh_frame_hdr:000000000001750A                 db    0
.eh_frame_hdr:000000000001750B                 db    0
.eh_frame_hdr:000000000001750C                 db  70h ; p
.eh_frame_hdr:000000000001750D                 db 0F1h
.eh_frame_hdr:000000000001750E                 db 0FEh
.eh_frame_hdr:000000000001750F                 db 0FFh
.eh_frame_hdr:0000000000017510                 db  6Ch ; l
.eh_frame_hdr:0000000000017511                 db  10h
.eh_frame_hdr:0000000000017512                 db    0
.eh_frame_hdr:0000000000017513                 db    0
.eh_frame_hdr:0000000000017514                 db  90h
.eh_frame_hdr:0000000000017515                 db 0F1h
.eh_frame_hdr:0000000000017516                 db 0FEh
.eh_frame_hdr:0000000000017517                 db 0FFh
.eh_frame_hdr:0000000000017518                 db  80h
.eh_frame_hdr:0000000000017519                 db  10h
.eh_frame_hdr:000000000001751A                 db    0
.eh_frame_hdr:000000000001751B                 db    0
.eh_frame_hdr:000000000001751C                 db 0B0h
.eh_frame_hdr:000000000001751D                 db 0F1h
.eh_frame_hdr:000000000001751E                 db 0FEh
.eh_frame_hdr:000000000001751F                 db 0FFh
.eh_frame_hdr:0000000000017520                 db  98h
.eh_frame_hdr:0000000000017521                 db  10h
.eh_frame_hdr:0000000000017522                 db    0
.eh_frame_hdr:0000000000017523                 db    0
.eh_frame_hdr:0000000000017524                 db 0F0h
.eh_frame_hdr:0000000000017525                 db 0F1h
.eh_frame_hdr:0000000000017526                 db 0FEh
.eh_frame_hdr:0000000000017527                 db 0FFh
.eh_frame_hdr:0000000000017528                 db 0C0h
.eh_frame_hdr:0000000000017529                 db  10h
.eh_frame_hdr:000000000001752A                 db    0
.eh_frame_hdr:000000000001752B                 db    0
.eh_frame_hdr:000000000001752C                 db 0A0h
.eh_frame_hdr:000000000001752D                 db 0F4h
.eh_frame_hdr:000000000001752E                 db 0FEh
.eh_frame_hdr:000000000001752F                 db 0FFh
.eh_frame_hdr:0000000000017530                 db 0D8h
.eh_frame_hdr:0000000000017531                 db  10h
.eh_frame_hdr:0000000000017532                 db    0
.eh_frame_hdr:0000000000017533                 db    0
.eh_frame_hdr:0000000000017534                 db 0C0h
.eh_frame_hdr:0000000000017535                 db 0F8h
.eh_frame_hdr:0000000000017536                 db 0FEh
.eh_frame_hdr:0000000000017537                 db 0FFh
.eh_frame_hdr:0000000000017538                 db 0ECh
.eh_frame_hdr:0000000000017539                 db  11h
.eh_frame_hdr:000000000001753A                 db    0
.eh_frame_hdr:000000000001753B                 db    0
.eh_frame_hdr:000000000001753C                 db 0E0h
.eh_frame_hdr:000000000001753D                 db 0F8h
.eh_frame_hdr:000000000001753E                 db 0FEh
.eh_frame_hdr:000000000001753F                 db 0FFh
.eh_frame_hdr:0000000000017540                 db    0
.eh_frame_hdr:0000000000017541                 db  12h
.eh_frame_hdr:0000000000017542                 db    0
.eh_frame_hdr:0000000000017543                 db    0
.eh_frame_hdr:0000000000017544                 db  60h ; `
.eh_frame_hdr:0000000000017545                 db 0F9h
.eh_frame_hdr:0000000000017546                 db 0FEh
.eh_frame_hdr:0000000000017547                 db 0FFh
.eh_frame_hdr:0000000000017548                 db  1Ch
.eh_frame_hdr:0000000000017549                 db  12h
.eh_frame_hdr:000000000001754A                 db    0
.eh_frame_hdr:000000000001754B                 db    0
.eh_frame_hdr:000000000001754C                 db  40h ; @
.eh_frame_hdr:000000000001754D                 db 0FAh
.eh_frame_hdr:000000000001754E                 db 0FEh
.eh_frame_hdr:000000000001754F                 db 0FFh
.eh_frame_hdr:0000000000017550                 db  48h ; H
.eh_frame_hdr:0000000000017551                 db  12h
.eh_frame_hdr:0000000000017552                 db    0
.eh_frame_hdr:0000000000017553                 db    0
.eh_frame_hdr:0000000000017554                 db 0C0h
.eh_frame_hdr:0000000000017555                 db 0FAh
.eh_frame_hdr:0000000000017556                 db 0FEh
.eh_frame_hdr:0000000000017557                 db 0FFh
.eh_frame_hdr:0000000000017558                 db  68h ; h
.eh_frame_hdr:0000000000017559                 db  12h
.eh_frame_hdr:000000000001755A                 db    0
.eh_frame_hdr:000000000001755B                 db    0
.eh_frame_hdr:000000000001755C                 db 0E0h
.eh_frame_hdr:000000000001755D                 db 0FAh
.eh_frame_hdr:000000000001755E                 db 0FEh
.eh_frame_hdr:000000000001755F                 db 0FFh
.eh_frame_hdr:0000000000017560                 db  84h
.eh_frame_hdr:0000000000017561                 db  12h
.eh_frame_hdr:0000000000017562                 db    0
.eh_frame_hdr:0000000000017563                 db    0
.eh_frame_hdr:0000000000017564                 db  10h
.eh_frame_hdr:0000000000017565                 db 0FBh
.eh_frame_hdr:0000000000017566                 db 0FEh
.eh_frame_hdr:0000000000017567                 db 0FFh
.eh_frame_hdr:0000000000017568                 db  98h
.eh_frame_hdr:0000000000017569                 db  12h
.eh_frame_hdr:000000000001756A                 db    0
.eh_frame_hdr:000000000001756B                 db    0
.eh_frame_hdr:000000000001756C                 db  20h
.eh_frame_hdr:000000000001756D                 db 0FBh
.eh_frame_hdr:000000000001756E                 db 0FEh
.eh_frame_hdr:000000000001756F                 db 0FFh
.eh_frame_hdr:0000000000017570                 db 0ACh
.eh_frame_hdr:0000000000017571                 db  12h
.eh_frame_hdr:0000000000017572                 db    0
.eh_frame_hdr:0000000000017573                 db    0
.eh_frame_hdr:0000000000017574                 db  60h ; `
.eh_frame_hdr:0000000000017575                 db 0FBh
.eh_frame_hdr:0000000000017576                 db 0FEh
.eh_frame_hdr:0000000000017577                 db 0FFh
.eh_frame_hdr:0000000000017578                 db 0D0h
.eh_frame_hdr:0000000000017579                 db  12h
.eh_frame_hdr:000000000001757A                 db    0
.eh_frame_hdr:000000000001757B                 db    0
.eh_frame_hdr:000000000001757C                 db  90h
.eh_frame_hdr:000000000001757D                 db 0FBh
.eh_frame_hdr:000000000001757E                 db 0FEh
.eh_frame_hdr:000000000001757F                 db 0FFh
.eh_frame_hdr:0000000000017580                 db 0E4h
.eh_frame_hdr:0000000000017581                 db  12h
.eh_frame_hdr:0000000000017582                 db    0
.eh_frame_hdr:0000000000017583                 db    0
.eh_frame_hdr:0000000000017584                 db  20h
.eh_frame_hdr:0000000000017585                 db 0FCh
.eh_frame_hdr:0000000000017586                 db 0FEh
.eh_frame_hdr:0000000000017587                 db 0FFh
.eh_frame_hdr:0000000000017588                 db 0FCh
.eh_frame_hdr:0000000000017589                 db  12h
.eh_frame_hdr:000000000001758A                 db    0
.eh_frame_hdr:000000000001758B                 db    0
.eh_frame_hdr:000000000001758C                 db  70h ; p
.eh_frame_hdr:000000000001758D                 db 0FCh
.eh_frame_hdr:000000000001758E                 db 0FEh
.eh_frame_hdr:000000000001758F                 db 0FFh
.eh_frame_hdr:0000000000017590                 db  14h
.eh_frame_hdr:0000000000017591                 db  13h
.eh_frame_hdr:0000000000017592                 db    0
.eh_frame_hdr:0000000000017593                 db    0
.eh_frame_hdr:0000000000017594                 db  90h
.eh_frame_hdr:0000000000017595                 db 0FCh
.eh_frame_hdr:0000000000017596                 db 0FEh
.eh_frame_hdr:0000000000017597                 db 0FFh
.eh_frame_hdr:0000000000017598                 db  30h ; 0
.eh_frame_hdr:0000000000017599                 db  13h
.eh_frame_hdr:000000000001759A                 db    0
.eh_frame_hdr:000000000001759B                 db    0
.eh_frame_hdr:000000000001759C                 db 0C0h
.eh_frame_hdr:000000000001759D                 db 0FCh
.eh_frame_hdr:000000000001759E                 db 0FEh
.eh_frame_hdr:000000000001759F                 db 0FFh
.eh_frame_hdr:00000000000175A0                 db  4Ch ; L
.eh_frame_hdr:00000000000175A1                 db  13h
.eh_frame_hdr:00000000000175A2                 db    0
.eh_frame_hdr:00000000000175A3                 db    0
.eh_frame_hdr:00000000000175A4                 db 0F0h
.eh_frame_hdr:00000000000175A5                 db 0FCh
.eh_frame_hdr:00000000000175A6                 db 0FEh
.eh_frame_hdr:00000000000175A7                 db 0FFh
.eh_frame_hdr:00000000000175A8                 db  74h ; t
.eh_frame_hdr:00000000000175A9                 db  13h
.eh_frame_hdr:00000000000175AA                 db    0
.eh_frame_hdr:00000000000175AB                 db    0
.eh_frame_hdr:00000000000175AC                 db  10h
.eh_frame_hdr:00000000000175AD                 db 0FDh
.eh_frame_hdr:00000000000175AE                 db 0FEh
.eh_frame_hdr:00000000000175AF                 db 0FFh
.eh_frame_hdr:00000000000175B0                 db  90h
.eh_frame_hdr:00000000000175B1                 db  13h
.eh_frame_hdr:00000000000175B2                 db    0
.eh_frame_hdr:00000000000175B3                 db    0
.eh_frame_hdr:00000000000175B4                 db  50h ; P
.eh_frame_hdr:00000000000175B5                 db 0FDh
.eh_frame_hdr:00000000000175B6                 db 0FEh
.eh_frame_hdr:00000000000175B7                 db 0FFh
.eh_frame_hdr:00000000000175B8                 db 0A8h
.eh_frame_hdr:00000000000175B9                 db  13h
.eh_frame_hdr:00000000000175BA                 db    0
.eh_frame_hdr:00000000000175BB                 db    0
.eh_frame_hdr:00000000000175BC                 db 0E0h
.eh_frame_hdr:00000000000175BD                 db 0FDh
.eh_frame_hdr:00000000000175BE                 db 0FEh
.eh_frame_hdr:00000000000175BF                 db 0FFh
.eh_frame_hdr:00000000000175C0                 db 0E8h
.eh_frame_hdr:00000000000175C1                 db  13h
.eh_frame_hdr:00000000000175C2                 db    0
.eh_frame_hdr:00000000000175C3                 db    0
.eh_frame_hdr:00000000000175C4                 db  10h
.eh_frame_hdr:00000000000175C5                 db 0FFh
.eh_frame_hdr:00000000000175C6                 db 0FEh
.eh_frame_hdr:00000000000175C7                 db 0FFh
.eh_frame_hdr:00000000000175C8                 db 0FCh
.eh_frame_hdr:00000000000175C9                 db  13h
.eh_frame_hdr:00000000000175CA                 db    0
.eh_frame_hdr:00000000000175CB                 db    0
.eh_frame_hdr:00000000000175CC                 db  30h ; 0
.eh_frame_hdr:00000000000175CD                 db 0FFh
.eh_frame_hdr:00000000000175CE                 db 0FEh
.eh_frame_hdr:00000000000175CF                 db 0FFh
.eh_frame_hdr:00000000000175D0                 db  10h
.eh_frame_hdr:00000000000175D1                 db  14h
.eh_frame_hdr:00000000000175D2                 db    0
.eh_frame_hdr:00000000000175D3                 db    0
.eh_frame_hdr:00000000000175D4                 db  60h ; `
.eh_frame_hdr:00000000000175D5                 db    1
.eh_frame_hdr:00000000000175D6                 db 0FFh
.eh_frame_hdr:00000000000175D7                 db 0FFh
.eh_frame_hdr:00000000000175D8                 db 0A4h
.eh_frame_hdr:00000000000175D9                 db  14h
.eh_frame_hdr:00000000000175DA                 db    0
.eh_frame_hdr:00000000000175DB                 db    0
.eh_frame_hdr:00000000000175DC                 db 0D0h
.eh_frame_hdr:00000000000175DD                 db    1
.eh_frame_hdr:00000000000175DE                 db 0FFh
.eh_frame_hdr:00000000000175DF                 db 0FFh
.eh_frame_hdr:00000000000175E0                 db 0B8h
.eh_frame_hdr:00000000000175E1                 db  14h
.eh_frame_hdr:00000000000175E2                 db    0
.eh_frame_hdr:00000000000175E3                 db    0
.eh_frame_hdr:00000000000175E4                 db  40h ; @
.eh_frame_hdr:00000000000175E5                 db    2
.eh_frame_hdr:00000000000175E6                 db 0FFh
.eh_frame_hdr:00000000000175E7                 db 0FFh
.eh_frame_hdr:00000000000175E8                 db 0E4h
.eh_frame_hdr:00000000000175E9                 db  14h
.eh_frame_hdr:00000000000175EA                 db    0
.eh_frame_hdr:00000000000175EB                 db    0
.eh_frame_hdr:00000000000175EC                 db 0A0h
.eh_frame_hdr:00000000000175ED                 db    2
.eh_frame_hdr:00000000000175EE                 db 0FFh
.eh_frame_hdr:00000000000175EF                 db 0FFh
.eh_frame_hdr:00000000000175F0                 db  10h
.eh_frame_hdr:00000000000175F1                 db  15h
.eh_frame_hdr:00000000000175F2                 db    0
.eh_frame_hdr:00000000000175F3                 db    0
.eh_frame_hdr:00000000000175F4                 db  40h ; @
.eh_frame_hdr:00000000000175F5                 db    3
.eh_frame_hdr:00000000000175F6                 db 0FFh
.eh_frame_hdr:00000000000175F7                 db 0FFh
.eh_frame_hdr:00000000000175F8                 db  44h ; D
.eh_frame_hdr:00000000000175F9                 db  15h
.eh_frame_hdr:00000000000175FA                 db    0
.eh_frame_hdr:00000000000175FB                 db    0
.eh_frame_hdr:00000000000175FC                 db 0B0h
.eh_frame_hdr:00000000000175FD                 db    3
.eh_frame_hdr:00000000000175FE                 db 0FFh
.eh_frame_hdr:00000000000175FF                 db 0FFh
.eh_frame_hdr:0000000000017600                 db  70h ; p
.eh_frame_hdr:0000000000017601                 db  15h
.eh_frame_hdr:0000000000017602                 db    0
.eh_frame_hdr:0000000000017603                 db    0
.eh_frame_hdr:0000000000017604                 db 0E0h
.eh_frame_hdr:0000000000017605                 db    4
.eh_frame_hdr:0000000000017606                 db 0FFh
.eh_frame_hdr:0000000000017607                 db 0FFh
.eh_frame_hdr:0000000000017608                 db 0A8h
.eh_frame_hdr:0000000000017609                 db  15h
.eh_frame_hdr:000000000001760A                 db    0
.eh_frame_hdr:000000000001760B                 db    0
.eh_frame_hdr:000000000001760C                 db 0D0h
.eh_frame_hdr:000000000001760D                 db    5
.eh_frame_hdr:000000000001760E                 db 0FFh
.eh_frame_hdr:000000000001760F                 db 0FFh
.eh_frame_hdr:0000000000017610                 db 0F8h
.eh_frame_hdr:0000000000017611                 db  15h
.eh_frame_hdr:0000000000017612                 db    0
.eh_frame_hdr:0000000000017613                 db    0
.eh_frame_hdr:0000000000017614                 db  40h ; @
.eh_frame_hdr:0000000000017615                 db    6
.eh_frame_hdr:0000000000017616                 db 0FFh
.eh_frame_hdr:0000000000017617                 db 0FFh
.eh_frame_hdr:0000000000017618                 db  28h ; (
.eh_frame_hdr:0000000000017619                 db  16h
.eh_frame_hdr:000000000001761A                 db    0
.eh_frame_hdr:000000000001761B                 db    0
.eh_frame_hdr:000000000001761C                 db  10h
.eh_frame_hdr:000000000001761D                 db    8
.eh_frame_hdr:000000000001761E                 db 0FFh
.eh_frame_hdr:000000000001761F                 db 0FFh
.eh_frame_hdr:0000000000017620                 db  74h ; t
.eh_frame_hdr:0000000000017621                 db  16h
.eh_frame_hdr:0000000000017622                 db    0
.eh_frame_hdr:0000000000017623                 db    0
.eh_frame_hdr:0000000000017624                 db  30h ; 0
.eh_frame_hdr:0000000000017625                 db  0Eh
.eh_frame_hdr:0000000000017626                 db 0FFh
.eh_frame_hdr:0000000000017627                 db 0FFh
.eh_frame_hdr:0000000000017628                 db 0C0h
.eh_frame_hdr:0000000000017629                 db  16h
.eh_frame_hdr:000000000001762A                 db    0
.eh_frame_hdr:000000000001762B                 db    0
.eh_frame_hdr:000000000001762C                 db  80h
.eh_frame_hdr:000000000001762D                 db  0Fh
.eh_frame_hdr:000000000001762E                 db 0FFh
.eh_frame_hdr:000000000001762F                 db 0FFh
.eh_frame_hdr:0000000000017630                 db  1Ch
.eh_frame_hdr:0000000000017631                 db  17h
.eh_frame_hdr:0000000000017632                 db    0
.eh_frame_hdr:0000000000017633                 db    0
.eh_frame_hdr:0000000000017634                 db  10h
.eh_frame_hdr:0000000000017635                 db  10h
.eh_frame_hdr:0000000000017636                 db 0FFh
.eh_frame_hdr:0000000000017637                 db 0FFh
.eh_frame_hdr:0000000000017638                 db  48h ; H
.eh_frame_hdr:0000000000017639                 db  17h
.eh_frame_hdr:000000000001763A                 db    0
.eh_frame_hdr:000000000001763B                 db    0
.eh_frame_hdr:000000000001763C                 db  40h ; @
.eh_frame_hdr:000000000001763D                 db  10h
.eh_frame_hdr:000000000001763E                 db 0FFh
.eh_frame_hdr:000000000001763F                 db 0FFh
.eh_frame_hdr:0000000000017640                 db  64h ; d
.eh_frame_hdr:0000000000017641                 db  17h
.eh_frame_hdr:0000000000017642                 db    0
.eh_frame_hdr:0000000000017643                 db    0
.eh_frame_hdr:0000000000017644                 db  70h ; p
.eh_frame_hdr:0000000000017645                 db  10h
.eh_frame_hdr:0000000000017646                 db 0FFh
.eh_frame_hdr:0000000000017647                 db 0FFh
.eh_frame_hdr:0000000000017648                 db  78h ; x
.eh_frame_hdr:0000000000017649                 db  17h
.eh_frame_hdr:000000000001764A                 db    0
.eh_frame_hdr:000000000001764B                 db    0
.eh_frame_hdr:000000000001764C                 db  90h
.eh_frame_hdr:000000000001764D                 db  10h
.eh_frame_hdr:000000000001764E                 db 0FFh
.eh_frame_hdr:000000000001764F                 db 0FFh
.eh_frame_hdr:0000000000017650                 db  90h
.eh_frame_hdr:0000000000017651                 db  17h
.eh_frame_hdr:0000000000017652                 db    0
.eh_frame_hdr:0000000000017653                 db    0
.eh_frame_hdr:0000000000017654                 db  60h ; `
.eh_frame_hdr:0000000000017655                 db  12h
.eh_frame_hdr:0000000000017656                 db 0FFh
.eh_frame_hdr:0000000000017657                 db 0FFh
.eh_frame_hdr:0000000000017658                 db 0DCh
.eh_frame_hdr:0000000000017659                 db  17h
.eh_frame_hdr:000000000001765A                 db    0
.eh_frame_hdr:000000000001765B                 db    0
.eh_frame_hdr:000000000001765C                 db    0
.eh_frame_hdr:000000000001765D                 db  13h
.eh_frame_hdr:000000000001765E                 db 0FFh
.eh_frame_hdr:000000000001765F                 db 0FFh
.eh_frame_hdr:0000000000017660                 db  14h
.eh_frame_hdr:0000000000017661                 db  18h
.eh_frame_hdr:0000000000017662                 db    0
.eh_frame_hdr:0000000000017663                 db    0
.eh_frame_hdr:0000000000017664                 db  80h
.eh_frame_hdr:0000000000017665                 db  15h
.eh_frame_hdr:0000000000017666                 db 0FFh
.eh_frame_hdr:0000000000017667                 db 0FFh
.eh_frame_hdr:0000000000017668                 db  60h ; `
.eh_frame_hdr:0000000000017669                 db  18h
.eh_frame_hdr:000000000001766A                 db    0
.eh_frame_hdr:000000000001766B                 db    0
.eh_frame_hdr:000000000001766C                 db 0E0h
.eh_frame_hdr:000000000001766D                 db  15h
.eh_frame_hdr:000000000001766E                 db 0FFh
.eh_frame_hdr:000000000001766F                 db 0FFh
.eh_frame_hdr:0000000000017670                 db  7Ch ; |
.eh_frame_hdr:0000000000017671                 db  18h
.eh_frame_hdr:0000000000017672                 db    0
.eh_frame_hdr:0000000000017673                 db    0
.eh_frame_hdr:0000000000017674                 db  20h
.eh_frame_hdr:0000000000017675                 db  16h
.eh_frame_hdr:0000000000017676                 db 0FFh
.eh_frame_hdr:0000000000017677                 db 0FFh
.eh_frame_hdr:0000000000017678                 db  9Ch
.eh_frame_hdr:0000000000017679                 db  18h
.eh_frame_hdr:000000000001767A                 db    0
.eh_frame_hdr:000000000001767B                 db    0
.eh_frame_hdr:000000000001767C                 db  80h
.eh_frame_hdr:000000000001767D                 db  17h
.eh_frame_hdr:000000000001767E                 db 0FFh
.eh_frame_hdr:000000000001767F                 db 0FFh
.eh_frame_hdr:0000000000017680                 db 0D8h
.eh_frame_hdr:0000000000017681                 db  18h
.eh_frame_hdr:0000000000017682                 db    0
.eh_frame_hdr:0000000000017683                 db    0
.eh_frame_hdr:0000000000017684                 db  40h ; @
.eh_frame_hdr:0000000000017685                 db  18h
.eh_frame_hdr:0000000000017686                 db 0FFh
.eh_frame_hdr:0000000000017687                 db 0FFh
.eh_frame_hdr:0000000000017688                 db  14h
.eh_frame_hdr:0000000000017689                 db  19h
.eh_frame_hdr:000000000001768A                 db    0
.eh_frame_hdr:000000000001768B                 db    0
.eh_frame_hdr:000000000001768C                 db  90h
.eh_frame_hdr:000000000001768D                 db  18h
.eh_frame_hdr:000000000001768E                 db 0FFh
.eh_frame_hdr:000000000001768F                 db 0FFh
.eh_frame_hdr:0000000000017690                 db  28h ; (
.eh_frame_hdr:0000000000017691                 db  19h
.eh_frame_hdr:0000000000017692                 db    0
.eh_frame_hdr:0000000000017693                 db    0
.eh_frame_hdr:0000000000017694                 db 0F0h
.eh_frame_hdr:0000000000017695                 db  18h
.eh_frame_hdr:0000000000017696                 db 0FFh
.eh_frame_hdr:0000000000017697                 db 0FFh
.eh_frame_hdr:0000000000017698                 db  3Ch ; <
.eh_frame_hdr:0000000000017699                 db  19h
.eh_frame_hdr:000000000001769A                 db    0
.eh_frame_hdr:000000000001769B                 db    0
.eh_frame_hdr:000000000001769C                 db  70h ; p
.eh_frame_hdr:000000000001769D                 db  19h
.eh_frame_hdr:000000000001769E                 db 0FFh
.eh_frame_hdr:000000000001769F                 db 0FFh
.eh_frame_hdr:00000000000176A0                 db  50h ; P
.eh_frame_hdr:00000000000176A1                 db  19h
.eh_frame_hdr:00000000000176A2                 db    0
.eh_frame_hdr:00000000000176A3                 db    0
.eh_frame_hdr:00000000000176A4                 db  70h ; p
.eh_frame_hdr:00000000000176A5                 db  1Ah
.eh_frame_hdr:00000000000176A6                 db 0FFh
.eh_frame_hdr:00000000000176A7                 db 0FFh
.eh_frame_hdr:00000000000176A8                 db 0B4h
.eh_frame_hdr:00000000000176A9                 db  19h
.eh_frame_hdr:00000000000176AA                 db    0
.eh_frame_hdr:00000000000176AB                 db    0
.eh_frame_hdr:00000000000176AC                 db 0B0h
.eh_frame_hdr:00000000000176AD                 db  1Ah
.eh_frame_hdr:00000000000176AE                 db 0FFh
.eh_frame_hdr:00000000000176AF                 db 0FFh
.eh_frame_hdr:00000000000176B0                 db 0C8h
.eh_frame_hdr:00000000000176B1                 db  19h
.eh_frame_hdr:00000000000176B2                 db    0
.eh_frame_hdr:00000000000176B3                 db    0
.eh_frame_hdr:00000000000176B4                 db  40h ; @
.eh_frame_hdr:00000000000176B5                 db  1Bh
.eh_frame_hdr:00000000000176B6                 db 0FFh
.eh_frame_hdr:00000000000176B7                 db 0FFh
.eh_frame_hdr:00000000000176B8                 db 0DCh
.eh_frame_hdr:00000000000176B9                 db  19h
.eh_frame_hdr:00000000000176BA                 db    0
.eh_frame_hdr:00000000000176BB                 db    0
.eh_frame_hdr:00000000000176BC                 db 0A0h
.eh_frame_hdr:00000000000176BD                 db  1Bh
.eh_frame_hdr:00000000000176BE                 db 0FFh
.eh_frame_hdr:00000000000176BF                 db 0FFh
.eh_frame_hdr:00000000000176C0                 db 0F0h
.eh_frame_hdr:00000000000176C1                 db  19h
.eh_frame_hdr:00000000000176C2                 db    0
.eh_frame_hdr:00000000000176C3                 db    0
.eh_frame_hdr:00000000000176C4                 db  10h
.eh_frame_hdr:00000000000176C5                 db  1Eh
.eh_frame_hdr:00000000000176C6                 db 0FFh
.eh_frame_hdr:00000000000176C7                 db 0FFh
.eh_frame_hdr:00000000000176C8                 db  40h ; @
.eh_frame_hdr:00000000000176C9                 db  1Ah
.eh_frame_hdr:00000000000176CA                 db    0
.eh_frame_hdr:00000000000176CB                 db    0
.eh_frame_hdr:00000000000176CC                 db 0F0h
.eh_frame_hdr:00000000000176CD                 db  1Fh
.eh_frame_hdr:00000000000176CE                 db 0FFh
.eh_frame_hdr:00000000000176CF                 db 0FFh
.eh_frame_hdr:00000000000176D0                 db  78h ; x
.eh_frame_hdr:00000000000176D1                 db  1Ah
.eh_frame_hdr:00000000000176D2                 db    0
.eh_frame_hdr:00000000000176D3                 db    0
.eh_frame_hdr:00000000000176D4                 db 0A0h
.eh_frame_hdr:00000000000176D5                 db  22h ; "
.eh_frame_hdr:00000000000176D6                 db 0FFh
.eh_frame_hdr:00000000000176D7                 db 0FFh
.eh_frame_hdr:00000000000176D8                 db 0C8h
.eh_frame_hdr:00000000000176D9                 db  1Ah
.eh_frame_hdr:00000000000176DA                 db    0
.eh_frame_hdr:00000000000176DB                 db    0
.eh_frame_hdr:00000000000176DC                 db    0
.eh_frame_hdr:00000000000176DD                 db  24h ; $
.eh_frame_hdr:00000000000176DE                 db 0FFh
.eh_frame_hdr:00000000000176DF                 db 0FFh
.eh_frame_hdr:00000000000176E0                 db  14h
.eh_frame_hdr:00000000000176E1                 db  1Bh
.eh_frame_hdr:00000000000176E2                 db    0
.eh_frame_hdr:00000000000176E3                 db    0
.eh_frame_hdr:00000000000176E4                 db 0B0h
.eh_frame_hdr:00000000000176E5                 db  25h ; %
.eh_frame_hdr:00000000000176E6                 db 0FFh
.eh_frame_hdr:00000000000176E7                 db 0FFh
.eh_frame_hdr:00000000000176E8                 db  64h ; d
.eh_frame_hdr:00000000000176E9                 db  1Bh
.eh_frame_hdr:00000000000176EA                 db    0
.eh_frame_hdr:00000000000176EB                 db    0
.eh_frame_hdr:00000000000176EC                 db  90h
.eh_frame_hdr:00000000000176ED                 db  26h ; &
.eh_frame_hdr:00000000000176EE                 db 0FFh
.eh_frame_hdr:00000000000176EF                 db 0FFh
.eh_frame_hdr:00000000000176F0                 db  88h
.eh_frame_hdr:00000000000176F1                 db  1Bh
.eh_frame_hdr:00000000000176F2                 db    0
.eh_frame_hdr:00000000000176F3                 db    0
.eh_frame_hdr:00000000000176F4                 db  70h ; p
.eh_frame_hdr:00000000000176F5                 db  27h ; '
.eh_frame_hdr:00000000000176F6                 db 0FFh
.eh_frame_hdr:00000000000176F7                 db 0FFh
.eh_frame_hdr:00000000000176F8                 db 0CCh
.eh_frame_hdr:00000000000176F9                 db  1Bh
.eh_frame_hdr:00000000000176FA                 db    0
.eh_frame_hdr:00000000000176FB                 db    0
.eh_frame_hdr:00000000000176FC                 db 0B0h
.eh_frame_hdr:00000000000176FD                 db  29h ; )
.eh_frame_hdr:00000000000176FE                 db 0FFh
.eh_frame_hdr:00000000000176FF                 db 0FFh
.eh_frame_hdr:0000000000017700                 db  1Ch
.eh_frame_hdr:0000000000017701                 db  1Ch
.eh_frame_hdr:0000000000017702                 db    0
.eh_frame_hdr:0000000000017703                 db    0
.eh_frame_hdr:0000000000017704                 db  50h ; P
.eh_frame_hdr:0000000000017705                 db  2Ah ; *
.eh_frame_hdr:0000000000017706                 db 0FFh
.eh_frame_hdr:0000000000017707                 db 0FFh
.eh_frame_hdr:0000000000017708                 db  48h ; H
.eh_frame_hdr:0000000000017709                 db  1Ch
.eh_frame_hdr:000000000001770A                 db    0
.eh_frame_hdr:000000000001770B                 db    0
.eh_frame_hdr:000000000001770C                 db 0E0h
.eh_frame_hdr:000000000001770D                 db  2Ah ; *
.eh_frame_hdr:000000000001770E                 db 0FFh
.eh_frame_hdr:000000000001770F                 db 0FFh
.eh_frame_hdr:0000000000017710                 db  84h
.eh_frame_hdr:0000000000017711                 db  1Ch
.eh_frame_hdr:0000000000017712                 db    0
.eh_frame_hdr:0000000000017713                 db    0
.eh_frame_hdr:0000000000017714                 db  40h ; @
.eh_frame_hdr:0000000000017715                 db  2Ch ; ,
.eh_frame_hdr:0000000000017716                 db 0FFh
.eh_frame_hdr:0000000000017717                 db 0FFh
.eh_frame_hdr:0000000000017718                 db 0E8h
.eh_frame_hdr:0000000000017719                 db  1Ch
.eh_frame_hdr:000000000001771A                 db    0
.eh_frame_hdr:000000000001771B                 db    0
.eh_frame_hdr:000000000001771C                 db    0
.eh_frame_hdr:000000000001771D                 db  2Fh ; /
.eh_frame_hdr:000000000001771E                 db 0FFh
.eh_frame_hdr:000000000001771F                 db 0FFh
.eh_frame_hdr:0000000000017720                 db  34h ; 4
.eh_frame_hdr:0000000000017721                 db  1Dh
.eh_frame_hdr:0000000000017722                 db    0
.eh_frame_hdr:0000000000017723                 db    0
.eh_frame_hdr:0000000000017724                 db    0
.eh_frame_hdr:0000000000017725                 db  31h ; 1
.eh_frame_hdr:0000000000017726                 db 0FFh
.eh_frame_hdr:0000000000017727                 db 0FFh
.eh_frame_hdr:0000000000017728                 db  80h
.eh_frame_hdr:0000000000017729                 db  1Dh
.eh_frame_hdr:000000000001772A                 db    0
.eh_frame_hdr:000000000001772B                 db    0
.eh_frame_hdr:000000000001772C                 db 0E0h
.eh_frame_hdr:000000000001772D                 db  31h ; 1
.eh_frame_hdr:000000000001772E                 db 0FFh
.eh_frame_hdr:000000000001772F                 db 0FFh
.eh_frame_hdr:0000000000017730                 db 0CCh
.eh_frame_hdr:0000000000017731                 db  1Dh
.eh_frame_hdr:0000000000017732                 db    0
.eh_frame_hdr:0000000000017733                 db    0
.eh_frame_hdr:0000000000017734                 db  80h
.eh_frame_hdr:0000000000017735                 db  35h ; 5
.eh_frame_hdr:0000000000017736                 db 0FFh
.eh_frame_hdr:0000000000017737                 db 0FFh
.eh_frame_hdr:0000000000017738                 db  18h
.eh_frame_hdr:0000000000017739                 db  1Eh
.eh_frame_hdr:000000000001773A                 db    0
.eh_frame_hdr:000000000001773B                 db    0
.eh_frame_hdr:000000000001773C                 db 0D0h
.eh_frame_hdr:000000000001773D                 db  36h ; 6
.eh_frame_hdr:000000000001773E                 db 0FFh
.eh_frame_hdr:000000000001773F                 db 0FFh
.eh_frame_hdr:0000000000017740                 db  64h ; d
.eh_frame_hdr:0000000000017741                 db  1Eh
.eh_frame_hdr:0000000000017742                 db    0
.eh_frame_hdr:0000000000017743                 db    0
.eh_frame_hdr:0000000000017744                 db 0C0h
.eh_frame_hdr:0000000000017745                 db  37h ; 7
.eh_frame_hdr:0000000000017746                 db 0FFh
.eh_frame_hdr:0000000000017747                 db 0FFh
.eh_frame_hdr:0000000000017748                 db 0A8h
.eh_frame_hdr:0000000000017749                 db  1Eh
.eh_frame_hdr:000000000001774A                 db    0
.eh_frame_hdr:000000000001774B                 db    0
.eh_frame_hdr:000000000001774C                 db 0D0h
.eh_frame_hdr:000000000001774D                 db  38h ; 8
.eh_frame_hdr:000000000001774E                 db 0FFh
.eh_frame_hdr:000000000001774F                 db 0FFh
.eh_frame_hdr:0000000000017750                 db 0D0h
.eh_frame_hdr:0000000000017751                 db  1Eh
.eh_frame_hdr:0000000000017752                 db    0
.eh_frame_hdr:0000000000017753                 db    0
.eh_frame_hdr:0000000000017754                 db 0A0h
.eh_frame_hdr:0000000000017755                 db  39h ; 9
.eh_frame_hdr:0000000000017756                 db 0FFh
.eh_frame_hdr:0000000000017757                 db 0FFh
.eh_frame_hdr:0000000000017758                 db    8
.eh_frame_hdr:0000000000017759                 db  1Fh
.eh_frame_hdr:000000000001775A                 db    0
.eh_frame_hdr:000000000001775B                 db    0
.eh_frame_hdr:000000000001775C                 db  40h ; @
.eh_frame_hdr:000000000001775D                 db  41h ; A
.eh_frame_hdr:000000000001775E                 db 0FFh
.eh_frame_hdr:000000000001775F                 db 0FFh
.eh_frame_hdr:0000000000017760                 db  58h ; X
.eh_frame_hdr:0000000000017761                 db  1Fh
.eh_frame_hdr:0000000000017762                 db    0
.eh_frame_hdr:0000000000017763                 db    0
.eh_frame_hdr:0000000000017764                 db  80h
.eh_frame_hdr:0000000000017765                 db  43h ; C
.eh_frame_hdr:0000000000017766                 db 0FFh
.eh_frame_hdr:0000000000017767                 db 0FFh
.eh_frame_hdr:0000000000017768                 db 0A8h
.eh_frame_hdr:0000000000017769                 db  1Fh
.eh_frame_hdr:000000000001776A                 db    0
.eh_frame_hdr:000000000001776B                 db    0
.eh_frame_hdr:000000000001776C                 db  20h
.eh_frame_hdr:000000000001776D                 db  4Fh ; O
.eh_frame_hdr:000000000001776E                 db 0FFh
.eh_frame_hdr:000000000001776F                 db 0FFh
.eh_frame_hdr:0000000000017770                 db 0F8h
.eh_frame_hdr:0000000000017771                 db  1Fh
.eh_frame_hdr:0000000000017772                 db    0
.eh_frame_hdr:0000000000017773                 db    0
.eh_frame_hdr:0000000000017774                 db 0B0h
.eh_frame_hdr:0000000000017775                 db  4Fh ; O
.eh_frame_hdr:0000000000017776                 db 0FFh
.eh_frame_hdr:0000000000017777                 db 0FFh
.eh_frame_hdr:0000000000017778                 db  2Ch ; ,
.eh_frame_hdr:0000000000017779                 db  20h
.eh_frame_hdr:000000000001777A                 db    0
.eh_frame_hdr:000000000001777B                 db    0
.eh_frame_hdr:000000000001777C                 db    0
.eh_frame_hdr:000000000001777D                 db  50h ; P
.eh_frame_hdr:000000000001777E                 db 0FFh
.eh_frame_hdr:000000000001777F                 db 0FFh
.eh_frame_hdr:0000000000017780                 db  58h ; X
.eh_frame_hdr:0000000000017781                 db  20h
.eh_frame_hdr:0000000000017782                 db    0
.eh_frame_hdr:0000000000017783                 db    0
.eh_frame_hdr:0000000000017784                 db 0A0h
.eh_frame_hdr:0000000000017785                 db  50h ; P
.eh_frame_hdr:0000000000017786                 db 0FFh
.eh_frame_hdr:0000000000017787                 db 0FFh
.eh_frame_hdr:0000000000017788                 db  88h
.eh_frame_hdr:0000000000017789                 db  20h
.eh_frame_hdr:000000000001778A                 db    0
.eh_frame_hdr:000000000001778B                 db    0
.eh_frame_hdr:000000000001778C                 db 0F0h
.eh_frame_hdr:000000000001778D                 db  50h ; P
.eh_frame_hdr:000000000001778E                 db 0FFh
.eh_frame_hdr:000000000001778F                 db 0FFh
.eh_frame_hdr:0000000000017790                 db 0BCh
.eh_frame_hdr:0000000000017791                 db  20h
.eh_frame_hdr:0000000000017792                 db    0
.eh_frame_hdr:0000000000017793                 db    0
.eh_frame_hdr:0000000000017794                 db    0
.eh_frame_hdr:0000000000017795                 db  59h ; Y
.eh_frame_hdr:0000000000017796                 db 0FFh
.eh_frame_hdr:0000000000017797                 db 0FFh
.eh_frame_hdr:0000000000017798                 db    0
.eh_frame_hdr:0000000000017799                 db  21h ; !
.eh_frame_hdr:000000000001779A                 db    0
.eh_frame_hdr:000000000001779B                 db    0
.eh_frame_hdr:000000000001779C                 db  70h ; p
.eh_frame_hdr:000000000001779D                 db  5Bh ; [
.eh_frame_hdr:000000000001779E                 db 0FFh
.eh_frame_hdr:000000000001779F                 db 0FFh
.eh_frame_hdr:00000000000177A0                 db  60h ; `
.eh_frame_hdr:00000000000177A1                 db  21h ; !
.eh_frame_hdr:00000000000177A2                 db    0
.eh_frame_hdr:00000000000177A3                 db    0
.eh_frame_hdr:00000000000177A4                 db 0A0h
.eh_frame_hdr:00000000000177A5                 db  60h ; `
.eh_frame_hdr:00000000000177A6                 db 0FFh
.eh_frame_hdr:00000000000177A7                 db 0FFh
.eh_frame_hdr:00000000000177A8                 db 0B0h
.eh_frame_hdr:00000000000177A9                 db  21h ; !
.eh_frame_hdr:00000000000177AA                 db    0
.eh_frame_hdr:00000000000177AB                 db    0
.eh_frame_hdr:00000000000177AC                 db    0
.eh_frame_hdr:00000000000177AD                 db  63h ; c
.eh_frame_hdr:00000000000177AE                 db 0FFh
.eh_frame_hdr:00000000000177AF                 db 0FFh
.eh_frame_hdr:00000000000177B0                 db 0ECh
.eh_frame_hdr:00000000000177B1                 db  21h ; !
.eh_frame_hdr:00000000000177B2                 db    0
.eh_frame_hdr:00000000000177B3                 db    0
.eh_frame_hdr:00000000000177B4                 db  60h ; `
.eh_frame_hdr:00000000000177B5                 db  6Ah ; j
.eh_frame_hdr:00000000000177B6                 db 0FFh
.eh_frame_hdr:00000000000177B7                 db 0FFh
.eh_frame_hdr:00000000000177B8                 db  3Ch ; <
.eh_frame_hdr:00000000000177B9                 db  22h ; "
.eh_frame_hdr:00000000000177BA                 db    0
.eh_frame_hdr:00000000000177BB                 db    0
.eh_frame_hdr:00000000000177BC                 db  50h ; P
.eh_frame_hdr:00000000000177BD                 db  73h ; s
.eh_frame_hdr:00000000000177BE                 db 0FFh
.eh_frame_hdr:00000000000177BF                 db 0FFh
.eh_frame_hdr:00000000000177C0                 db  6Ch ; l
.eh_frame_hdr:00000000000177C1                 db  22h ; "
.eh_frame_hdr:00000000000177C2                 db    0
.eh_frame_hdr:00000000000177C3                 db    0
.eh_frame_hdr:00000000000177C4                 db 0F0h
.eh_frame_hdr:00000000000177C5                 db  74h ; t
.eh_frame_hdr:00000000000177C6                 db 0FFh
.eh_frame_hdr:00000000000177C7                 db 0FFh
.eh_frame_hdr:00000000000177C8                 db 0D8h
.eh_frame_hdr:00000000000177C9                 db  22h ; "
.eh_frame_hdr:00000000000177CA                 db    0
.eh_frame_hdr:00000000000177CB                 db    0
.eh_frame_hdr:00000000000177CC                 db 0E0h
.eh_frame_hdr:00000000000177CD                 db  7Dh ; }
.eh_frame_hdr:00000000000177CE                 db 0FFh
.eh_frame_hdr:00000000000177CF                 db 0FFh
.eh_frame_hdr:00000000000177D0                 db  38h ; 8
.eh_frame_hdr:00000000000177D1                 db  23h ; #
.eh_frame_hdr:00000000000177D2                 db    0
.eh_frame_hdr:00000000000177D3                 db    0
.eh_frame_hdr:00000000000177D4                 db 0D0h
.eh_frame_hdr:00000000000177D5                 db  7Fh ; 
.eh_frame_hdr:00000000000177D6                 db 0FFh
.eh_frame_hdr:00000000000177D7                 db 0FFh
.eh_frame_hdr:00000000000177D8                 db  84h
.eh_frame_hdr:00000000000177D9                 db  23h ; #
.eh_frame_hdr:00000000000177DA                 db    0
.eh_frame_hdr:00000000000177DB                 db    0
.eh_frame_hdr:00000000000177DC                 db  10h
.eh_frame_hdr:00000000000177DD                 db  83h
.eh_frame_hdr:00000000000177DE                 db 0FFh
.eh_frame_hdr:00000000000177DF                 db 0FFh
.eh_frame_hdr:00000000000177E0                 db 0E4h
.eh_frame_hdr:00000000000177E1                 db  23h ; #
.eh_frame_hdr:00000000000177E2                 db    0
.eh_frame_hdr:00000000000177E3                 db    0
.eh_frame_hdr:00000000000177E4                 db  40h ; @
.eh_frame_hdr:00000000000177E5                 db  9Ah
.eh_frame_hdr:00000000000177E6                 db 0FFh
.eh_frame_hdr:00000000000177E7                 db 0FFh
.eh_frame_hdr:00000000000177E8                 db  34h ; 4
.eh_frame_hdr:00000000000177E9                 db  24h ; $
.eh_frame_hdr:00000000000177EA                 db    0
.eh_frame_hdr:00000000000177EB                 db    0
.eh_frame_hdr:00000000000177EC                 db  90h
.eh_frame_hdr:00000000000177ED                 db 0A2h
.eh_frame_hdr:00000000000177EE                 db 0FFh
.eh_frame_hdr:00000000000177EF                 db 0FFh
.eh_frame_hdr:00000000000177F0                 db  94h
.eh_frame_hdr:00000000000177F1                 db  24h ; $
.eh_frame_hdr:00000000000177F2                 db    0
.eh_frame_hdr:00000000000177F3                 db    0
.eh_frame_hdr:00000000000177F4                 db 0F0h
.eh_frame_hdr:00000000000177F5                 db 0A4h
.eh_frame_hdr:00000000000177F6                 db 0FFh
.eh_frame_hdr:00000000000177F7                 db 0FFh
.eh_frame_hdr:00000000000177F8                 db 0D8h
.eh_frame_hdr:00000000000177F9                 db  24h ; $
.eh_frame_hdr:00000000000177FA                 db    0
.eh_frame_hdr:00000000000177FB                 db    0
.eh_frame_hdr:00000000000177FC                 db 0F0h
.eh_frame_hdr:00000000000177FD                 db 0ABh
.eh_frame_hdr:00000000000177FE                 db 0FFh
.eh_frame_hdr:00000000000177FF                 db 0FFh
.eh_frame_hdr:0000000000017800                 db  24h ; $
.eh_frame_hdr:0000000000017801                 db  25h ; %
.eh_frame_hdr:0000000000017802                 db    0
.eh_frame_hdr:0000000000017803                 db    0
.eh_frame_hdr:0000000000017804                 db 0B0h
.eh_frame_hdr:0000000000017805                 db 0ACh
.eh_frame_hdr:0000000000017806                 db 0FFh
.eh_frame_hdr:0000000000017807                 db 0FFh
.eh_frame_hdr:0000000000017808                 db  64h ; d
.eh_frame_hdr:0000000000017809                 db  25h ; %
.eh_frame_hdr:000000000001780A                 db    0
.eh_frame_hdr:000000000001780B                 db    0
.eh_frame_hdr:000000000001780C                 db  90h
.eh_frame_hdr:000000000001780D                 db 0C1h
.eh_frame_hdr:000000000001780E                 db 0FFh
.eh_frame_hdr:000000000001780F                 db 0FFh
.eh_frame_hdr:0000000000017810                 db 0C4h
.eh_frame_hdr:0000000000017811                 db  25h ; %
.eh_frame_hdr:0000000000017812                 db    0
.eh_frame_hdr:0000000000017813                 db    0
.eh_frame_hdr:0000000000017814                 db  20h
.eh_frame_hdr:0000000000017815                 db 0C3h
.eh_frame_hdr:0000000000017816                 db 0FFh
.eh_frame_hdr:0000000000017817                 db 0FFh
.eh_frame_hdr:0000000000017818                 db  10h
.eh_frame_hdr:0000000000017819                 db  26h ; &
.eh_frame_hdr:000000000001781A                 db    0
.eh_frame_hdr:000000000001781B                 db    0
.eh_frame_hdr:000000000001781C                 db 0A0h
.eh_frame_hdr:000000000001781D                 db 0C4h
.eh_frame_hdr:000000000001781E                 db 0FFh
.eh_frame_hdr:000000000001781F                 db 0FFh
.eh_frame_hdr:0000000000017820                 db  60h ; `
.eh_frame_hdr:0000000000017821                 db  26h ; &
.eh_frame_hdr:0000000000017822                 db    0
.eh_frame_hdr:0000000000017823                 db    0
.eh_frame_hdr:0000000000017824                 db 0A0h
.eh_frame_hdr:0000000000017825                 db 0D5h
.eh_frame_hdr:0000000000017826                 db 0FFh
.eh_frame_hdr:0000000000017827                 db 0FFh
.eh_frame_hdr:0000000000017828                 db 0B0h
.eh_frame_hdr:0000000000017829                 db  26h ; &
.eh_frame_hdr:000000000001782A                 db    0
.eh_frame_hdr:000000000001782B                 db    0
.eh_frame_hdr:000000000001782C                 db  10h
.eh_frame_hdr:000000000001782D                 db 0D6h
.eh_frame_hdr:000000000001782E                 db 0FFh
.eh_frame_hdr:000000000001782F                 db 0FFh
.eh_frame_hdr:0000000000017830                 db 0D0h
.eh_frame_hdr:0000000000017831                 db  26h ; &
.eh_frame_hdr:0000000000017832                 db    0
.eh_frame_hdr:0000000000017833                 db    0
.eh_frame_hdr:0000000000017834                 db  20h
.eh_frame_hdr:0000000000017835                 db 0D6h
.eh_frame_hdr:0000000000017836                 db 0FFh
.eh_frame_hdr:0000000000017837                 db 0FFh
.eh_frame_hdr:0000000000017838                 db 0E4h
.eh_frame_hdr:0000000000017839                 db  26h ; &
.eh_frame_hdr:000000000001783A                 db    0
.eh_frame_hdr:000000000001783B                 db    0
.eh_frame_hdr:000000000001783C                 db 0F0h
.eh_frame_hdr:000000000001783D                 db 0D6h
.eh_frame_hdr:000000000001783E                 db 0FFh
.eh_frame_hdr:000000000001783F                 db 0FFh
.eh_frame_hdr:0000000000017840                 db  10h
.eh_frame_hdr:0000000000017841                 db  27h ; '
.eh_frame_hdr:0000000000017842                 db    0
.eh_frame_hdr:0000000000017843                 db    0
.eh_frame_hdr:0000000000017844                 db  70h ; p
.eh_frame_hdr:0000000000017845                 db 0DBh
.eh_frame_hdr:0000000000017846                 db 0FFh
.eh_frame_hdr:0000000000017847                 db 0FFh
.eh_frame_hdr:0000000000017848                 db  70h ; p
.eh_frame_hdr:0000000000017849                 db  27h ; '
.eh_frame_hdr:000000000001784A                 db    0
.eh_frame_hdr:000000000001784B                 db    0
.eh_frame_hdr:000000000001784C                 db  90h
.eh_frame_hdr:000000000001784D                 db 0DCh
.eh_frame_hdr:000000000001784E                 db 0FFh
.eh_frame_hdr:000000000001784F                 db 0FFh
.eh_frame_hdr:0000000000017850                 db 0C8h
.eh_frame_hdr:0000000000017851                 db  27h ; '
.eh_frame_hdr:0000000000017852                 db    0
.eh_frame_hdr:0000000000017853                 db    0
.eh_frame_hdr:0000000000017854                 db 0A0h
.eh_frame_hdr:0000000000017855                 db 0DDh
.eh_frame_hdr:0000000000017856                 db 0FFh
.eh_frame_hdr:0000000000017857                 db 0FFh
.eh_frame_hdr:0000000000017858                 db  14h
.eh_frame_hdr:0000000000017859                 db  28h ; (
.eh_frame_hdr:000000000001785A                 db    0
.eh_frame_hdr:000000000001785B                 db    0
.eh_frame_hdr:000000000001785C                 db  30h ; 0
.eh_frame_hdr:000000000001785D                 db 0DEh
.eh_frame_hdr:000000000001785E                 db 0FFh
.eh_frame_hdr:000000000001785F                 db 0FFh
.eh_frame_hdr:0000000000017860                 db  50h ; P
.eh_frame_hdr:0000000000017861                 db  28h ; (
.eh_frame_hdr:0000000000017862                 db    0
.eh_frame_hdr:0000000000017863                 db    0
.eh_frame_hdr:0000000000017864                 db  80h
.eh_frame_hdr:0000000000017865                 db 0DEh
.eh_frame_hdr:0000000000017866                 db 0FFh
.eh_frame_hdr:0000000000017867                 db 0FFh
.eh_frame_hdr:0000000000017868                 db  6Ch ; l
.eh_frame_hdr:0000000000017869                 db  28h ; (
.eh_frame_hdr:000000000001786A                 db    0
.eh_frame_hdr:000000000001786B                 db    0
.eh_frame_hdr:000000000001786C                 db  20h
.eh_frame_hdr:000000000001786D                 db 0DFh
.eh_frame_hdr:000000000001786E                 db 0FFh
.eh_frame_hdr:000000000001786F                 db 0FFh
.eh_frame_hdr:0000000000017870                 db 0C8h
.eh_frame_hdr:0000000000017871                 db  28h ; (
.eh_frame_hdr:0000000000017872                 db    0
.eh_frame_hdr:0000000000017873                 db    0
.eh_frame_hdr:0000000000017874                 db  40h ; @
.eh_frame_hdr:0000000000017875                 db 0DFh
.eh_frame_hdr:0000000000017876                 db 0FFh
.eh_frame_hdr:0000000000017877                 db 0FFh
.eh_frame_hdr:0000000000017878                 db 0E8h
.eh_frame_hdr:0000000000017879                 db  28h ; (
.eh_frame_hdr:000000000001787A                 db    0
.eh_frame_hdr:000000000001787B                 db    0
.eh_frame_hdr:000000000001787C                 db  60h ; `
.eh_frame_hdr:000000000001787D                 db 0DFh
.eh_frame_hdr:000000000001787E                 db 0FFh
.eh_frame_hdr:000000000001787F                 db 0FFh
.eh_frame_hdr:0000000000017880                 db    8
.eh_frame_hdr:0000000000017881                 db  29h ; )
.eh_frame_hdr:0000000000017882                 db    0
.eh_frame_hdr:0000000000017883                 db    0
.eh_frame_hdr:0000000000017884                 db  80h
.eh_frame_hdr:0000000000017885                 db 0DFh
.eh_frame_hdr:0000000000017886                 db 0FFh
.eh_frame_hdr:0000000000017887                 db 0FFh
.eh_frame_hdr:0000000000017888                 db  2Ch ; ,
.eh_frame_hdr:0000000000017889                 db  29h ; )
.eh_frame_hdr:000000000001788A                 db    0
.eh_frame_hdr:000000000001788B                 db    0
.eh_frame_hdr:000000000001788C                 db 0A0h
.eh_frame_hdr:000000000001788D                 db 0DFh
.eh_frame_hdr:000000000001788E                 db 0FFh
.eh_frame_hdr:000000000001788F                 db 0FFh
.eh_frame_hdr:0000000000017890                 db  50h ; P
.eh_frame_hdr:0000000000017891                 db  29h ; )
.eh_frame_hdr:0000000000017892                 db    0
.eh_frame_hdr:0000000000017893                 db    0
.eh_frame_hdr:0000000000017894                 db 0F0h
.eh_frame_hdr:0000000000017895                 db 0DFh
.eh_frame_hdr:0000000000017896                 db 0FFh
.eh_frame_hdr:0000000000017897                 db 0FFh
.eh_frame_hdr:0000000000017898                 db  68h ; h
.eh_frame_hdr:0000000000017899                 db  29h ; )
.eh_frame_hdr:000000000001789A                 db    0
.eh_frame_hdr:000000000001789B                 db    0
.eh_frame_hdr:000000000001789C                 db  70h ; p
.eh_frame_hdr:000000000001789D                 db 0E0h
.eh_frame_hdr:000000000001789E                 db 0FFh
.eh_frame_hdr:000000000001789F                 db 0FFh
.eh_frame_hdr:00000000000178A0                 db 0B8h
.eh_frame_hdr:00000000000178A1                 db  29h ; )
.eh_frame_hdr:00000000000178A2                 db    0
.eh_frame_hdr:00000000000178A3                 db    0
.eh_frame_hdr:00000000000178A4                 db 0D0h
.eh_frame_hdr:00000000000178A5                 db 0E0h
.eh_frame_hdr:00000000000178A6                 db 0FFh
.eh_frame_hdr:00000000000178A7                 db 0FFh
.eh_frame_hdr:00000000000178A8                 db 0D8h
.eh_frame_hdr:00000000000178A9                 db  29h ; )
.eh_frame_hdr:00000000000178AA                 db    0
.eh_frame_hdr:00000000000178AB                 db    0
.eh_frame_hdr:00000000000178AC                 db  10h
.eh_frame_hdr:00000000000178AD                 db 0E1h
.eh_frame_hdr:00000000000178AE                 db 0FFh
.eh_frame_hdr:00000000000178AF                 db 0FFh
.eh_frame_hdr:00000000000178B0                 db 0F8h
.eh_frame_hdr:00000000000178B1                 db  29h ; )
.eh_frame_hdr:00000000000178B2                 db    0
.eh_frame_hdr:00000000000178B3                 db    0
.eh_frame_hdr:00000000000178B4                 db  90h
.eh_frame_hdr:00000000000178B5                 db 0E1h
.eh_frame_hdr:00000000000178B6                 db 0FFh
.eh_frame_hdr:00000000000178B7                 db 0FFh
.eh_frame_hdr:00000000000178B8                 db  30h ; 0
.eh_frame_hdr:00000000000178B9                 db  2Ah ; *
.eh_frame_hdr:00000000000178BA                 db    0
.eh_frame_hdr:00000000000178BB                 db    0
.eh_frame_hdr:00000000000178BC                 db 0D0h
.eh_frame_hdr:00000000000178BD                 db 0E1h
.eh_frame_hdr:00000000000178BE                 db 0FFh
.eh_frame_hdr:00000000000178BF                 db 0FFh
.eh_frame_hdr:00000000000178C0                 db  50h ; P
.eh_frame_hdr:00000000000178C1                 db  2Ah ; *
.eh_frame_hdr:00000000000178C2                 db    0
.eh_frame_hdr:00000000000178C3                 db    0
.eh_frame_hdr:00000000000178C4                 db  30h ; 0
.eh_frame_hdr:00000000000178C5                 db 0E2h
.eh_frame_hdr:00000000000178C6                 db 0FFh
.eh_frame_hdr:00000000000178C7                 db 0FFh
.eh_frame_hdr:00000000000178C8                 db  80h
.eh_frame_hdr:00000000000178C9                 db  2Ah ; *
.eh_frame_hdr:00000000000178CA                 db    0
.eh_frame_hdr:00000000000178CB                 db    0
.eh_frame_hdr:00000000000178CC                 db 0A0h
.eh_frame_hdr:00000000000178CD                 db 0E2h
.eh_frame_hdr:00000000000178CE                 db 0FFh
.eh_frame_hdr:00000000000178CF                 db 0FFh
.eh_frame_hdr:00000000000178D0                 db 0C8h
.eh_frame_hdr:00000000000178D1                 db  2Ah ; *
.eh_frame_hdr:00000000000178D2                 db    0
.eh_frame_hdr:00000000000178D3                 db    0
.eh_frame_hdr:00000000000178D4                 db 0B0h
.eh_frame_hdr:00000000000178D5                 db 0E2h
.eh_frame_hdr:00000000000178D6                 db 0FFh
.eh_frame_hdr:00000000000178D7                 db 0FFh
.eh_frame_hdr:00000000000178D8                 db 0E0h
.eh_frame_hdr:00000000000178D9                 db  2Ah ; *
.eh_frame_hdr:00000000000178DA                 db    0
.eh_frame_hdr:00000000000178DB                 db    0
.eh_frame_hdr:00000000000178DB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000178DB
LOAD:00000000000178DC ; ===========================================================================
LOAD:00000000000178DC
LOAD:00000000000178DC ; Segment type: Pure code
LOAD:00000000000178DC ; Segment permissions: Read/Execute
LOAD:00000000000178DC LOAD            segment byte public 'CODE' use64
LOAD:00000000000178DC                 assume cs:LOAD
LOAD:00000000000178DC                 ;org 178DCh
LOAD:00000000000178DC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000178DC                 align 20h
LOAD:00000000000178DC LOAD            ends
LOAD:00000000000178DC
.eh_frame:00000000000178E0 ; ===========================================================================
.eh_frame:00000000000178E0
.eh_frame:00000000000178E0 ; Segment type: Pure data
.eh_frame:00000000000178E0 ; Segment permissions: Read
.eh_frame:00000000000178E0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000178E0                 assume cs:_eh_frame
.eh_frame:00000000000178E0                 ;org 178E0h
.eh_frame:00000000000178E0                 db  14h
.eh_frame:00000000000178E1                 db    0
.eh_frame:00000000000178E2                 db    0
.eh_frame:00000000000178E3                 db    0
.eh_frame:00000000000178E4                 db    0
.eh_frame:00000000000178E5                 db    0
.eh_frame:00000000000178E6                 db    0
.eh_frame:00000000000178E7                 db    0
.eh_frame:00000000000178E8                 db    1
.eh_frame:00000000000178E9                 db  7Ah ; z
.eh_frame:00000000000178EA                 db  52h ; R
.eh_frame:00000000000178EB                 db    0
.eh_frame:00000000000178EC                 db    1
.eh_frame:00000000000178ED                 db  78h ; x
.eh_frame:00000000000178EE                 db  10h
.eh_frame:00000000000178EF                 db    1
.eh_frame:00000000000178F0                 db  1Bh
.eh_frame:00000000000178F1                 db  0Ch
.eh_frame:00000000000178F2                 db    7
.eh_frame:00000000000178F3                 db    8
.eh_frame:00000000000178F4                 db  90h
.eh_frame:00000000000178F5                 db    1
.eh_frame:00000000000178F6                 db    7
.eh_frame:00000000000178F7                 db  10h
.eh_frame:00000000000178F8                 db  14h
.eh_frame:00000000000178F9                 db    0
.eh_frame:00000000000178FA                 db    0
.eh_frame:00000000000178FB                 db    0
.eh_frame:00000000000178FC                 db  1Ch
.eh_frame:00000000000178FD                 db    0
.eh_frame:00000000000178FE                 db    0
.eh_frame:00000000000178FF                 db    0
.eh_frame:0000000000017900                 db 0D0h
.eh_frame:0000000000017901                 db 0A6h
.eh_frame:0000000000017902                 db 0FEh
.eh_frame:0000000000017903                 db 0FFh
.eh_frame:0000000000017904                 db  2Bh ; +
.eh_frame:0000000000017905                 db    0
.eh_frame:0000000000017906                 db    0
.eh_frame:0000000000017907                 db    0
.eh_frame:0000000000017908                 db    0
.eh_frame:0000000000017909                 db    0
.eh_frame:000000000001790A                 db    0
.eh_frame:000000000001790B                 db    0
.eh_frame:000000000001790C                 db    0
.eh_frame:000000000001790D                 db    0
.eh_frame:000000000001790E                 db    0
.eh_frame:000000000001790F                 db    0
.eh_frame:0000000000017910                 db  14h
.eh_frame:0000000000017911                 db    0
.eh_frame:0000000000017912                 db    0
.eh_frame:0000000000017913                 db    0
.eh_frame:0000000000017914                 db    0
.eh_frame:0000000000017915                 db    0
.eh_frame:0000000000017916                 db    0
.eh_frame:0000000000017917                 db    0
.eh_frame:0000000000017918                 db    1
.eh_frame:0000000000017919                 db  7Ah ; z
.eh_frame:000000000001791A                 db  52h ; R
.eh_frame:000000000001791B                 db    0
.eh_frame:000000000001791C                 db    1
.eh_frame:000000000001791D                 db  78h ; x
.eh_frame:000000000001791E                 db  10h
.eh_frame:000000000001791F                 db    1
.eh_frame:0000000000017920                 db  1Bh
.eh_frame:0000000000017921                 db  0Ch
.eh_frame:0000000000017922                 db    7
.eh_frame:0000000000017923                 db    8
.eh_frame:0000000000017924                 db  90h
.eh_frame:0000000000017925                 db    1
.eh_frame:0000000000017926                 db    0
.eh_frame:0000000000017927                 db    0
.eh_frame:0000000000017928                 db  24h ; $
.eh_frame:0000000000017929                 db    0
.eh_frame:000000000001792A                 db    0
.eh_frame:000000000001792B                 db    0
.eh_frame:000000000001792C                 db  1Ch
.eh_frame:000000000001792D                 db    0
.eh_frame:000000000001792E                 db    0
.eh_frame:000000000001792F                 db    0
.eh_frame:0000000000017930                 db  80h
.eh_frame:0000000000017931                 db 0A0h
.eh_frame:0000000000017932                 db 0FEh
.eh_frame:0000000000017933                 db 0FFh
.eh_frame:0000000000017934                 db  20h
.eh_frame:0000000000017935                 db    4
.eh_frame:0000000000017936                 db    0
.eh_frame:0000000000017937                 db    0
.eh_frame:0000000000017938                 db    0
.eh_frame:0000000000017939                 db  0Eh
.eh_frame:000000000001793A                 db  10h
.eh_frame:000000000001793B                 db  46h ; F
.eh_frame:000000000001793C                 db  0Eh
.eh_frame:000000000001793D                 db  18h
.eh_frame:000000000001793E                 db  4Ah ; J
.eh_frame:000000000001793F                 db  0Fh
.eh_frame:0000000000017940                 db  0Bh
.eh_frame:0000000000017941                 db  77h ; w
.eh_frame:0000000000017942                 db    8
.eh_frame:0000000000017943                 db  80h
.eh_frame:0000000000017944                 db    0
.eh_frame:0000000000017945                 db  3Fh ; ?
.eh_frame:0000000000017946                 db  1Ah
.eh_frame:0000000000017947                 db  3Bh ; ;
.eh_frame:0000000000017948                 db  2Ah ; *
.eh_frame:0000000000017949                 db  33h ; 3
.eh_frame:000000000001794A                 db  24h ; $
.eh_frame:000000000001794B                 db  22h ; "
.eh_frame:000000000001794C                 db    0
.eh_frame:000000000001794D                 db    0
.eh_frame:000000000001794E                 db    0
.eh_frame:000000000001794F                 db    0
.eh_frame:0000000000017950                 db  14h
.eh_frame:0000000000017951                 db    0
.eh_frame:0000000000017952                 db    0
.eh_frame:0000000000017953                 db    0
.eh_frame:0000000000017954                 db  44h ; D
.eh_frame:0000000000017955                 db    0
.eh_frame:0000000000017956                 db    0
.eh_frame:0000000000017957                 db    0
.eh_frame:0000000000017958                 db  78h ; x
.eh_frame:0000000000017959                 db 0A4h
.eh_frame:000000000001795A                 db 0FEh
.eh_frame:000000000001795B                 db 0FFh
.eh_frame:000000000001795C                 db    8
.eh_frame:000000000001795D                 db    0
.eh_frame:000000000001795E                 db    0
.eh_frame:000000000001795F                 db    0
.eh_frame:0000000000017960                 db    0
.eh_frame:0000000000017961                 db    0
.eh_frame:0000000000017962                 db    0
.eh_frame:0000000000017963                 db    0
.eh_frame:0000000000017964                 db    0
.eh_frame:0000000000017965                 db    0
.eh_frame:0000000000017966                 db    0
.eh_frame:0000000000017967                 db    0
.eh_frame:0000000000017968                 db  18h
.eh_frame:0000000000017969                 db    0
.eh_frame:000000000001796A                 db    0
.eh_frame:000000000001796B                 db    0
.eh_frame:000000000001796C                 db  5Ch ; \
.eh_frame:000000000001796D                 db    0
.eh_frame:000000000001796E                 db    0
.eh_frame:000000000001796F                 db    0
.eh_frame:0000000000017970                 db  70h ; p
.eh_frame:0000000000017971                 db 0A7h
.eh_frame:0000000000017972                 db 0FEh
.eh_frame:0000000000017973                 db 0FFh
.eh_frame:0000000000017974                 db  2Fh ; /
.eh_frame:0000000000017975                 db    0
.eh_frame:0000000000017976                 db    0
.eh_frame:0000000000017977                 db    0
.eh_frame:0000000000017978                 db    0
.eh_frame:0000000000017979                 db  41h ; A
.eh_frame:000000000001797A                 db  0Eh
.eh_frame:000000000001797B                 db  10h
.eh_frame:000000000001797C                 db  83h
.eh_frame:000000000001797D                 db    2
.eh_frame:000000000001797E                 db  6Dh ; m
.eh_frame:000000000001797F                 db  0Eh
.eh_frame:0000000000017980                 db    8
.eh_frame:0000000000017981                 db    0
.eh_frame:0000000000017982                 db    0
.eh_frame:0000000000017983                 db    0
.eh_frame:0000000000017984                 db  14h
.eh_frame:0000000000017985                 db    0
.eh_frame:0000000000017986                 db    0
.eh_frame:0000000000017987                 db    0
.eh_frame:0000000000017988                 db  78h ; x
.eh_frame:0000000000017989                 db    0
.eh_frame:000000000001798A                 db    0
.eh_frame:000000000001798B                 db    0
.eh_frame:000000000001798C                 db  84h
.eh_frame:000000000001798D                 db 0A7h
.eh_frame:000000000001798E                 db 0FEh
.eh_frame:000000000001798F                 db 0FFh
.eh_frame:0000000000017990                 db  4Ah ; J
.eh_frame:0000000000017991                 db    0
.eh_frame:0000000000017992                 db    0
.eh_frame:0000000000017993                 db    0
.eh_frame:0000000000017994                 db    0
.eh_frame:0000000000017995                 db  50h ; P
.eh_frame:0000000000017996                 db  0Eh
.eh_frame:0000000000017997                 db  10h
.eh_frame:0000000000017998                 db  83h
.eh_frame:0000000000017999                 db    2
.eh_frame:000000000001799A                 db    0
.eh_frame:000000000001799B                 db    0
.eh_frame:000000000001799C                 db  24h ; $
.eh_frame:000000000001799D                 db    0
.eh_frame:000000000001799E                 db    0
.eh_frame:000000000001799F                 db    0
.eh_frame:00000000000179A0                 db  90h
.eh_frame:00000000000179A1                 db    0
.eh_frame:00000000000179A2                 db    0
.eh_frame:00000000000179A3                 db    0
.eh_frame:00000000000179A4                 db 0BCh
.eh_frame:00000000000179A5                 db 0A7h
.eh_frame:00000000000179A6                 db 0FEh
.eh_frame:00000000000179A7                 db 0FFh
.eh_frame:00000000000179A8                 db  32h ; 2
.eh_frame:00000000000179A9                 db    0
.eh_frame:00000000000179AA                 db    0
.eh_frame:00000000000179AB                 db    0
.eh_frame:00000000000179AC                 db    0
.eh_frame:00000000000179AD                 db  41h ; A
.eh_frame:00000000000179AE                 db  0Eh
.eh_frame:00000000000179AF                 db  10h
.eh_frame:00000000000179B0                 db  86h
.eh_frame:00000000000179B1                 db    2
.eh_frame:00000000000179B2                 db  41h ; A
.eh_frame:00000000000179B3                 db  0Eh
.eh_frame:00000000000179B4                 db  18h
.eh_frame:00000000000179B5                 db  83h
.eh_frame:00000000000179B6                 db    3
.eh_frame:00000000000179B7                 db  4Ch ; L
.eh_frame:00000000000179B8                 db  0Eh
.eh_frame:00000000000179B9                 db  20h
.eh_frame:00000000000179BA                 db  5Eh ; ^
.eh_frame:00000000000179BB                 db  0Eh
.eh_frame:00000000000179BC                 db  18h
.eh_frame:00000000000179BD                 db  44h ; D
.eh_frame:00000000000179BE                 db  0Eh
.eh_frame:00000000000179BF                 db  10h
.eh_frame:00000000000179C0                 db  41h ; A
.eh_frame:00000000000179C1                 db  0Eh
.eh_frame:00000000000179C2                 db    8
.eh_frame:00000000000179C3                 db    0
.eh_frame:00000000000179C4                 db  1Ch
.eh_frame:00000000000179C5                 db    0
.eh_frame:00000000000179C6                 db    0
.eh_frame:00000000000179C7                 db    0
.eh_frame:00000000000179C8                 db 0B8h
.eh_frame:00000000000179C9                 db    0
.eh_frame:00000000000179CA                 db    0
.eh_frame:00000000000179CB                 db    0
.eh_frame:00000000000179CC                 db 0D4h
.eh_frame:00000000000179CD                 db 0A7h
.eh_frame:00000000000179CE                 db 0FEh
.eh_frame:00000000000179CF                 db 0FFh
.eh_frame:00000000000179D0                 db  32h ; 2
.eh_frame:00000000000179D1                 db    0
.eh_frame:00000000000179D2                 db    0
.eh_frame:00000000000179D3                 db    0
.eh_frame:00000000000179D4                 db    0
.eh_frame:00000000000179D5                 db  41h ; A
.eh_frame:00000000000179D6                 db  0Eh
.eh_frame:00000000000179D7                 db  10h
.eh_frame:00000000000179D8                 db  83h
.eh_frame:00000000000179D9                 db    2
.eh_frame:00000000000179DA                 db  55h ; U
.eh_frame:00000000000179DB                 db  0Ah
.eh_frame:00000000000179DC                 db  0Eh
.eh_frame:00000000000179DD                 db    8
.eh_frame:00000000000179DE                 db  4Ah ; J
.eh_frame:00000000000179DF                 db  0Bh
.eh_frame:00000000000179E0                 db  4Dh ; M
.eh_frame:00000000000179E1                 db  0Eh
.eh_frame:00000000000179E2                 db    8
.eh_frame:00000000000179E3                 db    0
.eh_frame:00000000000179E4                 db  14h
.eh_frame:00000000000179E5                 db    0
.eh_frame:00000000000179E6                 db    0
.eh_frame:00000000000179E7                 db    0
.eh_frame:00000000000179E8                 db 0D8h
.eh_frame:00000000000179E9                 db    0
.eh_frame:00000000000179EA                 db    0
.eh_frame:00000000000179EB                 db    0
.eh_frame:00000000000179EC                 db 0F4h
.eh_frame:00000000000179ED                 db 0A7h
.eh_frame:00000000000179EE                 db 0FEh
.eh_frame:00000000000179EF                 db 0FFh
.eh_frame:00000000000179F0                 db  67h ; g
.eh_frame:00000000000179F1                 db    0
.eh_frame:00000000000179F2                 db    0
.eh_frame:00000000000179F3                 db    0
.eh_frame:00000000000179F4                 db    0
.eh_frame:00000000000179F5                 db    2
.eh_frame:00000000000179F6                 db  62h ; b
.eh_frame:00000000000179F7                 db  0Eh
.eh_frame:00000000000179F8                 db  10h
.eh_frame:00000000000179F9                 db    0
.eh_frame:00000000000179FA                 db    0
.eh_frame:00000000000179FB                 db    0
.eh_frame:00000000000179FC                 db  10h
.eh_frame:00000000000179FD                 db    0
.eh_frame:00000000000179FE                 db    0
.eh_frame:00000000000179FF                 db    0
.eh_frame:0000000000017A00                 db 0F0h
.eh_frame:0000000000017A01                 db    0
.eh_frame:0000000000017A02                 db    0
.eh_frame:0000000000017A03                 db    0
.eh_frame:0000000000017A04                 db 0DCh
.eh_frame:0000000000017A05                 db 0A3h
.eh_frame:0000000000017A06                 db 0FEh
.eh_frame:0000000000017A07                 db 0FFh
.eh_frame:0000000000017A08                 db  23h ; #
.eh_frame:0000000000017A09                 db    0
.eh_frame:0000000000017A0A                 db    0
.eh_frame:0000000000017A0B                 db    0
.eh_frame:0000000000017A0C                 db    0
.eh_frame:0000000000017A0D                 db  59h ; Y
.eh_frame:0000000000017A0E                 db  0Eh
.eh_frame:0000000000017A0F                 db  10h
.eh_frame:0000000000017A10                 db  3Ch ; <
.eh_frame:0000000000017A11                 db    0
.eh_frame:0000000000017A12                 db    0
.eh_frame:0000000000017A13                 db    0
.eh_frame:0000000000017A14                 db    4
.eh_frame:0000000000017A15                 db    1
.eh_frame:0000000000017A16                 db    0
.eh_frame:0000000000017A17                 db    0
.eh_frame:0000000000017A18                 db  38h ; 8
.eh_frame:0000000000017A19                 db 0A8h
.eh_frame:0000000000017A1A                 db 0FEh
.eh_frame:0000000000017A1B                 db 0FFh
.eh_frame:0000000000017A1C                 db  90h
.eh_frame:0000000000017A1D                 db    0
.eh_frame:0000000000017A1E                 db    0
.eh_frame:0000000000017A1F                 db    0
.eh_frame:0000000000017A20                 db    0
.eh_frame:0000000000017A21                 db  47h ; G
.eh_frame:0000000000017A22                 db  0Eh
.eh_frame:0000000000017A23                 db  10h
.eh_frame:0000000000017A24                 db  86h
.eh_frame:0000000000017A25                 db    2
.eh_frame:0000000000017A26                 db  41h ; A
.eh_frame:0000000000017A27                 db  0Eh
.eh_frame:0000000000017A28                 db  18h
.eh_frame:0000000000017A29                 db  83h
.eh_frame:0000000000017A2A                 db    3
.eh_frame:0000000000017A2B                 db  47h ; G
.eh_frame:0000000000017A2C                 db  0Eh
.eh_frame:0000000000017A2D                 db  20h
.eh_frame:0000000000017A2E                 db  78h ; x
.eh_frame:0000000000017A2F                 db  0Eh
.eh_frame:0000000000017A30                 db  18h
.eh_frame:0000000000017A31                 db  43h ; C
.eh_frame:0000000000017A32                 db  0Eh
.eh_frame:0000000000017A33                 db  10h
.eh_frame:0000000000017A34                 db  41h ; A
.eh_frame:0000000000017A35                 db  0Eh
.eh_frame:0000000000017A36                 db    8
.eh_frame:0000000000017A37                 db  45h ; E
.eh_frame:0000000000017A38                 db 0C3h
.eh_frame:0000000000017A39                 db 0C6h
.eh_frame:0000000000017A3A                 db  50h ; P
.eh_frame:0000000000017A3B                 db  0Eh
.eh_frame:0000000000017A3C                 db  20h
.eh_frame:0000000000017A3D                 db  83h
.eh_frame:0000000000017A3E                 db    3
.eh_frame:0000000000017A3F                 db  86h
.eh_frame:0000000000017A40                 db    2
.eh_frame:0000000000017A41                 db  63h ; c
.eh_frame:0000000000017A42                 db  0Ah
.eh_frame:0000000000017A43                 db  0Eh
.eh_frame:0000000000017A44                 db  18h
.eh_frame:0000000000017A45                 db  46h ; F
.eh_frame:0000000000017A46                 db  0Eh
.eh_frame:0000000000017A47                 db  10h
.eh_frame:0000000000017A48                 db  41h ; A
.eh_frame:0000000000017A49                 db  0Eh
.eh_frame:0000000000017A4A                 db    8
.eh_frame:0000000000017A4B                 db  41h ; A
.eh_frame:0000000000017A4C                 db  0Bh
.eh_frame:0000000000017A4D                 db    0
.eh_frame:0000000000017A4E                 db    0
.eh_frame:0000000000017A4F                 db    0
.eh_frame:0000000000017A50                 db  34h ; 4
.eh_frame:0000000000017A51                 db    0
.eh_frame:0000000000017A52                 db    0
.eh_frame:0000000000017A53                 db    0
.eh_frame:0000000000017A54                 db  44h ; D
.eh_frame:0000000000017A55                 db    1
.eh_frame:0000000000017A56                 db    0
.eh_frame:0000000000017A57                 db    0
.eh_frame:0000000000017A58                 db  88h
.eh_frame:0000000000017A59                 db 0A8h
.eh_frame:0000000000017A5A                 db 0FEh
.eh_frame:0000000000017A5B                 db 0FFh
.eh_frame:0000000000017A5C                 db  4Dh ; M
.eh_frame:0000000000017A5D                 db    0
.eh_frame:0000000000017A5E                 db    0
.eh_frame:0000000000017A5F                 db    0
.eh_frame:0000000000017A60                 db    0
.eh_frame:0000000000017A61                 db  42h ; B
.eh_frame:0000000000017A62                 db  0Eh
.eh_frame:0000000000017A63                 db  10h
.eh_frame:0000000000017A64                 db  8Ch
.eh_frame:0000000000017A65                 db    2
.eh_frame:0000000000017A66                 db  41h ; A
.eh_frame:0000000000017A67                 db  0Eh
.eh_frame:0000000000017A68                 db  18h
.eh_frame:0000000000017A69                 db  86h
.eh_frame:0000000000017A6A                 db    3
.eh_frame:0000000000017A6B                 db  41h ; A
.eh_frame:0000000000017A6C                 db  0Eh
.eh_frame:0000000000017A6D                 db  20h
.eh_frame:0000000000017A6E                 db  83h
.eh_frame:0000000000017A6F                 db    4
.eh_frame:0000000000017A70                 db  4Ch ; L
.eh_frame:0000000000017A71                 db  0Ah
.eh_frame:0000000000017A72                 db  0Eh
.eh_frame:0000000000017A73                 db  18h
.eh_frame:0000000000017A74                 db  41h ; A
.eh_frame:0000000000017A75                 db  0Eh
.eh_frame:0000000000017A76                 db  10h
.eh_frame:0000000000017A77                 db  42h ; B
.eh_frame:0000000000017A78                 db  0Eh
.eh_frame:0000000000017A79                 db    8
.eh_frame:0000000000017A7A                 db  45h ; E
.eh_frame:0000000000017A7B                 db  0Bh
.eh_frame:0000000000017A7C                 db  6Ch ; l
.eh_frame:0000000000017A7D                 db  0Ah
.eh_frame:0000000000017A7E                 db  0Eh
.eh_frame:0000000000017A7F                 db  18h
.eh_frame:0000000000017A80                 db  41h ; A
.eh_frame:0000000000017A81                 db  0Eh
.eh_frame:0000000000017A82                 db  10h
.eh_frame:0000000000017A83                 db  42h ; B
.eh_frame:0000000000017A84                 db  0Eh
.eh_frame:0000000000017A85                 db    8
.eh_frame:0000000000017A86                 db  41h ; A
.eh_frame:0000000000017A87                 db  0Bh
.eh_frame:0000000000017A88                 db  28h ; (
.eh_frame:0000000000017A89                 db    0
.eh_frame:0000000000017A8A                 db    0
.eh_frame:0000000000017A8B                 db    0
.eh_frame:0000000000017A8C                 db  7Ch ; |
.eh_frame:0000000000017A8D                 db    1
.eh_frame:0000000000017A8E                 db    0
.eh_frame:0000000000017A8F                 db    0
.eh_frame:0000000000017A90                 db 0A0h
.eh_frame:0000000000017A91                 db 0A8h
.eh_frame:0000000000017A92                 db 0FEh
.eh_frame:0000000000017A93                 db 0FFh
.eh_frame:0000000000017A94                 db  79h ; y
.eh_frame:0000000000017A95                 db    4
.eh_frame:0000000000017A96                 db    0
.eh_frame:0000000000017A97                 db    0
.eh_frame:0000000000017A98                 db    0
.eh_frame:0000000000017A99                 db  42h ; B
.eh_frame:0000000000017A9A                 db  0Eh
.eh_frame:0000000000017A9B                 db  10h
.eh_frame:0000000000017A9C                 db  8Dh
.eh_frame:0000000000017A9D                 db    2
.eh_frame:0000000000017A9E                 db  42h ; B
.eh_frame:0000000000017A9F                 db  0Eh
.eh_frame:0000000000017AA0                 db  18h
.eh_frame:0000000000017AA1                 db  8Ch
.eh_frame:0000000000017AA2                 db    3
.eh_frame:0000000000017AA3                 db  46h ; F
.eh_frame:0000000000017AA4                 db  0Eh
.eh_frame:0000000000017AA5                 db  20h
.eh_frame:0000000000017AA6                 db  86h
.eh_frame:0000000000017AA7                 db    4
.eh_frame:0000000000017AA8                 db  41h ; A
.eh_frame:0000000000017AA9                 db  0Eh
.eh_frame:0000000000017AAA                 db  28h ; (
.eh_frame:0000000000017AAB                 db  83h
.eh_frame:0000000000017AAC                 db    5
.eh_frame:0000000000017AAD                 db  49h ; I
.eh_frame:0000000000017AAE                 db  0Eh
.eh_frame:0000000000017AAF                 db 0B0h
.eh_frame:0000000000017AB0                 db    1
.eh_frame:0000000000017AB1                 db    0
.eh_frame:0000000000017AB2                 db    0
.eh_frame:0000000000017AB3                 db    0
.eh_frame:0000000000017AB4                 db  4Ch ; L
.eh_frame:0000000000017AB5                 db    0
.eh_frame:0000000000017AB6                 db    0
.eh_frame:0000000000017AB7                 db    0
.eh_frame:0000000000017AB8                 db 0A8h
.eh_frame:0000000000017AB9                 db    1
.eh_frame:0000000000017ABA                 db    0
.eh_frame:0000000000017ABB                 db    0
.eh_frame:0000000000017ABC                 db 0F4h
.eh_frame:0000000000017ABD                 db 0ACh
.eh_frame:0000000000017ABE                 db 0FEh
.eh_frame:0000000000017ABF                 db 0FFh
.eh_frame:0000000000017AC0                 db 0A3h
.eh_frame:0000000000017AC1                 db    4
.eh_frame:0000000000017AC2                 db    0
.eh_frame:0000000000017AC3                 db    0
.eh_frame:0000000000017AC4                 db    0
.eh_frame:0000000000017AC5                 db  42h ; B
.eh_frame:0000000000017AC6                 db  0Eh
.eh_frame:0000000000017AC7                 db  10h
.eh_frame:0000000000017AC8                 db  8Fh
.eh_frame:0000000000017AC9                 db    2
.eh_frame:0000000000017ACA                 db  42h ; B
.eh_frame:0000000000017ACB                 db  0Eh
.eh_frame:0000000000017ACC                 db  18h
.eh_frame:0000000000017ACD                 db  8Eh
.eh_frame:0000000000017ACE                 db    3
.eh_frame:0000000000017ACF                 db  42h ; B
.eh_frame:0000000000017AD0                 db  0Eh
.eh_frame:0000000000017AD1                 db  20h
.eh_frame:0000000000017AD2                 db  8Dh
.eh_frame:0000000000017AD3                 db    4
.eh_frame:0000000000017AD4                 db  42h ; B
.eh_frame:0000000000017AD5                 db  0Eh
.eh_frame:0000000000017AD6                 db  28h ; (
.eh_frame:0000000000017AD7                 db  8Ch
.eh_frame:0000000000017AD8                 db    5
.eh_frame:0000000000017AD9                 db  41h ; A
.eh_frame:0000000000017ADA                 db  0Eh
.eh_frame:0000000000017ADB                 db  30h ; 0
.eh_frame:0000000000017ADC                 db  86h
.eh_frame:0000000000017ADD                 db    6
.eh_frame:0000000000017ADE                 db  41h ; A
.eh_frame:0000000000017ADF                 db  0Eh
.eh_frame:0000000000017AE0                 db  38h ; 8
.eh_frame:0000000000017AE1                 db  83h
.eh_frame:0000000000017AE2                 db    7
.eh_frame:0000000000017AE3                 db  4Dh ; M
.eh_frame:0000000000017AE4                 db  0Eh
.eh_frame:0000000000017AE5                 db  80h
.eh_frame:0000000000017AE6                 db    4
.eh_frame:0000000000017AE7                 db    3
.eh_frame:0000000000017AE8                 db  4Ah ; J
.eh_frame:0000000000017AE9                 db    1
.eh_frame:0000000000017AEA                 db  0Ah
.eh_frame:0000000000017AEB                 db  0Eh
.eh_frame:0000000000017AEC                 db  38h ; 8
.eh_frame:0000000000017AED                 db  41h ; A
.eh_frame:0000000000017AEE                 db  0Eh
.eh_frame:0000000000017AEF                 db  30h ; 0
.eh_frame:0000000000017AF0                 db  41h ; A
.eh_frame:0000000000017AF1                 db  0Eh
.eh_frame:0000000000017AF2                 db  28h ; (
.eh_frame:0000000000017AF3                 db  42h ; B
.eh_frame:0000000000017AF4                 db  0Eh
.eh_frame:0000000000017AF5                 db  20h
.eh_frame:0000000000017AF6                 db  42h ; B
.eh_frame:0000000000017AF7                 db  0Eh
.eh_frame:0000000000017AF8                 db  18h
.eh_frame:0000000000017AF9                 db  42h ; B
.eh_frame:0000000000017AFA                 db  0Eh
.eh_frame:0000000000017AFB                 db  10h
.eh_frame:0000000000017AFC                 db  42h ; B
.eh_frame:0000000000017AFD                 db  0Eh
.eh_frame:0000000000017AFE                 db    8
.eh_frame:0000000000017AFF                 db  45h ; E
.eh_frame:0000000000017B00                 db  0Bh
.eh_frame:0000000000017B01                 db    0
.eh_frame:0000000000017B02                 db    0
.eh_frame:0000000000017B03                 db    0
.eh_frame:0000000000017B04                 db  4Ch ; L
.eh_frame:0000000000017B05                 db    0
.eh_frame:0000000000017B06                 db    0
.eh_frame:0000000000017B07                 db    0
.eh_frame:0000000000017B08                 db 0F8h
.eh_frame:0000000000017B09                 db    1
.eh_frame:0000000000017B0A                 db    0
.eh_frame:0000000000017B0B                 db    0
.eh_frame:0000000000017B0C                 db  54h ; T
.eh_frame:0000000000017B0D                 db 0B1h
.eh_frame:0000000000017B0E                 db 0FEh
.eh_frame:0000000000017B0F                 db 0FFh
.eh_frame:0000000000017B10                 db 0A2h
.eh_frame:0000000000017B11                 db  0Bh
.eh_frame:0000000000017B12                 db    0
.eh_frame:0000000000017B13                 db    0
.eh_frame:0000000000017B14                 db    0
.eh_frame:0000000000017B15                 db  42h ; B
.eh_frame:0000000000017B16                 db  0Eh
.eh_frame:0000000000017B17                 db  10h
.eh_frame:0000000000017B18                 db  8Fh
.eh_frame:0000000000017B19                 db    2
.eh_frame:0000000000017B1A                 db  42h ; B
.eh_frame:0000000000017B1B                 db  0Eh
.eh_frame:0000000000017B1C                 db  18h
.eh_frame:0000000000017B1D                 db  8Eh
.eh_frame:0000000000017B1E                 db    3
.eh_frame:0000000000017B1F                 db  42h ; B
.eh_frame:0000000000017B20                 db  0Eh
.eh_frame:0000000000017B21                 db  20h
.eh_frame:0000000000017B22                 db  8Dh
.eh_frame:0000000000017B23                 db    4
.eh_frame:0000000000017B24                 db  42h ; B
.eh_frame:0000000000017B25                 db  0Eh
.eh_frame:0000000000017B26                 db  28h ; (
.eh_frame:0000000000017B27                 db  8Ch
.eh_frame:0000000000017B28                 db    5
.eh_frame:0000000000017B29                 db  41h ; A
.eh_frame:0000000000017B2A                 db  0Eh
.eh_frame:0000000000017B2B                 db  30h ; 0
.eh_frame:0000000000017B2C                 db  86h
.eh_frame:0000000000017B2D                 db    6
.eh_frame:0000000000017B2E                 db  41h ; A
.eh_frame:0000000000017B2F                 db  0Eh
.eh_frame:0000000000017B30                 db  38h ; 8
.eh_frame:0000000000017B31                 db  83h
.eh_frame:0000000000017B32                 db    7
.eh_frame:0000000000017B33                 db  50h ; P
.eh_frame:0000000000017B34                 db  0Eh
.eh_frame:0000000000017B35                 db 0C0h
.eh_frame:0000000000017B36                 db    2
.eh_frame:0000000000017B37                 db    3
.eh_frame:0000000000017B38                 db  49h ; I
.eh_frame:0000000000017B39                 db    1
.eh_frame:0000000000017B3A                 db  0Ah
.eh_frame:0000000000017B3B                 db  0Eh
.eh_frame:0000000000017B3C                 db  38h ; 8
.eh_frame:0000000000017B3D                 db  41h ; A
.eh_frame:0000000000017B3E                 db  0Eh
.eh_frame:0000000000017B3F                 db  30h ; 0
.eh_frame:0000000000017B40                 db  41h ; A
.eh_frame:0000000000017B41                 db  0Eh
.eh_frame:0000000000017B42                 db  28h ; (
.eh_frame:0000000000017B43                 db  42h ; B
.eh_frame:0000000000017B44                 db  0Eh
.eh_frame:0000000000017B45                 db  20h
.eh_frame:0000000000017B46                 db  42h ; B
.eh_frame:0000000000017B47                 db  0Eh
.eh_frame:0000000000017B48                 db  18h
.eh_frame:0000000000017B49                 db  42h ; B
.eh_frame:0000000000017B4A                 db  0Eh
.eh_frame:0000000000017B4B                 db  10h
.eh_frame:0000000000017B4C                 db  42h ; B
.eh_frame:0000000000017B4D                 db  0Eh
.eh_frame:0000000000017B4E                 db    8
.eh_frame:0000000000017B4F                 db  43h ; C
.eh_frame:0000000000017B50                 db  0Bh
.eh_frame:0000000000017B51                 db    0
.eh_frame:0000000000017B52                 db    0
.eh_frame:0000000000017B53                 db    0
.eh_frame:0000000000017B54                 db  44h ; D
.eh_frame:0000000000017B55                 db    0
.eh_frame:0000000000017B56                 db    0
.eh_frame:0000000000017B57                 db    0
.eh_frame:0000000000017B58                 db  48h ; H
.eh_frame:0000000000017B59                 db    2
.eh_frame:0000000000017B5A                 db    0
.eh_frame:0000000000017B5B                 db    0
.eh_frame:0000000000017B5C                 db 0B4h
.eh_frame:0000000000017B5D                 db 0BCh
.eh_frame:0000000000017B5E                 db 0FEh
.eh_frame:0000000000017B5F                 db 0FFh
.eh_frame:0000000000017B60                 db  82h
.eh_frame:0000000000017B61                 db    0
.eh_frame:0000000000017B62                 db    0
.eh_frame:0000000000017B63                 db    0
.eh_frame:0000000000017B64                 db    0
.eh_frame:0000000000017B65                 db  42h ; B
.eh_frame:0000000000017B66                 db  0Eh
.eh_frame:0000000000017B67                 db  10h
.eh_frame:0000000000017B68                 db  8Fh
.eh_frame:0000000000017B69                 db    2
.eh_frame:0000000000017B6A                 db  42h ; B
.eh_frame:0000000000017B6B                 db  0Eh
.eh_frame:0000000000017B6C                 db  18h
.eh_frame:0000000000017B6D                 db  8Eh
.eh_frame:0000000000017B6E                 db    3
.eh_frame:0000000000017B6F                 db  45h ; E
.eh_frame:0000000000017B70                 db  0Eh
.eh_frame:0000000000017B71                 db  20h
.eh_frame:0000000000017B72                 db  8Dh
.eh_frame:0000000000017B73                 db    4
.eh_frame:0000000000017B74                 db  42h ; B
.eh_frame:0000000000017B75                 db  0Eh
.eh_frame:0000000000017B76                 db  28h ; (
.eh_frame:0000000000017B77                 db  8Ch
.eh_frame:0000000000017B78                 db    5
.eh_frame:0000000000017B79                 db  48h ; H
.eh_frame:0000000000017B7A                 db  0Eh
.eh_frame:0000000000017B7B                 db  30h ; 0
.eh_frame:0000000000017B7C                 db  86h
.eh_frame:0000000000017B7D                 db    6
.eh_frame:0000000000017B7E                 db  41h ; A
.eh_frame:0000000000017B7F                 db  0Eh
.eh_frame:0000000000017B80                 db  38h ; 8
.eh_frame:0000000000017B81                 db  83h
.eh_frame:0000000000017B82                 db    7
.eh_frame:0000000000017B83                 db  4Ah ; J
.eh_frame:0000000000017B84                 db  0Eh
.eh_frame:0000000000017B85                 db  40h ; @
.eh_frame:0000000000017B86                 db    2
.eh_frame:0000000000017B87                 db  56h ; V
.eh_frame:0000000000017B88                 db  0Eh
.eh_frame:0000000000017B89                 db  38h ; 8
.eh_frame:0000000000017B8A                 db  44h ; D
.eh_frame:0000000000017B8B                 db  0Eh
.eh_frame:0000000000017B8C                 db  30h ; 0
.eh_frame:0000000000017B8D                 db  41h ; A
.eh_frame:0000000000017B8E                 db  0Eh
.eh_frame:0000000000017B8F                 db  28h ; (
.eh_frame:0000000000017B90                 db  42h ; B
.eh_frame:0000000000017B91                 db  0Eh
.eh_frame:0000000000017B92                 db  20h
.eh_frame:0000000000017B93                 db  42h ; B
.eh_frame:0000000000017B94                 db  0Eh
.eh_frame:0000000000017B95                 db  18h
.eh_frame:0000000000017B96                 db  42h ; B
.eh_frame:0000000000017B97                 db  0Eh
.eh_frame:0000000000017B98                 db  10h
.eh_frame:0000000000017B99                 db  42h ; B
.eh_frame:0000000000017B9A                 db  0Eh
.eh_frame:0000000000017B9B                 db    8
.eh_frame:0000000000017B9C                 db  3Ch ; <
.eh_frame:0000000000017B9D                 db    0
.eh_frame:0000000000017B9E                 db    0
.eh_frame:0000000000017B9F                 db    0
.eh_frame:0000000000017BA0                 db  90h
.eh_frame:0000000000017BA1                 db    2
.eh_frame:0000000000017BA2                 db    0
.eh_frame:0000000000017BA3                 db    0
.eh_frame:0000000000017BA4                 db 0FCh
.eh_frame:0000000000017BA5                 db 0BCh
.eh_frame:0000000000017BA6                 db 0FEh
.eh_frame:0000000000017BA7                 db 0FFh
.eh_frame:0000000000017BA8                 db  45h ; E
.eh_frame:0000000000017BA9                 db    1
.eh_frame:0000000000017BAA                 db    0
.eh_frame:0000000000017BAB                 db    0
.eh_frame:0000000000017BAC                 db    0
.eh_frame:0000000000017BAD                 db  42h ; B
.eh_frame:0000000000017BAE                 db  0Eh
.eh_frame:0000000000017BAF                 db  10h
.eh_frame:0000000000017BB0                 db  8Eh
.eh_frame:0000000000017BB1                 db    2
.eh_frame:0000000000017BB2                 db  42h ; B
.eh_frame:0000000000017BB3                 db  0Eh
.eh_frame:0000000000017BB4                 db  18h
.eh_frame:0000000000017BB5                 db  8Dh
.eh_frame:0000000000017BB6                 db    3
.eh_frame:0000000000017BB7                 db  45h ; E
.eh_frame:0000000000017BB8                 db  0Eh
.eh_frame:0000000000017BB9                 db  20h
.eh_frame:0000000000017BBA                 db  8Ch
.eh_frame:0000000000017BBB                 db    4
.eh_frame:0000000000017BBC                 db  45h ; E
.eh_frame:0000000000017BBD                 db  0Eh
.eh_frame:0000000000017BBE                 db  28h ; (
.eh_frame:0000000000017BBF                 db  86h
.eh_frame:0000000000017BC0                 db    5
.eh_frame:0000000000017BC1                 db  41h ; A
.eh_frame:0000000000017BC2                 db  0Eh
.eh_frame:0000000000017BC3                 db  30h ; 0
.eh_frame:0000000000017BC4                 db  83h
.eh_frame:0000000000017BC5                 db    6
.eh_frame:0000000000017BC6                 db    2
.eh_frame:0000000000017BC7                 db 0E3h
.eh_frame:0000000000017BC8                 db  0Ah
.eh_frame:0000000000017BC9                 db  0Eh
.eh_frame:0000000000017BCA                 db  28h ; (
.eh_frame:0000000000017BCB                 db  44h ; D
.eh_frame:0000000000017BCC                 db  0Eh
.eh_frame:0000000000017BCD                 db  20h
.eh_frame:0000000000017BCE                 db  42h ; B
.eh_frame:0000000000017BCF                 db  0Eh
.eh_frame:0000000000017BD0                 db  18h
.eh_frame:0000000000017BD1                 db  42h ; B
.eh_frame:0000000000017BD2                 db  0Eh
.eh_frame:0000000000017BD3                 db  10h
.eh_frame:0000000000017BD4                 db  42h ; B
.eh_frame:0000000000017BD5                 db  0Eh
.eh_frame:0000000000017BD6                 db    8
.eh_frame:0000000000017BD7                 db  41h ; A
.eh_frame:0000000000017BD8                 db  0Bh
.eh_frame:0000000000017BD9                 db    0
.eh_frame:0000000000017BDA                 db    0
.eh_frame:0000000000017BDB                 db    0
.eh_frame:0000000000017BDC                 db  3Ch ; <
.eh_frame:0000000000017BDD                 db    0
.eh_frame:0000000000017BDE                 db    0
.eh_frame:0000000000017BDF                 db    0
.eh_frame:0000000000017BE0                 db 0D0h
.eh_frame:0000000000017BE1                 db    2
.eh_frame:0000000000017BE2                 db    0
.eh_frame:0000000000017BE3                 db    0
.eh_frame:0000000000017BE4                 db  0Ch
.eh_frame:0000000000017BE5                 db 0BEh
.eh_frame:0000000000017BE6                 db 0FEh
.eh_frame:0000000000017BE7                 db 0FFh
.eh_frame:0000000000017BE8                 db 0D8h
.eh_frame:0000000000017BE9                 db    0
.eh_frame:0000000000017BEA                 db    0
.eh_frame:0000000000017BEB                 db    0
.eh_frame:0000000000017BEC                 db    0
.eh_frame:0000000000017BED                 db  42h ; B
.eh_frame:0000000000017BEE                 db  0Eh
.eh_frame:0000000000017BEF                 db  10h
.eh_frame:0000000000017BF0                 db  8Eh
.eh_frame:0000000000017BF1                 db    2
.eh_frame:0000000000017BF2                 db  42h ; B
.eh_frame:0000000000017BF3                 db  0Eh
.eh_frame:0000000000017BF4                 db  18h
.eh_frame:0000000000017BF5                 db  8Dh
.eh_frame:0000000000017BF6                 db    3
.eh_frame:0000000000017BF7                 db  45h ; E
.eh_frame:0000000000017BF8                 db  0Eh
.eh_frame:0000000000017BF9                 db  20h
.eh_frame:0000000000017BFA                 db  8Ch
.eh_frame:0000000000017BFB                 db    4
.eh_frame:0000000000017BFC                 db  45h ; E
.eh_frame:0000000000017BFD                 db  0Eh
.eh_frame:0000000000017BFE                 db  28h ; (
.eh_frame:0000000000017BFF                 db  86h
.eh_frame:0000000000017C00                 db    5
.eh_frame:0000000000017C01                 db  41h ; A
.eh_frame:0000000000017C02                 db  0Eh
.eh_frame:0000000000017C03                 db  30h ; 0
.eh_frame:0000000000017C04                 db  83h
.eh_frame:0000000000017C05                 db    6
.eh_frame:0000000000017C06                 db    2
.eh_frame:0000000000017C07                 db  9Ah
.eh_frame:0000000000017C08                 db  0Ah
.eh_frame:0000000000017C09                 db  0Eh
.eh_frame:0000000000017C0A                 db  28h ; (
.eh_frame:0000000000017C0B                 db  44h ; D
.eh_frame:0000000000017C0C                 db  0Eh
.eh_frame:0000000000017C0D                 db  20h
.eh_frame:0000000000017C0E                 db  42h ; B
.eh_frame:0000000000017C0F                 db  0Eh
.eh_frame:0000000000017C10                 db  18h
.eh_frame:0000000000017C11                 db  42h ; B
.eh_frame:0000000000017C12                 db  0Eh
.eh_frame:0000000000017C13                 db  10h
.eh_frame:0000000000017C14                 db  42h ; B
.eh_frame:0000000000017C15                 db  0Eh
.eh_frame:0000000000017C16                 db    8
.eh_frame:0000000000017C17                 db  41h ; A
.eh_frame:0000000000017C18                 db  0Bh
.eh_frame:0000000000017C19                 db    0
.eh_frame:0000000000017C1A                 db    0
.eh_frame:0000000000017C1B                 db    0
.eh_frame:0000000000017C1C                 db  48h ; H
.eh_frame:0000000000017C1D                 db    0
.eh_frame:0000000000017C1E                 db    0
.eh_frame:0000000000017C1F                 db    0
.eh_frame:0000000000017C20                 db  10h
.eh_frame:0000000000017C21                 db    3
.eh_frame:0000000000017C22                 db    0
.eh_frame:0000000000017C23                 db    0
.eh_frame:0000000000017C24                 db 0ACh
.eh_frame:0000000000017C25                 db 0BEh
.eh_frame:0000000000017C26                 db 0FEh
.eh_frame:0000000000017C27                 db 0FFh
.eh_frame:0000000000017C28                 db  51h ; Q
.eh_frame:0000000000017C29                 db    2
.eh_frame:0000000000017C2A                 db    0
.eh_frame:0000000000017C2B                 db    0
.eh_frame:0000000000017C2C                 db    0
.eh_frame:0000000000017C2D                 db  42h ; B
.eh_frame:0000000000017C2E                 db  0Eh
.eh_frame:0000000000017C2F                 db  10h
.eh_frame:0000000000017C30                 db  8Fh
.eh_frame:0000000000017C31                 db    2
.eh_frame:0000000000017C32                 db  42h ; B
.eh_frame:0000000000017C33                 db  0Eh
.eh_frame:0000000000017C34                 db  18h
.eh_frame:0000000000017C35                 db  8Eh
.eh_frame:0000000000017C36                 db    3
.eh_frame:0000000000017C37                 db  45h ; E
.eh_frame:0000000000017C38                 db  0Eh
.eh_frame:0000000000017C39                 db  20h
.eh_frame:0000000000017C3A                 db  8Dh
.eh_frame:0000000000017C3B                 db    4
.eh_frame:0000000000017C3C                 db  42h ; B
.eh_frame:0000000000017C3D                 db  0Eh
.eh_frame:0000000000017C3E                 db  28h ; (
.eh_frame:0000000000017C3F                 db  8Ch
.eh_frame:0000000000017C40                 db    5
.eh_frame:0000000000017C41                 db  45h ; E
.eh_frame:0000000000017C42                 db  0Eh
.eh_frame:0000000000017C43                 db  30h ; 0
.eh_frame:0000000000017C44                 db  86h
.eh_frame:0000000000017C45                 db    6
.eh_frame:0000000000017C46                 db  41h ; A
.eh_frame:0000000000017C47                 db  0Eh
.eh_frame:0000000000017C48                 db  38h ; 8
.eh_frame:0000000000017C49                 db  83h
.eh_frame:0000000000017C4A                 db    7
.eh_frame:0000000000017C4B                 db  47h ; G
.eh_frame:0000000000017C4C                 db  0Eh
.eh_frame:0000000000017C4D                 db  40h ; @
.eh_frame:0000000000017C4E                 db    3
.eh_frame:0000000000017C4F                 db  2Bh ; +
.eh_frame:0000000000017C50                 db    2
.eh_frame:0000000000017C51                 db  0Eh
.eh_frame:0000000000017C52                 db  38h ; 8
.eh_frame:0000000000017C53                 db  44h ; D
.eh_frame:0000000000017C54                 db  0Eh
.eh_frame:0000000000017C55                 db  30h ; 0
.eh_frame:0000000000017C56                 db  41h ; A
.eh_frame:0000000000017C57                 db  0Eh
.eh_frame:0000000000017C58                 db  28h ; (
.eh_frame:0000000000017C59                 db  42h ; B
.eh_frame:0000000000017C5A                 db  0Eh
.eh_frame:0000000000017C5B                 db  20h
.eh_frame:0000000000017C5C                 db  42h ; B
.eh_frame:0000000000017C5D                 db  0Eh
.eh_frame:0000000000017C5E                 db  18h
.eh_frame:0000000000017C5F                 db  42h ; B
.eh_frame:0000000000017C60                 db  0Eh
.eh_frame:0000000000017C61                 db  10h
.eh_frame:0000000000017C62                 db  42h ; B
.eh_frame:0000000000017C63                 db  0Eh
.eh_frame:0000000000017C64                 db    8
.eh_frame:0000000000017C65                 db    0
.eh_frame:0000000000017C66                 db    0
.eh_frame:0000000000017C67                 db    0
.eh_frame:0000000000017C68                 db  2Ch ; ,
.eh_frame:0000000000017C69                 db    0
.eh_frame:0000000000017C6A                 db    0
.eh_frame:0000000000017C6B                 db    0
.eh_frame:0000000000017C6C                 db  5Ch ; \
.eh_frame:0000000000017C6D                 db    3
.eh_frame:0000000000017C6E                 db    0
.eh_frame:0000000000017C6F                 db    0
.eh_frame:0000000000017C70                 db 0C0h
.eh_frame:0000000000017C71                 db 0C0h
.eh_frame:0000000000017C72                 db 0FEh
.eh_frame:0000000000017C73                 db 0FFh
.eh_frame:0000000000017C74                 db 0ADh
.eh_frame:0000000000017C75                 db    0
.eh_frame:0000000000017C76                 db    0
.eh_frame:0000000000017C77                 db    0
.eh_frame:0000000000017C78                 db    0
.eh_frame:0000000000017C79                 db  42h ; B
.eh_frame:0000000000017C7A                 db  0Eh
.eh_frame:0000000000017C7B                 db  10h
.eh_frame:0000000000017C7C                 db  8Ch
.eh_frame:0000000000017C7D                 db    2
.eh_frame:0000000000017C7E                 db  41h ; A
.eh_frame:0000000000017C7F                 db  0Eh
.eh_frame:0000000000017C80                 db  18h
.eh_frame:0000000000017C81                 db  86h
.eh_frame:0000000000017C82                 db    3
.eh_frame:0000000000017C83                 db  44h ; D
.eh_frame:0000000000017C84                 db  0Eh
.eh_frame:0000000000017C85                 db  20h
.eh_frame:0000000000017C86                 db  83h
.eh_frame:0000000000017C87                 db    4
.eh_frame:0000000000017C88                 db    2
.eh_frame:0000000000017C89                 db  93h
.eh_frame:0000000000017C8A                 db  0Ah
.eh_frame:0000000000017C8B                 db  0Eh
.eh_frame:0000000000017C8C                 db  18h
.eh_frame:0000000000017C8D                 db  41h ; A
.eh_frame:0000000000017C8E                 db  0Eh
.eh_frame:0000000000017C8F                 db  10h
.eh_frame:0000000000017C90                 db  42h ; B
.eh_frame:0000000000017C91                 db  0Eh
.eh_frame:0000000000017C92                 db    8
.eh_frame:0000000000017C93                 db  43h ; C
.eh_frame:0000000000017C94                 db  0Bh
.eh_frame:0000000000017C95                 db    0
.eh_frame:0000000000017C96                 db    0
.eh_frame:0000000000017C97                 db    0
.eh_frame:0000000000017C98                 db  2Ch ; ,
.eh_frame:0000000000017C99                 db    0
.eh_frame:0000000000017C9A                 db    0
.eh_frame:0000000000017C9B                 db    0
.eh_frame:0000000000017C9C                 db  8Ch
.eh_frame:0000000000017C9D                 db    3
.eh_frame:0000000000017C9E                 db    0
.eh_frame:0000000000017C9F                 db    0
.eh_frame:0000000000017CA0                 db  40h ; @
.eh_frame:0000000000017CA1                 db 0C1h
.eh_frame:0000000000017CA2                 db 0FEh
.eh_frame:0000000000017CA3                 db 0FFh
.eh_frame:0000000000017CA4                 db 0B5h
.eh_frame:0000000000017CA5                 db    0
.eh_frame:0000000000017CA6                 db    0
.eh_frame:0000000000017CA7                 db    0
.eh_frame:0000000000017CA8                 db    0
.eh_frame:0000000000017CA9                 db  42h ; B
.eh_frame:0000000000017CAA                 db  0Eh
.eh_frame:0000000000017CAB                 db  10h
.eh_frame:0000000000017CAC                 db  8Ch
.eh_frame:0000000000017CAD                 db    2
.eh_frame:0000000000017CAE                 db  41h ; A
.eh_frame:0000000000017CAF                 db  0Eh
.eh_frame:0000000000017CB0                 db  18h
.eh_frame:0000000000017CB1                 db  86h
.eh_frame:0000000000017CB2                 db    3
.eh_frame:0000000000017CB3                 db  44h ; D
.eh_frame:0000000000017CB4                 db  0Eh
.eh_frame:0000000000017CB5                 db  20h
.eh_frame:0000000000017CB6                 db  83h
.eh_frame:0000000000017CB7                 db    4
.eh_frame:0000000000017CB8                 db    2
.eh_frame:0000000000017CB9                 db  98h
.eh_frame:0000000000017CBA                 db  0Ah
.eh_frame:0000000000017CBB                 db  0Eh
.eh_frame:0000000000017CBC                 db  18h
.eh_frame:0000000000017CBD                 db  41h ; A
.eh_frame:0000000000017CBE                 db  0Eh
.eh_frame:0000000000017CBF                 db  10h
.eh_frame:0000000000017CC0                 db  42h ; B
.eh_frame:0000000000017CC1                 db  0Eh
.eh_frame:0000000000017CC2                 db    8
.eh_frame:0000000000017CC3                 db  46h ; F
.eh_frame:0000000000017CC4                 db  0Bh
.eh_frame:0000000000017CC5                 db    0
.eh_frame:0000000000017CC6                 db    0
.eh_frame:0000000000017CC7                 db    0
.eh_frame:0000000000017CC8                 db  3Ch ; <
.eh_frame:0000000000017CC9                 db    0
.eh_frame:0000000000017CCA                 db    0
.eh_frame:0000000000017CCB                 db    0
.eh_frame:0000000000017CCC                 db 0BCh
.eh_frame:0000000000017CCD                 db    3
.eh_frame:0000000000017CCE                 db    0
.eh_frame:0000000000017CCF                 db    0
.eh_frame:0000000000017CD0                 db  40h ; @
.eh_frame:0000000000017CD1                 db 0A1h
.eh_frame:0000000000017CD2                 db 0FEh
.eh_frame:0000000000017CD3                 db 0FFh
.eh_frame:0000000000017CD4                 db 0BBh
.eh_frame:0000000000017CD5                 db    1
.eh_frame:0000000000017CD6                 db    0
.eh_frame:0000000000017CD7                 db    0
.eh_frame:0000000000017CD8                 db    0
.eh_frame:0000000000017CD9                 db  41h ; A
.eh_frame:0000000000017CDA                 db  0Eh
.eh_frame:0000000000017CDB                 db  10h
.eh_frame:0000000000017CDC                 db  86h
.eh_frame:0000000000017CDD                 db    2
.eh_frame:0000000000017CDE                 db  41h ; A
.eh_frame:0000000000017CDF                 db  0Eh
.eh_frame:0000000000017CE0                 db  18h
.eh_frame:0000000000017CE1                 db  83h
.eh_frame:0000000000017CE2                 db    3
.eh_frame:0000000000017CE3                 db  49h ; I
.eh_frame:0000000000017CE4                 db  0Eh
.eh_frame:0000000000017CE5                 db  20h
.eh_frame:0000000000017CE6                 db    2
.eh_frame:0000000000017CE7                 db  57h ; W
.eh_frame:0000000000017CE8                 db  0Eh
.eh_frame:0000000000017CE9                 db  28h ; (
.eh_frame:0000000000017CEA                 db  5Dh ; ]
.eh_frame:0000000000017CEB                 db  0Eh
.eh_frame:0000000000017CEC                 db  30h ; 0
.eh_frame:0000000000017CED                 db  4Dh ; M
.eh_frame:0000000000017CEE                 db  0Eh
.eh_frame:0000000000017CEF                 db  38h ; 8
.eh_frame:0000000000017CF0                 db  48h ; H
.eh_frame:0000000000017CF1                 db  0Eh
.eh_frame:0000000000017CF2                 db  40h ; @
.eh_frame:0000000000017CF3                 db  4Bh ; K
.eh_frame:0000000000017CF4                 db  0Eh
.eh_frame:0000000000017CF5                 db  20h
.eh_frame:0000000000017CF6                 db    2
.eh_frame:0000000000017CF7                 db  71h ; q
.eh_frame:0000000000017CF8                 db  0Ah
.eh_frame:0000000000017CF9                 db  0Eh
.eh_frame:0000000000017CFA                 db  18h
.eh_frame:0000000000017CFB                 db  44h ; D
.eh_frame:0000000000017CFC                 db  0Eh
.eh_frame:0000000000017CFD                 db  10h
.eh_frame:0000000000017CFE                 db  41h ; A
.eh_frame:0000000000017CFF                 db  0Eh
.eh_frame:0000000000017D00                 db    8
.eh_frame:0000000000017D01                 db  41h ; A
.eh_frame:0000000000017D02                 db  0Bh
.eh_frame:0000000000017D03                 db    0
.eh_frame:0000000000017D04                 db    0
.eh_frame:0000000000017D05                 db    0
.eh_frame:0000000000017D06                 db    0
.eh_frame:0000000000017D07                 db    0
.eh_frame:0000000000017D08                 db  10h
.eh_frame:0000000000017D09                 db    0
.eh_frame:0000000000017D0A                 db    0
.eh_frame:0000000000017D0B                 db    0
.eh_frame:0000000000017D0C                 db 0FCh
.eh_frame:0000000000017D0D                 db    3
.eh_frame:0000000000017D0E                 db    0
.eh_frame:0000000000017D0F                 db    0
.eh_frame:0000000000017D10                 db  90h
.eh_frame:0000000000017D11                 db 0C1h
.eh_frame:0000000000017D12                 db 0FEh
.eh_frame:0000000000017D13                 db 0FFh
.eh_frame:0000000000017D14                 db    8
.eh_frame:0000000000017D15                 db    0
.eh_frame:0000000000017D16                 db    0
.eh_frame:0000000000017D17                 db    0
.eh_frame:0000000000017D18                 db    0
.eh_frame:0000000000017D19                 db    0
.eh_frame:0000000000017D1A                 db    0
.eh_frame:0000000000017D1B                 db    0
.eh_frame:0000000000017D1C                 db  10h
.eh_frame:0000000000017D1D                 db    0
.eh_frame:0000000000017D1E                 db    0
.eh_frame:0000000000017D1F                 db    0
.eh_frame:0000000000017D20                 db  10h
.eh_frame:0000000000017D21                 db    4
.eh_frame:0000000000017D22                 db    0
.eh_frame:0000000000017D23                 db    0
.eh_frame:0000000000017D24                 db  8Ch
.eh_frame:0000000000017D25                 db 0C1h
.eh_frame:0000000000017D26                 db 0FEh
.eh_frame:0000000000017D27                 db 0FFh
.eh_frame:0000000000017D28                 db    8
.eh_frame:0000000000017D29                 db    0
.eh_frame:0000000000017D2A                 db    0
.eh_frame:0000000000017D2B                 db    0
.eh_frame:0000000000017D2C                 db    0
.eh_frame:0000000000017D2D                 db    0
.eh_frame:0000000000017D2E                 db    0
.eh_frame:0000000000017D2F                 db    0
.eh_frame:0000000000017D30                 db  2Ch ; ,
.eh_frame:0000000000017D31                 db    0
.eh_frame:0000000000017D32                 db    0
.eh_frame:0000000000017D33                 db    0
.eh_frame:0000000000017D34                 db  24h ; $
.eh_frame:0000000000017D35                 db    4
.eh_frame:0000000000017D36                 db    0
.eh_frame:0000000000017D37                 db    0
.eh_frame:0000000000017D38                 db  88h
.eh_frame:0000000000017D39                 db 0C1h
.eh_frame:0000000000017D3A                 db 0FEh
.eh_frame:0000000000017D3B                 db 0FFh
.eh_frame:0000000000017D3C                 db 0A4h
.eh_frame:0000000000017D3D                 db    0
.eh_frame:0000000000017D3E                 db    0
.eh_frame:0000000000017D3F                 db    0
.eh_frame:0000000000017D40                 db    0
.eh_frame:0000000000017D41                 db  41h ; A
.eh_frame:0000000000017D42                 db  0Eh
.eh_frame:0000000000017D43                 db  10h
.eh_frame:0000000000017D44                 db  86h
.eh_frame:0000000000017D45                 db    2
.eh_frame:0000000000017D46                 db  41h ; A
.eh_frame:0000000000017D47                 db  0Eh
.eh_frame:0000000000017D48                 db  18h
.eh_frame:0000000000017D49                 db  83h
.eh_frame:0000000000017D4A                 db    3
.eh_frame:0000000000017D4B                 db  44h ; D
.eh_frame:0000000000017D4C                 db  0Eh
.eh_frame:0000000000017D4D                 db  20h
.eh_frame:0000000000017D4E                 db  7Ah ; z
.eh_frame:0000000000017D4F                 db  0Ah
.eh_frame:0000000000017D50                 db  0Eh
.eh_frame:0000000000017D51                 db  18h
.eh_frame:0000000000017D52                 db  41h ; A
.eh_frame:0000000000017D53                 db  0Eh
.eh_frame:0000000000017D54                 db  10h
.eh_frame:0000000000017D55                 db  41h ; A
.eh_frame:0000000000017D56                 db  0Eh
.eh_frame:0000000000017D57                 db    8
.eh_frame:0000000000017D58                 db  41h ; A
.eh_frame:0000000000017D59                 db  0Bh
.eh_frame:0000000000017D5A                 db    0
.eh_frame:0000000000017D5B                 db    0
.eh_frame:0000000000017D5C                 db    0
.eh_frame:0000000000017D5D                 db    0
.eh_frame:0000000000017D5E                 db    0
.eh_frame:0000000000017D5F                 db    0
.eh_frame:0000000000017D60                 db  38h ; 8
.eh_frame:0000000000017D61                 db    0
.eh_frame:0000000000017D62                 db    0
.eh_frame:0000000000017D63                 db    0
.eh_frame:0000000000017D64                 db  54h ; T
.eh_frame:0000000000017D65                 db    4
.eh_frame:0000000000017D66                 db    0
.eh_frame:0000000000017D67                 db    0
.eh_frame:0000000000017D68                 db    8
.eh_frame:0000000000017D69                 db 0C2h
.eh_frame:0000000000017D6A                 db 0FEh
.eh_frame:0000000000017D6B                 db 0FFh
.eh_frame:0000000000017D6C                 db  3Fh ; ?
.eh_frame:0000000000017D6D                 db    1
.eh_frame:0000000000017D6E                 db    0
.eh_frame:0000000000017D6F                 db    0
.eh_frame:0000000000017D70                 db    0
.eh_frame:0000000000017D71                 db  42h ; B
.eh_frame:0000000000017D72                 db  0Eh
.eh_frame:0000000000017D73                 db  10h
.eh_frame:0000000000017D74                 db  8Dh
.eh_frame:0000000000017D75                 db    2
.eh_frame:0000000000017D76                 db  42h ; B
.eh_frame:0000000000017D77                 db  0Eh
.eh_frame:0000000000017D78                 db  18h
.eh_frame:0000000000017D79                 db  8Ch
.eh_frame:0000000000017D7A                 db    3
.eh_frame:0000000000017D7B                 db  44h ; D
.eh_frame:0000000000017D7C                 db  0Eh
.eh_frame:0000000000017D7D                 db  20h
.eh_frame:0000000000017D7E                 db  86h
.eh_frame:0000000000017D7F                 db    4
.eh_frame:0000000000017D80                 db  41h ; A
.eh_frame:0000000000017D81                 db  0Eh
.eh_frame:0000000000017D82                 db  28h ; (
.eh_frame:0000000000017D83                 db  83h
.eh_frame:0000000000017D84                 db    5
.eh_frame:0000000000017D85                 db  4Dh ; M
.eh_frame:0000000000017D86                 db  0Eh
.eh_frame:0000000000017D87                 db  90h
.eh_frame:0000000000017D88                 db    2
.eh_frame:0000000000017D89                 db    2
.eh_frame:0000000000017D8A                 db  8Eh
.eh_frame:0000000000017D8B                 db  0Ah
.eh_frame:0000000000017D8C                 db  0Eh
.eh_frame:0000000000017D8D                 db  28h ; (
.eh_frame:0000000000017D8E                 db  41h ; A
.eh_frame:0000000000017D8F                 db  0Eh
.eh_frame:0000000000017D90                 db  20h
.eh_frame:0000000000017D91                 db  41h ; A
.eh_frame:0000000000017D92                 db  0Eh
.eh_frame:0000000000017D93                 db  18h
.eh_frame:0000000000017D94                 db  42h ; B
.eh_frame:0000000000017D95                 db  0Eh
.eh_frame:0000000000017D96                 db  10h
.eh_frame:0000000000017D97                 db  42h ; B
.eh_frame:0000000000017D98                 db  0Eh
.eh_frame:0000000000017D99                 db    8
.eh_frame:0000000000017D9A                 db  46h ; F
.eh_frame:0000000000017D9B                 db  0Bh
.eh_frame:0000000000017D9C                 db  48h ; H
.eh_frame:0000000000017D9D                 db    0
.eh_frame:0000000000017D9E                 db    0
.eh_frame:0000000000017D9F                 db    0
.eh_frame:0000000000017DA0                 db  90h
.eh_frame:0000000000017DA1                 db    4
.eh_frame:0000000000017DA2                 db    0
.eh_frame:0000000000017DA3                 db    0
.eh_frame:0000000000017DA4                 db  0Ch
.eh_frame:0000000000017DA5                 db 0C3h
.eh_frame:0000000000017DA6                 db 0FEh
.eh_frame:0000000000017DA7                 db 0FFh
.eh_frame:0000000000017DA8                 db  3Bh ; ;
.eh_frame:0000000000017DA9                 db    1
.eh_frame:0000000000017DAA                 db    0
.eh_frame:0000000000017DAB                 db    0
.eh_frame:0000000000017DAC                 db    0
.eh_frame:0000000000017DAD                 db  42h ; B
.eh_frame:0000000000017DAE                 db  0Eh
.eh_frame:0000000000017DAF                 db  10h
.eh_frame:0000000000017DB0                 db  8Eh
.eh_frame:0000000000017DB1                 db    2
.eh_frame:0000000000017DB2                 db  42h ; B
.eh_frame:0000000000017DB3                 db  0Eh
.eh_frame:0000000000017DB4                 db  18h
.eh_frame:0000000000017DB5                 db  8Dh
.eh_frame:0000000000017DB6                 db    3
.eh_frame:0000000000017DB7                 db  45h ; E
.eh_frame:0000000000017DB8                 db  0Eh
.eh_frame:0000000000017DB9                 db  20h
.eh_frame:0000000000017DBA                 db  8Ch
.eh_frame:0000000000017DBB                 db    4
.eh_frame:0000000000017DBC                 db  41h ; A
.eh_frame:0000000000017DBD                 db  0Eh
.eh_frame:0000000000017DBE                 db  28h ; (
.eh_frame:0000000000017DBF                 db  86h
.eh_frame:0000000000017DC0                 db    5
.eh_frame:0000000000017DC1                 db  44h ; D
.eh_frame:0000000000017DC2                 db  0Eh
.eh_frame:0000000000017DC3                 db  30h ; 0
.eh_frame:0000000000017DC4                 db  83h
.eh_frame:0000000000017DC5                 db    6
.eh_frame:0000000000017DC6                 db  4Ah ; J
.eh_frame:0000000000017DC7                 db  0Eh
.eh_frame:0000000000017DC8                 db  80h
.eh_frame:0000000000017DC9                 db    2
.eh_frame:0000000000017DCA                 db    3
.eh_frame:0000000000017DCB                 db  0Dh
.eh_frame:0000000000017DCC                 db    1
.eh_frame:0000000000017DCD                 db  0Ah
.eh_frame:0000000000017DCE                 db  0Eh
.eh_frame:0000000000017DCF                 db  30h ; 0
.eh_frame:0000000000017DD0                 db  41h ; A
.eh_frame:0000000000017DD1                 db  0Eh
.eh_frame:0000000000017DD2                 db  28h ; (
.eh_frame:0000000000017DD3                 db  41h ; A
.eh_frame:0000000000017DD4                 db  0Eh
.eh_frame:0000000000017DD5                 db  20h
.eh_frame:0000000000017DD6                 db  42h ; B
.eh_frame:0000000000017DD7                 db  0Eh
.eh_frame:0000000000017DD8                 db  18h
.eh_frame:0000000000017DD9                 db  42h ; B
.eh_frame:0000000000017DDA                 db  0Eh
.eh_frame:0000000000017DDB                 db  10h
.eh_frame:0000000000017DDC                 db  42h ; B
.eh_frame:0000000000017DDD                 db  0Eh
.eh_frame:0000000000017DDE                 db    8
.eh_frame:0000000000017DDF                 db  43h ; C
.eh_frame:0000000000017DE0                 db  0Bh
.eh_frame:0000000000017DE1                 db    0
.eh_frame:0000000000017DE2                 db    0
.eh_frame:0000000000017DE3                 db    0
.eh_frame:0000000000017DE4                 db    0
.eh_frame:0000000000017DE5                 db    0
.eh_frame:0000000000017DE6                 db    0
.eh_frame:0000000000017DE7                 db    0
.eh_frame:0000000000017DE8                 db  1Ch
.eh_frame:0000000000017DE9                 db    0
.eh_frame:0000000000017DEA                 db    0
.eh_frame:0000000000017DEB                 db    0
.eh_frame:0000000000017DEC                 db 0DCh
.eh_frame:0000000000017DED                 db    4
.eh_frame:0000000000017DEE                 db    0
.eh_frame:0000000000017DEF                 db    0
.eh_frame:0000000000017DF0                 db    0
.eh_frame:0000000000017DF1                 db 0C4h
.eh_frame:0000000000017DF2                 db 0FEh
.eh_frame:0000000000017DF3                 db 0FFh
.eh_frame:0000000000017DF4                 db  21h ; !
.eh_frame:0000000000017DF5                 db    0
.eh_frame:0000000000017DF6                 db    0
.eh_frame:0000000000017DF7                 db    0
.eh_frame:0000000000017DF8                 db    0
.eh_frame:0000000000017DF9                 db  41h ; A
.eh_frame:0000000000017DFA                 db  0Eh
.eh_frame:0000000000017DFB                 db  10h
.eh_frame:0000000000017DFC                 db  83h
.eh_frame:0000000000017DFD                 db    2
.eh_frame:0000000000017DFE                 db  4Ch ; L
.eh_frame:0000000000017DFF                 db  0Ah
.eh_frame:0000000000017E00                 db  0Eh
.eh_frame:0000000000017E01                 db    8
.eh_frame:0000000000017E02                 db  43h ; C
.eh_frame:0000000000017E03                 db  0Bh
.eh_frame:0000000000017E04                 db  50h ; P
.eh_frame:0000000000017E05                 db  0Eh
.eh_frame:0000000000017E06                 db    8
.eh_frame:0000000000017E07                 db    0
.eh_frame:0000000000017E08                 db  28h ; (
.eh_frame:0000000000017E09                 db    0
.eh_frame:0000000000017E0A                 db    0
.eh_frame:0000000000017E0B                 db    0
.eh_frame:0000000000017E0C                 db 0FCh
.eh_frame:0000000000017E0D                 db    4
.eh_frame:0000000000017E0E                 db    0
.eh_frame:0000000000017E0F                 db    0
.eh_frame:0000000000017E10                 db  10h
.eh_frame:0000000000017E11                 db 0C4h
.eh_frame:0000000000017E12                 db 0FEh
.eh_frame:0000000000017E13                 db 0FFh
.eh_frame:0000000000017E14                 db  56h ; V
.eh_frame:0000000000017E15                 db    0
.eh_frame:0000000000017E16                 db    0
.eh_frame:0000000000017E17                 db    0
.eh_frame:0000000000017E18                 db    0
.eh_frame:0000000000017E19                 db  41h ; A
.eh_frame:0000000000017E1A                 db  0Eh
.eh_frame:0000000000017E1B                 db  10h
.eh_frame:0000000000017E1C                 db  86h
.eh_frame:0000000000017E1D                 db    2
.eh_frame:0000000000017E1E                 db  41h ; A
.eh_frame:0000000000017E1F                 db  0Eh
.eh_frame:0000000000017E20                 db  18h
.eh_frame:0000000000017E21                 db  83h
.eh_frame:0000000000017E22                 db    3
.eh_frame:0000000000017E23                 db  4Eh ; N
.eh_frame:0000000000017E24                 db  0Eh
.eh_frame:0000000000017E25                 db  20h
.eh_frame:0000000000017E26                 db  68h ; h
.eh_frame:0000000000017E27                 db  0Ah
.eh_frame:0000000000017E28                 db  0Eh
.eh_frame:0000000000017E29                 db  18h
.eh_frame:0000000000017E2A                 db  41h ; A
.eh_frame:0000000000017E2B                 db  0Eh
.eh_frame:0000000000017E2C                 db  10h
.eh_frame:0000000000017E2D                 db  41h ; A
.eh_frame:0000000000017E2E                 db  0Eh
.eh_frame:0000000000017E2F                 db    8
.eh_frame:0000000000017E30                 db  46h ; F
.eh_frame:0000000000017E31                 db  0Bh
.eh_frame:0000000000017E32                 db    0
.eh_frame:0000000000017E33                 db    0
.eh_frame:0000000000017E34                 db  10h
.eh_frame:0000000000017E35                 db    0
.eh_frame:0000000000017E36                 db    0
.eh_frame:0000000000017E37                 db    0
.eh_frame:0000000000017E38                 db  28h ; (
.eh_frame:0000000000017E39                 db    5
.eh_frame:0000000000017E3A                 db    0
.eh_frame:0000000000017E3B                 db    0
.eh_frame:0000000000017E3C                 db  44h ; D
.eh_frame:0000000000017E3D                 db 0C4h
.eh_frame:0000000000017E3E                 db 0FEh
.eh_frame:0000000000017E3F                 db 0FFh
.eh_frame:0000000000017E40                 db  1Dh
.eh_frame:0000000000017E41                 db    0
.eh_frame:0000000000017E42                 db    0
.eh_frame:0000000000017E43                 db    0
.eh_frame:0000000000017E44                 db    0
.eh_frame:0000000000017E45                 db    0
.eh_frame:0000000000017E46                 db    0
.eh_frame:0000000000017E47                 db    0
.eh_frame:0000000000017E48                 db  5Ch ; \
.eh_frame:0000000000017E49                 db    0
.eh_frame:0000000000017E4A                 db    0
.eh_frame:0000000000017E4B                 db    0
.eh_frame:0000000000017E4C                 db  3Ch ; <
.eh_frame:0000000000017E4D                 db    5
.eh_frame:0000000000017E4E                 db    0
.eh_frame:0000000000017E4F                 db    0
.eh_frame:0000000000017E50                 db  50h ; P
.eh_frame:0000000000017E51                 db 0C4h
.eh_frame:0000000000017E52                 db 0FEh
.eh_frame:0000000000017E53                 db 0FFh
.eh_frame:0000000000017E54                 db 0A5h
.eh_frame:0000000000017E55                 db    2
.eh_frame:0000000000017E56                 db    0
.eh_frame:0000000000017E57                 db    0
.eh_frame:0000000000017E58                 db    0
.eh_frame:0000000000017E59                 db  42h ; B
.eh_frame:0000000000017E5A                 db  0Eh
.eh_frame:0000000000017E5B                 db  10h
.eh_frame:0000000000017E5C                 db  8Eh
.eh_frame:0000000000017E5D                 db    2
.eh_frame:0000000000017E5E                 db  42h ; B
.eh_frame:0000000000017E5F                 db  0Eh
.eh_frame:0000000000017E60                 db  18h
.eh_frame:0000000000017E61                 db  8Dh
.eh_frame:0000000000017E62                 db    3
.eh_frame:0000000000017E63                 db  42h ; B
.eh_frame:0000000000017E64                 db  0Eh
.eh_frame:0000000000017E65                 db  20h
.eh_frame:0000000000017E66                 db  8Ch
.eh_frame:0000000000017E67                 db    4
.eh_frame:0000000000017E68                 db  41h ; A
.eh_frame:0000000000017E69                 db  0Eh
.eh_frame:0000000000017E6A                 db  28h ; (
.eh_frame:0000000000017E6B                 db  86h
.eh_frame:0000000000017E6C                 db    5
.eh_frame:0000000000017E6D                 db  44h ; D
.eh_frame:0000000000017E6E                 db  0Eh
.eh_frame:0000000000017E6F                 db  30h ; 0
.eh_frame:0000000000017E70                 db  83h
.eh_frame:0000000000017E71                 db    6
.eh_frame:0000000000017E72                 db  46h ; F
.eh_frame:0000000000017E73                 db  0Eh
.eh_frame:0000000000017E74                 db  80h
.eh_frame:0000000000017E75                 db    1
.eh_frame:0000000000017E76                 db  7Ah ; z
.eh_frame:0000000000017E77                 db  0Ah
.eh_frame:0000000000017E78                 db  0Eh
.eh_frame:0000000000017E79                 db  30h ; 0
.eh_frame:0000000000017E7A                 db  46h ; F
.eh_frame:0000000000017E7B                 db  0Eh
.eh_frame:0000000000017E7C                 db  28h ; (
.eh_frame:0000000000017E7D                 db  41h ; A
.eh_frame:0000000000017E7E                 db  0Eh
.eh_frame:0000000000017E7F                 db  20h
.eh_frame:0000000000017E80                 db  42h ; B
.eh_frame:0000000000017E81                 db  0Eh
.eh_frame:0000000000017E82                 db  18h
.eh_frame:0000000000017E83                 db  42h ; B
.eh_frame:0000000000017E84                 db  0Eh
.eh_frame:0000000000017E85                 db  10h
.eh_frame:0000000000017E86                 db  42h ; B
.eh_frame:0000000000017E87                 db  0Eh
.eh_frame:0000000000017E88                 db    8
.eh_frame:0000000000017E89                 db  48h ; H
.eh_frame:0000000000017E8A                 db  0Bh
.eh_frame:0000000000017E8B                 db    3
.eh_frame:0000000000017E8C                 db 0DAh
.eh_frame:0000000000017E8D                 db    1
.eh_frame:0000000000017E8E                 db  0Ah
.eh_frame:0000000000017E8F                 db  0Eh
.eh_frame:0000000000017E90                 db  30h ; 0
.eh_frame:0000000000017E91                 db  41h ; A
.eh_frame:0000000000017E92                 db  0Eh
.eh_frame:0000000000017E93                 db  28h ; (
.eh_frame:0000000000017E94                 db  41h ; A
.eh_frame:0000000000017E95                 db  0Eh
.eh_frame:0000000000017E96                 db  20h
.eh_frame:0000000000017E97                 db  42h ; B
.eh_frame:0000000000017E98                 db  0Eh
.eh_frame:0000000000017E99                 db  18h
.eh_frame:0000000000017E9A                 db  42h ; B
.eh_frame:0000000000017E9B                 db  0Eh
.eh_frame:0000000000017E9C                 db  10h
.eh_frame:0000000000017E9D                 db  42h ; B
.eh_frame:0000000000017E9E                 db  0Eh
.eh_frame:0000000000017E9F                 db    8
.eh_frame:0000000000017EA0                 db  41h ; A
.eh_frame:0000000000017EA1                 db  0Bh
.eh_frame:0000000000017EA2                 db    0
.eh_frame:0000000000017EA3                 db    0
.eh_frame:0000000000017EA4                 db    0
.eh_frame:0000000000017EA5                 db    0
.eh_frame:0000000000017EA6                 db    0
.eh_frame:0000000000017EA7                 db    0
.eh_frame:0000000000017EA8                 db  44h ; D
.eh_frame:0000000000017EA9                 db    0
.eh_frame:0000000000017EAA                 db    0
.eh_frame:0000000000017EAB                 db    0
.eh_frame:0000000000017EAC                 db  9Ch
.eh_frame:0000000000017EAD                 db    5
.eh_frame:0000000000017EAE                 db    0
.eh_frame:0000000000017EAF                 db    0
.eh_frame:0000000000017EB0                 db 0A0h
.eh_frame:0000000000017EB1                 db 0C6h
.eh_frame:0000000000017EB2                 db 0FEh
.eh_frame:0000000000017EB3                 db 0FFh
.eh_frame:0000000000017EB4                 db  2Ch ; ,
.eh_frame:0000000000017EB5                 db    2
.eh_frame:0000000000017EB6                 db    0
.eh_frame:0000000000017EB7                 db    0
.eh_frame:0000000000017EB8                 db    0
.eh_frame:0000000000017EB9                 db  42h ; B
.eh_frame:0000000000017EBA                 db  0Eh
.eh_frame:0000000000017EBB                 db  10h
.eh_frame:0000000000017EBC                 db  8Eh
.eh_frame:0000000000017EBD                 db    2
.eh_frame:0000000000017EBE                 db  42h ; B
.eh_frame:0000000000017EBF                 db  0Eh
.eh_frame:0000000000017EC0                 db  18h
.eh_frame:0000000000017EC1                 db  8Dh
.eh_frame:0000000000017EC2                 db    3
.eh_frame:0000000000017EC3                 db  42h ; B
.eh_frame:0000000000017EC4                 db  0Eh
.eh_frame:0000000000017EC5                 db  20h
.eh_frame:0000000000017EC6                 db  8Ch
.eh_frame:0000000000017EC7                 db    4
.eh_frame:0000000000017EC8                 db  41h ; A
.eh_frame:0000000000017EC9                 db  0Eh
.eh_frame:0000000000017ECA                 db  28h ; (
.eh_frame:0000000000017ECB                 db  86h
.eh_frame:0000000000017ECC                 db    5
.eh_frame:0000000000017ECD                 db  41h ; A
.eh_frame:0000000000017ECE                 db  0Eh
.eh_frame:0000000000017ECF                 db  30h ; 0
.eh_frame:0000000000017ED0                 db  83h
.eh_frame:0000000000017ED1                 db    6
.eh_frame:0000000000017ED2                 db  47h ; G
.eh_frame:0000000000017ED3                 db  0Eh
.eh_frame:0000000000017ED4                 db  80h
.eh_frame:0000000000017ED5                 db    1
.eh_frame:0000000000017ED6                 db    2
.eh_frame:0000000000017ED7                 db  41h ; A
.eh_frame:0000000000017ED8                 db  0Ah
.eh_frame:0000000000017ED9                 db  0Eh
.eh_frame:0000000000017EDA                 db  30h ; 0
.eh_frame:0000000000017EDB                 db  41h ; A
.eh_frame:0000000000017EDC                 db  0Eh
.eh_frame:0000000000017EDD                 db  28h ; (
.eh_frame:0000000000017EDE                 db  41h ; A
.eh_frame:0000000000017EDF                 db  0Eh
.eh_frame:0000000000017EE0                 db  20h
.eh_frame:0000000000017EE1                 db  42h ; B
.eh_frame:0000000000017EE2                 db  0Eh
.eh_frame:0000000000017EE3                 db  18h
.eh_frame:0000000000017EE4                 db  42h ; B
.eh_frame:0000000000017EE5                 db  0Eh
.eh_frame:0000000000017EE6                 db  10h
.eh_frame:0000000000017EE7                 db  42h ; B
.eh_frame:0000000000017EE8                 db  0Eh
.eh_frame:0000000000017EE9                 db    8
.eh_frame:0000000000017EEA                 db  48h ; H
.eh_frame:0000000000017EEB                 db  0Bh
.eh_frame:0000000000017EEC                 db    0
.eh_frame:0000000000017EED                 db    0
.eh_frame:0000000000017EEE                 db    0
.eh_frame:0000000000017EEF                 db    0
.eh_frame:0000000000017EF0                 db  1Ch
.eh_frame:0000000000017EF1                 db    0
.eh_frame:0000000000017EF2                 db    0
.eh_frame:0000000000017EF3                 db    0
.eh_frame:0000000000017EF4                 db 0E4h
.eh_frame:0000000000017EF5                 db    5
.eh_frame:0000000000017EF6                 db    0
.eh_frame:0000000000017EF7                 db    0
.eh_frame:0000000000017EF8                 db  88h
.eh_frame:0000000000017EF9                 db 0C8h
.eh_frame:0000000000017EFA                 db 0FEh
.eh_frame:0000000000017EFB                 db 0FFh
.eh_frame:0000000000017EFC                 db  9Fh
.eh_frame:0000000000017EFD                 db    0
.eh_frame:0000000000017EFE                 db    0
.eh_frame:0000000000017EFF                 db    0
.eh_frame:0000000000017F00                 db    0
.eh_frame:0000000000017F01                 db  44h ; D
.eh_frame:0000000000017F02                 db  0Eh
.eh_frame:0000000000017F03                 db  10h
.eh_frame:0000000000017F04                 db  83h
.eh_frame:0000000000017F05                 db    2
.eh_frame:0000000000017F06                 db    2
.eh_frame:0000000000017F07                 db  78h ; x
.eh_frame:0000000000017F08                 db  0Ah
.eh_frame:0000000000017F09                 db  0Eh
.eh_frame:0000000000017F0A                 db    8
.eh_frame:0000000000017F0B                 db  41h ; A
.eh_frame:0000000000017F0C                 db  0Bh
.eh_frame:0000000000017F0D                 db    0
.eh_frame:0000000000017F0E                 db    0
.eh_frame:0000000000017F0F                 db    0
.eh_frame:0000000000017F10                 db  40h ; @
.eh_frame:0000000000017F11                 db    0
.eh_frame:0000000000017F12                 db    0
.eh_frame:0000000000017F13                 db    0
.eh_frame:0000000000017F14                 db    4
.eh_frame:0000000000017F15                 db    6
.eh_frame:0000000000017F16                 db    0
.eh_frame:0000000000017F17                 db    0
.eh_frame:0000000000017F18                 db    8
.eh_frame:0000000000017F19                 db 0C9h
.eh_frame:0000000000017F1A                 db 0FEh
.eh_frame:0000000000017F1B                 db 0FFh
.eh_frame:0000000000017F1C                 db 0E7h
.eh_frame:0000000000017F1D                 db    0
.eh_frame:0000000000017F1E                 db    0
.eh_frame:0000000000017F1F                 db    0
.eh_frame:0000000000017F20                 db    0
.eh_frame:0000000000017F21                 db  41h ; A
.eh_frame:0000000000017F22                 db  0Eh
.eh_frame:0000000000017F23                 db  10h
.eh_frame:0000000000017F24                 db  86h
.eh_frame:0000000000017F25                 db    2
.eh_frame:0000000000017F26                 db  41h ; A
.eh_frame:0000000000017F27                 db  0Eh
.eh_frame:0000000000017F28                 db  18h
.eh_frame:0000000000017F29                 db  83h
.eh_frame:0000000000017F2A                 db    3
.eh_frame:0000000000017F2B                 db  49h ; I
.eh_frame:0000000000017F2C                 db  0Eh
.eh_frame:0000000000017F2D                 db  20h
.eh_frame:0000000000017F2E                 db  6Eh ; n
.eh_frame:0000000000017F2F                 db  0Ah
.eh_frame:0000000000017F30                 db  0Eh
.eh_frame:0000000000017F31                 db  18h
.eh_frame:0000000000017F32                 db  41h ; A
.eh_frame:0000000000017F33                 db  0Eh
.eh_frame:0000000000017F34                 db  10h
.eh_frame:0000000000017F35                 db  41h ; A
.eh_frame:0000000000017F36                 db  0Eh
.eh_frame:0000000000017F37                 db    8
.eh_frame:0000000000017F38                 db  45h ; E
.eh_frame:0000000000017F39                 db  0Bh
.eh_frame:0000000000017F3A                 db    2
.eh_frame:0000000000017F3B                 db  4Ah ; J
.eh_frame:0000000000017F3C                 db  0Ah
.eh_frame:0000000000017F3D                 db  0Eh
.eh_frame:0000000000017F3E                 db  18h
.eh_frame:0000000000017F3F                 db  41h ; A
.eh_frame:0000000000017F40                 db  0Eh
.eh_frame:0000000000017F41                 db  10h
.eh_frame:0000000000017F42                 db  41h ; A
.eh_frame:0000000000017F43                 db  0Eh
.eh_frame:0000000000017F44                 db    8
.eh_frame:0000000000017F45                 db  44h ; D
.eh_frame:0000000000017F46                 db  0Bh
.eh_frame:0000000000017F47                 db    2
.eh_frame:0000000000017F48                 db  54h ; T
.eh_frame:0000000000017F49                 db  0Eh
.eh_frame:0000000000017F4A                 db  18h
.eh_frame:0000000000017F4B                 db  41h ; A
.eh_frame:0000000000017F4C                 db  0Eh
.eh_frame:0000000000017F4D                 db  10h
.eh_frame:0000000000017F4E                 db  41h ; A
.eh_frame:0000000000017F4F                 db  0Eh
.eh_frame:0000000000017F50                 db    8
.eh_frame:0000000000017F51                 db    0
.eh_frame:0000000000017F52                 db    0
.eh_frame:0000000000017F53                 db    0
.eh_frame:0000000000017F54                 db  74h ; t
.eh_frame:0000000000017F55                 db    0
.eh_frame:0000000000017F56                 db    0
.eh_frame:0000000000017F57                 db    0
.eh_frame:0000000000017F58                 db  48h ; H
.eh_frame:0000000000017F59                 db    6
.eh_frame:0000000000017F5A                 db    0
.eh_frame:0000000000017F5B                 db    0
.eh_frame:0000000000017F5C                 db 0B4h
.eh_frame:0000000000017F5D                 db 0C9h
.eh_frame:0000000000017F5E                 db 0FEh
.eh_frame:0000000000017F5F                 db 0FFh
.eh_frame:0000000000017F60                 db  34h ; 4
.eh_frame:0000000000017F61                 db  12h
.eh_frame:0000000000017F62                 db    0
.eh_frame:0000000000017F63                 db    0
.eh_frame:0000000000017F64                 db    0
.eh_frame:0000000000017F65                 db  42h ; B
.eh_frame:0000000000017F66                 db  0Eh
.eh_frame:0000000000017F67                 db  10h
.eh_frame:0000000000017F68                 db  8Fh
.eh_frame:0000000000017F69                 db    2
.eh_frame:0000000000017F6A                 db  42h ; B
.eh_frame:0000000000017F6B                 db  0Eh
.eh_frame:0000000000017F6C                 db  18h
.eh_frame:0000000000017F6D                 db  8Eh
.eh_frame:0000000000017F6E                 db    3
.eh_frame:0000000000017F6F                 db  45h ; E
.eh_frame:0000000000017F70                 db  0Eh
.eh_frame:0000000000017F71                 db  20h
.eh_frame:0000000000017F72                 db  8Dh
.eh_frame:0000000000017F73                 db    4
.eh_frame:0000000000017F74                 db  42h ; B
.eh_frame:0000000000017F75                 db  0Eh
.eh_frame:0000000000017F76                 db  28h ; (
.eh_frame:0000000000017F77                 db  8Ch
.eh_frame:0000000000017F78                 db    5
.eh_frame:0000000000017F79                 db  44h ; D
.eh_frame:0000000000017F7A                 db  0Eh
.eh_frame:0000000000017F7B                 db  30h ; 0
.eh_frame:0000000000017F7C                 db  86h
.eh_frame:0000000000017F7D                 db    6
.eh_frame:0000000000017F7E                 db  41h ; A
.eh_frame:0000000000017F7F                 db  0Eh
.eh_frame:0000000000017F80                 db  38h ; 8
.eh_frame:0000000000017F81                 db  83h
.eh_frame:0000000000017F82                 db    7
.eh_frame:0000000000017F83                 db  53h ; S
.eh_frame:0000000000017F84                 db  0Eh
.eh_frame:0000000000017F85                 db 0F0h
.eh_frame:0000000000017F86                 db    1
.eh_frame:0000000000017F87                 db    3
.eh_frame:0000000000017F88                 db  81h
.eh_frame:0000000000017F89                 db  0Bh
.eh_frame:0000000000017F8A                 db  0Eh
.eh_frame:0000000000017F8B                 db 0F8h
.eh_frame:0000000000017F8C                 db    1
.eh_frame:0000000000017F8D                 db  4Ah ; J
.eh_frame:0000000000017F8E                 db  0Eh
.eh_frame:0000000000017F8F                 db  80h
.eh_frame:0000000000017F90                 db    2
.eh_frame:0000000000017F91                 db  44h ; D
.eh_frame:0000000000017F92                 db  0Eh
.eh_frame:0000000000017F93                 db  88h
.eh_frame:0000000000017F94                 db    2
.eh_frame:0000000000017F95                 db  45h ; E
.eh_frame:0000000000017F96                 db  0Eh
.eh_frame:0000000000017F97                 db  90h
.eh_frame:0000000000017F98                 db    2
.eh_frame:0000000000017F99                 db  5Fh ; _
.eh_frame:0000000000017F9A                 db  0Eh
.eh_frame:0000000000017F9B                 db 0F0h
.eh_frame:0000000000017F9C                 db    1
.eh_frame:0000000000017F9D                 db  64h ; d
.eh_frame:0000000000017F9E                 db  0Ah
.eh_frame:0000000000017F9F                 db  0Eh
.eh_frame:0000000000017FA0                 db  38h ; 8
.eh_frame:0000000000017FA1                 db  41h ; A
.eh_frame:0000000000017FA2                 db  0Eh
.eh_frame:0000000000017FA3                 db  30h ; 0
.eh_frame:0000000000017FA4                 db  41h ; A
.eh_frame:0000000000017FA5                 db  0Eh
.eh_frame:0000000000017FA6                 db  28h ; (
.eh_frame:0000000000017FA7                 db  42h ; B
.eh_frame:0000000000017FA8                 db  0Eh
.eh_frame:0000000000017FA9                 db  20h
.eh_frame:0000000000017FAA                 db  42h ; B
.eh_frame:0000000000017FAB                 db  0Eh
.eh_frame:0000000000017FAC                 db  18h
.eh_frame:0000000000017FAD                 db  42h ; B
.eh_frame:0000000000017FAE                 db  0Eh
.eh_frame:0000000000017FAF                 db  10h
.eh_frame:0000000000017FB0                 db  42h ; B
.eh_frame:0000000000017FB1                 db  0Eh
.eh_frame:0000000000017FB2                 db    8
.eh_frame:0000000000017FB3                 db  44h ; D
.eh_frame:0000000000017FB4                 db  0Bh
.eh_frame:0000000000017FB5                 db    3
.eh_frame:0000000000017FB6                 db  99h
.eh_frame:0000000000017FB7                 db    5
.eh_frame:0000000000017FB8                 db  0Eh
.eh_frame:0000000000017FB9                 db 0F8h
.eh_frame:0000000000017FBA                 db    1
.eh_frame:0000000000017FBB                 db  4Dh ; M
.eh_frame:0000000000017FBC                 db  0Eh
.eh_frame:0000000000017FBD                 db  80h
.eh_frame:0000000000017FBE                 db    2
.eh_frame:0000000000017FBF                 db  44h ; D
.eh_frame:0000000000017FC0                 db  0Eh
.eh_frame:0000000000017FC1                 db  88h
.eh_frame:0000000000017FC2                 db    2
.eh_frame:0000000000017FC3                 db  47h ; G
.eh_frame:0000000000017FC4                 db  0Eh
.eh_frame:0000000000017FC5                 db  90h
.eh_frame:0000000000017FC6                 db    2
.eh_frame:0000000000017FC7                 db  5Bh ; [
.eh_frame:0000000000017FC8                 db  0Eh
.eh_frame:0000000000017FC9                 db 0F0h
.eh_frame:0000000000017FCA                 db    1
.eh_frame:0000000000017FCB                 db    0
.eh_frame:0000000000017FCC                 db  68h ; h
.eh_frame:0000000000017FCD                 db    0
.eh_frame:0000000000017FCE                 db    0
.eh_frame:0000000000017FCF                 db    0
.eh_frame:0000000000017FD0                 db 0C0h
.eh_frame:0000000000017FD1                 db    6
.eh_frame:0000000000017FD2                 db    0
.eh_frame:0000000000017FD3                 db    0
.eh_frame:0000000000017FD4                 db  7Ch ; |
.eh_frame:0000000000017FD5                 db 0DBh
.eh_frame:0000000000017FD6                 db 0FEh
.eh_frame:0000000000017FD7                 db 0FFh
.eh_frame:0000000000017FD8                 db 0ABh
.eh_frame:0000000000017FD9                 db    1
.eh_frame:0000000000017FDA                 db    0
.eh_frame:0000000000017FDB                 db    0
.eh_frame:0000000000017FDC                 db    0
.eh_frame:0000000000017FDD                 db  42h ; B
.eh_frame:0000000000017FDE                 db  0Eh
.eh_frame:0000000000017FDF                 db  10h
.eh_frame:0000000000017FE0                 db  8Fh
.eh_frame:0000000000017FE1                 db    2
.eh_frame:0000000000017FE2                 db  42h ; B
.eh_frame:0000000000017FE3                 db  0Eh
.eh_frame:0000000000017FE4                 db  18h
.eh_frame:0000000000017FE5                 db  8Eh
.eh_frame:0000000000017FE6                 db    3
.eh_frame:0000000000017FE7                 db  45h ; E
.eh_frame:0000000000017FE8                 db  0Eh
.eh_frame:0000000000017FE9                 db  20h
.eh_frame:0000000000017FEA                 db  8Dh
.eh_frame:0000000000017FEB                 db    4
.eh_frame:0000000000017FEC                 db  42h ; B
.eh_frame:0000000000017FED                 db  0Eh
.eh_frame:0000000000017FEE                 db  28h ; (
.eh_frame:0000000000017FEF                 db  8Ch
.eh_frame:0000000000017FF0                 db    5
.eh_frame:0000000000017FF1                 db  44h ; D
.eh_frame:0000000000017FF2                 db  0Eh
.eh_frame:0000000000017FF3                 db  30h ; 0
.eh_frame:0000000000017FF4                 db  86h
.eh_frame:0000000000017FF5                 db    6
.eh_frame:0000000000017FF6                 db  41h ; A
.eh_frame:0000000000017FF7                 db  0Eh
.eh_frame:0000000000017FF8                 db  38h ; 8
.eh_frame:0000000000017FF9                 db  83h
.eh_frame:0000000000017FFA                 db    7
.eh_frame:0000000000017FFB                 db  47h ; G
.eh_frame:0000000000017FFC                 db  0Eh
.eh_frame:0000000000017FFD                 db  60h ; `
.eh_frame:0000000000017FFE                 db    2
.eh_frame:0000000000017FFF                 db  99h
.eh_frame:0000000000018000                 db  0Eh
.eh_frame:0000000000018001                 db  68h ; h
.eh_frame:0000000000018002                 db  5Fh ; _
.eh_frame:0000000000018003                 db  0Eh
.eh_frame:0000000000018004                 db  70h ; p
.eh_frame:0000000000018005                 db  46h ; F
.eh_frame:0000000000018006                 db  0Eh
.eh_frame:0000000000018007                 db  78h ; x
.eh_frame:0000000000018008                 db  42h ; B
.eh_frame:0000000000018009                 db  0Eh
.eh_frame:000000000001800A                 db  80h
.eh_frame:000000000001800B                 db    1
.eh_frame:000000000001800C                 db  59h ; Y
.eh_frame:000000000001800D                 db  0Eh
.eh_frame:000000000001800E                 db  60h ; `
.eh_frame:000000000001800F                 db    2
.eh_frame:0000000000018010                 db  40h ; @
.eh_frame:0000000000018011                 db  0Eh
.eh_frame:0000000000018012                 db  68h ; h
.eh_frame:0000000000018013                 db  4Bh ; K
.eh_frame:0000000000018014                 db  0Eh
.eh_frame:0000000000018015                 db  70h ; p
.eh_frame:0000000000018016                 db  43h ; C
.eh_frame:0000000000018017                 db  0Eh
.eh_frame:0000000000018018                 db  78h ; x
.eh_frame:0000000000018019                 db  45h ; E
.eh_frame:000000000001801A                 db  0Eh
.eh_frame:000000000001801B                 db  80h
.eh_frame:000000000001801C                 db    1
.eh_frame:000000000001801D                 db  5Eh ; ^
.eh_frame:000000000001801E                 db  0Eh
.eh_frame:000000000001801F                 db  60h ; `
.eh_frame:0000000000018020                 db  4Ch ; L
.eh_frame:0000000000018021                 db  0Ah
.eh_frame:0000000000018022                 db  0Eh
.eh_frame:0000000000018023                 db  38h ; 8
.eh_frame:0000000000018024                 db  44h ; D
.eh_frame:0000000000018025                 db  0Eh
.eh_frame:0000000000018026                 db  30h ; 0
.eh_frame:0000000000018027                 db  41h ; A
.eh_frame:0000000000018028                 db  0Eh
.eh_frame:0000000000018029                 db  28h ; (
.eh_frame:000000000001802A                 db  42h ; B
.eh_frame:000000000001802B                 db  0Eh
.eh_frame:000000000001802C                 db  20h
.eh_frame:000000000001802D                 db  42h ; B
.eh_frame:000000000001802E                 db  0Eh
.eh_frame:000000000001802F                 db  18h
.eh_frame:0000000000018030                 db  42h ; B
.eh_frame:0000000000018031                 db  0Eh
.eh_frame:0000000000018032                 db  10h
.eh_frame:0000000000018033                 db  42h ; B
.eh_frame:0000000000018034                 db  0Eh
.eh_frame:0000000000018035                 db    8
.eh_frame:0000000000018036                 db  46h ; F
.eh_frame:0000000000018037                 db  0Bh
.eh_frame:0000000000018038                 db  28h ; (
.eh_frame:0000000000018039                 db    0
.eh_frame:000000000001803A                 db    0
.eh_frame:000000000001803B                 db    0
.eh_frame:000000000001803C                 db  2Ch ; ,
.eh_frame:000000000001803D                 db    7
.eh_frame:000000000001803E                 db    0
.eh_frame:000000000001803F                 db    0
.eh_frame:0000000000018040                 db 0C0h
.eh_frame:0000000000018041                 db 0DCh
.eh_frame:0000000000018042                 db 0FEh
.eh_frame:0000000000018043                 db 0FFh
.eh_frame:0000000000018044                 db  36h ; 6
.eh_frame:0000000000018045                 db    0
.eh_frame:0000000000018046                 db    0
.eh_frame:0000000000018047                 db    0
.eh_frame:0000000000018048                 db    0
.eh_frame:0000000000018049                 db  42h ; B
.eh_frame:000000000001804A                 db  0Eh
.eh_frame:000000000001804B                 db  10h
.eh_frame:000000000001804C                 db  8Ch
.eh_frame:000000000001804D                 db    2
.eh_frame:000000000001804E                 db  41h ; A
.eh_frame:000000000001804F                 db  0Eh
.eh_frame:0000000000018050                 db  18h
.eh_frame:0000000000018051                 db  86h
.eh_frame:0000000000018052                 db    3
.eh_frame:0000000000018053                 db  41h ; A
.eh_frame:0000000000018054                 db  0Eh
.eh_frame:0000000000018055                 db  20h
.eh_frame:0000000000018056                 db  83h
.eh_frame:0000000000018057                 db    4
.eh_frame:0000000000018058                 db  6Eh ; n
.eh_frame:0000000000018059                 db  0Eh
.eh_frame:000000000001805A                 db  18h
.eh_frame:000000000001805B                 db  41h ; A
.eh_frame:000000000001805C                 db  0Eh
.eh_frame:000000000001805D                 db  10h
.eh_frame:000000000001805E                 db  42h ; B
.eh_frame:000000000001805F                 db  0Eh
.eh_frame:0000000000018060                 db    8
.eh_frame:0000000000018061                 db    0
.eh_frame:0000000000018062                 db    0
.eh_frame:0000000000018063                 db    0
.eh_frame:0000000000018064                 db  10h
.eh_frame:0000000000018065                 db    0
.eh_frame:0000000000018066                 db    0
.eh_frame:0000000000018067                 db    0
.eh_frame:0000000000018068                 db  58h ; X
.eh_frame:0000000000018069                 db    7
.eh_frame:000000000001806A                 db    0
.eh_frame:000000000001806B                 db    0
.eh_frame:000000000001806C                 db 0D4h
.eh_frame:000000000001806D                 db 0DCh
.eh_frame:000000000001806E                 db 0FEh
.eh_frame:000000000001806F                 db 0FFh
.eh_frame:0000000000018070                 db  11h
.eh_frame:0000000000018071                 db    0
.eh_frame:0000000000018072                 db    0
.eh_frame:0000000000018073                 db    0
.eh_frame:0000000000018074                 db    0
.eh_frame:0000000000018075                 db    0
.eh_frame:0000000000018076                 db    0
.eh_frame:0000000000018077                 db    0
.eh_frame:0000000000018078                 db  10h
.eh_frame:0000000000018079                 db    0
.eh_frame:000000000001807A                 db    0
.eh_frame:000000000001807B                 db    0
.eh_frame:000000000001807C                 db  6Ch ; l
.eh_frame:000000000001807D                 db    7
.eh_frame:000000000001807E                 db    0
.eh_frame:000000000001807F                 db    0
.eh_frame:0000000000018080                 db 0E0h
.eh_frame:0000000000018081                 db 0DCh
.eh_frame:0000000000018082                 db 0FEh
.eh_frame:0000000000018083                 db 0FFh
.eh_frame:0000000000018084                 db  11h
.eh_frame:0000000000018085                 db    0
.eh_frame:0000000000018086                 db    0
.eh_frame:0000000000018087                 db    0
.eh_frame:0000000000018088                 db    0
.eh_frame:0000000000018089                 db    0
.eh_frame:000000000001808A                 db    0
.eh_frame:000000000001808B                 db    0
.eh_frame:000000000001808C                 db  10h
.eh_frame:000000000001808D                 db    0
.eh_frame:000000000001808E                 db    0
.eh_frame:000000000001808F                 db    0
.eh_frame:0000000000018090                 db  80h
.eh_frame:0000000000018091                 db    7
.eh_frame:0000000000018092                 db    0
.eh_frame:0000000000018093                 db    0
.eh_frame:0000000000018094                 db 0ECh
.eh_frame:0000000000018095                 db 0DCh
.eh_frame:0000000000018096                 db 0FEh
.eh_frame:0000000000018097                 db 0FFh
.eh_frame:0000000000018098                 db  35h ; 5
.eh_frame:0000000000018099                 db    0
.eh_frame:000000000001809A                 db    0
.eh_frame:000000000001809B                 db    0
.eh_frame:000000000001809C                 db    0
.eh_frame:000000000001809D                 db    0
.eh_frame:000000000001809E                 db    0
.eh_frame:000000000001809F                 db    0
.eh_frame:00000000000180A0                 db  10h
.eh_frame:00000000000180A1                 db    0
.eh_frame:00000000000180A2                 db    0
.eh_frame:00000000000180A3                 db    0
.eh_frame:00000000000180A4                 db  94h
.eh_frame:00000000000180A5                 db    7
.eh_frame:00000000000180A6                 db    0
.eh_frame:00000000000180A7                 db    0
.eh_frame:00000000000180A8                 db  18h
.eh_frame:00000000000180A9                 db 0DDh
.eh_frame:00000000000180AA                 db 0FEh
.eh_frame:00000000000180AB                 db 0FFh
.eh_frame:00000000000180AC                 db  15h
.eh_frame:00000000000180AD                 db    0
.eh_frame:00000000000180AE                 db    0
.eh_frame:00000000000180AF                 db    0
.eh_frame:00000000000180B0                 db    0
.eh_frame:00000000000180B1                 db    0
.eh_frame:00000000000180B2                 db    0
.eh_frame:00000000000180B3                 db    0
.eh_frame:00000000000180B4                 db  10h
.eh_frame:00000000000180B5                 db    0
.eh_frame:00000000000180B6                 db    0
.eh_frame:00000000000180B7                 db    0
.eh_frame:00000000000180B8                 db 0A8h
.eh_frame:00000000000180B9                 db    7
.eh_frame:00000000000180BA                 db    0
.eh_frame:00000000000180BB                 db    0
.eh_frame:00000000000180BC                 db  24h ; $
.eh_frame:00000000000180BD                 db 0DDh
.eh_frame:00000000000180BE                 db 0FEh
.eh_frame:00000000000180BF                 db 0FFh
.eh_frame:00000000000180C0                 db  30h ; 0
.eh_frame:00000000000180C1                 db    0
.eh_frame:00000000000180C2                 db    0
.eh_frame:00000000000180C3                 db    0
.eh_frame:00000000000180C4                 db    0
.eh_frame:00000000000180C5                 db  6Bh ; k
.eh_frame:00000000000180C6                 db  0Eh
.eh_frame:00000000000180C7                 db  10h
.eh_frame:00000000000180C8                 db  50h ; P
.eh_frame:00000000000180C9                 db    0
.eh_frame:00000000000180CA                 db    0
.eh_frame:00000000000180CB                 db    0
.eh_frame:00000000000180CC                 db 0BCh
.eh_frame:00000000000180CD                 db    7
.eh_frame:00000000000180CE                 db    0
.eh_frame:00000000000180CF                 db    0
.eh_frame:00000000000180D0                 db  40h ; @
.eh_frame:00000000000180D1                 db 0DDh
.eh_frame:00000000000180D2                 db 0FEh
.eh_frame:00000000000180D3                 db 0FFh
.eh_frame:00000000000180D4                 db  74h ; t
.eh_frame:00000000000180D5                 db    0
.eh_frame:00000000000180D6                 db    0
.eh_frame:00000000000180D7                 db    0
.eh_frame:00000000000180D8                 db    0
.eh_frame:00000000000180D9                 db  42h ; B
.eh_frame:00000000000180DA                 db  0Eh
.eh_frame:00000000000180DB                 db  10h
.eh_frame:00000000000180DC                 db  8Fh
.eh_frame:00000000000180DD                 db    2
.eh_frame:00000000000180DE                 db  42h ; B
.eh_frame:00000000000180DF                 db  0Eh
.eh_frame:00000000000180E0                 db  18h
.eh_frame:00000000000180E1                 db  8Eh
.eh_frame:00000000000180E2                 db    3
.eh_frame:00000000000180E3                 db  49h ; I
.eh_frame:00000000000180E4                 db  0Eh
.eh_frame:00000000000180E5                 db  20h
.eh_frame:00000000000180E6                 db  8Dh
.eh_frame:00000000000180E7                 db    4
.eh_frame:00000000000180E8                 db  42h ; B
.eh_frame:00000000000180E9                 db  0Eh
.eh_frame:00000000000180EA                 db  28h ; (
.eh_frame:00000000000180EB                 db  8Ch
.eh_frame:00000000000180EC                 db    5
.eh_frame:00000000000180ED                 db  44h ; D
.eh_frame:00000000000180EE                 db  0Eh
.eh_frame:00000000000180EF                 db  30h ; 0
.eh_frame:00000000000180F0                 db  86h
.eh_frame:00000000000180F1                 db    6
.eh_frame:00000000000180F2                 db  41h ; A
.eh_frame:00000000000180F3                 db  0Eh
.eh_frame:00000000000180F4                 db  38h ; 8
.eh_frame:00000000000180F5                 db  83h
.eh_frame:00000000000180F6                 db    7
.eh_frame:00000000000180F7                 db  4Dh ; M
.eh_frame:00000000000180F8                 db  0Eh
.eh_frame:00000000000180F9                 db  50h ; P
.eh_frame:00000000000180FA                 db  5Fh ; _
.eh_frame:00000000000180FB                 db  0Eh
.eh_frame:00000000000180FC                 db  58h ; X
.eh_frame:00000000000180FD                 db  47h ; G
.eh_frame:00000000000180FE                 db  0Eh
.eh_frame:00000000000180FF                 db  60h ; `
.eh_frame:0000000000018100                 db  46h ; F
.eh_frame:0000000000018101                 db  0Eh
.eh_frame:0000000000018102                 db  68h ; h
.eh_frame:0000000000018103                 db  44h ; D
.eh_frame:0000000000018104                 db  0Eh
.eh_frame:0000000000018105                 db  70h ; p
.eh_frame:0000000000018106                 db  58h ; X
.eh_frame:0000000000018107                 db  0Eh
.eh_frame:0000000000018108                 db  38h ; 8
.eh_frame:0000000000018109                 db  41h ; A
.eh_frame:000000000001810A                 db  0Eh
.eh_frame:000000000001810B                 db  30h ; 0
.eh_frame:000000000001810C                 db  41h ; A
.eh_frame:000000000001810D                 db  0Eh
.eh_frame:000000000001810E                 db  28h ; (
.eh_frame:000000000001810F                 db  42h ; B
.eh_frame:0000000000018110                 db  0Eh
.eh_frame:0000000000018111                 db  20h
.eh_frame:0000000000018112                 db  42h ; B
.eh_frame:0000000000018113                 db  0Eh
.eh_frame:0000000000018114                 db  18h
.eh_frame:0000000000018115                 db  42h ; B
.eh_frame:0000000000018116                 db  0Eh
.eh_frame:0000000000018117                 db  10h
.eh_frame:0000000000018118                 db  42h ; B
.eh_frame:0000000000018119                 db  0Eh
.eh_frame:000000000001811A                 db    8
.eh_frame:000000000001811B                 db    0
.eh_frame:000000000001811C                 db  68h ; h
.eh_frame:000000000001811D                 db    0
.eh_frame:000000000001811E                 db    0
.eh_frame:000000000001811F                 db    0
.eh_frame:0000000000018120                 db  10h
.eh_frame:0000000000018121                 db    8
.eh_frame:0000000000018122                 db    0
.eh_frame:0000000000018123                 db    0
.eh_frame:0000000000018124                 db  6Ch ; l
.eh_frame:0000000000018125                 db 0DDh
.eh_frame:0000000000018126                 db 0FEh
.eh_frame:0000000000018127                 db 0FFh
.eh_frame:0000000000018128                 db 0E3h
.eh_frame:0000000000018129                 db    0
.eh_frame:000000000001812A                 db    0
.eh_frame:000000000001812B                 db    0
.eh_frame:000000000001812C                 db    0
.eh_frame:000000000001812D                 db  42h ; B
.eh_frame:000000000001812E                 db  0Eh
.eh_frame:000000000001812F                 db  10h
.eh_frame:0000000000018130                 db  8Fh
.eh_frame:0000000000018131                 db    2
.eh_frame:0000000000018132                 db  42h ; B
.eh_frame:0000000000018133                 db  0Eh
.eh_frame:0000000000018134                 db  18h
.eh_frame:0000000000018135                 db  8Eh
.eh_frame:0000000000018136                 db    3
.eh_frame:0000000000018137                 db  49h ; I
.eh_frame:0000000000018138                 db  0Eh
.eh_frame:0000000000018139                 db  20h
.eh_frame:000000000001813A                 db  8Dh
.eh_frame:000000000001813B                 db    4
.eh_frame:000000000001813C                 db  42h ; B
.eh_frame:000000000001813D                 db  0Eh
.eh_frame:000000000001813E                 db  28h ; (
.eh_frame:000000000001813F                 db  8Ch
.eh_frame:0000000000018140                 db    5
.eh_frame:0000000000018141                 db  44h ; D
.eh_frame:0000000000018142                 db  0Eh
.eh_frame:0000000000018143                 db  30h ; 0
.eh_frame:0000000000018144                 db  86h
.eh_frame:0000000000018145                 db    6
.eh_frame:0000000000018146                 db  41h ; A
.eh_frame:0000000000018147                 db  0Eh
.eh_frame:0000000000018148                 db  38h ; 8
.eh_frame:0000000000018149                 db  83h
.eh_frame:000000000001814A                 db    7
.eh_frame:000000000001814B                 db  4Dh ; M
.eh_frame:000000000001814C                 db  0Eh
.eh_frame:000000000001814D                 db  70h ; p
.eh_frame:000000000001814E                 db  65h ; e
.eh_frame:000000000001814F                 db  0Eh
.eh_frame:0000000000018150                 db  78h ; x
.eh_frame:0000000000018151                 db  4Dh ; M
.eh_frame:0000000000018152                 db  0Eh
.eh_frame:0000000000018153                 db  80h
.eh_frame:0000000000018154                 db    1
.eh_frame:0000000000018155                 db  46h ; F
.eh_frame:0000000000018156                 db  0Eh
.eh_frame:0000000000018157                 db  88h
.eh_frame:0000000000018158                 db    1
.eh_frame:0000000000018159                 db  42h ; B
.eh_frame:000000000001815A                 db  0Eh
.eh_frame:000000000001815B                 db  90h
.eh_frame:000000000001815C                 db    1
.eh_frame:000000000001815D                 db  5Eh ; ^
.eh_frame:000000000001815E                 db  0Eh
.eh_frame:000000000001815F                 db  70h ; p
.eh_frame:0000000000018160                 db  56h ; V
.eh_frame:0000000000018161                 db  0Eh
.eh_frame:0000000000018162                 db  78h ; x
.eh_frame:0000000000018163                 db  43h ; C
.eh_frame:0000000000018164                 db  0Eh
.eh_frame:0000000000018165                 db  80h
.eh_frame:0000000000018166                 db    1
.eh_frame:0000000000018167                 db  43h ; C
.eh_frame:0000000000018168                 db  0Eh
.eh_frame:0000000000018169                 db  88h
.eh_frame:000000000001816A                 db    1
.eh_frame:000000000001816B                 db  56h ; V
.eh_frame:000000000001816C                 db  0Eh
.eh_frame:000000000001816D                 db  90h
.eh_frame:000000000001816E                 db    1
.eh_frame:000000000001816F                 db  52h ; R
.eh_frame:0000000000018170                 db  0Eh
.eh_frame:0000000000018171                 db  70h ; p
.eh_frame:0000000000018172                 db  5Bh ; [
.eh_frame:0000000000018173                 db  0Eh
.eh_frame:0000000000018174                 db  38h ; 8
.eh_frame:0000000000018175                 db  41h ; A
.eh_frame:0000000000018176                 db  0Eh
.eh_frame:0000000000018177                 db  30h ; 0
.eh_frame:0000000000018178                 db  41h ; A
.eh_frame:0000000000018179                 db  0Eh
.eh_frame:000000000001817A                 db  28h ; (
.eh_frame:000000000001817B                 db  42h ; B
.eh_frame:000000000001817C                 db  0Eh
.eh_frame:000000000001817D                 db  20h
.eh_frame:000000000001817E                 db  42h ; B
.eh_frame:000000000001817F                 db  0Eh
.eh_frame:0000000000018180                 db  18h
.eh_frame:0000000000018181                 db  42h ; B
.eh_frame:0000000000018182                 db  0Eh
.eh_frame:0000000000018183                 db  10h
.eh_frame:0000000000018184                 db  42h ; B
.eh_frame:0000000000018185                 db  0Eh
.eh_frame:0000000000018186                 db    8
.eh_frame:0000000000018187                 db    0
.eh_frame:0000000000018188                 db  10h
.eh_frame:0000000000018189                 db    0
.eh_frame:000000000001818A                 db    0
.eh_frame:000000000001818B                 db    0
.eh_frame:000000000001818C                 db  7Ch ; |
.eh_frame:000000000001818D                 db    8
.eh_frame:000000000001818E                 db    0
.eh_frame:000000000001818F                 db    0
.eh_frame:0000000000018190                 db 0F0h
.eh_frame:0000000000018191                 db 0DDh
.eh_frame:0000000000018192                 db 0FEh
.eh_frame:0000000000018193                 db 0FFh
.eh_frame:0000000000018194                 db  0Ah
.eh_frame:0000000000018195                 db    0
.eh_frame:0000000000018196                 db    0
.eh_frame:0000000000018197                 db    0
.eh_frame:0000000000018198                 db    0
.eh_frame:0000000000018199                 db    0
.eh_frame:000000000001819A                 db    0
.eh_frame:000000000001819B                 db    0
.eh_frame:000000000001819C                 db  28h ; (
.eh_frame:000000000001819D                 db    0
.eh_frame:000000000001819E                 db    0
.eh_frame:000000000001819F                 db    0
.eh_frame:00000000000181A0                 db  90h
.eh_frame:00000000000181A1                 db    8
.eh_frame:00000000000181A2                 db    0
.eh_frame:00000000000181A3                 db    0
.eh_frame:00000000000181A4                 db 0ECh
.eh_frame:00000000000181A5                 db 0DDh
.eh_frame:00000000000181A6                 db 0FEh
.eh_frame:00000000000181A7                 db 0FFh
.eh_frame:00000000000181A8                 db  93h
.eh_frame:00000000000181A9                 db    0
.eh_frame:00000000000181AA                 db    0
.eh_frame:00000000000181AB                 db    0
.eh_frame:00000000000181AC                 db    0
.eh_frame:00000000000181AD                 db  48h ; H
.eh_frame:00000000000181AE                 db  0Eh
.eh_frame:00000000000181AF                 db  10h
.eh_frame:00000000000181B0                 db  8Ch
.eh_frame:00000000000181B1                 db    2
.eh_frame:00000000000181B2                 db  48h ; H
.eh_frame:00000000000181B3                 db  0Eh
.eh_frame:00000000000181B4                 db  18h
.eh_frame:00000000000181B5                 db  86h
.eh_frame:00000000000181B6                 db    3
.eh_frame:00000000000181B7                 db  41h ; A
.eh_frame:00000000000181B8                 db  0Eh
.eh_frame:00000000000181B9                 db  20h
.eh_frame:00000000000181BA                 db  83h
.eh_frame:00000000000181BB                 db    4
.eh_frame:00000000000181BC                 db    2
.eh_frame:00000000000181BD                 db  74h ; t
.eh_frame:00000000000181BE                 db  0Eh
.eh_frame:00000000000181BF                 db  18h
.eh_frame:00000000000181C0                 db  4Bh ; K
.eh_frame:00000000000181C1                 db  0Eh
.eh_frame:00000000000181C2                 db  10h
.eh_frame:00000000000181C3                 db  42h ; B
.eh_frame:00000000000181C4                 db  0Eh
.eh_frame:00000000000181C5                 db    8
.eh_frame:00000000000181C6                 db    0
.eh_frame:00000000000181C7                 db    0
.eh_frame:00000000000181C8                 db  10h
.eh_frame:00000000000181C9                 db    0
.eh_frame:00000000000181CA                 db    0
.eh_frame:00000000000181CB                 db    0
.eh_frame:00000000000181CC                 db 0BCh
.eh_frame:00000000000181CD                 db    8
.eh_frame:00000000000181CE                 db    0
.eh_frame:00000000000181CF                 db    0
.eh_frame:00000000000181D0                 db  60h ; `
.eh_frame:00000000000181D1                 db 0DEh
.eh_frame:00000000000181D2                 db 0FEh
.eh_frame:00000000000181D3                 db 0FFh
.eh_frame:00000000000181D4                 db  13h
.eh_frame:00000000000181D5                 db    0
.eh_frame:00000000000181D6                 db    0
.eh_frame:00000000000181D7                 db    0
.eh_frame:00000000000181D8                 db    0
.eh_frame:00000000000181D9                 db    0
.eh_frame:00000000000181DA                 db    0
.eh_frame:00000000000181DB                 db    0
.eh_frame:00000000000181DC                 db  10h
.eh_frame:00000000000181DD                 db    0
.eh_frame:00000000000181DE                 db    0
.eh_frame:00000000000181DF                 db    0
.eh_frame:00000000000181E0                 db 0D0h
.eh_frame:00000000000181E1                 db    8
.eh_frame:00000000000181E2                 db    0
.eh_frame:00000000000181E3                 db    0
.eh_frame:00000000000181E4                 db  6Ch ; l
.eh_frame:00000000000181E5                 db 0DEh
.eh_frame:00000000000181E6                 db 0FEh
.eh_frame:00000000000181E7                 db 0FFh
.eh_frame:00000000000181E8                 db  0Ch
.eh_frame:00000000000181E9                 db    0
.eh_frame:00000000000181EA                 db    0
.eh_frame:00000000000181EB                 db    0
.eh_frame:00000000000181EC                 db    0
.eh_frame:00000000000181ED                 db    0
.eh_frame:00000000000181EE                 db    0
.eh_frame:00000000000181EF                 db    0
.eh_frame:00000000000181F0                 db  10h
.eh_frame:00000000000181F1                 db    0
.eh_frame:00000000000181F2                 db    0
.eh_frame:00000000000181F3                 db    0
.eh_frame:00000000000181F4                 db 0E4h
.eh_frame:00000000000181F5                 db    8
.eh_frame:00000000000181F6                 db    0
.eh_frame:00000000000181F7                 db    0
.eh_frame:00000000000181F8                 db  68h ; h
.eh_frame:00000000000181F9                 db 0DEh
.eh_frame:00000000000181FA                 db 0FEh
.eh_frame:00000000000181FB                 db 0FFh
.eh_frame:00000000000181FC                 db  18h
.eh_frame:00000000000181FD                 db    0
.eh_frame:00000000000181FE                 db    0
.eh_frame:00000000000181FF                 db    0
.eh_frame:0000000000018200                 db    0
.eh_frame:0000000000018201                 db    0
.eh_frame:0000000000018202                 db    0
.eh_frame:0000000000018203                 db    0
.eh_frame:0000000000018204                 db  10h
.eh_frame:0000000000018205                 db    0
.eh_frame:0000000000018206                 db    0
.eh_frame:0000000000018207                 db    0
.eh_frame:0000000000018208                 db 0F8h
.eh_frame:0000000000018209                 db    8
.eh_frame:000000000001820A                 db    0
.eh_frame:000000000001820B                 db    0
.eh_frame:000000000001820C                 db  74h ; t
.eh_frame:000000000001820D                 db 0DEh
.eh_frame:000000000001820E                 db 0FEh
.eh_frame:000000000001820F                 db 0FFh
.eh_frame:0000000000018210                 db  14h
.eh_frame:0000000000018211                 db    0
.eh_frame:0000000000018212                 db    0
.eh_frame:0000000000018213                 db    0
.eh_frame:0000000000018214                 db    0
.eh_frame:0000000000018215                 db    0
.eh_frame:0000000000018216                 db    0
.eh_frame:0000000000018217                 db    0
.eh_frame:0000000000018218                 db  18h
.eh_frame:0000000000018219                 db    0
.eh_frame:000000000001821A                 db    0
.eh_frame:000000000001821B                 db    0
.eh_frame:000000000001821C                 db  0Ch
.eh_frame:000000000001821D                 db    9
.eh_frame:000000000001821E                 db    0
.eh_frame:000000000001821F                 db    0
.eh_frame:0000000000018220                 db  80h
.eh_frame:0000000000018221                 db 0DEh
.eh_frame:0000000000018222                 db 0FEh
.eh_frame:0000000000018223                 db 0FFh
.eh_frame:0000000000018224                 db  8Eh
.eh_frame:0000000000018225                 db    0
.eh_frame:0000000000018226                 db    0
.eh_frame:0000000000018227                 db    0
.eh_frame:0000000000018228                 db    0
.eh_frame:0000000000018229                 db  44h ; D
.eh_frame:000000000001822A                 db  0Eh
.eh_frame:000000000001822B                 db  50h ; P
.eh_frame:000000000001822C                 db    2
.eh_frame:000000000001822D                 db  7Fh ; 
.eh_frame:000000000001822E                 db  0Ah
.eh_frame:000000000001822F                 db  0Eh
.eh_frame:0000000000018230                 db    8
.eh_frame:0000000000018231                 db  41h ; A
.eh_frame:0000000000018232                 db  0Bh
.eh_frame:0000000000018233                 db    0
.eh_frame:0000000000018234                 db  18h
.eh_frame:0000000000018235                 db    0
.eh_frame:0000000000018236                 db    0
.eh_frame:0000000000018237                 db    0
.eh_frame:0000000000018238                 db  28h ; (
.eh_frame:0000000000018239                 db    9
.eh_frame:000000000001823A                 db    0
.eh_frame:000000000001823B                 db    0
.eh_frame:000000000001823C                 db 0F4h
.eh_frame:000000000001823D                 db 0DEh
.eh_frame:000000000001823E                 db 0FEh
.eh_frame:000000000001823F                 db 0FFh
.eh_frame:0000000000018240                 db  8Ah
.eh_frame:0000000000018241                 db    0
.eh_frame:0000000000018242                 db    0
.eh_frame:0000000000018243                 db    0
.eh_frame:0000000000018244                 db    0
.eh_frame:0000000000018245                 db  44h ; D
.eh_frame:0000000000018246                 db  0Eh
.eh_frame:0000000000018247                 db  50h ; P
.eh_frame:0000000000018248                 db    2
.eh_frame:0000000000018249                 db  7Bh ; {
.eh_frame:000000000001824A                 db  0Ah
.eh_frame:000000000001824B                 db  0Eh
.eh_frame:000000000001824C                 db    8
.eh_frame:000000000001824D                 db  41h ; A
.eh_frame:000000000001824E                 db  0Bh
.eh_frame:000000000001824F                 db    0
.eh_frame:0000000000018250                 db  10h
.eh_frame:0000000000018251                 db    0
.eh_frame:0000000000018252                 db    0
.eh_frame:0000000000018253                 db    0
.eh_frame:0000000000018254                 db  44h ; D
.eh_frame:0000000000018255                 db    9
.eh_frame:0000000000018256                 db    0
.eh_frame:0000000000018257                 db    0
.eh_frame:0000000000018258                 db  68h ; h
.eh_frame:0000000000018259                 db 0DFh
.eh_frame:000000000001825A                 db 0FEh
.eh_frame:000000000001825B                 db 0FFh
.eh_frame:000000000001825C                 db  0Ch
.eh_frame:000000000001825D                 db    0
.eh_frame:000000000001825E                 db    0
.eh_frame:000000000001825F                 db    0
.eh_frame:0000000000018260                 db    0
.eh_frame:0000000000018261                 db    0
.eh_frame:0000000000018262                 db    0
.eh_frame:0000000000018263                 db    0
.eh_frame:0000000000018264                 db  10h
.eh_frame:0000000000018265                 db    0
.eh_frame:0000000000018266                 db    0
.eh_frame:0000000000018267                 db    0
.eh_frame:0000000000018268                 db  58h ; X
.eh_frame:0000000000018269                 db    9
.eh_frame:000000000001826A                 db    0
.eh_frame:000000000001826B                 db    0
.eh_frame:000000000001826C                 db  64h ; d
.eh_frame:000000000001826D                 db 0DFh
.eh_frame:000000000001826E                 db 0FEh
.eh_frame:000000000001826F                 db 0FFh
.eh_frame:0000000000018270                 db  0Fh
.eh_frame:0000000000018271                 db    0
.eh_frame:0000000000018272                 db    0
.eh_frame:0000000000018273                 db    0
.eh_frame:0000000000018274                 db    0
.eh_frame:0000000000018275                 db    0
.eh_frame:0000000000018276                 db    0
.eh_frame:0000000000018277                 db    0
.eh_frame:0000000000018278                 db  18h
.eh_frame:0000000000018279                 db    0
.eh_frame:000000000001827A                 db    0
.eh_frame:000000000001827B                 db    0
.eh_frame:000000000001827C                 db  6Ch ; l
.eh_frame:000000000001827D                 db    9
.eh_frame:000000000001827E                 db    0
.eh_frame:000000000001827F                 db    0
.eh_frame:0000000000018280                 db  60h ; `
.eh_frame:0000000000018281                 db 0DFh
.eh_frame:0000000000018282                 db 0FEh
.eh_frame:0000000000018283                 db 0FFh
.eh_frame:0000000000018284                 db  98h
.eh_frame:0000000000018285                 db    0
.eh_frame:0000000000018286                 db    0
.eh_frame:0000000000018287                 db    0
.eh_frame:0000000000018288                 db    0
.eh_frame:0000000000018289                 db  44h ; D
.eh_frame:000000000001828A                 db  0Eh
.eh_frame:000000000001828B                 db  50h ; P
.eh_frame:000000000001828C                 db    2
.eh_frame:000000000001828D                 db  8Eh
.eh_frame:000000000001828E                 db  0Ah
.eh_frame:000000000001828F                 db  0Eh
.eh_frame:0000000000018290                 db    8
.eh_frame:0000000000018291                 db  41h ; A
.eh_frame:0000000000018292                 db  0Bh
.eh_frame:0000000000018293                 db    0
.eh_frame:0000000000018294                 db  10h
.eh_frame:0000000000018295                 db    0
.eh_frame:0000000000018296                 db    0
.eh_frame:0000000000018297                 db    0
.eh_frame:0000000000018298                 db  88h
.eh_frame:0000000000018299                 db    9
.eh_frame:000000000001829A                 db    0
.eh_frame:000000000001829B                 db    0
.eh_frame:000000000001829C                 db 0E4h
.eh_frame:000000000001829D                 db 0DFh
.eh_frame:000000000001829E                 db 0FEh
.eh_frame:000000000001829F                 db 0FFh
.eh_frame:00000000000182A0                 db  10h
.eh_frame:00000000000182A1                 db    0
.eh_frame:00000000000182A2                 db    0
.eh_frame:00000000000182A3                 db    0
.eh_frame:00000000000182A4                 db    0
.eh_frame:00000000000182A5                 db    0
.eh_frame:00000000000182A6                 db    0
.eh_frame:00000000000182A7                 db    0
.eh_frame:00000000000182A8                 db  10h
.eh_frame:00000000000182A9                 db    0
.eh_frame:00000000000182AA                 db    0
.eh_frame:00000000000182AB                 db    0
.eh_frame:00000000000182AC                 db  9Ch
.eh_frame:00000000000182AD                 db    9
.eh_frame:00000000000182AE                 db    0
.eh_frame:00000000000182AF                 db    0
.eh_frame:00000000000182B0                 db 0E0h
.eh_frame:00000000000182B1                 db 0DFh
.eh_frame:00000000000182B2                 db 0FEh
.eh_frame:00000000000182B3                 db 0FFh
.eh_frame:00000000000182B4                 db  11h
.eh_frame:00000000000182B5                 db    0
.eh_frame:00000000000182B6                 db    0
.eh_frame:00000000000182B7                 db    0
.eh_frame:00000000000182B8                 db    0
.eh_frame:00000000000182B9                 db    0
.eh_frame:00000000000182BA                 db    0
.eh_frame:00000000000182BB                 db    0
.eh_frame:00000000000182BC                 db  10h
.eh_frame:00000000000182BD                 db    0
.eh_frame:00000000000182BE                 db    0
.eh_frame:00000000000182BF                 db    0
.eh_frame:00000000000182C0                 db 0B0h
.eh_frame:00000000000182C1                 db    9
.eh_frame:00000000000182C2                 db    0
.eh_frame:00000000000182C3                 db    0
.eh_frame:00000000000182C4                 db 0ECh
.eh_frame:00000000000182C5                 db 0DFh
.eh_frame:00000000000182C6                 db 0FEh
.eh_frame:00000000000182C7                 db 0FFh
.eh_frame:00000000000182C8                 db  0Ah
.eh_frame:00000000000182C9                 db    0
.eh_frame:00000000000182CA                 db    0
.eh_frame:00000000000182CB                 db    0
.eh_frame:00000000000182CC                 db    0
.eh_frame:00000000000182CD                 db    0
.eh_frame:00000000000182CE                 db    0
.eh_frame:00000000000182CF                 db    0
.eh_frame:00000000000182D0                 db  18h
.eh_frame:00000000000182D1                 db    0
.eh_frame:00000000000182D2                 db    0
.eh_frame:00000000000182D3                 db    0
.eh_frame:00000000000182D4                 db 0C4h
.eh_frame:00000000000182D5                 db    9
.eh_frame:00000000000182D6                 db    0
.eh_frame:00000000000182D7                 db    0
.eh_frame:00000000000182D8                 db 0E8h
.eh_frame:00000000000182D9                 db 0DFh
.eh_frame:00000000000182DA                 db 0FEh
.eh_frame:00000000000182DB                 db 0FFh
.eh_frame:00000000000182DC                 db  8Eh
.eh_frame:00000000000182DD                 db    0
.eh_frame:00000000000182DE                 db    0
.eh_frame:00000000000182DF                 db    0
.eh_frame:00000000000182E0                 db    0
.eh_frame:00000000000182E1                 db  44h ; D
.eh_frame:00000000000182E2                 db  0Eh
.eh_frame:00000000000182E3                 db  50h ; P
.eh_frame:00000000000182E4                 db    2
.eh_frame:00000000000182E5                 db  7Fh ; 
.eh_frame:00000000000182E6                 db  0Ah
.eh_frame:00000000000182E7                 db  0Eh
.eh_frame:00000000000182E8                 db    8
.eh_frame:00000000000182E9                 db  41h ; A
.eh_frame:00000000000182EA                 db  0Bh
.eh_frame:00000000000182EB                 db    0
.eh_frame:00000000000182EC                 db  18h
.eh_frame:00000000000182ED                 db    0
.eh_frame:00000000000182EE                 db    0
.eh_frame:00000000000182EF                 db    0
.eh_frame:00000000000182F0                 db 0E0h
.eh_frame:00000000000182F1                 db    9
.eh_frame:00000000000182F2                 db    0
.eh_frame:00000000000182F3                 db    0
.eh_frame:00000000000182F4                 db  5Ch ; \
.eh_frame:00000000000182F5                 db 0E0h
.eh_frame:00000000000182F6                 db 0FEh
.eh_frame:00000000000182F7                 db 0FFh
.eh_frame:00000000000182F8                 db  91h
.eh_frame:00000000000182F9                 db    0
.eh_frame:00000000000182FA                 db    0
.eh_frame:00000000000182FB                 db    0
.eh_frame:00000000000182FC                 db    0
.eh_frame:00000000000182FD                 db  44h ; D
.eh_frame:00000000000182FE                 db  0Eh
.eh_frame:00000000000182FF                 db  50h ; P
.eh_frame:0000000000018300                 db    2
.eh_frame:0000000000018301                 db  82h
.eh_frame:0000000000018302                 db  0Ah
.eh_frame:0000000000018303                 db  0Eh
.eh_frame:0000000000018304                 db    8
.eh_frame:0000000000018305                 db  41h ; A
.eh_frame:0000000000018306                 db  0Bh
.eh_frame:0000000000018307                 db    0
.eh_frame:0000000000018308                 db  10h
.eh_frame:0000000000018309                 db    0
.eh_frame:000000000001830A                 db    0
.eh_frame:000000000001830B                 db    0
.eh_frame:000000000001830C                 db 0FCh
.eh_frame:000000000001830D                 db    9
.eh_frame:000000000001830E                 db    0
.eh_frame:000000000001830F                 db    0
.eh_frame:0000000000018310                 db 0E0h
.eh_frame:0000000000018311                 db 0E0h
.eh_frame:0000000000018312                 db 0FEh
.eh_frame:0000000000018313                 db 0FFh
.eh_frame:0000000000018314                 db  0Ch
.eh_frame:0000000000018315                 db    0
.eh_frame:0000000000018316                 db    0
.eh_frame:0000000000018317                 db    0
.eh_frame:0000000000018318                 db    0
.eh_frame:0000000000018319                 db    0
.eh_frame:000000000001831A                 db    0
.eh_frame:000000000001831B                 db    0
.eh_frame:000000000001831C                 db  10h
.eh_frame:000000000001831D                 db    0
.eh_frame:000000000001831E                 db    0
.eh_frame:000000000001831F                 db    0
.eh_frame:0000000000018320                 db  10h
.eh_frame:0000000000018321                 db  0Ah
.eh_frame:0000000000018322                 db    0
.eh_frame:0000000000018323                 db    0
.eh_frame:0000000000018324                 db 0DCh
.eh_frame:0000000000018325                 db 0E0h
.eh_frame:0000000000018326                 db 0FEh
.eh_frame:0000000000018327                 db 0FFh
.eh_frame:0000000000018328                 db  17h
.eh_frame:0000000000018329                 db    0
.eh_frame:000000000001832A                 db    0
.eh_frame:000000000001832B                 db    0
.eh_frame:000000000001832C                 db    0
.eh_frame:000000000001832D                 db    0
.eh_frame:000000000001832E                 db    0
.eh_frame:000000000001832F                 db    0
.eh_frame:0000000000018330                 db  10h
.eh_frame:0000000000018331                 db    0
.eh_frame:0000000000018332                 db    0
.eh_frame:0000000000018333                 db    0
.eh_frame:0000000000018334                 db  24h ; $
.eh_frame:0000000000018335                 db  0Ah
.eh_frame:0000000000018336                 db    0
.eh_frame:0000000000018337                 db    0
.eh_frame:0000000000018338                 db 0E8h
.eh_frame:0000000000018339                 db 0E0h
.eh_frame:000000000001833A                 db 0FEh
.eh_frame:000000000001833B                 db 0FFh
.eh_frame:000000000001833C                 db  13h
.eh_frame:000000000001833D                 db    0
.eh_frame:000000000001833E                 db    0
.eh_frame:000000000001833F                 db    0
.eh_frame:0000000000018340                 db    0
.eh_frame:0000000000018341                 db    0
.eh_frame:0000000000018342                 db    0
.eh_frame:0000000000018343                 db    0
.eh_frame:0000000000018344                 db  10h
.eh_frame:0000000000018345                 db    0
.eh_frame:0000000000018346                 db    0
.eh_frame:0000000000018347                 db    0
.eh_frame:0000000000018348                 db  38h ; 8
.eh_frame:0000000000018349                 db  0Ah
.eh_frame:000000000001834A                 db    0
.eh_frame:000000000001834B                 db    0
.eh_frame:000000000001834C                 db 0F4h
.eh_frame:000000000001834D                 db 0E0h
.eh_frame:000000000001834E                 db 0FEh
.eh_frame:000000000001834F                 db 0FFh
.eh_frame:0000000000018350                 db  0Ch
.eh_frame:0000000000018351                 db    0
.eh_frame:0000000000018352                 db    0
.eh_frame:0000000000018353                 db    0
.eh_frame:0000000000018354                 db    0
.eh_frame:0000000000018355                 db    0
.eh_frame:0000000000018356                 db    0
.eh_frame:0000000000018357                 db    0
.eh_frame:0000000000018358                 db  10h
.eh_frame:0000000000018359                 db    0
.eh_frame:000000000001835A                 db    0
.eh_frame:000000000001835B                 db    0
.eh_frame:000000000001835C                 db  4Ch ; L
.eh_frame:000000000001835D                 db  0Ah
.eh_frame:000000000001835E                 db    0
.eh_frame:000000000001835F                 db    0
.eh_frame:0000000000018360                 db 0F0h
.eh_frame:0000000000018361                 db 0E0h
.eh_frame:0000000000018362                 db 0FEh
.eh_frame:0000000000018363                 db 0FFh
.eh_frame:0000000000018364                 db  14h
.eh_frame:0000000000018365                 db    0
.eh_frame:0000000000018366                 db    0
.eh_frame:0000000000018367                 db    0
.eh_frame:0000000000018368                 db    0
.eh_frame:0000000000018369                 db    0
.eh_frame:000000000001836A                 db    0
.eh_frame:000000000001836B                 db    0
.eh_frame:000000000001836C                 db  10h
.eh_frame:000000000001836D                 db    0
.eh_frame:000000000001836E                 db    0
.eh_frame:000000000001836F                 db    0
.eh_frame:0000000000018370                 db  60h ; `
.eh_frame:0000000000018371                 db  0Ah
.eh_frame:0000000000018372                 db    0
.eh_frame:0000000000018373                 db    0
.eh_frame:0000000000018374                 db 0FCh
.eh_frame:0000000000018375                 db 0E0h
.eh_frame:0000000000018376                 db 0FEh
.eh_frame:0000000000018377                 db 0FFh
.eh_frame:0000000000018378                 db  13h
.eh_frame:0000000000018379                 db    0
.eh_frame:000000000001837A                 db    0
.eh_frame:000000000001837B                 db    0
.eh_frame:000000000001837C                 db    0
.eh_frame:000000000001837D                 db    0
.eh_frame:000000000001837E                 db    0
.eh_frame:000000000001837F                 db    0
.eh_frame:0000000000018380                 db  14h
.eh_frame:0000000000018381                 db    0
.eh_frame:0000000000018382                 db    0
.eh_frame:0000000000018383                 db    0
.eh_frame:0000000000018384                 db  74h ; t
.eh_frame:0000000000018385                 db  0Ah
.eh_frame:0000000000018386                 db    0
.eh_frame:0000000000018387                 db    0
.eh_frame:0000000000018388                 db    8
.eh_frame:0000000000018389                 db 0E1h
.eh_frame:000000000001838A                 db 0FEh
.eh_frame:000000000001838B                 db 0FFh
.eh_frame:000000000001838C                 db  18h
.eh_frame:000000000001838D                 db    0
.eh_frame:000000000001838E                 db    0
.eh_frame:000000000001838F                 db    0
.eh_frame:0000000000018390                 db    0
.eh_frame:0000000000018391                 db    0
.eh_frame:0000000000018392                 db    0
.eh_frame:0000000000018393                 db    0
.eh_frame:0000000000018394                 db    0
.eh_frame:0000000000018395                 db    0
.eh_frame:0000000000018396                 db    0
.eh_frame:0000000000018397                 db    0
.eh_frame:0000000000018398                 db  24h ; $
.eh_frame:0000000000018399                 db    0
.eh_frame:000000000001839A                 db    0
.eh_frame:000000000001839B                 db    0
.eh_frame:000000000001839C                 db  8Ch
.eh_frame:000000000001839D                 db  0Ah
.eh_frame:000000000001839E                 db    0
.eh_frame:000000000001839F                 db    0
.eh_frame:00000000000183A0                 db  10h
.eh_frame:00000000000183A1                 db 0E1h
.eh_frame:00000000000183A2                 db 0FEh
.eh_frame:00000000000183A3                 db 0FFh
.eh_frame:00000000000183A4                 db  31h ; 1
.eh_frame:00000000000183A5                 db    0
.eh_frame:00000000000183A6                 db    0
.eh_frame:00000000000183A7                 db    0
.eh_frame:00000000000183A8                 db    0
.eh_frame:00000000000183A9                 db  41h ; A
.eh_frame:00000000000183AA                 db  0Eh
.eh_frame:00000000000183AB                 db  10h
.eh_frame:00000000000183AC                 db  86h
.eh_frame:00000000000183AD                 db    2
.eh_frame:00000000000183AE                 db  41h ; A
.eh_frame:00000000000183AF                 db  0Eh
.eh_frame:00000000000183B0                 db  18h
.eh_frame:00000000000183B1                 db  83h
.eh_frame:00000000000183B2                 db    3
.eh_frame:00000000000183B3                 db  4Fh ; O
.eh_frame:00000000000183B4                 db  0Eh
.eh_frame:00000000000183B5                 db  20h
.eh_frame:00000000000183B6                 db  5Dh ; ]
.eh_frame:00000000000183B7                 db  0Eh
.eh_frame:00000000000183B8                 db  18h
.eh_frame:00000000000183B9                 db  41h ; A
.eh_frame:00000000000183BA                 db  0Eh
.eh_frame:00000000000183BB                 db  10h
.eh_frame:00000000000183BC                 db  41h ; A
.eh_frame:00000000000183BD                 db  0Eh
.eh_frame:00000000000183BE                 db    8
.eh_frame:00000000000183BF                 db    0
.eh_frame:00000000000183C0                 db  14h
.eh_frame:00000000000183C1                 db    0
.eh_frame:00000000000183C2                 db    0
.eh_frame:00000000000183C3                 db    0
.eh_frame:00000000000183C4                 db 0B4h
.eh_frame:00000000000183C5                 db  0Ah
.eh_frame:00000000000183C6                 db    0
.eh_frame:00000000000183C7                 db    0
.eh_frame:00000000000183C8                 db  28h ; (
.eh_frame:00000000000183C9                 db 0E1h
.eh_frame:00000000000183CA                 db 0FEh
.eh_frame:00000000000183CB                 db 0FFh
.eh_frame:00000000000183CC                 db 0A4h
.eh_frame:00000000000183CD                 db    2
.eh_frame:00000000000183CE                 db    0
.eh_frame:00000000000183CF                 db    0
.eh_frame:00000000000183D0                 db    0
.eh_frame:00000000000183D1                 db    0
.eh_frame:00000000000183D2                 db    0
.eh_frame:00000000000183D3                 db    0
.eh_frame:00000000000183D4                 db    0
.eh_frame:00000000000183D5                 db    0
.eh_frame:00000000000183D6                 db    0
.eh_frame:00000000000183D7                 db    0
.eh_frame:00000000000183D8                 db  10h
.eh_frame:00000000000183D9                 db    1
.eh_frame:00000000000183DA                 db    0
.eh_frame:00000000000183DB                 db    0
.eh_frame:00000000000183DC                 db 0CCh
.eh_frame:00000000000183DD                 db  0Ah
.eh_frame:00000000000183DE                 db    0
.eh_frame:00000000000183DF                 db    0
.eh_frame:00000000000183E0                 db 0C0h
.eh_frame:00000000000183E1                 db 0E3h
.eh_frame:00000000000183E2                 db 0FEh
.eh_frame:00000000000183E3                 db 0FFh
.eh_frame:00000000000183E4                 db  17h
.eh_frame:00000000000183E5                 db    4
.eh_frame:00000000000183E6                 db    0
.eh_frame:00000000000183E7                 db    0
.eh_frame:00000000000183E8                 db    0
.eh_frame:00000000000183E9                 db  42h ; B
.eh_frame:00000000000183EA                 db  0Eh
.eh_frame:00000000000183EB                 db  10h
.eh_frame:00000000000183EC                 db  8Fh
.eh_frame:00000000000183ED                 db    2
.eh_frame:00000000000183EE                 db  42h ; B
.eh_frame:00000000000183EF                 db  0Eh
.eh_frame:00000000000183F0                 db  18h
.eh_frame:00000000000183F1                 db  8Eh
.eh_frame:00000000000183F2                 db    3
.eh_frame:00000000000183F3                 db  42h ; B
.eh_frame:00000000000183F4                 db  0Eh
.eh_frame:00000000000183F5                 db  20h
.eh_frame:00000000000183F6                 db  8Dh
.eh_frame:00000000000183F7                 db    4
.eh_frame:00000000000183F8                 db  42h ; B
.eh_frame:00000000000183F9                 db  0Eh
.eh_frame:00000000000183FA                 db  28h ; (
.eh_frame:00000000000183FB                 db  8Ch
.eh_frame:00000000000183FC                 db    5
.eh_frame:00000000000183FD                 db  44h ; D
.eh_frame:00000000000183FE                 db  0Eh
.eh_frame:00000000000183FF                 db  30h ; 0
.eh_frame:0000000000018400                 db  86h
.eh_frame:0000000000018401                 db    6
.eh_frame:0000000000018402                 db  41h ; A
.eh_frame:0000000000018403                 db  0Eh
.eh_frame:0000000000018404                 db  38h ; 8
.eh_frame:0000000000018405                 db  83h
.eh_frame:0000000000018406                 db    7
.eh_frame:0000000000018407                 db  4Ah ; J
.eh_frame:0000000000018408                 db  0Eh
.eh_frame:0000000000018409                 db  60h ; `
.eh_frame:000000000001840A                 db    2
.eh_frame:000000000001840B                 db 0DDh
.eh_frame:000000000001840C                 db  0Eh
.eh_frame:000000000001840D                 db  68h ; h
.eh_frame:000000000001840E                 db  57h ; W
.eh_frame:000000000001840F                 db  0Eh
.eh_frame:0000000000018410                 db  70h ; p
.eh_frame:0000000000018411                 db  42h ; B
.eh_frame:0000000000018412                 db  0Eh
.eh_frame:0000000000018413                 db  78h ; x
.eh_frame:0000000000018414                 db  42h ; B
.eh_frame:0000000000018415                 db  0Eh
.eh_frame:0000000000018416                 db  80h
.eh_frame:0000000000018417                 db    1
.eh_frame:0000000000018418                 db  42h ; B
.eh_frame:0000000000018419                 db  0Eh
.eh_frame:000000000001841A                 db  88h
.eh_frame:000000000001841B                 db    1
.eh_frame:000000000001841C                 db  42h ; B
.eh_frame:000000000001841D                 db  0Eh
.eh_frame:000000000001841E                 db  90h
.eh_frame:000000000001841F                 db    1
.eh_frame:0000000000018420                 db  53h ; S
.eh_frame:0000000000018421                 db  0Eh
.eh_frame:0000000000018422                 db  60h ; `
.eh_frame:0000000000018423                 db  44h ; D
.eh_frame:0000000000018424                 db  0Ah
.eh_frame:0000000000018425                 db  0Eh
.eh_frame:0000000000018426                 db  38h ; 8
.eh_frame:0000000000018427                 db  41h ; A
.eh_frame:0000000000018428                 db  0Eh
.eh_frame:0000000000018429                 db  30h ; 0
.eh_frame:000000000001842A                 db  41h ; A
.eh_frame:000000000001842B                 db  0Eh
.eh_frame:000000000001842C                 db  28h ; (
.eh_frame:000000000001842D                 db  42h ; B
.eh_frame:000000000001842E                 db  0Eh
.eh_frame:000000000001842F                 db  20h
.eh_frame:0000000000018430                 db  42h ; B
.eh_frame:0000000000018431                 db  0Eh
.eh_frame:0000000000018432                 db  18h
.eh_frame:0000000000018433                 db  42h ; B
.eh_frame:0000000000018434                 db  0Eh
.eh_frame:0000000000018435                 db  10h
.eh_frame:0000000000018436                 db  42h ; B
.eh_frame:0000000000018437                 db  0Eh
.eh_frame:0000000000018438                 db    8
.eh_frame:0000000000018439                 db  44h ; D
.eh_frame:000000000001843A                 db  0Bh
.eh_frame:000000000001843B                 db    2
.eh_frame:000000000001843C                 db  78h ; x
.eh_frame:000000000001843D                 db  0Ah
.eh_frame:000000000001843E                 db  0Eh
.eh_frame:000000000001843F                 db  68h ; h
.eh_frame:0000000000018440                 db  48h ; H
.eh_frame:0000000000018441                 db  0Bh
.eh_frame:0000000000018442                 db  5Ah ; Z
.eh_frame:0000000000018443                 db  0Ah
.eh_frame:0000000000018444                 db  0Eh
.eh_frame:0000000000018445                 db  38h ; 8
.eh_frame:0000000000018446                 db  47h ; G
.eh_frame:0000000000018447                 db  0Eh
.eh_frame:0000000000018448                 db  30h ; 0
.eh_frame:0000000000018449                 db  41h ; A
.eh_frame:000000000001844A                 db  0Eh
.eh_frame:000000000001844B                 db  28h ; (
.eh_frame:000000000001844C                 db  42h ; B
.eh_frame:000000000001844D                 db  0Eh
.eh_frame:000000000001844E                 db  20h
.eh_frame:000000000001844F                 db  42h ; B
.eh_frame:0000000000018450                 db  0Eh
.eh_frame:0000000000018451                 db  18h
.eh_frame:0000000000018452                 db  42h ; B
.eh_frame:0000000000018453                 db  0Eh
.eh_frame:0000000000018454                 db  10h
.eh_frame:0000000000018455                 db  42h ; B
.eh_frame:0000000000018456                 db  0Eh
.eh_frame:0000000000018457                 db    8
.eh_frame:0000000000018458                 db  56h ; V
.eh_frame:0000000000018459                 db  0Bh
.eh_frame:000000000001845A                 db  5Eh ; ^
.eh_frame:000000000001845B                 db  0Ah
.eh_frame:000000000001845C                 db  0Eh
.eh_frame:000000000001845D                 db  38h ; 8
.eh_frame:000000000001845E                 db  52h ; R
.eh_frame:000000000001845F                 db  0Eh
.eh_frame:0000000000018460                 db  30h ; 0
.eh_frame:0000000000018461                 db  41h ; A
.eh_frame:0000000000018462                 db  0Eh
.eh_frame:0000000000018463                 db  28h ; (
.eh_frame:0000000000018464                 db  42h ; B
.eh_frame:0000000000018465                 db  0Eh
.eh_frame:0000000000018466                 db  20h
.eh_frame:0000000000018467                 db  42h ; B
.eh_frame:0000000000018468                 db  0Eh
.eh_frame:0000000000018469                 db  18h
.eh_frame:000000000001846A                 db  42h ; B
.eh_frame:000000000001846B                 db  0Eh
.eh_frame:000000000001846C                 db  10h
.eh_frame:000000000001846D                 db  42h ; B
.eh_frame:000000000001846E                 db  0Eh
.eh_frame:000000000001846F                 db    8
.eh_frame:0000000000018470                 db  4Fh ; O
.eh_frame:0000000000018471                 db  0Bh
.eh_frame:0000000000018472                 db  62h ; b
.eh_frame:0000000000018473                 db  0Ah
.eh_frame:0000000000018474                 db  0Eh
.eh_frame:0000000000018475                 db  38h ; 8
.eh_frame:0000000000018476                 db  50h ; P
.eh_frame:0000000000018477                 db  0Eh
.eh_frame:0000000000018478                 db  30h ; 0
.eh_frame:0000000000018479                 db  41h ; A
.eh_frame:000000000001847A                 db  0Eh
.eh_frame:000000000001847B                 db  28h ; (
.eh_frame:000000000001847C                 db  42h ; B
.eh_frame:000000000001847D                 db  0Eh
.eh_frame:000000000001847E                 db  20h
.eh_frame:000000000001847F                 db  42h ; B
.eh_frame:0000000000018480                 db  0Eh
.eh_frame:0000000000018481                 db  18h
.eh_frame:0000000000018482                 db  42h ; B
.eh_frame:0000000000018483                 db  0Eh
.eh_frame:0000000000018484                 db  10h
.eh_frame:0000000000018485                 db  42h ; B
.eh_frame:0000000000018486                 db  0Eh
.eh_frame:0000000000018487                 db    8
.eh_frame:0000000000018488                 db  55h ; U
.eh_frame:0000000000018489                 db  0Bh
.eh_frame:000000000001848A                 db  66h ; f
.eh_frame:000000000001848B                 db  0Eh
.eh_frame:000000000001848C                 db  68h ; h
.eh_frame:000000000001848D                 db  42h ; B
.eh_frame:000000000001848E                 db  0Eh
.eh_frame:000000000001848F                 db  70h ; p
.eh_frame:0000000000018490                 db  5Ch ; \
.eh_frame:0000000000018491                 db  0Eh
.eh_frame:0000000000018492                 db  68h ; h
.eh_frame:0000000000018493                 db  41h ; A
.eh_frame:0000000000018494                 db  0Eh
.eh_frame:0000000000018495                 db  60h ; `
.eh_frame:0000000000018496                 db  44h ; D
.eh_frame:0000000000018497                 db  0Ah
.eh_frame:0000000000018498                 db  0Eh
.eh_frame:0000000000018499                 db  38h ; 8
.eh_frame:000000000001849A                 db  41h ; A
.eh_frame:000000000001849B                 db  0Eh
.eh_frame:000000000001849C                 db  30h ; 0
.eh_frame:000000000001849D                 db  41h ; A
.eh_frame:000000000001849E                 db  0Eh
.eh_frame:000000000001849F                 db  28h ; (
.eh_frame:00000000000184A0                 db  42h ; B
.eh_frame:00000000000184A1                 db  0Eh
.eh_frame:00000000000184A2                 db  20h
.eh_frame:00000000000184A3                 db  42h ; B
.eh_frame:00000000000184A4                 db  0Eh
.eh_frame:00000000000184A5                 db  18h
.eh_frame:00000000000184A6                 db  42h ; B
.eh_frame:00000000000184A7                 db  0Eh
.eh_frame:00000000000184A8                 db  10h
.eh_frame:00000000000184A9                 db  42h ; B
.eh_frame:00000000000184AA                 db  0Eh
.eh_frame:00000000000184AB                 db    8
.eh_frame:00000000000184AC                 db  45h ; E
.eh_frame:00000000000184AD                 db  0Bh
.eh_frame:00000000000184AE                 db  68h ; h
.eh_frame:00000000000184AF                 db  0Ah
.eh_frame:00000000000184B0                 db  0Eh
.eh_frame:00000000000184B1                 db  68h ; h
.eh_frame:00000000000184B2                 db  48h ; H
.eh_frame:00000000000184B3                 db  0Bh
.eh_frame:00000000000184B4                 db  72h ; r
.eh_frame:00000000000184B5                 db  0Eh
.eh_frame:00000000000184B6                 db  68h ; h
.eh_frame:00000000000184B7                 db  45h ; E
.eh_frame:00000000000184B8                 db  0Eh
.eh_frame:00000000000184B9                 db  70h ; p
.eh_frame:00000000000184BA                 db  42h ; B
.eh_frame:00000000000184BB                 db  0Eh
.eh_frame:00000000000184BC                 db  78h ; x
.eh_frame:00000000000184BD                 db  42h ; B
.eh_frame:00000000000184BE                 db  0Eh
.eh_frame:00000000000184BF                 db  80h
.eh_frame:00000000000184C0                 db    1
.eh_frame:00000000000184C1                 db  5Eh ; ^
.eh_frame:00000000000184C2                 db  0Eh
.eh_frame:00000000000184C3                 db  60h ; `
.eh_frame:00000000000184C4                 db  44h ; D
.eh_frame:00000000000184C5                 db  0Ah
.eh_frame:00000000000184C6                 db  0Eh
.eh_frame:00000000000184C7                 db  38h ; 8
.eh_frame:00000000000184C8                 db  41h ; A
.eh_frame:00000000000184C9                 db  0Eh
.eh_frame:00000000000184CA                 db  30h ; 0
.eh_frame:00000000000184CB                 db  41h ; A
.eh_frame:00000000000184CC                 db  0Eh
.eh_frame:00000000000184CD                 db  28h ; (
.eh_frame:00000000000184CE                 db  42h ; B
.eh_frame:00000000000184CF                 db  0Eh
.eh_frame:00000000000184D0                 db  20h
.eh_frame:00000000000184D1                 db  42h ; B
.eh_frame:00000000000184D2                 db  0Eh
.eh_frame:00000000000184D3                 db  18h
.eh_frame:00000000000184D4                 db  42h ; B
.eh_frame:00000000000184D5                 db  0Eh
.eh_frame:00000000000184D6                 db  10h
.eh_frame:00000000000184D7                 db  42h ; B
.eh_frame:00000000000184D8                 db  0Eh
.eh_frame:00000000000184D9                 db    8
.eh_frame:00000000000184DA                 db  41h ; A
.eh_frame:00000000000184DB                 db  0Bh
.eh_frame:00000000000184DC                 db  79h ; y
.eh_frame:00000000000184DD                 db  0Ah
.eh_frame:00000000000184DE                 db  0Eh
.eh_frame:00000000000184DF                 db  68h ; h
.eh_frame:00000000000184E0                 db  42h ; B
.eh_frame:00000000000184E1                 db  0Eh
.eh_frame:00000000000184E2                 db  70h ; p
.eh_frame:00000000000184E3                 db  42h ; B
.eh_frame:00000000000184E4                 db  0Eh
.eh_frame:00000000000184E5                 db  78h ; x
.eh_frame:00000000000184E6                 db  42h ; B
.eh_frame:00000000000184E7                 db  0Eh
.eh_frame:00000000000184E8                 db  80h
.eh_frame:00000000000184E9                 db    1
.eh_frame:00000000000184EA                 db  51h ; Q
.eh_frame:00000000000184EB                 db  0Bh
.eh_frame:00000000000184EC                 db  10h
.eh_frame:00000000000184ED                 db    0
.eh_frame:00000000000184EE                 db    0
.eh_frame:00000000000184EF                 db    0
.eh_frame:00000000000184F0                 db 0E0h
.eh_frame:00000000000184F1                 db  0Bh
.eh_frame:00000000000184F2                 db    0
.eh_frame:00000000000184F3                 db    0
.eh_frame:00000000000184F4                 db 0CCh
.eh_frame:00000000000184F5                 db 0E6h
.eh_frame:00000000000184F6                 db 0FEh
.eh_frame:00000000000184F7                 db 0FFh
.eh_frame:00000000000184F8                 db  20h
.eh_frame:00000000000184F9                 db    0
.eh_frame:00000000000184FA                 db    0
.eh_frame:00000000000184FB                 db    0
.eh_frame:00000000000184FC                 db    0
.eh_frame:00000000000184FD                 db    0
.eh_frame:00000000000184FE                 db    0
.eh_frame:00000000000184FF                 db    0
.eh_frame:0000000000018500                 db  18h
.eh_frame:0000000000018501                 db    0
.eh_frame:0000000000018502                 db    0
.eh_frame:0000000000018503                 db    0
.eh_frame:0000000000018504                 db 0F4h
.eh_frame:0000000000018505                 db  0Bh
.eh_frame:0000000000018506                 db    0
.eh_frame:0000000000018507                 db    0
.eh_frame:0000000000018508                 db 0D8h
.eh_frame:0000000000018509                 db 0E6h
.eh_frame:000000000001850A                 db 0FEh
.eh_frame:000000000001850B                 db 0FFh
.eh_frame:000000000001850C                 db  78h ; x
.eh_frame:000000000001850D                 db    0
.eh_frame:000000000001850E                 db    0
.eh_frame:000000000001850F                 db    0
.eh_frame:0000000000018510                 db    0
.eh_frame:0000000000018511                 db  44h ; D
.eh_frame:0000000000018512                 db  0Eh
.eh_frame:0000000000018513                 db  70h ; p
.eh_frame:0000000000018514                 db    2
.eh_frame:0000000000018515                 db  60h ; `
.eh_frame:0000000000018516                 db  0Ah
.eh_frame:0000000000018517                 db  0Eh
.eh_frame:0000000000018518                 db    8
.eh_frame:0000000000018519                 db  41h ; A
.eh_frame:000000000001851A                 db  0Bh
.eh_frame:000000000001851B                 db    0
.eh_frame:000000000001851C                 db  28h ; (
.eh_frame:000000000001851D                 db    0
.eh_frame:000000000001851E                 db    0
.eh_frame:000000000001851F                 db    0
.eh_frame:0000000000018520                 db  10h
.eh_frame:0000000000018521                 db  0Ch
.eh_frame:0000000000018522                 db    0
.eh_frame:0000000000018523                 db    0
.eh_frame:0000000000018524                 db  3Ch ; <
.eh_frame:0000000000018525                 db 0E7h
.eh_frame:0000000000018526                 db 0FEh
.eh_frame:0000000000018527                 db 0FFh
.eh_frame:0000000000018528                 db 0D5h
.eh_frame:0000000000018529                 db    0
.eh_frame:000000000001852A                 db    0
.eh_frame:000000000001852B                 db    0
.eh_frame:000000000001852C                 db    0
.eh_frame:000000000001852D                 db  41h ; A
.eh_frame:000000000001852E                 db  0Eh
.eh_frame:000000000001852F                 db  10h
.eh_frame:0000000000018530                 db  86h
.eh_frame:0000000000018531                 db    2
.eh_frame:0000000000018532                 db  41h ; A
.eh_frame:0000000000018533                 db  0Eh
.eh_frame:0000000000018534                 db  18h
.eh_frame:0000000000018535                 db  83h
.eh_frame:0000000000018536                 db    3
.eh_frame:0000000000018537                 db  50h ; P
.eh_frame:0000000000018538                 db  0Eh
.eh_frame:0000000000018539                 db 0D0h
.eh_frame:000000000001853A                 db    1
.eh_frame:000000000001853B                 db    2
.eh_frame:000000000001853C                 db 0ABh
.eh_frame:000000000001853D                 db  0Ah
.eh_frame:000000000001853E                 db  0Eh
.eh_frame:000000000001853F                 db  18h
.eh_frame:0000000000018540                 db  41h ; A
.eh_frame:0000000000018541                 db  0Eh
.eh_frame:0000000000018542                 db  10h
.eh_frame:0000000000018543                 db  41h ; A
.eh_frame:0000000000018544                 db  0Eh
.eh_frame:0000000000018545                 db    8
.eh_frame:0000000000018546                 db  41h ; A
.eh_frame:0000000000018547                 db  0Bh
.eh_frame:0000000000018548                 db  1Ch
.eh_frame:0000000000018549                 db    0
.eh_frame:000000000001854A                 db    0
.eh_frame:000000000001854B                 db    0
.eh_frame:000000000001854C                 db  3Ch ; <
.eh_frame:000000000001854D                 db  0Ch
.eh_frame:000000000001854E                 db    0
.eh_frame:000000000001854F                 db    0
.eh_frame:0000000000018550                 db 0F0h
.eh_frame:0000000000018551                 db 0E7h
.eh_frame:0000000000018552                 db 0FEh
.eh_frame:0000000000018553                 db 0FFh
.eh_frame:0000000000018554                 db  80h
.eh_frame:0000000000018555                 db    0
.eh_frame:0000000000018556                 db    0
.eh_frame:0000000000018557                 db    0
.eh_frame:0000000000018558                 db    0
.eh_frame:0000000000018559                 db  41h ; A
.eh_frame:000000000001855A                 db  0Eh
.eh_frame:000000000001855B                 db  10h
.eh_frame:000000000001855C                 db  83h
.eh_frame:000000000001855D                 db    2
.eh_frame:000000000001855E                 db    2
.eh_frame:000000000001855F                 db  7Ah ; z
.eh_frame:0000000000018560                 db  0Eh
.eh_frame:0000000000018561                 db    8
.eh_frame:0000000000018562                 db    0
.eh_frame:0000000000018563                 db    0
.eh_frame:0000000000018564                 db    0
.eh_frame:0000000000018565                 db    0
.eh_frame:0000000000018566                 db    0
.eh_frame:0000000000018567                 db    0
.eh_frame:0000000000018568                 db  18h
.eh_frame:0000000000018569                 db    0
.eh_frame:000000000001856A                 db    0
.eh_frame:000000000001856B                 db    0
.eh_frame:000000000001856C                 db  5Ch ; \
.eh_frame:000000000001856D                 db  0Ch
.eh_frame:000000000001856E                 db    0
.eh_frame:000000000001856F                 db    0
.eh_frame:0000000000018570                 db  50h ; P
.eh_frame:0000000000018571                 db 0E8h
.eh_frame:0000000000018572                 db 0FEh
.eh_frame:0000000000018573                 db 0FFh
.eh_frame:0000000000018574                 db  1Ah
.eh_frame:0000000000018575                 db    0
.eh_frame:0000000000018576                 db    0
.eh_frame:0000000000018577                 db    0
.eh_frame:0000000000018578                 db    0
.eh_frame:0000000000018579                 db  41h ; A
.eh_frame:000000000001857A                 db  0Eh
.eh_frame:000000000001857B                 db  10h
.eh_frame:000000000001857C                 db  83h
.eh_frame:000000000001857D                 db    2
.eh_frame:000000000001857E                 db  53h ; S
.eh_frame:000000000001857F                 db  0Ah
.eh_frame:0000000000018580                 db  0Eh
.eh_frame:0000000000018581                 db    8
.eh_frame:0000000000018582                 db  41h ; A
.eh_frame:0000000000018583                 db  0Bh
.eh_frame:0000000000018584                 db  10h
.eh_frame:0000000000018585                 db    0
.eh_frame:0000000000018586                 db    0
.eh_frame:0000000000018587                 db    0
.eh_frame:0000000000018588                 db  78h ; x
.eh_frame:0000000000018589                 db  0Ch
.eh_frame:000000000001858A                 db    0
.eh_frame:000000000001858B                 db    0
.eh_frame:000000000001858C                 db  54h ; T
.eh_frame:000000000001858D                 db 0E8h
.eh_frame:000000000001858E                 db 0FEh
.eh_frame:000000000001858F                 db 0FFh
.eh_frame:0000000000018590                 db  24h ; $
.eh_frame:0000000000018591                 db    0
.eh_frame:0000000000018592                 db    0
.eh_frame:0000000000018593                 db    0
.eh_frame:0000000000018594                 db    0
.eh_frame:0000000000018595                 db  5Fh ; _
.eh_frame:0000000000018596                 db  0Eh
.eh_frame:0000000000018597                 db  10h
.eh_frame:0000000000018598                 db  10h
.eh_frame:0000000000018599                 db    0
.eh_frame:000000000001859A                 db    0
.eh_frame:000000000001859B                 db    0
.eh_frame:000000000001859C                 db  8Ch
.eh_frame:000000000001859D                 db  0Ch
.eh_frame:000000000001859E                 db    0
.eh_frame:000000000001859F                 db    0
.eh_frame:00000000000185A0                 db  70h ; p
.eh_frame:00000000000185A1                 db 0E8h
.eh_frame:00000000000185A2                 db 0FEh
.eh_frame:00000000000185A3                 db 0FFh
.eh_frame:00000000000185A4                 db    2
.eh_frame:00000000000185A5                 db    0
.eh_frame:00000000000185A6                 db    0
.eh_frame:00000000000185A7                 db    0
.eh_frame:00000000000185A8                 db    0
.eh_frame:00000000000185A9                 db    0
.eh_frame:00000000000185AA                 db    0
.eh_frame:00000000000185AB                 db    0
.eh_frame:00000000000185AC                 db  20h
.eh_frame:00000000000185AD                 db    0
.eh_frame:00000000000185AE                 db    0
.eh_frame:00000000000185AF                 db    0
.eh_frame:00000000000185B0                 db 0A0h
.eh_frame:00000000000185B1                 db  0Ch
.eh_frame:00000000000185B2                 db    0
.eh_frame:00000000000185B3                 db    0
.eh_frame:00000000000185B4                 db  6Ch ; l
.eh_frame:00000000000185B5                 db 0E8h
.eh_frame:00000000000185B6                 db 0FEh
.eh_frame:00000000000185B7                 db 0FFh
.eh_frame:00000000000185B8                 db  36h ; 6
.eh_frame:00000000000185B9                 db    0
.eh_frame:00000000000185BA                 db    0
.eh_frame:00000000000185BB                 db    0
.eh_frame:00000000000185BC                 db    0
.eh_frame:00000000000185BD                 db  44h ; D
.eh_frame:00000000000185BE                 db  0Eh
.eh_frame:00000000000185BF                 db  10h
.eh_frame:00000000000185C0                 db  83h
.eh_frame:00000000000185C1                 db    2
.eh_frame:00000000000185C2                 db  5Dh ; ]
.eh_frame:00000000000185C3                 db  0Ah
.eh_frame:00000000000185C4                 db  0Eh
.eh_frame:00000000000185C5                 db    8
.eh_frame:00000000000185C6                 db  47h ; G
.eh_frame:00000000000185C7                 db  0Bh
.eh_frame:00000000000185C8                 db  48h ; H
.eh_frame:00000000000185C9                 db  0Ah
.eh_frame:00000000000185CA                 db  0Eh
.eh_frame:00000000000185CB                 db    8
.eh_frame:00000000000185CC                 db  41h ; A
.eh_frame:00000000000185CD                 db  0Bh
.eh_frame:00000000000185CE                 db    0
.eh_frame:00000000000185CF                 db    0
.eh_frame:00000000000185D0                 db  10h
.eh_frame:00000000000185D1                 db    0
.eh_frame:00000000000185D2                 db    0
.eh_frame:00000000000185D3                 db    0
.eh_frame:00000000000185D4                 db 0C4h
.eh_frame:00000000000185D5                 db  0Ch
.eh_frame:00000000000185D6                 db    0
.eh_frame:00000000000185D7                 db    0
.eh_frame:00000000000185D8                 db  88h
.eh_frame:00000000000185D9                 db 0E8h
.eh_frame:00000000000185DA                 db 0FEh
.eh_frame:00000000000185DB                 db 0FFh
.eh_frame:00000000000185DC                 db  24h ; $
.eh_frame:00000000000185DD                 db    0
.eh_frame:00000000000185DE                 db    0
.eh_frame:00000000000185DF                 db    0
.eh_frame:00000000000185E0                 db    0
.eh_frame:00000000000185E1                 db  5Fh ; _
.eh_frame:00000000000185E2                 db  0Eh
.eh_frame:00000000000185E3                 db  10h
.eh_frame:00000000000185E4                 db  14h
.eh_frame:00000000000185E5                 db    0
.eh_frame:00000000000185E6                 db    0
.eh_frame:00000000000185E7                 db    0
.eh_frame:00000000000185E8                 db 0D8h
.eh_frame:00000000000185E9                 db  0Ch
.eh_frame:00000000000185EA                 db    0
.eh_frame:00000000000185EB                 db    0
.eh_frame:00000000000185EC                 db 0A4h
.eh_frame:00000000000185ED                 db 0E8h
.eh_frame:00000000000185EE                 db 0FEh
.eh_frame:00000000000185EF                 db 0FFh
.eh_frame:00000000000185F0                 db  82h
.eh_frame:00000000000185F1                 db    0
.eh_frame:00000000000185F2                 db    0
.eh_frame:00000000000185F3                 db    0
.eh_frame:00000000000185F4                 db    0
.eh_frame:00000000000185F5                 db    2
.eh_frame:00000000000185F6                 db  5Fh ; _
.eh_frame:00000000000185F7                 db  0Eh
.eh_frame:00000000000185F8                 db  10h
.eh_frame:00000000000185F9                 db  49h ; I
.eh_frame:00000000000185FA                 db  0Eh
.eh_frame:00000000000185FB                 db    8
.eh_frame:00000000000185FC                 db  14h
.eh_frame:00000000000185FD                 db    0
.eh_frame:00000000000185FE                 db    0
.eh_frame:00000000000185FF                 db    0
.eh_frame:0000000000018600                 db 0F0h
.eh_frame:0000000000018601                 db  0Ch
.eh_frame:0000000000018602                 db    0
.eh_frame:0000000000018603                 db    0
.eh_frame:0000000000018604                 db  1Ch
.eh_frame:0000000000018605                 db 0E9h
.eh_frame:0000000000018606                 db 0FEh
.eh_frame:0000000000018607                 db 0FFh
.eh_frame:0000000000018608                 db  4Ah ; J
.eh_frame:0000000000018609                 db    0
.eh_frame:000000000001860A                 db    0
.eh_frame:000000000001860B                 db    0
.eh_frame:000000000001860C                 db    0
.eh_frame:000000000001860D                 db    2
.eh_frame:000000000001860E                 db  45h ; E
.eh_frame:000000000001860F                 db  0Eh
.eh_frame:0000000000018610                 db  10h
.eh_frame:0000000000018611                 db    0
.eh_frame:0000000000018612                 db    0
.eh_frame:0000000000018613                 db    0
.eh_frame:0000000000018614                 db  18h
.eh_frame:0000000000018615                 db    0
.eh_frame:0000000000018616                 db    0
.eh_frame:0000000000018617                 db    0
.eh_frame:0000000000018618                 db    8
.eh_frame:0000000000018619                 db  0Dh
.eh_frame:000000000001861A                 db    0
.eh_frame:000000000001861B                 db    0
.eh_frame:000000000001861C                 db  54h ; T
.eh_frame:000000000001861D                 db 0E9h
.eh_frame:000000000001861E                 db 0FEh
.eh_frame:000000000001861F                 db 0FFh
.eh_frame:0000000000018620                 db  17h
.eh_frame:0000000000018621                 db    0
.eh_frame:0000000000018622                 db    0
.eh_frame:0000000000018623                 db    0
.eh_frame:0000000000018624                 db    0
.eh_frame:0000000000018625                 db  41h ; A
.eh_frame:0000000000018626                 db  0Eh
.eh_frame:0000000000018627                 db  10h
.eh_frame:0000000000018628                 db  83h
.eh_frame:0000000000018629                 db    2
.eh_frame:000000000001862A                 db  51h ; Q
.eh_frame:000000000001862B                 db  0Eh
.eh_frame:000000000001862C                 db    8
.eh_frame:000000000001862D                 db    0
.eh_frame:000000000001862E                 db    0
.eh_frame:000000000001862F                 db    0
.eh_frame:0000000000018630                 db  18h
.eh_frame:0000000000018631                 db    0
.eh_frame:0000000000018632                 db    0
.eh_frame:0000000000018633                 db    0
.eh_frame:0000000000018634                 db  24h ; $
.eh_frame:0000000000018635                 db  0Dh
.eh_frame:0000000000018636                 db    0
.eh_frame:0000000000018637                 db    0
.eh_frame:0000000000018638                 db  58h ; X
.eh_frame:0000000000018639                 db 0E9h
.eh_frame:000000000001863A                 db 0FEh
.eh_frame:000000000001863B                 db 0FFh
.eh_frame:000000000001863C                 db  2Eh ; .
.eh_frame:000000000001863D                 db    0
.eh_frame:000000000001863E                 db    0
.eh_frame:000000000001863F                 db    0
.eh_frame:0000000000018640                 db    0
.eh_frame:0000000000018641                 db  47h ; G
.eh_frame:0000000000018642                 db  0Eh
.eh_frame:0000000000018643                 db  10h
.eh_frame:0000000000018644                 db  61h ; a
.eh_frame:0000000000018645                 db  0Ah
.eh_frame:0000000000018646                 db  0Eh
.eh_frame:0000000000018647                 db    8
.eh_frame:0000000000018648                 db  41h ; A
.eh_frame:0000000000018649                 db  0Bh
.eh_frame:000000000001864A                 db    0
.eh_frame:000000000001864B                 db    0
.eh_frame:000000000001864C                 db  24h ; $
.eh_frame:000000000001864D                 db    0
.eh_frame:000000000001864E                 db    0
.eh_frame:000000000001864F                 db    0
.eh_frame:0000000000018650                 db  40h ; @
.eh_frame:0000000000018651                 db  0Dh
.eh_frame:0000000000018652                 db    0
.eh_frame:0000000000018653                 db    0
.eh_frame:0000000000018654                 db  6Ch ; l
.eh_frame:0000000000018655                 db 0E9h
.eh_frame:0000000000018656                 db 0FEh
.eh_frame:0000000000018657                 db 0FFh
.eh_frame:0000000000018658                 db  28h ; (
.eh_frame:0000000000018659                 db    0
.eh_frame:000000000001865A                 db    0
.eh_frame:000000000001865B                 db    0
.eh_frame:000000000001865C                 db    0
.eh_frame:000000000001865D                 db  41h ; A
.eh_frame:000000000001865E                 db  0Eh
.eh_frame:000000000001865F                 db  10h
.eh_frame:0000000000018660                 db  86h
.eh_frame:0000000000018661                 db    2
.eh_frame:0000000000018662                 db  41h ; A
.eh_frame:0000000000018663                 db  0Eh
.eh_frame:0000000000018664                 db  18h
.eh_frame:0000000000018665                 db  83h
.eh_frame:0000000000018666                 db    3
.eh_frame:0000000000018667                 db  4Dh ; M
.eh_frame:0000000000018668                 db  0Eh
.eh_frame:0000000000018669                 db  20h
.eh_frame:000000000001866A                 db  49h ; I
.eh_frame:000000000001866B                 db  0Eh
.eh_frame:000000000001866C                 db  18h
.eh_frame:000000000001866D                 db  47h ; G
.eh_frame:000000000001866E                 db  0Eh
.eh_frame:000000000001866F                 db  10h
.eh_frame:0000000000018670                 db  41h ; A
.eh_frame:0000000000018671                 db  0Eh
.eh_frame:0000000000018672                 db    8
.eh_frame:0000000000018673                 db    0
.eh_frame:0000000000018674                 db  18h
.eh_frame:0000000000018675                 db    0
.eh_frame:0000000000018676                 db    0
.eh_frame:0000000000018677                 db    0
.eh_frame:0000000000018678                 db  68h ; h
.eh_frame:0000000000018679                 db  0Dh
.eh_frame:000000000001867A                 db    0
.eh_frame:000000000001867B                 db    0
.eh_frame:000000000001867C                 db  74h ; t
.eh_frame:000000000001867D                 db 0E9h
.eh_frame:000000000001867E                 db 0FEh
.eh_frame:000000000001867F                 db 0FFh
.eh_frame:0000000000018680                 db  13h
.eh_frame:0000000000018681                 db    0
.eh_frame:0000000000018682                 db    0
.eh_frame:0000000000018683                 db    0
.eh_frame:0000000000018684                 db    0
.eh_frame:0000000000018685                 db  41h ; A
.eh_frame:0000000000018686                 db  0Eh
.eh_frame:0000000000018687                 db  10h
.eh_frame:0000000000018688                 db  83h
.eh_frame:0000000000018689                 db    2
.eh_frame:000000000001868A                 db  50h ; P
.eh_frame:000000000001868B                 db  0Eh
.eh_frame:000000000001868C                 db    8
.eh_frame:000000000001868D                 db    0
.eh_frame:000000000001868E                 db    0
.eh_frame:000000000001868F                 db    0
.eh_frame:0000000000018690                 db  14h
.eh_frame:0000000000018691                 db    0
.eh_frame:0000000000018692                 db    0
.eh_frame:0000000000018693                 db    0
.eh_frame:0000000000018694                 db  84h
.eh_frame:0000000000018695                 db  0Dh
.eh_frame:0000000000018696                 db    0
.eh_frame:0000000000018697                 db    0
.eh_frame:0000000000018698                 db  78h ; x
.eh_frame:0000000000018699                 db 0E9h
.eh_frame:000000000001869A                 db 0FEh
.eh_frame:000000000001869B                 db 0FFh
.eh_frame:000000000001869C                 db  35h ; 5
.eh_frame:000000000001869D                 db    0
.eh_frame:000000000001869E                 db    0
.eh_frame:000000000001869F                 db    0
.eh_frame:00000000000186A0                 db    0
.eh_frame:00000000000186A1                 db  4Bh ; K
.eh_frame:00000000000186A2                 db  0Eh
.eh_frame:00000000000186A3                 db  10h
.eh_frame:00000000000186A4                 db    0
.eh_frame:00000000000186A5                 db    0
.eh_frame:00000000000186A6                 db    0
.eh_frame:00000000000186A7                 db    0
.eh_frame:00000000000186A8                 db  3Ch ; <
.eh_frame:00000000000186A9                 db    0
.eh_frame:00000000000186AA                 db    0
.eh_frame:00000000000186AB                 db    0
.eh_frame:00000000000186AC                 db  9Ch
.eh_frame:00000000000186AD                 db  0Dh
.eh_frame:00000000000186AE                 db    0
.eh_frame:00000000000186AF                 db    0
.eh_frame:00000000000186B0                 db 0A0h
.eh_frame:00000000000186B1                 db 0E9h
.eh_frame:00000000000186B2                 db 0FEh
.eh_frame:00000000000186B3                 db 0FFh
.eh_frame:00000000000186B4                 db  83h
.eh_frame:00000000000186B5                 db    0
.eh_frame:00000000000186B6                 db    0
.eh_frame:00000000000186B7                 db    0
.eh_frame:00000000000186B8                 db    0
.eh_frame:00000000000186B9                 db  42h ; B
.eh_frame:00000000000186BA                 db  0Eh
.eh_frame:00000000000186BB                 db  10h
.eh_frame:00000000000186BC                 db  8Dh
.eh_frame:00000000000186BD                 db    2
.eh_frame:00000000000186BE                 db  42h ; B
.eh_frame:00000000000186BF                 db  0Eh
.eh_frame:00000000000186C0                 db  18h
.eh_frame:00000000000186C1                 db  8Ch
.eh_frame:00000000000186C2                 db    3
.eh_frame:00000000000186C3                 db  44h ; D
.eh_frame:00000000000186C4                 db  0Eh
.eh_frame:00000000000186C5                 db  20h
.eh_frame:00000000000186C6                 db  86h
.eh_frame:00000000000186C7                 db    4
.eh_frame:00000000000186C8                 db  41h ; A
.eh_frame:00000000000186C9                 db  0Eh
.eh_frame:00000000000186CA                 db  28h ; (
.eh_frame:00000000000186CB                 db  83h
.eh_frame:00000000000186CC                 db    5
.eh_frame:00000000000186CD                 db  4Ah ; J
.eh_frame:00000000000186CE                 db  0Eh
.eh_frame:00000000000186CF                 db  40h ; @
.eh_frame:00000000000186D0                 db    2
.eh_frame:00000000000186D1                 db  64h ; d
.eh_frame:00000000000186D2                 db  0Ah
.eh_frame:00000000000186D3                 db  0Eh
.eh_frame:00000000000186D4                 db  28h ; (
.eh_frame:00000000000186D5                 db  41h ; A
.eh_frame:00000000000186D6                 db  0Eh
.eh_frame:00000000000186D7                 db  20h
.eh_frame:00000000000186D8                 db  41h ; A
.eh_frame:00000000000186D9                 db  0Eh
.eh_frame:00000000000186DA                 db  18h
.eh_frame:00000000000186DB                 db  42h ; B
.eh_frame:00000000000186DC                 db  0Eh
.eh_frame:00000000000186DD                 db  10h
.eh_frame:00000000000186DE                 db  42h ; B
.eh_frame:00000000000186DF                 db  0Eh
.eh_frame:00000000000186E0                 db    8
.eh_frame:00000000000186E1                 db  41h ; A
.eh_frame:00000000000186E2                 db  0Bh
.eh_frame:00000000000186E3                 db    0
.eh_frame:00000000000186E4                 db    0
.eh_frame:00000000000186E5                 db    0
.eh_frame:00000000000186E6                 db    0
.eh_frame:00000000000186E7                 db    0
.eh_frame:00000000000186E8                 db  10h
.eh_frame:00000000000186E9                 db    0
.eh_frame:00000000000186EA                 db    0
.eh_frame:00000000000186EB                 db    0
.eh_frame:00000000000186EC                 db 0DCh
.eh_frame:00000000000186ED                 db  0Dh
.eh_frame:00000000000186EE                 db    0
.eh_frame:00000000000186EF                 db    0
.eh_frame:00000000000186F0                 db 0F0h
.eh_frame:00000000000186F1                 db 0E9h
.eh_frame:00000000000186F2                 db 0FEh
.eh_frame:00000000000186F3                 db 0FFh
.eh_frame:00000000000186F4                 db  2Fh ; /
.eh_frame:00000000000186F5                 db    1
.eh_frame:00000000000186F6                 db    0
.eh_frame:00000000000186F7                 db    0
.eh_frame:00000000000186F8                 db    0
.eh_frame:00000000000186F9                 db    0
.eh_frame:00000000000186FA                 db    0
.eh_frame:00000000000186FB                 db    0
.eh_frame:00000000000186FC                 db  10h
.eh_frame:00000000000186FD                 db    0
.eh_frame:00000000000186FE                 db    0
.eh_frame:00000000000186FF                 db    0
.eh_frame:0000000000018700                 db 0F0h
.eh_frame:0000000000018701                 db  0Dh
.eh_frame:0000000000018702                 db    0
.eh_frame:0000000000018703                 db    0
.eh_frame:0000000000018704                 db  0Ch
.eh_frame:0000000000018705                 db 0EBh
.eh_frame:0000000000018706                 db 0FEh
.eh_frame:0000000000018707                 db 0FFh
.eh_frame:0000000000018708                 db  1Dh
.eh_frame:0000000000018709                 db    0
.eh_frame:000000000001870A                 db    0
.eh_frame:000000000001870B                 db    0
.eh_frame:000000000001870C                 db    0
.eh_frame:000000000001870D                 db    0
.eh_frame:000000000001870E                 db    0
.eh_frame:000000000001870F                 db    0
.eh_frame:0000000000018710                 db  90h
.eh_frame:0000000000018711                 db    0
.eh_frame:0000000000018712                 db    0
.eh_frame:0000000000018713                 db    0
.eh_frame:0000000000018714                 db    4
.eh_frame:0000000000018715                 db  0Eh
.eh_frame:0000000000018716                 db    0
.eh_frame:0000000000018717                 db    0
.eh_frame:0000000000018718                 db  18h
.eh_frame:0000000000018719                 db 0EBh
.eh_frame:000000000001871A                 db 0FEh
.eh_frame:000000000001871B                 db 0FFh
.eh_frame:000000000001871C                 db  2Ch ; ,
.eh_frame:000000000001871D                 db    2
.eh_frame:000000000001871E                 db    0
.eh_frame:000000000001871F                 db    0
.eh_frame:0000000000018720                 db    0
.eh_frame:0000000000018721                 db  42h ; B
.eh_frame:0000000000018722                 db  0Eh
.eh_frame:0000000000018723                 db  10h
.eh_frame:0000000000018724                 db  8Fh
.eh_frame:0000000000018725                 db    2
.eh_frame:0000000000018726                 db  42h ; B
.eh_frame:0000000000018727                 db  0Eh
.eh_frame:0000000000018728                 db  18h
.eh_frame:0000000000018729                 db  8Eh
.eh_frame:000000000001872A                 db    3
.eh_frame:000000000001872B                 db  45h ; E
.eh_frame:000000000001872C                 db  0Eh
.eh_frame:000000000001872D                 db  20h
.eh_frame:000000000001872E                 db  8Dh
.eh_frame:000000000001872F                 db    4
.eh_frame:0000000000018730                 db  42h ; B
.eh_frame:0000000000018731                 db  0Eh
.eh_frame:0000000000018732                 db  28h ; (
.eh_frame:0000000000018733                 db  8Ch
.eh_frame:0000000000018734                 db    5
.eh_frame:0000000000018735                 db  45h ; E
.eh_frame:0000000000018736                 db  0Eh
.eh_frame:0000000000018737                 db  30h ; 0
.eh_frame:0000000000018738                 db  86h
.eh_frame:0000000000018739                 db    6
.eh_frame:000000000001873A                 db  41h ; A
.eh_frame:000000000001873B                 db  0Eh
.eh_frame:000000000001873C                 db  38h ; 8
.eh_frame:000000000001873D                 db  83h
.eh_frame:000000000001873E                 db    7
.eh_frame:000000000001873F                 db  47h ; G
.eh_frame:0000000000018740                 db  0Eh
.eh_frame:0000000000018741                 db  80h
.eh_frame:0000000000018742                 db    1
.eh_frame:0000000000018743                 db    2
.eh_frame:0000000000018744                 db 0BAh
.eh_frame:0000000000018745                 db  0Ah
.eh_frame:0000000000018746                 db  0Eh
.eh_frame:0000000000018747                 db  38h ; 8
.eh_frame:0000000000018748                 db  46h ; F
.eh_frame:0000000000018749                 db  0Eh
.eh_frame:000000000001874A                 db  30h ; 0
.eh_frame:000000000001874B                 db  41h ; A
.eh_frame:000000000001874C                 db  0Eh
.eh_frame:000000000001874D                 db  28h ; (
.eh_frame:000000000001874E                 db  42h ; B
.eh_frame:000000000001874F                 db  0Eh
.eh_frame:0000000000018750                 db  20h
.eh_frame:0000000000018751                 db  42h ; B
.eh_frame:0000000000018752                 db  0Eh
.eh_frame:0000000000018753                 db  18h
.eh_frame:0000000000018754                 db  42h ; B
.eh_frame:0000000000018755                 db  0Eh
.eh_frame:0000000000018756                 db  10h
.eh_frame:0000000000018757                 db  42h ; B
.eh_frame:0000000000018758                 db  0Eh
.eh_frame:0000000000018759                 db    8
.eh_frame:000000000001875A                 db  47h ; G
.eh_frame:000000000001875B                 db  0Bh
.eh_frame:000000000001875C                 db    2
.eh_frame:000000000001875D                 db 0E1h
.eh_frame:000000000001875E                 db  0Ah
.eh_frame:000000000001875F                 db  0Eh
.eh_frame:0000000000018760                 db  38h ; 8
.eh_frame:0000000000018761                 db  44h ; D
.eh_frame:0000000000018762                 db  0Eh
.eh_frame:0000000000018763                 db  30h ; 0
.eh_frame:0000000000018764                 db  43h ; C
.eh_frame:0000000000018765                 db  0Eh
.eh_frame:0000000000018766                 db  28h ; (
.eh_frame:0000000000018767                 db  42h ; B
.eh_frame:0000000000018768                 db  0Eh
.eh_frame:0000000000018769                 db  20h
.eh_frame:000000000001876A                 db  42h ; B
.eh_frame:000000000001876B                 db  0Eh
.eh_frame:000000000001876C                 db  18h
.eh_frame:000000000001876D                 db  42h ; B
.eh_frame:000000000001876E                 db  0Eh
.eh_frame:000000000001876F                 db  10h
.eh_frame:0000000000018770                 db  42h ; B
.eh_frame:0000000000018771                 db  0Eh
.eh_frame:0000000000018772                 db    8
.eh_frame:0000000000018773                 db  48h ; H
.eh_frame:0000000000018774                 db  0Bh
.eh_frame:0000000000018775                 db  59h ; Y
.eh_frame:0000000000018776                 db  0Ah
.eh_frame:0000000000018777                 db  0Eh
.eh_frame:0000000000018778                 db  38h ; 8
.eh_frame:0000000000018779                 db  43h ; C
.eh_frame:000000000001877A                 db  0Eh
.eh_frame:000000000001877B                 db  30h ; 0
.eh_frame:000000000001877C                 db  41h ; A
.eh_frame:000000000001877D                 db  0Eh
.eh_frame:000000000001877E                 db  28h ; (
.eh_frame:000000000001877F                 db  42h ; B
.eh_frame:0000000000018780                 db  0Eh
.eh_frame:0000000000018781                 db  20h
.eh_frame:0000000000018782                 db  42h ; B
.eh_frame:0000000000018783                 db  0Eh
.eh_frame:0000000000018784                 db  18h
.eh_frame:0000000000018785                 db  42h ; B
.eh_frame:0000000000018786                 db  0Eh
.eh_frame:0000000000018787                 db  10h
.eh_frame:0000000000018788                 db  42h ; B
.eh_frame:0000000000018789                 db  0Eh
.eh_frame:000000000001878A                 db    8
.eh_frame:000000000001878B                 db  4Bh ; K
.eh_frame:000000000001878C                 db  0Bh
.eh_frame:000000000001878D                 db  49h ; I
.eh_frame:000000000001878E                 db  0Eh
.eh_frame:000000000001878F                 db  38h ; 8
.eh_frame:0000000000018790                 db  41h ; A
.eh_frame:0000000000018791                 db  0Eh
.eh_frame:0000000000018792                 db  30h ; 0
.eh_frame:0000000000018793                 db  41h ; A
.eh_frame:0000000000018794                 db  0Eh
.eh_frame:0000000000018795                 db  28h ; (
.eh_frame:0000000000018796                 db  48h ; H
.eh_frame:0000000000018797                 db  0Eh
.eh_frame:0000000000018798                 db  20h
.eh_frame:0000000000018799                 db  44h ; D
.eh_frame:000000000001879A                 db  0Eh
.eh_frame:000000000001879B                 db  18h
.eh_frame:000000000001879C                 db  42h ; B
.eh_frame:000000000001879D                 db  0Eh
.eh_frame:000000000001879E                 db  10h
.eh_frame:000000000001879F                 db  42h ; B
.eh_frame:00000000000187A0                 db  0Eh
.eh_frame:00000000000187A1                 db    8
.eh_frame:00000000000187A2                 db    0
.eh_frame:00000000000187A3                 db    0
.eh_frame:00000000000187A4                 db  10h
.eh_frame:00000000000187A5                 db    0
.eh_frame:00000000000187A6                 db    0
.eh_frame:00000000000187A7                 db    0
.eh_frame:00000000000187A8                 db  98h
.eh_frame:00000000000187A9                 db  0Eh
.eh_frame:00000000000187AA                 db    0
.eh_frame:00000000000187AB                 db    0
.eh_frame:00000000000187AC                 db 0B4h
.eh_frame:00000000000187AD                 db 0ECh
.eh_frame:00000000000187AE                 db 0FEh
.eh_frame:00000000000187AF                 db 0FFh
.eh_frame:00000000000187B0                 db  66h ; f
.eh_frame:00000000000187B1                 db    0
.eh_frame:00000000000187B2                 db    0
.eh_frame:00000000000187B3                 db    0
.eh_frame:00000000000187B4                 db    0
.eh_frame:00000000000187B5                 db    0
.eh_frame:00000000000187B6                 db    0
.eh_frame:00000000000187B7                 db    0
.eh_frame:00000000000187B8                 db  28h ; (
.eh_frame:00000000000187B9                 db    0
.eh_frame:00000000000187BA                 db    0
.eh_frame:00000000000187BB                 db    0
.eh_frame:00000000000187BC                 db 0ACh
.eh_frame:00000000000187BD                 db  0Eh
.eh_frame:00000000000187BE                 db    0
.eh_frame:00000000000187BF                 db    0
.eh_frame:00000000000187C0                 db  10h
.eh_frame:00000000000187C1                 db 0EDh
.eh_frame:00000000000187C2                 db 0FEh
.eh_frame:00000000000187C3                 db 0FFh
.eh_frame:00000000000187C4                 db  6Bh ; k
.eh_frame:00000000000187C5                 db    0
.eh_frame:00000000000187C6                 db    0
.eh_frame:00000000000187C7                 db    0
.eh_frame:00000000000187C8                 db    0
.eh_frame:00000000000187C9                 db  42h ; B
.eh_frame:00000000000187CA                 db  0Eh
.eh_frame:00000000000187CB                 db  10h
.eh_frame:00000000000187CC                 db  8Ch
.eh_frame:00000000000187CD                 db    2
.eh_frame:00000000000187CE                 db  44h ; D
.eh_frame:00000000000187CF                 db  0Eh
.eh_frame:00000000000187D0                 db  18h
.eh_frame:00000000000187D1                 db  86h
.eh_frame:00000000000187D2                 db    3
.eh_frame:00000000000187D3                 db  44h ; D
.eh_frame:00000000000187D4                 db  0Eh
.eh_frame:00000000000187D5                 db  20h
.eh_frame:00000000000187D6                 db  83h
.eh_frame:00000000000187D7                 db    4
.eh_frame:00000000000187D8                 db    2
.eh_frame:00000000000187D9                 db  5Dh ; ]
.eh_frame:00000000000187DA                 db  0Eh
.eh_frame:00000000000187DB                 db  18h
.eh_frame:00000000000187DC                 db  41h ; A
.eh_frame:00000000000187DD                 db  0Eh
.eh_frame:00000000000187DE                 db  10h
.eh_frame:00000000000187DF                 db  42h ; B
.eh_frame:00000000000187E0                 db  0Eh
.eh_frame:00000000000187E1                 db    8
.eh_frame:00000000000187E2                 db    0
.eh_frame:00000000000187E3                 db    0
.eh_frame:00000000000187E4                 db  28h ; (
.eh_frame:00000000000187E5                 db    0
.eh_frame:00000000000187E6                 db    0
.eh_frame:00000000000187E7                 db    0
.eh_frame:00000000000187E8                 db 0D8h
.eh_frame:00000000000187E9                 db  0Eh
.eh_frame:00000000000187EA                 db    0
.eh_frame:00000000000187EB                 db    0
.eh_frame:00000000000187EC                 db  54h ; T
.eh_frame:00000000000187ED                 db 0EDh
.eh_frame:00000000000187EE                 db 0FEh
.eh_frame:00000000000187EF                 db 0FFh
.eh_frame:00000000000187F0                 db  51h ; Q
.eh_frame:00000000000187F1                 db    0
.eh_frame:00000000000187F2                 db    0
.eh_frame:00000000000187F3                 db    0
.eh_frame:00000000000187F4                 db    0
.eh_frame:00000000000187F5                 db  42h ; B
.eh_frame:00000000000187F6                 db  0Eh
.eh_frame:00000000000187F7                 db  10h
.eh_frame:00000000000187F8                 db  8Ch
.eh_frame:00000000000187F9                 db    2
.eh_frame:00000000000187FA                 db  44h ; D
.eh_frame:00000000000187FB                 db  0Eh
.eh_frame:00000000000187FC                 db  18h
.eh_frame:00000000000187FD                 db  86h
.eh_frame:00000000000187FE                 db    3
.eh_frame:00000000000187FF                 db  44h ; D
.eh_frame:0000000000018800                 db  0Eh
.eh_frame:0000000000018801                 db  20h
.eh_frame:0000000000018802                 db  83h
.eh_frame:0000000000018803                 db    4
.eh_frame:0000000000018804                 db    2
.eh_frame:0000000000018805                 db  43h ; C
.eh_frame:0000000000018806                 db  0Eh
.eh_frame:0000000000018807                 db  18h
.eh_frame:0000000000018808                 db  41h ; A
.eh_frame:0000000000018809                 db  0Eh
.eh_frame:000000000001880A                 db  10h
.eh_frame:000000000001880B                 db  42h ; B
.eh_frame:000000000001880C                 db  0Eh
.eh_frame:000000000001880D                 db    8
.eh_frame:000000000001880E                 db    0
.eh_frame:000000000001880F                 db    0
.eh_frame:0000000000018810                 db  30h ; 0
.eh_frame:0000000000018811                 db    0
.eh_frame:0000000000018812                 db    0
.eh_frame:0000000000018813                 db    0
.eh_frame:0000000000018814                 db    4
.eh_frame:0000000000018815                 db  0Fh
.eh_frame:0000000000018816                 db    0
.eh_frame:0000000000018817                 db    0
.eh_frame:0000000000018818                 db  88h
.eh_frame:0000000000018819                 db 0EDh
.eh_frame:000000000001881A                 db 0FEh
.eh_frame:000000000001881B                 db 0FFh
.eh_frame:000000000001881C                 db  9Ch
.eh_frame:000000000001881D                 db    0
.eh_frame:000000000001881E                 db    0
.eh_frame:000000000001881F                 db    0
.eh_frame:0000000000018820                 db    0
.eh_frame:0000000000018821                 db  41h ; A
.eh_frame:0000000000018822                 db  0Eh
.eh_frame:0000000000018823                 db  10h
.eh_frame:0000000000018824                 db  86h
.eh_frame:0000000000018825                 db    2
.eh_frame:0000000000018826                 db  41h ; A
.eh_frame:0000000000018827                 db  0Eh
.eh_frame:0000000000018828                 db  18h
.eh_frame:0000000000018829                 db  83h
.eh_frame:000000000001882A                 db    3
.eh_frame:000000000001882B                 db  4Ah ; J
.eh_frame:000000000001882C                 db  0Eh
.eh_frame:000000000001882D                 db  20h
.eh_frame:000000000001882E                 db    2
.eh_frame:000000000001882F                 db  62h ; b
.eh_frame:0000000000018830                 db  0Ah
.eh_frame:0000000000018831                 db  0Eh
.eh_frame:0000000000018832                 db  18h
.eh_frame:0000000000018833                 db  43h ; C
.eh_frame:0000000000018834                 db  0Eh
.eh_frame:0000000000018835                 db  10h
.eh_frame:0000000000018836                 db  41h ; A
.eh_frame:0000000000018837                 db  0Eh
.eh_frame:0000000000018838                 db    8
.eh_frame:0000000000018839                 db  46h ; F
.eh_frame:000000000001883A                 db  0Bh
.eh_frame:000000000001883B                 db  5Ch ; \
.eh_frame:000000000001883C                 db  0Eh
.eh_frame:000000000001883D                 db  18h
.eh_frame:000000000001883E                 db  46h ; F
.eh_frame:000000000001883F                 db  0Eh
.eh_frame:0000000000018840                 db  10h
.eh_frame:0000000000018841                 db  41h ; A
.eh_frame:0000000000018842                 db  0Eh
.eh_frame:0000000000018843                 db    8
.eh_frame:0000000000018844                 db  28h ; (
.eh_frame:0000000000018845                 db    0
.eh_frame:0000000000018846                 db    0
.eh_frame:0000000000018847                 db    0
.eh_frame:0000000000018848                 db  38h ; 8
.eh_frame:0000000000018849                 db  0Fh
.eh_frame:000000000001884A                 db    0
.eh_frame:000000000001884B                 db    0
.eh_frame:000000000001884C                 db 0F4h
.eh_frame:000000000001884D                 db 0EDh
.eh_frame:000000000001884E                 db 0FEh
.eh_frame:000000000001884F                 db 0FFh
.eh_frame:0000000000018850                 db  64h ; d
.eh_frame:0000000000018851                 db    0
.eh_frame:0000000000018852                 db    0
.eh_frame:0000000000018853                 db    0
.eh_frame:0000000000018854                 db    0
.eh_frame:0000000000018855                 db  41h ; A
.eh_frame:0000000000018856                 db  0Eh
.eh_frame:0000000000018857                 db  10h
.eh_frame:0000000000018858                 db  86h
.eh_frame:0000000000018859                 db    2
.eh_frame:000000000001885A                 db  41h ; A
.eh_frame:000000000001885B                 db  0Eh
.eh_frame:000000000001885C                 db  18h
.eh_frame:000000000001885D                 db  83h
.eh_frame:000000000001885E                 db    3
.eh_frame:000000000001885F                 db  4Ah ; J
.eh_frame:0000000000018860                 db  0Eh
.eh_frame:0000000000018861                 db  20h
.eh_frame:0000000000018862                 db  62h ; b
.eh_frame:0000000000018863                 db  0Ah
.eh_frame:0000000000018864                 db  0Eh
.eh_frame:0000000000018865                 db  18h
.eh_frame:0000000000018866                 db  41h ; A
.eh_frame:0000000000018867                 db  0Eh
.eh_frame:0000000000018868                 db  10h
.eh_frame:0000000000018869                 db  41h ; A
.eh_frame:000000000001886A                 db  0Eh
.eh_frame:000000000001886B                 db    8
.eh_frame:000000000001886C                 db  48h ; H
.eh_frame:000000000001886D                 db  0Bh
.eh_frame:000000000001886E                 db    0
.eh_frame:000000000001886F                 db    0
.eh_frame:0000000000018870                 db  34h ; 4
.eh_frame:0000000000018871                 db    0
.eh_frame:0000000000018872                 db    0
.eh_frame:0000000000018873                 db    0
.eh_frame:0000000000018874                 db  64h ; d
.eh_frame:0000000000018875                 db  0Fh
.eh_frame:0000000000018876                 db    0
.eh_frame:0000000000018877                 db    0
.eh_frame:0000000000018878                 db  38h ; 8
.eh_frame:0000000000018879                 db 0EEh
.eh_frame:000000000001887A                 db 0FEh
.eh_frame:000000000001887B                 db 0FFh
.eh_frame:000000000001887C                 db  2Ch ; ,
.eh_frame:000000000001887D                 db    1
.eh_frame:000000000001887E                 db    0
.eh_frame:000000000001887F                 db    0
.eh_frame:0000000000018880                 db    0
.eh_frame:0000000000018881                 db  41h ; A
.eh_frame:0000000000018882                 db  0Eh
.eh_frame:0000000000018883                 db  10h
.eh_frame:0000000000018884                 db  86h
.eh_frame:0000000000018885                 db    2
.eh_frame:0000000000018886                 db  41h ; A
.eh_frame:0000000000018887                 db  0Eh
.eh_frame:0000000000018888                 db  18h
.eh_frame:0000000000018889                 db  83h
.eh_frame:000000000001888A                 db    3
.eh_frame:000000000001888B                 db  4Ah ; J
.eh_frame:000000000001888C                 db  0Eh
.eh_frame:000000000001888D                 db  20h
.eh_frame:000000000001888E                 db  66h ; f
.eh_frame:000000000001888F                 db  0Ah
.eh_frame:0000000000018890                 db  0Eh
.eh_frame:0000000000018891                 db  18h
.eh_frame:0000000000018892                 db  41h ; A
.eh_frame:0000000000018893                 db  0Eh
.eh_frame:0000000000018894                 db  10h
.eh_frame:0000000000018895                 db  41h ; A
.eh_frame:0000000000018896                 db  0Eh
.eh_frame:0000000000018897                 db    8
.eh_frame:0000000000018898                 db  44h ; D
.eh_frame:0000000000018899                 db  0Bh
.eh_frame:000000000001889A                 db  6Dh ; m
.eh_frame:000000000001889B                 db  0Ah
.eh_frame:000000000001889C                 db  0Eh
.eh_frame:000000000001889D                 db  18h
.eh_frame:000000000001889E                 db  46h ; F
.eh_frame:000000000001889F                 db  0Eh
.eh_frame:00000000000188A0                 db  10h
.eh_frame:00000000000188A1                 db  41h ; A
.eh_frame:00000000000188A2                 db  0Eh
.eh_frame:00000000000188A3                 db    8
.eh_frame:00000000000188A4                 db  44h ; D
.eh_frame:00000000000188A5                 db  0Bh
.eh_frame:00000000000188A6                 db    0
.eh_frame:00000000000188A7                 db    0
.eh_frame:00000000000188A8                 db  4Ch ; L
.eh_frame:00000000000188A9                 db    0
.eh_frame:00000000000188AA                 db    0
.eh_frame:00000000000188AB                 db    0
.eh_frame:00000000000188AC                 db  9Ch
.eh_frame:00000000000188AD                 db  0Fh
.eh_frame:00000000000188AE                 db    0
.eh_frame:00000000000188AF                 db    0
.eh_frame:00000000000188B0                 db  30h ; 0
.eh_frame:00000000000188B1                 db 0EFh
.eh_frame:00000000000188B2                 db 0FEh
.eh_frame:00000000000188B3                 db 0FFh
.eh_frame:00000000000188B4                 db 0ECh
.eh_frame:00000000000188B5                 db    0
.eh_frame:00000000000188B6                 db    0
.eh_frame:00000000000188B7                 db    0
.eh_frame:00000000000188B8                 db    0
.eh_frame:00000000000188B9                 db  42h ; B
.eh_frame:00000000000188BA                 db  0Eh
.eh_frame:00000000000188BB                 db  10h
.eh_frame:00000000000188BC                 db  8Eh
.eh_frame:00000000000188BD                 db    2
.eh_frame:00000000000188BE                 db  42h ; B
.eh_frame:00000000000188BF                 db  0Eh
.eh_frame:00000000000188C0                 db  18h
.eh_frame:00000000000188C1                 db  8Dh
.eh_frame:00000000000188C2                 db    3
.eh_frame:00000000000188C3                 db  45h ; E
.eh_frame:00000000000188C4                 db  0Eh
.eh_frame:00000000000188C5                 db  20h
.eh_frame:00000000000188C6                 db  8Ch
.eh_frame:00000000000188C7                 db    4
.eh_frame:00000000000188C8                 db  41h ; A
.eh_frame:00000000000188C9                 db  0Eh
.eh_frame:00000000000188CA                 db  28h ; (
.eh_frame:00000000000188CB                 db  86h
.eh_frame:00000000000188CC                 db    5
.eh_frame:00000000000188CD                 db  44h ; D
.eh_frame:00000000000188CE                 db  0Eh
.eh_frame:00000000000188CF                 db  30h ; 0
.eh_frame:00000000000188D0                 db  83h
.eh_frame:00000000000188D1                 db    6
.eh_frame:00000000000188D2                 db    2
.eh_frame:00000000000188D3                 db  71h ; q
.eh_frame:00000000000188D4                 db  0Ah
.eh_frame:00000000000188D5                 db  0Eh
.eh_frame:00000000000188D6                 db  28h ; (
.eh_frame:00000000000188D7                 db  46h ; F
.eh_frame:00000000000188D8                 db  0Eh
.eh_frame:00000000000188D9                 db  20h
.eh_frame:00000000000188DA                 db  42h ; B
.eh_frame:00000000000188DB                 db  0Eh
.eh_frame:00000000000188DC                 db  18h
.eh_frame:00000000000188DD                 db  42h ; B
.eh_frame:00000000000188DE                 db  0Eh
.eh_frame:00000000000188DF                 db  10h
.eh_frame:00000000000188E0                 db  42h ; B
.eh_frame:00000000000188E1                 db  0Eh
.eh_frame:00000000000188E2                 db    8
.eh_frame:00000000000188E3                 db  45h ; E
.eh_frame:00000000000188E4                 db  0Bh
.eh_frame:00000000000188E5                 db  6Eh ; n
.eh_frame:00000000000188E6                 db  0Ah
.eh_frame:00000000000188E7                 db  0Eh
.eh_frame:00000000000188E8                 db  28h ; (
.eh_frame:00000000000188E9                 db  41h ; A
.eh_frame:00000000000188EA                 db  0Eh
.eh_frame:00000000000188EB                 db  20h
.eh_frame:00000000000188EC                 db  42h ; B
.eh_frame:00000000000188ED                 db  0Eh
.eh_frame:00000000000188EE                 db  18h
.eh_frame:00000000000188EF                 db  42h ; B
.eh_frame:00000000000188F0                 db  0Eh
.eh_frame:00000000000188F1                 db  10h
.eh_frame:00000000000188F2                 db  42h ; B
.eh_frame:00000000000188F3                 db  0Eh
.eh_frame:00000000000188F4                 db    8
.eh_frame:00000000000188F5                 db  41h ; A
.eh_frame:00000000000188F6                 db  0Bh
.eh_frame:00000000000188F7                 db    0
.eh_frame:00000000000188F8                 db  2Ch ; ,
.eh_frame:00000000000188F9                 db    0
.eh_frame:00000000000188FA                 db    0
.eh_frame:00000000000188FB                 db    0
.eh_frame:00000000000188FC                 db 0ECh
.eh_frame:00000000000188FD                 db  0Fh
.eh_frame:00000000000188FE                 db    0
.eh_frame:00000000000188FF                 db    0
.eh_frame:0000000000018900                 db 0D0h
.eh_frame:0000000000018901                 db 0EFh
.eh_frame:0000000000018902                 db 0FEh
.eh_frame:0000000000018903                 db 0FFh
.eh_frame:0000000000018904                 db  6Eh ; n
.eh_frame:0000000000018905                 db    0
.eh_frame:0000000000018906                 db    0
.eh_frame:0000000000018907                 db    0
.eh_frame:0000000000018908                 db    0
.eh_frame:0000000000018909                 db  42h ; B
.eh_frame:000000000001890A                 db  0Eh
.eh_frame:000000000001890B                 db  10h
.eh_frame:000000000001890C                 db  8Ch
.eh_frame:000000000001890D                 db    2
.eh_frame:000000000001890E                 db  49h ; I
.eh_frame:000000000001890F                 db  0Eh
.eh_frame:0000000000018910                 db  18h
.eh_frame:0000000000018911                 db  86h
.eh_frame:0000000000018912                 db    3
.eh_frame:0000000000018913                 db  49h ; I
.eh_frame:0000000000018914                 db  0Eh
.eh_frame:0000000000018915                 db  20h
.eh_frame:0000000000018916                 db  83h
.eh_frame:0000000000018917                 db    4
.eh_frame:0000000000018918                 db    2
.eh_frame:0000000000018919                 db  4Ah ; J
.eh_frame:000000000001891A                 db  0Ah
.eh_frame:000000000001891B                 db  0Eh
.eh_frame:000000000001891C                 db  18h
.eh_frame:000000000001891D                 db  41h ; A
.eh_frame:000000000001891E                 db  0Eh
.eh_frame:000000000001891F                 db  10h
.eh_frame:0000000000018920                 db  42h ; B
.eh_frame:0000000000018921                 db  0Eh
.eh_frame:0000000000018922                 db    8
.eh_frame:0000000000018923                 db  47h ; G
.eh_frame:0000000000018924                 db  0Bh
.eh_frame:0000000000018925                 db    0
.eh_frame:0000000000018926                 db    0
.eh_frame:0000000000018927                 db    0
.eh_frame:0000000000018928                 db  48h ; H
.eh_frame:0000000000018929                 db    0
.eh_frame:000000000001892A                 db    0
.eh_frame:000000000001892B                 db    0
.eh_frame:000000000001892C                 db  1Ch
.eh_frame:000000000001892D                 db  10h
.eh_frame:000000000001892E                 db    0
.eh_frame:000000000001892F                 db    0
.eh_frame:0000000000018930                 db  10h
.eh_frame:0000000000018931                 db 0F0h
.eh_frame:0000000000018932                 db 0FEh
.eh_frame:0000000000018933                 db 0FFh
.eh_frame:0000000000018934                 db 0C3h
.eh_frame:0000000000018935                 db    1
.eh_frame:0000000000018936                 db    0
.eh_frame:0000000000018937                 db    0
.eh_frame:0000000000018938                 db    0
.eh_frame:0000000000018939                 db  42h ; B
.eh_frame:000000000001893A                 db  0Eh
.eh_frame:000000000001893B                 db  10h
.eh_frame:000000000001893C                 db  8Fh
.eh_frame:000000000001893D                 db    2
.eh_frame:000000000001893E                 db  42h ; B
.eh_frame:000000000001893F                 db  0Eh
.eh_frame:0000000000018940                 db  18h
.eh_frame:0000000000018941                 db  8Eh
.eh_frame:0000000000018942                 db    3
.eh_frame:0000000000018943                 db  42h ; B
.eh_frame:0000000000018944                 db  0Eh
.eh_frame:0000000000018945                 db  20h
.eh_frame:0000000000018946                 db  8Dh
.eh_frame:0000000000018947                 db    4
.eh_frame:0000000000018948                 db  42h ; B
.eh_frame:0000000000018949                 db  0Eh
.eh_frame:000000000001894A                 db  28h ; (
.eh_frame:000000000001894B                 db  8Ch
.eh_frame:000000000001894C                 db    5
.eh_frame:000000000001894D                 db  41h ; A
.eh_frame:000000000001894E                 db  0Eh
.eh_frame:000000000001894F                 db  30h ; 0
.eh_frame:0000000000018950                 db  86h
.eh_frame:0000000000018951                 db    6
.eh_frame:0000000000018952                 db  41h ; A
.eh_frame:0000000000018953                 db  0Eh
.eh_frame:0000000000018954                 db  38h ; 8
.eh_frame:0000000000018955                 db  83h
.eh_frame:0000000000018956                 db    7
.eh_frame:0000000000018957                 db  47h ; G
.eh_frame:0000000000018958                 db  0Eh
.eh_frame:0000000000018959                 db 0A0h
.eh_frame:000000000001895A                 db    1
.eh_frame:000000000001895B                 db    2
.eh_frame:000000000001895C                 db 0D3h
.eh_frame:000000000001895D                 db  0Ah
.eh_frame:000000000001895E                 db  0Eh
.eh_frame:000000000001895F                 db  38h ; 8
.eh_frame:0000000000018960                 db  41h ; A
.eh_frame:0000000000018961                 db  0Eh
.eh_frame:0000000000018962                 db  30h ; 0
.eh_frame:0000000000018963                 db  41h ; A
.eh_frame:0000000000018964                 db  0Eh
.eh_frame:0000000000018965                 db  28h ; (
.eh_frame:0000000000018966                 db  42h ; B
.eh_frame:0000000000018967                 db  0Eh
.eh_frame:0000000000018968                 db  20h
.eh_frame:0000000000018969                 db  42h ; B
.eh_frame:000000000001896A                 db  0Eh
.eh_frame:000000000001896B                 db  18h
.eh_frame:000000000001896C                 db  42h ; B
.eh_frame:000000000001896D                 db  0Eh
.eh_frame:000000000001896E                 db  10h
.eh_frame:000000000001896F                 db  42h ; B
.eh_frame:0000000000018970                 db  0Eh
.eh_frame:0000000000018971                 db    8
.eh_frame:0000000000018972                 db  42h ; B
.eh_frame:0000000000018973                 db  0Bh
.eh_frame:0000000000018974                 db  48h ; H
.eh_frame:0000000000018975                 db    0
.eh_frame:0000000000018976                 db    0
.eh_frame:0000000000018977                 db    0
.eh_frame:0000000000018978                 db  68h ; h
.eh_frame:0000000000018979                 db  10h
.eh_frame:000000000001897A                 db    0
.eh_frame:000000000001897B                 db    0
.eh_frame:000000000001897C                 db  94h
.eh_frame:000000000001897D                 db 0F1h
.eh_frame:000000000001897E                 db 0FEh
.eh_frame:000000000001897F                 db 0FFh
.eh_frame:0000000000018980                 db  15h
.eh_frame:0000000000018981                 db    6
.eh_frame:0000000000018982                 db    0
.eh_frame:0000000000018983                 db    0
.eh_frame:0000000000018984                 db    0
.eh_frame:0000000000018985                 db  42h ; B
.eh_frame:0000000000018986                 db  0Eh
.eh_frame:0000000000018987                 db  10h
.eh_frame:0000000000018988                 db  8Fh
.eh_frame:0000000000018989                 db    2
.eh_frame:000000000001898A                 db  42h ; B
.eh_frame:000000000001898B                 db  0Eh
.eh_frame:000000000001898C                 db  18h
.eh_frame:000000000001898D                 db  8Eh
.eh_frame:000000000001898E                 db    3
.eh_frame:000000000001898F                 db  45h ; E
.eh_frame:0000000000018990                 db  0Eh
.eh_frame:0000000000018991                 db  20h
.eh_frame:0000000000018992                 db  8Dh
.eh_frame:0000000000018993                 db    4
.eh_frame:0000000000018994                 db  42h ; B
.eh_frame:0000000000018995                 db  0Eh
.eh_frame:0000000000018996                 db  28h ; (
.eh_frame:0000000000018997                 db  8Ch
.eh_frame:0000000000018998                 db    5
.eh_frame:0000000000018999                 db  41h ; A
.eh_frame:000000000001899A                 db  0Eh
.eh_frame:000000000001899B                 db  30h ; 0
.eh_frame:000000000001899C                 db  86h
.eh_frame:000000000001899D                 db    6
.eh_frame:000000000001899E                 db  41h ; A
.eh_frame:000000000001899F                 db  0Eh
.eh_frame:00000000000189A0                 db  38h ; 8
.eh_frame:00000000000189A1                 db  83h
.eh_frame:00000000000189A2                 db    7
.eh_frame:00000000000189A3                 db  47h ; G
.eh_frame:00000000000189A4                 db  0Eh
.eh_frame:00000000000189A5                 db 0E0h
.eh_frame:00000000000189A6                 db    1
.eh_frame:00000000000189A7                 db    2
.eh_frame:00000000000189A8                 db  69h ; i
.eh_frame:00000000000189A9                 db  0Ah
.eh_frame:00000000000189AA                 db  0Eh
.eh_frame:00000000000189AB                 db  38h ; 8
.eh_frame:00000000000189AC                 db  41h ; A
.eh_frame:00000000000189AD                 db  0Eh
.eh_frame:00000000000189AE                 db  30h ; 0
.eh_frame:00000000000189AF                 db  41h ; A
.eh_frame:00000000000189B0                 db  0Eh
.eh_frame:00000000000189B1                 db  28h ; (
.eh_frame:00000000000189B2                 db  42h ; B
.eh_frame:00000000000189B3                 db  0Eh
.eh_frame:00000000000189B4                 db  20h
.eh_frame:00000000000189B5                 db  42h ; B
.eh_frame:00000000000189B6                 db  0Eh
.eh_frame:00000000000189B7                 db  18h
.eh_frame:00000000000189B8                 db  42h ; B
.eh_frame:00000000000189B9                 db  0Eh
.eh_frame:00000000000189BA                 db  10h
.eh_frame:00000000000189BB                 db  42h ; B
.eh_frame:00000000000189BC                 db  0Eh
.eh_frame:00000000000189BD                 db    8
.eh_frame:00000000000189BE                 db  49h ; I
.eh_frame:00000000000189BF                 db  0Bh
.eh_frame:00000000000189C0                 db  58h ; X
.eh_frame:00000000000189C1                 db    0
.eh_frame:00000000000189C2                 db    0
.eh_frame:00000000000189C3                 db    0
.eh_frame:00000000000189C4                 db 0B4h
.eh_frame:00000000000189C5                 db  10h
.eh_frame:00000000000189C6                 db    0
.eh_frame:00000000000189C7                 db    0
.eh_frame:00000000000189C8                 db  68h ; h
.eh_frame:00000000000189C9                 db 0F7h
.eh_frame:00000000000189CA                 db 0FEh
.eh_frame:00000000000189CB                 db 0FFh
.eh_frame:00000000000189CC                 db  4Eh ; N
.eh_frame:00000000000189CD                 db    1
.eh_frame:00000000000189CE                 db    0
.eh_frame:00000000000189CF                 db    0
.eh_frame:00000000000189D0                 db    0
.eh_frame:00000000000189D1                 db  41h ; A
.eh_frame:00000000000189D2                 db  0Eh
.eh_frame:00000000000189D3                 db  10h
.eh_frame:00000000000189D4                 db  86h
.eh_frame:00000000000189D5                 db    2
.eh_frame:00000000000189D6                 db  41h ; A
.eh_frame:00000000000189D7                 db  0Eh
.eh_frame:00000000000189D8                 db  18h
.eh_frame:00000000000189D9                 db  83h
.eh_frame:00000000000189DA                 db    3
.eh_frame:00000000000189DB                 db  4Eh ; N
.eh_frame:00000000000189DC                 db  0Eh
.eh_frame:00000000000189DD                 db  20h
.eh_frame:00000000000189DE                 db    2
.eh_frame:00000000000189DF                 db  83h
.eh_frame:00000000000189E0                 db  0Ah
.eh_frame:00000000000189E1                 db  0Eh
.eh_frame:00000000000189E2                 db  18h
.eh_frame:00000000000189E3                 db  41h ; A
.eh_frame:00000000000189E4                 db  0Eh
.eh_frame:00000000000189E5                 db  10h
.eh_frame:00000000000189E6                 db  41h ; A
.eh_frame:00000000000189E7                 db  0Eh
.eh_frame:00000000000189E8                 db    8
.eh_frame:00000000000189E9                 db  4Bh ; K
.eh_frame:00000000000189EA                 db  0Bh
.eh_frame:00000000000189EB                 db    2
.eh_frame:00000000000189EC                 db  61h ; a
.eh_frame:00000000000189ED                 db  0Ah
.eh_frame:00000000000189EE                 db  0Eh
.eh_frame:00000000000189EF                 db  18h
.eh_frame:00000000000189F0                 db  43h ; C
.eh_frame:00000000000189F1                 db  0Eh
.eh_frame:00000000000189F2                 db  10h
.eh_frame:00000000000189F3                 db  41h ; A
.eh_frame:00000000000189F4                 db  0Eh
.eh_frame:00000000000189F5                 db    8
.eh_frame:00000000000189F6                 db  4Bh ; K
.eh_frame:00000000000189F7                 db  0Bh
.eh_frame:00000000000189F8                 db  4Ch ; L
.eh_frame:00000000000189F9                 db  0Ah
.eh_frame:00000000000189FA                 db  0Eh
.eh_frame:00000000000189FB                 db  18h
.eh_frame:00000000000189FC                 db  43h ; C
.eh_frame:00000000000189FD                 db  0Eh
.eh_frame:00000000000189FE                 db  10h
.eh_frame:00000000000189FF                 db  41h ; A
.eh_frame:0000000000018A00                 db  0Eh
.eh_frame:0000000000018A01                 db    8
.eh_frame:0000000000018A02                 db  48h ; H
.eh_frame:0000000000018A03                 db  0Bh
.eh_frame:0000000000018A04                 db  49h ; I
.eh_frame:0000000000018A05                 db  0Ah
.eh_frame:0000000000018A06                 db  0Eh
.eh_frame:0000000000018A07                 db  18h
.eh_frame:0000000000018A08                 db  43h ; C
.eh_frame:0000000000018A09                 db  0Eh
.eh_frame:0000000000018A0A                 db  10h
.eh_frame:0000000000018A0B                 db  41h ; A
.eh_frame:0000000000018A0C                 db  0Eh
.eh_frame:0000000000018A0D                 db    8
.eh_frame:0000000000018A0E                 db  4Bh ; K
.eh_frame:0000000000018A0F                 db  0Bh
.eh_frame:0000000000018A10                 db  49h ; I
.eh_frame:0000000000018A11                 db  0Eh
.eh_frame:0000000000018A12                 db  18h
.eh_frame:0000000000018A13                 db  43h ; C
.eh_frame:0000000000018A14                 db  0Eh
.eh_frame:0000000000018A15                 db  10h
.eh_frame:0000000000018A16                 db  41h ; A
.eh_frame:0000000000018A17                 db  0Eh
.eh_frame:0000000000018A18                 db    8
.eh_frame:0000000000018A19                 db    0
.eh_frame:0000000000018A1A                 db    0
.eh_frame:0000000000018A1B                 db    0
.eh_frame:0000000000018A1C                 db  28h ; (
.eh_frame:0000000000018A1D                 db    0
.eh_frame:0000000000018A1E                 db    0
.eh_frame:0000000000018A1F                 db    0
.eh_frame:0000000000018A20                 db  10h
.eh_frame:0000000000018A21                 db  11h
.eh_frame:0000000000018A22                 db    0
.eh_frame:0000000000018A23                 db    0
.eh_frame:0000000000018A24                 db  5Ch ; \
.eh_frame:0000000000018A25                 db 0F8h
.eh_frame:0000000000018A26                 db 0FEh
.eh_frame:0000000000018A27                 db 0FFh
.eh_frame:0000000000018A28                 db  86h
.eh_frame:0000000000018A29                 db    0
.eh_frame:0000000000018A2A                 db    0
.eh_frame:0000000000018A2B                 db    0
.eh_frame:0000000000018A2C                 db    0
.eh_frame:0000000000018A2D                 db  42h ; B
.eh_frame:0000000000018A2E                 db  0Eh
.eh_frame:0000000000018A2F                 db  10h
.eh_frame:0000000000018A30                 db  8Ch
.eh_frame:0000000000018A31                 db    2
.eh_frame:0000000000018A32                 db  41h ; A
.eh_frame:0000000000018A33                 db  0Eh
.eh_frame:0000000000018A34                 db  18h
.eh_frame:0000000000018A35                 db  86h
.eh_frame:0000000000018A36                 db    3
.eh_frame:0000000000018A37                 db  44h ; D
.eh_frame:0000000000018A38                 db  0Eh
.eh_frame:0000000000018A39                 db  20h
.eh_frame:0000000000018A3A                 db  83h
.eh_frame:0000000000018A3B                 db    4
.eh_frame:0000000000018A3C                 db  70h ; p
.eh_frame:0000000000018A3D                 db  0Ah
.eh_frame:0000000000018A3E                 db  0Eh
.eh_frame:0000000000018A3F                 db  18h
.eh_frame:0000000000018A40                 db  41h ; A
.eh_frame:0000000000018A41                 db  0Eh
.eh_frame:0000000000018A42                 db  10h
.eh_frame:0000000000018A43                 db  42h ; B
.eh_frame:0000000000018A44                 db  0Eh
.eh_frame:0000000000018A45                 db    8
.eh_frame:0000000000018A46                 db  46h ; F
.eh_frame:0000000000018A47                 db  0Bh
.eh_frame:0000000000018A48                 db  18h
.eh_frame:0000000000018A49                 db    0
.eh_frame:0000000000018A4A                 db    0
.eh_frame:0000000000018A4B                 db    0
.eh_frame:0000000000018A4C                 db  3Ch ; <
.eh_frame:0000000000018A4D                 db  11h
.eh_frame:0000000000018A4E                 db    0
.eh_frame:0000000000018A4F                 db    0
.eh_frame:0000000000018A50                 db 0C0h
.eh_frame:0000000000018A51                 db 0F8h
.eh_frame:0000000000018A52                 db 0FEh
.eh_frame:0000000000018A53                 db 0FFh
.eh_frame:0000000000018A54                 db  30h ; 0
.eh_frame:0000000000018A55                 db    0
.eh_frame:0000000000018A56                 db    0
.eh_frame:0000000000018A57                 db    0
.eh_frame:0000000000018A58                 db    0
.eh_frame:0000000000018A59                 db  41h ; A
.eh_frame:0000000000018A5A                 db  0Eh
.eh_frame:0000000000018A5B                 db  10h
.eh_frame:0000000000018A5C                 db  83h
.eh_frame:0000000000018A5D                 db    2
.eh_frame:0000000000018A5E                 db  6Ah ; j
.eh_frame:0000000000018A5F                 db  0Eh
.eh_frame:0000000000018A60                 db    8
.eh_frame:0000000000018A61                 db    0
.eh_frame:0000000000018A62                 db    0
.eh_frame:0000000000018A63                 db    0
.eh_frame:0000000000018A64                 db  10h
.eh_frame:0000000000018A65                 db    0
.eh_frame:0000000000018A66                 db    0
.eh_frame:0000000000018A67                 db    0
.eh_frame:0000000000018A68                 db  58h ; X
.eh_frame:0000000000018A69                 db  11h
.eh_frame:0000000000018A6A                 db    0
.eh_frame:0000000000018A6B                 db    0
.eh_frame:0000000000018A6C                 db 0D4h
.eh_frame:0000000000018A6D                 db 0F8h
.eh_frame:0000000000018A6E                 db 0FEh
.eh_frame:0000000000018A6F                 db 0FFh
.eh_frame:0000000000018A70                 db  25h ; %
.eh_frame:0000000000018A71                 db    0
.eh_frame:0000000000018A72                 db    0
.eh_frame:0000000000018A73                 db    0
.eh_frame:0000000000018A74                 db    0
.eh_frame:0000000000018A75                 db    0
.eh_frame:0000000000018A76                 db    0
.eh_frame:0000000000018A77                 db    0
.eh_frame:0000000000018A78                 db  14h
.eh_frame:0000000000018A79                 db    0
.eh_frame:0000000000018A7A                 db    0
.eh_frame:0000000000018A7B                 db    0
.eh_frame:0000000000018A7C                 db  6Ch ; l
.eh_frame:0000000000018A7D                 db  11h
.eh_frame:0000000000018A7E                 db    0
.eh_frame:0000000000018A7F                 db    0
.eh_frame:0000000000018A80                 db 0F0h
.eh_frame:0000000000018A81                 db 0F8h
.eh_frame:0000000000018A82                 db 0FEh
.eh_frame:0000000000018A83                 db 0FFh
.eh_frame:0000000000018A84                 db  14h
.eh_frame:0000000000018A85                 db    0
.eh_frame:0000000000018A86                 db    0
.eh_frame:0000000000018A87                 db    0
.eh_frame:0000000000018A88                 db    0
.eh_frame:0000000000018A89                 db  48h ; H
.eh_frame:0000000000018A8A                 db  0Eh
.eh_frame:0000000000018A8B                 db  10h
.eh_frame:0000000000018A8C                 db  4Bh ; K
.eh_frame:0000000000018A8D                 db  0Eh
.eh_frame:0000000000018A8E                 db    8
.eh_frame:0000000000018A8F                 db    0
.eh_frame:0000000000018A90                 db  48h ; H
.eh_frame:0000000000018A91                 db    0
.eh_frame:0000000000018A92                 db    0
.eh_frame:0000000000018A93                 db    0
.eh_frame:0000000000018A94                 db  84h
.eh_frame:0000000000018A95                 db  11h
.eh_frame:0000000000018A96                 db    0
.eh_frame:0000000000018A97                 db    0
.eh_frame:0000000000018A98                 db 0F8h
.eh_frame:0000000000018A99                 db 0F8h
.eh_frame:0000000000018A9A                 db 0FEh
.eh_frame:0000000000018A9B                 db 0FFh
.eh_frame:0000000000018A9C                 db 0CEh
.eh_frame:0000000000018A9D                 db    1
.eh_frame:0000000000018A9E                 db    0
.eh_frame:0000000000018A9F                 db    0
.eh_frame:0000000000018AA0                 db    0
.eh_frame:0000000000018AA1                 db  42h ; B
.eh_frame:0000000000018AA2                 db  0Eh
.eh_frame:0000000000018AA3                 db  10h
.eh_frame:0000000000018AA4                 db  8Fh
.eh_frame:0000000000018AA5                 db    2
.eh_frame:0000000000018AA6                 db  42h ; B
.eh_frame:0000000000018AA7                 db  0Eh
.eh_frame:0000000000018AA8                 db  18h
.eh_frame:0000000000018AA9                 db  8Eh
.eh_frame:0000000000018AAA                 db    3
.eh_frame:0000000000018AAB                 db  45h ; E
.eh_frame:0000000000018AAC                 db  0Eh
.eh_frame:0000000000018AAD                 db  20h
.eh_frame:0000000000018AAE                 db  8Dh
.eh_frame:0000000000018AAF                 db    4
.eh_frame:0000000000018AB0                 db  42h ; B
.eh_frame:0000000000018AB1                 db  0Eh
.eh_frame:0000000000018AB2                 db  28h ; (
.eh_frame:0000000000018AB3                 db  8Ch
.eh_frame:0000000000018AB4                 db    5
.eh_frame:0000000000018AB5                 db  41h ; A
.eh_frame:0000000000018AB6                 db  0Eh
.eh_frame:0000000000018AB7                 db  30h ; 0
.eh_frame:0000000000018AB8                 db  86h
.eh_frame:0000000000018AB9                 db    6
.eh_frame:0000000000018ABA                 db  41h ; A
.eh_frame:0000000000018ABB                 db  0Eh
.eh_frame:0000000000018ABC                 db  38h ; 8
.eh_frame:0000000000018ABD                 db  83h
.eh_frame:0000000000018ABE                 db    7
.eh_frame:0000000000018ABF                 db  47h ; G
.eh_frame:0000000000018AC0                 db  0Eh
.eh_frame:0000000000018AC1                 db  50h ; P
.eh_frame:0000000000018AC2                 db    2
.eh_frame:0000000000018AC3                 db 0ACh
.eh_frame:0000000000018AC4                 db  0Ah
.eh_frame:0000000000018AC5                 db  0Eh
.eh_frame:0000000000018AC6                 db  38h ; 8
.eh_frame:0000000000018AC7                 db  41h ; A
.eh_frame:0000000000018AC8                 db  0Eh
.eh_frame:0000000000018AC9                 db  30h ; 0
.eh_frame:0000000000018ACA                 db  41h ; A
.eh_frame:0000000000018ACB                 db  0Eh
.eh_frame:0000000000018ACC                 db  28h ; (
.eh_frame:0000000000018ACD                 db  42h ; B
.eh_frame:0000000000018ACE                 db  0Eh
.eh_frame:0000000000018ACF                 db  20h
.eh_frame:0000000000018AD0                 db  42h ; B
.eh_frame:0000000000018AD1                 db  0Eh
.eh_frame:0000000000018AD2                 db  18h
.eh_frame:0000000000018AD3                 db  42h ; B
.eh_frame:0000000000018AD4                 db  0Eh
.eh_frame:0000000000018AD5                 db  10h
.eh_frame:0000000000018AD6                 db  42h ; B
.eh_frame:0000000000018AD7                 db  0Eh
.eh_frame:0000000000018AD8                 db    8
.eh_frame:0000000000018AD9                 db  46h ; F
.eh_frame:0000000000018ADA                 db  0Bh
.eh_frame:0000000000018ADB                 db    0
.eh_frame:0000000000018ADC                 db  34h ; 4
.eh_frame:0000000000018ADD                 db    0
.eh_frame:0000000000018ADE                 db    0
.eh_frame:0000000000018ADF                 db    0
.eh_frame:0000000000018AE0                 db 0D0h
.eh_frame:0000000000018AE1                 db  11h
.eh_frame:0000000000018AE2                 db    0
.eh_frame:0000000000018AE3                 db    0
.eh_frame:0000000000018AE4                 db  7Ch ; |
.eh_frame:0000000000018AE5                 db 0FAh
.eh_frame:0000000000018AE6                 db 0FEh
.eh_frame:0000000000018AE7                 db 0FFh
.eh_frame:0000000000018AE8                 db  9Fh
.eh_frame:0000000000018AE9                 db    0
.eh_frame:0000000000018AEA                 db    0
.eh_frame:0000000000018AEB                 db    0
.eh_frame:0000000000018AEC                 db    0
.eh_frame:0000000000018AED                 db  42h ; B
.eh_frame:0000000000018AEE                 db  0Eh
.eh_frame:0000000000018AEF                 db  10h
.eh_frame:0000000000018AF0                 db  8Dh
.eh_frame:0000000000018AF1                 db    2
.eh_frame:0000000000018AF2                 db  42h ; B
.eh_frame:0000000000018AF3                 db  0Eh
.eh_frame:0000000000018AF4                 db  18h
.eh_frame:0000000000018AF5                 db  8Ch
.eh_frame:0000000000018AF6                 db    3
.eh_frame:0000000000018AF7                 db  44h ; D
.eh_frame:0000000000018AF8                 db  0Eh
.eh_frame:0000000000018AF9                 db  20h
.eh_frame:0000000000018AFA                 db  86h
.eh_frame:0000000000018AFB                 db    4
.eh_frame:0000000000018AFC                 db  41h ; A
.eh_frame:0000000000018AFD                 db  0Eh
.eh_frame:0000000000018AFE                 db  28h ; (
.eh_frame:0000000000018AFF                 db  83h
.eh_frame:0000000000018B00                 db    5
.eh_frame:0000000000018B01                 db  51h ; Q
.eh_frame:0000000000018B02                 db  0Eh
.eh_frame:0000000000018B03                 db  30h ; 0
.eh_frame:0000000000018B04                 db    2
.eh_frame:0000000000018B05                 db  7Eh ; ~
.eh_frame:0000000000018B06                 db  0Eh
.eh_frame:0000000000018B07                 db  28h ; (
.eh_frame:0000000000018B08                 db  41h ; A
.eh_frame:0000000000018B09                 db  0Eh
.eh_frame:0000000000018B0A                 db  20h
.eh_frame:0000000000018B0B                 db  41h ; A
.eh_frame:0000000000018B0C                 db  0Eh
.eh_frame:0000000000018B0D                 db  18h
.eh_frame:0000000000018B0E                 db  42h ; B
.eh_frame:0000000000018B0F                 db  0Eh
.eh_frame:0000000000018B10                 db  10h
.eh_frame:0000000000018B11                 db  42h ; B
.eh_frame:0000000000018B12                 db  0Eh
.eh_frame:0000000000018B13                 db    8
.eh_frame:0000000000018B14                 db  48h ; H
.eh_frame:0000000000018B15                 db    0
.eh_frame:0000000000018B16                 db    0
.eh_frame:0000000000018B17                 db    0
.eh_frame:0000000000018B18                 db    8
.eh_frame:0000000000018B19                 db  12h
.eh_frame:0000000000018B1A                 db    0
.eh_frame:0000000000018B1B                 db    0
.eh_frame:0000000000018B1C                 db 0E4h
.eh_frame:0000000000018B1D                 db 0FAh
.eh_frame:0000000000018B1E                 db 0FEh
.eh_frame:0000000000018B1F                 db 0FFh
.eh_frame:0000000000018B20                 db  75h ; u
.eh_frame:0000000000018B21                 db    2
.eh_frame:0000000000018B22                 db    0
.eh_frame:0000000000018B23                 db    0
.eh_frame:0000000000018B24                 db    0
.eh_frame:0000000000018B25                 db  42h ; B
.eh_frame:0000000000018B26                 db  0Eh
.eh_frame:0000000000018B27                 db  10h
.eh_frame:0000000000018B28                 db  8Fh
.eh_frame:0000000000018B29                 db    2
.eh_frame:0000000000018B2A                 db  42h ; B
.eh_frame:0000000000018B2B                 db  0Eh
.eh_frame:0000000000018B2C                 db  18h
.eh_frame:0000000000018B2D                 db  8Eh
.eh_frame:0000000000018B2E                 db    3
.eh_frame:0000000000018B2F                 db  45h ; E
.eh_frame:0000000000018B30                 db  0Eh
.eh_frame:0000000000018B31                 db  20h
.eh_frame:0000000000018B32                 db  8Dh
.eh_frame:0000000000018B33                 db    4
.eh_frame:0000000000018B34                 db  42h ; B
.eh_frame:0000000000018B35                 db  0Eh
.eh_frame:0000000000018B36                 db  28h ; (
.eh_frame:0000000000018B37                 db  8Ch
.eh_frame:0000000000018B38                 db    5
.eh_frame:0000000000018B39                 db  44h ; D
.eh_frame:0000000000018B3A                 db  0Eh
.eh_frame:0000000000018B3B                 db  30h ; 0
.eh_frame:0000000000018B3C                 db  86h
.eh_frame:0000000000018B3D                 db    6
.eh_frame:0000000000018B3E                 db  41h ; A
.eh_frame:0000000000018B3F                 db  0Eh
.eh_frame:0000000000018B40                 db  38h ; 8
.eh_frame:0000000000018B41                 db  83h
.eh_frame:0000000000018B42                 db    7
.eh_frame:0000000000018B43                 db  4Ah ; J
.eh_frame:0000000000018B44                 db  0Eh
.eh_frame:0000000000018B45                 db  50h ; P
.eh_frame:0000000000018B46                 db    3
.eh_frame:0000000000018B47                 db  1Ah
.eh_frame:0000000000018B48                 db    1
.eh_frame:0000000000018B49                 db  0Ah
.eh_frame:0000000000018B4A                 db  0Eh
.eh_frame:0000000000018B4B                 db  38h ; 8
.eh_frame:0000000000018B4C                 db  41h ; A
.eh_frame:0000000000018B4D                 db  0Eh
.eh_frame:0000000000018B4E                 db  30h ; 0
.eh_frame:0000000000018B4F                 db  41h ; A
.eh_frame:0000000000018B50                 db  0Eh
.eh_frame:0000000000018B51                 db  28h ; (
.eh_frame:0000000000018B52                 db  42h ; B
.eh_frame:0000000000018B53                 db  0Eh
.eh_frame:0000000000018B54                 db  20h
.eh_frame:0000000000018B55                 db  42h ; B
.eh_frame:0000000000018B56                 db  0Eh
.eh_frame:0000000000018B57                 db  18h
.eh_frame:0000000000018B58                 db  42h ; B
.eh_frame:0000000000018B59                 db  0Eh
.eh_frame:0000000000018B5A                 db  10h
.eh_frame:0000000000018B5B                 db  42h ; B
.eh_frame:0000000000018B5C                 db  0Eh
.eh_frame:0000000000018B5D                 db    8
.eh_frame:0000000000018B5E                 db  42h ; B
.eh_frame:0000000000018B5F                 db  0Bh
.eh_frame:0000000000018B60                 db  18h
.eh_frame:0000000000018B61                 db    0
.eh_frame:0000000000018B62                 db    0
.eh_frame:0000000000018B63                 db    0
.eh_frame:0000000000018B64                 db  54h ; T
.eh_frame:0000000000018B65                 db  12h
.eh_frame:0000000000018B66                 db    0
.eh_frame:0000000000018B67                 db    0
.eh_frame:0000000000018B68                 db  18h
.eh_frame:0000000000018B69                 db 0FDh
.eh_frame:0000000000018B6A                 db 0FEh
.eh_frame:0000000000018B6B                 db 0FFh
.eh_frame:0000000000018B6C                 db  59h ; Y
.eh_frame:0000000000018B6D                 db    0
.eh_frame:0000000000018B6E                 db    0
.eh_frame:0000000000018B6F                 db    0
.eh_frame:0000000000018B70                 db    0
.eh_frame:0000000000018B71                 db  41h ; A
.eh_frame:0000000000018B72                 db  0Eh
.eh_frame:0000000000018B73                 db  10h
.eh_frame:0000000000018B74                 db  83h
.eh_frame:0000000000018B75                 db    2
.eh_frame:0000000000018B76                 db    2
.eh_frame:0000000000018B77                 db  53h ; S
.eh_frame:0000000000018B78                 db  0Eh
.eh_frame:0000000000018B79                 db    8
.eh_frame:0000000000018B7A                 db    0
.eh_frame:0000000000018B7B                 db    0
.eh_frame:0000000000018B7C                 db  1Ch
.eh_frame:0000000000018B7D                 db    0
.eh_frame:0000000000018B7E                 db    0
.eh_frame:0000000000018B7F                 db    0
.eh_frame:0000000000018B80                 db  70h ; p
.eh_frame:0000000000018B81                 db  12h
.eh_frame:0000000000018B82                 db    0
.eh_frame:0000000000018B83                 db    0
.eh_frame:0000000000018B84                 db  5Ch ; \
.eh_frame:0000000000018B85                 db 0FDh
.eh_frame:0000000000018B86                 db 0FEh
.eh_frame:0000000000018B87                 db 0FFh
.eh_frame:0000000000018B88                 db  32h ; 2
.eh_frame:0000000000018B89                 db    0
.eh_frame:0000000000018B8A                 db    0
.eh_frame:0000000000018B8B                 db    0
.eh_frame:0000000000018B8C                 db    0
.eh_frame:0000000000018B8D                 db  41h ; A
.eh_frame:0000000000018B8E                 db  0Eh
.eh_frame:0000000000018B8F                 db  10h
.eh_frame:0000000000018B90                 db  83h
.eh_frame:0000000000018B91                 db    2
.eh_frame:0000000000018B92                 db  5Fh ; _
.eh_frame:0000000000018B93                 db  0Ah
.eh_frame:0000000000018B94                 db  0Eh
.eh_frame:0000000000018B95                 db    8
.eh_frame:0000000000018B96                 db  48h ; H
.eh_frame:0000000000018B97                 db  0Bh
.eh_frame:0000000000018B98                 db  45h ; E
.eh_frame:0000000000018B99                 db  0Eh
.eh_frame:0000000000018B9A                 db    8
.eh_frame:0000000000018B9B                 db    0
.eh_frame:0000000000018B9C                 db  38h ; 8
.eh_frame:0000000000018B9D                 db    0
.eh_frame:0000000000018B9E                 db    0
.eh_frame:0000000000018B9F                 db    0
.eh_frame:0000000000018BA0                 db  90h
.eh_frame:0000000000018BA1                 db  12h
.eh_frame:0000000000018BA2                 db    0
.eh_frame:0000000000018BA3                 db    0
.eh_frame:0000000000018BA4                 db  7Ch ; |
.eh_frame:0000000000018BA5                 db 0FDh
.eh_frame:0000000000018BA6                 db 0FEh
.eh_frame:0000000000018BA7                 db 0FFh
.eh_frame:0000000000018BA8                 db  5Fh ; _
.eh_frame:0000000000018BA9                 db    1
.eh_frame:0000000000018BAA                 db    0
.eh_frame:0000000000018BAB                 db    0
.eh_frame:0000000000018BAC                 db    0
.eh_frame:0000000000018BAD                 db  42h ; B
.eh_frame:0000000000018BAE                 db  0Eh
.eh_frame:0000000000018BAF                 db  10h
.eh_frame:0000000000018BB0                 db  8Eh
.eh_frame:0000000000018BB1                 db    2
.eh_frame:0000000000018BB2                 db  42h ; B
.eh_frame:0000000000018BB3                 db  0Eh
.eh_frame:0000000000018BB4                 db  18h
.eh_frame:0000000000018BB5                 db  8Dh
.eh_frame:0000000000018BB6                 db    3
.eh_frame:0000000000018BB7                 db  42h ; B
.eh_frame:0000000000018BB8                 db  0Eh
.eh_frame:0000000000018BB9                 db  20h
.eh_frame:0000000000018BBA                 db  8Ch
.eh_frame:0000000000018BBB                 db    4
.eh_frame:0000000000018BBC                 db  44h ; D
.eh_frame:0000000000018BBD                 db  0Eh
.eh_frame:0000000000018BBE                 db  28h ; (
.eh_frame:0000000000018BBF                 db  86h
.eh_frame:0000000000018BC0                 db    5
.eh_frame:0000000000018BC1                 db  41h ; A
.eh_frame:0000000000018BC2                 db  0Eh
.eh_frame:0000000000018BC3                 db  30h ; 0
.eh_frame:0000000000018BC4                 db  83h
.eh_frame:0000000000018BC5                 db    6
.eh_frame:0000000000018BC6                 db    3
.eh_frame:0000000000018BC7                 db  45h ; E
.eh_frame:0000000000018BC8                 db    1
.eh_frame:0000000000018BC9                 db  0Eh
.eh_frame:0000000000018BCA                 db  28h ; (
.eh_frame:0000000000018BCB                 db  44h ; D
.eh_frame:0000000000018BCC                 db  0Eh
.eh_frame:0000000000018BCD                 db  20h
.eh_frame:0000000000018BCE                 db  42h ; B
.eh_frame:0000000000018BCF                 db  0Eh
.eh_frame:0000000000018BD0                 db  18h
.eh_frame:0000000000018BD1                 db  42h ; B
.eh_frame:0000000000018BD2                 db  0Eh
.eh_frame:0000000000018BD3                 db  10h
.eh_frame:0000000000018BD4                 db  42h ; B
.eh_frame:0000000000018BD5                 db  0Eh
.eh_frame:0000000000018BD6                 db    8
.eh_frame:0000000000018BD7                 db    0
.eh_frame:0000000000018BD8                 db  38h ; 8
.eh_frame:0000000000018BD9                 db    0
.eh_frame:0000000000018BDA                 db    0
.eh_frame:0000000000018BDB                 db    0
.eh_frame:0000000000018BDC                 db 0CCh
.eh_frame:0000000000018BDD                 db  12h
.eh_frame:0000000000018BDE                 db    0
.eh_frame:0000000000018BDF                 db    0
.eh_frame:0000000000018BE0                 db 0A0h
.eh_frame:0000000000018BE1                 db 0FEh
.eh_frame:0000000000018BE2                 db 0FEh
.eh_frame:0000000000018BE3                 db 0FFh
.eh_frame:0000000000018BE4                 db 0B8h
.eh_frame:0000000000018BE5                 db    0
.eh_frame:0000000000018BE6                 db    0
.eh_frame:0000000000018BE7                 db    0
.eh_frame:0000000000018BE8                 db    0
.eh_frame:0000000000018BE9                 db  42h ; B
.eh_frame:0000000000018BEA                 db  0Eh
.eh_frame:0000000000018BEB                 db  10h
.eh_frame:0000000000018BEC                 db  8Eh
.eh_frame:0000000000018BED                 db    2
.eh_frame:0000000000018BEE                 db  42h ; B
.eh_frame:0000000000018BEF                 db  0Eh
.eh_frame:0000000000018BF0                 db  18h
.eh_frame:0000000000018BF1                 db  8Dh
.eh_frame:0000000000018BF2                 db    3
.eh_frame:0000000000018BF3                 db  45h ; E
.eh_frame:0000000000018BF4                 db  0Eh
.eh_frame:0000000000018BF5                 db  20h
.eh_frame:0000000000018BF6                 db  8Ch
.eh_frame:0000000000018BF7                 db    4
.eh_frame:0000000000018BF8                 db  41h ; A
.eh_frame:0000000000018BF9                 db  0Eh
.eh_frame:0000000000018BFA                 db  28h ; (
.eh_frame:0000000000018BFB                 db  86h
.eh_frame:0000000000018BFC                 db    5
.eh_frame:0000000000018BFD                 db  41h ; A
.eh_frame:0000000000018BFE                 db  0Eh
.eh_frame:0000000000018BFF                 db  30h ; 0
.eh_frame:0000000000018C00                 db  83h
.eh_frame:0000000000018C01                 db    6
.eh_frame:0000000000018C02                 db    2
.eh_frame:0000000000018C03                 db  8Fh
.eh_frame:0000000000018C04                 db  0Eh
.eh_frame:0000000000018C05                 db  28h ; (
.eh_frame:0000000000018C06                 db  57h ; W
.eh_frame:0000000000018C07                 db  0Eh
.eh_frame:0000000000018C08                 db  20h
.eh_frame:0000000000018C09                 db  42h ; B
.eh_frame:0000000000018C0A                 db  0Eh
.eh_frame:0000000000018C0B                 db  18h
.eh_frame:0000000000018C0C                 db  42h ; B
.eh_frame:0000000000018C0D                 db  0Eh
.eh_frame:0000000000018C0E                 db  10h
.eh_frame:0000000000018C0F                 db  42h ; B
.eh_frame:0000000000018C10                 db  0Eh
.eh_frame:0000000000018C11                 db    8
.eh_frame:0000000000018C12                 db    0
.eh_frame:0000000000018C13                 db    0
.eh_frame:0000000000018C14                 db  10h
.eh_frame:0000000000018C15                 db    0
.eh_frame:0000000000018C16                 db    0
.eh_frame:0000000000018C17                 db    0
.eh_frame:0000000000018C18                 db    8
.eh_frame:0000000000018C19                 db  13h
.eh_frame:0000000000018C1A                 db    0
.eh_frame:0000000000018C1B                 db    0
.eh_frame:0000000000018C1C                 db  24h ; $
.eh_frame:0000000000018C1D                 db 0FFh
.eh_frame:0000000000018C1E                 db 0FEh
.eh_frame:0000000000018C1F                 db 0FFh
.eh_frame:0000000000018C20                 db  4Fh ; O
.eh_frame:0000000000018C21                 db    0
.eh_frame:0000000000018C22                 db    0
.eh_frame:0000000000018C23                 db    0
.eh_frame:0000000000018C24                 db    0
.eh_frame:0000000000018C25                 db    0
.eh_frame:0000000000018C26                 db    0
.eh_frame:0000000000018C27                 db    0
.eh_frame:0000000000018C28                 db  10h
.eh_frame:0000000000018C29                 db    0
.eh_frame:0000000000018C2A                 db    0
.eh_frame:0000000000018C2B                 db    0
.eh_frame:0000000000018C2C                 db  1Ch
.eh_frame:0000000000018C2D                 db  13h
.eh_frame:0000000000018C2E                 db    0
.eh_frame:0000000000018C2F                 db    0
.eh_frame:0000000000018C30                 db  60h ; `
.eh_frame:0000000000018C31                 db 0FFh
.eh_frame:0000000000018C32                 db 0FEh
.eh_frame:0000000000018C33                 db 0FFh
.eh_frame:0000000000018C34                 db  53h ; S
.eh_frame:0000000000018C35                 db    0
.eh_frame:0000000000018C36                 db    0
.eh_frame:0000000000018C37                 db    0
.eh_frame:0000000000018C38                 db    0
.eh_frame:0000000000018C39                 db    0
.eh_frame:0000000000018C3A                 db    0
.eh_frame:0000000000018C3B                 db    0
.eh_frame:0000000000018C3C                 db  10h
.eh_frame:0000000000018C3D                 db    0
.eh_frame:0000000000018C3E                 db    0
.eh_frame:0000000000018C3F                 db    0
.eh_frame:0000000000018C40                 db  30h ; 0
.eh_frame:0000000000018C41                 db  13h
.eh_frame:0000000000018C42                 db    0
.eh_frame:0000000000018C43                 db    0
.eh_frame:0000000000018C44                 db 0ACh
.eh_frame:0000000000018C45                 db 0FFh
.eh_frame:0000000000018C46                 db 0FEh
.eh_frame:0000000000018C47                 db 0FFh
.eh_frame:0000000000018C48                 db  75h ; u
.eh_frame:0000000000018C49                 db    0
.eh_frame:0000000000018C4A                 db    0
.eh_frame:0000000000018C4B                 db    0
.eh_frame:0000000000018C4C                 db    0
.eh_frame:0000000000018C4D                 db    0
.eh_frame:0000000000018C4E                 db    0
.eh_frame:0000000000018C4F                 db    0
.eh_frame:0000000000018C50                 db  60h ; `
.eh_frame:0000000000018C51                 db    0
.eh_frame:0000000000018C52                 db    0
.eh_frame:0000000000018C53                 db    0
.eh_frame:0000000000018C54                 db  44h ; D
.eh_frame:0000000000018C55                 db  13h
.eh_frame:0000000000018C56                 db    0
.eh_frame:0000000000018C57                 db    0
.eh_frame:0000000000018C58                 db  18h
.eh_frame:0000000000018C59                 db    0
.eh_frame:0000000000018C5A                 db 0FFh
.eh_frame:0000000000018C5B                 db 0FFh
.eh_frame:0000000000018C5C                 db 0F5h
.eh_frame:0000000000018C5D                 db    0
.eh_frame:0000000000018C5E                 db    0
.eh_frame:0000000000018C5F                 db    0
.eh_frame:0000000000018C60                 db    0
.eh_frame:0000000000018C61                 db  42h ; B
.eh_frame:0000000000018C62                 db  0Eh
.eh_frame:0000000000018C63                 db  10h
.eh_frame:0000000000018C64                 db  8Fh
.eh_frame:0000000000018C65                 db    2
.eh_frame:0000000000018C66                 db  42h ; B
.eh_frame:0000000000018C67                 db  0Eh
.eh_frame:0000000000018C68                 db  18h
.eh_frame:0000000000018C69                 db  8Eh
.eh_frame:0000000000018C6A                 db    3
.eh_frame:0000000000018C6B                 db  46h ; F
.eh_frame:0000000000018C6C                 db  0Eh
.eh_frame:0000000000018C6D                 db  20h
.eh_frame:0000000000018C6E                 db  8Dh
.eh_frame:0000000000018C6F                 db    4
.eh_frame:0000000000018C70                 db  42h ; B
.eh_frame:0000000000018C71                 db  0Eh
.eh_frame:0000000000018C72                 db  28h ; (
.eh_frame:0000000000018C73                 db  8Ch
.eh_frame:0000000000018C74                 db    5
.eh_frame:0000000000018C75                 db  44h ; D
.eh_frame:0000000000018C76                 db  0Eh
.eh_frame:0000000000018C77                 db  30h ; 0
.eh_frame:0000000000018C78                 db  86h
.eh_frame:0000000000018C79                 db    6
.eh_frame:0000000000018C7A                 db  41h ; A
.eh_frame:0000000000018C7B                 db  0Eh
.eh_frame:0000000000018C7C                 db  38h ; 8
.eh_frame:0000000000018C7D                 db  83h
.eh_frame:0000000000018C7E                 db    7
.eh_frame:0000000000018C7F                 db  50h ; P
.eh_frame:0000000000018C80                 db  0Eh
.eh_frame:0000000000018C81                 db  40h ; @
.eh_frame:0000000000018C82                 db    2
.eh_frame:0000000000018C83                 db  85h
.eh_frame:0000000000018C84                 db  0Ah
.eh_frame:0000000000018C85                 db  0Eh
.eh_frame:0000000000018C86                 db  38h ; 8
.eh_frame:0000000000018C87                 db  41h ; A
.eh_frame:0000000000018C88                 db  0Eh
.eh_frame:0000000000018C89                 db  30h ; 0
.eh_frame:0000000000018C8A                 db  41h ; A
.eh_frame:0000000000018C8B                 db  0Eh
.eh_frame:0000000000018C8C                 db  28h ; (
.eh_frame:0000000000018C8D                 db  42h ; B
.eh_frame:0000000000018C8E                 db  0Eh
.eh_frame:0000000000018C8F                 db  20h
.eh_frame:0000000000018C90                 db  42h ; B
.eh_frame:0000000000018C91                 db  0Eh
.eh_frame:0000000000018C92                 db  18h
.eh_frame:0000000000018C93                 db  42h ; B
.eh_frame:0000000000018C94                 db  0Eh
.eh_frame:0000000000018C95                 db  10h
.eh_frame:0000000000018C96                 db  42h ; B
.eh_frame:0000000000018C97                 db  0Eh
.eh_frame:0000000000018C98                 db    8
.eh_frame:0000000000018C99                 db  48h ; H
.eh_frame:0000000000018C9A                 db  0Bh
.eh_frame:0000000000018C9B                 db  44h ; D
.eh_frame:0000000000018C9C                 db  0Ah
.eh_frame:0000000000018C9D                 db  0Eh
.eh_frame:0000000000018C9E                 db  38h ; 8
.eh_frame:0000000000018C9F                 db  46h ; F
.eh_frame:0000000000018CA0                 db  0Eh
.eh_frame:0000000000018CA1                 db  30h ; 0
.eh_frame:0000000000018CA2                 db  41h ; A
.eh_frame:0000000000018CA3                 db  0Eh
.eh_frame:0000000000018CA4                 db  28h ; (
.eh_frame:0000000000018CA5                 db  42h ; B
.eh_frame:0000000000018CA6                 db  0Eh
.eh_frame:0000000000018CA7                 db  20h
.eh_frame:0000000000018CA8                 db  42h ; B
.eh_frame:0000000000018CA9                 db  0Eh
.eh_frame:0000000000018CAA                 db  18h
.eh_frame:0000000000018CAB                 db  42h ; B
.eh_frame:0000000000018CAC                 db  0Eh
.eh_frame:0000000000018CAD                 db  10h
.eh_frame:0000000000018CAE                 db  42h ; B
.eh_frame:0000000000018CAF                 db  0Eh
.eh_frame:0000000000018CB0                 db    8
.eh_frame:0000000000018CB1                 db  45h ; E
.eh_frame:0000000000018CB2                 db  0Bh
.eh_frame:0000000000018CB3                 db    0
.eh_frame:0000000000018CB4                 db  10h
.eh_frame:0000000000018CB5                 db    0
.eh_frame:0000000000018CB6                 db    0
.eh_frame:0000000000018CB7                 db    0
.eh_frame:0000000000018CB8                 db 0A8h
.eh_frame:0000000000018CB9                 db  13h
.eh_frame:0000000000018CBA                 db    0
.eh_frame:0000000000018CBB                 db    0
.eh_frame:0000000000018CBC                 db 0B4h
.eh_frame:0000000000018CBD                 db    0
.eh_frame:0000000000018CBE                 db 0FFh
.eh_frame:0000000000018CBF                 db 0FFh
.eh_frame:0000000000018CC0                 db  34h ; 4
.eh_frame:0000000000018CC1                 db    0
.eh_frame:0000000000018CC2                 db    0
.eh_frame:0000000000018CC3                 db    0
.eh_frame:0000000000018CC4                 db    0
.eh_frame:0000000000018CC5                 db    0
.eh_frame:0000000000018CC6                 db    0
.eh_frame:0000000000018CC7                 db    0
.eh_frame:0000000000018CC8                 db  10h
.eh_frame:0000000000018CC9                 db    0
.eh_frame:0000000000018CCA                 db    0
.eh_frame:0000000000018CCB                 db    0
.eh_frame:0000000000018CCC                 db 0BCh
.eh_frame:0000000000018CCD                 db  13h
.eh_frame:0000000000018CCE                 db    0
.eh_frame:0000000000018CCF                 db    0
.eh_frame:0000000000018CD0                 db 0E0h
.eh_frame:0000000000018CD1                 db    0
.eh_frame:0000000000018CD2                 db 0FFh
.eh_frame:0000000000018CD3                 db 0FFh
.eh_frame:0000000000018CD4                 db  8Bh
.eh_frame:0000000000018CD5                 db    0
.eh_frame:0000000000018CD6                 db    0
.eh_frame:0000000000018CD7                 db    0
.eh_frame:0000000000018CD8                 db    0
.eh_frame:0000000000018CD9                 db    0
.eh_frame:0000000000018CDA                 db    0
.eh_frame:0000000000018CDB                 db    0
.eh_frame:0000000000018CDC                 db  10h
.eh_frame:0000000000018CDD                 db    0
.eh_frame:0000000000018CDE                 db    0
.eh_frame:0000000000018CDF                 db    0
.eh_frame:0000000000018CE0                 db 0D0h
.eh_frame:0000000000018CE1                 db  13h
.eh_frame:0000000000018CE2                 db    0
.eh_frame:0000000000018CE3                 db    0
.eh_frame:0000000000018CE4                 db  5Ch ; \
.eh_frame:0000000000018CE5                 db    1
.eh_frame:0000000000018CE6                 db 0FFh
.eh_frame:0000000000018CE7                 db 0FFh
.eh_frame:0000000000018CE8                 db  57h ; W
.eh_frame:0000000000018CE9                 db    0
.eh_frame:0000000000018CEA                 db    0
.eh_frame:0000000000018CEB                 db    0
.eh_frame:0000000000018CEC                 db    0
.eh_frame:0000000000018CED                 db    0
.eh_frame:0000000000018CEE                 db    0
.eh_frame:0000000000018CEF                 db    0
.eh_frame:0000000000018CF0                 db  4Ch ; L
.eh_frame:0000000000018CF1                 db    0
.eh_frame:0000000000018CF2                 db    0
.eh_frame:0000000000018CF3                 db    0
.eh_frame:0000000000018CF4                 db 0E4h
.eh_frame:0000000000018CF5                 db  13h
.eh_frame:0000000000018CF6                 db    0
.eh_frame:0000000000018CF7                 db    0
.eh_frame:0000000000018CF8                 db 0A8h
.eh_frame:0000000000018CF9                 db    1
.eh_frame:0000000000018CFA                 db 0FFh
.eh_frame:0000000000018CFB                 db 0FFh
.eh_frame:0000000000018CFC                 db  69h ; i
.eh_frame:0000000000018CFD                 db    2
.eh_frame:0000000000018CFE                 db    0
.eh_frame:0000000000018CFF                 db    0
.eh_frame:0000000000018D00                 db    0
.eh_frame:0000000000018D01                 db  42h ; B
.eh_frame:0000000000018D02                 db  0Eh
.eh_frame:0000000000018D03                 db  10h
.eh_frame:0000000000018D04                 db  8Fh
.eh_frame:0000000000018D05                 db    2
.eh_frame:0000000000018D06                 db  42h ; B
.eh_frame:0000000000018D07                 db  0Eh
.eh_frame:0000000000018D08                 db  18h
.eh_frame:0000000000018D09                 db  8Eh
.eh_frame:0000000000018D0A                 db    3
.eh_frame:0000000000018D0B                 db  42h ; B
.eh_frame:0000000000018D0C                 db  0Eh
.eh_frame:0000000000018D0D                 db  20h
.eh_frame:0000000000018D0E                 db  8Dh
.eh_frame:0000000000018D0F                 db    4
.eh_frame:0000000000018D10                 db  42h ; B
.eh_frame:0000000000018D11                 db  0Eh
.eh_frame:0000000000018D12                 db  28h ; (
.eh_frame:0000000000018D13                 db  8Ch
.eh_frame:0000000000018D14                 db    5
.eh_frame:0000000000018D15                 db  41h ; A
.eh_frame:0000000000018D16                 db  0Eh
.eh_frame:0000000000018D17                 db  30h ; 0
.eh_frame:0000000000018D18                 db  86h
.eh_frame:0000000000018D19                 db    6
.eh_frame:0000000000018D1A                 db  41h ; A
.eh_frame:0000000000018D1B                 db  0Eh
.eh_frame:0000000000018D1C                 db  38h ; 8
.eh_frame:0000000000018D1D                 db  83h
.eh_frame:0000000000018D1E                 db    7
.eh_frame:0000000000018D1F                 db  46h ; F
.eh_frame:0000000000018D20                 db  0Eh
.eh_frame:0000000000018D21                 db  80h
.eh_frame:0000000000018D22                 db    1
.eh_frame:0000000000018D23                 db    3
.eh_frame:0000000000018D24                 db 0D2h
.eh_frame:0000000000018D25                 db    1
.eh_frame:0000000000018D26                 db  0Ah
.eh_frame:0000000000018D27                 db  0Eh
.eh_frame:0000000000018D28                 db  38h ; 8
.eh_frame:0000000000018D29                 db  41h ; A
.eh_frame:0000000000018D2A                 db  0Eh
.eh_frame:0000000000018D2B                 db  30h ; 0
.eh_frame:0000000000018D2C                 db  41h ; A
.eh_frame:0000000000018D2D                 db  0Eh
.eh_frame:0000000000018D2E                 db  28h ; (
.eh_frame:0000000000018D2F                 db  42h ; B
.eh_frame:0000000000018D30                 db  0Eh
.eh_frame:0000000000018D31                 db  20h
.eh_frame:0000000000018D32                 db  42h ; B
.eh_frame:0000000000018D33                 db  0Eh
.eh_frame:0000000000018D34                 db  18h
.eh_frame:0000000000018D35                 db  42h ; B
.eh_frame:0000000000018D36                 db  0Eh
.eh_frame:0000000000018D37                 db  10h
.eh_frame:0000000000018D38                 db  42h ; B
.eh_frame:0000000000018D39                 db  0Eh
.eh_frame:0000000000018D3A                 db    8
.eh_frame:0000000000018D3B                 db  44h ; D
.eh_frame:0000000000018D3C                 db  0Bh
.eh_frame:0000000000018D3D                 db    0
.eh_frame:0000000000018D3E                 db    0
.eh_frame:0000000000018D3F                 db    0
.eh_frame:0000000000018D40                 db  34h ; 4
.eh_frame:0000000000018D41                 db    0
.eh_frame:0000000000018D42                 db    0
.eh_frame:0000000000018D43                 db    0
.eh_frame:0000000000018D44                 db  34h ; 4
.eh_frame:0000000000018D45                 db  14h
.eh_frame:0000000000018D46                 db    0
.eh_frame:0000000000018D47                 db    0
.eh_frame:0000000000018D48                 db 0C8h
.eh_frame:0000000000018D49                 db    3
.eh_frame:0000000000018D4A                 db 0FFh
.eh_frame:0000000000018D4B                 db 0FFh
.eh_frame:0000000000018D4C                 db 0DEh
.eh_frame:0000000000018D4D                 db    1
.eh_frame:0000000000018D4E                 db    0
.eh_frame:0000000000018D4F                 db    0
.eh_frame:0000000000018D50                 db    0
.eh_frame:0000000000018D51                 db  58h ; X
.eh_frame:0000000000018D52                 db  0Eh
.eh_frame:0000000000018D53                 db  10h
.eh_frame:0000000000018D54                 db  8Ch
.eh_frame:0000000000018D55                 db    2
.eh_frame:0000000000018D56                 db  41h ; A
.eh_frame:0000000000018D57                 db  0Eh
.eh_frame:0000000000018D58                 db  18h
.eh_frame:0000000000018D59                 db  86h
.eh_frame:0000000000018D5A                 db    3
.eh_frame:0000000000018D5B                 db  44h ; D
.eh_frame:0000000000018D5C                 db  0Eh
.eh_frame:0000000000018D5D                 db  20h
.eh_frame:0000000000018D5E                 db  83h
.eh_frame:0000000000018D5F                 db    4
.eh_frame:0000000000018D60                 db    2
.eh_frame:0000000000018D61                 db 0D0h
.eh_frame:0000000000018D62                 db  0Eh
.eh_frame:0000000000018D63                 db  18h
.eh_frame:0000000000018D64                 db  41h ; A
.eh_frame:0000000000018D65                 db  0Eh
.eh_frame:0000000000018D66                 db  10h
.eh_frame:0000000000018D67                 db  42h ; B
.eh_frame:0000000000018D68                 db  0Eh
.eh_frame:0000000000018D69                 db    8
.eh_frame:0000000000018D6A                 db  48h ; H
.eh_frame:0000000000018D6B                 db 0C3h
.eh_frame:0000000000018D6C                 db 0C6h
.eh_frame:0000000000018D6D                 db 0CCh
.eh_frame:0000000000018D6E                 db  48h ; H
.eh_frame:0000000000018D6F                 db  0Eh
.eh_frame:0000000000018D70                 db  20h
.eh_frame:0000000000018D71                 db  83h
.eh_frame:0000000000018D72                 db    4
.eh_frame:0000000000018D73                 db  86h
.eh_frame:0000000000018D74                 db    3
.eh_frame:0000000000018D75                 db  8Ch
.eh_frame:0000000000018D76                 db    2
.eh_frame:0000000000018D77                 db    0
.eh_frame:0000000000018D78                 db  4Ch ; L
.eh_frame:0000000000018D79                 db    0
.eh_frame:0000000000018D7A                 db    0
.eh_frame:0000000000018D7B                 db    0
.eh_frame:0000000000018D7C                 db  6Ch ; l
.eh_frame:0000000000018D7D                 db  14h
.eh_frame:0000000000018D7E                 db    0
.eh_frame:0000000000018D7F                 db    0
.eh_frame:0000000000018D80                 db  70h ; p
.eh_frame:0000000000018D81                 db    5
.eh_frame:0000000000018D82                 db 0FFh
.eh_frame:0000000000018D83                 db 0FFh
.eh_frame:0000000000018D84                 db 0AFh
.eh_frame:0000000000018D85                 db    2
.eh_frame:0000000000018D86                 db    0
.eh_frame:0000000000018D87                 db    0
.eh_frame:0000000000018D88                 db    0
.eh_frame:0000000000018D89                 db  42h ; B
.eh_frame:0000000000018D8A                 db  0Eh
.eh_frame:0000000000018D8B                 db  10h
.eh_frame:0000000000018D8C                 db  8Fh
.eh_frame:0000000000018D8D                 db    2
.eh_frame:0000000000018D8E                 db  42h ; B
.eh_frame:0000000000018D8F                 db  0Eh
.eh_frame:0000000000018D90                 db  18h
.eh_frame:0000000000018D91                 db  8Eh
.eh_frame:0000000000018D92                 db    3
.eh_frame:0000000000018D93                 db  45h ; E
.eh_frame:0000000000018D94                 db  0Eh
.eh_frame:0000000000018D95                 db  20h
.eh_frame:0000000000018D96                 db  8Dh
.eh_frame:0000000000018D97                 db    4
.eh_frame:0000000000018D98                 db  42h ; B
.eh_frame:0000000000018D99                 db  0Eh
.eh_frame:0000000000018D9A                 db  28h ; (
.eh_frame:0000000000018D9B                 db  8Ch
.eh_frame:0000000000018D9C                 db    5
.eh_frame:0000000000018D9D                 db  41h ; A
.eh_frame:0000000000018D9E                 db  0Eh
.eh_frame:0000000000018D9F                 db  30h ; 0
.eh_frame:0000000000018DA0                 db  86h
.eh_frame:0000000000018DA1                 db    6
.eh_frame:0000000000018DA2                 db  41h ; A
.eh_frame:0000000000018DA3                 db  0Eh
.eh_frame:0000000000018DA4                 db  38h ; 8
.eh_frame:0000000000018DA5                 db  83h
.eh_frame:0000000000018DA6                 db    7
.eh_frame:0000000000018DA7                 db  4Bh ; K
.eh_frame:0000000000018DA8                 db  0Eh
.eh_frame:0000000000018DA9                 db 0A0h
.eh_frame:0000000000018DAA                 db    1
.eh_frame:0000000000018DAB                 db    3
.eh_frame:0000000000018DAC                 db 0A6h
.eh_frame:0000000000018DAD                 db    1
.eh_frame:0000000000018DAE                 db  0Ah
.eh_frame:0000000000018DAF                 db  0Eh
.eh_frame:0000000000018DB0                 db  38h ; 8
.eh_frame:0000000000018DB1                 db  41h ; A
.eh_frame:0000000000018DB2                 db  0Eh
.eh_frame:0000000000018DB3                 db  30h ; 0
.eh_frame:0000000000018DB4                 db  41h ; A
.eh_frame:0000000000018DB5                 db  0Eh
.eh_frame:0000000000018DB6                 db  28h ; (
.eh_frame:0000000000018DB7                 db  42h ; B
.eh_frame:0000000000018DB8                 db  0Eh
.eh_frame:0000000000018DB9                 db  20h
.eh_frame:0000000000018DBA                 db  42h ; B
.eh_frame:0000000000018DBB                 db  0Eh
.eh_frame:0000000000018DBC                 db  18h
.eh_frame:0000000000018DBD                 db  42h ; B
.eh_frame:0000000000018DBE                 db  0Eh
.eh_frame:0000000000018DBF                 db  10h
.eh_frame:0000000000018DC0                 db  42h ; B
.eh_frame:0000000000018DC1                 db  0Eh
.eh_frame:0000000000018DC2                 db    8
.eh_frame:0000000000018DC3                 db  48h ; H
.eh_frame:0000000000018DC4                 db  0Bh
.eh_frame:0000000000018DC5                 db    0
.eh_frame:0000000000018DC6                 db    0
.eh_frame:0000000000018DC7                 db    0
.eh_frame:0000000000018DC8                 db  48h ; H
.eh_frame:0000000000018DC9                 db    0
.eh_frame:0000000000018DCA                 db    0
.eh_frame:0000000000018DCB                 db    0
.eh_frame:0000000000018DCC                 db 0BCh
.eh_frame:0000000000018DCD                 db  14h
.eh_frame:0000000000018DCE                 db    0
.eh_frame:0000000000018DCF                 db    0
.eh_frame:0000000000018DD0                 db 0D0h
.eh_frame:0000000000018DD1                 db    7
.eh_frame:0000000000018DD2                 db 0FFh
.eh_frame:0000000000018DD3                 db 0FFh
.eh_frame:0000000000018DD4                 db  59h ; Y
.eh_frame:0000000000018DD5                 db    1
.eh_frame:0000000000018DD6                 db    0
.eh_frame:0000000000018DD7                 db    0
.eh_frame:0000000000018DD8                 db    0
.eh_frame:0000000000018DD9                 db  42h ; B
.eh_frame:0000000000018DDA                 db  0Eh
.eh_frame:0000000000018DDB                 db  10h
.eh_frame:0000000000018DDC                 db  8Fh
.eh_frame:0000000000018DDD                 db    2
.eh_frame:0000000000018DDE                 db  42h ; B
.eh_frame:0000000000018DDF                 db  0Eh
.eh_frame:0000000000018DE0                 db  18h
.eh_frame:0000000000018DE1                 db  8Eh
.eh_frame:0000000000018DE2                 db    3
.eh_frame:0000000000018DE3                 db  45h ; E
.eh_frame:0000000000018DE4                 db  0Eh
.eh_frame:0000000000018DE5                 db  20h
.eh_frame:0000000000018DE6                 db  8Dh
.eh_frame:0000000000018DE7                 db    4
.eh_frame:0000000000018DE8                 db  42h ; B
.eh_frame:0000000000018DE9                 db  0Eh
.eh_frame:0000000000018DEA                 db  28h ; (
.eh_frame:0000000000018DEB                 db  8Ch
.eh_frame:0000000000018DEC                 db    5
.eh_frame:0000000000018DED                 db  44h ; D
.eh_frame:0000000000018DEE                 db  0Eh
.eh_frame:0000000000018DEF                 db  30h ; 0
.eh_frame:0000000000018DF0                 db  86h
.eh_frame:0000000000018DF1                 db    6
.eh_frame:0000000000018DF2                 db  41h ; A
.eh_frame:0000000000018DF3                 db  0Eh
.eh_frame:0000000000018DF4                 db  38h ; 8
.eh_frame:0000000000018DF5                 db  83h
.eh_frame:0000000000018DF6                 db    7
.eh_frame:0000000000018DF7                 db  49h ; I
.eh_frame:0000000000018DF8                 db  0Eh
.eh_frame:0000000000018DF9                 db  70h ; p
.eh_frame:0000000000018DFA                 db    3
.eh_frame:0000000000018DFB                 db  29h ; )
.eh_frame:0000000000018DFC                 db    1
.eh_frame:0000000000018DFD                 db  0Ah
.eh_frame:0000000000018DFE                 db  0Eh
.eh_frame:0000000000018DFF                 db  38h ; 8
.eh_frame:0000000000018E00                 db  41h ; A
.eh_frame:0000000000018E01                 db  0Eh
.eh_frame:0000000000018E02                 db  30h ; 0
.eh_frame:0000000000018E03                 db  41h ; A
.eh_frame:0000000000018E04                 db  0Eh
.eh_frame:0000000000018E05                 db  28h ; (
.eh_frame:0000000000018E06                 db  42h ; B
.eh_frame:0000000000018E07                 db  0Eh
.eh_frame:0000000000018E08                 db  20h
.eh_frame:0000000000018E09                 db  42h ; B
.eh_frame:0000000000018E0A                 db  0Eh
.eh_frame:0000000000018E0B                 db  18h
.eh_frame:0000000000018E0C                 db  42h ; B
.eh_frame:0000000000018E0D                 db  0Eh
.eh_frame:0000000000018E0E                 db  10h
.eh_frame:0000000000018E0F                 db  42h ; B
.eh_frame:0000000000018E10                 db  0Eh
.eh_frame:0000000000018E11                 db    8
.eh_frame:0000000000018E12                 db  41h ; A
.eh_frame:0000000000018E13                 db  0Bh
.eh_frame:0000000000018E14                 db  4Ch ; L
.eh_frame:0000000000018E15                 db    0
.eh_frame:0000000000018E16                 db    0
.eh_frame:0000000000018E17                 db    0
.eh_frame:0000000000018E18                 db    8
.eh_frame:0000000000018E19                 db  15h
.eh_frame:0000000000018E1A                 db    0
.eh_frame:0000000000018E1B                 db    0
.eh_frame:0000000000018E1C                 db 0E4h
.eh_frame:0000000000018E1D                 db    8
.eh_frame:0000000000018E1E                 db 0FFh
.eh_frame:0000000000018E1F                 db 0FFh
.eh_frame:0000000000018E20                 db 0A8h
.eh_frame:0000000000018E21                 db    1
.eh_frame:0000000000018E22                 db    0
.eh_frame:0000000000018E23                 db    0
.eh_frame:0000000000018E24                 db    0
.eh_frame:0000000000018E25                 db  5Eh ; ^
.eh_frame:0000000000018E26                 db  0Eh
.eh_frame:0000000000018E27                 db  10h
.eh_frame:0000000000018E28                 db  8Dh
.eh_frame:0000000000018E29                 db    2
.eh_frame:0000000000018E2A                 db  42h ; B
.eh_frame:0000000000018E2B                 db  0Eh
.eh_frame:0000000000018E2C                 db  18h
.eh_frame:0000000000018E2D                 db  8Ch
.eh_frame:0000000000018E2E                 db    3
.eh_frame:0000000000018E2F                 db  45h ; E
.eh_frame:0000000000018E30                 db  0Eh
.eh_frame:0000000000018E31                 db  20h
.eh_frame:0000000000018E32                 db  86h
.eh_frame:0000000000018E33                 db    4
.eh_frame:0000000000018E34                 db  41h ; A
.eh_frame:0000000000018E35                 db  0Eh
.eh_frame:0000000000018E36                 db  28h ; (
.eh_frame:0000000000018E37                 db  83h
.eh_frame:0000000000018E38                 db    5
.eh_frame:0000000000018E39                 db  4Dh ; M
.eh_frame:0000000000018E3A                 db  0Eh
.eh_frame:0000000000018E3B                 db  30h ; 0
.eh_frame:0000000000018E3C                 db    2
.eh_frame:0000000000018E3D                 db  95h
.eh_frame:0000000000018E3E                 db  0Eh
.eh_frame:0000000000018E3F                 db    8
.eh_frame:0000000000018E40                 db 0C3h
.eh_frame:0000000000018E41                 db 0C6h
.eh_frame:0000000000018E42                 db 0CCh
.eh_frame:0000000000018E43                 db 0CDh
.eh_frame:0000000000018E44                 db  48h ; H
.eh_frame:0000000000018E45                 db  0Eh
.eh_frame:0000000000018E46                 db  30h ; 0
.eh_frame:0000000000018E47                 db  83h
.eh_frame:0000000000018E48                 db    5
.eh_frame:0000000000018E49                 db  86h
.eh_frame:0000000000018E4A                 db    4
.eh_frame:0000000000018E4B                 db  8Ch
.eh_frame:0000000000018E4C                 db    3
.eh_frame:0000000000018E4D                 db  8Dh
.eh_frame:0000000000018E4E                 db    2
.eh_frame:0000000000018E4F                 db    2
.eh_frame:0000000000018E50                 db  90h
.eh_frame:0000000000018E51                 db  0Ah
.eh_frame:0000000000018E52                 db  0Eh
.eh_frame:0000000000018E53                 db  28h ; (
.eh_frame:0000000000018E54                 db  41h ; A
.eh_frame:0000000000018E55                 db  0Eh
.eh_frame:0000000000018E56                 db  20h
.eh_frame:0000000000018E57                 db  41h ; A
.eh_frame:0000000000018E58                 db  0Eh
.eh_frame:0000000000018E59                 db  18h
.eh_frame:0000000000018E5A                 db  42h ; B
.eh_frame:0000000000018E5B                 db  0Eh
.eh_frame:0000000000018E5C                 db  10h
.eh_frame:0000000000018E5D                 db  42h ; B
.eh_frame:0000000000018E5E                 db  0Eh
.eh_frame:0000000000018E5F                 db    8
.eh_frame:0000000000018E60                 db  4Ah ; J
.eh_frame:0000000000018E61                 db  0Bh
.eh_frame:0000000000018E62                 db    0
.eh_frame:0000000000018E63                 db    0
.eh_frame:0000000000018E64                 db  20h
.eh_frame:0000000000018E65                 db    0
.eh_frame:0000000000018E66                 db    0
.eh_frame:0000000000018E67                 db    0
.eh_frame:0000000000018E68                 db  58h ; X
.eh_frame:0000000000018E69                 db  15h
.eh_frame:0000000000018E6A                 db    0
.eh_frame:0000000000018E6B                 db    0
.eh_frame:0000000000018E6C                 db  44h ; D
.eh_frame:0000000000018E6D                 db  0Ah
.eh_frame:0000000000018E6E                 db 0FFh
.eh_frame:0000000000018E6F                 db 0FFh
.eh_frame:0000000000018E70                 db 0E0h
.eh_frame:0000000000018E71                 db    0
.eh_frame:0000000000018E72                 db    0
.eh_frame:0000000000018E73                 db    0
.eh_frame:0000000000018E74                 db    0
.eh_frame:0000000000018E75                 db  41h ; A
.eh_frame:0000000000018E76                 db  0Eh
.eh_frame:0000000000018E77                 db  10h
.eh_frame:0000000000018E78                 db  83h
.eh_frame:0000000000018E79                 db    2
.eh_frame:0000000000018E7A                 db  47h ; G
.eh_frame:0000000000018E7B                 db  0Eh
.eh_frame:0000000000018E7C                 db  30h ; 0
.eh_frame:0000000000018E7D                 db    2
.eh_frame:0000000000018E7E                 db  77h ; w
.eh_frame:0000000000018E7F                 db  0Ah
.eh_frame:0000000000018E80                 db  0Eh
.eh_frame:0000000000018E81                 db  10h
.eh_frame:0000000000018E82                 db  41h ; A
.eh_frame:0000000000018E83                 db  0Eh
.eh_frame:0000000000018E84                 db    8
.eh_frame:0000000000018E85                 db  48h ; H
.eh_frame:0000000000018E86                 db  0Bh
.eh_frame:0000000000018E87                 db    0
.eh_frame:0000000000018E88                 db  40h ; @
.eh_frame:0000000000018E89                 db    0
.eh_frame:0000000000018E8A                 db    0
.eh_frame:0000000000018E8B                 db    0
.eh_frame:0000000000018E8C                 db  7Ch ; |
.eh_frame:0000000000018E8D                 db  15h
.eh_frame:0000000000018E8E                 db    0
.eh_frame:0000000000018E8F                 db    0
.eh_frame:0000000000018E90                 db    0
.eh_frame:0000000000018E91                 db  0Bh
.eh_frame:0000000000018E92                 db 0FFh
.eh_frame:0000000000018E93                 db 0FFh
.eh_frame:0000000000018E94                 db 0D1h
.eh_frame:0000000000018E95                 db    0
.eh_frame:0000000000018E96                 db    0
.eh_frame:0000000000018E97                 db    0
.eh_frame:0000000000018E98                 db    0
.eh_frame:0000000000018E99                 db  42h ; B
.eh_frame:0000000000018E9A                 db  0Eh
.eh_frame:0000000000018E9B                 db  10h
.eh_frame:0000000000018E9C                 db  8Eh
.eh_frame:0000000000018E9D                 db    2
.eh_frame:0000000000018E9E                 db  42h ; B
.eh_frame:0000000000018E9F                 db  0Eh
.eh_frame:0000000000018EA0                 db  18h
.eh_frame:0000000000018EA1                 db  8Dh
.eh_frame:0000000000018EA2                 db    3
.eh_frame:0000000000018EA3                 db  46h ; F
.eh_frame:0000000000018EA4                 db  0Eh
.eh_frame:0000000000018EA5                 db  20h
.eh_frame:0000000000018EA6                 db  8Ch
.eh_frame:0000000000018EA7                 db    4
.eh_frame:0000000000018EA8                 db  41h ; A
.eh_frame:0000000000018EA9                 db  0Eh
.eh_frame:0000000000018EAA                 db  28h ; (
.eh_frame:0000000000018EAB                 db  86h
.eh_frame:0000000000018EAC                 db    5
.eh_frame:0000000000018EAD                 db  48h ; H
.eh_frame:0000000000018EAE                 db  0Eh
.eh_frame:0000000000018EAF                 db  30h ; 0
.eh_frame:0000000000018EB0                 db  83h
.eh_frame:0000000000018EB1                 db    6
.eh_frame:0000000000018EB2                 db  47h ; G
.eh_frame:0000000000018EB3                 db  0Eh
.eh_frame:0000000000018EB4                 db  40h ; @
.eh_frame:0000000000018EB5                 db    2
.eh_frame:0000000000018EB6                 db  96h
.eh_frame:0000000000018EB7                 db  0Ah
.eh_frame:0000000000018EB8                 db  0Eh
.eh_frame:0000000000018EB9                 db  30h ; 0
.eh_frame:0000000000018EBA                 db  41h ; A
.eh_frame:0000000000018EBB                 db  0Eh
.eh_frame:0000000000018EBC                 db  28h ; (
.eh_frame:0000000000018EBD                 db  41h ; A
.eh_frame:0000000000018EBE                 db  0Eh
.eh_frame:0000000000018EBF                 db  20h
.eh_frame:0000000000018EC0                 db  42h ; B
.eh_frame:0000000000018EC1                 db  0Eh
.eh_frame:0000000000018EC2                 db  18h
.eh_frame:0000000000018EC3                 db  42h ; B
.eh_frame:0000000000018EC4                 db  0Eh
.eh_frame:0000000000018EC5                 db  10h
.eh_frame:0000000000018EC6                 db  42h ; B
.eh_frame:0000000000018EC7                 db  0Eh
.eh_frame:0000000000018EC8                 db    8
.eh_frame:0000000000018EC9                 db  48h ; H
.eh_frame:0000000000018ECA                 db  0Bh
.eh_frame:0000000000018ECB                 db    0
.eh_frame:0000000000018ECC                 db  4Ch ; L
.eh_frame:0000000000018ECD                 db    0
.eh_frame:0000000000018ECE                 db    0
.eh_frame:0000000000018ECF                 db    0
.eh_frame:0000000000018ED0                 db 0C0h
.eh_frame:0000000000018ED1                 db  15h
.eh_frame:0000000000018ED2                 db    0
.eh_frame:0000000000018ED3                 db    0
.eh_frame:0000000000018ED4                 db  9Ch
.eh_frame:0000000000018ED5                 db  0Bh
.eh_frame:0000000000018ED6                 db 0FFh
.eh_frame:0000000000018ED7                 db 0FFh
.eh_frame:0000000000018ED8                 db  37h ; 7
.eh_frame:0000000000018ED9                 db    2
.eh_frame:0000000000018EDA                 db    0
.eh_frame:0000000000018EDB                 db    0
.eh_frame:0000000000018EDC                 db    0
.eh_frame:0000000000018EDD                 db  42h ; B
.eh_frame:0000000000018EDE                 db  0Eh
.eh_frame:0000000000018EDF                 db  10h
.eh_frame:0000000000018EE0                 db  8Fh
.eh_frame:0000000000018EE1                 db    2
.eh_frame:0000000000018EE2                 db  42h ; B
.eh_frame:0000000000018EE3                 db  0Eh
.eh_frame:0000000000018EE4                 db  18h
.eh_frame:0000000000018EE5                 db  8Eh
.eh_frame:0000000000018EE6                 db    3
.eh_frame:0000000000018EE7                 db  42h ; B
.eh_frame:0000000000018EE8                 db  0Eh
.eh_frame:0000000000018EE9                 db  20h
.eh_frame:0000000000018EEA                 db  8Dh
.eh_frame:0000000000018EEB                 db    4
.eh_frame:0000000000018EEC                 db  42h ; B
.eh_frame:0000000000018EED                 db  0Eh
.eh_frame:0000000000018EEE                 db  28h ; (
.eh_frame:0000000000018EEF                 db  8Ch
.eh_frame:0000000000018EF0                 db    5
.eh_frame:0000000000018EF1                 db  44h ; D
.eh_frame:0000000000018EF2                 db  0Eh
.eh_frame:0000000000018EF3                 db  30h ; 0
.eh_frame:0000000000018EF4                 db  86h
.eh_frame:0000000000018EF5                 db    6
.eh_frame:0000000000018EF6                 db  41h ; A
.eh_frame:0000000000018EF7                 db  0Eh
.eh_frame:0000000000018EF8                 db  38h ; 8
.eh_frame:0000000000018EF9                 db  83h
.eh_frame:0000000000018EFA                 db    7
.eh_frame:0000000000018EFB                 db  44h ; D
.eh_frame:0000000000018EFC                 db  0Eh
.eh_frame:0000000000018EFD                 db  80h
.eh_frame:0000000000018EFE                 db    1
.eh_frame:0000000000018EFF                 db    3
.eh_frame:0000000000018F00                 db  87h
.eh_frame:0000000000018F01                 db    1
.eh_frame:0000000000018F02                 db  0Ah
.eh_frame:0000000000018F03                 db  0Eh
.eh_frame:0000000000018F04                 db  38h ; 8
.eh_frame:0000000000018F05                 db  41h ; A
.eh_frame:0000000000018F06                 db  0Eh
.eh_frame:0000000000018F07                 db  30h ; 0
.eh_frame:0000000000018F08                 db  41h ; A
.eh_frame:0000000000018F09                 db  0Eh
.eh_frame:0000000000018F0A                 db  28h ; (
.eh_frame:0000000000018F0B                 db  42h ; B
.eh_frame:0000000000018F0C                 db  0Eh
.eh_frame:0000000000018F0D                 db  20h
.eh_frame:0000000000018F0E                 db  42h ; B
.eh_frame:0000000000018F0F                 db  0Eh
.eh_frame:0000000000018F10                 db  18h
.eh_frame:0000000000018F11                 db  42h ; B
.eh_frame:0000000000018F12                 db  0Eh
.eh_frame:0000000000018F13                 db  10h
.eh_frame:0000000000018F14                 db  42h ; B
.eh_frame:0000000000018F15                 db  0Eh
.eh_frame:0000000000018F16                 db    8
.eh_frame:0000000000018F17                 db  46h ; F
.eh_frame:0000000000018F18                 db  0Bh
.eh_frame:0000000000018F19                 db    0
.eh_frame:0000000000018F1A                 db    0
.eh_frame:0000000000018F1B                 db    0
.eh_frame:0000000000018F1C                 db  28h ; (
.eh_frame:0000000000018F1D                 db    0
.eh_frame:0000000000018F1E                 db    0
.eh_frame:0000000000018F1F                 db    0
.eh_frame:0000000000018F20                 db  10h
.eh_frame:0000000000018F21                 db  16h
.eh_frame:0000000000018F22                 db    0
.eh_frame:0000000000018F23                 db    0
.eh_frame:0000000000018F24                 db  8Ch
.eh_frame:0000000000018F25                 db  0Dh
.eh_frame:0000000000018F26                 db 0FFh
.eh_frame:0000000000018F27                 db 0FFh
.eh_frame:0000000000018F28                 db 0A0h
.eh_frame:0000000000018F29                 db    0
.eh_frame:0000000000018F2A                 db    0
.eh_frame:0000000000018F2B                 db    0
.eh_frame:0000000000018F2C                 db    0
.eh_frame:0000000000018F2D                 db  41h ; A
.eh_frame:0000000000018F2E                 db  0Eh
.eh_frame:0000000000018F2F                 db  10h
.eh_frame:0000000000018F30                 db  86h
.eh_frame:0000000000018F31                 db    2
.eh_frame:0000000000018F32                 db  41h ; A
.eh_frame:0000000000018F33                 db  0Eh
.eh_frame:0000000000018F34                 db  18h
.eh_frame:0000000000018F35                 db  83h
.eh_frame:0000000000018F36                 db    3
.eh_frame:0000000000018F37                 db  4Ah ; J
.eh_frame:0000000000018F38                 db  0Eh
.eh_frame:0000000000018F39                 db  30h ; 0
.eh_frame:0000000000018F3A                 db    2
.eh_frame:0000000000018F3B                 db  4Eh ; N
.eh_frame:0000000000018F3C                 db  0Ah
.eh_frame:0000000000018F3D                 db  0Eh
.eh_frame:0000000000018F3E                 db  18h
.eh_frame:0000000000018F3F                 db  41h ; A
.eh_frame:0000000000018F40                 db  0Eh
.eh_frame:0000000000018F41                 db  10h
.eh_frame:0000000000018F42                 db  41h ; A
.eh_frame:0000000000018F43                 db  0Eh
.eh_frame:0000000000018F44                 db    8
.eh_frame:0000000000018F45                 db  44h ; D
.eh_frame:0000000000018F46                 db  0Bh
.eh_frame:0000000000018F47                 db    0
.eh_frame:0000000000018F48                 db  38h ; 8
.eh_frame:0000000000018F49                 db    0
.eh_frame:0000000000018F4A                 db    0
.eh_frame:0000000000018F4B                 db    0
.eh_frame:0000000000018F4C                 db  3Ch ; <
.eh_frame:0000000000018F4D                 db  16h
.eh_frame:0000000000018F4E                 db    0
.eh_frame:0000000000018F4F                 db    0
.eh_frame:0000000000018F50                 db    0
.eh_frame:0000000000018F51                 db  0Eh
.eh_frame:0000000000018F52                 db 0FFh
.eh_frame:0000000000018F53                 db 0FFh
.eh_frame:0000000000018F54                 db  86h
.eh_frame:0000000000018F55                 db    0
.eh_frame:0000000000018F56                 db    0
.eh_frame:0000000000018F57                 db    0
.eh_frame:0000000000018F58                 db    0
.eh_frame:0000000000018F59                 db  42h ; B
.eh_frame:0000000000018F5A                 db  0Eh
.eh_frame:0000000000018F5B                 db  10h
.eh_frame:0000000000018F5C                 db  8Ch
.eh_frame:0000000000018F5D                 db    2
.eh_frame:0000000000018F5E                 db  41h ; A
.eh_frame:0000000000018F5F                 db  0Eh
.eh_frame:0000000000018F60                 db  18h
.eh_frame:0000000000018F61                 db  86h
.eh_frame:0000000000018F62                 db    3
.eh_frame:0000000000018F63                 db  41h ; A
.eh_frame:0000000000018F64                 db  0Eh
.eh_frame:0000000000018F65                 db  20h
.eh_frame:0000000000018F66                 db  83h
.eh_frame:0000000000018F67                 db    4
.eh_frame:0000000000018F68                 db    2
.eh_frame:0000000000018F69                 db  47h ; G
.eh_frame:0000000000018F6A                 db  0Ah
.eh_frame:0000000000018F6B                 db  0Eh
.eh_frame:0000000000018F6C                 db  18h
.eh_frame:0000000000018F6D                 db  41h ; A
.eh_frame:0000000000018F6E                 db  0Eh
.eh_frame:0000000000018F6F                 db  10h
.eh_frame:0000000000018F70                 db  42h ; B
.eh_frame:0000000000018F71                 db  0Eh
.eh_frame:0000000000018F72                 db    8
.eh_frame:0000000000018F73                 db  42h ; B
.eh_frame:0000000000018F74                 db  0Bh
.eh_frame:0000000000018F75                 db  52h ; R
.eh_frame:0000000000018F76                 db  0Ah
.eh_frame:0000000000018F77                 db  0Eh
.eh_frame:0000000000018F78                 db  18h
.eh_frame:0000000000018F79                 db  41h ; A
.eh_frame:0000000000018F7A                 db  0Eh
.eh_frame:0000000000018F7B                 db  10h
.eh_frame:0000000000018F7C                 db  42h ; B
.eh_frame:0000000000018F7D                 db  0Eh
.eh_frame:0000000000018F7E                 db    8
.eh_frame:0000000000018F7F                 db  4Bh ; K
.eh_frame:0000000000018F80                 db  0Bh
.eh_frame:0000000000018F81                 db    0
.eh_frame:0000000000018F82                 db    0
.eh_frame:0000000000018F83                 db    0
.eh_frame:0000000000018F84                 db  60h ; `
.eh_frame:0000000000018F85                 db    0
.eh_frame:0000000000018F86                 db    0
.eh_frame:0000000000018F87                 db    0
.eh_frame:0000000000018F88                 db  78h ; x
.eh_frame:0000000000018F89                 db  16h
.eh_frame:0000000000018F8A                 db    0
.eh_frame:0000000000018F8B                 db    0
.eh_frame:0000000000018F8C                 db  54h ; T
.eh_frame:0000000000018F8D                 db  0Eh
.eh_frame:0000000000018F8E                 db 0FFh
.eh_frame:0000000000018F8F                 db 0FFh
.eh_frame:0000000000018F90                 db  52h ; R
.eh_frame:0000000000018F91                 db    1
.eh_frame:0000000000018F92                 db    0
.eh_frame:0000000000018F93                 db    0
.eh_frame:0000000000018F94                 db    0
.eh_frame:0000000000018F95                 db  45h ; E
.eh_frame:0000000000018F96                 db  0Eh
.eh_frame:0000000000018F97                 db  10h
.eh_frame:0000000000018F98                 db  8Eh
.eh_frame:0000000000018F99                 db    2
.eh_frame:0000000000018F9A                 db  42h ; B
.eh_frame:0000000000018F9B                 db  0Eh
.eh_frame:0000000000018F9C                 db  18h
.eh_frame:0000000000018F9D                 db  8Dh
.eh_frame:0000000000018F9E                 db    3
.eh_frame:0000000000018F9F                 db  42h ; B
.eh_frame:0000000000018FA0                 db  0Eh
.eh_frame:0000000000018FA1                 db  20h
.eh_frame:0000000000018FA2                 db  8Ch
.eh_frame:0000000000018FA3                 db    4
.eh_frame:0000000000018FA4                 db  41h ; A
.eh_frame:0000000000018FA5                 db  0Eh
.eh_frame:0000000000018FA6                 db  28h ; (
.eh_frame:0000000000018FA7                 db  86h
.eh_frame:0000000000018FA8                 db    5
.eh_frame:0000000000018FA9                 db  41h ; A
.eh_frame:0000000000018FAA                 db  0Eh
.eh_frame:0000000000018FAB                 db  30h ; 0
.eh_frame:0000000000018FAC                 db  83h
.eh_frame:0000000000018FAD                 db    6
.eh_frame:0000000000018FAE                 db    2
.eh_frame:0000000000018FAF                 db 0C8h
.eh_frame:0000000000018FB0                 db  0Ah
.eh_frame:0000000000018FB1                 db  0Eh
.eh_frame:0000000000018FB2                 db  28h ; (
.eh_frame:0000000000018FB3                 db  41h ; A
.eh_frame:0000000000018FB4                 db  0Eh
.eh_frame:0000000000018FB5                 db  20h
.eh_frame:0000000000018FB6                 db  42h ; B
.eh_frame:0000000000018FB7                 db  0Eh
.eh_frame:0000000000018FB8                 db  18h
.eh_frame:0000000000018FB9                 db  42h ; B
.eh_frame:0000000000018FBA                 db  0Eh
.eh_frame:0000000000018FBB                 db  10h
.eh_frame:0000000000018FBC                 db  42h ; B
.eh_frame:0000000000018FBD                 db  0Eh
.eh_frame:0000000000018FBE                 db    8
.eh_frame:0000000000018FBF                 db  46h ; F
.eh_frame:0000000000018FC0                 db  0Bh
.eh_frame:0000000000018FC1                 db  44h ; D
.eh_frame:0000000000018FC2                 db  0Ah
.eh_frame:0000000000018FC3                 db  0Eh
.eh_frame:0000000000018FC4                 db  28h ; (
.eh_frame:0000000000018FC5                 db  41h ; A
.eh_frame:0000000000018FC6                 db  0Eh
.eh_frame:0000000000018FC7                 db  20h
.eh_frame:0000000000018FC8                 db  42h ; B
.eh_frame:0000000000018FC9                 db  0Eh
.eh_frame:0000000000018FCA                 db  18h
.eh_frame:0000000000018FCB                 db  42h ; B
.eh_frame:0000000000018FCC                 db  0Eh
.eh_frame:0000000000018FCD                 db  10h
.eh_frame:0000000000018FCE                 db  42h ; B
.eh_frame:0000000000018FCF                 db  0Eh
.eh_frame:0000000000018FD0                 db    8
.eh_frame:0000000000018FD1                 db  45h ; E
.eh_frame:0000000000018FD2                 db  0Bh
.eh_frame:0000000000018FD3                 db  4Dh ; M
.eh_frame:0000000000018FD4                 db  0Ah
.eh_frame:0000000000018FD5                 db  0Eh
.eh_frame:0000000000018FD6                 db  28h ; (
.eh_frame:0000000000018FD7                 db  41h ; A
.eh_frame:0000000000018FD8                 db  0Eh
.eh_frame:0000000000018FD9                 db  20h
.eh_frame:0000000000018FDA                 db  42h ; B
.eh_frame:0000000000018FDB                 db  0Eh
.eh_frame:0000000000018FDC                 db  18h
.eh_frame:0000000000018FDD                 db  42h ; B
.eh_frame:0000000000018FDE                 db  0Eh
.eh_frame:0000000000018FDF                 db  10h
.eh_frame:0000000000018FE0                 db  42h ; B
.eh_frame:0000000000018FE1                 db  0Eh
.eh_frame:0000000000018FE2                 db    8
.eh_frame:0000000000018FE3                 db  44h ; D
.eh_frame:0000000000018FE4                 db  0Bh
.eh_frame:0000000000018FE5                 db    0
.eh_frame:0000000000018FE6                 db    0
.eh_frame:0000000000018FE7                 db    0
.eh_frame:0000000000018FE8                 db  48h ; H
.eh_frame:0000000000018FE9                 db    0
.eh_frame:0000000000018FEA                 db    0
.eh_frame:0000000000018FEB                 db    0
.eh_frame:0000000000018FEC                 db 0DCh
.eh_frame:0000000000018FED                 db  16h
.eh_frame:0000000000018FEE                 db    0
.eh_frame:0000000000018FEF                 db    0
.eh_frame:0000000000018FF0                 db  50h ; P
.eh_frame:0000000000018FF1                 db  0Fh
.eh_frame:0000000000018FF2                 db 0FFh
.eh_frame:0000000000018FF3                 db 0FFh
.eh_frame:0000000000018FF4                 db 0BAh
.eh_frame:0000000000018FF5                 db    2
.eh_frame:0000000000018FF6                 db    0
.eh_frame:0000000000018FF7                 db    0
.eh_frame:0000000000018FF8                 db    0
.eh_frame:0000000000018FF9                 db  42h ; B
.eh_frame:0000000000018FFA                 db  0Eh
.eh_frame:0000000000018FFB                 db  10h
.eh_frame:0000000000018FFC                 db  8Fh
.eh_frame:0000000000018FFD                 db    2
.eh_frame:0000000000018FFE                 db  42h ; B
.eh_frame:0000000000018FFF                 db  0Eh
.eh_frame:0000000000019000                 db  18h
.eh_frame:0000000000019001                 db  8Eh
.eh_frame:0000000000019002                 db    3
.eh_frame:0000000000019003                 db  42h ; B
.eh_frame:0000000000019004                 db  0Eh
.eh_frame:0000000000019005                 db  20h
.eh_frame:0000000000019006                 db  8Dh
.eh_frame:0000000000019007                 db    4
.eh_frame:0000000000019008                 db  42h ; B
.eh_frame:0000000000019009                 db  0Eh
.eh_frame:000000000001900A                 db  28h ; (
.eh_frame:000000000001900B                 db  8Ch
.eh_frame:000000000001900C                 db    5
.eh_frame:000000000001900D                 db  41h ; A
.eh_frame:000000000001900E                 db  0Eh
.eh_frame:000000000001900F                 db  30h ; 0
.eh_frame:0000000000019010                 db  86h
.eh_frame:0000000000019011                 db    6
.eh_frame:0000000000019012                 db  41h ; A
.eh_frame:0000000000019013                 db  0Eh
.eh_frame:0000000000019014                 db  38h ; 8
.eh_frame:0000000000019015                 db  83h
.eh_frame:0000000000019016                 db    7
.eh_frame:0000000000019017                 db  44h ; D
.eh_frame:0000000000019018                 db  0Eh
.eh_frame:0000000000019019                 db  60h ; `
.eh_frame:000000000001901A                 db    2
.eh_frame:000000000001901B                 db 0A2h
.eh_frame:000000000001901C                 db  0Ah
.eh_frame:000000000001901D                 db  0Eh
.eh_frame:000000000001901E                 db  38h ; 8
.eh_frame:000000000001901F                 db  44h ; D
.eh_frame:0000000000019020                 db  0Eh
.eh_frame:0000000000019021                 db  30h ; 0
.eh_frame:0000000000019022                 db  41h ; A
.eh_frame:0000000000019023                 db  0Eh
.eh_frame:0000000000019024                 db  28h ; (
.eh_frame:0000000000019025                 db  42h ; B
.eh_frame:0000000000019026                 db  0Eh
.eh_frame:0000000000019027                 db  20h
.eh_frame:0000000000019028                 db  42h ; B
.eh_frame:0000000000019029                 db  0Eh
.eh_frame:000000000001902A                 db  18h
.eh_frame:000000000001902B                 db  42h ; B
.eh_frame:000000000001902C                 db  0Eh
.eh_frame:000000000001902D                 db  10h
.eh_frame:000000000001902E                 db  42h ; B
.eh_frame:000000000001902F                 db  0Eh
.eh_frame:0000000000019030                 db    8
.eh_frame:0000000000019031                 db  43h ; C
.eh_frame:0000000000019032                 db  0Bh
.eh_frame:0000000000019033                 db    0
.eh_frame:0000000000019034                 db  48h ; H
.eh_frame:0000000000019035                 db    0
.eh_frame:0000000000019036                 db    0
.eh_frame:0000000000019037                 db    0
.eh_frame:0000000000019038                 db  28h ; (
.eh_frame:0000000000019039                 db  17h
.eh_frame:000000000001903A                 db    0
.eh_frame:000000000001903B                 db    0
.eh_frame:000000000001903C                 db 0C4h
.eh_frame:000000000001903D                 db  11h
.eh_frame:000000000001903E                 db 0FFh
.eh_frame:000000000001903F                 db 0FFh
.eh_frame:0000000000019040                 db 0FAh
.eh_frame:0000000000019041                 db    1
.eh_frame:0000000000019042                 db    0
.eh_frame:0000000000019043                 db    0
.eh_frame:0000000000019044                 db    0
.eh_frame:0000000000019045                 db  42h ; B
.eh_frame:0000000000019046                 db  0Eh
.eh_frame:0000000000019047                 db  10h
.eh_frame:0000000000019048                 db  8Fh
.eh_frame:0000000000019049                 db    2
.eh_frame:000000000001904A                 db  42h ; B
.eh_frame:000000000001904B                 db  0Eh
.eh_frame:000000000001904C                 db  18h
.eh_frame:000000000001904D                 db  8Eh
.eh_frame:000000000001904E                 db    3
.eh_frame:000000000001904F                 db  42h ; B
.eh_frame:0000000000019050                 db  0Eh
.eh_frame:0000000000019051                 db  20h
.eh_frame:0000000000019052                 db  8Dh
.eh_frame:0000000000019053                 db    4
.eh_frame:0000000000019054                 db  42h ; B
.eh_frame:0000000000019055                 db  0Eh
.eh_frame:0000000000019056                 db  28h ; (
.eh_frame:0000000000019057                 db  8Ch
.eh_frame:0000000000019058                 db    5
.eh_frame:0000000000019059                 db  41h ; A
.eh_frame:000000000001905A                 db  0Eh
.eh_frame:000000000001905B                 db  30h ; 0
.eh_frame:000000000001905C                 db  86h
.eh_frame:000000000001905D                 db    6
.eh_frame:000000000001905E                 db  41h ; A
.eh_frame:000000000001905F                 db  0Eh
.eh_frame:0000000000019060                 db  38h ; 8
.eh_frame:0000000000019061                 db  83h
.eh_frame:0000000000019062                 db    7
.eh_frame:0000000000019063                 db  44h ; D
.eh_frame:0000000000019064                 db  0Eh
.eh_frame:0000000000019065                 db  40h ; @
.eh_frame:0000000000019066                 db    3
.eh_frame:0000000000019067                 db  85h
.eh_frame:0000000000019068                 db    1
.eh_frame:0000000000019069                 db  0Ah
.eh_frame:000000000001906A                 db  0Eh
.eh_frame:000000000001906B                 db  38h ; 8
.eh_frame:000000000001906C                 db  44h ; D
.eh_frame:000000000001906D                 db  0Eh
.eh_frame:000000000001906E                 db  30h ; 0
.eh_frame:000000000001906F                 db  41h ; A
.eh_frame:0000000000019070                 db  0Eh
.eh_frame:0000000000019071                 db  28h ; (
.eh_frame:0000000000019072                 db  42h ; B
.eh_frame:0000000000019073                 db  0Eh
.eh_frame:0000000000019074                 db  20h
.eh_frame:0000000000019075                 db  42h ; B
.eh_frame:0000000000019076                 db  0Eh
.eh_frame:0000000000019077                 db  18h
.eh_frame:0000000000019078                 db  42h ; B
.eh_frame:0000000000019079                 db  0Eh
.eh_frame:000000000001907A                 db  10h
.eh_frame:000000000001907B                 db  42h ; B
.eh_frame:000000000001907C                 db  0Eh
.eh_frame:000000000001907D                 db    8
.eh_frame:000000000001907E                 db  48h ; H
.eh_frame:000000000001907F                 db  0Bh
.eh_frame:0000000000019080                 db  48h ; H
.eh_frame:0000000000019081                 db    0
.eh_frame:0000000000019082                 db    0
.eh_frame:0000000000019083                 db    0
.eh_frame:0000000000019084                 db  74h ; t
.eh_frame:0000000000019085                 db  17h
.eh_frame:0000000000019086                 db    0
.eh_frame:0000000000019087                 db    0
.eh_frame:0000000000019088                 db  78h ; x
.eh_frame:0000000000019089                 db  13h
.eh_frame:000000000001908A                 db 0FFh
.eh_frame:000000000001908B                 db 0FFh
.eh_frame:000000000001908C                 db 0DCh
.eh_frame:000000000001908D                 db    0
.eh_frame:000000000001908E                 db    0
.eh_frame:000000000001908F                 db    0
.eh_frame:0000000000019090                 db    0
.eh_frame:0000000000019091                 db  42h ; B
.eh_frame:0000000000019092                 db  0Eh
.eh_frame:0000000000019093                 db  10h
.eh_frame:0000000000019094                 db  8Fh
.eh_frame:0000000000019095                 db    2
.eh_frame:0000000000019096                 db  42h ; B
.eh_frame:0000000000019097                 db  0Eh
.eh_frame:0000000000019098                 db  18h
.eh_frame:0000000000019099                 db  8Eh
.eh_frame:000000000001909A                 db    3
.eh_frame:000000000001909B                 db  42h ; B
.eh_frame:000000000001909C                 db  0Eh
.eh_frame:000000000001909D                 db  20h
.eh_frame:000000000001909E                 db  8Dh
.eh_frame:000000000001909F                 db    4
.eh_frame:00000000000190A0                 db  42h ; B
.eh_frame:00000000000190A1                 db  0Eh
.eh_frame:00000000000190A2                 db  28h ; (
.eh_frame:00000000000190A3                 db  8Ch
.eh_frame:00000000000190A4                 db    5
.eh_frame:00000000000190A5                 db  41h ; A
.eh_frame:00000000000190A6                 db  0Eh
.eh_frame:00000000000190A7                 db  30h ; 0
.eh_frame:00000000000190A8                 db  86h
.eh_frame:00000000000190A9                 db    6
.eh_frame:00000000000190AA                 db  41h ; A
.eh_frame:00000000000190AB                 db  0Eh
.eh_frame:00000000000190AC                 db  38h ; 8
.eh_frame:00000000000190AD                 db  83h
.eh_frame:00000000000190AE                 db    7
.eh_frame:00000000000190AF                 db  44h ; D
.eh_frame:00000000000190B0                 db  0Eh
.eh_frame:00000000000190B1                 db  80h
.eh_frame:00000000000190B2                 db    1
.eh_frame:00000000000190B3                 db    2
.eh_frame:00000000000190B4                 db 0BEh
.eh_frame:00000000000190B5                 db  0Ah
.eh_frame:00000000000190B6                 db  0Eh
.eh_frame:00000000000190B7                 db  38h ; 8
.eh_frame:00000000000190B8                 db  41h ; A
.eh_frame:00000000000190B9                 db  0Eh
.eh_frame:00000000000190BA                 db  30h ; 0
.eh_frame:00000000000190BB                 db  41h ; A
.eh_frame:00000000000190BC                 db  0Eh
.eh_frame:00000000000190BD                 db  28h ; (
.eh_frame:00000000000190BE                 db  42h ; B
.eh_frame:00000000000190BF                 db  0Eh
.eh_frame:00000000000190C0                 db  20h
.eh_frame:00000000000190C1                 db  42h ; B
.eh_frame:00000000000190C2                 db  0Eh
.eh_frame:00000000000190C3                 db  18h
.eh_frame:00000000000190C4                 db  42h ; B
.eh_frame:00000000000190C5                 db  0Eh
.eh_frame:00000000000190C6                 db  10h
.eh_frame:00000000000190C7                 db  42h ; B
.eh_frame:00000000000190C8                 db  0Eh
.eh_frame:00000000000190C9                 db    8
.eh_frame:00000000000190CA                 db  41h ; A
.eh_frame:00000000000190CB                 db  0Bh
.eh_frame:00000000000190CC                 db  48h ; H
.eh_frame:00000000000190CD                 db    0
.eh_frame:00000000000190CE                 db    0
.eh_frame:00000000000190CF                 db    0
.eh_frame:00000000000190D0                 db 0C0h
.eh_frame:00000000000190D1                 db  17h
.eh_frame:00000000000190D2                 db    0
.eh_frame:00000000000190D3                 db    0
.eh_frame:00000000000190D4                 db  0Ch
.eh_frame:00000000000190D5                 db  14h
.eh_frame:00000000000190D6                 db 0FFh
.eh_frame:00000000000190D7                 db 0FFh
.eh_frame:00000000000190D8                 db  9Eh
.eh_frame:00000000000190D9                 db    3
.eh_frame:00000000000190DA                 db    0
.eh_frame:00000000000190DB                 db    0
.eh_frame:00000000000190DC                 db    0
.eh_frame:00000000000190DD                 db  42h ; B
.eh_frame:00000000000190DE                 db  0Eh
.eh_frame:00000000000190DF                 db  10h
.eh_frame:00000000000190E0                 db  8Fh
.eh_frame:00000000000190E1                 db    2
.eh_frame:00000000000190E2                 db  42h ; B
.eh_frame:00000000000190E3                 db  0Eh
.eh_frame:00000000000190E4                 db  18h
.eh_frame:00000000000190E5                 db  8Eh
.eh_frame:00000000000190E6                 db    3
.eh_frame:00000000000190E7                 db  42h ; B
.eh_frame:00000000000190E8                 db  0Eh
.eh_frame:00000000000190E9                 db  20h
.eh_frame:00000000000190EA                 db  8Dh
.eh_frame:00000000000190EB                 db    4
.eh_frame:00000000000190EC                 db  42h ; B
.eh_frame:00000000000190ED                 db  0Eh
.eh_frame:00000000000190EE                 db  28h ; (
.eh_frame:00000000000190EF                 db  8Ch
.eh_frame:00000000000190F0                 db    5
.eh_frame:00000000000190F1                 db  44h ; D
.eh_frame:00000000000190F2                 db  0Eh
.eh_frame:00000000000190F3                 db  30h ; 0
.eh_frame:00000000000190F4                 db  86h
.eh_frame:00000000000190F5                 db    6
.eh_frame:00000000000190F6                 db  41h ; A
.eh_frame:00000000000190F7                 db  0Eh
.eh_frame:00000000000190F8                 db  38h ; 8
.eh_frame:00000000000190F9                 db  83h
.eh_frame:00000000000190FA                 db    7
.eh_frame:00000000000190FB                 db  4Ch ; L
.eh_frame:00000000000190FC                 db  0Eh
.eh_frame:00000000000190FD                 db 0B0h
.eh_frame:00000000000190FE                 db    1
.eh_frame:00000000000190FF                 db    2
.eh_frame:0000000000019100                 db 0BEh
.eh_frame:0000000000019101                 db  0Ah
.eh_frame:0000000000019102                 db  0Eh
.eh_frame:0000000000019103                 db  38h ; 8
.eh_frame:0000000000019104                 db  41h ; A
.eh_frame:0000000000019105                 db  0Eh
.eh_frame:0000000000019106                 db  30h ; 0
.eh_frame:0000000000019107                 db  41h ; A
.eh_frame:0000000000019108                 db  0Eh
.eh_frame:0000000000019109                 db  28h ; (
.eh_frame:000000000001910A                 db  42h ; B
.eh_frame:000000000001910B                 db  0Eh
.eh_frame:000000000001910C                 db  20h
.eh_frame:000000000001910D                 db  42h ; B
.eh_frame:000000000001910E                 db  0Eh
.eh_frame:000000000001910F                 db  18h
.eh_frame:0000000000019110                 db  42h ; B
.eh_frame:0000000000019111                 db  0Eh
.eh_frame:0000000000019112                 db  10h
.eh_frame:0000000000019113                 db  42h ; B
.eh_frame:0000000000019114                 db  0Eh
.eh_frame:0000000000019115                 db    8
.eh_frame:0000000000019116                 db  47h ; G
.eh_frame:0000000000019117                 db  0Bh
.eh_frame:0000000000019118                 db  48h ; H
.eh_frame:0000000000019119                 db    0
.eh_frame:000000000001911A                 db    0
.eh_frame:000000000001911B                 db    0
.eh_frame:000000000001911C                 db  0Ch
.eh_frame:000000000001911D                 db  18h
.eh_frame:000000000001911E                 db    0
.eh_frame:000000000001911F                 db    0
.eh_frame:0000000000019120                 db  60h ; `
.eh_frame:0000000000019121                 db  17h
.eh_frame:0000000000019122                 db 0FFh
.eh_frame:0000000000019123                 db 0FFh
.eh_frame:0000000000019124                 db  41h ; A
.eh_frame:0000000000019125                 db    1
.eh_frame:0000000000019126                 db    0
.eh_frame:0000000000019127                 db    0
.eh_frame:0000000000019128                 db    0
.eh_frame:0000000000019129                 db  42h ; B
.eh_frame:000000000001912A                 db  0Eh
.eh_frame:000000000001912B                 db  10h
.eh_frame:000000000001912C                 db  8Fh
.eh_frame:000000000001912D                 db    2
.eh_frame:000000000001912E                 db  42h ; B
.eh_frame:000000000001912F                 db  0Eh
.eh_frame:0000000000019130                 db  18h
.eh_frame:0000000000019131                 db  8Eh
.eh_frame:0000000000019132                 db    3
.eh_frame:0000000000019133                 db  42h ; B
.eh_frame:0000000000019134                 db  0Eh
.eh_frame:0000000000019135                 db  20h
.eh_frame:0000000000019136                 db  8Dh
.eh_frame:0000000000019137                 db    4
.eh_frame:0000000000019138                 db  42h ; B
.eh_frame:0000000000019139                 db  0Eh
.eh_frame:000000000001913A                 db  28h ; (
.eh_frame:000000000001913B                 db  8Ch
.eh_frame:000000000001913C                 db    5
.eh_frame:000000000001913D                 db  41h ; A
.eh_frame:000000000001913E                 db  0Eh
.eh_frame:000000000001913F                 db  30h ; 0
.eh_frame:0000000000019140                 db  86h
.eh_frame:0000000000019141                 db    6
.eh_frame:0000000000019142                 db  41h ; A
.eh_frame:0000000000019143                 db  0Eh
.eh_frame:0000000000019144                 db  38h ; 8
.eh_frame:0000000000019145                 db  83h
.eh_frame:0000000000019146                 db    7
.eh_frame:0000000000019147                 db  44h ; D
.eh_frame:0000000000019148                 db  0Eh
.eh_frame:0000000000019149                 db  60h ; `
.eh_frame:000000000001914A                 db    2
.eh_frame:000000000001914B                 db 0D8h
.eh_frame:000000000001914C                 db  0Ah
.eh_frame:000000000001914D                 db  0Eh
.eh_frame:000000000001914E                 db  38h ; 8
.eh_frame:000000000001914F                 db  41h ; A
.eh_frame:0000000000019150                 db  0Eh
.eh_frame:0000000000019151                 db  30h ; 0
.eh_frame:0000000000019152                 db  41h ; A
.eh_frame:0000000000019153                 db  0Eh
.eh_frame:0000000000019154                 db  28h ; (
.eh_frame:0000000000019155                 db  42h ; B
.eh_frame:0000000000019156                 db  0Eh
.eh_frame:0000000000019157                 db  20h
.eh_frame:0000000000019158                 db  42h ; B
.eh_frame:0000000000019159                 db  0Eh
.eh_frame:000000000001915A                 db  18h
.eh_frame:000000000001915B                 db  42h ; B
.eh_frame:000000000001915C                 db  0Eh
.eh_frame:000000000001915D                 db  10h
.eh_frame:000000000001915E                 db  42h ; B
.eh_frame:000000000001915F                 db  0Eh
.eh_frame:0000000000019160                 db    8
.eh_frame:0000000000019161                 db  41h ; A
.eh_frame:0000000000019162                 db  0Bh
.eh_frame:0000000000019163                 db    0
.eh_frame:0000000000019164                 db  40h ; @
.eh_frame:0000000000019165                 db    0
.eh_frame:0000000000019166                 db    0
.eh_frame:0000000000019167                 db    0
.eh_frame:0000000000019168                 db  58h ; X
.eh_frame:0000000000019169                 db  18h
.eh_frame:000000000001916A                 db    0
.eh_frame:000000000001916B                 db    0
.eh_frame:000000000001916C                 db  64h ; d
.eh_frame:000000000001916D                 db  18h
.eh_frame:000000000001916E                 db 0FFh
.eh_frame:000000000001916F                 db 0FFh
.eh_frame:0000000000019170                 db 0E6h
.eh_frame:0000000000019171                 db    0
.eh_frame:0000000000019172                 db    0
.eh_frame:0000000000019173                 db    0
.eh_frame:0000000000019174                 db    0
.eh_frame:0000000000019175                 db  41h ; A
.eh_frame:0000000000019176                 db  0Eh
.eh_frame:0000000000019177                 db  10h
.eh_frame:0000000000019178                 db  86h
.eh_frame:0000000000019179                 db    2
.eh_frame:000000000001917A                 db  41h ; A
.eh_frame:000000000001917B                 db  0Eh
.eh_frame:000000000001917C                 db  18h
.eh_frame:000000000001917D                 db  83h
.eh_frame:000000000001917E                 db    3
.eh_frame:000000000001917F                 db  47h ; G
.eh_frame:0000000000019180                 db  0Eh
.eh_frame:0000000000019181                 db  20h
.eh_frame:0000000000019182                 db    2
.eh_frame:0000000000019183                 db  4Dh ; M
.eh_frame:0000000000019184                 db  0Ah
.eh_frame:0000000000019185                 db  0Eh
.eh_frame:0000000000019186                 db  18h
.eh_frame:0000000000019187                 db  41h ; A
.eh_frame:0000000000019188                 db  0Eh
.eh_frame:0000000000019189                 db  10h
.eh_frame:000000000001918A                 db  41h ; A
.eh_frame:000000000001918B                 db  0Eh
.eh_frame:000000000001918C                 db    8
.eh_frame:000000000001918D                 db  48h ; H
.eh_frame:000000000001918E                 db  0Bh
.eh_frame:000000000001918F                 db  47h ; G
.eh_frame:0000000000019190                 db  0Ah
.eh_frame:0000000000019191                 db  0Eh
.eh_frame:0000000000019192                 db  18h
.eh_frame:0000000000019193                 db  41h ; A
.eh_frame:0000000000019194                 db  0Eh
.eh_frame:0000000000019195                 db  10h
.eh_frame:0000000000019196                 db  41h ; A
.eh_frame:0000000000019197                 db  0Eh
.eh_frame:0000000000019198                 db    8
.eh_frame:0000000000019199                 db  47h ; G
.eh_frame:000000000001919A                 db  0Bh
.eh_frame:000000000001919B                 db  7Ch ; |
.eh_frame:000000000001919C                 db  0Ah
.eh_frame:000000000001919D                 db  0Eh
.eh_frame:000000000001919E                 db  18h
.eh_frame:000000000001919F                 db  43h ; C
.eh_frame:00000000000191A0                 db  0Eh
.eh_frame:00000000000191A1                 db  10h
.eh_frame:00000000000191A2                 db  41h ; A
.eh_frame:00000000000191A3                 db  0Eh
.eh_frame:00000000000191A4                 db    8
.eh_frame:00000000000191A5                 db  48h ; H
.eh_frame:00000000000191A6                 db  0Bh
.eh_frame:00000000000191A7                 db    0
.eh_frame:00000000000191A8                 db  24h ; $
.eh_frame:00000000000191A9                 db    0
.eh_frame:00000000000191AA                 db    0
.eh_frame:00000000000191AB                 db    0
.eh_frame:00000000000191AC                 db  9Ch
.eh_frame:00000000000191AD                 db  18h
.eh_frame:00000000000191AE                 db    0
.eh_frame:00000000000191AF                 db    0
.eh_frame:00000000000191B0                 db  10h
.eh_frame:00000000000191B1                 db  19h
.eh_frame:00000000000191B2                 db 0FFh
.eh_frame:00000000000191B3                 db 0FFh
.eh_frame:00000000000191B4                 db  10h
.eh_frame:00000000000191B5                 db    1
.eh_frame:00000000000191B6                 db    0
.eh_frame:00000000000191B7                 db    0
.eh_frame:00000000000191B8                 db    0
.eh_frame:00000000000191B9                 db    2
.eh_frame:00000000000191BA                 db  51h ; Q
.eh_frame:00000000000191BB                 db  0Eh
.eh_frame:00000000000191BC                 db  10h
.eh_frame:00000000000191BD                 db  83h
.eh_frame:00000000000191BE                 db    2
.eh_frame:00000000000191BF                 db    2
.eh_frame:00000000000191C0                 db  5Ch ; \
.eh_frame:00000000000191C1                 db  0Eh
.eh_frame:00000000000191C2                 db    8
.eh_frame:00000000000191C3                 db  43h ; C
.eh_frame:00000000000191C4                 db 0C3h
.eh_frame:00000000000191C5                 db  78h ; x
.eh_frame:00000000000191C6                 db  0Eh
.eh_frame:00000000000191C7                 db  10h
.eh_frame:00000000000191C8                 db  83h
.eh_frame:00000000000191C9                 db    2
.eh_frame:00000000000191CA                 db  4Ch ; L
.eh_frame:00000000000191CB                 db  0Eh
.eh_frame:00000000000191CC                 db    8
.eh_frame:00000000000191CD                 db  44h ; D
.eh_frame:00000000000191CE                 db 0C3h
.eh_frame:00000000000191CF                 db    0
.eh_frame:00000000000191D0                 db  34h ; 4
.eh_frame:00000000000191D1                 db    0
.eh_frame:00000000000191D2                 db    0
.eh_frame:00000000000191D3                 db    0
.eh_frame:00000000000191D4                 db 0C4h
.eh_frame:00000000000191D5                 db  18h
.eh_frame:00000000000191D6                 db    0
.eh_frame:00000000000191D7                 db    0
.eh_frame:00000000000191D8                 db 0F8h
.eh_frame:00000000000191D9                 db  19h
.eh_frame:00000000000191DA                 db 0FFh
.eh_frame:00000000000191DB                 db 0FFh
.eh_frame:00000000000191DC                 db 0CFh
.eh_frame:00000000000191DD                 db    0
.eh_frame:00000000000191DE                 db    0
.eh_frame:00000000000191DF                 db    0
.eh_frame:00000000000191E0                 db    0
.eh_frame:00000000000191E1                 db  42h ; B
.eh_frame:00000000000191E2                 db  0Eh
.eh_frame:00000000000191E3                 db  10h
.eh_frame:00000000000191E4                 db  8Ch
.eh_frame:00000000000191E5                 db    2
.eh_frame:00000000000191E6                 db  44h ; D
.eh_frame:00000000000191E7                 db  0Eh
.eh_frame:00000000000191E8                 db  18h
.eh_frame:00000000000191E9                 db  86h
.eh_frame:00000000000191EA                 db    3
.eh_frame:00000000000191EB                 db  41h ; A
.eh_frame:00000000000191EC                 db  0Eh
.eh_frame:00000000000191ED                 db  20h
.eh_frame:00000000000191EE                 db  83h
.eh_frame:00000000000191EF                 db    4
.eh_frame:00000000000191F0                 db    2
.eh_frame:00000000000191F1                 db  9Fh
.eh_frame:00000000000191F2                 db  0Ah
.eh_frame:00000000000191F3                 db  0Eh
.eh_frame:00000000000191F4                 db  18h
.eh_frame:00000000000191F5                 db  41h ; A
.eh_frame:00000000000191F6                 db  0Eh
.eh_frame:00000000000191F7                 db  10h
.eh_frame:00000000000191F8                 db  42h ; B
.eh_frame:00000000000191F9                 db  0Eh
.eh_frame:00000000000191FA                 db    8
.eh_frame:00000000000191FB                 db  47h ; G
.eh_frame:00000000000191FC                 db  0Bh
.eh_frame:00000000000191FD                 db  59h ; Y
.eh_frame:00000000000191FE                 db  0Eh
.eh_frame:00000000000191FF                 db  18h
.eh_frame:0000000000019200                 db  43h ; C
.eh_frame:0000000000019201                 db  0Eh
.eh_frame:0000000000019202                 db  10h
.eh_frame:0000000000019203                 db  42h ; B
.eh_frame:0000000000019204                 db  0Eh
.eh_frame:0000000000019205                 db    8
.eh_frame:0000000000019206                 db    0
.eh_frame:0000000000019207                 db    0
.eh_frame:0000000000019208                 db  4Ch ; L
.eh_frame:0000000000019209                 db    0
.eh_frame:000000000001920A                 db    0
.eh_frame:000000000001920B                 db    0
.eh_frame:000000000001920C                 db 0FCh
.eh_frame:000000000001920D                 db  18h
.eh_frame:000000000001920E                 db    0
.eh_frame:000000000001920F                 db    0
.eh_frame:0000000000019210                 db  90h
.eh_frame:0000000000019211                 db  1Ah
.eh_frame:0000000000019212                 db 0FFh
.eh_frame:0000000000019213                 db 0FFh
.eh_frame:0000000000019214                 db  9Fh
.eh_frame:0000000000019215                 db    7
.eh_frame:0000000000019216                 db    0
.eh_frame:0000000000019217                 db    0
.eh_frame:0000000000019218                 db    0
.eh_frame:0000000000019219                 db  42h ; B
.eh_frame:000000000001921A                 db  0Eh
.eh_frame:000000000001921B                 db  10h
.eh_frame:000000000001921C                 db  8Fh
.eh_frame:000000000001921D                 db    2
.eh_frame:000000000001921E                 db  42h ; B
.eh_frame:000000000001921F                 db  0Eh
.eh_frame:0000000000019220                 db  18h
.eh_frame:0000000000019221                 db  8Eh
.eh_frame:0000000000019222                 db    3
.eh_frame:0000000000019223                 db  45h ; E
.eh_frame:0000000000019224                 db  0Eh
.eh_frame:0000000000019225                 db  20h
.eh_frame:0000000000019226                 db  8Dh
.eh_frame:0000000000019227                 db    4
.eh_frame:0000000000019228                 db  42h ; B
.eh_frame:0000000000019229                 db  0Eh
.eh_frame:000000000001922A                 db  28h ; (
.eh_frame:000000000001922B                 db  8Ch
.eh_frame:000000000001922C                 db    5
.eh_frame:000000000001922D                 db  44h ; D
.eh_frame:000000000001922E                 db  0Eh
.eh_frame:000000000001922F                 db  30h ; 0
.eh_frame:0000000000019230                 db  86h
.eh_frame:0000000000019231                 db    6
.eh_frame:0000000000019232                 db  41h ; A
.eh_frame:0000000000019233                 db  0Eh
.eh_frame:0000000000019234                 db  38h ; 8
.eh_frame:0000000000019235                 db  83h
.eh_frame:0000000000019236                 db    7
.eh_frame:0000000000019237                 db  4Ah ; J
.eh_frame:0000000000019238                 db  0Eh
.eh_frame:0000000000019239                 db  80h
.eh_frame:000000000001923A                 db    1
.eh_frame:000000000001923B                 db    3
.eh_frame:000000000001923C                 db  3Bh ; ;
.eh_frame:000000000001923D                 db    1
.eh_frame:000000000001923E                 db  0Ah
.eh_frame:000000000001923F                 db  0Eh
.eh_frame:0000000000019240                 db  38h ; 8
.eh_frame:0000000000019241                 db  41h ; A
.eh_frame:0000000000019242                 db  0Eh
.eh_frame:0000000000019243                 db  30h ; 0
.eh_frame:0000000000019244                 db  41h ; A
.eh_frame:0000000000019245                 db  0Eh
.eh_frame:0000000000019246                 db  28h ; (
.eh_frame:0000000000019247                 db  42h ; B
.eh_frame:0000000000019248                 db  0Eh
.eh_frame:0000000000019249                 db  20h
.eh_frame:000000000001924A                 db  42h ; B
.eh_frame:000000000001924B                 db  0Eh
.eh_frame:000000000001924C                 db  18h
.eh_frame:000000000001924D                 db  42h ; B
.eh_frame:000000000001924E                 db  0Eh
.eh_frame:000000000001924F                 db  10h
.eh_frame:0000000000019250                 db  42h ; B
.eh_frame:0000000000019251                 db  0Eh
.eh_frame:0000000000019252                 db    8
.eh_frame:0000000000019253                 db  41h ; A
.eh_frame:0000000000019254                 db  0Bh
.eh_frame:0000000000019255                 db    0
.eh_frame:0000000000019256                 db    0
.eh_frame:0000000000019257                 db    0
.eh_frame:0000000000019258                 db  4Ch ; L
.eh_frame:0000000000019259                 db    0
.eh_frame:000000000001925A                 db    0
.eh_frame:000000000001925B                 db    0
.eh_frame:000000000001925C                 db  4Ch ; L
.eh_frame:000000000001925D                 db  19h
.eh_frame:000000000001925E                 db    0
.eh_frame:000000000001925F                 db    0
.eh_frame:0000000000019260                 db 0E0h
.eh_frame:0000000000019261                 db  21h ; !
.eh_frame:0000000000019262                 db 0FFh
.eh_frame:0000000000019263                 db 0FFh
.eh_frame:0000000000019264                 db  3Bh ; ;
.eh_frame:0000000000019265                 db    2
.eh_frame:0000000000019266                 db    0
.eh_frame:0000000000019267                 db    0
.eh_frame:0000000000019268                 db    0
.eh_frame:0000000000019269                 db  42h ; B
.eh_frame:000000000001926A                 db  0Eh
.eh_frame:000000000001926B                 db  10h
.eh_frame:000000000001926C                 db  8Fh
.eh_frame:000000000001926D                 db    2
.eh_frame:000000000001926E                 db  42h ; B
.eh_frame:000000000001926F                 db  0Eh
.eh_frame:0000000000019270                 db  18h
.eh_frame:0000000000019271                 db  8Eh
.eh_frame:0000000000019272                 db    3
.eh_frame:0000000000019273                 db  45h ; E
.eh_frame:0000000000019274                 db  0Eh
.eh_frame:0000000000019275                 db  20h
.eh_frame:0000000000019276                 db  8Dh
.eh_frame:0000000000019277                 db    4
.eh_frame:0000000000019278                 db  42h ; B
.eh_frame:0000000000019279                 db  0Eh
.eh_frame:000000000001927A                 db  28h ; (
.eh_frame:000000000001927B                 db  8Ch
.eh_frame:000000000001927C                 db    5
.eh_frame:000000000001927D                 db  45h ; E
.eh_frame:000000000001927E                 db  0Eh
.eh_frame:000000000001927F                 db  30h ; 0
.eh_frame:0000000000019280                 db  86h
.eh_frame:0000000000019281                 db    6
.eh_frame:0000000000019282                 db  41h ; A
.eh_frame:0000000000019283                 db  0Eh
.eh_frame:0000000000019284                 db  38h ; 8
.eh_frame:0000000000019285                 db  83h
.eh_frame:0000000000019286                 db    7
.eh_frame:0000000000019287                 db  48h ; H
.eh_frame:0000000000019288                 db  0Eh
.eh_frame:0000000000019289                 db  80h
.eh_frame:000000000001928A                 db    1
.eh_frame:000000000001928B                 db    3
.eh_frame:000000000001928C                 db 0F3h
.eh_frame:000000000001928D                 db    1
.eh_frame:000000000001928E                 db  0Ah
.eh_frame:000000000001928F                 db  0Eh
.eh_frame:0000000000019290                 db  38h ; 8
.eh_frame:0000000000019291                 db  41h ; A
.eh_frame:0000000000019292                 db  0Eh
.eh_frame:0000000000019293                 db  30h ; 0
.eh_frame:0000000000019294                 db  41h ; A
.eh_frame:0000000000019295                 db  0Eh
.eh_frame:0000000000019296                 db  28h ; (
.eh_frame:0000000000019297                 db  42h ; B
.eh_frame:0000000000019298                 db  0Eh
.eh_frame:0000000000019299                 db  20h
.eh_frame:000000000001929A                 db  42h ; B
.eh_frame:000000000001929B                 db  0Eh
.eh_frame:000000000001929C                 db  18h
.eh_frame:000000000001929D                 db  42h ; B
.eh_frame:000000000001929E                 db  0Eh
.eh_frame:000000000001929F                 db  10h
.eh_frame:00000000000192A0                 db  42h ; B
.eh_frame:00000000000192A1                 db  0Eh
.eh_frame:00000000000192A2                 db    8
.eh_frame:00000000000192A3                 db  4Ah ; J
.eh_frame:00000000000192A4                 db  0Bh
.eh_frame:00000000000192A5                 db    0
.eh_frame:00000000000192A6                 db    0
.eh_frame:00000000000192A7                 db    0
.eh_frame:00000000000192A8                 db  4Ch ; L
.eh_frame:00000000000192A9                 db    0
.eh_frame:00000000000192AA                 db    0
.eh_frame:00000000000192AB                 db    0
.eh_frame:00000000000192AC                 db  9Ch
.eh_frame:00000000000192AD                 db  19h
.eh_frame:00000000000192AE                 db    0
.eh_frame:00000000000192AF                 db    0
.eh_frame:00000000000192B0                 db 0D0h
.eh_frame:00000000000192B1                 db  23h ; #
.eh_frame:00000000000192B2                 db 0FFh
.eh_frame:00000000000192B3                 db 0FFh
.eh_frame:00000000000192B4                 db  91h
.eh_frame:00000000000192B5                 db  0Bh
.eh_frame:00000000000192B6                 db    0
.eh_frame:00000000000192B7                 db    0
.eh_frame:00000000000192B8                 db    0
.eh_frame:00000000000192B9                 db  42h ; B
.eh_frame:00000000000192BA                 db  0Eh
.eh_frame:00000000000192BB                 db  10h
.eh_frame:00000000000192BC                 db  8Fh
.eh_frame:00000000000192BD                 db    2
.eh_frame:00000000000192BE                 db  42h ; B
.eh_frame:00000000000192BF                 db  0Eh
.eh_frame:00000000000192C0                 db  18h
.eh_frame:00000000000192C1                 db  8Eh
.eh_frame:00000000000192C2                 db    3
.eh_frame:00000000000192C3                 db  45h ; E
.eh_frame:00000000000192C4                 db  0Eh
.eh_frame:00000000000192C5                 db  20h
.eh_frame:00000000000192C6                 db  8Dh
.eh_frame:00000000000192C7                 db    4
.eh_frame:00000000000192C8                 db  42h ; B
.eh_frame:00000000000192C9                 db  0Eh
.eh_frame:00000000000192CA                 db  28h ; (
.eh_frame:00000000000192CB                 db  8Ch
.eh_frame:00000000000192CC                 db    5
.eh_frame:00000000000192CD                 db  46h ; F
.eh_frame:00000000000192CE                 db  0Eh
.eh_frame:00000000000192CF                 db  30h ; 0
.eh_frame:00000000000192D0                 db  86h
.eh_frame:00000000000192D1                 db    6
.eh_frame:00000000000192D2                 db  41h ; A
.eh_frame:00000000000192D3                 db  0Eh
.eh_frame:00000000000192D4                 db  38h ; 8
.eh_frame:00000000000192D5                 db  83h
.eh_frame:00000000000192D6                 db    7
.eh_frame:00000000000192D7                 db  47h ; G
.eh_frame:00000000000192D8                 db  0Eh
.eh_frame:00000000000192D9                 db 0C0h
.eh_frame:00000000000192DA                 db    2
.eh_frame:00000000000192DB                 db    3
.eh_frame:00000000000192DC                 db  17h
.eh_frame:00000000000192DD                 db    4
.eh_frame:00000000000192DE                 db  0Ah
.eh_frame:00000000000192DF                 db  0Eh
.eh_frame:00000000000192E0                 db  38h ; 8
.eh_frame:00000000000192E1                 db  41h ; A
.eh_frame:00000000000192E2                 db  0Eh
.eh_frame:00000000000192E3                 db  30h ; 0
.eh_frame:00000000000192E4                 db  41h ; A
.eh_frame:00000000000192E5                 db  0Eh
.eh_frame:00000000000192E6                 db  28h ; (
.eh_frame:00000000000192E7                 db  42h ; B
.eh_frame:00000000000192E8                 db  0Eh
.eh_frame:00000000000192E9                 db  20h
.eh_frame:00000000000192EA                 db  42h ; B
.eh_frame:00000000000192EB                 db  0Eh
.eh_frame:00000000000192EC                 db  18h
.eh_frame:00000000000192ED                 db  42h ; B
.eh_frame:00000000000192EE                 db  0Eh
.eh_frame:00000000000192EF                 db  10h
.eh_frame:00000000000192F0                 db  42h ; B
.eh_frame:00000000000192F1                 db  0Eh
.eh_frame:00000000000192F2                 db    8
.eh_frame:00000000000192F3                 db  46h ; F
.eh_frame:00000000000192F4                 db  0Bh
.eh_frame:00000000000192F5                 db    0
.eh_frame:00000000000192F6                 db    0
.eh_frame:00000000000192F7                 db    0
.eh_frame:00000000000192F8                 db  30h ; 0
.eh_frame:00000000000192F9                 db    0
.eh_frame:00000000000192FA                 db    0
.eh_frame:00000000000192FB                 db    0
.eh_frame:00000000000192FC                 db 0ECh
.eh_frame:00000000000192FD                 db  19h
.eh_frame:00000000000192FE                 db    0
.eh_frame:00000000000192FF                 db    0
.eh_frame:0000000000019300                 db  20h
.eh_frame:0000000000019301                 db  2Fh ; /
.eh_frame:0000000000019302                 db 0FFh
.eh_frame:0000000000019303                 db 0FFh
.eh_frame:0000000000019304                 db  87h
.eh_frame:0000000000019305                 db    0
.eh_frame:0000000000019306                 db    0
.eh_frame:0000000000019307                 db    0
.eh_frame:0000000000019308                 db    0
.eh_frame:0000000000019309                 db  47h ; G
.eh_frame:000000000001930A                 db  0Eh
.eh_frame:000000000001930B                 db  10h
.eh_frame:000000000001930C                 db  86h
.eh_frame:000000000001930D                 db    2
.eh_frame:000000000001930E                 db  41h ; A
.eh_frame:000000000001930F                 db  0Eh
.eh_frame:0000000000019310                 db  18h
.eh_frame:0000000000019311                 db  83h
.eh_frame:0000000000019312                 db    3
.eh_frame:0000000000019313                 db  4Ah ; J
.eh_frame:0000000000019314                 db  0Eh
.eh_frame:0000000000019315                 db  20h
.eh_frame:0000000000019316                 db    2
.eh_frame:0000000000019317                 db  4Eh ; N
.eh_frame:0000000000019318                 db  0Eh
.eh_frame:0000000000019319                 db  18h
.eh_frame:000000000001931A                 db  41h ; A
.eh_frame:000000000001931B                 db  0Eh
.eh_frame:000000000001931C                 db  10h
.eh_frame:000000000001931D                 db  41h ; A
.eh_frame:000000000001931E                 db  0Eh
.eh_frame:000000000001931F                 db    8
.eh_frame:0000000000019320                 db  46h ; F
.eh_frame:0000000000019321                 db 0C3h
.eh_frame:0000000000019322                 db 0C6h
.eh_frame:0000000000019323                 db  58h ; X
.eh_frame:0000000000019324                 db  0Eh
.eh_frame:0000000000019325                 db  20h
.eh_frame:0000000000019326                 db  83h
.eh_frame:0000000000019327                 db    3
.eh_frame:0000000000019328                 db  86h
.eh_frame:0000000000019329                 db    2
.eh_frame:000000000001932A                 db    0
.eh_frame:000000000001932B                 db    0
.eh_frame:000000000001932C                 db  28h ; (
.eh_frame:000000000001932D                 db    0
.eh_frame:000000000001932E                 db    0
.eh_frame:000000000001932F                 db    0
.eh_frame:0000000000019330                 db  20h
.eh_frame:0000000000019331                 db  1Ah
.eh_frame:0000000000019332                 db    0
.eh_frame:0000000000019333                 db    0
.eh_frame:0000000000019334                 db  7Ch ; |
.eh_frame:0000000000019335                 db  2Fh ; /
.eh_frame:0000000000019336                 db 0FFh
.eh_frame:0000000000019337                 db 0FFh
.eh_frame:0000000000019338                 db  4Fh ; O
.eh_frame:0000000000019339                 db    0
.eh_frame:000000000001933A                 db    0
.eh_frame:000000000001933B                 db    0
.eh_frame:000000000001933C                 db    0
.eh_frame:000000000001933D                 db  42h ; B
.eh_frame:000000000001933E                 db  0Eh
.eh_frame:000000000001933F                 db  10h
.eh_frame:0000000000019340                 db  8Ch
.eh_frame:0000000000019341                 db    2
.eh_frame:0000000000019342                 db  41h ; A
.eh_frame:0000000000019343                 db  0Eh
.eh_frame:0000000000019344                 db  18h
.eh_frame:0000000000019345                 db  86h
.eh_frame:0000000000019346                 db    3
.eh_frame:0000000000019347                 db  44h ; D
.eh_frame:0000000000019348                 db  0Eh
.eh_frame:0000000000019349                 db  20h
.eh_frame:000000000001934A                 db  83h
.eh_frame:000000000001934B                 db    4
.eh_frame:000000000001934C                 db  7Ch ; |
.eh_frame:000000000001934D                 db  0Eh
.eh_frame:000000000001934E                 db  18h
.eh_frame:000000000001934F                 db  45h ; E
.eh_frame:0000000000019350                 db  0Eh
.eh_frame:0000000000019351                 db  10h
.eh_frame:0000000000019352                 db  42h ; B
.eh_frame:0000000000019353                 db  0Eh
.eh_frame:0000000000019354                 db    8
.eh_frame:0000000000019355                 db    0
.eh_frame:0000000000019356                 db    0
.eh_frame:0000000000019357                 db    0
.eh_frame:0000000000019358                 db  2Ch ; ,
.eh_frame:0000000000019359                 db    0
.eh_frame:000000000001935A                 db    0
.eh_frame:000000000001935B                 db    0
.eh_frame:000000000001935C                 db  4Ch ; L
.eh_frame:000000000001935D                 db  1Ah
.eh_frame:000000000001935E                 db    0
.eh_frame:000000000001935F                 db    0
.eh_frame:0000000000019360                 db 0A0h
.eh_frame:0000000000019361                 db  2Fh ; /
.eh_frame:0000000000019362                 db 0FFh
.eh_frame:0000000000019363                 db 0FFh
.eh_frame:0000000000019364                 db  94h
.eh_frame:0000000000019365                 db    0
.eh_frame:0000000000019366                 db    0
.eh_frame:0000000000019367                 db    0
.eh_frame:0000000000019368                 db    0
.eh_frame:0000000000019369                 db  42h ; B
.eh_frame:000000000001936A                 db  0Eh
.eh_frame:000000000001936B                 db  10h
.eh_frame:000000000001936C                 db  8Ch
.eh_frame:000000000001936D                 db    2
.eh_frame:000000000001936E                 db  41h ; A
.eh_frame:000000000001936F                 db  0Eh
.eh_frame:0000000000019370                 db  18h
.eh_frame:0000000000019371                 db  86h
.eh_frame:0000000000019372                 db    3
.eh_frame:0000000000019373                 db  41h ; A
.eh_frame:0000000000019374                 db  0Eh
.eh_frame:0000000000019375                 db  20h
.eh_frame:0000000000019376                 db  83h
.eh_frame:0000000000019377                 db    4
.eh_frame:0000000000019378                 db    2
.eh_frame:0000000000019379                 db  6Dh ; m
.eh_frame:000000000001937A                 db  0Ah
.eh_frame:000000000001937B                 db  0Eh
.eh_frame:000000000001937C                 db  18h
.eh_frame:000000000001937D                 db  41h ; A
.eh_frame:000000000001937E                 db  0Eh
.eh_frame:000000000001937F                 db  10h
.eh_frame:0000000000019380                 db  42h ; B
.eh_frame:0000000000019381                 db  0Eh
.eh_frame:0000000000019382                 db    8
.eh_frame:0000000000019383                 db  41h ; A
.eh_frame:0000000000019384                 db  0Bh
.eh_frame:0000000000019385                 db    0
.eh_frame:0000000000019386                 db    0
.eh_frame:0000000000019387                 db    0
.eh_frame:0000000000019388                 db  30h ; 0
.eh_frame:0000000000019389                 db    0
.eh_frame:000000000001938A                 db    0
.eh_frame:000000000001938B                 db    0
.eh_frame:000000000001938C                 db  7Ch ; |
.eh_frame:000000000001938D                 db  1Ah
.eh_frame:000000000001938E                 db    0
.eh_frame:000000000001938F                 db    0
.eh_frame:0000000000019390                 db  10h
.eh_frame:0000000000019391                 db  30h ; 0
.eh_frame:0000000000019392                 db 0FFh
.eh_frame:0000000000019393                 db 0FFh
.eh_frame:0000000000019394                 db  4Ch ; L
.eh_frame:0000000000019395                 db    0
.eh_frame:0000000000019396                 db    0
.eh_frame:0000000000019397                 db    0
.eh_frame:0000000000019398                 db    0
.eh_frame:0000000000019399                 db  41h ; A
.eh_frame:000000000001939A                 db  0Eh
.eh_frame:000000000001939B                 db  10h
.eh_frame:000000000001939C                 db  86h
.eh_frame:000000000001939D                 db    2
.eh_frame:000000000001939E                 db  41h ; A
.eh_frame:000000000001939F                 db  0Eh
.eh_frame:00000000000193A0                 db  18h
.eh_frame:00000000000193A1                 db  83h
.eh_frame:00000000000193A2                 db    3
.eh_frame:00000000000193A3                 db  4Dh ; M
.eh_frame:00000000000193A4                 db  0Eh
.eh_frame:00000000000193A5                 db  20h
.eh_frame:00000000000193A6                 db  67h ; g
.eh_frame:00000000000193A7                 db  0Ah
.eh_frame:00000000000193A8                 db  0Eh
.eh_frame:00000000000193A9                 db  18h
.eh_frame:00000000000193AA                 db  43h ; C
.eh_frame:00000000000193AB                 db  0Eh
.eh_frame:00000000000193AC                 db  10h
.eh_frame:00000000000193AD                 db  41h ; A
.eh_frame:00000000000193AE                 db  0Eh
.eh_frame:00000000000193AF                 db    8
.eh_frame:00000000000193B0                 db  46h ; F
.eh_frame:00000000000193B1                 db  0Bh
.eh_frame:00000000000193B2                 db  44h ; D
.eh_frame:00000000000193B3                 db  0Eh
.eh_frame:00000000000193B4                 db  18h
.eh_frame:00000000000193B5                 db  46h ; F
.eh_frame:00000000000193B6                 db  0Eh
.eh_frame:00000000000193B7                 db  10h
.eh_frame:00000000000193B8                 db  41h ; A
.eh_frame:00000000000193B9                 db  0Eh
.eh_frame:00000000000193BA                 db    8
.eh_frame:00000000000193BB                 db    0
.eh_frame:00000000000193BC                 db  40h ; @
.eh_frame:00000000000193BD                 db    0
.eh_frame:00000000000193BE                 db    0
.eh_frame:00000000000193BF                 db    0
.eh_frame:00000000000193C0                 db 0B0h
.eh_frame:00000000000193C1                 db  1Ah
.eh_frame:00000000000193C2                 db    0
.eh_frame:00000000000193C3                 db    0
.eh_frame:00000000000193C4                 db  2Ch ; ,
.eh_frame:00000000000193C5                 db  30h ; 0
.eh_frame:00000000000193C6                 db 0FFh
.eh_frame:00000000000193C7                 db 0FFh
.eh_frame:00000000000193C8                 db  0Dh
.eh_frame:00000000000193C9                 db    8
.eh_frame:00000000000193CA                 db    0
.eh_frame:00000000000193CB                 db    0
.eh_frame:00000000000193CC                 db    0
.eh_frame:00000000000193CD                 db  42h ; B
.eh_frame:00000000000193CE                 db  0Eh
.eh_frame:00000000000193CF                 db  10h
.eh_frame:00000000000193D0                 db  8Eh
.eh_frame:00000000000193D1                 db    2
.eh_frame:00000000000193D2                 db  42h ; B
.eh_frame:00000000000193D3                 db  0Eh
.eh_frame:00000000000193D4                 db  18h
.eh_frame:00000000000193D5                 db  8Dh
.eh_frame:00000000000193D6                 db    3
.eh_frame:00000000000193D7                 db  45h ; E
.eh_frame:00000000000193D8                 db  0Eh
.eh_frame:00000000000193D9                 db  20h
.eh_frame:00000000000193DA                 db  8Ch
.eh_frame:00000000000193DB                 db    4
.eh_frame:00000000000193DC                 db  41h ; A
.eh_frame:00000000000193DD                 db  0Eh
.eh_frame:00000000000193DE                 db  28h ; (
.eh_frame:00000000000193DF                 db  86h
.eh_frame:00000000000193E0                 db    5
.eh_frame:00000000000193E1                 db  44h ; D
.eh_frame:00000000000193E2                 db  0Eh
.eh_frame:00000000000193E3                 db  30h ; 0
.eh_frame:00000000000193E4                 db  83h
.eh_frame:00000000000193E5                 db    6
.eh_frame:00000000000193E6                 db  4Ah ; J
.eh_frame:00000000000193E7                 db  0Eh
.eh_frame:00000000000193E8                 db  40h ; @
.eh_frame:00000000000193E9                 db    2
.eh_frame:00000000000193EA                 db 0D2h
.eh_frame:00000000000193EB                 db  0Ah
.eh_frame:00000000000193EC                 db  0Eh
.eh_frame:00000000000193ED                 db  30h ; 0
.eh_frame:00000000000193EE                 db  41h ; A
.eh_frame:00000000000193EF                 db  0Eh
.eh_frame:00000000000193F0                 db  28h ; (
.eh_frame:00000000000193F1                 db  41h ; A
.eh_frame:00000000000193F2                 db  0Eh
.eh_frame:00000000000193F3                 db  20h
.eh_frame:00000000000193F4                 db  42h ; B
.eh_frame:00000000000193F5                 db  0Eh
.eh_frame:00000000000193F6                 db  18h
.eh_frame:00000000000193F7                 db  42h ; B
.eh_frame:00000000000193F8                 db  0Eh
.eh_frame:00000000000193F9                 db  10h
.eh_frame:00000000000193FA                 db  42h ; B
.eh_frame:00000000000193FB                 db  0Eh
.eh_frame:00000000000193FC                 db    8
.eh_frame:00000000000193FD                 db  46h ; F
.eh_frame:00000000000193FE                 db  0Bh
.eh_frame:00000000000193FF                 db    0
.eh_frame:0000000000019400                 db  5Ch ; \
.eh_frame:0000000000019401                 db    0
.eh_frame:0000000000019402                 db    0
.eh_frame:0000000000019403                 db    0
.eh_frame:0000000000019404                 db 0F4h
.eh_frame:0000000000019405                 db  1Ah
.eh_frame:0000000000019406                 db    0
.eh_frame:0000000000019407                 db    0
.eh_frame:0000000000019408                 db 0F8h
.eh_frame:0000000000019409                 db  37h ; 7
.eh_frame:000000000001940A                 db 0FFh
.eh_frame:000000000001940B                 db 0FFh
.eh_frame:000000000001940C                 db  6Ah ; j
.eh_frame:000000000001940D                 db    2
.eh_frame:000000000001940E                 db    0
.eh_frame:000000000001940F                 db    0
.eh_frame:0000000000019410                 db    0
.eh_frame:0000000000019411                 db  42h ; B
.eh_frame:0000000000019412                 db  0Eh
.eh_frame:0000000000019413                 db  10h
.eh_frame:0000000000019414                 db  8Fh
.eh_frame:0000000000019415                 db    2
.eh_frame:0000000000019416                 db  42h ; B
.eh_frame:0000000000019417                 db  0Eh
.eh_frame:0000000000019418                 db  18h
.eh_frame:0000000000019419                 db  8Eh
.eh_frame:000000000001941A                 db    3
.eh_frame:000000000001941B                 db  45h ; E
.eh_frame:000000000001941C                 db  0Eh
.eh_frame:000000000001941D                 db  20h
.eh_frame:000000000001941E                 db  8Dh
.eh_frame:000000000001941F                 db    4
.eh_frame:0000000000019420                 db  42h ; B
.eh_frame:0000000000019421                 db  0Eh
.eh_frame:0000000000019422                 db  28h ; (
.eh_frame:0000000000019423                 db  8Ch
.eh_frame:0000000000019424                 db    5
.eh_frame:0000000000019425                 db  44h ; D
.eh_frame:0000000000019426                 db  0Eh
.eh_frame:0000000000019427                 db  30h ; 0
.eh_frame:0000000000019428                 db  86h
.eh_frame:0000000000019429                 db    6
.eh_frame:000000000001942A                 db  41h ; A
.eh_frame:000000000001942B                 db  0Eh
.eh_frame:000000000001942C                 db  38h ; 8
.eh_frame:000000000001942D                 db  83h
.eh_frame:000000000001942E                 db    7
.eh_frame:000000000001942F                 db  4Fh ; O
.eh_frame:0000000000019430                 db  0Eh
.eh_frame:0000000000019431                 db  90h
.eh_frame:0000000000019432                 db    1
.eh_frame:0000000000019433                 db    2
.eh_frame:0000000000019434                 db  5Bh ; [
.eh_frame:0000000000019435                 db  0Eh
.eh_frame:0000000000019436                 db  98h
.eh_frame:0000000000019437                 db    1
.eh_frame:0000000000019438                 db  45h ; E
.eh_frame:0000000000019439                 db  0Eh
.eh_frame:000000000001943A                 db 0A0h
.eh_frame:000000000001943B                 db    1
.eh_frame:000000000001943C                 db  6Ch ; l
.eh_frame:000000000001943D                 db  0Eh
.eh_frame:000000000001943E                 db  98h
.eh_frame:000000000001943F                 db    1
.eh_frame:0000000000019440                 db  41h ; A
.eh_frame:0000000000019441                 db  0Eh
.eh_frame:0000000000019442                 db  90h
.eh_frame:0000000000019443                 db    1
.eh_frame:0000000000019444                 db    3
.eh_frame:0000000000019445                 db  31h ; 1
.eh_frame:0000000000019446                 db    1
.eh_frame:0000000000019447                 db  0Ah
.eh_frame:0000000000019448                 db  0Eh
.eh_frame:0000000000019449                 db  38h ; 8
.eh_frame:000000000001944A                 db  41h ; A
.eh_frame:000000000001944B                 db  0Eh
.eh_frame:000000000001944C                 db  30h ; 0
.eh_frame:000000000001944D                 db  41h ; A
.eh_frame:000000000001944E                 db  0Eh
.eh_frame:000000000001944F                 db  28h ; (
.eh_frame:0000000000019450                 db  42h ; B
.eh_frame:0000000000019451                 db  0Eh
.eh_frame:0000000000019452                 db  20h
.eh_frame:0000000000019453                 db  42h ; B
.eh_frame:0000000000019454                 db  0Eh
.eh_frame:0000000000019455                 db  18h
.eh_frame:0000000000019456                 db  42h ; B
.eh_frame:0000000000019457                 db  0Eh
.eh_frame:0000000000019458                 db  10h
.eh_frame:0000000000019459                 db  42h ; B
.eh_frame:000000000001945A                 db  0Eh
.eh_frame:000000000001945B                 db    8
.eh_frame:000000000001945C                 db  49h ; I
.eh_frame:000000000001945D                 db  0Bh
.eh_frame:000000000001945E                 db    0
.eh_frame:000000000001945F                 db    0
.eh_frame:0000000000019460                 db  4Ch ; L
.eh_frame:0000000000019461                 db    0
.eh_frame:0000000000019462                 db    0
.eh_frame:0000000000019463                 db    0
.eh_frame:0000000000019464                 db  54h ; T
.eh_frame:0000000000019465                 db  1Bh
.eh_frame:0000000000019466                 db    0
.eh_frame:0000000000019467                 db    0
.eh_frame:0000000000019468                 db    8
.eh_frame:0000000000019469                 db  3Ah ; :
.eh_frame:000000000001946A                 db 0FFh
.eh_frame:000000000001946B                 db 0FFh
.eh_frame:000000000001946C                 db  27h ; '
.eh_frame:000000000001946D                 db    5
.eh_frame:000000000001946E                 db    0
.eh_frame:000000000001946F                 db    0
.eh_frame:0000000000019470                 db    0
.eh_frame:0000000000019471                 db  42h ; B
.eh_frame:0000000000019472                 db  0Eh
.eh_frame:0000000000019473                 db  10h
.eh_frame:0000000000019474                 db  8Fh
.eh_frame:0000000000019475                 db    2
.eh_frame:0000000000019476                 db  42h ; B
.eh_frame:0000000000019477                 db  0Eh
.eh_frame:0000000000019478                 db  18h
.eh_frame:0000000000019479                 db  8Eh
.eh_frame:000000000001947A                 db    3
.eh_frame:000000000001947B                 db  45h ; E
.eh_frame:000000000001947C                 db  0Eh
.eh_frame:000000000001947D                 db  20h
.eh_frame:000000000001947E                 db  8Dh
.eh_frame:000000000001947F                 db    4
.eh_frame:0000000000019480                 db  42h ; B
.eh_frame:0000000000019481                 db  0Eh
.eh_frame:0000000000019482                 db  28h ; (
.eh_frame:0000000000019483                 db  8Ch
.eh_frame:0000000000019484                 db    5
.eh_frame:0000000000019485                 db  41h ; A
.eh_frame:0000000000019486                 db  0Eh
.eh_frame:0000000000019487                 db  30h ; 0
.eh_frame:0000000000019488                 db  86h
.eh_frame:0000000000019489                 db    6
.eh_frame:000000000001948A                 db  41h ; A
.eh_frame:000000000001948B                 db  0Eh
.eh_frame:000000000001948C                 db  38h ; 8
.eh_frame:000000000001948D                 db  83h
.eh_frame:000000000001948E                 db    7
.eh_frame:000000000001948F                 db  4Ch ; L
.eh_frame:0000000000019490                 db  0Eh
.eh_frame:0000000000019491                 db 0B0h
.eh_frame:0000000000019492                 db    3
.eh_frame:0000000000019493                 db    3
.eh_frame:0000000000019494                 db  82h
.eh_frame:0000000000019495                 db    4
.eh_frame:0000000000019496                 db  0Ah
.eh_frame:0000000000019497                 db  0Eh
.eh_frame:0000000000019498                 db  38h ; 8
.eh_frame:0000000000019499                 db  41h ; A
.eh_frame:000000000001949A                 db  0Eh
.eh_frame:000000000001949B                 db  30h ; 0
.eh_frame:000000000001949C                 db  41h ; A
.eh_frame:000000000001949D                 db  0Eh
.eh_frame:000000000001949E                 db  28h ; (
.eh_frame:000000000001949F                 db  42h ; B
.eh_frame:00000000000194A0                 db  0Eh
.eh_frame:00000000000194A1                 db  20h
.eh_frame:00000000000194A2                 db  42h ; B
.eh_frame:00000000000194A3                 db  0Eh
.eh_frame:00000000000194A4                 db  18h
.eh_frame:00000000000194A5                 db  42h ; B
.eh_frame:00000000000194A6                 db  0Eh
.eh_frame:00000000000194A7                 db  10h
.eh_frame:00000000000194A8                 db  42h ; B
.eh_frame:00000000000194A9                 db  0Eh
.eh_frame:00000000000194AA                 db    8
.eh_frame:00000000000194AB                 db  41h ; A
.eh_frame:00000000000194AC                 db  0Bh
.eh_frame:00000000000194AD                 db    0
.eh_frame:00000000000194AE                 db    0
.eh_frame:00000000000194AF                 db    0
.eh_frame:00000000000194B0                 db  38h ; 8
.eh_frame:00000000000194B1                 db    0
.eh_frame:00000000000194B2                 db    0
.eh_frame:00000000000194B3                 db    0
.eh_frame:00000000000194B4                 db 0A4h
.eh_frame:00000000000194B5                 db  1Bh
.eh_frame:00000000000194B6                 db    0
.eh_frame:00000000000194B7                 db    0
.eh_frame:00000000000194B8                 db 0E8h
.eh_frame:00000000000194B9                 db  3Eh ; >
.eh_frame:00000000000194BA                 db 0FFh
.eh_frame:00000000000194BB                 db 0FFh
.eh_frame:00000000000194BC                 db  54h ; T
.eh_frame:00000000000194BD                 db    2
.eh_frame:00000000000194BE                 db    0
.eh_frame:00000000000194BF                 db    0
.eh_frame:00000000000194C0                 db    0
.eh_frame:00000000000194C1                 db  46h ; F
.eh_frame:00000000000194C2                 db  0Eh
.eh_frame:00000000000194C3                 db  10h
.eh_frame:00000000000194C4                 db  8Dh
.eh_frame:00000000000194C5                 db    2
.eh_frame:00000000000194C6                 db  42h ; B
.eh_frame:00000000000194C7                 db  0Eh
.eh_frame:00000000000194C8                 db  18h
.eh_frame:00000000000194C9                 db  8Ch
.eh_frame:00000000000194CA                 db    3
.eh_frame:00000000000194CB                 db  45h ; E
.eh_frame:00000000000194CC                 db  0Eh
.eh_frame:00000000000194CD                 db  20h
.eh_frame:00000000000194CE                 db  86h
.eh_frame:00000000000194CF                 db    4
.eh_frame:00000000000194D0                 db  41h ; A
.eh_frame:00000000000194D1                 db  0Eh
.eh_frame:00000000000194D2                 db  28h ; (
.eh_frame:00000000000194D3                 db  83h
.eh_frame:00000000000194D4                 db    5
.eh_frame:00000000000194D5                 db  44h ; D
.eh_frame:00000000000194D6                 db  0Eh
.eh_frame:00000000000194D7                 db  30h ; 0
.eh_frame:00000000000194D8                 db    2
.eh_frame:00000000000194D9                 db 0E4h
.eh_frame:00000000000194DA                 db  0Ah
.eh_frame:00000000000194DB                 db  0Eh
.eh_frame:00000000000194DC                 db  28h ; (
.eh_frame:00000000000194DD                 db  43h ; C
.eh_frame:00000000000194DE                 db  0Eh
.eh_frame:00000000000194DF                 db  20h
.eh_frame:00000000000194E0                 db  41h ; A
.eh_frame:00000000000194E1                 db  0Eh
.eh_frame:00000000000194E2                 db  18h
.eh_frame:00000000000194E3                 db  42h ; B
.eh_frame:00000000000194E4                 db  0Eh
.eh_frame:00000000000194E5                 db  10h
.eh_frame:00000000000194E6                 db  42h ; B
.eh_frame:00000000000194E7                 db  0Eh
.eh_frame:00000000000194E8                 db    8
.eh_frame:00000000000194E9                 db  42h ; B
.eh_frame:00000000000194EA                 db  0Bh
.eh_frame:00000000000194EB                 db    0
.eh_frame:00000000000194EC                 db  4Ch ; L
.eh_frame:00000000000194ED                 db    0
.eh_frame:00000000000194EE                 db    0
.eh_frame:00000000000194EF                 db    0
.eh_frame:00000000000194F0                 db 0E0h
.eh_frame:00000000000194F1                 db  1Bh
.eh_frame:00000000000194F2                 db    0
.eh_frame:00000000000194F3                 db    0
.eh_frame:00000000000194F4                 db  0Ch
.eh_frame:00000000000194F5                 db  41h ; A
.eh_frame:00000000000194F6                 db 0FFh
.eh_frame:00000000000194F7                 db 0FFh
.eh_frame:00000000000194F8                 db  51h ; Q
.eh_frame:00000000000194F9                 db    7
.eh_frame:00000000000194FA                 db    0
.eh_frame:00000000000194FB                 db    0
.eh_frame:00000000000194FC                 db    0
.eh_frame:00000000000194FD                 db  42h ; B
.eh_frame:00000000000194FE                 db  0Eh
.eh_frame:00000000000194FF                 db  10h
.eh_frame:0000000000019500                 db  8Fh
.eh_frame:0000000000019501                 db    2
.eh_frame:0000000000019502                 db  42h ; B
.eh_frame:0000000000019503                 db  0Eh
.eh_frame:0000000000019504                 db  18h
.eh_frame:0000000000019505                 db  8Eh
.eh_frame:0000000000019506                 db    3
.eh_frame:0000000000019507                 db  45h ; E
.eh_frame:0000000000019508                 db  0Eh
.eh_frame:0000000000019509                 db  20h
.eh_frame:000000000001950A                 db  8Dh
.eh_frame:000000000001950B                 db    4
.eh_frame:000000000001950C                 db  42h ; B
.eh_frame:000000000001950D                 db  0Eh
.eh_frame:000000000001950E                 db  28h ; (
.eh_frame:000000000001950F                 db  8Ch
.eh_frame:0000000000019510                 db    5
.eh_frame:0000000000019511                 db  41h ; A
.eh_frame:0000000000019512                 db  0Eh
.eh_frame:0000000000019513                 db  30h ; 0
.eh_frame:0000000000019514                 db  86h
.eh_frame:0000000000019515                 db    6
.eh_frame:0000000000019516                 db  41h ; A
.eh_frame:0000000000019517                 db  0Eh
.eh_frame:0000000000019518                 db  38h ; 8
.eh_frame:0000000000019519                 db  83h
.eh_frame:000000000001951A                 db    7
.eh_frame:000000000001951B                 db  4Dh ; M
.eh_frame:000000000001951C                 db  0Eh
.eh_frame:000000000001951D                 db  90h
.eh_frame:000000000001951E                 db    2
.eh_frame:000000000001951F                 db    3
.eh_frame:0000000000019520                 db  88h
.eh_frame:0000000000019521                 db    5
.eh_frame:0000000000019522                 db  0Ah
.eh_frame:0000000000019523                 db  0Eh
.eh_frame:0000000000019524                 db  38h ; 8
.eh_frame:0000000000019525                 db  41h ; A
.eh_frame:0000000000019526                 db  0Eh
.eh_frame:0000000000019527                 db  30h ; 0
.eh_frame:0000000000019528                 db  41h ; A
.eh_frame:0000000000019529                 db  0Eh
.eh_frame:000000000001952A                 db  28h ; (
.eh_frame:000000000001952B                 db  42h ; B
.eh_frame:000000000001952C                 db  0Eh
.eh_frame:000000000001952D                 db  20h
.eh_frame:000000000001952E                 db  42h ; B
.eh_frame:000000000001952F                 db  0Eh
.eh_frame:0000000000019530                 db  18h
.eh_frame:0000000000019531                 db  42h ; B
.eh_frame:0000000000019532                 db  0Eh
.eh_frame:0000000000019533                 db  10h
.eh_frame:0000000000019534                 db  42h ; B
.eh_frame:0000000000019535                 db  0Eh
.eh_frame:0000000000019536                 db    8
.eh_frame:0000000000019537                 db  44h ; D
.eh_frame:0000000000019538                 db  0Bh
.eh_frame:0000000000019539                 db    0
.eh_frame:000000000001953A                 db    0
.eh_frame:000000000001953B                 db    0
.eh_frame:000000000001953C                 db  2Ch ; ,
.eh_frame:000000000001953D                 db    0
.eh_frame:000000000001953E                 db    0
.eh_frame:000000000001953F                 db    0
.eh_frame:0000000000019540                 db  30h ; 0
.eh_frame:0000000000019541                 db  1Ch
.eh_frame:0000000000019542                 db    0
.eh_frame:0000000000019543                 db    0
.eh_frame:0000000000019544                 db  1Ch
.eh_frame:0000000000019545                 db  48h ; H
.eh_frame:0000000000019546                 db 0FFh
.eh_frame:0000000000019547                 db 0FFh
.eh_frame:0000000000019548                 db 0EAh
.eh_frame:0000000000019549                 db    8
.eh_frame:000000000001954A                 db    0
.eh_frame:000000000001954B                 db    0
.eh_frame:000000000001954C                 db    0
.eh_frame:000000000001954D                 db  41h ; A
.eh_frame:000000000001954E                 db  0Eh
.eh_frame:000000000001954F                 db  10h
.eh_frame:0000000000019550                 db  86h
.eh_frame:0000000000019551                 db    2
.eh_frame:0000000000019552                 db  43h ; C
.eh_frame:0000000000019553                 db  0Dh
.eh_frame:0000000000019554                 db    6
.eh_frame:0000000000019555                 db  48h ; H
.eh_frame:0000000000019556                 db  8Fh
.eh_frame:0000000000019557                 db    3
.eh_frame:0000000000019558                 db  8Eh
.eh_frame:0000000000019559                 db    4
.eh_frame:000000000001955A                 db  8Dh
.eh_frame:000000000001955B                 db    5
.eh_frame:000000000001955C                 db  8Ch
.eh_frame:000000000001955D                 db    6
.eh_frame:000000000001955E                 db  4Eh ; N
.eh_frame:000000000001955F                 db  83h
.eh_frame:0000000000019560                 db    7
.eh_frame:0000000000019561                 db    3
.eh_frame:0000000000019562                 db  20h
.eh_frame:0000000000019563                 db    7
.eh_frame:0000000000019564                 db  0Ah
.eh_frame:0000000000019565                 db  0Ch
.eh_frame:0000000000019566                 db    7
.eh_frame:0000000000019567                 db    8
.eh_frame:0000000000019568                 db  41h ; A
.eh_frame:0000000000019569                 db  0Bh
.eh_frame:000000000001956A                 db    0
.eh_frame:000000000001956B                 db    0
.eh_frame:000000000001956C                 db  68h ; h
.eh_frame:000000000001956D                 db    0
.eh_frame:000000000001956E                 db    0
.eh_frame:000000000001956F                 db    0
.eh_frame:0000000000019570                 db  60h ; `
.eh_frame:0000000000019571                 db  1Ch
.eh_frame:0000000000019572                 db    0
.eh_frame:0000000000019573                 db    0
.eh_frame:0000000000019574                 db 0DCh
.eh_frame:0000000000019575                 db  50h ; P
.eh_frame:0000000000019576                 db 0FFh
.eh_frame:0000000000019577                 db 0FFh
.eh_frame:0000000000019578                 db  96h
.eh_frame:0000000000019579                 db    1
.eh_frame:000000000001957A                 db    0
.eh_frame:000000000001957B                 db    0
.eh_frame:000000000001957C                 db    0
.eh_frame:000000000001957D                 db  42h ; B
.eh_frame:000000000001957E                 db  0Eh
.eh_frame:000000000001957F                 db  10h
.eh_frame:0000000000019580                 db  8Fh
.eh_frame:0000000000019581                 db    2
.eh_frame:0000000000019582                 db  42h ; B
.eh_frame:0000000000019583                 db  0Eh
.eh_frame:0000000000019584                 db  18h
.eh_frame:0000000000019585                 db  8Eh
.eh_frame:0000000000019586                 db    3
.eh_frame:0000000000019587                 db  45h ; E
.eh_frame:0000000000019588                 db  0Eh
.eh_frame:0000000000019589                 db  20h
.eh_frame:000000000001958A                 db  8Dh
.eh_frame:000000000001958B                 db    4
.eh_frame:000000000001958C                 db  42h ; B
.eh_frame:000000000001958D                 db  0Eh
.eh_frame:000000000001958E                 db  28h ; (
.eh_frame:000000000001958F                 db  8Ch
.eh_frame:0000000000019590                 db    5
.eh_frame:0000000000019591                 db  44h ; D
.eh_frame:0000000000019592                 db  0Eh
.eh_frame:0000000000019593                 db  30h ; 0
.eh_frame:0000000000019594                 db  86h
.eh_frame:0000000000019595                 db    6
.eh_frame:0000000000019596                 db  41h ; A
.eh_frame:0000000000019597                 db  0Eh
.eh_frame:0000000000019598                 db  38h ; 8
.eh_frame:0000000000019599                 db  83h
.eh_frame:000000000001959A                 db    7
.eh_frame:000000000001959B                 db  51h ; Q
.eh_frame:000000000001959C                 db  0Eh
.eh_frame:000000000001959D                 db  58h ; X
.eh_frame:000000000001959E                 db  49h ; I
.eh_frame:000000000001959F                 db  0Eh
.eh_frame:00000000000195A0                 db  60h ; `
.eh_frame:00000000000195A1                 db  4Eh ; N
.eh_frame:00000000000195A2                 db  0Eh
.eh_frame:00000000000195A3                 db  58h ; X
.eh_frame:00000000000195A4                 db  41h ; A
.eh_frame:00000000000195A5                 db  0Eh
.eh_frame:00000000000195A6                 db  50h ; P
.eh_frame:00000000000195A7                 db  46h ; F
.eh_frame:00000000000195A8                 db  0Ah
.eh_frame:00000000000195A9                 db  0Eh
.eh_frame:00000000000195AA                 db  38h ; 8
.eh_frame:00000000000195AB                 db  41h ; A
.eh_frame:00000000000195AC                 db  0Eh
.eh_frame:00000000000195AD                 db  30h ; 0
.eh_frame:00000000000195AE                 db  41h ; A
.eh_frame:00000000000195AF                 db  0Eh
.eh_frame:00000000000195B0                 db  28h ; (
.eh_frame:00000000000195B1                 db  42h ; B
.eh_frame:00000000000195B2                 db  0Eh
.eh_frame:00000000000195B3                 db  20h
.eh_frame:00000000000195B4                 db  42h ; B
.eh_frame:00000000000195B5                 db  0Eh
.eh_frame:00000000000195B6                 db  18h
.eh_frame:00000000000195B7                 db  42h ; B
.eh_frame:00000000000195B8                 db  0Eh
.eh_frame:00000000000195B9                 db  10h
.eh_frame:00000000000195BA                 db  42h ; B
.eh_frame:00000000000195BB                 db  0Eh
.eh_frame:00000000000195BC                 db    8
.eh_frame:00000000000195BD                 db  47h ; G
.eh_frame:00000000000195BE                 db  0Bh
.eh_frame:00000000000195BF                 db    2
.eh_frame:00000000000195C0                 db  97h
.eh_frame:00000000000195C1                 db  0Ah
.eh_frame:00000000000195C2                 db  0Eh
.eh_frame:00000000000195C3                 db  38h ; 8
.eh_frame:00000000000195C4                 db  44h ; D
.eh_frame:00000000000195C5                 db  0Eh
.eh_frame:00000000000195C6                 db  30h ; 0
.eh_frame:00000000000195C7                 db  41h ; A
.eh_frame:00000000000195C8                 db  0Eh
.eh_frame:00000000000195C9                 db  28h ; (
.eh_frame:00000000000195CA                 db  42h ; B
.eh_frame:00000000000195CB                 db  0Eh
.eh_frame:00000000000195CC                 db  20h
.eh_frame:00000000000195CD                 db  42h ; B
.eh_frame:00000000000195CE                 db  0Eh
.eh_frame:00000000000195CF                 db  18h
.eh_frame:00000000000195D0                 db  42h ; B
.eh_frame:00000000000195D1                 db  0Eh
.eh_frame:00000000000195D2                 db  10h
.eh_frame:00000000000195D3                 db  42h ; B
.eh_frame:00000000000195D4                 db  0Eh
.eh_frame:00000000000195D5                 db    8
.eh_frame:00000000000195D6                 db  4Ch ; L
.eh_frame:00000000000195D7                 db  0Bh
.eh_frame:00000000000195D8                 db  5Ch ; \
.eh_frame:00000000000195D9                 db    0
.eh_frame:00000000000195DA                 db    0
.eh_frame:00000000000195DB                 db    0
.eh_frame:00000000000195DC                 db 0CCh
.eh_frame:00000000000195DD                 db  1Ch
.eh_frame:00000000000195DE                 db    0
.eh_frame:00000000000195DF                 db    0
.eh_frame:00000000000195E0                 db  10h
.eh_frame:00000000000195E1                 db  52h ; R
.eh_frame:00000000000195E2                 db 0FFh
.eh_frame:00000000000195E3                 db 0FFh
.eh_frame:00000000000195E4                 db 0E1h
.eh_frame:00000000000195E5                 db    8
.eh_frame:00000000000195E6                 db    0
.eh_frame:00000000000195E7                 db    0
.eh_frame:00000000000195E8                 db    0
.eh_frame:00000000000195E9                 db  42h ; B
.eh_frame:00000000000195EA                 db  0Eh
.eh_frame:00000000000195EB                 db  10h
.eh_frame:00000000000195EC                 db  8Fh
.eh_frame:00000000000195ED                 db    2
.eh_frame:00000000000195EE                 db  42h ; B
.eh_frame:00000000000195EF                 db  0Eh
.eh_frame:00000000000195F0                 db  18h
.eh_frame:00000000000195F1                 db  8Eh
.eh_frame:00000000000195F2                 db    3
.eh_frame:00000000000195F3                 db  42h ; B
.eh_frame:00000000000195F4                 db  0Eh
.eh_frame:00000000000195F5                 db  20h
.eh_frame:00000000000195F6                 db  8Dh
.eh_frame:00000000000195F7                 db    4
.eh_frame:00000000000195F8                 db  42h ; B
.eh_frame:00000000000195F9                 db  0Eh
.eh_frame:00000000000195FA                 db  28h ; (
.eh_frame:00000000000195FB                 db  8Ch
.eh_frame:00000000000195FC                 db    5
.eh_frame:00000000000195FD                 db  41h ; A
.eh_frame:00000000000195FE                 db  0Eh
.eh_frame:00000000000195FF                 db  30h ; 0
.eh_frame:0000000000019600                 db  86h
.eh_frame:0000000000019601                 db    6
.eh_frame:0000000000019602                 db  41h ; A
.eh_frame:0000000000019603                 db  0Eh
.eh_frame:0000000000019604                 db  38h ; 8
.eh_frame:0000000000019605                 db  83h
.eh_frame:0000000000019606                 db    7
.eh_frame:0000000000019607                 db  47h ; G
.eh_frame:0000000000019608                 db  0Eh
.eh_frame:0000000000019609                 db 0F0h
.eh_frame:000000000001960A                 db    1
.eh_frame:000000000001960B                 db    3
.eh_frame:000000000001960C                 db  85h
.eh_frame:000000000001960D                 db    3
.eh_frame:000000000001960E                 db  0Ah
.eh_frame:000000000001960F                 db  0Eh
.eh_frame:0000000000019610                 db  38h ; 8
.eh_frame:0000000000019611                 db  41h ; A
.eh_frame:0000000000019612                 db  0Eh
.eh_frame:0000000000019613                 db  30h ; 0
.eh_frame:0000000000019614                 db  41h ; A
.eh_frame:0000000000019615                 db  0Eh
.eh_frame:0000000000019616                 db  28h ; (
.eh_frame:0000000000019617                 db  42h ; B
.eh_frame:0000000000019618                 db  0Eh
.eh_frame:0000000000019619                 db  20h
.eh_frame:000000000001961A                 db  42h ; B
.eh_frame:000000000001961B                 db  0Eh
.eh_frame:000000000001961C                 db  18h
.eh_frame:000000000001961D                 db  42h ; B
.eh_frame:000000000001961E                 db  0Eh
.eh_frame:000000000001961F                 db  10h
.eh_frame:0000000000019620                 db  42h ; B
.eh_frame:0000000000019621                 db  0Eh
.eh_frame:0000000000019622                 db    8
.eh_frame:0000000000019623                 db  48h ; H
.eh_frame:0000000000019624                 db  0Bh
.eh_frame:0000000000019625                 db    3
.eh_frame:0000000000019626                 db 0D8h
.eh_frame:0000000000019627                 db    2
.eh_frame:0000000000019628                 db  0Eh
.eh_frame:0000000000019629                 db 0F8h
.eh_frame:000000000001962A                 db    1
.eh_frame:000000000001962B                 db  42h ; B
.eh_frame:000000000001962C                 db  0Eh
.eh_frame:000000000001962D                 db  80h
.eh_frame:000000000001962E                 db    2
.eh_frame:000000000001962F                 db  4Fh ; O
.eh_frame:0000000000019630                 db  0Eh
.eh_frame:0000000000019631                 db 0F8h
.eh_frame:0000000000019632                 db    1
.eh_frame:0000000000019633                 db  44h ; D
.eh_frame:0000000000019634                 db  0Eh
.eh_frame:0000000000019635                 db 0F0h
.eh_frame:0000000000019636                 db    1
.eh_frame:0000000000019637                 db    0
.eh_frame:0000000000019638                 db  48h ; H
.eh_frame:0000000000019639                 db    0
.eh_frame:000000000001963A                 db    0
.eh_frame:000000000001963B                 db    0
.eh_frame:000000000001963C                 db  2Ch ; ,
.eh_frame:000000000001963D                 db  1Dh
.eh_frame:000000000001963E                 db    0
.eh_frame:000000000001963F                 db    0
.eh_frame:0000000000019640                 db 0A0h
.eh_frame:0000000000019641                 db  5Ah ; Z
.eh_frame:0000000000019642                 db 0FFh
.eh_frame:0000000000019643                 db 0FFh
.eh_frame:0000000000019644                 db 0ECh
.eh_frame:0000000000019645                 db    1
.eh_frame:0000000000019646                 db    0
.eh_frame:0000000000019647                 db    0
.eh_frame:0000000000019648                 db    0
.eh_frame:0000000000019649                 db  42h ; B
.eh_frame:000000000001964A                 db  0Eh
.eh_frame:000000000001964B                 db  10h
.eh_frame:000000000001964C                 db  8Fh
.eh_frame:000000000001964D                 db    2
.eh_frame:000000000001964E                 db  42h ; B
.eh_frame:000000000001964F                 db  0Eh
.eh_frame:0000000000019650                 db  18h
.eh_frame:0000000000019651                 db  8Eh
.eh_frame:0000000000019652                 db    3
.eh_frame:0000000000019653                 db  42h ; B
.eh_frame:0000000000019654                 db  0Eh
.eh_frame:0000000000019655                 db  20h
.eh_frame:0000000000019656                 db  8Dh
.eh_frame:0000000000019657                 db    4
.eh_frame:0000000000019658                 db  42h ; B
.eh_frame:0000000000019659                 db  0Eh
.eh_frame:000000000001965A                 db  28h ; (
.eh_frame:000000000001965B                 db  8Ch
.eh_frame:000000000001965C                 db    5
.eh_frame:000000000001965D                 db  44h ; D
.eh_frame:000000000001965E                 db  0Eh
.eh_frame:000000000001965F                 db  30h ; 0
.eh_frame:0000000000019660                 db  86h
.eh_frame:0000000000019661                 db    6
.eh_frame:0000000000019662                 db  41h ; A
.eh_frame:0000000000019663                 db  0Eh
.eh_frame:0000000000019664                 db  38h ; 8
.eh_frame:0000000000019665                 db  83h
.eh_frame:0000000000019666                 db    7
.eh_frame:0000000000019667                 db  47h ; G
.eh_frame:0000000000019668                 db  0Eh
.eh_frame:0000000000019669                 db  70h ; p
.eh_frame:000000000001966A                 db    2
.eh_frame:000000000001966B                 db  6Ch ; l
.eh_frame:000000000001966C                 db  0Ah
.eh_frame:000000000001966D                 db  0Eh
.eh_frame:000000000001966E                 db  38h ; 8
.eh_frame:000000000001966F                 db  41h ; A
.eh_frame:0000000000019670                 db  0Eh
.eh_frame:0000000000019671                 db  30h ; 0
.eh_frame:0000000000019672                 db  41h ; A
.eh_frame:0000000000019673                 db  0Eh
.eh_frame:0000000000019674                 db  28h ; (
.eh_frame:0000000000019675                 db  42h ; B
.eh_frame:0000000000019676                 db  0Eh
.eh_frame:0000000000019677                 db  20h
.eh_frame:0000000000019678                 db  42h ; B
.eh_frame:0000000000019679                 db  0Eh
.eh_frame:000000000001967A                 db  18h
.eh_frame:000000000001967B                 db  42h ; B
.eh_frame:000000000001967C                 db  0Eh
.eh_frame:000000000001967D                 db  10h
.eh_frame:000000000001967E                 db  42h ; B
.eh_frame:000000000001967F                 db  0Eh
.eh_frame:0000000000019680                 db    8
.eh_frame:0000000000019681                 db  46h ; F
.eh_frame:0000000000019682                 db  0Bh
.eh_frame:0000000000019683                 db    0
.eh_frame:0000000000019684                 db  5Ch ; \
.eh_frame:0000000000019685                 db    0
.eh_frame:0000000000019686                 db    0
.eh_frame:0000000000019687                 db    0
.eh_frame:0000000000019688                 db  78h ; x
.eh_frame:0000000000019689                 db  1Dh
.eh_frame:000000000001968A                 db    0
.eh_frame:000000000001968B                 db    0
.eh_frame:000000000001968C                 db  44h ; D
.eh_frame:000000000001968D                 db  5Ch ; \
.eh_frame:000000000001968E                 db 0FFh
.eh_frame:000000000001968F                 db 0FFh
.eh_frame:0000000000019690                 db  40h ; @
.eh_frame:0000000000019691                 db    3
.eh_frame:0000000000019692                 db    0
.eh_frame:0000000000019693                 db    0
.eh_frame:0000000000019694                 db    0
.eh_frame:0000000000019695                 db  42h ; B
.eh_frame:0000000000019696                 db  0Eh
.eh_frame:0000000000019697                 db  10h
.eh_frame:0000000000019698                 db  8Fh
.eh_frame:0000000000019699                 db    2
.eh_frame:000000000001969A                 db  42h ; B
.eh_frame:000000000001969B                 db  0Eh
.eh_frame:000000000001969C                 db  18h
.eh_frame:000000000001969D                 db  8Eh
.eh_frame:000000000001969E                 db    3
.eh_frame:000000000001969F                 db  45h ; E
.eh_frame:00000000000196A0                 db  0Eh
.eh_frame:00000000000196A1                 db  20h
.eh_frame:00000000000196A2                 db  8Dh
.eh_frame:00000000000196A3                 db    4
.eh_frame:00000000000196A4                 db  42h ; B
.eh_frame:00000000000196A5                 db  0Eh
.eh_frame:00000000000196A6                 db  28h ; (
.eh_frame:00000000000196A7                 db  8Ch
.eh_frame:00000000000196A8                 db    5
.eh_frame:00000000000196A9                 db  44h ; D
.eh_frame:00000000000196AA                 db  0Eh
.eh_frame:00000000000196AB                 db  30h ; 0
.eh_frame:00000000000196AC                 db  86h
.eh_frame:00000000000196AD                 db    6
.eh_frame:00000000000196AE                 db  41h ; A
.eh_frame:00000000000196AF                 db  0Eh
.eh_frame:00000000000196B0                 db  38h ; 8
.eh_frame:00000000000196B1                 db  83h
.eh_frame:00000000000196B2                 db    7
.eh_frame:00000000000196B3                 db  44h ; D
.eh_frame:00000000000196B4                 db  0Eh
.eh_frame:00000000000196B5                 db 0A0h
.eh_frame:00000000000196B6                 db    1
.eh_frame:00000000000196B7                 db    3
.eh_frame:00000000000196B8                 db  5Dh ; ]
.eh_frame:00000000000196B9                 db    1
.eh_frame:00000000000196BA                 db  0Eh
.eh_frame:00000000000196BB                 db 0A8h
.eh_frame:00000000000196BC                 db    1
.eh_frame:00000000000196BD                 db  51h ; Q
.eh_frame:00000000000196BE                 db  0Eh
.eh_frame:00000000000196BF                 db 0B0h
.eh_frame:00000000000196C0                 db    1
.eh_frame:00000000000196C1                 db  52h ; R
.eh_frame:00000000000196C2                 db  0Eh
.eh_frame:00000000000196C3                 db 0A8h
.eh_frame:00000000000196C4                 db    1
.eh_frame:00000000000196C5                 db  41h ; A
.eh_frame:00000000000196C6                 db  0Eh
.eh_frame:00000000000196C7                 db 0A0h
.eh_frame:00000000000196C8                 db    1
.eh_frame:00000000000196C9                 db    3
.eh_frame:00000000000196CA                 db  94h
.eh_frame:00000000000196CB                 db    1
.eh_frame:00000000000196CC                 db  0Ah
.eh_frame:00000000000196CD                 db  0Eh
.eh_frame:00000000000196CE                 db  38h ; 8
.eh_frame:00000000000196CF                 db  41h ; A
.eh_frame:00000000000196D0                 db  0Eh
.eh_frame:00000000000196D1                 db  30h ; 0
.eh_frame:00000000000196D2                 db  41h ; A
.eh_frame:00000000000196D3                 db  0Eh
.eh_frame:00000000000196D4                 db  28h ; (
.eh_frame:00000000000196D5                 db  42h ; B
.eh_frame:00000000000196D6                 db  0Eh
.eh_frame:00000000000196D7                 db  20h
.eh_frame:00000000000196D8                 db  42h ; B
.eh_frame:00000000000196D9                 db  0Eh
.eh_frame:00000000000196DA                 db  18h
.eh_frame:00000000000196DB                 db  42h ; B
.eh_frame:00000000000196DC                 db  0Eh
.eh_frame:00000000000196DD                 db  10h
.eh_frame:00000000000196DE                 db  42h ; B
.eh_frame:00000000000196DF                 db  0Eh
.eh_frame:00000000000196E0                 db    8
.eh_frame:00000000000196E1                 db  41h ; A
.eh_frame:00000000000196E2                 db  0Bh
.eh_frame:00000000000196E3                 db    0
.eh_frame:00000000000196E4                 db  4Ch ; L
.eh_frame:00000000000196E5                 db    0
.eh_frame:00000000000196E6                 db    0
.eh_frame:00000000000196E7                 db    0
.eh_frame:00000000000196E8                 db 0D8h
.eh_frame:00000000000196E9                 db  1Dh
.eh_frame:00000000000196EA                 db    0
.eh_frame:00000000000196EB                 db    0
.eh_frame:00000000000196EC                 db  24h ; $
.eh_frame:00000000000196ED                 db  5Fh ; _
.eh_frame:00000000000196EE                 db 0FFh
.eh_frame:00000000000196EF                 db 0FFh
.eh_frame:00000000000196F0                 db  30h ; 0
.eh_frame:00000000000196F1                 db  17h
.eh_frame:00000000000196F2                 db    0
.eh_frame:00000000000196F3                 db    0
.eh_frame:00000000000196F4                 db    0
.eh_frame:00000000000196F5                 db  42h ; B
.eh_frame:00000000000196F6                 db  0Eh
.eh_frame:00000000000196F7                 db  10h
.eh_frame:00000000000196F8                 db  8Fh
.eh_frame:00000000000196F9                 db    2
.eh_frame:00000000000196FA                 db  42h ; B
.eh_frame:00000000000196FB                 db  0Eh
.eh_frame:00000000000196FC                 db  18h
.eh_frame:00000000000196FD                 db  8Eh
.eh_frame:00000000000196FE                 db    3
.eh_frame:00000000000196FF                 db  42h ; B
.eh_frame:0000000000019700                 db  0Eh
.eh_frame:0000000000019701                 db  20h
.eh_frame:0000000000019702                 db  8Dh
.eh_frame:0000000000019703                 db    4
.eh_frame:0000000000019704                 db  42h ; B
.eh_frame:0000000000019705                 db  0Eh
.eh_frame:0000000000019706                 db  28h ; (
.eh_frame:0000000000019707                 db  8Ch
.eh_frame:0000000000019708                 db    5
.eh_frame:0000000000019709                 db  44h ; D
.eh_frame:000000000001970A                 db  0Eh
.eh_frame:000000000001970B                 db  30h ; 0
.eh_frame:000000000001970C                 db  86h
.eh_frame:000000000001970D                 db    6
.eh_frame:000000000001970E                 db  41h ; A
.eh_frame:000000000001970F                 db  0Eh
.eh_frame:0000000000019710                 db  38h ; 8
.eh_frame:0000000000019711                 db  83h
.eh_frame:0000000000019712                 db    7
.eh_frame:0000000000019713                 db  52h ; R
.eh_frame:0000000000019714                 db  0Eh
.eh_frame:0000000000019715                 db 0F0h
.eh_frame:0000000000019716                 db    4
.eh_frame:0000000000019717                 db    3
.eh_frame:0000000000019718                 db  7Ch ; |
.eh_frame:0000000000019719                 db  0Bh
.eh_frame:000000000001971A                 db  0Ah
.eh_frame:000000000001971B                 db  0Eh
.eh_frame:000000000001971C                 db  38h ; 8
.eh_frame:000000000001971D                 db  41h ; A
.eh_frame:000000000001971E                 db  0Eh
.eh_frame:000000000001971F                 db  30h ; 0
.eh_frame:0000000000019720                 db  41h ; A
.eh_frame:0000000000019721                 db  0Eh
.eh_frame:0000000000019722                 db  28h ; (
.eh_frame:0000000000019723                 db  42h ; B
.eh_frame:0000000000019724                 db  0Eh
.eh_frame:0000000000019725                 db  20h
.eh_frame:0000000000019726                 db  42h ; B
.eh_frame:0000000000019727                 db  0Eh
.eh_frame:0000000000019728                 db  18h
.eh_frame:0000000000019729                 db  42h ; B
.eh_frame:000000000001972A                 db  0Eh
.eh_frame:000000000001972B                 db  10h
.eh_frame:000000000001972C                 db  42h ; B
.eh_frame:000000000001972D                 db  0Eh
.eh_frame:000000000001972E                 db    8
.eh_frame:000000000001972F                 db  4Bh ; K
.eh_frame:0000000000019730                 db  0Bh
.eh_frame:0000000000019731                 db    0
.eh_frame:0000000000019732                 db    0
.eh_frame:0000000000019733                 db    0
.eh_frame:0000000000019734                 db  5Ch ; \
.eh_frame:0000000000019735                 db    0
.eh_frame:0000000000019736                 db    0
.eh_frame:0000000000019737                 db    0
.eh_frame:0000000000019738                 db  28h ; (
.eh_frame:0000000000019739                 db  1Eh
.eh_frame:000000000001973A                 db    0
.eh_frame:000000000001973B                 db    0
.eh_frame:000000000001973C                 db    4
.eh_frame:000000000001973D                 db  76h ; v
.eh_frame:000000000001973E                 db 0FFh
.eh_frame:000000000001973F                 db 0FFh
.eh_frame:0000000000019740                 db  50h ; P
.eh_frame:0000000000019741                 db    8
.eh_frame:0000000000019742                 db    0
.eh_frame:0000000000019743                 db    0
.eh_frame:0000000000019744                 db    0
.eh_frame:0000000000019745                 db  42h ; B
.eh_frame:0000000000019746                 db  0Eh
.eh_frame:0000000000019747                 db  10h
.eh_frame:0000000000019748                 db  8Fh
.eh_frame:0000000000019749                 db    2
.eh_frame:000000000001974A                 db  42h ; B
.eh_frame:000000000001974B                 db  0Eh
.eh_frame:000000000001974C                 db  18h
.eh_frame:000000000001974D                 db  8Eh
.eh_frame:000000000001974E                 db    3
.eh_frame:000000000001974F                 db  45h ; E
.eh_frame:0000000000019750                 db  0Eh
.eh_frame:0000000000019751                 db  20h
.eh_frame:0000000000019752                 db  8Dh
.eh_frame:0000000000019753                 db    4
.eh_frame:0000000000019754                 db  42h ; B
.eh_frame:0000000000019755                 db  0Eh
.eh_frame:0000000000019756                 db  28h ; (
.eh_frame:0000000000019757                 db  8Ch
.eh_frame:0000000000019758                 db    5
.eh_frame:0000000000019759                 db  44h ; D
.eh_frame:000000000001975A                 db  0Eh
.eh_frame:000000000001975B                 db  30h ; 0
.eh_frame:000000000001975C                 db  86h
.eh_frame:000000000001975D                 db    6
.eh_frame:000000000001975E                 db  41h ; A
.eh_frame:000000000001975F                 db  0Eh
.eh_frame:0000000000019760                 db  38h ; 8
.eh_frame:0000000000019761                 db  83h
.eh_frame:0000000000019762                 db    7
.eh_frame:0000000000019763                 db  55h ; U
.eh_frame:0000000000019764                 db  0Eh
.eh_frame:0000000000019765                 db 0E0h
.eh_frame:0000000000019766                 db    1
.eh_frame:0000000000019767                 db    2
.eh_frame:0000000000019768                 db  91h
.eh_frame:0000000000019769                 db  0Ah
.eh_frame:000000000001976A                 db  0Eh
.eh_frame:000000000001976B                 db  38h ; 8
.eh_frame:000000000001976C                 db  41h ; A
.eh_frame:000000000001976D                 db  0Eh
.eh_frame:000000000001976E                 db  30h ; 0
.eh_frame:000000000001976F                 db  41h ; A
.eh_frame:0000000000019770                 db  0Eh
.eh_frame:0000000000019771                 db  28h ; (
.eh_frame:0000000000019772                 db  42h ; B
.eh_frame:0000000000019773                 db  0Eh
.eh_frame:0000000000019774                 db  20h
.eh_frame:0000000000019775                 db  42h ; B
.eh_frame:0000000000019776                 db  0Eh
.eh_frame:0000000000019777                 db  18h
.eh_frame:0000000000019778                 db  42h ; B
.eh_frame:0000000000019779                 db  0Eh
.eh_frame:000000000001977A                 db  10h
.eh_frame:000000000001977B                 db  42h ; B
.eh_frame:000000000001977C                 db  0Eh
.eh_frame:000000000001977D                 db    8
.eh_frame:000000000001977E                 db  48h ; H
.eh_frame:000000000001977F                 db  0Bh
.eh_frame:0000000000019780                 db    3
.eh_frame:0000000000019781                 db 0C3h
.eh_frame:0000000000019782                 db    5
.eh_frame:0000000000019783                 db  0Eh
.eh_frame:0000000000019784                 db 0E8h
.eh_frame:0000000000019785                 db    1
.eh_frame:0000000000019786                 db  4Ah ; J
.eh_frame:0000000000019787                 db  0Eh
.eh_frame:0000000000019788                 db 0F0h
.eh_frame:0000000000019789                 db    1
.eh_frame:000000000001978A                 db  56h ; V
.eh_frame:000000000001978B                 db  0Eh
.eh_frame:000000000001978C                 db 0E8h
.eh_frame:000000000001978D                 db    1
.eh_frame:000000000001978E                 db  41h ; A
.eh_frame:000000000001978F                 db  0Eh
.eh_frame:0000000000019790                 db 0E0h
.eh_frame:0000000000019791                 db    1
.eh_frame:0000000000019792                 db    0
.eh_frame:0000000000019793                 db    0
.eh_frame:0000000000019794                 db  40h ; @
.eh_frame:0000000000019795                 db    0
.eh_frame:0000000000019796                 db    0
.eh_frame:0000000000019797                 db    0
.eh_frame:0000000000019798                 db  88h
.eh_frame:0000000000019799                 db  1Eh
.eh_frame:000000000001979A                 db    0
.eh_frame:000000000001979B                 db    0
.eh_frame:000000000001979C                 db 0F4h
.eh_frame:000000000001979D                 db  7Dh ; }
.eh_frame:000000000001979E                 db 0FFh
.eh_frame:000000000001979F                 db 0FFh
.eh_frame:00000000000197A0                 db  5Dh ; ]
.eh_frame:00000000000197A1                 db    2
.eh_frame:00000000000197A2                 db    0
.eh_frame:00000000000197A3                 db    0
.eh_frame:00000000000197A4                 db    0
.eh_frame:00000000000197A5                 db  42h ; B
.eh_frame:00000000000197A6                 db  0Eh
.eh_frame:00000000000197A7                 db  10h
.eh_frame:00000000000197A8                 db  8Eh
.eh_frame:00000000000197A9                 db    2
.eh_frame:00000000000197AA                 db  42h ; B
.eh_frame:00000000000197AB                 db  0Eh
.eh_frame:00000000000197AC                 db  18h
.eh_frame:00000000000197AD                 db  8Dh
.eh_frame:00000000000197AE                 db    3
.eh_frame:00000000000197AF                 db  45h ; E
.eh_frame:00000000000197B0                 db  0Eh
.eh_frame:00000000000197B1                 db  20h
.eh_frame:00000000000197B2                 db  8Ch
.eh_frame:00000000000197B3                 db    4
.eh_frame:00000000000197B4                 db  41h ; A
.eh_frame:00000000000197B5                 db  0Eh
.eh_frame:00000000000197B6                 db  28h ; (
.eh_frame:00000000000197B7                 db  86h
.eh_frame:00000000000197B8                 db    5
.eh_frame:00000000000197B9                 db  44h ; D
.eh_frame:00000000000197BA                 db  0Eh
.eh_frame:00000000000197BB                 db  30h ; 0
.eh_frame:00000000000197BC                 db  83h
.eh_frame:00000000000197BD                 db    6
.eh_frame:00000000000197BE                 db  4Ah ; J
.eh_frame:00000000000197BF                 db  0Eh
.eh_frame:00000000000197C0                 db  50h ; P
.eh_frame:00000000000197C1                 db    2
.eh_frame:00000000000197C2                 db  61h ; a
.eh_frame:00000000000197C3                 db  0Ah
.eh_frame:00000000000197C4                 db  0Eh
.eh_frame:00000000000197C5                 db  30h ; 0
.eh_frame:00000000000197C6                 db  41h ; A
.eh_frame:00000000000197C7                 db  0Eh
.eh_frame:00000000000197C8                 db  28h ; (
.eh_frame:00000000000197C9                 db  41h ; A
.eh_frame:00000000000197CA                 db  0Eh
.eh_frame:00000000000197CB                 db  20h
.eh_frame:00000000000197CC                 db  42h ; B
.eh_frame:00000000000197CD                 db  0Eh
.eh_frame:00000000000197CE                 db  18h
.eh_frame:00000000000197CF                 db  42h ; B
.eh_frame:00000000000197D0                 db  0Eh
.eh_frame:00000000000197D1                 db  10h
.eh_frame:00000000000197D2                 db  42h ; B
.eh_frame:00000000000197D3                 db  0Eh
.eh_frame:00000000000197D4                 db    8
.eh_frame:00000000000197D5                 db  47h ; G
.eh_frame:00000000000197D6                 db  0Bh
.eh_frame:00000000000197D7                 db    0
.eh_frame:00000000000197D8                 db  48h ; H
.eh_frame:00000000000197D9                 db    0
.eh_frame:00000000000197DA                 db    0
.eh_frame:00000000000197DB                 db    0
.eh_frame:00000000000197DC                 db 0CCh
.eh_frame:00000000000197DD                 db  1Eh
.eh_frame:00000000000197DE                 db    0
.eh_frame:00000000000197DF                 db    0
.eh_frame:00000000000197E0                 db  10h
.eh_frame:00000000000197E1                 db  80h
.eh_frame:00000000000197E2                 db 0FFh
.eh_frame:00000000000197E3                 db 0FFh
.eh_frame:00000000000197E4                 db 0FDh
.eh_frame:00000000000197E5                 db    6
.eh_frame:00000000000197E6                 db    0
.eh_frame:00000000000197E7                 db    0
.eh_frame:00000000000197E8                 db    0
.eh_frame:00000000000197E9                 db  42h ; B
.eh_frame:00000000000197EA                 db  0Eh
.eh_frame:00000000000197EB                 db  10h
.eh_frame:00000000000197EC                 db  8Fh
.eh_frame:00000000000197ED                 db    2
.eh_frame:00000000000197EE                 db  42h ; B
.eh_frame:00000000000197EF                 db  0Eh
.eh_frame:00000000000197F0                 db  18h
.eh_frame:00000000000197F1                 db  8Eh
.eh_frame:00000000000197F2                 db    3
.eh_frame:00000000000197F3                 db  42h ; B
.eh_frame:00000000000197F4                 db  0Eh
.eh_frame:00000000000197F5                 db  20h
.eh_frame:00000000000197F6                 db  8Dh
.eh_frame:00000000000197F7                 db    4
.eh_frame:00000000000197F8                 db  42h ; B
.eh_frame:00000000000197F9                 db  0Eh
.eh_frame:00000000000197FA                 db  28h ; (
.eh_frame:00000000000197FB                 db  8Ch
.eh_frame:00000000000197FC                 db    5
.eh_frame:00000000000197FD                 db  41h ; A
.eh_frame:00000000000197FE                 db  0Eh
.eh_frame:00000000000197FF                 db  30h ; 0
.eh_frame:0000000000019800                 db  86h
.eh_frame:0000000000019801                 db    6
.eh_frame:0000000000019802                 db  41h ; A
.eh_frame:0000000000019803                 db  0Eh
.eh_frame:0000000000019804                 db  38h ; 8
.eh_frame:0000000000019805                 db  83h
.eh_frame:0000000000019806                 db    7
.eh_frame:0000000000019807                 db  47h ; G
.eh_frame:0000000000019808                 db  0Eh
.eh_frame:0000000000019809                 db  70h ; p
.eh_frame:000000000001980A                 db    2
.eh_frame:000000000001980B                 db 0CBh
.eh_frame:000000000001980C                 db  0Ah
.eh_frame:000000000001980D                 db  0Eh
.eh_frame:000000000001980E                 db  38h ; 8
.eh_frame:000000000001980F                 db  41h ; A
.eh_frame:0000000000019810                 db  0Eh
.eh_frame:0000000000019811                 db  30h ; 0
.eh_frame:0000000000019812                 db  41h ; A
.eh_frame:0000000000019813                 db  0Eh
.eh_frame:0000000000019814                 db  28h ; (
.eh_frame:0000000000019815                 db  42h ; B
.eh_frame:0000000000019816                 db  0Eh
.eh_frame:0000000000019817                 db  20h
.eh_frame:0000000000019818                 db  42h ; B
.eh_frame:0000000000019819                 db  0Eh
.eh_frame:000000000001981A                 db  18h
.eh_frame:000000000001981B                 db  42h ; B
.eh_frame:000000000001981C                 db  0Eh
.eh_frame:000000000001981D                 db  10h
.eh_frame:000000000001981E                 db  42h ; B
.eh_frame:000000000001981F                 db  0Eh
.eh_frame:0000000000019820                 db    8
.eh_frame:0000000000019821                 db  4Ah ; J
.eh_frame:0000000000019822                 db  0Bh
.eh_frame:0000000000019823                 db    0
.eh_frame:0000000000019824                 db  3Ch ; <
.eh_frame:0000000000019825                 db    0
.eh_frame:0000000000019826                 db    0
.eh_frame:0000000000019827                 db    0
.eh_frame:0000000000019828                 db  18h
.eh_frame:0000000000019829                 db  1Fh
.eh_frame:000000000001982A                 db    0
.eh_frame:000000000001982B                 db    0
.eh_frame:000000000001982C                 db 0C4h
.eh_frame:000000000001982D                 db  86h
.eh_frame:000000000001982E                 db 0FFh
.eh_frame:000000000001982F                 db 0FFh
.eh_frame:0000000000019830                 db 0B6h
.eh_frame:0000000000019831                 db    0
.eh_frame:0000000000019832                 db    0
.eh_frame:0000000000019833                 db    0
.eh_frame:0000000000019834                 db    0
.eh_frame:0000000000019835                 db  42h ; B
.eh_frame:0000000000019836                 db  0Eh
.eh_frame:0000000000019837                 db  10h
.eh_frame:0000000000019838                 db  8Eh
.eh_frame:0000000000019839                 db    2
.eh_frame:000000000001983A                 db  45h ; E
.eh_frame:000000000001983B                 db  0Eh
.eh_frame:000000000001983C                 db  18h
.eh_frame:000000000001983D                 db  8Dh
.eh_frame:000000000001983E                 db    3
.eh_frame:000000000001983F                 db  45h ; E
.eh_frame:0000000000019840                 db  0Eh
.eh_frame:0000000000019841                 db  20h
.eh_frame:0000000000019842                 db  8Ch
.eh_frame:0000000000019843                 db    4
.eh_frame:0000000000019844                 db  48h ; H
.eh_frame:0000000000019845                 db  0Eh
.eh_frame:0000000000019846                 db  28h ; (
.eh_frame:0000000000019847                 db  86h
.eh_frame:0000000000019848                 db    5
.eh_frame:0000000000019849                 db  44h ; D
.eh_frame:000000000001984A                 db  0Eh
.eh_frame:000000000001984B                 db  30h ; 0
.eh_frame:000000000001984C                 db  83h
.eh_frame:000000000001984D                 db    6
.eh_frame:000000000001984E                 db    2
.eh_frame:000000000001984F                 db  83h
.eh_frame:0000000000019850                 db  0Ah
.eh_frame:0000000000019851                 db  0Eh
.eh_frame:0000000000019852                 db  28h ; (
.eh_frame:0000000000019853                 db  41h ; A
.eh_frame:0000000000019854                 db  0Eh
.eh_frame:0000000000019855                 db  20h
.eh_frame:0000000000019856                 db  42h ; B
.eh_frame:0000000000019857                 db  0Eh
.eh_frame:0000000000019858                 db  18h
.eh_frame:0000000000019859                 db  42h ; B
.eh_frame:000000000001985A                 db  0Eh
.eh_frame:000000000001985B                 db  10h
.eh_frame:000000000001985C                 db  42h ; B
.eh_frame:000000000001985D                 db  0Eh
.eh_frame:000000000001985E                 db    8
.eh_frame:000000000001985F                 db  46h ; F
.eh_frame:0000000000019860                 db  0Bh
.eh_frame:0000000000019861                 db    0
.eh_frame:0000000000019862                 db    0
.eh_frame:0000000000019863                 db    0
.eh_frame:0000000000019864                 db  5Ch ; \
.eh_frame:0000000000019865                 db    0
.eh_frame:0000000000019866                 db    0
.eh_frame:0000000000019867                 db    0
.eh_frame:0000000000019868                 db  58h ; X
.eh_frame:0000000000019869                 db  1Fh
.eh_frame:000000000001986A                 db    0
.eh_frame:000000000001986B                 db    0
.eh_frame:000000000001986C                 db  44h ; D
.eh_frame:000000000001986D                 db  87h
.eh_frame:000000000001986E                 db 0FFh
.eh_frame:000000000001986F                 db 0FFh
.eh_frame:0000000000019870                 db 0D3h
.eh_frame:0000000000019871                 db  14h
.eh_frame:0000000000019872                 db    0
.eh_frame:0000000000019873                 db    0
.eh_frame:0000000000019874                 db    0
.eh_frame:0000000000019875                 db  42h ; B
.eh_frame:0000000000019876                 db  0Eh
.eh_frame:0000000000019877                 db  10h
.eh_frame:0000000000019878                 db  8Fh
.eh_frame:0000000000019879                 db    2
.eh_frame:000000000001987A                 db  42h ; B
.eh_frame:000000000001987B                 db  0Eh
.eh_frame:000000000001987C                 db  18h
.eh_frame:000000000001987D                 db  8Eh
.eh_frame:000000000001987E                 db    3
.eh_frame:000000000001987F                 db  42h ; B
.eh_frame:0000000000019880                 db  0Eh
.eh_frame:0000000000019881                 db  20h
.eh_frame:0000000000019882                 db  8Dh
.eh_frame:0000000000019883                 db    4
.eh_frame:0000000000019884                 db  42h ; B
.eh_frame:0000000000019885                 db  0Eh
.eh_frame:0000000000019886                 db  28h ; (
.eh_frame:0000000000019887                 db  8Ch
.eh_frame:0000000000019888                 db    5
.eh_frame:0000000000019889                 db  41h ; A
.eh_frame:000000000001988A                 db  0Eh
.eh_frame:000000000001988B                 db  30h ; 0
.eh_frame:000000000001988C                 db  86h
.eh_frame:000000000001988D                 db    6
.eh_frame:000000000001988E                 db  41h ; A
.eh_frame:000000000001988F                 db  0Eh
.eh_frame:0000000000019890                 db  38h ; 8
.eh_frame:0000000000019891                 db  83h
.eh_frame:0000000000019892                 db    7
.eh_frame:0000000000019893                 db  47h ; G
.eh_frame:0000000000019894                 db  0Eh
.eh_frame:0000000000019895                 db 0E0h
.eh_frame:0000000000019896                 db    2
.eh_frame:0000000000019897                 db    3
.eh_frame:0000000000019898                 db  22h ; "
.eh_frame:0000000000019899                 db    1
.eh_frame:000000000001989A                 db  0Ah
.eh_frame:000000000001989B                 db  0Eh
.eh_frame:000000000001989C                 db  38h ; 8
.eh_frame:000000000001989D                 db  41h ; A
.eh_frame:000000000001989E                 db  0Eh
.eh_frame:000000000001989F                 db  30h ; 0
.eh_frame:00000000000198A0                 db  41h ; A
.eh_frame:00000000000198A1                 db  0Eh
.eh_frame:00000000000198A2                 db  28h ; (
.eh_frame:00000000000198A3                 db  42h ; B
.eh_frame:00000000000198A4                 db  0Eh
.eh_frame:00000000000198A5                 db  20h
.eh_frame:00000000000198A6                 db  42h ; B
.eh_frame:00000000000198A7                 db  0Eh
.eh_frame:00000000000198A8                 db  18h
.eh_frame:00000000000198A9                 db  42h ; B
.eh_frame:00000000000198AA                 db  0Eh
.eh_frame:00000000000198AB                 db  10h
.eh_frame:00000000000198AC                 db  42h ; B
.eh_frame:00000000000198AD                 db  0Eh
.eh_frame:00000000000198AE                 db    8
.eh_frame:00000000000198AF                 db  41h ; A
.eh_frame:00000000000198B0                 db  0Bh
.eh_frame:00000000000198B1                 db    3
.eh_frame:00000000000198B2                 db 0BFh
.eh_frame:00000000000198B3                 db  0Bh
.eh_frame:00000000000198B4                 db  0Eh
.eh_frame:00000000000198B5                 db 0E8h
.eh_frame:00000000000198B6                 db    2
.eh_frame:00000000000198B7                 db  4Ch ; L
.eh_frame:00000000000198B8                 db  0Eh
.eh_frame:00000000000198B9                 db 0F0h
.eh_frame:00000000000198BA                 db    2
.eh_frame:00000000000198BB                 db  64h ; d
.eh_frame:00000000000198BC                 db  0Eh
.eh_frame:00000000000198BD                 db 0E8h
.eh_frame:00000000000198BE                 db    2
.eh_frame:00000000000198BF                 db  42h ; B
.eh_frame:00000000000198C0                 db  0Eh
.eh_frame:00000000000198C1                 db 0E0h
.eh_frame:00000000000198C2                 db    2
.eh_frame:00000000000198C3                 db    0
.eh_frame:00000000000198C4                 db  48h ; H
.eh_frame:00000000000198C5                 db    0
.eh_frame:00000000000198C6                 db    0
.eh_frame:00000000000198C7                 db    0
.eh_frame:00000000000198C8                 db 0B8h
.eh_frame:00000000000198C9                 db  1Fh
.eh_frame:00000000000198CA                 db    0
.eh_frame:00000000000198CB                 db    0
.eh_frame:00000000000198CC                 db 0C4h
.eh_frame:00000000000198CD                 db  9Bh
.eh_frame:00000000000198CE                 db 0FFh
.eh_frame:00000000000198CF                 db 0FFh
.eh_frame:00000000000198D0                 db  82h
.eh_frame:00000000000198D1                 db    1
.eh_frame:00000000000198D2                 db    0
.eh_frame:00000000000198D3                 db    0
.eh_frame:00000000000198D4                 db    0
.eh_frame:00000000000198D5                 db  42h ; B
.eh_frame:00000000000198D6                 db  0Eh
.eh_frame:00000000000198D7                 db  10h
.eh_frame:00000000000198D8                 db  8Fh
.eh_frame:00000000000198D9                 db    2
.eh_frame:00000000000198DA                 db  42h ; B
.eh_frame:00000000000198DB                 db  0Eh
.eh_frame:00000000000198DC                 db  18h
.eh_frame:00000000000198DD                 db  8Eh
.eh_frame:00000000000198DE                 db    3
.eh_frame:00000000000198DF                 db  45h ; E
.eh_frame:00000000000198E0                 db  0Eh
.eh_frame:00000000000198E1                 db  20h
.eh_frame:00000000000198E2                 db  8Dh
.eh_frame:00000000000198E3                 db    4
.eh_frame:00000000000198E4                 db  42h ; B
.eh_frame:00000000000198E5                 db  0Eh
.eh_frame:00000000000198E6                 db  28h ; (
.eh_frame:00000000000198E7                 db  8Ch
.eh_frame:00000000000198E8                 db    5
.eh_frame:00000000000198E9                 db  44h ; D
.eh_frame:00000000000198EA                 db  0Eh
.eh_frame:00000000000198EB                 db  30h ; 0
.eh_frame:00000000000198EC                 db  86h
.eh_frame:00000000000198ED                 db    6
.eh_frame:00000000000198EE                 db  41h ; A
.eh_frame:00000000000198EF                 db  0Eh
.eh_frame:00000000000198F0                 db  38h ; 8
.eh_frame:00000000000198F1                 db  83h
.eh_frame:00000000000198F2                 db    7
.eh_frame:00000000000198F3                 db  4Dh ; M
.eh_frame:00000000000198F4                 db  0Eh
.eh_frame:00000000000198F5                 db  80h
.eh_frame:00000000000198F6                 db    1
.eh_frame:00000000000198F7                 db    2
.eh_frame:00000000000198F8                 db 0FAh
.eh_frame:00000000000198F9                 db  0Ah
.eh_frame:00000000000198FA                 db  0Eh
.eh_frame:00000000000198FB                 db  38h ; 8
.eh_frame:00000000000198FC                 db  41h ; A
.eh_frame:00000000000198FD                 db  0Eh
.eh_frame:00000000000198FE                 db  30h ; 0
.eh_frame:00000000000198FF                 db  41h ; A
.eh_frame:0000000000019900                 db  0Eh
.eh_frame:0000000000019901                 db  28h ; (
.eh_frame:0000000000019902                 db  42h ; B
.eh_frame:0000000000019903                 db  0Eh
.eh_frame:0000000000019904                 db  20h
.eh_frame:0000000000019905                 db  42h ; B
.eh_frame:0000000000019906                 db  0Eh
.eh_frame:0000000000019907                 db  18h
.eh_frame:0000000000019908                 db  42h ; B
.eh_frame:0000000000019909                 db  0Eh
.eh_frame:000000000001990A                 db  10h
.eh_frame:000000000001990B                 db  42h ; B
.eh_frame:000000000001990C                 db  0Eh
.eh_frame:000000000001990D                 db    8
.eh_frame:000000000001990E                 db  47h ; G
.eh_frame:000000000001990F                 db  0Bh
.eh_frame:0000000000019910                 db  4Ch ; L
.eh_frame:0000000000019911                 db    0
.eh_frame:0000000000019912                 db    0
.eh_frame:0000000000019913                 db    0
.eh_frame:0000000000019914                 db    4
.eh_frame:0000000000019915                 db  20h
.eh_frame:0000000000019916                 db    0
.eh_frame:0000000000019917                 db    0
.eh_frame:0000000000019918                 db    8
.eh_frame:0000000000019919                 db  9Dh
.eh_frame:000000000001991A                 db 0FFh
.eh_frame:000000000001991B                 db 0FFh
.eh_frame:000000000001991C                 db  7Fh ; 
.eh_frame:000000000001991D                 db    1
.eh_frame:000000000001991E                 db    0
.eh_frame:000000000001991F                 db    0
.eh_frame:0000000000019920                 db    0
.eh_frame:0000000000019921                 db  42h ; B
.eh_frame:0000000000019922                 db  0Eh
.eh_frame:0000000000019923                 db  10h
.eh_frame:0000000000019924                 db  8Fh
.eh_frame:0000000000019925                 db    2
.eh_frame:0000000000019926                 db  42h ; B
.eh_frame:0000000000019927                 db  0Eh
.eh_frame:0000000000019928                 db  18h
.eh_frame:0000000000019929                 db  8Eh
.eh_frame:000000000001992A                 db    3
.eh_frame:000000000001992B                 db  45h ; E
.eh_frame:000000000001992C                 db  0Eh
.eh_frame:000000000001992D                 db  20h
.eh_frame:000000000001992E                 db  8Dh
.eh_frame:000000000001992F                 db    4
.eh_frame:0000000000019930                 db  42h ; B
.eh_frame:0000000000019931                 db  0Eh
.eh_frame:0000000000019932                 db  28h ; (
.eh_frame:0000000000019933                 db  8Ch
.eh_frame:0000000000019934                 db    5
.eh_frame:0000000000019935                 db  44h ; D
.eh_frame:0000000000019936                 db  0Eh
.eh_frame:0000000000019937                 db  30h ; 0
.eh_frame:0000000000019938                 db  86h
.eh_frame:0000000000019939                 db    6
.eh_frame:000000000001993A                 db  41h ; A
.eh_frame:000000000001993B                 db  0Eh
.eh_frame:000000000001993C                 db  38h ; 8
.eh_frame:000000000001993D                 db  83h
.eh_frame:000000000001993E                 db    7
.eh_frame:000000000001993F                 db  4Ah ; J
.eh_frame:0000000000019940                 db  0Eh
.eh_frame:0000000000019941                 db  90h
.eh_frame:0000000000019942                 db    1
.eh_frame:0000000000019943                 db    3
.eh_frame:0000000000019944                 db  45h ; E
.eh_frame:0000000000019945                 db    1
.eh_frame:0000000000019946                 db  0Ah
.eh_frame:0000000000019947                 db  0Eh
.eh_frame:0000000000019948                 db  38h ; 8
.eh_frame:0000000000019949                 db  41h ; A
.eh_frame:000000000001994A                 db  0Eh
.eh_frame:000000000001994B                 db  30h ; 0
.eh_frame:000000000001994C                 db  41h ; A
.eh_frame:000000000001994D                 db  0Eh
.eh_frame:000000000001994E                 db  28h ; (
.eh_frame:000000000001994F                 db  42h ; B
.eh_frame:0000000000019950                 db  0Eh
.eh_frame:0000000000019951                 db  20h
.eh_frame:0000000000019952                 db  42h ; B
.eh_frame:0000000000019953                 db  0Eh
.eh_frame:0000000000019954                 db  18h
.eh_frame:0000000000019955                 db  42h ; B
.eh_frame:0000000000019956                 db  0Eh
.eh_frame:0000000000019957                 db  10h
.eh_frame:0000000000019958                 db  42h ; B
.eh_frame:0000000000019959                 db  0Eh
.eh_frame:000000000001995A                 db    8
.eh_frame:000000000001995B                 db  47h ; G
.eh_frame:000000000001995C                 db  0Bh
.eh_frame:000000000001995D                 db    0
.eh_frame:000000000001995E                 db    0
.eh_frame:000000000001995F                 db    0
.eh_frame:0000000000019960                 db  4Ch ; L
.eh_frame:0000000000019961                 db    0
.eh_frame:0000000000019962                 db    0
.eh_frame:0000000000019963                 db    0
.eh_frame:0000000000019964                 db  54h ; T
.eh_frame:0000000000019965                 db  20h
.eh_frame:0000000000019966                 db    0
.eh_frame:0000000000019967                 db    0
.eh_frame:0000000000019968                 db  38h ; 8
.eh_frame:0000000000019969                 db  9Eh
.eh_frame:000000000001996A                 db 0FFh
.eh_frame:000000000001996B                 db 0FFh
.eh_frame:000000000001996C                 db 0F5h
.eh_frame:000000000001996D                 db  10h
.eh_frame:000000000001996E                 db    0
.eh_frame:000000000001996F                 db    0
.eh_frame:0000000000019970                 db    0
.eh_frame:0000000000019971                 db  42h ; B
.eh_frame:0000000000019972                 db  0Eh
.eh_frame:0000000000019973                 db  10h
.eh_frame:0000000000019974                 db  8Fh
.eh_frame:0000000000019975                 db    2
.eh_frame:0000000000019976                 db  42h ; B
.eh_frame:0000000000019977                 db  0Eh
.eh_frame:0000000000019978                 db  18h
.eh_frame:0000000000019979                 db  8Eh
.eh_frame:000000000001997A                 db    3
.eh_frame:000000000001997B                 db  42h ; B
.eh_frame:000000000001997C                 db  0Eh
.eh_frame:000000000001997D                 db  20h
.eh_frame:000000000001997E                 db  8Dh
.eh_frame:000000000001997F                 db    4
.eh_frame:0000000000019980                 db  42h ; B
.eh_frame:0000000000019981                 db  0Eh
.eh_frame:0000000000019982                 db  28h ; (
.eh_frame:0000000000019983                 db  8Ch
.eh_frame:0000000000019984                 db    5
.eh_frame:0000000000019985                 db  41h ; A
.eh_frame:0000000000019986                 db  0Eh
.eh_frame:0000000000019987                 db  30h ; 0
.eh_frame:0000000000019988                 db  86h
.eh_frame:0000000000019989                 db    6
.eh_frame:000000000001998A                 db  41h ; A
.eh_frame:000000000001998B                 db  0Eh
.eh_frame:000000000001998C                 db  38h ; 8
.eh_frame:000000000001998D                 db  83h
.eh_frame:000000000001998E                 db    7
.eh_frame:000000000001998F                 db  47h ; G
.eh_frame:0000000000019990                 db  0Eh
.eh_frame:0000000000019991                 db 0E0h
.eh_frame:0000000000019992                 db    2
.eh_frame:0000000000019993                 db    3
.eh_frame:0000000000019994                 db 0A9h
.eh_frame:0000000000019995                 db    3
.eh_frame:0000000000019996                 db  0Ah
.eh_frame:0000000000019997                 db  0Eh
.eh_frame:0000000000019998                 db  38h ; 8
.eh_frame:0000000000019999                 db  41h ; A
.eh_frame:000000000001999A                 db  0Eh
.eh_frame:000000000001999B                 db  30h ; 0
.eh_frame:000000000001999C                 db  41h ; A
.eh_frame:000000000001999D                 db  0Eh
.eh_frame:000000000001999E                 db  28h ; (
.eh_frame:000000000001999F                 db  42h ; B
.eh_frame:00000000000199A0                 db  0Eh
.eh_frame:00000000000199A1                 db  20h
.eh_frame:00000000000199A2                 db  42h ; B
.eh_frame:00000000000199A3                 db  0Eh
.eh_frame:00000000000199A4                 db  18h
.eh_frame:00000000000199A5                 db  42h ; B
.eh_frame:00000000000199A6                 db  0Eh
.eh_frame:00000000000199A7                 db  10h
.eh_frame:00000000000199A8                 db  42h ; B
.eh_frame:00000000000199A9                 db  0Eh
.eh_frame:00000000000199AA                 db    8
.eh_frame:00000000000199AB                 db  41h ; A
.eh_frame:00000000000199AC                 db  0Bh
.eh_frame:00000000000199AD                 db    0
.eh_frame:00000000000199AE                 db    0
.eh_frame:00000000000199AF                 db    0
.eh_frame:00000000000199B0                 db  1Ch
.eh_frame:00000000000199B1                 db    0
.eh_frame:00000000000199B2                 db    0
.eh_frame:00000000000199B3                 db    0
.eh_frame:00000000000199B4                 db 0A4h
.eh_frame:00000000000199B5                 db  20h
.eh_frame:00000000000199B6                 db    0
.eh_frame:00000000000199B7                 db    0
.eh_frame:00000000000199B8                 db 0E8h
.eh_frame:00000000000199B9                 db 0AEh
.eh_frame:00000000000199BA                 db 0FFh
.eh_frame:00000000000199BB                 db 0FFh
.eh_frame:00000000000199BC                 db  6Fh ; o
.eh_frame:00000000000199BD                 db    0
.eh_frame:00000000000199BE                 db    0
.eh_frame:00000000000199BF                 db    0
.eh_frame:00000000000199C0                 db    0
.eh_frame:00000000000199C1                 db  44h ; D
.eh_frame:00000000000199C2                 db  0Eh
.eh_frame:00000000000199C3                 db  10h
.eh_frame:00000000000199C4                 db    2
.eh_frame:00000000000199C5                 db  59h ; Y
.eh_frame:00000000000199C6                 db  0Ah
.eh_frame:00000000000199C7                 db  0Eh
.eh_frame:00000000000199C8                 db    8
.eh_frame:00000000000199C9                 db  4Bh ; K
.eh_frame:00000000000199CA                 db  0Bh
.eh_frame:00000000000199CB                 db  46h ; F
.eh_frame:00000000000199CC                 db  0Eh
.eh_frame:00000000000199CD                 db    8
.eh_frame:00000000000199CE                 db    0
.eh_frame:00000000000199CF                 db    0
.eh_frame:00000000000199D0                 db  10h
.eh_frame:00000000000199D1                 db    0
.eh_frame:00000000000199D2                 db    0
.eh_frame:00000000000199D3                 db    0
.eh_frame:00000000000199D4                 db 0C4h
.eh_frame:00000000000199D5                 db  20h
.eh_frame:00000000000199D6                 db    0
.eh_frame:00000000000199D7                 db    0
.eh_frame:00000000000199D8                 db  38h ; 8
.eh_frame:00000000000199D9                 db 0AFh
.eh_frame:00000000000199DA                 db 0FFh
.eh_frame:00000000000199DB                 db 0FFh
.eh_frame:00000000000199DC                 db  0Fh
.eh_frame:00000000000199DD                 db    0
.eh_frame:00000000000199DE                 db    0
.eh_frame:00000000000199DF                 db    0
.eh_frame:00000000000199E0                 db    0
.eh_frame:00000000000199E1                 db    0
.eh_frame:00000000000199E2                 db    0
.eh_frame:00000000000199E3                 db    0
.eh_frame:00000000000199E4                 db  28h ; (
.eh_frame:00000000000199E5                 db    0
.eh_frame:00000000000199E6                 db    0
.eh_frame:00000000000199E7                 db    0
.eh_frame:00000000000199E8                 db 0D8h
.eh_frame:00000000000199E9                 db  20h
.eh_frame:00000000000199EA                 db    0
.eh_frame:00000000000199EB                 db    0
.eh_frame:00000000000199EC                 db  34h ; 4
.eh_frame:00000000000199ED                 db 0AFh
.eh_frame:00000000000199EE                 db 0FFh
.eh_frame:00000000000199EF                 db 0FFh
.eh_frame:00000000000199F0                 db 0C3h
.eh_frame:00000000000199F1                 db    0
.eh_frame:00000000000199F2                 db    0
.eh_frame:00000000000199F3                 db    0
.eh_frame:00000000000199F4                 db    0
.eh_frame:00000000000199F5                 db  42h ; B
.eh_frame:00000000000199F6                 db  0Eh
.eh_frame:00000000000199F7                 db  10h
.eh_frame:00000000000199F8                 db  8Ch
.eh_frame:00000000000199F9                 db    2
.eh_frame:00000000000199FA                 db  41h ; A
.eh_frame:00000000000199FB                 db  0Eh
.eh_frame:00000000000199FC                 db  18h
.eh_frame:00000000000199FD                 db  86h
.eh_frame:00000000000199FE                 db    3
.eh_frame:00000000000199FF                 db  43h ; C
.eh_frame:0000000000019A00                 db  0Eh
.eh_frame:0000000000019A01                 db  20h
.eh_frame:0000000000019A02                 db  83h
.eh_frame:0000000000019A03                 db    4
.eh_frame:0000000000019A04                 db    2
.eh_frame:0000000000019A05                 db 0B9h
.eh_frame:0000000000019A06                 db  0Eh
.eh_frame:0000000000019A07                 db  18h
.eh_frame:0000000000019A08                 db  41h ; A
.eh_frame:0000000000019A09                 db  0Eh
.eh_frame:0000000000019A0A                 db  10h
.eh_frame:0000000000019A0B                 db  42h ; B
.eh_frame:0000000000019A0C                 db  0Eh
.eh_frame:0000000000019A0D                 db    8
.eh_frame:0000000000019A0E                 db    0
.eh_frame:0000000000019A0F                 db    0
.eh_frame:0000000000019A10                 db  5Ch ; \
.eh_frame:0000000000019A11                 db    0
.eh_frame:0000000000019A12                 db    0
.eh_frame:0000000000019A13                 db    0
.eh_frame:0000000000019A14                 db    4
.eh_frame:0000000000019A15                 db  21h ; !
.eh_frame:0000000000019A16                 db    0
.eh_frame:0000000000019A17                 db    0
.eh_frame:0000000000019A18                 db 0D8h
.eh_frame:0000000000019A19                 db 0AFh
.eh_frame:0000000000019A1A                 db 0FFh
.eh_frame:0000000000019A1B                 db 0FFh
.eh_frame:0000000000019A1C                 db  7Fh ; 
.eh_frame:0000000000019A1D                 db    4
.eh_frame:0000000000019A1E                 db    0
.eh_frame:0000000000019A1F                 db    0
.eh_frame:0000000000019A20                 db    0
.eh_frame:0000000000019A21                 db  42h ; B
.eh_frame:0000000000019A22                 db  0Eh
.eh_frame:0000000000019A23                 db  10h
.eh_frame:0000000000019A24                 db  8Fh
.eh_frame:0000000000019A25                 db    2
.eh_frame:0000000000019A26                 db  42h ; B
.eh_frame:0000000000019A27                 db  0Eh
.eh_frame:0000000000019A28                 db  18h
.eh_frame:0000000000019A29                 db  8Eh
.eh_frame:0000000000019A2A                 db    3
.eh_frame:0000000000019A2B                 db  45h ; E
.eh_frame:0000000000019A2C                 db  0Eh
.eh_frame:0000000000019A2D                 db  20h
.eh_frame:0000000000019A2E                 db  8Dh
.eh_frame:0000000000019A2F                 db    4
.eh_frame:0000000000019A30                 db  42h ; B
.eh_frame:0000000000019A31                 db  0Eh
.eh_frame:0000000000019A32                 db  28h ; (
.eh_frame:0000000000019A33                 db  8Ch
.eh_frame:0000000000019A34                 db    5
.eh_frame:0000000000019A35                 db  44h ; D
.eh_frame:0000000000019A36                 db  0Eh
.eh_frame:0000000000019A37                 db  30h ; 0
.eh_frame:0000000000019A38                 db  86h
.eh_frame:0000000000019A39                 db    6
.eh_frame:0000000000019A3A                 db  41h ; A
.eh_frame:0000000000019A3B                 db  0Eh
.eh_frame:0000000000019A3C                 db  38h ; 8
.eh_frame:0000000000019A3D                 db  83h
.eh_frame:0000000000019A3E                 db    7
.eh_frame:0000000000019A3F                 db  44h ; D
.eh_frame:0000000000019A40                 db  0Eh
.eh_frame:0000000000019A41                 db  70h ; p
.eh_frame:0000000000019A42                 db    2
.eh_frame:0000000000019A43                 db 0D4h
.eh_frame:0000000000019A44                 db  0Eh
.eh_frame:0000000000019A45                 db  78h ; x
.eh_frame:0000000000019A46                 db  4Bh ; K
.eh_frame:0000000000019A47                 db  0Eh
.eh_frame:0000000000019A48                 db  80h
.eh_frame:0000000000019A49                 db    1
.eh_frame:0000000000019A4A                 db  41h ; A
.eh_frame:0000000000019A4B                 db  0Eh
.eh_frame:0000000000019A4C                 db  88h
.eh_frame:0000000000019A4D                 db    1
.eh_frame:0000000000019A4E                 db  42h ; B
.eh_frame:0000000000019A4F                 db  0Eh
.eh_frame:0000000000019A50                 db  90h
.eh_frame:0000000000019A51                 db    1
.eh_frame:0000000000019A52                 db  5Dh ; ]
.eh_frame:0000000000019A53                 db  0Eh
.eh_frame:0000000000019A54                 db  70h ; p
.eh_frame:0000000000019A55                 db  63h ; c
.eh_frame:0000000000019A56                 db  0Ah
.eh_frame:0000000000019A57                 db  0Eh
.eh_frame:0000000000019A58                 db  38h ; 8
.eh_frame:0000000000019A59                 db  44h ; D
.eh_frame:0000000000019A5A                 db  0Eh
.eh_frame:0000000000019A5B                 db  30h ; 0
.eh_frame:0000000000019A5C                 db  41h ; A
.eh_frame:0000000000019A5D                 db  0Eh
.eh_frame:0000000000019A5E                 db  28h ; (
.eh_frame:0000000000019A5F                 db  42h ; B
.eh_frame:0000000000019A60                 db  0Eh
.eh_frame:0000000000019A61                 db  20h
.eh_frame:0000000000019A62                 db  42h ; B
.eh_frame:0000000000019A63                 db  0Eh
.eh_frame:0000000000019A64                 db  18h
.eh_frame:0000000000019A65                 db  42h ; B
.eh_frame:0000000000019A66                 db  0Eh
.eh_frame:0000000000019A67                 db  10h
.eh_frame:0000000000019A68                 db  42h ; B
.eh_frame:0000000000019A69                 db  0Eh
.eh_frame:0000000000019A6A                 db    8
.eh_frame:0000000000019A6B                 db  45h ; E
.eh_frame:0000000000019A6C                 db  0Bh
.eh_frame:0000000000019A6D                 db    0
.eh_frame:0000000000019A6E                 db    0
.eh_frame:0000000000019A6F                 db    0
.eh_frame:0000000000019A70                 db  54h ; T
.eh_frame:0000000000019A71                 db    0
.eh_frame:0000000000019A72                 db    0
.eh_frame:0000000000019A73                 db    0
.eh_frame:0000000000019A74                 db  64h ; d
.eh_frame:0000000000019A75                 db  21h ; !
.eh_frame:0000000000019A76                 db    0
.eh_frame:0000000000019A77                 db    0
.eh_frame:0000000000019A78                 db 0F8h
.eh_frame:0000000000019A79                 db 0B3h
.eh_frame:0000000000019A7A                 db 0FFh
.eh_frame:0000000000019A7B                 db 0FFh
.eh_frame:0000000000019A7C                 db  1Bh
.eh_frame:0000000000019A7D                 db    1
.eh_frame:0000000000019A7E                 db    0
.eh_frame:0000000000019A7F                 db    0
.eh_frame:0000000000019A80                 db    0
.eh_frame:0000000000019A81                 db  42h ; B
.eh_frame:0000000000019A82                 db  0Eh
.eh_frame:0000000000019A83                 db  10h
.eh_frame:0000000000019A84                 db  8Fh
.eh_frame:0000000000019A85                 db    2
.eh_frame:0000000000019A86                 db  42h ; B
.eh_frame:0000000000019A87                 db  0Eh
.eh_frame:0000000000019A88                 db  18h
.eh_frame:0000000000019A89                 db  8Eh
.eh_frame:0000000000019A8A                 db    3
.eh_frame:0000000000019A8B                 db  42h ; B
.eh_frame:0000000000019A8C                 db  0Eh
.eh_frame:0000000000019A8D                 db  20h
.eh_frame:0000000000019A8E                 db  8Dh
.eh_frame:0000000000019A8F                 db    4
.eh_frame:0000000000019A90                 db  42h ; B
.eh_frame:0000000000019A91                 db  0Eh
.eh_frame:0000000000019A92                 db  28h ; (
.eh_frame:0000000000019A93                 db  8Ch
.eh_frame:0000000000019A94                 db    5
.eh_frame:0000000000019A95                 db  44h ; D
.eh_frame:0000000000019A96                 db  0Eh
.eh_frame:0000000000019A97                 db  30h ; 0
.eh_frame:0000000000019A98                 db  86h
.eh_frame:0000000000019A99                 db    6
.eh_frame:0000000000019A9A                 db  41h ; A
.eh_frame:0000000000019A9B                 db  0Eh
.eh_frame:0000000000019A9C                 db  38h ; 8
.eh_frame:0000000000019A9D                 db  83h
.eh_frame:0000000000019A9E                 db    7
.eh_frame:0000000000019A9F                 db  4Dh ; M
.eh_frame:0000000000019AA0                 db  0Eh
.eh_frame:0000000000019AA1                 db  60h ; `
.eh_frame:0000000000019AA2                 db    2
.eh_frame:0000000000019AA3                 db  5Ah ; Z
.eh_frame:0000000000019AA4                 db  0Eh
.eh_frame:0000000000019AA5                 db  68h ; h
.eh_frame:0000000000019AA6                 db  44h ; D
.eh_frame:0000000000019AA7                 db  0Eh
.eh_frame:0000000000019AA8                 db  70h ; p
.eh_frame:0000000000019AA9                 db  61h ; a
.eh_frame:0000000000019AAA                 db  0Eh
.eh_frame:0000000000019AAB                 db  68h ; h
.eh_frame:0000000000019AAC                 db  41h ; A
.eh_frame:0000000000019AAD                 db  0Eh
.eh_frame:0000000000019AAE                 db  60h ; `
.eh_frame:0000000000019AAF                 db  44h ; D
.eh_frame:0000000000019AB0                 db  0Ah
.eh_frame:0000000000019AB1                 db  0Eh
.eh_frame:0000000000019AB2                 db  38h ; 8
.eh_frame:0000000000019AB3                 db  44h ; D
.eh_frame:0000000000019AB4                 db  0Eh
.eh_frame:0000000000019AB5                 db  30h ; 0
.eh_frame:0000000000019AB6                 db  41h ; A
.eh_frame:0000000000019AB7                 db  0Eh
.eh_frame:0000000000019AB8                 db  28h ; (
.eh_frame:0000000000019AB9                 db  42h ; B
.eh_frame:0000000000019ABA                 db  0Eh
.eh_frame:0000000000019ABB                 db  20h
.eh_frame:0000000000019ABC                 db  42h ; B
.eh_frame:0000000000019ABD                 db  0Eh
.eh_frame:0000000000019ABE                 db  18h
.eh_frame:0000000000019ABF                 db  42h ; B
.eh_frame:0000000000019AC0                 db  0Eh
.eh_frame:0000000000019AC1                 db  10h
.eh_frame:0000000000019AC2                 db  42h ; B
.eh_frame:0000000000019AC3                 db  0Eh
.eh_frame:0000000000019AC4                 db    8
.eh_frame:0000000000019AC5                 db  45h ; E
.eh_frame:0000000000019AC6                 db  0Bh
.eh_frame:0000000000019AC7                 db    0
.eh_frame:0000000000019AC8                 db  48h ; H
.eh_frame:0000000000019AC9                 db    0
.eh_frame:0000000000019ACA                 db    0
.eh_frame:0000000000019ACB                 db    0
.eh_frame:0000000000019ACC                 db 0BCh
.eh_frame:0000000000019ACD                 db  21h ; !
.eh_frame:0000000000019ACE                 db    0
.eh_frame:0000000000019ACF                 db    0
.eh_frame:0000000000019AD0                 db 0C0h
.eh_frame:0000000000019AD1                 db 0B4h
.eh_frame:0000000000019AD2                 db 0FFh
.eh_frame:0000000000019AD3                 db 0FFh
.eh_frame:0000000000019AD4                 db  10h
.eh_frame:0000000000019AD5                 db    1
.eh_frame:0000000000019AD6                 db    0
.eh_frame:0000000000019AD7                 db    0
.eh_frame:0000000000019AD8                 db    0
.eh_frame:0000000000019AD9                 db  44h ; D
.eh_frame:0000000000019ADA                 db  0Eh
.eh_frame:0000000000019ADB                 db  10h
.eh_frame:0000000000019ADC                 db  8Eh
.eh_frame:0000000000019ADD                 db    2
.eh_frame:0000000000019ADE                 db  42h ; B
.eh_frame:0000000000019ADF                 db  0Eh
.eh_frame:0000000000019AE0                 db  18h
.eh_frame:0000000000019AE1                 db  8Dh
.eh_frame:0000000000019AE2                 db    3
.eh_frame:0000000000019AE3                 db  45h ; E
.eh_frame:0000000000019AE4                 db  0Eh
.eh_frame:0000000000019AE5                 db  20h
.eh_frame:0000000000019AE6                 db  8Ch
.eh_frame:0000000000019AE7                 db    4
.eh_frame:0000000000019AE8                 db  41h ; A
.eh_frame:0000000000019AE9                 db  0Eh
.eh_frame:0000000000019AEA                 db  28h ; (
.eh_frame:0000000000019AEB                 db  86h
.eh_frame:0000000000019AEC                 db    5
.eh_frame:0000000000019AED                 db  44h ; D
.eh_frame:0000000000019AEE                 db  0Eh
.eh_frame:0000000000019AEF                 db  30h ; 0
.eh_frame:0000000000019AF0                 db  83h
.eh_frame:0000000000019AF1                 db    6
.eh_frame:0000000000019AF2                 db    2
.eh_frame:0000000000019AF3                 db 0ADh
.eh_frame:0000000000019AF4                 db  0Ah
.eh_frame:0000000000019AF5                 db  0Eh
.eh_frame:0000000000019AF6                 db  28h ; (
.eh_frame:0000000000019AF7                 db  43h ; C
.eh_frame:0000000000019AF8                 db  0Eh
.eh_frame:0000000000019AF9                 db  20h
.eh_frame:0000000000019AFA                 db  42h ; B
.eh_frame:0000000000019AFB                 db  0Eh
.eh_frame:0000000000019AFC                 db  18h
.eh_frame:0000000000019AFD                 db  42h ; B
.eh_frame:0000000000019AFE                 db  0Eh
.eh_frame:0000000000019AFF                 db  10h
.eh_frame:0000000000019B00                 db  42h ; B
.eh_frame:0000000000019B01                 db  0Eh
.eh_frame:0000000000019B02                 db    8
.eh_frame:0000000000019B03                 db  4Ah ; J
.eh_frame:0000000000019B04                 db  0Bh
.eh_frame:0000000000019B05                 db  76h ; v
.eh_frame:0000000000019B06                 db  0Eh
.eh_frame:0000000000019B07                 db  28h ; (
.eh_frame:0000000000019B08                 db  43h ; C
.eh_frame:0000000000019B09                 db  0Eh
.eh_frame:0000000000019B0A                 db  20h
.eh_frame:0000000000019B0B                 db  42h ; B
.eh_frame:0000000000019B0C                 db  0Eh
.eh_frame:0000000000019B0D                 db  18h
.eh_frame:0000000000019B0E                 db  42h ; B
.eh_frame:0000000000019B0F                 db  0Eh
.eh_frame:0000000000019B10                 db  10h
.eh_frame:0000000000019B11                 db  42h ; B
.eh_frame:0000000000019B12                 db  0Eh
.eh_frame:0000000000019B13                 db    8
.eh_frame:0000000000019B14                 db  38h ; 8
.eh_frame:0000000000019B15                 db    0
.eh_frame:0000000000019B16                 db    0
.eh_frame:0000000000019B17                 db    0
.eh_frame:0000000000019B18                 db    8
.eh_frame:0000000000019B19                 db  22h ; "
.eh_frame:0000000000019B1A                 db    0
.eh_frame:0000000000019B1B                 db    0
.eh_frame:0000000000019B1C                 db  84h
.eh_frame:0000000000019B1D                 db 0B5h
.eh_frame:0000000000019B1E                 db 0FFh
.eh_frame:0000000000019B1F                 db 0FFh
.eh_frame:0000000000019B20                 db  85h
.eh_frame:0000000000019B21                 db    0
.eh_frame:0000000000019B22                 db    0
.eh_frame:0000000000019B23                 db    0
.eh_frame:0000000000019B24                 db    0
.eh_frame:0000000000019B25                 db  42h ; B
.eh_frame:0000000000019B26                 db  0Eh
.eh_frame:0000000000019B27                 db  10h
.eh_frame:0000000000019B28                 db  8Dh
.eh_frame:0000000000019B29                 db    2
.eh_frame:0000000000019B2A                 db  42h ; B
.eh_frame:0000000000019B2B                 db  0Eh
.eh_frame:0000000000019B2C                 db  18h
.eh_frame:0000000000019B2D                 db  8Ch
.eh_frame:0000000000019B2E                 db    3
.eh_frame:0000000000019B2F                 db  41h ; A
.eh_frame:0000000000019B30                 db  0Eh
.eh_frame:0000000000019B31                 db  20h
.eh_frame:0000000000019B32                 db  86h
.eh_frame:0000000000019B33                 db    4
.eh_frame:0000000000019B34                 db  41h ; A
.eh_frame:0000000000019B35                 db  0Eh
.eh_frame:0000000000019B36                 db  28h ; (
.eh_frame:0000000000019B37                 db  83h
.eh_frame:0000000000019B38                 db    5
.eh_frame:0000000000019B39                 db  44h ; D
.eh_frame:0000000000019B3A                 db  0Eh
.eh_frame:0000000000019B3B                 db  30h ; 0
.eh_frame:0000000000019B3C                 db    2
.eh_frame:0000000000019B3D                 db  57h ; W
.eh_frame:0000000000019B3E                 db  0Ah
.eh_frame:0000000000019B3F                 db  0Eh
.eh_frame:0000000000019B40                 db  28h ; (
.eh_frame:0000000000019B41                 db  44h ; D
.eh_frame:0000000000019B42                 db  0Eh
.eh_frame:0000000000019B43                 db  20h
.eh_frame:0000000000019B44                 db  41h ; A
.eh_frame:0000000000019B45                 db  0Eh
.eh_frame:0000000000019B46                 db  18h
.eh_frame:0000000000019B47                 db  42h ; B
.eh_frame:0000000000019B48                 db  0Eh
.eh_frame:0000000000019B49                 db  10h
.eh_frame:0000000000019B4A                 db  42h ; B
.eh_frame:0000000000019B4B                 db  0Eh
.eh_frame:0000000000019B4C                 db    8
.eh_frame:0000000000019B4D                 db  46h ; F
.eh_frame:0000000000019B4E                 db  0Bh
.eh_frame:0000000000019B4F                 db    0
.eh_frame:0000000000019B50                 db  18h
.eh_frame:0000000000019B51                 db    0
.eh_frame:0000000000019B52                 db    0
.eh_frame:0000000000019B53                 db    0
.eh_frame:0000000000019B54                 db  44h ; D
.eh_frame:0000000000019B55                 db  22h ; "
.eh_frame:0000000000019B56                 db    0
.eh_frame:0000000000019B57                 db    0
.eh_frame:0000000000019B58                 db 0D8h
.eh_frame:0000000000019B59                 db 0B5h
.eh_frame:0000000000019B5A                 db 0FFh
.eh_frame:0000000000019B5B                 db 0FFh
.eh_frame:0000000000019B5C                 db  44h ; D
.eh_frame:0000000000019B5D                 db    0
.eh_frame:0000000000019B5E                 db    0
.eh_frame:0000000000019B5F                 db    0
.eh_frame:0000000000019B60                 db    0
.eh_frame:0000000000019B61                 db  41h ; A
.eh_frame:0000000000019B62                 db  0Eh
.eh_frame:0000000000019B63                 db  10h
.eh_frame:0000000000019B64                 db  83h
.eh_frame:0000000000019B65                 db    2
.eh_frame:0000000000019B66                 db    2
.eh_frame:0000000000019B67                 db  42h ; B
.eh_frame:0000000000019B68                 db  0Eh
.eh_frame:0000000000019B69                 db    8
.eh_frame:0000000000019B6A                 db    0
.eh_frame:0000000000019B6B                 db    0
.eh_frame:0000000000019B6C                 db  58h ; X
.eh_frame:0000000000019B6D                 db    0
.eh_frame:0000000000019B6E                 db    0
.eh_frame:0000000000019B6F                 db    0
.eh_frame:0000000000019B70                 db  60h ; `
.eh_frame:0000000000019B71                 db  22h ; "
.eh_frame:0000000000019B72                 db    0
.eh_frame:0000000000019B73                 db    0
.eh_frame:0000000000019B74                 db  0Ch
.eh_frame:0000000000019B75                 db 0B6h
.eh_frame:0000000000019B76                 db 0FFh
.eh_frame:0000000000019B77                 db 0FFh
.eh_frame:0000000000019B78                 db  9Eh
.eh_frame:0000000000019B79                 db    0
.eh_frame:0000000000019B7A                 db    0
.eh_frame:0000000000019B7B                 db    0
.eh_frame:0000000000019B7C                 db    0
.eh_frame:0000000000019B7D                 db  4Fh ; O
.eh_frame:0000000000019B7E                 db  0Eh
.eh_frame:0000000000019B7F                 db  10h
.eh_frame:0000000000019B80                 db  8Dh
.eh_frame:0000000000019B81                 db    2
.eh_frame:0000000000019B82                 db  42h ; B
.eh_frame:0000000000019B83                 db  0Eh
.eh_frame:0000000000019B84                 db  18h
.eh_frame:0000000000019B85                 db  8Ch
.eh_frame:0000000000019B86                 db    3
.eh_frame:0000000000019B87                 db  44h ; D
.eh_frame:0000000000019B88                 db  0Eh
.eh_frame:0000000000019B89                 db  20h
.eh_frame:0000000000019B8A                 db  86h
.eh_frame:0000000000019B8B                 db    4
.eh_frame:0000000000019B8C                 db  41h ; A
.eh_frame:0000000000019B8D                 db  0Eh
.eh_frame:0000000000019B8E                 db  28h ; (
.eh_frame:0000000000019B8F                 db  83h
.eh_frame:0000000000019B90                 db    5
.eh_frame:0000000000019B91                 db  4Dh ; M
.eh_frame:0000000000019B92                 db  0Eh
.eh_frame:0000000000019B93                 db  40h ; @
.eh_frame:0000000000019B94                 db  67h ; g
.eh_frame:0000000000019B95                 db  0Eh
.eh_frame:0000000000019B96                 db  48h ; H
.eh_frame:0000000000019B97                 db  41h ; A
.eh_frame:0000000000019B98                 db  0Eh
.eh_frame:0000000000019B99                 db  50h ; P
.eh_frame:0000000000019B9A                 db  42h ; B
.eh_frame:0000000000019B9B                 db  0Eh
.eh_frame:0000000000019B9C                 db  58h ; X
.eh_frame:0000000000019B9D                 db  42h ; B
.eh_frame:0000000000019B9E                 db  0Eh
.eh_frame:0000000000019B9F                 db  60h ; `
.eh_frame:0000000000019BA0                 db  52h ; R
.eh_frame:0000000000019BA1                 db  0Eh
.eh_frame:0000000000019BA2                 db  40h ; @
.eh_frame:0000000000019BA3                 db  49h ; I
.eh_frame:0000000000019BA4                 db  0Ah
.eh_frame:0000000000019BA5                 db  0Eh
.eh_frame:0000000000019BA6                 db  28h ; (
.eh_frame:0000000000019BA7                 db  41h ; A
.eh_frame:0000000000019BA8                 db  0Eh
.eh_frame:0000000000019BA9                 db  20h
.eh_frame:0000000000019BAA                 db  44h ; D
.eh_frame:0000000000019BAB                 db  0Eh
.eh_frame:0000000000019BAC                 db  18h
.eh_frame:0000000000019BAD                 db  42h ; B
.eh_frame:0000000000019BAE                 db  0Eh
.eh_frame:0000000000019BAF                 db  10h
.eh_frame:0000000000019BB0                 db  42h ; B
.eh_frame:0000000000019BB1                 db  0Eh
.eh_frame:0000000000019BB2                 db    8
.eh_frame:0000000000019BB3                 db  45h ; E
.eh_frame:0000000000019BB4                 db  0Bh
.eh_frame:0000000000019BB5                 db  52h ; R
.eh_frame:0000000000019BB6                 db  0Eh
.eh_frame:0000000000019BB7                 db  48h ; H
.eh_frame:0000000000019BB8                 db  41h ; A
.eh_frame:0000000000019BB9                 db  0Eh
.eh_frame:0000000000019BBA                 db  50h ; P
.eh_frame:0000000000019BBB                 db  42h ; B
.eh_frame:0000000000019BBC                 db  0Eh
.eh_frame:0000000000019BBD                 db  58h ; X
.eh_frame:0000000000019BBE                 db  42h ; B
.eh_frame:0000000000019BBF                 db  0Eh
.eh_frame:0000000000019BC0                 db  60h ; `
.eh_frame:0000000000019BC1                 db  49h ; I
.eh_frame:0000000000019BC2                 db  0Eh
.eh_frame:0000000000019BC3                 db    8
.eh_frame:0000000000019BC4                 db 0C3h
.eh_frame:0000000000019BC5                 db 0C6h
.eh_frame:0000000000019BC6                 db 0CCh
.eh_frame:0000000000019BC7                 db 0CDh
.eh_frame:0000000000019BC8                 db  1Ch
.eh_frame:0000000000019BC9                 db    0
.eh_frame:0000000000019BCA                 db    0
.eh_frame:0000000000019BCB                 db    0
.eh_frame:0000000000019BCC                 db 0BCh
.eh_frame:0000000000019BCD                 db  22h ; "
.eh_frame:0000000000019BCE                 db    0
.eh_frame:0000000000019BCF                 db    0
.eh_frame:0000000000019BD0                 db  50h ; P
.eh_frame:0000000000019BD1                 db 0B6h
.eh_frame:0000000000019BD2                 db 0FFh
.eh_frame:0000000000019BD3                 db 0FFh
.eh_frame:0000000000019BD4                 db  18h
.eh_frame:0000000000019BD5                 db    0
.eh_frame:0000000000019BD6                 db    0
.eh_frame:0000000000019BD7                 db    0
.eh_frame:0000000000019BD8                 db    0
.eh_frame:0000000000019BD9                 db  44h ; D
.eh_frame:0000000000019BDA                 db  0Eh
.eh_frame:0000000000019BDB                 db  10h
.eh_frame:0000000000019BDC                 db  45h ; E
.eh_frame:0000000000019BDD                 db  0Eh
.eh_frame:0000000000019BDE                 db  18h
.eh_frame:0000000000019BDF                 db  42h ; B
.eh_frame:0000000000019BE0                 db  0Eh
.eh_frame:0000000000019BE1                 db  20h
.eh_frame:0000000000019BE2                 db  4Ch ; L
.eh_frame:0000000000019BE3                 db  0Eh
.eh_frame:0000000000019BE4                 db    8
.eh_frame:0000000000019BE5                 db    0
.eh_frame:0000000000019BE6                 db    0
.eh_frame:0000000000019BE7                 db    0
.eh_frame:0000000000019BE8                 db  1Ch
.eh_frame:0000000000019BE9                 db    0
.eh_frame:0000000000019BEA                 db    0
.eh_frame:0000000000019BEB                 db    0
.eh_frame:0000000000019BEC                 db 0DCh
.eh_frame:0000000000019BED                 db  22h ; "
.eh_frame:0000000000019BEE                 db    0
.eh_frame:0000000000019BEF                 db    0
.eh_frame:0000000000019BF0                 db  50h ; P
.eh_frame:0000000000019BF1                 db 0B6h
.eh_frame:0000000000019BF2                 db 0FFh
.eh_frame:0000000000019BF3                 db 0FFh
.eh_frame:0000000000019BF4                 db  15h
.eh_frame:0000000000019BF5                 db    0
.eh_frame:0000000000019BF6                 db    0
.eh_frame:0000000000019BF7                 db    0
.eh_frame:0000000000019BF8                 db    0
.eh_frame:0000000000019BF9                 db  44h ; D
.eh_frame:0000000000019BFA                 db  0Eh
.eh_frame:0000000000019BFB                 db  10h
.eh_frame:0000000000019BFC                 db  42h ; B
.eh_frame:0000000000019BFD                 db  0Eh
.eh_frame:0000000000019BFE                 db  18h
.eh_frame:0000000000019BFF                 db  42h ; B
.eh_frame:0000000000019C00                 db  0Eh
.eh_frame:0000000000019C01                 db  20h
.eh_frame:0000000000019C02                 db  4Ch ; L
.eh_frame:0000000000019C03                 db  0Eh
.eh_frame:0000000000019C04                 db    8
.eh_frame:0000000000019C05                 db    0
.eh_frame:0000000000019C06                 db    0
.eh_frame:0000000000019C07                 db    0
.eh_frame:0000000000019C08                 db  20h
.eh_frame:0000000000019C09                 db    0
.eh_frame:0000000000019C0A                 db    0
.eh_frame:0000000000019C0B                 db    0
.eh_frame:0000000000019C0C                 db 0FCh
.eh_frame:0000000000019C0D                 db  22h ; "
.eh_frame:0000000000019C0E                 db    0
.eh_frame:0000000000019C0F                 db    0
.eh_frame:0000000000019C10                 db  50h ; P
.eh_frame:0000000000019C11                 db 0B6h
.eh_frame:0000000000019C12                 db 0FFh
.eh_frame:0000000000019C13                 db 0FFh
.eh_frame:0000000000019C14                 db  1Ah
.eh_frame:0000000000019C15                 db    0
.eh_frame:0000000000019C16                 db    0
.eh_frame:0000000000019C17                 db    0
.eh_frame:0000000000019C18                 db    0
.eh_frame:0000000000019C19                 db  44h ; D
.eh_frame:0000000000019C1A                 db  0Eh
.eh_frame:0000000000019C1B                 db  10h
.eh_frame:0000000000019C1C                 db  42h ; B
.eh_frame:0000000000019C1D                 db  0Eh
.eh_frame:0000000000019C1E                 db  18h
.eh_frame:0000000000019C1F                 db  44h ; D
.eh_frame:0000000000019C20                 db  0Eh
.eh_frame:0000000000019C21                 db  20h
.eh_frame:0000000000019C22                 db  44h ; D
.eh_frame:0000000000019C23                 db  0Eh
.eh_frame:0000000000019C24                 db  28h ; (
.eh_frame:0000000000019C25                 db  42h ; B
.eh_frame:0000000000019C26                 db  0Eh
.eh_frame:0000000000019C27                 db  30h ; 0
.eh_frame:0000000000019C28                 db  49h ; I
.eh_frame:0000000000019C29                 db  0Eh
.eh_frame:0000000000019C2A                 db    8
.eh_frame:0000000000019C2B                 db    0
.eh_frame:0000000000019C2C                 db  20h
.eh_frame:0000000000019C2D                 db    0
.eh_frame:0000000000019C2E                 db    0
.eh_frame:0000000000019C2F                 db    0
.eh_frame:0000000000019C30                 db  20h
.eh_frame:0000000000019C31                 db  23h ; #
.eh_frame:0000000000019C32                 db    0
.eh_frame:0000000000019C33                 db    0
.eh_frame:0000000000019C34                 db  4Ch ; L
.eh_frame:0000000000019C35                 db 0B6h
.eh_frame:0000000000019C36                 db 0FFh
.eh_frame:0000000000019C37                 db 0FFh
.eh_frame:0000000000019C38                 db  1Ch
.eh_frame:0000000000019C39                 db    0
.eh_frame:0000000000019C3A                 db    0
.eh_frame:0000000000019C3B                 db    0
.eh_frame:0000000000019C3C                 db    0
.eh_frame:0000000000019C3D                 db  44h ; D
.eh_frame:0000000000019C3E                 db  0Eh
.eh_frame:0000000000019C3F                 db  10h
.eh_frame:0000000000019C40                 db  42h ; B
.eh_frame:0000000000019C41                 db  0Eh
.eh_frame:0000000000019C42                 db  18h
.eh_frame:0000000000019C43                 db  44h ; D
.eh_frame:0000000000019C44                 db  0Eh
.eh_frame:0000000000019C45                 db  20h
.eh_frame:0000000000019C46                 db  44h ; D
.eh_frame:0000000000019C47                 db  0Eh
.eh_frame:0000000000019C48                 db  28h ; (
.eh_frame:0000000000019C49                 db  44h ; D
.eh_frame:0000000000019C4A                 db  0Eh
.eh_frame:0000000000019C4B                 db  30h ; 0
.eh_frame:0000000000019C4C                 db  49h ; I
.eh_frame:0000000000019C4D                 db  0Eh
.eh_frame:0000000000019C4E                 db    8
.eh_frame:0000000000019C4F                 db    0
.eh_frame:0000000000019C50                 db  14h
.eh_frame:0000000000019C51                 db    0
.eh_frame:0000000000019C52                 db    0
.eh_frame:0000000000019C53                 db    0
.eh_frame:0000000000019C54                 db  44h ; D
.eh_frame:0000000000019C55                 db  23h ; #
.eh_frame:0000000000019C56                 db    0
.eh_frame:0000000000019C57                 db    0
.eh_frame:0000000000019C58                 db  48h ; H
.eh_frame:0000000000019C59                 db 0B6h
.eh_frame:0000000000019C5A                 db 0FFh
.eh_frame:0000000000019C5B                 db 0FFh
.eh_frame:0000000000019C5C                 db  41h ; A
.eh_frame:0000000000019C5D                 db    0
.eh_frame:0000000000019C5E                 db    0
.eh_frame:0000000000019C5F                 db    0
.eh_frame:0000000000019C60                 db    0
.eh_frame:0000000000019C61                 db    0
.eh_frame:0000000000019C62                 db    0
.eh_frame:0000000000019C63                 db    0
.eh_frame:0000000000019C64                 db    0
.eh_frame:0000000000019C65                 db    0
.eh_frame:0000000000019C66                 db    0
.eh_frame:0000000000019C67                 db    0
.eh_frame:0000000000019C68                 db  4Ch ; L
.eh_frame:0000000000019C69                 db    0
.eh_frame:0000000000019C6A                 db    0
.eh_frame:0000000000019C6B                 db    0
.eh_frame:0000000000019C6C                 db  5Ch ; \
.eh_frame:0000000000019C6D                 db  23h ; #
.eh_frame:0000000000019C6E                 db    0
.eh_frame:0000000000019C6F                 db    0
.eh_frame:0000000000019C70                 db  80h
.eh_frame:0000000000019C71                 db 0B6h
.eh_frame:0000000000019C72                 db 0FFh
.eh_frame:0000000000019C73                 db 0FFh
.eh_frame:0000000000019C74                 db  7Dh ; }
.eh_frame:0000000000019C75                 db    0
.eh_frame:0000000000019C76                 db    0
.eh_frame:0000000000019C77                 db    0
.eh_frame:0000000000019C78                 db    0
.eh_frame:0000000000019C79                 db  42h ; B
.eh_frame:0000000000019C7A                 db  0Eh
.eh_frame:0000000000019C7B                 db  10h
.eh_frame:0000000000019C7C                 db  8Ch
.eh_frame:0000000000019C7D                 db    2
.eh_frame:0000000000019C7E                 db  41h ; A
.eh_frame:0000000000019C7F                 db  0Eh
.eh_frame:0000000000019C80                 db  18h
.eh_frame:0000000000019C81                 db  86h
.eh_frame:0000000000019C82                 db    3
.eh_frame:0000000000019C83                 db  44h ; D
.eh_frame:0000000000019C84                 db  0Eh
.eh_frame:0000000000019C85                 db  20h
.eh_frame:0000000000019C86                 db  83h
.eh_frame:0000000000019C87                 db    4
.eh_frame:0000000000019C88                 db  69h ; i
.eh_frame:0000000000019C89                 db  0Ah
.eh_frame:0000000000019C8A                 db  0Eh
.eh_frame:0000000000019C8B                 db  18h
.eh_frame:0000000000019C8C                 db  41h ; A
.eh_frame:0000000000019C8D                 db  0Eh
.eh_frame:0000000000019C8E                 db  10h
.eh_frame:0000000000019C8F                 db  42h ; B
.eh_frame:0000000000019C90                 db  0Eh
.eh_frame:0000000000019C91                 db    8
.eh_frame:0000000000019C92                 db  45h ; E
.eh_frame:0000000000019C93                 db  0Bh
.eh_frame:0000000000019C94                 db  55h ; U
.eh_frame:0000000000019C95                 db  0Ah
.eh_frame:0000000000019C96                 db  0Eh
.eh_frame:0000000000019C97                 db  18h
.eh_frame:0000000000019C98                 db  41h ; A
.eh_frame:0000000000019C99                 db  0Eh
.eh_frame:0000000000019C9A                 db  10h
.eh_frame:0000000000019C9B                 db  42h ; B
.eh_frame:0000000000019C9C                 db  0Eh
.eh_frame:0000000000019C9D                 db    8
.eh_frame:0000000000019C9E                 db  48h ; H
.eh_frame:0000000000019C9F                 db  0Bh
.eh_frame:0000000000019CA0                 db  41h ; A
.eh_frame:0000000000019CA1                 db  0Ah
.eh_frame:0000000000019CA2                 db  0Eh
.eh_frame:0000000000019CA3                 db  18h
.eh_frame:0000000000019CA4                 db  46h ; F
.eh_frame:0000000000019CA5                 db  0Eh
.eh_frame:0000000000019CA6                 db  10h
.eh_frame:0000000000019CA7                 db  42h ; B
.eh_frame:0000000000019CA8                 db  0Eh
.eh_frame:0000000000019CA9                 db    8
.eh_frame:0000000000019CAA                 db  47h ; G
.eh_frame:0000000000019CAB                 db  0Bh
.eh_frame:0000000000019CAC                 db  49h ; I
.eh_frame:0000000000019CAD                 db  0Eh
.eh_frame:0000000000019CAE                 db  18h
.eh_frame:0000000000019CAF                 db  41h ; A
.eh_frame:0000000000019CB0                 db  0Eh
.eh_frame:0000000000019CB1                 db  10h
.eh_frame:0000000000019CB2                 db  42h ; B
.eh_frame:0000000000019CB3                 db  0Eh
.eh_frame:0000000000019CB4                 db    8
.eh_frame:0000000000019CB5                 db    0
.eh_frame:0000000000019CB6                 db    0
.eh_frame:0000000000019CB7                 db    0
.eh_frame:0000000000019CB8                 db  1Ch
.eh_frame:0000000000019CB9                 db    0
.eh_frame:0000000000019CBA                 db    0
.eh_frame:0000000000019CBB                 db    0
.eh_frame:0000000000019CBC                 db 0ACh
.eh_frame:0000000000019CBD                 db  23h ; #
.eh_frame:0000000000019CBE                 db    0
.eh_frame:0000000000019CBF                 db    0
.eh_frame:0000000000019CC0                 db 0B0h
.eh_frame:0000000000019CC1                 db 0B6h
.eh_frame:0000000000019CC2                 db 0FFh
.eh_frame:0000000000019CC3                 db 0FFh
.eh_frame:0000000000019CC4                 db  60h ; `
.eh_frame:0000000000019CC5                 db    0
.eh_frame:0000000000019CC6                 db    0
.eh_frame:0000000000019CC7                 db    0
.eh_frame:0000000000019CC8                 db    0
.eh_frame:0000000000019CC9                 db  44h ; D
.eh_frame:0000000000019CCA                 db  0Eh
.eh_frame:0000000000019CCB                 db  10h
.eh_frame:0000000000019CCC                 db  75h ; u
.eh_frame:0000000000019CCD                 db  0Ah
.eh_frame:0000000000019CCE                 db  0Eh
.eh_frame:0000000000019CCF                 db    8
.eh_frame:0000000000019CD0                 db  47h ; G
.eh_frame:0000000000019CD1                 db  0Bh
.eh_frame:0000000000019CD2                 db  5Fh ; _
.eh_frame:0000000000019CD3                 db  0Eh
.eh_frame:0000000000019CD4                 db    8
.eh_frame:0000000000019CD5                 db    0
.eh_frame:0000000000019CD6                 db    0
.eh_frame:0000000000019CD7                 db    0
.eh_frame:0000000000019CD8                 db  1Ch
.eh_frame:0000000000019CD9                 db    0
.eh_frame:0000000000019CDA                 db    0
.eh_frame:0000000000019CDB                 db    0
.eh_frame:0000000000019CDC                 db 0CCh
.eh_frame:0000000000019CDD                 db  23h ; #
.eh_frame:0000000000019CDE                 db    0
.eh_frame:0000000000019CDF                 db    0
.eh_frame:0000000000019CE0                 db 0F0h
.eh_frame:0000000000019CE1                 db 0B6h
.eh_frame:0000000000019CE2                 db 0FFh
.eh_frame:0000000000019CE3                 db 0FFh
.eh_frame:0000000000019CE4                 db  3Ch ; <
.eh_frame:0000000000019CE5                 db    0
.eh_frame:0000000000019CE6                 db    0
.eh_frame:0000000000019CE7                 db    0
.eh_frame:0000000000019CE8                 db    0
.eh_frame:0000000000019CE9                 db  44h ; D
.eh_frame:0000000000019CEA                 db  0Eh
.eh_frame:0000000000019CEB                 db  10h
.eh_frame:0000000000019CEC                 db  61h ; a
.eh_frame:0000000000019CED                 db  0Ah
.eh_frame:0000000000019CEE                 db  0Eh
.eh_frame:0000000000019CEF                 db    8
.eh_frame:0000000000019CF0                 db  4Bh ; K
.eh_frame:0000000000019CF1                 db  0Bh
.eh_frame:0000000000019CF2                 db  4Bh ; K
.eh_frame:0000000000019CF3                 db  0Eh
.eh_frame:0000000000019CF4                 db    8
.eh_frame:0000000000019CF5                 db    0
.eh_frame:0000000000019CF6                 db    0
.eh_frame:0000000000019CF7                 db    0
.eh_frame:0000000000019CF8                 db  34h ; 4
.eh_frame:0000000000019CF9                 db    0
.eh_frame:0000000000019CFA                 db    0
.eh_frame:0000000000019CFB                 db    0
.eh_frame:0000000000019CFC                 db 0ECh
.eh_frame:0000000000019CFD                 db  23h ; #
.eh_frame:0000000000019CFE                 db    0
.eh_frame:0000000000019CFF                 db    0
.eh_frame:0000000000019D00                 db  10h
.eh_frame:0000000000019D01                 db 0B7h
.eh_frame:0000000000019D02                 db 0FFh
.eh_frame:0000000000019D03                 db 0FFh
.eh_frame:0000000000019D04                 db  7Bh ; {
.eh_frame:0000000000019D05                 db    0
.eh_frame:0000000000019D06                 db    0
.eh_frame:0000000000019D07                 db    0
.eh_frame:0000000000019D08                 db    0
.eh_frame:0000000000019D09                 db  42h ; B
.eh_frame:0000000000019D0A                 db  0Eh
.eh_frame:0000000000019D0B                 db  10h
.eh_frame:0000000000019D0C                 db  8Ch
.eh_frame:0000000000019D0D                 db    2
.eh_frame:0000000000019D0E                 db  41h ; A
.eh_frame:0000000000019D0F                 db  0Eh
.eh_frame:0000000000019D10                 db  18h
.eh_frame:0000000000019D11                 db  86h
.eh_frame:0000000000019D12                 db    3
.eh_frame:0000000000019D13                 db  41h ; A
.eh_frame:0000000000019D14                 db  0Eh
.eh_frame:0000000000019D15                 db  20h
.eh_frame:0000000000019D16                 db  83h
.eh_frame:0000000000019D17                 db    4
.eh_frame:0000000000019D18                 db  7Dh ; }
.eh_frame:0000000000019D19                 db  0Ah
.eh_frame:0000000000019D1A                 db  0Eh
.eh_frame:0000000000019D1B                 db  18h
.eh_frame:0000000000019D1C                 db  41h ; A
.eh_frame:0000000000019D1D                 db  0Eh
.eh_frame:0000000000019D1E                 db  10h
.eh_frame:0000000000019D1F                 db  42h ; B
.eh_frame:0000000000019D20                 db  0Eh
.eh_frame:0000000000019D21                 db    8
.eh_frame:0000000000019D22                 db  44h ; D
.eh_frame:0000000000019D23                 db  0Bh
.eh_frame:0000000000019D24                 db  60h ; `
.eh_frame:0000000000019D25                 db  0Ah
.eh_frame:0000000000019D26                 db  0Eh
.eh_frame:0000000000019D27                 db  18h
.eh_frame:0000000000019D28                 db  41h ; A
.eh_frame:0000000000019D29                 db  0Eh
.eh_frame:0000000000019D2A                 db  10h
.eh_frame:0000000000019D2B                 db  42h ; B
.eh_frame:0000000000019D2C                 db  0Eh
.eh_frame:0000000000019D2D                 db    8
.eh_frame:0000000000019D2E                 db  45h ; E
.eh_frame:0000000000019D2F                 db  0Bh
.eh_frame:0000000000019D30                 db  1Ch
.eh_frame:0000000000019D31                 db    0
.eh_frame:0000000000019D32                 db    0
.eh_frame:0000000000019D33                 db    0
.eh_frame:0000000000019D34                 db  24h ; $
.eh_frame:0000000000019D35                 db  24h ; $
.eh_frame:0000000000019D36                 db    0
.eh_frame:0000000000019D37                 db    0
.eh_frame:0000000000019D38                 db  58h ; X
.eh_frame:0000000000019D39                 db 0B7h
.eh_frame:0000000000019D3A                 db 0FFh
.eh_frame:0000000000019D3B                 db 0FFh
.eh_frame:0000000000019D3C                 db  40h ; @
.eh_frame:0000000000019D3D                 db    0
.eh_frame:0000000000019D3E                 db    0
.eh_frame:0000000000019D3F                 db    0
.eh_frame:0000000000019D40                 db    0
.eh_frame:0000000000019D41                 db  44h ; D
.eh_frame:0000000000019D42                 db  0Eh
.eh_frame:0000000000019D43                 db  10h
.eh_frame:0000000000019D44                 db  83h
.eh_frame:0000000000019D45                 db    2
.eh_frame:0000000000019D46                 db  5Ah ; Z
.eh_frame:0000000000019D47                 db  0Ah
.eh_frame:0000000000019D48                 db  0Eh
.eh_frame:0000000000019D49                 db    8
.eh_frame:0000000000019D4A                 db  4Ah ; J
.eh_frame:0000000000019D4B                 db  0Bh
.eh_frame:0000000000019D4C                 db  53h ; S
.eh_frame:0000000000019D4D                 db  0Eh
.eh_frame:0000000000019D4E                 db    8
.eh_frame:0000000000019D4F                 db    0
.eh_frame:0000000000019D50                 db  2Ch ; ,
.eh_frame:0000000000019D51                 db    0
.eh_frame:0000000000019D52                 db    0
.eh_frame:0000000000019D53                 db    0
.eh_frame:0000000000019D54                 db  44h ; D
.eh_frame:0000000000019D55                 db  24h ; $
.eh_frame:0000000000019D56                 db    0
.eh_frame:0000000000019D57                 db    0
.eh_frame:0000000000019D58                 db  78h ; x
.eh_frame:0000000000019D59                 db 0B7h
.eh_frame:0000000000019D5A                 db 0FFh
.eh_frame:0000000000019D5B                 db 0FFh
.eh_frame:0000000000019D5C                 db  57h ; W
.eh_frame:0000000000019D5D                 db    0
.eh_frame:0000000000019D5E                 db    0
.eh_frame:0000000000019D5F                 db    0
.eh_frame:0000000000019D60                 db    0
.eh_frame:0000000000019D61                 db  63h ; c
.eh_frame:0000000000019D62                 db  0Eh
.eh_frame:0000000000019D63                 db  10h
.eh_frame:0000000000019D64                 db  8Ch
.eh_frame:0000000000019D65                 db    2
.eh_frame:0000000000019D66                 db  41h ; A
.eh_frame:0000000000019D67                 db  0Eh
.eh_frame:0000000000019D68                 db  18h
.eh_frame:0000000000019D69                 db  86h
.eh_frame:0000000000019D6A                 db    3
.eh_frame:0000000000019D6B                 db  44h ; D
.eh_frame:0000000000019D6C                 db  0Eh
.eh_frame:0000000000019D6D                 db  20h
.eh_frame:0000000000019D6E                 db  83h
.eh_frame:0000000000019D6F                 db    4
.eh_frame:0000000000019D70                 db  6Bh ; k
.eh_frame:0000000000019D71                 db  0Eh
.eh_frame:0000000000019D72                 db  18h
.eh_frame:0000000000019D73                 db  41h ; A
.eh_frame:0000000000019D74                 db  0Eh
.eh_frame:0000000000019D75                 db  10h
.eh_frame:0000000000019D76                 db  42h ; B
.eh_frame:0000000000019D77                 db  0Eh
.eh_frame:0000000000019D78                 db    8
.eh_frame:0000000000019D79                 db    0
.eh_frame:0000000000019D7A                 db    0
.eh_frame:0000000000019D7B                 db    0
.eh_frame:0000000000019D7C                 db    0
.eh_frame:0000000000019D7D                 db    0
.eh_frame:0000000000019D7E                 db    0
.eh_frame:0000000000019D7F                 db    0
.eh_frame:0000000000019D80                 db  44h ; D
.eh_frame:0000000000019D81                 db    0
.eh_frame:0000000000019D82                 db    0
.eh_frame:0000000000019D83                 db    0
.eh_frame:0000000000019D84                 db  74h ; t
.eh_frame:0000000000019D85                 db  24h ; $
.eh_frame:0000000000019D86                 db    0
.eh_frame:0000000000019D87                 db    0
.eh_frame:0000000000019D88                 db 0A8h
.eh_frame:0000000000019D89                 db 0B7h
.eh_frame:0000000000019D8A                 db 0FFh
.eh_frame:0000000000019D8B                 db 0FFh
.eh_frame:0000000000019D8C                 db  65h ; e
.eh_frame:0000000000019D8D                 db    0
.eh_frame:0000000000019D8E                 db    0
.eh_frame:0000000000019D8F                 db    0
.eh_frame:0000000000019D90                 db    0
.eh_frame:0000000000019D91                 db  42h ; B
.eh_frame:0000000000019D92                 db  0Eh
.eh_frame:0000000000019D93                 db  10h
.eh_frame:0000000000019D94                 db  8Fh
.eh_frame:0000000000019D95                 db    2
.eh_frame:0000000000019D96                 db  42h ; B
.eh_frame:0000000000019D97                 db  0Eh
.eh_frame:0000000000019D98                 db  18h
.eh_frame:0000000000019D99                 db  8Eh
.eh_frame:0000000000019D9A                 db    3
.eh_frame:0000000000019D9B                 db  45h ; E
.eh_frame:0000000000019D9C                 db  0Eh
.eh_frame:0000000000019D9D                 db  20h
.eh_frame:0000000000019D9E                 db  8Dh
.eh_frame:0000000000019D9F                 db    4
.eh_frame:0000000000019DA0                 db  42h ; B
.eh_frame:0000000000019DA1                 db  0Eh
.eh_frame:0000000000019DA2                 db  28h ; (
.eh_frame:0000000000019DA3                 db  8Ch
.eh_frame:0000000000019DA4                 db    5
.eh_frame:0000000000019DA5                 db  48h ; H
.eh_frame:0000000000019DA6                 db  0Eh
.eh_frame:0000000000019DA7                 db  30h ; 0
.eh_frame:0000000000019DA8                 db  86h
.eh_frame:0000000000019DA9                 db    6
.eh_frame:0000000000019DAA                 db  48h ; H
.eh_frame:0000000000019DAB                 db  0Eh
.eh_frame:0000000000019DAC                 db  38h ; 8
.eh_frame:0000000000019DAD                 db  83h
.eh_frame:0000000000019DAE                 db    7
.eh_frame:0000000000019DAF                 db  4Dh ; M
.eh_frame:0000000000019DB0                 db  0Eh
.eh_frame:0000000000019DB1                 db  40h ; @
.eh_frame:0000000000019DB2                 db  72h ; r
.eh_frame:0000000000019DB3                 db  0Eh
.eh_frame:0000000000019DB4                 db  38h ; 8
.eh_frame:0000000000019DB5                 db  41h ; A
.eh_frame:0000000000019DB6                 db  0Eh
.eh_frame:0000000000019DB7                 db  30h ; 0
.eh_frame:0000000000019DB8                 db  41h ; A
.eh_frame:0000000000019DB9                 db  0Eh
.eh_frame:0000000000019DBA                 db  28h ; (
.eh_frame:0000000000019DBB                 db  42h ; B
.eh_frame:0000000000019DBC                 db  0Eh
.eh_frame:0000000000019DBD                 db  20h
.eh_frame:0000000000019DBE                 db  42h ; B
.eh_frame:0000000000019DBF                 db  0Eh
.eh_frame:0000000000019DC0                 db  18h
.eh_frame:0000000000019DC1                 db  42h ; B
.eh_frame:0000000000019DC2                 db  0Eh
.eh_frame:0000000000019DC3                 db  10h
.eh_frame:0000000000019DC4                 db  42h ; B
.eh_frame:0000000000019DC5                 db  0Eh
.eh_frame:0000000000019DC6                 db    8
.eh_frame:0000000000019DC7                 db    0
.eh_frame:0000000000019DC8                 db  14h
.eh_frame:0000000000019DC9                 db    0
.eh_frame:0000000000019DCA                 db    0
.eh_frame:0000000000019DCB                 db    0
.eh_frame:0000000000019DCC                 db 0BCh
.eh_frame:0000000000019DCD                 db  24h ; $
.eh_frame:0000000000019DCE                 db    0
.eh_frame:0000000000019DCF                 db    0
.eh_frame:0000000000019DD0                 db 0D0h
.eh_frame:0000000000019DD1                 db 0B7h
.eh_frame:0000000000019DD2                 db 0FFh
.eh_frame:0000000000019DD3                 db 0FFh
.eh_frame:0000000000019DD4                 db    2
.eh_frame:0000000000019DD5                 db    0
.eh_frame:0000000000019DD6                 db    0
.eh_frame:0000000000019DD7                 db    0
.eh_frame:0000000000019DD8                 db    0
.eh_frame:0000000000019DD9                 db    0
.eh_frame:0000000000019DDA                 db    0
.eh_frame:0000000000019DDB                 db    0
.eh_frame:0000000000019DDC                 db    0
.eh_frame:0000000000019DDD                 db    0
.eh_frame:0000000000019DDE                 db    0
.eh_frame:0000000000019DDF                 db    0
.eh_frame:0000000000019DE0                 db  10h
.eh_frame:0000000000019DE1                 db    0
.eh_frame:0000000000019DE2                 db    0
.eh_frame:0000000000019DE3                 db    0
.eh_frame:0000000000019DE4                 db 0D4h
.eh_frame:0000000000019DE5                 db  24h ; $
.eh_frame:0000000000019DE6                 db    0
.eh_frame:0000000000019DE7                 db    0
.eh_frame:0000000000019DE8                 db 0C8h
.eh_frame:0000000000019DE9                 db 0B7h
.eh_frame:0000000000019DEA                 db 0FFh
.eh_frame:0000000000019DEB                 db 0FFh
.eh_frame:0000000000019DEC                 db  0Eh
.eh_frame:0000000000019DED                 db    0
.eh_frame:0000000000019DEE                 db    0
.eh_frame:0000000000019DEF                 db    0
.eh_frame:0000000000019DF0                 db    0
.eh_frame:0000000000019DF1                 db    0
.eh_frame:0000000000019DF2                 db    0
.eh_frame:0000000000019DF3                 db    0
.eh_frame:0000000000019DF4 __FRAME_END__   db    0
.eh_frame:0000000000019DF5                 db    0
.eh_frame:0000000000019DF6                 db    0
.eh_frame:0000000000019DF7                 db    0
.eh_frame:0000000000019DF7 _eh_frame       ends
.eh_frame:0000000000019DF7
.init_array:000000000021AAB0 ; ELF Initialization Function Table
.init_array:000000000021AAB0 ; ===========================================================================
.init_array:000000000021AAB0
.init_array:000000000021AAB0 ; Segment type: Pure data
.init_array:000000000021AAB0 ; Segment permissions: Read/Write
.init_array:000000000021AAB0 _init_array     segment qword public 'DATA' use64
.init_array:000000000021AAB0                 assume cs:_init_array
.init_array:000000000021AAB0                 ;org 21AAB0h
.init_array:000000000021AAB0 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:000000000021AAB0                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:000000000021AAB0                                         ; LOAD:0000000000000210↑o ...
.init_array:000000000021AAB0 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:000000000021AAB0
.fini_array:000000000021AAB8 ; ELF Termination Function Table
.fini_array:000000000021AAB8 ; ===========================================================================
.fini_array:000000000021AAB8
.fini_array:000000000021AAB8 ; Segment type: Pure data
.fini_array:000000000021AAB8 ; Segment permissions: Read/Write
.fini_array:000000000021AAB8 _fini_array     segment qword public 'DATA' use64
.fini_array:000000000021AAB8                 assume cs:_fini_array
.fini_array:000000000021AAB8                 ;org 21AAB8h
.fini_array:000000000021AAB8 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:000000000021AAB8                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:000000000021AAB8 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:000000000021AAB8
.data.rel.ro:000000000021AAC0 ; ===========================================================================
.data.rel.ro:000000000021AAC0
.data.rel.ro:000000000021AAC0 ; Segment type: Pure data
.data.rel.ro:000000000021AAC0 ; Segment permissions: Read/Write
.data.rel.ro:000000000021AAC0 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:000000000021AAC0                 assume cs:_data_rel_ro
.data.rel.ro:000000000021AAC0                 ;org 21AAC0h
.data.rel.ro:000000000021AAC0 ; struct option long_options
.data.rel.ro:000000000021AAC0 long_options    dq offset aHelp         ; name
.data.rel.ro:000000000021AAC0                                         ; DATA XREF: parse_long_options:loc_4020↑o
.data.rel.ro:000000000021AAC0                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:000000000021AAC0                 dd 0                    ; has_arg ; "help"
.data.rel.ro:000000000021AAC0                 db 4 dup(0)
.data.rel.ro:000000000021AAC0                 dq 0                    ; flag
.data.rel.ro:000000000021AAC0                 dd 68h                  ; val
.data.rel.ro:000000000021AAC0                 db 4 dup(0)
.data.rel.ro:000000000021AAE0                 dq offset aVersion      ; "version"
.data.rel.ro:000000000021AAE8                 db    0
.data.rel.ro:000000000021AAE9                 db    0
.data.rel.ro:000000000021AAEA                 db    0
.data.rel.ro:000000000021AAEB                 db    0
.data.rel.ro:000000000021AAEC                 db    0
.data.rel.ro:000000000021AAED                 db    0
.data.rel.ro:000000000021AAEE                 db    0
.data.rel.ro:000000000021AAEF                 db    0
.data.rel.ro:000000000021AAF0                 db    0
.data.rel.ro:000000000021AAF1                 db    0
.data.rel.ro:000000000021AAF2                 db    0
.data.rel.ro:000000000021AAF3                 db    0
.data.rel.ro:000000000021AAF4                 db    0
.data.rel.ro:000000000021AAF5                 db    0
.data.rel.ro:000000000021AAF6                 db    0
.data.rel.ro:000000000021AAF7                 db    0
.data.rel.ro:000000000021AAF8                 db  76h ; v
.data.rel.ro:000000000021AAF9                 db    0
.data.rel.ro:000000000021AAFA                 db    0
.data.rel.ro:000000000021AAFB                 db    0
.data.rel.ro:000000000021AAFC                 db    0
.data.rel.ro:000000000021AAFD                 db    0
.data.rel.ro:000000000021AAFE                 db    0
.data.rel.ro:000000000021AAFF                 db    0
.data.rel.ro:000000000021AB00                 db    0
.data.rel.ro:000000000021AB01                 db    0
.data.rel.ro:000000000021AB02                 db    0
.data.rel.ro:000000000021AB03                 db    0
.data.rel.ro:000000000021AB04                 db    0
.data.rel.ro:000000000021AB05                 db    0
.data.rel.ro:000000000021AB06                 db    0
.data.rel.ro:000000000021AB07                 db    0
.data.rel.ro:000000000021AB08                 db    0
.data.rel.ro:000000000021AB09                 db    0
.data.rel.ro:000000000021AB0A                 db    0
.data.rel.ro:000000000021AB0B                 db    0
.data.rel.ro:000000000021AB0C                 db    0
.data.rel.ro:000000000021AB0D                 db    0
.data.rel.ro:000000000021AB0E                 db    0
.data.rel.ro:000000000021AB0F                 db    0
.data.rel.ro:000000000021AB10                 db    0
.data.rel.ro:000000000021AB11                 db    0
.data.rel.ro:000000000021AB12                 db    0
.data.rel.ro:000000000021AB13                 db    0
.data.rel.ro:000000000021AB14                 db    0
.data.rel.ro:000000000021AB15                 db    0
.data.rel.ro:000000000021AB16                 db    0
.data.rel.ro:000000000021AB17                 db    0
.data.rel.ro:000000000021AB18                 db    0
.data.rel.ro:000000000021AB19                 db    0
.data.rel.ro:000000000021AB1A                 db    0
.data.rel.ro:000000000021AB1B                 db    0
.data.rel.ro:000000000021AB1C                 db    0
.data.rel.ro:000000000021AB1D                 db    0
.data.rel.ro:000000000021AB1E                 db    0
.data.rel.ro:000000000021AB1F                 db    0
.data.rel.ro:000000000021AB20                 public quoting_style_args
.data.rel.ro:000000000021AB20 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:000000000021AB28                 dq offset aShell        ; "shell"
.data.rel.ro:000000000021AB30                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:000000000021AB38                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:000000000021AB40                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:000000000021AB48                 dq offset aC_0          ; "c"
.data.rel.ro:000000000021AB50                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:000000000021AB58                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:000000000021AB60                 dq offset dirname+11h   ; "locale"
.data.rel.ro:000000000021AB68                 dq offset aClocale      ; "clocale"
.data.rel.ro:000000000021AB70                 db    0
.data.rel.ro:000000000021AB71                 db    0
.data.rel.ro:000000000021AB72                 db    0
.data.rel.ro:000000000021AB73                 db    0
.data.rel.ro:000000000021AB74                 db    0
.data.rel.ro:000000000021AB75                 db    0
.data.rel.ro:000000000021AB76                 db    0
.data.rel.ro:000000000021AB77                 db    0
.data.rel.ro:000000000021AB77 _data_rel_ro    ends
.data.rel.ro:000000000021AB77
LOAD:000000000021AB78 ; ELF Dynamic Information
LOAD:000000000021AB78 ; ===========================================================================
LOAD:000000000021AB78
LOAD:000000000021AB78 ; Segment type: Pure data
LOAD:000000000021AB78 ; Segment permissions: Read/Write
LOAD:000000000021AB78 LOAD            segment byte public 'DATA' use64
LOAD:000000000021AB78                 assume cs:LOAD
LOAD:000000000021AB78                 ;org 21AB78h
LOAD:000000000021AB78 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:000000000021AB78                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:000000000021AB78                                         ; DT_NEEDED libgmp.so.10
LOAD:000000000021AB88                 Elf64_Dyn <1, 0EEh>     ; DT_NEEDED libc.so.6
LOAD:000000000021AB98                 Elf64_Dyn <0Ch, 1990h>  ; DT_INIT
LOAD:000000000021ABA8                 Elf64_Dyn <0Dh, 155C0h> ; DT_FINI
LOAD:000000000021ABB8                 Elf64_Dyn <19h, 21AAB0h> ; DT_INIT_ARRAY
LOAD:000000000021ABC8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:000000000021ABD8                 Elf64_Dyn <1Ah, 21AAB8h> ; DT_FINI_ARRAY
LOAD:000000000021ABE8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:000000000021ABF8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:000000000021AC08                 Elf64_Dyn <5, 0B50h>    ; DT_STRTAB
LOAD:000000000021AC18                 Elf64_Dyn <6, 2F8h>     ; DT_SYMTAB
LOAD:000000000021AC28                 Elf64_Dyn <0Ah, 3FDh>   ; DT_STRSZ
LOAD:000000000021AC38                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:000000000021AC48                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:000000000021AC58                 Elf64_Dyn <3, 21AD78h>  ; DT_PLTGOT
LOAD:000000000021AC68                 Elf64_Dyn <2, 618h>     ; DT_PLTRELSZ
LOAD:000000000021AC78                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:000000000021AC88                 Elf64_Dyn <17h, 1378h>  ; DT_JMPREL
LOAD:000000000021AC98                 Elf64_Dyn <7, 1060h>    ; DT_RELA
LOAD:000000000021ACA8                 Elf64_Dyn <8, 318h>     ; DT_RELASZ
LOAD:000000000021ACB8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:000000000021ACC8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:000000000021ACD8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:000000000021ACE8                 Elf64_Dyn <6FFFFFFEh, 1000h> ; DT_VERNEED
LOAD:000000000021ACF8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:000000000021AD08                 Elf64_Dyn <6FFFFFF0h, 0F4Eh> ; DT_VERSYM
LOAD:000000000021AD18                 Elf64_Dyn <6FFFFFF9h, 11h> ; DT_RELACOUNT
LOAD:000000000021AD28                 Elf64_Dyn <0>           ; DT_NULL
LOAD:000000000021AD38                 db    0
LOAD:000000000021AD39                 db    0
LOAD:000000000021AD3A                 db    0
LOAD:000000000021AD3B                 db    0
LOAD:000000000021AD3C                 db    0
LOAD:000000000021AD3D                 db    0
LOAD:000000000021AD3E                 db    0
LOAD:000000000021AD3F                 db    0
LOAD:000000000021AD40                 db    0
LOAD:000000000021AD41                 db    0
LOAD:000000000021AD42                 db    0
LOAD:000000000021AD43                 db    0
LOAD:000000000021AD44                 db    0
LOAD:000000000021AD45                 db    0
LOAD:000000000021AD46                 db    0
LOAD:000000000021AD47                 db    0
LOAD:000000000021AD48                 db    0
LOAD:000000000021AD49                 db    0
LOAD:000000000021AD4A                 db    0
LOAD:000000000021AD4B                 db    0
LOAD:000000000021AD4C                 db    0
LOAD:000000000021AD4D                 db    0
LOAD:000000000021AD4E                 db    0
LOAD:000000000021AD4F                 db    0
LOAD:000000000021AD50                 db    0
LOAD:000000000021AD51                 db    0
LOAD:000000000021AD52                 db    0
LOAD:000000000021AD53                 db    0
LOAD:000000000021AD54                 db    0
LOAD:000000000021AD55                 db    0
LOAD:000000000021AD56                 db    0
LOAD:000000000021AD57                 db    0
LOAD:000000000021AD58                 db    0
LOAD:000000000021AD59                 db    0
LOAD:000000000021AD5A                 db    0
LOAD:000000000021AD5B                 db    0
LOAD:000000000021AD5C                 db    0
LOAD:000000000021AD5D                 db    0
LOAD:000000000021AD5E                 db    0
LOAD:000000000021AD5F                 db    0
LOAD:000000000021AD60                 db    0
LOAD:000000000021AD61                 db    0
LOAD:000000000021AD62                 db    0
LOAD:000000000021AD63                 db    0
LOAD:000000000021AD64                 db    0
LOAD:000000000021AD65                 db    0
LOAD:000000000021AD66                 db    0
LOAD:000000000021AD67                 db    0
LOAD:000000000021AD68                 db    0
LOAD:000000000021AD69                 db    0
LOAD:000000000021AD6A                 db    0
LOAD:000000000021AD6B                 db    0
LOAD:000000000021AD6C                 db    0
LOAD:000000000021AD6D                 db    0
LOAD:000000000021AD6E                 db    0
LOAD:000000000021AD6F                 db    0
LOAD:000000000021AD70                 db    0
LOAD:000000000021AD71                 db    0
LOAD:000000000021AD72                 db    0
LOAD:000000000021AD73                 db    0
LOAD:000000000021AD74                 db    0
LOAD:000000000021AD75                 db    0
LOAD:000000000021AD76                 db    0
LOAD:000000000021AD77                 db    0
LOAD:000000000021AD77 LOAD            ends
LOAD:000000000021AD77
.got:000000000021AD78 ; ===========================================================================
.got:000000000021AD78
.got:000000000021AD78 ; Segment type: Pure data
.got:000000000021AD78 ; Segment permissions: Read/Write
.got:000000000021AD78 _got            segment qword public 'DATA' use64
.got:000000000021AD78                 assume cs:_got
.got:000000000021AD78                 ;org 21AD78h
.got:000000000021AD78 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:000000000021AD80 qword_21AD80    dq 0                    ; DATA XREF: sub_19B0↑r
.got:000000000021AD88 qword_21AD88    dq 0                    ; DATA XREF: sub_19B0+6↑r
.got:000000000021AD90 __ctype_toupper_loc_ptr dq offset __ctype_toupper_loc
.got:000000000021AD90                                         ; DATA XREF: ___ctype_toupper_loc↑r
.got:000000000021AD98 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:000000000021ADA0 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:000000000021ADA8 __errno_location_ptr dq offset __errno_location
.got:000000000021ADA8                                         ; DATA XREF: ___errno_location↑r
.got:000000000021ADB0 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:000000000021ADB8 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:000000000021ADC0 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:000000000021ADC8 puts_ptr        dq offset puts          ; DATA XREF: _puts↑r
.got:000000000021ADD0 iswcntrl_ptr    dq offset iswcntrl      ; DATA XREF: _iswcntrl↑r
.got:000000000021ADD8 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:000000000021ADE0 iswctype_ptr    dq offset iswctype      ; DATA XREF: _iswctype↑r
.got:000000000021ADE8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:000000000021ADF0 bindtextdomain_ptr dq offset bindtextdomain
.got:000000000021ADF0                                         ; DATA XREF: _bindtextdomain↑r
.got:000000000021ADF8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:000000000021AE00 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:000000000021AE00                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:000000000021AE08 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:000000000021AE10 __gmpz_get_str_ptr dq offset __gmpz_get_str
.got:000000000021AE10                                         ; DATA XREF: ___gmpz_get_str↑r
.got:000000000021AE18 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:000000000021AE18                                         ; DATA XREF: ___stack_chk_fail↑r
.got:000000000021AE20 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:000000000021AE28 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:000000000021AE30 strchr_ptr      dq offset strchr        ; DATA XREF: _strchr↑r
.got:000000000021AE38 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:000000000021AE40 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:000000000021AE48 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:000000000021AE50 __gmpz_out_str_ptr dq offset __gmpz_out_str
.got:000000000021AE50                                         ; DATA XREF: ___gmpz_out_str↑r
.got:000000000021AE58 __assert_fail_ptr dq offset __assert_fail
.got:000000000021AE58                                         ; DATA XREF: ___assert_fail↑r
.got:000000000021AE60 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:000000000021AE68 strcspn_ptr     dq offset strcspn       ; DATA XREF: _strcspn↑r
.got:000000000021AE70 memchr_ptr      dq offset memchr        ; DATA XREF: _memchr↑r
.got:000000000021AE78 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:000000000021AE80 wctype_ptr      dq offset wctype        ; DATA XREF: _wctype↑r
.got:000000000021AE88 fputs_unlocked_ptr dq offset fputs_unlocked
.got:000000000021AE88                                         ; DATA XREF: _fputs_unlocked↑r
.got:000000000021AE90 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:000000000021AE98 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:000000000021AEA0 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:000000000021AEA8 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:000000000021AEB0 wcwidth_ptr     dq offset wcwidth       ; DATA XREF: _wcwidth↑r
.got:000000000021AEB8 iswalnum_ptr    dq offset iswalnum      ; DATA XREF: _iswalnum↑r
.got:000000000021AEC0 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:000000000021AEC8 wcrtomb_ptr     dq offset wcrtomb       ; DATA XREF: _wcrtomb↑r
.got:000000000021AED0 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:000000000021AED8 __gmpz_clear_ptr dq offset __gmpz_clear ; DATA XREF: ___gmpz_clear↑r
.got:000000000021AEE0 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:000000000021AEE8 strcoll_ptr     dq offset strcoll       ; DATA XREF: _strcoll↑r
.got:000000000021AEF0 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:000000000021AEF8 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:000000000021AF00 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:000000000021AF08 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:000000000021AF10 __gmpz_init_set_ui_ptr dq offset __gmpz_init_set_ui
.got:000000000021AF10                                         ; DATA XREF: ___gmpz_init_set_ui↑r
.got:000000000021AF18 btowc_ptr       dq offset btowc         ; DATA XREF: _btowc↑r
.got:000000000021AF20 mempcpy_ptr     dq offset mempcpy       ; DATA XREF: _mempcpy↑r
.got:000000000021AF28 memmove_ptr     dq offset memmove       ; DATA XREF: _memmove↑r
.got:000000000021AF30 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:000000000021AF38 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:000000000021AF40 towlower_ptr    dq offset towlower      ; DATA XREF: _towlower↑r
.got:000000000021AF48 towupper_ptr    dq offset towupper      ; DATA XREF: _towupper↑r
.got:000000000021AF50 __gmpz_init_set_str_ptr dq offset __gmpz_init_set_str
.got:000000000021AF50                                         ; DATA XREF: ___gmpz_init_set_str↑r
.got:000000000021AF58 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:000000000021AF60 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:000000000021AF68 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:000000000021AF70 __fprintf_chk_ptr dq offset __fprintf_chk
.got:000000000021AF70                                         ; DATA XREF: ___fprintf_chk↑r
.got:000000000021AF78 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:000000000021AF80 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:000000000021AF88 __ctype_tolower_loc_ptr dq offset __ctype_tolower_loc
.got:000000000021AF88                                         ; DATA XREF: ___ctype_tolower_loc↑r
.got:000000000021AF90 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:000000000021AF90                                         ; DATA XREF: ___ctype_b_loc↑r
.got:000000000021AF98 __gmpz_tdiv_q_ptr dq offset __gmpz_tdiv_q
.got:000000000021AF98                                         ; DATA XREF: eval4:loc_3988↑r
.got:000000000021AFA0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:000000000021AFA0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:000000000021AFA8 __gmpz_sub_ptr  dq offset __gmpz_sub    ; DATA XREF: eval3+61↑r
.got:000000000021AFB0 __gmpz_mul_ptr  dq offset __gmpz_mul    ; DATA XREF: eval4:loc_3958↑r
.got:000000000021AFB8 __libc_start_main_ptr dq offset __libc_start_main
.got:000000000021AFB8                                         ; DATA XREF: start+24↑r
.got:000000000021AFC0 __gmon_start___ptr dq offset __gmon_start__
.got:000000000021AFC0                                         ; DATA XREF: _init_proc+4↑r
.got:000000000021AFC8 __gmpz_tdiv_r_ptr dq offset __gmpz_tdiv_r
.got:000000000021AFC8                                         ; DATA XREF: eval4+7D↑r
.got:000000000021AFD0 __gmpz_add_ptr  dq offset __gmpz_add    ; DATA XREF: eval3:loc_3A88↑r
.got:000000000021AFD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:000000000021AFD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:000000000021AFE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:000000000021AFE0                                         ; DATA XREF: __cxa_finalize↑r
.got:000000000021AFE0                                         ; __do_global_dtors_aux+9↑r
.got:000000000021AFE0 _got            ends
.got:000000000021AFE0
LOAD:000000000021AFE8 ; ===========================================================================
LOAD:000000000021AFE8
LOAD:000000000021AFE8 ; Segment type: Pure data
LOAD:000000000021AFE8 ; Segment permissions: Read/Write
LOAD:000000000021AFE8 LOAD            segment byte public 'DATA' use64
LOAD:000000000021AFE8                 assume cs:LOAD
LOAD:000000000021AFE8                 ;org 21AFE8h
LOAD:000000000021AFE8                 align 20h
LOAD:000000000021AFE8 LOAD            ends
LOAD:000000000021AFE8
.data:000000000021B000 ; ===========================================================================
.data:000000000021B000
.data:000000000021B000 ; Segment type: Pure data
.data:000000000021B000 ; Segment permissions: Read/Write
.data:000000000021B000 _data           segment align_32 public 'DATA' use64
.data:000000000021B000                 assume cs:_data
.data:000000000021B000                 ;org 21B000h
.data:000000000021B000                 public __data_start ; weak
.data:000000000021B000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:000000000021B000                                         ; data_start
.data:000000000021B001                 db    0
.data:000000000021B002                 db    0
.data:000000000021B003                 db    0
.data:000000000021B004                 db    0
.data:000000000021B005                 db    0
.data:000000000021B006                 db    0
.data:000000000021B007                 db    0
.data:000000000021B008                 public __dso_handle
.data:000000000021B008 ; void *_dso_handle
.data:000000000021B008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:000000000021B008                                         ; atexit↑r ...
.data:000000000021B010                 public exit_failure
.data:000000000021B010 ; int exit_failure
.data:000000000021B010 exit_failure    dd 1                    ; DATA XREF: main+4A↑w
.data:000000000021B010                                         ; close_stdout:loc_3F42↑r ...
.data:000000000021B014                 align 20h
.data:000000000021B020                 public quote_quoting_options
.data:000000000021B020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:000000000021B020                                         ; quote_mem↑o ...
.data:000000000021B021                 db    0
.data:000000000021B022                 db    0
.data:000000000021B023                 db    0
.data:000000000021B024                 db    0
.data:000000000021B025                 db    0
.data:000000000021B026                 db    0
.data:000000000021B027                 db    0
.data:000000000021B028                 db    0
.data:000000000021B029                 db    0
.data:000000000021B02A                 db    0
.data:000000000021B02B                 db    0
.data:000000000021B02C                 db    0
.data:000000000021B02D                 db    0
.data:000000000021B02E                 db    0
.data:000000000021B02F                 db    0
.data:000000000021B030                 db    0
.data:000000000021B031                 db    0
.data:000000000021B032                 db    0
.data:000000000021B033                 db    0
.data:000000000021B034                 db    0
.data:000000000021B035                 db    0
.data:000000000021B036                 db    0
.data:000000000021B037                 db    0
.data:000000000021B038                 db    0
.data:000000000021B039                 db    0
.data:000000000021B03A                 db    0
.data:000000000021B03B                 db    0
.data:000000000021B03C                 db    0
.data:000000000021B03D                 db    0
.data:000000000021B03E                 db    0
.data:000000000021B03F                 db    0
.data:000000000021B040                 db    0
.data:000000000021B041                 db    0
.data:000000000021B042                 db    0
.data:000000000021B043                 db    0
.data:000000000021B044                 db    0
.data:000000000021B045                 db    0
.data:000000000021B046                 db    0
.data:000000000021B047                 db    0
.data:000000000021B048                 db    0
.data:000000000021B049                 db    0
.data:000000000021B04A                 db    0
.data:000000000021B04B                 db    0
.data:000000000021B04C                 db    0
.data:000000000021B04D                 db    0
.data:000000000021B04E                 db    0
.data:000000000021B04F                 db    0
.data:000000000021B050                 db    0
.data:000000000021B051                 db    0
.data:000000000021B052                 db    0
.data:000000000021B053                 db    0
.data:000000000021B054                 db    0
.data:000000000021B055                 db    0
.data:000000000021B056                 db    0
.data:000000000021B057                 db    0
.data:000000000021B058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:000000000021B058                                         ; quotearg_n_options:loc_5BCD↑r ...
.data:000000000021B05C                 align 20h
.data:000000000021B060 ; void *slotvec
.data:000000000021B060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:000000000021B060                                         ; quotearg_n_options+76↑w ...
.data:000000000021B068                 align 10h
.data:000000000021B070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:000000000021B070                                         ; quotearg_n_options+187↑r ...
.data:000000000021B078 off_21B078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:000000000021B078 _data           ends
.data:000000000021B078
.bss:000000000021B080 ; ===========================================================================
.bss:000000000021B080
.bss:000000000021B080 ; Segment type: Uninitialized
.bss:000000000021B080 ; Segment permissions: Read/Write
.bss:000000000021B080 _bss            segment align_32 public 'BSS' use64
.bss:000000000021B080                 assume cs:_bss
.bss:000000000021B080                 ;org 21B080h
.bss:000000000021B080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:000000000021B080                 public __bss_start ; weak
.bss:000000000021B080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000A30↑o
.bss:000000000021B080                                         ; LOAD:0000000000000A60↑o ...
.bss:000000000021B080                                         ; Alternative name is '__TMC_END__'
.bss:000000000021B080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:000000000021B080                                         ; _edata
.bss:000000000021B080                                         ; __bss_start
.bss:000000000021B080                                         ; _edata
.bss:000000000021B080                                         ; Copy of shared data
.bss:000000000021B088                 public stdout@@GLIBC_2_2_5
.bss:000000000021B088 ; _IO_FILE *stdout
.bss:000000000021B088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000A18↑o
.bss:000000000021B088                                         ; main:loc_1F26↑r ...
.bss:000000000021B088                                         ; Alternative name is 'stdout'
.bss:000000000021B088                                         ; Copy of shared data
.bss:000000000021B090                 public optind@@GLIBC_2_2_5
.bss:000000000021B090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000B20↑o
.bss:000000000021B090                                         ; parse_long_options+8D↑w
.bss:000000000021B090                                         ; Alternative name is 'optind'
.bss:000000000021B090                                         ; Copy of shared data
.bss:000000000021B094                 align 8
.bss:000000000021B098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:000000000021B098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:000000000021B098                                         ; DATA XREF: LOAD:0000000000000A78↑o
.bss:000000000021B098                                         ; LOAD:0000000000000AA8↑o ...
.bss:000000000021B098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:000000000021B098                                         ; Copy of shared data
.bss:000000000021B0A0                 public opterr@@GLIBC_2_2_5
.bss:000000000021B0A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000AF0↑o
.bss:000000000021B0A0                                         ; parse_long_options+67↑r ...
.bss:000000000021B0A0                                         ; Alternative name is 'opterr'
.bss:000000000021B0A0                                         ; Copy of shared data
.bss:000000000021B0A4                 align 20h
.bss:000000000021B0C0                 public stderr@@GLIBC_2_2_5
.bss:000000000021B0C0 ; FILE *stderr
.bss:000000000021B0C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000B08↑o
.bss:000000000021B0C0                                         ; usage+3D↑r ...
.bss:000000000021B0C0                                         ; Alternative name is 'stderr'
.bss:000000000021B0C0                                         ; Copy of shared data
.bss:000000000021B0C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:000000000021B0C8                                         ; __do_global_dtors_aux+28↑w
.bss:000000000021B0C9                 align 10h
.bss:000000000021B0D0 args            dq ?                    ; DATA XREF: main+D2↑w
.bss:000000000021B0D0                                         ; main+E1↑r ...
.bss:000000000021B0D8 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:000000000021B0D8                                         ; close_stdout+1B↑r
.bss:000000000021B0D9                 align 20h
.bss:000000000021B0E0 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:000000000021B0E0                                         ; close_stdout+56↑r
.bss:000000000021B0E8                 public program_name
.bss:000000000021B0E8 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:000000000021B0E8                                         ; set_program_name:loc_47ED↑w
.bss:000000000021B0F0                 align 20h
.bss:000000000021B100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:000000000021B100                                         ; quotearg_free+46↑o ...
.bss:000000000021B101                 db    ? ;
.bss:000000000021B102                 db    ? ;
.bss:000000000021B103                 db    ? ;
.bss:000000000021B104                 db    ? ;
.bss:000000000021B105                 db    ? ;
.bss:000000000021B106                 db    ? ;
.bss:000000000021B107                 db    ? ;
.bss:000000000021B108                 db    ? ;
.bss:000000000021B109                 db    ? ;
.bss:000000000021B10A                 db    ? ;
.bss:000000000021B10B                 db    ? ;
.bss:000000000021B10C                 db    ? ;
.bss:000000000021B10D                 db    ? ;
.bss:000000000021B10E                 db    ? ;
.bss:000000000021B10F                 db    ? ;
.bss:000000000021B110                 db    ? ;
.bss:000000000021B111                 db    ? ;
.bss:000000000021B112                 db    ? ;
.bss:000000000021B113                 db    ? ;
.bss:000000000021B114                 db    ? ;
.bss:000000000021B115                 db    ? ;
.bss:000000000021B116                 db    ? ;
.bss:000000000021B117                 db    ? ;
.bss:000000000021B118                 db    ? ;
.bss:000000000021B119                 db    ? ;
.bss:000000000021B11A                 db    ? ;
.bss:000000000021B11B                 db    ? ;
.bss:000000000021B11C                 db    ? ;
.bss:000000000021B11D                 db    ? ;
.bss:000000000021B11E                 db    ? ;
.bss:000000000021B11F                 db    ? ;
.bss:000000000021B120                 db    ? ;
.bss:000000000021B121                 db    ? ;
.bss:000000000021B122                 db    ? ;
.bss:000000000021B123                 db    ? ;
.bss:000000000021B124                 db    ? ;
.bss:000000000021B125                 db    ? ;
.bss:000000000021B126                 db    ? ;
.bss:000000000021B127                 db    ? ;
.bss:000000000021B128                 db    ? ;
.bss:000000000021B129                 db    ? ;
.bss:000000000021B12A                 db    ? ;
.bss:000000000021B12B                 db    ? ;
.bss:000000000021B12C                 db    ? ;
.bss:000000000021B12D                 db    ? ;
.bss:000000000021B12E                 db    ? ;
.bss:000000000021B12F                 db    ? ;
.bss:000000000021B130                 db    ? ;
.bss:000000000021B131                 db    ? ;
.bss:000000000021B132                 db    ? ;
.bss:000000000021B133                 db    ? ;
.bss:000000000021B134                 db    ? ;
.bss:000000000021B135                 db    ? ;
.bss:000000000021B136                 db    ? ;
.bss:000000000021B137                 db    ? ;
.bss:000000000021B138                 db    ? ;
.bss:000000000021B139                 db    ? ;
.bss:000000000021B13A                 db    ? ;
.bss:000000000021B13B                 db    ? ;
.bss:000000000021B13C                 db    ? ;
.bss:000000000021B13D                 db    ? ;
.bss:000000000021B13E                 db    ? ;
.bss:000000000021B13F                 db    ? ;
.bss:000000000021B140                 db    ? ;
.bss:000000000021B141                 db    ? ;
.bss:000000000021B142                 db    ? ;
.bss:000000000021B143                 db    ? ;
.bss:000000000021B144                 db    ? ;
.bss:000000000021B145                 db    ? ;
.bss:000000000021B146                 db    ? ;
.bss:000000000021B147                 db    ? ;
.bss:000000000021B148                 db    ? ;
.bss:000000000021B149                 db    ? ;
.bss:000000000021B14A                 db    ? ;
.bss:000000000021B14B                 db    ? ;
.bss:000000000021B14C                 db    ? ;
.bss:000000000021B14D                 db    ? ;
.bss:000000000021B14E                 db    ? ;
.bss:000000000021B14F                 db    ? ;
.bss:000000000021B150                 db    ? ;
.bss:000000000021B151                 db    ? ;
.bss:000000000021B152                 db    ? ;
.bss:000000000021B153                 db    ? ;
.bss:000000000021B154                 db    ? ;
.bss:000000000021B155                 db    ? ;
.bss:000000000021B156                 db    ? ;
.bss:000000000021B157                 db    ? ;
.bss:000000000021B158                 db    ? ;
.bss:000000000021B159                 db    ? ;
.bss:000000000021B15A                 db    ? ;
.bss:000000000021B15B                 db    ? ;
.bss:000000000021B15C                 db    ? ;
.bss:000000000021B15D                 db    ? ;
.bss:000000000021B15E                 db    ? ;
.bss:000000000021B15F                 db    ? ;
.bss:000000000021B160                 db    ? ;
.bss:000000000021B161                 db    ? ;
.bss:000000000021B162                 db    ? ;
.bss:000000000021B163                 db    ? ;
.bss:000000000021B164                 db    ? ;
.bss:000000000021B165                 db    ? ;
.bss:000000000021B166                 db    ? ;
.bss:000000000021B167                 db    ? ;
.bss:000000000021B168                 db    ? ;
.bss:000000000021B169                 db    ? ;
.bss:000000000021B16A                 db    ? ;
.bss:000000000021B16B                 db    ? ;
.bss:000000000021B16C                 db    ? ;
.bss:000000000021B16D                 db    ? ;
.bss:000000000021B16E                 db    ? ;
.bss:000000000021B16F                 db    ? ;
.bss:000000000021B170                 db    ? ;
.bss:000000000021B171                 db    ? ;
.bss:000000000021B172                 db    ? ;
.bss:000000000021B173                 db    ? ;
.bss:000000000021B174                 db    ? ;
.bss:000000000021B175                 db    ? ;
.bss:000000000021B176                 db    ? ;
.bss:000000000021B177                 db    ? ;
.bss:000000000021B178                 db    ? ;
.bss:000000000021B179                 db    ? ;
.bss:000000000021B17A                 db    ? ;
.bss:000000000021B17B                 db    ? ;
.bss:000000000021B17C                 db    ? ;
.bss:000000000021B17D                 db    ? ;
.bss:000000000021B17E                 db    ? ;
.bss:000000000021B17F                 db    ? ;
.bss:000000000021B180                 db    ? ;
.bss:000000000021B181                 db    ? ;
.bss:000000000021B182                 db    ? ;
.bss:000000000021B183                 db    ? ;
.bss:000000000021B184                 db    ? ;
.bss:000000000021B185                 db    ? ;
.bss:000000000021B186                 db    ? ;
.bss:000000000021B187                 db    ? ;
.bss:000000000021B188                 db    ? ;
.bss:000000000021B189                 db    ? ;
.bss:000000000021B18A                 db    ? ;
.bss:000000000021B18B                 db    ? ;
.bss:000000000021B18C                 db    ? ;
.bss:000000000021B18D                 db    ? ;
.bss:000000000021B18E                 db    ? ;
.bss:000000000021B18F                 db    ? ;
.bss:000000000021B190                 db    ? ;
.bss:000000000021B191                 db    ? ;
.bss:000000000021B192                 db    ? ;
.bss:000000000021B193                 db    ? ;
.bss:000000000021B194                 db    ? ;
.bss:000000000021B195                 db    ? ;
.bss:000000000021B196                 db    ? ;
.bss:000000000021B197                 db    ? ;
.bss:000000000021B198                 db    ? ;
.bss:000000000021B199                 db    ? ;
.bss:000000000021B19A                 db    ? ;
.bss:000000000021B19B                 db    ? ;
.bss:000000000021B19C                 db    ? ;
.bss:000000000021B19D                 db    ? ;
.bss:000000000021B19E                 db    ? ;
.bss:000000000021B19F                 db    ? ;
.bss:000000000021B1A0                 db    ? ;
.bss:000000000021B1A1                 db    ? ;
.bss:000000000021B1A2                 db    ? ;
.bss:000000000021B1A3                 db    ? ;
.bss:000000000021B1A4                 db    ? ;
.bss:000000000021B1A5                 db    ? ;
.bss:000000000021B1A6                 db    ? ;
.bss:000000000021B1A7                 db    ? ;
.bss:000000000021B1A8                 db    ? ;
.bss:000000000021B1A9                 db    ? ;
.bss:000000000021B1AA                 db    ? ;
.bss:000000000021B1AB                 db    ? ;
.bss:000000000021B1AC                 db    ? ;
.bss:000000000021B1AD                 db    ? ;
.bss:000000000021B1AE                 db    ? ;
.bss:000000000021B1AF                 db    ? ;
.bss:000000000021B1B0                 db    ? ;
.bss:000000000021B1B1                 db    ? ;
.bss:000000000021B1B2                 db    ? ;
.bss:000000000021B1B3                 db    ? ;
.bss:000000000021B1B4                 db    ? ;
.bss:000000000021B1B5                 db    ? ;
.bss:000000000021B1B6                 db    ? ;
.bss:000000000021B1B7                 db    ? ;
.bss:000000000021B1B8                 db    ? ;
.bss:000000000021B1B9                 db    ? ;
.bss:000000000021B1BA                 db    ? ;
.bss:000000000021B1BB                 db    ? ;
.bss:000000000021B1BC                 db    ? ;
.bss:000000000021B1BD                 db    ? ;
.bss:000000000021B1BE                 db    ? ;
.bss:000000000021B1BF                 db    ? ;
.bss:000000000021B1C0                 db    ? ;
.bss:000000000021B1C1                 db    ? ;
.bss:000000000021B1C2                 db    ? ;
.bss:000000000021B1C3                 db    ? ;
.bss:000000000021B1C4                 db    ? ;
.bss:000000000021B1C5                 db    ? ;
.bss:000000000021B1C6                 db    ? ;
.bss:000000000021B1C7                 db    ? ;
.bss:000000000021B1C8                 db    ? ;
.bss:000000000021B1C9                 db    ? ;
.bss:000000000021B1CA                 db    ? ;
.bss:000000000021B1CB                 db    ? ;
.bss:000000000021B1CC                 db    ? ;
.bss:000000000021B1CD                 db    ? ;
.bss:000000000021B1CE                 db    ? ;
.bss:000000000021B1CF                 db    ? ;
.bss:000000000021B1D0                 db    ? ;
.bss:000000000021B1D1                 db    ? ;
.bss:000000000021B1D2                 db    ? ;
.bss:000000000021B1D3                 db    ? ;
.bss:000000000021B1D4                 db    ? ;
.bss:000000000021B1D5                 db    ? ;
.bss:000000000021B1D6                 db    ? ;
.bss:000000000021B1D7                 db    ? ;
.bss:000000000021B1D8                 db    ? ;
.bss:000000000021B1D9                 db    ? ;
.bss:000000000021B1DA                 db    ? ;
.bss:000000000021B1DB                 db    ? ;
.bss:000000000021B1DC                 db    ? ;
.bss:000000000021B1DD                 db    ? ;
.bss:000000000021B1DE                 db    ? ;
.bss:000000000021B1DF                 db    ? ;
.bss:000000000021B1E0                 db    ? ;
.bss:000000000021B1E1                 db    ? ;
.bss:000000000021B1E2                 db    ? ;
.bss:000000000021B1E3                 db    ? ;
.bss:000000000021B1E4                 db    ? ;
.bss:000000000021B1E5                 db    ? ;
.bss:000000000021B1E6                 db    ? ;
.bss:000000000021B1E7                 db    ? ;
.bss:000000000021B1E8                 db    ? ;
.bss:000000000021B1E9                 db    ? ;
.bss:000000000021B1EA                 db    ? ;
.bss:000000000021B1EB                 db    ? ;
.bss:000000000021B1EC                 db    ? ;
.bss:000000000021B1ED                 db    ? ;
.bss:000000000021B1EE                 db    ? ;
.bss:000000000021B1EF                 db    ? ;
.bss:000000000021B1F0                 db    ? ;
.bss:000000000021B1F1                 db    ? ;
.bss:000000000021B1F2                 db    ? ;
.bss:000000000021B1F3                 db    ? ;
.bss:000000000021B1F4                 db    ? ;
.bss:000000000021B1F5                 db    ? ;
.bss:000000000021B1F6                 db    ? ;
.bss:000000000021B1F7                 db    ? ;
.bss:000000000021B1F8                 db    ? ;
.bss:000000000021B1F9                 db    ? ;
.bss:000000000021B1FA                 db    ? ;
.bss:000000000021B1FB                 db    ? ;
.bss:000000000021B1FC                 db    ? ;
.bss:000000000021B1FD                 db    ? ;
.bss:000000000021B1FE                 db    ? ;
.bss:000000000021B1FF                 db    ? ;
.bss:000000000021B200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:000000000021B200                                         ; get_quoting_style↑o ...
.bss:000000000021B210 xmmword_21B210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:000000000021B210                                         ; quotearg_n_custom_mem+39↑r
.bss:000000000021B220 xmmword_21B220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:000000000021B220                                         ; quotearg_n_custom_mem+46↑r
.bss:000000000021B230 qword_21B230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:000000000021B230                                         ; quotearg_n_custom_mem+7↑r
.bss:000000000021B238                 public rpl_re_syntax_options
.bss:000000000021B238 rpl_re_syntax_options dq ?              ; DATA XREF: docolon+86↑w
.bss:000000000021B238                                         ; rpl_re_compile_pattern+4↑r ...
.bss:000000000021B238 _bss            ends
.bss:000000000021B238
.prgend:000000000021B240 ; ===========================================================================
.prgend:000000000021B240
.prgend:000000000021B240 ; Segment type: Zero-length
.prgend:000000000021B240 _prgend         segment byte public '' use64
.prgend:000000000021B240 _end            label byte              ; DATA XREF: LOAD:0000000000000A48↑o
.prgend:000000000021B240 _prgend         ends
.prgend:000000000021B240
extern:000000000021B248 ; ===========================================================================
extern:000000000021B248
extern:000000000021B248 ; Segment type: Externs
extern:000000000021B248 ; extern
extern:000000000021B248 ; const __int32_t **_ctype_toupper_loc(void)
extern:000000000021B248                 extrn __ctype_toupper_loc:near
extern:000000000021B248                                         ; CODE XREF: ___ctype_toupper_loc↑j
extern:000000000021B248                                         ; DATA XREF: .got:__ctype_toupper_loc_ptr↑o
extern:000000000021B250 ; void free(void *ptr)
extern:000000000021B250                 extrn free:near         ; CODE XREF: _free↑j
extern:000000000021B250                                         ; DATA XREF: .got:free_ptr↑o
extern:000000000021B258 ; void __noreturn abort(void)
extern:000000000021B258                 extrn abort:near        ; CODE XREF: _abort↑j
extern:000000000021B258                                         ; DATA XREF: .got:abort_ptr↑o
extern:000000000021B260 ; int *_errno_location(void)
extern:000000000021B260                 extrn __errno_location:near
extern:000000000021B260                                         ; CODE XREF: ___errno_location↑j
extern:000000000021B260                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:000000000021B268                 extrn __gmpz_tdiv_q:near
extern:000000000021B268                                         ; DATA XREF: .got:__gmpz_tdiv_q_ptr↑o
extern:000000000021B270 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:000000000021B270                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:000000000021B270                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:000000000021B278 ; void __noreturn exit(int status)
extern:000000000021B278                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:000000000021B278                                         ; DATA XREF: .got:_exit_ptr↑o
extern:000000000021B280 ; size_t _fpending(FILE *fp)
extern:000000000021B280                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:000000000021B280                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:000000000021B288 ; int puts(const char *s)
extern:000000000021B288                 extrn puts:near         ; CODE XREF: _puts↑j
extern:000000000021B288                                         ; DATA XREF: .got:puts_ptr↑o
extern:000000000021B290 ; int iswcntrl(wint_t wc)
extern:000000000021B290                 extrn iswcntrl:near     ; CODE XREF: _iswcntrl↑j
extern:000000000021B290                                         ; DATA XREF: .got:iswcntrl_ptr↑o
extern:000000000021B298                 extrn __gmpz_sub:near   ; CODE XREF: eval3+73↑p
extern:000000000021B298                                         ; DATA XREF: .got:__gmpz_sub_ptr↑o
extern:000000000021B2A0 ; char *textdomain(const char *domainname)
extern:000000000021B2A0                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:000000000021B2A0                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:000000000021B2A8 ; int iswctype(wint_t wc, wctype_t desc)
extern:000000000021B2A8                 extrn iswctype:near     ; CODE XREF: _iswctype↑j
extern:000000000021B2A8                                         ; DATA XREF: .got:iswctype_ptr↑o
extern:000000000021B2B0 ; int fclose(FILE *stream)
extern:000000000021B2B0                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:000000000021B2B0                                         ; DATA XREF: .got:fclose_ptr↑o
extern:000000000021B2B8 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:000000000021B2B8                 extrn bindtextdomain:near
extern:000000000021B2B8                                         ; CODE XREF: _bindtextdomain↑j
extern:000000000021B2B8                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:000000000021B2C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:000000000021B2C0                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:000000000021B2C0                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:000000000021B2C8 ; size_t _ctype_get_mb_cur_max(void)
extern:000000000021B2C8                 extrn __ctype_get_mb_cur_max:near
extern:000000000021B2C8                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:000000000021B2C8                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:000000000021B2D0 ; size_t strlen(const char *s)
extern:000000000021B2D0                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:000000000021B2D0                                         ; DATA XREF: .got:strlen_ptr↑o
extern:000000000021B2D8                 extrn __gmpz_get_str:near
extern:000000000021B2D8                                         ; CODE XREF: ___gmpz_get_str↑j
extern:000000000021B2D8                                         ; DATA XREF: .got:__gmpz_get_str_ptr↑o
extern:000000000021B2E0                 extrn __stack_chk_fail:near
extern:000000000021B2E0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:000000000021B2E0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:000000000021B2E8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:000000000021B2E8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:000000000021B2E8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:000000000021B2F0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:000000000021B2F0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:000000000021B2F0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:000000000021B2F8 ; char *strchr(const char *s, int c)
extern:000000000021B2F8                 extrn strchr:near       ; CODE XREF: _strchr↑j
extern:000000000021B2F8                                         ; DATA XREF: .got:strchr_ptr↑o
extern:000000000021B300                 extrn __gmpz_mul:near   ; DATA XREF: .got:__gmpz_mul_ptr↑o
extern:000000000021B308 ; int _overflow(_IO_FILE *, int)
extern:000000000021B308                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:000000000021B308                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:000000000021B310 ; char *strrchr(const char *s, int c)
extern:000000000021B310                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:000000000021B310                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:000000000021B318 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:000000000021B318                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:000000000021B318                                         ; DATA XREF: .got:lseek_ptr↑o
extern:000000000021B320                 extrn __gmpz_out_str:near
extern:000000000021B320                                         ; CODE XREF: ___gmpz_out_str↑j
extern:000000000021B320                                         ; DATA XREF: .got:__gmpz_out_str_ptr↑o
extern:000000000021B328 ; void __noreturn _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:000000000021B328                 extrn __assert_fail:near
extern:000000000021B328                                         ; CODE XREF: ___assert_fail↑j
extern:000000000021B328                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:000000000021B330 ; void *memset(void *s, int c, size_t n)
extern:000000000021B330                 extrn memset:near       ; CODE XREF: _memset↑j
extern:000000000021B330                                         ; DATA XREF: .got:memset_ptr↑o
extern:000000000021B338 ; size_t strcspn(const char *s, const char *reject)
extern:000000000021B338                 extrn strcspn:near      ; CODE XREF: _strcspn↑j
extern:000000000021B338                                         ; DATA XREF: .got:strcspn_ptr↑o
extern:000000000021B340 ; void *memchr(const void *s, int c, size_t n)
extern:000000000021B340                 extrn memchr:near       ; CODE XREF: _memchr↑j
extern:000000000021B340                                         ; DATA XREF: .got:memchr_ptr↑o
extern:000000000021B348 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:000000000021B348                 extrn __libc_start_main:near
extern:000000000021B348                                         ; CODE XREF: start+24↑p
extern:000000000021B348                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:000000000021B350 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:000000000021B350                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:000000000021B350                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:000000000021B358 ; wctype_t wctype(const char *property)
extern:000000000021B358                 extrn wctype:near       ; CODE XREF: _wctype↑j
extern:000000000021B358                                         ; DATA XREF: .got:wctype_ptr↑o
extern:000000000021B360 ; int fputs_unlocked(const char *s, FILE *stream)
extern:000000000021B360                 extrn fputs_unlocked:near
extern:000000000021B360                                         ; CODE XREF: _fputs_unlocked↑j
extern:000000000021B360                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:000000000021B368 ; void *calloc(size_t nmemb, size_t size)
extern:000000000021B368                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:000000000021B368                                         ; DATA XREF: .got:calloc_ptr↑o
extern:000000000021B370 ; int strcmp(const char *s1, const char *s2)
extern:000000000021B370                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:000000000021B370                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:000000000021B378 ; void *memcpy(void *dest, const void *src, size_t n)
extern:000000000021B378                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:000000000021B378                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:000000000021B380 ; int fileno(FILE *stream)
extern:000000000021B380                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:000000000021B380                                         ; DATA XREF: .got:fileno_ptr↑o
extern:000000000021B388                 extrn __gmpz_tdiv_r:near
extern:000000000021B388                                         ; CODE XREF: eval4+8F↑p
extern:000000000021B388                                         ; DATA XREF: .got:__gmpz_tdiv_r_ptr↑o
extern:000000000021B390 ; int wcwidth(wchar_t c)
extern:000000000021B390                 extrn wcwidth:near      ; CODE XREF: _wcwidth↑j
extern:000000000021B390                                         ; DATA XREF: .got:wcwidth_ptr↑o
extern:000000000021B398 ; int iswalnum(wint_t wc)
extern:000000000021B398                 extrn iswalnum:near     ; CODE XREF: _iswalnum↑j
extern:000000000021B398                                         ; DATA XREF: .got:iswalnum_ptr↑o
extern:000000000021B3A0 ; void *malloc(size_t size)
extern:000000000021B3A0                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:000000000021B3A0                                         ; DATA XREF: .got:malloc_ptr↑o
extern:000000000021B3A8 ; size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps)
extern:000000000021B3A8                 extrn wcrtomb:near      ; CODE XREF: _wcrtomb↑j
extern:000000000021B3A8                                         ; DATA XREF: .got:wcrtomb_ptr↑o
extern:000000000021B3B0 ; int fflush(FILE *stream)
extern:000000000021B3B0                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:000000000021B3B0                                         ; DATA XREF: .got:fflush_ptr↑o
extern:000000000021B3B8                 extrn __gmpz_clear:near ; CODE XREF: ___gmpz_clear↑j
extern:000000000021B3B8                                         ; DATA XREF: .got:__gmpz_clear_ptr↑o
extern:000000000021B3C0 ; char *nl_langinfo(nl_item item)
extern:000000000021B3C0                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:000000000021B3C0                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:000000000021B3C8 ; int strcoll(const char *s1, const char *s2)
extern:000000000021B3C8                 extrn strcoll:near      ; CODE XREF: _strcoll↑j
extern:000000000021B3C8                                         ; DATA XREF: .got:strcoll_ptr↑o
extern:000000000021B3D0 ; int _freading(FILE *fp)
extern:000000000021B3D0                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:000000000021B3D0                                         ; DATA XREF: .got:__freading_ptr↑o
extern:000000000021B3D8 ; void *realloc(void *ptr, size_t size)
extern:000000000021B3D8                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:000000000021B3D8                                         ; DATA XREF: .got:realloc_ptr↑o
extern:000000000021B3E0 ; char *setlocale(int category, const char *locale)
extern:000000000021B3E0                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:000000000021B3E0                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:000000000021B3E8                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:000000000021B3E8                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:000000000021B3F0                 extrn __gmpz_init_set_ui:near
extern:000000000021B3F0                                         ; CODE XREF: ___gmpz_init_set_ui↑j
extern:000000000021B3F0                                         ; DATA XREF: .got:__gmpz_init_set_ui_ptr↑o
extern:000000000021B3F8 ; wint_t btowc(int c)
extern:000000000021B3F8                 extrn btowc:near        ; CODE XREF: _btowc↑j
extern:000000000021B3F8                                         ; DATA XREF: .got:btowc_ptr↑o
extern:000000000021B400 ; void *mempcpy(void *dest, const void *src, size_t n)
extern:000000000021B400                 extrn mempcpy:near      ; CODE XREF: _mempcpy↑j
extern:000000000021B400                                         ; DATA XREF: .got:mempcpy_ptr↑o
extern:000000000021B408 ; void *memmove(void *dest, const void *src, size_t n)
extern:000000000021B408                 extrn memmove:near      ; CODE XREF: _memmove↑j
extern:000000000021B408                                         ; DATA XREF: .got:memmove_ptr↑o
extern:000000000021B410 ; void error(int status, int errnum, const char *format, ...)
extern:000000000021B410                 extrn error:near        ; CODE XREF: _error↑j
extern:000000000021B410                                         ; DATA XREF: .got:error_ptr↑o
extern:000000000021B418 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:000000000021B418                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:000000000021B418                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:000000000021B420                 extrn __gmpz_add:near   ; DATA XREF: .got:__gmpz_add_ptr↑o
extern:000000000021B428 ; wint_t towlower(wint_t wc)
extern:000000000021B428                 extrn towlower:near     ; CODE XREF: _towlower↑j
extern:000000000021B428                                         ; DATA XREF: .got:towlower_ptr↑o
extern:000000000021B430 ; wint_t towupper(wint_t wc)
extern:000000000021B430                 extrn towupper:near     ; CODE XREF: _towupper↑j
extern:000000000021B430                                         ; DATA XREF: .got:towupper_ptr↑o
extern:000000000021B438                 extrn __gmpz_init_set_str:near
extern:000000000021B438                                         ; CODE XREF: ___gmpz_init_set_str↑j
extern:000000000021B438                                         ; DATA XREF: .got:__gmpz_init_set_str_ptr↑o
extern:000000000021B440 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:000000000021B440                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:000000000021B440                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:000000000021B448 ; void __noreturn exit(int status)
extern:000000000021B448                 extrn exit:near         ; CODE XREF: _exit↑j
extern:000000000021B448                                         ; DATA XREF: .got:exit_ptr↑o
extern:000000000021B450 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:000000000021B450                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:000000000021B450                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:000000000021B458                 extrn __fprintf_chk:near
extern:000000000021B458                                         ; CODE XREF: ___fprintf_chk↑j
extern:000000000021B458                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:000000000021B460 ; int mbsinit(const mbstate_t *ps)
extern:000000000021B460                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:000000000021B460                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:000000000021B468 ; int iswprint(wint_t wc)
extern:000000000021B468                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:000000000021B468                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:000000000021B470 ; int __fastcall __cxa_finalize(void *)
extern:000000000021B470                 extrn __imp___cxa_finalize:near ; weak
extern:000000000021B470                                         ; CODE XREF: __cxa_finalize↑j
extern:000000000021B470                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:000000000021B478 ; const __int32_t **_ctype_tolower_loc(void)
extern:000000000021B478                 extrn __ctype_tolower_loc:near
extern:000000000021B478                                         ; CODE XREF: ___ctype_tolower_loc↑j
extern:000000000021B478                                         ; DATA XREF: .got:__ctype_tolower_loc_ptr↑o
extern:000000000021B480 ; const unsigned __int16 **_ctype_b_loc(void)
extern:000000000021B480                 extrn __ctype_b_loc:near
extern:000000000021B480                                         ; CODE XREF: ___ctype_b_loc↑j
extern:000000000021B480                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:000000000021B488                 extrn _ITM_deregisterTMCloneTable ; weak
extern:000000000021B488                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:000000000021B490                 extrn __gmon_start__:near ; weak
extern:000000000021B490                                         ; CODE XREF: _init_proc+10↑p
extern:000000000021B490                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:000000000021B498                 extrn _ITM_registerTMCloneTable ; weak
extern:000000000021B498                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:000000000021B498
extern:000000000021B498
extern:000000000021B498                 end start
