LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 1179E4BA221E3C245CB88F8D6043B2500730DE93EAB34A20BADD64DAD057B44A
LOAD:0000000000000000 ; Input MD5    : 3B6FB66F9978D453E3E626909C5B814E
LOAD:0000000000000000 ; Input CRC32  : EEF60E16
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/users
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'users.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'long-options.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'readutmp.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 24D30h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 66F0h                ; Size in file image
LOAD:00000000000000D8                 dq 66F0h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B70h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B70h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 510h                 ; Size in file image
LOAD:0000000000000110                 dq 6C8h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C38h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C38h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5890h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5890h                ; Physical address
LOAD:00000000000001B0                 dq 26Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 26Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B70h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B70h              ; Physical address
LOAD:0000000000000220                 dq 490h                 ; Size in file image
LOAD:0000000000000228                 dq 490h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 5Ch, 0Fh, 0A3h, 30h, 0AFh, 0E7h, 15h, 0C5h, 0DFh, 9Dh ; Desc
LOAD:0000000000000284                 db 0D0h, 0Ch, 0B9h, 57h, 43h, 3Ah, 0E6h, 0F5h, 9Bh, 8Fh
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 36h
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121801200041C906h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 36h, 37h, 3Dh
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 12F7B3C0h, 1C8BF239h, 12F7C433h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aUtmpxname - offset byte_8B0, 12h, 0, 0, \ ; "utmpxname"
LOAD:00000000000002F8                            offset dword_0, 0>
LOAD:0000000000000310                 Elf64_Sym <offset aFree - offset byte_8B0, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aAbort - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000328                            0>
LOAD:0000000000000340                 Elf64_Sym <offset aErrnoLocation - offset byte_8B0, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aStrncpy - offset byte_8B0, 12h, 0, 0, \ ; "strncpy"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aStrncmp - offset byte_8B0, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000370                            offset dword_0, 0>
LOAD:0000000000000388                 Elf64_Sym <offset aItmDeregistert - offset byte_8B0, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aExit - offset byte_8B0, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:00000000000003A0                            0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFpending - offset byte_8B0, 12h, 0, 0, \ ; "__fpending"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aQsort - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "qsort"
LOAD:00000000000003D0                            0>
LOAD:00000000000003E8                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_8B0, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aEndutxent - offset byte_8B0, 12h, 0, 0, \ ; "endutxent"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aFclose - offset byte_8B0, 12h, 0, 0, \ ; "fclose"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aBindtextdomain - offset byte_8B0, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aDcgettext - offset byte_8B0, 12h, 0, 0, \ ; "dcgettext"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_8B0, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrlen - offset byte_8B0, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aStackChkFail - offset byte_8B0, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000490                            offset dword_0, 0>
LOAD:00000000000004A8                 Elf64_Sym <offset aGetoptLong - offset byte_8B0, 12h, 0, 0, \ ; "getopt_long"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aMbrtowc - offset byte_8B0, 12h, 0, 0, \ ; "mbrtowc"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aOverflow - offset byte_8B0, 12h, 0, 0, \ ; "__overflow"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aStrrchr - offset byte_8B0, 12h, 0, 0, \ ; "strrchr"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aLseek - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000508                            0>
LOAD:0000000000000520                 Elf64_Sym <offset aMemset - offset byte_8B0, 12h, 0, 0, \ ; "memset"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aLibcStartMain - offset byte_8B0, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aMemcmp - offset byte_8B0, 12h, 0, 0, \ ; "memcmp"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aFputsUnlocked - offset byte_8B0, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aCalloc - offset byte_8B0, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aStrcmp - offset byte_8B0, 12h, 0, 0, \ ; "strcmp"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aSetutxent - offset byte_8B0, 12h, 0, 0, \ ; "setutxent"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aGmonStart - offset byte_8B0, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aMemcpy - offset byte_8B0, 12h, 0, 0, \ ; "memcpy"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aKill - offset byte_8B0, 12h, 0, 0, offset dword_0, \ ; "kill"
LOAD:00000000000005F8                            0>
LOAD:0000000000000610                 Elf64_Sym <offset aFileno - offset byte_8B0, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000610                            offset dword_0, 0>
LOAD:0000000000000628                 Elf64_Sym <offset aMalloc - offset byte_8B0, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aFflush - offset byte_8B0, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aNlLanginfo - offset byte_8B0, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFreading - offset byte_8B0, 12h, 0, 0, \ ; "__freading"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aRealloc - offset byte_8B0, 12h, 0, 0, \ ; "realloc"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aSetlocale - offset byte_8B0, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aPrintfChk - offset byte_8B0, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aGetutxent - offset byte_8B0, 12h, 0, 0, \ ; "getutxent"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aError - offset byte_8B0, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:00000000000006E8                            0>
LOAD:0000000000000700                 Elf64_Sym <offset aFseeko - offset byte_8B0, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aCxaAtexit - offset byte_8B0, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000718                            offset dword_0, 0>
LOAD:0000000000000730                 Elf64_Sym <offset aExit+1 - offset byte_8B0, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000730                            offset dword_0, 0>
LOAD:0000000000000748                 Elf64_Sym <offset aFwrite - offset byte_8B0, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000748                            offset dword_0, 0>
LOAD:0000000000000760                 Elf64_Sym <offset aFprintfChk - offset byte_8B0, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000760                            offset dword_0, 0>
LOAD:0000000000000778                 Elf64_Sym <offset aItmRegistertmc - offset byte_8B0, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:0000000000000778                            offset dword_0, 0>
LOAD:0000000000000790                 Elf64_Sym <offset aMbsinit - offset byte_8B0, 12h, 0, 0, \ ; "mbsinit"
LOAD:0000000000000790                            offset dword_0, 0>
LOAD:00000000000007A8                 Elf64_Sym <offset aIswprint - offset byte_8B0, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000007A8                            offset dword_0, 0>
LOAD:00000000000007C0                 Elf64_Sym <offset aCxaFinalize - offset byte_8B0, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000007C0                            offset dword_0, 0>
LOAD:00000000000007D8                 Elf64_Sym <offset aCtypeBLoc - offset byte_8B0, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:00000000000007D8                            offset dword_0, 0>
LOAD:00000000000007F0                 Elf64_Sym <offset aStdout - offset byte_8B0, 11h, 0, 19h, \ ; "stdout"
LOAD:00000000000007F0                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000808                 Elf64_Sym <offset aProgname - offset byte_8B0, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000808                            offset __bss_start, 8>
LOAD:0000000000000820                 Elf64_Sym <offset aProgramInvocat - offset byte_8B0, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000820                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000838                 Elf64_Sym <offset aPrognameFull - offset byte_8B0, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000838                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000850                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_8B0, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000850                            offset __bss_start, 8>
LOAD:0000000000000868                 Elf64_Sym <offset aOpterr - offset byte_8B0, 11h, 0, 19h, \ ; "opterr"
LOAD:0000000000000868                            offset opterr@@GLIBC_2_2_5, 4>
LOAD:0000000000000880                 Elf64_Sym <offset aStderr - offset byte_8B0, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000880                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:0000000000000898                 Elf64_Sym <offset aOptind - offset byte_8B0, 11h, 0, 19h, \ ; "optind"
LOAD:0000000000000898                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000008B0 ; ELF String Table
LOAD:00000000000008B0 byte_8B0        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000008B0                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000008B1 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000BF8↓o
LOAD:00000000000008BB aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000008C2 aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008CF aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:00000000000008D9 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:00000000000008E1 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000370↑o
LOAD:00000000000008E9 aOptind         db 'optind',0           ; DATA XREF: LOAD:0000000000000898↑o
LOAD:00000000000008F0 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000008F8 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000902 aError          db 'error',0            ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000908 aStrncpy        db 'strncpy',0          ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000910 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000490↑o
LOAD:0000000000000921 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:000000000000092A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:0000000000000688↑o
LOAD:0000000000000932 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000328↑o
LOAD:0000000000000938 aExit           db '_exit',0            ; DATA XREF: LOAD:00000000000003A0↑o
LOAD:0000000000000938                                         ; LOAD:0000000000000730↑o
LOAD:000000000000093E aKill           db 'kill',0             ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:0000000000000943 aProgramInvocat db 'program_invocation_name',0
LOAD:0000000000000943                                         ; DATA XREF: LOAD:0000000000000820↑o
LOAD:000000000000095B aSetutxent      db 'setutxent',0        ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:0000000000000965 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000965                                         ; DATA XREF: LOAD:0000000000000460↑o
LOAD:000000000000097C aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:0000000000000983 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000478↑o
LOAD:000000000000098A aMemset         db 'memset',0           ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000991 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000340↑o
LOAD:00000000000009A2 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:00000000000009A9 aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009B7 aStdout         db 'stdout',0           ; DATA XREF: LOAD:00000000000007F0↑o
LOAD:00000000000009BE aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000508↑o
LOAD:00000000000009C4 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:00000000000009CB aFclose         db 'fclose',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:00000000000009D2 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:00000000000009D9 aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:0000000000000790↑o
LOAD:00000000000009E1 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000658↑o
LOAD:00000000000009ED aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:00000000000007D8↑o
LOAD:00000000000009FB aFreading       db '__freading',0       ; DATA XREF: LOAD:0000000000000670↑o
LOAD:0000000000000A06 aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000880↑o
LOAD:0000000000000A0D aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:0000000000000A19 aUtmpxname      db 'utmpxname',0        ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:0000000000000A23 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000A2A aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000A31 aFpending       db '__fpending',0       ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:0000000000000A3C aEndutxent      db 'endutxent',0        ; DATA XREF: LOAD:0000000000000400↑o
LOAD:0000000000000A46 aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:0000000000000A46                                         ; DATA XREF: LOAD:0000000000000850↑o
LOAD:0000000000000A64 aQsort          db 'qsort',0            ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000A6A aGetutxent      db 'getutxent',0        ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:0000000000000A74 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000A83 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000A83                                         ; LOAD:00000000000003E8↑o
LOAD:0000000000000A92 aOpterr         db 'opterr',0           ; DATA XREF: LOAD:0000000000000868↑o
LOAD:0000000000000A99 aStrcmp         db 'strcmp',0           ; DATA XREF: LOAD:0000000000000598↑o
LOAD:0000000000000AA0 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000AA0                                         ; DATA XREF: LOAD:0000000000000538↑o
LOAD:0000000000000AB2 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000700↑o
LOAD:0000000000000AB9 aOverflow       db '__overflow',0       ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:0000000000000AC4 aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:0000000000000568↑o
LOAD:0000000000000AD3 aFree           db 'free',0             ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000AD8 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000808↑o
LOAD:0000000000000AE3 aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000838↑o
LOAD:0000000000000AF3 aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000718↑o
LOAD:0000000000000B00 aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000C08↓o
LOAD:0000000000000B0A aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000C18↓o
LOAD:0000000000000B16 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000C28↓o
LOAD:0000000000000B21 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000C38↓o
LOAD:0000000000000B2B aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000C48↓o
LOAD:0000000000000B37 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000B37                                         ; DATA XREF: LOAD:0000000000000388↑o
LOAD:0000000000000B53 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000B62 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000B62                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000B7C ; ELF GNU Symbol Version Table
LOAD:0000000000000B7C                 dw 0
LOAD:0000000000000B7E                 dw 2                    ; utmpxname@@GLIBC_2.2.5
LOAD:0000000000000B80                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000B82                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000B84                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000B86                 dw 2                    ; strncpy@@GLIBC_2.2.5
LOAD:0000000000000B88                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000B8A                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000B8C                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000B8E                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000B90                 dw 2                    ; qsort@@GLIBC_2.2.5
LOAD:0000000000000B92                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000B94                 dw 2                    ; endutxent@@GLIBC_2.2.5
LOAD:0000000000000B96                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000B98                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000B9A                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000B9C                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000B9E                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000BA0                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000BA2                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000BA4                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000BA6                 dw 2                    ; __overflow@@GLIBC_2.2.5
LOAD:0000000000000BA8                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000BAA                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000BAC                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000BAE                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000BB0                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000BB2                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000BB4                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000BB6                 dw 2                    ; strcmp@@GLIBC_2.2.5
LOAD:0000000000000BB8                 dw 2                    ; setutxent@@GLIBC_2.2.5
LOAD:0000000000000BBA                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000BBC                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000BBE                 dw 2                    ; kill@@GLIBC_2.2.5
LOAD:0000000000000BC0                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000BC2                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000BC4                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000BC6                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000BC8                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000BCA                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000BCC                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000BCE                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000BD0                 dw 2                    ; getutxent@@GLIBC_2.2.5
LOAD:0000000000000BD2                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000BD4                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000BD6                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000BD8                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000BDA                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000BDC                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000BDE                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000BE0                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000BE2                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000BE4                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000BE6                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000BE8                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000BEA                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000BEC                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000BEE                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000BF0                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000BF2                 dw 2                    ; opterr@@GLIBC_2.2.5
LOAD:0000000000000BF4                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000BF6                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000BF8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000BF8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_8B0, 10h, 0> ; "libc.so.6"
LOAD:0000000000000C08                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_8B0, \ ; "GLIBC_2.3"
LOAD:0000000000000C08                                10h>
LOAD:0000000000000C18                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_8B0, \ ; "GLIBC_2.3.4"
LOAD:0000000000000C18                                10h>
LOAD:0000000000000C28                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_8B0, \ ; "GLIBC_2.14"
LOAD:0000000000000C28                                10h>
LOAD:0000000000000C38                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_8B0, \ ; "GLIBC_2.4"
LOAD:0000000000000C38                                10h>
LOAD:0000000000000C48                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_8B0, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000C58 ; ELF RELA Relocation Table
LOAD:0000000000000C58                 Elf64_Rela <206B70h, 8, 18E0h> ; R_X86_64_RELATIVE +18E0h
LOAD:0000000000000C70                 Elf64_Rela <206B78h, 8, 18A0h> ; R_X86_64_RELATIVE +18A0h
LOAD:0000000000000C88                 Elf64_Rela <206B80h, 8, 4FD5h> ; R_X86_64_RELATIVE +4FD5h
LOAD:0000000000000CA0                 Elf64_Rela <206BA0h, 8, 4FDAh> ; R_X86_64_RELATIVE +4FDAh
LOAD:0000000000000CB8                 Elf64_Rela <206BE0h, 8, 5041h> ; R_X86_64_RELATIVE +5041h
LOAD:0000000000000CD0                 Elf64_Rela <206BE8h, 8, 5049h> ; R_X86_64_RELATIVE +5049h
LOAD:0000000000000CE8                 Elf64_Rela <206BF0h, 8, 504Fh> ; R_X86_64_RELATIVE +504Fh
LOAD:0000000000000D00                 Elf64_Rela <206BF8h, 8, 505Ch> ; R_X86_64_RELATIVE +505Ch
LOAD:0000000000000D18                 Elf64_Rela <206C00h, 8, 5069h> ; R_X86_64_RELATIVE +5069h
LOAD:0000000000000D30                 Elf64_Rela <206C08h, 8, 507Dh> ; R_X86_64_RELATIVE +507Dh
LOAD:0000000000000D48                 Elf64_Rela <206C10h, 8, 507Fh> ; R_X86_64_RELATIVE +507Fh
LOAD:0000000000000D60                 Elf64_Rela <206C18h, 8, 5062h> ; R_X86_64_RELATIVE +5062h
LOAD:0000000000000D78                 Elf64_Rela <206C20h, 8, 4DD8h> ; R_X86_64_RELATIVE +4DD8h
LOAD:0000000000000D90                 Elf64_Rela <206C28h, 8, 5087h> ; R_X86_64_RELATIVE +5087h
LOAD:0000000000000DA8                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000DC0                 Elf64_Rela <207010h, 8, 4FBBh> ; R_X86_64_RELATIVE +4FBBh
LOAD:0000000000000DD8                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000DF0                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000E08                 Elf64_Rela <206FC0h, 700000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000E20                 Elf64_Rela <206FC8h, 1900000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000E38                 Elf64_Rela <206FD0h, 1F00000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000E50                 Elf64_Rela <206FD8h, 3100000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000E68                 Elf64_Rela <206FE0h, 3400000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000E80                 Elf64_Rela <207080h, 3700000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000E98                 Elf64_Rela <207088h, 3600000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000EB0                 Elf64_Rela <207090h, 3D00000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000EC8                 Elf64_Rela <207098h, 3900000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000EE0                 Elf64_Rela <2070A0h, 3B00000005h, 0> ; R_X86_64_COPY opterr
LOAD:0000000000000EF8                 Elf64_Rela <2070C0h, 3C00000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000F10 ; ELF JMPREL Relocation Table
LOAD:0000000000000F10                 Elf64_Rela <206E40h, 100000007h, 0> ; R_X86_64_JUMP_SLOT utmpxname
LOAD:0000000000000F28                 Elf64_Rela <206E48h, 200000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000F40                 Elf64_Rela <206E50h, 300000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000F58                 Elf64_Rela <206E58h, 400000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000F70                 Elf64_Rela <206E60h, 500000007h, 0> ; R_X86_64_JUMP_SLOT strncpy
LOAD:0000000000000F88                 Elf64_Rela <206E68h, 600000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000FA0                 Elf64_Rela <206E70h, 800000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000FB8                 Elf64_Rela <206E78h, 900000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000FD0                 Elf64_Rela <206E80h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT qsort
LOAD:0000000000000FE8                 Elf64_Rela <206E88h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000001000                 Elf64_Rela <206E90h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT endutxent
LOAD:0000000000001018                 Elf64_Rela <206E98h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000001030                 Elf64_Rela <206EA0h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000001048                 Elf64_Rela <206EA8h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000001060                 Elf64_Rela <206EB0h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000001078                 Elf64_Rela <206EB8h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000001090                 Elf64_Rela <206EC0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:00000000000010A8                 Elf64_Rela <206EC8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:00000000000010C0                 Elf64_Rela <206ED0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:00000000000010D8                 Elf64_Rela <206ED8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT __overflow
LOAD:00000000000010F0                 Elf64_Rela <206EE0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000001108                 Elf64_Rela <206EE8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000001120                 Elf64_Rela <206EF0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001138                 Elf64_Rela <206EF8h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001150                 Elf64_Rela <206F00h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001168                 Elf64_Rela <206F08h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001180                 Elf64_Rela <206F10h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
LOAD:0000000000001198                 Elf64_Rela <206F18h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT setutxent
LOAD:00000000000011B0                 Elf64_Rela <206F20h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:00000000000011C8                 Elf64_Rela <206F28h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT kill
LOAD:00000000000011E0                 Elf64_Rela <206F30h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:00000000000011F8                 Elf64_Rela <206F38h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001210                 Elf64_Rela <206F40h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:0000000000001228                 Elf64_Rela <206F48h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:0000000000001240                 Elf64_Rela <206F50h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:0000000000001258                 Elf64_Rela <206F58h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:0000000000001270                 Elf64_Rela <206F60h, 2800000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001288                 Elf64_Rela <206F68h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:00000000000012A0                 Elf64_Rela <206F70h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT getutxent
LOAD:00000000000012B8                 Elf64_Rela <206F78h, 2B00000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:00000000000012D0                 Elf64_Rela <206F80h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:00000000000012E8                 Elf64_Rela <206F88h, 2D00000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001300                 Elf64_Rela <206F90h, 2E00000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001318                 Elf64_Rela <206F98h, 2F00000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:0000000000001330                 Elf64_Rela <206FA0h, 3000000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:0000000000001348                 Elf64_Rela <206FA8h, 3200000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:0000000000001360                 Elf64_Rela <206FB0h, 3300000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:0000000000001378                 Elf64_Rela <206FB8h, 3500000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:0000000000001378 LOAD            ends
LOAD:0000000000001378
.init:0000000000001390 ; ===========================================================================
.init:0000000000001390
.init:0000000000001390 ; Segment type: Pure code
.init:0000000000001390 ; Segment permissions: Read/Execute
.init:0000000000001390 _init           segment dword public 'CODE' use64
.init:0000000000001390                 assume cs:_init
.init:0000000000001390                 ;org 1390h
.init:0000000000001390                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001390
.init:0000000000001390 ; =============== S U B R O U T I N E =======================================
.init:0000000000001390
.init:0000000000001390
.init:0000000000001390                 public _init_proc
.init:0000000000001390 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001390                 sub     rsp, 8          ; _init
.init:0000000000001394                 mov     rax, cs:__gmon_start___ptr
.init:000000000000139B                 test    rax, rax
.init:000000000000139E                 jz      short loc_13A2
.init:00000000000013A0                 call    rax ; __gmon_start__
.init:00000000000013A2
.init:00000000000013A2 loc_13A2:                               ; CODE XREF: _init_proc+E↑j
.init:00000000000013A2                 add     rsp, 8
.init:00000000000013A6                 retn
.init:00000000000013A6 _init_proc      endp
.init:00000000000013A6
.init:00000000000013A6 _init           ends
.init:00000000000013A6
LOAD:00000000000013A7 ; ===========================================================================
LOAD:00000000000013A7
LOAD:00000000000013A7 ; Segment type: Pure code
LOAD:00000000000013A7 ; Segment permissions: Read/Execute
LOAD:00000000000013A7 LOAD            segment byte public 'CODE' use64
LOAD:00000000000013A7                 assume cs:LOAD
LOAD:00000000000013A7                 ;org 13A7h
LOAD:00000000000013A7                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000013A7                 align 10h
LOAD:00000000000013A7 LOAD            ends
LOAD:00000000000013A7
.plt:00000000000013B0 ; ===========================================================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Segment type: Pure code
.plt:00000000000013B0 ; Segment permissions: Read/Execute
.plt:00000000000013B0 _plt            segment para public 'CODE' use64
.plt:00000000000013B0                 assume cs:_plt
.plt:00000000000013B0                 ;org 13B0h
.plt:00000000000013B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0
.plt:00000000000013B0 sub_13B0        proc near               ; CODE XREF: .plt:00000000000013CB↓j
.plt:00000000000013B0                                         ; .plt:00000000000013DB↓j ...
.plt:00000000000013B0 ; __unwind {
.plt:00000000000013B0                 push    cs:qword_206E30
.plt:00000000000013B6                 jmp     cs:qword_206E38
.plt:00000000000013B6 sub_13B0        endp
.plt:00000000000013B6
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013BC                 align 20h
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; int utmpxname(const char *file)
.plt:00000000000013C0 _utmpxname      proc near               ; CODE XREF: read_utmp+2C↓p
.plt:00000000000013C0                 jmp     cs:utmpxname_ptr
.plt:00000000000013C0 _utmpxname      endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    0
.plt:00000000000013CB                 jmp     sub_13B0
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; void free(void *ptr)
.plt:00000000000013D0 _free           proc near               ; CODE XREF: users+138↓p
.plt:00000000000013D0                                         ; users+145↓p ...
.plt:00000000000013D0                 jmp     cs:free_ptr
.plt:00000000000013D0 _free           endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1
.plt:00000000000013DB                 jmp     sub_13B0
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: noreturn thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; void __noreturn abort(void)
.plt:00000000000013E0 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:00000000000013E0                                         ; quotearg_buffer_restyled:def_23B1↓p ...
.plt:00000000000013E0                 jmp     cs:abort_ptr
.plt:00000000000013E0 _abort          endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    2
.plt:00000000000013EB                 jmp     sub_13B0
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; int *__errno_location(void)
.plt:00000000000013F0 ___errno_location proc near             ; CODE XREF: users+1D0↓p
.plt:00000000000013F0                                         ; close_stdout+16↓p ...
.plt:00000000000013F0                 jmp     cs:__errno_location_ptr
.plt:00000000000013F0 ___errno_location endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    3
.plt:00000000000013FB                 jmp     sub_13B0
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ; char *strncpy(char *dest, const char *src, size_t n)
.plt:0000000000001400 _strncpy        proc near               ; CODE XREF: extract_trimmed_name+22↓p
.plt:0000000000001400                 jmp     cs:strncpy_ptr
.plt:0000000000001400 _strncpy        endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    4
.plt:000000000000140B                 jmp     sub_13B0
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001410 _strncmp        proc near               ; CODE XREF: usage+20C↓p
.plt:0000000000001410                                         ; usage+2CD↓p
.plt:0000000000001410                 jmp     cs:strncmp_ptr
.plt:0000000000001410 _strncmp        endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    5
.plt:000000000000141B                 jmp     sub_13B0
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: noreturn thunk
.plt:0000000000001420
.plt:0000000000001420 ; void __noreturn _exit(int status)
.plt:0000000000001420 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001420                 jmp     cs:_exit_ptr
.plt:0000000000001420 __exit          endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    6
.plt:000000000000142B                 jmp     sub_13B0
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; size_t __fpending(FILE *fp)
.plt:0000000000001430 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001430                 jmp     cs:__fpending_ptr
.plt:0000000000001430 ___fpending     endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    7
.plt:000000000000143B                 jmp     sub_13B0
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: thunk
.plt:0000000000001440
.plt:0000000000001440 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
.plt:0000000000001440 _qsort          proc near               ; CODE XREF: users+C3↓p
.plt:0000000000001440                                         ; users+1A3↓p
.plt:0000000000001440                 jmp     cs:qsort_ptr
.plt:0000000000001440 _qsort          endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    8
.plt:000000000000144B                 jmp     sub_13B0
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; char *textdomain(const char *domainname)
.plt:0000000000001450 _textdomain     proc near               ; CODE XREF: main+3E↓p
.plt:0000000000001450                 jmp     cs:textdomain_ptr
.plt:0000000000001450 _textdomain     endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    9
.plt:000000000000145B                 jmp     sub_13B0
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ; void endutxent(void)
.plt:0000000000001460 _endutxent      proc near               ; CODE XREF: read_utmp:loc_4911↓p
.plt:0000000000001460                 jmp     cs:endutxent_ptr
.plt:0000000000001460 _endutxent      endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    0Ah
.plt:000000000000146B                 jmp     sub_13B0
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int fclose(FILE *stream)
.plt:0000000000001470 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:0000000000001470                                         ; rpl_fclose+6B↓j
.plt:0000000000001470                 jmp     cs:fclose_ptr
.plt:0000000000001470 _fclose         endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    0Bh
.plt:000000000000147B                 jmp     sub_13B0
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:0000000000001480 _bindtextdomain proc near               ; CODE XREF: main+32↓p
.plt:0000000000001480                 jmp     cs:bindtextdomain_ptr
.plt:0000000000001480 _bindtextdomain endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    0Ch
.plt:000000000000148B                 jmp     sub_13B0
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:0000000000001490 _dcgettext      proc near               ; CODE XREF: main+E7↓p
.plt:0000000000001490                                         ; usage+38↓p ...
.plt:0000000000001490                 jmp     cs:dcgettext_ptr
.plt:0000000000001490 _dcgettext      endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    0Dh
.plt:000000000000149B                 jmp     sub_13B0
.plt:00000000000014A0
.plt:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014A0
.plt:00000000000014A0 ; Attributes: thunk
.plt:00000000000014A0
.plt:00000000000014A0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000014A0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000014A0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000014A0 ___ctype_get_mb_cur_max endp
.plt:00000000000014A0
.plt:00000000000014A6 ; ---------------------------------------------------------------------------
.plt:00000000000014A6                 push    0Eh
.plt:00000000000014AB                 jmp     sub_13B0
.plt:00000000000014B0
.plt:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014B0
.plt:00000000000014B0 ; Attributes: thunk
.plt:00000000000014B0
.plt:00000000000014B0 ; size_t strlen(const char *s)
.plt:00000000000014B0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000014B0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000014B0                 jmp     cs:strlen_ptr
.plt:00000000000014B0 _strlen         endp
.plt:00000000000014B0
.plt:00000000000014B6 ; ---------------------------------------------------------------------------
.plt:00000000000014B6                 push    0Fh
.plt:00000000000014BB                 jmp     sub_13B0
.plt:00000000000014C0
.plt:00000000000014C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014C0
.plt:00000000000014C0 ; Attributes: noreturn thunk
.plt:00000000000014C0
.plt:00000000000014C0 ___stack_chk_fail proc near             ; CODE XREF: users:loc_1AAA↓p
.plt:00000000000014C0                                         ; parse_long_options:loc_204A↓p ...
.plt:00000000000014C0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000014C0 ___stack_chk_fail endp
.plt:00000000000014C0
.plt:00000000000014C6 ; ---------------------------------------------------------------------------
.plt:00000000000014C6                 push    10h
.plt:00000000000014CB                 jmp     sub_13B0
.plt:00000000000014D0
.plt:00000000000014D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014D0
.plt:00000000000014D0 ; Attributes: thunk
.plt:00000000000014D0
.plt:00000000000014D0 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:00000000000014D0 _getopt_long    proc near               ; CODE XREF: parse_long_options+C6↓p
.plt:00000000000014D0                                         ; parse_gnu_standard_options_only+9A↓p
.plt:00000000000014D0                 jmp     cs:getopt_long_ptr
.plt:00000000000014D0 _getopt_long    endp
.plt:00000000000014D0
.plt:00000000000014D6 ; ---------------------------------------------------------------------------
.plt:00000000000014D6                 push    11h
.plt:00000000000014DB                 jmp     sub_13B0
.plt:00000000000014E0
.plt:00000000000014E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014E0
.plt:00000000000014E0 ; Attributes: thunk
.plt:00000000000014E0
.plt:00000000000014E0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:00000000000014E0 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:00000000000014E0                 jmp     cs:mbrtowc_ptr
.plt:00000000000014E0 _mbrtowc        endp
.plt:00000000000014E0
.plt:00000000000014E6 ; ---------------------------------------------------------------------------
.plt:00000000000014E6                 push    12h
.plt:00000000000014EB                 jmp     sub_13B0
.plt:00000000000014F0
.plt:00000000000014F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000014F0
.plt:00000000000014F0 ; Attributes: thunk
.plt:00000000000014F0
.plt:00000000000014F0 ; int __overflow(_IO_FILE *, int)
.plt:00000000000014F0 ___overflow     proc near               ; CODE XREF: users+18B↓p
.plt:00000000000014F0                 jmp     cs:__overflow_ptr
.plt:00000000000014F0 ___overflow     endp
.plt:00000000000014F0
.plt:00000000000014F6 ; ---------------------------------------------------------------------------
.plt:00000000000014F6                 push    13h
.plt:00000000000014FB                 jmp     sub_13B0
.plt:0000000000001500
.plt:0000000000001500 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001500
.plt:0000000000001500 ; Attributes: thunk
.plt:0000000000001500
.plt:0000000000001500 ; char *strrchr(const char *s, int c)
.plt:0000000000001500 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001500                 jmp     cs:strrchr_ptr
.plt:0000000000001500 _strrchr        endp
.plt:0000000000001500
.plt:0000000000001506 ; ---------------------------------------------------------------------------
.plt:0000000000001506                 push    14h
.plt:000000000000150B                 jmp     sub_13B0
.plt:0000000000001510
.plt:0000000000001510 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001510
.plt:0000000000001510 ; Attributes: thunk
.plt:0000000000001510
.plt:0000000000001510 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001510 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001510                                         ; rpl_fseeko+3B↓p
.plt:0000000000001510                 jmp     cs:lseek_ptr
.plt:0000000000001510 _lseek          endp
.plt:0000000000001510
.plt:0000000000001516 ; ---------------------------------------------------------------------------
.plt:0000000000001516                 push    15h
.plt:000000000000151B                 jmp     sub_13B0
.plt:0000000000001520
.plt:0000000000001520 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001520
.plt:0000000000001520 ; Attributes: thunk
.plt:0000000000001520
.plt:0000000000001520 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001520 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001520                                         ; xzalloc+12↓j
.plt:0000000000001520                 jmp     cs:memset_ptr
.plt:0000000000001520 _memset         endp
.plt:0000000000001520
.plt:0000000000001526 ; ---------------------------------------------------------------------------
.plt:0000000000001526                 push    16h
.plt:000000000000152B                 jmp     sub_13B0
.plt:0000000000001530
.plt:0000000000001530 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001530
.plt:0000000000001530 ; Attributes: thunk
.plt:0000000000001530
.plt:0000000000001530 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001530 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001530                 jmp     cs:memcmp_ptr
.plt:0000000000001530 _memcmp         endp
.plt:0000000000001530
.plt:0000000000001536 ; ---------------------------------------------------------------------------
.plt:0000000000001536                 push    17h
.plt:000000000000153B                 jmp     sub_13B0
.plt:0000000000001540
.plt:0000000000001540 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001540
.plt:0000000000001540 ; Attributes: thunk
.plt:0000000000001540
.plt:0000000000001540 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001540 _fputs_unlocked proc near               ; CODE XREF: users+F6↓p
.plt:0000000000001540                                         ; usage+CD↓p ...
.plt:0000000000001540                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001540 _fputs_unlocked endp
.plt:0000000000001540
.plt:0000000000001546 ; ---------------------------------------------------------------------------
.plt:0000000000001546                 push    18h
.plt:000000000000154B                 jmp     sub_13B0
.plt:0000000000001550
.plt:0000000000001550 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001550
.plt:0000000000001550 ; Attributes: thunk
.plt:0000000000001550
.plt:0000000000001550 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001550 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001550                 jmp     cs:calloc_ptr
.plt:0000000000001550 _calloc         endp
.plt:0000000000001550
.plt:0000000000001556 ; ---------------------------------------------------------------------------
.plt:0000000000001556                 push    19h
.plt:000000000000155B                 jmp     sub_13B0
.plt:0000000000001560
.plt:0000000000001560 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001560
.plt:0000000000001560 ; Attributes: thunk
.plt:0000000000001560
.plt:0000000000001560 ; int strcmp(const char *s1, const char *s2)
.plt:0000000000001560 _strcmp         proc near               ; CODE XREF: userid_compare+6↓j
.plt:0000000000001560                 jmp     cs:strcmp_ptr
.plt:0000000000001560 _strcmp         endp
.plt:0000000000001560
.plt:0000000000001566 ; ---------------------------------------------------------------------------
.plt:0000000000001566                 push    1Ah
.plt:000000000000156B                 jmp     sub_13B0
.plt:0000000000001570
.plt:0000000000001570 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001570
.plt:0000000000001570 ; Attributes: thunk
.plt:0000000000001570
.plt:0000000000001570 ; void setutxent(void)
.plt:0000000000001570 _setutxent      proc near               ; CODE XREF: read_utmp+31↓p
.plt:0000000000001570                 jmp     cs:setutxent_ptr
.plt:0000000000001570 _setutxent      endp
.plt:0000000000001570
.plt:0000000000001576 ; ---------------------------------------------------------------------------
.plt:0000000000001576                 push    1Bh
.plt:000000000000157B                 jmp     sub_13B0
.plt:0000000000001580
.plt:0000000000001580 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001580
.plt:0000000000001580 ; Attributes: thunk
.plt:0000000000001580
.plt:0000000000001580 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001580 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001580                 jmp     cs:memcpy_ptr
.plt:0000000000001580 _memcpy         endp
.plt:0000000000001580
.plt:0000000000001586 ; ---------------------------------------------------------------------------
.plt:0000000000001586                 push    1Ch
.plt:000000000000158B                 jmp     sub_13B0
.plt:0000000000001590
.plt:0000000000001590 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001590
.plt:0000000000001590 ; Attributes: thunk
.plt:0000000000001590
.plt:0000000000001590 ; int kill(__pid_t pid, int sig)
.plt:0000000000001590 _kill           proc near               ; CODE XREF: read_utmp+F7↓p
.plt:0000000000001590                 jmp     cs:kill_ptr
.plt:0000000000001590 _kill           endp
.plt:0000000000001590
.plt:0000000000001596 ; ---------------------------------------------------------------------------
.plt:0000000000001596                 push    1Dh
.plt:000000000000159B                 jmp     sub_13B0
.plt:00000000000015A0
.plt:00000000000015A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015A0
.plt:00000000000015A0 ; Attributes: thunk
.plt:00000000000015A0
.plt:00000000000015A0 ; int fileno(FILE *stream)
.plt:00000000000015A0 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:00000000000015A0                                         ; rpl_fclose+4B↓p ...
.plt:00000000000015A0                 jmp     cs:fileno_ptr
.plt:00000000000015A0 _fileno         endp
.plt:00000000000015A0
.plt:00000000000015A6 ; ---------------------------------------------------------------------------
.plt:00000000000015A6                 push    1Eh
.plt:00000000000015AB                 jmp     sub_13B0
.plt:00000000000015B0
.plt:00000000000015B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015B0
.plt:00000000000015B0 ; Attributes: thunk
.plt:00000000000015B0
.plt:00000000000015B0 ; void *malloc(size_t size)
.plt:00000000000015B0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000015B0                 jmp     cs:malloc_ptr
.plt:00000000000015B0 _malloc         endp
.plt:00000000000015B0
.plt:00000000000015B6 ; ---------------------------------------------------------------------------
.plt:00000000000015B6                 push    1Fh
.plt:00000000000015BB                 jmp     sub_13B0
.plt:00000000000015C0
.plt:00000000000015C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015C0
.plt:00000000000015C0 ; Attributes: thunk
.plt:00000000000015C0
.plt:00000000000015C0 ; int fflush(FILE *stream)
.plt:00000000000015C0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000015C0                                         ; rpl_fflush+3B↓j
.plt:00000000000015C0                 jmp     cs:fflush_ptr
.plt:00000000000015C0 _fflush         endp
.plt:00000000000015C0
.plt:00000000000015C6 ; ---------------------------------------------------------------------------
.plt:00000000000015C6                 push    20h ; ' '
.plt:00000000000015CB                 jmp     sub_13B0
.plt:00000000000015D0
.plt:00000000000015D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015D0
.plt:00000000000015D0 ; Attributes: thunk
.plt:00000000000015D0
.plt:00000000000015D0 ; char *nl_langinfo(nl_item item)
.plt:00000000000015D0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000015D0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000015D0 _nl_langinfo    endp
.plt:00000000000015D0
.plt:00000000000015D6 ; ---------------------------------------------------------------------------
.plt:00000000000015D6                 push    21h ; '!'
.plt:00000000000015DB                 jmp     sub_13B0
.plt:00000000000015E0
.plt:00000000000015E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015E0
.plt:00000000000015E0 ; Attributes: thunk
.plt:00000000000015E0
.plt:00000000000015E0 ; int __freading(FILE *fp)
.plt:00000000000015E0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000015E0                                         ; rpl_fflush+9↓p
.plt:00000000000015E0                 jmp     cs:__freading_ptr
.plt:00000000000015E0 ___freading     endp
.plt:00000000000015E0
.plt:00000000000015E6 ; ---------------------------------------------------------------------------
.plt:00000000000015E6                 push    22h ; '"'
.plt:00000000000015EB                 jmp     sub_13B0
.plt:00000000000015F0
.plt:00000000000015F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000015F0
.plt:00000000000015F0 ; Attributes: thunk
.plt:00000000000015F0
.plt:00000000000015F0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000015F0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000015F0                 jmp     cs:realloc_ptr
.plt:00000000000015F0 _realloc        endp
.plt:00000000000015F0
.plt:00000000000015F6 ; ---------------------------------------------------------------------------
.plt:00000000000015F6                 push    23h ; '#'
.plt:00000000000015FB                 jmp     sub_13B0
.plt:0000000000001600
.plt:0000000000001600 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001600
.plt:0000000000001600 ; Attributes: thunk
.plt:0000000000001600
.plt:0000000000001600 ; char *setlocale(int category, const char *locale)
.plt:0000000000001600 _setlocale      proc near               ; CODE XREF: main+1F↓p
.plt:0000000000001600                                         ; usage+1F3↓p ...
.plt:0000000000001600                 jmp     cs:setlocale_ptr
.plt:0000000000001600 _setlocale      endp
.plt:0000000000001600
.plt:0000000000001606 ; ---------------------------------------------------------------------------
.plt:0000000000001606                 push    24h ; '$'
.plt:000000000000160B                 jmp     sub_13B0
.plt:0000000000001610
.plt:0000000000001610 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001610
.plt:0000000000001610 ; Attributes: thunk
.plt:0000000000001610
.plt:0000000000001610 ___printf_chk   proc near               ; CODE XREF: usage+78↓p
.plt:0000000000001610                                         ; usage+A8↓p ...
.plt:0000000000001610                 jmp     cs:__printf_chk_ptr
.plt:0000000000001610 ___printf_chk   endp
.plt:0000000000001610
.plt:0000000000001616 ; ---------------------------------------------------------------------------
.plt:0000000000001616                 push    25h ; '%'
.plt:000000000000161B                 jmp     sub_13B0
.plt:0000000000001620
.plt:0000000000001620 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001620
.plt:0000000000001620 ; Attributes: thunk
.plt:0000000000001620
.plt:0000000000001620 ; struct utmpx *getutxent(void)
.plt:0000000000001620 _getutxent      proc near               ; CODE XREF: read_utmp:loc_4896↓p
.plt:0000000000001620                                         ; read_utmp+A4↓p
.plt:0000000000001620                 jmp     cs:getutxent_ptr
.plt:0000000000001620 _getutxent      endp
.plt:0000000000001620
.plt:0000000000001626 ; ---------------------------------------------------------------------------
.plt:0000000000001626                 push    26h ; '&'
.plt:000000000000162B                 jmp     sub_13B0
.plt:0000000000001630
.plt:0000000000001630 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001630
.plt:0000000000001630 ; Attributes: thunk
.plt:0000000000001630
.plt:0000000000001630 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001630 _error          proc near               ; CODE XREF: main+F8↓p
.plt:0000000000001630                                         ; users+1E8↓p ...
.plt:0000000000001630                 jmp     cs:error_ptr
.plt:0000000000001630 _error          endp
.plt:0000000000001630
.plt:0000000000001636 ; ---------------------------------------------------------------------------
.plt:0000000000001636                 push    27h ; '''
.plt:000000000000163B                 jmp     sub_13B0
.plt:0000000000001640
.plt:0000000000001640 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001640
.plt:0000000000001640 ; Attributes: thunk
.plt:0000000000001640
.plt:0000000000001640 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001640 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_4BDA↓j
.plt:0000000000001640                 jmp     cs:fseeko_ptr
.plt:0000000000001640 _fseeko         endp
.plt:0000000000001640
.plt:0000000000001646 ; ---------------------------------------------------------------------------
.plt:0000000000001646                 push    28h ; '('
.plt:000000000000164B                 jmp     sub_13B0
.plt:0000000000001650
.plt:0000000000001650 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001650
.plt:0000000000001650 ; Attributes: thunk
.plt:0000000000001650
.plt:0000000000001650 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001650 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001650                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001650 ___cxa_atexit   endp
.plt:0000000000001650
.plt:0000000000001656 ; ---------------------------------------------------------------------------
.plt:0000000000001656                 push    29h ; ')'
.plt:000000000000165B                 jmp     sub_13B0
.plt:0000000000001660
.plt:0000000000001660 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001660
.plt:0000000000001660 ; Attributes: noreturn thunk
.plt:0000000000001660
.plt:0000000000001660 ; void __noreturn exit(int status)
.plt:0000000000001660 _exit           proc near               ; CODE XREF: usage+58↓p
.plt:0000000000001660                                         ; parse_long_options+122↓p ...
.plt:0000000000001660                 jmp     cs:exit_ptr
.plt:0000000000001660 _exit           endp
.plt:0000000000001660
.plt:0000000000001666 ; ---------------------------------------------------------------------------
.plt:0000000000001666                 push    2Ah ; '*'
.plt:000000000000166B                 jmp     sub_13B0
.plt:0000000000001670
.plt:0000000000001670 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001670
.plt:0000000000001670 ; Attributes: thunk
.plt:0000000000001670
.plt:0000000000001670 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001670 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001670                 jmp     cs:fwrite_ptr
.plt:0000000000001670 _fwrite         endp
.plt:0000000000001670
.plt:0000000000001676 ; ---------------------------------------------------------------------------
.plt:0000000000001676                 push    2Bh ; '+'
.plt:000000000000167B                 jmp     sub_13B0
.plt:0000000000001680
.plt:0000000000001680 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001680
.plt:0000000000001680 ; Attributes: thunk
.plt:0000000000001680
.plt:0000000000001680 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001680                                         ; version_etc_arn+37↓p ...
.plt:0000000000001680                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001680 ___fprintf_chk  endp
.plt:0000000000001680
.plt:0000000000001686 ; ---------------------------------------------------------------------------
.plt:0000000000001686                 push    2Ch ; ','
.plt:000000000000168B                 jmp     sub_13B0
.plt:0000000000001690
.plt:0000000000001690 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001690
.plt:0000000000001690 ; Attributes: thunk
.plt:0000000000001690
.plt:0000000000001690 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001690 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001690                 jmp     cs:mbsinit_ptr
.plt:0000000000001690 _mbsinit        endp
.plt:0000000000001690
.plt:0000000000001696 ; ---------------------------------------------------------------------------
.plt:0000000000001696                 push    2Dh ; '-'
.plt:000000000000169B                 jmp     sub_13B0
.plt:00000000000016A0
.plt:00000000000016A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016A0
.plt:00000000000016A0 ; Attributes: thunk
.plt:00000000000016A0
.plt:00000000000016A0 ; int iswprint(wint_t wc)
.plt:00000000000016A0 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:00000000000016A0                 jmp     cs:iswprint_ptr
.plt:00000000000016A0 _iswprint       endp
.plt:00000000000016A0
.plt:00000000000016A6 ; ---------------------------------------------------------------------------
.plt:00000000000016A6                 push    2Eh ; '.'
.plt:00000000000016AB                 jmp     sub_13B0
.plt:00000000000016B0
.plt:00000000000016B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000016B0
.plt:00000000000016B0 ; Attributes: thunk
.plt:00000000000016B0
.plt:00000000000016B0 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:00000000000016B0 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:00000000000016B0                 jmp     cs:__ctype_b_loc_ptr
.plt:00000000000016B0 ___ctype_b_loc  endp
.plt:00000000000016B0
.plt:00000000000016B6 ; ---------------------------------------------------------------------------
.plt:00000000000016B6                 push    2Fh ; '/'
.plt:00000000000016BB                 jmp     sub_13B0
.plt:00000000000016BB ; } // starts at 13B0
.plt:00000000000016BB _plt            ends
.plt:00000000000016BB
.plt.got:00000000000016C0 ; ===========================================================================
.plt.got:00000000000016C0
.plt.got:00000000000016C0 ; Segment type: Pure code
.plt.got:00000000000016C0 ; Segment permissions: Read/Execute
.plt.got:00000000000016C0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000016C0                 assume cs:_plt_got
.plt.got:00000000000016C0                 ;org 16C0h
.plt.got:00000000000016C0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000016C0
.plt.got:00000000000016C0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000016C0
.plt.got:00000000000016C0 ; Attributes: thunk
.plt.got:00000000000016C0
.plt.got:00000000000016C0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000016C0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000016C0 ; __unwind {
.plt.got:00000000000016C0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000016C0 __cxa_finalize  endp
.plt.got:00000000000016C0
.plt.got:00000000000016C0 ; ---------------------------------------------------------------------------
.plt.got:00000000000016C6                 align 8
.plt.got:00000000000016C6 ; } // starts at 16C0
.plt.got:00000000000016C6 _plt_got        ends
.plt.got:00000000000016C6
LOAD:00000000000016C8 ; ===========================================================================
LOAD:00000000000016C8
LOAD:00000000000016C8 ; Segment type: Pure code
LOAD:00000000000016C8 ; Segment permissions: Read/Execute
LOAD:00000000000016C8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000016C8                 assume cs:LOAD
LOAD:00000000000016C8                 ;org 16C8h
LOAD:00000000000016C8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000016C8                 align 10h
LOAD:00000000000016C8 LOAD            ends
LOAD:00000000000016C8
.text:00000000000016D0 ; ===========================================================================
.text:00000000000016D0
.text:00000000000016D0 ; Segment type: Pure code
.text:00000000000016D0 ; Segment permissions: Read/Execute
.text:00000000000016D0 _text           segment para public 'CODE' use64
.text:00000000000016D0                 assume cs:_text
.text:00000000000016D0                 ;org 16D0h
.text:00000000000016D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000016D0
.text:00000000000016D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000016D0
.text:00000000000016D0
.text:00000000000016D0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000016D0                 public main
.text:00000000000016D0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000016D0 ; __unwind {
.text:00000000000016D0                 push    rbp
.text:00000000000016D1                 push    rbx
.text:00000000000016D2                 mov     ebx, edi
.text:00000000000016D4                 mov     rbp, rsi
.text:00000000000016D7                 sub     rsp, 8
.text:00000000000016DB                 mov     rdi, [rsi]
.text:00000000000016DE                 call    set_program_name
.text:00000000000016E3                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000016EA                 mov     edi, 6          ; category
.text:00000000000016EF                 call    _setlocale
.text:00000000000016F4                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:00000000000016FB                 lea     rdi, domainname ; "coreutils"
.text:0000000000001702                 call    _bindtextdomain
.text:0000000000001707                 lea     rdi, domainname ; "coreutils"
.text:000000000000170E                 call    _textdomain
.text:0000000000001713                 lea     rdi, close_stdout
.text:000000000000171A                 call    atexit
.text:000000000000171F                 lea     rax, aDavidMackenzie ; "David MacKenzie"
.text:0000000000001726                 push    0
.text:0000000000001728                 mov     r8, cs:Version
.text:000000000000172F                 lea     rcx, unk_4D9A
.text:0000000000001736                 lea     rdx, aUsers     ; "users"
.text:000000000000173D                 mov     edi, ebx
.text:000000000000173F                 push    rax
.text:0000000000001740                 lea     rax, aJosephArceneau ; "Joseph Arceneaux"
.text:0000000000001747                 mov     r9d, 1
.text:000000000000174D                 mov     rsi, rbp
.text:0000000000001750                 push    rax
.text:0000000000001751                 lea     rax, usage
.text:0000000000001758                 push    rax
.text:0000000000001759                 xor     eax, eax
.text:000000000000175B                 call    parse_gnu_standard_options_only
.text:0000000000001760                 movsxd  rax, cs:optind@@GLIBC_2_2_5
.text:0000000000001767                 add     rsp, 20h
.text:000000000000176B                 sub     ebx, eax
.text:000000000000176D                 jz      short loc_1789
.text:000000000000176F                 sub     ebx, 1
.text:0000000000001772                 jnz     short loc_179C
.text:0000000000001774                 mov     rdi, [rbp+rax*8+0]
.text:0000000000001779                 xor     esi, esi
.text:000000000000177B                 call    users
.text:0000000000001780
.text:0000000000001780 loc_1780:                               ; CODE XREF: main+CA↓j
.text:0000000000001780                 add     rsp, 8
.text:0000000000001784                 xor     eax, eax
.text:0000000000001786                 pop     rbx
.text:0000000000001787                 pop     rbp
.text:0000000000001788                 retn
.text:0000000000001789 ; ---------------------------------------------------------------------------
.text:0000000000001789
.text:0000000000001789 loc_1789:                               ; CODE XREF: main+9D↑j
.text:0000000000001789                 lea     rdi, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000001790                 mov     esi, 1
.text:0000000000001795                 call    users
.text:000000000000179A                 jmp     short loc_1780
.text:000000000000179C ; ---------------------------------------------------------------------------
.text:000000000000179C
.text:000000000000179C loc_179C:                               ; CODE XREF: main+A2↑j
.text:000000000000179C                 mov     rdi, [rbp+rax*8+8]
.text:00000000000017A1                 call    quote
.text:00000000000017A6                 lea     rsi, msgid      ; "extra operand %s"
.text:00000000000017AD                 mov     rbx, rax
.text:00000000000017B0                 mov     edx, 5          ; category
.text:00000000000017B5                 xor     edi, edi        ; domainname
.text:00000000000017B7                 call    _dcgettext
.text:00000000000017BC                 xor     edi, edi        ; status
.text:00000000000017BE                 mov     rdx, rax        ; format
.text:00000000000017C1                 mov     rcx, rbx
.text:00000000000017C4                 xor     esi, esi        ; errnum
.text:00000000000017C6                 xor     eax, eax
.text:00000000000017C8                 call    _error
.text:00000000000017CD                 mov     edi, 1          ; status
.text:00000000000017D2                 call    usage
.text:00000000000017D2 ; } // starts at 16D0
.text:00000000000017D2 main            endp
.text:00000000000017D2
.text:00000000000017D2 ; ---------------------------------------------------------------------------
.text:00000000000017D7                 align 20h
.text:00000000000017E0
.text:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017E0
.text:00000000000017E0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000017E0
.text:00000000000017E0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000017E0                 public start
.text:00000000000017E0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000017E0 ; __unwind {
.text:00000000000017E0                 xor     ebp, ebp
.text:00000000000017E2                 mov     r9, rdx         ; rtld_fini
.text:00000000000017E5                 pop     rsi             ; argc
.text:00000000000017E6                 mov     rdx, rsp        ; ubp_av
.text:00000000000017E9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000017ED                 push    rax
.text:00000000000017EE                 push    rsp             ; stack_end
.text:00000000000017EF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000017F6                 lea     rcx, __libc_csu_init ; init
.text:00000000000017FD                 lea     rdi, main       ; main
.text:0000000000001804                 call    cs:__libc_start_main_ptr
.text:000000000000180A                 hlt
.text:000000000000180A ; } // starts at 17E0
.text:000000000000180A start           endp
.text:000000000000180A
.text:000000000000180A ; ---------------------------------------------------------------------------
.text:000000000000180B                 align 10h
.text:0000000000001810
.text:0000000000001810 ; =============== S U B R O U T I N E =======================================
.text:0000000000001810
.text:0000000000001810 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001810
.text:0000000000001810 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_18C3↓p
.text:0000000000001810                 lea     rdi, __bss_start
.text:0000000000001817                 push    rbp
.text:0000000000001818                 lea     rax, __bss_start
.text:000000000000181F                 cmp     rax, rdi
.text:0000000000001822                 mov     rbp, rsp
.text:0000000000001825                 jz      short loc_1840
.text:0000000000001827                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:000000000000182E                 test    rax, rax
.text:0000000000001831                 jz      short loc_1840
.text:0000000000001833                 pop     rbp
.text:0000000000001834                 jmp     rax
.text:0000000000001834 ; ---------------------------------------------------------------------------
.text:0000000000001836                 align 20h
.text:0000000000001840
.text:0000000000001840 loc_1840:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001840                                         ; deregister_tm_clones+21↑j
.text:0000000000001840                 pop     rbp
.text:0000000000001841                 retn
.text:0000000000001841 deregister_tm_clones endp
.text:0000000000001841
.text:0000000000001841 ; ---------------------------------------------------------------------------
.text:0000000000001842                 align 10h
.text:0000000000001850
.text:0000000000001850 ; =============== S U B R O U T I N E =======================================
.text:0000000000001850
.text:0000000000001850 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001850
.text:0000000000001850 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001850                 lea     rdi, __bss_start
.text:0000000000001857                 lea     rsi, __bss_start
.text:000000000000185E                 push    rbp
.text:000000000000185F                 sub     rsi, rdi
.text:0000000000001862                 mov     rbp, rsp
.text:0000000000001865                 sar     rsi, 3
.text:0000000000001869                 mov     rax, rsi
.text:000000000000186C                 shr     rax, 3Fh
.text:0000000000001870                 add     rsi, rax
.text:0000000000001873                 sar     rsi, 1
.text:0000000000001876                 jz      short loc_1890
.text:0000000000001878                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000187F                 test    rax, rax
.text:0000000000001882                 jz      short loc_1890
.text:0000000000001884                 pop     rbp
.text:0000000000001885                 jmp     rax
.text:0000000000001885 ; ---------------------------------------------------------------------------
.text:0000000000001887                 align 10h
.text:0000000000001890
.text:0000000000001890 loc_1890:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001890                                         ; register_tm_clones+32↑j
.text:0000000000001890                 pop     rbp
.text:0000000000001891                 retn
.text:0000000000001891 register_tm_clones endp
.text:0000000000001891
.text:0000000000001891 ; ---------------------------------------------------------------------------
.text:0000000000001892                 align 20h
.text:00000000000018A0
.text:00000000000018A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018A0
.text:00000000000018A0 ; Attributes: info_from_lumina
.text:00000000000018A0
.text:00000000000018A0 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00000000000018A0                 cmp     cs:completed_7697, 0
.text:00000000000018A7                 jnz     short locret_18D8
.text:00000000000018A9                 cmp     cs:__cxa_finalize_ptr, 0
.text:00000000000018B1                 push    rbp
.text:00000000000018B2                 mov     rbp, rsp
.text:00000000000018B5                 jz      short loc_18C3
.text:00000000000018B7                 mov     rdi, cs:__dso_handle ; void *
.text:00000000000018BE                 call    __cxa_finalize
.text:00000000000018C3
.text:00000000000018C3 loc_18C3:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:00000000000018C3                 call    deregister_tm_clones
.text:00000000000018C8                 mov     cs:completed_7697, 1
.text:00000000000018CF                 pop     rbp
.text:00000000000018D0                 retn
.text:00000000000018D0 ; ---------------------------------------------------------------------------
.text:00000000000018D1                 align 8
.text:00000000000018D8
.text:00000000000018D8 locret_18D8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000018D8                 rep retn
.text:00000000000018D8 __do_global_dtors_aux endp
.text:00000000000018D8
.text:00000000000018D8 ; ---------------------------------------------------------------------------
.text:00000000000018DA                 align 20h
.text:00000000000018E0
.text:00000000000018E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018E0
.text:00000000000018E0 ; Attributes: bp-based frame
.text:00000000000018E0
.text:00000000000018E0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000018E0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000018E0                 push    rbp
.text:00000000000018E1                 mov     rbp, rsp
.text:00000000000018E4                 pop     rbp
.text:00000000000018E5                 jmp     register_tm_clones
.text:00000000000018E5 frame_dummy     endp
.text:00000000000018E5
.text:00000000000018E5 ; ---------------------------------------------------------------------------
.text:00000000000018EA                 align 10h
.text:00000000000018F0
.text:00000000000018F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018F0
.text:00000000000018F0
.text:00000000000018F0 ; int userid_compare(const void *, const void *)
.text:00000000000018F0 userid_compare  proc near               ; DATA XREF: users+B1↓o
.text:00000000000018F0                                         ; users:loc_1A92↓o
.text:00000000000018F0 ; __unwind {
.text:00000000000018F0                 mov     rsi, [rsi]      ; s2
.text:00000000000018F3                 mov     rdi, [rdi]      ; s1
.text:00000000000018F6                 jmp     _strcmp
.text:00000000000018F6 ; } // starts at 18F0
.text:00000000000018F6 userid_compare  endp
.text:00000000000018F6
.text:00000000000018F6 ; ---------------------------------------------------------------------------
.text:00000000000018FB                 align 20h
.text:0000000000001900
.text:0000000000001900 ; =============== S U B R O U T I N E =======================================
.text:0000000000001900
.text:0000000000001900
.text:0000000000001900 users           proc near               ; CODE XREF: main+AB↑p
.text:0000000000001900                                         ; main+C5↑p
.text:0000000000001900
.text:0000000000001900 var_50          = qword ptr -50h
.text:0000000000001900 ptr             = qword ptr -48h
.text:0000000000001900 var_40          = qword ptr -40h
.text:0000000000001900
.text:0000000000001900 ; __unwind {
.text:0000000000001900                 push    r15
.text:0000000000001902                 push    r14
.text:0000000000001904                 mov     ecx, esi
.text:0000000000001906                 push    r13
.text:0000000000001908                 push    r12
.text:000000000000190A                 push    rbp
.text:000000000000190B                 push    rbx
.text:000000000000190C                 mov     rbx, rdi
.text:000000000000190F                 sub     rsp, 28h
.text:0000000000001913                 lea     rdx, [rsp+58h+ptr]
.text:0000000000001918                 lea     rsi, [rsp+58h+var_50]
.text:000000000000191D                 mov     rax, fs:28h
.text:0000000000001926                 mov     [rsp+58h+var_40], rax
.text:000000000000192B                 xor     eax, eax
.text:000000000000192D                 call    read_utmp
.text:0000000000001932                 test    eax, eax
.text:0000000000001934                 jnz     loc_1ABE
.text:000000000000193A                 mov     r12, [rsp+58h+var_50]
.text:000000000000193F                 mov     edx, 8
.text:0000000000001944                 xor     ecx, ecx
.text:0000000000001946                 mov     rax, rdx
.text:0000000000001949                 mov     rbx, [rsp+58h+ptr]
.text:000000000000194E                 mul     r12
.text:0000000000001951                 jo      loc_1AB4
.text:0000000000001957
.text:0000000000001957 loc_1957:                               ; CODE XREF: users+1B9↓j
.text:0000000000001957                 test    rax, rax
.text:000000000000195A                 js      loc_1AAF
.text:0000000000001960                 test    rcx, rcx
.text:0000000000001963                 jnz     loc_1AAF
.text:0000000000001969                 lea     rdi, ds:0[r12*8]
.text:0000000000001971                 lea     rbp, [r12-1]
.text:0000000000001976                 call    xmalloc
.text:000000000000197B                 test    r12, r12
.text:000000000000197E                 mov     r14, rax
.text:0000000000001981                 jz      loc_1A92
.text:0000000000001987                 xor     r15d, r15d
.text:000000000000198A                 nop     word ptr [rax+rax+00h]
.text:0000000000001990
.text:0000000000001990 loc_1990:                               ; CODE XREF: users+AF↓j
.text:0000000000001990                 cmp     byte ptr [rbx+2Ch], 0
.text:0000000000001994                 jz      short loc_19A0
.text:0000000000001996                 cmp     word ptr [rbx], 7
.text:000000000000199A                 jz      loc_1A73
.text:00000000000019A0
.text:00000000000019A0 loc_19A0:                               ; CODE XREF: users+94↑j
.text:00000000000019A0                                         ; users+183↓j
.text:00000000000019A0                 sub     rbp, 1
.text:00000000000019A4                 add     rbx, 180h
.text:00000000000019AB                 cmp     rbp, 0FFFFFFFFFFFFFFFFh
.text:00000000000019AF                 jnz     short loc_1990
.text:00000000000019B1                 lea     rcx, userid_compare ; compar
.text:00000000000019B8                 mov     edx, 8          ; size
.text:00000000000019BD                 mov     rsi, r15        ; nmemb
.text:00000000000019C0                 mov     rdi, r14        ; base
.text:00000000000019C3                 call    _qsort
.text:00000000000019C8                 test    r15, r15
.text:00000000000019CB                 jz      short loc_1A42
.text:00000000000019CD                 lea     r13, [r15-1]
.text:00000000000019D1                 xor     ebx, ebx
.text:00000000000019D3                 nop     dword ptr [rax+rax+00h]
.text:00000000000019D8
.text:00000000000019D8 loc_19D8:                               ; CODE XREF: users+124↓j
.text:00000000000019D8                 cmp     rbx, r13
.text:00000000000019DB                 mov     rdi, [r14+rbx*8] ; s
.text:00000000000019DF                 mov     rsi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:00000000000019E6                 sbb     r12d, r12d
.text:00000000000019E9                 and     r12d, 16h
.text:00000000000019ED                 add     r12d, 0Ah
.text:00000000000019F1                 cmp     rbx, r13
.text:00000000000019F4                 sbb     ebp, ebp
.text:00000000000019F6                 call    _fputs_unlocked
.text:00000000000019FB                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; _IO_FILE *
.text:0000000000001A02                 and     ebp, 16h
.text:0000000000001A05                 add     ebp, 0Ah
.text:0000000000001A08                 mov     rax, [rdi+28h]
.text:0000000000001A0C                 cmp     rax, [rdi+30h]
.text:0000000000001A10                 jnb     short loc_1A88
.text:0000000000001A12                 lea     rdx, [rax+1]
.text:0000000000001A16                 mov     [rdi+28h], rdx
.text:0000000000001A1A                 mov     [rax], bpl
.text:0000000000001A1D
.text:0000000000001A1D loc_1A1D:                               ; CODE XREF: users+190↓j
.text:0000000000001A1D                 add     rbx, 1
.text:0000000000001A21                 cmp     rbx, r15
.text:0000000000001A24                 jnz     short loc_19D8
.text:0000000000001A26                 lea     rbx, [r14+rbx*8]
.text:0000000000001A2A                 mov     rbp, r14
.text:0000000000001A2D                 nop     dword ptr [rax]
.text:0000000000001A30
.text:0000000000001A30 loc_1A30:                               ; CODE XREF: users+140↓j
.text:0000000000001A30                 mov     rdi, [rbp+0]    ; ptr
.text:0000000000001A34                 add     rbp, 8
.text:0000000000001A38                 call    _free
.text:0000000000001A3D                 cmp     rbp, rbx
.text:0000000000001A40                 jnz     short loc_1A30
.text:0000000000001A42
.text:0000000000001A42 loc_1A42:                               ; CODE XREF: users+CB↑j
.text:0000000000001A42                                         ; users+1A8↓j
.text:0000000000001A42                 mov     rdi, r14        ; ptr
.text:0000000000001A45                 call    _free
.text:0000000000001A4A                 mov     rdi, [rsp+58h+ptr] ; ptr
.text:0000000000001A4F                 call    _free
.text:0000000000001A54                 mov     rax, [rsp+58h+var_40]
.text:0000000000001A59                 xor     rax, fs:28h
.text:0000000000001A62                 jnz     short loc_1AAA
.text:0000000000001A64                 add     rsp, 28h
.text:0000000000001A68                 pop     rbx
.text:0000000000001A69                 pop     rbp
.text:0000000000001A6A                 pop     r12
.text:0000000000001A6C                 pop     r13
.text:0000000000001A6E                 pop     r14
.text:0000000000001A70                 pop     r15
.text:0000000000001A72                 retn
.text:0000000000001A73 ; ---------------------------------------------------------------------------
.text:0000000000001A73
.text:0000000000001A73 loc_1A73:                               ; CODE XREF: users+9A↑j
.text:0000000000001A73                 mov     rdi, rbx
.text:0000000000001A76                 call    extract_trimmed_name
.text:0000000000001A7B                 mov     [r14+r15*8], rax
.text:0000000000001A7F                 add     r15, 1
.text:0000000000001A83                 jmp     loc_19A0
.text:0000000000001A88 ; ---------------------------------------------------------------------------
.text:0000000000001A88
.text:0000000000001A88 loc_1A88:                               ; CODE XREF: users+110↑j
.text:0000000000001A88                 mov     esi, r12d       ; int
.text:0000000000001A8B                 call    ___overflow
.text:0000000000001A90                 jmp     short loc_1A1D
.text:0000000000001A92 ; ---------------------------------------------------------------------------
.text:0000000000001A92
.text:0000000000001A92 loc_1A92:                               ; CODE XREF: users+81↑j
.text:0000000000001A92                 lea     rcx, userid_compare ; compar
.text:0000000000001A99                 mov     edx, 8          ; size
.text:0000000000001A9E                 xor     esi, esi        ; nmemb
.text:0000000000001AA0                 mov     rdi, rax        ; base
.text:0000000000001AA3                 call    _qsort
.text:0000000000001AA8                 jmp     short loc_1A42
.text:0000000000001AAA ; ---------------------------------------------------------------------------
.text:0000000000001AAA
.text:0000000000001AAA loc_1AAA:                               ; CODE XREF: users+162↑j
.text:0000000000001AAA                 call    ___stack_chk_fail
.text:0000000000001AAF ; ---------------------------------------------------------------------------
.text:0000000000001AAF
.text:0000000000001AAF loc_1AAF:                               ; CODE XREF: users+5A↑j
.text:0000000000001AAF                                         ; users+63↑j
.text:0000000000001AAF                 call    xalloc_die
.text:0000000000001AB4 ; ---------------------------------------------------------------------------
.text:0000000000001AB4
.text:0000000000001AB4 loc_1AB4:                               ; CODE XREF: users+51↑j
.text:0000000000001AB4                 mov     ecx, 1
.text:0000000000001AB9                 jmp     loc_1957
.text:0000000000001ABE ; ---------------------------------------------------------------------------
.text:0000000000001ABE
.text:0000000000001ABE loc_1ABE:                               ; CODE XREF: users+34↑j
.text:0000000000001ABE                 mov     rdx, rbx
.text:0000000000001AC1                 mov     esi, 3
.text:0000000000001AC6                 xor     edi, edi
.text:0000000000001AC8                 call    quotearg_n_style_colon
.text:0000000000001ACD                 mov     rbx, rax
.text:0000000000001AD0                 call    ___errno_location
.text:0000000000001AD5                 mov     esi, [rax]      ; errnum
.text:0000000000001AD7                 lea     rdx, format+4   ; format
.text:0000000000001ADE                 mov     rcx, rbx
.text:0000000000001AE1                 mov     edi, 1          ; status
.text:0000000000001AE6                 xor     eax, eax
.text:0000000000001AE8                 call    _error
.text:0000000000001AE8 ; } // starts at 1900
.text:0000000000001AED                 nop     dword ptr [rax]
.text:0000000000001AED users           endp ; sp-analysis failed
.text:0000000000001AED
.text:0000000000001AF0
.text:0000000000001AF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001AF0
.text:0000000000001AF0 ; Attributes: noreturn
.text:0000000000001AF0
.text:0000000000001AF0 ; void __fastcall __noreturn usage(int status)
.text:0000000000001AF0                 public usage
.text:0000000000001AF0 usage           proc near               ; CODE XREF: main+102↑p
.text:0000000000001AF0                                         ; DATA XREF: main+81↑o
.text:0000000000001AF0
.text:0000000000001AF0 var_A8          = qword ptr -0A8h
.text:0000000000001AF0 var_A0          = qword ptr -0A0h
.text:0000000000001AF0 var_98          = qword ptr -98h
.text:0000000000001AF0 var_90          = qword ptr -90h
.text:0000000000001AF0 var_88          = qword ptr -88h
.text:0000000000001AF0 var_80          = qword ptr -80h
.text:0000000000001AF0 var_78          = qword ptr -78h
.text:0000000000001AF0 var_70          = qword ptr -70h
.text:0000000000001AF0 var_68          = qword ptr -68h
.text:0000000000001AF0 var_60          = qword ptr -60h
.text:0000000000001AF0 var_58          = qword ptr -58h
.text:0000000000001AF0 var_50          = qword ptr -50h
.text:0000000000001AF0 var_48          = qword ptr -48h
.text:0000000000001AF0 var_40          = qword ptr -40h
.text:0000000000001AF0 var_30          = qword ptr -30h
.text:0000000000001AF0
.text:0000000000001AF0 ; __unwind {
.text:0000000000001AF0                 push    r13
.text:0000000000001AF2                 push    r12
.text:0000000000001AF4                 mov     edx, 5          ; category
.text:0000000000001AF9                 push    rbp
.text:0000000000001AFA                 push    rbx
.text:0000000000001AFB                 mov     ebp, edi
.text:0000000000001AFD                 sub     rsp, 88h
.text:0000000000001B04                 mov     rbx, cs:program_name
.text:0000000000001B0B                 mov     rax, fs:28h
.text:0000000000001B14                 mov     [rsp+0A8h+var_30], rax
.text:0000000000001B19                 xor     eax, eax
.text:0000000000001B1B                 test    edi, edi
.text:0000000000001B1D                 jz      short loc_1B4D
.text:0000000000001B1F                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:0000000000001B26                 xor     edi, edi        ; domainname
.text:0000000000001B28                 call    _dcgettext
.text:0000000000001B2D                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001B34                 mov     rdx, rax
.text:0000000000001B37                 mov     rcx, rbx
.text:0000000000001B3A                 mov     esi, 1
.text:0000000000001B3F                 xor     eax, eax
.text:0000000000001B41                 call    ___fprintf_chk
.text:0000000000001B46
.text:0000000000001B46 loc_1B46:                               ; CODE XREF: usage+286↓j
.text:0000000000001B46                 mov     edi, ebp        ; status
.text:0000000000001B48                 call    _exit
.text:0000000000001B4D ; ---------------------------------------------------------------------------
.text:0000000000001B4D
.text:0000000000001B4D loc_1B4D:                               ; CODE XREF: usage+2D↑j
.text:0000000000001B4D                 lea     rsi, aUsageSOptionFi ; "Usage: %s [OPTION]... [FILE]\n"
.text:0000000000001B54                 xor     edi, edi        ; domainname
.text:0000000000001B56                 call    _dcgettext
.text:0000000000001B5B                 mov     rdx, rbx
.text:0000000000001B5E                 mov     rsi, rax
.text:0000000000001B61                 mov     edi, 1
.text:0000000000001B66                 xor     eax, eax
.text:0000000000001B68                 call    ___printf_chk
.text:0000000000001B6D                 lea     rsi, aOutputWhoIsCur ; "Output who is currently logged in accor"...
.text:0000000000001B74                 mov     edx, 5          ; category
.text:0000000000001B79                 xor     edi, edi        ; domainname
.text:0000000000001B7B                 call    _dcgettext
.text:0000000000001B80                 lea     rcx, aVarLogWtmp ; "/var/log/wtmp"
.text:0000000000001B87                 lea     rdx, aVarRunUtmp ; "/var/run/utmp"
.text:0000000000001B8E                 mov     rsi, rax
.text:0000000000001B91                 mov     edi, 1
.text:0000000000001B96                 xor     eax, eax
.text:0000000000001B98                 call    ___printf_chk
.text:0000000000001B9D                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BA4                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:0000000000001BAB                 mov     edx, 5          ; category
.text:0000000000001BB0                 xor     edi, edi        ; domainname
.text:0000000000001BB2                 call    _dcgettext
.text:0000000000001BB7                 mov     rsi, rbx        ; stream
.text:0000000000001BBA                 mov     rdi, rax        ; s
.text:0000000000001BBD                 call    _fputs_unlocked
.text:0000000000001BC2                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001BC9                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:0000000000001BD0                 mov     edx, 5          ; category
.text:0000000000001BD5                 xor     edi, edi        ; domainname
.text:0000000000001BD7                 call    _dcgettext
.text:0000000000001BDC                 mov     rsi, rbx        ; stream
.text:0000000000001BDF                 mov     rdi, rax        ; s
.text:0000000000001BE2                 lea     rbx, aSha384sum ; "sha384sum"
.text:0000000000001BE9                 call    _fputs_unlocked
.text:0000000000001BEE                 lea     rax, asc_4D24   ; "["
.text:0000000000001BF5                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001BFC                 mov     [rsp+0A8h+var_68], rbx
.text:0000000000001C01                 lea     rbx, aUsers     ; "users"
.text:0000000000001C08                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001C11                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001C1A                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001C1E                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001C25                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001C2A                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001C31                 mov     rdx, rsp
.text:0000000000001C34                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001C39                 lea     rax, domainname ; "coreutils"
.text:0000000000001C40                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001C45                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001C4A                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001C51                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001C56                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001C5D                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001C62                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001C69                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001C6E                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001C73                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001C78                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001C7D                 nop     dword ptr [rax]
.text:0000000000001C80
.text:0000000000001C80 loc_1C80:                               ; CODE XREF: usage+1AD↓j
.text:0000000000001C80                 add     rdx, 10h
.text:0000000000001C84                 mov     rdi, [rdx]
.text:0000000000001C87                 test    rdi, rdi
.text:0000000000001C8A                 jz      short loc_1C9F
.text:0000000000001C8C                 mov     ecx, 6
.text:0000000000001C91                 mov     rsi, rbx
.text:0000000000001C94                 repe cmpsb
.text:0000000000001C96                 setnbe  al
.text:0000000000001C99                 sbb     al, 0
.text:0000000000001C9B                 test    al, al
.text:0000000000001C9D                 jnz     short loc_1C80
.text:0000000000001C9F
.text:0000000000001C9F loc_1C9F:                               ; CODE XREF: usage+19A↑j
.text:0000000000001C9F                 mov     r12, [rdx+8]
.text:0000000000001CA3                 xor     edi, edi        ; domainname
.text:0000000000001CA5                 mov     edx, 5          ; category
.text:0000000000001CAA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001CB1                 test    r12, r12
.text:0000000000001CB4                 jz      loc_1D7B
.text:0000000000001CBA                 call    _dcgettext
.text:0000000000001CBF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001CC6                 lea     rdx, unk_4D9A
.text:0000000000001CCD                 mov     rsi, rax
.text:0000000000001CD0                 mov     edi, 1
.text:0000000000001CD5                 xor     eax, eax
.text:0000000000001CD7                 call    ___printf_chk
.text:0000000000001CDC                 xor     esi, esi        ; locale
.text:0000000000001CDE                 mov     edi, 5          ; category
.text:0000000000001CE3                 call    _setlocale
.text:0000000000001CE8                 test    rax, rax
.text:0000000000001CEB                 jz      short loc_1D09
.text:0000000000001CED                 lea     rsi, s2         ; "en_"
.text:0000000000001CF4                 mov     edx, 3          ; n
.text:0000000000001CF9                 mov     rdi, rax        ; s1
.text:0000000000001CFC                 call    _strncmp
.text:0000000000001D01                 test    eax, eax
.text:0000000000001D03                 jnz     loc_1E10
.text:0000000000001D09
.text:0000000000001D09 loc_1D09:                               ; CODE XREF: usage+1FB↑j
.text:0000000000001D09                                         ; usage+345↓j
.text:0000000000001D09                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001D10                 xor     edi, edi        ; domainname
.text:0000000000001D12                 mov     edx, 5          ; category
.text:0000000000001D17                 call    _dcgettext
.text:0000000000001D1C                 lea     rcx, aUsers     ; "users"
.text:0000000000001D23                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D2A                 mov     rsi, rax
.text:0000000000001D2D                 mov     edi, 1
.text:0000000000001D32                 xor     eax, eax
.text:0000000000001D34                 call    ___printf_chk
.text:0000000000001D39                 cmp     r12, rbx
.text:0000000000001D3C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001D43                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001D4A                 cmovz   rbx, rcx
.text:0000000000001D4E
.text:0000000000001D4E loc_1D4E:                               ; CODE XREF: usage+314↓j
.text:0000000000001D4E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001D55                 xor     edi, edi        ; domainname
.text:0000000000001D57                 mov     edx, 5          ; category
.text:0000000000001D5C                 call    _dcgettext
.text:0000000000001D61                 mov     rcx, rbx
.text:0000000000001D64                 mov     rsi, rax
.text:0000000000001D67                 mov     rdx, r12
.text:0000000000001D6A                 mov     edi, 1
.text:0000000000001D6F                 xor     eax, eax
.text:0000000000001D71                 call    ___printf_chk
.text:0000000000001D76                 jmp     loc_1B46
.text:0000000000001D7B ; ---------------------------------------------------------------------------
.text:0000000000001D7B
.text:0000000000001D7B loc_1D7B:                               ; CODE XREF: usage+1C4↑j
.text:0000000000001D7B                 call    _dcgettext
.text:0000000000001D80                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001D87                 lea     rdx, unk_4D9A
.text:0000000000001D8E                 mov     rsi, rax
.text:0000000000001D91                 mov     edi, 1
.text:0000000000001D96                 xor     eax, eax
.text:0000000000001D98                 call    ___printf_chk
.text:0000000000001D9D                 xor     esi, esi        ; locale
.text:0000000000001D9F                 mov     edi, 5          ; category
.text:0000000000001DA4                 call    _setlocale
.text:0000000000001DA9                 test    rax, rax
.text:0000000000001DAC                 jz      short loc_1DC6
.text:0000000000001DAE                 lea     rsi, s2         ; "en_"
.text:0000000000001DB5                 mov     edx, 3          ; n
.text:0000000000001DBA                 mov     rdi, rax        ; s1
.text:0000000000001DBD                 call    _strncmp
.text:0000000000001DC2                 test    eax, eax
.text:0000000000001DC4                 jnz     short loc_1E09
.text:0000000000001DC6
.text:0000000000001DC6 loc_1DC6:                               ; CODE XREF: usage+2BC↑j
.text:0000000000001DC6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001DCD                 mov     edx, 5          ; category
.text:0000000000001DD2                 xor     edi, edi        ; domainname
.text:0000000000001DD4                 lea     r12, aUsers     ; "users"
.text:0000000000001DDB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001DE2                 call    _dcgettext
.text:0000000000001DE7                 lea     rcx, aUsers     ; "users"
.text:0000000000001DEE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001DF5                 mov     rsi, rax
.text:0000000000001DF8                 mov     edi, 1
.text:0000000000001DFD                 xor     eax, eax
.text:0000000000001DFF                 call    ___printf_chk
.text:0000000000001E04                 jmp     loc_1D4E
.text:0000000000001E09 ; ---------------------------------------------------------------------------
.text:0000000000001E09
.text:0000000000001E09 loc_1E09:                               ; CODE XREF: usage+2D4↑j
.text:0000000000001E09                 lea     r12, aUsers     ; "users"
.text:0000000000001E10
.text:0000000000001E10 loc_1E10:                               ; CODE XREF: usage+213↑j
.text:0000000000001E10                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001E17                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001E1E                 xor     edi, edi        ; domainname
.text:0000000000001E20                 mov     edx, 5          ; category
.text:0000000000001E25                 call    _dcgettext
.text:0000000000001E2A                 mov     rsi, r13        ; stream
.text:0000000000001E2D                 mov     rdi, rax        ; s
.text:0000000000001E30                 call    _fputs_unlocked
.text:0000000000001E35                 jmp     loc_1D09
.text:0000000000001E35 ; } // starts at 1AF0
.text:0000000000001E35 usage           endp
.text:0000000000001E35
.text:0000000000001E35 ; ---------------------------------------------------------------------------
.text:0000000000001E3A                 align 20h
.text:0000000000001E40
.text:0000000000001E40 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E40
.text:0000000000001E40
.text:0000000000001E40                 public close_stdout_set_file_name
.text:0000000000001E40 close_stdout_set_file_name proc near
.text:0000000000001E40 ; __unwind {
.text:0000000000001E40                 mov     cs:file_name, rdi
.text:0000000000001E47                 retn
.text:0000000000001E47 ; } // starts at 1E40
.text:0000000000001E47 close_stdout_set_file_name endp
.text:0000000000001E47
.text:0000000000001E47 ; ---------------------------------------------------------------------------
.text:0000000000001E48                 align 10h
.text:0000000000001E50
.text:0000000000001E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E50
.text:0000000000001E50
.text:0000000000001E50                 public close_stdout_set_ignore_EPIPE
.text:0000000000001E50 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001E50 ; __unwind {
.text:0000000000001E50                 mov     cs:ignore_EPIPE, dil
.text:0000000000001E57                 retn
.text:0000000000001E57 ; } // starts at 1E50
.text:0000000000001E57 close_stdout_set_ignore_EPIPE endp
.text:0000000000001E57
.text:0000000000001E57 ; ---------------------------------------------------------------------------
.text:0000000000001E58                 align 20h
.text:0000000000001E60
.text:0000000000001E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001E60
.text:0000000000001E60 ; Attributes: info_from_lumina
.text:0000000000001E60
.text:0000000000001E60 ; void __cdecl close_stdout()
.text:0000000000001E60                 public close_stdout
.text:0000000000001E60 close_stdout    proc near               ; DATA XREF: main+43↑o
.text:0000000000001E60 ; __unwind {
.text:0000000000001E60                 push    rbp
.text:0000000000001E61                 push    rbx
.text:0000000000001E62                 sub     rsp, 8
.text:0000000000001E66                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001E6D                 call    close_stream
.text:0000000000001E72                 test    eax, eax
.text:0000000000001E74                 jz      short loc_1E8C
.text:0000000000001E76                 call    ___errno_location
.text:0000000000001E7B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001E82                 mov     rbx, rax
.text:0000000000001E85                 jz      short loc_1EA3
.text:0000000000001E87                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001E8A                 jnz     short loc_1EA3
.text:0000000000001E8C
.text:0000000000001E8C loc_1E8C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001E8C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001E93                 call    close_stream
.text:0000000000001E98                 test    eax, eax
.text:0000000000001E9A                 jnz     short loc_1EE2
.text:0000000000001E9C                 add     rsp, 8
.text:0000000000001EA0                 pop     rbx
.text:0000000000001EA1                 pop     rbp
.text:0000000000001EA2                 retn
.text:0000000000001EA3 ; ---------------------------------------------------------------------------
.text:0000000000001EA3
.text:0000000000001EA3 loc_1EA3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001EA3                                         ; close_stdout+2A↑j
.text:0000000000001EA3                 lea     rsi, aWriteError ; "write error"
.text:0000000000001EAA                 xor     edi, edi        ; domainname
.text:0000000000001EAC                 mov     edx, 5          ; category
.text:0000000000001EB1                 call    _dcgettext
.text:0000000000001EB6                 mov     rdi, cs:file_name
.text:0000000000001EBD                 mov     rbp, rax
.text:0000000000001EC0                 test    rdi, rdi
.text:0000000000001EC3                 jz      short loc_1EED
.text:0000000000001EC5                 call    quotearg_colon
.text:0000000000001ECA                 mov     esi, [rbx]      ; errnum
.text:0000000000001ECC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001ED3                 mov     rcx, rax
.text:0000000000001ED6                 mov     r8, rbp
.text:0000000000001ED9                 xor     edi, edi        ; status
.text:0000000000001EDB                 xor     eax, eax
.text:0000000000001EDD                 call    _error
.text:0000000000001EE2
.text:0000000000001EE2 loc_1EE2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001EE2                                         ; close_stdout+A2↓j
.text:0000000000001EE2                 mov     edi, cs:exit_failure ; status
.text:0000000000001EE8                 call    __exit
.text:0000000000001EED ; ---------------------------------------------------------------------------
.text:0000000000001EED
.text:0000000000001EED loc_1EED:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001EED                 mov     esi, [rbx]      ; errnum
.text:0000000000001EEF                 lea     rdx, format+4   ; format
.text:0000000000001EF6                 mov     rcx, rax
.text:0000000000001EF9                 xor     edi, edi        ; status
.text:0000000000001EFB                 xor     eax, eax
.text:0000000000001EFD                 call    _error
.text:0000000000001F02                 jmp     short loc_1EE2
.text:0000000000001F02 ; } // starts at 1E60
.text:0000000000001F02 close_stdout    endp
.text:0000000000001F02
.text:0000000000001F02 ; ---------------------------------------------------------------------------
.text:0000000000001F04                 align 10h
.text:0000000000001F10
.text:0000000000001F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000001F10
.text:0000000000001F10
.text:0000000000001F10                 public parse_long_options
.text:0000000000001F10 parse_long_options proc near
.text:0000000000001F10
.text:0000000000001F10 var_100         = qword ptr -100h
.text:0000000000001F10 var_F8          = dword ptr -0F8h
.text:0000000000001F10 var_F4          = dword ptr -0F4h
.text:0000000000001F10 var_F0          = qword ptr -0F0h
.text:0000000000001F10 var_E8          = qword ptr -0E8h
.text:0000000000001F10 var_E0          = qword ptr -0E0h
.text:0000000000001F10 var_D8          = byte ptr -0D8h
.text:0000000000001F10 var_A8          = xmmword ptr -0A8h
.text:0000000000001F10 var_98          = xmmword ptr -98h
.text:0000000000001F10 var_88          = xmmword ptr -88h
.text:0000000000001F10 var_78          = xmmword ptr -78h
.text:0000000000001F10 var_68          = xmmword ptr -68h
.text:0000000000001F10 var_58          = xmmword ptr -58h
.text:0000000000001F10 var_48          = xmmword ptr -48h
.text:0000000000001F10 var_38          = xmmword ptr -38h
.text:0000000000001F10 arg_0           = byte ptr  8
.text:0000000000001F10
.text:0000000000001F10 ; __unwind {
.text:0000000000001F10                 push    r13
.text:0000000000001F12                 push    r12
.text:0000000000001F14                 mov     r13, r8
.text:0000000000001F17                 push    rbp
.text:0000000000001F18                 push    rbx
.text:0000000000001F19                 mov     rbp, rdx
.text:0000000000001F1C                 mov     r12, rcx
.text:0000000000001F1F                 sub     rsp, 0E8h
.text:0000000000001F26                 test    al, al
.text:0000000000001F28                 jz      short loc_1F64
.text:0000000000001F2A                 movaps  [rsp+108h+var_A8], xmm0
.text:0000000000001F2F                 movaps  [rsp+108h+var_98], xmm1
.text:0000000000001F34                 movaps  [rsp+108h+var_88], xmm2
.text:0000000000001F3C                 movaps  [rsp+108h+var_78], xmm3
.text:0000000000001F44                 movaps  [rsp+108h+var_68], xmm4
.text:0000000000001F4C                 movaps  [rsp+108h+var_58], xmm5
.text:0000000000001F54                 movaps  [rsp+108h+var_48], xmm6
.text:0000000000001F5C                 movaps  [rsp+108h+var_38], xmm7
.text:0000000000001F64
.text:0000000000001F64 loc_1F64:                               ; CODE XREF: parse_long_options+18↑j
.text:0000000000001F64                 mov     rax, fs:28h
.text:0000000000001F6D                 mov     [rsp+108h+var_E0], rax
.text:0000000000001F72                 xor     eax, eax
.text:0000000000001F74                 cmp     edi, 2
.text:0000000000001F77                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:0000000000001F7D                 mov     cs:opterr@@GLIBC_2_2_5, 0
.text:0000000000001F87                 jz      short loc_1FC0
.text:0000000000001F89
.text:0000000000001F89 loc_1F89:                               ; CODE XREF: parse_long_options+CE↓j
.text:0000000000001F89                                         ; parse_long_options+DD↓j ...
.text:0000000000001F89                 mov     rax, [rsp+108h+var_E0]
.text:0000000000001F8E                 xor     rax, fs:28h
.text:0000000000001F97                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:0000000000001F9D                 mov     cs:optind@@GLIBC_2_2_5, 0
.text:0000000000001FA7                 jnz     loc_204A
.text:0000000000001FAD                 add     rsp, 0E8h
.text:0000000000001FB4                 pop     rbx
.text:0000000000001FB5                 pop     rbp
.text:0000000000001FB6                 pop     r12
.text:0000000000001FB8                 pop     r13
.text:0000000000001FBA                 retn
.text:0000000000001FBA ; ---------------------------------------------------------------------------
.text:0000000000001FBB                 align 20h
.text:0000000000001FC0
.text:0000000000001FC0 loc_1FC0:                               ; CODE XREF: parse_long_options+77↑j
.text:0000000000001FC0                 lea     rcx, long_options ; longopts
.text:0000000000001FC7                 lea     rdx, shortopts  ; "+"
.text:0000000000001FCE                 xor     r8d, r8d        ; longind
.text:0000000000001FD1                 mov     [rsp+108h+var_100], r9
.text:0000000000001FD6                 call    _getopt_long
.text:0000000000001FDB                 cmp     eax, 0FFFFFFFFh
.text:0000000000001FDE                 jz      short loc_1F89
.text:0000000000001FE0                 cmp     eax, 68h ; 'h'
.text:0000000000001FE3                 mov     r9, [rsp+108h+var_100]
.text:0000000000001FE8                 jz      short loc_2040
.text:0000000000001FEA                 cmp     eax, 76h ; 'v'
.text:0000000000001FED                 jnz     short loc_1F89
.text:0000000000001FEF                 lea     rax, [rsp+108h+arg_0]
.text:0000000000001FF7                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001FFE                 lea     r8, [rsp+108h+var_F8]
.text:0000000000002003                 mov     rcx, r13
.text:0000000000002006                 mov     rdx, r12
.text:0000000000002009                 mov     rsi, rbp
.text:000000000000200C                 mov     [rsp+108h+var_F0], rax
.text:0000000000002011                 lea     rax, [rsp+108h+var_D8]
.text:0000000000002016                 mov     [rsp+108h+var_F8], 30h ; '0'
.text:000000000000201E                 mov     [rsp+108h+var_F4], 30h ; '0'
.text:0000000000002026                 mov     [rsp+108h+var_E8], rax
.text:000000000000202B                 call    version_etc_va
.text:0000000000002030                 xor     edi, edi        ; status
.text:0000000000002032                 call    _exit
.text:0000000000002032 ; ---------------------------------------------------------------------------
.text:0000000000002037                 align 20h
.text:0000000000002040
.text:0000000000002040 loc_2040:                               ; CODE XREF: parse_long_options+D8↑j
.text:0000000000002040                 xor     edi, edi
.text:0000000000002042                 call    r9
.text:0000000000002045                 jmp     loc_1F89
.text:000000000000204A ; ---------------------------------------------------------------------------
.text:000000000000204A
.text:000000000000204A loc_204A:                               ; CODE XREF: parse_long_options+97↑j
.text:000000000000204A                 call    ___stack_chk_fail
.text:000000000000204A ; } // starts at 1F10
.text:000000000000204A parse_long_options endp
.text:000000000000204A
.text:000000000000204A ; ---------------------------------------------------------------------------
.text:000000000000204F                 align 10h
.text:0000000000002050
.text:0000000000002050 ; =============== S U B R O U T I N E =======================================
.text:0000000000002050
.text:0000000000002050
.text:0000000000002050                 public parse_gnu_standard_options_only
.text:0000000000002050 parse_gnu_standard_options_only proc near
.text:0000000000002050                                         ; CODE XREF: main+8B↑p
.text:0000000000002050
.text:0000000000002050 var_F8          = dword ptr -0F8h
.text:0000000000002050 var_F4          = dword ptr -0F4h
.text:0000000000002050 var_F0          = qword ptr -0F0h
.text:0000000000002050 var_E8          = qword ptr -0E8h
.text:0000000000002050 var_E0          = qword ptr -0E0h
.text:0000000000002050 var_D8          = byte ptr -0D8h
.text:0000000000002050 var_A8          = xmmword ptr -0A8h
.text:0000000000002050 var_98          = xmmword ptr -98h
.text:0000000000002050 var_88          = xmmword ptr -88h
.text:0000000000002050 var_78          = xmmword ptr -78h
.text:0000000000002050 var_68          = xmmword ptr -68h
.text:0000000000002050 var_58          = xmmword ptr -58h
.text:0000000000002050 var_48          = xmmword ptr -48h
.text:0000000000002050 var_38          = xmmword ptr -38h
.text:0000000000002050 arg_0           = qword ptr  8
.text:0000000000002050 arg_8           = byte ptr  10h
.text:0000000000002050
.text:0000000000002050 ; __unwind {
.text:0000000000002050                 push    r14
.text:0000000000002052                 push    r13
.text:0000000000002054                 mov     r14, r8
.text:0000000000002057                 push    r12
.text:0000000000002059                 push    rbp
.text:000000000000205A                 mov     r12, rdx
.text:000000000000205D                 push    rbx
.text:000000000000205E                 mov     r13, rcx
.text:0000000000002061                 sub     rsp, 0D0h
.text:0000000000002068                 test    al, al
.text:000000000000206A                 mov     rbp, [rsp+0F8h+arg_0]
.text:0000000000002072                 jz      short loc_20AB
.text:0000000000002074                 movaps  [rsp+0F8h+var_A8], xmm0
.text:0000000000002079                 movaps  [rsp+0F8h+var_98], xmm1
.text:000000000000207E                 movaps  [rsp+0F8h+var_88], xmm2
.text:0000000000002083                 movaps  [rsp+0F8h+var_78], xmm3
.text:000000000000208B                 movaps  [rsp+0F8h+var_68], xmm4
.text:0000000000002093                 movaps  [rsp+0F8h+var_58], xmm5
.text:000000000000209B                 movaps  [rsp+0F8h+var_48], xmm6
.text:00000000000020A3                 movaps  [rsp+0F8h+var_38], xmm7
.text:00000000000020AB
.text:00000000000020AB loc_20AB:                               ; CODE XREF: parse_gnu_standard_options_only+22↑j
.text:00000000000020AB                 mov     rax, fs:28h
.text:00000000000020B4                 mov     [rsp+0F8h+var_E0], rax
.text:00000000000020B9                 xor     eax, eax
.text:00000000000020BB                 lea     rdx, aWrittenBySSAnd+1Bh ; ""
.text:00000000000020C2                 lea     rax, shortopts  ; "+"
.text:00000000000020C9                 test    r9b, r9b
.text:00000000000020CC                 lea     rcx, long_options ; longopts
.text:00000000000020D3                 cmovz   rdx, rax        ; shortopts
.text:00000000000020D7                 xor     r8d, r8d        ; longind
.text:00000000000020DA                 mov     ebx, cs:opterr@@GLIBC_2_2_5
.text:00000000000020E0                 mov     cs:opterr@@GLIBC_2_2_5, 1
.text:00000000000020EA                 call    _getopt_long
.text:00000000000020EF                 cmp     eax, 0FFFFFFFFh
.text:00000000000020F2                 jz      short loc_2158
.text:00000000000020F4                 cmp     eax, 68h ; 'h'
.text:00000000000020F7                 jz      loc_2180
.text:00000000000020FD                 cmp     eax, 76h ; 'v'
.text:0000000000002100                 jnz     short loc_2150
.text:0000000000002102                 lea     rax, [rsp+0F8h+arg_8]
.text:000000000000210A                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000002111                 mov     r8, rsp
.text:0000000000002114                 mov     rcx, r14
.text:0000000000002117                 mov     rdx, r13
.text:000000000000211A                 mov     rsi, r12
.text:000000000000211D                 mov     [rsp+0F8h+var_F0], rax
.text:0000000000002122                 lea     rax, [rsp+0F8h+var_D8]
.text:0000000000002127                 mov     [rsp+0F8h+var_F8], 30h ; '0'
.text:000000000000212E                 mov     [rsp+0F8h+var_F4], 30h ; '0'
.text:0000000000002136                 mov     [rsp+0F8h+var_E8], rax
.text:000000000000213B                 call    version_etc_va
.text:0000000000002140                 xor     edi, edi        ; status
.text:0000000000002142                 call    _exit
.text:0000000000002142 ; ---------------------------------------------------------------------------
.text:0000000000002147                 align 10h
.text:0000000000002150
.text:0000000000002150 loc_2150:                               ; CODE XREF: parse_gnu_standard_options_only+B0↑j
.text:0000000000002150                 mov     edi, cs:exit_failure
.text:0000000000002156                 call    rbp
.text:0000000000002158
.text:0000000000002158 loc_2158:                               ; CODE XREF: parse_gnu_standard_options_only+A2↑j
.text:0000000000002158                                         ; parse_gnu_standard_options_only+134↓j
.text:0000000000002158                 mov     rax, [rsp+0F8h+var_E0]
.text:000000000000215D                 xor     rax, fs:28h
.text:0000000000002166                 mov     cs:opterr@@GLIBC_2_2_5, ebx
.text:000000000000216C                 jnz     short loc_2186
.text:000000000000216E                 add     rsp, 0D0h
.text:0000000000002175                 pop     rbx
.text:0000000000002176                 pop     rbp
.text:0000000000002177                 pop     r12
.text:0000000000002179                 pop     r13
.text:000000000000217B                 pop     r14
.text:000000000000217D                 retn
.text:000000000000217D ; ---------------------------------------------------------------------------
.text:000000000000217E                 align 20h
.text:0000000000002180
.text:0000000000002180 loc_2180:                               ; CODE XREF: parse_gnu_standard_options_only+A7↑j
.text:0000000000002180                 xor     edi, edi
.text:0000000000002182                 call    rbp
.text:0000000000002184                 jmp     short loc_2158
.text:0000000000002186 ; ---------------------------------------------------------------------------
.text:0000000000002186
.text:0000000000002186 loc_2186:                               ; CODE XREF: parse_gnu_standard_options_only+11C↑j
.text:0000000000002186                 call    ___stack_chk_fail
.text:0000000000002186 ; } // starts at 2050
.text:0000000000002186 parse_gnu_standard_options_only endp
.text:0000000000002186
.text:0000000000002186 ; ---------------------------------------------------------------------------
.text:000000000000218B                 align 10h
.text:0000000000002190
.text:0000000000002190 ; =============== S U B R O U T I N E =======================================
.text:0000000000002190
.text:0000000000002190
.text:0000000000002190                 public set_program_name
.text:0000000000002190 set_program_name proc near              ; CODE XREF: main+E↑p
.text:0000000000002190 ; __unwind {
.text:0000000000002190                 test    rdi, rdi
.text:0000000000002193                 push    rbx
.text:0000000000002194                 jz      short loc_220D
.text:0000000000002196                 mov     esi, 2Fh ; '/'  ; c
.text:000000000000219B                 mov     rbx, rdi
.text:000000000000219E                 call    _strrchr
.text:00000000000021A3                 test    rax, rax
.text:00000000000021A6                 jz      short loc_21FD
.text:00000000000021A8                 lea     r8, [rax+1]
.text:00000000000021AC                 mov     rdx, r8
.text:00000000000021AF                 sub     rdx, rbx
.text:00000000000021B2                 cmp     rdx, 6
.text:00000000000021B6                 jle     short loc_21FD
.text:00000000000021B8                 lea     rsi, [rax-6]
.text:00000000000021BC                 lea     rdi, aLibs      ; "/.libs/"
.text:00000000000021C3                 mov     ecx, 7
.text:00000000000021C8                 repe cmpsb
.text:00000000000021CA                 setnbe  dl
.text:00000000000021CD                 sbb     dl, 0
.text:00000000000021D0                 test    dl, dl
.text:00000000000021D2                 jnz     short loc_21FD
.text:00000000000021D4                 lea     rdi, aLt        ; "lt-"
.text:00000000000021DB                 mov     ecx, 3
.text:00000000000021E0                 mov     rsi, r8
.text:00000000000021E3                 mov     rbx, r8
.text:00000000000021E6                 repe cmpsb
.text:00000000000021E8                 setnbe  dl
.text:00000000000021EB                 sbb     dl, 0
.text:00000000000021EE                 test    dl, dl
.text:00000000000021F0                 jnz     short loc_21FD
.text:00000000000021F2                 lea     rbx, [rax+4]
.text:00000000000021F6                 mov     cs:__bss_start, rbx
.text:00000000000021FD
.text:00000000000021FD loc_21FD:                               ; CODE XREF: set_program_name+16↑j
.text:00000000000021FD                                         ; set_program_name+26↑j ...
.text:00000000000021FD                 mov     cs:program_name, rbx
.text:0000000000002204                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:000000000000220B                 pop     rbx
.text:000000000000220C                 retn
.text:000000000000220D ; ---------------------------------------------------------------------------
.text:000000000000220D
.text:000000000000220D loc_220D:                               ; CODE XREF: set_program_name+4↑j
.text:000000000000220D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000002214                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:000000000000221B                 mov     edx, 37h ; '7'  ; n
.text:0000000000002220                 mov     esi, 1          ; size
.text:0000000000002225                 call    _fwrite
.text:000000000000222A                 call    _abort
.text:000000000000222A ; } // starts at 2190
.text:000000000000222A set_program_name endp
.text:000000000000222A
.text:000000000000222A ; ---------------------------------------------------------------------------
.text:000000000000222F                 align 10h
.text:0000000000002230
.text:0000000000002230 ; =============== S U B R O U T I N E =======================================
.text:0000000000002230
.text:0000000000002230 ; Attributes: info_from_lumina
.text:0000000000002230
.text:0000000000002230 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000002230 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000002230                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000002230 ; __unwind {
.text:0000000000002230                 push    rbp
.text:0000000000002231                 push    rbx
.text:0000000000002232                 mov     rbp, rdi
.text:0000000000002235                 mov     ebx, esi
.text:0000000000002237                 sub     rsp, 8
.text:000000000000223B                 call    locale_charset
.text:0000000000002240                 movzx   edx, byte ptr [rax]
.text:0000000000002243                 and     edx, 0FFFFFFDFh
.text:0000000000002246                 cmp     dl, 55h ; 'U'
.text:0000000000002249                 jz      short loc_22C0
.text:000000000000224B                 cmp     dl, 47h ; 'G'
.text:000000000000224E                 jz      short loc_2270
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000002250                                         ; gettext_quote+50↓j ...
.text:0000000000002250                 lea     rax, unk_503B
.text:0000000000002257                 lea     rdx, asc_503D   ; "'"
.text:000000000000225E                 cmp     ebx, 9
.text:0000000000002261                 cmovnz  rax, rdx
.text:0000000000002265                 add     rsp, 8
.text:0000000000002269                 pop     rbx
.text:000000000000226A                 pop     rbp
.text:000000000000226B                 retn
.text:000000000000226B ; ---------------------------------------------------------------------------
.text:000000000000226C                 align 10h
.text:0000000000002270
.text:0000000000002270 loc_2270:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000002270                 movzx   edx, byte ptr [rax+1]
.text:0000000000002274                 and     edx, 0FFFFFFDFh
.text:0000000000002277                 cmp     dl, 42h ; 'B'
.text:000000000000227A                 jnz     short loc_2250
.text:000000000000227C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000002280                 jnz     short loc_2250
.text:0000000000002282                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000002286                 jnz     short loc_2250
.text:0000000000002288                 cmp     byte ptr [rax+4], 30h ; '0'
.text:000000000000228C                 jnz     short loc_2250
.text:000000000000228E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000002292                 jnz     short loc_2250
.text:0000000000002294                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000002298                 jnz     short loc_2250
.text:000000000000229A                 cmp     byte ptr [rax+7], 0
.text:000000000000229E                 jnz     short loc_2250
.text:00000000000022A0                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000022A4                 lea     rax, unk_5034
.text:00000000000022AB                 lea     rdx, unk_5038
.text:00000000000022B2                 cmovnz  rax, rdx
.text:00000000000022B6                 add     rsp, 8
.text:00000000000022BA                 pop     rbx
.text:00000000000022BB                 pop     rbp
.text:00000000000022BC                 retn
.text:00000000000022BC ; ---------------------------------------------------------------------------
.text:00000000000022BD                 align 20h
.text:00000000000022C0
.text:00000000000022C0 loc_22C0:                               ; CODE XREF: gettext_quote+19↑j
.text:00000000000022C0                 movzx   edx, byte ptr [rax+1]
.text:00000000000022C4                 and     edx, 0FFFFFFDFh
.text:00000000000022C7                 cmp     dl, 54h ; 'T'
.text:00000000000022CA                 jnz     short loc_2250
.text:00000000000022CC                 movzx   edx, byte ptr [rax+2]
.text:00000000000022D0                 and     edx, 0FFFFFFDFh
.text:00000000000022D3                 cmp     dl, 46h ; 'F'
.text:00000000000022D6                 jnz     loc_2250
.text:00000000000022DC                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:00000000000022E0                 jnz     loc_2250
.text:00000000000022E6                 cmp     byte ptr [rax+4], 38h ; '8'
.text:00000000000022EA                 jnz     loc_2250
.text:00000000000022F0                 cmp     byte ptr [rax+5], 0
.text:00000000000022F4                 jnz     loc_2250
.text:00000000000022FA                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:00000000000022FE                 lea     rax, unk_502C
.text:0000000000002305                 lea     rdx, unk_5030
.text:000000000000230C                 cmovnz  rax, rdx
.text:0000000000002310                 add     rsp, 8
.text:0000000000002314                 pop     rbx
.text:0000000000002315                 pop     rbp
.text:0000000000002316                 retn
.text:0000000000002316 ; } // starts at 2230
.text:0000000000002316 gettext_quote   endp
.text:0000000000002316
.text:0000000000002316 ; ---------------------------------------------------------------------------
.text:0000000000002317                 align 20h
.text:0000000000002320
.text:0000000000002320 ; =============== S U B R O U T I N E =======================================
.text:0000000000002320
.text:0000000000002320 ; Attributes: info_from_lumina
.text:0000000000002320
.text:0000000000002320 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000002320 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000002320                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000002320
.text:0000000000002320 var_E0          = dword ptr -0E0h
.text:0000000000002320 var_DB          = byte ptr -0DBh
.text:0000000000002320 var_DA          = byte ptr -0DAh
.text:0000000000002320 var_D9          = byte ptr -0D9h
.text:0000000000002320 s               = qword ptr -0D8h
.text:0000000000002320 n               = qword ptr -0D0h
.text:0000000000002320 var_C8          = qword ptr -0C8h
.text:0000000000002320 ps              = qword ptr -0C0h
.text:0000000000002320 var_B8          = qword ptr -0B8h
.text:0000000000002320 var_B0          = qword ptr -0B0h
.text:0000000000002320 var_A8          = qword ptr -0A8h
.text:0000000000002320 s2              = qword ptr -0A0h
.text:0000000000002320 var_98          = qword ptr -98h
.text:0000000000002320 var_90          = qword ptr -90h
.text:0000000000002320 var_88          = qword ptr -88h
.text:0000000000002320 var_80          = qword ptr -80h
.text:0000000000002320 var_78          = qword ptr -78h
.text:0000000000002320 var_70          = dword ptr -70h
.text:0000000000002320 var_6C          = byte ptr -6Ch
.text:0000000000002320 var_6B          = byte ptr -6Bh
.text:0000000000002320 var_6A          = byte ptr -6Ah
.text:0000000000002320 var_69          = byte ptr -69h
.text:0000000000002320 var_68          = qword ptr -68h
.text:0000000000002320 var_60          = qword ptr -60h
.text:0000000000002320 wc              = dword ptr -4Ch
.text:0000000000002320 var_48          = qword ptr -48h
.text:0000000000002320 var_40          = qword ptr -40h
.text:0000000000002320 arg_0           = qword ptr  8
.text:0000000000002320 arg_8           = qword ptr  10h
.text:0000000000002320 arg_10          = qword ptr  18h
.text:0000000000002320
.text:0000000000002320 ; __unwind {
.text:0000000000002320                 push    r15
.text:0000000000002322                 push    r14
.text:0000000000002324                 mov     r15d, r8d
.text:0000000000002327                 push    r13
.text:0000000000002329                 push    r12
.text:000000000000232B                 mov     r14, rdi
.text:000000000000232E                 push    rbp
.text:000000000000232F                 push    rbx
.text:0000000000002330                 mov     ebx, r9d
.text:0000000000002333                 mov     r13, rsi
.text:0000000000002336                 mov     rbp, rcx
.text:0000000000002339                 and     ebx, 2
.text:000000000000233C                 sub     rsp, 0B8h
.text:0000000000002343                 mov     rax, [rsp+0E8h+arg_0]
.text:000000000000234B                 mov     [rsp+0E8h+s], rdx
.text:0000000000002350                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000002355                 mov     [rsp+0E8h+var_70], r9d
.text:000000000000235A                 mov     [rsp+0E8h+var_C8], rax
.text:000000000000235F                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000002367                 mov     [rsp+0E8h+var_80], rax
.text:000000000000236C                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000002374                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002379                 mov     rax, fs:28h
.text:0000000000002382                 mov     [rsp+0E8h+var_40], rax
.text:000000000000238A                 xor     eax, eax
.text:000000000000238C                 call    ___ctype_get_mb_cur_max
.text:0000000000002391                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000002395                 mov     [rsp+0E8h+var_90], rax
.text:000000000000239A                 ja      def_23B1        ; jumptable 00000000000121F1 default case
.text:00000000000023A0                 lea     rcx, jpt_23B1
.text:00000000000023A7                 mov     edx, r15d
.text:00000000000023AA                 movsxd  rax, ds:(jpt_23B1 - 50A0h)[rcx+rdx*4]
.text:00000000000023AE                 add     rax, rcx
.text:00000000000023B1                 jmp     rax             ; switch jump
.text:00000000000023B3 ; ---------------------------------------------------------------------------
.text:00000000000023B3
.text:00000000000023B3 loc_23B3:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000023B3                                         ; quotearg_buffer_restyled+C66↓j
.text:00000000000023B3                                         ; DATA XREF: ...
.text:00000000000023B3                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:00000000000023B8                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000023BD                 xor     r12d, r12d
.text:00000000000023C0                 mov     [rsp+0E8h+var_98], 0
.text:00000000000023C9                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000023CE                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000023D3
.text:00000000000023D3 loc_23D3:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:00000000000023D3                 lea     rax, asc_503D   ; "'"
.text:00000000000023DA                 mov     [rsp+0E8h+n], 1
.text:00000000000023E3                 xor     r15d, r15d
.text:00000000000023E6                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000023EE                 mov     [rsp+0E8h+s2], rax
.text:00000000000023F3
.text:00000000000023F3 loc_23F3:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:00000000000023F3                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:00000000000023F3                 xor     r11d, r11d
.text:00000000000023F6                 mov     rax, rbp
.text:00000000000023F9                 mov     r8d, r12d
.text:00000000000023FC                 mov     rbp, r11
.text:00000000000023FF                 mov     r11, rax
.text:0000000000002402                 nop     word ptr [rax+rax+00h]
.text:0000000000002408
.text:0000000000002408 loc_2408:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000002408                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000002408                 cmp     r11, rbp
.text:000000000000240B                 setnz   r12b
.text:000000000000240F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002413                 jnz     short loc_2422
.text:0000000000002415                 mov     rax, [rsp+0E8h+s]
.text:000000000000241A                 cmp     byte ptr [rax+rbp], 0
.text:000000000000241E                 setnz   r12b
.text:0000000000002422
.text:0000000000002422 loc_2422:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000002422                 test    r12b, r12b
.text:0000000000002425                 jz      loc_2A80
.text:000000000000242B                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002430                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002435                 lea     r9, [rdi+rbp]
.text:0000000000002439                 setnz   al
.text:000000000000243C                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002440                 mov     r10d, eax
.text:0000000000002443                 jz      loc_24F0
.text:0000000000002449                 mov     rax, [rsp+0E8h+n]
.text:000000000000244E                 test    rax, rax
.text:0000000000002451                 jz      loc_2880
.text:0000000000002457                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000245B                 lea     rbx, [rbp+rax+0]
.text:0000000000002460                 jnz     short loc_2490
.text:0000000000002462                 cmp     rax, 1
.text:0000000000002466                 jbe     short loc_2490
.text:0000000000002468                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:000000000000246D                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002472                 mov     [rsp+0E8h+ps], r9
.text:0000000000002477                 call    _strlen
.text:000000000000247C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002482                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002488                 mov     r11, rax
.text:000000000000248B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002490
.text:0000000000002490 loc_2490:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002490                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002490                 cmp     rbx, r11
.text:0000000000002493                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002498                 ja      loc_2A50
.text:000000000000249E                 mov     rdx, [rsp+0E8h+n] ; n
.text:00000000000024A3                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:00000000000024A8                 mov     rdi, r9         ; s1
.text:00000000000024AB                 mov     [rsp+0E8h+var_A8], r11
.text:00000000000024B0                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:00000000000024B5                 mov     [rsp+0E8h+var_B8], r9
.text:00000000000024BA                 call    _memcmp
.text:00000000000024BF                 test    eax, eax
.text:00000000000024C1                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000024C6                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:00000000000024CC                 mov     r11, [rsp+0E8h+var_A8]
.text:00000000000024D1                 jnz     loc_2A50
.text:00000000000024D7                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000024DC                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000024E2                 jnz     loc_3465
.text:00000000000024E8                 nop     dword ptr [rax+rax+00000000h]
.text:00000000000024F0
.text:00000000000024F0 loc_24F0:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:00000000000024F0                                         ; quotearg_buffer_restyled+733↓j
.text:00000000000024F0                 movzx   ebx, byte ptr [r9]
.text:00000000000024F4                 cmp     bl, 7Eh         ; switch 127 cases
.text:00000000000024F7                 ja      def_250E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000024FD                 lea     rcx, jpt_250E
.text:0000000000002504                 movzx   edx, bl
.text:0000000000002507                 movsxd  rax, ds:(jpt_250E - 50CCh)[rcx+rdx*4]
.text:000000000000250B                 add     rax, rcx
.text:000000000000250E                 jmp     rax             ; switch jump
.text:0000000000002510 ; ---------------------------------------------------------------------------
.text:0000000000002510
.text:0000000000002510 loc_2510:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002510                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:0000000000002510                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:0000000000002513
.text:0000000000002513 loc_2513:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002513                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002513                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:0000000000002517                 setnz   al
.text:000000000000251A                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:000000000000251E                 jnz     short loc_252C
.text:0000000000002520                 mov     rax, [rsp+0E8h+s]
.text:0000000000002525                 cmp     byte ptr [rax+1], 0
.text:0000000000002529                 setnz   al
.text:000000000000252C
.text:000000000000252C loc_252C:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:000000000000252C                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002531                 setz    dl
.text:0000000000002534                 test    al, al
.text:0000000000002536                 jz      loc_2788
.text:000000000000253C
.text:000000000000253C loc_253C:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:000000000000253C                 xor     r12d, r12d
.text:000000000000253F                 xor     eax, eax
.text:0000000000002541                 nop     dword ptr [rax+00000000h]
.text:0000000000002548
.text:0000000000002548 loc_2548:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:0000000000002548                                         ; quotearg_buffer_restyled+30C↓j ...
.text:0000000000002548                 cmp     [rsp+0E8h+var_DB], 1
.text:000000000000254D                 jnz     loc_2662
.text:0000000000002553                 test    dl, dl
.text:0000000000002555                 jnz     loc_2662
.text:000000000000255B
.text:000000000000255B loc_255B:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:000000000000255B                 mov     rsi, [rsp+0E8h+var_C8]
.text:0000000000002560                 test    rsi, rsi
.text:0000000000002563                 jz      short loc_2579
.text:0000000000002565                 mov     edx, ebx
.text:0000000000002567                 shr     dl, 5
.text:000000000000256A                 movzx   edx, dl
.text:000000000000256D                 mov     edx, [rsi+rdx*4]
.text:0000000000002570                 bt      edx, ebx
.text:0000000000002573                 jb      loc_26C3
.text:0000000000002579
.text:0000000000002579 loc_2579:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002579                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002579                 test    r10b, r10b
.text:000000000000257C                 jnz     loc_26C3
.text:0000000000002582                 xor     eax, 1
.text:0000000000002585                 add     rbp, 1
.text:0000000000002589                 and     eax, r8d
.text:000000000000258C
.text:000000000000258C loc_258C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000258C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000258C                 test    al, al
.text:000000000000258E                 jz      short loc_25B0
.text:0000000000002590                 cmp     r13, r15
.text:0000000000002593                 jbe     short loc_259A
.text:0000000000002595                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000259A
.text:000000000000259A loc_259A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000259A                 lea     rax, [r15+1]
.text:000000000000259E                 cmp     r13, rax
.text:00000000000025A1                 jbe     short loc_25A9
.text:00000000000025A3                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000025A9
.text:00000000000025A9 loc_25A9:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:00000000000025A9                 add     r15, 2
.text:00000000000025AD                 xor     r8d, r8d
.text:00000000000025B0
.text:00000000000025B0 loc_25B0:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:00000000000025B0                                         ; quotearg_buffer_restyled+403↓j ...
.text:00000000000025B0                 cmp     r15, r13
.text:00000000000025B3                 jnb     short loc_25B9
.text:00000000000025B5                 mov     [r14+r15], bl
.text:00000000000025B9
.text:00000000000025B9 loc_25B9:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:00000000000025B9                 movzx   edi, [rsp+0E8h+var_DA]
.text:00000000000025BE                 add     r15, 1
.text:00000000000025C2                 mov     eax, 0
.text:00000000000025C7                 test    r12b, r12b
.text:00000000000025CA                 cmovz   edi, eax
.text:00000000000025CD                 mov     [rsp+0E8h+var_DA], dil
.text:00000000000025D2                 jmp     loc_2408
.text:00000000000025D2 ; ---------------------------------------------------------------------------
.text:00000000000025D7                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000025E0                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000025E0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:00000000000025E3
.text:00000000000025E3 loc_25E3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000025E3                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:00000000000025E3                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:00000000000025E7                 cmp     eax, 2
.text:00000000000025EA                 jz      loc_2BA8
.text:00000000000025F0                 cmp     eax, 5
.text:00000000000025F3                 jz      loc_2B68
.text:00000000000025F9                 cmp     eax, 2
.text:00000000000025FC                 mov     ebx, 3Fh ; '?'
.text:0000000000002601                 setz    dl
.text:0000000000002604                 xor     r12d, r12d
.text:0000000000002607                 xor     eax, eax
.text:0000000000002609                 jmp     loc_2548
.text:0000000000002609 ; ---------------------------------------------------------------------------
.text:000000000000260E                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002610                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:0000000000002610                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:0000000000002613
.text:0000000000002613 loc_2613:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002613                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002613                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:0000000000002618                 jz      loc_2B20
.text:000000000000261E                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002623                 xor     edx, edx
.text:0000000000002625                 xor     eax, eax
.text:0000000000002627                 mov     ebx, 27h ; '''
.text:000000000000262C                 jmp     loc_2548
.text:000000000000262C ; ---------------------------------------------------------------------------
.text:0000000000002631                 align 8
.text:0000000000002638
.text:0000000000002638 loc_2638:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002638                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002638                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:000000000000263D                 mov     ebx, 74h ; 't'
.text:0000000000002642
.text:0000000000002642 loc_2642:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:0000000000002642                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:0000000000002642                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002647                 setz    al
.text:000000000000264A                 and     al, [rsp+0E8h+var_D9]
.text:000000000000264E                 jnz     loc_279E
.text:0000000000002654
.text:0000000000002654 loc_2654:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:0000000000002654                                         ; quotearg_buffer_restyled+45A↓j ...
.text:0000000000002654                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002659                 jnz     short loc_26C0
.text:000000000000265B
.text:000000000000265B loc_265B:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:000000000000265B                 mov     ebx, edx
.text:000000000000265D                 xor     r12d, r12d
.text:0000000000002660                 xor     eax, eax
.text:0000000000002662
.text:0000000000002662 loc_2662:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:0000000000002662                                         ; quotearg_buffer_restyled+235↑j
.text:0000000000002662                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002667                 jnz     loc_255B
.text:000000000000266D                 jmp     loc_2579
.text:000000000000266D ; ---------------------------------------------------------------------------
.text:0000000000002672                 align 8
.text:0000000000002678
.text:0000000000002678 loc_2678:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002678                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002678                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000267D                 mov     ebx, 62h ; 'b'
.text:0000000000002682                 jmp     short loc_2654
.text:0000000000002682 ; ---------------------------------------------------------------------------
.text:0000000000002684                 align 8
.text:0000000000002688
.text:0000000000002688 loc_2688:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002688                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002688                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000268D                 jz      loc_2A60
.text:0000000000002693                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002698                 jz      loc_28B0
.text:000000000000269E
.text:000000000000269E loc_269E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000269E                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026A3                 jz      loc_28B0
.text:00000000000026A9                 cmp     [rsp+0E8h+n], 0
.text:00000000000026AF                 jnz     loc_2A6B
.text:00000000000026B5                 mov     ebx, 5Ch ; '\'
.text:00000000000026BA                 nop     word ptr [rax+rax+00h]
.text:00000000000026C0
.text:00000000000026C0 loc_26C0:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:00000000000026C0                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:00000000000026C0                 xor     r12d, r12d
.text:00000000000026C3
.text:00000000000026C3 loc_26C3:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:00000000000026C3                                         ; quotearg_buffer_restyled+25C↑j
.text:00000000000026C3                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000026C8                 setz    dl
.text:00000000000026CB                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026D0                 mov     eax, edx
.text:00000000000026D2                 jnz     loc_2F28
.text:00000000000026D8                 mov     eax, r8d
.text:00000000000026DB                 xor     eax, 1
.text:00000000000026DE                 and     al, dl
.text:00000000000026E0                 jz      short loc_2711
.text:00000000000026E2                 cmp     r13, r15
.text:00000000000026E5                 jbe     short loc_26EC
.text:00000000000026E7                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000026EC
.text:00000000000026EC loc_26EC:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:00000000000026EC                 lea     rdx, [r15+1]
.text:00000000000026F0                 cmp     r13, rdx
.text:00000000000026F3                 jbe     short loc_26FB
.text:00000000000026F5                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000026FB
.text:00000000000026FB loc_26FB:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:00000000000026FB                 lea     rdx, [r15+2]
.text:00000000000026FF                 cmp     r13, rdx
.text:0000000000002702                 jbe     short loc_270A
.text:0000000000002704                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000270A
.text:000000000000270A loc_270A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000270A                 add     r15, 3
.text:000000000000270E                 mov     r8d, eax
.text:0000000000002711
.text:0000000000002711 loc_2711:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:0000000000002711                 cmp     r13, r15
.text:0000000000002714                 jbe     short loc_271B
.text:0000000000002716                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000271B
.text:000000000000271B loc_271B:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:000000000000271B                 add     r15, 1
.text:000000000000271F                 add     rbp, 1
.text:0000000000002723                 jmp     loc_25B0
.text:0000000000002723 ; ---------------------------------------------------------------------------
.text:0000000000002728                 align 10h
.text:0000000000002730
.text:0000000000002730 loc_2730:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002730                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002730                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:0000000000002735                 jnz     loc_2903
.text:000000000000273B                 xor     edx, edx
.text:000000000000273D                 test    byte ptr [rsp+0E8h+var_70], 1
.text:0000000000002742                 jz      loc_265B
.text:0000000000002748                 add     rbp, 1
.text:000000000000274C                 jmp     loc_2408
.text:000000000000274C ; ---------------------------------------------------------------------------
.text:0000000000002751                 align 8
.text:0000000000002758
.text:0000000000002758 loc_2758:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002758                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002758                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:000000000000275D                 setz    dl
.text:0000000000002760                 xor     eax, eax
.text:0000000000002762                 jmp     loc_2548
.text:0000000000002762 ; ---------------------------------------------------------------------------
.text:0000000000002767                 align 10h
.text:0000000000002770
.text:0000000000002770 loc_2770:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002770                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002770                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002775                 mov     ebx, 61h ; 'a'
.text:000000000000277A                 jmp     loc_2654
.text:000000000000277A ; ---------------------------------------------------------------------------
.text:000000000000277F                 align 20h
.text:0000000000002780
.text:0000000000002780 loc_2780:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002780                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002780                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002785                 setz    dl
.text:0000000000002788
.text:0000000000002788 loc_2788:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002788                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002788                 test    rbp, rbp
.text:000000000000278B                 jnz     loc_253C
.text:0000000000002791
.text:0000000000002791 loc_2791:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002791                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002791                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002796                 and     al, dl
.text:0000000000002798                 jz      loc_2548
.text:000000000000279E
.text:000000000000279E loc_279E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000279E                 mov     rbp, r11
.text:00000000000027A1                 mov     [rsp+0E8h+var_E0], 2
.text:00000000000027A9                 jmp     loc_2EA9
.text:00000000000027A9 ; ---------------------------------------------------------------------------
.text:00000000000027AE                 align 10h
.text:00000000000027B0
.text:00000000000027B0 loc_27B0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027B0                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:00000000000027B0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000027B5                 setz    dl
.text:00000000000027B8                 xor     r12d, r12d
.text:00000000000027BB                 jmp     short loc_2791
.text:00000000000027BB ; ---------------------------------------------------------------------------
.text:00000000000027BD                 align 20h
.text:00000000000027C0
.text:00000000000027C0 loc_27C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027C0                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:00000000000027C0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:00000000000027C5                 mov     ebx, 20h ; ' '
.text:00000000000027CA                 setz    dl
.text:00000000000027CD                 jmp     short loc_2791
.text:00000000000027CD ; ---------------------------------------------------------------------------
.text:00000000000027CF                 align 10h
.text:00000000000027D0
.text:00000000000027D0 loc_27D0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027D0                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:00000000000027D0                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:00000000000027D5                 mov     ebx, 72h ; 'r'
.text:00000000000027DA                 jmp     loc_2642
.text:00000000000027DA ; ---------------------------------------------------------------------------
.text:00000000000027DF                 align 20h
.text:00000000000027E0
.text:00000000000027E0 loc_27E0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027E0                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:00000000000027E0                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:00000000000027E5                 mov     ebx, 66h ; 'f'
.text:00000000000027EA                 jmp     loc_2654
.text:00000000000027EA ; ---------------------------------------------------------------------------
.text:00000000000027EF                 align 10h
.text:00000000000027F0
.text:00000000000027F0 loc_27F0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000027F0                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:00000000000027F0                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:00000000000027F5                 mov     ebx, 76h ; 'v'
.text:00000000000027FA                 jmp     loc_2654
.text:00000000000027FA ; ---------------------------------------------------------------------------
.text:00000000000027FF                 align 20h
.text:0000000000002800
.text:0000000000002800 loc_2800:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002800                                         ; DATA XREF: .rodata:jpt_250E↓o
.text:0000000000002800                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002805                 mov     ebx, 6Eh ; 'n'
.text:000000000000280A                 jmp     loc_2642
.text:000000000000280A ; ---------------------------------------------------------------------------
.text:000000000000280F                 align 10h
.text:0000000000002810
.text:0000000000002810 def_289A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:0000000000002810                                         ; quotearg_buffer_restyled+57A↓j
.text:0000000000002810                                         ; DATA XREF: ...
.text:0000000000002810                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002813                 nop     dword ptr [rax+rax+00h]
.text:0000000000002818
.text:0000000000002818 def_250E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:0000000000002818                                         ; quotearg_buffer_restyled+1EE↑j
.text:0000000000002818                                         ; DATA XREF: ...
.text:0000000000002818                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000281E                 jnz     loc_2BC8
.text:0000000000002824                 mov     [rsp+0E8h+var_B0], r11
.text:0000000000002829                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:000000000000282E                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002833                 call    ___ctype_b_loc
.text:0000000000002838                 mov     rcx, [rax]
.text:000000000000283B                 movzx   edx, bl
.text:000000000000283E                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002844                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:000000000000284A                 mov     r11, [rsp+0E8h+var_B0]
.text:000000000000284F                 mov     edi, 1
.text:0000000000002854                 movzx   eax, word ptr [rcx+rdx*2]
.text:0000000000002858                 and     ax, 4000h
.text:000000000000285C                 setnz   r12b
.text:0000000000002860                 setz    al
.text:0000000000002863                 and     al, [rsp+0E8h+var_DB]
.text:0000000000002867
.text:0000000000002867 loc_2867:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:0000000000002867                 test    al, al
.text:0000000000002869                 jnz     loc_3201
.text:000000000000286F                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002874                 setz    dl
.text:0000000000002877                 jmp     loc_2548
.text:0000000000002877 ; ---------------------------------------------------------------------------
.text:000000000000287C                 align 20h
.text:0000000000002880
.text:0000000000002880 loc_2880:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002880                 movzx   ebx, byte ptr [r9]
.text:0000000000002884                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002887                 ja      short def_289A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002889                 lea     rcx, jpt_289A
.text:0000000000002890                 movzx   edx, bl
.text:0000000000002893                 movsxd  rax, ds:(jpt_289A - 52C8h)[rcx+rdx*4]
.text:0000000000002897                 add     rax, rcx
.text:000000000000289A                 jmp     rax             ; switch jump
.text:000000000000289A ; ---------------------------------------------------------------------------
.text:000000000000289C                 align 20h
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028A0                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000028A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:00000000000028A3                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000028A8                 jnz     loc_269E
.text:00000000000028AE                 xchg    ax, ax
.text:00000000000028B0
.text:00000000000028B0 loc_28B0:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:00000000000028B0                                         ; quotearg_buffer_restyled+383↑j
.text:00000000000028B0                 mov     edx, 5Ch ; '\'
.text:00000000000028B5                 mov     ebx, 5Ch ; '\'
.text:00000000000028BA                 jmp     loc_2654
.text:00000000000028BA ; ---------------------------------------------------------------------------
.text:00000000000028BF                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028C0                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000028C0                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:00000000000028C5                 xor     r10d, r10d
.text:00000000000028C8                 mov     ebx, 66h ; 'f'
.text:00000000000028CD                 jmp     loc_2654
.text:00000000000028CD ; ---------------------------------------------------------------------------
.text:00000000000028D2                 align 8
.text:00000000000028D8
.text:00000000000028D8 loc_28D8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028D8                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000028D8                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:00000000000028DD                 xor     r10d, r10d
.text:00000000000028E0                 mov     ebx, 6Eh ; 'n'
.text:00000000000028E5                 jmp     loc_2642
.text:00000000000028E5 ; ---------------------------------------------------------------------------
.text:00000000000028EA                 align 10h
.text:00000000000028F0
.text:00000000000028F0 loc_28F0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000028F0                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000028F0                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:00000000000028F5                 jmp     loc_26C0
.text:00000000000028F5 ; ---------------------------------------------------------------------------
.text:00000000000028FA                 align 20h
.text:0000000000002900
.text:0000000000002900 loc_2900:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002900                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:0000000000002900                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002903
.text:0000000000002903 loc_2903:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002903                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002908                 setz    dl
.text:000000000000290B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002910                 jnz     loc_34AA
.text:0000000000002916                 mov     eax, r8d
.text:0000000000002919                 mov     rcx, r15
.text:000000000000291C                 xor     eax, 1
.text:000000000000291F                 and     al, dl
.text:0000000000002921                 jz      short loc_2950
.text:0000000000002923                 cmp     r13, r15
.text:0000000000002926                 jbe     short loc_292D
.text:0000000000002928                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000292D
.text:000000000000292D loc_292D:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:000000000000292D                 lea     rcx, [r15+1]
.text:0000000000002931                 cmp     r13, rcx
.text:0000000000002934                 jbe     short loc_293C
.text:0000000000002936                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000293C
.text:000000000000293C loc_293C:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:000000000000293C                 lea     rcx, [r15+2]
.text:0000000000002940                 cmp     r13, rcx
.text:0000000000002943                 ja      loc_2F79
.text:0000000000002949
.text:0000000000002949 loc_2949:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:0000000000002949                 lea     rcx, [r15+3]
.text:000000000000294D                 mov     r8d, eax
.text:0000000000002950
.text:0000000000002950 loc_2950:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:0000000000002950                 cmp     r13, rcx
.text:0000000000002953                 jbe     short loc_295A
.text:0000000000002955                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:000000000000295A
.text:000000000000295A loc_295A:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:000000000000295A                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000295F                 lea     r15, [rcx+1]
.text:0000000000002963                 jz      loc_2F69
.text:0000000000002969                 lea     rax, [rbp+1]
.text:000000000000296D                 cmp     rax, r11
.text:0000000000002970                 jnb     short loc_298B
.text:0000000000002972                 mov     rax, [rsp+0E8h+s]
.text:0000000000002977                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000297C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002980                 sub     eax, 30h ; '0'
.text:0000000000002983                 cmp     al, 9
.text:0000000000002985                 jbe     loc_31B9
.text:000000000000298B
.text:000000000000298B loc_298B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000298B                 mov     eax, r12d
.text:000000000000298E                 mov     ebx, 30h ; '0'
.text:0000000000002993                 xor     r12d, r12d
.text:0000000000002996                 jmp     loc_2548
.text:0000000000002996 ; ---------------------------------------------------------------------------
.text:000000000000299B                 align 20h
.text:00000000000029A0
.text:00000000000029A0 loc_29A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029A0                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000029A0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:00000000000029A5                 mov     r12d, r10d
.text:00000000000029A8                 setz    dl
.text:00000000000029AB                 xor     r10d, r10d
.text:00000000000029AE                 xor     eax, eax
.text:00000000000029B0                 jmp     loc_2548
.text:00000000000029B0 ; ---------------------------------------------------------------------------
.text:00000000000029B5                 align 8
.text:00000000000029B8
.text:00000000000029B8 loc_29B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029B8                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000029B8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:00000000000029BD                 setz    dl
.text:00000000000029C0                 xor     r10d, r10d
.text:00000000000029C3                 jmp     loc_2788
.text:00000000000029C3 ; ---------------------------------------------------------------------------
.text:00000000000029C8                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029D0                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000029D0                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:00000000000029D5                 setz    dl
.text:00000000000029D8                 xor     r10d, r10d
.text:00000000000029DB                 xor     r12d, r12d
.text:00000000000029DE                 jmp     loc_2791
.text:00000000000029DE ; ---------------------------------------------------------------------------
.text:00000000000029E3                 align 8
.text:00000000000029E8
.text:00000000000029E8 loc_29E8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000029E8                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:00000000000029E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:00000000000029ED                 mov     r12d, r10d
.text:00000000000029F0                 mov     ebx, 20h ; ' '
.text:00000000000029F5                 setz    dl
.text:00000000000029F8                 xor     r10d, r10d
.text:00000000000029FB                 jmp     loc_2791
.text:0000000000002A00 ; ---------------------------------------------------------------------------
.text:0000000000002A00
.text:0000000000002A00 loc_2A00:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A00                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:0000000000002A00                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002A05                 xor     r10d, r10d
.text:0000000000002A08                 mov     ebx, 72h ; 'r'
.text:0000000000002A0D                 jmp     loc_2642
.text:0000000000002A0D ; ---------------------------------------------------------------------------
.text:0000000000002A12                 align 8
.text:0000000000002A18
.text:0000000000002A18 loc_2A18:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A18                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:0000000000002A18                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:0000000000002A1D                 jmp     loc_26C0
.text:0000000000002A1D ; ---------------------------------------------------------------------------
.text:0000000000002A22                 align 8
.text:0000000000002A28
.text:0000000000002A28 loc_2A28:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A28                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:0000000000002A28                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:0000000000002A2D                 xor     r10d, r10d
.text:0000000000002A30                 mov     ebx, 74h ; 't'
.text:0000000000002A35                 jmp     loc_2642
.text:0000000000002A35 ; ---------------------------------------------------------------------------
.text:0000000000002A3A                 align 20h
.text:0000000000002A40
.text:0000000000002A40 loc_2A40:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002A40                                         ; DATA XREF: .rodata:jpt_289A↓o
.text:0000000000002A40                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:0000000000002A45                 jmp     loc_26C0
.text:0000000000002A45 ; ---------------------------------------------------------------------------
.text:0000000000002A4A                 align 10h
.text:0000000000002A50
.text:0000000000002A50 loc_2A50:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:0000000000002A50                                         ; quotearg_buffer_restyled+1B1↑j
.text:0000000000002A50                 xor     r10d, r10d
.text:0000000000002A53                 jmp     loc_24F0
.text:0000000000002A53 ; ---------------------------------------------------------------------------
.text:0000000000002A58                 align 20h
.text:0000000000002A60
.text:0000000000002A60 loc_2A60:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:0000000000002A60                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002A65                 jnz     loc_33D0
.text:0000000000002A6B
.text:0000000000002A6B loc_2A6B:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:0000000000002A6B                 add     rbp, 1
.text:0000000000002A6F                 mov     eax, r8d
.text:0000000000002A72                 xor     r12d, r12d
.text:0000000000002A75                 mov     ebx, 5Ch ; '\'
.text:0000000000002A7A                 jmp     loc_258C
.text:0000000000002A7A ; ---------------------------------------------------------------------------
.text:0000000000002A7F                 align 20h
.text:0000000000002A80
.text:0000000000002A80 loc_2A80:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002A80                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002A85                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002A8A                 mov     r12d, r8d
.text:0000000000002A8D                 mov     rbp, r11
.text:0000000000002A90                 setz    dl
.text:0000000000002A93                 mov     eax, ebx
.text:0000000000002A95                 test    r15, r15
.text:0000000000002A98                 setz    cl
.text:0000000000002A9B                 and     eax, edx
.text:0000000000002A9D                 and     al, cl
.text:0000000000002A9F                 jnz     loc_3506
.text:0000000000002AA5                 mov     eax, ebx
.text:0000000000002AA7                 xor     eax, 1
.text:0000000000002AAA                 and     dl, al
.text:0000000000002AAC                 jz      loc_341C
.text:0000000000002AB2                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002AB7                 jz      loc_341A
.text:0000000000002ABD                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002AC2                 jnz     loc_34BD
.text:0000000000002AC8                 test    r13, r13
.text:0000000000002ACB                 setz    al
.text:0000000000002ACE                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002AD4                 setnz   dl
.text:0000000000002AD7                 and     al, dl
.text:0000000000002AD9                 jz      loc_34FC
.text:0000000000002ADF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002AE4
.text:0000000000002AE4 loc_2AE4:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002AE4                 lea     rbx, asc_503D   ; "'"
.text:0000000000002AEB                 mov     byte ptr [r14], 27h ; '''
.text:0000000000002AEF                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002AF7                 mov     r15d, 1
.text:0000000000002AFD                 mov     [rsp+0E8h+n], 1
.text:0000000000002B06                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B0B                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002B10                 mov     [rsp+0E8h+var_6C], al
.text:0000000000002B14                 jmp     loc_23F3
.text:0000000000002B14 ; ---------------------------------------------------------------------------
.text:0000000000002B19                 align 20h
.text:0000000000002B20
.text:0000000000002B20 loc_2B20:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:0000000000002B20                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002B25                 jnz     loc_33D0
.text:0000000000002B2B                 test    r13, r13
.text:0000000000002B2E                 jz      loc_2F30
.text:0000000000002B34                 xor     edx, edx
.text:0000000000002B36                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002B3C                 jnz     loc_2F30
.text:0000000000002B42
.text:0000000000002B42 loc_2B42:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:0000000000002B42                                         ; quotearg_buffer_restyled+122A↓j
.text:0000000000002B42                 mov     [rsp+0E8h+var_98], r13
.text:0000000000002B47                 add     r15, 3
.text:0000000000002B4B                 xor     eax, eax
.text:0000000000002B4D                 mov     [rsp+0E8h+var_6C], r12b
.text:0000000000002B52                 xor     r8d, r8d
.text:0000000000002B55                 mov     r13, rdx
.text:0000000000002B58                 mov     ebx, 27h ; '''
.text:0000000000002B5D                 jmp     loc_2579
.text:0000000000002B5D ; ---------------------------------------------------------------------------
.text:0000000000002B62                 align 8
.text:0000000000002B68
.text:0000000000002B68 loc_2B68:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:0000000000002B68                 test    byte ptr [rsp+0E8h+var_70], 4
.text:0000000000002B6D                 jz      short loc_2B90
.text:0000000000002B6F                 lea     rcx, [rbp+2]
.text:0000000000002B73                 cmp     rcx, r11
.text:0000000000002B76                 jnb     short loc_2B90
.text:0000000000002B78                 mov     rax, [rsp+0E8h+s]
.text:0000000000002B7D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002B82                 jz      loc_3312
.text:0000000000002B88                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002B90
.text:0000000000002B90 loc_2B90:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002B90                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002B90                 xor     edx, edx
.text:0000000000002B92                 xor     r12d, r12d
.text:0000000000002B95                 xor     eax, eax
.text:0000000000002B97                 mov     ebx, 3Fh ; '?'
.text:0000000000002B9C                 jmp     loc_2548
.text:0000000000002B9C ; ---------------------------------------------------------------------------
.text:0000000000002BA1                 align 8
.text:0000000000002BA8
.text:0000000000002BA8 loc_2BA8:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002BA8                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002BAD                 jnz     loc_33D0
.text:0000000000002BB3                 xor     r12d, r12d
.text:0000000000002BB6                 xor     eax, eax
.text:0000000000002BB8                 mov     ebx, 3Fh ; '?'
.text:0000000000002BBD                 jmp     loc_2579
.text:0000000000002BBD ; ---------------------------------------------------------------------------
.text:0000000000002BC2                 align 8
.text:0000000000002BC8
.text:0000000000002BC8 loc_2BC8:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002BC8                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002BD0                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002BD4                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002BE0                 mov     [rsp+0E8h+ps], rax
.text:0000000000002BE5                 jnz     short loc_2C14
.text:0000000000002BE7                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000002BEC                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002BF1                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002BF6                 mov     [rsp+0E8h+var_B8], r9
.text:0000000000002BFB                 call    _strlen
.text:0000000000002C00                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002C06                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002C0C                 mov     r11, rax
.text:0000000000002C0F                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002C14
.text:0000000000002C14 loc_2C14:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:0000000000002C14                 lea     rax, [rsp+0E8h+wc]
.text:0000000000002C1C                 xor     ecx, ecx
.text:0000000000002C1E                 mov     [rsp+0E8h+var_6A], bl
.text:0000000000002C22                 mov     [rsp+0E8h+var_6B], r8b
.text:0000000000002C27                 mov     rbx, rcx
.text:0000000000002C2A                 mov     [rsp+0E8h+var_60], r9
.text:0000000000002C32                 mov     [rsp+0E8h+var_B0], rax
.text:0000000000002C37                 mov     [rsp+0E8h+var_69], r10b
.text:0000000000002C3C                 mov     [rsp+0E8h+var_68], r15
.text:0000000000002C44                 mov     [rsp+0E8h+var_A8], r14
.text:0000000000002C49                 mov     [rsp+0E8h+var_78], r13
.text:0000000000002C4E                 mov     [rsp+0E8h+var_B8], r11
.text:0000000000002C53
.text:0000000000002C53 loc_2C53:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:0000000000002C53                 mov     rax, [rsp+0E8h+s]
.text:0000000000002C58                 lea     r14, [rbp+rbx+0]
.text:0000000000002C5D                 mov     rdx, [rsp+0E8h+var_B8]
.text:0000000000002C62                 mov     rcx, [rsp+0E8h+ps]
.text:0000000000002C67                 mov     rdi, [rsp+0E8h+var_B0]
.text:0000000000002C6C                 lea     r13, [rax+r14]
.text:0000000000002C70                 sub     rdx, r14
.text:0000000000002C73                 mov     rsi, r13
.text:0000000000002C76                 call    rpl_mbrtowc
.text:0000000000002C7B                 test    rax, rax
.text:0000000000002C7E                 mov     r15, rax
.text:0000000000002C81                 jz      short loc_2CD1
.text:0000000000002C83                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002C87                 jz      loc_32A5
.text:0000000000002C8D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002C91                 jz      loc_3231
.text:0000000000002C97                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002C9C                 setz    al
.text:0000000000002C9F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002CA3                 jnz     loc_2E40
.text:0000000000002CA9
.text:0000000000002CA9 loc_2CA9:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002CA9                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002CA9                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002CB0                 call    _iswprint
.text:0000000000002CB5                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:0000000000002CBA                 test    eax, eax
.text:0000000000002CBC                 mov     eax, 0
.text:0000000000002CC1                 cmovz   r12d, eax
.text:0000000000002CC5                 add     rbx, r15
.text:0000000000002CC8                 call    _mbsinit
.text:0000000000002CCD                 test    eax, eax
.text:0000000000002CCF                 jz      short loc_2C53
.text:0000000000002CD1
.text:0000000000002CD1 loc_2CD1:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002CD1                 mov     edx, r12d
.text:0000000000002CD4                 mov     rdi, rbx
.text:0000000000002CD7                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002CDD                 xor     edx, 1
.text:0000000000002CE0                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002CE5                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002CEB                 and     dl, [rsp+0E8h+var_DB]
.text:0000000000002CEF                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002CF7                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002CFC                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002D01                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002D06
.text:0000000000002D06 loc_2D06:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002D06                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002D06                 cmp     rdi, 1
.text:0000000000002D0A                 jbe     loc_330B
.text:0000000000002D10
.text:0000000000002D10 loc_2D10:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:0000000000002D10                 mov     rcx, rdi
.text:0000000000002D13                 xor     esi, esi
.text:0000000000002D15                 movzx   r9d, [rsp+0E8h+var_D9]
.text:0000000000002D1B                 add     rcx, rbp
.text:0000000000002D1E                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002D23                 jmp     loc_2DDE
.text:0000000000002D23 ; ---------------------------------------------------------------------------
.text:0000000000002D28                 align 10h
.text:0000000000002D30
.text:0000000000002D30 loc_2D30:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:0000000000002D30                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002D35                 setz    al
.text:0000000000002D38                 test    r9b, r9b
.text:0000000000002D3B                 jnz     loc_31F0
.text:0000000000002D41                 mov     esi, r8d
.text:0000000000002D44                 xor     esi, 1
.text:0000000000002D47                 and     al, sil
.text:0000000000002D4A                 jz      short loc_2D7B
.text:0000000000002D4C                 cmp     r13, r15
.text:0000000000002D4F                 jbe     short loc_2D56
.text:0000000000002D51                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002D56
.text:0000000000002D56 loc_2D56:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:0000000000002D56                 lea     rsi, [r15+1]
.text:0000000000002D5A                 cmp     r13, rsi
.text:0000000000002D5D                 jbe     short loc_2D65
.text:0000000000002D5F                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:0000000000002D65
.text:0000000000002D65 loc_2D65:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:0000000000002D65                 lea     rsi, [r15+2]
.text:0000000000002D69                 cmp     r13, rsi
.text:0000000000002D6C                 jbe     short loc_2D74
.text:0000000000002D6E                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002D74
.text:0000000000002D74 loc_2D74:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002D74                 add     r15, 3
.text:0000000000002D78                 mov     r8d, eax
.text:0000000000002D7B
.text:0000000000002D7B loc_2D7B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:0000000000002D7B                 cmp     r13, r15
.text:0000000000002D7E                 jbe     short loc_2D85
.text:0000000000002D80                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002D85
.text:0000000000002D85 loc_2D85:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002D85                 lea     rax, [r15+1]
.text:0000000000002D89                 cmp     r13, rax
.text:0000000000002D8C                 jbe     short loc_2D9B
.text:0000000000002D8E                 mov     eax, ebx
.text:0000000000002D90                 shr     al, 6
.text:0000000000002D93                 add     eax, 30h ; '0'
.text:0000000000002D96                 mov     [r14+r15+1], al
.text:0000000000002D9B
.text:0000000000002D9B loc_2D9B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:0000000000002D9B                 lea     rax, [r15+2]
.text:0000000000002D9F                 cmp     r13, rax
.text:0000000000002DA2                 jbe     short loc_2DB4
.text:0000000000002DA4                 mov     eax, ebx
.text:0000000000002DA6                 shr     al, 3
.text:0000000000002DA9                 and     eax, 7
.text:0000000000002DAC                 add     eax, 30h ; '0'
.text:0000000000002DAF                 mov     [r14+r15+2], al
.text:0000000000002DB4
.text:0000000000002DB4 loc_2DB4:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002DB4                 and     ebx, 7
.text:0000000000002DB7                 add     rbp, 1
.text:0000000000002DBB                 add     r15, 3
.text:0000000000002DBF                 add     ebx, 30h ; '0'
.text:0000000000002DC2                 cmp     rbp, rcx
.text:0000000000002DC5                 jnb     loc_25B0
.text:0000000000002DCB                 mov     esi, edx
.text:0000000000002DCD
.text:0000000000002DCD loc_2DCD:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:0000000000002DCD                                         ; quotearg_buffer_restyled+EF1↓j
.text:0000000000002DCD                 cmp     r13, r15
.text:0000000000002DD0                 jbe     short loc_2DD6
.text:0000000000002DD2                 mov     [r14+r15], bl
.text:0000000000002DD6
.text:0000000000002DD6 loc_2DD6:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002DD6                 movzx   ebx, byte ptr [rdi+rbp]
.text:0000000000002DDA                 add     r15, 1
.text:0000000000002DDE
.text:0000000000002DDE loc_2DDE:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:0000000000002DDE                 test    dl, dl
.text:0000000000002DE0                 jnz     loc_2D30
.text:0000000000002DE6                 mov     eax, esi
.text:0000000000002DE8                 xor     eax, 1
.text:0000000000002DEB                 and     eax, r8d
.text:0000000000002DEE                 test    r10b, r10b
.text:0000000000002DF1                 jz      short loc_2E01
.text:0000000000002DF3                 cmp     r13, r15
.text:0000000000002DF6                 jbe     short loc_2DFD
.text:0000000000002DF8                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002DFD
.text:0000000000002DFD loc_2DFD:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:0000000000002DFD                 add     r15, 1
.text:0000000000002E01
.text:0000000000002E01 loc_2E01:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002E01                 add     rbp, 1
.text:0000000000002E05                 cmp     rbp, rcx
.text:0000000000002E08                 jnb     loc_258C
.text:0000000000002E0E                 test    al, al
.text:0000000000002E10                 jz      loc_320E
.text:0000000000002E16                 cmp     r13, r15
.text:0000000000002E19                 jbe     short loc_2E20
.text:0000000000002E1B                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002E20
.text:0000000000002E20 loc_2E20:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:0000000000002E20                 lea     rax, [r15+1]
.text:0000000000002E24                 cmp     r13, rax
.text:0000000000002E27                 jbe     short loc_2E2F
.text:0000000000002E29                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002E2F
.text:0000000000002E2F loc_2E2F:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:0000000000002E2F                 add     r15, 2
.text:0000000000002E33                 xor     r10d, r10d
.text:0000000000002E36                 xor     r8d, r8d
.text:0000000000002E39                 jmp     short loc_2DCD
.text:0000000000002E39 ; ---------------------------------------------------------------------------
.text:0000000000002E3B                 align 20h
.text:0000000000002E40
.text:0000000000002E40 loc_2E40:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:0000000000002E40                 cmp     r15, 1
.text:0000000000002E44                 jz      loc_2CA9
.text:0000000000002E4A                 mov     rdi, [rsp+0E8h+s]
.text:0000000000002E4F                 lea     rcx, [rdi+r15]
.text:0000000000002E53                 lea     rdx, [rdi+r14+1]
.text:0000000000002E58                 lea     r8, [rcx+r14]
.text:0000000000002E5C                 jmp     short loc_2E6D
.text:0000000000002E5C ; ---------------------------------------------------------------------------
.text:0000000000002E5E                 align 20h
.text:0000000000002E60
.text:0000000000002E60 loc_2E60:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:0000000000002E60                                         ; quotearg_buffer_restyled+B70↓j
.text:0000000000002E60                 add     rdx, 1
.text:0000000000002E64                 cmp     r8, rdx
.text:0000000000002E67                 jz      loc_2CA9
.text:0000000000002E6D
.text:0000000000002E6D loc_2E6D:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:0000000000002E6D                 movzx   ecx, byte ptr [rdx]
.text:0000000000002E70                 sub     ecx, 5Bh ; '['
.text:0000000000002E73                 cmp     cl, 21h ; '!'
.text:0000000000002E76                 ja      short loc_2E60
.text:0000000000002E78                 mov     esi, 1
.text:0000000000002E7D                 shl     rsi, cl
.text:0000000000002E80                 mov     rcx, rsi
.text:0000000000002E83                 mov     rsi, 20000002Bh
.text:0000000000002E8D                 test    rcx, rsi
.text:0000000000002E90                 jz      short loc_2E60
.text:0000000000002E92                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002E97                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E9C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002EA1                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002EA9
.text:0000000000002EA9 loc_2EA9:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002EA9                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002EA9                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002EAE                 jz      short loc_2EC0
.text:0000000000002EB0                 test    al, al
.text:0000000000002EB2                 mov     eax, 4
.text:0000000000002EB7                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002EBC                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002EC0
.text:0000000000002EC0 loc_2EC0:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002EC0                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002EC0                 sub     rsp, 8
.text:0000000000002EC4                 mov     rcx, rbp
.text:0000000000002EC7                 mov     rsi, r13
.text:0000000000002ECA                 push    [rsp+0F0h+var_88]
.text:0000000000002ECE                 push    [rsp+0F8h+var_80]
.text:0000000000002ED2                 mov     rdi, r14
.text:0000000000002ED5                 push    0
.text:0000000000002ED7                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002EDF                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002EE4                 mov     rdx, [rsp+108h+s]
.text:0000000000002EE9                 and     r9d, 0FFFFFFFDh
.text:0000000000002EED                 call    quotearg_buffer_restyled
.text:0000000000002EF2                 add     rsp, 20h
.text:0000000000002EF6                 mov     r15, rax
.text:0000000000002EF9
.text:0000000000002EF9 loc_2EF9:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002EF9                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002EF9                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002F01                 xor     rbx, fs:28h
.text:0000000000002F0A                 mov     rax, r15
.text:0000000000002F0D                 jnz     loc_3513
.text:0000000000002F13                 add     rsp, 0B8h
.text:0000000000002F1A                 pop     rbx
.text:0000000000002F1B                 pop     rbp
.text:0000000000002F1C                 pop     r12
.text:0000000000002F1E                 pop     r13
.text:0000000000002F20                 pop     r14
.text:0000000000002F22                 pop     r15
.text:0000000000002F24                 retn
.text:0000000000002F24 ; ---------------------------------------------------------------------------
.text:0000000000002F25                 align 8
.text:0000000000002F28
.text:0000000000002F28 loc_2F28:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002F28                 mov     rbp, r11
.text:0000000000002F2B                 jmp     loc_2EA9
.text:0000000000002F30 ; ---------------------------------------------------------------------------
.text:0000000000002F30
.text:0000000000002F30 loc_2F30:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002F30                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002F30                 cmp     r13, r15
.text:0000000000002F33                 jbe     short loc_2F3A
.text:0000000000002F35                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002F3A
.text:0000000000002F3A loc_2F3A:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002F3A                 lea     rax, [r15+1]
.text:0000000000002F3E                 cmp     r13, rax
.text:0000000000002F41                 jbe     short loc_2F49
.text:0000000000002F43                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002F49
.text:0000000000002F49 loc_2F49:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002F49                 lea     rax, [r15+2]
.text:0000000000002F4D                 cmp     r13, rax
.text:0000000000002F50                 jbe     loc_3542
.text:0000000000002F56                 mov     rdx, r13
.text:0000000000002F59                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002F5F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002F64                 jmp     loc_2B42
.text:0000000000002F69 ; ---------------------------------------------------------------------------
.text:0000000000002F69
.text:0000000000002F69 loc_2F69:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002F69                 mov     eax, r12d
.text:0000000000002F6C                 mov     ebx, 30h ; '0'
.text:0000000000002F71                 xor     r12d, r12d
.text:0000000000002F74                 jmp     loc_2579
.text:0000000000002F79 ; ---------------------------------------------------------------------------
.text:0000000000002F79
.text:0000000000002F79 loc_2F79:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002F79                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002F7F                 jmp     loc_2949
.text:0000000000002F84 ; ---------------------------------------------------------------------------
.text:0000000000002F84
.text:0000000000002F84 loc_2F84:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F84                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:0000000000002F84                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002F86                 jnz     loc_23B3        ; jumptable 00000000000121F1 case 1
.text:0000000000002F8C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F91
.text:0000000000002F91 loc_2F91:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002F91                 test    r13, r13
.text:0000000000002F94                 jnz     loc_352A
.text:0000000000002F9A                 lea     rax, asc_503D   ; "'"
.text:0000000000002FA1                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002FAA                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FAF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002FB4                 xor     r12d, r12d
.text:0000000000002FB7                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002FBC                 mov     [rsp+0E8h+n], 1
.text:0000000000002FC5                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FCA                 mov     r15d, 1
.text:0000000000002FD0                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002FD8                 jmp     loc_23F3
.text:0000000000002FD8 ; ---------------------------------------------------------------------------
.text:0000000000002FDD                 align 20h
.text:0000000000002FE0
.text:0000000000002FE0 loc_2FE0:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002FE0                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:0000000000002FE0                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002FE2                 jnz     loc_33DD
.text:0000000000002FE8                 test    r13, r13
.text:0000000000002FEB                 jz      loc_3216
.text:0000000000002FF1                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002FF5                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002FFA                 xor     r12d, r12d
.text:0000000000002FFD                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003002                 mov     [rsp+0E8h+var_98], 0
.text:000000000000300B
.text:000000000000300B loc_300B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:000000000000300B                 lea     rax, unk_503B
.text:0000000000003012                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003017                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000301C                 mov     [rsp+0E8h+n], 1
.text:0000000000003025                 mov     r15d, 1
.text:000000000000302B                 mov     [rsp+0E8h+s2], rax
.text:0000000000003030                 jmp     loc_23F3
.text:0000000000003035 ; ---------------------------------------------------------------------------
.text:0000000000003035
.text:0000000000003035 loc_3035:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003035                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:0000000000003035                 lea     rax, unk_503B   ; jumptable 00000000000121F1 case 6
.text:000000000000303C                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003041                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003046                 xor     r12d, r12d
.text:0000000000003049                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003052                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000003057                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000305C                 mov     [rsp+0E8h+n], 1
.text:0000000000003065                 xor     r15d, r15d
.text:0000000000003068                 mov     [rsp+0E8h+s2], rax
.text:000000000000306D                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000003075                 jmp     loc_23F3
.text:000000000000307A ; ---------------------------------------------------------------------------
.text:000000000000307A
.text:000000000000307A loc_307A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000307A                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:000000000000307A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:000000000000307F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003084                 xor     r12d, r12d
.text:0000000000003087                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003090                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003095                 xor     r15d, r15d
.text:0000000000003098                 mov     [rsp+0E8h+var_DB], 1
.text:000000000000309D                 mov     [rsp+0E8h+n], 0
.text:00000000000030A6                 mov     [rsp+0E8h+s2], 0
.text:00000000000030AF                 jmp     loc_23F3
.text:00000000000030B4 ; ---------------------------------------------------------------------------
.text:00000000000030B4
.text:00000000000030B4 loc_30B4:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:00000000000030B4                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:00000000000030B4                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:00000000000030B9                 jz      short loc_3111
.text:00000000000030BB                 lea     rsi, asc_503F   ; "`"
.text:00000000000030C2                 xor     edi, edi        ; domainname
.text:00000000000030C4                 mov     edx, 5          ; category
.text:00000000000030C9                 call    _dcgettext
.text:00000000000030CE                 mov     rcx, rax
.text:00000000000030D1                 mov     [rsp+0E8h+var_80], rax
.text:00000000000030D6                 lea     rax, asc_503F   ; "`"
.text:00000000000030DD                 cmp     rcx, rax
.text:00000000000030E0                 jz      loc_347E
.text:00000000000030E6
.text:00000000000030E6 loc_30E6:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:00000000000030E6                 lea     rsi, asc_503D   ; "'"
.text:00000000000030ED                 xor     edi, edi        ; domainname
.text:00000000000030EF                 mov     edx, 5          ; category
.text:00000000000030F4                 call    _dcgettext
.text:00000000000030F9                 mov     rcx, rax
.text:00000000000030FC                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003101                 lea     rax, asc_503D   ; "'"
.text:0000000000003108                 cmp     rcx, rax
.text:000000000000310B                 jz      loc_3494
.text:0000000000003111
.text:0000000000003111 loc_3111:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000003111                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000003111                 xor     r15d, r15d
.text:0000000000003114                 test    ebx, ebx
.text:0000000000003116                 jz      loc_32DD
.text:000000000000311C
.text:000000000000311C loc_311C:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:000000000000311C                                         ; quotearg_buffer_restyled+FE6↓j
.text:000000000000311C                 test    ebx, ebx
.text:000000000000311E                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000003123                 setnz   [rsp+0E8h+var_D9]
.text:0000000000003128                 xor     r12d, r12d
.text:000000000000312B                 mov     rdi, rbx        ; s
.text:000000000000312E                 call    _strlen
.text:0000000000003133                 mov     [rsp+0E8h+s2], rbx
.text:0000000000003138                 mov     [rsp+0E8h+n], rax
.text:000000000000313D                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003142                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003147                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003150                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003155                 jmp     loc_23F3
.text:000000000000315A ; ---------------------------------------------------------------------------
.text:000000000000315A
.text:000000000000315A loc_315A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:000000000000315A                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:000000000000315A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:000000000000315F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000003164                 xor     r12d, r12d
.text:0000000000003167                 mov     [rsp+0E8h+var_98], 0
.text:0000000000003170                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000003175                 xor     r15d, r15d
.text:0000000000003178                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000317D                 mov     [rsp+0E8h+n], 0
.text:0000000000003186                 mov     [rsp+0E8h+s2], 0
.text:000000000000318F                 jmp     loc_23F3
.text:0000000000003194 ; ---------------------------------------------------------------------------
.text:0000000000003194
.text:0000000000003194 loc_3194:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003194                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:0000000000003194                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000003199                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000319E                 xor     r12d, r12d
.text:00000000000031A1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000031AA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000031AF                 mov     [rsp+0E8h+var_DB], 1
.text:00000000000031B4                 jmp     loc_23D3
.text:00000000000031B9 ; ---------------------------------------------------------------------------
.text:00000000000031B9
.text:00000000000031B9 loc_31B9:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:00000000000031B9                 cmp     r13, r15
.text:00000000000031BC                 jbe     short loc_31C3
.text:00000000000031BE                 mov     byte ptr [r14+r15], 30h ; '0'
.text:00000000000031C3
.text:00000000000031C3 loc_31C3:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:00000000000031C3                 lea     rax, [rcx+2]
.text:00000000000031C7                 cmp     r13, rax
.text:00000000000031CA                 jbe     short loc_31D2
.text:00000000000031CC                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:00000000000031D2
.text:00000000000031D2 loc_31D2:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:00000000000031D2                 mov     eax, r12d
.text:00000000000031D5                 lea     r15, [rcx+3]
.text:00000000000031D9                 xor     r12d, r12d
.text:00000000000031DC                 mov     ebx, 30h ; '0'
.text:00000000000031E1                 jmp     loc_2548
.text:00000000000031E1 ; ---------------------------------------------------------------------------
.text:00000000000031E6                 align 10h
.text:00000000000031F0
.text:00000000000031F0 loc_31F0:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:00000000000031F0                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000031F5                 mov     rbp, r11
.text:00000000000031F8                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000031FC                 jmp     loc_2EA9
.text:0000000000003201 ; ---------------------------------------------------------------------------
.text:0000000000003201
.text:0000000000003201 loc_3201:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000003201                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000003206                 xor     r12d, r12d
.text:0000000000003209                 jmp     loc_2D10
.text:000000000000320E ; ---------------------------------------------------------------------------
.text:000000000000320E
.text:000000000000320E loc_320E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:000000000000320E                 xor     r10d, r10d
.text:0000000000003211                 jmp     loc_2DCD
.text:0000000000003216 ; ---------------------------------------------------------------------------
.text:0000000000003216
.text:0000000000003216 loc_3216:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000003216                 mov     [rsp+0E8h+var_98], 0
.text:000000000000321F                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000003224                 xor     r12d, r12d
.text:0000000000003227                 mov     [rsp+0E8h+var_6C], 0
.text:000000000000322C                 jmp     loc_300B
.text:0000000000003231 ; ---------------------------------------------------------------------------
.text:0000000000003231
.text:0000000000003231 loc_3231:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000003231                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000003236                 mov     rsi, r14
.text:0000000000003239                 mov     rcx, r13
.text:000000000000323C                 mov     rax, rbx
.text:000000000000323F                 mov     rdi, rbx
.text:0000000000003242                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000003248                 movzx   ebx, [rsp+0E8h+var_6A]
.text:000000000000324D                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000003255                 cmp     rsi, r11
.text:0000000000003258                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000325E                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000003266                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000326B                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000003270                 jnb     short loc_3298
.text:0000000000003272                 cmp     byte ptr [rcx], 0
.text:0000000000003275                 jnz     short loc_3287
.text:0000000000003277                 jmp     short loc_3298
.text:0000000000003277 ; ---------------------------------------------------------------------------
.text:0000000000003279                 align 20h
.text:0000000000003280
.text:0000000000003280 loc_3280:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000003280                 cmp     byte ptr [r9+rax], 0
.text:0000000000003285                 jz      short loc_3295
.text:0000000000003287
.text:0000000000003287 loc_3287:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000003287                 add     rax, 1
.text:000000000000328B                 lea     rdx, [rbp+rax+0]
.text:0000000000003290                 cmp     r11, rdx
.text:0000000000003293                 ja      short loc_3280
.text:0000000000003295
.text:0000000000003295 loc_3295:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000003295                 mov     rdi, rax
.text:0000000000003298
.text:0000000000003298 loc_3298:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000003298                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000003298                 movzx   edx, [rsp+0E8h+var_DB]
.text:000000000000329D                 xor     r12d, r12d
.text:00000000000032A0                 jmp     loc_2D06
.text:00000000000032A5 ; ---------------------------------------------------------------------------
.text:00000000000032A5
.text:00000000000032A5 loc_32A5:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:00000000000032A5                 mov     rdi, rbx
.text:00000000000032A8                 movzx   r8d, [rsp+0E8h+var_6B]
.text:00000000000032AE                 movzx   ebx, [rsp+0E8h+var_6A]
.text:00000000000032B3                 movzx   r10d, [rsp+0E8h+var_69]
.text:00000000000032B9                 mov     r15, [rsp+0E8h+var_68]
.text:00000000000032C1                 xor     r12d, r12d
.text:00000000000032C4                 mov     r14, [rsp+0E8h+var_A8]
.text:00000000000032C9                 mov     r13, [rsp+0E8h+var_78]
.text:00000000000032CE                 mov     r11, [rsp+0E8h+var_B8]
.text:00000000000032D3                 movzx   edx, [rsp+0E8h+var_DB]
.text:00000000000032D8                 jmp     loc_2D06
.text:00000000000032DD ; ---------------------------------------------------------------------------
.text:00000000000032DD
.text:00000000000032DD loc_32DD:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:00000000000032DD                 mov     rdx, [rsp+0E8h+var_80]
.text:00000000000032E2                 movzx   eax, byte ptr [rdx]
.text:00000000000032E5                 test    al, al
.text:00000000000032E7                 jz      loc_311C
.text:00000000000032ED                 nop     dword ptr [rax]
.text:00000000000032F0
.text:00000000000032F0 loc_32F0:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:00000000000032F0                 cmp     r13, r15
.text:00000000000032F3                 jbe     short loc_32F9
.text:00000000000032F5                 mov     [r14+r15], al
.text:00000000000032F9
.text:00000000000032F9 loc_32F9:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:00000000000032F9                 add     r15, 1
.text:00000000000032FD                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000003302                 test    al, al
.text:0000000000003304                 jnz     short loc_32F0
.text:0000000000003306                 jmp     loc_311C
.text:000000000000330B ; ---------------------------------------------------------------------------
.text:000000000000330B
.text:000000000000330B loc_330B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:000000000000330B                 mov     eax, edx
.text:000000000000330D                 jmp     loc_2867
.text:0000000000003312 ; ---------------------------------------------------------------------------
.text:0000000000003312
.text:0000000000003312 loc_3312:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000003312                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000003316                 cmp     bl, 3Eh ; '>'
.text:0000000000003319                 ja      loc_2B90
.text:000000000000331F                 mov     rax, 7000A38200000000h
.text:0000000000003329                 bt      rax, rbx
.text:000000000000332D                 jnb     loc_2B90
.text:0000000000003333                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000003338                 jnz     loc_3522
.text:000000000000333E                 cmp     r13, r15
.text:0000000000003341                 jbe     short loc_3348
.text:0000000000003343                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000003348
.text:0000000000003348 loc_3348:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000003348                 lea     rax, [r15+1]
.text:000000000000334C                 cmp     r13, rax
.text:000000000000334F                 jbe     short loc_3357
.text:0000000000003351                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000003357
.text:0000000000003357 loc_3357:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000003357                 lea     rax, [r15+2]
.text:000000000000335B                 cmp     r13, rax
.text:000000000000335E                 jbe     short loc_3366
.text:0000000000003360                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000003366
.text:0000000000003366 loc_3366:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000003366                 lea     rax, [r15+3]
.text:000000000000336A                 cmp     r13, rax
.text:000000000000336D                 jbe     short loc_3375
.text:000000000000336F                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000003375
.text:0000000000003375 loc_3375:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000003375                 add     r15, 4
.text:0000000000003379                 xor     edx, edx
.text:000000000000337B                 xor     r12d, r12d
.text:000000000000337E                 xor     eax, eax
.text:0000000000003380                 mov     rbp, rcx
.text:0000000000003383                 jmp     loc_2548
.text:0000000000003388 ; ---------------------------------------------------------------------------
.text:0000000000003388
.text:0000000000003388 loc_3388:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000003388                                         ; DATA XREF: .rodata:jpt_23B1↓o
.text:0000000000003388                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:000000000000338A                 jz      loc_3518
.text:0000000000003390                 lea     rax, asc_503D   ; "'"
.text:0000000000003397                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000339C                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033A1                 xor     r12d, r12d
.text:00000000000033A4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033AD                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000033B2                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000033B7                 mov     [rsp+0E8h+n], 1
.text:00000000000033C0                 xor     r15d, r15d
.text:00000000000033C3                 mov     [rsp+0E8h+s2], rax
.text:00000000000033C8                 jmp     loc_23F3
.text:00000000000033C8 ; ---------------------------------------------------------------------------
.text:00000000000033CD                 align 10h
.text:00000000000033D0
.text:00000000000033D0 loc_33D0:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:00000000000033D0                                         ; quotearg_buffer_restyled+805↑j ...
.text:00000000000033D0                 mov     rbp, r11
.text:00000000000033D3                 movzx   eax, [rsp+0E8h+var_D9]
.text:00000000000033D8                 jmp     loc_2EA9
.text:00000000000033DD ; ---------------------------------------------------------------------------
.text:00000000000033DD
.text:00000000000033DD loc_33DD:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:00000000000033DD                 lea     rax, unk_503B
.text:00000000000033E4                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000033E9                 mov     [rsp+0E8h+var_6C], 0
.text:00000000000033EE                 xor     r12d, r12d
.text:00000000000033F1                 mov     [rsp+0E8h+var_98], 0
.text:00000000000033FA                 mov     [rsp+0E8h+var_D9], 1
.text:00000000000033FF                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000003404                 mov     [rsp+0E8h+n], 1
.text:000000000000340D                 xor     r15d, r15d
.text:0000000000003410                 mov     [rsp+0E8h+s2], rax
.text:0000000000003415                 jmp     loc_23F3
.text:000000000000341A ; ---------------------------------------------------------------------------
.text:000000000000341A
.text:000000000000341A loc_341A:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:000000000000341A                 mov     eax, edx
.text:000000000000341C
.text:000000000000341C loc_341C:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:000000000000341C                                         ; quotearg_buffer_restyled+11E1↓j
.text:000000000000341C                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000003421                 test    rbx, rbx
.text:0000000000003424                 jz      short loc_3452
.text:0000000000003426                 test    al, al
.text:0000000000003428                 jz      short loc_3452
.text:000000000000342A                 movzx   ecx, byte ptr [rbx]
.text:000000000000342D                 mov     rax, rbx
.text:0000000000003430                 test    cl, cl
.text:0000000000003432                 jz      short loc_3452
.text:0000000000003434                 mov     rdx, r15
.text:0000000000003437                 sub     rax, r15
.text:000000000000343A
.text:000000000000343A loc_343A:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:000000000000343A                 cmp     r13, rdx
.text:000000000000343D                 jbe     short loc_3443
.text:000000000000343F                 mov     [r14+rdx], cl
.text:0000000000003443
.text:0000000000003443 loc_3443:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000003443                 add     rdx, 1
.text:0000000000003447                 movzx   ecx, byte ptr [rax+rdx]
.text:000000000000344B                 test    cl, cl
.text:000000000000344D                 jnz     short loc_343A
.text:000000000000344F                 mov     r15, rdx
.text:0000000000003452
.text:0000000000003452 loc_3452:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000003452                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000003452                 cmp     r13, r15
.text:0000000000003455                 jbe     loc_2EF9
.text:000000000000345B                 mov     byte ptr [r14+r15], 0
.text:0000000000003460                 jmp     loc_2EF9
.text:0000000000003465 ; ---------------------------------------------------------------------------
.text:0000000000003465
.text:0000000000003465 loc_3465:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000003465                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000346A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000346F                 mov     rbp, r11
.text:0000000000003472                 setz    al
.text:0000000000003475                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003479                 jmp     loc_2EA9
.text:000000000000347E ; ---------------------------------------------------------------------------
.text:000000000000347E
.text:000000000000347E loc_347E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000347E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003482                 mov     rdi, rcx
.text:0000000000003485                 call    gettext_quote
.text:000000000000348A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000348F                 jmp     loc_30E6
.text:0000000000003494 ; ---------------------------------------------------------------------------
.text:0000000000003494
.text:0000000000003494 loc_3494:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003494                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003498                 mov     rdi, rcx
.text:000000000000349B                 call    gettext_quote
.text:00000000000034A0                 mov     [rsp+0E8h+var_88], rax
.text:00000000000034A5                 jmp     loc_3111
.text:00000000000034AA ; ---------------------------------------------------------------------------
.text:00000000000034AA
.text:00000000000034AA loc_34AA:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:00000000000034AA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:00000000000034AF                 mov     rbp, r11
.text:00000000000034B2                 mov     eax, edx
.text:00000000000034B4                 mov     [rsp+0E8h+var_DB], bl
.text:00000000000034B8                 jmp     loc_2EA9
.text:00000000000034BD ; ---------------------------------------------------------------------------
.text:00000000000034BD
.text:00000000000034BD loc_34BD:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:00000000000034BD                 sub     rsp, 8
.text:00000000000034C1                 mov     r8d, 5
.text:00000000000034C7                 mov     rcx, r11
.text:00000000000034CA                 push    [rsp+0F0h+var_88]
.text:00000000000034CE                 push    [rsp+0F8h+var_80]
.text:00000000000034D2                 mov     rdi, r14
.text:00000000000034D5                 push    [rsp+100h+var_C8]
.text:00000000000034D9                 mov     r9d, [rsp+108h+var_70]
.text:00000000000034E1                 mov     rdx, [rsp+108h+s]
.text:00000000000034E6                 mov     rsi, [rsp+108h+var_98]
.text:00000000000034EB                 call    quotearg_buffer_restyled
.text:00000000000034F0                 add     rsp, 20h
.text:00000000000034F4                 mov     r15, rax
.text:00000000000034F7                 jmp     loc_2EF9
.text:00000000000034FC ; ---------------------------------------------------------------------------
.text:00000000000034FC
.text:00000000000034FC loc_34FC:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:00000000000034FC                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003501                 jmp     loc_341C
.text:0000000000003506 ; ---------------------------------------------------------------------------
.text:0000000000003506
.text:0000000000003506 loc_3506:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003506                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000350E                 jmp     loc_2EA9
.text:0000000000003513 ; ---------------------------------------------------------------------------
.text:0000000000003513
.text:0000000000003513 loc_3513:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:0000000000003513                 call    ___stack_chk_fail
.text:0000000000003518 ; ---------------------------------------------------------------------------
.text:0000000000003518
.text:0000000000003518 loc_3518:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:0000000000003518                 mov     [rsp+0E8h+var_DB], 0
.text:000000000000351D                 jmp     loc_2F91
.text:0000000000003522 ; ---------------------------------------------------------------------------
.text:0000000000003522
.text:0000000000003522 loc_3522:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:0000000000003522                 mov     rbp, r11
.text:0000000000003525                 jmp     loc_2EC0
.text:000000000000352A ; ---------------------------------------------------------------------------
.text:000000000000352A
.text:000000000000352A loc_352A:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:000000000000352A                 mov     [rsp+0E8h+var_DA], 1
.text:000000000000352F                 xor     eax, eax
.text:0000000000003531                 xor     r12d, r12d
.text:0000000000003534                 mov     [rsp+0E8h+var_98], 0
.text:000000000000353D                 jmp     loc_2AE4
.text:0000000000003542 ; ---------------------------------------------------------------------------
.text:0000000000003542
.text:0000000000003542 loc_3542:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:0000000000003542                 mov     rdx, r13
.text:0000000000003545                 mov     r13, [rsp+0E8h+var_98]
.text:000000000000354A                 jmp     loc_2B42
.text:000000000000354F ; ---------------------------------------------------------------------------
.text:000000000000354F
.text:000000000000354F def_23B1:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:000000000000354F                 call    _abort          ; jumptable 00000000000121F1 default case
.text:000000000000354F ; } // starts at 2320
.text:000000000000354F quotearg_buffer_restyled endp
.text:000000000000354F
.text:000000000000354F ; ---------------------------------------------------------------------------
.text:0000000000003554                 align 20h
.text:0000000000003560
.text:0000000000003560 ; =============== S U B R O U T I N E =======================================
.text:0000000000003560
.text:0000000000003560
.text:0000000000003560 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:0000000000003560                                         ; quotearg_n_mem+7↓j ...
.text:0000000000003560
.text:0000000000003560 var_50          = qword ptr -50h
.text:0000000000003560 var_48          = qword ptr -48h
.text:0000000000003560 var_40          = dword ptr -40h
.text:0000000000003560 var_3C          = dword ptr -3Ch
.text:0000000000003560
.text:0000000000003560 ; __unwind {
.text:0000000000003560                 push    r15
.text:0000000000003562                 push    r14
.text:0000000000003564                 movsxd  r15, edi
.text:0000000000003567                 push    r13
.text:0000000000003569                 push    r12
.text:000000000000356B                 mov     r14, rdx
.text:000000000000356E                 push    rbp
.text:000000000000356F                 push    rbx
.text:0000000000003570                 mov     rbp, rcx
.text:0000000000003573                 sub     rsp, 28h
.text:0000000000003577                 mov     [rsp+58h+var_50], rsi
.text:000000000000357C                 call    ___errno_location
.text:0000000000003581                 mov     r13, rax
.text:0000000000003584                 mov     eax, [rax]
.text:0000000000003586                 test    r15d, r15d
.text:0000000000003589                 mov     rbx, cs:slotvec
.text:0000000000003590                 mov     [rsp+58h+var_40], eax
.text:0000000000003594                 js      loc_3701
.text:000000000000359A                 cmp     cs:nslots, r15d
.text:00000000000035A1                 jg      short loc_3605
.text:00000000000035A3                 cmp     r15d, 7FFFFFFFh
.text:00000000000035AA                 jz      loc_3706
.text:00000000000035B0                 lea     r12d, [r15+1]
.text:00000000000035B4                 lea     rax, slotvec0
.text:00000000000035BB                 movsxd  rsi, r12d
.text:00000000000035BE                 shl     rsi, 4
.text:00000000000035C2                 cmp     rbx, rax
.text:00000000000035C5                 jz      loc_36E0
.text:00000000000035CB                 mov     rdi, rbx
.text:00000000000035CE                 call    xrealloc
.text:00000000000035D3                 mov     rbx, rax
.text:00000000000035D6                 mov     cs:slotvec, rax
.text:00000000000035DD
.text:00000000000035DD loc_35DD:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:00000000000035DD                 movsxd  rdi, cs:nslots
.text:00000000000035E4                 mov     edx, r12d
.text:00000000000035E7                 xor     esi, esi        ; c
.text:00000000000035E9                 sub     edx, edi
.text:00000000000035EB                 shl     rdi, 4
.text:00000000000035EF                 movsxd  rdx, edx
.text:00000000000035F2                 add     rdi, rbx        ; s
.text:00000000000035F5                 shl     rdx, 4          ; n
.text:00000000000035F9                 call    _memset
.text:00000000000035FE                 mov     cs:nslots, r12d
.text:0000000000003605
.text:0000000000003605 loc_3605:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003605                 mov     eax, [rbp+4]
.text:0000000000003608                 shl     r15, 4
.text:000000000000360C                 sub     rsp, 8
.text:0000000000003610                 add     rbx, r15
.text:0000000000003613                 lea     r15, [rbp+8]
.text:0000000000003617                 mov     r8d, [rbp+0]
.text:000000000000361B                 mov     r11, [rbx]
.text:000000000000361E                 mov     r12, [rbx+8]
.text:0000000000003622                 mov     rcx, r14
.text:0000000000003625                 or      eax, 1
.text:0000000000003628                 mov     [rsp+60h+var_3C], eax
.text:000000000000362C                 push    qword ptr [rbp+30h]
.text:000000000000362F                 mov     r9d, eax
.text:0000000000003632                 push    qword ptr [rbp+28h]
.text:0000000000003635                 push    r15
.text:0000000000003637                 mov     rsi, r11
.text:000000000000363A                 mov     rdx, [rsp+78h+var_50]
.text:000000000000363F                 mov     rdi, r12
.text:0000000000003642                 mov     [rsp+78h+var_48], r11
.text:0000000000003647                 call    quotearg_buffer_restyled
.text:000000000000364C                 add     rsp, 20h
.text:0000000000003650                 mov     r11, [rsp+58h+var_48]
.text:0000000000003655                 cmp     r11, rax
.text:0000000000003658                 ja      short loc_36C1
.text:000000000000365A                 lea     rsi, [rax+1]
.text:000000000000365E                 lea     rax, slot0
.text:0000000000003665                 cmp     r12, rax
.text:0000000000003668                 mov     [rbx], rsi
.text:000000000000366B                 jz      short loc_367F
.text:000000000000366D                 mov     rdi, r12        ; ptr
.text:0000000000003670                 mov     [rsp+58h+var_48], rsi
.text:0000000000003675                 call    _free
.text:000000000000367A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000367F
.text:000000000000367F loc_367F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000367F                 mov     rdi, rsi
.text:0000000000003682                 mov     [rsp+58h+var_48], rsi
.text:0000000000003687                 call    xmalloc
.text:000000000000368C                 sub     rsp, 8
.text:0000000000003690                 mov     [rbx+8], rax
.text:0000000000003694                 mov     r8d, [rbp+0]
.text:0000000000003698                 push    qword ptr [rbp+30h]
.text:000000000000369B                 push    qword ptr [rbp+28h]
.text:000000000000369E                 mov     rcx, r14
.text:00000000000036A1                 push    r15
.text:00000000000036A3                 mov     r9d, [rsp+78h+var_3C]
.text:00000000000036A8                 mov     rdi, rax
.text:00000000000036AB                 mov     rdx, [rsp+78h+var_50]
.text:00000000000036B0                 mov     rsi, [rsp+78h+var_48]
.text:00000000000036B5                 mov     r12, rax
.text:00000000000036B8                 call    quotearg_buffer_restyled
.text:00000000000036BD                 add     rsp, 20h
.text:00000000000036C1
.text:00000000000036C1 loc_36C1:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:00000000000036C1                 mov     eax, [rsp+58h+var_40]
.text:00000000000036C5                 mov     [r13+0], eax
.text:00000000000036C9                 add     rsp, 28h
.text:00000000000036CD                 mov     rax, r12
.text:00000000000036D0                 pop     rbx
.text:00000000000036D1                 pop     rbp
.text:00000000000036D2                 pop     r12
.text:00000000000036D4                 pop     r13
.text:00000000000036D6                 pop     r14
.text:00000000000036D8                 pop     r15
.text:00000000000036DA                 retn
.text:00000000000036DA ; ---------------------------------------------------------------------------
.text:00000000000036DB                 align 20h
.text:00000000000036E0
.text:00000000000036E0 loc_36E0:                               ; CODE XREF: quotearg_n_options+65↑j
.text:00000000000036E0                 xor     edi, edi
.text:00000000000036E2                 call    xrealloc
.text:00000000000036E7                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:00000000000036EF                 mov     rbx, rax
.text:00000000000036F2                 mov     cs:slotvec, rax
.text:00000000000036F9                 movups  xmmword ptr [rax], xmm0
.text:00000000000036FC                 jmp     loc_35DD
.text:0000000000003701 ; ---------------------------------------------------------------------------
.text:0000000000003701
.text:0000000000003701 loc_3701:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003701                 call    _abort
.text:0000000000003706 ; ---------------------------------------------------------------------------
.text:0000000000003706
.text:0000000000003706 loc_3706:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003706                 call    xalloc_die
.text:0000000000003706 ; } // starts at 3560
.text:0000000000003706 quotearg_n_options endp
.text:0000000000003706
.text:0000000000003706 ; ---------------------------------------------------------------------------
.text:000000000000370B                 align 10h
.text:0000000000003710
.text:0000000000003710 ; =============== S U B R O U T I N E =======================================
.text:0000000000003710
.text:0000000000003710 ; Attributes: info_from_lumina
.text:0000000000003710
.text:0000000000003710 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:0000000000003710                 public clone_quoting_options
.text:0000000000003710 clone_quoting_options proc near
.text:0000000000003710 ; __unwind {
.text:0000000000003710                 push    r12
.text:0000000000003712                 push    rbp
.text:0000000000003713                 push    rbx
.text:0000000000003714                 mov     rbx, rdi
.text:0000000000003717                 call    ___errno_location
.text:000000000000371C                 mov     r12d, [rax]
.text:000000000000371F                 mov     rbp, rax
.text:0000000000003722                 lea     rax, default_quoting_options
.text:0000000000003729                 test    rbx, rbx
.text:000000000000372C                 mov     esi, 38h ; '8'  ; n
.text:0000000000003731                 cmovz   rbx, rax
.text:0000000000003735                 mov     rdi, rbx        ; src
.text:0000000000003738                 call    xmemdup
.text:000000000000373D                 mov     [rbp+0], r12d
.text:0000000000003741                 pop     rbx
.text:0000000000003742                 pop     rbp
.text:0000000000003743                 pop     r12
.text:0000000000003745                 retn
.text:0000000000003745 ; } // starts at 3710
.text:0000000000003745 clone_quoting_options endp
.text:0000000000003745
.text:0000000000003745 ; ---------------------------------------------------------------------------
.text:0000000000003746                 align 10h
.text:0000000000003750
.text:0000000000003750 ; =============== S U B R O U T I N E =======================================
.text:0000000000003750
.text:0000000000003750
.text:0000000000003750                 public get_quoting_style
.text:0000000000003750 get_quoting_style proc near
.text:0000000000003750 ; __unwind {
.text:0000000000003750                 lea     rax, default_quoting_options
.text:0000000000003757                 test    rdi, rdi
.text:000000000000375A                 cmovz   rdi, rax
.text:000000000000375E                 mov     eax, [rdi]
.text:0000000000003760                 retn
.text:0000000000003760 ; } // starts at 3750
.text:0000000000003760 get_quoting_style endp
.text:0000000000003760
.text:0000000000003760 ; ---------------------------------------------------------------------------
.text:0000000000003761                 align 10h
.text:0000000000003770
.text:0000000000003770 ; =============== S U B R O U T I N E =======================================
.text:0000000000003770
.text:0000000000003770
.text:0000000000003770                 public set_quoting_style
.text:0000000000003770 set_quoting_style proc near
.text:0000000000003770 ; __unwind {
.text:0000000000003770                 lea     rax, default_quoting_options
.text:0000000000003777                 test    rdi, rdi
.text:000000000000377A                 cmovz   rdi, rax
.text:000000000000377E                 mov     [rdi], esi
.text:0000000000003780                 retn
.text:0000000000003780 ; } // starts at 3770
.text:0000000000003780 set_quoting_style endp
.text:0000000000003780
.text:0000000000003780 ; ---------------------------------------------------------------------------
.text:0000000000003781                 align 10h
.text:0000000000003790
.text:0000000000003790 ; =============== S U B R O U T I N E =======================================
.text:0000000000003790
.text:0000000000003790 ; Attributes: info_from_lumina
.text:0000000000003790
.text:0000000000003790 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003790                 public set_char_quoting
.text:0000000000003790 set_char_quoting proc near
.text:0000000000003790 ; __unwind {
.text:0000000000003790                 lea     rax, default_quoting_options
.text:0000000000003797                 test    rdi, rdi
.text:000000000000379A                 mov     ecx, esi
.text:000000000000379C                 cmovz   rdi, rax
.text:00000000000037A0                 mov     eax, esi
.text:00000000000037A2                 and     ecx, 1Fh
.text:00000000000037A5                 shr     al, 5
.text:00000000000037A8                 movzx   eax, al
.text:00000000000037AB                 lea     rdi, [rdi+rax*4+8]
.text:00000000000037B0                 mov     esi, [rdi]
.text:00000000000037B2                 mov     eax, esi
.text:00000000000037B4                 shr     eax, cl
.text:00000000000037B6                 xor     edx, eax
.text:00000000000037B8                 and     eax, 1
.text:00000000000037BB                 and     edx, 1
.text:00000000000037BE                 shl     edx, cl
.text:00000000000037C0                 xor     edx, esi
.text:00000000000037C2                 mov     [rdi], edx
.text:00000000000037C4                 retn
.text:00000000000037C4 ; } // starts at 3790
.text:00000000000037C4 set_char_quoting endp
.text:00000000000037C4
.text:00000000000037C4 ; ---------------------------------------------------------------------------
.text:00000000000037C5                 align 10h
.text:00000000000037D0
.text:00000000000037D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037D0
.text:00000000000037D0
.text:00000000000037D0                 public set_quoting_flags
.text:00000000000037D0 set_quoting_flags proc near
.text:00000000000037D0 ; __unwind {
.text:00000000000037D0                 lea     rax, default_quoting_options
.text:00000000000037D7                 test    rdi, rdi
.text:00000000000037DA                 cmovz   rdi, rax
.text:00000000000037DE                 mov     eax, [rdi+4]
.text:00000000000037E1                 mov     [rdi+4], esi
.text:00000000000037E4                 retn
.text:00000000000037E4 ; } // starts at 37D0
.text:00000000000037E4 set_quoting_flags endp
.text:00000000000037E4
.text:00000000000037E4 ; ---------------------------------------------------------------------------
.text:00000000000037E5                 align 10h
.text:00000000000037F0
.text:00000000000037F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000037F0
.text:00000000000037F0 ; Attributes: info_from_lumina
.text:00000000000037F0
.text:00000000000037F0 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:00000000000037F0                 public set_custom_quoting
.text:00000000000037F0 set_custom_quoting proc near
.text:00000000000037F0 ; __unwind {
.text:00000000000037F0                 lea     rax, default_quoting_options
.text:00000000000037F7                 test    rdi, rdi
.text:00000000000037FA                 cmovz   rdi, rax
.text:00000000000037FE                 test    rsi, rsi
.text:0000000000003801                 mov     dword ptr [rdi], 0Ah
.text:0000000000003807                 jz      short loc_3817
.text:0000000000003809                 test    rdx, rdx
.text:000000000000380C                 jz      short loc_3817
.text:000000000000380E                 mov     [rdi+28h], rsi
.text:0000000000003812                 mov     [rdi+30h], rdx
.text:0000000000003816                 retn
.text:0000000000003817 ; ---------------------------------------------------------------------------
.text:0000000000003817
.text:0000000000003817 loc_3817:                               ; CODE XREF: set_custom_quoting+17↑j
.text:0000000000003817                                         ; set_custom_quoting+1C↑j
.text:0000000000003817                 sub     rsp, 8
.text:000000000000381B                 call    _abort
.text:000000000000381B ; } // starts at 37F0
.text:000000000000381B set_custom_quoting endp
.text:000000000000381B
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820 ; Attributes: info_from_lumina
.text:0000000000003820
.text:0000000000003820 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:0000000000003820                 public quotearg_buffer
.text:0000000000003820 quotearg_buffer proc near
.text:0000000000003820
.text:0000000000003820 var_40          = qword ptr -40h
.text:0000000000003820
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 push    r15
.text:0000000000003822                 push    r14
.text:0000000000003824                 lea     rax, default_quoting_options
.text:000000000000382B                 push    r13
.text:000000000000382D                 push    r12
.text:000000000000382F                 mov     r13, rdi
.text:0000000000003832                 push    rbp
.text:0000000000003833                 push    rbx
.text:0000000000003834                 mov     rbx, r8
.text:0000000000003837                 mov     r14, rsi
.text:000000000000383A                 mov     r15, rdx
.text:000000000000383D                 sub     rsp, 18h
.text:0000000000003841                 test    r8, r8
.text:0000000000003844                 cmovz   rbx, rax
.text:0000000000003848                 mov     [rsp+48h+var_40], rcx
.text:000000000000384D                 call    ___errno_location
.text:0000000000003852                 mov     r12d, [rax]
.text:0000000000003855                 mov     rbp, rax
.text:0000000000003858                 lea     rax, [rbx+8]
.text:000000000000385C                 sub     rsp, 8
.text:0000000000003860                 mov     r9d, [rbx+4]
.text:0000000000003864                 push    qword ptr [rbx+30h]
.text:0000000000003867                 mov     r8d, [rbx]
.text:000000000000386A                 push    qword ptr [rbx+28h]
.text:000000000000386D                 mov     rdx, r15
.text:0000000000003870                 push    rax
.text:0000000000003871                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003876                 mov     rsi, r14
.text:0000000000003879                 mov     rdi, r13
.text:000000000000387C                 call    quotearg_buffer_restyled
.text:0000000000003881                 mov     [rbp+0], r12d
.text:0000000000003885                 add     rsp, 38h
.text:0000000000003889                 pop     rbx
.text:000000000000388A                 pop     rbp
.text:000000000000388B                 pop     r12
.text:000000000000388D                 pop     r13
.text:000000000000388F                 pop     r14
.text:0000000000003891                 pop     r15
.text:0000000000003893                 retn
.text:0000000000003893 ; } // starts at 3820
.text:0000000000003893 quotearg_buffer endp
.text:0000000000003893
.text:0000000000003893 ; ---------------------------------------------------------------------------
.text:0000000000003894                 align 20h
.text:00000000000038A0
.text:00000000000038A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038A0
.text:00000000000038A0 ; Attributes: info_from_lumina
.text:00000000000038A0
.text:00000000000038A0 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:00000000000038A0                 public quotearg_alloc_mem
.text:00000000000038A0 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:00000000000038A0
.text:00000000000038A0 var_5C          = dword ptr -5Ch
.text:00000000000038A0 var_58          = qword ptr -58h
.text:00000000000038A0 var_50          = qword ptr -50h
.text:00000000000038A0 var_48          = qword ptr -48h
.text:00000000000038A0 var_40          = qword ptr -40h
.text:00000000000038A0
.text:00000000000038A0 ; __unwind {
.text:00000000000038A0                 push    r15
.text:00000000000038A2                 push    r14
.text:00000000000038A4                 lea     rax, default_quoting_options
.text:00000000000038AB                 push    r13
.text:00000000000038AD                 push    r12
.text:00000000000038AF                 mov     r12, rdx
.text:00000000000038B2                 push    rbp
.text:00000000000038B3                 push    rbx
.text:00000000000038B4                 mov     rbx, rcx
.text:00000000000038B7                 mov     r14, rdi
.text:00000000000038BA                 mov     r15, rsi
.text:00000000000038BD                 sub     rsp, 38h
.text:00000000000038C1                 test    rcx, rcx
.text:00000000000038C4                 cmovz   rbx, rax
.text:00000000000038C8                 xor     ebp, ebp
.text:00000000000038CA                 call    ___errno_location
.text:00000000000038CF                 test    r12, r12
.text:00000000000038D2                 mov     r13, rax
.text:00000000000038D5                 mov     eax, [rax]
.text:00000000000038D7                 setz    bpl
.text:00000000000038DB                 or      ebp, [rbx+4]
.text:00000000000038DE                 lea     r10, [rbx+8]
.text:00000000000038E2                 sub     rsp, 8
.text:00000000000038E6                 mov     r8d, [rbx]
.text:00000000000038E9                 mov     rcx, r15
.text:00000000000038EC                 mov     [rsp+70h+var_5C], eax
.text:00000000000038F0                 push    qword ptr [rbx+30h]
.text:00000000000038F3                 mov     rdx, r14
.text:00000000000038F6                 push    qword ptr [rbx+28h]
.text:00000000000038F9                 push    r10
.text:00000000000038FB                 xor     esi, esi
.text:00000000000038FD                 mov     r9d, ebp
.text:0000000000003900                 xor     edi, edi
.text:0000000000003902                 mov     [rsp+88h+var_48], r10
.text:0000000000003907                 call    quotearg_buffer_restyled
.text:000000000000390C                 lea     rsi, [rax+1]
.text:0000000000003910                 mov     [rsp+88h+var_40], rax
.text:0000000000003915                 add     rsp, 20h
.text:0000000000003919                 mov     rdi, rsi
.text:000000000000391C                 mov     [rsp+68h+var_50], rsi
.text:0000000000003921                 call    xmalloc
.text:0000000000003926                 mov     [rsp+68h+var_58], rax
.text:000000000000392B                 sub     rsp, 8
.text:000000000000392F                 push    qword ptr [rbx+30h]
.text:0000000000003932                 push    qword ptr [rbx+28h]
.text:0000000000003935                 mov     r10, [rsp+80h+var_48]
.text:000000000000393A                 mov     r9d, ebp
.text:000000000000393D                 mov     r8d, [rbx]
.text:0000000000003940                 mov     rcx, r15
.text:0000000000003943                 mov     rdx, r14
.text:0000000000003946                 mov     rdi, rax
.text:0000000000003949                 push    r10
.text:000000000000394B                 mov     rsi, [rsp+88h+var_50]
.text:0000000000003950                 call    quotearg_buffer_restyled
.text:0000000000003955                 mov     eax, [rsp+88h+var_5C]
.text:0000000000003959                 add     rsp, 20h
.text:000000000000395D                 test    r12, r12
.text:0000000000003960                 mov     [r13+0], eax
.text:0000000000003964                 jz      short loc_396F
.text:0000000000003966                 mov     r11, [rsp+68h+var_40]
.text:000000000000396B                 mov     [r12], r11
.text:000000000000396F
.text:000000000000396F loc_396F:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:000000000000396F                 mov     rax, [rsp+68h+var_58]
.text:0000000000003974                 add     rsp, 38h
.text:0000000000003978                 pop     rbx
.text:0000000000003979                 pop     rbp
.text:000000000000397A                 pop     r12
.text:000000000000397C                 pop     r13
.text:000000000000397E                 pop     r14
.text:0000000000003980                 pop     r15
.text:0000000000003982                 retn
.text:0000000000003982 ; } // starts at 38A0
.text:0000000000003982 quotearg_alloc_mem endp
.text:0000000000003982
.text:0000000000003982 ; ---------------------------------------------------------------------------
.text:0000000000003983                 align 10h
.text:0000000000003990
.text:0000000000003990 ; =============== S U B R O U T I N E =======================================
.text:0000000000003990
.text:0000000000003990
.text:0000000000003990                 public quotearg_alloc
.text:0000000000003990 quotearg_alloc  proc near
.text:0000000000003990 ; __unwind {
.text:0000000000003990                 mov     rcx, rdx
.text:0000000000003993                 xor     edx, edx
.text:0000000000003995                 jmp     quotearg_alloc_mem
.text:0000000000003995 ; } // starts at 3990
.text:0000000000003995 quotearg_alloc  endp
.text:0000000000003995
.text:0000000000003995 ; ---------------------------------------------------------------------------
.text:000000000000399A                 align 20h
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0 ; Attributes: info_from_lumina
.text:00000000000039A0
.text:00000000000039A0 ; void __cdecl quotearg_free()
.text:00000000000039A0                 public quotearg_free
.text:00000000000039A0 quotearg_free   proc near
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 mov     eax, cs:nslots
.text:00000000000039A6                 push    r12
.text:00000000000039A8                 mov     r12, cs:slotvec
.text:00000000000039AF                 push    rbp
.text:00000000000039B0                 push    rbx
.text:00000000000039B1                 cmp     eax, 1
.text:00000000000039B4                 jle     short loc_39E1
.text:00000000000039B6                 sub     eax, 2
.text:00000000000039B9                 lea     rbx, [r12+18h]
.text:00000000000039BE                 shl     rax, 4
.text:00000000000039C2                 lea     rbp, [r12+rax+28h]
.text:00000000000039C7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000039D0
.text:00000000000039D0 loc_39D0:                               ; CODE XREF: quotearg_free+3F↓j
.text:00000000000039D0                 mov     rdi, [rbx]      ; ptr
.text:00000000000039D3                 add     rbx, 10h
.text:00000000000039D7                 call    _free
.text:00000000000039DC                 cmp     rbx, rbp
.text:00000000000039DF                 jnz     short loc_39D0
.text:00000000000039E1
.text:00000000000039E1 loc_39E1:                               ; CODE XREF: quotearg_free+14↑j
.text:00000000000039E1                 mov     rdi, [r12+8]    ; ptr
.text:00000000000039E6                 lea     rbx, slot0
.text:00000000000039ED                 cmp     rdi, rbx
.text:00000000000039F0                 jz      short loc_3A09
.text:00000000000039F2                 call    _free
.text:00000000000039F7                 mov     cs:slotvec0, 100h
.text:0000000000003A02                 mov     cs:off_207078, rbx
.text:0000000000003A09
.text:0000000000003A09 loc_3A09:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003A09                 lea     rbx, slotvec0
.text:0000000000003A10                 cmp     r12, rbx
.text:0000000000003A13                 jz      short loc_3A24
.text:0000000000003A15                 mov     rdi, r12        ; ptr
.text:0000000000003A18                 call    _free
.text:0000000000003A1D                 mov     cs:slotvec, rbx
.text:0000000000003A24
.text:0000000000003A24 loc_3A24:                               ; CODE XREF: quotearg_free+73↑j
.text:0000000000003A24                 pop     rbx
.text:0000000000003A25                 mov     cs:nslots, 1
.text:0000000000003A2F                 pop     rbp
.text:0000000000003A30                 pop     r12
.text:0000000000003A32                 retn
.text:0000000000003A32 ; } // starts at 39A0
.text:0000000000003A32 quotearg_free   endp
.text:0000000000003A32
.text:0000000000003A32 ; ---------------------------------------------------------------------------
.text:0000000000003A33                 align 20h
.text:0000000000003A40
.text:0000000000003A40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A40
.text:0000000000003A40
.text:0000000000003A40                 public quotearg_n
.text:0000000000003A40 quotearg_n      proc near
.text:0000000000003A40 ; __unwind {
.text:0000000000003A40                 lea     rcx, default_quoting_options
.text:0000000000003A47                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A4E                 jmp     quotearg_n_options
.text:0000000000003A4E ; } // starts at 3A40
.text:0000000000003A4E quotearg_n      endp
.text:0000000000003A4E
.text:0000000000003A4E ; ---------------------------------------------------------------------------
.text:0000000000003A53                 align 20h
.text:0000000000003A60
.text:0000000000003A60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A60
.text:0000000000003A60
.text:0000000000003A60                 public quotearg_n_mem
.text:0000000000003A60 quotearg_n_mem  proc near
.text:0000000000003A60 ; __unwind {
.text:0000000000003A60                 lea     rcx, default_quoting_options
.text:0000000000003A67                 jmp     quotearg_n_options
.text:0000000000003A67 ; } // starts at 3A60
.text:0000000000003A67 quotearg_n_mem  endp
.text:0000000000003A67
.text:0000000000003A67 ; ---------------------------------------------------------------------------
.text:0000000000003A6C                 align 10h
.text:0000000000003A70
.text:0000000000003A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A70
.text:0000000000003A70
.text:0000000000003A70                 public quotearg
.text:0000000000003A70 quotearg        proc near
.text:0000000000003A70 ; __unwind {
.text:0000000000003A70                 lea     rcx, default_quoting_options
.text:0000000000003A77                 mov     rsi, rdi
.text:0000000000003A7A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A81                 xor     edi, edi
.text:0000000000003A83                 jmp     quotearg_n_options
.text:0000000000003A83 ; } // starts at 3A70
.text:0000000000003A83 quotearg        endp
.text:0000000000003A83
.text:0000000000003A83 ; ---------------------------------------------------------------------------
.text:0000000000003A88                 align 10h
.text:0000000000003A90
.text:0000000000003A90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A90
.text:0000000000003A90
.text:0000000000003A90                 public quotearg_mem
.text:0000000000003A90 quotearg_mem    proc near
.text:0000000000003A90 ; __unwind {
.text:0000000000003A90                 lea     rcx, default_quoting_options
.text:0000000000003A97                 mov     rdx, rsi
.text:0000000000003A9A                 mov     rsi, rdi
.text:0000000000003A9D                 xor     edi, edi
.text:0000000000003A9F                 jmp     quotearg_n_options
.text:0000000000003A9F ; } // starts at 3A90
.text:0000000000003A9F quotearg_mem    endp
.text:0000000000003A9F
.text:0000000000003A9F ; ---------------------------------------------------------------------------
.text:0000000000003AA4                 align 10h
.text:0000000000003AB0
.text:0000000000003AB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003AB0
.text:0000000000003AB0 ; Attributes: info_from_lumina
.text:0000000000003AB0
.text:0000000000003AB0 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003AB0                 public quotearg_n_style
.text:0000000000003AB0 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003AB0
.text:0000000000003AB0 var_48          = dword ptr -48h
.text:0000000000003AB0 var_44          = qword ptr -44h
.text:0000000000003AB0 var_3C          = qword ptr -3Ch
.text:0000000000003AB0 var_34          = qword ptr -34h
.text:0000000000003AB0 var_2C          = qword ptr -2Ch
.text:0000000000003AB0 var_24          = qword ptr -24h
.text:0000000000003AB0 var_1C          = qword ptr -1Ch
.text:0000000000003AB0 var_14          = dword ptr -14h
.text:0000000000003AB0 var_10          = qword ptr -10h
.text:0000000000003AB0
.text:0000000000003AB0 ; __unwind {
.text:0000000000003AB0                 sub     rsp, 48h
.text:0000000000003AB4                 mov     rax, rdx
.text:0000000000003AB7                 mov     rdx, fs:28h
.text:0000000000003AC0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003AC5                 xor     edx, edx
.text:0000000000003AC7                 cmp     esi, 0Ah
.text:0000000000003ACA                 jz      short loc_3B34
.text:0000000000003ACC                 mov     [rsp+48h+var_48], esi
.text:0000000000003ACF                 mov     rcx, rsp
.text:0000000000003AD2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003AD9                 mov     rsi, rax
.text:0000000000003ADC                 mov     [rsp+48h+var_44], 0
.text:0000000000003AE5                 mov     [rsp+48h+var_3C], 0
.text:0000000000003AEE                 mov     [rsp+48h+var_34], 0
.text:0000000000003AF7                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B00                 mov     [rsp+48h+var_24], 0
.text:0000000000003B09                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B12                 mov     [rsp+48h+var_14], 0
.text:0000000000003B1A                 call    quotearg_n_options
.text:0000000000003B1F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003B24                 xor     rcx, fs:28h
.text:0000000000003B2D                 jnz     short loc_3B39
.text:0000000000003B2F                 add     rsp, 48h
.text:0000000000003B33                 retn
.text:0000000000003B34 ; ---------------------------------------------------------------------------
.text:0000000000003B34
.text:0000000000003B34 loc_3B34:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:0000000000003B34                 call    _abort
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B39
.text:0000000000003B39 loc_3B39:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:0000000000003B39                 call    ___stack_chk_fail
.text:0000000000003B39 ; } // starts at 3AB0
.text:0000000000003B39 quotearg_n_style endp
.text:0000000000003B39
.text:0000000000003B39 ; ---------------------------------------------------------------------------
.text:0000000000003B3E                 align 20h
.text:0000000000003B40
.text:0000000000003B40 ; =============== S U B R O U T I N E =======================================
.text:0000000000003B40
.text:0000000000003B40 ; Attributes: info_from_lumina
.text:0000000000003B40
.text:0000000000003B40 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:0000000000003B40                 public quotearg_n_style_mem
.text:0000000000003B40 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:0000000000003B40
.text:0000000000003B40 var_48          = dword ptr -48h
.text:0000000000003B40 var_44          = qword ptr -44h
.text:0000000000003B40 var_3C          = qword ptr -3Ch
.text:0000000000003B40 var_34          = qword ptr -34h
.text:0000000000003B40 var_2C          = qword ptr -2Ch
.text:0000000000003B40 var_24          = qword ptr -24h
.text:0000000000003B40 var_1C          = qword ptr -1Ch
.text:0000000000003B40 var_14          = dword ptr -14h
.text:0000000000003B40 var_10          = qword ptr -10h
.text:0000000000003B40
.text:0000000000003B40 ; __unwind {
.text:0000000000003B40                 sub     rsp, 48h
.text:0000000000003B44                 mov     rax, rdx
.text:0000000000003B47                 mov     rdx, rcx
.text:0000000000003B4A                 mov     rcx, fs:28h
.text:0000000000003B53                 mov     [rsp+48h+var_10], rcx
.text:0000000000003B58                 xor     ecx, ecx
.text:0000000000003B5A                 cmp     esi, 0Ah
.text:0000000000003B5D                 jz      short loc_3BC0
.text:0000000000003B5F                 mov     [rsp+48h+var_48], esi
.text:0000000000003B62                 mov     rcx, rsp
.text:0000000000003B65                 mov     rsi, rax
.text:0000000000003B68                 mov     [rsp+48h+var_44], 0
.text:0000000000003B71                 mov     [rsp+48h+var_3C], 0
.text:0000000000003B7A                 mov     [rsp+48h+var_34], 0
.text:0000000000003B83                 mov     [rsp+48h+var_2C], 0
.text:0000000000003B8C                 mov     [rsp+48h+var_24], 0
.text:0000000000003B95                 mov     [rsp+48h+var_1C], 0
.text:0000000000003B9E                 mov     [rsp+48h+var_14], 0
.text:0000000000003BA6                 call    quotearg_n_options
.text:0000000000003BAB                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003BB0                 xor     rdx, fs:28h
.text:0000000000003BB9                 jnz     short loc_3BC5
.text:0000000000003BBB                 add     rsp, 48h
.text:0000000000003BBF                 retn
.text:0000000000003BC0 ; ---------------------------------------------------------------------------
.text:0000000000003BC0
.text:0000000000003BC0 loc_3BC0:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003BC0                 call    _abort
.text:0000000000003BC5 ; ---------------------------------------------------------------------------
.text:0000000000003BC5
.text:0000000000003BC5 loc_3BC5:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003BC5                 call    ___stack_chk_fail
.text:0000000000003BC5 ; } // starts at 3B40
.text:0000000000003BC5 quotearg_n_style_mem endp
.text:0000000000003BC5
.text:0000000000003BC5 ; ---------------------------------------------------------------------------
.text:0000000000003BCA                 align 10h
.text:0000000000003BD0
.text:0000000000003BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BD0
.text:0000000000003BD0
.text:0000000000003BD0                 public quotearg_style
.text:0000000000003BD0 quotearg_style  proc near
.text:0000000000003BD0 ; __unwind {
.text:0000000000003BD0                 mov     rdx, rsi
.text:0000000000003BD3                 mov     esi, edi
.text:0000000000003BD5                 xor     edi, edi
.text:0000000000003BD7                 jmp     quotearg_n_style
.text:0000000000003BD7 ; } // starts at 3BD0
.text:0000000000003BD7 quotearg_style  endp
.text:0000000000003BD7
.text:0000000000003BD7 ; ---------------------------------------------------------------------------
.text:0000000000003BDC                 align 20h
.text:0000000000003BE0
.text:0000000000003BE0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BE0
.text:0000000000003BE0
.text:0000000000003BE0                 public quotearg_style_mem
.text:0000000000003BE0 quotearg_style_mem proc near
.text:0000000000003BE0 ; __unwind {
.text:0000000000003BE0                 mov     rcx, rdx
.text:0000000000003BE3                 mov     rdx, rsi
.text:0000000000003BE6                 mov     esi, edi
.text:0000000000003BE8                 xor     edi, edi
.text:0000000000003BEA                 jmp     quotearg_n_style_mem
.text:0000000000003BEA ; } // starts at 3BE0
.text:0000000000003BEA quotearg_style_mem endp
.text:0000000000003BEA
.text:0000000000003BEA ; ---------------------------------------------------------------------------
.text:0000000000003BEF                 align 10h
.text:0000000000003BF0
.text:0000000000003BF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003BF0
.text:0000000000003BF0 ; Attributes: info_from_lumina
.text:0000000000003BF0
.text:0000000000003BF0 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003BF0                 public quotearg_char_mem
.text:0000000000003BF0 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003BF0                                         ; quotearg_colon+C↓j ...
.text:0000000000003BF0
.text:0000000000003BF0 var_48          = xmmword ptr -48h
.text:0000000000003BF0 var_38          = xmmword ptr -38h
.text:0000000000003BF0 var_28          = xmmword ptr -28h
.text:0000000000003BF0 var_18          = qword ptr -18h
.text:0000000000003BF0 var_10          = qword ptr -10h
.text:0000000000003BF0
.text:0000000000003BF0 ; __unwind {
.text:0000000000003BF0                 sub     rsp, 48h
.text:0000000000003BF4                 mov     ecx, edx
.text:0000000000003BF6                 mov     rax, fs:28h
.text:0000000000003BFF                 mov     [rsp+48h+var_10], rax
.text:0000000000003C04                 xor     eax, eax
.text:0000000000003C06                 mov     rax, cs:qword_207230
.text:0000000000003C0D                 mov     r8, rsp
.text:0000000000003C10                 and     ecx, 1Fh
.text:0000000000003C13                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003C1B                 mov     [rsp+48h+var_18], rax
.text:0000000000003C20                 mov     eax, edx
.text:0000000000003C22                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003C26                 shr     al, 5
.text:0000000000003C29                 movzx   eax, al
.text:0000000000003C2C                 lea     r9, [r8+rax*4+8]
.text:0000000000003C31                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003C39                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003C3E                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003C46                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003C4B                 mov     edx, [r9]
.text:0000000000003C4E                 mov     eax, edx
.text:0000000000003C50                 shr     eax, cl
.text:0000000000003C52                 not     eax
.text:0000000000003C54                 and     eax, 1
.text:0000000000003C57                 shl     eax, cl
.text:0000000000003C59                 mov     rcx, r8
.text:0000000000003C5C                 xor     eax, edx
.text:0000000000003C5E                 mov     rdx, rsi
.text:0000000000003C61                 mov     rsi, rdi
.text:0000000000003C64                 mov     [r9], eax
.text:0000000000003C67                 xor     edi, edi
.text:0000000000003C69                 call    quotearg_n_options
.text:0000000000003C6E                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003C73                 xor     rsi, fs:28h
.text:0000000000003C7C                 jnz     short loc_3C83
.text:0000000000003C7E                 add     rsp, 48h
.text:0000000000003C82                 retn
.text:0000000000003C83 ; ---------------------------------------------------------------------------
.text:0000000000003C83
.text:0000000000003C83 loc_3C83:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003C83                 call    ___stack_chk_fail
.text:0000000000003C83 ; } // starts at 3BF0
.text:0000000000003C83 quotearg_char_mem endp
.text:0000000000003C83
.text:0000000000003C83 ; ---------------------------------------------------------------------------
.text:0000000000003C88                 align 10h
.text:0000000000003C90
.text:0000000000003C90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003C90
.text:0000000000003C90
.text:0000000000003C90                 public quotearg_char
.text:0000000000003C90 quotearg_char   proc near
.text:0000000000003C90 ; __unwind {
.text:0000000000003C90                 movsx   edx, sil
.text:0000000000003C94                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003C9B                 jmp     quotearg_char_mem
.text:0000000000003C9B ; } // starts at 3C90
.text:0000000000003C9B quotearg_char   endp
.text:0000000000003C9B
.text:0000000000003CA0
.text:0000000000003CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CA0
.text:0000000000003CA0
.text:0000000000003CA0                 public quotearg_colon
.text:0000000000003CA0 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003CA0 ; __unwind {
.text:0000000000003CA0                 mov     edx, 3Ah ; ':'
.text:0000000000003CA5                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CAC                 jmp     quotearg_char_mem
.text:0000000000003CAC ; } // starts at 3CA0
.text:0000000000003CAC quotearg_colon  endp
.text:0000000000003CAC
.text:0000000000003CAC ; ---------------------------------------------------------------------------
.text:0000000000003CB1                 align 20h
.text:0000000000003CC0
.text:0000000000003CC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CC0
.text:0000000000003CC0
.text:0000000000003CC0                 public quotearg_colon_mem
.text:0000000000003CC0 quotearg_colon_mem proc near
.text:0000000000003CC0 ; __unwind {
.text:0000000000003CC0                 mov     edx, 3Ah ; ':'
.text:0000000000003CC5                 jmp     quotearg_char_mem
.text:0000000000003CC5 ; } // starts at 3CC0
.text:0000000000003CC5 quotearg_colon_mem endp
.text:0000000000003CC5
.text:0000000000003CC5 ; ---------------------------------------------------------------------------
.text:0000000000003CCA                 align 10h
.text:0000000000003CD0
.text:0000000000003CD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003CD0
.text:0000000000003CD0 ; Attributes: info_from_lumina
.text:0000000000003CD0
.text:0000000000003CD0 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003CD0                 public quotearg_n_style_colon
.text:0000000000003CD0 quotearg_n_style_colon proc near        ; CODE XREF: users+1C8↑p
.text:0000000000003CD0
.text:0000000000003CD0 var_48          = dword ptr -48h
.text:0000000000003CD0 var_44          = qword ptr -44h
.text:0000000000003CD0 var_3C          = qword ptr -3Ch
.text:0000000000003CD0 var_34          = qword ptr -34h
.text:0000000000003CD0 var_2C          = qword ptr -2Ch
.text:0000000000003CD0 var_24          = qword ptr -24h
.text:0000000000003CD0 var_1C          = qword ptr -1Ch
.text:0000000000003CD0 var_14          = dword ptr -14h
.text:0000000000003CD0 var_10          = qword ptr -10h
.text:0000000000003CD0
.text:0000000000003CD0 ; __unwind {
.text:0000000000003CD0                 sub     rsp, 48h
.text:0000000000003CD4                 mov     rax, rdx
.text:0000000000003CD7                 mov     rdx, fs:28h
.text:0000000000003CE0                 mov     [rsp+48h+var_10], rdx
.text:0000000000003CE5                 xor     edx, edx
.text:0000000000003CE7                 cmp     esi, 0Ah
.text:0000000000003CEA                 jz      short loc_3D54
.text:0000000000003CEC                 mov     [rsp+48h+var_48], esi
.text:0000000000003CEF                 mov     rcx, rsp
.text:0000000000003CF2                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003CF9                 mov     rsi, rax
.text:0000000000003CFC                 mov     [rsp+48h+var_44], 0
.text:0000000000003D05                 mov     [rsp+48h+var_3C], 4000000h
.text:0000000000003D0E                 mov     [rsp+48h+var_34], 0
.text:0000000000003D17                 mov     [rsp+48h+var_2C], 0
.text:0000000000003D20                 mov     [rsp+48h+var_24], 0
.text:0000000000003D29                 mov     [rsp+48h+var_1C], 0
.text:0000000000003D32                 mov     [rsp+48h+var_14], 0
.text:0000000000003D3A                 call    quotearg_n_options
.text:0000000000003D3F                 mov     rcx, [rsp+48h+var_10]
.text:0000000000003D44                 xor     rcx, fs:28h
.text:0000000000003D4D                 jnz     short loc_3D59
.text:0000000000003D4F                 add     rsp, 48h
.text:0000000000003D53                 retn
.text:0000000000003D54 ; ---------------------------------------------------------------------------
.text:0000000000003D54
.text:0000000000003D54 loc_3D54:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:0000000000003D54                 call    _abort
.text:0000000000003D59 ; ---------------------------------------------------------------------------
.text:0000000000003D59
.text:0000000000003D59 loc_3D59:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:0000000000003D59                 call    ___stack_chk_fail
.text:0000000000003D59 ; } // starts at 3CD0
.text:0000000000003D59 quotearg_n_style_colon endp
.text:0000000000003D59
.text:0000000000003D59 ; ---------------------------------------------------------------------------
.text:0000000000003D5E                 align 20h
.text:0000000000003D60
.text:0000000000003D60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003D60
.text:0000000000003D60 ; Attributes: info_from_lumina
.text:0000000000003D60
.text:0000000000003D60 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:0000000000003D60                 public quotearg_n_custom_mem
.text:0000000000003D60 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:0000000000003D60                                         ; quotearg_custom+12↓j ...
.text:0000000000003D60
.text:0000000000003D60 var_48          = xmmword ptr -48h
.text:0000000000003D60 var_38          = xmmword ptr -38h
.text:0000000000003D60 var_28          = xmmword ptr -28h
.text:0000000000003D60 var_18          = qword ptr -18h
.text:0000000000003D60 var_10          = qword ptr -10h
.text:0000000000003D60
.text:0000000000003D60 ; __unwind {
.text:0000000000003D60                 sub     rsp, 48h
.text:0000000000003D64                 mov     r9, rcx
.text:0000000000003D67                 mov     rcx, cs:qword_207230
.text:0000000000003D6E                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003D76                 mov     rax, fs:28h
.text:0000000000003D7F                 mov     [rsp+48h+var_10], rax
.text:0000000000003D84                 xor     eax, eax
.text:0000000000003D86                 movaps  [rsp+48h+var_48], xmm0
.text:0000000000003D8A                 test    rsi, rsi
.text:0000000000003D8D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003D92                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003D99                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003DA1                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003DA6                 movdqa  xmm0, cs:xmmword_207220
.text:0000000000003DAE                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003DB3                 jz      short loc_3DE7
.text:0000000000003DB5                 test    rdx, rdx
.text:0000000000003DB8                 jz      short loc_3DE7
.text:0000000000003DBA                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:0000000000003DBF                 mov     [rsp+48h+var_18], rdx
.text:0000000000003DC4                 mov     rcx, rsp
.text:0000000000003DC7                 mov     rdx, r8
.text:0000000000003DCA                 mov     rsi, r9
.text:0000000000003DCD                 call    quotearg_n_options
.text:0000000000003DD2                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003DD7                 xor     rdi, fs:28h
.text:0000000000003DE0                 jnz     short loc_3DEC
.text:0000000000003DE2                 add     rsp, 48h
.text:0000000000003DE6                 retn
.text:0000000000003DE7 ; ---------------------------------------------------------------------------
.text:0000000000003DE7
.text:0000000000003DE7 loc_3DE7:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003DE7                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003DE7                 call    _abort
.text:0000000000003DEC ; ---------------------------------------------------------------------------
.text:0000000000003DEC
.text:0000000000003DEC loc_3DEC:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:0000000000003DEC                 call    ___stack_chk_fail
.text:0000000000003DEC ; } // starts at 3D60
.text:0000000000003DEC quotearg_n_custom_mem endp
.text:0000000000003DEC
.text:0000000000003DEC ; ---------------------------------------------------------------------------
.text:0000000000003DF1                 align 20h
.text:0000000000003E00
.text:0000000000003E00 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E00
.text:0000000000003E00
.text:0000000000003E00                 public quotearg_n_custom
.text:0000000000003E00 quotearg_n_custom proc near
.text:0000000000003E00 ; __unwind {
.text:0000000000003E00                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E07                 jmp     quotearg_n_custom_mem
.text:0000000000003E07 ; } // starts at 3E00
.text:0000000000003E07 quotearg_n_custom endp
.text:0000000000003E07
.text:0000000000003E07 ; ---------------------------------------------------------------------------
.text:0000000000003E0C                 align 10h
.text:0000000000003E10
.text:0000000000003E10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E10
.text:0000000000003E10
.text:0000000000003E10                 public quotearg_custom
.text:0000000000003E10 quotearg_custom proc near
.text:0000000000003E10 ; __unwind {
.text:0000000000003E10                 mov     rcx, rdx
.text:0000000000003E13                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E1A                 mov     rdx, rsi
.text:0000000000003E1D                 mov     rsi, rdi
.text:0000000000003E20                 xor     edi, edi
.text:0000000000003E22                 jmp     quotearg_n_custom_mem
.text:0000000000003E22 ; } // starts at 3E10
.text:0000000000003E22 quotearg_custom endp
.text:0000000000003E22
.text:0000000000003E22 ; ---------------------------------------------------------------------------
.text:0000000000003E27                 align 10h
.text:0000000000003E30
.text:0000000000003E30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E30
.text:0000000000003E30
.text:0000000000003E30                 public quotearg_custom_mem
.text:0000000000003E30 quotearg_custom_mem proc near
.text:0000000000003E30 ; __unwind {
.text:0000000000003E30                 mov     r8, rcx
.text:0000000000003E33                 mov     rcx, rdx
.text:0000000000003E36                 mov     rdx, rsi
.text:0000000000003E39                 mov     rsi, rdi
.text:0000000000003E3C                 xor     edi, edi
.text:0000000000003E3E                 jmp     quotearg_n_custom_mem
.text:0000000000003E3E ; } // starts at 3E30
.text:0000000000003E3E quotearg_custom_mem endp
.text:0000000000003E3E
.text:0000000000003E3E ; ---------------------------------------------------------------------------
.text:0000000000003E43                 align 10h
.text:0000000000003E50
.text:0000000000003E50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E50
.text:0000000000003E50
.text:0000000000003E50                 public quote_n_mem
.text:0000000000003E50 quote_n_mem     proc near
.text:0000000000003E50 ; __unwind {
.text:0000000000003E50                 lea     rcx, quote_quoting_options
.text:0000000000003E57                 jmp     quotearg_n_options
.text:0000000000003E57 ; } // starts at 3E50
.text:0000000000003E57 quote_n_mem     endp
.text:0000000000003E57
.text:0000000000003E57 ; ---------------------------------------------------------------------------
.text:0000000000003E5C                 align 20h
.text:0000000000003E60
.text:0000000000003E60 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E60
.text:0000000000003E60
.text:0000000000003E60                 public quote_mem
.text:0000000000003E60 quote_mem       proc near
.text:0000000000003E60 ; __unwind {
.text:0000000000003E60                 lea     rcx, quote_quoting_options
.text:0000000000003E67                 mov     rdx, rsi
.text:0000000000003E6A                 mov     rsi, rdi
.text:0000000000003E6D                 xor     edi, edi
.text:0000000000003E6F                 jmp     quotearg_n_options
.text:0000000000003E6F ; } // starts at 3E60
.text:0000000000003E6F quote_mem       endp
.text:0000000000003E6F
.text:0000000000003E6F ; ---------------------------------------------------------------------------
.text:0000000000003E74                 align 20h
.text:0000000000003E80
.text:0000000000003E80 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E80
.text:0000000000003E80
.text:0000000000003E80                 public quote_n
.text:0000000000003E80 quote_n         proc near
.text:0000000000003E80 ; __unwind {
.text:0000000000003E80                 lea     rcx, quote_quoting_options
.text:0000000000003E87                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003E8E                 jmp     quotearg_n_options
.text:0000000000003E8E ; } // starts at 3E80
.text:0000000000003E8E quote_n         endp
.text:0000000000003E8E
.text:0000000000003E8E ; ---------------------------------------------------------------------------
.text:0000000000003E93                 align 20h
.text:0000000000003EA0
.text:0000000000003EA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EA0
.text:0000000000003EA0
.text:0000000000003EA0                 public quote
.text:0000000000003EA0 quote           proc near               ; CODE XREF: main+D1↑p
.text:0000000000003EA0 ; __unwind {
.text:0000000000003EA0                 lea     rcx, quote_quoting_options
.text:0000000000003EA7                 mov     rsi, rdi
.text:0000000000003EAA                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003EB1                 xor     edi, edi
.text:0000000000003EB3                 jmp     quotearg_n_options
.text:0000000000003EB3 ; } // starts at 3EA0
.text:0000000000003EB3 quote           endp
.text:0000000000003EB3
.text:0000000000003EB3 ; ---------------------------------------------------------------------------
.text:0000000000003EB8                 align 20h
.text:0000000000003EC0
.text:0000000000003EC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003EC0
.text:0000000000003EC0
.text:0000000000003EC0 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003EC0                 public version_etc_arn
.text:0000000000003EC0 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_42FB↓j
.text:0000000000003EC0                                         ; version_etc_va:loc_434B↓p ...
.text:0000000000003EC0
.text:0000000000003EC0 var_58          = qword ptr -58h
.text:0000000000003EC0 var_50          = qword ptr -50h
.text:0000000000003EC0 var_48          = qword ptr -48h
.text:0000000000003EC0 var_40          = qword ptr -40h
.text:0000000000003EC0
.text:0000000000003EC0 ; __unwind {
.text:0000000000003EC0                 push    r15
.text:0000000000003EC2                 push    r14
.text:0000000000003EC4                 push    r13
.text:0000000000003EC6                 push    r12
.text:0000000000003EC8                 mov     r12, r9
.text:0000000000003ECB                 push    rbp
.text:0000000000003ECC                 push    rbx
.text:0000000000003ECD                 mov     rbp, rdi
.text:0000000000003ED0                 mov     rbx, r8
.text:0000000000003ED3                 sub     rsp, 28h
.text:0000000000003ED7                 test    rsi, rsi
.text:0000000000003EDA                 jz      loc_3FF8
.text:0000000000003EE0                 mov     r8, rdx
.text:0000000000003EE3                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003EEA                 mov     r9, rcx
.text:0000000000003EED                 xor     eax, eax
.text:0000000000003EEF                 mov     rcx, rsi
.text:0000000000003EF2                 mov     esi, 1
.text:0000000000003EF7                 call    ___fprintf_chk
.text:0000000000003EFC
.text:0000000000003EFC loc_3EFC:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003EFC                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003F03                 xor     edi, edi        ; domainname
.text:0000000000003F05                 mov     edx, 5          ; category
.text:0000000000003F0A                 call    _dcgettext
.text:0000000000003F0F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003F16                 mov     rcx, rax
.text:0000000000003F19                 mov     r8d, 7E3h
.text:0000000000003F1F                 mov     esi, 1
.text:0000000000003F24                 mov     rdi, rbp
.text:0000000000003F27                 xor     eax, eax
.text:0000000000003F29                 call    ___fprintf_chk
.text:0000000000003F2E                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003F35                 xor     edi, edi        ; domainname
.text:0000000000003F37                 mov     edx, 5          ; category
.text:0000000000003F3C                 call    _dcgettext
.text:0000000000003F41                 mov     rsi, rbp        ; stream
.text:0000000000003F44                 mov     rdi, rax        ; s
.text:0000000000003F47                 call    _fputs_unlocked
.text:0000000000003F4C                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003F50                 ja      def_3F64        ; jumptable 0000000000003F64 default case
.text:0000000000003F56                 lea     rdx, jpt_3F64
.text:0000000000003F5D                 movsxd  rax, ds:(jpt_3F64 - 5808h)[rdx+r12*4]
.text:0000000000003F61                 add     rax, rdx
.text:0000000000003F64                 jmp     rax             ; switch jump
.text:0000000000003F64 ; ---------------------------------------------------------------------------
.text:0000000000003F66                 align 10h
.text:0000000000003F70
.text:0000000000003F70 loc_3F70:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003F70                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:0000000000003F70                 mov     r9, [rbx+38h]   ; jumptable 0000000000003F64 case 8
.text:0000000000003F74                 mov     rax, [rbx+10h]
.text:0000000000003F78                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003F7F                 mov     r8, [rbx+8]
.text:0000000000003F83                 mov     edx, 5          ; category
.text:0000000000003F88                 xor     edi, edi        ; domainname
.text:0000000000003F8A                 mov     r13, [rbx+30h]
.text:0000000000003F8E                 mov     r12, [rbx+28h]
.text:0000000000003F92                 mov     [rsp+58h+var_48], r9
.text:0000000000003F97                 mov     r15, [rbx+20h]
.text:0000000000003F9B                 mov     r14, [rbx+18h]
.text:0000000000003F9F                 mov     [rsp+58h+var_58], rax
.text:0000000000003FA3                 mov     [rsp+58h+var_50], r8
.text:0000000000003FA8                 mov     rbx, [rbx]
.text:0000000000003FAB                 call    _dcgettext
.text:0000000000003FB0                 sub     rsp, 8
.text:0000000000003FB4
.text:0000000000003FB4 loc_3FB4:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003FB4                 mov     r9, [rsp+60h+var_48]
.text:0000000000003FB9                 mov     rdx, rax
.text:0000000000003FBC                 mov     rcx, rbx
.text:0000000000003FBF                 mov     esi, 1
.text:0000000000003FC4                 mov     rdi, rbp
.text:0000000000003FC7                 xor     eax, eax
.text:0000000000003FC9                 push    r9
.text:0000000000003FCB                 push    r13
.text:0000000000003FCD                 push    r12
.text:0000000000003FCF                 push    r15
.text:0000000000003FD1                 push    r14
.text:0000000000003FD3                 mov     r9, [rsp+88h+var_58]
.text:0000000000003FD8                 mov     r8, [rsp+88h+var_50]
.text:0000000000003FDD                 call    ___fprintf_chk
.text:0000000000003FE2                 add     rsp, 30h
.text:0000000000003FE6
.text:0000000000003FE6 loc_3FE6:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003FE6                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:0000000000003FE6                 add     rsp, 28h        ; jumptable 0000000000003F64 case 0
.text:0000000000003FEA                 pop     rbx
.text:0000000000003FEB                 pop     rbp
.text:0000000000003FEC                 pop     r12
.text:0000000000003FEE                 pop     r13
.text:0000000000003FF0                 pop     r14
.text:0000000000003FF2                 pop     r15
.text:0000000000003FF4                 retn
.text:0000000000003FF4 ; ---------------------------------------------------------------------------
.text:0000000000003FF5                 align 8
.text:0000000000003FF8
.text:0000000000003FF8 loc_3FF8:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003FF8                 mov     r8, rcx
.text:0000000000003FFB                 mov     rcx, rdx
.text:0000000000003FFE                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000004005                 mov     esi, 1
.text:000000000000400A                 xor     eax, eax
.text:000000000000400C                 call    ___fprintf_chk
.text:0000000000004011                 jmp     loc_3EFC
.text:0000000000004011 ; ---------------------------------------------------------------------------
.text:0000000000004016                 align 20h
.text:0000000000004020
.text:0000000000004020 loc_4020:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004020                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:0000000000004020                 mov     r10, [rbx+40h]  ; jumptable 0000000000003F64 case 9
.text:0000000000004024                 mov     r9, [rbx+38h]
.text:0000000000004028                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:000000000000402F                 mov     rax, [rbx+10h]
.text:0000000000004033                 mov     r8, [rbx+8]
.text:0000000000004037                 mov     edx, 5          ; category
.text:000000000000403C                 mov     r13, [rbx+30h]
.text:0000000000004040                 mov     r12, [rbx+28h]
.text:0000000000004044                 mov     r15, [rbx+20h]
.text:0000000000004048                 mov     r14, [rbx+18h]
.text:000000000000404C                 mov     rbx, [rbx]
.text:000000000000404F                 mov     [rsp+58h+var_40], r10
.text:0000000000004054                 mov     [rsp+58h+var_48], r9
.text:0000000000004059                 mov     [rsp+58h+var_58], rax
.text:000000000000405D                 mov     [rsp+58h+var_50], r8
.text:0000000000004062
.text:0000000000004062 loc_4062:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000004062                 xor     edi, edi        ; domainname
.text:0000000000004064                 call    _dcgettext
.text:0000000000004069                 mov     r10, [rsp+58h+var_40]
.text:000000000000406E                 push    r10
.text:0000000000004070                 jmp     loc_3FB4
.text:0000000000004070 ; ---------------------------------------------------------------------------
.text:0000000000004075                 align 8
.text:0000000000004078
.text:0000000000004078 loc_4078:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004078                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:0000000000004078                 mov     rbx, [rbx]      ; jumptable 0000000000003F64 case 1
.text:000000000000407B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000004082                 mov     edx, 5          ; category
.text:0000000000004087                 xor     edi, edi        ; domainname
.text:0000000000004089                 call    _dcgettext
.text:000000000000408E                 add     rsp, 28h
.text:0000000000004092                 mov     rcx, rbx
.text:0000000000004095                 mov     rdi, rbp
.text:0000000000004098                 pop     rbx
.text:0000000000004099                 pop     rbp
.text:000000000000409A                 pop     r12
.text:000000000000409C                 pop     r13
.text:000000000000409E                 pop     r14
.text:00000000000040A0                 pop     r15
.text:00000000000040A2                 mov     rdx, rax
.text:00000000000040A5                 mov     esi, 1
.text:00000000000040AA                 xor     eax, eax
.text:00000000000040AC                 jmp     ___fprintf_chk
.text:00000000000040AC ; ---------------------------------------------------------------------------
.text:00000000000040B1                 align 8
.text:00000000000040B8
.text:00000000000040B8 loc_40B8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000040B8                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:00000000000040B8                 mov     r12, [rbx+8]    ; jumptable 0000000000003F64 case 2
.text:00000000000040BC                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:00000000000040C3                 mov     rbx, [rbx]
.text:00000000000040C6                 mov     edx, 5          ; category
.text:00000000000040CB                 xor     edi, edi        ; domainname
.text:00000000000040CD                 call    _dcgettext
.text:00000000000040D2                 add     rsp, 28h
.text:00000000000040D6                 mov     r8, r12
.text:00000000000040D9                 mov     rcx, rbx
.text:00000000000040DC                 mov     rdi, rbp
.text:00000000000040DF                 mov     rdx, rax
.text:00000000000040E2                 mov     esi, 1
.text:00000000000040E7                 pop     rbx
.text:00000000000040E8                 pop     rbp
.text:00000000000040E9                 pop     r12
.text:00000000000040EB                 pop     r13
.text:00000000000040ED                 pop     r14
.text:00000000000040EF                 pop     r15
.text:00000000000040F1                 xor     eax, eax
.text:00000000000040F3                 jmp     ___fprintf_chk
.text:00000000000040F3 ; ---------------------------------------------------------------------------
.text:00000000000040F8                 align 20h
.text:0000000000004100
.text:0000000000004100 loc_4100:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004100                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:0000000000004100                 mov     r13, [rbx+10h]  ; jumptable 0000000000003F64 case 3
.text:0000000000004104                 mov     r12, [rbx+8]
.text:0000000000004108                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:000000000000410F                 mov     rbx, [rbx]
.text:0000000000004112                 mov     edx, 5          ; category
.text:0000000000004117                 xor     edi, edi        ; domainname
.text:0000000000004119                 call    _dcgettext
.text:000000000000411E                 add     rsp, 28h
.text:0000000000004122                 mov     r9, r13
.text:0000000000004125                 mov     r8, r12
.text:0000000000004128                 mov     rcx, rbx
.text:000000000000412B                 mov     rdi, rbp
.text:000000000000412E                 mov     rdx, rax
.text:0000000000004131                 pop     rbx
.text:0000000000004132                 pop     rbp
.text:0000000000004133                 pop     r12
.text:0000000000004135                 pop     r13
.text:0000000000004137                 pop     r14
.text:0000000000004139                 pop     r15
.text:000000000000413B                 mov     esi, 1
.text:0000000000004140                 xor     eax, eax
.text:0000000000004142                 jmp     ___fprintf_chk
.text:0000000000004142 ; ---------------------------------------------------------------------------
.text:0000000000004147                 align 10h
.text:0000000000004150
.text:0000000000004150 loc_4150:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004150                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:0000000000004150                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003F64 case 4
.text:0000000000004157                 mov     edx, 5          ; category
.text:000000000000415C                 xor     edi, edi        ; domainname
.text:000000000000415E                 mov     r14, [rbx+18h]
.text:0000000000004162                 mov     r13, [rbx+10h]
.text:0000000000004166                 mov     r12, [rbx+8]
.text:000000000000416A                 mov     rbx, [rbx]
.text:000000000000416D                 call    _dcgettext
.text:0000000000004172                 sub     rsp, 8
.text:0000000000004176
.text:0000000000004176 loc_4176:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000004176                 push    r14
.text:0000000000004178                 mov     rdx, rax
.text:000000000000417B                 mov     r9, r13
.text:000000000000417E                 mov     r8, r12
.text:0000000000004181                 mov     rcx, rbx
.text:0000000000004184                 mov     rdi, rbp
.text:0000000000004187                 mov     esi, 1
.text:000000000000418C                 xor     eax, eax
.text:000000000000418E                 call    ___fprintf_chk
.text:0000000000004193                 pop     rax
.text:0000000000004194                 pop     rdx
.text:0000000000004195                 add     rsp, 28h
.text:0000000000004199                 pop     rbx
.text:000000000000419A                 pop     rbp
.text:000000000000419B                 pop     r12
.text:000000000000419D                 pop     r13
.text:000000000000419F                 pop     r14
.text:00000000000041A1                 pop     r15
.text:00000000000041A3                 retn
.text:00000000000041A3 ; ---------------------------------------------------------------------------
.text:00000000000041A4                 align 8
.text:00000000000041A8
.text:00000000000041A8 loc_41A8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041A8                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:00000000000041A8                 mov     r15, [rbx+20h]  ; jumptable 0000000000003F64 case 5
.text:00000000000041AC                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:00000000000041B3                 mov     edx, 5          ; category
.text:00000000000041B8                 xor     edi, edi        ; domainname
.text:00000000000041BA                 mov     r14, [rbx+18h]
.text:00000000000041BE                 mov     r13, [rbx+10h]
.text:00000000000041C2                 mov     r12, [rbx+8]
.text:00000000000041C6                 mov     rbx, [rbx]
.text:00000000000041C9                 call    _dcgettext
.text:00000000000041CE                 push    r15
.text:00000000000041D0                 jmp     short loc_4176
.text:00000000000041D0 ; ---------------------------------------------------------------------------
.text:00000000000041D2                 align 8
.text:00000000000041D8
.text:00000000000041D8 loc_41D8:                               ; CODE XREF: version_etc_arn+A4↑j
.text:00000000000041D8                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:00000000000041D8                 mov     r8, [rbx+8]     ; jumptable 0000000000003F64 case 6
.text:00000000000041DC                 mov     r12, [rbx+28h]
.text:00000000000041E0                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:00000000000041E7                 mov     r15, [rbx+20h]
.text:00000000000041EB                 mov     r14, [rbx+18h]
.text:00000000000041EF                 mov     edx, 5          ; category
.text:00000000000041F4                 mov     r13, [rbx+10h]
.text:00000000000041F8                 xor     edi, edi        ; domainname
.text:00000000000041FA                 mov     rbx, [rbx]
.text:00000000000041FD                 mov     [rsp+58h+var_58], r8
.text:0000000000004201                 call    _dcgettext
.text:0000000000004206                 sub     rsp, 8
.text:000000000000420A                 mov     r9, r13
.text:000000000000420D                 push    r12
.text:000000000000420F                 push    r15
.text:0000000000004211                 push    r14
.text:0000000000004213
.text:0000000000004213 loc_4213:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000004213                 mov     r8, [rsp+78h+var_58]
.text:0000000000004218                 mov     rcx, rbx
.text:000000000000421B                 mov     rdx, rax
.text:000000000000421E                 mov     rdi, rbp
.text:0000000000004221                 mov     esi, 1
.text:0000000000004226                 xor     eax, eax
.text:0000000000004228                 call    ___fprintf_chk
.text:000000000000422D                 add     rsp, 20h
.text:0000000000004231                 add     rsp, 28h
.text:0000000000004235                 pop     rbx
.text:0000000000004236                 pop     rbp
.text:0000000000004237                 pop     r12
.text:0000000000004239                 pop     r13
.text:000000000000423B                 pop     r14
.text:000000000000423D                 pop     r15
.text:000000000000423F                 retn
.text:0000000000004240 ; ---------------------------------------------------------------------------
.text:0000000000004240
.text:0000000000004240 loc_4240:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000004240                                         ; DATA XREF: .rodata:jpt_3F64↓o
.text:0000000000004240                 mov     r9, [rbx+10h]   ; jumptable 0000000000003F64 case 7
.text:0000000000004244                 mov     r13, [rbx+30h]
.text:0000000000004248                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:000000000000424F                 mov     r12, [rbx+28h]
.text:0000000000004253                 mov     r15, [rbx+20h]
.text:0000000000004257                 mov     edx, 5          ; category
.text:000000000000425C                 mov     r14, [rbx+18h]
.text:0000000000004260                 mov     r8, [rbx+8]
.text:0000000000004264                 xor     edi, edi        ; domainname
.text:0000000000004266                 mov     [rsp+58h+var_50], r9
.text:000000000000426B                 mov     rbx, [rbx]
.text:000000000000426E                 mov     [rsp+58h+var_58], r8
.text:0000000000004272                 call    _dcgettext
.text:0000000000004277                 push    r13
.text:0000000000004279                 push    r12
.text:000000000000427B                 push    r15
.text:000000000000427D                 push    r14
.text:000000000000427F                 mov     r9, [rsp+78h+var_50]
.text:0000000000004284                 jmp     short loc_4213
.text:0000000000004284 ; ---------------------------------------------------------------------------
.text:0000000000004286                 align 10h
.text:0000000000004290
.text:0000000000004290 def_3F64:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000004290                 mov     r10, [rbx+40h]  ; jumptable 0000000000003F64 default case
.text:0000000000004294                 mov     r9, [rbx+38h]
.text:0000000000004298                 mov     edx, 5
.text:000000000000429D                 mov     rax, [rbx+10h]
.text:00000000000042A1                 mov     r8, [rbx+8]
.text:00000000000042A5                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:00000000000042AC                 mov     r13, [rbx+30h]
.text:00000000000042B0                 mov     r12, [rbx+28h]
.text:00000000000042B4                 mov     r15, [rbx+20h]
.text:00000000000042B8                 mov     r14, [rbx+18h]
.text:00000000000042BC                 mov     [rsp+58h+var_40], r10
.text:00000000000042C1                 mov     [rsp+58h+var_48], r9
.text:00000000000042C6                 mov     [rsp+58h+var_58], rax
.text:00000000000042CA                 mov     [rsp+58h+var_50], r8
.text:00000000000042CF                 mov     rbx, [rbx]
.text:00000000000042D2                 jmp     loc_4062
.text:00000000000042D2 ; } // starts at 3EC0
.text:00000000000042D2 version_etc_arn endp
.text:00000000000042D2
.text:00000000000042D2 ; ---------------------------------------------------------------------------
.text:00000000000042D7                 align 20h
.text:00000000000042E0
.text:00000000000042E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042E0
.text:00000000000042E0 ; Attributes: info_from_lumina
.text:00000000000042E0
.text:00000000000042E0 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:00000000000042E0                 public version_etc_ar
.text:00000000000042E0 version_etc_ar  proc near
.text:00000000000042E0 ; __unwind {
.text:00000000000042E0                 xor     r9d, r9d
.text:00000000000042E3                 cmp     qword ptr [r8], 0
.text:00000000000042E7                 jz      short loc_42FB
.text:00000000000042E9                 nop     dword ptr [rax+00000000h]
.text:00000000000042F0
.text:00000000000042F0 loc_42F0:                               ; CODE XREF: version_etc_ar+19↓j
.text:00000000000042F0                 add     r9, 1
.text:00000000000042F4                 cmp     qword ptr [r8+r9*8], 0
.text:00000000000042F9                 jnz     short loc_42F0
.text:00000000000042FB
.text:00000000000042FB loc_42FB:                               ; CODE XREF: version_etc_ar+7↑j
.text:00000000000042FB                 jmp     version_etc_arn
.text:00000000000042FB ; } // starts at 42E0
.text:00000000000042FB version_etc_ar  endp
.text:00000000000042FB
.text:0000000000004300
.text:0000000000004300 ; =============== S U B R O U T I N E =======================================
.text:0000000000004300
.text:0000000000004300 ; Attributes: info_from_lumina
.text:0000000000004300
.text:0000000000004300 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000004300                 public version_etc_va
.text:0000000000004300 version_etc_va  proc near               ; CODE XREF: parse_long_options+11B↑p
.text:0000000000004300                                         ; parse_gnu_standard_options_only+EB↑p
.text:0000000000004300
.text:0000000000004300 authtab         = qword ptr -68h
.text:0000000000004300 var_10          = qword ptr -10h
.text:0000000000004300
.text:0000000000004300 ; __unwind {
.text:0000000000004300                 sub     rsp, 68h
.text:0000000000004304                 mov     r10, r8
.text:0000000000004307                 xor     r9d, r9d
.text:000000000000430A                 mov     rax, fs:28h
.text:0000000000004313                 mov     [rsp+68h+var_10], rax
.text:0000000000004318                 xor     eax, eax
.text:000000000000431A                 mov     r8, rsp
.text:000000000000431D                 nop     dword ptr [rax]
.text:0000000000004320
.text:0000000000004320 loc_4320:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000004320                 mov     eax, [r10]
.text:0000000000004323                 cmp     eax, 2Fh ; '/'
.text:0000000000004326                 ja      short loc_436A
.text:0000000000004328                 mov     r11d, eax
.text:000000000000432B                 add     r11, [r10+10h]
.text:000000000000432F                 add     eax, 8
.text:0000000000004332                 mov     [r10], eax
.text:0000000000004335
.text:0000000000004335 loc_4335:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000004335                 mov     rax, [r11]
.text:0000000000004338                 test    rax, rax
.text:000000000000433B                 mov     [r8+r9*8], rax
.text:000000000000433F                 jz      short loc_434B
.text:0000000000004341                 add     r9, 1
.text:0000000000004345                 cmp     r9, 0Ah
.text:0000000000004349                 jnz     short loc_4320
.text:000000000000434B
.text:000000000000434B loc_434B:                               ; CODE XREF: version_etc_va+3F↑j
.text:000000000000434B                 call    version_etc_arn
.text:0000000000004350                 mov     rax, [rsp+68h+var_10]
.text:0000000000004355                 xor     rax, fs:28h
.text:000000000000435E                 jnz     short loc_4365
.text:0000000000004360                 add     rsp, 68h
.text:0000000000004364                 retn
.text:0000000000004365 ; ---------------------------------------------------------------------------
.text:0000000000004365
.text:0000000000004365 loc_4365:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000004365                 call    ___stack_chk_fail
.text:000000000000436A ; ---------------------------------------------------------------------------
.text:000000000000436A
.text:000000000000436A loc_436A:                               ; CODE XREF: version_etc_va+26↑j
.text:000000000000436A                 mov     r11, [r10+8]
.text:000000000000436E                 lea     rax, [r11+8]
.text:0000000000004372                 mov     [r10+8], rax
.text:0000000000004376                 jmp     short loc_4335
.text:0000000000004376 ; } // starts at 4300
.text:0000000000004376 version_etc_va  endp
.text:0000000000004376
.text:0000000000004376 ; ---------------------------------------------------------------------------
.text:0000000000004378                 align 20h
.text:0000000000004380
.text:0000000000004380 ; =============== S U B R O U T I N E =======================================
.text:0000000000004380
.text:0000000000004380 ; Attributes: info_from_lumina
.text:0000000000004380
.text:0000000000004380 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000004380                 public version_etc
.text:0000000000004380 version_etc     proc near
.text:0000000000004380
.text:0000000000004380 var_C0          = dword ptr -0C0h
.text:0000000000004380 var_B8          = qword ptr -0B8h
.text:0000000000004380 var_B0          = qword ptr -0B0h
.text:0000000000004380 var_A8          = byte ptr -0A8h
.text:0000000000004380 var_50          = qword ptr -50h
.text:0000000000004380 var_48          = byte ptr -48h
.text:0000000000004380 var_28          = qword ptr -28h
.text:0000000000004380 var_20          = qword ptr -20h
.text:0000000000004380 arg_0           = byte ptr  8
.text:0000000000004380
.text:0000000000004380 ; __unwind {
.text:0000000000004380                 push    rbp
.text:0000000000004381                 push    rbx
.text:0000000000004382                 mov     r10d, 20h ; ' '
.text:0000000000004388                 xor     r11d, r11d
.text:000000000000438B                 sub     rsp, 0B8h
.text:0000000000004392                 mov     rax, fs:28h
.text:000000000000439B                 mov     [rsp+0C8h+var_50], rax
.text:00000000000043A0                 xor     eax, eax
.text:00000000000043A2                 lea     rax, [rsp+0C8h+arg_0]
.text:00000000000043AA                 mov     [rsp+0C8h+var_28], r8
.text:00000000000043B2                 lea     rbx, [rsp+0C8h+arg_0]
.text:00000000000043BA                 lea     r8, [rsp+0C8h+var_A8]
.text:00000000000043BF                 mov     [rsp+0C8h+var_20], r9
.text:00000000000043C7                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:00000000000043CF                 mov     [rsp+0C8h+var_B8], rax
.text:00000000000043D4                 lea     rax, [rsp+0C8h+var_48]
.text:00000000000043DC                 xor     r9d, r9d
.text:00000000000043DF                 mov     [rsp+0C8h+var_B0], rax
.text:00000000000043E4                 mov     rbp, rax
.text:00000000000043E7                 nop     word ptr [rax+rax+00000000h]
.text:00000000000043F0
.text:00000000000043F0 loc_43F0:                               ; CODE XREF: version_etc+9A↓j
.text:00000000000043F0                 cmp     r10d, 2Fh ; '/'
.text:00000000000043F4                 ja      short loc_444C
.text:00000000000043F6                 mov     eax, r10d
.text:00000000000043F9                 mov     r11d, 1
.text:00000000000043FF                 add     r10d, 8
.text:0000000000004403                 add     rax, rbp
.text:0000000000004406
.text:0000000000004406 loc_4406:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000004406                 mov     rax, [rax]
.text:0000000000004409                 test    rax, rax
.text:000000000000440C                 mov     [r8+r9*8], rax
.text:0000000000004410                 jz      short loc_441C
.text:0000000000004412                 add     r9, 1
.text:0000000000004416                 cmp     r9, 0Ah
.text:000000000000441A                 jnz     short loc_43F0
.text:000000000000441C
.text:000000000000441C loc_441C:                               ; CODE XREF: version_etc+90↑j
.text:000000000000441C                 test    r11b, r11b
.text:000000000000441F                 jnz     short loc_4445
.text:0000000000004421
.text:0000000000004421 loc_4421:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000004421                 call    version_etc_arn
.text:0000000000004426                 mov     rax, [rsp+0C8h+var_50]
.text:000000000000442B                 xor     rax, fs:28h
.text:0000000000004434                 jnz     short loc_4440
.text:0000000000004436                 add     rsp, 0B8h
.text:000000000000443D                 pop     rbx
.text:000000000000443E                 pop     rbp
.text:000000000000443F                 retn
.text:0000000000004440 ; ---------------------------------------------------------------------------
.text:0000000000004440
.text:0000000000004440 loc_4440:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000004440                 call    ___stack_chk_fail
.text:0000000000004445 ; ---------------------------------------------------------------------------
.text:0000000000004445
.text:0000000000004445 loc_4445:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000004445                 mov     [rsp+0C8h+var_C0], r10d
.text:000000000000444A                 jmp     short loc_4421
.text:000000000000444C ; ---------------------------------------------------------------------------
.text:000000000000444C
.text:000000000000444C loc_444C:                               ; CODE XREF: version_etc+74↑j
.text:000000000000444C                 mov     rax, rbx
.text:000000000000444F                 add     rbx, 8
.text:0000000000004453                 jmp     short loc_4406
.text:0000000000004453 ; } // starts at 4380
.text:0000000000004453 version_etc     endp
.text:0000000000004453
.text:0000000000004453 ; ---------------------------------------------------------------------------
.text:0000000000004455                 align 20h
.text:0000000000004460
.text:0000000000004460 ; =============== S U B R O U T I N E =======================================
.text:0000000000004460
.text:0000000000004460 ; Attributes: info_from_lumina
.text:0000000000004460
.text:0000000000004460 ; void __cdecl emit_bug_reporting_address()
.text:0000000000004460                 public emit_bug_reporting_address
.text:0000000000004460 emit_bug_reporting_address proc near
.text:0000000000004460 ; __unwind {
.text:0000000000004460                 push    rbx
.text:0000000000004461                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000004468                 mov     edx, 5          ; category
.text:000000000000446D                 xor     edi, edi        ; domainname
.text:000000000000446F                 call    _dcgettext
.text:0000000000004474                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000447B                 mov     rsi, rax
.text:000000000000447E                 mov     edi, 1
.text:0000000000004483                 xor     eax, eax
.text:0000000000004485                 call    ___printf_chk
.text:000000000000448A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004491                 mov     edx, 5          ; category
.text:0000000000004496                 xor     edi, edi        ; domainname
.text:0000000000004498                 call    _dcgettext
.text:000000000000449D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:00000000000044A4                 lea     rdx, unk_4D9A
.text:00000000000044AB                 mov     rsi, rax
.text:00000000000044AE                 mov     edi, 1
.text:00000000000044B3                 xor     eax, eax
.text:00000000000044B5                 call    ___printf_chk
.text:00000000000044BA                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000044C1                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:00000000000044C8                 xor     edi, edi        ; domainname
.text:00000000000044CA                 mov     edx, 5          ; category
.text:00000000000044CF                 call    _dcgettext
.text:00000000000044D4                 mov     rsi, rbx        ; stream
.text:00000000000044D7                 mov     rdi, rax        ; s
.text:00000000000044DA                 pop     rbx
.text:00000000000044DB                 jmp     _fputs_unlocked
.text:00000000000044DB ; } // starts at 4460
.text:00000000000044DB emit_bug_reporting_address endp
.text:00000000000044DB
.text:00000000000044E0
.text:00000000000044E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044E0
.text:00000000000044E0
.text:00000000000044E0                 public xmalloc
.text:00000000000044E0 xmalloc         proc near               ; CODE XREF: users+76↑p
.text:00000000000044E0                                         ; quotearg_n_options+127↑p ...
.text:00000000000044E0 ; __unwind {
.text:00000000000044E0                 push    rbx
.text:00000000000044E1                 mov     rbx, rdi
.text:00000000000044E4                 call    _malloc
.text:00000000000044E9                 test    rax, rax
.text:00000000000044EC                 jnz     short loc_44F3
.text:00000000000044EE                 test    rbx, rbx
.text:00000000000044F1                 jnz     short loc_44F5
.text:00000000000044F3
.text:00000000000044F3 loc_44F3:                               ; CODE XREF: xmalloc+C↑j
.text:00000000000044F3                 pop     rbx
.text:00000000000044F4                 retn
.text:00000000000044F5 ; ---------------------------------------------------------------------------
.text:00000000000044F5
.text:00000000000044F5 loc_44F5:                               ; CODE XREF: xmalloc+11↑j
.text:00000000000044F5                 call    xalloc_die
.text:00000000000044F5 ; } // starts at 44E0
.text:00000000000044F5 xmalloc         endp
.text:00000000000044F5
.text:00000000000044F5 ; ---------------------------------------------------------------------------
.text:00000000000044FA                 align 20h
.text:0000000000004500
.text:0000000000004500 ; =============== S U B R O U T I N E =======================================
.text:0000000000004500
.text:0000000000004500 ; Attributes: info_from_lumina
.text:0000000000004500
.text:0000000000004500 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004500                 public xnmalloc
.text:0000000000004500 xnmalloc        proc near
.text:0000000000004500 ; __unwind {
.text:0000000000004500                 mov     rax, rdi
.text:0000000000004503                 mul     rsi
.text:0000000000004506                 mov     rdi, rax
.text:0000000000004509                 seto    al
.text:000000000000450C                 test    rdi, rdi
.text:000000000000450F                 js      short loc_451B
.text:0000000000004511                 movzx   eax, al
.text:0000000000004514                 test    rax, rax
.text:0000000000004517                 jnz     short loc_451B
.text:0000000000004519                 jmp     short xmalloc
.text:000000000000451B ; ---------------------------------------------------------------------------
.text:000000000000451B
.text:000000000000451B loc_451B:                               ; CODE XREF: xnmalloc+F↑j
.text:000000000000451B                                         ; xnmalloc+17↑j
.text:000000000000451B                 sub     rsp, 8
.text:000000000000451F                 call    xalloc_die
.text:000000000000451F ; } // starts at 4500
.text:000000000000451F xnmalloc        endp
.text:000000000000451F
.text:000000000000451F ; ---------------------------------------------------------------------------
.text:0000000000004524                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530
.text:0000000000004530                 public xcharalloc
.text:0000000000004530 xcharalloc      proc near
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 jmp     short xmalloc
.text:0000000000004530 ; } // starts at 4530
.text:0000000000004530 xcharalloc      endp
.text:0000000000004530
.text:0000000000004530 ; ---------------------------------------------------------------------------
.text:0000000000004532                 align 20h
.text:0000000000004540
.text:0000000000004540 ; =============== S U B R O U T I N E =======================================
.text:0000000000004540
.text:0000000000004540 ; Attributes: info_from_lumina
.text:0000000000004540
.text:0000000000004540 ; void *__fastcall xrealloc(void *p, size_t n)
.text:0000000000004540                 public xrealloc
.text:0000000000004540 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:0000000000004540                                         ; quotearg_n_options+182↑p ...
.text:0000000000004540 ; __unwind {
.text:0000000000004540                 test    rsi, rsi
.text:0000000000004543                 push    rbx
.text:0000000000004544                 mov     rbx, rsi
.text:0000000000004547                 jnz     short loc_454E
.text:0000000000004549                 test    rdi, rdi
.text:000000000000454C                 jnz     short loc_4568
.text:000000000000454E
.text:000000000000454E loc_454E:                               ; CODE XREF: xrealloc+7↑j
.text:000000000000454E                 mov     rsi, rbx        ; size
.text:0000000000004551                 call    _realloc
.text:0000000000004556                 test    rax, rax
.text:0000000000004559                 jnz     short loc_4560
.text:000000000000455B                 test    rbx, rbx
.text:000000000000455E                 jnz     short loc_4571
.text:0000000000004560
.text:0000000000004560 loc_4560:                               ; CODE XREF: xrealloc+19↑j
.text:0000000000004560                 pop     rbx
.text:0000000000004561                 retn
.text:0000000000004561 ; ---------------------------------------------------------------------------
.text:0000000000004562                 align 8
.text:0000000000004568
.text:0000000000004568 loc_4568:                               ; CODE XREF: xrealloc+C↑j
.text:0000000000004568                 call    _free
.text:000000000000456D                 xor     eax, eax
.text:000000000000456F                 pop     rbx
.text:0000000000004570                 retn
.text:0000000000004571 ; ---------------------------------------------------------------------------
.text:0000000000004571
.text:0000000000004571 loc_4571:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004571                 call    xalloc_die
.text:0000000000004571 ; } // starts at 4540
.text:0000000000004571 xrealloc        endp
.text:0000000000004571
.text:0000000000004571 ; ---------------------------------------------------------------------------
.text:0000000000004576                 align 20h
.text:0000000000004580
.text:0000000000004580 ; =============== S U B R O U T I N E =======================================
.text:0000000000004580
.text:0000000000004580 ; Attributes: info_from_lumina
.text:0000000000004580
.text:0000000000004580 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004580                 public xnrealloc
.text:0000000000004580 xnrealloc       proc near
.text:0000000000004580 ; __unwind {
.text:0000000000004580                 mov     rax, rsi
.text:0000000000004583                 mul     rdx
.text:0000000000004586                 mov     rsi, rax
.text:0000000000004589                 seto    al
.text:000000000000458C                 test    rsi, rsi
.text:000000000000458F                 js      short loc_459B
.text:0000000000004591                 movzx   eax, al
.text:0000000000004594                 test    rax, rax
.text:0000000000004597                 jnz     short loc_459B
.text:0000000000004599                 jmp     short xrealloc
.text:000000000000459B ; ---------------------------------------------------------------------------
.text:000000000000459B
.text:000000000000459B loc_459B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000459B                                         ; xnrealloc+17↑j
.text:000000000000459B                 sub     rsp, 8
.text:000000000000459F                 call    xalloc_die
.text:000000000000459F ; } // starts at 4580
.text:000000000000459F xnrealloc       endp
.text:000000000000459F
.text:000000000000459F ; ---------------------------------------------------------------------------
.text:00000000000045A4                 align 10h
.text:00000000000045B0
.text:00000000000045B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045B0
.text:00000000000045B0 ; Attributes: info_from_lumina
.text:00000000000045B0
.text:00000000000045B0 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:00000000000045B0                 public x2nrealloc
.text:00000000000045B0 x2nrealloc      proc near
.text:00000000000045B0 ; __unwind {
.text:00000000000045B0                 test    rdi, rdi
.text:00000000000045B3                 mov     r9, rdx
.text:00000000000045B6                 mov     rcx, [rsi]
.text:00000000000045B9                 jz      short loc_45F0
.text:00000000000045BB                 xor     edx, edx
.text:00000000000045BD                 mov     rax, 5555555555555554h
.text:00000000000045C7                 div     r9
.text:00000000000045CA                 cmp     rax, rcx
.text:00000000000045CD                 jbe     short loc_460B
.text:00000000000045CF                 mov     rax, rcx
.text:00000000000045D2                 shr     rax, 1
.text:00000000000045D5                 lea     rcx, [rax+rcx+1]
.text:00000000000045DA
.text:00000000000045DA loc_45DA:                               ; CODE XREF: x2nrealloc+59↓j
.text:00000000000045DA                 mov     [rsi], rcx
.text:00000000000045DD                 imul    rcx, r9
.text:00000000000045E1                 mov     rsi, rcx
.text:00000000000045E4                 jmp     xrealloc
.text:00000000000045E4 ; ---------------------------------------------------------------------------
.text:00000000000045E9                 align 10h
.text:00000000000045F0
.text:00000000000045F0 loc_45F0:                               ; CODE XREF: x2nrealloc+9↑j
.text:00000000000045F0                 test    rcx, rcx
.text:00000000000045F3                 jz      short loc_4618
.text:00000000000045F5
.text:00000000000045F5 loc_45F5:                               ; CODE XREF: x2nrealloc+80↓j
.text:00000000000045F5                 mov     rax, rcx
.text:00000000000045F8                 mul     r9
.text:00000000000045FB                 seto    dl
.text:00000000000045FE                 test    rax, rax
.text:0000000000004601                 movzx   edx, dl
.text:0000000000004604                 js      short loc_460B
.text:0000000000004606                 test    rdx, rdx
.text:0000000000004609                 jz      short loc_45DA
.text:000000000000460B
.text:000000000000460B loc_460B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000460B                                         ; x2nrealloc+54↑j
.text:000000000000460B                 sub     rsp, 8
.text:000000000000460F                 call    xalloc_die
.text:000000000000460F ; ---------------------------------------------------------------------------
.text:0000000000004614                 align 8
.text:0000000000004618
.text:0000000000004618 loc_4618:                               ; CODE XREF: x2nrealloc+43↑j
.text:0000000000004618                 xor     edx, edx
.text:000000000000461A                 mov     eax, 80h
.text:000000000000461F                 xor     r8d, r8d
.text:0000000000004622                 div     r9
.text:0000000000004625                 test    rax, rax
.text:0000000000004628                 setz    r8b
.text:000000000000462C                 lea     rcx, [r8+rax]
.text:0000000000004630                 jmp     short loc_45F5
.text:0000000000004630 ; } // starts at 45B0
.text:0000000000004630 x2nrealloc      endp
.text:0000000000004630
.text:0000000000004630 ; ---------------------------------------------------------------------------
.text:0000000000004632                 align 20h
.text:0000000000004640
.text:0000000000004640 ; =============== S U B R O U T I N E =======================================
.text:0000000000004640
.text:0000000000004640 ; Attributes: info_from_lumina
.text:0000000000004640
.text:0000000000004640 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:0000000000004640                 public x2realloc
.text:0000000000004640 x2realloc       proc near
.text:0000000000004640 ; __unwind {
.text:0000000000004640                 test    rdi, rdi
.text:0000000000004643                 mov     rax, [rsi]
.text:0000000000004646                 jz      short loc_4670
.text:0000000000004648                 mov     rdx, 5555555555555553h
.text:0000000000004652                 cmp     rax, rdx
.text:0000000000004655                 ja      short loc_4681
.text:0000000000004657                 mov     rdx, rax
.text:000000000000465A                 shr     rdx, 1
.text:000000000000465D                 lea     rax, [rdx+rax+1]
.text:0000000000004662
.text:0000000000004662 loc_4662:                               ; CODE XREF: x2realloc+3F↓j
.text:0000000000004662                 mov     [rsi], rax
.text:0000000000004665                 mov     rsi, rax
.text:0000000000004668                 jmp     xrealloc
.text:0000000000004668 ; ---------------------------------------------------------------------------
.text:000000000000466D                 align 10h
.text:0000000000004670
.text:0000000000004670 loc_4670:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004670                 test    rax, rax
.text:0000000000004673                 mov     edx, 80h
.text:0000000000004678                 cmovz   rax, rdx
.text:000000000000467C                 test    rax, rax
.text:000000000000467F                 jns     short loc_4662
.text:0000000000004681
.text:0000000000004681 loc_4681:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004681                 sub     rsp, 8
.text:0000000000004685                 call    xalloc_die
.text:0000000000004685 ; } // starts at 4640
.text:0000000000004685 x2realloc       endp
.text:0000000000004685
.text:0000000000004685 ; ---------------------------------------------------------------------------
.text:000000000000468A                 align 10h
.text:0000000000004690
.text:0000000000004690 ; =============== S U B R O U T I N E =======================================
.text:0000000000004690
.text:0000000000004690
.text:0000000000004690 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004690                 public xzalloc
.text:0000000000004690 xzalloc         proc near
.text:0000000000004690 ; __unwind {
.text:0000000000004690                 push    rbx
.text:0000000000004691                 mov     rbx, rdi
.text:0000000000004694                 call    xmalloc
.text:0000000000004699                 mov     rdx, rbx        ; n
.text:000000000000469C                 xor     esi, esi        ; c
.text:000000000000469E                 mov     rdi, rax        ; s
.text:00000000000046A1                 pop     rbx
.text:00000000000046A2                 jmp     _memset
.text:00000000000046A2 ; } // starts at 4690
.text:00000000000046A2 xzalloc         endp
.text:00000000000046A2
.text:00000000000046A2 ; ---------------------------------------------------------------------------
.text:00000000000046A7                 align 10h
.text:00000000000046B0
.text:00000000000046B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046B0
.text:00000000000046B0 ; Attributes: info_from_lumina
.text:00000000000046B0
.text:00000000000046B0 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:00000000000046B0                 public xcalloc
.text:00000000000046B0 xcalloc         proc near
.text:00000000000046B0 ; __unwind {
.text:00000000000046B0                 mov     rax, rdi
.text:00000000000046B3                 sub     rsp, 8
.text:00000000000046B7                 mul     rsi
.text:00000000000046BA                 seto    dl
.text:00000000000046BD                 test    rax, rax
.text:00000000000046C0                 js      short loc_46D9
.text:00000000000046C2                 movzx   edx, dl
.text:00000000000046C5                 test    rdx, rdx
.text:00000000000046C8                 jnz     short loc_46D9
.text:00000000000046CA                 call    _calloc
.text:00000000000046CF                 test    rax, rax
.text:00000000000046D2                 jz      short loc_46D9
.text:00000000000046D4                 add     rsp, 8
.text:00000000000046D8                 retn
.text:00000000000046D9 ; ---------------------------------------------------------------------------
.text:00000000000046D9
.text:00000000000046D9 loc_46D9:                               ; CODE XREF: xcalloc+10↑j
.text:00000000000046D9                                         ; xcalloc+18↑j ...
.text:00000000000046D9                 call    xalloc_die
.text:00000000000046D9 ; } // starts at 46B0
.text:00000000000046D9 xcalloc         endp
.text:00000000000046D9
.text:00000000000046D9 ; ---------------------------------------------------------------------------
.text:00000000000046DE                 align 20h
.text:00000000000046E0
.text:00000000000046E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000046E0
.text:00000000000046E0 ; Attributes: info_from_lumina
.text:00000000000046E0
.text:00000000000046E0 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:00000000000046E0                 public xmemdup
.text:00000000000046E0 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:00000000000046E0                                         ; xstrdup+11↓j
.text:00000000000046E0 ; __unwind {
.text:00000000000046E0                 push    rbp
.text:00000000000046E1                 push    rbx
.text:00000000000046E2                 mov     rbp, rdi
.text:00000000000046E5                 mov     rdi, rsi
.text:00000000000046E8                 mov     rbx, rsi
.text:00000000000046EB                 sub     rsp, 8
.text:00000000000046EF                 call    xmalloc
.text:00000000000046F4                 add     rsp, 8
.text:00000000000046F8                 mov     rdx, rbx        ; n
.text:00000000000046FB                 mov     rsi, rbp        ; src
.text:00000000000046FE                 pop     rbx
.text:00000000000046FF                 pop     rbp
.text:0000000000004700                 mov     rdi, rax        ; dest
.text:0000000000004703                 jmp     _memcpy
.text:0000000000004703 ; } // starts at 46E0
.text:0000000000004703 xmemdup         endp
.text:0000000000004703
.text:0000000000004703 ; ---------------------------------------------------------------------------
.text:0000000000004708                 align 10h
.text:0000000000004710
.text:0000000000004710 ; =============== S U B R O U T I N E =======================================
.text:0000000000004710
.text:0000000000004710
.text:0000000000004710 ; __int64 __fastcall xstrdup(void *src)
.text:0000000000004710                 public xstrdup
.text:0000000000004710 xstrdup         proc near
.text:0000000000004710 ; __unwind {
.text:0000000000004710                 push    rbx
.text:0000000000004711                 mov     rbx, rdi
.text:0000000000004714                 call    _strlen
.text:0000000000004719                 mov     rdi, rbx        ; src
.text:000000000000471C                 lea     rsi, [rax+1]    ; n
.text:0000000000004720                 pop     rbx
.text:0000000000004721                 jmp     short xmemdup
.text:0000000000004721 ; } // starts at 4710
.text:0000000000004721 xstrdup         endp
.text:0000000000004721
.text:0000000000004721 ; ---------------------------------------------------------------------------
.text:0000000000004723                 align 10h
.text:0000000000004730
.text:0000000000004730 ; =============== S U B R O U T I N E =======================================
.text:0000000000004730
.text:0000000000004730 ; Attributes: noreturn info_from_lumina
.text:0000000000004730
.text:0000000000004730 ; void __cdecl xalloc_die()
.text:0000000000004730                 public xalloc_die
.text:0000000000004730 xalloc_die      proc near               ; CODE XREF: users:loc_1AAF↑p
.text:0000000000004730                                         ; quotearg_n_options:loc_3706↑p ...
.text:0000000000004730 ; __unwind {
.text:0000000000004730                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:0000000000004737                 sub     rsp, 8
.text:000000000000473B                 mov     edx, 5          ; category
.text:0000000000004740                 xor     edi, edi        ; domainname
.text:0000000000004742                 call    _dcgettext
.text:0000000000004747                 mov     edi, cs:exit_failure ; status
.text:000000000000474D                 lea     rdx, format+4   ; format
.text:0000000000004754                 mov     rcx, rax
.text:0000000000004757                 xor     esi, esi        ; errnum
.text:0000000000004759                 xor     eax, eax
.text:000000000000475B                 call    _error
.text:0000000000004760                 call    _abort
.text:0000000000004760 ; } // starts at 4730
.text:0000000000004760 xalloc_die      endp
.text:0000000000004760
.text:0000000000004760 ; ---------------------------------------------------------------------------
.text:0000000000004765                 align 10h
.text:0000000000004770
.text:0000000000004770 ; =============== S U B R O U T I N E =======================================
.text:0000000000004770
.text:0000000000004770 ; Attributes: info_from_lumina
.text:0000000000004770
.text:0000000000004770 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004770                 public rpl_mbrtowc
.text:0000000000004770 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004770
.text:0000000000004770 pwc             = dword ptr -34h
.text:0000000000004770 var_30          = qword ptr -30h
.text:0000000000004770
.text:0000000000004770 ; __unwind {
.text:0000000000004770                 push    r13
.text:0000000000004772                 push    r12
.text:0000000000004774                 mov     r13, rsi
.text:0000000000004777                 push    rbp
.text:0000000000004778                 push    rbx
.text:0000000000004779                 mov     rbx, rdi
.text:000000000000477C                 mov     r12, rdx
.text:000000000000477F                 sub     rsp, 18h
.text:0000000000004783                 mov     rax, fs:28h
.text:000000000000478C                 mov     [rsp+38h+var_30], rax
.text:0000000000004791                 xor     eax, eax
.text:0000000000004793                 lea     rax, [rsp+38h+pwc]
.text:0000000000004798                 test    rdi, rdi
.text:000000000000479B                 cmovz   rbx, rax
.text:000000000000479F                 mov     rdi, rbx        ; pwc
.text:00000000000047A2                 call    _mbrtowc
.text:00000000000047A7                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:00000000000047AB                 mov     rbp, rax
.text:00000000000047AE                 jbe     short loc_47D0
.text:00000000000047B0                 test    r12, r12
.text:00000000000047B3                 jz      short loc_47D0
.text:00000000000047B5                 xor     edi, edi
.text:00000000000047B7                 call    hard_locale
.text:00000000000047BC                 test    al, al
.text:00000000000047BE                 jnz     short loc_47D0
.text:00000000000047C0                 movzx   eax, byte ptr [r13+0]
.text:00000000000047C5                 mov     ebp, 1
.text:00000000000047CA                 mov     [rbx], eax
.text:00000000000047CC                 nop     dword ptr [rax+00h]
.text:00000000000047D0
.text:00000000000047D0 loc_47D0:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:00000000000047D0                                         ; rpl_mbrtowc+43↑j ...
.text:00000000000047D0                 mov     rdx, [rsp+38h+var_30]
.text:00000000000047D5                 xor     rdx, fs:28h
.text:00000000000047DE                 mov     rax, rbp
.text:00000000000047E1                 jnz     short loc_47EE
.text:00000000000047E3                 add     rsp, 18h
.text:00000000000047E7                 pop     rbx
.text:00000000000047E8                 pop     rbp
.text:00000000000047E9                 pop     r12
.text:00000000000047EB                 pop     r13
.text:00000000000047ED                 retn
.text:00000000000047EE ; ---------------------------------------------------------------------------
.text:00000000000047EE
.text:00000000000047EE loc_47EE:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:00000000000047EE                 call    ___stack_chk_fail
.text:00000000000047EE ; } // starts at 4770
.text:00000000000047EE rpl_mbrtowc     endp
.text:00000000000047EE
.text:00000000000047EE ; ---------------------------------------------------------------------------
.text:00000000000047F3                 align 20h
.text:0000000000004800
.text:0000000000004800 ; =============== S U B R O U T I N E =======================================
.text:0000000000004800
.text:0000000000004800
.text:0000000000004800                 public extract_trimmed_name
.text:0000000000004800 extract_trimmed_name proc near          ; CODE XREF: users+176↑p
.text:0000000000004800 ; __unwind {
.text:0000000000004800                 push    rbp
.text:0000000000004801                 push    rbx
.text:0000000000004802                 mov     rbp, rdi
.text:0000000000004805                 mov     edi, 21h ; '!'
.text:000000000000480A                 sub     rsp, 8
.text:000000000000480E                 call    xmalloc
.text:0000000000004813                 lea     rsi, [rbp+2Ch]  ; src
.text:0000000000004817                 mov     rbx, rax
.text:000000000000481A                 mov     edx, 20h ; ' '  ; n
.text:000000000000481F                 mov     rdi, rax        ; dest
.text:0000000000004822                 call    _strncpy
.text:0000000000004827                 mov     rdi, rbx        ; s
.text:000000000000482A                 mov     byte ptr [rbx+20h], 0
.text:000000000000482E                 call    _strlen
.text:0000000000004833                 add     rax, rbx
.text:0000000000004836                 cmp     rbx, rax
.text:0000000000004839                 jnb     short loc_4841
.text:000000000000483B
.text:000000000000483B loc_483B:                               ; CODE XREF: extract_trimmed_name+5A↓j
.text:000000000000483B                 cmp     byte ptr [rax-1], 20h ; ' '
.text:000000000000483F                 jz      short loc_4850
.text:0000000000004841
.text:0000000000004841 loc_4841:                               ; CODE XREF: extract_trimmed_name+39↑j
.text:0000000000004841                                         ; extract_trimmed_name+5C↓j
.text:0000000000004841                 add     rsp, 8
.text:0000000000004845                 mov     rax, rbx
.text:0000000000004848                 pop     rbx
.text:0000000000004849                 pop     rbp
.text:000000000000484A                 retn
.text:000000000000484A ; ---------------------------------------------------------------------------
.text:000000000000484B                 align 10h
.text:0000000000004850
.text:0000000000004850 loc_4850:                               ; CODE XREF: extract_trimmed_name+3F↑j
.text:0000000000004850                 sub     rax, 1
.text:0000000000004854                 mov     byte ptr [rax], 0
.text:0000000000004857                 cmp     rbx, rax
.text:000000000000485A                 jnz     short loc_483B
.text:000000000000485C                 jmp     short loc_4841
.text:000000000000485C ; } // starts at 4800
.text:000000000000485C extract_trimmed_name endp
.text:000000000000485C
.text:000000000000485C ; ---------------------------------------------------------------------------
.text:000000000000485E                 align 20h
.text:0000000000004860
.text:0000000000004860 ; =============== S U B R O U T I N E =======================================
.text:0000000000004860
.text:0000000000004860
.text:0000000000004860                 public read_utmp
.text:0000000000004860 read_utmp       proc near               ; CODE XREF: users+2D↑p
.text:0000000000004860
.text:0000000000004860 var_48          = qword ptr -48h
.text:0000000000004860 var_40          = qword ptr -40h
.text:0000000000004860
.text:0000000000004860 ; __unwind {
.text:0000000000004860                 push    r15
.text:0000000000004862                 push    r14
.text:0000000000004864                 xor     r14d, r14d
.text:0000000000004867                 push    r13
.text:0000000000004869                 mov     r13d, ecx
.text:000000000000486C                 push    r12
.text:000000000000486E                 push    rbp
.text:000000000000486F                 push    rbx
.text:0000000000004870                 mov     r12d, r13d
.text:0000000000004873                 xor     ebx, ebx
.text:0000000000004875                 xor     ebp, ebp
.text:0000000000004877                 and     r12d, 2
.text:000000000000487B                 sub     rsp, 18h
.text:000000000000487F                 and     r13d, 1
.text:0000000000004883                 mov     [rsp+48h+var_48], rsi
.text:0000000000004887                 mov     [rsp+48h+var_40], rdx
.text:000000000000488C                 call    _utmpxname
.text:0000000000004891                 call    _setutxent
.text:0000000000004896
.text:0000000000004896 loc_4896:                               ; CODE XREF: read_utmp+58↓j
.text:0000000000004896                                         ; read_utmp+10C↓j
.text:0000000000004896                 call    _getutxent
.text:000000000000489B                 test    rax, rax
.text:000000000000489E                 mov     r15, rax
.text:00000000000048A1                 jz      short loc_4911
.text:00000000000048A3
.text:00000000000048A3 loc_48A3:                               ; CODE XREF: read_utmp+AF↓j
.text:00000000000048A3                 cmp     word ptr [r15], 7
.text:00000000000048A8                 jnz     short loc_48B5
.text:00000000000048AA                 cmp     byte ptr [r15+2Ch], 0
.text:00000000000048AF                 jnz     loc_4940
.text:00000000000048B5
.text:00000000000048B5 loc_48B5:                               ; CODE XREF: read_utmp+48↑j
.text:00000000000048B5                 test    r12d, r12d
.text:00000000000048B8                 jnz     short loc_4896
.text:00000000000048BA
.text:00000000000048BA loc_48BA:                               ; CODE XREF: read_utmp+E6↓j
.text:00000000000048BA                                         ; read_utmp+EF↓j ...
.text:00000000000048BA                 cmp     rbp, rbx
.text:00000000000048BD                 jz      loc_4980
.text:00000000000048C3
.text:00000000000048C3 loc_48C3:                               ; CODE XREF: read_utmp+115↓j
.text:00000000000048C3                                         ; read_utmp+153↓j
.text:00000000000048C3                 lea     rax, [rbx+rbx*2]
.text:00000000000048C7                 mov     rdx, [r15]
.text:00000000000048CA                 mov     rsi, r15
.text:00000000000048CD                 add     rbx, 1
.text:00000000000048D1                 shl     rax, 7
.text:00000000000048D5                 add     rax, r14
.text:00000000000048D8                 mov     [rax], rdx
.text:00000000000048DB                 lea     rdi, [rax+8]
.text:00000000000048DF                 mov     rdx, [r15+178h]
.text:00000000000048E6                 and     rdi, 0FFFFFFFFFFFFFFF8h
.text:00000000000048EA                 mov     [rax+178h], rdx
.text:00000000000048F1                 sub     rax, rdi
.text:00000000000048F4                 sub     rsi, rax
.text:00000000000048F7                 add     eax, 180h
.text:00000000000048FC                 shr     eax, 3
.text:00000000000048FF                 mov     ecx, eax
.text:0000000000004901                 rep movsq
.text:0000000000004904                 call    _getutxent
.text:0000000000004909                 test    rax, rax
.text:000000000000490C                 mov     r15, rax
.text:000000000000490F                 jnz     short loc_48A3
.text:0000000000004911
.text:0000000000004911 loc_4911:                               ; CODE XREF: read_utmp+41↑j
.text:0000000000004911                 call    _endutxent
.text:0000000000004916                 mov     rax, [rsp+48h+var_48]
.text:000000000000491A                 mov     [rax], rbx
.text:000000000000491D                 mov     rax, [rsp+48h+var_40]
.text:0000000000004922                 mov     [rax], r14
.text:0000000000004925                 add     rsp, 18h
.text:0000000000004929                 xor     eax, eax
.text:000000000000492B                 pop     rbx
.text:000000000000492C                 pop     rbp
.text:000000000000492D                 pop     r12
.text:000000000000492F                 pop     r13
.text:0000000000004931                 pop     r14
.text:0000000000004933                 pop     r15
.text:0000000000004935                 retn
.text:0000000000004935 ; ---------------------------------------------------------------------------
.text:0000000000004936                 align 20h
.text:0000000000004940
.text:0000000000004940 loc_4940:                               ; CODE XREF: read_utmp+4F↑j
.text:0000000000004940                 mov     edi, [r15+4]    ; pid
.text:0000000000004944                 test    edi, edi
.text:0000000000004946                 jle     loc_48BA
.text:000000000000494C                 test    r13b, r13b
.text:000000000000494F                 jz      loc_48BA
.text:0000000000004955                 xor     esi, esi        ; sig
.text:0000000000004957                 call    _kill
.text:000000000000495C                 test    eax, eax
.text:000000000000495E                 jns     loc_48BA
.text:0000000000004964                 call    ___errno_location
.text:0000000000004969                 cmp     dword ptr [rax], 3
.text:000000000000496C                 jz      loc_4896
.text:0000000000004972                 cmp     rbp, rbx
.text:0000000000004975                 jnz     loc_48C3
.text:000000000000497B                 nop     dword ptr [rax+rax+00h]
.text:0000000000004980
.text:0000000000004980 loc_4980:                               ; CODE XREF: read_utmp+5D↑j
.text:0000000000004980                 test    r14, r14
.text:0000000000004983                 jz      short loc_49B8
.text:0000000000004985                 mov     rax, 38E38E38E38E37h
.text:000000000000498F                 cmp     rbp, rax
.text:0000000000004992                 ja      short loc_49DD
.text:0000000000004994                 mov     rax, rbp
.text:0000000000004997                 shr     rax, 1
.text:000000000000499A                 lea     rbp, [rbp+rax+1]
.text:000000000000499F
.text:000000000000499F loc_499F:                               ; CODE XREF: read_utmp+17B↓j
.text:000000000000499F                 lea     rsi, [rbp+rbp*2+0]
.text:00000000000049A4                 mov     rdi, r14
.text:00000000000049A7                 shl     rsi, 7
.text:00000000000049AB                 call    xrealloc
.text:00000000000049B0                 mov     r14, rax
.text:00000000000049B3                 jmp     loc_48C3
.text:00000000000049B8 ; ---------------------------------------------------------------------------
.text:00000000000049B8
.text:00000000000049B8 loc_49B8:                               ; CODE XREF: read_utmp+123↑j
.text:00000000000049B8                 test    rbp, rbp
.text:00000000000049BB                 mov     eax, 1
.text:00000000000049C0                 mov     edx, 180h
.text:00000000000049C5                 cmovz   rbp, rax
.text:00000000000049C9                 mov     rax, rdx
.text:00000000000049CC                 xor     esi, esi
.text:00000000000049CE                 mul     rbp
.text:00000000000049D1                 jo      short loc_49E2
.text:00000000000049D3
.text:00000000000049D3 loc_49D3:                               ; CODE XREF: read_utmp+187↓j
.text:00000000000049D3                 test    rax, rax
.text:00000000000049D6                 js      short loc_49DD
.text:00000000000049D8                 test    rsi, rsi
.text:00000000000049DB                 jz      short loc_499F
.text:00000000000049DD
.text:00000000000049DD loc_49DD:                               ; CODE XREF: read_utmp+132↑j
.text:00000000000049DD                                         ; read_utmp+176↑j
.text:00000000000049DD                 call    xalloc_die
.text:00000000000049E2 ; ---------------------------------------------------------------------------
.text:00000000000049E2
.text:00000000000049E2 loc_49E2:                               ; CODE XREF: read_utmp+171↑j
.text:00000000000049E2                 mov     esi, 1
.text:00000000000049E7                 jmp     short loc_49D3
.text:00000000000049E7 ; } // starts at 4860
.text:00000000000049E7 read_utmp       endp
.text:00000000000049E7
.text:00000000000049E7 ; ---------------------------------------------------------------------------
.text:00000000000049E9                 align 10h
.text:00000000000049F0
.text:00000000000049F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000049F0
.text:00000000000049F0 ; Attributes: info_from_lumina
.text:00000000000049F0
.text:00000000000049F0 ; int __fastcall close_stream(FILE *stream)
.text:00000000000049F0                 public close_stream
.text:00000000000049F0 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:00000000000049F0                                         ; close_stdout+33↑p
.text:00000000000049F0 ; __unwind {
.text:00000000000049F0                 push    r12
.text:00000000000049F2                 push    rbp
.text:00000000000049F3                 mov     rbp, rdi
.text:00000000000049F6                 push    rbx
.text:00000000000049F7                 call    ___fpending
.text:00000000000049FC                 mov     ebx, [rbp+0]
.text:00000000000049FF                 mov     rdi, rbp        ; stream
.text:0000000000004A02                 mov     r12, rax
.text:0000000000004A05                 call    rpl_fclose
.text:0000000000004A0A                 and     ebx, 20h
.text:0000000000004A0D                 test    ebx, ebx
.text:0000000000004A0F                 jnz     short loc_4A28
.text:0000000000004A11                 test    eax, eax
.text:0000000000004A13                 jz      short loc_4A1F
.text:0000000000004A15                 test    r12, r12
.text:0000000000004A18                 mov     eax, 0FFFFFFFFh
.text:0000000000004A1D                 jz      short loc_4A58
.text:0000000000004A1F
.text:0000000000004A1F loc_4A1F:                               ; CODE XREF: close_stream+23↑j
.text:0000000000004A1F                 pop     rbx
.text:0000000000004A20                 pop     rbp
.text:0000000000004A21                 pop     r12
.text:0000000000004A23                 retn
.text:0000000000004A23 ; ---------------------------------------------------------------------------
.text:0000000000004A24                 align 8
.text:0000000000004A28
.text:0000000000004A28 loc_4A28:                               ; CODE XREF: close_stream+1F↑j
.text:0000000000004A28                 test    eax, eax
.text:0000000000004A2A                 jnz     short loc_4A48
.text:0000000000004A2C                 call    ___errno_location
.text:0000000000004A31                 mov     dword ptr [rax], 0
.text:0000000000004A37                 mov     eax, 0FFFFFFFFh
.text:0000000000004A3C                 pop     rbx
.text:0000000000004A3D                 pop     rbp
.text:0000000000004A3E                 pop     r12
.text:0000000000004A40                 retn
.text:0000000000004A40 ; ---------------------------------------------------------------------------
.text:0000000000004A41                 align 8
.text:0000000000004A48
.text:0000000000004A48 loc_4A48:                               ; CODE XREF: close_stream+3A↑j
.text:0000000000004A48                 pop     rbx
.text:0000000000004A49                 mov     eax, 0FFFFFFFFh
.text:0000000000004A4E                 pop     rbp
.text:0000000000004A4F                 pop     r12
.text:0000000000004A51                 retn
.text:0000000000004A51 ; ---------------------------------------------------------------------------
.text:0000000000004A52                 align 8
.text:0000000000004A58
.text:0000000000004A58 loc_4A58:                               ; CODE XREF: close_stream+2D↑j
.text:0000000000004A58                 call    ___errno_location
.text:0000000000004A5D                 cmp     dword ptr [rax], 9
.text:0000000000004A60                 pop     rbx
.text:0000000000004A61                 pop     rbp
.text:0000000000004A62                 pop     r12
.text:0000000000004A64                 setnz   al
.text:0000000000004A67                 movzx   eax, al
.text:0000000000004A6A                 neg     eax
.text:0000000000004A6C                 retn
.text:0000000000004A6C ; } // starts at 49F0
.text:0000000000004A6C close_stream    endp
.text:0000000000004A6C
.text:0000000000004A6C ; ---------------------------------------------------------------------------
.text:0000000000004A6D                 align 10h
.text:0000000000004A70
.text:0000000000004A70 ; =============== S U B R O U T I N E =======================================
.text:0000000000004A70
.text:0000000000004A70
.text:0000000000004A70                 public hard_locale
.text:0000000000004A70 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004A70 ; __unwind {
.text:0000000000004A70                 sub     rsp, 8
.text:0000000000004A74                 xor     esi, esi        ; locale
.text:0000000000004A76                 call    _setlocale
.text:0000000000004A7B                 mov     rdx, rax
.text:0000000000004A7E                 mov     eax, 1
.text:0000000000004A83                 test    rdx, rdx
.text:0000000000004A86                 jz      short loc_4AA5
.text:0000000000004A88                 lea     rdi, aC         ; "C"
.text:0000000000004A8F                 mov     ecx, 2
.text:0000000000004A94                 mov     rsi, rdx
.text:0000000000004A97                 repe cmpsb
.text:0000000000004A99                 setnbe  cl
.text:0000000000004A9C                 sbb     cl, 0
.text:0000000000004A9F                 xor     eax, eax
.text:0000000000004AA1                 test    cl, cl
.text:0000000000004AA3                 jnz     short loc_4AB0
.text:0000000000004AA5
.text:0000000000004AA5 loc_4AA5:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004AA5                 add     rsp, 8
.text:0000000000004AA9                 retn
.text:0000000000004AA9 ; ---------------------------------------------------------------------------
.text:0000000000004AAA                 align 10h
.text:0000000000004AB0
.text:0000000000004AB0 loc_4AB0:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004AB0                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004AB7                 mov     ecx, 6
.text:0000000000004ABC                 mov     rsi, rdx
.text:0000000000004ABF                 repe cmpsb
.text:0000000000004AC1                 setnbe  al
.text:0000000000004AC4                 sbb     al, 0
.text:0000000000004AC6                 test    al, al
.text:0000000000004AC8                 setnz   al
.text:0000000000004ACB                 add     rsp, 8
.text:0000000000004ACF                 retn
.text:0000000000004ACF ; } // starts at 4A70
.text:0000000000004ACF hard_locale     endp
.text:0000000000004ACF
.text:0000000000004AD0
.text:0000000000004AD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004AD0
.text:0000000000004AD0
.text:0000000000004AD0                 public locale_charset
.text:0000000000004AD0 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004AD0 ; __unwind {
.text:0000000000004AD0                 sub     rsp, 8
.text:0000000000004AD4                 mov     edi, 0Eh        ; item
.text:0000000000004AD9                 call    _nl_langinfo
.text:0000000000004ADE                 test    rax, rax
.text:0000000000004AE1                 jz      short loc_4B00
.text:0000000000004AE3                 cmp     byte ptr [rax], 0
.text:0000000000004AE6                 lea     rdx, aAscii     ; "ASCII"
.text:0000000000004AED                 cmovz   rax, rdx
.text:0000000000004AF1                 add     rsp, 8
.text:0000000000004AF5                 retn
.text:0000000000004AF5 ; ---------------------------------------------------------------------------
.text:0000000000004AF6                 align 20h
.text:0000000000004B00
.text:0000000000004B00 loc_4B00:                               ; CODE XREF: locale_charset+11↑j
.text:0000000000004B00                 lea     rax, aAscii     ; "ASCII"
.text:0000000000004B07                 add     rsp, 8
.text:0000000000004B0B                 retn
.text:0000000000004B0B ; } // starts at 4AD0
.text:0000000000004B0B locale_charset  endp
.text:0000000000004B0B
.text:0000000000004B0B ; ---------------------------------------------------------------------------
.text:0000000000004B0C                 align 10h
.text:0000000000004B10
.text:0000000000004B10 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B10
.text:0000000000004B10 ; Attributes: info_from_lumina
.text:0000000000004B10
.text:0000000000004B10 ; int __fastcall rpl_fclose(FILE *fp)
.text:0000000000004B10                 public rpl_fclose
.text:0000000000004B10 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:0000000000004B10 ; __unwind {
.text:0000000000004B10                 push    r12
.text:0000000000004B12                 push    rbp
.text:0000000000004B13                 push    rbx
.text:0000000000004B14                 mov     rbx, rdi
.text:0000000000004B17                 call    _fileno
.text:0000000000004B1C                 test    eax, eax
.text:0000000000004B1E                 mov     rdi, rbx        ; fp
.text:0000000000004B21                 js      short loc_4B77
.text:0000000000004B23                 call    ___freading
.text:0000000000004B28                 test    eax, eax
.text:0000000000004B2A                 jnz     short loc_4B58
.text:0000000000004B2C
.text:0000000000004B2C loc_4B2C:                               ; CODE XREF: rpl_fclose+62↓j
.text:0000000000004B2C                 mov     rdi, rbx        ; stream
.text:0000000000004B2F                 call    rpl_fflush
.text:0000000000004B34                 test    eax, eax
.text:0000000000004B36                 jz      short loc_4B74
.text:0000000000004B38                 call    ___errno_location
.text:0000000000004B3D                 mov     r12d, [rax]
.text:0000000000004B40                 mov     rdi, rbx        ; stream
.text:0000000000004B43                 mov     rbp, rax
.text:0000000000004B46                 call    _fclose
.text:0000000000004B4B                 test    r12d, r12d
.text:0000000000004B4E                 jnz     short loc_4B80
.text:0000000000004B50
.text:0000000000004B50 loc_4B50:                               ; CODE XREF: rpl_fclose+79↓j
.text:0000000000004B50                 pop     rbx
.text:0000000000004B51                 pop     rbp
.text:0000000000004B52                 pop     r12
.text:0000000000004B54                 retn
.text:0000000000004B54 ; ---------------------------------------------------------------------------
.text:0000000000004B55                 align 8
.text:0000000000004B58
.text:0000000000004B58 loc_4B58:                               ; CODE XREF: rpl_fclose+1A↑j
.text:0000000000004B58                 mov     rdi, rbx        ; stream
.text:0000000000004B5B                 call    _fileno
.text:0000000000004B60                 xor     esi, esi        ; offset
.text:0000000000004B62                 mov     edx, 1          ; whence
.text:0000000000004B67                 mov     edi, eax        ; fd
.text:0000000000004B69                 call    _lseek
.text:0000000000004B6E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004B72                 jnz     short loc_4B2C
.text:0000000000004B74
.text:0000000000004B74 loc_4B74:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004B74                 mov     rdi, rbx        ; stream
.text:0000000000004B77
.text:0000000000004B77 loc_4B77:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004B77                 pop     rbx
.text:0000000000004B78                 pop     rbp
.text:0000000000004B79                 pop     r12
.text:0000000000004B7B                 jmp     _fclose
.text:0000000000004B80 ; ---------------------------------------------------------------------------
.text:0000000000004B80
.text:0000000000004B80 loc_4B80:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004B80                 mov     [rbp+0], r12d
.text:0000000000004B84                 mov     eax, 0FFFFFFFFh
.text:0000000000004B89                 jmp     short loc_4B50
.text:0000000000004B89 ; } // starts at 4B10
.text:0000000000004B89 rpl_fclose      endp
.text:0000000000004B89
.text:0000000000004B89 ; ---------------------------------------------------------------------------
.text:0000000000004B8B                 align 10h
.text:0000000000004B90
.text:0000000000004B90 ; =============== S U B R O U T I N E =======================================
.text:0000000000004B90
.text:0000000000004B90 ; Attributes: info_from_lumina
.text:0000000000004B90
.text:0000000000004B90 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004B90                 public rpl_fflush
.text:0000000000004B90 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004B90 ; __unwind {
.text:0000000000004B90                 test    rdi, rdi
.text:0000000000004B93                 push    rbx
.text:0000000000004B94                 mov     rbx, rdi
.text:0000000000004B97                 jz      short loc_4BAA
.text:0000000000004B99                 call    ___freading
.text:0000000000004B9E                 test    eax, eax
.text:0000000000004BA0                 jz      short loc_4BAA
.text:0000000000004BA2                 test    dword ptr [rbx], 100h
.text:0000000000004BA8                 jnz     short loc_4BB8
.text:0000000000004BAA
.text:0000000000004BAA loc_4BAA:                               ; CODE XREF: rpl_fflush+7↑j
.text:0000000000004BAA                                         ; rpl_fflush+10↑j
.text:0000000000004BAA                 mov     rdi, rbx        ; stream
.text:0000000000004BAD                 pop     rbx
.text:0000000000004BAE                 jmp     _fflush
.text:0000000000004BAE ; ---------------------------------------------------------------------------
.text:0000000000004BB3                 align 8
.text:0000000000004BB8
.text:0000000000004BB8 loc_4BB8:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004BB8                 mov     rdi, rbx
.text:0000000000004BBB                 mov     edx, 1
.text:0000000000004BC0                 xor     esi, esi
.text:0000000000004BC2                 call    rpl_fseeko
.text:0000000000004BC7                 mov     rdi, rbx        ; stream
.text:0000000000004BCA                 pop     rbx
.text:0000000000004BCB                 jmp     _fflush
.text:0000000000004BCB ; } // starts at 4B90
.text:0000000000004BCB rpl_fflush      endp
.text:0000000000004BCB
.text:0000000000004BD0
.text:0000000000004BD0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004BD0
.text:0000000000004BD0 ; Attributes: info_from_lumina
.text:0000000000004BD0
.text:0000000000004BD0 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004BD0                 public rpl_fseeko
.text:0000000000004BD0 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004BD0 ; __unwind {
.text:0000000000004BD0                 mov     rax, [rdi+8]
.text:0000000000004BD4                 cmp     [rdi+10h], rax
.text:0000000000004BD8                 jz      short loc_4BE0
.text:0000000000004BDA
.text:0000000000004BDA loc_4BDA:                               ; CODE XREF: rpl_fseeko+18↓j
.text:0000000000004BDA                                         ; rpl_fseeko+1F↓j
.text:0000000000004BDA                 jmp     _fseeko
.text:0000000000004BDA ; ---------------------------------------------------------------------------
.text:0000000000004BDF                 align 20h
.text:0000000000004BE0
.text:0000000000004BE0 loc_4BE0:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004BE0                 mov     rax, [rdi+20h]
.text:0000000000004BE4                 cmp     [rdi+28h], rax
.text:0000000000004BE8                 jnz     short loc_4BDA
.text:0000000000004BEA                 cmp     qword ptr [rdi+48h], 0
.text:0000000000004BEF                 jnz     short loc_4BDA
.text:0000000000004BF1                 push    r12
.text:0000000000004BF3                 push    rbp
.text:0000000000004BF4                 mov     r12d, edx
.text:0000000000004BF7                 push    rbx
.text:0000000000004BF8                 mov     rbp, rsi
.text:0000000000004BFB                 mov     rbx, rdi
.text:0000000000004BFE                 call    _fileno
.text:0000000000004C03                 mov     edx, r12d       ; whence
.text:0000000000004C06                 mov     rsi, rbp        ; offset
.text:0000000000004C09                 mov     edi, eax        ; fd
.text:0000000000004C0B                 call    _lseek
.text:0000000000004C10                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004C14                 jz      short loc_4C22
.text:0000000000004C16                 and     dword ptr [rbx], 0FFFFFFEFh
.text:0000000000004C19                 mov     [rbx+90h], rax
.text:0000000000004C20                 xor     eax, eax
.text:0000000000004C22
.text:0000000000004C22 loc_4C22:                               ; CODE XREF: rpl_fseeko+44↑j
.text:0000000000004C22                 pop     rbx
.text:0000000000004C23                 pop     rbp
.text:0000000000004C24                 pop     r12
.text:0000000000004C26                 retn
.text:0000000000004C26 ; } // starts at 4BD0
.text:0000000000004C26 rpl_fseeko      endp
.text:0000000000004C26
.text:0000000000004C26 ; ---------------------------------------------------------------------------
.text:0000000000004C27                 align 10h
.text:0000000000004C30
.text:0000000000004C30 ; =============== S U B R O U T I N E =======================================
.text:0000000000004C30
.text:0000000000004C30 ; Attributes: info_from_lumina
.text:0000000000004C30
.text:0000000000004C30 ; void _libc_csu_init(void)
.text:0000000000004C30                 public __libc_csu_init
.text:0000000000004C30 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:0000000000004C30 ; __unwind {
.text:0000000000004C30                 push    r15
.text:0000000000004C32                 push    r14
.text:0000000000004C34                 mov     r15, rdx
.text:0000000000004C37                 push    r13
.text:0000000000004C39                 push    r12
.text:0000000000004C3B                 lea     r12, __frame_dummy_init_array_entry
.text:0000000000004C42                 push    rbp
.text:0000000000004C43                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:0000000000004C4A                 push    rbx
.text:0000000000004C4B                 mov     r13d, edi
.text:0000000000004C4E                 mov     r14, rsi
.text:0000000000004C51                 sub     rbp, r12
.text:0000000000004C54                 sub     rsp, 8
.text:0000000000004C58                 sar     rbp, 3
.text:0000000000004C5C                 call    _init_proc
.text:0000000000004C61                 test    rbp, rbp
.text:0000000000004C64                 jz      short loc_4C86
.text:0000000000004C66                 xor     ebx, ebx
.text:0000000000004C68                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004C70
.text:0000000000004C70 loc_4C70:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004C70                 mov     rdx, r15
.text:0000000000004C73                 mov     rsi, r14
.text:0000000000004C76                 mov     edi, r13d
.text:0000000000004C79                 call    ds:(__frame_dummy_init_array_entry - 206B70h)[r12+rbx*8]
.text:0000000000004C7D                 add     rbx, 1
.text:0000000000004C81                 cmp     rbp, rbx
.text:0000000000004C84                 jnz     short loc_4C70
.text:0000000000004C86
.text:0000000000004C86 loc_4C86:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004C86                 add     rsp, 8
.text:0000000000004C8A                 pop     rbx
.text:0000000000004C8B                 pop     rbp
.text:0000000000004C8C                 pop     r12
.text:0000000000004C8E                 pop     r13
.text:0000000000004C90                 pop     r14
.text:0000000000004C92                 pop     r15
.text:0000000000004C94                 retn
.text:0000000000004C94 ; } // starts at 4C30
.text:0000000000004C94 __libc_csu_init endp
.text:0000000000004C94
.text:0000000000004C94 ; ---------------------------------------------------------------------------
.text:0000000000004C95                 align 20h
.text:0000000000004CA0
.text:0000000000004CA0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CA0
.text:0000000000004CA0
.text:0000000000004CA0 ; void _libc_csu_fini(void)
.text:0000000000004CA0                 public __libc_csu_fini
.text:0000000000004CA0 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004CA0 ; __unwind {
.text:0000000000004CA0                 rep retn
.text:0000000000004CA0 ; } // starts at 4CA0
.text:0000000000004CA0 __libc_csu_fini endp
.text:0000000000004CA0
.text:0000000000004CA0 ; ---------------------------------------------------------------------------
.text:0000000000004CA2                 align 10h
.text:0000000000004CB0
.text:0000000000004CB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000004CB0
.text:0000000000004CB0
.text:0000000000004CB0 atexit          proc near               ; CODE XREF: main+4A↑p
.text:0000000000004CB0 ; __unwind {
.text:0000000000004CB0                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004CB7                 xor     esi, esi        ; obj
.text:0000000000004CB9                 jmp     ___cxa_atexit
.text:0000000000004CB9 ; } // starts at 4CB0
.text:0000000000004CB9 atexit          endp
.text:0000000000004CB9
.text:0000000000004CB9 _text           ends
.text:0000000000004CB9
LOAD:0000000000004CBE ; ===========================================================================
LOAD:0000000000004CBE
LOAD:0000000000004CBE ; Segment type: Pure code
LOAD:0000000000004CBE ; Segment permissions: Read/Execute
LOAD:0000000000004CBE LOAD            segment byte public 'CODE' use64
LOAD:0000000000004CBE                 assume cs:LOAD
LOAD:0000000000004CBE                 ;org 4CBEh
LOAD:0000000000004CBE                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004CBE                 align 20h
LOAD:0000000000004CBE LOAD            ends
LOAD:0000000000004CBE
.fini:0000000000004CC0 ; ===========================================================================
.fini:0000000000004CC0
.fini:0000000000004CC0 ; Segment type: Pure code
.fini:0000000000004CC0 ; Segment permissions: Read/Execute
.fini:0000000000004CC0 _fini           segment dword public 'CODE' use64
.fini:0000000000004CC0                 assume cs:_fini
.fini:0000000000004CC0                 ;org 4CC0h
.fini:0000000000004CC0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004CC0
.fini:0000000000004CC0 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004CC0
.fini:0000000000004CC0
.fini:0000000000004CC0                 public _term_proc
.fini:0000000000004CC0 _term_proc      proc near
.fini:0000000000004CC0                 sub     rsp, 8          ; _fini
.fini:0000000000004CC4                 add     rsp, 8
.fini:0000000000004CC8                 retn
.fini:0000000000004CC8 _term_proc      endp
.fini:0000000000004CC8
.fini:0000000000004CC8 _fini           ends
.fini:0000000000004CC8
LOAD:0000000000004CC9 ; ===========================================================================
LOAD:0000000000004CC9
LOAD:0000000000004CC9 ; Segment type: Pure code
LOAD:0000000000004CC9 ; Segment permissions: Read/Execute
LOAD:0000000000004CC9 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004CC9                 assume cs:LOAD
LOAD:0000000000004CC9                 ;org 4CC9h
LOAD:0000000000004CC9                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004CC9                 align 20h
LOAD:0000000000004CC9 LOAD            ends
LOAD:0000000000004CC9
.rodata:0000000000004CE0 ; ===========================================================================
.rodata:0000000000004CE0
.rodata:0000000000004CE0 ; Segment type: Pure data
.rodata:0000000000004CE0 ; Segment permissions: Read
.rodata:0000000000004CE0 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004CE0                 assume cs:_rodata
.rodata:0000000000004CE0                 ;org 4CE0h
.rodata:0000000000004CE0                 public _IO_stdin_used
.rodata:0000000000004CE0 _IO_stdin_used  db    1
.rodata:0000000000004CE1                 db    0
.rodata:0000000000004CE2                 db    2
.rodata:0000000000004CE3                 db    0
.rodata:0000000000004CE4 aUsers          db 'users',0            ; DATA XREF: main+66↑o
.rodata:0000000000004CE4                                         ; usage+111↑o ...
.rodata:0000000000004CEA ; const char aUsageSOptionFi[]
.rodata:0000000000004CEA aUsageSOptionFi db 'Usage: %s [OPTION]... [FILE]',0Ah,0
.rodata:0000000000004CEA                                         ; DATA XREF: usage:loc_1B4D↑o
.rodata:0000000000004D08 aVarLogWtmp     db '/var/log/wtmp',0    ; DATA XREF: usage+90↑o
.rodata:0000000000004D16 aVarRunUtmp     db '/var/run/utmp',0    ; DATA XREF: main:loc_1789↑o
.rodata:0000000000004D16                                         ; usage+97↑o
.rodata:0000000000004D24 asc_4D24        db '[',0                ; DATA XREF: usage+FE↑o
.rodata:0000000000004D26 aTestInvocation db 'test invocation',0  ; DATA XREF: usage+12E↑o
.rodata:0000000000004D36 aMultiCallInvoc db 'Multi-call invocation',0
.rodata:0000000000004D36                                         ; DATA XREF: usage+15A↑o
.rodata:0000000000004D36                                         ; usage+24C↑o ...
.rodata:0000000000004D4C aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+166↑o
.rodata:0000000000004D56 aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+172↑o
.rodata:0000000000004D65 aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+105↑o
.rodata:0000000000004D6F aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+F2↑o
.rodata:0000000000004D79 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+13A↑o
.rodata:0000000000004D83 ; const char aSOnlineHelpS[]
.rodata:0000000000004D83 aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1BA↑o
.rodata:0000000000004D83                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004D9A unk_4D9A        db  47h ; G             ; DATA XREF: main+5F↑o
.rodata:0000000000004D9A                                         ; usage+1D6↑o ...
.rodata:0000000000004D9B                 db  4Eh ; N
.rodata:0000000000004D9C                 db  55h ; U
.rodata:0000000000004D9D                 db  20h
.rodata:0000000000004D9E ; const char domainname[]
.rodata:0000000000004D9E domainname      db 'coreutils',0        ; DATA XREF: main+2B↑o
.rodata:0000000000004D9E                                         ; main+37↑o ...
.rodata:0000000000004DA8 ; const char s2[]
.rodata:0000000000004DA8 s2              db 'en_',0              ; DATA XREF: usage+1FD↑o
.rodata:0000000000004DA8                                         ; usage+2BE↑o
.rodata:0000000000004DAC ; const char aFullDocumentat[]
.rodata:0000000000004DAC aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004DAC                                         ; DATA XREF: usage:loc_1D09↑o
.rodata:0000000000004DAC                                         ; usage:loc_1DC6↑o
.rodata:0000000000004DC7 ; const char dirname[]
.rodata:0000000000004DC7 dirname         db '/usr/local/share/locale',0
.rodata:0000000000004DC7                                         ; DATA XREF: main+24↑o
.rodata:0000000000004DDF aDavidMackenzie db 'David MacKenzie',0  ; DATA XREF: main+4F↑o
.rodata:0000000000004DEF aJosephArceneau db 'Joseph Arceneaux',0 ; DATA XREF: main+70↑o
.rodata:0000000000004E00 ; const char msgid[]
.rodata:0000000000004E00 msgid           db 'extra operand %s',0 ; DATA XREF: main+D6↑o
.rodata:0000000000004E11                 align 8
.rodata:0000000000004E18 ; const char aTrySHelpForMor[]
.rodata:0000000000004E18 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004E18                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004E3F                 align 20h
.rodata:0000000000004E40 ; const char aOutputWhoIsCur[]
.rodata:0000000000004E40 aOutputWhoIsCur db 'Output who is currently logged in according to FILE.',0Ah
.rodata:0000000000004E40                                         ; DATA XREF: usage+7D↑o
.rodata:0000000000004E40                 db 'If FILE is not specified, use %s.  %s as FILE is common.',0Ah
.rodata:0000000000004E40                 db 0Ah,0
.rodata:0000000000004EB0 ; const char aHelpDisplayThi[]
.rodata:0000000000004EB0 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004EB0                                         ; DATA XREF: usage+B4↑o
.rodata:0000000000004EDD                 align 20h
.rodata:0000000000004EE0 ; const char aVersionOutputV[]
.rodata:0000000000004EE0 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004EE0                                         ; DATA XREF: usage+D9↑o
.rodata:0000000000004F16                 align 8
.rodata:0000000000004F18 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004F18                                         ; DATA XREF: usage+1CF↑o
.rodata:0000000000004F18                                         ; usage+233↑o ...
.rodata:0000000000004F40 ; const char aReportAnyTrans[]
.rodata:0000000000004F40 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004F40                                         ; DATA XREF: usage+327↑o
.rodata:0000000000004F40                 db 'am/>',0Ah,0
.rodata:0000000000004F87                 align 8
.rodata:0000000000004F88 ; const char aOrAvailableLoc[]
.rodata:0000000000004F88 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004F88                                         ; DATA XREF: usage:loc_1D4E↑o
.rodata:0000000000004FBB a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004FC0 ; const char aWriteError[]
.rodata:0000000000004FC0 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1EA3↑o
.rodata:0000000000004FCC ; const char format[]
.rodata:0000000000004FCC format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004FCC                                         ; users+1D7↑o ...
.rodata:0000000000004FD3 ; const char shortopts[]
.rodata:0000000000004FD3 shortopts       db '+',0                ; DATA XREF: parse_long_options+B7↑o
.rodata:0000000000004FD3                                         ; parse_gnu_standard_options_only+72↑o
.rodata:0000000000004FD5 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:0000000000004FDA aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:0000000000004FE2                 align 8
.rodata:0000000000004FE8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004FE8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000005020 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000005028 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:000000000000502C unk_502C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:000000000000502D                 db  80h
.rodata:000000000000502E                 db  98h
.rodata:000000000000502F                 db    0
.rodata:0000000000005030 unk_5030        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000005031                 db  80h
.rodata:0000000000005032                 db  99h
.rodata:0000000000005033                 db    0
.rodata:0000000000005034 unk_5034        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000005035                 db    7
.rodata:0000000000005036                 db  65h ; e
.rodata:0000000000005037                 db    0
.rodata:0000000000005038 unk_5038        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000005039                 db 0AFh
.rodata:000000000000503A                 db    0
.rodata:000000000000503B unk_503B        db  22h ; "             ; DATA XREF: gettext_quote:loc_2250↑o
.rodata:000000000000503B                                         ; quotearg_buffer_restyled:loc_300B↑o ...
.rodata:000000000000503C                 db    0
.rodata:000000000000503D ; const char asc_503D[2]
.rodata:000000000000503D asc_503D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:000000000000503D                                         ; quotearg_buffer_restyled:loc_23D3↑o ...
.rodata:000000000000503F ; const char asc_503F[2]
.rodata:000000000000503F asc_503F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:000000000000503F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000005041 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000005049 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206BE8↓o
.rodata:000000000000504F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206BF0↓o
.rodata:000000000000505C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206BF8↓o
.rodata:000000000000505C                                         ; .data.rel.ro:0000000000206C18↓o
.rodata:0000000000005069 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000005069                                         ; DATA XREF: .data.rel.ro:0000000000206C00↓o
.rodata:000000000000507D aC_1            db 'c',0                ; DATA XREF: .data.rel.ro:0000000000206C08↓o
.rodata:000000000000507F aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C10↓o
.rodata:0000000000005087 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C28↓o
.rodata:000000000000508F                 align 20h
.rodata:00000000000050A0 jpt_23B1        dd offset loc_315A - 50A0h
.rodata:00000000000050A0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:00000000000050A0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:00000000000050A0                 dd offset loc_23B3 - 50A0h ; jump table for switch statement
.rodata:00000000000050A0                 dd offset loc_3388 - 50A0h
.rodata:00000000000050A0                 dd offset loc_3194 - 50A0h
.rodata:00000000000050A0                 dd offset loc_2F84 - 50A0h
.rodata:00000000000050A0                 dd offset loc_2FE0 - 50A0h
.rodata:00000000000050A0                 dd offset loc_3035 - 50A0h
.rodata:00000000000050A0                 dd offset loc_307A - 50A0h
.rodata:00000000000050A0                 dd offset loc_30B4 - 50A0h
.rodata:00000000000050A0                 dd offset loc_30B4 - 50A0h
.rodata:00000000000050A0                 dd offset loc_30B4 - 50A0h
.rodata:00000000000050CC jpt_250E        dd offset loc_2730 - 50CCh, offset def_250E - 50CCh, offset def_250E - 50CCh
.rodata:00000000000050CC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:00000000000050CC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset def_250E - 50CCh, offset def_250E - 50CCh ; jump table for switch statement
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset loc_2770 - 50CCh, offset loc_2678 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2638 - 50CCh, offset loc_2800 - 50CCh, offset loc_27F0 - 50CCh
.rodata:00000000000050CC                 dd offset loc_27E0 - 50CCh, offset loc_27D0 - 50CCh, offset def_250E - 50CCh
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset def_250E - 50CCh, offset def_250E - 50CCh
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset def_250E - 50CCh, offset def_250E - 50CCh
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset def_250E - 50CCh, offset def_250E - 50CCh
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset def_250E - 50CCh, offset def_250E - 50CCh
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset def_250E - 50CCh, offset def_250E - 50CCh
.rodata:00000000000050CC                 dd offset def_250E - 50CCh, offset def_250E - 50CCh, offset loc_27C0 - 50CCh
.rodata:00000000000050CC                 dd offset loc_27B0 - 50CCh, offset loc_27B0 - 50CCh, offset loc_2780 - 50CCh
.rodata:00000000000050CC                 dd offset loc_27B0 - 50CCh, offset loc_2758 - 50CCh, offset loc_27B0 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2613 - 50CCh, offset loc_27B0 - 50CCh, offset loc_27B0 - 50CCh
.rodata:00000000000050CC                 dd offset loc_27B0 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_27B0 - 50CCh
.rodata:00000000000050CC                 dd offset loc_27B0 - 50CCh, offset loc_27B0 - 50CCh, offset loc_27B0 - 50CCh
.rodata:00000000000050CC                 dd offset loc_25E3 - 50CCh, offset def_250E - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_27B0 - 50CCh, offset loc_2688 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_27B0 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_27B0 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2758 - 50CCh, offset loc_2758 - 50CCh, offset loc_2758 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2513 - 50CCh, offset loc_27B0 - 50CCh, offset loc_2513 - 50CCh
.rodata:00000000000050CC                 dd offset loc_2780 - 50CCh
.rodata:00000000000052C8 jpt_289A        dd offset loc_2900 - 52C8h, offset def_289A - 52C8h, offset def_289A - 52C8h
.rodata:00000000000052C8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:00000000000052C8                                         ; quotearg_buffer_restyled+573↑r
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset def_289A - 52C8h, offset def_289A - 52C8h ; jump table for switch statement
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset loc_28F0 - 52C8h, offset loc_2A40 - 52C8h
.rodata:00000000000052C8                 dd offset loc_2A28 - 52C8h, offset loc_28D8 - 52C8h, offset loc_2A18 - 52C8h
.rodata:00000000000052C8                 dd offset loc_28C0 - 52C8h, offset loc_2A00 - 52C8h, offset def_289A - 52C8h
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset def_289A - 52C8h, offset def_289A - 52C8h
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset def_289A - 52C8h, offset def_289A - 52C8h
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset def_289A - 52C8h, offset def_289A - 52C8h
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset def_289A - 52C8h, offset def_289A - 52C8h
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset def_289A - 52C8h, offset def_289A - 52C8h
.rodata:00000000000052C8                 dd offset def_289A - 52C8h, offset def_289A - 52C8h, offset loc_29E8 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29D0 - 52C8h, offset loc_29D0 - 52C8h, offset loc_29B8 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29D0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29D0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_2610 - 52C8h, offset loc_29D0 - 52C8h, offset loc_29D0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29D0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29D0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29D0 - 52C8h, offset loc_29D0 - 52C8h, offset loc_29D0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_25E0 - 52C8h, offset def_289A - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29D0 - 52C8h, offset loc_28A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29D0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29D0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h, offset loc_29A0 - 52C8h
.rodata:00000000000052C8                 dd offset loc_2510 - 52C8h, offset loc_29D0 - 52C8h, offset loc_2510 - 52C8h
.rodata:00000000000052C8                 dd offset loc_29B8 - 52C8h
.rodata:00000000000054C4                 align 20h
.rodata:00000000000054E0                 public quoting_style_vals
.rodata:00000000000054E0 quoting_style_vals db    0
.rodata:00000000000054E1                 db    0
.rodata:00000000000054E2                 db    0
.rodata:00000000000054E3                 db    0
.rodata:00000000000054E4                 db    1
.rodata:00000000000054E5                 db    0
.rodata:00000000000054E6                 db    0
.rodata:00000000000054E7                 db    0
.rodata:00000000000054E8                 db    2
.rodata:00000000000054E9                 db    0
.rodata:00000000000054EA                 db    0
.rodata:00000000000054EB                 db    0
.rodata:00000000000054EC                 db    3
.rodata:00000000000054ED                 db    0
.rodata:00000000000054EE                 db    0
.rodata:00000000000054EF                 db    0
.rodata:00000000000054F0                 db    4
.rodata:00000000000054F1                 db    0
.rodata:00000000000054F2                 db    0
.rodata:00000000000054F3                 db    0
.rodata:00000000000054F4                 db    5
.rodata:00000000000054F5                 db    0
.rodata:00000000000054F6                 db    0
.rodata:00000000000054F7                 db    0
.rodata:00000000000054F8                 db    6
.rodata:00000000000054F9                 db    0
.rodata:00000000000054FA                 db    0
.rodata:00000000000054FB                 db    0
.rodata:00000000000054FC                 db    7
.rodata:00000000000054FD                 db    0
.rodata:00000000000054FE                 db    0
.rodata:00000000000054FF                 db    0
.rodata:0000000000005500                 db    8
.rodata:0000000000005501                 db    0
.rodata:0000000000005502                 db    0
.rodata:0000000000005503                 db    0
.rodata:0000000000005504                 db    9
.rodata:0000000000005505                 db    0
.rodata:0000000000005506                 db    0
.rodata:0000000000005507                 db    0
.rodata:0000000000005508 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005514 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000551B ; const char aC_0[]
.rodata:000000000000551B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3EFC↑o
.rodata:000000000000551F ; const char aWrittenByS[]
.rodata:000000000000551F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000551F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000552F ; const char aWrittenBySAndS[]
.rodata:000000000000552F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000552F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005546 ; const char aWrittenBySSAnd[]
.rodata:0000000000005546 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005546                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005562 ; const char aReportBugsToS[]
.rodata:0000000000005562 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005562                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005577 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005577                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000558D ; const char aSHomePageS[]
.rodata:000000000000558D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000558D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000055A1                 align 8
.rodata:00000000000055A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000055A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000055A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000055A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000055A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000055A8                 db '.',0Ah
.rodata:00000000000055A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000055A8                 db 0Ah,0
.rodata:0000000000005674                 align 8
.rodata:0000000000005678 ; const char aWrittenBySSSAn[]
.rodata:0000000000005678 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005678                                         ; DATA XREF: version_etc_arn:loc_4150↑o
.rodata:0000000000005678                 db 'and %s.',0Ah,0
.rodata:0000000000005698 ; const char aWrittenBySSSSA[]
.rodata:0000000000005698 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005698                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005698                 db '%s, and %s.',0Ah,0
.rodata:00000000000056BC                 align 20h
.rodata:00000000000056C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000056C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000056C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000056C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000056E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000056E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000056E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000056E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005714                 align 8
.rodata:0000000000005718 ; const char aWrittenBySSSSS[]
.rodata:0000000000005718 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005718                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005718                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005718                 db 'and %s.',0Ah,0
.rodata:0000000000005748 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005748 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005748                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005748                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005748                 db '%s, and %s.',0Ah,0
.rodata:000000000000577C                 align 20h
.rodata:0000000000005780 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005780                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005780                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005780                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000057BC                 align 20h
.rodata:00000000000057C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000057C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000057C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000057C0                 db 0
.rodata:0000000000005801                 align 8
.rodata:0000000000005808 jpt_3F64        dd offset loc_3FE6 - 5808h
.rodata:0000000000005808                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005808                                         ; version_etc_arn+9D↑r
.rodata:0000000000005808                 dd offset loc_4078 - 5808h ; jump table for switch statement
.rodata:0000000000005808                 dd offset loc_40B8 - 5808h
.rodata:0000000000005808                 dd offset loc_4100 - 5808h
.rodata:0000000000005808                 dd offset loc_4150 - 5808h
.rodata:0000000000005808                 dd offset loc_41A8 - 5808h
.rodata:0000000000005808                 dd offset loc_41D8 - 5808h
.rodata:0000000000005808                 dd offset loc_4240 - 5808h
.rodata:0000000000005808                 dd offset loc_3F70 - 5808h
.rodata:0000000000005808                 dd offset loc_4020 - 5808h
.rodata:0000000000005830                 align 20h
.rodata:0000000000005840                 public version_etc_copyright
.rodata:0000000000005840 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005840                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000586F ; const char aMemoryExhauste[]
.rodata:000000000000586F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005880 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005882 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4AB0↑o
.rodata:0000000000005888 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005888                                         ; locale_charset:loc_4B00↑o
.rodata:0000000000005888 _rodata         ends
.rodata:0000000000005888
LOAD:000000000000588E ; ===========================================================================
LOAD:000000000000588E
LOAD:000000000000588E ; Segment type: Pure code
LOAD:000000000000588E ; Segment permissions: Read/Execute
LOAD:000000000000588E LOAD            segment byte public 'CODE' use64
LOAD:000000000000588E                 assume cs:LOAD
LOAD:000000000000588E                 ;org 588Eh
LOAD:000000000000588E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000588E                 align 10h
LOAD:000000000000588E LOAD            ends
LOAD:000000000000588E
.eh_frame_hdr:0000000000005890 ; ===========================================================================
.eh_frame_hdr:0000000000005890
.eh_frame_hdr:0000000000005890 ; Segment type: Pure data
.eh_frame_hdr:0000000000005890 ; Segment permissions: Read
.eh_frame_hdr:0000000000005890 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005890                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005890                 ;org 5890h
.eh_frame_hdr:0000000000005890 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005891                 db  1Bh
.eh_frame_hdr:0000000000005892                 db    3
.eh_frame_hdr:0000000000005893                 db  3Bh ; ;
.eh_frame_hdr:0000000000005894                 db  6Ch ; l
.eh_frame_hdr:0000000000005895                 db    2
.eh_frame_hdr:0000000000005896                 db    0
.eh_frame_hdr:0000000000005897                 db    0
.eh_frame_hdr:0000000000005898                 db  4Ch ; L
.eh_frame_hdr:0000000000005899                 db    0
.eh_frame_hdr:000000000000589A                 db    0
.eh_frame_hdr:000000000000589B                 db    0
.eh_frame_hdr:000000000000589C                 db  20h
.eh_frame_hdr:000000000000589D                 db 0BBh
.eh_frame_hdr:000000000000589E                 db 0FFh
.eh_frame_hdr:000000000000589F                 db 0FFh
.eh_frame_hdr:00000000000058A0                 db 0B8h
.eh_frame_hdr:00000000000058A1                 db    2
.eh_frame_hdr:00000000000058A2                 db    0
.eh_frame_hdr:00000000000058A3                 db    0
.eh_frame_hdr:00000000000058A4                 db  30h ; 0
.eh_frame_hdr:00000000000058A5                 db 0BEh
.eh_frame_hdr:00000000000058A6                 db 0FFh
.eh_frame_hdr:00000000000058A7                 db 0FFh
.eh_frame_hdr:00000000000058A8                 db 0E0h
.eh_frame_hdr:00000000000058A9                 db    2
.eh_frame_hdr:00000000000058AA                 db    0
.eh_frame_hdr:00000000000058AB                 db    0
.eh_frame_hdr:00000000000058AC                 db  40h ; @
.eh_frame_hdr:00000000000058AD                 db 0BEh
.eh_frame_hdr:00000000000058AE                 db 0FFh
.eh_frame_hdr:00000000000058AF                 db 0FFh
.eh_frame_hdr:00000000000058B0                 db  84h
.eh_frame_hdr:00000000000058B1                 db    3
.eh_frame_hdr:00000000000058B2                 db    0
.eh_frame_hdr:00000000000058B3                 db    0
.eh_frame_hdr:00000000000058B4                 db  50h ; P
.eh_frame_hdr:00000000000058B5                 db 0BFh
.eh_frame_hdr:00000000000058B6                 db 0FFh
.eh_frame_hdr:00000000000058B7                 db 0FFh
.eh_frame_hdr:00000000000058B8                 db  88h
.eh_frame_hdr:00000000000058B9                 db    2
.eh_frame_hdr:00000000000058BA                 db    0
.eh_frame_hdr:00000000000058BB                 db    0
.eh_frame_hdr:00000000000058BC                 db  60h ; `
.eh_frame_hdr:00000000000058BD                 db 0C0h
.eh_frame_hdr:00000000000058BE                 db 0FFh
.eh_frame_hdr:00000000000058BF                 db 0FFh
.eh_frame_hdr:00000000000058C0                 db 0F8h
.eh_frame_hdr:00000000000058C1                 db    2
.eh_frame_hdr:00000000000058C2                 db    0
.eh_frame_hdr:00000000000058C3                 db    0
.eh_frame_hdr:00000000000058C4                 db  70h ; p
.eh_frame_hdr:00000000000058C5                 db 0C0h
.eh_frame_hdr:00000000000058C6                 db 0FFh
.eh_frame_hdr:00000000000058C7                 db 0FFh
.eh_frame_hdr:00000000000058C8                 db  0Ch
.eh_frame_hdr:00000000000058C9                 db    3
.eh_frame_hdr:00000000000058CA                 db    0
.eh_frame_hdr:00000000000058CB                 db    0
.eh_frame_hdr:00000000000058CC                 db  60h ; `
.eh_frame_hdr:00000000000058CD                 db 0C2h
.eh_frame_hdr:00000000000058CE                 db 0FFh
.eh_frame_hdr:00000000000058CF                 db 0FFh
.eh_frame_hdr:00000000000058D0                 db  58h ; X
.eh_frame_hdr:00000000000058D1                 db    3
.eh_frame_hdr:00000000000058D2                 db    0
.eh_frame_hdr:00000000000058D3                 db    0
.eh_frame_hdr:00000000000058D4                 db 0B0h
.eh_frame_hdr:00000000000058D5                 db 0C5h
.eh_frame_hdr:00000000000058D6                 db 0FFh
.eh_frame_hdr:00000000000058D7                 db 0FFh
.eh_frame_hdr:00000000000058D8                 db 0C0h
.eh_frame_hdr:00000000000058D9                 db    3
.eh_frame_hdr:00000000000058DA                 db    0
.eh_frame_hdr:00000000000058DB                 db    0
.eh_frame_hdr:00000000000058DC                 db 0C0h
.eh_frame_hdr:00000000000058DD                 db 0C5h
.eh_frame_hdr:00000000000058DE                 db 0FFh
.eh_frame_hdr:00000000000058DF                 db 0FFh
.eh_frame_hdr:00000000000058E0                 db 0D4h
.eh_frame_hdr:00000000000058E1                 db    3
.eh_frame_hdr:00000000000058E2                 db    0
.eh_frame_hdr:00000000000058E3                 db    0
.eh_frame_hdr:00000000000058E4                 db 0D0h
.eh_frame_hdr:00000000000058E5                 db 0C5h
.eh_frame_hdr:00000000000058E6                 db 0FFh
.eh_frame_hdr:00000000000058E7                 db 0FFh
.eh_frame_hdr:00000000000058E8                 db 0E8h
.eh_frame_hdr:00000000000058E9                 db    3
.eh_frame_hdr:00000000000058EA                 db    0
.eh_frame_hdr:00000000000058EB                 db    0
.eh_frame_hdr:00000000000058EC                 db  80h
.eh_frame_hdr:00000000000058ED                 db 0C6h
.eh_frame_hdr:00000000000058EE                 db 0FFh
.eh_frame_hdr:00000000000058EF                 db 0FFh
.eh_frame_hdr:00000000000058F0                 db  18h
.eh_frame_hdr:00000000000058F1                 db    4
.eh_frame_hdr:00000000000058F2                 db    0
.eh_frame_hdr:00000000000058F3                 db    0
.eh_frame_hdr:00000000000058F4                 db 0C0h
.eh_frame_hdr:00000000000058F5                 db 0C7h
.eh_frame_hdr:00000000000058F6                 db 0FFh
.eh_frame_hdr:00000000000058F7                 db 0FFh
.eh_frame_hdr:00000000000058F8                 db  54h ; T
.eh_frame_hdr:00000000000058F9                 db    4
.eh_frame_hdr:00000000000058FA                 db    0
.eh_frame_hdr:00000000000058FB                 db    0
.eh_frame_hdr:00000000000058FC                 db    0
.eh_frame_hdr:00000000000058FD                 db 0C9h
.eh_frame_hdr:00000000000058FE                 db 0FFh
.eh_frame_hdr:00000000000058FF                 db 0FFh
.eh_frame_hdr:0000000000005900                 db 0A0h
.eh_frame_hdr:0000000000005901                 db    4
.eh_frame_hdr:0000000000005902                 db    0
.eh_frame_hdr:0000000000005903                 db    0
.eh_frame_hdr:0000000000005904                 db 0A0h
.eh_frame_hdr:0000000000005905                 db 0C9h
.eh_frame_hdr:0000000000005906                 db 0FFh
.eh_frame_hdr:0000000000005907                 db 0FFh
.eh_frame_hdr:0000000000005908                 db 0C0h
.eh_frame_hdr:0000000000005909                 db    4
.eh_frame_hdr:000000000000590A                 db    0
.eh_frame_hdr:000000000000590B                 db    0
.eh_frame_hdr:000000000000590C                 db  90h
.eh_frame_hdr:000000000000590D                 db 0CAh
.eh_frame_hdr:000000000000590E                 db 0FFh
.eh_frame_hdr:000000000000590F                 db 0FFh
.eh_frame_hdr:0000000000005910                 db    4
.eh_frame_hdr:0000000000005911                 db    5
.eh_frame_hdr:0000000000005912                 db    0
.eh_frame_hdr:0000000000005913                 db    0
.eh_frame_hdr:0000000000005914                 db 0D0h
.eh_frame_hdr:0000000000005915                 db 0DCh
.eh_frame_hdr:0000000000005916                 db 0FFh
.eh_frame_hdr:0000000000005917                 db 0FFh
.eh_frame_hdr:0000000000005918                 db  7Ch ; |
.eh_frame_hdr:0000000000005919                 db    5
.eh_frame_hdr:000000000000591A                 db    0
.eh_frame_hdr:000000000000591B                 db    0
.eh_frame_hdr:000000000000591C                 db  80h
.eh_frame_hdr:000000000000591D                 db 0DEh
.eh_frame_hdr:000000000000591E                 db 0FFh
.eh_frame_hdr:000000000000591F                 db 0FFh
.eh_frame_hdr:0000000000005920                 db 0E8h
.eh_frame_hdr:0000000000005921                 db    5
.eh_frame_hdr:0000000000005922                 db    0
.eh_frame_hdr:0000000000005923                 db    0
.eh_frame_hdr:0000000000005924                 db 0C0h
.eh_frame_hdr:0000000000005925                 db 0DEh
.eh_frame_hdr:0000000000005926                 db 0FFh
.eh_frame_hdr:0000000000005927                 db 0FFh
.eh_frame_hdr:0000000000005928                 db  14h
.eh_frame_hdr:0000000000005929                 db    6
.eh_frame_hdr:000000000000592A                 db    0
.eh_frame_hdr:000000000000592B                 db    0
.eh_frame_hdr:000000000000592C                 db 0E0h
.eh_frame_hdr:000000000000592D                 db 0DEh
.eh_frame_hdr:000000000000592E                 db 0FFh
.eh_frame_hdr:000000000000592F                 db 0FFh
.eh_frame_hdr:0000000000005930                 db  28h ; (
.eh_frame_hdr:0000000000005931                 db    6
.eh_frame_hdr:0000000000005932                 db    0
.eh_frame_hdr:0000000000005933                 db    0
.eh_frame_hdr:0000000000005934                 db    0
.eh_frame_hdr:0000000000005935                 db 0DFh
.eh_frame_hdr:0000000000005936                 db 0FFh
.eh_frame_hdr:0000000000005937                 db 0FFh
.eh_frame_hdr:0000000000005938                 db  3Ch ; <
.eh_frame_hdr:0000000000005939                 db    6
.eh_frame_hdr:000000000000593A                 db    0
.eh_frame_hdr:000000000000593B                 db    0
.eh_frame_hdr:000000000000593C                 db  40h ; @
.eh_frame_hdr:000000000000593D                 db 0DFh
.eh_frame_hdr:000000000000593E                 db 0FFh
.eh_frame_hdr:000000000000593F                 db 0FFh
.eh_frame_hdr:0000000000005940                 db  50h ; P
.eh_frame_hdr:0000000000005941                 db    6
.eh_frame_hdr:0000000000005942                 db    0
.eh_frame_hdr:0000000000005943                 db    0
.eh_frame_hdr:0000000000005944                 db  60h ; `
.eh_frame_hdr:0000000000005945                 db 0DFh
.eh_frame_hdr:0000000000005946                 db 0FFh
.eh_frame_hdr:0000000000005947                 db 0FFh
.eh_frame_hdr:0000000000005948                 db  64h ; d
.eh_frame_hdr:0000000000005949                 db    6
.eh_frame_hdr:000000000000594A                 db    0
.eh_frame_hdr:000000000000594B                 db    0
.eh_frame_hdr:000000000000594C                 db  90h
.eh_frame_hdr:000000000000594D                 db 0DFh
.eh_frame_hdr:000000000000594E                 db 0FFh
.eh_frame_hdr:000000000000594F                 db 0FFh
.eh_frame_hdr:0000000000005950                 db  78h ; x
.eh_frame_hdr:0000000000005951                 db    6
.eh_frame_hdr:0000000000005952                 db    0
.eh_frame_hdr:0000000000005953                 db    0
.eh_frame_hdr:0000000000005954                 db  10h
.eh_frame_hdr:0000000000005955                 db 0E0h
.eh_frame_hdr:0000000000005956                 db 0FFh
.eh_frame_hdr:0000000000005957                 db 0FFh
.eh_frame_hdr:0000000000005958                 db 0CCh
.eh_frame_hdr:0000000000005959                 db    6
.eh_frame_hdr:000000000000595A                 db    0
.eh_frame_hdr:000000000000595B                 db    0
.eh_frame_hdr:000000000000595C                 db    0
.eh_frame_hdr:000000000000595D                 db 0E1h
.eh_frame_hdr:000000000000595E                 db 0FFh
.eh_frame_hdr:000000000000595F                 db 0FFh
.eh_frame_hdr:0000000000005960                 db  38h ; 8
.eh_frame_hdr:0000000000005961                 db    7
.eh_frame_hdr:0000000000005962                 db    0
.eh_frame_hdr:0000000000005963                 db    0
.eh_frame_hdr:0000000000005964                 db  10h
.eh_frame_hdr:0000000000005965                 db 0E1h
.eh_frame_hdr:0000000000005966                 db 0FFh
.eh_frame_hdr:0000000000005967                 db 0FFh
.eh_frame_hdr:0000000000005968                 db  4Ch ; L
.eh_frame_hdr:0000000000005969                 db    7
.eh_frame_hdr:000000000000596A                 db    0
.eh_frame_hdr:000000000000596B                 db    0
.eh_frame_hdr:000000000000596C                 db 0B0h
.eh_frame_hdr:000000000000596D                 db 0E1h
.eh_frame_hdr:000000000000596E                 db 0FFh
.eh_frame_hdr:000000000000596F                 db 0FFh
.eh_frame_hdr:0000000000005970                 db  78h ; x
.eh_frame_hdr:0000000000005971                 db    7
.eh_frame_hdr:0000000000005972                 db    0
.eh_frame_hdr:0000000000005973                 db    0
.eh_frame_hdr:0000000000005974                 db 0D0h
.eh_frame_hdr:0000000000005975                 db 0E1h
.eh_frame_hdr:0000000000005976                 db 0FFh
.eh_frame_hdr:0000000000005977                 db 0FFh
.eh_frame_hdr:0000000000005978                 db  8Ch
.eh_frame_hdr:0000000000005979                 db    7
.eh_frame_hdr:000000000000597A                 db    0
.eh_frame_hdr:000000000000597B                 db    0
.eh_frame_hdr:000000000000597C                 db 0E0h
.eh_frame_hdr:000000000000597D                 db 0E1h
.eh_frame_hdr:000000000000597E                 db 0FFh
.eh_frame_hdr:000000000000597F                 db 0FFh
.eh_frame_hdr:0000000000005980                 db 0A0h
.eh_frame_hdr:0000000000005981                 db    7
.eh_frame_hdr:0000000000005982                 db    0
.eh_frame_hdr:0000000000005983                 db    0
.eh_frame_hdr:0000000000005984                 db    0
.eh_frame_hdr:0000000000005985                 db 0E2h
.eh_frame_hdr:0000000000005986                 db 0FFh
.eh_frame_hdr:0000000000005987                 db 0FFh
.eh_frame_hdr:0000000000005988                 db 0B4h
.eh_frame_hdr:0000000000005989                 db    7
.eh_frame_hdr:000000000000598A                 db    0
.eh_frame_hdr:000000000000598B                 db    0
.eh_frame_hdr:000000000000598C                 db  20h
.eh_frame_hdr:000000000000598D                 db 0E2h
.eh_frame_hdr:000000000000598E                 db 0FFh
.eh_frame_hdr:000000000000598F                 db 0FFh
.eh_frame_hdr:0000000000005990                 db 0C8h
.eh_frame_hdr:0000000000005991                 db    7
.eh_frame_hdr:0000000000005992                 db    0
.eh_frame_hdr:0000000000005993                 db    0
.eh_frame_hdr:0000000000005994                 db 0B0h
.eh_frame_hdr:0000000000005995                 db 0E2h
.eh_frame_hdr:0000000000005996                 db 0FFh
.eh_frame_hdr:0000000000005997                 db 0FFh
.eh_frame_hdr:0000000000005998                 db 0E4h
.eh_frame_hdr:0000000000005999                 db    7
.eh_frame_hdr:000000000000599A                 db    0
.eh_frame_hdr:000000000000599B                 db    0
.eh_frame_hdr:000000000000599C                 db  40h ; @
.eh_frame_hdr:000000000000599D                 db 0E3h
.eh_frame_hdr:000000000000599E                 db 0FFh
.eh_frame_hdr:000000000000599F                 db 0FFh
.eh_frame_hdr:00000000000059A0                 db    0
.eh_frame_hdr:00000000000059A1                 db    8
.eh_frame_hdr:00000000000059A2                 db    0
.eh_frame_hdr:00000000000059A3                 db    0
.eh_frame_hdr:00000000000059A4                 db  50h ; P
.eh_frame_hdr:00000000000059A5                 db 0E3h
.eh_frame_hdr:00000000000059A6                 db 0FFh
.eh_frame_hdr:00000000000059A7                 db 0FFh
.eh_frame_hdr:00000000000059A8                 db  14h
.eh_frame_hdr:00000000000059A9                 db    8
.eh_frame_hdr:00000000000059AA                 db    0
.eh_frame_hdr:00000000000059AB                 db    0
.eh_frame_hdr:00000000000059AC                 db  60h ; `
.eh_frame_hdr:00000000000059AD                 db 0E3h
.eh_frame_hdr:00000000000059AE                 db 0FFh
.eh_frame_hdr:00000000000059AF                 db 0FFh
.eh_frame_hdr:00000000000059B0                 db  28h ; (
.eh_frame_hdr:00000000000059B1                 db    8
.eh_frame_hdr:00000000000059B2                 db    0
.eh_frame_hdr:00000000000059B3                 db    0
.eh_frame_hdr:00000000000059B4                 db    0
.eh_frame_hdr:00000000000059B5                 db 0E4h
.eh_frame_hdr:00000000000059B6                 db 0FFh
.eh_frame_hdr:00000000000059B7                 db 0FFh
.eh_frame_hdr:00000000000059B8                 db  44h ; D
.eh_frame_hdr:00000000000059B9                 db    8
.eh_frame_hdr:00000000000059BA                 db    0
.eh_frame_hdr:00000000000059BB                 db    0
.eh_frame_hdr:00000000000059BC                 db  10h
.eh_frame_hdr:00000000000059BD                 db 0E4h
.eh_frame_hdr:00000000000059BE                 db 0FFh
.eh_frame_hdr:00000000000059BF                 db 0FFh
.eh_frame_hdr:00000000000059C0                 db  58h ; X
.eh_frame_hdr:00000000000059C1                 db    8
.eh_frame_hdr:00000000000059C2                 db    0
.eh_frame_hdr:00000000000059C3                 db    0
.eh_frame_hdr:00000000000059C4                 db  30h ; 0
.eh_frame_hdr:00000000000059C5                 db 0E4h
.eh_frame_hdr:00000000000059C6                 db 0FFh
.eh_frame_hdr:00000000000059C7                 db 0FFh
.eh_frame_hdr:00000000000059C8                 db  6Ch ; l
.eh_frame_hdr:00000000000059C9                 db    8
.eh_frame_hdr:00000000000059CA                 db    0
.eh_frame_hdr:00000000000059CB                 db    0
.eh_frame_hdr:00000000000059CC                 db  40h ; @
.eh_frame_hdr:00000000000059CD                 db 0E4h
.eh_frame_hdr:00000000000059CE                 db 0FFh
.eh_frame_hdr:00000000000059CF                 db 0FFh
.eh_frame_hdr:00000000000059D0                 db  80h
.eh_frame_hdr:00000000000059D1                 db    8
.eh_frame_hdr:00000000000059D2                 db    0
.eh_frame_hdr:00000000000059D3                 db    0
.eh_frame_hdr:00000000000059D4                 db 0D0h
.eh_frame_hdr:00000000000059D5                 db 0E4h
.eh_frame_hdr:00000000000059D6                 db 0FFh
.eh_frame_hdr:00000000000059D7                 db 0FFh
.eh_frame_hdr:00000000000059D8                 db  9Ch
.eh_frame_hdr:00000000000059D9                 db    8
.eh_frame_hdr:00000000000059DA                 db    0
.eh_frame_hdr:00000000000059DB                 db    0
.eh_frame_hdr:00000000000059DC                 db  70h ; p
.eh_frame_hdr:00000000000059DD                 db 0E5h
.eh_frame_hdr:00000000000059DE                 db 0FFh
.eh_frame_hdr:00000000000059DF                 db 0FFh
.eh_frame_hdr:00000000000059E0                 db 0B8h
.eh_frame_hdr:00000000000059E1                 db    8
.eh_frame_hdr:00000000000059E2                 db    0
.eh_frame_hdr:00000000000059E3                 db    0
.eh_frame_hdr:00000000000059E4                 db  80h
.eh_frame_hdr:00000000000059E5                 db 0E5h
.eh_frame_hdr:00000000000059E6                 db 0FFh
.eh_frame_hdr:00000000000059E7                 db 0FFh
.eh_frame_hdr:00000000000059E8                 db 0CCh
.eh_frame_hdr:00000000000059E9                 db    8
.eh_frame_hdr:00000000000059EA                 db    0
.eh_frame_hdr:00000000000059EB                 db    0
.eh_frame_hdr:00000000000059EC                 db 0A0h
.eh_frame_hdr:00000000000059ED                 db 0E5h
.eh_frame_hdr:00000000000059EE                 db 0FFh
.eh_frame_hdr:00000000000059EF                 db 0FFh
.eh_frame_hdr:00000000000059F0                 db 0E0h
.eh_frame_hdr:00000000000059F1                 db    8
.eh_frame_hdr:00000000000059F2                 db    0
.eh_frame_hdr:00000000000059F3                 db    0
.eh_frame_hdr:00000000000059F4                 db 0C0h
.eh_frame_hdr:00000000000059F5                 db 0E5h
.eh_frame_hdr:00000000000059F6                 db 0FFh
.eh_frame_hdr:00000000000059F7                 db 0FFh
.eh_frame_hdr:00000000000059F8                 db 0F4h
.eh_frame_hdr:00000000000059F9                 db    8
.eh_frame_hdr:00000000000059FA                 db    0
.eh_frame_hdr:00000000000059FB                 db    0
.eh_frame_hdr:00000000000059FC                 db 0D0h
.eh_frame_hdr:00000000000059FD                 db 0E5h
.eh_frame_hdr:00000000000059FE                 db 0FFh
.eh_frame_hdr:00000000000059FF                 db 0FFh
.eh_frame_hdr:0000000000005A00                 db    8
.eh_frame_hdr:0000000000005A01                 db    9
.eh_frame_hdr:0000000000005A02                 db    0
.eh_frame_hdr:0000000000005A03                 db    0
.eh_frame_hdr:0000000000005A04                 db 0F0h
.eh_frame_hdr:0000000000005A05                 db 0E5h
.eh_frame_hdr:0000000000005A06                 db 0FFh
.eh_frame_hdr:0000000000005A07                 db 0FFh
.eh_frame_hdr:0000000000005A08                 db  1Ch
.eh_frame_hdr:0000000000005A09                 db    9
.eh_frame_hdr:0000000000005A0A                 db    0
.eh_frame_hdr:0000000000005A0B                 db    0
.eh_frame_hdr:0000000000005A0C                 db  10h
.eh_frame_hdr:0000000000005A0D                 db 0E6h
.eh_frame_hdr:0000000000005A0E                 db 0FFh
.eh_frame_hdr:0000000000005A0F                 db 0FFh
.eh_frame_hdr:0000000000005A10                 db  30h ; 0
.eh_frame_hdr:0000000000005A11                 db    9
.eh_frame_hdr:0000000000005A12                 db    0
.eh_frame_hdr:0000000000005A13                 db    0
.eh_frame_hdr:0000000000005A14                 db  30h ; 0
.eh_frame_hdr:0000000000005A15                 db 0E6h
.eh_frame_hdr:0000000000005A16                 db 0FFh
.eh_frame_hdr:0000000000005A17                 db 0FFh
.eh_frame_hdr:0000000000005A18                 db  48h ; H
.eh_frame_hdr:0000000000005A19                 db    9
.eh_frame_hdr:0000000000005A1A                 db    0
.eh_frame_hdr:0000000000005A1B                 db    0
.eh_frame_hdr:0000000000005A1C                 db  50h ; P
.eh_frame_hdr:0000000000005A1D                 db 0EAh
.eh_frame_hdr:0000000000005A1E                 db 0FFh
.eh_frame_hdr:0000000000005A1F                 db 0FFh
.eh_frame_hdr:0000000000005A20                 db  5Ch ; \
.eh_frame_hdr:0000000000005A21                 db  0Ah
.eh_frame_hdr:0000000000005A22                 db    0
.eh_frame_hdr:0000000000005A23                 db    0
.eh_frame_hdr:0000000000005A24                 db  70h ; p
.eh_frame_hdr:0000000000005A25                 db 0EAh
.eh_frame_hdr:0000000000005A26                 db 0FFh
.eh_frame_hdr:0000000000005A27                 db 0FFh
.eh_frame_hdr:0000000000005A28                 db  70h ; p
.eh_frame_hdr:0000000000005A29                 db  0Ah
.eh_frame_hdr:0000000000005A2A                 db    0
.eh_frame_hdr:0000000000005A2B                 db    0
.eh_frame_hdr:0000000000005A2C                 db 0F0h
.eh_frame_hdr:0000000000005A2D                 db 0EAh
.eh_frame_hdr:0000000000005A2E                 db 0FFh
.eh_frame_hdr:0000000000005A2F                 db 0FFh
.eh_frame_hdr:0000000000005A30                 db  8Ch
.eh_frame_hdr:0000000000005A31                 db  0Ah
.eh_frame_hdr:0000000000005A32                 db    0
.eh_frame_hdr:0000000000005A33                 db    0
.eh_frame_hdr:0000000000005A34                 db 0D0h
.eh_frame_hdr:0000000000005A35                 db 0EBh
.eh_frame_hdr:0000000000005A36                 db 0FFh
.eh_frame_hdr:0000000000005A37                 db 0FFh
.eh_frame_hdr:0000000000005A38                 db 0B8h
.eh_frame_hdr:0000000000005A39                 db  0Ah
.eh_frame_hdr:0000000000005A3A                 db    0
.eh_frame_hdr:0000000000005A3B                 db    0
.eh_frame_hdr:0000000000005A3C                 db  50h ; P
.eh_frame_hdr:0000000000005A3D                 db 0ECh
.eh_frame_hdr:0000000000005A3E                 db 0FFh
.eh_frame_hdr:0000000000005A3F                 db 0FFh
.eh_frame_hdr:0000000000005A40                 db 0D8h
.eh_frame_hdr:0000000000005A41                 db  0Ah
.eh_frame_hdr:0000000000005A42                 db    0
.eh_frame_hdr:0000000000005A43                 db    0
.eh_frame_hdr:0000000000005A44                 db  70h ; p
.eh_frame_hdr:0000000000005A45                 db 0ECh
.eh_frame_hdr:0000000000005A46                 db 0FFh
.eh_frame_hdr:0000000000005A47                 db 0FFh
.eh_frame_hdr:0000000000005A48                 db 0F4h
.eh_frame_hdr:0000000000005A49                 db  0Ah
.eh_frame_hdr:0000000000005A4A                 db    0
.eh_frame_hdr:0000000000005A4B                 db    0
.eh_frame_hdr:0000000000005A4C                 db 0A0h
.eh_frame_hdr:0000000000005A4D                 db 0ECh
.eh_frame_hdr:0000000000005A4E                 db 0FFh
.eh_frame_hdr:0000000000005A4F                 db 0FFh
.eh_frame_hdr:0000000000005A50                 db    8
.eh_frame_hdr:0000000000005A51                 db  0Bh
.eh_frame_hdr:0000000000005A52                 db    0
.eh_frame_hdr:0000000000005A53                 db    0
.eh_frame_hdr:0000000000005A54                 db 0B0h
.eh_frame_hdr:0000000000005A55                 db 0ECh
.eh_frame_hdr:0000000000005A56                 db 0FFh
.eh_frame_hdr:0000000000005A57                 db 0FFh
.eh_frame_hdr:0000000000005A58                 db  1Ch
.eh_frame_hdr:0000000000005A59                 db  0Bh
.eh_frame_hdr:0000000000005A5A                 db    0
.eh_frame_hdr:0000000000005A5B                 db    0
.eh_frame_hdr:0000000000005A5C                 db 0F0h
.eh_frame_hdr:0000000000005A5D                 db 0ECh
.eh_frame_hdr:0000000000005A5E                 db 0FFh
.eh_frame_hdr:0000000000005A5F                 db 0FFh
.eh_frame_hdr:0000000000005A60                 db  40h ; @
.eh_frame_hdr:0000000000005A61                 db  0Bh
.eh_frame_hdr:0000000000005A62                 db    0
.eh_frame_hdr:0000000000005A63                 db    0
.eh_frame_hdr:0000000000005A64                 db  20h
.eh_frame_hdr:0000000000005A65                 db 0EDh
.eh_frame_hdr:0000000000005A66                 db 0FFh
.eh_frame_hdr:0000000000005A67                 db 0FFh
.eh_frame_hdr:0000000000005A68                 db  54h ; T
.eh_frame_hdr:0000000000005A69                 db  0Bh
.eh_frame_hdr:0000000000005A6A                 db    0
.eh_frame_hdr:0000000000005A6B                 db    0
.eh_frame_hdr:0000000000005A6C                 db 0B0h
.eh_frame_hdr:0000000000005A6D                 db 0EDh
.eh_frame_hdr:0000000000005A6E                 db 0FFh
.eh_frame_hdr:0000000000005A6F                 db 0FFh
.eh_frame_hdr:0000000000005A70                 db  6Ch ; l
.eh_frame_hdr:0000000000005A71                 db  0Bh
.eh_frame_hdr:0000000000005A72                 db    0
.eh_frame_hdr:0000000000005A73                 db    0
.eh_frame_hdr:0000000000005A74                 db    0
.eh_frame_hdr:0000000000005A75                 db 0EEh
.eh_frame_hdr:0000000000005A76                 db 0FFh
.eh_frame_hdr:0000000000005A77                 db 0FFh
.eh_frame_hdr:0000000000005A78                 db  84h
.eh_frame_hdr:0000000000005A79                 db  0Bh
.eh_frame_hdr:0000000000005A7A                 db    0
.eh_frame_hdr:0000000000005A7B                 db    0
.eh_frame_hdr:0000000000005A7C                 db  20h
.eh_frame_hdr:0000000000005A7D                 db 0EEh
.eh_frame_hdr:0000000000005A7E                 db 0FFh
.eh_frame_hdr:0000000000005A7F                 db 0FFh
.eh_frame_hdr:0000000000005A80                 db 0A0h
.eh_frame_hdr:0000000000005A81                 db  0Bh
.eh_frame_hdr:0000000000005A82                 db    0
.eh_frame_hdr:0000000000005A83                 db    0
.eh_frame_hdr:0000000000005A84                 db  50h ; P
.eh_frame_hdr:0000000000005A85                 db 0EEh
.eh_frame_hdr:0000000000005A86                 db 0FFh
.eh_frame_hdr:0000000000005A87                 db 0FFh
.eh_frame_hdr:0000000000005A88                 db 0BCh
.eh_frame_hdr:0000000000005A89                 db  0Bh
.eh_frame_hdr:0000000000005A8A                 db    0
.eh_frame_hdr:0000000000005A8B                 db    0
.eh_frame_hdr:0000000000005A8C                 db  80h
.eh_frame_hdr:0000000000005A8D                 db 0EEh
.eh_frame_hdr:0000000000005A8E                 db 0FFh
.eh_frame_hdr:0000000000005A8F                 db 0FFh
.eh_frame_hdr:0000000000005A90                 db 0E4h
.eh_frame_hdr:0000000000005A91                 db  0Bh
.eh_frame_hdr:0000000000005A92                 db    0
.eh_frame_hdr:0000000000005A93                 db    0
.eh_frame_hdr:0000000000005A94                 db 0A0h
.eh_frame_hdr:0000000000005A95                 db 0EEh
.eh_frame_hdr:0000000000005A96                 db 0FFh
.eh_frame_hdr:0000000000005A97                 db 0FFh
.eh_frame_hdr:0000000000005A98                 db    0
.eh_frame_hdr:0000000000005A99                 db  0Ch
.eh_frame_hdr:0000000000005A9A                 db    0
.eh_frame_hdr:0000000000005A9B                 db    0
.eh_frame_hdr:0000000000005A9C                 db 0E0h
.eh_frame_hdr:0000000000005A9D                 db 0EEh
.eh_frame_hdr:0000000000005A9E                 db 0FFh
.eh_frame_hdr:0000000000005A9F                 db 0FFh
.eh_frame_hdr:0000000000005AA0                 db  18h
.eh_frame_hdr:0000000000005AA1                 db  0Ch
.eh_frame_hdr:0000000000005AA2                 db    0
.eh_frame_hdr:0000000000005AA3                 db    0
.eh_frame_hdr:0000000000005AA4                 db  70h ; p
.eh_frame_hdr:0000000000005AA5                 db 0EFh
.eh_frame_hdr:0000000000005AA6                 db 0FFh
.eh_frame_hdr:0000000000005AA7                 db 0FFh
.eh_frame_hdr:0000000000005AA8                 db  58h ; X
.eh_frame_hdr:0000000000005AA9                 db  0Ch
.eh_frame_hdr:0000000000005AAA                 db    0
.eh_frame_hdr:0000000000005AAB                 db    0
.eh_frame_hdr:0000000000005AAC                 db 0D0h
.eh_frame_hdr:0000000000005AAD                 db 0EFh
.eh_frame_hdr:0000000000005AAE                 db 0FFh
.eh_frame_hdr:0000000000005AAF                 db 0FFh
.eh_frame_hdr:0000000000005AB0                 db  84h
.eh_frame_hdr:0000000000005AB1                 db  0Ch
.eh_frame_hdr:0000000000005AB2                 db    0
.eh_frame_hdr:0000000000005AB3                 db    0
.eh_frame_hdr:0000000000005AB4                 db  60h ; `
.eh_frame_hdr:0000000000005AB5                 db 0F1h
.eh_frame_hdr:0000000000005AB6                 db 0FFh
.eh_frame_hdr:0000000000005AB7                 db 0FFh
.eh_frame_hdr:0000000000005AB8                 db 0D0h
.eh_frame_hdr:0000000000005AB9                 db  0Ch
.eh_frame_hdr:0000000000005ABA                 db    0
.eh_frame_hdr:0000000000005ABB                 db    0
.eh_frame_hdr:0000000000005ABC                 db 0E0h
.eh_frame_hdr:0000000000005ABD                 db 0F1h
.eh_frame_hdr:0000000000005ABE                 db 0FFh
.eh_frame_hdr:0000000000005ABF                 db 0FFh
.eh_frame_hdr:0000000000005AC0                 db  20h
.eh_frame_hdr:0000000000005AC1                 db  0Dh
.eh_frame_hdr:0000000000005AC2                 db    0
.eh_frame_hdr:0000000000005AC3                 db    0
.eh_frame_hdr:0000000000005AC4                 db  40h ; @
.eh_frame_hdr:0000000000005AC5                 db 0F2h
.eh_frame_hdr:0000000000005AC6                 db 0FFh
.eh_frame_hdr:0000000000005AC7                 db 0FFh
.eh_frame_hdr:0000000000005AC8                 db  40h ; @
.eh_frame_hdr:0000000000005AC9                 db  0Dh
.eh_frame_hdr:0000000000005ACA                 db    0
.eh_frame_hdr:0000000000005ACB                 db    0
.eh_frame_hdr:0000000000005ACC                 db  80h
.eh_frame_hdr:0000000000005ACD                 db 0F2h
.eh_frame_hdr:0000000000005ACE                 db 0FFh
.eh_frame_hdr:0000000000005ACF                 db 0FFh
.eh_frame_hdr:0000000000005AD0                 db  60h ; `
.eh_frame_hdr:0000000000005AD1                 db  0Dh
.eh_frame_hdr:0000000000005AD2                 db    0
.eh_frame_hdr:0000000000005AD3                 db    0
.eh_frame_hdr:0000000000005AD4                 db    0
.eh_frame_hdr:0000000000005AD5                 db 0F3h
.eh_frame_hdr:0000000000005AD6                 db 0FFh
.eh_frame_hdr:0000000000005AD7                 db 0FFh
.eh_frame_hdr:0000000000005AD8                 db  98h
.eh_frame_hdr:0000000000005AD9                 db  0Dh
.eh_frame_hdr:0000000000005ADA                 db    0
.eh_frame_hdr:0000000000005ADB                 db    0
.eh_frame_hdr:0000000000005ADC                 db  40h ; @
.eh_frame_hdr:0000000000005ADD                 db 0F3h
.eh_frame_hdr:0000000000005ADE                 db 0FFh
.eh_frame_hdr:0000000000005ADF                 db 0FFh
.eh_frame_hdr:0000000000005AE0                 db 0B8h
.eh_frame_hdr:0000000000005AE1                 db  0Dh
.eh_frame_hdr:0000000000005AE2                 db    0
.eh_frame_hdr:0000000000005AE3                 db    0
.eh_frame_hdr:0000000000005AE4                 db 0A0h
.eh_frame_hdr:0000000000005AE5                 db 0F3h
.eh_frame_hdr:0000000000005AE6                 db 0FFh
.eh_frame_hdr:0000000000005AE7                 db 0FFh
.eh_frame_hdr:0000000000005AE8                 db 0E8h
.eh_frame_hdr:0000000000005AE9                 db  0Dh
.eh_frame_hdr:0000000000005AEA                 db    0
.eh_frame_hdr:0000000000005AEB                 db    0
.eh_frame_hdr:0000000000005AEC                 db  10h
.eh_frame_hdr:0000000000005AED                 db 0F4h
.eh_frame_hdr:0000000000005AEE                 db 0FFh
.eh_frame_hdr:0000000000005AEF                 db 0FFh
.eh_frame_hdr:0000000000005AF0                 db  30h ; 0
.eh_frame_hdr:0000000000005AF1                 db  0Eh
.eh_frame_hdr:0000000000005AF2                 db    0
.eh_frame_hdr:0000000000005AF3                 db    0
.eh_frame_hdr:0000000000005AF4                 db  20h
.eh_frame_hdr:0000000000005AF5                 db 0F4h
.eh_frame_hdr:0000000000005AF6                 db 0FFh
.eh_frame_hdr:0000000000005AF7                 db 0FFh
.eh_frame_hdr:0000000000005AF8                 db  48h ; H
.eh_frame_hdr:0000000000005AF9                 db  0Eh
.eh_frame_hdr:0000000000005AFA                 db    0
.eh_frame_hdr:0000000000005AFB                 db    0
.eh_frame_hdr:0000000000005AFB _eh_frame_hdr   ends
.eh_frame_hdr:0000000000005AFB
LOAD:0000000000005AFC ; ===========================================================================
LOAD:0000000000005AFC
LOAD:0000000000005AFC ; Segment type: Pure code
LOAD:0000000000005AFC ; Segment permissions: Read/Execute
LOAD:0000000000005AFC LOAD            segment byte public 'CODE' use64
LOAD:0000000000005AFC                 assume cs:LOAD
LOAD:0000000000005AFC                 ;org 5AFCh
LOAD:0000000000005AFC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000005AFC                 align 20h
LOAD:0000000000005AFC LOAD            ends
LOAD:0000000000005AFC
.eh_frame:0000000000005B00 ; ===========================================================================
.eh_frame:0000000000005B00
.eh_frame:0000000000005B00 ; Segment type: Pure data
.eh_frame:0000000000005B00 ; Segment permissions: Read
.eh_frame:0000000000005B00 _eh_frame       segment qword public 'CONST' use64
.eh_frame:0000000000005B00                 assume cs:_eh_frame
.eh_frame:0000000000005B00                 ;org 5B00h
.eh_frame:0000000000005B00                 db  14h
.eh_frame:0000000000005B01                 db    0
.eh_frame:0000000000005B02                 db    0
.eh_frame:0000000000005B03                 db    0
.eh_frame:0000000000005B04                 db    0
.eh_frame:0000000000005B05                 db    0
.eh_frame:0000000000005B06                 db    0
.eh_frame:0000000000005B07                 db    0
.eh_frame:0000000000005B08                 db    1
.eh_frame:0000000000005B09                 db  7Ah ; z
.eh_frame:0000000000005B0A                 db  52h ; R
.eh_frame:0000000000005B0B                 db    0
.eh_frame:0000000000005B0C                 db    1
.eh_frame:0000000000005B0D                 db  78h ; x
.eh_frame:0000000000005B0E                 db  10h
.eh_frame:0000000000005B0F                 db    1
.eh_frame:0000000000005B10                 db  1Bh
.eh_frame:0000000000005B11                 db  0Ch
.eh_frame:0000000000005B12                 db    7
.eh_frame:0000000000005B13                 db    8
.eh_frame:0000000000005B14                 db  90h
.eh_frame:0000000000005B15                 db    1
.eh_frame:0000000000005B16                 db    7
.eh_frame:0000000000005B17                 db  10h
.eh_frame:0000000000005B18                 db  14h
.eh_frame:0000000000005B19                 db    0
.eh_frame:0000000000005B1A                 db    0
.eh_frame:0000000000005B1B                 db    0
.eh_frame:0000000000005B1C                 db  1Ch
.eh_frame:0000000000005B1D                 db    0
.eh_frame:0000000000005B1E                 db    0
.eh_frame:0000000000005B1F                 db    0
.eh_frame:0000000000005B20                 db 0C0h
.eh_frame:0000000000005B21                 db 0BCh
.eh_frame:0000000000005B22                 db 0FFh
.eh_frame:0000000000005B23                 db 0FFh
.eh_frame:0000000000005B24                 db  2Bh ; +
.eh_frame:0000000000005B25                 db    0
.eh_frame:0000000000005B26                 db    0
.eh_frame:0000000000005B27                 db    0
.eh_frame:0000000000005B28                 db    0
.eh_frame:0000000000005B29                 db    0
.eh_frame:0000000000005B2A                 db    0
.eh_frame:0000000000005B2B                 db    0
.eh_frame:0000000000005B2C                 db    0
.eh_frame:0000000000005B2D                 db    0
.eh_frame:0000000000005B2E                 db    0
.eh_frame:0000000000005B2F                 db    0
.eh_frame:0000000000005B30                 db  14h
.eh_frame:0000000000005B31                 db    0
.eh_frame:0000000000005B32                 db    0
.eh_frame:0000000000005B33                 db    0
.eh_frame:0000000000005B34                 db    0
.eh_frame:0000000000005B35                 db    0
.eh_frame:0000000000005B36                 db    0
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db    1
.eh_frame:0000000000005B39                 db  7Ah ; z
.eh_frame:0000000000005B3A                 db  52h ; R
.eh_frame:0000000000005B3B                 db    0
.eh_frame:0000000000005B3C                 db    1
.eh_frame:0000000000005B3D                 db  78h ; x
.eh_frame:0000000000005B3E                 db  10h
.eh_frame:0000000000005B3F                 db    1
.eh_frame:0000000000005B40                 db  1Bh
.eh_frame:0000000000005B41                 db  0Ch
.eh_frame:0000000000005B42                 db    7
.eh_frame:0000000000005B43                 db    8
.eh_frame:0000000000005B44                 db  90h
.eh_frame:0000000000005B45                 db    1
.eh_frame:0000000000005B46                 db    0
.eh_frame:0000000000005B47                 db    0
.eh_frame:0000000000005B48                 db  24h ; $
.eh_frame:0000000000005B49                 db    0
.eh_frame:0000000000005B4A                 db    0
.eh_frame:0000000000005B4B                 db    0
.eh_frame:0000000000005B4C                 db  1Ch
.eh_frame:0000000000005B4D                 db    0
.eh_frame:0000000000005B4E                 db    0
.eh_frame:0000000000005B4F                 db    0
.eh_frame:0000000000005B50                 db  60h ; `
.eh_frame:0000000000005B51                 db 0B8h
.eh_frame:0000000000005B52                 db 0FFh
.eh_frame:0000000000005B53                 db 0FFh
.eh_frame:0000000000005B54                 db  10h
.eh_frame:0000000000005B55                 db    3
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db    0
.eh_frame:0000000000005B59                 db  0Eh
.eh_frame:0000000000005B5A                 db  10h
.eh_frame:0000000000005B5B                 db  46h ; F
.eh_frame:0000000000005B5C                 db  0Eh
.eh_frame:0000000000005B5D                 db  18h
.eh_frame:0000000000005B5E                 db  4Ah ; J
.eh_frame:0000000000005B5F                 db  0Fh
.eh_frame:0000000000005B60                 db  0Bh
.eh_frame:0000000000005B61                 db  77h ; w
.eh_frame:0000000000005B62                 db    8
.eh_frame:0000000000005B63                 db  80h
.eh_frame:0000000000005B64                 db    0
.eh_frame:0000000000005B65                 db  3Fh ; ?
.eh_frame:0000000000005B66                 db  1Ah
.eh_frame:0000000000005B67                 db  3Bh ; ;
.eh_frame:0000000000005B68                 db  2Ah ; *
.eh_frame:0000000000005B69                 db  33h ; 3
.eh_frame:0000000000005B6A                 db  24h ; $
.eh_frame:0000000000005B6B                 db  22h ; "
.eh_frame:0000000000005B6C                 db    0
.eh_frame:0000000000005B6D                 db    0
.eh_frame:0000000000005B6E                 db    0
.eh_frame:0000000000005B6F                 db    0
.eh_frame:0000000000005B70                 db  14h
.eh_frame:0000000000005B71                 db    0
.eh_frame:0000000000005B72                 db    0
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db  44h ; D
.eh_frame:0000000000005B75                 db    0
.eh_frame:0000000000005B76                 db    0
.eh_frame:0000000000005B77                 db    0
.eh_frame:0000000000005B78                 db  48h ; H
.eh_frame:0000000000005B79                 db 0BBh
.eh_frame:0000000000005B7A                 db 0FFh
.eh_frame:0000000000005B7B                 db 0FFh
.eh_frame:0000000000005B7C                 db    8
.eh_frame:0000000000005B7D                 db    0
.eh_frame:0000000000005B7E                 db    0
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db    0
.eh_frame:0000000000005B81                 db    0
.eh_frame:0000000000005B82                 db    0
.eh_frame:0000000000005B83                 db    0
.eh_frame:0000000000005B84                 db    0
.eh_frame:0000000000005B85                 db    0
.eh_frame:0000000000005B86                 db    0
.eh_frame:0000000000005B87                 db    0
.eh_frame:0000000000005B88                 db  10h
.eh_frame:0000000000005B89                 db    0
.eh_frame:0000000000005B8A                 db    0
.eh_frame:0000000000005B8B                 db    0
.eh_frame:0000000000005B8C                 db  5Ch ; \
.eh_frame:0000000000005B8D                 db    0
.eh_frame:0000000000005B8E                 db    0
.eh_frame:0000000000005B8F                 db    0
.eh_frame:0000000000005B90                 db  60h ; `
.eh_frame:0000000000005B91                 db 0BDh
.eh_frame:0000000000005B92                 db 0FFh
.eh_frame:0000000000005B93                 db 0FFh
.eh_frame:0000000000005B94                 db  0Bh
.eh_frame:0000000000005B95                 db    0
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db    0
.eh_frame:0000000000005B99                 db    0
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db  48h ; H
.eh_frame:0000000000005B9D                 db    0
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db  70h ; p
.eh_frame:0000000000005BA1                 db    0
.eh_frame:0000000000005BA2                 db    0
.eh_frame:0000000000005BA3                 db    0
.eh_frame:0000000000005BA4                 db  5Ch ; \
.eh_frame:0000000000005BA5                 db 0BDh
.eh_frame:0000000000005BA6                 db 0FFh
.eh_frame:0000000000005BA7                 db 0FFh
.eh_frame:0000000000005BA8                 db 0EDh
.eh_frame:0000000000005BA9                 db    1
.eh_frame:0000000000005BAA                 db    0
.eh_frame:0000000000005BAB                 db    0
.eh_frame:0000000000005BAC                 db    0
.eh_frame:0000000000005BAD                 db  42h ; B
.eh_frame:0000000000005BAE                 db  0Eh
.eh_frame:0000000000005BAF                 db  10h
.eh_frame:0000000000005BB0                 db  8Fh
.eh_frame:0000000000005BB1                 db    2
.eh_frame:0000000000005BB2                 db  42h ; B
.eh_frame:0000000000005BB3                 db  0Eh
.eh_frame:0000000000005BB4                 db  18h
.eh_frame:0000000000005BB5                 db  8Eh
.eh_frame:0000000000005BB6                 db    3
.eh_frame:0000000000005BB7                 db  44h ; D
.eh_frame:0000000000005BB8                 db  0Eh
.eh_frame:0000000000005BB9                 db  20h
.eh_frame:0000000000005BBA                 db  8Dh
.eh_frame:0000000000005BBB                 db    4
.eh_frame:0000000000005BBC                 db  42h ; B
.eh_frame:0000000000005BBD                 db  0Eh
.eh_frame:0000000000005BBE                 db  28h ; (
.eh_frame:0000000000005BBF                 db  8Ch
.eh_frame:0000000000005BC0                 db    5
.eh_frame:0000000000005BC1                 db  41h ; A
.eh_frame:0000000000005BC2                 db  0Eh
.eh_frame:0000000000005BC3                 db  30h ; 0
.eh_frame:0000000000005BC4                 db  86h
.eh_frame:0000000000005BC5                 db    6
.eh_frame:0000000000005BC6                 db  41h ; A
.eh_frame:0000000000005BC7                 db  0Eh
.eh_frame:0000000000005BC8                 db  38h ; 8
.eh_frame:0000000000005BC9                 db  83h
.eh_frame:0000000000005BCA                 db    7
.eh_frame:0000000000005BCB                 db  47h ; G
.eh_frame:0000000000005BCC                 db  0Eh
.eh_frame:0000000000005BCD                 db  60h ; `
.eh_frame:0000000000005BCE                 db    3
.eh_frame:0000000000005BCF                 db  55h ; U
.eh_frame:0000000000005BD0                 db    1
.eh_frame:0000000000005BD1                 db  0Ah
.eh_frame:0000000000005BD2                 db  0Eh
.eh_frame:0000000000005BD3                 db  38h ; 8
.eh_frame:0000000000005BD4                 db  41h ; A
.eh_frame:0000000000005BD5                 db  0Eh
.eh_frame:0000000000005BD6                 db  30h ; 0
.eh_frame:0000000000005BD7                 db  41h ; A
.eh_frame:0000000000005BD8                 db  0Eh
.eh_frame:0000000000005BD9                 db  28h ; (
.eh_frame:0000000000005BDA                 db  42h ; B
.eh_frame:0000000000005BDB                 db  0Eh
.eh_frame:0000000000005BDC                 db  20h
.eh_frame:0000000000005BDD                 db  42h ; B
.eh_frame:0000000000005BDE                 db  0Eh
.eh_frame:0000000000005BDF                 db  18h
.eh_frame:0000000000005BE0                 db  42h ; B
.eh_frame:0000000000005BE1                 db  0Eh
.eh_frame:0000000000005BE2                 db  10h
.eh_frame:0000000000005BE3                 db  42h ; B
.eh_frame:0000000000005BE4                 db  0Eh
.eh_frame:0000000000005BE5                 db    8
.eh_frame:0000000000005BE6                 db  41h ; A
.eh_frame:0000000000005BE7                 db  0Bh
.eh_frame:0000000000005BE8                 db  28h ; (
.eh_frame:0000000000005BE9                 db    0
.eh_frame:0000000000005BEA                 db    0
.eh_frame:0000000000005BEB                 db    0
.eh_frame:0000000000005BEC                 db 0BCh
.eh_frame:0000000000005BED                 db    0
.eh_frame:0000000000005BEE                 db    0
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db    0
.eh_frame:0000000000005BF1                 db 0BFh
.eh_frame:0000000000005BF2                 db 0FFh
.eh_frame:0000000000005BF3                 db 0FFh
.eh_frame:0000000000005BF4                 db  4Ah ; J
.eh_frame:0000000000005BF5                 db    3
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db    0
.eh_frame:0000000000005BF9                 db  42h ; B
.eh_frame:0000000000005BFA                 db  0Eh
.eh_frame:0000000000005BFB                 db  10h
.eh_frame:0000000000005BFC                 db  8Dh
.eh_frame:0000000000005BFD                 db    2
.eh_frame:0000000000005BFE                 db  42h ; B
.eh_frame:0000000000005BFF                 db  0Eh
.eh_frame:0000000000005C00                 db  18h
.eh_frame:0000000000005C01                 db  8Ch
.eh_frame:0000000000005C02                 db    3
.eh_frame:0000000000005C03                 db  46h ; F
.eh_frame:0000000000005C04                 db  0Eh
.eh_frame:0000000000005C05                 db  20h
.eh_frame:0000000000005C06                 db  86h
.eh_frame:0000000000005C07                 db    4
.eh_frame:0000000000005C08                 db  41h ; A
.eh_frame:0000000000005C09                 db  0Eh
.eh_frame:0000000000005C0A                 db  28h ; (
.eh_frame:0000000000005C0B                 db  83h
.eh_frame:0000000000005C0C                 db    5
.eh_frame:0000000000005C0D                 db  49h ; I
.eh_frame:0000000000005C0E                 db  0Eh
.eh_frame:0000000000005C0F                 db 0B0h
.eh_frame:0000000000005C10                 db    1
.eh_frame:0000000000005C11                 db    0
.eh_frame:0000000000005C12                 db    0
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db  38h ; 8
.eh_frame:0000000000005C15                 db    0
.eh_frame:0000000000005C16                 db    0
.eh_frame:0000000000005C17                 db    0
.eh_frame:0000000000005C18                 db 0E8h
.eh_frame:0000000000005C19                 db    0
.eh_frame:0000000000005C1A                 db    0
.eh_frame:0000000000005C1B                 db    0
.eh_frame:0000000000005C1C                 db 0B4h
.eh_frame:0000000000005C1D                 db 0BAh
.eh_frame:0000000000005C1E                 db 0FFh
.eh_frame:0000000000005C1F                 db 0FFh
.eh_frame:0000000000005C20                 db    7
.eh_frame:0000000000005C21                 db    1
.eh_frame:0000000000005C22                 db    0
.eh_frame:0000000000005C23                 db    0
.eh_frame:0000000000005C24                 db    0
.eh_frame:0000000000005C25                 db  41h ; A
.eh_frame:0000000000005C26                 db  0Eh
.eh_frame:0000000000005C27                 db  10h
.eh_frame:0000000000005C28                 db  86h
.eh_frame:0000000000005C29                 db    2
.eh_frame:0000000000005C2A                 db  41h ; A
.eh_frame:0000000000005C2B                 db  0Eh
.eh_frame:0000000000005C2C                 db  18h
.eh_frame:0000000000005C2D                 db  83h
.eh_frame:0000000000005C2E                 db    3
.eh_frame:0000000000005C2F                 db  49h ; I
.eh_frame:0000000000005C30                 db  0Eh
.eh_frame:0000000000005C31                 db  20h
.eh_frame:0000000000005C32                 db    2
.eh_frame:0000000000005C33                 db  4Dh ; M
.eh_frame:0000000000005C34                 db  0Eh
.eh_frame:0000000000005C35                 db  28h ; (
.eh_frame:0000000000005C36                 db  58h ; X
.eh_frame:0000000000005C37                 db  0Eh
.eh_frame:0000000000005C38                 db  30h ; 0
.eh_frame:0000000000005C39                 db  51h ; Q
.eh_frame:0000000000005C3A                 db  0Eh
.eh_frame:0000000000005C3B                 db  38h ; 8
.eh_frame:0000000000005C3C                 db  48h ; H
.eh_frame:0000000000005C3D                 db  0Eh
.eh_frame:0000000000005C3E                 db  40h ; @
.eh_frame:0000000000005C3F                 db  52h ; R
.eh_frame:0000000000005C40                 db  0Eh
.eh_frame:0000000000005C41                 db  20h
.eh_frame:0000000000005C42                 db  59h ; Y
.eh_frame:0000000000005C43                 db  0Ah
.eh_frame:0000000000005C44                 db  0Eh
.eh_frame:0000000000005C45                 db  18h
.eh_frame:0000000000005C46                 db  43h ; C
.eh_frame:0000000000005C47                 db  0Eh
.eh_frame:0000000000005C48                 db  10h
.eh_frame:0000000000005C49                 db  41h ; A
.eh_frame:0000000000005C4A                 db  0Eh
.eh_frame:0000000000005C4B                 db    8
.eh_frame:0000000000005C4C                 db  41h ; A
.eh_frame:0000000000005C4D                 db  0Bh
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db  10h
.eh_frame:0000000000005C51                 db    0
.eh_frame:0000000000005C52                 db    0
.eh_frame:0000000000005C53                 db    0
.eh_frame:0000000000005C54                 db  24h ; $
.eh_frame:0000000000005C55                 db    1
.eh_frame:0000000000005C56                 db    0
.eh_frame:0000000000005C57                 db    0
.eh_frame:0000000000005C58                 db 0E8h
.eh_frame:0000000000005C59                 db 0C1h
.eh_frame:0000000000005C5A                 db 0FFh
.eh_frame:0000000000005C5B                 db 0FFh
.eh_frame:0000000000005C5C                 db    8
.eh_frame:0000000000005C5D                 db    0
.eh_frame:0000000000005C5E                 db    0
.eh_frame:0000000000005C5F                 db    0
.eh_frame:0000000000005C60                 db    0
.eh_frame:0000000000005C61                 db    0
.eh_frame:0000000000005C62                 db    0
.eh_frame:0000000000005C63                 db    0
.eh_frame:0000000000005C64                 db  10h
.eh_frame:0000000000005C65                 db    0
.eh_frame:0000000000005C66                 db    0
.eh_frame:0000000000005C67                 db    0
.eh_frame:0000000000005C68                 db  38h ; 8
.eh_frame:0000000000005C69                 db    1
.eh_frame:0000000000005C6A                 db    0
.eh_frame:0000000000005C6B                 db    0
.eh_frame:0000000000005C6C                 db 0E4h
.eh_frame:0000000000005C6D                 db 0C1h
.eh_frame:0000000000005C6E                 db 0FFh
.eh_frame:0000000000005C6F                 db 0FFh
.eh_frame:0000000000005C70                 db    8
.eh_frame:0000000000005C71                 db    0
.eh_frame:0000000000005C72                 db    0
.eh_frame:0000000000005C73                 db    0
.eh_frame:0000000000005C74                 db    0
.eh_frame:0000000000005C75                 db    0
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db  2Ch ; ,
.eh_frame:0000000000005C79                 db    0
.eh_frame:0000000000005C7A                 db    0
.eh_frame:0000000000005C7B                 db    0
.eh_frame:0000000000005C7C                 db  4Ch ; L
.eh_frame:0000000000005C7D                 db    1
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db 0E0h
.eh_frame:0000000000005C81                 db 0C1h
.eh_frame:0000000000005C82                 db 0FFh
.eh_frame:0000000000005C83                 db 0FFh
.eh_frame:0000000000005C84                 db 0A4h
.eh_frame:0000000000005C85                 db    0
.eh_frame:0000000000005C86                 db    0
.eh_frame:0000000000005C87                 db    0
.eh_frame:0000000000005C88                 db    0
.eh_frame:0000000000005C89                 db  41h ; A
.eh_frame:0000000000005C8A                 db  0Eh
.eh_frame:0000000000005C8B                 db  10h
.eh_frame:0000000000005C8C                 db  86h
.eh_frame:0000000000005C8D                 db    2
.eh_frame:0000000000005C8E                 db  41h ; A
.eh_frame:0000000000005C8F                 db  0Eh
.eh_frame:0000000000005C90                 db  18h
.eh_frame:0000000000005C91                 db  83h
.eh_frame:0000000000005C92                 db    3
.eh_frame:0000000000005C93                 db  44h ; D
.eh_frame:0000000000005C94                 db  0Eh
.eh_frame:0000000000005C95                 db  20h
.eh_frame:0000000000005C96                 db  7Ah ; z
.eh_frame:0000000000005C97                 db  0Ah
.eh_frame:0000000000005C98                 db  0Eh
.eh_frame:0000000000005C99                 db  18h
.eh_frame:0000000000005C9A                 db  41h ; A
.eh_frame:0000000000005C9B                 db  0Eh
.eh_frame:0000000000005C9C                 db  10h
.eh_frame:0000000000005C9D                 db  41h ; A
.eh_frame:0000000000005C9E                 db  0Eh
.eh_frame:0000000000005C9F                 db    8
.eh_frame:0000000000005CA0                 db  41h ; A
.eh_frame:0000000000005CA1                 db  0Bh
.eh_frame:0000000000005CA2                 db    0
.eh_frame:0000000000005CA3                 db    0
.eh_frame:0000000000005CA4                 db    0
.eh_frame:0000000000005CA5                 db    0
.eh_frame:0000000000005CA6                 db    0
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db  38h ; 8
.eh_frame:0000000000005CA9                 db    0
.eh_frame:0000000000005CAA                 db    0
.eh_frame:0000000000005CAB                 db    0
.eh_frame:0000000000005CAC                 db  7Ch ; |
.eh_frame:0000000000005CAD                 db    1
.eh_frame:0000000000005CAE                 db    0
.eh_frame:0000000000005CAF                 db    0
.eh_frame:0000000000005CB0                 db  60h ; `
.eh_frame:0000000000005CB1                 db 0C2h
.eh_frame:0000000000005CB2                 db 0FFh
.eh_frame:0000000000005CB3                 db 0FFh
.eh_frame:0000000000005CB4                 db  3Fh ; ?
.eh_frame:0000000000005CB5                 db    1
.eh_frame:0000000000005CB6                 db    0
.eh_frame:0000000000005CB7                 db    0
.eh_frame:0000000000005CB8                 db    0
.eh_frame:0000000000005CB9                 db  42h ; B
.eh_frame:0000000000005CBA                 db  0Eh
.eh_frame:0000000000005CBB                 db  10h
.eh_frame:0000000000005CBC                 db  8Dh
.eh_frame:0000000000005CBD                 db    2
.eh_frame:0000000000005CBE                 db  42h ; B
.eh_frame:0000000000005CBF                 db  0Eh
.eh_frame:0000000000005CC0                 db  18h
.eh_frame:0000000000005CC1                 db  8Ch
.eh_frame:0000000000005CC2                 db    3
.eh_frame:0000000000005CC3                 db  44h ; D
.eh_frame:0000000000005CC4                 db  0Eh
.eh_frame:0000000000005CC5                 db  20h
.eh_frame:0000000000005CC6                 db  86h
.eh_frame:0000000000005CC7                 db    4
.eh_frame:0000000000005CC8                 db  41h ; A
.eh_frame:0000000000005CC9                 db  0Eh
.eh_frame:0000000000005CCA                 db  28h ; (
.eh_frame:0000000000005CCB                 db  83h
.eh_frame:0000000000005CCC                 db    5
.eh_frame:0000000000005CCD                 db  4Dh ; M
.eh_frame:0000000000005CCE                 db  0Eh
.eh_frame:0000000000005CCF                 db  90h
.eh_frame:0000000000005CD0                 db    2
.eh_frame:0000000000005CD1                 db    2
.eh_frame:0000000000005CD2                 db  8Eh
.eh_frame:0000000000005CD3                 db  0Ah
.eh_frame:0000000000005CD4                 db  0Eh
.eh_frame:0000000000005CD5                 db  28h ; (
.eh_frame:0000000000005CD6                 db  41h ; A
.eh_frame:0000000000005CD7                 db  0Eh
.eh_frame:0000000000005CD8                 db  20h
.eh_frame:0000000000005CD9                 db  41h ; A
.eh_frame:0000000000005CDA                 db  0Eh
.eh_frame:0000000000005CDB                 db  18h
.eh_frame:0000000000005CDC                 db  42h ; B
.eh_frame:0000000000005CDD                 db  0Eh
.eh_frame:0000000000005CDE                 db  10h
.eh_frame:0000000000005CDF                 db  42h ; B
.eh_frame:0000000000005CE0                 db  0Eh
.eh_frame:0000000000005CE1                 db    8
.eh_frame:0000000000005CE2                 db  46h ; F
.eh_frame:0000000000005CE3                 db  0Bh
.eh_frame:0000000000005CE4                 db  48h ; H
.eh_frame:0000000000005CE5                 db    0
.eh_frame:0000000000005CE6                 db    0
.eh_frame:0000000000005CE7                 db    0
.eh_frame:0000000000005CE8                 db 0B8h
.eh_frame:0000000000005CE9                 db    1
.eh_frame:0000000000005CEA                 db    0
.eh_frame:0000000000005CEB                 db    0
.eh_frame:0000000000005CEC                 db  64h ; d
.eh_frame:0000000000005CED                 db 0C3h
.eh_frame:0000000000005CEE                 db 0FFh
.eh_frame:0000000000005CEF                 db 0FFh
.eh_frame:0000000000005CF0                 db  3Bh ; ;
.eh_frame:0000000000005CF1                 db    1
.eh_frame:0000000000005CF2                 db    0
.eh_frame:0000000000005CF3                 db    0
.eh_frame:0000000000005CF4                 db    0
.eh_frame:0000000000005CF5                 db  42h ; B
.eh_frame:0000000000005CF6                 db  0Eh
.eh_frame:0000000000005CF7                 db  10h
.eh_frame:0000000000005CF8                 db  8Eh
.eh_frame:0000000000005CF9                 db    2
.eh_frame:0000000000005CFA                 db  42h ; B
.eh_frame:0000000000005CFB                 db  0Eh
.eh_frame:0000000000005CFC                 db  18h
.eh_frame:0000000000005CFD                 db  8Dh
.eh_frame:0000000000005CFE                 db    3
.eh_frame:0000000000005CFF                 db  45h ; E
.eh_frame:0000000000005D00                 db  0Eh
.eh_frame:0000000000005D01                 db  20h
.eh_frame:0000000000005D02                 db  8Ch
.eh_frame:0000000000005D03                 db    4
.eh_frame:0000000000005D04                 db  41h ; A
.eh_frame:0000000000005D05                 db  0Eh
.eh_frame:0000000000005D06                 db  28h ; (
.eh_frame:0000000000005D07                 db  86h
.eh_frame:0000000000005D08                 db    5
.eh_frame:0000000000005D09                 db  44h ; D
.eh_frame:0000000000005D0A                 db  0Eh
.eh_frame:0000000000005D0B                 db  30h ; 0
.eh_frame:0000000000005D0C                 db  83h
.eh_frame:0000000000005D0D                 db    6
.eh_frame:0000000000005D0E                 db  4Ah ; J
.eh_frame:0000000000005D0F                 db  0Eh
.eh_frame:0000000000005D10                 db  80h
.eh_frame:0000000000005D11                 db    2
.eh_frame:0000000000005D12                 db    3
.eh_frame:0000000000005D13                 db  0Dh
.eh_frame:0000000000005D14                 db    1
.eh_frame:0000000000005D15                 db  0Ah
.eh_frame:0000000000005D16                 db  0Eh
.eh_frame:0000000000005D17                 db  30h ; 0
.eh_frame:0000000000005D18                 db  41h ; A
.eh_frame:0000000000005D19                 db  0Eh
.eh_frame:0000000000005D1A                 db  28h ; (
.eh_frame:0000000000005D1B                 db  41h ; A
.eh_frame:0000000000005D1C                 db  0Eh
.eh_frame:0000000000005D1D                 db  20h
.eh_frame:0000000000005D1E                 db  42h ; B
.eh_frame:0000000000005D1F                 db  0Eh
.eh_frame:0000000000005D20                 db  18h
.eh_frame:0000000000005D21                 db  42h ; B
.eh_frame:0000000000005D22                 db  0Eh
.eh_frame:0000000000005D23                 db  10h
.eh_frame:0000000000005D24                 db  42h ; B
.eh_frame:0000000000005D25                 db  0Eh
.eh_frame:0000000000005D26                 db    8
.eh_frame:0000000000005D27                 db  43h ; C
.eh_frame:0000000000005D28                 db  0Bh
.eh_frame:0000000000005D29                 db    0
.eh_frame:0000000000005D2A                 db    0
.eh_frame:0000000000005D2B                 db    0
.eh_frame:0000000000005D2C                 db    0
.eh_frame:0000000000005D2D                 db    0
.eh_frame:0000000000005D2E                 db    0
.eh_frame:0000000000005D2F                 db    0
.eh_frame:0000000000005D30                 db  1Ch
.eh_frame:0000000000005D31                 db    0
.eh_frame:0000000000005D32                 db    0
.eh_frame:0000000000005D33                 db    0
.eh_frame:0000000000005D34                 db    4
.eh_frame:0000000000005D35                 db    2
.eh_frame:0000000000005D36                 db    0
.eh_frame:0000000000005D37                 db    0
.eh_frame:0000000000005D38                 db  58h ; X
.eh_frame:0000000000005D39                 db 0C4h
.eh_frame:0000000000005D3A                 db 0FFh
.eh_frame:0000000000005D3B                 db 0FFh
.eh_frame:0000000000005D3C                 db  9Fh
.eh_frame:0000000000005D3D                 db    0
.eh_frame:0000000000005D3E                 db    0
.eh_frame:0000000000005D3F                 db    0
.eh_frame:0000000000005D40                 db    0
.eh_frame:0000000000005D41                 db  44h ; D
.eh_frame:0000000000005D42                 db  0Eh
.eh_frame:0000000000005D43                 db  10h
.eh_frame:0000000000005D44                 db  83h
.eh_frame:0000000000005D45                 db    2
.eh_frame:0000000000005D46                 db    2
.eh_frame:0000000000005D47                 db  78h ; x
.eh_frame:0000000000005D48                 db  0Ah
.eh_frame:0000000000005D49                 db  0Eh
.eh_frame:0000000000005D4A                 db    8
.eh_frame:0000000000005D4B                 db  41h ; A
.eh_frame:0000000000005D4C                 db  0Bh
.eh_frame:0000000000005D4D                 db    0
.eh_frame:0000000000005D4E                 db    0
.eh_frame:0000000000005D4F                 db    0
.eh_frame:0000000000005D50                 db  40h ; @
.eh_frame:0000000000005D51                 db    0
.eh_frame:0000000000005D52                 db    0
.eh_frame:0000000000005D53                 db    0
.eh_frame:0000000000005D54                 db  24h ; $
.eh_frame:0000000000005D55                 db    2
.eh_frame:0000000000005D56                 db    0
.eh_frame:0000000000005D57                 db    0
.eh_frame:0000000000005D58                 db 0D8h
.eh_frame:0000000000005D59                 db 0C4h
.eh_frame:0000000000005D5A                 db 0FFh
.eh_frame:0000000000005D5B                 db 0FFh
.eh_frame:0000000000005D5C                 db 0E7h
.eh_frame:0000000000005D5D                 db    0
.eh_frame:0000000000005D5E                 db    0
.eh_frame:0000000000005D5F                 db    0
.eh_frame:0000000000005D60                 db    0
.eh_frame:0000000000005D61                 db  41h ; A
.eh_frame:0000000000005D62                 db  0Eh
.eh_frame:0000000000005D63                 db  10h
.eh_frame:0000000000005D64                 db  86h
.eh_frame:0000000000005D65                 db    2
.eh_frame:0000000000005D66                 db  41h ; A
.eh_frame:0000000000005D67                 db  0Eh
.eh_frame:0000000000005D68                 db  18h
.eh_frame:0000000000005D69                 db  83h
.eh_frame:0000000000005D6A                 db    3
.eh_frame:0000000000005D6B                 db  49h ; I
.eh_frame:0000000000005D6C                 db  0Eh
.eh_frame:0000000000005D6D                 db  20h
.eh_frame:0000000000005D6E                 db  6Eh ; n
.eh_frame:0000000000005D6F                 db  0Ah
.eh_frame:0000000000005D70                 db  0Eh
.eh_frame:0000000000005D71                 db  18h
.eh_frame:0000000000005D72                 db  41h ; A
.eh_frame:0000000000005D73                 db  0Eh
.eh_frame:0000000000005D74                 db  10h
.eh_frame:0000000000005D75                 db  41h ; A
.eh_frame:0000000000005D76                 db  0Eh
.eh_frame:0000000000005D77                 db    8
.eh_frame:0000000000005D78                 db  45h ; E
.eh_frame:0000000000005D79                 db  0Bh
.eh_frame:0000000000005D7A                 db    2
.eh_frame:0000000000005D7B                 db  4Ah ; J
.eh_frame:0000000000005D7C                 db  0Ah
.eh_frame:0000000000005D7D                 db  0Eh
.eh_frame:0000000000005D7E                 db  18h
.eh_frame:0000000000005D7F                 db  41h ; A
.eh_frame:0000000000005D80                 db  0Eh
.eh_frame:0000000000005D81                 db  10h
.eh_frame:0000000000005D82                 db  41h ; A
.eh_frame:0000000000005D83                 db  0Eh
.eh_frame:0000000000005D84                 db    8
.eh_frame:0000000000005D85                 db  44h ; D
.eh_frame:0000000000005D86                 db  0Bh
.eh_frame:0000000000005D87                 db    2
.eh_frame:0000000000005D88                 db  54h ; T
.eh_frame:0000000000005D89                 db  0Eh
.eh_frame:0000000000005D8A                 db  18h
.eh_frame:0000000000005D8B                 db  41h ; A
.eh_frame:0000000000005D8C                 db  0Eh
.eh_frame:0000000000005D8D                 db  10h
.eh_frame:0000000000005D8E                 db  41h ; A
.eh_frame:0000000000005D8F                 db  0Eh
.eh_frame:0000000000005D90                 db    8
.eh_frame:0000000000005D91                 db    0
.eh_frame:0000000000005D92                 db    0
.eh_frame:0000000000005D93                 db    0
.eh_frame:0000000000005D94                 db  74h ; t
.eh_frame:0000000000005D95                 db    0
.eh_frame:0000000000005D96                 db    0
.eh_frame:0000000000005D97                 db    0
.eh_frame:0000000000005D98                 db  68h ; h
.eh_frame:0000000000005D99                 db    2
.eh_frame:0000000000005D9A                 db    0
.eh_frame:0000000000005D9B                 db    0
.eh_frame:0000000000005D9C                 db  84h
.eh_frame:0000000000005D9D                 db 0C5h
.eh_frame:0000000000005D9E                 db 0FFh
.eh_frame:0000000000005D9F                 db 0FFh
.eh_frame:0000000000005DA0                 db  34h ; 4
.eh_frame:0000000000005DA1                 db  12h
.eh_frame:0000000000005DA2                 db    0
.eh_frame:0000000000005DA3                 db    0
.eh_frame:0000000000005DA4                 db    0
.eh_frame:0000000000005DA5                 db  42h ; B
.eh_frame:0000000000005DA6                 db  0Eh
.eh_frame:0000000000005DA7                 db  10h
.eh_frame:0000000000005DA8                 db  8Fh
.eh_frame:0000000000005DA9                 db    2
.eh_frame:0000000000005DAA                 db  42h ; B
.eh_frame:0000000000005DAB                 db  0Eh
.eh_frame:0000000000005DAC                 db  18h
.eh_frame:0000000000005DAD                 db  8Eh
.eh_frame:0000000000005DAE                 db    3
.eh_frame:0000000000005DAF                 db  45h ; E
.eh_frame:0000000000005DB0                 db  0Eh
.eh_frame:0000000000005DB1                 db  20h
.eh_frame:0000000000005DB2                 db  8Dh
.eh_frame:0000000000005DB3                 db    4
.eh_frame:0000000000005DB4                 db  42h ; B
.eh_frame:0000000000005DB5                 db  0Eh
.eh_frame:0000000000005DB6                 db  28h ; (
.eh_frame:0000000000005DB7                 db  8Ch
.eh_frame:0000000000005DB8                 db    5
.eh_frame:0000000000005DB9                 db  44h ; D
.eh_frame:0000000000005DBA                 db  0Eh
.eh_frame:0000000000005DBB                 db  30h ; 0
.eh_frame:0000000000005DBC                 db  86h
.eh_frame:0000000000005DBD                 db    6
.eh_frame:0000000000005DBE                 db  41h ; A
.eh_frame:0000000000005DBF                 db  0Eh
.eh_frame:0000000000005DC0                 db  38h ; 8
.eh_frame:0000000000005DC1                 db  83h
.eh_frame:0000000000005DC2                 db    7
.eh_frame:0000000000005DC3                 db  53h ; S
.eh_frame:0000000000005DC4                 db  0Eh
.eh_frame:0000000000005DC5                 db 0F0h
.eh_frame:0000000000005DC6                 db    1
.eh_frame:0000000000005DC7                 db    3
.eh_frame:0000000000005DC8                 db  81h
.eh_frame:0000000000005DC9                 db  0Bh
.eh_frame:0000000000005DCA                 db  0Eh
.eh_frame:0000000000005DCB                 db 0F8h
.eh_frame:0000000000005DCC                 db    1
.eh_frame:0000000000005DCD                 db  4Ah ; J
.eh_frame:0000000000005DCE                 db  0Eh
.eh_frame:0000000000005DCF                 db  80h
.eh_frame:0000000000005DD0                 db    2
.eh_frame:0000000000005DD1                 db  44h ; D
.eh_frame:0000000000005DD2                 db  0Eh
.eh_frame:0000000000005DD3                 db  88h
.eh_frame:0000000000005DD4                 db    2
.eh_frame:0000000000005DD5                 db  45h ; E
.eh_frame:0000000000005DD6                 db  0Eh
.eh_frame:0000000000005DD7                 db  90h
.eh_frame:0000000000005DD8                 db    2
.eh_frame:0000000000005DD9                 db  5Fh ; _
.eh_frame:0000000000005DDA                 db  0Eh
.eh_frame:0000000000005DDB                 db 0F0h
.eh_frame:0000000000005DDC                 db    1
.eh_frame:0000000000005DDD                 db  64h ; d
.eh_frame:0000000000005DDE                 db  0Ah
.eh_frame:0000000000005DDF                 db  0Eh
.eh_frame:0000000000005DE0                 db  38h ; 8
.eh_frame:0000000000005DE1                 db  41h ; A
.eh_frame:0000000000005DE2                 db  0Eh
.eh_frame:0000000000005DE3                 db  30h ; 0
.eh_frame:0000000000005DE4                 db  41h ; A
.eh_frame:0000000000005DE5                 db  0Eh
.eh_frame:0000000000005DE6                 db  28h ; (
.eh_frame:0000000000005DE7                 db  42h ; B
.eh_frame:0000000000005DE8                 db  0Eh
.eh_frame:0000000000005DE9                 db  20h
.eh_frame:0000000000005DEA                 db  42h ; B
.eh_frame:0000000000005DEB                 db  0Eh
.eh_frame:0000000000005DEC                 db  18h
.eh_frame:0000000000005DED                 db  42h ; B
.eh_frame:0000000000005DEE                 db  0Eh
.eh_frame:0000000000005DEF                 db  10h
.eh_frame:0000000000005DF0                 db  42h ; B
.eh_frame:0000000000005DF1                 db  0Eh
.eh_frame:0000000000005DF2                 db    8
.eh_frame:0000000000005DF3                 db  44h ; D
.eh_frame:0000000000005DF4                 db  0Bh
.eh_frame:0000000000005DF5                 db    3
.eh_frame:0000000000005DF6                 db  99h
.eh_frame:0000000000005DF7                 db    5
.eh_frame:0000000000005DF8                 db  0Eh
.eh_frame:0000000000005DF9                 db 0F8h
.eh_frame:0000000000005DFA                 db    1
.eh_frame:0000000000005DFB                 db  4Dh ; M
.eh_frame:0000000000005DFC                 db  0Eh
.eh_frame:0000000000005DFD                 db  80h
.eh_frame:0000000000005DFE                 db    2
.eh_frame:0000000000005DFF                 db  44h ; D
.eh_frame:0000000000005E00                 db  0Eh
.eh_frame:0000000000005E01                 db  88h
.eh_frame:0000000000005E02                 db    2
.eh_frame:0000000000005E03                 db  47h ; G
.eh_frame:0000000000005E04                 db  0Eh
.eh_frame:0000000000005E05                 db  90h
.eh_frame:0000000000005E06                 db    2
.eh_frame:0000000000005E07                 db  5Bh ; [
.eh_frame:0000000000005E08                 db  0Eh
.eh_frame:0000000000005E09                 db 0F0h
.eh_frame:0000000000005E0A                 db    1
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db  68h ; h
.eh_frame:0000000000005E0D                 db    0
.eh_frame:0000000000005E0E                 db    0
.eh_frame:0000000000005E0F                 db    0
.eh_frame:0000000000005E10                 db 0E0h
.eh_frame:0000000000005E11                 db    2
.eh_frame:0000000000005E12                 db    0
.eh_frame:0000000000005E13                 db    0
.eh_frame:0000000000005E14                 db  4Ch ; L
.eh_frame:0000000000005E15                 db 0D7h
.eh_frame:0000000000005E16                 db 0FFh
.eh_frame:0000000000005E17                 db 0FFh
.eh_frame:0000000000005E18                 db 0ABh
.eh_frame:0000000000005E19                 db    1
.eh_frame:0000000000005E1A                 db    0
.eh_frame:0000000000005E1B                 db    0
.eh_frame:0000000000005E1C                 db    0
.eh_frame:0000000000005E1D                 db  42h ; B
.eh_frame:0000000000005E1E                 db  0Eh
.eh_frame:0000000000005E1F                 db  10h
.eh_frame:0000000000005E20                 db  8Fh
.eh_frame:0000000000005E21                 db    2
.eh_frame:0000000000005E22                 db  42h ; B
.eh_frame:0000000000005E23                 db  0Eh
.eh_frame:0000000000005E24                 db  18h
.eh_frame:0000000000005E25                 db  8Eh
.eh_frame:0000000000005E26                 db    3
.eh_frame:0000000000005E27                 db  45h ; E
.eh_frame:0000000000005E28                 db  0Eh
.eh_frame:0000000000005E29                 db  20h
.eh_frame:0000000000005E2A                 db  8Dh
.eh_frame:0000000000005E2B                 db    4
.eh_frame:0000000000005E2C                 db  42h ; B
.eh_frame:0000000000005E2D                 db  0Eh
.eh_frame:0000000000005E2E                 db  28h ; (
.eh_frame:0000000000005E2F                 db  8Ch
.eh_frame:0000000000005E30                 db    5
.eh_frame:0000000000005E31                 db  44h ; D
.eh_frame:0000000000005E32                 db  0Eh
.eh_frame:0000000000005E33                 db  30h ; 0
.eh_frame:0000000000005E34                 db  86h
.eh_frame:0000000000005E35                 db    6
.eh_frame:0000000000005E36                 db  41h ; A
.eh_frame:0000000000005E37                 db  0Eh
.eh_frame:0000000000005E38                 db  38h ; 8
.eh_frame:0000000000005E39                 db  83h
.eh_frame:0000000000005E3A                 db    7
.eh_frame:0000000000005E3B                 db  47h ; G
.eh_frame:0000000000005E3C                 db  0Eh
.eh_frame:0000000000005E3D                 db  60h ; `
.eh_frame:0000000000005E3E                 db    2
.eh_frame:0000000000005E3F                 db  99h
.eh_frame:0000000000005E40                 db  0Eh
.eh_frame:0000000000005E41                 db  68h ; h
.eh_frame:0000000000005E42                 db  5Fh ; _
.eh_frame:0000000000005E43                 db  0Eh
.eh_frame:0000000000005E44                 db  70h ; p
.eh_frame:0000000000005E45                 db  46h ; F
.eh_frame:0000000000005E46                 db  0Eh
.eh_frame:0000000000005E47                 db  78h ; x
.eh_frame:0000000000005E48                 db  42h ; B
.eh_frame:0000000000005E49                 db  0Eh
.eh_frame:0000000000005E4A                 db  80h
.eh_frame:0000000000005E4B                 db    1
.eh_frame:0000000000005E4C                 db  59h ; Y
.eh_frame:0000000000005E4D                 db  0Eh
.eh_frame:0000000000005E4E                 db  60h ; `
.eh_frame:0000000000005E4F                 db    2
.eh_frame:0000000000005E50                 db  40h ; @
.eh_frame:0000000000005E51                 db  0Eh
.eh_frame:0000000000005E52                 db  68h ; h
.eh_frame:0000000000005E53                 db  4Bh ; K
.eh_frame:0000000000005E54                 db  0Eh
.eh_frame:0000000000005E55                 db  70h ; p
.eh_frame:0000000000005E56                 db  43h ; C
.eh_frame:0000000000005E57                 db  0Eh
.eh_frame:0000000000005E58                 db  78h ; x
.eh_frame:0000000000005E59                 db  45h ; E
.eh_frame:0000000000005E5A                 db  0Eh
.eh_frame:0000000000005E5B                 db  80h
.eh_frame:0000000000005E5C                 db    1
.eh_frame:0000000000005E5D                 db  5Eh ; ^
.eh_frame:0000000000005E5E                 db  0Eh
.eh_frame:0000000000005E5F                 db  60h ; `
.eh_frame:0000000000005E60                 db  4Ch ; L
.eh_frame:0000000000005E61                 db  0Ah
.eh_frame:0000000000005E62                 db  0Eh
.eh_frame:0000000000005E63                 db  38h ; 8
.eh_frame:0000000000005E64                 db  44h ; D
.eh_frame:0000000000005E65                 db  0Eh
.eh_frame:0000000000005E66                 db  30h ; 0
.eh_frame:0000000000005E67                 db  41h ; A
.eh_frame:0000000000005E68                 db  0Eh
.eh_frame:0000000000005E69                 db  28h ; (
.eh_frame:0000000000005E6A                 db  42h ; B
.eh_frame:0000000000005E6B                 db  0Eh
.eh_frame:0000000000005E6C                 db  20h
.eh_frame:0000000000005E6D                 db  42h ; B
.eh_frame:0000000000005E6E                 db  0Eh
.eh_frame:0000000000005E6F                 db  18h
.eh_frame:0000000000005E70                 db  42h ; B
.eh_frame:0000000000005E71                 db  0Eh
.eh_frame:0000000000005E72                 db  10h
.eh_frame:0000000000005E73                 db  42h ; B
.eh_frame:0000000000005E74                 db  0Eh
.eh_frame:0000000000005E75                 db    8
.eh_frame:0000000000005E76                 db  46h ; F
.eh_frame:0000000000005E77                 db  0Bh
.eh_frame:0000000000005E78                 db  28h ; (
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db  4Ch ; L
.eh_frame:0000000000005E7D                 db    3
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db  90h
.eh_frame:0000000000005E81                 db 0D8h
.eh_frame:0000000000005E82                 db 0FFh
.eh_frame:0000000000005E83                 db 0FFh
.eh_frame:0000000000005E84                 db  36h ; 6
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    0
.eh_frame:0000000000005E89                 db  42h ; B
.eh_frame:0000000000005E8A                 db  0Eh
.eh_frame:0000000000005E8B                 db  10h
.eh_frame:0000000000005E8C                 db  8Ch
.eh_frame:0000000000005E8D                 db    2
.eh_frame:0000000000005E8E                 db  41h ; A
.eh_frame:0000000000005E8F                 db  0Eh
.eh_frame:0000000000005E90                 db  18h
.eh_frame:0000000000005E91                 db  86h
.eh_frame:0000000000005E92                 db    3
.eh_frame:0000000000005E93                 db  41h ; A
.eh_frame:0000000000005E94                 db  0Eh
.eh_frame:0000000000005E95                 db  20h
.eh_frame:0000000000005E96                 db  83h
.eh_frame:0000000000005E97                 db    4
.eh_frame:0000000000005E98                 db  6Eh ; n
.eh_frame:0000000000005E99                 db  0Eh
.eh_frame:0000000000005E9A                 db  18h
.eh_frame:0000000000005E9B                 db  41h ; A
.eh_frame:0000000000005E9C                 db  0Eh
.eh_frame:0000000000005E9D                 db  10h
.eh_frame:0000000000005E9E                 db  42h ; B
.eh_frame:0000000000005E9F                 db  0Eh
.eh_frame:0000000000005EA0                 db    8
.eh_frame:0000000000005EA1                 db    0
.eh_frame:0000000000005EA2                 db    0
.eh_frame:0000000000005EA3                 db    0
.eh_frame:0000000000005EA4                 db  10h
.eh_frame:0000000000005EA5                 db    0
.eh_frame:0000000000005EA6                 db    0
.eh_frame:0000000000005EA7                 db    0
.eh_frame:0000000000005EA8                 db  78h ; x
.eh_frame:0000000000005EA9                 db    3
.eh_frame:0000000000005EAA                 db    0
.eh_frame:0000000000005EAB                 db    0
.eh_frame:0000000000005EAC                 db 0A4h
.eh_frame:0000000000005EAD                 db 0D8h
.eh_frame:0000000000005EAE                 db 0FFh
.eh_frame:0000000000005EAF                 db 0FFh
.eh_frame:0000000000005EB0                 db  11h
.eh_frame:0000000000005EB1                 db    0
.eh_frame:0000000000005EB2                 db    0
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db    0
.eh_frame:0000000000005EB5                 db    0
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db  10h
.eh_frame:0000000000005EB9                 db    0
.eh_frame:0000000000005EBA                 db    0
.eh_frame:0000000000005EBB                 db    0
.eh_frame:0000000000005EBC                 db  8Ch
.eh_frame:0000000000005EBD                 db    3
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db 0B0h
.eh_frame:0000000000005EC1                 db 0D8h
.eh_frame:0000000000005EC2                 db 0FFh
.eh_frame:0000000000005EC3                 db 0FFh
.eh_frame:0000000000005EC4                 db  11h
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db    0
.eh_frame:0000000000005EC9                 db    0
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db  10h
.eh_frame:0000000000005ECD                 db    0
.eh_frame:0000000000005ECE                 db    0
.eh_frame:0000000000005ECF                 db    0
.eh_frame:0000000000005ED0                 db 0A0h
.eh_frame:0000000000005ED1                 db    3
.eh_frame:0000000000005ED2                 db    0
.eh_frame:0000000000005ED3                 db    0
.eh_frame:0000000000005ED4                 db 0BCh
.eh_frame:0000000000005ED5                 db 0D8h
.eh_frame:0000000000005ED6                 db 0FFh
.eh_frame:0000000000005ED7                 db 0FFh
.eh_frame:0000000000005ED8                 db  35h ; 5
.eh_frame:0000000000005ED9                 db    0
.eh_frame:0000000000005EDA                 db    0
.eh_frame:0000000000005EDB                 db    0
.eh_frame:0000000000005EDC                 db    0
.eh_frame:0000000000005EDD                 db    0
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db  10h
.eh_frame:0000000000005EE1                 db    0
.eh_frame:0000000000005EE2                 db    0
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db 0B4h
.eh_frame:0000000000005EE5                 db    3
.eh_frame:0000000000005EE6                 db    0
.eh_frame:0000000000005EE7                 db    0
.eh_frame:0000000000005EE8                 db 0E8h
.eh_frame:0000000000005EE9                 db 0D8h
.eh_frame:0000000000005EEA                 db 0FFh
.eh_frame:0000000000005EEB                 db 0FFh
.eh_frame:0000000000005EEC                 db  15h
.eh_frame:0000000000005EED                 db    0
.eh_frame:0000000000005EEE                 db    0
.eh_frame:0000000000005EEF                 db    0
.eh_frame:0000000000005EF0                 db    0
.eh_frame:0000000000005EF1                 db    0
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db  10h
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db 0C8h
.eh_frame:0000000000005EF9                 db    3
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db 0F4h
.eh_frame:0000000000005EFD                 db 0D8h
.eh_frame:0000000000005EFE                 db 0FFh
.eh_frame:0000000000005EFF                 db 0FFh
.eh_frame:0000000000005F00                 db  30h ; 0
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db    0
.eh_frame:0000000000005F05                 db  6Bh ; k
.eh_frame:0000000000005F06                 db  0Eh
.eh_frame:0000000000005F07                 db  10h
.eh_frame:0000000000005F08                 db  50h ; P
.eh_frame:0000000000005F09                 db    0
.eh_frame:0000000000005F0A                 db    0
.eh_frame:0000000000005F0B                 db    0
.eh_frame:0000000000005F0C                 db 0DCh
.eh_frame:0000000000005F0D                 db    3
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db  10h
.eh_frame:0000000000005F11                 db 0D9h
.eh_frame:0000000000005F12                 db 0FFh
.eh_frame:0000000000005F13                 db 0FFh
.eh_frame:0000000000005F14                 db  74h ; t
.eh_frame:0000000000005F15                 db    0
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db    0
.eh_frame:0000000000005F19                 db  42h ; B
.eh_frame:0000000000005F1A                 db  0Eh
.eh_frame:0000000000005F1B                 db  10h
.eh_frame:0000000000005F1C                 db  8Fh
.eh_frame:0000000000005F1D                 db    2
.eh_frame:0000000000005F1E                 db  42h ; B
.eh_frame:0000000000005F1F                 db  0Eh
.eh_frame:0000000000005F20                 db  18h
.eh_frame:0000000000005F21                 db  8Eh
.eh_frame:0000000000005F22                 db    3
.eh_frame:0000000000005F23                 db  49h ; I
.eh_frame:0000000000005F24                 db  0Eh
.eh_frame:0000000000005F25                 db  20h
.eh_frame:0000000000005F26                 db  8Dh
.eh_frame:0000000000005F27                 db    4
.eh_frame:0000000000005F28                 db  42h ; B
.eh_frame:0000000000005F29                 db  0Eh
.eh_frame:0000000000005F2A                 db  28h ; (
.eh_frame:0000000000005F2B                 db  8Ch
.eh_frame:0000000000005F2C                 db    5
.eh_frame:0000000000005F2D                 db  44h ; D
.eh_frame:0000000000005F2E                 db  0Eh
.eh_frame:0000000000005F2F                 db  30h ; 0
.eh_frame:0000000000005F30                 db  86h
.eh_frame:0000000000005F31                 db    6
.eh_frame:0000000000005F32                 db  41h ; A
.eh_frame:0000000000005F33                 db  0Eh
.eh_frame:0000000000005F34                 db  38h ; 8
.eh_frame:0000000000005F35                 db  83h
.eh_frame:0000000000005F36                 db    7
.eh_frame:0000000000005F37                 db  4Dh ; M
.eh_frame:0000000000005F38                 db  0Eh
.eh_frame:0000000000005F39                 db  50h ; P
.eh_frame:0000000000005F3A                 db  5Fh ; _
.eh_frame:0000000000005F3B                 db  0Eh
.eh_frame:0000000000005F3C                 db  58h ; X
.eh_frame:0000000000005F3D                 db  47h ; G
.eh_frame:0000000000005F3E                 db  0Eh
.eh_frame:0000000000005F3F                 db  60h ; `
.eh_frame:0000000000005F40                 db  46h ; F
.eh_frame:0000000000005F41                 db  0Eh
.eh_frame:0000000000005F42                 db  68h ; h
.eh_frame:0000000000005F43                 db  44h ; D
.eh_frame:0000000000005F44                 db  0Eh
.eh_frame:0000000000005F45                 db  70h ; p
.eh_frame:0000000000005F46                 db  58h ; X
.eh_frame:0000000000005F47                 db  0Eh
.eh_frame:0000000000005F48                 db  38h ; 8
.eh_frame:0000000000005F49                 db  41h ; A
.eh_frame:0000000000005F4A                 db  0Eh
.eh_frame:0000000000005F4B                 db  30h ; 0
.eh_frame:0000000000005F4C                 db  41h ; A
.eh_frame:0000000000005F4D                 db  0Eh
.eh_frame:0000000000005F4E                 db  28h ; (
.eh_frame:0000000000005F4F                 db  42h ; B
.eh_frame:0000000000005F50                 db  0Eh
.eh_frame:0000000000005F51                 db  20h
.eh_frame:0000000000005F52                 db  42h ; B
.eh_frame:0000000000005F53                 db  0Eh
.eh_frame:0000000000005F54                 db  18h
.eh_frame:0000000000005F55                 db  42h ; B
.eh_frame:0000000000005F56                 db  0Eh
.eh_frame:0000000000005F57                 db  10h
.eh_frame:0000000000005F58                 db  42h ; B
.eh_frame:0000000000005F59                 db  0Eh
.eh_frame:0000000000005F5A                 db    8
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db  68h ; h
.eh_frame:0000000000005F5D                 db    0
.eh_frame:0000000000005F5E                 db    0
.eh_frame:0000000000005F5F                 db    0
.eh_frame:0000000000005F60                 db  30h ; 0
.eh_frame:0000000000005F61                 db    4
.eh_frame:0000000000005F62                 db    0
.eh_frame:0000000000005F63                 db    0
.eh_frame:0000000000005F64                 db  3Ch ; <
.eh_frame:0000000000005F65                 db 0D9h
.eh_frame:0000000000005F66                 db 0FFh
.eh_frame:0000000000005F67                 db 0FFh
.eh_frame:0000000000005F68                 db 0E3h
.eh_frame:0000000000005F69                 db    0
.eh_frame:0000000000005F6A                 db    0
.eh_frame:0000000000005F6B                 db    0
.eh_frame:0000000000005F6C                 db    0
.eh_frame:0000000000005F6D                 db  42h ; B
.eh_frame:0000000000005F6E                 db  0Eh
.eh_frame:0000000000005F6F                 db  10h
.eh_frame:0000000000005F70                 db  8Fh
.eh_frame:0000000000005F71                 db    2
.eh_frame:0000000000005F72                 db  42h ; B
.eh_frame:0000000000005F73                 db  0Eh
.eh_frame:0000000000005F74                 db  18h
.eh_frame:0000000000005F75                 db  8Eh
.eh_frame:0000000000005F76                 db    3
.eh_frame:0000000000005F77                 db  49h ; I
.eh_frame:0000000000005F78                 db  0Eh
.eh_frame:0000000000005F79                 db  20h
.eh_frame:0000000000005F7A                 db  8Dh
.eh_frame:0000000000005F7B                 db    4
.eh_frame:0000000000005F7C                 db  42h ; B
.eh_frame:0000000000005F7D                 db  0Eh
.eh_frame:0000000000005F7E                 db  28h ; (
.eh_frame:0000000000005F7F                 db  8Ch
.eh_frame:0000000000005F80                 db    5
.eh_frame:0000000000005F81                 db  44h ; D
.eh_frame:0000000000005F82                 db  0Eh
.eh_frame:0000000000005F83                 db  30h ; 0
.eh_frame:0000000000005F84                 db  86h
.eh_frame:0000000000005F85                 db    6
.eh_frame:0000000000005F86                 db  41h ; A
.eh_frame:0000000000005F87                 db  0Eh
.eh_frame:0000000000005F88                 db  38h ; 8
.eh_frame:0000000000005F89                 db  83h
.eh_frame:0000000000005F8A                 db    7
.eh_frame:0000000000005F8B                 db  4Dh ; M
.eh_frame:0000000000005F8C                 db  0Eh
.eh_frame:0000000000005F8D                 db  70h ; p
.eh_frame:0000000000005F8E                 db  65h ; e
.eh_frame:0000000000005F8F                 db  0Eh
.eh_frame:0000000000005F90                 db  78h ; x
.eh_frame:0000000000005F91                 db  4Dh ; M
.eh_frame:0000000000005F92                 db  0Eh
.eh_frame:0000000000005F93                 db  80h
.eh_frame:0000000000005F94                 db    1
.eh_frame:0000000000005F95                 db  46h ; F
.eh_frame:0000000000005F96                 db  0Eh
.eh_frame:0000000000005F97                 db  88h
.eh_frame:0000000000005F98                 db    1
.eh_frame:0000000000005F99                 db  42h ; B
.eh_frame:0000000000005F9A                 db  0Eh
.eh_frame:0000000000005F9B                 db  90h
.eh_frame:0000000000005F9C                 db    1
.eh_frame:0000000000005F9D                 db  5Eh ; ^
.eh_frame:0000000000005F9E                 db  0Eh
.eh_frame:0000000000005F9F                 db  70h ; p
.eh_frame:0000000000005FA0                 db  56h ; V
.eh_frame:0000000000005FA1                 db  0Eh
.eh_frame:0000000000005FA2                 db  78h ; x
.eh_frame:0000000000005FA3                 db  43h ; C
.eh_frame:0000000000005FA4                 db  0Eh
.eh_frame:0000000000005FA5                 db  80h
.eh_frame:0000000000005FA6                 db    1
.eh_frame:0000000000005FA7                 db  43h ; C
.eh_frame:0000000000005FA8                 db  0Eh
.eh_frame:0000000000005FA9                 db  88h
.eh_frame:0000000000005FAA                 db    1
.eh_frame:0000000000005FAB                 db  56h ; V
.eh_frame:0000000000005FAC                 db  0Eh
.eh_frame:0000000000005FAD                 db  90h
.eh_frame:0000000000005FAE                 db    1
.eh_frame:0000000000005FAF                 db  52h ; R
.eh_frame:0000000000005FB0                 db  0Eh
.eh_frame:0000000000005FB1                 db  70h ; p
.eh_frame:0000000000005FB2                 db  5Bh ; [
.eh_frame:0000000000005FB3                 db  0Eh
.eh_frame:0000000000005FB4                 db  38h ; 8
.eh_frame:0000000000005FB5                 db  41h ; A
.eh_frame:0000000000005FB6                 db  0Eh
.eh_frame:0000000000005FB7                 db  30h ; 0
.eh_frame:0000000000005FB8                 db  41h ; A
.eh_frame:0000000000005FB9                 db  0Eh
.eh_frame:0000000000005FBA                 db  28h ; (
.eh_frame:0000000000005FBB                 db  42h ; B
.eh_frame:0000000000005FBC                 db  0Eh
.eh_frame:0000000000005FBD                 db  20h
.eh_frame:0000000000005FBE                 db  42h ; B
.eh_frame:0000000000005FBF                 db  0Eh
.eh_frame:0000000000005FC0                 db  18h
.eh_frame:0000000000005FC1                 db  42h ; B
.eh_frame:0000000000005FC2                 db  0Eh
.eh_frame:0000000000005FC3                 db  10h
.eh_frame:0000000000005FC4                 db  42h ; B
.eh_frame:0000000000005FC5                 db  0Eh
.eh_frame:0000000000005FC6                 db    8
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db  10h
.eh_frame:0000000000005FC9                 db    0
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db  9Ch
.eh_frame:0000000000005FCD                 db    4
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db 0C0h
.eh_frame:0000000000005FD1                 db 0D9h
.eh_frame:0000000000005FD2                 db 0FFh
.eh_frame:0000000000005FD3                 db 0FFh
.eh_frame:0000000000005FD4                 db  0Ah
.eh_frame:0000000000005FD5                 db    0
.eh_frame:0000000000005FD6                 db    0
.eh_frame:0000000000005FD7                 db    0
.eh_frame:0000000000005FD8                 db    0
.eh_frame:0000000000005FD9                 db    0
.eh_frame:0000000000005FDA                 db    0
.eh_frame:0000000000005FDB                 db    0
.eh_frame:0000000000005FDC                 db  28h ; (
.eh_frame:0000000000005FDD                 db    0
.eh_frame:0000000000005FDE                 db    0
.eh_frame:0000000000005FDF                 db    0
.eh_frame:0000000000005FE0                 db 0B0h
.eh_frame:0000000000005FE1                 db    4
.eh_frame:0000000000005FE2                 db    0
.eh_frame:0000000000005FE3                 db    0
.eh_frame:0000000000005FE4                 db 0BCh
.eh_frame:0000000000005FE5                 db 0D9h
.eh_frame:0000000000005FE6                 db 0FFh
.eh_frame:0000000000005FE7                 db 0FFh
.eh_frame:0000000000005FE8                 db  93h
.eh_frame:0000000000005FE9                 db    0
.eh_frame:0000000000005FEA                 db    0
.eh_frame:0000000000005FEB                 db    0
.eh_frame:0000000000005FEC                 db    0
.eh_frame:0000000000005FED                 db  48h ; H
.eh_frame:0000000000005FEE                 db  0Eh
.eh_frame:0000000000005FEF                 db  10h
.eh_frame:0000000000005FF0                 db  8Ch
.eh_frame:0000000000005FF1                 db    2
.eh_frame:0000000000005FF2                 db  48h ; H
.eh_frame:0000000000005FF3                 db  0Eh
.eh_frame:0000000000005FF4                 db  18h
.eh_frame:0000000000005FF5                 db  86h
.eh_frame:0000000000005FF6                 db    3
.eh_frame:0000000000005FF7                 db  41h ; A
.eh_frame:0000000000005FF8                 db  0Eh
.eh_frame:0000000000005FF9                 db  20h
.eh_frame:0000000000005FFA                 db  83h
.eh_frame:0000000000005FFB                 db    4
.eh_frame:0000000000005FFC                 db    2
.eh_frame:0000000000005FFD                 db  74h ; t
.eh_frame:0000000000005FFE                 db  0Eh
.eh_frame:0000000000005FFF                 db  18h
.eh_frame:0000000000006000                 db  4Bh ; K
.eh_frame:0000000000006001                 db  0Eh
.eh_frame:0000000000006002                 db  10h
.eh_frame:0000000000006003                 db  42h ; B
.eh_frame:0000000000006004                 db  0Eh
.eh_frame:0000000000006005                 db    8
.eh_frame:0000000000006006                 db    0
.eh_frame:0000000000006007                 db    0
.eh_frame:0000000000006008                 db  10h
.eh_frame:0000000000006009                 db    0
.eh_frame:000000000000600A                 db    0
.eh_frame:000000000000600B                 db    0
.eh_frame:000000000000600C                 db 0DCh
.eh_frame:000000000000600D                 db    4
.eh_frame:000000000000600E                 db    0
.eh_frame:000000000000600F                 db    0
.eh_frame:0000000000006010                 db  30h ; 0
.eh_frame:0000000000006011                 db 0DAh
.eh_frame:0000000000006012                 db 0FFh
.eh_frame:0000000000006013                 db 0FFh
.eh_frame:0000000000006014                 db  13h
.eh_frame:0000000000006015                 db    0
.eh_frame:0000000000006016                 db    0
.eh_frame:0000000000006017                 db    0
.eh_frame:0000000000006018                 db    0
.eh_frame:0000000000006019                 db    0
.eh_frame:000000000000601A                 db    0
.eh_frame:000000000000601B                 db    0
.eh_frame:000000000000601C                 db  10h
.eh_frame:000000000000601D                 db    0
.eh_frame:000000000000601E                 db    0
.eh_frame:000000000000601F                 db    0
.eh_frame:0000000000006020                 db 0F0h
.eh_frame:0000000000006021                 db    4
.eh_frame:0000000000006022                 db    0
.eh_frame:0000000000006023                 db    0
.eh_frame:0000000000006024                 db  3Ch ; <
.eh_frame:0000000000006025                 db 0DAh
.eh_frame:0000000000006026                 db 0FFh
.eh_frame:0000000000006027                 db 0FFh
.eh_frame:0000000000006028                 db  0Ch
.eh_frame:0000000000006029                 db    0
.eh_frame:000000000000602A                 db    0
.eh_frame:000000000000602B                 db    0
.eh_frame:000000000000602C                 db    0
.eh_frame:000000000000602D                 db    0
.eh_frame:000000000000602E                 db    0
.eh_frame:000000000000602F                 db    0
.eh_frame:0000000000006030                 db  10h
.eh_frame:0000000000006031                 db    0
.eh_frame:0000000000006032                 db    0
.eh_frame:0000000000006033                 db    0
.eh_frame:0000000000006034                 db    4
.eh_frame:0000000000006035                 db    5
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db  38h ; 8
.eh_frame:0000000000006039                 db 0DAh
.eh_frame:000000000000603A                 db 0FFh
.eh_frame:000000000000603B                 db 0FFh
.eh_frame:000000000000603C                 db  18h
.eh_frame:000000000000603D                 db    0
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db    0
.eh_frame:0000000000006041                 db    0
.eh_frame:0000000000006042                 db    0
.eh_frame:0000000000006043                 db    0
.eh_frame:0000000000006044                 db  10h
.eh_frame:0000000000006045                 db    0
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db  18h
.eh_frame:0000000000006049                 db    5
.eh_frame:000000000000604A                 db    0
.eh_frame:000000000000604B                 db    0
.eh_frame:000000000000604C                 db  44h ; D
.eh_frame:000000000000604D                 db 0DAh
.eh_frame:000000000000604E                 db 0FFh
.eh_frame:000000000000604F                 db 0FFh
.eh_frame:0000000000006050                 db  14h
.eh_frame:0000000000006051                 db    0
.eh_frame:0000000000006052                 db    0
.eh_frame:0000000000006053                 db    0
.eh_frame:0000000000006054                 db    0
.eh_frame:0000000000006055                 db    0
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006058                 db  18h
.eh_frame:0000000000006059                 db    0
.eh_frame:000000000000605A                 db    0
.eh_frame:000000000000605B                 db    0
.eh_frame:000000000000605C                 db  2Ch ; ,
.eh_frame:000000000000605D                 db    5
.eh_frame:000000000000605E                 db    0
.eh_frame:000000000000605F                 db    0
.eh_frame:0000000000006060                 db  50h ; P
.eh_frame:0000000000006061                 db 0DAh
.eh_frame:0000000000006062                 db 0FFh
.eh_frame:0000000000006063                 db 0FFh
.eh_frame:0000000000006064                 db  8Eh
.eh_frame:0000000000006065                 db    0
.eh_frame:0000000000006066                 db    0
.eh_frame:0000000000006067                 db    0
.eh_frame:0000000000006068                 db    0
.eh_frame:0000000000006069                 db  44h ; D
.eh_frame:000000000000606A                 db  0Eh
.eh_frame:000000000000606B                 db  50h ; P
.eh_frame:000000000000606C                 db    2
.eh_frame:000000000000606D                 db  7Fh ; 
.eh_frame:000000000000606E                 db  0Ah
.eh_frame:000000000000606F                 db  0Eh
.eh_frame:0000000000006070                 db    8
.eh_frame:0000000000006071                 db  41h ; A
.eh_frame:0000000000006072                 db  0Bh
.eh_frame:0000000000006073                 db    0
.eh_frame:0000000000006074                 db  18h
.eh_frame:0000000000006075                 db    0
.eh_frame:0000000000006076                 db    0
.eh_frame:0000000000006077                 db    0
.eh_frame:0000000000006078                 db  48h ; H
.eh_frame:0000000000006079                 db    5
.eh_frame:000000000000607A                 db    0
.eh_frame:000000000000607B                 db    0
.eh_frame:000000000000607C                 db 0C4h
.eh_frame:000000000000607D                 db 0DAh
.eh_frame:000000000000607E                 db 0FFh
.eh_frame:000000000000607F                 db 0FFh
.eh_frame:0000000000006080                 db  8Ah
.eh_frame:0000000000006081                 db    0
.eh_frame:0000000000006082                 db    0
.eh_frame:0000000000006083                 db    0
.eh_frame:0000000000006084                 db    0
.eh_frame:0000000000006085                 db  44h ; D
.eh_frame:0000000000006086                 db  0Eh
.eh_frame:0000000000006087                 db  50h ; P
.eh_frame:0000000000006088                 db    2
.eh_frame:0000000000006089                 db  7Bh ; {
.eh_frame:000000000000608A                 db  0Ah
.eh_frame:000000000000608B                 db  0Eh
.eh_frame:000000000000608C                 db    8
.eh_frame:000000000000608D                 db  41h ; A
.eh_frame:000000000000608E                 db  0Bh
.eh_frame:000000000000608F                 db    0
.eh_frame:0000000000006090                 db  10h
.eh_frame:0000000000006091                 db    0
.eh_frame:0000000000006092                 db    0
.eh_frame:0000000000006093                 db    0
.eh_frame:0000000000006094                 db  64h ; d
.eh_frame:0000000000006095                 db    5
.eh_frame:0000000000006096                 db    0
.eh_frame:0000000000006097                 db    0
.eh_frame:0000000000006098                 db  38h ; 8
.eh_frame:0000000000006099                 db 0DBh
.eh_frame:000000000000609A                 db 0FFh
.eh_frame:000000000000609B                 db 0FFh
.eh_frame:000000000000609C                 db  0Ch
.eh_frame:000000000000609D                 db    0
.eh_frame:000000000000609E                 db    0
.eh_frame:000000000000609F                 db    0
.eh_frame:00000000000060A0                 db    0
.eh_frame:00000000000060A1                 db    0
.eh_frame:00000000000060A2                 db    0
.eh_frame:00000000000060A3                 db    0
.eh_frame:00000000000060A4                 db  10h
.eh_frame:00000000000060A5                 db    0
.eh_frame:00000000000060A6                 db    0
.eh_frame:00000000000060A7                 db    0
.eh_frame:00000000000060A8                 db  78h ; x
.eh_frame:00000000000060A9                 db    5
.eh_frame:00000000000060AA                 db    0
.eh_frame:00000000000060AB                 db    0
.eh_frame:00000000000060AC                 db  34h ; 4
.eh_frame:00000000000060AD                 db 0DBh
.eh_frame:00000000000060AE                 db 0FFh
.eh_frame:00000000000060AF                 db 0FFh
.eh_frame:00000000000060B0                 db  0Fh
.eh_frame:00000000000060B1                 db    0
.eh_frame:00000000000060B2                 db    0
.eh_frame:00000000000060B3                 db    0
.eh_frame:00000000000060B4                 db    0
.eh_frame:00000000000060B5                 db    0
.eh_frame:00000000000060B6                 db    0
.eh_frame:00000000000060B7                 db    0
.eh_frame:00000000000060B8                 db  18h
.eh_frame:00000000000060B9                 db    0
.eh_frame:00000000000060BA                 db    0
.eh_frame:00000000000060BB                 db    0
.eh_frame:00000000000060BC                 db  8Ch
.eh_frame:00000000000060BD                 db    5
.eh_frame:00000000000060BE                 db    0
.eh_frame:00000000000060BF                 db    0
.eh_frame:00000000000060C0                 db  30h ; 0
.eh_frame:00000000000060C1                 db 0DBh
.eh_frame:00000000000060C2                 db 0FFh
.eh_frame:00000000000060C3                 db 0FFh
.eh_frame:00000000000060C4                 db  98h
.eh_frame:00000000000060C5                 db    0
.eh_frame:00000000000060C6                 db    0
.eh_frame:00000000000060C7                 db    0
.eh_frame:00000000000060C8                 db    0
.eh_frame:00000000000060C9                 db  44h ; D
.eh_frame:00000000000060CA                 db  0Eh
.eh_frame:00000000000060CB                 db  50h ; P
.eh_frame:00000000000060CC                 db    2
.eh_frame:00000000000060CD                 db  8Eh
.eh_frame:00000000000060CE                 db  0Ah
.eh_frame:00000000000060CF                 db  0Eh
.eh_frame:00000000000060D0                 db    8
.eh_frame:00000000000060D1                 db  41h ; A
.eh_frame:00000000000060D2                 db  0Bh
.eh_frame:00000000000060D3                 db    0
.eh_frame:00000000000060D4                 db  10h
.eh_frame:00000000000060D5                 db    0
.eh_frame:00000000000060D6                 db    0
.eh_frame:00000000000060D7                 db    0
.eh_frame:00000000000060D8                 db 0A8h
.eh_frame:00000000000060D9                 db    5
.eh_frame:00000000000060DA                 db    0
.eh_frame:00000000000060DB                 db    0
.eh_frame:00000000000060DC                 db 0B4h
.eh_frame:00000000000060DD                 db 0DBh
.eh_frame:00000000000060DE                 db 0FFh
.eh_frame:00000000000060DF                 db 0FFh
.eh_frame:00000000000060E0                 db  10h
.eh_frame:00000000000060E1                 db    0
.eh_frame:00000000000060E2                 db    0
.eh_frame:00000000000060E3                 db    0
.eh_frame:00000000000060E4                 db    0
.eh_frame:00000000000060E5                 db    0
.eh_frame:00000000000060E6                 db    0
.eh_frame:00000000000060E7                 db    0
.eh_frame:00000000000060E8                 db  10h
.eh_frame:00000000000060E9                 db    0
.eh_frame:00000000000060EA                 db    0
.eh_frame:00000000000060EB                 db    0
.eh_frame:00000000000060EC                 db 0BCh
.eh_frame:00000000000060ED                 db    5
.eh_frame:00000000000060EE                 db    0
.eh_frame:00000000000060EF                 db    0
.eh_frame:00000000000060F0                 db 0B0h
.eh_frame:00000000000060F1                 db 0DBh
.eh_frame:00000000000060F2                 db 0FFh
.eh_frame:00000000000060F3                 db 0FFh
.eh_frame:00000000000060F4                 db  11h
.eh_frame:00000000000060F5                 db    0
.eh_frame:00000000000060F6                 db    0
.eh_frame:00000000000060F7                 db    0
.eh_frame:00000000000060F8                 db    0
.eh_frame:00000000000060F9                 db    0
.eh_frame:00000000000060FA                 db    0
.eh_frame:00000000000060FB                 db    0
.eh_frame:00000000000060FC                 db  10h
.eh_frame:00000000000060FD                 db    0
.eh_frame:00000000000060FE                 db    0
.eh_frame:00000000000060FF                 db    0
.eh_frame:0000000000006100                 db 0D0h
.eh_frame:0000000000006101                 db    5
.eh_frame:0000000000006102                 db    0
.eh_frame:0000000000006103                 db    0
.eh_frame:0000000000006104                 db 0BCh
.eh_frame:0000000000006105                 db 0DBh
.eh_frame:0000000000006106                 db 0FFh
.eh_frame:0000000000006107                 db 0FFh
.eh_frame:0000000000006108                 db  0Ah
.eh_frame:0000000000006109                 db    0
.eh_frame:000000000000610A                 db    0
.eh_frame:000000000000610B                 db    0
.eh_frame:000000000000610C                 db    0
.eh_frame:000000000000610D                 db    0
.eh_frame:000000000000610E                 db    0
.eh_frame:000000000000610F                 db    0
.eh_frame:0000000000006110                 db  18h
.eh_frame:0000000000006111                 db    0
.eh_frame:0000000000006112                 db    0
.eh_frame:0000000000006113                 db    0
.eh_frame:0000000000006114                 db 0E4h
.eh_frame:0000000000006115                 db    5
.eh_frame:0000000000006116                 db    0
.eh_frame:0000000000006117                 db    0
.eh_frame:0000000000006118                 db 0B8h
.eh_frame:0000000000006119                 db 0DBh
.eh_frame:000000000000611A                 db 0FFh
.eh_frame:000000000000611B                 db 0FFh
.eh_frame:000000000000611C                 db  8Eh
.eh_frame:000000000000611D                 db    0
.eh_frame:000000000000611E                 db    0
.eh_frame:000000000000611F                 db    0
.eh_frame:0000000000006120                 db    0
.eh_frame:0000000000006121                 db  44h ; D
.eh_frame:0000000000006122                 db  0Eh
.eh_frame:0000000000006123                 db  50h ; P
.eh_frame:0000000000006124                 db    2
.eh_frame:0000000000006125                 db  7Fh ; 
.eh_frame:0000000000006126                 db  0Ah
.eh_frame:0000000000006127                 db  0Eh
.eh_frame:0000000000006128                 db    8
.eh_frame:0000000000006129                 db  41h ; A
.eh_frame:000000000000612A                 db  0Bh
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db  18h
.eh_frame:000000000000612D                 db    0
.eh_frame:000000000000612E                 db    0
.eh_frame:000000000000612F                 db    0
.eh_frame:0000000000006130                 db    0
.eh_frame:0000000000006131                 db    6
.eh_frame:0000000000006132                 db    0
.eh_frame:0000000000006133                 db    0
.eh_frame:0000000000006134                 db  2Ch ; ,
.eh_frame:0000000000006135                 db 0DCh
.eh_frame:0000000000006136                 db 0FFh
.eh_frame:0000000000006137                 db 0FFh
.eh_frame:0000000000006138                 db  91h
.eh_frame:0000000000006139                 db    0
.eh_frame:000000000000613A                 db    0
.eh_frame:000000000000613B                 db    0
.eh_frame:000000000000613C                 db    0
.eh_frame:000000000000613D                 db  44h ; D
.eh_frame:000000000000613E                 db  0Eh
.eh_frame:000000000000613F                 db  50h ; P
.eh_frame:0000000000006140                 db    2
.eh_frame:0000000000006141                 db  82h
.eh_frame:0000000000006142                 db  0Ah
.eh_frame:0000000000006143                 db  0Eh
.eh_frame:0000000000006144                 db    8
.eh_frame:0000000000006145                 db  41h ; A
.eh_frame:0000000000006146                 db  0Bh
.eh_frame:0000000000006147                 db    0
.eh_frame:0000000000006148                 db  10h
.eh_frame:0000000000006149                 db    0
.eh_frame:000000000000614A                 db    0
.eh_frame:000000000000614B                 db    0
.eh_frame:000000000000614C                 db  1Ch
.eh_frame:000000000000614D                 db    6
.eh_frame:000000000000614E                 db    0
.eh_frame:000000000000614F                 db    0
.eh_frame:0000000000006150                 db 0B0h
.eh_frame:0000000000006151                 db 0DCh
.eh_frame:0000000000006152                 db 0FFh
.eh_frame:0000000000006153                 db 0FFh
.eh_frame:0000000000006154                 db  0Ch
.eh_frame:0000000000006155                 db    0
.eh_frame:0000000000006156                 db    0
.eh_frame:0000000000006157                 db    0
.eh_frame:0000000000006158                 db    0
.eh_frame:0000000000006159                 db    0
.eh_frame:000000000000615A                 db    0
.eh_frame:000000000000615B                 db    0
.eh_frame:000000000000615C                 db  10h
.eh_frame:000000000000615D                 db    0
.eh_frame:000000000000615E                 db    0
.eh_frame:000000000000615F                 db    0
.eh_frame:0000000000006160                 db  30h ; 0
.eh_frame:0000000000006161                 db    6
.eh_frame:0000000000006162                 db    0
.eh_frame:0000000000006163                 db    0
.eh_frame:0000000000006164                 db 0ACh
.eh_frame:0000000000006165                 db 0DCh
.eh_frame:0000000000006166                 db 0FFh
.eh_frame:0000000000006167                 db 0FFh
.eh_frame:0000000000006168                 db  17h
.eh_frame:0000000000006169                 db    0
.eh_frame:000000000000616A                 db    0
.eh_frame:000000000000616B                 db    0
.eh_frame:000000000000616C                 db    0
.eh_frame:000000000000616D                 db    0
.eh_frame:000000000000616E                 db    0
.eh_frame:000000000000616F                 db    0
.eh_frame:0000000000006170                 db  10h
.eh_frame:0000000000006171                 db    0
.eh_frame:0000000000006172                 db    0
.eh_frame:0000000000006173                 db    0
.eh_frame:0000000000006174                 db  44h ; D
.eh_frame:0000000000006175                 db    6
.eh_frame:0000000000006176                 db    0
.eh_frame:0000000000006177                 db    0
.eh_frame:0000000000006178                 db 0B8h
.eh_frame:0000000000006179                 db 0DCh
.eh_frame:000000000000617A                 db 0FFh
.eh_frame:000000000000617B                 db 0FFh
.eh_frame:000000000000617C                 db  13h
.eh_frame:000000000000617D                 db    0
.eh_frame:000000000000617E                 db    0
.eh_frame:000000000000617F                 db    0
.eh_frame:0000000000006180                 db    0
.eh_frame:0000000000006181                 db    0
.eh_frame:0000000000006182                 db    0
.eh_frame:0000000000006183                 db    0
.eh_frame:0000000000006184                 db  10h
.eh_frame:0000000000006185                 db    0
.eh_frame:0000000000006186                 db    0
.eh_frame:0000000000006187                 db    0
.eh_frame:0000000000006188                 db  58h ; X
.eh_frame:0000000000006189                 db    6
.eh_frame:000000000000618A                 db    0
.eh_frame:000000000000618B                 db    0
.eh_frame:000000000000618C                 db 0C4h
.eh_frame:000000000000618D                 db 0DCh
.eh_frame:000000000000618E                 db 0FFh
.eh_frame:000000000000618F                 db 0FFh
.eh_frame:0000000000006190                 db  0Ch
.eh_frame:0000000000006191                 db    0
.eh_frame:0000000000006192                 db    0
.eh_frame:0000000000006193                 db    0
.eh_frame:0000000000006194                 db    0
.eh_frame:0000000000006195                 db    0
.eh_frame:0000000000006196                 db    0
.eh_frame:0000000000006197                 db    0
.eh_frame:0000000000006198                 db  10h
.eh_frame:0000000000006199                 db    0
.eh_frame:000000000000619A                 db    0
.eh_frame:000000000000619B                 db    0
.eh_frame:000000000000619C                 db  6Ch ; l
.eh_frame:000000000000619D                 db    6
.eh_frame:000000000000619E                 db    0
.eh_frame:000000000000619F                 db    0
.eh_frame:00000000000061A0                 db 0C0h
.eh_frame:00000000000061A1                 db 0DCh
.eh_frame:00000000000061A2                 db 0FFh
.eh_frame:00000000000061A3                 db 0FFh
.eh_frame:00000000000061A4                 db  14h
.eh_frame:00000000000061A5                 db    0
.eh_frame:00000000000061A6                 db    0
.eh_frame:00000000000061A7                 db    0
.eh_frame:00000000000061A8                 db    0
.eh_frame:00000000000061A9                 db    0
.eh_frame:00000000000061AA                 db    0
.eh_frame:00000000000061AB                 db    0
.eh_frame:00000000000061AC                 db  10h
.eh_frame:00000000000061AD                 db    0
.eh_frame:00000000000061AE                 db    0
.eh_frame:00000000000061AF                 db    0
.eh_frame:00000000000061B0                 db  80h
.eh_frame:00000000000061B1                 db    6
.eh_frame:00000000000061B2                 db    0
.eh_frame:00000000000061B3                 db    0
.eh_frame:00000000000061B4                 db 0CCh
.eh_frame:00000000000061B5                 db 0DCh
.eh_frame:00000000000061B6                 db 0FFh
.eh_frame:00000000000061B7                 db 0FFh
.eh_frame:00000000000061B8                 db  13h
.eh_frame:00000000000061B9                 db    0
.eh_frame:00000000000061BA                 db    0
.eh_frame:00000000000061BB                 db    0
.eh_frame:00000000000061BC                 db    0
.eh_frame:00000000000061BD                 db    0
.eh_frame:00000000000061BE                 db    0
.eh_frame:00000000000061BF                 db    0
.eh_frame:00000000000061C0                 db  14h
.eh_frame:00000000000061C1                 db    0
.eh_frame:00000000000061C2                 db    0
.eh_frame:00000000000061C3                 db    0
.eh_frame:00000000000061C4                 db  94h
.eh_frame:00000000000061C5                 db    6
.eh_frame:00000000000061C6                 db    0
.eh_frame:00000000000061C7                 db    0
.eh_frame:00000000000061C8                 db 0D8h
.eh_frame:00000000000061C9                 db 0DCh
.eh_frame:00000000000061CA                 db 0FFh
.eh_frame:00000000000061CB                 db 0FFh
.eh_frame:00000000000061CC                 db  18h
.eh_frame:00000000000061CD                 db    0
.eh_frame:00000000000061CE                 db    0
.eh_frame:00000000000061CF                 db    0
.eh_frame:00000000000061D0                 db    0
.eh_frame:00000000000061D1                 db    0
.eh_frame:00000000000061D2                 db    0
.eh_frame:00000000000061D3                 db    0
.eh_frame:00000000000061D4                 db    0
.eh_frame:00000000000061D5                 db    0
.eh_frame:00000000000061D6                 db    0
.eh_frame:00000000000061D7                 db    0
.eh_frame:00000000000061D8                 db  10h
.eh_frame:00000000000061D9                 db    1
.eh_frame:00000000000061DA                 db    0
.eh_frame:00000000000061DB                 db    0
.eh_frame:00000000000061DC                 db 0ACh
.eh_frame:00000000000061DD                 db    6
.eh_frame:00000000000061DE                 db    0
.eh_frame:00000000000061DF                 db    0
.eh_frame:00000000000061E0                 db 0E0h
.eh_frame:00000000000061E1                 db 0DCh
.eh_frame:00000000000061E2                 db 0FFh
.eh_frame:00000000000061E3                 db 0FFh
.eh_frame:00000000000061E4                 db  17h
.eh_frame:00000000000061E5                 db    4
.eh_frame:00000000000061E6                 db    0
.eh_frame:00000000000061E7                 db    0
.eh_frame:00000000000061E8                 db    0
.eh_frame:00000000000061E9                 db  42h ; B
.eh_frame:00000000000061EA                 db  0Eh
.eh_frame:00000000000061EB                 db  10h
.eh_frame:00000000000061EC                 db  8Fh
.eh_frame:00000000000061ED                 db    2
.eh_frame:00000000000061EE                 db  42h ; B
.eh_frame:00000000000061EF                 db  0Eh
.eh_frame:00000000000061F0                 db  18h
.eh_frame:00000000000061F1                 db  8Eh
.eh_frame:00000000000061F2                 db    3
.eh_frame:00000000000061F3                 db  42h ; B
.eh_frame:00000000000061F4                 db  0Eh
.eh_frame:00000000000061F5                 db  20h
.eh_frame:00000000000061F6                 db  8Dh
.eh_frame:00000000000061F7                 db    4
.eh_frame:00000000000061F8                 db  42h ; B
.eh_frame:00000000000061F9                 db  0Eh
.eh_frame:00000000000061FA                 db  28h ; (
.eh_frame:00000000000061FB                 db  8Ch
.eh_frame:00000000000061FC                 db    5
.eh_frame:00000000000061FD                 db  44h ; D
.eh_frame:00000000000061FE                 db  0Eh
.eh_frame:00000000000061FF                 db  30h ; 0
.eh_frame:0000000000006200                 db  86h
.eh_frame:0000000000006201                 db    6
.eh_frame:0000000000006202                 db  41h ; A
.eh_frame:0000000000006203                 db  0Eh
.eh_frame:0000000000006204                 db  38h ; 8
.eh_frame:0000000000006205                 db  83h
.eh_frame:0000000000006206                 db    7
.eh_frame:0000000000006207                 db  4Ah ; J
.eh_frame:0000000000006208                 db  0Eh
.eh_frame:0000000000006209                 db  60h ; `
.eh_frame:000000000000620A                 db    2
.eh_frame:000000000000620B                 db 0DDh
.eh_frame:000000000000620C                 db  0Eh
.eh_frame:000000000000620D                 db  68h ; h
.eh_frame:000000000000620E                 db  57h ; W
.eh_frame:000000000000620F                 db  0Eh
.eh_frame:0000000000006210                 db  70h ; p
.eh_frame:0000000000006211                 db  42h ; B
.eh_frame:0000000000006212                 db  0Eh
.eh_frame:0000000000006213                 db  78h ; x
.eh_frame:0000000000006214                 db  42h ; B
.eh_frame:0000000000006215                 db  0Eh
.eh_frame:0000000000006216                 db  80h
.eh_frame:0000000000006217                 db    1
.eh_frame:0000000000006218                 db  42h ; B
.eh_frame:0000000000006219                 db  0Eh
.eh_frame:000000000000621A                 db  88h
.eh_frame:000000000000621B                 db    1
.eh_frame:000000000000621C                 db  42h ; B
.eh_frame:000000000000621D                 db  0Eh
.eh_frame:000000000000621E                 db  90h
.eh_frame:000000000000621F                 db    1
.eh_frame:0000000000006220                 db  53h ; S
.eh_frame:0000000000006221                 db  0Eh
.eh_frame:0000000000006222                 db  60h ; `
.eh_frame:0000000000006223                 db  44h ; D
.eh_frame:0000000000006224                 db  0Ah
.eh_frame:0000000000006225                 db  0Eh
.eh_frame:0000000000006226                 db  38h ; 8
.eh_frame:0000000000006227                 db  41h ; A
.eh_frame:0000000000006228                 db  0Eh
.eh_frame:0000000000006229                 db  30h ; 0
.eh_frame:000000000000622A                 db  41h ; A
.eh_frame:000000000000622B                 db  0Eh
.eh_frame:000000000000622C                 db  28h ; (
.eh_frame:000000000000622D                 db  42h ; B
.eh_frame:000000000000622E                 db  0Eh
.eh_frame:000000000000622F                 db  20h
.eh_frame:0000000000006230                 db  42h ; B
.eh_frame:0000000000006231                 db  0Eh
.eh_frame:0000000000006232                 db  18h
.eh_frame:0000000000006233                 db  42h ; B
.eh_frame:0000000000006234                 db  0Eh
.eh_frame:0000000000006235                 db  10h
.eh_frame:0000000000006236                 db  42h ; B
.eh_frame:0000000000006237                 db  0Eh
.eh_frame:0000000000006238                 db    8
.eh_frame:0000000000006239                 db  44h ; D
.eh_frame:000000000000623A                 db  0Bh
.eh_frame:000000000000623B                 db    2
.eh_frame:000000000000623C                 db  78h ; x
.eh_frame:000000000000623D                 db  0Ah
.eh_frame:000000000000623E                 db  0Eh
.eh_frame:000000000000623F                 db  68h ; h
.eh_frame:0000000000006240                 db  48h ; H
.eh_frame:0000000000006241                 db  0Bh
.eh_frame:0000000000006242                 db  5Ah ; Z
.eh_frame:0000000000006243                 db  0Ah
.eh_frame:0000000000006244                 db  0Eh
.eh_frame:0000000000006245                 db  38h ; 8
.eh_frame:0000000000006246                 db  47h ; G
.eh_frame:0000000000006247                 db  0Eh
.eh_frame:0000000000006248                 db  30h ; 0
.eh_frame:0000000000006249                 db  41h ; A
.eh_frame:000000000000624A                 db  0Eh
.eh_frame:000000000000624B                 db  28h ; (
.eh_frame:000000000000624C                 db  42h ; B
.eh_frame:000000000000624D                 db  0Eh
.eh_frame:000000000000624E                 db  20h
.eh_frame:000000000000624F                 db  42h ; B
.eh_frame:0000000000006250                 db  0Eh
.eh_frame:0000000000006251                 db  18h
.eh_frame:0000000000006252                 db  42h ; B
.eh_frame:0000000000006253                 db  0Eh
.eh_frame:0000000000006254                 db  10h
.eh_frame:0000000000006255                 db  42h ; B
.eh_frame:0000000000006256                 db  0Eh
.eh_frame:0000000000006257                 db    8
.eh_frame:0000000000006258                 db  56h ; V
.eh_frame:0000000000006259                 db  0Bh
.eh_frame:000000000000625A                 db  5Eh ; ^
.eh_frame:000000000000625B                 db  0Ah
.eh_frame:000000000000625C                 db  0Eh
.eh_frame:000000000000625D                 db  38h ; 8
.eh_frame:000000000000625E                 db  52h ; R
.eh_frame:000000000000625F                 db  0Eh
.eh_frame:0000000000006260                 db  30h ; 0
.eh_frame:0000000000006261                 db  41h ; A
.eh_frame:0000000000006262                 db  0Eh
.eh_frame:0000000000006263                 db  28h ; (
.eh_frame:0000000000006264                 db  42h ; B
.eh_frame:0000000000006265                 db  0Eh
.eh_frame:0000000000006266                 db  20h
.eh_frame:0000000000006267                 db  42h ; B
.eh_frame:0000000000006268                 db  0Eh
.eh_frame:0000000000006269                 db  18h
.eh_frame:000000000000626A                 db  42h ; B
.eh_frame:000000000000626B                 db  0Eh
.eh_frame:000000000000626C                 db  10h
.eh_frame:000000000000626D                 db  42h ; B
.eh_frame:000000000000626E                 db  0Eh
.eh_frame:000000000000626F                 db    8
.eh_frame:0000000000006270                 db  4Fh ; O
.eh_frame:0000000000006271                 db  0Bh
.eh_frame:0000000000006272                 db  62h ; b
.eh_frame:0000000000006273                 db  0Ah
.eh_frame:0000000000006274                 db  0Eh
.eh_frame:0000000000006275                 db  38h ; 8
.eh_frame:0000000000006276                 db  50h ; P
.eh_frame:0000000000006277                 db  0Eh
.eh_frame:0000000000006278                 db  30h ; 0
.eh_frame:0000000000006279                 db  41h ; A
.eh_frame:000000000000627A                 db  0Eh
.eh_frame:000000000000627B                 db  28h ; (
.eh_frame:000000000000627C                 db  42h ; B
.eh_frame:000000000000627D                 db  0Eh
.eh_frame:000000000000627E                 db  20h
.eh_frame:000000000000627F                 db  42h ; B
.eh_frame:0000000000006280                 db  0Eh
.eh_frame:0000000000006281                 db  18h
.eh_frame:0000000000006282                 db  42h ; B
.eh_frame:0000000000006283                 db  0Eh
.eh_frame:0000000000006284                 db  10h
.eh_frame:0000000000006285                 db  42h ; B
.eh_frame:0000000000006286                 db  0Eh
.eh_frame:0000000000006287                 db    8
.eh_frame:0000000000006288                 db  55h ; U
.eh_frame:0000000000006289                 db  0Bh
.eh_frame:000000000000628A                 db  66h ; f
.eh_frame:000000000000628B                 db  0Eh
.eh_frame:000000000000628C                 db  68h ; h
.eh_frame:000000000000628D                 db  42h ; B
.eh_frame:000000000000628E                 db  0Eh
.eh_frame:000000000000628F                 db  70h ; p
.eh_frame:0000000000006290                 db  5Ch ; \
.eh_frame:0000000000006291                 db  0Eh
.eh_frame:0000000000006292                 db  68h ; h
.eh_frame:0000000000006293                 db  41h ; A
.eh_frame:0000000000006294                 db  0Eh
.eh_frame:0000000000006295                 db  60h ; `
.eh_frame:0000000000006296                 db  44h ; D
.eh_frame:0000000000006297                 db  0Ah
.eh_frame:0000000000006298                 db  0Eh
.eh_frame:0000000000006299                 db  38h ; 8
.eh_frame:000000000000629A                 db  41h ; A
.eh_frame:000000000000629B                 db  0Eh
.eh_frame:000000000000629C                 db  30h ; 0
.eh_frame:000000000000629D                 db  41h ; A
.eh_frame:000000000000629E                 db  0Eh
.eh_frame:000000000000629F                 db  28h ; (
.eh_frame:00000000000062A0                 db  42h ; B
.eh_frame:00000000000062A1                 db  0Eh
.eh_frame:00000000000062A2                 db  20h
.eh_frame:00000000000062A3                 db  42h ; B
.eh_frame:00000000000062A4                 db  0Eh
.eh_frame:00000000000062A5                 db  18h
.eh_frame:00000000000062A6                 db  42h ; B
.eh_frame:00000000000062A7                 db  0Eh
.eh_frame:00000000000062A8                 db  10h
.eh_frame:00000000000062A9                 db  42h ; B
.eh_frame:00000000000062AA                 db  0Eh
.eh_frame:00000000000062AB                 db    8
.eh_frame:00000000000062AC                 db  45h ; E
.eh_frame:00000000000062AD                 db  0Bh
.eh_frame:00000000000062AE                 db  68h ; h
.eh_frame:00000000000062AF                 db  0Ah
.eh_frame:00000000000062B0                 db  0Eh
.eh_frame:00000000000062B1                 db  68h ; h
.eh_frame:00000000000062B2                 db  48h ; H
.eh_frame:00000000000062B3                 db  0Bh
.eh_frame:00000000000062B4                 db  72h ; r
.eh_frame:00000000000062B5                 db  0Eh
.eh_frame:00000000000062B6                 db  68h ; h
.eh_frame:00000000000062B7                 db  45h ; E
.eh_frame:00000000000062B8                 db  0Eh
.eh_frame:00000000000062B9                 db  70h ; p
.eh_frame:00000000000062BA                 db  42h ; B
.eh_frame:00000000000062BB                 db  0Eh
.eh_frame:00000000000062BC                 db  78h ; x
.eh_frame:00000000000062BD                 db  42h ; B
.eh_frame:00000000000062BE                 db  0Eh
.eh_frame:00000000000062BF                 db  80h
.eh_frame:00000000000062C0                 db    1
.eh_frame:00000000000062C1                 db  5Eh ; ^
.eh_frame:00000000000062C2                 db  0Eh
.eh_frame:00000000000062C3                 db  60h ; `
.eh_frame:00000000000062C4                 db  44h ; D
.eh_frame:00000000000062C5                 db  0Ah
.eh_frame:00000000000062C6                 db  0Eh
.eh_frame:00000000000062C7                 db  38h ; 8
.eh_frame:00000000000062C8                 db  41h ; A
.eh_frame:00000000000062C9                 db  0Eh
.eh_frame:00000000000062CA                 db  30h ; 0
.eh_frame:00000000000062CB                 db  41h ; A
.eh_frame:00000000000062CC                 db  0Eh
.eh_frame:00000000000062CD                 db  28h ; (
.eh_frame:00000000000062CE                 db  42h ; B
.eh_frame:00000000000062CF                 db  0Eh
.eh_frame:00000000000062D0                 db  20h
.eh_frame:00000000000062D1                 db  42h ; B
.eh_frame:00000000000062D2                 db  0Eh
.eh_frame:00000000000062D3                 db  18h
.eh_frame:00000000000062D4                 db  42h ; B
.eh_frame:00000000000062D5                 db  0Eh
.eh_frame:00000000000062D6                 db  10h
.eh_frame:00000000000062D7                 db  42h ; B
.eh_frame:00000000000062D8                 db  0Eh
.eh_frame:00000000000062D9                 db    8
.eh_frame:00000000000062DA                 db  41h ; A
.eh_frame:00000000000062DB                 db  0Bh
.eh_frame:00000000000062DC                 db  79h ; y
.eh_frame:00000000000062DD                 db  0Ah
.eh_frame:00000000000062DE                 db  0Eh
.eh_frame:00000000000062DF                 db  68h ; h
.eh_frame:00000000000062E0                 db  42h ; B
.eh_frame:00000000000062E1                 db  0Eh
.eh_frame:00000000000062E2                 db  70h ; p
.eh_frame:00000000000062E3                 db  42h ; B
.eh_frame:00000000000062E4                 db  0Eh
.eh_frame:00000000000062E5                 db  78h ; x
.eh_frame:00000000000062E6                 db  42h ; B
.eh_frame:00000000000062E7                 db  0Eh
.eh_frame:00000000000062E8                 db  80h
.eh_frame:00000000000062E9                 db    1
.eh_frame:00000000000062EA                 db  51h ; Q
.eh_frame:00000000000062EB                 db  0Bh
.eh_frame:00000000000062EC                 db  10h
.eh_frame:00000000000062ED                 db    0
.eh_frame:00000000000062EE                 db    0
.eh_frame:00000000000062EF                 db    0
.eh_frame:00000000000062F0                 db 0C0h
.eh_frame:00000000000062F1                 db    7
.eh_frame:00000000000062F2                 db    0
.eh_frame:00000000000062F3                 db    0
.eh_frame:00000000000062F4                 db 0ECh
.eh_frame:00000000000062F5                 db 0DFh
.eh_frame:00000000000062F6                 db 0FFh
.eh_frame:00000000000062F7                 db 0FFh
.eh_frame:00000000000062F8                 db  20h
.eh_frame:00000000000062F9                 db    0
.eh_frame:00000000000062FA                 db    0
.eh_frame:00000000000062FB                 db    0
.eh_frame:00000000000062FC                 db    0
.eh_frame:00000000000062FD                 db    0
.eh_frame:00000000000062FE                 db    0
.eh_frame:00000000000062FF                 db    0
.eh_frame:0000000000006300                 db  18h
.eh_frame:0000000000006301                 db    0
.eh_frame:0000000000006302                 db    0
.eh_frame:0000000000006303                 db    0
.eh_frame:0000000000006304                 db 0D4h
.eh_frame:0000000000006305                 db    7
.eh_frame:0000000000006306                 db    0
.eh_frame:0000000000006307                 db    0
.eh_frame:0000000000006308                 db 0F8h
.eh_frame:0000000000006309                 db 0DFh
.eh_frame:000000000000630A                 db 0FFh
.eh_frame:000000000000630B                 db 0FFh
.eh_frame:000000000000630C                 db  78h ; x
.eh_frame:000000000000630D                 db    0
.eh_frame:000000000000630E                 db    0
.eh_frame:000000000000630F                 db    0
.eh_frame:0000000000006310                 db    0
.eh_frame:0000000000006311                 db  44h ; D
.eh_frame:0000000000006312                 db  0Eh
.eh_frame:0000000000006313                 db  70h ; p
.eh_frame:0000000000006314                 db    2
.eh_frame:0000000000006315                 db  60h ; `
.eh_frame:0000000000006316                 db  0Ah
.eh_frame:0000000000006317                 db  0Eh
.eh_frame:0000000000006318                 db    8
.eh_frame:0000000000006319                 db  41h ; A
.eh_frame:000000000000631A                 db  0Bh
.eh_frame:000000000000631B                 db    0
.eh_frame:000000000000631C                 db  28h ; (
.eh_frame:000000000000631D                 db    0
.eh_frame:000000000000631E                 db    0
.eh_frame:000000000000631F                 db    0
.eh_frame:0000000000006320                 db 0F0h
.eh_frame:0000000000006321                 db    7
.eh_frame:0000000000006322                 db    0
.eh_frame:0000000000006323                 db    0
.eh_frame:0000000000006324                 db  5Ch ; \
.eh_frame:0000000000006325                 db 0E0h
.eh_frame:0000000000006326                 db 0FFh
.eh_frame:0000000000006327                 db 0FFh
.eh_frame:0000000000006328                 db 0D5h
.eh_frame:0000000000006329                 db    0
.eh_frame:000000000000632A                 db    0
.eh_frame:000000000000632B                 db    0
.eh_frame:000000000000632C                 db    0
.eh_frame:000000000000632D                 db  41h ; A
.eh_frame:000000000000632E                 db  0Eh
.eh_frame:000000000000632F                 db  10h
.eh_frame:0000000000006330                 db  86h
.eh_frame:0000000000006331                 db    2
.eh_frame:0000000000006332                 db  41h ; A
.eh_frame:0000000000006333                 db  0Eh
.eh_frame:0000000000006334                 db  18h
.eh_frame:0000000000006335                 db  83h
.eh_frame:0000000000006336                 db    3
.eh_frame:0000000000006337                 db  50h ; P
.eh_frame:0000000000006338                 db  0Eh
.eh_frame:0000000000006339                 db 0D0h
.eh_frame:000000000000633A                 db    1
.eh_frame:000000000000633B                 db    2
.eh_frame:000000000000633C                 db 0ABh
.eh_frame:000000000000633D                 db  0Ah
.eh_frame:000000000000633E                 db  0Eh
.eh_frame:000000000000633F                 db  18h
.eh_frame:0000000000006340                 db  41h ; A
.eh_frame:0000000000006341                 db  0Eh
.eh_frame:0000000000006342                 db  10h
.eh_frame:0000000000006343                 db  41h ; A
.eh_frame:0000000000006344                 db  0Eh
.eh_frame:0000000000006345                 db    8
.eh_frame:0000000000006346                 db  41h ; A
.eh_frame:0000000000006347                 db  0Bh
.eh_frame:0000000000006348                 db  1Ch
.eh_frame:0000000000006349                 db    0
.eh_frame:000000000000634A                 db    0
.eh_frame:000000000000634B                 db    0
.eh_frame:000000000000634C                 db  1Ch
.eh_frame:000000000000634D                 db    8
.eh_frame:000000000000634E                 db    0
.eh_frame:000000000000634F                 db    0
.eh_frame:0000000000006350                 db  10h
.eh_frame:0000000000006351                 db 0E1h
.eh_frame:0000000000006352                 db 0FFh
.eh_frame:0000000000006353                 db 0FFh
.eh_frame:0000000000006354                 db  80h
.eh_frame:0000000000006355                 db    0
.eh_frame:0000000000006356                 db    0
.eh_frame:0000000000006357                 db    0
.eh_frame:0000000000006358                 db    0
.eh_frame:0000000000006359                 db  41h ; A
.eh_frame:000000000000635A                 db  0Eh
.eh_frame:000000000000635B                 db  10h
.eh_frame:000000000000635C                 db  83h
.eh_frame:000000000000635D                 db    2
.eh_frame:000000000000635E                 db    2
.eh_frame:000000000000635F                 db  7Ah ; z
.eh_frame:0000000000006360                 db  0Eh
.eh_frame:0000000000006361                 db    8
.eh_frame:0000000000006362                 db    0
.eh_frame:0000000000006363                 db    0
.eh_frame:0000000000006364                 db    0
.eh_frame:0000000000006365                 db    0
.eh_frame:0000000000006366                 db    0
.eh_frame:0000000000006367                 db    0
.eh_frame:0000000000006368                 db  18h
.eh_frame:0000000000006369                 db    0
.eh_frame:000000000000636A                 db    0
.eh_frame:000000000000636B                 db    0
.eh_frame:000000000000636C                 db  3Ch ; <
.eh_frame:000000000000636D                 db    8
.eh_frame:000000000000636E                 db    0
.eh_frame:000000000000636F                 db    0
.eh_frame:0000000000006370                 db  70h ; p
.eh_frame:0000000000006371                 db 0E1h
.eh_frame:0000000000006372                 db 0FFh
.eh_frame:0000000000006373                 db 0FFh
.eh_frame:0000000000006374                 db  1Ah
.eh_frame:0000000000006375                 db    0
.eh_frame:0000000000006376                 db    0
.eh_frame:0000000000006377                 db    0
.eh_frame:0000000000006378                 db    0
.eh_frame:0000000000006379                 db  41h ; A
.eh_frame:000000000000637A                 db  0Eh
.eh_frame:000000000000637B                 db  10h
.eh_frame:000000000000637C                 db  83h
.eh_frame:000000000000637D                 db    2
.eh_frame:000000000000637E                 db  53h ; S
.eh_frame:000000000000637F                 db  0Ah
.eh_frame:0000000000006380                 db  0Eh
.eh_frame:0000000000006381                 db    8
.eh_frame:0000000000006382                 db  41h ; A
.eh_frame:0000000000006383                 db  0Bh
.eh_frame:0000000000006384                 db  10h
.eh_frame:0000000000006385                 db    0
.eh_frame:0000000000006386                 db    0
.eh_frame:0000000000006387                 db    0
.eh_frame:0000000000006388                 db  58h ; X
.eh_frame:0000000000006389                 db    8
.eh_frame:000000000000638A                 db    0
.eh_frame:000000000000638B                 db    0
.eh_frame:000000000000638C                 db  74h ; t
.eh_frame:000000000000638D                 db 0E1h
.eh_frame:000000000000638E                 db 0FFh
.eh_frame:000000000000638F                 db 0FFh
.eh_frame:0000000000006390                 db  24h ; $
.eh_frame:0000000000006391                 db    0
.eh_frame:0000000000006392                 db    0
.eh_frame:0000000000006393                 db    0
.eh_frame:0000000000006394                 db    0
.eh_frame:0000000000006395                 db  5Fh ; _
.eh_frame:0000000000006396                 db  0Eh
.eh_frame:0000000000006397                 db  10h
.eh_frame:0000000000006398                 db  10h
.eh_frame:0000000000006399                 db    0
.eh_frame:000000000000639A                 db    0
.eh_frame:000000000000639B                 db    0
.eh_frame:000000000000639C                 db  6Ch ; l
.eh_frame:000000000000639D                 db    8
.eh_frame:000000000000639E                 db    0
.eh_frame:000000000000639F                 db    0
.eh_frame:00000000000063A0                 db  90h
.eh_frame:00000000000063A1                 db 0E1h
.eh_frame:00000000000063A2                 db 0FFh
.eh_frame:00000000000063A3                 db 0FFh
.eh_frame:00000000000063A4                 db    2
.eh_frame:00000000000063A5                 db    0
.eh_frame:00000000000063A6                 db    0
.eh_frame:00000000000063A7                 db    0
.eh_frame:00000000000063A8                 db    0
.eh_frame:00000000000063A9                 db    0
.eh_frame:00000000000063AA                 db    0
.eh_frame:00000000000063AB                 db    0
.eh_frame:00000000000063AC                 db  20h
.eh_frame:00000000000063AD                 db    0
.eh_frame:00000000000063AE                 db    0
.eh_frame:00000000000063AF                 db    0
.eh_frame:00000000000063B0                 db  80h
.eh_frame:00000000000063B1                 db    8
.eh_frame:00000000000063B2                 db    0
.eh_frame:00000000000063B3                 db    0
.eh_frame:00000000000063B4                 db  8Ch
.eh_frame:00000000000063B5                 db 0E1h
.eh_frame:00000000000063B6                 db 0FFh
.eh_frame:00000000000063B7                 db 0FFh
.eh_frame:00000000000063B8                 db  36h ; 6
.eh_frame:00000000000063B9                 db    0
.eh_frame:00000000000063BA                 db    0
.eh_frame:00000000000063BB                 db    0
.eh_frame:00000000000063BC                 db    0
.eh_frame:00000000000063BD                 db  44h ; D
.eh_frame:00000000000063BE                 db  0Eh
.eh_frame:00000000000063BF                 db  10h
.eh_frame:00000000000063C0                 db  83h
.eh_frame:00000000000063C1                 db    2
.eh_frame:00000000000063C2                 db  5Dh ; ]
.eh_frame:00000000000063C3                 db  0Ah
.eh_frame:00000000000063C4                 db  0Eh
.eh_frame:00000000000063C5                 db    8
.eh_frame:00000000000063C6                 db  47h ; G
.eh_frame:00000000000063C7                 db  0Bh
.eh_frame:00000000000063C8                 db  48h ; H
.eh_frame:00000000000063C9                 db  0Ah
.eh_frame:00000000000063CA                 db  0Eh
.eh_frame:00000000000063CB                 db    8
.eh_frame:00000000000063CC                 db  41h ; A
.eh_frame:00000000000063CD                 db  0Bh
.eh_frame:00000000000063CE                 db    0
.eh_frame:00000000000063CF                 db    0
.eh_frame:00000000000063D0                 db  10h
.eh_frame:00000000000063D1                 db    0
.eh_frame:00000000000063D2                 db    0
.eh_frame:00000000000063D3                 db    0
.eh_frame:00000000000063D4                 db 0A4h
.eh_frame:00000000000063D5                 db    8
.eh_frame:00000000000063D6                 db    0
.eh_frame:00000000000063D7                 db    0
.eh_frame:00000000000063D8                 db 0A8h
.eh_frame:00000000000063D9                 db 0E1h
.eh_frame:00000000000063DA                 db 0FFh
.eh_frame:00000000000063DB                 db 0FFh
.eh_frame:00000000000063DC                 db  24h ; $
.eh_frame:00000000000063DD                 db    0
.eh_frame:00000000000063DE                 db    0
.eh_frame:00000000000063DF                 db    0
.eh_frame:00000000000063E0                 db    0
.eh_frame:00000000000063E1                 db  5Fh ; _
.eh_frame:00000000000063E2                 db  0Eh
.eh_frame:00000000000063E3                 db  10h
.eh_frame:00000000000063E4                 db  14h
.eh_frame:00000000000063E5                 db    0
.eh_frame:00000000000063E6                 db    0
.eh_frame:00000000000063E7                 db    0
.eh_frame:00000000000063E8                 db 0B8h
.eh_frame:00000000000063E9                 db    8
.eh_frame:00000000000063EA                 db    0
.eh_frame:00000000000063EB                 db    0
.eh_frame:00000000000063EC                 db 0C4h
.eh_frame:00000000000063ED                 db 0E1h
.eh_frame:00000000000063EE                 db 0FFh
.eh_frame:00000000000063EF                 db 0FFh
.eh_frame:00000000000063F0                 db  82h
.eh_frame:00000000000063F1                 db    0
.eh_frame:00000000000063F2                 db    0
.eh_frame:00000000000063F3                 db    0
.eh_frame:00000000000063F4                 db    0
.eh_frame:00000000000063F5                 db    2
.eh_frame:00000000000063F6                 db  5Fh ; _
.eh_frame:00000000000063F7                 db  0Eh
.eh_frame:00000000000063F8                 db  10h
.eh_frame:00000000000063F9                 db  49h ; I
.eh_frame:00000000000063FA                 db  0Eh
.eh_frame:00000000000063FB                 db    8
.eh_frame:00000000000063FC                 db  14h
.eh_frame:00000000000063FD                 db    0
.eh_frame:00000000000063FE                 db    0
.eh_frame:00000000000063FF                 db    0
.eh_frame:0000000000006400                 db 0D0h
.eh_frame:0000000000006401                 db    8
.eh_frame:0000000000006402                 db    0
.eh_frame:0000000000006403                 db    0
.eh_frame:0000000000006404                 db  3Ch ; <
.eh_frame:0000000000006405                 db 0E2h
.eh_frame:0000000000006406                 db 0FFh
.eh_frame:0000000000006407                 db 0FFh
.eh_frame:0000000000006408                 db  4Ah ; J
.eh_frame:0000000000006409                 db    0
.eh_frame:000000000000640A                 db    0
.eh_frame:000000000000640B                 db    0
.eh_frame:000000000000640C                 db    0
.eh_frame:000000000000640D                 db    2
.eh_frame:000000000000640E                 db  45h ; E
.eh_frame:000000000000640F                 db  0Eh
.eh_frame:0000000000006410                 db  10h
.eh_frame:0000000000006411                 db    0
.eh_frame:0000000000006412                 db    0
.eh_frame:0000000000006413                 db    0
.eh_frame:0000000000006414                 db  18h
.eh_frame:0000000000006415                 db    0
.eh_frame:0000000000006416                 db    0
.eh_frame:0000000000006417                 db    0
.eh_frame:0000000000006418                 db 0E8h
.eh_frame:0000000000006419                 db    8
.eh_frame:000000000000641A                 db    0
.eh_frame:000000000000641B                 db    0
.eh_frame:000000000000641C                 db  74h ; t
.eh_frame:000000000000641D                 db 0E2h
.eh_frame:000000000000641E                 db 0FFh
.eh_frame:000000000000641F                 db 0FFh
.eh_frame:0000000000006420                 db  17h
.eh_frame:0000000000006421                 db    0
.eh_frame:0000000000006422                 db    0
.eh_frame:0000000000006423                 db    0
.eh_frame:0000000000006424                 db    0
.eh_frame:0000000000006425                 db  41h ; A
.eh_frame:0000000000006426                 db  0Eh
.eh_frame:0000000000006427                 db  10h
.eh_frame:0000000000006428                 db  83h
.eh_frame:0000000000006429                 db    2
.eh_frame:000000000000642A                 db  51h ; Q
.eh_frame:000000000000642B                 db  0Eh
.eh_frame:000000000000642C                 db    8
.eh_frame:000000000000642D                 db    0
.eh_frame:000000000000642E                 db    0
.eh_frame:000000000000642F                 db    0
.eh_frame:0000000000006430                 db  18h
.eh_frame:0000000000006431                 db    0
.eh_frame:0000000000006432                 db    0
.eh_frame:0000000000006433                 db    0
.eh_frame:0000000000006434                 db    4
.eh_frame:0000000000006435                 db    9
.eh_frame:0000000000006436                 db    0
.eh_frame:0000000000006437                 db    0
.eh_frame:0000000000006438                 db  78h ; x
.eh_frame:0000000000006439                 db 0E2h
.eh_frame:000000000000643A                 db 0FFh
.eh_frame:000000000000643B                 db 0FFh
.eh_frame:000000000000643C                 db  2Eh ; .
.eh_frame:000000000000643D                 db    0
.eh_frame:000000000000643E                 db    0
.eh_frame:000000000000643F                 db    0
.eh_frame:0000000000006440                 db    0
.eh_frame:0000000000006441                 db  47h ; G
.eh_frame:0000000000006442                 db  0Eh
.eh_frame:0000000000006443                 db  10h
.eh_frame:0000000000006444                 db  61h ; a
.eh_frame:0000000000006445                 db  0Ah
.eh_frame:0000000000006446                 db  0Eh
.eh_frame:0000000000006447                 db    8
.eh_frame:0000000000006448                 db  41h ; A
.eh_frame:0000000000006449                 db  0Bh
.eh_frame:000000000000644A                 db    0
.eh_frame:000000000000644B                 db    0
.eh_frame:000000000000644C                 db  24h ; $
.eh_frame:000000000000644D                 db    0
.eh_frame:000000000000644E                 db    0
.eh_frame:000000000000644F                 db    0
.eh_frame:0000000000006450                 db  20h
.eh_frame:0000000000006451                 db    9
.eh_frame:0000000000006452                 db    0
.eh_frame:0000000000006453                 db    0
.eh_frame:0000000000006454                 db  8Ch
.eh_frame:0000000000006455                 db 0E2h
.eh_frame:0000000000006456                 db 0FFh
.eh_frame:0000000000006457                 db 0FFh
.eh_frame:0000000000006458                 db  28h ; (
.eh_frame:0000000000006459                 db    0
.eh_frame:000000000000645A                 db    0
.eh_frame:000000000000645B                 db    0
.eh_frame:000000000000645C                 db    0
.eh_frame:000000000000645D                 db  41h ; A
.eh_frame:000000000000645E                 db  0Eh
.eh_frame:000000000000645F                 db  10h
.eh_frame:0000000000006460                 db  86h
.eh_frame:0000000000006461                 db    2
.eh_frame:0000000000006462                 db  41h ; A
.eh_frame:0000000000006463                 db  0Eh
.eh_frame:0000000000006464                 db  18h
.eh_frame:0000000000006465                 db  83h
.eh_frame:0000000000006466                 db    3
.eh_frame:0000000000006467                 db  4Dh ; M
.eh_frame:0000000000006468                 db  0Eh
.eh_frame:0000000000006469                 db  20h
.eh_frame:000000000000646A                 db  49h ; I
.eh_frame:000000000000646B                 db  0Eh
.eh_frame:000000000000646C                 db  18h
.eh_frame:000000000000646D                 db  47h ; G
.eh_frame:000000000000646E                 db  0Eh
.eh_frame:000000000000646F                 db  10h
.eh_frame:0000000000006470                 db  41h ; A
.eh_frame:0000000000006471                 db  0Eh
.eh_frame:0000000000006472                 db    8
.eh_frame:0000000000006473                 db    0
.eh_frame:0000000000006474                 db  18h
.eh_frame:0000000000006475                 db    0
.eh_frame:0000000000006476                 db    0
.eh_frame:0000000000006477                 db    0
.eh_frame:0000000000006478                 db  48h ; H
.eh_frame:0000000000006479                 db    9
.eh_frame:000000000000647A                 db    0
.eh_frame:000000000000647B                 db    0
.eh_frame:000000000000647C                 db  94h
.eh_frame:000000000000647D                 db 0E2h
.eh_frame:000000000000647E                 db 0FFh
.eh_frame:000000000000647F                 db 0FFh
.eh_frame:0000000000006480                 db  13h
.eh_frame:0000000000006481                 db    0
.eh_frame:0000000000006482                 db    0
.eh_frame:0000000000006483                 db    0
.eh_frame:0000000000006484                 db    0
.eh_frame:0000000000006485                 db  41h ; A
.eh_frame:0000000000006486                 db  0Eh
.eh_frame:0000000000006487                 db  10h
.eh_frame:0000000000006488                 db  83h
.eh_frame:0000000000006489                 db    2
.eh_frame:000000000000648A                 db  50h ; P
.eh_frame:000000000000648B                 db  0Eh
.eh_frame:000000000000648C                 db    8
.eh_frame:000000000000648D                 db    0
.eh_frame:000000000000648E                 db    0
.eh_frame:000000000000648F                 db    0
.eh_frame:0000000000006490                 db  14h
.eh_frame:0000000000006491                 db    0
.eh_frame:0000000000006492                 db    0
.eh_frame:0000000000006493                 db    0
.eh_frame:0000000000006494                 db  64h ; d
.eh_frame:0000000000006495                 db    9
.eh_frame:0000000000006496                 db    0
.eh_frame:0000000000006497                 db    0
.eh_frame:0000000000006498                 db  98h
.eh_frame:0000000000006499                 db 0E2h
.eh_frame:000000000000649A                 db 0FFh
.eh_frame:000000000000649B                 db 0FFh
.eh_frame:000000000000649C                 db  35h ; 5
.eh_frame:000000000000649D                 db    0
.eh_frame:000000000000649E                 db    0
.eh_frame:000000000000649F                 db    0
.eh_frame:00000000000064A0                 db    0
.eh_frame:00000000000064A1                 db  4Bh ; K
.eh_frame:00000000000064A2                 db  0Eh
.eh_frame:00000000000064A3                 db  10h
.eh_frame:00000000000064A4                 db    0
.eh_frame:00000000000064A5                 db    0
.eh_frame:00000000000064A6                 db    0
.eh_frame:00000000000064A7                 db    0
.eh_frame:00000000000064A8                 db  3Ch ; <
.eh_frame:00000000000064A9                 db    0
.eh_frame:00000000000064AA                 db    0
.eh_frame:00000000000064AB                 db    0
.eh_frame:00000000000064AC                 db  7Ch ; |
.eh_frame:00000000000064AD                 db    9
.eh_frame:00000000000064AE                 db    0
.eh_frame:00000000000064AF                 db    0
.eh_frame:00000000000064B0                 db 0C0h
.eh_frame:00000000000064B1                 db 0E2h
.eh_frame:00000000000064B2                 db 0FFh
.eh_frame:00000000000064B3                 db 0FFh
.eh_frame:00000000000064B4                 db  83h
.eh_frame:00000000000064B5                 db    0
.eh_frame:00000000000064B6                 db    0
.eh_frame:00000000000064B7                 db    0
.eh_frame:00000000000064B8                 db    0
.eh_frame:00000000000064B9                 db  42h ; B
.eh_frame:00000000000064BA                 db  0Eh
.eh_frame:00000000000064BB                 db  10h
.eh_frame:00000000000064BC                 db  8Dh
.eh_frame:00000000000064BD                 db    2
.eh_frame:00000000000064BE                 db  42h ; B
.eh_frame:00000000000064BF                 db  0Eh
.eh_frame:00000000000064C0                 db  18h
.eh_frame:00000000000064C1                 db  8Ch
.eh_frame:00000000000064C2                 db    3
.eh_frame:00000000000064C3                 db  44h ; D
.eh_frame:00000000000064C4                 db  0Eh
.eh_frame:00000000000064C5                 db  20h
.eh_frame:00000000000064C6                 db  86h
.eh_frame:00000000000064C7                 db    4
.eh_frame:00000000000064C8                 db  41h ; A
.eh_frame:00000000000064C9                 db  0Eh
.eh_frame:00000000000064CA                 db  28h ; (
.eh_frame:00000000000064CB                 db  83h
.eh_frame:00000000000064CC                 db    5
.eh_frame:00000000000064CD                 db  4Ah ; J
.eh_frame:00000000000064CE                 db  0Eh
.eh_frame:00000000000064CF                 db  40h ; @
.eh_frame:00000000000064D0                 db    2
.eh_frame:00000000000064D1                 db  64h ; d
.eh_frame:00000000000064D2                 db  0Ah
.eh_frame:00000000000064D3                 db  0Eh
.eh_frame:00000000000064D4                 db  28h ; (
.eh_frame:00000000000064D5                 db  41h ; A
.eh_frame:00000000000064D6                 db  0Eh
.eh_frame:00000000000064D7                 db  20h
.eh_frame:00000000000064D8                 db  41h ; A
.eh_frame:00000000000064D9                 db  0Eh
.eh_frame:00000000000064DA                 db  18h
.eh_frame:00000000000064DB                 db  42h ; B
.eh_frame:00000000000064DC                 db  0Eh
.eh_frame:00000000000064DD                 db  10h
.eh_frame:00000000000064DE                 db  42h ; B
.eh_frame:00000000000064DF                 db  0Eh
.eh_frame:00000000000064E0                 db    8
.eh_frame:00000000000064E1                 db  41h ; A
.eh_frame:00000000000064E2                 db  0Bh
.eh_frame:00000000000064E3                 db    0
.eh_frame:00000000000064E4                 db    0
.eh_frame:00000000000064E5                 db    0
.eh_frame:00000000000064E6                 db    0
.eh_frame:00000000000064E7                 db    0
.eh_frame:00000000000064E8                 db  28h ; (
.eh_frame:00000000000064E9                 db    0
.eh_frame:00000000000064EA                 db    0
.eh_frame:00000000000064EB                 db    0
.eh_frame:00000000000064EC                 db 0BCh
.eh_frame:00000000000064ED                 db    9
.eh_frame:00000000000064EE                 db    0
.eh_frame:00000000000064EF                 db    0
.eh_frame:00000000000064F0                 db  10h
.eh_frame:00000000000064F1                 db 0E3h
.eh_frame:00000000000064F2                 db 0FFh
.eh_frame:00000000000064F3                 db 0FFh
.eh_frame:00000000000064F4                 db  5Eh ; ^
.eh_frame:00000000000064F5                 db    0
.eh_frame:00000000000064F6                 db    0
.eh_frame:00000000000064F7                 db    0
.eh_frame:00000000000064F8                 db    0
.eh_frame:00000000000064F9                 db  41h ; A
.eh_frame:00000000000064FA                 db  0Eh
.eh_frame:00000000000064FB                 db  10h
.eh_frame:00000000000064FC                 db  86h
.eh_frame:00000000000064FD                 db    2
.eh_frame:00000000000064FE                 db  41h ; A
.eh_frame:00000000000064FF                 db  0Eh
.eh_frame:0000000000006500                 db  18h
.eh_frame:0000000000006501                 db  83h
.eh_frame:0000000000006502                 db    3
.eh_frame:0000000000006503                 db  4Ch ; L
.eh_frame:0000000000006504                 db  0Eh
.eh_frame:0000000000006505                 db  20h
.eh_frame:0000000000006506                 db  77h ; w
.eh_frame:0000000000006507                 db  0Ah
.eh_frame:0000000000006508                 db  0Eh
.eh_frame:0000000000006509                 db  18h
.eh_frame:000000000000650A                 db  44h ; D
.eh_frame:000000000000650B                 db  0Eh
.eh_frame:000000000000650C                 db  10h
.eh_frame:000000000000650D                 db  41h ; A
.eh_frame:000000000000650E                 db  0Eh
.eh_frame:000000000000650F                 db    8
.eh_frame:0000000000006510                 db  46h ; F
.eh_frame:0000000000006511                 db  0Bh
.eh_frame:0000000000006512                 db    0
.eh_frame:0000000000006513                 db    0
.eh_frame:0000000000006514                 db  48h ; H
.eh_frame:0000000000006515                 db    0
.eh_frame:0000000000006516                 db    0
.eh_frame:0000000000006517                 db    0
.eh_frame:0000000000006518                 db 0E8h
.eh_frame:0000000000006519                 db    9
.eh_frame:000000000000651A                 db    0
.eh_frame:000000000000651B                 db    0
.eh_frame:000000000000651C                 db  44h ; D
.eh_frame:000000000000651D                 db 0E3h
.eh_frame:000000000000651E                 db 0FFh
.eh_frame:000000000000651F                 db 0FFh
.eh_frame:0000000000006520                 db  89h
.eh_frame:0000000000006521                 db    1
.eh_frame:0000000000006522                 db    0
.eh_frame:0000000000006523                 db    0
.eh_frame:0000000000006524                 db    0
.eh_frame:0000000000006525                 db  42h ; B
.eh_frame:0000000000006526                 db  0Eh
.eh_frame:0000000000006527                 db  10h
.eh_frame:0000000000006528                 db  8Fh
.eh_frame:0000000000006529                 db    2
.eh_frame:000000000000652A                 db  42h ; B
.eh_frame:000000000000652B                 db  0Eh
.eh_frame:000000000000652C                 db  18h
.eh_frame:000000000000652D                 db  8Eh
.eh_frame:000000000000652E                 db    3
.eh_frame:000000000000652F                 db  45h ; E
.eh_frame:0000000000006530                 db  0Eh
.eh_frame:0000000000006531                 db  20h
.eh_frame:0000000000006532                 db  8Dh
.eh_frame:0000000000006533                 db    4
.eh_frame:0000000000006534                 db  45h ; E
.eh_frame:0000000000006535                 db  0Eh
.eh_frame:0000000000006536                 db  28h ; (
.eh_frame:0000000000006537                 db  8Ch
.eh_frame:0000000000006538                 db    5
.eh_frame:0000000000006539                 db  41h ; A
.eh_frame:000000000000653A                 db  0Eh
.eh_frame:000000000000653B                 db  30h ; 0
.eh_frame:000000000000653C                 db  86h
.eh_frame:000000000000653D                 db    6
.eh_frame:000000000000653E                 db  41h ; A
.eh_frame:000000000000653F                 db  0Eh
.eh_frame:0000000000006540                 db  38h ; 8
.eh_frame:0000000000006541                 db  83h
.eh_frame:0000000000006542                 db    7
.eh_frame:0000000000006543                 db  4Fh ; O
.eh_frame:0000000000006544                 db  0Eh
.eh_frame:0000000000006545                 db  50h ; P
.eh_frame:0000000000006546                 db    2
.eh_frame:0000000000006547                 db 0AAh
.eh_frame:0000000000006548                 db  0Ah
.eh_frame:0000000000006549                 db  0Eh
.eh_frame:000000000000654A                 db  38h ; 8
.eh_frame:000000000000654B                 db  43h ; C
.eh_frame:000000000000654C                 db  0Eh
.eh_frame:000000000000654D                 db  30h ; 0
.eh_frame:000000000000654E                 db  41h ; A
.eh_frame:000000000000654F                 db  0Eh
.eh_frame:0000000000006550                 db  28h ; (
.eh_frame:0000000000006551                 db  42h ; B
.eh_frame:0000000000006552                 db  0Eh
.eh_frame:0000000000006553                 db  20h
.eh_frame:0000000000006554                 db  42h ; B
.eh_frame:0000000000006555                 db  0Eh
.eh_frame:0000000000006556                 db  18h
.eh_frame:0000000000006557                 db  42h ; B
.eh_frame:0000000000006558                 db  0Eh
.eh_frame:0000000000006559                 db  10h
.eh_frame:000000000000655A                 db  42h ; B
.eh_frame:000000000000655B                 db  0Eh
.eh_frame:000000000000655C                 db    8
.eh_frame:000000000000655D                 db  4Bh ; K
.eh_frame:000000000000655E                 db  0Bh
.eh_frame:000000000000655F                 db    0
.eh_frame:0000000000006560                 db  4Ch ; L
.eh_frame:0000000000006561                 db    0
.eh_frame:0000000000006562                 db    0
.eh_frame:0000000000006563                 db    0
.eh_frame:0000000000006564                 db  34h ; 4
.eh_frame:0000000000006565                 db  0Ah
.eh_frame:0000000000006566                 db    0
.eh_frame:0000000000006567                 db    0
.eh_frame:0000000000006568                 db  88h
.eh_frame:0000000000006569                 db 0E4h
.eh_frame:000000000000656A                 db 0FFh
.eh_frame:000000000000656B                 db 0FFh
.eh_frame:000000000000656C                 db  7Dh ; }
.eh_frame:000000000000656D                 db    0
.eh_frame:000000000000656E                 db    0
.eh_frame:000000000000656F                 db    0
.eh_frame:0000000000006570                 db    0
.eh_frame:0000000000006571                 db  42h ; B
.eh_frame:0000000000006572                 db  0Eh
.eh_frame:0000000000006573                 db  10h
.eh_frame:0000000000006574                 db  8Ch
.eh_frame:0000000000006575                 db    2
.eh_frame:0000000000006576                 db  41h ; A
.eh_frame:0000000000006577                 db  0Eh
.eh_frame:0000000000006578                 db  18h
.eh_frame:0000000000006579                 db  86h
.eh_frame:000000000000657A                 db    3
.eh_frame:000000000000657B                 db  44h ; D
.eh_frame:000000000000657C                 db  0Eh
.eh_frame:000000000000657D                 db  20h
.eh_frame:000000000000657E                 db  83h
.eh_frame:000000000000657F                 db    4
.eh_frame:0000000000006580                 db  69h ; i
.eh_frame:0000000000006581                 db  0Ah
.eh_frame:0000000000006582                 db  0Eh
.eh_frame:0000000000006583                 db  18h
.eh_frame:0000000000006584                 db  41h ; A
.eh_frame:0000000000006585                 db  0Eh
.eh_frame:0000000000006586                 db  10h
.eh_frame:0000000000006587                 db  42h ; B
.eh_frame:0000000000006588                 db  0Eh
.eh_frame:0000000000006589                 db    8
.eh_frame:000000000000658A                 db  45h ; E
.eh_frame:000000000000658B                 db  0Bh
.eh_frame:000000000000658C                 db  55h ; U
.eh_frame:000000000000658D                 db  0Ah
.eh_frame:000000000000658E                 db  0Eh
.eh_frame:000000000000658F                 db  18h
.eh_frame:0000000000006590                 db  41h ; A
.eh_frame:0000000000006591                 db  0Eh
.eh_frame:0000000000006592                 db  10h
.eh_frame:0000000000006593                 db  42h ; B
.eh_frame:0000000000006594                 db  0Eh
.eh_frame:0000000000006595                 db    8
.eh_frame:0000000000006596                 db  48h ; H
.eh_frame:0000000000006597                 db  0Bh
.eh_frame:0000000000006598                 db  41h ; A
.eh_frame:0000000000006599                 db  0Ah
.eh_frame:000000000000659A                 db  0Eh
.eh_frame:000000000000659B                 db  18h
.eh_frame:000000000000659C                 db  46h ; F
.eh_frame:000000000000659D                 db  0Eh
.eh_frame:000000000000659E                 db  10h
.eh_frame:000000000000659F                 db  42h ; B
.eh_frame:00000000000065A0                 db  0Eh
.eh_frame:00000000000065A1                 db    8
.eh_frame:00000000000065A2                 db  47h ; G
.eh_frame:00000000000065A3                 db  0Bh
.eh_frame:00000000000065A4                 db  49h ; I
.eh_frame:00000000000065A5                 db  0Eh
.eh_frame:00000000000065A6                 db  18h
.eh_frame:00000000000065A7                 db  41h ; A
.eh_frame:00000000000065A8                 db  0Eh
.eh_frame:00000000000065A9                 db  10h
.eh_frame:00000000000065AA                 db  42h ; B
.eh_frame:00000000000065AB                 db  0Eh
.eh_frame:00000000000065AC                 db    8
.eh_frame:00000000000065AD                 db    0
.eh_frame:00000000000065AE                 db    0
.eh_frame:00000000000065AF                 db    0
.eh_frame:00000000000065B0                 db  1Ch
.eh_frame:00000000000065B1                 db    0
.eh_frame:00000000000065B2                 db    0
.eh_frame:00000000000065B3                 db    0
.eh_frame:00000000000065B4                 db  84h
.eh_frame:00000000000065B5                 db  0Ah
.eh_frame:00000000000065B6                 db    0
.eh_frame:00000000000065B7                 db    0
.eh_frame:00000000000065B8                 db 0B8h
.eh_frame:00000000000065B9                 db 0E4h
.eh_frame:00000000000065BA                 db 0FFh
.eh_frame:00000000000065BB                 db 0FFh
.eh_frame:00000000000065BC                 db  60h ; `
.eh_frame:00000000000065BD                 db    0
.eh_frame:00000000000065BE                 db    0
.eh_frame:00000000000065BF                 db    0
.eh_frame:00000000000065C0                 db    0
.eh_frame:00000000000065C1                 db  44h ; D
.eh_frame:00000000000065C2                 db  0Eh
.eh_frame:00000000000065C3                 db  10h
.eh_frame:00000000000065C4                 db  75h ; u
.eh_frame:00000000000065C5                 db  0Ah
.eh_frame:00000000000065C6                 db  0Eh
.eh_frame:00000000000065C7                 db    8
.eh_frame:00000000000065C8                 db  47h ; G
.eh_frame:00000000000065C9                 db  0Bh
.eh_frame:00000000000065CA                 db  5Fh ; _
.eh_frame:00000000000065CB                 db  0Eh
.eh_frame:00000000000065CC                 db    8
.eh_frame:00000000000065CD                 db    0
.eh_frame:00000000000065CE                 db    0
.eh_frame:00000000000065CF                 db    0
.eh_frame:00000000000065D0                 db  1Ch
.eh_frame:00000000000065D1                 db    0
.eh_frame:00000000000065D2                 db    0
.eh_frame:00000000000065D3                 db    0
.eh_frame:00000000000065D4                 db 0A4h
.eh_frame:00000000000065D5                 db  0Ah
.eh_frame:00000000000065D6                 db    0
.eh_frame:00000000000065D7                 db    0
.eh_frame:00000000000065D8                 db 0F8h
.eh_frame:00000000000065D9                 db 0E4h
.eh_frame:00000000000065DA                 db 0FFh
.eh_frame:00000000000065DB                 db 0FFh
.eh_frame:00000000000065DC                 db  3Ch ; <
.eh_frame:00000000000065DD                 db    0
.eh_frame:00000000000065DE                 db    0
.eh_frame:00000000000065DF                 db    0
.eh_frame:00000000000065E0                 db    0
.eh_frame:00000000000065E1                 db  44h ; D
.eh_frame:00000000000065E2                 db  0Eh
.eh_frame:00000000000065E3                 db  10h
.eh_frame:00000000000065E4                 db  61h ; a
.eh_frame:00000000000065E5                 db  0Ah
.eh_frame:00000000000065E6                 db  0Eh
.eh_frame:00000000000065E7                 db    8
.eh_frame:00000000000065E8                 db  4Bh ; K
.eh_frame:00000000000065E9                 db  0Bh
.eh_frame:00000000000065EA                 db  4Bh ; K
.eh_frame:00000000000065EB                 db  0Eh
.eh_frame:00000000000065EC                 db    8
.eh_frame:00000000000065ED                 db    0
.eh_frame:00000000000065EE                 db    0
.eh_frame:00000000000065EF                 db    0
.eh_frame:00000000000065F0                 db  34h ; 4
.eh_frame:00000000000065F1                 db    0
.eh_frame:00000000000065F2                 db    0
.eh_frame:00000000000065F3                 db    0
.eh_frame:00000000000065F4                 db 0C4h
.eh_frame:00000000000065F5                 db  0Ah
.eh_frame:00000000000065F6                 db    0
.eh_frame:00000000000065F7                 db    0
.eh_frame:00000000000065F8                 db  18h
.eh_frame:00000000000065F9                 db 0E5h
.eh_frame:00000000000065FA                 db 0FFh
.eh_frame:00000000000065FB                 db 0FFh
.eh_frame:00000000000065FC                 db  7Bh ; {
.eh_frame:00000000000065FD                 db    0
.eh_frame:00000000000065FE                 db    0
.eh_frame:00000000000065FF                 db    0
.eh_frame:0000000000006600                 db    0
.eh_frame:0000000000006601                 db  42h ; B
.eh_frame:0000000000006602                 db  0Eh
.eh_frame:0000000000006603                 db  10h
.eh_frame:0000000000006604                 db  8Ch
.eh_frame:0000000000006605                 db    2
.eh_frame:0000000000006606                 db  41h ; A
.eh_frame:0000000000006607                 db  0Eh
.eh_frame:0000000000006608                 db  18h
.eh_frame:0000000000006609                 db  86h
.eh_frame:000000000000660A                 db    3
.eh_frame:000000000000660B                 db  41h ; A
.eh_frame:000000000000660C                 db  0Eh
.eh_frame:000000000000660D                 db  20h
.eh_frame:000000000000660E                 db  83h
.eh_frame:000000000000660F                 db    4
.eh_frame:0000000000006610                 db  7Dh ; }
.eh_frame:0000000000006611                 db  0Ah
.eh_frame:0000000000006612                 db  0Eh
.eh_frame:0000000000006613                 db  18h
.eh_frame:0000000000006614                 db  41h ; A
.eh_frame:0000000000006615                 db  0Eh
.eh_frame:0000000000006616                 db  10h
.eh_frame:0000000000006617                 db  42h ; B
.eh_frame:0000000000006618                 db  0Eh
.eh_frame:0000000000006619                 db    8
.eh_frame:000000000000661A                 db  44h ; D
.eh_frame:000000000000661B                 db  0Bh
.eh_frame:000000000000661C                 db  60h ; `
.eh_frame:000000000000661D                 db  0Ah
.eh_frame:000000000000661E                 db  0Eh
.eh_frame:000000000000661F                 db  18h
.eh_frame:0000000000006620                 db  41h ; A
.eh_frame:0000000000006621                 db  0Eh
.eh_frame:0000000000006622                 db  10h
.eh_frame:0000000000006623                 db  42h ; B
.eh_frame:0000000000006624                 db  0Eh
.eh_frame:0000000000006625                 db    8
.eh_frame:0000000000006626                 db  45h ; E
.eh_frame:0000000000006627                 db  0Bh
.eh_frame:0000000000006628                 db  1Ch
.eh_frame:0000000000006629                 db    0
.eh_frame:000000000000662A                 db    0
.eh_frame:000000000000662B                 db    0
.eh_frame:000000000000662C                 db 0FCh
.eh_frame:000000000000662D                 db  0Ah
.eh_frame:000000000000662E                 db    0
.eh_frame:000000000000662F                 db    0
.eh_frame:0000000000006630                 db  60h ; `
.eh_frame:0000000000006631                 db 0E5h
.eh_frame:0000000000006632                 db 0FFh
.eh_frame:0000000000006633                 db 0FFh
.eh_frame:0000000000006634                 db  40h ; @
.eh_frame:0000000000006635                 db    0
.eh_frame:0000000000006636                 db    0
.eh_frame:0000000000006637                 db    0
.eh_frame:0000000000006638                 db    0
.eh_frame:0000000000006639                 db  44h ; D
.eh_frame:000000000000663A                 db  0Eh
.eh_frame:000000000000663B                 db  10h
.eh_frame:000000000000663C                 db  83h
.eh_frame:000000000000663D                 db    2
.eh_frame:000000000000663E                 db  5Ah ; Z
.eh_frame:000000000000663F                 db  0Ah
.eh_frame:0000000000006640                 db  0Eh
.eh_frame:0000000000006641                 db    8
.eh_frame:0000000000006642                 db  4Ah ; J
.eh_frame:0000000000006643                 db  0Bh
.eh_frame:0000000000006644                 db  53h ; S
.eh_frame:0000000000006645                 db  0Eh
.eh_frame:0000000000006646                 db    8
.eh_frame:0000000000006647                 db    0
.eh_frame:0000000000006648                 db  2Ch ; ,
.eh_frame:0000000000006649                 db    0
.eh_frame:000000000000664A                 db    0
.eh_frame:000000000000664B                 db    0
.eh_frame:000000000000664C                 db  1Ch
.eh_frame:000000000000664D                 db  0Bh
.eh_frame:000000000000664E                 db    0
.eh_frame:000000000000664F                 db    0
.eh_frame:0000000000006650                 db  80h
.eh_frame:0000000000006651                 db 0E5h
.eh_frame:0000000000006652                 db 0FFh
.eh_frame:0000000000006653                 db 0FFh
.eh_frame:0000000000006654                 db  57h ; W
.eh_frame:0000000000006655                 db    0
.eh_frame:0000000000006656                 db    0
.eh_frame:0000000000006657                 db    0
.eh_frame:0000000000006658                 db    0
.eh_frame:0000000000006659                 db  63h ; c
.eh_frame:000000000000665A                 db  0Eh
.eh_frame:000000000000665B                 db  10h
.eh_frame:000000000000665C                 db  8Ch
.eh_frame:000000000000665D                 db    2
.eh_frame:000000000000665E                 db  41h ; A
.eh_frame:000000000000665F                 db  0Eh
.eh_frame:0000000000006660                 db  18h
.eh_frame:0000000000006661                 db  86h
.eh_frame:0000000000006662                 db    3
.eh_frame:0000000000006663                 db  44h ; D
.eh_frame:0000000000006664                 db  0Eh
.eh_frame:0000000000006665                 db  20h
.eh_frame:0000000000006666                 db  83h
.eh_frame:0000000000006667                 db    4
.eh_frame:0000000000006668                 db  6Bh ; k
.eh_frame:0000000000006669                 db  0Eh
.eh_frame:000000000000666A                 db  18h
.eh_frame:000000000000666B                 db  41h ; A
.eh_frame:000000000000666C                 db  0Eh
.eh_frame:000000000000666D                 db  10h
.eh_frame:000000000000666E                 db  42h ; B
.eh_frame:000000000000666F                 db  0Eh
.eh_frame:0000000000006670                 db    8
.eh_frame:0000000000006671                 db    0
.eh_frame:0000000000006672                 db    0
.eh_frame:0000000000006673                 db    0
.eh_frame:0000000000006674                 db    0
.eh_frame:0000000000006675                 db    0
.eh_frame:0000000000006676                 db    0
.eh_frame:0000000000006677                 db    0
.eh_frame:0000000000006678                 db  44h ; D
.eh_frame:0000000000006679                 db    0
.eh_frame:000000000000667A                 db    0
.eh_frame:000000000000667B                 db    0
.eh_frame:000000000000667C                 db  4Ch ; L
.eh_frame:000000000000667D                 db  0Bh
.eh_frame:000000000000667E                 db    0
.eh_frame:000000000000667F                 db    0
.eh_frame:0000000000006680                 db 0B0h
.eh_frame:0000000000006681                 db 0E5h
.eh_frame:0000000000006682                 db 0FFh
.eh_frame:0000000000006683                 db 0FFh
.eh_frame:0000000000006684                 db  65h ; e
.eh_frame:0000000000006685                 db    0
.eh_frame:0000000000006686                 db    0
.eh_frame:0000000000006687                 db    0
.eh_frame:0000000000006688                 db    0
.eh_frame:0000000000006689                 db  42h ; B
.eh_frame:000000000000668A                 db  0Eh
.eh_frame:000000000000668B                 db  10h
.eh_frame:000000000000668C                 db  8Fh
.eh_frame:000000000000668D                 db    2
.eh_frame:000000000000668E                 db  42h ; B
.eh_frame:000000000000668F                 db  0Eh
.eh_frame:0000000000006690                 db  18h
.eh_frame:0000000000006691                 db  8Eh
.eh_frame:0000000000006692                 db    3
.eh_frame:0000000000006693                 db  45h ; E
.eh_frame:0000000000006694                 db  0Eh
.eh_frame:0000000000006695                 db  20h
.eh_frame:0000000000006696                 db  8Dh
.eh_frame:0000000000006697                 db    4
.eh_frame:0000000000006698                 db  42h ; B
.eh_frame:0000000000006699                 db  0Eh
.eh_frame:000000000000669A                 db  28h ; (
.eh_frame:000000000000669B                 db  8Ch
.eh_frame:000000000000669C                 db    5
.eh_frame:000000000000669D                 db  48h ; H
.eh_frame:000000000000669E                 db  0Eh
.eh_frame:000000000000669F                 db  30h ; 0
.eh_frame:00000000000066A0                 db  86h
.eh_frame:00000000000066A1                 db    6
.eh_frame:00000000000066A2                 db  48h ; H
.eh_frame:00000000000066A3                 db  0Eh
.eh_frame:00000000000066A4                 db  38h ; 8
.eh_frame:00000000000066A5                 db  83h
.eh_frame:00000000000066A6                 db    7
.eh_frame:00000000000066A7                 db  4Dh ; M
.eh_frame:00000000000066A8                 db  0Eh
.eh_frame:00000000000066A9                 db  40h ; @
.eh_frame:00000000000066AA                 db  72h ; r
.eh_frame:00000000000066AB                 db  0Eh
.eh_frame:00000000000066AC                 db  38h ; 8
.eh_frame:00000000000066AD                 db  41h ; A
.eh_frame:00000000000066AE                 db  0Eh
.eh_frame:00000000000066AF                 db  30h ; 0
.eh_frame:00000000000066B0                 db  41h ; A
.eh_frame:00000000000066B1                 db  0Eh
.eh_frame:00000000000066B2                 db  28h ; (
.eh_frame:00000000000066B3                 db  42h ; B
.eh_frame:00000000000066B4                 db  0Eh
.eh_frame:00000000000066B5                 db  20h
.eh_frame:00000000000066B6                 db  42h ; B
.eh_frame:00000000000066B7                 db  0Eh
.eh_frame:00000000000066B8                 db  18h
.eh_frame:00000000000066B9                 db  42h ; B
.eh_frame:00000000000066BA                 db  0Eh
.eh_frame:00000000000066BB                 db  10h
.eh_frame:00000000000066BC                 db  42h ; B
.eh_frame:00000000000066BD                 db  0Eh
.eh_frame:00000000000066BE                 db    8
.eh_frame:00000000000066BF                 db    0
.eh_frame:00000000000066C0                 db  14h
.eh_frame:00000000000066C1                 db    0
.eh_frame:00000000000066C2                 db    0
.eh_frame:00000000000066C3                 db    0
.eh_frame:00000000000066C4                 db  94h
.eh_frame:00000000000066C5                 db  0Bh
.eh_frame:00000000000066C6                 db    0
.eh_frame:00000000000066C7                 db    0
.eh_frame:00000000000066C8                 db 0D8h
.eh_frame:00000000000066C9                 db 0E5h
.eh_frame:00000000000066CA                 db 0FFh
.eh_frame:00000000000066CB                 db 0FFh
.eh_frame:00000000000066CC                 db    2
.eh_frame:00000000000066CD                 db    0
.eh_frame:00000000000066CE                 db    0
.eh_frame:00000000000066CF                 db    0
.eh_frame:00000000000066D0                 db    0
.eh_frame:00000000000066D1                 db    0
.eh_frame:00000000000066D2                 db    0
.eh_frame:00000000000066D3                 db    0
.eh_frame:00000000000066D4                 db    0
.eh_frame:00000000000066D5                 db    0
.eh_frame:00000000000066D6                 db    0
.eh_frame:00000000000066D7                 db    0
.eh_frame:00000000000066D8                 db  10h
.eh_frame:00000000000066D9                 db    0
.eh_frame:00000000000066DA                 db    0
.eh_frame:00000000000066DB                 db    0
.eh_frame:00000000000066DC                 db 0ACh
.eh_frame:00000000000066DD                 db  0Bh
.eh_frame:00000000000066DE                 db    0
.eh_frame:00000000000066DF                 db    0
.eh_frame:00000000000066E0                 db 0D0h
.eh_frame:00000000000066E1                 db 0E5h
.eh_frame:00000000000066E2                 db 0FFh
.eh_frame:00000000000066E3                 db 0FFh
.eh_frame:00000000000066E4                 db  0Eh
.eh_frame:00000000000066E5                 db    0
.eh_frame:00000000000066E6                 db    0
.eh_frame:00000000000066E7                 db    0
.eh_frame:00000000000066E8                 db    0
.eh_frame:00000000000066E9                 db    0
.eh_frame:00000000000066EA                 db    0
.eh_frame:00000000000066EB                 db    0
.eh_frame:00000000000066EC __FRAME_END__   db    0
.eh_frame:00000000000066ED                 db    0
.eh_frame:00000000000066EE                 db    0
.eh_frame:00000000000066EF                 db    0
.eh_frame:00000000000066EF _eh_frame       ends
.eh_frame:00000000000066EF
.init_array:0000000000206B70 ; ELF Initialization Function Table
.init_array:0000000000206B70 ; ===========================================================================
.init_array:0000000000206B70
.init_array:0000000000206B70 ; Segment type: Pure data
.init_array:0000000000206B70 ; Segment permissions: Read/Write
.init_array:0000000000206B70 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B70                 assume cs:_init_array
.init_array:0000000000206B70                 ;org 206B70h
.init_array:0000000000206B70 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B70                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B70                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B70 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B70
.fini_array:0000000000206B78 ; ELF Termination Function Table
.fini_array:0000000000206B78 ; ===========================================================================
.fini_array:0000000000206B78
.fini_array:0000000000206B78 ; Segment type: Pure data
.fini_array:0000000000206B78 ; Segment permissions: Read/Write
.fini_array:0000000000206B78 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B78                 assume cs:_fini_array
.fini_array:0000000000206B78                 ;org 206B78h
.fini_array:0000000000206B78 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B78                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B78 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B78
.data.rel.ro:0000000000206B80 ; ===========================================================================
.data.rel.ro:0000000000206B80
.data.rel.ro:0000000000206B80 ; Segment type: Pure data
.data.rel.ro:0000000000206B80 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B80 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B80                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B80                 ;org 206B80h
.data.rel.ro:0000000000206B80 ; struct option long_options
.data.rel.ro:0000000000206B80 long_options    dq offset aHelp         ; name
.data.rel.ro:0000000000206B80                                         ; DATA XREF: parse_long_options:loc_1FC0↑o
.data.rel.ro:0000000000206B80                                         ; parse_gnu_standard_options_only+7C↑o
.data.rel.ro:0000000000206B80                 dd 0                    ; has_arg ; "help"
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206B80                 dq 0                    ; flag
.data.rel.ro:0000000000206B80                 dd 68h                  ; val
.data.rel.ro:0000000000206B80                 db 4 dup(0)
.data.rel.ro:0000000000206BA0                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206BA8                 db    0
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  76h ; v
.data.rel.ro:0000000000206BB9                 db    0
.data.rel.ro:0000000000206BBA                 db    0
.data.rel.ro:0000000000206BBB                 db    0
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 db    0
.data.rel.ro:0000000000206BC1                 db    0
.data.rel.ro:0000000000206BC2                 db    0
.data.rel.ro:0000000000206BC3                 db    0
.data.rel.ro:0000000000206BC4                 db    0
.data.rel.ro:0000000000206BC5                 db    0
.data.rel.ro:0000000000206BC6                 db    0
.data.rel.ro:0000000000206BC7                 db    0
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db    0
.data.rel.ro:0000000000206BD9                 db    0
.data.rel.ro:0000000000206BDA                 db    0
.data.rel.ro:0000000000206BDB                 db    0
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 public quoting_style_args
.data.rel.ro:0000000000206BE0 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206BE8                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206BF0                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206BF8                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C00                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C08                 dq offset aC_1          ; "c"
.data.rel.ro:0000000000206C10                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C18                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C20                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C28                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C30                 db    0
.data.rel.ro:0000000000206C31                 db    0
.data.rel.ro:0000000000206C32                 db    0
.data.rel.ro:0000000000206C33                 db    0
.data.rel.ro:0000000000206C34                 db    0
.data.rel.ro:0000000000206C35                 db    0
.data.rel.ro:0000000000206C36                 db    0
.data.rel.ro:0000000000206C37                 db    0
.data.rel.ro:0000000000206C37 _data_rel_ro    ends
.data.rel.ro:0000000000206C37
LOAD:0000000000206C38 ; ELF Dynamic Information
LOAD:0000000000206C38 ; ===========================================================================
LOAD:0000000000206C38
LOAD:0000000000206C38 ; Segment type: Pure data
LOAD:0000000000206C38 ; Segment permissions: Read/Write
LOAD:0000000000206C38 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C38                 assume cs:LOAD
LOAD:0000000000206C38                 ;org 206C38h
LOAD:0000000000206C38 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C38                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C38                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206C48                 Elf64_Dyn <0Ch, 1390h>  ; DT_INIT
LOAD:0000000000206C58                 Elf64_Dyn <0Dh, 4CC0h>  ; DT_FINI
LOAD:0000000000206C68                 Elf64_Dyn <19h, 206B70h> ; DT_INIT_ARRAY
LOAD:0000000000206C78                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206C88                 Elf64_Dyn <1Ah, 206B78h> ; DT_FINI_ARRAY
LOAD:0000000000206C98                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206CA8                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206CB8                 Elf64_Dyn <5, 8B0h>     ; DT_STRTAB
LOAD:0000000000206CC8                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206CD8                 Elf64_Dyn <0Ah, 2CCh>   ; DT_STRSZ
LOAD:0000000000206CE8                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206CF8                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D08                 Elf64_Dyn <3, 206E28h>  ; DT_PLTGOT
LOAD:0000000000206D18                 Elf64_Dyn <2, 480h>     ; DT_PLTRELSZ
LOAD:0000000000206D28                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D38                 Elf64_Dyn <17h, 0F10h>  ; DT_JMPREL
LOAD:0000000000206D48                 Elf64_Dyn <7, 0C58h>    ; DT_RELA
LOAD:0000000000206D58                 Elf64_Dyn <8, 2B8h>     ; DT_RELASZ
LOAD:0000000000206D68                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206D78                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206D88                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206D98                 Elf64_Dyn <6FFFFFFEh, 0BF8h> ; DT_VERNEED
LOAD:0000000000206DA8                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206DB8                 Elf64_Dyn <6FFFFFF0h, 0B7Ch> ; DT_VERSYM
LOAD:0000000000206DC8                 Elf64_Dyn <6FFFFFF9h, 12h> ; DT_RELACOUNT
LOAD:0000000000206DD8                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206DE8                 db    0
LOAD:0000000000206DE9                 db    0
LOAD:0000000000206DEA                 db    0
LOAD:0000000000206DEB                 db    0
LOAD:0000000000206DEC                 db    0
LOAD:0000000000206DED                 db    0
LOAD:0000000000206DEE                 db    0
LOAD:0000000000206DEF                 db    0
LOAD:0000000000206DF0                 db    0
LOAD:0000000000206DF1                 db    0
LOAD:0000000000206DF2                 db    0
LOAD:0000000000206DF3                 db    0
LOAD:0000000000206DF4                 db    0
LOAD:0000000000206DF5                 db    0
LOAD:0000000000206DF6                 db    0
LOAD:0000000000206DF7                 db    0
LOAD:0000000000206DF8                 db    0
LOAD:0000000000206DF9                 db    0
LOAD:0000000000206DFA                 db    0
LOAD:0000000000206DFB                 db    0
LOAD:0000000000206DFC                 db    0
LOAD:0000000000206DFD                 db    0
LOAD:0000000000206DFE                 db    0
LOAD:0000000000206DFF                 db    0
LOAD:0000000000206E00                 db    0
LOAD:0000000000206E01                 db    0
LOAD:0000000000206E02                 db    0
LOAD:0000000000206E03                 db    0
LOAD:0000000000206E04                 db    0
LOAD:0000000000206E05                 db    0
LOAD:0000000000206E06                 db    0
LOAD:0000000000206E07                 db    0
LOAD:0000000000206E08                 db    0
LOAD:0000000000206E09                 db    0
LOAD:0000000000206E0A                 db    0
LOAD:0000000000206E0B                 db    0
LOAD:0000000000206E0C                 db    0
LOAD:0000000000206E0D                 db    0
LOAD:0000000000206E0E                 db    0
LOAD:0000000000206E0F                 db    0
LOAD:0000000000206E10                 db    0
LOAD:0000000000206E11                 db    0
LOAD:0000000000206E12                 db    0
LOAD:0000000000206E13                 db    0
LOAD:0000000000206E14                 db    0
LOAD:0000000000206E15                 db    0
LOAD:0000000000206E16                 db    0
LOAD:0000000000206E17                 db    0
LOAD:0000000000206E18                 db    0
LOAD:0000000000206E19                 db    0
LOAD:0000000000206E1A                 db    0
LOAD:0000000000206E1B                 db    0
LOAD:0000000000206E1C                 db    0
LOAD:0000000000206E1D                 db    0
LOAD:0000000000206E1E                 db    0
LOAD:0000000000206E1F                 db    0
LOAD:0000000000206E20                 db    0
LOAD:0000000000206E21                 db    0
LOAD:0000000000206E22                 db    0
LOAD:0000000000206E23                 db    0
LOAD:0000000000206E24                 db    0
LOAD:0000000000206E25                 db    0
LOAD:0000000000206E26                 db    0
LOAD:0000000000206E27                 db    0
LOAD:0000000000206E27 LOAD            ends
LOAD:0000000000206E27
.got:0000000000206E28 ; ===========================================================================
.got:0000000000206E28
.got:0000000000206E28 ; Segment type: Pure data
.got:0000000000206E28 ; Segment permissions: Read/Write
.got:0000000000206E28 _got            segment qword public 'DATA' use64
.got:0000000000206E28                 assume cs:_got
.got:0000000000206E28                 ;org 206E28h
.got:0000000000206E28 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E30 qword_206E30    dq 0                    ; DATA XREF: sub_13B0↑r
.got:0000000000206E38 qword_206E38    dq 0                    ; DATA XREF: sub_13B0+6↑r
.got:0000000000206E40 utmpxname_ptr   dq offset utmpxname     ; DATA XREF: _utmpxname↑r
.got:0000000000206E48 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206E50 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206E58 __errno_location_ptr dq offset __errno_location
.got:0000000000206E58                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206E60 strncpy_ptr     dq offset strncpy       ; DATA XREF: _strncpy↑r
.got:0000000000206E68 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206E70 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206E78 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206E80 qsort_ptr       dq offset qsort         ; DATA XREF: _qsort↑r
.got:0000000000206E88 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206E90 endutxent_ptr   dq offset endutxent     ; DATA XREF: _endutxent↑r
.got:0000000000206E98 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EA0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EA0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EA8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206EB0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206EB0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EB8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206EC0 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206EC0                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206EC8 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206ED0 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206ED8 __overflow_ptr  dq offset __overflow    ; DATA XREF: ___overflow↑r
.got:0000000000206EE0 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206EE8 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206EF0 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206EF8 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F00 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F00                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F08 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F10 strcmp_ptr      dq offset strcmp        ; DATA XREF: _strcmp↑r
.got:0000000000206F18 setutxent_ptr   dq offset setutxent     ; DATA XREF: _setutxent↑r
.got:0000000000206F20 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F28 kill_ptr        dq offset kill          ; DATA XREF: _kill↑r
.got:0000000000206F30 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F38 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F40 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F48 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F50 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F58 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F60 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F68 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F70 getutxent_ptr   dq offset getutxent     ; DATA XREF: _getutxent↑r
.got:0000000000206F78 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F80 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206F88 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206F90 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206F98 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FA0 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FA0                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FA8 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FB0 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FB8 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FB8                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FC0 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FC0                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FC8 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FC8                                         ; DATA XREF: start+24↑r
.got:0000000000206FD0 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FD0                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FD8 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FE0 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FE0                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FE0                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FE0 _got            ends
.got:0000000000206FE0
LOAD:0000000000206FE8 ; ===========================================================================
LOAD:0000000000206FE8
LOAD:0000000000206FE8 ; Segment type: Pure data
LOAD:0000000000206FE8 ; Segment permissions: Read/Write
LOAD:0000000000206FE8 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206FE8                 assume cs:LOAD
LOAD:0000000000206FE8                 ;org 206FE8h
LOAD:0000000000206FE8                 align 20h
LOAD:0000000000206FE8 LOAD            ends
LOAD:0000000000206FE8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+58↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1EE2↑r
.data:0000000000207018                                         ; parse_gnu_standard_options_only:loc_2150↑r ...
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_35DD↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000808↑o
.bss:0000000000207080                                         ; LOAD:0000000000000850↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007F0↑o
.bss:0000000000207088                                         ; users+DF↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000898↑o
.bss:0000000000207090                                         ; main+90↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:0000000000207098 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:0000000000207098                                         ; DATA XREF: LOAD:0000000000000820↑o
.bss:0000000000207098                                         ; LOAD:0000000000000838↑o ...
.bss:0000000000207098                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public opterr@@GLIBC_2_2_5
.bss:00000000002070A0 opterr@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:0000000000000868↑o
.bss:00000000002070A0                                         ; parse_long_options+67↑r ...
.bss:00000000002070A0                                         ; Alternative name is 'opterr'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A4                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000880↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: usage+14↑r
.bss:00000000002070E0                                         ; set_program_name:loc_21FD↑w
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; int utmpxname(const char *file)
extern:0000000000207240                 extrn utmpxname:near    ; CODE XREF: _utmpxname↑j
extern:0000000000207240                                         ; DATA XREF: .got:utmpxname_ptr↑o
extern:0000000000207248 ; void free(void *ptr)
extern:0000000000207248                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207248                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207250 ; void __noreturn abort(void)
extern:0000000000207250                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207250                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207258 ; int *_errno_location(void)
extern:0000000000207258                 extrn __errno_location:near
extern:0000000000207258                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207258                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207260 ; char *strncpy(char *dest, const char *src, size_t n)
extern:0000000000207260                 extrn strncpy:near      ; CODE XREF: _strncpy↑j
extern:0000000000207260                                         ; DATA XREF: .got:strncpy_ptr↑o
extern:0000000000207268 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207268                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207268                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207270 ; void __noreturn exit(int status)
extern:0000000000207270                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207270                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207278 ; size_t _fpending(FILE *fp)
extern:0000000000207278                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207278                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207280 ; void qsort(void *base, size_t nmemb, size_t size, __compar_fn_t compar)
extern:0000000000207280                 extrn qsort:near        ; CODE XREF: _qsort↑j
extern:0000000000207280                                         ; DATA XREF: .got:qsort_ptr↑o
extern:0000000000207288 ; char *textdomain(const char *domainname)
extern:0000000000207288                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207288                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207290 ; void endutxent(void)
extern:0000000000207290                 extrn endutxent:near    ; CODE XREF: _endutxent↑j
extern:0000000000207290                                         ; DATA XREF: .got:endutxent_ptr↑o
extern:0000000000207298 ; int fclose(FILE *stream)
extern:0000000000207298                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207298                                         ; DATA XREF: .got:fclose_ptr↑o
extern:00000000002072A0 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:00000000002072A0                 extrn bindtextdomain:near
extern:00000000002072A0                                         ; CODE XREF: _bindtextdomain↑j
extern:00000000002072A0                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:00000000002072A8 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:00000000002072A8                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:00000000002072A8                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:00000000002072B0 ; size_t _ctype_get_mb_cur_max(void)
extern:00000000002072B0                 extrn __ctype_get_mb_cur_max:near
extern:00000000002072B0                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:00000000002072B0                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:00000000002072B8 ; size_t strlen(const char *s)
extern:00000000002072B8                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072C0                 extrn __stack_chk_fail:near
extern:00000000002072C0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072C0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072C8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072C8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072C8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072D0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072D0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072D0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072D8 ; int _overflow(_IO_FILE *, int)
extern:00000000002072D8                 extrn __overflow:near   ; CODE XREF: ___overflow↑j
extern:00000000002072D8                                         ; DATA XREF: .got:__overflow_ptr↑o
extern:00000000002072E0 ; char *strrchr(const char *s, int c)
extern:00000000002072E0                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072E0                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072E8 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072E8                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072E8                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072F0 ; void *memset(void *s, int c, size_t n)
extern:00000000002072F0                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072F0                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072F8 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072F8                 extrn __libc_start_main:near
extern:00000000002072F8                                         ; CODE XREF: start+24↑p
extern:00000000002072F8                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:0000000000207300 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:0000000000207300                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:0000000000207300                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:0000000000207308 ; int fputs_unlocked(const char *s, FILE *stream)
extern:0000000000207308                 extrn fputs_unlocked:near
extern:0000000000207308                                         ; CODE XREF: _fputs_unlocked↑j
extern:0000000000207308                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:0000000000207310 ; void *calloc(size_t nmemb, size_t size)
extern:0000000000207310                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:0000000000207310                                         ; DATA XREF: .got:calloc_ptr↑o
extern:0000000000207318 ; int strcmp(const char *s1, const char *s2)
extern:0000000000207318                 extrn strcmp:near       ; CODE XREF: _strcmp↑j
extern:0000000000207318                                         ; DATA XREF: .got:strcmp_ptr↑o
extern:0000000000207320 ; void setutxent(void)
extern:0000000000207320                 extrn setutxent:near    ; CODE XREF: _setutxent↑j
extern:0000000000207320                                         ; DATA XREF: .got:setutxent_ptr↑o
extern:0000000000207328 ; void *memcpy(void *dest, const void *src, size_t n)
extern:0000000000207328                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:0000000000207328                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:0000000000207330 ; int kill(__pid_t pid, int sig)
extern:0000000000207330                 extrn kill:near         ; CODE XREF: _kill↑j
extern:0000000000207330                                         ; DATA XREF: .got:kill_ptr↑o
extern:0000000000207338 ; int fileno(FILE *stream)
extern:0000000000207338                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:0000000000207338                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207340 ; void *malloc(size_t size)
extern:0000000000207340                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207340                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207348 ; int fflush(FILE *stream)
extern:0000000000207348                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207348                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207350 ; char *nl_langinfo(nl_item item)
extern:0000000000207350                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207350                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207358 ; int _freading(FILE *fp)
extern:0000000000207358                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207358                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207360 ; void *realloc(void *ptr, size_t size)
extern:0000000000207360                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207360                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207368 ; char *setlocale(int category, const char *locale)
extern:0000000000207368                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207368                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207370                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207370                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207378 ; struct utmpx *getutxent(void)
extern:0000000000207378                 extrn getutxent:near    ; CODE XREF: _getutxent↑j
extern:0000000000207378                                         ; DATA XREF: .got:getutxent_ptr↑o
extern:0000000000207380 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207380                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207380                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207388 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207388                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207388                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207390 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207390                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207390                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207398 ; void __noreturn exit(int status)
extern:0000000000207398                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207398                                         ; DATA XREF: .got:exit_ptr↑o
extern:00000000002073A0 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:00000000002073A0                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:00000000002073A0                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:00000000002073A8                 extrn __fprintf_chk:near
extern:00000000002073A8                                         ; CODE XREF: ___fprintf_chk↑j
extern:00000000002073A8                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:00000000002073B0 ; int mbsinit(const mbstate_t *ps)
extern:00000000002073B0                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:00000000002073B0                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:00000000002073B8 ; int iswprint(wint_t wc)
extern:00000000002073B8                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:00000000002073B8                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:00000000002073C0 ; int __fastcall __cxa_finalize(void *)
extern:00000000002073C0                 extrn __imp___cxa_finalize:near ; weak
extern:00000000002073C0                                         ; CODE XREF: __cxa_finalize↑j
extern:00000000002073C0                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00000000002073C8 ; const unsigned __int16 **_ctype_b_loc(void)
extern:00000000002073C8                 extrn __ctype_b_loc:near
extern:00000000002073C8                                         ; CODE XREF: ___ctype_b_loc↑j
extern:00000000002073C8                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:00000000002073D0                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00000000002073D0                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00000000002073D8                 extrn __gmon_start__:near ; weak
extern:00000000002073D8                                         ; CODE XREF: _init_proc+10↑p
extern:00000000002073D8                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00000000002073E0                 extrn _ITM_registerTMCloneTable ; weak
extern:00000000002073E0                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00000000002073E0
extern:00000000002073E0
extern:00000000002073E0                 end start
