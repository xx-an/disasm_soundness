LOAD:0000000000000000 ;
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:0000000000000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:0000000000000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:0000000000000000 ; |                              Virginia Tech                              |
LOAD:0000000000000000 ; +-------------------------------------------------------------------------+
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Input SHA256 : 87A953C35B462A4B5D537AF91EC291C9533A75BC7523824AED2E9E9CC0FC6161
LOAD:0000000000000000 ; Input MD5    : 74FA101808E077A61F9436F288BA68C0
LOAD:0000000000000000 ; Input CRC32  : D6B74E9F
LOAD:0000000000000000
LOAD:0000000000000000 ; File Name   : /home/cindy/Documents/Projects/DSV/benchmark/coreutils-build/runcon
LOAD:0000000000000000 ; Format      : ELF64 for x86-64 (Shared object)
LOAD:0000000000000000 ; Interpreter '/lib64/ld-linux-x86-64.so.2'
LOAD:0000000000000000 ; Needed Library 'libc.so.6'
LOAD:0000000000000000 ;
LOAD:0000000000000000 ; Source File : 'runcon.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000 ; Source File : 'version.c'
LOAD:0000000000000000 ; Source File : 'closeout.c'
LOAD:0000000000000000 ; Source File : 'exitfail.c'
LOAD:0000000000000000 ; Source File : 'progname.c'
LOAD:0000000000000000 ; Source File : 'quotearg.c'
LOAD:0000000000000000 ; Source File : 'version-etc.c'
LOAD:0000000000000000 ; Source File : 'version-etc-fsf.c'
LOAD:0000000000000000 ; Source File : 'xmalloc.c'
LOAD:0000000000000000 ; Source File : 'xalloc-die.c'
LOAD:0000000000000000 ; Source File : 'mbrtowc.c'
LOAD:0000000000000000 ; Source File : 'close-stream.c'
LOAD:0000000000000000 ; Source File : 'hard-locale.c'
LOAD:0000000000000000 ; Source File : 'localcharset.c'
LOAD:0000000000000000 ; Source File : 'fclose.c'
LOAD:0000000000000000 ; Source File : 'fflush.c'
LOAD:0000000000000000 ; Source File : 'fseeko.c'
LOAD:0000000000000000 ; Source File : 'crtstuff.c'
LOAD:0000000000000000
LOAD:0000000000000000                 .686p
LOAD:0000000000000000                 .mmx
LOAD:0000000000000000                 .model flat
LOAD:0000000000000000 .intel_syntax noprefix
LOAD:0000000000000000
LOAD:0000000000000000 ; ===========================================================================
LOAD:0000000000000000
LOAD:0000000000000000 ; Segment type: Pure code
LOAD:0000000000000000 ; Segment permissions: Read/Execute
LOAD:0000000000000000 LOAD            segment byte public 'CODE' use64
LOAD:0000000000000000                 assume cs:LOAD
LOAD:0000000000000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:00000000000002F8↓o
LOAD:0000000000000000                                         ; LOAD:0000000000000310↓o ...
LOAD:0000000000000000                                         ; File format: \x7FELF
LOAD:0000000000000004                 db 2                    ; File class: 64-bit
LOAD:0000000000000005                 db 1                    ; Data encoding: little-endian
LOAD:0000000000000006                 db 1                    ; File version
LOAD:0000000000000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:0000000000000008                 db 0                    ; ABI Version
LOAD:0000000000000009                 db 7 dup(0)             ; Padding
LOAD:0000000000000010                 dw 3                    ; File type: Shared object
LOAD:0000000000000012                 dw 3Eh                  ; Machine: x86-64
LOAD:0000000000000014                 dd 1                    ; File version
LOAD:0000000000000018                 dq offset start         ; Entry point
LOAD:0000000000000020                 dq 40h                  ; PHT file offset
LOAD:0000000000000028                 dq 21E90h               ; SHT file offset
LOAD:0000000000000030                 dd 0                    ; Processor-specific flags
LOAD:0000000000000034                 dw 40h                  ; ELF header size
LOAD:0000000000000036                 dw 38h                  ; PHT entry size
LOAD:0000000000000038                 dw 9                    ; Number of entries in PHT
LOAD:000000000000003A                 dw 40h                  ; SHT entry size
LOAD:000000000000003C                 dw 25h                  ; Number of entries in SHT
LOAD:000000000000003E                 dw 24h                  ; SHT entry index for string table
LOAD:0000000000000040 ; ELF64 Program Header
LOAD:0000000000000040 ; PHT Entry 0
LOAD:0000000000000040 dword_40        dd 6                    ; DATA XREF: LOAD:0000000000000050↓o
LOAD:0000000000000040                                         ; Type: PHDR
LOAD:0000000000000044                 dd 4                    ; Flags
LOAD:0000000000000048                 dq 40h                  ; File offset
LOAD:0000000000000050                 dq offset dword_40      ; Virtual address
LOAD:0000000000000058                 dq 40h                  ; Physical address
LOAD:0000000000000060                 dq 1F8h                 ; Size in file image
LOAD:0000000000000068                 dq 1F8h                 ; Size in memory image
LOAD:0000000000000070                 dq 8                    ; Alignment
LOAD:0000000000000078 ; PHT Entry 1
LOAD:0000000000000078                 dd 3                    ; Type: INTERP
LOAD:000000000000007C                 dd 4                    ; Flags
LOAD:0000000000000080                 dq 238h                 ; File offset
LOAD:0000000000000088                 dq offset aLib64LdLinuxX8 ; Virtual address
LOAD:0000000000000090                 dq 238h                 ; Physical address
LOAD:0000000000000098                 dq 1Ch                  ; Size in file image
LOAD:00000000000000A0                 dq 1Ch                  ; Size in memory image
LOAD:00000000000000A8                 dq 1                    ; Alignment
LOAD:00000000000000B0 ; PHT Entry 2
LOAD:00000000000000B0                 dd 1                    ; Type: LOAD
LOAD:00000000000000B4                 dd 5                    ; Flags
LOAD:00000000000000B8                 dq 0                    ; File offset
LOAD:00000000000000C0                 dq 0                    ; Virtual address
LOAD:00000000000000C8                 dq 0                    ; Physical address
LOAD:00000000000000D0                 dq 6158h                ; Size in file image
LOAD:00000000000000D8                 dq 6158h                ; Size in memory image
LOAD:00000000000000E0                 dq 200000h              ; Alignment
LOAD:00000000000000E8 ; PHT Entry 3
LOAD:00000000000000E8                 dd 1                    ; Type: LOAD
LOAD:00000000000000EC                 dd 6                    ; Flags
LOAD:00000000000000F0                 dq 6B30h                ; File offset
LOAD:00000000000000F8                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000100 qword_100       dq 206B30h              ; DATA XREF: .data:slotvec0↓o
LOAD:0000000000000100                                         ; Physical address
LOAD:0000000000000108                 dq 550h                 ; Size in file image
LOAD:0000000000000110                 dq 708h                 ; Size in memory image
LOAD:0000000000000118                 dq 200000h              ; Alignment
LOAD:0000000000000120 ; PHT Entry 4
LOAD:0000000000000120                 dd 2                    ; Type: DYNAMIC
LOAD:0000000000000124                 dd 6                    ; Flags
LOAD:0000000000000128                 dq 6C98h                ; File offset
LOAD:0000000000000130                 dq offset _DYNAMIC      ; Virtual address
LOAD:0000000000000138                 dq 206C98h              ; Physical address
LOAD:0000000000000140                 dq 1F0h                 ; Size in file image
LOAD:0000000000000148                 dq 1F0h                 ; Size in memory image
LOAD:0000000000000150                 dq 8                    ; Alignment
LOAD:0000000000000158 ; PHT Entry 5
LOAD:0000000000000158                 dd 4                    ; Type: NOTE
LOAD:000000000000015C                 dd 4                    ; Flags
LOAD:0000000000000160                 dq 254h                 ; File offset
LOAD:0000000000000168                 dq offset dword_254     ; Virtual address
LOAD:0000000000000170                 dq 254h                 ; Physical address
LOAD:0000000000000178                 dq 44h                  ; Size in file image
LOAD:0000000000000180                 dq 44h                  ; Size in memory image
LOAD:0000000000000188                 dq 4                    ; Alignment
LOAD:0000000000000190 ; PHT Entry 6
LOAD:0000000000000190                 dd 6474E550h            ; Type: EH_FRAME
LOAD:0000000000000194                 dd 4                    ; Flags
LOAD:0000000000000198                 dq 5490h                ; File offset
LOAD:00000000000001A0                 dq offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000000000001A8                 dq 5490h                ; Physical address
LOAD:00000000000001B0                 dq 23Ch                 ; Size in file image
LOAD:00000000000001B8                 dq 23Ch                 ; Size in memory image
LOAD:00000000000001C0                 dq 4                    ; Alignment
LOAD:00000000000001C8 ; PHT Entry 7
LOAD:00000000000001C8                 dd 6474E551h            ; Type: STACK
LOAD:00000000000001CC                 dd 6                    ; Flags
LOAD:00000000000001D0                 dq 0                    ; File offset
LOAD:00000000000001D8                 dq 0                    ; Virtual address
LOAD:00000000000001E0                 dq 0                    ; Physical address
LOAD:00000000000001E8                 dq 0                    ; Size in file image
LOAD:00000000000001F0                 dq 0                    ; Size in memory image
LOAD:00000000000001F8                 dq 10h                  ; Alignment
LOAD:0000000000000200 ; PHT Entry 8
LOAD:0000000000000200                 dd 6474E552h            ; Type: RO-AFTER
LOAD:0000000000000204                 dd 4                    ; Flags
LOAD:0000000000000208                 dq 6B30h                ; File offset
LOAD:0000000000000210                 dq offset __frame_dummy_init_array_entry ; Virtual address
LOAD:0000000000000218                 dq 206B30h              ; Physical address
LOAD:0000000000000220                 dq 4D0h                 ; Size in file image
LOAD:0000000000000228                 dq 4D0h                 ; Size in memory image
LOAD:0000000000000230                 dq 1                    ; Alignment
LOAD:0000000000000238 aLib64LdLinuxX8 db '/lib64/ld-linux-x86-64.so.2',0
LOAD:0000000000000238                                         ; DATA XREF: LOAD:0000000000000088↑o
LOAD:0000000000000254 ; ELF Note Entry
LOAD:0000000000000254 dword_254       dd 4                    ; DATA XREF: LOAD:0000000000000168↑o
LOAD:0000000000000254                                         ; Name Size
LOAD:0000000000000258                 dd 10h                  ; Desc Size
LOAD:000000000000025C                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:0000000000000260 aGnu            db 'GNU',0              ; Name
LOAD:0000000000000264                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:0000000000000274 ; ELF Note Entry
LOAD:0000000000000274                 dd 4                    ; Name Size
LOAD:0000000000000278                 dd 14h                  ; Desc Size
LOAD:000000000000027C                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:0000000000000280 aGnu_0          db 'GNU',0              ; Name
LOAD:0000000000000284                 db 77h, 0ABh, 58h, 53h, 9Fh, 4, 0DCh, 0FDh, 35h, 0A9h ; Desc
LOAD:0000000000000284                 db 73h, 0FCh, 0BAh, 29h, 23h, 0D5h, 0CEh, 0D3h, 0BDh, 0C6h
LOAD:0000000000000298 ; ELF GNU Hash Table
LOAD:0000000000000298 elf_gnu_hash_nbuckets dd 3
LOAD:000000000000029C elf_gnu_hash_symbias dd 2Dh
LOAD:00000000000002A0 elf_gnu_hash_bitmask_nwords dd 1
LOAD:00000000000002A4 elf_gnu_hash_shift dd 6
LOAD:00000000000002A8 elf_gnu_hash_indexes dq 121C012000414D04h
LOAD:00000000000002B0 elf_gnu_hash_bucket dd 2Dh, 2Eh, 33h
LOAD:00000000000002BC elf_gnu_hash_chain dd 1C8C1D29h, 9E7650BCh, 9789A096h, 72632CCEh, 0F54162E4h
LOAD:00000000000002BC                 dd 1C8BF239h, 12F7C432h, 12F7A2B3h, 0
LOAD:00000000000002E0 ; ELF Symbol Table
LOAD:00000000000002E0                 Elf64_Sym <0>
LOAD:00000000000002F8                 Elf64_Sym <offset aFree - offset byte_7D8, 12h, 0, 0, offset dword_0, \ ; "free"
LOAD:00000000000002F8                            0>
LOAD:0000000000000310                 Elf64_Sym <offset aAbort - offset byte_7D8, 12h, 0, 0, offset dword_0,\ ; "abort"
LOAD:0000000000000310                            0>
LOAD:0000000000000328                 Elf64_Sym <offset aErrnoLocation - offset byte_7D8, 12h, 0, 0, \ ; "__errno_location"
LOAD:0000000000000328                            offset dword_0, 0>
LOAD:0000000000000340                 Elf64_Sym <offset aStrncmp - offset byte_7D8, 12h, 0, 0, \ ; "strncmp"
LOAD:0000000000000340                            offset dword_0, 0>
LOAD:0000000000000358                 Elf64_Sym <offset aItmDeregistert - offset byte_7D8, 20h, 0, 0, \ ; "_ITM_deregisterTMCloneTable"
LOAD:0000000000000358                            offset dword_0, 0>
LOAD:0000000000000370                 Elf64_Sym <offset aExit - offset byte_7D8, 12h, 0, 0, offset dword_0, \ ; "_exit"
LOAD:0000000000000370                            0>
LOAD:0000000000000388                 Elf64_Sym <offset aFpending - offset byte_7D8, 12h, 0, 0, \ ; "__fpending"
LOAD:0000000000000388                            offset dword_0, 0>
LOAD:00000000000003A0                 Elf64_Sym <offset aBindtextdomain+4 - offset byte_7D8, 12h, 0, 0, \ ; "textdomain"
LOAD:00000000000003A0                            offset dword_0, 0>
LOAD:00000000000003B8                 Elf64_Sym <offset aFclose - offset byte_7D8, 12h, 0, 0, \ ; "fclose"
LOAD:00000000000003B8                            offset dword_0, 0>
LOAD:00000000000003D0                 Elf64_Sym <offset aBindtextdomain - offset byte_7D8, 12h, 0, 0, \ ; "bindtextdomain"
LOAD:00000000000003D0                            offset dword_0, 0>
LOAD:00000000000003E8                 Elf64_Sym <offset aDcgettext - offset byte_7D8, 12h, 0, 0, \ ; "dcgettext"
LOAD:00000000000003E8                            offset dword_0, 0>
LOAD:0000000000000400                 Elf64_Sym <offset aCtypeGetMbCurM - offset byte_7D8, 12h, 0, 0, \ ; "__ctype_get_mb_cur_max"
LOAD:0000000000000400                            offset dword_0, 0>
LOAD:0000000000000418                 Elf64_Sym <offset aStrlen - offset byte_7D8, 12h, 0, 0, \ ; "strlen"
LOAD:0000000000000418                            offset dword_0, 0>
LOAD:0000000000000430                 Elf64_Sym <offset aStackChkFail - offset byte_7D8, 12h, 0, 0, \ ; "__stack_chk_fail"
LOAD:0000000000000430                            offset dword_0, 0>
LOAD:0000000000000448                 Elf64_Sym <offset aGetoptLong - offset byte_7D8, 12h, 0, 0, \ ; "getopt_long"
LOAD:0000000000000448                            offset dword_0, 0>
LOAD:0000000000000460                 Elf64_Sym <offset aMbrtowc - offset byte_7D8, 12h, 0, 0, \ ; "mbrtowc"
LOAD:0000000000000460                            offset dword_0, 0>
LOAD:0000000000000478                 Elf64_Sym <offset aStrrchr - offset byte_7D8, 12h, 0, 0, \ ; "strrchr"
LOAD:0000000000000478                            offset dword_0, 0>
LOAD:0000000000000490                 Elf64_Sym <offset aLseek - offset byte_7D8, 12h, 0, 0, offset dword_0,\ ; "lseek"
LOAD:0000000000000490                            0>
LOAD:00000000000004A8                 Elf64_Sym <offset aMemset - offset byte_7D8, 12h, 0, 0, \ ; "memset"
LOAD:00000000000004A8                            offset dword_0, 0>
LOAD:00000000000004C0                 Elf64_Sym <offset aLibcStartMain - offset byte_7D8, 12h, 0, 0, \ ; "__libc_start_main"
LOAD:00000000000004C0                            offset dword_0, 0>
LOAD:00000000000004D8                 Elf64_Sym <offset aMemcmp - offset byte_7D8, 12h, 0, 0, \ ; "memcmp"
LOAD:00000000000004D8                            offset dword_0, 0>
LOAD:00000000000004F0                 Elf64_Sym <offset aFputsUnlocked - offset byte_7D8, 12h, 0, 0, \ ; "fputs_unlocked"
LOAD:00000000000004F0                            offset dword_0, 0>
LOAD:0000000000000508                 Elf64_Sym <offset aCalloc - offset byte_7D8, 12h, 0, 0, \ ; "calloc"
LOAD:0000000000000508                            offset dword_0, 0>
LOAD:0000000000000520                 Elf64_Sym <offset aGmonStart - offset byte_7D8, 20h, 0, 0, \ ; "__gmon_start__"
LOAD:0000000000000520                            offset dword_0, 0>
LOAD:0000000000000538                 Elf64_Sym <offset aMemcpy - offset byte_7D8, 12h, 0, 0, \ ; "memcpy"
LOAD:0000000000000538                            offset dword_0, 0>
LOAD:0000000000000550                 Elf64_Sym <offset aFileno - offset byte_7D8, 12h, 0, 0, \ ; "fileno"
LOAD:0000000000000550                            offset dword_0, 0>
LOAD:0000000000000568                 Elf64_Sym <offset aMalloc - offset byte_7D8, 12h, 0, 0, \ ; "malloc"
LOAD:0000000000000568                            offset dword_0, 0>
LOAD:0000000000000580                 Elf64_Sym <offset aFflush - offset byte_7D8, 12h, 0, 0, \ ; "fflush"
LOAD:0000000000000580                            offset dword_0, 0>
LOAD:0000000000000598                 Elf64_Sym <offset aNlLanginfo - offset byte_7D8, 12h, 0, 0, \ ; "nl_langinfo"
LOAD:0000000000000598                            offset dword_0, 0>
LOAD:00000000000005B0                 Elf64_Sym <offset aFreading - offset byte_7D8, 12h, 0, 0, \ ; "__freading"
LOAD:00000000000005B0                            offset dword_0, 0>
LOAD:00000000000005C8                 Elf64_Sym <offset aRealloc - offset byte_7D8, 12h, 0, 0, \ ; "realloc"
LOAD:00000000000005C8                            offset dword_0, 0>
LOAD:00000000000005E0                 Elf64_Sym <offset aSetlocale - offset byte_7D8, 12h, 0, 0, \ ; "setlocale"
LOAD:00000000000005E0                            offset dword_0, 0>
LOAD:00000000000005F8                 Elf64_Sym <offset aPrintfChk - offset byte_7D8, 12h, 0, 0, \ ; "__printf_chk"
LOAD:00000000000005F8                            offset dword_0, 0>
LOAD:0000000000000610                 Elf64_Sym <offset aError - offset byte_7D8, 12h, 0, 0, offset dword_0,\ ; "error"
LOAD:0000000000000610                            0>
LOAD:0000000000000628                 Elf64_Sym <offset aFseeko - offset byte_7D8, 12h, 0, 0, \ ; "fseeko"
LOAD:0000000000000628                            offset dword_0, 0>
LOAD:0000000000000640                 Elf64_Sym <offset aCxaAtexit - offset byte_7D8, 12h, 0, 0, \ ; "__cxa_atexit"
LOAD:0000000000000640                            offset dword_0, 0>
LOAD:0000000000000658                 Elf64_Sym <offset aExit+1 - offset byte_7D8, 12h, 0, 0, \ ; "exit"
LOAD:0000000000000658                            offset dword_0, 0>
LOAD:0000000000000670                 Elf64_Sym <offset aFwrite - offset byte_7D8, 12h, 0, 0, \ ; "fwrite"
LOAD:0000000000000670                            offset dword_0, 0>
LOAD:0000000000000688                 Elf64_Sym <offset aFprintfChk - offset byte_7D8, 12h, 0, 0, \ ; "__fprintf_chk"
LOAD:0000000000000688                            offset dword_0, 0>
LOAD:00000000000006A0                 Elf64_Sym <offset aItmRegistertmc - offset byte_7D8, 20h, 0, 0, \ ; "_ITM_registerTMCloneTable"
LOAD:00000000000006A0                            offset dword_0, 0>
LOAD:00000000000006B8                 Elf64_Sym <offset aMbsinit - offset byte_7D8, 12h, 0, 0, \ ; "mbsinit"
LOAD:00000000000006B8                            offset dword_0, 0>
LOAD:00000000000006D0                 Elf64_Sym <offset aIswprint - offset byte_7D8, 12h, 0, 0, \ ; "iswprint"
LOAD:00000000000006D0                            offset dword_0, 0>
LOAD:00000000000006E8                 Elf64_Sym <offset aCxaFinalize - offset byte_7D8, 22h, 0, 0, \ ; "__cxa_finalize"
LOAD:00000000000006E8                            offset dword_0, 0>
LOAD:0000000000000700                 Elf64_Sym <offset aCtypeBLoc - offset byte_7D8, 12h, 0, 0, \ ; "__ctype_b_loc"
LOAD:0000000000000700                            offset dword_0, 0>
LOAD:0000000000000718                 Elf64_Sym <offset aStdout - offset byte_7D8, 11h, 0, 19h, \ ; "stdout"
LOAD:0000000000000718                            offset stdout@@GLIBC_2_2_5, 8>
LOAD:0000000000000730                 Elf64_Sym <offset aProgname - offset byte_7D8, 11h, 0, 19h, \ ; "__progname"
LOAD:0000000000000730                            offset __bss_start, 8>
LOAD:0000000000000748                 Elf64_Sym <offset aProgramInvocat - offset byte_7D8, 21h, 0, 19h, \ ; "program_invocation_name"
LOAD:0000000000000748                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000760                 Elf64_Sym <offset aPrognameFull - offset byte_7D8, 11h, 0, 19h, \ ; "__progname_full"
LOAD:0000000000000760                            offset program_invocation_name@@GLIBC_2_2_5, 8>
LOAD:0000000000000778                 Elf64_Sym <offset aProgramInvocat_0 - offset byte_7D8, 21h, 0, 19h, \ ; "program_invocation_short_name"
LOAD:0000000000000778                            offset __bss_start, 8>
LOAD:0000000000000790                 Elf64_Sym <offset aStderr - offset byte_7D8, 11h, 0, 19h, \ ; "stderr"
LOAD:0000000000000790                            offset stderr@@GLIBC_2_2_5, 8>
LOAD:00000000000007A8                 Elf64_Sym <offset aOptind - offset byte_7D8, 11h, 0, 19h, \ ; "optind"
LOAD:00000000000007A8                            offset optind@@GLIBC_2_2_5, 4>
LOAD:00000000000007C0                 Elf64_Sym <offset aOptarg - offset byte_7D8, 11h, 0, 19h, \ ; "optarg"
LOAD:00000000000007C0                            offset optarg@@GLIBC_2_2_5, 8>
LOAD:00000000000007D8 ; ELF String Table
LOAD:00000000000007D8 byte_7D8        db 0                    ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000007D8                                         ; LOAD:0000000000000310↑o ...
LOAD:00000000000007D9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000000000000AC8↓o
LOAD:00000000000007E3 aFflush         db 'fflush',0           ; DATA XREF: LOAD:0000000000000580↑o
LOAD:00000000000007EA aPrintfChk      db '__printf_chk',0     ; DATA XREF: LOAD:00000000000005F8↑o
LOAD:00000000000007F7 aSetlocale      db 'setlocale',0        ; DATA XREF: LOAD:00000000000005E0↑o
LOAD:0000000000000801 aMbrtowc        db 'mbrtowc',0          ; DATA XREF: LOAD:0000000000000460↑o
LOAD:0000000000000809 aStrncmp        db 'strncmp',0          ; DATA XREF: LOAD:0000000000000340↑o
LOAD:0000000000000811 aOptind         db 'optind',0           ; DATA XREF: LOAD:00000000000007A8↑o
LOAD:0000000000000818 aStrrchr        db 'strrchr',0          ; DATA XREF: LOAD:0000000000000478↑o
LOAD:0000000000000820 aDcgettext      db 'dcgettext',0        ; DATA XREF: LOAD:00000000000003E8↑o
LOAD:000000000000082A aError          db 'error',0            ; DATA XREF: LOAD:0000000000000610↑o
LOAD:0000000000000830 aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000000000000430↑o
LOAD:0000000000000841 aIswprint       db 'iswprint',0         ; DATA XREF: LOAD:00000000000006D0↑o
LOAD:000000000000084A aRealloc        db 'realloc',0          ; DATA XREF: LOAD:00000000000005C8↑o
LOAD:0000000000000852 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000000000000310↑o
LOAD:0000000000000858 aExit           db '_exit',0            ; DATA XREF: LOAD:0000000000000370↑o
LOAD:0000000000000858                                         ; LOAD:0000000000000658↑o
LOAD:000000000000085E aProgramInvocat db 'program_invocation_name',0
LOAD:000000000000085E                                         ; DATA XREF: LOAD:0000000000000748↑o
LOAD:0000000000000876 aCtypeGetMbCurM db '__ctype_get_mb_cur_max',0
LOAD:0000000000000876                                         ; DATA XREF: LOAD:0000000000000400↑o
LOAD:000000000000088D aCalloc         db 'calloc',0           ; DATA XREF: LOAD:0000000000000508↑o
LOAD:0000000000000894 aStrlen         db 'strlen',0           ; DATA XREF: LOAD:0000000000000418↑o
LOAD:000000000000089B aMemset         db 'memset',0           ; DATA XREF: LOAD:00000000000004A8↑o
LOAD:00000000000008A2 aErrnoLocation  db '__errno_location',0 ; DATA XREF: LOAD:0000000000000328↑o
LOAD:00000000000008B3 aMemcmp         db 'memcmp',0           ; DATA XREF: LOAD:00000000000004D8↑o
LOAD:00000000000008BA aFprintfChk     db '__fprintf_chk',0    ; DATA XREF: LOAD:0000000000000688↑o
LOAD:00000000000008C8 aStdout         db 'stdout',0           ; DATA XREF: LOAD:0000000000000718↑o
LOAD:00000000000008CF aLseek          db 'lseek',0            ; DATA XREF: LOAD:0000000000000490↑o
LOAD:00000000000008D5 aMemcpy         db 'memcpy',0           ; DATA XREF: LOAD:0000000000000538↑o
LOAD:00000000000008DC aFclose         db 'fclose',0           ; DATA XREF: LOAD:00000000000003B8↑o
LOAD:00000000000008E3 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000000000000568↑o
LOAD:00000000000008EA aMbsinit        db 'mbsinit',0          ; DATA XREF: LOAD:00000000000006B8↑o
LOAD:00000000000008F2 aNlLanginfo     db 'nl_langinfo',0      ; DATA XREF: LOAD:0000000000000598↑o
LOAD:00000000000008FE aCtypeBLoc      db '__ctype_b_loc',0    ; DATA XREF: LOAD:0000000000000700↑o
LOAD:000000000000090C aOptarg         db 'optarg',0           ; DATA XREF: LOAD:00000000000007C0↑o
LOAD:0000000000000913 aFreading       db '__freading',0       ; DATA XREF: LOAD:00000000000005B0↑o
LOAD:000000000000091E aStderr         db 'stderr',0           ; DATA XREF: LOAD:0000000000000790↑o
LOAD:0000000000000925 aGetoptLong     db 'getopt_long',0      ; DATA XREF: LOAD:0000000000000448↑o
LOAD:0000000000000931 aFileno         db 'fileno',0           ; DATA XREF: LOAD:0000000000000550↑o
LOAD:0000000000000938 aFwrite         db 'fwrite',0           ; DATA XREF: LOAD:0000000000000670↑o
LOAD:000000000000093F aFpending       db '__fpending',0       ; DATA XREF: LOAD:0000000000000388↑o
LOAD:000000000000094A aProgramInvocat_0 db 'program_invocation_short_name',0
LOAD:000000000000094A                                         ; DATA XREF: LOAD:0000000000000778↑o
LOAD:0000000000000968 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:00000000000006E8↑o
LOAD:0000000000000977 aBindtextdomain db 'bindtextdomain',0   ; DATA XREF: LOAD:00000000000003D0↑o
LOAD:0000000000000977                                         ; LOAD:00000000000003A0↑o
LOAD:0000000000000986 aLibcStartMain  db '__libc_start_main',0
LOAD:0000000000000986                                         ; DATA XREF: LOAD:00000000000004C0↑o
LOAD:0000000000000998 aFseeko         db 'fseeko',0           ; DATA XREF: LOAD:0000000000000628↑o
LOAD:000000000000099F aFputsUnlocked  db 'fputs_unlocked',0   ; DATA XREF: LOAD:00000000000004F0↑o
LOAD:00000000000009AE aFree           db 'free',0             ; DATA XREF: LOAD:00000000000002F8↑o
LOAD:00000000000009B3 aProgname       db '__progname',0       ; DATA XREF: LOAD:0000000000000730↑o
LOAD:00000000000009BE aPrognameFull   db '__progname_full',0  ; DATA XREF: LOAD:0000000000000760↑o
LOAD:00000000000009CE aCxaAtexit      db '__cxa_atexit',0     ; DATA XREF: LOAD:0000000000000640↑o
LOAD:00000000000009DB aGlibc23        db 'GLIBC_2.3',0        ; DATA XREF: LOAD:0000000000000AD8↓o
LOAD:00000000000009E5 aGlibc234       db 'GLIBC_2.3.4',0      ; DATA XREF: LOAD:0000000000000AE8↓o
LOAD:00000000000009F1 aGlibc214       db 'GLIBC_2.14',0       ; DATA XREF: LOAD:0000000000000AF8↓o
LOAD:00000000000009FC aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:0000000000000B08↓o
LOAD:0000000000000A06 aGlibc225       db 'GLIBC_2.2.5',0      ; DATA XREF: LOAD:0000000000000B18↓o
LOAD:0000000000000A12 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:0000000000000A12                                         ; DATA XREF: LOAD:0000000000000358↑o
LOAD:0000000000000A2E aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000000000000520↑o
LOAD:0000000000000A3D aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000000000000A3D                                         ; DATA XREF: LOAD:00000000000006A0↑o
LOAD:0000000000000A57                 align 8
LOAD:0000000000000A58 ; ELF GNU Symbol Version Table
LOAD:0000000000000A58                 dw 0
LOAD:0000000000000A5A                 dw 2                    ; free@@GLIBC_2.2.5
LOAD:0000000000000A5C                 dw 2                    ; abort@@GLIBC_2.2.5
LOAD:0000000000000A5E                 dw 2                    ; __errno_location@@GLIBC_2.2.5
LOAD:0000000000000A60                 dw 2                    ; strncmp@@GLIBC_2.2.5
LOAD:0000000000000A62                 dw 0                    ; local  symbol: _ITM_deregisterTMCloneTable
LOAD:0000000000000A64                 dw 2                    ; _exit@@GLIBC_2.2.5
LOAD:0000000000000A66                 dw 2                    ; __fpending@@GLIBC_2.2.5
LOAD:0000000000000A68                 dw 2                    ; textdomain@@GLIBC_2.2.5
LOAD:0000000000000A6A                 dw 2                    ; fclose@@GLIBC_2.2.5
LOAD:0000000000000A6C                 dw 2                    ; bindtextdomain@@GLIBC_2.2.5
LOAD:0000000000000A6E                 dw 2                    ; dcgettext@@GLIBC_2.2.5
LOAD:0000000000000A70                 dw 2                    ; __ctype_get_mb_cur_max@@GLIBC_2.2.5
LOAD:0000000000000A72                 dw 2                    ; strlen@@GLIBC_2.2.5
LOAD:0000000000000A74                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:0000000000000A76                 dw 2                    ; getopt_long@@GLIBC_2.2.5
LOAD:0000000000000A78                 dw 2                    ; mbrtowc@@GLIBC_2.2.5
LOAD:0000000000000A7A                 dw 2                    ; strrchr@@GLIBC_2.2.5
LOAD:0000000000000A7C                 dw 2                    ; lseek@@GLIBC_2.2.5
LOAD:0000000000000A7E                 dw 2                    ; memset@@GLIBC_2.2.5
LOAD:0000000000000A80                 dw 2                    ; __libc_start_main@@GLIBC_2.2.5
LOAD:0000000000000A82                 dw 2                    ; memcmp@@GLIBC_2.2.5
LOAD:0000000000000A84                 dw 2                    ; fputs_unlocked@@GLIBC_2.2.5
LOAD:0000000000000A86                 dw 2                    ; calloc@@GLIBC_2.2.5
LOAD:0000000000000A88                 dw 0                    ; local  symbol: __gmon_start__
LOAD:0000000000000A8A                 dw 4                    ; memcpy@@GLIBC_2.14
LOAD:0000000000000A8C                 dw 2                    ; fileno@@GLIBC_2.2.5
LOAD:0000000000000A8E                 dw 2                    ; malloc@@GLIBC_2.2.5
LOAD:0000000000000A90                 dw 2                    ; fflush@@GLIBC_2.2.5
LOAD:0000000000000A92                 dw 2                    ; nl_langinfo@@GLIBC_2.2.5
LOAD:0000000000000A94                 dw 2                    ; __freading@@GLIBC_2.2.5
LOAD:0000000000000A96                 dw 2                    ; realloc@@GLIBC_2.2.5
LOAD:0000000000000A98                 dw 2                    ; setlocale@@GLIBC_2.2.5
LOAD:0000000000000A9A                 dw 5                    ; __printf_chk@@GLIBC_2.3.4
LOAD:0000000000000A9C                 dw 2                    ; error@@GLIBC_2.2.5
LOAD:0000000000000A9E                 dw 2                    ; fseeko@@GLIBC_2.2.5
LOAD:0000000000000AA0                 dw 2                    ; __cxa_atexit@@GLIBC_2.2.5
LOAD:0000000000000AA2                 dw 2                    ; exit@@GLIBC_2.2.5
LOAD:0000000000000AA4                 dw 2                    ; fwrite@@GLIBC_2.2.5
LOAD:0000000000000AA6                 dw 5                    ; __fprintf_chk@@GLIBC_2.3.4
LOAD:0000000000000AA8                 dw 0                    ; local  symbol: _ITM_registerTMCloneTable
LOAD:0000000000000AAA                 dw 2                    ; mbsinit@@GLIBC_2.2.5
LOAD:0000000000000AAC                 dw 2                    ; iswprint@@GLIBC_2.2.5
LOAD:0000000000000AAE                 dw 2                    ; __cxa_finalize@@GLIBC_2.2.5
LOAD:0000000000000AB0                 dw 6                    ; __ctype_b_loc@@GLIBC_2.3
LOAD:0000000000000AB2                 dw 2                    ; stdout@@GLIBC_2.2.5
LOAD:0000000000000AB4                 dw 2                    ; __progname@@GLIBC_2.2.5
LOAD:0000000000000AB6                 dw 2                    ; program_invocation_name@@GLIBC_2.2.5
LOAD:0000000000000AB8                 dw 2                    ; __progname_full@@GLIBC_2.2.5
LOAD:0000000000000ABA                 dw 2                    ; program_invocation_short_name@@GLIBC_2.2.5
LOAD:0000000000000ABC                 dw 2                    ; stderr@@GLIBC_2.2.5
LOAD:0000000000000ABE                 dw 2                    ; optind@@GLIBC_2.2.5
LOAD:0000000000000AC0                 dw 2                    ; optarg@@GLIBC_2.2.5
LOAD:0000000000000AC2                 dw 0
LOAD:0000000000000AC4                 dw 0
LOAD:0000000000000AC6                 dw 0
LOAD:0000000000000AC8 ; ELF GNU Symbol Version Requirements
LOAD:0000000000000AC8                 Elf64_Verneed <1, 5, offset aLibcSo6 - offset byte_7D8, 10h, 0> ; "libc.so.6"
LOAD:0000000000000AD8                 Elf64_Vernaux <0D696913h, 0, 6, offset aGlibc23 - offset byte_7D8, \ ; "GLIBC_2.3"
LOAD:0000000000000AD8                                10h>
LOAD:0000000000000AE8                 Elf64_Vernaux <9691974h, 0, 5, offset aGlibc234 - offset byte_7D8, \ ; "GLIBC_2.3.4"
LOAD:0000000000000AE8                                10h>
LOAD:0000000000000AF8                 Elf64_Vernaux <6969194h, 0, 4, offset aGlibc214 - offset byte_7D8, \ ; "GLIBC_2.14"
LOAD:0000000000000AF8                                10h>
LOAD:0000000000000B08                 Elf64_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset byte_7D8, \ ; "GLIBC_2.4"
LOAD:0000000000000B08                                10h>
LOAD:0000000000000B18                 Elf64_Vernaux <9691A75h, 0, 2, offset aGlibc225 - offset byte_7D8, 0> ; "GLIBC_2.2.5"
LOAD:0000000000000B28 ; ELF RELA Relocation Table
LOAD:0000000000000B28                 Elf64_Rela <206B30h, 8, 18B0h> ; R_X86_64_RELATIVE +18B0h
LOAD:0000000000000B40                 Elf64_Rela <206B38h, 8, 1870h> ; R_X86_64_RELATIVE +1870h
LOAD:0000000000000B58                 Elf64_Rela <206B40h, 8, 47D4h> ; R_X86_64_RELATIVE +47D4h
LOAD:0000000000000B70                 Elf64_Rela <206B60h, 8, 47D9h> ; R_X86_64_RELATIVE +47D9h
LOAD:0000000000000B88                 Elf64_Rela <206B80h, 8, 47DEh> ; R_X86_64_RELATIVE +47DEh
LOAD:0000000000000BA0                 Elf64_Rela <206BA0h, 8, 47E3h> ; R_X86_64_RELATIVE +47E3h
LOAD:0000000000000BB8                 Elf64_Rela <206BC0h, 8, 47E9h> ; R_X86_64_RELATIVE +47E9h
LOAD:0000000000000BD0                 Elf64_Rela <206BE0h, 8, 47F1h> ; R_X86_64_RELATIVE +47F1h
LOAD:0000000000000BE8                 Elf64_Rela <206C00h, 8, 47F6h> ; R_X86_64_RELATIVE +47F6h
LOAD:0000000000000C00                 Elf64_Rela <206C40h, 8, 4C51h> ; R_X86_64_RELATIVE +4C51h
LOAD:0000000000000C18                 Elf64_Rela <206C48h, 8, 4C59h> ; R_X86_64_RELATIVE +4C59h
LOAD:0000000000000C30                 Elf64_Rela <206C50h, 8, 4C5Fh> ; R_X86_64_RELATIVE +4C5Fh
LOAD:0000000000000C48                 Elf64_Rela <206C58h, 8, 4C6Ch> ; R_X86_64_RELATIVE +4C6Ch
LOAD:0000000000000C60                 Elf64_Rela <206C60h, 8, 4C79h> ; R_X86_64_RELATIVE +4C79h
LOAD:0000000000000C78                 Elf64_Rela <206C68h, 8, 474Fh> ; R_X86_64_RELATIVE +474Fh
LOAD:0000000000000C90                 Elf64_Rela <206C70h, 8, 4C8Dh> ; R_X86_64_RELATIVE +4C8Dh
LOAD:0000000000000CA8                 Elf64_Rela <206C78h, 8, 4C72h> ; R_X86_64_RELATIVE +4C72h
LOAD:0000000000000CC0                 Elf64_Rela <206C80h, 8, 473Fh> ; R_X86_64_RELATIVE +473Fh
LOAD:0000000000000CD8                 Elf64_Rela <206C88h, 8, 4C95h> ; R_X86_64_RELATIVE +4C95h
LOAD:0000000000000CF0                 Elf64_Rela <207008h, 8, 207008h> ; R_X86_64_RELATIVE +207008h
LOAD:0000000000000D08                 Elf64_Rela <207010h, 8, 4BE0h> ; R_X86_64_RELATIVE +4BE0h
LOAD:0000000000000D20                 Elf64_Rela <207060h, 8, 207070h> ; R_X86_64_RELATIVE +207070h
LOAD:0000000000000D38                 Elf64_Rela <207078h, 8, 207100h> ; R_X86_64_RELATIVE +207100h
LOAD:0000000000000D50                 Elf64_Rela <206FD8h, 500000006h, 0> ; R_X86_64_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000000000000D68                 Elf64_Rela <206FE0h, 1400000006h, 0> ; R_X86_64_GLOB_DAT __libc_start_main
LOAD:0000000000000D80                 Elf64_Rela <206FE8h, 1800000006h, 0> ; R_X86_64_GLOB_DAT __gmon_start__
LOAD:0000000000000D98                 Elf64_Rela <206FF0h, 2800000006h, 0> ; R_X86_64_GLOB_DAT _ITM_registerTMCloneTable
LOAD:0000000000000DB0                 Elf64_Rela <206FF8h, 2B00000006h, 0> ; R_X86_64_GLOB_DAT __cxa_finalize
LOAD:0000000000000DC8                 Elf64_Rela <207080h, 2E00000005h, 0> ; R_X86_64_COPY __progname
LOAD:0000000000000DE0                 Elf64_Rela <207088h, 2D00000005h, 0> ; R_X86_64_COPY stdout
LOAD:0000000000000DF8                 Elf64_Rela <207090h, 3300000005h, 0> ; R_X86_64_COPY optind
LOAD:0000000000000E10                 Elf64_Rela <207098h, 3400000005h, 0> ; R_X86_64_COPY optarg
LOAD:0000000000000E28                 Elf64_Rela <2070A0h, 3000000005h, 0> ; R_X86_64_COPY __progname_full
LOAD:0000000000000E40                 Elf64_Rela <2070C0h, 3200000005h, 0> ; R_X86_64_COPY stderr
LOAD:0000000000000E58 ; ELF JMPREL Relocation Table
LOAD:0000000000000E58                 Elf64_Rela <206EA0h, 100000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD:0000000000000E70                 Elf64_Rela <206EA8h, 200000007h, 0> ; R_X86_64_JUMP_SLOT abort
LOAD:0000000000000E88                 Elf64_Rela <206EB0h, 300000007h, 0> ; R_X86_64_JUMP_SLOT __errno_location
LOAD:0000000000000EA0                 Elf64_Rela <206EB8h, 400000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
LOAD:0000000000000EB8                 Elf64_Rela <206EC0h, 600000007h, 0> ; R_X86_64_JUMP_SLOT _exit
LOAD:0000000000000ED0                 Elf64_Rela <206EC8h, 700000007h, 0> ; R_X86_64_JUMP_SLOT __fpending
LOAD:0000000000000EE8                 Elf64_Rela <206ED0h, 800000007h, 0> ; R_X86_64_JUMP_SLOT textdomain
LOAD:0000000000000F00                 Elf64_Rela <206ED8h, 900000007h, 0> ; R_X86_64_JUMP_SLOT fclose
LOAD:0000000000000F18                 Elf64_Rela <206EE0h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT bindtextdomain
LOAD:0000000000000F30                 Elf64_Rela <206EE8h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT dcgettext
LOAD:0000000000000F48                 Elf64_Rela <206EF0h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_get_mb_cur_max
LOAD:0000000000000F60                 Elf64_Rela <206EF8h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT strlen
LOAD:0000000000000F78                 Elf64_Rela <206F00h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT __stack_chk_fail
LOAD:0000000000000F90                 Elf64_Rela <206F08h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT getopt_long
LOAD:0000000000000FA8                 Elf64_Rela <206F10h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT mbrtowc
LOAD:0000000000000FC0                 Elf64_Rela <206F18h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strrchr
LOAD:0000000000000FD8                 Elf64_Rela <206F20h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT lseek
LOAD:0000000000000FF0                 Elf64_Rela <206F28h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT memset
LOAD:0000000000001008                 Elf64_Rela <206F30h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT memcmp
LOAD:0000000000001020                 Elf64_Rela <206F38h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT fputs_unlocked
LOAD:0000000000001038                 Elf64_Rela <206F40h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT calloc
LOAD:0000000000001050                 Elf64_Rela <206F48h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
LOAD:0000000000001068                 Elf64_Rela <206F50h, 1A00000007h, 0> ; R_X86_64_JUMP_SLOT fileno
LOAD:0000000000001080                 Elf64_Rela <206F58h, 1B00000007h, 0> ; R_X86_64_JUMP_SLOT malloc
LOAD:0000000000001098                 Elf64_Rela <206F60h, 1C00000007h, 0> ; R_X86_64_JUMP_SLOT fflush
LOAD:00000000000010B0                 Elf64_Rela <206F68h, 1D00000007h, 0> ; R_X86_64_JUMP_SLOT nl_langinfo
LOAD:00000000000010C8                 Elf64_Rela <206F70h, 1E00000007h, 0> ; R_X86_64_JUMP_SLOT __freading
LOAD:00000000000010E0                 Elf64_Rela <206F78h, 1F00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
LOAD:00000000000010F8                 Elf64_Rela <206F80h, 2000000007h, 0> ; R_X86_64_JUMP_SLOT setlocale
LOAD:0000000000001110                 Elf64_Rela <206F88h, 2100000007h, 0> ; R_X86_64_JUMP_SLOT __printf_chk
LOAD:0000000000001128                 Elf64_Rela <206F90h, 2200000007h, 0> ; R_X86_64_JUMP_SLOT error
LOAD:0000000000001140                 Elf64_Rela <206F98h, 2300000007h, 0> ; R_X86_64_JUMP_SLOT fseeko
LOAD:0000000000001158                 Elf64_Rela <206FA0h, 2400000007h, 0> ; R_X86_64_JUMP_SLOT __cxa_atexit
LOAD:0000000000001170                 Elf64_Rela <206FA8h, 2500000007h, 0> ; R_X86_64_JUMP_SLOT exit
LOAD:0000000000001188                 Elf64_Rela <206FB0h, 2600000007h, 0> ; R_X86_64_JUMP_SLOT fwrite
LOAD:00000000000011A0                 Elf64_Rela <206FB8h, 2700000007h, 0> ; R_X86_64_JUMP_SLOT __fprintf_chk
LOAD:00000000000011B8                 Elf64_Rela <206FC0h, 2900000007h, 0> ; R_X86_64_JUMP_SLOT mbsinit
LOAD:00000000000011D0                 Elf64_Rela <206FC8h, 2A00000007h, 0> ; R_X86_64_JUMP_SLOT iswprint
LOAD:00000000000011E8                 Elf64_Rela <206FD0h, 2C00000007h, 0> ; R_X86_64_JUMP_SLOT __ctype_b_loc
LOAD:00000000000011E8 LOAD            ends
LOAD:00000000000011E8
.init:0000000000001200 ; ===========================================================================
.init:0000000000001200
.init:0000000000001200 ; Segment type: Pure code
.init:0000000000001200 ; Segment permissions: Read/Execute
.init:0000000000001200 _init           segment dword public 'CODE' use64
.init:0000000000001200                 assume cs:_init
.init:0000000000001200                 ;org 1200h
.init:0000000000001200                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:0000000000001200
.init:0000000000001200 ; =============== S U B R O U T I N E =======================================
.init:0000000000001200
.init:0000000000001200
.init:0000000000001200                 public _init_proc
.init:0000000000001200 _init_proc      proc near               ; CODE XREF: __libc_csu_init+2C↓p
.init:0000000000001200                 sub     rsp, 8          ; _init
.init:0000000000001204                 mov     rax, cs:__gmon_start___ptr
.init:000000000000120B                 test    rax, rax
.init:000000000000120E                 jz      short loc_1212
.init:0000000000001210                 call    rax ; __gmon_start__
.init:0000000000001212
.init:0000000000001212 loc_1212:                               ; CODE XREF: _init_proc+E↑j
.init:0000000000001212                 add     rsp, 8
.init:0000000000001216                 retn
.init:0000000000001216 _init_proc      endp
.init:0000000000001216
.init:0000000000001216 _init           ends
.init:0000000000001216
LOAD:0000000000001217 ; ===========================================================================
LOAD:0000000000001217
LOAD:0000000000001217 ; Segment type: Pure code
LOAD:0000000000001217 ; Segment permissions: Read/Execute
LOAD:0000000000001217 LOAD            segment byte public 'CODE' use64
LOAD:0000000000001217                 assume cs:LOAD
LOAD:0000000000001217                 ;org 1217h
LOAD:0000000000001217                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000001217                 align 20h
LOAD:0000000000001217 LOAD            ends
LOAD:0000000000001217
.plt:0000000000001220 ; ===========================================================================
.plt:0000000000001220
.plt:0000000000001220 ; Segment type: Pure code
.plt:0000000000001220 ; Segment permissions: Read/Execute
.plt:0000000000001220 _plt            segment para public 'CODE' use64
.plt:0000000000001220                 assume cs:_plt
.plt:0000000000001220                 ;org 1220h
.plt:0000000000001220                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:0000000000001220
.plt:0000000000001220 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001220
.plt:0000000000001220
.plt:0000000000001220 sub_1220        proc near               ; CODE XREF: .plt:000000000000123B↓j
.plt:0000000000001220                                         ; .plt:000000000000124B↓j ...
.plt:0000000000001220 ; __unwind {
.plt:0000000000001220                 push    cs:qword_206E90
.plt:0000000000001226                 jmp     cs:qword_206E98
.plt:0000000000001226 sub_1220        endp
.plt:0000000000001226
.plt:0000000000001226 ; ---------------------------------------------------------------------------
.plt:000000000000122C                 align 10h
.plt:0000000000001230
.plt:0000000000001230 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001230
.plt:0000000000001230 ; Attributes: thunk
.plt:0000000000001230
.plt:0000000000001230 ; void free(void *ptr)
.plt:0000000000001230 _free           proc near               ; CODE XREF: quotearg_n_options+115↓p
.plt:0000000000001230                                         ; quotearg_free+37↓p ...
.plt:0000000000001230                 jmp     cs:free_ptr
.plt:0000000000001230 _free           endp
.plt:0000000000001230
.plt:0000000000001236 ; ---------------------------------------------------------------------------
.plt:0000000000001236                 push    0
.plt:000000000000123B                 jmp     sub_1220
.plt:0000000000001240
.plt:0000000000001240 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001240
.plt:0000000000001240 ; Attributes: noreturn thunk
.plt:0000000000001240
.plt:0000000000001240 ; void __noreturn abort(void)
.plt:0000000000001240 _abort          proc near               ; CODE XREF: set_program_name+9A↓p
.plt:0000000000001240                                         ; quotearg_buffer_restyled:def_1F41↓p ...
.plt:0000000000001240                 jmp     cs:abort_ptr
.plt:0000000000001240 _abort          endp
.plt:0000000000001240
.plt:0000000000001246 ; ---------------------------------------------------------------------------
.plt:0000000000001246                 push    1
.plt:000000000000124B                 jmp     sub_1220
.plt:0000000000001250
.plt:0000000000001250 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001250
.plt:0000000000001250 ; Attributes: thunk
.plt:0000000000001250
.plt:0000000000001250 ; int *__errno_location(void)
.plt:0000000000001250 ___errno_location proc near             ; CODE XREF: main:loc_1693↓p
.plt:0000000000001250                                         ; close_stdout+16↓p ...
.plt:0000000000001250                 jmp     cs:__errno_location_ptr
.plt:0000000000001250 ___errno_location endp
.plt:0000000000001250
.plt:0000000000001256 ; ---------------------------------------------------------------------------
.plt:0000000000001256                 push    2
.plt:000000000000125B                 jmp     sub_1220
.plt:0000000000001260
.plt:0000000000001260 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001260
.plt:0000000000001260 ; Attributes: thunk
.plt:0000000000001260
.plt:0000000000001260 ; int strncmp(const char *s1, const char *s2, size_t n)
.plt:0000000000001260 _strncmp        proc near               ; CODE XREF: usage+24C↓p
.plt:0000000000001260                                         ; usage+30D↓p
.plt:0000000000001260                 jmp     cs:strncmp_ptr
.plt:0000000000001260 _strncmp        endp
.plt:0000000000001260
.plt:0000000000001266 ; ---------------------------------------------------------------------------
.plt:0000000000001266                 push    3
.plt:000000000000126B                 jmp     sub_1220
.plt:0000000000001270
.plt:0000000000001270 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001270
.plt:0000000000001270 ; Attributes: noreturn thunk
.plt:0000000000001270
.plt:0000000000001270 ; void __noreturn _exit(int status)
.plt:0000000000001270 __exit          proc near               ; CODE XREF: close_stdout+88↓p
.plt:0000000000001270                 jmp     cs:_exit_ptr
.plt:0000000000001270 __exit          endp
.plt:0000000000001270
.plt:0000000000001276 ; ---------------------------------------------------------------------------
.plt:0000000000001276                 push    4
.plt:000000000000127B                 jmp     sub_1220
.plt:0000000000001280
.plt:0000000000001280 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001280
.plt:0000000000001280 ; Attributes: thunk
.plt:0000000000001280
.plt:0000000000001280 ; size_t __fpending(FILE *fp)
.plt:0000000000001280 ___fpending     proc near               ; CODE XREF: close_stream+7↓p
.plt:0000000000001280                 jmp     cs:__fpending_ptr
.plt:0000000000001280 ___fpending     endp
.plt:0000000000001280
.plt:0000000000001286 ; ---------------------------------------------------------------------------
.plt:0000000000001286                 push    5
.plt:000000000000128B                 jmp     sub_1220
.plt:0000000000001290
.plt:0000000000001290 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001290
.plt:0000000000001290 ; Attributes: thunk
.plt:0000000000001290
.plt:0000000000001290 ; char *textdomain(const char *domainname)
.plt:0000000000001290 _textdomain     proc near               ; CODE XREF: main+64↓p
.plt:0000000000001290                 jmp     cs:textdomain_ptr
.plt:0000000000001290 _textdomain     endp
.plt:0000000000001290
.plt:0000000000001296 ; ---------------------------------------------------------------------------
.plt:0000000000001296                 push    6
.plt:000000000000129B                 jmp     sub_1220
.plt:00000000000012A0
.plt:00000000000012A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012A0
.plt:00000000000012A0 ; Attributes: thunk
.plt:00000000000012A0
.plt:00000000000012A0 ; int fclose(FILE *stream)
.plt:00000000000012A0 _fclose         proc near               ; CODE XREF: rpl_fclose+36↓p
.plt:00000000000012A0                                         ; rpl_fclose+6B↓j
.plt:00000000000012A0                 jmp     cs:fclose_ptr
.plt:00000000000012A0 _fclose         endp
.plt:00000000000012A0
.plt:00000000000012A6 ; ---------------------------------------------------------------------------
.plt:00000000000012A6                 push    7
.plt:00000000000012AB                 jmp     sub_1220
.plt:00000000000012B0
.plt:00000000000012B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012B0
.plt:00000000000012B0 ; Attributes: thunk
.plt:00000000000012B0
.plt:00000000000012B0 ; char *bindtextdomain(const char *domainname, const char *dirname)
.plt:00000000000012B0 _bindtextdomain proc near               ; CODE XREF: main+58↓p
.plt:00000000000012B0                 jmp     cs:bindtextdomain_ptr
.plt:00000000000012B0 _bindtextdomain endp
.plt:00000000000012B0
.plt:00000000000012B6 ; ---------------------------------------------------------------------------
.plt:00000000000012B6                 push    8
.plt:00000000000012BB                 jmp     sub_1220
.plt:00000000000012C0
.plt:00000000000012C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012C0
.plt:00000000000012C0 ; Attributes: thunk
.plt:00000000000012C0
.plt:00000000000012C0 ; char *dcgettext(const char *domainname, const char *msgid, int category)
.plt:00000000000012C0 _dcgettext      proc near               ; CODE XREF: main+1CB↓p
.plt:00000000000012C0                                         ; main+1FF↓p ...
.plt:00000000000012C0                 jmp     cs:dcgettext_ptr
.plt:00000000000012C0 _dcgettext      endp
.plt:00000000000012C0
.plt:00000000000012C6 ; ---------------------------------------------------------------------------
.plt:00000000000012C6                 push    9
.plt:00000000000012CB                 jmp     sub_1220
.plt:00000000000012D0
.plt:00000000000012D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012D0
.plt:00000000000012D0 ; Attributes: thunk
.plt:00000000000012D0
.plt:00000000000012D0 ; size_t __ctype_get_mb_cur_max(void)
.plt:00000000000012D0 ___ctype_get_mb_cur_max proc near       ; CODE XREF: quotearg_buffer_restyled+6C↓p
.plt:00000000000012D0                 jmp     cs:__ctype_get_mb_cur_max_ptr
.plt:00000000000012D0 ___ctype_get_mb_cur_max endp
.plt:00000000000012D0
.plt:00000000000012D6 ; ---------------------------------------------------------------------------
.plt:00000000000012D6                 push    0Ah
.plt:00000000000012DB                 jmp     sub_1220
.plt:00000000000012E0
.plt:00000000000012E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012E0
.plt:00000000000012E0 ; Attributes: thunk
.plt:00000000000012E0
.plt:00000000000012E0 ; size_t strlen(const char *s)
.plt:00000000000012E0 _strlen         proc near               ; CODE XREF: quotearg_buffer_restyled+157↓p
.plt:00000000000012E0                                         ; quotearg_buffer_restyled+8DB↓p ...
.plt:00000000000012E0                 jmp     cs:strlen_ptr
.plt:00000000000012E0 _strlen         endp
.plt:00000000000012E0
.plt:00000000000012E6 ; ---------------------------------------------------------------------------
.plt:00000000000012E6                 push    0Bh
.plt:00000000000012EB                 jmp     sub_1220
.plt:00000000000012F0
.plt:00000000000012F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000012F0
.plt:00000000000012F0 ; Attributes: noreturn thunk
.plt:00000000000012F0
.plt:00000000000012F0 ___stack_chk_fail proc near             ; CODE XREF: quotearg_buffer_restyled:loc_30A3↓p
.plt:00000000000012F0                                         ; quotearg_n_style:loc_36C9↓p ...
.plt:00000000000012F0                 jmp     cs:__stack_chk_fail_ptr
.plt:00000000000012F0 ___stack_chk_fail endp
.plt:00000000000012F0
.plt:00000000000012F6 ; ---------------------------------------------------------------------------
.plt:00000000000012F6                 push    0Ch
.plt:00000000000012FB                 jmp     sub_1220
.plt:0000000000001300
.plt:0000000000001300 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001300
.plt:0000000000001300 ; Attributes: thunk
.plt:0000000000001300
.plt:0000000000001300 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
.plt:0000000000001300 _getopt_long    proc near               ; CODE XREF: main+A0↓p
.plt:0000000000001300                 jmp     cs:getopt_long_ptr
.plt:0000000000001300 _getopt_long    endp
.plt:0000000000001300
.plt:0000000000001306 ; ---------------------------------------------------------------------------
.plt:0000000000001306                 push    0Dh
.plt:000000000000130B                 jmp     sub_1220
.plt:0000000000001310
.plt:0000000000001310 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001310
.plt:0000000000001310 ; Attributes: thunk
.plt:0000000000001310
.plt:0000000000001310 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
.plt:0000000000001310 _mbrtowc        proc near               ; CODE XREF: rpl_mbrtowc+32↓p
.plt:0000000000001310                 jmp     cs:mbrtowc_ptr
.plt:0000000000001310 _mbrtowc        endp
.plt:0000000000001310
.plt:0000000000001316 ; ---------------------------------------------------------------------------
.plt:0000000000001316                 push    0Eh
.plt:000000000000131B                 jmp     sub_1220
.plt:0000000000001320
.plt:0000000000001320 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001320
.plt:0000000000001320 ; Attributes: thunk
.plt:0000000000001320
.plt:0000000000001320 ; char *strrchr(const char *s, int c)
.plt:0000000000001320 _strrchr        proc near               ; CODE XREF: set_program_name+E↓p
.plt:0000000000001320                 jmp     cs:strrchr_ptr
.plt:0000000000001320 _strrchr        endp
.plt:0000000000001320
.plt:0000000000001326 ; ---------------------------------------------------------------------------
.plt:0000000000001326                 push    0Fh
.plt:000000000000132B                 jmp     sub_1220
.plt:0000000000001330
.plt:0000000000001330 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001330
.plt:0000000000001330 ; Attributes: thunk
.plt:0000000000001330
.plt:0000000000001330 ; __off_t lseek(int fd, __off_t offset, int whence)
.plt:0000000000001330 _lseek          proc near               ; CODE XREF: rpl_fclose+59↓p
.plt:0000000000001330                                         ; rpl_fseeko+3B↓p
.plt:0000000000001330                 jmp     cs:lseek_ptr
.plt:0000000000001330 _lseek          endp
.plt:0000000000001330
.plt:0000000000001336 ; ---------------------------------------------------------------------------
.plt:0000000000001336                 push    10h
.plt:000000000000133B                 jmp     sub_1220
.plt:0000000000001340
.plt:0000000000001340 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001340
.plt:0000000000001340 ; Attributes: thunk
.plt:0000000000001340
.plt:0000000000001340 ; void *memset(void *s, int c, size_t n)
.plt:0000000000001340 _memset         proc near               ; CODE XREF: quotearg_n_options+99↓p
.plt:0000000000001340                                         ; xzalloc+12↓j
.plt:0000000000001340                 jmp     cs:memset_ptr
.plt:0000000000001340 _memset         endp
.plt:0000000000001340
.plt:0000000000001346 ; ---------------------------------------------------------------------------
.plt:0000000000001346                 push    11h
.plt:000000000000134B                 jmp     sub_1220
.plt:0000000000001350
.plt:0000000000001350 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001350
.plt:0000000000001350 ; Attributes: thunk
.plt:0000000000001350
.plt:0000000000001350 ; int memcmp(const void *s1, const void *s2, size_t n)
.plt:0000000000001350 _memcmp         proc near               ; CODE XREF: quotearg_buffer_restyled+19A↓p
.plt:0000000000001350                 jmp     cs:memcmp_ptr
.plt:0000000000001350 _memcmp         endp
.plt:0000000000001350
.plt:0000000000001356 ; ---------------------------------------------------------------------------
.plt:0000000000001356                 push    12h
.plt:000000000000135B                 jmp     sub_1220
.plt:0000000000001360
.plt:0000000000001360 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001360
.plt:0000000000001360 ; Attributes: thunk
.plt:0000000000001360
.plt:0000000000001360 ; int fputs_unlocked(const char *s, FILE *stream)
.plt:0000000000001360 _fputs_unlocked proc near               ; CODE XREF: usage+A0↓p
.plt:0000000000001360                                         ; usage+C5↓p ...
.plt:0000000000001360                 jmp     cs:fputs_unlocked_ptr
.plt:0000000000001360 _fputs_unlocked endp
.plt:0000000000001360
.plt:0000000000001366 ; ---------------------------------------------------------------------------
.plt:0000000000001366                 push    13h
.plt:000000000000136B                 jmp     sub_1220
.plt:0000000000001370
.plt:0000000000001370 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001370
.plt:0000000000001370 ; Attributes: thunk
.plt:0000000000001370
.plt:0000000000001370 ; void *calloc(size_t nmemb, size_t size)
.plt:0000000000001370 _calloc         proc near               ; CODE XREF: xcalloc+1A↓p
.plt:0000000000001370                 jmp     cs:calloc_ptr
.plt:0000000000001370 _calloc         endp
.plt:0000000000001370
.plt:0000000000001376 ; ---------------------------------------------------------------------------
.plt:0000000000001376                 push    14h
.plt:000000000000137B                 jmp     sub_1220
.plt:0000000000001380
.plt:0000000000001380 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001380
.plt:0000000000001380 ; Attributes: thunk
.plt:0000000000001380
.plt:0000000000001380 ; void *memcpy(void *dest, const void *src, size_t n)
.plt:0000000000001380 _memcpy         proc near               ; CODE XREF: xmemdup+23↓j
.plt:0000000000001380                 jmp     cs:memcpy_ptr
.plt:0000000000001380 _memcpy         endp
.plt:0000000000001380
.plt:0000000000001386 ; ---------------------------------------------------------------------------
.plt:0000000000001386                 push    15h
.plt:000000000000138B                 jmp     sub_1220
.plt:0000000000001390
.plt:0000000000001390 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001390
.plt:0000000000001390 ; Attributes: thunk
.plt:0000000000001390
.plt:0000000000001390 ; int fileno(FILE *stream)
.plt:0000000000001390 _fileno         proc near               ; CODE XREF: rpl_fclose+7↓p
.plt:0000000000001390                                         ; rpl_fclose+4B↓p ...
.plt:0000000000001390                 jmp     cs:fileno_ptr
.plt:0000000000001390 _fileno         endp
.plt:0000000000001390
.plt:0000000000001396 ; ---------------------------------------------------------------------------
.plt:0000000000001396                 push    16h
.plt:000000000000139B                 jmp     sub_1220
.plt:00000000000013A0
.plt:00000000000013A0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013A0
.plt:00000000000013A0 ; Attributes: thunk
.plt:00000000000013A0
.plt:00000000000013A0 ; void *malloc(size_t size)
.plt:00000000000013A0 _malloc         proc near               ; CODE XREF: xmalloc+4↓p
.plt:00000000000013A0                 jmp     cs:malloc_ptr
.plt:00000000000013A0 _malloc         endp
.plt:00000000000013A0
.plt:00000000000013A6 ; ---------------------------------------------------------------------------
.plt:00000000000013A6                 push    17h
.plt:00000000000013AB                 jmp     sub_1220
.plt:00000000000013B0
.plt:00000000000013B0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013B0
.plt:00000000000013B0 ; Attributes: thunk
.plt:00000000000013B0
.plt:00000000000013B0 ; int fflush(FILE *stream)
.plt:00000000000013B0 _fflush         proc near               ; CODE XREF: rpl_fflush+1E↓j
.plt:00000000000013B0                                         ; rpl_fflush+3B↓j
.plt:00000000000013B0                 jmp     cs:fflush_ptr
.plt:00000000000013B0 _fflush         endp
.plt:00000000000013B0
.plt:00000000000013B6 ; ---------------------------------------------------------------------------
.plt:00000000000013B6                 push    18h
.plt:00000000000013BB                 jmp     sub_1220
.plt:00000000000013C0
.plt:00000000000013C0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013C0
.plt:00000000000013C0 ; Attributes: thunk
.plt:00000000000013C0
.plt:00000000000013C0 ; char *nl_langinfo(nl_item item)
.plt:00000000000013C0 _nl_langinfo    proc near               ; CODE XREF: locale_charset+9↓p
.plt:00000000000013C0                 jmp     cs:nl_langinfo_ptr
.plt:00000000000013C0 _nl_langinfo    endp
.plt:00000000000013C0
.plt:00000000000013C6 ; ---------------------------------------------------------------------------
.plt:00000000000013C6                 push    19h
.plt:00000000000013CB                 jmp     sub_1220
.plt:00000000000013D0
.plt:00000000000013D0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013D0
.plt:00000000000013D0 ; Attributes: thunk
.plt:00000000000013D0
.plt:00000000000013D0 ; int __freading(FILE *fp)
.plt:00000000000013D0 ___freading     proc near               ; CODE XREF: rpl_fclose+13↓p
.plt:00000000000013D0                                         ; rpl_fflush+9↓p
.plt:00000000000013D0                 jmp     cs:__freading_ptr
.plt:00000000000013D0 ___freading     endp
.plt:00000000000013D0
.plt:00000000000013D6 ; ---------------------------------------------------------------------------
.plt:00000000000013D6                 push    1Ah
.plt:00000000000013DB                 jmp     sub_1220
.plt:00000000000013E0
.plt:00000000000013E0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013E0
.plt:00000000000013E0 ; Attributes: thunk
.plt:00000000000013E0
.plt:00000000000013E0 ; void *realloc(void *ptr, size_t size)
.plt:00000000000013E0 _realloc        proc near               ; CODE XREF: xrealloc+11↓p
.plt:00000000000013E0                 jmp     cs:realloc_ptr
.plt:00000000000013E0 _realloc        endp
.plt:00000000000013E0
.plt:00000000000013E6 ; ---------------------------------------------------------------------------
.plt:00000000000013E6                 push    1Bh
.plt:00000000000013EB                 jmp     sub_1220
.plt:00000000000013F0
.plt:00000000000013F0 ; =============== S U B R O U T I N E =======================================
.plt:00000000000013F0
.plt:00000000000013F0 ; Attributes: thunk
.plt:00000000000013F0
.plt:00000000000013F0 ; char *setlocale(int category, const char *locale)
.plt:00000000000013F0 _setlocale      proc near               ; CODE XREF: main+45↓p
.plt:00000000000013F0                                         ; usage+233↓p ...
.plt:00000000000013F0                 jmp     cs:setlocale_ptr
.plt:00000000000013F0 _setlocale      endp
.plt:00000000000013F0
.plt:00000000000013F6 ; ---------------------------------------------------------------------------
.plt:00000000000013F6                 push    1Ch
.plt:00000000000013FB                 jmp     sub_1220
.plt:0000000000001400
.plt:0000000000001400 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001400
.plt:0000000000001400 ; Attributes: thunk
.plt:0000000000001400
.plt:0000000000001400 ___printf_chk   proc near               ; CODE XREF: usage+7B↓p
.plt:0000000000001400                                         ; usage+227↓p ...
.plt:0000000000001400                 jmp     cs:__printf_chk_ptr
.plt:0000000000001400 ___printf_chk   endp
.plt:0000000000001400
.plt:0000000000001406 ; ---------------------------------------------------------------------------
.plt:0000000000001406                 push    1Dh
.plt:000000000000140B                 jmp     sub_1220
.plt:0000000000001410
.plt:0000000000001410 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001410
.plt:0000000000001410 ; Attributes: thunk
.plt:0000000000001410
.plt:0000000000001410 ; void error(int status, int errnum, const char *format, ...)
.plt:0000000000001410 _error          proc near               ; CODE XREF: main+1D9↓p
.plt:0000000000001410                                         ; main+210↓p ...
.plt:0000000000001410                 jmp     cs:error_ptr
.plt:0000000000001410 _error          endp
.plt:0000000000001410
.plt:0000000000001416 ; ---------------------------------------------------------------------------
.plt:0000000000001416                 push    1Eh
.plt:000000000000141B                 jmp     sub_1220
.plt:0000000000001420
.plt:0000000000001420 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001420
.plt:0000000000001420 ; Attributes: thunk
.plt:0000000000001420
.plt:0000000000001420 ; int fseeko(FILE *stream, __off_t off, int whence)
.plt:0000000000001420 _fseeko         proc near               ; CODE XREF: rpl_fseeko:loc_457A↓j
.plt:0000000000001420                 jmp     cs:fseeko_ptr
.plt:0000000000001420 _fseeko         endp
.plt:0000000000001420
.plt:0000000000001426 ; ---------------------------------------------------------------------------
.plt:0000000000001426                 push    1Fh
.plt:000000000000142B                 jmp     sub_1220
.plt:0000000000001430
.plt:0000000000001430 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001430
.plt:0000000000001430 ; Attributes: thunk
.plt:0000000000001430
.plt:0000000000001430 ; int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
.plt:0000000000001430 ___cxa_atexit   proc near               ; CODE XREF: atexit+9↓j
.plt:0000000000001430                 jmp     cs:__cxa_atexit_ptr
.plt:0000000000001430 ___cxa_atexit   endp
.plt:0000000000001430
.plt:0000000000001436 ; ---------------------------------------------------------------------------
.plt:0000000000001436                 push    20h ; ' '
.plt:000000000000143B                 jmp     sub_1220
.plt:0000000000001440
.plt:0000000000001440 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001440
.plt:0000000000001440 ; Attributes: noreturn thunk
.plt:0000000000001440
.plt:0000000000001440 ; void __noreturn exit(int status)
.plt:0000000000001440 _exit           proc near               ; CODE XREF: main+FB↓p
.plt:0000000000001440                                         ; usage+58↓p
.plt:0000000000001440                 jmp     cs:exit_ptr
.plt:0000000000001440 _exit           endp
.plt:0000000000001440
.plt:0000000000001446 ; ---------------------------------------------------------------------------
.plt:0000000000001446                 push    21h ; '!'
.plt:000000000000144B                 jmp     sub_1220
.plt:0000000000001450
.plt:0000000000001450 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001450
.plt:0000000000001450 ; Attributes: thunk
.plt:0000000000001450
.plt:0000000000001450 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
.plt:0000000000001450 _fwrite         proc near               ; CODE XREF: set_program_name+95↓p
.plt:0000000000001450                 jmp     cs:fwrite_ptr
.plt:0000000000001450 _fwrite         endp
.plt:0000000000001450
.plt:0000000000001456 ; ---------------------------------------------------------------------------
.plt:0000000000001456                 push    22h ; '"'
.plt:000000000000145B                 jmp     sub_1220
.plt:0000000000001460
.plt:0000000000001460 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001460
.plt:0000000000001460 ; Attributes: thunk
.plt:0000000000001460
.plt:0000000000001460 ___fprintf_chk  proc near               ; CODE XREF: usage+51↓p
.plt:0000000000001460                                         ; version_etc_arn+37↓p ...
.plt:0000000000001460                 jmp     cs:__fprintf_chk_ptr
.plt:0000000000001460 ___fprintf_chk  endp
.plt:0000000000001460
.plt:0000000000001466 ; ---------------------------------------------------------------------------
.plt:0000000000001466                 push    23h ; '#'
.plt:000000000000146B                 jmp     sub_1220
.plt:0000000000001470
.plt:0000000000001470 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001470
.plt:0000000000001470 ; Attributes: thunk
.plt:0000000000001470
.plt:0000000000001470 ; int mbsinit(const mbstate_t *ps)
.plt:0000000000001470 _mbsinit        proc near               ; CODE XREF: quotearg_buffer_restyled+9A8↓p
.plt:0000000000001470                 jmp     cs:mbsinit_ptr
.plt:0000000000001470 _mbsinit        endp
.plt:0000000000001470
.plt:0000000000001476 ; ---------------------------------------------------------------------------
.plt:0000000000001476                 push    24h ; '$'
.plt:000000000000147B                 jmp     sub_1220
.plt:0000000000001480
.plt:0000000000001480 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001480
.plt:0000000000001480 ; Attributes: thunk
.plt:0000000000001480
.plt:0000000000001480 ; int iswprint(wint_t wc)
.plt:0000000000001480 _iswprint       proc near               ; CODE XREF: quotearg_buffer_restyled+990↓p
.plt:0000000000001480                 jmp     cs:iswprint_ptr
.plt:0000000000001480 _iswprint       endp
.plt:0000000000001480
.plt:0000000000001486 ; ---------------------------------------------------------------------------
.plt:0000000000001486                 push    25h ; '%'
.plt:000000000000148B                 jmp     sub_1220
.plt:0000000000001490
.plt:0000000000001490 ; =============== S U B R O U T I N E =======================================
.plt:0000000000001490
.plt:0000000000001490 ; Attributes: thunk
.plt:0000000000001490
.plt:0000000000001490 ; const unsigned __int16 **__ctype_b_loc(void)
.plt:0000000000001490 ___ctype_b_loc  proc near               ; CODE XREF: quotearg_buffer_restyled+513↓p
.plt:0000000000001490                 jmp     cs:__ctype_b_loc_ptr
.plt:0000000000001490 ___ctype_b_loc  endp
.plt:0000000000001490
.plt:0000000000001496 ; ---------------------------------------------------------------------------
.plt:0000000000001496                 push    26h ; '&'
.plt:000000000000149B                 jmp     sub_1220
.plt:000000000000149B ; } // starts at 1220
.plt:000000000000149B _plt            ends
.plt:000000000000149B
.plt.got:00000000000014A0 ; ===========================================================================
.plt.got:00000000000014A0
.plt.got:00000000000014A0 ; Segment type: Pure code
.plt.got:00000000000014A0 ; Segment permissions: Read/Execute
.plt.got:00000000000014A0 _plt_got        segment qword public 'CODE' use64
.plt.got:00000000000014A0                 assume cs:_plt_got
.plt.got:00000000000014A0                 ;org 14A0h
.plt.got:00000000000014A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00000000000014A0
.plt.got:00000000000014A0 ; =============== S U B R O U T I N E =======================================
.plt.got:00000000000014A0
.plt.got:00000000000014A0 ; Attributes: thunk
.plt.got:00000000000014A0
.plt.got:00000000000014A0 ; int __fastcall _cxa_finalize(void *)
.plt.got:00000000000014A0 __cxa_finalize  proc near               ; CODE XREF: __do_global_dtors_aux+1E↓p
.plt.got:00000000000014A0 ; __unwind {
.plt.got:00000000000014A0                 jmp     cs:__cxa_finalize_ptr
.plt.got:00000000000014A0 __cxa_finalize  endp
.plt.got:00000000000014A0
.plt.got:00000000000014A0 ; ---------------------------------------------------------------------------
.plt.got:00000000000014A6                 align 8
.plt.got:00000000000014A6 ; } // starts at 14A0
.plt.got:00000000000014A6 _plt_got        ends
.plt.got:00000000000014A6
LOAD:00000000000014A8 ; ===========================================================================
LOAD:00000000000014A8
LOAD:00000000000014A8 ; Segment type: Pure code
LOAD:00000000000014A8 ; Segment permissions: Read/Execute
LOAD:00000000000014A8 LOAD            segment byte public 'CODE' use64
LOAD:00000000000014A8                 assume cs:LOAD
LOAD:00000000000014A8                 ;org 14A8h
LOAD:00000000000014A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000014A8                 align 10h
LOAD:00000000000014A8 LOAD            ends
LOAD:00000000000014A8
.text:00000000000014B0 ; ===========================================================================
.text:00000000000014B0
.text:00000000000014B0 ; Segment type: Pure code
.text:00000000000014B0 ; Segment permissions: Read/Execute
.text:00000000000014B0 _text           segment para public 'CODE' use64
.text:00000000000014B0                 assume cs:_text
.text:00000000000014B0                 ;org 14B0h
.text:00000000000014B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00000000000014B0
.text:00000000000014B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000014B0
.text:00000000000014B0 ; Attributes: noreturn
.text:00000000000014B0
.text:00000000000014B0 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00000000000014B0                 public main
.text:00000000000014B0 main            proc near               ; DATA XREF: start+1D↓o
.text:00000000000014B0
.text:00000000000014B0 var_58          = qword ptr -58h
.text:00000000000014B0 var_49          = byte ptr -49h
.text:00000000000014B0 longind         = dword ptr -44h
.text:00000000000014B0 var_40          = qword ptr -40h
.text:00000000000014B0
.text:00000000000014B0 ; __unwind {
.text:00000000000014B0                 push    r15
.text:00000000000014B2                 push    r14
.text:00000000000014B4                 xor     r15d, r15d
.text:00000000000014B7                 push    r13
.text:00000000000014B9                 push    r12
.text:00000000000014BB                 xor     r13d, r13d
.text:00000000000014BE                 push    rbp
.text:00000000000014BF                 push    rbx
.text:00000000000014C0                 mov     ebp, edi
.text:00000000000014C2                 mov     rbx, rsi
.text:00000000000014C5                 xor     r14d, r14d
.text:00000000000014C8                 sub     rsp, 28h
.text:00000000000014CC                 mov     rdi, [rsi]
.text:00000000000014CF                 mov     rax, fs:28h
.text:00000000000014D8                 mov     [rsp+58h+var_40], rax
.text:00000000000014DD                 xor     eax, eax
.text:00000000000014DF                 lea     r12, [rsp+58h+longind]
.text:00000000000014E4                 call    set_program_name
.text:00000000000014E9                 lea     rsi, aWrittenBySSAnd+1Bh ; locale
.text:00000000000014F0                 mov     edi, 6          ; category
.text:00000000000014F5                 call    _setlocale
.text:00000000000014FA                 lea     rsi, dirname    ; "/usr/local/share/locale"
.text:0000000000001501                 lea     rdi, domainname ; "coreutils"
.text:0000000000001508                 call    _bindtextdomain
.text:000000000000150D                 lea     rdi, domainname ; "coreutils"
.text:0000000000001514                 call    _textdomain
.text:0000000000001519                 lea     rdi, close_stdout
.text:0000000000001520                 call    atexit
.text:0000000000001525                 mov     [rsp+58h+var_49], 0
.text:000000000000152A                 mov     [rsp+58h+var_58], 0
.text:0000000000001532
.text:0000000000001532 loc_1532:                               ; CODE XREF: main+129↓j
.text:0000000000001532                                         ; main+133↓j ...
.text:0000000000001532                 lea     rcx, long_options ; longopts
.text:0000000000001539                 lea     rdx, shortopts  ; "+r:t:u:l:c"
.text:0000000000001540                 mov     r8, r12         ; longind
.text:0000000000001543                 mov     rsi, rbx        ; argv
.text:0000000000001546                 mov     edi, ebp        ; argc
.text:0000000000001548                 mov     [rsp+58h+longind], 0
.text:0000000000001550                 call    _getopt_long
.text:0000000000001555                 cmp     eax, 0FFFFFFFFh
.text:0000000000001558                 jz      loc_1634
.text:000000000000155E                 cmp     eax, 6Ch ; 'l'
.text:0000000000001561                 jz      loc_1619
.text:0000000000001567                 jg      short loc_15B0
.text:0000000000001569                 cmp     eax, 0FFFFFF7Eh
.text:000000000000156E                 jz      short loc_15E8
.text:0000000000001570                 cmp     eax, 63h ; 'c'
.text:0000000000001573                 jz      short loc_15DE
.text:0000000000001575                 cmp     eax, 0FFFFFF7Dh
.text:000000000000157A                 jnz     short loc_15BF
.text:000000000000157C                 mov     rdi, cs:stdout@@GLIBC_2_2_5
.text:0000000000001583                 mov     rcx, cs:Version
.text:000000000000158A                 lea     r8, aRussellCoker ; "Russell Coker"
.text:0000000000001591                 lea     rdx, unk_4701
.text:0000000000001598                 lea     rsi, aRuncon    ; "runcon"
.text:000000000000159F                 xor     r9d, r9d
.text:00000000000015A2                 xor     eax, eax
.text:00000000000015A4                 call    version_etc
.text:00000000000015A9                 xor     edi, edi        ; status
.text:00000000000015AB                 call    _exit
.text:00000000000015B0 ; ---------------------------------------------------------------------------
.text:00000000000015B0
.text:00000000000015B0 loc_15B0:                               ; CODE XREF: main+B7↑j
.text:00000000000015B0                 cmp     eax, 74h ; 't'
.text:00000000000015B3                 jz      short loc_15EF
.text:00000000000015B5                 cmp     eax, 75h ; 'u'
.text:00000000000015B8                 jz      short loc_15C9
.text:00000000000015BA                 cmp     eax, 72h ; 'r'
.text:00000000000015BD                 jz      short loc_1604
.text:00000000000015BF
.text:00000000000015BF loc_15BF:                               ; CODE XREF: main+CA↑j
.text:00000000000015BF                                         ; main+1DE↓j
.text:00000000000015BF                 mov     edi, 1          ; status
.text:00000000000015C4                 call    usage
.text:00000000000015C9 ; ---------------------------------------------------------------------------
.text:00000000000015C9
.text:00000000000015C9 loc_15C9:                               ; CODE XREF: main+108↑j
.text:00000000000015C9                 test    r13, r13
.text:00000000000015CC                 jnz     loc_16F3
.text:00000000000015D2                 mov     r13, cs:optarg@@GLIBC_2_2_5
.text:00000000000015D9                 jmp     loc_1532
.text:00000000000015DE ; ---------------------------------------------------------------------------
.text:00000000000015DE
.text:00000000000015DE loc_15DE:                               ; CODE XREF: main+C3↑j
.text:00000000000015DE                 mov     [rsp+58h+var_49], 1
.text:00000000000015E3                 jmp     loc_1532
.text:00000000000015E8 ; ---------------------------------------------------------------------------
.text:00000000000015E8
.text:00000000000015E8 loc_15E8:                               ; CODE XREF: main+BE↑j
.text:00000000000015E8                 xor     edi, edi        ; status
.text:00000000000015EA                 call    usage
.text:00000000000015EF ; ---------------------------------------------------------------------------
.text:00000000000015EF
.text:00000000000015EF loc_15EF:                               ; CODE XREF: main+103↑j
.text:00000000000015EF                 test    r15, r15
.text:00000000000015F2                 jnz     loc_1717
.text:00000000000015F8                 mov     r15, cs:optarg@@GLIBC_2_2_5
.text:00000000000015FF                 jmp     loc_1532
.text:0000000000001604 ; ---------------------------------------------------------------------------
.text:0000000000001604
.text:0000000000001604 loc_1604:                               ; CODE XREF: main+10D↑j
.text:0000000000001604                 test    r14, r14
.text:0000000000001607                 jnz     loc_173B
.text:000000000000160D                 mov     r14, cs:optarg@@GLIBC_2_2_5
.text:0000000000001614                 jmp     loc_1532
.text:0000000000001619 ; ---------------------------------------------------------------------------
.text:0000000000001619
.text:0000000000001619 loc_1619:                               ; CODE XREF: main+B1↑j
.text:0000000000001619                 cmp     [rsp+58h+var_58], 0
.text:000000000000161E                 jnz     loc_175F
.text:0000000000001624                 mov     rax, cs:optarg@@GLIBC_2_2_5
.text:000000000000162B                 mov     [rsp+58h+var_58], rax
.text:000000000000162F                 jmp     loc_1532
.text:0000000000001634 ; ---------------------------------------------------------------------------
.text:0000000000001634
.text:0000000000001634 loc_1634:                               ; CODE XREF: main+A8↑j
.text:0000000000001634                 mov     eax, cs:optind@@GLIBC_2_2_5
.text:000000000000163A                 cmp     eax, ebp
.text:000000000000163C                 jz      short loc_1693
.text:000000000000163E                 test    r13, r13
.text:0000000000001641                 jnz     short loc_1665
.text:0000000000001643                 test    r14, r14
.text:0000000000001646                 jnz     short loc_1665
.text:0000000000001648                 test    r15, r15
.text:000000000000164B                 setz    cl
.text:000000000000164E                 cmp     [rsp+58h+var_58], 0
.text:0000000000001653                 setz    dl
.text:0000000000001656                 test    cl, dl
.text:0000000000001658                 jz      short loc_1665
.text:000000000000165A                 cmp     [rsp+58h+var_49], 0
.text:000000000000165F                 jz      loc_1783
.text:0000000000001665
.text:0000000000001665 loc_1665:                               ; CODE XREF: main+191↑j
.text:0000000000001665                                         ; main+196↑j ...
.text:0000000000001665                 cmp     cs:optind@@GLIBC_2_2_5, ebp
.text:000000000000166B                 jl      short loc_16C5
.text:000000000000166D                 lea     rsi, msgid      ; "no command specified"
.text:0000000000001674                 mov     edx, 5          ; category
.text:0000000000001679
.text:0000000000001679 loc_1679:                               ; CODE XREF: main+2F1↓j
.text:0000000000001679                 xor     edi, edi        ; domainname
.text:000000000000167B                 call    _dcgettext
.text:0000000000001680                 xor     esi, esi        ; errnum
.text:0000000000001682                 mov     rdx, rax        ; format
.text:0000000000001685                 xor     edi, edi        ; status
.text:0000000000001687                 xor     eax, eax
.text:0000000000001689                 call    _error
.text:000000000000168E                 jmp     loc_15BF
.text:0000000000001693 ; ---------------------------------------------------------------------------
.text:0000000000001693
.text:0000000000001693 loc_1693:                               ; CODE XREF: main+18C↑j
.text:0000000000001693                 call    ___errno_location
.text:0000000000001698                 lea     rsi, aFailedToGetCur ; "failed to get current context"
.text:000000000000169F                 mov     rbx, rax
.text:00000000000016A2                 mov     edx, 5          ; category
.text:00000000000016A7                 xor     edi, edi        ; domainname
.text:00000000000016A9                 mov     dword ptr [rax], 5Fh ; '_'
.text:00000000000016AF                 call    _dcgettext
.text:00000000000016B4                 mov     esi, [rbx]      ; errnum
.text:00000000000016B6                 mov     rdx, rax        ; format
.text:00000000000016B9                 mov     edi, 1          ; status
.text:00000000000016BE                 xor     eax, eax
.text:00000000000016C0                 call    _error
.text:00000000000016C5
.text:00000000000016C5 loc_16C5:                               ; CODE XREF: main+1BB↑j
.text:00000000000016C5                 mov     rbx, cs:program_name
.text:00000000000016CC                 lea     rsi, aSMayBeUsedOnly ; "%s may be used only on a SELinux kernel"
.text:00000000000016D3                 mov     edx, 5          ; category
.text:00000000000016D8                 xor     edi, edi        ; domainname
.text:00000000000016DA                 call    _dcgettext
.text:00000000000016DF                 mov     rcx, rbx
.text:00000000000016E2                 mov     rdx, rax        ; format
.text:00000000000016E5                 xor     esi, esi        ; errnum
.text:00000000000016E7                 mov     edi, 1          ; status
.text:00000000000016EC                 xor     eax, eax
.text:00000000000016EE                 call    _error
.text:00000000000016F3
.text:00000000000016F3 loc_16F3:                               ; CODE XREF: main+11C↑j
.text:00000000000016F3                 lea     rsi, aMultipleUsers ; "multiple users"
.text:00000000000016FA                 mov     edx, 5          ; category
.text:00000000000016FF                 xor     edi, edi        ; domainname
.text:0000000000001701                 call    _dcgettext
.text:0000000000001706                 xor     esi, esi        ; errnum
.text:0000000000001708                 mov     rdx, rax        ; format
.text:000000000000170B                 mov     edi, 1          ; status
.text:0000000000001710                 xor     eax, eax
.text:0000000000001712                 call    _error
.text:0000000000001717
.text:0000000000001717 loc_1717:                               ; CODE XREF: main+142↑j
.text:0000000000001717                 lea     rsi, aMultipleTypes ; "multiple types"
.text:000000000000171E                 mov     edx, 5          ; category
.text:0000000000001723                 xor     edi, edi        ; domainname
.text:0000000000001725                 call    _dcgettext
.text:000000000000172A                 xor     esi, esi        ; errnum
.text:000000000000172C                 mov     rdx, rax        ; format
.text:000000000000172F                 mov     edi, 1          ; status
.text:0000000000001734                 xor     eax, eax
.text:0000000000001736                 call    _error
.text:000000000000173B
.text:000000000000173B loc_173B:                               ; CODE XREF: main+157↑j
.text:000000000000173B                 lea     rsi, aMultipleRoles ; "multiple roles"
.text:0000000000001742                 mov     edx, 5          ; category
.text:0000000000001747                 xor     edi, edi        ; domainname
.text:0000000000001749                 call    _dcgettext
.text:000000000000174E                 xor     esi, esi        ; errnum
.text:0000000000001750                 mov     rdx, rax        ; format
.text:0000000000001753                 mov     edi, 1          ; status
.text:0000000000001758                 xor     eax, eax
.text:000000000000175A                 call    _error
.text:000000000000175F
.text:000000000000175F loc_175F:                               ; CODE XREF: main+16E↑j
.text:000000000000175F                 lea     rsi, aMultipleLevelr ; "multiple levelranges"
.text:0000000000001766                 mov     edx, 5          ; category
.text:000000000000176B                 xor     edi, edi        ; domainname
.text:000000000000176D                 call    _dcgettext
.text:0000000000001772                 xor     esi, esi        ; errnum
.text:0000000000001774                 mov     rdx, rax        ; format
.text:0000000000001777                 mov     edi, 1          ; status
.text:000000000000177C                 xor     eax, eax
.text:000000000000177E                 call    _error
.text:0000000000001783
.text:0000000000001783 loc_1783:                               ; CODE XREF: main+1AF↑j
.text:0000000000001783                 cmp     eax, ebp
.text:0000000000001785                 jge     short loc_1795
.text:0000000000001787                 add     eax, 1
.text:000000000000178A                 mov     cs:optind@@GLIBC_2_2_5, eax
.text:0000000000001790                 jmp     loc_1665
.text:0000000000001795 ; ---------------------------------------------------------------------------
.text:0000000000001795
.text:0000000000001795 loc_1795:                               ; CODE XREF: main+2D5↑j
.text:0000000000001795                 mov     edx, 5
.text:000000000000179A                 lea     rsi, aYouMustSpecify ; "you must specify -c, -t, -u, -l, -r, or"...
.text:00000000000017A1                 jmp     loc_1679
.text:00000000000017A1 ; } // starts at 14B0
.text:00000000000017A1 main            endp
.text:00000000000017A1
.text:00000000000017A1 ; ---------------------------------------------------------------------------
.text:00000000000017A6                 align 10h
.text:00000000000017B0
.text:00000000000017B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017B0
.text:00000000000017B0 ; Attributes: noreturn fuzzy-sp info_from_lumina
.text:00000000000017B0
.text:00000000000017B0 ; void __fastcall __noreturn start(__int64, __int64, void (*)(void))
.text:00000000000017B0                 public start
.text:00000000000017B0 start           proc near               ; DATA XREF: LOAD:0000000000000018↑o
.text:00000000000017B0 ; __unwind {
.text:00000000000017B0                 xor     ebp, ebp
.text:00000000000017B2                 mov     r9, rdx         ; rtld_fini
.text:00000000000017B5                 pop     rsi             ; argc
.text:00000000000017B6                 mov     rdx, rsp        ; ubp_av
.text:00000000000017B9                 and     rsp, 0FFFFFFFFFFFFFFF0h
.text:00000000000017BD                 push    rax
.text:00000000000017BE                 push    rsp             ; stack_end
.text:00000000000017BF                 lea     r8, __libc_csu_fini ; fini
.text:00000000000017C6                 lea     rcx, __libc_csu_init ; init
.text:00000000000017CD                 lea     rdi, main       ; main
.text:00000000000017D4                 call    cs:__libc_start_main_ptr
.text:00000000000017DA                 hlt
.text:00000000000017DA ; } // starts at 17B0
.text:00000000000017DA start           endp
.text:00000000000017DA
.text:00000000000017DA ; ---------------------------------------------------------------------------
.text:00000000000017DB                 align 20h
.text:00000000000017E0
.text:00000000000017E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000017E0
.text:00000000000017E0 ; Attributes: bp-based frame info_from_lumina
.text:00000000000017E0
.text:00000000000017E0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_1893↓p
.text:00000000000017E0                 lea     rdi, __bss_start
.text:00000000000017E7                 push    rbp
.text:00000000000017E8                 lea     rax, __bss_start
.text:00000000000017EF                 cmp     rax, rdi
.text:00000000000017F2                 mov     rbp, rsp
.text:00000000000017F5                 jz      short loc_1810
.text:00000000000017F7                 mov     rax, cs:_ITM_deregisterTMCloneTable_ptr
.text:00000000000017FE                 test    rax, rax
.text:0000000000001801                 jz      short loc_1810
.text:0000000000001803                 pop     rbp
.text:0000000000001804                 jmp     rax
.text:0000000000001804 ; ---------------------------------------------------------------------------
.text:0000000000001806                 align 10h
.text:0000000000001810
.text:0000000000001810 loc_1810:                               ; CODE XREF: deregister_tm_clones+15↑j
.text:0000000000001810                                         ; deregister_tm_clones+21↑j
.text:0000000000001810                 pop     rbp
.text:0000000000001811                 retn
.text:0000000000001811 deregister_tm_clones endp
.text:0000000000001811
.text:0000000000001811 ; ---------------------------------------------------------------------------
.text:0000000000001812                 align 20h
.text:0000000000001820
.text:0000000000001820 ; =============== S U B R O U T I N E =======================================
.text:0000000000001820
.text:0000000000001820 ; Attributes: bp-based frame info_from_lumina
.text:0000000000001820
.text:0000000000001820 register_tm_clones proc near            ; CODE XREF: frame_dummy+5↓j
.text:0000000000001820                 lea     rdi, __bss_start
.text:0000000000001827                 lea     rsi, __bss_start
.text:000000000000182E                 push    rbp
.text:000000000000182F                 sub     rsi, rdi
.text:0000000000001832                 mov     rbp, rsp
.text:0000000000001835                 sar     rsi, 3
.text:0000000000001839                 mov     rax, rsi
.text:000000000000183C                 shr     rax, 3Fh
.text:0000000000001840                 add     rsi, rax
.text:0000000000001843                 sar     rsi, 1
.text:0000000000001846                 jz      short loc_1860
.text:0000000000001848                 mov     rax, cs:_ITM_registerTMCloneTable_ptr
.text:000000000000184F                 test    rax, rax
.text:0000000000001852                 jz      short loc_1860
.text:0000000000001854                 pop     rbp
.text:0000000000001855                 jmp     rax
.text:0000000000001855 ; ---------------------------------------------------------------------------
.text:0000000000001857                 align 20h
.text:0000000000001860
.text:0000000000001860 loc_1860:                               ; CODE XREF: register_tm_clones+26↑j
.text:0000000000001860                                         ; register_tm_clones+32↑j
.text:0000000000001860                 pop     rbp
.text:0000000000001861                 retn
.text:0000000000001861 register_tm_clones endp
.text:0000000000001861
.text:0000000000001861 ; ---------------------------------------------------------------------------
.text:0000000000001862                 align 10h
.text:0000000000001870
.text:0000000000001870 ; =============== S U B R O U T I N E =======================================
.text:0000000000001870
.text:0000000000001870 ; Attributes: info_from_lumina
.text:0000000000001870
.text:0000000000001870 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:0000000000001870                 cmp     cs:completed_7697, 0
.text:0000000000001877                 jnz     short locret_18A8
.text:0000000000001879                 cmp     cs:__cxa_finalize_ptr, 0
.text:0000000000001881                 push    rbp
.text:0000000000001882                 mov     rbp, rsp
.text:0000000000001885                 jz      short loc_1893
.text:0000000000001887                 mov     rdi, cs:__dso_handle ; void *
.text:000000000000188E                 call    __cxa_finalize
.text:0000000000001893
.text:0000000000001893 loc_1893:                               ; CODE XREF: __do_global_dtors_aux+15↑j
.text:0000000000001893                 call    deregister_tm_clones
.text:0000000000001898                 mov     cs:completed_7697, 1
.text:000000000000189F                 pop     rbp
.text:00000000000018A0                 retn
.text:00000000000018A0 ; ---------------------------------------------------------------------------
.text:00000000000018A1                 align 8
.text:00000000000018A8
.text:00000000000018A8 locret_18A8:                            ; CODE XREF: __do_global_dtors_aux+7↑j
.text:00000000000018A8                 rep retn
.text:00000000000018A8 __do_global_dtors_aux endp
.text:00000000000018A8
.text:00000000000018A8 ; ---------------------------------------------------------------------------
.text:00000000000018AA                 align 10h
.text:00000000000018B0
.text:00000000000018B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018B0
.text:00000000000018B0 ; Attributes: bp-based frame
.text:00000000000018B0
.text:00000000000018B0 frame_dummy     proc near               ; CODE XREF: __libc_csu_init+49↓p
.text:00000000000018B0                                         ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:00000000000018B0                 push    rbp
.text:00000000000018B1                 mov     rbp, rsp
.text:00000000000018B4                 pop     rbp
.text:00000000000018B5                 jmp     register_tm_clones
.text:00000000000018B5 frame_dummy     endp
.text:00000000000018B5
.text:00000000000018B5 ; ---------------------------------------------------------------------------
.text:00000000000018BA                 align 20h
.text:00000000000018C0
.text:00000000000018C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000018C0
.text:00000000000018C0 ; Attributes: noreturn
.text:00000000000018C0
.text:00000000000018C0 ; void __fastcall __noreturn usage(int status)
.text:00000000000018C0                 public usage
.text:00000000000018C0 usage           proc near               ; CODE XREF: main+114↑p
.text:00000000000018C0                                         ; main+13A↑p
.text:00000000000018C0
.text:00000000000018C0 var_A8          = qword ptr -0A8h
.text:00000000000018C0 var_A0          = qword ptr -0A0h
.text:00000000000018C0 var_98          = qword ptr -98h
.text:00000000000018C0 var_90          = qword ptr -90h
.text:00000000000018C0 var_88          = qword ptr -88h
.text:00000000000018C0 var_80          = qword ptr -80h
.text:00000000000018C0 var_78          = qword ptr -78h
.text:00000000000018C0 var_70          = qword ptr -70h
.text:00000000000018C0 var_68          = qword ptr -68h
.text:00000000000018C0 var_60          = qword ptr -60h
.text:00000000000018C0 var_58          = qword ptr -58h
.text:00000000000018C0 var_50          = qword ptr -50h
.text:00000000000018C0 var_48          = qword ptr -48h
.text:00000000000018C0 var_40          = qword ptr -40h
.text:00000000000018C0 var_30          = qword ptr -30h
.text:00000000000018C0
.text:00000000000018C0 ; __unwind {
.text:00000000000018C0                 push    r13
.text:00000000000018C2                 push    r12
.text:00000000000018C4                 mov     edx, 5          ; category
.text:00000000000018C9                 push    rbp
.text:00000000000018CA                 push    rbx
.text:00000000000018CB                 mov     ebp, edi
.text:00000000000018CD                 sub     rsp, 88h
.text:00000000000018D4                 mov     rbx, cs:program_name
.text:00000000000018DB                 mov     rax, fs:28h
.text:00000000000018E4                 mov     [rsp+0A8h+var_30], rax
.text:00000000000018E9                 xor     eax, eax
.text:00000000000018EB                 test    edi, edi
.text:00000000000018ED                 jz      short loc_191D
.text:00000000000018EF                 lea     rsi, aTrySHelpForMor ; "Try '%s --help' for more information.\n"
.text:00000000000018F6                 xor     edi, edi        ; domainname
.text:00000000000018F8                 call    _dcgettext
.text:00000000000018FD                 mov     rdi, cs:stderr@@GLIBC_2_2_5
.text:0000000000001904                 mov     rdx, rax
.text:0000000000001907                 mov     rcx, rbx
.text:000000000000190A                 mov     esi, 1
.text:000000000000190F                 xor     eax, eax
.text:0000000000001911                 call    ___fprintf_chk
.text:0000000000001916
.text:0000000000001916 loc_1916:                               ; CODE XREF: usage+2C6↓j
.text:0000000000001916                 mov     edi, ebp        ; status
.text:0000000000001918                 call    _exit
.text:000000000000191D ; ---------------------------------------------------------------------------
.text:000000000000191D
.text:000000000000191D loc_191D:                               ; CODE XREF: usage+2D↑j
.text:000000000000191D                 lea     rsi, aUsageSContextC ; "Usage: %s CONTEXT COMMAND [args]\n  or:"...
.text:0000000000001924                 xor     edi, edi        ; domainname
.text:0000000000001926                 call    _dcgettext
.text:000000000000192B                 mov     rcx, rbx
.text:000000000000192E                 mov     rdx, rbx
.text:0000000000001931                 mov     rsi, rax
.text:0000000000001934                 mov     edi, 1
.text:0000000000001939                 xor     eax, eax
.text:000000000000193B                 call    ___printf_chk
.text:0000000000001940                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001947                 lea     rsi, aRunAProgramInA ; "Run a program in a different SELinux se"...
.text:000000000000194E                 mov     edx, 5          ; category
.text:0000000000001953                 xor     edi, edi        ; domainname
.text:0000000000001955                 call    _dcgettext
.text:000000000000195A                 mov     rsi, rbx        ; stream
.text:000000000000195D                 mov     rdi, rax        ; s
.text:0000000000001960                 call    _fputs_unlocked
.text:0000000000001965                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:000000000000196C                 lea     rsi, aMandatoryArgum ; "\nMandatory arguments to long options a"...
.text:0000000000001973                 mov     edx, 5          ; category
.text:0000000000001978                 xor     edi, edi        ; domainname
.text:000000000000197A                 call    _dcgettext
.text:000000000000197F                 mov     rsi, rbx        ; stream
.text:0000000000001982                 mov     rdi, rax        ; s
.text:0000000000001985                 call    _fputs_unlocked
.text:000000000000198A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000001991                 lea     rsi, aContextComplet ; "  CONTEXT            Complete security "...
.text:0000000000001998                 mov     edx, 5          ; category
.text:000000000000199D                 xor     edi, edi        ; domainname
.text:000000000000199F                 call    _dcgettext
.text:00000000000019A4                 mov     rsi, rbx        ; stream
.text:00000000000019A7                 mov     rdi, rax        ; s
.text:00000000000019AA                 call    _fputs_unlocked
.text:00000000000019AF                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000019B6                 lea     rsi, aHelpDisplayThi ; "      --help     display this help and "...
.text:00000000000019BD                 mov     edx, 5          ; category
.text:00000000000019C2                 xor     edi, edi        ; domainname
.text:00000000000019C4                 call    _dcgettext
.text:00000000000019C9                 mov     rsi, rbx        ; stream
.text:00000000000019CC                 mov     rdi, rax        ; s
.text:00000000000019CF                 call    _fputs_unlocked
.text:00000000000019D4                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:00000000000019DB                 lea     rsi, aVersionOutputV ; "      --version  output version informa"...
.text:00000000000019E2                 mov     edx, 5          ; category
.text:00000000000019E7                 xor     edi, edi        ; domainname
.text:00000000000019E9                 call    _dcgettext
.text:00000000000019EE                 mov     rsi, rbx        ; stream
.text:00000000000019F1                 mov     rdi, rax        ; s
.text:00000000000019F4                 lea     rbx, aRuncon    ; "runcon"
.text:00000000000019FB                 call    _fputs_unlocked
.text:0000000000001A00                 lea     rax, asc_468B   ; "["
.text:0000000000001A07                 lea     rcx, aSha256sum ; "sha256sum"
.text:0000000000001A0E                 mov     [rsp+0A8h+var_48], 0
.text:0000000000001A17                 mov     [rsp+0A8h+var_40], 0
.text:0000000000001A20                 mov     rdx, rsp
.text:0000000000001A23                 mov     [rsp+0A8h+var_A8], rax
.text:0000000000001A27                 lea     rax, aTestInvocation ; "test invocation"
.text:0000000000001A2E                 mov     [rsp+0A8h+var_78], rcx
.text:0000000000001A33                 lea     rcx, aSha384sum ; "sha384sum"
.text:0000000000001A3A                 mov     [rsp+0A8h+var_A0], rax
.text:0000000000001A3F                 lea     rax, domainname ; "coreutils"
.text:0000000000001A46                 mov     [rsp+0A8h+var_68], rcx
.text:0000000000001A4B                 lea     rcx, aSha512sum ; "sha512sum"
.text:0000000000001A52                 mov     [rsp+0A8h+var_98], rax
.text:0000000000001A57                 lea     rax, aMultiCallInvoc ; "Multi-call invocation"
.text:0000000000001A5E                 mov     [rsp+0A8h+var_58], rcx
.text:0000000000001A63                 mov     [rsp+0A8h+var_90], rax
.text:0000000000001A68                 lea     rax, aSha224sum ; "sha224sum"
.text:0000000000001A6F                 mov     [rsp+0A8h+var_88], rax
.text:0000000000001A74                 lea     rax, aSha2Utilities ; "sha2 utilities"
.text:0000000000001A7B                 mov     [rsp+0A8h+var_80], rax
.text:0000000000001A80                 mov     [rsp+0A8h+var_70], rax
.text:0000000000001A85                 mov     [rsp+0A8h+var_60], rax
.text:0000000000001A8A                 mov     [rsp+0A8h+var_50], rax
.text:0000000000001A8F                 nop
.text:0000000000001A90
.text:0000000000001A90 loc_1A90:                               ; CODE XREF: usage+1ED↓j
.text:0000000000001A90                 add     rdx, 10h
.text:0000000000001A94                 mov     rdi, [rdx]
.text:0000000000001A97                 test    rdi, rdi
.text:0000000000001A9A                 jz      short loc_1AAF
.text:0000000000001A9C                 mov     ecx, 7
.text:0000000000001AA1                 mov     rsi, rbx
.text:0000000000001AA4                 repe cmpsb
.text:0000000000001AA6                 setnbe  al
.text:0000000000001AA9                 sbb     al, 0
.text:0000000000001AAB                 test    al, al
.text:0000000000001AAD                 jnz     short loc_1A90
.text:0000000000001AAF
.text:0000000000001AAF loc_1AAF:                               ; CODE XREF: usage+1DA↑j
.text:0000000000001AAF                 mov     r12, [rdx+8]
.text:0000000000001AB3                 xor     edi, edi        ; domainname
.text:0000000000001AB5                 mov     edx, 5          ; category
.text:0000000000001ABA                 lea     rsi, aSOnlineHelpS ; "\n%s online help: <%s>\n"
.text:0000000000001AC1                 test    r12, r12
.text:0000000000001AC4                 jz      loc_1B8B
.text:0000000000001ACA                 call    _dcgettext
.text:0000000000001ACF                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001AD6                 lea     rdx, unk_4701
.text:0000000000001ADD                 mov     rsi, rax
.text:0000000000001AE0                 mov     edi, 1
.text:0000000000001AE5                 xor     eax, eax
.text:0000000000001AE7                 call    ___printf_chk
.text:0000000000001AEC                 xor     esi, esi        ; locale
.text:0000000000001AEE                 mov     edi, 5          ; category
.text:0000000000001AF3                 call    _setlocale
.text:0000000000001AF8                 test    rax, rax
.text:0000000000001AFB                 jz      short loc_1B19
.text:0000000000001AFD                 lea     rsi, s2         ; "en_"
.text:0000000000001B04                 mov     edx, 3          ; n
.text:0000000000001B09                 mov     rdi, rax        ; s1
.text:0000000000001B0C                 call    _strncmp
.text:0000000000001B11                 test    eax, eax
.text:0000000000001B13                 jnz     loc_1C20
.text:0000000000001B19
.text:0000000000001B19 loc_1B19:                               ; CODE XREF: usage+23B↑j
.text:0000000000001B19                                         ; usage+385↓j
.text:0000000000001B19                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001B20                 xor     edi, edi        ; domainname
.text:0000000000001B22                 mov     edx, 5          ; category
.text:0000000000001B27                 call    _dcgettext
.text:0000000000001B2C                 lea     rcx, aRuncon    ; "runcon"
.text:0000000000001B33                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001B3A                 mov     rsi, rax
.text:0000000000001B3D                 mov     edi, 1
.text:0000000000001B42                 xor     eax, eax
.text:0000000000001B44                 call    ___printf_chk
.text:0000000000001B49                 cmp     r12, rbx
.text:0000000000001B4C                 lea     rcx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001B53                 lea     rbx, aWrittenBySSAnd+1Bh ; ""
.text:0000000000001B5A                 cmovz   rbx, rcx
.text:0000000000001B5E
.text:0000000000001B5E loc_1B5E:                               ; CODE XREF: usage+354↓j
.text:0000000000001B5E                 lea     rsi, aOrAvailableLoc ; "or available locally via: info '(coreut"...
.text:0000000000001B65                 xor     edi, edi        ; domainname
.text:0000000000001B67                 mov     edx, 5          ; category
.text:0000000000001B6C                 call    _dcgettext
.text:0000000000001B71                 mov     rcx, rbx
.text:0000000000001B74                 mov     rsi, rax
.text:0000000000001B77                 mov     rdx, r12
.text:0000000000001B7A                 mov     edi, 1
.text:0000000000001B7F                 xor     eax, eax
.text:0000000000001B81                 call    ___printf_chk
.text:0000000000001B86                 jmp     loc_1916
.text:0000000000001B8B ; ---------------------------------------------------------------------------
.text:0000000000001B8B
.text:0000000000001B8B loc_1B8B:                               ; CODE XREF: usage+204↑j
.text:0000000000001B8B                 call    _dcgettext
.text:0000000000001B90                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001B97                 lea     rdx, unk_4701
.text:0000000000001B9E                 mov     rsi, rax
.text:0000000000001BA1                 mov     edi, 1
.text:0000000000001BA6                 xor     eax, eax
.text:0000000000001BA8                 call    ___printf_chk
.text:0000000000001BAD                 xor     esi, esi        ; locale
.text:0000000000001BAF                 mov     edi, 5          ; category
.text:0000000000001BB4                 call    _setlocale
.text:0000000000001BB9                 test    rax, rax
.text:0000000000001BBC                 jz      short loc_1BD6
.text:0000000000001BBE                 lea     rsi, s2         ; "en_"
.text:0000000000001BC5                 mov     edx, 3          ; n
.text:0000000000001BCA                 mov     rdi, rax        ; s1
.text:0000000000001BCD                 call    _strncmp
.text:0000000000001BD2                 test    eax, eax
.text:0000000000001BD4                 jnz     short loc_1C19
.text:0000000000001BD6
.text:0000000000001BD6 loc_1BD6:                               ; CODE XREF: usage+2FC↑j
.text:0000000000001BD6                 lea     rsi, aFullDocumentat ; "Full documentation <%s%s>\n"
.text:0000000000001BDD                 mov     edx, 5          ; category
.text:0000000000001BE2                 xor     edi, edi        ; domainname
.text:0000000000001BE4                 lea     r12, aRuncon    ; "runcon"
.text:0000000000001BEB                 lea     rbx, aMultiCallInvoc+0Ah ; " invocation"
.text:0000000000001BF2                 call    _dcgettext
.text:0000000000001BF7                 lea     rcx, aRuncon    ; "runcon"
.text:0000000000001BFE                 lea     rdx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000001C05                 mov     rsi, rax
.text:0000000000001C08                 mov     edi, 1
.text:0000000000001C0D                 xor     eax, eax
.text:0000000000001C0F                 call    ___printf_chk
.text:0000000000001C14                 jmp     loc_1B5E
.text:0000000000001C19 ; ---------------------------------------------------------------------------
.text:0000000000001C19
.text:0000000000001C19 loc_1C19:                               ; CODE XREF: usage+314↑j
.text:0000000000001C19                 lea     r12, aRuncon    ; "runcon"
.text:0000000000001C20
.text:0000000000001C20 loc_1C20:                               ; CODE XREF: usage+253↑j
.text:0000000000001C20                 mov     r13, cs:stdout@@GLIBC_2_2_5
.text:0000000000001C27                 lea     rsi, aReportAnyTrans ; "Report any translation bugs to <https:/"...
.text:0000000000001C2E                 xor     edi, edi        ; domainname
.text:0000000000001C30                 mov     edx, 5          ; category
.text:0000000000001C35                 call    _dcgettext
.text:0000000000001C3A                 mov     rsi, r13        ; stream
.text:0000000000001C3D                 mov     rdi, rax        ; s
.text:0000000000001C40                 call    _fputs_unlocked
.text:0000000000001C45                 jmp     loc_1B19
.text:0000000000001C45 ; } // starts at 18C0
.text:0000000000001C45 usage           endp
.text:0000000000001C45
.text:0000000000001C45 ; ---------------------------------------------------------------------------
.text:0000000000001C4A                 align 10h
.text:0000000000001C50
.text:0000000000001C50 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C50
.text:0000000000001C50
.text:0000000000001C50                 public close_stdout_set_file_name
.text:0000000000001C50 close_stdout_set_file_name proc near
.text:0000000000001C50 ; __unwind {
.text:0000000000001C50                 mov     cs:file_name, rdi
.text:0000000000001C57                 retn
.text:0000000000001C57 ; } // starts at 1C50
.text:0000000000001C57 close_stdout_set_file_name endp
.text:0000000000001C57
.text:0000000000001C57 ; ---------------------------------------------------------------------------
.text:0000000000001C58                 align 20h
.text:0000000000001C60
.text:0000000000001C60 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C60
.text:0000000000001C60
.text:0000000000001C60                 public close_stdout_set_ignore_EPIPE
.text:0000000000001C60 close_stdout_set_ignore_EPIPE proc near
.text:0000000000001C60 ; __unwind {
.text:0000000000001C60                 mov     cs:ignore_EPIPE, dil
.text:0000000000001C67                 retn
.text:0000000000001C67 ; } // starts at 1C60
.text:0000000000001C67 close_stdout_set_ignore_EPIPE endp
.text:0000000000001C67
.text:0000000000001C67 ; ---------------------------------------------------------------------------
.text:0000000000001C68                 align 10h
.text:0000000000001C70
.text:0000000000001C70 ; =============== S U B R O U T I N E =======================================
.text:0000000000001C70
.text:0000000000001C70 ; Attributes: info_from_lumina
.text:0000000000001C70
.text:0000000000001C70 ; void __cdecl close_stdout()
.text:0000000000001C70                 public close_stdout
.text:0000000000001C70 close_stdout    proc near               ; DATA XREF: main+69↑o
.text:0000000000001C70 ; __unwind {
.text:0000000000001C70                 push    rbp
.text:0000000000001C71                 push    rbx
.text:0000000000001C72                 sub     rsp, 8
.text:0000000000001C76                 mov     rdi, cs:stdout@@GLIBC_2_2_5 ; stream
.text:0000000000001C7D                 call    close_stream
.text:0000000000001C82                 test    eax, eax
.text:0000000000001C84                 jz      short loc_1C9C
.text:0000000000001C86                 call    ___errno_location
.text:0000000000001C8B                 cmp     cs:ignore_EPIPE, 0
.text:0000000000001C92                 mov     rbx, rax
.text:0000000000001C95                 jz      short loc_1CB3
.text:0000000000001C97                 cmp     dword ptr [rax], 20h ; ' '
.text:0000000000001C9A                 jnz     short loc_1CB3
.text:0000000000001C9C
.text:0000000000001C9C loc_1C9C:                               ; CODE XREF: close_stdout+14↑j
.text:0000000000001C9C                 mov     rdi, cs:stderr@@GLIBC_2_2_5 ; stream
.text:0000000000001CA3                 call    close_stream
.text:0000000000001CA8                 test    eax, eax
.text:0000000000001CAA                 jnz     short loc_1CF2
.text:0000000000001CAC                 add     rsp, 8
.text:0000000000001CB0                 pop     rbx
.text:0000000000001CB1                 pop     rbp
.text:0000000000001CB2                 retn
.text:0000000000001CB3 ; ---------------------------------------------------------------------------
.text:0000000000001CB3
.text:0000000000001CB3 loc_1CB3:                               ; CODE XREF: close_stdout+25↑j
.text:0000000000001CB3                                         ; close_stdout+2A↑j
.text:0000000000001CB3                 lea     rsi, aWriteError ; "write error"
.text:0000000000001CBA                 xor     edi, edi        ; domainname
.text:0000000000001CBC                 mov     edx, 5          ; category
.text:0000000000001CC1                 call    _dcgettext
.text:0000000000001CC6                 mov     rdi, cs:file_name
.text:0000000000001CCD                 mov     rbp, rax
.text:0000000000001CD0                 test    rdi, rdi
.text:0000000000001CD3                 jz      short loc_1CFD
.text:0000000000001CD5                 call    quotearg_colon
.text:0000000000001CDA                 mov     esi, [rbx]      ; errnum
.text:0000000000001CDC                 lea     rdx, format     ; "%s: %s"
.text:0000000000001CE3                 mov     rcx, rax
.text:0000000000001CE6                 mov     r8, rbp
.text:0000000000001CE9                 xor     edi, edi        ; status
.text:0000000000001CEB                 xor     eax, eax
.text:0000000000001CED                 call    _error
.text:0000000000001CF2
.text:0000000000001CF2 loc_1CF2:                               ; CODE XREF: close_stdout+3A↑j
.text:0000000000001CF2                                         ; close_stdout+A2↓j
.text:0000000000001CF2                 mov     edi, cs:exit_failure ; status
.text:0000000000001CF8                 call    __exit
.text:0000000000001CFD ; ---------------------------------------------------------------------------
.text:0000000000001CFD
.text:0000000000001CFD loc_1CFD:                               ; CODE XREF: close_stdout+63↑j
.text:0000000000001CFD                 mov     esi, [rbx]      ; errnum
.text:0000000000001CFF                 lea     rdx, format+4   ; format
.text:0000000000001D06                 mov     rcx, rax
.text:0000000000001D09                 xor     edi, edi        ; status
.text:0000000000001D0B                 xor     eax, eax
.text:0000000000001D0D                 call    _error
.text:0000000000001D12                 jmp     short loc_1CF2
.text:0000000000001D12 ; } // starts at 1C70
.text:0000000000001D12 close_stdout    endp
.text:0000000000001D12
.text:0000000000001D12 ; ---------------------------------------------------------------------------
.text:0000000000001D14                 align 20h
.text:0000000000001D20
.text:0000000000001D20 ; =============== S U B R O U T I N E =======================================
.text:0000000000001D20
.text:0000000000001D20
.text:0000000000001D20                 public set_program_name
.text:0000000000001D20 set_program_name proc near              ; CODE XREF: main+34↑p
.text:0000000000001D20 ; __unwind {
.text:0000000000001D20                 test    rdi, rdi
.text:0000000000001D23                 push    rbx
.text:0000000000001D24                 jz      short loc_1D9D
.text:0000000000001D26                 mov     esi, 2Fh ; '/'  ; c
.text:0000000000001D2B                 mov     rbx, rdi
.text:0000000000001D2E                 call    _strrchr
.text:0000000000001D33                 test    rax, rax
.text:0000000000001D36                 jz      short loc_1D8D
.text:0000000000001D38                 lea     r8, [rax+1]
.text:0000000000001D3C                 mov     rdx, r8
.text:0000000000001D3F                 sub     rdx, rbx
.text:0000000000001D42                 cmp     rdx, 6
.text:0000000000001D46                 jle     short loc_1D8D
.text:0000000000001D48                 lea     rsi, [rax-6]
.text:0000000000001D4C                 lea     rdi, aLibs      ; "/.libs/"
.text:0000000000001D53                 mov     ecx, 7
.text:0000000000001D58                 repe cmpsb
.text:0000000000001D5A                 setnbe  dl
.text:0000000000001D5D                 sbb     dl, 0
.text:0000000000001D60                 test    dl, dl
.text:0000000000001D62                 jnz     short loc_1D8D
.text:0000000000001D64                 lea     rdi, aLt        ; "lt-"
.text:0000000000001D6B                 mov     ecx, 3
.text:0000000000001D70                 mov     rsi, r8
.text:0000000000001D73                 mov     rbx, r8
.text:0000000000001D76                 repe cmpsb
.text:0000000000001D78                 setnbe  dl
.text:0000000000001D7B                 sbb     dl, 0
.text:0000000000001D7E                 test    dl, dl
.text:0000000000001D80                 jnz     short loc_1D8D
.text:0000000000001D82                 lea     rbx, [rax+4]
.text:0000000000001D86                 mov     cs:__bss_start, rbx
.text:0000000000001D8D
.text:0000000000001D8D loc_1D8D:                               ; CODE XREF: set_program_name+16↑j
.text:0000000000001D8D                                         ; set_program_name+26↑j ...
.text:0000000000001D8D                 mov     cs:program_name, rbx
.text:0000000000001D94                 mov     cs:program_invocation_name@@GLIBC_2_2_5, rbx
.text:0000000000001D9B                 pop     rbx
.text:0000000000001D9C                 retn
.text:0000000000001D9D ; ---------------------------------------------------------------------------
.text:0000000000001D9D
.text:0000000000001D9D loc_1D9D:                               ; CODE XREF: set_program_name+4↑j
.text:0000000000001D9D                 mov     rcx, cs:stderr@@GLIBC_2_2_5 ; s
.text:0000000000001DA4                 lea     rdi, aANullArgv0WasP ; "A NULL argv[0] was passed through an ex"...
.text:0000000000001DAB                 mov     edx, 37h ; '7'  ; n
.text:0000000000001DB0                 mov     esi, 1          ; size
.text:0000000000001DB5                 call    _fwrite
.text:0000000000001DBA                 call    _abort
.text:0000000000001DBA ; } // starts at 1D20
.text:0000000000001DBA set_program_name endp
.text:0000000000001DBA
.text:0000000000001DBA ; ---------------------------------------------------------------------------
.text:0000000000001DBF                 align 20h
.text:0000000000001DC0
.text:0000000000001DC0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001DC0
.text:0000000000001DC0 ; Attributes: info_from_lumina
.text:0000000000001DC0
.text:0000000000001DC0 ; const char *__fastcall gettext_quote(const char *msgid, quoting_style s)
.text:0000000000001DC0 gettext_quote   proc near               ; CODE XREF: quotearg_buffer_restyled+1165↓p
.text:0000000000001DC0                                         ; quotearg_buffer_restyled+117B↓p
.text:0000000000001DC0 ; __unwind {
.text:0000000000001DC0                 push    rbp
.text:0000000000001DC1                 push    rbx
.text:0000000000001DC2                 mov     rbp, rdi
.text:0000000000001DC5                 mov     ebx, esi
.text:0000000000001DC7                 sub     rsp, 8
.text:0000000000001DCB                 call    locale_charset
.text:0000000000001DD0                 movzx   edx, byte ptr [rax]
.text:0000000000001DD3                 and     edx, 0FFFFFFDFh
.text:0000000000001DD6                 cmp     dl, 55h ; 'U'
.text:0000000000001DD9                 jz      short loc_1E50
.text:0000000000001DDB                 cmp     dl, 47h ; 'G'
.text:0000000000001DDE                 jz      short loc_1E00
.text:0000000000001DE0
.text:0000000000001DE0 loc_1DE0:                               ; CODE XREF: gettext_quote+4A↓j
.text:0000000000001DE0                                         ; gettext_quote+50↓j ...
.text:0000000000001DE0                 lea     rax, unk_4C4B
.text:0000000000001DE7                 lea     rdx, asc_4C4D   ; "'"
.text:0000000000001DEE                 cmp     ebx, 9
.text:0000000000001DF1                 cmovnz  rax, rdx
.text:0000000000001DF5                 add     rsp, 8
.text:0000000000001DF9                 pop     rbx
.text:0000000000001DFA                 pop     rbp
.text:0000000000001DFB                 retn
.text:0000000000001DFB ; ---------------------------------------------------------------------------
.text:0000000000001DFC                 align 20h
.text:0000000000001E00
.text:0000000000001E00 loc_1E00:                               ; CODE XREF: gettext_quote+1E↑j
.text:0000000000001E00                 movzx   edx, byte ptr [rax+1]
.text:0000000000001E04                 and     edx, 0FFFFFFDFh
.text:0000000000001E07                 cmp     dl, 42h ; 'B'
.text:0000000000001E0A                 jnz     short loc_1DE0
.text:0000000000001E0C                 cmp     byte ptr [rax+2], 31h ; '1'
.text:0000000000001E10                 jnz     short loc_1DE0
.text:0000000000001E12                 cmp     byte ptr [rax+3], 38h ; '8'
.text:0000000000001E16                 jnz     short loc_1DE0
.text:0000000000001E18                 cmp     byte ptr [rax+4], 30h ; '0'
.text:0000000000001E1C                 jnz     short loc_1DE0
.text:0000000000001E1E                 cmp     byte ptr [rax+5], 33h ; '3'
.text:0000000000001E22                 jnz     short loc_1DE0
.text:0000000000001E24                 cmp     byte ptr [rax+6], 30h ; '0'
.text:0000000000001E28                 jnz     short loc_1DE0
.text:0000000000001E2A                 cmp     byte ptr [rax+7], 0
.text:0000000000001E2E                 jnz     short loc_1DE0
.text:0000000000001E30                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001E34                 lea     rax, unk_4C44
.text:0000000000001E3B                 lea     rdx, unk_4C48
.text:0000000000001E42                 cmovnz  rax, rdx
.text:0000000000001E46                 add     rsp, 8
.text:0000000000001E4A                 pop     rbx
.text:0000000000001E4B                 pop     rbp
.text:0000000000001E4C                 retn
.text:0000000000001E4C ; ---------------------------------------------------------------------------
.text:0000000000001E4D                 align 10h
.text:0000000000001E50
.text:0000000000001E50 loc_1E50:                               ; CODE XREF: gettext_quote+19↑j
.text:0000000000001E50                 movzx   edx, byte ptr [rax+1]
.text:0000000000001E54                 and     edx, 0FFFFFFDFh
.text:0000000000001E57                 cmp     dl, 54h ; 'T'
.text:0000000000001E5A                 jnz     short loc_1DE0
.text:0000000000001E5C                 movzx   edx, byte ptr [rax+2]
.text:0000000000001E60                 and     edx, 0FFFFFFDFh
.text:0000000000001E63                 cmp     dl, 46h ; 'F'
.text:0000000000001E66                 jnz     loc_1DE0
.text:0000000000001E6C                 cmp     byte ptr [rax+3], 2Dh ; '-'
.text:0000000000001E70                 jnz     loc_1DE0
.text:0000000000001E76                 cmp     byte ptr [rax+4], 38h ; '8'
.text:0000000000001E7A                 jnz     loc_1DE0
.text:0000000000001E80                 cmp     byte ptr [rax+5], 0
.text:0000000000001E84                 jnz     loc_1DE0
.text:0000000000001E8A                 cmp     byte ptr [rbp+0], 60h ; '`'
.text:0000000000001E8E                 lea     rax, unk_4C3C
.text:0000000000001E95                 lea     rdx, unk_4C40
.text:0000000000001E9C                 cmovnz  rax, rdx
.text:0000000000001EA0                 add     rsp, 8
.text:0000000000001EA4                 pop     rbx
.text:0000000000001EA5                 pop     rbp
.text:0000000000001EA6                 retn
.text:0000000000001EA6 ; } // starts at 1DC0
.text:0000000000001EA6 gettext_quote   endp
.text:0000000000001EA6
.text:0000000000001EA6 ; ---------------------------------------------------------------------------
.text:0000000000001EA7                 align 10h
.text:0000000000001EB0
.text:0000000000001EB0 ; =============== S U B R O U T I N E =======================================
.text:0000000000001EB0
.text:0000000000001EB0 ; Attributes: info_from_lumina
.text:0000000000001EB0
.text:0000000000001EB0 ; size_t __fastcall quotearg_buffer_restyled(char *buffer, size_t buffersize, const char *arg, size_t argsize, quoting_style quoting_style, int flags, const unsigned int *quote_these_too, const char *left_quote, const char *right_quote)
.text:0000000000001EB0 quotearg_buffer_restyled proc near      ; CODE XREF: quotearg_buffer_restyled+BCD↓p
.text:0000000000001EB0                                         ; quotearg_buffer_restyled+11CB↓p ...
.text:0000000000001EB0
.text:0000000000001EB0 var_E0          = dword ptr -0E0h
.text:0000000000001EB0 var_DB          = byte ptr -0DBh
.text:0000000000001EB0 var_DA          = byte ptr -0DAh
.text:0000000000001EB0 var_D9          = byte ptr -0D9h
.text:0000000000001EB0 s               = qword ptr -0D8h
.text:0000000000001EB0 n               = qword ptr -0D0h
.text:0000000000001EB0 var_C8          = qword ptr -0C8h
.text:0000000000001EB0 ps              = qword ptr -0C0h
.text:0000000000001EB0 var_B8          = qword ptr -0B8h
.text:0000000000001EB0 var_B0          = qword ptr -0B0h
.text:0000000000001EB0 var_A8          = qword ptr -0A8h
.text:0000000000001EB0 s2              = qword ptr -0A0h
.text:0000000000001EB0 var_98          = qword ptr -98h
.text:0000000000001EB0 var_90          = qword ptr -90h
.text:0000000000001EB0 var_88          = qword ptr -88h
.text:0000000000001EB0 var_80          = qword ptr -80h
.text:0000000000001EB0 var_78          = qword ptr -78h
.text:0000000000001EB0 var_70          = dword ptr -70h
.text:0000000000001EB0 var_6C          = byte ptr -6Ch
.text:0000000000001EB0 var_6B          = byte ptr -6Bh
.text:0000000000001EB0 var_6A          = byte ptr -6Ah
.text:0000000000001EB0 var_69          = byte ptr -69h
.text:0000000000001EB0 var_68          = qword ptr -68h
.text:0000000000001EB0 var_60          = qword ptr -60h
.text:0000000000001EB0 wc              = dword ptr -4Ch
.text:0000000000001EB0 var_48          = qword ptr -48h
.text:0000000000001EB0 var_40          = qword ptr -40h
.text:0000000000001EB0 arg_0           = qword ptr  8
.text:0000000000001EB0 arg_8           = qword ptr  10h
.text:0000000000001EB0 arg_10          = qword ptr  18h
.text:0000000000001EB0
.text:0000000000001EB0 ; __unwind {
.text:0000000000001EB0                 push    r15
.text:0000000000001EB2                 push    r14
.text:0000000000001EB4                 mov     r15d, r8d
.text:0000000000001EB7                 push    r13
.text:0000000000001EB9                 push    r12
.text:0000000000001EBB                 mov     r14, rdi
.text:0000000000001EBE                 push    rbp
.text:0000000000001EBF                 push    rbx
.text:0000000000001EC0                 mov     ebx, r9d
.text:0000000000001EC3                 mov     r13, rsi
.text:0000000000001EC6                 mov     rbp, rcx
.text:0000000000001EC9                 and     ebx, 2
.text:0000000000001ECC                 sub     rsp, 0B8h
.text:0000000000001ED3                 mov     rax, [rsp+0E8h+arg_0]
.text:0000000000001EDB                 mov     [rsp+0E8h+s], rdx
.text:0000000000001EE0                 mov     [rsp+0E8h+var_E0], r8d
.text:0000000000001EE5                 mov     [rsp+0E8h+var_70], r9d
.text:0000000000001EEA                 mov     [rsp+0E8h+var_C8], rax
.text:0000000000001EEF                 mov     rax, [rsp+0E8h+arg_8]
.text:0000000000001EF7                 mov     [rsp+0E8h+var_80], rax
.text:0000000000001EFC                 mov     rax, [rsp+0E8h+arg_10]
.text:0000000000001F04                 mov     [rsp+0E8h+var_88], rax
.text:0000000000001F09                 mov     rax, fs:28h
.text:0000000000001F12                 mov     [rsp+0E8h+var_40], rax
.text:0000000000001F1A                 xor     eax, eax
.text:0000000000001F1C                 call    ___ctype_get_mb_cur_max
.text:0000000000001F21                 cmp     r15d, 0Ah       ; switch 11 cases
.text:0000000000001F25                 mov     [rsp+0E8h+var_90], rax
.text:0000000000001F2A                 ja      def_1F41        ; jumptable 00000000000121F1 default case
.text:0000000000001F30                 lea     rcx, jpt_1F41
.text:0000000000001F37                 mov     edx, r15d
.text:0000000000001F3A                 movsxd  rax, ds:(jpt_1F41 - 4CA0h)[rcx+rdx*4]
.text:0000000000001F3E                 add     rax, rcx
.text:0000000000001F41                 jmp     rax             ; switch jump
.text:0000000000001F43 ; ---------------------------------------------------------------------------
.text:0000000000001F43
.text:0000000000001F43 loc_1F43:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000001F43                                         ; quotearg_buffer_restyled+C66↓j
.text:0000000000001F43                                         ; DATA XREF: ...
.text:0000000000001F43                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 1
.text:0000000000001F48                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000001F4D                 xor     r12d, r12d
.text:0000000000001F50                 mov     [rsp+0E8h+var_98], 0
.text:0000000000001F59                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000001F5E                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000001F63
.text:0000000000001F63 loc_1F63:                               ; CODE XREF: quotearg_buffer_restyled+E94↓j
.text:0000000000001F63                 lea     rax, asc_4C4D   ; "'"
.text:0000000000001F6A                 mov     [rsp+0E8h+n], 1
.text:0000000000001F73                 xor     r15d, r15d
.text:0000000000001F76                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000001F7E                 mov     [rsp+0E8h+s2], rax
.text:0000000000001F83
.text:0000000000001F83 loc_1F83:                               ; CODE XREF: quotearg_buffer_restyled+7F4↓j
.text:0000000000001F83                                         ; quotearg_buffer_restyled+CB8↓j ...
.text:0000000000001F83                 xor     r11d, r11d
.text:0000000000001F86                 mov     rax, rbp
.text:0000000000001F89                 mov     r8d, r12d
.text:0000000000001F8C                 mov     rbp, r11
.text:0000000000001F8F                 mov     r11, rax
.text:0000000000001F92                 nop     word ptr [rax+rax+00h]
.text:0000000000001F98
.text:0000000000001F98 loc_1F98:                               ; CODE XREF: quotearg_buffer_restyled+2B2↓j
.text:0000000000001F98                                         ; quotearg_buffer_restyled+42C↓j
.text:0000000000001F98                 cmp     r11, rbp
.text:0000000000001F9B                 setnz   r12b
.text:0000000000001F9F                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001FA3                 jnz     short loc_1FB2
.text:0000000000001FA5                 mov     rax, [rsp+0E8h+s]
.text:0000000000001FAA                 cmp     byte ptr [rax+rbp], 0
.text:0000000000001FAE                 setnz   r12b
.text:0000000000001FB2
.text:0000000000001FB2 loc_1FB2:                               ; CODE XREF: quotearg_buffer_restyled+F3↑j
.text:0000000000001FB2                 test    r12b, r12b
.text:0000000000001FB5                 jz      loc_2610
.text:0000000000001FBB                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000001FC0                 mov     rdi, [rsp+0E8h+s] ; s
.text:0000000000001FC5                 lea     r9, [rdi+rbp]
.text:0000000000001FC9                 setnz   al
.text:0000000000001FCC                 and     al, [rsp+0E8h+var_DB]
.text:0000000000001FD0                 mov     r10d, eax
.text:0000000000001FD3                 jz      loc_2080
.text:0000000000001FD9                 mov     rax, [rsp+0E8h+n]
.text:0000000000001FDE                 test    rax, rax
.text:0000000000001FE1                 jz      loc_2410
.text:0000000000001FE7                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000001FEB                 lea     rbx, [rbp+rax+0]
.text:0000000000001FF0                 jnz     short loc_2020
.text:0000000000001FF2                 cmp     rax, 1
.text:0000000000001FF6                 jbe     short loc_2020
.text:0000000000001FF8                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000001FFD                 mov     byte ptr [rsp+0E8h+var_B8], r10b
.text:0000000000002002                 mov     [rsp+0E8h+ps], r9
.text:0000000000002007                 call    _strlen
.text:000000000000200C                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:0000000000002012                 movzx   r10d, byte ptr [rsp+0E8h+var_B8]
.text:0000000000002018                 mov     r11, rax
.text:000000000000201B                 mov     r9, [rsp+0E8h+ps]
.text:0000000000002020
.text:0000000000002020 loc_2020:                               ; CODE XREF: quotearg_buffer_restyled+140↑j
.text:0000000000002020                                         ; quotearg_buffer_restyled+146↑j
.text:0000000000002020                 cmp     rbx, r11
.text:0000000000002023                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:0000000000002028                 ja      loc_25E0
.text:000000000000202E                 mov     rdx, [rsp+0E8h+n] ; n
.text:0000000000002033                 mov     rsi, [rsp+0E8h+s2] ; s2
.text:0000000000002038                 mov     rdi, r9         ; s1
.text:000000000000203B                 mov     [rsp+0E8h+var_A8], r11
.text:0000000000002040                 mov     byte ptr [rsp+0E8h+var_B0], r8b
.text:0000000000002045                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000204A                 call    _memcmp
.text:000000000000204F                 test    eax, eax
.text:0000000000002051                 mov     r9, [rsp+0E8h+var_B8]
.text:0000000000002056                 movzx   r8d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000205C                 mov     r11, [rsp+0E8h+var_A8]
.text:0000000000002061                 jnz     loc_25E0
.text:0000000000002067                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000206C                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:0000000000002072                 jnz     loc_2FF5
.text:0000000000002078                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002080
.text:0000000000002080 loc_2080:                               ; CODE XREF: quotearg_buffer_restyled+123↑j
.text:0000000000002080                                         ; quotearg_buffer_restyled+733↓j
.text:0000000000002080                 movzx   ebx, byte ptr [r9]
.text:0000000000002084                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002087                 ja      def_209E        ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:000000000000208D                 lea     rcx, jpt_209E
.text:0000000000002094                 movzx   edx, bl
.text:0000000000002097                 movsxd  rax, ds:(jpt_209E - 4CCCh)[rcx+rdx*4]
.text:000000000000209B                 add     rax, rcx
.text:000000000000209E                 jmp     rax             ; switch jump
.text:00000000000020A0 ; ---------------------------------------------------------------------------
.text:00000000000020A0
.text:00000000000020A0 loc_20A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000020A0                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:00000000000020A0                 xor     r10d, r10d      ; jumptable 00000000000126DA cases 123,125
.text:00000000000020A3
.text:00000000000020A3 loc_20A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000020A3                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:00000000000020A3                 cmp     r11, 1          ; jumptable 000000000001234E cases 123,125
.text:00000000000020A7                 setnz   al
.text:00000000000020AA                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:00000000000020AE                 jnz     short loc_20BC
.text:00000000000020B0                 mov     rax, [rsp+0E8h+s]
.text:00000000000020B5                 cmp     byte ptr [rax+1], 0
.text:00000000000020B9                 setnz   al
.text:00000000000020BC
.text:00000000000020BC loc_20BC:                               ; CODE XREF: quotearg_buffer_restyled+1FE↑j
.text:00000000000020BC                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000020C1                 setz    dl
.text:00000000000020C4                 test    al, al
.text:00000000000020C6                 jz      loc_2318
.text:00000000000020CC
.text:00000000000020CC loc_20CC:                               ; CODE XREF: quotearg_buffer_restyled+46B↓j
.text:00000000000020CC                 xor     r12d, r12d
.text:00000000000020CF                 xor     eax, eax
.text:00000000000020D1                 nop     dword ptr [rax+00000000h]
.text:00000000000020D8
.text:00000000000020D8 loc_20D8:                               ; CODE XREF: quotearg_buffer_restyled+2E9↓j
.text:00000000000020D8                                         ; quotearg_buffer_restyled+30C↓j ...
.text:00000000000020D8                 cmp     [rsp+0E8h+var_DB], 1
.text:00000000000020DD                 jnz     loc_21F2
.text:00000000000020E3                 test    dl, dl
.text:00000000000020E5                 jnz     loc_21F2
.text:00000000000020EB
.text:00000000000020EB loc_20EB:                               ; CODE XREF: quotearg_buffer_restyled+347↓j
.text:00000000000020EB                 mov     rsi, [rsp+0E8h+var_C8]
.text:00000000000020F0                 test    rsi, rsi
.text:00000000000020F3                 jz      short loc_2109
.text:00000000000020F5                 mov     edx, ebx
.text:00000000000020F7                 shr     dl, 5
.text:00000000000020FA                 movzx   edx, dl
.text:00000000000020FD                 mov     edx, [rsi+rdx*4]
.text:0000000000002100                 bt      edx, ebx
.text:0000000000002103                 jb      loc_2253
.text:0000000000002109
.text:0000000000002109 loc_2109:                               ; CODE XREF: quotearg_buffer_restyled+243↑j
.text:0000000000002109                                         ; quotearg_buffer_restyled+34D↓j ...
.text:0000000000002109                 test    r10b, r10b
.text:000000000000210C                 jnz     loc_2253
.text:0000000000002112                 xor     eax, 1
.text:0000000000002115                 add     rbp, 1
.text:0000000000002119                 and     eax, r8d
.text:000000000000211C
.text:000000000000211C loc_211C:                               ; CODE XREF: quotearg_buffer_restyled+75A↓j
.text:000000000000211C                                         ; quotearg_buffer_restyled+AE8↓j
.text:000000000000211C                 test    al, al
.text:000000000000211E                 jz      short loc_2140
.text:0000000000002120                 cmp     r13, r15
.text:0000000000002123                 jbe     short loc_212A
.text:0000000000002125                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000212A
.text:000000000000212A loc_212A:                               ; CODE XREF: quotearg_buffer_restyled+273↑j
.text:000000000000212A                 lea     rax, [r15+1]
.text:000000000000212E                 cmp     r13, rax
.text:0000000000002131                 jbe     short loc_2139
.text:0000000000002133                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:0000000000002139
.text:0000000000002139 loc_2139:                               ; CODE XREF: quotearg_buffer_restyled+281↑j
.text:0000000000002139                 add     r15, 2
.text:000000000000213D                 xor     r8d, r8d
.text:0000000000002140
.text:0000000000002140 loc_2140:                               ; CODE XREF: quotearg_buffer_restyled+26E↑j
.text:0000000000002140                                         ; quotearg_buffer_restyled+403↓j ...
.text:0000000000002140                 cmp     r15, r13
.text:0000000000002143                 jnb     short loc_2149
.text:0000000000002145                 mov     [r14+r15], bl
.text:0000000000002149
.text:0000000000002149 loc_2149:                               ; CODE XREF: quotearg_buffer_restyled+293↑j
.text:0000000000002149                 movzx   edi, [rsp+0E8h+var_DA]
.text:000000000000214E                 add     r15, 1
.text:0000000000002152                 mov     eax, 0
.text:0000000000002157                 test    r12b, r12b
.text:000000000000215A                 cmovz   edi, eax
.text:000000000000215D                 mov     [rsp+0E8h+var_DA], dil
.text:0000000000002162                 jmp     loc_1F98
.text:0000000000002162 ; ---------------------------------------------------------------------------
.text:0000000000002167                 align 10h
.text:0000000000002170
.text:0000000000002170 loc_2170:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:0000000000002170                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002170                 xor     r10d, r10d      ; jumptable 00000000000126DA case 63
.text:0000000000002173
.text:0000000000002173 loc_2173:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002173                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002173                 mov     eax, [rsp+0E8h+var_E0] ; jumptable 000000000001234E case 63
.text:0000000000002177                 cmp     eax, 2
.text:000000000000217A                 jz      loc_2738
.text:0000000000002180                 cmp     eax, 5
.text:0000000000002183                 jz      loc_26F8
.text:0000000000002189                 cmp     eax, 2
.text:000000000000218C                 mov     ebx, 3Fh ; '?'
.text:0000000000002191                 setz    dl
.text:0000000000002194                 xor     r12d, r12d
.text:0000000000002197                 xor     eax, eax
.text:0000000000002199                 jmp     loc_20D8
.text:0000000000002199 ; ---------------------------------------------------------------------------
.text:000000000000219E                 align 20h
.text:00000000000021A0
.text:00000000000021A0 loc_21A0:                               ; CODE XREF: quotearg_buffer_restyled+57A↓j
.text:00000000000021A0                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:00000000000021A0                 xor     r10d, r10d      ; jumptable 00000000000126DA case 39
.text:00000000000021A3
.text:00000000000021A3 loc_21A3:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021A3                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:00000000000021A3                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 39
.text:00000000000021A8                 jz      loc_26B0
.text:00000000000021AE                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000021B3                 xor     edx, edx
.text:00000000000021B5                 xor     eax, eax
.text:00000000000021B7                 mov     ebx, 27h ; '''
.text:00000000000021BC                 jmp     loc_20D8
.text:00000000000021BC ; ---------------------------------------------------------------------------
.text:00000000000021C1                 align 8
.text:00000000000021C8
.text:00000000000021C8 loc_21C8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000021C8                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:00000000000021C8                 mov     edx, 9          ; jumptable 000000000001234E case 9
.text:00000000000021CD                 mov     ebx, 74h ; 't'
.text:00000000000021D2
.text:00000000000021D2 loc_21D2:                               ; CODE XREF: quotearg_buffer_restyled+4BA↓j
.text:00000000000021D2                                         ; quotearg_buffer_restyled+4EA↓j ...
.text:00000000000021D2                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000021D7                 setz    al
.text:00000000000021DA                 and     al, [rsp+0E8h+var_D9]
.text:00000000000021DE                 jnz     loc_232E
.text:00000000000021E4
.text:00000000000021E4 loc_21E4:                               ; CODE XREF: quotearg_buffer_restyled+362↓j
.text:00000000000021E4                                         ; quotearg_buffer_restyled+45A↓j ...
.text:00000000000021E4                 cmp     [rsp+0E8h+var_DB], 0
.text:00000000000021E9                 jnz     short loc_2250
.text:00000000000021EB
.text:00000000000021EB loc_21EB:                               ; CODE XREF: quotearg_buffer_restyled+422↓j
.text:00000000000021EB                 mov     ebx, edx
.text:00000000000021ED                 xor     r12d, r12d
.text:00000000000021F0                 xor     eax, eax
.text:00000000000021F2
.text:00000000000021F2 loc_21F2:                               ; CODE XREF: quotearg_buffer_restyled+22D↑j
.text:00000000000021F2                                         ; quotearg_buffer_restyled+235↑j
.text:00000000000021F2                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000021F7                 jnz     loc_20EB
.text:00000000000021FD                 jmp     loc_2109
.text:00000000000021FD ; ---------------------------------------------------------------------------
.text:0000000000002202                 align 8
.text:0000000000002208
.text:0000000000002208 loc_2208:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002208                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002208                 mov     edx, 8          ; jumptable 000000000001234E case 8
.text:000000000000220D                 mov     ebx, 62h ; 'b'
.text:0000000000002212                 jmp     short loc_21E4
.text:0000000000002212 ; ---------------------------------------------------------------------------
.text:0000000000002214                 align 8
.text:0000000000002218
.text:0000000000002218 loc_2218:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002218                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002218                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 92
.text:000000000000221D                 jz      loc_25F0
.text:0000000000002223                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002228                 jz      loc_2440
.text:000000000000222E
.text:000000000000222E loc_222E:                               ; CODE XREF: quotearg_buffer_restyled+588↓j
.text:000000000000222E                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002233                 jz      loc_2440
.text:0000000000002239                 cmp     [rsp+0E8h+n], 0
.text:000000000000223F                 jnz     loc_25FB
.text:0000000000002245                 mov     ebx, 5Ch ; '\'
.text:000000000000224A                 nop     word ptr [rax+rax+00h]
.text:0000000000002250
.text:0000000000002250 loc_2250:                               ; CODE XREF: quotearg_buffer_restyled+339↑j
.text:0000000000002250                                         ; quotearg_buffer_restyled+5D5↓j ...
.text:0000000000002250                 xor     r12d, r12d
.text:0000000000002253
.text:0000000000002253 loc_2253:                               ; CODE XREF: quotearg_buffer_restyled+253↑j
.text:0000000000002253                                         ; quotearg_buffer_restyled+25C↑j
.text:0000000000002253                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002258                 setz    dl
.text:000000000000225B                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002260                 mov     eax, edx
.text:0000000000002262                 jnz     loc_2AB8
.text:0000000000002268                 mov     eax, r8d
.text:000000000000226B                 xor     eax, 1
.text:000000000000226E                 and     al, dl
.text:0000000000002270                 jz      short loc_22A1
.text:0000000000002272                 cmp     r13, r15
.text:0000000000002275                 jbe     short loc_227C
.text:0000000000002277                 mov     byte ptr [r14+r15], 27h ; '''
.text:000000000000227C
.text:000000000000227C loc_227C:                               ; CODE XREF: quotearg_buffer_restyled+3C5↑j
.text:000000000000227C                 lea     rdx, [r15+1]
.text:0000000000002280                 cmp     r13, rdx
.text:0000000000002283                 jbe     short loc_228B
.text:0000000000002285                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:000000000000228B
.text:000000000000228B loc_228B:                               ; CODE XREF: quotearg_buffer_restyled+3D3↑j
.text:000000000000228B                 lea     rdx, [r15+2]
.text:000000000000228F                 cmp     r13, rdx
.text:0000000000002292                 jbe     short loc_229A
.text:0000000000002294                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:000000000000229A
.text:000000000000229A loc_229A:                               ; CODE XREF: quotearg_buffer_restyled+3E2↑j
.text:000000000000229A                 add     r15, 3
.text:000000000000229E                 mov     r8d, eax
.text:00000000000022A1
.text:00000000000022A1 loc_22A1:                               ; CODE XREF: quotearg_buffer_restyled+3C0↑j
.text:00000000000022A1                 cmp     r13, r15
.text:00000000000022A4                 jbe     short loc_22AB
.text:00000000000022A6                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:00000000000022AB
.text:00000000000022AB loc_22AB:                               ; CODE XREF: quotearg_buffer_restyled+3F4↑j
.text:00000000000022AB                 add     r15, 1
.text:00000000000022AF                 add     rbp, 1
.text:00000000000022B3                 jmp     loc_2140
.text:00000000000022B3 ; ---------------------------------------------------------------------------
.text:00000000000022B8                 align 20h
.text:00000000000022C0
.text:00000000000022C0 loc_22C0:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022C0                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:00000000000022C0                 cmp     [rsp+0E8h+var_DB], 0 ; jumptable 000000000001234E case 0
.text:00000000000022C5                 jnz     loc_2493
.text:00000000000022CB                 xor     edx, edx
.text:00000000000022CD                 test    byte ptr [rsp+0E8h+var_70], 1
.text:00000000000022D2                 jz      loc_21EB
.text:00000000000022D8                 add     rbp, 1
.text:00000000000022DC                 jmp     loc_1F98
.text:00000000000022DC ; ---------------------------------------------------------------------------
.text:00000000000022E1                 align 8
.text:00000000000022E8
.text:00000000000022E8 loc_22E8:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:00000000000022E8                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:00000000000022E8                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 37,43-58,65-90,93,95,97-122
.text:00000000000022ED                 setz    dl
.text:00000000000022F0                 xor     eax, eax
.text:00000000000022F2                 jmp     loc_20D8
.text:00000000000022F2 ; ---------------------------------------------------------------------------
.text:00000000000022F7                 align 20h
.text:0000000000002300
.text:0000000000002300 loc_2300:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002300                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002300                 mov     edx, 7          ; jumptable 000000000001234E case 7
.text:0000000000002305                 mov     ebx, 61h ; 'a'
.text:000000000000230A                 jmp     loc_21E4
.text:000000000000230A ; ---------------------------------------------------------------------------
.text:000000000000230F                 align 10h
.text:0000000000002310
.text:0000000000002310 loc_2310:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002310                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002310                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 35,126
.text:0000000000002315                 setz    dl
.text:0000000000002318
.text:0000000000002318 loc_2318:                               ; CODE XREF: quotearg_buffer_restyled+216↑j
.text:0000000000002318                                         ; quotearg_buffer_restyled+6A3↓j
.text:0000000000002318                 test    rbp, rbp
.text:000000000000231B                 jnz     loc_20CC
.text:0000000000002321
.text:0000000000002321 loc_2321:                               ; CODE XREF: quotearg_buffer_restyled+49B↓j
.text:0000000000002321                                         ; quotearg_buffer_restyled+4AD↓j ...
.text:0000000000002321                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002326                 and     al, dl
.text:0000000000002328                 jz      loc_20D8
.text:000000000000232E
.text:000000000000232E loc_232E:                               ; CODE XREF: quotearg_buffer_restyled+32E↑j
.text:000000000000232E                 mov     rbp, r11
.text:0000000000002331                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002339                 jmp     loc_2A39
.text:0000000000002339 ; ---------------------------------------------------------------------------
.text:000000000000233E                 align 20h
.text:0000000000002340
.text:0000000000002340 loc_2340:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002340                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002340                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002345                 setz    dl
.text:0000000000002348                 xor     r12d, r12d
.text:000000000000234B                 jmp     short loc_2321
.text:000000000000234B ; ---------------------------------------------------------------------------
.text:000000000000234D                 align 10h
.text:0000000000002350
.text:0000000000002350 loc_2350:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002350                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002350                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 000000000001234E case 32
.text:0000000000002355                 mov     ebx, 20h ; ' '
.text:000000000000235A                 setz    dl
.text:000000000000235D                 jmp     short loc_2321
.text:000000000000235D ; ---------------------------------------------------------------------------
.text:000000000000235F                 align 20h
.text:0000000000002360
.text:0000000000002360 loc_2360:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002360                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002360                 mov     edx, 0Dh        ; jumptable 000000000001234E case 13
.text:0000000000002365                 mov     ebx, 72h ; 'r'
.text:000000000000236A                 jmp     loc_21D2
.text:000000000000236A ; ---------------------------------------------------------------------------
.text:000000000000236F                 align 10h
.text:0000000000002370
.text:0000000000002370 loc_2370:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002370                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002370                 mov     edx, 0Ch        ; jumptable 000000000001234E case 12
.text:0000000000002375                 mov     ebx, 66h ; 'f'
.text:000000000000237A                 jmp     loc_21E4
.text:000000000000237A ; ---------------------------------------------------------------------------
.text:000000000000237F                 align 20h
.text:0000000000002380
.text:0000000000002380 loc_2380:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002380                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002380                 mov     edx, 0Bh        ; jumptable 000000000001234E case 11
.text:0000000000002385                 mov     ebx, 76h ; 'v'
.text:000000000000238A                 jmp     loc_21E4
.text:000000000000238A ; ---------------------------------------------------------------------------
.text:000000000000238F                 align 10h
.text:0000000000002390
.text:0000000000002390 loc_2390:                               ; CODE XREF: quotearg_buffer_restyled+1EE↑j
.text:0000000000002390                                         ; DATA XREF: .rodata:jpt_209E↓o
.text:0000000000002390                 mov     edx, 0Ah        ; jumptable 000000000001234E case 10
.text:0000000000002395                 mov     ebx, 6Eh ; 'n'
.text:000000000000239A                 jmp     loc_21D2
.text:000000000000239A ; ---------------------------------------------------------------------------
.text:000000000000239F                 align 20h
.text:00000000000023A0
.text:00000000000023A0 def_242A:                               ; CODE XREF: quotearg_buffer_restyled+567↓j
.text:00000000000023A0                                         ; quotearg_buffer_restyled+57A↓j
.text:00000000000023A0                                         ; DATA XREF: ...
.text:00000000000023A0                 xor     r10d, r10d      ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:00000000000023A3                 nop     dword ptr [rax+rax+00h]
.text:00000000000023A8
.text:00000000000023A8 def_209E:                               ; CODE XREF: quotearg_buffer_restyled+1D7↑j
.text:00000000000023A8                                         ; quotearg_buffer_restyled+1EE↑j
.text:00000000000023A8                                         ; DATA XREF: ...
.text:00000000000023A8                 cmp     [rsp+0E8h+var_90], 1 ; jumptable 000000000001234E default case, cases 1-6,14-31,64
.text:00000000000023AE                 jnz     loc_2758
.text:00000000000023B4                 mov     [rsp+0E8h+var_B0], r11
.text:00000000000023B9                 mov     byte ptr [rsp+0E8h+var_B8], r8b
.text:00000000000023BE                 mov     byte ptr [rsp+0E8h+ps], r10b
.text:00000000000023C3                 call    ___ctype_b_loc
.text:00000000000023C8                 mov     rcx, [rax]
.text:00000000000023CB                 movzx   edx, bl
.text:00000000000023CE                 movzx   r10d, byte ptr [rsp+0E8h+ps]
.text:00000000000023D4                 movzx   r8d, byte ptr [rsp+0E8h+var_B8]
.text:00000000000023DA                 mov     r11, [rsp+0E8h+var_B0]
.text:00000000000023DF                 mov     edi, 1
.text:00000000000023E4                 movzx   eax, word ptr [rcx+rdx*2]
.text:00000000000023E8                 and     ax, 4000h
.text:00000000000023EC                 setnz   r12b
.text:00000000000023F0                 setz    al
.text:00000000000023F3                 and     al, [rsp+0E8h+var_DB]
.text:00000000000023F7
.text:00000000000023F7 loc_23F7:                               ; CODE XREF: quotearg_buffer_restyled+FED↓j
.text:00000000000023F7                 test    al, al
.text:00000000000023F9                 jnz     loc_2D91
.text:00000000000023FF                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002404                 setz    dl
.text:0000000000002407                 jmp     loc_20D8
.text:0000000000002407 ; ---------------------------------------------------------------------------
.text:000000000000240C                 align 10h
.text:0000000000002410
.text:0000000000002410 loc_2410:                               ; CODE XREF: quotearg_buffer_restyled+131↑j
.text:0000000000002410                 movzx   ebx, byte ptr [r9]
.text:0000000000002414                 cmp     bl, 7Eh         ; switch 127 cases
.text:0000000000002417                 ja      short def_242A  ; jumptable 00000000000126DA default case, cases 1-6,14-31,64
.text:0000000000002419                 lea     rcx, jpt_242A
.text:0000000000002420                 movzx   edx, bl
.text:0000000000002423                 movsxd  rax, ds:(jpt_242A - 4EC8h)[rcx+rdx*4]
.text:0000000000002427                 add     rax, rcx
.text:000000000000242A                 jmp     rax             ; switch jump
.text:000000000000242A ; ---------------------------------------------------------------------------
.text:000000000000242C                 align 10h
.text:0000000000002430
.text:0000000000002430 loc_2430:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002430                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002430                 xor     r10d, r10d      ; jumptable 00000000000126DA case 92
.text:0000000000002433                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002438                 jnz     loc_222E
.text:000000000000243E                 xchg    ax, ax
.text:0000000000002440
.text:0000000000002440 loc_2440:                               ; CODE XREF: quotearg_buffer_restyled+378↑j
.text:0000000000002440                                         ; quotearg_buffer_restyled+383↑j
.text:0000000000002440                 mov     edx, 5Ch ; '\'
.text:0000000000002445                 mov     ebx, 5Ch ; '\'
.text:000000000000244A                 jmp     loc_21E4
.text:000000000000244A ; ---------------------------------------------------------------------------
.text:000000000000244F                 align 10h
.text:0000000000002450
.text:0000000000002450 loc_2450:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002450                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002450                 mov     edx, 0Ch        ; jumptable 00000000000126DA case 12
.text:0000000000002455                 xor     r10d, r10d
.text:0000000000002458                 mov     ebx, 66h ; 'f'
.text:000000000000245D                 jmp     loc_21E4
.text:000000000000245D ; ---------------------------------------------------------------------------
.text:0000000000002462                 align 8
.text:0000000000002468
.text:0000000000002468 loc_2468:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002468                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002468                 mov     edx, 0Ah        ; jumptable 00000000000126DA case 10
.text:000000000000246D                 xor     r10d, r10d
.text:0000000000002470                 mov     ebx, 6Eh ; 'n'
.text:0000000000002475                 jmp     loc_21D2
.text:0000000000002475 ; ---------------------------------------------------------------------------
.text:000000000000247A                 align 20h
.text:0000000000002480
.text:0000000000002480 loc_2480:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002480                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002480                 mov     ebx, 61h ; 'a'  ; jumptable 00000000000126DA case 7
.text:0000000000002485                 jmp     loc_2250
.text:0000000000002485 ; ---------------------------------------------------------------------------
.text:000000000000248A                 align 10h
.text:0000000000002490
.text:0000000000002490 loc_2490:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002490                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002490                 xor     r10d, r10d      ; jumptable 00000000000126DA case 0
.text:0000000000002493
.text:0000000000002493 loc_2493:                               ; CODE XREF: quotearg_buffer_restyled+415↑j
.text:0000000000002493                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002498                 setz    dl
.text:000000000000249B                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000024A0                 jnz     loc_303A
.text:00000000000024A6                 mov     eax, r8d
.text:00000000000024A9                 mov     rcx, r15
.text:00000000000024AC                 xor     eax, 1
.text:00000000000024AF                 and     al, dl
.text:00000000000024B1                 jz      short loc_24E0
.text:00000000000024B3                 cmp     r13, r15
.text:00000000000024B6                 jbe     short loc_24BD
.text:00000000000024B8                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000024BD
.text:00000000000024BD loc_24BD:                               ; CODE XREF: quotearg_buffer_restyled+606↑j
.text:00000000000024BD                 lea     rcx, [r15+1]
.text:00000000000024C1                 cmp     r13, rcx
.text:00000000000024C4                 jbe     short loc_24CC
.text:00000000000024C6                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000024CC
.text:00000000000024CC loc_24CC:                               ; CODE XREF: quotearg_buffer_restyled+614↑j
.text:00000000000024CC                 lea     rcx, [r15+2]
.text:00000000000024D0                 cmp     r13, rcx
.text:00000000000024D3                 ja      loc_2B09
.text:00000000000024D9
.text:00000000000024D9 loc_24D9:                               ; CODE XREF: quotearg_buffer_restyled+C5F↓j
.text:00000000000024D9                 lea     rcx, [r15+3]
.text:00000000000024DD                 mov     r8d, eax
.text:00000000000024E0
.text:00000000000024E0 loc_24E0:                               ; CODE XREF: quotearg_buffer_restyled+601↑j
.text:00000000000024E0                 cmp     r13, rcx
.text:00000000000024E3                 jbe     short loc_24EA
.text:00000000000024E5                 mov     byte ptr [r14+rcx], 5Ch ; '\'
.text:00000000000024EA
.text:00000000000024EA loc_24EA:                               ; CODE XREF: quotearg_buffer_restyled+633↑j
.text:00000000000024EA                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000024EF                 lea     r15, [rcx+1]
.text:00000000000024F3                 jz      loc_2AF9
.text:00000000000024F9                 lea     rax, [rbp+1]
.text:00000000000024FD                 cmp     rax, r11
.text:0000000000002500                 jnb     short loc_251B
.text:0000000000002502                 mov     rax, [rsp+0E8h+s]
.text:0000000000002507                 movzx   eax, byte ptr [rax+rbp+1]
.text:000000000000250C                 mov     byte ptr [rsp+0E8h+ps], al
.text:0000000000002510                 sub     eax, 30h ; '0'
.text:0000000000002513                 cmp     al, 9
.text:0000000000002515                 jbe     loc_2D49
.text:000000000000251B
.text:000000000000251B loc_251B:                               ; CODE XREF: quotearg_buffer_restyled+650↑j
.text:000000000000251B                 mov     eax, r12d
.text:000000000000251E                 mov     ebx, 30h ; '0'
.text:0000000000002523                 xor     r12d, r12d
.text:0000000000002526                 jmp     loc_20D8
.text:0000000000002526 ; ---------------------------------------------------------------------------
.text:000000000000252B                 align 10h
.text:0000000000002530
.text:0000000000002530 loc_2530:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002530                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002530                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 37,43-58,65-90,93,95,97-122
.text:0000000000002535                 mov     r12d, r10d
.text:0000000000002538                 setz    dl
.text:000000000000253B                 xor     r10d, r10d
.text:000000000000253E                 xor     eax, eax
.text:0000000000002540                 jmp     loc_20D8
.text:0000000000002540 ; ---------------------------------------------------------------------------
.text:0000000000002545                 align 8
.text:0000000000002548
.text:0000000000002548 loc_2548:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002548                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002548                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 35,126
.text:000000000000254D                 setz    dl
.text:0000000000002550                 xor     r10d, r10d
.text:0000000000002553                 jmp     loc_2318
.text:0000000000002553 ; ---------------------------------------------------------------------------
.text:0000000000002558                 align 20h
.text:0000000000002560
.text:0000000000002560 loc_2560:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002560                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002560                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA cases 33,34,36,38,40-42,59-62,91,94,96,124
.text:0000000000002565                 setz    dl
.text:0000000000002568                 xor     r10d, r10d
.text:000000000000256B                 xor     r12d, r12d
.text:000000000000256E                 jmp     loc_2321
.text:000000000000256E ; ---------------------------------------------------------------------------
.text:0000000000002573                 align 8
.text:0000000000002578
.text:0000000000002578 loc_2578:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002578                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002578                 cmp     [rsp+0E8h+var_E0], 2 ; jumptable 00000000000126DA case 32
.text:000000000000257D                 mov     r12d, r10d
.text:0000000000002580                 mov     ebx, 20h ; ' '
.text:0000000000002585                 setz    dl
.text:0000000000002588                 xor     r10d, r10d
.text:000000000000258B                 jmp     loc_2321
.text:0000000000002590 ; ---------------------------------------------------------------------------
.text:0000000000002590
.text:0000000000002590 loc_2590:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:0000000000002590                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:0000000000002590                 mov     edx, 0Dh        ; jumptable 00000000000126DA case 13
.text:0000000000002595                 xor     r10d, r10d
.text:0000000000002598                 mov     ebx, 72h ; 'r'
.text:000000000000259D                 jmp     loc_21D2
.text:000000000000259D ; ---------------------------------------------------------------------------
.text:00000000000025A2                 align 8
.text:00000000000025A8
.text:00000000000025A8 loc_25A8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025A8                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:00000000000025A8                 mov     ebx, 76h ; 'v'  ; jumptable 00000000000126DA case 11
.text:00000000000025AD                 jmp     loc_2250
.text:00000000000025AD ; ---------------------------------------------------------------------------
.text:00000000000025B2                 align 8
.text:00000000000025B8
.text:00000000000025B8 loc_25B8:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025B8                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:00000000000025B8                 mov     edx, 9          ; jumptable 00000000000126DA case 9
.text:00000000000025BD                 xor     r10d, r10d
.text:00000000000025C0                 mov     ebx, 74h ; 't'
.text:00000000000025C5                 jmp     loc_21D2
.text:00000000000025C5 ; ---------------------------------------------------------------------------
.text:00000000000025CA                 align 10h
.text:00000000000025D0
.text:00000000000025D0 loc_25D0:                               ; CODE XREF: quotearg_buffer_restyled+57A↑j
.text:00000000000025D0                                         ; DATA XREF: .rodata:jpt_242A↓o
.text:00000000000025D0                 mov     ebx, 62h ; 'b'  ; jumptable 00000000000126DA case 8
.text:00000000000025D5                 jmp     loc_2250
.text:00000000000025D5 ; ---------------------------------------------------------------------------
.text:00000000000025DA                 align 20h
.text:00000000000025E0
.text:00000000000025E0 loc_25E0:                               ; CODE XREF: quotearg_buffer_restyled+178↑j
.text:00000000000025E0                                         ; quotearg_buffer_restyled+1B1↑j
.text:00000000000025E0                 xor     r10d, r10d
.text:00000000000025E3                 jmp     loc_2080
.text:00000000000025E3 ; ---------------------------------------------------------------------------
.text:00000000000025E8                 align 10h
.text:00000000000025F0
.text:00000000000025F0 loc_25F0:                               ; CODE XREF: quotearg_buffer_restyled+36D↑j
.text:00000000000025F0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000025F5                 jnz     loc_2F60
.text:00000000000025FB
.text:00000000000025FB loc_25FB:                               ; CODE XREF: quotearg_buffer_restyled+38F↑j
.text:00000000000025FB                 add     rbp, 1
.text:00000000000025FF                 mov     eax, r8d
.text:0000000000002602                 xor     r12d, r12d
.text:0000000000002605                 mov     ebx, 5Ch ; '\'
.text:000000000000260A                 jmp     loc_211C
.text:000000000000260A ; ---------------------------------------------------------------------------
.text:000000000000260F                 align 10h
.text:0000000000002610
.text:0000000000002610 loc_2610:                               ; CODE XREF: quotearg_buffer_restyled+105↑j
.text:0000000000002610                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002615                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000261A                 mov     r12d, r8d
.text:000000000000261D                 mov     rbp, r11
.text:0000000000002620                 setz    dl
.text:0000000000002623                 mov     eax, ebx
.text:0000000000002625                 test    r15, r15
.text:0000000000002628                 setz    cl
.text:000000000000262B                 and     eax, edx
.text:000000000000262D                 and     al, cl
.text:000000000000262F                 jnz     loc_3096
.text:0000000000002635                 mov     eax, ebx
.text:0000000000002637                 xor     eax, 1
.text:000000000000263A                 and     dl, al
.text:000000000000263C                 jz      loc_2FAC
.text:0000000000002642                 cmp     [rsp+0E8h+var_6C], 0
.text:0000000000002647                 jz      loc_2FAA
.text:000000000000264D                 cmp     [rsp+0E8h+var_DA], 0
.text:0000000000002652                 jnz     loc_304D
.text:0000000000002658                 test    r13, r13
.text:000000000000265B                 setz    al
.text:000000000000265E                 cmp     [rsp+0E8h+var_98], 0
.text:0000000000002664                 setnz   dl
.text:0000000000002667                 and     al, dl
.text:0000000000002669                 jz      loc_308C
.text:000000000000266F                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002674
.text:0000000000002674 loc_2674:                               ; CODE XREF: quotearg_buffer_restyled+121D↓j
.text:0000000000002674                 lea     rbx, asc_4C4D   ; "'"
.text:000000000000267B                 mov     byte ptr [r14], 27h ; '''
.text:000000000000267F                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002687                 mov     r15d, 1
.text:000000000000268D                 mov     [rsp+0E8h+n], 1
.text:0000000000002696                 mov     [rsp+0E8h+var_D9], 0
.text:000000000000269B                 mov     [rsp+0E8h+s2], rbx
.text:00000000000026A0                 mov     [rsp+0E8h+var_6C], al
.text:00000000000026A4                 jmp     loc_1F83
.text:00000000000026A4 ; ---------------------------------------------------------------------------
.text:00000000000026A9                 align 10h
.text:00000000000026B0
.text:00000000000026B0 loc_26B0:                               ; CODE XREF: quotearg_buffer_restyled+2F8↑j
.text:00000000000026B0                 cmp     [rsp+0E8h+var_D9], 0
.text:00000000000026B5                 jnz     loc_2F60
.text:00000000000026BB                 test    r13, r13
.text:00000000000026BE                 jz      loc_2AC0
.text:00000000000026C4                 xor     edx, edx
.text:00000000000026C6                 cmp     [rsp+0E8h+var_98], 0
.text:00000000000026CC                 jnz     loc_2AC0
.text:00000000000026D2
.text:00000000000026D2 loc_26D2:                               ; CODE XREF: quotearg_buffer_restyled+C44↓j
.text:00000000000026D2                                         ; quotearg_buffer_restyled+122A↓j
.text:00000000000026D2                 mov     [rsp+0E8h+var_98], r13
.text:00000000000026D7                 add     r15, 3
.text:00000000000026DB                 xor     eax, eax
.text:00000000000026DD                 mov     [rsp+0E8h+var_6C], r12b
.text:00000000000026E2                 xor     r8d, r8d
.text:00000000000026E5                 mov     r13, rdx
.text:00000000000026E8                 mov     ebx, 27h ; '''
.text:00000000000026ED                 jmp     loc_2109
.text:00000000000026ED ; ---------------------------------------------------------------------------
.text:00000000000026F2                 align 8
.text:00000000000026F8
.text:00000000000026F8 loc_26F8:                               ; CODE XREF: quotearg_buffer_restyled+2D3↑j
.text:00000000000026F8                 test    byte ptr [rsp+0E8h+var_70], 4
.text:00000000000026FD                 jz      short loc_2720
.text:00000000000026FF                 lea     rcx, [rbp+2]
.text:0000000000002703                 cmp     rcx, r11
.text:0000000000002706                 jnb     short loc_2720
.text:0000000000002708                 mov     rax, [rsp+0E8h+s]
.text:000000000000270D                 cmp     byte ptr [rax+rbp+1], 3Fh ; '?'
.text:0000000000002712                 jz      loc_2EA2
.text:0000000000002718                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000002720
.text:0000000000002720 loc_2720:                               ; CODE XREF: quotearg_buffer_restyled+84D↑j
.text:0000000000002720                                         ; quotearg_buffer_restyled+856↑j ...
.text:0000000000002720                 xor     edx, edx
.text:0000000000002722                 xor     r12d, r12d
.text:0000000000002725                 xor     eax, eax
.text:0000000000002727                 mov     ebx, 3Fh ; '?'
.text:000000000000272C                 jmp     loc_20D8
.text:000000000000272C ; ---------------------------------------------------------------------------
.text:0000000000002731                 align 8
.text:0000000000002738
.text:0000000000002738 loc_2738:                               ; CODE XREF: quotearg_buffer_restyled+2CA↑j
.text:0000000000002738                 cmp     [rsp+0E8h+var_D9], 0
.text:000000000000273D                 jnz     loc_2F60
.text:0000000000002743                 xor     r12d, r12d
.text:0000000000002746                 xor     eax, eax
.text:0000000000002748                 mov     ebx, 3Fh ; '?'
.text:000000000000274D                 jmp     loc_2109
.text:000000000000274D ; ---------------------------------------------------------------------------
.text:0000000000002752                 align 8
.text:0000000000002758
.text:0000000000002758 loc_2758:                               ; CODE XREF: quotearg_buffer_restyled+4FE↑j
.text:0000000000002758                 lea     rax, [rsp+0E8h+var_48]
.text:0000000000002760                 cmp     r11, 0FFFFFFFFFFFFFFFFh
.text:0000000000002764                 mov     [rsp+0E8h+var_48], 0
.text:0000000000002770                 mov     [rsp+0E8h+ps], rax
.text:0000000000002775                 jnz     short loc_27A4
.text:0000000000002777                 mov     rdi, [rsp+0E8h+s] ; s
.text:000000000000277C                 mov     byte ptr [rsp+0E8h+var_A8], r8b
.text:0000000000002781                 mov     byte ptr [rsp+0E8h+var_B0], r10b
.text:0000000000002786                 mov     [rsp+0E8h+var_B8], r9
.text:000000000000278B                 call    _strlen
.text:0000000000002790                 movzx   r8d, byte ptr [rsp+0E8h+var_A8]
.text:0000000000002796                 movzx   r10d, byte ptr [rsp+0E8h+var_B0]
.text:000000000000279C                 mov     r11, rax
.text:000000000000279F                 mov     r9, [rsp+0E8h+var_B8]
.text:00000000000027A4
.text:00000000000027A4 loc_27A4:                               ; CODE XREF: quotearg_buffer_restyled+8C5↑j
.text:00000000000027A4                 lea     rax, [rsp+0E8h+wc]
.text:00000000000027AC                 xor     ecx, ecx
.text:00000000000027AE                 mov     [rsp+0E8h+var_6A], bl
.text:00000000000027B2                 mov     [rsp+0E8h+var_6B], r8b
.text:00000000000027B7                 mov     rbx, rcx
.text:00000000000027BA                 mov     [rsp+0E8h+var_60], r9
.text:00000000000027C2                 mov     [rsp+0E8h+var_B0], rax
.text:00000000000027C7                 mov     [rsp+0E8h+var_69], r10b
.text:00000000000027CC                 mov     [rsp+0E8h+var_68], r15
.text:00000000000027D4                 mov     [rsp+0E8h+var_A8], r14
.text:00000000000027D9                 mov     [rsp+0E8h+var_78], r13
.text:00000000000027DE                 mov     [rsp+0E8h+var_B8], r11
.text:00000000000027E3
.text:00000000000027E3 loc_27E3:                               ; CODE XREF: quotearg_buffer_restyled+9AF↓j
.text:00000000000027E3                 mov     rax, [rsp+0E8h+s]
.text:00000000000027E8                 lea     r14, [rbp+rbx+0]
.text:00000000000027ED                 mov     rdx, [rsp+0E8h+var_B8]
.text:00000000000027F2                 mov     rcx, [rsp+0E8h+ps]
.text:00000000000027F7                 mov     rdi, [rsp+0E8h+var_B0]
.text:00000000000027FC                 lea     r13, [rax+r14]
.text:0000000000002800                 sub     rdx, r14
.text:0000000000002803                 mov     rsi, r13
.text:0000000000002806                 call    rpl_mbrtowc
.text:000000000000280B                 test    rax, rax
.text:000000000000280E                 mov     r15, rax
.text:0000000000002811                 jz      short loc_2861
.text:0000000000002813                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000002817                 jz      loc_2E35
.text:000000000000281D                 cmp     rax, 0FFFFFFFFFFFFFFFEh
.text:0000000000002821                 jz      loc_2DC1
.text:0000000000002827                 cmp     [rsp+0E8h+var_E0], 2
.text:000000000000282C                 setz    al
.text:000000000000282F                 and     al, [rsp+0E8h+var_D9]
.text:0000000000002833                 jnz     loc_29D0
.text:0000000000002839
.text:0000000000002839 loc_2839:                               ; CODE XREF: quotearg_buffer_restyled+B24↓j
.text:0000000000002839                                         ; quotearg_buffer_restyled+B47↓j
.text:0000000000002839                 mov     edi, [rsp+0E8h+wc] ; wc
.text:0000000000002840                 call    _iswprint
.text:0000000000002845                 mov     rdi, [rsp+0E8h+ps] ; ps
.text:000000000000284A                 test    eax, eax
.text:000000000000284C                 mov     eax, 0
.text:0000000000002851                 cmovz   r12d, eax
.text:0000000000002855                 add     rbx, r15
.text:0000000000002858                 call    _mbsinit
.text:000000000000285D                 test    eax, eax
.text:000000000000285F                 jz      short loc_27E3
.text:0000000000002861
.text:0000000000002861 loc_2861:                               ; CODE XREF: quotearg_buffer_restyled+961↑j
.text:0000000000002861                 mov     edx, r12d
.text:0000000000002864                 mov     rdi, rbx
.text:0000000000002867                 movzx   r8d, [rsp+0E8h+var_6B]
.text:000000000000286D                 xor     edx, 1
.text:0000000000002870                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002875                 movzx   r10d, [rsp+0E8h+var_69]
.text:000000000000287B                 and     dl, [rsp+0E8h+var_DB]
.text:000000000000287F                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002887                 mov     r14, [rsp+0E8h+var_A8]
.text:000000000000288C                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002891                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002896
.text:0000000000002896 loc_2896:                               ; CODE XREF: quotearg_buffer_restyled+F80↓j
.text:0000000000002896                                         ; quotearg_buffer_restyled+FB8↓j
.text:0000000000002896                 cmp     rdi, 1
.text:000000000000289A                 jbe     loc_2E9B
.text:00000000000028A0
.text:00000000000028A0 loc_28A0:                               ; CODE XREF: quotearg_buffer_restyled+EE9↓j
.text:00000000000028A0                 mov     rcx, rdi
.text:00000000000028A3                 xor     esi, esi
.text:00000000000028A5                 movzx   r9d, [rsp+0E8h+var_D9]
.text:00000000000028AB                 add     rcx, rbp
.text:00000000000028AE                 mov     rdi, [rsp+0E8h+s]
.text:00000000000028B3                 jmp     loc_296E
.text:00000000000028B3 ; ---------------------------------------------------------------------------
.text:00000000000028B8                 align 20h
.text:00000000000028C0
.text:00000000000028C0 loc_28C0:                               ; CODE XREF: quotearg_buffer_restyled+AC0↓j
.text:00000000000028C0                 cmp     [rsp+0E8h+var_E0], 2
.text:00000000000028C5                 setz    al
.text:00000000000028C8                 test    r9b, r9b
.text:00000000000028CB                 jnz     loc_2D80
.text:00000000000028D1                 mov     esi, r8d
.text:00000000000028D4                 xor     esi, 1
.text:00000000000028D7                 and     al, sil
.text:00000000000028DA                 jz      short loc_290B
.text:00000000000028DC                 cmp     r13, r15
.text:00000000000028DF                 jbe     short loc_28E6
.text:00000000000028E1                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000028E6
.text:00000000000028E6 loc_28E6:                               ; CODE XREF: quotearg_buffer_restyled+A2F↑j
.text:00000000000028E6                 lea     rsi, [r15+1]
.text:00000000000028EA                 cmp     r13, rsi
.text:00000000000028ED                 jbe     short loc_28F5
.text:00000000000028EF                 mov     byte ptr [r14+r15+1], 24h ; '$'
.text:00000000000028F5
.text:00000000000028F5 loc_28F5:                               ; CODE XREF: quotearg_buffer_restyled+A3D↑j
.text:00000000000028F5                 lea     rsi, [r15+2]
.text:00000000000028F9                 cmp     r13, rsi
.text:00000000000028FC                 jbe     short loc_2904
.text:00000000000028FE                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002904
.text:0000000000002904 loc_2904:                               ; CODE XREF: quotearg_buffer_restyled+A4C↑j
.text:0000000000002904                 add     r15, 3
.text:0000000000002908                 mov     r8d, eax
.text:000000000000290B
.text:000000000000290B loc_290B:                               ; CODE XREF: quotearg_buffer_restyled+A2A↑j
.text:000000000000290B                 cmp     r13, r15
.text:000000000000290E                 jbe     short loc_2915
.text:0000000000002910                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:0000000000002915
.text:0000000000002915 loc_2915:                               ; CODE XREF: quotearg_buffer_restyled+A5E↑j
.text:0000000000002915                 lea     rax, [r15+1]
.text:0000000000002919                 cmp     r13, rax
.text:000000000000291C                 jbe     short loc_292B
.text:000000000000291E                 mov     eax, ebx
.text:0000000000002920                 shr     al, 6
.text:0000000000002923                 add     eax, 30h ; '0'
.text:0000000000002926                 mov     [r14+r15+1], al
.text:000000000000292B
.text:000000000000292B loc_292B:                               ; CODE XREF: quotearg_buffer_restyled+A6C↑j
.text:000000000000292B                 lea     rax, [r15+2]
.text:000000000000292F                 cmp     r13, rax
.text:0000000000002932                 jbe     short loc_2944
.text:0000000000002934                 mov     eax, ebx
.text:0000000000002936                 shr     al, 3
.text:0000000000002939                 and     eax, 7
.text:000000000000293C                 add     eax, 30h ; '0'
.text:000000000000293F                 mov     [r14+r15+2], al
.text:0000000000002944
.text:0000000000002944 loc_2944:                               ; CODE XREF: quotearg_buffer_restyled+A82↑j
.text:0000000000002944                 and     ebx, 7
.text:0000000000002947                 add     rbp, 1
.text:000000000000294B                 add     r15, 3
.text:000000000000294F                 add     ebx, 30h ; '0'
.text:0000000000002952                 cmp     rbp, rcx
.text:0000000000002955                 jnb     loc_2140
.text:000000000000295B                 mov     esi, edx
.text:000000000000295D
.text:000000000000295D loc_295D:                               ; CODE XREF: quotearg_buffer_restyled+B19↓j
.text:000000000000295D                                         ; quotearg_buffer_restyled+EF1↓j
.text:000000000000295D                 cmp     r13, r15
.text:0000000000002960                 jbe     short loc_2966
.text:0000000000002962                 mov     [r14+r15], bl
.text:0000000000002966
.text:0000000000002966 loc_2966:                               ; CODE XREF: quotearg_buffer_restyled+AB0↑j
.text:0000000000002966                 movzx   ebx, byte ptr [rdi+rbp]
.text:000000000000296A                 add     r15, 1
.text:000000000000296E
.text:000000000000296E loc_296E:                               ; CODE XREF: quotearg_buffer_restyled+A03↑j
.text:000000000000296E                 test    dl, dl
.text:0000000000002970                 jnz     loc_28C0
.text:0000000000002976                 mov     eax, esi
.text:0000000000002978                 xor     eax, 1
.text:000000000000297B                 and     eax, r8d
.text:000000000000297E                 test    r10b, r10b
.text:0000000000002981                 jz      short loc_2991
.text:0000000000002983                 cmp     r13, r15
.text:0000000000002986                 jbe     short loc_298D
.text:0000000000002988                 mov     byte ptr [r14+r15], 5Ch ; '\'
.text:000000000000298D
.text:000000000000298D loc_298D:                               ; CODE XREF: quotearg_buffer_restyled+AD6↑j
.text:000000000000298D                 add     r15, 1
.text:0000000000002991
.text:0000000000002991 loc_2991:                               ; CODE XREF: quotearg_buffer_restyled+AD1↑j
.text:0000000000002991                 add     rbp, 1
.text:0000000000002995                 cmp     rbp, rcx
.text:0000000000002998                 jnb     loc_211C
.text:000000000000299E                 test    al, al
.text:00000000000029A0                 jz      loc_2D9E
.text:00000000000029A6                 cmp     r13, r15
.text:00000000000029A9                 jbe     short loc_29B0
.text:00000000000029AB                 mov     byte ptr [r14+r15], 27h ; '''
.text:00000000000029B0
.text:00000000000029B0 loc_29B0:                               ; CODE XREF: quotearg_buffer_restyled+AF9↑j
.text:00000000000029B0                 lea     rax, [r15+1]
.text:00000000000029B4                 cmp     r13, rax
.text:00000000000029B7                 jbe     short loc_29BF
.text:00000000000029B9                 mov     byte ptr [r14+r15+1], 27h ; '''
.text:00000000000029BF
.text:00000000000029BF loc_29BF:                               ; CODE XREF: quotearg_buffer_restyled+B07↑j
.text:00000000000029BF                 add     r15, 2
.text:00000000000029C3                 xor     r10d, r10d
.text:00000000000029C6                 xor     r8d, r8d
.text:00000000000029C9                 jmp     short loc_295D
.text:00000000000029C9 ; ---------------------------------------------------------------------------
.text:00000000000029CB                 align 10h
.text:00000000000029D0
.text:00000000000029D0 loc_29D0:                               ; CODE XREF: quotearg_buffer_restyled+983↑j
.text:00000000000029D0                 cmp     r15, 1
.text:00000000000029D4                 jz      loc_2839
.text:00000000000029DA                 mov     rdi, [rsp+0E8h+s]
.text:00000000000029DF                 lea     rcx, [rdi+r15]
.text:00000000000029E3                 lea     rdx, [rdi+r14+1]
.text:00000000000029E8                 lea     r8, [rcx+r14]
.text:00000000000029EC                 jmp     short loc_29FD
.text:00000000000029EC ; ---------------------------------------------------------------------------
.text:00000000000029EE                 align 10h
.text:00000000000029F0
.text:00000000000029F0 loc_29F0:                               ; CODE XREF: quotearg_buffer_restyled+B56↓j
.text:00000000000029F0                                         ; quotearg_buffer_restyled+B70↓j
.text:00000000000029F0                 add     rdx, 1
.text:00000000000029F4                 cmp     r8, rdx
.text:00000000000029F7                 jz      loc_2839
.text:00000000000029FD
.text:00000000000029FD loc_29FD:                               ; CODE XREF: quotearg_buffer_restyled+B3C↑j
.text:00000000000029FD                 movzx   ecx, byte ptr [rdx]
.text:0000000000002A00                 sub     ecx, 5Bh ; '['
.text:0000000000002A03                 cmp     cl, 21h ; '!'
.text:0000000000002A06                 ja      short loc_29F0
.text:0000000000002A08                 mov     esi, 1
.text:0000000000002A0D                 shl     rsi, cl
.text:0000000000002A10                 mov     rcx, rsi
.text:0000000000002A13                 mov     rsi, 20000002Bh
.text:0000000000002A1D                 test    rcx, rsi
.text:0000000000002A20                 jz      short loc_29F0
.text:0000000000002A22                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002A27                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002A2C                 mov     rbp, [rsp+0E8h+var_B8]
.text:0000000000002A31                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002A39
.text:0000000000002A39 loc_2A39:                               ; CODE XREF: quotearg_buffer_restyled+489↑j
.text:0000000000002A39                                         ; quotearg_buffer_restyled+C0B↓j ...
.text:0000000000002A39                 cmp     [rsp+0E8h+var_DB], 0
.text:0000000000002A3E                 jz      short loc_2A50
.text:0000000000002A40                 test    al, al
.text:0000000000002A42                 mov     eax, 4
.text:0000000000002A47                 cmovz   eax, [rsp+0E8h+var_E0]
.text:0000000000002A4C                 mov     [rsp+0E8h+var_E0], eax
.text:0000000000002A50
.text:0000000000002A50 loc_2A50:                               ; CODE XREF: quotearg_buffer_restyled+B8E↑j
.text:0000000000002A50                                         ; quotearg_buffer_restyled+1205↓j
.text:0000000000002A50                 sub     rsp, 8
.text:0000000000002A54                 mov     rcx, rbp
.text:0000000000002A57                 mov     rsi, r13
.text:0000000000002A5A                 push    [rsp+0F0h+var_88]
.text:0000000000002A5E                 push    [rsp+0F8h+var_80]
.text:0000000000002A62                 mov     rdi, r14
.text:0000000000002A65                 push    0
.text:0000000000002A67                 mov     r9d, [rsp+108h+var_70]
.text:0000000000002A6F                 mov     r8d, [rsp+108h+var_E0]
.text:0000000000002A74                 mov     rdx, [rsp+108h+s]
.text:0000000000002A79                 and     r9d, 0FFFFFFFDh
.text:0000000000002A7D                 call    quotearg_buffer_restyled
.text:0000000000002A82                 add     rsp, 20h
.text:0000000000002A86                 mov     r15, rax
.text:0000000000002A89
.text:0000000000002A89 loc_2A89:                               ; CODE XREF: quotearg_buffer_restyled+1135↓j
.text:0000000000002A89                                         ; quotearg_buffer_restyled+1140↓j ...
.text:0000000000002A89                 mov     rbx, [rsp+0E8h+var_40]
.text:0000000000002A91                 xor     rbx, fs:28h
.text:0000000000002A9A                 mov     rax, r15
.text:0000000000002A9D                 jnz     loc_30A3
.text:0000000000002AA3                 add     rsp, 0B8h
.text:0000000000002AAA                 pop     rbx
.text:0000000000002AAB                 pop     rbp
.text:0000000000002AAC                 pop     r12
.text:0000000000002AAE                 pop     r13
.text:0000000000002AB0                 pop     r14
.text:0000000000002AB2                 pop     r15
.text:0000000000002AB4                 retn
.text:0000000000002AB4 ; ---------------------------------------------------------------------------
.text:0000000000002AB5                 align 8
.text:0000000000002AB8
.text:0000000000002AB8 loc_2AB8:                               ; CODE XREF: quotearg_buffer_restyled+3B2↑j
.text:0000000000002AB8                 mov     rbp, r11
.text:0000000000002ABB                 jmp     loc_2A39
.text:0000000000002AC0 ; ---------------------------------------------------------------------------
.text:0000000000002AC0
.text:0000000000002AC0 loc_2AC0:                               ; CODE XREF: quotearg_buffer_restyled+80E↑j
.text:0000000000002AC0                                         ; quotearg_buffer_restyled+81C↑j
.text:0000000000002AC0                 cmp     r13, r15
.text:0000000000002AC3                 jbe     short loc_2ACA
.text:0000000000002AC5                 mov     byte ptr [r14+r15], 27h ; '''
.text:0000000000002ACA
.text:0000000000002ACA loc_2ACA:                               ; CODE XREF: quotearg_buffer_restyled+C13↑j
.text:0000000000002ACA                 lea     rax, [r15+1]
.text:0000000000002ACE                 cmp     r13, rax
.text:0000000000002AD1                 jbe     short loc_2AD9
.text:0000000000002AD3                 mov     byte ptr [r14+r15+1], 5Ch ; '\'
.text:0000000000002AD9
.text:0000000000002AD9 loc_2AD9:                               ; CODE XREF: quotearg_buffer_restyled+C21↑j
.text:0000000000002AD9                 lea     rax, [r15+2]
.text:0000000000002ADD                 cmp     r13, rax
.text:0000000000002AE0                 jbe     loc_30D2
.text:0000000000002AE6                 mov     rdx, r13
.text:0000000000002AE9                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002AEF                 mov     r13, [rsp+0E8h+var_98]
.text:0000000000002AF4                 jmp     loc_26D2
.text:0000000000002AF9 ; ---------------------------------------------------------------------------
.text:0000000000002AF9
.text:0000000000002AF9 loc_2AF9:                               ; CODE XREF: quotearg_buffer_restyled+643↑j
.text:0000000000002AF9                 mov     eax, r12d
.text:0000000000002AFC                 mov     ebx, 30h ; '0'
.text:0000000000002B01                 xor     r12d, r12d
.text:0000000000002B04                 jmp     loc_2109
.text:0000000000002B09 ; ---------------------------------------------------------------------------
.text:0000000000002B09
.text:0000000000002B09 loc_2B09:                               ; CODE XREF: quotearg_buffer_restyled+623↑j
.text:0000000000002B09                 mov     byte ptr [r14+r15+2], 27h ; '''
.text:0000000000002B0F                 jmp     loc_24D9
.text:0000000000002B14 ; ---------------------------------------------------------------------------
.text:0000000000002B14
.text:0000000000002B14 loc_2B14:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B14                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002B14                 test    ebx, ebx        ; jumptable 00000000000121F1 case 4
.text:0000000000002B16                 jnz     loc_1F43        ; jumptable 00000000000121F1 case 1
.text:0000000000002B1C                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002B21
.text:0000000000002B21 loc_2B21:                               ; CODE XREF: quotearg_buffer_restyled+11FD↓j
.text:0000000000002B21                 test    r13, r13
.text:0000000000002B24                 jnz     loc_30BA
.text:0000000000002B2A                 lea     rax, asc_4C4D   ; "'"
.text:0000000000002B31                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B3A                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002B3F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B44                 xor     r12d, r12d
.text:0000000000002B47                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002B4C                 mov     [rsp+0E8h+n], 1
.text:0000000000002B55                 mov     [rsp+0E8h+s2], rax
.text:0000000000002B5A                 mov     r15d, 1
.text:0000000000002B60                 mov     [rsp+0E8h+var_E0], 2
.text:0000000000002B68                 jmp     loc_1F83
.text:0000000000002B68 ; ---------------------------------------------------------------------------
.text:0000000000002B6D                 align 10h
.text:0000000000002B70
.text:0000000000002B70 loc_2B70:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002B70                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002B70                 test    ebx, ebx        ; jumptable 00000000000121F1 case 5
.text:0000000000002B72                 jnz     loc_2F6D
.text:0000000000002B78                 test    r13, r13
.text:0000000000002B7B                 jz      loc_2DA6
.text:0000000000002B81                 mov     byte ptr [r14], 22h ; '"'
.text:0000000000002B85                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002B8A                 xor     r12d, r12d
.text:0000000000002B8D                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002B92                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002B9B
.text:0000000000002B9B loc_2B9B:                               ; CODE XREF: quotearg_buffer_restyled+F0C↓j
.text:0000000000002B9B                 lea     rax, unk_4C4B
.text:0000000000002BA2                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002BA7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BAC                 mov     [rsp+0E8h+n], 1
.text:0000000000002BB5                 mov     r15d, 1
.text:0000000000002BBB                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BC0                 jmp     loc_1F83
.text:0000000000002BC5 ; ---------------------------------------------------------------------------
.text:0000000000002BC5
.text:0000000000002BC5 loc_2BC5:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002BC5                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002BC5                 lea     rax, unk_4C4B   ; jumptable 00000000000121F1 case 6
.text:0000000000002BCC                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002BD1                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002BD6                 xor     r12d, r12d
.text:0000000000002BD9                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002BE2                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002BE7                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002BEC                 mov     [rsp+0E8h+n], 1
.text:0000000000002BF5                 xor     r15d, r15d
.text:0000000000002BF8                 mov     [rsp+0E8h+s2], rax
.text:0000000000002BFD                 mov     [rsp+0E8h+var_E0], 5
.text:0000000000002C05                 jmp     loc_1F83
.text:0000000000002C0A ; ---------------------------------------------------------------------------
.text:0000000000002C0A
.text:0000000000002C0A loc_2C0A:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C0A                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002C0A                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 7
.text:0000000000002C0F                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002C14                 xor     r12d, r12d
.text:0000000000002C17                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002C20                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002C25                 xor     r15d, r15d
.text:0000000000002C28                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002C2D                 mov     [rsp+0E8h+n], 0
.text:0000000000002C36                 mov     [rsp+0E8h+s2], 0
.text:0000000000002C3F                 jmp     loc_1F83
.text:0000000000002C44 ; ---------------------------------------------------------------------------
.text:0000000000002C44
.text:0000000000002C44 loc_2C44:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002C44                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002C44                 cmp     [rsp+0E8h+var_E0], 0Ah ; jumptable 00000000000121F1 cases 8-10
.text:0000000000002C49                 jz      short loc_2CA1
.text:0000000000002C4B                 lea     rsi, asc_4C4F   ; "`"
.text:0000000000002C52                 xor     edi, edi        ; domainname
.text:0000000000002C54                 mov     edx, 5          ; category
.text:0000000000002C59                 call    _dcgettext
.text:0000000000002C5E                 mov     rcx, rax
.text:0000000000002C61                 mov     [rsp+0E8h+var_80], rax
.text:0000000000002C66                 lea     rax, asc_4C4F   ; "`"
.text:0000000000002C6D                 cmp     rcx, rax
.text:0000000000002C70                 jz      loc_300E
.text:0000000000002C76
.text:0000000000002C76 loc_2C76:                               ; CODE XREF: quotearg_buffer_restyled+116F↓j
.text:0000000000002C76                 lea     rsi, asc_4C4D   ; "'"
.text:0000000000002C7D                 xor     edi, edi        ; domainname
.text:0000000000002C7F                 mov     edx, 5          ; category
.text:0000000000002C84                 call    _dcgettext
.text:0000000000002C89                 mov     rcx, rax
.text:0000000000002C8C                 mov     [rsp+0E8h+var_88], rax
.text:0000000000002C91                 lea     rax, asc_4C4D   ; "'"
.text:0000000000002C98                 cmp     rcx, rax
.text:0000000000002C9B                 jz      loc_3024
.text:0000000000002CA1
.text:0000000000002CA1 loc_2CA1:                               ; CODE XREF: quotearg_buffer_restyled+D99↑j
.text:0000000000002CA1                                         ; quotearg_buffer_restyled+1185↓j
.text:0000000000002CA1                 xor     r15d, r15d
.text:0000000000002CA4                 test    ebx, ebx
.text:0000000000002CA6                 jz      loc_2E6D
.text:0000000000002CAC
.text:0000000000002CAC loc_2CAC:                               ; CODE XREF: quotearg_buffer_restyled+FC7↓j
.text:0000000000002CAC                                         ; quotearg_buffer_restyled+FE6↓j
.text:0000000000002CAC                 test    ebx, ebx
.text:0000000000002CAE                 mov     rbx, [rsp+0E8h+var_88]
.text:0000000000002CB3                 setnz   [rsp+0E8h+var_D9]
.text:0000000000002CB8                 xor     r12d, r12d
.text:0000000000002CBB                 mov     rdi, rbx        ; s
.text:0000000000002CBE                 call    _strlen
.text:0000000000002CC3                 mov     [rsp+0E8h+s2], rbx
.text:0000000000002CC8                 mov     [rsp+0E8h+n], rax
.text:0000000000002CCD                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002CD2                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CD7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002CE0                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002CE5                 jmp     loc_1F83
.text:0000000000002CEA ; ---------------------------------------------------------------------------
.text:0000000000002CEA
.text:0000000000002CEA loc_2CEA:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002CEA                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002CEA                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 0
.text:0000000000002CEF                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002CF4                 xor     r12d, r12d
.text:0000000000002CF7                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D00                 mov     [rsp+0E8h+var_D9], 0
.text:0000000000002D05                 xor     r15d, r15d
.text:0000000000002D08                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002D0D                 mov     [rsp+0E8h+n], 0
.text:0000000000002D16                 mov     [rsp+0E8h+s2], 0
.text:0000000000002D1F                 jmp     loc_1F83
.text:0000000000002D24 ; ---------------------------------------------------------------------------
.text:0000000000002D24
.text:0000000000002D24 loc_2D24:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002D24                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002D24                 mov     [rsp+0E8h+var_DA], 1 ; jumptable 00000000000121F1 case 3
.text:0000000000002D29                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002D2E                 xor     r12d, r12d
.text:0000000000002D31                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002D3A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002D3F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002D44                 jmp     loc_1F63
.text:0000000000002D49 ; ---------------------------------------------------------------------------
.text:0000000000002D49
.text:0000000000002D49 loc_2D49:                               ; CODE XREF: quotearg_buffer_restyled+665↑j
.text:0000000000002D49                 cmp     r13, r15
.text:0000000000002D4C                 jbe     short loc_2D53
.text:0000000000002D4E                 mov     byte ptr [r14+r15], 30h ; '0'
.text:0000000000002D53
.text:0000000000002D53 loc_2D53:                               ; CODE XREF: quotearg_buffer_restyled+E9C↑j
.text:0000000000002D53                 lea     rax, [rcx+2]
.text:0000000000002D57                 cmp     r13, rax
.text:0000000000002D5A                 jbe     short loc_2D62
.text:0000000000002D5C                 mov     byte ptr [r14+rcx+2], 30h ; '0'
.text:0000000000002D62
.text:0000000000002D62 loc_2D62:                               ; CODE XREF: quotearg_buffer_restyled+EAA↑j
.text:0000000000002D62                 mov     eax, r12d
.text:0000000000002D65                 lea     r15, [rcx+3]
.text:0000000000002D69                 xor     r12d, r12d
.text:0000000000002D6C                 mov     ebx, 30h ; '0'
.text:0000000000002D71                 jmp     loc_20D8
.text:0000000000002D71 ; ---------------------------------------------------------------------------
.text:0000000000002D76                 align 20h
.text:0000000000002D80
.text:0000000000002D80 loc_2D80:                               ; CODE XREF: quotearg_buffer_restyled+A1B↑j
.text:0000000000002D80                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002D85                 mov     rbp, r11
.text:0000000000002D88                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000002D8C                 jmp     loc_2A39
.text:0000000000002D91 ; ---------------------------------------------------------------------------
.text:0000000000002D91
.text:0000000000002D91 loc_2D91:                               ; CODE XREF: quotearg_buffer_restyled+549↑j
.text:0000000000002D91                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002D96                 xor     r12d, r12d
.text:0000000000002D99                 jmp     loc_28A0
.text:0000000000002D9E ; ---------------------------------------------------------------------------
.text:0000000000002D9E
.text:0000000000002D9E loc_2D9E:                               ; CODE XREF: quotearg_buffer_restyled+AF0↑j
.text:0000000000002D9E                 xor     r10d, r10d
.text:0000000000002DA1                 jmp     loc_295D
.text:0000000000002DA6 ; ---------------------------------------------------------------------------
.text:0000000000002DA6
.text:0000000000002DA6 loc_2DA6:                               ; CODE XREF: quotearg_buffer_restyled+CCB↑j
.text:0000000000002DA6                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002DAF                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002DB4                 xor     r12d, r12d
.text:0000000000002DB7                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002DBC                 jmp     loc_2B9B
.text:0000000000002DC1 ; ---------------------------------------------------------------------------
.text:0000000000002DC1
.text:0000000000002DC1 loc_2DC1:                               ; CODE XREF: quotearg_buffer_restyled+971↑j
.text:0000000000002DC1                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002DC6                 mov     rsi, r14
.text:0000000000002DC9                 mov     rcx, r13
.text:0000000000002DCC                 mov     rax, rbx
.text:0000000000002DCF                 mov     rdi, rbx
.text:0000000000002DD2                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002DD8                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002DDD                 mov     r9, [rsp+0E8h+var_60]
.text:0000000000002DE5                 cmp     rsi, r11
.text:0000000000002DE8                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002DEE                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002DF6                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002DFB                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E00                 jnb     short loc_2E28
.text:0000000000002E02                 cmp     byte ptr [rcx], 0
.text:0000000000002E05                 jnz     short loc_2E17
.text:0000000000002E07                 jmp     short loc_2E28
.text:0000000000002E07 ; ---------------------------------------------------------------------------
.text:0000000000002E09                 align 10h
.text:0000000000002E10
.text:0000000000002E10 loc_2E10:                               ; CODE XREF: quotearg_buffer_restyled+F73↓j
.text:0000000000002E10                 cmp     byte ptr [r9+rax], 0
.text:0000000000002E15                 jz      short loc_2E25
.text:0000000000002E17
.text:0000000000002E17 loc_2E17:                               ; CODE XREF: quotearg_buffer_restyled+F55↑j
.text:0000000000002E17                 add     rax, 1
.text:0000000000002E1B                 lea     rdx, [rbp+rax+0]
.text:0000000000002E20                 cmp     r11, rdx
.text:0000000000002E23                 ja      short loc_2E10
.text:0000000000002E25
.text:0000000000002E25 loc_2E25:                               ; CODE XREF: quotearg_buffer_restyled+F65↑j
.text:0000000000002E25                 mov     rdi, rax
.text:0000000000002E28
.text:0000000000002E28 loc_2E28:                               ; CODE XREF: quotearg_buffer_restyled+F50↑j
.text:0000000000002E28                                         ; quotearg_buffer_restyled+F57↑j
.text:0000000000002E28                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E2D                 xor     r12d, r12d
.text:0000000000002E30                 jmp     loc_2896
.text:0000000000002E35 ; ---------------------------------------------------------------------------
.text:0000000000002E35
.text:0000000000002E35 loc_2E35:                               ; CODE XREF: quotearg_buffer_restyled+967↑j
.text:0000000000002E35                 mov     rdi, rbx
.text:0000000000002E38                 movzx   r8d, [rsp+0E8h+var_6B]
.text:0000000000002E3E                 movzx   ebx, [rsp+0E8h+var_6A]
.text:0000000000002E43                 movzx   r10d, [rsp+0E8h+var_69]
.text:0000000000002E49                 mov     r15, [rsp+0E8h+var_68]
.text:0000000000002E51                 xor     r12d, r12d
.text:0000000000002E54                 mov     r14, [rsp+0E8h+var_A8]
.text:0000000000002E59                 mov     r13, [rsp+0E8h+var_78]
.text:0000000000002E5E                 mov     r11, [rsp+0E8h+var_B8]
.text:0000000000002E63                 movzx   edx, [rsp+0E8h+var_DB]
.text:0000000000002E68                 jmp     loc_2896
.text:0000000000002E6D ; ---------------------------------------------------------------------------
.text:0000000000002E6D
.text:0000000000002E6D loc_2E6D:                               ; CODE XREF: quotearg_buffer_restyled+DF6↑j
.text:0000000000002E6D                 mov     rdx, [rsp+0E8h+var_80]
.text:0000000000002E72                 movzx   eax, byte ptr [rdx]
.text:0000000000002E75                 test    al, al
.text:0000000000002E77                 jz      loc_2CAC
.text:0000000000002E7D                 nop     dword ptr [rax]
.text:0000000000002E80
.text:0000000000002E80 loc_2E80:                               ; CODE XREF: quotearg_buffer_restyled+FE4↓j
.text:0000000000002E80                 cmp     r13, r15
.text:0000000000002E83                 jbe     short loc_2E89
.text:0000000000002E85                 mov     [r14+r15], al
.text:0000000000002E89
.text:0000000000002E89 loc_2E89:                               ; CODE XREF: quotearg_buffer_restyled+FD3↑j
.text:0000000000002E89                 add     r15, 1
.text:0000000000002E8D                 movzx   eax, byte ptr [rdx+r15]
.text:0000000000002E92                 test    al, al
.text:0000000000002E94                 jnz     short loc_2E80
.text:0000000000002E96                 jmp     loc_2CAC
.text:0000000000002E9B ; ---------------------------------------------------------------------------
.text:0000000000002E9B
.text:0000000000002E9B loc_2E9B:                               ; CODE XREF: quotearg_buffer_restyled+9EA↑j
.text:0000000000002E9B                 mov     eax, edx
.text:0000000000002E9D                 jmp     loc_23F7
.text:0000000000002EA2 ; ---------------------------------------------------------------------------
.text:0000000000002EA2
.text:0000000000002EA2 loc_2EA2:                               ; CODE XREF: quotearg_buffer_restyled+862↑j
.text:0000000000002EA2                 movzx   ebx, byte ptr [rax+rcx]
.text:0000000000002EA6                 cmp     bl, 3Eh ; '>'
.text:0000000000002EA9                 ja      loc_2720
.text:0000000000002EAF                 mov     rax, 7000A38200000000h
.text:0000000000002EB9                 bt      rax, rbx
.text:0000000000002EBD                 jnb     loc_2720
.text:0000000000002EC3                 cmp     [rsp+0E8h+var_D9], 0
.text:0000000000002EC8                 jnz     loc_30B2
.text:0000000000002ECE                 cmp     r13, r15
.text:0000000000002ED1                 jbe     short loc_2ED8
.text:0000000000002ED3                 mov     byte ptr [r14+r15], 3Fh ; '?'
.text:0000000000002ED8
.text:0000000000002ED8 loc_2ED8:                               ; CODE XREF: quotearg_buffer_restyled+1021↑j
.text:0000000000002ED8                 lea     rax, [r15+1]
.text:0000000000002EDC                 cmp     r13, rax
.text:0000000000002EDF                 jbe     short loc_2EE7
.text:0000000000002EE1                 mov     byte ptr [r14+r15+1], 22h ; '"'
.text:0000000000002EE7
.text:0000000000002EE7 loc_2EE7:                               ; CODE XREF: quotearg_buffer_restyled+102F↑j
.text:0000000000002EE7                 lea     rax, [r15+2]
.text:0000000000002EEB                 cmp     r13, rax
.text:0000000000002EEE                 jbe     short loc_2EF6
.text:0000000000002EF0                 mov     byte ptr [r14+r15+2], 22h ; '"'
.text:0000000000002EF6
.text:0000000000002EF6 loc_2EF6:                               ; CODE XREF: quotearg_buffer_restyled+103E↑j
.text:0000000000002EF6                 lea     rax, [r15+3]
.text:0000000000002EFA                 cmp     r13, rax
.text:0000000000002EFD                 jbe     short loc_2F05
.text:0000000000002EFF                 mov     byte ptr [r14+r15+3], 3Fh ; '?'
.text:0000000000002F05
.text:0000000000002F05 loc_2F05:                               ; CODE XREF: quotearg_buffer_restyled+104D↑j
.text:0000000000002F05                 add     r15, 4
.text:0000000000002F09                 xor     edx, edx
.text:0000000000002F0B                 xor     r12d, r12d
.text:0000000000002F0E                 xor     eax, eax
.text:0000000000002F10                 mov     rbp, rcx
.text:0000000000002F13                 jmp     loc_20D8
.text:0000000000002F18 ; ---------------------------------------------------------------------------
.text:0000000000002F18
.text:0000000000002F18 loc_2F18:                               ; CODE XREF: quotearg_buffer_restyled+91↑j
.text:0000000000002F18                                         ; DATA XREF: .rodata:jpt_1F41↓o
.text:0000000000002F18                 test    ebx, ebx        ; jumptable 00000000000121F1 case 2
.text:0000000000002F1A                 jz      loc_30A8
.text:0000000000002F20                 lea     rax, asc_4C4D   ; "'"
.text:0000000000002F27                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F2C                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F31                 xor     r12d, r12d
.text:0000000000002F34                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F3D                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F42                 mov     [rsp+0E8h+var_DB], 0
.text:0000000000002F47                 mov     [rsp+0E8h+n], 1
.text:0000000000002F50                 xor     r15d, r15d
.text:0000000000002F53                 mov     [rsp+0E8h+s2], rax
.text:0000000000002F58                 jmp     loc_1F83
.text:0000000000002F58 ; ---------------------------------------------------------------------------
.text:0000000000002F5D                 align 20h
.text:0000000000002F60
.text:0000000000002F60 loc_2F60:                               ; CODE XREF: quotearg_buffer_restyled+745↑j
.text:0000000000002F60                                         ; quotearg_buffer_restyled+805↑j ...
.text:0000000000002F60                 mov     rbp, r11
.text:0000000000002F63                 movzx   eax, [rsp+0E8h+var_D9]
.text:0000000000002F68                 jmp     loc_2A39
.text:0000000000002F6D ; ---------------------------------------------------------------------------
.text:0000000000002F6D
.text:0000000000002F6D loc_2F6D:                               ; CODE XREF: quotearg_buffer_restyled+CC2↑j
.text:0000000000002F6D                 lea     rax, unk_4C4B
.text:0000000000002F74                 mov     [rsp+0E8h+var_DA], 1
.text:0000000000002F79                 mov     [rsp+0E8h+var_6C], 0
.text:0000000000002F7E                 xor     r12d, r12d
.text:0000000000002F81                 mov     [rsp+0E8h+var_98], 0
.text:0000000000002F8A                 mov     [rsp+0E8h+var_D9], 1
.text:0000000000002F8F                 mov     [rsp+0E8h+var_DB], 1
.text:0000000000002F94                 mov     [rsp+0E8h+n], 1
.text:0000000000002F9D                 xor     r15d, r15d
.text:0000000000002FA0                 mov     [rsp+0E8h+s2], rax
.text:0000000000002FA5                 jmp     loc_1F83
.text:0000000000002FAA ; ---------------------------------------------------------------------------
.text:0000000000002FAA
.text:0000000000002FAA loc_2FAA:                               ; CODE XREF: quotearg_buffer_restyled+797↑j
.text:0000000000002FAA                 mov     eax, edx
.text:0000000000002FAC
.text:0000000000002FAC loc_2FAC:                               ; CODE XREF: quotearg_buffer_restyled+78C↑j
.text:0000000000002FAC                                         ; quotearg_buffer_restyled+11E1↓j
.text:0000000000002FAC                 mov     rbx, [rsp+0E8h+s2]
.text:0000000000002FB1                 test    rbx, rbx
.text:0000000000002FB4                 jz      short loc_2FE2
.text:0000000000002FB6                 test    al, al
.text:0000000000002FB8                 jz      short loc_2FE2
.text:0000000000002FBA                 movzx   ecx, byte ptr [rbx]
.text:0000000000002FBD                 mov     rax, rbx
.text:0000000000002FC0                 test    cl, cl
.text:0000000000002FC2                 jz      short loc_2FE2
.text:0000000000002FC4                 mov     rdx, r15
.text:0000000000002FC7                 sub     rax, r15
.text:0000000000002FCA
.text:0000000000002FCA loc_2FCA:                               ; CODE XREF: quotearg_buffer_restyled+112D↓j
.text:0000000000002FCA                 cmp     r13, rdx
.text:0000000000002FCD                 jbe     short loc_2FD3
.text:0000000000002FCF                 mov     [r14+rdx], cl
.text:0000000000002FD3
.text:0000000000002FD3 loc_2FD3:                               ; CODE XREF: quotearg_buffer_restyled+111D↑j
.text:0000000000002FD3                 add     rdx, 1
.text:0000000000002FD7                 movzx   ecx, byte ptr [rax+rdx]
.text:0000000000002FDB                 test    cl, cl
.text:0000000000002FDD                 jnz     short loc_2FCA
.text:0000000000002FDF                 mov     r15, rdx
.text:0000000000002FE2
.text:0000000000002FE2 loc_2FE2:                               ; CODE XREF: quotearg_buffer_restyled+1104↑j
.text:0000000000002FE2                                         ; quotearg_buffer_restyled+1108↑j ...
.text:0000000000002FE2                 cmp     r13, r15
.text:0000000000002FE5                 jbe     loc_2A89
.text:0000000000002FEB                 mov     byte ptr [r14+r15], 0
.text:0000000000002FF0                 jmp     loc_2A89
.text:0000000000002FF5 ; ---------------------------------------------------------------------------
.text:0000000000002FF5
.text:0000000000002FF5 loc_2FF5:                               ; CODE XREF: quotearg_buffer_restyled+1C2↑j
.text:0000000000002FF5                 cmp     [rsp+0E8h+var_E0], 2
.text:0000000000002FFA                 movzx   ebx, [rsp+0E8h+var_D9]
.text:0000000000002FFF                 mov     rbp, r11
.text:0000000000003002                 setz    al
.text:0000000000003005                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003009                 jmp     loc_2A39
.text:000000000000300E ; ---------------------------------------------------------------------------
.text:000000000000300E
.text:000000000000300E loc_300E:                               ; CODE XREF: quotearg_buffer_restyled+DC0↑j
.text:000000000000300E                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003012                 mov     rdi, rcx
.text:0000000000003015                 call    gettext_quote
.text:000000000000301A                 mov     [rsp+0E8h+var_80], rax
.text:000000000000301F                 jmp     loc_2C76
.text:0000000000003024 ; ---------------------------------------------------------------------------
.text:0000000000003024
.text:0000000000003024 loc_3024:                               ; CODE XREF: quotearg_buffer_restyled+DEB↑j
.text:0000000000003024                 mov     esi, [rsp+0E8h+var_E0]
.text:0000000000003028                 mov     rdi, rcx
.text:000000000000302B                 call    gettext_quote
.text:0000000000003030                 mov     [rsp+0E8h+var_88], rax
.text:0000000000003035                 jmp     loc_2CA1
.text:000000000000303A ; ---------------------------------------------------------------------------
.text:000000000000303A
.text:000000000000303A loc_303A:                               ; CODE XREF: quotearg_buffer_restyled+5F0↑j
.text:000000000000303A                 movzx   ebx, [rsp+0E8h+var_D9]
.text:000000000000303F                 mov     rbp, r11
.text:0000000000003042                 mov     eax, edx
.text:0000000000003044                 mov     [rsp+0E8h+var_DB], bl
.text:0000000000003048                 jmp     loc_2A39
.text:000000000000304D ; ---------------------------------------------------------------------------
.text:000000000000304D
.text:000000000000304D loc_304D:                               ; CODE XREF: quotearg_buffer_restyled+7A2↑j
.text:000000000000304D                 sub     rsp, 8
.text:0000000000003051                 mov     r8d, 5
.text:0000000000003057                 mov     rcx, r11
.text:000000000000305A                 push    [rsp+0F0h+var_88]
.text:000000000000305E                 push    [rsp+0F8h+var_80]
.text:0000000000003062                 mov     rdi, r14
.text:0000000000003065                 push    [rsp+100h+var_C8]
.text:0000000000003069                 mov     r9d, [rsp+108h+var_70]
.text:0000000000003071                 mov     rdx, [rsp+108h+s]
.text:0000000000003076                 mov     rsi, [rsp+108h+var_98]
.text:000000000000307B                 call    quotearg_buffer_restyled
.text:0000000000003080                 add     rsp, 20h
.text:0000000000003084                 mov     r15, rax
.text:0000000000003087                 jmp     loc_2A89
.text:000000000000308C ; ---------------------------------------------------------------------------
.text:000000000000308C
.text:000000000000308C loc_308C:                               ; CODE XREF: quotearg_buffer_restyled+7B9↑j
.text:000000000000308C                 movzx   eax, [rsp+0E8h+var_6C]
.text:0000000000003091                 jmp     loc_2FAC
.text:0000000000003096 ; ---------------------------------------------------------------------------
.text:0000000000003096
.text:0000000000003096 loc_3096:                               ; CODE XREF: quotearg_buffer_restyled+77F↑j
.text:0000000000003096                 mov     [rsp+0E8h+var_E0], 2
.text:000000000000309E                 jmp     loc_2A39
.text:00000000000030A3 ; ---------------------------------------------------------------------------
.text:00000000000030A3
.text:00000000000030A3 loc_30A3:                               ; CODE XREF: quotearg_buffer_restyled+BED↑j
.text:00000000000030A3                 call    ___stack_chk_fail
.text:00000000000030A8 ; ---------------------------------------------------------------------------
.text:00000000000030A8
.text:00000000000030A8 loc_30A8:                               ; CODE XREF: quotearg_buffer_restyled+106A↑j
.text:00000000000030A8                 mov     [rsp+0E8h+var_DB], 0
.text:00000000000030AD                 jmp     loc_2B21
.text:00000000000030B2 ; ---------------------------------------------------------------------------
.text:00000000000030B2
.text:00000000000030B2 loc_30B2:                               ; CODE XREF: quotearg_buffer_restyled+1018↑j
.text:00000000000030B2                 mov     rbp, r11
.text:00000000000030B5                 jmp     loc_2A50
.text:00000000000030BA ; ---------------------------------------------------------------------------
.text:00000000000030BA
.text:00000000000030BA loc_30BA:                               ; CODE XREF: quotearg_buffer_restyled+C74↑j
.text:00000000000030BA                 mov     [rsp+0E8h+var_DA], 1
.text:00000000000030BF                 xor     eax, eax
.text:00000000000030C1                 xor     r12d, r12d
.text:00000000000030C4                 mov     [rsp+0E8h+var_98], 0
.text:00000000000030CD                 jmp     loc_2674
.text:00000000000030D2 ; ---------------------------------------------------------------------------
.text:00000000000030D2
.text:00000000000030D2 loc_30D2:                               ; CODE XREF: quotearg_buffer_restyled+C30↑j
.text:00000000000030D2                 mov     rdx, r13
.text:00000000000030D5                 mov     r13, [rsp+0E8h+var_98]
.text:00000000000030DA                 jmp     loc_26D2
.text:00000000000030DF ; ---------------------------------------------------------------------------
.text:00000000000030DF
.text:00000000000030DF def_1F41:                               ; CODE XREF: quotearg_buffer_restyled+7A↑j
.text:00000000000030DF                 call    _abort          ; jumptable 00000000000121F1 default case
.text:00000000000030DF ; } // starts at 1EB0
.text:00000000000030DF quotearg_buffer_restyled endp
.text:00000000000030DF
.text:00000000000030DF ; ---------------------------------------------------------------------------
.text:00000000000030E4                 align 10h
.text:00000000000030F0
.text:00000000000030F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000030F0
.text:00000000000030F0
.text:00000000000030F0 quotearg_n_options proc near            ; CODE XREF: quotearg_n+E↓j
.text:00000000000030F0                                         ; quotearg_n_mem+7↓j ...
.text:00000000000030F0
.text:00000000000030F0 var_50          = qword ptr -50h
.text:00000000000030F0 var_48          = qword ptr -48h
.text:00000000000030F0 var_40          = dword ptr -40h
.text:00000000000030F0 var_3C          = dword ptr -3Ch
.text:00000000000030F0
.text:00000000000030F0 ; __unwind {
.text:00000000000030F0                 push    r15
.text:00000000000030F2                 push    r14
.text:00000000000030F4                 movsxd  r15, edi
.text:00000000000030F7                 push    r13
.text:00000000000030F9                 push    r12
.text:00000000000030FB                 mov     r14, rdx
.text:00000000000030FE                 push    rbp
.text:00000000000030FF                 push    rbx
.text:0000000000003100                 mov     rbp, rcx
.text:0000000000003103                 sub     rsp, 28h
.text:0000000000003107                 mov     [rsp+58h+var_50], rsi
.text:000000000000310C                 call    ___errno_location
.text:0000000000003111                 mov     r13, rax
.text:0000000000003114                 mov     eax, [rax]
.text:0000000000003116                 test    r15d, r15d
.text:0000000000003119                 mov     rbx, cs:slotvec
.text:0000000000003120                 mov     [rsp+58h+var_40], eax
.text:0000000000003124                 js      loc_3291
.text:000000000000312A                 cmp     cs:nslots, r15d
.text:0000000000003131                 jg      short loc_3195
.text:0000000000003133                 cmp     r15d, 7FFFFFFFh
.text:000000000000313A                 jz      loc_3296
.text:0000000000003140                 lea     r12d, [r15+1]
.text:0000000000003144                 lea     rax, slotvec0
.text:000000000000314B                 movsxd  rsi, r12d
.text:000000000000314E                 shl     rsi, 4
.text:0000000000003152                 cmp     rbx, rax
.text:0000000000003155                 jz      loc_3270
.text:000000000000315B                 mov     rdi, rbx
.text:000000000000315E                 call    xrealloc
.text:0000000000003163                 mov     rbx, rax
.text:0000000000003166                 mov     cs:slotvec, rax
.text:000000000000316D
.text:000000000000316D loc_316D:                               ; CODE XREF: quotearg_n_options+19C↓j
.text:000000000000316D                 movsxd  rdi, cs:nslots
.text:0000000000003174                 mov     edx, r12d
.text:0000000000003177                 xor     esi, esi        ; c
.text:0000000000003179                 sub     edx, edi
.text:000000000000317B                 shl     rdi, 4
.text:000000000000317F                 movsxd  rdx, edx
.text:0000000000003182                 add     rdi, rbx        ; s
.text:0000000000003185                 shl     rdx, 4          ; n
.text:0000000000003189                 call    _memset
.text:000000000000318E                 mov     cs:nslots, r12d
.text:0000000000003195
.text:0000000000003195 loc_3195:                               ; CODE XREF: quotearg_n_options+41↑j
.text:0000000000003195                 mov     eax, [rbp+4]
.text:0000000000003198                 shl     r15, 4
.text:000000000000319C                 sub     rsp, 8
.text:00000000000031A0                 add     rbx, r15
.text:00000000000031A3                 lea     r15, [rbp+8]
.text:00000000000031A7                 mov     r8d, [rbp+0]
.text:00000000000031AB                 mov     r11, [rbx]
.text:00000000000031AE                 mov     r12, [rbx+8]
.text:00000000000031B2                 mov     rcx, r14
.text:00000000000031B5                 or      eax, 1
.text:00000000000031B8                 mov     [rsp+60h+var_3C], eax
.text:00000000000031BC                 push    qword ptr [rbp+30h]
.text:00000000000031BF                 mov     r9d, eax
.text:00000000000031C2                 push    qword ptr [rbp+28h]
.text:00000000000031C5                 push    r15
.text:00000000000031C7                 mov     rsi, r11
.text:00000000000031CA                 mov     rdx, [rsp+78h+var_50]
.text:00000000000031CF                 mov     rdi, r12
.text:00000000000031D2                 mov     [rsp+78h+var_48], r11
.text:00000000000031D7                 call    quotearg_buffer_restyled
.text:00000000000031DC                 add     rsp, 20h
.text:00000000000031E0                 mov     r11, [rsp+58h+var_48]
.text:00000000000031E5                 cmp     r11, rax
.text:00000000000031E8                 ja      short loc_3251
.text:00000000000031EA                 lea     rsi, [rax+1]
.text:00000000000031EE                 lea     rax, slot0
.text:00000000000031F5                 cmp     r12, rax
.text:00000000000031F8                 mov     [rbx], rsi
.text:00000000000031FB                 jz      short loc_320F
.text:00000000000031FD                 mov     rdi, r12        ; ptr
.text:0000000000003200                 mov     [rsp+58h+var_48], rsi
.text:0000000000003205                 call    _free
.text:000000000000320A                 mov     rsi, [rsp+58h+var_48]
.text:000000000000320F
.text:000000000000320F loc_320F:                               ; CODE XREF: quotearg_n_options+10B↑j
.text:000000000000320F                 mov     rdi, rsi
.text:0000000000003212                 mov     [rsp+58h+var_48], rsi
.text:0000000000003217                 call    xmalloc
.text:000000000000321C                 sub     rsp, 8
.text:0000000000003220                 mov     [rbx+8], rax
.text:0000000000003224                 mov     r8d, [rbp+0]
.text:0000000000003228                 push    qword ptr [rbp+30h]
.text:000000000000322B                 push    qword ptr [rbp+28h]
.text:000000000000322E                 mov     rcx, r14
.text:0000000000003231                 push    r15
.text:0000000000003233                 mov     r9d, [rsp+78h+var_3C]
.text:0000000000003238                 mov     rdi, rax
.text:000000000000323B                 mov     rdx, [rsp+78h+var_50]
.text:0000000000003240                 mov     rsi, [rsp+78h+var_48]
.text:0000000000003245                 mov     r12, rax
.text:0000000000003248                 call    quotearg_buffer_restyled
.text:000000000000324D                 add     rsp, 20h
.text:0000000000003251
.text:0000000000003251 loc_3251:                               ; CODE XREF: quotearg_n_options+F8↑j
.text:0000000000003251                 mov     eax, [rsp+58h+var_40]
.text:0000000000003255                 mov     [r13+0], eax
.text:0000000000003259                 add     rsp, 28h
.text:000000000000325D                 mov     rax, r12
.text:0000000000003260                 pop     rbx
.text:0000000000003261                 pop     rbp
.text:0000000000003262                 pop     r12
.text:0000000000003264                 pop     r13
.text:0000000000003266                 pop     r14
.text:0000000000003268                 pop     r15
.text:000000000000326A                 retn
.text:000000000000326A ; ---------------------------------------------------------------------------
.text:000000000000326B                 align 10h
.text:0000000000003270
.text:0000000000003270 loc_3270:                               ; CODE XREF: quotearg_n_options+65↑j
.text:0000000000003270                 xor     edi, edi
.text:0000000000003272                 call    xrealloc
.text:0000000000003277                 movdqa  xmm0, xmmword ptr cs:slotvec0
.text:000000000000327F                 mov     rbx, rax
.text:0000000000003282                 mov     cs:slotvec, rax
.text:0000000000003289                 movups  xmmword ptr [rax], xmm0
.text:000000000000328C                 jmp     loc_316D
.text:0000000000003291 ; ---------------------------------------------------------------------------
.text:0000000000003291
.text:0000000000003291 loc_3291:                               ; CODE XREF: quotearg_n_options+34↑j
.text:0000000000003291                 call    _abort
.text:0000000000003296 ; ---------------------------------------------------------------------------
.text:0000000000003296
.text:0000000000003296 loc_3296:                               ; CODE XREF: quotearg_n_options+4A↑j
.text:0000000000003296                 call    xalloc_die
.text:0000000000003296 ; } // starts at 30F0
.text:0000000000003296 quotearg_n_options endp
.text:0000000000003296
.text:0000000000003296 ; ---------------------------------------------------------------------------
.text:000000000000329B                 align 20h
.text:00000000000032A0
.text:00000000000032A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032A0
.text:00000000000032A0 ; Attributes: info_from_lumina
.text:00000000000032A0
.text:00000000000032A0 ; quoting_options *__fastcall clone_quoting_options(quoting_options *o)
.text:00000000000032A0                 public clone_quoting_options
.text:00000000000032A0 clone_quoting_options proc near
.text:00000000000032A0 ; __unwind {
.text:00000000000032A0                 push    r12
.text:00000000000032A2                 push    rbp
.text:00000000000032A3                 push    rbx
.text:00000000000032A4                 mov     rbx, rdi
.text:00000000000032A7                 call    ___errno_location
.text:00000000000032AC                 mov     r12d, [rax]
.text:00000000000032AF                 mov     rbp, rax
.text:00000000000032B2                 lea     rax, default_quoting_options
.text:00000000000032B9                 test    rbx, rbx
.text:00000000000032BC                 mov     esi, 38h ; '8'  ; n
.text:00000000000032C1                 cmovz   rbx, rax
.text:00000000000032C5                 mov     rdi, rbx        ; src
.text:00000000000032C8                 call    xmemdup
.text:00000000000032CD                 mov     [rbp+0], r12d
.text:00000000000032D1                 pop     rbx
.text:00000000000032D2                 pop     rbp
.text:00000000000032D3                 pop     r12
.text:00000000000032D5                 retn
.text:00000000000032D5 ; } // starts at 32A0
.text:00000000000032D5 clone_quoting_options endp
.text:00000000000032D5
.text:00000000000032D5 ; ---------------------------------------------------------------------------
.text:00000000000032D6                 align 20h
.text:00000000000032E0
.text:00000000000032E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000032E0
.text:00000000000032E0
.text:00000000000032E0                 public get_quoting_style
.text:00000000000032E0 get_quoting_style proc near
.text:00000000000032E0 ; __unwind {
.text:00000000000032E0                 lea     rax, default_quoting_options
.text:00000000000032E7                 test    rdi, rdi
.text:00000000000032EA                 cmovz   rdi, rax
.text:00000000000032EE                 mov     eax, [rdi]
.text:00000000000032F0                 retn
.text:00000000000032F0 ; } // starts at 32E0
.text:00000000000032F0 get_quoting_style endp
.text:00000000000032F0
.text:00000000000032F0 ; ---------------------------------------------------------------------------
.text:00000000000032F1                 align 20h
.text:0000000000003300
.text:0000000000003300 ; =============== S U B R O U T I N E =======================================
.text:0000000000003300
.text:0000000000003300
.text:0000000000003300                 public set_quoting_style
.text:0000000000003300 set_quoting_style proc near
.text:0000000000003300 ; __unwind {
.text:0000000000003300                 lea     rax, default_quoting_options
.text:0000000000003307                 test    rdi, rdi
.text:000000000000330A                 cmovz   rdi, rax
.text:000000000000330E                 mov     [rdi], esi
.text:0000000000003310                 retn
.text:0000000000003310 ; } // starts at 3300
.text:0000000000003310 set_quoting_style endp
.text:0000000000003310
.text:0000000000003310 ; ---------------------------------------------------------------------------
.text:0000000000003311                 align 20h
.text:0000000000003320
.text:0000000000003320 ; =============== S U B R O U T I N E =======================================
.text:0000000000003320
.text:0000000000003320 ; Attributes: info_from_lumina
.text:0000000000003320
.text:0000000000003320 ; int __fastcall set_char_quoting(quoting_options *o, char c, int i)
.text:0000000000003320                 public set_char_quoting
.text:0000000000003320 set_char_quoting proc near
.text:0000000000003320 ; __unwind {
.text:0000000000003320                 lea     rax, default_quoting_options
.text:0000000000003327                 test    rdi, rdi
.text:000000000000332A                 mov     ecx, esi
.text:000000000000332C                 cmovz   rdi, rax
.text:0000000000003330                 mov     eax, esi
.text:0000000000003332                 and     ecx, 1Fh
.text:0000000000003335                 shr     al, 5
.text:0000000000003338                 movzx   eax, al
.text:000000000000333B                 lea     rdi, [rdi+rax*4+8]
.text:0000000000003340                 mov     esi, [rdi]
.text:0000000000003342                 mov     eax, esi
.text:0000000000003344                 shr     eax, cl
.text:0000000000003346                 xor     edx, eax
.text:0000000000003348                 and     eax, 1
.text:000000000000334B                 and     edx, 1
.text:000000000000334E                 shl     edx, cl
.text:0000000000003350                 xor     edx, esi
.text:0000000000003352                 mov     [rdi], edx
.text:0000000000003354                 retn
.text:0000000000003354 ; } // starts at 3320
.text:0000000000003354 set_char_quoting endp
.text:0000000000003354
.text:0000000000003354 ; ---------------------------------------------------------------------------
.text:0000000000003355                 align 20h
.text:0000000000003360
.text:0000000000003360 ; =============== S U B R O U T I N E =======================================
.text:0000000000003360
.text:0000000000003360
.text:0000000000003360                 public set_quoting_flags
.text:0000000000003360 set_quoting_flags proc near
.text:0000000000003360 ; __unwind {
.text:0000000000003360                 lea     rax, default_quoting_options
.text:0000000000003367                 test    rdi, rdi
.text:000000000000336A                 cmovz   rdi, rax
.text:000000000000336E                 mov     eax, [rdi+4]
.text:0000000000003371                 mov     [rdi+4], esi
.text:0000000000003374                 retn
.text:0000000000003374 ; } // starts at 3360
.text:0000000000003374 set_quoting_flags endp
.text:0000000000003374
.text:0000000000003374 ; ---------------------------------------------------------------------------
.text:0000000000003375                 align 20h
.text:0000000000003380
.text:0000000000003380 ; =============== S U B R O U T I N E =======================================
.text:0000000000003380
.text:0000000000003380 ; Attributes: info_from_lumina
.text:0000000000003380
.text:0000000000003380 ; void __fastcall set_custom_quoting(quoting_options *o, const char *left_quote, const char *right_quote)
.text:0000000000003380                 public set_custom_quoting
.text:0000000000003380 set_custom_quoting proc near
.text:0000000000003380 ; __unwind {
.text:0000000000003380                 lea     rax, default_quoting_options
.text:0000000000003387                 test    rdi, rdi
.text:000000000000338A                 cmovz   rdi, rax
.text:000000000000338E                 test    rsi, rsi
.text:0000000000003391                 mov     dword ptr [rdi], 0Ah
.text:0000000000003397                 jz      short loc_33A7
.text:0000000000003399                 test    rdx, rdx
.text:000000000000339C                 jz      short loc_33A7
.text:000000000000339E                 mov     [rdi+28h], rsi
.text:00000000000033A2                 mov     [rdi+30h], rdx
.text:00000000000033A6                 retn
.text:00000000000033A7 ; ---------------------------------------------------------------------------
.text:00000000000033A7
.text:00000000000033A7 loc_33A7:                               ; CODE XREF: set_custom_quoting+17↑j
.text:00000000000033A7                                         ; set_custom_quoting+1C↑j
.text:00000000000033A7                 sub     rsp, 8
.text:00000000000033AB                 call    _abort
.text:00000000000033AB ; } // starts at 3380
.text:00000000000033AB set_custom_quoting endp
.text:00000000000033AB
.text:00000000000033B0
.text:00000000000033B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000033B0
.text:00000000000033B0 ; Attributes: info_from_lumina
.text:00000000000033B0
.text:00000000000033B0 ; size_t __fastcall quotearg_buffer(char *buffer, size_t buffersize, const char *arg, size_t argsize, const quoting_options *o)
.text:00000000000033B0                 public quotearg_buffer
.text:00000000000033B0 quotearg_buffer proc near
.text:00000000000033B0
.text:00000000000033B0 var_40          = qword ptr -40h
.text:00000000000033B0
.text:00000000000033B0 ; __unwind {
.text:00000000000033B0                 push    r15
.text:00000000000033B2                 push    r14
.text:00000000000033B4                 lea     rax, default_quoting_options
.text:00000000000033BB                 push    r13
.text:00000000000033BD                 push    r12
.text:00000000000033BF                 mov     r13, rdi
.text:00000000000033C2                 push    rbp
.text:00000000000033C3                 push    rbx
.text:00000000000033C4                 mov     rbx, r8
.text:00000000000033C7                 mov     r14, rsi
.text:00000000000033CA                 mov     r15, rdx
.text:00000000000033CD                 sub     rsp, 18h
.text:00000000000033D1                 test    r8, r8
.text:00000000000033D4                 cmovz   rbx, rax
.text:00000000000033D8                 mov     [rsp+48h+var_40], rcx
.text:00000000000033DD                 call    ___errno_location
.text:00000000000033E2                 mov     r12d, [rax]
.text:00000000000033E5                 mov     rbp, rax
.text:00000000000033E8                 lea     rax, [rbx+8]
.text:00000000000033EC                 sub     rsp, 8
.text:00000000000033F0                 mov     r9d, [rbx+4]
.text:00000000000033F4                 push    qword ptr [rbx+30h]
.text:00000000000033F7                 mov     r8d, [rbx]
.text:00000000000033FA                 push    qword ptr [rbx+28h]
.text:00000000000033FD                 mov     rdx, r15
.text:0000000000003400                 push    rax
.text:0000000000003401                 mov     rcx, [rsp+68h+var_40]
.text:0000000000003406                 mov     rsi, r14
.text:0000000000003409                 mov     rdi, r13
.text:000000000000340C                 call    quotearg_buffer_restyled
.text:0000000000003411                 mov     [rbp+0], r12d
.text:0000000000003415                 add     rsp, 38h
.text:0000000000003419                 pop     rbx
.text:000000000000341A                 pop     rbp
.text:000000000000341B                 pop     r12
.text:000000000000341D                 pop     r13
.text:000000000000341F                 pop     r14
.text:0000000000003421                 pop     r15
.text:0000000000003423                 retn
.text:0000000000003423 ; } // starts at 33B0
.text:0000000000003423 quotearg_buffer endp
.text:0000000000003423
.text:0000000000003423 ; ---------------------------------------------------------------------------
.text:0000000000003424                 align 10h
.text:0000000000003430
.text:0000000000003430 ; =============== S U B R O U T I N E =======================================
.text:0000000000003430
.text:0000000000003430 ; Attributes: info_from_lumina
.text:0000000000003430
.text:0000000000003430 ; char *__fastcall quotearg_alloc_mem(const char *arg, size_t argsize, size_t *size, const quoting_options *o)
.text:0000000000003430                 public quotearg_alloc_mem
.text:0000000000003430 quotearg_alloc_mem proc near            ; CODE XREF: quotearg_alloc+5↓j
.text:0000000000003430
.text:0000000000003430 var_5C          = dword ptr -5Ch
.text:0000000000003430 var_58          = qword ptr -58h
.text:0000000000003430 var_50          = qword ptr -50h
.text:0000000000003430 var_48          = qword ptr -48h
.text:0000000000003430 var_40          = qword ptr -40h
.text:0000000000003430
.text:0000000000003430 ; __unwind {
.text:0000000000003430                 push    r15
.text:0000000000003432                 push    r14
.text:0000000000003434                 lea     rax, default_quoting_options
.text:000000000000343B                 push    r13
.text:000000000000343D                 push    r12
.text:000000000000343F                 mov     r12, rdx
.text:0000000000003442                 push    rbp
.text:0000000000003443                 push    rbx
.text:0000000000003444                 mov     rbx, rcx
.text:0000000000003447                 mov     r14, rdi
.text:000000000000344A                 mov     r15, rsi
.text:000000000000344D                 sub     rsp, 38h
.text:0000000000003451                 test    rcx, rcx
.text:0000000000003454                 cmovz   rbx, rax
.text:0000000000003458                 xor     ebp, ebp
.text:000000000000345A                 call    ___errno_location
.text:000000000000345F                 test    r12, r12
.text:0000000000003462                 mov     r13, rax
.text:0000000000003465                 mov     eax, [rax]
.text:0000000000003467                 setz    bpl
.text:000000000000346B                 or      ebp, [rbx+4]
.text:000000000000346E                 lea     r10, [rbx+8]
.text:0000000000003472                 sub     rsp, 8
.text:0000000000003476                 mov     r8d, [rbx]
.text:0000000000003479                 mov     rcx, r15
.text:000000000000347C                 mov     [rsp+70h+var_5C], eax
.text:0000000000003480                 push    qword ptr [rbx+30h]
.text:0000000000003483                 mov     rdx, r14
.text:0000000000003486                 push    qword ptr [rbx+28h]
.text:0000000000003489                 push    r10
.text:000000000000348B                 xor     esi, esi
.text:000000000000348D                 mov     r9d, ebp
.text:0000000000003490                 xor     edi, edi
.text:0000000000003492                 mov     [rsp+88h+var_48], r10
.text:0000000000003497                 call    quotearg_buffer_restyled
.text:000000000000349C                 lea     rsi, [rax+1]
.text:00000000000034A0                 mov     [rsp+88h+var_40], rax
.text:00000000000034A5                 add     rsp, 20h
.text:00000000000034A9                 mov     rdi, rsi
.text:00000000000034AC                 mov     [rsp+68h+var_50], rsi
.text:00000000000034B1                 call    xmalloc
.text:00000000000034B6                 mov     [rsp+68h+var_58], rax
.text:00000000000034BB                 sub     rsp, 8
.text:00000000000034BF                 push    qword ptr [rbx+30h]
.text:00000000000034C2                 push    qword ptr [rbx+28h]
.text:00000000000034C5                 mov     r10, [rsp+80h+var_48]
.text:00000000000034CA                 mov     r9d, ebp
.text:00000000000034CD                 mov     r8d, [rbx]
.text:00000000000034D0                 mov     rcx, r15
.text:00000000000034D3                 mov     rdx, r14
.text:00000000000034D6                 mov     rdi, rax
.text:00000000000034D9                 push    r10
.text:00000000000034DB                 mov     rsi, [rsp+88h+var_50]
.text:00000000000034E0                 call    quotearg_buffer_restyled
.text:00000000000034E5                 mov     eax, [rsp+88h+var_5C]
.text:00000000000034E9                 add     rsp, 20h
.text:00000000000034ED                 test    r12, r12
.text:00000000000034F0                 mov     [r13+0], eax
.text:00000000000034F4                 jz      short loc_34FF
.text:00000000000034F6                 mov     r11, [rsp+68h+var_40]
.text:00000000000034FB                 mov     [r12], r11
.text:00000000000034FF
.text:00000000000034FF loc_34FF:                               ; CODE XREF: quotearg_alloc_mem+C4↑j
.text:00000000000034FF                 mov     rax, [rsp+68h+var_58]
.text:0000000000003504                 add     rsp, 38h
.text:0000000000003508                 pop     rbx
.text:0000000000003509                 pop     rbp
.text:000000000000350A                 pop     r12
.text:000000000000350C                 pop     r13
.text:000000000000350E                 pop     r14
.text:0000000000003510                 pop     r15
.text:0000000000003512                 retn
.text:0000000000003512 ; } // starts at 3430
.text:0000000000003512 quotearg_alloc_mem endp
.text:0000000000003512
.text:0000000000003512 ; ---------------------------------------------------------------------------
.text:0000000000003513                 align 20h
.text:0000000000003520
.text:0000000000003520 ; =============== S U B R O U T I N E =======================================
.text:0000000000003520
.text:0000000000003520
.text:0000000000003520                 public quotearg_alloc
.text:0000000000003520 quotearg_alloc  proc near
.text:0000000000003520 ; __unwind {
.text:0000000000003520                 mov     rcx, rdx
.text:0000000000003523                 xor     edx, edx
.text:0000000000003525                 jmp     quotearg_alloc_mem
.text:0000000000003525 ; } // starts at 3520
.text:0000000000003525 quotearg_alloc  endp
.text:0000000000003525
.text:0000000000003525 ; ---------------------------------------------------------------------------
.text:000000000000352A                 align 10h
.text:0000000000003530
.text:0000000000003530 ; =============== S U B R O U T I N E =======================================
.text:0000000000003530
.text:0000000000003530 ; Attributes: info_from_lumina
.text:0000000000003530
.text:0000000000003530 ; void __cdecl quotearg_free()
.text:0000000000003530                 public quotearg_free
.text:0000000000003530 quotearg_free   proc near
.text:0000000000003530 ; __unwind {
.text:0000000000003530                 mov     eax, cs:nslots
.text:0000000000003536                 push    r12
.text:0000000000003538                 mov     r12, cs:slotvec
.text:000000000000353F                 push    rbp
.text:0000000000003540                 push    rbx
.text:0000000000003541                 cmp     eax, 1
.text:0000000000003544                 jle     short loc_3571
.text:0000000000003546                 sub     eax, 2
.text:0000000000003549                 lea     rbx, [r12+18h]
.text:000000000000354E                 shl     rax, 4
.text:0000000000003552                 lea     rbp, [r12+rax+28h]
.text:0000000000003557                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003560
.text:0000000000003560 loc_3560:                               ; CODE XREF: quotearg_free+3F↓j
.text:0000000000003560                 mov     rdi, [rbx]      ; ptr
.text:0000000000003563                 add     rbx, 10h
.text:0000000000003567                 call    _free
.text:000000000000356C                 cmp     rbx, rbp
.text:000000000000356F                 jnz     short loc_3560
.text:0000000000003571
.text:0000000000003571 loc_3571:                               ; CODE XREF: quotearg_free+14↑j
.text:0000000000003571                 mov     rdi, [r12+8]    ; ptr
.text:0000000000003576                 lea     rbx, slot0
.text:000000000000357D                 cmp     rdi, rbx
.text:0000000000003580                 jz      short loc_3599
.text:0000000000003582                 call    _free
.text:0000000000003587                 mov     cs:slotvec0, 100h
.text:0000000000003592                 mov     cs:off_207078, rbx
.text:0000000000003599
.text:0000000000003599 loc_3599:                               ; CODE XREF: quotearg_free+50↑j
.text:0000000000003599                 lea     rbx, slotvec0
.text:00000000000035A0                 cmp     r12, rbx
.text:00000000000035A3                 jz      short loc_35B4
.text:00000000000035A5                 mov     rdi, r12        ; ptr
.text:00000000000035A8                 call    _free
.text:00000000000035AD                 mov     cs:slotvec, rbx
.text:00000000000035B4
.text:00000000000035B4 loc_35B4:                               ; CODE XREF: quotearg_free+73↑j
.text:00000000000035B4                 pop     rbx
.text:00000000000035B5                 mov     cs:nslots, 1
.text:00000000000035BF                 pop     rbp
.text:00000000000035C0                 pop     r12
.text:00000000000035C2                 retn
.text:00000000000035C2 ; } // starts at 3530
.text:00000000000035C2 quotearg_free   endp
.text:00000000000035C2
.text:00000000000035C2 ; ---------------------------------------------------------------------------
.text:00000000000035C3                 align 10h
.text:00000000000035D0
.text:00000000000035D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035D0
.text:00000000000035D0
.text:00000000000035D0                 public quotearg_n
.text:00000000000035D0 quotearg_n      proc near
.text:00000000000035D0 ; __unwind {
.text:00000000000035D0                 lea     rcx, default_quoting_options
.text:00000000000035D7                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:00000000000035DE                 jmp     quotearg_n_options
.text:00000000000035DE ; } // starts at 35D0
.text:00000000000035DE quotearg_n      endp
.text:00000000000035DE
.text:00000000000035DE ; ---------------------------------------------------------------------------
.text:00000000000035E3                 align 10h
.text:00000000000035F0
.text:00000000000035F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000035F0
.text:00000000000035F0
.text:00000000000035F0                 public quotearg_n_mem
.text:00000000000035F0 quotearg_n_mem  proc near
.text:00000000000035F0 ; __unwind {
.text:00000000000035F0                 lea     rcx, default_quoting_options
.text:00000000000035F7                 jmp     quotearg_n_options
.text:00000000000035F7 ; } // starts at 35F0
.text:00000000000035F7 quotearg_n_mem  endp
.text:00000000000035F7
.text:00000000000035F7 ; ---------------------------------------------------------------------------
.text:00000000000035FC                 align 20h
.text:0000000000003600
.text:0000000000003600 ; =============== S U B R O U T I N E =======================================
.text:0000000000003600
.text:0000000000003600
.text:0000000000003600                 public quotearg
.text:0000000000003600 quotearg        proc near
.text:0000000000003600 ; __unwind {
.text:0000000000003600                 lea     rcx, default_quoting_options
.text:0000000000003607                 mov     rsi, rdi
.text:000000000000360A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003611                 xor     edi, edi
.text:0000000000003613                 jmp     quotearg_n_options
.text:0000000000003613 ; } // starts at 3600
.text:0000000000003613 quotearg        endp
.text:0000000000003613
.text:0000000000003613 ; ---------------------------------------------------------------------------
.text:0000000000003618                 align 20h
.text:0000000000003620
.text:0000000000003620 ; =============== S U B R O U T I N E =======================================
.text:0000000000003620
.text:0000000000003620
.text:0000000000003620                 public quotearg_mem
.text:0000000000003620 quotearg_mem    proc near
.text:0000000000003620 ; __unwind {
.text:0000000000003620                 lea     rcx, default_quoting_options
.text:0000000000003627                 mov     rdx, rsi
.text:000000000000362A                 mov     rsi, rdi
.text:000000000000362D                 xor     edi, edi
.text:000000000000362F                 jmp     quotearg_n_options
.text:000000000000362F ; } // starts at 3620
.text:000000000000362F quotearg_mem    endp
.text:000000000000362F
.text:000000000000362F ; ---------------------------------------------------------------------------
.text:0000000000003634                 align 20h
.text:0000000000003640
.text:0000000000003640 ; =============== S U B R O U T I N E =======================================
.text:0000000000003640
.text:0000000000003640 ; Attributes: info_from_lumina
.text:0000000000003640
.text:0000000000003640 ; char *__fastcall quotearg_n_style(int n, quoting_style s, const char *arg)
.text:0000000000003640                 public quotearg_n_style
.text:0000000000003640 quotearg_n_style proc near              ; CODE XREF: quotearg_style+7↓j
.text:0000000000003640
.text:0000000000003640 var_48          = dword ptr -48h
.text:0000000000003640 var_44          = qword ptr -44h
.text:0000000000003640 var_3C          = qword ptr -3Ch
.text:0000000000003640 var_34          = qword ptr -34h
.text:0000000000003640 var_2C          = qword ptr -2Ch
.text:0000000000003640 var_24          = qword ptr -24h
.text:0000000000003640 var_1C          = qword ptr -1Ch
.text:0000000000003640 var_14          = dword ptr -14h
.text:0000000000003640 var_10          = qword ptr -10h
.text:0000000000003640
.text:0000000000003640 ; __unwind {
.text:0000000000003640                 sub     rsp, 48h
.text:0000000000003644                 mov     rax, rdx
.text:0000000000003647                 mov     rdx, fs:28h
.text:0000000000003650                 mov     [rsp+48h+var_10], rdx
.text:0000000000003655                 xor     edx, edx
.text:0000000000003657                 cmp     esi, 0Ah
.text:000000000000365A                 jz      short loc_36C4
.text:000000000000365C                 mov     [rsp+48h+var_48], esi
.text:000000000000365F                 mov     rcx, rsp
.text:0000000000003662                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003669                 mov     rsi, rax
.text:000000000000366C                 mov     [rsp+48h+var_44], 0
.text:0000000000003675                 mov     [rsp+48h+var_3C], 0
.text:000000000000367E                 mov     [rsp+48h+var_34], 0
.text:0000000000003687                 mov     [rsp+48h+var_2C], 0
.text:0000000000003690                 mov     [rsp+48h+var_24], 0
.text:0000000000003699                 mov     [rsp+48h+var_1C], 0
.text:00000000000036A2                 mov     [rsp+48h+var_14], 0
.text:00000000000036AA                 call    quotearg_n_options
.text:00000000000036AF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000036B4                 xor     rcx, fs:28h
.text:00000000000036BD                 jnz     short loc_36C9
.text:00000000000036BF                 add     rsp, 48h
.text:00000000000036C3                 retn
.text:00000000000036C4 ; ---------------------------------------------------------------------------
.text:00000000000036C4
.text:00000000000036C4 loc_36C4:                               ; CODE XREF: quotearg_n_style+1A↑j
.text:00000000000036C4                 call    _abort
.text:00000000000036C9 ; ---------------------------------------------------------------------------
.text:00000000000036C9
.text:00000000000036C9 loc_36C9:                               ; CODE XREF: quotearg_n_style+7D↑j
.text:00000000000036C9                 call    ___stack_chk_fail
.text:00000000000036C9 ; } // starts at 3640
.text:00000000000036C9 quotearg_n_style endp
.text:00000000000036C9
.text:00000000000036C9 ; ---------------------------------------------------------------------------
.text:00000000000036CE                 align 10h
.text:00000000000036D0
.text:00000000000036D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000036D0
.text:00000000000036D0 ; Attributes: info_from_lumina
.text:00000000000036D0
.text:00000000000036D0 ; char *__fastcall quotearg_n_style_mem(int n, quoting_style s, const char *arg, size_t argsize)
.text:00000000000036D0                 public quotearg_n_style_mem
.text:00000000000036D0 quotearg_n_style_mem proc near          ; CODE XREF: quotearg_style_mem+A↓j
.text:00000000000036D0
.text:00000000000036D0 var_48          = dword ptr -48h
.text:00000000000036D0 var_44          = qword ptr -44h
.text:00000000000036D0 var_3C          = qword ptr -3Ch
.text:00000000000036D0 var_34          = qword ptr -34h
.text:00000000000036D0 var_2C          = qword ptr -2Ch
.text:00000000000036D0 var_24          = qword ptr -24h
.text:00000000000036D0 var_1C          = qword ptr -1Ch
.text:00000000000036D0 var_14          = dword ptr -14h
.text:00000000000036D0 var_10          = qword ptr -10h
.text:00000000000036D0
.text:00000000000036D0 ; __unwind {
.text:00000000000036D0                 sub     rsp, 48h
.text:00000000000036D4                 mov     rax, rdx
.text:00000000000036D7                 mov     rdx, rcx
.text:00000000000036DA                 mov     rcx, fs:28h
.text:00000000000036E3                 mov     [rsp+48h+var_10], rcx
.text:00000000000036E8                 xor     ecx, ecx
.text:00000000000036EA                 cmp     esi, 0Ah
.text:00000000000036ED                 jz      short loc_3750
.text:00000000000036EF                 mov     [rsp+48h+var_48], esi
.text:00000000000036F2                 mov     rcx, rsp
.text:00000000000036F5                 mov     rsi, rax
.text:00000000000036F8                 mov     [rsp+48h+var_44], 0
.text:0000000000003701                 mov     [rsp+48h+var_3C], 0
.text:000000000000370A                 mov     [rsp+48h+var_34], 0
.text:0000000000003713                 mov     [rsp+48h+var_2C], 0
.text:000000000000371C                 mov     [rsp+48h+var_24], 0
.text:0000000000003725                 mov     [rsp+48h+var_1C], 0
.text:000000000000372E                 mov     [rsp+48h+var_14], 0
.text:0000000000003736                 call    quotearg_n_options
.text:000000000000373B                 mov     rdx, [rsp+48h+var_10]
.text:0000000000003740                 xor     rdx, fs:28h
.text:0000000000003749                 jnz     short loc_3755
.text:000000000000374B                 add     rsp, 48h
.text:000000000000374F                 retn
.text:0000000000003750 ; ---------------------------------------------------------------------------
.text:0000000000003750
.text:0000000000003750 loc_3750:                               ; CODE XREF: quotearg_n_style_mem+1D↑j
.text:0000000000003750                 call    _abort
.text:0000000000003755 ; ---------------------------------------------------------------------------
.text:0000000000003755
.text:0000000000003755 loc_3755:                               ; CODE XREF: quotearg_n_style_mem+79↑j
.text:0000000000003755                 call    ___stack_chk_fail
.text:0000000000003755 ; } // starts at 36D0
.text:0000000000003755 quotearg_n_style_mem endp
.text:0000000000003755
.text:0000000000003755 ; ---------------------------------------------------------------------------
.text:000000000000375A                 align 20h
.text:0000000000003760
.text:0000000000003760 ; =============== S U B R O U T I N E =======================================
.text:0000000000003760
.text:0000000000003760
.text:0000000000003760                 public quotearg_style
.text:0000000000003760 quotearg_style  proc near
.text:0000000000003760 ; __unwind {
.text:0000000000003760                 mov     rdx, rsi
.text:0000000000003763                 mov     esi, edi
.text:0000000000003765                 xor     edi, edi
.text:0000000000003767                 jmp     quotearg_n_style
.text:0000000000003767 ; } // starts at 3760
.text:0000000000003767 quotearg_style  endp
.text:0000000000003767
.text:0000000000003767 ; ---------------------------------------------------------------------------
.text:000000000000376C                 align 10h
.text:0000000000003770
.text:0000000000003770 ; =============== S U B R O U T I N E =======================================
.text:0000000000003770
.text:0000000000003770
.text:0000000000003770                 public quotearg_style_mem
.text:0000000000003770 quotearg_style_mem proc near
.text:0000000000003770 ; __unwind {
.text:0000000000003770                 mov     rcx, rdx
.text:0000000000003773                 mov     rdx, rsi
.text:0000000000003776                 mov     esi, edi
.text:0000000000003778                 xor     edi, edi
.text:000000000000377A                 jmp     quotearg_n_style_mem
.text:000000000000377A ; } // starts at 3770
.text:000000000000377A quotearg_style_mem endp
.text:000000000000377A
.text:000000000000377A ; ---------------------------------------------------------------------------
.text:000000000000377F                 align 20h
.text:0000000000003780
.text:0000000000003780 ; =============== S U B R O U T I N E =======================================
.text:0000000000003780
.text:0000000000003780 ; Attributes: info_from_lumina
.text:0000000000003780
.text:0000000000003780 ; char *__fastcall quotearg_char_mem(const char *arg, size_t argsize, char ch_0)
.text:0000000000003780                 public quotearg_char_mem
.text:0000000000003780 quotearg_char_mem proc near             ; CODE XREF: quotearg_char+B↓j
.text:0000000000003780                                         ; quotearg_colon+C↓j ...
.text:0000000000003780
.text:0000000000003780 var_48          = xmmword ptr -48h
.text:0000000000003780 var_38          = xmmword ptr -38h
.text:0000000000003780 var_28          = xmmword ptr -28h
.text:0000000000003780 var_18          = qword ptr -18h
.text:0000000000003780 var_10          = qword ptr -10h
.text:0000000000003780
.text:0000000000003780 ; __unwind {
.text:0000000000003780                 sub     rsp, 48h
.text:0000000000003784                 mov     ecx, edx
.text:0000000000003786                 mov     rax, fs:28h
.text:000000000000378F                 mov     [rsp+48h+var_10], rax
.text:0000000000003794                 xor     eax, eax
.text:0000000000003796                 mov     rax, cs:qword_207230
.text:000000000000379D                 mov     r8, rsp
.text:00000000000037A0                 and     ecx, 1Fh
.text:00000000000037A3                 movdqa  xmm0, cs:default_quoting_options
.text:00000000000037AB                 mov     [rsp+48h+var_18], rax
.text:00000000000037B0                 mov     eax, edx
.text:00000000000037B2                 movaps  [rsp+48h+var_48], xmm0
.text:00000000000037B6                 shr     al, 5
.text:00000000000037B9                 movzx   eax, al
.text:00000000000037BC                 lea     r9, [r8+rax*4+8]
.text:00000000000037C1                 movdqa  xmm0, cs:xmmword_207210
.text:00000000000037C9                 movaps  [rsp+48h+var_38], xmm0
.text:00000000000037CE                 movdqa  xmm0, cs:xmmword_207220
.text:00000000000037D6                 movaps  [rsp+48h+var_28], xmm0
.text:00000000000037DB                 mov     edx, [r9]
.text:00000000000037DE                 mov     eax, edx
.text:00000000000037E0                 shr     eax, cl
.text:00000000000037E2                 not     eax
.text:00000000000037E4                 and     eax, 1
.text:00000000000037E7                 shl     eax, cl
.text:00000000000037E9                 mov     rcx, r8
.text:00000000000037EC                 xor     eax, edx
.text:00000000000037EE                 mov     rdx, rsi
.text:00000000000037F1                 mov     rsi, rdi
.text:00000000000037F4                 mov     [r9], eax
.text:00000000000037F7                 xor     edi, edi
.text:00000000000037F9                 call    quotearg_n_options
.text:00000000000037FE                 mov     rsi, [rsp+48h+var_10]
.text:0000000000003803                 xor     rsi, fs:28h
.text:000000000000380C                 jnz     short loc_3813
.text:000000000000380E                 add     rsp, 48h
.text:0000000000003812                 retn
.text:0000000000003813 ; ---------------------------------------------------------------------------
.text:0000000000003813
.text:0000000000003813 loc_3813:                               ; CODE XREF: quotearg_char_mem+8C↑j
.text:0000000000003813                 call    ___stack_chk_fail
.text:0000000000003813 ; } // starts at 3780
.text:0000000000003813 quotearg_char_mem endp
.text:0000000000003813
.text:0000000000003813 ; ---------------------------------------------------------------------------
.text:0000000000003818                 align 20h
.text:0000000000003820
.text:0000000000003820 ; =============== S U B R O U T I N E =======================================
.text:0000000000003820
.text:0000000000003820
.text:0000000000003820                 public quotearg_char
.text:0000000000003820 quotearg_char   proc near
.text:0000000000003820 ; __unwind {
.text:0000000000003820                 movsx   edx, sil
.text:0000000000003824                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000382B                 jmp     quotearg_char_mem
.text:000000000000382B ; } // starts at 3820
.text:000000000000382B quotearg_char   endp
.text:000000000000382B
.text:0000000000003830
.text:0000000000003830 ; =============== S U B R O U T I N E =======================================
.text:0000000000003830
.text:0000000000003830
.text:0000000000003830                 public quotearg_colon
.text:0000000000003830 quotearg_colon  proc near               ; CODE XREF: close_stdout+65↑p
.text:0000000000003830 ; __unwind {
.text:0000000000003830                 mov     edx, 3Ah ; ':'
.text:0000000000003835                 mov     rsi, 0FFFFFFFFFFFFFFFFh
.text:000000000000383C                 jmp     quotearg_char_mem
.text:000000000000383C ; } // starts at 3830
.text:000000000000383C quotearg_colon  endp
.text:000000000000383C
.text:000000000000383C ; ---------------------------------------------------------------------------
.text:0000000000003841                 align 10h
.text:0000000000003850
.text:0000000000003850 ; =============== S U B R O U T I N E =======================================
.text:0000000000003850
.text:0000000000003850
.text:0000000000003850                 public quotearg_colon_mem
.text:0000000000003850 quotearg_colon_mem proc near
.text:0000000000003850 ; __unwind {
.text:0000000000003850                 mov     edx, 3Ah ; ':'
.text:0000000000003855                 jmp     quotearg_char_mem
.text:0000000000003855 ; } // starts at 3850
.text:0000000000003855 quotearg_colon_mem endp
.text:0000000000003855
.text:0000000000003855 ; ---------------------------------------------------------------------------
.text:000000000000385A                 align 20h
.text:0000000000003860
.text:0000000000003860 ; =============== S U B R O U T I N E =======================================
.text:0000000000003860
.text:0000000000003860 ; Attributes: info_from_lumina
.text:0000000000003860
.text:0000000000003860 ; char *__fastcall quotearg_n_style_colon(int n, quoting_style s, const char *arg)
.text:0000000000003860                 public quotearg_n_style_colon
.text:0000000000003860 quotearg_n_style_colon proc near
.text:0000000000003860
.text:0000000000003860 var_48          = dword ptr -48h
.text:0000000000003860 var_44          = qword ptr -44h
.text:0000000000003860 var_3C          = qword ptr -3Ch
.text:0000000000003860 var_34          = qword ptr -34h
.text:0000000000003860 var_2C          = qword ptr -2Ch
.text:0000000000003860 var_24          = qword ptr -24h
.text:0000000000003860 var_1C          = qword ptr -1Ch
.text:0000000000003860 var_14          = dword ptr -14h
.text:0000000000003860 var_10          = qword ptr -10h
.text:0000000000003860
.text:0000000000003860 ; __unwind {
.text:0000000000003860                 sub     rsp, 48h
.text:0000000000003864                 mov     rax, rdx
.text:0000000000003867                 mov     rdx, fs:28h
.text:0000000000003870                 mov     [rsp+48h+var_10], rdx
.text:0000000000003875                 xor     edx, edx
.text:0000000000003877                 cmp     esi, 0Ah
.text:000000000000387A                 jz      short loc_38E4
.text:000000000000387C                 mov     [rsp+48h+var_48], esi
.text:000000000000387F                 mov     rcx, rsp
.text:0000000000003882                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003889                 mov     rsi, rax
.text:000000000000388C                 mov     [rsp+48h+var_44], 0
.text:0000000000003895                 mov     [rsp+48h+var_3C], 4000000h
.text:000000000000389E                 mov     [rsp+48h+var_34], 0
.text:00000000000038A7                 mov     [rsp+48h+var_2C], 0
.text:00000000000038B0                 mov     [rsp+48h+var_24], 0
.text:00000000000038B9                 mov     [rsp+48h+var_1C], 0
.text:00000000000038C2                 mov     [rsp+48h+var_14], 0
.text:00000000000038CA                 call    quotearg_n_options
.text:00000000000038CF                 mov     rcx, [rsp+48h+var_10]
.text:00000000000038D4                 xor     rcx, fs:28h
.text:00000000000038DD                 jnz     short loc_38E9
.text:00000000000038DF                 add     rsp, 48h
.text:00000000000038E3                 retn
.text:00000000000038E4 ; ---------------------------------------------------------------------------
.text:00000000000038E4
.text:00000000000038E4 loc_38E4:                               ; CODE XREF: quotearg_n_style_colon+1A↑j
.text:00000000000038E4                 call    _abort
.text:00000000000038E9 ; ---------------------------------------------------------------------------
.text:00000000000038E9
.text:00000000000038E9 loc_38E9:                               ; CODE XREF: quotearg_n_style_colon+7D↑j
.text:00000000000038E9                 call    ___stack_chk_fail
.text:00000000000038E9 ; } // starts at 3860
.text:00000000000038E9 quotearg_n_style_colon endp
.text:00000000000038E9
.text:00000000000038E9 ; ---------------------------------------------------------------------------
.text:00000000000038EE                 align 10h
.text:00000000000038F0
.text:00000000000038F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000038F0
.text:00000000000038F0 ; Attributes: info_from_lumina
.text:00000000000038F0
.text:00000000000038F0 ; char *__fastcall quotearg_n_custom_mem(int n, const char *left_quote, const char *right_quote, const char *arg, size_t argsize)
.text:00000000000038F0                 public quotearg_n_custom_mem
.text:00000000000038F0 quotearg_n_custom_mem proc near         ; CODE XREF: quotearg_n_custom+7↓j
.text:00000000000038F0                                         ; quotearg_custom+12↓j ...
.text:00000000000038F0
.text:00000000000038F0 var_48          = xmmword ptr -48h
.text:00000000000038F0 var_38          = xmmword ptr -38h
.text:00000000000038F0 var_28          = xmmword ptr -28h
.text:00000000000038F0 var_18          = qword ptr -18h
.text:00000000000038F0 var_10          = qword ptr -10h
.text:00000000000038F0
.text:00000000000038F0 ; __unwind {
.text:00000000000038F0                 sub     rsp, 48h
.text:00000000000038F4                 mov     r9, rcx
.text:00000000000038F7                 mov     rcx, cs:qword_207230
.text:00000000000038FE                 movdqa  xmm0, cs:default_quoting_options
.text:0000000000003906                 mov     rax, fs:28h
.text:000000000000390F                 mov     [rsp+48h+var_10], rax
.text:0000000000003914                 xor     eax, eax
.text:0000000000003916                 movaps  [rsp+48h+var_48], xmm0
.text:000000000000391A                 test    rsi, rsi
.text:000000000000391D                 mov     [rsp+48h+var_18], rcx
.text:0000000000003922                 mov     dword ptr [rsp+48h+var_48], 0Ah
.text:0000000000003929                 movdqa  xmm0, cs:xmmword_207210
.text:0000000000003931                 movaps  [rsp+48h+var_38], xmm0
.text:0000000000003936                 movdqa  xmm0, cs:xmmword_207220
.text:000000000000393E                 movaps  [rsp+48h+var_28], xmm0
.text:0000000000003943                 jz      short loc_3977
.text:0000000000003945                 test    rdx, rdx
.text:0000000000003948                 jz      short loc_3977
.text:000000000000394A                 mov     qword ptr [rsp+48h+var_28+8], rsi
.text:000000000000394F                 mov     [rsp+48h+var_18], rdx
.text:0000000000003954                 mov     rcx, rsp
.text:0000000000003957                 mov     rdx, r8
.text:000000000000395A                 mov     rsi, r9
.text:000000000000395D                 call    quotearg_n_options
.text:0000000000003962                 mov     rdi, [rsp+48h+var_10]
.text:0000000000003967                 xor     rdi, fs:28h
.text:0000000000003970                 jnz     short loc_397C
.text:0000000000003972                 add     rsp, 48h
.text:0000000000003976                 retn
.text:0000000000003977 ; ---------------------------------------------------------------------------
.text:0000000000003977
.text:0000000000003977 loc_3977:                               ; CODE XREF: quotearg_n_custom_mem+53↑j
.text:0000000000003977                                         ; quotearg_n_custom_mem+58↑j
.text:0000000000003977                 call    _abort
.text:000000000000397C ; ---------------------------------------------------------------------------
.text:000000000000397C
.text:000000000000397C loc_397C:                               ; CODE XREF: quotearg_n_custom_mem+80↑j
.text:000000000000397C                 call    ___stack_chk_fail
.text:000000000000397C ; } // starts at 38F0
.text:000000000000397C quotearg_n_custom_mem endp
.text:000000000000397C
.text:000000000000397C ; ---------------------------------------------------------------------------
.text:0000000000003981                 align 10h
.text:0000000000003990
.text:0000000000003990 ; =============== S U B R O U T I N E =======================================
.text:0000000000003990
.text:0000000000003990
.text:0000000000003990                 public quotearg_n_custom
.text:0000000000003990 quotearg_n_custom proc near
.text:0000000000003990 ; __unwind {
.text:0000000000003990                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:0000000000003997                 jmp     quotearg_n_custom_mem
.text:0000000000003997 ; } // starts at 3990
.text:0000000000003997 quotearg_n_custom endp
.text:0000000000003997
.text:0000000000003997 ; ---------------------------------------------------------------------------
.text:000000000000399C                 align 20h
.text:00000000000039A0
.text:00000000000039A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039A0
.text:00000000000039A0
.text:00000000000039A0                 public quotearg_custom
.text:00000000000039A0 quotearg_custom proc near
.text:00000000000039A0 ; __unwind {
.text:00000000000039A0                 mov     rcx, rdx
.text:00000000000039A3                 mov     r8, 0FFFFFFFFFFFFFFFFh
.text:00000000000039AA                 mov     rdx, rsi
.text:00000000000039AD                 mov     rsi, rdi
.text:00000000000039B0                 xor     edi, edi
.text:00000000000039B2                 jmp     quotearg_n_custom_mem
.text:00000000000039B2 ; } // starts at 39A0
.text:00000000000039B2 quotearg_custom endp
.text:00000000000039B2
.text:00000000000039B2 ; ---------------------------------------------------------------------------
.text:00000000000039B7                 align 20h
.text:00000000000039C0
.text:00000000000039C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039C0
.text:00000000000039C0
.text:00000000000039C0                 public quotearg_custom_mem
.text:00000000000039C0 quotearg_custom_mem proc near
.text:00000000000039C0 ; __unwind {
.text:00000000000039C0                 mov     r8, rcx
.text:00000000000039C3                 mov     rcx, rdx
.text:00000000000039C6                 mov     rdx, rsi
.text:00000000000039C9                 mov     rsi, rdi
.text:00000000000039CC                 xor     edi, edi
.text:00000000000039CE                 jmp     quotearg_n_custom_mem
.text:00000000000039CE ; } // starts at 39C0
.text:00000000000039CE quotearg_custom_mem endp
.text:00000000000039CE
.text:00000000000039CE ; ---------------------------------------------------------------------------
.text:00000000000039D3                 align 20h
.text:00000000000039E0
.text:00000000000039E0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039E0
.text:00000000000039E0
.text:00000000000039E0                 public quote_n_mem
.text:00000000000039E0 quote_n_mem     proc near
.text:00000000000039E0 ; __unwind {
.text:00000000000039E0                 lea     rcx, quote_quoting_options
.text:00000000000039E7                 jmp     quotearg_n_options
.text:00000000000039E7 ; } // starts at 39E0
.text:00000000000039E7 quote_n_mem     endp
.text:00000000000039E7
.text:00000000000039E7 ; ---------------------------------------------------------------------------
.text:00000000000039EC                 align 10h
.text:00000000000039F0
.text:00000000000039F0 ; =============== S U B R O U T I N E =======================================
.text:00000000000039F0
.text:00000000000039F0
.text:00000000000039F0                 public quote_mem
.text:00000000000039F0 quote_mem       proc near
.text:00000000000039F0 ; __unwind {
.text:00000000000039F0                 lea     rcx, quote_quoting_options
.text:00000000000039F7                 mov     rdx, rsi
.text:00000000000039FA                 mov     rsi, rdi
.text:00000000000039FD                 xor     edi, edi
.text:00000000000039FF                 jmp     quotearg_n_options
.text:00000000000039FF ; } // starts at 39F0
.text:00000000000039FF quote_mem       endp
.text:00000000000039FF
.text:00000000000039FF ; ---------------------------------------------------------------------------
.text:0000000000003A04                 align 10h
.text:0000000000003A10
.text:0000000000003A10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A10
.text:0000000000003A10
.text:0000000000003A10                 public quote_n
.text:0000000000003A10 quote_n         proc near
.text:0000000000003A10 ; __unwind {
.text:0000000000003A10                 lea     rcx, quote_quoting_options
.text:0000000000003A17                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A1E                 jmp     quotearg_n_options
.text:0000000000003A1E ; } // starts at 3A10
.text:0000000000003A1E quote_n         endp
.text:0000000000003A1E
.text:0000000000003A1E ; ---------------------------------------------------------------------------
.text:0000000000003A23                 align 10h
.text:0000000000003A30
.text:0000000000003A30 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A30
.text:0000000000003A30
.text:0000000000003A30                 public quote
.text:0000000000003A30 quote           proc near
.text:0000000000003A30 ; __unwind {
.text:0000000000003A30                 lea     rcx, quote_quoting_options
.text:0000000000003A37                 mov     rsi, rdi
.text:0000000000003A3A                 mov     rdx, 0FFFFFFFFFFFFFFFFh
.text:0000000000003A41                 xor     edi, edi
.text:0000000000003A43                 jmp     quotearg_n_options
.text:0000000000003A43 ; } // starts at 3A30
.text:0000000000003A43 quote           endp
.text:0000000000003A43
.text:0000000000003A43 ; ---------------------------------------------------------------------------
.text:0000000000003A48                 align 10h
.text:0000000000003A50
.text:0000000000003A50 ; =============== S U B R O U T I N E =======================================
.text:0000000000003A50
.text:0000000000003A50
.text:0000000000003A50 ; __int64 __fastcall version_etc_arn(FILE *stream)
.text:0000000000003A50                 public version_etc_arn
.text:0000000000003A50 version_etc_arn proc near               ; CODE XREF: version_etc_ar:loc_3E8B↓j
.text:0000000000003A50                                         ; version_etc_va:loc_3EDB↓p ...
.text:0000000000003A50
.text:0000000000003A50 var_58          = qword ptr -58h
.text:0000000000003A50 var_50          = qword ptr -50h
.text:0000000000003A50 var_48          = qword ptr -48h
.text:0000000000003A50 var_40          = qword ptr -40h
.text:0000000000003A50
.text:0000000000003A50 ; __unwind {
.text:0000000000003A50                 push    r15
.text:0000000000003A52                 push    r14
.text:0000000000003A54                 push    r13
.text:0000000000003A56                 push    r12
.text:0000000000003A58                 mov     r12, r9
.text:0000000000003A5B                 push    rbp
.text:0000000000003A5C                 push    rbx
.text:0000000000003A5D                 mov     rbp, rdi
.text:0000000000003A60                 mov     rbx, r8
.text:0000000000003A63                 sub     rsp, 28h
.text:0000000000003A67                 test    rsi, rsi
.text:0000000000003A6A                 jz      loc_3B88
.text:0000000000003A70                 mov     r8, rdx
.text:0000000000003A73                 lea     rdx, aSSS       ; "%s (%s) %s\n"
.text:0000000000003A7A                 mov     r9, rcx
.text:0000000000003A7D                 xor     eax, eax
.text:0000000000003A7F                 mov     rcx, rsi
.text:0000000000003A82                 mov     esi, 1
.text:0000000000003A87                 call    ___fprintf_chk
.text:0000000000003A8C
.text:0000000000003A8C loc_3A8C:                               ; CODE XREF: version_etc_arn+151↓j
.text:0000000000003A8C                 lea     rsi, aC_0       ; "(C)"
.text:0000000000003A93                 xor     edi, edi        ; domainname
.text:0000000000003A95                 mov     edx, 5          ; category
.text:0000000000003A9A                 call    _dcgettext
.text:0000000000003A9F                 lea     rdx, version_etc_copyright ; "Copyright %s %d Free Software Foundatio"...
.text:0000000000003AA6                 mov     rcx, rax
.text:0000000000003AA9                 mov     r8d, 7E3h
.text:0000000000003AAF                 mov     esi, 1
.text:0000000000003AB4                 mov     rdi, rbp
.text:0000000000003AB7                 xor     eax, eax
.text:0000000000003AB9                 call    ___fprintf_chk
.text:0000000000003ABE                 lea     rsi, aLicenseGplv3Gn ; "\nLicense GPLv3+: GNU GPL version 3 or "...
.text:0000000000003AC5                 xor     edi, edi        ; domainname
.text:0000000000003AC7                 mov     edx, 5          ; category
.text:0000000000003ACC                 call    _dcgettext
.text:0000000000003AD1                 mov     rsi, rbp        ; stream
.text:0000000000003AD4                 mov     rdi, rax        ; s
.text:0000000000003AD7                 call    _fputs_unlocked
.text:0000000000003ADC                 cmp     r12, 9          ; switch 10 cases
.text:0000000000003AE0                 ja      def_3AF4        ; jumptable 0000000000003AF4 default case
.text:0000000000003AE6                 lea     rdx, jpt_3AF4
.text:0000000000003AED                 movsxd  rax, ds:(jpt_3AF4 - 5408h)[rdx+r12*4]
.text:0000000000003AF1                 add     rax, rdx
.text:0000000000003AF4                 jmp     rax             ; switch jump
.text:0000000000003AF4 ; ---------------------------------------------------------------------------
.text:0000000000003AF6                 align 20h
.text:0000000000003B00
.text:0000000000003B00 loc_3B00:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B00                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003B00                 mov     r9, [rbx+38h]   ; jumptable 0000000000003AF4 case 8
.text:0000000000003B04                 mov     rax, [rbx+10h]
.text:0000000000003B08                 lea     rsi, aWrittenBySSSSS ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003B0F                 mov     r8, [rbx+8]
.text:0000000000003B13                 mov     edx, 5          ; category
.text:0000000000003B18                 xor     edi, edi        ; domainname
.text:0000000000003B1A                 mov     r13, [rbx+30h]
.text:0000000000003B1E                 mov     r12, [rbx+28h]
.text:0000000000003B22                 mov     [rsp+58h+var_48], r9
.text:0000000000003B27                 mov     r15, [rbx+20h]
.text:0000000000003B2B                 mov     r14, [rbx+18h]
.text:0000000000003B2F                 mov     [rsp+58h+var_58], rax
.text:0000000000003B33                 mov     [rsp+58h+var_50], r8
.text:0000000000003B38                 mov     rbx, [rbx]
.text:0000000000003B3B                 call    _dcgettext
.text:0000000000003B40                 sub     rsp, 8
.text:0000000000003B44
.text:0000000000003B44 loc_3B44:                               ; CODE XREF: version_etc_arn+1B0↓j
.text:0000000000003B44                 mov     r9, [rsp+60h+var_48]
.text:0000000000003B49                 mov     rdx, rax
.text:0000000000003B4C                 mov     rcx, rbx
.text:0000000000003B4F                 mov     esi, 1
.text:0000000000003B54                 mov     rdi, rbp
.text:0000000000003B57                 xor     eax, eax
.text:0000000000003B59                 push    r9
.text:0000000000003B5B                 push    r13
.text:0000000000003B5D                 push    r12
.text:0000000000003B5F                 push    r15
.text:0000000000003B61                 push    r14
.text:0000000000003B63                 mov     r9, [rsp+88h+var_58]
.text:0000000000003B68                 mov     r8, [rsp+88h+var_50]
.text:0000000000003B6D                 call    ___fprintf_chk
.text:0000000000003B72                 add     rsp, 30h
.text:0000000000003B76
.text:0000000000003B76 loc_3B76:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003B76                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003B76                 add     rsp, 28h        ; jumptable 0000000000003AF4 case 0
.text:0000000000003B7A                 pop     rbx
.text:0000000000003B7B                 pop     rbp
.text:0000000000003B7C                 pop     r12
.text:0000000000003B7E                 pop     r13
.text:0000000000003B80                 pop     r14
.text:0000000000003B82                 pop     r15
.text:0000000000003B84                 retn
.text:0000000000003B84 ; ---------------------------------------------------------------------------
.text:0000000000003B85                 align 8
.text:0000000000003B88
.text:0000000000003B88 loc_3B88:                               ; CODE XREF: version_etc_arn+1A↑j
.text:0000000000003B88                 mov     r8, rcx
.text:0000000000003B8B                 mov     rcx, rdx
.text:0000000000003B8E                 lea     rdx, aSS_0      ; "%s %s\n"
.text:0000000000003B95                 mov     esi, 1
.text:0000000000003B9A                 xor     eax, eax
.text:0000000000003B9C                 call    ___fprintf_chk
.text:0000000000003BA1                 jmp     loc_3A8C
.text:0000000000003BA1 ; ---------------------------------------------------------------------------
.text:0000000000003BA6                 align 10h
.text:0000000000003BB0
.text:0000000000003BB0 loc_3BB0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003BB0                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003BB0                 mov     r10, [rbx+40h]  ; jumptable 0000000000003AF4 case 9
.text:0000000000003BB4                 mov     r9, [rbx+38h]
.text:0000000000003BB8                 lea     rsi, aWrittenBySSSSS_0 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003BBF                 mov     rax, [rbx+10h]
.text:0000000000003BC3                 mov     r8, [rbx+8]
.text:0000000000003BC7                 mov     edx, 5          ; category
.text:0000000000003BCC                 mov     r13, [rbx+30h]
.text:0000000000003BD0                 mov     r12, [rbx+28h]
.text:0000000000003BD4                 mov     r15, [rbx+20h]
.text:0000000000003BD8                 mov     r14, [rbx+18h]
.text:0000000000003BDC                 mov     rbx, [rbx]
.text:0000000000003BDF                 mov     [rsp+58h+var_40], r10
.text:0000000000003BE4                 mov     [rsp+58h+var_48], r9
.text:0000000000003BE9                 mov     [rsp+58h+var_58], rax
.text:0000000000003BED                 mov     [rsp+58h+var_50], r8
.text:0000000000003BF2
.text:0000000000003BF2 loc_3BF2:                               ; CODE XREF: version_etc_arn+412↓j
.text:0000000000003BF2                 xor     edi, edi        ; domainname
.text:0000000000003BF4                 call    _dcgettext
.text:0000000000003BF9                 mov     r10, [rsp+58h+var_40]
.text:0000000000003BFE                 push    r10
.text:0000000000003C00                 jmp     loc_3B44
.text:0000000000003C00 ; ---------------------------------------------------------------------------
.text:0000000000003C05                 align 8
.text:0000000000003C08
.text:0000000000003C08 loc_3C08:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C08                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003C08                 mov     rbx, [rbx]      ; jumptable 0000000000003AF4 case 1
.text:0000000000003C0B                 lea     rsi, aWrittenByS ; "Written by %s.\n"
.text:0000000000003C12                 mov     edx, 5          ; category
.text:0000000000003C17                 xor     edi, edi        ; domainname
.text:0000000000003C19                 call    _dcgettext
.text:0000000000003C1E                 add     rsp, 28h
.text:0000000000003C22                 mov     rcx, rbx
.text:0000000000003C25                 mov     rdi, rbp
.text:0000000000003C28                 pop     rbx
.text:0000000000003C29                 pop     rbp
.text:0000000000003C2A                 pop     r12
.text:0000000000003C2C                 pop     r13
.text:0000000000003C2E                 pop     r14
.text:0000000000003C30                 pop     r15
.text:0000000000003C32                 mov     rdx, rax
.text:0000000000003C35                 mov     esi, 1
.text:0000000000003C3A                 xor     eax, eax
.text:0000000000003C3C                 jmp     ___fprintf_chk
.text:0000000000003C3C ; ---------------------------------------------------------------------------
.text:0000000000003C41                 align 8
.text:0000000000003C48
.text:0000000000003C48 loc_3C48:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C48                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003C48                 mov     r12, [rbx+8]    ; jumptable 0000000000003AF4 case 2
.text:0000000000003C4C                 lea     rsi, aWrittenBySAndS ; "Written by %s and %s.\n"
.text:0000000000003C53                 mov     rbx, [rbx]
.text:0000000000003C56                 mov     edx, 5          ; category
.text:0000000000003C5B                 xor     edi, edi        ; domainname
.text:0000000000003C5D                 call    _dcgettext
.text:0000000000003C62                 add     rsp, 28h
.text:0000000000003C66                 mov     r8, r12
.text:0000000000003C69                 mov     rcx, rbx
.text:0000000000003C6C                 mov     rdi, rbp
.text:0000000000003C6F                 mov     rdx, rax
.text:0000000000003C72                 mov     esi, 1
.text:0000000000003C77                 pop     rbx
.text:0000000000003C78                 pop     rbp
.text:0000000000003C79                 pop     r12
.text:0000000000003C7B                 pop     r13
.text:0000000000003C7D                 pop     r14
.text:0000000000003C7F                 pop     r15
.text:0000000000003C81                 xor     eax, eax
.text:0000000000003C83                 jmp     ___fprintf_chk
.text:0000000000003C83 ; ---------------------------------------------------------------------------
.text:0000000000003C88                 align 10h
.text:0000000000003C90
.text:0000000000003C90 loc_3C90:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003C90                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003C90                 mov     r13, [rbx+10h]  ; jumptable 0000000000003AF4 case 3
.text:0000000000003C94                 mov     r12, [rbx+8]
.text:0000000000003C98                 lea     rsi, aWrittenBySSAnd ; "Written by %s, %s, and %s.\n"
.text:0000000000003C9F                 mov     rbx, [rbx]
.text:0000000000003CA2                 mov     edx, 5          ; category
.text:0000000000003CA7                 xor     edi, edi        ; domainname
.text:0000000000003CA9                 call    _dcgettext
.text:0000000000003CAE                 add     rsp, 28h
.text:0000000000003CB2                 mov     r9, r13
.text:0000000000003CB5                 mov     r8, r12
.text:0000000000003CB8                 mov     rcx, rbx
.text:0000000000003CBB                 mov     rdi, rbp
.text:0000000000003CBE                 mov     rdx, rax
.text:0000000000003CC1                 pop     rbx
.text:0000000000003CC2                 pop     rbp
.text:0000000000003CC3                 pop     r12
.text:0000000000003CC5                 pop     r13
.text:0000000000003CC7                 pop     r14
.text:0000000000003CC9                 pop     r15
.text:0000000000003CCB                 mov     esi, 1
.text:0000000000003CD0                 xor     eax, eax
.text:0000000000003CD2                 jmp     ___fprintf_chk
.text:0000000000003CD2 ; ---------------------------------------------------------------------------
.text:0000000000003CD7                 align 20h
.text:0000000000003CE0
.text:0000000000003CE0 loc_3CE0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003CE0                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003CE0                 lea     rsi, aWrittenBySSSAn ; jumptable 0000000000003AF4 case 4
.text:0000000000003CE7                 mov     edx, 5          ; category
.text:0000000000003CEC                 xor     edi, edi        ; domainname
.text:0000000000003CEE                 mov     r14, [rbx+18h]
.text:0000000000003CF2                 mov     r13, [rbx+10h]
.text:0000000000003CF6                 mov     r12, [rbx+8]
.text:0000000000003CFA                 mov     rbx, [rbx]
.text:0000000000003CFD                 call    _dcgettext
.text:0000000000003D02                 sub     rsp, 8
.text:0000000000003D06
.text:0000000000003D06 loc_3D06:                               ; CODE XREF: version_etc_arn+310↓j
.text:0000000000003D06                 push    r14
.text:0000000000003D08                 mov     rdx, rax
.text:0000000000003D0B                 mov     r9, r13
.text:0000000000003D0E                 mov     r8, r12
.text:0000000000003D11                 mov     rcx, rbx
.text:0000000000003D14                 mov     rdi, rbp
.text:0000000000003D17                 mov     esi, 1
.text:0000000000003D1C                 xor     eax, eax
.text:0000000000003D1E                 call    ___fprintf_chk
.text:0000000000003D23                 pop     rax
.text:0000000000003D24                 pop     rdx
.text:0000000000003D25                 add     rsp, 28h
.text:0000000000003D29                 pop     rbx
.text:0000000000003D2A                 pop     rbp
.text:0000000000003D2B                 pop     r12
.text:0000000000003D2D                 pop     r13
.text:0000000000003D2F                 pop     r14
.text:0000000000003D31                 pop     r15
.text:0000000000003D33                 retn
.text:0000000000003D33 ; ---------------------------------------------------------------------------
.text:0000000000003D34                 align 8
.text:0000000000003D38
.text:0000000000003D38 loc_3D38:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D38                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003D38                 mov     r15, [rbx+20h]  ; jumptable 0000000000003AF4 case 5
.text:0000000000003D3C                 lea     rsi, aWrittenBySSSSA ; "Written by %s, %s, %s,\n%s, and %s.\n"
.text:0000000000003D43                 mov     edx, 5          ; category
.text:0000000000003D48                 xor     edi, edi        ; domainname
.text:0000000000003D4A                 mov     r14, [rbx+18h]
.text:0000000000003D4E                 mov     r13, [rbx+10h]
.text:0000000000003D52                 mov     r12, [rbx+8]
.text:0000000000003D56                 mov     rbx, [rbx]
.text:0000000000003D59                 call    _dcgettext
.text:0000000000003D5E                 push    r15
.text:0000000000003D60                 jmp     short loc_3D06
.text:0000000000003D60 ; ---------------------------------------------------------------------------
.text:0000000000003D62                 align 8
.text:0000000000003D68
.text:0000000000003D68 loc_3D68:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003D68                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003D68                 mov     r8, [rbx+8]     ; jumptable 0000000000003AF4 case 6
.text:0000000000003D6C                 mov     r12, [rbx+28h]
.text:0000000000003D70                 lea     rsi, aWrittenBySSSSS_1 ; "Written by %s, %s, %s,\n%s, %s, and %s."...
.text:0000000000003D77                 mov     r15, [rbx+20h]
.text:0000000000003D7B                 mov     r14, [rbx+18h]
.text:0000000000003D7F                 mov     edx, 5          ; category
.text:0000000000003D84                 mov     r13, [rbx+10h]
.text:0000000000003D88                 xor     edi, edi        ; domainname
.text:0000000000003D8A                 mov     rbx, [rbx]
.text:0000000000003D8D                 mov     [rsp+58h+var_58], r8
.text:0000000000003D91                 call    _dcgettext
.text:0000000000003D96                 sub     rsp, 8
.text:0000000000003D9A                 mov     r9, r13
.text:0000000000003D9D                 push    r12
.text:0000000000003D9F                 push    r15
.text:0000000000003DA1                 push    r14
.text:0000000000003DA3
.text:0000000000003DA3 loc_3DA3:                               ; CODE XREF: version_etc_arn+3C4↓j
.text:0000000000003DA3                 mov     r8, [rsp+78h+var_58]
.text:0000000000003DA8                 mov     rcx, rbx
.text:0000000000003DAB                 mov     rdx, rax
.text:0000000000003DAE                 mov     rdi, rbp
.text:0000000000003DB1                 mov     esi, 1
.text:0000000000003DB6                 xor     eax, eax
.text:0000000000003DB8                 call    ___fprintf_chk
.text:0000000000003DBD                 add     rsp, 20h
.text:0000000000003DC1                 add     rsp, 28h
.text:0000000000003DC5                 pop     rbx
.text:0000000000003DC6                 pop     rbp
.text:0000000000003DC7                 pop     r12
.text:0000000000003DC9                 pop     r13
.text:0000000000003DCB                 pop     r14
.text:0000000000003DCD                 pop     r15
.text:0000000000003DCF                 retn
.text:0000000000003DD0 ; ---------------------------------------------------------------------------
.text:0000000000003DD0
.text:0000000000003DD0 loc_3DD0:                               ; CODE XREF: version_etc_arn+A4↑j
.text:0000000000003DD0                                         ; DATA XREF: .rodata:jpt_3AF4↓o
.text:0000000000003DD0                 mov     r9, [rbx+10h]   ; jumptable 0000000000003AF4 case 7
.text:0000000000003DD4                 mov     r13, [rbx+30h]
.text:0000000000003DD8                 lea     rsi, aWrittenBySSSSS_2 ; "Written by %s, %s, %s,\n%s, %s, %s, and"...
.text:0000000000003DDF                 mov     r12, [rbx+28h]
.text:0000000000003DE3                 mov     r15, [rbx+20h]
.text:0000000000003DE7                 mov     edx, 5          ; category
.text:0000000000003DEC                 mov     r14, [rbx+18h]
.text:0000000000003DF0                 mov     r8, [rbx+8]
.text:0000000000003DF4                 xor     edi, edi        ; domainname
.text:0000000000003DF6                 mov     [rsp+58h+var_50], r9
.text:0000000000003DFB                 mov     rbx, [rbx]
.text:0000000000003DFE                 mov     [rsp+58h+var_58], r8
.text:0000000000003E02                 call    _dcgettext
.text:0000000000003E07                 push    r13
.text:0000000000003E09                 push    r12
.text:0000000000003E0B                 push    r15
.text:0000000000003E0D                 push    r14
.text:0000000000003E0F                 mov     r9, [rsp+78h+var_50]
.text:0000000000003E14                 jmp     short loc_3DA3
.text:0000000000003E14 ; ---------------------------------------------------------------------------
.text:0000000000003E16                 align 20h
.text:0000000000003E20
.text:0000000000003E20 def_3AF4:                               ; CODE XREF: version_etc_arn+90↑j
.text:0000000000003E20                 mov     r10, [rbx+40h]  ; jumptable 0000000000003AF4 default case
.text:0000000000003E24                 mov     r9, [rbx+38h]
.text:0000000000003E28                 mov     edx, 5
.text:0000000000003E2D                 mov     rax, [rbx+10h]
.text:0000000000003E31                 mov     r8, [rbx+8]
.text:0000000000003E35                 lea     rsi, aWrittenBySSSSS_3 ; "Written by %s, %s, %s,\n%s, %s, %s, %s,"...
.text:0000000000003E3C                 mov     r13, [rbx+30h]
.text:0000000000003E40                 mov     r12, [rbx+28h]
.text:0000000000003E44                 mov     r15, [rbx+20h]
.text:0000000000003E48                 mov     r14, [rbx+18h]
.text:0000000000003E4C                 mov     [rsp+58h+var_40], r10
.text:0000000000003E51                 mov     [rsp+58h+var_48], r9
.text:0000000000003E56                 mov     [rsp+58h+var_58], rax
.text:0000000000003E5A                 mov     [rsp+58h+var_50], r8
.text:0000000000003E5F                 mov     rbx, [rbx]
.text:0000000000003E62                 jmp     loc_3BF2
.text:0000000000003E62 ; } // starts at 3A50
.text:0000000000003E62 version_etc_arn endp
.text:0000000000003E62
.text:0000000000003E62 ; ---------------------------------------------------------------------------
.text:0000000000003E67                 align 10h
.text:0000000000003E70
.text:0000000000003E70 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E70
.text:0000000000003E70 ; Attributes: info_from_lumina
.text:0000000000003E70
.text:0000000000003E70 ; void __fastcall version_etc_ar(FILE *stream, const char *command_name, const char *package, const char *version, const char *const *authors)
.text:0000000000003E70                 public version_etc_ar
.text:0000000000003E70 version_etc_ar  proc near
.text:0000000000003E70 ; __unwind {
.text:0000000000003E70                 xor     r9d, r9d
.text:0000000000003E73                 cmp     qword ptr [r8], 0
.text:0000000000003E77                 jz      short loc_3E8B
.text:0000000000003E79                 nop     dword ptr [rax+00000000h]
.text:0000000000003E80
.text:0000000000003E80 loc_3E80:                               ; CODE XREF: version_etc_ar+19↓j
.text:0000000000003E80                 add     r9, 1
.text:0000000000003E84                 cmp     qword ptr [r8+r9*8], 0
.text:0000000000003E89                 jnz     short loc_3E80
.text:0000000000003E8B
.text:0000000000003E8B loc_3E8B:                               ; CODE XREF: version_etc_ar+7↑j
.text:0000000000003E8B                 jmp     version_etc_arn
.text:0000000000003E8B ; } // starts at 3E70
.text:0000000000003E8B version_etc_ar  endp
.text:0000000000003E8B
.text:0000000000003E90
.text:0000000000003E90 ; =============== S U B R O U T I N E =======================================
.text:0000000000003E90
.text:0000000000003E90 ; Attributes: info_from_lumina
.text:0000000000003E90
.text:0000000000003E90 ; void __fastcall version_etc_va(FILE *stream, const char *command_name, const char *package, const char *version, __va_list_tag *authors)
.text:0000000000003E90                 public version_etc_va
.text:0000000000003E90 version_etc_va  proc near
.text:0000000000003E90
.text:0000000000003E90 authtab         = qword ptr -68h
.text:0000000000003E90 var_10          = qword ptr -10h
.text:0000000000003E90
.text:0000000000003E90 ; __unwind {
.text:0000000000003E90                 sub     rsp, 68h
.text:0000000000003E94                 mov     r10, r8
.text:0000000000003E97                 xor     r9d, r9d
.text:0000000000003E9A                 mov     rax, fs:28h
.text:0000000000003EA3                 mov     [rsp+68h+var_10], rax
.text:0000000000003EA8                 xor     eax, eax
.text:0000000000003EAA                 mov     r8, rsp
.text:0000000000003EAD                 nop     dword ptr [rax]
.text:0000000000003EB0
.text:0000000000003EB0 loc_3EB0:                               ; CODE XREF: version_etc_va+49↓j
.text:0000000000003EB0                 mov     eax, [r10]
.text:0000000000003EB3                 cmp     eax, 2Fh ; '/'
.text:0000000000003EB6                 ja      short loc_3EFA
.text:0000000000003EB8                 mov     r11d, eax
.text:0000000000003EBB                 add     r11, [r10+10h]
.text:0000000000003EBF                 add     eax, 8
.text:0000000000003EC2                 mov     [r10], eax
.text:0000000000003EC5
.text:0000000000003EC5 loc_3EC5:                               ; CODE XREF: version_etc_va+76↓j
.text:0000000000003EC5                 mov     rax, [r11]
.text:0000000000003EC8                 test    rax, rax
.text:0000000000003ECB                 mov     [r8+r9*8], rax
.text:0000000000003ECF                 jz      short loc_3EDB
.text:0000000000003ED1                 add     r9, 1
.text:0000000000003ED5                 cmp     r9, 0Ah
.text:0000000000003ED9                 jnz     short loc_3EB0
.text:0000000000003EDB
.text:0000000000003EDB loc_3EDB:                               ; CODE XREF: version_etc_va+3F↑j
.text:0000000000003EDB                 call    version_etc_arn
.text:0000000000003EE0                 mov     rax, [rsp+68h+var_10]
.text:0000000000003EE5                 xor     rax, fs:28h
.text:0000000000003EEE                 jnz     short loc_3EF5
.text:0000000000003EF0                 add     rsp, 68h
.text:0000000000003EF4                 retn
.text:0000000000003EF5 ; ---------------------------------------------------------------------------
.text:0000000000003EF5
.text:0000000000003EF5 loc_3EF5:                               ; CODE XREF: version_etc_va+5E↑j
.text:0000000000003EF5                 call    ___stack_chk_fail
.text:0000000000003EFA ; ---------------------------------------------------------------------------
.text:0000000000003EFA
.text:0000000000003EFA loc_3EFA:                               ; CODE XREF: version_etc_va+26↑j
.text:0000000000003EFA                 mov     r11, [r10+8]
.text:0000000000003EFE                 lea     rax, [r11+8]
.text:0000000000003F02                 mov     [r10+8], rax
.text:0000000000003F06                 jmp     short loc_3EC5
.text:0000000000003F06 ; } // starts at 3E90
.text:0000000000003F06 version_etc_va  endp
.text:0000000000003F06
.text:0000000000003F06 ; ---------------------------------------------------------------------------
.text:0000000000003F08                 align 10h
.text:0000000000003F10
.text:0000000000003F10 ; =============== S U B R O U T I N E =======================================
.text:0000000000003F10
.text:0000000000003F10 ; Attributes: info_from_lumina
.text:0000000000003F10
.text:0000000000003F10 ; void version_etc(FILE *stream, const char *command_name, const char *package, const char *version, ...)
.text:0000000000003F10                 public version_etc
.text:0000000000003F10 version_etc     proc near               ; CODE XREF: main+F4↑p
.text:0000000000003F10
.text:0000000000003F10 var_C0          = dword ptr -0C0h
.text:0000000000003F10 var_B8          = qword ptr -0B8h
.text:0000000000003F10 var_B0          = qword ptr -0B0h
.text:0000000000003F10 var_A8          = byte ptr -0A8h
.text:0000000000003F10 var_50          = qword ptr -50h
.text:0000000000003F10 var_48          = byte ptr -48h
.text:0000000000003F10 var_28          = qword ptr -28h
.text:0000000000003F10 var_20          = qword ptr -20h
.text:0000000000003F10 arg_0           = byte ptr  8
.text:0000000000003F10
.text:0000000000003F10 ; __unwind {
.text:0000000000003F10                 push    rbp
.text:0000000000003F11                 push    rbx
.text:0000000000003F12                 mov     r10d, 20h ; ' '
.text:0000000000003F18                 xor     r11d, r11d
.text:0000000000003F1B                 sub     rsp, 0B8h
.text:0000000000003F22                 mov     rax, fs:28h
.text:0000000000003F2B                 mov     [rsp+0C8h+var_50], rax
.text:0000000000003F30                 xor     eax, eax
.text:0000000000003F32                 lea     rax, [rsp+0C8h+arg_0]
.text:0000000000003F3A                 mov     [rsp+0C8h+var_28], r8
.text:0000000000003F42                 lea     rbx, [rsp+0C8h+arg_0]
.text:0000000000003F4A                 lea     r8, [rsp+0C8h+var_A8]
.text:0000000000003F4F                 mov     [rsp+0C8h+var_20], r9
.text:0000000000003F57                 mov     [rsp+0C8h+var_C0], 20h ; ' '
.text:0000000000003F5F                 mov     [rsp+0C8h+var_B8], rax
.text:0000000000003F64                 lea     rax, [rsp+0C8h+var_48]
.text:0000000000003F6C                 xor     r9d, r9d
.text:0000000000003F6F                 mov     [rsp+0C8h+var_B0], rax
.text:0000000000003F74                 mov     rbp, rax
.text:0000000000003F77                 nop     word ptr [rax+rax+00000000h]
.text:0000000000003F80
.text:0000000000003F80 loc_3F80:                               ; CODE XREF: version_etc+9A↓j
.text:0000000000003F80                 cmp     r10d, 2Fh ; '/'
.text:0000000000003F84                 ja      short loc_3FDC
.text:0000000000003F86                 mov     eax, r10d
.text:0000000000003F89                 mov     r11d, 1
.text:0000000000003F8F                 add     r10d, 8
.text:0000000000003F93                 add     rax, rbp
.text:0000000000003F96
.text:0000000000003F96 loc_3F96:                               ; CODE XREF: version_etc+D3↓j
.text:0000000000003F96                 mov     rax, [rax]
.text:0000000000003F99                 test    rax, rax
.text:0000000000003F9C                 mov     [r8+r9*8], rax
.text:0000000000003FA0                 jz      short loc_3FAC
.text:0000000000003FA2                 add     r9, 1
.text:0000000000003FA6                 cmp     r9, 0Ah
.text:0000000000003FAA                 jnz     short loc_3F80
.text:0000000000003FAC
.text:0000000000003FAC loc_3FAC:                               ; CODE XREF: version_etc+90↑j
.text:0000000000003FAC                 test    r11b, r11b
.text:0000000000003FAF                 jnz     short loc_3FD5
.text:0000000000003FB1
.text:0000000000003FB1 loc_3FB1:                               ; CODE XREF: version_etc+CA↓j
.text:0000000000003FB1                 call    version_etc_arn
.text:0000000000003FB6                 mov     rax, [rsp+0C8h+var_50]
.text:0000000000003FBB                 xor     rax, fs:28h
.text:0000000000003FC4                 jnz     short loc_3FD0
.text:0000000000003FC6                 add     rsp, 0B8h
.text:0000000000003FCD                 pop     rbx
.text:0000000000003FCE                 pop     rbp
.text:0000000000003FCF                 retn
.text:0000000000003FD0 ; ---------------------------------------------------------------------------
.text:0000000000003FD0
.text:0000000000003FD0 loc_3FD0:                               ; CODE XREF: version_etc+B4↑j
.text:0000000000003FD0                 call    ___stack_chk_fail
.text:0000000000003FD5 ; ---------------------------------------------------------------------------
.text:0000000000003FD5
.text:0000000000003FD5 loc_3FD5:                               ; CODE XREF: version_etc+9F↑j
.text:0000000000003FD5                 mov     [rsp+0C8h+var_C0], r10d
.text:0000000000003FDA                 jmp     short loc_3FB1
.text:0000000000003FDC ; ---------------------------------------------------------------------------
.text:0000000000003FDC
.text:0000000000003FDC loc_3FDC:                               ; CODE XREF: version_etc+74↑j
.text:0000000000003FDC                 mov     rax, rbx
.text:0000000000003FDF                 add     rbx, 8
.text:0000000000003FE3                 jmp     short loc_3F96
.text:0000000000003FE3 ; } // starts at 3F10
.text:0000000000003FE3 version_etc     endp
.text:0000000000003FE3
.text:0000000000003FE3 ; ---------------------------------------------------------------------------
.text:0000000000003FE5                 align 10h
.text:0000000000003FF0
.text:0000000000003FF0 ; =============== S U B R O U T I N E =======================================
.text:0000000000003FF0
.text:0000000000003FF0 ; Attributes: info_from_lumina
.text:0000000000003FF0
.text:0000000000003FF0 ; void __cdecl emit_bug_reporting_address()
.text:0000000000003FF0                 public emit_bug_reporting_address
.text:0000000000003FF0 emit_bug_reporting_address proc near
.text:0000000000003FF0 ; __unwind {
.text:0000000000003FF0                 push    rbx
.text:0000000000003FF1                 lea     rsi, aReportBugsToS ; "\nReport bugs to: %s\n"
.text:0000000000003FF8                 mov     edx, 5          ; category
.text:0000000000003FFD                 xor     edi, edi        ; domainname
.text:0000000000003FFF                 call    _dcgettext
.text:0000000000004004                 lea     rdx, aBugCoreutilsGn ; "bug-coreutils@gnu.org"
.text:000000000000400B                 mov     rsi, rax
.text:000000000000400E                 mov     edi, 1
.text:0000000000004013                 xor     eax, eax
.text:0000000000004015                 call    ___printf_chk
.text:000000000000401A                 lea     rsi, aSHomePageS ; "%s home page: <%s>\n"
.text:0000000000004021                 mov     edx, 5          ; category
.text:0000000000004026                 xor     edi, edi        ; domainname
.text:0000000000004028                 call    _dcgettext
.text:000000000000402D                 lea     rcx, aHttpsWwwGnuOrg ; "https://www.gnu.org/software/coreutils/"
.text:0000000000004034                 lea     rdx, unk_4701
.text:000000000000403B                 mov     rsi, rax
.text:000000000000403E                 mov     edi, 1
.text:0000000000004043                 xor     eax, eax
.text:0000000000004045                 call    ___printf_chk
.text:000000000000404A                 mov     rbx, cs:stdout@@GLIBC_2_2_5
.text:0000000000004051                 lea     rsi, aGeneralHelpUsi ; "General help using GNU software: <https"...
.text:0000000000004058                 xor     edi, edi        ; domainname
.text:000000000000405A                 mov     edx, 5          ; category
.text:000000000000405F                 call    _dcgettext
.text:0000000000004064                 mov     rsi, rbx        ; stream
.text:0000000000004067                 mov     rdi, rax        ; s
.text:000000000000406A                 pop     rbx
.text:000000000000406B                 jmp     _fputs_unlocked
.text:000000000000406B ; } // starts at 3FF0
.text:000000000000406B emit_bug_reporting_address endp
.text:000000000000406B
.text:0000000000004070
.text:0000000000004070 ; =============== S U B R O U T I N E =======================================
.text:0000000000004070
.text:0000000000004070
.text:0000000000004070                 public xmalloc
.text:0000000000004070 xmalloc         proc near               ; CODE XREF: quotearg_n_options+127↑p
.text:0000000000004070                                         ; quotearg_alloc_mem+81↑p ...
.text:0000000000004070 ; __unwind {
.text:0000000000004070                 push    rbx
.text:0000000000004071                 mov     rbx, rdi
.text:0000000000004074                 call    _malloc
.text:0000000000004079                 test    rax, rax
.text:000000000000407C                 jnz     short loc_4083
.text:000000000000407E                 test    rbx, rbx
.text:0000000000004081                 jnz     short loc_4085
.text:0000000000004083
.text:0000000000004083 loc_4083:                               ; CODE XREF: xmalloc+C↑j
.text:0000000000004083                 pop     rbx
.text:0000000000004084                 retn
.text:0000000000004085 ; ---------------------------------------------------------------------------
.text:0000000000004085
.text:0000000000004085 loc_4085:                               ; CODE XREF: xmalloc+11↑j
.text:0000000000004085                 call    xalloc_die
.text:0000000000004085 ; } // starts at 4070
.text:0000000000004085 xmalloc         endp
.text:0000000000004085
.text:0000000000004085 ; ---------------------------------------------------------------------------
.text:000000000000408A                 align 10h
.text:0000000000004090
.text:0000000000004090 ; =============== S U B R O U T I N E =======================================
.text:0000000000004090
.text:0000000000004090 ; Attributes: info_from_lumina
.text:0000000000004090
.text:0000000000004090 ; void *__fastcall xnmalloc(size_t n, size_t s)
.text:0000000000004090                 public xnmalloc
.text:0000000000004090 xnmalloc        proc near
.text:0000000000004090 ; __unwind {
.text:0000000000004090                 mov     rax, rdi
.text:0000000000004093                 mul     rsi
.text:0000000000004096                 mov     rdi, rax
.text:0000000000004099                 seto    al
.text:000000000000409C                 test    rdi, rdi
.text:000000000000409F                 js      short loc_40AB
.text:00000000000040A1                 movzx   eax, al
.text:00000000000040A4                 test    rax, rax
.text:00000000000040A7                 jnz     short loc_40AB
.text:00000000000040A9                 jmp     short xmalloc
.text:00000000000040AB ; ---------------------------------------------------------------------------
.text:00000000000040AB
.text:00000000000040AB loc_40AB:                               ; CODE XREF: xnmalloc+F↑j
.text:00000000000040AB                                         ; xnmalloc+17↑j
.text:00000000000040AB                 sub     rsp, 8
.text:00000000000040AF                 call    xalloc_die
.text:00000000000040AF ; } // starts at 4090
.text:00000000000040AF xnmalloc        endp
.text:00000000000040AF
.text:00000000000040AF ; ---------------------------------------------------------------------------
.text:00000000000040B4                 align 20h
.text:00000000000040C0
.text:00000000000040C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040C0
.text:00000000000040C0
.text:00000000000040C0                 public xcharalloc
.text:00000000000040C0 xcharalloc      proc near
.text:00000000000040C0 ; __unwind {
.text:00000000000040C0                 jmp     short xmalloc
.text:00000000000040C0 ; } // starts at 40C0
.text:00000000000040C0 xcharalloc      endp
.text:00000000000040C0
.text:00000000000040C0 ; ---------------------------------------------------------------------------
.text:00000000000040C2                 align 10h
.text:00000000000040D0
.text:00000000000040D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000040D0
.text:00000000000040D0 ; Attributes: info_from_lumina
.text:00000000000040D0
.text:00000000000040D0 ; void *__fastcall xrealloc(void *p, size_t n)
.text:00000000000040D0                 public xrealloc
.text:00000000000040D0 xrealloc        proc near               ; CODE XREF: quotearg_n_options+6E↑p
.text:00000000000040D0                                         ; quotearg_n_options+182↑p ...
.text:00000000000040D0 ; __unwind {
.text:00000000000040D0                 test    rsi, rsi
.text:00000000000040D3                 push    rbx
.text:00000000000040D4                 mov     rbx, rsi
.text:00000000000040D7                 jnz     short loc_40DE
.text:00000000000040D9                 test    rdi, rdi
.text:00000000000040DC                 jnz     short loc_40F8
.text:00000000000040DE
.text:00000000000040DE loc_40DE:                               ; CODE XREF: xrealloc+7↑j
.text:00000000000040DE                 mov     rsi, rbx        ; size
.text:00000000000040E1                 call    _realloc
.text:00000000000040E6                 test    rax, rax
.text:00000000000040E9                 jnz     short loc_40F0
.text:00000000000040EB                 test    rbx, rbx
.text:00000000000040EE                 jnz     short loc_4101
.text:00000000000040F0
.text:00000000000040F0 loc_40F0:                               ; CODE XREF: xrealloc+19↑j
.text:00000000000040F0                 pop     rbx
.text:00000000000040F1                 retn
.text:00000000000040F1 ; ---------------------------------------------------------------------------
.text:00000000000040F2                 align 8
.text:00000000000040F8
.text:00000000000040F8 loc_40F8:                               ; CODE XREF: xrealloc+C↑j
.text:00000000000040F8                 call    _free
.text:00000000000040FD                 xor     eax, eax
.text:00000000000040FF                 pop     rbx
.text:0000000000004100                 retn
.text:0000000000004101 ; ---------------------------------------------------------------------------
.text:0000000000004101
.text:0000000000004101 loc_4101:                               ; CODE XREF: xrealloc+1E↑j
.text:0000000000004101                 call    xalloc_die
.text:0000000000004101 ; } // starts at 40D0
.text:0000000000004101 xrealloc        endp
.text:0000000000004101
.text:0000000000004101 ; ---------------------------------------------------------------------------
.text:0000000000004106                 align 10h
.text:0000000000004110
.text:0000000000004110 ; =============== S U B R O U T I N E =======================================
.text:0000000000004110
.text:0000000000004110 ; Attributes: info_from_lumina
.text:0000000000004110
.text:0000000000004110 ; void *__fastcall xnrealloc(void *p, size_t n, size_t s)
.text:0000000000004110                 public xnrealloc
.text:0000000000004110 xnrealloc       proc near
.text:0000000000004110 ; __unwind {
.text:0000000000004110                 mov     rax, rsi
.text:0000000000004113                 mul     rdx
.text:0000000000004116                 mov     rsi, rax
.text:0000000000004119                 seto    al
.text:000000000000411C                 test    rsi, rsi
.text:000000000000411F                 js      short loc_412B
.text:0000000000004121                 movzx   eax, al
.text:0000000000004124                 test    rax, rax
.text:0000000000004127                 jnz     short loc_412B
.text:0000000000004129                 jmp     short xrealloc
.text:000000000000412B ; ---------------------------------------------------------------------------
.text:000000000000412B
.text:000000000000412B loc_412B:                               ; CODE XREF: xnrealloc+F↑j
.text:000000000000412B                                         ; xnrealloc+17↑j
.text:000000000000412B                 sub     rsp, 8
.text:000000000000412F                 call    xalloc_die
.text:000000000000412F ; } // starts at 4110
.text:000000000000412F xnrealloc       endp
.text:000000000000412F
.text:000000000000412F ; ---------------------------------------------------------------------------
.text:0000000000004134                 align 20h
.text:0000000000004140
.text:0000000000004140 ; =============== S U B R O U T I N E =======================================
.text:0000000000004140
.text:0000000000004140 ; Attributes: info_from_lumina
.text:0000000000004140
.text:0000000000004140 ; void *__fastcall x2nrealloc(void *p, size_t *pn, size_t s)
.text:0000000000004140                 public x2nrealloc
.text:0000000000004140 x2nrealloc      proc near
.text:0000000000004140 ; __unwind {
.text:0000000000004140                 test    rdi, rdi
.text:0000000000004143                 mov     r9, rdx
.text:0000000000004146                 mov     rcx, [rsi]
.text:0000000000004149                 jz      short loc_4180
.text:000000000000414B                 xor     edx, edx
.text:000000000000414D                 mov     rax, 5555555555555554h
.text:0000000000004157                 div     r9
.text:000000000000415A                 cmp     rax, rcx
.text:000000000000415D                 jbe     short loc_419B
.text:000000000000415F                 mov     rax, rcx
.text:0000000000004162                 shr     rax, 1
.text:0000000000004165                 lea     rcx, [rax+rcx+1]
.text:000000000000416A
.text:000000000000416A loc_416A:                               ; CODE XREF: x2nrealloc+59↓j
.text:000000000000416A                 mov     [rsi], rcx
.text:000000000000416D                 imul    rcx, r9
.text:0000000000004171                 mov     rsi, rcx
.text:0000000000004174                 jmp     xrealloc
.text:0000000000004174 ; ---------------------------------------------------------------------------
.text:0000000000004179                 align 20h
.text:0000000000004180
.text:0000000000004180 loc_4180:                               ; CODE XREF: x2nrealloc+9↑j
.text:0000000000004180                 test    rcx, rcx
.text:0000000000004183                 jz      short loc_41A8
.text:0000000000004185
.text:0000000000004185 loc_4185:                               ; CODE XREF: x2nrealloc+80↓j
.text:0000000000004185                 mov     rax, rcx
.text:0000000000004188                 mul     r9
.text:000000000000418B                 seto    dl
.text:000000000000418E                 test    rax, rax
.text:0000000000004191                 movzx   edx, dl
.text:0000000000004194                 js      short loc_419B
.text:0000000000004196                 test    rdx, rdx
.text:0000000000004199                 jz      short loc_416A
.text:000000000000419B
.text:000000000000419B loc_419B:                               ; CODE XREF: x2nrealloc+1D↑j
.text:000000000000419B                                         ; x2nrealloc+54↑j
.text:000000000000419B                 sub     rsp, 8
.text:000000000000419F                 call    xalloc_die
.text:000000000000419F ; ---------------------------------------------------------------------------
.text:00000000000041A4                 align 8
.text:00000000000041A8
.text:00000000000041A8 loc_41A8:                               ; CODE XREF: x2nrealloc+43↑j
.text:00000000000041A8                 xor     edx, edx
.text:00000000000041AA                 mov     eax, 80h
.text:00000000000041AF                 xor     r8d, r8d
.text:00000000000041B2                 div     r9
.text:00000000000041B5                 test    rax, rax
.text:00000000000041B8                 setz    r8b
.text:00000000000041BC                 lea     rcx, [r8+rax]
.text:00000000000041C0                 jmp     short loc_4185
.text:00000000000041C0 ; } // starts at 4140
.text:00000000000041C0 x2nrealloc      endp
.text:00000000000041C0
.text:00000000000041C0 ; ---------------------------------------------------------------------------
.text:00000000000041C2                 align 10h
.text:00000000000041D0
.text:00000000000041D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000041D0
.text:00000000000041D0 ; Attributes: info_from_lumina
.text:00000000000041D0
.text:00000000000041D0 ; void *__fastcall x2realloc(void *p, size_t *pn)
.text:00000000000041D0                 public x2realloc
.text:00000000000041D0 x2realloc       proc near
.text:00000000000041D0 ; __unwind {
.text:00000000000041D0                 test    rdi, rdi
.text:00000000000041D3                 mov     rax, [rsi]
.text:00000000000041D6                 jz      short loc_4200
.text:00000000000041D8                 mov     rdx, 5555555555555553h
.text:00000000000041E2                 cmp     rax, rdx
.text:00000000000041E5                 ja      short loc_4211
.text:00000000000041E7                 mov     rdx, rax
.text:00000000000041EA                 shr     rdx, 1
.text:00000000000041ED                 lea     rax, [rdx+rax+1]
.text:00000000000041F2
.text:00000000000041F2 loc_41F2:                               ; CODE XREF: x2realloc+3F↓j
.text:00000000000041F2                 mov     [rsi], rax
.text:00000000000041F5                 mov     rsi, rax
.text:00000000000041F8                 jmp     xrealloc
.text:00000000000041F8 ; ---------------------------------------------------------------------------
.text:00000000000041FD                 align 20h
.text:0000000000004200
.text:0000000000004200 loc_4200:                               ; CODE XREF: x2realloc+6↑j
.text:0000000000004200                 test    rax, rax
.text:0000000000004203                 mov     edx, 80h
.text:0000000000004208                 cmovz   rax, rdx
.text:000000000000420C                 test    rax, rax
.text:000000000000420F                 jns     short loc_41F2
.text:0000000000004211
.text:0000000000004211 loc_4211:                               ; CODE XREF: x2realloc+15↑j
.text:0000000000004211                 sub     rsp, 8
.text:0000000000004215                 call    xalloc_die
.text:0000000000004215 ; } // starts at 41D0
.text:0000000000004215 x2realloc       endp
.text:0000000000004215
.text:0000000000004215 ; ---------------------------------------------------------------------------
.text:000000000000421A                 align 20h
.text:0000000000004220
.text:0000000000004220 ; =============== S U B R O U T I N E =======================================
.text:0000000000004220
.text:0000000000004220
.text:0000000000004220 ; __int64 __fastcall xzalloc(size_t n)
.text:0000000000004220                 public xzalloc
.text:0000000000004220 xzalloc         proc near
.text:0000000000004220 ; __unwind {
.text:0000000000004220                 push    rbx
.text:0000000000004221                 mov     rbx, rdi
.text:0000000000004224                 call    xmalloc
.text:0000000000004229                 mov     rdx, rbx        ; n
.text:000000000000422C                 xor     esi, esi        ; c
.text:000000000000422E                 mov     rdi, rax        ; s
.text:0000000000004231                 pop     rbx
.text:0000000000004232                 jmp     _memset
.text:0000000000004232 ; } // starts at 4220
.text:0000000000004232 xzalloc         endp
.text:0000000000004232
.text:0000000000004232 ; ---------------------------------------------------------------------------
.text:0000000000004237                 align 20h
.text:0000000000004240
.text:0000000000004240 ; =============== S U B R O U T I N E =======================================
.text:0000000000004240
.text:0000000000004240 ; Attributes: info_from_lumina
.text:0000000000004240
.text:0000000000004240 ; void *__fastcall xcalloc(size_t n, size_t s)
.text:0000000000004240                 public xcalloc
.text:0000000000004240 xcalloc         proc near
.text:0000000000004240 ; __unwind {
.text:0000000000004240                 mov     rax, rdi
.text:0000000000004243                 sub     rsp, 8
.text:0000000000004247                 mul     rsi
.text:000000000000424A                 seto    dl
.text:000000000000424D                 test    rax, rax
.text:0000000000004250                 js      short loc_4269
.text:0000000000004252                 movzx   edx, dl
.text:0000000000004255                 test    rdx, rdx
.text:0000000000004258                 jnz     short loc_4269
.text:000000000000425A                 call    _calloc
.text:000000000000425F                 test    rax, rax
.text:0000000000004262                 jz      short loc_4269
.text:0000000000004264                 add     rsp, 8
.text:0000000000004268                 retn
.text:0000000000004269 ; ---------------------------------------------------------------------------
.text:0000000000004269
.text:0000000000004269 loc_4269:                               ; CODE XREF: xcalloc+10↑j
.text:0000000000004269                                         ; xcalloc+18↑j ...
.text:0000000000004269                 call    xalloc_die
.text:0000000000004269 ; } // starts at 4240
.text:0000000000004269 xcalloc         endp
.text:0000000000004269
.text:0000000000004269 ; ---------------------------------------------------------------------------
.text:000000000000426E                 align 10h
.text:0000000000004270
.text:0000000000004270 ; =============== S U B R O U T I N E =======================================
.text:0000000000004270
.text:0000000000004270 ; Attributes: info_from_lumina
.text:0000000000004270
.text:0000000000004270 ; void *__fastcall xmemdup(const void *p, size_t s)
.text:0000000000004270                 public xmemdup
.text:0000000000004270 xmemdup         proc near               ; CODE XREF: clone_quoting_options+28↑p
.text:0000000000004270                                         ; xstrdup+11↓j
.text:0000000000004270 ; __unwind {
.text:0000000000004270                 push    rbp
.text:0000000000004271                 push    rbx
.text:0000000000004272                 mov     rbp, rdi
.text:0000000000004275                 mov     rdi, rsi
.text:0000000000004278                 mov     rbx, rsi
.text:000000000000427B                 sub     rsp, 8
.text:000000000000427F                 call    xmalloc
.text:0000000000004284                 add     rsp, 8
.text:0000000000004288                 mov     rdx, rbx        ; n
.text:000000000000428B                 mov     rsi, rbp        ; src
.text:000000000000428E                 pop     rbx
.text:000000000000428F                 pop     rbp
.text:0000000000004290                 mov     rdi, rax        ; dest
.text:0000000000004293                 jmp     _memcpy
.text:0000000000004293 ; } // starts at 4270
.text:0000000000004293 xmemdup         endp
.text:0000000000004293
.text:0000000000004293 ; ---------------------------------------------------------------------------
.text:0000000000004298                 align 20h
.text:00000000000042A0
.text:00000000000042A0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042A0
.text:00000000000042A0
.text:00000000000042A0 ; __int64 __fastcall xstrdup(void *src)
.text:00000000000042A0                 public xstrdup
.text:00000000000042A0 xstrdup         proc near
.text:00000000000042A0 ; __unwind {
.text:00000000000042A0                 push    rbx
.text:00000000000042A1                 mov     rbx, rdi
.text:00000000000042A4                 call    _strlen
.text:00000000000042A9                 mov     rdi, rbx        ; src
.text:00000000000042AC                 lea     rsi, [rax+1]    ; n
.text:00000000000042B0                 pop     rbx
.text:00000000000042B1                 jmp     short xmemdup
.text:00000000000042B1 ; } // starts at 42A0
.text:00000000000042B1 xstrdup         endp
.text:00000000000042B1
.text:00000000000042B1 ; ---------------------------------------------------------------------------
.text:00000000000042B3                 align 20h
.text:00000000000042C0
.text:00000000000042C0 ; =============== S U B R O U T I N E =======================================
.text:00000000000042C0
.text:00000000000042C0 ; Attributes: noreturn info_from_lumina
.text:00000000000042C0
.text:00000000000042C0 ; void __cdecl xalloc_die()
.text:00000000000042C0                 public xalloc_die
.text:00000000000042C0 xalloc_die      proc near               ; CODE XREF: quotearg_n_options:loc_3296↑p
.text:00000000000042C0                                         ; xmalloc:loc_4085↑p ...
.text:00000000000042C0 ; __unwind {
.text:00000000000042C0                 lea     rsi, aMemoryExhauste ; "memory exhausted"
.text:00000000000042C7                 sub     rsp, 8
.text:00000000000042CB                 mov     edx, 5          ; category
.text:00000000000042D0                 xor     edi, edi        ; domainname
.text:00000000000042D2                 call    _dcgettext
.text:00000000000042D7                 mov     edi, cs:exit_failure ; status
.text:00000000000042DD                 lea     rdx, format+4   ; format
.text:00000000000042E4                 mov     rcx, rax
.text:00000000000042E7                 xor     esi, esi        ; errnum
.text:00000000000042E9                 xor     eax, eax
.text:00000000000042EB                 call    _error
.text:00000000000042F0                 call    _abort
.text:00000000000042F0 ; } // starts at 42C0
.text:00000000000042F0 xalloc_die      endp
.text:00000000000042F0
.text:00000000000042F0 ; ---------------------------------------------------------------------------
.text:00000000000042F5                 align 20h
.text:0000000000004300
.text:0000000000004300 ; =============== S U B R O U T I N E =======================================
.text:0000000000004300
.text:0000000000004300 ; Attributes: info_from_lumina
.text:0000000000004300
.text:0000000000004300 ; size_t __fastcall rpl_mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
.text:0000000000004300                 public rpl_mbrtowc
.text:0000000000004300 rpl_mbrtowc     proc near               ; CODE XREF: quotearg_buffer_restyled+956↑p
.text:0000000000004300
.text:0000000000004300 pwc             = dword ptr -34h
.text:0000000000004300 var_30          = qword ptr -30h
.text:0000000000004300
.text:0000000000004300 ; __unwind {
.text:0000000000004300                 push    r13
.text:0000000000004302                 push    r12
.text:0000000000004304                 mov     r13, rsi
.text:0000000000004307                 push    rbp
.text:0000000000004308                 push    rbx
.text:0000000000004309                 mov     rbx, rdi
.text:000000000000430C                 mov     r12, rdx
.text:000000000000430F                 sub     rsp, 18h
.text:0000000000004313                 mov     rax, fs:28h
.text:000000000000431C                 mov     [rsp+38h+var_30], rax
.text:0000000000004321                 xor     eax, eax
.text:0000000000004323                 lea     rax, [rsp+38h+pwc]
.text:0000000000004328                 test    rdi, rdi
.text:000000000000432B                 cmovz   rbx, rax
.text:000000000000432F                 mov     rdi, rbx        ; pwc
.text:0000000000004332                 call    _mbrtowc
.text:0000000000004337                 cmp     rax, 0FFFFFFFFFFFFFFFDh
.text:000000000000433B                 mov     rbp, rax
.text:000000000000433E                 jbe     short loc_4360
.text:0000000000004340                 test    r12, r12
.text:0000000000004343                 jz      short loc_4360
.text:0000000000004345                 xor     edi, edi
.text:0000000000004347                 call    hard_locale
.text:000000000000434C                 test    al, al
.text:000000000000434E                 jnz     short loc_4360
.text:0000000000004350                 movzx   eax, byte ptr [r13+0]
.text:0000000000004355                 mov     ebp, 1
.text:000000000000435A                 mov     [rbx], eax
.text:000000000000435C                 nop     dword ptr [rax+00h]
.text:0000000000004360
.text:0000000000004360 loc_4360:                               ; CODE XREF: rpl_mbrtowc+3E↑j
.text:0000000000004360                                         ; rpl_mbrtowc+43↑j ...
.text:0000000000004360                 mov     rdx, [rsp+38h+var_30]
.text:0000000000004365                 xor     rdx, fs:28h
.text:000000000000436E                 mov     rax, rbp
.text:0000000000004371                 jnz     short loc_437E
.text:0000000000004373                 add     rsp, 18h
.text:0000000000004377                 pop     rbx
.text:0000000000004378                 pop     rbp
.text:0000000000004379                 pop     r12
.text:000000000000437B                 pop     r13
.text:000000000000437D                 retn
.text:000000000000437E ; ---------------------------------------------------------------------------
.text:000000000000437E
.text:000000000000437E loc_437E:                               ; CODE XREF: rpl_mbrtowc+71↑j
.text:000000000000437E                 call    ___stack_chk_fail
.text:000000000000437E ; } // starts at 4300
.text:000000000000437E rpl_mbrtowc     endp
.text:000000000000437E
.text:000000000000437E ; ---------------------------------------------------------------------------
.text:0000000000004383                 align 10h
.text:0000000000004390
.text:0000000000004390 ; =============== S U B R O U T I N E =======================================
.text:0000000000004390
.text:0000000000004390 ; Attributes: info_from_lumina
.text:0000000000004390
.text:0000000000004390 ; int __fastcall close_stream(FILE *stream)
.text:0000000000004390                 public close_stream
.text:0000000000004390 close_stream    proc near               ; CODE XREF: close_stdout+D↑p
.text:0000000000004390                                         ; close_stdout+33↑p
.text:0000000000004390 ; __unwind {
.text:0000000000004390                 push    r12
.text:0000000000004392                 push    rbp
.text:0000000000004393                 mov     rbp, rdi
.text:0000000000004396                 push    rbx
.text:0000000000004397                 call    ___fpending
.text:000000000000439C                 mov     ebx, [rbp+0]
.text:000000000000439F                 mov     rdi, rbp        ; stream
.text:00000000000043A2                 mov     r12, rax
.text:00000000000043A5                 call    rpl_fclose
.text:00000000000043AA                 and     ebx, 20h
.text:00000000000043AD                 test    ebx, ebx
.text:00000000000043AF                 jnz     short loc_43C8
.text:00000000000043B1                 test    eax, eax
.text:00000000000043B3                 jz      short loc_43BF
.text:00000000000043B5                 test    r12, r12
.text:00000000000043B8                 mov     eax, 0FFFFFFFFh
.text:00000000000043BD                 jz      short loc_43F8
.text:00000000000043BF
.text:00000000000043BF loc_43BF:                               ; CODE XREF: close_stream+23↑j
.text:00000000000043BF                 pop     rbx
.text:00000000000043C0                 pop     rbp
.text:00000000000043C1                 pop     r12
.text:00000000000043C3                 retn
.text:00000000000043C3 ; ---------------------------------------------------------------------------
.text:00000000000043C4                 align 8
.text:00000000000043C8
.text:00000000000043C8 loc_43C8:                               ; CODE XREF: close_stream+1F↑j
.text:00000000000043C8                 test    eax, eax
.text:00000000000043CA                 jnz     short loc_43E8
.text:00000000000043CC                 call    ___errno_location
.text:00000000000043D1                 mov     dword ptr [rax], 0
.text:00000000000043D7                 mov     eax, 0FFFFFFFFh
.text:00000000000043DC                 pop     rbx
.text:00000000000043DD                 pop     rbp
.text:00000000000043DE                 pop     r12
.text:00000000000043E0                 retn
.text:00000000000043E0 ; ---------------------------------------------------------------------------
.text:00000000000043E1                 align 8
.text:00000000000043E8
.text:00000000000043E8 loc_43E8:                               ; CODE XREF: close_stream+3A↑j
.text:00000000000043E8                 pop     rbx
.text:00000000000043E9                 mov     eax, 0FFFFFFFFh
.text:00000000000043EE                 pop     rbp
.text:00000000000043EF                 pop     r12
.text:00000000000043F1                 retn
.text:00000000000043F1 ; ---------------------------------------------------------------------------
.text:00000000000043F2                 align 8
.text:00000000000043F8
.text:00000000000043F8 loc_43F8:                               ; CODE XREF: close_stream+2D↑j
.text:00000000000043F8                 call    ___errno_location
.text:00000000000043FD                 cmp     dword ptr [rax], 9
.text:0000000000004400                 pop     rbx
.text:0000000000004401                 pop     rbp
.text:0000000000004402                 pop     r12
.text:0000000000004404                 setnz   al
.text:0000000000004407                 movzx   eax, al
.text:000000000000440A                 neg     eax
.text:000000000000440C                 retn
.text:000000000000440C ; } // starts at 4390
.text:000000000000440C close_stream    endp
.text:000000000000440C
.text:000000000000440C ; ---------------------------------------------------------------------------
.text:000000000000440D                 align 10h
.text:0000000000004410
.text:0000000000004410 ; =============== S U B R O U T I N E =======================================
.text:0000000000004410
.text:0000000000004410
.text:0000000000004410                 public hard_locale
.text:0000000000004410 hard_locale     proc near               ; CODE XREF: rpl_mbrtowc+47↑p
.text:0000000000004410 ; __unwind {
.text:0000000000004410                 sub     rsp, 8
.text:0000000000004414                 xor     esi, esi        ; locale
.text:0000000000004416                 call    _setlocale
.text:000000000000441B                 mov     rdx, rax
.text:000000000000441E                 mov     eax, 1
.text:0000000000004423                 test    rdx, rdx
.text:0000000000004426                 jz      short loc_4445
.text:0000000000004428                 lea     rdi, aC         ; "C"
.text:000000000000442F                 mov     ecx, 2
.text:0000000000004434                 mov     rsi, rdx
.text:0000000000004437                 repe cmpsb
.text:0000000000004439                 setnbe  cl
.text:000000000000443C                 sbb     cl, 0
.text:000000000000443F                 xor     eax, eax
.text:0000000000004441                 test    cl, cl
.text:0000000000004443                 jnz     short loc_4450
.text:0000000000004445
.text:0000000000004445 loc_4445:                               ; CODE XREF: hard_locale+16↑j
.text:0000000000004445                 add     rsp, 8
.text:0000000000004449                 retn
.text:0000000000004449 ; ---------------------------------------------------------------------------
.text:000000000000444A                 align 10h
.text:0000000000004450
.text:0000000000004450 loc_4450:                               ; CODE XREF: hard_locale+33↑j
.text:0000000000004450                 lea     rdi, aPosix     ; "POSIX"
.text:0000000000004457                 mov     ecx, 6
.text:000000000000445C                 mov     rsi, rdx
.text:000000000000445F                 repe cmpsb
.text:0000000000004461                 setnbe  al
.text:0000000000004464                 sbb     al, 0
.text:0000000000004466                 test    al, al
.text:0000000000004468                 setnz   al
.text:000000000000446B                 add     rsp, 8
.text:000000000000446F                 retn
.text:000000000000446F ; } // starts at 4410
.text:000000000000446F hard_locale     endp
.text:000000000000446F
.text:0000000000004470
.text:0000000000004470 ; =============== S U B R O U T I N E =======================================
.text:0000000000004470
.text:0000000000004470
.text:0000000000004470                 public locale_charset
.text:0000000000004470 locale_charset  proc near               ; CODE XREF: gettext_quote+B↑p
.text:0000000000004470 ; __unwind {
.text:0000000000004470                 sub     rsp, 8
.text:0000000000004474                 mov     edi, 0Eh        ; item
.text:0000000000004479                 call    _nl_langinfo
.text:000000000000447E                 test    rax, rax
.text:0000000000004481                 jz      short loc_44A0
.text:0000000000004483                 cmp     byte ptr [rax], 0
.text:0000000000004486                 lea     rdx, aAscii     ; "ASCII"
.text:000000000000448D                 cmovz   rax, rdx
.text:0000000000004491                 add     rsp, 8
.text:0000000000004495                 retn
.text:0000000000004495 ; ---------------------------------------------------------------------------
.text:0000000000004496                 align 20h
.text:00000000000044A0
.text:00000000000044A0 loc_44A0:                               ; CODE XREF: locale_charset+11↑j
.text:00000000000044A0                 lea     rax, aAscii     ; "ASCII"
.text:00000000000044A7                 add     rsp, 8
.text:00000000000044AB                 retn
.text:00000000000044AB ; } // starts at 4470
.text:00000000000044AB locale_charset  endp
.text:00000000000044AB
.text:00000000000044AB ; ---------------------------------------------------------------------------
.text:00000000000044AC                 align 10h
.text:00000000000044B0
.text:00000000000044B0 ; =============== S U B R O U T I N E =======================================
.text:00000000000044B0
.text:00000000000044B0 ; Attributes: info_from_lumina
.text:00000000000044B0
.text:00000000000044B0 ; int __fastcall rpl_fclose(FILE *fp)
.text:00000000000044B0                 public rpl_fclose
.text:00000000000044B0 rpl_fclose      proc near               ; CODE XREF: close_stream+15↑p
.text:00000000000044B0 ; __unwind {
.text:00000000000044B0                 push    r12
.text:00000000000044B2                 push    rbp
.text:00000000000044B3                 push    rbx
.text:00000000000044B4                 mov     rbx, rdi
.text:00000000000044B7                 call    _fileno
.text:00000000000044BC                 test    eax, eax
.text:00000000000044BE                 mov     rdi, rbx        ; fp
.text:00000000000044C1                 js      short loc_4517
.text:00000000000044C3                 call    ___freading
.text:00000000000044C8                 test    eax, eax
.text:00000000000044CA                 jnz     short loc_44F8
.text:00000000000044CC
.text:00000000000044CC loc_44CC:                               ; CODE XREF: rpl_fclose+62↓j
.text:00000000000044CC                 mov     rdi, rbx        ; stream
.text:00000000000044CF                 call    rpl_fflush
.text:00000000000044D4                 test    eax, eax
.text:00000000000044D6                 jz      short loc_4514
.text:00000000000044D8                 call    ___errno_location
.text:00000000000044DD                 mov     r12d, [rax]
.text:00000000000044E0                 mov     rdi, rbx        ; stream
.text:00000000000044E3                 mov     rbp, rax
.text:00000000000044E6                 call    _fclose
.text:00000000000044EB                 test    r12d, r12d
.text:00000000000044EE                 jnz     short loc_4520
.text:00000000000044F0
.text:00000000000044F0 loc_44F0:                               ; CODE XREF: rpl_fclose+79↓j
.text:00000000000044F0                 pop     rbx
.text:00000000000044F1                 pop     rbp
.text:00000000000044F2                 pop     r12
.text:00000000000044F4                 retn
.text:00000000000044F4 ; ---------------------------------------------------------------------------
.text:00000000000044F5                 align 8
.text:00000000000044F8
.text:00000000000044F8 loc_44F8:                               ; CODE XREF: rpl_fclose+1A↑j
.text:00000000000044F8                 mov     rdi, rbx        ; stream
.text:00000000000044FB                 call    _fileno
.text:0000000000004500                 xor     esi, esi        ; offset
.text:0000000000004502                 mov     edx, 1          ; whence
.text:0000000000004507                 mov     edi, eax        ; fd
.text:0000000000004509                 call    _lseek
.text:000000000000450E                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:0000000000004512                 jnz     short loc_44CC
.text:0000000000004514
.text:0000000000004514 loc_4514:                               ; CODE XREF: rpl_fclose+26↑j
.text:0000000000004514                 mov     rdi, rbx        ; stream
.text:0000000000004517
.text:0000000000004517 loc_4517:                               ; CODE XREF: rpl_fclose+11↑j
.text:0000000000004517                 pop     rbx
.text:0000000000004518                 pop     rbp
.text:0000000000004519                 pop     r12
.text:000000000000451B                 jmp     _fclose
.text:0000000000004520 ; ---------------------------------------------------------------------------
.text:0000000000004520
.text:0000000000004520 loc_4520:                               ; CODE XREF: rpl_fclose+3E↑j
.text:0000000000004520                 mov     [rbp+0], r12d
.text:0000000000004524                 mov     eax, 0FFFFFFFFh
.text:0000000000004529                 jmp     short loc_44F0
.text:0000000000004529 ; } // starts at 44B0
.text:0000000000004529 rpl_fclose      endp
.text:0000000000004529
.text:0000000000004529 ; ---------------------------------------------------------------------------
.text:000000000000452B                 align 10h
.text:0000000000004530
.text:0000000000004530 ; =============== S U B R O U T I N E =======================================
.text:0000000000004530
.text:0000000000004530 ; Attributes: info_from_lumina
.text:0000000000004530
.text:0000000000004530 ; int __fastcall rpl_fflush(FILE *stream)
.text:0000000000004530                 public rpl_fflush
.text:0000000000004530 rpl_fflush      proc near               ; CODE XREF: rpl_fclose+1F↑p
.text:0000000000004530 ; __unwind {
.text:0000000000004530                 test    rdi, rdi
.text:0000000000004533                 push    rbx
.text:0000000000004534                 mov     rbx, rdi
.text:0000000000004537                 jz      short loc_454A
.text:0000000000004539                 call    ___freading
.text:000000000000453E                 test    eax, eax
.text:0000000000004540                 jz      short loc_454A
.text:0000000000004542                 test    dword ptr [rbx], 100h
.text:0000000000004548                 jnz     short loc_4558
.text:000000000000454A
.text:000000000000454A loc_454A:                               ; CODE XREF: rpl_fflush+7↑j
.text:000000000000454A                                         ; rpl_fflush+10↑j
.text:000000000000454A                 mov     rdi, rbx        ; stream
.text:000000000000454D                 pop     rbx
.text:000000000000454E                 jmp     _fflush
.text:000000000000454E ; ---------------------------------------------------------------------------
.text:0000000000004553                 align 8
.text:0000000000004558
.text:0000000000004558 loc_4558:                               ; CODE XREF: rpl_fflush+18↑j
.text:0000000000004558                 mov     rdi, rbx
.text:000000000000455B                 mov     edx, 1
.text:0000000000004560                 xor     esi, esi
.text:0000000000004562                 call    rpl_fseeko
.text:0000000000004567                 mov     rdi, rbx        ; stream
.text:000000000000456A                 pop     rbx
.text:000000000000456B                 jmp     _fflush
.text:000000000000456B ; } // starts at 4530
.text:000000000000456B rpl_fflush      endp
.text:000000000000456B
.text:0000000000004570
.text:0000000000004570 ; =============== S U B R O U T I N E =======================================
.text:0000000000004570
.text:0000000000004570 ; Attributes: info_from_lumina
.text:0000000000004570
.text:0000000000004570 ; int __fastcall rpl_fseeko(FILE *fp, off_t offset, int whence)
.text:0000000000004570                 public rpl_fseeko
.text:0000000000004570 rpl_fseeko      proc near               ; CODE XREF: rpl_fflush+32↑p
.text:0000000000004570 ; __unwind {
.text:0000000000004570                 mov     rax, [rdi+8]
.text:0000000000004574                 cmp     [rdi+10h], rax
.text:0000000000004578                 jz      short loc_4580
.text:000000000000457A
.text:000000000000457A loc_457A:                               ; CODE XREF: rpl_fseeko+18↓j
.text:000000000000457A                                         ; rpl_fseeko+1F↓j
.text:000000000000457A                 jmp     _fseeko
.text:000000000000457A ; ---------------------------------------------------------------------------
.text:000000000000457F                 align 20h
.text:0000000000004580
.text:0000000000004580 loc_4580:                               ; CODE XREF: rpl_fseeko+8↑j
.text:0000000000004580                 mov     rax, [rdi+20h]
.text:0000000000004584                 cmp     [rdi+28h], rax
.text:0000000000004588                 jnz     short loc_457A
.text:000000000000458A                 cmp     qword ptr [rdi+48h], 0
.text:000000000000458F                 jnz     short loc_457A
.text:0000000000004591                 push    r12
.text:0000000000004593                 push    rbp
.text:0000000000004594                 mov     r12d, edx
.text:0000000000004597                 push    rbx
.text:0000000000004598                 mov     rbp, rsi
.text:000000000000459B                 mov     rbx, rdi
.text:000000000000459E                 call    _fileno
.text:00000000000045A3                 mov     edx, r12d       ; whence
.text:00000000000045A6                 mov     rsi, rbp        ; offset
.text:00000000000045A9                 mov     edi, eax        ; fd
.text:00000000000045AB                 call    _lseek
.text:00000000000045B0                 cmp     rax, 0FFFFFFFFFFFFFFFFh
.text:00000000000045B4                 jz      short loc_45C2
.text:00000000000045B6                 and     dword ptr [rbx], 0FFFFFFEFh
.text:00000000000045B9                 mov     [rbx+90h], rax
.text:00000000000045C0                 xor     eax, eax
.text:00000000000045C2
.text:00000000000045C2 loc_45C2:                               ; CODE XREF: rpl_fseeko+44↑j
.text:00000000000045C2                 pop     rbx
.text:00000000000045C3                 pop     rbp
.text:00000000000045C4                 pop     r12
.text:00000000000045C6                 retn
.text:00000000000045C6 ; } // starts at 4570
.text:00000000000045C6 rpl_fseeko      endp
.text:00000000000045C6
.text:00000000000045C6 ; ---------------------------------------------------------------------------
.text:00000000000045C7                 align 10h
.text:00000000000045D0
.text:00000000000045D0 ; =============== S U B R O U T I N E =======================================
.text:00000000000045D0
.text:00000000000045D0 ; Attributes: info_from_lumina
.text:00000000000045D0
.text:00000000000045D0 ; void _libc_csu_init(void)
.text:00000000000045D0                 public __libc_csu_init
.text:00000000000045D0 __libc_csu_init proc near               ; DATA XREF: start+16↑o
.text:00000000000045D0 ; __unwind {
.text:00000000000045D0                 push    r15
.text:00000000000045D2                 push    r14
.text:00000000000045D4                 mov     r15, rdx
.text:00000000000045D7                 push    r13
.text:00000000000045D9                 push    r12
.text:00000000000045DB                 lea     r12, __frame_dummy_init_array_entry
.text:00000000000045E2                 push    rbp
.text:00000000000045E3                 lea     rbp, __do_global_dtors_aux_fini_array_entry
.text:00000000000045EA                 push    rbx
.text:00000000000045EB                 mov     r13d, edi
.text:00000000000045EE                 mov     r14, rsi
.text:00000000000045F1                 sub     rbp, r12
.text:00000000000045F4                 sub     rsp, 8
.text:00000000000045F8                 sar     rbp, 3
.text:00000000000045FC                 call    _init_proc
.text:0000000000004601                 test    rbp, rbp
.text:0000000000004604                 jz      short loc_4626
.text:0000000000004606                 xor     ebx, ebx
.text:0000000000004608                 nop     dword ptr [rax+rax+00000000h]
.text:0000000000004610
.text:0000000000004610 loc_4610:                               ; CODE XREF: __libc_csu_init+54↓j
.text:0000000000004610                 mov     rdx, r15
.text:0000000000004613                 mov     rsi, r14
.text:0000000000004616                 mov     edi, r13d
.text:0000000000004619                 call    ds:(__frame_dummy_init_array_entry - 206B30h)[r12+rbx*8]
.text:000000000000461D                 add     rbx, 1
.text:0000000000004621                 cmp     rbp, rbx
.text:0000000000004624                 jnz     short loc_4610
.text:0000000000004626
.text:0000000000004626 loc_4626:                               ; CODE XREF: __libc_csu_init+34↑j
.text:0000000000004626                 add     rsp, 8
.text:000000000000462A                 pop     rbx
.text:000000000000462B                 pop     rbp
.text:000000000000462C                 pop     r12
.text:000000000000462E                 pop     r13
.text:0000000000004630                 pop     r14
.text:0000000000004632                 pop     r15
.text:0000000000004634                 retn
.text:0000000000004634 ; } // starts at 45D0
.text:0000000000004634 __libc_csu_init endp
.text:0000000000004634
.text:0000000000004634 ; ---------------------------------------------------------------------------
.text:0000000000004635                 align 20h
.text:0000000000004640
.text:0000000000004640 ; =============== S U B R O U T I N E =======================================
.text:0000000000004640
.text:0000000000004640
.text:0000000000004640 ; void _libc_csu_fini(void)
.text:0000000000004640                 public __libc_csu_fini
.text:0000000000004640 __libc_csu_fini proc near               ; DATA XREF: start+F↑o
.text:0000000000004640 ; __unwind {
.text:0000000000004640                 rep retn
.text:0000000000004640 ; } // starts at 4640
.text:0000000000004640 __libc_csu_fini endp
.text:0000000000004640
.text:0000000000004640 ; ---------------------------------------------------------------------------
.text:0000000000004642                 align 10h
.text:0000000000004650
.text:0000000000004650 ; =============== S U B R O U T I N E =======================================
.text:0000000000004650
.text:0000000000004650
.text:0000000000004650 atexit          proc near               ; CODE XREF: main+70↑p
.text:0000000000004650 ; __unwind {
.text:0000000000004650                 mov     rdx, cs:__dso_handle ; lpdso_handle
.text:0000000000004657                 xor     esi, esi        ; obj
.text:0000000000004659                 jmp     ___cxa_atexit
.text:0000000000004659 ; } // starts at 4650
.text:0000000000004659 atexit          endp
.text:0000000000004659
.text:0000000000004659 _text           ends
.text:0000000000004659
LOAD:000000000000465E ; ===========================================================================
LOAD:000000000000465E
LOAD:000000000000465E ; Segment type: Pure code
LOAD:000000000000465E ; Segment permissions: Read/Execute
LOAD:000000000000465E LOAD            segment byte public 'CODE' use64
LOAD:000000000000465E                 assume cs:LOAD
LOAD:000000000000465E                 ;org 465Eh
LOAD:000000000000465E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000465E                 align 20h
LOAD:000000000000465E LOAD            ends
LOAD:000000000000465E
.fini:0000000000004660 ; ===========================================================================
.fini:0000000000004660
.fini:0000000000004660 ; Segment type: Pure code
.fini:0000000000004660 ; Segment permissions: Read/Execute
.fini:0000000000004660 _fini           segment dword public 'CODE' use64
.fini:0000000000004660                 assume cs:_fini
.fini:0000000000004660                 ;org 4660h
.fini:0000000000004660                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:0000000000004660
.fini:0000000000004660 ; =============== S U B R O U T I N E =======================================
.fini:0000000000004660
.fini:0000000000004660
.fini:0000000000004660                 public _term_proc
.fini:0000000000004660 _term_proc      proc near
.fini:0000000000004660                 sub     rsp, 8          ; _fini
.fini:0000000000004664                 add     rsp, 8
.fini:0000000000004668                 retn
.fini:0000000000004668 _term_proc      endp
.fini:0000000000004668
.fini:0000000000004668 _fini           ends
.fini:0000000000004668
LOAD:0000000000004669 ; ===========================================================================
LOAD:0000000000004669
LOAD:0000000000004669 ; Segment type: Pure code
LOAD:0000000000004669 ; Segment permissions: Read/Execute
LOAD:0000000000004669 LOAD            segment byte public 'CODE' use64
LOAD:0000000000004669                 assume cs:LOAD
LOAD:0000000000004669                 ;org 4669h
LOAD:0000000000004669                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:0000000000004669                 align 20h
LOAD:0000000000004669 LOAD            ends
LOAD:0000000000004669
.rodata:0000000000004680 ; ===========================================================================
.rodata:0000000000004680
.rodata:0000000000004680 ; Segment type: Pure data
.rodata:0000000000004680 ; Segment permissions: Read
.rodata:0000000000004680 _rodata         segment align_32 public 'CONST' use64
.rodata:0000000000004680                 assume cs:_rodata
.rodata:0000000000004680                 ;org 4680h
.rodata:0000000000004680                 public _IO_stdin_used
.rodata:0000000000004680 _IO_stdin_used  db    1
.rodata:0000000000004681                 db    0
.rodata:0000000000004682                 db    2
.rodata:0000000000004683                 db    0
.rodata:0000000000004684 aRuncon         db 'runcon',0           ; DATA XREF: main+E8↑o
.rodata:0000000000004684                                         ; usage+134↑o ...
.rodata:000000000000468B asc_468B        db '[',0                ; DATA XREF: usage+140↑o
.rodata:000000000000468D aTestInvocation db 'test invocation',0  ; DATA XREF: usage+167↑o
.rodata:000000000000469D aMultiCallInvoc db 'Multi-call invocation',0
.rodata:000000000000469D                                         ; DATA XREF: usage+197↑o
.rodata:000000000000469D                                         ; usage+28C↑o ...
.rodata:00000000000046B3 aSha224sum      db 'sha224sum',0        ; DATA XREF: usage+1A8↑o
.rodata:00000000000046BD aSha2Utilities  db 'sha2 utilities',0   ; DATA XREF: usage+1B4↑o
.rodata:00000000000046CC aSha256sum      db 'sha256sum',0        ; DATA XREF: usage+147↑o
.rodata:00000000000046D6 aSha384sum      db 'sha384sum',0        ; DATA XREF: usage+173↑o
.rodata:00000000000046E0 aSha512sum      db 'sha512sum',0        ; DATA XREF: usage+18B↑o
.rodata:00000000000046EA ; const char aSOnlineHelpS[]
.rodata:00000000000046EA aSOnlineHelpS   db 0Ah                  ; DATA XREF: usage+1FA↑o
.rodata:00000000000046EA                 db '%s online help: <%s>',0Ah,0
.rodata:0000000000004701 unk_4701        db  47h ; G             ; DATA XREF: main+E1↑o
.rodata:0000000000004701                                         ; usage+216↑o ...
.rodata:0000000000004702                 db  4Eh ; N
.rodata:0000000000004703                 db  55h ; U
.rodata:0000000000004704                 db  20h
.rodata:0000000000004705 ; const char domainname[]
.rodata:0000000000004705 domainname      db 'coreutils',0        ; DATA XREF: main+51↑o
.rodata:0000000000004705                                         ; main+5D↑o ...
.rodata:000000000000470F ; const char s2[]
.rodata:000000000000470F s2              db 'en_',0              ; DATA XREF: usage+23D↑o
.rodata:000000000000470F                                         ; usage+2FE↑o
.rodata:0000000000004713 ; const char aFullDocumentat[]
.rodata:0000000000004713 aFullDocumentat db 'Full documentation <%s%s>',0Ah,0
.rodata:0000000000004713                                         ; DATA XREF: usage:loc_1B19↑o
.rodata:0000000000004713                                         ; usage:loc_1BD6↑o
.rodata:000000000000472E ; const char dirname[]
.rodata:000000000000472E dirname         db '/usr/local/share/locale',0
.rodata:000000000000472E                                         ; DATA XREF: main+4A↑o
.rodata:0000000000004746 ; const char shortopts[]
.rodata:0000000000004746 shortopts       db '+r:t:u:l:c',0       ; DATA XREF: main+89↑o
.rodata:0000000000004746                                         ; .data.rel.ro:0000000000206C68↓o
.rodata:0000000000004751 ; const char aMultipleRoles[]
.rodata:0000000000004751 aMultipleRoles  db 'multiple roles',0   ; DATA XREF: main:loc_173B↑o
.rodata:0000000000004760 ; const char aMultipleTypes[]
.rodata:0000000000004760 aMultipleTypes  db 'multiple types',0   ; DATA XREF: main:loc_1717↑o
.rodata:000000000000476F ; const char aMultipleUsers[]
.rodata:000000000000476F aMultipleUsers  db 'multiple users',0   ; DATA XREF: main:loc_16F3↑o
.rodata:000000000000477E ; const char aMultipleLevelr[]
.rodata:000000000000477E aMultipleLevelr db 'multiple levelranges',0
.rodata:000000000000477E                                         ; DATA XREF: main:loc_175F↑o
.rodata:0000000000004793 aRussellCoker   db 'Russell Coker',0    ; DATA XREF: main+DA↑o
.rodata:00000000000047A1 ; const char aFailedToGetCur[]
.rodata:00000000000047A1 aFailedToGetCur db 'failed to get current context',0
.rodata:00000000000047A1                                         ; DATA XREF: main+1E8↑o
.rodata:00000000000047BF ; const char msgid[]
.rodata:00000000000047BF msgid           db 'no command specified',0
.rodata:00000000000047BF                                         ; DATA XREF: main+1BD↑o
.rodata:00000000000047D4 aRole           db 'role',0             ; DATA XREF: .data.rel.ro:long_options↓o
.rodata:00000000000047D9 aType           db 'type',0             ; DATA XREF: .data.rel.ro:0000000000206B60↓o
.rodata:00000000000047DE aUser           db 'user',0             ; DATA XREF: .data.rel.ro:0000000000206B80↓o
.rodata:00000000000047E3 aRange          db 'range',0            ; DATA XREF: .data.rel.ro:0000000000206BA0↓o
.rodata:00000000000047E9 aCompute        db 'compute',0          ; DATA XREF: .data.rel.ro:0000000000206BC0↓o
.rodata:00000000000047F1 aHelp           db 'help',0             ; DATA XREF: .data.rel.ro:0000000000206BE0↓o
.rodata:00000000000047F6 aVersion        db 'version',0          ; DATA XREF: .data.rel.ro:0000000000206C00↓o
.rodata:00000000000047FE                 align 20h
.rodata:0000000000004800 ; const char aTrySHelpForMor[]
.rodata:0000000000004800 aTrySHelpForMor db 'Try ',27h,'%s --help',27h,' for more information.',0Ah,0
.rodata:0000000000004800                                         ; DATA XREF: usage+2F↑o
.rodata:0000000000004827                 align 8
.rodata:0000000000004828 ; const char aUsageSContextC[]
.rodata:0000000000004828 aUsageSContextC db 'Usage: %s CONTEXT COMMAND [args]',0Ah
.rodata:0000000000004828                                         ; DATA XREF: usage:loc_191D↑o
.rodata:0000000000004828                 db '  or:  %s [ -c ] [-u USER] [-r ROLE] [-t TYPE] [-l RANGE] COMMAND'
.rodata:0000000000004828                 db ' [args]',0Ah,0
.rodata:0000000000004893                 align 8
.rodata:0000000000004898 ; const char aRunAProgramInA[]
.rodata:0000000000004898 aRunAProgramInA db 'Run a program in a different SELinux security context.',0Ah
.rodata:0000000000004898                                         ; DATA XREF: usage+87↑o
.rodata:0000000000004898                 db 'With neither CONTEXT nor COMMAND, print the current security cont'
.rodata:0000000000004898                 db 'ext.',0Ah,0
.rodata:0000000000004916                 align 8
.rodata:0000000000004918 ; const char aMandatoryArgum[]
.rodata:0000000000004918 aMandatoryArgum db 0Ah                  ; DATA XREF: usage+AC↑o
.rodata:0000000000004918                 db 'Mandatory arguments to long options are mandatory for short optio'
.rodata:0000000000004918                 db 'ns too.',0Ah,0
.rodata:0000000000004963                 align 8
.rodata:0000000000004968 ; const char aContextComplet[]
.rodata:0000000000004968 aContextComplet db '  CONTEXT            Complete security context',0Ah
.rodata:0000000000004968                                         ; DATA XREF: usage+D1↑o
.rodata:0000000000004968                 db '  -c, --compute      compute process transition context before mo'
.rodata:0000000000004968                 db 'difying',0Ah
.rodata:0000000000004968                 db '  -t, --type=TYPE    type (for same role as parent)',0Ah
.rodata:0000000000004968                 db '  -u, --user=USER    user identity',0Ah
.rodata:0000000000004968                 db '  -r, --role=ROLE    role',0Ah
.rodata:0000000000004968                 db '  -l, --range=RANGE  levelrange',0Ah
.rodata:0000000000004968                 db 0Ah,0
.rodata:0000000000004A73                 align 8
.rodata:0000000000004A78 ; const char aHelpDisplayThi[]
.rodata:0000000000004A78 aHelpDisplayThi db '      --help     display this help and exit',0Ah,0
.rodata:0000000000004A78                                         ; DATA XREF: usage+F6↑o
.rodata:0000000000004AA5                 align 8
.rodata:0000000000004AA8 ; const char aVersionOutputV[]
.rodata:0000000000004AA8 aVersionOutputV db '      --version  output version information and exit',0Ah,0
.rodata:0000000000004AA8                                         ; DATA XREF: usage+11B↑o
.rodata:0000000000004ADE                 align 20h
.rodata:0000000000004AE0 aHttpsWwwGnuOrg db 'https://www.gnu.org/software/coreutils/',0
.rodata:0000000000004AE0                                         ; DATA XREF: usage+20F↑o
.rodata:0000000000004AE0                                         ; usage+273↑o ...
.rodata:0000000000004B08 ; const char aReportAnyTrans[]
.rodata:0000000000004B08 aReportAnyTrans db 'Report any translation bugs to <https://translationproject.org/te'
.rodata:0000000000004B08                                         ; DATA XREF: usage+367↑o
.rodata:0000000000004B08                 db 'am/>',0Ah,0
.rodata:0000000000004B4F                 align 10h
.rodata:0000000000004B50 ; const char aOrAvailableLoc[]
.rodata:0000000000004B50 aOrAvailableLoc db 'or available locally via: info ',27h,'(coreutils) %s%s',27h,0Ah,0
.rodata:0000000000004B50                                         ; DATA XREF: usage:loc_1B5E↑o
.rodata:0000000000004B83                 align 8
.rodata:0000000000004B88 aYouMustSpecify db 'you must specify -c, -t, -u, -l, -r, or context',0
.rodata:0000000000004B88                                         ; DATA XREF: main+2EA↑o
.rodata:0000000000004BB8 ; const char aSMayBeUsedOnly[]
.rodata:0000000000004BB8 aSMayBeUsedOnly db '%s may be used only on a SELinux kernel',0
.rodata:0000000000004BB8                                         ; DATA XREF: main+21C↑o
.rodata:0000000000004BE0 a831            db '8.31',0             ; DATA XREF: .data:Version↓o
.rodata:0000000000004BE5 ; const char aWriteError[]
.rodata:0000000000004BE5 aWriteError     db 'write error',0      ; DATA XREF: close_stdout:loc_1CB3↑o
.rodata:0000000000004BF1 ; const char format[]
.rodata:0000000000004BF1 format          db '%s: %s',0           ; DATA XREF: close_stdout+6C↑o
.rodata:0000000000004BF1                                         ; close_stdout+8F↑o ...
.rodata:0000000000004BF8 aANullArgv0WasP db 'A NULL argv[0] was passed through an exec system call.',0Ah,0
.rodata:0000000000004BF8                                         ; DATA XREF: set_program_name+84↑o
.rodata:0000000000004C30 aLibs           db '/.libs/',0          ; DATA XREF: set_program_name+2C↑o
.rodata:0000000000004C38 aLt             db 'lt-',0              ; DATA XREF: set_program_name+44↑o
.rodata:0000000000004C3C unk_4C3C        db 0E2h                 ; DATA XREF: gettext_quote+CE↑o
.rodata:0000000000004C3D                 db  80h
.rodata:0000000000004C3E                 db  98h
.rodata:0000000000004C3F                 db    0
.rodata:0000000000004C40 unk_4C40        db 0E2h                 ; DATA XREF: gettext_quote+D5↑o
.rodata:0000000000004C41                 db  80h
.rodata:0000000000004C42                 db  99h
.rodata:0000000000004C43                 db    0
.rodata:0000000000004C44 unk_4C44        db 0A1h                 ; DATA XREF: gettext_quote+74↑o
.rodata:0000000000004C45                 db    7
.rodata:0000000000004C46                 db  65h ; e
.rodata:0000000000004C47                 db    0
.rodata:0000000000004C48 unk_4C48        db 0A1h                 ; DATA XREF: gettext_quote+7B↑o
.rodata:0000000000004C49                 db 0AFh
.rodata:0000000000004C4A                 db    0
.rodata:0000000000004C4B unk_4C4B        db  22h ; "             ; DATA XREF: gettext_quote:loc_1DE0↑o
.rodata:0000000000004C4B                                         ; quotearg_buffer_restyled:loc_2B9B↑o ...
.rodata:0000000000004C4C                 db    0
.rodata:0000000000004C4D ; const char asc_4C4D[2]
.rodata:0000000000004C4D asc_4C4D        db 27h,0                ; DATA XREF: gettext_quote+27↑o
.rodata:0000000000004C4D                                         ; quotearg_buffer_restyled:loc_1F63↑o ...
.rodata:0000000000004C4F ; const char asc_4C4F[2]
.rodata:0000000000004C4F asc_4C4F        db '`',0                ; DATA XREF: quotearg_buffer_restyled+D9B↑o
.rodata:0000000000004C4F                                         ; quotearg_buffer_restyled+DB6↑o
.rodata:0000000000004C51 aLiteral        db 'literal',0          ; DATA XREF: .data.rel.ro:quoting_style_args↓o
.rodata:0000000000004C59 aShell          db 'shell',0            ; DATA XREF: .data.rel.ro:0000000000206C48↓o
.rodata:0000000000004C5F aShellAlways    db 'shell-always',0     ; DATA XREF: .data.rel.ro:0000000000206C50↓o
.rodata:0000000000004C6C aShellEscape    db 'shell-escape',0     ; DATA XREF: .data.rel.ro:0000000000206C58↓o
.rodata:0000000000004C6C                                         ; .data.rel.ro:0000000000206C78↓o
.rodata:0000000000004C79 aShellEscapeAlw db 'shell-escape-always',0
.rodata:0000000000004C79                                         ; DATA XREF: .data.rel.ro:0000000000206C60↓o
.rodata:0000000000004C8D aCMaybe         db 'c-maybe',0          ; DATA XREF: .data.rel.ro:0000000000206C70↓o
.rodata:0000000000004C95 aClocale        db 'clocale',0          ; DATA XREF: .data.rel.ro:0000000000206C88↓o
.rodata:0000000000004C9D                 align 20h
.rodata:0000000000004CA0 jpt_1F41        dd offset loc_2CEA - 4CA0h
.rodata:0000000000004CA0                                         ; DATA XREF: quotearg_buffer_restyled+80↑o
.rodata:0000000000004CA0                                         ; quotearg_buffer_restyled+8A↑r
.rodata:0000000000004CA0                 dd offset loc_1F43 - 4CA0h ; jump table for switch statement
.rodata:0000000000004CA0                 dd offset loc_2F18 - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2D24 - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2B14 - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2B70 - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2BC5 - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2C0A - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2C44 - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2C44 - 4CA0h
.rodata:0000000000004CA0                 dd offset loc_2C44 - 4CA0h
.rodata:0000000000004CCC jpt_209E        dd offset loc_22C0 - 4CCCh, offset def_209E - 4CCCh, offset def_209E - 4CCCh
.rodata:0000000000004CCC                                         ; DATA XREF: quotearg_buffer_restyled+1DD↑o
.rodata:0000000000004CCC                                         ; quotearg_buffer_restyled+1E7↑r
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset def_209E - 4CCCh, offset def_209E - 4CCCh ; jump table for switch statement
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset loc_2300 - 4CCCh, offset loc_2208 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_21C8 - 4CCCh, offset loc_2390 - 4CCCh, offset loc_2380 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2370 - 4CCCh, offset loc_2360 - 4CCCh, offset def_209E - 4CCCh
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset def_209E - 4CCCh, offset def_209E - 4CCCh
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset def_209E - 4CCCh, offset def_209E - 4CCCh
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset def_209E - 4CCCh, offset def_209E - 4CCCh
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset def_209E - 4CCCh, offset def_209E - 4CCCh
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset def_209E - 4CCCh, offset def_209E - 4CCCh
.rodata:0000000000004CCC                 dd offset def_209E - 4CCCh, offset def_209E - 4CCCh, offset loc_2350 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2340 - 4CCCh, offset loc_2340 - 4CCCh, offset loc_2310 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2340 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_2340 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_21A3 - 4CCCh, offset loc_2340 - 4CCCh, offset loc_2340 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2340 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_2340 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2340 - 4CCCh, offset loc_2340 - 4CCCh, offset loc_2340 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2173 - 4CCCh, offset def_209E - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_2340 - 4CCCh, offset loc_2218 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_2340 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2340 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh, offset loc_22E8 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_20A3 - 4CCCh, offset loc_2340 - 4CCCh, offset loc_20A3 - 4CCCh
.rodata:0000000000004CCC                 dd offset loc_2310 - 4CCCh
.rodata:0000000000004EC8 jpt_242A        dd offset loc_2490 - 4EC8h, offset def_242A - 4EC8h, offset def_242A - 4EC8h
.rodata:0000000000004EC8                                         ; DATA XREF: quotearg_buffer_restyled+569↑o
.rodata:0000000000004EC8                                         ; quotearg_buffer_restyled+573↑r
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset def_242A - 4EC8h, offset def_242A - 4EC8h ; jump table for switch statement
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset loc_2480 - 4EC8h, offset loc_25D0 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_25B8 - 4EC8h, offset loc_2468 - 4EC8h, offset loc_25A8 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2450 - 4EC8h, offset loc_2590 - 4EC8h, offset def_242A - 4EC8h
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset def_242A - 4EC8h, offset def_242A - 4EC8h
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset def_242A - 4EC8h, offset def_242A - 4EC8h
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset def_242A - 4EC8h, offset def_242A - 4EC8h
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset def_242A - 4EC8h, offset def_242A - 4EC8h
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset def_242A - 4EC8h, offset def_242A - 4EC8h
.rodata:0000000000004EC8                 dd offset def_242A - 4EC8h, offset def_242A - 4EC8h, offset loc_2578 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2560 - 4EC8h, offset loc_2560 - 4EC8h, offset loc_2548 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2560 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2560 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_21A0 - 4EC8h, offset loc_2560 - 4EC8h, offset loc_2560 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2560 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2560 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2560 - 4EC8h, offset loc_2560 - 4EC8h, offset loc_2560 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2170 - 4EC8h, offset def_242A - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2560 - 4EC8h, offset loc_2430 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2560 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2560 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h, offset loc_2530 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_20A0 - 4EC8h, offset loc_2560 - 4EC8h, offset loc_20A0 - 4EC8h
.rodata:0000000000004EC8                 dd offset loc_2548 - 4EC8h
.rodata:00000000000050C4                 align 20h
.rodata:00000000000050E0                 public quoting_style_vals
.rodata:00000000000050E0 quoting_style_vals db    0
.rodata:00000000000050E1                 db    0
.rodata:00000000000050E2                 db    0
.rodata:00000000000050E3                 db    0
.rodata:00000000000050E4                 db    1
.rodata:00000000000050E5                 db    0
.rodata:00000000000050E6                 db    0
.rodata:00000000000050E7                 db    0
.rodata:00000000000050E8                 db    2
.rodata:00000000000050E9                 db    0
.rodata:00000000000050EA                 db    0
.rodata:00000000000050EB                 db    0
.rodata:00000000000050EC                 db    3
.rodata:00000000000050ED                 db    0
.rodata:00000000000050EE                 db    0
.rodata:00000000000050EF                 db    0
.rodata:00000000000050F0                 db    4
.rodata:00000000000050F1                 db    0
.rodata:00000000000050F2                 db    0
.rodata:00000000000050F3                 db    0
.rodata:00000000000050F4                 db    5
.rodata:00000000000050F5                 db    0
.rodata:00000000000050F6                 db    0
.rodata:00000000000050F7                 db    0
.rodata:00000000000050F8                 db    6
.rodata:00000000000050F9                 db    0
.rodata:00000000000050FA                 db    0
.rodata:00000000000050FB                 db    0
.rodata:00000000000050FC                 db    7
.rodata:00000000000050FD                 db    0
.rodata:00000000000050FE                 db    0
.rodata:00000000000050FF                 db    0
.rodata:0000000000005100                 db    8
.rodata:0000000000005101                 db    0
.rodata:0000000000005102                 db    0
.rodata:0000000000005103                 db    0
.rodata:0000000000005104                 db    9
.rodata:0000000000005105                 db    0
.rodata:0000000000005106                 db    0
.rodata:0000000000005107                 db    0
.rodata:0000000000005108 aSSS            db '%s (%s) %s',0Ah,0   ; DATA XREF: version_etc_arn+23↑o
.rodata:0000000000005114 aSS_0           db '%s %s',0Ah,0        ; DATA XREF: version_etc_arn+13E↑o
.rodata:000000000000511B ; const char aC_0[]
.rodata:000000000000511B aC_0            db '(C)',0              ; DATA XREF: version_etc_arn:loc_3A8C↑o
.rodata:000000000000511F ; const char aWrittenByS[]
.rodata:000000000000511F aWrittenByS     db 'Written by %s.',0Ah,0
.rodata:000000000000511F                                         ; DATA XREF: version_etc_arn+1BB↑o
.rodata:000000000000512F ; const char aWrittenBySAndS[]
.rodata:000000000000512F aWrittenBySAndS db 'Written by %s and %s.',0Ah,0
.rodata:000000000000512F                                         ; DATA XREF: version_etc_arn+1FC↑o
.rodata:0000000000005146 ; const char aWrittenBySSAnd[]
.rodata:0000000000005146 aWrittenBySSAnd db 'Written by %s, %s, and %s.',0Ah,0
.rodata:0000000000005146                                         ; DATA XREF: version_etc_arn+248↑o
.rodata:0000000000005162 ; const char aReportBugsToS[]
.rodata:0000000000005162 aReportBugsToS  db 0Ah                  ; DATA XREF: emit_bug_reporting_address+1↑o
.rodata:0000000000005162                 db 'Report bugs to: %s',0Ah,0
.rodata:0000000000005177 aBugCoreutilsGn db 'bug-coreutils@gnu.org',0
.rodata:0000000000005177                                         ; DATA XREF: emit_bug_reporting_address+14↑o
.rodata:000000000000518D ; const char aSHomePageS[]
.rodata:000000000000518D aSHomePageS     db '%s home page: <%s>',0Ah,0
.rodata:000000000000518D                                         ; DATA XREF: emit_bug_reporting_address+2A↑o
.rodata:00000000000051A1                 align 8
.rodata:00000000000051A8 ; const char aLicenseGplv3Gn[]
.rodata:00000000000051A8 aLicenseGplv3Gn db 0Ah                  ; DATA XREF: version_etc_arn+6E↑o
.rodata:00000000000051A8                 db 'License GPLv3+: GNU GPL version 3 or later <https://gnu.org/licen'
.rodata:00000000000051A8                 db 'ses/gpl.html>.',0Ah
.rodata:00000000000051A8                 db 'This is free software: you are free to change and redistribute it'
.rodata:00000000000051A8                 db '.',0Ah
.rodata:00000000000051A8                 db 'There is NO WARRANTY, to the extent permitted by law.',0Ah
.rodata:00000000000051A8                 db 0Ah,0
.rodata:0000000000005274                 align 8
.rodata:0000000000005278 ; const char aWrittenBySSSAn[]
.rodata:0000000000005278 aWrittenBySSSAn db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005278                                         ; DATA XREF: version_etc_arn:loc_3CE0↑o
.rodata:0000000000005278                 db 'and %s.',0Ah,0
.rodata:0000000000005298 ; const char aWrittenBySSSSA[]
.rodata:0000000000005298 aWrittenBySSSSA db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005298                                         ; DATA XREF: version_etc_arn+2EC↑o
.rodata:0000000000005298                 db '%s, and %s.',0Ah,0
.rodata:00000000000052BC                 align 20h
.rodata:00000000000052C0 ; const char aWrittenBySSSSS_1[]
.rodata:00000000000052C0 aWrittenBySSSSS_1 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000052C0                                         ; DATA XREF: version_etc_arn+320↑o
.rodata:00000000000052C0                 db '%s, %s, and %s.',0Ah,0
.rodata:00000000000052E8 ; const char aWrittenBySSSSS_2[]
.rodata:00000000000052E8 aWrittenBySSSSS_2 db 'Written by %s, %s, %s,',0Ah
.rodata:00000000000052E8                                         ; DATA XREF: version_etc_arn+388↑o
.rodata:00000000000052E8                 db '%s, %s, %s, and %s.',0Ah,0
.rodata:0000000000005314                 align 8
.rodata:0000000000005318 ; const char aWrittenBySSSSS[]
.rodata:0000000000005318 aWrittenBySSSSS db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005318                                         ; DATA XREF: version_etc_arn+B8↑o
.rodata:0000000000005318                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005318                 db 'and %s.',0Ah,0
.rodata:0000000000005348 ; const char aWrittenBySSSSS_0[]
.rodata:0000000000005348 aWrittenBySSSSS_0 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005348                                         ; DATA XREF: version_etc_arn+168↑o
.rodata:0000000000005348                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005348                 db '%s, and %s.',0Ah,0
.rodata:000000000000537C                 align 20h
.rodata:0000000000005380 aWrittenBySSSSS_3 db 'Written by %s, %s, %s,',0Ah
.rodata:0000000000005380                                         ; DATA XREF: version_etc_arn+3E5↑o
.rodata:0000000000005380                 db '%s, %s, %s, %s,',0Ah
.rodata:0000000000005380                 db '%s, %s, and others.',0Ah,0
.rodata:00000000000053BC                 align 20h
.rodata:00000000000053C0 ; const char aGeneralHelpUsi[]
.rodata:00000000000053C0 aGeneralHelpUsi db 'General help using GNU software: <https://www.gnu.org/gethelp/>',0Ah
.rodata:00000000000053C0                                         ; DATA XREF: emit_bug_reporting_address+61↑o
.rodata:00000000000053C0                 db 0
.rodata:0000000000005401                 align 8
.rodata:0000000000005408 jpt_3AF4        dd offset loc_3B76 - 5408h
.rodata:0000000000005408                                         ; DATA XREF: version_etc_arn+96↑o
.rodata:0000000000005408                                         ; version_etc_arn+9D↑r
.rodata:0000000000005408                 dd offset loc_3C08 - 5408h ; jump table for switch statement
.rodata:0000000000005408                 dd offset loc_3C48 - 5408h
.rodata:0000000000005408                 dd offset loc_3C90 - 5408h
.rodata:0000000000005408                 dd offset loc_3CE0 - 5408h
.rodata:0000000000005408                 dd offset loc_3D38 - 5408h
.rodata:0000000000005408                 dd offset loc_3D68 - 5408h
.rodata:0000000000005408                 dd offset loc_3DD0 - 5408h
.rodata:0000000000005408                 dd offset loc_3B00 - 5408h
.rodata:0000000000005408                 dd offset loc_3BB0 - 5408h
.rodata:0000000000005430                 align 20h
.rodata:0000000000005440                 public version_etc_copyright
.rodata:0000000000005440 version_etc_copyright db 'Copyright %s %d Free Software Foundation, Inc.',0
.rodata:0000000000005440                                         ; DATA XREF: version_etc_arn+4F↑o
.rodata:000000000000546F ; const char aMemoryExhauste[]
.rodata:000000000000546F aMemoryExhauste db 'memory exhausted',0 ; DATA XREF: xalloc_die↑o
.rodata:0000000000005480 aC              db 'C',0                ; DATA XREF: hard_locale+18↑o
.rodata:0000000000005482 aPosix          db 'POSIX',0            ; DATA XREF: hard_locale:loc_4450↑o
.rodata:0000000000005488 aAscii          db 'ASCII',0            ; DATA XREF: locale_charset+16↑o
.rodata:0000000000005488                                         ; locale_charset:loc_44A0↑o
.rodata:0000000000005488 _rodata         ends
.rodata:0000000000005488
LOAD:000000000000548E ; ===========================================================================
LOAD:000000000000548E
LOAD:000000000000548E ; Segment type: Pure code
LOAD:000000000000548E ; Segment permissions: Read/Execute
LOAD:000000000000548E LOAD            segment byte public 'CODE' use64
LOAD:000000000000548E                 assume cs:LOAD
LOAD:000000000000548E                 ;org 548Eh
LOAD:000000000000548E                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000000000000548E                 align 10h
LOAD:000000000000548E LOAD            ends
LOAD:000000000000548E
.eh_frame_hdr:0000000000005490 ; ===========================================================================
.eh_frame_hdr:0000000000005490
.eh_frame_hdr:0000000000005490 ; Segment type: Pure data
.eh_frame_hdr:0000000000005490 ; Segment permissions: Read
.eh_frame_hdr:0000000000005490 _eh_frame_hdr   segment dword public 'CONST' use64
.eh_frame_hdr:0000000000005490                 assume cs:_eh_frame_hdr
.eh_frame_hdr:0000000000005490                 ;org 5490h
.eh_frame_hdr:0000000000005490 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:00000000000001A0↑o
.eh_frame_hdr:0000000000005491                 db  1Bh
.eh_frame_hdr:0000000000005492                 db    3
.eh_frame_hdr:0000000000005493                 db  3Bh ; ;
.eh_frame_hdr:0000000000005494                 db  3Ch ; <
.eh_frame_hdr:0000000000005495                 db    2
.eh_frame_hdr:0000000000005496                 db    0
.eh_frame_hdr:0000000000005497                 db    0
.eh_frame_hdr:0000000000005498                 db  46h ; F
.eh_frame_hdr:0000000000005499                 db    0
.eh_frame_hdr:000000000000549A                 db    0
.eh_frame_hdr:000000000000549B                 db    0
.eh_frame_hdr:000000000000549C                 db  90h
.eh_frame_hdr:000000000000549D                 db 0BDh
.eh_frame_hdr:000000000000549E                 db 0FFh
.eh_frame_hdr:000000000000549F                 db 0FFh
.eh_frame_hdr:00000000000054A0                 db  88h
.eh_frame_hdr:00000000000054A1                 db    2
.eh_frame_hdr:00000000000054A2                 db    0
.eh_frame_hdr:00000000000054A3                 db    0
.eh_frame_hdr:00000000000054A4                 db  10h
.eh_frame_hdr:00000000000054A5                 db 0C0h
.eh_frame_hdr:00000000000054A6                 db 0FFh
.eh_frame_hdr:00000000000054A7                 db 0FFh
.eh_frame_hdr:00000000000054A8                 db 0B0h
.eh_frame_hdr:00000000000054A9                 db    2
.eh_frame_hdr:00000000000054AA                 db    0
.eh_frame_hdr:00000000000054AB                 db    0
.eh_frame_hdr:00000000000054AC                 db  20h
.eh_frame_hdr:00000000000054AD                 db 0C0h
.eh_frame_hdr:00000000000054AE                 db 0FFh
.eh_frame_hdr:00000000000054AF                 db 0FFh
.eh_frame_hdr:00000000000054B0                 db 0F4h
.eh_frame_hdr:00000000000054B1                 db    2
.eh_frame_hdr:00000000000054B2                 db    0
.eh_frame_hdr:00000000000054B3                 db    0
.eh_frame_hdr:00000000000054B4                 db  20h
.eh_frame_hdr:00000000000054B5                 db 0C3h
.eh_frame_hdr:00000000000054B6                 db 0FFh
.eh_frame_hdr:00000000000054B7                 db 0FFh
.eh_frame_hdr:00000000000054B8                 db  58h ; X
.eh_frame_hdr:00000000000054B9                 db    2
.eh_frame_hdr:00000000000054BA                 db    0
.eh_frame_hdr:00000000000054BB                 db    0
.eh_frame_hdr:00000000000054BC                 db  30h ; 0
.eh_frame_hdr:00000000000054BD                 db 0C4h
.eh_frame_hdr:00000000000054BE                 db 0FFh
.eh_frame_hdr:00000000000054BF                 db 0FFh
.eh_frame_hdr:00000000000054C0                 db 0C8h
.eh_frame_hdr:00000000000054C1                 db    2
.eh_frame_hdr:00000000000054C2                 db    0
.eh_frame_hdr:00000000000054C3                 db    0
.eh_frame_hdr:00000000000054C4                 db 0C0h
.eh_frame_hdr:00000000000054C5                 db 0C7h
.eh_frame_hdr:00000000000054C6                 db 0FFh
.eh_frame_hdr:00000000000054C7                 db 0FFh
.eh_frame_hdr:00000000000054C8                 db  28h ; (
.eh_frame_hdr:00000000000054C9                 db    3
.eh_frame_hdr:00000000000054CA                 db    0
.eh_frame_hdr:00000000000054CB                 db    0
.eh_frame_hdr:00000000000054CC                 db 0D0h
.eh_frame_hdr:00000000000054CD                 db 0C7h
.eh_frame_hdr:00000000000054CE                 db 0FFh
.eh_frame_hdr:00000000000054CF                 db 0FFh
.eh_frame_hdr:00000000000054D0                 db  3Ch ; <
.eh_frame_hdr:00000000000054D1                 db    3
.eh_frame_hdr:00000000000054D2                 db    0
.eh_frame_hdr:00000000000054D3                 db    0
.eh_frame_hdr:00000000000054D4                 db 0E0h
.eh_frame_hdr:00000000000054D5                 db 0C7h
.eh_frame_hdr:00000000000054D6                 db 0FFh
.eh_frame_hdr:00000000000054D7                 db 0FFh
.eh_frame_hdr:00000000000054D8                 db  50h ; P
.eh_frame_hdr:00000000000054D9                 db    3
.eh_frame_hdr:00000000000054DA                 db    0
.eh_frame_hdr:00000000000054DB                 db    0
.eh_frame_hdr:00000000000054DC                 db  90h
.eh_frame_hdr:00000000000054DD                 db 0C8h
.eh_frame_hdr:00000000000054DE                 db 0FFh
.eh_frame_hdr:00000000000054DF                 db 0FFh
.eh_frame_hdr:00000000000054E0                 db  80h
.eh_frame_hdr:00000000000054E1                 db    3
.eh_frame_hdr:00000000000054E2                 db    0
.eh_frame_hdr:00000000000054E3                 db    0
.eh_frame_hdr:00000000000054E4                 db  30h ; 0
.eh_frame_hdr:00000000000054E5                 db 0C9h
.eh_frame_hdr:00000000000054E6                 db 0FFh
.eh_frame_hdr:00000000000054E7                 db 0FFh
.eh_frame_hdr:00000000000054E8                 db 0A0h
.eh_frame_hdr:00000000000054E9                 db    3
.eh_frame_hdr:00000000000054EA                 db    0
.eh_frame_hdr:00000000000054EB                 db    0
.eh_frame_hdr:00000000000054EC                 db  20h
.eh_frame_hdr:00000000000054ED                 db 0CAh
.eh_frame_hdr:00000000000054EE                 db 0FFh
.eh_frame_hdr:00000000000054EF                 db 0FFh
.eh_frame_hdr:00000000000054F0                 db 0E4h
.eh_frame_hdr:00000000000054F1                 db    3
.eh_frame_hdr:00000000000054F2                 db    0
.eh_frame_hdr:00000000000054F3                 db    0
.eh_frame_hdr:00000000000054F4                 db  60h ; `
.eh_frame_hdr:00000000000054F5                 db 0DCh
.eh_frame_hdr:00000000000054F6                 db 0FFh
.eh_frame_hdr:00000000000054F7                 db 0FFh
.eh_frame_hdr:00000000000054F8                 db  5Ch ; \
.eh_frame_hdr:00000000000054F9                 db    4
.eh_frame_hdr:00000000000054FA                 db    0
.eh_frame_hdr:00000000000054FB                 db    0
.eh_frame_hdr:00000000000054FC                 db  10h
.eh_frame_hdr:00000000000054FD                 db 0DEh
.eh_frame_hdr:00000000000054FE                 db 0FFh
.eh_frame_hdr:00000000000054FF                 db 0FFh
.eh_frame_hdr:0000000000005500                 db 0C8h
.eh_frame_hdr:0000000000005501                 db    4
.eh_frame_hdr:0000000000005502                 db    0
.eh_frame_hdr:0000000000005503                 db    0
.eh_frame_hdr:0000000000005504                 db  50h ; P
.eh_frame_hdr:0000000000005505                 db 0DEh
.eh_frame_hdr:0000000000005506                 db 0FFh
.eh_frame_hdr:0000000000005507                 db 0FFh
.eh_frame_hdr:0000000000005508                 db 0F4h
.eh_frame_hdr:0000000000005509                 db    4
.eh_frame_hdr:000000000000550A                 db    0
.eh_frame_hdr:000000000000550B                 db    0
.eh_frame_hdr:000000000000550C                 db  70h ; p
.eh_frame_hdr:000000000000550D                 db 0DEh
.eh_frame_hdr:000000000000550E                 db 0FFh
.eh_frame_hdr:000000000000550F                 db 0FFh
.eh_frame_hdr:0000000000005510                 db    8
.eh_frame_hdr:0000000000005511                 db    5
.eh_frame_hdr:0000000000005512                 db    0
.eh_frame_hdr:0000000000005513                 db    0
.eh_frame_hdr:0000000000005514                 db  90h
.eh_frame_hdr:0000000000005515                 db 0DEh
.eh_frame_hdr:0000000000005516                 db 0FFh
.eh_frame_hdr:0000000000005517                 db 0FFh
.eh_frame_hdr:0000000000005518                 db  1Ch
.eh_frame_hdr:0000000000005519                 db    5
.eh_frame_hdr:000000000000551A                 db    0
.eh_frame_hdr:000000000000551B                 db    0
.eh_frame_hdr:000000000000551C                 db 0D0h
.eh_frame_hdr:000000000000551D                 db 0DEh
.eh_frame_hdr:000000000000551E                 db 0FFh
.eh_frame_hdr:000000000000551F                 db 0FFh
.eh_frame_hdr:0000000000005520                 db  30h ; 0
.eh_frame_hdr:0000000000005521                 db    5
.eh_frame_hdr:0000000000005522                 db    0
.eh_frame_hdr:0000000000005523                 db    0
.eh_frame_hdr:0000000000005524                 db 0F0h
.eh_frame_hdr:0000000000005525                 db 0DEh
.eh_frame_hdr:0000000000005526                 db 0FFh
.eh_frame_hdr:0000000000005527                 db 0FFh
.eh_frame_hdr:0000000000005528                 db  44h ; D
.eh_frame_hdr:0000000000005529                 db    5
.eh_frame_hdr:000000000000552A                 db    0
.eh_frame_hdr:000000000000552B                 db    0
.eh_frame_hdr:000000000000552C                 db  20h
.eh_frame_hdr:000000000000552D                 db 0DFh
.eh_frame_hdr:000000000000552E                 db 0FFh
.eh_frame_hdr:000000000000552F                 db 0FFh
.eh_frame_hdr:0000000000005530                 db  58h ; X
.eh_frame_hdr:0000000000005531                 db    5
.eh_frame_hdr:0000000000005532                 db    0
.eh_frame_hdr:0000000000005533                 db    0
.eh_frame_hdr:0000000000005534                 db 0A0h
.eh_frame_hdr:0000000000005535                 db 0DFh
.eh_frame_hdr:0000000000005536                 db 0FFh
.eh_frame_hdr:0000000000005537                 db 0FFh
.eh_frame_hdr:0000000000005538                 db 0ACh
.eh_frame_hdr:0000000000005539                 db    5
.eh_frame_hdr:000000000000553A                 db    0
.eh_frame_hdr:000000000000553B                 db    0
.eh_frame_hdr:000000000000553C                 db  90h
.eh_frame_hdr:000000000000553D                 db 0E0h
.eh_frame_hdr:000000000000553E                 db 0FFh
.eh_frame_hdr:000000000000553F                 db 0FFh
.eh_frame_hdr:0000000000005540                 db  18h
.eh_frame_hdr:0000000000005541                 db    6
.eh_frame_hdr:0000000000005542                 db    0
.eh_frame_hdr:0000000000005543                 db    0
.eh_frame_hdr:0000000000005544                 db 0A0h
.eh_frame_hdr:0000000000005545                 db 0E0h
.eh_frame_hdr:0000000000005546                 db 0FFh
.eh_frame_hdr:0000000000005547                 db 0FFh
.eh_frame_hdr:0000000000005548                 db  2Ch ; ,
.eh_frame_hdr:0000000000005549                 db    6
.eh_frame_hdr:000000000000554A                 db    0
.eh_frame_hdr:000000000000554B                 db    0
.eh_frame_hdr:000000000000554C                 db  40h ; @
.eh_frame_hdr:000000000000554D                 db 0E1h
.eh_frame_hdr:000000000000554E                 db 0FFh
.eh_frame_hdr:000000000000554F                 db 0FFh
.eh_frame_hdr:0000000000005550                 db  58h ; X
.eh_frame_hdr:0000000000005551                 db    6
.eh_frame_hdr:0000000000005552                 db    0
.eh_frame_hdr:0000000000005553                 db    0
.eh_frame_hdr:0000000000005554                 db  60h ; `
.eh_frame_hdr:0000000000005555                 db 0E1h
.eh_frame_hdr:0000000000005556                 db 0FFh
.eh_frame_hdr:0000000000005557                 db 0FFh
.eh_frame_hdr:0000000000005558                 db  6Ch ; l
.eh_frame_hdr:0000000000005559                 db    6
.eh_frame_hdr:000000000000555A                 db    0
.eh_frame_hdr:000000000000555B                 db    0
.eh_frame_hdr:000000000000555C                 db  70h ; p
.eh_frame_hdr:000000000000555D                 db 0E1h
.eh_frame_hdr:000000000000555E                 db 0FFh
.eh_frame_hdr:000000000000555F                 db 0FFh
.eh_frame_hdr:0000000000005560                 db  80h
.eh_frame_hdr:0000000000005561                 db    6
.eh_frame_hdr:0000000000005562                 db    0
.eh_frame_hdr:0000000000005563                 db    0
.eh_frame_hdr:0000000000005564                 db  90h
.eh_frame_hdr:0000000000005565                 db 0E1h
.eh_frame_hdr:0000000000005566                 db 0FFh
.eh_frame_hdr:0000000000005567                 db 0FFh
.eh_frame_hdr:0000000000005568                 db  94h
.eh_frame_hdr:0000000000005569                 db    6
.eh_frame_hdr:000000000000556A                 db    0
.eh_frame_hdr:000000000000556B                 db    0
.eh_frame_hdr:000000000000556C                 db 0B0h
.eh_frame_hdr:000000000000556D                 db 0E1h
.eh_frame_hdr:000000000000556E                 db 0FFh
.eh_frame_hdr:000000000000556F                 db 0FFh
.eh_frame_hdr:0000000000005570                 db 0A8h
.eh_frame_hdr:0000000000005571                 db    6
.eh_frame_hdr:0000000000005572                 db    0
.eh_frame_hdr:0000000000005573                 db    0
.eh_frame_hdr:0000000000005574                 db  40h ; @
.eh_frame_hdr:0000000000005575                 db 0E2h
.eh_frame_hdr:0000000000005576                 db 0FFh
.eh_frame_hdr:0000000000005577                 db 0FFh
.eh_frame_hdr:0000000000005578                 db 0C4h
.eh_frame_hdr:0000000000005579                 db    6
.eh_frame_hdr:000000000000557A                 db    0
.eh_frame_hdr:000000000000557B                 db    0
.eh_frame_hdr:000000000000557C                 db 0D0h
.eh_frame_hdr:000000000000557D                 db 0E2h
.eh_frame_hdr:000000000000557E                 db 0FFh
.eh_frame_hdr:000000000000557F                 db 0FFh
.eh_frame_hdr:0000000000005580                 db 0E0h
.eh_frame_hdr:0000000000005581                 db    6
.eh_frame_hdr:0000000000005582                 db    0
.eh_frame_hdr:0000000000005583                 db    0
.eh_frame_hdr:0000000000005584                 db 0E0h
.eh_frame_hdr:0000000000005585                 db 0E2h
.eh_frame_hdr:0000000000005586                 db 0FFh
.eh_frame_hdr:0000000000005587                 db 0FFh
.eh_frame_hdr:0000000000005588                 db 0F4h
.eh_frame_hdr:0000000000005589                 db    6
.eh_frame_hdr:000000000000558A                 db    0
.eh_frame_hdr:000000000000558B                 db    0
.eh_frame_hdr:000000000000558C                 db 0F0h
.eh_frame_hdr:000000000000558D                 db 0E2h
.eh_frame_hdr:000000000000558E                 db 0FFh
.eh_frame_hdr:000000000000558F                 db 0FFh
.eh_frame_hdr:0000000000005590                 db    8
.eh_frame_hdr:0000000000005591                 db    7
.eh_frame_hdr:0000000000005592                 db    0
.eh_frame_hdr:0000000000005593                 db    0
.eh_frame_hdr:0000000000005594                 db  90h
.eh_frame_hdr:0000000000005595                 db 0E3h
.eh_frame_hdr:0000000000005596                 db 0FFh
.eh_frame_hdr:0000000000005597                 db 0FFh
.eh_frame_hdr:0000000000005598                 db  24h ; $
.eh_frame_hdr:0000000000005599                 db    7
.eh_frame_hdr:000000000000559A                 db    0
.eh_frame_hdr:000000000000559B                 db    0
.eh_frame_hdr:000000000000559C                 db 0A0h
.eh_frame_hdr:000000000000559D                 db 0E3h
.eh_frame_hdr:000000000000559E                 db 0FFh
.eh_frame_hdr:000000000000559F                 db 0FFh
.eh_frame_hdr:00000000000055A0                 db  38h ; 8
.eh_frame_hdr:00000000000055A1                 db    7
.eh_frame_hdr:00000000000055A2                 db    0
.eh_frame_hdr:00000000000055A3                 db    0
.eh_frame_hdr:00000000000055A4                 db 0C0h
.eh_frame_hdr:00000000000055A5                 db 0E3h
.eh_frame_hdr:00000000000055A6                 db 0FFh
.eh_frame_hdr:00000000000055A7                 db 0FFh
.eh_frame_hdr:00000000000055A8                 db  4Ch ; L
.eh_frame_hdr:00000000000055A9                 db    7
.eh_frame_hdr:00000000000055AA                 db    0
.eh_frame_hdr:00000000000055AB                 db    0
.eh_frame_hdr:00000000000055AC                 db 0D0h
.eh_frame_hdr:00000000000055AD                 db 0E3h
.eh_frame_hdr:00000000000055AE                 db 0FFh
.eh_frame_hdr:00000000000055AF                 db 0FFh
.eh_frame_hdr:00000000000055B0                 db  60h ; `
.eh_frame_hdr:00000000000055B1                 db    7
.eh_frame_hdr:00000000000055B2                 db    0
.eh_frame_hdr:00000000000055B3                 db    0
.eh_frame_hdr:00000000000055B4                 db  60h ; `
.eh_frame_hdr:00000000000055B5                 db 0E4h
.eh_frame_hdr:00000000000055B6                 db 0FFh
.eh_frame_hdr:00000000000055B7                 db 0FFh
.eh_frame_hdr:00000000000055B8                 db  7Ch ; |
.eh_frame_hdr:00000000000055B9                 db    7
.eh_frame_hdr:00000000000055BA                 db    0
.eh_frame_hdr:00000000000055BB                 db    0
.eh_frame_hdr:00000000000055BC                 db    0
.eh_frame_hdr:00000000000055BD                 db 0E5h
.eh_frame_hdr:00000000000055BE                 db 0FFh
.eh_frame_hdr:00000000000055BF                 db 0FFh
.eh_frame_hdr:00000000000055C0                 db  98h
.eh_frame_hdr:00000000000055C1                 db    7
.eh_frame_hdr:00000000000055C2                 db    0
.eh_frame_hdr:00000000000055C3                 db    0
.eh_frame_hdr:00000000000055C4                 db  10h
.eh_frame_hdr:00000000000055C5                 db 0E5h
.eh_frame_hdr:00000000000055C6                 db 0FFh
.eh_frame_hdr:00000000000055C7                 db 0FFh
.eh_frame_hdr:00000000000055C8                 db 0ACh
.eh_frame_hdr:00000000000055C9                 db    7
.eh_frame_hdr:00000000000055CA                 db    0
.eh_frame_hdr:00000000000055CB                 db    0
.eh_frame_hdr:00000000000055CC                 db  30h ; 0
.eh_frame_hdr:00000000000055CD                 db 0E5h
.eh_frame_hdr:00000000000055CE                 db 0FFh
.eh_frame_hdr:00000000000055CF                 db 0FFh
.eh_frame_hdr:00000000000055D0                 db 0C0h
.eh_frame_hdr:00000000000055D1                 db    7
.eh_frame_hdr:00000000000055D2                 db    0
.eh_frame_hdr:00000000000055D3                 db    0
.eh_frame_hdr:00000000000055D4                 db  50h ; P
.eh_frame_hdr:00000000000055D5                 db 0E5h
.eh_frame_hdr:00000000000055D6                 db 0FFh
.eh_frame_hdr:00000000000055D7                 db 0FFh
.eh_frame_hdr:00000000000055D8                 db 0D4h
.eh_frame_hdr:00000000000055D9                 db    7
.eh_frame_hdr:00000000000055DA                 db    0
.eh_frame_hdr:00000000000055DB                 db    0
.eh_frame_hdr:00000000000055DC                 db  60h ; `
.eh_frame_hdr:00000000000055DD                 db 0E5h
.eh_frame_hdr:00000000000055DE                 db 0FFh
.eh_frame_hdr:00000000000055DF                 db 0FFh
.eh_frame_hdr:00000000000055E0                 db 0E8h
.eh_frame_hdr:00000000000055E1                 db    7
.eh_frame_hdr:00000000000055E2                 db    0
.eh_frame_hdr:00000000000055E3                 db    0
.eh_frame_hdr:00000000000055E4                 db  80h
.eh_frame_hdr:00000000000055E5                 db 0E5h
.eh_frame_hdr:00000000000055E6                 db 0FFh
.eh_frame_hdr:00000000000055E7                 db 0FFh
.eh_frame_hdr:00000000000055E8                 db 0FCh
.eh_frame_hdr:00000000000055E9                 db    7
.eh_frame_hdr:00000000000055EA                 db    0
.eh_frame_hdr:00000000000055EB                 db    0
.eh_frame_hdr:00000000000055EC                 db 0A0h
.eh_frame_hdr:00000000000055ED                 db 0E5h
.eh_frame_hdr:00000000000055EE                 db 0FFh
.eh_frame_hdr:00000000000055EF                 db 0FFh
.eh_frame_hdr:00000000000055F0                 db  10h
.eh_frame_hdr:00000000000055F1                 db    8
.eh_frame_hdr:00000000000055F2                 db    0
.eh_frame_hdr:00000000000055F3                 db    0
.eh_frame_hdr:00000000000055F4                 db 0C0h
.eh_frame_hdr:00000000000055F5                 db 0E5h
.eh_frame_hdr:00000000000055F6                 db 0FFh
.eh_frame_hdr:00000000000055F7                 db 0FFh
.eh_frame_hdr:00000000000055F8                 db  28h ; (
.eh_frame_hdr:00000000000055F9                 db    8
.eh_frame_hdr:00000000000055FA                 db    0
.eh_frame_hdr:00000000000055FB                 db    0
.eh_frame_hdr:00000000000055FC                 db 0E0h
.eh_frame_hdr:00000000000055FD                 db 0E9h
.eh_frame_hdr:00000000000055FE                 db 0FFh
.eh_frame_hdr:00000000000055FF                 db 0FFh
.eh_frame_hdr:0000000000005600                 db  3Ch ; <
.eh_frame_hdr:0000000000005601                 db    9
.eh_frame_hdr:0000000000005602                 db    0
.eh_frame_hdr:0000000000005603                 db    0
.eh_frame_hdr:0000000000005604                 db    0
.eh_frame_hdr:0000000000005605                 db 0EAh
.eh_frame_hdr:0000000000005606                 db 0FFh
.eh_frame_hdr:0000000000005607                 db 0FFh
.eh_frame_hdr:0000000000005608                 db  50h ; P
.eh_frame_hdr:0000000000005609                 db    9
.eh_frame_hdr:000000000000560A                 db    0
.eh_frame_hdr:000000000000560B                 db    0
.eh_frame_hdr:000000000000560C                 db  80h
.eh_frame_hdr:000000000000560D                 db 0EAh
.eh_frame_hdr:000000000000560E                 db 0FFh
.eh_frame_hdr:000000000000560F                 db 0FFh
.eh_frame_hdr:0000000000005610                 db  6Ch ; l
.eh_frame_hdr:0000000000005611                 db    9
.eh_frame_hdr:0000000000005612                 db    0
.eh_frame_hdr:0000000000005613                 db    0
.eh_frame_hdr:0000000000005614                 db  60h ; `
.eh_frame_hdr:0000000000005615                 db 0EBh
.eh_frame_hdr:0000000000005616                 db 0FFh
.eh_frame_hdr:0000000000005617                 db 0FFh
.eh_frame_hdr:0000000000005618                 db  98h
.eh_frame_hdr:0000000000005619                 db    9
.eh_frame_hdr:000000000000561A                 db    0
.eh_frame_hdr:000000000000561B                 db    0
.eh_frame_hdr:000000000000561C                 db 0E0h
.eh_frame_hdr:000000000000561D                 db 0EBh
.eh_frame_hdr:000000000000561E                 db 0FFh
.eh_frame_hdr:000000000000561F                 db 0FFh
.eh_frame_hdr:0000000000005620                 db 0B8h
.eh_frame_hdr:0000000000005621                 db    9
.eh_frame_hdr:0000000000005622                 db    0
.eh_frame_hdr:0000000000005623                 db    0
.eh_frame_hdr:0000000000005624                 db    0
.eh_frame_hdr:0000000000005625                 db 0ECh
.eh_frame_hdr:0000000000005626                 db 0FFh
.eh_frame_hdr:0000000000005627                 db 0FFh
.eh_frame_hdr:0000000000005628                 db 0D4h
.eh_frame_hdr:0000000000005629                 db    9
.eh_frame_hdr:000000000000562A                 db    0
.eh_frame_hdr:000000000000562B                 db    0
.eh_frame_hdr:000000000000562C                 db  30h ; 0
.eh_frame_hdr:000000000000562D                 db 0ECh
.eh_frame_hdr:000000000000562E                 db 0FFh
.eh_frame_hdr:000000000000562F                 db 0FFh
.eh_frame_hdr:0000000000005630                 db 0E8h
.eh_frame_hdr:0000000000005631                 db    9
.eh_frame_hdr:0000000000005632                 db    0
.eh_frame_hdr:0000000000005633                 db    0
.eh_frame_hdr:0000000000005634                 db  40h ; @
.eh_frame_hdr:0000000000005635                 db 0ECh
.eh_frame_hdr:0000000000005636                 db 0FFh
.eh_frame_hdr:0000000000005637                 db 0FFh
.eh_frame_hdr:0000000000005638                 db 0FCh
.eh_frame_hdr:0000000000005639                 db    9
.eh_frame_hdr:000000000000563A                 db    0
.eh_frame_hdr:000000000000563B                 db    0
.eh_frame_hdr:000000000000563C                 db  80h
.eh_frame_hdr:000000000000563D                 db 0ECh
.eh_frame_hdr:000000000000563E                 db 0FFh
.eh_frame_hdr:000000000000563F                 db 0FFh
.eh_frame_hdr:0000000000005640                 db  20h
.eh_frame_hdr:0000000000005641                 db  0Ah
.eh_frame_hdr:0000000000005642                 db    0
.eh_frame_hdr:0000000000005643                 db    0
.eh_frame_hdr:0000000000005644                 db 0B0h
.eh_frame_hdr:0000000000005645                 db 0ECh
.eh_frame_hdr:0000000000005646                 db 0FFh
.eh_frame_hdr:0000000000005647                 db 0FFh
.eh_frame_hdr:0000000000005648                 db  34h ; 4
.eh_frame_hdr:0000000000005649                 db  0Ah
.eh_frame_hdr:000000000000564A                 db    0
.eh_frame_hdr:000000000000564B                 db    0
.eh_frame_hdr:000000000000564C                 db  40h ; @
.eh_frame_hdr:000000000000564D                 db 0EDh
.eh_frame_hdr:000000000000564E                 db 0FFh
.eh_frame_hdr:000000000000564F                 db 0FFh
.eh_frame_hdr:0000000000005650                 db  4Ch ; L
.eh_frame_hdr:0000000000005651                 db  0Ah
.eh_frame_hdr:0000000000005652                 db    0
.eh_frame_hdr:0000000000005653                 db    0
.eh_frame_hdr:0000000000005654                 db  90h
.eh_frame_hdr:0000000000005655                 db 0EDh
.eh_frame_hdr:0000000000005656                 db 0FFh
.eh_frame_hdr:0000000000005657                 db 0FFh
.eh_frame_hdr:0000000000005658                 db  64h ; d
.eh_frame_hdr:0000000000005659                 db  0Ah
.eh_frame_hdr:000000000000565A                 db    0
.eh_frame_hdr:000000000000565B                 db    0
.eh_frame_hdr:000000000000565C                 db 0B0h
.eh_frame_hdr:000000000000565D                 db 0EDh
.eh_frame_hdr:000000000000565E                 db 0FFh
.eh_frame_hdr:000000000000565F                 db 0FFh
.eh_frame_hdr:0000000000005660                 db  80h
.eh_frame_hdr:0000000000005661                 db  0Ah
.eh_frame_hdr:0000000000005662                 db    0
.eh_frame_hdr:0000000000005663                 db    0
.eh_frame_hdr:0000000000005664                 db 0E0h
.eh_frame_hdr:0000000000005665                 db 0EDh
.eh_frame_hdr:0000000000005666                 db 0FFh
.eh_frame_hdr:0000000000005667                 db 0FFh
.eh_frame_hdr:0000000000005668                 db  9Ch
.eh_frame_hdr:0000000000005669                 db  0Ah
.eh_frame_hdr:000000000000566A                 db    0
.eh_frame_hdr:000000000000566B                 db    0
.eh_frame_hdr:000000000000566C                 db  10h
.eh_frame_hdr:000000000000566D                 db 0EEh
.eh_frame_hdr:000000000000566E                 db 0FFh
.eh_frame_hdr:000000000000566F                 db 0FFh
.eh_frame_hdr:0000000000005670                 db 0C4h
.eh_frame_hdr:0000000000005671                 db  0Ah
.eh_frame_hdr:0000000000005672                 db    0
.eh_frame_hdr:0000000000005673                 db    0
.eh_frame_hdr:0000000000005674                 db  30h ; 0
.eh_frame_hdr:0000000000005675                 db 0EEh
.eh_frame_hdr:0000000000005676                 db 0FFh
.eh_frame_hdr:0000000000005677                 db 0FFh
.eh_frame_hdr:0000000000005678                 db 0E0h
.eh_frame_hdr:0000000000005679                 db  0Ah
.eh_frame_hdr:000000000000567A                 db    0
.eh_frame_hdr:000000000000567B                 db    0
.eh_frame_hdr:000000000000567C                 db  70h ; p
.eh_frame_hdr:000000000000567D                 db 0EEh
.eh_frame_hdr:000000000000567E                 db 0FFh
.eh_frame_hdr:000000000000567F                 db 0FFh
.eh_frame_hdr:0000000000005680                 db 0F8h
.eh_frame_hdr:0000000000005681                 db  0Ah
.eh_frame_hdr:0000000000005682                 db    0
.eh_frame_hdr:0000000000005683                 db    0
.eh_frame_hdr:0000000000005684                 db    0
.eh_frame_hdr:0000000000005685                 db 0EFh
.eh_frame_hdr:0000000000005686                 db 0FFh
.eh_frame_hdr:0000000000005687                 db 0FFh
.eh_frame_hdr:0000000000005688                 db  38h ; 8
.eh_frame_hdr:0000000000005689                 db  0Bh
.eh_frame_hdr:000000000000568A                 db    0
.eh_frame_hdr:000000000000568B                 db    0
.eh_frame_hdr:000000000000568C                 db  80h
.eh_frame_hdr:000000000000568D                 db 0EFh
.eh_frame_hdr:000000000000568E                 db 0FFh
.eh_frame_hdr:000000000000568F                 db 0FFh
.eh_frame_hdr:0000000000005690                 db  88h
.eh_frame_hdr:0000000000005691                 db  0Bh
.eh_frame_hdr:0000000000005692                 db    0
.eh_frame_hdr:0000000000005693                 db    0
.eh_frame_hdr:0000000000005694                 db 0E0h
.eh_frame_hdr:0000000000005695                 db 0EFh
.eh_frame_hdr:0000000000005696                 db 0FFh
.eh_frame_hdr:0000000000005697                 db 0FFh
.eh_frame_hdr:0000000000005698                 db 0A8h
.eh_frame_hdr:0000000000005699                 db  0Bh
.eh_frame_hdr:000000000000569A                 db    0
.eh_frame_hdr:000000000000569B                 db    0
.eh_frame_hdr:000000000000569C                 db  20h
.eh_frame_hdr:000000000000569D                 db 0F0h
.eh_frame_hdr:000000000000569E                 db 0FFh
.eh_frame_hdr:000000000000569F                 db 0FFh
.eh_frame_hdr:00000000000056A0                 db 0C8h
.eh_frame_hdr:00000000000056A1                 db  0Bh
.eh_frame_hdr:00000000000056A2                 db    0
.eh_frame_hdr:00000000000056A3                 db    0
.eh_frame_hdr:00000000000056A4                 db 0A0h
.eh_frame_hdr:00000000000056A5                 db 0F0h
.eh_frame_hdr:00000000000056A6                 db 0FFh
.eh_frame_hdr:00000000000056A7                 db 0FFh
.eh_frame_hdr:00000000000056A8                 db    0
.eh_frame_hdr:00000000000056A9                 db  0Ch
.eh_frame_hdr:00000000000056AA                 db    0
.eh_frame_hdr:00000000000056AB                 db    0
.eh_frame_hdr:00000000000056AC                 db 0E0h
.eh_frame_hdr:00000000000056AD                 db 0F0h
.eh_frame_hdr:00000000000056AE                 db 0FFh
.eh_frame_hdr:00000000000056AF                 db 0FFh
.eh_frame_hdr:00000000000056B0                 db  20h
.eh_frame_hdr:00000000000056B1                 db  0Ch
.eh_frame_hdr:00000000000056B2                 db    0
.eh_frame_hdr:00000000000056B3                 db    0
.eh_frame_hdr:00000000000056B4                 db  40h ; @
.eh_frame_hdr:00000000000056B5                 db 0F1h
.eh_frame_hdr:00000000000056B6                 db 0FFh
.eh_frame_hdr:00000000000056B7                 db 0FFh
.eh_frame_hdr:00000000000056B8                 db  50h ; P
.eh_frame_hdr:00000000000056B9                 db  0Ch
.eh_frame_hdr:00000000000056BA                 db    0
.eh_frame_hdr:00000000000056BB                 db    0
.eh_frame_hdr:00000000000056BC                 db 0B0h
.eh_frame_hdr:00000000000056BD                 db 0F1h
.eh_frame_hdr:00000000000056BE                 db 0FFh
.eh_frame_hdr:00000000000056BF                 db 0FFh
.eh_frame_hdr:00000000000056C0                 db  98h
.eh_frame_hdr:00000000000056C1                 db  0Ch
.eh_frame_hdr:00000000000056C2                 db    0
.eh_frame_hdr:00000000000056C3                 db    0
.eh_frame_hdr:00000000000056C4                 db 0C0h
.eh_frame_hdr:00000000000056C5                 db 0F1h
.eh_frame_hdr:00000000000056C6                 db 0FFh
.eh_frame_hdr:00000000000056C7                 db 0FFh
.eh_frame_hdr:00000000000056C8                 db 0B0h
.eh_frame_hdr:00000000000056C9                 db  0Ch
.eh_frame_hdr:00000000000056CA                 db    0
.eh_frame_hdr:00000000000056CB                 db    0
.eh_frame_hdr:00000000000056CB _eh_frame_hdr   ends
.eh_frame_hdr:00000000000056CB
LOAD:00000000000056CC ; ===========================================================================
LOAD:00000000000056CC
LOAD:00000000000056CC ; Segment type: Pure code
LOAD:00000000000056CC ; Segment permissions: Read/Execute
LOAD:00000000000056CC LOAD            segment byte public 'CODE' use64
LOAD:00000000000056CC                 assume cs:LOAD
LOAD:00000000000056CC                 ;org 56CCh
LOAD:00000000000056CC                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00000000000056CC                 align 10h
LOAD:00000000000056CC LOAD            ends
LOAD:00000000000056CC
.eh_frame:00000000000056D0 ; ===========================================================================
.eh_frame:00000000000056D0
.eh_frame:00000000000056D0 ; Segment type: Pure data
.eh_frame:00000000000056D0 ; Segment permissions: Read
.eh_frame:00000000000056D0 _eh_frame       segment qword public 'CONST' use64
.eh_frame:00000000000056D0                 assume cs:_eh_frame
.eh_frame:00000000000056D0                 ;org 56D0h
.eh_frame:00000000000056D0                 db  14h
.eh_frame:00000000000056D1                 db    0
.eh_frame:00000000000056D2                 db    0
.eh_frame:00000000000056D3                 db    0
.eh_frame:00000000000056D4                 db    0
.eh_frame:00000000000056D5                 db    0
.eh_frame:00000000000056D6                 db    0
.eh_frame:00000000000056D7                 db    0
.eh_frame:00000000000056D8                 db    1
.eh_frame:00000000000056D9                 db  7Ah ; z
.eh_frame:00000000000056DA                 db  52h ; R
.eh_frame:00000000000056DB                 db    0
.eh_frame:00000000000056DC                 db    1
.eh_frame:00000000000056DD                 db  78h ; x
.eh_frame:00000000000056DE                 db  10h
.eh_frame:00000000000056DF                 db    1
.eh_frame:00000000000056E0                 db  1Bh
.eh_frame:00000000000056E1                 db  0Ch
.eh_frame:00000000000056E2                 db    7
.eh_frame:00000000000056E3                 db    8
.eh_frame:00000000000056E4                 db  90h
.eh_frame:00000000000056E5                 db    1
.eh_frame:00000000000056E6                 db    7
.eh_frame:00000000000056E7                 db  10h
.eh_frame:00000000000056E8                 db  14h
.eh_frame:00000000000056E9                 db    0
.eh_frame:00000000000056EA                 db    0
.eh_frame:00000000000056EB                 db    0
.eh_frame:00000000000056EC                 db  1Ch
.eh_frame:00000000000056ED                 db    0
.eh_frame:00000000000056EE                 db    0
.eh_frame:00000000000056EF                 db    0
.eh_frame:00000000000056F0                 db 0C0h
.eh_frame:00000000000056F1                 db 0C0h
.eh_frame:00000000000056F2                 db 0FFh
.eh_frame:00000000000056F3                 db 0FFh
.eh_frame:00000000000056F4                 db  2Bh ; +
.eh_frame:00000000000056F5                 db    0
.eh_frame:00000000000056F6                 db    0
.eh_frame:00000000000056F7                 db    0
.eh_frame:00000000000056F8                 db    0
.eh_frame:00000000000056F9                 db    0
.eh_frame:00000000000056FA                 db    0
.eh_frame:00000000000056FB                 db    0
.eh_frame:00000000000056FC                 db    0
.eh_frame:00000000000056FD                 db    0
.eh_frame:00000000000056FE                 db    0
.eh_frame:00000000000056FF                 db    0
.eh_frame:0000000000005700                 db  14h
.eh_frame:0000000000005701                 db    0
.eh_frame:0000000000005702                 db    0
.eh_frame:0000000000005703                 db    0
.eh_frame:0000000000005704                 db    0
.eh_frame:0000000000005705                 db    0
.eh_frame:0000000000005706                 db    0
.eh_frame:0000000000005707                 db    0
.eh_frame:0000000000005708                 db    1
.eh_frame:0000000000005709                 db  7Ah ; z
.eh_frame:000000000000570A                 db  52h ; R
.eh_frame:000000000000570B                 db    0
.eh_frame:000000000000570C                 db    1
.eh_frame:000000000000570D                 db  78h ; x
.eh_frame:000000000000570E                 db  10h
.eh_frame:000000000000570F                 db    1
.eh_frame:0000000000005710                 db  1Bh
.eh_frame:0000000000005711                 db  0Ch
.eh_frame:0000000000005712                 db    7
.eh_frame:0000000000005713                 db    8
.eh_frame:0000000000005714                 db  90h
.eh_frame:0000000000005715                 db    1
.eh_frame:0000000000005716                 db    0
.eh_frame:0000000000005717                 db    0
.eh_frame:0000000000005718                 db  24h ; $
.eh_frame:0000000000005719                 db    0
.eh_frame:000000000000571A                 db    0
.eh_frame:000000000000571B                 db    0
.eh_frame:000000000000571C                 db  1Ch
.eh_frame:000000000000571D                 db    0
.eh_frame:000000000000571E                 db    0
.eh_frame:000000000000571F                 db    0
.eh_frame:0000000000005720                 db    0
.eh_frame:0000000000005721                 db 0BBh
.eh_frame:0000000000005722                 db 0FFh
.eh_frame:0000000000005723                 db 0FFh
.eh_frame:0000000000005724                 db  80h
.eh_frame:0000000000005725                 db    2
.eh_frame:0000000000005726                 db    0
.eh_frame:0000000000005727                 db    0
.eh_frame:0000000000005728                 db    0
.eh_frame:0000000000005729                 db  0Eh
.eh_frame:000000000000572A                 db  10h
.eh_frame:000000000000572B                 db  46h ; F
.eh_frame:000000000000572C                 db  0Eh
.eh_frame:000000000000572D                 db  18h
.eh_frame:000000000000572E                 db  4Ah ; J
.eh_frame:000000000000572F                 db  0Fh
.eh_frame:0000000000005730                 db  0Bh
.eh_frame:0000000000005731                 db  77h ; w
.eh_frame:0000000000005732                 db    8
.eh_frame:0000000000005733                 db  80h
.eh_frame:0000000000005734                 db    0
.eh_frame:0000000000005735                 db  3Fh ; ?
.eh_frame:0000000000005736                 db  1Ah
.eh_frame:0000000000005737                 db  3Bh ; ;
.eh_frame:0000000000005738                 db  2Ah ; *
.eh_frame:0000000000005739                 db  33h ; 3
.eh_frame:000000000000573A                 db  24h ; $
.eh_frame:000000000000573B                 db  22h ; "
.eh_frame:000000000000573C                 db    0
.eh_frame:000000000000573D                 db    0
.eh_frame:000000000000573E                 db    0
.eh_frame:000000000000573F                 db    0
.eh_frame:0000000000005740                 db  14h
.eh_frame:0000000000005741                 db    0
.eh_frame:0000000000005742                 db    0
.eh_frame:0000000000005743                 db    0
.eh_frame:0000000000005744                 db  44h ; D
.eh_frame:0000000000005745                 db    0
.eh_frame:0000000000005746                 db    0
.eh_frame:0000000000005747                 db    0
.eh_frame:0000000000005748                 db  58h ; X
.eh_frame:0000000000005749                 db 0BDh
.eh_frame:000000000000574A                 db 0FFh
.eh_frame:000000000000574B                 db 0FFh
.eh_frame:000000000000574C                 db    8
.eh_frame:000000000000574D                 db    0
.eh_frame:000000000000574E                 db    0
.eh_frame:000000000000574F                 db    0
.eh_frame:0000000000005750                 db    0
.eh_frame:0000000000005751                 db    0
.eh_frame:0000000000005752                 db    0
.eh_frame:0000000000005753                 db    0
.eh_frame:0000000000005754                 db    0
.eh_frame:0000000000005755                 db    0
.eh_frame:0000000000005756                 db    0
.eh_frame:0000000000005757                 db    0
.eh_frame:0000000000005758                 db  28h ; (
.eh_frame:0000000000005759                 db    0
.eh_frame:000000000000575A                 db    0
.eh_frame:000000000000575B                 db    0
.eh_frame:000000000000575C                 db  5Ch ; \
.eh_frame:000000000000575D                 db    0
.eh_frame:000000000000575E                 db    0
.eh_frame:000000000000575F                 db    0
.eh_frame:0000000000005760                 db  60h ; `
.eh_frame:0000000000005761                 db 0C1h
.eh_frame:0000000000005762                 db 0FFh
.eh_frame:0000000000005763                 db 0FFh
.eh_frame:0000000000005764                 db  8Ah
.eh_frame:0000000000005765                 db    3
.eh_frame:0000000000005766                 db    0
.eh_frame:0000000000005767                 db    0
.eh_frame:0000000000005768                 db    0
.eh_frame:0000000000005769                 db  42h ; B
.eh_frame:000000000000576A                 db  0Eh
.eh_frame:000000000000576B                 db  10h
.eh_frame:000000000000576C                 db  8Dh
.eh_frame:000000000000576D                 db    2
.eh_frame:000000000000576E                 db  42h ; B
.eh_frame:000000000000576F                 db  0Eh
.eh_frame:0000000000005770                 db  18h
.eh_frame:0000000000005771                 db  8Ch
.eh_frame:0000000000005772                 db    3
.eh_frame:0000000000005773                 db  46h ; F
.eh_frame:0000000000005774                 db  0Eh
.eh_frame:0000000000005775                 db  20h
.eh_frame:0000000000005776                 db  86h
.eh_frame:0000000000005777                 db    4
.eh_frame:0000000000005778                 db  41h ; A
.eh_frame:0000000000005779                 db  0Eh
.eh_frame:000000000000577A                 db  28h ; (
.eh_frame:000000000000577B                 db  83h
.eh_frame:000000000000577C                 db    5
.eh_frame:000000000000577D                 db  49h ; I
.eh_frame:000000000000577E                 db  0Eh
.eh_frame:000000000000577F                 db 0B0h
.eh_frame:0000000000005780                 db    1
.eh_frame:0000000000005781                 db    0
.eh_frame:0000000000005782                 db    0
.eh_frame:0000000000005783                 db    0
.eh_frame:0000000000005784                 db  30h ; 0
.eh_frame:0000000000005785                 db    0
.eh_frame:0000000000005786                 db    0
.eh_frame:0000000000005787                 db    0
.eh_frame:0000000000005788                 db  88h
.eh_frame:0000000000005789                 db    0
.eh_frame:000000000000578A                 db    0
.eh_frame:000000000000578B                 db    0
.eh_frame:000000000000578C                 db  24h ; $
.eh_frame:000000000000578D                 db 0BDh
.eh_frame:000000000000578E                 db 0FFh
.eh_frame:000000000000578F                 db 0FFh
.eh_frame:0000000000005790                 db 0F6h
.eh_frame:0000000000005791                 db    2
.eh_frame:0000000000005792                 db    0
.eh_frame:0000000000005793                 db    0
.eh_frame:0000000000005794                 db    0
.eh_frame:0000000000005795                 db  42h ; B
.eh_frame:0000000000005796                 db  0Eh
.eh_frame:0000000000005797                 db  10h
.eh_frame:0000000000005798                 db  8Fh
.eh_frame:0000000000005799                 db    2
.eh_frame:000000000000579A                 db  42h ; B
.eh_frame:000000000000579B                 db  0Eh
.eh_frame:000000000000579C                 db  18h
.eh_frame:000000000000579D                 db  8Eh
.eh_frame:000000000000579E                 db    3
.eh_frame:000000000000579F                 db  45h ; E
.eh_frame:00000000000057A0                 db  0Eh
.eh_frame:00000000000057A1                 db  20h
.eh_frame:00000000000057A2                 db  8Dh
.eh_frame:00000000000057A3                 db    4
.eh_frame:00000000000057A4                 db  42h ; B
.eh_frame:00000000000057A5                 db  0Eh
.eh_frame:00000000000057A6                 db  28h ; (
.eh_frame:00000000000057A7                 db  8Ch
.eh_frame:00000000000057A8                 db    5
.eh_frame:00000000000057A9                 db  44h ; D
.eh_frame:00000000000057AA                 db  0Eh
.eh_frame:00000000000057AB                 db  30h ; 0
.eh_frame:00000000000057AC                 db  86h
.eh_frame:00000000000057AD                 db    6
.eh_frame:00000000000057AE                 db  41h ; A
.eh_frame:00000000000057AF                 db  0Eh
.eh_frame:00000000000057B0                 db  38h ; 8
.eh_frame:00000000000057B1                 db  83h
.eh_frame:00000000000057B2                 db    7
.eh_frame:00000000000057B3                 db  4Ch ; L
.eh_frame:00000000000057B4                 db  0Eh
.eh_frame:00000000000057B5                 db  60h ; `
.eh_frame:00000000000057B6                 db    0
.eh_frame:00000000000057B7                 db    0
.eh_frame:00000000000057B8                 db  10h
.eh_frame:00000000000057B9                 db    0
.eh_frame:00000000000057BA                 db    0
.eh_frame:00000000000057BB                 db    0
.eh_frame:00000000000057BC                 db 0BCh
.eh_frame:00000000000057BD                 db    0
.eh_frame:00000000000057BE                 db    0
.eh_frame:00000000000057BF                 db    0
.eh_frame:00000000000057C0                 db  90h
.eh_frame:00000000000057C1                 db 0C4h
.eh_frame:00000000000057C2                 db 0FFh
.eh_frame:00000000000057C3                 db 0FFh
.eh_frame:00000000000057C4                 db    8
.eh_frame:00000000000057C5                 db    0
.eh_frame:00000000000057C6                 db    0
.eh_frame:00000000000057C7                 db    0
.eh_frame:00000000000057C8                 db    0
.eh_frame:00000000000057C9                 db    0
.eh_frame:00000000000057CA                 db    0
.eh_frame:00000000000057CB                 db    0
.eh_frame:00000000000057CC                 db  10h
.eh_frame:00000000000057CD                 db    0
.eh_frame:00000000000057CE                 db    0
.eh_frame:00000000000057CF                 db    0
.eh_frame:00000000000057D0                 db 0D0h
.eh_frame:00000000000057D1                 db    0
.eh_frame:00000000000057D2                 db    0
.eh_frame:00000000000057D3                 db    0
.eh_frame:00000000000057D4                 db  8Ch
.eh_frame:00000000000057D5                 db 0C4h
.eh_frame:00000000000057D6                 db 0FFh
.eh_frame:00000000000057D7                 db 0FFh
.eh_frame:00000000000057D8                 db    8
.eh_frame:00000000000057D9                 db    0
.eh_frame:00000000000057DA                 db    0
.eh_frame:00000000000057DB                 db    0
.eh_frame:00000000000057DC                 db    0
.eh_frame:00000000000057DD                 db    0
.eh_frame:00000000000057DE                 db    0
.eh_frame:00000000000057DF                 db    0
.eh_frame:00000000000057E0                 db  2Ch ; ,
.eh_frame:00000000000057E1                 db    0
.eh_frame:00000000000057E2                 db    0
.eh_frame:00000000000057E3                 db    0
.eh_frame:00000000000057E4                 db 0E4h
.eh_frame:00000000000057E5                 db    0
.eh_frame:00000000000057E6                 db    0
.eh_frame:00000000000057E7                 db    0
.eh_frame:00000000000057E8                 db  88h
.eh_frame:00000000000057E9                 db 0C4h
.eh_frame:00000000000057EA                 db 0FFh
.eh_frame:00000000000057EB                 db 0FFh
.eh_frame:00000000000057EC                 db 0A4h
.eh_frame:00000000000057ED                 db    0
.eh_frame:00000000000057EE                 db    0
.eh_frame:00000000000057EF                 db    0
.eh_frame:00000000000057F0                 db    0
.eh_frame:00000000000057F1                 db  41h ; A
.eh_frame:00000000000057F2                 db  0Eh
.eh_frame:00000000000057F3                 db  10h
.eh_frame:00000000000057F4                 db  86h
.eh_frame:00000000000057F5                 db    2
.eh_frame:00000000000057F6                 db  41h ; A
.eh_frame:00000000000057F7                 db  0Eh
.eh_frame:00000000000057F8                 db  18h
.eh_frame:00000000000057F9                 db  83h
.eh_frame:00000000000057FA                 db    3
.eh_frame:00000000000057FB                 db  44h ; D
.eh_frame:00000000000057FC                 db  0Eh
.eh_frame:00000000000057FD                 db  20h
.eh_frame:00000000000057FE                 db  7Ah ; z
.eh_frame:00000000000057FF                 db  0Ah
.eh_frame:0000000000005800                 db  0Eh
.eh_frame:0000000000005801                 db  18h
.eh_frame:0000000000005802                 db  41h ; A
.eh_frame:0000000000005803                 db  0Eh
.eh_frame:0000000000005804                 db  10h
.eh_frame:0000000000005805                 db  41h ; A
.eh_frame:0000000000005806                 db  0Eh
.eh_frame:0000000000005807                 db    8
.eh_frame:0000000000005808                 db  41h ; A
.eh_frame:0000000000005809                 db  0Bh
.eh_frame:000000000000580A                 db    0
.eh_frame:000000000000580B                 db    0
.eh_frame:000000000000580C                 db    0
.eh_frame:000000000000580D                 db    0
.eh_frame:000000000000580E                 db    0
.eh_frame:000000000000580F                 db    0
.eh_frame:0000000000005810                 db  1Ch
.eh_frame:0000000000005811                 db    0
.eh_frame:0000000000005812                 db    0
.eh_frame:0000000000005813                 db    0
.eh_frame:0000000000005814                 db  14h
.eh_frame:0000000000005815                 db    1
.eh_frame:0000000000005816                 db    0
.eh_frame:0000000000005817                 db    0
.eh_frame:0000000000005818                 db    8
.eh_frame:0000000000005819                 db 0C5h
.eh_frame:000000000000581A                 db 0FFh
.eh_frame:000000000000581B                 db 0FFh
.eh_frame:000000000000581C                 db  9Fh
.eh_frame:000000000000581D                 db    0
.eh_frame:000000000000581E                 db    0
.eh_frame:000000000000581F                 db    0
.eh_frame:0000000000005820                 db    0
.eh_frame:0000000000005821                 db  44h ; D
.eh_frame:0000000000005822                 db  0Eh
.eh_frame:0000000000005823                 db  10h
.eh_frame:0000000000005824                 db  83h
.eh_frame:0000000000005825                 db    2
.eh_frame:0000000000005826                 db    2
.eh_frame:0000000000005827                 db  78h ; x
.eh_frame:0000000000005828                 db  0Ah
.eh_frame:0000000000005829                 db  0Eh
.eh_frame:000000000000582A                 db    8
.eh_frame:000000000000582B                 db  41h ; A
.eh_frame:000000000000582C                 db  0Bh
.eh_frame:000000000000582D                 db    0
.eh_frame:000000000000582E                 db    0
.eh_frame:000000000000582F                 db    0
.eh_frame:0000000000005830                 db  40h ; @
.eh_frame:0000000000005831                 db    0
.eh_frame:0000000000005832                 db    0
.eh_frame:0000000000005833                 db    0
.eh_frame:0000000000005834                 db  34h ; 4
.eh_frame:0000000000005835                 db    1
.eh_frame:0000000000005836                 db    0
.eh_frame:0000000000005837                 db    0
.eh_frame:0000000000005838                 db  88h
.eh_frame:0000000000005839                 db 0C5h
.eh_frame:000000000000583A                 db 0FFh
.eh_frame:000000000000583B                 db 0FFh
.eh_frame:000000000000583C                 db 0E7h
.eh_frame:000000000000583D                 db    0
.eh_frame:000000000000583E                 db    0
.eh_frame:000000000000583F                 db    0
.eh_frame:0000000000005840                 db    0
.eh_frame:0000000000005841                 db  41h ; A
.eh_frame:0000000000005842                 db  0Eh
.eh_frame:0000000000005843                 db  10h
.eh_frame:0000000000005844                 db  86h
.eh_frame:0000000000005845                 db    2
.eh_frame:0000000000005846                 db  41h ; A
.eh_frame:0000000000005847                 db  0Eh
.eh_frame:0000000000005848                 db  18h
.eh_frame:0000000000005849                 db  83h
.eh_frame:000000000000584A                 db    3
.eh_frame:000000000000584B                 db  49h ; I
.eh_frame:000000000000584C                 db  0Eh
.eh_frame:000000000000584D                 db  20h
.eh_frame:000000000000584E                 db  6Eh ; n
.eh_frame:000000000000584F                 db  0Ah
.eh_frame:0000000000005850                 db  0Eh
.eh_frame:0000000000005851                 db  18h
.eh_frame:0000000000005852                 db  41h ; A
.eh_frame:0000000000005853                 db  0Eh
.eh_frame:0000000000005854                 db  10h
.eh_frame:0000000000005855                 db  41h ; A
.eh_frame:0000000000005856                 db  0Eh
.eh_frame:0000000000005857                 db    8
.eh_frame:0000000000005858                 db  45h ; E
.eh_frame:0000000000005859                 db  0Bh
.eh_frame:000000000000585A                 db    2
.eh_frame:000000000000585B                 db  4Ah ; J
.eh_frame:000000000000585C                 db  0Ah
.eh_frame:000000000000585D                 db  0Eh
.eh_frame:000000000000585E                 db  18h
.eh_frame:000000000000585F                 db  41h ; A
.eh_frame:0000000000005860                 db  0Eh
.eh_frame:0000000000005861                 db  10h
.eh_frame:0000000000005862                 db  41h ; A
.eh_frame:0000000000005863                 db  0Eh
.eh_frame:0000000000005864                 db    8
.eh_frame:0000000000005865                 db  44h ; D
.eh_frame:0000000000005866                 db  0Bh
.eh_frame:0000000000005867                 db    2
.eh_frame:0000000000005868                 db  54h ; T
.eh_frame:0000000000005869                 db  0Eh
.eh_frame:000000000000586A                 db  18h
.eh_frame:000000000000586B                 db  41h ; A
.eh_frame:000000000000586C                 db  0Eh
.eh_frame:000000000000586D                 db  10h
.eh_frame:000000000000586E                 db  41h ; A
.eh_frame:000000000000586F                 db  0Eh
.eh_frame:0000000000005870                 db    8
.eh_frame:0000000000005871                 db    0
.eh_frame:0000000000005872                 db    0
.eh_frame:0000000000005873                 db    0
.eh_frame:0000000000005874                 db  74h ; t
.eh_frame:0000000000005875                 db    0
.eh_frame:0000000000005876                 db    0
.eh_frame:0000000000005877                 db    0
.eh_frame:0000000000005878                 db  78h ; x
.eh_frame:0000000000005879                 db    1
.eh_frame:000000000000587A                 db    0
.eh_frame:000000000000587B                 db    0
.eh_frame:000000000000587C                 db  34h ; 4
.eh_frame:000000000000587D                 db 0C6h
.eh_frame:000000000000587E                 db 0FFh
.eh_frame:000000000000587F                 db 0FFh
.eh_frame:0000000000005880                 db  34h ; 4
.eh_frame:0000000000005881                 db  12h
.eh_frame:0000000000005882                 db    0
.eh_frame:0000000000005883                 db    0
.eh_frame:0000000000005884                 db    0
.eh_frame:0000000000005885                 db  42h ; B
.eh_frame:0000000000005886                 db  0Eh
.eh_frame:0000000000005887                 db  10h
.eh_frame:0000000000005888                 db  8Fh
.eh_frame:0000000000005889                 db    2
.eh_frame:000000000000588A                 db  42h ; B
.eh_frame:000000000000588B                 db  0Eh
.eh_frame:000000000000588C                 db  18h
.eh_frame:000000000000588D                 db  8Eh
.eh_frame:000000000000588E                 db    3
.eh_frame:000000000000588F                 db  45h ; E
.eh_frame:0000000000005890                 db  0Eh
.eh_frame:0000000000005891                 db  20h
.eh_frame:0000000000005892                 db  8Dh
.eh_frame:0000000000005893                 db    4
.eh_frame:0000000000005894                 db  42h ; B
.eh_frame:0000000000005895                 db  0Eh
.eh_frame:0000000000005896                 db  28h ; (
.eh_frame:0000000000005897                 db  8Ch
.eh_frame:0000000000005898                 db    5
.eh_frame:0000000000005899                 db  44h ; D
.eh_frame:000000000000589A                 db  0Eh
.eh_frame:000000000000589B                 db  30h ; 0
.eh_frame:000000000000589C                 db  86h
.eh_frame:000000000000589D                 db    6
.eh_frame:000000000000589E                 db  41h ; A
.eh_frame:000000000000589F                 db  0Eh
.eh_frame:00000000000058A0                 db  38h ; 8
.eh_frame:00000000000058A1                 db  83h
.eh_frame:00000000000058A2                 db    7
.eh_frame:00000000000058A3                 db  53h ; S
.eh_frame:00000000000058A4                 db  0Eh
.eh_frame:00000000000058A5                 db 0F0h
.eh_frame:00000000000058A6                 db    1
.eh_frame:00000000000058A7                 db    3
.eh_frame:00000000000058A8                 db  81h
.eh_frame:00000000000058A9                 db  0Bh
.eh_frame:00000000000058AA                 db  0Eh
.eh_frame:00000000000058AB                 db 0F8h
.eh_frame:00000000000058AC                 db    1
.eh_frame:00000000000058AD                 db  4Ah ; J
.eh_frame:00000000000058AE                 db  0Eh
.eh_frame:00000000000058AF                 db  80h
.eh_frame:00000000000058B0                 db    2
.eh_frame:00000000000058B1                 db  44h ; D
.eh_frame:00000000000058B2                 db  0Eh
.eh_frame:00000000000058B3                 db  88h
.eh_frame:00000000000058B4                 db    2
.eh_frame:00000000000058B5                 db  45h ; E
.eh_frame:00000000000058B6                 db  0Eh
.eh_frame:00000000000058B7                 db  90h
.eh_frame:00000000000058B8                 db    2
.eh_frame:00000000000058B9                 db  5Fh ; _
.eh_frame:00000000000058BA                 db  0Eh
.eh_frame:00000000000058BB                 db 0F0h
.eh_frame:00000000000058BC                 db    1
.eh_frame:00000000000058BD                 db  64h ; d
.eh_frame:00000000000058BE                 db  0Ah
.eh_frame:00000000000058BF                 db  0Eh
.eh_frame:00000000000058C0                 db  38h ; 8
.eh_frame:00000000000058C1                 db  41h ; A
.eh_frame:00000000000058C2                 db  0Eh
.eh_frame:00000000000058C3                 db  30h ; 0
.eh_frame:00000000000058C4                 db  41h ; A
.eh_frame:00000000000058C5                 db  0Eh
.eh_frame:00000000000058C6                 db  28h ; (
.eh_frame:00000000000058C7                 db  42h ; B
.eh_frame:00000000000058C8                 db  0Eh
.eh_frame:00000000000058C9                 db  20h
.eh_frame:00000000000058CA                 db  42h ; B
.eh_frame:00000000000058CB                 db  0Eh
.eh_frame:00000000000058CC                 db  18h
.eh_frame:00000000000058CD                 db  42h ; B
.eh_frame:00000000000058CE                 db  0Eh
.eh_frame:00000000000058CF                 db  10h
.eh_frame:00000000000058D0                 db  42h ; B
.eh_frame:00000000000058D1                 db  0Eh
.eh_frame:00000000000058D2                 db    8
.eh_frame:00000000000058D3                 db  44h ; D
.eh_frame:00000000000058D4                 db  0Bh
.eh_frame:00000000000058D5                 db    3
.eh_frame:00000000000058D6                 db  99h
.eh_frame:00000000000058D7                 db    5
.eh_frame:00000000000058D8                 db  0Eh
.eh_frame:00000000000058D9                 db 0F8h
.eh_frame:00000000000058DA                 db    1
.eh_frame:00000000000058DB                 db  4Dh ; M
.eh_frame:00000000000058DC                 db  0Eh
.eh_frame:00000000000058DD                 db  80h
.eh_frame:00000000000058DE                 db    2
.eh_frame:00000000000058DF                 db  44h ; D
.eh_frame:00000000000058E0                 db  0Eh
.eh_frame:00000000000058E1                 db  88h
.eh_frame:00000000000058E2                 db    2
.eh_frame:00000000000058E3                 db  47h ; G
.eh_frame:00000000000058E4                 db  0Eh
.eh_frame:00000000000058E5                 db  90h
.eh_frame:00000000000058E6                 db    2
.eh_frame:00000000000058E7                 db  5Bh ; [
.eh_frame:00000000000058E8                 db  0Eh
.eh_frame:00000000000058E9                 db 0F0h
.eh_frame:00000000000058EA                 db    1
.eh_frame:00000000000058EB                 db    0
.eh_frame:00000000000058EC                 db  68h ; h
.eh_frame:00000000000058ED                 db    0
.eh_frame:00000000000058EE                 db    0
.eh_frame:00000000000058EF                 db    0
.eh_frame:00000000000058F0                 db 0F0h
.eh_frame:00000000000058F1                 db    1
.eh_frame:00000000000058F2                 db    0
.eh_frame:00000000000058F3                 db    0
.eh_frame:00000000000058F4                 db 0FCh
.eh_frame:00000000000058F5                 db 0D7h
.eh_frame:00000000000058F6                 db 0FFh
.eh_frame:00000000000058F7                 db 0FFh
.eh_frame:00000000000058F8                 db 0ABh
.eh_frame:00000000000058F9                 db    1
.eh_frame:00000000000058FA                 db    0
.eh_frame:00000000000058FB                 db    0
.eh_frame:00000000000058FC                 db    0
.eh_frame:00000000000058FD                 db  42h ; B
.eh_frame:00000000000058FE                 db  0Eh
.eh_frame:00000000000058FF                 db  10h
.eh_frame:0000000000005900                 db  8Fh
.eh_frame:0000000000005901                 db    2
.eh_frame:0000000000005902                 db  42h ; B
.eh_frame:0000000000005903                 db  0Eh
.eh_frame:0000000000005904                 db  18h
.eh_frame:0000000000005905                 db  8Eh
.eh_frame:0000000000005906                 db    3
.eh_frame:0000000000005907                 db  45h ; E
.eh_frame:0000000000005908                 db  0Eh
.eh_frame:0000000000005909                 db  20h
.eh_frame:000000000000590A                 db  8Dh
.eh_frame:000000000000590B                 db    4
.eh_frame:000000000000590C                 db  42h ; B
.eh_frame:000000000000590D                 db  0Eh
.eh_frame:000000000000590E                 db  28h ; (
.eh_frame:000000000000590F                 db  8Ch
.eh_frame:0000000000005910                 db    5
.eh_frame:0000000000005911                 db  44h ; D
.eh_frame:0000000000005912                 db  0Eh
.eh_frame:0000000000005913                 db  30h ; 0
.eh_frame:0000000000005914                 db  86h
.eh_frame:0000000000005915                 db    6
.eh_frame:0000000000005916                 db  41h ; A
.eh_frame:0000000000005917                 db  0Eh
.eh_frame:0000000000005918                 db  38h ; 8
.eh_frame:0000000000005919                 db  83h
.eh_frame:000000000000591A                 db    7
.eh_frame:000000000000591B                 db  47h ; G
.eh_frame:000000000000591C                 db  0Eh
.eh_frame:000000000000591D                 db  60h ; `
.eh_frame:000000000000591E                 db    2
.eh_frame:000000000000591F                 db  99h
.eh_frame:0000000000005920                 db  0Eh
.eh_frame:0000000000005921                 db  68h ; h
.eh_frame:0000000000005922                 db  5Fh ; _
.eh_frame:0000000000005923                 db  0Eh
.eh_frame:0000000000005924                 db  70h ; p
.eh_frame:0000000000005925                 db  46h ; F
.eh_frame:0000000000005926                 db  0Eh
.eh_frame:0000000000005927                 db  78h ; x
.eh_frame:0000000000005928                 db  42h ; B
.eh_frame:0000000000005929                 db  0Eh
.eh_frame:000000000000592A                 db  80h
.eh_frame:000000000000592B                 db    1
.eh_frame:000000000000592C                 db  59h ; Y
.eh_frame:000000000000592D                 db  0Eh
.eh_frame:000000000000592E                 db  60h ; `
.eh_frame:000000000000592F                 db    2
.eh_frame:0000000000005930                 db  40h ; @
.eh_frame:0000000000005931                 db  0Eh
.eh_frame:0000000000005932                 db  68h ; h
.eh_frame:0000000000005933                 db  4Bh ; K
.eh_frame:0000000000005934                 db  0Eh
.eh_frame:0000000000005935                 db  70h ; p
.eh_frame:0000000000005936                 db  43h ; C
.eh_frame:0000000000005937                 db  0Eh
.eh_frame:0000000000005938                 db  78h ; x
.eh_frame:0000000000005939                 db  45h ; E
.eh_frame:000000000000593A                 db  0Eh
.eh_frame:000000000000593B                 db  80h
.eh_frame:000000000000593C                 db    1
.eh_frame:000000000000593D                 db  5Eh ; ^
.eh_frame:000000000000593E                 db  0Eh
.eh_frame:000000000000593F                 db  60h ; `
.eh_frame:0000000000005940                 db  4Ch ; L
.eh_frame:0000000000005941                 db  0Ah
.eh_frame:0000000000005942                 db  0Eh
.eh_frame:0000000000005943                 db  38h ; 8
.eh_frame:0000000000005944                 db  44h ; D
.eh_frame:0000000000005945                 db  0Eh
.eh_frame:0000000000005946                 db  30h ; 0
.eh_frame:0000000000005947                 db  41h ; A
.eh_frame:0000000000005948                 db  0Eh
.eh_frame:0000000000005949                 db  28h ; (
.eh_frame:000000000000594A                 db  42h ; B
.eh_frame:000000000000594B                 db  0Eh
.eh_frame:000000000000594C                 db  20h
.eh_frame:000000000000594D                 db  42h ; B
.eh_frame:000000000000594E                 db  0Eh
.eh_frame:000000000000594F                 db  18h
.eh_frame:0000000000005950                 db  42h ; B
.eh_frame:0000000000005951                 db  0Eh
.eh_frame:0000000000005952                 db  10h
.eh_frame:0000000000005953                 db  42h ; B
.eh_frame:0000000000005954                 db  0Eh
.eh_frame:0000000000005955                 db    8
.eh_frame:0000000000005956                 db  46h ; F
.eh_frame:0000000000005957                 db  0Bh
.eh_frame:0000000000005958                 db  28h ; (
.eh_frame:0000000000005959                 db    0
.eh_frame:000000000000595A                 db    0
.eh_frame:000000000000595B                 db    0
.eh_frame:000000000000595C                 db  5Ch ; \
.eh_frame:000000000000595D                 db    2
.eh_frame:000000000000595E                 db    0
.eh_frame:000000000000595F                 db    0
.eh_frame:0000000000005960                 db  40h ; @
.eh_frame:0000000000005961                 db 0D9h
.eh_frame:0000000000005962                 db 0FFh
.eh_frame:0000000000005963                 db 0FFh
.eh_frame:0000000000005964                 db  36h ; 6
.eh_frame:0000000000005965                 db    0
.eh_frame:0000000000005966                 db    0
.eh_frame:0000000000005967                 db    0
.eh_frame:0000000000005968                 db    0
.eh_frame:0000000000005969                 db  42h ; B
.eh_frame:000000000000596A                 db  0Eh
.eh_frame:000000000000596B                 db  10h
.eh_frame:000000000000596C                 db  8Ch
.eh_frame:000000000000596D                 db    2
.eh_frame:000000000000596E                 db  41h ; A
.eh_frame:000000000000596F                 db  0Eh
.eh_frame:0000000000005970                 db  18h
.eh_frame:0000000000005971                 db  86h
.eh_frame:0000000000005972                 db    3
.eh_frame:0000000000005973                 db  41h ; A
.eh_frame:0000000000005974                 db  0Eh
.eh_frame:0000000000005975                 db  20h
.eh_frame:0000000000005976                 db  83h
.eh_frame:0000000000005977                 db    4
.eh_frame:0000000000005978                 db  6Eh ; n
.eh_frame:0000000000005979                 db  0Eh
.eh_frame:000000000000597A                 db  18h
.eh_frame:000000000000597B                 db  41h ; A
.eh_frame:000000000000597C                 db  0Eh
.eh_frame:000000000000597D                 db  10h
.eh_frame:000000000000597E                 db  42h ; B
.eh_frame:000000000000597F                 db  0Eh
.eh_frame:0000000000005980                 db    8
.eh_frame:0000000000005981                 db    0
.eh_frame:0000000000005982                 db    0
.eh_frame:0000000000005983                 db    0
.eh_frame:0000000000005984                 db  10h
.eh_frame:0000000000005985                 db    0
.eh_frame:0000000000005986                 db    0
.eh_frame:0000000000005987                 db    0
.eh_frame:0000000000005988                 db  88h
.eh_frame:0000000000005989                 db    2
.eh_frame:000000000000598A                 db    0
.eh_frame:000000000000598B                 db    0
.eh_frame:000000000000598C                 db  54h ; T
.eh_frame:000000000000598D                 db 0D9h
.eh_frame:000000000000598E                 db 0FFh
.eh_frame:000000000000598F                 db 0FFh
.eh_frame:0000000000005990                 db  11h
.eh_frame:0000000000005991                 db    0
.eh_frame:0000000000005992                 db    0
.eh_frame:0000000000005993                 db    0
.eh_frame:0000000000005994                 db    0
.eh_frame:0000000000005995                 db    0
.eh_frame:0000000000005996                 db    0
.eh_frame:0000000000005997                 db    0
.eh_frame:0000000000005998                 db  10h
.eh_frame:0000000000005999                 db    0
.eh_frame:000000000000599A                 db    0
.eh_frame:000000000000599B                 db    0
.eh_frame:000000000000599C                 db  9Ch
.eh_frame:000000000000599D                 db    2
.eh_frame:000000000000599E                 db    0
.eh_frame:000000000000599F                 db    0
.eh_frame:00000000000059A0                 db  60h ; `
.eh_frame:00000000000059A1                 db 0D9h
.eh_frame:00000000000059A2                 db 0FFh
.eh_frame:00000000000059A3                 db 0FFh
.eh_frame:00000000000059A4                 db  11h
.eh_frame:00000000000059A5                 db    0
.eh_frame:00000000000059A6                 db    0
.eh_frame:00000000000059A7                 db    0
.eh_frame:00000000000059A8                 db    0
.eh_frame:00000000000059A9                 db    0
.eh_frame:00000000000059AA                 db    0
.eh_frame:00000000000059AB                 db    0
.eh_frame:00000000000059AC                 db  10h
.eh_frame:00000000000059AD                 db    0
.eh_frame:00000000000059AE                 db    0
.eh_frame:00000000000059AF                 db    0
.eh_frame:00000000000059B0                 db 0B0h
.eh_frame:00000000000059B1                 db    2
.eh_frame:00000000000059B2                 db    0
.eh_frame:00000000000059B3                 db    0
.eh_frame:00000000000059B4                 db  6Ch ; l
.eh_frame:00000000000059B5                 db 0D9h
.eh_frame:00000000000059B6                 db 0FFh
.eh_frame:00000000000059B7                 db 0FFh
.eh_frame:00000000000059B8                 db  35h ; 5
.eh_frame:00000000000059B9                 db    0
.eh_frame:00000000000059BA                 db    0
.eh_frame:00000000000059BB                 db    0
.eh_frame:00000000000059BC                 db    0
.eh_frame:00000000000059BD                 db    0
.eh_frame:00000000000059BE                 db    0
.eh_frame:00000000000059BF                 db    0
.eh_frame:00000000000059C0                 db  10h
.eh_frame:00000000000059C1                 db    0
.eh_frame:00000000000059C2                 db    0
.eh_frame:00000000000059C3                 db    0
.eh_frame:00000000000059C4                 db 0C4h
.eh_frame:00000000000059C5                 db    2
.eh_frame:00000000000059C6                 db    0
.eh_frame:00000000000059C7                 db    0
.eh_frame:00000000000059C8                 db  98h
.eh_frame:00000000000059C9                 db 0D9h
.eh_frame:00000000000059CA                 db 0FFh
.eh_frame:00000000000059CB                 db 0FFh
.eh_frame:00000000000059CC                 db  15h
.eh_frame:00000000000059CD                 db    0
.eh_frame:00000000000059CE                 db    0
.eh_frame:00000000000059CF                 db    0
.eh_frame:00000000000059D0                 db    0
.eh_frame:00000000000059D1                 db    0
.eh_frame:00000000000059D2                 db    0
.eh_frame:00000000000059D3                 db    0
.eh_frame:00000000000059D4                 db  10h
.eh_frame:00000000000059D5                 db    0
.eh_frame:00000000000059D6                 db    0
.eh_frame:00000000000059D7                 db    0
.eh_frame:00000000000059D8                 db 0D8h
.eh_frame:00000000000059D9                 db    2
.eh_frame:00000000000059DA                 db    0
.eh_frame:00000000000059DB                 db    0
.eh_frame:00000000000059DC                 db 0A4h
.eh_frame:00000000000059DD                 db 0D9h
.eh_frame:00000000000059DE                 db 0FFh
.eh_frame:00000000000059DF                 db 0FFh
.eh_frame:00000000000059E0                 db  30h ; 0
.eh_frame:00000000000059E1                 db    0
.eh_frame:00000000000059E2                 db    0
.eh_frame:00000000000059E3                 db    0
.eh_frame:00000000000059E4                 db    0
.eh_frame:00000000000059E5                 db  6Bh ; k
.eh_frame:00000000000059E6                 db  0Eh
.eh_frame:00000000000059E7                 db  10h
.eh_frame:00000000000059E8                 db  50h ; P
.eh_frame:00000000000059E9                 db    0
.eh_frame:00000000000059EA                 db    0
.eh_frame:00000000000059EB                 db    0
.eh_frame:00000000000059EC                 db 0ECh
.eh_frame:00000000000059ED                 db    2
.eh_frame:00000000000059EE                 db    0
.eh_frame:00000000000059EF                 db    0
.eh_frame:00000000000059F0                 db 0C0h
.eh_frame:00000000000059F1                 db 0D9h
.eh_frame:00000000000059F2                 db 0FFh
.eh_frame:00000000000059F3                 db 0FFh
.eh_frame:00000000000059F4                 db  74h ; t
.eh_frame:00000000000059F5                 db    0
.eh_frame:00000000000059F6                 db    0
.eh_frame:00000000000059F7                 db    0
.eh_frame:00000000000059F8                 db    0
.eh_frame:00000000000059F9                 db  42h ; B
.eh_frame:00000000000059FA                 db  0Eh
.eh_frame:00000000000059FB                 db  10h
.eh_frame:00000000000059FC                 db  8Fh
.eh_frame:00000000000059FD                 db    2
.eh_frame:00000000000059FE                 db  42h ; B
.eh_frame:00000000000059FF                 db  0Eh
.eh_frame:0000000000005A00                 db  18h
.eh_frame:0000000000005A01                 db  8Eh
.eh_frame:0000000000005A02                 db    3
.eh_frame:0000000000005A03                 db  49h ; I
.eh_frame:0000000000005A04                 db  0Eh
.eh_frame:0000000000005A05                 db  20h
.eh_frame:0000000000005A06                 db  8Dh
.eh_frame:0000000000005A07                 db    4
.eh_frame:0000000000005A08                 db  42h ; B
.eh_frame:0000000000005A09                 db  0Eh
.eh_frame:0000000000005A0A                 db  28h ; (
.eh_frame:0000000000005A0B                 db  8Ch
.eh_frame:0000000000005A0C                 db    5
.eh_frame:0000000000005A0D                 db  44h ; D
.eh_frame:0000000000005A0E                 db  0Eh
.eh_frame:0000000000005A0F                 db  30h ; 0
.eh_frame:0000000000005A10                 db  86h
.eh_frame:0000000000005A11                 db    6
.eh_frame:0000000000005A12                 db  41h ; A
.eh_frame:0000000000005A13                 db  0Eh
.eh_frame:0000000000005A14                 db  38h ; 8
.eh_frame:0000000000005A15                 db  83h
.eh_frame:0000000000005A16                 db    7
.eh_frame:0000000000005A17                 db  4Dh ; M
.eh_frame:0000000000005A18                 db  0Eh
.eh_frame:0000000000005A19                 db  50h ; P
.eh_frame:0000000000005A1A                 db  5Fh ; _
.eh_frame:0000000000005A1B                 db  0Eh
.eh_frame:0000000000005A1C                 db  58h ; X
.eh_frame:0000000000005A1D                 db  47h ; G
.eh_frame:0000000000005A1E                 db  0Eh
.eh_frame:0000000000005A1F                 db  60h ; `
.eh_frame:0000000000005A20                 db  46h ; F
.eh_frame:0000000000005A21                 db  0Eh
.eh_frame:0000000000005A22                 db  68h ; h
.eh_frame:0000000000005A23                 db  44h ; D
.eh_frame:0000000000005A24                 db  0Eh
.eh_frame:0000000000005A25                 db  70h ; p
.eh_frame:0000000000005A26                 db  58h ; X
.eh_frame:0000000000005A27                 db  0Eh
.eh_frame:0000000000005A28                 db  38h ; 8
.eh_frame:0000000000005A29                 db  41h ; A
.eh_frame:0000000000005A2A                 db  0Eh
.eh_frame:0000000000005A2B                 db  30h ; 0
.eh_frame:0000000000005A2C                 db  41h ; A
.eh_frame:0000000000005A2D                 db  0Eh
.eh_frame:0000000000005A2E                 db  28h ; (
.eh_frame:0000000000005A2F                 db  42h ; B
.eh_frame:0000000000005A30                 db  0Eh
.eh_frame:0000000000005A31                 db  20h
.eh_frame:0000000000005A32                 db  42h ; B
.eh_frame:0000000000005A33                 db  0Eh
.eh_frame:0000000000005A34                 db  18h
.eh_frame:0000000000005A35                 db  42h ; B
.eh_frame:0000000000005A36                 db  0Eh
.eh_frame:0000000000005A37                 db  10h
.eh_frame:0000000000005A38                 db  42h ; B
.eh_frame:0000000000005A39                 db  0Eh
.eh_frame:0000000000005A3A                 db    8
.eh_frame:0000000000005A3B                 db    0
.eh_frame:0000000000005A3C                 db  68h ; h
.eh_frame:0000000000005A3D                 db    0
.eh_frame:0000000000005A3E                 db    0
.eh_frame:0000000000005A3F                 db    0
.eh_frame:0000000000005A40                 db  40h ; @
.eh_frame:0000000000005A41                 db    3
.eh_frame:0000000000005A42                 db    0
.eh_frame:0000000000005A43                 db    0
.eh_frame:0000000000005A44                 db 0ECh
.eh_frame:0000000000005A45                 db 0D9h
.eh_frame:0000000000005A46                 db 0FFh
.eh_frame:0000000000005A47                 db 0FFh
.eh_frame:0000000000005A48                 db 0E3h
.eh_frame:0000000000005A49                 db    0
.eh_frame:0000000000005A4A                 db    0
.eh_frame:0000000000005A4B                 db    0
.eh_frame:0000000000005A4C                 db    0
.eh_frame:0000000000005A4D                 db  42h ; B
.eh_frame:0000000000005A4E                 db  0Eh
.eh_frame:0000000000005A4F                 db  10h
.eh_frame:0000000000005A50                 db  8Fh
.eh_frame:0000000000005A51                 db    2
.eh_frame:0000000000005A52                 db  42h ; B
.eh_frame:0000000000005A53                 db  0Eh
.eh_frame:0000000000005A54                 db  18h
.eh_frame:0000000000005A55                 db  8Eh
.eh_frame:0000000000005A56                 db    3
.eh_frame:0000000000005A57                 db  49h ; I
.eh_frame:0000000000005A58                 db  0Eh
.eh_frame:0000000000005A59                 db  20h
.eh_frame:0000000000005A5A                 db  8Dh
.eh_frame:0000000000005A5B                 db    4
.eh_frame:0000000000005A5C                 db  42h ; B
.eh_frame:0000000000005A5D                 db  0Eh
.eh_frame:0000000000005A5E                 db  28h ; (
.eh_frame:0000000000005A5F                 db  8Ch
.eh_frame:0000000000005A60                 db    5
.eh_frame:0000000000005A61                 db  44h ; D
.eh_frame:0000000000005A62                 db  0Eh
.eh_frame:0000000000005A63                 db  30h ; 0
.eh_frame:0000000000005A64                 db  86h
.eh_frame:0000000000005A65                 db    6
.eh_frame:0000000000005A66                 db  41h ; A
.eh_frame:0000000000005A67                 db  0Eh
.eh_frame:0000000000005A68                 db  38h ; 8
.eh_frame:0000000000005A69                 db  83h
.eh_frame:0000000000005A6A                 db    7
.eh_frame:0000000000005A6B                 db  4Dh ; M
.eh_frame:0000000000005A6C                 db  0Eh
.eh_frame:0000000000005A6D                 db  70h ; p
.eh_frame:0000000000005A6E                 db  65h ; e
.eh_frame:0000000000005A6F                 db  0Eh
.eh_frame:0000000000005A70                 db  78h ; x
.eh_frame:0000000000005A71                 db  4Dh ; M
.eh_frame:0000000000005A72                 db  0Eh
.eh_frame:0000000000005A73                 db  80h
.eh_frame:0000000000005A74                 db    1
.eh_frame:0000000000005A75                 db  46h ; F
.eh_frame:0000000000005A76                 db  0Eh
.eh_frame:0000000000005A77                 db  88h
.eh_frame:0000000000005A78                 db    1
.eh_frame:0000000000005A79                 db  42h ; B
.eh_frame:0000000000005A7A                 db  0Eh
.eh_frame:0000000000005A7B                 db  90h
.eh_frame:0000000000005A7C                 db    1
.eh_frame:0000000000005A7D                 db  5Eh ; ^
.eh_frame:0000000000005A7E                 db  0Eh
.eh_frame:0000000000005A7F                 db  70h ; p
.eh_frame:0000000000005A80                 db  56h ; V
.eh_frame:0000000000005A81                 db  0Eh
.eh_frame:0000000000005A82                 db  78h ; x
.eh_frame:0000000000005A83                 db  43h ; C
.eh_frame:0000000000005A84                 db  0Eh
.eh_frame:0000000000005A85                 db  80h
.eh_frame:0000000000005A86                 db    1
.eh_frame:0000000000005A87                 db  43h ; C
.eh_frame:0000000000005A88                 db  0Eh
.eh_frame:0000000000005A89                 db  88h
.eh_frame:0000000000005A8A                 db    1
.eh_frame:0000000000005A8B                 db  56h ; V
.eh_frame:0000000000005A8C                 db  0Eh
.eh_frame:0000000000005A8D                 db  90h
.eh_frame:0000000000005A8E                 db    1
.eh_frame:0000000000005A8F                 db  52h ; R
.eh_frame:0000000000005A90                 db  0Eh
.eh_frame:0000000000005A91                 db  70h ; p
.eh_frame:0000000000005A92                 db  5Bh ; [
.eh_frame:0000000000005A93                 db  0Eh
.eh_frame:0000000000005A94                 db  38h ; 8
.eh_frame:0000000000005A95                 db  41h ; A
.eh_frame:0000000000005A96                 db  0Eh
.eh_frame:0000000000005A97                 db  30h ; 0
.eh_frame:0000000000005A98                 db  41h ; A
.eh_frame:0000000000005A99                 db  0Eh
.eh_frame:0000000000005A9A                 db  28h ; (
.eh_frame:0000000000005A9B                 db  42h ; B
.eh_frame:0000000000005A9C                 db  0Eh
.eh_frame:0000000000005A9D                 db  20h
.eh_frame:0000000000005A9E                 db  42h ; B
.eh_frame:0000000000005A9F                 db  0Eh
.eh_frame:0000000000005AA0                 db  18h
.eh_frame:0000000000005AA1                 db  42h ; B
.eh_frame:0000000000005AA2                 db  0Eh
.eh_frame:0000000000005AA3                 db  10h
.eh_frame:0000000000005AA4                 db  42h ; B
.eh_frame:0000000000005AA5                 db  0Eh
.eh_frame:0000000000005AA6                 db    8
.eh_frame:0000000000005AA7                 db    0
.eh_frame:0000000000005AA8                 db  10h
.eh_frame:0000000000005AA9                 db    0
.eh_frame:0000000000005AAA                 db    0
.eh_frame:0000000000005AAB                 db    0
.eh_frame:0000000000005AAC                 db 0ACh
.eh_frame:0000000000005AAD                 db    3
.eh_frame:0000000000005AAE                 db    0
.eh_frame:0000000000005AAF                 db    0
.eh_frame:0000000000005AB0                 db  70h ; p
.eh_frame:0000000000005AB1                 db 0DAh
.eh_frame:0000000000005AB2                 db 0FFh
.eh_frame:0000000000005AB3                 db 0FFh
.eh_frame:0000000000005AB4                 db  0Ah
.eh_frame:0000000000005AB5                 db    0
.eh_frame:0000000000005AB6                 db    0
.eh_frame:0000000000005AB7                 db    0
.eh_frame:0000000000005AB8                 db    0
.eh_frame:0000000000005AB9                 db    0
.eh_frame:0000000000005ABA                 db    0
.eh_frame:0000000000005ABB                 db    0
.eh_frame:0000000000005ABC                 db  28h ; (
.eh_frame:0000000000005ABD                 db    0
.eh_frame:0000000000005ABE                 db    0
.eh_frame:0000000000005ABF                 db    0
.eh_frame:0000000000005AC0                 db 0C0h
.eh_frame:0000000000005AC1                 db    3
.eh_frame:0000000000005AC2                 db    0
.eh_frame:0000000000005AC3                 db    0
.eh_frame:0000000000005AC4                 db  6Ch ; l
.eh_frame:0000000000005AC5                 db 0DAh
.eh_frame:0000000000005AC6                 db 0FFh
.eh_frame:0000000000005AC7                 db 0FFh
.eh_frame:0000000000005AC8                 db  93h
.eh_frame:0000000000005AC9                 db    0
.eh_frame:0000000000005ACA                 db    0
.eh_frame:0000000000005ACB                 db    0
.eh_frame:0000000000005ACC                 db    0
.eh_frame:0000000000005ACD                 db  48h ; H
.eh_frame:0000000000005ACE                 db  0Eh
.eh_frame:0000000000005ACF                 db  10h
.eh_frame:0000000000005AD0                 db  8Ch
.eh_frame:0000000000005AD1                 db    2
.eh_frame:0000000000005AD2                 db  48h ; H
.eh_frame:0000000000005AD3                 db  0Eh
.eh_frame:0000000000005AD4                 db  18h
.eh_frame:0000000000005AD5                 db  86h
.eh_frame:0000000000005AD6                 db    3
.eh_frame:0000000000005AD7                 db  41h ; A
.eh_frame:0000000000005AD8                 db  0Eh
.eh_frame:0000000000005AD9                 db  20h
.eh_frame:0000000000005ADA                 db  83h
.eh_frame:0000000000005ADB                 db    4
.eh_frame:0000000000005ADC                 db    2
.eh_frame:0000000000005ADD                 db  74h ; t
.eh_frame:0000000000005ADE                 db  0Eh
.eh_frame:0000000000005ADF                 db  18h
.eh_frame:0000000000005AE0                 db  4Bh ; K
.eh_frame:0000000000005AE1                 db  0Eh
.eh_frame:0000000000005AE2                 db  10h
.eh_frame:0000000000005AE3                 db  42h ; B
.eh_frame:0000000000005AE4                 db  0Eh
.eh_frame:0000000000005AE5                 db    8
.eh_frame:0000000000005AE6                 db    0
.eh_frame:0000000000005AE7                 db    0
.eh_frame:0000000000005AE8                 db  10h
.eh_frame:0000000000005AE9                 db    0
.eh_frame:0000000000005AEA                 db    0
.eh_frame:0000000000005AEB                 db    0
.eh_frame:0000000000005AEC                 db 0ECh
.eh_frame:0000000000005AED                 db    3
.eh_frame:0000000000005AEE                 db    0
.eh_frame:0000000000005AEF                 db    0
.eh_frame:0000000000005AF0                 db 0E0h
.eh_frame:0000000000005AF1                 db 0DAh
.eh_frame:0000000000005AF2                 db 0FFh
.eh_frame:0000000000005AF3                 db 0FFh
.eh_frame:0000000000005AF4                 db  13h
.eh_frame:0000000000005AF5                 db    0
.eh_frame:0000000000005AF6                 db    0
.eh_frame:0000000000005AF7                 db    0
.eh_frame:0000000000005AF8                 db    0
.eh_frame:0000000000005AF9                 db    0
.eh_frame:0000000000005AFA                 db    0
.eh_frame:0000000000005AFB                 db    0
.eh_frame:0000000000005AFC                 db  10h
.eh_frame:0000000000005AFD                 db    0
.eh_frame:0000000000005AFE                 db    0
.eh_frame:0000000000005AFF                 db    0
.eh_frame:0000000000005B00                 db    0
.eh_frame:0000000000005B01                 db    4
.eh_frame:0000000000005B02                 db    0
.eh_frame:0000000000005B03                 db    0
.eh_frame:0000000000005B04                 db 0ECh
.eh_frame:0000000000005B05                 db 0DAh
.eh_frame:0000000000005B06                 db 0FFh
.eh_frame:0000000000005B07                 db 0FFh
.eh_frame:0000000000005B08                 db  0Ch
.eh_frame:0000000000005B09                 db    0
.eh_frame:0000000000005B0A                 db    0
.eh_frame:0000000000005B0B                 db    0
.eh_frame:0000000000005B0C                 db    0
.eh_frame:0000000000005B0D                 db    0
.eh_frame:0000000000005B0E                 db    0
.eh_frame:0000000000005B0F                 db    0
.eh_frame:0000000000005B10                 db  10h
.eh_frame:0000000000005B11                 db    0
.eh_frame:0000000000005B12                 db    0
.eh_frame:0000000000005B13                 db    0
.eh_frame:0000000000005B14                 db  14h
.eh_frame:0000000000005B15                 db    4
.eh_frame:0000000000005B16                 db    0
.eh_frame:0000000000005B17                 db    0
.eh_frame:0000000000005B18                 db 0E8h
.eh_frame:0000000000005B19                 db 0DAh
.eh_frame:0000000000005B1A                 db 0FFh
.eh_frame:0000000000005B1B                 db 0FFh
.eh_frame:0000000000005B1C                 db  18h
.eh_frame:0000000000005B1D                 db    0
.eh_frame:0000000000005B1E                 db    0
.eh_frame:0000000000005B1F                 db    0
.eh_frame:0000000000005B20                 db    0
.eh_frame:0000000000005B21                 db    0
.eh_frame:0000000000005B22                 db    0
.eh_frame:0000000000005B23                 db    0
.eh_frame:0000000000005B24                 db  10h
.eh_frame:0000000000005B25                 db    0
.eh_frame:0000000000005B26                 db    0
.eh_frame:0000000000005B27                 db    0
.eh_frame:0000000000005B28                 db  28h ; (
.eh_frame:0000000000005B29                 db    4
.eh_frame:0000000000005B2A                 db    0
.eh_frame:0000000000005B2B                 db    0
.eh_frame:0000000000005B2C                 db 0F4h
.eh_frame:0000000000005B2D                 db 0DAh
.eh_frame:0000000000005B2E                 db 0FFh
.eh_frame:0000000000005B2F                 db 0FFh
.eh_frame:0000000000005B30                 db  14h
.eh_frame:0000000000005B31                 db    0
.eh_frame:0000000000005B32                 db    0
.eh_frame:0000000000005B33                 db    0
.eh_frame:0000000000005B34                 db    0
.eh_frame:0000000000005B35                 db    0
.eh_frame:0000000000005B36                 db    0
.eh_frame:0000000000005B37                 db    0
.eh_frame:0000000000005B38                 db  18h
.eh_frame:0000000000005B39                 db    0
.eh_frame:0000000000005B3A                 db    0
.eh_frame:0000000000005B3B                 db    0
.eh_frame:0000000000005B3C                 db  3Ch ; <
.eh_frame:0000000000005B3D                 db    4
.eh_frame:0000000000005B3E                 db    0
.eh_frame:0000000000005B3F                 db    0
.eh_frame:0000000000005B40                 db    0
.eh_frame:0000000000005B41                 db 0DBh
.eh_frame:0000000000005B42                 db 0FFh
.eh_frame:0000000000005B43                 db 0FFh
.eh_frame:0000000000005B44                 db  8Eh
.eh_frame:0000000000005B45                 db    0
.eh_frame:0000000000005B46                 db    0
.eh_frame:0000000000005B47                 db    0
.eh_frame:0000000000005B48                 db    0
.eh_frame:0000000000005B49                 db  44h ; D
.eh_frame:0000000000005B4A                 db  0Eh
.eh_frame:0000000000005B4B                 db  50h ; P
.eh_frame:0000000000005B4C                 db    2
.eh_frame:0000000000005B4D                 db  7Fh ; 
.eh_frame:0000000000005B4E                 db  0Ah
.eh_frame:0000000000005B4F                 db  0Eh
.eh_frame:0000000000005B50                 db    8
.eh_frame:0000000000005B51                 db  41h ; A
.eh_frame:0000000000005B52                 db  0Bh
.eh_frame:0000000000005B53                 db    0
.eh_frame:0000000000005B54                 db  18h
.eh_frame:0000000000005B55                 db    0
.eh_frame:0000000000005B56                 db    0
.eh_frame:0000000000005B57                 db    0
.eh_frame:0000000000005B58                 db  58h ; X
.eh_frame:0000000000005B59                 db    4
.eh_frame:0000000000005B5A                 db    0
.eh_frame:0000000000005B5B                 db    0
.eh_frame:0000000000005B5C                 db  74h ; t
.eh_frame:0000000000005B5D                 db 0DBh
.eh_frame:0000000000005B5E                 db 0FFh
.eh_frame:0000000000005B5F                 db 0FFh
.eh_frame:0000000000005B60                 db  8Ah
.eh_frame:0000000000005B61                 db    0
.eh_frame:0000000000005B62                 db    0
.eh_frame:0000000000005B63                 db    0
.eh_frame:0000000000005B64                 db    0
.eh_frame:0000000000005B65                 db  44h ; D
.eh_frame:0000000000005B66                 db  0Eh
.eh_frame:0000000000005B67                 db  50h ; P
.eh_frame:0000000000005B68                 db    2
.eh_frame:0000000000005B69                 db  7Bh ; {
.eh_frame:0000000000005B6A                 db  0Ah
.eh_frame:0000000000005B6B                 db  0Eh
.eh_frame:0000000000005B6C                 db    8
.eh_frame:0000000000005B6D                 db  41h ; A
.eh_frame:0000000000005B6E                 db  0Bh
.eh_frame:0000000000005B6F                 db    0
.eh_frame:0000000000005B70                 db  10h
.eh_frame:0000000000005B71                 db    0
.eh_frame:0000000000005B72                 db    0
.eh_frame:0000000000005B73                 db    0
.eh_frame:0000000000005B74                 db  74h ; t
.eh_frame:0000000000005B75                 db    4
.eh_frame:0000000000005B76                 db    0
.eh_frame:0000000000005B77                 db    0
.eh_frame:0000000000005B78                 db 0E8h
.eh_frame:0000000000005B79                 db 0DBh
.eh_frame:0000000000005B7A                 db 0FFh
.eh_frame:0000000000005B7B                 db 0FFh
.eh_frame:0000000000005B7C                 db  0Ch
.eh_frame:0000000000005B7D                 db    0
.eh_frame:0000000000005B7E                 db    0
.eh_frame:0000000000005B7F                 db    0
.eh_frame:0000000000005B80                 db    0
.eh_frame:0000000000005B81                 db    0
.eh_frame:0000000000005B82                 db    0
.eh_frame:0000000000005B83                 db    0
.eh_frame:0000000000005B84                 db  10h
.eh_frame:0000000000005B85                 db    0
.eh_frame:0000000000005B86                 db    0
.eh_frame:0000000000005B87                 db    0
.eh_frame:0000000000005B88                 db  88h
.eh_frame:0000000000005B89                 db    4
.eh_frame:0000000000005B8A                 db    0
.eh_frame:0000000000005B8B                 db    0
.eh_frame:0000000000005B8C                 db 0E4h
.eh_frame:0000000000005B8D                 db 0DBh
.eh_frame:0000000000005B8E                 db 0FFh
.eh_frame:0000000000005B8F                 db 0FFh
.eh_frame:0000000000005B90                 db  0Fh
.eh_frame:0000000000005B91                 db    0
.eh_frame:0000000000005B92                 db    0
.eh_frame:0000000000005B93                 db    0
.eh_frame:0000000000005B94                 db    0
.eh_frame:0000000000005B95                 db    0
.eh_frame:0000000000005B96                 db    0
.eh_frame:0000000000005B97                 db    0
.eh_frame:0000000000005B98                 db  18h
.eh_frame:0000000000005B99                 db    0
.eh_frame:0000000000005B9A                 db    0
.eh_frame:0000000000005B9B                 db    0
.eh_frame:0000000000005B9C                 db  9Ch
.eh_frame:0000000000005B9D                 db    4
.eh_frame:0000000000005B9E                 db    0
.eh_frame:0000000000005B9F                 db    0
.eh_frame:0000000000005BA0                 db 0E0h
.eh_frame:0000000000005BA1                 db 0DBh
.eh_frame:0000000000005BA2                 db 0FFh
.eh_frame:0000000000005BA3                 db 0FFh
.eh_frame:0000000000005BA4                 db  98h
.eh_frame:0000000000005BA5                 db    0
.eh_frame:0000000000005BA6                 db    0
.eh_frame:0000000000005BA7                 db    0
.eh_frame:0000000000005BA8                 db    0
.eh_frame:0000000000005BA9                 db  44h ; D
.eh_frame:0000000000005BAA                 db  0Eh
.eh_frame:0000000000005BAB                 db  50h ; P
.eh_frame:0000000000005BAC                 db    2
.eh_frame:0000000000005BAD                 db  8Eh
.eh_frame:0000000000005BAE                 db  0Ah
.eh_frame:0000000000005BAF                 db  0Eh
.eh_frame:0000000000005BB0                 db    8
.eh_frame:0000000000005BB1                 db  41h ; A
.eh_frame:0000000000005BB2                 db  0Bh
.eh_frame:0000000000005BB3                 db    0
.eh_frame:0000000000005BB4                 db  10h
.eh_frame:0000000000005BB5                 db    0
.eh_frame:0000000000005BB6                 db    0
.eh_frame:0000000000005BB7                 db    0
.eh_frame:0000000000005BB8                 db 0B8h
.eh_frame:0000000000005BB9                 db    4
.eh_frame:0000000000005BBA                 db    0
.eh_frame:0000000000005BBB                 db    0
.eh_frame:0000000000005BBC                 db  64h ; d
.eh_frame:0000000000005BBD                 db 0DCh
.eh_frame:0000000000005BBE                 db 0FFh
.eh_frame:0000000000005BBF                 db 0FFh
.eh_frame:0000000000005BC0                 db  10h
.eh_frame:0000000000005BC1                 db    0
.eh_frame:0000000000005BC2                 db    0
.eh_frame:0000000000005BC3                 db    0
.eh_frame:0000000000005BC4                 db    0
.eh_frame:0000000000005BC5                 db    0
.eh_frame:0000000000005BC6                 db    0
.eh_frame:0000000000005BC7                 db    0
.eh_frame:0000000000005BC8                 db  10h
.eh_frame:0000000000005BC9                 db    0
.eh_frame:0000000000005BCA                 db    0
.eh_frame:0000000000005BCB                 db    0
.eh_frame:0000000000005BCC                 db 0CCh
.eh_frame:0000000000005BCD                 db    4
.eh_frame:0000000000005BCE                 db    0
.eh_frame:0000000000005BCF                 db    0
.eh_frame:0000000000005BD0                 db  60h ; `
.eh_frame:0000000000005BD1                 db 0DCh
.eh_frame:0000000000005BD2                 db 0FFh
.eh_frame:0000000000005BD3                 db 0FFh
.eh_frame:0000000000005BD4                 db  11h
.eh_frame:0000000000005BD5                 db    0
.eh_frame:0000000000005BD6                 db    0
.eh_frame:0000000000005BD7                 db    0
.eh_frame:0000000000005BD8                 db    0
.eh_frame:0000000000005BD9                 db    0
.eh_frame:0000000000005BDA                 db    0
.eh_frame:0000000000005BDB                 db    0
.eh_frame:0000000000005BDC                 db  10h
.eh_frame:0000000000005BDD                 db    0
.eh_frame:0000000000005BDE                 db    0
.eh_frame:0000000000005BDF                 db    0
.eh_frame:0000000000005BE0                 db 0E0h
.eh_frame:0000000000005BE1                 db    4
.eh_frame:0000000000005BE2                 db    0
.eh_frame:0000000000005BE3                 db    0
.eh_frame:0000000000005BE4                 db  6Ch ; l
.eh_frame:0000000000005BE5                 db 0DCh
.eh_frame:0000000000005BE6                 db 0FFh
.eh_frame:0000000000005BE7                 db 0FFh
.eh_frame:0000000000005BE8                 db  0Ah
.eh_frame:0000000000005BE9                 db    0
.eh_frame:0000000000005BEA                 db    0
.eh_frame:0000000000005BEB                 db    0
.eh_frame:0000000000005BEC                 db    0
.eh_frame:0000000000005BED                 db    0
.eh_frame:0000000000005BEE                 db    0
.eh_frame:0000000000005BEF                 db    0
.eh_frame:0000000000005BF0                 db  18h
.eh_frame:0000000000005BF1                 db    0
.eh_frame:0000000000005BF2                 db    0
.eh_frame:0000000000005BF3                 db    0
.eh_frame:0000000000005BF4                 db 0F4h
.eh_frame:0000000000005BF5                 db    4
.eh_frame:0000000000005BF6                 db    0
.eh_frame:0000000000005BF7                 db    0
.eh_frame:0000000000005BF8                 db  68h ; h
.eh_frame:0000000000005BF9                 db 0DCh
.eh_frame:0000000000005BFA                 db 0FFh
.eh_frame:0000000000005BFB                 db 0FFh
.eh_frame:0000000000005BFC                 db  8Eh
.eh_frame:0000000000005BFD                 db    0
.eh_frame:0000000000005BFE                 db    0
.eh_frame:0000000000005BFF                 db    0
.eh_frame:0000000000005C00                 db    0
.eh_frame:0000000000005C01                 db  44h ; D
.eh_frame:0000000000005C02                 db  0Eh
.eh_frame:0000000000005C03                 db  50h ; P
.eh_frame:0000000000005C04                 db    2
.eh_frame:0000000000005C05                 db  7Fh ; 
.eh_frame:0000000000005C06                 db  0Ah
.eh_frame:0000000000005C07                 db  0Eh
.eh_frame:0000000000005C08                 db    8
.eh_frame:0000000000005C09                 db  41h ; A
.eh_frame:0000000000005C0A                 db  0Bh
.eh_frame:0000000000005C0B                 db    0
.eh_frame:0000000000005C0C                 db  18h
.eh_frame:0000000000005C0D                 db    0
.eh_frame:0000000000005C0E                 db    0
.eh_frame:0000000000005C0F                 db    0
.eh_frame:0000000000005C10                 db  10h
.eh_frame:0000000000005C11                 db    5
.eh_frame:0000000000005C12                 db    0
.eh_frame:0000000000005C13                 db    0
.eh_frame:0000000000005C14                 db 0DCh
.eh_frame:0000000000005C15                 db 0DCh
.eh_frame:0000000000005C16                 db 0FFh
.eh_frame:0000000000005C17                 db 0FFh
.eh_frame:0000000000005C18                 db  91h
.eh_frame:0000000000005C19                 db    0
.eh_frame:0000000000005C1A                 db    0
.eh_frame:0000000000005C1B                 db    0
.eh_frame:0000000000005C1C                 db    0
.eh_frame:0000000000005C1D                 db  44h ; D
.eh_frame:0000000000005C1E                 db  0Eh
.eh_frame:0000000000005C1F                 db  50h ; P
.eh_frame:0000000000005C20                 db    2
.eh_frame:0000000000005C21                 db  82h
.eh_frame:0000000000005C22                 db  0Ah
.eh_frame:0000000000005C23                 db  0Eh
.eh_frame:0000000000005C24                 db    8
.eh_frame:0000000000005C25                 db  41h ; A
.eh_frame:0000000000005C26                 db  0Bh
.eh_frame:0000000000005C27                 db    0
.eh_frame:0000000000005C28                 db  10h
.eh_frame:0000000000005C29                 db    0
.eh_frame:0000000000005C2A                 db    0
.eh_frame:0000000000005C2B                 db    0
.eh_frame:0000000000005C2C                 db  2Ch ; ,
.eh_frame:0000000000005C2D                 db    5
.eh_frame:0000000000005C2E                 db    0
.eh_frame:0000000000005C2F                 db    0
.eh_frame:0000000000005C30                 db  60h ; `
.eh_frame:0000000000005C31                 db 0DDh
.eh_frame:0000000000005C32                 db 0FFh
.eh_frame:0000000000005C33                 db 0FFh
.eh_frame:0000000000005C34                 db  0Ch
.eh_frame:0000000000005C35                 db    0
.eh_frame:0000000000005C36                 db    0
.eh_frame:0000000000005C37                 db    0
.eh_frame:0000000000005C38                 db    0
.eh_frame:0000000000005C39                 db    0
.eh_frame:0000000000005C3A                 db    0
.eh_frame:0000000000005C3B                 db    0
.eh_frame:0000000000005C3C                 db  10h
.eh_frame:0000000000005C3D                 db    0
.eh_frame:0000000000005C3E                 db    0
.eh_frame:0000000000005C3F                 db    0
.eh_frame:0000000000005C40                 db  40h ; @
.eh_frame:0000000000005C41                 db    5
.eh_frame:0000000000005C42                 db    0
.eh_frame:0000000000005C43                 db    0
.eh_frame:0000000000005C44                 db  5Ch ; \
.eh_frame:0000000000005C45                 db 0DDh
.eh_frame:0000000000005C46                 db 0FFh
.eh_frame:0000000000005C47                 db 0FFh
.eh_frame:0000000000005C48                 db  17h
.eh_frame:0000000000005C49                 db    0
.eh_frame:0000000000005C4A                 db    0
.eh_frame:0000000000005C4B                 db    0
.eh_frame:0000000000005C4C                 db    0
.eh_frame:0000000000005C4D                 db    0
.eh_frame:0000000000005C4E                 db    0
.eh_frame:0000000000005C4F                 db    0
.eh_frame:0000000000005C50                 db  10h
.eh_frame:0000000000005C51                 db    0
.eh_frame:0000000000005C52                 db    0
.eh_frame:0000000000005C53                 db    0
.eh_frame:0000000000005C54                 db  54h ; T
.eh_frame:0000000000005C55                 db    5
.eh_frame:0000000000005C56                 db    0
.eh_frame:0000000000005C57                 db    0
.eh_frame:0000000000005C58                 db  68h ; h
.eh_frame:0000000000005C59                 db 0DDh
.eh_frame:0000000000005C5A                 db 0FFh
.eh_frame:0000000000005C5B                 db 0FFh
.eh_frame:0000000000005C5C                 db  13h
.eh_frame:0000000000005C5D                 db    0
.eh_frame:0000000000005C5E                 db    0
.eh_frame:0000000000005C5F                 db    0
.eh_frame:0000000000005C60                 db    0
.eh_frame:0000000000005C61                 db    0
.eh_frame:0000000000005C62                 db    0
.eh_frame:0000000000005C63                 db    0
.eh_frame:0000000000005C64                 db  10h
.eh_frame:0000000000005C65                 db    0
.eh_frame:0000000000005C66                 db    0
.eh_frame:0000000000005C67                 db    0
.eh_frame:0000000000005C68                 db  68h ; h
.eh_frame:0000000000005C69                 db    5
.eh_frame:0000000000005C6A                 db    0
.eh_frame:0000000000005C6B                 db    0
.eh_frame:0000000000005C6C                 db  74h ; t
.eh_frame:0000000000005C6D                 db 0DDh
.eh_frame:0000000000005C6E                 db 0FFh
.eh_frame:0000000000005C6F                 db 0FFh
.eh_frame:0000000000005C70                 db  0Ch
.eh_frame:0000000000005C71                 db    0
.eh_frame:0000000000005C72                 db    0
.eh_frame:0000000000005C73                 db    0
.eh_frame:0000000000005C74                 db    0
.eh_frame:0000000000005C75                 db    0
.eh_frame:0000000000005C76                 db    0
.eh_frame:0000000000005C77                 db    0
.eh_frame:0000000000005C78                 db  10h
.eh_frame:0000000000005C79                 db    0
.eh_frame:0000000000005C7A                 db    0
.eh_frame:0000000000005C7B                 db    0
.eh_frame:0000000000005C7C                 db  7Ch ; |
.eh_frame:0000000000005C7D                 db    5
.eh_frame:0000000000005C7E                 db    0
.eh_frame:0000000000005C7F                 db    0
.eh_frame:0000000000005C80                 db  70h ; p
.eh_frame:0000000000005C81                 db 0DDh
.eh_frame:0000000000005C82                 db 0FFh
.eh_frame:0000000000005C83                 db 0FFh
.eh_frame:0000000000005C84                 db  14h
.eh_frame:0000000000005C85                 db    0
.eh_frame:0000000000005C86                 db    0
.eh_frame:0000000000005C87                 db    0
.eh_frame:0000000000005C88                 db    0
.eh_frame:0000000000005C89                 db    0
.eh_frame:0000000000005C8A                 db    0
.eh_frame:0000000000005C8B                 db    0
.eh_frame:0000000000005C8C                 db  10h
.eh_frame:0000000000005C8D                 db    0
.eh_frame:0000000000005C8E                 db    0
.eh_frame:0000000000005C8F                 db    0
.eh_frame:0000000000005C90                 db  90h
.eh_frame:0000000000005C91                 db    5
.eh_frame:0000000000005C92                 db    0
.eh_frame:0000000000005C93                 db    0
.eh_frame:0000000000005C94                 db  7Ch ; |
.eh_frame:0000000000005C95                 db 0DDh
.eh_frame:0000000000005C96                 db 0FFh
.eh_frame:0000000000005C97                 db 0FFh
.eh_frame:0000000000005C98                 db  13h
.eh_frame:0000000000005C99                 db    0
.eh_frame:0000000000005C9A                 db    0
.eh_frame:0000000000005C9B                 db    0
.eh_frame:0000000000005C9C                 db    0
.eh_frame:0000000000005C9D                 db    0
.eh_frame:0000000000005C9E                 db    0
.eh_frame:0000000000005C9F                 db    0
.eh_frame:0000000000005CA0                 db  14h
.eh_frame:0000000000005CA1                 db    0
.eh_frame:0000000000005CA2                 db    0
.eh_frame:0000000000005CA3                 db    0
.eh_frame:0000000000005CA4                 db 0A4h
.eh_frame:0000000000005CA5                 db    5
.eh_frame:0000000000005CA6                 db    0
.eh_frame:0000000000005CA7                 db    0
.eh_frame:0000000000005CA8                 db  88h
.eh_frame:0000000000005CA9                 db 0DDh
.eh_frame:0000000000005CAA                 db 0FFh
.eh_frame:0000000000005CAB                 db 0FFh
.eh_frame:0000000000005CAC                 db  18h
.eh_frame:0000000000005CAD                 db    0
.eh_frame:0000000000005CAE                 db    0
.eh_frame:0000000000005CAF                 db    0
.eh_frame:0000000000005CB0                 db    0
.eh_frame:0000000000005CB1                 db    0
.eh_frame:0000000000005CB2                 db    0
.eh_frame:0000000000005CB3                 db    0
.eh_frame:0000000000005CB4                 db    0
.eh_frame:0000000000005CB5                 db    0
.eh_frame:0000000000005CB6                 db    0
.eh_frame:0000000000005CB7                 db    0
.eh_frame:0000000000005CB8                 db  10h
.eh_frame:0000000000005CB9                 db    1
.eh_frame:0000000000005CBA                 db    0
.eh_frame:0000000000005CBB                 db    0
.eh_frame:0000000000005CBC                 db 0BCh
.eh_frame:0000000000005CBD                 db    5
.eh_frame:0000000000005CBE                 db    0
.eh_frame:0000000000005CBF                 db    0
.eh_frame:0000000000005CC0                 db  90h
.eh_frame:0000000000005CC1                 db 0DDh
.eh_frame:0000000000005CC2                 db 0FFh
.eh_frame:0000000000005CC3                 db 0FFh
.eh_frame:0000000000005CC4                 db  17h
.eh_frame:0000000000005CC5                 db    4
.eh_frame:0000000000005CC6                 db    0
.eh_frame:0000000000005CC7                 db    0
.eh_frame:0000000000005CC8                 db    0
.eh_frame:0000000000005CC9                 db  42h ; B
.eh_frame:0000000000005CCA                 db  0Eh
.eh_frame:0000000000005CCB                 db  10h
.eh_frame:0000000000005CCC                 db  8Fh
.eh_frame:0000000000005CCD                 db    2
.eh_frame:0000000000005CCE                 db  42h ; B
.eh_frame:0000000000005CCF                 db  0Eh
.eh_frame:0000000000005CD0                 db  18h
.eh_frame:0000000000005CD1                 db  8Eh
.eh_frame:0000000000005CD2                 db    3
.eh_frame:0000000000005CD3                 db  42h ; B
.eh_frame:0000000000005CD4                 db  0Eh
.eh_frame:0000000000005CD5                 db  20h
.eh_frame:0000000000005CD6                 db  8Dh
.eh_frame:0000000000005CD7                 db    4
.eh_frame:0000000000005CD8                 db  42h ; B
.eh_frame:0000000000005CD9                 db  0Eh
.eh_frame:0000000000005CDA                 db  28h ; (
.eh_frame:0000000000005CDB                 db  8Ch
.eh_frame:0000000000005CDC                 db    5
.eh_frame:0000000000005CDD                 db  44h ; D
.eh_frame:0000000000005CDE                 db  0Eh
.eh_frame:0000000000005CDF                 db  30h ; 0
.eh_frame:0000000000005CE0                 db  86h
.eh_frame:0000000000005CE1                 db    6
.eh_frame:0000000000005CE2                 db  41h ; A
.eh_frame:0000000000005CE3                 db  0Eh
.eh_frame:0000000000005CE4                 db  38h ; 8
.eh_frame:0000000000005CE5                 db  83h
.eh_frame:0000000000005CE6                 db    7
.eh_frame:0000000000005CE7                 db  4Ah ; J
.eh_frame:0000000000005CE8                 db  0Eh
.eh_frame:0000000000005CE9                 db  60h ; `
.eh_frame:0000000000005CEA                 db    2
.eh_frame:0000000000005CEB                 db 0DDh
.eh_frame:0000000000005CEC                 db  0Eh
.eh_frame:0000000000005CED                 db  68h ; h
.eh_frame:0000000000005CEE                 db  57h ; W
.eh_frame:0000000000005CEF                 db  0Eh
.eh_frame:0000000000005CF0                 db  70h ; p
.eh_frame:0000000000005CF1                 db  42h ; B
.eh_frame:0000000000005CF2                 db  0Eh
.eh_frame:0000000000005CF3                 db  78h ; x
.eh_frame:0000000000005CF4                 db  42h ; B
.eh_frame:0000000000005CF5                 db  0Eh
.eh_frame:0000000000005CF6                 db  80h
.eh_frame:0000000000005CF7                 db    1
.eh_frame:0000000000005CF8                 db  42h ; B
.eh_frame:0000000000005CF9                 db  0Eh
.eh_frame:0000000000005CFA                 db  88h
.eh_frame:0000000000005CFB                 db    1
.eh_frame:0000000000005CFC                 db  42h ; B
.eh_frame:0000000000005CFD                 db  0Eh
.eh_frame:0000000000005CFE                 db  90h
.eh_frame:0000000000005CFF                 db    1
.eh_frame:0000000000005D00                 db  53h ; S
.eh_frame:0000000000005D01                 db  0Eh
.eh_frame:0000000000005D02                 db  60h ; `
.eh_frame:0000000000005D03                 db  44h ; D
.eh_frame:0000000000005D04                 db  0Ah
.eh_frame:0000000000005D05                 db  0Eh
.eh_frame:0000000000005D06                 db  38h ; 8
.eh_frame:0000000000005D07                 db  41h ; A
.eh_frame:0000000000005D08                 db  0Eh
.eh_frame:0000000000005D09                 db  30h ; 0
.eh_frame:0000000000005D0A                 db  41h ; A
.eh_frame:0000000000005D0B                 db  0Eh
.eh_frame:0000000000005D0C                 db  28h ; (
.eh_frame:0000000000005D0D                 db  42h ; B
.eh_frame:0000000000005D0E                 db  0Eh
.eh_frame:0000000000005D0F                 db  20h
.eh_frame:0000000000005D10                 db  42h ; B
.eh_frame:0000000000005D11                 db  0Eh
.eh_frame:0000000000005D12                 db  18h
.eh_frame:0000000000005D13                 db  42h ; B
.eh_frame:0000000000005D14                 db  0Eh
.eh_frame:0000000000005D15                 db  10h
.eh_frame:0000000000005D16                 db  42h ; B
.eh_frame:0000000000005D17                 db  0Eh
.eh_frame:0000000000005D18                 db    8
.eh_frame:0000000000005D19                 db  44h ; D
.eh_frame:0000000000005D1A                 db  0Bh
.eh_frame:0000000000005D1B                 db    2
.eh_frame:0000000000005D1C                 db  78h ; x
.eh_frame:0000000000005D1D                 db  0Ah
.eh_frame:0000000000005D1E                 db  0Eh
.eh_frame:0000000000005D1F                 db  68h ; h
.eh_frame:0000000000005D20                 db  48h ; H
.eh_frame:0000000000005D21                 db  0Bh
.eh_frame:0000000000005D22                 db  5Ah ; Z
.eh_frame:0000000000005D23                 db  0Ah
.eh_frame:0000000000005D24                 db  0Eh
.eh_frame:0000000000005D25                 db  38h ; 8
.eh_frame:0000000000005D26                 db  47h ; G
.eh_frame:0000000000005D27                 db  0Eh
.eh_frame:0000000000005D28                 db  30h ; 0
.eh_frame:0000000000005D29                 db  41h ; A
.eh_frame:0000000000005D2A                 db  0Eh
.eh_frame:0000000000005D2B                 db  28h ; (
.eh_frame:0000000000005D2C                 db  42h ; B
.eh_frame:0000000000005D2D                 db  0Eh
.eh_frame:0000000000005D2E                 db  20h
.eh_frame:0000000000005D2F                 db  42h ; B
.eh_frame:0000000000005D30                 db  0Eh
.eh_frame:0000000000005D31                 db  18h
.eh_frame:0000000000005D32                 db  42h ; B
.eh_frame:0000000000005D33                 db  0Eh
.eh_frame:0000000000005D34                 db  10h
.eh_frame:0000000000005D35                 db  42h ; B
.eh_frame:0000000000005D36                 db  0Eh
.eh_frame:0000000000005D37                 db    8
.eh_frame:0000000000005D38                 db  56h ; V
.eh_frame:0000000000005D39                 db  0Bh
.eh_frame:0000000000005D3A                 db  5Eh ; ^
.eh_frame:0000000000005D3B                 db  0Ah
.eh_frame:0000000000005D3C                 db  0Eh
.eh_frame:0000000000005D3D                 db  38h ; 8
.eh_frame:0000000000005D3E                 db  52h ; R
.eh_frame:0000000000005D3F                 db  0Eh
.eh_frame:0000000000005D40                 db  30h ; 0
.eh_frame:0000000000005D41                 db  41h ; A
.eh_frame:0000000000005D42                 db  0Eh
.eh_frame:0000000000005D43                 db  28h ; (
.eh_frame:0000000000005D44                 db  42h ; B
.eh_frame:0000000000005D45                 db  0Eh
.eh_frame:0000000000005D46                 db  20h
.eh_frame:0000000000005D47                 db  42h ; B
.eh_frame:0000000000005D48                 db  0Eh
.eh_frame:0000000000005D49                 db  18h
.eh_frame:0000000000005D4A                 db  42h ; B
.eh_frame:0000000000005D4B                 db  0Eh
.eh_frame:0000000000005D4C                 db  10h
.eh_frame:0000000000005D4D                 db  42h ; B
.eh_frame:0000000000005D4E                 db  0Eh
.eh_frame:0000000000005D4F                 db    8
.eh_frame:0000000000005D50                 db  4Fh ; O
.eh_frame:0000000000005D51                 db  0Bh
.eh_frame:0000000000005D52                 db  62h ; b
.eh_frame:0000000000005D53                 db  0Ah
.eh_frame:0000000000005D54                 db  0Eh
.eh_frame:0000000000005D55                 db  38h ; 8
.eh_frame:0000000000005D56                 db  50h ; P
.eh_frame:0000000000005D57                 db  0Eh
.eh_frame:0000000000005D58                 db  30h ; 0
.eh_frame:0000000000005D59                 db  41h ; A
.eh_frame:0000000000005D5A                 db  0Eh
.eh_frame:0000000000005D5B                 db  28h ; (
.eh_frame:0000000000005D5C                 db  42h ; B
.eh_frame:0000000000005D5D                 db  0Eh
.eh_frame:0000000000005D5E                 db  20h
.eh_frame:0000000000005D5F                 db  42h ; B
.eh_frame:0000000000005D60                 db  0Eh
.eh_frame:0000000000005D61                 db  18h
.eh_frame:0000000000005D62                 db  42h ; B
.eh_frame:0000000000005D63                 db  0Eh
.eh_frame:0000000000005D64                 db  10h
.eh_frame:0000000000005D65                 db  42h ; B
.eh_frame:0000000000005D66                 db  0Eh
.eh_frame:0000000000005D67                 db    8
.eh_frame:0000000000005D68                 db  55h ; U
.eh_frame:0000000000005D69                 db  0Bh
.eh_frame:0000000000005D6A                 db  66h ; f
.eh_frame:0000000000005D6B                 db  0Eh
.eh_frame:0000000000005D6C                 db  68h ; h
.eh_frame:0000000000005D6D                 db  42h ; B
.eh_frame:0000000000005D6E                 db  0Eh
.eh_frame:0000000000005D6F                 db  70h ; p
.eh_frame:0000000000005D70                 db  5Ch ; \
.eh_frame:0000000000005D71                 db  0Eh
.eh_frame:0000000000005D72                 db  68h ; h
.eh_frame:0000000000005D73                 db  41h ; A
.eh_frame:0000000000005D74                 db  0Eh
.eh_frame:0000000000005D75                 db  60h ; `
.eh_frame:0000000000005D76                 db  44h ; D
.eh_frame:0000000000005D77                 db  0Ah
.eh_frame:0000000000005D78                 db  0Eh
.eh_frame:0000000000005D79                 db  38h ; 8
.eh_frame:0000000000005D7A                 db  41h ; A
.eh_frame:0000000000005D7B                 db  0Eh
.eh_frame:0000000000005D7C                 db  30h ; 0
.eh_frame:0000000000005D7D                 db  41h ; A
.eh_frame:0000000000005D7E                 db  0Eh
.eh_frame:0000000000005D7F                 db  28h ; (
.eh_frame:0000000000005D80                 db  42h ; B
.eh_frame:0000000000005D81                 db  0Eh
.eh_frame:0000000000005D82                 db  20h
.eh_frame:0000000000005D83                 db  42h ; B
.eh_frame:0000000000005D84                 db  0Eh
.eh_frame:0000000000005D85                 db  18h
.eh_frame:0000000000005D86                 db  42h ; B
.eh_frame:0000000000005D87                 db  0Eh
.eh_frame:0000000000005D88                 db  10h
.eh_frame:0000000000005D89                 db  42h ; B
.eh_frame:0000000000005D8A                 db  0Eh
.eh_frame:0000000000005D8B                 db    8
.eh_frame:0000000000005D8C                 db  45h ; E
.eh_frame:0000000000005D8D                 db  0Bh
.eh_frame:0000000000005D8E                 db  68h ; h
.eh_frame:0000000000005D8F                 db  0Ah
.eh_frame:0000000000005D90                 db  0Eh
.eh_frame:0000000000005D91                 db  68h ; h
.eh_frame:0000000000005D92                 db  48h ; H
.eh_frame:0000000000005D93                 db  0Bh
.eh_frame:0000000000005D94                 db  72h ; r
.eh_frame:0000000000005D95                 db  0Eh
.eh_frame:0000000000005D96                 db  68h ; h
.eh_frame:0000000000005D97                 db  45h ; E
.eh_frame:0000000000005D98                 db  0Eh
.eh_frame:0000000000005D99                 db  70h ; p
.eh_frame:0000000000005D9A                 db  42h ; B
.eh_frame:0000000000005D9B                 db  0Eh
.eh_frame:0000000000005D9C                 db  78h ; x
.eh_frame:0000000000005D9D                 db  42h ; B
.eh_frame:0000000000005D9E                 db  0Eh
.eh_frame:0000000000005D9F                 db  80h
.eh_frame:0000000000005DA0                 db    1
.eh_frame:0000000000005DA1                 db  5Eh ; ^
.eh_frame:0000000000005DA2                 db  0Eh
.eh_frame:0000000000005DA3                 db  60h ; `
.eh_frame:0000000000005DA4                 db  44h ; D
.eh_frame:0000000000005DA5                 db  0Ah
.eh_frame:0000000000005DA6                 db  0Eh
.eh_frame:0000000000005DA7                 db  38h ; 8
.eh_frame:0000000000005DA8                 db  41h ; A
.eh_frame:0000000000005DA9                 db  0Eh
.eh_frame:0000000000005DAA                 db  30h ; 0
.eh_frame:0000000000005DAB                 db  41h ; A
.eh_frame:0000000000005DAC                 db  0Eh
.eh_frame:0000000000005DAD                 db  28h ; (
.eh_frame:0000000000005DAE                 db  42h ; B
.eh_frame:0000000000005DAF                 db  0Eh
.eh_frame:0000000000005DB0                 db  20h
.eh_frame:0000000000005DB1                 db  42h ; B
.eh_frame:0000000000005DB2                 db  0Eh
.eh_frame:0000000000005DB3                 db  18h
.eh_frame:0000000000005DB4                 db  42h ; B
.eh_frame:0000000000005DB5                 db  0Eh
.eh_frame:0000000000005DB6                 db  10h
.eh_frame:0000000000005DB7                 db  42h ; B
.eh_frame:0000000000005DB8                 db  0Eh
.eh_frame:0000000000005DB9                 db    8
.eh_frame:0000000000005DBA                 db  41h ; A
.eh_frame:0000000000005DBB                 db  0Bh
.eh_frame:0000000000005DBC                 db  79h ; y
.eh_frame:0000000000005DBD                 db  0Ah
.eh_frame:0000000000005DBE                 db  0Eh
.eh_frame:0000000000005DBF                 db  68h ; h
.eh_frame:0000000000005DC0                 db  42h ; B
.eh_frame:0000000000005DC1                 db  0Eh
.eh_frame:0000000000005DC2                 db  70h ; p
.eh_frame:0000000000005DC3                 db  42h ; B
.eh_frame:0000000000005DC4                 db  0Eh
.eh_frame:0000000000005DC5                 db  78h ; x
.eh_frame:0000000000005DC6                 db  42h ; B
.eh_frame:0000000000005DC7                 db  0Eh
.eh_frame:0000000000005DC8                 db  80h
.eh_frame:0000000000005DC9                 db    1
.eh_frame:0000000000005DCA                 db  51h ; Q
.eh_frame:0000000000005DCB                 db  0Bh
.eh_frame:0000000000005DCC                 db  10h
.eh_frame:0000000000005DCD                 db    0
.eh_frame:0000000000005DCE                 db    0
.eh_frame:0000000000005DCF                 db    0
.eh_frame:0000000000005DD0                 db 0D0h
.eh_frame:0000000000005DD1                 db    6
.eh_frame:0000000000005DD2                 db    0
.eh_frame:0000000000005DD3                 db    0
.eh_frame:0000000000005DD4                 db  9Ch
.eh_frame:0000000000005DD5                 db 0E0h
.eh_frame:0000000000005DD6                 db 0FFh
.eh_frame:0000000000005DD7                 db 0FFh
.eh_frame:0000000000005DD8                 db  20h
.eh_frame:0000000000005DD9                 db    0
.eh_frame:0000000000005DDA                 db    0
.eh_frame:0000000000005DDB                 db    0
.eh_frame:0000000000005DDC                 db    0
.eh_frame:0000000000005DDD                 db    0
.eh_frame:0000000000005DDE                 db    0
.eh_frame:0000000000005DDF                 db    0
.eh_frame:0000000000005DE0                 db  18h
.eh_frame:0000000000005DE1                 db    0
.eh_frame:0000000000005DE2                 db    0
.eh_frame:0000000000005DE3                 db    0
.eh_frame:0000000000005DE4                 db 0E4h
.eh_frame:0000000000005DE5                 db    6
.eh_frame:0000000000005DE6                 db    0
.eh_frame:0000000000005DE7                 db    0
.eh_frame:0000000000005DE8                 db 0A8h
.eh_frame:0000000000005DE9                 db 0E0h
.eh_frame:0000000000005DEA                 db 0FFh
.eh_frame:0000000000005DEB                 db 0FFh
.eh_frame:0000000000005DEC                 db  78h ; x
.eh_frame:0000000000005DED                 db    0
.eh_frame:0000000000005DEE                 db    0
.eh_frame:0000000000005DEF                 db    0
.eh_frame:0000000000005DF0                 db    0
.eh_frame:0000000000005DF1                 db  44h ; D
.eh_frame:0000000000005DF2                 db  0Eh
.eh_frame:0000000000005DF3                 db  70h ; p
.eh_frame:0000000000005DF4                 db    2
.eh_frame:0000000000005DF5                 db  60h ; `
.eh_frame:0000000000005DF6                 db  0Ah
.eh_frame:0000000000005DF7                 db  0Eh
.eh_frame:0000000000005DF8                 db    8
.eh_frame:0000000000005DF9                 db  41h ; A
.eh_frame:0000000000005DFA                 db  0Bh
.eh_frame:0000000000005DFB                 db    0
.eh_frame:0000000000005DFC                 db  28h ; (
.eh_frame:0000000000005DFD                 db    0
.eh_frame:0000000000005DFE                 db    0
.eh_frame:0000000000005DFF                 db    0
.eh_frame:0000000000005E00                 db    0
.eh_frame:0000000000005E01                 db    7
.eh_frame:0000000000005E02                 db    0
.eh_frame:0000000000005E03                 db    0
.eh_frame:0000000000005E04                 db  0Ch
.eh_frame:0000000000005E05                 db 0E1h
.eh_frame:0000000000005E06                 db 0FFh
.eh_frame:0000000000005E07                 db 0FFh
.eh_frame:0000000000005E08                 db 0D5h
.eh_frame:0000000000005E09                 db    0
.eh_frame:0000000000005E0A                 db    0
.eh_frame:0000000000005E0B                 db    0
.eh_frame:0000000000005E0C                 db    0
.eh_frame:0000000000005E0D                 db  41h ; A
.eh_frame:0000000000005E0E                 db  0Eh
.eh_frame:0000000000005E0F                 db  10h
.eh_frame:0000000000005E10                 db  86h
.eh_frame:0000000000005E11                 db    2
.eh_frame:0000000000005E12                 db  41h ; A
.eh_frame:0000000000005E13                 db  0Eh
.eh_frame:0000000000005E14                 db  18h
.eh_frame:0000000000005E15                 db  83h
.eh_frame:0000000000005E16                 db    3
.eh_frame:0000000000005E17                 db  50h ; P
.eh_frame:0000000000005E18                 db  0Eh
.eh_frame:0000000000005E19                 db 0D0h
.eh_frame:0000000000005E1A                 db    1
.eh_frame:0000000000005E1B                 db    2
.eh_frame:0000000000005E1C                 db 0ABh
.eh_frame:0000000000005E1D                 db  0Ah
.eh_frame:0000000000005E1E                 db  0Eh
.eh_frame:0000000000005E1F                 db  18h
.eh_frame:0000000000005E20                 db  41h ; A
.eh_frame:0000000000005E21                 db  0Eh
.eh_frame:0000000000005E22                 db  10h
.eh_frame:0000000000005E23                 db  41h ; A
.eh_frame:0000000000005E24                 db  0Eh
.eh_frame:0000000000005E25                 db    8
.eh_frame:0000000000005E26                 db  41h ; A
.eh_frame:0000000000005E27                 db  0Bh
.eh_frame:0000000000005E28                 db  1Ch
.eh_frame:0000000000005E29                 db    0
.eh_frame:0000000000005E2A                 db    0
.eh_frame:0000000000005E2B                 db    0
.eh_frame:0000000000005E2C                 db  2Ch ; ,
.eh_frame:0000000000005E2D                 db    7
.eh_frame:0000000000005E2E                 db    0
.eh_frame:0000000000005E2F                 db    0
.eh_frame:0000000000005E30                 db 0C0h
.eh_frame:0000000000005E31                 db 0E1h
.eh_frame:0000000000005E32                 db 0FFh
.eh_frame:0000000000005E33                 db 0FFh
.eh_frame:0000000000005E34                 db  80h
.eh_frame:0000000000005E35                 db    0
.eh_frame:0000000000005E36                 db    0
.eh_frame:0000000000005E37                 db    0
.eh_frame:0000000000005E38                 db    0
.eh_frame:0000000000005E39                 db  41h ; A
.eh_frame:0000000000005E3A                 db  0Eh
.eh_frame:0000000000005E3B                 db  10h
.eh_frame:0000000000005E3C                 db  83h
.eh_frame:0000000000005E3D                 db    2
.eh_frame:0000000000005E3E                 db    2
.eh_frame:0000000000005E3F                 db  7Ah ; z
.eh_frame:0000000000005E40                 db  0Eh
.eh_frame:0000000000005E41                 db    8
.eh_frame:0000000000005E42                 db    0
.eh_frame:0000000000005E43                 db    0
.eh_frame:0000000000005E44                 db    0
.eh_frame:0000000000005E45                 db    0
.eh_frame:0000000000005E46                 db    0
.eh_frame:0000000000005E47                 db    0
.eh_frame:0000000000005E48                 db  18h
.eh_frame:0000000000005E49                 db    0
.eh_frame:0000000000005E4A                 db    0
.eh_frame:0000000000005E4B                 db    0
.eh_frame:0000000000005E4C                 db  4Ch ; L
.eh_frame:0000000000005E4D                 db    7
.eh_frame:0000000000005E4E                 db    0
.eh_frame:0000000000005E4F                 db    0
.eh_frame:0000000000005E50                 db  20h
.eh_frame:0000000000005E51                 db 0E2h
.eh_frame:0000000000005E52                 db 0FFh
.eh_frame:0000000000005E53                 db 0FFh
.eh_frame:0000000000005E54                 db  1Ah
.eh_frame:0000000000005E55                 db    0
.eh_frame:0000000000005E56                 db    0
.eh_frame:0000000000005E57                 db    0
.eh_frame:0000000000005E58                 db    0
.eh_frame:0000000000005E59                 db  41h ; A
.eh_frame:0000000000005E5A                 db  0Eh
.eh_frame:0000000000005E5B                 db  10h
.eh_frame:0000000000005E5C                 db  83h
.eh_frame:0000000000005E5D                 db    2
.eh_frame:0000000000005E5E                 db  53h ; S
.eh_frame:0000000000005E5F                 db  0Ah
.eh_frame:0000000000005E60                 db  0Eh
.eh_frame:0000000000005E61                 db    8
.eh_frame:0000000000005E62                 db  41h ; A
.eh_frame:0000000000005E63                 db  0Bh
.eh_frame:0000000000005E64                 db  10h
.eh_frame:0000000000005E65                 db    0
.eh_frame:0000000000005E66                 db    0
.eh_frame:0000000000005E67                 db    0
.eh_frame:0000000000005E68                 db  68h ; h
.eh_frame:0000000000005E69                 db    7
.eh_frame:0000000000005E6A                 db    0
.eh_frame:0000000000005E6B                 db    0
.eh_frame:0000000000005E6C                 db  24h ; $
.eh_frame:0000000000005E6D                 db 0E2h
.eh_frame:0000000000005E6E                 db 0FFh
.eh_frame:0000000000005E6F                 db 0FFh
.eh_frame:0000000000005E70                 db  24h ; $
.eh_frame:0000000000005E71                 db    0
.eh_frame:0000000000005E72                 db    0
.eh_frame:0000000000005E73                 db    0
.eh_frame:0000000000005E74                 db    0
.eh_frame:0000000000005E75                 db  5Fh ; _
.eh_frame:0000000000005E76                 db  0Eh
.eh_frame:0000000000005E77                 db  10h
.eh_frame:0000000000005E78                 db  10h
.eh_frame:0000000000005E79                 db    0
.eh_frame:0000000000005E7A                 db    0
.eh_frame:0000000000005E7B                 db    0
.eh_frame:0000000000005E7C                 db  7Ch ; |
.eh_frame:0000000000005E7D                 db    7
.eh_frame:0000000000005E7E                 db    0
.eh_frame:0000000000005E7F                 db    0
.eh_frame:0000000000005E80                 db  40h ; @
.eh_frame:0000000000005E81                 db 0E2h
.eh_frame:0000000000005E82                 db 0FFh
.eh_frame:0000000000005E83                 db 0FFh
.eh_frame:0000000000005E84                 db    2
.eh_frame:0000000000005E85                 db    0
.eh_frame:0000000000005E86                 db    0
.eh_frame:0000000000005E87                 db    0
.eh_frame:0000000000005E88                 db    0
.eh_frame:0000000000005E89                 db    0
.eh_frame:0000000000005E8A                 db    0
.eh_frame:0000000000005E8B                 db    0
.eh_frame:0000000000005E8C                 db  20h
.eh_frame:0000000000005E8D                 db    0
.eh_frame:0000000000005E8E                 db    0
.eh_frame:0000000000005E8F                 db    0
.eh_frame:0000000000005E90                 db  90h
.eh_frame:0000000000005E91                 db    7
.eh_frame:0000000000005E92                 db    0
.eh_frame:0000000000005E93                 db    0
.eh_frame:0000000000005E94                 db  3Ch ; <
.eh_frame:0000000000005E95                 db 0E2h
.eh_frame:0000000000005E96                 db 0FFh
.eh_frame:0000000000005E97                 db 0FFh
.eh_frame:0000000000005E98                 db  36h ; 6
.eh_frame:0000000000005E99                 db    0
.eh_frame:0000000000005E9A                 db    0
.eh_frame:0000000000005E9B                 db    0
.eh_frame:0000000000005E9C                 db    0
.eh_frame:0000000000005E9D                 db  44h ; D
.eh_frame:0000000000005E9E                 db  0Eh
.eh_frame:0000000000005E9F                 db  10h
.eh_frame:0000000000005EA0                 db  83h
.eh_frame:0000000000005EA1                 db    2
.eh_frame:0000000000005EA2                 db  5Dh ; ]
.eh_frame:0000000000005EA3                 db  0Ah
.eh_frame:0000000000005EA4                 db  0Eh
.eh_frame:0000000000005EA5                 db    8
.eh_frame:0000000000005EA6                 db  47h ; G
.eh_frame:0000000000005EA7                 db  0Bh
.eh_frame:0000000000005EA8                 db  48h ; H
.eh_frame:0000000000005EA9                 db  0Ah
.eh_frame:0000000000005EAA                 db  0Eh
.eh_frame:0000000000005EAB                 db    8
.eh_frame:0000000000005EAC                 db  41h ; A
.eh_frame:0000000000005EAD                 db  0Bh
.eh_frame:0000000000005EAE                 db    0
.eh_frame:0000000000005EAF                 db    0
.eh_frame:0000000000005EB0                 db  10h
.eh_frame:0000000000005EB1                 db    0
.eh_frame:0000000000005EB2                 db    0
.eh_frame:0000000000005EB3                 db    0
.eh_frame:0000000000005EB4                 db 0B4h
.eh_frame:0000000000005EB5                 db    7
.eh_frame:0000000000005EB6                 db    0
.eh_frame:0000000000005EB7                 db    0
.eh_frame:0000000000005EB8                 db  58h ; X
.eh_frame:0000000000005EB9                 db 0E2h
.eh_frame:0000000000005EBA                 db 0FFh
.eh_frame:0000000000005EBB                 db 0FFh
.eh_frame:0000000000005EBC                 db  24h ; $
.eh_frame:0000000000005EBD                 db    0
.eh_frame:0000000000005EBE                 db    0
.eh_frame:0000000000005EBF                 db    0
.eh_frame:0000000000005EC0                 db    0
.eh_frame:0000000000005EC1                 db  5Fh ; _
.eh_frame:0000000000005EC2                 db  0Eh
.eh_frame:0000000000005EC3                 db  10h
.eh_frame:0000000000005EC4                 db  14h
.eh_frame:0000000000005EC5                 db    0
.eh_frame:0000000000005EC6                 db    0
.eh_frame:0000000000005EC7                 db    0
.eh_frame:0000000000005EC8                 db 0C8h
.eh_frame:0000000000005EC9                 db    7
.eh_frame:0000000000005ECA                 db    0
.eh_frame:0000000000005ECB                 db    0
.eh_frame:0000000000005ECC                 db  74h ; t
.eh_frame:0000000000005ECD                 db 0E2h
.eh_frame:0000000000005ECE                 db 0FFh
.eh_frame:0000000000005ECF                 db 0FFh
.eh_frame:0000000000005ED0                 db  82h
.eh_frame:0000000000005ED1                 db    0
.eh_frame:0000000000005ED2                 db    0
.eh_frame:0000000000005ED3                 db    0
.eh_frame:0000000000005ED4                 db    0
.eh_frame:0000000000005ED5                 db    2
.eh_frame:0000000000005ED6                 db  5Fh ; _
.eh_frame:0000000000005ED7                 db  0Eh
.eh_frame:0000000000005ED8                 db  10h
.eh_frame:0000000000005ED9                 db  49h ; I
.eh_frame:0000000000005EDA                 db  0Eh
.eh_frame:0000000000005EDB                 db    8
.eh_frame:0000000000005EDC                 db  14h
.eh_frame:0000000000005EDD                 db    0
.eh_frame:0000000000005EDE                 db    0
.eh_frame:0000000000005EDF                 db    0
.eh_frame:0000000000005EE0                 db 0E0h
.eh_frame:0000000000005EE1                 db    7
.eh_frame:0000000000005EE2                 db    0
.eh_frame:0000000000005EE3                 db    0
.eh_frame:0000000000005EE4                 db 0ECh
.eh_frame:0000000000005EE5                 db 0E2h
.eh_frame:0000000000005EE6                 db 0FFh
.eh_frame:0000000000005EE7                 db 0FFh
.eh_frame:0000000000005EE8                 db  4Ah ; J
.eh_frame:0000000000005EE9                 db    0
.eh_frame:0000000000005EEA                 db    0
.eh_frame:0000000000005EEB                 db    0
.eh_frame:0000000000005EEC                 db    0
.eh_frame:0000000000005EED                 db    2
.eh_frame:0000000000005EEE                 db  45h ; E
.eh_frame:0000000000005EEF                 db  0Eh
.eh_frame:0000000000005EF0                 db  10h
.eh_frame:0000000000005EF1                 db    0
.eh_frame:0000000000005EF2                 db    0
.eh_frame:0000000000005EF3                 db    0
.eh_frame:0000000000005EF4                 db  18h
.eh_frame:0000000000005EF5                 db    0
.eh_frame:0000000000005EF6                 db    0
.eh_frame:0000000000005EF7                 db    0
.eh_frame:0000000000005EF8                 db 0F8h
.eh_frame:0000000000005EF9                 db    7
.eh_frame:0000000000005EFA                 db    0
.eh_frame:0000000000005EFB                 db    0
.eh_frame:0000000000005EFC                 db  24h ; $
.eh_frame:0000000000005EFD                 db 0E3h
.eh_frame:0000000000005EFE                 db 0FFh
.eh_frame:0000000000005EFF                 db 0FFh
.eh_frame:0000000000005F00                 db  17h
.eh_frame:0000000000005F01                 db    0
.eh_frame:0000000000005F02                 db    0
.eh_frame:0000000000005F03                 db    0
.eh_frame:0000000000005F04                 db    0
.eh_frame:0000000000005F05                 db  41h ; A
.eh_frame:0000000000005F06                 db  0Eh
.eh_frame:0000000000005F07                 db  10h
.eh_frame:0000000000005F08                 db  83h
.eh_frame:0000000000005F09                 db    2
.eh_frame:0000000000005F0A                 db  51h ; Q
.eh_frame:0000000000005F0B                 db  0Eh
.eh_frame:0000000000005F0C                 db    8
.eh_frame:0000000000005F0D                 db    0
.eh_frame:0000000000005F0E                 db    0
.eh_frame:0000000000005F0F                 db    0
.eh_frame:0000000000005F10                 db  18h
.eh_frame:0000000000005F11                 db    0
.eh_frame:0000000000005F12                 db    0
.eh_frame:0000000000005F13                 db    0
.eh_frame:0000000000005F14                 db  14h
.eh_frame:0000000000005F15                 db    8
.eh_frame:0000000000005F16                 db    0
.eh_frame:0000000000005F17                 db    0
.eh_frame:0000000000005F18                 db  28h ; (
.eh_frame:0000000000005F19                 db 0E3h
.eh_frame:0000000000005F1A                 db 0FFh
.eh_frame:0000000000005F1B                 db 0FFh
.eh_frame:0000000000005F1C                 db  2Eh ; .
.eh_frame:0000000000005F1D                 db    0
.eh_frame:0000000000005F1E                 db    0
.eh_frame:0000000000005F1F                 db    0
.eh_frame:0000000000005F20                 db    0
.eh_frame:0000000000005F21                 db  47h ; G
.eh_frame:0000000000005F22                 db  0Eh
.eh_frame:0000000000005F23                 db  10h
.eh_frame:0000000000005F24                 db  61h ; a
.eh_frame:0000000000005F25                 db  0Ah
.eh_frame:0000000000005F26                 db  0Eh
.eh_frame:0000000000005F27                 db    8
.eh_frame:0000000000005F28                 db  41h ; A
.eh_frame:0000000000005F29                 db  0Bh
.eh_frame:0000000000005F2A                 db    0
.eh_frame:0000000000005F2B                 db    0
.eh_frame:0000000000005F2C                 db  24h ; $
.eh_frame:0000000000005F2D                 db    0
.eh_frame:0000000000005F2E                 db    0
.eh_frame:0000000000005F2F                 db    0
.eh_frame:0000000000005F30                 db  30h ; 0
.eh_frame:0000000000005F31                 db    8
.eh_frame:0000000000005F32                 db    0
.eh_frame:0000000000005F33                 db    0
.eh_frame:0000000000005F34                 db  3Ch ; <
.eh_frame:0000000000005F35                 db 0E3h
.eh_frame:0000000000005F36                 db 0FFh
.eh_frame:0000000000005F37                 db 0FFh
.eh_frame:0000000000005F38                 db  28h ; (
.eh_frame:0000000000005F39                 db    0
.eh_frame:0000000000005F3A                 db    0
.eh_frame:0000000000005F3B                 db    0
.eh_frame:0000000000005F3C                 db    0
.eh_frame:0000000000005F3D                 db  41h ; A
.eh_frame:0000000000005F3E                 db  0Eh
.eh_frame:0000000000005F3F                 db  10h
.eh_frame:0000000000005F40                 db  86h
.eh_frame:0000000000005F41                 db    2
.eh_frame:0000000000005F42                 db  41h ; A
.eh_frame:0000000000005F43                 db  0Eh
.eh_frame:0000000000005F44                 db  18h
.eh_frame:0000000000005F45                 db  83h
.eh_frame:0000000000005F46                 db    3
.eh_frame:0000000000005F47                 db  4Dh ; M
.eh_frame:0000000000005F48                 db  0Eh
.eh_frame:0000000000005F49                 db  20h
.eh_frame:0000000000005F4A                 db  49h ; I
.eh_frame:0000000000005F4B                 db  0Eh
.eh_frame:0000000000005F4C                 db  18h
.eh_frame:0000000000005F4D                 db  47h ; G
.eh_frame:0000000000005F4E                 db  0Eh
.eh_frame:0000000000005F4F                 db  10h
.eh_frame:0000000000005F50                 db  41h ; A
.eh_frame:0000000000005F51                 db  0Eh
.eh_frame:0000000000005F52                 db    8
.eh_frame:0000000000005F53                 db    0
.eh_frame:0000000000005F54                 db  18h
.eh_frame:0000000000005F55                 db    0
.eh_frame:0000000000005F56                 db    0
.eh_frame:0000000000005F57                 db    0
.eh_frame:0000000000005F58                 db  58h ; X
.eh_frame:0000000000005F59                 db    8
.eh_frame:0000000000005F5A                 db    0
.eh_frame:0000000000005F5B                 db    0
.eh_frame:0000000000005F5C                 db  44h ; D
.eh_frame:0000000000005F5D                 db 0E3h
.eh_frame:0000000000005F5E                 db 0FFh
.eh_frame:0000000000005F5F                 db 0FFh
.eh_frame:0000000000005F60                 db  13h
.eh_frame:0000000000005F61                 db    0
.eh_frame:0000000000005F62                 db    0
.eh_frame:0000000000005F63                 db    0
.eh_frame:0000000000005F64                 db    0
.eh_frame:0000000000005F65                 db  41h ; A
.eh_frame:0000000000005F66                 db  0Eh
.eh_frame:0000000000005F67                 db  10h
.eh_frame:0000000000005F68                 db  83h
.eh_frame:0000000000005F69                 db    2
.eh_frame:0000000000005F6A                 db  50h ; P
.eh_frame:0000000000005F6B                 db  0Eh
.eh_frame:0000000000005F6C                 db    8
.eh_frame:0000000000005F6D                 db    0
.eh_frame:0000000000005F6E                 db    0
.eh_frame:0000000000005F6F                 db    0
.eh_frame:0000000000005F70                 db  14h
.eh_frame:0000000000005F71                 db    0
.eh_frame:0000000000005F72                 db    0
.eh_frame:0000000000005F73                 db    0
.eh_frame:0000000000005F74                 db  74h ; t
.eh_frame:0000000000005F75                 db    8
.eh_frame:0000000000005F76                 db    0
.eh_frame:0000000000005F77                 db    0
.eh_frame:0000000000005F78                 db  48h ; H
.eh_frame:0000000000005F79                 db 0E3h
.eh_frame:0000000000005F7A                 db 0FFh
.eh_frame:0000000000005F7B                 db 0FFh
.eh_frame:0000000000005F7C                 db  35h ; 5
.eh_frame:0000000000005F7D                 db    0
.eh_frame:0000000000005F7E                 db    0
.eh_frame:0000000000005F7F                 db    0
.eh_frame:0000000000005F80                 db    0
.eh_frame:0000000000005F81                 db  4Bh ; K
.eh_frame:0000000000005F82                 db  0Eh
.eh_frame:0000000000005F83                 db  10h
.eh_frame:0000000000005F84                 db    0
.eh_frame:0000000000005F85                 db    0
.eh_frame:0000000000005F86                 db    0
.eh_frame:0000000000005F87                 db    0
.eh_frame:0000000000005F88                 db  3Ch ; <
.eh_frame:0000000000005F89                 db    0
.eh_frame:0000000000005F8A                 db    0
.eh_frame:0000000000005F8B                 db    0
.eh_frame:0000000000005F8C                 db  8Ch
.eh_frame:0000000000005F8D                 db    8
.eh_frame:0000000000005F8E                 db    0
.eh_frame:0000000000005F8F                 db    0
.eh_frame:0000000000005F90                 db  70h ; p
.eh_frame:0000000000005F91                 db 0E3h
.eh_frame:0000000000005F92                 db 0FFh
.eh_frame:0000000000005F93                 db 0FFh
.eh_frame:0000000000005F94                 db  83h
.eh_frame:0000000000005F95                 db    0
.eh_frame:0000000000005F96                 db    0
.eh_frame:0000000000005F97                 db    0
.eh_frame:0000000000005F98                 db    0
.eh_frame:0000000000005F99                 db  42h ; B
.eh_frame:0000000000005F9A                 db  0Eh
.eh_frame:0000000000005F9B                 db  10h
.eh_frame:0000000000005F9C                 db  8Dh
.eh_frame:0000000000005F9D                 db    2
.eh_frame:0000000000005F9E                 db  42h ; B
.eh_frame:0000000000005F9F                 db  0Eh
.eh_frame:0000000000005FA0                 db  18h
.eh_frame:0000000000005FA1                 db  8Ch
.eh_frame:0000000000005FA2                 db    3
.eh_frame:0000000000005FA3                 db  44h ; D
.eh_frame:0000000000005FA4                 db  0Eh
.eh_frame:0000000000005FA5                 db  20h
.eh_frame:0000000000005FA6                 db  86h
.eh_frame:0000000000005FA7                 db    4
.eh_frame:0000000000005FA8                 db  41h ; A
.eh_frame:0000000000005FA9                 db  0Eh
.eh_frame:0000000000005FAA                 db  28h ; (
.eh_frame:0000000000005FAB                 db  83h
.eh_frame:0000000000005FAC                 db    5
.eh_frame:0000000000005FAD                 db  4Ah ; J
.eh_frame:0000000000005FAE                 db  0Eh
.eh_frame:0000000000005FAF                 db  40h ; @
.eh_frame:0000000000005FB0                 db    2
.eh_frame:0000000000005FB1                 db  64h ; d
.eh_frame:0000000000005FB2                 db  0Ah
.eh_frame:0000000000005FB3                 db  0Eh
.eh_frame:0000000000005FB4                 db  28h ; (
.eh_frame:0000000000005FB5                 db  41h ; A
.eh_frame:0000000000005FB6                 db  0Eh
.eh_frame:0000000000005FB7                 db  20h
.eh_frame:0000000000005FB8                 db  41h ; A
.eh_frame:0000000000005FB9                 db  0Eh
.eh_frame:0000000000005FBA                 db  18h
.eh_frame:0000000000005FBB                 db  42h ; B
.eh_frame:0000000000005FBC                 db  0Eh
.eh_frame:0000000000005FBD                 db  10h
.eh_frame:0000000000005FBE                 db  42h ; B
.eh_frame:0000000000005FBF                 db  0Eh
.eh_frame:0000000000005FC0                 db    8
.eh_frame:0000000000005FC1                 db  41h ; A
.eh_frame:0000000000005FC2                 db  0Bh
.eh_frame:0000000000005FC3                 db    0
.eh_frame:0000000000005FC4                 db    0
.eh_frame:0000000000005FC5                 db    0
.eh_frame:0000000000005FC6                 db    0
.eh_frame:0000000000005FC7                 db    0
.eh_frame:0000000000005FC8                 db  4Ch ; L
.eh_frame:0000000000005FC9                 db    0
.eh_frame:0000000000005FCA                 db    0
.eh_frame:0000000000005FCB                 db    0
.eh_frame:0000000000005FCC                 db 0CCh
.eh_frame:0000000000005FCD                 db    8
.eh_frame:0000000000005FCE                 db    0
.eh_frame:0000000000005FCF                 db    0
.eh_frame:0000000000005FD0                 db 0C0h
.eh_frame:0000000000005FD1                 db 0E3h
.eh_frame:0000000000005FD2                 db 0FFh
.eh_frame:0000000000005FD3                 db 0FFh
.eh_frame:0000000000005FD4                 db  7Dh ; }
.eh_frame:0000000000005FD5                 db    0
.eh_frame:0000000000005FD6                 db    0
.eh_frame:0000000000005FD7                 db    0
.eh_frame:0000000000005FD8                 db    0
.eh_frame:0000000000005FD9                 db  42h ; B
.eh_frame:0000000000005FDA                 db  0Eh
.eh_frame:0000000000005FDB                 db  10h
.eh_frame:0000000000005FDC                 db  8Ch
.eh_frame:0000000000005FDD                 db    2
.eh_frame:0000000000005FDE                 db  41h ; A
.eh_frame:0000000000005FDF                 db  0Eh
.eh_frame:0000000000005FE0                 db  18h
.eh_frame:0000000000005FE1                 db  86h
.eh_frame:0000000000005FE2                 db    3
.eh_frame:0000000000005FE3                 db  44h ; D
.eh_frame:0000000000005FE4                 db  0Eh
.eh_frame:0000000000005FE5                 db  20h
.eh_frame:0000000000005FE6                 db  83h
.eh_frame:0000000000005FE7                 db    4
.eh_frame:0000000000005FE8                 db  69h ; i
.eh_frame:0000000000005FE9                 db  0Ah
.eh_frame:0000000000005FEA                 db  0Eh
.eh_frame:0000000000005FEB                 db  18h
.eh_frame:0000000000005FEC                 db  41h ; A
.eh_frame:0000000000005FED                 db  0Eh
.eh_frame:0000000000005FEE                 db  10h
.eh_frame:0000000000005FEF                 db  42h ; B
.eh_frame:0000000000005FF0                 db  0Eh
.eh_frame:0000000000005FF1                 db    8
.eh_frame:0000000000005FF2                 db  45h ; E
.eh_frame:0000000000005FF3                 db  0Bh
.eh_frame:0000000000005FF4                 db  55h ; U
.eh_frame:0000000000005FF5                 db  0Ah
.eh_frame:0000000000005FF6                 db  0Eh
.eh_frame:0000000000005FF7                 db  18h
.eh_frame:0000000000005FF8                 db  41h ; A
.eh_frame:0000000000005FF9                 db  0Eh
.eh_frame:0000000000005FFA                 db  10h
.eh_frame:0000000000005FFB                 db  42h ; B
.eh_frame:0000000000005FFC                 db  0Eh
.eh_frame:0000000000005FFD                 db    8
.eh_frame:0000000000005FFE                 db  48h ; H
.eh_frame:0000000000005FFF                 db  0Bh
.eh_frame:0000000000006000                 db  41h ; A
.eh_frame:0000000000006001                 db  0Ah
.eh_frame:0000000000006002                 db  0Eh
.eh_frame:0000000000006003                 db  18h
.eh_frame:0000000000006004                 db  46h ; F
.eh_frame:0000000000006005                 db  0Eh
.eh_frame:0000000000006006                 db  10h
.eh_frame:0000000000006007                 db  42h ; B
.eh_frame:0000000000006008                 db  0Eh
.eh_frame:0000000000006009                 db    8
.eh_frame:000000000000600A                 db  47h ; G
.eh_frame:000000000000600B                 db  0Bh
.eh_frame:000000000000600C                 db  49h ; I
.eh_frame:000000000000600D                 db  0Eh
.eh_frame:000000000000600E                 db  18h
.eh_frame:000000000000600F                 db  41h ; A
.eh_frame:0000000000006010                 db  0Eh
.eh_frame:0000000000006011                 db  10h
.eh_frame:0000000000006012                 db  42h ; B
.eh_frame:0000000000006013                 db  0Eh
.eh_frame:0000000000006014                 db    8
.eh_frame:0000000000006015                 db    0
.eh_frame:0000000000006016                 db    0
.eh_frame:0000000000006017                 db    0
.eh_frame:0000000000006018                 db  1Ch
.eh_frame:0000000000006019                 db    0
.eh_frame:000000000000601A                 db    0
.eh_frame:000000000000601B                 db    0
.eh_frame:000000000000601C                 db  1Ch
.eh_frame:000000000000601D                 db    9
.eh_frame:000000000000601E                 db    0
.eh_frame:000000000000601F                 db    0
.eh_frame:0000000000006020                 db 0F0h
.eh_frame:0000000000006021                 db 0E3h
.eh_frame:0000000000006022                 db 0FFh
.eh_frame:0000000000006023                 db 0FFh
.eh_frame:0000000000006024                 db  60h ; `
.eh_frame:0000000000006025                 db    0
.eh_frame:0000000000006026                 db    0
.eh_frame:0000000000006027                 db    0
.eh_frame:0000000000006028                 db    0
.eh_frame:0000000000006029                 db  44h ; D
.eh_frame:000000000000602A                 db  0Eh
.eh_frame:000000000000602B                 db  10h
.eh_frame:000000000000602C                 db  75h ; u
.eh_frame:000000000000602D                 db  0Ah
.eh_frame:000000000000602E                 db  0Eh
.eh_frame:000000000000602F                 db    8
.eh_frame:0000000000006030                 db  47h ; G
.eh_frame:0000000000006031                 db  0Bh
.eh_frame:0000000000006032                 db  5Fh ; _
.eh_frame:0000000000006033                 db  0Eh
.eh_frame:0000000000006034                 db    8
.eh_frame:0000000000006035                 db    0
.eh_frame:0000000000006036                 db    0
.eh_frame:0000000000006037                 db    0
.eh_frame:0000000000006038                 db  1Ch
.eh_frame:0000000000006039                 db    0
.eh_frame:000000000000603A                 db    0
.eh_frame:000000000000603B                 db    0
.eh_frame:000000000000603C                 db  3Ch ; <
.eh_frame:000000000000603D                 db    9
.eh_frame:000000000000603E                 db    0
.eh_frame:000000000000603F                 db    0
.eh_frame:0000000000006040                 db  30h ; 0
.eh_frame:0000000000006041                 db 0E4h
.eh_frame:0000000000006042                 db 0FFh
.eh_frame:0000000000006043                 db 0FFh
.eh_frame:0000000000006044                 db  3Ch ; <
.eh_frame:0000000000006045                 db    0
.eh_frame:0000000000006046                 db    0
.eh_frame:0000000000006047                 db    0
.eh_frame:0000000000006048                 db    0
.eh_frame:0000000000006049                 db  44h ; D
.eh_frame:000000000000604A                 db  0Eh
.eh_frame:000000000000604B                 db  10h
.eh_frame:000000000000604C                 db  61h ; a
.eh_frame:000000000000604D                 db  0Ah
.eh_frame:000000000000604E                 db  0Eh
.eh_frame:000000000000604F                 db    8
.eh_frame:0000000000006050                 db  4Bh ; K
.eh_frame:0000000000006051                 db  0Bh
.eh_frame:0000000000006052                 db  4Bh ; K
.eh_frame:0000000000006053                 db  0Eh
.eh_frame:0000000000006054                 db    8
.eh_frame:0000000000006055                 db    0
.eh_frame:0000000000006056                 db    0
.eh_frame:0000000000006057                 db    0
.eh_frame:0000000000006058                 db  34h ; 4
.eh_frame:0000000000006059                 db    0
.eh_frame:000000000000605A                 db    0
.eh_frame:000000000000605B                 db    0
.eh_frame:000000000000605C                 db  5Ch ; \
.eh_frame:000000000000605D                 db    9
.eh_frame:000000000000605E                 db    0
.eh_frame:000000000000605F                 db    0
.eh_frame:0000000000006060                 db  50h ; P
.eh_frame:0000000000006061                 db 0E4h
.eh_frame:0000000000006062                 db 0FFh
.eh_frame:0000000000006063                 db 0FFh
.eh_frame:0000000000006064                 db  7Bh ; {
.eh_frame:0000000000006065                 db    0
.eh_frame:0000000000006066                 db    0
.eh_frame:0000000000006067                 db    0
.eh_frame:0000000000006068                 db    0
.eh_frame:0000000000006069                 db  42h ; B
.eh_frame:000000000000606A                 db  0Eh
.eh_frame:000000000000606B                 db  10h
.eh_frame:000000000000606C                 db  8Ch
.eh_frame:000000000000606D                 db    2
.eh_frame:000000000000606E                 db  41h ; A
.eh_frame:000000000000606F                 db  0Eh
.eh_frame:0000000000006070                 db  18h
.eh_frame:0000000000006071                 db  86h
.eh_frame:0000000000006072                 db    3
.eh_frame:0000000000006073                 db  41h ; A
.eh_frame:0000000000006074                 db  0Eh
.eh_frame:0000000000006075                 db  20h
.eh_frame:0000000000006076                 db  83h
.eh_frame:0000000000006077                 db    4
.eh_frame:0000000000006078                 db  7Dh ; }
.eh_frame:0000000000006079                 db  0Ah
.eh_frame:000000000000607A                 db  0Eh
.eh_frame:000000000000607B                 db  18h
.eh_frame:000000000000607C                 db  41h ; A
.eh_frame:000000000000607D                 db  0Eh
.eh_frame:000000000000607E                 db  10h
.eh_frame:000000000000607F                 db  42h ; B
.eh_frame:0000000000006080                 db  0Eh
.eh_frame:0000000000006081                 db    8
.eh_frame:0000000000006082                 db  44h ; D
.eh_frame:0000000000006083                 db  0Bh
.eh_frame:0000000000006084                 db  60h ; `
.eh_frame:0000000000006085                 db  0Ah
.eh_frame:0000000000006086                 db  0Eh
.eh_frame:0000000000006087                 db  18h
.eh_frame:0000000000006088                 db  41h ; A
.eh_frame:0000000000006089                 db  0Eh
.eh_frame:000000000000608A                 db  10h
.eh_frame:000000000000608B                 db  42h ; B
.eh_frame:000000000000608C                 db  0Eh
.eh_frame:000000000000608D                 db    8
.eh_frame:000000000000608E                 db  45h ; E
.eh_frame:000000000000608F                 db  0Bh
.eh_frame:0000000000006090                 db  1Ch
.eh_frame:0000000000006091                 db    0
.eh_frame:0000000000006092                 db    0
.eh_frame:0000000000006093                 db    0
.eh_frame:0000000000006094                 db  94h
.eh_frame:0000000000006095                 db    9
.eh_frame:0000000000006096                 db    0
.eh_frame:0000000000006097                 db    0
.eh_frame:0000000000006098                 db  98h
.eh_frame:0000000000006099                 db 0E4h
.eh_frame:000000000000609A                 db 0FFh
.eh_frame:000000000000609B                 db 0FFh
.eh_frame:000000000000609C                 db  40h ; @
.eh_frame:000000000000609D                 db    0
.eh_frame:000000000000609E                 db    0
.eh_frame:000000000000609F                 db    0
.eh_frame:00000000000060A0                 db    0
.eh_frame:00000000000060A1                 db  44h ; D
.eh_frame:00000000000060A2                 db  0Eh
.eh_frame:00000000000060A3                 db  10h
.eh_frame:00000000000060A4                 db  83h
.eh_frame:00000000000060A5                 db    2
.eh_frame:00000000000060A6                 db  5Ah ; Z
.eh_frame:00000000000060A7                 db  0Ah
.eh_frame:00000000000060A8                 db  0Eh
.eh_frame:00000000000060A9                 db    8
.eh_frame:00000000000060AA                 db  4Ah ; J
.eh_frame:00000000000060AB                 db  0Bh
.eh_frame:00000000000060AC                 db  53h ; S
.eh_frame:00000000000060AD                 db  0Eh
.eh_frame:00000000000060AE                 db    8
.eh_frame:00000000000060AF                 db    0
.eh_frame:00000000000060B0                 db  2Ch ; ,
.eh_frame:00000000000060B1                 db    0
.eh_frame:00000000000060B2                 db    0
.eh_frame:00000000000060B3                 db    0
.eh_frame:00000000000060B4                 db 0B4h
.eh_frame:00000000000060B5                 db    9
.eh_frame:00000000000060B6                 db    0
.eh_frame:00000000000060B7                 db    0
.eh_frame:00000000000060B8                 db 0B8h
.eh_frame:00000000000060B9                 db 0E4h
.eh_frame:00000000000060BA                 db 0FFh
.eh_frame:00000000000060BB                 db 0FFh
.eh_frame:00000000000060BC                 db  57h ; W
.eh_frame:00000000000060BD                 db    0
.eh_frame:00000000000060BE                 db    0
.eh_frame:00000000000060BF                 db    0
.eh_frame:00000000000060C0                 db    0
.eh_frame:00000000000060C1                 db  63h ; c
.eh_frame:00000000000060C2                 db  0Eh
.eh_frame:00000000000060C3                 db  10h
.eh_frame:00000000000060C4                 db  8Ch
.eh_frame:00000000000060C5                 db    2
.eh_frame:00000000000060C6                 db  41h ; A
.eh_frame:00000000000060C7                 db  0Eh
.eh_frame:00000000000060C8                 db  18h
.eh_frame:00000000000060C9                 db  86h
.eh_frame:00000000000060CA                 db    3
.eh_frame:00000000000060CB                 db  44h ; D
.eh_frame:00000000000060CC                 db  0Eh
.eh_frame:00000000000060CD                 db  20h
.eh_frame:00000000000060CE                 db  83h
.eh_frame:00000000000060CF                 db    4
.eh_frame:00000000000060D0                 db  6Bh ; k
.eh_frame:00000000000060D1                 db  0Eh
.eh_frame:00000000000060D2                 db  18h
.eh_frame:00000000000060D3                 db  41h ; A
.eh_frame:00000000000060D4                 db  0Eh
.eh_frame:00000000000060D5                 db  10h
.eh_frame:00000000000060D6                 db  42h ; B
.eh_frame:00000000000060D7                 db  0Eh
.eh_frame:00000000000060D8                 db    8
.eh_frame:00000000000060D9                 db    0
.eh_frame:00000000000060DA                 db    0
.eh_frame:00000000000060DB                 db    0
.eh_frame:00000000000060DC                 db    0
.eh_frame:00000000000060DD                 db    0
.eh_frame:00000000000060DE                 db    0
.eh_frame:00000000000060DF                 db    0
.eh_frame:00000000000060E0                 db  44h ; D
.eh_frame:00000000000060E1                 db    0
.eh_frame:00000000000060E2                 db    0
.eh_frame:00000000000060E3                 db    0
.eh_frame:00000000000060E4                 db 0E4h
.eh_frame:00000000000060E5                 db    9
.eh_frame:00000000000060E6                 db    0
.eh_frame:00000000000060E7                 db    0
.eh_frame:00000000000060E8                 db 0E8h
.eh_frame:00000000000060E9                 db 0E4h
.eh_frame:00000000000060EA                 db 0FFh
.eh_frame:00000000000060EB                 db 0FFh
.eh_frame:00000000000060EC                 db  65h ; e
.eh_frame:00000000000060ED                 db    0
.eh_frame:00000000000060EE                 db    0
.eh_frame:00000000000060EF                 db    0
.eh_frame:00000000000060F0                 db    0
.eh_frame:00000000000060F1                 db  42h ; B
.eh_frame:00000000000060F2                 db  0Eh
.eh_frame:00000000000060F3                 db  10h
.eh_frame:00000000000060F4                 db  8Fh
.eh_frame:00000000000060F5                 db    2
.eh_frame:00000000000060F6                 db  42h ; B
.eh_frame:00000000000060F7                 db  0Eh
.eh_frame:00000000000060F8                 db  18h
.eh_frame:00000000000060F9                 db  8Eh
.eh_frame:00000000000060FA                 db    3
.eh_frame:00000000000060FB                 db  45h ; E
.eh_frame:00000000000060FC                 db  0Eh
.eh_frame:00000000000060FD                 db  20h
.eh_frame:00000000000060FE                 db  8Dh
.eh_frame:00000000000060FF                 db    4
.eh_frame:0000000000006100                 db  42h ; B
.eh_frame:0000000000006101                 db  0Eh
.eh_frame:0000000000006102                 db  28h ; (
.eh_frame:0000000000006103                 db  8Ch
.eh_frame:0000000000006104                 db    5
.eh_frame:0000000000006105                 db  48h ; H
.eh_frame:0000000000006106                 db  0Eh
.eh_frame:0000000000006107                 db  30h ; 0
.eh_frame:0000000000006108                 db  86h
.eh_frame:0000000000006109                 db    6
.eh_frame:000000000000610A                 db  48h ; H
.eh_frame:000000000000610B                 db  0Eh
.eh_frame:000000000000610C                 db  38h ; 8
.eh_frame:000000000000610D                 db  83h
.eh_frame:000000000000610E                 db    7
.eh_frame:000000000000610F                 db  4Dh ; M
.eh_frame:0000000000006110                 db  0Eh
.eh_frame:0000000000006111                 db  40h ; @
.eh_frame:0000000000006112                 db  72h ; r
.eh_frame:0000000000006113                 db  0Eh
.eh_frame:0000000000006114                 db  38h ; 8
.eh_frame:0000000000006115                 db  41h ; A
.eh_frame:0000000000006116                 db  0Eh
.eh_frame:0000000000006117                 db  30h ; 0
.eh_frame:0000000000006118                 db  41h ; A
.eh_frame:0000000000006119                 db  0Eh
.eh_frame:000000000000611A                 db  28h ; (
.eh_frame:000000000000611B                 db  42h ; B
.eh_frame:000000000000611C                 db  0Eh
.eh_frame:000000000000611D                 db  20h
.eh_frame:000000000000611E                 db  42h ; B
.eh_frame:000000000000611F                 db  0Eh
.eh_frame:0000000000006120                 db  18h
.eh_frame:0000000000006121                 db  42h ; B
.eh_frame:0000000000006122                 db  0Eh
.eh_frame:0000000000006123                 db  10h
.eh_frame:0000000000006124                 db  42h ; B
.eh_frame:0000000000006125                 db  0Eh
.eh_frame:0000000000006126                 db    8
.eh_frame:0000000000006127                 db    0
.eh_frame:0000000000006128                 db  14h
.eh_frame:0000000000006129                 db    0
.eh_frame:000000000000612A                 db    0
.eh_frame:000000000000612B                 db    0
.eh_frame:000000000000612C                 db  2Ch ; ,
.eh_frame:000000000000612D                 db  0Ah
.eh_frame:000000000000612E                 db    0
.eh_frame:000000000000612F                 db    0
.eh_frame:0000000000006130                 db  10h
.eh_frame:0000000000006131                 db 0E5h
.eh_frame:0000000000006132                 db 0FFh
.eh_frame:0000000000006133                 db 0FFh
.eh_frame:0000000000006134                 db    2
.eh_frame:0000000000006135                 db    0
.eh_frame:0000000000006136                 db    0
.eh_frame:0000000000006137                 db    0
.eh_frame:0000000000006138                 db    0
.eh_frame:0000000000006139                 db    0
.eh_frame:000000000000613A                 db    0
.eh_frame:000000000000613B                 db    0
.eh_frame:000000000000613C                 db    0
.eh_frame:000000000000613D                 db    0
.eh_frame:000000000000613E                 db    0
.eh_frame:000000000000613F                 db    0
.eh_frame:0000000000006140                 db  10h
.eh_frame:0000000000006141                 db    0
.eh_frame:0000000000006142                 db    0
.eh_frame:0000000000006143                 db    0
.eh_frame:0000000000006144                 db  44h ; D
.eh_frame:0000000000006145                 db  0Ah
.eh_frame:0000000000006146                 db    0
.eh_frame:0000000000006147                 db    0
.eh_frame:0000000000006148                 db    8
.eh_frame:0000000000006149                 db 0E5h
.eh_frame:000000000000614A                 db 0FFh
.eh_frame:000000000000614B                 db 0FFh
.eh_frame:000000000000614C                 db  0Eh
.eh_frame:000000000000614D                 db    0
.eh_frame:000000000000614E                 db    0
.eh_frame:000000000000614F                 db    0
.eh_frame:0000000000006150                 db    0
.eh_frame:0000000000006151                 db    0
.eh_frame:0000000000006152                 db    0
.eh_frame:0000000000006153                 db    0
.eh_frame:0000000000006154 __FRAME_END__   db    0
.eh_frame:0000000000006155                 db    0
.eh_frame:0000000000006156                 db    0
.eh_frame:0000000000006157                 db    0
.eh_frame:0000000000006157 _eh_frame       ends
.eh_frame:0000000000006157
.init_array:0000000000206B30 ; ELF Initialization Function Table
.init_array:0000000000206B30 ; ===========================================================================
.init_array:0000000000206B30
.init_array:0000000000206B30 ; Segment type: Pure data
.init_array:0000000000206B30 ; Segment permissions: Read/Write
.init_array:0000000000206B30 _init_array     segment qword public 'DATA' use64
.init_array:0000000000206B30                 assume cs:_init_array
.init_array:0000000000206B30                 ;org 206B30h
.init_array:0000000000206B30 __frame_dummy_init_array_entry dq offset frame_dummy
.init_array:0000000000206B30                                         ; DATA XREF: LOAD:00000000000000F8↑o
.init_array:0000000000206B30                                         ; LOAD:0000000000000210↑o ...
.init_array:0000000000206B30 _init_array     ends                    ; Alternative name is '__init_array_start'
.init_array:0000000000206B30
.fini_array:0000000000206B38 ; ELF Termination Function Table
.fini_array:0000000000206B38 ; ===========================================================================
.fini_array:0000000000206B38
.fini_array:0000000000206B38 ; Segment type: Pure data
.fini_array:0000000000206B38 ; Segment permissions: Read/Write
.fini_array:0000000000206B38 _fini_array     segment qword public 'DATA' use64
.fini_array:0000000000206B38                 assume cs:_fini_array
.fini_array:0000000000206B38                 ;org 206B38h
.fini_array:0000000000206B38 __do_global_dtors_aux_fini_array_entry dq offset __do_global_dtors_aux
.fini_array:0000000000206B38                                         ; DATA XREF: __libc_csu_init+13↑o
.fini_array:0000000000206B38 _fini_array     ends                    ; Alternative name is '__init_array_end'
.fini_array:0000000000206B38
.data.rel.ro:0000000000206B40 ; ===========================================================================
.data.rel.ro:0000000000206B40
.data.rel.ro:0000000000206B40 ; Segment type: Pure data
.data.rel.ro:0000000000206B40 ; Segment permissions: Read/Write
.data.rel.ro:0000000000206B40 _data_rel_ro    segment align_32 public 'DATA' use64
.data.rel.ro:0000000000206B40                 assume cs:_data_rel_ro
.data.rel.ro:0000000000206B40                 ;org 206B40h
.data.rel.ro:0000000000206B40 ; struct option long_options
.data.rel.ro:0000000000206B40 long_options    dq offset aRole         ; name
.data.rel.ro:0000000000206B40                                         ; DATA XREF: main:loc_1532↑o
.data.rel.ro:0000000000206B40                 dd 1                    ; has_arg ; "role"
.data.rel.ro:0000000000206B40                 db 4 dup(0)
.data.rel.ro:0000000000206B40                 dq 0                    ; flag
.data.rel.ro:0000000000206B40                 dd 72h                  ; val
.data.rel.ro:0000000000206B40                 db 4 dup(0)
.data.rel.ro:0000000000206B60                 dq offset aType         ; "type"
.data.rel.ro:0000000000206B68                 db    1
.data.rel.ro:0000000000206B69                 db    0
.data.rel.ro:0000000000206B6A                 db    0
.data.rel.ro:0000000000206B6B                 db    0
.data.rel.ro:0000000000206B6C                 db    0
.data.rel.ro:0000000000206B6D                 db    0
.data.rel.ro:0000000000206B6E                 db    0
.data.rel.ro:0000000000206B6F                 db    0
.data.rel.ro:0000000000206B70                 db    0
.data.rel.ro:0000000000206B71                 db    0
.data.rel.ro:0000000000206B72                 db    0
.data.rel.ro:0000000000206B73                 db    0
.data.rel.ro:0000000000206B74                 db    0
.data.rel.ro:0000000000206B75                 db    0
.data.rel.ro:0000000000206B76                 db    0
.data.rel.ro:0000000000206B77                 db    0
.data.rel.ro:0000000000206B78                 db  74h ; t
.data.rel.ro:0000000000206B79                 db    0
.data.rel.ro:0000000000206B7A                 db    0
.data.rel.ro:0000000000206B7B                 db    0
.data.rel.ro:0000000000206B7C                 db    0
.data.rel.ro:0000000000206B7D                 db    0
.data.rel.ro:0000000000206B7E                 db    0
.data.rel.ro:0000000000206B7F                 db    0
.data.rel.ro:0000000000206B80                 dq offset aUser         ; "user"
.data.rel.ro:0000000000206B88                 db    1
.data.rel.ro:0000000000206B89                 db    0
.data.rel.ro:0000000000206B8A                 db    0
.data.rel.ro:0000000000206B8B                 db    0
.data.rel.ro:0000000000206B8C                 db    0
.data.rel.ro:0000000000206B8D                 db    0
.data.rel.ro:0000000000206B8E                 db    0
.data.rel.ro:0000000000206B8F                 db    0
.data.rel.ro:0000000000206B90                 db    0
.data.rel.ro:0000000000206B91                 db    0
.data.rel.ro:0000000000206B92                 db    0
.data.rel.ro:0000000000206B93                 db    0
.data.rel.ro:0000000000206B94                 db    0
.data.rel.ro:0000000000206B95                 db    0
.data.rel.ro:0000000000206B96                 db    0
.data.rel.ro:0000000000206B97                 db    0
.data.rel.ro:0000000000206B98                 db  75h ; u
.data.rel.ro:0000000000206B99                 db    0
.data.rel.ro:0000000000206B9A                 db    0
.data.rel.ro:0000000000206B9B                 db    0
.data.rel.ro:0000000000206B9C                 db    0
.data.rel.ro:0000000000206B9D                 db    0
.data.rel.ro:0000000000206B9E                 db    0
.data.rel.ro:0000000000206B9F                 db    0
.data.rel.ro:0000000000206BA0                 dq offset aRange        ; "range"
.data.rel.ro:0000000000206BA8                 db    1
.data.rel.ro:0000000000206BA9                 db    0
.data.rel.ro:0000000000206BAA                 db    0
.data.rel.ro:0000000000206BAB                 db    0
.data.rel.ro:0000000000206BAC                 db    0
.data.rel.ro:0000000000206BAD                 db    0
.data.rel.ro:0000000000206BAE                 db    0
.data.rel.ro:0000000000206BAF                 db    0
.data.rel.ro:0000000000206BB0                 db    0
.data.rel.ro:0000000000206BB1                 db    0
.data.rel.ro:0000000000206BB2                 db    0
.data.rel.ro:0000000000206BB3                 db    0
.data.rel.ro:0000000000206BB4                 db    0
.data.rel.ro:0000000000206BB5                 db    0
.data.rel.ro:0000000000206BB6                 db    0
.data.rel.ro:0000000000206BB7                 db    0
.data.rel.ro:0000000000206BB8                 db  6Ch ; l
.data.rel.ro:0000000000206BB9                 db    0
.data.rel.ro:0000000000206BBA                 db    0
.data.rel.ro:0000000000206BBB                 db    0
.data.rel.ro:0000000000206BBC                 db    0
.data.rel.ro:0000000000206BBD                 db    0
.data.rel.ro:0000000000206BBE                 db    0
.data.rel.ro:0000000000206BBF                 db    0
.data.rel.ro:0000000000206BC0                 dq offset aCompute      ; "compute"
.data.rel.ro:0000000000206BC8                 db    0
.data.rel.ro:0000000000206BC9                 db    0
.data.rel.ro:0000000000206BCA                 db    0
.data.rel.ro:0000000000206BCB                 db    0
.data.rel.ro:0000000000206BCC                 db    0
.data.rel.ro:0000000000206BCD                 db    0
.data.rel.ro:0000000000206BCE                 db    0
.data.rel.ro:0000000000206BCF                 db    0
.data.rel.ro:0000000000206BD0                 db    0
.data.rel.ro:0000000000206BD1                 db    0
.data.rel.ro:0000000000206BD2                 db    0
.data.rel.ro:0000000000206BD3                 db    0
.data.rel.ro:0000000000206BD4                 db    0
.data.rel.ro:0000000000206BD5                 db    0
.data.rel.ro:0000000000206BD6                 db    0
.data.rel.ro:0000000000206BD7                 db    0
.data.rel.ro:0000000000206BD8                 db  63h ; c
.data.rel.ro:0000000000206BD9                 db    0
.data.rel.ro:0000000000206BDA                 db    0
.data.rel.ro:0000000000206BDB                 db    0
.data.rel.ro:0000000000206BDC                 db    0
.data.rel.ro:0000000000206BDD                 db    0
.data.rel.ro:0000000000206BDE                 db    0
.data.rel.ro:0000000000206BDF                 db    0
.data.rel.ro:0000000000206BE0                 dq offset aHelp         ; "help"
.data.rel.ro:0000000000206BE8                 db    0
.data.rel.ro:0000000000206BE9                 db    0
.data.rel.ro:0000000000206BEA                 db    0
.data.rel.ro:0000000000206BEB                 db    0
.data.rel.ro:0000000000206BEC                 db    0
.data.rel.ro:0000000000206BED                 db    0
.data.rel.ro:0000000000206BEE                 db    0
.data.rel.ro:0000000000206BEF                 db    0
.data.rel.ro:0000000000206BF0                 db    0
.data.rel.ro:0000000000206BF1                 db    0
.data.rel.ro:0000000000206BF2                 db    0
.data.rel.ro:0000000000206BF3                 db    0
.data.rel.ro:0000000000206BF4                 db    0
.data.rel.ro:0000000000206BF5                 db    0
.data.rel.ro:0000000000206BF6                 db    0
.data.rel.ro:0000000000206BF7                 db    0
.data.rel.ro:0000000000206BF8                 db  7Eh ; ~
.data.rel.ro:0000000000206BF9                 db 0FFh
.data.rel.ro:0000000000206BFA                 db 0FFh
.data.rel.ro:0000000000206BFB                 db 0FFh
.data.rel.ro:0000000000206BFC                 db    0
.data.rel.ro:0000000000206BFD                 db    0
.data.rel.ro:0000000000206BFE                 db    0
.data.rel.ro:0000000000206BFF                 db    0
.data.rel.ro:0000000000206C00                 dq offset aVersion      ; "version"
.data.rel.ro:0000000000206C08                 db    0
.data.rel.ro:0000000000206C09                 db    0
.data.rel.ro:0000000000206C0A                 db    0
.data.rel.ro:0000000000206C0B                 db    0
.data.rel.ro:0000000000206C0C                 db    0
.data.rel.ro:0000000000206C0D                 db    0
.data.rel.ro:0000000000206C0E                 db    0
.data.rel.ro:0000000000206C0F                 db    0
.data.rel.ro:0000000000206C10                 db    0
.data.rel.ro:0000000000206C11                 db    0
.data.rel.ro:0000000000206C12                 db    0
.data.rel.ro:0000000000206C13                 db    0
.data.rel.ro:0000000000206C14                 db    0
.data.rel.ro:0000000000206C15                 db    0
.data.rel.ro:0000000000206C16                 db    0
.data.rel.ro:0000000000206C17                 db    0
.data.rel.ro:0000000000206C18                 db  7Dh ; }
.data.rel.ro:0000000000206C19                 db 0FFh
.data.rel.ro:0000000000206C1A                 db 0FFh
.data.rel.ro:0000000000206C1B                 db 0FFh
.data.rel.ro:0000000000206C1C                 db    0
.data.rel.ro:0000000000206C1D                 db    0
.data.rel.ro:0000000000206C1E                 db    0
.data.rel.ro:0000000000206C1F                 db    0
.data.rel.ro:0000000000206C20                 db    0
.data.rel.ro:0000000000206C21                 db    0
.data.rel.ro:0000000000206C22                 db    0
.data.rel.ro:0000000000206C23                 db    0
.data.rel.ro:0000000000206C24                 db    0
.data.rel.ro:0000000000206C25                 db    0
.data.rel.ro:0000000000206C26                 db    0
.data.rel.ro:0000000000206C27                 db    0
.data.rel.ro:0000000000206C28                 db    0
.data.rel.ro:0000000000206C29                 db    0
.data.rel.ro:0000000000206C2A                 db    0
.data.rel.ro:0000000000206C2B                 db    0
.data.rel.ro:0000000000206C2C                 db    0
.data.rel.ro:0000000000206C2D                 db    0
.data.rel.ro:0000000000206C2E                 db    0
.data.rel.ro:0000000000206C2F                 db    0
.data.rel.ro:0000000000206C30                 db    0
.data.rel.ro:0000000000206C31                 db    0
.data.rel.ro:0000000000206C32                 db    0
.data.rel.ro:0000000000206C33                 db    0
.data.rel.ro:0000000000206C34                 db    0
.data.rel.ro:0000000000206C35                 db    0
.data.rel.ro:0000000000206C36                 db    0
.data.rel.ro:0000000000206C37                 db    0
.data.rel.ro:0000000000206C38                 db    0
.data.rel.ro:0000000000206C39                 db    0
.data.rel.ro:0000000000206C3A                 db    0
.data.rel.ro:0000000000206C3B                 db    0
.data.rel.ro:0000000000206C3C                 db    0
.data.rel.ro:0000000000206C3D                 db    0
.data.rel.ro:0000000000206C3E                 db    0
.data.rel.ro:0000000000206C3F                 db    0
.data.rel.ro:0000000000206C40                 public quoting_style_args
.data.rel.ro:0000000000206C40 quoting_style_args dq offset aLiteral   ; "literal"
.data.rel.ro:0000000000206C48                 dq offset aShell        ; "shell"
.data.rel.ro:0000000000206C50                 dq offset aShellAlways  ; "shell-always"
.data.rel.ro:0000000000206C58                 dq offset aShellEscape  ; "shell-escape"
.data.rel.ro:0000000000206C60                 dq offset aShellEscapeAlw ; "shell-escape-always"
.data.rel.ro:0000000000206C68                 dq offset shortopts+9   ; "c"
.data.rel.ro:0000000000206C70                 dq offset aCMaybe       ; "c-maybe"
.data.rel.ro:0000000000206C78                 dq offset aShellEscape+6 ; "escape"
.data.rel.ro:0000000000206C80                 dq offset dirname+11h   ; "locale"
.data.rel.ro:0000000000206C88                 dq offset aClocale      ; "clocale"
.data.rel.ro:0000000000206C90                 db    0
.data.rel.ro:0000000000206C91                 db    0
.data.rel.ro:0000000000206C92                 db    0
.data.rel.ro:0000000000206C93                 db    0
.data.rel.ro:0000000000206C94                 db    0
.data.rel.ro:0000000000206C95                 db    0
.data.rel.ro:0000000000206C96                 db    0
.data.rel.ro:0000000000206C97                 db    0
.data.rel.ro:0000000000206C97 _data_rel_ro    ends
.data.rel.ro:0000000000206C97
LOAD:0000000000206C98 ; ELF Dynamic Information
LOAD:0000000000206C98 ; ===========================================================================
LOAD:0000000000206C98
LOAD:0000000000206C98 ; Segment type: Pure data
LOAD:0000000000206C98 ; Segment permissions: Read/Write
LOAD:0000000000206C98 LOAD            segment byte public 'DATA' use64
LOAD:0000000000206C98                 assume cs:LOAD
LOAD:0000000000206C98                 ;org 206C98h
LOAD:0000000000206C98 _DYNAMIC        Elf64_Dyn <1, 1>        ; DATA XREF: LOAD:0000000000000130↑o
LOAD:0000000000206C98                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:0000000000206C98                                         ; DT_NEEDED libc.so.6
LOAD:0000000000206CA8                 Elf64_Dyn <0Ch, 1200h>  ; DT_INIT
LOAD:0000000000206CB8                 Elf64_Dyn <0Dh, 4660h>  ; DT_FINI
LOAD:0000000000206CC8                 Elf64_Dyn <19h, 206B30h> ; DT_INIT_ARRAY
LOAD:0000000000206CD8                 Elf64_Dyn <1Bh, 8>      ; DT_INIT_ARRAYSZ
LOAD:0000000000206CE8                 Elf64_Dyn <1Ah, 206B38h> ; DT_FINI_ARRAY
LOAD:0000000000206CF8                 Elf64_Dyn <1Ch, 8>      ; DT_FINI_ARRAYSZ
LOAD:0000000000206D08                 Elf64_Dyn <6FFFFEF5h, 298h> ; DT_GNU_HASH
LOAD:0000000000206D18                 Elf64_Dyn <5, 7D8h>     ; DT_STRTAB
LOAD:0000000000206D28                 Elf64_Dyn <6, 2E0h>     ; DT_SYMTAB
LOAD:0000000000206D38                 Elf64_Dyn <0Ah, 27Fh>   ; DT_STRSZ
LOAD:0000000000206D48                 Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
LOAD:0000000000206D58                 Elf64_Dyn <15h, 0>      ; DT_DEBUG
LOAD:0000000000206D68                 Elf64_Dyn <3, 206E88h>  ; DT_PLTGOT
LOAD:0000000000206D78                 Elf64_Dyn <2, 3A8h>     ; DT_PLTRELSZ
LOAD:0000000000206D88                 Elf64_Dyn <14h, 7>      ; DT_PLTREL
LOAD:0000000000206D98                 Elf64_Dyn <17h, 0E58h>  ; DT_JMPREL
LOAD:0000000000206DA8                 Elf64_Dyn <7, 0B28h>    ; DT_RELA
LOAD:0000000000206DB8                 Elf64_Dyn <8, 330h>     ; DT_RELASZ
LOAD:0000000000206DC8                 Elf64_Dyn <9, 18h>      ; DT_RELAENT
LOAD:0000000000206DD8                 Elf64_Dyn <1Eh, 8>      ; DT_FLAGS
LOAD:0000000000206DE8                 Elf64_Dyn <6FFFFFFBh, 8000001h> ; DT_FLAGS_1
LOAD:0000000000206DF8                 Elf64_Dyn <6FFFFFFEh, 0AC8h> ; DT_VERNEED
LOAD:0000000000206E08                 Elf64_Dyn <6FFFFFFFh, 1> ; DT_VERNEEDNUM
LOAD:0000000000206E18                 Elf64_Dyn <6FFFFFF0h, 0A58h> ; DT_VERSYM
LOAD:0000000000206E28                 Elf64_Dyn <6FFFFFF9h, 17h> ; DT_RELACOUNT
LOAD:0000000000206E38                 Elf64_Dyn <0>           ; DT_NULL
LOAD:0000000000206E48                 db    0
LOAD:0000000000206E49                 db    0
LOAD:0000000000206E4A                 db    0
LOAD:0000000000206E4B                 db    0
LOAD:0000000000206E4C                 db    0
LOAD:0000000000206E4D                 db    0
LOAD:0000000000206E4E                 db    0
LOAD:0000000000206E4F                 db    0
LOAD:0000000000206E50                 db    0
LOAD:0000000000206E51                 db    0
LOAD:0000000000206E52                 db    0
LOAD:0000000000206E53                 db    0
LOAD:0000000000206E54                 db    0
LOAD:0000000000206E55                 db    0
LOAD:0000000000206E56                 db    0
LOAD:0000000000206E57                 db    0
LOAD:0000000000206E58                 db    0
LOAD:0000000000206E59                 db    0
LOAD:0000000000206E5A                 db    0
LOAD:0000000000206E5B                 db    0
LOAD:0000000000206E5C                 db    0
LOAD:0000000000206E5D                 db    0
LOAD:0000000000206E5E                 db    0
LOAD:0000000000206E5F                 db    0
LOAD:0000000000206E60                 db    0
LOAD:0000000000206E61                 db    0
LOAD:0000000000206E62                 db    0
LOAD:0000000000206E63                 db    0
LOAD:0000000000206E64                 db    0
LOAD:0000000000206E65                 db    0
LOAD:0000000000206E66                 db    0
LOAD:0000000000206E67                 db    0
LOAD:0000000000206E68                 db    0
LOAD:0000000000206E69                 db    0
LOAD:0000000000206E6A                 db    0
LOAD:0000000000206E6B                 db    0
LOAD:0000000000206E6C                 db    0
LOAD:0000000000206E6D                 db    0
LOAD:0000000000206E6E                 db    0
LOAD:0000000000206E6F                 db    0
LOAD:0000000000206E70                 db    0
LOAD:0000000000206E71                 db    0
LOAD:0000000000206E72                 db    0
LOAD:0000000000206E73                 db    0
LOAD:0000000000206E74                 db    0
LOAD:0000000000206E75                 db    0
LOAD:0000000000206E76                 db    0
LOAD:0000000000206E77                 db    0
LOAD:0000000000206E78                 db    0
LOAD:0000000000206E79                 db    0
LOAD:0000000000206E7A                 db    0
LOAD:0000000000206E7B                 db    0
LOAD:0000000000206E7C                 db    0
LOAD:0000000000206E7D                 db    0
LOAD:0000000000206E7E                 db    0
LOAD:0000000000206E7F                 db    0
LOAD:0000000000206E80                 db    0
LOAD:0000000000206E81                 db    0
LOAD:0000000000206E82                 db    0
LOAD:0000000000206E83                 db    0
LOAD:0000000000206E84                 db    0
LOAD:0000000000206E85                 db    0
LOAD:0000000000206E86                 db    0
LOAD:0000000000206E87                 db    0
LOAD:0000000000206E87 LOAD            ends
LOAD:0000000000206E87
.got:0000000000206E88 ; ===========================================================================
.got:0000000000206E88
.got:0000000000206E88 ; Segment type: Pure data
.got:0000000000206E88 ; Segment permissions: Read/Write
.got:0000000000206E88 _got            segment qword public 'DATA' use64
.got:0000000000206E88                 assume cs:_got
.got:0000000000206E88                 ;org 206E88h
.got:0000000000206E88 _GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
.got:0000000000206E90 qword_206E90    dq 0                    ; DATA XREF: sub_1220↑r
.got:0000000000206E98 qword_206E98    dq 0                    ; DATA XREF: sub_1220+6↑r
.got:0000000000206EA0 free_ptr        dq offset free          ; DATA XREF: _free↑r
.got:0000000000206EA8 abort_ptr       dq offset abort         ; DATA XREF: _abort↑r
.got:0000000000206EB0 __errno_location_ptr dq offset __errno_location
.got:0000000000206EB0                                         ; DATA XREF: ___errno_location↑r
.got:0000000000206EB8 strncmp_ptr     dq offset strncmp       ; DATA XREF: _strncmp↑r
.got:0000000000206EC0 _exit_ptr       dq offset _exit         ; DATA XREF: __exit↑r
.got:0000000000206EC8 __fpending_ptr  dq offset __fpending    ; DATA XREF: ___fpending↑r
.got:0000000000206ED0 textdomain_ptr  dq offset textdomain    ; DATA XREF: _textdomain↑r
.got:0000000000206ED8 fclose_ptr      dq offset fclose        ; DATA XREF: _fclose↑r
.got:0000000000206EE0 bindtextdomain_ptr dq offset bindtextdomain
.got:0000000000206EE0                                         ; DATA XREF: _bindtextdomain↑r
.got:0000000000206EE8 dcgettext_ptr   dq offset dcgettext     ; DATA XREF: _dcgettext↑r
.got:0000000000206EF0 __ctype_get_mb_cur_max_ptr dq offset __ctype_get_mb_cur_max
.got:0000000000206EF0                                         ; DATA XREF: ___ctype_get_mb_cur_max↑r
.got:0000000000206EF8 strlen_ptr      dq offset strlen        ; DATA XREF: _strlen↑r
.got:0000000000206F00 __stack_chk_fail_ptr dq offset __stack_chk_fail
.got:0000000000206F00                                         ; DATA XREF: ___stack_chk_fail↑r
.got:0000000000206F08 getopt_long_ptr dq offset getopt_long   ; DATA XREF: _getopt_long↑r
.got:0000000000206F10 mbrtowc_ptr     dq offset mbrtowc       ; DATA XREF: _mbrtowc↑r
.got:0000000000206F18 strrchr_ptr     dq offset strrchr       ; DATA XREF: _strrchr↑r
.got:0000000000206F20 lseek_ptr       dq offset lseek         ; DATA XREF: _lseek↑r
.got:0000000000206F28 memset_ptr      dq offset memset        ; DATA XREF: _memset↑r
.got:0000000000206F30 memcmp_ptr      dq offset memcmp        ; DATA XREF: _memcmp↑r
.got:0000000000206F38 fputs_unlocked_ptr dq offset fputs_unlocked
.got:0000000000206F38                                         ; DATA XREF: _fputs_unlocked↑r
.got:0000000000206F40 calloc_ptr      dq offset calloc        ; DATA XREF: _calloc↑r
.got:0000000000206F48 memcpy_ptr      dq offset memcpy        ; DATA XREF: _memcpy↑r
.got:0000000000206F50 fileno_ptr      dq offset fileno        ; DATA XREF: _fileno↑r
.got:0000000000206F58 malloc_ptr      dq offset malloc        ; DATA XREF: _malloc↑r
.got:0000000000206F60 fflush_ptr      dq offset fflush        ; DATA XREF: _fflush↑r
.got:0000000000206F68 nl_langinfo_ptr dq offset nl_langinfo   ; DATA XREF: _nl_langinfo↑r
.got:0000000000206F70 __freading_ptr  dq offset __freading    ; DATA XREF: ___freading↑r
.got:0000000000206F78 realloc_ptr     dq offset realloc       ; DATA XREF: _realloc↑r
.got:0000000000206F80 setlocale_ptr   dq offset setlocale     ; DATA XREF: _setlocale↑r
.got:0000000000206F88 __printf_chk_ptr dq offset __printf_chk ; DATA XREF: ___printf_chk↑r
.got:0000000000206F90 error_ptr       dq offset error         ; DATA XREF: _error↑r
.got:0000000000206F98 fseeko_ptr      dq offset fseeko        ; DATA XREF: _fseeko↑r
.got:0000000000206FA0 __cxa_atexit_ptr dq offset __cxa_atexit ; DATA XREF: ___cxa_atexit↑r
.got:0000000000206FA8 exit_ptr        dq offset exit          ; DATA XREF: _exit↑r
.got:0000000000206FB0 fwrite_ptr      dq offset fwrite        ; DATA XREF: _fwrite↑r
.got:0000000000206FB8 __fprintf_chk_ptr dq offset __fprintf_chk
.got:0000000000206FB8                                         ; DATA XREF: ___fprintf_chk↑r
.got:0000000000206FC0 mbsinit_ptr     dq offset mbsinit       ; DATA XREF: _mbsinit↑r
.got:0000000000206FC8 iswprint_ptr    dq offset iswprint      ; DATA XREF: _iswprint↑r
.got:0000000000206FD0 __ctype_b_loc_ptr dq offset __ctype_b_loc
.got:0000000000206FD0                                         ; DATA XREF: ___ctype_b_loc↑r
.got:0000000000206FD8 _ITM_deregisterTMCloneTable_ptr dq offset _ITM_deregisterTMCloneTable
.got:0000000000206FD8                                         ; DATA XREF: deregister_tm_clones+17↑r
.got:0000000000206FE0 __libc_start_main_ptr dq offset __libc_start_main
.got:0000000000206FE0                                         ; DATA XREF: start+24↑r
.got:0000000000206FE8 __gmon_start___ptr dq offset __gmon_start__
.got:0000000000206FE8                                         ; DATA XREF: _init_proc+4↑r
.got:0000000000206FF0 _ITM_registerTMCloneTable_ptr dq offset _ITM_registerTMCloneTable
.got:0000000000206FF0                                         ; DATA XREF: register_tm_clones+28↑r
.got:0000000000206FF8 __cxa_finalize_ptr dq offset __imp___cxa_finalize
.got:0000000000206FF8                                         ; DATA XREF: __cxa_finalize↑r
.got:0000000000206FF8                                         ; __do_global_dtors_aux+9↑r
.got:0000000000206FF8 _got            ends
.got:0000000000206FF8
.data:0000000000207000 ; ===========================================================================
.data:0000000000207000
.data:0000000000207000 ; Segment type: Pure data
.data:0000000000207000 ; Segment permissions: Read/Write
.data:0000000000207000 _data           segment align_32 public 'DATA' use64
.data:0000000000207000                 assume cs:_data
.data:0000000000207000                 ;org 207000h
.data:0000000000207000                 public __data_start ; weak
.data:0000000000207000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:0000000000207000                                         ; data_start
.data:0000000000207001                 db    0
.data:0000000000207002                 db    0
.data:0000000000207003                 db    0
.data:0000000000207004                 db    0
.data:0000000000207005                 db    0
.data:0000000000207006                 db    0
.data:0000000000207007                 db    0
.data:0000000000207008                 public __dso_handle
.data:0000000000207008 ; void *_dso_handle
.data:0000000000207008 __dso_handle    dq offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+17↑r
.data:0000000000207008                                         ; atexit↑r ...
.data:0000000000207010                 public Version
.data:0000000000207010 Version         dq offset a831          ; DATA XREF: main+D3↑r
.data:0000000000207010                                         ; "8.31"
.data:0000000000207018                 public exit_failure
.data:0000000000207018 ; int exit_failure
.data:0000000000207018 exit_failure    dd 1                    ; DATA XREF: close_stdout:loc_1CF2↑r
.data:0000000000207018                                         ; xalloc_die+17↑r
.data:000000000020701C                 align 20h
.data:0000000000207020                 public quote_quoting_options
.data:0000000000207020 quote_quoting_options db    8           ; DATA XREF: quote_n_mem↑o
.data:0000000000207020                                         ; quote_mem↑o ...
.data:0000000000207021                 db    0
.data:0000000000207022                 db    0
.data:0000000000207023                 db    0
.data:0000000000207024                 db    0
.data:0000000000207025                 db    0
.data:0000000000207026                 db    0
.data:0000000000207027                 db    0
.data:0000000000207028                 db    0
.data:0000000000207029                 db    0
.data:000000000020702A                 db    0
.data:000000000020702B                 db    0
.data:000000000020702C                 db    0
.data:000000000020702D                 db    0
.data:000000000020702E                 db    0
.data:000000000020702F                 db    0
.data:0000000000207030                 db    0
.data:0000000000207031                 db    0
.data:0000000000207032                 db    0
.data:0000000000207033                 db    0
.data:0000000000207034                 db    0
.data:0000000000207035                 db    0
.data:0000000000207036                 db    0
.data:0000000000207037                 db    0
.data:0000000000207038                 db    0
.data:0000000000207039                 db    0
.data:000000000020703A                 db    0
.data:000000000020703B                 db    0
.data:000000000020703C                 db    0
.data:000000000020703D                 db    0
.data:000000000020703E                 db    0
.data:000000000020703F                 db    0
.data:0000000000207040                 db    0
.data:0000000000207041                 db    0
.data:0000000000207042                 db    0
.data:0000000000207043                 db    0
.data:0000000000207044                 db    0
.data:0000000000207045                 db    0
.data:0000000000207046                 db    0
.data:0000000000207047                 db    0
.data:0000000000207048                 db    0
.data:0000000000207049                 db    0
.data:000000000020704A                 db    0
.data:000000000020704B                 db    0
.data:000000000020704C                 db    0
.data:000000000020704D                 db    0
.data:000000000020704E                 db    0
.data:000000000020704F                 db    0
.data:0000000000207050                 db    0
.data:0000000000207051                 db    0
.data:0000000000207052                 db    0
.data:0000000000207053                 db    0
.data:0000000000207054                 db    0
.data:0000000000207055                 db    0
.data:0000000000207056                 db    0
.data:0000000000207057                 db    0
.data:0000000000207058 nslots          dd 1                    ; DATA XREF: quotearg_n_options+3A↑r
.data:0000000000207058                                         ; quotearg_n_options:loc_316D↑r ...
.data:000000000020705C                 align 20h
.data:0000000000207060 ; void *slotvec
.data:0000000000207060 slotvec         dq offset slotvec0      ; DATA XREF: quotearg_n_options+29↑r
.data:0000000000207060                                         ; quotearg_n_options+76↑w ...
.data:0000000000207068                 align 10h
.data:0000000000207070 slotvec0        dq offset qword_100     ; DATA XREF: quotearg_n_options+54↑o
.data:0000000000207070                                         ; quotearg_n_options+187↑r ...
.data:0000000000207078 off_207078      dq offset slot0         ; DATA XREF: quotearg_free+62↑w
.data:0000000000207078 _data           ends
.data:0000000000207078
.bss:0000000000207080 ; ===========================================================================
.bss:0000000000207080
.bss:0000000000207080 ; Segment type: Uninitialized
.bss:0000000000207080 ; Segment permissions: Read/Write
.bss:0000000000207080 _bss            segment align_32 public 'BSS' use64
.bss:0000000000207080                 assume cs:_bss
.bss:0000000000207080                 ;org 207080h
.bss:0000000000207080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:0000000000207080                 public __bss_start ; weak
.bss:0000000000207080 __bss_start     dq ?                    ; DATA XREF: LOAD:0000000000000730↑o
.bss:0000000000207080                                         ; LOAD:0000000000000778↑o ...
.bss:0000000000207080                                         ; Alternative name is '__TMC_END__'
.bss:0000000000207080                                         ; program_invocation_short_name@@GLIBC_2.2.5
.bss:0000000000207080                                         ; _edata
.bss:0000000000207080                                         ; Copy of shared data
.bss:0000000000207088                 public stdout@@GLIBC_2_2_5
.bss:0000000000207088 ; FILE *stdout
.bss:0000000000207088 stdout@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000718↑o
.bss:0000000000207088                                         ; main+CC↑r ...
.bss:0000000000207088                                         ; Alternative name is 'stdout'
.bss:0000000000207088                                         ; Copy of shared data
.bss:0000000000207090                 public optind@@GLIBC_2_2_5
.bss:0000000000207090 optind@@GLIBC_2_2_5 dd ?                ; DATA XREF: LOAD:00000000000007A8↑o
.bss:0000000000207090                                         ; main:loc_1634↑r ...
.bss:0000000000207090                                         ; Alternative name is 'optind'
.bss:0000000000207090                                         ; Copy of shared data
.bss:0000000000207094                 align 8
.bss:0000000000207098                 public optarg@@GLIBC_2_2_5
.bss:0000000000207098 optarg@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:00000000000007C0↑o
.bss:0000000000207098                                         ; main+122↑r ...
.bss:0000000000207098                                         ; Alternative name is 'optarg'
.bss:0000000000207098                                         ; Copy of shared data
.bss:00000000002070A0                 public program_invocation_name@@GLIBC_2_2_5 ; weak
.bss:00000000002070A0 program_invocation_name@@GLIBC_2_2_5 dq ?
.bss:00000000002070A0                                         ; DATA XREF: LOAD:0000000000000748↑o
.bss:00000000002070A0                                         ; LOAD:0000000000000760↑o ...
.bss:00000000002070A0                                         ; Alternative name is '__progname_full@@GLIBC_2.2.5'
.bss:00000000002070A0                                         ; Copy of shared data
.bss:00000000002070A8                 align 20h
.bss:00000000002070C0                 public stderr@@GLIBC_2_2_5
.bss:00000000002070C0 ; FILE *stderr
.bss:00000000002070C0 stderr@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:0000000000000790↑o
.bss:00000000002070C0                                         ; usage+3D↑r ...
.bss:00000000002070C0                                         ; Alternative name is 'stderr'
.bss:00000000002070C0                                         ; Copy of shared data
.bss:00000000002070C8 completed_7697  db ?                    ; DATA XREF: __do_global_dtors_aux↑r
.bss:00000000002070C8                                         ; __do_global_dtors_aux+28↑w
.bss:00000000002070C9                 align 10h
.bss:00000000002070D0 ignore_EPIPE    db ?                    ; DATA XREF: close_stdout_set_ignore_EPIPE↑w
.bss:00000000002070D0                                         ; close_stdout+1B↑r
.bss:00000000002070D1                 align 8
.bss:00000000002070D8 file_name       dq ?                    ; DATA XREF: close_stdout_set_file_name↑w
.bss:00000000002070D8                                         ; close_stdout+56↑r
.bss:00000000002070E0                 public program_name
.bss:00000000002070E0 program_name    dq ?                    ; DATA XREF: main:loc_16C5↑r
.bss:00000000002070E0                                         ; usage+14↑r ...
.bss:00000000002070E8                 align 20h
.bss:0000000000207100 slot0           db    ? ;               ; DATA XREF: quotearg_n_options+FE↑o
.bss:0000000000207100                                         ; quotearg_free+46↑o ...
.bss:0000000000207101                 db    ? ;
.bss:0000000000207102                 db    ? ;
.bss:0000000000207103                 db    ? ;
.bss:0000000000207104                 db    ? ;
.bss:0000000000207105                 db    ? ;
.bss:0000000000207106                 db    ? ;
.bss:0000000000207107                 db    ? ;
.bss:0000000000207108                 db    ? ;
.bss:0000000000207109                 db    ? ;
.bss:000000000020710A                 db    ? ;
.bss:000000000020710B                 db    ? ;
.bss:000000000020710C                 db    ? ;
.bss:000000000020710D                 db    ? ;
.bss:000000000020710E                 db    ? ;
.bss:000000000020710F                 db    ? ;
.bss:0000000000207110                 db    ? ;
.bss:0000000000207111                 db    ? ;
.bss:0000000000207112                 db    ? ;
.bss:0000000000207113                 db    ? ;
.bss:0000000000207114                 db    ? ;
.bss:0000000000207115                 db    ? ;
.bss:0000000000207116                 db    ? ;
.bss:0000000000207117                 db    ? ;
.bss:0000000000207118                 db    ? ;
.bss:0000000000207119                 db    ? ;
.bss:000000000020711A                 db    ? ;
.bss:000000000020711B                 db    ? ;
.bss:000000000020711C                 db    ? ;
.bss:000000000020711D                 db    ? ;
.bss:000000000020711E                 db    ? ;
.bss:000000000020711F                 db    ? ;
.bss:0000000000207120                 db    ? ;
.bss:0000000000207121                 db    ? ;
.bss:0000000000207122                 db    ? ;
.bss:0000000000207123                 db    ? ;
.bss:0000000000207124                 db    ? ;
.bss:0000000000207125                 db    ? ;
.bss:0000000000207126                 db    ? ;
.bss:0000000000207127                 db    ? ;
.bss:0000000000207128                 db    ? ;
.bss:0000000000207129                 db    ? ;
.bss:000000000020712A                 db    ? ;
.bss:000000000020712B                 db    ? ;
.bss:000000000020712C                 db    ? ;
.bss:000000000020712D                 db    ? ;
.bss:000000000020712E                 db    ? ;
.bss:000000000020712F                 db    ? ;
.bss:0000000000207130                 db    ? ;
.bss:0000000000207131                 db    ? ;
.bss:0000000000207132                 db    ? ;
.bss:0000000000207133                 db    ? ;
.bss:0000000000207134                 db    ? ;
.bss:0000000000207135                 db    ? ;
.bss:0000000000207136                 db    ? ;
.bss:0000000000207137                 db    ? ;
.bss:0000000000207138                 db    ? ;
.bss:0000000000207139                 db    ? ;
.bss:000000000020713A                 db    ? ;
.bss:000000000020713B                 db    ? ;
.bss:000000000020713C                 db    ? ;
.bss:000000000020713D                 db    ? ;
.bss:000000000020713E                 db    ? ;
.bss:000000000020713F                 db    ? ;
.bss:0000000000207140                 db    ? ;
.bss:0000000000207141                 db    ? ;
.bss:0000000000207142                 db    ? ;
.bss:0000000000207143                 db    ? ;
.bss:0000000000207144                 db    ? ;
.bss:0000000000207145                 db    ? ;
.bss:0000000000207146                 db    ? ;
.bss:0000000000207147                 db    ? ;
.bss:0000000000207148                 db    ? ;
.bss:0000000000207149                 db    ? ;
.bss:000000000020714A                 db    ? ;
.bss:000000000020714B                 db    ? ;
.bss:000000000020714C                 db    ? ;
.bss:000000000020714D                 db    ? ;
.bss:000000000020714E                 db    ? ;
.bss:000000000020714F                 db    ? ;
.bss:0000000000207150                 db    ? ;
.bss:0000000000207151                 db    ? ;
.bss:0000000000207152                 db    ? ;
.bss:0000000000207153                 db    ? ;
.bss:0000000000207154                 db    ? ;
.bss:0000000000207155                 db    ? ;
.bss:0000000000207156                 db    ? ;
.bss:0000000000207157                 db    ? ;
.bss:0000000000207158                 db    ? ;
.bss:0000000000207159                 db    ? ;
.bss:000000000020715A                 db    ? ;
.bss:000000000020715B                 db    ? ;
.bss:000000000020715C                 db    ? ;
.bss:000000000020715D                 db    ? ;
.bss:000000000020715E                 db    ? ;
.bss:000000000020715F                 db    ? ;
.bss:0000000000207160                 db    ? ;
.bss:0000000000207161                 db    ? ;
.bss:0000000000207162                 db    ? ;
.bss:0000000000207163                 db    ? ;
.bss:0000000000207164                 db    ? ;
.bss:0000000000207165                 db    ? ;
.bss:0000000000207166                 db    ? ;
.bss:0000000000207167                 db    ? ;
.bss:0000000000207168                 db    ? ;
.bss:0000000000207169                 db    ? ;
.bss:000000000020716A                 db    ? ;
.bss:000000000020716B                 db    ? ;
.bss:000000000020716C                 db    ? ;
.bss:000000000020716D                 db    ? ;
.bss:000000000020716E                 db    ? ;
.bss:000000000020716F                 db    ? ;
.bss:0000000000207170                 db    ? ;
.bss:0000000000207171                 db    ? ;
.bss:0000000000207172                 db    ? ;
.bss:0000000000207173                 db    ? ;
.bss:0000000000207174                 db    ? ;
.bss:0000000000207175                 db    ? ;
.bss:0000000000207176                 db    ? ;
.bss:0000000000207177                 db    ? ;
.bss:0000000000207178                 db    ? ;
.bss:0000000000207179                 db    ? ;
.bss:000000000020717A                 db    ? ;
.bss:000000000020717B                 db    ? ;
.bss:000000000020717C                 db    ? ;
.bss:000000000020717D                 db    ? ;
.bss:000000000020717E                 db    ? ;
.bss:000000000020717F                 db    ? ;
.bss:0000000000207180                 db    ? ;
.bss:0000000000207181                 db    ? ;
.bss:0000000000207182                 db    ? ;
.bss:0000000000207183                 db    ? ;
.bss:0000000000207184                 db    ? ;
.bss:0000000000207185                 db    ? ;
.bss:0000000000207186                 db    ? ;
.bss:0000000000207187                 db    ? ;
.bss:0000000000207188                 db    ? ;
.bss:0000000000207189                 db    ? ;
.bss:000000000020718A                 db    ? ;
.bss:000000000020718B                 db    ? ;
.bss:000000000020718C                 db    ? ;
.bss:000000000020718D                 db    ? ;
.bss:000000000020718E                 db    ? ;
.bss:000000000020718F                 db    ? ;
.bss:0000000000207190                 db    ? ;
.bss:0000000000207191                 db    ? ;
.bss:0000000000207192                 db    ? ;
.bss:0000000000207193                 db    ? ;
.bss:0000000000207194                 db    ? ;
.bss:0000000000207195                 db    ? ;
.bss:0000000000207196                 db    ? ;
.bss:0000000000207197                 db    ? ;
.bss:0000000000207198                 db    ? ;
.bss:0000000000207199                 db    ? ;
.bss:000000000020719A                 db    ? ;
.bss:000000000020719B                 db    ? ;
.bss:000000000020719C                 db    ? ;
.bss:000000000020719D                 db    ? ;
.bss:000000000020719E                 db    ? ;
.bss:000000000020719F                 db    ? ;
.bss:00000000002071A0                 db    ? ;
.bss:00000000002071A1                 db    ? ;
.bss:00000000002071A2                 db    ? ;
.bss:00000000002071A3                 db    ? ;
.bss:00000000002071A4                 db    ? ;
.bss:00000000002071A5                 db    ? ;
.bss:00000000002071A6                 db    ? ;
.bss:00000000002071A7                 db    ? ;
.bss:00000000002071A8                 db    ? ;
.bss:00000000002071A9                 db    ? ;
.bss:00000000002071AA                 db    ? ;
.bss:00000000002071AB                 db    ? ;
.bss:00000000002071AC                 db    ? ;
.bss:00000000002071AD                 db    ? ;
.bss:00000000002071AE                 db    ? ;
.bss:00000000002071AF                 db    ? ;
.bss:00000000002071B0                 db    ? ;
.bss:00000000002071B1                 db    ? ;
.bss:00000000002071B2                 db    ? ;
.bss:00000000002071B3                 db    ? ;
.bss:00000000002071B4                 db    ? ;
.bss:00000000002071B5                 db    ? ;
.bss:00000000002071B6                 db    ? ;
.bss:00000000002071B7                 db    ? ;
.bss:00000000002071B8                 db    ? ;
.bss:00000000002071B9                 db    ? ;
.bss:00000000002071BA                 db    ? ;
.bss:00000000002071BB                 db    ? ;
.bss:00000000002071BC                 db    ? ;
.bss:00000000002071BD                 db    ? ;
.bss:00000000002071BE                 db    ? ;
.bss:00000000002071BF                 db    ? ;
.bss:00000000002071C0                 db    ? ;
.bss:00000000002071C1                 db    ? ;
.bss:00000000002071C2                 db    ? ;
.bss:00000000002071C3                 db    ? ;
.bss:00000000002071C4                 db    ? ;
.bss:00000000002071C5                 db    ? ;
.bss:00000000002071C6                 db    ? ;
.bss:00000000002071C7                 db    ? ;
.bss:00000000002071C8                 db    ? ;
.bss:00000000002071C9                 db    ? ;
.bss:00000000002071CA                 db    ? ;
.bss:00000000002071CB                 db    ? ;
.bss:00000000002071CC                 db    ? ;
.bss:00000000002071CD                 db    ? ;
.bss:00000000002071CE                 db    ? ;
.bss:00000000002071CF                 db    ? ;
.bss:00000000002071D0                 db    ? ;
.bss:00000000002071D1                 db    ? ;
.bss:00000000002071D2                 db    ? ;
.bss:00000000002071D3                 db    ? ;
.bss:00000000002071D4                 db    ? ;
.bss:00000000002071D5                 db    ? ;
.bss:00000000002071D6                 db    ? ;
.bss:00000000002071D7                 db    ? ;
.bss:00000000002071D8                 db    ? ;
.bss:00000000002071D9                 db    ? ;
.bss:00000000002071DA                 db    ? ;
.bss:00000000002071DB                 db    ? ;
.bss:00000000002071DC                 db    ? ;
.bss:00000000002071DD                 db    ? ;
.bss:00000000002071DE                 db    ? ;
.bss:00000000002071DF                 db    ? ;
.bss:00000000002071E0                 db    ? ;
.bss:00000000002071E1                 db    ? ;
.bss:00000000002071E2                 db    ? ;
.bss:00000000002071E3                 db    ? ;
.bss:00000000002071E4                 db    ? ;
.bss:00000000002071E5                 db    ? ;
.bss:00000000002071E6                 db    ? ;
.bss:00000000002071E7                 db    ? ;
.bss:00000000002071E8                 db    ? ;
.bss:00000000002071E9                 db    ? ;
.bss:00000000002071EA                 db    ? ;
.bss:00000000002071EB                 db    ? ;
.bss:00000000002071EC                 db    ? ;
.bss:00000000002071ED                 db    ? ;
.bss:00000000002071EE                 db    ? ;
.bss:00000000002071EF                 db    ? ;
.bss:00000000002071F0                 db    ? ;
.bss:00000000002071F1                 db    ? ;
.bss:00000000002071F2                 db    ? ;
.bss:00000000002071F3                 db    ? ;
.bss:00000000002071F4                 db    ? ;
.bss:00000000002071F5                 db    ? ;
.bss:00000000002071F6                 db    ? ;
.bss:00000000002071F7                 db    ? ;
.bss:00000000002071F8                 db    ? ;
.bss:00000000002071F9                 db    ? ;
.bss:00000000002071FA                 db    ? ;
.bss:00000000002071FB                 db    ? ;
.bss:00000000002071FC                 db    ? ;
.bss:00000000002071FD                 db    ? ;
.bss:00000000002071FE                 db    ? ;
.bss:00000000002071FF                 db    ? ;
.bss:0000000000207200 default_quoting_options xmmword ?       ; DATA XREF: clone_quoting_options+12↑o
.bss:0000000000207200                                         ; get_quoting_style↑o ...
.bss:0000000000207210 xmmword_207210  xmmword ?               ; DATA XREF: quotearg_char_mem+41↑r
.bss:0000000000207210                                         ; quotearg_n_custom_mem+39↑r
.bss:0000000000207220 xmmword_207220  xmmword ?               ; DATA XREF: quotearg_char_mem+4E↑r
.bss:0000000000207220                                         ; quotearg_n_custom_mem+46↑r
.bss:0000000000207230 qword_207230    dq ?                    ; DATA XREF: quotearg_char_mem+16↑r
.bss:0000000000207230                                         ; quotearg_n_custom_mem+7↑r
.bss:0000000000207230 _bss            ends
.bss:0000000000207230
.prgend:0000000000207238 ; ===========================================================================
.prgend:0000000000207238
.prgend:0000000000207238 ; Segment type: Zero-length
.prgend:0000000000207238 _prgend         segment byte public '' use64
.prgend:0000000000207238 _end            label byte
.prgend:0000000000207238 _prgend         ends
.prgend:0000000000207238
extern:0000000000207240 ; ===========================================================================
extern:0000000000207240
extern:0000000000207240 ; Segment type: Externs
extern:0000000000207240 ; extern
extern:0000000000207240 ; void free(void *ptr)
extern:0000000000207240                 extrn free:near         ; CODE XREF: _free↑j
extern:0000000000207240                                         ; DATA XREF: .got:free_ptr↑o
extern:0000000000207248 ; void __noreturn abort(void)
extern:0000000000207248                 extrn abort:near        ; CODE XREF: _abort↑j
extern:0000000000207248                                         ; DATA XREF: .got:abort_ptr↑o
extern:0000000000207250 ; int *_errno_location(void)
extern:0000000000207250                 extrn __errno_location:near
extern:0000000000207250                                         ; CODE XREF: ___errno_location↑j
extern:0000000000207250                                         ; DATA XREF: .got:__errno_location_ptr↑o
extern:0000000000207258 ; int strncmp(const char *s1, const char *s2, size_t n)
extern:0000000000207258                 extrn strncmp:near      ; CODE XREF: _strncmp↑j
extern:0000000000207258                                         ; DATA XREF: .got:strncmp_ptr↑o
extern:0000000000207260 ; void __noreturn exit(int status)
extern:0000000000207260                 extrn _exit:near        ; CODE XREF: __exit↑j
extern:0000000000207260                                         ; DATA XREF: .got:_exit_ptr↑o
extern:0000000000207268 ; size_t _fpending(FILE *fp)
extern:0000000000207268                 extrn __fpending:near   ; CODE XREF: ___fpending↑j
extern:0000000000207268                                         ; DATA XREF: .got:__fpending_ptr↑o
extern:0000000000207270 ; char *textdomain(const char *domainname)
extern:0000000000207270                 extrn textdomain:near   ; CODE XREF: _textdomain↑j
extern:0000000000207270                                         ; DATA XREF: .got:textdomain_ptr↑o
extern:0000000000207278 ; int fclose(FILE *stream)
extern:0000000000207278                 extrn fclose:near       ; CODE XREF: _fclose↑j
extern:0000000000207278                                         ; DATA XREF: .got:fclose_ptr↑o
extern:0000000000207280 ; char *bindtextdomain(const char *domainname, const char *dirname)
extern:0000000000207280                 extrn bindtextdomain:near
extern:0000000000207280                                         ; CODE XREF: _bindtextdomain↑j
extern:0000000000207280                                         ; DATA XREF: .got:bindtextdomain_ptr↑o
extern:0000000000207288 ; char *dcgettext(const char *domainname, const char *msgid, int category)
extern:0000000000207288                 extrn dcgettext:near    ; CODE XREF: _dcgettext↑j
extern:0000000000207288                                         ; DATA XREF: .got:dcgettext_ptr↑o
extern:0000000000207290 ; size_t _ctype_get_mb_cur_max(void)
extern:0000000000207290                 extrn __ctype_get_mb_cur_max:near
extern:0000000000207290                                         ; CODE XREF: ___ctype_get_mb_cur_max↑j
extern:0000000000207290                                         ; DATA XREF: .got:__ctype_get_mb_cur_max_ptr↑o
extern:0000000000207298 ; size_t strlen(const char *s)
extern:0000000000207298                 extrn strlen:near       ; CODE XREF: _strlen↑j
extern:0000000000207298                                         ; DATA XREF: .got:strlen_ptr↑o
extern:00000000002072A0                 extrn __stack_chk_fail:near
extern:00000000002072A0                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00000000002072A0                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00000000002072A8 ; int getopt_long(int argc, char *const *argv, const char *shortopts, const struct option *longopts, int *longind)
extern:00000000002072A8                 extrn getopt_long:near  ; CODE XREF: _getopt_long↑j
extern:00000000002072A8                                         ; DATA XREF: .got:getopt_long_ptr↑o
extern:00000000002072B0 ; size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *p)
extern:00000000002072B0                 extrn mbrtowc:near      ; CODE XREF: _mbrtowc↑j
extern:00000000002072B0                                         ; DATA XREF: .got:mbrtowc_ptr↑o
extern:00000000002072B8 ; char *strrchr(const char *s, int c)
extern:00000000002072B8                 extrn strrchr:near      ; CODE XREF: _strrchr↑j
extern:00000000002072B8                                         ; DATA XREF: .got:strrchr_ptr↑o
extern:00000000002072C0 ; __off_t lseek(int fd, __off_t offset, int whence)
extern:00000000002072C0                 extrn lseek:near        ; CODE XREF: _lseek↑j
extern:00000000002072C0                                         ; DATA XREF: .got:lseek_ptr↑o
extern:00000000002072C8 ; void *memset(void *s, int c, size_t n)
extern:00000000002072C8                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00000000002072C8                                         ; DATA XREF: .got:memset_ptr↑o
extern:00000000002072D0 ; int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00000000002072D0                 extrn __libc_start_main:near
extern:00000000002072D0                                         ; CODE XREF: start+24↑p
extern:00000000002072D0                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00000000002072D8 ; int memcmp(const void *s1, const void *s2, size_t n)
extern:00000000002072D8                 extrn memcmp:near       ; CODE XREF: _memcmp↑j
extern:00000000002072D8                                         ; DATA XREF: .got:memcmp_ptr↑o
extern:00000000002072E0 ; int fputs_unlocked(const char *s, FILE *stream)
extern:00000000002072E0                 extrn fputs_unlocked:near
extern:00000000002072E0                                         ; CODE XREF: _fputs_unlocked↑j
extern:00000000002072E0                                         ; DATA XREF: .got:fputs_unlocked_ptr↑o
extern:00000000002072E8 ; void *calloc(size_t nmemb, size_t size)
extern:00000000002072E8                 extrn calloc:near       ; CODE XREF: _calloc↑j
extern:00000000002072E8                                         ; DATA XREF: .got:calloc_ptr↑o
extern:00000000002072F0 ; void *memcpy(void *dest, const void *src, size_t n)
extern:00000000002072F0                 extrn memcpy:near       ; CODE XREF: _memcpy↑j
extern:00000000002072F0                                         ; DATA XREF: .got:memcpy_ptr↑o
extern:00000000002072F8 ; int fileno(FILE *stream)
extern:00000000002072F8                 extrn fileno:near       ; CODE XREF: _fileno↑j
extern:00000000002072F8                                         ; DATA XREF: .got:fileno_ptr↑o
extern:0000000000207300 ; void *malloc(size_t size)
extern:0000000000207300                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000000000207300                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000000000207308 ; int fflush(FILE *stream)
extern:0000000000207308                 extrn fflush:near       ; CODE XREF: _fflush↑j
extern:0000000000207308                                         ; DATA XREF: .got:fflush_ptr↑o
extern:0000000000207310 ; char *nl_langinfo(nl_item item)
extern:0000000000207310                 extrn nl_langinfo:near  ; CODE XREF: _nl_langinfo↑j
extern:0000000000207310                                         ; DATA XREF: .got:nl_langinfo_ptr↑o
extern:0000000000207318 ; int _freading(FILE *fp)
extern:0000000000207318                 extrn __freading:near   ; CODE XREF: ___freading↑j
extern:0000000000207318                                         ; DATA XREF: .got:__freading_ptr↑o
extern:0000000000207320 ; void *realloc(void *ptr, size_t size)
extern:0000000000207320                 extrn realloc:near      ; CODE XREF: _realloc↑j
extern:0000000000207320                                         ; DATA XREF: .got:realloc_ptr↑o
extern:0000000000207328 ; char *setlocale(int category, const char *locale)
extern:0000000000207328                 extrn setlocale:near    ; CODE XREF: _setlocale↑j
extern:0000000000207328                                         ; DATA XREF: .got:setlocale_ptr↑o
extern:0000000000207330                 extrn __printf_chk:near ; CODE XREF: ___printf_chk↑j
extern:0000000000207330                                         ; DATA XREF: .got:__printf_chk_ptr↑o
extern:0000000000207338 ; void error(int status, int errnum, const char *format, ...)
extern:0000000000207338                 extrn error:near        ; CODE XREF: _error↑j
extern:0000000000207338                                         ; DATA XREF: .got:error_ptr↑o
extern:0000000000207340 ; int fseeko(FILE *stream, __off_t off, int whence)
extern:0000000000207340                 extrn fseeko:near       ; CODE XREF: _fseeko↑j
extern:0000000000207340                                         ; DATA XREF: .got:fseeko_ptr↑o
extern:0000000000207348 ; int __fastcall _cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle)
extern:0000000000207348                 extrn __cxa_atexit:near ; CODE XREF: ___cxa_atexit↑j
extern:0000000000207348                                         ; DATA XREF: .got:__cxa_atexit_ptr↑o
extern:0000000000207350 ; void __noreturn exit(int status)
extern:0000000000207350                 extrn exit:near         ; CODE XREF: _exit↑j
extern:0000000000207350                                         ; DATA XREF: .got:exit_ptr↑o
extern:0000000000207358 ; size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s)
extern:0000000000207358                 extrn fwrite:near       ; CODE XREF: _fwrite↑j
extern:0000000000207358                                         ; DATA XREF: .got:fwrite_ptr↑o
extern:0000000000207360                 extrn __fprintf_chk:near
extern:0000000000207360                                         ; CODE XREF: ___fprintf_chk↑j
extern:0000000000207360                                         ; DATA XREF: .got:__fprintf_chk_ptr↑o
extern:0000000000207368 ; int mbsinit(const mbstate_t *ps)
extern:0000000000207368                 extrn mbsinit:near      ; CODE XREF: _mbsinit↑j
extern:0000000000207368                                         ; DATA XREF: .got:mbsinit_ptr↑o
extern:0000000000207370 ; int iswprint(wint_t wc)
extern:0000000000207370                 extrn iswprint:near     ; CODE XREF: _iswprint↑j
extern:0000000000207370                                         ; DATA XREF: .got:iswprint_ptr↑o
extern:0000000000207378 ; int __fastcall __cxa_finalize(void *)
extern:0000000000207378                 extrn __imp___cxa_finalize:near ; weak
extern:0000000000207378                                         ; CODE XREF: __cxa_finalize↑j
extern:0000000000207378                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000000000207380 ; const unsigned __int16 **_ctype_b_loc(void)
extern:0000000000207380                 extrn __ctype_b_loc:near
extern:0000000000207380                                         ; CODE XREF: ___ctype_b_loc↑j
extern:0000000000207380                                         ; DATA XREF: .got:__ctype_b_loc_ptr↑o
extern:0000000000207388                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000000000207388                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:0000000000207390                 extrn __gmon_start__:near ; weak
extern:0000000000207390                                         ; CODE XREF: _init_proc+10↑p
extern:0000000000207390                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000000000207398                 extrn _ITM_registerTMCloneTable ; weak
extern:0000000000207398                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000000000207398
extern:0000000000207398
extern:0000000000207398                 end start
